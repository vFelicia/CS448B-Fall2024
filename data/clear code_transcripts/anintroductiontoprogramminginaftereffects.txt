00:00 - and welcome to an introduction to
00:01 - programming and after effects
00:03 - in this video you will learn how to use
00:05 - code to create flexible and dynamic
00:07 - animations
00:08 - for example you will learn how to create
00:10 - a box that automatically scales with the
00:12 - text inside
00:13 - you will learn about animations driven
00:14 - by code you will learn about powerful
00:16 - custom effects and
00:17 - quite a bit more overall this video
00:20 - covers 15 projects in total
00:22 - and it will become progressively more
00:23 - complex and i assume that you have no
00:25 - experience with coding whatsoever
00:28 - but i do expect that you know the basics
00:30 - of after effects already and finally
00:32 - all of the project files are available
00:34 - on github so i hope you enjoy
00:36 - hello and welcome to the first video in
00:38 - this series
00:39 - now for this video we are not going to
00:41 - do a proper project
00:43 - instead we are just going to do some
00:45 - really simple exercises
00:46 - to get started on coding and after
00:48 - effects and this is going to be a really
00:50 - good start to talk about the most
00:52 - sophisticated examples in the next few
00:54 - videos
00:55 - and there are four topics that i really
00:57 - want to cover in this video
00:59 - and let's go for them step by step i
01:00 - think that's going to be an easier way
01:01 - to approach this
01:03 - and the very first one is how can we
01:05 - write code and after effects in the
01:07 - first place
01:08 - and that is actually surprisingly simple
01:11 - because all you have to understand is
01:13 - that any property
01:14 - can get code or more specifically
01:17 - anytime you see some kind of property
01:19 - with a stopwatch
01:20 - you can write code for this property
01:24 - and let's actually have a look at this
01:25 - in after effects i think that's going to
01:26 - be the easiest way to approach this
01:29 - so here we have an incredibly simple
01:32 - setup for after effects
01:33 - i have a single composition that is
01:36 - called intro
01:37 - and inside of this composition i have
01:38 - one text layer that just says test
01:41 - and nothing else is going on in here and
01:44 - now if i wanted to animate any of the
01:46 - properties of this text layer
01:49 - i would have to open its properties and
01:53 - then
01:53 - look at all the different properties
01:55 - that are inside of it
01:57 - so in here you can see quite a few
01:59 - different stopwatches we have one for
02:01 - source text
02:02 - one for grouping and then we have anchor
02:04 - point position
02:05 - scale rotation and opacity and all of
02:08 - these
02:08 - could receive code however fill in
02:11 - stroke
02:12 - intercharacter blending and path could
02:14 - not get code because they don't have a
02:16 - stopwatch
02:17 - and let's say i want to influence the
02:19 - source text property
02:21 - and for that i hold alt and i click on
02:24 - the stopwatch itself
02:26 - and if i do that we can see some text
02:29 - and the screen run black
02:30 - but that only happens if you have this
02:32 - text selected if i click outside of it
02:34 - this disappears and in here
02:37 - you could write all of your code now
02:40 - obviously
02:41 - we don't really know how to do that yet
02:43 - but that is actually something we can
02:45 - talk about
02:46 - right now and that is the most
02:49 - fundamental concept of coding in after
02:51 - effects and that concept is
02:53 - values whenever you write code for
02:55 - property and after effects
02:57 - this code has to result in a value and
03:00 - the value has to be appropriate for the
03:02 - property as well
03:04 - so for example for the source text
03:05 - property we would need some kind of text
03:08 - and for the rotation property we would
03:10 - need a single number
03:12 - so those two would be different kinds of
03:14 - values
03:16 - and if you wanted to create numbers all
03:18 - you have to do is to write a number
03:20 - however if you wanted to write some text
03:22 - you would have to put quotations around
03:24 - that text
03:25 - and with that we have the most basic
03:27 - kinds of data types
03:29 - so let's actually try this in after
03:31 - effects and let's see how this is going
03:32 - to look like
03:34 - so here i am back in the setup we just
03:36 - left a second ago
03:38 - and i still want to write some code for
03:40 - my source text property
03:42 - and let's say i just want to write a
03:43 - number in here so i just type
03:45 - one two three which would be a number
03:49 - so now all i have to do is to click
03:51 - outside of this text box
03:54 - and we get one two three exactly the
03:56 - value we specified in here
03:59 - now what we could also do is to write
04:01 - some text in here
04:02 - and for that we would need quotation
04:04 - marks
04:05 - so let me write them and in here i want
04:07 - to write some
04:09 - text and now if i click outside of it
04:12 - we get some text and that really is the
04:16 - basics of
04:17 - how you can approach different
04:18 - properties on the most basic level
04:20 - and you could just write some
04:22 - information in here and then this would
04:24 - update
04:25 - and this would just be for source text
04:28 - or we could also look at
04:30 - let me scroll down a tiny bit let's say
04:32 - i want to look at rotation
04:35 - so on the stopwatch i hold alt and left
04:38 - click on it
04:39 - then i get a new code window and in here
04:42 - i could just write a number
04:43 - so let me write let's say 80.
04:47 - and here something that can be quite
04:48 - confusing you
04:50 - don't activate the scope by pressing
04:52 - enter this will just get you to the next
04:53 - line
04:54 - instead you have to click outside of
04:56 - this window
04:57 - but if i do that we get a rotation of
04:59 - 80.
05:01 - and this seems to be working pretty well
05:03 - but now here's one thing
05:06 - that if i wanted to pass in some text in
05:08 - here
05:09 - let's say text
05:12 - then after effects would give me a
05:14 - warning sign that you can see here
05:17 - and if i click again on my code i get an
05:19 - error couldn't turn result into a
05:21 - numeric value
05:22 - where effectively after effects is
05:24 - telling us that it can't do anything
05:26 - with this information it can't rotate
05:28 - this object around text it just doesn't
05:30 - work and i think it kind of makes sense
05:32 - why because we need a number to rotate
05:35 - and all right let me get rid of that and
05:38 - if you just delete all of the code then
05:40 - after effects is getting rid of all of
05:41 - this anyway
05:42 - cool so now we have the most
05:46 - basic kind of setup that we can put a
05:49 - single
05:50 - value inside of a property and this
05:53 - could either be text
05:54 - or it could be a number both would be
05:56 - fine however now
05:58 - for some properties we need a different
05:59 - kind of value so if we look at
06:01 - position or scale they need neither
06:05 - text nor a single number instead they
06:08 - need two numbers combined
06:09 - the same for anchor point actually all
06:11 - three of these
06:12 - need two numbers combined so
06:16 - how would that work and well
06:19 - let's try so let's say for position so
06:22 - on the stopwatch i hold alt and left
06:24 - click
06:26 - and now i can give it some code and now
06:29 - i have to figure out
06:30 - how to enter two numbers in here and for
06:33 - that
06:33 - after effects has a different type of
06:35 - value and that is called an array
06:37 - and arrays are created with square
06:40 - brackets
06:41 - and then inside of this you can add
06:42 - multiple values now this can be more
06:44 - than two and we are going to see this
06:46 - very soon but the position property
06:49 - looks for an array with two values
06:51 - inside
06:52 - so if i placed inside here let's say 100
06:55 - and 200 then the first one would be the
06:58 - x position
06:59 - so this 960 here and the second one
07:02 - would be the y position
07:03 - so this 540 here
07:07 - and now if i click outside of the window
07:09 - we can see that our text has moved to
07:11 - position 100
07:12 - and 200. so what that specifically means
07:15 - is that this anchor point is 100 pixels
07:18 - from the left and 200 pixels from the
07:20 - top
07:21 - and with that we have the three most
07:23 - common types of values that you are
07:25 - going to use in after effects
07:26 - we have numbers we have text and we have
07:29 - arrays
07:30 - but that still isn't going to help us
07:32 - all that much because we want to create
07:33 - some logic
07:34 - and for that we have to write multiple
07:36 - lines of code
07:39 - and to achieve that we are going to need
07:41 - two concepts
07:42 - number one is the order of execution and
07:44 - number two is
07:45 - variables and those two concepts work
07:48 - really closely together
07:50 - and let's talk about the theory first
07:51 - and then we're going to implement it
07:53 - the order of execution really just means
07:55 - that after effects when it looks at code
07:58 - it starts at the top and then works
07:59 - itself downwards so the first line of
08:01 - code is going to be executed first
08:03 - then comes the second line then comes
08:04 - the third line and so on
08:07 - and to connect these individual lines of
08:09 - code you need variables
08:10 - and a variable in the most basic sense
08:13 - is a box with a name
08:14 - that can contain a value and then you
08:16 - can reference this box across multiple
08:19 - lines
08:20 - for example on the first line of your
08:21 - code you can put a value inside of this
08:23 - box
08:24 - and then on the second line of code you
08:25 - can add a value towards the value inside
08:28 - of this box
08:28 - and then on the third line you can set
08:30 - this value as the value for your
08:32 - property
08:33 - and variables are created in a very
08:35 - specific way we first need the keyword
08:37 - var then we need the name of our
08:39 - variable and
08:41 - to assign it a value we need the equal
08:43 - sign and then the value we want to
08:44 - assign it
08:46 - so let's say if i wanted to create a
08:48 - variable with the name
08:49 - a and give it the value of 5 it would be
08:52 - var
08:52 - a equals 5. and in our next line of code
08:56 - if i wanted to add let's say 10 towards
08:58 - it i could just reference a
09:00 - and then add 10 towards it and there was
09:04 - a ton of theory
09:05 - let's actually implement all of this
09:07 - straight into after effects
09:09 - so here i'm back in after effects and
09:11 - there's one very useful thing that i
09:13 - haven't talked about yet
09:14 - that you can deactivate code so for
09:17 - example at the position property
09:19 - if i click on this equal sign then it's
09:22 - crossed out
09:23 - and now the code for this property is
09:24 - deactivated and i think right now this
09:27 - is quite useful because i want this to
09:28 - be kind of in the middle
09:29 - of the screen now
09:33 - let's give some code to the rotation
09:35 - property
09:36 - so i ord and left click on it and in
09:39 - here
09:40 - i want to create a new variable so i
09:42 - type the var keyword
09:44 - and now i have to give this variable a
09:46 - name and
09:47 - in here there are some restrictions on
09:49 - how you can name your variable
09:51 - the most important one is that your
09:53 - variable name has to be one connected
09:55 - string of characters
09:58 - so that we can't have a space between
10:00 - different words
10:01 - if you wanted to separate your words you
10:03 - would have to go with an underscore sign
10:05 - but besides that you can basically use
10:07 - any letter or number
10:09 - and in my case let's just go with the
10:11 - variable name
10:12 - test underscore value so this would be a
10:16 - perfectly fine variable name
10:18 - and now to assign this a value i have to
10:21 - use the equal sign
10:24 - and let's give it the value of 5
10:27 - and this would be the first line of code
10:30 - now to go to a second line
10:32 - i can press enter
10:35 - and now i would have the second line of
10:37 - code
10:38 - and what i could be doing in here for
10:40 - example
10:41 - is to type test value and now assign it
10:46 - another value and what i want to do
10:49 - is to choose my test value again and i
10:52 - want to add
10:53 - let's say 10 towards it
10:56 - so what we have done here is we first
10:58 - created a variable with
11:00 - the value of 5 and on the next line we
11:02 - have taken that value
11:04 - and assigned it itself that's the number
11:06 - 10.
11:08 - and you can use very simple math
11:09 - operations like you have done in math
11:11 - so this wouldn't have to be a plus this
11:13 - could be a minus it could be a division
11:15 - or it could be a multiplication but for
11:17 - now i just want a plus
11:19 - and now we need one more line of code
11:22 - so let me press enter again and now what
11:25 - i have to do
11:26 - is to just write test value nothing else
11:29 - and that is really important and let me
11:31 - explain why
11:32 - that so far we have created a variable
11:35 - with the value of 5
11:37 - and then we have changed this value but
11:39 - what we have not done
11:40 - is to tell after effects what value we
11:43 - want for this rotation property
11:45 - and for that we need the last line of
11:46 - code
11:48 - yet we just tell after effects that this
11:49 - is going to be the value we want for
11:51 - this property
11:52 - so this value just has to be there by
11:54 - the end just by itself
11:56 - and then after effects is going to look
11:57 - at it and assign this to value
12:00 - so if i clicked outside of this field we
12:02 - should theoretically see
12:03 - 15 so 5 plus 10. and let me click
12:06 - outside of it
12:07 - and we can see if you look at the
12:09 - property value you can see
12:10 - 15. so this one is working now while
12:13 - this
12:14 - is working there is a potential for an
12:17 - error
12:18 - that sometimes these lines of code can
12:20 - get really long
12:22 - and this could make it confusing in
12:24 - terms of where a line ends and where
12:25 - neverline begins
12:27 - so what you usually see at the end of
12:28 - every line you see a semicolon
12:32 - and this is telling after effects very
12:34 - specifically that this line of code is
12:35 - ending here
12:37 - and this is generally really good
12:39 - practice but if i clicked outside of
12:40 - this window you couldn't really see a
12:42 - result
12:44 - but alright with that we have covered
12:45 - some of the most fundamental concepts of
12:47 - programming and after effects
12:49 - it hasn't done too much yet but in the
12:51 - next tutorials we are going to see
12:52 - much more interesting examples but
12:56 - before we get to that
12:57 - let's do an exercise and i want you guys
12:59 - to play around with the opacity property
13:02 - and what i want you guys to do for the
13:03 - opacity is to create a variable with
13:06 - the value of 20 and then multiply this
13:08 - value by 3
13:10 - and then set the resulting value to be
13:11 - the value for the property
13:13 - so pause the video now and try this
13:18 - yourself
13:21 - so here we are still in my code editor
13:23 - and let me minimize
13:24 - all the other parts because i'm not
13:26 - going to need them for now
13:28 - and i want to look at opacity so i alt
13:31 - left click on it
13:32 - and now i get some default code that i
13:34 - just want to delete
13:36 - and i want to start by creating a new
13:38 - variable with the value of 20
13:40 - and for the name let's give it opacity
13:45 - value and this is just going to be 20
13:49 - then a double colon and now i want to
13:52 - multiply this value by
13:53 - 20. and for that i'm just going to write
13:57 - opacity value is equal to
14:00 - opacity value so itself and then
14:03 - multiplied by 3.
14:05 - then i want another semicolon and then
14:08 - i'm telling after effects that a
14:10 - positive value is supposed to be the
14:12 - value
14:12 - for this property and now if a math
14:15 - isn't completely wrong
14:16 - this should be 60 so let me click
14:19 - outside of the field
14:20 - and that's exactly what we're seeing 60
14:22 - so i hope all of that makes sense and
14:24 - i'll see you in the next video where we
14:25 - start with our first actual project
14:28 - all right hello and welcome to the first
14:31 - actual project
14:32 - and here's what we are going to make i
14:34 - have a circle and a text
14:36 - and whenever i move the text i also move
14:38 - the circle
14:39 - however i only move the circle up and
14:41 - down if i move the text left and right
14:43 - the circle is going to ignore that
14:46 - and i think it's actually best to jump
14:47 - straight into after effects and let's
14:49 - have a look at this
14:50 - so here i'm in my basic setup i have a
14:53 - new composition
14:54 - and instead of this composition i have a
14:55 - text layer and a circle
14:57 - which is a text layer and a circle
14:58 - fairly straightforward
15:00 - and now whenever i move this text layer
15:02 - i also want to move this circle
15:05 - which doesn't work right now very
15:06 - obviously
15:08 - and for that i have to look at the
15:10 - position properties
15:12 - so with circle selected i press p and
15:15 - also with move selected i press p
15:17 - as well so i get the position properties
15:19 - of both of these layers
15:21 - and the first thing i have to do is in
15:24 - the circle
15:25 - i want to separate the position so i
15:27 - left click on position
15:28 - and i click on separate dimensions so
15:31 - now we have an x position
15:32 - and a y position and the one i want to
15:36 - change
15:36 - is the y position so i alt left click on
15:39 - the stopwatch here
15:40 - and now i get the default value and let
15:42 - me get rid of that
15:44 - so in here we could just write some
15:46 - number to influence the height
15:48 - of the circle so if i just wrote 100 in
15:51 - here
15:51 - and clicked outside of the box our
15:54 - circle would be
15:54 - far at the top and one slightly
15:57 - confusing thing in here
15:59 - is that to go downwards you have to
16:01 - increase the number and if you want to
16:02 - go upwards you have to decrease the
16:04 - number
16:05 - so the y-axis is inverted which can be
16:08 - quite confusing but well we're not going
16:10 - to set the value anyway ourselves
16:12 - instead what we want to do is to look at
16:14 - the y-value
16:15 - of this text and change that so what i
16:19 - want to get
16:19 - is this value here so
16:23 - when i look at my circle i would have to
16:25 - write some code to first target
16:27 - this layer and then this specific
16:29 - property and this would be
16:31 - quite complex but after effects has a
16:33 - very neat way to get around that
16:35 - and that's the pick whip you have
16:38 - probably used the pick whip before to
16:39 - make
16:40 - one layer the child of another layer so
16:42 - you could move them together
16:44 - but when you start to write some
16:45 - expressions you can use a pick whip for
16:48 - every single property
16:50 - so with this selected i get another pick
16:53 - whip and now i can select
16:54 - specific values and what i want to
16:56 - select is the y value
16:58 - of the position property of the text so
17:00 - if that's selected
17:02 - i get some more text in here and if you
17:06 - look at this this should actually see
17:07 - fairly straightforward
17:09 - so we start in this composition then we
17:11 - add a dot
17:12 - and then we add layer so we look at
17:14 - layer move which is this move layer then
17:18 - we look at transform
17:19 - and then we look at position and then we
17:21 - add one afterwards
17:23 - what the one means we don't have to
17:24 - worry about just yet
17:27 - but we are going to see that very soon
17:29 - but by itself this should look
17:31 - fairly straightforward and readable and
17:33 - now if i click
17:34 - outside of this box the circle moved
17:37 - back to the height
17:38 - of this move layer and now what i can do
17:41 - is to move this layer
17:42 - up and down and the circle is going to
17:44 - move along with it
17:46 - however if i move the text left and
17:48 - right it is going to ignore that
17:51 - and with that we have created a really
17:53 - basic setup
17:54 - that works pretty well so with that
17:58 - we have a pretty good start and let's do
18:00 - an exercise on this
18:01 - and here's what i want you guys to do
18:03 - right now the circle is connected to the
18:05 - text via the y
18:06 - property or the y position now change
18:09 - this
18:09 - that the circle is only following in the
18:11 - x position and ignores the y position
18:14 - and in addition to that also add an
18:16 - offset of 100 pixels to the right
18:19 - so the circle is always 100 pixels
18:21 - further to the right of the move text
18:24 - so pause the video now and try this
18:26 - yourself
18:33 - alright welcome back it was a slightly
18:35 - more advanced exercise but let's try to
18:37 - do it together now
18:39 - so here i'm back in after effects and
18:41 - the first thing i want to do
18:42 - is to disable this line of code here so
18:46 - i
18:46 - click on the equal sign so now this is
18:48 - disabled
18:50 - so we can move the text and nothing is
18:51 - going to happen anymore
18:53 - and instead what i want to do is to give
18:55 - the x position some code
18:57 - so i always left click on it and now i
18:59 - get some code here
19:00 - and i want to get rid of that and
19:02 - instead i want to use the pick whip
19:05 - to look for the x position of the move
19:08 - text
19:08 - layer and now again i get this comp
19:12 - then layer move then transform i know
19:14 - position zero
19:15 - so this line here and this line here is
19:17 - almost identical
19:19 - besides the one number at the end and
19:21 - now if i click outside of this box
19:24 - we can see that this circle is right on
19:26 - top of the move layer
19:28 - and if i move the move layer left and
19:29 - right the circle is moving along with it
19:33 - and i made a mistake that i accidentally
19:36 - reactivated
19:37 - this line here so i have to click on the
19:39 - equal sign again
19:40 - and now i can move my text up and down
19:43 - and the circle is going to ignore it
19:45 - but if i move left and right the circle
19:47 - is going to come along with it
19:48 - so this works pretty well but now i want
19:51 - to give this circle an
19:52 - offset so i have to change this value a
19:56 - tiny bit
19:57 - and really all i have to do is to add a
20:00 - value towards it
20:01 - so plus 100 pixels
20:05 - and really try to think about what's
20:07 - happening in this line of code
20:09 - we first take the position or the x
20:11 - position of the text
20:12 - and then we want to add 100 pixels
20:14 - towards it
20:15 - so now if i click outside of this this
20:18 - looks pretty good
20:19 - and now we can see that the circle is
20:20 - always slightly further to the right
20:23 - although granted it is kind of hard to
20:25 - see so let me increase the number
20:27 - ever so slightly let's say to 500
20:31 - and now we can see this much better that
20:34 - the circle is still moving along with
20:35 - the text
20:36 - but it is 500 pixels greater or further
20:39 - to the right
20:40 - and this is something you really have to
20:42 - understand about code
20:43 - that really all that we are doing is we
20:46 - create different values and add them
20:48 - together so all that's happening in here
20:50 - is that we
20:51 - look at two different kind of values the
20:54 - first value
20:54 - is the x position of the text itself and
20:57 - the second value
20:58 - is a static 500 and we just add them
21:01 - together
21:02 - and tell this property that this is the
21:04 - value you want to set it to
21:06 - and that's really all that's happening
21:07 - here so i hope that made sense
21:10 - and i will see in the next video hello
21:12 - there in this video we are going to be
21:14 - learning two new things
21:16 - number one is how to set color in code
21:18 - and number two is how to use an
21:20 - if statement so that we only want to do
21:22 - a certain thing
21:23 - if a certain condition is true and
21:26 - here's what we are going to do
21:27 - i have a circle moving left and right
21:29 - and if the circle is on the right side
21:31 - of the screen
21:32 - i want it to be red if it's on the left
21:34 - side of the screen i want it to be black
21:36 - and let's talk about how we're going to
21:38 - do all of this in code first before we
21:40 - actually implement it
21:42 - so on a more general level here's what
21:44 - we are going to do
21:45 - in our code we are going to define two
21:47 - colors that are going to be black
21:49 - and red and then i want an if statement
21:52 - that if the circle is on the right side
21:54 - of the screen i want the circle to be
21:55 - red
21:56 - and if that is not the case i want it to
21:58 - be black
21:59 - and to make all of that work we need two
22:01 - concepts number one
22:03 - is how to create color in code and that
22:05 - is quite easy
22:06 - all you need is an array with the rgba
22:09 - values
22:10 - so the amount of red the amount of green
22:12 - the amount of blue and the transparency
22:15 - and each of these values has to be
22:16 - between 0 and 255
22:19 - with 0 being the absence of the color
22:20 - and 255 being the full amount of the
22:23 - color
22:24 - so for example in my case the red color
22:26 - is going to have the values 215
22:29 - 68 63 and 255
22:32 - so we have a ton of red very little
22:34 - green and blue
22:35 - and then the full transparency so 255
22:38 - and let's implement this right in after
22:40 - effects i think that's going to be quite
22:41 - useful
22:42 - so here i'm back in after effects and i
22:44 - have a new composition that's called
22:45 - moving boolean
22:46 - we're going to see in a second what
22:47 - boolean means and inside of this
22:50 - composition right now
22:51 - i have one circle that moves left and
22:54 - right so if i play this composition
22:56 - we can see the circle moving left and
22:59 - right
23:00 - really nothing fancy and alright
23:04 - so let me hide all of this and the first
23:07 - thing i want to do
23:08 - is i have to figure out what kind of
23:09 - property do i want to animate
23:12 - so let me open it for the circle and i
23:14 - don't want to look at a transform
23:16 - because there's no color in here
23:18 - instead let me open contents then
23:20 - ellipse and now we have ellipse path
23:23 - stroke fill and transform and i want to
23:26 - look at fill
23:27 - and in there i have a color property and
23:30 - to there
23:31 - i could just change the color to really
23:32 - whatever i wanted but i don't want to do
23:35 - this
23:35 - with this color property instead i want
23:37 - to do it in code
23:39 - so again with alt and left click
23:42 - i create some code for this property and
23:45 - now again
23:46 - we have the standard value but i want to
23:48 - get rid of that
23:49 - although i think by now you might be
23:51 - able to read it a bit better
23:53 - but it doesn't matter anyway so let me
23:55 - get rid of it
23:57 - and now i want to create two variables
23:59 - with the respective colors
24:01 - the first one is going to be my var red
24:04 - so i just want to have a red color and
24:07 - for that
24:08 - i am going to need an array so square
24:11 - brackets again
24:12 - and inside of this i need four values
24:14 - the amount of red the amount of green
24:16 - the amount of blue and the alpha value
24:19 - and this is what i mentioned earlier
24:20 - that for red i want 215
24:24 - for green i want 68
24:27 - or blue i want 63 and for alpha i want
24:32 - 255
24:34 - and this would be our first value
24:37 - but now i also want a second one and
24:39 - this is going to be
24:40 - bar black so my black color and this one
24:44 - is also going to be an array and this
24:46 - one has the value for red it's 51
24:49 - or green it's 58 for blue
24:52 - it is 55 and then alpha is also going to
24:55 - be 255.
24:57 - so this one has very few colors overall
24:59 - so it's quite dark
25:00 - and all right with that we have two
25:02 - different colors
25:04 - and really what we can do now is just
25:06 - write
25:07 - red in here and then this color property
25:10 - is going to take the value of this red
25:12 - value
25:13 - or variable so if i click outside of it
25:15 - my circle went
25:16 - white and there's a reason for that
25:19 - right now
25:20 - all of these values are between 0 and
25:22 - 255
25:23 - but after effects is looking for values
25:25 - between 0 and
25:26 - 1. and right now since all of these
25:29 - values are much greater than 1
25:31 - the entire thing is going to be white
25:34 - but
25:34 - what we can do to overcome this is
25:36 - simply divide
25:38 - the entire array by 255
25:41 - and this way every single value inside
25:43 - of it is going to be divided by that
25:45 - number
25:47 - so now if i click outside of it now we
25:49 - get red
25:50 - and we have to do the same thing for
25:51 - black so if i just went
25:53 - and typed black in here
25:56 - i will get a white circle again because
25:59 - all of these values
26:00 - are much greater than one so instead
26:03 - what i have to do
26:04 - is to just divide it by 255 and then i
26:07 - get black again
26:09 - and this way you can use standard rgb
26:10 - values to
26:12 - apply them in code now you could also
26:15 - write
26:15 - very small values like 0.1 in here and
26:17 - this would work
26:18 - but it's also kind of hard to work with
26:21 - so i
26:22 - tend to prefer just writing the rgb
26:24 - values and then dividing the entire
26:25 - thing by 255
26:28 - and all right with that we have some
26:30 - colors
26:31 - the one thing we have left to figure out
26:33 - now is how to turn this into an
26:35 - if statement that i want the color to be
26:37 - red if the circle is on the right side
26:39 - of the screen
26:40 - and the color to be black if the circle
26:42 - is on the left side of the screen
26:44 - so let's talk about if statements so an
26:47 - if statement is a really common thing in
26:49 - all programming languages
26:50 - and what it does is it checks if a
26:52 - certain condition is true
26:54 - and if that is the case it runs a
26:56 - certain kind of code
26:58 - and how we implement this in after
26:59 - effects is we first write the word if
27:02 - and then we add brackets and into these
27:04 - brackets we can check
27:05 - a certain condition for example what we
27:07 - could be checking is
27:08 - if the center of the circle is in a
27:10 - certain position on the screen
27:12 - and then after these brackets we have to
27:14 - write some more code that is only being
27:17 - run
27:17 - if the condition inside of the if
27:18 - statement is true
27:21 - and in after effects this is usually
27:22 - done in curly brackets
27:24 - there are some other ways but they are
27:25 - not going to matter for now
27:28 - and i think it's best to start
27:30 - implementing this i think that's going
27:32 - to be the easiest way
27:33 - so here i am back in my code
27:36 - and for now i want to get rid of this
27:38 - black so now if i clicked outside of it
27:41 - after effects would be giving me an
27:43 - error message
27:44 - that has an undefined value used in
27:46 - expression could be an out of range
27:47 - array
27:48 - subscript this is a really common error
27:50 - message you see in after effects
27:52 - what it basically means is that after
27:54 - effects couldn't find a proper value to
27:56 - assign to this property
27:57 - so nothing is working and this should
28:00 - make sense here
28:01 - that in this code right now we have only
28:04 - assigned values to two different
28:05 - variables we didn't actually tell after
28:07 - effects
28:08 - what value it's supposed to be using but
28:10 - all right
28:11 - what i want to do is to type if
28:15 - and now brackets and now i have to check
28:18 - a certain condition
28:20 - and what i want to check let me open
28:22 - transform again
28:23 - so in transform we have x position
28:26 - and i want to check if this x position
28:29 - is greater than the middle of the screen
28:31 - and i can do that fairly easily all i
28:34 - have to do
28:34 - is to move the circle roughly to the
28:36 - middle
28:37 - and the middle is going to be 960. it's
28:40 - not exactly in the middle
28:41 - right now but a simple reason that the
28:43 - entire screen has a full hd resolution
28:46 - so it's 1920 pixels wide which divided
28:48 - by two
28:49 - is 960. so what i have to do
28:53 - instead of the if statement is to first
28:55 - look at this x position
28:56 - and for that again we can use the pick
28:58 - whip so i just select
29:00 - the x position and now i want to check
29:03 - if this
29:04 - is greater than 960
29:07 - and this would mean we are on the right
29:09 - side of the screen
29:11 - and now after the brackets i have to use
29:13 - curly brackets
29:14 - and this code now is only going to be
29:16 - run if
29:17 - this condition here is true
29:22 - and if it is true i just want to tell
29:24 - after effects to use the red color
29:26 - and you could put all of this on a
29:28 - single line but what you rather see
29:31 - is that people indent it and do
29:33 - something like this
29:35 - and this is perfectly fine it's i think
29:37 - it's even a bit easier to read so let's
29:39 - leave it like that
29:40 - and now if i let me move the code i can
29:43 - already see it
29:44 - if i moved the circle or the timeline to
29:47 - the right where the circle is on the
29:48 - right side of the screen
29:49 - we can see our red circle but now if i
29:52 - move the circle to the left side
29:54 - it goes back to the standard color but
29:56 - only because that's the one we set in
29:57 - the beginning
29:58 - if i open my code again we get undefined
30:01 - values in expression again
30:02 - so after effects doesn't know what value
30:04 - to assign
30:06 - and this should make sense right now
30:09 - we are only telling after effects that
30:10 - we want to assign a value
30:12 - if the circle is on the right side of
30:13 - the screen but if the circle is on the
30:16 - left side of the screen
30:17 - well we don't have anything so after
30:19 - effects is complaining
30:20 - and what we can do now is to extend our
30:23 - if statement with an
30:24 - else statement that if this condition is
30:27 - true
30:28 - i want my circle to be read however if
30:31 - that is not the case
30:32 - so else then i want to run some other
30:35 - code which
30:36 - also should be in curly brackets
30:39 - and the only code i want to run is that
30:41 - i want my circle to be black
30:42 - so the final value for this property
30:44 - should be black
30:46 - and with that i am pretty much good to
30:49 - go
30:50 - so here again you could write this over
30:52 - multiple lines or leave it on one line
30:53 - it really doesn't matter
30:55 - at least for one line of code if you had
30:57 - multiple you would have to separate them
30:59 - by semicolons but after effects is
31:03 - generally quite forgiving about not
31:04 - using semicolons so you don't have to
31:06 - worry too much
31:08 - all right let me click outside of it and
31:10 - now if i click back into it
31:11 - we don't get an error message so that
31:14 - seems pretty good
31:15 - and now i can run the entire thing
31:19 - and we get a circle with a change in
31:22 - color that works completely
31:23 - automatically
31:30 - and let's finish this video off with an
31:32 - exercise and i want you guys to work
31:34 - with the transparency property
31:36 - that if the circle is on the left side
31:37 - of the screen it's supposed to be 50
31:39 - if the circle's on the right side of the
31:41 - screen it's supposed to be 85.
31:44 - so pause the video now and try to
31:46 - implement this yourself
31:52 - let's try to do it together now and just
31:56 - to save me some writing
31:57 - i want to copy this if statement just to
32:00 - make my life a bit easier
32:02 - but once i have that i can minimize the
32:05 - color property
32:07 - and minimize all of the ellipse and
32:10 - contents and instead i want to look at
32:12 - opacity
32:13 - so again with alt and left click i
32:16 - create some code
32:17 - and i'm going to paste the if statement
32:20 - into this
32:21 - and now in here all we have to do is to
32:24 - replace this red
32:25 - and this black with more specific values
32:28 - and what i wanted
32:30 - was that this one here is that if the
32:32 - circle is on the right side of the
32:33 - screen
32:34 - so if that is the case i want the value
32:37 - to be
32:38 - 85 and if that is not the case i want
32:42 - the value
32:42 - to be 50. and
32:46 - i think let me put all of this on
32:49 - one line for the code i think that's
32:51 - easier to read
32:52 - so this is quite a bit easier to read
32:55 - and now if i go outside of this box
32:59 - we can see that we have different
33:02 - opacity values
33:04 - so this seems to be going quite well and
33:07 - let me actually emphasize this a bit
33:08 - more
33:09 - so for the right side i want let's say
33:12 - 60 and for the left side i just
33:16 - want 10 so you can see it a bit more
33:21 - and there we go now we have used one
33:24 - layer with lots of different if
33:26 - statements that
33:26 - make it really flexible and alrighty
33:30 - so with that we are almost done with
33:32 - this video
33:33 - but there's one more thing i do want to
33:35 - address and that is
33:37 - boolean values and that is actually the
33:39 - name of the composition
33:40 - so let's talk about what a boolean value
33:42 - is
33:43 - and well a boolean value is just another
33:46 - kind of data type
33:47 - so this would bring us to four different
33:49 - kinds we have text we have numbers we
33:52 - have arrays
33:53 - and now we also have boolean values and
33:56 - boolean values are
33:57 - arguably the easiest kind of data
33:59 - because there can only ever be two
34:01 - different kinds of values
34:03 - they can either be true or they can be
34:05 - faults that's the only two values
34:07 - possible
34:08 - and you would hardly ever use a boolean
34:10 - value by itself
34:12 - instead you would rather generate one
34:14 - within an if statement
34:15 - and this is actually what we have done
34:18 - for example when we use
34:19 - transform.x position is greater than 960
34:23 - we created a statement that returns a
34:25 - boolean value
34:26 - and this one could have either been true
34:28 - or false those were the only two
34:30 - options here and the easiest and most
34:32 - common way to create a boolean value is
34:34 - to use comparison operators
34:36 - and we have seen greater than and
34:38 - smaller than but there are quite a few
34:40 - more
34:41 - for example is equal to or is different
34:43 - to or is greater or equal than or is
34:46 - smaller or equal than and
34:48 - all of these would always generate a
34:50 - boolean value
34:51 - which can be super useful for if
34:53 - statements so i hope that makes sense
34:55 - and i'll see you in the next video
34:57 - in this video we are going to be
34:59 - learning how to use custom expression
35:00 - controls
35:01 - which are really useful to control
35:03 - specific layers and make them
35:05 - really flexible and here's what we are
35:07 - going to do
35:08 - we have one layer with a couple of
35:10 - custom effects that can change the color
35:12 - the rotation and the drop shadow of this
35:14 - layer
35:15 - with just one click which would allow
35:18 - you to customize it quite easily and use
35:20 - it in lots of different circumstances
35:22 - and to make all of that work we need
35:24 - expression controls
35:25 - which are specific kind of effects that
35:27 - by themselves don't do anything
35:29 - but that you can use for specific custom
35:31 - effects
35:32 - so let's go straight into our code and
35:34 - let's have a look at this
35:37 - here we are in after effects and i only
35:40 - have
35:40 - a single layer inside of my new
35:42 - composition called menus and indexes
35:44 - what indexes are we are going to talk
35:46 - about in just a bit
35:48 - and this one layer is called box and
35:50 - right now it doesn't do anything
35:52 - it's just a plain rectangle and i want
35:55 - to give this a couple of custom effects
35:58 - so on effects and presets i have to go
36:00 - to expression controls
36:04 - and in there i want to apply a couple of
36:06 - effects to this
36:08 - the first one is angle control and this
36:10 - one is supposed to be for the rotation
36:14 - then i want a checkbox control and this
36:17 - one is supposed to control
36:18 - if there's a drop shadow or not and
36:21 - finally
36:21 - i want to drop down menu control and
36:23 - this one is for the color
36:24 - and let me actually rename all of these
36:26 - i think that's going to make it a bit
36:28 - easier
36:28 - so if i right click on them i can rename
36:31 - them
36:32 - and this is called rotation for the
36:35 - angle
36:36 - this one i'm going to call this a
36:40 - shadow and then the drop down menu
36:43 - control
36:44 - is going to be color
36:48 - and what we have to figure out now is
36:50 - how to connect
36:51 - these different effects to our layer
36:56 - and let's start with rotation i think
36:57 - that's going to be the easiest one
37:00 - so in my box i just click on r
37:03 - and i can see my rotation property
37:06 - and to make this one work really all we
37:08 - have to do
37:09 - is use the pick whip for this one
37:11 - property and connect it to the angle
37:15 - and if i have that let me open the code
37:18 - i can see
37:18 - effect rotation and angle and that's
37:21 - really all i need
37:22 - if i change this one now we have a
37:25 - rotating box that's really as simple as
37:27 - it is
37:29 - so this is working pretty well and just
37:31 - to explain
37:32 - how the rotation works is basically when
37:35 - we write
37:35 - this one here effect rotation at angle
37:38 - after effects is looking at this
37:39 - specific
37:40 - effect and then whatever value is inside
37:43 - of this effect
37:44 - is going to be returned inside of this
37:46 - effect
37:47 - and then after effects is picking that
37:49 - one up and using it for the rotation
37:51 - so it's actually a really simple effect
37:55 - to work with
37:56 - but now let's talk about color so i want
37:59 - to have a drop down menu for different
38:00 - color options
38:02 - and those are going to change the color
38:03 - of the actual rectangle
38:05 - and this is going to be slightly more
38:07 - confusing but the first thing i want to
38:09 - do
38:10 - is to click on edit for the color and
38:12 - here i can rename each of the items
38:15 - and i have three different colors i want
38:17 - to work with the first one is red
38:20 - the second one is gray and the third one
38:23 - is a darkish let's call it black
38:27 - so now if i click on ok i can see red
38:29 - gray and black
38:31 - so how could we use these values for our
38:33 - rectangle
38:34 - and well it's actually quite simple
38:37 - and to demonstrate it let me open the
38:40 - transparency or the opacity parameter
38:43 - audio opacity property and
38:46 - this one with the pick whip i want to
38:49 - connect to menu
38:50 - so we can see exactly what it's doing
38:53 - and really all you can see if i select
38:56 - different ones
38:57 - nothing happens but that's not the point
39:00 - of what i'm trying to do
39:02 - because the important point is when you
39:03 - look at the opacity right now we can see
39:05 - one with red selected
39:07 - and red is the first element inside of
39:09 - this list
39:11 - but now if i click on gray we can see
39:13 - two
39:14 - and if i click on black we can see three
39:17 - and this way we know what's being
39:19 - returned from each of these boxes
39:22 - that if we have red this effect would
39:25 - return
39:25 - the number one if we had rain here
39:29 - it would return the number two and if we
39:32 - had black in here
39:33 - it would return the number three and if
39:35 - we added more values in here
39:36 - they would increment by one number for
39:38 - each of the items in the list
39:40 - and that behavior we can use to choose
39:42 - different colors
39:43 - so let me get rid of opacity that wasn't
39:46 - supposed to be used anyway
39:49 - and all right now again i have to look
39:52 - for the colors
39:53 - for this rectangle so i go to contents
39:55 - then
39:56 - in rectangle we have fill property and
39:59 - this fill property
40:00 - is supposed to get code so with alt and
40:02 - left click i create some code
40:05 - and let me get rid of this one for now
40:08 - and the first thing i want to do is
40:10 - to create a new variable that i'm going
40:12 - to call
40:13 - color underscore choice and this is
40:16 - supposed to get the value of this color
40:18 - menu
40:19 - so i use the pick whip again and just
40:21 - click on menu
40:23 - and now a semicolon and i can go to the
40:26 - next line and let me extend this a tiny
40:28 - bit to get more space
40:30 - and in here there are a couple of ways
40:33 - to approach this
40:34 - and you in theory would at least already
40:37 - be able to do this from the last video
40:39 - because what we could be doing is to use
40:41 - an if statement
40:43 - that if color choice
40:47 - is equal to one all right i haven't
40:49 - covered equal to yet
40:51 - so so far we have seen greater than or
40:53 - is smaller than
40:54 - but we haven't seen equal two and this
40:57 - is a double
40:58 - equals sign for the simple reason that
41:00 - the single equal to sign is being used
41:02 - to assign values
41:04 - so if you want to check if one value is
41:06 - equal to another value you have to use a
41:07 - double equals sign
41:10 - but now you could do all of this
41:11 - yourself so i could check for example if
41:14 - colored choice is one
41:16 - and if that is the case i could set a
41:18 - specific color in here
41:21 - and for example the color i had last
41:23 - time was 215
41:26 - 68 63 and 255
41:30 - all divided by 255
41:34 - so this if i had red selected
41:37 - would work we would be getting red and
41:40 - now we could add more
41:41 - if and else statements to make all of
41:43 - this work but
41:44 - this really would not be an efficient
41:46 - way of approaching this kind of topic
41:48 - and instead what we can do is to use
41:50 - indexing
41:51 - and here's what indexing means in the
41:54 - most basic sense
41:56 - indexing just means you pick one value
41:58 - from an array
41:59 - and how you do that after the array you
42:01 - add square brackets
42:02 - and you add the index of the number that
42:04 - you want to pick
42:05 - and the first item in an array has the
42:07 - index 0 the second one the index 1
42:10 - the third one the index 2 and so on
42:13 - so for example of our red color if you
42:15 - edit the entire array
42:17 - and then square brackets with 0 you get
42:19 - 215
42:20 - the first value and effectively what i'm
42:24 - going to do
42:25 - is i'm going to put all the different
42:27 - colors into one larger array
42:29 - and then i use the color choice variable
42:31 - to pick one specific value from this
42:34 - and let's do all of this in code i think
42:36 - that is going to be the best way to
42:38 - think about it
42:39 - so here we are back in what i've seen
42:40 - earlier and the only thing i want to do
42:43 - is to copy the red color
42:45 - or cut it out rather and get rid of the
42:47 - entire line here because we have a
42:49 - better way of doing this
42:51 - and instead i want to create a new
42:53 - variable
42:54 - that i call color options
42:58 - and this one is going to be an array
43:00 - where each individual value
43:02 - is another array with one being the red
43:05 - color i had so far
43:06 - and then i want another color or two
43:09 - more colors actually
43:11 - the first one is a grayish color that
43:12 - has the value 166
43:15 - 165 and 161
43:20 - and then i want one more color that is
43:22 - the darkest color we have seen earlier
43:23 - and this one had 51 58 and 55
43:28 - and 255 for opacity i actually forgot
43:31 - that one for my gray color
43:34 - and all right now we have three
43:37 - different colors
43:39 - and it's perfectly fine to have one
43:41 - array inside of another array
43:44 - and what i could be doing now is to take
43:46 - my color
43:48 - options then square brackets for
43:50 - indexing
43:51 - and let's say i wanted the second
43:52 - element so the one with the index one
43:54 - because we start counting from zero
43:57 - if i added a semicolon and clicked
44:00 - outside of it
44:02 - now we get a whitish color but a simple
44:04 - reason
44:05 - that we haven't divided any of these
44:07 - values by 255
44:10 - so at the end of this line all i have to
44:12 - add is divided by 255
44:14 - and now we can see the gray color what i
44:17 - can also do now
44:18 - is to change this to a and we get our
44:22 - red color back
44:24 - and then of course i could change this
44:26 - to the number 2
44:28 - and we get our very dark color again so
44:30 - this one is working quite well
44:33 - and really all we have to do now is to
44:36 - use
44:36 - our colored choice variable so this one
44:39 - we have set down here
44:40 - whichever returns one two or three
44:44 - and now if i click outside of it we get
44:47 - almost there that if i click on red we
44:51 - get a gray color
44:52 - and if i click on gray we get the black
44:54 - color and if i click on black
44:57 - we get nothing and instead we get an
44:58 - error and the essential problem here
45:01 - is that these different elements start
45:03 - counting from a different number
45:06 - that the menu always starts counting
45:08 - from one whereas for array indexing we
45:11 - always start counting from zero
45:13 - and as a consequence whenever we pick
45:15 - something from the menu
45:16 - we get the next item in the list but we
45:19 - can fix that
45:20 - very easily all we have to do is color
45:22 - choice
45:24 - minus one and now if i click outside of
45:27 - it
45:27 - now we get the black color we get the
45:29 - gray color
45:31 - and we get the red color so this one is
45:33 - working
45:34 - really well so with that
45:37 - we have two parts done the one thing
45:40 - left to do now
45:41 - let me minimize the rectangle again
45:44 - the one thing left to do now is that we
45:46 - have to have some drop shadows
45:48 - and let me actually add a drop shadow
45:50 - from the menu
45:51 - so drop shadow and let me increase the
45:53 - opacity to something like
45:55 - 80. and all right
45:59 - i want to make sure that if i click on
46:02 - this disabled shadow
46:04 - this drop shadow disappears and this
46:07 - is going to be your exercise so try to
46:10 - use this checkbox and see what it does
46:14 - so play around with the checkbox effect
46:16 - and see what kind of value it's
46:17 - returning
46:19 - and once you have that figured out try
46:21 - to use this effect to disable the drop
46:23 - shadow
46:24 - and a little tip here you can influence
46:27 - the opacity of drop shadows that's
46:29 - probably the best way to go on about it
46:31 - so pause the video now and try this
46:33 - yourself
46:39 - i think the first thing we should talk
46:40 - about is what kind of value
46:42 - this checkbox is returning so again i go
46:45 - to my opacity
46:46 - this tends to be a really good way to
46:48 - check for different values
46:50 - and now i connect it to the checkbox and
46:53 - let's see what it does
46:54 - so right now it's unchecked and i get a
46:56 - zero and if i check it
46:59 - i get a one so this is basically what
47:01 - values we get from checkbooks
47:03 - if it's unchecked it gives us a zero if
47:05 - it's checked it's giving us a one
47:08 - so we can use that to influence the drop
47:10 - shadow let me get rid of the value
47:12 - and instead i want to go in my box layer
47:16 - to effects and i want to target drop
47:20 - shadow
47:21 - and in drop shadow i have quite a few
47:23 - different properties
47:24 - the one i want to target is opacity
47:27 - so with alt and left click i want to
47:30 - give it some code
47:31 - so let me get rid of the standard text
47:34 - and instead i want to create
47:35 - a new variable that i'm going to call
47:38 - let's call it choice
47:40 - and the value of this choice is going to
47:42 - be
47:43 - this checkbox i need semicolon again
47:48 - and now we have to write some code that
47:51 - if this checkbox is ticked this opacity
47:54 - is supposed to be 0
47:55 - and if that's not the case it's supposed
47:57 - to be 80.
47:58 - and for this we could either use an if
48:01 - statement
48:02 - or we could use indexing and let me use
48:04 - indexing because that's the one i want
48:05 - to focus on in this video
48:07 - so let me create a new array and this
48:09 - array has two values
48:11 - 80 and zero the two values i want to use
48:15 - and now all i have to do is to use
48:17 - square brackets and
48:19 - my choice variable and with that we are
48:23 - pretty much done
48:24 - so let me click outside of it and now
48:27 - the drop shadow has disappeared
48:29 - and if i untick this the drop shadow is
48:31 - back
48:32 - and let me talk for what happened here
48:35 - we
48:35 - start by creating a new variable that
48:37 - gets the value
48:39 - of the checkbox and this can either be 0
48:41 - or 1
48:42 - and on the next line we have an array
48:44 - with 2 values
48:45 - 80 and 0. and from this we're going to
48:49 - pick
48:49 - one of them and this happens right
48:51 - afterwards with the indexing square
48:53 - brackets
48:54 - and into this we would either have to
48:55 - pass 0 for the first value
48:57 - or 1 for the second value and this is
49:00 - exactly what we get back from checkbox
49:02 - so with that i can use semicolon
49:05 - afterwards to make it look a bit nicer
49:07 - but well we are pretty much good to go
49:10 - this is working
49:11 - quite well so with that you have
49:14 - a pretty useful rectangle that you can
49:17 - customize
49:18 - quite extensively on the fly and of
49:21 - course all of them have their own
49:22 - checkboxes
49:23 - so you could even add more effects to it
49:25 - or give them keyframes
49:27 - so this is actually quite powerful but
49:29 - alright i hope that made sense and i
49:31 - will see you next video
49:32 - hello and welcome back in this video we
49:35 - are going to learn about special
49:37 - keywords and after effects
49:39 - and the special thing about these values
49:40 - is that we are not setting them
49:42 - ourselves
49:43 - instead they're being set by after
49:44 - effects automatically
49:46 - so what does that mean and well let me
49:49 - give you an example
49:50 - we could for example use the time
49:52 - keyword and
49:53 - all that this one is giving us is the
49:55 - current time we are on
49:56 - so when we use time we don't have to set
49:58 - the value ourselves instead it's being
50:00 - set automatically to whatever time it is
50:03 - right now
50:04 - and another example would be index and
50:06 - this one is giving us the index of the
50:08 - layer we are looking at
50:09 - with the first layer being index 1 the
50:11 - second layer being index 2
50:12 - and so on and there are quite a few more
50:15 - keywords
50:16 - but by just using time and index you can
50:19 - already create really sophisticated
50:21 - animations
50:22 - for example something like this and this
50:24 - is what we're going to create
50:26 - in this tutorial and for the entire
50:28 - animation
50:29 - we did not use a single keyframe and we
50:31 - only placed a single element
50:33 - anything else was done with a script and
50:36 - achieving all of that is actually fairly
50:38 - simple
50:38 - let's go straight into after effects and
50:40 - let's have a look at this
50:42 - alright here we are in our after effects
50:44 - composition it is called index
50:46 - and time and inside of that i have one
50:48 - text layer that has the word text
50:50 - in it nothing fancy going on so far and
50:53 - there are no keyframes or anything
50:55 - and let's start this by looking at the
50:57 - keywords i talked about earlier
50:59 - and i think the best way to do that is
51:01 - to look at source text and give this one
51:03 - some code
51:04 - so with this one selected i get rid of
51:07 - all the text and now
51:08 - all i'm going to write in here is going
51:10 - to be time
51:12 - and now if i click outside of it we get
51:15 - 8.86
51:16 - and if you look at the timeline we are
51:18 - slightly before
51:20 - 9 seconds and if i go exactly to 9
51:23 - we can see 9. so all that time is doing
51:26 - is it gives us our current time on this
51:28 - timeline
51:29 - so if i go to 0 we will get 0
51:32 - if i went to 1 we will get to one
51:36 - so fairly straightforward now sometimes
51:39 - it's quite obvious that the numbers get
51:41 - really long and this is something that
51:43 - we are going to take care of in just a
51:45 - little bit
51:46 - but now don't worry about it because we
51:48 - don't want to print this number anyway
51:50 - we just want to work with it
51:52 - and for that having decimal places
51:53 - doesn't matter whatsoever
51:56 - but all right so that was time the other
51:59 - key what i talked about
52:00 - was index and now if i click outside of
52:04 - it we get a one and this one is not
52:06 - influenced by the time
52:08 - at all instead what it's doing is it
52:11 - looks at this number here
52:12 - the one for the layer so if i
52:15 - copy this text layer i can move it
52:19 - around
52:20 - and we get a 2 and now if i copy this
52:22 - thing again
52:24 - we get a 3. and i could copy this
52:27 - multiple times we would always get
52:30 - another layer index
52:34 - so let me move them on to the side and
52:35 - there we go now
52:37 - the text for each of these layers is
52:39 - going to be whatever index they're on
52:41 - so this information here right next to
52:44 - the name of the layer
52:46 - and all of this is automatically
52:48 - generated so for example
52:49 - if i get rid of this 2 here all the
52:53 - other numbers would update automatically
52:56 - so all that this index does is it gives
52:58 - us the index of the current layer
53:01 - and this is just going to be a number
53:02 - that you can use very easily
53:04 - and all right with that we have all we
53:07 - need to create the animation i talked
53:09 - about earlier
53:10 - and to get this started let me open my
53:13 - text
53:14 - code again and in here i don't just want
53:17 - to write the index
53:18 - instead i want to write the layer with
53:21 - the index and this would right now
53:25 - just be a string so if i click outside
53:27 - of it we get the layer with the index
53:29 - and then a double colon so how can we
53:32 - combine this
53:33 - with the index and well all we need is
53:35 - plus
53:36 - so now if i type plus index then after
53:39 - effects is going to combine this string
53:41 - with this number and all of that happens
53:43 - automatically so you don't have to worry
53:45 - about it
53:46 - the one thing you do want to worry about
53:48 - is that a space in a string
53:50 - is being considered and also what you
53:53 - have to do is index is always written in
53:55 - lowercase letters
53:56 - all right there we go so here the one
53:59 - important thing if you want to have a
54:00 - space between a double colon and a one
54:03 - you also need to have a space inside of
54:05 - this string
54:06 - if i were to remove this and click
54:08 - outside now they'll be right next to
54:10 - each other so that's not desirable
54:12 - and all right let's put a space in there
54:14 - that's quite easy
54:15 - and there we go now we have to layer
54:17 - with the index one
54:19 - and let me actually make it ever so
54:20 - slightly smaller i think it's getting a
54:22 - bit on the large side
54:24 - i think it's going to be a bit better
54:26 - okay
54:27 - cool and this is all i want to do for
54:32 - the source text itself
54:34 - but what i can do now is if i copy this
54:38 - the index would always update and this
54:40 - would happen automatically so we don't
54:42 - have to worry about it
54:43 - cool and now i want to use the index to
54:47 - influence the position
54:48 - of this layer and for that i have to
54:51 - open position
54:52 - and i think just to make things a little
54:54 - bit easier let me separate the
54:56 - dimensions
54:57 - so we can work with x and y separately
55:00 - and for now
55:00 - i just want to work with the y position
55:03 - and what i want to do
55:04 - is that the index is influencing the y
55:06 - position of this layer
55:08 - and well all the layers that come after
55:10 - it and
55:11 - since index is just a number i could
55:14 - also just write index in here
55:15 - and let's see what happens so we go all
55:18 - the way to the top
55:19 - except we go one pixel down
55:23 - and this one again is the index so if i
55:26 - copied this layer a couple of times
55:28 - now every time the index is getting one
55:32 - greater
55:32 - we move one pixel further down and of
55:35 - course
55:36 - right now this well isn't particularly
55:38 - useful so let me get rid of
55:40 - all of this and well all we have to do
55:44 - here
55:44 - is that i don't want to move by a single
55:46 - pixel
55:47 - instead i want to multiply this let's
55:49 - say by 50
55:51 - and let's see how that looks and now
55:54 - we get to 50 because we multiply 1 times
55:57 - 50.
55:59 - and if we were to duplicate this layer
56:02 - now this number would be 100
56:04 - because we are multiplying 2 by 50. and
56:07 - this we can do
56:08 - as many times as we want and we always
56:11 - get to a different position
56:14 - and that way we get a really easy way to
56:17 - use
56:17 - index to influence our layer or the
56:19 - position of our layer
56:21 - and i think 50 is a bit too small
56:25 - let's go with 80. and now if i copy this
56:29 - yeah this looks much better and
56:32 - all right with that we have our y
56:35 - position
56:36 - now for the x position let me give this
56:39 - some code as well
56:41 - i want to use time to influence it and
56:44 - here again
56:45 - time is just a number that you can use
56:47 - like anything else
56:48 - so just to get started i could just
56:50 - write time in here
56:52 - and let's see what happens so my layer
56:55 - is all the way to the side or more
56:57 - specifically the anchor point of my
56:59 - layer is all the way at point zero
57:01 - and now if i move down the timeline we
57:04 - are moving
57:04 - ever so slightly to
57:08 - the right so if we're at second thirty
57:11 - we get to pixel 30 on the x position so
57:14 - we know it's working and we can kinda
57:16 - see it moving
57:18 - although again it doesn't move very fast
57:21 - but really to fix it all we have to do
57:24 - is to multiply this by a number
57:26 - let's say let's go with 20. let's see
57:28 - how that works
57:30 - so now if i move this let me actually
57:32 - play the entire thing
57:35 - now we can see that we are moving
57:38 - at a decent pace and i think the number
57:41 - is still a bit small
57:43 - so let's put this to 50. let's see how
57:45 - that works
57:48 - uh yeah i think that's going to be okay
57:52 - so now i think you can see the value of
57:55 - these keywords
57:56 - that they just give us a number and then
57:58 - we can work with that and this could be
58:00 - for the position for the scale it could
58:02 - be for the opacity
58:03 - really anything works in here and the
58:06 - most powerful thing is now
58:08 - that i could copy this and the index
58:12 - would update and all of this would work
58:14 - automatically
58:16 - and right now we have to combine the two
58:18 - because i want all of these layers to
58:20 - move at different speeds
58:22 - so let me get rid of them again and now
58:26 - i want to use my time and my index
58:29 - together
58:30 - so that the further down in the index my
58:32 - layer is the faster it is moving
58:34 - and really all we need for that is to
58:37 - multiply the number we have
58:38 - with index so for the first index this
58:42 - is going to be 1
58:43 - so it's going to be the same speed but
58:45 - the second index is going to move twice
58:47 - as fast already
58:48 - and the third index going to move three
58:49 - times as fast and so on
58:52 - so now if i duplicate all of these
58:53 - layers
58:55 - we get let me start at the beginning
59:00 - we get different speeds for each of the
59:01 - layers and this is potentially a bit too
59:04 - fast but i guess it's fine for now
59:07 - and all right this is working pretty
59:10 - well
59:11 - so with that we have covered some really
59:13 - important keywords for after effects
59:15 - now with that let's do an exercise and i
59:18 - want you guys to use the index to
59:19 - influence the opacity of each of the
59:22 - layers using the index keyword
59:24 - and specifically what i want you guys to
59:25 - achieve is this
59:27 - the first layer is supposed to have full
59:28 - opacity but the second layer is only
59:31 - supposed to have ninety percent
59:32 - the second layer eighty percent the
59:34 - third layer seventy percent and so on
59:37 - so for every successive layer i want to
59:39 - reduce the opacity by ten percent
59:42 - so try to figure this out yourself and
59:45 - see how far you get
59:46 - so pause the video now and try this
59:47 - yourself
59:53 - so here i'm back layer and what i want
59:55 - to do
59:56 - is look at the opacity so i just press t
59:58 - on my keyboard and i get opacity
60:00 - and in here i want to give it some code
60:03 - and let me get rid of the default one
60:05 - and now i have to figure out how to use
60:07 - index to influence this
60:09 - and if i were just to type index we
60:12 - would get an opacity of one so if you
60:14 - look very closely
60:16 - you might be able to see it very faintly
60:19 - but well that isn't particularly helpful
60:22 - and here we couldn't just multiply this
60:25 - by a hundred or well we could but it
60:27 - wouldn't solve the problem
60:29 - because now we can't see the first layer
60:31 - but if we duplicated the layer then this
60:33 - layer would have an opacity of 200
60:35 - and since the maximum opacity is 100
60:38 - this is well
60:39 - not helpful so
60:42 - this one isn't working so let's try
60:46 - something else
60:48 - instead what i want to do is to start
60:51 - with 100
60:52 - and then minus and now what we get
60:56 - is we're moving backwards so for every
60:59 - index we are reducing the opacity by one
61:02 - percent
61:02 - so that's already getting closer to it
61:05 - and
61:06 - now all i have to do since i don't want
61:08 - to reduce the index by 1
61:09 - instead i want to reduce it by 10. so
61:12 - all i have to do is to multiply the
61:14 - index by 10.
61:16 - and now for the first layer we get 290.
61:18 - we're going to fix that in a second
61:20 - but now for every other layer we go to
61:22 - 80 70 60 and so on
61:24 - and you can see the result really well
61:26 - that it becomes
61:27 - less and less visible so that's a pretty
61:30 - good looking effect
61:32 - and now the only thing we have left to
61:34 - cover
61:35 - is how can we make sure that we start at
61:37 - 100 and not at 90
61:39 - and there are a couple of ways the
61:42 - easiest one
61:43 - i feel is to just start at 110
61:46 - so now we start with 110 minus 1 times
61:50 - 10
61:51 - which gets us to 100 and this would work
61:54 - pretty well
61:56 - so now i can copy this and
61:59 - we get to at layer number 10 we get to 0
62:02 - opacity so this one doesn't matter
62:04 - anymore and
62:06 - all right with that we have made some
62:09 - pretty good progress and now what i can
62:12 - do
62:12 - let me zoom in a bit i can play the
62:15 - animation
62:16 - and we can see all of this is working
62:17 - really well so i hope all of that makes
62:19 - sense
62:20 - and i will see you in the next video
62:23 - hello there in this video we are going
62:25 - to learn a really powerful new concept
62:28 - and that is called functions and
62:30 - functions can do a ton of different
62:31 - things
62:32 - let's talk about them in the most basic
62:34 - sense a function
62:35 - is just a block of code that does one
62:37 - specific thing
62:39 - for example a function could loop a
62:40 - keyframe animation
62:42 - and this is exactly what we are going to
62:43 - see in this video we are going to look
62:45 - at the loop out function and all that
62:48 - this one does
62:49 - is it looks at the keyframe animation
62:51 - and it loops it in a certain way that's
62:53 - really all that's happening
62:54 - but this would just be a single function
62:57 - and we are going to see quite a range of
62:58 - different functions in the next couple
63:00 - of videos
63:01 - they are incredibly powerful to make
63:03 - well basically anything work in after
63:05 - effects
63:06 - and we can even create our own functions
63:08 - which is something we are going to do
63:10 - later on but for now let's just start
63:12 - with looping some animations
63:15 - so here i'm back in after effects and i
63:18 - have a new composition that is called
63:19 - loop and inside of this composition i
63:22 - have a layer called box
63:23 - and this box has two animations one for
63:25 - scale and one for rotation
63:27 - and if i play all of this
63:32 - all that we are seeing is that the box
63:33 - grows and shrinks and rotates
63:35 - by a 180 degrees so that's the final
63:39 - keyframe
63:41 - and right now this one is repeating
63:43 - because we are only previewing the first
63:46 - two seconds
63:47 - if i were to extend all of this and play
63:50 - it again
63:52 - we would only get one animation and then
63:54 - nothing would happen
63:56 - so what i want to achieve in this video
63:58 - is to lube both of these animations
64:01 - and let's start with scale so for this
64:03 - one
64:04 - i just want to give it some code and
64:06 - here's something that we haven't seen
64:08 - yet
64:09 - that you can combine keyframes and code
64:12 - and that is perfectly fine there's no
64:14 - problem with that whatsoever
64:16 - and all we have to do in here is to use
64:18 - a function or to use the more proper
64:20 - name we want to call
64:22 - a function and in order to call a
64:24 - function i first have to type the name
64:26 - which in my case is called loop out
64:30 - and now after this name we have to add
64:32 - some brackets
64:33 - which after effects does automatically
64:36 - and in here
64:36 - we have to pass in some information and
64:39 - these bits of information
64:40 - are called arguments and you can pass in
64:43 - a single or multiple arguments depending
64:45 - on the function
64:46 - and each of the argument has to be
64:48 - separated by a comma
64:49 - and at the minimum loop out is going to
64:51 - need one argument
64:53 - although you could pass in the second
64:54 - one but that's a slightly more advanced
64:56 - thing that we don't have to worry about
64:57 - for now
64:59 - so i want to just pass in a single
65:00 - argument in here
65:02 - and this one has to be a string and if i
65:04 - just type in quotation marks artifacts
65:07 - gives me all the options
65:08 - i have continue cycle offset and ping
65:11 - pong
65:12 - and each of these arguments are going to
65:14 - loop this animation
65:16 - slightly differently the easiest one is
65:19 - cycle and this one well
65:20 - it cycles over the animation so you can
65:22 - see it already let me play the entire
65:24 - thing again now
65:26 - and we can see the first animation and
65:28 - now we just see the scale animation
65:32 - and the reasoning here should be fairly
65:34 - clear that
65:35 - right now we are only looping this
65:38 - property here the scale property but the
65:41 - rotation
65:41 - we are not looping so this one only
65:43 - happens once
65:44 - and then it never happens again
65:48 - and because of that right now we are
65:51 - only repeating the scaling and this one
65:53 - happens
65:54 - in here but
65:57 - what we can do now is to pass in
66:00 - different arguments in here
66:04 - and well this is actually going to be
66:06 - your exercise let me leave this one at
66:08 - cycle
66:08 - and instead i want to work with the
66:10 - rotation so this one
66:12 - is also going to be loop out
66:16 - and now for the argument i want you guys
66:18 - to do an exercise
66:19 - and i want you guys to play around with
66:21 - the ping-pong argument
66:23 - and try to implement this yourself and
66:26 - see what it actually does
66:27 - so pause the video now and try this
66:30 - yourself
66:35 - all right welcome back so really all i
66:38 - have to do
66:39 - to insert the argument ping pong i have
66:41 - to pass in the string ping pong in here
66:43 - and you can also just write it yourself
66:45 - and all right
66:46 - let's see what happens now so we get the
66:49 - normal animation
66:51 - and now if you can see it i think it
66:54 - makes sense now
66:55 - so what happens here is that the
66:58 - rotation
66:59 - first goes clockwise then it goes
67:01 - counterclockwise
67:02 - and then it goes clockwise again and
67:05 - well that's what ping-pong does it
67:08 - doesn't cycle the animation from start
67:09 - to finish
67:10 - instead it ping-pongs it so i'll go from
67:13 - start to finish
67:14 - and on the next cycle it goes backwards
67:16 - so goes from the finish to the start
67:18 - again
67:19 - and after that it starts from the start
67:21 - point again
67:22 - so what we could be doing in here is
67:24 - just to use
67:26 - cycle again and if i use that
67:29 - we are always going to move clockwise
67:32 - because now loopboard is always going to
67:34 - start from the start and finish at the
67:35 - finish point
67:38 - and well that is pretty much it for
67:40 - functions it's a pretty straightforward
67:42 - concept but can be
67:43 - really powerful so i hope that made
67:46 - sense
67:46 - and i will see you in the next section
67:48 - hello and welcome to the second part of
67:50 - this series
67:51 - and in the second part we are going to
67:53 - start getting into
67:54 - more complex examples and this can
67:57 - happen in a variety of ways
67:59 - although the most important concept here
68:01 - is that we have to use
68:03 - quite a lot more functions so in this
68:05 - entire section you are going to learn
68:06 - quite a lot more in terms of
68:08 - functionality
68:09 - that we have started to discover in the
68:11 - last video of the last section
68:13 - where we looked at loop out and in this
68:16 - video i want to focus on functions quite
68:18 - a bit more
68:19 - and for this video we are going to see
68:21 - four different functions
68:23 - that even start to get a bit more
68:24 - mathematical so i
68:26 - hope you are ready for doing some basic
68:28 - calculations it's not going to get too
68:30 - bad don't worry
68:31 - but here's what we are going to do in
68:32 - this video we have a text in the middle
68:35 - of the screen
68:36 - it wiggles left and right it shows the
68:38 - rounded time
68:39 - and it cycles between being visible and
68:42 - invisible
68:43 - and for the entire thing not a single
68:45 - keyframe was written
68:46 - all of this was made with expressions
68:48 - and more specifically
68:50 - we have used functions inside of
68:51 - expressions to make all of this work
68:55 - and there are quite a few different
68:56 - functions that made all of this work
68:58 - but i'm going to explain them what i
69:00 - implemented so let's go straight into
69:02 - after effects and let's have a look at
69:03 - this
69:04 - so here i am in my basic setup i have
69:07 - one layer that is called text and
69:09 - instead of that layer i have the word
69:10 - text
69:11 - and all of this is inside of a
69:13 - composition that is now in a folder in
69:15 - part two
69:15 - that's called function actually let me
69:18 - add a proper space there that's gonna
69:21 - annoy me
69:22 - okay and all the parts we've seen
69:24 - earlier are now in folder called part
69:26 - one
69:26 - so it's a bit easier to find but all
69:29 - right
69:30 - let's get going with this the first
69:33 - thing i want to do
69:34 - is i want to influence the position of
69:36 - this thing so that i want it to wiggle
69:38 - left and right so i want to give the
69:41 - position a script
69:43 - and in here we are going to use one
69:45 - expression you might have seen already
69:47 - because this one is really popular
69:49 - it's called wiggle and all that wiggle
69:52 - does
69:52 - is it well it wiggles something on the
69:55 - screen
69:56 - and for wiggle we will need two
69:58 - arguments and those would be the
69:59 - frequency and the amplitude or in more
70:02 - plane terms how fast we want to wiggle
70:04 - and how much we want to wiggle
70:06 - and let me just add a couple of basic
70:08 - values let's say for frequency i want to
70:10 - go with 1
70:11 - and with the amplitude i want to go with
70:13 - 200
70:15 - and let me click outside of it and now
70:17 - let me just play the entire thing
70:21 - so now what we can see is that our text
70:23 - is moving around
70:24 - on our viewport and specifically how
70:28 - much and how fast
70:29 - is set by these two arguments so
70:32 - the one means that we have a speed of 1
70:34 - for this animation
70:36 - and the 200 means that from the origin
70:40 - point
70:40 - we are moving 200 pixels away at the
70:42 - most
70:43 - and if we change these we will get very
70:45 - different effects
70:46 - so for example the one could become
70:49 - let's say
70:50 - 20 quite an extreme value and let's say
70:53 - for the amplitude a thousand
70:56 - and let's see how that's going to look
70:58 - so now we can see
71:00 - that our text is jumping around very
71:02 - drastically
71:03 - and sometimes even goes outside of the
71:05 - window because
71:07 - the thousand is much larger than the
71:09 - window but i think in my case
71:11 - let's keep it at a more sensible point
71:13 - let's say four
71:14 - and let's say a hundred should be good
71:21 - yeah i think that looks okay cool
71:24 - so now we have a basic functionality but
71:27 - you can play around with this
71:28 - quite a bit more and to really
71:31 - understand how wiggle or really any
71:33 - function works
71:34 - is that you have to understand what is
71:36 - called a return value
71:37 - so let's talk about that every time you
71:41 - do an operation in after effects or
71:42 - really any programming language
71:44 - you create what is called a return value
71:47 - and
71:47 - really all that means is for example if
71:50 - you add one number with another number
71:52 - you are returning a new value which will
71:54 - be the result of this operation
71:56 - and this could be a math operation this
71:58 - could be using the pick web
72:00 - or this could be using a function all
72:02 - that they really do
72:03 - is to return a new value and this is
72:06 - something we have seen earlier
72:08 - for example when we use the pick web
72:10 - when we used index when we use
72:11 - time really all that's happening is that
72:14 - we are looking for value that is being
72:15 - returned
72:16 - by any of these operations and
72:19 - wiggle is no different and what wiggle
72:21 - returns
72:22 - is an array with two numbers by how much
72:24 - we want to go in the x
72:25 - and the y direction and this value we
72:28 - could store in a variable
72:30 - and then use in only one axis for
72:32 - example and let's actually do that
72:34 - so here i'm back in after effects and
72:36 - now what i want to do
72:38 - is to store what's being returned by
72:40 - wiggle
72:41 - in my variable let's call it my
72:44 - underscore
72:45 - wiggle although that probably isn't the
72:47 - greatest name
72:49 - but okay doesn't really matter so after
72:51 - that line i put a semicolon
72:53 - and now if i clicked outside we would
72:55 - get an error message because after
72:57 - effects doesn't have a value to
72:59 - set so effectively what we have done
73:02 - right now
73:03 - is that we have created a function that
73:06 - returns an array
73:07 - and this array is stored in the my
73:09 - wiggle variable
73:10 - but we haven't set any value for this
73:12 - property yet
73:13 - so in the easiest sense what we can do
73:15 - is just use
73:17 - my wiggle and now this would have the
73:20 - exact same outcome
73:22 - no change here however
73:25 - what we can do now let me get rid of it
73:28 - we can for example
73:29 - use indexing so my wiggle
73:33 - and i only want let's say the x1
73:36 - so the index 0 would be x the index y
73:38 - would be 1.
73:40 - and of course for position we would need
73:43 - two values
73:44 - so this one value wouldn't do but
73:46 - instead what we can do
73:47 - is to create a new array and this array
73:51 - is composed out of my wiggle zero
73:54 - and my wiggle one the more often i say
73:58 - the worse it sounds in my head i'm
73:59 - really sorry
74:00 - okay um cool so now we still have the
74:04 - exact same outcome
74:06 - except now we have much more control
74:08 - over it
74:09 - so we put the wiggle amount inside of
74:12 - this variable and then we used indexing
74:15 - to specifically pick the first and the
74:17 - second value
74:18 - now of course what we can do we can just
74:20 - invert the entire thing
74:22 - and well we still get the result but
74:25 - now the result would be slightly
74:27 - different but that's not the point of
74:29 - what i'm trying to achieve
74:32 - because instead what we can do now
74:35 - is remove one of these values and
74:38 - instead
74:38 - just put in a generic value for example
74:41 - for the y
74:42 - i could just put in a static value like
74:44 - 450 which is the middle of the screen
74:47 - and if i have that now we are only going
74:50 - to wiggle
74:51 - in one direction and with that our text
74:54 - is only going to move
74:55 - left and right and this really is the
74:58 - thing you have to understand here
75:00 - that we are using a function to create a
75:03 - value
75:04 - and really that's all that's happening
75:05 - here that we use a function to create a
75:07 - basic value
75:08 - and then we can work with that or we can
75:10 - straight set it to the value of the
75:12 - property
75:13 - both would be okay but to really
75:15 - understand how functions work you have
75:17 - to understand the return value
75:19 - so if the last part didn't really make
75:20 - sense i would really recommend to go
75:22 - over it
75:23 - but well let's do another example i
75:25 - think that's going to illustrate it as
75:27 - well
75:28 - okay but i can leave this one as it is
75:31 - and we are good to go
75:34 - so next let me work on
75:38 - the text itself or the source text
75:41 - and what i want to do in here is that we
75:44 - are displaying the time that has passed
75:46 - since the start
75:47 - so again we need our time keyword
75:51 - and now this is kind of working but you
75:54 - see the problem already
75:55 - that we have a crazy amount of decimals
75:58 - right after the number
75:59 - so this is no good so i want to round
76:02 - whatever is being returned from time
76:05 - and for that we need a function called
76:08 - round
76:09 - and as an argument we have to pass time
76:12 - into it
76:12 - so round brackets time however
76:16 - this wouldn't work yet so let me click
76:18 - outside of it we get an error and after
76:20 - effects goes back to the default value
76:22 - so not great
76:26 - and the problem here is that round
76:29 - is a function connected to a mav object
76:32 - so the functions we have seen so far are
76:34 - freestanding they can just use them by
76:36 - themselves
76:37 - however in after effects you have some
76:39 - larger objects that have functions
76:41 - themselves
76:42 - and round would be one of them and it's
76:45 - part of the math
76:46 - object and really all that means
76:49 - is that if you want to call round you
76:51 - have to first write
76:52 - math.round so math is to object
76:55 - and then you use the dot to call the
76:57 - specific function of it
76:59 - and then you can use it like any other
77:00 - function
77:03 - and now if i click outside of it now
77:05 - this is working properly
77:06 - and now i can play all of this
77:10 - and with that we get a wiggling time
77:12 - indicator that only wiggles in the
77:14 - horizontal axis
77:15 - but this is working pretty well and here
77:18 - again
77:19 - you do have to understand the return
77:20 - value that we start
77:23 - in this part here where time returns the
77:25 - time that we are currently on
77:27 - so right now a tiny bit over 6 seconds
77:30 - as you can see here
77:32 - and then this time is passed into the
77:34 - function
77:35 - math.round and the method round just
77:38 - rounds it and then returns a new value
77:40 - and this value is then being captured by
77:42 - the text property
77:44 - and this one just sets the value so this
77:46 - is what we can see in the end
77:49 - with that we have the second part
77:51 - covered
77:52 - now for the final one i want to work on
77:56 - the opacity and this one is going to get
77:59 - slightly more fancy actually so let me
78:02 - give some code
78:04 - and here's what i want to do i want this
78:06 - text to cycle between being visible
78:08 - and invisible and i want to achieve all
78:10 - of that without using keywords
78:13 - and this is the part where we have to
78:15 - talk about math a little bit more
78:17 - really not that much it's very basic
78:19 - functions
78:20 - but the math part we need is called a
78:22 - sine wave
78:23 - and the sine wave in the most basic
78:25 - sense is a wave
78:27 - that alternates between 1 and -1
78:30 - and then we get all the values in
78:31 - between
78:33 - and well this is something we can use
78:36 - let's actually implement it
78:38 - so for my opacity property i want to
78:41 - create
78:41 - math.syn short for sine wave
78:45 - and into this we have to pass one
78:47 - argument on what point we want to pick
78:49 - from this curve
78:50 - and in my case this would just be time
78:54 - so if you paid attention in high school
78:57 - then
78:58 - time would be the point on the x axis
79:01 - and the sine curve would give you all
79:02 - the y values
79:04 - and really all that means is that we
79:06 - have a curve and then we always pick
79:08 - one point from this and we want to get
79:11 - one point at the next point and the
79:12 - point afterwards
79:14 - and for that we can just use time
79:17 - and let's see what's happening here
79:20 - right now we get a zero but if i move a
79:24 - tiny bit
79:24 - then we can see a one and if i move a
79:27 - little bit more
79:28 - we get a one again
79:31 - and the reason here is that opacity
79:34 - stops at zero so we can never go below
79:36 - zero
79:38 - but if we could go below zero then this
79:40 - one would switch between one
79:42 - and negative one and now what we can do
79:46 - with this
79:47 - is multiply it by one hundred and now we
79:50 - can see this a little bit better
79:52 - so let me play the entire thing now and
79:55 - we can see it becoming visible
79:56 - then invisible for quite some time and
79:59 - now it's becoming visible again
80:01 - cool so this one is working but
80:04 - here's the problem now that we have very
80:07 - large gaps
80:08 - where our number remains invisible and
80:10 - that is because
80:11 - that we have a ton of negative parts in
80:13 - our function
80:15 - and for that we can use another function
80:17 - that is called the absolute number
80:19 - and all that an absolute number does is
80:21 - it takes a negative value and turns it
80:23 - positive
80:25 - and that's really all it does it's a
80:27 - quite simple function
80:29 - and well that one we can use in code and
80:31 - that way
80:32 - any curve that is below zero we can turn
80:34 - it to a positive curve
80:36 - and that way we wouldn't get large gaps
80:38 - between our curves
80:40 - and well let's implement this so
80:44 - for my math.sine function i want to put
80:47 - all of this
80:48 - into another function that is called
80:50 - math.abs
80:51 - short for the absolute value and in here
80:54 - as an argument
80:56 - we have to pass in the entire thing
80:59 - and now let's try this so it's still
81:01 - working that's a good start
81:03 - and if i play this now we get visible
81:05 - invisible and now we go straight back to
81:08 - being visible again
81:10 - and all right with that we are
81:13 - good to go for this part and again
81:16 - let me talk about what we are doing in
81:18 - here and
81:20 - i want to talk about the return values
81:21 - in particular
81:23 - we start in the innermost part here with
81:25 - time we just get the time we being on
81:27 - right now once we have that
81:31 - we use the math.sine function and this
81:34 - one
81:34 - takes the time we have passed into it
81:36 - and returns the point on the curve that
81:38 - we are on
81:39 - which could be a value between 1 and
81:41 - minus one
81:42 - and next up we are multiplying this
81:44 - entire value by a hundred
81:46 - so that one becomes a hundred and
81:48 - negative one becomes negative hundred
81:50 - and if we have a value like negative
81:52 - point one we get negative ten
81:55 - and finally we turn all of these numbers
81:58 - no matter what they are into a positive
82:00 - value
82:00 - so if we get negative 100 this becomes
82:03 - positive 100.
82:05 - and then all of this is being captured
82:07 - by the opacity property
82:08 - and we are good to go so with that
82:12 - we have our cycling animation and all
82:15 - right with that
82:16 - let's do an exercise to see if you can
82:17 - follow along that i want you guys to
82:19 - play around with the rotation property
82:22 - and what i want you guys to do is to
82:24 - make it rotate between negative 90 and
82:26 - positive 90. so pause the video now and
82:29 - try to figure this out yourself
82:36 - let me just focus on rotation
82:39 - and i want to give this an expression
82:42 - and
82:43 - now in here i want this to be between
82:44 - negative 90 and positive 9.
82:47 - so i first have to start by creating our
82:49 - basic sine curve
82:51 - so math.sin and time
82:55 - and this right now will give us the
82:57 - values between negative one
83:00 - and positive one and you can actually
83:01 - see it really well that we always switch
83:04 - between
83:05 - positive one and negative one and we get
83:07 - all the values in between
83:08 - so this is very well working
83:11 - cool and well really all that we have to
83:15 - do now
83:16 - is to multiply this by 90.
83:19 - and now if i play it
83:22 - we can see it's moving up and down and
83:25 - stops at positive or negative 9.
83:30 - and if i scrub along the timeline you
83:31 - can see it even better so we start at 0
83:34 - then we go positive all the way to 90
83:37 - and then we go all the way down to
83:40 - negative
83:41 - 90 there
83:45 - and then we just keep on repeating this
83:47 - forever
83:50 - and now what we could also do is to put
83:53 - all of this
83:54 - into an absolute function
83:58 - and then we would only get positive
84:00 - values so now we still start at 90
84:03 - but now we go to 90 and downwards
84:06 - all the way to zero i hope i can get it
84:11 - i guess we get the point but then we go
84:13 - all the way back up to 90. so we never
84:15 - go into negatives
84:18 - and with that we have created something
84:21 - slightly more sophisticated
84:23 - granted it's still fairly random but if
84:26 - you get the principles from this video
84:28 - you can make really extended animations
84:31 - that
84:31 - will run forever so you don't have to
84:33 - worry about keyframes it just keeps on
84:34 - running
84:36 - and of course you can also combine this
84:37 - with keyframes which would also be very
84:38 - powerful
84:39 - but all right i think it's going to be
84:41 - good for this video so i will see you
84:43 - next month hello there
84:44 - in this video we are going to still work
84:46 - with functions
84:48 - but in the last few videos i think we
84:50 - started to create quite a bit of random
84:51 - functionality
84:53 - so in this video we are going to look at
84:55 - how to create functions with more
84:56 - deliberate outcomes
84:58 - and specifically what we are going to
84:59 - learn are four functions that
85:02 - basically do the same thing with some
85:03 - slight differences
85:05 - and those four functions are called
85:06 - linear ease ease in
85:08 - and ease out and all that they are doing
85:11 - is that they're interpolating from one
85:13 - point to another at a given speed
85:15 - that's all they're doing the only
85:17 - difference is that they're doing it
85:18 - in different ways and let me show this
85:21 - in curves
85:21 - add linear moves from one point to the
85:23 - other in a linear way whereas ease
85:26 - starts and ends a bit slower but the
85:28 - middle part is really fast so this one
85:30 - tends to look a bit nicer
85:32 - and if used after effects before this
85:34 - one should look fairly familiar
85:36 - and then we can use this function to
85:38 - animate basically any property
85:40 - with a great amount of control
85:43 - and here's what we are going to make we
85:45 - have a cube that grows from 0 to 100
85:47 - and also has the opacity going from 0 to
85:50 - 100
85:50 - all done without writing a single line
85:52 - of code and what we're also going to
85:54 - learn
85:55 - in the process of this tutorial is that
85:57 - we are going to give it a keyframe
85:58 - however this keyframe
86:00 - only controls when the animation is
86:02 - starting it doesn't do anything besides
86:04 - that
86:05 - let's actually jump into after effects
86:06 - and let's have a look at this
86:09 - so here we have our new composition it
86:11 - is called automatic animations
86:13 - and inside of that we have one layer
86:15 - called box and well
86:17 - it's just a box it doesn't do anything
86:19 - right now there are no keyframes or any
86:21 - scripts attached to this
86:22 - right now but i want to give it one
86:26 - and let's start with the opacity so if
86:28 - the layer selected i click on t
86:30 - and then i click on the stopwatch and
86:32 - now we can give it some code
86:34 - and now we have to pick one of the four
86:36 - functions that i talked about earlier
86:39 - it doesn't really matter which one you
86:41 - pick they all work in the same way they
86:43 - just have slightly different outcomes
86:45 - so i'm just gonna go with linear that is
86:48 - well the easiest one i suppose
86:51 - and this one at the minimum is going to
86:53 - need three arguments although it could
86:55 - accept
86:55 - more but the three arguments we
86:57 - absolutely need
86:59 - are the speed of the animation the start
87:01 - value
87:02 - and the end value and for start and end
87:05 - it's quite simple i want to go from zero
87:07 - opacity
87:08 - to a hundred percent opacity so this one
87:11 - is
87:12 - very straightforward but now we need a
87:15 - speed variable
87:16 - and let me explain what we need in here
87:19 - for this number we need a value that
87:20 - goes from zero
87:21 - to one and when we're at zero we have
87:24 - the value zero
87:25 - once we add one we get the value a
87:26 - hundred and then we get all the values
87:29 - in between when we're in between them
87:31 - and this argument would also be used to
87:33 - animate this property
87:35 - that we just have a number growing
87:36 - slightly over time and we use that to
87:38 - interpolate between one number and the
87:40 - other
87:42 - and the easiest thing we can do in here
87:44 - is to just use our time
87:46 - and let me actually click outside of it
87:48 - so right now let me zoom in a tiny bit
87:51 - and right now our time is zero so this
87:54 - time
87:54 - would be zero inside of this function
87:57 - now if we were to go all the way to 1
87:59 - this value of time here would be 1 and
88:02 - as a consequence
88:04 - we would get 100 opacity
88:07 - but now if we went to 15 frames so
88:10 - right in the middle of 0 and 1
88:13 - this time would become 0.5 and as a
88:16 - consequence we'll go straight to the
88:18 - middle of 0
88:19 - and 100. and well
88:23 - this we do for every single value so the
88:25 - further we go down
88:26 - in this the higher our number becomes
88:30 - and of course we can also change that so
88:32 - let me stick again to 15
88:34 - to 15 frames and now if i change the 100
88:37 - to 80 now this is going to be 40
88:42 - and 40 is the exact middle point between
88:44 - 0 and 80.
88:46 - and well that's pretty much it we just
88:48 - interpolate between one value
88:50 - and the other we still end at 1 because
88:53 - then time becomes 1
88:54 - and then we reach the end point but let
88:57 - me keep this
88:58 - at 100 and all right
89:02 - this is working quite well
89:05 - and now you could replace this actually
89:07 - let me
89:08 - show it first so you know what's going
89:09 - on so now if i just play it
89:12 - we get a linear animation looks well
89:15 - straightforward
89:16 - but not much is happening here yes if i
89:19 - zoom out a
89:19 - tiny bit we can okay now let's play it
89:23 - again
89:24 - so we get a linear animation if we
89:26 - change this linear
89:28 - to ease this would look ever so slightly
89:31 - different
89:33 - if we played now if you have very keen
89:36 - eyes you can see that this
89:38 - is working slightly different we could
89:41 - also use
89:42 - ease in and this would still work
89:48 - and of course you could also use ease
89:50 - out
89:58 - and there you go all of these work with
90:00 - the same arguments they just have
90:01 - slightly different curves how they move
90:03 - between
90:04 - this value and this value nothing else
90:07 - is really happening here
90:09 - but now the problem is that our
90:11 - animation is always starting
90:13 - right at the beginning of our timeline
90:15 - so we always start at zero
90:17 - and we finish at one so well it's not
90:20 - great it's a start i suppose so how
90:23 - could we start this thing
90:24 - later and well the easiest thing we
90:27 - could do
90:28 - is just subtract a number when you want
90:30 - to start the animation
90:32 - so let me reduce five from this
90:36 - and now if i go down only when we reach
90:40 - this point here number five then we are
90:43 - starting the animation
90:46 - and really what's happening here is that
90:48 - time
90:49 - just increases but then every time we
90:52 - use time
90:52 - we subtract five from that number so if
90:55 - we're at second four
90:57 - we have negative one but this only looks
91:00 - for a value between zero
91:01 - and one so if we have negative one it's
91:04 - just going to be ignored and we get zero
91:05 - in here
91:08 - but once we are reaching five then time
91:11 - gets greater than five
91:12 - and we get a positive value and then we
91:15 - look for all the values between 0
91:17 - and 1. and once we get greater than 1
91:20 - all the numbers are being ignored again
91:23 - so this would be
91:24 - one way to influence this although it's
91:27 - also not great
91:28 - because you ideally want to move around
91:30 - the keyframe to start this animation you
91:32 - don't just
91:33 - want to well type in numbers so instead
91:35 - what i want to do
91:37 - let me place a keyframe at position
91:40 - 5 that should be good and now i only
91:43 - want to start the animation
91:45 - when we're on this keyframe and this
91:48 - we can also do fairly easily but this
91:50 - has to be a new variable
91:52 - and this variable i just called t
91:56 - short for time but we can't use the time
91:58 - keyword
91:59 - and then this one i want to use for my
92:02 - ease out function
92:05 - and this is going to be kind of similar
92:07 - compared to what i've done before so
92:08 - earlier i did time minus 5 and this
92:10 - started the animation at 5
92:12 - because only then we get a number
92:14 - greater than 0
92:16 - but now instead of using a generic
92:17 - number i want to get the time of this
92:20 - keyframe
92:21 - and for that we also have a function
92:25 - it is called nearest key
92:28 - short for keyframe and in here we have
92:31 - to pass in
92:32 - one argument in terms of what dimension
92:34 - we want to look for a key
92:35 - which in our case is time so we just
92:38 - want to find
92:38 - the nearest key in our timeline and well
92:42 - right now we only have a single keyframe
92:43 - so this one should be fairly
92:45 - straightforward
92:46 - so with this we get this keyframe or
92:49 - whatever keyframe is closest to this
92:51 - blue line
92:52 - and then for this one we can add dot and
92:55 - time
92:56 - and this will give us the exact time
92:57 - that this keyframe is on
92:59 - and with that i can write it semicolon
93:03 - and now this animation is only going to
93:06 - start
93:06 - on this keyframe
93:09 - and if i move it around let's say to
93:11 - second two now the animation starts
93:14 - at position two or second two and this
93:17 - works
93:18 - really flexibly and this sort of
93:22 - system is kind of similar compared to
93:23 - math.round for example
93:25 - and we first create an object and then
93:27 - we use dot to find one attribute
93:30 - of this object and what we can also do
93:33 - if we don't want to use a keyframe
93:34 - instead let me add
93:36 - a marker so i only want to start this
93:39 - animation
93:40 - when i am on this marker now this works
93:43 - in a very similar way
93:45 - that in after effects these markers are
93:47 - treated kinda like a keyframe the only
93:50 - difference that you have to
93:51 - look for is that now we need
93:55 - marker.nearestkey.time
93:57 - and now if i click outside of it and now
94:00 - once we pass this marker
94:02 - this animation is starting and if i move
94:05 - it around
94:06 - we get a different part of the animation
94:09 - so this is still working and now the
94:10 - keyframe is being ignored
94:12 - so that way you can start your animation
94:15 - basically whenever you want
94:18 - and alright with that let's do an
94:20 - exercise
94:21 - and i want you guys to play around with
94:23 - the position property
94:24 - and this one is supposed to go from the
94:26 - starting position all the way to the
94:28 - right side of the screen
94:30 - and of course all of this should happen
94:31 - by using a function which one that is is
94:34 - entirely up to you
94:35 - so pause the video now and try this
94:36 - yourself
94:43 - all right welcome back let's try to do
94:45 - it together now
94:47 - so here i am back in my animation
94:50 - and i want to look at position and i
94:53 - want to give this position
94:54 - some code and let's say i want to go
94:57 - with ease
94:59 - although it doesn't really matter and
95:01 - for this one i just want to go with time
95:03 - just the easiest one
95:05 - and now i want a start and an end value
95:09 - and here we have a tiny problem that so
95:12 - far
95:13 - we only ever looked at individual values
95:16 - so for opacity we have one value that
95:18 - works for the property
95:19 - but for position we need an array with
95:22 - two values
95:24 - so this is a slight difference but
95:27 - fortunately all of these functions can
95:28 - deal with that very easily
95:30 - so all we have to do is type in an array
95:32 - with two values
95:33 - let's say 960 and 540 and those are the
95:36 - starting default values
95:39 - and now i think i said move all the way
95:41 - to the right
95:42 - so let's say i want to go for 1800
95:48 - and still keep at 540.
95:52 - and now let's try this up and i have to
95:55 - move
95:56 - this marker all the way to the beginning
95:58 - so we can actually see what's happening
96:02 - so now let's try and we can see
96:05 - our block is moving from the middle all
96:08 - the way to the right
96:10 - and with that we have a nice and simple
96:12 - animation
96:14 - so i hope that made sense and i will see
96:16 - you in the next video
96:18 - in this video we are going to be talking
96:20 - more about keyframes
96:22 - or more specifically how to influence
96:24 - keyframes by using expressions
96:28 - and here's what we are going to make we
96:30 - have a text growing and shrinking
96:32 - and this is done with keyframes
96:35 - and what i have done with an expression
96:37 - is to use the keyframes to either write
96:39 - the text i am growing or i am shrinking
96:43 - so this way we have combined keyframes
96:45 - and expressions
96:46 - which is a really powerful concept
96:50 - and we have already seen one function to
96:52 - get the keyframes
96:53 - it was called nearest key and all we had
96:56 - to do
96:57 - is to pass in the time in there and then
96:59 - we got the nearest key it's quite
97:01 - straightforward
97:03 - but there are quite a few more ways to
97:05 - get the keys or to get specific
97:06 - information
97:07 - from the keys and well let's actually
97:10 - have a look at this straight in after
97:11 - effects
97:12 - so here i have my new composition it's
97:15 - called keyframes and code
97:17 - and in there i have one text layer that
97:20 - just says text
97:21 - and it has three key frames that just
97:24 - animate the scale
97:25 - it's well really not much and besides
97:28 - that nothing is happening in here
97:31 - and what i want to do let me open this
97:33 - thing properly
97:35 - i want to give some expression to my
97:38 - source text property
97:40 - while also keeping my scale property
97:43 - open
97:43 - because this is where i am going to get
97:45 - my information from all right
97:48 - let me get rid of this and now
97:51 - we have to solve a couple of problems
97:53 - first
97:55 - the first problem is that right now we
97:57 - are in the source text property
97:59 - but we want to get the scale property
98:02 - keyframes
98:03 - so we have to get information in one
98:05 - property from another property
98:07 - and this is information i want to store
98:09 - in a variable
98:11 - let's call it my key the name
98:14 - here really doesn't matter though
98:17 - and now i could again use the pick whip
98:20 - and just select scale
98:22 - and then we would be good to go we could
98:24 - also type the entire thing
98:26 - and by now i think you should understand
98:28 - how this comes together so let me
98:30 - actually type it
98:32 - when you look at any layer you have
98:34 - different parts
98:35 - right now we have text and transform so
98:39 - in my expression i could just write
98:40 - transform or
98:42 - text and in my case i want transform
98:47 - then i have to use a dot to find the
98:49 - parts of it
98:50 - which in this case would be anchor point
98:52 - position scale rotation and opacity
98:55 - and i want scale
98:59 - and this would get me the scale property
99:02 - and specifically
99:03 - inside of the scale property i want to
99:05 - find my key frames
99:07 - and what we have seen so far is nearest
99:10 - key
99:11 - with time and this would be
99:14 - one proper line so now let me use my key
99:17 - and set this as the property
99:19 - and now if i click out of it and run off
99:22 - this
99:22 - we get 0 0 first because this is this
99:25 - keyframe
99:26 - then we get 100 100 that is now the
99:29 - nearest keyframe
99:30 - and if i continue a bit further we go
99:32 - back to 0 and 0
99:33 - which is this keyframe so
99:36 - that way we would just get the key
99:38 - itself
99:40 - now what we can also do is to give this
99:42 - one
99:43 - another dot because this key also has a
99:46 - couple of attributes
99:48 - one would be value although
99:51 - we can't really see the difference
99:52 - because this is the default one we are
99:54 - getting
99:55 - so if we just write this expression here
99:58 - we are always getting the value
99:59 - but we could specify this to say value
100:02 - more specifically although
100:03 - in this case it doesn't make much of a
100:04 - difference
100:06 - but now what we can also do is to use
100:09 - time
100:10 - so we don't want to get the time in
100:11 - general instead
100:13 - we only want to get the time of this
100:14 - particular keyframe for example
100:17 - and now if i move this around this
100:18 - number is changing
100:21 - and another thing that we could be doing
100:23 - is to use index
100:25 - and if you use index this would be index
100:27 - one this would be index two
100:29 - and this would be index three so if i
100:34 - gonna be difficult to see there if i go
100:36 - outside of it now i can see one
100:38 - and if i go to the end dc3 because this
100:40 - is always the nearest key
100:43 - so just with this function you can
100:45 - always get the nearest key
100:47 - but well this isn't exactly precise
100:49 - because sometimes you want to get an
100:50 - exact key with an index for example
100:54 - and for that we can just use key
100:58 - and in here we have to pass an index
101:01 - for example if i pass in 1 we would get
101:05 - this index here and that's exactly what
101:07 - i see i get 0 and 0
101:08 - the value of this key here
101:12 - and if i pass in a 2 we should be seeing
101:15 - the value of this which is 100 and 100
101:18 - and if i do that that's exactly what we
101:20 - see
101:23 - and here again we can still access the
101:26 - attributes of this key
101:27 - for example we could look at time and
101:30 - now we would get 1.5
101:32 - exactly the time of this keyframe
101:35 - and with that information we can do so
101:37 - many things
101:38 - for example and this is the example i've
101:41 - shown you earlier
101:42 - we can use if time
101:45 - is smaller than my key
101:49 - and let's just make this a bit clearer
101:52 - that my key is only going to have the
101:54 - key and when i compare time
101:56 - i want to compare time with my key and
101:59 - time
102:02 - so all that we are checking right now is
102:04 - if our current time
102:05 - is smaller than the time of this key so
102:08 - if we are
102:09 - somewhere here
102:13 - and if that is the case i just want to
102:16 - print
102:17 - i am rowing
102:21 - and now if we get up to this keyframe
102:24 - our text says i am growing now if we get
102:28 - beyond that nothing's happening
102:29 - and we would get an error or we would
102:31 - get nothing but this we can fix very
102:34 - easily
102:34 - by just including an else statement and
102:37 - in here
102:38 - we can just pass in another string and
102:40 - this could be
102:41 - i am shrinking
102:45 - and now we would see both and now if i
102:47 - play the entire thing
102:49 - we can see i am growing and i am
102:50 - shrinking exactly when we are growing or
102:53 - shrinking
102:53 - so this is working pretty well cool and
102:56 - with that we have covered how to use
102:58 - expressions to influence keyframes
103:00 - which is super useful so let's do an
103:02 - exercise now
103:04 - and what i want you guys to do is to
103:05 - rotate this text for the first second of
103:07 - the animation
103:08 - to 90 degrees or really any value you
103:10 - like
103:12 - and while the text is rotating i want it
103:14 - to be red
103:15 - and afterwards it should be black so
103:18 - pause the video now and try this
103:22 - yourself
103:24 - all right welcome back so at one second
103:29 - i am going to set a rotation keyframe
103:33 - that is going to get the value of 90.
103:36 - and then at the beginning of the
103:37 - timeline i'm going to set this to zero
103:42 - so that when we are moving we get to 90.
103:48 - and let me give a bit of easing to this
103:52 - so now this looks well a little bit
103:55 - better
103:56 - and actually just to make this look nice
103:58 - i suppose
104:00 - let me time reverse the keyframes so
104:03 - now this is yeah this looks a bit better
104:07 - all right so this is working now what i
104:10 - want to do
104:11 - while we are in this part here i want
104:14 - the text to be red
104:16 - and afterwards i want the text to be
104:17 - black
104:19 - and to achieve that we have to go to
104:22 - animate build color and there rgb
104:27 - and now we have a red text but obviously
104:30 - i am not going to use this property at
104:32 - all
104:32 - instead i want to give it some code and
104:34 - look at the rotation
104:36 - so i click on stopwatch and now i have
104:39 - some code
104:40 - that i'm going to get rid of and first
104:42 - of all
104:43 - i'm going to create a new variable that
104:46 - i'm going to call
104:48 - rotation e
104:52 - and this i'm going to use with the pick
104:54 - whip and just click
104:56 - rotation so now i have transform and
104:58 - rotation so the rotation property
105:00 - and from that i want a key and
105:03 - specifically
105:04 - i want the key with the index two so
105:06 - this one here
105:07 - this one would be number one and this
105:09 - one is number two and now again
105:11 - we can just use an if statement
105:15 - that if time is
105:18 - smaller than rotation
105:22 - e dot time if that is the case
105:26 - i just want to have a red color
105:29 - and let's make a really simple one 255 0
105:32 - 0 and 255 all divided by 255
105:36 - the kind of color that we have seen
105:38 - earlier and
105:40 - now besides that we can use an else
105:42 - statement
105:44 - that if that is not the case i just want
105:46 - the color to be a black color
105:49 - and let's just go with a simple one 0 0
105:51 - and 0 and 255
105:53 - of that divided by 255
105:56 - and now if i move around this is working
105:59 - really well
106:00 - so let me play the entire thing again
106:04 - now we get a different color for a
106:06 - different part of the animation
106:08 - so well that is basically it so i hope
106:11 - that was useful and i will see you in
106:12 - the next video
106:14 - hello there in this video we are going
106:16 - to create a basic menu
106:18 - and here's how this is going to look
106:20 - like that we have a couple of elements
106:22 - coming from the right
106:23 - into the screen with a slight delay for
106:25 - each element
106:27 - and all of this happens automatically
106:29 - without adding a single keyframe
106:31 - and even more importantly if you add
106:33 - other elements
106:34 - then they are going to be added towards
106:36 - this animation automatically
106:38 - so you don't have to do anything you
106:39 - just have to add more layers and they
106:41 - will be animated automatically
106:44 - and this animation is mostly going to
106:46 - rely on the concepts we have learned in
106:47 - the last few videos
106:49 - most importantly index and the ease
106:51 - function or any of the interpolation
106:53 - functions
106:54 - but we are going to learn one more
106:55 - function it's called value at time
106:58 - but we'll get to that when we have to
106:59 - deal with it here i have my basic
107:01 - composition after effects
107:03 - it's called slide list and right now
107:05 - inside of this list
107:06 - we have one text layer that just says
107:08 - menu nothing else is happening right now
107:11 - and just to get this started i want to
107:13 - animate the position of this layer
107:16 - and let me separate the x and the y
107:18 - position so we can work with this a
107:20 - little bit easier and the x position is
107:23 - what i want to animate
107:24 - so this one gets a script and let me get
107:27 - rid of all the stuff in here
107:29 - and to get this one started i want to
107:31 - create two variables
107:32 - the first one is called the target
107:35 - position
107:36 - so this is where i want this main to go
107:38 - once the animation is finished
107:40 - and let's set it to 1650.
107:44 - it's a fairly random value just play
107:46 - around with what looks good
107:48 - and then we also need another variable
107:50 - with the origin
107:52 - position and this one has to be a value
107:55 - slightly outside of the screen
107:57 - so let me go with 2100
108:00 - and with that we have our start and end
108:02 - value
108:03 - so now all we have to do is let's say i
108:05 - want to use the ease function
108:07 - i want to use time i want to use the
108:10 - origin
108:11 - position and then i want to use the
108:13 - target position
108:15 - so we want to interpolate from this
108:17 - point to that point
108:19 - and well let's try this now so now our
108:22 - text layer is outside of the screen
108:23 - and if i move my timeline let me zoom in
108:26 - a bit
108:28 - a bit more okay now i can just move the
108:31 - menu
108:32 - inside of here so this one seems to work
108:35 - pretty well now for the next part we
108:38 - have to look at the
108:39 - y position this one is also important
108:41 - that i want to use the index to
108:43 - influence the y position so the position
108:45 - from the top
108:46 - and well for that all i really need is
108:48 - the index
108:50 - and let's say i want to multiply it
108:52 - let's say by 100 pixels
108:54 - so now we go slightly further to the top
108:59 - and well i think this looks alright at
109:01 - least for now
109:02 - but we are going to play with this later
109:04 - on as well
109:06 - but with that we have our basic position
109:09 - so what i can do now is just copy this
109:11 - thing
109:13 - and all of these layers would work in
109:15 - exactly the same way so if i play this
109:17 - now
109:18 - we already get a animation that moves a
109:20 - couple of layers inside of the screen
109:23 - but well this doesn't look good because
109:25 - i want that to be a delay between each
109:27 - of these elements
109:29 - and this is going to get us to a new
109:31 - kind of function
109:33 - and this one is called value at time and
109:36 - all that this function does
109:37 - is that it looks at the value of a
109:39 - certain property however
109:41 - we can influence at what time we want to
109:43 - look at this value
109:45 - so for example we could look at a value
109:47 - from a second ago
109:48 - or how a value is going to be in a
109:50 - second
109:51 - which is really useful to offset simple
109:53 - animations
109:54 - and really all i'm going to do is to
109:56 - create a second layer
109:57 - and this one is not going to animate its
109:59 - x position itself
110:01 - instead it will always look at the menu
110:03 - layer and look at the layers x position
110:05 - from a few milliseconds ago
110:07 - and that way we have an offset and if we
110:10 - combine this with the index
110:12 - we get a very coordinated animation
110:15 - so let's actually implement this so
110:18 - i want to copy my layer and let's call
110:21 - this one
110:22 - just the item and this one is supposed
110:24 - to be after the menu
110:26 - so the menu has to be the layer with the
110:27 - index 1 and then we get all the items
110:30 - connected to it
110:32 - and for this one let me open the x
110:34 - position
110:35 - so i want to get rid of all of this
110:39 - because we are not going to need it
110:40 - anymore
110:43 - and what i want to do instead let me
110:45 - open
110:46 - my menu exposition and let me return to
110:49 - coding here
110:51 - and i want to start by creating a new
110:52 - variable that i'm going to call the menu
110:56 - position and let's add an x just to be a
111:00 - bit more clear
111:01 - and this one is just supposed to be the
111:04 - x value
111:05 - of our menu or the x position so i use
111:08 - the pick whip to pick this element
111:11 - so now if i just set menu position x as
111:14 - my value for this property
111:16 - they would always be in the same
111:17 - position so
111:19 - no change so far except that we
111:21 - connected this one to this one
111:23 - so not particularly helpful yet but what
111:26 - we can do instead now
111:27 - is to add a dot and then add value
111:31 - at time and this again is a function
111:34 - connected to an object and this is kind
111:37 - of similar compared to what we've seen
111:38 - with math.round
111:40 - where math was the object and this
111:41 - object had a function
111:43 - called round and here we have
111:46 - a layer and each layer also has specific
111:48 - functions connected to it
111:50 - and one function would be value at time
111:54 - and we could just pass in time itself in
111:56 - here
111:57 - and we would still get the exact same
112:00 - outcome
112:02 - what we could also do is just to set the
112:04 - value at time
112:05 - of one and now this menu
112:09 - would always have or let me actually
112:11 - rename it
112:12 - i think it's going to be a bit clearer
112:14 - let's call it item
112:16 - so this item is always going to have the
112:18 - exposition of this menu
112:20 - at second one which right now
112:24 - would be static so not particularly
112:25 - helpful
112:27 - but instead what we can do is time minus
112:30 - 0.1 so we look for the value
112:33 - of this menu from 0.1 seconds ago
112:37 - and now if i play this we get a slight
112:40 - offset
112:41 - which is working really well looks
112:43 - really nice
112:46 - and now what i could be doing is to
112:47 - duplicate this thing multiple times
112:51 - and they would all be offset except by
112:53 - the same amount
112:54 - so this is still not great but here
112:57 - again
112:58 - what i can do is to multiply this value
113:01 - by index and now what we get
113:06 - so this value still works in exactly the
113:08 - same way but if i copy it
113:10 - multiple times now they're all going to
113:14 - be
113:15 - animated in the same way or while they
113:17 - all have a tiny offset
113:19 - let me end the preview earlier
113:23 - so this looks really good and of course
113:26 - you could rename all of these elements
113:28 - to whatever you like
113:29 - and if you want to add another one this
113:32 - was just copying a layer
113:33 - and then you have the exact same outcome
113:36 - so
113:36 - this is really flexible and powerful
113:40 - and alright with that let's do an
113:43 - exercise
113:44 - that i want you guys to animate all of
113:45 - these positions that they only become
113:47 - fully visible once they have reached
113:49 - their final point
113:50 - and of course they should still all be
113:52 - offset so
113:53 - pause the video now and try to implement
113:55 - this yourself
114:01 - here i'm back in my composition and i
114:03 - get rid of all the item layers so we can
114:05 - just duplicate this one and
114:06 - apply the same code to all of them and
114:09 - what i want to do
114:10 - is to look at the opacity and the one
114:13 - important value i have to figure out to
114:15 - make all of this work
114:16 - is that i have to know when is this
114:18 - animation finished
114:20 - and well we kind of have that already
114:23 - because
114:23 - we just want to animate this property
114:26 - here
114:26 - that this is effectively when our
114:29 - animation is supposed to finish
114:31 - that these three values here combined is
114:33 - going to give us the finishing point of
114:35 - our animation
114:36 - so all i have to do is copy it and now
114:39 - in our transform property
114:41 - let's actually use ease out and
114:44 - in there again i need a speed a start
114:46 - point
114:47 - and an endpoint and the start point is
114:50 - going to be 0
114:52 - and the endpoint is going to be 100
114:56 - and now for the speed all i would have
114:59 - to do
114:59 - is copy in this value and
115:02 - now if i click out of this box
115:06 - this is working pretty well and if i
115:09 - copy
115:10 - all of this and now let me try again
115:14 - by extending this a bit as well
115:18 - and well this is working pretty well
115:22 - so it's a very subtle effect but it's
115:24 - working quite well
115:26 - and here again the one thing you really
115:28 - have to understand about code
115:29 - is that we are just looking for
115:31 - different values so for example this
115:33 - value at time is supposed to be our end
115:36 - animation point and this we can just
115:39 - reuse multiple times
115:40 - that we just want to look at the time
115:42 - minus small value
115:44 - and then the index defines by how much
115:46 - the offset is
115:47 - and this then we can copy for every one
115:50 - of these values
115:51 - and with that we have a layered
115:53 - animation that works just by itself
115:55 - we don't need any keyframes and we can
115:56 - just add more values towards it and
115:58 - create a more sophisticated animation
116:01 - so i hope all of that made sense and i
116:03 - will see you in the next video
116:05 - hello and welcome back in this video we
116:08 - are going to learn a couple new elements
116:10 - that
116:10 - allow us to work more with time and what
116:13 - we're going to create
116:14 - is this that we have a layer and the
116:16 - start and the end point of the layer
116:18 - create an animation
116:20 - so that once the layer is starting we
116:22 - start an animation
116:23 - and before the layer is ending we have
116:25 - another animation
116:26 - and this system is super powerful i use
116:29 - it myself actually all the time
116:31 - so all the text elements and the
116:33 - overlays you have seen so far
116:34 - they have been made in essentially the
116:36 - same system
116:38 - and this sort of setup makes it really
116:40 - easy to drag a layer into a composition
116:43 - and just cut it to the right size that
116:44 - you want and then the animations are
116:47 - covered by the script so you don't have
116:48 - to worry about it at all
116:49 - and this really helps me to create these
116:52 - videos efficiently
116:53 - so let's have a look how we can make
116:55 - this sort of thing
116:57 - so here we have our after effects
116:58 - composition it's called better automatic
117:00 - animation
117:01 - i couldn't think of a better name and
117:04 - in there we have one text layer that
117:07 - says text it doesn't do anything else
117:09 - and now i want to animate this by just
117:11 - moving this layer
117:12 - and changing the start point or the
117:14 - endpoint so let me add an end point to
117:16 - this
117:18 - so i want this layer to start at this
117:20 - point here and then
117:21 - fade out once we reach the end and we
117:24 - have most of the tools to make all of
117:26 - this work
117:27 - but there are two keywords that we
117:29 - haven't learned yet that are super
117:30 - useful
117:31 - they are called in point and out point
117:34 - and
117:34 - basically what they're doing is that
117:36 - they're giving us the time of when the
117:38 - layer starts
117:39 - and when the layer ends and to
117:41 - demonstrate that
117:43 - let me open the text property so the
117:45 - source text
117:47 - and let's give it some code and really
117:49 - all i want to do
117:50 - is i just want to write in point
117:53 - and now if i click outside of it we get
117:55 - 6.8
117:57 - and if you look very closely this is
118:00 - this point here so this starts at 6.8
118:05 - now if i move it earlier you can see
118:08 - that this time changes if i move it all
118:09 - the way to zero
118:10 - we get zero so this way we can get the
118:14 - endpoint of this layer
118:16 - and connected to that we have out point
118:20 - and this one is giving us the end of the
118:22 - layer so right now it's at 16
118:24 - and we could go lower or higher and
118:28 - all of this would work really well so
118:31 - with that we have all we need to animate
118:34 - this
118:35 - by just using the in point and the out
118:37 - point and i don't want to animate the
118:39 - text so i'm just going to ignore that
118:41 - part
118:43 - instead i want to animate the opacity
118:46 - so let's give this some code and in here
118:50 - i first want to create two new variables
118:52 - that i'm going to call start and this
118:56 - one is just going to be
118:57 - the endpoint then i want to sum my colon
119:01 - and then i want
119:03 - var end and and is going to be
119:06 - the out point and this is just to make
119:09 - it easier to work with both of these
119:11 - values
119:12 - and all right now we have the end and
119:15 - the start
119:16 - point now we have to think about how to
119:18 - animate this
119:19 - and for that we are also going to need
119:21 - our trusted ease function which is super
119:24 - useful
119:25 - and what we have seen so far was always
119:27 - time then 0
119:28 - and 100. and well this one would give us
119:31 - the starting opacity so we have an
119:33 - animation
119:34 - right at the start but this wouldn't
119:36 - work if our animation starts somewhere
119:38 - here
119:39 - so this by itself is no good so we would
119:43 - have to make a
119:44 - slight change to this to make this work
119:46 - and we can do that
119:47 - all i want is to get my time and
119:49 - subtract
119:50 - my start from that and now what i get
119:54 - is only when this is starting we get a
119:56 - fade in animation
119:59 - no out animation yet but that comes in a
120:01 - bit
120:03 - but this thing by itself is working
120:05 - really well and i can move this around
120:07 - and now every time we drop the layer and
120:09 - set the start value
120:11 - we get a different start value so
120:14 - this is well it's working really well
120:17 - cool
120:18 - now what i can also do let's say
120:20 - alternatively
120:21 - i only want to animate the animation at
120:24 - the end
120:24 - so i want the opacity going from 100
120:27 - here to 0 here
120:29 - and for that i would have to get rid of
120:33 - my start
120:34 - and instead use end although by itself
120:37 - right now this wouldn't work for the
120:40 - simple reason
120:41 - that right now exactly on this point
120:44 - here
120:45 - when we reach the end of it then this
120:48 - animation is going to start
120:50 - so now if i go further here now i can
120:52 - see it in the opacity indicator
120:55 - only then is our opacity increasing so
120:57 - only after the end of the layer
120:59 - so this one doesn't really help but
121:02 - we can fix that very easily all we have
121:05 - to do
121:06 - is to add plus one and now
121:09 - this is working beautifully
121:14 - except well that is going the wrong way
121:16 - but this we can also fix
121:18 - quite easily all we have to do is to set
121:20 - the start value to
121:21 - 100 and the end value to zero
121:25 - and now this is working really well
121:29 - but now we have lost a starting point
121:30 - though but first
121:32 - let's talk about what's going on here
121:35 - and let me set it right to the starting
121:37 - point here
121:40 - okay so right now our time is
121:43 - about eight seconds a bit before that
121:46 - and our endpoint is a bit beyond 8
121:49 - seconds
121:50 - so let's say it's about 9 seconds so
121:52 - this one is 8 seconds
121:53 - this one is 9 seconds and as a
121:56 - consequence
121:56 - this entire thing would be negative 1
121:59 - and because that's below 0
122:01 - this animation is not going to start and
122:03 - it would only start
122:04 - once we have reached the end point so
122:06 - when time and end
122:08 - are equal to each other which of course
122:11 - doesn't help us
122:13 - but really all we have to do to overcome
122:14 - that is to add one towards the entire
122:17 - thing
122:18 - and all that's happening as a
122:19 - consequence is that we are offsetting
122:21 - the entire animation to happen one
122:23 - second earlier
122:24 - and since the animation itself is one
122:26 - second long this works
122:27 - really well together so with that
122:30 - we have a basic start but
122:34 - now the problem is that we only have one
122:36 - part of the animation
122:38 - so we have the text disappearing but we
122:40 - don't have it starting
122:42 - and unfortunately what we cannot do
122:45 - is to have two e's or any of these
122:47 - animations at the same time
122:49 - so let me recreate the one we had
122:52 - earlier
122:53 - so time might start from 0 to 100
122:56 - and now we don't get an error message
122:58 - but well
123:00 - this animation is only running once so
123:03 - the outro is still working
123:05 - the intro is not so this one is
123:07 - effectively ignored
123:09 - so let me cut it out because this way
123:11 - it's not going to work
123:13 - instead what we have to use is an if
123:16 - statement
123:17 - that we only want to run let me put it
123:19 - in there
123:20 - i only want to run this line if a
123:22 - certain condition is true
123:25 - and i only want to run all of this
123:28 - if another condition is true
123:32 - so this way we would have more control
123:35 - over how the entire thing is going to
123:36 - work
123:37 - but of course we have to figure out what
123:39 - goes inside of this
123:41 - if statement and let me show you how i
123:43 - approach this
123:44 - i went with time minus start
123:49 - is smaller than one and now if i click
123:51 - outside of it
123:53 - we can see the text animating in and
123:56 - it's also going out
123:58 - and now i can change the start and the
124:00 - end point of this layer
124:01 - and this would still be working so
124:04 - what's happening here
124:06 - well let's plug in some real numbers and
124:08 - see what it does
124:10 - so right now we are on time being two
124:12 - and start is also two
124:14 - so as a consequence this would be
124:16 - smaller than one and as a consequence we
124:18 - would get
124:20 - this animation here and now if time
124:23 - was to get something greater let's say
124:26 - eight
124:27 - then time would be eight minus two for
124:29 - the start
124:30 - it would be much greater than one and as
124:33 - a consequence
124:34 - we would only be playing this animation
124:36 - so with that
124:38 - we have an incredibly flexible animation
124:41 - that works
124:41 - really well and this is exactly the one
124:44 - you've seen all the time
124:46 - whenever i use text i have this script
124:48 - in there to animate the entire thing
124:50 - and then i can just drag around the text
124:52 - and
124:53 - well change the layer size and this
124:56 - thing animates automatically
124:58 - and i don't have to worry about this
124:59 - whatsoever and with that
125:02 - let's do an exercise that besides the
125:05 - text
125:05 - i also have an overlay that you see a
125:07 - color like this one
125:10 - and this one is done in a very similar
125:12 - style
125:13 - so use this code to replicate this sort
125:16 - of animation
125:17 - you don't have to use any keyframes all
125:19 - you need is a few lines of code
125:20 - so pause the video now and try this
125:22 - yourself
125:27 - let me minimize the text and instead
125:30 - what i want to do
125:31 - is to create a circle and
125:35 - really all i'm doing here is to roughly
125:37 - place it in the middle
125:38 - and i can use my alignment tools to
125:40 - place it right in the middle
125:42 - and it doesn't need any fill
125:45 - and i'm just going to give it the color
125:49 - of my character although the color
125:51 - really doesn't matter for this one
125:55 - so there we go now we have an ellipse
125:58 - and we can animate the stroke width
126:01 - and for most of my animations i have
126:03 - this thing somewhere below the screen
126:05 - and now i can change this and we get
126:07 - this sort of effect
126:09 - which i think is looking really good
126:12 - and well let's make the scaling a
126:16 - bit less wide tends to look better okay
126:19 - now it's twice again
126:21 - and yeah now this looks very similar to
126:23 - what i created
126:24 - in my overlays cool
126:28 - and now of course we can
126:31 - animate all of this using code and this
126:35 - happens in stroke
126:36 - and stroke with and in here
126:39 - i can get rid of the default arguments
126:41 - and now again i have to create two
126:43 - variables
126:45 - and now in here you wouldn't even need
126:47 - the variables for the endpoint and the
126:49 - endpoint
126:50 - you could go straight to the f statement
126:53 - and just go with time minus
126:57 - in point is smaller than one
127:02 - and if that is the case i want to use my
127:05 - ease function
127:07 - and this one uses time minus
127:10 - in point and then i want to go from
127:14 - right now our stroke with this 800
127:17 - and the maximum i can go with let's go
127:20 - with 4
127:20 - 000 so now we can see it
127:24 - when the animation starts this is
127:26 - working pretty well
127:28 - however once the time reaches more than
127:30 - one
127:31 - this thing falls apart because we didn't
127:33 - specify anything
127:34 - for an else statement but that we can do
127:37 - very easily
127:38 - so for the alt statement i can just copy
127:42 - this entire thing and pass it in here
127:46 - and now all i have to do is to reverse
127:49 - these
127:52 - values
127:54 - and then for the time i want time
127:57 - minus out point
128:01 - plus one and out point is
128:04 - starting with a lowercase letter and all
128:07 - right
128:08 - with that we basically have the entire
128:10 - thing so now i click outside of it
128:13 - and we can see the in animation and now
128:16 - for empty layer
128:18 - we can see the animation going backwards
128:23 - and with that you can see the entire
128:26 - thing
128:26 - working pretty well
128:29 - and of course you can combine so let me
128:32 - minimize this
128:33 - you can combine this text with this
128:35 - shape layer
128:36 - so this is what i do all the time that i
128:39 - first have
128:40 - this layer animating in and then
128:44 - right when this becomes visible i have
128:47 - this one coming up as well
128:49 - the problem right now is that they are
128:50 - both the same color so bad
128:52 - not helpful but if i change the color
128:55 - and let me place it in the middle
128:59 - now we should be seeing a really nice
129:02 - animation
129:03 - and this thing you can move around in
129:05 - your code
129:06 - and it works everywhere it's super
129:09 - useful
129:10 - and of course it works the other way
129:12 - around as well so i hope that was useful
129:14 - and i will see you in the next section
129:16 - in this video we're going to create a
129:18 - box around the text and this box is
129:20 - going to resize along with the text if
129:22 - we make any changes
129:24 - which is really useful to create lower
129:26 - thirds because then you don't have to
129:27 - resize stuff all the time
129:29 - it all happens automatically and to make
129:32 - all of this work
129:32 - we have to learn about a new function
129:35 - and this one is called
129:36 - source rect at time and what this one
129:39 - does is that it puts a rectangle around
129:41 - the layer that we have right now
129:43 - and then we can use the width and the
129:45 - height of this layer to well create a
129:47 - box around it
129:48 - and this can also be used for other
129:50 - purposes for example to set the anchor
129:52 - point
129:52 - right in the middle of this property
129:54 - also something we are going to see in
129:56 - this video
129:57 - but let's approach this slowly and let's
130:00 - go straight into after effects and let's
130:02 - have a look at this
130:03 - so here i have my new after effects
130:05 - composition it's called lower third
130:08 - and in there i have one text layer that
130:10 - just says some text
130:11 - nothing else the one important thing for
130:14 - now
130:15 - is that the anchor point of this layer
130:17 - is right in the center of it
130:19 - and this is important we're going to
130:20 - talk about this more in just a bit
130:22 - but okay what i want to do for now is to
130:25 - create a new rectangle so i just double
130:27 - click on rectangle
130:28 - and now we have a new rectangle that
130:30 - covers the entire screen but that
130:32 - doesn't really matter
130:33 - and i want to put this behind the text
130:35 - so we can see the actual text
130:37 - cool and now i already have contents and
130:40 - rectangle open
130:42 - and in there i want to go to rectangle
130:44 - path
130:45 - and then here we have a property called
130:47 - size and this
130:48 - is what the term is the size of this
130:50 - rectangle and this we can
130:52 - change very easily which i don't want to
130:55 - do for now
130:56 - instead i want to give it a script and
130:59 - in here we are going to get the size of
131:02 - this text
131:02 - and use that information to give the
131:04 - size of this rectangle path
131:06 - and to achieve that i am first going to
131:09 - create a variable
131:10 - and i'm going to call this text rect
131:14 - short for text rectangle and in here
131:17 - again
131:18 - i'm going to use my pick whip to get the
131:19 - text layer
131:21 - but now for this i want to add another
131:23 - dot
131:24 - and now i want to add another function
131:26 - and this one is called
131:28 - source rect at time
131:32 - and what this one is going to give us is
131:34 - the rectangle around this text layer at
131:37 - any given time so if we are changing it
131:39 - in the animation this one would still
131:41 - update so it's super useful
131:44 - and this is all i need for now so
131:46 - semicolon and i go to the next line
131:49 - but now i want to create another
131:50 - variable and this is going to be the
131:52 - variable for the width
131:54 - of my shape layer so i'm going to call
131:56 - this w just to keep it short
131:59 - and now what i want to do is to get my
132:01 - text
132:02 - rectangle or text rect and
132:05 - now i have a couple of attributes that i
132:07 - can work with
132:08 - the one that i want to use for now is
132:10 - called with
132:12 - and this is all i need so be careful in
132:15 - terms of what we are doing here
132:17 - we first get the rectangle of the text
132:20 - layer
132:21 - and of this text layer in the next
132:22 - variable we get the width
132:24 - and this we are storing in the w
132:26 - variable
132:29 - and now besides that we also need to get
132:31 - the height
132:32 - which i'm just going to shorten to age
132:34 - just to keep things short
132:36 - and this again is just going to be text
132:37 - direct but this time we need
132:39 - height and with that
132:43 - we have all the information that we need
132:45 - so now
132:46 - to set the property value i can just
132:49 - type in an array with w
132:51 - and h and now if i click outside of it
132:56 - we have the entire rectangle layer
132:59 - shortened to the dimensions of the text
133:01 - itself
133:02 - so this is working really well and
133:05 - even if i change the content of this
133:07 - text this would still update
133:09 - so for example some other
133:14 - text it would still be working
133:17 - although because the position is not
133:19 - updating we
133:20 - will get a problem so let me undo this
133:24 - for now
133:25 - but what we can also do now because
133:27 - right now the box goes
133:29 - right towards the text if i want to have
133:32 - a bit of a distance between them
133:34 - all i have to do is to give this box the
133:36 - stroke
133:37 - and well i just go to the layer property
133:39 - and i can set any color here
133:42 - and well let's just go
133:46 - with um reddish color and now in the
133:49 - stroke properties
133:51 - i can change the scaling of this
133:55 - and i can give it the same color as the
133:58 - inner box
133:59 - so we can't really see it and there we
134:02 - go now we can control
134:04 - how much spacing there is around this
134:06 - box
134:08 - and well that is pretty straightforward
134:11 - so this way
134:12 - we have created a box but the problem
134:15 - now is that if we change the text
134:17 - let me show it again
134:21 - then there would be a disconnect between
134:23 - the text itself and the position
134:26 - of the box behind it so this one is
134:29 - something we do have to address
134:31 - and for that the anchor point is going
134:33 - to become important
134:35 - so right now both the anchor point for
134:37 - the box and the text
134:38 - are in the same position and if we
134:41 - change the text so
134:42 - change the text what we get now
134:45 - is that the anchor point of the text and
134:49 - of the box
134:50 - are still the same but the anchor point
134:52 - of the text is not in the center
134:54 - anymore whereas for the box it is
134:57 - and this change for the anchor point of
134:59 - the text is what causes the problem here
135:02 - and really what i want to do is that the
135:05 - anchor point of the text is
135:06 - always in the center of the text itself
135:09 - and
135:09 - this you can almost do yourself you only
135:11 - need two more
135:12 - keywords to make all of this work and so
135:15 - far for source rect at time
135:17 - we have seen width and height but there
135:19 - are two more properties
135:20 - they are called left and top and well
135:23 - they are giving you the left and the top
135:24 - of the box and with these four bits of
135:28 - information
135:29 - you have all you need to change the
135:31 - anchor point of
135:32 - any property to the center at any point
135:35 - so try to pause the video now and
135:37 - implement this yourself
135:44 - so let me close my shape layer and for
135:47 - now i just want to open the text itself
135:49 - i go to transform and anchor point is
135:51 - what i want to influence
135:55 - and in here i have to write a couple of
135:58 - lines of code
136:01 - on the first line i want to create a new
136:02 - variable that is the box of this text
136:05 - itself
136:06 - so i want to create let's call it
136:09 - self rect and this one is just going to
136:13 - be
136:13 - source rect at time so this will be the
136:17 - first step
136:18 - now i need half of the width of this box
136:20 - and let's call this
136:22 - w again doesn't really matter
136:25 - and what we have seen so far is
136:27 - self-react
136:28 - dot width spelled properly
136:32 - so this would give us the entire width
136:34 - of this box
136:36 - however now since i only want to go to
136:38 - the middle of it
136:39 - i have to divide this by two so this one
136:42 - will give us exactly half of the width
136:43 - that we need
136:45 - but this by itself would not be enough
136:47 - because this right now would only be a
136:49 - short number that would start in the top
136:51 - left of the screen because we didn't
136:53 - place it on the screen somewhere
136:55 - so instead what we have to do is to add
136:58 - self wrecked again but this time
137:01 - i want to get left
137:05 - so this is the left starting point of
137:06 - this rectangle which is
137:08 - here and really all we're doing here
137:11 - is we're getting the left starting point
137:13 - of this layer and then go
137:15 - half its width so we end up in the
137:16 - middle of it
137:18 - and now this we just have to do again
137:21 - for height
137:22 - and this is essentially the same line
137:26 - except now with
137:30 - height divided by two and then plus
137:34 - self-react dot top
137:38 - and with that all i have to do is to
137:40 - create a new array
137:42 - with width and height and we should be
137:44 - good to go
137:46 - and there we go this is working really
137:48 - well
137:50 - now we have the anchor point right in
137:52 - the middle no matter what we do
137:53 - so now i could even change the text to
137:56 - something incredibly long
137:58 - and this would still update perfectly
138:00 - well so i could write this
138:03 - is line 1 and this
138:07 - is line 2. and let's give them a bit
138:11 - more line space
138:15 - so this one would also still work that
138:17 - even if we have multiple lines
138:19 - since the anchor point is updating all
138:20 - of this is working perfectly well
138:23 - now the last thing we need is that if we
138:25 - move the text
138:26 - the box wouldn't update along with it so
138:30 - all we have to do to change that is well
138:33 - link the two position properties which
138:35 - is a very simple thing to do with pick
138:36 - web
138:38 - and now i can move around the text and
138:40 - just
138:41 - write some stuff
138:44 - and there we go we have a really
138:47 - flexible box
138:48 - around our text that you can write in
138:51 - whatever you want
138:52 - so i hope that was helpful and i will
138:53 - see you around hello there
138:55 - and welcome back in this video we are
138:58 - going to create our own
139:00 - function it's going to be a really
139:02 - simple function but well
139:03 - you would get the principle and can use
139:05 - that to create more complex ones
139:07 - and what we are going to do is to create
139:10 - a function that can calculate a distance
139:11 - between two different points
139:14 - so what we can do in the end is just
139:16 - call our function pass in one position
139:17 - pass the upper position
139:19 - and we will get back the distance
139:20 - between the two something that can be
139:23 - really useful in quite a few different
139:24 - projects
139:26 - and let's talk about how to create a
139:29 - function in the first place before we do
139:31 - this in code
139:32 - you first have to use the keyword
139:33 - function which tells after effects that
139:35 - you are creating a function
139:37 - then you have to give the name of the
139:38 - function and then you have to use
139:40 - brackets and pass
139:41 - in what is called the parameters and
139:43 - we'll talk about those
139:44 - in just a second for now don't worry
139:46 - about it but once we have that
139:49 - we have to use curly brackets and inside
139:51 - of that we have to write all of our code
139:54 - and there we can do all of our
139:56 - calculations and do what we need to do
139:58 - although at the end of this code we
140:00 - should return a value
140:02 - and this happens with the return keyword
140:04 - that we first write return
140:05 - and then the value we want to return
140:07 - which is going to be the value we are
140:09 - going to create in this function
140:11 - and all of that is going to make much
140:13 - more sense when we get into after
140:14 - effects
140:15 - but first of all the parameters so
140:18 - so far when we call the function we have
140:20 - passed in arguments
140:21 - so each function has a couple of slots
140:23 - that you can pass arguments into
140:25 - and these slots are effectively the
140:27 - parameters
140:29 - and when you work with the function
140:30 - inside of the function you would use the
140:32 - parameters as a stand-in for the
140:34 - arguments that come in later
140:36 - so if you have a parameter a then you
140:38 - can pass in any argument you want
140:40 - but when you create the function you
140:42 - have to use the parameter a inside of
140:43 - your function
140:44 - and do all of your calculations with
140:46 - that
140:47 - but all right this is getting quite
140:50 - extensive so
140:51 - let's actually implement this alright so
140:54 - here i'm back in after effects and i
140:55 - have one composition that's called
140:57 - custom function
140:58 - and inside of that we have a couple of
141:00 - things we have two circles
141:02 - circle one and circle two that don't do
141:04 - anything right now
141:05 - i can just move them around on the
141:06 - screen and in the middle of the screen
141:09 - we have a text layer that says distance
141:10 - right now but nothing else
141:13 - and there's no code or any keyframe
141:15 - inside of this composition right now
141:18 - but i want to give it one and i only
141:20 - really have to worry about the text
141:22 - and i want to get my source text
141:24 - property and give this an expression
141:27 - and here i want to create a function so
141:31 - i have to start with the function
141:32 - keyword and then i have to give the name
141:35 - of the function
141:36 - and let's call this one get distance
141:40 - and now i need brackets and into these
141:42 - brackets i have to specify the
141:44 - parameters
141:45 - and in my case i'm just going to call
141:47 - them a and b
141:49 - and essentially those are going to be
141:51 - the variables inside of the function
141:52 - that i'm going to work with
141:55 - and now i need curly brackets and into
141:58 - these curly brackets
141:59 - i am going to write all of my code and
142:03 - now inside of this function
142:04 - i want to create a new variable that i'm
142:07 - going to call l
142:08 - for length and length is
142:11 - going to get the length function and
142:14 - this one is already giving us the
142:15 - distance between two points
142:17 - so in here i want to pass in a and b and
142:22 - then on the next line
142:23 - i want to return l
142:28 - and once we have that we should be good
142:31 - to go for the function
142:33 - but if i click outside of it well after
142:35 - effects doesn't really know what to do
142:36 - with this
142:37 - so it just prints the entire thing which
142:39 - isn't particularly helpful
142:42 - so instead i have to give it some
142:44 - information so right now
142:45 - we have created a function but we
142:47 - haven't called it
142:49 - and well to call it we first need
142:52 - two more bits of information and that's
142:54 - the position of both of these circles
142:57 - and let me put them in their own
142:58 - variable so let's call this one
143:00 - c1 for circle one and this one is
143:04 - just going to get the position of each
143:06 - of the circles
143:08 - so for that i use the pick whip for the
143:10 - position of circle one
143:12 - and then i do the same for circle two
143:15 - and i can use the pick move again to get
143:18 - the position
143:20 - and now we have the positions of our two
143:23 - circles
143:24 - and what we have to do now is to
143:26 - actually call our function and this
143:27 - again happens by just writing the name
143:29 - of the function
143:30 - so get distance and now to pass in bits
143:33 - of information
143:34 - so c1 and c2 this is the part that
143:38 - should make more sense now
143:39 - and okay now we click outside of it we
143:42 - get the distance
143:43 - and now i can move the circles around
143:46 - and
143:47 - this number would update and this is
143:50 - working pretty well
143:52 - now obviously you could just use the
143:54 - length
143:55 - of the two circles and this would be an
143:57 - inbuilt function in after effects
144:00 - however what you can do in the function
144:02 - itself
144:03 - is to add another value in here and then
144:06 - round this value so for example we can
144:09 - let me create another variable
144:12 - that i'm going to call rounded result
144:16 - and this is going to be math.round and
144:19 - into this
144:20 - i want to pass in l and then
144:23 - i only want to return the rounded
144:26 - result and now we get is only the
144:30 - rounded result
144:31 - and let me return it back to the center
144:33 - of the screen
144:34 - there we go so now i get a much nicer
144:37 - outcome and i get the exact distance
144:39 - between these two points and this is
144:42 - working pretty well
144:44 - and well let me go through again what is
144:47 - happening here i think that is going to
144:49 - be really helpful
144:52 - so on the first two lines we just get
144:54 - the position of the two circles this one
144:56 - should be fairly straightforward at this
144:57 - point
144:59 - but on the next line we are going to
145:01 - create a function
145:03 - the name of this function is getdistance
145:05 - and getdistance has two parameters
145:08 - a and b so when we pass in arguments
145:12 - they are going to be stored in the a and
145:14 - b variable that is only existing inside
145:16 - of this
145:17 - function and then the code for this
145:19 - function
145:20 - is three lines we first create a new
145:23 - variable
145:24 - called l and this l gets the value of
145:26 - the length between point a
145:28 - and point b the stuff we will pass into
145:30 - it into the parameters
145:32 - on the next line we create another
145:35 - variable that is called rounded result
145:37 - and this one really just rounds the
145:40 - number we created in the last line
145:43 - and on the final line we are returning a
145:45 - result
145:46 - so this rounded result and really all
145:49 - that means
145:50 - is that when we run this line here later
145:52 - on when we call the function
145:54 - it returns a value that we can store or
145:57 - use for the property immediately
145:59 - if you remember wiggle from a couple of
146:01 - videos ago
146:02 - then it's essentially the same principle
146:05 - except now we're setting this straight
146:06 - to the property value
146:07 - except of storing it into another
146:09 - variable and all right what i can do now
146:12 - is to minimize this function and now our
146:15 - code looks quite clean
146:17 - and with that let's do an exercise
146:20 - that i want you guys to add a third
146:21 - parameter to this function
146:24 - and what this first parameter does is it
146:25 - multiplies the value by
146:27 - any number so that we when we call the
146:29 - function could pass in a number let's
146:31 - say two
146:32 - and then the result would be doubled so
146:34 - pause the video now
146:35 - and try to work for the function and see
146:37 - if you can figure this out
146:44 - so here i have my function again
146:47 - and what i want to do is to add a third
146:49 - parameter
146:50 - and let's just call it c doesn't really
146:52 - matter
146:54 - and now all i want to use c4 is to
146:56 - multiply the result
146:58 - by c so this could either happen on this
147:01 - line
147:02 - when we return the value or it could
147:04 - happen
147:05 - somewhere here this would also be fine
147:09 - and now all i have to specify is another
147:12 - value let's say 2
147:14 - and now we get twice the value from what
147:15 - we have before and if i
147:17 - move the circles very close to each
147:19 - other and i guess it's very hard to see
147:23 - but let me go to straight value
147:28 - yep now we have exactly 300 if i change
147:31 - this to 3 now
147:33 - we are getting 450 if i change this to
147:36 - 10 we get 1 500
147:40 - and if i only change this to 1
147:43 - then we get 150 so depending on what we
147:47 - specify in here we get different
147:49 - outcomes
147:50 - because we are multiplied the result
147:51 - with that number
147:53 - and well that is a basic function
147:57 - now obviously this one isn't
147:58 - particularly useful
148:00 - but if you get the principle here this
148:02 - one can be incredibly powerful
148:05 - and especially if you create more
148:06 - complex animations
148:08 - storing all of this in a function is
148:09 - really useful for organizing your code
148:12 - and you could also reuse these functions
148:13 - multiple times
148:15 - but alright i hope all of that made
148:16 - sense and i will see you in the next
148:18 - video
148:18 - hello there and welcome back in this
148:21 - video we are going to create this little
148:23 - animation
148:24 - which if you remember from the last few
148:26 - videos is exactly what i've used to
148:28 - explain a sine curve
148:30 - and well i'm going to recreate the
148:31 - entire thing here now for the tutorial
148:34 - which is actually a fairly simple thing
148:35 - to make although we are going to need a
148:38 - tiny bit of code
148:39 - and more specifically to make all of
148:41 - this work
148:42 - we have to understand how to connect one
148:44 - composition with another composition
148:46 - which is something we haven't done yet
148:49 - but once we have covered that part it's
148:51 - actually a fairly simple thing to
148:52 - achieve
148:54 - so let's have a look at all of this in
148:55 - after effects
148:57 - so here i am in my composition it's
148:59 - called sine wave
149:01 - and right now in there i have a center
149:03 - line that's just a plane line
149:05 - and then i have a point which is a point
149:08 - with a stroke
149:09 - that's really all that's happening in
149:10 - here and
149:12 - let's get started animating this so the
149:15 - first thing i want to do
149:17 - is on point i want to animate the
149:19 - position
149:20 - so with position selected i'm going to
149:23 - separate dimensions
149:25 - and for now i want to animate the y
149:27 - position
149:28 - and this one is going to get the sine
149:30 - curve again
149:31 - and really all i want to do in here is
149:34 - math.sin
149:35 - the one we have already seen with time
149:37 - and i've multiplied this
149:39 - by a hundred but now if i
149:43 - click outside of this we have a problem
149:46 - that while the sine curve switches
149:48 - between a 100
149:49 - and negative 100 that doesn't really
149:52 - help because
149:53 - this is right at the top of the screen
149:56 - so no good and instead what i want
150:00 - that all of this should be relative to
150:02 - the middle of the screen
150:04 - or even better it should be wherever i
150:06 - originally placed this circle
150:09 - and this we can do it's done with the
150:10 - keyword value
150:13 - so i just type value and then plus
150:16 - and now this point is circling just in
150:20 - the middle of the screen
150:21 - and let me just demonstrate what value
150:23 - does so i
150:25 - cut this part out and value is
150:28 - essentially the value we put into this
150:30 - parameter when we place it initially
150:33 - so i could write in here let's say a
150:34 - hundred and now
150:36 - value is going to be a hundred so this
150:38 - one just replicates the value that we
150:40 - start with
150:41 - essentially and okay
150:45 - let's me oh yeah now i have to put this
150:49 - back to the middle of the screen
150:50 - so 540 and now we are back in the middle
150:54 - of the screen
150:55 - and i think what we can do right now is
150:58 - that the original number for this that i
151:00 - used was i believe
151:01 - 200 and yeah it feels like a better
151:05 - movement
151:06 - but you can change this number as you
151:08 - like it doesn't really matter
151:10 - although you do have to stay consistent
151:12 - with the other numbers you are going to
151:14 - see in a second what that means
151:16 - now we have a point moving up and down
151:18 - so that's a halfway decent start
151:21 - the next thing i want is that there
151:23 - should be a line connecting the dot
151:25 - to the center line and for that let me
151:28 - zoom in
151:28 - and i just want to draw a line so let me
151:31 - get rid of all of this stuff here
151:34 - and i literally just put a point there
151:36 - and a point there
151:38 - that roughly line up and are roughly in
151:40 - the middle of each other
151:43 - there we go and this line i have called
151:48 - connector and it should be behind the
151:50 - point
151:51 - so this one looks nicer and now how can
151:55 - we make sure
151:56 - that when we move this point this line
151:58 - updates as well
152:00 - and this doesn't actually need any code
152:01 - or well it does but it's not coded we
152:03 - write ourselves so instead what i'm
152:06 - going to do
152:07 - if i go to window and i go to create
152:10 - notes from paths
152:12 - if i click on that we get a new window
152:15 - and what i have to do now
152:16 - is i have to connect it to a path so
152:19 - with my connector selected
152:21 - i go to contents shape one and i have to
152:24 - have this path selected
152:26 - and now i can decide do i want points to
152:29 - follow nodes
152:30 - or do i want nodes to follow this path
152:32 - and i want to go with this one
152:35 - and now i have two nodes that control
152:38 - the end
152:39 - of this line so i could move this one
152:41 - around and
152:42 - it would work pretty well cool
152:47 - and the one thing you have to be aware
152:48 - of for this one is
152:50 - that if i opened it a ton of code is
152:53 - making all of this work
152:55 - and there's quite a bit of stuff that is
152:57 - a bit more advanced that we didn't
152:58 - really need for example this bit here
153:00 - is a for loop this is something that
153:03 - we're not going to see in this tutorial
153:04 - at all
153:05 - because it's slightly more advanced
153:06 - we're not that complicated but we don't
153:08 - really need it in most day-to-day
153:10 - activities
153:11 - and there's also try and catch and quite
153:13 - a bit of stuff that gets more advanced
153:16 - so quite a bit more advanced stuff but
153:18 - at least the basic syntax you should
153:20 - recognize
153:21 - all right we don't need any of this so
153:23 - i'm just going to tug it away
153:25 - and ignore it and for now let me rename
153:28 - these layers so we know what they are
153:31 - so let's call this one start and this
153:33 - one
153:34 - end and i want to make sure that my
153:37 - end point is equal to the center of this
153:39 - circle
153:40 - and for that literally all i have to do
153:43 - is open the position for both and for
153:46 - the end
153:46 - all i want to do is i separate
153:48 - dimensions again
153:50 - and the y position should be exactly the
153:52 - same as this y position
153:54 - so i can just connect the two with the
153:56 - pick whip
153:58 - and now if i play all of this
154:03 - we get the curve updating
154:07 - and if you look very closely let me
154:12 - enhance it there's a very very very
154:15 - slight
154:16 - tilt of this line right now and you can
154:18 - see it here even better that the
154:19 - exposition
154:20 - here is 959.5 and here
154:23 - 960. so half a pixel of an offset
154:27 - and well we can just get rid of this by
154:30 - parenting the x position so now
154:34 - this point here and i also want to
154:36 - influence this point
154:39 - so for the start point as well they
154:41 - should all be on the same x position
154:44 - so for this one the x position as well
154:46 - should just be this x position
154:48 - and now this looks much cleaner and
154:52 - all right everything else is still
154:54 - working
154:55 - fine and we are
154:58 - getting an up and down movement so
155:01 - that's a good start
155:03 - now i can tuck these two away because
155:05 - we're not going to need them anymore
155:07 - and now we are going to need something
155:11 - else so
155:12 - what we have to figure out is how to
155:14 - create an actual curve around this
155:16 - and you could approach this in a couple
155:19 - of different ways
155:20 - you could for example for this center
155:22 - line
155:24 - give it a zigzag
155:27 - and for the zigzag
155:30 - you could give it smooth corners
155:34 - and then increase the size so this would
155:36 - give you some kind of a curve
155:39 - and there are a couple of other ways to
155:41 - create these curves as well by just
155:43 - using paths
155:44 - but the problem here is lining all of
155:46 - this up with the point itself
155:47 - is a huge pain so i am not going to do
155:51 - that
155:51 - because this is annoying instead
155:54 - here is what i did let me close this one
155:56 - entirely actually
155:58 - i have created a completely new
156:00 - rectangle layer
156:01 - that is completely empty there's nothing
156:04 - on it
156:06 - and let's call this one sine curve
156:12 - and this one is going to get an effect
156:15 - and the effect i want to go for is in
156:18 - generate
156:19 - and there it is all the way at the
156:22 - bottom it's called
156:23 - write on and if i click on that
156:26 - we right now can't see anything
156:30 - but what it does is it well it writes on
156:33 - our screen
156:35 - although we have to give it some kind of
156:36 - position otherwise it's not going to
156:38 - work
156:39 - and really all we have to do is for this
156:41 - brush position it has to move
156:44 - and what point i want to move is this
156:46 - point here
156:47 - so with the position selected
156:50 - i want to get this x and y position so
156:53 - for this sign curve here i go to effects
156:57 - write on and brush position is going to
157:00 - get a script
157:01 - and in here i want my variable to be x
157:05 - and let me scroll down a tiny bit
157:10 - i want this x position
157:13 - and then i can copy the entire line of
157:16 - code
157:17 - and change this to y and y position
157:21 - so now i get the x and the y position
157:23 - and all i have to do
157:24 - is set this to x and y
157:28 - and now you can
157:31 - if you zoom in a tiny bit you can see
157:34 - already that we have a white
157:36 - thing above well um our
157:40 - point that is moving so that's not a bad
157:43 - start
157:43 - and let me increase it so you can better
157:46 - see what's happening here
157:47 - and this effect is a little bit slower
157:49 - because we are drawing quite a bit of
157:51 - stuff
157:52 - but here you can see it much better
157:55 - that this is what's happening right now
157:59 - and if i change the color to the color
158:02 - of the rest of the composition
158:04 - we are getting something that starts to
158:06 - look much better
158:09 - so this is already getting a bit better
158:13 - but now what i want to achieve is that
158:15 - all of these points are moving to the
158:17 - left
158:17 - and for that literally enough to do is
158:20 - for the x
158:22 - add time towards it
158:25 - and just using time is going to be very
158:27 - slow
158:28 - so let's multiply this by 200
158:32 - and now here's what we get this is
158:36 - starting to come together much nicer
158:39 - and what i can also do is to move the
158:41 - point above all of this
158:43 - then it looks even better and there we
158:47 - go
158:47 - this is already starting to get there
158:53 - but now we have a problem that i want
158:55 - this curve to move
158:57 - continuously to the left but by itself
159:00 - in this curve i couldn't do that because
159:03 - when i use these coordinates
159:05 - i am just drawing this curve i'm not
159:07 - moving all the other points
159:09 - so when i'm drawing all of these points
159:11 - the points themselves stay fixed
159:12 - and i can't work with them anymore
159:15 - unless
159:16 - i put all of them in their own
159:17 - composition
159:19 - so what i'm effectively going to do is
159:21 - to put this layer here
159:23 - in its own composition and then move the
159:25 - entire composition to the left
159:27 - although before that i want to move this
159:30 - circle here further to the left
159:32 - so that we have a bit more on the screen
159:34 - for this curve
159:36 - and since we have made this connector
159:38 - relative to this point
159:40 - we should be able to move the entire
159:42 - thing
159:43 - straight up to the left and not have any
159:46 - change in the rest of our animation
159:49 - and if you didn't use code this sort of
159:51 - thing would become drastically more
159:52 - difficult
159:54 - and let's put it roughly here
159:57 - and now let's try it again
160:04 - and all right this is starting to look
160:07 - better cool
160:08 - so now i want to get this signed curve
160:10 - and create its own composition
160:13 - so with ctrl shift c i create a new
160:15 - composition
160:16 - and i call this one sine graph
160:20 - but now this curve has disappeared and
160:23 - if i go into sine graph
160:25 - and i double click e now we're getting a
160:28 - warning
160:30 - and the reason here is that this point
160:32 - layer
160:33 - doesn't exist anymore but the simple
160:36 - reason that
160:37 - this point layer isn't a different
160:38 - composition that is
160:40 - not a problem because if you read the
160:42 - code you should be able to figure this
160:44 - out yourself actually
160:45 - we have this comp then layer with the
160:48 - name of the layer
160:49 - then transform and then exposition and
160:52 - really all we have to do to change this
160:54 - is instead of this comp
160:55 - we have to change this to comp and then
160:58 - we need quotation marks
161:00 - and now we get the name of all of our
161:02 - compositions
161:04 - and the one i want to go for is free
161:06 - sine wave
161:07 - so i click on enter and now we have the
161:09 - proper composition again
161:11 - so what after effects is going to do now
161:14 - it first looks at this composition
161:16 - and inside of that composition we look
161:18 - for this layer then the transform of
161:20 - that layer and then the x position of
161:21 - the transform of that layer
161:23 - in this composition and we have to do
161:26 - the same thing
161:27 - for the y variable but
161:30 - now we get our curve back this is
161:33 - working
161:36 - and this one is still doing the exact
161:38 - same thing
161:39 - so nice this is working cool
161:44 - and now i can go back to my sine wave
161:46 - composition the original one
161:48 - and i can still see the very same
161:50 - outcome
161:52 - so this is also continuing to work
161:56 - and all we have to do now to finish up
161:58 - this composition
161:59 - is to move this entire thing to the left
162:02 - which we can do
162:03 - very easily and we also know at what
162:06 - speed to move it
162:08 - so let me open its position and i want
162:11 - to just move the x position so i
162:13 - separate the dimension
162:15 - and for the x position this is supposed
162:18 - to be
162:18 - time multiplied by 200
162:24 - and now this is
162:33 - almost working we are getting there i
162:36 - suppose
162:38 - and here essentially we have the same
162:41 - problem that we had with the
162:42 - y position of the circle that this right
162:46 - now has to be added to the start value
162:48 - it's not the start value itself
162:50 - but for that all we need is value plus
162:53 - time times 100
162:55 - and now
162:59 - the only problem we have is that we are
163:01 - moving in the wrong direction
163:03 - so this should be
163:06 - minus and now let's try this again and
163:09 - now you can see
163:12 - that we're at the left side of this but
163:14 - not the right side
163:15 - so well there's this minor problem
163:19 - but all we have to overcome this is to
163:22 - duplicate
163:22 - this layer which we can also do very
163:24 - easily
163:26 - and move this layer further to the right
163:32 - and now i really just have to match
163:35 - these two up
163:36 - let me wait until my point is right in
163:39 - the middle
163:40 - or at least roughly and now literally
163:42 - all i did
163:43 - i just connected these two
163:47 - and then played around with this and i
163:50 - think this is matching up pretty well
163:52 - and now i just have to wait
163:56 - until they first meet and it's gonna be
163:58 - my starting preview
164:00 - and then i can
164:10 - go all the way to the second point this
164:13 - can be my end value
164:15 - and now i can just keep on repeating
164:18 - this animation
164:20 - and of course you have to be quite
164:21 - careful in terms of where you set the
164:23 - start and the end point
164:24 - but if you get a couple of good frames
164:26 - you can loop this animation
164:28 - very easily although there
164:31 - is this minor problem that's really
164:34 - annoying me
164:36 - at this point should be a tiny bit
164:39 - higher
164:40 - there we go this should look better now
164:46 - and there we go now all we would have to
164:49 - do is to cut out this part of the
164:51 - animation
164:52 - and then we can loop it and then we
164:53 - would have a perpetually running
164:55 - circle all right with that
164:59 - let's do an exercise and i want you guys
165:01 - to put a tiny label
165:02 - next to this point and give it the value
165:04 - of the sine wave
165:06 - so if we're at the top of the curve it
165:08 - should be one if we are at the bottom it
165:10 - should be minus one
165:12 - and just to practice what we learned in
165:13 - this tutorial
165:15 - this label should be in its own
165:16 - composition so make sure to create
165:19 - another one that is
165:20 - on top of the other stuff we have made
165:22 - so far so
165:23 - pause the video now and try this
165:26 - yourself
165:30 - so here i am back in my composition and
165:32 - i have minimized all of the layers just
165:34 - to keep things clean
165:36 - and what i want to do is to create a new
165:38 - composition
165:40 - and this one let's call it sign text
165:44 - everything else is still fine and in
165:46 - this i just want to put in
165:48 - a piece of text the size doesn't really
165:52 - matter just make sure it's small enough
165:54 - to not overpower the rest of the
165:56 - animation
165:58 - alright now for this property
166:02 - we want to influence the position so
166:05 - this one gets a script
166:07 - and in here i again want to create an x
166:09 - and a y variable
166:10 - so we have the position of
166:14 - this point here this is the one we want
166:17 - to get
166:18 - the problem right now is that for this
166:21 - one
166:22 - well we can't use the pig whip
166:25 - so we have to figure all of this out
166:27 - ourselves but by now
166:28 - i think we're able to do it so let's try
166:30 - to do it by hand
166:32 - i first want to look for composition so
166:34 - i need the keyword comp
166:36 - and in there i have to pass one argument
166:39 - that is the name of the composition i
166:41 - want to target
166:42 - which in my case is sine wave and it's
166:45 - really handy here that after effects
166:46 - gives me all the compositions
166:48 - so now i have the right composition next
166:51 - up i have to target a layer so i type
166:54 - layer and in there again i need a name
166:57 - or a string with the name of the layer i
166:59 - want to go for
167:00 - and again after effects gives me a
167:02 - couple of suggestions
167:04 - and in my case i just want the layer
167:07 - with the name point
167:09 - and of this layer i want to look at
167:12 - trans
167:14 - form and in transform i want to get the
167:17 - x position
167:20 - so we first look at the composition with
167:22 - the name sine wave
167:23 - in that composition we look for the
167:25 - layer with the name point and
167:27 - off the point layer we look for
167:28 - transform and x position
167:31 - and once we have that we can copy the
167:35 - entire thing
167:36 - and change an x to a y so we get the y
167:40 - position
167:42 - and now with that all i need to do is to
167:45 - create an array with the x and the y
167:47 - position
167:49 - and now i can already see my text moving
167:51 - and if i go back to the original
167:53 - composition
167:54 - and place my new composition in there
167:58 - and let's actually make it red so it
168:00 - stays on the same theme
168:03 - so what i have to do now is look closely
168:05 - and there we go
168:06 - i can't see my text this is already
168:10 - starting to work
168:14 - now obviously the text is right on top
168:16 - of it
168:17 - so i want to offset it a little bit
168:19 - further to the left and a little bit
168:21 - up and well all we have to do for that
168:24 - is to influence all of these points
168:27 - so instead of just getting the x
168:28 - position i want to move it slightly to
168:30 - the left
168:31 - let's say by a hundred pixels and then
168:34 - the same for up
168:35 - i want to subtract let's say 50 for this
168:38 - one
168:39 - and now let's see how this works
168:42 - and yeah i think this is already getting
168:44 - quite a bit better
168:46 - not perfect but workable at the very
168:49 - least
168:51 - and all right so with that we are almost
168:54 - done
168:55 - the one thing i want to do now is that
168:57 - this text should be
168:58 - the sine value so this should be -1 at
169:01 - the lowest point
169:02 - and one at the highest point and well
169:05 - this we can achieve
169:06 - very easily so here i'm back in my
169:10 - syntax composition and
169:12 - i want to go to text and source text
169:16 - and in here you might be tempted to try
169:19 - to get the actual
169:20 - position of this
169:23 - point here so that we are just measuring
169:26 - the y position of this point
169:28 - but that would well not be a good idea
169:32 - for the simple reason that this would
169:33 - take a crazy amount of code and would
169:35 - not exactly be necessary
169:37 - and instead what we can do since all of
169:40 - these compositions have the same time
169:42 - indicator
169:43 - we could just set the value of a simple
169:45 - sine curve to the value of this text
169:47 - and then they should have the same value
169:49 - really all i have to do
169:51 - is in the source text property i want
169:54 - math.thin
169:56 - and time and
170:00 - now i get all the decimal points in
170:02 - between
170:05 - and this is almost working
170:08 - except now the plus and the minus are
170:10 - inverted
170:12 - but that's not a problem all we have to
170:14 - do is to multiply this thing
170:16 - by -1
170:20 - and now we are good to go
170:24 - so this is getting much closer
170:28 - although also not perfect just yet
170:31 - for the simple reason that we have a
170:33 - couple too many decimal points
170:36 - so the simplest thing we can do is put
170:39 - all of this
170:41 - into math.round
170:44 - and let me copy the entire thing and
170:47 - place it in there
170:49 - so now what we get is -1 and 1.
170:55 - so that's getting closer to it
171:00 - although i also want all the values in
171:02 - between
171:03 - so this one well i'm not particularly
171:05 - happy with it
171:07 - but if we just use it by itself this one
171:10 - is getting a little bit better
171:13 - at least slightly
171:16 - so this would be let's call it a start
171:21 - but well we can fix this fairly easily
171:24 - although it is going to look
171:25 - a little bit weird that we are first
171:27 - going to multiply this value by 10
171:29 - before we are rounding it and then after
171:32 - we have finished rounding it we're going
171:33 - to divide it by 10 again
171:35 - and that way we get one decimal point
171:37 - and i think this is best illustrated by
171:39 - implementing it right away
171:41 - so what i want to do is instead of minus
171:44 - 1
171:45 - minus 10 and if i click outside of that
171:47 - now we get
171:48 - all the values between -10
171:52 - and positive 10. so well we just
171:54 - multiplied everything by 10.
171:56 - but now we can do is the entire
171:58 - statement after rounding
172:00 - dividing it by 10 again and now we get
172:03 - -1
172:04 - and all the decimal points in between
172:11 - and the secret here is that this value
172:13 - gives you all the points between
172:15 - negative one
172:15 - and one but rounding only rounds whole
172:18 - numbers
172:19 - so the values we could possibly get are
172:21 - one minus one and zero
172:24 - but if you multiply the entire thing by
172:26 - ten we can get all the values from -10
172:29 - to 10. so this is what we effectively
172:32 - end up rounding
172:34 - and then we can just divide out of this
172:35 - by 10 and since those numbers are much
172:37 - cleaner
172:38 - the result is a single decimal point
172:40 - that is looking much nicer
172:42 - so with that you could add a bit more of
172:45 - a background to it
172:46 - but i think by itself you get the
172:47 - principle this is working pretty well
172:50 - and especially if you combine it with
172:51 - the last few videos where you add a
172:53 - lower third rectangle behind it
172:55 - this could look pretty good so i hope
172:57 - all of that made sense
172:58 - and i will see you in the next video
173:00 - hello there in this video
173:02 - we are going to create a flexible arrow
173:04 - that consists of a triangle
173:06 - and a path and the really important
173:08 - point here is that we only have to
173:10 - control the start and end point of the
173:12 - path
173:12 - and the triangle at the end updates
173:14 - automatically along with that
173:16 - which is super powerful if you ever have
173:19 - to put lots of triangles in a certain
173:20 - position with different rotations
173:23 - which can get really annoying to do by
173:25 - hand
173:26 - unfortunately for that though we will
173:28 - have to talk a bit more about math
173:30 - although we don't have to do any math
173:31 - ourselves instead we just have to
173:33 - understand
173:34 - what one specific function does
173:37 - so here i have a new composition it's
173:39 - called flexible arrow
173:40 - and inside there we have a path and we
173:42 - have a triangle
173:43 - and neither of them have any keyframe or
173:45 - code it's a super simple setup right now
173:48 - and what i want to achieve is that i can
173:50 - move this path around
173:52 - and influence the arrow that was a
173:53 - terrible example let's say
173:55 - i can rotate the entire thing and to
173:58 - arrow
173:58 - and the error rotates along with it
174:01 - okay and the first thing we need for
174:04 - that
174:05 - is to be able to control the start and
174:06 - end point of this path
174:08 - and this is something we have seen in
174:10 - the last video
174:11 - i have to go to window again and open
174:14 - create notes from paths
174:17 - and now in my path i have to go to its
174:20 - own
174:20 - path so the name path might not have
174:23 - been great
174:24 - but anyway so with path selected i want
174:26 - to create points from nulls
174:29 - and now i can close this and now i have
174:32 - two nodes that can control my path and
174:35 - this is already making it much easier to
174:37 - control
174:37 - this layer and let me rename them that
174:40 - is going to help a little bit
174:43 - so for the first path i'm going to call
174:45 - this start
174:46 - and the second one is going to be end
174:50 - and there we go this feels much cleaner
174:53 - and
174:53 - now what i want to achieve is that this
174:56 - triangle
174:57 - has the same position as the endpoint of
174:59 - this null path
175:01 - and really all i have to do for that is
175:03 - to open the position property for both
175:04 - of them
175:06 - and well use the pick whip to set one to
175:08 - the other
175:10 - so right now this triangle always has
175:12 - the same position as this end point
175:14 - now i can move this around and we are
175:17 - getting
175:19 - a triangle moving along with it although
175:22 - it does
175:22 - not rotate along with that this is what
175:25 - we are going to cover now
175:27 - that we have to know for example if i
175:29 - put it in a slightly more interesting
175:30 - position let's say here
175:32 - i want to know what is the specific
175:34 - standpoint here and what's the end point
175:36 - here
175:36 - and i do know all of this but i do have
175:38 - to have all of this inside of a single
175:40 - variable
175:42 - so let me open for my triangle
175:44 - irritation
175:45 - this one gets some code and in here
175:49 - i want to get let's start with var
175:52 - position one and this one's going to get
175:55 - the end position
175:56 - so this one i just use the pick whip and
175:58 - get my end position
176:00 - then i want a semicolon and then i want
176:03 - part two and this is going to be
176:08 - let me just copy the entire bit and this
176:11 - one is supposed
176:12 - to be start and it needs to be
176:15 - e2 so now we have
176:19 - two positions that is a pretty good
176:21 - start
176:22 - and now well i want to know the
176:24 - relationship between these two
176:26 - and all i have to do to get that is
176:28 - going to be stored in a new variable
176:30 - let's call it change and really all i
176:34 - want to do
176:35 - is to subtract the end value from the
176:37 - start value
176:39 - so all i have to do is p one minus p two
176:43 - now we have one position that we want to
176:45 - get the angle two
176:46 - and our starting position is always
176:48 - going to be zero and zero
176:50 - so the very origin of our screen and for
176:53 - that
176:54 - i'm going to need a very specific mav
176:56 - function it is called
176:57 - aton 2 and this one needs the x and the
177:00 - y position of this
177:01 - change and the specific maps here are
177:05 - well quite complicated
177:06 - fortunately we don't have to do any of
177:08 - that because after effects takes care of
177:10 - all of it
177:11 - so let's just go straight forward so i
177:14 - want to store all of this
177:15 - in a new variable that i'm going to call
177:20 - let's call it direction and for this one
177:23 - i want
177:25 - math.atan2
177:28 - and into this i have to pass in the x
177:31 - and the y-coordinates
177:33 - although it has to be first the
177:34 - y-coordinate and then the x-coordinate
177:37 - it's
177:37 - a little bit weird but well you get used
177:40 - to it
177:41 - so this has to be change one so the
177:42 - y-coordinate and then i want
177:44 - change x so the first index
177:49 - and with that we are almost done
177:53 - the one last problem we have is that all
177:55 - of this
177:56 - is in radians but our rotation needs to
178:00 - be in degrees
178:01 - so we have to turn the degrees into
178:03 - radians
178:04 - and fortunately again we don't have to
178:06 - do it ourselves because after effects
178:08 - has a function called radians to degrees
178:11 - and we can pass in our direction in
178:13 - there
178:14 - and now let's try this and we are
178:19 - almost there so now there's just a
178:21 - slight
178:22 - weird behavior and the only problem we
178:26 - have here
178:26 - is that the starting point of this
178:28 - triangle was slightly off
178:30 - and well all we have to do is to rotate
178:33 - this
178:35 - by 90 degrees and
178:38 - now this is working so the only problem
178:40 - we had here was that the starting
178:42 - rotation of this triangle
178:44 - should have been to the right instead of
178:46 - zero
178:47 - then it would have worked from the start
178:49 - but well all we have to do
178:50 - is to add 90 to it and now
178:53 - we get an arrow that is
178:56 - updating perfectly in terms of how the
179:01 - paths aligning with it
179:03 - which is super useful if you just want
179:05 - to point at something and create lots of
179:07 - arrows that you don't want to recreate
179:09 - every time
179:11 - all right so with that covered let's do
179:13 - an exercise
179:14 - and the exercise for this video is going
179:17 - to be slightly different from the other
179:19 - videos so far
179:20 - so let me explain if you have followed
179:22 - along for this video
179:23 - i am pretty sure you're quite confused
179:25 - about this setup
179:27 - so for example if i hadn't explained to
179:29 - you how any of this works
179:30 - how could you have figured it out
179:31 - yourself and this is what this exercise
179:34 - is going to be
179:35 - because to program in literally any
179:37 - language there's one skill you
179:39 - absolutely have to master and that
179:42 - essentially is to look stuff up online
179:45 - pretty much half of any programmer's job
179:47 - is to just use google and figure out
179:49 - problems that's a really common thing
179:51 - and that actually brings us to the
179:53 - exercise
179:53 - so i want you to imagine that this video
179:55 - never happened but you are still trying
179:57 - to figure out the same problem
179:59 - to find the angle between two points and
180:01 - after effects
180:02 - and just try to use google or search
180:04 - engine of your choice
180:06 - to figure out this problem yourself and
180:08 - find a website that explains
180:10 - it to you as well so just try to find
180:12 - something online that you think is going
180:14 - to help you
180:15 - so pause the video now and try this
180:17 - yourself
180:22 - alright so let's try together and here i
180:25 - am already in google
180:26 - and really all i have to do is to look
180:28 - for a certain thing
180:30 - and the best way usually to start is to
180:32 - start with after effects
180:34 - because that's what we are working in
180:36 - and then here i want to explain
180:38 - what i'm trying to find so in my case i
180:40 - want to calculate the
180:41 - angle between two points
180:46 - or something like that if you play
180:48 - around with this you're usually going to
180:49 - find something
180:50 - and in there you can find quite a few
180:52 - websites that are going to help you
180:54 - for example here is one website that
180:57 - seems to be
180:58 - quite on point for this and this is
181:00 - actually literally what we are looking
181:01 - for
181:02 - and this website is very famous it's
181:04 - called stack overflow
181:06 - and this is essentially a website where
181:08 - you can ask your coding questions
181:10 - and usually a very competent person is
181:13 - going to help you
181:14 - so this website is super useful to
181:16 - figure out any kind of coding problem
181:18 - for well literally any language
181:22 - and well here's a person describing a
181:24 - problem in quite some detail
181:26 - and if you scroll down there's one
181:28 - person
181:29 - giving an answer to it and if you look
181:31 - at this code it looks very similar
181:33 - compared to what
181:34 - i have done in the tutorial and well the
181:36 - reason for that is that when i figured
181:38 - out this myself
181:39 - i literally use this website it's super
181:42 - useful so this would be
181:43 - one way to get better at programming in
181:45 - after effects that you try to figure
181:47 - stuff out
181:48 - yourself and if you get stuck you can
181:50 - literally ask for help online
181:52 - and very often you are going to get a
181:54 - really good answer
181:56 - and if you do this often enough you will
181:58 - eventually become more and more
182:00 - independent and solve more and more
182:01 - problems yourself
182:03 - and maybe even answer somebody else's
182:04 - question which i would really recommend
182:06 - you to do
182:08 - but alright i hope that was helpful and
182:09 - i will see you in the next video
182:11 - hello and welcome back in this video we
182:14 - are going to learn how to sample
182:15 - colors and after effects and here's what
182:18 - we are going to do with that
182:19 - we have a couple of rectangles on the
182:21 - screen and they all animate
182:23 - in seemingly arbitrary ways but what is
182:26 - happening here
182:27 - is that all of these animations are
182:29 - driven by another layer
182:31 - and this layer is only black and white
182:34 - and what is effectively happening
182:36 - is that we are looking at every single
182:37 - pixel of this composition
182:39 - and if that pixel happens to be white we
182:41 - are going to make the rectangle in that
182:43 - position visible
182:44 - and give it a scale of 100 however if
182:47 - the pixel happens to be black
182:48 - then the rectangle is going to have a
182:50 - scale of 0 and is going to be invisible
182:53 - and then all the points in between are
182:54 - going to be middle points
182:56 - so for example if we have a perfectly
182:58 - gray color our rectangle in that
183:00 - position
183:00 - is going to have a scale of 50 and an
183:03 - opacity of 50 as well
183:05 - and then when we animate this background
183:07 - image we are going to animate every
183:08 - single rectangle on the screen as well
183:11 - which is a super powerful concept and
183:14 - actually quite easy to achieve
183:16 - because all we need is one new function
183:19 - and that is called
183:20 - sample image and well what this one does
183:22 - it samples an image
183:23 - and returns us a color and that we can
183:26 - use
183:27 - in lots of different ways so let's
183:29 - actually jump into after effects and
183:31 - let's have a look at this
183:32 - and alright here i am in my composition
183:35 - and
183:36 - it's called transition and i also have a
183:38 - background composition now
183:40 - as well this one we are going to look at
183:41 - in a second
183:43 - and inside of my transition composition
183:45 - i have two layers
183:47 - one is called box and one is called test
183:50 - and test i am only going to use to
183:52 - visualize what we are doing
183:54 - we're going to delete it in just a bit
183:55 - but it's really useful to illustrate
183:57 - what we are doing
183:58 - and then in my background this is
184:01 - just two layers let me minimize them
184:04 - that we have one white layer that is all
184:06 - the way in the background
184:08 - and then on top we have a black layer
184:09 - that we can just move around
184:11 - and in here it is really important that
184:14 - you cover the entire background either
184:16 - with black or with a white color
184:18 - and what you cannot do in here let me
184:21 - make them invisible
184:22 - you couldn't just use the default color
184:24 - of the composition
184:25 - so if i go to composition settings there
184:28 - i have set a color
184:29 - and this one is a whitish color and
184:31 - while we can see this one
184:33 - after effects is going to ignore it when
184:34 - it does the sample image
184:36 - so we have to have a layer in there all
184:39 - right
184:40 - back in my transition composition i want
184:42 - to put the background behind all the
184:43 - other layers
184:45 - so now we can see it but it doesn't do
184:47 - all that much yet
184:49 - but this is what we're going to do now
184:51 - and let me first do this on test
184:53 - so i can perfectly illustrate what we
184:55 - are doing so for test
184:57 - i want to give a script to the source
184:59 - text property
185:01 - i'm going to get rid of all the default
185:02 - text in here
185:04 - and now i'm going to give it a couple of
185:06 - variables
185:08 - the first one is just going to be the
185:10 - composition that we want to sample a
185:12 - color from
185:13 - which in our case is going to be this
185:14 - background and let's just call this
185:17 - bg just to save me some writing and in
185:20 - here
185:20 - we could just use the pick whip this
185:22 - would work perfectly fine
185:24 - so this would be the composition we want
185:26 - to look at and what we have to do now
185:29 - is to get the color from it which i'm
185:31 - also going to store in a variable
185:32 - that i'm going to call c
185:36 - and now what we have to do is to use bg
185:39 - and then the function sample image
185:43 - and this one is going to need two
185:45 - arguments
185:46 - number one is the property we want to
185:48 - look at so do we want to look at the
185:50 - opacity or the colors
185:53 - so by what measure do we want to look
185:54 - for pixels and in our case
185:56 - this is transform and
186:01 - position so we want to look for pixels
186:04 - via their position and then we need a
186:07 - second argument
186:09 - and that is the sample size so how large
186:12 - of an area do we want to look at
186:14 - and in my case this should be one by one
186:16 - so we are looking at one individual
186:18 - pixel
186:19 - with that we should be getting a color
186:22 - you're going to see in a second what
186:23 - that does
186:24 - so now all i want to do is set the
186:25 - result of all of this as the property
186:28 - value for this
186:29 - world property so now let me click
186:31 - outside
186:33 - and now we're getting 1 1 and 1.
186:38 - and if i move over to the black side you
186:41 - can see
186:41 - 0 0 and 0. so what we effectively get
186:45 - is the color argument for the background
186:49 - and i could make this even fancier if i
186:51 - added any other color
186:53 - so let me just add something else in
186:55 - here
186:58 - i could so now i have a red square in
187:00 - there
187:02 - and now that one you
187:06 - let me just lock this one this is going
187:08 - to be annoying
187:11 - so now we can move this thing around and
187:14 - whenever i get over the red text we get
187:17 - a really large number
187:18 - and let me actually change the color of
187:21 - the text
187:22 - so we can see what's happening
187:27 - so what we get is the full amount of red
187:31 - and we have just a little bit of green
187:34 - and then if i move it all the way to the
187:36 - side
187:38 - we would okay we can't even see it
187:39 - anymore but there's a tiny bit of green
187:41 - as well
187:43 - but effectively what we're getting here
187:45 - is the color argument
187:48 - and the trick to make all of this
187:50 - influence let me get rid of this red one
187:54 - now the really smart thing that makes
187:56 - all of this work is that we can use
187:58 - all of these numbers to influence any
188:00 - other property
188:01 - so for example if i just took
188:04 - let's say the index zero so only the
188:07 - first one
188:09 - and this one would be one and if i move
188:12 - it
188:13 - very hard to move these things so if i
188:16 - move this
188:16 - here then we can still see it now this
188:19 - would be zero
188:20 - and this is just a number that we could
188:23 - be using to influence the scale or the
188:25 - opacity
188:26 - or really any other property and this is
188:29 - what i talked about earlier
188:31 - that really all we are trying to get is
188:33 - different numbers that we can use for
188:34 - different purposes
188:36 - and in this case we are getting returned
188:38 - an array
188:39 - that has four different numbers for red
188:42 - green blue and the opacity
188:44 - and we can pick any of these values and
188:46 - then we just have a number that we can
188:47 - use like
188:48 - index or time so this is super powerful
188:51 - and makes the entire thing quite easy
188:54 - let me copy the entire thing now i don't
188:56 - need my text anymore
188:58 - and instead i want to open the scale
189:00 - property of this box
189:02 - and give it the same arguments i have
189:03 - done in here
189:05 - although if i click outside now after
189:07 - effects is going to give me an error
189:08 - that the result must have a dimension of
189:10 - 2 not 1.
189:12 - so not a problem let me create a new
189:15 - array
189:16 - and in there i just want
189:20 - my c0 and c0 again
189:25 - and now this would not exactly work well
189:28 - it would kind of work
189:30 - let me move this one up a tiny bit so if
189:33 - you look at the scale property now
189:36 - we are on the white background and if i
189:38 - zoom all the way in
189:39 - we should be able to see it very faintly
189:42 - so there you can see it right now it's
189:44 - one pixel wide and one pixel high
189:47 - because it's on the white background but
189:49 - if i move it over the black one
189:52 - the scale property gets to zero and zero
189:54 - because the first color argument here is
189:56 - a zero
189:57 - but obviously this is well very small
190:00 - but really all we have to do to fix that
190:03 - is to multiply all of this by a hundred
190:06 - and
190:06 - now well we still can't see it because
190:08 - we're over the black background
190:10 - but if i go over the white one there we
190:13 - go
190:14 - now we have one hundred percent
190:18 - so whenever i move this rectangle if we
190:21 - over white
190:22 - we have the full scale if we over black
190:24 - it disappears
190:26 - and this is pretty powerful
190:29 - and now all i have to do is with the
190:31 - background selected
190:33 - i have to make this thing a bit more
190:35 - blurry and then we can work with this a
190:37 - lot
190:38 - so i go to effects and presets and
190:41 - i just want to give it for now a
190:42 - gaussian blur
190:45 - and then i can just make this entire
190:47 - thing
190:48 - real blurry and then you can
190:51 - really see the effect of this so now we
190:54 - have a really
190:55 - blurry background and now
190:59 - if i move this thing it scales along
191:02 - with the background
191:03 - so it disappears over perfect black and
191:06 - over perfect white we have to full scale
191:08 - but for everything in between we are
191:10 - getting different sizes
191:12 - so this is pretty cool and of course
191:14 - what we can also do
191:16 - if i'm back in the background i can
191:18 - animate this thing so let me give it a
191:20 - position property
191:22 - maybe not that far back put it further
191:25 - at the beginning
191:26 - and then let's put it somewhere here now
191:28 - i just want to move this thing to the
191:30 - right
191:33 - and now if i go back to my transition
191:38 - and let me place my rectangle in there
191:42 - and a bit more zoomed in
191:46 - now if i just play this animation
191:50 - this is still working
191:54 - so after effects doesn't really care
191:56 - what is happening in the background
191:58 - or who cares what is the color at this
192:00 - point in time and then it uses that
192:01 - color to create the size of this
192:03 - rectangle
192:05 - and then if i duplicate this rectangle
192:07 - this would also still work
192:09 - so now let me do the entire thing again
192:12 - and we would still get
192:13 - same outcome so super powerful
192:17 - and with that you can create super
192:18 - complex animations for example what i've
192:21 - done in the thing i've showed you
192:22 - earlier
192:23 - let me get rid of this thing entirely
192:25 - actually we don't need it anymore
192:27 - and instead i want to create a rectangle
192:30 - that covers the entire screen
192:32 - and this needs to be black
192:35 - and the effect i have used was called
192:37 - jaws or cc jaws
192:40 - and there we can get if i change to
192:43 - completion
192:45 - we can get a well a jaws kind of pattern
192:48 - i don't really know what it's called
192:49 - and you could even change it to
192:51 - different things i think i used the wave
192:53 - in my one but
192:54 - let's stick with spikes for now
192:58 - and you can also change the direction it
193:00 - really doesn't matter
193:01 - you can play around with this as much as
193:02 - you want
193:04 - but the one part that is really useful
193:06 - is the center
193:07 - so you can move it up and down
193:11 - or you can move it left and right and
193:13 - here all of this
193:14 - is automatic so it never runs out so
193:18 - what we can do for this property
193:20 - i can give it some script and this is
193:23 - going to need an array so x and y
193:25 - and for x i just want to go with time
193:28 - multiplied by
193:29 - a hundred and for y i can just go with
193:32 - 540.
193:35 - and now if i play this animation this
193:38 - animation this thing is going to run
193:40 - forever it is never going to stop
193:43 - and now what i can do is to just give it
193:46 - a blur
193:48 - and i went with fastbox blur this one is
193:51 - a nice and reliable blur
193:53 - and repeat edge pixels
193:56 - so let me make this nice and blurry
194:00 - and with the height property you can
194:01 - also make this a bit more extreme
194:04 - yes that looks good cool
194:08 - so now if i play this thing again we get
194:11 - a very strange looking black and white
194:14 - pattern
194:15 - but if i go back to my transition
194:17 - property
194:20 - now i play this we get
194:23 - a very strange animation and of course
194:26 - you can just
194:27 - hide the background as well all of this
194:29 - is still going to work
194:33 - so you don't have to have this layer
194:35 - visible and with that part covered
194:38 - all we have to do now is to multiply
194:41 - all of these cubes and while we're doing
194:44 - this
194:44 - let me disable this effect so we can
194:46 - place them properly
194:48 - and let me open proportional grid
194:51 - probably going to make it easier to
194:52 - place them so to place them you could
194:54 - probably write a really smart function
194:56 - as well
194:57 - but in my case i well i'm just going to
195:00 - drag and drop them
195:02 - and here's something that you do want to
195:04 - consider especially if you have a very
195:06 - slow computer
195:08 - make sure that you don't over do this
195:10 - this is quite processor intensive
195:13 - in my case i have a fairly powerful
195:15 - computer but if i have 40 or so
195:17 - rectangles on the screen this is still
195:19 - getting very slow
195:21 - so don't add too many rectangles at once
195:24 - slowly build this up and test how this
195:26 - is working
195:28 - but alright in my case i don't really
195:30 - have to worry about that
195:31 - so i just drag and drop them down
195:35 - and then once we have that step covered
195:39 - let me
195:44 - re-enable all of them and now you can
195:46 - already see this is working
195:48 - and i can just copy them again and again
195:51 - [Music]
195:54 - and again
195:55 - [Music]
195:57 - and a few more times and then we
195:59 - basically got this
196:08 - and now if i play all of this
196:13 - we can see a very strange animation that
196:16 - would probably take forever to make by
196:18 - hand
196:19 - and well what we can also do now is
196:22 - every time we change this
196:23 - we also change the animation itself so
196:25 - for example what i can do
196:27 - i can increase the width and i could
196:30 - change this
196:30 - to maybe look that looks weird
196:34 - let's say waves and let's make this a
196:36 - bit
196:37 - more blurry there we go this i think
196:40 - looks better
196:42 - and now if i play all of this again
196:47 - we get it well a different kind of weird
196:49 - animation
196:51 - but i think you can see the potential
196:53 - here that well
196:54 - we can add a ton of different things in
196:56 - there and really just animate them how
196:58 - we see fit
196:59 - and this way we could animate so many
197:02 - different properties
197:05 - and this is also going to be the
197:06 - exercise for you that i want you guys to
197:09 - add an opacity property to one of these
197:11 - layers and then duplicate that
197:13 - so basically what you have to do is to
197:14 - get rid of most of the layers
197:16 - add some code for the opacity and then
197:18 - copy all of them again
197:20 - and specifically what i want to do is if
197:22 - our rectangle is over
197:23 - white spot it should have 100
197:26 - transparency if it is over a black spot
197:28 - it should be invisible
197:29 - so pause the video now and try this
197:31 - yourself
197:36 - so let me get rid of all of this again
197:40 - and now we only have a single rectangle
197:43 - this is going to make it easier to write
197:45 - all the code
197:46 - and now with shift and t i open the
197:48 - opacity property
197:50 - and this one is going to get some code
197:52 - and in
197:53 - here we could approach this in a couple
197:56 - of different ways
197:57 - number one is that we could just copy
198:00 - this entire line here
198:02 - and do the same operation but
198:05 - this would not be an ideal way to
198:07 - approach it
198:08 - for the simple reason that this would be
198:10 - really processor intensive
198:12 - that we look at one pixel another
198:14 - composition twice
198:15 - on one layer and then if we multiply
198:18 - this layer let's say 20 times
198:20 - then we are going to do this operation a
198:22 - whole lot of time
198:23 - which is going to make the entire thing
198:25 - really slow
198:27 - and fortunately we don't have to do this
198:30 - because we already know the color that
198:32 - we need
198:32 - we have this information and really all
198:35 - we're doing is that we are applying this
198:36 - to the scale right now
198:38 - so well all we have to do is to set this
198:42 - to transform its scale so the opacity is
198:44 - determined by the scale
198:46 - and from that i just want to have the
198:48 - first index
198:50 - so now we only get 70
198:53 - because our scale is 16.9 and if i
198:57 - go a bit higher let's say here
199:01 - now we have a scale of 79 and that makes
199:03 - our scale 79 as well
199:06 - and that way we didn't have to sample
199:07 - the image again
199:09 - instead we just use scale which is so
199:12 - much faster to do and also easy i
199:15 - suppose
199:16 - and of course if you want to go crazy
199:18 - you could also use rotation for example
199:20 - and let's just do the same thing here
199:22 - and let's just see what happens
199:25 - so scale and zero and
199:28 - now we also get a rotation in there
199:34 - and okay now let me get
199:37 - a position where it's a bit larger and
199:40 - now
199:41 - i can minimize this and copy it a couple
199:43 - of times
199:48 - and of course you can also combine all
199:50 - of this
199:51 - with lots of other parts
199:54 - like time or index or in point
199:57 - really whatever you feel like it's
200:00 - incredibly powerful
200:02 - and this is what i'm really trying to
200:04 - get you at
200:05 - that if you're a bit creative and
200:07 - combine different parts of this you can
200:09 - create
200:09 - so many really interesting animations
200:14 - close enough okay and final one
200:18 - and okay this is going to look very
200:20 - strange let's play it now
200:23 - and there we go we have a really strange
200:27 - looking animation
200:29 - and if i changed all of this
200:32 - let me open it a bit less
200:43 - now we will get this kind of animation
200:47 - and i really want you to think about if
200:50 - you had to set up
200:51 - all of this by hand it would really take
200:53 - a crazy amount of time
200:55 - so this way we can do all of this much
200:58 - easier
200:58 - and have a much more interesting effect
201:00 - but alright i hope that made sense and i
201:02 - will see you in the next video