00:00 - hello everybody so a while ago I made
00:02 - this pong game in PI game and people
00:05 - seem to quite like it so I guess I added
00:07 - a little bit of stuff to it and make it
00:08 - a little bit more fancy and specifically
00:11 - I'm going to add two particular things
00:13 - the first one is to have a score counter
00:15 - so you can actually tell who's ahead and
00:18 - who's behind and the second one is to
00:20 - have a little bit of a count on timer
00:21 - before the game starts so that it isn't
00:24 - that surprising and you have time to
00:26 - prepare
00:27 - and covering those two topics should
00:29 - actually get you quite a few extra
00:31 - things in pygame that are really
00:32 - important since it's been a while since
00:35 - I made the game let's go over it really
00:37 - fast so here's the final file I made in
00:39 - the first tutorial
00:42 - and we are starting with a couple of
00:44 - function I'm going to talk about them in
00:45 - a second we effectively start with the
00:48 - general setup where we just initially
00:50 - had pygame that one's quite simple and
00:52 - we create a clock as well everyone is
00:54 - basically used to make sure the game
00:55 - runs at a constant speed and we have
00:58 - main window so here we just create the
01:00 - main display surface and we have to
01:02 - display width and height and we create a
01:05 - title and I have called the display
01:06 - surface screen in our game and this is
01:09 - the one that a player sees in the end
01:11 - this is going to become quite a bit more
01:13 - important if you have no idea how
01:14 - surfaces work in pi game check out the
01:16 - first tutorial they are going to
01:18 - explained in much more detail but for
01:21 - the rest of it here we set up some
01:23 - colors and we have two game rectangles
01:25 - so these are the two players and the
01:28 - ball itself
01:29 - quite simple and I use the screen to
01:32 - calculate whether should be on display
01:35 - then we have some game variables and
01:37 - this is just how fast everything is
01:39 - going to work so these are all the basic
01:41 - variables we need for the game then we
01:43 - come to the while loop and in this one
01:46 - in this first part here we are getting
01:49 - to play an input and we also get a
01:51 - function to quit the game once we're
01:52 - done with it if a get on a bit further
01:54 - then we have the game logic and the game
01:57 - logic basically runs across three
01:59 - different functions the first one spawn
02:01 - animation then we have play animation
02:03 - and then with the opponent AI play
02:05 - animation and appoint AI are quite
02:07 - straightforward they control the play
02:09 - and the opponent respectively board
02:11 - animation is quite a massive function
02:13 - you can find right at the top this one
02:15 - effectively controls the ball and make
02:17 - sure the ball collides and this function
02:19 - also ensures that if the bar gets too
02:21 - far to the left or to the right you get
02:23 - the ball restarted the center we use the
02:25 - ball start function and this function is
02:27 - only called from the board animation
02:29 - function itself and we have to find it
02:32 - down here
02:33 - and once we have those free functions we
02:36 - just individuals display all of it and
02:39 - then in the end the two lines pygame
02:42 - display dat flip just draws everything
02:44 - the claim before it and clock tot take
02:46 - the terminus of a frame rate it's less
02:48 - than 100 lines and it honestly isn't
02:50 - that complicated of a code but all right
02:52 - let's start talking about the first
02:54 - thing I would like to add and that is a
02:57 - score counter so we just display how
03:00 - many points a player has scored and to
03:02 - get the score we need two things to make
03:04 - all of this work the first one is that
03:07 - we actually the variable that calculates
03:09 - what the score is and that one's
03:11 - actually really easy we can just use a
03:13 - variable to measure which one is which
03:15 - but then we also need to display this
03:17 - variable in text and that's a little bit
03:20 - more complex in Pi game so let's first
03:22 - talk about how to display text in pi
03:24 - game in the first place
03:26 - to get text and pi game you need three
03:28 - steps the first one is to create the
03:30 - font itself and the font size so all
03:33 - this is is that you create a basic font
03:35 - and tell it how large it should be but
03:38 - at this stage you don't actually create
03:40 - any text you just create a blueprint for
03:42 - the text itself and only in the second
03:45 - step do you actually add text but the
03:47 - problem here is that this tax is going
03:49 - to be added on its separate surface so
03:52 - it's not going to be drawn on the main
03:53 - surface that we have created earlier so
03:55 - the screen and step pi again creates its
03:57 - own surface and puts text on that and
04:00 - because of that we need step number
04:01 - three where we take the text surface and
04:04 - put it on the main surface and that's
04:07 - basically it so in our game I will
04:08 - create a fund then I will use that phone
04:10 - to create text on its own surface and
04:12 - then I will put that surface on the main
04:14 - surface so here we are back in the code
04:16 - and I am going to create a new section
04:19 - with a comment and I'm going to call
04:22 - this text variables and in here I'm
04:27 - going to start with two variables that
04:28 - I'm going to call player score and I
04:31 - start with zero and opponent score which
04:36 - is also zero so those two are just
04:39 - integers that measure what disco is for
04:41 - each player so that's quite easy but
04:44 - next we need to create the font for the
04:46 - text that we want to use
04:47 - so I'm going to call this let's call it
04:50 - game font and to create that bond we
04:53 - need PI game dot font font and make sure
04:57 - you get the uppercase in the lowercase
04:59 - right so the first one is lowercase the
05:01 - second one is uppercase can be quite
05:03 - confusing but now we need to fund up we
05:05 - want to use and in my case I want to use
05:07 - free suns
05:11 - old dot TTF which is a phone that
05:14 - already comes with basically any
05:16 - computer i think okay and with that one
05:19 - done now we do the second argument it's
05:21 - going to be the size of the text in my
05:23 - case I'll go over text size of 32 so the
05:26 - larger number is the larger your text
05:27 - will be and discovers the first step so
05:30 - now we have a font and two variables
05:32 - that calculate what the score is
05:34 - and with that one done we need to create
05:37 - the surface where the text will be
05:38 - displayed on and for that I'll go a
05:41 - little bit lower and I'm going to put
05:43 - the text below all the drawing stuff you
05:47 - can put a little bit higher but it needs
05:49 - to be above the background so at least
05:52 - has to be below this line otherwise
05:54 - you're going to paint the text below the
05:56 - background so you wouldn't be able to
05:57 - see and I like all of these parts and
06:01 - one night's paragraph so I gonna add all
06:04 - of this afterwards and now we need to
06:06 - create a surface with the text and I'm
06:09 - gonna start off this in a variable first
06:10 - I'm gonna call the first one player text
06:13 - and to create a new surface with text we
06:18 - need to start with the font I called
06:20 - mine game font and I'm gonna need render
06:23 - and as arguments the first thing we need
06:26 - to pass in is the argument for what the
06:28 - text is supposed to be in my case I'm
06:30 - going to use an F string and just pass
06:33 - in the player score the second argument
06:37 - is if the text is entirely iced or not
06:39 - in my case I don't really care about it
06:41 - so I put it to false but it could put
06:43 - true in here it doesn't really matter
06:45 - and then we need the color of the text
06:47 - and in our case we already have the
06:49 - color it's the light gray color that we
06:52 - defined very early on in the game okay
06:54 - and now we have a display surface now we
06:57 - need to put this surface on the main
07:00 - surface so on the screen surface and
07:02 - that one is done with screen dots
07:05 - blitt and i don't actually know what
07:08 - that stands for but it puts one surface
07:10 - on another so what we put into arguments
07:12 - here is the surface we want to put on
07:15 - the surface and in my case this is a
07:17 - player text and then we need to position
07:20 - where to put this text
07:22 - and in my case is going to be six
07:24 - hundred sixty and four hundred seventy
07:27 - and I pretty much got these variables by
07:30 - trial and error and they're roughly in
07:31 - the middle
07:32 - and that's basically all we need if I
07:35 - run the game now we should have text yes
07:38 - well we see a zero here it doesn't
07:40 - exactly work yet
07:41 - but that's going to come in a second
07:43 - okay let's close it for now and now we
07:46 - need to do the same thing for the
07:48 - opponent because right now we only have
07:49 - to play a tax so I just copied the
07:51 - entire thing
07:55 - change player to opponent wherever it's
08:00 - needed on an opponent opponent player
08:04 - this was going to be opponent as well
08:06 - and I also need to change the position
08:08 - itself so this one's going to be 600 and
08:12 - if I run the game now we can see both
08:17 - the score variables obviously they don't
08:19 - change right now so we have to work on
08:21 - that but otherwise we already have text
08:23 - now all we need is to update either of
08:26 - these variables and then we are pretty
08:29 - much good to go for this part updating
08:31 - those is actually quite easy and I'm
08:33 - going to do this in the ball animation
08:35 - part
08:36 - and what we have right now is this one
08:40 - here that's the function of calculates
08:42 - if the boys gotten too far left or too
08:44 - far right so if the ball has gotten
08:46 - smaller than zero this means the ball is
08:48 - very far left or beyond the screen on
08:50 - the left and if the ball right is
08:52 - squared in the screen width means the
08:54 - ball is all the way on the right and we
08:56 - can use both of these to calculate if
08:58 - either player has scored a goal but to
09:01 - really calculate which one is which we
09:03 - need to separate them to two separate
09:04 - statements so let's start with that one
09:07 - and let me just rewrite them
09:11 - and don't forget function and the fifth
09:16 - statement now and now we have two if
09:19 - statements that do the same thing that
09:21 - we have done before but the advantage
09:23 - now is that we could control which side
09:24 - the board has entered so on the ball
09:28 - left this means that the player scored a
09:30 - goal so when he they are that was
09:33 - terrible writing player score plus
09:37 - equals one
09:39 - and if the bug is to find the right deer
09:41 - point get score so we have opponents
09:43 - score
09:44 - thus equals 1 this is going to work
09:48 - except for one thing that right now we
09:51 - have a local scope we're inside of a
09:52 - function and we're trying to effect a
09:55 - global variable which is down here so by
09:58 - itself this wouldn't work we have to
10:01 - declare a global variable for these two
10:03 - so this would be player score and
10:08 - opponent score and you can see in the
10:11 - top here this is a lot of global
10:13 - variables and this ball animation
10:15 - function really isn't well designed it's
10:17 - still working because the game is fairly
10:19 - small but if it becomes any more complex
10:22 - this is just really bad practice I only
10:25 - did this because I started the original
10:27 - tutorial and didn't expect it to become
10:28 - much more complex if you want to
10:30 - challenge yourself try to avoid this by
10:32 - ever using return statements or to
10:34 - create a whole class off the ball
10:36 - besides that this should now be working
10:38 - so let's start it up and now to hone and
10:42 - got a score and let's try it again yeah
10:46 - this works
10:48 - and all right now we have a player score
10:51 - and we are able to put text on the
10:53 - screen so now we can tackle the second
10:55 - part of this tutorial and it is to
10:57 - create a countdown timer before the ball
10:58 - starts and the really useful part we're
11:01 - going to learn in this part is about how
11:02 - to use timers and pygame which by itself
11:05 - is a really useful topic so let's talk
11:08 - about the theory of timers and pygame
11:09 - first before we get into the practice so
11:12 - effectively in pi game you don't have a
11:15 - specific timer so there is no function
11:18 - where you can just wait for a couple of
11:20 - seconds and then start and never
11:21 - function it just doesn't exist in pi
11:24 - game instead how timers work in pi game
11:27 - is something like this when you start Pi
11:29 - game a timer starts to count from zero
11:31 - until you stop the game and you can
11:33 - measure on what time you are on right
11:35 - now and you can do this multiple times
11:37 - and with that you can build a PI game
11:40 - timer and specifically what you need to
11:42 - do is that you first need to create a
11:44 - function that measures the time only
11:45 - once so let's say at three seconds or
11:48 - 3,000 milliseconds that's how pi game
11:50 - measures time we have a function that
11:52 - runs once and returns the time and after
11:55 - that we repeatedly call the function and
11:57 - try to get the time again and again and
11:59 - again and as soon as the difference
12:01 - between your original point and the
12:02 - current point is greater than let's say
12:05 - 2000 and we want to run the function so
12:09 - that way we have made a time that runs
12:10 - for two seconds and the major problem
12:13 - here is that you really have to be
12:15 - careful about running a function once
12:16 - and running a function repeatedly which
12:19 - sometimes really gets confusing and the
12:22 - main reason for that is that we have a
12:24 - wild function where everything is going
12:26 - to be run once a second so running a
12:29 - function once can actually be quite
12:30 - difficult at times and along with all
12:33 - the theory here's another problem that's
12:35 - going to make this even more complicated
12:36 - we make this kind of time at work in our
12:39 - game we will have to rewrite a bit of
12:41 - the code so I'll try to go over it quite
12:44 - slowly so here we are back in our code
12:46 - and the first thing we need is a
12:49 - variable that stores the time that we
12:51 - want to choose later so I'm gonna create
12:53 - a new section here and I'm gonna call it
12:56 - score timer dings okay
13:00 - and I just create one variable that's
13:01 - gonna be called score time and I'm going
13:04 - to set it to none for now we're gonna
13:07 - change that in a little bit but for now
13:09 - none just means it doesn't really do
13:11 - anything now we want to make sure that
13:13 - when a score was gold this function gets
13:15 - a specific kind of time and this we can
13:18 - do quite easily up here so we have a
13:21 - function when the player scores a goal
13:23 - and when the opponent scores a goal what
13:27 - we need to do in here is score time and
13:32 - the command we need here is PI game dot
13:35 - time dot get X and this would get us an
13:40 - integer that tells us for how long the
13:42 - game has been running since it was
13:43 - started or most specifically since this
13:47 - PI game dot init method was called and
13:49 - we need to do the same thing also for
13:52 - when the opponent hits the goal so now
13:55 - we have the starting point and also this
13:57 - function is only going to be called once
13:58 - which is quite a nice start to get this
14:01 - thing started and the thing we need now
14:02 - is to have another function it
14:04 - repeatedly runs and checks the current
14:07 - time then we subtract the score time
14:09 - from the current time and then the
14:10 - difference between them is the length of
14:12 - our count on
14:14 - but this is going to present us with a
14:16 - little bit of a problem oh but before we
14:18 - talk about this in detail score time is
14:21 - just like the player score it's a global
14:25 - function so this also needs to be
14:27 - cleared at the top of the function the
14:30 - best function projector time would be
14:32 - the ball start function but here's the
14:34 - problem the ball start function would
14:36 - also only be called once
14:37 - whenever score is achieved but this
14:40 - isn't good for our purposes because we
14:43 - need to call this poster function
14:45 - multiple times so we need to do a little
14:48 - bit of redesigning of our code and the
14:50 - way IDEs
14:51 - achieve this is to just remove this here
14:55 - entirely from the ball animation
14:57 - function and what I do instead is
15:00 - further down in the code I put if score
15:05 - time is evaluates to true then I want to
15:10 - run the ball start function
15:14 - and the basic idea here is that score
15:16 - time at the beginning is set to none so
15:20 - this one would not be running and this
15:22 - one would only be running if score time
15:24 - is something that evaluates to a true
15:26 - statement and when we give it any kind
15:30 - of positive integer like we do here or
15:34 - here
15:36 - then this one would evaluate to true and
15:39 - deposit function would be running so
15:41 - effectively we're working with the
15:43 - different types and - and kind of
15:45 - exploiting app - changes the types but
15:48 - with this kind of setup would basically
15:50 - make sure that now the ball start
15:52 - whenever score was achieved it's gonna
15:54 - run on every single frame as long as the
15:57 - score time is something evaluates to
15:59 - true so now we just need to make sure
16:01 - the ball start function let's go through
16:04 - it it is this one that this one only
16:07 - starts again after a couple of seconds
16:10 - and then once it is greater than this
16:12 - amount of time it sets the score time
16:14 - variable back to none so at this
16:16 - function doesn't run again so to achieve
16:19 - all of that we first need a variable
16:21 - that I will called current time so now
16:26 - we check what is the current time this
16:28 - one is done in the same way that we
16:30 - approach the time for the score time so
16:33 - this would also be PI game but time that
16:37 - get takes
16:40 - and make sure you understand the
16:41 - difference between these two
16:44 - even though they have the same command
16:46 - to do something slightly different this
16:48 - scar time and this scar time is only
16:50 - going to run once so we get one point in
16:52 - time whereas current time gets us on
16:56 - what current time we are on right now
16:58 - and then when we get the difference
16:59 - between these two we basically made a
17:01 - timer because this one is going to get
17:03 - greater and greater whereas this one
17:05 - stays the same so basically what we want
17:07 - is that if current time - score time is
17:12 - smaller than 2100
17:17 - and I'm going to set the ball speed X
17:20 - and all speed y to zero and let me move
17:27 - we put the bond to the center of the
17:29 - screen a little bit high up
17:32 - like let's put a line between but
17:37 - basically what happens is that when the
17:38 - boss that function is run and we get the
17:42 - current time the ball is going to be set
17:44 - to the center of the screen and then we
17:47 - check if the current time minus the
17:50 - score time is smaller than 2.1 seconds
17:52 - and the ball speed is zero so the ball
17:54 - just stays in the middle of the screen
17:56 - and now we just need a case when the
17:59 - difference is greater than 2100 and what
18:03 - I want here and actually use these two
18:06 - lines what we want here is that the ball
18:10 - speed is seven and it should be going in
18:13 - the random direction
18:15 - and same for this one so basically what
18:20 - happens that here we take the time
18:24 - check if this time is smaller than 2100
18:26 - or 2.1 seconds then the board isn't
18:28 - moving and if it's greater than that the
18:31 - board is moving in the random direction
18:32 - and the final thing we need is scored
18:36 - time it's going to be set back to none
18:39 - so at
18:41 - this function down here is not going to
18:44 - be run anymore
18:45 - and again we need to declare score time
18:49 - as a global variable again I have way
18:52 - too many global variables in this code
18:54 - it's really bad practice please don't
18:56 - learn from me all right
18:59 - when we're doing this
19:02 - didn't work and we get an error message
19:03 - and two reasons quite simple
19:05 - I forgot this second zero and in case
19:09 - you haven't seen this kind of thing
19:11 - before it's actually quite a simple way
19:13 - to just write something that's a bit
19:14 - more concise but only happens here we
19:17 - have two variables separated by a comma
19:18 - and we have two values also separated by
19:21 - a comma and all a Python detects the
19:23 - first variable and assigns the first
19:25 - value and take the second variable and
19:27 - assigns the second value or let me get
19:31 - it away and now this should be working
19:34 - right and
19:38 - now we should have a timer so should
19:40 - start about now perfect now we have a
19:42 - timer but this isn't great yet because
19:45 - the player doesn't know when the ball is
19:47 - going to start so we need to add some
19:49 - text to show how much time is left so
19:52 - let's do that now and that's actually
19:55 - quite easy to do because we have done
19:58 - this very same thing before and the
20:01 - logic for that is actually quite simple
20:02 - and we can actually reuse this one quite
20:04 - a bit and what I want is to display
20:07 - three to one and then the ball starts so
20:10 - to get it free we just want to display
20:12 - this one when the difference between the
20:15 - current time at the scorer time is more
20:17 - than 700 but is going to be only on the
20:20 - screen for less than a second
20:22 - and then when we have that likely a
20:24 - number re variable and that's gonna get
20:31 - you can reuse for the game point yet
20:34 - game forth go to render just gets a free
20:40 - and it's gonna get a faults because we
20:43 - don't care about anti-aliasing and then
20:45 - we're gonna call it light gray and next
20:48 - we need to scream don't let number three
20:55 - and the coordinates are going to be
21:01 - screen width divided by two minus N and
21:07 - screen height divided by two plus twenty
21:12 - so basically what this one does is that
21:15 - we take the center of the screen and
21:17 - move it a little bit to the left because
21:18 - this point moves the top left of the
21:21 - number so it needs to be a little bit
21:23 - offset to the left
21:25 - and then screen height would take the
21:26 - middle of the screen and we go down by a
21:29 - little bit and remember in PI game like
21:32 - in most games if you want to go down
21:34 - it's positive Y values okay so now we
21:37 - have two free and is only going to show
21:39 - for the first seven hundred milliseconds
21:41 - so we have to copy this entire statement
21:45 - and now we want to show the number two
21:49 - let me change those number two and
21:53 - number two down here
21:57 - and this one's only going to show
22:01 - if the difference between the current
22:05 - time at the score time is I have a
22:07 - greater than 700 or smaller than 1400
22:13 - and then we do the same thing again
22:17 - and now we want a number one
22:20 - number one here as well and this is
22:24 - going to be at one and it is going to
22:26 - show when we are between 1400 and 2100
22:32 - and after upon
22:36 - countdown timer because then the board
22:37 - has started
22:39 - and all of this should be working now so
22:42 - let's try
22:45 - and let me just get a score three two
22:48 - one all right perfect
22:51 - so this is working now and there's only
22:54 - one thing missing that when we start the
22:56 - game the ball starts immediately and
22:59 - there's no counter at the beginning
23:00 - which is a little bit confusing but it
23:04 - can be fixed really easily all we need
23:06 - is to change this none to any value that
23:09 - does evaluate to true in my case I just
23:12 - gonna use true but it comes to putting
23:13 - one in here or or you could put any kind
23:16 - of text in there
23:19 - doesn't matter but I think true is the
23:21 - most straightforward one and if you run
23:23 - the game now
23:25 - and it starts with the counter and right
23:27 - at the beginning so we are basically
23:29 - done and this is a much more refined
23:31 - experience of the pong game and yeah I
23:35 - hope you enjoyed this tutorial and let
23:36 - me know if you have any question