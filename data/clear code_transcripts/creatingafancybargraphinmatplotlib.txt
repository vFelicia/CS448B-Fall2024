00:00 - hello there in this video we will
00:02 - visualize some data with map.lib and
00:04 - python
00:05 - and here's what we are going to make so
00:07 - on this graph we have bar charts with
00:09 - video game sales
00:10 - and on top of that we have a line plot
00:12 - with pc sales
00:14 - and all of that is actually quite simple
00:15 - to make so let's jump right in
00:17 - and before we get into code let's first
00:20 - talk about map.lip by itself that is
00:22 - really going to help us later on
00:23 - understand what we are doing
00:25 - so in essence map.lib needs two things
00:28 - to visualize data
00:29 - number one is a figure and number two is
00:31 - an axis and a figure is just a blank
00:34 - canvas
00:34 - it doesn't do much by itself except that
00:36 - it holds an axis
00:38 - and the axis is what actually holds the
00:40 - data so on this we would draw our bar
00:42 - charts and our line plot
00:44 - so what we are effectively going to do
00:46 - is that we first create a canvas then we
00:48 - are creating an axis
00:50 - and then we are creating graphs within
00:51 - the axes
00:53 - and you can create multiple graphs on
00:54 - top of the same axis
00:56 - and there is one more thing we need to
00:57 - get started and that is that map.lib
01:00 - is not the default module of python so
01:02 - we have to install it
01:04 - so open either the powershell or the
01:05 - terminal and type pip
01:07 - install matplotlib and then you should
01:09 - be seeing a fairly long animation
01:10 - installation and once that's done you
01:13 - have map.lib
01:14 - so with that one done let's actually get
01:16 - into some code
01:18 - so here i have a completely empty python
01:20 - file and the very first thing i need
01:22 - is to import matplot lib
01:25 - but map.lib is a giant module so what
01:28 - you usually see
01:29 - is that people don't import the entire
01:31 - thing and instead they only import one
01:33 - specific part of map.lib
01:35 - that is called pi plot and this for
01:39 - brevity
01:40 - is usually abbreviated as plt
01:43 - there's one more thing we need to and
01:45 - that is some data to visualize
01:47 - because if you want to visualize data
01:48 - you need some data obviously
01:51 - in my case i already have some data
01:53 - prepared and it's going to look like
01:55 - this
01:56 - well we have five different lists that
01:58 - says phases
01:59 - playstation xbox nintendo and pc sales
02:02 - and these data points either show the
02:04 - sales of a specific console
02:06 - or pc sales in a given year and this
02:09 - data is by no means perfect
02:11 - there are quite a few things i left out
02:13 - but none of that really matters because
02:15 - this is just a demonstration we don't
02:17 - look for accurate data
02:18 - but obviously when you actually create
02:20 - data this is something you really want
02:21 - to keep in mind
02:22 - that the data you are using is proper
02:24 - and accurate but there's another thing i
02:26 - really want you guys to pay attention to
02:28 - that effectively each list is a row
02:32 - and each entry in the list is a column
02:34 - and this is intentional
02:36 - and really important because map.lib by
02:38 - default
02:39 - doesn't know how to connect these
02:40 - different lists and the only way it can
02:43 - connect them
02:43 - is by them having the same order so at
02:46 - the first entry for the playstation
02:48 - is also the first entry for the xbox and
02:50 - this would then also be the first entry
02:52 - for the phases
02:53 - and if we didn't have that map.lib
02:56 - couldn't connect the data and would give
02:57 - us random results
02:59 - which we obviously want to avoid all
03:01 - right let's actually create some visuals
03:04 - and i want to create my figure and my
03:07 - axis
03:08 - in its own variables and there's one
03:11 - command to create both at the same time
03:13 - it is called plt dot sub lots
03:17 - and to show all of this we need plt.show
03:22 - and if we're on the code now we can see
03:25 - a figure and an axis inside of this
03:28 - figure obviously
03:29 - right now they are not showing anything
03:30 - that's going to come in just a second
03:33 - so what we now have to do is to use this
03:35 - axis and pass some data
03:37 - into it and let's do that actually
03:41 - so what i want to do is to create a bar
03:43 - chart
03:44 - which is done with the command x dot bar
03:47 - and at the minimum you need two
03:49 - arguments in here
03:51 - number one is the position of each bar
03:53 - on the bar chart and number two is the
03:55 - height of each bar
03:56 - and map.lib is quite flexible so in here
03:59 - for example we could pass in
04:01 - the phases so just a list with all the
04:03 - names
04:05 - and then let's say for example
04:07 - playstation
04:08 - and this would be working so let me run
04:10 - this
04:11 - and we can see some very basic graphs
04:14 - but this isn't exactly what i want
04:16 - because i want to have multiple bars on
04:18 - each of these entries
04:20 - so what i have to figure out is how to
04:22 - make each bar thinner
04:23 - and also how to put it in a specific
04:25 - position
04:26 - so for example that the playstation ones
04:28 - are always a bit further to the left
04:30 - and there are a couple of things we need
04:32 - for that so let's go through them step
04:33 - by step
04:34 - the first thing i want is that each of
04:36 - the bars has a specific width
04:38 - and for that i'm just going to create a
04:41 - new variable that i'm going to call with
04:43 - and i've chosen 0.2 but you could go
04:46 - with other numbers just
04:48 - see what you think looks good and with
04:51 - is also an argument that you can pass
04:53 - into bar
04:54 - so if i pass in with and here and run
04:56 - the entire thing again
04:58 - now we have much thinner bars so we are
05:00 - making some progress
05:02 - what we now have to figure out is how to
05:04 - move each of the bars
05:05 - a bit further to the left and for that
05:07 - we have to talk about the first argument
05:09 - inside
05:10 - of the bar and effectively what happens
05:12 - in there
05:13 - is that map.lib assigns each of the
05:15 - entries in index
05:16 - with the first one being zero the second
05:18 - one being one the third one being two
05:20 - and so on and then it puts the bar
05:22 - exactly on this position
05:24 - but we don't want the bar to be right on
05:26 - that position instead we want to offset
05:28 - it by a tiny bit
05:30 - so for example for the playstation we
05:32 - want to offset every bar by its own
05:34 - width to the left
05:35 - so the first index for the playstation
05:37 - is negative 0.2
05:39 - then the second one is 0.8 and the third
05:41 - one is 1.8
05:42 - and we can achieve all of that with list
05:45 - comprehension
05:46 - and i'm going to assume you know how
05:48 - list comprehensions work
05:50 - if you don't i will link a video in the
05:52 - description to explain it
05:54 - so i want an x position for the
05:56 - playstation so i create a new variable
05:58 - that i call x playstation
06:02 - and for the list comprehension i want
06:04 - the x position
06:06 - minus the width for every x
06:09 - in range of the length
06:12 - of the playstation list so effectively
06:16 - what we are doing
06:17 - is we're looking at all the entries of
06:18 - the playstation starting from 0 and
06:21 - going to 4
06:22 - and for each of them we subtract 0.2
06:25 - our width and now that we just have to
06:28 - pass
06:29 - in for the phases
06:32 - and now if i run the code we can see our
06:35 - entries being
06:36 - slightly offset and that is exactly what
06:39 - we needed
06:40 - so now we have the basics for our
06:42 - playstation graph
06:44 - now we can come to the next one and on
06:46 - the same axis
06:47 - create another bar chart
06:50 - and in here i want to go with the xbox
06:52 - data set
06:53 - and for that i have to create a new list
06:55 - comprehension
06:56 - so i'm going to copy the entire thing
06:59 - and
07:00 - rename it a tiny bit
07:03 - let them move on the same line
07:07 - and since the xbox bars are supposed to
07:09 - be in the middle of the other two graphs
07:11 - they are supposed to be right on the
07:13 - middle so we don't really do anything
07:15 - specific here
07:19 - and yeah that's all we needed so
07:23 - now i can type x for xbox
07:27 - then i can add in the xbox entries
07:30 - and then i also need to whiff and let's
07:33 - try out of this now
07:35 - and we have two entries right next to
07:37 - each other obviously the very first one
07:39 - is empty because the first playstation
07:41 - came out way before the first xbox
07:44 - so back in this time period the xbox
07:46 - just didn't exist
07:48 - but okay now we need one more and that
07:50 - is for nintendo
07:51 - so i'm going to create another x dot bar
07:56 - and this time i want x of nintendo i'm
07:58 - going to create this in just a second
08:00 - then i want nintendo and then i want the
08:03 - whiff all we have to do for nintendo is
08:06 - to do
08:06 - kind of the same thing for the
08:07 - playstation except instead of going
08:10 - negative we want to go positive
08:12 - so that all the bars for nintendo are
08:13 - slightly offset in a positive direction
08:16 - and then pass in here nintendo and then
08:20 - we are good to go
08:21 - so let me run all of this and there's a
08:24 - mistake
08:25 - x nintendo all right nintendo let's try
08:29 - this now
08:30 - and there we go we have all the basic
08:32 - bar charts that we need
08:34 - but there's one more element that we do
08:36 - need and that is the pc
08:37 - sales line chart and to create a line
08:40 - chart we need x dot
08:41 - plot which is short for line plot and
08:44 - this one again
08:45 - needs two arguments number one is the x
08:47 - position
08:48 - and number two is the height of each
08:50 - point and since we don't have to worry
08:52 - about offsetting anything for the x
08:54 - position we can just use the phases
08:56 - and then for the height we can just use
08:58 - pc sales
09:02 - and it should be a comma
09:05 - and let's run all of this now and there
09:08 - we go
09:08 - we have our very basic data setup
09:11 - obviously it doesn't look very good
09:13 - right now and there are some parts
09:14 - missing but all the basic data is in
09:17 - there
09:18 - so let's make it look prettier then and
09:20 - there are quite a few things i do want
09:21 - to add so let's go for them step by step
09:24 - the first thing i want is to add a title
09:26 - and to do that
09:28 - we have to first address the axis again
09:30 - and then use
09:31 - set title and in here we just have to
09:34 - pass in a string with the name of the
09:36 - title
09:36 - which in my case is the hardware
09:40 - market and if i run all of this now
09:44 - we can see a title so this one is
09:47 - working
09:47 - and next up i want to set the y labels
09:50 - so we can actually tell what the data is
09:51 - telling
09:52 - and this happens in quite a similar way
09:55 - we are still targeting the axis
09:57 - but this time we use set y
10:00 - label and in here again we need another
10:04 - string
10:05 - which in my case is total sales
10:08 - and in millions
10:12 - and if i run off this now we can see on
10:15 - the left side
10:16 - total sales in millions but to get full
10:18 - clarity
10:19 - we need a legend so you can actually
10:21 - tell which bar is which
10:23 - and to add that we need again x
10:26 - and this time we need a legend
10:31 - but by default this isn't going to work
10:33 - and let me run this code
10:35 - so we can see this tiny little icon in
10:37 - the top right
10:38 - that is empty right now and it's very
10:40 - small and this happens because map.lib
10:42 - doesn't have any data in terms of what
10:44 - each bar represents
10:46 - and to fix that when we create the bars
10:48 - and the line plots
10:49 - we have to give them a label to tell
10:51 - them what they are
10:52 - which is very easy to do so in the bar
10:55 - charts
10:56 - we have to create for each of them a
10:58 - label
11:00 - what they are so for the playstation
11:02 - this would be the string
11:04 - playstation and then i can copy the
11:07 - entire thing
11:11 - and this one would be xbox
11:15 - or microsoft whatever works
11:18 - the next one would be nintendo
11:23 - and the final one we have pc
11:26 - sales and now let's run the entire thing
11:30 - and there we go we have a properly
11:33 - functioning legend
11:35 - so things are becoming much clearer
11:37 - already
11:38 - but i don't like the colors of each of
11:40 - the bars of the line plot
11:42 - so let's work on that and again
11:45 - all we really have to do is to add
11:47 - another argument in any of these to
11:49 - change the styling of each of the bars
11:52 - or of the line plot and i'm going to
11:54 - keep this very simple all
11:56 - i'm going to change is the color of them
11:58 - and that you achieve with the color
12:00 - argument
12:01 - and in here you could pass in quite a
12:03 - few different arguments to get different
12:04 - kinds of colors
12:06 - but the easiest one is that map.lip has
12:08 - a set of predefined colors
12:10 - that i'm going to use because they're
12:12 - the easiest
12:14 - and for the playstation i'm going to go
12:15 - with a color called
12:17 - dark slate grey and now we run this
12:22 - we can see a much nicer color for the
12:24 - playstation entries
12:25 - and what's even nicer is that the legend
12:28 - automatically updates
12:29 - which is quite a nice extra and now
12:31 - again i just have to apply the same
12:33 - thing
12:34 - to all of the other bars with a slightly
12:36 - different name
12:38 - so for the xbox i have lime green
12:41 - and for nintendo i have crimson
12:44 - so let me run this again and now we have
12:47 - nicer looking colors
12:49 - so making some decent progress now for
12:52 - the line plot
12:53 - we have to do some more stuff we can
12:55 - still use color
12:57 - and i have chosen black for this one so
12:59 - if i run this now
13:01 - we get a black color but i want to have
13:04 - another thing for the line plot that
13:06 - each of the points is a bit
13:07 - more noticeable and for that we have to
13:10 - add what's called
13:11 - markers and you're going to see in a
13:12 - second what that means specifically
13:14 - so what i want to add is a marker
13:17 - and in here we have a couple of
13:19 - different options what i want
13:21 - is an o and let me show what this means
13:25 - so now for each of the points we have a
13:26 - circle around it
13:28 - which makes it much clearer to
13:29 - illustrate where each point is
13:31 - and if you passed a different argument
13:33 - for the marker you can make this look
13:35 - like an x or a triangle
13:36 - or really whatever you want and i think
13:39 - this finishes the styling so in the next
13:41 - part we'll work on adding numbers to
13:43 - each of the bars
13:44 - so what i want to achieve is on top of
13:46 - each of the bars
13:47 - there's a number saying exactly the
13:48 - number on how high this bar is
13:51 - and to achieve that we need to know a
13:52 - few things number one is the height of
13:54 - each bar and number two is the position
13:56 - of each bar
13:57 - and maple lip makes this quite easy
14:00 - because when we created the bars
14:02 - we can access each of the rectangles
14:04 - inside of the bars
14:05 - and this information we can store in a
14:06 - variable and then use in a for loop for
14:08 - example
14:10 - so let's have a look at that the first
14:11 - thing i want to do is to store the
14:13 - rectangles for each of these bars
14:15 - inside of a variable and this happens by
14:18 - just typing
14:19 - right 1 in this case in front of the bar
14:23 - and what happens is when map.lib creates
14:25 - a bar
14:26 - it returns a value that we can store in
14:28 - a variable and i want to do that
14:30 - for each of them so now i have three
14:33 - rectangles for each of the bars
14:36 - i don't have to do this for the plot
14:37 - because we don't need it for it
14:39 - and now i want to loop over each of them
14:42 - and do a couple of things
14:43 - and since i don't want to duplicate code
14:45 - i'm going to write a function
14:47 - right at the top of the code that i'm
14:49 - going to call
14:50 - auto label and
14:54 - into this function i want to pass in the
14:56 - rectangle
14:58 - group so rect 1 rect 2
15:01 - and rect 3 would each be a rectangle
15:03 - group so for example
15:05 - rect 1 will contain 4 different
15:07 - rectangles
15:09 - and i want to loop over every single one
15:11 - of them
15:13 - so what i have to do is for
15:16 - rekt in wrecked angle
15:19 - group and now i want to do a couple of
15:24 - things
15:25 - the first one is i have to get the
15:26 - height of each bar which i want to store
15:29 - on its own variable
15:30 - which i'm going to call height and to
15:32 - get the height of each bar we need rect
15:34 - dot get height
15:37 - and next up we have to create some text
15:40 - and this happens with x dot
15:42 - annotate so this one can create very
15:45 - simple text
15:46 - and the first argument we have to pass
15:47 - into it is the text we actually want to
15:49 - display
15:50 - which in my case is the string of the
15:53 - height
15:54 - and the second argument is called x y
15:56 - and this is the actual position of each
15:58 - of the text elements
16:00 - and in here we have to pass an x and a y
16:02 - coordinate
16:03 - which is going to be a tubal and we know
16:07 - the y
16:07 - coordinate that was just going to be the
16:08 - height
16:10 - but for the x part we have to think
16:13 - about this a tiny bit more
16:16 - and to get the x position we again have
16:18 - to target
16:19 - our specific rectangle and to get the x
16:22 - position we need
16:22 - get x and this by itself would be
16:26 - working
16:26 - so let me actually demonstrate this so
16:28 - bit further down
16:30 - i'm going to call this function and pass
16:33 - in rectangle
16:36 - one and let me run off this now
16:39 - so now we can see the number on top of
16:42 - each of the bars for playstation
16:44 - but you can also see the text isn't
16:46 - perfectly centered
16:47 - you can see this in particular on the
16:49 - ad7 that this one is skewed to the left
16:52 - which i want to avoid because i want to
16:53 - have the numbers right in the middle for
16:55 - each of the bars
16:56 - and the problem here is that this
16:59 - x position is the left side of the text
17:03 - so i have to add something to the x
17:04 - position and
17:06 - all i have to add is half of the width
17:08 - of each of the rectangles
17:10 - so rect.get with this time
17:14 - and divide this by two so now if i run
17:17 - the code
17:18 - all of this is going to be offset by
17:20 - quite a bit and the reason for that is
17:22 - that the horizontal alignment of the
17:23 - text is
17:24 - off but we can fix that very easily
17:27 - with the argument ha which stands for
17:29 - horizontal alignment and
17:32 - i want this to be centered so now we run
17:35 - the code
17:36 - we have text right in the middle of the
17:38 - entire thing
17:39 - so this one is ideal and let me actually
17:42 - call
17:43 - auto label on all of the rectangles
17:46 - so rectangle two and rectangle
17:49 - three and now we can see all of the
17:52 - different pieces of text
17:54 - so this is already getting quite close
17:56 - to what we need
17:57 - now the next problem is that i don't
17:59 - want the text to be right on top of the
18:00 - bar
18:01 - i want there to be a tiny offset
18:04 - and maple lip has a specific argument
18:06 - for that
18:07 - but before i go to that let me add
18:10 - some lines between that so that all of
18:13 - this is easier to
18:14 - read so to create an offset we need two
18:17 - more arguments
18:18 - the first one is called x y text
18:21 - and this one will give us the amount we
18:23 - want to offset the text
18:25 - and here again this has to be an x and a
18:27 - y tuple
18:28 - in my case the x is to be zero because i
18:30 - don't want any horizontal offset
18:33 - but for the vertical ones so for the y i
18:35 - want this to be
18:36 - three so now i have the coordinates by
18:38 - how much i want to offset the entire
18:40 - thing
18:41 - but if i were to run this it would not
18:43 - work
18:44 - so as you can see in here everything is
18:46 - broken but this we can fix betting just
18:48 - one more argument that is called
18:50 - text chords and this one
18:53 - has to be offset
18:57 - points and now let me run this
19:00 - now all of this looks much better and
19:03 - let me explain what happens here
19:04 - that when we just call xy text map.lib
19:08 - doesn't know exactly what to do with
19:09 - this information
19:10 - so it puts all of the text inside of
19:12 - this position
19:14 - but we don't want that instead what we
19:16 - want to do is to take the original
19:18 - position
19:19 - and just offset the text by this amount
19:21 - which we tell my.lib by adding this
19:23 - argument
19:24 - there's one more thing we need and then
19:26 - we're done and that is let me run the
19:28 - entire thing again
19:29 - i think the text right now is a bit too
19:31 - dominant so i want to change the color
19:33 - to make it a bit less obvious
19:35 - and this is again the color argument
19:38 - and all i want is to make the text gray
19:42 - and now if i run the entire function
19:43 - again now we have grey text
19:46 - and that is the entire thing so this is
19:48 - exactly the same graph you have seen
19:50 - earlier in this video
19:51 - so i hope you enjoyed this and i'll see
19:53 - you around