00:00 - hello in this tutorial I'm going to show
00:01 - you how to make a physics simulation in
00:03 - PI game and PI monk and specifically we
00:06 - are going to be making this we have a
00:08 - blank screen with two dots and if we
00:10 - click our mouse button we are spawning
00:11 - an apple that folds down and is
00:13 - physically accurate and we can go
00:15 - completely crazy with this and just drop
00:16 - a ton of apples and they all fall down
00:19 - physically accurate at least reasonably
00:21 - physically accurate and yeah that's
00:24 - pretty much it
00:24 - let's jump right in and before we get
00:27 - into code let's talk about the theory of
00:30 - what we are doing and the most important
00:32 - thing we have to talk about is the PI
00:34 - Monk library and the PI monk library is
00:36 - basically a 2d physics library so this
00:39 - one can help us to calculate physics in
00:41 - a 2d space and this library could stand
00:44 - entirely by itself so you could just run
00:46 - it not visualize anything but have all
00:48 - the accurate numbers to calculate some
00:50 - physics simulations but what we are
00:53 - going to do for this tutorial is we take
00:55 - what's being calculated by payment and
00:57 - then visualize all of this with PI game
00:59 - and you really have to be aware that
01:01 - those are two different libraries and
01:03 - they are fairly independent of each
01:05 - other so why we calculate the physics
01:07 - and pi monk we could visualize them in
01:09 - lots of other libraries this could be
01:11 - piglet this could be Medford lib this
01:13 - could be PI game arcade there are lots
01:15 - of different ways basically anything
01:17 - that can visualize theta could visualize
01:19 - the data from PI map but in our case we
01:21 - are using PI game because it's a fairly
01:22 - straightforward library and I do make
01:25 - the assumption that you already know
01:26 - some PI game it doesn't have to be much
01:29 - just the absolute basics if you don't
01:31 - know them check out this video it
01:33 - explains all the basics you need for
01:35 - this tutorial but we followed up one
01:37 - done let's talk about how to simulate
01:38 - stuff in PI monk and before we get into
01:41 - explaining anything we have to install
01:43 - PI game and PI monk so if you're in a
01:46 - Mac open the terminal if you're on
01:47 - Windows open the powershell and to
01:49 - install PI game Beauty pip install PI
01:51 - game to install pi manually pip install
01:54 - PI Mac in both cases you should be
01:56 - seeing a brief animation and then you
01:58 - have it installed this step should be
02:00 - fairly straightforward and once that is
02:03 - done you can use them like any other
02:04 - library in Python so you just need to
02:06 - type import and import your relevant
02:08 - module you want to have let's actually
02:09 - talk about how PI Mac works the first
02:12 - thing we need for pi
02:13 - is to create what is called a space and
02:15 - a space is just an area where physics is
02:18 - being calculated so we are basically
02:20 - creating a universe with our own
02:22 - physical laws and the one physical order
02:25 - is relevant for us in this case is
02:26 - gravity so we create a space with a
02:29 - gravity and also be aware you have to
02:31 - continuously update this simulation
02:33 - otherwise it's just standing still and
02:35 - inside of the space we can create
02:37 - physical objects the first thing we need
02:39 - is a body and the body is basically a
02:41 - physical body with one major difference
02:43 - that this body does not have a shape so
02:46 - it can accept physics but it cannot
02:49 - collide with anything so we are
02:51 - basically controlling an atom right now
02:52 - but to this body we can give a shape and
02:55 - this would allow to collide with other
02:57 - bodies and then when they all work
02:59 - together you have a physics simulation
03:00 - and that's pretty much the basics of PI
03:03 - Mac we're gonna do all of this in code
03:05 - in a little bit but again be aware right
03:08 - now you would not be able to see
03:10 - anything who actually visualize all of
03:12 - this you need another library which in
03:14 - my case is PI game okay if I love that
03:16 - one done let's actually get into some
03:18 - code so here we have the most basic
03:21 - setup for PI game it doesn't really do
03:23 - anything if I run this we are getting a
03:25 - screen account to anything it just shows
03:27 - a fairly great background and again
03:29 - check out the other tutorial to get the
03:31 - details on all of this so let's start
03:34 - simulating physics in this and the first
03:36 - thing we need is to actually import PI
03:37 - Mac so in our import line I import my
03:40 - Mac as well and if you want to make sure
03:44 - that you installed payment correctly
03:46 - just run the code now and if you do not
03:49 - get an error message you have installed
03:50 - all of the modules correctly so if PI
03:53 - game or PI monk have not been installed
03:54 - properly then you would get an error
03:56 - message and this is being installed
03:58 - along with python if this one is giving
04:00 - an error message something else has gone
04:02 - horribly wrong all right now we have all
04:06 - the things we need to get started so the
04:08 - first step we need is to create our
04:10 - space and this needs to be stored in a
04:12 - variable let us call mine space and to
04:14 - create this we need PI monk space and it
04:19 - does not eat any arguments so now we
04:21 - have created a physical universe that
04:23 - can calculate physics but we have to
04:25 - give it one thing in its gravity
04:27 - so space talk Rev the T and this one
04:33 - it's a gravity both for X&Y and I'm
04:36 - gonna go for zero and let's say for now
04:40 - 500 and what this basically means is
04:43 - that this is the horizontal gravity and
04:45 - this is the vertical gravity and the
04:47 - numbers are entirely fictional what we
04:49 - are looking in here is something that
04:50 - looks good we don't really care how
04:52 - physically accurate this is but all
04:55 - right now we have a physical space and
04:56 - we have gravity there's one more thing
04:58 - we need to do and that is to update this
05:01 - simulation and for that we need space
05:04 - dot step and now we need how fast we
05:07 - want to update this and in the paiement
05:10 - example it's 1 divided by 50 so 0.02
05:13 - which is a fairly small number so
05:16 - effectively we have two loops in our
05:18 - game we have our game loop for pi game
05:21 - when it updates the screen and every
05:23 - time we update our screen we are also
05:25 - updating our physics simulation but you
05:28 - still have to be aware we have
05:29 - effectively two different loops that
05:31 - could be updated independently now we
05:34 - have a basic simulation if we run the
05:36 - code now we still can't see anything
05:38 - because we haven't created any objects
05:40 - yet and for that I'm going to create a
05:44 - new function that I'm going to call
05:47 - create apple and these are the apples
05:51 - I'm going to drop later and for now this
05:53 - one needs one argument and that's the
05:55 - space so this space we've created
05:57 - earlier and inside of this function we
06:00 - have to create two different objects the
06:01 - first one is the body and this is the
06:04 - atom that actually is being influenced
06:06 - by physics and it's being created with
06:08 - PI monk node body it's spelled correctly
06:12 - and there are different bodies that you
06:15 - can simulate and PI monk the easiest one
06:18 - is a static body this one just doesn't
06:20 - move at all and it's just a static body
06:22 - so this one would not be moving however
06:25 - when moving bodies come in contact with
06:26 - it they would be reacting towards them
06:28 - so they still have impact on the physics
06:30 - calculation so when I showed you the
06:32 - example in the beginning the circles at
06:35 - the bottom those aesthetic bodies
06:36 - because I don't move but other physical
06:38 - bodies can still interact
06:40 - them the second kind of body is a
06:42 - dynamic body and this is a body that can
06:44 - be moved and these are the apples we
06:46 - have created earlier and the third one
06:49 - is a kinematic body and we are not going
06:51 - to create them in this tutorial but
06:53 - basically what they do is that they can
06:54 - be controlled by the player or by some
06:56 - external code basically think of it like
06:59 - this the kinematic body can move by
07:01 - itself and influence other objects the
07:03 - dynamic body can only be influenced by
07:05 - outside objects but it can still be
07:07 - moved is that a body just can't be moved
07:09 - at all and in our case our apples are
07:11 - going to be a dynamic body and for this
07:13 - one we'd three different arguments the
07:16 - first one is the mass of the object the
07:18 - second one is that I know sure and then
07:20 - the first one is the actual body type
07:21 - which in our case is dynamic mass should
07:24 - be the easiest one it's basically how
07:26 - heavy the object is inertia means how
07:28 - difficult it is to get it to start
07:30 - moving and you can calculate inertia in
07:33 - a more mathematical way in our case
07:35 - we're just gonna use some random numbers
07:36 - and see what it looks good so for our
07:39 - mass I just go with one and for inertia
07:41 - I am just going to go with 100 libous
07:46 - our first two arguments
07:47 - now when to specify the body type this
07:50 - will be done with the keyword argument
07:52 - body underscore type and then we need
07:56 - pie mark dot body thought dynamic all
08:04 - uppercase letters so now we have an atom
08:08 - that can be influenced by physics and
08:09 - the next thing I want to do is set a
08:11 - position of this atom so body top
08:14 - position and this again needs a tuple or
08:18 - now I'm going to set it at the middle of
08:20 - the screen so ax is going to be four
08:22 - hundred and zero so our screen is 800 by
08:26 - 800 pixels wide and I'm gonna sell at
08:28 - 400 so the middle of the horizontal
08:30 - space and zero so right at the top so
08:34 - now we have an atom in one specific
08:35 - position but it could not be interacting
08:38 - with anything because it's just an atom
08:39 - it cannot collide with anything to get
08:42 - it to collide with anything we need a
08:44 - shape and in our case our shape is going
08:49 - to be a circle so we are simplifying
08:51 - things quite a bit
08:53 - and generally think of it like this
08:54 - calculating physics is really hard and
08:57 - math intensive and when we later use our
09:00 - Apple it has a very irregular shape
09:02 - which would be a nightmare to calculate
09:04 - so what we do instead is we try to
09:06 - simplify the shape and in our case since
09:08 - the Apple is fairly round we just put a
09:11 - circle around the entire Apple and
09:12 - simulate collision with this circle
09:14 - which is going to make everything much
09:16 - simpler but you could literally just
09:18 - draw a couple of points around the Apple
09:20 - and make this much more accurate so we
09:22 - need high monk dot circle and the circle
09:27 - needs two arguments the first one is the
09:30 - body so this line here and then we need
09:33 - the radius of our circle which in my
09:36 - case I am going to go with if let's say
09:39 - 80 and this number we have to experiment
09:43 - a little bit with in a bit because we
09:45 - have to make it as close to the apple as
09:47 - possible so we basically run the
09:49 - simulation and see how good it fits and
09:50 - I will make it smaller or larger
09:52 - depending on what we need so now that we
09:54 - have a body and the shape we have to add
09:56 - both of these to our physics simulation
09:58 - and this is space dot add and body and
10:03 - shape and now if we were to run this
10:06 - function we would have one body in our
10:09 - simulation however again this would not
10:12 - be visible even though we have a body
10:14 - and a shape so the body we are creating
10:16 - could clip of something but we just
10:18 - wouldn't be able to see it so we're
10:20 - basically using the force right now and
10:22 - to make it visible we need to return
10:25 - something and what we need to return is
10:28 - the shape so what we used PI game for is
10:32 - to visualize this shape and wherever
10:34 - this shape happens to be we are going to
10:37 - draw a circle in PI game a by itself
10:39 - these are two different objects and all
10:42 - of this is going to happen in a
10:43 - different function that I'm going to
10:45 - call draw petals and it just needs one
10:48 - argument which I'm going to call apples
10:50 - and this is going to be a list because
10:53 - we want to create multiple apples and in
10:56 - this list we loop through each apple so
10:58 - for Apple and apples and inside of this
11:03 - for loop we just want to draw a circle
11:04 - and this happens with the normal pie
11:06 - drawing mechanics so pygame to draw dog
11:10 - circle and we'll just service the drawn
11:13 - which in my case is screen there Moneta
11:16 - color which for now I'm going to just
11:19 - make it black so 0 0 and 0 and next up
11:23 - in the center of this circle and
11:24 - effectively what we want is to take this
11:27 - shape and the center of this shape and
11:29 - have our circle in the same position and
11:32 - since each Apple represents the shape
11:34 - what we need is Apple body dot position
11:40 - so this line here who gave us the center
11:44 - of this shape because at the center of
11:46 - this shape we have the body and from the
11:48 - body we can access the position so
11:50 - basically what we created here in the
11:52 - beginning it's gonna be passed into our
11:54 - circle as well later on and then we need
11:57 - one more argument and that's the radius
11:58 - of the circle and now a case this has to
12:01 - be a t because when we create this
12:02 - circle up here this is also a tea light
12:05 - it's gonna stick with a tea and that's
12:08 - basically it all we need for now so in
12:10 - here we created a physical body and in
12:13 - here we are drawing it in piking so now
12:16 - we to run all of these functions and for
12:18 - now I'm just going to run this create
12:20 - Apple function once and what I want to
12:23 - do is create an empty list then I'm
12:26 - gonna call apples and for now it's just
12:28 - an empty list and then petals dot append
12:32 - and create Apple and it gets space so
12:38 - basically create an empty list and we
12:41 - create one apple and pass it into here
12:43 - for now it's just a circle but we can
12:45 - insert an apple in just a little bit so
12:48 - now we have a list with one circle
12:49 - inside of it and this needs to be drawn
12:52 - now so in our game loop I gonna draw
12:57 - apples and I pass in eat apples list and
13:01 - if I run this now we get an error
13:05 - because pie game was expecting an
13:07 - integer so let me explain when this one
13:11 - here is run it is as floats where as pie
13:14 - game expects integers so the X and the y
13:18 - position right here are floating point
13:19 - numbers
13:20 - and we have to just convert them to
13:22 - integers which we can do quite easily so
13:26 - let me create some new variables this is
13:29 - going to be position X it's going to be
13:31 - F of body position dot X and this is
13:37 - going to be a float so it would have
13:38 - this into an argument and turn us into
13:40 - int and we copy the entire line and turn
13:46 - all of this into Y and now for this one
13:53 - this is just going to be position X and
13:57 - position Y and if I run this now we can
14:03 - see a ball falling downwards it's not
14:06 - particularly impressive right now but
14:09 - let me reduce the gravity back quite a
14:11 - bit now it should fall very slowly and
14:15 - it falls down at a speed of a hundred
14:17 - but let me increase the acts to let's
14:20 - say 150 now we can see that is moving to
14:25 - the right and we basically have our
14:29 - circle here that reacts to the gravity
14:32 - we are creating in this space and let me
14:36 - return office to before and this shape
14:38 - could wreck two other shapes as well and
14:40 - let's actually create one so I would
14:45 - create another function that I'm going
14:46 - to call static all and static ball is
14:52 - going to be very similar to create apple
14:54 - with the one difference that we are not
14:56 - going to create a dynamic body this time
14:58 - we're going to create a static body so
15:01 - static board create space and this time
15:04 - we want to create a body and it's gonna
15:07 - be high monk dot body and since we are
15:12 - going to create a static body we don't
15:14 - need a mass or inertia because this body
15:17 - is not going to move so no matter what
15:19 - you pass into it it wouldn't matter so
15:21 - all we need is body underscore type is
15:26 - high monk dot body God static on
15:30 - uppercase letters so this would be a
15:32 - body that is fixed and
15:34 - pace it is never going to move no matter
15:36 - what you do to it and then this body
15:40 - will also want to set it position and in
15:43 - my case I'm going to set a position of
15:45 - 500 and 500 and the next step we have to
15:50 - create a shape again and the shape is
15:53 - going to be basically the same as this
15:54 - one here so it can just copy the entire
15:57 - line and in my case I want to keep this
16:01 - a little bit smaller so 50 and then
16:06 - again space door add body and shape and
16:12 - then we're all set you've returned to
16:14 - shape again so these two functions are
16:17 - incredibly similar and the matter what
16:19 - kind of object you create you always
16:21 - create a body and you create a shape and
16:23 - then you add it to the space that's
16:25 - basically all there is to it and now we
16:28 - could actually use this function here to
16:30 - visualize this board as well
16:32 - however I'm not going to do that because
16:34 - later on we want to change this function
16:36 - to create an apple at this position so
16:39 - we need a new function that is there
16:42 - going to be quite similar so def draw
16:45 - static bolts this one needs finger
16:50 - response bolts
16:51 - I know justice before football in balls
16:56 - we just copy basically all of this just
17:00 - to save some typing and in this case
17:03 - this is ball this is ball and the rest
17:09 - should be working out fine except our
17:12 - radius is 50 so again this function of
17:15 - this function they are fairly similar we
17:18 - basically create a shape and a body and
17:20 - then from the shape that is being
17:21 - returned we are drawing all of this with
17:24 - PI game so when I go down I am going to
17:30 - create a list I'm going to called bolts
17:33 - and Inter balls we append a static ball
17:40 - that needs the arguments space
17:42 - and just to illustrate this would
17:44 - already work let me run the game and now
17:47 - we can see a collision so we couldn't
17:49 - see the second body because it's not
17:50 - being drawn but in our physics
17:52 - simulation it does actually exist so the
17:55 - shape of our apple circle would collide
17:57 - with it but to actually draw it I call
18:02 - it draw a static ball and bolts so run
18:06 - this now we can see it and it reacts
18:09 - properly so cool that's a basic start
18:14 - for simulation and that is already the
18:17 - basics you need to create any kind of
18:18 - simulation all I need to do now is to
18:21 - make all of this look a little bit
18:22 - prettier and the first thing I need to
18:24 - do is to change this draw apples to
18:27 - actually draw apples and what that means
18:30 - is I don't want to draw a circle anymore
18:33 - instead I want to import an apple and
18:35 - draw this apple and the first way
18:37 - through is to import an image of the
18:39 - Apple so I'm going to create Apple
18:41 - surface and this is going to be my game
18:46 - tour image upload and the name of the
18:49 - Apple in my case is Apple underscore
18:51 - read dot PNG so now we import at the
18:55 - Apple and it's going to be on its own
18:56 - surface now inside of the droplets
19:00 - function we have to give this position
19:02 - to the Apple we have created on each
19:05 - frame and to do that we need a rectangle
19:07 - so I'm going to create Apple and that's
19:09 - correct and this is Apple surface get
19:15 - rekt so we take the surface and draw a
19:19 - rectangle around it and the center of
19:21 - that rectangle is going to be position X
19:25 - and position Y so this is effectively
19:29 - just drawing a rectangle around the
19:31 - center of this point with the dimensions
19:33 - of the other surface and now I just need
19:37 - to put this on the screen with screen
19:38 - doclet this is Apple surface and Apple
19:42 - rect and if I run this now we can see
19:46 - how Apple and it's bouncing off but you
19:48 - could already see that there was quite a
19:49 - bit of a gap but we can fix that later
19:52 - but before that I want to first be able
19:55 - to click the
19:56 - nantan spawn Apple wherever I have
19:57 - clicked and to do that we need to update
20:01 - in the original create Apple function
20:03 - this position here and instead of the
20:06 - fixed position I want this to be a
20:09 - generic position that I pass into the
20:12 - function and then in our game loop I
20:16 - want to go if event dot type equal spy
20:21 - game dodge mouse button down only then
20:28 - do I want to append our Apple and the
20:33 - position of this apples that's being
20:35 - created it's gonna be event dot pause so
20:39 - basically when I click my mouse button i
20:41 - create a new apple and i pass it into
20:44 - the apples list and we're create the
20:47 - apple is going to be the event position
20:49 - so where i click the mouse and then
20:51 - inside of this it just sets the position
20:53 - of the body to whatever position where
20:55 - we clicked so when i run this now so now
20:59 - we can click the button and the Apple
21:01 - falls down and we can get as many apples
21:03 - as we want but you can see there's quite
21:05 - a bit of a gap and that's because the
21:08 - circle we draw around the apple is too
21:10 - large so let's make it quite a bit
21:12 - larger let's say 50 and see if that
21:14 - works over renders now it is quite a bit
21:18 - too large but it does look better let's
21:21 - go for middle ground let's say 65 and
21:25 - yeah that looks much better
21:27 - so now we're for Apple that bolts on it
21:30 - and we can do this multiple times and
21:32 - they all work perfectly fine and you can
21:36 - experiment this quite a bit so for
21:38 - example we could set our gravity here to
21:42 - something like a thousand and is going
21:45 - to be a hundred
21:46 - every one is now our apples move to the
21:49 - right so this could Bob simulate wind
21:53 - and gravity but for now I just want my
21:55 - apples to fall down in a straight way
21:57 - and that's already pretty good start so
22:00 - what is really left to do is to update
22:03 - the bolts so we can place those and have
22:05 - multiple balls and to do that I need to
22:08 - update this position here
22:09 - that we don't always pay sit in the same
22:11 - position instead we place it in a
22:13 - specific position so again here I want
22:16 - position and then this one is gonna be
22:20 - positive and then when we create it that
22:25 - happened yeah so instead of just passing
22:30 - space we want to set a specific position
22:33 - and in my case this was 500 and 500 but
22:39 - now because we've set a position we can
22:40 - just copy this entire thing and create a
22:43 - second one and in my case I said this is
22:46 - 250 and 600 and if I run this now we get
22:51 - two points and they both react to
22:54 - physics perfectly well and the one
22:58 - difference compared to the example is
23:00 - that I set the color to a different
23:01 - value which in my case was 217 98 and
23:08 - 119 letter on this now we get the
23:11 - example from the beginning and this
23:14 - works perfectly well and yeah that is
23:17 - pretty much it hope that was helpful and
23:19 - I see you around