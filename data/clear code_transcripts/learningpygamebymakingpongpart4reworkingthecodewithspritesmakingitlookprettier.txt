00:00 - hello everybody in this tutorial we
00:02 - still keep the same pong game but we are
00:04 - going to be making some updates and by
00:06 - the end of this tutorial
00:07 - our pong game is going to be looking
00:09 - like this we have a couple more colors
00:11 - and otherwise it's still basically the
00:14 - same game and yeah that's pretty much it
00:18 - but the most important thing is that we
00:21 - don't just make updates instead we are
00:24 - going to rewrite our code quite
00:25 - fundamentally with the purpose of having
00:27 - just sprites to organize our code and
00:30 - this should make our code ready to add
00:32 - more stuff in the future so let's jump
00:34 - right in the main problem our game has
00:37 - right now is that we are essentially
00:38 - only using a functional approach which
00:41 - means that we're using functions to
00:42 - organize the logic of all of it which is
00:44 - fine for very basic game but we can
00:47 - already see some problems arising from
00:49 - our approach the most visible one is
00:51 - that we have a ton of global variables
00:53 - which does get problematic quite fast so
00:56 - in our code right now especially for the
00:58 - ball animation we have way too many
01:00 - global variables the score is a global
01:03 - variable the ball speed is a global
01:05 - variable the score time is a global
01:07 - variable there's way too much stuff in
01:09 - the global scope which is generally bad
01:12 - practice for code and the way we are
01:14 - going to update our code is that we are
01:16 - going to use sprite classes which
01:18 - organize our code much better and give
01:20 - us specific objects so effectively our
01:22 - player pedal our ball and our opponent
01:24 - pedal are going to be objects and each
01:27 - of them has attributes and methods that
01:29 - organize our entire game and if you
01:31 - organize it like that our game is much
01:33 - more modular and much easier to maintain
01:35 - and once we have that we can add much
01:38 - more stuff to it later on without much
01:40 - hassle so effectively we're going to
01:42 - take our game organize it in sprite
01:44 - classes and then add some slight visual
01:46 - improvements to it and just as a recap
01:49 - for sprites if you are completely new to
01:51 - sprites then this video is probably
01:53 - going to be confusing but I made an
01:55 - entire dedicated video just on sprites
01:57 - so if you are completely new to the
01:59 - concept check this one out first but in
02:01 - short a sprite and pie game is the class
02:04 - that can combine a surface and a
02:06 - rectangle so that we can work with it
02:08 - easier and then this part class can be
02:11 - moved into a group and then we can
02:12 - update each sprite and
02:13 - grouped quite easily so let's talk about
02:15 - how I'm going to reorganize the code to
02:17 - make it more manageable and I'm actually
02:19 - going to use five different classes in
02:21 - there so it is getting a little bit more
02:24 - complex the most basic class I have is a
02:26 - block class and this one is not going to
02:28 - be drawn on this screen whoever the
02:30 - three main classes on the screen the
02:33 - player pedaled the ball and your
02:34 - opponent pedal are going to inherit from
02:36 - that class so the block class is
02:38 - basically just there to save me some
02:40 - writing it just takes the surface and
02:42 - puts a rectangle around it and puts it
02:44 - on the screen nothing fancy here
02:46 - the first major class we have is our
02:48 - player class and this is our player
02:50 - pedal that we can control and this one
02:53 - only does two things it can be moved and
02:55 - has a constraint so that we cannot move
02:57 - it outside of the screen then we have
02:59 - our ball class and this one is the most
03:01 - complex one of them all and it has quite
03:03 - a few different methods it has one to
03:06 - move the ball itself just like we're
03:07 - before then we have a collisional effort
03:09 - that calculates all the different
03:11 - collisions with the top and the bottom
03:12 - of the screen and to play and the
03:13 - opponent then we have a reset ball
03:16 - method that resets the ball to the
03:17 - middle of the screen then we have a
03:19 - restart counter method that basically
03:21 - gives us a counter if a score has been
03:23 - achieved and finally we have the
03:25 - opponent ask and this one is also quite
03:27 - simple it only really has two methods
03:30 - the first one is the update method and
03:31 - the second one is to constrain method
03:33 - and it works kind of like the player
03:35 - class the update method moves the
03:37 - opponent and it just moves it to every
03:39 - ball happens to be and the constraint
03:41 - method just make sure that it doesn't
03:43 - move outside of the screen so also quite
03:45 - simple so this will be the first four
03:47 - classes but there's going to be one more
03:50 - class that I called game manager and our
03:52 - game management class actually organizes
03:54 - the entire game and this isn't strictly
03:57 - necessary but it is going to make it
03:59 - much easier to organize our code later
04:01 - on and what this class does is that it
04:03 - runs the game loop it resets the ball to
04:05 - the middle of the screen and a draws the
04:07 - score at the end and with these five
04:10 - classes we can recreate our entire pong
04:12 - game logic and I'm not going to go
04:14 - through the entire code line by line
04:15 - instead I have already written the
04:17 - entire thing and I'm just going to go
04:20 - for each object and explain how it works
04:22 - so that this tutorial isn't going to be
04:24 - an hour long but with that let's
04:27 - jump into our code right at the top we
04:30 - have the five different classes that
04:31 - organize our code and for now I have
04:33 - hidden all of them but I'm gonna talk
04:35 - about them in just a second
04:36 - for now let's talk about the easy stuff
04:38 - the one that we already have the first
04:40 - ones the general setup where we have our
04:42 - mixer per unit we have our PI a minute
04:44 - and our clock this one stays just the
04:47 - same no change here then we have our
04:49 - main window this one also stayed exactly
04:51 - the same so we have screen whoof and
04:53 - screen height we create our display
04:55 - surface and then we give it a title that
04:57 - one's pretty simple then we have our
05:00 - global variables we have a background
05:02 - color and now we have an accent color
05:05 - and the accent color is a dark bluish
05:08 - color and it's for the text so the score
05:10 - and the line in the middle it's nothing
05:13 - fancy then we have our font then we have
05:16 - the two sound files and then we have a
05:19 - middle strip and the middle strip is
05:21 - just a rectangle that is the line in the
05:23 - middle of our screen it is four pixels
05:25 - wide and goes from the middle two pixels
05:28 - to the left and two pixels to the right
05:30 - so it's really just a thick line and all
05:33 - of this is actually incredibly simple so
05:36 - if we could follow the last tutorials
05:37 - then this one should seem quite familiar
05:39 - and if I go a bit further down we still
05:43 - have our event loop and in here this one
05:46 - also looks fairly similar we're going to
05:48 - explain what these lines mean and a bit
05:50 - more detail later on but they should
05:52 - already look quite familiar it didn't
05:53 - change all that much but in the actual
05:56 - game loop we still have a background
05:58 - color then we draw the rectangle that's
06:01 - the middle strip and then in our game
06:04 - manager we have one game so all the game
06:06 - logic runs in here and then we do the
06:09 - usual we just render the entire thing so
06:11 - all of this is pretty simple now let's
06:14 - go for each class and talk through it
06:16 - one by one so I go all the way to the
06:18 - top and let's start off the block class
06:20 - this one is the easiest so let me open
06:22 - it and all it does is it takes a path to
06:25 - a file and x position into y position
06:27 - and then in our screen it puts this
06:30 - image on a new surface it draws a
06:32 - rectangle around that surface and it
06:35 - places the new rectangle somewhere on
06:36 - the screen whether we specified it
06:38 - so this entire class is basically the
06:41 - easiest kind of sprite you can possibly
06:43 - create and it doesn't really do much
06:45 - more and the only reason we have it is
06:47 - that for the player the ball and the
06:49 - opponent they all inherit from this
06:51 - block class and this is the only reason
06:53 - why it's here it basically just saves in
06:56 - some writing but all right we can close
06:58 - this one and never worry about it again
07:00 - so quite easy and with that we come to
07:03 - the player class and this is the first
07:05 - one where actual stuff happens so when
07:08 - we start it inherits the stuff from the
07:11 - block class and then it has two
07:12 - attributes beyond the block class it has
07:15 - a speed that we define and a movement
07:17 - and then in the update method we take
07:19 - the rectangle and add self-taught
07:21 - movement and the logic here is quite
07:24 - similar to the stuff where before
07:26 - basically our rectangle is always being
07:29 - moved on every single frame of the game
07:30 - however if we don't press any button the
07:33 - movement that's being added to the
07:35 - rectangle is going to be zero so for all
07:37 - practical purposes if you move something
07:39 - by zero it just doesn't move however
07:41 - when we press a button this movement
07:43 - value is going to become the value of
07:45 - this speed attribute and all of this
07:48 - happens further down in the code in our
07:50 - event loop all the way down here all of
07:53 - this so the player movement is going to
07:56 - be minus equals or plus equal to player
07:58 - speed so for example if we press the UP
08:01 - button then the player movement
08:03 - attribute is going to get minus equal
08:05 - player speed which in our case when we
08:08 - create a class it's going to be five so
08:10 - it's going to be minus five so it's
08:12 - going to move upwards and then when we
08:14 - lift the key up then we add the same
08:16 - number to it
08:17 - so effectively player movement becomes
08:18 - zero again and the pedal stops moving so
08:22 - this is all that this line here does and
08:24 - then we come to the constrain method and
08:27 - all this one does is prevent our player
08:29 - from moving outside of the screen and
08:31 - this one works exactly in the same way
08:34 - what we have created earlier if the top
08:36 - of the player goes outside of the screen
08:38 - so it's smaller than zero then we place
08:40 - the top of the player at position zero
08:42 - if the bottom of the player gets higher
08:44 - in the screen height then we place the
08:46 - bottom of the player at the screen
08:47 - height and the important thing here
08:49 - really is that the logic for this was
08:51 - already a
08:52 - established we just put in the context
08:54 - of a class so if you compare this to the
08:57 - function we created earlier it is really
08:59 - similar the major difference is the self
09:02 - in the beginning but all right
09:04 - with all of that one done we have our
09:06 - player class and it's actually really
09:08 - simple so when we go down into the
09:11 - creation of all the important variables
09:13 - you would create a player from the
09:15 - player class it gets a picture this one
09:18 - here we place it at the x position and
09:20 - the y position and we give it a speed
09:22 - then on this line we create a pedal
09:25 - group and then we have to play it to
09:27 - what's that
09:28 - and with that one let's close the player
09:31 - again and let's go to the ball class and
09:34 - this is the really large one and again
09:36 - when we created we inherent a couple of
09:39 - attributes from the block class and
09:40 - we're going to add three more attributes
09:43 - we have speed X speed Y and the paddles
09:46 - and the pedals are going to be the
09:48 - perils for the player and for the
09:50 - opponent so this one is a group of
09:52 - pedals but this one comes in just a
09:54 - second
09:55 - for now speed X and speed why we put
09:58 - them in here and we randomized whatever
10:00 - value has been put inside of it which
10:02 - basically means when the ball is
10:03 - starting it goes into a random direction
10:05 - and then we have a group of the pedals
10:08 - and this is gonna be when we go down a
10:11 - little bit we have yep for the pedal
10:14 - group we had a player and the opponent
10:16 - to your point explained in just a second
10:17 - but when we create the ball we put this
10:20 - paddle group in there so that the ball
10:22 - knows where the two pedals are so it can
10:25 - collide with them and bounce of them
10:27 - that's the only reason we have it in
10:28 - there so let me go all the way up again
10:31 - this is this line here and then we have
10:33 - two my attributes that don't need to be
10:35 - specifically declared self to active and
10:37 - score time self thought active basically
10:41 - determines if the ball is moving or not
10:42 - and score time is to check the time when
10:45 - the score was being achieved and this is
10:47 - the logic we have seen earlier that if
10:49 - it scores being achieved we want to
10:51 - start a count on to wait a couple of
10:52 - seconds until the boss that's moving and
10:54 - after the score was achieved
10:56 - and all of this basically happens in
10:59 - this part here the update method and
11:01 - basically what happens in here is that
11:03 - if self to active is true then we are
11:06 - moving the ball and checking for
11:07 - collisions and if it's not true we start
11:10 - to reach that counter and this is really
11:13 - similar to a logic we had before and the
11:16 - collision logic happens down here and
11:18 - this one should also look quite similar
11:21 - it is what we have done the last video
11:23 - in this line here we check a top or
11:26 - bottom collision so this one is super
11:27 - simple and all of this part here is to
11:30 - check the collisions for the different
11:32 - paddles so both the player and the
11:34 - opponent pedal happens in here and this
11:37 - logic should look really really similar
11:39 - in the last tutorial we created this
11:41 - entire thing for each of the pedals but
11:44 - that isn't actually necessary so it's
11:46 - quite simple to combine and with that
11:48 - one done we have a reset ball method and
11:50 - this one just puts the ball in the
11:52 - middle of the screen and starts the
11:54 - count on timer so the score time is
11:56 - being set here and again we have seen a
11:58 - really similar functionality before and
12:01 - then finally we have our restart counter
12:04 - and all this one does is that it draws
12:06 - the number on the screen how far down to
12:08 - count on primaries and this one is
12:10 - identical to what we have done earlier
12:12 - except in the context of a class and all
12:15 - right that is the ball class it is quite
12:18 - a long one okay and then we come to the
12:21 - opponent class and this one gets a bit
12:24 - easier again so in here we still inherit
12:27 - the same stuff from before and we give
12:29 - it a speed value and then in the update
12:31 - method we move this paddle whatever the
12:33 - ball happens to be and this one is
12:35 - really similar to logic we had before
12:37 - and then just like for the player we
12:40 - have a constraint method and this one
12:41 - constraints the opponent to the screen
12:43 - and when we create this opponent which
12:45 - happens all the way down here we put it
12:50 - in the same group as the player so the
12:52 - pedal group has the player and the
12:54 - opponent and then this group is being
12:56 - passed into the ball so this would cover
12:59 - our first four classes and they are
13:02 - quite extensive already but now we come
13:05 - to the game manager and this is what the
13:07 - actual logic of the game happens so we
13:09 - put all of these four
13:10 - together and make a game out of it and I
13:14 - can't get it all on one screen but
13:17 - that's okay so when we created it
13:20 - doesn't inherit anything and we have a
13:22 - couple of attributes we have the ball
13:25 - group and a pair group so where the ball
13:27 - is and well pedal group is and then by
13:30 - default the score is zero and we make
13:33 - the groups part of the class itself then
13:35 - we have our run game method and this is
13:38 - what the actual game loop happens and
13:40 - here we have the pedal group and the
13:42 - ball group so this is where we just draw
13:44 - everything on the screen and then in the
13:49 - paddle group we update it and we pass in
13:51 - the ball group and this is quite
13:53 - important so let me go up and let me
13:55 - open the opponent group first that wants
13:59 - the easier one Swamy called update on
14:02 - the opponent group we pass in the ball
14:04 - group and then this method uses the ball
14:07 - group to move the opponent so this one
14:09 - needs this argument however for the
14:12 - player group when we look at the update
14:14 - method this one also needs the ball
14:17 - group as an argument but it doesn't
14:19 - actually use it but you still have to
14:21 - put it in there because when we call all
14:23 - the way it was here when we call the
14:29 - update method then this paddle group is
14:31 - going to call the update method on every
14:33 - single sprite inside of it so it's going
14:35 - to call the update on the opponent and
14:36 - on the player and it's going to pass
14:38 - this one into it and if we don't specify
14:41 - a parameter in the player group for this
14:44 - then it would cause an error so if you
14:46 - want to pass in an argument into any
14:48 - sprite in a group you effectively have
14:51 - to pass it into all members of the group
14:52 - which can be a bit cumbersome but it's
14:55 - generally workable and especially in our
14:57 - case it's quite straightforward thing to
14:59 - do so that kills all of this again and
15:02 - we're back here we just update our pal
15:05 - group and then we also update our group
15:07 - and after that we're free set ball and
15:10 - draw score reset ball is quite an
15:13 - interesting class so let me explain and
15:15 - the important thing you want to be aware
15:17 - of here is that our ball class also have
15:20 - reset both us so we have to reset ball
15:23 - methods in
15:24 - our game and they are named Sonali by
15:27 - design and effectively the reset ball
15:30 - method of the game manager calls the
15:32 - reset ball method of the ball itself so
15:36 - it effectively this entire method resets
15:38 - the ball and that's the score - whoever
15:41 - achieved the score and then finally we
15:44 - just draw the score and this happens on
15:46 - every single frame and all of that is
15:49 - basically the logic of our game and if
15:52 - you compare this to the previous game we
15:54 - made and you are going to see quite a
15:57 - lot of similarities and I hope that made
15:59 - sense and let me know if you're going to
16:01 - go through this in more detail however
16:03 - there's one thing I do want to cover and
16:05 - this is when we create the ball we call
16:09 - group single and this might throw you
16:11 - off if you just follow these tutorials
16:13 - that in Pugin we have two different
16:15 - kinds of groups we have pi game dots
16:17 - brighter group and we have pi gamma dots
16:20 - brighter group single and both of these
16:22 - groups are really similar the only real
16:25 - difference is given from the name that a
16:27 - group can take any number of sprites so
16:30 - we could have a hundred different
16:31 - sprites in here and update them all at
16:33 - the same time group single on the other
16:36 - hand only accepts a single sprite and if
16:39 - you added another sprite to this group
16:41 - it would kick out the ball sprite so a
16:43 - group single only ever has a single
16:45 - sprite in there kind of like the name
16:47 - implies but besides that it does the
16:50 - exact same thing you can still call
16:52 - update on it and it would update the
16:54 - sprite inside of it but okay that is
16:57 - basically all of it I hope that made
17:00 - sense and let me know if you want to go
17:02 - for all of this in more detail but that
17:05 - would be quite a long tutorial but yeah
17:08 - I see