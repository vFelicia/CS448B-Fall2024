00:00 - - We're back with our "Oh noes" countdown.
00:03 - What if we wanted to make
Oh Noes Guy get bigger
00:07 - as the countdown gets closer to zero,
00:09 - to make it seem more like impending doom?
00:12 - One way I can do that is to animate the
00:15 - CSS styles of this image
with window.setInterval.
00:20 - For the first step I'll find the image
00:22 - and store it in a variable.
00:25 - ohnes = document.getElemenyById("ohnoes");
00:32 - And I'll set the starting style
00:34 - so it starts off at some width.
00:36 - That way we have something
to get bigger from.
00:39 - And now I'll write a makeItBigger function
00:44 - and that will be responsible
for making it bigger each time.
00:48 - And in here we need to
change the style.width
00:53 - and take the previous
style.width and add one to it.
01:00 - Finally I'll call setInterval
with this function.
01:04 - window.setInterval(makeItBigger),
01:07 - and how much bigger do we want--
01:09 - Or how often do we want to make it bigger.
01:11 - Well we want a smooth animation,
01:13 - which usually means somewhere between
01:15 - 24 frames per second and
60 frames per second.
01:18 - I'll try 30 frames per second,
which is 1,000 over 30.
01:25 - Mm. Okay, so it's not working.
01:29 - Do you see why? It's a little tricky.
01:31 - Let's go here and think about this.
01:34 - What is the value of ohnoes.style.width
01:39 - after this line here?
01:41 - Well, you might think 50px goes to 51px,
01:45 - but let's just log out and see
what ohnoes.style.width is.
01:50 - We have an infoDiv that
we can put this in.
01:52 - So it equals, let's see...
01:58 - 50px, okay.
02:00 - And then we try to add one to 50px.
02:05 - What id 50px plus one?
02:07 - You might say 51px, but JavaScript
02:11 - thinks of 50px as a string,
02:16 - so it actually becomes 50px1,
02:20 - which doesn't really make sense.
02:22 - So the browser is probably
just ignoring our attempt
02:25 - to set the width property
to this nonsensical value.
02:29 - What we need to do is convert
this number with a unit
02:33 - to just a number,
02:35 - then add one to the number
02:37 - and then add "px" back to it.
02:40 - We can do that by first
wrapping this in parseFloat,
02:45 - that turns it into a number.
02:47 - Then we can just wrap all this,
02:50 - then we'll plus "px" at the end of it.
02:53 - Woo! It's working. He's getting bigger!
02:57 - Now you can see the tricky thing
02:59 - about animating CSS properties.
03:01 - They often have these units
attached so you have to
03:03 - parse out that unit-- Oh my
God, he's getting bigger.
03:06 - You have to parse out that unit
and stick the unit back on.
03:12 - He's getting really scary,
03:14 - and actually there are a few scary things
03:17 - about using setInterval
to animate CSS properties.
03:21 - First, the browser does not guarantee
03:24 - that it will exactly obey this delay here.
03:28 - If other things pop up,
like user interaction,
03:31 - like the user typing, then it
might call your callback later
03:35 - so you won't get this smooth animation.
03:39 - Second, the browser
will call your function
03:41 - even if this tab is hidden,
03:43 - which uses up computer
processing power unnecessarily.
03:48 - That's why there's a new function,
03:50 - available in modern browsers,
03:52 - designed specifically with
DOM animations in mind,
03:55 - and it's called
window.requestAnimationFrame.
03:59 - To use it we'll get rid
of the setInterval line
04:02 - and call requestAnimationFrame
04:09 - from inside the function
04:11 - and we'll actually give a reference
04:15 - to the makeItBigger function.
04:19 - Then we'll just call
makeItBigger on page load.
04:27 - Ooh! All right, he's getting
big and really fast this time.
04:30 - The browser is now calling
makeItBigger right before
04:34 - it repaints, which is
about 60 frames per second,
04:37 - which is double what we had before.
04:39 - And we're adding one pixel
to the width each time.
04:43 - So you do the math, and
we're great at math here,
04:45 - then we're adding 60 pixels per second.
04:48 - In just a few seconds it
grows bigger than the page.
04:50 - Now it's gone.
04:52 - How do we slow down our animation?
04:56 - There are a few ways, but one way I like
04:58 - is to keep track of how
much time has gone by
05:01 - and then calculate what
the new width should be
05:03 - based on that.
05:05 - We start by remembering the
start time, in milliseconds,
05:09 - before the function is called.
05:11 - var startTime-- Woo, getting bigger again.
05:14 - new Date().getTime();
05:17 - And then inside makeItBigger
we store the current time.
05:20 - var currTime = new Date().getTime();
05:27 - And for our calculation,
05:28 - let's say we want it to
grow 30 pixels per second
05:31 - and start it off as 50 pixels.
05:34 - So let's just calculate this here.
05:37 - So newWidth equals 50--
our starting width--
05:44 - plus current time minus startTime.
05:49 - That's in milliseconds so we're gonna
05:50 - divide that by a thousand,
05:53 - and then times that by 30,
05:57 - because we want to go
30 pixels each second.
06:00 - Okay, so that's our newWidth
06:02 - and now let's set the
style.width to that newWidth.
06:10 - newWidth-- Ahh, there we go.
06:13 - That's that nice, smooth
30 pixels per second.
06:19 - And we can change this
number if we want it to grow
06:23 - slower or faster. (chuckles)
06:31 - What about stopping the
animation when it gets too big?
06:34 - We can just wrap this line in an if,
06:38 - this line here, and only do it
06:41 - if the currentWidth is
less than some number,
06:45 - like 300, let's try that.
06:54 - Actually currentWidth is-- No, newWidth.
06:58 - Okay, let's see if it gets 300.
07:01 - (imitates fanfare) Go
Oh Noes, you can do it.
07:06 - (gasps) Beautiful.
07:09 - This technique of using
requestAnimationFrame
07:12 - should work as long as
a user is in Chrome,
07:15 - Firefox, or IE10+.
07:18 - There are various JavaScript
libraries and shims
07:21 - that will use requestAnimationFrame
when it's available
07:25 - and then fall back to setInterval
in the older browsers.
07:30 - That's the thing about web development:
07:32 - The web is changing all the time,
07:34 - browsers are adding new features,
07:36 - developers are discovering new
ways of using those features.
07:40 - You have to be constantly
learning about what's new
07:43 - and what's best for what you want to do.