00:00 - - [Instructor] I'm back with this database
00:02 - that's tracking students'
grades and student projects,
00:07 - and I added a few more
students and student projects,
00:11 - and now that the students are working
00:13 - on these super amazing projects,
00:15 - I want them to review each
other's work in pairs.
00:19 - So I want "Carpet Physics"
to review "Hyena Habitats."
00:24 - To track that, I created
the project_pairs table,
00:28 - and all it stores is two project_ids
00:31 - that are paired with each other.
00:34 - So what do I see if I
just select everything
00:37 - from project_pairs?
00:39 - (musing) Hmm, okay, so I see rows of IDs
00:43 - mapping to each other.
00:45 - And it's not the most
human-friendly output.
00:49 - What I want instead is
rows of project names
00:53 - mapping to each other.
00:55 - Now those project names are
in the student_projects table,
00:59 - so that gives me a clue
that I need to join
01:02 - student_projects with
project_pairs somehow.
01:06 - Well, we can always
start with a cross join
01:09 - and see what we see.
01:11 - So we'll just add on student_projects.
01:14 - Okay, so we see the Cartesian product,
01:17 - which shows project IDs
and a single project name
01:20 - in each row, but imagine
what we eventually want,
01:24 - what we eventually want is
going to have two project names
01:29 - in each row, not just one,
so that gives me another clue
01:33 - that I actually, I need to
join the students project table
01:37 - to itself, so that I can get
its columns joined up twice,
01:41 - and we call that a self join.
01:45 - In order to do a self join,
01:47 - I'll keep this student_projects here,
01:50 - and give it an alias, a nickname.
01:54 - So I'll just call it a,
01:55 - and then I'll add another
student_projects b.
02:01 - Okay, so now we can see our rows
02:03 - contain two project IDs
and two project names.
02:07 - And now the problem is just that there are
02:08 - far too many rows,
02:09 - because this is every row
mapped with each other,
02:13 - so we need to narrow it
down to just the rows
02:15 - where the project IDs
match across the tables.
02:19 - So we can add a where,
02:22 - so where project_pairs.project1_id
02:28 - equals a.id, and project_pairs.project2_id
02:35 - equals b.id, aha!
02:39 - There we go, we can see the
names match with each other.
02:43 - And if we want, we can
just get rid of the things
02:47 - we don't care about, so
what we only care about
02:49 - is the title of b and the title of a.
02:55 - There we go, very readable,
very human-friendly.
03:00 - So that is a self join, or
one way of using a self join.
03:04 - There are various times
when you may want to use
03:06 - a self join, and it
might seem a bit tricky.
03:10 - You can always do what I do,
03:11 - which is start with a cross join,
03:13 - and keep modifying it
until you narrow it down
03:15 - to what it is you're actually looking for,
03:17 - and of course, just double-check
your results with yourself,
03:20 - and think to yourself,
"Does this make sense,
03:23 - "is this what I was expecting?"
03:25 - All right, so go join
yourselves! (chuckles)