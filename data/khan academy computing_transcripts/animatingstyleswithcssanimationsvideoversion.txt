00:00 - - [Voiceover] Okay, so
you might be debating
00:03 - right now whether to use set interval
00:05 - or request animation frame
00:07 - for what you want to animate,
00:08 - but I'm going to go ahead and throw
00:10 - one more option in the mix.
00:13 - You see, in Chrome,
Firefox, and IE 10 plus,
00:17 - there's actually a way in CSS
00:20 - to make animations without writing
00:22 - any JavaScript at all.
00:24 - Let's comment out the code we just wrote
00:27 - and try it for the oh noes animation.
00:30 - I'll just put a big multi line comment
00:34 - around all of that.
00:36 - So we start by adding a
style tag to the page,
00:40 - and then adding something that looks
00:43 - like a CSS rule, but is actually
00:45 - our animation definition.
00:48 - So we write keyframes and then a name
00:52 - for animation, getbigger,
00:54 - and then curly brackets.
00:57 - To do a simple animation that goes
00:58 - from one state to another state,
01:01 - we'll define from and to states.
01:07 - Inside from, we'll write what the starting
01:10 - CSS property should be.
01:12 - Remember how we set it
to 50px at the beginning.
01:16 - Inside to, we'll write what
01:18 - the end properties should be.
01:21 - Here maybe it was 300px
is what we ended at.
01:24 - Remember?
01:26 - Now that we've defined an animation,
01:28 - we need to tell the browser what element
01:30 - should actually use this animation.
01:33 - So actually we'll add a normal CSS rule
01:36 - for ohnoes.
01:39 - Inside here, we specify
the animation name,
01:44 - and that's getbigger,
01:47 - and then the animation duration,
01:50 - three seconds.
01:53 - Depending on what browser you're in,
01:54 - some of you right now might be thinking,
01:56 - whoa, sweet, it's working!
01:58 - In other browsers though,
02:00 - like Safari or Chrome,
02:01 - it's probably not working.
02:03 - That's because of something
called vendor prefixes.
02:09 - Sometimes a browser decides
02:13 - to support a fancy new feature,
02:15 - but they put a vendor
prefix on that feature
02:19 - to indicate that it might change later.
02:22 - This is just their browser's attempt
02:24 - at the feature.
02:25 - To make this work in Chrome,
02:27 - if it's not already, we have to replicate
02:30 - everything we just did
02:31 - and stick webkit in front.
02:34 - So we need to replicate this part
02:38 - and put -webkit- here.
02:42 - Then here we'll replicate this
02:45 - and put -webkit-, -webkit-.
02:50 - Whoa, sweet!
02:51 - Now it's getting bigger for every browser.
02:55 - Hopefully by the time you
watch this talk through
02:58 - those vendor prefixes won't be necessary,
03:00 - but it's good to know that they exist
03:02 - because you might need to use them
03:03 - for some other feature one day.
03:08 - There's also one more way in CSS
03:10 - to make animations,
03:11 - and that's with the transition property.
03:14 - It tells the browser how
to transition smoothly
03:17 - from one property to the next.
03:20 - Let's say that we want the font size
03:23 - of the time left to get bigger
03:26 - when you mouse over it.
03:28 - We could do all that in JavaScript
03:30 - by assigning an event list in there
03:31 - for the mouse over event,
03:32 - then using the request animation frame
03:34 - to increase the font
size property each time,
03:37 - but we can also do that entirely in CSS.
03:41 - Let's think.
03:42 - How would we normally change the font size
03:44 - to be bigger when hovering in CSS?
03:48 - We can do that with a hover rule.
03:50 - We say #countdown:hover,
03:54 - and then font-size: 150px.
03:59 - Okay, and now we just
need to tell the browser
04:02 - to transition the font size property,
04:06 - how much time to transition it over,
04:08 - and what timing function to use.
04:11 - So we say transition:
font-size one second linear.
04:19 - Now you should pause the talk through
04:21 - and try hovering over the
text to see what happens.
04:25 - If you're in Chrome,
Firefox, or IE 10 plus,
04:28 - then it should get bigger smoothly.
04:31 - You don't need any vendor prefixes
04:33 - for this technique.
04:35 - There's a whole lot that you can do
04:37 - with CSS animations and transitions,
04:39 - and browsers are pretty good
04:40 - at rendering them quickly.
04:42 - So I encourage you to explore both
04:43 - of them a lot more.