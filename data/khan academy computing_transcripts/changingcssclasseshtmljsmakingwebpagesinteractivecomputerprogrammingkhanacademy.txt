00:00 - In the last talk-through, I showed how
to set styles in JavaScript, like this.
00:05 - Now, if you set a lot of styles
in JavaScript, you could end up
00:10 - with hundreds of lines of code
just setting CSS property values.
00:14 - And that can really
clutter up your JavaScript.
00:18 - There's another way we could do this.
00:20 - We could create a CSS class,
00:23 - and add a CSS rule for that class
with the new styles that we want,
00:28 - and then dynamically
add that class name in JavaScript.
00:33 - Let's start up here at the `` tag 
and try this out.
00:38 - We'll make a `.catcolors` class,
and the CSS rule for it.
00:45 - And it will have `color: orange`,
and `background-color: black`.
00:53 - Now to assign that to the
`heading` element, we can say:
00:58 - `headingEl.className = "catcolors";
01:05 - And we can delete
the assignment of the color
01:09 - and background color in JavaScript.
01:12 - Ta-da!
01:13 - So that worked.
01:15 - Now, notice something weird?
01:17 - The HTML attribute
for class names is just `class`.
01:21 - If I had done this in HTML,
it would have been `class="catcolors"`.
01:26 - But when I did it in JavaScript,
I had to say `.className`,
01:31 - which is not what we're used to.
01:33 - And that is because `class` is actually
a keyword in the JavaScript language
01:39 - which has a special meaning
for the language.
01:42 - So because of that, browsers decided
to use `className` to refer
01:47 - to the HTML class attribute, just to
make sure they wouldn't get confused.
01:52 - So remember, if you want to set
the class attribute of an element,
01:56 - you say dot className equals.
02:00 - Now to assign that to each
of the animal names,
02:04 - we can put it inside the loop, so:
02:06 - `nameEls[i].className = "catColors";`
02:13 - That will add the class name,
but actually it will remove any classes
02:19 - that were there before,
because we said equals.
02:23 - So if we had any classes there before,
those are now gone.
02:28 - Now, they did have classes before,
class equals animal.
02:32 - And so that's become catColors.
02:34 - So what we really want to do, is add
a new class name to this class attribute.
02:41 - And we can do that by saying
plus equals space catColors.
02:47 - There we go.
02:48 - So that's the safe thing to do,
because it will take
02:52 - whatever the previous class was,
add a space and then the new class to it.
02:58 - There is another way to do this
in newer browsers,
03:02 - using the `classList` property.
03:04 - So to do that, we say:
`nameEls[i].classList.add("catcolors");`.
03:15 - Now that's a lot nicer, 
but doesn't work everywhere.
03:19 - So if you do want to use that,
you have to go to caniuse.com,
03:24 - and make sure it's supported
in all the browsers
03:26 - that you want your webpage to work in.
03:28 - It is a lot nicer, but it's not nice
if your webpage breaks
03:32 - because you're using a function
that the browser doesn't know about.
03:36 - So I'll just comment it out.
03:38 - Because I want mine working
in a lot of browsers.
03:41 - There are still lots of times when we
want to change individual styles,
03:46 - instead of assigning class names.
03:48 - So once again, just remember that you have
both of these tools in your toolbox,
03:54 - and think about what might be best
depending on the situation.