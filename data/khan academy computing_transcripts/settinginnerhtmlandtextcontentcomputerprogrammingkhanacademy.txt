00:00 - We've already used `innerHTML` quite a bit
here, but I want to quickly show you
00:06 - a little more about it.
00:08 - First, let's look at our example,
right here where we set `innerHTML`.
00:14 - I've just passed in a string,
"all about cats".
00:17 - But, in fact, I could put HTML tags
inside that string.
00:22 - So I could surround "cats"
with `` tags,
00:26 - and you can see it shows up emphasized.
00:29 - Or down here, where I
change "dog" to "cat",
00:32 - I could surround this
with `` tags,
00:36 - and it shows up strong, bold.
00:39 - I could even write an `` tag
inside here, or put an entire webpage's
00:44 - HTML in here, if I really wanted.
00:47 - So that's pretty neat, because it means
we can do a lot with `innerHTML`.
00:53 - If we're only changing the text, actually,
we don't even need to use `innerHTML`.
00:59 - We can just use the `textContent`property,
and that means that browser
01:03 - won't interpret what you pass as HTML,
and will just render it as plain text.
01:09 - Notice if I change this to `textContent`,
01:12 - my brackets show up-- gross!
01:14 - So, in that case, we're just going to
get rid of them, because the browser
01:19 - refuses to turn them into actual HTML.
01:22 - So if you do want to just set the text,
just use `textContent`.
01:27 - If you want to pass in some HTML tags,
and have them interpreted as HTML,
01:31 - then use `innerHTML`.
01:34 - Once you start doing more
advanced DOM manipulation,
01:37 - you should be more careful about
using `innerHTML` and `textContent`,
01:42 - because they'll also
remove event listeners
01:44 - that you've attached to the
elements inside,
01:46 - which you'll learn how to do soon.
01:48 - In the next talk-through, I'll show you
a more sophisticated way
01:51 - to insert new elements
and text in your page.