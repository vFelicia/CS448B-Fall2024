00:01 - We're back with our program that creates winstons
00:03 - but I've added a new object type Hopper because Hopper was feeling a little
00:07 - left out now I define Hopper the same way that I define Winston, you know
00:11 - starting out with the constructive function and taking the same properties and then draw
00:15 - and then talk and then I also added another method called
00:20 - Horray because Hoppers really like to celebrate and Winstons don't
00:23 - really at all. Now at the bottom of the function I've created
00:27 - two new Hopper objects: Little Hopper and big Hopper
00:31 - and drawn them and called talk on one and Horray on the other
00:35 - So that's pretty neat
00:37 - Now, if we look at this code up here
00:39 - you might notice something interesting. Is that
00:41 - the code for hopper is very similar to the code for winston. Particularly look at it's constructor. I don't know if you remember but that's basically that is exactly the same code as our Winston constructor
00:52 - And then this talk function is also exactly the same code as our Winston talk function
01:00 - and they also both have draw functions
01:03 - so there's a lot of things in common about these two object types
01:07 - and that makes because you know Hopper and Winston they're two very similar object types
01:11 - in our world. If you think about, you know, the real world
01:15 - outside the computer most object types shares some similarities
01:20 - with other object types.
01:21 - Like in the animal kingdom. All animals
01:23 - are similar in some ways. And then we have different types of animals
01:26 - like humans. And humans share those similarities
01:31 - but also have their own unique similarities.
01:34 - So we could say that
01:36 - animal is an object type that human object type inherit functionality from.
01:38 - We don't completely start from scratch we add on top of the functionality that we get from being an animal.
01:46 - Like all animals make noises
01:49 - But humans also make language
01:51 - So this concept of object inheritance
01:54 - is really useful in programming too.
01:56 - And we can create a chain of object inheritance in our Javascript.
01:59 - So to do this when you think about
02:02 - what's shared about our object types.
02:04 - And come up with a name for that
02:06 - 'Cause we're going create a new object type
02:08 - that represents the base object
02:10 - so let's call them creature's.
02:12 - They're both creatures.
02:13 - So we say var creature equals. And now we need our constructer function
02:17 - So let's go and just steal Hopper's as that the same thing that Winston has.
02:22 - Alright.
02:23 - And then... let's see.
02:27 - Now we want to...
02:28 - What do we want to next?
02:29 - Maybe we want to add the "talk" function on it.
02:31 - So, for the "talk" function, we just steal Hoppper's. But of course we need to have it on the creature's prototype instead.
02:39 - Okay, cool.
02:41 - So now we have this creature object type.
02:45 - But we need to actually tell Hopper that Hopper should actually be
02:47 - base it's functionality off of creature.
02:51 - So we can do that by writing this line here.
02:53 - We'll say Hopper.prototype
02:58 - equals object.create
03:01 - creature.prototype
03:04 - So what this line does is tells Javascript to base Hopper's prototype so base all of Hopper functionality off of the creature's prototype.
03:14 - And then that means that every time it looks for a function on a Hopper it will at Hopper's prototype
03:22 - first, but then if it doesn't find that it will look and see if it is on the creature's prototype.
03:26 - And this is what we call the prototype chain.
03:29 - Now, once we've done this we should actually be able to delete the talk function.
03:34 - on Hopper.
03:35 - Because it already exists on creature.
03:38 - Which is up the prototype chain.
03:40 - Ready? Da dun da....
03:42 - It worked!
03:43 - And it works because it finds it on creature prototype instead.
03:46 - Um.. So let's try deleting on Winston too.
03:51 - Okay. It didn't work it says object has no method talk.
03:57 - And why is that? And why is that? Well we have our Winston constructer
04:01 - and draw and we took away the talk.
04:03 - Well, you notice we forgot to actually tell Winson's prototype to be based off
04:07 - the creature's prototype.
04:09 - So we need that very important line.
04:10 - Winston.prototype=object.create
04:13 - creature.portotype.
04:15 - Ta Da!
04:19 - And notice something important.
04:20 - I have this line after the constructor function but before I add anything else to the
04:26 - construction prototype.
04:28 - So that's usually what you want to do.
04:29 - You want to tell it just as
04:31 - just as your starting off immediately this is what you initial prototype will be based on
04:33 - But then we keep adding more stuff to it's prototype
04:36 - Because there could be something that are unique to Winstons or unique to Hoppers
04:41 - that aren't on creatures.
04:43 - And that's totally cool that you can define those.
04:45 - Alright. Now, if we look at this we still have some repeated code.
04:50 - The constructor code.
04:51 - Right? We have this all three times.
04:53 - So could we just delete it?
04:56 - Let's try it.
04:57 - Okay. Mmm... Doesn't seem like that worked
05:03 - Because our Hopper showed up in the upper left corner, kind of forgot everything about itself.
05:07 - And this is because Javascript does not assume you want the same constructor even if you want to base the prototype off of it.
05:15 - You know, it let's you define your own constructor for these objects.
05:19 - But it also does give you an easy way to call a constructor from an object
05:23 - Do the way we will do this is
05:28 - we will write creature.callthis,nickname,age,x,y
05:35 - Now what this does (Notice, it worked. Yeah) And what it did is
05:40 - actually it's calling the creature function, the construction function.
05:43 - It's calling that function but it's passing and it's saying okay you should call this constructor function as if
05:50 - it was being called from this Hopper object
05:53 - and as if it's being called with these arguments.
05:56 - These are arguments that the Hopper got called with.
05:59 - And that will end up just executing this code as if it was right here.
06:03 - And that's exactly what we want. And it worked.
06:05 - And we can go ahead and do
06:09 - copy this line into the Winston
06:11 - constructor too.
06:13 - And it works. Yay!
06:16 - Alright. So check this out. We've encapsulated all our shared properties and functionalities in this single base object type, creature
06:24 - And we've made two object type that extend from this base object.
06:28 - They inherit some functionality but they add their own too.
06:30 - And the cool thing about this is that we can change the shared functionality in a single place.
06:36 - Like if we wanted to change age again we could say plus years old.
06:40 - Now everybody has "years old" at the end of it.
06:43 - Or we could change the "talk" functions and be like "woo". And now both Winstons and Hoppers are saying "sup"
06:49 - So now that you've seen how to create object types and inherit from object types
06:57 - you can start thinking about how this might be useful in your drawings and animations and stimulations and games.
07:01 - For example, maybe you have a game and you have many type of characters in it
07:05 - and all of them can run but only some of them can jump.
07:07 - That's a perfect place from some object types and some inheritance.
07:11 - But I bet you can think of tons of more ways as well.