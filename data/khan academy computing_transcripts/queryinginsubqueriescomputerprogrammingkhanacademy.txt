00:00 - I'm back with my table of exercise logs,
and I've added a few more rows.
00:05 - Now, if I wanted to fliter these logs
to just show my biking logs,
00:10 - I could just add
`WHERE type = "biking";`.
00:15 - Simple.
00:17 - It's getting sunny outside,
so actually what I want to find
00:20 - is all of the outdoor activities,
not just biking.
00:23 - So to do that, I can use
the `OR` operator that we just learned,
00:28 - checking each of the
different outdoor types.
00:33 - `type = "hiking" OR type = "tree-climbing"
OR type="rowing";`
00:44 - Unfortunately, I don't yet have a
mountain, or a tree, or a lake in my home,
00:48 - so all of these are outdoor activities.
00:51 - All right, so that worked, but there is
actually a simpler way to do this query,
00:56 - and that's using the `IN` operator.
01:00 - The `IN` operator will check to see if
a particular value is in a list of values.
01:06 - Let me show you.
01:07 - So we'll take this query,
and I'll paste it,
01:11 - and then I'm going to replace
this equals sign with `IN`,
01:14 - and then put a parenthesis,
01:16 - and then I'm just going to separate
each of these strings with a comma,
01:22 - instead of that whole long
`OR type = "blah";`.
01:26 - Ta-da! Same results, like we expected,
but this query is easier to read
01:31 - and it's a bit shorter, too.
01:34 - We could easily also
do the inverse query,
01:37 - if we just want to see
the indoor activities.
01:40 - We just write`NOT IN`, ha.
01:43 - So that's just dancing,
and I'll save that for the wintertime.
01:47 - Let's change it back to `IN`,
and our outdoor activities,
01:50 - and I'm going to show you
something a little more interesting
01:54 - that we can do with `IN`.
01:57 - First, I'm going to need another table,
of doctor recommended activities.
02:02 - I'll paste in the SQL for that--
let's see, where do we have it?
02:06 - Here.
02:07 - So, here we've created a table
of doctor recommended activities
02:11 - which just has a `type`,
which matches our type from up here,
02:15 - and a `reason`, which is
why the doctor recommended it.
02:18 - Now, what if I wanted to see
all of my exercise logs
02:23 - that correspond to
doctor recommended activities?
02:27 - Well first, I might want to see, what are
those doctor recommended activities?
02:32 - So, `SELECT type FROM drs_favorites;`.
02:37 - Okay, biking and hiking.
02:39 - So, I could just take this query,
02:42 - and modify it, and just
shorten it to biking and hiking.
02:47 - However, if the `drs_favorites`
tables changed--
02:52 - like, there was a new row added,
or a row deleted--
02:55 - then this query would be out of date.
02:58 - What I want is for this query
to always be up to date
03:03 - with what's in this table here.
03:06 - So what I can do is use the `IN` operator
directly with the results of a SQL query--
03:12 - a `SELECT` query.
03:14 - And it's actually very simple to do.
03:16 - I'll replace what's in the parentheses
with the query that we did before.
03:24 - ♪ Ta-ta! ♪
03:26 - Cool!
03:27 - So, we call this inner query a subquery.
03:31 - It's the query that we're doing
inside the outer query.
03:34 - And now, this query will
always pull based on
03:38 - whatever's in the doctor's table
at the time, it will stay up to date.
03:43 - And this is a pretty simple subquery,
but it could actually get really complex.
03:48 - It could be as complex as any of
the queries that we've learned so far.
03:52 - Let me show you an example.
03:54 - What if we only want
to select the favorites
03:57 - that the doctor recommended
for cardiovascular reasons?
04:01 - So we could say,
`WHERE reason = `
04:06 - and then we could paste
this whole long reason in here,
04:10 - and we see hiking.
04:13 - But what if for some reason
we didn't have the period in here?
04:16 - Well now we actually
see nothing for that query.
04:19 - Because it's trying to do an exact match,
and it can't exactly match that.
04:23 - So there are times like this when
we want to do an inexact match.
04:27 - And we can do that
with the `LIKE` operator,
04:30 - which is a pretty neat operator.
04:33 - And so to do that, we're then just
going to take this
04:37 - and I'm going to replace the equals sign
with `LIKE` and get rid of--
04:43 - because all we care about is that
very important word, cardiovascular,
04:47 - that is what we're looking for.
04:49 - So we say `"cardiovascular"`, and we
also put a percentage sign on either side,
04:54 - which acts as a wildcard.
04:55 - So this should match any rows
04:57 - which contains the word
cardiovascular anywhere-- and it did, yay!
05:02 - Okay, so that's pretty cool.
05:05 - Whew! We covered a lot,
`IN`, subqueries, `LIKE`.
05:09 - Hopefully, you're pumped
to try them out in the next challenge,
05:13 - or, take a break, go climb a tree,
and come back.
05:17 - Either way I hope you have fun with it.