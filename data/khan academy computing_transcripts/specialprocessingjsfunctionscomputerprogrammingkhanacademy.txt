00:00 - At this point, you might realize
that you've been defining
00:03 - a particular function every time
you wanted to animate your program--
00:07 - the `draw` function.
00:09 - To remind you, here's our
animated car program again.
00:13 - It has this variable named x,
it starts off at 11.
00:16 - And then inside the `draw` function,
it draws the car at that variable x,
00:22 - and then it adds three
to that variable x each time.
00:26 - And that results in a car
00:28 - that's moving three pixels
across the screen continuously.
00:32 - So, that's how this works.
00:34 - But now that you've learned
how to make your own functions,
00:37 - you might be wondering,
what about this `draw` function?
00:41 - Why is it always named `draw`?
00:44 - Is it a custom function?
00:45 - And those are very good questions.
00:48 - You see, in the ProcessingJS library,
00:51 - the `draw` function is one of
a few predefined functions
00:56 - that give our programs more control
over what's happening with the canvas.
01:01 - A predefined function is one
that has already been defined
01:04 - by the ProcessingJS library.
01:07 - But it usually starts off
as an empty definition.
01:11 - For example, in the ProcessingJS library,
there's code that looks like this:
01:17 - `var draw = function() { }`
01:19 - and then it's just empty,
completely empty.
01:23 - Now, we load the ProcessingJS library
into every program here on Khan Academy,
01:28 - So you never see this code.
01:30 - But trust me, it exists.
01:33 - Now I'll comment that code out,
since ProcessingJS already does it for us.
01:41 - Now when you redefine `draw`,
in your own program,
01:45 - this new definition overrides
the old empty defintion.
01:49 - And now the `draw` function
01:51 - actually does exciting things,
like drawing a car.
01:55 - Now the question is, why does the `draw`
function get called over and over?
02:01 - Well, there's also code
in the ProcessingJS library
02:05 - that sets a browser timer and
recalls the draw function repeatedly,
02:11 - over and over and over.
02:13 - We have to name the function `draw`,
because that's the name of the function
02:19 - that ProcessingJS is calling repeatedly.
02:22 - If we rename this, like let's say
we rename it to `drawCar`.
02:27 - And first we get an undefined error, so
we could say `var drawCar`.
02:33 - So now you can see, if we
rename this to `drawCar`,
02:37 - we don't see any animation any more.
02:39 - And that's because this function
isn't being called repeatedly any more,
02:44 - because it's not named draw.
02:47 - So we have to put the code
that we want repeatedly called
02:50 - inside a function spelled `draw` exactly.
02:55 - So I'll just do it again,
and I'll just call `drawCar` from here.
03:00 - Aha! We've got it back.
03:03 - All right, so it needs to be called draw,
03:07 - and this also means that you shouldn't
name your own custom functions `draw`,
03:12 - unless you want them to be
treated specially and called over and over.
03:18 - And also remember, you can't have
multiple functions named `draw`.
03:23 - Only the last definition will count.
03:27 - If we had a `rect` inside here--
03:30 - So now we can see that our car
isn't being drawn any more,
03:35 - and only the rect is being drawn instead,
because only the last defintion counts.
03:40 - So let's get rid of that one.
03:43 - Now the draw function is not the
only predefined function
03:48 - that has this special behavior.
03:50 - There are also a bunch of functions
03:52 - for responding to mouse
interactions and keypresses.
03:56 - Let's say we want to have a program
that draws a colored ellipse
04:01 - wherever the user moves the mouse.
04:04 - So we could do that with
a function like this.
04:09 - [typing]
04:19 - All right, oh, beautiful.
04:22 - Now, this function is being called
over and over,
04:27 - even when the user isn't
moving the mouse, like right now.
04:31 - And this program, it works, it does
what we want it to do,
04:34 - it's painting these nice ellipses
all over the screen.
04:37 - But as it turns out, there's
a better way to do the same thing
04:42 - that's more efficient.
04:44 - So we can change the `draw` function
to `mouseMoved`, and let's see.
04:51 - And it still works.
04:54 - You see, our environment checks programs
04:58 - to see if they've defined
a `mouseMoved` function,
05:00 - and if so, it calls that function
whenever the user moves the mouse.
05:05 - But it won't be called
if the user isn't moving the mouse.
05:10 - So before, we were calling
the code in the `draw` function
05:13 - when we didn't need to, over and over.
05:15 - And now, we're only calling
this code in `mouseMoved`
05:20 - when the mouseX or mouseY
have actually changed.
05:23 - So our program is more efficient,
and that's a good thing.
05:27 - Generally, if you only want to
change your program output
05:30 - when the user moves the mouse,
then it's better to have that code
05:34 - inside the `mouseMoved` function.
05:37 - And there are a bunch more
predefined functions like that,
05:40 - which you can see more examples of
in the documentation.
05:44 - Like `mousePressed`, `mouseReleased`,
`keyPressed`, and more.
05:48 - So remember, if you want to use
a special predefined function,
05:53 - like `mouseMoved` or `draw`,
spell it correctly, and use it correctly.
05:59 - If you don't, then make sure you
give your own custom functions
06:03 - a new, unique name.