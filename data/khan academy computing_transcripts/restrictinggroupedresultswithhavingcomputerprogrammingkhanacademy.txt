00:00 - Let's continue with more queries
of my exercise logs.
00:04 - Let's say that I want to see
how many calories I've burned
00:07 - for each type of activity.
00:10 - We can do that with an aggregate query.
00:13 - Say `SELECT type,` and then
`SUM(calories) FROM exercise_logs`,
00:23 - and then we're going to
`GROUP BY type;`.
00:26 - Now I can see each type
with how many calories I've burned
00:30 - total for that type of exercise.
00:32 - Now, do you notice how the column shows up
as `SUM(calories)` in the results?
00:38 - If we want, we can actually tell SQL
to give that column a new name,
00:43 - just by writing `AS` and then giving it
the new name, `total_calories`.
00:50 - That can make our results easier to read
and it also has another benefit,
00:54 - which we'll use later.
00:56 - So next, I want to filter the results,
00:59 - to only show activities where I burned
more than 150 calories total,
01:06 - across all the times
I've done that exercise.
01:09 - It turns out that 150 calories is
the amount in one ounce of dark chocolate,
01:13 - so it seems like
a good amount to shoot for.
01:17 - Now, my first instinct might be
using `WHERE` to filter.
01:23 - Like if I took this query here,
and then said `WHERE calories > 150`.
01:34 - Then we only see dancing,
and we don't see biking,
01:38 - which we'd expect to see.
01:40 - The reason we only see dancing
is because it filters
01:42 - each individual row that comes in.
01:45 - And dancing is the only exercise
where I burned more than 150 calories
01:49 - in a single log.
01:51 - But what I want to know is which
exercise type or types have I burned
01:57 - more than 150 calories across all of
the logs for that exercise type.
02:03 - We actually have to
use something new for that,
02:06 - which is the `HAVING` clause.
02:08 - To use that, we'll remove this `WHERE`,
02:12 - and then after the `GROUP BY` we'll write
`HAVING` and then `total_calories > 150`.
02:21 - Ta-da! Now we see biking.
02:24 - Because now it's actually looking
at the total calories,
02:28 - and I've indeed earned more than
150 over time in my logs.
02:33 - So as you can see, those two queries
are actually different,
02:37 - but they are easy to confuse.
02:39 - When we use `HAVING`,
we're applying the conditions
02:43 - to the grouped values, not the
individual values in the individual rows.
02:49 - We could use any aggregate function
on a grouped column that makes sense,
02:55 - `SUM`, `MIN`, `MAX`, `AVG`,
whatever we want to check.
03:00 - Let's do another example.
03:02 - So if we want to see the
average calories for all the exercises
03:09 - where we burned, let's say,
more than 50 average total--
03:17 - Oh, that's all of them, so let's up it.
03:19 - A hundred, in the middle,
still doing good, seventy-- cool.
03:24 - So you can see we can play around
with that query there,
03:28 - get different results with that `HAVING`.
03:31 - Now let me do something a little different.
03:33 - Let's say we want to see all the exercise
where we logged at least two activities
03:38 - for that type of exercise.
03:40 - For that we're going to
use a `COUNT` function.
03:44 - So, I'll `SELECT type FROM exercise_logs`,
03:48 - `GROUP BY type`, and then 
`HAVING count(*)`,
03:54 - doesn't matter what column,
so we can just do star,
03:57 - greater than or equal to two.
03:59 - Okay, so now we can see
biking, dancing, tree climbing.
04:04 - I've done all of those at least two times.
04:06 - Makes sense, because those are my
three favorite activities in life--
04:11 - besides coding, of course!
04:12 - Okay, so now you've seen `HAVING`.
04:15 - Remember that it's easy
to confuse `HAVING` with `WHERE`
04:18 - when using these aggregate functions.
04:20 - So think through your results,
and make sure they make sense.
04:23 - And now you get to try it yourself.