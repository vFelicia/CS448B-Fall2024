00:00 - - [Instructor] I've set
up this (indistinct)
00:04 - for us to play with, and
it is rather boring indeed.
00:08 - It has no content,
00:10 - and this button does absolutely
nothing when I click on it.
00:16 - Let's make the button interactive.
00:18 - When the user clicks on it,
00:20 - the text inside the button should change.
00:24 - The first step is to find the element
00:27 - that we want to listen to
events on, and in this case,
00:31 - that's the button, and the
button has an ID of clicker
00:35 - so we'll create a clickerButton variable,
00:39 - and use document.getElementById
00:46 - to get it and store it in that variable.
00:49 - The next step is to define a function
00:53 - that will be called once
the click event happens.
00:58 - I'll call it onButtonClick,
01:02 - and I'll just put my empty function,
01:07 - and, of course, I need to
put something inside of it,
01:10 - or it's not a very exciting function.
01:12 - So to change the button text,
01:14 - we can use the clickerButton variable
01:16 - and set the textContent of it,
01:19 - "Oh wow, you clicked me!"
01:23 - Yay, what a happy button.
01:27 - It's not much code, but we can make it
01:28 - more complicated later,
once we get this working.
01:33 - All of our codes has done
so far is define variables
01:37 - so still nothing happens
when I click the button.
01:42 - The final step to bring it all together
01:45 - is to tell the browser that
it should call the function
01:49 - we defined whenever
the click event happens
01:52 - on the button that we found.
01:54 - We can do that by calling
the add event listener
01:59 - on the button element,
02:00 - clickerButton.addEventListener,
02:06 - and we need to pass two
arguments to this method.
02:10 - The first is the name of the event, click,
02:14 - and the second is the
function that we wanna call
02:18 - when the click happens, onButtonClick.
02:23 - Now, pause this talk-through
and click the button.
02:28 - Did it work? I hope so.
02:31 - It worked for me.
02:33 - Let's talk more about
how this function works
02:36 - because it is a bit tricky.
02:38 - We call this function the
event listener function
02:41 - or the callback function,
because that's the way we use it.
02:47 - We only want it to get called
once the event happens.
02:51 - We usually don't want it to
get called when the page loads.
02:55 - If we did want it to be
called when the page loads,
02:58 - we'd have to add a line
like this at the bottom.
03:03 - Notice the parenthesis
after the functioning here.
03:06 - Remember, parentheses is
how we call a function.
03:10 - If we leave them off, then
we're not calling the function.
03:13 - We're just referring to it,
03:15 - and that's what we're
doing when we pass it
03:17 - as an argument here.
03:19 - We're just telling the browser,
03:20 - "Hey, here's the function
that you should call later,
03:23 - but not now."
03:27 - So make sure you do not put parentheses
03:30 - after the function name here
03:32 - because then you'll just
be passing the return value
03:35 - of the function, not the function itself.
03:38 - If I did accidentally do that,
03:39 - I'd see the button text
change on page load
03:42 - and not see any change after.
03:44 - To fix that, I just remove the parentheses
03:47 - that I accidentally added,
03:48 - and now my function only
gets called on click.
03:53 - One other way that we could do this
03:56 - is to pass an anonymous function
04:00 - to this method here.
04:02 - An anonymous function is one
that does not have a name,
04:06 - and that's just specified inline.
04:10 - I'll copy and paste the
addEventListener line
04:15 - and show you the options side by side
04:18 - so you can see what I mean.
04:20 - I'll delete the function name here,
04:22 - and replace it with the
function definition itself.
04:25 - Just pasting this in here.
04:31 - Okay, so these two lines of code
04:34 - are doing exactly the same thing.
04:37 - Well, almost exactly.
04:39 - They're both passing in a function
04:42 - with the same code inside.
04:44 - The difference is that
the first one is passing
04:46 - in a named function that we defined above,
04:50 - and the second one is defining
the anonymous function
04:54 - inline at the same time as passing it.
04:58 - Both techniques work.
05:00 - Many developers prefer named functions
05:02 - because the code is easier to read,
05:04 - and it can be a bit easier to debug,
05:07 - and then you can call the
named functions yourself
05:10 - at other times or from other events,
05:13 - but it's up to you what to use.
05:15 - Just don't use both at once
05:17 - because then the browser will
end up calling both functions
05:20 - when a click happens,
05:21 - and there's no point to calling
this function both times.
05:26 - I'll go ahead and delete the
anonymous function version
05:29 - since I prefer the first way.
05:32 - There's a lot that you
can do now that you know
05:33 - how to add event listeners.
05:35 - You could add them to
more parts of your page.
05:38 - You could listen to different events,
05:39 - which we'll talk about next,
05:41 - and you could modify the
DOM in any of the ways
05:44 - that you learned earlier,
05:45 - and you don't just have
to modify the element
05:47 - that was just interacted with.
05:49 - You could modify anything on the page.
05:52 - Try it out. Find out what you can do.