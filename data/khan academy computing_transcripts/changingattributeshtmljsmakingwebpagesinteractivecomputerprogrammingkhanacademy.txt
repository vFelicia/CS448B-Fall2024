00:00 - I'm back with my webpage about dogs,
and I am very determined to use JavaScript
00:06 - and the DOM api to turn it into a 
webpage entirely about cats instead.
00:11 - There is an elephant in the room that I've
been ignoring. Well, actually, there's
00:17 - a dog in the room; two dogs, in fact-- 
these images. I can't have images
00:23 - of these adorable dogs on my page about
adorable cats. I need to change them.
00:29 - So, let's start by finding the images, 
using getElementsByTagName.
00:36 - `var imageEls = 
document.getElementsByTagName("img");`
00:47 - Now, since that returns multiple elements,
00:50 - we need to use a for loop to iterate 
through them, so I'll set that up.
00:54 - `var i = 0; i < imageEls.length; i++`
01:04 - But what do I put inside the for loop? 
I can't change image elements with
01:11 - innerHTML because image tags don't have 
an innerHTML. They're autoclosing tags.
01:18 - Instead, I need to change the thing about 
them that makes them look like dogs--
01:23 - the URL of the pictures, 
the thing that is specified
01:27 - with the src attribute 
in each of the tags.
01:30 - We can change attributes of elements 
using dot notation. Let me show you.
01:36 - First we access the current element with
bracket notation, and then we say dot
01:43 - and we put the HTML attribute name as the
JavaScript property name-- src-- equals
01:50 - and then we set it to some new value; 
and I'll just put an empty string.
01:54 - Notice the images went blank,
01:57 - since an empty string 
doesn't point at any image at all.
02:01 - To figure out what this new URL should be,
I'm going to paste the old URL here
02:07 - and change the file name to cat, 
because I happen to know
02:13 - that that's the URL of the 
cat image on Khan Academy.
02:16 - Yay. The dogs are now cats, and 
our catification is mostly complete.
02:23 - Do you see anything else that still has to
do with dogs? It's really subtle, but
02:30 - there is one thing left-- the link to 
Wikipedia. It's going to the dogs page
02:36 - and if the viewer follows it, they're 
going to catch on to my nasty trick.
02:41 - So I want to send them to cats instead. 
How should I find that link in JavaScript?
02:47 - I could give this link an ID 
and use getElementById.
02:51 - Or I could use getElementsByTagName
and change all the links on the page.
02:57 - Or I could be really super fancy,
02:59 - and find only links that go to pages 
about dogs, using a CSS query selector.
03:06 - Let me show you the CSS query that I want
to do up here in the  tag first.
03:11 - So this CSS query is going to find all 
links that have to do with dogs.
03:15 - First I'm going to type `a`, 
'cause I'm just looking for links.
03:19 - Then I'm going to say `[href*="Dog"]`.
03:26 - So this tells CSS to match 
any link that has "Dog" in it.
03:31 - And then we'll set the color to purple. 
Ta da, it selected it.
03:38 - So, that's pretty neat, and this is an 
attribute selector, and there's a lot of
03:43 - neat ways to use attribute selectors to
really dig deep into your document.
03:49 - So now to find that in JavaScript, we can 
use document.querySelectorAll, so I'll say
03:58 - `var linkEls = document.querySelectorAll`,
and then we can just go and paste in the
04:07 - selector that we just made, although 
we do have to make sure that
04:12 - we escape our double quotes. There we go.
So now it looks like a good string.
04:22 - And now I need to iterate through these, 
so once again we just do our for loop--
04:27 - should be getting really used to 
doing these for loops-- and for each of
04:34 - them I want to change the link to the 
webpage about cats on Wikipedia.
04:41 - So I'm going to say `linkEls[i].href`--
04:45 - because that's the name of the attribute
that we're changing-- and then equals,
04:50 - then I'll go find this URL and paste it 
down here and just change it to cat,
05:00 - because I'm pretty sure 
that's the URL of that page.
05:04 - Ta da, world catination is complete.
But you are not done
05:10 - learning how to manipulate webpages 
with JavaScript, so stick around.