00:01 - - [Voiceover] Now I want
to talk about a concept
00:02 - that can be really confusing.
00:04 - The difference between jQuery collections
00:06 - and DOM nodes.
00:09 - Let's take a look at this code down here.
00:12 - The first line uses
'document.getElementById'
00:15 - Define the element with
the Id of 'cuteness'
00:18 - and save it into this variable.
00:21 - The line after uses
jQuery to find the element
00:25 - with the Id of 'cuteness'
00:26 - and save it into this variable.
00:29 - Now what is the actual return value
00:32 - of these functions?
00:35 - Are both of these variables storing
00:36 - the exact same data?
00:39 - Pause and think about it for a second.
00:43 - The answer is no.
00:45 - They're not storing the same data.
00:48 - The first variable is storing a DOM node.
00:52 - Since it's storing a DOM node,
00:54 - that means that we can
use DOM properties on it.
00:57 - Things that the browser gives us,
00:59 - like innerHTML.
01:02 - You can see that we're successfully
01:04 - changing innerHTML.
01:08 - This variable is storing
a jQuery collection,
01:11 - a special object that jQuery creates.
01:16 - Since it's returning a jQuery collection,
01:19 - that means that we can
call jQuery methods on it,
01:23 - like '.html.'
01:26 - We can see that it's successfully changing
01:30 - the '.html'
01:32 - Now if we tried using that
method on this variable
01:36 - it wouldn't work.
01:37 - If we tried setting the innerHTML property
01:39 - on this variable, it also wouldn't work.
01:44 - You might be wondering why does jQuery
01:47 - go through the effort to turn DOM nodes
01:50 - into jQuery collections?
01:53 - Why doesn't it just return the DOM node?
01:56 - Well, jQuery has also provided
01:59 - functions like '.html' and '.attr'
02:01 - and '.addClass' and '.css'.
02:03 - These functions make it so you can
02:05 - do DOM manipulation and have it work
02:08 - across browsers, and be able to do it
02:09 - in a small amount of code.
02:12 - jQuery wants to make
it easy for you to call
02:14 - these methods on everything you
02:17 - find and create with jQuery.
02:20 - These methods are only defined
02:21 - for jQuery collections therefore
02:23 - jQuery has to return a
jQuery collection object.
02:31 - Hopefully you understand the reason
02:32 - why we have jQuery collection objects.
02:35 - Now it can still be confusing sometimes
02:37 - to keep track of which of your variables
02:39 - are storing DOM nodes,
and which of them are
02:41 - storing jQuery collections.
02:44 - That's why many of us like to use
02:46 - a naming convention where we prefix
02:48 - jQuery collection
variables with a '$' sign.
02:52 - Let's see.
02:52 - So 'var $heading = '
02:55 - We'll just do the same thing as before.
02:56 - Get the Id of 'cuteness'.
03:00 - Now we've got a jQuery variable.
03:02 - I'll just prove that.
03:03 - 'Using jQuery again!'
03:10 - I use this convention and it means that
03:11 - any time I see a variable
name starting with '$'
03:15 - in my code, I'm pretty sure
03:16 - that it's a jQuery collection object,
03:18 - and that I can call jQuery
collection methods on it.
03:25 - Now sometimes I actually want access to
03:28 - the DOM node that's inside
the jQuery collection.
03:34 - We can pull it out pretty simply.
03:38 - Let me show you.
03:40 - I'm going to create a
variable to store it.
03:41 - I'll call it 'headingD'.
03:43 - What I need to do is reference
03:46 - the jQuery collection object,
03:49 - and then treat it like an array.
03:52 - Since I want to pull out
the first matched element,
03:54 - because there's only one matched element,
03:56 - I'm going to say [0].
03:59 - There we go.
04:00 - That does it.
04:02 - Now this variable should store the same
04:06 - as this variable.
04:08 - They're both storing DOM nodes,
04:09 - and the same DOM node.
04:12 - Cool. Okay.
04:15 - Sometimes I might have a DOM node,
04:17 - and I want to turn it
into a jQuery collection.
04:20 - To do that, let me show you.
04:23 - I'll create, let me create a variable
04:25 - starting with a '$'. We're doing that now.
04:28 - Then the way I do this is
I call a jQuery function
04:32 - and then I can just pass in
04:36 - the DOM node variable.
04:37 - Now jQuery will take that and turn it into
04:40 - a jQuery collection.
04:43 - Now we can store it there.
04:44 - So 'headingJ' is now
storing the same thing
04:47 - as 'headingFromJ'.
04:50 - jQuery collections that
both have this element
04:54 - inside of it.
04:56 - Cool. All right.
04:57 - So now you hopefully have
a better understanding
05:01 - of collections versus DOM nodes.
05:03 - Normally you don't have to do all this
05:05 - conversion between on and the other,
05:07 - and keep track of it so much.
05:09 - It is handy to know how to do it
05:11 - when you need it.
05:12 - It's also just important
to really understand
05:15 - what data your code is storing.