00:00 - - [Instructor] This is a
JavaScript implementation
00:02 - of the factorial function using
recursion and memoization.
00:06 - We're going to walk through it
00:08 - to see what the computer does.
00:10 - So first we have the creation
of the memo data structure,
00:14 - in this case it's a job script object
00:16 - which we're going to fill later.
00:19 - Then we have the definition
of the factorial function
00:22 - and then at the bottom,
the first thing we do
00:24 - is call factorial for two.
00:27 - So let's see what happens.
00:30 - We go to the function and
two is not equal to zero
00:33 - so this is false.
00:35 - The memo does not have a value for two
00:39 - so this is also false.
00:41 - So we go to the else and that calculates
00:43 - by recursively calling
factorial for n minus one.
00:47 - So it's going to immediately
call factorial of one.
00:51 - And now we're in the
function when n equals one,
00:54 - this is false, this is
false, so it goes here
00:59 - and needs to calculate
factorial of n minus one again,
01:03 - this time that's going
to be factorial of zero.
01:05 - So it calls that
01:07 - and now we're in a function
for when n equals zero.
01:09 - This time this first if condition is true
01:13 - so the function's going to return one.
01:16 - So that one gets returned
01:18 - and now we're back in the
function when n equals one
01:22 - and now we get to update the memo
01:25 - and say that memo of one equals one.
01:29 - So you can see that the object updates,
01:31 - it now has one key with a value.
01:33 - We return that value of
one to whoever called us.
01:38 - So now we're in the
function when n equals two.
01:43 - And we have a result for
this as well which is two.
01:46 - So we update memo of two to be two
01:48 - and we return that result of two.
01:52 - All right, so we've got factorial two
01:54 - and we now have a memo
that has two keys in it
01:58 - for the values of one and two.
02:00 - So let's see what happens
when we call factorial five.
02:05 - So we go into the function
and five is not zero
02:07 - so this is false.
02:09 - The memo does not have a key
of five so this is false.
02:13 - So we go here and it wants to
call factorial of n minus one
02:17 - which would be factorial of four.
02:20 - So immediately it does that
02:21 - and we're in the function
for n equals four.
02:24 - It's not equal to zero,
it's not in the memo,
02:27 - so we go here and it calculates
factorial of n minus one
02:32 - so that's factorial of three.
02:34 - So now we're in factorial
for n minus three.
02:37 - Three is not equal to zero,
the memo does not have three,
02:41 - so once again,
02:42 - factorial of n minus one is
gonna be factorial of two.
02:46 - So here two is not equal to zero
02:49 - but the memo does have a property for two.
02:53 - So we are gonna return
memo of two which is two
02:57 - and this time we don't have
02:59 - to recursively call anymore functions
03:01 - because we already know
the answer for two.
03:04 - So this goes back up
to when n equals three
03:08 - in the factorial function and
now we have this result of six
03:12 - so we get to update the
memo for n equals three.
03:16 - Then we go back to when n
equals four in factorial
03:19 - and now we have a result of 24.
03:21 - We update the memo.
03:23 - We return back to when n equals five.
03:26 - We have a result of 120.
03:28 - We update the memo and we return it.
03:31 - So you can see that we saved
a few recursive calls there
03:35 - because we already had a
factorial of two stored
03:38 - in the memo and if we
continued and called something
03:42 - like factorial 10, we
would save calls as well
03:45 - because we've already got
factorial five in there
03:48 - and then it could stop.