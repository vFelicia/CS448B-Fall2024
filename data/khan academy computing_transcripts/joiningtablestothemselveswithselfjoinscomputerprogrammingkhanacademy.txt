00:00 - I'm back with just the table
about students this time.
00:04 - I've added one more column
to the table, `buddy_id`.
00:08 - See, I decided that every student
should have a buddy--
00:12 - somebody that they can pair up with,
00:14 - do assignments with,
study with, all of that.
00:18 - Now the buddy ID is what it sounds like,
00:20 - it's an ID that relates to the ID of
the student that they're buddied up with.
00:26 - So for example, here,
Peter is buddied up with 2,
00:31 - and 2 is Alice.
00:34 - Let me just do a `SELECT` that should
make that more that clear.
00:37 - So, `SELECT id, firstname, lastname,
buddy_id FROM students`.
00:45 - Okay.
00:47 - The interesting thing here
00:49 - is that this `buddy_id` is a column
in a table that's related to
00:54 - another column in the same table.
00:57 - That's a bit different from before,
01:00 - where we'd have columns
related across different tables.
01:04 - So, what if we wanted to show
the names of each student
01:09 - next to the email of the buddy,
not just the ID, the email.
01:15 - To do that, we need to actually
join the `students` table with itself,
01:22 - because the two bits
of related data that we need
01:25 - both happen to be
in the same table.
01:29 - We can do that by-- let's see, so we want
the first name, last name, email--
01:36 - so to join `students` with itself,
we're going to write
01:40 - `FROM students` and then
`JOIN students;`.
01:46 - Hm, okay?
01:47 - All right, okay, so we get an error--
`first_name` is an ambiguous column.
01:52 - And that's true, we're telling it
to select `first_name`,
01:55 - but it's joined across two tables,
01:57 - and both of these tables
have the same column names.
02:02 - And before, we would just prefix
these with the table names,
02:07 - but we can't do that here,
02:10 - because actually, they're
both named students.
02:14 - So we need to give it a way
to distinguish between this one
02:18 - and this one, even if they're
kind of the same thing.
02:23 - And we can do that by
giving one of them an alias.
02:27 - So, we're going to write
the alias right after here.
02:30 - The alias is like a nickname.
02:32 - So here's the alias, `buddies`.
02:35 - And then we just have to specify that
the email is coming from `buddies.email`.
02:42 - Ha-ha, there we go.
02:45 - Now, we're seeing too many rows,
way too many rows,
02:48 - and that's because we don't have
an `ON` clause yet.
02:52 - So it's just joining every possible row
with every other one.
02:56 - Now our `ON` should check that
the buddy ID from the `students` table,
03:03 - that first one, matches the ID from
the second table, `buddies`,
03:11 - or what we called `buddies`.
03:13 - Ha-ha!
03:14 - Now we can see Peter with
Alice's email address,
03:17 - Alice with Peter's, et cetera, et cetera.
03:20 - To make this results table
even a little more clear,
03:23 - I'm going to rename
`buddiesemail as buddyemail`.
03:27 - Okay, so now it's a lot more clear
03:29 - that we're looking at Peter Rabbit
and his buddy's email.
03:35 - Cool.
03:36 - Now this type of join
is called a self join.
03:40 - And that's because it's
a table being joined to itself.
03:45 - You can try this out
in the next challenge,
03:47 - and I'll show you one more way to use
self joins in the talk-through after.
03:52 - I hope you'll join me,
if not, just join yourself. [LAUGH]