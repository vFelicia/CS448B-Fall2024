00:09 - In our first video on 
conditional statements,
00:12 - we explored what conditional 
statements were
00:14 - and practiced making 
an interactive project.
00:18 - We started working on 
a fish game
00:20 - and coded one sprite (a fish) 
to react when touching
00:23 - another sprite 
(the pufferfish).
00:26 - Let's add some code
to the pufferfish, too,
00:28 - so the pufferfish changes
costumes and winks
00:31 - when it touches the fish.
00:35 - Hmm.
00:35 - The fish is reacting,
but the pufferfish isn't. Why?
00:40 - Let's debug
what's happening here.
00:43 - The issue is that,
as soon as I hit my green flag,
00:46 - the fish and the pufferfish
weren't touching.
00:48 - Since the condition 
“touching” wasn't true,
00:51 - it stopped checking 
and ended the script.
00:54 - I need to remember to put 
my conditional statement
00:56 - inside a loop to make 
a conditional loop.
00:58 - I want it to continually listen
to see if they're touching.
01:02 - Now, let's say I 
want to add code
01:04 - so as the fish is 
approaching the pufferfish, 
01:07 -  the pufferfish makes a 
sort of warning face, 
01:09 - like an annoyed face.
01:11 - And when they finally touch,
then the pufferfish winks.
01:14 - I'm going to nest 
my original 
01:16 - “if then else” 
conditional statement
01:18 - inside another 
“if then else” statement
01:21 - that is checking 
the distance
01:22 - between the pufferfish
and the fish.
01:25 - I'm nesting it 
under “else.”
01:27 - Now, the program says,
01:29 - if the distance is 
less than 150 pixels,
01:32 - then show the annoyed
pufferfish face.
01:41 - Hmm. 
01:42 - Notice that I'm not getting
the winking face at all.
01:44 - Why is that?
01:46 - Well, the way this program
is currently written, 
01:49 - it's first checking 
to see 
01:50 - if the distance 
between the sprites
01:52 - is less than 150 pixels.
01:55 - And if that's true, it's
showing the annoyed costume.
01:58 - Because this condition is true
when they're touching,
02:01 - it never moves on to the code
in the “else” statement.
02:04 - The order of the 
nested statements
02:06 - can really make a difference.
02:08 - By switching the order, so
the first conditional statement
02:11 - says to check
if they are touching,
02:17 - when the sprites are touching,
02:18 - that statement is true
and it shows the wink.
02:21 - When it is false
and they aren't touching,
02:23 - it moves on to the “else,”
02:24 - which is our second
conditional statement:
02:26 - checking the distance
between the sprites.
02:28 - If the distance is 
less than 150 pixels, 
02:31 - that statement is true 
and we see the annoyed face.
02:35 - Where can I go from here?
02:37 - Well, I could use 
additional “repeat until,”
02:39 - “wait until,” or “if then” 
conditional statements
02:42 - to create a game
where a conditional statement
02:45 - is assigning points
if a condition is met.
02:48 - And checking the score
to see when the player has won.
02:52 - I could play
with different conditions.
02:54 - For instance,
02:55 - I could use the 
“touching color” condition 
02:56 - in another nested 
“if then” statement,
02:59 - and use the 
eyedropper tool
03:00 - to select the pink of the 
coral in the backdrop.
03:03 - Then, I can add code,
03:05 - so when the fish is touching
the pink of the coral,
03:08 - it displays an eating
costume and says, “Yum!”
03:12 - Conditional statements 
can be used
03:14 - in a wide variety of projects.
03:15 - For example,
I could use that same
03:17 - “touching color” condition
in a maze game,
03:20 - where a 
conditional statement
03:21 - reverses a move when sensing
the color of the maze walls,
03:24 - preventing a sprite
from walking through them.
03:27 - Or I could use a conditional
statement in a silly animation.
03:30 - Like here, where a cat
is looking for cheesy puffs.
03:33 - The conditional statement
03:34 - triggers new text
when they finally touch.
03:37 - The possibilities are endless.
03:39 - What will you create?