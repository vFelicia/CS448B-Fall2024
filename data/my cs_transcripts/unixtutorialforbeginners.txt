00:04 - hello and uh welcome to the beginning of
00:06 - my unix tutorial series uh
00:09 - for beginners
00:11 - now assumingly if you've clicked this
00:12 - video you know what unix is
00:15 - but if you haven't and you just stumbled
00:17 - along on curiosity well
00:19 - unix is an operating system from the
00:22 - 1960s which we can still find uh today
00:26 - in our modern operating systems
00:29 - and that's operating systems like
00:31 - mac os x
00:33 - or linux which i'm using uh now
00:37 - you can even find it on things like an
00:39 - iphone or
00:40 - an android smartphone
00:43 - but anyway
00:44 - you can't actually find it
00:46 - on uh microsoft's windows which i'm sure
00:49 - most of you are running
00:51 - most of the population at least
00:54 - but there is a way of actually getting
00:55 - unix onto it which i actually might make
00:58 - a video on uh later
01:01 - but anyway
01:02 - now when i say this is a unix system
01:05 - i don't mean all this like all this
01:07 - graphical stuff
01:09 - i mean what you get in the terminal
01:11 - or the shell
01:13 - and you get there by going to the
01:16 - terminal application or
01:18 - at least terminal in my case
01:20 - on a mac it's called terminal i know
01:22 - that but on your system it might be
01:24 - called console or shell or something
01:26 - like that
01:28 - anyway
01:30 - when i say i mean what you get here in
01:32 - this little application
01:34 - the text so when i type stuff in
01:38 - commands and stuff you get output that's
01:41 - what i mean by unix
01:43 - the shell
01:44 - okay so i'm going to go back to my
01:46 - special
01:47 - terminal with a large font for you guys
01:50 - okay so i must say this what i have now
01:53 - isn't actually
01:54 - unix from the 60s
01:58 - 20 or 30 years ago whatever it was
02:00 - rewritten
02:03 - and what i have now is called gnu
02:07 - well it's not actually called canoe but
02:08 - well it's from the gnu foundation
02:12 - and the interesting thing about gnu
02:14 - gnu is it stands for gnu
02:17 - is not unix
02:20 - that's the acronym
02:22 - and basically what it is it's
02:25 - a clone of it really it's
02:28 - unix rewritten to be open source
02:30 - or at least open without uh legal
02:33 - restrictions
02:35 - because the original one unix was
02:38 - proprietary
02:40 - which meant it was had a private owner
02:43 - and
02:43 - had legal restrictions on it
02:46 - well the new one one i'm running now run
02:49 - most if not everyone's running is uh
02:53 - open which means it's got no real
02:56 - restrictions on it
02:59 - okay back to the shell okay so the unix
03:02 - shell is a command central thing
03:05 - you only open it if you want to do
03:07 - something
03:08 - and you can only do something with
03:10 - commands
03:12 - for example
03:13 - this will print out some stuff
03:17 - and so will this
03:19 - and this will print out the username
03:21 - of this logged in
03:25 - okay
03:26 - so one of the main things you anyone
03:28 - will really want to do on unix
03:30 - well the shell i'm going to refer to it
03:32 - now from now on as this shell
03:35 - one of the main things anyone want to do
03:37 - with the shell
03:39 - is navigate the file system so make move
03:42 - delete files it's you know etc
03:45 - rename them yeah
03:46 - things like that
03:48 - and i'm going to show you
03:50 - that in this video
03:53 - okay
03:54 - so
03:55 - i'll navigate in the file system you're
03:57 - going to need to know
03:59 - a few key commands which
04:01 - are probably the most
04:03 - the main command she'll need in unix
04:05 - or the shell
04:07 - and the main one probably be ls
04:11 - and ls stands for list
04:14 - the designers for to be you know smart
04:17 - to take out the um
04:19 - unimportant characters from
04:21 - the words the verbs
04:23 - and just make it really short two
04:26 - letters ls
04:28 - to um list files in the directory
04:31 - and that's fine i guess it's a bit
04:34 - confusing at first but once you get used
04:35 - to it ls is better you can type it
04:37 - quicker it's shorter
04:40 - yeah so alice use ls to um
04:44 - to
04:46 - view the um
04:47 - files in the directory to list them
04:50 - in a ascending order from a to z
04:56 - okay so ls list the um
04:59 - files
05:01 - in a directory
05:03 - and you can see which directory you're
05:05 - in
05:06 - and when i say directory i mean like the
05:08 - path the file system path of like where
05:11 - you are so in terms of windows you have
05:13 - the c drive you could have your my
05:15 - documents folder
05:17 - in linux i have my home folder which i'm
05:19 - currently in on mac it's the same
05:22 - so and you can see what current director
05:24 - you're in on the unix shell
05:27 - by typing the pwd command
05:30 - and this basically stands for personal
05:33 - work
05:34 - directory
05:36 - so the current directory you're working
05:38 - in
05:38 - so let's quickly clear that so i'll type
05:40 - in pwd
05:42 - and it tells me i'm in home michael and
05:44 - that's the directory the first folder is
05:47 - called home
05:49 - and in the home folder i'm in michael
05:52 - and this is the directory i'm in
05:55 - so let's say i want to change
05:56 - directories
05:58 - so i want to change the current
06:00 - place i'm in so
06:02 - well i have to go somewhere so could
06:04 - quickly hit ls to see where i can go
06:08 - and
06:09 - i guess i'll go to this workspace folder
06:11 - i can tell it's a directory because it's
06:13 - in blue or green
06:15 - outside the blue in this case that's
06:17 - because it's
06:18 - uh one of the attributes of it but
06:21 - anyway
06:23 - uh so i type in cd
06:26 - and this is another new command cd well
06:30 - cd stands for change directory
06:34 - and this command you can change the
06:36 - current directory
06:37 - you're into another so i'm going to type
06:39 - cd and then the name of the directory i
06:41 - want to go to
06:45 - now you notice there's nothing before it
06:47 - you know no path before this workspace
06:49 - name that's because
06:51 - well i'm in this home folder which
06:54 - contains
06:56 - uh the workspace folder so
06:59 - cd workspace will
07:01 - hit enter and
07:04 - type in pwd
07:06 - and look my work to re directory has
07:08 - changed to workspace so i'll type in ls
07:12 - and ls tells me that there's four
07:15 - folders in this workspace folder
07:18 - and it's these four
07:20 - so let's
07:21 - cd again to quadratic one
07:25 - and it's ls
07:27 - okay and i can see more files i can see
07:29 - the program i wrote for android
07:32 - okay
07:33 - so let's say
07:34 - i want i have a file here called my file
07:38 - alright so i can have a look at what's
07:39 - in this my file
07:41 - this is cat command i'll explain it
07:42 - later
07:44 - and i see it's a text file which has
07:46 - this
07:47 - gibberish in it
07:49 - okay well let's say
07:51 - this my file that i've made
07:53 - is in the wrong place
07:55 - i don't want it in this quadratic
07:58 - factorizer folder i want it in the bin
08:01 - folder
08:02 - this here
08:03 - so
08:05 - what i want to do is move this file into
08:07 - here
08:08 - and in linux to do this
08:10 - use
08:11 - move command or it's typed mv
08:15 - so mv is just move
08:20 - and we type mv and then the file we want
08:24 - to move which is called my file in this
08:26 - case
08:27 - and then directory where you want to
08:28 - move it to so bin
08:33 - okay and then we'll type ls again
08:35 - and we see there's no my file anymore in
08:37 - this
08:39 - directory and we'll type ls bin
08:41 - and you see what i'm doing here
08:44 - before i haven't really typed anything
08:45 - after ls
08:47 - but i'm typing bin after ls now
08:50 - so what this is going to do is it's
08:51 - going to look in the bin folder
08:54 - and list the files in that it's not
08:56 - actually going to list the files in the
08:58 - current one rather than the one i've
09:00 - typed okay so you can specify which
09:03 - directory to list files in
09:05 - alright so i hit enter and i see that my
09:08 - file
09:09 - is in the right one
09:12 - so if sake of this i'm going to sit into
09:14 - the bin
09:15 - okay
09:16 - now i'm in it
09:18 - okay so
09:20 - let's say i accidentally misbuilt my
09:22 - file
09:23 - let's say i want to call it something
09:25 - different like
09:26 - your file
09:27 - so
09:29 - i'm going to use the same command i've
09:30 - already told you it's called move
09:33 - okay so this is the rename command
09:35 - realistically
09:37 - you're essentially moving this my file
09:39 - to a new file
09:41 - see what i mean
09:43 - with a different name
09:45 - because well when you move something you
09:46 - don't actually copy it over and delete
09:48 - you just move it
09:50 - you're not really copying
09:52 - so this is the same for renaming you're
09:54 - not actually copying it
09:56 - over and then renaming it now you're
09:59 - just renaming it so
10:02 - that makes sense to you sorry thanks so
10:04 - much if you type mv and the original
10:06 - file
10:08 - and then the new files
10:11 - and there and type ls to see what's done
10:14 - and look no more my file but this is
10:16 - your file
10:18 - and we can cut it again so it's still
10:20 - the same thing
10:22 - and yep it's still the same thing
10:25 - all right let's just say now that we
10:26 - don't want this file at all it's
10:28 - absolutely useless we want to delete it
10:31 - well to delete a file in unix we type
10:33 - the
10:34 - remove command
10:36 - and it's
10:37 - referred to as rn
10:40 - rm stands for remove of course
10:42 - so we'll type rm
10:44 - your file
10:46 - and we'll type ls and it's completely
10:48 - gone it's deleted it's no longer on my
10:51 - file system
10:53 - and
10:54 - there's a quick shortcut that
10:56 - you may find useful
10:59 - uh let's say i want to go back i'm in
11:01 - this crazy directory
11:03 - i want to go back to my home folder
11:06 - well to go back here without um typing
11:09 - cd
11:10 - oh michael i don't want to type this is
11:12 - too long
11:13 - i just type in cd then tilde the
11:15 - squiggly line
11:17 - and in
11:19 - unix or
11:20 - the shell
11:22 - the
11:23 - tilde is a shortcut
11:25 - for
11:26 - in
11:27 - for the home directory so if i type
11:30 - you'll see that um
11:32 - the tilde is uh
11:34 - the home path and yeah for the sake of
11:37 - it echo the echo command
11:40 - echoes whatever you just um
11:42 - wrote to the shirt command line so hello
11:46 - and it's gonna go back
11:49 - all right so anyway i'm gonna cd
11:52 - tilde
11:53 - which is
11:54 - the equivalent of cd home michael
11:58 - and i'm going to see my work directory
12:00 - and it's
12:01 - in home
12:03 - let's type ls here okay
12:07 - now what i've showed you is actually
12:08 - rather simplistic
12:10 - it's really simple commands
12:13 - and command arguments as well
12:15 - but let's say
12:17 - i'll show you some more advanced
12:19 - uh examples
12:21 - now actually i'll show you some now
12:25 - actually now i'll show you how to find
12:26 - the disk space of file users so let's
12:29 - say i have this linux mint
12:31 - 10 gnome cdr iso this disk image in my
12:35 - home directory
12:37 - and i've really
12:38 - recently noticed my disk is running out
12:40 - of hard disk space and i want to see how
12:42 - much space this is using
12:46 - so to do this i'll type in
12:48 - d u
12:50 - and what d u stands for is disk usage
12:54 - so i'll type in du
12:56 - and linux mint
12:58 - 10 you know cd iso
13:00 - and it gives me this line
13:04 - 716060 and the file name
13:08 - this is how much disk space um this file
13:10 - is uh taking on the hard drive
13:13 - and this is in kilobytes so this is six
13:15 - hund seven thousand
13:17 - seven hundred thousand
13:19 - six seven hundred and sixteen thousand
13:21 - sorry kilobytes which is 716 megabytes
13:26 - of disk space which
13:28 - yep it's reasonable i'm not going to
13:29 - delete it
13:31 - um
13:32 - uh what i've just done here is um i've
13:34 - cleared the screen so let's say i have a
13:36 - lot of garbage
13:37 - typed up yep
13:40 - okay so now i want to clear it it's all
13:42 - messy i can have a type clear
13:45 - or
13:46 - i can do a quick shortcut
13:50 - and type control
13:53 - and l
13:57 - yep so ctrl l will clear the screen
14:00 - and leave the current line also will
14:03 - clear
14:04 - all right
14:06 - so let's go down to the more advanced
14:08 - ones
14:09 - so let's say
14:10 - i'm in this folder the root
14:12 - what's called the root folder which is
14:14 - the top directory
14:16 - where the entire file system lives and
14:19 - we can see the home folder that um
14:21 - all my files live in
14:23 - okay so let's say i want to
14:28 - um cd
14:34 - i want to move this file
14:39 - uh one folder one no no not my cd into
14:43 - another folder
14:45 - let's go to
14:46 - workspace
14:48 - let's go back to quad
14:51 - okay let's say i want to move
14:53 - yeah i'll make a new one echo
14:56 - pay no attention to this is just
14:59 - to make an example
15:02 - okay
15:03 - so let's say i want to move this my file
15:06 - into my home folder
15:09 - from
15:12 - the
15:14 - root folder so i'm here and i want this
15:17 - my file
15:18 - into my home directory well to do this
15:21 - i'd use the move command wouldn't i yep
15:22 - so i'll type move
15:24 - and ultimately i'm going to have to type
15:26 - all this
15:28 - and
15:31 - you'll notice i'm typing forward slash
15:34 - or you know what tilde is that's a
15:36 - that's the equivalent of this yes is it
15:38 - not
15:39 - or with the equivalent of a view
15:41 - username
15:43 - so i'll type tilde but i'm typing also a
15:45 - forward slash
15:47 - and the forward slash is what you use to
15:49 - represent a folder so a folder path
15:52 - so in this case
15:53 - bin
15:55 - folder and it'll tell me it's a
15:57 - directory
15:59 - all right so
16:01 - if i type then
16:02 - you know
16:04 - yeah see
16:06 - i need the forward slash so it's a
16:07 - directory so anyway
16:10 - where was i i was
16:12 - i was doing
16:15 - uh
16:17 - that's right moving the my file
16:19 - to my home directory so i type mbtilde
16:23 - which is the same as homemichael
16:25 - forward slash
16:27 - and wolves it was workspace was it not
16:31 - and it was quadratic factorizer and
16:34 - it was my file yes
16:36 - and now space
16:38 - so
16:40 - new
16:41 - parameter
16:43 - tilde
16:44 - or yeah i'm just going to write home
16:46 - icon
16:48 - normally i wouldn't write this i just
16:50 - write tilde but anyway
16:52 - enter
16:53 - so i'm going to look in my home
16:55 - directory and
16:59 - well you see i can scroll in this
17:02 - but on some computers where it's
17:04 - completely a terminal
17:06 - you can't scroll
17:08 - yep so
17:12 - those people they need more
17:14 - to see more uh information on the screen
17:16 - but they don't have the scroll
17:18 - so
17:21 - in order to see my my file folder which
17:23 - i've moved here
17:24 - i'm gonna have to type in
17:26 - a second command so
17:29 - and
17:30 - it's a button under the
17:33 - backspace with a shift so hold shift and
17:35 - the button under the backspace and get
17:36 - this straight line
17:38 - and i'm going to type in less
17:41 - so it's going to shorten the amount
17:43 - of screen
17:44 - i'll explain uh this
17:47 - thing here
17:48 - later and how this works in a different
17:50 - video it's
17:51 - one of the advanced parts of linux but
17:54 - and
17:55 - and this is going to list all the files
17:57 - in the directory
17:59 - part by part so as i hit return the
18:03 - enter key
18:04 - is going to keep displaying it every
18:06 - other line line by line so i'll keep
18:08 - going down to m see if the my file is
18:10 - there
18:12 - and what do you know it's there
18:15 - so i've successfully moved it
18:18 - away
18:19 - so i've seen all i wanted to see so i'll
18:21 - just hit the q button
18:23 - to get out of the less
18:25 - and there we go back to the shell so i
18:27 - can still so i know that my file is uh
18:29 - in this folder
18:32 - right so i've shown moving files i've
18:34 - showed renaming
18:38 - let's get on to
18:42 - paths all right so let's say i'm in
18:45 - here and i want to quickly get to the
18:47 - home directory
18:49 - well that's one up
18:52 - so
18:52 - i type in cd
18:54 - i could type in this
18:56 - or alternatively
18:58 - what um
18:59 - you could do as a shortcut is type in
19:01 - dot
19:03 - and dot
19:04 - will um
19:08 - sorry not dot my bad
19:11 - dot dot
19:12 - and dot well the dot will um
19:16 - represents the current directory you're
19:17 - in it's a current folder that you're
19:20 - currently in but dot dot
19:21 - is its parent folder it's it's
19:25 - the folder that contains it so
19:28 - cd dot dot will give me up one and i'll
19:31 - type in
19:32 - and i'll see i'm in home
19:35 - so let's see this dot
19:37 - okay so let's go down to the dot
19:41 - cd michael
19:45 - let's say i want to type a command
19:48 - and it's going to be deleting that my
19:50 - file
19:51 - well i would have to type dot my file
19:56 - oops sorry my bad
19:59 - rm dot slash my file
20:04 - so this is the current
20:06 - uh directory
20:08 - so these two represent the current
20:10 - directory plus the my file folder
20:13 - well actually you don't actually need
20:14 - this but for some commands
20:18 - uh you do but anyway you're right yeah
20:22 - and it's deleted the my file
20:26 - alternatively you could have that it's
20:27 - equivalent same thing
20:31 - why i showed you this dot slashes
20:33 - because some commands need it
20:36 - and you'll know what
20:38 - as your time progresses
20:40 - an example will be probably this one
20:43 - ascii print i don't know i don't even
20:45 - know what this is but anyway
20:47 - let's just say i have python
20:52 - you're actually never mind i won't even
20:54 - bother with that
20:55 - i have no idea what that is okay so
21:00 - the main reason why anyone would use
21:02 - unix is because
21:04 - it's a lot faster than
21:06 - a
21:07 - typical file manager i mean i could open
21:09 - up
21:10 - one right now
21:12 - and i could see all the files i've been
21:15 - editing
21:17 - perhaps see i can see the workspace
21:19 - folder i can see quadratic so all the
21:21 - stuff i could do it all here
21:23 - but let's say
21:25 - but it's fast because you can do lots of
21:26 - things at once so i can see there's a
21:29 - lot of uh dot c files
21:31 - so
21:32 - c code that i've written
21:35 - over time and let's say i want to
21:37 - organize my directory i want to move all
21:38 - the c files
21:40 - into another folder
21:42 - let's call it c all right so i'll go
21:44 - back to the shell because this is
21:46 - um video on unix after all type control
21:50 - l clear the screen
21:51 - and i want to move all the c files
21:55 - into a directory
22:00 - in home
22:01 - called c
22:03 - so the first thing i'm going to have to
22:04 - do
22:05 - is create a directory
22:07 - and to make a directory in
22:10 - the shell you type mk
22:13 - dir
22:15 - and what this stands for is quite
22:16 - obvious make directory
22:20 - all right so we type mk
22:21 - dr c
22:23 - and this will make a c directory in the
22:26 - current directory which is
22:28 - home so i'm gonna type make directory c
22:33 - now if i type ls
22:35 - and then
22:37 - c
22:39 - whoops oh crazy stuff crazy stuff
22:43 - ah ls
22:45 - star c
22:52 - okay so my type ls
22:54 - whoops i'll type in ls
22:57 - ls
22:58 - and we'll see there's a c folder right
23:00 - here
23:02 - oh it's apparently two folders
23:06 - okay so i'll type in cd now i'm gonna go
23:08 - to the uh c folder i made
23:12 - i have a look at it
23:13 - nothing's in it it's a blank
23:16 - folder okay so
23:18 - i'm gonna go back
23:21 - back to home and i want to move all
23:23 - these dot c files into this c folder
23:26 - well obviously i would use the c
23:28 - commands
23:29 - the move command sorry
23:31 - and now here's something new i'm going
23:34 - to type in asterisks
23:36 - and what this asterisk is is it's a wild
23:38 - card or what's referred as a wildcard
23:41 - and basically
23:43 - the star references represents
23:46 - every possible text you could make
23:49 - for example
23:51 - you could write my name michael as star
23:54 - l
23:56 - these are equivalent
23:59 - or
24:00 - mike star l or
24:03 - mike starr
24:05 - ayo
24:06 - but it wouldn't be
24:08 - um
24:09 - mic star
24:11 - l
24:12 - a l star
24:16 - this would not be equivalent
24:19 - the equivalent all right but these two
24:22 - are
24:23 - so you see what i mean
24:25 - in this case the star represents ae
24:29 - or in this case it represents my cat
24:33 - so the staff character represents text
24:37 - that you don't actually know
24:40 - okay so
24:42 - i'm going to type move and then star
24:44 - character
24:45 - dot c
24:46 - so in this case it's going to reference
24:48 - every possible
24:50 - file name in this directory
24:53 - so it's going to
24:54 - represent echo
24:56 - but this dot c
24:57 - well that's going to pinpoint it down to
24:59 - a few
25:00 - so it will only reference
25:02 - these
25:04 - it won't reference this because it's got
25:05 - some text after it
25:07 - so it will only reference
25:10 - this file
25:14 - this file
25:17 - and this file
25:18 - but it won't reference any other really
25:22 - because they're not dot c and they're
25:24 - just finished suddenly i mean this case
25:26 - there's some text after it so you won't
25:29 - reference it
25:30 - all right so we're moving all the star
25:32 - dot c's
25:33 - to the c directory
25:36 - yes write it as dot c
25:39 - okay
25:40 - and
25:41 - hit enter it's done it all let's have a
25:43 - look at it
25:46 - there we go
25:47 - all of our dot c code
25:49 - is moved into
25:52 - this
25:53 - c
25:54 - folder just like that
25:57 - so
25:58 - and in one command relatively simple
26:03 - i've moved all my c folders files into
26:06 - this folder
26:08 - easy right okay
26:14 - now let's say i want to
26:17 - copy all those files that i've just
26:19 - moved
26:23 - all these files i want just moved into
26:25 - my
26:28 - uh into a new folder okay i'll make a
26:30 - new folder right now
26:38 - so i want a clone of it so i want all
26:40 - these files again in this new folder
26:42 - because currently
26:44 - there's nothing in it so i'll go back a
26:46 - bit
26:47 - ls
26:48 - see that
26:49 - i'm in my
26:51 - c folder
26:53 - so what i type in is cp so
26:56 - whether i showed you cpu
26:58 - or if i haven't cp stands for copy
27:01 - and what it does is it copies files okay
27:04 - so cp
27:05 - i'm just gonna use star so that's every
27:07 - single possible file in this directory
27:11 - so it's gonna move absolutely everything
27:13 - into
27:14 - new folder
27:20 - hit enter
27:29 - and there we go
27:32 - what do you know it's decided to skip
27:34 - emitting directory now that's basically
27:37 - jargon for skipping this directory
27:39 - not going to copy it
27:41 - okay so that's how you copy files with
27:43 - the asterisks
27:46 - then so let's say i want to find the
27:48 - files
27:50 - i'm at my shell
27:52 - i've been working on some code and now
27:54 - i've lost it i want to find it i forgot
27:57 - the directories in so i type the find
27:58 - command
27:59 - now it's not called fnd
28:01 - it's not called
28:03 - fin
28:04 - it's called find okay you can't really
28:06 - shorten it
28:08 - fd it could be fd but
28:11 - you don't know it's just fine okay so
28:16 - now this find command has parameters on
28:18 - it
28:18 - as actually has a lot
28:21 - and i can't actually sit here and
28:22 - explain every single one of them to you
28:24 - because that would take
28:25 - a ridiculous amount of time
28:28 - so what you do is you type dash dash
28:30 - help
28:32 - and this is a parameter to basically
28:33 - every unix command
28:36 - and hitting enter is going to print out
28:38 - a bunch of information
28:40 - so
28:42 - i can see now that there's more
28:43 - information that they can fit into my
28:44 - screen so i'm going to use less
28:47 - or i basically just did there is i hit
28:48 - the up
28:50 - button
28:51 - and that's a shortcut to getting to what
28:53 - you've just typed what you've just
28:55 - entered
28:56 - so here i can browse through all the
28:58 - commands i've typed today
29:00 - or in a period of time
29:03 - okay so i'm going to hit up once help
29:07 - straight line less
29:09 - there now i'm going to see all the
29:10 - output that the help command gives you
29:14 - like so
29:16 - okay
29:17 - so
29:18 - i'm going to look at this what what do i
29:20 - need
29:20 - [Music]
29:22 - what do i need
29:25 - it's all crazy
29:27 - this doesn't make any sense to me so in
29:29 - order to use this i'm going to type man
29:31 - find
29:33 - now man is a very useful
29:36 - command and what it basically stands for
29:38 - is manual
29:39 - so man will give you the manual for find
29:42 - man will not work for actually
29:44 - everything
29:45 - a lot of commands won't have a man
29:46 - manual
29:48 - but
29:49 - basically all unix commands do but once
29:51 - you download the internet they probably
29:53 - won't have one
29:54 - they could but they probably won't so
29:56 - man find it's going to give us a manual
29:59 - it gives us help here on the bottom
30:02 - we can have it
30:04 - press h for help more help
30:06 - or here we can use arrow keys to
30:08 - navigate
30:11 - and this gives us a brilliant
30:12 - description of the man find command
30:16 - which is absolutely excellent you can
30:18 - become an expert and find with this
30:21 - here's a parameters you can
30:24 - all information all this text
30:27 - describing just about everything
30:31 - descriptions of every little parameter
30:33 - you have see if we can have one to turn
30:35 - off warning messages
30:37 - here
30:38 - well i'm already quite familiar with
30:40 - find
30:41 - and so i'm going to type find i name
30:44 - so it's going to find all files with
30:46 - this name
30:48 - and i'm going to type star
30:49 - dot c all my c files
30:52 - type
30:53 - i want to only want files so type f
30:57 - and
30:59 - that's all i realistically need okay
31:02 - enter
31:04 - and it's going to go and find print
31:06 - every single c file in my directory
31:10 - simple enough i'll type it again for a
31:12 - different type i'll call it apk
31:16 - and this prints every single apk file i
31:19 - have in my home folder or at least my
31:21 - current directory
31:23 - and you see these dot these file paths
31:26 - well these are actual file paths
31:28 - relative to what directory you're in now
31:30 - so if it's like this here
31:34 - if i were to do it in this command
31:40 - now what's happening now is searching my
31:43 - entire file system
31:45 - for apk files
31:49 - looking looking
31:52 - i literally have hun tens of thousands
31:54 - of files in this hard drive i'll take
31:56 - ages to search it so a quick shortcut
31:59 - there
32:00 - this third parameter
32:02 - so it makes it so it only searches the
32:03 - home folder
32:06 - path must proceed home
32:13 - oh that's right
32:15 - you have to type it here i think
32:18 - whoops
32:22 - and there we go and we see this path
32:25 - is different to this path
32:30 - because they're relative they're
32:31 - relative to what directory you're in
32:34 - okay
32:36 - so
32:36 - let's see
32:38 - want to
32:41 - what to do
32:42 - clear the screen
32:45 - let's see i've covered quite a bit
32:47 - i've probably gone longer than i should
32:50 - have but
32:52 - hey it's it's unix
32:54 - there's a lot to cover
32:57 - oh man command so
32:59 - basically every command i've said
33:00 - there's a manual form
33:04 - and you can get a good description of
33:06 - about everything
33:08 - normally i don't actually go in the
33:09 - manual i just type in
33:12 - help
33:13 - and this will give me a help for
33:14 - everything
33:16 - so it gives you a brief description
33:18 - i want to copy files by force i want to
33:20 - copy a directory now no distance
33:23 - directory
33:26 - and
33:27 - yeah things like that
33:30 - so you know i'll do an example i want to
33:31 - copy directory so let's see what do i
33:34 - have now
33:35 - i'm in my root folder so i'll go home
33:39 - ls
33:41 - okay let's move this c folder
33:44 - to
33:45 - workspace okay
33:47 - so to do this i'm going to type you know
33:49 - not move let's copy it okay so copy so
33:51 - i'll type cp
33:54 - you know i'm just going to show an
33:55 - example of what a typical person
33:57 - who's trying to copy would do so
34:00 - c and then workspace
34:02 - this is probably what you do right let's
34:04 - hit enter
34:05 - and it tells me it's a directory it's
34:07 - not going to copy the directory
34:10 - so in order to make to do it let's look
34:12 - at the help all right so
34:14 - this is what you probably should do when
34:16 - trying to do this and it doesn't work
34:18 - look at the help page okay and we see
34:20 - that
34:22 - you um
34:25 - we need to
34:28 - read these
34:35 - keep going down down
34:37 - here we go
34:38 - look at this one
34:40 - ah recursive
34:42 - copy directory
34:44 - copy your directories recursively
34:47 - i think that's the one we're missing
34:50 - ah
34:51 - here we go
34:52 - v verbose this actually doesn't really
34:55 - affect anything it just um
34:58 - tells the command to print what it's
35:00 - doing i always like to do it
35:02 - when i'm
35:04 - doing it okay so i'm going to type cp
35:08 - dash
35:10 - r for recursive
35:12 - dash v
35:15 - now these dashes these are what you um
35:17 - type in order to give a parameters to cp
35:21 - and a quick hint is you don't actually
35:23 - have to type the second dash you can
35:24 - just type rv
35:26 - but this is only for some applications
35:28 - so
35:29 - generally i just type out like this
35:32 - and then we'll type c and then workspace
35:37 - now you see it's printed up a ton of
35:38 - stuff
35:39 - just a ton of information too much
35:41 - information this is because i typed v
35:44 - verbose so it mostly told me everything
35:47 - that's happening
35:48 - so let's have a look at workspace
35:51 - and we see there's a c file so let's
35:54 - let's see what's in c and all this stuff
35:58 - okay
36:02 - so let's say
36:06 - i have a command
36:08 - i've written up my own command because
36:10 - i'm a programmer so let's say i have one
36:13 - let's quickly compile this code
36:16 - don't really pay attention to this
36:20 - and
36:21 - i have my command called gcd
36:24 - let's say i want to execute this command
36:26 - in this directory well you'd guess i
36:29 - typed gcd right this is what you assume
36:31 - what happened well if i hit enter
36:33 - it's not going to work
36:36 - this is because when you type gcd
36:39 - it searches the
36:41 - bin folder
36:42 - of the root directory so
36:46 - this folder and
36:48 - this folder and
36:50 - this folder
36:52 - it searches these three directories
36:55 - for uh gcd
36:57 - and it doesn't find it so it tells me
36:59 - command not found
37:01 - well
37:02 - obviously it's not found because the
37:04 - executables in this directory it's not
37:07 - in any of those three so in order to
37:09 - execute this command i'm gonna have to
37:11 - specify that the command is in this
37:13 - directory if the dot slash remember this
37:16 - well anyway
37:17 - dot gcd
37:19 - hitting enter
37:21 - and the command is executing
37:23 - this is the
37:25 - program i wrote
37:27 - and
37:28 - yeah
37:30 - and yeah so that's basically it
37:34 - yeah i have no idea how long this video
37:36 - is going for
37:37 - but
37:38 - i think it's enough to cover uh
37:41 - file moving
37:43 - and stuff
37:44 - this is probably too long actually
37:46 - let me just look at this
37:48 - you see here there's a unique shell as
37:50 - well that's what i'm using to record
37:53 - my screen
37:55 - looking here it tells me
37:58 - it's a whole gigabyte wow
38:01 - doesn't actually tell me how long it is
38:02 - but oh here we go 35 minutes
38:06 - wow
38:07 - long video i'm gonna end it now okay
38:10 - goodbye i'll make another a few more
38:13 - videos on unix
38:14 - see you in those videos bye
38:19 - okay so hello and welcome to my uh
38:22 - second video on unix
38:25 - and just watching over the first one i
38:27 - noticed
38:28 - a few factual errors in the video
38:32 - and so a quick google search when i
38:34 - noticed some after i did a quick google
38:36 - search on unix and i got to this site
38:38 - excellent site wonderful site
38:41 - freeengineers.org forward slash learn
38:43 - next yeah blah blah blah in the
38:45 - description box below
38:47 - and it's basically got all this like
38:49 - factual information you know just
38:51 - syntax and stuff for unix commands
38:54 - and it's just great it's condensed into
38:56 - one quick little page and you can
39:00 - probably go through in well 10 minutes
39:03 - and i do recommend you uh get on here
39:05 - because
39:06 - not everything i say is maybe the best
39:08 - way it's done
39:10 - and you're probably the best teacher for
39:13 - yourself because well yeah
39:16 - and seeing a few things i got wrong or
39:19 - not
39:20 - as correct be like
39:22 - cd doesn't stand for current direct
39:24 - change directory stands for change
39:26 - current directory which i thought was
39:29 - somewhat odd ccd
39:31 - yeah
39:32 - and pwd stands for present work
39:36 - directory
39:37 - which makes a lot more sense
39:40 - you know what i said and also looking at
39:42 - this
39:43 - you can just type cd to get to your home
39:45 - directory so for example
39:47 - i'm here in my home directory now but
39:49 - i'll go to my documents
39:51 - and instead of typing this
39:53 - i could just type this i honestly didn't
39:56 - know that
39:57 - until well that quick google search
40:00 - so yeah you should actually go out and
40:03 - try find information on unix yourself
40:05 - because well
40:06 - not everything people tell you is the
40:09 - perfect way
40:11 - okay so i'm looking at this
40:13 - i'm going to use this guide now
40:15 - to uh
40:17 - to explain let's see um
40:19 - i think today i'm going to cover
40:21 - permissions
40:22 - file permissions and uh
40:26 - let's see and maybe this as well moving
40:29 - renaming and copying files
40:33 - okay so
40:34 - permissions permissions here we go
40:37 - in our unix well we have
40:40 - just like every other real
40:43 - file system
40:44 - or whatever we have our permissions for
40:47 - files
40:48 - so for example if we like download a
40:50 - file of the internet we might not want
40:52 - it to be executable
40:54 - we don't we might not want the uh
40:56 - person to actually physically be able to
40:59 - execute the file because
41:01 - well it might be dangerous it might be a
41:02 - virus it might be malware something like
41:04 - that
41:05 - so
41:07 - there's an executable commission which
41:09 - this x represents
41:12 - and
41:14 - what the x represents and yeah i do
41:16 - believe
41:18 - and uh you may also want to keep files
41:21 - private for example there's multiple
41:23 - users on your computer
41:24 - you might just want
41:26 - the cliff user to be able to read it
41:30 - rather than the whole
41:32 - system
41:34 - so any user on the phone
41:37 - so
41:39 - permissions
41:40 - also you might only want a file to be
41:42 - read only you might not want anyone to
41:44 - write to the file
41:47 - if it's like a some sort of special
41:52 - i don't know whatever
41:53 - so
41:55 - let's see
41:57 - let's do examples shall we so i'm in my
41:59 - home directory you can see that and
42:03 - let's say i have a new file let's
42:06 - yeah i'll make a new one
42:08 - and i want
42:10 - oops we got a cd to test okay so let's
42:13 - clear that
42:14 - so
42:15 - i don't have any files in here
42:18 - you know i think i'll i'll do this one
42:20 - first
42:21 - moving renaming copying no not sorry
42:24 - editing viewing
42:26 - files so with this i'll create some
42:28 - files and then i'll modify the
42:29 - permissions on them
42:31 - all right
42:32 - so let's see here
42:35 - in unix
42:37 - you can do uh
42:40 - there used to be a editor called pico
42:42 - which was proprietary
42:45 - it had a private
42:48 - owner or entity whatever
42:50 - so we couldn't actually be included in
42:52 - the uh
42:53 - the public gnu one
42:56 - so that's a make a clone of it and they
42:57 - made a clone called nano
43:00 - so you might get the uh
43:01 - the naming convention
43:03 - here
43:04 - so
43:05 - with nano you just type nano plus the
43:08 - file name that you want to edit so i'm
43:10 - going to call it a file
43:12 - okay so nano a file and it'll bring me
43:15 - to this little editor
43:16 - so
43:18 - here i can just write text it's
43:20 - updates live
43:23 - and you can do multiple lines whatever
43:24 - you can hit enter
43:26 - and
43:27 - it behaves just like a normal text
43:29 - editor would except without a mouse
43:32 - but that's fine because you have the
43:33 - arrow keys to navigate and
43:35 - well it says all right
43:37 - and now it's quickly out of it i click
43:39 - control x in the menu below and that
43:41 - gives you what you can do
43:43 - and this little up thing stands for
43:45 - control so control x bring it to a new
43:48 - menu do i want to save
43:50 - yes i want to save the buffer so i hit y
43:53 - what file do i want to call it name
43:56 - a files fine there hitting ls i see that
44:00 - a file
44:01 - is there okay
44:04 - and
44:05 - let's just say i just cd to this
44:07 - directory i see there's a file called a
44:09 - file let's pretend i don't know what's
44:11 - in it i want to see what's in it was a
44:12 - command called cat
44:14 - now cat
44:16 - like this file thing says
44:18 - will dump a file to the screen in ascii
44:22 - so that means is it'll print out what's
44:24 - in the file
44:25 - in the ascii uh
44:28 - system standard
44:30 - so
44:32 - cat
44:33 - a file now this is written in nasty text
44:35 - which means like the 128 letters
44:39 - numbers in the table i don't know how to
44:41 - describe it
44:42 - and we see exactly what's in the file
44:45 - this is what i wrote down in uh
44:48 - and cat will print it out to the screen
44:51 - now alternatively let's say the file's
44:53 - really long
44:55 - so
44:55 - let's make a new one
44:58 - see here where can i go again let's just
45:00 - go here
45:06 - so i got this file
45:08 - and you see it just a whole
45:10 - bunch of information has come out onto
45:13 - the screen just print it out
45:16 - but
45:17 - let's say
45:18 - i want to see the beginning of it i
45:19 - don't want to have to retype it and and
45:21 - do this
45:23 - another i only want to see this
45:25 - beginning part of it
45:27 - well you can do that and
45:29 - as a file the command called head
45:33 - and head will give you what's referred
45:35 - to as a head of the file
45:37 - and by that i mean the beginning of it
45:39 - so head file log.txt will print out the
45:42 - beginning
45:43 - bit of text
45:47 - oh that's actually quite a lot
45:51 - i don't know what's on it's just this
45:52 - part
45:53 - okay
45:54 - so it's printed out the beginning part
45:55 - of it
45:56 - and there is a
45:58 - another command that it's just like this
46:00 - it's called tail and we'll do the
46:02 - opposite it prints at the end of it
46:05 - so i'll just quickly type that
46:07 - and it gives me the end
46:09 - the last few lines to the file
46:13 - and let's see the uh help we might be
46:15 - able to select how much
46:17 - line do we want
46:19 - yeah here we go
46:20 - hitting n we can uh
46:22 - specify how much lines the defaults 10
46:26 - okay
46:28 - all right
46:29 - so let's see here
46:32 - let's see what else is there everyone
46:34 - else
46:35 - okay so head up yeah see look
46:38 - n will give us the amount of numbers
46:42 - all right
46:43 - uh
46:44 - yeah you could use these are other
46:46 - editors
46:48 - vi and emacs
46:51 - and vi is just a crazy editor
46:55 - it's just really i've no idea how to use
46:58 - it
46:58 - i mean i couldn't care less about it
47:00 - actually
47:01 - i'm sure if you don't do a quick google
47:03 - search or a youtube search you'll find a
47:04 - tutorial on it i'm not even going to go
47:06 - on this it's just i don't see the point
47:10 - it's ancient
47:11 - emacs uh well i could say the same but
47:14 - i do see quite a lot of people still
47:16 - using it
47:19 - i don't even have emacs on my system
47:21 - okay
47:22 - i'm sure i have vi i think everyone has
47:24 - vi
47:24 - and you can just see from this i don't
47:26 - even know what's going on
47:30 - i don't know how to save it just get out
47:32 - of it
47:35 - i don't even know how to get out of it
47:37 - okay
47:38 - that's terrible
47:40 - there we go that's a fourth closet
47:43 - all right
47:44 - so
47:46 - basically if i ever wanted an advanced
47:47 - editor i wouldn't go vi i just get like
47:50 - a graphical one like really
47:53 - all right so we'll zoom
47:56 - less yes you can write less and instead
47:58 - of using it
47:59 - like this
48:02 - like uh whatever and then doing that you
48:04 - could just write less and then the file
48:06 - name so
48:08 - far
48:09 - log
48:10 - and we can do that and it's the same
48:12 - thing as before we hit q again to leave
48:14 - it
48:15 - okay
48:16 - so that's editing
48:19 - viewing and editing files so to view
48:21 - your type cat
48:22 - to edit use an editor to um
48:27 - to well uh what's it called
48:29 - edit the file so let's go back to our
48:31 - test directory
48:34 - all right so if you're seeing this
48:36 - all right so if you're seeing this
48:38 - uh what's a god i've decided that after
48:41 - just doing the permissions for uh
48:44 - part of the video
48:45 - it got way too complicated i didn't do
48:48 - it very well so i'm i'm gonna
48:50 - cut the permissions part out of this
48:53 - tutorial theory it's already getting
48:54 - long enough anyway
48:56 - i'll come back to file permissions
48:59 - in another video okay so
49:02 - random
49:04 - see you then