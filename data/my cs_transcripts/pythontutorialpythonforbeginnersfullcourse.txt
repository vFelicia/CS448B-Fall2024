00:05 - hello everybody and welcome to chapter
00:07 - one of python for everybody i'm charles
00:08 - severance i'm your instructor and uh
00:11 - i welcome you to this class the basic
00:13 - goal of this class is to teach
00:15 - everybody how to program regardless of
00:17 - your background you don't have to be a
00:19 - math whiz you don't have to be
00:21 - a computer expert no matter how old you
00:25 - are or what your background is we want
00:26 - to teach you how to program so welcome
00:28 - to the
00:28 - course welcome to chapter one so
00:33 - the first thing to understand is that um
00:36 - the purpose to learn to program is
00:38 - because computers want to do things for
00:40 - us
00:40 - they are built and created and designed
00:43 - and their hardware is set up
00:46 - so that they basically ask us
00:49 - what do you want to do next if you grab
00:51 - your phone
00:55 - your phone sort of does nothing until
00:59 - you tell it what to do it waits for you
01:02 - and it's just waiting for you and all
01:03 - the hardware
01:04 - computer technology around you is
01:06 - generally waiting for you
01:08 - and we can use this for useful things we
01:11 - could
01:12 - play video games we could uh have it
01:15 - help
01:16 - navigate for our cars someday we might
01:18 - even have self-driving cars
01:20 - and it's really in a sense
01:23 - in my mind silly if you
01:26 - spend your whole life not really
01:28 - understanding this technology and
01:30 - and i think it's important that we learn
01:32 - to tell
01:33 - these computers what to do rather than
01:34 - just let them uh
01:36 - increasingly control our lives and so
01:40 - as we'll see computers aren't very smart
01:42 - on their own we humans are the ones that
01:43 - imbue them with knowledge
01:45 - and but we need to learn to speak their
01:47 - language it is much easier for us to
01:49 - learn
01:50 - to speak their language than it is for
01:51 - them to learn to speak our language
01:53 - although
01:54 - with these cell phones we're starting to
01:56 - see little bits where they can begin to
01:58 - understand
01:59 - but you would be amazed at the 40 or 50
02:02 - years that it takes
02:03 - has taken us to understand
02:06 - how to to build programs to to begin to
02:08 - understand
02:09 - so i'm bringing you into something
02:12 - where you are going to learn the ways of
02:15 - programming and the
02:16 - ways of the computer because it's easier
02:18 - to teach you how to program than it is
02:20 - to teach
02:21 - this how to work in your world even
02:23 - though ultimately the goal is
02:25 - to get this to to do work for you
02:29 - so part of what i'm trying to do is move
02:30 - you from a user perspective where you
02:32 - just look at the computer as
02:34 - something that someone else has
02:36 - constructed
02:37 - and you are the user of to the point
02:40 - where you construct new things now the
02:42 - first kinds of things that you're going
02:43 - to construct are actually things to
02:44 - solve your own problems
02:46 - and it's a very popular now to work on
02:49 - data
02:49 - and python is an excellent programming
02:51 - language for data data mining and data
02:53 - analysis and that's a lot of what we're
02:55 - going to do in this course although
02:56 - really it's a gateway to all kinds of
02:58 - things like
02:59 - you know artificial intelligence or
03:01 - gaming or navigation or mobile
03:03 - applications or entertainment
03:05 - all kinds of things but first you have
03:07 - to learn to program we have to move
03:09 - from using the computer as a tool to
03:11 - using the tools within the computer that
03:13 - allow us
03:14 - to change how the computer sees the
03:16 - world
03:18 - so there's a couple of reasons that you
03:20 - might want to be a programmer some of
03:22 - you
03:22 - are looking to improve your career to be
03:25 - paid to work on programming i've been a
03:27 - paid programmer most of my life
03:29 - and i like it it's a good job you don't
03:32 - have to
03:34 - stand in the mud you don't have to lift
03:37 - things you have to use your brain
03:39 - and um i'll just say that it is been
03:41 - nice for my career
03:42 - to not be exposed to the elements but to
03:45 - be able to work often wherever i want
03:48 - but that's actually our secondary goal
03:50 - our first goal is to get you to write
03:52 - programs that solve problems that you
03:53 - have to solve maybe you have a job as an
03:55 - accountant
03:56 - or a lawyer or something else and
04:00 - maybe you run across some data maybe
04:02 - there's some system that logs your time
04:04 - and it's not quite giving the report
04:06 - that you want to give and so you say
04:07 - could i just grab the log data myself
04:09 - and
04:10 - and write a program to do some analysis
04:12 - to say oh what's the average
04:14 - this versus that or the average of some
04:16 - other thing
04:17 - right and so that's the basic idea that
04:21 - you'll you'll
04:22 - initially use computers to serve your
04:24 - own ends
04:26 - that makes it a lot easier to write
04:27 - programs because you don't have to worry
04:28 - about
04:29 - you know a million users using your
04:30 - software if it works for you
04:32 - then we're happy and so it takes a
04:35 - little more training to write software
04:36 - for other people or for thousands and
04:38 - thousands
04:39 - of other people and so part of what i
04:42 - want to do is i want to
04:44 - change your perspective you know you
04:47 - look at this from the outside and you
04:50 - see it from the outside and you click on
04:52 - things
04:53 - i want to turn this around and i want
04:55 - you to be the person
04:56 - inside this looking out at the world and
04:59 - as a programmer we are
05:01 - making things inside these computers
05:04 - for the world and so we want to pull you
05:07 - into being
05:08 - part of this we want you inside this or
05:11 - thinking
05:12 - inside this and what you learn
05:15 - is that if you're inside this computer
05:18 - and you are taking your instructions to
05:20 - build programs to be used
05:22 - by the human oops almost dropped that
05:25 - the human
05:26 - outside the computer you have things
05:28 - that you need to take advantage of
05:30 - there's things like the central
05:31 - processing unit the memory of this
05:33 - system the network connection of this
05:34 - system the
05:35 - the disk drive or permanent storage on
05:37 - this system and as a programmer
05:40 - you are kind of mediating between all
05:42 - those internal resources that this has
05:44 - that are not very smart
05:46 - but highly powerful and mediating with
05:48 - what that user wants right and so
05:50 - we take the end user and we programmers
05:53 - we serve the end user
05:54 - but the computer serves us so together
05:57 - between us and all the computers
05:59 - resources we can serve the needs
06:02 - of the end user and we do this by
06:05 - writing
06:06 - code or programming okay
06:09 - and what is that well programming is a
06:12 - sequence of instructions where we are
06:15 - giving instructions to the resources
06:16 - inside the computer
06:18 - in a way to accomplish the goals of the
06:19 - end user and remember
06:21 - sometimes we are our own end user it's
06:24 - not just
06:26 - it's not just you know the uh you're not
06:28 - always doing a startup you're not always
06:30 - writing a mobile gaming system
06:32 - uh sometimes you're writing something
06:33 - for yourself but that's okay
06:38 - so sometimes you're writing something to
06:40 - solve a problem
06:41 - you're like crafting you're you're doing
06:43 - something that you could do by hand or
06:44 - manually
06:46 - and you're you're making some clever
06:47 - little 25 or 100 line program
06:50 - and uh you're putting that in other
06:53 - times like when i work on
06:55 - the open source learning management
06:56 - system sakai it is
06:58 - my creativity i've got an idea and i
07:01 - want to share it with
07:02 - a million users and so i write my code
07:04 - to
07:05 - for an external audience and so code is
07:07 - that sequence of instructions that the
07:09 - computer itself
07:10 - doesn't know how to hand a roster out
07:13 - but
07:14 - i can write code that will hand a roster
07:16 - out by looking at the data that's inside
07:18 - this computer inside this application
07:21 - and so if you think about
07:22 - programs we have programs for computers
07:25 - and programs for humans
07:27 - and a number of years ago now i'm sooner
07:30 - or later this will be me showing my age
07:33 - this is an example of the macarena and
07:35 - the macarena is a song that effectively
07:38 - is a sequence of instructions
07:39 - you put your left hand out you put your
07:41 - right hand out you put it on the
07:42 - shoulder
07:43 - you wiggle wiggle wiggle and you spin
07:45 - around and you do things and
07:47 - this um this is a program
07:50 - for people uh and so i want you to take
07:53 - a quick look at this
07:54 - and see if you can find anything wrong
07:57 - with this
07:58 - particular program so look really
08:00 - closely
08:02 - [Music]
08:08 - so i'll show you
08:12 - it's got some typographical errors in it
08:14 - and we as humans
08:15 - are really good at reading or
08:19 - hearing typographical errors and
08:21 - correcting them
08:22 - automatically and instantly and um but
08:25 - computers are not
08:27 - computers are extremely literal
08:30 - if it saw this ham instead of hand
08:34 - it would think what's a ham and why am i
08:37 - going to hit someone in the back of the
08:38 - head with a ham and
08:40 - why would i take my left hand and hit
08:42 - somebody that's you know these are all
08:44 - bad things
08:44 - but the computer is going to take us
08:47 - very
08:47 - literally and so we have to be really
08:51 - precise
08:51 - and and the computer just doesn't know
08:53 - the difference between
08:55 - what we mean and what we say so we have
08:58 - to
08:58 - be very precise and this is one of the
09:01 - great
09:01 - frustrations that people have when they
09:04 - first start using
09:06 - computers and so we have to get this
09:08 - right we have to get these
09:10 - little bits of text exactly the way they
09:12 - are computers will blow up with syntax
09:14 - errors and they seem to
09:15 - to make quite a fuss when you make the
09:17 - tiniest of errors
09:18 - but you'll get used to that i mean
09:20 - that's because not because
09:22 - you're bad or you're less than awesome
09:25 - it just means the computers can't
09:27 - compensate when you make small mistakes
09:29 - and so you've got to get used to the
09:31 - fact
09:31 - that the computer is sort of
09:34 - intellectually not as strong as you
09:36 - and so it gets confused really easy even
09:38 - though when it gets confused
09:40 - it says seemingly mean things to you so
09:42 - you'll you'll get used to that
09:44 - okay so the first thing i want to do is
09:47 - i want to throw up some text and i want
09:48 - you to while this text is up
09:50 - i want you to count the number of each
09:53 - word in this text and tell me what the
09:55 - most common word is
09:58 - in this text okay so here we go
10:07 - [Music]
10:16 - do
10:19 - okay so i i kind of made that hard on
10:22 - you on purpose by moving around and
10:23 - distracting you and confusing you
10:25 - but even if it's not moving at all it's
10:28 - a little bit
10:29 - you know tricky to do you probably stare
10:31 - at it a couple of times
10:33 - your brain is going back and forth and
10:34 - back and forth and so let's
10:36 - text analysis is one of the great things
10:38 - that computers are very very good at
10:40 - um and some of the things that you know
10:42 - they can translate
10:44 - text and that's because they've looked
10:45 - at a lot of information so looking at
10:47 - text is actually something computers are
10:48 - really good at
10:50 - and so if we take a look at the kind of
10:53 - programs that we're going to write
10:54 - to do this kind of thing this is
10:57 - something that humans are not naturally
10:58 - good at but computers are super good at
11:00 - now i'm not going to
11:02 - have you look at this code i'm not going
11:04 - to this code you will understand in a
11:06 - few weeks
11:07 - but basically this is a set of
11:09 - instructions
11:10 - to open a file read that file
11:13 - read all the words in the file create a
11:15 - histogram of all the words in the file
11:18 - and then search through that histogram
11:20 - to find the most common word
11:22 - and tell us what the most common word is
11:24 - in the file
11:26 - and in this clown file the word the is
11:28 - the most common it happens seven times
11:30 - and here's another large file called
11:31 - words.txt and the word
11:33 - to is the most common thing and our goal
11:36 - is to get to the point where you can
11:38 - write this
11:38 - on your own so you can say you know what
11:40 - i got a problem to solve
11:42 - that is what's the most common word in
11:44 - this file i know
11:45 - how to start and then i know how to
11:48 - finish i know how to do the stuff in the
11:49 - middle
11:50 - and we have to learn this kind of weird
11:52 - language but when we do
11:54 - we can count millions of words as easily
11:57 - to count 20 words
11:58 - so that's the fun of all of this is to
12:01 - teach you this language
12:03 - so that you can solve that problem so
12:05 - that you don't have to solve it because
12:07 - you could solve it
12:08 - but it's not something that you're
12:10 - naturally good at and it's hard work
12:13 - so up next we're going to talk a little
12:14 - bit about the hardware architecture
12:17 - that you can you're going to be
12:18 - experiencing as you write programs
12:24 - [Music]
12:36 - hello and welcome back to hardware
12:37 - architecture now you might ask
12:39 - you know why do i tell you about
12:41 - hardware architecture
12:43 - um you're not pro probably you're not
12:45 - going to build any hardware
12:47 - although it's fun stuff to do and if
12:48 - you're going to become a computer
12:50 - scientist which
12:51 - most of you won't want to be it's a
12:53 - great thing to study and it's a
12:54 - those who build our hardware are
12:56 - amazingly talented
12:58 - individuals and it's a really rewarding
12:59 - job
13:01 - the reason i like talking to you about
13:03 - hardware is because
13:04 - i want to be able to use words at some
13:07 - point and say oh
13:08 - secondary storage or central processing
13:10 - unit or
13:11 - or random access memory or
13:14 - peripherals you know input devices and i
13:16 - want to be able to say those words and i
13:17 - want you to be able to understand them
13:19 - and so i got i'll start with a little
13:20 - piece of hardware called the raspberry
13:22 - pi
13:23 - and the raspberry pi is a cute little
13:25 - single board computer
13:26 - uh we as we go forward these things are
13:29 - smaller and smaller and smaller
13:31 - and the interesting thing is is that the
13:33 - architecture of these stays the same but
13:35 - the number of components
13:37 - drops so i'm going to start and give you
13:40 - a block diagram
13:42 - of sort of a generic computer and tell
13:45 - you the major parts of it
13:47 - now i'm going to show you some really
13:50 - old hardware some really new hardware
13:53 - and then some hardware that is of
13:55 - medium age and the medium age hardware
13:58 - is probably the easiest one to see
14:00 - the architecture is the same okay and so
14:04 - the basic block diagram is that the
14:07 - brains
14:08 - if there are brains in computers which
14:10 - there really aren't the software is the
14:12 - closest thing computers after brains
14:14 - but in hardware the closest brain the
14:15 - computer has is this
14:17 - called a microprocessing unit or a
14:19 - central processor unit
14:21 - and this is designed you know three
14:24 - billion times a sec
14:26 - three billion times a second to ask the
14:28 - question
14:29 - what do you want me to do next and these
14:31 - little pins on the back
14:32 - are our instructions like 32 or 64 of
14:35 - these pins
14:37 - 3 billion times a second we send an
14:39 - instruction into these things now
14:42 - we can't sit there and talk to it we
14:45 - can't
14:45 - and so the instructions we store in
14:47 - what's called the main memory
14:49 - and this memory is really fast and the
14:52 - memory sort of feeds this
14:54 - and so every time the cpu needs a new
14:56 - instruction
14:57 - it asks the memory where that
14:58 - instruction is and so this the memory
15:00 - feeds the instruction cpu the cpu does
15:02 - it says give me another instruction
15:04 - cpu does it gives you another
15:05 - instruction and that is
15:07 - the basic uh essence of programming this
15:10 - asks what's next and this is where your
15:12 - program is stored
15:14 - or a program you purchased or came with
15:16 - your hardware where that's all stored
15:18 - and those are your places and so you end
15:21 - up
15:22 - inside your programs end up inside
15:25 - this memory so then there's a
15:29 - i mean and so in software you tend to
15:31 - program the the cpu
15:33 - and if you had bought a desktop computer
15:36 - a number of years back it would have
15:37 - this thing called the motherboard
15:39 - and the motherboard is called this
15:41 - because it kind of connects all the
15:43 - components together
15:44 - and so if you buy memory by itself it
15:46 - does nothing but it has a place to plug
15:48 - into the motherboard
15:50 - and if you buy a microprocessor it has a
15:52 - place to plug into the motherboard
15:56 - and if you buy a hard drive
16:01 - this is a really old hard drive it has a
16:04 - place to plug in on the motherboard and
16:05 - so the motherboard sort of connects
16:07 - everything together
16:08 - the hard drive is secondary storage now
16:10 - the way
16:11 - sec what the house secondary storage is
16:13 - different
16:14 - than uh the main memory which there it
16:18 - is
16:18 - i got unpile this stuff
16:22 - so this main memory is really fast but
16:25 - as soon as you
16:25 - uh turn the memory the power off of this
16:27 - memory it sort of vanishes
16:29 - and so to store files like word
16:31 - processing files or text files
16:33 - or whatever you got to start on
16:36 - something that lasts a little bit longer
16:38 - and so that's the purpose of the
16:40 - secondary storage it's
16:42 - permanent when the power is off it
16:44 - stores it now this one here is in such
16:46 - bad shape that isn't probably storing
16:48 - anything
16:49 - but it's got these little heads and it
16:51 - spins around
16:53 - and goes in and out and we'll have a
16:54 - video later that
16:56 - shows you one of these things that's not
16:58 - quite in as bad a shape if you look this
17:00 - has
17:00 - four different platters that are all
17:03 - spinning around
17:04 - and so this is just using magnetic
17:06 - material and electronics that
17:08 - sort of magnetize and demagnetize this
17:10 - stuff
17:11 - and if you look at a disc they're
17:13 - they're often rated physical disks are
17:15 - rated in revolutions per minute
17:16 - and that's how many times this thing
17:18 - spins around if you've got an old
17:19 - desktop
17:20 - and you hear it spin up this is the
17:22 - thing that's spinning and it's the place
17:24 - that your operating system lives
17:26 - your files live your applications live
17:29 - while they're stored and while the
17:30 - computer is turned off and then they're
17:32 - loaded
17:32 - into this while they're running and then
17:42 - this cpu takes the data
17:45 - from the main memory and your program
17:49 - runs at 3 billion operations per second
17:52 - so let's talk a little bit about
17:55 - something that this
17:56 - is probably from the 1960s or
17:59 - 70s this actually has
18:02 - if you're an electric electrical person
18:04 - it has capacitors those little
18:06 - little silver things are capacitors
18:09 - these little
18:10 - colored things are resistors and that's
18:13 - more capacitors and then there's wires
18:14 - and wires
18:15 - move everything and so when you say like
18:18 - this has millions of
18:19 - transistors oh wait that isn't a
18:22 - capacitor that's a transistor
18:24 - that's a transistor when you say that
18:26 - this here
18:27 - has etched and if you look closely at
18:29 - this go look at a picture of a
18:30 - microprocessor online
18:32 - you will see that it has millions of
18:34 - these and so the difference between
18:36 - 1960 and today
18:39 - is this circuitry of capacitor
18:42 - capacitors
18:43 - resistors and
18:46 - transistors has been microwized and put
18:49 - onto this
18:50 - it's using a photographic process and
18:52 - they're tinier and tinier and putting
18:54 - more and more on
18:56 - and if you think going from millions of
18:58 - these to one of these
19:00 - is crazy the thing that's happening now
19:04 - and the reason we have whole computers
19:05 - inside our pocket is that
19:08 - everything all of this this whole thing
19:11 - cpu
19:12 - memory everything all of it connected
19:15 - and the storage
19:16 - is being made smaller and smaller and so
19:18 - this little single board computer
19:20 - called the raspberry pi has one thing in
19:22 - it and it has the main memory
19:24 - and it has the cpu it has connections
19:27 - for things like peripherals like
19:28 - keyboards and stuff
19:29 - now it doesn't yet have secondary
19:31 - storage on it the secondary storage gets
19:33 - plugged in right here via usb
19:36 - and then if you take it one step farther
19:39 - to my phone
19:40 - it's got the secondary storage built
19:42 - right in and so
19:43 - you know the these this picture goes
19:45 - from the size of cabinets in the old
19:47 - days
19:48 - all the way down to really tiny but
19:52 - at the end of the day inside it is a
19:54 - highly sophisticated piece of circuitry
19:56 - that asks for
19:57 - instructions one at a time and main
20:00 - memory that holds the instructions
20:02 - and feeds them okay central processor
20:05 - does the thinking let's take a look here
20:07 - central processor
20:08 - does the thinking it runs the program
20:10 - it's what asking what's next it's not
20:12 - really
20:12 - it's not really smart but it's really
20:14 - fast and so we compensate
20:16 - for the lack of intelligence of this
20:19 - thing by us
20:20 - writing really good software that runs
20:22 - really fast and so
20:23 - voice recognition on things like phones
20:26 - is possible
20:27 - because computers have so much storage
20:29 - and they run so fast and the algorithms
20:31 - that
20:32 - do voice recognition are finally
20:34 - starting to work
20:35 - input devices like keyboards and mice
20:38 - and pens and whatever
20:40 - they come in output devices are like the
20:42 - screens that we see
20:43 - the main memory is the is the fast part
20:46 - of the computer that stores all the
20:47 - programs
20:48 - and the secondary memory is the
20:50 - permanent storage
20:51 - increasingly secondary memory
20:55 - do i have any usb sticks in here i don't
20:59 - well increasingly secondary memory is uh
21:02 - flash ram uh or or static uh static ram
21:06 - uh with no moving parts and so so you
21:09 - in a few years you'll not even be able
21:11 - to see uh secondary memory with uh
21:13 - with moving parts but that's okay it's
21:16 - still secondary memory it's still memory
21:18 - that
21:18 - lasts and so
21:21 - you and where your place is in here is
21:24 - you live in the main memory this is you
21:26 - you are here and so in a sense when the
21:29 - cpu asks the question what next it is
21:32 - your job to answer that
21:33 - and you answer that by writing python
21:36 - code and so your python code you'll
21:37 - write a file in python code blah blah
21:39 - blah blah blah blah blah
21:40 - and then that python code sort of gets
21:43 - loaded
21:44 - into main memory there's a magic
21:45 - translation process that happens
21:47 - and then your code is actually answering
21:49 - this question
21:50 - three billion times a second three
21:52 - billion times a second you're sitting
21:54 - there but this is you
21:56 - you're really out here but you then
21:58 - write a file and the file's loaded in
21:59 - and then the file runs and that's how
22:01 - things are at and that's
22:03 - that's your place in the world now
22:06 - what's actually running is not python
22:08 - code there is
22:09 - as i said a translation process you
22:12 - write a python file
22:14 - and then python itself translates this
22:17 - into the actual language
22:18 - known by the microprocessor which is a
22:21 - series of zeros and ones called machine
22:23 - language someday i would love to teach
22:25 - you a class
22:26 - on machine language but for now we're
22:28 - going to teach you python
22:29 - and we're going to use python as a
22:30 - crutch we don't have to talk machine
22:32 - language but you could
22:33 - if you really wanted to you could know
22:35 - how to write machine language but i
22:37 - assure you
22:38 - python is far easier to learn than
22:40 - machine language
22:41 - so python acts as a translator
22:44 - translates what you're doing in the
22:45 - machine language
22:46 - and then the machine language is what's
22:48 - sent back and forth
22:49 - but still even though it's translated to
22:51 - machine language it's
22:52 - you it is you answering those questions
22:54 - and that's what a program is as you
22:56 - pre-storing
22:57 - your response to the what next question
23:00 - over
23:00 - and over again so here's a couple of
23:03 - videos that you can look at on youtube
23:05 - about a cpu these cpus and looks very
23:08 - much like this cpu that i've got with me
23:11 - these cpus run have extremely
23:15 - high heat when when you put this thing
23:17 - on your computer on your lap and it
23:19 - starts to heat up
23:20 - that means it's thinking really really
23:22 - hard and so this is
23:24 - a small little old video from a long
23:26 - time ago that shows what happens
23:28 - when you take out the cooling capability
23:30 - of microprocessors
23:32 - and how just how hot they can be and the
23:35 - other video that i have
23:36 - is a hard disk something like this hard
23:39 - disk that i have
23:41 - except that it works and they turn the
23:43 - power on uh some of them last for a
23:46 - few seconds some of them last for a few
23:47 - minutes it's never
23:54 - i must be allergic to this hard drive or
23:57 - maybe
23:58 - maybe because there's dust in this hard
24:00 - drive and i keep spinning it and i
24:01 - sneeze
24:02 - but um but but basically
24:05 - some of them last for a few seconds some
24:07 - of them last for a few minutes it's not
24:09 - a good idea to open them up
24:10 - but i'm glad somebody opened it up and
24:12 - then did what they did and then recorded
24:14 - it
24:14 - so we can all enjoy uh what it is that
24:17 - they're
24:18 - capable of doing okay so that's a quick
24:20 - introduction to hardware
24:22 - mostly so that i can use those words
24:24 - going forward
24:25 - now what we're going to talk about next
24:27 - is communicating in the language python
24:30 - that is
24:31 - writing code and putting it into the
24:32 - computer so that that can execute
24:37 - [Music]
24:44 - okay
24:49 - [Music]
24:51 - hello and welcome back to python as a
24:54 - language you'll
24:55 - notice that i'm wearing a hat
24:58 - and uh part of the story of the hat is
25:01 - that
25:02 - uh where i work here at the university
25:04 - of michigan school of information
25:06 - uh we my office is in this building
25:08 - called north quad
25:10 - and uh the we call it quad warts
25:13 - sometimes because it's sort of got a
25:15 - square it sort of imitates an oxford
25:17 - quad and so
25:19 - uh it seemed to me to evoke notions of
25:21 - harry potter when we first moved into
25:23 - the building
25:24 - i joked in one of my classes that we
25:27 - should have a sorting ceremony for all
25:29 - the students as they come into
25:31 - north quad for the first time and uh
25:34 - and so that was cool and i thought that
25:35 - i would belong
25:37 - in uh gryffindor like everyone wants to
25:40 - be in
25:41 - gryffindor right they're the good guys
25:42 - and my students told me that i couldn't
25:45 - be in gryffindor
25:46 - um that i had to be in slytherin so
25:50 - you'll see me drinking tea
25:51 - throughout the course out of this teacup
25:53 - it's my slytherin teacup i got
25:56 - i picked that up from harry potter world
25:58 - i went down
26:00 - to florida and visited harry potter
26:02 - world and
26:03 - um the reason that i am
26:07 - was sorted by my students into slytherin
26:10 - is also because
26:12 - i teach python and python
26:16 - is like a snake and so
26:20 - if you think about the people from
26:22 - slytherin they are capable of
26:24 - talking to snakes and the class that we
26:27 - were doing the sorting was a python
26:28 - class and so it sort of made
26:30 - perfect sense that you would have to be
26:33 - in slytherin if you were the python
26:35 - teacher
26:36 - and of course your name is charles
26:38 - severance
26:39 - and then that sounds kind of like
26:41 - severus snape and so
26:42 - i just accepted that
26:47 - i'm in slytherin okay so you all can be
26:50 - in gryffindor but i can't i'm in
26:52 - slytherin so i'm the bad guy
26:54 - or the good guy depends on how you look
26:56 - at it right
26:58 - and so what i'm going to do now is i'm
27:00 - going to you know bring you
27:02 - into uh slytherin as well
27:05 - because i'm going to teach you the
27:07 - python language
27:09 - python is the language that we
27:12 - pythonistas talk
27:13 - uh it was invented about over 20 years
27:16 - ago by a fellow named guido van rossum
27:18 - and uh away we go now
27:22 - even though i'm using this whole snake
27:24 - slytherin thing it turns out that
27:26 - python was not at all named for harry
27:28 - potter because python was invented
27:30 - you know almost two decades before harry
27:32 - potter was created and it wasn't for the
27:34 - snake
27:35 - it was actually monty python's flying
27:37 - circus was the inspiration
27:39 - uh for python uh the name python and uh
27:42 - because
27:43 - guido van rossum really wanted to create
27:45 - a programming language
27:46 - that while it was powerful underneath it
27:49 - in its very nature was a very powerful
27:51 - language
27:51 - he wanted it to be a language that was
27:53 - fun and he wanted to be a language that
27:56 - was approachable
27:57 - and so that's why python recently has
27:59 - become so
28:00 - absolutely popular
28:04 - and uh it's easy to learn and it's
28:07 - but it's also powerful and that's sort
28:08 - of the magic of python is the ease of
28:10 - learning it
28:11 - the the the brevity of the programs the
28:14 - shortness of the programs
28:16 - and the uh and the power and so
28:19 - we are going to become pythonistas now
28:23 - as you learn to be a software developer
28:26 - using the python programming language
28:28 - um you are going to encounter syntax
28:31 - errors
28:32 - and i remember when i used to get syntax
28:35 - errors and
28:36 - i remember my first programming class
28:39 - and i would type on cards
28:50 - and i would upload those cards
28:54 - to the computer and the computer would
28:58 - say you're not worthy and i'm like wait
29:01 - a sec those are pretty good cards how
29:03 - could you be so critical of me
29:05 - um you know i'd say syntax there and i i
29:07 - really got sort of a
29:10 - a really bad attitude that somehow this
29:12 - computer didn't like me
29:14 - and that i would make cards that would
29:16 - complain and i would make
29:18 - changes to the cards and it would still
29:19 - complain and i'd make changes and would
29:21 - still complain i'm like
29:22 - how can i win in this situation and
29:25 - you're gonna feel the same
29:26 - thing you're gonna absolutely feel the
29:27 - same thing you're gonna be struggling
29:30 - you're gonna be like how come this
29:31 - computer hates me
29:33 - let me assure you right now the computer
29:34 - doesn't hate you the computer actually
29:37 - loves you it just is not very good at
29:39 - showing
29:40 - how it loves you or telling you how or
29:43 - why it loves you
29:44 - and so syntax errors are not so much
29:48 - python telling you that you're bad or
29:50 - that you're an inadequate programmer or
29:52 - you should find something else to do
29:54 - it's really python's admission that it
29:56 - doesn't understand what you're trying to
29:58 - say
29:58 - and so you got to get used to that and
30:01 - it's frustrating but you got to get used
30:02 - to the fact that syntax errors are your
30:04 - friend
30:05 - python is saying hey i got to line seven
30:08 - and i was doing fine up to line seven
30:09 - but boy in line seven there's some
30:11 - little thing i don't know what the word
30:15 - else means in this context or you didn't
30:18 - indent it and so i'm kind of confused
30:19 - what did you mean please please please
30:21 - help me
30:22 - you know and so it's so much easier for
30:25 - you to learn python
30:26 - than it is for python to figure out what
30:29 - you mean when you're writing code
30:31 - so we have a number of different ways to
30:33 - sort of encode our instructions when we
30:35 - talk to python
30:36 - one is we just run python interactively
30:38 - on our computer
30:39 - hopefully by now you've got it installed
30:41 - and you just type python at a command
30:43 - prompt so either a windows command
30:45 - prompt or a linux command prompt
30:47 - or a macintosh command prompt and i got
30:49 - some examples of how to sort of get this
30:50 - all started
30:51 - get python installed and away you go
30:54 - now you'll notice when you run the
30:56 - python interpreter the three chevron
30:58 - prompt
30:58 - python is asking you what next right
31:01 - this is you
31:02 - it's saying i want to talk to you i want
31:05 - you
31:05 - to tell me some python to do if you know
31:08 - the python language you know what to say
31:10 - right here
31:11 - now if you know python you can type
31:13 - these languages you can say oh
31:15 - x equals one which really means go find
31:17 - a little piece of memory
31:18 - label it x and stick one in it print x
31:21 - is like go find that thing where you
31:22 - labeled it x and bring me back that
31:24 - number and tell me what i stored in
31:25 - there now why you want to do this that's
31:26 - a different question
31:28 - and these are very simple things it's
31:29 - going to take you a while to get the big
31:31 - picture of why we're doing this so just
31:32 - trust me
31:33 - that you want to learn these statements
31:36 - and then later
31:37 - we will successfully turn those into a
31:39 - program
31:40 - so x equals x plus 1 the third line
31:43 - there
31:43 - x equals x plus 1 is not as it seems
31:47 - in math it basically says hey go grab
31:50 - the old value of x add 1 to it and stick
31:52 - it back in x that's what that means so
31:54 - equal sign really has kind of an arrow
31:56 - to it
31:57 - and then we say hey go look up that x
31:59 - thing that we just did
32:00 - and print that out and then we're going
32:02 - to say quit so
32:04 - that's us talking to python now you can
32:06 - type just about any crazy stuff you want
32:08 - in here
32:08 - and python will be unhappy
32:12 - and talk to you so uh what we're going
32:14 - to do next is we're going to start
32:16 - talking about the
32:17 - actual language of python and what it is
32:19 - that we have to say
32:21 - to make python happy when we're talking
32:23 - to it
32:28 - [Music]
32:40 - so now we're going to start learning the
32:42 - actual python
32:43 - language so what do we say you can think
32:47 - of this as
32:47 - almost like writing almost like writing
32:49 - a story
32:50 - we're going to start with a basic
32:52 - vocabulary we're going to talk a little
32:54 - bit about
32:54 - lines or sentences and then we're going
32:56 - to start talking about how to put those
32:59 - sentences together to make a coherent
33:01 - paragraph as it were
33:03 - and you just have to accept the fact
33:06 - that when i start teaching you this
33:07 - stuff
33:08 - it's not going to make sense for about
33:11 - six or seven more chapters and so just
33:13 - sort of bear with me except i mean i
33:16 - remember when i first learned i
33:18 - it went from me confused confused
33:21 - confused confused confused
33:23 - holy mackerel this is awesome and so i
33:25 - expect
33:26 - many of you will go through that same
33:28 - thing so just
33:29 - learn the first parts accept the fact
33:31 - that it doesn't necessarily make sense
33:34 - in a big picture
33:35 - um and and just just bear with us okay
33:39 - so we'll start with vocabulary we'll
33:40 - start to make sentences and then we'll
33:42 - have little short stories and paragraphs
33:44 - okay
33:45 - and so this is a short story about how
33:48 - to count the words in python
33:49 - um it's got a couple of paragraphs and
33:51 - we are going to
33:52 - look at all of this stuff eventually so
33:55 - we start with
33:56 - a set of reserved words and what are
34:00 - reserved words well
34:01 - they're words that um python
34:04 - expects when you use these words that
34:07 - they're going to mean exactly what
34:08 - python expects to mean
34:10 - and what it really means is you're not
34:11 - allowed to use them for any other
34:12 - purpose than the purpose that python
34:14 - wants it's for part of the contract
34:16 - it's like when you have a dog and you go
34:20 - what did you think of that television
34:22 - program and the dog has no idea what
34:24 - you're saying and then you say
34:26 - um do you do you want to wait until
34:28 - saturday to
34:30 - to um to go to the veterinarian
34:33 - and the dog still doesn't know what you
34:34 - say and then you go like um how would
34:36 - you like to take a walk
34:38 - and then the dog goes walk i know what
34:40 - that means and then hits the door right
34:42 - and so the way the dog sees you is blah
34:44 - blah blah blah walk blah blah blah blah
34:46 - food blah blah blah blah
34:48 - treat blah blah blah blah walk that's
34:50 - kind of how python looks at these rever
34:52 - reserved words when you say
34:54 - class it goes class oh i know what that
34:55 - means now
34:57 - if i say zap it's like oh zap something
35:00 - that you get to decide or it's a maybe a
35:01 - variable name
35:03 - so reserved words are simply words that
35:05 - when you use
35:06 - these words in python and there's only a
35:09 - few of them
35:10 - like and or dell or if
35:13 - maybe pass maybe
35:16 - in a lot of these you won't end up using
35:20 - them it's just
35:21 - these are reserved for python and part
35:23 - of the python vocabulary this is python
35:25 - vocabulary
35:27 - now when i when we move from words to
35:30 - sentences
35:31 - you see that python is a series of lines
35:33 - a python program is a series of
35:35 - statements
35:36 - they have an order because the computer
35:38 - wants to know what next what next what
35:40 - next
35:40 - so what next is start at the beginning
35:44 - so i already talked about an assignment
35:45 - statement that basically says
35:47 - x equals 2 this is not a mathematical
35:49 - statement this is a
35:51 - directive to say take this variable 2
35:54 - this value 2 this constant 2
35:56 - and stick it in a location in your
35:58 - memory and remember
35:59 - that i asked you to name it x x is a
36:02 - variable something you made up
36:03 - you chose that and so it but it's
36:06 - python's job to remember it
36:08 - so this says go to whatever that x is
36:11 - there's a 2 in there
36:12 - now pull that x back out add 2 to it
36:15 - which makes it 4 and stick it back in x
36:17 - and so that makes this a 4. so
36:19 - x is a 4. and print x says
36:22 - go look up that thing that was an x and
36:24 - print it out and so these are like
36:26 - each line has something to it i'm using
36:28 - a reserved word well actually that's a
36:30 - function but
36:31 - it's k it's a reserved word too
36:34 - and so there's reserved words and all
36:37 - these things and you combine these there
36:38 - are
36:39 - operators plus as an operator equals as
36:42 - an operator these things do things
36:44 - and we'll learn all this stuff in time
36:46 - so the basic building blocks
36:48 - of lines of python
36:52 - now as we take these lines of python and
36:54 - build them up we end up making
36:55 - paragraphs programming in paragraphs and
36:58 - so
36:59 - one of the things that it's important is
37:01 - i showed you how to do interactive
37:03 - python so you just type python and you
37:05 - type a statement in a statement and
37:06 - statement
37:08 - those get really tiring after about
37:09 - three or four lines of python because
37:11 - you start making mistakes and you have
37:13 - to start over so the the better thing to
37:15 - do is to
37:16 - as your program gets a little larger to
37:18 - write a script
37:19 - put your python instructions in a file
37:21 - and then tell python
37:23 - to read from the file and then run the
37:25 - script
37:26 - as it's entered in that file we tend to
37:29 - name these files with dot py and i've
37:31 - got a series of videos
37:33 - that you can watch to figure out how
37:35 - this all works
37:36 - like i said you can type interactively
37:38 - to python and it's a great way to
37:40 - experiment with python check to see if a
37:42 - statement does what you think it does
37:44 - but script is the way after we are
37:47 - passed one or two lines of code
37:48 - we write it in files and then run it
37:50 - separately
37:53 - so there are a couple of basic patterns
37:56 - and
37:57 - it's really important to understand each
37:58 - of these patterns and like i said we'll
38:00 - teach you these patterns separately
38:02 - and then we'll combine them together and
38:04 - when you combine them together when you
38:05 - say oh that's what a program is
38:07 - so you have to suspend disbelief we have
38:10 - a couple of different patterns one is a
38:12 - sequence of steps
38:13 - do this then do this then do this
38:15 - conditional is like skipping something
38:17 - repeated does it over and over and over
38:19 - again computers are really good at
38:20 - repeating stuff
38:22 - much better than people people get tired
38:23 - going over and over doing the same thing
38:25 - and then we have store and repeated
38:27 - steps as well and so if we take a look
38:30 - at this
38:30 - and we take a look at a python program
38:34 - this is a piece of code this is a little
38:35 - script if you type this into the code
38:38 - take this code python code into a file
38:40 - and ran it
38:41 - it starts at the beginning and then it
38:43 - goes to the next line and the next line
38:44 - in the next line and
38:45 - python executes the scripts as you write
38:47 - them so it says
38:48 - stick stick a variable to find a place
38:51 - called
38:52 - in your memory called x stick two into
38:54 - that
38:55 - okay then go to the next one print that
38:57 - out so the program's producing output
38:59 - now go read x and add 2 to it and stick
39:02 - it back in x so x is 4
39:03 - then print that this side over here this
39:05 - is called a flowchart
39:07 - i'm not going to make drawflow charts
39:08 - i'm only going to draw them a few times
39:10 - that in ways that i think will help you
39:12 - but you can think of it as python when
39:14 - it finishes something it goes on to the
39:15 - next one unless you tell it otherwise
39:17 - finishes this goes on to the next one
39:19 - finishes this goes on to the next one
39:21 - finishes this and now the program is all
39:24 - done
39:24 - and so that's sequential steps you just
39:26 - type them in python runs it
39:28 - they're they're important but sort of
39:31 - uninteresting
39:31 - because you know they're you can't can
39:33 - only get so far and you can't really
39:35 - make them intelligent because it's
39:36 - always going to do the next one
39:38 - so the next thing we do is what are
39:39 - called conditional steps and this is
39:41 - where it
39:42 - starts get intelligent i mean where you
39:44 - are able to encode
39:45 - your brain into the computer like oh
39:47 - wait a sec let's only do this step if
39:49 - something is true
39:50 - and the the syntax that we tend to use
39:53 - here
39:54 - is the reserve word if if
39:57 - okay and so the if is like a little
40:01 - a fork in the road you can go one way or
40:03 - you can go another way and you're asking
40:05 - a question
40:06 - so inside the if statement right here
40:08 - there is a question
40:09 - saying is x less than 10 that's a that
40:11 - revolves is
40:12 - resolves to a true or false if it's less
40:15 - than 10 that's true
40:16 - if it's greater than 10 it's false and
40:18 - so then what we do
40:19 - is if it's less than 10 we have this
40:22 - indented block of code there's also this
40:24 - colon tells us we're in the beginning of
40:26 - an indented block of code
40:27 - and so what it basically says is if this
40:29 - is true run that code
40:31 - if it's false skip that code so it can
40:33 - either run it or skip it
40:35 - depending on this question that's being
40:38 - asked
40:39 - now if you look at this code it's pretty
40:40 - obvious what's going on
40:43 - it comes down x is 5. if x is less than
40:46 - 10 that's
40:46 - true so it runs this code and prints out
40:49 - smaller
40:50 - and then it comes back here at d indents
40:53 - the next
40:54 - basic sequential this ends up being kind
40:55 - of a block if x is greater than 20
40:59 - if x is greater than 20 oh come back
41:01 - come back
41:03 - if x is greater than 20 this turns out
41:06 - to be false because x is 5
41:08 - and so it skips this so the bigger never
41:10 - comes out and then it continues on
41:12 - and prints fini oops that's a
41:13 - typographical layer make that a
41:14 - lowercase print
41:16 - and then prince finney so it comes in
41:18 - runs this skips this
41:20 - and then finishes okay
41:24 - so here is the last one we'll talk about
41:26 - the repeated steps we'll get back to
41:28 - store and retrieve uh
41:29 - store and retrieve uh uh later but for
41:31 - now we're just going to talk about three
41:33 - of the four
41:35 - this is another program and the key is
41:38 - is that
41:39 - we're going to use this same choice
41:40 - where we're going to go in but then
41:42 - we're going to run for a while
41:44 - and then we'll have an exit condition
41:46 - where we get out so this is a
41:48 - repeated over and over and over and over
41:50 - again and this is
41:52 - this essence of how we make computers do
41:54 - things that are seemingly difficult
41:56 - while they're more naturally difficult
41:57 - for people okay
41:59 - and so how do we encode this notion that
42:01 - we want to do something for
42:03 - not forever but for a while how do we
42:05 - encode that notion
42:07 - and so we do it in this way so we have
42:10 - our statement
42:11 - sequentially go to this while while is a
42:13 - key word and it's asking another
42:15 - question that's a true
42:16 - false question is n greater than zero i
42:18 - i read this as
42:19 - as long as n remains greater than zero
42:22 - keep doing this indented block and you
42:24 - have a a
42:25 - colon at the end and then you have two
42:27 - lines of code that's indented
42:28 - so that tells us what the loop is and
42:30 - then this is now d indented
42:32 - and so it comes in and if this is true
42:36 - if this is true if this is true it runs
42:39 - these two lines
42:40 - prints out n n is five and then it says
42:42 - n equals n minus 1
42:44 - which makes n be 4 and it goes back up
42:46 - and it goes up and it asks this question
42:48 - again
42:49 - is n greater than 0 if it is continue on
42:52 - and prints 4 and then subtracts it and
42:54 - it does that
42:55 - 4 3 2 and prints out 1
42:59 - then it comes up and now after this n is
43:02 - now 0
43:03 - and is now 0 and n is no longer greater
43:06 - than 0 so it takes sort of the exit ramp
43:09 - and goes down here so it takes the x
43:11 - ramp and goes to here
43:12 - and runs the next line now
43:16 - we're going to cover all this again so
43:18 - i'm just trying to give you the big
43:19 - picture
43:20 - next couple of chapters we're going to
43:21 - hit all these things again and we're
43:22 - going to hit them in much more detail
43:24 - with a lot better information this is
43:27 - now
43:28 - sort of like combining these and again i
43:30 - don't want you to
43:32 - really like know this stuff
43:35 - just you will know this in a couple of
43:36 - weeks you will see this program again
43:39 - but this shows you how we combine those
43:42 - patterns
43:42 - of repeated sequential and conditional
43:45 - together
43:47 - so this is a bit of sequential code
43:49 - comes in here runs this
43:50 - which happens to ask for a file name
43:52 - then it opens the file
43:54 - it creates a data structure called a
43:55 - dictionary this is all sequential
43:57 - now the four is another form of loops so
44:00 - this is going to loop for a while
44:01 - and then this is within a loop we can
44:03 - even have two indents
44:05 - and that's another loop so these are
44:06 - like repeated and then it goes
44:08 - it dials down to the next sequential bit
44:10 - then it does this
44:11 - here's another loop that's going to run
44:13 - and then here's a conditional it's going
44:15 - to run
44:15 - and then when it's all done we print out
44:17 - the last thing and this is of course
44:19 - is the the program that does um
44:23 - you know the it figures out the most
44:26 - common word and prints that most common
44:27 - word out and so this is a python short
44:29 - story
44:30 - it reads uh some data it reads a name of
44:33 - a file it opens that file it talks about
44:35 - how to make a histogram
44:37 - and then it looks through for the most
44:40 - common word
44:41 - so don't worry too much about this over
44:44 - the next couple weeks we'll fill in the
44:45 - pieces so that you absolutely understand
44:48 - every single line of this code
44:51 - so just a quick overview chapter one uh
44:54 - stick with us uh you realize it you it
44:57 - will be chapter seven before
44:59 - this makes too much sense you really
45:01 - gotta have to trust
45:02 - that you are learning important things
45:04 - and that it all makes sense
45:06 - when we bring it together like in
45:08 - chapter seven in a few weeks
45:18 - [Music]
45:25 - hello and welcome to chapter 2. now
45:28 - we're going to continue to talk about
45:29 - the building blocks of python
45:31 - variables constants statements
45:33 - expressions etc
45:35 - the first thing we have to talk about is
45:36 - constants these are just
45:38 - things we call them constants because
45:39 - they don't change their numbers
45:41 - strings etc and we use them to sort of
45:44 - start calculations or
45:46 - you know if uh if if something is
45:49 - greater than 40 hours we're going to do
45:51 - something and so 40 is the constant in
45:53 - that situation so
45:54 - we have 123 we have 98.6 we have
45:58 - hello world which is a string by
45:59 - enclosing it in quotes
46:01 - we pass each of these things to the
46:02 - print function and aside with respect to
46:04 - the print function is that we see the
46:06 - output
46:07 - so print 123 prints out 123 print 98.6
46:10 - prints it out so these are just really
46:12 - the syntax of constants and
46:15 - without constants we can't write really
46:17 - much of anything
46:19 - the other sort of foundational notion of
46:21 - any programming language are the
46:22 - reserved words
46:24 - and like i said before reserved words
46:25 - are these special words
46:27 - where python is listening for them and
46:30 - there is very special meaning so when
46:32 - python sees if
46:33 - it's not just any other word it means
46:36 - how python implements conditional
46:38 - execution
46:40 - variables are the third building block
46:43 - and that is
46:44 - a a way that you can ask python to
46:46 - allocate
46:47 - a piece of memory and then give it a
46:49 - name and you can put stuff in that
46:51 - sometimes you just put one value later
46:53 - we'll see when we do collections in
46:55 - chapters eight and nine
46:56 - uh we will see that more than one value
46:58 - can be put into a variable
47:00 - and the variable the control how we
47:02 - control the variable is through the
47:03 - assignment statement
47:05 - and as i said before it's important to
47:07 - think of the assignment statement
47:08 - as having an arrow to it so this is not
47:10 - saying x for all time is the same as
47:12 - 12.2
47:13 - what it's saying is take 12.2 find a
47:16 - place find some memory in your computer
47:18 - there mr python
47:20 - give it a label x we get to choose the x
47:22 - that's the variable part we
47:24 - chose it right um and then stick 12 in
47:27 - it
47:27 - and then the same is true for 14. go
47:29 - find an another spot
47:30 - name it y and then put a 14 in there so
47:34 - think of this as an arrow every time you
47:36 - see that equality
47:38 - the assignment in an assignment
47:40 - statement
47:43 - now these variables hold one value so
47:46 - now if we have these
47:48 - three statements these two and then the
47:50 - third one executes it says put 100 into
47:52 - x but that wipes out the old value
47:54 - of 12.2 and it rewrites it with a hund
47:57 - with a hundred and so we can
47:59 - change the variables that's another
48:00 - reason that we call them variable
48:04 - there are some names now some rules for
48:07 - making variable names you can start with
48:08 - a letter or an underscore
48:10 - we tend not to as normal programmers use
48:12 - underscore we tend to reserve those
48:15 - for variables that uh we use to
48:17 - communicate with python itself so when
48:19 - we're making up a variable we tend not
48:21 - to use underscores
48:22 - as a pre first character you can have
48:26 - letters and numbers and underscores
48:27 - after the first character and they're
48:29 - case sensitive but it's really a bad
48:31 - idea
48:32 - to use case as the only differentiator
48:35 - so in this case uh spam eggs spam 23 and
48:39 - underscore speed are all total legit
48:41 - we would probably not use this one
48:43 - unless we were actually doing it because
48:45 - python told us to use that variable
48:47 - uh 23 spam starts with a number pound
48:49 - sign is starts and dot is not a
48:51 - legitimate variable character
48:54 - and spam capital spam and all cap spam
48:56 - are different
48:57 - but this is not something that you want
48:59 - to sort of
49:01 - depend on too much so that's just the
49:04 - rule names
49:05 - we tend to start them with a letter and
49:07 - then use letters numbers and underscores
49:08 - underscores other than the first
49:10 - character are generally
49:12 - pretty common and you'll see those used
49:14 - a lot
49:15 - now when we're choosing variable names
49:17 - one of the things about variables is we
49:18 - get to choose the name we get to choose
49:19 - the name
49:20 - x choose the name y and so sometimes we
49:23 - like them short
49:24 - but sometimes we want them descriptive
49:26 - and the notion that of making variables
49:28 - descriptive is often confusing to
49:31 - beginning students sometimes
49:33 - it's really helpful to if you're going
49:35 - to have a line of text and you name the
49:36 - variable line
49:38 - that's great because the next person
49:40 - reading your program says oh that must
49:41 - be the line of text
49:43 - whereas it also can become misleading
49:45 - that line
49:46 - the name of a variable somehow has
49:48 - meaning so sometimes we'll have even
49:50 - singular variables and plural variables
49:52 - like friend and friends
49:54 - like is is plural does python know about
49:56 - singular and pearl
49:57 - plural and the answer is no so sometimes
50:00 - we pick variables that make no sense
50:02 - sometimes we pick variables that make a
50:04 - lot of sense
50:05 - this is just something that you as a
50:06 - beginning programmer are going to have
50:08 - to understand
50:09 - that we can pick anything we want
50:12 - and so you'll see i'll try to call
50:14 - attention to this in the first few
50:16 - lectures as we go through
50:17 - so here's a bit of code with an
50:19 - assignment statement
50:20 - two assignment statements a
50:22 - multiplication and a print statement
50:24 - and you can say what is this doing now
50:27 - python
50:28 - is perfectly happy with this code
50:30 - because it assigns it in there you have
50:31 - said please go
50:32 - give me this as a label and then we
50:34 - assign two variables and then we're
50:36 - carefully
50:37 - pulling these two variables back out
50:39 - multiplying them together and sticking
50:40 - them into yet another variable
50:42 - and then printing that variable out that
50:43 - seems like you know we can figure out
50:45 - what it is you just have to look really
50:47 - careful and
50:48 - a single character mistake and python is
50:50 - going to be
50:51 - you know pretty unhappy okay
50:54 - so that's one way to write this program
50:57 - it's hard though because you any of
50:59 - those characters are long variables and
51:01 - they're random stuff
51:02 - it's not very friendly to anyone who
51:04 - might read your program
51:06 - now this looks a little friendlier it's
51:08 - the same program because python just
51:10 - wants a correspondence
51:11 - you picked a you picked b and you pick c
51:14 - and it's really much easier for us to
51:16 - see what's going on
51:18 - and and so this is in a way going from
51:22 - here to here is much friendlier but
51:25 - we can be even friendlier if we pick
51:27 - mnemonic variable names so this is
51:29 - this is not mnemonic this is short and
51:31 - convenient this is long and
51:33 - inconvenient python is happy with any of
51:35 - these
51:36 - here on the other hand is another
51:38 - version of the exact same program
51:40 - and now you think to yourself oh yeah
51:42 - now i get it
51:43 - 35 is the number of hours 12.50 is the
51:46 - rate
51:47 - and then we're going to multiply the
51:48 - hours and the rate and come up with a
51:50 - pay
51:50 - and we're printing out to pay now
51:52 - whoever wrote this program is
51:54 - much is helping us greatly understand
51:56 - what's going on
51:57 - and that's good choosing variable names
52:00 - python again
52:01 - all three of these are the same to
52:03 - python choosing variable names in a way
52:05 - that help your reader
52:06 - understand what's going on is a great
52:09 - thing
52:10 - the problem is the danger is
52:13 - if you read this and you think that
52:15 - somehow python understands payroll that
52:18 - if you name a variable hours that python
52:20 - knows what hours means
52:21 - the answer is python really doesn't care
52:24 - what you name the variable as long as
52:26 - what you
52:26 - name it you use it right and so you've
52:29 - got to be careful and so you'll see
52:31 - i will when i write my code
52:34 - in these first few weeks first few
52:37 - lectures
52:38 - i will sometimes write it with gibberish
52:40 - i'll sometimes write it with extremely
52:41 - short but meaningless variable names
52:43 - and sometimes i'll use meaning full
52:44 - variable names and i'll call your
52:46 - attention to it
52:48 - and and it will get you you'll start
52:50 - when you look at this third kind it has
52:52 - meaningful meaningful variables or
52:53 - mnemonic variable names
52:55 - you'll just instinctively want to give
52:58 - python more intelligence
53:00 - than it sort of deserves i guess that's
53:02 - probably the best way to say that
53:04 - so we've talked about constants we've
53:06 - talked about reserved words we talked
53:07 - about variables
53:10 - and so here we have a sentence like
53:13 - we've already done some of these things
53:14 - where we
53:15 - set x equals 2 we retrieve the old value
53:18 - of x and add 2 to it
53:20 - so that becomes 4 and then we print 4
53:22 - out print is a function that's built in
53:24 - and we pass in whatever we want to print
53:26 - out so this parentheses is part of
53:29 - a function call
53:32 - okay so an assignment statement you have
53:35 - to really get
53:36 - it your head around the notion that it
53:38 - has this
53:39 - arrow nature and that it evaluates this
53:42 - entire right hand side
53:44 - before we change the left hand side and
53:48 - so you can think of this sort of as
53:49 - at time step one it does this and then
53:52 - at time step two it does the copy
53:54 - and that's how you can have something
53:55 - like x on both sides
53:58 - of a assignment statement and so if for
54:01 - example we have
54:02 - x and x has 0.6 in it
54:05 - x has 0.6 in it what happens is is that
54:09 - it first it sort of ignores this part
54:11 - right here and evaluates the expression
54:13 - so it pulls the 0.6
54:15 - everywhere x appears it pulls 0.6 out
54:17 - then it starts running these
54:18 - calculations
54:20 - and then it has the new value after all
54:22 - the calculations are done
54:24 - then and only then is it going to put
54:27 - that
54:27 - back into x and so it sort of takes that
54:31 - and puts it back into x
54:32 - and then wipes out the old value at this
54:35 - point this has all been taken care of
54:37 - and it's been reduced down
54:38 - to this 0.93 and so that is what's put
54:42 - in
54:43 - as the new value so
54:46 - up next we'll talk a little bit more
54:48 - about making more complex expressions
54:52 - [Music]
55:06 - so welcome back we're now going to talk
55:07 - about expressions expressions are a
55:09 - little more complex calculations
55:11 - that we can sort of do on the right hand
55:13 - side of an assignment statement
55:16 - so one of the things about expressions
55:19 - is operators
55:20 - and the operators in computer
55:22 - programming are often very much the same
55:24 - as the mathematical operators but we
55:25 - don't have all the fancy characters that
55:28 - we have in mathematics
55:30 - and so we have to choose what's on the
55:33 - keyboard and then we really go back to
55:34 - the 1960s and 1970s
55:37 - and then we used what was on the
55:38 - keyboard in the 1960s and 1970s to make
55:40 - these operators
55:42 - so plus is addition minus the
55:44 - subtraction
55:45 - we don't have a times sign or a or a dot
55:47 - in the middle so we use the asterisk as
55:49 - multiplication
55:50 - division we can't put two things over
55:52 - top of each other so we use slash for
55:54 - division
55:55 - raising to the power because it didn't
55:56 - have little characters back then is star
55:58 - star
55:59 - which is raising to the power and then
56:01 - remainder remainder
56:02 - is the when you do integer division it's
56:05 - also called the modulo operator it's the
56:07 - remainder not the quotient and i've got
56:09 - a picture of that coming up
56:11 - so here's a whole series of little
56:13 - examples of this right so we've already
56:15 - seen you know
56:16 - the plus x equals x plus one keep
56:18 - remembering that these assignments are
56:20 - arrows basically arrow arrow they have a
56:22 - direction
56:23 - multiplication 440 times 12. um
56:26 - dividing this by that's division over
56:29 - over a thousand
56:31 - five point two eight um here we're going
56:33 - to put 23 into jj and then we'll do
56:35 - modulo so that says
56:37 - take 23 divided by five and give me back
56:39 - the remainder and put it in k
56:40 - k so this is the expression that
56:42 - evaluates like this take 23 divide 5
56:45 - into 23
56:46 - 4 remainder 3. the 3
56:49 - is what comes back up here okay and so
56:52 - that is
56:52 - the remainder it's also called modulo
56:54 - operator it turns out that
56:56 - for things like picking a random number
56:58 - and then taking the modulo of 52 is a
57:01 - way to pick a card randomly
57:02 - so this modulo operator is actually
57:05 - especially in games and other things
57:06 - super useful so that's the various
57:10 - operators
57:12 - it's important to know which of these
57:14 - operators goes first
57:16 - it's called operator precedence now
57:18 - normally we put parentheses in
57:20 - like you know the so if i put the
57:22 - parenthesis in here i'd say this goes
57:24 - first
57:24 - parentheses then this goes first oh
57:27 - actually not that one
57:28 - oops got that one wrong this happens
57:31 - first
57:32 - this happens then this happens
57:35 - okay and so but it's important for us to
57:38 - be able to know if there were no
57:39 - parentheses the order in which these
57:41 - things will happen
57:42 - so the way things work in terms of opera
57:45 - operator precedence
57:46 - is parentheses are the most important
57:48 - thing followed by
57:49 - raising to the power all else being
57:51 - equal multiplication and division
57:54 - are are all both equal and then addition
57:56 - and then within it's
57:58 - adding left to right so let's see an
58:00 - example of how this works
58:02 - and so if we take 1 plus 2 to raise to
58:05 - the 3 power
58:06 - divided by 4 times five and we print out
58:08 - what comes out of this
58:10 - so the way i did this when i was taking
58:13 - exams
58:14 - back many many years ago when i was
58:16 - first in computer science
58:17 - is i'd write it all down and i'd look
58:19 - for the highest precedence thing now
58:20 - parentheses would make this easy
58:22 - but exponentiation is the first one so
58:24 - that means we're going to take this
58:26 - and that's going to be eight two to the
58:27 - third power two times two times two
58:30 - two two cubed is eight
58:34 - then what i would do is i rewrite the
58:35 - whole thing with the 8 there and i look
58:37 - across
58:38 - and i'm looking for multiplications
58:39 - because the power's been done the
58:40 - multiplication is what i'm looking for
58:42 - next
58:42 - and then there is both multiplication
58:44 - division they're equal they're at the
58:45 - same level
58:46 - and so what happens is they're done left
58:48 - to right eight divided by
58:50 - four happens before four times five
58:53 - and so the fact that it's not four times
58:55 - five but instead eight times four
58:57 - is because of the left to right rule so
58:58 - then this gets rewritten
59:00 - to be two one plus two times five and
59:03 - this one multiplication is the top one
59:05 - so that does this next 2 times 5 becomes
59:08 - 10 i rewrite it again
59:09 - and then 1 plus 10 addition is the
59:11 - lowest thing and that's how we end up
59:13 - with 11. and so that that's how i would
59:16 - do these problems if i ever
59:18 - saw the problem on an exam and it's a
59:20 - fun problem to put on exams because
59:23 - there is one and only one answer and
59:25 - every programming class
59:27 - has usually at least one slide about
59:29 - this stuff so like i said
59:31 - the rules go top to bottom parentheses
59:33 - power
59:34 - multiplication addition and then left to
59:36 - right within it
59:39 - so we talked about variables and
59:41 - computing values to put inside variables
59:43 - but the one thing you've kind of also
59:45 - maybe you noticed it as we go by is we
59:47 - have
59:47 - different kinds of data we call it type
59:50 - is this of type integer is this of type
59:53 - floating point number is it of type
59:54 - string what is going on here
59:57 - and python is pretty smart about various
59:59 - kinds of
60:00 - types of data and so you know we're
60:03 - adding one plus four here
60:05 - and python knows as it looks at this
60:06 - that that's an integer and that's an
60:08 - integer
60:08 - and we'll add it together and make it an
60:10 - integer so that thing is an integer
60:12 - we can also use this plus to concatenate
60:15 - two strings this is hello blank
60:17 - plus there and plus looks here says oh
60:20 - that's a string and that's a string
60:21 - so i know what to do with strings i will
60:23 - concatenate those two things together so
60:25 - it becomes another string
60:26 - that gets assigned into ee e and it's
60:29 - hello space there
60:30 - the plus doesn't add the space i added
60:32 - the space by putting it right there
60:34 - and so these operators are kind of smart
60:36 - in that they kind of know what they're
60:38 - dealing with and sometimes they will
60:40 - do one thing or another depending on the
60:42 - kinds of
60:43 - values variables or constants that
60:45 - they're working with
60:48 - and so sometimes type can get us in
60:51 - trouble
60:52 - so here we have eee which is hello there
60:55 - because we've concatenated these two
60:56 - strings together
60:57 - and now we're adding one and the problem
60:59 - now is that it looks on one side and
61:01 - says that's a string
61:02 - and that's a number and says i don't
61:03 - know how to do that this is another one
61:05 - of those annoying errors that you would
61:07 - like
61:08 - you think that somehow python doesn't
61:10 - like you but it just is confused
61:12 - if you look at these things trace back
61:14 - traceback always means i quit
61:16 - it means i stopped i ran i'm quitting
61:18 - now because i don't want to go any
61:19 - farther because i've become confused
61:21 - so it so your program stops running and
61:24 - you say here's where i stopped running
61:26 - because we're typing interactively it's
61:27 - always line one here
61:29 - type it but you for read carefully and
61:31 - you don't get too stuck on too much
61:32 - stuff
61:33 - line one that tells us something in
61:35 - module type error
61:37 - can't convert int object to stir
61:39 - implicitly so that's an integer right
61:41 - there and that's a string
61:42 - and that's what it's complaining about
61:44 - that little bit right there if python is
61:46 - so grumpy about types
61:48 - then we should be able to ask it about
61:50 - types so it turns out
61:51 - that there is inside python a built-in
61:55 - function
61:55 - called type t-y-p-e so we can pass into
61:58 - type
61:59 - so this the syntax is calling a built-in
62:02 - function name type
62:03 - parentheses is the parameter that we're
62:05 - passing to it we're
62:06 - saying hey hello tell me something about
62:08 - the type of the variable
62:10 - e e e and so this is a function the
62:13 - parentheses are part of the function
62:14 - call
62:15 - and it says oh that would be of class
62:17 - string
62:18 - and then we can pass in a constant says
62:20 - hey what about hello
62:22 - the string hello it's like oh that's a
62:24 - string two what about a one well that's
62:26 - an integer and so we are asking
62:28 - python through the type function
62:31 - what the type of either a variable or a
62:33 - constant is
62:35 - and there are even several types of
62:36 - numbers and we'll even see booleans and
62:38 - others like
62:39 - later like one with no decimal that's an
62:43 - integer number
62:44 - 98.6 with a decimal that's a floating
62:46 - point number
62:47 - and so you know constants and constants
62:50 - can be both integer
62:52 - and floating point and i'm just asking
62:54 - over and over and over again what is the
62:56 - type of
62:56 - what's in xxx what's the type of what's
62:58 - in temp and what's the what's the type
63:01 - of the constant one
63:03 - and what's the type of 1.0
63:06 - you can also use a set of built-in
63:08 - functions
63:09 - like float and int to convert from one
63:12 - to another
63:13 - and so this basically says i want to
63:16 - convert oops
63:17 - let's go back i want to convert
63:20 - 99 to a floating point number so this is
63:23 - a function and it's participating in
63:25 - this
63:25 - plus but before i can finish the plus it
63:28 - turns this
63:29 - into a 99.0 the difference in 99 as an
63:32 - integer 99.0 is that it's a floating
63:35 - point number
63:35 - and that actually turns this computation
63:38 - as it looks to the left and looks to the
63:40 - right
63:40 - it says oh i've got a floating point
63:42 - number on one side of injury on the
63:43 - another
63:44 - other side and so i'm going to make my
63:45 - calculation overall be a floating point
63:47 - calculation
63:49 - i can also pass into the float function
63:51 - i can say
63:52 - take this variable i which has a 42 also
63:55 - an integer
63:56 - and then give me back a floating point
63:58 - so that'll be 42.0
64:00 - pass that into f we print it out and it
64:03 - is indeed
64:04 - 42.0 and it's a float and so in
64:07 - it knows the type and value in any
64:10 - variable this is an integer a value 42.
64:13 - this is a float of value 42.0
64:18 - um integer division in python 2 was kind
64:20 - of weird and it was actually one of the
64:22 - big things that they changed between
64:23 - python 2 and python 3
64:25 - just a python 3 course so we're not
64:27 - worried about that too much
64:28 - what's nice about integer division in
64:30 - python 3
64:31 - is it always produces a floating point
64:33 - result and that means that python 3's
64:35 - division
64:36 - is more predictable and it works more
64:38 - like a
64:39 - calculator so in this case i mean you
64:42 - can go back and look at my python 2
64:44 - lectures and see how crazy it was in
64:45 - python 2.
64:46 - 10 divided by 2 is 5.0 and the weird
64:48 - thing here
64:49 - is these are both integers but the
64:51 - division forces the result of the
64:53 - calculation to be a floating point
64:55 - number
64:55 - and this you know 10 over 2 could be 5
64:58 - but
64:59 - 9 over 2 is 4.5 and so that
65:02 - is accurate in old python 2 that would
65:05 - give us back 4 which is
65:07 - completely unpredictable and weird the
65:09 - same with 99 over 100
65:11 - as you would expect if this were a
65:13 - calculator you get 0.99
65:15 - actually what you get in python 2 is
65:17 - zero because it would round it down it
65:19 - doesn't
65:20 - i mean it doesn't round at all it
65:21 - truncates it so 99 over 100 is 0.99
65:24 - and then it truncates it to zero that's
65:26 - python 2. we're not talking about python
65:28 - 2.
65:28 - there's a good reason we're not talking
65:29 - about python 2. welcome to python 3.
65:32 - of course if there are floating point on
65:33 - either side the result is still a
65:35 - folding point
65:36 - floating point and the result is still a
65:38 - floating point so integer division
65:40 - produces a floating
65:41 - result in python 3.0
65:44 - not in python 2.0 that is an improvement
65:48 - in python 3.0 and that's why we're
65:50 - recording these lectures i have a whole
65:52 - great set of lectures about python 2
65:54 - and now i'm going to have a great set of
65:55 - lectures about python 3. welcome to
65:57 - python 3.
66:00 - okay so we've been talking about
66:02 - converting from integer to floating
66:03 - point but you can
66:04 - also convert from string to integer or
66:06 - string to floating point
66:08 - and so here we start out with a little
66:11 - string value
66:12 - now it only works for strings that are
66:13 - made of digits so quote one two three
66:15 - quote is not an integer
66:17 - it is a three character string that has
66:19 - one two
66:20 - three as the characters in that string
66:22 - which is very different than 123.
66:26 - we say what is the type of this it's a
66:27 - string we say let's add one to it
66:30 - and it says can't convert into string
66:33 - so that blows up right because this is a
66:35 - string it looks to both sides string
66:37 - plus an integer not good okay
66:40 - but we can convert this we can call the
66:43 - int function which is like the float
66:45 - function
66:46 - and pass a string in so it says hey take
66:48 - this and turn it into an integer
66:50 - so take the input of s val which is the
66:52 - string 1 2
66:53 - 3 and give me back an integer
66:56 - representation of that
66:57 - which is going to be 123. so we say what
67:00 - kind of thing do we get back
67:01 - we got back an integer we can now add
67:03 - one to it and get 124.
67:06 - and so you have to manage the type of
67:08 - things and you can convert
67:10 - from one type to another now
67:13 - int is not magic if you send something
67:15 - into it a string
67:16 - that has doesn't consist of digits then
67:19 - you're going to
67:19 - end up with another error invalid
67:21 - literal for integer with base 10 blah
67:23 - blah blah blah
67:24 - so it's really complaining it says i
67:26 - want these to be numbers here and you
67:27 - just gave me letters
67:28 - so that's going to cause this to fail
67:32 - another thing that we're going to do
67:34 - with variables is just like the print
67:36 - function
67:36 - takes something a list of things in this
67:39 - case a string comma a variable
67:41 - and then print some output in the
67:43 - program the opposite that is
67:44 - input actually input generally happens
67:46 - before output input is a built-in
67:48 - function
67:49 - and we pass to it a prompt a string of
67:52 - text that's going to be printed out for
67:54 - the user
67:54 - and then it stops and waits so it says
67:57 - who are you
67:58 - and then right here it just sits waiting
68:00 - for us to type something
68:02 - so we type blah blah blah blah and then
68:03 - hit the enter key
68:05 - right we hit the enter key and then this
68:07 - text
68:08 - ends up in this variable so this is an
68:11 - assignment statement
68:12 - that chuck is the result of the input
68:14 - call gets copied into the nam variable
68:20 - so let's do that again it's evaluating
68:23 - an assignment statement remember it's
68:24 - kind of this way or you can think of it
68:26 - as do this
68:26 - just this right side first it it writes
68:29 - this out
68:30 - writes that out then it waits wait wait
68:33 - wait wait wait
68:34 - until we hit the enter and takes this
68:38 - chuck and that becomes the result of
68:40 - this input
68:41 - which is then assigned in to nam
68:44 - now then we go sequentially to the next
68:46 - line it prints out welcome
68:48 - comma and a contents of the variable nam
68:51 - now this
68:52 - one this comma here actually does put
68:54 - the space in here automatically so it
68:56 - says welcome space
68:57 - chuck so it pulls the there's no space
68:59 - in chuck just
69:00 - just the chu ck and so print can take
69:03 - more than one thing
69:04 - separated by commas matter of fact print
69:06 - can have uh
69:08 - you know a whole bunch oops come back
69:09 - come back back
69:13 - print can have comma comma comma
69:14 - parenthesis as many as you like
69:16 - everything you've seen up to now is kind
69:17 - of one thing in the print but that
69:18 - doesn't mean the print only can do
69:20 - one thing so i've talked about variables
69:23 - we talked about constants we've talked
69:25 - about input we've talked about output
69:26 - and now it is time to write our first
69:29 - meaningful program and
69:32 - so this program has to do with those of
69:34 - you who have uh
69:35 - traveled internationally if you traveled
69:37 - to united states and you traveled
69:38 - outside the united states you notice
69:40 - that there is
69:41 - an elevator convention that is different
69:43 - inside the united states the united
69:44 - states the
69:45 - walk in the ground floor in the elevator
69:48 - that's
69:48 - one and if you walk into ground floor in
69:50 - europe or many other places in the world
69:52 - and the elevator
69:53 - is zero so we have written a small app
69:56 - that we're going to put on the app store
69:57 - and get wealthy with
69:58 - with called elevator floor conversion
70:01 - app
70:02 - and it it's going to ask us we're in
70:04 - europe and we're lost and this
70:05 - and you say well what floor would this
70:07 - be if i was in the united states of
70:09 - america
70:10 - and so here's we have to read the floor
70:12 - that we are at
70:13 - at in europe and then we're going to
70:15 - convert it to a u.s floor and then we're
70:17 - going to print it out
70:18 - this is very silly but it is
70:22 - a pure essential program that has
70:25 - input does some kind of task on that
70:27 - input
70:28 - and then produces some output which is
70:30 - useful
70:31 - for some value of useful okay
70:34 - so let's take a look at how we combine
70:36 - everything that we learned in this
70:37 - lecture
70:38 - input processing and output it's a
70:40 - three-line program
70:42 - but it's sort of the beginning of
70:44 - something that programs do
70:45 - okay you're gonna do lots of programs
70:47 - that do this so
70:48 - here we go program starts we do the
70:52 - input
70:52 - side effect it prints out this and then
70:54 - weights
70:56 - we type in zero that comes back here and
70:59 - the zero
70:59 - which is a string input gives you back a
71:02 - string it doesn't give you back a number
71:05 - it's a little different in python two
71:06 - but in python three input gives you a
71:08 - string
71:08 - so quote zero quote which is what we
71:10 - typed here we didn't protect the quotes
71:12 - it's a string
71:13 - it gets stored in the imp variable then
71:16 - we move to the next statement
71:18 - and on this right hand side we convert
71:19 - that string variable to an integer so
71:22 - that becomes the integer zero
71:23 - we add one to it and then that becomes
71:26 - one
71:27 - and then we assign that into usf i've
71:29 - named this variable
71:30 - united states floor right so imp is the
71:34 - input and usf that's mnemonic
71:36 - it doesn't know anything about elevators
71:37 - it's just i picked a variable
71:39 - that was quite friendly and so at this
71:42 - point
71:44 - usf has the united states floor that's
71:46 - equivalent to the european floor
71:48 - and then i just fall down and i do a
71:50 - print statement print out
71:51 - u.s floor floor comma that's this space
71:55 - right here
71:55 - and then whatever the contents of the
71:57 - u.s floor variable is
71:58 - and you could see that i could write
72:00 - this on four and it would say three
72:02 - i could write this and say seven and it
72:04 - would say six
72:05 - this is an amazing program it converts
72:08 - floors
72:08 - in a european numbering scheme wait
72:12 - actually no i got that wrong hang on let
72:14 - me clear this
72:16 - i wasn't thinking clearly i could type
72:19 - in
72:20 - 4 and it would give me back five i could
72:21 - type in six and it would give me back
72:23 - seven
72:24 - see i'm confused haven't been in europe
72:26 - in a couple of couple of months and so i
72:27 - forgot all about the floors but that's
72:29 - the idea
72:30 - now this is a super super super simple
72:33 - program
72:34 - not super useful but you get the idea
72:37 - that we're going to pull some data in
72:38 - we're going to do some intelligent thing
72:41 - we soon this will be hundreds of lines
72:43 - of code instead of one line of code and
72:44 - then we're going to present the results
72:46 - to our user
72:51 - now another element of most any
72:52 - programming language is what's called a
72:54 - comment
72:55 - a comment is a way for you to put in a
72:58 - program file
72:59 - some text that's to be ignored by python
73:02 - or
73:02 - c or whatever language we happen to be
73:04 - using in in python
73:06 - comments start with a pound sign so what
73:09 - you can do is put a pound sign anywhere
73:10 - in a line
73:11 - and then after the pound sign python
73:14 - ignores everything after that pound sign
73:15 - it can be the first character
73:17 - so here's our recurring i uh concept
73:20 - that we
73:21 - talk a lot about we're not going to
73:22 - cover this remember what this does this
73:24 - is counting how many letters the the
73:26 - there's 16 those and there's
73:28 - in that file there were six twos or
73:30 - whatever it was this is that code
73:32 - we'll we'll get back to this code but
73:34 - what we've done here is i've added some
73:35 - comments that
73:36 - that that are really for human
73:38 - consumption
73:39 - so this first paragraph is get the name
73:41 - of the file and open it the second
73:43 - paragraph is count the word frequency
73:45 - you know maybe i should have said
73:46 - histogram here
73:48 - count the word frequency and assemble a
73:50 - histogram and then
73:52 - here i'm putting this pound sign in find
73:54 - the most common word and then i'm all
73:55 - done i print the stuff out
73:56 - right and so all i'm saying is comments
74:00 - are for people to read your next
74:02 - programmer or the person who's going to
74:04 - change your program after you're done
74:05 - with it
74:07 - and they're nice and you don't have to
74:08 - use any particularly weird syntax or
74:11 - variable naming conventions
74:12 - you put a pound sign in and you can
74:14 - write anything you want from that point
74:16 - forward
74:18 - okay so we've talked a little bit about
74:20 - variables and types and mnemonics and
74:23 - how we
74:23 - would choose variable names and how
74:25 - expressions work and the various
74:27 - operators converting between different
74:29 - types printing input output
74:32 - and comments so that just kind of gets
74:34 - us
74:35 - sentences and coming up next we'll talk
74:38 - about
74:38 - conditional execution where we're really
74:41 - starting to move up to paragraphs so
74:43 - see in a bit
74:57 - [Music]
74:58 - so hello welcome to python for everybody
75:01 - i'm charles severance your instructor
75:03 - uh and i'm on in this assignment i mean
75:05 - in this video i want to
75:07 - work through exercise 2.2 and it's just
75:10 - a basic
75:10 - uh hello kind of hello world um
75:14 - and so i'm going to show you how i want
75:16 - you to do these things
75:18 - and i've got this folder called python
75:20 - for everybody
75:22 - and i'm going to use the atom text
75:23 - editor
75:25 - so i'm the whole thing is it's supposed
75:27 - to say hello enter your name
75:29 - there's the last one we did okay so i'm
75:32 - going to make
75:32 - in python for everybody i'm going to
75:34 - make a new folder
75:37 - new folder and i'm going to say um
75:45 - ex0202
75:46 - make myself an exercise and i'm going to
75:50 - create
75:51 - a new file and i'm going to say
75:54 - i'm going to say print hello
75:58 - and i'm going to say file save as and
76:01 - it's important to get these in the right
76:04 - folder and so i'm going to call this
76:09 - ex02.py
76:11 - always end these in python because then
76:13 - you get the syntax highlighting
76:15 - okay so now
76:18 - again you're not going to like this but
76:20 - i want you to learn
76:22 - to execute these things using the tool
76:25 - the real tools that we're going to
76:27 - really use because when you're applying
76:29 - this i want you to know how to actually
76:32 - do real work so i need to get to the
76:33 - point where this terminal program
76:35 - and i could say start run terminal
76:39 - that's another way to get the terminal
76:40 - program started but i've got her down
76:42 - here in my docs so
76:44 - that saves me some time and of course if
76:46 - you're on windows
76:47 - this is the command prompt and so
76:50 - in windows you type cd but in mac i type
76:53 - pwd and that shows
76:54 - where i am at in the directory structure
76:57 - and i can go into my desktop this would
77:00 - work the same
77:02 - and i can do an ls in windows i would
77:04 - say der
77:06 - and i see that i see this
77:10 - desktop folder
77:13 - and i'm going to go into py4e and if i
77:16 - keep doing pwd you see i'm navigating
77:18 - deeper and deeper into this uh
77:20 - directory structure and then i do an ls
77:22 - here
77:23 - and i'm going to cd one more time and if
77:25 - to a folder oh
77:27 - i did that really quick and didn't tell
77:28 - you what i was doing cdex
77:30 - tab so that's because if the name
77:34 - name of the file or folder is unique you
77:35 - can hit the tab in the command line
77:38 - and away we go and so now we're in this
77:43 - folder in the users folder pi for e
77:46 - desktop py for ex0202
77:50 - and then if i say ls and that's what you
77:52 - want to get to you want to get to where
77:53 - you know we're at in the folder
77:55 - structure
77:55 - and you know the file that you're going
77:57 - to run and i've saved this and so if i
78:00 - say
78:00 - python3 ex02.py
78:05 - it runs and now i know that what i'm
78:08 - doing in this screen
78:09 - can be run in this screen and oh i did
78:12 - that again
78:12 - i hit the up arrow and i can run it
78:14 - again so
78:16 - you'll find that the way you write these
78:18 - programs is you
78:19 - write them here and then write them here
78:22 - and run them here and again there are
78:25 - shortcuts
78:26 - and and and those are crutches and you
78:27 - might like them but
78:29 - i just want you to learn how to use your
78:32 - computer
78:33 - like a real person uses the computer
78:35 - because that's when we start
78:37 - dealing with databases and files you're
78:39 - going to want to know where you're at on
78:41 - your computer and so if there's some
78:42 - fancy
78:43 - clicky button thing that says
78:44 - automatically run python
78:47 - that's convenient but i want you to know
78:49 - all this stuff okay enough about how
78:51 - well probably i'll just keep talking
78:52 - about that all the time
78:54 - so now that we've got
78:59 - our problem write a program that uses
79:02 - imp
79:02 - input to prompt for their username and
79:04 - welcomes them
79:06 - so this is pretty simple
79:09 - go back to adam come on adam
79:12 - okay so we have to have a variable
79:18 - nzt work well later we'll talk about
79:21 - choosing variable names
79:22 - uh right now i'm going to choose a crazy
79:24 - variable name
79:26 - input is a function and then you put a
79:28 - prompt and i'm
79:29 - that's supposed to be enter your
79:33 - name colon
79:37 - i don't put a space in there so i'm
79:40 - going to save that
79:42 - and just run it for yucks
79:48 - and there you go that's one thing you'll
79:49 - get used to just type in gibberish
79:51 - really quick
79:52 - and then we're going to say print what
79:54 - do we got to say here
79:56 - print hello
80:06 - and go pull that variable back out save
80:09 - that command
80:10 - s is how i'm saying that save command
80:13 - s i saved it so i didn't make file save
80:17 - but
80:17 - i could have said file save but command
80:20 - s saves it
80:21 - and now i can run it again zap
80:25 - hello zap so now i can run my thing oh
80:28 - and command k clears it i don't remember
80:31 - what it is on windows but there's a
80:33 - there's a way to clear your screen i
80:35 - like to keep my screens clean
80:39 - hello chuck and so we have completed
80:43 - exercise 2.2 with a little program
80:47 - oh and by the way i'm using alt tab
80:50 - that's what i'm when you see this
80:51 - i'm using the alt command tab and the
80:54 - same thing works on windows as alt tab
80:56 - okay okay so i hope that was helpful to
81:01 - you
81:01 - just to kind of walk through one of the
81:03 - assignments assignment 2.2
81:06 - in python for everybody
81:11 - hello and welcome to python for
81:13 - everybody my name is charles severance
81:14 - in this short video i will be explaining
81:17 - how to
81:17 - run exercise 2.3 where we prompt for
81:21 - some hours
81:21 - prompt for some rate and multiply them
81:24 - together and print them out with
81:25 - a little pay message and so this is
81:29 - uh 2.3 some of you will immediately want
81:33 - to go to the autograder and sort of do
81:35 - your homework on the autograder
81:36 - i really would rather you didn't do that
81:39 - um
81:39 - unless of course you're doing this on an
81:41 - ipad or a
81:43 - or an android or something where you
81:45 - can't install
81:46 - python but you have to realize that the
81:48 - auto grader
81:49 - isn't forever you can only go so far
81:51 - with the auto grader and eventually you
81:53 - have to
81:53 - write a real python program so i'll
81:56 - eventually show you how to run this auto
81:57 - grader
81:58 - but uh and i'm going to instead show you
82:00 - how to run it in the terminal
82:03 - so i'm first going to go into my python
82:05 - for everybody folder
82:07 - and i'm going to make a new folder
82:08 - command shift n is what i just did there
82:12 - ex0203 for exercise three
82:14 - and so there's exercise three um and i'm
82:18 - also going to go into atom which is my
82:20 - text editor
82:21 - and uh see i just i have that folder
82:26 - and so i'm gonna make a new file
82:30 - and i always say print i'll just say p
82:33 - y for e oops p y for e
82:37 - and then i'll say file save as
82:40 - and i want to make sure it's in here and
82:43 - it's going to be e
82:44 - x underscore o two i don't like putting
82:48 - spaces and file names some operating
82:50 - systems can handle them
82:51 - but i that's why i'm using underscores
82:53 - here so i would avoid using spaces and
82:55 - file names
82:57 - so as soon as i give that a py4e
83:02 - as soon as i give it a python suffix i'm
83:04 - there
83:05 - and so it shows up there in my desktop
83:07 - and now i'm going to run the terminal
83:09 - program
83:10 - so that i can get there so cd desktop
83:15 - cd python for everybody that's that's
83:18 - the folder on my desktop and if i do an
83:21 - ls i see a couple folders and a file
83:23 - you can say ls minus l and see a little
83:26 - more detail that
83:27 - these these are folder these two are
83:29 - folders and this one's a file
83:31 - so change directory cdex 0203
83:37 - and so now i'm in that folder and if i
83:40 - do an ls minus l
83:42 - i see that file i can also do an ls
83:45 - without the minus l and see the file
83:48 - and now i say python3 ex0203.py
83:56 - and it runs and i you'll see me no
83:58 - matter how many times you watch me
84:00 - you'll see the first thing that i do
84:02 - is get to the point where i know i'm in
84:04 - the right directory
84:05 - and i can run a little hello program
84:08 - before i start coding
84:09 - i just don't like being crazy
84:13 - right so now i'm going to go back and
84:16 - take a look at my assignment
84:18 - enter hours you got to prompt for hours
84:20 - ask for a number enter rate
84:22 - prompt for rate and then calculate pay
84:25 - so there's a couple of input statements
84:27 - here
84:27 - um xh is my variable i'm going to choose
84:30 - later i'll choose more effective
84:32 - variables but for now i'm going to make
84:34 - them silly
84:35 - um enter hours
84:38 - colon space and then i'm going to
84:42 - copy and paste and call this
84:46 - xr for rate when you're doing this you
84:49 - need to be very careful to
84:51 - uh and so now i'm gonna calculate
84:55 - xp time which is x
84:58 - h times x
85:01 - r and then i'll say print
85:07 - pay oops
85:11 - i don't need to put a space because this
85:13 - comma effectively creates a space
85:15 - xp and then i'm going to save that
85:20 - and i'm going to switch to my terminal
85:21 - program
85:23 - clear my screen in my terminal program
85:26 - and i'm going to type up arrow because i
85:28 - already typed python3x203.py
85:33 - so my hours i'll just start with
85:35 - something really simple that i can
85:37 - calculate in my head
85:39 - 10 and five whoops
85:43 - can't multiply sequence of non
85:46 - in of by sequence of non-in of type stir
85:52 - here we have a traceback and again
85:55 - i encourage you to realize that these
85:57 - tray specs are not
85:59 - uh personal attacks by python on you
86:02 - even though they might be frustrating
86:05 - and so the way to parse this is start by
86:08 - saying line three something's wrong at
86:09 - line three
86:10 - it's pretty good at knowing what line it
86:12 - is or it's either that
86:13 - line or the line above it and it's
86:16 - something about
86:17 - multiplying you know it's just it what
86:20 - it's really saying is i'm confused
86:22 - i have to stop because i cannot
86:24 - understand your instructions
86:25 - so the problem here of course is that
86:29 - this is of type string and so you can't
86:31 - multiply a string
86:33 - times a string okay and so we can
86:35 - convert this
86:36 - using the float float
86:40 - so that's a function call now we're
86:41 - passing the string hxh
86:43 - in and the value we get back is the
86:46 - floating point version of that
86:47 - and then we call float for this as well
86:52 - and so now i'll save that
86:55 - always remember to save so i'm going to
86:58 - run it
86:59 - and so i'm going to run my hours of 10
87:01 - and my rate of 10.
87:03 - and it's a hundred and so that looks
87:04 - pretty good okay
87:06 - so let's go ahead and try to run this in
87:08 - the autograder and this is the my idea
87:09 - is you'll take this and you'll copy it
87:12 - and you'll go back to the auto grader
87:14 - now
87:15 - and just paste this in okay
87:19 - and so it says use 35 hours and a rate
87:21 - of 275. so let's check the code
87:23 - 35 hours okay
87:26 - 75. oh no 275 2.75
87:32 - and so it's running and it's running and
87:34 - it's running and it works
87:36 - and of course now i've got my grade so
87:38 - this idea where you work
87:40 - here to get your assignment done
87:42 - correctly and then you run it in the
87:43 - autograder is the way i
87:45 - intend for you to do it but again if you
87:48 - can't do it that way
87:49 - it's a great way to get started to just
87:51 - write your code in the autograder and
87:52 - you know
87:55 - you can change your code in the auto
87:57 - grader and then run it again of course
87:58 - this is going to fail
88:00 - 35 and 2.75
88:07 - and of course you get a mismatch and now
88:09 - it's angry at you and the
88:10 - the mismatch here of course is because i
88:13 - print howdy pay and pay and it's real
88:15 - picky about it and you think oh i got
88:17 - the 96.25 right
88:19 - well it it doesn't really care so much
88:22 - about that
88:22 - so uh let me go ahead and fix this and
88:25 - run it so we leave on a successful note
88:29 - uh 35 hours
88:33 - and 2.75 as the rate per hour
88:36 - it's kind of a low rate per hour and
88:38 - we're getting successful
88:39 - and of course that means that you now
88:42 - have
88:42 - a grade on assignment 2.3 look at that i
88:45 - got a grade on assignment 2.3
88:47 - unless of course you're running this in
88:49 - some other environment okay
88:51 - thank you uh so much and i hope that
88:54 - this has been useful to you
88:59 - hello and welcome to chapter three
89:00 - conditional execution in conditional
89:02 - execution we meet the if statement
89:05 - the if statement is where python can go
89:07 - one way or another way
89:09 - and it's the beginning of sort of our
89:11 - way of um
89:13 - making python make decisions for us
89:14 - sequential code we just
89:16 - you know do some things sometimes that's
89:18 - useful but now we can
89:19 - have our code check something and then
89:22 - make a decision based on
89:24 - that thing so the conditional steps in
89:27 - python
89:27 - are pretty straightforward the key word
89:30 - that we're going to use is the if
89:31 - statement
89:32 - and so if is a reserved word and um the
89:35 - if statement
89:36 - has as part of it a question that it
89:38 - asks and this is asking if
89:39 - x is less than 10 and the colon is the
89:42 - end of the if statement and then we
89:44 - begin
89:44 - an indented block of text and the way
89:46 - this works in this particular thing is
89:48 - this
89:48 - this line is the conditional line if the
89:51 - question
89:52 - is true the line executes and if the
89:54 - question is false the line is skipped
89:56 - and you can think of it the way this is
89:58 - right x is 5
89:59 - ask a question is it 10 or not these
90:01 - questions do not harm the value of x
90:04 - if it is then we run this code and then
90:06 - we sort of rejoin here and we
90:08 - then we test this next if and if that's
90:10 - true we do this code and then we do
90:12 - there
90:12 - but in this case it's going to be false
90:14 - because x is not less than 20 and so it
90:16 - just continues down here
90:17 - so if we look at how this works
90:22 - it runs it runs this line then it sees
90:24 - this question and skips that line so
90:26 - this line
90:27 - does not run and so smaller prints out
90:29 - and fini prints out
90:31 - okay so that's the basic idea of an if
90:34 - statement
90:35 - and the indentation we when we are done
90:38 - with an if statement we de-indent back
90:40 - and there's this little block
90:41 - this is one sort of if statement and
90:43 - this is
90:44 - another if statement and these are the
90:46 - two condition lines that either run
90:48 - or they don't run depending on the
90:51 - question the answer to that question
90:54 - so we have a number of different
90:55 - comparison operators that we can use
90:57 - to ask these true false questions that
90:59 - say is this true
91:01 - so again we're kind of limited to the
91:03 - key keys that were on
91:04 - computer keyboards in the 1930s 40s and
91:08 - 1950s
91:09 - less than less than or equal to so we
91:11 - don't we didn't have fancy math
91:13 - characters so
91:14 - we just concatenated less than equal to
91:16 - b less than or equal to
91:18 - this double equals is the the asking is
91:21 - this equal to and so that's
91:23 - a little tricky the equal sign is that
91:25 - assignment operator
91:27 - if i was building a language today from
91:28 - scratch i would probably make assignment
91:30 - be
91:30 - arrow and the equals question to have
91:34 - an equals or i might say
91:37 - somewhere i would say question equals
91:38 - but i'm not writing this building this
91:41 - language so
91:42 - that's it's not up to me so this is the
91:44 - question double equals is
91:46 - asking the question is equal to
91:49 - greater than or equal greater than and
91:51 - not equal
91:52 - so this is the exclamation point it's
91:54 - sort of like not equal so that that's
91:56 - sort of not equal so that's how we do
91:58 - not equal so if we take a look
92:00 - at some of these in some examples all of
92:02 - these are going to be true because of
92:04 - the way
92:05 - um x is set if x
92:08 - is equal to 5 that's the question
92:10 - version that's true or false
92:12 - it'll execute that if x is greater than
92:14 - four it's going to execute that
92:16 - if x is greater than equal to five it's
92:17 - going to execute that here's kind of a
92:19 - shorthand where there's if there's only
92:21 - one line in this block you can kind of
92:22 - pull it up right on the same line after
92:24 - the equals
92:25 - if x is less than 6 which it is true
92:28 - execute that
92:30 - then if x is less than or equal to 5 do
92:31 - that and if x is not equal to 6
92:34 - do that now like i said all these
92:36 - questions have been carefully
92:37 - constructed so that they're true
92:39 - just to kind of show you the syntax of
92:41 - those comparison operators
92:43 - now you don't just have to have a single
92:45 - line of text in the indented block
92:47 - and this will be something you're going
92:49 - to get used to so
92:51 - if we indent more than one line then the
92:53 - indented the um
92:54 - conditional the conditional code is
92:56 - actually these three lines
92:58 - so the idea is you have an if statement
93:00 - you come in you do an indent
93:01 - and as long as you stay indented you
93:03 - stay in that if block
93:04 - if it's false it just skips all of those
93:09 - so the way this is going to execute x is
93:12 - five
93:14 - print before five is x equal five that's
93:16 - the question mark and that's true
93:18 - so it's going to run all these and then
93:21 - come back and then continue on
93:22 - in the d indent so all this stuff is
93:24 - running
93:26 - right and then it says f x equals six
93:28 - well that was false
93:29 - so that skips all of them so none of
93:31 - these lines of code run
93:33 - so these actually don't run
93:37 - and it says afterwards six so that's a
93:39 - mistake those don't run right there
93:42 - okay because x is not equal six
93:45 - okay so indentation
93:49 - is an essential part of python
93:52 - uh we use indentation lots of
93:55 - programming languages often to
93:56 - kind of de-mark demarcate blocks to to
93:59 - show where blocks start and stop
94:01 - but in python it's syntactically correct
94:04 - it is
94:05 - you can make an error if your
94:06 - indentation is wrong after an f you must
94:08 - indent
94:09 - and you maintain the indent as long as
94:11 - you want to to
94:12 - be in that same if block and then when
94:14 - you're done with the f block you reduce
94:15 - the indent
94:16 - in this rule of indenting uh comment
94:19 - lines
94:20 - and blank lines are are completely
94:22 - ignored
94:24 - so we're going to tend to like put four
94:26 - spaces four spaces ends up being
94:30 - four spaces ends up being the the normal
94:33 - thing that we do
94:34 - and you'll see all the code that i write
94:36 - uh has four spaces for each indent if i
94:38 - go in twice i use eight spaces
94:40 - um and we have this instinct of wanting
94:42 - to hit the tab key to move in four
94:44 - spaces
94:45 - now the problem is is that it might look
94:47 - the same on your screen a
94:49 - tab and four spaces might line up the
94:51 - same place depending on how tabs are set
94:54 - uh but python can get confused by that
94:56 - so we we tend to uh
94:58 - avoid using actual tabs and files
95:01 - and so most programming text editors
95:02 - like if you're using notepad or
95:04 - textwrangler
95:05 - there's a place to set the tabs to say
95:08 - don't put tabs in this document but
95:09 - every time you hit tab
95:10 - move over four spaces so if you hit a
95:12 - tab but it's like space-based
95:13 - space-based space
95:15 - now the nice thing about atom and this
95:16 - is uh the the text editor we tend to
95:19 - recommend in this class a because it
95:20 - works on
95:21 - windows linux and mac but also because
95:24 - it automatically sets this up as soon as
95:26 - you save your file with a dot py
95:27 - extension
95:28 - you can sort of hit the tab key with
95:30 - impunity and everything
95:32 - works perfectly but the key thing here
95:34 - is that python
95:36 - insists that you get this right and if
95:38 - you don't get this right
95:40 - you're going to get indentation errors
95:41 - and they're just another they're just
95:43 - another syntax error so if you're using
95:46 - something like textwrangler or notepad
95:51 - run around in the preferences and you'll
95:52 - find something about expanding tabs or
95:55 - maybe
95:56 - how many spaces each tab spot stop is
95:58 - supposed to be and so you
95:59 - check these and what this really is
96:01 - doing is telling your text editor never
96:02 - put an actual tab in the document but
96:05 - somehow simulate
96:06 - tap stops using spaces and so here is
96:10 - a bit of code it's got some nested it's
96:12 - got a nested block but it gives you the
96:14 - sense that
96:15 - you have to be very explicit when you're
96:17 - reading python code of whether
96:19 - the indent is the same between two lines
96:22 - the same
96:22 - increased or decreased and and so you've
96:25 - got and when
96:26 - every time you increase it you mean
96:28 - something every time you decrease it you
96:29 - mean something and literally if it stays
96:31 - the same
96:31 - you mean something as well and so if we
96:33 - take a look at this
96:35 - here we have a line and it has the next
96:37 - line has the same indent this is an if
96:39 - with a colon at the end so we have to
96:40 - increase the indent and now we're
96:42 - maintaining it
96:44 - okay so these two lines are part of that
96:46 - if but now we have d
96:47 - indented so whether you choose to
96:49 - de-indent this word
96:51 - or this word or whatever the where you
96:53 - do this d indent
96:55 - affects the scope of how far this if
96:57 - statement lasts right
96:59 - it lasts up to but not including the
97:02 - line
97:02 - that's d indented to the same level as
97:04 - the yet okay
97:06 - so this is a d indent now we have a
97:08 - blank line which doesn't matter
97:09 - and we maintain it and we have a four
97:11 - which we'll learn about in the next
97:12 - chapter which is a looping structure
97:14 - let's do a four four runs this five
97:16 - times it has a colon and it also
97:18 - expects an indented block now we have
97:21 - what's called a nested block where we
97:22 - have an
97:23 - if and a colon we go in some more so
97:25 - this is like
97:26 - two indents right so these are one
97:28 - indent and these are two indents and so
97:30 - this
97:31 - is a block within a block and then we
97:33 - de-indent
97:34 - so that means this print is not part of
97:36 - the if statement but it's still part of
97:38 - the for
97:38 - statement and then we de-indent again
97:41 - and then that means this print
97:42 - is so that on the same level as that for
97:45 - statement
97:46 - so if you start thinking about this you
97:49 - want to be able to start thinking that
97:50 - these blocks
97:51 - are the start of the block with the
97:53 - colon line
97:54 - up to where the up to but not including
97:57 - this line that's been de-indented
97:59 - so the four goes this far right the four
98:02 - goes up two but not including the line
98:04 - that's the indented
98:05 - the if goes up two but not including the
98:08 - line that's de-indented
98:10 - so as you do this you'll sort of
98:12 - mentally start drawing these blocks and
98:14 - pretty soon
98:14 - he will start constructing them as
98:16 - blocks and it it takes a while but
98:18 - doesn't
98:19 - take forever but in python unlike other
98:28 - languages
98:30 - in python unlike other languages you
98:34 - have um this this is very important and
98:36 - it matters and you can have syntax
98:38 - errors if you get it wrong because
98:39 - you're really communicating
98:41 - the shape and structure of your code
98:43 - using these indents and de-indents
98:46 - we already saw a nested indent this is a
98:48 - nested if
98:49 - so you can put an if within an if and
98:51 - you can go as far deep as you want to go
98:53 - like russian dolls
98:55 - and so here we have x equals 42. if it's
98:58 - one
98:58 - we indent one and then with this next
99:00 - thing we do these are at the same level
99:02 - of indent
99:03 - but now we see an if and it has to
99:04 - indent further so this is like
99:06 - two in eight spaces and then
99:09 - then we de-indent back actually the
99:11 - indent back too and so if you
99:13 - watch this and you take a look at how
99:15 - this works
99:16 - it runs to here oops back up
99:19 - comes in here the answer is yes x is
99:21 - greater than one
99:22 - prints this is x less than 100 well it's
99:24 - 42 so the answer
99:26 - is yes so it runs this and then it kind
99:27 - of continues back to there
99:29 - and you can also think of drawing boxes
99:31 - around this this is one if box
99:34 - and then within that if box there is
99:36 - another if box
99:37 - and again it's the indent the indent
99:40 - block
99:40 - up to but not including where the d
99:42 - indent happens and this
99:44 - here is like two backwards d indents
99:47 - so it ends two blocks so two blocks are
99:49 - entered by where we place this we could
99:51 - move this in
99:52 - or we could move this out we could have
99:54 - it all the way into here we could have
99:55 - it to here
99:56 - or here and where we put that line
99:58 - depends on how the ends of these blocks
100:00 - are going to work out so one form
100:04 - of a that's a one branch if that we just
100:07 - show we just saw but then you can also
100:09 - have what's called a two branch hit
100:10 - and the basic idea of a two branch if is
100:13 - that you're going to come in you're
100:14 - gonna ask a question and you're gonna go
100:16 - one direction if it's yes
100:17 - and another direction if it's no we call
100:19 - this an if then else it's kind of like a
100:21 - fork in the road
100:22 - and the way to think about it is
100:24 - depending on the output of this question
100:25 - we're going to pick one or two of these
100:27 - but if we pick one the other one's never
100:29 - going to happen so it's like an either
100:30 - or
100:31 - we're either going to go one way or
100:32 - we're going to go the other way but
100:34 - there is no path where we somehow go
100:35 - boot through both of them that
100:37 - that doesn't happen and the sinks to the
100:40 - syntax that we use for this
100:42 - is the what we call the if then else and
100:45 - so
100:45 - the first part is normal if with an
100:48 - indent
100:49 - and then we de-indent and then this is
100:50 - another reserved word else
100:52 - with a colon and then we re-indent and
100:54 - so this is really end up being part of
100:56 - a whole block here and the else is
100:59 - the part this this is the part that runs
101:01 - if it's false and this is the part that
101:03 - runs if it's
101:04 - true the first branch of the if the
101:06 - first indented block is what runs if
101:08 - it's true
101:09 - and the second indented block is the one
101:11 - that runs if it's false
101:13 - and so here we go just if x is greater
101:15 - than 2 in this case it's yes we're going
101:17 - to print bigger
101:18 - and we're going to be all done and so we
101:20 - do one and so this one did run and this
101:22 - one did not run
101:23 - so basically with an if then else one of
101:25 - the two branches is going to run
101:27 - but there's no case in which both
101:29 - branches run
101:30 - and again you sort of draw these blocks
101:33 - around these things mentally
101:35 - and in this one you sort of take from
101:37 - the if not the else is really part of
101:39 - the block
101:40 - up to but not including that print which
101:41 - is back indented
101:43 - de-indented back to the same level as
101:46 - the if state
101:47 - okay usually this python is actually
101:51 - one of the more elegant languages even
101:53 - though after a while this indenting
101:55 - and when you get too far in it gets a
101:57 - little bit complex
101:58 - but but this is a good way to visualize
102:00 - this with these indents
102:02 - coming up next we're going to talk about
102:04 - some more complex
102:06 - conditional structures
102:20 - [Music]
102:27 - so welcome back let's talk a little bit
102:29 - more about some more complex conditional
102:31 - statements
102:32 - that sort of build on this concept of if
102:34 - and if then else
102:36 - the first thing we're going to look at
102:37 - is the so the multi-way branch
102:40 - and so the idea is it's kind of like the
102:42 - if then elsewhere you're gonna pick one
102:44 - of two but now we can pick one of three
102:46 - or one of four or one of five
102:48 - um and it introduces a new concept
102:50 - called the lf the ls
102:52 - is another reserved word inside python
102:55 - and the way it works is it
102:57 - it's probably best to look at this here
102:58 - where it checks the first one and if
103:00 - it's a true then it runs that and then
103:02 - it's done
103:03 - it doesn't check them all it's not like
103:05 - it sees that there are
103:06 - two logical conditions it actually
103:09 - checks them the first one
103:10 - and how you order these matters as we'll
103:12 - see in a bit
103:14 - and so if the first one is true it runs
103:17 - if
103:17 - the if the first one is false and the
103:20 - second one is true it runs this one and
103:22 - it's done
103:23 - and if the um neither of them are true
103:26 - it falls through and there's an else
103:28 - clause that is
103:28 - uh otherwise and it runs that so so
103:31 - basically it's either gonna it's gonna
103:33 - run one and then skip the other two
103:35 - or it is going to you know skip
103:38 - skip one skip two and then run this one
103:41 - but it only runs in this case one of
103:43 - them
103:43 - but the important thing is it checks
103:44 - these questions in order
103:47 - and it doesn't check the second question
103:49 - until it finds that the first
103:50 - it doesn't check the second question
103:53 - until it knows
103:54 - the first question is false so if the
103:56 - first question is true you're done
103:58 - you're
103:58 - done and you're done with this you're
104:00 - done with the whole block at that point
104:02 - so only one of these three is going to
104:04 - execute in that block
104:10 - so here's sort of some examples of this
104:13 - if we for example
104:14 - have x equals 0 it's going to come down
104:16 - here x is less than 2 that's true
104:19 - so it runs this code and then it skip
104:21 - skip skips down to the
104:22 - that and so it's like this runs that
104:24 - code and then skips to the end
104:26 - okay on the other hand if
104:30 - it's 5 then this is false and it skips
104:33 - that and it checks this
104:35 - this is true it runs this code and then
104:37 - it's done skips to the end
104:39 - it goes like false true
104:42 - run end and then if
104:45 - x is like 20 for example it runs
104:49 - it runs false false run
104:52 - else clause and you're done so skip skip
104:55 - op else run that code and you're done so
104:58 - in this case we ran that and we didn't
105:00 - run that and we didn't run that
105:02 - again one of them's going to run they're
105:04 - checked in order these questions
105:06 - are checked in order not out of order it
105:09 - doesn't look ahead it just checks in the
105:11 - order that
105:11 - you wrote it you're the one that wrote
105:13 - that order
105:15 - and so there's a couple of variations on
105:17 - this multi-way
105:20 - you can have no else
105:23 - you can have no else as in this case and
105:26 - this just means that
105:27 - it might not run any of them in this
105:29 - case x is 5
105:31 - so it's not less than 2 but then it runs
105:33 - this one but if x was like
105:35 - you know 50 for example if x was 50
105:40 - then this would be false don't skip and
105:42 - this would still be false and it would
105:43 - skip
105:44 - and neither of these two would run so if
105:45 - you don't have an else you're not
105:46 - guaranteed that one of them is going to
105:48 - run because else is like the catch-all
105:50 - if the other ones are all false then the
105:52 - else is the one that runs
105:54 - similarly you can have many lfs
105:58 - but this is where it's really important
106:00 - for you to make sure you know what order
106:02 - they're being taken in
106:03 - so that i've got you know this
106:06 - if this is true it runs it goes all the
106:08 - way to the bottom
106:10 - if you know this was if
106:13 - if it's false false false true it runs
106:16 - this one and it's done
106:18 - if on the other hand it looks at it as
106:21 - false oops go back go back
106:24 - if it runs false false false false
106:27 - they're all false
106:28 - then it runs the else right this one has
106:30 - an else this one didn't have an else
106:32 - they don't have to have them the key is
106:33 - you can have more than one of these ls
106:35 - okay so i got a couple little things
106:38 - i'll let you
106:39 - pause right now and look at the question
106:42 - is
106:43 - are there looking at the three
106:46 - lines or four lines of code x equals
106:50 - something
106:51 - are there lines of code that will never
106:53 - value execute regardless of the value
106:55 - for x and i'll let you pause
106:57 - and think about it and then i'll explain
106:58 - it to you
107:03 - okay hopefully you paused and thought
107:05 - about it as long as you like but so let
107:06 - me now explain it to you
107:08 - so we come in here and if x is less than
107:12 - or equal to 2 it's going to run this
107:13 - first thing and if x is greater than or
107:15 - equal to 2 it's going to run this
107:16 - and if neither of those are true then
107:18 - it's going to run this well the weird
107:19 - thing is
107:21 - for there's no all numbers are either
107:23 - less than 2 or greater than or equal to
107:24 - 2. i carefully constructed this
107:26 - to the point where it would never run
107:28 - this line of code
107:29 - it is either going to run this one or
107:31 - run that one but it's not going to ever
107:33 - run this one
107:34 - so that was kind of like a weird
107:36 - dysfunctional one that i constructed
107:37 - this other one is a little different if
107:40 - x is less than 2 we do this
107:42 - if x is less than 20 we do that if x is
107:44 - less than 10 we do that
107:46 - and if none of those are true we do that
107:47 - well the problem here is between these
107:49 - two lines
107:50 - the problem is if something's less than
107:52 - 10 like six for example
107:54 - it's also less than 20. so even though
107:56 - this there might be values for which
107:58 - this is true
107:59 - those also are going to have this true
108:01 - so for something like six it's going to
108:03 - run here
108:04 - and it's not even going to look at this
108:06 - that's the point it doesn't even look at
108:07 - this
108:08 - and so that's i mean i could have made
108:10 - this more sensible if i had to move this
108:11 - little block of code
108:13 - up to there so this is where the order
108:15 - in which you
108:16 - choose your questions the the way you
108:19 - put these elfs together matters because
108:21 - it doesn't look at all of them
108:22 - it only looks as long as it can as long
108:25 - as it sees
108:26 - falses then it keeps on going to the
108:27 - next one but as soon as it doesn't see a
108:29 - false
108:30 - it doesn't continue so the last
108:33 - conditional structure we'll talk about
108:35 - is the try and accept structure
108:36 - if you look if you know any other
108:37 - languages like c plus plus or java or
108:40 - javascript
108:41 - you're like well that's kind of an
108:42 - advanced concept but it turns out in
108:45 - python because of python's propensity
108:48 - to um throw tracebacks
108:51 - in situations where you kind of would
108:54 - like to recover
108:55 - it turns out you kind of have to use it
108:56 - a little more and a little earlier in
108:58 - your programming skill
109:00 - so the problem is is what if you there
109:02 - is a line of code
109:03 - and you absolutely know it's going to
109:05 - make a trace back it's going to blow up
109:08 - but you don't want to blow up i mean i
109:10 - don't want to blow have code build
109:12 - up if you're using my autograder and you
109:13 - see a traceback in my autograder that's
109:15 - kind of like i consider that a failure
109:17 - i could put an error like hey you
109:19 - entered blank data or you didn't enter a
109:21 - number
109:21 - but a traceback that just seems like i'm
109:24 - too lazy as a programmer so
109:25 - we as programmers are supposed to
109:27 - anticipate parts of our code
109:29 - that are going to blow up potentially
109:31 - based on perhaps the user's input
109:33 - and then do something about it and
109:34 - that's what the try and accept
109:36 - are for if you take this little
109:38 - dangerous piece of code that might break
109:40 - and might blow up and you surround it
109:42 - with a try
109:43 - and says this might blow up and if it
109:46 - fails
109:46 - run this code down here okay so that's
109:49 - the try
109:50 - and if you get an exception the accept
109:51 - is kind of like if you get an exception
109:54 - and the problem is is if you are running
109:56 - code
109:57 - here's a little bit of code we we put
109:59 - hello bob in and we convert it to an
110:01 - integer
110:01 - and we know from past experience
110:05 - that this blows up right you can't take
110:07 - hello bob and convert it to an integer
110:08 - is just going to blow up
110:10 - the problem is is and you know here we
110:12 - are it says oh you blew up on line two
110:14 - that's great
110:14 - and i'm not very happy with hello bob
110:17 - and and whatever but the
110:18 - important thing is your program stops
110:22 - these other lines they don't oops these
110:25 - other lines
110:26 - they don't exist right it doesn't go any
110:29 - further it it
110:30 - remember the traceback is i'm python is
110:32 - really confused and i don't know what to
110:34 - do next
110:35 - so python is just going to be
110:36 - conservative and stop so python stops
110:39 - and your program stops no matter how
110:41 - much error checking you put down here
110:42 - it doesn't matter because it's gone it's
110:44 - all gone and
110:46 - like i said we we take this kind of
110:47 - personally because the code that you
110:49 - write
110:50 - is like the you know you being put into
110:52 - the computer
110:53 - giving it instructions and if the code
110:56 - blows up well that sort of wipes you out
110:58 - you're not in the game anymore you're
111:00 - not able to do anything
111:01 - so we want to be able to especially in
111:04 - these situations where we can anticipate
111:06 - that a an error that might happen in the
111:08 - normal course or your
111:09 - program's execution might be something
111:11 - that you want to compensate for
111:13 - and that's what the try and accept does
111:15 - so here's a bit of code
111:17 - for the try and accept and we just have
111:20 - two little bits of
111:21 - straight line code and so we put a
111:23 - string in here that's hello bob and then
111:24 - we're going to convert it to an integer
111:26 - this is the dangerous code
111:27 - this code in this case with hello bob is
111:29 - going to do a trace bet
111:31 - and so we say try and then we indent the
111:33 - dangerous code and then we put add this
111:35 - little accept bit
111:37 - if it works the accept is ignored if
111:39 - this blows up it runs the accept
111:41 - so in this code it's going to come in
111:43 - it's going to try to it's going to try
111:45 - this
111:45 - this is going to blow up but instead of
111:47 - giving a trace back it's going to say oh
111:48 - i've got an available accept
111:50 - i'm going to run this accept code and
111:52 - then i'm going to continue on
111:53 - and so that prints out first negative 1
111:55 - so because we set this variable ister
111:57 - to negative 1 like a little flag telling
111:59 - us that something went wrong
112:01 - and then we keep on going and now we
112:03 - have put in one two three the digits 123
112:06 - the digits one two three and now it's
112:08 - going to work but we still have it in a
112:10 - try block
112:10 - and then this one works it does not blow
112:13 - up
112:13 - and then ignores the except block so the
112:15 - accept block is only triggered
112:17 - when something goes wrong in the code it
112:19 - is ignored if something doesn't go wrong
112:21 - so it's like you bought an insurance
112:23 - policy on this line of code
112:25 - and when things go wrong your accept
112:27 - block springs into action
112:29 - and does whatever it is that you want it
112:31 - to do in the case of an error
112:33 - okay so that's a pretty useful thing you
112:36 - got to be a little bit careful that you
112:37 - don't overuse it
112:38 - because if you put more than one line
112:40 - inside the tri part
112:42 - and it one of the lines blows up it
112:45 - doesn't come back to the try block
112:46 - and so in this one in this one here we
112:48 - have kind of a simple silly one
112:50 - where we set the string we're worried
112:52 - about some stuff well the print
112:53 - statement's never going to blow up so
112:54 - it's a bad idea to put it in try accept
112:56 - anyways
112:57 - then we do this conversion and that's
112:59 - the dangerous part
113:00 - and in this one it's going to blow up
113:03 - and
113:03 - and so then it's going to go to the
113:05 - accept block and then run the accept
113:07 - block and then continue
113:08 - what it does not do what it doesn't do
113:11 - is somehow go back and finish this
113:13 - so these lines are gone so if you look
113:16 - at it like this this works the try
113:17 - starts
113:18 - hello this blows up it goes to the
113:22 - accept
113:22 - it runs the accept and it continues on
113:24 - never
113:25 - runs that code so it's not like
113:28 - you took out an insurance on the whole
113:31 - block
113:31 - any of those lines can blow up in the
113:33 - block but whichever line blows up
113:35 - that is the last line that's executing
113:37 - in that block
113:39 - okay so you tend to want in this
113:41 - particular example
113:43 - you would probably the print statement
113:45 - would go out there and this print state
113:46 - would come down here
113:47 - and you would only put in your try block
113:50 - the single line of code that you think
113:52 - might blow up
113:52 - because you kind of know print
113:53 - statements aren't going to blow up so
113:56 - this is an example
113:57 - uh that's a more common real world
113:59 - example
114:00 - where the user is going to type some
114:02 - data
114:03 - and that's users that get us in trouble
114:05 - so our program starts by asking the user
114:07 - enter a number
114:08 - and we know that this could be dangerous
114:10 - so we're going to do it we're going to
114:12 - put the
114:13 - the conversion from string to integer in
114:16 - a try block
114:17 - and we're going to set negative one if
114:18 - that's a failure and then if it's neg if
114:20 - it's greater than zero we'll say nice
114:22 - work and if it's less than zero
114:23 - well not a number so first time we run
114:25 - this program out comes
114:27 - enter a number we type in 42 which is a
114:30 - string
114:31 - that 42 goes back into roster runs in
114:34 - here
114:34 - this runs it's fine that becomes a 42
114:37 - number so we skip the except block
114:39 - and i val is greater than zero we print
114:41 - out nice work and we skip the else
114:43 - okay so it says nice work
114:47 - on the other hand if we run it again
114:50 - this time the input says enter a number
114:53 - and we be
114:54 - we're silly we enter the word 42 but in
114:56 - in words
114:57 - 40 f-o-u-r-t-y so that's a string and
115:00 - that goes into raw stir
115:01 - and then the execution continues we run
115:03 - in here and now this is going to blow up
115:06 - that's going to blow up normally we
115:08 - would see a traceback right there
115:10 - there'd be a traceback but we're not
115:12 - going to because we put this calculation
115:14 - in a try and accept block
115:15 - it's going to immediately run the accept
115:16 - block set i val to negative one
115:18 - continue on with the program see you are
115:21 - not blown up at this point
115:22 - and if five l is greater than zero well
115:24 - it's negative one so we're going to hit
115:25 - the else clause
115:26 - and print out not a number so we've done
115:28 - error detection
115:30 - the user set something that caused a
115:32 - line of our code to kind of blow up
115:34 - but we put that line in a try and accept
115:36 - block and so we caught it and so we
115:38 - we dealt with that fact
115:41 - so in summary in this we talked about if
115:44 - statements we talked about
115:45 - else we talked about trying to accept
115:48 - how important indentation is to
115:50 - to mark blocks where they begin in the
115:52 - end um
115:53 - and then else if and try except so
115:57 - up next we're going to talk about loops
115:59 - and iteration
116:22 - hello everyone welcome to python for
116:24 - everybody i'm charles severance i'm the
116:26 - instructor for the class and
116:28 - right now i want to go do exercise 3.1
116:33 - rewrite the pay computation that we did
116:35 - earlier in the previous chapter and
116:37 - give the employee one and a half times
116:39 - the hourly rate this is rather simple
116:41 - it's a very classic computer problem
116:43 - because it gives us our if then else and
116:45 - there's a lot of different ways to write
116:46 - it
116:47 - so we're just going to do enter the
116:48 - hours and the rate and do the pay
116:51 - and so um i'm going to start
116:54 - by going to my terminal cd into my
116:58 - desktop
116:59 - cd python for everybody and so here we
117:03 - go let me go into atom
117:04 - and get things started
117:07 - i'm i've already got this folder i mean
117:10 - this file from the last one
117:12 - assignment 2.3 and i'm just going to
117:14 - save as so i'm going to duplicate this
117:16 - file
117:17 - and i am going to go up to py4e
117:22 - and then i'm going to make a new folder
117:24 - i'm gonna call that folder ex0301
117:28 - for exercise three one and then i'm
117:30 - gonna call this
117:34 - ex0301.py
117:36 - now that's just the same files i had
117:39 - before
117:40 - and if i do an ls you'll see i've got
117:42 - the new folder so i cd into the
117:46 - ex0301 folder
117:49 - so that's the folder that i'm in all the
117:51 - way down into this folder
117:52 - and i do an ls and i see this file and
117:55 - so life is good
117:56 - and i can say python3 ex0301py
118:02 - i'll just put in 1010 so it's a hundred
118:06 - now the thing is is that we're supposed
118:07 - to give time and a half for overtime and
118:09 - so that means if there's more than 40
118:11 - hours
118:12 - 10 and 50 it's not supposed to be 500
118:15 - it's supposed to be
118:16 - 500 plus half of 10 extra hours
118:20 - because the 10 extra hours are the 10
118:21 - above 50 so that should be
118:24 - i don't know we'll figure it out it's
118:26 - easier to run a computer
118:28 - okay so this is the code we've got
118:31 - so um what i'm going to do is change
118:34 - this
118:35 - i'm going to make a new variable called
118:37 - a r i'll call it fr
118:39 - stands for floating point rate and
118:42 - floating point
118:43 - rate is going to be the float of the
118:46 - string rate
118:48 - let me just call this s h for string
118:52 - hours
118:52 - and s r for string rate
118:56 - and s r so this stance my variable is
118:59 - f r for floating point rate just so i
119:02 - can keep them straight in my head
119:04 - s h is string hours and so i'm going to
119:06 - say
119:08 - floating point hours is equal to float
119:14 - of string hours
119:19 - and now i can change this so i just
119:21 - entering
119:22 - fh times fr
119:25 - so i i split this out i can even like
119:29 - print
119:31 - fh comma fr it's perfectly fine when
119:34 - you're writing this to add like oops
119:36 - extra print statements just for your own
119:38 - sanity so now
119:39 - we're going to read the two values we're
119:41 - going to convert them to floating point
119:43 - numbers we're going to print those
119:44 - floating point numbers out we're going
119:45 - to multiply them
119:46 - and then we're going to have the paste
119:47 - and then i save it always remember to
119:49 - save it
119:50 - right so it has this little dot up here
119:52 - all editors give you something that
119:54 - tells you you didn't save it
119:56 - and i'm so i always keep saving it
119:59 - because if you come down here
120:00 - and you run it and you
120:04 - it's like it didn't change well that's
120:06 - because you forgot
120:08 - so let's do our 10 and 50 hours
120:12 - so we see this extra print statement
120:13 - that came out that's that extra print
120:15 - statement right there
120:17 - let me make this a little smaller and
120:18 - let's move this over here
120:21 - so we can see it a little better
120:27 - yeah make it a little bigger so we can
120:28 - see a little better so uh that print
120:30 - statement's there
120:31 - and um you know just for yucks i'm going
120:34 - to comment that out
120:35 - and so commenting things out is a good
120:36 - way to keep stuff in that you might want
120:38 - to
120:39 - kind of turn back on it's a way of
120:41 - thinking about i don't want this line to
120:42 - run but i'm just keeping it here
120:44 - comments are usually for users to read
120:46 - but they're also a way
120:47 - for to tell the computer to ignore what
120:49 - we're doing
120:52 - so um okay so the problem here is
120:56 - this calculation that is not time and a
120:59 - half for overtime
121:00 - so um so the way we're going to solve
121:03 - this is with an if statement
121:04 - if the floating point hours fr
121:08 - is greater than 40
121:11 - we should i'll say print overtime
121:17 - and then
121:21 - else colon the if and the else have to
121:24 - line up
121:25 - print regular
121:29 - so i'm not going to do anything
121:32 - different i'm just going to print the
121:33 - words regular and overtime
121:35 - okay and i just save that i'll do it so
121:38 - fast you watch the little blue dot
121:40 - happen and then go away that's because i
121:41 - hit command s to save it
121:43 - because i've done this way too many
121:45 - times
121:46 - so i'm gonna run it i'm gonna say uh oh
121:49 - wait
121:50 - hours is hour 10 hours 10 dollars an
121:53 - hour
121:54 - it's regular pay if i do it this way i
121:57 - can do 50 hours at 10
121:59 - an hour
122:03 - that's not good what'd i do wrong
122:08 - f r is greater than 40.
122:12 - what did i do wrong it's still saying
122:14 - for 50 hours something's wrong here
122:16 - it's saying it's regular
122:19 - if f r is greater than
122:23 - o that's because i just like
122:27 - messed my program up
122:32 - so look i called this variable sh
122:36 - and this sr
122:40 - and then i get the floating point for
122:42 - the hours but look i'm checking up the
122:44 - rate
122:45 - fr that's the mistake so it's really
122:48 - i've got to look for fh
122:50 - that's a logic error it's a perfectly
122:52 - fine program python's perfectly happy
122:54 - with that
122:55 - and that was that was i was messing up i
122:56 - kept putting see i was typing
122:58 - the uh radian i thought so i was just
123:02 - typing it backwards i was crazy
123:04 - and again that can be the kind of
123:06 - mistake that you run into i mean i
123:07 - didn't do that on purpose
123:09 - i did it because i haven't drank enough
123:10 - coffee yet this morning hang on let me
123:12 - get some coffee
123:15 - i have more coffee i'm still going to
123:16 - make mistakes
123:18 - so now there's no little black blue dots
123:21 - so
123:21 - it should work better now python run it
123:25 - so 10 hours ten dollars is regular pay
123:29 - run it fifty hours
123:32 - ten dollars
123:37 - i did it wrong again i told you what i
123:40 - wanted to change and then i didn't
123:41 - change it
123:42 - fh i'm like crazy
123:46 - again you can you can be crazy too
123:50 - can you look right at it i looked right
123:52 - at it i did the wrong thing
123:53 - uh hooray it says overtime and now you
123:56 - notice i mean i'm not being silly here
123:58 - where i put this print statement in and
124:00 - it it it's so tempting for a programmer
124:03 - to just
124:04 - just immediately try to like bam finish
124:08 - it
124:08 - and and i don't know why i did it this
124:11 - way
124:12 - maybe because i know that i'm flawed and
124:14 - i know that i make dumb mistakes like
124:16 - that
124:16 - and what can i do so so i was just being
124:20 - really
124:20 - careful there now i know let's just be
124:24 - sure if it's under 40 hours it's going
124:27 - to be a regular computation
124:29 - and i'm going to leave these print
124:30 - statements right in here for a while
124:32 - because
124:33 - whatever so here's the interesting thing
124:36 - so i'm just going to indent this because
124:39 - the regular pay is to take the number of
124:41 - rate the hours times the rate
124:43 - okay and now i got to come up with a
124:45 - slightly different
124:47 - pay xp is equal to
124:50 - and so there's a couple ways to do this
124:52 - we can say
124:53 - time and a half can be calculated by
124:55 - saying um
124:57 - the number the the rate times the hours
125:01 - well let's do it this way let's call it
125:03 - regular
125:04 - the regular pay is the rate times the
125:07 - hours
125:08 - fr times fh and then the
125:11 - overtime pay is equal to
125:15 - the now we know that we have more than
125:17 - 40 hours because we couldn't do this in
125:19 - here so if
125:20 - i say the number of hours that you've
125:23 - worked
125:23 - fh minus 40.0
125:28 - that is the number of hours above 40. so
125:31 - if this is
125:32 - 50 then the fh minus 40 is going to be
125:34 - 10
125:35 - and then i'm going to multiply that
125:37 - times the rate
125:39 - fr except you get one and a half times
125:42 - right so your overtime pay is
125:45 - the excess hours times
125:48 - one and a half times the rate actually
125:51 - no
125:52 - i see i see i made a mistake already the
125:55 - extra overtime pay
125:56 - because you're going to get all your
125:58 - regular pay so the the 50 percent or the
126:00 - half is the extra
126:03 - and see i'm confused so i'm just going
126:05 - to print out reg
126:07 - comma otp and if those numbers are right
126:11 - i can do xp which is the pay is equal to
126:14 - reg plus otp
126:18 - see my program is always i have to make
126:20 - it a little smaller let's
126:21 - make so you can see the whole thing
126:23 - right so i think i got this right
126:26 - right i've figured out the regular hours
126:27 - which is giving you the base rate for
126:29 - all 50 hours or 45 hours or whatever
126:32 - figuring out the excess hours
126:33 - and this is the bonus amount there's
126:36 - lots of different ways that you can
126:37 - calculate this
126:38 - but in general we have an if statement
126:40 - on this side and this
126:41 - else is the easy one and that's 40 hours
126:44 - or less
126:45 - so if we're doing greater than 40. so i
126:47 - just hit
126:48 - command s to save it and so let me clear
126:52 - my screen
126:53 - with command k so i'm going to do
126:57 - 10 hours at 10 hours and that's a
126:59 - regular calculation and it's a hundred
127:01 - dollars
127:02 - and so if i do 50 hours
127:06 - at 10 an hour so my my regular pay
127:09 - was 50 times 10 and then the excess pay
127:13 - is five dollars an hour times the extra
127:15 - 10 hours
127:15 - which is 50 and so my pay is 550
127:19 - and so it looks like i've got this
127:21 - calculation right
127:23 - and so here's here's the thing i've been
127:26 - printing these extra print statements in
127:28 - it's a real common thing for a
127:29 - programmer and you can look on github
127:31 - and see code that i write
127:33 - and i just leave these in because you
127:35 - know that could be broken but
127:37 - you're not supposed to print this extra
127:38 - stuff out and if you do this in the auto
127:40 - grader
127:41 - it's going to complain about these extra
127:42 - things it's going to consider you broken
127:45 - and again so i i comment those out to do
127:47 - one final test and notice
127:49 - the little blue dot so i have to save it
127:52 - and now i can run it one more time
127:54 - and i do 10 hours 10 dollars and it
127:56 - prints out exactly what i want to see
127:58 - and not the extra stuff because i
127:59 - commented them out
128:02 - and i do uh 50 hours and 10
128:05 - hours 550. so i've got it right and at
128:08 - that point
128:10 - you should be able to go back and go to
128:11 - your autograder if this was in the
128:13 - autograder and paste the stuff in
128:15 - okay so i hope this uh exercise 3.1 was
128:20 - uh useful and thanks for watching
128:26 - hello and welcome to chapter four
128:28 - functions this is
128:29 - uh the fourth of our basic patterns
128:31 - we'll get to iterations next
128:33 - functions is the store and reuse one of
128:35 - the things
128:36 - in programming is that we never like to
128:38 - repeat ourselves we don't like to
128:40 - if we have four or five lines of code
128:42 - and we're going to do the same thing
128:43 - later
128:44 - we don't like to put the same four lines
128:46 - of code in um even if
128:49 - it has to do with reliability if you
128:52 - find something wrong with those four
128:53 - lines of code and you got them
128:55 - uh 12 different places in your program
128:58 - then you got to find all 12 places and
129:00 - fix them so like collect those to one
129:02 - place and then
129:03 - call them and reuse them and that's the
129:04 - idea of store and reuse
129:07 - so this is what how functions work
129:10 - inside of python
129:11 - the first thing we notice is there is a
129:13 - new keyword def that stands for define
129:15 - function
129:17 - and the def is like an if statement or
129:19 - we'll see
129:20 - fours and whiles that they end in a
129:22 - colon and then they have an indented
129:24 - block and then the indented block d
129:26 - indents and that's the end of the
129:27 - function
129:29 - and so so these these two statements
129:31 - make up this function
129:33 - um the key thing that you have to
129:35 - understand and get used to is this is
129:37 - this
129:38 - def part is actually not running any
129:40 - code whatsoever it's
129:41 - actually remembering the code and that's
129:43 - what i call the store phase
129:44 - the def creates a bit of code and
129:47 - records it
129:49 - like a macro although it's much more
129:50 - complex than a macro
129:52 - and it names it whatever you chose you
129:54 - gave it a name we named this one thing
129:56 - and so it as a side effect of
130:00 - python reading or parsing these three
130:02 - lines
130:03 - it doesn't do anything but it remembers
130:06 - these two
130:07 - lines are what you would like to run
130:09 - when you invoke
130:10 - thing so this is the definition of a
130:13 - function and this is the invoking of the
130:15 - function
130:16 - but so let's so this doesn't do anything
130:20 - so there's no output here from that
130:21 - stuff right there
130:22 - but then what happens is you invoke it
130:25 - and this thing
130:26 - looks like it's part of python but you
130:28 - an effective extended python
130:29 - with your def statement and so when it
130:32 - sees thing it goes up and runs your code
130:35 - and so out comes hello fun and then
130:39 - it comes back and goes to the next line
130:42 - does print so print comes out and then
130:44 - it goes back like oh this is the reuse
130:46 - part but we get to reuse it we define it
130:48 - once and we use it twice then it runs
130:49 - this code again
130:50 - and it goes to the next line and it's
130:52 - all done so this little bit
130:53 - came out twice and of course this is
130:55 - really simple so that i can fit it on a
130:57 - page
130:58 - but you get the idea that i don't want
131:00 - to repeat this might be you know
131:02 - 15 to 100 lines of code and i don't want
131:05 - to type those over and over again
131:06 - so i say hey store these in a name
131:10 - what i that i choose and then when i
131:13 - invoke them bring them back and then run
131:15 - them again
131:16 - okay so that's the basic idea
131:19 - we actually have already been using
131:21 - functions from the beginning the print
131:23 - is a function right print is a function
131:25 - every time we see print
131:27 - p r i n t parentheses and then we have
131:29 - some stuff in here
131:31 - we are calling the print function this
131:33 - is the syntax with two little
131:35 - parentheses is the syntax for functions
131:39 - and so input's a function type is a
131:41 - function float's a function
131:43 - in's a function all these things are
131:46 - built in functions that come with python
131:49 - at the moment that we uh we started i
131:52 - mean
131:52 - just we installed python and these came
131:54 - along and um
131:56 - and then there's other functions that we
131:57 - define and use and that's what the def
132:00 - is for and in effect we can create
132:03 - new reserved words of our own making
132:05 - that extend the python language
132:07 - after the after we define the function
132:11 - so it's just this bit of reusable code
132:13 - that takes some arguments we haven't
132:14 - seen any with arguments there's a little
132:16 - parenthesis and we'll see how that works
132:17 - in a bit
132:18 - we define using the def keyword and then
132:20 - we invoke it we
132:21 - there's the defining phase which
132:23 - actually doesn't run the code it just
132:24 - remembers the code and then there's the
132:25 - invoking phase
132:27 - you define it once and then invoke it
132:28 - one or more times
132:30 - calling the function or invoking the
132:32 - function we think of those two things
132:34 - as the same thing call invoke or just
132:36 - the
132:37 - terms we use most people just say call
132:39 - the function but invoking it is a
132:41 - perhaps more descriptive way to think
132:43 - about it so here's an example of a
132:45 - function
132:47 - is built into python it's called the max
132:48 - function and
132:50 - we can pass some parameters into the max
132:52 - function so we pass
132:53 - the hello world string now like much of
132:56 - python max knows
132:57 - it's what kind of thing is being passed
132:59 - into it and it knows that it's looking
133:01 - for
133:02 - the largest character the high this the
133:05 - um
133:06 - the lexographically largest character
133:08 - and in this case
133:09 - it scans this little that's inside the
133:11 - max code it scans through
133:13 - and finds the largest character so
133:14 - apparently lowercase letters are higher
133:16 - than uppercase letters
133:18 - because in english we get back a w and
133:21 - so this is what's called the return
133:23 - value so this is an assignment statement
133:26 - let me clear this and start over so this
133:28 - is an assignment statement so it has to
133:30 - evaluate this right hand side
133:32 - and a function call is nothing more than
133:34 - like x plus one
133:35 - it's something to evaluate it runs the
133:38 - function code
133:39 - passes in this argument and then this
133:41 - residual value this is called return
133:43 - value we'll look at this in more detail
133:45 - becomes the result of this little bit in
133:48 - the expression and there's nothing else
133:50 - we could have you know w
133:52 - plus one or something and then the w is
133:54 - what's stored
133:55 - into big okay so we print big and big is
133:58 - a variable that has this
134:00 - the letter w inside of it and then we
134:02 - ask what is the smallest
134:04 - and that finds the blank and so we get a
134:06 - blank to see this there's a min function
134:08 - and a max function
134:09 - both of these are built in
134:12 - these are built-in functions they're
134:14 - always there for us
134:17 - okay so here is another example of the
134:21 - max function
134:22 - and so we can think of this as invoking
134:25 - or calling this function as this
134:27 - right hand side is being evaluated we
134:30 - are passing this variable in and there's
134:32 - some code in here
134:33 - and it's going to do some stuff yada
134:35 - yada yada and then it's going to
134:37 - give us back a bit of stuff that's its
134:40 - return
134:41 - value and then that goes up into the big
134:44 - right and so that's that's how this
134:46 - works and so this is actually
134:48 - built in built in or burnt in i guess i
134:53 - can't draw and so you can think of this
134:55 - as some time a long time ago
134:57 - when python was being first formed
135:00 - somebody wrote some code
135:02 - and it's got some stuff in it it's got a
135:03 - little loop that reads through all the
135:05 - reads through all the letters it has to
135:06 - figure out if it's a string or list
135:08 - etc etc etc but this is store
135:13 - except you didn't do the storing because
135:15 - it's already built in and then this is
135:16 - the reuse store and reuse
135:18 - so we build these things into python
135:20 - they're already pre-built
135:22 - as if before the first line of your code
135:24 - executes way up here
135:25 - someone put all this code in for you
135:28 - into python and created a thing called
135:30 - max
135:31 - for you now we've been using this
135:34 - already built in functions we've got
135:36 - type conversions we've got like the
135:38 - float that takes a
135:40 - integer and returns a floating point
135:43 - version of that
135:44 - and again this is kind of like an
135:46 - expression so it's like i want to divide
135:48 - this by a hundred but before i do that
135:51 - i've got to convert it to a float so it
135:52 - has to sort of do
135:54 - these function calls as it's evaluating
135:57 - the expression
135:58 - okay sometimes like here we just have
136:03 - we just have a prints out the return
136:05 - value that's what this is this is the
136:07 - return value if you just type a function
136:08 - in a parameter
136:09 - uh it can be a constant or it can be a
136:12 - variable and as we'll see in a second
136:13 - we'll give you many of these if you like
136:15 - so you can either just run it or take
136:18 - the result of this this passes an
136:20 - integer in
136:21 - converts it to a float and then puts the
136:23 - float into that
136:25 - type tells us what kind of thing that is
136:27 - and you can use this inside of an
136:28 - expression
136:29 - and so it's like what am i going to do
136:30 - first oh i got to do 2 times this thing
136:33 - oh wait a sec pause just briefly for a
136:35 - moment
136:36 - to call out to some float code
136:39 - pass a 3 into it and then something
136:41 - comes back
136:42 - the return value the residual value
136:45 - comes back and then that participates
136:47 - in this case it's going to be 3.0
136:50 - participates in this 2 times 3.0
136:53 - okay and so 2 times 3.0 then being 6.0
136:56 - etc etc but you can see as it
136:58 - it's like oh wait a sec i got to figure
136:59 - out what this is call the function get
137:01 - the return value and then continue
137:03 - processing
137:04 - this expression
137:07 - we've also done this with string
137:08 - conversions partly because
137:11 - just as an example the input always
137:13 - returns a string the input function
137:14 - returns a string
137:16 - and so you know here's this string could
137:18 - be coming from input but we'll just take
137:20 - one two three we know that that's a
137:23 - string it's not the number 123.
137:25 - and if we try to add one to it we get a
137:27 - trace back
137:28 - cannot concatenate string and integer
137:32 - trace back but we can convert that
137:34 - string to an integer and so
137:36 - int can take like a floating point
137:38 - number or an integer
137:40 - or even a string and it says oh i know
137:41 - what i'm supposed to do with the string
137:42 - i'm supposed to look at this interpret
137:44 - these as numbers
137:45 - and you know multiply by 10 and figure
137:48 - out what the hundreds place is and all
137:49 - that stuff there's a little bit work to
137:50 - that and it does it but then it gives us
137:52 - back an integer
137:53 - and we say oh what is that that's now
137:55 - the 123 but it isn't of type
137:58 - int and now i can add one to it and get
138:00 - 124.
138:01 - and as before from this example that
138:03 - we're kind of reusing from a previous
138:05 - chapter
138:06 - you don't want to try to convert oops
138:10 - sad face sad face sad face
138:14 - don't want to try to convert something
138:15 - that doesn't have digits using end
138:16 - because it'll
138:17 - say i don't know what to do and then
138:20 - your program
138:20 - quits right you don't want your program
138:22 - to stop tracebacks
138:24 - and you can of course deal with that
138:26 - with try and accept but that's like a
138:28 - previous lecture
138:30 - okay so up next we're going to talk
138:32 - about building our own functions
138:34 - not just using the predefined ones
138:39 - [Music]
138:50 - so
138:55 - so welcome back we're going to continue
138:57 - and start talking about building
138:58 - our own functions so
139:01 - again we use the def keyword to define a
139:04 - function and then
139:06 - later we're going to invoke this and
139:08 - there's a bit to it
139:09 - we are defining the name of the function
139:11 - in effect we're extending python and
139:13 - creating
139:13 - new predefined things that we can use
139:15 - except it's our code
139:17 - it starts with a def keyword has some
139:19 - optional arguments which we'll see in a
139:20 - bit that's
139:21 - what the parentheses and then the name
139:23 - and the function names file the same
139:25 - rules as variable names and then you
139:27 - have an indented block
139:29 - whatever code you want to do and then
139:30 - you have a de-indented block and that
139:32 - sort of defines
139:33 - the essence the key thing here is this
139:36 - is not
139:38 - calling it's not invoking it's not
139:41 - executing it's remembering it's storing
139:44 - it's figuring things out
139:46 - so here is the output of a program that
139:48 - defines a function but then
139:50 - doesn't use it so this is a sort of
139:52 - broken function
139:53 - so here we go we start x equals five
139:55 - print you don't have to definitely have
139:56 - all the defs at the beginning
139:58 - the def runs whenever so you know out
140:00 - comes hello
140:02 - and then we define a function and this
140:04 - says oh oh you want to make a new thing
140:06 - here
140:06 - so i'll make a new thing it's kind of
140:07 - like a variable in a sense and then it
140:09 - copies this stuff
140:11 - copies it up there and says later you
140:13 - probably are going to want to use this
140:14 - so i'm going to remember it
140:15 - so it doesn't do anything there it no
140:18 - output comes out
140:19 - then it says print yo and out comes yo
140:22 - and then it adds 2 to x so x is now 7
140:25 - and then it prints x and there's no 7.
140:27 - there's 7.
140:28 - these print statements never ran they
140:31 - never ran why because we did not
140:33 - invoke them down here we didn't we
140:35 - defined them
140:36 - but didn't invoke them so let's take a
140:38 - look at
140:39 - how you invoke a function right you
140:41 - define it and then you use it sometimes
140:43 - you define it once and use it once but
140:45 - more commonly you define it once and use
140:47 - more than one time
140:48 - again the store and reuse pattern the
140:50 - def is the store
140:52 - and the invoking is the reuse
140:55 - so here's just a slightly different
140:56 - version of that last program and so now
140:58 - it's going to actually
141:00 - invoke it so x equals 5
141:03 - print hello def so out comes hello
141:06 - this produces the def produces no output
141:09 - right
141:10 - but because there's a d indent here that
141:12 - is the entire
141:13 - blob of the of the code that is part of
141:16 - print lyrics
141:17 - so it prints out yo and now we're going
141:20 - to invoke this is the call
141:22 - we're going to call the function now the
141:24 - function goes up
141:26 - let's clear this so we're down to here
141:30 - now that this this this like suspends at
141:33 - this place it's like remember to come
141:34 - back to here when we're done
141:36 - go up run this code and then come back
141:40 - and then continue on so it like leaves
141:43 - like a breadcrumb of where it's supposed
141:44 - to come back to
141:45 - and then it runs and then the print
141:47 - lyrics of course produces
141:49 - the two lines of output and um yeah that
141:52 - should probably
141:53 - not have that day should be up there and
141:56 - then x equals x plus two which makes it
141:58 - seven and then prints out seven
142:00 - okay so this is the invoking
142:03 - invoke or call the function okay you
142:06 - defined it and then later you called it
142:11 - now in addition to just call and return
142:14 - and invoking we can pass parameters in
142:17 - and the
142:17 - example of the parameter is in the max
142:20 - function we have to say
142:21 - this is the thing i want you to find the
142:22 - maximum about the largest thing
142:25 - and and part of it is in the whole store
142:27 - and reuse pattern
142:28 - we have a few lines of code but
142:30 - sometimes we want to do ever so slightly
142:32 - different things
142:33 - in the different invocations and so we
142:35 - use the arguments to
142:37 - subtly adjust like
142:40 - finding the maximum is a general thing
142:42 - but what thing to find the maximum
142:44 - of that makes a function that's much
142:47 - more useful
142:48 - and reusable in a lot more situations so
142:51 - arguments are the thing we passed in
142:53 - and we define for functions that we're
142:55 - going to build
142:56 - we on the def statement so we say def
143:00 - greet name a function and then this is
143:03 - the arguments the
143:04 - things that are coming in now this
143:07 - lang variable in a sense only exists
143:10 - during the life of the function
143:12 - and it represents sort of a placeholder
143:13 - it's not a real variable in the same
143:16 - sense
143:16 - it's a placeholder that refers to how
143:19 - you touch
143:20 - that first parameter that's sitting in
143:22 - there okay
143:23 - and so lang so lang is
143:26 - our first parameter whatever it is we
143:29 - don't we don't need to see this part
143:30 - down here right now
143:32 - all we know is we're going to make a
143:33 - function and we're going to take a first
143:35 - we're going to take a parameter
143:36 - and this lang is the placeholder that
143:38 - tells us what that parameter
143:40 - is okay so within the function
143:43 - we're going to check to see if the
143:44 - language is spanish if we are print
143:46 - hello
143:47 - else if the language is front print
143:49 - print french print bonjour otherwise
143:51 - print hello we have a very highly
143:53 - simplified
143:54 - language translation system here so the
143:58 - def
143:58 - of course does nothing except it
144:00 - remembers that
144:01 - and defines the concept greet
144:07 - so that comes down and now we're going
144:09 - to call it that says go look up the
144:10 - thing that i define called greet
144:12 - if you don't put this in greed is going
144:13 - to give you a traceback but because you
144:15 - extended and named it greet
144:17 - so it runs in it starts suspends the
144:20 - code here
144:21 - starts up here but then lang
144:24 - is now an alias to en
144:27 - so now we can run if that is a yes oh
144:31 - else if oop i'm getting it all wrong now
144:38 - right so ian comes in as lang we're
144:40 - coming in the code
144:42 - if it's it's not yes it's not fr else it
144:45 - prints hello
144:46 - and then it comes back to the next line
144:49 - and then we call it again and this time
144:52 - es is laying and so
144:53 - it runs this code and prints hola
144:57 - and then next time it calls with this
144:59 - and then prints
145:00 - um bonjour you get the idea
145:04 - so this is a placeholder to so that on
145:07 - the successive
145:08 - calls or invokes invocating invocation
145:11 - of the function
145:12 - we can get at whatever the programmer
145:15 - put in as that first parameter and so
145:18 - we are saying in this definition we are
145:20 - ready to receive a first parameter
145:22 - please call us with a parameter and then
145:25 - we will be able to do something slightly
145:26 - different
145:27 - for the different values so this is a
145:29 - reusable bit of function that prints
145:31 - hello in
145:31 - three different languages and then we
145:33 - tell it what language at the moment that
145:35 - we're actually
145:36 - invoking it
145:39 - so that's putting stuff into the
145:41 - function now getting stuff back out
145:43 - is the concept of returning in the
145:46 - return statement
145:48 - the return statement
145:52 - is an executable statement that does two
145:54 - basic things the first thing that it
145:56 - does
145:58 - is it finishes now this is a one-line
146:00 - function so that's kind of redundant
146:02 - but it if when python goes into the
146:05 - return statement
146:06 - it doesn't continue on to the next line
146:08 - it just returns that is the end of the
146:11 - invocation of that particular function
146:13 - but even more importantly it takes as
146:15 - its parameter you can say return without
146:17 - a parameter
146:18 - and it will stop the execution of the
146:20 - function kind of like a
146:22 - break does for a loop it's kind of a
146:24 - break for a loop get out we're done
146:25 - don't run that next line
146:27 - get out but it also allows the
146:30 - specification of what you want as the
146:32 - residual value in an expression
146:34 - so we're doing a print and then we're
146:35 - saying greet
146:37 - and and what's going to show up here is
146:40 - whatever this function does in its
146:42 - return statement
146:43 - and so that prints hello we call it
146:46 - again and prints hello again
146:48 - okay and so
146:52 - and so basically the return statement
146:56 - is the i call this the residual value
146:57 - it's like what shows up here when the
147:00 - function is all done
147:01 - and it's the string hello
147:04 - we call the functions that return values
147:06 - fruitful because they produce something
147:08 - and but you don't have to you can just
147:10 - say return or you don't even have to
147:12 - have a return statement it goes to the
147:13 - last line of the function and it does
147:15 - return
147:15 - automatically at the last line of the
147:17 - function so here's a little bit of a
147:18 - rewrite of our little
147:20 - language program we are going to create
147:23 - a greeting program we're going to take
147:24 - the language as the first parameter
147:26 - and instead of just doing a print
147:28 - statement which is what we did before
147:29 - this is now more
147:30 - more like a function because it takes
147:32 - some input and produces some
147:34 - output as a return rather than just
147:37 - printing it's a little tacky for a
147:38 - function to print
147:40 - and so here we return hola bonjour and
147:43 - hello
147:44 - based on the right thing so now we say
147:46 - print
147:47 - greet en so it runs the code once lang
147:50 - is en
147:51 - and then it runs this code and the
147:53 - residual value is hello
147:55 - so it says hello glenn and similarly
147:59 - when it runs this code it's passes esn
148:02 - is laying it runs through
148:03 - and it runs this statement it does if
148:05 - there was more statements it still it
148:07 - wouldn't run them as soon as this return
148:08 - runs
148:09 - that says that this bit right here
148:12 - is is now hola
148:16 - so a los sally and the same with french
148:18 - goes in runs again
148:20 - out comes the return statement and then
148:22 - bonjour michael
148:23 - so you see how we can control as we're
148:26 - writing the application
148:28 - we can control as we're writing the
148:30 - function what the residual value that we
148:32 - want to see
148:33 - in whatever expression is calling us
148:35 - sometimes we have returns and sometimes
148:37 - we don't have returns
148:39 - so
148:43 - so if you think of the max code that we
148:45 - talked about before we can kind of see
148:47 - that somewhere inside that max code
148:48 - there's a return
148:49 - and that's how it communicates the w
148:52 - back to us so we pass in his argument
148:53 - hello
148:54 - world it comes in as a parameter and
148:56 - it's going to loop through this imp
148:57 - somewhere
148:59 - it's going to loop over and over into
149:01 - imp and then at some point it's going to
149:02 - figure something out
149:03 - and tell us what it wants to send back
149:05 - to us is a return statement and so the w
149:08 - comes back and gets assigned into
149:11 - big you can have more than one parameter
149:16 - and they're just an order the first one
149:17 - and the second one three and five so
149:19 - three becomes a and five becomes b
149:22 - and away we go so we just use this to
149:24 - add two numbers
149:25 - and so three plus five is eight
149:30 - so you get as many as you like and the
149:32 - order matters and
149:33 - and if you do things like you tell it
149:35 - you want a parameters and you don't give
149:37 - it to them
149:37 - then that'll become a traceback and
149:39 - it'll blow up you can also
149:41 - talk about optional parameters later so
149:44 - you don't have to have return values and
149:46 - that means that you simply
149:47 - don't call a return with a value and
149:50 - return is always
149:52 - implicitly happening as the last line of
149:55 - the function
149:57 - so that's that's kind of the basics of
150:00 - how functions
150:01 - operate but i don't want you to get too
150:05 - excited about writing functions
150:06 - some programming classes are like gotta
150:09 - write a function gotta write a function
150:11 - functions to be clear are a very
150:13 - powerful mechanism
150:15 - and as we write programs 150 200
150:18 - 000 200 lines of code thousand lines of
150:21 - code
150:21 - 10 000 lines of code the concept of a
150:23 - function is
150:24 - really important we would go crazy if we
150:26 - didn't have functions
150:27 - but if you're only writing 20 lines of
150:30 - code forcing yourself to write
150:32 - a function is kind of pointless so
150:35 - don't worry about the maybe the lack of
150:38 - urge to use this
150:40 - we are calling lots of predefined
150:41 - functions and we will for the next
150:43 - couple of lectures
150:44 - there will be a time when you go like oh
150:46 - i'm sick and tired of repeating myself
150:48 - oh yeah time to write a function so
150:50 - that's
150:51 - that's why we don't push functions
150:53 - prematurely we just want
150:55 - you to know what they are use them and
150:57 - at some moment you be like oh i want to
150:59 - define one but don't worry about
151:01 - it might take a while before you really
151:02 - want to define a function
151:04 - so that kind of summarizes our lecture
151:07 - on functions
151:08 - and up next we're going to do iterations
151:14 - [Music]
151:26 - so
151:30 - hello and welcome to python for
151:31 - everybody this is another of our worked
151:33 - examples and i'm your instructor charles
151:35 - severance so
151:36 - the example we're going to do right now
151:38 - is exercise 4.6
151:40 - in chapter 4. this is an exercise where
151:44 - we're kind of taking code that we've
151:46 - already written
151:47 - and redoing it in a way to
151:50 - just prove that we can do it with a
151:52 - function so it's not like it's going to
151:53 - do anything different it's going to do
151:54 - exactly
151:55 - the same as before and we're just going
151:59 - to do it a different way
152:00 - so let's go ahead and start up our text
152:02 - editor atom
152:03 - show you a couple new features of this
152:07 - it's already been open let me sort of
152:08 - open it here again
152:10 - i'm going to open
152:14 - get a new window and then i'm going to
152:16 - open
152:17 - but what i'm going to do is to open this
152:20 - folder
152:20 - right so it's this folder right here and
152:22 - i'm going to open that so instead of
152:24 - opening a file which is what i've been
152:25 - doing so far i'm going to open a folder
152:27 - so now you can see all the folders that
152:29 - i have and they're just exactly the same
152:31 - folders that i've been making under
152:33 - desktop py4e and so i can go and
152:37 - look at my previous assignments the
152:40 - other thing i can do
152:41 - is i can control click on this and say
152:44 - new folder
152:45 - and i can say ex exercise o4
152:49 - o6 again i like the o4 and the o6 just
152:53 - so things line up when we get to
152:54 - chapters 10 and 11 that's why i'm naming
152:56 - my files this way
152:58 - and i'm going to adapt exercise the code
153:00 - from exercise 3.1 we could do exercise
153:02 - 3.2 but it's longer the difference
153:04 - between 3.1 and 3.2
153:06 - was one uses tri accept and the other
153:07 - one does not so i'm going to try to
153:09 - start with this one
153:10 - i always clean up and get rid of that so
153:12 - here is our
153:13 - time and a half for overtime logic and i
153:16 - am going to say
153:17 - file save as so i'm making a copy of it
153:21 - and i am going to put this
153:24 - in this folder exercise 4 6 and i'm
153:27 - going to make sure to rename my file
153:32 - 0406.
153:35 - okay so now i've got exercise oh 406
153:38 - which is
153:38 - this one right here that's the file
153:41 - we've got and it's there and so
153:43 - let me pop up my terminal window
153:46 - cd desktop cd py4e
153:51 - cdex 04 hit the tab
153:55 - for o6 because there was only one in o4
153:58 - and so i can see where i'm at and i have
154:00 - one file here ls
154:03 - minus l gives extended information and i
154:06 - can say python3
154:08 - ex04 py
154:11 - 10 10 and away we go okay so this is
154:15 - this code
154:16 - i'm gonna get rid of some of this
154:20 - logic here i just these print statements
154:22 - which i commented out
154:24 - just to make it a little more dense okay
154:27 - so
154:28 - let me start by just putting a function
154:30 - in here and of course
154:31 - def is the key word for function and
154:33 - compute pay
154:37 - is the name of the function and it's
154:39 - supposed to take two parameters hours
154:44 - and
154:44 - rate
154:49 - and then you add a colon and then
154:52 - we're indented right so the the indent
154:55 - is to determine how long the function it
154:58 - lasts how many lines it is and i'm just
155:00 - going to say
155:01 - print
155:04 - in compute pay
155:08 - give myself a blank line i'm going to
155:10 - save that
155:11 - now you will i'm going to run it now
155:19 - i'm going to run it now and you'll
155:20 - notice something real quick
155:27 - this line never came out and that's
155:30 - because
155:31 - the way this works is
155:34 - this simply defines the function and
155:36 - then it continues running but it doesn't
155:38 - run that code
155:39 - and it ran this code and then it did in
155:42 - this case the else code and then it did
155:44 - the print
155:45 - but it never came up and actually ran
155:47 - this code we have to call the function
155:49 - okay we have to call the function before
155:52 - it's going to actually run
155:54 - so now let's make a call
155:59 - compute pay and let's pass in our
156:02 - variables that we have in this main code
156:05 - fh and fr
156:09 - so that compute pay fh and fr
156:12 - and then i'm going to print out hours
156:17 - and rate
156:23 - so now you'll see it's going to do the
156:25 - input the input convert to floating
156:27 - call the function which is going to run
156:29 - this one line and then continue
156:30 - down here right so now what it's going
156:34 - to do
156:35 - is going to define it run this run this
156:38 - call compute pay which is going to
156:40 - temporarily suspend
156:42 - come in here run this code and fh is
156:45 - going to map to hours and fr is going to
156:47 - map to rate
156:48 - and then it's going to come back and
156:51 - it's going to continue down here
156:53 - running this code and then finishing
156:55 - okay so that's
156:56 - that's what we're what's going to run so
156:58 - this time we will see compute pay
157:00 - and we will see the number for hours and
157:03 - rate so i'll run it again
157:05 - 40 hours 10 dollars an hour
157:09 - ah we see a mistake i'm like and then
157:12 - you're going to see the word compute pay
157:14 - here
157:15 - and i'm like okay that didn't happen
157:17 - well what's going
157:18 - wrong let's take a look at what's going
157:20 - wrong i don't plan to make these
157:22 - mistakes i just make them
157:24 - let me show you what's wrong here see
157:26 - this little blue dot
157:28 - that's what's wrong with my code and if
157:31 - you don't catch
157:32 - that then you'll say oh i'm crazy
157:35 - well i'm not crazy i just made a mistake
157:37 - i forgot to save it
157:39 - file save or command s
157:42 - so now i saved it i didn't change a
157:44 - single line of code it was right i
157:46 - forgot to save it
157:47 - someone run it again now 40 hours
157:51 - 10 and look now i see this line
157:55 - so it came into compute pay and then
157:57 - came back and then finished this part
157:59 - and did compute pay okay
158:02 - now this isn't enough
158:06 - what i need to do is i need to move this
158:08 - code the actual
158:09 - pay computation so i'm going to cut that
158:12 - and i'm going to put it in here but now
158:15 - this variable fh belongs to the main
158:17 - program it doesn't belong to this code
158:19 - now i don't want to use that
158:20 - so i want i want to say hours so i'm
158:23 - taking whatever hours are being passed
158:24 - in
158:25 - and then using rate and
158:29 - i'm just kind of changing all of these
158:31 - to match
158:32 - the parameters inside the function this
158:35 - is hours and this is rate
158:42 - and this is hours
158:45 - and this is rate
158:49 - now i'm going to print a print statement
158:52 - inside
158:55 - i'm going to say returning and then i'm
158:58 - going to print
158:59 - xp and then
159:02 - still inside the function i want to
159:05 - return a value from this function so i'm
159:07 - saying
159:07 - the returned value for this function is
159:10 - actually in the current
159:11 - function variable xp and then
159:15 - i'm going to call actually i'm going to
159:17 - not call this xp i'm going to call this
159:19 - pay in here oops not with capital i
159:22 - don't want to be capitalized
159:26 - pay and pay
159:30 - and pay
159:34 - so it's it's returning pay and then in
159:36 - here i'm going to say xp
159:38 - equals compute pay so what we've
159:41 - achieved here
159:42 - is let me get rid of that what we've
159:44 - achieved here is
159:46 - it's going to come down to find a
159:48 - function then read the input
159:50 - convert it to floating point and then
159:53 - call compute pay
159:54 - passing in fh as hours and
159:58 - fr is rate right
160:01 - and then it's going to take hours and
160:03 - rate do whatever it does with the if
160:05 - then else it's going to print these
160:06 - things then it's going to return it and
160:07 - then whatever this pay variable
160:09 - is effectively goes back into this
160:12 - expression
160:14 - as the return value and again gets
160:16 - assigned into xp
160:18 - okay so that's basically what's going to
160:21 - happen and then we'll print
160:22 - it'll come back and then print xp okay
160:26 - so let's go ahead and run oh wait i
160:29 - almost did it again look at the little
160:31 - blue dot
160:31 - you guys can watch the blue dot and when
160:33 - i forget to save it
160:35 - and when i then run it it'll blow up
160:38 - so ten dollars an hour oops ten hours
160:42 - fifteen dollars an hour so now it worked
160:45 - so you can see these two print
160:47 - statements come from while this is
160:48 - running
160:49 - the input happens it calls the function
160:52 - and then it prints out the pay
160:54 - and now to finish this to get it right
160:57 - i will simply comment out my little
160:59 - helpful debugging print statements
161:01 - and run it one more time
161:04 - 40 hours 10 dollars an hour and run it
161:08 - again
161:09 - and have it be 50 an hour in
161:12 - 50 hours and 10 dollars an hour so 500
161:15 - 550.
161:16 - so that one is now working so that's
161:19 - that one is completed
161:20 - and we have moved our computation inside
161:24 - of the function so
161:28 - i hope that you find this useful i hope
161:30 - that you find this entire course
161:32 - useful and uh and thanks for watching
161:37 - hello and welcome to chapter five loops
161:39 - and iteration
161:40 - now we're going to work on our fourth
161:44 - basic pattern of sequential conditional
161:47 - uh store and reuse and loops and
161:49 - iteration and this is the one where we
161:52 - teach the computer how to do things a
161:54 - lot we can tell to do something a
161:56 - million times and so that's where
161:58 - um we get the doggedness of computers or
162:02 - the fact that they're so good at doing
162:04 - work for us because we can set them off
162:06 - to a task and they'll do it until it's
162:08 - done
162:10 - so here's a very simple loop uh a very
162:12 - simple loop
162:15 - let's put the coffee over here um
162:19 - the keyword that we're the that we're
162:21 - going to start using is the while loop
162:22 - we're also going to use the four later
162:24 - on
162:24 - um and the while loop is functions very
162:27 - much like an if statement
162:29 - uh the while starts it and then this is
162:32 - just like an if statement it's a
162:33 - question that leads to a true or a false
162:35 - answer
162:36 - and then there's a colon and then
162:37 - there's an indented block and then we
162:39 - use the d
162:40 - indent to determine how long the loop is
162:42 - and so this print is
162:44 - de-indented so that indicates the end of
162:46 - the loop
162:48 - and so at some level what's going on
162:50 - what's going to happen here is it's just
162:52 - going to run and if this is
162:53 - true it's going to run this code and if
162:56 - it's false it's going to skip the code
162:58 - in that way it functions like an if the
163:00 - place that it doesn't function like an
163:01 - if
163:02 - is after it's run the code once it goes
163:05 - up
163:05 - and then asks the question again and so
163:07 - you can think of it going back up
163:09 - kind of to the top of the while loop and
163:11 - then re-asking the question like
163:13 - okay is this going to run again
163:16 - and then it's going to do that some
163:18 - number of times and then it's going to
163:20 - finish
163:20 - and so that's the loop that's the
163:22 - iteration
163:23 - and we're going to make a variable we're
163:25 - going to construct very carefully
163:27 - a variable that we call the iteration
163:29 - variable
163:30 - and that's n and it's a variable that's
163:33 - going to change
163:34 - and it's our way of running the loop but
163:36 - not running the loop forever
163:39 - so uh let's just run this we come in and
163:41 - it's five is n greater than zero yes it
163:43 - is so we're going to run this code
163:45 - so we're going to run this code we're
163:46 - going to print out five then we're going
163:48 - to subtract
163:48 - one and then we're going to go back up
163:50 - go back up and ask the question
163:52 - is n greater than 0 and the answer is
163:55 - since it's 4 the answer is yes
163:57 - so when it runs again then it prints out
163:59 - 4 subtracts it again
164:01 - checks prints 3 subtracts it again
164:04 - prints two subtracts it again
164:06 - prints one subtracts it again now n is
164:09 - zero and so it comes back
164:10 - up comes back up is this question has
164:14 - now become
164:14 - false so it's going to take the exit so
164:17 - it's going to come down and run this
164:18 - line right here
164:19 - then it prints blast off and we can kind
164:21 - of print out the residual value of n
164:23 - just to sort of
164:24 - prove to ourselves that it ran until n
164:27 - was no longer greater than 0 and then 0
164:29 - was the final value for n and we
164:31 - carefully constructed this n n equals
164:34 - oops
164:35 - go back we carefully constructed n we
164:37 - set it to five
164:38 - then we carefully subtracted one each
164:40 - time through the loop
164:41 - and then we're using that to control
164:43 - when to exit the loop
164:45 - and so you could think of this loop as
164:47 - for now running
164:48 - uh five times true true true true
164:51 - true and then false finally so this
164:53 - question
164:54 - was true for a while and as long as it
164:56 - was true the loop ran and then when it
164:58 - finished when it turned false the loop
165:01 - stopped and so this variable that we
165:04 - construct
165:05 - to control the loop was called the
165:06 - iteration variable because it tells how
165:08 - many times this loop is going to
165:10 - run over and over or otherwise known as
165:13 - iterate
165:15 - so this is a badly constructed loop with
165:18 - an iteration variable that we didn't do
165:20 - very well
165:21 - and so if we take a look at this we
165:24 - start out with n5 and then this is
165:26 - greater than zero so it's true so
165:28 - it runs it and then it runs it again and
165:29 - then is still greater than zero
165:31 - so you can pretty much see because we're
165:32 - not changing n this is going to be true
165:34 - true true true dot dot dot forever true
165:38 - forever
165:39 - and so this is an infinite loop and uh
165:42 - it's just going to run until your
165:43 - computer runs out of battery
165:44 - or you hit the button this is the kind
165:46 - of thing where you often see your
165:48 - your computer spinning like a spinning
165:51 - beach ball or some other indication that
165:53 - your computer's super busy
165:55 - it's in some kind of a loop really tight
165:56 - and it's running something
165:58 - and it's using up all of the processing
166:00 - resources of your computer
166:01 - that's an infinite loop and so the
166:04 - problem is
166:04 - we did nothing with the iteration
166:08 - variable
166:10 - here's a different loop and so this one
166:12 - demonstrates a different idea so
166:14 - in this case we start out with n is zero
166:16 - and it comes in here
166:18 - and is n greater than zero question mark
166:20 - and the answer is false
166:21 - so it skips it it doesn't run these
166:24 - lines of code at all
166:25 - and so this loop doesn't run at all
166:27 - because it comes in asks the question it
166:29 - says no
166:30 - and then it skips right around it so
166:32 - never run never run
166:33 - and so this actually is sometimes you
166:35 - write a while loop
166:37 - on purpose like this not quite as simple
166:39 - as this one
166:40 - but the idea is is this is this
166:42 - emphasizes that these loops are what we
166:44 - call zero trip
166:47 - they are not even guaranteed to one run
166:49 - run once they're they're going to run
166:51 - maybe zero times
166:52 - and in this respect it functions exactly
166:55 - like an if statement
166:56 - right meaning the first time through the
166:58 - loop if it's not true it's just going to
167:00 - skip
167:00 - right by it
167:04 - so there's a couple of ways of getting
167:06 - out of loops in this case i'm
167:07 - constructing an infinite loop because
167:10 - remember the kind of definition of an
167:12 - infinite loop is
167:13 - if this is going to stay true well true
167:16 - is the constant
167:18 - true so this is going to run forever and
167:20 - what it's going to do is it's going to
167:22 - prompt
167:22 - with a little uh little arrow and then
167:25 - let us type
167:26 - and read whatever we type into the
167:28 - variable line
167:30 - and then if the line is done we're going
167:31 - to break now break is an executable
167:33 - statement
167:35 - and if you hit the break it exits the
167:38 - innermost loop out to the to the place
167:41 - beyond the the end of the loop
167:43 - so when this runs the first time
167:48 - and we say hello there line is not done
167:50 - so it prints it so it prints out hello
167:52 - there and then goes up
167:53 - and then we type in again we type
167:55 - finished and so it doesn't it's not done
167:57 - so
167:58 - it prints it so now comes that print
167:59 - statement then we type in done
168:01 - and now this becomes true and it comes
168:04 - out
168:04 - and runs the code beyond the end of the
168:06 - loop
168:07 - the key is it doesn't go back it's like
168:10 - once you've done a break
168:11 - that loop is done and so you so you look
168:14 - at
168:14 - basically you know the block that is the
168:17 - loop so here's kind of the loop block
168:19 - and then the break goes to the line
168:21 - after the end of the loop block
168:28 - and you can think of this as sort of
168:30 - like just a hyperspace jump there is
168:32 - nothing
168:32 - really this could be literally hundreds
168:35 - of lines with if statements
168:37 - and you could be running and doing all
168:38 - kinds of stuff and running on doing all
168:40 - these things
168:41 - you know and these things could run all
168:42 - kinds of ways right the point is is as
168:45 - soon as you hit a break statement
168:46 - however much stuff is down here however
168:48 - much stuff is up here
168:49 - it exits to whatever the next line is
168:53 - beyond the end of the loop
168:57 - continue is another loop control
168:59 - statement but it
169:00 - works differently than break so break
169:02 - says get out of this loop
169:04 - um continue effectively says uh stop
169:07 - this iteration we're done with this
169:09 - iteration
169:10 - and so continue says go up back to the
169:13 - top of the loop oops
169:14 - yeah go up back to the top of the loop
169:18 - and so here we read a line if the first
169:21 - character is a pound sign
169:23 - line sub zero if that first character is
169:24 - pound sign
169:26 - we're going to skip it and this is a way
169:28 - for us to make like little comments in
169:30 - our typing
169:31 - and then we print if the line is done we
169:33 - get out and otherwise we print it and so
169:35 - that's why there is no printout here
169:37 - because
169:38 - it comes in runs oops
169:43 - it comes in uh hit this is true and that
169:47 - goes back up but it comes back
169:49 - and prints out the next one and does
169:51 - another thing and so the loop continues
169:53 - whereas the break ends the loop and so
169:56 - again
169:57 - the same kind of notion that you're sort
169:58 - of doing all kinds of complexity
170:00 - wherever you're at in this loop you hit
170:02 - continue and it does not
170:04 - it doesn't go any further it goes back
170:06 - up and runs the
170:08 - question mark it asks the question mark
170:10 - and
170:11 - and so i mean ask the question and it
170:13 - might exit the loop in that particular
170:15 - case but this one here is a true
170:16 - this is an infinite loop that i've
170:18 - constructed this is not an infinite loop
170:20 - because at some point the break gets
170:22 - us out of the loop and so it's an
170:23 - infinite loop with
170:25 - break to escape it and that's another
170:27 - common way to construct a loop
170:31 - so these loops that we've been drawing
170:34 - so far the ones that use while as their
170:36 - key
170:36 - key keyword are what are called
170:38 - indefinite loops
170:40 - and that's because they kind of go for a
170:42 - while till a break hits
170:43 - or until some value becomes true
170:46 - i mean until that as long as that value
170:49 - remains true
170:50 - so when we it all the ones we've done so
170:52 - far easy to look at and know that
170:55 - they look pretty good and they're
170:56 - probably going to finish
170:58 - but there are sometimes if they're long
171:00 - and complex
171:01 - and and they're exeter termination
171:03 - conditions are a little more complex
171:05 - we're not it's not clear
171:06 - that they're really going to terminate
171:08 - and so we we can use
171:09 - while loops for a lot of things but um
171:12 - for
171:13 - most of our looping we're going to use
171:14 - what are called definite loops and
171:16 - that's we're going to talk about next
171:21 - [Music]
171:37 - so definite loops use the for keyword
171:40 - and the
171:40 - idea of a definite loop is it's going to
171:42 - loop through some set of things it might
171:44 - be a set of lines in a file it might be
171:47 - a set of characters in a string it might
171:49 - be a set of strings and a list of
171:50 - strings
171:52 - but whatever it is it's sort of going to
171:54 - run
171:55 - a finite number of times depending on
171:57 - the thing that it's looping through and
172:00 - we like this and it it's an easier way
172:04 - to construct it and we actually don't
172:05 - have to deal with the iteration variable
172:07 - the for loop includes
172:08 - a mechanism to construct the iteration
172:10 - variable for us so it's definite loops
172:12 - iterate through the members of a set so
172:15 - here's a very simple
172:16 - uh for loop um and so you see the
172:20 - four keyword and n is also a keyword
172:24 - and the iteration variable is something
172:26 - we put right here this i
172:28 - is declared this i is like an assignment
172:31 - statement
172:31 - and i is going to take on successive
172:34 - values so i
172:35 - is going to be 5 the first time through
172:37 - the loop then i is going to be 4 the
172:39 - second time through the loop
172:40 - third two one so i
172:43 - is going to be assigned five different
172:45 - times to five different values
172:47 - and then the loop is going to run it's
172:50 - going to run once with five once with
172:52 - four
172:53 - once with three once with two and once
172:55 - with one and so this block of code
172:57 - we have contracted say execute it five
173:00 - times
173:01 - with these values of i i is that
173:03 - iteration variable
173:04 - i is the thing changing through each
173:07 - iteration of the loop
173:08 - okay and so that's why this prints out
173:12 - five four three two
173:13 - one and then when it's done it finishes
173:15 - it so this is a much
173:17 - more direct syntax for looping five
173:20 - times and setting an iteration variable
173:22 - you kind of all combine it into this one
173:25 - thing
173:25 - right all into one thing so it's quite
173:28 - nice
173:29 - so you don't have to be going through a
173:31 - list of numbers there's all kinds of
173:33 - things that we can iterate through with
173:34 - four
173:35 - and by the way while i'm sitting here
173:37 - don't i named my variable friends
173:40 - because that's a list of strings and
173:42 - friend which is
173:43 - the iteration variable i'm using
173:45 - singular and plural because it helps you
173:47 - read it
173:48 - python doesn't understand singular and
173:50 - plural so just because you say
173:52 - friends doesn't mean python knows it's a
173:54 - list python does know it's a list
173:56 - but it doesn't know by the name of the
173:57 - variable i've chosen that's your basic
173:59 - mnemonic variable warning these are cool
174:01 - variable names but i don't want you to
174:03 - get
174:03 - confused by them so you can loop through
174:06 - a variable so we're going to take this
174:08 - list of three strings and stick it in
174:09 - friends and so friend
174:11 - is going to iterate through that so the
174:12 - first time through friend is going to be
174:14 - joseph
174:15 - second time through it's going to be
174:16 - glenn third time through it's going to
174:18 - be sally
174:19 - and so that just says run this loop run
174:21 - this code the indented code
174:23 - three times each time the variable
174:26 - friend
174:26 - takes on a successive version of
174:29 - a successive value that's in the friends
174:33 - array so it says happy birthday joseph
174:36 - glenn
174:37 - sally and then we come out of the loop
174:39 - and we print done
174:42 - so if we try to draw a picture of
174:45 - what this is really doing
174:49 - the for loop is actually doing a whole
174:51 - bunch of stuff that we would have to do
174:54 - with maybe separate statements in the
174:56 - while loop um
174:58 - first it decides how many times to run
175:00 - the loop so it's answering the done
175:02 - question which way do we go
175:04 - and it is also then moving i ahead it's
175:06 - managing
175:07 - the iteration variable if you go back to
175:10 - the
175:11 - it's initializing it too if you go back
175:12 - to the while loop we had n equals 0
175:15 - while n greater than 0 n equals n minus
175:17 - 1. so we had like
175:18 - three lines to control the loop to
175:21 - manage the iteration variable
175:23 - but with a for loop we don't have to do
175:24 - that and so
175:26 - that's all taken care of and so that
175:28 - basically says you know
175:30 - the for loop by you using a for loop are
175:33 - we done no we have five things to work
175:35 - well
175:35 - set out of the first one run it we're
175:38 - not done because we've got one more set
175:39 - it to the second one third one
175:41 - fourth one fifth one and now we're done
175:43 - and that is all handled in
175:45 - a single line of code and that includes
175:47 - the iteration variable
175:49 - and the set of things through which
175:51 - we're going to iterate through
175:55 - i really like the word in
175:58 - it is mathematically i mean it reminds
176:01 - me of
176:02 - uh the set theory where you say this is
176:05 - a member of this set
176:06 - or the for each and
176:10 - math isn't important here but if you do
176:11 - know math the vertical bar means such
176:13 - that
176:14 - right as a member of this set and those
176:16 - that kind of stuff member of the set
176:18 - um i'll erase the math stuff so we don't
176:21 - over math but it's like
176:23 - for each of the values in the set 54321
176:27 - run this loop setting the iteration
176:30 - variable i
176:30 - to the members of that set so n reminds
176:33 - me
176:34 - for those of us who are math oriented n
176:36 - reminds me of a really nice
176:37 - concept in mathematics okay
176:44 - now you could think of this as sort of
176:47 - this
176:47 - looping structure where the for loop and
176:50 - this is pretty much how it actually runs
176:51 - inside the computer right
176:53 - where it initializes it i runs this runs
176:56 - this thing five times
176:58 - and then executes that's one way to
177:00 - think about it but you could also think
177:01 - about it in a
177:02 - about it in a somewhat more abstract way
177:06 - and think of it as all we're really
177:08 - doing is we have a contract with python
177:10 - that says i we're supposed to run this
177:13 - code five times and i supposed to be
177:14 - five
177:15 - four three two and one so you could
177:18 - imagine this
177:18 - might be what's going on the for loop
177:20 - sets i to 5 runs our code
177:22 - the for loop sets i to 4 runs our code
177:25 - the for loop sets i to 3
177:26 - runs our code the for loop sets i to 2
177:29 - runs our code
177:29 - for its i to 1 and runs our code all we
177:32 - know is our code was run
177:34 - 5 ran five times and
177:37 - by contract each successive time
177:41 - we'll get a different value for i and
177:42 - that value for i is taken from this set
177:44 - and so
177:45 - this is just one way to think about it
177:47 - to say to yourself
177:48 - oh yeah this is one way to think about
177:52 - it as it's actually
177:53 - and this is how it really works but this
177:55 - is also kind of logically the contract
177:57 - that python is making for us
178:00 - so up next we're going to talk about
178:02 - taking this notion of doing something to
178:04 - a lot of items
178:05 - but accomplishing something with that
178:07 - and i call these loop idioms
178:21 - [Music]
178:28 - so now we're going to talk about loop
178:29 - idioms and loop idioms are
178:32 - patterns that have to do with how we
178:34 - construct loops we have the mechanics of
178:37 - fours and whiles but ultimately we want
178:40 - to get something done we want to solve a
178:42 - problem with a loop
178:44 - and often what we have to do is uh if we
178:46 - have a set of things whether it's lines
178:48 - or strings or characters or numbers
178:51 - we're looking for something like the
178:52 - largest or the smallest or we want to
178:53 - add them up or something like that
178:56 - and so we can't just say add them up we
178:59 - have to say
179:00 - go through each one and do something to
179:02 - each one and somehow achieve adding them
179:04 - up
179:05 - and the pattern that we're going to
179:06 - follow is we're going to have this loop
179:08 - that's going to do all one
179:09 - run once for each thing right
179:12 - in some chunk of data and then but we're
179:15 - going to set something at the beginning
179:16 - and then we're going to do something to
179:18 - each one and at the end we're going to
179:19 - kind of get the payoff we're going to
179:21 - get the result
179:22 - so if we're doing sort of summing things
179:25 - we're going to have a running total and
179:27 - so this will be like t
179:28 - equals zero and then this will be t
179:31 - equals t
179:32 - plus the the thing value and then but
179:35 - this is not the real total it's the
179:36 - running total during the loop but at the
179:39 - end it is the real total
179:41 - and so we're gonna we're gonna look at
179:43 - what you do at the before the loop
179:44 - starts during the loop and then
179:46 - what you get after the loop and how you
179:48 - can use that
179:50 - so we're gonna use this loop it's just
179:52 - gonna loop through a set of six numbers
179:54 - over and over and over again right so
179:57 - we're going to do something before the
179:58 - loop we're going to do something after
179:59 - the loop and then we're going to run
180:00 - loop some number of times
180:02 - and in this case thing is our iteration
180:04 - variable because i'm using
180:05 - unnemonic variables now so it's going to
180:08 - run
180:09 - you know 9 41 12 3 74 and 15. so it's
180:13 - going to run and print these things out
180:14 - so it runs this loop six times
180:16 - and away we go now this loop does
180:18 - nothing except print stuff out
180:20 - of course i'd like to do that first is
180:22 - always print things out
180:23 - to make sure that sort of my brain is
180:26 - functioning
180:28 - so to kind of understand how these loops
180:32 - work i'm going to ask you to function as
180:35 - a program and i'm going to show you some
180:37 - numbers in succession
180:39 - and i want you to mentally
180:42 - figure out what the largest number is
180:43 - but more importantly think about how
180:45 - your brain is solving this problem
180:47 - of what is the largest number given that
180:49 - i'm only going to show them to you one
180:50 - at a time for a little while
180:52 - and your brain has to do something and
180:53 - imagine i was going to show you
180:55 - thousands of numbers i'm not but imagine
180:57 - that was how would you
180:58 - organize yourself in a way so that for
181:01 - like an hour and a half
181:02 - you could sit here as i showed you
181:04 - numbers and you keep track
181:05 - of the largest number that you've seen
181:08 - of all the numbers
181:09 - okay so here we go here's your first
181:11 - number
181:16 - second number third number
181:21 - fourth number fifth number
181:26 - sixth and last number what was
181:29 - the largest number um
181:34 - what was it well it wasn't too hard
181:38 - it was 74 but that's not the question
181:42 - how did your brain arrive at 74.
181:47 - so here's all the numbers if i'd shown
181:49 - you all the numbers and asked you
181:51 - um what's the largest number your eyes
181:53 - would have sort of gone
181:57 - and then you got to 74. and and you
181:59 - wouldn't do it in any particular order
182:01 - your eyes would just like
182:03 - see the 74 and it would just throw
182:04 - smaller numbers away
182:06 - and it would move really quickly to what
182:08 - the answer is even if there was
182:10 - several hundred numbers on the screen
182:12 - your mind would
182:13 - sort of move fluidly wherever it felt
182:16 - like moving and then arrive at it
182:18 - and probably what it would do is it
182:20 - would do something like
182:21 - you know kind of move like this find
182:23 - this and then sort of check to make sure
182:25 - that it's okay
182:26 - then say like okay i got 74 i'm done
182:29 - that's not how computers do it
182:31 - that is not how computers do it they do
182:33 - not move fluidly
182:35 - but they are highly dedicated they're
182:38 - going to do something
182:39 - [Music]
182:42 - 74 but how would you construct a loop to
182:46 - achieve this
182:47 - so let's take a look you could create a
182:50 - variable called largest so far
182:52 - and this is the largest variable the
182:54 - value that you've seen in the list so
182:55 - far now i haven't shown you any numbers
182:56 - yet
182:57 - so we'll just set this to negative one
182:59 - to get us started so now
183:02 - we see three and we're like oh that's
183:03 - better than negative one
183:05 - it's our first number so it's probably
183:06 - the largest we've seen so far right
183:08 - great 41. oh that's bigger than the
183:11 - largest we've seen so
183:12 - far so we'll keep it 12 is not bigger
183:14 - than 41 so we're not going to keep it
183:16 - notice this keeping thing 9 is not
183:18 - bigger than 41 so there's no point to
183:20 - keeping it
183:21 - 74 is bigger than 41 so we'll keep it is
183:24 - this the largest number
183:25 - we don't know we don't know until we're
183:26 - done 15 not better than 74.
183:29 - so now we're all done and hooray hooray
183:33 - hooray
183:34 - we have the largest number and we had
183:36 - this variable that we kept
183:38 - the largest number that we'd seen up to
183:41 - this point
183:42 - and then when we know that we're done at
183:43 - the end then that becomes
183:46 - the largest so if you look at all the
183:49 - numbers keeping track of the largest so
183:51 - far at the end of all the numbers the
183:52 - largest so far and the largest
183:54 - are the same thing and so that's how you
183:57 - get this idea
183:58 - of something you're doing doing during
184:00 - the loop is not really the answer
184:02 - but by the time the loop is done you
184:04 - will have the answer
184:06 - and so here's a bit of code that does
184:07 - this use it with our numbers right
184:11 - so let's take a look so i have this
184:13 - variable called largest so far i set it
184:14 - to negative one
184:16 - before the loop remember there's a loop
184:17 - before and a loop after and loop in the
184:19 - middle
184:19 - before it's negative one so now the num
184:23 - remember underscores are okay that's my
184:25 - iteration variable
184:27 - if 9 is greater than largest so far well
184:29 - largest so far is negative 1. so that's
184:31 - true so this code's going to run so
184:33 - we're going to remember
184:34 - the new number so this is nine and so
184:36 - nine ends up in largest so far
184:38 - and then we print it out so largest so
184:40 - far is nine
184:42 - after we saw the number nine then
184:45 - we do it again so now 41 comes in
184:49 - and is 41 greater than 9 the answer is
184:52 - yes it is so we're going to run this
184:53 - code
184:54 - copy 41 into 9 41 into largest so far
184:58 - and then print it out and largest so far
185:00 - is 41
185:02 - after we saw the number 41. now we're
185:05 - going to run the loop again with 12
185:07 - okay and you get the idea i hope is 12
185:10 - greater than 41 which is the largest
185:12 - we've seen so far and the answer is no
185:13 - it is not
185:14 - so we skip so the largest so far stays
185:17 - 41
185:18 - even though we saw 12. meaning we're
185:20 - sort of like ratcheting up but we never
185:22 - ratchet back down
185:24 - so we run it again with 3 and 41
185:28 - and we skip this and then the largest so
185:31 - far is
185:32 - 41 even though we just saw three
185:35 - and now we see 74 is 74 greater than 41.
185:39 - see we never are looking at all the
185:40 - numbers we're only looking at the window
185:42 - on the numbers of the
185:43 - current number that we're looking at so
185:47 - is 74 greater than 41 the answer is yes
185:50 - so we run this code and then we capture
185:52 - the 74.
185:53 - so we've seen we just saw 74 and it is
185:55 - the largest so far
185:58 - and then we run it again with 15 but
186:01 - 74 is our largest so far and so it skips
186:04 - so 74 remains largest so far after 15
186:08 - and now we're finished because we just
186:10 - ran the last thing the for loop takes
186:11 - care of everything
186:13 - and jumps to this print statement and
186:14 - says afterwards largest so far is 74 but
186:17 - at this point
186:18 - it's also the largest right so largest
186:22 - so far
186:23 - became largest when our loop finished
186:26 - so that sort of gives you this notion of
186:28 - how we construct
186:31 - you know something at the beginning some
186:34 - kind of thing that we're going to do
186:35 - over and over and over again
186:36 - and then something at the end and we put
186:39 - some print statements in just so we can
186:41 - watch it and see what's going on
186:44 - so coming up next we're going to talk
186:46 - about uh some more loop patterns some
186:48 - counting
186:49 - totaling averaging and finding the
186:51 - smallest number
186:55 - [Music]
187:11 - so now we're going to look at some more
187:13 - patterns of the different things we can
187:14 - do at the top of the loop in the middle
187:16 - of the loop and at the bottom of the
187:17 - loop and the first one we're going to do
187:18 - is counting
187:19 - now we're going to take a look at the
187:21 - number of something the number of things
187:24 - in our list now we could just inspect it
187:26 - in c6 but you will
187:27 - have for loops like you're reading
187:29 - through a file or
187:31 - you know scanning through some data and
187:33 - so the notion of counting
187:35 - you have to assume that you don't really
187:37 - know you know dot dot dot dot that
187:39 - there's going to be a lot more than just
187:41 - six but for now we're just going to do
187:42 - six and we're going to count how many
187:44 - things that we see
187:45 - in this loop and the pattern is simple
187:48 - you set a variable
187:50 - zork to zero at the beginning we often
187:52 - call this variable count
187:53 - in mnemonic and now we're going to run
187:56 - this loop six times
187:57 - one two three four five six and each
188:00 - time through we're just going to add one
188:01 - to zork so work start at zero
188:03 - then it goes one two three four five six
188:06 - and we're going to print it out
188:07 - so you know we see the nine and zork is
188:09 - one see forty one's orcas two
188:11 - none in it and zerk is sixteen when we
188:13 - see the fifteen four stops
188:15 - and we print out afterwards and this
188:17 - then is six is then
188:19 - the ultimate count that we got so that's
188:22 - very very simple the pattern is that
188:25 - set it to zero at the beginning add one
188:28 - to it
188:28 - and if you run that enough times then
188:30 - this is how many
188:32 - that you how many times that happened
188:33 - and in a sense it's how many times this
188:35 - line ran
188:36 - right sometimes you put this in an if
188:38 - statement etc etc etc
188:41 - okay oops
188:46 - now we can do the same thing to get a
188:48 - total the way the total works is you
188:50 - compute a running total of the number of
188:53 - the items that you've seen so far
188:54 - and at the end the running total in
188:56 - effect becomes the total
188:58 - will you a better variable name for this
189:00 - would be like sum or total or something
189:02 - but zork i'll use zork again
189:04 - so you set zork to zero and it starts
189:07 - out the total we've seen so far
189:09 - is indeed zero and then we're going to
189:11 - run this one two three
189:12 - four five six times and thing is going
189:15 - to be the iteration variable
189:16 - it's going to take on the successive
189:18 - values and each time through we're just
189:20 - going to take our running total and add
189:21 - to it
189:22 - the thing we've seen so we see 9 and the
189:25 - running total is 9.
189:26 - we see 41 and then running total becomes
189:28 - 50. we see 12
189:30 - the running total becomes 62. we get a 3
189:32 - it becomes 65 we get 74 we running total
189:35 - is 139.
189:36 - how many more how many more are we going
189:39 - to see we don't know could be a million
189:40 - could be one oh
189:41 - it's only one we get a 15 our running
189:43 - total is 154
189:45 - and what's true at any moment here is
189:47 - the running total is right
189:49 - of what we've seen so far now when we're
189:52 - done the for loop quits for us
189:54 - and afterwards 154 is indeed
189:57 - the total so the running total while
189:59 - we're in the loop
190:00 - at the end of the loop after the end of
190:02 - the loop we have the actual total
190:05 - so it's not very difficult to convert
190:07 - this to the average because we
190:08 - calculated the count
190:10 - and we've calculated the running total
190:11 - and now we're going to have the average
190:13 - by simply dividing those okay so
190:17 - now this time i've used mnemonic
190:19 - variables
190:20 - don't get confused by this demonic
190:22 - variables are just friendly names i
190:24 - chose
190:24 - for you to read the code easier i am not
190:27 - communicating to python in any way by
190:29 - naming this count and sum
190:30 - but count is sum is nice okay
190:33 - so i set count to zero and sum to zero
190:36 - go back up
190:37 - i set count to zero and sum to zero at
190:39 - the beginning and
190:40 - the count is zero and the sum is zero
190:42 - and then i'm going to run this loop
190:43 - six times one two three four five six
190:46 - and each time
190:47 - value is the is the iteration variable
190:50 - i count every time i run the loop i
190:52 - count equals count plus one
190:54 - sum equals sum plus value so i have a
190:56 - running count and a running total
190:58 - and they show up here one two three four
191:00 - five six and then the running total
191:02 - and then at some point the for loop you
191:03 - know we do the last one and the four
191:05 - loop jumps out
191:06 - and it divides 654 is the count and
191:09 - running total
191:10 - and then it divides the average sum over
191:12 - count okay
191:14 - so that's just again a pattern of
191:16 - something in the beginning
191:17 - something in the middle something in the
191:20 - end
191:22 - another kind of thing we tend to do in
191:24 - loops is we look for things we
191:26 - hunt for things and so this is where we
191:29 - have an if statement inside of a loop
191:31 - and of course i've created a silly
191:32 - simple thing
191:33 - uh in this code i am looking for
191:36 - uh large values that are values that are
191:39 - greater than 20. and again don't think
191:40 - of this as just six numbers
191:42 - but i'm looking for all the values and
191:44 - i'm going to print them out so
191:45 - you know it says before it's going to
191:47 - run this
191:49 - well if 9 is greater than 20 it's false
191:51 - so it goes back up
191:52 - 41 true so it prints out 41 then goes
191:56 - back up
191:56 - 12 falls goes back
192:00 - up 3 false goes back up 74.
192:03 - true so it runs this so comes that
192:05 - little print statement
192:07 - goes back up and then 15 is the last one
192:09 - and that's false
192:10 - it goes back up and the four says we're
192:12 - done and then we do afterwards and so
192:15 - this is just the notion
192:16 - of having an if statement
192:19 - in side of a for loop where we're sort
192:22 - of
192:24 - picking or choosing or selecting or
192:26 - looking for
192:27 - something in a large set of things that
192:29 - we're looping through
192:33 - we can also say i want to know if a
192:35 - particular value is there
192:37 - and so we're going to use a boolean
192:39 - variable we've talked about
192:40 - integer variables like 1 42 and then
192:44 - floating point variables like 98.6 and
192:46 - then string variables like hello world
192:48 - that have quotes in them this is a
192:50 - fourth type type
192:52 - a kind of variable it's called a boolean
192:55 - variable
192:56 - and it only has two values it has true
193:00 - and false matter of fact these if
193:02 - statements
193:03 - they return boolean values value equal
193:05 - equal three
193:06 - that is returning a true or a false
193:09 - based on
193:09 - the value of value there's a mnemonic
193:13 - confusion there
193:14 - right but i'm using so um i'm going to
193:16 - make a variable called found and that's
193:17 - a decent name for a variable so don't
193:19 - get
193:19 - hung up on that and i'm going to
193:21 - initially say found is going to indicate
193:23 - to me whether or not i found a 3 in my
193:26 - list
193:26 - and i'm going to start before the loop
193:28 - starts it say false because
193:30 - we haven't found anything yet so found
193:32 - equals false
193:33 - and so at the beginning of the loop
193:35 - found is fall before the loop starts
193:36 - found is false
193:38 - and now we're going to run this loop a
193:39 - bunch of times 9
193:41 - is that true no skip 41 is that true
193:46 - skip 12 skip
193:49 - right so 9 41 12 and found has remained
193:52 - false because we haven't done anything
193:54 - to it
193:54 - but now in comes a three and this
193:56 - becomes true so it runs this code
193:58 - so found becomes true and then we print
194:01 - it and you'll notice that when we see a
194:02 - three we get true
194:04 - and then it runs again we get 74 it's
194:06 - still false
194:07 - 15 still false run run run quit
194:11 - and the residual afterwards is true and
194:14 - in fact
194:14 - if you didn't know any of this and you
194:16 - don't print that out
194:18 - all you know is that afterwards we loop
194:20 - through all those things
194:21 - and we know that there was a three in
194:23 - there that's
194:25 - what we're doing so we searched all of
194:27 - them we checked for threes when we found
194:29 - a three
194:30 - and you can see basically that you know
194:33 - the
194:33 - found remains false until it flips to
194:36 - true but then there's nothing to set it
194:37 - back to false there's nothing in this
194:39 - loop that's going to set it back to
194:40 - false
194:40 - so once it sort of catches the three
194:43 - then it remains
194:44 - true for the rest of the loop and then
194:46 - it just finds its way out
194:48 - now if you want to think about it for a
194:50 - moment ask yourself
194:52 - how might we make this loop more
194:54 - efficient by putting a statement
194:56 - right in here think
194:59 - think about a way to once you've found
195:01 - it and it's true
195:03 - there is sort of no reason to keep on
195:05 - going so
195:06 - what would you put there to perhaps make
195:08 - this
195:09 - loop to look for threes just to tell you
195:12 - whether or not there was at least one
195:13 - three in there how to make that more
195:16 - efficient just think about that
195:19 - okay so now let's look back at the
195:23 - largest value that we started out with
195:25 - right and so if you if you think about
195:27 - this let's
195:28 - kind of give it a uh sort of a rough
195:31 - rough look here
195:32 - largest so far is our kind of like a
195:34 - running total but it's our
195:36 - hypothesis is the best large number and
195:39 - we have this if statement that says if
195:41 - the number we just see right now is
195:43 - greater than the largest so far then
195:44 - capture it right
195:46 - take whatever number we saw and capture
195:47 - it so when we see uh
195:49 - nine it's better we capture we see a 41
195:52 - it's better we capture it
195:53 - we don't capture this we don't capture
195:55 - this we capture the 74
195:57 - and we don't capture the 15 and that's
195:58 - how we do it so you could think of this
196:00 - as
196:01 - better
196:04 - when some when the number we're looking
196:06 - at is greater than our working
196:07 - hypothesis of the largest we grab it
196:10 - because it's better so this
196:12 - this line right here is the grab line
196:15 - grab it okay
196:19 - so then the question is how would you
196:20 - modify this code
196:22 - to teach it to find the smallest value
196:25 - in this list of numbers
196:28 - think of it as you have a starting
196:30 - number you have a
196:31 - sort of what's better in this grabbing
196:33 - notion
196:35 - how could you do that take a look
196:40 - [Music]
196:43 - okay so let's take a look so let's let's
196:46 - do a couple things like
196:47 - the the if you look at this if statement
196:49 - that's better
196:51 - well it's better now if the number is
196:53 - less than so if the
196:54 - if then but then we should probably
196:56 - change this to be smallest so far
196:58 - smallest so far smallest so far smallest
197:01 - so far
197:02 - smallest so far smallest so far right
197:06 - matter of fact that's what this is we've
197:08 - changed the word largest so far
197:09 - too smallest so far and we've changed
197:12 - the greater than
197:14 - to a less than is that going to fix it
197:18 - i'll give you a second to look at it
197:20 - pause if you need it's
197:22 - going to fix it second to find our
197:23 - smallest number
197:27 - the answer is of course no
197:31 - it's not so if we run this code
197:34 - so we set the smallest so far to
197:35 - negative one and starts out negative one
197:37 - we run it and it's nine is nine less
197:41 - than negative one
197:42 - no it's not so after we see a nine
197:46 - the small so far is negative one now
197:48 - we're going to run 41
197:49 - is 41 less than negative one no it is
197:53 - not
197:55 - so small so far still negative one as a
197:57 - matter of fact it isn't the smallest so
197:58 - far anymore just because we named it
198:00 - smallest so far doesn't mean it is the
198:01 - smallest so far
198:03 - it didn't work out so well and so you
198:05 - see that
198:06 - none of these because they're never less
198:08 - than negative one do anything and we
198:10 - claim that
198:11 - afterwards the smallest we've seen so
198:13 - far is negative one and that is because
198:15 - of course negative one is smaller than
198:18 - any of the numbers that we saw
198:20 - so how could we fix this well
198:24 - if we started the small so far with some
198:25 - like arbitrary big number
198:27 - then it'd be better so if we made this a
198:29 - hundred whoops come back
198:32 - if we made this be like a hundred that'd
198:35 - be good because the first time through
198:36 - the nine
198:37 - would be less than a hundred so we would
198:39 - capture the nine and then the rest of
198:40 - the loop would work just fine
198:42 - but then what if we didn't know that how
198:45 - big these numbers were as a matter of
198:46 - fact
198:46 - the largest so far wouldn't have worked
198:48 - if all the numbers were negative
198:50 - think about that we just assumed they
198:53 - were positive and so we kind of wrote
198:55 - lazy code that assumed all numbers are
198:56 - positive that might not be a good
198:58 - assumption depending on the numbers that
198:59 - you're dealing with right
199:01 - so maybe a hundred's a good number to
199:03 - start with or maybe like a thousand
199:06 - or ten thousand or like some number with
199:09 - lots of zeros in it
199:11 - how big should we make this and the
199:13 - answer is we're kind of
199:15 - solving this problem the wrong way and
199:18 - the thing we really want to do to solve
199:19 - the problem
199:21 - is to
199:24 - just accept the fact that if we're
199:26 - looking for the for the smallest number
199:28 - so far
199:29 - that the right hypothesis is the first
199:32 - number
199:34 - and if we just knew what that first
199:35 - number was the nine
199:37 - that would either that would because
199:38 - it's the first number
199:40 - we know that it's the both the largest
199:43 - so far and the smallest so far as soon
199:44 - as you see the first number but we don't
199:46 - know
199:47 - here before the loop starts what that
199:49 - first number is i mean you can look at
199:50 - it
199:51 - but assume this is just data that's
199:52 - coming from somewhere else and
199:54 - we don't know it until we start reading
199:55 - it so we have to construct a loop
199:57 - that deals with the fact that we want to
199:59 - capture the first value
200:01 - as our hypothesis for smallest so far
200:05 - so how do we do that let's take a look
200:09 - so what we do is we use
200:12 - yet another type so we have integer
200:15 - floating point string boolean and now we
200:17 - have a thing called the none type
200:19 - nun type is a special marker in that it
200:22 - only has one value boolean has true and
200:24 - false
200:25 - you know floating point has an infinite
200:27 - number of values and
200:28 - integer has an infinite number of values
200:30 - but none type has one value
200:32 - none none is a constant capital none is
200:35 - a constant the difference is as we can
200:40 - check to see if we have stored
200:41 - none none is often used to indicate
200:44 - emptiness
200:45 - not non-existence because because
200:48 - smallest doesn't exist until we assign
200:50 - it but we're going to assign it to like
200:51 - a
200:52 - mark a flag a marker some way to say oh
200:56 - this is not even a number it's
200:58 - nothing and so we're going to win you
201:00 - can do this so that's like
201:01 - makes a variable called smallest and
201:03 - then it puts none
201:05 - it sticks it right it's not a string
201:07 - none it's like a special
201:09 - type okay so that
201:12 - actually captures the notion that before
201:14 - the loop starts
201:15 - the smallest number that we've seen so
201:17 - far is none
201:19 - we haven't seen any numbers okay
201:23 - so then we come in and we have an if
201:26 - statement
201:27 - and we have a new operator called is is
201:30 - is stronger than equal sign and so if
201:33 - smallest is none
201:34 - that becomes true it runs this case and
201:37 - so then what it does is it copies this
201:39 - first value which is nine
201:41 - into smallest and so we see a nine and a
201:43 - small so far
201:44 - is nine which is the first value and
201:47 - again we're assuming we don't know what
201:48 - the first value is before the loop
201:50 - starts
201:51 - so we use the first iteration through
201:53 - the loop as the moment where we capture
201:55 - that
201:55 - okay so
201:59 - smallest is is the value and then
202:02 - we print it we go back up and now it
202:03 - runs again with 41
202:06 - 41 is not none none is there's only one
202:09 - thing that's none so it is not
202:11 - equal to none smallest is not equal to
202:14 - none
202:15 - or is not none so this is false so it
202:17 - skips over here
202:18 - then it asks the question is the value
202:21 - we're looking at 41 less than smallest
202:23 - well smallest is
202:24 - 9 in this case and this is 41 so that's
202:27 - false so it skips that and goes on
202:29 - so we see 41 we don't take it and then
202:33 - you can see that it this will never
202:34 - become true again
202:36 - this is pretty much false for the rest
202:38 - of the iterations of the loop
202:42 - it's false for the rest of the
202:43 - iterations for the loop so just is going
202:45 - to run down here and ask this question
202:47 - and at some point we see a 3 and we run
202:50 - this code we capture it
202:51 - we see 74 we don't capture it we see 15
202:54 - we don't capture it
202:55 - so then the for loop skips out and at
202:58 - the end
202:59 - we have the smallest and actually this
203:01 - would be a good technique for the
203:03 - largest as well
203:04 - because it really is just a technique to
203:06 - put a marker in this variable
203:08 - so that we snag that first number or
203:11 - first whatever as we
203:12 - uh read and parse through them
203:17 - so the is and is not operators are very
203:19 - useful in python
203:21 - you can think of them as like the double
203:23 - equal sign they're asking a question
203:26 - and um they're asking a question and
203:28 - they return it true or that you know
203:30 - blank is blank
203:31 - returns a true or a false it is stronger
203:34 - um double equal says are these two can
203:37 - these
203:37 - are these things equal in type and value
203:41 - so just as an example
203:46 - if i were to say
203:51 - is 0 equal to 0.0
203:55 - it would say yeah that's true but then
203:57 - if i says
203:58 - 0 is 0.0 that would be false
204:02 - so that's because these two are the same
204:05 - value
204:06 - y's and these two are not the same
204:08 - typewise so
204:09 - is is stronger than equals meaning that
204:11 - it demands
204:13 - equality in both the type of the
204:16 - variable and
204:17 - the value of the variable and no
204:19 - conversion is done
204:20 - and so that's just a very strong don't
204:22 - overuse is
204:24 - if you're dealing with numbers or even
204:25 - strings use double equals don't use is
204:28 - because
204:29 - sometimes it it gets a little confusing
204:31 - so use is
204:32 - sparingly i tend to only use is on
204:35 - booleans
204:36 - and on none types i don't use is on
204:39 - integers and i don't use
204:40 - in use is on floats and i don't use is
204:43 - on strings just
204:45 - none or true false
204:49 - and also is not is also an operator so
204:52 - you just say blah blah blah is not none
204:54 - or blah blah blah is not false
204:57 - okay so we've uh been looping around and
205:00 - doing loops and loops of loops
205:02 - we looked at the uh the the indefinite
205:05 - loops the while loops that kind of run
205:07 - for a while the definite and we looked
205:10 - at break and continue as a way to either
205:12 - escape completely from the loop or go
205:15 - back up and
205:16 - discard the current iteration of the
205:18 - loop we looked at none
205:20 - we looked at boolean variables with for
205:23 - loops definite loops where you've got
205:24 - some kind of a set or a list or
205:27 - some kind of sequence that you're
205:28 - looping through and then the concept of
205:30 - loop idioms where you do something at
205:31 - the top
205:32 - something to each item and then some you
205:34 - you sort of get a benefit
205:36 - at the bottom and and so that gets us
205:39 - through iterations
205:52 - [Music]
205:59 - hello and welcome to python for
206:00 - everybody uh
206:02 - i'm doing a worked example my name is
206:03 - charles severance and i'm the instructor
206:05 - for the class and the worked example
206:07 - that we're going to work on right now
206:09 - is in chapter five and it is exercise
206:12 - one
206:13 - we're going to repeat uh asking for a
206:16 - number until the
206:17 - word done is entered and then we're
206:19 - going to print the
206:21 - uh the total and then we're going to
206:23 - print the count and then we're going to
206:24 - print the average at the end
206:26 - and we're going to enter some numbers
206:27 - and we've got to do some error checking
206:29 - and we're going to keep on going so
206:31 - we'll ignore this we'll just
206:33 - say invalid input and then we're going
206:34 - to ignore it so i'm going to start
206:36 - from scratch i'm going to write a
206:40 - uh i'll start my terminal start some
206:42 - atom
206:43 - and so i can i've opened the py4e
206:47 - folder and that's kind of cool because
206:49 - now i can do things like
206:51 - say new folder and say i'd like an
206:54 - exercise 0501
206:57 - and then go into exercise0501 and say
206:59 - file new file
207:01 - and then say file save as
207:06 - and put it in exercise 0501 and then
207:09 - name the file
207:12 - ex0501.py
207:13 - i'm going to start from scratch on this
207:16 - one instead of adapting another
207:17 - piece of code uh i'll say print
207:22 - five and i'm going to do this because
207:25 - now i need to get to the point where i'm
207:28 - in the same folder in this terminal
207:29 - window
207:32 - cd desktop pi free
207:37 - ex i can string these together
207:42 - and there i am and i say python3
207:45 - ex and there i go
207:49 - okay so i'm in good shape so there's a
207:52 - couple things right now and we're going
207:54 - to do the total count and average
207:56 - and so this is just a basic pattern
207:58 - where we're going to have
208:00 - we're going to need a iteration variable
208:03 - for the count
208:04 - i'll call that num we start that at zero
208:08 - and then tote and i'll start that at 0.0
208:11 - so that's the running count and the
208:12 - running total
208:14 - now we need to write a loop and i'm
208:15 - going to write this as an infinite loop
208:18 - while true with colon
208:21 - and then i'll indent and i'll prompt for
208:24 - a string
208:25 - and remember input gives us a string so
208:28 - i'm going to call this s val equals
208:31 - input
208:36 - enter a number colon
208:39 - space i'm going to deal with the
208:43 - try and accept later but you can just
208:46 - kind of know that
208:48 - the floating point value that we're
208:49 - going to do is
208:52 - sometimes this little bit of code
208:56 - will fail i'm just going to take the
208:58 - string value here
208:59 - s val this input returns us a string and
209:02 - i'm going to convert that to float
209:05 - i'm going to say print f val
209:10 - so i can print that out and then i'm
209:13 - going to do the
209:17 - num equals num plus
209:20 - one and tote
209:24 - equals tote plus f
209:27 - val
209:30 - now i do need to deal with the situation
209:34 - where i'm entering the word done
209:36 - now we wanted we want to check that
209:39 - before we convert it to a float because
209:42 - done well we can run this
209:44 - it's an infinite loop but it'll it'll
209:46 - it'll only run a little bit it won't
209:48 - cause us too much problem
209:49 - if i run python let me drag this over
209:52 - here
209:54 - and i go one two
209:57 - three and if i put in something bad
210:01 - it's running i don't have a way to get
210:03 - out but you can see
210:04 - that you know it blew up on line five it
210:07 - blew up right here in line five
210:09 - so what we want to do is we want it to
210:11 - say you know one two
210:12 - three done but we want it to detect that
210:16 - we've typed in done so
210:18 - here we'll just say if the string value
210:20 - that i got back from
210:21 - input is double equal quote done quote
210:28 - break so that
210:30 - basically will break us out and now
210:36 - print all done i should be using single
210:40 - quotes here
210:42 - too much java coding print all done
210:45 - then i'm going to say print um
210:49 - what do i want to print the total
210:52 - the num and then
210:56 - tote common num comma
211:00 - tote over num now we're
211:04 - we've got to be careful because we don't
211:06 - want to divide by zero but that'll get
211:07 - us sort of a ways
211:09 - so this is going to run it's going to
211:10 - read these things it's going to
211:11 - accumulate here
211:13 - this is the accumulator pattern this is
211:15 - a counter pattern
211:16 - where we're adding one to a current
211:17 - variable and a cumulative pattern where
211:19 - we're adding
211:21 - a value to it
211:24 - so now we should be able to see the done
211:27 - um four five and six and then done
211:32 - and the total of four plus five plus six
211:35 - is fifteen
211:36 - the number is three and the average is
211:38 - five and so that's really good
211:40 - the all done prints out i just did that
211:42 - for yucks and you can see the value
211:44 - that's coming out
211:45 - so that's in pretty good shape so i'm
211:46 - going to comment this out
211:48 - and comment that out so this is
211:51 - pretty good it works just the way we
211:54 - want it to work
211:55 - four five six but we if we do something
211:59 - other than we're done
212:00 - then we're going to blow up in this
212:02 - float and so this is where we're going
212:04 - to have to do a try and accept
212:06 - because we just know that this line line
212:09 - seven
212:10 - line seven is the danger zone okay
212:13 - so what we're going to do is we're going
212:14 - to put a try in here
212:17 - and then we're going to indent the part
212:18 - of code that seems strange
212:20 - and then we're going to have some accept
212:22 - code
212:24 - and the first thing we have to do in the
212:26 - accept code
212:28 - is print out the word invalid input
212:32 - come back
212:36 - print invalid input
212:40 - now just like in an earlier example we
212:44 - we have to do something here to make
212:45 - sure it doesn't just keep on going
212:47 - because
212:47 - f valve doesn't work we're not going to
212:49 - see the error message that would be the
212:51 - traceback here on line 9
212:53 - we're going to run here but we still
212:54 - don't want to add because fval will be
212:57 - so this is where we can use the continue
213:00 - so in this
213:00 - code we're using both the break to say
213:03 - if i'm all done break
213:05 - and if i have a problem i'll print a
213:07 - message out
213:08 - and then i'll say continue so the
213:09 - continue basically says go back up to
213:11 - the top so that
213:12 - is how when we see enter some bad data
213:16 - we print
213:16 - invalid input and without adding
213:18 - anything new you don't really see it
213:20 - here
213:21 - without adding anything new you go back
213:23 - up to the top and
213:24 - enter a second thing so now if
213:27 - everything is right
213:29 - i should be able to type bad input
213:34 - 4 5 6 bad input bad input
213:39 - done and i have a total of 15
213:43 - and 3 items and the average is 5.0
213:46 - so there we go that's what we're going
213:50 - to get
213:50 - and that roughly achieves uh the same
213:54 - thing and it's a combination
213:55 - of a loop
213:59 - with a exit mechanism we have some
214:02 - sanity checking of our input so
214:05 - making sure that we have some valid
214:06 - input and we catch it and we use
214:08 - continue to loop back up to run the next
214:11 - iteration of the loop
214:12 - and we have an accumulator pattern and
214:14 - then we can use the accumulated data
214:16 - to print what we want to print so
214:21 - i hope that this has been useful to you
214:22 - uh exercise 5.1
214:25 - for python for everybody
214:29 - hello and welcome to chapter six in this
214:31 - chapter we're going to talk about
214:32 - strings and
214:34 - chapter seven is the payoff chapter so
214:36 - we you know up to this point we're still
214:38 - learning
214:38 - sort of basic building blocks and
214:40 - actually we're gonna write a real
214:42 - program in chapter seven so just learn
214:44 - this
214:45 - and the payoffs in chapter seven so we
214:48 - actually been using strings from the
214:49 - very first lecture because if you print
214:51 - hello world well
214:52 - that's a string and so we've been doing
214:55 - things this
214:56 - this little this slide here is all
214:57 - review uh we use plus to concatenate
215:00 - strings we use print to print them out
215:02 - prints just a function it takes as a
215:04 - parameter something strings
215:06 - integers etc um we we can put digits in
215:10 - strings but we can't add to them
215:12 - by now you figure this out but you can
215:14 - use things like ins to convert the
215:16 - strings
215:17 - to integers and then print things out so
215:20 - you know we we've been doing this for a
215:22 - while we've been talking about strings
215:23 - all along now today
215:25 - what we're going to do is going to just
215:28 - get into
215:30 - strings in more detail we're reading we
215:32 - input data
215:34 - with the input function input returns us
215:37 - a string
215:39 - um and if we want to input a number we
215:41 - have to run some kind of conversion like
215:43 - we have to do on
215:44 - int before we uh take this data that we
215:47 - read from
215:48 - input you know and so there's there's
215:51 - things that we've got to do and we've
215:52 - been doing all these things in
215:54 - in programs so far but if we look a
215:56 - little in a little more detail inside
215:58 - strings we can
215:59 - uh index within strings each character
216:02 - so each character has a
216:03 - separate position and a separate index
216:06 - and they basically the the letters are
216:10 - have positions and the positions start
216:13 - at zero
216:14 - and the best way to i explain this to
216:16 - remember this is it's the
216:17 - elevators as we used in one of our
216:20 - examples long time ago
216:21 - elevators in europe start at zero and so
216:23 - strings
216:24 - start at zero as well turns out in the
216:27 - old days there's some efficiency with
216:29 - the notion of
216:30 - lists of things starting with zero these
216:32 - days the efficiency isn't the issue
216:34 - but there's a certain elegance uh
216:36 - starting at zero even though in
216:37 - intellectual you might think
216:39 - one would be the the first character in
216:42 - the string
216:43 - might make most sense to be sub one but
216:45 - it's not it's sub-zero but
216:47 - just remember that and so we have this
216:50 - operator called the index operator and
216:52 - it's square brackets
216:53 - so you know fruit is
216:56 - a variable that contains the string
216:59 - banana
217:00 - and then fruit sub 1 is the character
217:03 - that's in position 1. now that actually
217:05 - is the second character
217:06 - i'll keep reminding you until i get
217:07 - tired of reminding you and so that
217:09 - that assigns a the the letter a
217:12 - into um i mean
217:16 - a the letter a into the variable letter
217:18 - of course that's a badly choice it's a
217:20 - either a well chosen variable name or a
217:21 - badly chosen variable name
217:23 - um and the thing that goes inside this
217:25 - can either be a constant or it can be an
217:27 - expression so this is x equals 3
217:29 - and then fruit sub x minus 1 well that
217:31 - means 2
217:32 - which is position 2 which is an n and so
217:34 - that gives us
217:36 - an n so the index is an operator and you
217:39 - can add this bracket
217:40 - syntax to the end of a string variable
217:45 - you can't index beyond the length of the
217:47 - string so
217:48 - if i say z sub 5 well there's only three
217:50 - characters which means
217:52 - 0 1 2 but sub 5 doesn't doesn't work
217:55 - and of course we get a happy little
217:57 - trace back
218:00 - so you have to be careful when you're
218:01 - starting to pull stuff out of strings
218:03 - although some of the things allow it
218:04 - some of them don't and you'll kind of
218:06 - get used to that we can ask how long a
218:09 - string
218:09 - is and so we use the len function we
218:12 - pass
218:13 - the string variable and we pass it into
218:15 - len as parameter
218:16 - and limb gives us back the length of the
218:19 - string not
218:20 - the position so it's zero through len
218:23 - minus one
218:24 - so it's 0 through length minus 1.
218:27 - so length is just another function that
218:30 - we've been doing functions now for a
218:32 - while you pass
218:33 - in a parameter and then len does some
218:35 - work and out comes 6 and
218:37 - that goes back into x because the
218:39 - function has a residual value it just
218:41 - happens to be
218:42 - a built-in function and so
218:46 - you know somewhere deep inside python
218:48 - there is code
218:50 - that takes this and somebody wrote a
218:52 - loop or looked something up and then
218:54 - returned a return
218:55 - value and sent back a 6 to go into
218:58 - our x variable and so function
219:02 - is there like i said we've been using
219:04 - this for a while
219:05 - another thing we tend to do is to look
219:07 - through strings and look at strings and
219:09 - dig data out of strings
219:11 - python is excellent for doing sort of
219:14 - these kinds of lookups
219:16 - and so we can write a simple loop
219:19 - we can write a for loop that
219:22 - creates some kind of a iteration
219:24 - variable like index
219:26 - and given that we know that these
219:27 - positions are zero through five we can
219:30 - set this to be zero
219:31 - and then write a while loop while the
219:33 - iteration variable is less than
219:34 - the length of fruit and remember this is
219:37 - six so it's going to be zero through
219:38 - five
219:40 - zero through five are the the very
219:42 - values we want to generate
219:44 - and then we can look up one at a time
219:46 - pull out fruit sub index so fruit sub
219:48 - zero fruit sub 1 2
219:50 - 3 4 5 and then print out the position
219:53 - and the letter index
219:54 - and then add 1 to index and it runs this
219:57 - will run 6 times
219:58 - 0 through 5 and now we go to produce
220:00 - this output right here
220:02 - and so that's one way of looping through
220:04 - strings that is a
220:06 - basic indeterminate loop
220:09 - but we construct carefully an iteration
220:11 - value
220:13 - construct an iteration value and
220:17 - work our way through that loop data the
220:20 - other way is to use a determinant loop a
220:22 - for loop
220:23 - and generally when we're able to use a
220:26 - while loop or a for loop
220:27 - all else being equal we generally prefer
220:31 - a for loop and so here we have the four
220:33 - key word
220:34 - and fruit and it's an in and so for
220:37 - letter
220:37 - in fruit well that just says letter is
220:40 - our iteration variable and it's going to
220:41 - take on the successive values of each of
220:43 - the characters
220:45 - so this loop is going to run six times
220:47 - and letter is going to be b
220:48 - a n a and a banana i'm always terrified
220:52 - when i make these slides that i'm going
220:53 - to misspell banana because
220:55 - somehow i always think that there are
220:57 - two ends
220:58 - somewhere i don't know it's not one of
221:01 - my favorite words to spell i
221:03 - actually didn't choose banana as the
221:05 - constant the author who i borrowed the
221:07 - textbook from
221:08 - alan downey and jeff elkner they used
221:10 - banana and so i'm still using banana so
221:13 - some of the jokes in the book aren't my
221:14 - book
221:15 - aren't my jokes they are the jokes of
221:17 - jeff and alan
221:19 - so here are just two equivalent you know
221:22 - so you can have the while loop they sort
221:24 - of both do the same thing they both just
221:25 - print the letters out one
221:27 - one time through each of these loops
221:29 - runs five times
221:30 - but you can see how the the determinant
221:32 - loop the for loop is a prettier loop
221:35 - unless you truly somehow need to know
221:37 - this number as you're going through the
221:38 - loop but if all you're doing is going
221:39 - through and you want to touch
221:41 - in order each of the characters of the
221:43 - string you then simply write a for loop
221:46 - because it's more elegant the less code
221:47 - you write the less code you write
221:50 - the less chance there is for you to make
221:51 - a mistake and so the fact that these are
221:53 - equivalent
221:54 - this is three lines that well two lines
221:56 - of a loop and this is four lines of a
221:57 - loop
221:58 - that's twice as many places as you could
222:00 - make a mistake because you might you
222:01 - know
222:02 - misspell index or something i mean why
222:04 - even make an iteration variable
222:06 - if you don't need to make an iteration
222:08 - variable
222:10 - and so we can do things that uh harken
222:13 - back to our iterations and loops chapter
222:16 - where anything that you can do in those
222:18 - things like look for the largest letter
222:19 - look for the smallest letter
222:21 - search to see if a letter exists or say
222:24 - count the number of a's in the word
222:26 - banana and so
222:27 - that's what this is doing and so we um
222:30 - so
222:31 - so we have a counter so again we do
222:33 - something at the top of the loop we're
222:35 - going to do something in the middle loop
222:36 - and we're going to print it out at the
222:37 - bottom so we start our counter at zero
222:39 - we're going to loop through ba all the
222:41 - letters and then
222:42 - if the letter is a then count equals
222:44 - count plus one this is kind of
222:46 - a pattern in a loop where we're noticing
222:48 - something instead of like
222:50 - we did it earlier where we said found
222:51 - equals true well we're going to count
222:53 - them this time so if we have
222:54 - one we'll get one if we have zero we get
222:56 - zero and how many ever
222:58 - there are but there should be three
223:00 - because it's going to run
223:02 - three times and there's three a's in
223:03 - banana and so this is
223:06 - a you know a conditional within uh count
223:09 - we've seen counts we've seen
223:10 - conditionals in loop uh in prior
223:12 - chapters
223:13 - and so again i love the in
223:17 - keyword in python it again reminds me of
223:21 - set notation in algebra if you're if
223:23 - you're a math whiz if you're not don't
223:24 - worry about it
223:25 - or maybe you will be a math whiz and
223:27 - you'll say well this set notation
223:28 - reminds me a lot of the
223:30 - the in uh keyword in python
223:36 - so um again
223:39 - it's for iteration variable letter again
223:42 - don't get stuck with letter
223:43 - i just happen to be using it here in
223:45 - banana and that is
223:47 - for each character in the string
223:50 - banana run this loop once changing
223:54 - the variable letter to be the particular
223:56 - character that we're pointing at
223:57 - and so it's taking care four is taking
223:59 - care of a lot for us right
224:02 - and so this is sort of this really smart
224:03 - for loop the for loop is
224:06 - you know both deciding how many times to
224:08 - run the loop in this case six
224:10 - and it's advancing the letter so advance
224:13 - print and you know decide whether you're
224:16 - done advance
224:17 - print decide whether you're done advance
224:19 - print decide whether you're done advance
224:21 - print decide whether you're done advance
224:23 - print decide whether you're done advance
224:25 - print decide where you know i am now
224:26 - done
224:27 - because i you know we're done with that
224:31 - particular string
224:32 - and so you can think of the four
224:35 - as you know magically doing all of this
224:39 - for you of both deciding how long to run
224:41 - the loop
224:42 - when you're done or not and moving down
224:45 - through
224:45 - all the successive letters in the loop
224:48 - so
224:48 - next we'll do uh talk a little bit about
224:51 - additional things that we can do with
224:56 - strings
224:58 - [Music]
225:12 - so now we're going to dig into strings a
225:14 - bit and we've already looked at how you
225:16 - can pull out a single character in a
225:17 - string and now we're going to look at
225:19 - what we call slicing and that is pulling
225:21 - chunks of a string out and again we're
225:23 - going to use the square bracket operator
225:26 - and uh and so so s and
225:29 - the way i say it is sub s sub zero
225:31 - through four that's how i read this
225:33 - s sub zero through four so the i look at
225:37 - the colon as
225:38 - through i look at the brackets as sub
225:42 - and so uh s sub zero through four says
225:45 - start at position zero
225:49 - and then go up through but not including
225:51 - four right so we don't include four
225:53 - so that's probably the hardest part of
225:56 - this
225:56 - up two but not including up two but not
225:58 - including
225:59 - um this seems counterintuitive kind of
226:02 - like starting at zero seems
226:03 - counterintuitive but
226:04 - after a while you'll kind of get used to
226:06 - it and there'll be situations
226:08 - where you're writing code like oh that's
226:09 - why that works better but just for now
226:11 - remember it
226:12 - up to but not including it's just kind
226:14 - of a little thing
226:16 - um we'll we'll come back to when that is
226:19 - uh useful for us um
226:23 - six through seven well that ends up
226:25 - being starting at six
226:26 - up two but not including seven so that's
226:28 - why we only get the p
226:29 - out um now one thing that python is
226:32 - pretty nice about
226:33 - is it's not going to give you a trace
226:34 - back
226:36 - we might expect that 6 through 20 well
226:39 - there's no 20 characters but it's like
226:40 - ah
226:41 - that's okay we'll just let you stop at
226:43 - the end and we'll start at 6 and go all
226:45 - the way to the end oh
226:46 - no trace back it's almost disappointing
226:48 - sometimes when python
226:50 - uh doesn't trace back when you think ah
226:52 - you know if you're so obsessed about
226:54 - everything i would have traced back in
226:55 - that situation but hey
226:56 - it's i guess if you're you're allowed
226:58 - you're allowed and so there we go
227:01 - now you can eliminate or omit the
227:04 - first or last if you eliminate the first
227:07 - it assumes the beginning of string if
227:09 - you
227:09 - estimate this eliminate the second it
227:11 - assumes the end of the string
227:13 - and why you would do this i don't know
227:15 - but that's
227:16 - from beginning to end so it's the whole
227:18 - string so whole string
227:20 - eight through the end is thon
227:23 - and up two but not including two is
227:26 - mo all right so so you get that so just
227:30 - it's that's pretty simple once you've
227:32 - got the rest of slicing and the rest of
227:34 - string indexing
227:35 - the notion of eliminating the first or
227:37 - the last of the colon
227:38 - expression the set first or second of
227:41 - the colon expression
227:42 - i think is actually pretty intuitive
227:44 - pretty nice
227:46 - we've already been concatenating strings
227:47 - together we overload the plus operator
227:51 - and there is no space added remember
227:53 - when you're doing print
227:55 - x comma y this comma does turn into a
227:58 - space
227:59 - but that's not what's happening here
228:00 - there is no automatic space being added
228:03 - and so we see hello and there and it
228:05 - just is hello there with no space
228:06 - and so if we want we just have to
228:08 - concatenate the space explicitly
228:10 - if we want to put spaces into strings
228:13 - the problem is
228:14 - if you if this you might think it's more
228:16 - convenient to add a space with
228:17 - concatenation
228:18 - but then you have to think well what
228:19 - about if i want to concatenate things
228:21 - and not put the space in then i'd need a
228:23 - different operator
228:24 - so that's kind of why it works that way
228:29 - we can use in differently as a logical
228:32 - operator so we're using it
228:33 - as an iteration structure in for loops
228:36 - but we can also use it as an
228:38 - uh logical operator in if statement so
228:40 - it's kind of like the
228:42 - you know double equals or not equals or
228:45 - less than or equals or something like
228:47 - that it's it's like those guys
228:49 - and um and so and it returns a true or a
228:52 - false
228:53 - is n in fruit so that's a question and
228:55 - the answer is true
228:56 - is m in fruit no that's the answer to a
229:00 - question
229:00 - is nan in fruit doesn't have to be
229:02 - single character can be more than one
229:03 - character
229:04 - and the answer is true and then you say
229:06 - something like you know
229:07 - if a in fruit and so this is the logical
229:10 - value that returns a true or a false
229:12 - and yes we found it so that becomes true
229:15 - in this particular case so it runs the
229:17 - little indented bit so in is an
229:20 - operator in this particular situation in
229:22 - a for loop in means something different
229:24 - and we'll use in for other things
229:26 - as operators as logical operators
229:29 - uh coming up in a bit you can compare
229:32 - strings
229:33 - and this has to do with the character
229:36 - set of your computer the character set
229:37 - that python is
229:39 - but in general um you know it is
229:42 - lexographically less than and
229:44 - lexographically greater than
229:46 - uppercase and lowercase are a little
229:48 - weird
229:49 - i think when we use the max function
229:52 - earlier the way my computer was set up
229:55 - uppercase was less than lowercase
229:59 - but in general
230:03 - uppercase is less than lowercase but in
230:05 - general it's it's bad to assume case
230:07 - um but there is a deterministic way to
230:10 - sort strings
230:12 - you can you know have something equal to
230:14 - or less than or greater than
230:16 - and all those operations work uh
230:19 - naturally
230:20 - the less than greater than you have to
230:21 - kind of be aware of uppercase lowercase
230:24 - things like where um you know
230:27 - punctuation sorts less than less than or
230:30 - greater than letters it's that's kind of
230:32 - unpredictable and depends on the
230:33 - character set of your computer
230:36 - and something you just play with and
230:37 - figure out if you're doing sorting stuff
230:39 - by first name and last name as long as
230:41 - the case is kind of the same
230:44 - um you know if um
230:48 - if you were sorting chuck with an
230:49 - uppercase and
230:51 - glenn the fact that these upper cases
230:54 - they'd sort right and these lower cases
230:56 - would sort right
230:57 - but if you were to subdue instead
231:00 - lowercase chuck and uppercase glenn
231:04 - then that would sort weird as a matter
231:06 - of fact this the g would come before
231:08 - that and so
231:09 - case can mess this up but in general
231:12 - other than case
231:13 - and special characters and other things
231:16 - it technically works
231:18 - it's just hard to kind of predict it a
231:20 - lot of what we do
231:21 - is use the string library and so the
231:24 - strings
231:25 - are objects and we'll talk later about
231:28 - what that really means
231:29 - and objects have these things we call
231:32 - methods
231:35 - so a string object has some built-in
231:37 - capabilities
231:39 - and one of the built-in capabilities
231:41 - that the string object has
231:43 - is here is a string object and because
231:46 - greet is a string object if we said type
231:48 - we'd see that it was an str
231:50 - dot lower says hey dear string
231:53 - make a lowercase version of yourself
231:55 - it's like calling this function lower
231:56 - and passing greet into it
231:59 - and then give it that back to me now it
232:01 - doesn't actually change greet it gives
232:02 - me a lowercase copy
232:04 - so here i have hello bob with an h and a
232:06 - b uppercase and what i get back in zap
232:08 - is hello bob all lowercase
232:10 - and note that greet is unchanged so
232:13 - hello bob is still there
232:15 - and you can even call these methods on
232:17 - constant so this is
232:18 - a string object quote hi there quote dot
232:20 - lower
232:21 - that says call lower on this bit of
232:25 - string and give me back a lowercase
232:27 - version of it and so it prints out
232:28 - as the residual return value this is
232:31 - like a function call
232:32 - a method call is a kind of special form
232:34 - of a function call
232:36 - it's a function call where you say the
232:37 - thing dot the function name rather than
232:40 - function name pressed in as a parameter
232:42 - like len for example is
232:44 - non-object-oriented
232:46 - you know len of x that's not
232:48 - object-oriented object running it would
232:49 - be x dot
232:51 - something parenthesis
232:55 - but you so constants are objects as well
232:58 - and taking the lower gives us back
233:00 - lowercase
233:00 - high there and so that's just one of the
233:03 - things that you can do in the string
233:04 - library
233:05 - these are built into string variables
233:08 - and constants they're just
233:09 - always there as soon as you make a
233:11 - string they're part of it
233:13 - and when you do type and it says it's
233:15 - class str
233:18 - we'll get to object oriented don't worry
233:19 - we'll get to object oriented
233:21 - and so you can do things like use the
233:23 - type
233:25 - um if you're just look this used to say
233:27 - um
233:28 - typester but it's cluster kind of this
233:30 - is more of an oh
233:31 - the word class is an object or any
233:32 - concept but it is a string
233:34 - and you can use the dir and of course
233:36 - there's extra stuff up here and this is
233:38 - showing
233:38 - all the different methods
233:42 - or capabilities things we can do to
233:44 - strings so
233:46 - you know x dot something parenthesis
233:50 - well what can we do there this is all of
233:52 - those things that we can do
233:54 - to x's that are that are built in and
233:56 - come with x's
233:57 - i mean come with strings uh when we
233:59 - build them
234:01 - and python of course has great
234:02 - documentation online
234:04 - for all of these spring methods and what
234:06 - they do and how they work and why they
234:08 - work the way they do
234:09 - and so here's some of that python
234:11 - documentation we'll look at a few of
234:13 - these
234:14 - but you know don't hesitate to say
234:16 - python string uppercase and then we're
234:18 - like oh yeah yeah that is
234:19 - upper right and so here's a few things
234:22 - that we can
234:26 - do and use some of the ones i use a lot
234:28 - and we'll look at each one of these
234:30 - things um
234:32 - so the find operation says
234:36 - find me a substring within a string
234:39 - right find me a substring within a
234:41 - string so find me the first
234:42 - n a and give me back the position so
234:45 - that gives me back
234:46 - 2. and then i can say go find
234:50 - a z in there well there's no z and so it
234:52 - returns me negative 1.
234:54 - so that's what the fine does so we're
234:56 - doing a lot
234:57 - we're going to use this kind of stuff a
234:58 - lot and we do a lot of looking in
235:00 - strings
235:01 - converting things to upper or lower case
235:03 - there is an upper method
235:04 - and a lower method so greet greet.upper
235:08 - and that means the uppercase nnn is
235:11 - hello bob
235:12 - greek.lower that means that dub dub dub
235:14 - is the lowercase hello world
235:16 - and greet is unchanged greed is still
235:19 - hello bob with upper and lower
235:21 - because each of these methods basically
235:23 - say i'm going to give you back a
235:25 - uppercase copy or a lowercase copy of
235:28 - the original thing
235:29 - without changing the original thing
235:34 - search and replace is super useful super
235:37 - duper useful
235:38 - and it's pretty clean here we have a
235:41 - string
235:42 - and we use the replace method in this
235:43 - case we're passing in the
235:45 - old and the new bob replace all bobs
235:48 - with jane's and so that takes this hello
235:50 - bob
235:51 - and turns it to hello jane again greed
235:54 - is unchanged
235:57 - greed is unchanged and it does more than
236:00 - one thing so this says
236:02 - go find well let's clear that this says
236:05 - go find all the o's
236:06 - and replace all the o's with x's and so
236:08 - it goes and finds two of them
236:10 - and then out come two x's and so that
236:13 - really is a
236:14 - replace is not just replace the first
236:16 - one but replace
236:18 - all of them white space as we'll see is
236:21 - a big deal
236:24 - and white space is not just blanks
236:26 - although the most common thing but it's
236:27 - also sort of non-printing characters
236:29 - like tabs and new lines and other kinds
236:31 - of things
236:32 - and so we have a number of different
236:34 - ways to strip white space
236:37 - so here we've got some spaces at the
236:38 - beginning and spaces at the end
236:40 - and we print out we do an l strip and
236:42 - that throws away the spaces at the
236:43 - beginning that's the left
236:45 - so that's the left strip it all takes
236:46 - any if there's nothing there it doesn't
236:48 - harm it
236:50 - our strip means throw away all the
236:51 - blanks on the far end
236:53 - and then strip says go take take both
236:56 - sides
236:57 - both sides for strip and so that pulls
236:59 - out all the spaces on both sides
237:01 - this will be useful because sometimes
237:02 - when you're tearing stuff apart you'll
237:04 - find yourself getting extra spaces
237:07 - sometimes at the beginning sometimes at
237:08 - the end and it can be
237:10 - tab or new line
237:15 - it's it's sort of white space space that
237:19 - is kind of not visible clear
237:22 - that's what white space is it's like if
237:24 - you were on a piece of paper
237:25 - it's the it's the white space it's like
237:27 - x well that's not white space but right
237:29 - here oh that's white space
237:31 - it's any character that doesn't cause
237:33 - printing to happen
237:35 - if that makes any sense it's any
237:38 - character where
237:38 - nothing would be printed and there are
237:40 - characters like that there's like even
237:42 - bell characters but we don't use them
237:44 - very much we can ask
237:46 - very conveniently we can say hey does
237:48 - this line
237:49 - start with a particular string and so
237:52 - you know line does this that's this is a
237:55 - question going to return a true or false
237:58 - does this line start with please and the
237:59 - answer is true it does start with please
238:02 - does this line start with a lowercase p
238:04 - no
238:05 - it does not and so again you use this in
238:07 - the context of if something
238:09 - colon some block of text it's a block of
238:11 - code
238:13 - so we can combine these things to
238:17 - tear stuff out and so let's assume that
238:20 - what we want to do in this case is we
238:22 - want to
238:22 - take a from line this is from an email
238:25 - form
238:26 - email format from a mailbox
238:29 - and this has got the from with a space
238:32 - and the person's
238:33 - email and then at sign in the school
238:35 - they're from and
238:36 - a space and then the rest of the stuff
238:38 - like when this mail was sent
238:39 - and this is a real mail message from
238:41 - this guy stephen from the university of
238:43 - cape town
238:44 - in south africa it's really steven and
238:46 - this really is the first line of a file
238:48 - that you'll get to know
238:48 - pretty well by the rest of this course
238:50 - hi steven
238:51 - you we like you you are the example in
238:54 - my class and have been for a
238:56 - long time people actually who know
238:58 - steven have taken this class and they're
238:59 - like stephen i saw your picture in the
239:01 - class
239:01 - so if you're ever in cape town at the
239:02 - university of cape town say hi to
239:04 - stephen and tell him that you saw him in
239:05 - the class but okay
239:07 - that's neither here nor there what i
239:08 - really want to do is i want to
239:10 - extract his school from this
239:13 - email line okay so
239:17 - now eventually we will do things like
239:18 - you look the data will come from files
239:20 - but this is still chapter six so this is
239:22 - the data we're going to search through
239:23 - and so we can say hey let's go find the
239:27 - at sign
239:27 - search up to this position and find the
239:30 - at sign so data dot
239:31 - find at sign and give me back where
239:33 - that's at that's in position 21
239:36 - it's position zero then
239:39 - what we're going to do is we're going to
239:40 - look for the next space after the at
239:42 - sign
239:43 - so we're going to start at the at sign
239:45 - and tell find to start here and look
239:47 - forward until it finds a space
239:49 - so data.fine look for a space starting
239:52 - at the position of the at sign
239:54 - and then that'll be in position 31 so 31
239:58 - is what we get in the space position
239:59 - so now what we have is we have in two
240:02 - variables
240:03 - we have position the position of the at
240:06 - sign and the position of the space
240:08 - after the outside now what we really
240:09 - want is this bit right here
240:11 - so we have to go one beyond the at sign
240:14 - and
240:14 - we don't want the space so we say we're
240:17 - going to use slicing here
240:19 - data sub at position plus one
240:22 - up to but not including the space oh
240:24 - smiley face
240:26 - because we didn't have to say space
240:27 - minus one because that
240:29 - is up to but not including
240:34 - and so we get that little bit right
240:36 - there so we don't this we don't have to
240:38 - say -1 there
240:39 - because this is not actually included
240:41 - the thing that's at the position the
240:43 - space is not included
240:44 - so that's already a little benefit for
240:46 - the up to but not including and so when
240:48 - we print this variable out host
240:50 - we get exactly just the school that
240:52 - stephen
240:53 - uh works at and probably went to as a
240:56 - matter of fact
240:58 - i don't know if he went there or not so
241:00 - this is uh
241:01 - just kind of a note for
241:04 - non-latin character sets you know all
241:07 - programming languages from the 60s on
241:09 - tended to work in what we call the latin
241:13 - character set which is united states and
241:15 - england and europe and lots of places
241:18 - use this
241:18 - abc character set and the special
241:21 - characters
241:22 - but it's really common to want to um
241:26 - use different characters and so if
241:28 - you're going from python 2 to python 3
241:30 - and we'll talk about this a little later
241:32 - when it matters more
241:34 - luckily we're in python 3 and so python
241:37 - is one of the big things about python 3
241:40 - is that all the internal strings are
241:42 - unicode in the
241:43 - in python 2 there was sort of some
241:46 - confusion as you went between strings
241:48 - and
241:49 - this is just a little bit of code and so
241:50 - i'm putting a in
241:52 - here you know some asian characters this
241:56 - is korean actually
241:58 - asian characters into x and i say what
242:01 - kind of a thing this is
242:02 - and that is a string and then there's
242:05 - this
242:06 - unicode and this comes from python 2.
242:09 - if it's a unicode operation it's still a
242:12 - string
242:12 - whereas in python 2 if you put a
242:15 - international characters into x then it
242:17 - was a string
242:18 - and then there was a separate kind of a
242:20 - constant called a unicode constant
242:22 - and it was a different type and there
242:24 - was ways that you had to
242:26 - mess with these unicode variables as you
242:29 - did things like read them from
242:30 - files and put them back into files and
242:32 - did other things so it was much more
242:34 - difficult
242:38 - in python 2 but we're doing in python 3
242:41 - and in python 3
242:42 - it natively understands uh non-latin
242:46 - character sets
242:47 - international asian character sets you
242:49 - know spanish french character sets
242:51 - and so this is a good thing for python 3
242:53 - and this is one of the real benefits of
242:55 - using python
242:56 - 3 and as we start doing stuff where
242:58 - we're exchanging data with the outside
242:59 - world
243:00 - this will come into play and i'll have
243:03 - to show you how to use it
243:05 - there was weird things that you had to
243:06 - do it just makes a lot more sense in
243:07 - python 3.
243:08 - okay so we've talked about strings
243:12 - we learned about the string we're
243:13 - converting it we've done a whole bunch
243:16 - of stuff
243:16 - and this is again you know we're not
243:19 - we're not yet doing anything
243:20 - super useful we're learning sort of how
243:22 - to like slice and dice even though we're
243:24 - sort of not making the meal yet
243:26 - up next we're going to talk about files
243:28 - we're going to read some data and we're
243:29 - going to slice and dice and use all the
243:31 - things
243:32 - in the next chapter that we've learned
243:34 - up to this point so
243:35 - see you see in a bit
243:39 - [Music]
243:56 - hello and welcome to python for
243:57 - everybody my name is charles severance
243:59 - and i'm the
244:00 - author of the book and the teacher of
244:02 - this class
244:03 - uh in this particular session we are
244:05 - going to do
244:06 - um exercise 6.5 from the textbook
244:10 - it's a it's an exercise in parsing text
244:13 - strings
244:14 - and so the basic idea is is we're going
244:16 - to see strings
244:19 - of various kinds in various lengths and
244:22 - we're going to want to extract
244:23 - pieces of them okay and so the idea is
244:26 - to somehow get this part out and then
244:28 - convert it to a floating point number
244:29 - this is
244:30 - a proxy for later things where we're
244:32 - actually reading files or reading stuff
244:34 - off the internet
244:35 - but parsing strings is an important
244:37 - thing for us to do
244:39 - okay and and so let's take a look at a
244:42 - couple of different ways to do this
244:45 - so let's go ahead and get started let's
244:47 - go bring up our atom
244:49 - and i've got it open nicely to uh
244:52 - the right spot here and i'm going to
244:54 - make a new folder
244:55 - hopefully by now you're finding atom
244:59 - ex0605
245:01 - adam or whatever your programmer editor
245:03 - is a sort of a powerful
245:05 - um a powerful tool i'll close this one
245:09 - file new file a powerful tool that lets
245:12 - you sort of
245:12 - save a lot of keystrokes etc etc print
245:17 - uh exercise
245:22 - 6.5 just for yocks
245:28 - x r size and then
245:31 - file save as and again until i save it
245:33 - it's not going to have the pretty colors
245:36 - i'm going to save it in 605
245:41 - the x06
245:45 - dot py and now it has the pretty colors
245:50 - and here i am now i've
245:53 - been doing these and so now i'm actually
245:55 - already in a directory so let me show
245:57 - you how to do relative directory so
245:59 - so i'm in this path right here and i can
246:01 - use
246:02 - both in windows and in mac and in linux
246:04 - i can use the command
246:06 - cd dot dot that sort of thinks of
246:09 - the one before the one that came before
246:12 - and so now i'm up one directory
246:15 - and if i do an ls i will see that this
246:18 - new ex0605 that i just created in this
246:20 - directory
246:21 - from atom is already there cd
246:25 - ex 0605
246:30 - in the next chapter we'll be talking
246:31 - about files and this is where you really
246:33 - need to know this concept
246:35 - of folders and files so ls
246:38 - and i'm going to run python3 ex0605
246:43 - dot py there we go exercise 6.5
246:48 - so we're sort of in the right spot we've
246:50 - got this going and we've got this going
246:51 - pretty soon we'll be putting stuff in
246:53 - these directories that need to be there
246:56 - uh and you'll see how all that'll work
246:58 - in a second
246:59 - well in in in the next chapter where
247:01 - we've got to know all this stuff
247:04 - okay so we'll just grab this first line
247:06 - here and
247:08 - paste that in
247:14 - print stir so
247:23 - let's run it and there we go
247:28 - actually there's supposed to be a space
247:30 - right there so i don't know why this
247:31 - space didn't get copied and pasted from
247:33 - my copy and paste so i'm going to put
247:35 - that space in
247:36 - there's supposed to be a space right
247:38 - there i think
247:40 - but we'll see so
247:43 - the key thing is if you look at the
247:45 - lectures from this section
247:47 - you can like look for things and you
247:49 - look for a pattern and so what i'm going
247:51 - to do is i am going to look for a
247:53 - pattern
247:54 - that says find me a colon okay and i'm
247:57 - going to say
248:01 - where is there a colon equals
248:05 - stir dot find
248:11 - and then print out ipos
248:16 - so i'm going to say where in this string
248:18 - is there a colon that's going to give me
248:20 - the position and offset of that
248:23 - so that says that the colon is in
248:24 - position 18. now it's not always going
248:27 - to be 18.
248:27 - sometimes these strings will be a little
248:29 - bit different okay
248:31 - so the next thing i can do is i can say
248:34 - uh
248:34 - a small piece of this string is you is
248:37 - do stir
248:38 - and then um starting from that position
248:41 - i pose through the end of the string
248:44 - and then we're going to print that out
248:45 - print out the piece
248:48 - and when i'm doing uh string parsing
248:51 - tearing strings apart i i tend to have a
248:53 - lot of situations where i print over and
248:55 - over and over again
248:57 - so now let's see if that piece is the
248:59 - right piece and the answer is
249:01 - it doesn't quite look right because see
249:03 - i've got that colon there
249:05 - and that's because the the posit it says
249:08 - start at 18
249:09 - position 18 where that is and then keep
249:11 - on going and so
249:13 - i need to do i pose plus
249:16 - one so let's see i'll just sort of
249:18 - advance past this little colon character
249:21 - and get into that space okay
249:25 - so let's run it so now i've got space
249:27 - zero eight
249:28 - four seven five and now i i can just see
249:32 - it
249:33 - value equals float
249:36 - of piece because piece is a string it's
249:39 - it's a string and then i'm gonna say
249:41 - print
249:42 - value to see if i got the value right
249:47 - and and let's remember that there's a
249:49 - space here this might mess up float
249:51 - i don't think it's going to mess up
249:52 - float because floats trying to find a
249:54 - floating point number and it kind of
249:56 - but let's just see if it works let's
249:58 - just see if it works
250:00 - okay so that the key is there's it's in
250:02 - position the colon is in position 18
250:05 - the string we pulled out is blank zero
250:07 - eight four seven
250:08 - five and the floating point number is
250:11 - 0.8475 so we've sort of solved this
250:14 - now i can clean this up a little bit by
250:16 - making that plus two so let's just i'll
250:18 - just change that to plus two
250:20 - and you'll see how that changes what i'm
250:22 - doing
250:23 - and so now this this here is the string
250:25 - that one there is the string this is the
250:27 - actual floating point number they're the
250:28 - same thing other than the fact that
250:30 - it's a floating point number and you can
250:31 - add something to it so i could do
250:33 - something like
250:34 - print you know value
250:38 - plus 42.0 and that would
250:41 - that would actually work right so 42
250:44 - point
250:44 - and if i did print
250:50 - piece
250:53 - plus 42.0
250:57 - that will blow up right because
251:01 - peace is a string and 42 is a float and
251:04 - says cant can float
251:05 - can't convert float object to string
251:08 - implicitly
251:09 - okay and so other than sort of taking
251:12 - out this extra stuff
251:27 - i'm just commenting on a whole bunch of
251:29 - stuff here
251:32 - oops
251:40 - so i take out all those print statements
251:42 - these five lines
251:44 - are the lines to do this particular
251:46 - assignment
251:47 - where we are tearing apart a string and
251:50 - in the future the source this is just so
251:53 - that we can play with strings
251:55 - but later we'll be taking this data from
251:58 - all over the place
251:59 - finally we're going to start opening
252:00 - some files and then later in the course
252:02 - we're going to be
252:03 - doing opening data from databases we'll
252:05 - be opening data from
252:07 - the internet and so all there's all
252:08 - kinds of sources of data where we get
252:09 - these strings but for now
252:11 - we're in chapter six and we're only
252:13 - focused on strings
252:14 - so i hope you found this useful and
252:17 - coming up soon
252:18 - we'll be opening files
252:22 - hello and welcome to chapter seven this
252:24 - is the chapter where it all really
252:26 - starts to pay off we have been
252:28 - learning bits and pieces and doing
252:31 - little two lines three lines four lines
252:34 - of code
252:35 - to learn the basic building blocks of
252:37 - python and learn some of the syntax and
252:39 - find lots of terms but now we're
252:41 - actually going to start
252:43 - doing something so if you look at what
252:45 - we've been doing so far
252:47 - you know we have been we're inside this
252:50 - little computer and you type up you you
252:52 - know the
252:52 - python says what next and you give its
252:54 - command and it does something and you do
252:56 - something else and does something
252:58 - and you do this three or four times
252:59 - unless you write a loop and then it goes
253:01 - like
253:01 - you know 10 20 times and that's it and
253:04 - then maybe we write a thing that reads
253:06 - something from our keyboard
253:07 - gives us something back and then we
253:09 - write something that prints something
253:10 - out
253:11 - print a few foot things out and so we've
253:13 - been pretty much using the keyboard
253:15 - the screen the cpu and the memory that's
253:19 - kind of where we've been living
253:21 - and well it's important to talk to the
253:22 - keyboard in the screen the
253:24 - the real world is things like databases
253:26 - that live out here
253:28 - uh files live on our systems and you
253:30 - know connecting to the network and
253:32 - reading
253:33 - reading data from the network and so
253:35 - that's what we're starting to do right
253:36 - now is we're starting to
253:38 - be able to work outside kind of our code
253:41 - and create things that are permanent
253:43 - um and so we're going to be talking
253:45 - initially we're going to work on files
253:47 - we'll later talk to databases in the
253:49 - network and other stuff but for now
253:51 - we are talking about files and so really
253:54 - kind of
253:54 - we're stepping out a little bit and
253:56 - creating reading things that are
253:57 - permanent
253:58 - and creating things that are permanent
254:01 - the kinds of files that we're going to
254:02 - talk about
254:03 - mostly are text files and you can think
254:05 - of these
254:06 - as a sequence of lines in a file that
254:09 - are easily read by python
254:12 - you you've been making text files all
254:13 - along your you know hello.pi
254:18 - that file is a text file too you're
254:19 - using a text editor to create that file
254:21 - you put your python commands in a file
254:23 - you run those files
254:24 - and that's what it is and so a file can
254:27 - be thought of as a bunch of lines you
254:29 - know
254:29 - one two three four five six seven a
254:31 - blank line here that's possible
254:33 - and um but the but the reality is is
254:37 - that these are actually just
254:38 - lines and we have a special character
254:40 - called the new line that we'll talk
254:41 - about in a second
254:44 - so to read a file uh you have to call
254:46 - the open function
254:47 - and open returns what we call a file
254:49 - handle open doesn't actually
254:51 - read the file open makes it prop
254:53 - possible
254:54 - so that you can read the file
254:58 - so the the parameters to open are it
255:00 - takes
255:01 - one parameter it's required which is the
255:03 - name of the file another parameter it's
255:04 - optional whether or not to read it or
255:06 - write it
255:07 - if we're reading the file it doesn't
255:08 - harm it you can read it over and over if
255:10 - you write it
255:11 - it actually if there's already data in
255:12 - that file it truncates it and writes
255:14 - something
255:14 - we're not going to really write files
255:15 - we're mostly going to read them and so
255:17 - open
255:18 - sort of you pass it in a file it gives
255:20 - you back this file handle and then you
255:22 - have a variable in which you store it i
255:24 - often call it f hand
255:26 - to be mnemonic just you'll see my code i
255:29 - use f hand
255:29 - all the time to indicate that that is a
255:32 - file handle
255:33 - and so if we were to run this in uh
255:37 - in interactive mode we'll open mbox.txt
255:40 - and that is a function built into python
255:43 - and then it gives us back a handle does
255:44 - not give the
255:45 - data and kind of see this when we print
255:48 - out the file handle using the print
255:50 - statement
255:50 - it doesn't print the lines that are in
255:52 - the file the lines that are in the file
255:54 - are sort of out there there could be
255:55 - like
255:56 - you know 10 million lines for all we
255:58 - know lines in the file
256:00 - the handle is like a little opening
256:02 - outside of your program
256:04 - and you can talk to the file by opening
256:06 - it then you can read
256:07 - stuff you could if you're writing the
256:08 - file you can write stuff and then you
256:10 - close the file to shut the handle down
256:12 - but handle is
256:13 - a thing that allows you to get to the
256:15 - file it is not the file itself and it's
256:17 - not the data in the file
256:18 - it's just a wrapper that kind of allows
256:21 - you so this if you print it out it's
256:22 - like that's the file we opened we're
256:24 - reading it
256:25 - and encoding has to do with the
256:26 - different kinds of character sets
256:28 - which we talked about at the end of last
256:29 - lecture that unicode character set etc
256:32 - utf-8 is a a great character set it's
256:34 - it's
256:35 - it's probably the most typical character
256:37 - set that you will run into it although
256:39 - you can have
256:40 - different character sets of files but
256:42 - most of them are utf-8
256:45 - so of course this is python if you make
256:48 - a mistake and there's a file that
256:49 - doesn't exist
256:50 - we get a trace back and it blows up
256:54 - um we'll show you how in a second how to
256:58 - deal with that
256:59 - now the new line character is an
257:00 - important part of
257:02 - file reading and in files
257:05 - and strings we can put the new line
257:06 - character in by this backslash n
257:09 - character
257:10 - and the backslash n is the character
257:12 - that indicates that we're supposed to go
257:13 - to another line
257:15 - go to a new line go to a new line and so
257:18 - we have what is this well that's a
257:19 - backslash n that's a backslash
257:22 - n and so
257:24 - if we print it out we print it this way
257:26 - we see that the backslash n is in there
257:28 - this is how we type it we actually type
257:30 - backslash n
257:31 - to python to indicate that we're
257:34 - supposed to put that there
257:36 - but if we do a print statement it
257:38 - actually interprets the backslash end so
257:40 - the backslash n
257:41 - causes kind of this movement to the
257:42 - beginning now the print actually
257:44 - at the end of this adds another
257:45 - backslash in so so the backslash n that
257:48 - we put in
257:49 - by putting it into this string is that
257:50 - one and then print
257:52 - always puts a backslash n at the end
257:55 - there's actually a way to override that
257:56 - backslash n behavior
257:58 - by putting something on the print
257:59 - statement which we'll talk about later
258:02 - now it's important to note that the
258:04 - backslash
258:05 - n is one character right and so even
258:07 - though this x backslash ny
258:09 - prints this and then print adds another
258:12 - new line to go down to here
258:13 - if you ask how many characters the what
258:15 - is the length of this well it's only
258:17 - three
258:18 - that's because that's a character the
258:20 - backslash n is a character and the y is
258:21 - a character
258:22 - so it's a three character string so the
258:24 - backslash n is a character like all the
258:26 - rest of the characters
258:27 - but it's only um we we encode it
258:31 - by typing backslash n it's called an
258:33 - escape where the backslash is the escape
258:35 - backslash
258:35 - n is a way to say new line because we
258:38 - can't see it it's a way for us to
258:40 - encode in a string this non-printable
258:42 - character this invisible character
258:45 - the white space it's part of white space
258:48 - so as we're reading through the file we
258:50 - can think of it as a sequence of lines
258:51 - and we can read these a line at a time
258:53 - we can also read them a character at a
258:54 - time if we want and so but it's more
258:57 - common to say read this line read the
258:58 - next line
258:59 - read the line after that etcetera
259:01 - etcetera etcetera but the way to best
259:03 - think about this
259:04 - it it it doesn't really matter you can
259:06 - think about it as lines and we will in
259:08 - most the programs that we write
259:10 - but realize that the way when we see
259:12 - this
259:14 - we see it like this it comes back to the
259:17 - beginning it comes back to being there's
259:19 - a character in the file
259:21 - at each of these points to say go back
259:22 - to the beginning it's like hitting the
259:24 - enter key
259:25 - on your computer and that is a new line
259:27 - so you have to think that in
259:29 - the file in order for your text editor
259:32 - and python and everybody to know where
259:34 - the lines end you put new lines
259:36 - in the file and that's another character
259:38 - so
259:40 - you know this looks like an empty line
259:42 - this line here looks like an empty line
259:43 - but really it has a single character and
259:45 - the character is a new line
259:46 - and it turns out that in a bit we're
259:48 - going to need to keep track of the fact
259:50 - that
259:51 - every line is ended by a new line so up
259:54 - next
259:54 - i'm going to talk a little bit about how
259:56 - to read files in python
259:58 - [Music]
260:17 - so we're going to find that there's a
260:18 - number of different ways that we can
260:19 - read through the file but the most
260:20 - common way that we're going to read
260:21 - through the file is to treat it as a
260:23 - sequence of lines and we're going to use
260:25 - the
260:25 - determinate loop the for loop to do this
260:29 - and so what happens here is we get back
260:31 - this handle
260:32 - that opens the file and gives us back
260:33 - the handle that handle x file
260:35 - is the variable i named call i just
260:38 - named it x-file
260:39 - that's not the data but it is a
260:42 - sequence it is that file handle
260:45 - represents to python
260:46 - a sequence that we can potentially walk
260:49 - through and then get all the lines
260:50 - and it's the simplest most beautiful
260:52 - elegant way to read all the lines in a
260:54 - file
260:55 - we use the for loop and we have an
260:57 - iteration variable this is going to take
260:59 - when we talk about the file cheese is
261:01 - going to be the first line then the
261:02 - second line and third line then the
261:03 - fourth line so it's like going through a
261:05 - string but you're going through a file
261:06 - now and you're getting it line by line
261:08 - so that's
261:08 - each line i just picked a variable named
261:11 - cheese so you didn't get confused later
261:12 - i'll call this line
261:14 - but it but python doesn't know anything
261:16 - special by naming that variable line
261:18 - okay and so this is it's the 4 and the
261:21 - end and so so
261:22 - for i read this as for each line
261:25 - in the file x the file handle x file
261:28 - so run this loop one time for every line
261:32 - and then print it out so it's actually
261:34 - really quite simple okay
261:36 - um other languages like c or c
261:39 - plus plus or other languages they have
261:42 - to write while loops with endophile
261:43 - conditions and all kinds of things
261:45 - that make this very difficult but this
261:47 - is one of the prettiest things
261:49 - that python has it's a it's a very very
261:52 - pretty thing
261:56 - okay so let's talk about what we might
261:58 - do and we're going kind of back to
261:59 - iterations now what if we wanted to
262:01 - count the number of lines in a file well
262:02 - this is a basic loop
262:04 - counting pattern so we open the file and
262:07 - then
262:07 - like in all these loops we do something
262:09 - to sort of prime the loop to get it
262:11 - started set a variable count to zero
262:13 - and i'm going to use the variable line
262:15 - that's going to go through each of the
262:16 - lines in the file for line and f hand
262:19 - down the file and it's going to run this
262:21 - loop once for each line in the file and
262:23 - the variable line is going to change
262:25 - but all i'm going to do is add count
262:27 - equals count plus one and so that's just
262:29 - like from counters that's just how you
262:31 - detect so every time we see a line we're
262:33 - just going to add one to the counter
262:34 - we're not printing the line we're not
262:35 - looking at its data at this point
262:37 - and then when the line is done however
262:38 - many times it has to go out it comes and
262:40 - we print out line count equals count
262:42 - and so if we open inbox.txt this is
262:45 - going to do all this work and then print
262:47 - this line out
262:48 - and say line count is 132 045 so this is
262:52 - a little
262:53 - five line program that shows you how to
262:56 - count the lines in a text file using
262:58 - python
262:59 - again simple and elegant and not too
263:02 - much syntax for you to have to learn
263:05 - now it's also possible to read the file
263:07 - as a series of characters
263:09 - all in one go read the whole file in now
263:11 - you've got to be careful depending on
263:13 - the size of the file
263:14 - this is going to lead to a string
263:16 - variable with a lot of data in it
263:18 - now if it's you know 100 000 characters
263:20 - that's actually kind of a small thing
263:22 - but if it was uh you know 10 million
263:24 - lines that would probably not be good
263:26 - you'd want to read it one line at a time
263:28 - and process each line and then do
263:30 - something but
263:31 - mboxshort.txt is a small little file
263:34 - so we open it and we get back a file
263:38 - object filehandle object and we call the
263:40 - read method
263:41 - and that says look go through and read
263:43 - all the text and give it back in one big
263:45 - blob
263:46 - one big string and i'll put it in imp
263:49 - and so that's where you have a line
263:50 - a new line a line a new line a line a
263:53 - new line it's not really
263:54 - lines it's just a sequence of characters
263:56 - with new lines in there to punctuate
263:58 - them
263:59 - and now you can split that later we'll
264:00 - see how to split that
264:02 - into separate lines if you want now i
264:05 - picked a file that was short
264:07 - and so this imp variable now has a
264:10 - string in it
264:11 - and i can use the lend function pass a
264:13 - string into the length function says oh
264:15 - 94
264:15 - 626 characters that's kind of a small
264:18 - um a small little file and perfectly
264:22 - okay to read it all in one go
264:24 - and so now i say just print the first 20
264:26 - characters that's you know beginning to
264:28 - up to but not including 20 and so it
264:30 - shows that
264:31 - the first 20 characters of that little
264:33 - file
264:34 - is a from line because this is a mailbox
264:36 - file
264:39 - now let's say we're going to do a
264:41 - searching and we did this loop where
264:43 - you're looking for something
264:44 - and so we're going to search for lines
264:46 - that have a prefix of from
264:49 - okay that's what we're going to do and
264:50 - we're gonna print those lines out so
264:52 - there's lots of lines in this file
264:54 - you know line line line line from line
264:58 - line line line from
264:59 - right on and on and on and we don't we
265:01 - only show these lines the ones that
265:02 - match right that's what we want to do
265:04 - and so we are going to write an open
265:08 - statement
265:09 - and then we're going to loop through and
265:11 - we're going to ask the question
265:12 - if the line starts with from print it so
265:15 - sometimes it's going to skip skip skip
265:17 - skip and that's going to run it then
265:18 - skip skip skip skip
265:20 - skip it's going to run it skip skip skip
265:22 - and then it's going to run it
265:23 - okay so that's the basic idea
265:27 - and then then i'll finish when it's all
265:28 - said and done and so this is like an
265:30 - a criteria this is like a search we're
265:32 - looking for lines that match the string
265:35 - that have their string from as their
265:37 - prefix
265:39 - now when we look at the output of this
265:41 - it's kind of weird
265:42 - we see kind of these little blank lines
265:46 - that show up blank blank blank blank
265:48 - blank blank blank what's going on here
265:52 - what's going on so let's take a quick
265:54 - look
265:55 - the problem is is new lines well i
265:58 - mentioned that the
265:59 - file has new lines in them and so
266:02 - when you do the for loop it doesn't
266:04 - throw the new lines away as you might
266:06 - expect
266:07 - it would be kind of nice if it did but
266:08 - it doesn't it actually shows you when it
266:10 - when you
266:11 - read it reads that first line up to and
266:14 - including the new line and gives you
266:15 - that back
266:16 - as the variable so that is the first new
266:17 - line so that means it's going to go down
266:20 - and then the print statement actually
266:21 - adds another new line
266:23 - so that's the the second line of the
266:24 - file has a new line at the end of it
266:26 - and the print statement adds another new
266:28 - line so if we take a look at the code
266:31 - there is a new line oops come back
266:37 - if we take a look at the code this
266:39 - variable line has a new line in it
266:41 - oops where am i at i'm in the wrong
266:43 - slide there we go
266:47 - yeah this is what i want to do if we
266:49 - look at the code
266:50 - there's a new line in here and then the
266:52 - print adds another new line so the
266:54 - print adds a separate new line and
266:56 - that's how we get
266:57 - two new lines the print statement's new
266:59 - line and the new line from the file
267:02 - here's how we fix it and you're going to
267:03 - write this code a lot because
267:05 - when you're reading text files you end
267:06 - up with a new line and often you don't
267:08 - want the new line
267:09 - but thankfully as we saw in the previous
267:12 - chapter
267:12 - there is a nice little function in
267:15 - python for strings
267:16 - called strip that allows you to throw
267:18 - away white space
267:21 - and to review remember white space
267:26 - is anything that doesn't print and this
267:28 - new line is not a non-printing character
267:30 - so
267:30 - our strip gets rid of it so it's a way
267:32 - to get rid of white space
267:33 - and our strip does it from the right end
267:36 - so it's the right end of the
267:37 - of the of the string and so
267:41 - if we just are going to loop through all
267:43 - the lines in the file we say line equals
267:45 - line r strip and then this
267:46 - variable no longer has the new line at
267:48 - the end of it we have our little if
267:50 - statement and if we print it
267:51 - then this line the data has no thing and
267:54 - then the print
267:55 - the data has a no new line in it so the
267:56 - print only goes down one and so now we
267:58 - have single spaced
268:00 - output and so you're going to be doing
268:01 - that a lot it's really common to read
268:03 - through a
268:04 - file and then just strip the new line or
268:07 - any trailing space
268:08 - off the end of that now
268:11 - there's a couple of ways to do a loop
268:13 - like this and
268:14 - let's let's just think of this as we're
268:17 - looking for
268:18 - a line a file with lots of different
268:21 - lines in it
268:22 - and we want to ignore all the lines
268:23 - except some say good lines and we want
268:25 - to do something with those good lines or
268:26 - the lines we're looking for
268:28 - needle in a haystack this is like
268:29 - searching for a needle in the haystack
268:32 - so if you look at this code at high
268:33 - level we're going to loop through
268:34 - everything
268:35 - and then we're sort of picking which
268:37 - lines are and these are the good lines
268:39 - down here
268:40 - now often we have a bunch more code that
268:42 - we want to do and we're not just
268:43 - printing them but we're going to do a
268:44 - lot of code
268:45 - so sometimes you actually structure the
268:47 - loop a little bit differently and so the
268:50 - way to do it and this is going to do the
268:51 - exact same thing it's just a little
268:53 - different way
268:54 - of thinking about this loop so the top
268:56 - part is the same we're stripping it
268:58 - and what we're doing here is it
269:00 - everything's the same here except we add
269:01 - this
269:02 - knot if the line does not start with
269:04 - from that's the
269:05 - translation of that if the line does not
269:07 - start with from continue
269:09 - so basically we have a skipping pattern
269:12 - so the lines we're not interested in we
269:15 - skip
269:16 - so we come down we you know skip a lot
269:18 - of lines
269:20 - and then we find a line that's good and
269:22 - then we fall through
269:24 - so this is the good code and then we
269:26 - have all the other good code that we
269:27 - want to do to that line
269:28 - we have that showing up down here
269:31 - and so there's just two patterns that
269:33 - two ways to do the exact same thing
269:36 - so another way to select the lines that
269:38 - we're interested in is to use the in
269:40 - operator so we talked before about the
269:42 - in operator and how that works
269:44 - so we're basically and i'm going to use
269:46 - the continue skipping method
269:47 - so we're going to read all the lines
269:48 - these first few lines if the uct.ac.za
269:52 - is not in the line skip it and so this
269:55 - is going to print out all the lines
269:57 - that have the string uct acza in it
270:01 - in them and so you see this is the
270:03 - output of the program
270:08 - sometimes you'll have programs that want
270:11 - to
270:11 - read different files often i give
270:13 - assignments where i say
270:14 - show me how this program runs on the
270:16 - short file and then show me again how it
270:17 - runs on the long file just like this
270:19 - and so the way we do that to input the
270:21 - file name instead of making the file
270:23 - name be a constant to the open call
270:25 - we make the file name be a input
270:28 - so we just run an input statement which
270:30 - gives us a prompt
270:31 - and then we type mbox.txt and then that
270:34 - shows up in this variable f name it's a
270:36 - course of string all the time
270:37 - and we pass that into open and then we
270:38 - open it and then we do
270:40 - you know the count operation so if we
270:42 - enter inbox.txt
270:44 - it counts 179 1797
270:49 - subject lines in mbox and if we give it
270:51 - inbox short it says there are 27 subject
270:53 - lines in mbox and again this is
270:55 - another one of those ifs and it's just
270:56 - counting but only counting lines that
270:58 - match a particular
271:00 - a particular pattern
271:04 - okay so now the user can also type bad
271:07 - file names and we need to be able to
271:08 - deal with that as well
271:09 - and so we we're taking a small small
271:12 - change
271:14 - to the code the danger the dangerous
271:16 - code is this line right here this line
271:18 - right here
271:19 - is going to trace back if that file
271:20 - doesn't exist so what do we do
271:22 - well we're going to just expand that the
271:24 - rest of this program is exactly the same
271:26 - the only thing's different is we we've
271:27 - got this line
271:28 - we've took out insurance on it and
271:31 - we know that it might blow up and so we
271:33 - we have it in a try and accept block
271:38 - so here's how the code runs
271:42 - so you know the input runs we type in a
271:45 - good file name it comes in here
271:47 - this works and so it skips the
271:49 - acceptance so it runs the code and
271:50 - prints out the count
271:51 - so that's the good pattern the bad
271:54 - pattern is
271:55 - here we type in a bad file name it comes
271:58 - in the try except
272:00 - this file name is nanabubu and it's
272:02 - going to blow up so
272:04 - this line blows up so it jumps down into
272:06 - the accept code
272:07 - prints out file cannot be opened so
272:09 - prints this out
272:10 - now this quit is really important
272:12 - because if we don't put this quit in
272:14 - here it's going to continue down here
272:15 - and that's going to blow up here because
272:17 - file handle is not defined properly at
272:19 - this point
272:20 - and so what we have is we have this quit
272:24 - quit is a special function where it
272:25 - comes in and never returns
272:28 - so this is a way to terminate the entire
272:30 - python program
272:31 - silently with no back right so we put in
272:34 - our own error message
272:36 - so we look like we're professionals say
272:38 - could not open this file
272:39 - and then we stop if you don't it's going
272:42 - to come down here and it's going to
272:43 - trace back
272:44 - trace back right there it's going to
272:46 - blow up so the quit
272:48 - is useful when you want to stop
272:50 - executing
272:51 - because you've detected some kind of an
272:54 - error
272:55 - so that's a quick zoom through opening
272:57 - and reading through files and
272:59 - doing some patterns um
273:02 - most of the rest of the programs in this
273:04 - course are going to say
273:05 - open for our strip
273:09 - do look for and then do something
273:11 - interesting that's going to be our loop
273:13 - that we're going to do
273:14 - over and over and over again and now we
273:17 - see how
273:18 - this looping and if and iteration and
273:21 - variables
273:22 - are are starting to come together and
273:25 - you can actually sort of do
273:26 - a program that does something useful but
273:29 - before we get to too many more programs
273:32 - we've got to
273:32 - switch a little bit switch gears and
273:34 - talk up next about
273:35 - data structures and that is the shape of
273:37 - data
273:39 - and how we can use more intricate and
273:41 - complex variables
273:42 - to help solve our problems
273:44 - [Music]
274:02 - hello and welcome to python for
274:04 - everybody my name is charles severance
274:05 - i'm your instructor
274:07 - and in this particular video we are
274:09 - going to do exercise
274:11 - 7.1 and this honestly
274:14 - even though it's a really simple
274:16 - exercise is one of my favorite exercises
274:18 - in the book because
274:19 - in chapters one through six we've been
274:21 - just kind of learning the basic
274:23 - mechanics it's like we just
274:25 - um you know it says bonjour
274:28 - and we say bonjour and it's we're
274:31 - learning
274:32 - but it's not very fun because we're not
274:33 - really solving it so this is our first
274:35 - program that's going to read a file and
274:37 - do something with it and the only thing
274:38 - we're going to do is we're going to
274:39 - convert it to uppercase so
274:41 - it's just a really simple file okay
274:44 - so so here we go but the nice thing so
274:46 - this is important though i keep it
274:47 - simple because you got to figure out how
274:49 - to manage files
274:50 - and that's the payoff for everything
274:52 - that we've done up until now
274:54 - so let's close that one and say file
274:58 - new folder ex0701
275:02 - welcome to files here we are in files
275:05 - file new file and i'm going to say file
275:09 - save as and put it in
275:14 - exo701 and i'm going to call it
275:17 - i could probably come up with a better
275:18 - naming convention than these things but
275:21 - it works for me
275:22 - and i'm a programmer so here we have
275:24 - this file
275:26 - um
275:30 - let's start up a
275:33 - shell a terminal program command line in
275:36 - windows
275:38 - shell and unix cd desktop
275:42 - cd python for everybody folder in the
275:44 - desktop
275:45 - pi 4e cdex 07
275:49 - tab to get me to that i'm in this
275:52 - working directory and i have these files
275:54 - in there and so i say
275:56 - python3
276:00 - python 3 ex
276:04 - 07 i saved this so it's an empty file
276:07 - python is perfectly happy running
276:09 - absolutely nothing because
276:11 - i guess you've made no mistakes
276:14 - okay now here's the key thing
276:18 - we have in this situation we've got to
276:20 - have this file
276:22 - and this this uh version of the website
276:24 - has pythonlearn.com
276:26 - this could also be py4e.com but what i'm
276:29 - going to do is i'm going to control
276:30 - click on this control click
276:33 - open link in new tab okay so now i have
276:36 - this new tab
276:38 - and this is the file okay and this is
276:40 - the file that we're going to read
276:42 - we're going to read this file okay lots
276:45 - of stuff in this file
276:46 - you're going to get to know this file
276:47 - really well the key is is we've got to
276:50 - put this
276:51 - file in this directory
276:54 - because this program is running in this
276:56 - directory and this program needs to open
276:58 - the file
276:58 - and this is where if you got some magic
277:00 - little button and you know whatever
277:03 - click run python it doesn't know what
277:05 - directory it's running in and that's so
277:06 - we've got to get this file in directory
277:08 - so the program runs in the same
277:09 - directory
277:10 - so it can open the file we're looking at
277:12 - right so here's the directory we want to
277:14 - go to
277:16 - and i'm going to say so i've got this
277:18 - file sitting here and this works for
277:19 - text files once they're sort of viewable
277:20 - in the browser
277:22 - i'm going to say file save page as
277:25 - and i'm going to go to my desktop
277:30 - make this a little bigger python for
277:33 - everybody
277:35 - ex0701 and you'll see this is sitting
277:37 - here and i'm just going to say save
277:41 - so that's now been saved as if i
277:43 - downloaded the file
277:45 - so let's go into the terminal and do an
277:48 - ls
277:49 - and so you see that by my action here in
277:51 - the browser i have saved a file
277:53 - into the exact same folder that i've got
277:56 - the code for 7-1
277:58 - so now i can open this file and i can
278:00 - make sense of this file
278:02 - okay so i'm going to add them and you
278:05 - see adam even sees the file so now i can
278:07 - even open the file and add them
278:09 - and here's the file in adam adam knows
278:11 - how to read these text files
278:13 - and so away we go so now ex07.py
278:19 - this next few lines of code you're going
278:21 - to get to know pretty well and so
278:23 - i'm gonna create a variable called the
278:25 - um
278:26 - come back i was in the wrong place i'm
278:28 - gonna open the file
278:30 - with the open command fh equals open
278:34 - inbox short dot txt
278:40 - now remember that open does not actually
278:42 - read the file it kind of gives us this
278:44 - little
278:45 - portal where we can take a look at the
278:47 - file and so if i print fh you might
278:49 - expect
278:50 - that will contain all this data but it
278:52 - doesn't it just
278:54 - is a file handle so let me run that
278:58 - python 3
279:01 - x07.py okay so it's
279:05 - know some information this we'll learn
279:07 - later what objects are this is a
279:09 - python object that has some information
279:11 - in it but the information in this object
279:13 - is not
279:14 - actually the file data to read the file
279:17 - we're going to write a while loop i mean
279:20 - a for loop
279:20 - sorry not a while loop so we're going to
279:23 - say 4
279:25 - l x again that line is a good
279:29 - name here but i want to use a
279:30 - non-mnemonic variable
279:32 - for line in fh
279:36 - and then i'm just going to say print lx
279:43 - okay so this is going to loop through
279:46 - every line in the file and print it out
279:50 - i'm gonna have to make this a little
279:51 - bigger now because it's gonna be very
279:53 - chatty
279:54 - so that is just a loop to read through
279:57 - maybe make this a little smaller
280:00 - there we go
280:03 - oh boy oh boy oh boy missing parentheses
280:07 - in call to print
280:09 - what am i doing wrong here well the
280:11 - problem is is i've been using python 2
280:13 - for so
280:14 - so long that when i'm not drinking
280:18 - enough coffee then
280:20 - i'm going to talk python too so the
280:22 - right way to do this so let me just run
280:24 - this in pipe uh nevermind i won't run
280:25 - into python 2 i'll just fix it
280:27 - because printsco in parentheses in
280:29 - python 3.
280:31 - so i save it and now let's run it again
280:35 - okay so there you go now as we scroll
280:38 - through this
280:40 - you see right away the problem that
280:44 - i'll get rid of that print statement
280:45 - right there let's get rid of that guy
280:47 - just delete them we know how that line
280:50 - works
280:50 - but you see this extra space remember
280:52 - because in
280:53 - the file there is a new line so if you
280:56 - go over here we make this white as well
280:59 - there is a non-printing character at the
281:01 - end of every line called the new line
281:03 - which is the way in
281:04 - files we store the fact that it goes
281:07 - back to the beginning so it's like
281:09 - character character character character
281:11 - character go back to the beginning that
281:13 - was a new line
281:14 - you know character character character
281:17 - character character character character
281:19 - the next character is a three the next
281:20 - character is a new line and so it goes
281:22 - to the beginning of the next line
281:23 - so that's the new line and print
281:27 - the print statement automatically adds a
281:29 - new line and so in this case we have one
281:31 - new line from the file
281:33 - and then we have another new line that
281:35 - prints adding
281:36 - okay and but that's okay
281:42 - we can say l y
281:45 - equals l x dot strip
281:50 - actually r strip
281:54 - to strip the characters from the right
281:56 - hand side the non-printing characters
281:57 - from the right-hand side
281:59 - and then we'll print out l-y
282:03 - so i'll clear my screen and run that
282:05 - again so it does exactly the same thing
282:07 - but you don't see all these blank lines
282:09 - and so
282:10 - this so ly is a different variable i i
282:12 - made a strip
282:14 - of it and then i did printed l y instead
282:17 - of lx if i had printed lx i'd get these
282:19 - extra blank lines
282:21 - and so this is a very common thing you
282:24 - open a file you loop through it
282:25 - through all the lines in the file and
282:27 - then you throw away the non-printing
282:29 - characters
282:29 - at the end of the line and then you do
282:32 - something with it
282:34 - so right now we're just printing it but
282:37 - what we're supposed to in our assignment
282:39 - is make it uppercase
282:44 - and so let's just call the upper method
282:50 - okay make them all uppercase see if that
282:52 - works
282:54 - and there you go and so now the line has
282:56 - been shouted they're
282:57 - only one line and everything is fine
282:59 - right so
283:01 - it's been shouted um all uppercased
283:04 - this little syntax here is what's called
283:07 - a method this is a
283:08 - string variable an upper is a method
283:10 - within the string variable
283:12 - that returns us an uppercase version of
283:14 - that and again that's object-oriented
283:16 - terminology and we will
283:18 - learn about that in an upcoming chapter
283:20 - but for now we just sort of type it and
283:22 - understand it and later we'll understand
283:24 - better that there's a whole series of
283:26 - things you can do
283:27 - after this dot uh for for a variable in
283:30 - uh
283:30 - in python and so there you have uh
283:34 - the exercise 7.1
283:38 - um for the book python for everybody
283:41 - i hope you found this useful see on the
283:44 - net
283:46 - hello and welcome to chapter eight we're
283:48 - going to talk about lists in this
283:50 - chapter
283:51 - up to now we've been talking about
283:53 - algorithms
283:54 - algorithms are the concept in computer
283:56 - science of
283:58 - using the programming language to
283:59 - express the steps that you want the
284:01 - computer to go through to solve the
284:02 - problem
284:03 - read some data convert it to a floating
284:06 - point number check to see if it's
284:07 - greater than 40 do one thing if it's
284:08 - greater than 40 do another thing if it's
284:10 - not
284:10 - then print out the result or uh open a
284:14 - file
284:14 - read everything if the first line starts
284:16 - with something do something
284:17 - if not skip it and then add all the
284:19 - things up
284:20 - those are steps those are a series of
284:23 - steps and hopefully by now you're
284:24 - getting to the point where you have a
284:25 - good understanding of steps
284:27 - but there's a whole other side of
284:29 - computer programming and we call it data
284:31 - structures and data structures
284:33 - is not the steps but instead clever ways
284:35 - that you
284:37 - lay out the data and clever ways that
284:39 - you make sure that the data does what
284:41 - you want it to do
284:42 - and so that's we're going to start
284:44 - talking about now lists are the first
284:46 - and most the simplest data structure
284:47 - strings are kind of like data structures
284:49 - but lists are probably our first real
284:52 - data structure that we're going to think
284:53 - about and design and make use of
284:55 - effectively
284:56 - but before we talk about what is a
284:58 - collection we should talk about what is
285:00 - not a collection so we're familiar with
285:02 - what a variable is we know that a
285:03 - variable is a little piece of memory
285:05 - that's got a label on it
285:06 - and then an assignment statement you
285:08 - know sticks a 2 into x and then x is
285:11 - and then 2 is in this little cupboard
285:13 - and then it goes to the next line and
285:15 - then
285:16 - 4 goes into x and so the 2 goes away and
285:18 - the 4 is there
285:19 - a key thing is you can't have more than
285:21 - one variable
285:22 - at any given moment right and more than
285:25 - one value in a variable
285:26 - so when we move to collections
285:28 - collections are more like suitcases
285:30 - we can put lots of things in them we
285:32 - have ways of organizing them
285:34 - and as we go through lists and
285:35 - dictionaries and tuples we'll see how
285:37 - there are different ways to organize
285:39 - them
285:39 - and as a matter of fact we've been
285:40 - talking about lists for a while
285:42 - every time we use one of these square
285:44 - bracket syntaxes in earlier programs
285:46 - we've been working with lists
285:48 - and so this is technically a three item
285:51 - list with three strings got commas here
285:53 - joseph has one string glenn and sally or
285:55 - another string and here's another one
285:57 - that is another thing and the list is
285:59 - basically
286:00 - it's a list constant and it's being
286:02 - assigned into a variable so this friends
286:03 - variable
286:04 - has three things in it so that's
286:06 - different than what we've been talking
286:08 - about
286:08 - before so these brackets and bracket
286:12 - structures with square brackets
286:13 - are those lists and so the print is just
286:16 - a print with parentheses to get the
286:17 - print to work
286:18 - but 1 124 76 is a three item integer
286:22 - list
286:23 - red yellow and blue is a three item
286:25 - string list
286:26 - but it doesn't all have to be integers
286:28 - or strings python can
286:29 - handle different things in different
286:31 - kinds of data in different positions in
286:33 - the list
286:34 - so red 24 98.6 a three item list with a
286:37 - string
286:38 - an integer and a floating point number
286:41 - and
286:41 - while we're not going to use this too
286:42 - much for now this
286:44 - outer list is a three item list and the
286:47 - second item
286:48 - is another list so this is kind of
286:50 - alluding toward what we'll do when we
286:52 - start talking about data
286:53 - structures and that is we have a
286:55 - structure and then we have another
286:56 - structure inside of it and sometimes
286:57 - this can get quite complex
286:59 - and we're doing this for a reason this
287:01 - here has no reason
287:02 - just to show you that it's possible that
287:04 - that lists can be made up
287:06 - of lots of things including other lists
287:08 - and of course there is also
287:10 - the notion of the empty list and like i
287:13 - said i have had to be able to tell you
287:15 - about
287:16 - lists all along we use them in for loops
287:19 - we can put lots of things here we can
287:20 - put file handle here we can go through
287:22 - the file
287:23 - we can put a string there we can go
287:24 - through the characters in the string and
287:25 - in the list and the iteration variable
287:27 - then goes through the successive
287:29 - elements of the list
287:30 - and that's why this prints off y4321 and
287:33 - then the loop is done and it prints out
287:34 - blastoff
287:35 - so we've been using them and we've been
287:37 - actually iterating through lists
287:39 - with four statements all along
287:42 - so the for each i mean the for statement
287:44 - um
287:45 - you know has has been something we use
287:47 - with lists and every when you just need
287:49 - to go iterate through the list and go
287:50 - through every item in order
287:52 - uh the four the four is a great way to
287:54 - do that so friend is our iteration
287:56 - variable
287:57 - friends is our list variable and so that
287:59 - says
288:00 - friend is going to successfully take on
288:01 - the value joseph glenn
288:03 - and sally and print out you know happy
288:05 - new year
288:06 - joseph glenn and sally runs three times
288:08 - once for each of the values
288:10 - and the iteration variable advances now
288:13 - i do want to make it really clear that
288:16 - the choice of
288:17 - friends uh and friend uh singular and
288:21 - plural
288:21 - is arbitrary and capricious it happens
288:23 - to be convenient and intuitive
288:26 - that the iteration variable is one and
288:29 - the list variable is more than one
288:31 - but python has no idea about singular
288:33 - and plural as a matter of fact python
288:34 - would care
288:35 - it would be totally equivalent for
288:37 - python to do the same thing to have the
288:39 - list variable be
288:40 - z and the iteration variable bx x will
288:42 - take on the successive values of these
288:44 - three things
288:45 - now am i being nice to you by calling
288:47 - this list friends and this
288:49 - iteration variable friend i am but i
288:51 - also don't want it to confuse you if
288:53 - you're just a beginning developer
288:56 - so just like strings we can sort of look
288:58 - within lists part of the
289:00 - thing is when you put more than one
289:01 - thing in a data structure you need to
289:03 - get
289:03 - them out and so lists have
289:06 - positions they maintain order and so the
289:09 - first thing in the list is the sub zero
289:11 - position
289:11 - sub one sub two just like strings
289:14 - there's zero based
289:15 - just like european elevators there's
289:17 - zero base so if we take a look
289:19 - and we say oh friend sub one that's how
289:21 - i read that the little square brackets
289:23 - when you take a variable here and you
289:24 - say friend sub 1. remember
289:26 - singular and pearl don't matter print
289:28 - sub 1 means
289:29 - glenn because this is the zero and
289:31 - that's the one and then sally's the sub
289:33 - 2.
289:34 - and so that's what prints glenn out in
289:35 - this particular
289:37 - thing now lists are mutable
289:40 - mutable is another word for changeable
289:42 - that can be changed
289:43 - meaning that a list has three things you
289:45 - can change the thing right in the middle
289:46 - if you want
289:47 - to take a look at what's not mutable
289:49 - strings are not mutable
289:50 - so if i take a look at assigning banana
289:53 - into fruit well fruit sub zero is a
289:54 - capital letter b
289:56 - could we imagine for the moment that we
289:58 - could change fruit sub zero
289:59 - zero to lowercase b well this syntax
290:02 - would be how you would do it if you
290:04 - could do it but it turns out that
290:06 - strings are not mutable meaning they're
290:09 - not changeable once you create them
290:11 - and that's why when we do things like
290:12 - lowercase or uppercase
290:14 - we take a look at the fruit and we say
290:16 - give me a lowercase copy of that and
290:18 - then we take the return value from this
290:20 - and we store that in
290:21 - x and that's how x becomes a lowercase
290:23 - banana
290:24 - but fruit is still the original one so
290:27 - fruit has not changed
290:28 - compare and contrast that with
290:32 - a list though here we have a 5 item list
290:34 - 2 14
290:35 - 26 41 and we're going to do the sub 2
290:38 - position
290:40 - and the sub 2 is 0 1 2 so that's that
290:43 - one right there and we're going to
290:44 - assign a 28
290:45 - into it so that 28 is going in here
290:48 - gonna wipe that out and put 28
290:50 - in so we can do item assignment in lists
290:53 - by putting a bracket syntax on the left
290:56 - hand side
290:56 - to say don't just put it in a variable
290:58 - put it in this position within the
291:00 - variable so that's what that's doing
291:02 - and when you print that out to 28
291:03 - everything else is unchanged i mean the
291:05 - whole list is there
291:06 - there could be a thousand items in the
291:07 - list and then you're changing
291:09 - the second one
291:12 - we have a function called len we've been
291:14 - using this len function all along
291:17 - to take a look at how long strings are
291:18 - it counts the number of characters in
291:20 - the string so that's a nine character
291:21 - string
291:22 - if we have items in a list len tells us
291:25 - how many items there are it's not like
291:26 - how many characters there are it's the
291:28 - number of things
291:30 - and each thing doesn't have to be a
291:31 - number it could be a number a string or
291:33 - even another list
291:34 - and len is the way to say hey how many
291:36 - things are in there
291:40 - there's a function that returns lit a
291:42 - list of numbers and we use it
291:44 - as we'll see in a second to construct
291:45 - specialized loops to go through
291:47 - okay so we've taken a look at loops and
291:49 - now we're going to just take a little
291:51 - a bit of a look at some of the
291:52 - operations that you can do with loops
291:54 - um python has this as we'll soon learn
291:57 - object-oriented approach to its
291:58 - operators
291:59 - and the plus can add strings and it can
292:02 - add numbers
292:03 - floating point numbers integer numbers
292:04 - strings etc
292:06 - and so the plus similarly works this way
292:09 - with
292:10 - lists the plus looks to its left and
292:12 - looks to its right and says
292:14 - what am i adding and in the case that
292:15 - i'm adding the list one two three and
292:17 - the list four five six
292:18 - it concatenates them together in this
292:20 - way it sort of functions like a string
292:22 - and so we get one two three four five
292:24 - six it's just concatenate list
292:25 - this list to another list and it doesn't
292:28 - change a or b
292:29 - just like in any kind of assignment
292:31 - statement calculations on the right side
292:33 - don't change the variables and then
292:35 - produce a new variable and then assign
292:36 - that
292:37 - into c you can also also use list
292:41 - slicing and it's it it's easy to
292:43 - remember if you remember how strings
292:45 - work
292:45 - list works exactly the same way so it's
292:48 - you know of course it's a little tricky
292:50 - the first number is the starting
292:51 - position they start at zero so
292:53 - one is right there so it's the zero
292:56 - position one position start at one
292:58 - right but go up two but not including
293:01 - three there's
293:02 - two one two three so this goes up 2 but
293:05 - not
293:06 - including 3 and that's why we get 412
293:08 - out of that
293:09 - so up 2 but not including i'll just say
293:11 - that over and over and over again
293:14 - if we do you can leave the first part
293:16 - out
293:17 - you can leave the first part out here
293:18 - and you can say oh up two but not
293:20 - including four so that starts at the
293:22 - beginning goes up two but not including
293:24 - four
293:24 - and so that's how we get that piece
293:26 - right there we can say
293:28 - um start at the position three zero one
293:32 - two
293:33 - three start at position three and go to
293:35 - the end
293:36 - now the fact that the number three is in
293:38 - here is sort of irrelevant
293:40 - three to the end is those three numbers
293:43 - and then you can do the whole list with
293:45 - slicing as well again these pretty much
293:46 - are the exact same examples i used when
293:48 - i was doing strings
293:50 - they're pretty much the same
293:54 - there's a number of different methods
293:56 - and you can look up all the
293:57 - documentation in list i often just use
293:59 - the dur command
294:01 - to remind myself of them append we'll
294:03 - look at
294:04 - count looks for certain values in the
294:06 - list extend adds things to the end of
294:08 - the list
294:09 - index looks things up in the list insert
294:12 - allows them the list to sort of be
294:13 - expanded in the middle
294:15 - pop pulls things off the top remove
294:17 - removes a
294:18 - an item in the middle reverse flips the
294:20 - order of them and sort
294:22 - puts them sorted order based on based on
294:25 - the values
294:26 - so let's look at a couple of these
294:33 - so if we build a list from scratch we
294:35 - have a way to ask for an empty list
294:37 - a couple different ways to ask for an
294:39 - empty list we could use just two square
294:41 - brackets next to each other
294:42 - but this is a form we call the
294:44 - constructor form where we say hey python
294:46 - make a list
294:46 - in this case the word list is like a
294:48 - reserved word to python
294:50 - it's really a reserved class but
294:54 - say list parentheses says make me an
294:56 - empty list and then assign that list
294:58 - into stuff so stuff is now it's a list
295:02 - object it's a type list but it has
295:04 - nothing in it
295:05 - and then we can call the append method
295:07 - stuff.append and stick
295:09 - book in and then we say oh let and that
295:10 - knows how long and the stuff knows how
295:12 - long it is
295:13 - where the end is and how to add
295:14 - something to it and then add a 99 to it
295:17 - and we print it out we got book in 99
295:19 - reminding ourselves
295:20 - that lists while they're often the same
295:22 - types of variables
295:24 - same types of values in the various
295:26 - positions in the list it doesn't always
295:27 - have to be that way
295:29 - then we say oh we'll stuff that a pen
295:30 - cookie you can keep on going
295:32 - and then we end up with three things and
295:35 - the cookie
295:37 - we have an in operator it works pretty
295:40 - much like the in
295:41 - operator in a string is 9 in my list and
295:45 - that's pretty simple and the answer of
295:46 - course is yes 9 is in my list
295:48 - is 15 in my list looking through no it's
295:51 - not 15 is not in my list
295:53 - is and then there's the not in operator
295:55 - think of that as kind of like one
295:56 - operator
295:57 - is 20 not in the list and the answer
295:59 - since it's not there is true
296:01 - and so that's a way to just you know
296:03 - it's kind of like starts with or in for
296:04 - strings
296:06 - same kind of stuff lists are in order
296:09 - and they're sortable and so this is
296:11 - something that we take good advantage of
296:13 - uh a lot of what computers want to do is
296:15 - sort stuff you know look all these
296:17 - things up
296:17 - append them and then get them sorted and
296:20 - so there is this method
296:21 - inside of print of inside of list that's
296:24 - just the sort method so here we
296:26 - you know put three values in zero one
296:28 - two position zero one and two joseph
296:30 - glenn and sally
296:31 - and then we tell the list to sort itself
296:33 - and then we print it out
296:34 - now this is actually sort of the list in
296:36 - place which is different like
296:37 - than upper and lower because if you
296:39 - remember strings are
296:40 - not mutable but lists are mutable and so
296:43 - you say hey
296:44 - just sort yourself okay and so just sort
296:47 - yourself and then it sorts it
296:48 - and then it's in alphabetical order
296:50 - glenn joseph and sally i happen to be
296:52 - clever i only put strings in there and i
296:54 - put my uppercase and lowercase in a very
296:56 - consistent pattern
296:57 - but the list has changed and if i look
296:59 - at list sub 1
297:00 - that is the second item which is joseph
297:03 - that prints out
297:04 - right down there
297:08 - there's a whole bunch of built-in
297:10 - functions to help manipulate list the
297:11 - other things i was showing was a
297:13 - method sort is a method that's part of
297:15 - list but there are other functions that
297:17 - take lists as their
297:18 - arguments we already talked about the
297:21 - lend function
297:21 - tells you how many items there are there
297:24 - is pretty obvious max it says go through
297:26 - and find the largest
297:28 - min go through and find the smallest sum
297:31 - goes through
297:32 - adds them all up and we can say let's do
297:36 - average by taking the sum of all of them
297:38 - and dividing it by the length and you
297:40 - might think to yourself oh wow
297:42 - i wish we had known this a few chapters
297:44 - back when we were having to write all
297:45 - those loops to do max min sum
297:48 - largest smallest etc you can kind of
297:50 - think in your mind that inside each one
297:52 - of these functions
297:52 - is a loop that does pretty much what you
297:54 - did in those chapters and part of the
297:56 - reason we did that back then even though
297:58 - these things were here was
297:59 - they're kind of easy loops to understand
298:01 - um and so
298:03 - uh those are there and
298:07 - and basically there allows two different
298:10 - ways of building loops to do the maximum
298:12 - minimum
298:13 - now it's not necessarily all that much
298:15 - easier
298:16 - to to do something
298:19 - using these because you either can do
298:22 - them the old way
298:23 - or you can do make a list and then use
298:26 - these functions so
298:27 - let's take a look and i'll just say that
298:29 - these two bits of code
298:31 - are doing the exact same thing and what
298:33 - they are is they're implementing a
298:34 - program
298:34 - that's going to repeatedly ask for
298:36 - numbers until we type the word done
298:38 - and then it's going to compute the
298:39 - average and tell us what they are and so
298:42 - using
298:42 - sort of the stuff from uh the loop
298:45 - chapter
298:46 - we start with a total variable an
298:47 - account variable set them to zero
298:49 - and then we read a number we check for
298:52 - done we
298:52 - to break out but then we convert it to a
298:54 - floating point value
298:56 - and then we say total equals total plus
298:58 - value and count equals count plus one
298:59 - and so this is going to run over and
299:00 - over and over again
299:02 - however many times we're going to do
299:03 - this and then it's going to pop out
299:05 - and when it's done it's going to have
299:07 - this value of total the running total
299:08 - will become the overall total
299:10 - divided by count and it'll print the
299:12 - average out okay
299:13 - and so that that's kind of how we would
299:15 - have done this before we knew how to do
299:17 - this with lists
299:19 - now let's take a look at the other one
299:22 - and the other one we say let's make an
299:25 - empty list remember this is that
299:26 - constructor
299:27 - syntax that says to python make me an
299:29 - empty list
299:30 - and assign the empty list it has nothing
299:32 - in it
299:33 - right but it is a list has nothing in it
299:35 - into the variable num list
299:37 - now we're going to write another loop
299:38 - we're going to this part here is the
299:40 - same
299:40 - these three lines read the number if
299:42 - it's done quit
299:43 - and convert to value but instead of
299:45 - doing the actual calculation right now
299:47 - what we're going to do is just append it
299:48 - to the list so the list will start out
299:50 - empty
299:50 - then the three will be in the list then
299:52 - the nine will be in the list then the
299:53 - five will be in the list
299:55 - so we're appending each time through the
299:57 - loop we're appending into the list
299:58 - so we're just growing the list every
300:01 - time we read a value
300:02 - instead of actually computing something
300:04 - with the value that we've got so either
300:06 - in either case we get value
300:07 - and in one case we append it to the list
300:10 - and then finally it finishes the break
300:12 - happens and then we just say oh hey
300:14 - python sum up everything in the list add
300:16 - these three numbers together and then
300:17 - take the divide it by the length of all
300:19 - those things
300:20 - and you'll have the average and so these
300:22 - two things
300:23 - give us exactly the same output
300:26 - now there is one difference if there was
300:28 - like one million
300:30 - or one billion numbers they actually
300:32 - have to all be stored in the memory
300:34 - simultaneously whereas here it's
300:35 - actually doing the calculation
300:37 - uh of the billion numbers and not using
300:39 - up so much memory
300:40 - for most of the things that you're going
300:42 - to be doing the difference in memory
300:44 - there is a difference in memory this
300:45 - uses
300:46 - this one here uses more memory but
300:50 - i can't draw very well more memory um
300:53 - it uses more memory but it doesn't
300:56 - really matter by the time it's all said
300:57 - and done and so for you
300:59 - this the the difference between these
301:01 - things is not all that significant but
301:03 - it's important to understand
301:05 - that they're just two techniques to
301:06 - accomplish the same thing with lists
301:17 - [Music]
301:23 - so now we're going to wrap up and talk a
301:25 - little bit about how strings and lists
301:26 - are related
301:27 - they're sort of related in that they
301:29 - both have zero base things and we use
301:31 - the square bracket operator
301:32 - to do various things but there's a lot
301:35 - of situations where we're
301:36 - looking at our data and we're combining
301:38 - the use of lists and strings
301:40 - so let me show you the first thing
301:42 - probably the coolest thing
301:44 - we're going to use it a lot the rest of
301:45 - the class and that is the split function
301:48 - so let's take a string we've got abc
301:50 - here it's with three words what we're
301:51 - interested in the fact is that there's
301:53 - spaces in this word
301:55 - and what split does is says you know i'm
301:56 - going to look through this thing i'm
301:57 - going to find this and i'm going to
301:59 - break this
302:00 - into pieces and i'm going to return you
302:02 - a list of the separate
302:04 - individual pieces so read look for
302:06 - blanks and
302:07 - break it in pieces and give me back the
302:08 - pieces so i'll print these out and now
302:10 - you see that it's a list
302:12 - with three items with three words the
302:14 - spaces are gone
302:15 - but it's given it to us so it's like
302:17 - split this into words please and give me
302:19 - the individual words and
302:20 - give me a list of individual words
302:22 - rather than a big long string with
302:23 - spaces in the middle of it
302:25 - and that is a quick way to go from a
302:27 - line and
302:28 - and it's really common a lot of things
302:31 - were going like go get the second thing
302:32 - or the third thing or whatever so the
302:34 - split's really nice because then
302:36 - you can just grab stuff and so you say
302:37 - oh how many things did i get well i got
302:39 - three the lend function tells us that
302:41 - and i can print the first word i got
302:44 - which is
302:45 - and with the sub zero and that'll be
302:46 - like with will be the first word
302:48 - because that's the sub zero position so
302:50 - i read something
302:52 - i split it i can say there's three
302:54 - things and i can look at stuff the first
302:56 - word basically without really knowing
302:58 - much now if you remember
303:00 - earlier and we'll see this we used find
303:02 - and
303:03 - slicing to do a similar kind of thing
303:05 - but people tend to prefer uh
303:08 - the split and you can
303:11 - you can you know oops go back you can
303:14 - also then um loop through them so you
303:18 - can
303:19 - split these things into stuff as a word
303:21 - and then go through the
303:22 - with w and then it's gonna and it's
303:24 - gonna go through
303:26 - uh w is gonna take the successive with
303:28 - three words
303:29 - and so you can make a loop by reading
303:31 - some data
303:32 - splitting it and writing a for loop and
303:34 - then it's effectively going through the
303:35 - words in that line of data
303:37 - and so that's a really powerful concept
303:39 - that we'll use
303:40 - in a lot of the programs that we're
303:42 - going to write just a couple of bits
303:44 - about this and how it works um split
303:47 - with no parameters here it looks for
303:49 - spaces but it also treats
303:51 - a bunch of spaces as a single space and
303:54 - so it's pretty smart about that and so
303:56 - even though this has a lot of spaces
303:58 - between lot and of
303:59 - you only see lot of all the spaces are
304:02 - gone
304:02 - it does something special about spaces
304:04 - it's really
304:05 - white space so tabs or new lines or
304:07 - other characters
304:08 - would also qualify in split basically
304:12 - now you don't always have to split based
304:15 - on spaces and a lot of data that you're
304:16 - going to run into
304:17 - you're going to want to split on
304:18 - something else and so here's some data
304:20 - that looks like we're using colons to
304:22 - separate the first second and third
304:24 - piece
304:25 - now if you just call split split's
304:27 - looking for spaces
304:28 - and so split gives you back a list of
304:30 - the things broken apart with spaces but
304:32 - there's not a single space in that line
304:34 - and so we get one a list see it's a list
304:37 - but there's only one item and the
304:38 - semicolons are sitting there
304:39 - split doesn't go like oh this looks like
304:41 - it should be semicolons you know
304:43 - split's job is to use spaces and split
304:46 - the string based on spaces
304:47 - okay but given that this is something we
304:51 - like to do
304:52 - you can tell split what character you'd
304:54 - actually like to split on
304:55 - now it's not quite as clever when
304:57 - splitting on something other than spaces
304:59 - it doesn't understand that you know
305:01 - if there's a bunch of semicolons in a
305:02 - row it still thinks of those as
305:04 - splitting
305:05 - points to split but in this particular
305:07 - case when there's no spaces
305:09 - then you know it's going to split that
305:10 - so it says split this based on the
305:12 - semicolon
305:13 - based instead of being based on the um
305:16 - the space and so if that you take a look
305:19 - at what comes out of this
305:20 - we split on semicolon now we have a
305:22 - three item list
305:23 - and we get first second and third and a
305:25 - lot of your data comes out of some
305:27 - logging system
305:28 - or some routers status updates who knows
305:31 - what you're looking at
305:32 - but the delimiter is often something
305:34 - other than space and you can do that
305:37 - with split
305:40 - so this is a useful thing when parsing
305:43 - things like our email address right we
305:45 - wanted to get things like the email
305:47 - address this second
305:48 - piece off of the line um
305:52 - and so we can use split
305:55 - to take advantage of this and so here's
305:57 - a little loop that's just going to print
305:59 - out
305:59 - not the email addresses but instead the
306:02 - day of the week we're going to print the
306:03 - day of the week out
306:04 - for all these things how do we do that
306:06 - well we can observe
306:08 - really quickly that
306:12 - if we split based on spaces
306:16 - we it's the 0 1 2 it's the two positions
306:20 - so we can quickly write
306:21 - a bit of code that you know opens the
306:24 - file
306:26 - then loops through the lines we do this
306:27 - all the time now a strip
306:29 - takes off the end of the new lines we
306:32 - can check to see if it starts with from
306:33 - space
306:34 - right from space is our key so we're
306:36 - ignoring we're ignoring all of the lines
306:38 - that don't start with from sprays but
306:40 - then we find the line that starts with
306:41 - from space
306:42 - and we split it and then we just print
306:44 - out the second word
306:45 - and so we get the second word of the
306:47 - lines that start with from and that's so
306:49 - how this thing works
306:56 - now sometimes we want to dig into deeper
306:59 - and we will take something split it and
307:01 - then split another piece of it again
307:03 - with a different delimiter
307:04 - so let's just say that the thing that we
307:06 - want to achieve is getting the part
307:08 - after the at sign for email addresses
307:10 - and we did this with again find and pose
307:13 - and stuff like that but you can use
307:14 - split to do this as well
307:16 - so the first thing we're going to do is
307:17 - we're going to take this line we're
307:18 - going to split it based on spaces
307:20 - right chop chop chop chop chop
307:23 - and the fact that there's an extra space
307:24 - there doesn't matter split happily just
307:26 - like zooms through that
307:28 - and then words sub 1 0 1
307:31 - 2 word sub 1 is this email address so
307:34 - we'll put that in a variable called
307:35 - email
307:36 - and so email will be a string that's
307:38 - just this so in
307:39 - two lines we've pulled out the second
307:42 - address into a variable
307:43 - then what we're going to do is we're
307:45 - going to re-split that
307:48 - we're going to take this string we've
307:49 - got and split it based on that sign
307:51 - because we know it's an email address
307:53 - so we get a new set of pieces the first
307:55 - part is the person's name and the second
307:57 - part
307:58 - is the host name that their email is
308:01 - hosted on
308:02 - and then what we can do then is we just
308:04 - happen to know that
308:08 - we just happen to know that this this is
308:10 - the zero item and this is the one item
308:12 - so we can get at that
308:13 - so the interesting thing of going here
308:15 - if you think back
308:16 - to how we did this before with find and
308:18 - pose and all that stuff
308:20 - it's really a lot cleaner and we don't
308:22 - for me i can
308:23 - i can look at this after you understand
308:26 - it and it's easy for me to understand
308:27 - that it's correct whereas that pose
308:29 - stuff
308:30 - you got to add one and start the second
308:32 - find after
308:33 - just just remember that and this is a
308:35 - lot cleaner way and this is a more
308:36 - typical way of pulling this kind of
308:38 - information
308:39 - out of a line so in this chapter we've
308:43 - talked about lists we've talked about
308:44 - the concept of collections that's our
308:46 - first data structure we're not just
308:47 - doing algorithms
308:48 - we kind of know algorithms now but now
308:50 - we're going to do data structures and
308:52 - the next
308:52 - this chapter and the next two chapters
308:54 - are our foundational data structures and
308:56 - then we'll
308:56 - like everything we'll make more complex
308:58 - data structures by composing those data
309:00 - structures
309:01 - together we've looked at how strings and
309:03 - lists connect together
309:05 - and how split works and these are all
309:07 - really powerful tools that we're going
309:09 - to use
309:10 - going forward
309:12 - [Music]
309:25 - hello and welcome to chapter nine now
309:27 - we're going to talk about python
309:29 - dictionaries
309:30 - python dictionaries are probably the
309:33 - thing that
309:34 - most programmers love the most about
309:36 - python
309:37 - because they're very powerful they're
309:39 - like a little in-memory database it's
309:41 - the second of our kinds of collections
309:43 - and
309:44 - probably the best collection to review
309:46 - what a collection is it is a situation
309:49 - where we are going to have a variable
309:50 - like a list or a dictionary that we can
309:52 - put multiple pieces of information in
309:54 - rather than a single piece of
309:56 - information
309:57 - and of course prior to collections we
309:59 - would put something into x and then we
310:01 - put something else into x and it would
310:03 - be overwritten
310:04 - and uh now with lists we can append
310:07 - things on to the end
310:08 - and so if we compare lists and
310:12 - dictionaries the list is sort of the
310:14 - organized version of the collections
310:16 - it everything stays in order you add
310:19 - something it always adds to the end you
310:20 - take something it sort of compacts
310:22 - itself it's zero through
310:24 - the n minus one where n is the number of
310:26 - items and so it's very organized kind of
310:28 - like a pringles where the potato chips
310:30 - are nicely stacked
310:32 - um dictionaries are messier
310:36 - you can put things into dictionaries
310:38 - there's no real
310:40 - sense of order in dictionaries
310:42 - everything has a key
310:43 - so you sort of throw things in and they
310:45 - kind of mix around in there somehow
310:47 - and you pull things out based on the key
310:49 - it's like you you sort of
310:50 - stick a label on it you know where you
310:53 - say okay
310:54 - i'm going to take this thing
310:58 - and i'm going to put chuck on it and i'm
311:01 - going to take uh
311:05 - these sunglasses with the chuck label
311:08 - and i'm going to
311:09 - throw it into the dictionary and i'm
311:10 - like hey give me back chuck
311:12 - and like oh here's your sunglasses
311:14 - because you mark everything
311:15 - this is like the key this is the value i
311:19 - took a pair of sunglasses and i threw it
311:21 - in
311:22 - so it's kind of like a purse or it's a
311:24 - sort of like a mess
311:26 - and so the idea is is you have these
311:28 - labels that you put on everything that
311:29 - you're going to throw in
311:31 - like i'm going to put i hope it won't
311:33 - stick to my keys
311:35 - i know what else do i got here i'm going
311:38 - to stick a label on my pen
311:40 - a chuck label and i'm going to store a
311:42 - pen in my dictionary
311:44 - with the chuck label and so it's like
311:47 - having a
311:48 - a purse or a bag or a backpack where you
311:50 - have things labeled and you can
311:53 - you can throw things in and label them
311:55 - and you can shout into your bag and say
311:57 - give me the calculator or give me the
311:58 - candy or whatever that
312:00 - is that you have labeled them you have
312:02 - to come up with the labels
312:03 - and then you can use the labels to get
312:05 - things back out and like i said they're
312:07 - probably the
312:08 - most powerful thing and and they're
312:10 - basically this concept that's generally
312:12 - referred to as associative arrays
312:14 - which means they're like lists but they
312:16 - have these keys and so the associative
312:18 - means
312:19 - the association between a key and a
312:20 - value whereas in a list there's a
312:22 - position in a value the position is less
312:24 - powerful and less flexible
312:27 - most modern programming languages have
312:28 - this notion of associative arrays
312:30 - if they don't they're sort of unpopular
312:32 - because uh once you get using them
312:34 - they're like whoa they're so powerful if
312:36 - you ever find yourself in a language
312:37 - that doesn't have them
312:39 - you'll you'll freak out they get have
312:41 - different names like property maps or
312:43 - hash maps or property bags
312:45 - depending on the language you're using
312:47 - but they all are the same thing
312:48 - they're key value pairs so
312:52 - the idea of a dictionary is that or the
312:54 - idea of any collection is putting more
312:56 - than one thing in
312:57 - and then the difference is is that you
312:59 - have ways of of
313:01 - indexing it so this basically line says
313:03 - let's make ourselves a dictionary just
313:05 - like we
313:06 - constructed an empty list and i want to
313:08 - store 12 into this dictionary and i want
313:10 - to label it
313:11 - money and so on the left hand side when
313:13 - we use this money that's the label
313:16 - that we're going to give it and so 12 is
313:17 - being placed in the dictionary that's
313:19 - like taking
313:20 - the 12 throwing it in the dictionary
313:21 - with a label of money i can't yeah
313:24 - three is going in the label of candy and
313:26 - 75 is going in with tissues
313:28 - we say what's in there and there's no
313:30 - order to it and sometimes
313:31 - the order can even change inside of a
313:33 - dictionary although there are more
313:34 - advanced versions of dictionaries that
313:36 - maintain
313:36 - some kind of order but for now let's
313:38 - just not worry about the ordering of
313:40 - them
313:42 - if we say what's in there you say oh
313:43 - there's three things in there there is
313:45 - 12 75 and 3
313:47 - and stored under the keys money tissues
313:49 - and candy respectively
313:51 - we can ask using the index operator
313:55 - what is purse of candy that's like
313:56 - saying hey give me back candy
313:58 - and out comes the number three which is
314:01 - that
314:02 - we can update stuff so we can say go
314:04 - grab the candy version
314:06 - add two to it make five and then store
314:08 - that back into candy and so now we see
314:10 - that
314:10 - candy has been up to set up to be five
314:15 - and um and so if you look at the
314:20 - difference between
314:21 - lists and dictionaries they both can
314:23 - have new items added to them um
314:25 - we haven't talked a lot about deleting
314:26 - but items can be deleted from them
314:28 - uh the difference is is the indexing
314:30 - mechanism how we look things up how we
314:32 - store things
314:33 - and how we look things up so we make an
314:34 - empty list we make an empty dictionary
314:37 - we add 21 to the end and we add 183 to
314:39 - the end and we ask it and says
314:40 - oh position 0 is 21 in position 1 is
314:43 - 1823 do we don't see the positions when
314:45 - we print it out because it's sort of
314:46 - implicit
314:47 - here we're going in and mark 21 with age
314:49 - and stick it in
314:50 - and mark 182 with course and stick it in
314:52 - and then we're going to print it out and
314:54 - there we go course and age
314:56 - mapped and we can add a 23 and stick it
314:59 - back in age and that overwrites so that
315:01 - 21 becomes the 23
315:03 - we can do the same thing in the list
315:04 - except we say lists of zero because in
315:06 - list the indexing
315:08 - is positioned and so this 21 becomes
315:11 - 23. and again you just look at them and
315:16 - you can think of each of these as
315:18 - pretty much doing roughly the same thing
315:20 - except the indexing mechanism
315:22 - the values are the same but the keys of
315:24 - this are are different so in list the
315:26 - keys are always the position
315:28 - and you don't get to assign those other
315:29 - than the fact that the order in which
315:30 - you put them in
315:32 - implicitly assigns a position and in
315:34 - dictionaries the
315:35 - the key is a string you can actually use
315:39 - other things
315:40 - i use strings a lot in this lecture but
315:42 - that just kind of keeps things
315:44 - simple until you get good at it you can
315:46 - actually use numbers
315:47 - as the dictionary index the dictionary
315:50 - keys if you want but the values are
315:52 - things you put in
315:53 - and manage in those dictionaries so we
315:56 - can
315:57 - just like lists we have dictionary
315:59 - literals and what's nice about
316:00 - dictionary literals
316:02 - is that they use the exact same syntax
316:04 - as the printout
316:05 - and so it starts with the curly brace
316:07 - ends of the curly brace and then has a
316:09 - series of key colon value
316:11 - key colon value key colon value and this
316:14 - is sort of the associative array bit
316:15 - we are associating one with the key
316:18 - chuck we are associating 42 with key
316:20 - fred
316:20 - we're associating jan and a hundred then
316:23 - we printed out it kind of looks exactly
316:25 - the same and so the
316:26 - print statements in python are are nice
316:28 - in that
316:29 - you ask what's in a thing you show the
316:30 - stuff and it shows you in the syntax
316:32 - that if you type that into python that
316:34 - would be how you do
316:36 - a um a constant and if you just say
316:40 - uh empty array you've seen you see me
316:42 - also do dict
316:44 - this is constructor where you say make a
316:46 - new empty dictionary this is an empty
316:47 - dictionary constant
316:49 - these two things are pretty much the
316:50 - exact same thing this is a shortcut
316:53 - to doing this the the
316:57 - empty curly braces is a shortcut to do
317:00 - the um
317:03 - construction so up next we're going to
317:05 - talk about sort of one of the
317:07 - really common applications of
317:08 - dictionaries and that is counting
317:23 - [Music]
317:30 - so now we're going to talk to you about
317:31 - one of the common applications of
317:33 - dictionaries and that is
317:35 - making histograms it's counting the
317:37 - frequency of things
317:38 - and so if you think of a histogram as
317:41 - you know it's a little graph and
317:42 - there is um you know a how many a's how
317:45 - many b's and how many c's and there's a
317:47 - histogram says oh there's this many of
317:49 - that and this many of that
317:50 - and these are like buckets these are
317:52 - frequencies and this is how many times
317:53 - it happens so
317:54 - a histogram but we're going to do this
317:56 - thing where we're going to take count
317:57 - people's names
317:58 - and we're going to kind of count how
317:59 - many that we see but the interesting
318:02 - thing that we're going to solve
318:03 - just like many of the things in the
318:04 - computer is we can't just sort of look
318:06 - at the data we got to look at the data
318:07 - iteratively one
318:08 - piece of data at a time so i'm going to
318:11 - give you a little problem
318:13 - okay i'm going to show you a series of
318:14 - names one at a time
318:16 - and i want you to count for each name
318:20 - make a little bucket
318:21 - and then keep counting how many things
318:22 - for each of the different names okay
318:24 - you'll notice that you
318:25 - have to start with one and then you move
318:27 - across so just
318:28 - watch this and tell me
318:32 - how many how many what's the most common
318:35 - name of the set of names i'm about to
318:36 - show you
318:37 - and how many do we see
318:49 - [Music]
318:58 - so
319:01 - [Music]
319:13 - so how many what was the most common
319:15 - name and how many times did you see it
319:18 - that's the question now here comes the
319:20 - reveal
319:22 - so for humans it's so much easier for
319:23 - you to just look at this and you think
319:25 - how did my brain look at that
319:26 - and you're like okay what is pretty
319:28 - common oh
319:30 - maybe maybe chen is coming oh
319:36 - no maybe jen is common one
319:39 - two three four yeah that anybody else
319:42 - mark watts got three c7 and so you'll
319:46 - notice how our minds
319:47 - as come without computers we just sort
319:50 - of like
319:50 - bounce branch and bound we have
319:53 - hypotheses
319:54 - and then we decide yeah it's zen that's
319:57 - it and there's four of them
319:59 - now how did your brain think about this
320:02 - as
320:02 - we were going through them one at a time
320:05 - well my guess is you
320:06 - if you really had to do this a lot you
320:08 - would make a little picture like this
320:10 - and then what you would do is if you saw
320:12 - a new name
320:13 - you know x y z you'd add it to the list
320:15 - and give it a tick mark of one
320:17 - and then if you saw like c seven again
320:19 - you give that a tick mark and if you saw
320:21 - x y z again you'd make a tick mark
320:23 - and then you'd make you'd keep adding to
320:25 - these tick marks right
320:26 - and that's how you would do it and you
320:27 - wouldn't like many of the things we do
320:29 - in a loop
320:30 - you wouldn't really know what the most
320:31 - common was one until the end
320:33 - and then you'd sort of take a look at
320:34 - these numbers and you say okay that's
320:36 - the most
320:37 - most common number and then you'd you'd
320:40 - be done but you have to watch them one
320:42 - at a time you can't just bounce around
320:46 - and so that's how we're going to use
320:49 - dictionaries to achieve that
320:51 - again instinctively as humans we just
320:53 - look at the stuff but if you add a
320:54 - million things you probably want to
320:55 - write a python program and use
320:56 - dictionaries
320:57 - and so this is the idea and there's two
320:59 - basic things that happen one is the
321:00 - first time you see a name
321:02 - you say is this name there already if
321:05 - it's there already
321:06 - you really just want to add one to it
321:07 - right that's the adding of a tick and or
321:10 - you want to see for the first time you
321:12 - know blah blah blah blah
321:13 - and give it a one and so you can use the
321:16 - name
321:17 - as the key and then one is the value and
321:20 - then first time you see chen you stick
321:21 - one in there
321:22 - and so at this point inside the
321:24 - dictionary sort of dynamically adding as
321:26 - soon as it sees a new name
321:28 - it adds another slot in here but then if
321:30 - you see the same name again like chan
321:32 - again
321:33 - then you end up with a one add one to it
321:35 - and so it's two
321:36 - and so at that point chen is two and so
321:37 - you can see how you can both
321:40 - extend the dictionary by encountering a
321:42 - new name
321:43 - or adding when you see a name that
321:46 - you've already
321:46 - seen before the problem with
321:49 - dictionaries is
321:50 - like everything in python there are
321:52 - rules about what you can and can't do
321:54 - and one of the i think kind of
321:55 - frustrating things about dictionaries
321:57 - is that you can't just look for a key
322:00 - that doesn't exist so this is a fresh
322:01 - brand new dictionary we do a constructor
322:03 - there
322:04 - and we print out sub csev and boom it
322:06 - blows up and that's bad
322:08 - but we can solve this by the in operator
322:10 - the inoperator we've used in the for
322:12 - loop so we use it in lists we use it in
322:14 - strings
322:15 - so that is a question it's a saying is
322:17 - csev in ccc well
322:19 - this is this empty one and so it is no
322:22 - it is not c7 is not in ccc
322:24 - and so no using this in operator we can
322:26 - avoid the traceback we can say
322:28 - if it's not there put it in if it is
322:30 - there add one to it
322:32 - and that leads us to this bit of code
322:36 - okay and that is the kind of code that
322:38 - we're going to build a history this is
322:39 - going to histogram code okay
322:42 - and so this is going to have name as our
322:44 - iterator names
322:45 - sorry i made them singular and plural
322:47 - that's that's nice but
322:48 - so name is going to be csev chen c7 now
322:51 - normally we'll be reading this from a
322:52 - file
322:53 - but for now we'll keep it on keep it
322:54 - easy we're going to go through this
322:56 - and we're going to have counts as our
322:58 - dictionary so that starts out empty
323:00 - and we're going to do a simple if then
323:01 - else every time through the loop
323:03 - if the name we're looking at is not in
323:05 - the dictionary already is the key
323:07 - then set it to b1 if it's not
323:10 - go get the old value count sub name
323:14 - and then add one to it and stick it back
323:15 - in so this is
323:17 - this line right here is new adding a new
323:20 - thing
323:20 - and this line right here is adding some
323:23 - things to existing things
323:24 - and you do this long enough you start
323:26 - with an empty one and you do this long
323:27 - enough
323:28 - at the very end it will print out
323:31 - the histogram that you're looking for
323:33 - the histogram you're looking for
323:35 - and so you say oh we've seen csev twice
323:37 - jen once and chen twice
323:39 - and so that's the idea and so this can
323:41 - run a million times if you want
323:47 - now this notion of checking to see if a
323:50 - key exists
323:52 - and doing one thing if it doesn't exist
323:53 - and doing another thing if it
323:55 - does exist is such a common practice
323:59 - that the dictionary
324:01 - object has this method called get
324:04 - that'll
324:04 - that come collapses these four lines
324:07 - into
324:08 - one line and so the idea is you're going
324:10 - to do one thing if it's in there and
324:11 - you're going to retrieve the current
324:13 - thing
324:13 - otherwise you're going to pick a default
324:15 - value in this case we'll pick one
324:17 - i mean pick zero this is like the
324:19 - default right meaning what is not there
324:22 - and if you say counts now counts as a
324:24 - dictionary dot get
324:25 - that's like string.upper that's a method
324:28 - you give it a key
324:29 - and then a default and if the key exists
324:32 - you get back what's in the key if the
324:33 - key doesn't exist you get the default
324:36 - okay so and with no trace back this
324:38 - works
324:39 - so so the best way to think about this
324:41 - is
324:44 - those four lines are equal to that one
324:46 - line because
324:47 - x is either going to be whatever was in
324:48 - there before if it exists
324:50 - or it's going to be 0. now the nice
324:52 - thing about 0 is the next thing we'll do
324:54 - is we're going to add 1 to it so that
324:55 - that's going to get us to 1.
324:56 - so collapsing that loop that we
325:00 - saw before
325:03 - collapsing that loop we can we can make
325:05 - it just a one-line loop and this will
325:07 - become
325:08 - an idiom this will become something that
325:10 - you will get used to
325:11 - and you will use over and over and over
325:13 - again and after a while right now you're
325:15 - looking at it boy boy that's a lot of
325:17 - syntax and
325:18 - semicolons and whatever after a while
325:20 - you just type this and not even think
325:21 - about it it's an idiom
325:23 - it's basically included in this idiom is
325:26 - how to both
325:27 - create new entries and dictionaries and
325:28 - update existing entries
325:30 - by adding them adding one to them so
325:33 - everything else in this is the same name
325:35 - is going to go through these five values
325:36 - we're going to say count sub name equals
325:39 - counts dot get
325:40 - name comma zero plus one and so if for
325:43 - example this already has a one in it
325:45 - then this is going to be 1 plus 1
325:47 - becomes 2. if it's not it's going to be
325:49 - 0 plus 1 equals 2.
325:51 - and so this is the idea of if new set to
325:55 - 1
325:55 - not 0 set it to 1 because the first time
325:57 - you see something the count should be
325:59 - one not zero
326:00 - so that's why we make this default now
326:02 - the get can be used for anything
326:04 - it just so happens that zero is a common
326:06 - default because it's really common
326:08 - that we're using this to basically make
326:10 - a histogram right a little histogram of
326:12 - a b
326:12 - c right and so we need to make a d and
326:15 - then but then the histogram has to start
326:17 - at one so that's
326:18 - basically the simplified counting with
326:22 - get
326:22 - and you know there's a lot of things
326:24 - that we're going to do
326:25 - inside of python that do have to do with
326:29 - frequencies and how many times certain
326:31 - things happened and this pattern
326:33 - is a really good pattern to absolutely
326:40 - know
326:44 - [Music]
326:55 - so now what we're going to do is we're
326:57 - going to switch from just looping
326:59 - through
326:59 - strings instead loop through files and
327:01 - we're going to it's going to take a
327:02 - little bit of work
327:03 - because we have to open the file and
327:05 - we'll bring a lot of things together at
327:06 - this point
327:07 - so here would be another task and that
327:09 - is here's a bunch of text from the book
327:12 - and uh you can just split this into
327:15 - words and
327:15 - count and find out what the most common
327:18 - common word is and how many times it uh
327:20 - how many times it occurs so go ahead and
327:22 - try to do this for a second feel free to
327:24 - pause actually don't bother pausing this
327:26 - is too hard we should write a program
327:27 - for this it's not
327:28 - it's not easy humans don't like this it
327:30 - makes you concentrate
327:33 - and so here is a counting pattern where
327:35 - we're going to take a line
327:37 - and then later we'll read this in a file
327:40 - and so
327:41 - we're this is just an adaptation
327:43 - improvement of the previous thing so
327:45 - we're going to start with an empty
327:46 - dictionary
327:46 - we're going to ask for a line of text
327:48 - and read it in and then we're going to
327:49 - use split
327:50 - so remember the list of words well what
327:52 - we're going to get here is a
327:53 - list of words we'll print it out and
327:56 - we'll run this counting this is the
327:57 - this little loop for every word in
328:00 - whatever this was
328:01 - we're going to do this idiom of at
328:04 - either adding a new entry
328:06 - or adding one to an existing entry and
328:08 - then printing that out
328:09 - so let's take a look at what we get
328:11 - there so if we run this
328:14 - we can give it some text and i've got
328:16 - this this would be all one line
328:17 - and then it splits it into words and you
328:19 - see that these words here
328:21 - are split split split split i mean
328:23 - that's strings and splits remember
328:25 - strings and lists
328:26 - and split and so now the counting is
328:29 - going to go through this list
328:30 - the clown ran after the and it's going
328:33 - to build a histogram the
328:35 - clown you know one clown the
328:38 - up up up of these things are going to go
328:39 - up right that's this
328:41 - histogram and then when it's all said
328:43 - and done we end up with the histogram
328:45 - and so counts is the dictionary
328:47 - that ends up with a histogram and we can
328:49 - so by inspection see oh the
328:51 - is the most common word and there are
328:54 - seven of those right
328:55 - so if we sort of take a look at this we
328:57 - start out we make a dictionary
328:59 - we read in a line of text the text goes
329:01 - in we
329:03 - and then we split that and we print the
329:05 - words out so these are the words
329:07 - right then we have a for loop that's
329:09 - going to loop through all those things
329:11 - and then produce a dictionary and when
329:13 - we print the dictionary out
329:14 - that's what we're going to get and the
329:17 - seven okay
329:18 - so that's one line of text that's how
329:21 - you walk across the words in a line of
329:24 - text after you've split the line into
329:25 - separate words
329:27 - so now we're going to look at ways that
329:29 - you can loop through dictionaries we
329:30 - just produced a loop that can build a
329:32 - dictionary but now we're going to
329:33 - going to look at a dictionary and so
329:35 - we'll start with a very very simple
329:36 - example and then we'll work to a
329:38 - slightly more complex example
329:39 - so here's a dictionary just the constant
329:42 - chuck is one fred's 42 and jan's 100.
329:45 - and so we're going to use a definite
329:47 - loop with the four
329:48 - four key and counts now it doesn't have
329:50 - to be main key but key is the
329:52 - is a good name because these are these
329:54 - are keys and values k
329:56 - v k v keys and values i just mentally
329:58 - think of this
329:59 - as keys and values and keys and values
330:02 - so
330:02 - this iteration variable is going to work
330:04 - walk the keys it's not going to walk the
330:06 - values it's going to walk the keys
330:09 - chuck fred gent not necessarily in that
330:11 - particular order as you see it goes jan
330:13 - chuck fred
330:13 - because just because i typed it in this
330:15 - order it's not like a list it doesn't
330:17 - stay in that order
330:18 - it might move around a little bit as we
330:20 - add data to it or as we set the data up
330:23 - and so you can in the loop you can get
330:25 - the key and so that's what prints out
330:26 - the chuck
330:27 - jam chuck fred but then you can also get
330:29 - the corresponding count for each one of
330:31 - these by just pulling it out of the uh
330:33 - pulling it out of the array i mean
330:34 - pulling it out of the dictionary right
330:36 - and so
330:37 - we can pull out the corresponding value
330:38 - and so we print out jan 100 chuck one
330:40 - thread two and that runs this loop
330:42 - three times so if you just use the in
330:45 - and you give a dictionary here remember
330:47 - all the different things we've been able
330:48 - to put there
330:49 - on the end of a for loop and dictionary
330:52 - is another thing we can put on and we
330:54 - get a list of keys
330:56 - now there's a couple of methods that
330:58 - allow us to get the keys
331:00 - and so we have you know we can say turn
331:03 - this into a list
331:04 - and we get a list of the keys so this is
331:06 - a dictionary the same dictionary
331:08 - we get a list of the keys you can also
331:09 - get a list of the keys by using the keys
331:11 - method
331:12 - so that's take this dictionary jjj and
331:14 - give me all the keys which gives me a
331:16 - list which is kind of the same thing
331:18 - and then we can ask for the values and
331:20 - they give me just then the values
331:21 - extracted out of this dictionary
331:23 - so that's nice now the one thing is is
331:26 - that
331:26 - while i said you can't predict the order
331:28 - if if in two statements you ask for the
331:30 - keys and then the values
331:32 - they at least come out in the same order
331:34 - even though you can't necessarily
331:35 - predict the order that they come
331:36 - out they come out in the same order and
331:39 - then there is a third
331:41 - thing that we can do and that is list
331:44 - ask for the items
331:45 - we can say give me the items and that
331:48 - gives us
331:49 - a list this is our first really kind of
331:54 - composite combined data structure where
331:56 - it is a list
331:58 - a three item list zero one two
332:01 - and inside that there is what are called
332:03 - two tuples
332:04 - jan maps to 100 chuck maps to one fred
332:07 - maps to 42.
332:08 - coming up next we're gonna have a whole
332:10 - chapter on that and so just take a look
332:12 - at that for the moment
332:14 - and we will come back to that in some
332:16 - detail later
332:18 - this whole items idea that gives us back
332:21 - a list of key value pairs
332:23 - because it's not just a list of keys or
332:24 - a list of values it's actually a list of
332:26 - key value pairs allows us to write in
332:28 - python
332:29 - a very clever and elegant loop what we
332:32 - can do
332:32 - is actually this items gives us back
332:35 - each
332:36 - item in the list has a key and a value
332:38 - and we can actually take two iteration
332:40 - variables for a comma bbb this is two
332:42 - iteration variables
332:43 - and if you're coming from another
332:44 - programming language this is super cool
332:46 - and it's a python only feature i never
332:48 - have seen another language that's
332:50 - capable of doing something
332:51 - this simple and that elegantly so what
332:54 - this basically does it says
332:55 - we're going to simultaneously advance
332:57 - these two iteration variables so
332:59 - this is going to be the key and the
333:00 - value the k and the v key in the value
333:02 - is going to be
333:03 - chuck one then then they're both going
333:05 - to advance fred
333:06 - 42 jan 100 and so that means in this
333:10 - simple loop if we just print them out
333:11 - we're going to get the key value pairs
333:13 - of course in the order
333:14 - and so it's sort of aaa and bbb
333:16 - simultaneously walk
333:18 - down these key value pairs and so that's
333:21 - really pretty and it makes for a very
333:23 - succinct loop it's
333:24 - the syntax is a little sort of
333:26 - disquieting when you first see it but
333:28 - it's a super elegant thing and you just
333:29 - have to say items
333:31 - if you if you don't say items you just
333:34 - get the keys if you say items you get
333:35 - the key value pairs and
333:37 - you have to have two iteration variables
333:39 - if you don't have two iteration
333:40 - variables and use items that will
333:41 - complain and say what are you doing
333:43 - i'm giving you two things and you don't
333:44 - have two variables to receive them so
333:46 - two iteration variables and items are
333:48 - basically
333:49 - related now
333:53 - we're going to take a look and this is
333:55 - code that i showed you
333:57 - perhaps many weeks ago about i said this
334:00 - is a little story about how to read a
334:01 - file and count all the words in the file
334:04 - and now we're back to it and at this
334:06 - point you should understand every single
334:08 - character of this program
334:09 - every single concept of the program you
334:12 - should literally stare at this and look
334:13 - at it
334:14 - code it play with it until you
334:16 - absolutely understand it
334:18 - so let's take a look again i
334:21 - showed you this weeks ago so we're going
334:24 - to ask for a file name
334:26 - then we're going to open the file name
334:28 - then we're going to make an empty
334:29 - dictionary
334:30 - again this is all stuff you've done
334:31 - before and then we're going to have an
334:33 - iteration variable that's going to go
334:34 - through the lines in the file
334:36 - right so line is going to go line line
334:39 - line
334:40 - then we are going to split that line
334:42 - each line into words chop chop chop chop
334:46 - so that's words is the list of the words
334:48 - in one line
334:50 - we're inside of a loop that's going to
334:51 - go through all the lines and then what
334:53 - we're going to do
334:54 - is we're going to write the have the
334:55 - word iteration
334:57 - iterate through each word in the line
335:00 - and then we're going to do is take each
335:01 - word in the line
335:03 - and we're going to do this histogram
335:05 - right so we're going to this
335:06 - this is going to run not only just for
335:08 - every line but for every word in every
335:10 - line so we have a
335:11 - nested loop for every line then we split
335:13 - it and then we go across the line so
335:15 - it's almost like a typewriter where we
335:18 - go
335:25 - so it's like the outer loop is going
335:27 - down down down the lines
335:29 - and the inner loop is going across to
335:31 - cross across the words and eventually we
335:33 - are going to see
335:34 - in this middle in this last line every
335:36 - single word in the file
335:38 - and we're going to do the counts get
335:39 - word plus one which is our
335:41 - magic histogram making line that if you
335:44 - don't remember what that is go back a
335:45 - couple of slides i just talked about it
335:47 - at this point in the code and it's
335:49 - important to be able to draw these lines
335:50 - at this point in the code
335:52 - you have the histogram and it's in the
335:54 - variable counts
335:55 - now we want to find the largest one
335:59 - now we have written list we have written
336:01 - loops that can find the largest in a
336:03 - list
336:03 - but now we want to find the largest
336:05 - value in the key value pairs of a
336:07 - dictionary
336:09 - so we're going to we're going to start
336:10 - with the we're going to know what the
336:12 - largest count is
336:13 - and the largest word of the has that
336:15 - count we're going to set them both to
336:16 - none
336:17 - because we're going to prime our loop we
336:18 - have to prime our loop and we're going
336:19 - to say to none
336:20 - and so then we're going to write one of
336:21 - these cool things that says for word
336:23 - come account
336:24 - so word and count are going to go
336:25 - through the key value pairs because
336:27 - we've got items here
336:28 - so it's going to go through the key
336:29 - value pairs loop through each keyboard
336:32 - whatever it was there could be a million
336:34 - words in here we're going to go through
336:35 - every one
336:36 - and what we're going to do is we're
336:38 - going to make sure that key
336:39 - big count is the current largest count
336:42 - we've seen so far
336:43 - and if it's none well then we haven't
336:46 - seen anything
336:47 - or the current the count we just read is
336:49 - greater than the big count so far
336:51 - we're going to jump in and this is sort
336:53 - of like oh this is a new
336:55 - new personal best count for this
336:57 - particular data set
336:58 - and so we're going to remember the word
337:00 - in big word and we're going to remember
337:01 - the count in big count
337:03 - so this is just a max loop it's a
337:06 - maximum loop with the extra thing that
337:07 - we're
337:08 - recording in addition to what count is
337:11 - the largest
337:12 - what the word that was associated with
337:14 - that count recording it
337:15 - so again this is a starting part of the
337:17 - loop we're going to do some work and
337:18 - then when we exit the bottom of this
337:20 - big word is going to be the word that is
337:22 - the most common and big count is the
337:24 - number of times and so if we run a file
337:27 - we
337:27 - say oh in that file 2 is the most common
337:30 - word
337:30 - and it's 16 times if we run the clown
337:33 - file
337:33 - well thus the most common word in seven
337:36 - and so this now is
337:37 - can and this could have a very large
337:39 - file and give you
337:40 - the most common word and so that is
337:45 - sort of a really good application of
337:48 - dictionaries
337:49 - so dictionaries are the most powerful
337:51 - well
337:52 - of the they're the the most powerful
337:54 - collection we've seen so far
337:56 - um it is good to see both lists and
337:58 - dictionaries to understand what quest uh
338:00 - diction
338:00 - collections are they are things inside
338:04 - of python that can handle
338:05 - more than one item inside of it and
338:07 - we'll learn about another collection
338:08 - about tuples in a second
338:11 - just understand the get method because
338:13 - that leads to very compact code
338:16 - understanding their various ways to
338:17 - iterate through dictionaries and
338:19 - so we've learned a lot but in the next
338:22 - section we will
338:23 - learn even more and put these together
338:25 - and do some sorting and do some other
338:26 - stuff
338:27 - and really start to see the real power
338:30 - of dictionaries
338:38 - [Music]
338:50 - hello and welcome to python for everyone
338:52 - uh this is
338:53 - i'm going to do some coding it's related
338:55 - to the
338:56 - uh dictionaries chapter chapter nine and
338:59 - we're going to do
339:00 - some word counting that's uh it's
339:02 - basically
339:03 - right out of the slides for uh but i'm
339:06 - gonna just
339:06 - write the code in front of you rather
339:08 - than uh have you look at it in the book
339:10 - so
339:11 - what we're gonna do is i've got my text
339:13 - editor up here
339:15 - and uh let me start by making a new
339:17 - folder
339:18 - new folder for my
339:22 - chapter 9 exercise and then i'm going to
339:24 - go and make an untitled file
339:26 - that was from the previous one and i'll
339:28 - do what i always do
339:30 - print
339:33 - hello and save it
339:36 - and save it here into exercise 09
339:40 - and ex09.py
339:44 - so now i have a folder that's in my py4e
339:46 - folder
339:47 - uh and that happens to be in my desktop
339:52 - py4e is my folder on my desktop
339:55 - and now i have all of these subfolders c
339:58 - c d
339:59 - x ex 08 ls is dur on windows
340:04 - ls oops i've got to go up one
340:08 - ex09 ls so i've got that file right
340:12 - there
340:12 - now i'm going to want to read some files
340:14 - and so i'm going to bring some files
340:17 - down
340:17 - a couple of files um python for
340:21 - everybody code 3
340:22 - intro.txt so i've got this url and i'm
340:25 - going to save it
340:26 - save page as and it's really important
340:29 - that i save it
340:29 - in the same folder as i'm going to write
340:31 - my code just so that when i open this
340:33 - file it knows where it's at
340:35 - so i've saved that one and i'm going to
340:37 - also
340:38 - take this clown text i'll use this to
340:42 - make my life simple so i have a real
340:43 - short thing that i can show you how it
340:45 - works
340:45 - and so now if i go back to my terminal
340:49 - i see i've got exercise 09 python
340:52 - intro.txt
340:53 - and clown.txt okay so
340:57 - let's go back to my text editor and get
340:59 - started
341:01 - uh i will prompt for the file name
341:05 - input enter file
341:10 - colon space now i'm going to do
341:13 - something
341:14 - if the length
341:17 - of the f name that i just read
341:21 - is less than one i'm going to say fname
341:24 - equals clown txt i do this
341:30 - so that i can just hit enter and it
341:32 - defaults to cloud.txt if i want to give
341:34 - it a different name
341:35 - i can so this if i just hit enter at
341:38 - this prompt
341:39 - then this will give me a string that's
341:40 - zero length so if it's less than one
341:42 - i'll just assume that so let me open
341:45 - that
341:46 - handle equals open
341:48 - [Music]
341:50 - fname and let's read through it
341:54 - for line in
341:57 - handle
342:01 - we'll strip it line equals line dot
342:04 - r strip to take the white space off the
342:06 - right hand side
342:07 - and then we're going to say print line
342:09 - again i
342:10 - i'm not just doing this i really when i
342:12 - write code i just saved it
342:14 - when i write code i do these kind of
342:16 - stuff all the time
342:18 - just for my own sanity checking and so
342:21 - now i'm going to run python3
342:25 - ex09.py just to test that
342:28 - i'm going to hit enter now and it's
342:30 - going to assume hopefully clown.txt if
342:31 - it all goes well and yep it read
342:33 - it read one line okay so that part's
342:36 - working i'll just leave that print
342:38 - statement in
342:39 - the next thing i want to do is kind of a
342:41 - classic
342:42 - thing where we're going to go read a
342:44 - bunch of lines and then go horizontally
342:45 - across those lines in words
342:47 - so i'm going to split that wds equals
342:50 - line
342:51 - dot split
342:54 - and print wds so i'll print that
342:59 - and i'm going to save it and test it i i
343:02 - really
343:03 - love test things over and over there's
343:04 - the actual line this file clown dot txt
343:07 - only has one line
343:08 - and it breaks it into words and so i
343:10 - have those words let's just run it again
343:13 - with intro dot txt
343:16 - so this will have a lot of lines line
343:18 - line line line line lots of lines
343:20 - every line has a prints out the line and
343:22 - then prints out the words that we split
343:23 - it into
343:24 - okay so now i kind of one of the things
343:27 - that i do here
343:28 - is i want to believe now i sort of can
343:30 - believe everything from here up
343:32 - like oh it's going to open the file it's
343:34 - going to read through the lines i'm
343:35 - going to split them into words
343:36 - and so then i'll just kind of behind it
343:38 - i'll just say okay i'll just
343:40 - i'll just comment that out now i needed
343:43 - another for loop for
343:46 - w in wds now words is a python list
343:51 - and has some number of words in it 0 or
343:53 - 12 or whatever was on the line
343:55 - and now i'm going to print out
344:00 - the word okay and so
344:04 - now we'll go through that horizontally
344:06 - i'll just do clown.txt
344:08 - so that you see i i'm not printing the
344:11 - line
344:12 - out that's the words that have been
344:13 - parsed from the split from the line
344:15 - and now we got this loop now one other
344:17 - thing that's interesting is just to make
344:19 - sure that you're
344:20 - you're going through all the words and i
344:22 - i like a print statement here
344:24 - to know that w is going to successfully
344:27 - take on
344:28 - literally all the words of this file so
344:30 - if i comment this print statement out
344:33 - and i run it again clown.txt that
344:37 - for loop starting from here is every
344:39 - word in that file which happens to only
344:41 - be one line
344:42 - but now if i do the same thing for
344:43 - intro.txt
344:49 - it's just going to go through the words
344:50 - and in a sense by nesting these two
344:52 - loops we're going to hit all the lines
344:54 - and that's a lot of stuff but it hit all
344:57 - of the lines all the words and away we
344:58 - go
345:00 - okay so here's where dictionary comes in
345:04 - i'm going to make a a variable called
345:07 - di for dictionary and i'm going to say
345:09 - give me a dictionary
345:11 - now d-i-c-t is not something you can
345:13 - choose that's saying make that's that's
345:14 - defining the type of dictionary
345:16 - d i is a variable that i chose okay so
345:20 - the key thing to this dictionary is
345:22 - we're going to make a counter and we're
345:24 - going to use
345:24 - w the word absorb elegant whatever
345:29 - and we're going to use that as the index
345:31 - so the simple thing to do is to say
345:33 - if w is in
345:36 - um di then we can say
345:40 - ws i mean the dictionary sub
345:43 - the word which is our key and the key
345:45 - value store of the inde of the
345:47 - dictionary
345:48 - is equal to the value that we had before
345:50 - in that area
345:51 - d sub w plus 1.
345:55 - and if it's not in there else
346:00 - d i sub w
346:04 - equals one and i'm gonna and on a
346:08 - i'm gonna print
346:12 - print new
346:16 - so every time we see a new word it's
346:19 - going to say new
346:20 - and i'm going to also then print w and
346:23 - the current value of the counter for w
346:26 - as it's going through
346:27 - now notice how far in i'm indented this
346:29 - is all part of this
346:30 - inner loop so this is the loop that's
346:32 - going to run every single word
346:35 - okay and i'm going to run this first
346:37 - with clown
346:39 - so it runs slowly okay so it
346:43 - we saw the was new it's and
346:46 - the count is one clown is new count is
346:49 - one
346:50 - ran is new the count is one after is new
346:53 - the count is one
346:54 - now we saw the again but now we made the
346:56 - count be two
346:59 - let's print here
347:08 - i'll say existing
347:12 - so you can kind of see it now in the
347:13 - print i'm printing this let's make it
347:15 - even a little more verbose
347:16 - print w
347:21 - and then i will make it so it prints the
347:23 - it prints the
347:24 - word before and the count after and then
347:27 - whether it's existing
347:28 - or new so we'll put a lot of print
347:29 - statements in print statements are cheap
347:33 - okay so now we see the word the
347:36 - it's the first time we see it and we set
347:38 - it to one we see the clown
347:39 - the first time we see it we set it to
347:41 - one we see rand new one
347:44 - later down later on we see the it's
347:47 - already in
347:48 - so existing means it was already in the
347:50 - dictionary w
347:52 - as a key was already in the dictionary
347:54 - okay
347:55 - and so that's why we added one to it so
347:57 - the old value was one and then we added
347:59 - d i sub the equals d i sub d i
348:03 - sub the equals d i sub the plus one w
348:06 - is the string the t h e that's what that
348:09 - what that string is
348:10 - okay and so so we've made it all the way
348:13 - through and you see
348:14 - the in this one line occurred ultimately
348:16 - seven times
348:17 - so now i want to print out the contents
348:20 - of this dictionary
348:22 - at the very end of both loops so i got
348:24 - it de-indent twice
348:27 - and so that will give us the counts
348:34 - and so this is what we get when it's all
348:35 - said and done you know
348:37 - the happened seven times but it just
348:40 - worked through its way through
348:42 - okay so you got that
348:45 - now this is a pretty verbose way of
348:47 - doing this but i did it sort of the slow
348:49 - way to show that there are two
348:50 - situations
348:51 - if it's already there you increment it
348:53 - and if it's not there you set it to one
348:55 - effectively inserting it right so you
348:57 - insert it and set it to one
348:58 - with this d i sub the equals one okay
349:02 - but let's get a little less verbose here
349:04 - get rid of some of these print
349:05 - statements because we kind of covered
349:07 - all that
349:09 - um
349:13 - get rid of this line and go back to
349:15 - printing w and diw at the end we'll
349:17 - leave that one in
349:18 - so what i want to do is i want to look
349:20 - at this bit of code right here this
349:22 - if wndi else
349:26 - the we do this so much with dictionaries
349:30 - that there is an
349:31 - easy mechanism to
349:34 - do this that combines these four lines
349:36 - into a single kind of contraction
349:38 - and so i'm going to do this i'm going to
349:40 - print
349:42 - let's put two stars out then the word
349:45 - and
349:47 - i dot get of the word
349:51 - comma uh negative 99
349:55 - okay and so this will this this d i dot
349:59 - get of the word is the important part
350:01 - the way it is is this is a dictionary
350:03 - dot get says
350:05 - in its first parameters the key to look
350:06 - up which is word like the
350:08 - or fell or clown or whatever and 99 is
350:11 - the default value
350:12 - that we get if the key doesn't exist so
350:15 - this is an effect
350:16 - an if then else right this
350:20 - little di dot get w99 negative 99 is
350:24 - you know if it's in there do one thing
350:26 - if it's not in there do something else
350:28 - okay so so let me show you how this
350:30 - works and you'll see that the 99 will
350:32 - happen
350:33 - when
350:40 - okay so the first time we see the
350:44 - get returns 99. all right so let's move
350:46 - it over here
350:47 - the first time we see the the is not in
350:50 - the dictionary so this di.get
350:52 - of the word the in the dictionary gives
350:56 - us back the negative 99
350:58 - okay and this still is working and so
351:01 - the
351:01 - is one clown is whatever but away we go
351:05 - okay let's do it this way let me comment
351:07 - this out let me comment this one out
351:09 - and run it again so it's a little
351:10 - clearer what's going on
351:13 - okay so the first time we see the
351:17 - the is not in the dictionary the first
351:18 - time we see clown and we know it's
351:19 - negative 99
351:20 - negative 99 but here we asked for it and
351:24 - the is one because we've seen it before
351:28 - and so that's just this get mechanism
351:31 - allows us to
351:35 - get the new value or get a value out if
351:38 - the key exists and
351:39 - specify a
351:42 - default if it's not there so i'm going
351:44 - to go old count
351:47 - equals di dot get
351:50 - w comma 90 comma 0. so instead of using
351:54 - 99 here i'm going to just get rid of all
351:56 - this
351:59 - is what i'm saying is look up in this
352:01 - dictionary get is a function that's part
352:03 - of
352:03 - all dictionaries look up using the key
352:06 - w which is the and if i don't get it
352:11 - give me back zero and so
352:15 - i'm gonna say print
352:18 - word comma old
352:22 - comma bolt count
352:26 - and now what i can say whatever the old
352:28 - count is it's either the value that was
352:30 - in there or zero and now i can say
352:33 - new count equals old count
352:42 - and now see new count and i can say
352:45 - dictionary sub word is equal to
352:49 - new count
352:53 - so instead i'm going to get rid of this
352:54 - if then else then this is
352:57 - basically saying look up the old count
353:00 - that we have if you don't find one use a
353:02 - zero we'll print that out
353:03 - and then i'm going to say afterwards
353:15 - i'll print the new count
353:18 - now and so
353:24 - so we'll print the old count here are
353:27 - some of these blanks
353:28 - print the old count
353:35 - and you can see the old count with the
353:37 - because that doesn't exist was zero the
353:39 - new one's one
353:40 - clown's old is zero new is one clown's
353:43 - old
353:43 - ran old zero but now we get to the its
353:46 - old count
353:47 - was one and now its new count is two
353:49 - okay
353:50 - so by using this get and saying if we
353:54 - don't find it we'll assume the count is
353:55 - zero that makes a lot of sense right
353:58 - you know
354:02 - if not there the count
354:07 - is zero if
354:10 - the key is not there the count is zero
354:15 - okay so that's what this line does if
354:18 - get the
354:18 - get the value from under the key be
354:20 - associated with the key
354:22 - or give me zero back and then i can take
354:25 - that old number
354:26 - and just add one to it and then stick it
354:27 - back in now this is
354:29 - ultimately not how we tend to do it okay
354:32 - we tend to
354:33 - blend this all into one big long
354:35 - statement d i sub w
354:37 - equals this part
354:42 - plus one okay so that says get the old
354:46 - value
354:47 - from this key or zero and that will add
354:50 - one to it because that really combines
354:52 - all of these lines into a single line
354:55 - okay so i'm going to delete them now
355:03 - and now we've combined this all into one
355:05 - what effectively is an idiom
355:11 - retrieve
355:14 - create update
355:20 - counter all in one line i'll still i'll
355:23 - still print out
355:24 - in this case i'll just say d i sub w
355:28 - and then we'll see the counter okay so
355:31 - now i'll run this
355:36 - we don't it's it's we we have a new but
355:38 - now we see it the second time it's two
355:40 - and so we see car the first time we see
355:43 - that the second time we see
355:44 - i mean the third time we see car the
355:46 - second time and away we go
355:48 - okay and so that's pretty
355:50 - straightforward and so it really kind of
355:55 - typo there so let's just get rid of that
356:00 - and run it with the clown
356:04 - stuff and we get the right data there
356:06 - and
356:08 - let's run it with intro dot txt
356:14 - and there we go okay and so it's
356:17 - it's tearing out a bunch of words and
356:19 - giving us a dictionary
356:22 - so that was a lot of work to get to this
356:24 - line 16 that has the dictionary in it
356:26 - now we want to find the
356:35 - the most common word
356:40 - and so we're going to loop through this
356:42 - dictionary and part of it is like
356:43 - once we printed this dictionary out and
356:45 - we verified that it's right
356:47 - don't worry too much about the code up
356:48 - here right matter of fact i can take out
356:50 - some of these print statements
356:52 - and we can kind of trust all this and so
356:56 - now we're going to work on this
356:57 - okay now we want to find the most common
356:59 - word now this is like a maximum loop so
357:01 - if
357:02 - you recall um we have a whole set of key
357:05 - value pairs communicate goes to 2 is to
357:08 - 2.
357:08 - skills is 3. so we have these key value
357:11 - pairs
357:12 - and we're going to loop through and look
357:13 - for the maximum now in a dictionary
357:16 - we can loop through the key value pairs
357:18 - with the following syntax
357:21 - for you know i would call this
357:24 - these variables k and v for key and
357:26 - value but
357:27 - uh yeah in the dictionaries name
357:31 - dot items and items is
357:34 - a method inside of all dictionaries that
357:36 - says give me the
357:37 - key value pairs and we need two
357:39 - iteration variables so this is like an
357:41 - assignment statement
357:42 - for k and v k and v take on the
357:44 - successive values for the keys
357:46 - the key and the value okay so if i just
357:49 - now
357:50 - print k comma v
357:54 - and i'll take this print statement out
357:57 - and then run the code
358:00 - on whoops what i forgot to oh i fell
358:02 - back into my python two days
358:05 - i need parentheses for my print so
358:08 - there's clown
358:09 - and it just prints it out and it's kind
358:10 - of the same thing except as pretty where
358:12 - we're putting each one
358:13 - on a line okay so the k
358:17 - the v is the value so we're looking for
358:18 - the largest value oops
358:22 - so the thing is we know that the values
358:25 - are are
358:26 - always numbers that are greater than one
358:28 - so i'm gonna i'm gonna do kind of a
358:31 - a quickie maximum loop
358:34 - largest equals negative one
358:37 - now in previous times we've seen that
358:39 - this is a bad assumption but because we
358:41 - know these are counters
358:42 - that are always positive it turns out
358:43 - this is not a bad not a bad idea
358:45 - and so i can say if the value
358:49 - is greater than the largest we've seen
358:51 - so far
358:57 - largest equals the value
359:03 - okay and when that loop is all done we
359:05 - can print
359:06 - the largest
359:16 - okay and so this is just a max loop and
359:18 - we're using this value that's the number
359:20 - the value is the second thing
359:23 - oops
359:30 - ah can't type python
359:38 - oh it's a typo yeah i'm not using value
359:41 - i'm using
359:42 - v so largest equals v let's try it again
359:47 - okay so we're all done with seven so
359:49 - these were the things that we were
359:50 - looking for
359:51 - and it was looking for the maximum and
359:54 - it just dutifully found seven was the
359:56 - largest
359:56 - but we also want to know what the word
359:58 - is and so what we can say here
360:01 - is we can say the word is none
360:05 - meaning it's it's just like we don't
360:07 - know what the word is
360:08 - and then whenever we catch this new
360:10 - largest number
360:12 - we say the word equals w
360:15 - so we're so i like to think of this as
360:18 - capture remember
360:24 - the word that was largest
360:28 - right that's what i'm doing are you
360:30 - remem e-m
360:33 - e-m
360:37 - remember all right all right
360:40 - em ber there we go um so we're gonna
360:43 - this
360:44 - this trick here is not only knowing what
360:47 - the largest number was but the word that
360:48 - was associated with the largest number
360:50 - so now i can print out at the end the
360:52 - word and the largest
360:54 - and that's the count
361:00 - okay and so we now we know that
361:04 - oops did we make a mistake here
361:12 - okay that does not look good because it
361:14 - says car
361:16 - and seven if v
361:19 - is greater than the largest oh
361:23 - it's not w i used a really bad variable
361:27 - see that's the whole value there there
361:29 - we go
361:30 - it's k which is the key
361:34 - key that's going to say that was quite
361:37 - the bug
361:38 - see what happened there i had this as w
361:40 - and it just happened to be it was
361:42 - the last word on the file
361:47 - car the last word in the file because i
361:50 - used a wrong variable
361:53 - right now little mistakes little
361:56 - mistakes
362:00 - the and seven okay so let's let's get
362:03 - rid of this print statement because we
362:04 - kind of know what's going on here
362:07 - and uh away we go and this should not
362:09 - work if we run it
362:15 - and we can even get rid of the word done
362:17 - here
362:22 - there we go the seven now the cool thing
362:24 - about this is this code runs just as
362:25 - easily with
362:26 - one line of code or the intro of the
362:28 - book intro.txt
362:30 - and not surprisingly that is still the
362:33 - most common word in the
362:34 - introduction.txt i seem to like that
362:36 - word and it's 226 times
362:39 - okay and so that is the basic pattern of
362:43 - uh reading some this is just a word loop
362:46 - now sometimes there would be some
362:48 - you know checking to see if the line is
362:49 - the one you're interested in maybe
362:51 - tearing apart the line but it's at the
362:52 - end of the day
362:53 - this idiom of starting a dictionary
362:56 - now it's a common problem to to know
362:58 - where to start the dictionary you want
363:00 - to
363:00 - accumulate the numbers for the whole
363:02 - file so you don't want to put it in
363:04 - between line six and line seven okay
363:07 - so i hope that particular thing helps a
363:10 - little bit
363:11 - uh helps you understand uh dictionaries
363:14 - hello and welcome to chapter 10. now
363:15 - we're going to talk about our third kind
363:17 - of collection called tuples but tuples
363:18 - are
363:19 - really a lot like this there's not too
363:21 - much to them
363:22 - they're really kind of reductionist
363:24 - version of lists they're um
363:26 - so they they function very much like
363:28 - lists and that
363:29 - um you know they're they have things and
363:33 - the difference is there are no square
363:34 - braces there is a parenthesis
363:36 - round brace or whatever and they have
363:39 - positions 0 1 and 2
363:40 - just like a list and you can look things
363:43 - up x sub 2.
363:44 - so x sub 2 is the actual the third
363:46 - element here
363:47 - and so that prints out joseph uh you can
363:50 - assign
363:51 - you know make a tuple here this is the
363:52 - constant syntax for a tuple
363:54 - and print that out and the print
363:56 - statement shows you that this is a tuple
363:58 - not a list by showing you round
363:59 - parentheses
364:00 - and a whole bunch of functions that work
364:02 - with lists work the same way
364:04 - with tuples you can put a tuple at the
364:06 - end of an in
364:07 - statement into four as you might expect
364:09 - and then it iterates through the tuples
364:11 - tuples maintain order
364:12 - so it prints out one nine and two so
364:15 - literally this bit of code here could be
364:17 - identical
364:18 - whether it was a list or a tuple it
364:21 - really would do the exact same thing
364:23 - the difference between between tuples
364:25 - are that they are immutable once you
364:27 - create the tuple you can only sort of
364:29 - assign a tuple
364:30 - but you can't modify you can modify file
364:32 - list so if we take a look at a list here
364:34 - we make a list that's 987 and we say x
364:37 - sub 2 equals 6
364:38 - well that just means this 7 becomes a 6
364:41 - and that's just
364:42 - natural meaning we can reassign slots we
364:45 - can delete things we can
364:47 - insert things we can mutate them we can
364:50 - change them so they're
364:51 - changeable right they're changeable
364:54 - but if we try to do that same thing with
364:56 - a string
364:58 - so we say y equals abc and we know that
365:00 - this is position 0 1 and 2 but if we try
365:02 - to say let's change the c
365:03 - to a d by saying y of 2 equals d
365:06 - that is not allowed and it says it
365:08 - doesn't support item assignment
365:10 - and this little bracket you know x sub 2
365:14 - is what they call item assignment inside
365:16 - of python
365:17 - and so if we do the same thing then with
365:20 - a
365:20 - three element tuple put that in z and we
365:23 - try to change
365:25 - this slot to be a zero it's going to
365:27 - blow up because it's the exact same
365:28 - thing and that has to do with the fact
365:30 - that
365:30 - once this assignment is made this is not
365:33 - modifiable
365:34 - now it turns out that the reason it's
365:36 - not modifiable is
365:37 - for efficiency they
365:41 - take up less storage they are quicker to
365:44 - access
365:45 - and they're really designed internally
365:47 - behind the scenes in ways we don't
365:49 - really need to understand they're just
365:52 - more efficient than lists
365:54 - if all you want to do is store list and
365:55 - look at it and then throw it away you
365:57 - probably should use a tuple instead
365:59 - so there's a lot of things that you can
366:00 - do with lists that you also can't do
366:02 - with tuples but they're really just a
366:03 - corollary
366:04 - of this notion of non-mutability and so
366:07 - like you can sort a list but you can't
366:09 - sort tuples
366:10 - you can add a 5 to the end of 3 2 1.
366:13 - can't do that
366:13 - in a tuple but you can in a list and
366:15 - flip the order dot
366:17 - dot dot dot dot so anything that you can
366:19 - do to a list
366:20 - that modifies the list not allowed for
366:24 - tuples
366:24 - and so you can take a look at the kinds
366:27 - of things that are
366:28 - inside the methods that are part of each
366:31 - list append count extend index insert
366:34 - pop
366:34 - all some of these many of these are
366:36 - modifying and then count and index are
366:38 - the only ones that work
366:39 - for uh for tuples and so tuples are
366:42 - limited lists now at some point there's
366:45 - going to be a but here to say why do we
366:47 - like them
366:48 - and um the reason that we like them is
366:51 - that they're just more efficient they
366:52 - don't have to build
366:54 - in it python in its own internal
366:56 - organization of
366:57 - these objects it knows that they'll
366:59 - never never be modified because when you
367:01 - make a tuple you as the programmer
367:03 - saying i'm never going to modify this
367:04 - and python won't let you do it so it's
367:07 - higher performance better memory use and
367:10 - you know to a beginning programmer that
367:11 - doesn't really matter but that's the
367:13 - reason
367:14 - and so we tend to use tuples when in
367:17 - situations where we're going to make a
367:18 - temporary variable and then temporarily
367:20 - use it just a little bit and then throw
367:22 - it away without really messing with them
367:23 - we tend to use lists
367:24 - to build things up etc etc etc
367:29 - so the other thing that's interesting
367:31 - about tuples and we've actually sort of
367:33 - seen this
367:34 - is that you can put a tuple that
367:36 - includes variables
367:37 - on the left side of the assignment and
367:40 - this takes a little getting used to but
367:42 - it's really cool and no other language
367:45 - that i know of does this so if we say x
367:47 - comma y that's a two tuple
367:49 - both have to be variables you can't put
367:50 - constants on this side you know it's
367:52 - like saying x equals four
367:54 - y equals fred right
367:57 - so what happens is you can put a tuple
368:00 - on the
368:01 - far side of an assignment statement and
368:02 - the four goes to x and the fred goes to
368:04 - y
368:05 - and you say what's in y well y is indeed
368:07 - fred and so this is like two assignment
368:09 - statements
368:10 - now the way i've got this syntax i would
368:12 - probably do you know two separate
368:13 - statements
368:14 - just not to show off that i know how to
368:15 - do tuples um
368:18 - you know and so you can here's another
368:20 - one and they just move correspondingly
368:22 - if you don't have two here and you do
368:23 - have two here
368:24 - um well if you have three here or 2 here
368:28 - and 3 here and you don't match the
368:29 - number there you get in some trouble now
368:31 - if you just say
368:32 - x equals tuple then that is the tuple in
368:35 - the list but this is just
368:37 - a simple straight 99 value going into a
368:40 - so you can put tuples as the left-hand
368:43 - side and you can even do things like
368:44 - return a tuple from functions
368:46 - that's a real nice python feature that i
368:48 - like a lot
368:49 - um tuples are also related to
368:51 - dictionaries as we've seen in the
368:52 - previous chapter
368:53 - so here we make a little dictionary we
368:55 - make an empty dictionary by constructing
368:57 - an empty dictionary stick it in d so d
368:59 - is sort of like this place that can hold
369:01 - key value pairs
369:02 - and we put csev and there's a 2 in there
369:05 - and chen wen and there's a 4 in there
369:07 - so we have this you know associative
369:09 - mapping between c7 2 and chen 1 and 4
369:12 - all stuff we know and now we say hey
369:15 - we're going to loop through the key
369:16 - value pairs here and we've seen this
369:18 - syntax before
369:19 - k comma v so this is a tuple so you can
369:23 - think of this as each one of these
369:24 - things is going to get assigned into
369:26 - this tuple which means the key ends up
369:28 - in
369:28 - the first one's the key and the second
369:29 - one is value i use the variable
369:31 - kv all the time in code that i write
369:34 - just for my own sanity so
369:36 - kv you're going to iterate successively
369:37 - through the successive keys and
369:39 - values in that so this is going to run
369:42 - twice and k is going to be csev2
369:45 - and chen went for the order just
369:47 - happened to stay the same
369:49 - and so if you say um what is
369:53 - in one of these things you can actually
369:54 - take d items the items method within
369:57 - that dictionary
369:58 - and say hey give me back give that to me
370:00 - back and then print tops and this is
370:03 - it's a special kind of a class but
370:05 - really ultimately it is a
370:06 - list of tuples you know this is two
370:10 - this is the zero and this is the two the
370:11 - one the first and the second and then
370:13 - within each thing you get you have a two
370:15 - tuple
370:16 - and so in a sense this k and v are
370:19 - iterating through those things when
370:22 - we're putting d
370:23 - items here and d items there
370:27 - one nice thing about tuples is that
370:29 - they're comparable they're comparable in
370:31 - the same way that strings are comparable
370:32 - meaning that they're compared from left
370:34 - to right with the leftmost or zero tuple
370:36 - being the most significant
370:38 - and it doesn't compare any further than
370:40 - it has to if they
370:41 - if the if it's asking less than so if
370:44 - it's looking at say this first tuple
370:46 - it starts at the left and says okay it
370:48 - asks the question tell me true or false
370:50 - is 0 less than 5. the answer is true and
370:53 - so the answer to this overall expression
370:55 - is true
370:56 - and it doesn't even compare those two
370:58 - numbers those
370:59 - second and third number they don't
371:01 - compare them if on the other hand
371:03 - we're asking is this less than that it
371:06 - only looks at the first one
371:08 - and asks if it can answer the question
371:09 - the answer is well they're both zero
371:11 - and so i can't answer the question so i
371:13 - have to go to the second one second pair
371:15 - and
371:16 - one is less than three and so that means
371:18 - this is true
371:19 - and it does not check this even though
371:22 - 20 million is bigger than four it
371:24 - doesn't matter
371:25 - because these are the numbers that
371:28 - cause the the true to happen and the
371:31 - same is true if
371:32 - uh if you do this with strings
371:36 - again we start the first one so jones
371:39 - sally well that's the same so we don't
371:41 - know the answer yet and so sally sam
371:43 - well okay s s oh they're the same
371:46 - a a they're the same oh l
371:50 - and m l is less than m
371:53 - so so the actual letter that makes the
371:55 - difference here is the l and the m
371:57 - and leads to us being true and so this
372:00 - it goes left to right
372:01 - but then even when it's doing strings
372:02 - it's going left to right that's just how
372:04 - string comparison
372:05 - uh works and um
372:09 - if we say say as jones uh jones sally
372:12 - greater than adam sam
372:14 - well we checked the first one and we
372:15 - checked the j and the a well
372:17 - j is greater than a and so we don't have
372:19 - to look at anything else we don't have
372:20 - to look at these
372:21 - any more of these characters we don't
372:23 - have to look at the second thing in the
372:24 - tuple
372:25 - we have to look at that is enough to be
372:27 - true so it only scans until it has a
372:29 - definitive answer
372:30 - it doesn't scan any further
372:34 - so now what we're going to do is use
372:35 - this comparable capability
372:37 - to sort these list of tuples and then
372:39 - bring this all back
372:40 - and connect it more to dictionaries
372:54 - [Music]
373:01 - so now we can take advantage of the
373:03 - notion of comparing tuples and
373:05 - use sorting and so what we're going to
373:06 - produce is a list of tuples
373:09 - and then we're going to sort them right
373:11 - and so we can get a list of tuples from
373:13 - a dictionary and then we can sort that
373:14 - list of tuples
373:16 - and then we can end up sorting
373:17 - dictionary items by taking this two-step
373:19 - process convert dictionary to a list
373:21 - sort the list and then and then we can
373:23 - have assorted dictionary values
373:25 - okay and so we'll do this a couple of
373:27 - different times so if we take a look at
373:29 - this code right here
373:30 - we have our happy little dictionary a b
373:32 - c map a mass to 10 b
373:34 - maps to one c maps to 20. like what are
373:36 - we going to get here well
373:37 - it comes out the mapping is the right
373:39 - way but the order is whatever
373:41 - and now we say this function called
373:43 - sorted which takes in
373:45 - inside a sequence and then returns us a
373:47 - sorted
373:48 - version of that a list that's sorted and
373:50 - so it says sort d
373:52 - items so it's basically going to take
373:53 - this list and compare the a's and the
373:56 - c's and the b's and because it's a
373:57 - dictionary
373:58 - and all the keys are unique there's
374:00 - never going to be equality so it really
374:01 - is going to just sort this by keys
374:03 - and never get to looking at the values
374:04 - you can't you could pre construct
374:06 - a list that had duplicate you could make
374:09 - a list of tuples that had
374:10 - duplicates in the first like we did
374:12 - before but
374:13 - given that this coming from a dictionary
374:15 - the first thing is going to always be
374:17 - unique and distinct
374:18 - and so if we say sorted d of items that
374:21 - we're passing
374:22 - this stuff into sorted sort is going to
374:24 - rare go around
374:25 - move stuff around and then give us back
374:29 - a sorted version sorted in ascending
374:31 - order based on key without looking at
374:33 - the value
374:34 - and so the so that's a way to see
374:38 - dictionaries sorted by key is just say
374:41 - sorted of d sub items
374:42 - and sorted as a function and so it just
374:44 - picks stuff and so
374:46 - this is the kind of loop that you're
374:47 - going to write to do that
374:49 - you know we did this before we took
374:51 - sorted and we got these sorted by keys
374:54 - and so you can just make this nice and
374:56 - simple for key value by the way you can
374:58 - eliminate the parentheses here
375:00 - and i think it's prettier if you
375:01 - eliminate the parentheses but you could
375:02 - put parentheses
375:03 - this is still a tuple without the
375:05 - parentheses four
375:06 - k and key and value in sorted so that
375:09 - says go through d
375:10 - items but before i go through them
375:12 - please sort them so that means k is
375:13 - going to go through a
375:14 - b and c deterministically every single
375:17 - time
375:18 - it's going to go and of course value is
375:19 - going to go through the corresponding
375:21 - values so now we can
375:22 - print this out nicely sorted by
375:25 - key and that's a real nice succinct
375:28 - little
375:30 - way to say that i mean again these are
375:33 - one of the kind of things that people
375:35 - really like about python is that you can
375:37 - do pretty powerful things with
375:39 - easy to understand i mean you know you
375:41 - might have seen this for the first time
375:42 - but ultimately you look at that
375:43 - eventually you'll be like oh yeah that's
375:44 - i see exactly what that's doing easy not
375:47 - not hard at all
375:49 - so but let's say we're looking for the
375:51 - most common word which we have been for
375:53 - weeks and weeks and weeks now
375:56 - and so we want to sort by values not key
375:59 - so this is an example of where we're
376:01 - going to construct a data structure
376:03 - we're going to imagine a data structure
376:05 - and then we're going to write code to
376:07 - construct the data structure and then
376:08 - that's going to make our problem easy so
376:10 - this is an example of
376:11 - using cleverly constructed data
376:13 - structures to do this and the data
376:15 - structure that we're going to create
376:17 - is a list of tuples where the value is
376:20 - first and the key is second
376:21 - so you can just with items get key value
376:25 - i want value key so let's take a look at
376:28 - this code
376:28 - take your time and get it right so kv
376:31 - goes in c items well that is
376:33 - unsorted and going to have go through
376:36 - whatever a b and c
376:37 - in whatever order and we're going to
376:39 - make a new list so this is a data
376:41 - structure that we're creating
376:41 - temporarily
376:43 - and what we're going to do is this is a
376:45 - list
376:48 - and we're going to append to that list
376:52 - a tuple so this is going to be a list of
376:55 - tuples
376:57 - except we're not going to append them in
377:00 - key value order we're going to flip them
377:02 - and append the first part of the tuple
377:04 - is going to be the value and the second
377:05 - part is going to be the key
377:07 - so we end up with this this is sort of
377:09 - our temporary data structure that
377:11 - we have constructed to make our job
377:13 - really easy
377:14 - so this ends up being 10a
377:18 - 22c 1b and we just kind of flipped them
377:20 - we took this order
377:21 - and then we flipped them around and so
377:24 - now we have this nice little list
377:25 - sitting in memory in a variable
377:27 - and that's really simple we can say oh
377:30 - look we can use sorted and we can sort
377:33 - by now
377:34 - the values because they're the first
377:35 - thing i mean the sorted doesn't know
377:37 - that they're
377:38 - how we produce this list it just looks
377:39 - at that and says oh that's a list of
377:40 - tuples
377:41 - i'm going to always sort by looking at
377:42 - the first first item in any tuple
377:45 - and i'm going to add reverse equals true
377:47 - so i get a descending sort so i see that
377:50 - the value that is highest ends up
377:53 - being first and so that changes this and
377:55 - i'm just
377:56 - sort it and then reassign it back into
377:58 - temp and i'll print this out and so now
378:01 - you see it's sorted
378:02 - in descending order of key so it's value
378:05 - key value key value key
378:08 - but it's sorted in descending order okay
378:11 - and so
378:12 - that's an example sort of of just like
378:14 - you know if i just made a
378:16 - data structure and i flipped those
378:17 - things around i could use sorted to sort
378:19 - these things
378:20 - there's many other ways you could do it
378:21 - but there's sort of like the more
378:23 - elegant way of doing it and
378:25 - the the clever bit here is like make a
378:27 - new list and make it be a little bit
378:28 - different
378:29 - okay so here we're going to print out
378:33 - the top 10 most common words in a file
378:36 - and most of this code is review so if we
378:38 - take a look at it
378:40 - we're going to open a file we're going
378:42 - to start a dictionary for our counting
378:45 - we're going to you know there's going to
378:47 - be words
378:48 - and lines
378:52 - right and so we're going to have a for
378:53 - loop this for loop is going to go
378:55 - through each line
378:56 - and then of course we're going to split
378:58 - them which is busting them into pieces
378:59 - and then we have a for loop within that
379:02 - and this for loop is going to go through
379:03 - each word and so that means that be
379:06 - by nesting these loops we're going
379:08 - through each line and then within the
379:10 - line we're going through a word then we
379:11 - go to the next line and go through the
379:12 - words
379:13 - and eventually this line of code count
379:15 - sub word equals counts dot get word zero
379:17 - plus one
379:18 - our idiom for making a histogram
379:22 - right this line right here is an idiom
379:24 - if you don't
379:25 - know already what that is go back to the
379:27 - previous dictionary lecture
379:29 - and understand it understand it because
379:31 - you're just going to use it over and
379:32 - over again
379:33 - so now at this point and i always like
379:35 - drawing horizontal lines in code when we
379:37 - write it at this point
379:38 - coming through at this point counts as
379:40 - right counts is the histogram
379:42 - it's not sorted so now we want to sort
379:44 - it so
379:46 - we're going to make a new list we're
379:47 - going to loop through key value
379:49 - and then we're going to make a tuple i'm
379:51 - i'm making this be two lines to make a
379:53 - little easier value
379:54 - key so i'm flipping it right so i'm
379:56 - flipping the order of these things
379:57 - that's making a tuple and then i'm
379:59 - appending that tuple to the list
380:01 - okay so at the end of this
380:04 - we have a list of tuples
380:08 - in value key order
380:11 - vk vk right so
380:14 - at this point coming through here i've
380:16 - got in my lst variable i've got this
380:19 - really
380:19 - useful bit of code that a useful bit of
380:21 - data that i produced
380:23 - and then i'm like oh now it's ready to
380:24 - be sorted poof
380:26 - sort so take list sort it back and sort
380:28 - it in descending order
380:29 - and then stick that back in list now we
380:32 - want to print it out but we don't want
380:33 - to print it out we don't
380:36 - so we got a nice sorted list coming down
380:38 - here we don't want to print it out
380:40 - uh in value key because that's what it
380:42 - is it's in parentheses v
380:44 - comma k order but it's n sorted and we
380:46 - know that the most
380:47 - the highest value is here on down
380:51 - and so we're going to say you know we're
380:52 - going to run through and now we're going
380:54 - to go through this new list
380:55 - only the first 10 start at the beginning
380:58 - up 2 but not including
380:59 - number 10 which is the first 10. for
381:02 - value key
381:03 - in and so value is good so this is the
381:05 - iteration variable that's going to go
381:06 - through each of these things
381:08 - on and down and then we're just going to
381:10 - print it out flipping it so we re-flip
381:11 - it
381:12 - flip flip we print out key value and
381:15 - it's going to work
381:18 - okay so that is
381:22 - one way of doing this and this slide
381:23 - right here you absolutely do not need to
381:26 - figure out but some of you will look at
381:28 - this slide and you're like why didn't
381:30 - you show us that in the beginning and
381:31 - others of you will be like
381:32 - no no no no no keep telling me this
381:34 - stuff here
381:35 - so i don't know exactly the term for
381:38 - this but
381:39 - this is a very procedural this is a
381:42 - classic algorithms and data structures
381:44 - approach to solving this problem
381:47 - this next thing uses what are called
381:50 - lambdas
381:50 - and they kind of create what's called
381:53 - what i call a closed form where you kind
381:54 - of do it in all one statement and
381:56 - there's all this implicit stuff going on
381:58 - so if you don't get this right away
381:59 - don't worry too much about that
382:01 - but roughly
382:05 - this single line does everything that
382:07 - bottom
382:08 - half of that program does i mean if you
382:10 - go back if we go back to here
382:12 - it's pretty much this line does
382:14 - everything
382:15 - does that in one line okay it doesn't
382:18 - create the counts and it doesn't print
382:20 - out the top ten
382:21 - but it does everything in that middle
382:23 - bit
382:24 - so let's take a look at this so we all
382:26 - are going to collapse this down
382:28 - so we have a print that parenthesis the
382:30 - end of the print
382:31 - and then we have sorted and remember
382:33 - that sorted
382:34 - takes as input a list and so that's not
382:38 - too bad and returns us a list and so
382:40 - we'll print the return
382:41 - from sorted and then this
382:44 - is the funny part the fun part funny
382:47 - part this
382:48 - is called list comprehension
382:52 - and we have square brackets and we say
382:54 - to python this is a list
382:56 - but instead of listing the things or
382:59 - having a constant one comma two comma
383:01 - three
383:01 - or a pen depend depend we're going to
383:04 - create an expression
383:05 - that will act as a generator for all the
383:07 - elements
383:08 - and so this basically says this is a
383:11 - list of two tuples
383:12 - v and k and then this is sort of implied
383:16 - for all k v in c dot items and so this
383:19 - is like a for loop
383:21 - that is sort of driving this think of
383:23 - this as like stamp stamp stamp stamp
383:26 - stamp
383:26 - however many times it has to make a
383:28 - stamp and so that's producing
383:30 - a list right it just manufactures this
383:34 - list
383:35 - and then that list is sort of
383:36 - manufactured in the moment there's no
383:38 - stock
383:38 - it's not put in a variable it python
383:41 - makes that list according to the
383:42 - stamping pattern
383:44 - that you've told it to stamp out this
383:46 - list and then it passes that stamped out
383:48 - list without even storing
383:49 - a variable into sorted sorted moves the
383:52 - list around
383:53 - because it is just a list of tuples and
383:55 - then gives us back
383:56 - the sorted list and so i didn't put
383:58 - reverse equals true on here
384:00 - but you see that this is sorted in
384:02 - ascending order now
384:03 - by key and i did that all in one
384:07 - little statement so so look at this
384:10 - there's a this is also one of the
384:12 - beautiful things about python
384:14 - that you can build these things and you
384:15 - can build more complex versions of this
384:17 - and
384:18 - and there's a lot of real elegant things
384:19 - that you can do in python
384:21 - they're really succinct you should be
384:23 - careful because
384:25 - in the beginning i think this is easier
384:26 - to understand even though after a while
384:28 - you're like wait a sec i'm why am i
384:30 - putting all these extra lines in
384:32 - because this is not so hard to
384:33 - understand but at some point
384:35 - you know you will want to master uh this
384:37 - more powerful and more succinct version
384:40 - of python
384:41 - that that expresses it in terms of what
384:42 - the data you want to see rather than the
384:44 - steps you want to take
384:46 - so this sort of finishes up tuples we've
384:49 - uh done a bunch of stuff
384:50 - i mean really they're simple and elegant
384:53 - tuples
384:53 - lists and dictionaries are all related
384:56 - they're really three different
384:57 - kind of three foundational data
384:59 - structures three foundational
385:01 - collections of python
385:02 - and we combine those in a lot of
385:04 - different ways
385:18 - [Music]
385:24 - hello and welcome to python for
385:26 - everybody i'm charles severance and
385:27 - uh and now in this little bit of lesson
385:30 - we're going to talk about
385:31 - some tuples and we're going to create a
385:33 - list of the most common words
385:35 - and find out how to sort a dictionary by
385:37 - the values
385:39 - instead of by the key we're going to use
385:41 - the clown.txt file and the intro.txt
385:44 - file
385:45 - and i'm going to start with the code
385:47 - from exercise 9 that i just did
385:50 - from chapter 9. it's not exactly one of
385:52 - the exercises but it's very similar to
385:53 - them
385:54 - and i'm going to make a copy and i'm
385:56 - going to keep it in the same folder i'm
385:57 - going to keep it in the ex09 folder
385:59 - and just call it ex10 because this
386:03 - code is going to do much of the same
386:07 - stuff and it's going to read these same
386:08 - files and so i've
386:09 - got myself exercise 10 like exercise 9
386:11 - is still here exercise 10 is now what
386:13 - i'm editing exercise 10.
386:14 - but i'm in the exercise 9 folder so
386:19 - in exercise 9 we look for the the most
386:21 - common word but we want to find the 5
386:23 - most common words which is going to
386:24 - require us
386:25 - to sort so i'm going to get rid of that
386:27 - code because it's not really how we're
386:28 - going to do it there we manually loop
386:30 - through it
386:31 - and found the maximum and so i'm going
386:33 - to just run this
386:35 - cd desktop python for
386:38 - everybody ex09 and if i do an ls you see
386:42 - that i've got ex09.py
386:44 - intro.txt so i'll run python3
386:48 - ex10.py and run the clone data
386:52 - and we see that we see the dictionarian
386:54 - is properly uh
386:55 - making it in this code right here that
386:57 - doesn't change it reads the file
386:59 - reads all the lines goes through and
387:00 - splits it into words and then goes
387:02 - through the words and does the
387:04 - the idiom of using dictionary get to
387:07 - maintain the counters and we print it
387:08 - out at the very end so the new code
387:10 - we're going to write
387:11 - is down here okay
387:14 - so let's first if you do a few things um
387:18 - if i can say x is equal to
387:22 - the dictionary dot items and this gives
387:25 - us
387:25 - basically a list print
387:28 - x this gives us a list of the key value
387:31 - pairs this prints out the dictionary but
387:33 - if we do it this way
387:34 - and use items it gives us the key value
387:37 - pairs
387:38 - okay so that's what we got key value
387:40 - pairs now
387:42 - we can sort this based on the value
387:44 - because tuples can be compared
387:46 - this can be compared with this and
387:48 - because
387:49 - d is lower than r then this one is lower
387:52 - this whole
387:53 - this rand tuple comes after the down
387:55 - tuple so we can sort this whole thing
387:58 - and i'll do this by just putting the
388:00 - word sorted here
388:02 - and say give me a sorted version of that
388:04 - now it's going to do it based on the
388:05 - order of the tuples
388:07 - this is going to be more higher
388:08 - precedence than this so if i if i print
388:10 - it this way
388:13 - run it again you'll see that it's sorted
388:17 - and now is after and car
388:20 - it's in alphabetical order by key and so
388:22 - we could
388:23 - actually print the first five up to but
388:26 - not including five
388:28 - by adding a list on the slice of this
388:30 - list slice here
388:32 - and so that will show you only the first
388:34 - five
388:35 - right except that that's not we're
388:37 - trying to do we really want to sort by
388:39 - this
388:40 - okay so
388:44 - we have this mechanism that can take a
388:46 - list and sort it based on the tuple
388:48 - values
388:49 - if we could create a list where it was
388:52 - one comma
388:52 - after instead of after comma one and
388:55 - make it exact same thing
388:56 - then we could actually then sort it and
388:58 - it would be fine okay
389:00 - so let me show you a couple of ways at
389:02 - least one way to do that
389:04 - okay get rid of this
389:10 - we're going to hand construct a list and
389:12 - i'll
389:13 - just call it temp equals give me a new
389:15 - list
389:16 - temp equals new list and then four
389:20 - k comma v in
389:24 - the dictionary.items
389:27 - and i'll just start by printing k comma
389:30 - v
389:31 - so we see and this is where it's really
389:34 - nice to do these with
389:35 - the clown code first and then only do
389:37 - your test on the bigger file later
389:39 - and so it's pretty much the same thing
389:41 - we're going through in key value
389:44 - order which is dictionary order which is
389:45 - not sorted at all
389:47 - okay now instead of printing this out we
389:50 - are going to
389:52 - let me do this in a couple of steps make
389:54 - a new tuple
389:56 - and we'll just call it newt
390:00 - equals parentheses v comma k
390:04 - okay so this is i'm saying make a new
390:06 - tuple this is like a new tuple with two
390:08 - items in it and i'm going to make the
390:10 - value
390:11 - for and the k the the key okay so
390:15 - then i'm going to say temp dot append
390:20 - newt new tuple so i'm gonna i'm gonna
390:23 - end up with
390:24 - a list of tuples let me comment this one
390:27 - out
390:27 - and i'm gonna then when i'm done here
390:29 - i'm gonna print
390:30 - temp
390:36 - so if i run clown.txt you see what
390:39 - happens in temp
390:41 - it's the it's still well let's print
390:42 - temp twice
390:48 - i mean it's not sorted it's flipped
390:53 - let's print it that's okay
390:57 - we'll just that's the flip one
391:00 - okay so it's flipped and all we did is
391:02 - we made it instead of car comma three
391:04 - it's 3 comma car but now we have a list
391:09 - okay so now it's flipped and now we can
391:12 - sort that
391:13 - we can say temp equals sorted
391:18 - temp so it says take temp and sort it
391:21 - and give it back to me
391:22 - and now i'm going to say print sorted
391:26 - comma temp
391:34 - okay so here's the first print when we
391:37 - flipped it we've got two tent
391:40 - but it's not sorted at all but after we
391:41 - sorted it it's sorted by tuple and the
391:43 - lowest
391:44 - is one after so so you'll notice that
391:47 - one is the same as one so it checked the
391:49 - second item in the tuple
391:50 - so down comes before after fell becomes
391:53 - the after down
391:55 - intro on alphabetical order but now we
391:57 - get the twos so that
391:58 - all the all the ones sort there and then
392:02 - the twos come
392:03 - here but then within the twos it's sort
392:05 - in alphabetical order because
392:06 - like a string if it if the first
392:09 - character matches then it looks to the
392:11 - second character
392:12 - and then we see oh here we go the threes
392:15 - and then
392:16 - the one we actually wanted the highest
392:18 - one is the seven
392:20 - and so one of the things we can do is we
392:21 - can say you'll notice that we want the
392:23 - highest one not the lowest one
392:25 - so we can just tell this with this
392:28 - parameter reverse
392:30 - equals true
392:33 - and we just say hey sorted do this
392:35 - backwards do it from highest to lowest
392:37 - rather than
392:38 - lowest to highest and now our sorted one
392:40 - says
392:41 - seven the etc okay
392:45 - and so we want the first five
392:50 - we can say
392:55 - up to but not including five so this is
392:58 - now
392:59 - the top five
393:02 - so the sorted one is that's the top five
393:06 - if there is it's a tie we're going to go
393:07 - and reverse alphabetical order but let's
393:09 - not worry about that too much for now
393:11 - so it it makes a flipped list then it
393:14 - sorts the flipped list
393:18 - now if i just wanted to print it out
393:20 - nicer
393:21 - i could loop through this new list i
393:23 - could say 4
393:25 - v comma k remember this is a flipped
393:27 - list so the sensible thing is
393:29 - what's coming up i mean coming out of
393:30 - this list each tuple is value comma key
393:33 - in temp and i'm only going to go up to 5
393:36 - up through but not including five so the
393:38 - first five
393:39 - and so i'm pulling them back out as
393:41 - value key because that's what they are
393:44 - they're value key c value key
393:47 - value key value key so v is going to go
393:50 - through these and k
393:51 - is going to go through these and then
393:52 - i'm just going to print
393:54 - k comma v so this is kind of my flipping
393:57 - backwards because i
393:58 - i want to see them this way
394:01 - and that's the most common one car three
394:04 - and so it's just going through this
394:05 - up to the fifth one and then printing
394:07 - them out okay
394:09 - so let me comment this out let me
394:12 - comment that out
394:17 - let me just delete this so we have a
394:20 - dictionary
394:21 - let me comment out the dictionary we
394:23 - have a dictionary
394:24 - we make a list and we make these
394:26 - reversed
394:28 - tuples where we have the value first and
394:29 - the key second we're setting it up
394:31 - so the sort's going to work and then
394:33 - once it's sorted we have to flip them
394:35 - back so we we flip them for sorting
394:37 - from key value to value key for sorting
394:40 - we do the sort then we flip them back
394:42 - with key value and print them out
394:49 - and it works fine so let's try our big
394:51 - file intro.txt
394:54 - and there you go those are the five most
394:57 - common words
394:58 - in intro dot txt so
395:01 - you might ask yourself why did we use
395:03 - tuples we probably we could have really
395:04 - used lists for this
395:06 - but tuples are more efficient than lists
395:08 - and you notice that we weren't going to
395:09 - modify
395:10 - we did modify the temp list it's a list
395:12 - of tuples but the tuples within the list
395:15 - we're not we weren't going to modify and
395:16 - so we tend not to
395:18 - make lists if we can get away with using
395:20 - tuples and so that's why we made this
395:22 - uh was what this flipped tuple thing
395:25 - okay
395:26 - so i uh i hope that was useful to you uh
395:29 - hope to see on the net
395:30 - hello and welcome to chapter 11 regular
395:32 - expressions
395:33 - the fun thing about this chapter is
395:35 - unlike all the rest of the chapters you
395:37 - sort of had to
395:38 - really understand every single thing in
395:40 - chapters one through eleven
395:41 - built on one another one through ten
395:43 - built on one another but
395:45 - but you can really get along without
395:46 - using chapter 11. it's not a really
395:48 - required
395:49 - topic but it's a fun topic and an
395:52 - interesting topic so uh
395:53 - so so you can relax a little bit and
395:56 - realize that you may or may not like
395:57 - regular expressions and if you don't
395:58 - like them that's okay you don't have to
396:00 - use them you can go for your
396:01 - your whole life without using regular
396:02 - expressions the idea of a regular
396:04 - expression is that
396:06 - you you come up with a language it's a
396:09 - little a character-based programming
396:11 - language where you can
396:12 - uh you know do smart searching basically
396:15 - start searching and as you'll see in a
396:17 - bit with smart
396:18 - smart uh smart extraction and it's uh
396:21 - it's really almost programmable wild
396:23 - card expressions there's no looping but
396:25 - there is looping and there's all this
396:26 - implicit thing you say look for patterns
396:28 - that look like this
396:29 - and then you get back things that match
396:30 - those patterns you know we
396:32 - we do searching for everything we're
396:34 - looking through large blocks of text
396:36 - say go find me everything that has the
396:38 - word python in it or something like that
396:39 - so that's just such a common thing to do
396:41 - and regular expressions are a very
396:43 - structured way
396:44 - to go about searching for information
396:46 - they're very powerful but they're also
396:48 - very cryptic and you may not like them
396:49 - but they're a lot of fun actually once
396:51 - you understand them
396:52 - learning how to program them takes a
396:53 - while writing good regular expression
396:56 - programs
396:56 - requires some try it play with it check
396:59 - it try it check it try check it but once
397:01 - you get them there they're really
397:02 - quite cool it's a very old programming
397:05 - language
397:06 - um you know it comes almost from the
397:08 - 1960s
397:09 - the concept of it's a theory of
397:11 - computing where they were trying to come
397:12 - up with theory of languages and regular
397:14 - expressions was one
397:15 - form of languages that computers could
397:18 - understand and so it has some
397:20 - fun old words and um one of the
397:24 - advantages of knowing regular
397:25 - expressions
397:26 - is that you're kind of a cool person you
397:28 - can take a quick look at this
397:30 - uh xkcd that sort of captures the uh
397:33 - the devil may care awesome power that
397:36 - regular expressions
397:37 - do and and while we're at it um
397:41 - you know what we're talking about
397:42 - awesome i do want to take this moment
397:44 - and show you my awesome tattoos and so
397:47 - you may not know this but i got a couple
397:49 - tattoos here here's the first tattoo
397:51 - this is where i went to got my phd and
397:53 - this is
397:54 - my university michigan faculty member
397:56 - position i got phd in engineering
397:58 - and i teach in a school of information
398:00 - and library science and then i have this
398:02 - other tattoo
398:03 - and this tattoo is what i call the ring
398:05 - of compliance
398:07 - i work on learning management systems
398:08 - and educational technology and standards
398:11 - and there's this standard called
398:12 - learning tools interoperability which if
398:13 - you're
398:14 - using this course and doing the auto
398:16 - grader it uses learning tools and
398:18 - operability to integrate into whatever
398:19 - learning management system you happen to
398:21 - be using
398:22 - and one of those learning management
398:23 - systems is the open source learning
398:24 - management system that i helped write
398:26 - called sakai
398:27 - and these are the rest of the major
398:29 - vendors and the idea of that tattoo
398:31 - was that i would put the tattoo of every
398:35 - vendor that would comply with learning
398:36 - tools interoperability so you'll notice
398:38 - corsair i help corsair put learning
398:40 - tools interoperability in and so
398:41 - the auto graders integrate into corsair
398:43 - or blackboard or canvas or sakai or
398:45 - moodle
398:45 - or often those are other things so it's
398:47 - just like a cool
398:49 - techno thing just like regular
398:51 - expressions
398:53 - so i've got a url here for regular
398:55 - expression quick guide you might want to
398:57 - print this out so that you can look at
399:00 - it even while you're watching this
399:01 - lecture
399:02 - um because it's a little programming
399:04 - language except that it's character
399:05 - based not line based and not keyword
399:07 - based it has
399:08 - certain active characters that that the
399:11 - character means something versus the
399:13 - character
399:14 - represents the character itself and so
399:16 - the regular expressions is not part of
399:18 - the base python but it's distributed
399:20 - with python so you have to put an import
399:21 - re to at the top to say that's really
399:24 - saying pull in the regular expression
399:25 - library
399:26 - and there is a couple of functions
399:28 - inside that re.search which is kind of
399:30 - like a really smart version of the find
399:33 - method inside of strings and re.find all
399:35 - which is
399:36 - kind of like like taking and stamping
399:39 - your way through a loop
399:40 - through a string and finding all of the
399:43 - things that match a particular
399:45 - particular pattern then extracting those
399:47 - and we'll talk about both of these
399:49 - in this lecture so here's a really
399:52 - simple piece of code
399:54 - where i'm just going to sort of show you
399:55 - sort of before and after
399:57 - so here's a thing where we're looking
399:59 - for lines that begin with from colon
400:01 - and so we open a file we loop through
400:03 - the whole file we strip off the lines
400:06 - text and then we say if line dot find
400:08 - from is greater than equal to zero
400:10 - then we print it it gives you a negative
400:12 - one if it's not found and so
400:14 - reads all the lines and once in a while
400:15 - we'll print it out reads all lines once
400:16 - while printed out
400:17 - so that's kind of like a needle in the
400:18 - haystack to use regular expressions to
400:21 - do that we have to import the regular
400:22 - expression library
400:24 - these lines are the same we're going to
400:25 - loop through we're going to trip and how
400:27 - we now we're going to say if re.search
400:29 - the way to say this is
400:30 - within the library regular expressions
400:32 - go find the search
400:34 - function and search for the string from
400:38 - in the string line okay so this is the
400:40 - line to search whereas here
400:42 - it was more object-oriented where we say
400:43 - line.find here we say re.search and we
400:45 - pass in line as parameter
400:47 - these two things are equivalent which
400:48 - means most times gonna run and once a
400:50 - while hit a line it'll print that out
400:52 - and then it'll finish the whole thing so
400:53 - that is taking
400:55 - and doing what we would do with the find
400:58 - operation
400:59 - with regular expressions now
401:03 - searching with regular expressions has
401:04 - these special characters and so here we
401:06 - have the same
401:07 - basic code except now we're saying if
401:09 - line starts with from
401:10 - so we're not using find anymore and
401:13 - um that way we're only going to get that
401:15 - thing in the first position not like
401:17 - blah blah blah
401:18 - from colon we don't want that to match
401:21 - we only want to match here at the
401:22 - beginning of the line
401:23 - and so that's we use line starts with so
401:25 - it's going to do the same thing and find
401:26 - lines that
401:27 - have the prefix and print those out and
401:28 - then be done now in regular expression
401:30 - search we don't
401:31 - in a sense change the method we we have
401:34 - a certain number of things we can do
401:35 - with strings based on what they've built
401:37 - in
401:37 - but in regular expression we actually
401:38 - can turn this first parameter
401:41 - into code and so what's happening here
401:45 - is the carrot if you go back to a little
401:47 - cheat sheet carrot means
401:48 - this is the beginning of line it's a
401:50 - virtual character that matches the
401:51 - beginning line it's like
401:52 - from that starts at the beginning so
401:54 - from at the beginning
401:56 - does match and from in the middle does
401:58 - not match by putting that little carrot
402:00 - there
402:00 - same thing line is what we're searching
402:02 - and then from is what we can
402:04 - carry it from lining to the kit from at
402:05 - the beginning is what we're looking for
402:07 - and so again it does the exact same
402:09 - thing
402:09 - the only prince lines that have from
402:10 - colon is the first character in the line
402:13 - so the difference is we
402:15 - look for a method and the other one is
402:16 - we program the regular expression
402:18 - so we're going to run out of methods in
402:20 - the string
402:22 - class long before we run out of things
402:24 - that we can do with
402:25 - regular expressions and so
402:28 - a couple other special characters that
402:30 - carrot matches the
402:32 - beginning of the line so carrot matches
402:33 - the beginning of the line this capital x
402:35 - matches itself
402:37 - dot is a wild card that matches any
402:40 - character and then some of the
402:41 - characters in regular expressions
402:43 - modify the immediately preceding
402:44 - character and so that says
402:47 - look first a line that starts with x and
402:49 - then has many characters that's
402:50 - these two things zero or more characters
402:54 - followed by a colon
402:55 - and so you can see that it's sort of
402:57 - it's this sort of like expanding stamp
402:59 - it's like oh there's next being the line
403:00 - that line it looks good
403:02 - i got some characters here and i got a
403:03 - colon that's good so this is an
403:05 - x some characters and a colon
403:08 - check x some characters and a colon
403:11 - check x and these things you know away
403:13 - we go and so you can
403:15 - that's what's going to match and so you
403:16 - can see how some of these characters are
403:18 - special again go back to your cheat
403:20 - sheet
403:20 - some of them are special and some of
403:21 - them are actual characters and this
403:23 - colon and x are just they're
403:25 - they're not special they're just the
403:26 - characters okay
403:28 - now sometimes you want to be a little
403:32 - more clear on your match so
403:33 - let's take a look at these lines that
403:35 - that match that particular thing that we
403:37 - just did
403:38 - so we have these two x dash sieve cola
403:41 - next
403:41 - d stand result like these are from mail
403:43 - messages and then one of the mail
403:45 - messages has a line
403:46 - that says x dash plane is behind
403:48 - schedule and
403:49 - this matches is that what you really
403:52 - wanted
403:53 - and so what we can basically say is
403:55 - because
403:56 - this is an x this is some number of
403:57 - characters and that's a colon
403:59 - it matches it has to match that that's
404:01 - this rule applied to this line results
404:04 - in a yes
404:05 - it does and so how can you be a little
404:08 - more
404:08 - clear as to what you want to match and
404:11 - what you don't want to match
404:13 - so we can write code so now
404:16 - what we're going to say is
404:20 - we want to match the beginning of the
404:21 - line and we want to care capital x
404:23 - and we want a dash so now we're going to
404:25 - match those first two characters
404:26 - x dash at the beginning of the line
404:28 - carat x dash says first two characters
404:30 - of the line must be x dash
404:32 - now we have another special character
404:33 - again refer to your cheat sheet
404:35 - backslash capital s means a non-white
404:38 - space character
404:40 - right any character other than white
404:42 - space and then plus
404:43 - means one or more times one or more
404:46 - non-white space characters that's what
404:48 - this whole thing says
404:49 - one or more non-white space characters
404:51 - and followed by a colon which is just a
404:52 - character
404:53 - so now we have x dash followed by one or
404:55 - more non-white space characters followed
404:57 - by a colon
404:58 - x dash followed by one or more non-white
404:59 - space characters followed by a colon
405:01 - here we have x dash followed by one or
405:03 - more oops there's a space there
405:05 - and so this doesn't match even though
405:07 - there's a colon there it means that
405:08 - between the dash and the colon
405:10 - you can only have non some number of
405:12 - non-white space characters
405:13 - so this is a no it does not match
405:17 - and so you just can if that if you
405:19 - didn't want to match this you then
405:21 - sort of create a more precise
405:25 - you know we could even have a thing that
405:26 - said i want x dash with an uppercase
405:29 - character
405:29 - uppercase letter if you wanted to and so
405:31 - there's all kind of
405:32 - fine tuning if you sort of learn the
405:35 - structure that you've got to do
405:37 - and so that's kind of the matching where
405:39 - you're taking a whole line and taking
405:41 - this
405:41 - template and deciding if the template
405:43 - anywhere on that line matches
405:45 - and now we're going to do is use this to
405:47 - actually pull data out of strings
405:50 - using the regular expression library
406:10 - [Music]
406:17 - so now we're going to move from merely
406:18 - matching to matching and extracting so
406:20 - we're going to say hey
406:21 - i would like to not only have you take
406:23 - this template this little pattern the
406:25 - string pattern regular expression
406:26 - pattern
406:27 - run it across the line i want you to
406:29 - give me all the ones that match and i
406:31 - want a list of those and that's what
406:33 - we're going to use the find
406:34 - all so search gives a true false find
406:37 - all gives a list of all the strings that
406:38 - match
406:39 - so if there's four of them you'll get
406:41 - four things in the list if there's
406:42 - nothing that matches you'll get an empty
406:43 - list
406:44 - so let's take a look at what we got
406:46 - going here
406:47 - so instead of calling search we call
406:50 - find all we still pass in the string
406:52 - that we're looking through
406:53 - and then we have our little template
406:55 - pattern
406:56 - and this is a new bit of regular
406:58 - expression
406:59 - uh any little bracket operation square
407:02 - bracket
407:03 - is one character that's just a character
407:06 - but then they're in between here is a
407:07 - set of
407:08 - allowed characters so 0-9 means
407:12 - eight single digit zero one two three
407:14 - four five six seven
407:15 - eight or nine but that's really one
407:18 - character
407:19 - and then we have so that's one character
407:22 - and then the plus applies to that which
407:24 - means if we look at this whole thing
407:27 - this whole thing says one or more digits
407:30 - that's the code
407:31 - we write in a regular expression that
407:32 - says one or more digits and we're just
407:34 - going to use that in our regular
407:35 - expression by itself
407:37 - so we're going to look for any string
407:40 - that's one or more
407:41 - digits and pull it out and give it back
407:43 - to me so we look it's going to look so
407:44 - that's my little template stamp stamp
407:46 - stamp stamp oh
407:47 - got it stamp stamp stamp stamp stamp
407:48 - stamp stamp stamp stamp stamp oh
407:50 - got it stamp stamp stamp stamp got it so
407:53 - what we get back
407:54 - after we ask find all to find all of the
407:56 - one or more digit strings
407:58 - is um 2 9 and 42. so it actually parsed
408:02 - it it split it it found all these things
408:04 - and said i found them all for you
408:05 - and here they are 2 19 and 42. so it's a
408:09 - list
408:09 - of three strings because that's how many
408:12 - you found now i might have found none
408:13 - and we've got an empty list at that
408:15 - point but
408:16 - it found some okay so just as an example
408:21 - you know we did this thing we get 2 19
408:23 - and 42 but if i said this
408:25 - that basically is a uppercase vowel
408:29 - a e i o or u so that's one letter and
408:32 - that's
408:32 - one or more so it's saying you know
408:36 - something like
408:36 - a a would match uh e i would match
408:41 - o would match but if you look now it's
408:43 - saying okay that's
408:44 - i'm looking for one or more minimum one
408:47 - or more uppercase
408:49 - o aeiou is a set of characters one or
408:51 - more uppercase letters
408:53 - and so it says like look do you find oh
408:55 - there's an uppercase but it's an m no no
408:56 - no no uppercase no uppercase no
408:58 - uppercase no uppercase
408:59 - uh found nothing did not find anything
409:03 - and so it gives us back an empty list
409:05 - and so it's like
409:06 - find all the things that match this and
409:08 - the answer is none match
409:10 - here's your list of nothing okay and so
409:12 - that's and so you have to check that's
409:14 - how you have to check even if you got
409:15 - something because
409:16 - it's not going to return you false it
409:17 - returns you a list with no items in it
409:21 - now the way it works like i said it sort
409:24 - of is taking this template
409:26 - and stamping it across the line scamping
409:29 - across the characters now
409:30 - there might there's a behavior that
409:32 - might not be intuitive you would
409:33 - to intuitive you at the very beginning
409:35 - but the notion of what we call greedy
409:38 - matching
409:38 - and that is when it can match more than
409:41 - one possible string
409:43 - overlapping string it chooses the
409:45 - largest overlap of the overlapping
409:46 - strings and so the easiest way to show
409:48 - this with an example
409:50 - and we're saying i want something that
409:51 - starts with an f with one or more
409:53 - characters
409:54 - and ends with a colon so that that's
409:57 - there that's my little stamp that's my
409:58 - template
409:59 - so it starts with an f good that's good
410:02 - one or more characters
410:03 - have a colon that's so that could be
410:06 - from colon
410:07 - that would match but look i've got
410:09 - another colon here and this is just
410:10 - continuing on with one or more
410:12 - characters
410:13 - and this so the question is do we get
410:15 - this or do we get this part
410:17 - right and the answer is with greedy
410:19 - matching is we get the larger of the two
410:22 - okay and so what you get back is
410:24 - somewhat counterintuitive
410:26 - you get the whole thing as the match
410:28 - from colon using the
410:30 - we could have got from colon but the
410:32 - reason it picks this is this one's
410:34 - longer so anytime it has a choice
410:36 - it picks the longer one and that's what
410:37 - greedy is meaning it probably better
410:39 - described as larger or tending toward
410:43 - the longest string
410:45 - or something like that so you can of
410:47 - course suppress this behavior
410:48 - like everything in programming regular
410:50 - expressions you simply
410:52 - add another character and so now it's
410:56 - going to say
410:57 - i would like to start with letter f as
410:59 - any character
411:00 - one or more times and then this question
411:02 - mark this is still one
411:03 - you know one little thing um non-greedy
411:07 - okay and so that's just says do the do
411:10 - it not greedy
411:11 - which just means that it prefers the
411:14 - shorter of the strings and so
411:15 - now it could still match this string or
411:18 - this string
411:19 - but because it's been told to not be
411:20 - greedy it chooses this string instead
411:22 - and that's the string that we get
411:24 - and so that's the not greedy and you
411:25 - just had the question mark after the
411:27 - asterisk so it's usually
411:29 - an asterisk question mark or a plus
411:31 - question mark
411:32 - though that's a two thing that's zero
411:34 - more characters non-greedy and that's
411:35 - one or more characters non-greedy
411:37 - um actually most of the time the uh
411:40 - it seems to me that the non-greedy would
411:43 - be the more reasonable default but
411:44 - that's not how it is
411:45 - a greedy is the default and non-greedy
411:47 - is optional
411:48 - now we can play some more with this
411:51 - stuff okay
411:52 - and so uh let's take a look at this
411:55 - little example
411:56 - where we have a non-blank characters
411:59 - backslash capital s
412:01 - one or more of those non-blank
412:02 - characters followed by an at sign
412:04 - and then again one or more non-blank
412:06 - characters so this is looking for
412:08 - strings that have an ant sign with
412:09 - non-blank characters on both sides
412:11 - this is an example of where it sort of
412:13 - comes to this at
412:14 - and it goes this way and it does it in a
412:16 - greedy manner if you told it to
412:18 - to not be greedy it would give you this
412:20 - these three characters but we're telling
412:22 - it to go greedy so it goes all the way
412:23 - to here
412:24 - and stops at this blank and then stops
412:26 - at this blank
412:27 - and so that's a nice little thing find
412:29 - the at signs
412:31 - go to the the first blank blank and pull
412:34 - that stuff out and so that
412:35 - with one little match you pulled this
412:37 - thing out now of course we've done that
412:39 - before other with other techniques
412:42 - so that's just another way uh to pull
412:45 - stuff out
412:46 - um now if we
412:50 - we get this whole thing but what if
412:52 - that's not exactly what we wanted
412:54 - we can tell um we can
412:58 - we can give it a matching string that's
413:01 - different than the extracting string by
413:02 - adding parentheses and so here's another
413:04 - example
413:05 - where we basically say this is our
413:08 - string
413:09 - we want to match from at the beginning
413:12 - followed by a space followed by
413:15 - ignore the parentheses for the minute uh
413:17 - one or more non-blank characters
413:19 - followed by an ant sign
413:20 - followed by one or more non-blank
413:21 - characters so this is also going to if
413:23 - there's no from it's not going to be
413:25 - looking for that right
413:26 - so it demands the from is here so it
413:28 - matches that and the space is demanded
413:30 - as well
413:31 - and then it says oh non-blank character
413:33 - is great i got an at sign great now
413:35 - blank characters oops stop there
413:37 - and so this is what's going to match now
413:40 - the key is
413:40 - we don't actually want that back in our
413:42 - extraction what we really want back in
413:45 - our extraction is this part right here
413:47 - so what we do is we put parentheses in
413:50 - parentheses don't
413:51 - are code they're they're code in the
413:54 - regular expression world
413:55 - parentheses say start your extraction
413:57 - and end your extraction
413:58 - and so when you do this with a
414:00 - parenthesis when you when you do it
414:02 - you know without a parenthesis you get
414:05 - you get the whole from right
414:06 - without a parenthesis
414:10 - oh wait no okay that that doesn't have
414:11 - the from it so
414:13 - um but if you do that with the
414:15 - parentheses
414:16 - the you match the from but you only get
414:19 - the
414:20 - this bit to come out as well so you can
414:22 - add this to make the
414:24 - matching part more precise but without
414:27 - changing what you get returned
414:28 - and you specify what you want to get
414:30 - returned with the parentheses
414:33 - so next i want to show you just a couple
414:35 - of different ways
414:37 - to use these new found skills
414:45 - [Music]
415:00 - [Music]
415:04 - so now we want to do is use some of
415:05 - these new found skills in some more
415:07 - practical applications
415:08 - of regular expressions so let's go back
415:11 - to
415:11 - the way we first tore apart strings and
415:15 - and look at the situation where we if
415:17 - you recall we just wanted the host name
415:19 - right
415:19 - this is an email address and we're
415:21 - interested in the host name so we have
415:23 - this string
415:24 - and we go find the at right the find
415:26 - looks up and tells us the at is at
415:28 - position 21.
415:30 - and then what we do is we say okay let's
415:31 - look beyond there to the space
415:33 - and that tells it the space is in
415:35 - position 31.
415:37 - and then we're saying we can extract
415:39 - starting at
415:40 - beyond the at sign up to but not
415:42 - including the space by saying
415:44 - at pose plus one colon space position
415:47 - and
415:48 - when we get that now we have to have a
415:49 - thing that decides to only look at this
415:51 - on from lines but then it can print out
415:53 - the host
415:54 - that is extracting of this information
415:56 - so that was
415:57 - one way that we did that right one way
415:59 - we did it
416:01 - the next way we did this was the double
416:03 - split pattern
416:05 - right so we said okay let's take this
416:06 - line let's break it into words
416:10 - based on spaces that's what words is so
416:12 - that's 0 1
416:13 - 2 3 4 5 6.
416:16 - and then we know that the email address
416:18 - on lines that start with from
416:19 - space is the second one so we pull out
416:22 - email address which pulls this bit out
416:25 - into email and then we're going to split
416:27 - that again
416:29 - based on the at sign so we're going to
416:32 - split this part again based on the at
416:33 - sign so it splits right there and then
416:35 - this becomes the 0
416:36 - and 1 in pieces and then pieces sub 1
416:39 - is that host and if we print that out we
416:42 - get the host
416:43 - so that's the double split pattern nice
416:45 - thing about that is you don't have to
416:46 - keep track the little plus one is kind
416:48 - of annoying
416:49 - to use the space position um that
416:51 - previous one that's just hard to
416:53 - remember
416:54 - it's just i've written this code way too
416:57 - many times in my career
416:58 - and i've made mistakes and i have to
417:00 - debug it every single time and i print
417:02 - all these numbers out i'm like did i get
417:03 - it right
417:04 - i did it in python i did it in java i
417:06 - did it in c wait a second did it
417:08 - differently and so it's
417:11 - so this is a lot cleaner i mean i can
417:12 - write this every time and i know it's
417:14 - going to work every time i barely even
417:16 - need to test this code because it's so
417:17 - obvious
417:18 - so double split is another way of
417:20 - extracting stuff but if we look at this
417:21 - thing with the regular expression
417:23 - we can say oh okay let's
417:26 - let's use a regular expression to do
417:28 - this so we'll start looking through the
417:30 - string
417:31 - we'll start so by saying hey let's look
417:33 - until we find an at
417:34 - sign then let's start extracting
417:38 - with the parentheses and then once we
417:41 - have found the add sign
417:43 - let's look for for for non-blank
417:45 - characters this is
417:46 - a set of characters this carrot as the
417:49 - first one means
417:50 - not a blank
417:53 - so that's another way to do non-blank
417:55 - not a set of characters which are
417:57 - everything but blank
417:58 - that's what this little bit is saying
418:01 - star means
418:02 - zero more times which means it's going
418:04 - to run run run run run until it finds a
418:06 - blank which is going to stop it
418:07 - the greediness is what keeps pushing it
418:09 - right it's this is a greedy match that
418:11 - asterisk is greedy because there's no
418:13 - question mark after it
418:14 - and so that does go and starts at the at
418:18 - sign
418:19 - with the parentheses goes to the space
418:22 - and that's the end parentheses and
418:24 - that's what prints out now
418:26 - y is going to be a list that's a one
418:28 - item list that has the string in it that
418:30 - we're looking for but
418:31 - you just go sub zero to get that guy
418:33 - right out of there
418:34 - okay so that's sort of the regular
418:36 - expression version of it but we can
418:38 - make this a more fine-tuned thing so we
418:41 - can say look we don't we also want to
418:43 - pick the line
418:45 - and we want to know if there are if we
418:47 - don't get that line
418:49 - we want to skip it if we do get the line
418:51 - we want to extract the data and we can
418:52 - do this all in a single regular
418:53 - expression
418:54 - so again we say start from the beginning
418:56 - of the line
418:58 - and if it's got to be a from followed by
419:00 - a space and then followed by
419:01 - any number of characters dot star
419:04 - followed by nat sign so it
419:06 - so this has to match we see a space then
419:09 - we're going to have any number of
419:10 - characters and then we're going to see
419:11 - an at sign
419:12 - and then we're going to start extracting
419:14 - and then we're going to go non-blank
419:15 - non-blank non-blank non-blank non-blank
419:18 - up blank and extracting and out that
419:20 - comes
419:21 - and this has the advantage of the
419:22 - previous one and that that makes it
419:24 - much more precise there if we look at
419:26 - the previous one
419:28 - while it works on good lines it might
419:30 - actually trigger on lines that we
419:31 - actually don't want to see
419:33 - so this allows us to refine it so it
419:35 - only actually
419:36 - does this to lines that we care about so
419:38 - it's sort of a both an
419:39 - if statement and a splitting extracting
419:43 - going on all at the same time
419:44 - by having a bigger string that we're
419:46 - matching than we're extracting
419:49 - it's a way to kind of clean up your data
419:52 - so here is
419:52 - a simple program that we're going to
419:55 - just put all this together and actually
419:57 - accomplish something
419:58 - and so we're gonna we're gonna read
420:00 - through and look for lines in a file
420:02 - that have this form
420:04 - and we're going to extract this number
420:06 - and then we're going to
420:08 - uh compute the the maximum of this
420:11 - okay so we're going to extract this
420:13 - number and then convert it to a float
420:14 - and compute the maximum
420:15 - so you know we're going to open a file
420:18 - we're going to write a for loop
420:20 - we're going to strip so we're going to
420:21 - do this for every line of the file but
420:22 - the first thing we want to do is
420:24 - not get line we want to discard all the
420:26 - lines
420:27 - except ones that have this so our
420:29 - regular expression is
420:30 - look for lines that start with x dash d
420:32 - spam dash confidence colon
420:34 - so that's a pretty strong match if
420:35 - that's not there we're not going to get
420:37 - anything
420:38 - and then there's a space there's a space
420:41 - and then start extracting
420:43 - and then go as long one or more digits
420:46 - dot
420:46 - and dots that's a single character and
420:49 - that's one or more and then stop
420:51 - extracting so that says
420:52 - start extracting da da da greedy greedy
420:54 - greedy greedy stop extracting
420:56 - and so that's what we're going to get
420:58 - now if the line doesn't have this
421:01 - it means missing in some other some way
421:04 - whether it's this prefix or this number
421:05 - if the number is missing it's going to
421:06 - fail too
421:08 - we're going to get back a list an empty
421:10 - list
421:11 - so the first thing you have to do is
421:12 - check to see if you actually got a match
421:15 - so you say if the number of items in the
421:17 - list len of stuff is not equal to one
421:19 - continue and so this is the this is the
421:22 - skip all the lines that don't match
421:24 - skip skip skip skip skip skip so there
421:27 - could be thousands of lines that don't
421:28 - match
421:28 - but then when this match hits it's going
421:31 - to come down and fall through
421:33 - right so so that most of the lines will
421:37 - skip up but then when we actually get
421:39 - one
421:39 - and we know instantly that we've got one
421:42 - and stuff sub zero because that's what
421:44 - we extracted
421:45 - is this number and we can take the
421:47 - floating point of it
421:48 - we append it to our list we made a list
421:50 - to store them
421:52 - that runs the list grows
421:55 - and then we just say what was the
421:56 - largest one and so you can run this
421:59 - and see that we have an escape character
422:02 - and the whole idea is sometimes all
422:04 - these little special characters that
422:05 - make a lot of sense to us
422:07 - we actually want to search for it so
422:08 - what if we want to search for a dollar
422:10 - sign
422:11 - well we just prefix it with the
422:13 - backslash
422:14 - and that just means this is a real
422:16 - dollar sign so backslash dollar is a
422:18 - real dollar sign
422:19 - so this says i would like a dollar sign
422:22 - followed by
422:23 - one or more digits or dots and so that's
422:27 - going to match a dollar sign followed by
422:29 - one or more digits dots are okay this is
422:31 - a set
422:31 - remember 0-9 or dot that's a set of the
422:35 - list of legit
422:36 - characters this is a range of characters
422:37 - that's a shortcut
422:39 - to how to make the set you could make it
422:40 - be zero one two three five seven eight
422:42 - nine dot
422:43 - or zero dash nine and it assumes that
422:45 - and that's one or more
422:46 - so then it stops because this is a space
422:49 - it's greedy matching
422:50 - then it pulls this out so that's kind of
422:52 - why greedy has to be the default
422:54 - because because otherwise if it wasn't
422:56 - doing greedy matching oops come back
422:58 - come back if it wasn't doing greedy
423:01 - matching
423:02 - it would it wasn't doing greedy matching
423:06 - it would stop here because it would find
423:07 - a dollar sign non-greedy would find a
423:09 - dollar sign
423:10 - and one character and that it would give
423:12 - us dollar one rather than dollar ten
423:15 - so in summary uh regular expressions are
423:18 - a
423:18 - cryptic but powerful language and uh
423:21 - they're they're an acquired taste
423:23 - uh i think that i bet eventually you'll
423:26 - find them fun even though
423:27 - uh on your first impression you might
423:29 - not think that they're so fun
423:37 - [Music]
423:44 - [Music]
423:55 - welcome to network programs this is
423:58 - chapter 12. now we're going to
423:59 - learn a little bit about how we talk to
424:03 - resources on the network using python
424:06 - now
424:06 - this is a really quick introduction to
424:09 - how the network really works i have a
424:10 - whole book that i wrote
424:12 - it's also translated into spanish on how
424:15 - the network works starting at the very
424:17 - lowest layer
424:18 - packets and everything right on up and
424:20 - it's actually really easy to read i
424:22 - wrote it for a high school audience
424:24 - it's a short book and pretty easy to
424:26 - read
424:28 - so if you read that book you will
424:29 - understand that there is this
424:31 - layered architecture the tcp
424:33 - architecture that sort of runs our
424:35 - network
424:35 - at the lowest layer that on one side
424:37 - here this is your computer and this is a
424:39 - server computer
424:40 - and if you sort of want a web page goes
424:43 - across the network
424:44 - does this like 15 or 20 times then it
424:46 - goes up into the server
424:48 - reads the data and then the data comes
424:50 - back
424:52 - 15 20 tops for the packets and then it's
424:54 - shown to you
424:56 - as what you see um
424:59 - and so that's how it works and there's
425:02 - these
425:02 - layers that we're not going to talk
425:03 - about in this section but i talk about
425:05 - in that book
425:07 - the layers of the link layer which talk
425:08 - about how to get over one hop the
425:10 - internet
425:11 - layer which talks about how to construct
425:13 - say 15
425:15 - or so hops to get packets back and forth
425:18 - that's the sort of lower level bits
425:21 - we're going to start at what we call the
425:22 - transport layer and that's
425:24 - the layer where your computer sort of
425:26 - assumes that it can make a phone call
425:29 - to another computer another process
425:30 - running on a program on this computer
425:32 - talks to a program on this computer and
425:34 - then it kind of comes back
425:36 - okay and so we're gonna we're gonna
425:38 - leave this alone we're gonna ignore it
425:40 - we're gonna assume that there's this
425:42 - nice reliable pipe that's going from
425:43 - point a to point b
425:45 - and what are we gonna do with the pipe
425:46 - but if you're interested take a look at
425:48 - the book
425:49 - so we're just gonna start with a pipe
425:52 - some kind of a connection we have two
425:53 - processes
425:55 - process process and we have some kind of
425:58 - a connection
425:59 - between them and it is a connection that
426:01 - we can both use
426:03 - to talk and to listen
426:06 - in nerd terms we call these things
426:08 - sockets and that is one process running
426:10 - on one computer
426:11 - another process running on one computer
426:13 - another second computer
426:14 - connected through the internet somehow
426:16 - and
426:17 - one computer speaks into that socket and
426:20 - it comes out
426:20 - and the other computer returns something
426:22 - and it comes and so this is a
426:24 - bi-directional protocol of data which is
426:27 - a series of in effect
426:29 - data phone calls between applications so
426:32 - the application might be
426:33 - on your side this might be your browser
426:36 - chrome firefox internet explorer
426:40 - on the other side this is a web server
426:42 - might be internet
426:44 - iis internet some some from microsoft or
426:47 - apache or
426:48 - java tomcat there's another program and
426:51 - you are making phone calls between these
426:53 - programs now in general
426:55 - um these servers here stay up all the
426:57 - time and you
426:58 - sort of just can make a request when you
427:00 - feel like it on your
427:02 - in your program but that's what we're
427:03 - going to do and this is what we call
427:05 - a socket so that little connection that
427:08 - phone call that data phone call
427:10 - is what we call a socket now
427:13 - you have to decide which of the systems
427:16 - you're going to talk to and then which
427:17 - of the services on those systems or
427:19 - which process
427:20 - and so we have this concept called port
427:23 - numbers and they're best thought of like
427:24 - extensions on phones so
427:26 - uh one organization has one phone number
427:28 - and it says please enter the extension
427:30 - of the party you'd like to talk to well
427:32 - that's kind of what ports are they're
427:33 - like here is i'm
427:34 - i'm a server and i'm connected to the
427:36 - internet please enter the extension of
427:38 - the process that you would like to talk
427:40 - to
427:41 - and so for example there might be
427:43 - processes running on various computers
427:46 - and so the email is known to hang out on
427:48 - pros port 25 or extension 25.
427:51 - log in insecure login lives on port 23.
427:54 - insecure web lives on 80 and secure web
427:57 - lives on 443 and there's a couple of
427:58 - different protocols
428:00 - say if you have your mail stored on
428:01 - gmail and you have a local
428:04 - mail client say like thunderbird or
428:05 - apple mail that talks a protocol
428:08 - to pull that mail across and those live
428:10 - on various ports so
428:11 - these ports are those extensions and
428:14 - by convention we have standards that
428:18 - tell us what to roughly expect at those
428:20 - ports
428:21 - so when you're talking to port 80 you
428:23 - expect to talk to
428:25 - a web server or an http server if you're
428:28 - talking on port 23 you expect to talk to
428:30 - a telnet server
428:31 - and on and on and on and on and so these
428:33 - are the extensions the typical
428:36 - commonly used default extensions for
428:39 - various
428:39 - network application processes that are
428:42 - serving us data
428:43 - now sometimes you'll go to a url and
428:45 - you'll see in that url
428:47 - there's a colon and a number that means
428:49 - it's a web server
428:50 - that's running on a port other than the
428:52 - official 80 or 443 port
428:56 - now in python we can talk to these
428:59 - sockets
428:59 - right we can just talk to them and it's
429:02 - really easy surprisingly easy
429:05 - we have to import socket because that's
429:07 - a library it
429:08 - comes with python but until you can use
429:11 - you can't use it in your
429:13 - program until you say it and then you
429:15 - basically in the socket library you call
429:17 - socket function
429:18 - that's what that syntax is saying
429:21 - you're making a socket now the key to a
429:23 - socket it's it's sort of like a
429:25 - an unopened file handle it's half of a
429:28 - file handle it's an
429:29 - it's an outward looking thing that's not
429:30 - yet connected these parameters you're
429:32 - just going to type them in
429:34 - this says we're going to make a socket
429:35 - that goes across the internet and it's a
429:37 - stream socket which means that
429:39 - it's a series of characters that come
429:40 - one after another rather than a series
429:42 - of blocks of text
429:43 - there's another kind that's harder to
429:45 - deal with but we're going to do this so
429:47 - this
429:47 - don't worry about this line just know
429:49 - that this creates a socket but not does
429:51 - not associate it
429:52 - the very next line we get back a socket
429:55 - a socket object
429:56 - in this variable that i'm storing in the
429:57 - variable my sock and then when you want
430:00 - to make a connection across the internet
430:02 - to the far end you say oh hey deer
430:05 - socket extend yourself across the
430:06 - internet
430:07 - make the phone call to this host data.pr
430:11 - 4e.org and on that port 80. so that's
430:14 - making the phone call this is like the
430:15 - phone number
430:16 - and this is like the phone extension so
430:18 - that's we haven't sent any data yet
430:20 - we have simply rung the phone of
430:23 - a process hopefully living on port 80.
430:25 - if it's there great
430:27 - this might blow up this one here won't
430:28 - blow up but this line here we could blow
430:30 - up
430:31 - if there's nothing sitting on that
430:32 - process it would come back and say oh
430:34 - you tried to call you got no answer
430:36 - that's a legitimate thing to happen
430:37 - maybe you don't have a network
430:38 - connection
430:39 - or maybe that service is down on that
430:41 - server or the whole server's down
430:43 - but um so i just
430:47 - it's kind of amazing that we're sitting
430:49 - here in python
430:50 - and in three lines we have uh
430:53 - probably a half a million engineers who
430:56 - built this thing called the internet all
430:57 - these protocols and all this software
430:59 - and we just made use of it in three
431:02 - lines of python in a case
431:04 - this is one of the reasons that people
431:06 - absolutely love
431:07 - python absolutely love python
431:10 - so now that we have a socket we have to
431:12 - ask ourselves
431:13 - what kind of data are we going to send
431:15 - and then what kind of data are we going
431:17 - to expect to receive
431:19 - across that socket
431:32 - [Music]
431:39 - so now we have a socket we are going to
431:41 - talk about what we're going to do with
431:43 - it right so the socket basically
431:44 - functions at this level your application
431:46 - is saying
431:47 - make me a socket which is sort of this
431:48 - end point and then the connect
431:50 - actually connects to an application on
431:52 - the far side and there's a port involved
431:54 - so that might be port 80
431:56 - and this this is the far host and that
431:58 - could be www.py4e.org or data.py4e.org
432:04 - okay and so the socket is solving this
432:07 - and and the question then is
432:10 - what are we going to send and what are
432:12 - we going to expect to get back and
432:13 - that's what we call the application
432:14 - protocol
432:15 - so we know that these two have made a
432:17 - phone call it's no different than
432:19 - making the phone call and saying you
432:20 - know hello
432:22 - right and uh everyone knows that when
432:24 - you the phone rings and you pick it up
432:26 - you're supposed to say hello
432:27 - uh and that's part of our protocol so
432:29 - who talks first right
432:31 - so the dominant protocol that we use on
432:33 - this in this
432:34 - section is the http protocol that's the
432:36 - key is hypertext
432:38 - transfer protocol it's dominant it's
432:40 - really easy to use that's why i use it
432:42 - as an example but realize that there are
432:44 - many others like
432:45 - mail and file transfer and remote login
432:47 - and all kinds of other protocols
432:49 - each is a different application protocol
432:51 - they all use sort of sockets at their
432:53 - lower level
432:54 - but then on top of that they layer the
432:55 - rules of the road
432:57 - for retrieving hypertext web pages
433:01 - and we have used these for all kinds of
433:03 - other things
433:04 - so the protocol like i said is like who
433:06 - answers the phone first what do they say
433:08 - what happens if the person doesn't
433:10 - answer right can you hear me now
433:12 - those kinds of things and it's a real
433:14 - simple thing
433:15 - and all you really need to do is so that
433:16 - both sides can agree
433:18 - you have to write a thing that's like
433:20 - the rules in the middle and say okay
433:21 - everybody
433:22 - as long as we all do this we'll be fine
433:25 - it's as simple as picking on which side
433:27 - of the road the cars can drive on
433:28 - it works fine no matter which side
433:32 - but if each car randomly picked it would
433:34 - be really kind of a mess
433:37 - so if you look at the typical url and
433:38 - this is one of the things that
433:40 - the web innovators in 1980 uh really
433:43 - invented that was wonderful and
433:45 - and it seems second nature today but in
433:47 - 1990 it was rather revolutionary in that
433:49 - these uniform resource locators
433:52 - encrypted included in themselves a
433:54 - protocol
433:55 - the host to connect to and the document
433:56 - to retrieve so this is one of the
433:59 - clever clever ideas that the web came up
434:02 - with
434:03 - because we used to have to pick a
434:05 - program like
434:06 - ftp or telnet or whatever
434:09 - smtp then we had to go to the right host
434:12 - and then we had to talk to that host a
434:13 - certain way
434:15 - so in http it's a really simple protocol
434:18 - invented in 1989 in 1990 by
434:21 - tim berners-lee and robert caillou at
434:23 - the world
434:24 - at the at cern
434:27 - and they created a protocol that we have
434:31 - grown to know and love and use for way
434:33 - more than retrieving documents
434:34 - as we'll see in the upcoming chapters so
434:37 - we're going to talk a little bit about
434:38 - what happens when you click
434:39 - on a page that has a link now there's
434:42 - all kind of fancy stuff that can go on
434:43 - but this is the basics
434:45 - and so let's just imagine for the moment
434:47 - you start sitting looking at a webpage
434:49 - doctorchuck.com page one and inside that
434:51 - there is a
434:52 - hyperlink it is a indication that says
434:55 - when you click on this page
434:57 - go to a different page and in that you
435:00 - see
435:01 - the name of the page that you're
435:02 - supposed to go to
435:05 - so we click on this link and
435:08 - that is a browser this is an application
435:11 - this is a process
435:14 - or an app that's running on your
435:16 - computer this is the browser okay
435:18 - and when the browser sees the click
435:20 - inside your computer
435:21 - then the browser makes a connection to
435:24 - port 80 on the web server
435:26 - doctorchuck.com
435:28 - and sends the request this request
435:31 - that it sends is precisely specified by
435:34 - a standard which we will see in a second
435:37 - then the web server does some magic work
435:40 - oops let's go back then the web server
435:43 - does some magic work in here
435:44 - reads some files runs some code does
435:46 - whatever constructs
435:48 - an answer to our phone call and sends it
435:51 - back
435:51 - and it sends in this case back a web
435:53 - page in the format
435:55 - of html the hypertext markup language
435:58 - which is different than http
436:00 - which is the protocol that we're
436:01 - exchanging html is the format of the
436:02 - document we're getting back
436:04 - and in this has an anchor tag href and
436:07 - the end of anchor
436:08 - tag and some highlighted text and now
436:09 - your your browser gets this back
436:12 - and then renders it according to the
436:14 - rules of html and css and
436:16 - javascript etc parses it and then makes
436:18 - a pretty web page
436:19 - and this web page happens to have a link
436:21 - back to the first page and if you click
436:22 - there
436:23 - it will do this over and over and over
436:25 - again and that is
436:26 - the request response cycle and that's
436:28 - governed by
436:29 - a series of internet standards these are
436:32 - standards that were built in the from
436:33 - the 60s 70s 80s and 90s and continue to
436:36 - this day
436:37 - by a group called the internet
436:39 - engineering task force or ietf
436:42 - the documents they produce are called
436:44 - rfcs which stands for request for
436:46 - comments the rfc the word rfc is kind of
436:51 - like a
436:51 - a sort of joke as it were it's uh it's a
436:55 - um they're they're trying to be kind of
436:57 - funny in that
436:58 - funny is not the right word they're it's
437:00 - ironic in that they're trying to say
437:02 - even so of the
437:03 - protocols of the internet that we've
437:04 - used for several decades
437:07 - they're always interested in
437:08 - improvements and that's what the rfc
437:10 - stands for and they're all named rfc
437:11 - dash whatever
437:13 - and we're going to cruise around we
437:15 - could find some various rfcs and this is
437:17 - rfc 2616.
437:19 - um there it might have been revised
437:20 - since then but this is like
437:22 - a document and this is what they look
437:24 - like hypertext transfer protocol
437:26 - version one and so you're reading this
437:28 - document you're gonna write a browser
437:29 - and you wanna talk the application
437:30 - protocol that is
437:31 - http this is one of many documents that
437:34 - helps define what http
437:36 - is so if you look down and look down
437:38 - said oh here's what a request looks like
437:40 - this is how i'm going to get us get a
437:41 - document from the server
437:43 - and you keep reading and you keep
437:44 - reading and it says
437:46 - um you're supposed to have the request
437:48 - method with a space with the request url
437:51 - the crest method with a space with the
437:53 - uri with the space the http version and
437:56 - the carriage return the line feed that's
437:57 - what it's saying
437:58 - and so it looks kind of like this right
438:01 - we say get
438:02 - the document followed by a space there's
438:04 - got to be one space you do two spaces
438:06 - and it's going to be quite frustrating
438:08 - okay
438:09 - and so this is an example that you can
438:12 - run
438:13 - on a number of
438:16 - uh on on linux operating systems and
438:20 - when macintosh operating systems with no
438:22 - changes if you
438:23 - install telnet on your windows box you
438:25 - should be able to run something like
438:26 - this as well
438:27 - so telnet is a program that we used in
438:30 - the old days
438:32 - it used to be how we logged into servers
438:34 - but because it doesn't encrypt your data
438:35 - back and forth we don't use it anymore
438:37 - but it basically is a program that can
438:39 - open a socket
438:41 - to a host on a port and i'm saying
438:44 - telnet to this host on port 80.
438:46 - and at this point i am connected and
438:48 - whatever i type on my keyboard is going
438:50 - to be sent to that server
438:51 - now if you're doing this you probably
438:52 - want to cut and paste this really fast
438:55 - because if you take too long most web
438:57 - servers will be like you're a human
438:58 - i don't talk to humans i want to talk to
439:00 - programs so remember to type this fast
439:02 - enough
439:03 - and then you have to hit enter twice so
439:06 - you have to have a blank line here
439:07 - just type this exactly as it's shown and
439:10 - then
439:11 - you will get back the server if you do
439:12 - it right the server
439:14 - and the server is properly configured
439:15 - the server will give you back some
439:17 - headers
439:19 - and this is metadata about the document
439:21 - you're going to get for example it's
439:22 - saying
439:23 - it's got text html which means that the
439:25 - remaining stuff is going to be in html
439:27 - hypertext markup language
439:28 - it has a blank line and then the actual
439:30 - document and then the connection is
439:32 - closed
439:33 - and so if you do this you can set this
439:35 - up in a way
439:36 - that you can run this on your own
439:38 - computer and in effect
439:40 - hack the through the back door a web
439:42 - server now you can't
439:43 - hack the secure web servers and mail
439:47 - servers used to be easy to hack but
439:48 - they're harder to hack now because they
439:50 - challenge you for information
439:52 - but part of the reason i'm so obsessed
439:54 - with
439:55 - the command line is this is how real
439:56 - hackers work and they know how to
439:59 - talk some of these protocols more
440:00 - directly and so we think of this
440:02 - beautiful sophisticated application
440:04 - talking to some other thing and it's all
440:06 - pretty and we got wonderful clicky
440:08 - buttons and nice usability
440:10 - but the reality is like in the matrix
440:12 - reloaded here
440:14 - the kinds of things that really talented
440:15 - hackers are doing
440:17 - use command lines and and they really
440:19 - know what's going on and that's how they
440:21 - do it they understand
440:22 - what's going on better than the
440:23 - developers of the computers that are
440:25 - trying to be resistant
440:26 - to the hacking so i come from a long
440:29 - line of using the command line and
440:30 - that's why
440:31 - i encourage you to use the command line
440:33 - in this course
440:35 - so the next thing we're going to do is
440:36 - we're going to go up into the
440:37 - application layer and instead of typing
440:39 - those commands by hand we're going to
440:41 - actually
440:42 - send them from python and write a very
440:45 - simple python web browser
440:50 - [Music]
441:06 - in this section we're going to write a
441:07 - web browser using python so we've
441:09 - already got a socket we know how to
441:10 - write a socket
441:11 - in the previous section we played with
441:13 - the protocol
441:15 - and use telnet to do it by hand and now
441:17 - we're going to do it in python
441:18 - and what you're going to find is it's
441:20 - not that hard
441:23 - so here we go so the first three lines
441:26 - of this program
441:27 - import socket make the socket remember
441:29 - the socket
441:30 - isn't really got the connection so when
441:32 - you make the socket
441:34 - again we're going to make a stream based
441:35 - socket and it's suitable for going
441:37 - across the internet
441:38 - the connection that it's like ring phone
441:40 - call
441:41 - connect to data.pr4e.org
441:44 - and port 80. and so that basically says
441:47 - extend the socket across
441:49 - and connect to a web server and so
441:51 - there's got to be a piece of software
441:53 - running
441:53 - and this will blow up if the software is
441:55 - not running okay
441:58 - so then now we've got a phone we've made
442:00 - a phone call
442:01 - now whether or not the remote side says
442:04 - hello or not
442:05 - is up to the application protocol and in
442:07 - this case the web servers say nothing
442:09 - and they wait for you to talk first so
442:11 - we're the web browser in this case
442:13 - and so we're going to talk first and we
442:15 - know what because we read the
442:16 - documentation we know that we're going
442:18 - to send get blah blah blah
442:19 - blah blah blah blah blah space blah blah
442:21 - blah blah hd one
442:22 - and then two new lines return return
442:25 - remember we had to have a blank line
442:27 - we'll talk a little bit about this
442:28 - encode it's preparing the data to go
442:30 - across the internet
442:31 - and then we say send it and so this
442:33 - basically takes that little string
442:35 - and sends it across the network and then
442:37 - this piece of software is waiting for it
442:40 - and then the software goes and reads a
442:42 - file or does some other stuff and then
442:44 - it starts sending us data back
442:46 - which we can then choose to receive so
442:49 - now i write a real simple loop
442:50 - we're going to receive the first we're
442:52 - going to receive these things 512
442:53 - characters at a time
442:54 - so we're going to loop through receiving
442:56 - 512 each time
442:58 - and if we get zero characters that means
443:01 - it's end of the stream the stream is
443:03 - closed
443:04 - and if you look at the little example
443:05 - from the previous one you saw a
443:06 - connection closed
443:08 - when the connection is closed we get an
443:09 - indication that it is
443:11 - because we ask for some data and we get
443:13 - zero data otherwise if there might be
443:15 - more data if this will wait
443:16 - if the network is slow you'll see if you
443:18 - do a print statement in here
443:19 - you will see that this will pause from
443:21 - time to time on a really slow network
443:23 - if your network is fast it'll just go
443:24 - blank and it'll be so fast it won't
443:26 - matter
443:27 - but this is how we go so this is
443:28 - basically until the entire
443:31 - uh socket until the enti the socket is
443:33 - closed
443:34 - we're going to read this data and
443:36 - because this data is coming from the
443:37 - outside world we have to decode it
443:39 - before we print it and then we're all
443:41 - done we break out of here and we close
443:43 - the socket
443:44 - so literally that is
443:47 - an entire web browser written in
443:52 - 10 lines of python and again this is why
443:55 - everybody loves python
443:57 - so this is what this program will show
443:59 - if you run
444:01 - the get is sent it looks exactly like
444:03 - doing it by hand
444:05 - you get some headers again this is
444:07 - metadata that tells you something
444:09 - about the file in this case one of the
444:11 - important things is what kind of thing
444:12 - is coming next
444:13 - there's always a blank line between as a
444:15 - break between the headers
444:16 - and the actual data the metadata and the
444:18 - data and then here is the actual text of
444:21 - that
444:21 - romeo.txt file and then it's going to
444:25 - run this
444:25 - i'm going to print data.decode all this
444:27 - is coming from the print statement
444:29 - if you're going to parse this you have
444:30 - to know that you're going to read the
444:32 - headers
444:33 - up to a blank line the blank line is
444:35 - your indication as a software developer
444:37 - that the headers have stopped and the
444:38 - actual text begins and you know the
444:40 - syntax this
444:41 - actually could be a jpeg or png
444:45 - or some kind of image right and this
444:47 - data would here look like
444:48 - so if you type this and you change that
444:50 - code to actually talk
444:52 - go retrieve a jpeg url gibberish will
444:54 - come out
444:55 - okay um and so that's exactly what you
444:58 - will see and so now you have built
445:00 - a very simple web browser
445:04 - next i want to talk a little bit about
445:05 - the what happens when
445:07 - uh characters transition out from
445:10 - outside your computer
445:11 - i mean from inside the computer in
445:13 - strings out across these sockets to
445:15 - servers
445:16 - and then back
445:31 - [Music]
445:40 - so
445:42 - okay so now we're going to write a web
445:44 - browser again in python but it's going
445:46 - to even be shorter
445:47 - than what we did before we did it in 10
445:49 - lines using sockets
445:51 - now we're going to do it in four lines
445:53 - with url lib so urlib really
445:56 - is just because the idea of opening a
445:58 - connection sending a get request sending
446:00 - the new line
446:01 - retrieving the stuff breaking the
446:02 - headers out doing all this stuff
446:04 - that's so common why not put it in a
446:06 - library to save ourselves some effort
446:08 - so here's how we do it we're going to
446:12 - read it in all right we're going to
446:14 - import this library so it's not
446:15 - part we had to import sockets before but
446:17 - we're going to import urlib now
446:19 - and so this is really quite simple it's
446:21 - like elegantly simple
446:23 - you say url lib that's a library that's
446:26 - a part of a libra module within the
446:28 - library and this is a function
446:29 - so let's call url open and then give it
446:32 - the url now that's a string which it's
446:34 - going to encode automatically for us
446:37 - so it's taken care of all kind of pretty
446:38 - things for us it does the get it does
446:40 - the encode
446:41 - look back at that previous code that's
446:42 - kind of what url is doing for us
446:44 - okay now what urlab also does is it
446:47 - makes the connection
446:49 - encodes the get request and then it
446:51 - actually retrieves
446:53 - at this moment it retrieves all the
446:54 - headers and keeps them for you for later
446:56 - you can get the headers but we're not
446:58 - going to see the headers
446:59 - and it returns to you an object that
447:01 - looks pretty much like a file handle
447:03 - because you can put this in the four
447:06 - clause after the in
447:08 - now it's going to read
447:11 - run that loop one time for every line of
447:14 - this file
447:16 - and so the lines we're going to get back
447:17 - are bytes and so we have to say decode
447:19 - it doesn't do that for us automatically
447:21 - we are going to have to decode them
447:23 - and that's because we might need to
447:24 - decode them with a particular character
447:26 - set here
447:27 - and then we're going to do our strip and
447:28 - we're going to just print this out so
447:29 - that's just
447:30 - that's like open a file read through it
447:32 - and print it this is open a url
447:34 - read through and print it and that's as
447:36 - simple as it is
447:38 - and so that's what happens this is
447:40 - romeo.txt
447:41 - and it does it prints out now the thing
447:43 - to notice is that
447:44 - there are no headers here the headers
447:46 - have been sort of consumed in the url
447:48 - open again there is a way to say hey
447:50 - give me my
447:51 - headers but for now this just going to
447:54 - eat the headers and keep them and then
447:56 - you get to read all the data
447:58 - and the loop runs and this loop runs
448:00 - four times and i'll count the four lines
448:01 - you can go ahead and run this one
448:03 - it's super easy i mean literally super
448:06 - easy
448:07 - and if you you can do anything you want
448:10 - i mean treat it like a file you just
448:11 - have to remember to do the decode bit
448:14 - when you treat it like a file and so we
448:16 - that code imported we're going to open
448:18 - it we're going to make a dictionary
448:20 - we're going to loop through we're going
448:22 - to split it we have to add the decode
448:24 - just to make sure because that line is
448:25 - bytes not
448:26 - string and then we're going to go you
448:29 - know our words
448:31 - we're going to go through the line and
448:32 - then each line we're going to bounce
448:34 - through the words the inner for loop is
448:35 - bouncing through the words and then
448:37 - we're going to go to the next line
448:38 - and then we make ourselves in this a
448:41 - dictionary and we print that dictionary
448:42 - out now this is
448:44 - this in effect other than you know
448:47 - importing this opening it differently
448:49 - and doing the decode this is exactly how
448:51 - we would process a file
448:53 - and so by using url lib you really sort
448:55 - of reduce the complexity
448:57 - of retrieving and reading network
448:59 - resources
449:00 - to the same complexity of reading and
449:03 - dealing with a file locally on your hard
449:05 - drive which is
449:06 - kind of pretty so one of the things then
449:09 - we can do
449:10 - is read web pages that was a text file
449:13 - but
449:14 - this you can get html and so here's how
449:16 - you read a web page
449:18 - and it's the same kind of code we open
449:21 - a we open a url this one happens to have
449:24 - html in it and we read through it and
449:26 - out comes the html
449:27 - remember that the headers are there but
449:30 - they've been eaten by url open for us
449:32 - and now we could write a browser that
449:34 - would parse these less thans and greater
449:36 - thans and
449:37 - make links etc etc cetera
449:41 - so if you can come up with ways to find
449:44 - these links
449:46 - you could actually write a bit of code
449:49 - that would then have a loop that would
449:50 - go up and open a new one
449:51 - pull out the links open a new one pull
449:53 - out the links open a new one
449:55 - and so you could you could make a thing
449:56 - that would retrieve a great program that
449:58 - would retrieve a pro
449:59 - a page find the links in the page and
450:02 - then retrieve those links and we'll
450:03 - actually do that before the end of the
450:04 - class
450:06 - and so python is a very popular language
450:09 - at google and i wonder if
450:10 - they're i'm going to i think it's a
450:12 - pretty safe bet
450:13 - that the first crawler that they wrote
450:15 - to crawl the web to build the index
450:18 - was python because literally that's all
450:20 - it takes to read
450:22 - web pages and um pull those web pages
450:25 - into your web crawler database
450:27 - so i don't know are those the first four
450:29 - lines ever written to google
450:30 - who knows so the next thing that we'll
450:34 - talk about
450:34 - is how you handle that html
450:37 - html is kind of yucky and nasty and so
450:40 - it's not as simple as regular
450:42 - expressions regular expressions might
450:43 - help
450:44 - string parsing and split might help but
450:47 - it's just too crazy so we'll talk a
450:48 - little bit about how to use a library
450:50 - to make html parsing a lot easier
451:05 - [Music]
451:12 - so now we're going to talk about what
451:13 - you would do with a web page once you've
451:15 - retrieved it in a python program
451:17 - call this web scraping and so web
451:20 - scraping or web spidering is the act of
451:22 - retrieving a web page extracting the
451:24 - links from those webpage making a queue
451:26 - of unretrieved links
451:27 - and then moving on and eventually the
451:29 - idea is if you had enough time energy
451:31 - bandwidth and storage
451:32 - you could find your way to most of the
451:34 - web pages on the internet that are
451:36 - pointing that point
451:37 - point to or are pointed to by other web
451:40 - pages
451:41 - and so you might have all kinds of
451:43 - reasons to scrape data you might have a
451:45 - blog that you
451:46 - uh posted you might have um who knows
451:49 - maybe you put some data in a system
451:51 - maybe uh maybe the system is being shut
451:54 - down because it's being uh
451:55 - retired you can do all kinds of things
451:58 - you could write a little thing
451:59 - i was talking to somebody who wrote a
452:01 - thing to retrieve something and check
452:03 - and then send a text when something
452:04 - changed all kinds of stuff
452:06 - or you might make yourself a search
452:07 - engine but be careful
452:10 - not all websites are happy about you
452:14 - using a robot to retrieve their content
452:16 - some of the websites as we'll see you
452:18 - demand that you log in and they track
452:19 - what you do
452:20 - and if they think you're doing something
452:21 - bad they will shut your account off
452:23 - other websites will track what you're
452:26 - doing without you logging in but then
452:27 - shut your address off
452:29 - and uh and so you have to be careful you
452:31 - should read up you should figure out
452:33 - what
452:33 - sites allow you to scrape them now i
452:35 - have some sites that i've set up that
452:37 - you can play with
452:38 - to make it so that it's a legit
452:42 - so parsing html is difficult
452:45 - you some of the simple examples you know
452:48 - you could probably write a regular
452:49 - expression
452:50 - or you know certainly some splitting and
452:52 - some
452:53 - whatever and what you would find is you
452:54 - would write that code
452:56 - and you'd retrieve your first five web
452:58 - pages and it would seem to work and then
452:59 - it would encounter some
453:00 - really weird but legitimate html
453:04 - or maybe even sort of slightly broken
453:05 - html so the web is full of broken html
453:08 - and your browsers just look at it go
453:10 - like oh wow more broken html
453:12 - but they don't put up error messages and
453:13 - so people just leave broken pages up
453:16 - but your python program is going to see
453:18 - those broken pages so what you would do
453:20 - is be like oh here's a new weird way to
453:22 - do an anchor tag i'll change my code oh
453:25 - and then run for another 100 pages like
453:28 - oh no here's a new weird way to do an
453:29 - anchor tag
453:30 - and the problem is is that you're going
453:32 - to find a lot of different ways to mess
453:34 - up an anchor tag
453:35 - and someone's already done that there's
453:37 - a software called beautiful soup
453:40 - and we have installation instructions on
453:41 - how to use it and really what it is is
453:43 - it's
453:44 - somebody just spent months figuring out
453:47 - all the nasty things that could happen
453:48 - and compensated for it and gave you a
453:50 - nice
453:52 - wrapped interface that just says look
453:54 - you give me the html and i'll give you
453:55 - back the tags okay
453:57 - and so it's called beautiful soup and so
454:00 - you have to install this
454:01 - there's a couple of ways that you can
454:03 - install this if you're good at extending
454:05 - your python you can just
454:07 - you know extend and install beautiful
454:09 - suit for all python programs
454:11 - if you can't change your your computer's
454:15 - configuration because
454:16 - you're on a school computer or you're
454:19 - using a usb stick or something
454:21 - then there's a way to download this file
454:23 - that i've created
454:24 - called bs4.zip and so what you do is you
454:26 - end up with your file called you know
454:28 - url links dot py
454:31 - and then a little folder called bs4
454:33 - which is a folder that has a bunch of
454:35 - files in it
454:36 - from the zip file and then you can run
454:39 - it and so it'll pull it in
454:41 - and you'll import from bs4 beautiful
454:43 - soup and that's either going to pull it
454:45 - in
454:45 - from the folder you do or if you have
454:48 - installed it
454:48 - using the python installer it will
454:52 - also just you don't have to put this
454:53 - file in so it's up to you
454:55 - you can either do it one of two ways so
454:58 - this is a little bit of code
455:00 - now beautiful soup is a complex uh
455:02 - library and so just because this
455:03 - looks easy you doing things in beautiful
455:06 - soup you might have to actually
455:07 - you know read a bit more to figure it
455:09 - out but we're going to just read
455:11 - this we're going to um uh
455:16 - import beautiful soup we're gonna ask
455:18 - for url right here
455:19 - we're going to take that url we're going
455:21 - to open it url open
455:23 - they give the url and read the whole
455:25 - thing that means we're not writing a
455:26 - loop we've read the whole thing that's
455:28 - okay as long as you know that the
455:30 - file's not so large and then we're going
455:33 - to pass
455:33 - the data we got back and this is going
455:35 - to be bytes but beautiful soup knows all
455:37 - about bytes and all about utf-8
455:39 - and it figures that out and you just say
455:41 - hey take that stuff i just
455:43 - got and tear it apart using html and
455:46 - give me back
455:47 - an object a soup object now the soup
455:49 - object
455:50 - is something that you can run queries
455:52 - against so it parses it it deals with
455:53 - all the imperfections and
455:55 - inconsistencies in this this html bite
455:58 - array
456:01 - and it fixes that and gives that back
456:02 - and so there's various things you can do
456:04 - and you've got to go look at the
456:04 - beautiful soup documentation
456:06 - it could be a whole class on beautiful
456:08 - soup so here's the thing you can do is
456:10 - this object
456:12 - you can sort of call it like a function
456:15 - and say hey
456:16 - give me back the anchor tags and anchor
456:18 - tags of course are the tags that say
456:19 - href
456:21 - equals blah blah blah slash a
456:24 - so all of this is an anchor tag and then
456:27 - we're going to loop through the tags
456:28 - because there could be more than one
456:30 - of those anchor tags in the file and
456:32 - then we're going to pull out that href
456:34 - and that's what this does we're going to
456:35 - loop through all the tags and print out
456:36 - the href
456:37 - so if you tell it to go to drchuck.com
456:39 - it will show you the one
456:41 - external link in doctorchuck.com
456:45 - and so i've got an assignment that sort
456:47 - of goes into that in some more detail
456:50 - but this chapter has been a whole bunch
456:53 - of interesting stuff we started with the
456:55 - tcp model and talked about sockets that
456:58 - are phone calls between computers
457:00 - and then how applications uh protocols
457:03 - are developed
457:04 - to say what we say on those phone calls
457:06 - and we've explored then
457:08 - the http protocol which is probably the
457:11 - most likely thing you're going to see
457:13 - and then we played with all this in
457:14 - python
457:15 - and saw that python is really good at
457:18 - this
457:19 - you can write extremely simple and small
457:21 - programs to do
457:22 - some extremely complex and powerful
457:24 - things
457:25 - and again that's why people like python
457:28 - is because
457:29 - it makes the complex simple
457:39 - [Music]
457:48 - so
457:51 - [Music]
457:59 - welcome to python for everybody we are
458:01 - going to be talking about
458:03 - some code if you want to download all
458:05 - the code it's right here
458:06 - uh it's all single big zip file and um
458:10 - all this sample code the one i'm going
458:12 - to talk about is urlub1.py
458:14 - it is not very exciting it's a
458:18 - short um that's what's kind of nice
458:20 - about
458:21 - python code and it's really if we go and
458:24 - take a look at the code we played with
458:26 - just previously which is socket
458:28 - the idea here is url lib is something
458:31 - that python has produced for us
458:33 - to make socket communications and http
458:36 - communications a lot better
458:37 - so socket what's it this is making
458:39 - socket calls
458:40 - underneath it but there's a library that
458:42 - makes this quite simple
458:44 - and so we have to do some imports so
458:47 - instead of importing socket we'll import
458:48 - these on we're going to create a handle
458:50 - you
458:51 - have request url open and just pass in a
458:53 - string
458:54 - so we're not encoding this we're not
458:56 - sending get command all the stuff we did
458:57 - in the previous
458:58 - sockets example is gone and then we can
459:01 - just put this as a for loop and so we're
459:03 - not using this lower level read and
459:04 - write code
459:05 - we're just using a for loop and so that
459:07 - literally is going to read
459:08 - the text line by line and the line does
459:12 - come back as an array of bytes so we
459:14 - have to do a decode but then we got a
459:15 - string
459:16 - and then we can do a strip on it so this
459:18 - is like a super simple
459:22 - uh super simple
459:26 - so there we go now the interesting thing
459:28 - is is you also don't see the headers we
459:30 - just read the contents now it turns out
459:32 - in url lib
459:33 - and we'll see this in later more complex
459:35 - application
459:36 - you can get the headers if you want you
459:38 - can get various other things
459:41 - so that's url lib a simple urlib tool
459:50 - now we can also use this in url words to
459:53 - to show you something quite interesting
459:55 - and that is if you look at this
459:58 - from right here other than the d code
460:00 - this is exactly the code we wrote
460:02 - to compute the words right so
460:05 - line and then this line.decode this is
460:07 - just a
460:08 - open something up in this case we're
460:10 - going to open a url
460:11 - or to create a dictionary we're going to
460:13 - loop through each of the lines in that
460:15 - thing
460:15 - we're going to decode them and then
460:17 - split them so once you do line.decode
460:19 - this is now
460:20 - a legitimate internal python string we
460:22 - split it we run through the words
460:24 - and run the counts and so this is
460:26 - exactly like
460:27 - code that we did before to run counts
460:30 - and so python3
460:34 - url words
460:39 - and so that gives us a dictionary which
460:41 - is the word frequency and we could do
460:43 - all kinds of crazy stuff in here you
460:45 - know with sorting and all kinds of
460:47 - things
460:48 - the important thing is once you've done
460:50 - this in this the code other than the
460:52 - need to decode these lines when you
460:53 - first get them
460:55 - um it really works just like makes a
460:58 - url lib makes urls
461:01 - function inside python very much like
461:04 - files
461:05 - so these are short and to the point and
461:07 - very simple and i hope that they were
461:09 - useful to you
461:21 - [Music]
461:30 - hello and welcome to python objects i'm
461:32 - charles severance and uh
461:34 - we're well on our way to uh to getting
461:36 - through all this material in the python
461:39 - so this lecture is in a weird place i
461:41 - even debated where to put it in the book
461:43 - um i don't really want to teach you how
461:46 - to write a lot of object-oriented
461:48 - programming but we're going to start
461:49 - using
461:50 - objects and i want to be able to use the
461:53 - terminology and so as much as anything
461:55 - this lecture is about terminology and
461:57 - understanding
461:58 - the words things like methods and method
462:01 - signatures and
462:02 - variables and inheritance and so think
462:05 - of this as a terminology
462:06 - lecture rather than a learn how to
462:07 - program or learn how to
462:09 - use this it's not something you're going
462:11 - to figure out right away
462:13 - and there'll come a time when you as a
462:15 - programmer really want to start using
462:16 - object-oriented programming it's really
462:17 - a powerful and wonderful
462:19 - technique but i think it's too early as
462:22 - a beginning programmer to really say oh
462:24 - let's write a bunch of objects so
462:26 - just relax and enjoy and learn this
462:30 - material
462:31 - and think of it as sort of a theoretical
462:33 - thing rather than
462:34 - you know a how to program thing
462:39 - and so part of this is we're going to
462:41 - start reading data structures
462:43 - and i mean data uh on how to use all
462:46 - these
462:47 - uh libraries etc we're gonna see the
462:48 - word objects right
462:50 - and then we're gonna start hearing them
462:52 - and i want you to be able to read the
462:53 - python documentation so that you
462:55 - understand what's going on
462:56 - and so you know the word object should
462:59 - make sense to you even though you're not
463:00 - going to write
463:01 - a lot of object-oriented programming and
463:03 - so page upon page upon page
463:06 - database stuff which we're going to talk
463:07 - about soon is uh
463:09 - uses objects all over the place and the
463:11 - beautiful soup talks about uses objects
463:14 - we've kind of been using them and i've
463:16 - been waving my hands and i use the word
463:18 - method without defining it
463:19 - but now it's really time to define it
463:22 - and go
463:23 - go to it so um i want to review
463:27 - uh from the very beginning what we think
463:29 - of as a program
463:31 - so the classic program my favorite
463:32 - little minimum program is our little
463:35 - elevator floor converter with uh which
463:37 - converts from european
463:38 - elevator floors to united states
463:40 - elevator floors and the key to this is
463:42 - that
463:43 - it's input processing and output and
463:46 - this
463:46 - is a good way to model any program
463:50 - and in that process we've got variables
463:53 - and we've got
463:54 - logic we've got algorithms we've got
463:56 - loops that we write we've got
463:57 - all kinds of things and we construct a
463:59 - series of steps
464:01 - to achieve some goal
464:05 - in object oriented and frankly you've
464:07 - been using object all along
464:09 - the program has lots of objects and
464:12 - we're sort of putting stuff into these
464:13 - objects taking stuff out of one object
464:15 - and putting it into another object
464:17 - and you've actually been doing this all
464:18 - along as soon as you're looking at
464:20 - dictionaries and lists
464:21 - you're doing objects and so it's
464:24 - it an object is is quite a little thing
464:27 - it's sort of its own little space inside
464:29 - of a program
464:30 - that contains uh code and data
464:34 - and so we're working together all these
464:36 - objects are now working together it's a
464:38 - bit of self-contained code and data
464:40 - and it is one way to take a very complex
464:43 - problem
464:44 - and make it easier by breaking it into
464:47 - separate
464:47 - things that can be engineered and
464:49 - developed separately so
464:50 - you've been using string objects or
464:52 - maybe you'd use beautiful soup or
464:53 - something
464:54 - these are powerful capabilities and if
464:56 - you had to look at all of them
464:58 - it's just hey here's a thing use this
464:59 - object it'll do these things for you and
465:02 - there's lots of details inside of it
465:03 - just don't look at it don't worry about
465:05 - it
465:06 - and so there's boundaries that things
465:07 - that you can use things that you can
465:09 - look at
465:10 - and things that really you don't bother
465:11 - looking at you go read the documentation
465:13 - and use it
465:14 - and away it goes but then someone had to
465:16 - write that and so they
465:18 - built an object so we're going to do is
465:19 - look a little bit under the covers of
465:21 - what it takes to build some of these
465:23 - objects
465:28 - and so if we think of this program that
465:30 - originally just sort of did processing
465:32 - we can think of it as having some kind
465:34 - of an input right
465:35 - coming into our program and we have a
465:37 - string object a dictionary object maybe
465:40 - eventually some objects like a database
465:41 - object or an object that we eventually
465:43 - define
465:44 - and you can think of us we're receiving
465:46 - data it comes in an object which is a
465:48 - string object we
465:49 - start putting the strings in
465:50 - dictionaries and do whatever we pull out
465:53 - a list of them and
465:54 - and so you can think of data as moving
465:56 - between these objects and like i say
465:58 - even strings in the first week first
466:01 - lecture
466:02 - first week first everything we um
466:05 - we were using objects and we've been
466:07 - using them all along
466:08 - and so you can think of every string and
466:11 - every dictionary as
466:12 - a little program all by itself that has
466:15 - a bit of code
466:16 - and a bit of data um and so a string has
466:19 - the data which includes all the
466:21 - characters that make up the string but
466:22 - then there is a method called
466:24 - upper that'll does uppercase or r strip
466:27 - that strips off the right a white space
466:28 - from the right
466:29 - and so it's it's like they're almost
466:31 - little programs that have inputs and
466:32 - outputs themselves
466:34 - and we can make lots of them and there's
466:35 - lots of cooperating objects
466:37 - that make up an application
466:41 - and one of the nice things about the
466:42 - object-oriented pattern is that
466:45 - they form boundaries and within the
466:48 - boundary if you're inside the object you
466:50 - can
466:51 - say look i'm going to build you a string
466:52 - object or a database object or a
466:54 - beautiful soup object
466:55 - and i'm going to build this capability
466:57 - and i'm going to give it to you in the
466:58 - form of an interface
466:59 - and i'm not really going to care how you
467:01 - use it and so we have this
467:02 - sort of visibility wall where i'm going
467:05 - to make an object and i'm going to let
467:06 - you use it
467:07 - and the maker of the object doesn't
467:09 - necessarily have to know every single
467:10 - thing
467:11 - about the use of that object but so just
467:14 - like
467:15 - inside the object they don't have to
467:16 - worry about what you're doing with the
467:17 - object
467:18 - outside of it when you're outside the
467:19 - object you don't have to worry about
467:21 - what's going on
467:21 - inside of it we as the user of the
467:24 - object we talk to its interface and we
467:26 - get things from it and give things to it
467:27 - and
467:28 - use functionality within that object but
467:30 - we don't have to look inside of this we
467:32 - can just say oh it's a nice little
467:33 - magical thing
467:34 - we read the documentation we read a web
467:36 - page and it told us to do this this and
467:37 - this
467:38 - and away you go and so it is a it is
467:40 - sort of this isolation boundary
467:42 - that works both for the programmer who's
467:45 - writing the object
467:46 - and the programmer who's using the
467:48 - object and so it's a
467:50 - it's a very nice pattern um and
467:53 - so you'll see how we're going to build
467:55 - code and we're going to group it
467:56 - together and then we're going to be
467:57 - using it sort of
467:58 - as a big blob of stuff
468:02 - so some definitions in this space words
468:05 - that i want you to understand
468:08 - um when we're going to create one of
468:10 - these
468:11 - things one of these objects instances
468:14 - that has some data okay so now that
468:17 - we've gotten through the definitions
468:19 - let's work
468:20 - into some sample code but hey look at
468:22 - this we've got ourselves a cookie cutter
468:24 - and some cookies
468:26 - so remember that a class
468:29 - is a template it's not the actual thing
468:32 - an
468:32 - object is an instance of a class so you
468:36 - have to take the class and do something
468:38 - to make the object and actually you can
468:41 - see here some
468:42 - other classes there's clearly a sort of
468:43 - a snowflake class and a
468:45 - gingerbread man class that's an object
468:47 - object object
468:48 - somewhere out here there is a snowflake
468:51 - class
468:52 - and a gingerbread class but we got a
468:55 - snowman object and a snowman object and
468:57 - a snowman class so
468:59 - class is the template
469:03 - object is the instance so here's a bit
469:06 - of python code so let's take a look at
469:07 - what we got here
469:09 - class is a new reserved word kind of
469:11 - like def we have the name of the class
469:13 - that is a name that we choose we're
469:15 - gonna that's the name by which we'll
469:17 - refer to this class for the rest of this
469:18 - program
469:20 - and it has a colon at the end of it and
469:22 - which means it starts an indented block
469:24 - which ends when we de-indent
469:26 - inside the class there are generally two
469:28 - things there is some data and this just
469:29 - looks like an assignment state now i'm
469:31 - going to talk a little bit about
469:32 - object life cycle and what we mean by
469:33 - object life cycle is the act of creating
469:36 - and destroying these objects and i've
469:37 - been using this term
469:39 - constructor already and so
469:42 - when we declare a variable whether it's
469:44 - a string or a dictionary or a party
469:46 - animal where we create them and then
469:48 - they're discarded
469:49 - and there's all this dynamic memory that
469:50 - comes and goes and
469:52 - we as the writers of objects have the
469:55 - ability to
469:56 - insert ourselves at the moment of object
469:58 - creation
469:59 - and at the moment of object destruction
470:01 - and we make
470:02 - special functions that we call the
470:04 - constructor the object constructor or
470:06 - the class constructor
470:07 - and the destructor and we don't actually
470:09 - explicitly call them
470:11 - they're called automatically by the uh
470:13 - by python on our behalf
470:15 - and so the constructor is uh much more
470:18 - commonly used it's used to set up any
470:20 - initial values of variables if necessary
470:22 - uh etc destructors are we'll cover them
470:25 - but they're
470:26 - they're used very rarely so here's a bit
470:30 - of code that we've got
470:32 - it's our party animal and a lot of it is
470:33 - the same as what we've been doing so far
470:36 - so we have this variable x and the
470:39 - constructor has
470:40 - a special name underscore underscore
470:42 - init underscore
470:43 - again we pass in the instance of the
470:46 - object
470:47 - self and in this one all we're going to
470:48 - do is print out that you're constructed
470:51 - and here's this code that we've had
470:52 - before and now we have underscore
470:53 - underscore
470:54 - dell and then we pass in self and we'll
470:56 - just print out
470:58 - that we're being destructed and what the
470:59 - current value of
471:01 - x is for that particular instance
471:06 - so let's go ahead and run this um
471:09 - and so again this doesn't really do any
471:11 - code up to here that just defines party
471:13 - animal but this is the constructing of
471:15 - it
471:16 - and basically that says oh and it really
471:18 - kind of creates these variables
471:20 - and then it also runs the constructor
471:22 - and so in this case
471:24 - this line right here is causing the i am
471:26 - constructed
471:27 - message to come out then we do and party
471:30 - a and party
471:31 - and that says you know one and two and
471:34 - here's an interesting thing we're
471:36 - actually going to destroy this variable
471:38 - by throwing away and no longer points at
471:41 - that object
471:42 - and's going to point to 42. so we're
471:44 - going to sort of overwrite a n and put
471:46 - 42 in it
471:47 - and at that point python's like oh this
471:50 - whole little object that i just created
471:52 - somewhere it's out here it's vaporizing
471:55 - it
471:55 - and throwing it away and so before this
471:59 - line completes
472:00 - it actually calls our destructor on our
472:02 - behalf and so that message
472:04 - comes out so we are allowed as the
472:07 - builder of these objects to add these
472:09 - little
472:09 - chunks of code that says i want to be
472:11 - involved at the moment this object is
472:13 - created
472:13 - and i want to be involved at the moment
472:15 - that this object is destroyed
472:17 - now in this last line a n is no longer a
472:20 - party animal
472:21 - a n is now an integer it's got a 42 in
472:25 - it
472:25 - it's gone it's been created it was used
472:27 - and then it was destroyed
472:28 - okay so you've got to be careful if you
472:30 - overwrite something you kind of sort of
472:32 - throw the object away
472:35 - so the constructor is a special block of
472:37 - code
472:38 - that's called when the object is created
472:39 - to set the object up
472:43 - so we can create lots of instances
472:45 - everything we've done so far
472:47 - is we make a class and then we create
472:49 - one instance one object
472:51 - and each of these objects ends up being
472:53 - stored in its own variable we have a
472:55 - variable a
472:55 - n and we've been using it but the more
472:57 - interesting thing begins to happen when
472:59 - we have
473:00 - multiple instances of the same class
473:02 - sitting in different variables
473:04 - and it has its own copy of the instance
473:06 - variables so let's take a look at this
473:09 - so this code here i've taken out the
473:12 - just i've taken out the destructor
473:15 - and it shows a little bit more
473:16 - information so now we're going to put
473:18 - two variables in here we're going to
473:19 - have a
473:19 - current score or whatever and a name and
473:22 - we're going to start it out as blank
473:24 - and this time we're going to add a
473:27 - parameter onto the constructor
473:29 - and so the self comes in sort of
473:30 - automatically
473:32 - as the object is being constructed but
473:34 - if we put a parameter on the constructor
473:36 - call which is this party animal call
473:38 - then this comes in as the z variable
473:42 - and so self is the object itself and
473:45 - z this first parameter is whatever
473:47 - parameter we put here everything we've
473:48 - done so far has no parameter here
473:50 - but now we have a parameter here and
473:52 - then that means that when we call this
473:54 - constructor
473:56 - this line of code comes and then name is
473:58 - no longer blank
473:59 - name is going to be sally in this
474:01 - particular thing and then i'll say oh
474:03 - self.name which will be sally was been
474:05 - constructed
474:06 - and so then then we have this and that
474:09 - object is now constructed and we put it
474:12 - in the variable s
474:13 - and then we call the party method on
474:14 - that and we construct a different one
474:16 - and so this time it calls
474:18 - and z is jim and
474:21 - we basically have a
474:24 - oops another copy of this and so
474:28 - this is how it's going to look right as
474:30 - as it runs down here
474:33 - as it runs down here when this is called
474:36 - it makes one instance and stores that
474:40 - in the variable s and there's a variable
474:42 - x in there there's a name
474:43 - in there there's an init method in party
474:45 - and that's all in here right all that
474:47 - stuff is in here
474:48 - and now we say let's make and that's
474:50 - going to have a sally in there
474:54 - find sally in there
474:57 - and then we're going to do another
474:59 - constructor and so it's going to make a
475:00 - whole new thing and it's going to store
475:02 - that in j
475:03 - and this one's going to have jim in it
475:06 - on s party then this turns into a one
475:08 - and then we're gonna
475:09 - call j party that turns that into a one
475:12 - and then s party will cause this to be a
475:14 - two
475:15 - okay and so what happens is we have now
475:18 - two
475:19 - objects one in the variable s and one in
475:21 - the variable j
475:22 - and they have separate copies of their
475:24 - instance variables these are the
475:26 - instance variables or the
475:28 - object fields or whatever but they're
475:29 - the variables but the key is is that
475:31 - every time we
475:32 - do a new construction it duplicates this
475:36 - and there's another copy of it
475:37 - so there's an x within s so s dot
475:40 - x is this variable and j dot x
475:44 - is that variable okay
475:48 - so the next thing we'll talk about is
475:50 - inheritance and that's the idea of
475:51 - taking
475:52 - one class and extending it to make
475:54 - something new
475:56 - so the last topic we'll talk talk about
475:58 - here in object orientation
475:59 - is the notion of inheritance and this is
476:02 - a form
476:03 - of code reuse and it's one of the more
476:05 - advanced
476:06 - aspects of object-oriented programming
476:08 - so just kind of understand what it is at
476:10 - a high level and then you know where to
476:11 - come back to
476:12 - when you need to learn a bit more about
476:15 - inheritance
476:16 - so the idea is instead of making a new
476:18 - class from scratch
476:20 - we actually make a new class by starting
476:22 - with an existing class we are
476:23 - extending it or another word for this is
476:26 - subclassing
476:27 - and it's sort of a situation where
476:30 - you're like i've got this code and i've
476:32 - got this data and i just need to add a
476:33 - few things to it
476:35 - and then i'll have a whole new thing and
476:37 - as you design
476:38 - objects and what we call object
476:39 - hierarchies you often do this
476:42 - and it's a form of sort of real clever
476:44 - code reuse
476:45 - um but again don't necessarily think
476:49 - that you're supposed to know
476:50 - when to use this or why to use this is
476:53 - right now
476:53 - it's just terminology okay just
476:55 - terminology
476:56 - we have what call these as parent child
476:58 - relationships the original class is
477:00 - called a parent
477:00 - and the new class is called the child
477:02 - class so
477:04 - subclasses are another word for this you
477:07 - have a class and then you subclass it
477:09 - i think extending inheriting and parent
477:11 - child are probably better ways of
477:13 - expressing it
477:14 - than subclassing so here's a bit of code
477:16 - let's take a look at this
477:18 - um this is this code's unchanged it's
477:21 - the party animal code that we've been
477:22 - saying all along
477:23 - um it's the one that you we we construct
477:26 - and put a name in
477:27 - and now what we're going to do is extend
477:28 - it and so you'll notice that this code
477:30 - down here is the part that's doing the
477:32 - extending
477:33 - so we're making a new class football fan
477:36 - and by putting in parentheses before the
477:37 - colon party animal
477:39 - that says football fan inherits
477:42 - everything that is party animal meaning
477:44 - the x the name the init the party all
477:47 - those methods
477:48 - and data are sitting there and now we're
477:50 - going to add a new variable so football
477:52 - fan has in addition to all those other
477:54 - variables has points
477:55 - and it has a touchdown method and you
477:58 - know
477:59 - point uh self points is added you know
478:01 - to we add seven of the points
478:03 - and then we call the party and when that
478:05 - does that so this is calling
478:07 - this method because football fan
478:09 - includes
478:10 - x name and party and init and everything
478:12 - and all this stuff
478:13 - this constructor so so this football fan
478:17 - is really an amalgamation of all these
478:19 - things together
478:20 - party animal is just this stuff right
478:24 - but and so we still have two classes we
478:25 - don't just have one we didn't erase the
478:27 - party animal class
478:29 - and so if we take a look at the code
478:30 - that we can run here we can say oh okay
478:32 - let's make a party animal sally and so
478:34 - that constructs
478:36 - a an object like this and then stores
478:38 - that in
478:39 - s and um with an x starting out zero
478:43 - and and then we call s party oops better
478:46 - change that color
478:48 - um starts out at zero and then we call
478:50 - the party method and that changes it to
478:52 - one
478:53 - okay and so this is this bit of code
478:56 - it's as if this part doesn't matter at
478:57 - all because
478:58 - it is a party animal it's not a football
479:00 - fan but now if we take a look at
479:03 - this code down here
479:07 - take this code down here we're going to
479:09 - construct a football fan
479:11 - and pass in jim but football fan has no
479:14 - underscore underscore in it
479:15 - so that actually uses the underscore
479:17 - knit from party animal because
479:20 - we extended party animal to make
479:21 - football fans so we inherited
479:23 - all of the good that was in there so
479:25 - there it's going to
479:26 - make a name a variable x which is going
479:28 - to start at 0 a variable name is going
479:30 - to have jim in it
479:31 - and a variable points it's going to have
479:33 - a 0 in it
479:34 - so this j variable has more things in it
479:38 - than the s variable has and so we can
479:41 - call
479:42 - the j party and if we call j party that
479:46 - goes here and adds one to x all right so
479:48 - that adds one to x
479:50 - and then we call j touchdown well that
479:52 - comes down in here
479:54 - and adds seven to the points right
479:57 - and then calls party within us and so so
480:00 - self.party is
480:01 - the current object ie self and j are the
480:04 - same thing
480:05 - right self.party and then it goes up
480:08 - here
480:08 - and passes self in and it adds one to
480:11 - the
480:11 - x in this case of this j variable so
480:14 - this becomes
480:15 - two and that's where it prints out it
480:18 - prints out
480:19 - you know seven and two and away you go
480:22 - and so
480:23 - it's a way for you to kind of take all
480:25 - this stuff and stuff it
480:27 - into an a class by making a new class
480:30 - and just
480:30 - add the extending bits the bits that are
480:33 - in addition to the other stuff
480:35 - so like i said inheritance is a
480:38 - powerful and wonderful concept it's a
480:40 - form of
480:42 - excellent form of reuse but
480:45 - basically the whole purpose of this
480:48 - lecture was so that i could in the
480:50 - future just use these words and you
480:52 - would understand them as compared to
480:54 - i just want to say method and i've been
480:55 - saying method all along this high time
480:57 - that i defined it
480:58 - so let's just review one last time class
481:01 - is a template
481:03 - it is not actually a thing it is a shape
481:05 - of a thing
481:06 - and we define it and say when we make
481:08 - one of these things it's going to have
481:10 - these variables and it's going to have
481:11 - these methods
481:12 - in it attributes variables within a
481:14 - class
481:15 - a method is a function that's inside of
481:17 - a class
481:18 - object is once we construct a class we
481:21 - get back an object and so
481:23 - object here is the snowmen cookies
481:28 - class is the snowman cookie cutter and a
481:31 - constructor
481:32 - is a bit of code that sets up our object
481:36 - our instance when it first is created
481:39 - an inheritance is this ability to create
481:42 - a new class but take all
481:44 - and import and affect all the
481:45 - capabilities of
481:47 - an existing class so
481:51 - oriented is awesome for the rest of this
481:54 - class we're not going to write any
481:55 - object code we're not going to use
481:56 - class at all but we're going to use
481:58 - objects and literally you've been using
481:59 - objects from the beginning of this
482:01 - course
482:01 - as soon as you said print whoops
482:05 - as you as soon as you said you know x
482:08 - equals
482:08 - hi that's an object and as soon as you
482:12 - said
482:12 - x dot upper you were calling a method
482:16 - right you've been calling a method all
482:18 - along when you're doing something
482:20 - like f h equals open
482:24 - this thing you're getting back that's an
482:26 - object and then you do
482:28 - fh dot read or whatever you're calling a
482:31 - method in the dot operator so you've
482:33 - been using objects all
482:34 - along i know i'm just finally explaining
482:36 - to you
482:37 - when i say call the read method or call
482:40 - the upper method
482:40 - or what's this little dot and why is
482:42 - that there so again it's time for us to
482:45 - understand that but you will it will
482:48 - take you a long time before you
482:50 - encounter a problem
482:51 - that's large enough where as part of
482:53 - your solution
482:54 - you're going to make a new object but
482:56 - when you do it's really a powerful thing
482:58 - i mean
483:00 - it's a really bad idea for me as a
483:02 - teacher say oh write a bunch of objects
483:04 - it's like it's it's premature for that
483:06 - it's later is when um you will actually
483:09 - learn how to use objects and you'll be
483:10 - like oh thank heaven that these objects
483:12 - are here
483:13 - okay so uh that's all for now uh thanks
483:17 - for listening see on the net
483:32 - [Music]
483:34 - so now we're going to take a look at how
483:35 - we deal with more than one table
483:37 - multiple tables because the real power
483:39 - of sql and the power of database
483:41 - performance has to do with when you
483:43 - start connecting tables together if you
483:44 - go back to that original mathematics
483:46 - it models data at the intersections
483:48 - between the row and the columns
483:49 - and these intersections are the magical
483:52 - bits
483:54 - and so breaking an application to use
483:56 - multiple tables
483:57 - is an art form it takes a while there
484:00 - are some simple basic things that you
484:02 - can
484:02 - learn and we'll teach you here and so
484:05 - it's not too hard to learn the basics
484:06 - but then
484:07 - it's much more complex to be super uh
484:10 - skilled at it and and in general
484:12 - advanced databases in my mind it's hard
484:15 - to teach advanced databases because
484:17 - they're always so
484:19 - contextually grounded uh you know
484:21 - something like a twitter
484:23 - or uh or google the databases are so
484:26 - specialized by the time you make
484:28 - everyone can do small to medium-sized
484:30 - databases using the basic techniques but
484:32 - at some point once you
484:33 - escape medium-sized databases you end up
484:35 - in these sort of narrow things and
484:37 - optimize each database very separately
484:39 - and so i just tell people you know learn
484:42 - the basics really really well
484:43 - write programs and then go do real work
484:47 - but database design is the act of
484:50 - figuring out
484:54 - the data that your application is going
484:55 - to want to store and spreading that
484:57 - across multiple tools but we don't just
484:59 - do it randomly we do it very much
485:01 - cleverly and if you look at a data model
485:04 - this is what it looks like and what
485:05 - we're showing here in this data model
485:08 - is we are showing uh five tables
485:12 - and this is a a kind of a calendar kind
485:14 - of a system and we're seeing
485:15 - the the columns that are in each of the
485:17 - tables and then we're seeing the
485:18 - relationships between the tables
485:21 - and even in these relationships there's
485:22 - kind of a little bit of code
485:24 - and when you have an arrow that looks
485:26 - like that there's many of those to one
485:27 - and this is a
485:28 - many to one relationship many to one
485:31 - relationship we'll talk
485:32 - all about that stuff but if you go into
485:34 - an organization and you have a
485:36 - really large and complex data
485:38 - application they might have something
485:39 - printed out on the wall that looks about
485:41 - like this
485:42 - which shows the database tables and
485:44 - connections etc etc
485:45 - and they might say oh your job is to go
485:47 - down and then this little corner add one
485:49 - column
485:50 - field there and then do this and then
485:52 - connect it with this thing over there
485:53 - and then make a
485:54 - a screen that shows all these things
485:55 - that pulls from this table this table
485:57 - this table in that table and that's your
486:00 - job if you're a programmer on a
486:02 - large software development project these
486:04 - database models become
486:06 - sort of like the core backbone of the
486:08 - knowledge that applications are
486:11 - uh managing and using so
486:14 - the idea is is that you take your
486:16 - application we're going to start really
486:17 - simple we're going to take your
486:18 - application
486:19 - and you have to draw a picture and the
486:21 - basic rule
486:22 - and literally you could spend course
486:25 - upon course learning about database
486:26 - normalization but i'm going to i'm going
486:29 - to distill it into one basic rule and
486:30 - that is
486:31 - never put the strength same string data
486:34 - in
486:34 - twice so my name charles severance
486:38 - if i build a database well you should go
486:40 - into that database and you'd say okay
486:41 - the words charles severance which is the
486:43 - name of a person
486:44 - me in that database only shows up once
486:47 - and what we do instead is we connect
486:50 - things together and model
486:51 - my name as a connection to the record
486:53 - that has my actual name in it
486:55 - rather than putting my name all these
486:56 - other places so the idea is to pull
486:59 - duplicate data out and make only one
487:01 - copy of it so there is the
487:02 - there is the users and then there's the
487:05 - user's name
487:05 - and the user name shows up only here and
487:08 - everything else points
487:10 - to the particular user entry so that's
487:13 - the idea
487:14 - and so here is our first application we
487:17 - are
487:18 - working as a startup we just quit all of
487:21 - our jobs and we are going to build a
487:23 - music management application i mean what
487:25 - a great idea don't you think that'll be
487:27 - quite successful
487:28 - and so we have mocked up and we have
487:30 - figured out that this is what our music
487:32 - management application we want to
487:34 - track people's tracks know something
487:37 - about what artists and albums and genre
487:39 - they are and
487:40 - have ratings and how many times we've
487:41 - played them and how long they are well
487:43 - that's that's the data that our
487:44 - application needs to represent
487:46 - and we've done testing on this and and
487:48 - wireframes and
487:49 - everyone loves this a great user
487:51 - interface and so this is
487:53 - how it's got to look but we're going to
487:55 - have billions and billions of tracks in
487:57 - these things and so we want to come up
487:58 - with an efficient
487:59 - database to handle this and so we're
488:02 - going to take a look at this and look at
488:03 - each of the columns
488:04 - and we're going to ask ourselves is this
488:07 - column
488:08 - part of one of our existing objects
488:11 - our existing tables or is this gotta
488:13 - this object
488:15 - have to create a new table and then once
488:17 - we've defined those
488:18 - different objects we connect the tables
488:20 - together and model the connections
488:22 - now a little trick to kind of make it a
488:24 - little easier on ourselves is we can
488:26 - look in these columns
488:27 - and look in the columns that have
488:29 - duplicate information vertically that
488:30 - string information
488:32 - so rating is just a number like zero
488:34 - through five so we don't worry too much
488:36 - about integers and numbers and that kind
488:38 - of stuff or
488:39 - or whatever but we do look for strings
488:40 - and the problem here is we got like
488:42 - these strings occur many times and so
488:45 - these are the problems and so
488:46 - we we have to put these things where
488:48 - there is replication of string data
488:50 - kind of in the vertical dimension we
488:52 - have to put those in
488:54 - different tables and so we'll start out
488:57 - now the first question that you have to
488:58 - ask yourself when you're going to draw
489:00 - this picture of how this data is in
489:02 - multiple tables and connect it together
489:04 - is what is the first one that you're
489:06 - going to write down
489:07 - and this is an interesting debate and
489:09 - often people are sitting in a conference
489:10 - room and
489:10 - people who have experience kind of know
489:12 - what to do usually if it's a
489:14 - multi-user system like a learning
489:16 - management system
489:18 - uh the users might be the central
489:19 - concept perhaps the courses might be the
489:21 - central concept
489:22 - this is a single user system and so you
489:25 - can think well
489:26 - what is really this application about
489:28 - it's not about people it's one person
489:30 - but it is about tracks and so
489:34 - we can say okay here it will take the
489:37 - the track
489:38 - is probably the sort of most
489:39 - foundational notion
489:41 - of this application and then we can take
489:44 - and say okay now that we've decided that
489:46 - tracks are the foundational notion which
489:49 - of these columns are simply an attribute
489:52 - of the track not really
489:54 - and the cheap the cheating way in the
489:57 - easy way and this particular one is like
489:58 - these numbers
489:59 - all these numbers like this number and
490:01 - these numbers not that one
490:04 - they just go along with track and so
490:06 - we'll put that in we've got the track
490:07 - title
490:08 - rating length and count and we put that
490:11 - in
490:13 - and then the question is we've got the
490:15 - remaining things art we've got the
490:16 - artist we've got the album
490:18 - and we've got the genre and so we can
490:20 - say okay well we can't
490:22 - we've got some vertical duplication so
490:24 - we're going to say okay this track
490:25 - probably
490:26 - belongs to an album so let's pull out
490:29 - the album
490:30 - into its own table
490:33 - oops pull the album out into its own
490:37 - table
490:38 - and so
490:51 - pull the album out into its own table
490:54 - and so that pulls that out and then you
490:55 - say okay what would be the next thing
490:57 - that we're going to pull out
490:58 - so we pulled out the track we've got
491:00 - this taken care of just taking care of
491:01 - that taken now we've got the
491:03 - album well albums belong to artists so
491:06 - let's take out
491:07 - the artist and then
491:10 - we'll pick where the genre belongs and
491:12 - we'll just say that the genre belongs to
491:13 - the track and so because
491:15 - there might be albums with more than one
491:17 - different genre so each album is not
491:19 - necessarily a rock album it could have a
491:20 - rock track and a country track etc etc
491:22 - etc
491:23 - and so now what we've got is we've got
491:25 - four tables right we've got a track
491:27 - table we've got an album table an artist
491:28 - table and a genre table and
491:30 - if we sort of double check all of the
491:32 - columns that had vertical duplication in
491:33 - them
491:34 - now have their own little table
491:38 - so we can we can eliminate the next
491:40 - thing we'll do is to show
491:41 - how we're going to eliminate this
491:44 - vertical data
491:45 - vertical data replication um by showing
491:48 - how you represent these relationships
491:50 - that we just created
491:51 - inside of the database
491:58 - [Music]
492:06 - [Music]
492:17 - so now we're going to make a database
492:19 - we're going to use sqlite browser
492:20 - hopefully you've downloaded it so you
492:22 - can follow along
492:23 - and i've got this handout this basic
492:25 - database handout that saves you from
492:27 - having to type all these things so bring
492:29 - that up in your web browser
492:32 - and so that gives you all of the
492:34 - commands that i'm going to type now
492:36 - um and so you could pull them out of the
492:38 - either the webpage of the
492:40 - um you can pull them out of
492:44 - the slides or you can pull them out of
492:46 - that
492:47 - out of that so i'm going to bring up the
492:50 - database browser here
492:53 - database browser now the thing that's
492:55 - going to happen you'll see this happen
492:56 - on my desktop i'm going to make a new
492:58 - database
492:59 - and you have to store it somewhere and
493:01 - so i'm going to put it on my desktop and
493:02 - i'm going to call it
493:04 - py4e fun
493:09 - and so we should see a new file on my
493:12 - database
493:12 - right there py4efund now that's a file
493:15 - that you don't want to edit with a text
493:17 - editor or anything like that this is
493:20 - um a database that you're this
493:23 - this is a file that's to be read by
493:25 - sqlite browser and nothing else
493:27 - okay so we're going to create a table
493:29 - and i'm going to make a table called
493:31 - users
493:33 - with a column called name that's a text
493:35 - and a column called emails so i'm
493:37 - it's already asking me to make a table
493:39 - i'm going to call this users
493:41 - and i'm going to add a field that is
493:43 - called name
493:45 - and i'm going to add a text and i'm
493:48 - going to add another field called
493:49 - email and i'm going to make that be text
493:52 - now the key thing here is as we are
493:54 - in effect making columns and rendering
493:57 - an opinion as to exactly what the column
493:59 - is supposed to be used
494:00 - for and we're not allowed to violate
494:02 - that it's not like oh we'll do whatever
494:03 - you want
494:04 - because the database is optimizing its
494:06 - storage based on
494:07 - our in a contract that we're effectively
494:10 - making contract
494:10 - ourselves we could make these columns
494:12 - anything we wanted
494:14 - but we're just going to we have to we're
494:16 - going to contract with ourselves
494:18 - and you can see it's kind of small here
494:19 - you can see there's a create table and
494:21 - that's on the slide
494:22 - and that's the the the sql way of doing
494:25 - that this user interface is just helping
494:27 - us write sql
494:29 - so now i'm going to just say okay and if
494:31 - you take a look
494:33 - you can see that i now have
494:36 - a table users and i can look at my
494:38 - database structure
494:40 - the table users and away we go and so
494:43 - so now that's that is creating it and
494:45 - like i said here in the slides
494:47 - is the create statement or um on the web
494:50 - page there's the create statement that
494:52 - could have done it
494:53 - now we can insert some data
494:57 - um let's add a new record to this
495:01 - database users
495:03 - and we'll call this guy uh
495:06 - name charles
495:10 - c sev at umish.edu
495:13 - so now we have a record so it's kind of
495:15 - like a database a
495:16 - spreadsheet now that's not the sql way
495:19 - to do it there's sql sorted going on in
495:21 - the background
495:22 - but if we really want to do this using
495:23 - sql we're going to use
495:26 - the insert statement
495:30 - and the insert statement looks like this
495:37 - the sql syntax sometimes has extra words
495:40 - insert into is actually
495:41 - an s2 sql keywords the name of table
495:45 - the columns and then the word values and
495:48 - then
495:48 - one to one correspondence between the
495:51 - values
495:52 - and in parentheses so it looks kind of
495:53 - like a a tuple
495:55 - in uh python but we're nowhere near
495:56 - python right now
495:58 - okay and so that's what we're going to
496:00 - do
496:01 - and so i'm going to grab this
496:05 - kristin and i'm going to go over here to
496:08 - my sqlite browser
496:10 - and say execute sql so now i can say
496:14 - paste that in and then hit this little
496:16 - run button
496:17 - and that's going to submit the sql to
496:19 - sqlite and then
496:21 - update that file and it says query
496:23 - executed successfully
496:25 - and away we go so if i go back now and i
496:28 - look at the data
496:29 - i see that there's two two things in
496:31 - here and now i can actually insert all
496:33 - the rest of these let's go
496:34 - back to my little bit of stuff here
496:36 - let's put all these other
496:38 - rows in it turns out that
496:42 - if i go into the execute sql and i want
496:45 - to do more than one
496:47 - more than one command at a time i can
496:50 - put a semicolon at the end of each one
496:51 - of these things
496:52 - and then i can run them all for that all
496:54 - the same time i mean one after another
496:56 - actually is what's going on here
496:58 - so boom boom boom and i take a look at
497:00 - the data and look i've got all those
497:01 - things in there
497:03 - now eventually the thing that's going to
497:06 - generate that sql is a program not us
497:08 - this is we're being the database
497:09 - administrator so we're sort of doing
497:10 - things manually
497:12 - once things get going you write programs
497:14 - do that insert over and over and over
497:15 - again
497:16 - in python or a web language like php or
497:19 - something like that
497:20 - and so that is the insert
497:24 - now we can get rid of data and so i'm
497:27 - going to say delete from
497:28 - that's the keyword users is the name of
497:30 - a table where
497:31 - is a where clause will have lots of
497:33 - where clauses in sql
497:34 - which is it's not like an if it in
497:37 - effect the delete is going towards the
497:39 - whole table
497:40 - and being turned on and off by this
497:42 - where clause so delete from users if you
497:44 - didn't put the where clause on will
497:45 - actually delete all the rows
497:47 - but where ted equals email equals ted at
497:49 - umich.edu
497:50 - well that one is going to make it so it
497:52 - only applies to those
497:54 - to the rows that where that is true so
497:56 - i'm gonna go over here in sql
497:58 - and i'm going to say delete from users
498:01 - where email equals ted at umich.edu
498:03 - and then i'm going to run it because
498:04 - it's only one i don't need a semicolon
498:05 - at the end of it
498:06 - and now if i go back and i look at the
498:08 - data ted is gone
498:10 - okay
498:14 - update so the update says
498:19 - updates keyword users is the name of the
498:21 - table set is a keyword
498:23 - and then this is column equals new value
498:25 - and then a where clause again
498:27 - this update if we didn't have a where
498:28 - clause would change every row
498:30 - in the table and so where email equals
498:32 - csev
498:38 - umich.edu
498:40 - oh i gotta change that because i already
498:42 - got the name to be charles
498:44 - so you see the name is already charles
498:45 - so i'll just execute here
498:50 - make this be chuck so we see it and then
498:52 - i run it
498:54 - and then you take a look at the data and
498:55 - it's changed
498:57 - that's it that's an update statement
499:00 - we're doing you're doing great you're
499:01 - doing great and so um
499:11 - the next thing we're going to do is
499:12 - we're going to take a look at how we
499:14 - retrieve data now this is the select
499:16 - statement
499:16 - select star you have a list of columns
499:19 - and star means all columns
499:20 - from is a keyword and then the name of a
499:22 - table so this select star from users is
499:25 - the kind of thing you type all the time
499:26 - as a matter of fact it's what sql
499:28 - browser is doing internally to cause
499:30 - this to happen but we can do it by hand
499:32 - by saying select star from users and
499:35 - then run it
499:36 - and so then we get a little record set
499:38 - that is those four records that are
499:40 - sitting there
499:41 - we can also throw a where clause on the
499:43 - end of it so we say select star from
499:44 - users
499:45 - where email equals csev at
499:48 - umich.edu and that again the select star
499:52 - from users goes at the whole table
499:54 - and the where clause goes at the whole
499:55 - table and then filters out all of the
499:57 - things except one record
499:59 - so the where clause is send it to the
500:01 - table but then
500:02 - filter based on on whatever and so it it
500:05 - only shows us that
500:07 - okay we're cruising right along here
500:11 - you can also put an order by clause on
500:13 - there
500:15 - so we can say select star from users
500:18 - order by email so that's a column
500:22 - select star from users order by email
500:25 - and so that orders by email or we can
500:28 - change it by to name
500:29 - and we can say descending
500:33 - so that's the name and descending order
500:36 - sorting and selecting are good things
500:39 - that the databases are really good at
500:43 - so this is the summary of what i've told
500:46 - you i said the databases do create read
500:48 - update and delete crud
500:50 - and we've done all those things except
500:51 - we did create delete
500:53 - update read that's what we did and
500:55 - that's the summary of sql
500:58 - and so you might be saying why did i
501:01 - take so long to learn such a simple and
501:03 - elegant and beautiful language because
501:04 - it's not really exciting
501:06 - it's a extremely simple language that's
501:08 - a very predictable
501:10 - and you're like that's pretty easy and
501:12 - it turns out that some of you
501:14 - may have been using sql in situations
501:17 - maybe with microsoft access or something
501:19 - or actually type in this stuff and you
501:20 - you just kind of typed it you never
501:22 - realized that you were learning a
501:23 - programming language
501:25 - that's why i like sql and that's a very
501:27 - declarative language and it's very
501:28 - straightforward it's much harder to
501:30 - learn and i mean it's much easier to
501:31 - learn
501:31 - um sql than it is to learn python
501:34 - because in python you have to figure out
501:35 - how loops work and how iteration
501:37 - variables work
501:38 - and you'll notice there's none of that
501:39 - and so the
501:41 - but the key is is we've only started to
501:43 - understand the power that
501:44 - that's the simple ability to move around
501:46 - and update data and read data
501:48 - uh randomly using using uh these simple
501:50 - sets of commands but up
501:52 - up next we're going to look at how you
501:54 - do this
501:55 - with data models and relationships and
501:57 - really multiple tables
502:10 - [Music]
502:24 - hello and welcome to our chapter on
502:26 - databases we're going to learn a lot in
502:28 - this chapter
502:29 - uh learn a whole new programming
502:30 - language sql and learn how to use that
502:34 - so you're going to need a new piece of
502:35 - software to run all of the
502:37 - exercises that i'm going to do called
502:39 - sqlite browser we're using a database
502:41 - called
502:42 - sqlite go ahead and download this you
502:44 - might have to pause and come back if you
502:46 - like go to sqlitebrowser.org
502:48 - and download it and install it while
502:51 - you're doing that uh
502:52 - we'll talk a little bit about the
502:53 - history so in the old days
502:56 - 1960s 1970s i started doing computing in
502:59 - 1975. um we didn't have a lot of storage
503:04 - i mean this is you know 16 gigabytes
503:06 - right here and
503:08 - you know we didn't even have megabytes i
503:10 - mean the computer i had had a few
503:12 - megabytes of stuff so it
503:14 - well so we didn't have a lot of disk
503:15 - drives and so permanent storage
503:18 - uh was often sequential and these tapes
503:20 - these tape drives that we had
503:22 - tapes and tape drives were the scalable
503:24 - part of storage because you could just
503:26 - make more tapes and you could rack them
503:27 - up and so that was our way
503:29 - of greatly increasing the storage of the
503:31 - computer the problem they had was
503:33 - is they were sequential you read it
503:35 - advances read it advance read in advance
503:37 - now interestingly
503:38 - we've been writing programs that do this
503:40 - that everything we've written so far
503:41 - pretty much reads the whole file
503:43 - reads the whole web page reads this
503:45 - everything we read it we read it either
503:46 - a loop or read the whole thing
503:48 - and that's because we have plenty of
503:49 - memory but we're still reading
503:52 - sequentially
503:52 - and um and so the way you would do this
503:55 - when you didn't have enough
503:57 - spinning storage or online storage is
503:59 - you'd use offline storage but the trick
504:01 - would be that you would sort it
504:02 - so let's imagine that you're a bank and
504:04 - you have a bunch of accounts only a few
504:06 - of which are active on any day
504:08 - and you have a tape that has in account
504:11 - number order from low to high
504:13 - the the prior balance last night's
504:15 - balance of every one of your bank
504:17 - accounts
504:18 - and then you do all the transactions and
504:20 - you record how much money was taken
504:22 - in or out for each account number and
504:24 - then you sort those transactions and
504:26 - then what you do
504:27 - is what we call the sequential master
504:29 - update and that is
504:30 - you would write a program that would
504:32 - read the first transaction and hold on
504:34 - to it
504:34 - say okay this is count 45. then i would
504:37 - read the first count like one
504:39 - and it would copy one and then every two
504:41 - and read like seven
504:42 - eight 42 43 then we'd read like 44
504:46 - and then we'd read 45 but it would now
504:49 - it would change that and write the new
504:50 - 45
504:51 - and read the next thing and so this
504:53 - might be 60 and it would read a bunch of
504:55 - stuff and copy a bunch of stuff
504:57 - and then would finally get to 60 and it
504:58 - would merge the add or subtract and so
505:01 - the
505:01 - the old balance ended up here and the
505:03 - new balance did here and
505:05 - you had to only make one pass through
505:06 - the data so it was super efficient
505:09 - so we had all these mechanisms to sort
505:11 - we used to do punch
505:12 - cards and have sorters and all these
505:14 - things and then those things would run
505:16 - for hours and if you watch old tv shows
505:20 - these tapes are spinning and these
505:21 - things are running back and forth
505:23 - these are simply reading and writing
505:24 - tapes
505:26 - and that's how we did a lot of data
505:28 - processing because
505:29 - we could store far more on a tape drive
505:32 - than we could on a disk and
505:34 - with a racks of tape drives we could
505:36 - scale the storage that our computers had
505:39 - and so that's the way we did data
505:40 - processing but it meant that
505:42 - you the only way you knew what the old
505:44 - balance was was it was the balance as of
505:46 - this morning before you bank started you
505:48 - don't know what the balance was for the
505:50 - day and that led to things like
505:52 - you can never retreat uh return uh you
505:54 - can never withdraw more than a hundred
505:56 - dollars a day or something like that
505:57 - because you
505:58 - you don't know what the old balance was
505:59 - or you might go withdraw a hundred
506:01 - dollars at a couple of different
506:02 - branches and
506:03 - and so they they didn't they weren't
506:05 - able to look your stuff up right away
506:07 - now
506:09 - it didn't take long until the disk
506:11 - drives got better and better and better
506:12 - and you could
506:13 - store the entire accounts all the
506:16 - accounts and their current balances on
506:17 - computers
506:18 - and then the problem becomes is what
506:21 - happens if sort of in the middle of the
506:23 - afternoon you want to update a balance
506:24 - well do you want to read all your data
506:26 - and then write a brand new one and
506:28 - that's
506:28 - say that takes like 10 minutes that
506:31 - means for that 10 minutes only one
506:32 - person can be
506:34 - updating their bank balance and so
506:36 - because
506:37 - we could randomly access this data we
506:39 - didn't have to read it all sequentially
506:40 - the trick was is
506:42 - how do you spread the data out and then
506:44 - how do you make it so you can change
506:46 - a balance this is of course second
506:48 - nature today but
506:49 - how do you make it so you change the
506:50 - balance here without changing the
506:52 - balance there and you can have multiple
506:53 - people going simultaneously to these
506:54 - things
506:55 - and make sure that you can't say
506:57 - withdraw money at two different
506:58 - locations simultaneously and somehow
507:01 - have your bank balance get corrupted by
507:02 - that so there's a lot of debate on how
507:04 - to do that
507:05 - and in early days we just did sequential
507:07 - master update
507:08 - but increasingly we wanted to make
507:10 - better use of the random nature of
507:13 - our computers and our storage and so
507:16 - that's what led to
507:17 - databases databases are the science of
507:21 - how you make use of rotating
507:24 - random access data permanent data in a
507:27 - way that allows you to
507:29 - read modify and update that
507:30 - simultaneously from many different
507:32 - locations and yet keep the data
507:34 - completely consistent
507:36 - and so this led to a study of a thing
507:38 - called relational databases and there's
507:40 - relational databases are not the only
507:42 - databases
507:43 - that that happened we had many other
507:46 - kinds of databases and there was a
507:47 - debate and i remember in the 70s and the
507:49 - 80s there was a
507:51 - folks that says oh no no there you could
507:53 - do index sequential that's the way to do
507:54 - it and
507:55 - relational databases weren't popular
507:57 - weren't all that popular
507:59 - the first time that uh that i saw them i
508:01 - i didn't like relational databases
508:04 - but relational databases had an inherent
508:06 - advantage because they were based on
508:08 - some really powerful mathematics
508:10 - the interesting thing is early on the
508:12 - relational databases were slower
508:14 - but eventually they figured out how to
508:17 - sort of bring all the cleverness to bear
508:18 - to make relational databases fast and so
508:20 - relational databases
508:22 - are a pretty advanced technology and
508:24 - there are companies like oracle that are
508:26 - very very wealthy
508:27 - and their primary product for many many
508:30 - years was nothing more than a clever
508:32 - database
508:32 - product a clever piece of software that
508:34 - was really good at solving this problem
508:36 - and that's how important this problem
508:37 - was
508:38 - to computing if you read about databases
508:41 - you're going to see
508:42 - two sets of terminology one set of
508:43 - terminology comes from
508:45 - the mathematical background and um
508:48 - has to do with the underlying math
508:50 - things like relations tuples
508:52 - and attributes that's kind of like the
508:55 - fancy math version of it and
508:57 - uh programmers kind of think of them as
508:59 - rows and columns inside of a table and
509:01 - so if you look at
509:03 - sort of fancy theory you'll see words
509:05 - that look like this and they're just
509:07 - full of this and the connection now all
509:09 - this is important and true
509:11 - and if you really want to get good you
509:12 - sort of begin to understand the nature
509:14 - that
509:15 - we model data at connections rather than
509:17 - at
509:18 - sort of intersection points rather than
509:19 - just modeling data as a
509:21 - flat file the way we do but for now
509:24 - we're
509:24 - we're going to as programmers think of
509:26 - this as just like oh
509:28 - it's like a super fast spreadsheet the
509:30 - super fast part is the math for us
509:32 - the rows columns and tables are
509:33 - spreadsheets so it thinks of
509:35 - think in a spreadsheet of sheets sheet
509:37 - sheet sheet and that's
509:38 - like a table a named thing like tracks
509:41 - or albums artists or genres
509:43 - and then there is rows and each row has
509:45 - a different kind of data
509:47 - and then there's columns and we sort of
509:49 - specialize the first column in many
509:51 - spreadsheets to say what's in there
509:53 - this is not really the data this is like
509:55 - metadata
509:56 - it's like the title's in this first
509:57 - column that's not really the data and
509:59 - the data starts here
510:00 - and we have different kinds of data like
510:02 - strings and numbers
510:03 - etc etc for each of the rows
510:06 - and literally you can
510:09 - get away with this as sort of about 80
510:11 - of databases is just a really super cool
510:13 - spreadsheet but
510:14 - under the covers it is far more powerful
510:17 - than that
510:19 - so one of the early arguments that uh
510:22 - happened was
510:23 - again what the programming model for
510:24 - this was and a lot of folks wanted a
510:27 - programming model that reflected how the
510:28 - data was actually stored
510:30 - um the notion of structured query
510:32 - language came about
510:34 - in a way to express what you wanted to
510:36 - happen
510:37 - and allow that to be sort of a very
510:39 - abstract expression
510:41 - select all records that meet this
510:43 - criteria not
510:44 - read read read read read read and so
510:47 - structured query language
510:48 - is a not a procedural language it is a
510:51 - it is a imperative language where you're
510:54 - simply saying what you want and then
510:56 - somebody writes the loop the database
510:57 - actually does the loop but it's a
510:59 - way for you to avoid actually writing
511:01 - the loop now that turns out to be the
511:02 - power of databases
511:04 - because the cleverness and how to write
511:05 - the loop is a way that you
511:07 - would probably never figure out how to
511:08 - be most super supremely optimal
511:11 - when it comes to rating writing the loop
511:13 - as you'll see toward the end of
511:15 - joining many tables together and
511:16 - selecting and throwing array and getting
511:17 - down a count or whatever
511:19 - someone has figured out how to do that
511:21 - really really well
511:22 - so the idea was is you would express you
511:24 - know we're going to create some data
511:26 - we're going to retrieve some data we're
511:27 - going to insert and delete it create
511:29 - read
511:30 - crud c-r-u-d um
511:33 - create read update and delete crud
511:36 - and so that's what this does it's a
511:38 - language that does this very simply
511:40 - now the applications that we're going to
511:42 - use
511:44 - this for are more of a data analysis
511:46 - application we've been doing data
511:48 - analysis
511:48 - for through the whole course and the
511:50 - kinds of things that we'll see
511:52 - in the remaining chapters is we'll take
511:53 - some raw data file
511:55 - these might actually come across the
511:56 - network and we'll write some python
511:58 - programs to
511:59 - play with that data parse it clean it up
512:02 - make sense of it
512:03 - you know and then write it into a
512:05 - database and this might be a slow
512:07 - processor this might be really nasty and
512:09 - this might be a way to have very clean
512:10 - data
512:11 - and then we'll write another python
512:12 - program to sort of read this
512:14 - read through it and it's all efficient
512:16 - and pretty and then
512:18 - we can produce files and maybe we'll
512:19 - visualize it or do work further analysis
512:21 - in our excel or
512:23 - or a javascript visualization framework
512:25 - and so
512:26 - in this situation you will be the person
512:30 - who is both sort of writing the programs
512:32 - database administrator
512:34 - and you can using sqlite browser play
512:37 - and look at the database kind of in a
512:38 - raw way
512:39 - and the first part of this we are mostly
512:40 - going to be using sqlite browser
512:42 - just to talk straight to a database
512:44 - later we'll write python programs
512:46 - that read and write data and and
512:49 - visualize the data so
512:50 - so this is what we're going to do first
512:52 - and then second we're going to do
512:53 - this part right here that's the second
512:55 - thing we're going to do
512:57 - now another really common use of
512:59 - applications and something that if you
513:01 - continue
513:02 - learning more about programming is that
513:04 - you will want to write
513:06 - a an online application like amazon
513:09 - or a company or or twitter that's got a
513:12 - website and it stores dynamic data in
513:14 - databases
513:16 - and so the picture for that is similar
513:19 - but different than the picture we're
513:20 - going to start out with and so the way
513:21 - this usually works
513:22 - is that you the end user uses a web
513:25 - browser talks to the application
513:27 - and the developer writes the application
513:30 - software
513:31 - and that application software stores its
513:33 - data in a database
513:34 - and inside that database we talked to
513:37 - the database using sql
513:39 - and all the data is actually stored here
513:40 - and the magic happens the data server is
513:42 - that database software that's so
513:44 - precious and valuable
513:45 - and then there's another person often
513:47 - called the database administrator
513:49 - who has access to the direct access to
513:51 - the data and these roles in
513:53 - medium and large projects are kept
513:54 - separate mostly because
513:56 - the mostly because the
514:02 - the production while it's running in
514:06 - live the developer leaves the data alone
514:08 - and works on say the next version of the
514:09 - software
514:11 - and then the developer has a test
514:13 - version of the application
514:14 - that they run on their computer where
514:17 - they're doing all
514:18 - that stuff and so this database
514:19 - administrator is a is a role
514:21 - in a large project where we have to run
514:24 - production and keep production careful
514:27 - keep production in good shape so the
514:29 - database administrator has this
514:31 - responsibility
514:32 - for the production aspects of the data
514:34 - and you may be working in a situation
514:35 - where that you're not actually
514:36 - controlling the data the database
514:38 - servers on different computers
514:39 - you have little special access and you
514:41 - write programs to sort of read the data
514:44 - and so the database administrator is the
514:46 - person who is
514:47 - asked by the organization to administer
514:50 - that data
514:51 - the data that we develop and we'll do
514:53 - this in the
514:54 - second part of these lectures um
514:56 - conforms to a data model that's the
514:58 - metadata is this an
514:59 - integer is this a string you know how
515:01 - many columns is this
515:02 - and the data model turns out to be very
515:05 - very important there's a lot of science
515:06 - to building an effective data model
515:08 - that leads to really good performance
515:10 - and it's a it's a collaborative activity
515:12 - between
515:12 - the application developers and the
515:15 - database administrator to make it so
515:17 - it's efficient runs in production
515:19 - etc etc etc there's a lot of products
515:22 - out there
515:23 - that you may encounter we're going to be
515:25 - using sqlite sqlite's a little tiny
515:27 - database server and it's built into so
515:29 - many things and that's why we like it
515:30 - but
515:31 - if you're going to work at a large
515:32 - organization you can easily run into
515:34 - oracle which is the number one
515:36 - commercial
515:37 - product microsoft has a thing called sql
515:40 - server which is
515:40 - a commercial product and it's also very
515:42 - popular and very effective
515:44 - uh the more popular open source uh
515:47 - there's things called postgres
515:48 - there's mysql and mysql recently was
515:51 - sort of bought by oracle
515:53 - and there is a a copy of that called
515:55 - mariahdb
515:57 - that doesn't belong to oracle mariahdb
516:00 - and so you did most of the sql that
516:03 - we're going to learn
516:04 - is common across these database
516:07 - because database systems because sql is
516:09 - a standard but then there are parts that
516:11 - weren't part of the original standard
516:12 - where each data
516:13 - database vendor has done things a little
516:14 - bit different but there is
516:16 - a core common subset that does the basic
516:19 - create read update and delete operations
516:22 - so sqlite is a very popular you probably
516:25 - have it in your cell phone
516:26 - 10 12 times your web browser has a
516:28 - database engine in it
516:30 - your car has a few databases in it and
516:33 - so
516:33 - sqlite is what's called an embedded
516:35 - database system
516:37 - python comes built in with with it you
516:39 - just import sqlite3
516:41 - and away you go and so it's a very very
516:44 - popular because
516:45 - it's free it's open source and it is
516:48 - such a tiny little piece of software
516:50 - that you just included in other pieces
516:52 - of software and use it
516:53 - to solve the data management problems of
516:55 - those pieces of software like your
516:57 - browser
516:57 - might use sqlite to store your bookmarks
516:59 - now you think oh there's only how many
517:01 - bookmarks can you have
517:02 - but what if there you need it to be fast
517:04 - and what if there's like people that
517:05 - have 10 000 bookmarks there probably are
517:08 - do you still want it fast do you want to
517:09 - be able to search and so you get all
517:10 - that by using a database like sqlite
517:14 - and so again we're going to encourage
517:16 - you to download the sqlite browser
517:18 - so you can follow along with what we're
517:20 - going to do coming up next
517:22 - and so here is the sqli browser here's
517:24 - what it looks like
517:25 - and it's just a desktop application and
517:28 - uh coming up next we'll start playing
517:29 - with
517:30 - this desktop application and see how it
517:32 - works
517:35 - [Music]
517:50 - [Music]
518:04 - hello and welcome to python objects i'm
518:06 - charles severance and uh
518:08 - we're well on our way to uh to getting
518:11 - through all this material in the python
518:13 - so this lecture is in a weird place i
518:15 - even debated where to put it in the book
518:19 - i don't really want to teach you how to
518:21 - write a lot of object-oriented
518:22 - programming but
518:23 - we're going to start using objects and
518:26 - i want to be able to use the terminology
518:28 - and so as much as anything
518:29 - this lecture is about terminology and
518:31 - understanding
518:33 - the words things like methods and method
518:35 - signatures and
518:36 - variables and inheritance and so think
518:39 - of this as a terminology lecture rather
518:41 - than learn how to program or learn how
518:43 - to
518:43 - use this it's not something you're going
518:45 - to figure out right away
518:47 - and there'll come a time when you as a
518:49 - programmer really want to start using
518:50 - object-oriented programming it's really
518:52 - a powerful and wonderful
518:54 - technique but i think it's too early as
518:56 - a beginning programmer to really say oh
518:58 - let's write a bunch of objects so
519:00 - just relax and enjoy and learn this
519:04 - material
519:05 - and think of it as sort of a a
519:07 - theoretical thing rather than
519:08 - you know a how to program things
519:13 - and so part of this is we're going to
519:15 - start reading data structures and i mean
519:18 - data on how to use all these
519:21 - libraries etc we're going to see the
519:23 - word objects right and
519:25 - then we're going to start hearing them
519:26 - and i want you to be able to read the
519:27 - python documentation so that you
519:29 - understand what's going on and so you
519:32 - know the word object
519:33 - should make sense to you even though
519:34 - you're not going to write a lot of
519:36 - object-oriented programming and so
519:37 - page upon page upon page uh database
519:40 - stuff which we're going to talk about
519:42 - soon is
519:42 - uh uses objects all over the place and
519:45 - the beautiful soup
519:46 - talks about uses objects we've kind of
519:48 - been using them
519:49 - and i've been waving my hands and i use
519:52 - the word method without defining it but
519:54 - now it's really
519:55 - time to define it and go go to it so
519:59 - um i want to review uh
520:02 - from the very beginning what we think of
520:04 - as a program so the classic program my
520:06 - favorite little minimum program is our
520:08 - little
520:09 - elevator floor converter with uh which
520:11 - converts from european
520:13 - elevator floors to united states
520:14 - elevator floors and the key to this is
520:17 - that
520:17 - it's input processing and output and
520:20 - this is a good way to model
520:22 - any program and in that process
520:26 - we've got variables and we've got logic
520:29 - we've got algorithms we've got loops
520:30 - that we write we've got
520:31 - all kinds of things and we construct a
520:33 - series of steps
520:35 - to achieve some goal
520:39 - in object oriented and frankly you've
520:41 - been using object ordnance all along
520:43 - the program has lots of objects and
520:46 - we're sort of putting stuff into these
520:48 - objects taking stuff out of one object
520:49 - and putting it into another object
520:51 - and you've actually been doing this all
520:53 - along as soon as you're looking at
520:54 - dictionaries and lists
520:55 - you're doing objects and so it's it
520:59 - an object is is quite a little thing
521:01 - it's sort of its own little space inside
521:03 - of a program
521:04 - that contains code and data
521:08 - and so we're working together all these
521:10 - objects are now working together it's a
521:12 - bit of self-contained code and data
521:14 - and it is one way to take a very complex
521:17 - problem
521:18 - and make it easier by breaking it into
521:21 - separate
521:21 - things that can be engineered and
521:23 - developed separately so
521:25 - you've been using string objects or
521:26 - maybe you'd use beautiful soup or
521:28 - something
521:28 - these are powerful capabilities and if
521:30 - you had to look at all of them
521:32 - it's just hey here's the thing use this
521:34 - object it'll do these things for you and
521:36 - there's lots of details inside of it
521:38 - just don't look at it don't worry about
521:39 - it
521:40 - and so there's boundaries that things
521:41 - that you can use things that you can
521:43 - look at
521:44 - and things that really you don't bother
521:45 - looking at you go read the documentation
521:47 - and use it
521:48 - and away it goes but then someone had to
521:51 - write that
521:51 - and so they built an object so we're
521:53 - going to do is look a little bit
521:55 - under the covers of what it takes to
521:56 - build some of these objects
522:02 - and so if we think of this program that
522:04 - originally just sort of did processing
522:06 - we can think of it as having some kind
522:08 - of an input right
522:10 - coming into our program and we have a
522:12 - string object a dictionary object maybe
522:14 - eventually some objects like a database
522:16 - object or an object that we eventually
522:17 - define
522:18 - and you can think of us we're receiving
522:20 - data it comes in an object which is a
522:22 - string object we
522:23 - start putting the strings in
522:25 - dictionaries and do whatever we pull out
522:27 - a list of them
522:28 - and and so you can think of data as
522:30 - moving between these objects and like i
522:32 - say
522:32 - even strings in the first week first
522:35 - lecture
522:36 - first week first everything we um
522:39 - we were using objects and we've been
522:41 - using them all along
522:43 - and so you can think of every string and
522:45 - every dictionary as
522:46 - a little program all by itself that has
522:49 - a bit of code
522:50 - and a bit of data and so a string has
522:53 - the data which includes all the
522:55 - characters that make up the string but
522:56 - then there is a method called uh
522:58 - upper that'll does uppercase or r strip
523:01 - that strips off the right a white space
523:03 - from the right
523:04 - and so it's it's like they're almost
523:05 - little programs that have inputs and
523:07 - outputs themselves
523:08 - and we can make lots of them and there's
523:10 - lots of cooperating objects
523:11 - that make up an application
523:15 - and one of the nice things about the
523:17 - object-oriented pattern is that
523:19 - they form boundaries and within the
523:22 - boundary if you're inside the
523:24 - object you can say look i'm going to
523:26 - build you a string object or a database
523:28 - object or a beautiful soup object
523:29 - and i'm going to build this capability
523:31 - and i'm going to give it to you in the
523:32 - form of an interface
523:33 - and i'm not really going to care how you
523:35 - use it and so we have this
523:37 - sort of visibility wall where i'm going
523:39 - to make an object and i'm going to let
523:41 - you use it
523:41 - and the maker of the object doesn't
523:43 - necessarily have to know every single
523:45 - thing
523:45 - about the use of that object but so just
523:48 - like
523:49 - inside the object they don't have to
523:50 - worry about what you're doing with the
523:52 - object outside of it
523:53 - when you're outside the object you don't
523:54 - have to worry about what's going on
523:56 - inside of it we
523:57 - as the user of the object we talk to its
523:59 - interface and we get things from it and
524:01 - give things to it and
524:02 - use functionality within that object but
524:04 - we don't have to look inside of this we
524:06 - can just say oh it's
524:07 - a nice little magical thing we read the
524:09 - documentation we were at a web page and
524:10 - it told us to do this this and this
524:12 - and away you go and so it is a it is
524:14 - sort of this isolation boundary
524:16 - that works both for the programmer who's
524:19 - writing the object
524:21 - and the programmer who's using the
524:23 - object and so it's a
524:24 - it's a very nice pattern um and
524:27 - so you'll see how we're going to build
524:29 - code and we're going to group it
524:30 - together and then we're going to be
524:31 - using it sort of as a
524:33 - big blob of stuff
524:36 - so some definitions in this space words
524:39 - that i want you to understand
524:43 - when we're going to create one of these
524:45 - things one of these
524:46 - objects instances that has some data
524:51 - okay so now that we've gotten through
524:52 - the definitions let's work
524:54 - into some sample code but hey look at
524:56 - this we've got ourselves a cookie cutter
524:58 - and some cookies
525:00 - so remember that a class
525:03 - is a template it's not the actual thing
525:06 - an
525:06 - object is an instance of a class so you
525:10 - have to take the class
525:11 - and do something to make the object and
525:14 - actually you can see here some
525:16 - other classes there's clearly a sort of
525:18 - a snowflake class and a
525:19 - gingerbread man class that's an object
525:22 - object object somewhere out here
525:24 - there is a snowflake class and a
525:27 - gingerbread class but we got a
525:29 - snowman object and a snowman object and
525:31 - a snowman class so
525:34 - class is the template
525:38 - object is the instance so here's a bit
525:40 - of python code so let's take a look at
525:42 - what we got here
525:44 - class is a new reserved word kind of
525:45 - like def we have the name of the class
525:48 - that is a name that we choose we're
525:49 - gonna
525:50 - that's the name by which we'll refer to
525:51 - this class for the rest of this program
525:54 - and it has a colon at the end of it and
525:56 - which means it starts an
525:57 - indented block which ends when we
525:59 - de-indent
526:00 - inside the class there are generally two
526:02 - things there is some data and this just
526:04 - looks like an assignment statement now
526:05 - i'm going to talk a little bit about
526:06 - object life cycle and what we mean by
526:08 - object life cycle is the
526:09 - act of creating and destroying these
526:11 - objects and i've been using this term
526:13 - constructor already and so
526:16 - when we declare a variable whether it's
526:18 - a string or a dictionary or a party
526:20 - animal where we create them
526:22 - and then they're discarded and there's
526:23 - all this dynamic memory that comes and
526:25 - goes
526:26 - and we as the writers of objects have
526:29 - the ability to
526:30 - insert ourselves at the moment of object
526:32 - creation
526:33 - and at the moment of object destruction
526:35 - and we make
526:37 - special functions that we call the
526:38 - constructor the object constructor or
526:40 - the class constructor
526:41 - and the destructor and we don't actually
526:44 - explicitly call them
526:45 - they're called automatically by the uh
526:47 - by python on our behalf
526:49 - and so the constructor is much more
526:52 - commonly used it's used to set up any
526:54 - initial values of variables if necessary
526:57 - etc destructors are we'll cover them but
527:00 - they're
527:01 - they're used very rarely so here's a bit
527:04 - of code that we've got
527:06 - it's our party animal and a lot of it is
527:07 - the same as what we've been doing so far
527:11 - so we have this variable x and the
527:13 - constructor has a special name
527:15 - underscore underscore init
527:16 - underscore again we pass in the
527:20 - instance of the object self and in this
527:22 - one all we're going to do is print out
527:23 - that you're constructed and here's this
527:26 - code that we've had before and now we
527:27 - have underscore underscore dell
527:29 - and then we pass in self and we'll just
527:31 - print out uh that
527:32 - we're being destructed and what the
527:34 - current value of
527:35 - x's for that particular instance
527:40 - so let's go ahead and run this
527:44 - and so again this doesn't really do any
527:46 - code up to here that just defines party
527:48 - animal but this is the constructing of
527:50 - it
527:50 - and basically that says oh and it really
527:52 - kind of creates these variables and then
527:54 - it also runs the constructor
527:56 - and so in this case this line right here
527:59 - is causing the i am constructed message
528:01 - to come out
528:02 - then we do and party a and party
528:06 - and that says you know one and two and
528:09 - here's an interesting thing we're
528:10 - actually going to destroy this variable
528:12 - by throwing away and no longer points at
528:16 - that object
528:17 - and's going to point to 42. so we're
528:18 - going to sort of overwrite a n and put
528:20 - 42 in it
528:21 - and at that point python's like oh this
528:24 - whole little object that i just created
528:26 - somewhere it's out here it's vaporizing
528:29 - it
528:29 - and throwing it away and so before this
528:33 - line completes
528:34 - it actually calls our destructor on our
528:36 - behalf and so that message comes out
528:39 - so we are allowed as the builder of
528:41 - these
528:42 - objects to add these little chunks of
528:44 - code that says i want to be involved at
528:46 - the moment this object is created
528:47 - and i want to be involved at the moment
528:49 - that this object is destroyed
528:51 - now in this last line a n is no longer a
528:55 - party animal
528:55 - a n is now an integer it's got a 42 in
528:59 - it it's gone it's been created it was
529:01 - used and then it was destroyed
529:03 - okay so you got to be careful if you
529:04 - overwrite something you kind of sort of
529:06 - throw the object
529:07 - away so the constructor is a special
529:11 - block of code
529:12 - that's called when the object is created
529:14 - to set the object up
529:18 - so we can create lots of instances
529:20 - everything we've done so far
529:21 - is we make a class and then we create
529:23 - one instance one
529:24 - object and each of these objects ends up
529:27 - being stored in its own variable we have
529:29 - a variable a n and we've been using it
529:31 - but the more interesting thing begins to
529:32 - happen when we have
529:34 - multiple instances of the same class
529:37 - sitting in different variables
529:38 - and it has its own copy of the instance
529:40 - variables so let's take a look
529:42 - at this so this code here i've taken out
529:46 - the just
529:46 - i've taken out the destructor and it
529:49 - shows a little bit more information
529:51 - so now we're going to put two variables
529:52 - in here we're going to have a current
529:54 - score or whatever and a name
529:56 - and we're going to start it out as blank
529:58 - and this time we're going to add a
530:01 - parameter onto the constructor
530:03 - and so the self comes in sort of
530:04 - automatically
530:06 - as the object is being constructed but
530:08 - if we put a parameter
530:10 - on the constructor call which is this
530:11 - party animal call then this comes in
530:14 - as the z variable and so self is the
530:17 - object itself
530:18 - and z this first parameter is whatever
530:21 - parameter we put here everything we've
530:22 - done so far has no parameter here but
530:24 - now we have a parameter here
530:26 - and then that means that when we call
530:28 - this constructor
530:30 - this line of code comes and then name is
530:32 - no longer blank
530:34 - name is going to be sally in this
530:35 - particular thing and then i'll say oh
530:37 - self.name which will be sally was been
530:39 - constructed
530:40 - and so then then we have this and that
530:44 - object is now constructed and we put it
530:46 - in the variable s
530:47 - and then we call the party method on
530:49 - that and we construct a different one
530:50 - and so this time it calls
530:52 - and z is jim and
530:55 - we basically have a
530:59 - oops another copy of this and so
531:02 - this is how it's going to look right as
531:05 - as it runs down
531:06 - here as it runs down here
531:09 - when this is called it makes one
531:12 - instance
531:13 - and stores that in the variable s and
531:15 - there's a variable x in there
531:17 - there's a name in there there's an init
531:18 - method in party and that's all in here
531:20 - right all that stuff is in here
531:22 - and now we say let's make and that's
531:24 - going to have a sally in there
531:28 - find sally in there
531:31 - and then we're going to do another
531:33 - constructor and so it's going to make a
531:34 - whole new thing and it's going to store
531:36 - that in j
531:37 - and this one's going to have jim in it
531:40 - on
531:40 - s party then this turns into a one and
531:42 - then we gonna call j party
531:44 - um that turns that into a one and then s
531:47 - party will cause this to be a 2.
531:49 - okay and so what happens is we have now
531:52 - two
531:53 - objects one in the variable s and one in
531:55 - the variable j
531:57 - and they have separate copies of their
531:59 - instance variables these are the
532:00 - instance variables or the
532:02 - object fields or whatever but they're
532:04 - the variables but the key is is that
532:06 - every time we do a new construction it
532:09 - duplicates this and there's another copy
532:11 - of it so there's an
532:12 - x within s so s dot x is this variable
532:16 - and
532:16 - j dot x is that variable
532:20 - okay so the next thing we'll talk about
532:24 - is inheritance and that's the idea of
532:26 - taking one class
532:27 - and extending it to make something new
532:30 - so the last topic we'll talk
532:32 - talk about here in object orientation is
532:34 - the notion of inheritance
532:36 - and this is a form of code reuse and
532:38 - it's one of the more advanced
532:40 - uh aspects of object-oriented
532:42 - programming so just
532:43 - kind of understand what it is at a high
532:45 - level and then you know where to come
532:46 - back to
532:47 - when you need to learn a bit more about
532:49 - inheritance
532:50 - so the idea is instead of making a new
532:53 - class from scratch
532:54 - we actually make a new class by starting
532:56 - with an existing class we are extending
532:58 - it or
532:59 - another word for this is subclassing and
533:02 - it's sort of a
533:03 - a situation where you're like i've got
533:05 - this code and i've got this data and i
533:07 - just need to add a few things to it
533:09 - and then i'll have a whole new thing and
533:11 - as you design
533:12 - objects and what we call object
533:14 - hierarchies you often do this and it's a
533:16 - form of
533:17 - sort of real clever code reuse
533:20 - but again don't necessarily think that
533:23 - you're supposed to know
533:24 - when to use this or why to use this is
533:27 - right now it's just
533:28 - terminology okay just terminology we
533:31 - have what call these as parent child
533:32 - relationships the original class is
533:34 - called a parent
533:35 - and the new class is called the child
533:37 - class so
533:38 - subclasses are another word for this you
533:41 - have a class and then you subclass it
533:43 - i think extending inheriting and parent
533:45 - child are probably better ways of
533:47 - expressing it
533:48 - than subclassing so here's a bit of code
533:51 - let's take a look at this
533:52 - um this is this code's unchanged it's
533:55 - the party animal code that we've been
533:56 - saying all along
533:57 - um it's the one that you we we construct
534:00 - and put a name
534:00 - in and now what we're going to do is
534:02 - extend it and so you'll notice that this
534:04 - code down here is the part that's doing
534:06 - the extending
534:07 - so we're making a new class football fan
534:10 - and by putting in parentheses before the
534:12 - colon party animal
534:13 - that says football fan inherits
534:16 - everything that is party animal meaning
534:18 - the x the name the init the party all
534:21 - those methods and data are
534:23 - sitting there and now we're going to add
534:25 - a new variable so football fan has
534:27 - in addition to all those other variables
534:28 - has points and it has a touchdown method
534:32 - and you know point uh self points is
534:35 - added you know to
534:36 - we add seven of the points and then we
534:38 - call the party
534:39 - and when that does that so this is
534:40 - calling this method
534:42 - because football fan includes x name and
534:45 - party and init and everything and all
534:47 - this stuff this constructor
534:48 - so so this football fan is really an
534:52 - amalgamation of all these things
534:53 - together
534:54 - party animal is just this stuff right
534:58 - but so we still have two classes we
535:00 - don't just have one we didn't erase the
535:01 - party animal class
535:03 - and so we take a look at the code that
535:04 - we can run here we can say oh
535:06 - okay let's make a party animal sally and
535:08 - so that constructs
535:10 - a an object like this and then stores
535:13 - that in
535:13 - s and with an x starting out zero
535:17 - and and then we call s party oops better
535:20 - change that color
535:22 - um starts out at zero and then we call
535:24 - the party method and that changes it to
535:26 - one
535:27 - okay and so this is this bit of code
535:30 - it's as if this part doesn't matter at
535:32 - all because
535:32 - it is a party animal it's not a football
535:34 - fan but now if we take a look at
535:37 - this code down here
535:41 - take this code down here we're going to
535:43 - construct a football fan and pass in jim
535:47 - but football fan has no underscore
535:48 - underscore and net so that actually uses
535:51 - the underscore knit from party animal
535:53 - because we extended party animal to make
535:55 - football fans so we inherited
535:57 - all of the good that was in there so
535:59 - there it's going to
536:00 - make a name a variable x which is going
536:02 - to start at 0 a variable name that's
536:04 - going to have gem in it
536:05 - and a variable points it's going to have
536:08 - a 0 in it
536:08 - so this j variable has more things in it
536:12 - than the s variable has and so we can
536:15 - call
536:16 - the j party and if we call j
536:19 - party that goes here and adds one to x
536:22 - right
536:22 - so that adds one to x and then we call j
536:25 - touchdown well that comes down in here
536:28 - and adds seven to the points right
536:31 - and then calls party within us and so so
536:34 - self.party is
536:36 - the current object i.e self and j are
536:38 - the same thing
536:39 - right self.party and then it goes up
536:42 - here
536:42 - and passes self in and it adds one to
536:45 - the x
536:46 - in this case of this j variable so this
536:49 - becomes
536:50 - two and that's where it prints out it
536:52 - prints out you know
536:54 - seven and two and away you go and so
536:57 - it's a way for you to kind of take all
536:59 - this stuff and stuff it
537:01 - into an a class by making a new class
537:04 - and just add the extending bits the bits
537:06 - that are
537:07 - in addition to the other stuff so like i
537:10 - said
537:11 - inheritance is a powerful and wonderful
537:13 - concept it's a form of
537:15 - uh excellent form of reuse but uh
537:19 - basically the whole purpose of this
537:22 - lecture was so that i could in the
537:24 - future just use these words and you
537:26 - would understand them as compared to
537:28 - i just want to say method and i've been
537:30 - saying method all along this high time
537:31 - that i defined it
537:32 - so let's just review one last time class
537:36 - is a template
537:37 - it is not actually a thing it is a shape
537:40 - of a thing
537:41 - and we define it and say when we make
537:43 - one of these things it's going to have
537:44 - these variables and it's going to have
537:45 - these methods
537:46 - in it attributes variables within a
537:49 - class
537:49 - a method is a function that's inside of
537:51 - a class
537:52 - object is once we construct a class we
537:56 - get back an
537:56 - object and so object here is
538:00 - the snowmen cookies class is the snowman
538:03 - cookie cutter
538:05 - and a constructor is a bit of code that
538:07 - sets up
538:08 - our object our instance
538:11 - when it first is created an inheritance
538:14 - is this ability to
538:16 - create a new class but take all and
538:18 - import and affect all the capabilities
538:21 - of an existing class so
538:25 - object oriented is awesome for the rest
538:28 - of this class we're not going to write
538:29 - any object code we're not going to use
538:30 - class at all but we're going to use
538:32 - objects and literally you've been using
538:34 - objects from the beginning of this
538:35 - course as soon as you said
538:38 - print whoops as you as soon as you said
538:41 - you know x equals hi
538:44 - that's an object and as soon as you said
538:46 - x dot upper
538:49 - you were calling a method right you've
538:51 - been calling a method all along
538:53 - when you're doing something like f h
538:56 - equals
538:56 - open this thing you're getting back
539:00 - that's an object
539:01 - and then you do fh.read or whatever
539:04 - you're calling a method in the dot
539:06 - operator so you've been using objects
539:08 - all along
539:09 - i now i'm just finally explaining to you
539:11 - when i say
539:12 - call the read method or call the upper
539:14 - method or what's this little dot and why
539:17 - is that there so again it's time for us
539:19 - to
539:20 - understand that but you will it will
539:22 - take you a long time before you
539:24 - encounter a problem
539:25 - that's large enough where as part of
539:27 - your solution
539:29 - you're going to make a new object but
539:30 - when you do it's really a powerful thing
539:32 - i mean
539:35 - it's a really bad idea for me as a
539:36 - teacher say oh write a bunch of objects
539:38 - it's like it's
539:38 - it's premature for that it's later is
539:41 - when
539:42 - um you will actually learn how to use
539:44 - objects and you'll be like oh
539:45 - thank heaven that these objects are here
539:47 - okay
539:48 - so uh that's all for now uh thanks for
539:51 - listening see on the net
540:01 - [Music]
540:08 - now we're going to represent these
540:09 - relationships in the database
540:11 - and again what we're trying to solve
540:13 - here is this notion of database
540:14 - normalization
540:15 - third normal form there is so much
540:18 - theory right
540:19 - but in in this lecture i'm just going to
540:21 - condense this down
540:22 - to don't replicate string data and use
540:26 - what are called keys use
540:27 - integer keys to point at those things
540:30 - and we're going to use these integers
540:31 - then to point
540:32 - so assign each row an integer and then
540:34 - we're going to point from one row to
540:36 - another using those integers and so
540:37 - we're going to add
540:38 - these special key columns to each of the
540:41 - tables and help the
540:42 - in the database will even give us help
540:44 - uh managing those
540:45 - now and so we still need to keep track
540:47 - of you know
540:49 - who is the creator of the album which
540:51 - album a track belongs to we've got to
540:54 - create these relationships and we have
540:55 - to come up with ways to store those
540:57 - relationship
540:58 - and so the idea is is we're going to
541:00 - have a column in one
541:02 - in a table which is the key column and
541:04 - we're going to call this the id column
541:06 - and so this is a row it might have many
541:07 - bits of data here but in this case it's
541:09 - just the name of an artist
541:10 - so this album is going to belong to an
541:12 - artist
541:13 - and we're going to assign a number
541:15 - inside the database and so that led
541:17 - zeppelin
541:18 - is 1 and acdc is 2. and so we have this
541:21 - key
541:22 - this is called a primary key and then
541:24 - later when we want to say that the who
541:26 - made who album
541:27 - really was uh done by ac dc um
541:31 - we put the number two in and so the
541:32 - difference here is instead of saying ac
541:34 - dc
541:36 - in this record we just put the number
541:38 - two once we've established this number
541:40 - so we assign keys and then we have these
541:43 - pointers that point back and so that's
541:44 - how we model a relationship
541:46 - with with these small integer numbers
541:50 - and so there are three basic kind of
541:51 - keys that we use one is the primary key
541:54 - and that is that little id column that
541:56 - is just a number
541:57 - but once we give led zeppelin the number
541:59 - one led zeppelin is the number
542:00 - has got the key one for the rest of that
542:03 - database
542:04 - the logical key is the text area that we
542:07 - use that you might look up so the title
542:09 - of the band
542:10 - or the title of the album that's the
542:11 - logical key and then the foreign key is
542:13 - one of these keys that is really
542:15 - pointing
542:15 - to the primary key of another row so
542:17 - that's called a foreign key
542:20 - and it's in you might think that you
542:23 - want to use something like an email
542:24 - address as the primary key for a user
542:26 - table or something like that the logical
542:28 - key
542:29 - should always be separate and there
542:30 - should always be a primary key that
542:32 - integer number
542:33 - because things like logical keys do
542:34 - change people do get new email addresses
542:36 - and if you've got that email address
542:38 - as a foreign key pointing all over the
542:40 - place it doesn't work out so well and so
542:42 - that's why you use these small integer
542:44 - numbers
542:44 - that have no meaning outside so
542:46 - sometimes if you're on a system and you
542:48 - see a url and you see some number like
542:50 - 420 2016
542:52 - you're like oh that turns out to
542:53 - probably be my primary key in their
542:55 - database
542:56 - so sometimes you can look in a url and
542:58 - you can see these primary keys in the
543:00 - url but they
543:01 - don't mean anything outside of that
543:02 - particular system
543:04 - so like i said a foreign key is a key
543:06 - that is really pointing at a row in a
543:09 - different table and so
543:10 - so we have the album has a primary key
543:13 - for it but the artist underscore id
543:15 - points to a row in the artist table as
543:17 - we will soon see
543:20 - i have a naming convention and in my
543:22 - naming convention
543:23 - on this lecture i use id for the primary
543:25 - key
543:26 - and then artist underscore id i use
543:28 - uppercase for the table names
543:30 - and then artist underscore id says this
543:33 - is a key
543:34 - this is just a key that points to the id
543:36 - key
543:37 - of the artist table and so that's what i
543:39 - do so you'll see
543:40 - in all my stuff i'll use that it's a
543:41 - convention
543:43 - it's not something sql forces you to do
543:45 - but you will find when you go to
543:47 - organizations and work on their
543:48 - databases these conventions are very
543:50 - important
543:50 - so i can do something and you can
543:52 - understand the rules in which i created
543:54 - it
543:55 - some of these you'll find this used by
543:57 - some people you'll find completely
543:58 - different conventions and that'll be
544:00 - okay whatever
544:01 - convention your organization uses learn
544:03 - that convention
544:04 - so now we're going to talk about how we
544:07 - put these keys in
544:08 - and then how we actually make the
544:09 - connections uh from one row to another
544:12 - row
544:13 - so now that we know what a primary key
544:15 - logical key and foreign key are we're
544:16 - going to actually start putting these
544:18 - together
544:18 - and creating tables that have these kind
544:21 - of values in them
544:22 - so when we were done we drew this
544:24 - picture that was sort of a logical model
544:26 - of how our data would be spread across
544:28 - four tables and how those tables are
544:30 - connected
544:31 - now we have to take this and we have to
544:32 - map it in a way that
544:34 - leads to the column row the columns and
544:37 - the needed columns in each of our
544:38 - database tables
544:40 - and so here's what we do we basically
544:42 - have to take
544:43 - and for each of these when we're going
544:46 - to build a track table
544:47 - we're going to build a track table we
544:49 - add a primary key
544:50 - so we just added an id field to every
544:53 - one of these things
544:54 - and that's so we have a place to store
544:55 - the sequence number of this particular
544:58 - row
544:59 - we have logical keys we've just marked
545:00 - those those are strings and then we
545:01 - things like
545:02 - you know rating length and count they
545:04 - just kind of go in here and now we have
545:06 - to
545:07 - model a relationship so we do is we in
545:10 - the table that
545:10 - the relationship starts from we put one
545:13 - more column in
545:14 - and this is the one i will name album id
545:17 - and that just
545:17 - is an integer column that's going to
545:19 - record the album id so there might be
545:21 - this might be
545:22 - 16 and then 16 goes in here so there's
545:25 - one of these columns that's a foreign
545:26 - key
545:27 - that points to this and that's why it's
545:29 - foreign this is a key that's not in the
545:31 - track table this is a key
545:32 - in the album table that we're pointing
545:34 - to and so there's a foreign key
545:37 - and that's what we have to do and we
545:38 - just do that over and over and over
545:40 - again
545:40 - and we can quickly convert that picture
545:43 - that was a logical picture
545:45 - to having every table has a primary key
545:48 - and every time we have a starting point
545:50 - we have a foreign key
545:52 - foreign key and then foreign key and
545:54 - then we mark these things as logical key
545:55 - logical key logical key and we'll see
545:57 - how we do that
545:58 - and so that's the picture now we have a
546:00 - picture of exactly
546:02 - how we're going to lay these tables out
546:03 - in the fields that we need in these
546:04 - tables
546:06 - so we're going to do a create table
546:09 - statement
546:15 - and i've got this create table statement
546:17 - sitting there
546:22 - and so this one's going to be a little
546:24 - bit different we're going to say create
546:26 - table artist
546:28 - and the id field is integer
546:32 - and it's we're going to add all of this
546:34 - stuff this is
546:35 - adding to the column to tell it
546:38 - additional stuff it's a primary key
546:40 - which means we're going to use it to
546:41 - look up a lot
546:42 - it's automatically incremented which
546:43 - means the database is actually going to
546:45 - provide this number for us as we insert
546:46 - records
546:47 - we not it's not allowed to be null it's
546:49 - not allowed to be empty
546:51 - and it's supposed to be unique and then
546:53 - it's going to have the artist is going
546:54 - to have
546:55 - um a name column a name column that's
546:58 - just
546:59 - text so let's do that
547:03 - we already have our users and this is
547:05 - now we're going to do a create table in
547:07 - this sql and you can do that that's okay
547:09 - that's totally fine
547:10 - and we have to get this right and we say
547:12 - away we go
547:13 - and so now if i take a look at database
547:15 - structure
547:16 - i've got a users table as well as that
547:18 - that users table we're playing with
547:19 - before
547:20 - and uh this artist table let me go ahead
547:24 - and
547:24 - delete this users table just to say
547:26 - goodbye
547:27 - okay so now we have the artist table and
547:29 - we take a look and it's got an id
547:31 - and it knows all about this stuff okay
547:35 - so that created the table
547:38 - we're going to keep doing this the next
547:40 - thing that we're going to show here is
547:41 - we're going to show
547:43 - the foreign key right so artist id is
547:46 - just an integer
547:47 - in some database languages like mysql
547:49 - and oracle you would put more stuff here
547:50 - to say this is a foreign key blah blah
547:52 - but in sqlite we keep it simple and just
547:54 - say that is an integer column
547:56 - that's a foreign key the album table has
547:59 - a primary key and a foreign key and then
548:01 - the title
548:08 - so we'll go back and we'll grab that
548:10 - text out of my little page
548:13 - just create table go back to execute sql
548:18 - and then run that
548:24 - and we'll continue we'll just the genre
548:26 - table has an id
548:27 - on it and um primary key audit you'll
548:30 - just copy and paste these
548:32 - uh that whole thing you do that over and
548:33 - over and over again so we'll go in here
548:37 - and run that one and so the
548:40 - last one we're going to do
548:45 - is the track table and the only thing
548:47 - that's kind of weird about the track
548:48 - table is it's got two foreign keys
548:50 - right it's got an album id and genre id
548:52 - once you draw the picture you just sort
548:53 - of
548:54 - literally translate these things it's
548:55 - got two foreign keys and a primary key
548:57 - that's pretty much just like
548:59 - all those other primary keys
549:04 - and you know integer counts an integer
549:06 - and length is an integer
549:07 - all that stuff and now we we've got it
549:10 - so if we take a look at our database
549:11 - structure we're going to see that
549:12 - our album genre and track are all set up
549:16 - and these are no columns that we just
549:17 - made with those create statements
549:20 - okay
549:25 - so now let's insert some data this first
549:27 - insert statement is kind of important to
549:29 - take a look at
549:30 - so insert into by the way the keywords
549:32 - can be upper a lower case
549:33 - table name columns now this table has
549:37 - two columns it has id and name but we
549:39 - told the database that id was auto
549:41 - increment
549:42 - so it's going to actually give us the
549:44 - number we're going to it's going to
549:45 - assign the number
549:46 - rather than make us assign we could make
549:48 - it be one two three but we say hey
549:50 - database you're good at this
549:51 - why don't you make it one two three and
549:53 - so there is going to be a record that
549:55 - it adds lead zeppelin so let's take a
549:57 - look at that
550:01 - so we'll insert led zeppelin
550:06 - oops
550:09 - over to sql insert led zeppelin and run
550:14 - it so now if i look at database
550:16 - structure
550:17 - and i look at the let's look at browse
550:18 - data and look at the artist database you
550:21 - will see that i put led zeppelin in
550:22 - but this id field here was auto
550:25 - incremented
550:26 - and so it it was put there by the
550:28 - database
550:29 - and now when we do the next insert which
550:31 - is ac dc
550:40 - and we take a look at the data we'll see
550:43 - that ac dc
550:44 - is 2. now if you're writing this in a
550:46 - program
550:48 - if you're going to write this in a
550:49 - program you can get these numbers back
550:51 - from the database in your program
550:53 - but i'm not writing this in a program so
550:55 - i have to remember that one is zeppelin
550:58 - and two is acdc so i'm gonna keep myself
551:01 - a little cheat sheet here to remember
551:02 - that
551:03 - um because everywhere else in the
551:05 - program that we're gonna say led
551:06 - zeppelin i gotta say one now because
551:08 - the artist the uh the artist id of one
551:11 - means led zeppelin in those rows
551:13 - and so now we're going to go back and
551:15 - we're going to take a look at the next
551:16 - one
551:17 - um and now we're going to put the genre
551:20 - in
551:20 - if you think about it we're working from
551:21 - the leaves out where
551:23 - the track will be the last table that
551:24 - will update because you have to define
551:26 - the keys
551:27 - for things like rock and metal and led
551:29 - zeppelin and all those other things
551:30 - and again even though the genre table
551:33 - has two columns id and name
551:35 - we're only going to specify the name and
551:36 - let the database assign the value
551:41 - so i'm going to insert both of these and
551:43 - use a semi the semicolon trick
551:47 - put a semicolon here and a semicolon
551:50 - there
551:51 - and run that and so if i take a look at
551:55 - my
551:56 - brows data and i look at the genre it's
551:58 - assigned one to rock
552:00 - and two to metal i'm going to write that
552:01 - down
552:03 - one rock to metal
552:07 - i should have done something like rock
552:08 - and country because i can't even tell
552:10 - the difference between rock and metal
552:11 - but whatever that's
552:13 - my musical skill is not what's at issue
552:16 - in this class so now
552:19 - we're going to put an album in the album
552:21 - is the first thing that has a foreign
552:23 - key so if you remember the thing
552:24 - the album points to artist and so that
552:27 - means it has a foreign key of artist id
552:29 - and so we have to explicitly say this
552:32 - because word the system doesn't know
552:34 - which artist who made who is but we know
552:36 - that who made who is acdc
552:39 - and that's two and so we know to put
552:41 - artist id in so we'll say insert into
552:43 - album title artist id
552:45 - and so we have to know what this two
552:46 - number is and of course because we
552:49 - have our happy handy diddle handy little
552:51 - cheat sheet
552:55 - we can go over to execute and run that
552:58 - and i'll put a semicolon there and a
553:00 - semicolon there
553:02 - and run it and so now we have
553:07 - in the um in the album field
553:11 - we now have this and so these this was
553:13 - assigned and so who made who
553:15 - still have to write down that um
553:18 - who made who is album one
553:23 - and album two is led zeppelin iv
553:26 - that makes it even more complex because
553:27 - the name of the album is a roman numeral
553:29 - four
553:30 - i'm sure i can figure that out okay
553:34 - so the next thing that we're going to do
553:36 - is we're going to insert the track
553:37 - record
553:38 - now if you think about the track record
553:40 - the track has two foreign keys
553:42 - and um
553:45 - and it's got a lot of stuff it's got the
553:46 - title it's got the rating length count
553:48 - but then we got the two foreign keys and
553:49 - so
553:50 - we have to know these numbers so this
553:53 - this 2 1
553:54 - this 2 1 this 1 2 is the genre
553:58 - we're specifying the genre and the album
554:00 - that this track is from
554:02 - by those numbers now again we have to
554:05 - use this cheat sheet
554:06 - but if this was a program the program
554:08 - would know that
554:10 - one was zeppelin and um you know our one
554:13 - was who made who and two was led
554:14 - zeppelin iv
554:15 - and so that the programs this this kind
554:17 - of stuff is easier for the program
554:19 - to understand than for us to keep track
554:21 - of and understand
554:22 - but just just so we can get through
554:24 - these few records
554:26 - and that's why i rely so heavily on my
554:28 - cheat sheet so here we are
554:30 - all with all these numbers the the
554:32 - foreign keys are the tricky part here
554:34 - everything else is really quite
554:35 - straightforward
554:36 - so now i'm going to insert four records
554:38 - into my track table
554:41 - [Applause]
554:46 - and then run that okay
554:50 - so if i browse data and i look at my
554:52 - track table
554:54 - this column here this id that's the
554:56 - primary key the track table and then
554:58 - here are the two foreign keys
554:59 - now now the interesting thing is now
555:01 - there is replication
555:03 - in these columns but the numbers are
555:05 - what's being replicated and that's okay
555:08 - we went a long time just not to put
555:11 - led zeppelin four in twice we could have
555:14 - made this a string
555:15 - but by making this an integer it saves
555:17 - tons of storage and makes it super fast
555:19 - that turns out to be
555:21 - one of the key things that makes
555:22 - databases super fast is
555:25 - using these integers
555:28 - so we take a look at all this stuff we
555:29 - see that in a sense by using these
555:31 - little numbers
555:33 - we are pointing to rows in other tables
555:35 - the foreign keys are always pointing
555:37 - they always point to their id so these
555:39 - foreign keys are out here this is the
555:41 - primary key up here
555:42 - and they always point to so now that
555:44 - we've carefully constructed our
555:45 - relationships in the tables
555:47 - we need to reconstruct the data to show
555:50 - our users
555:52 - and you can kind of see how you would go
555:53 - pull this stuff together but there's a
555:54 - wonderful capability in relational
555:56 - databases called
555:57 - join that brings this all back together
556:01 - and so we have done this for efficiency
556:03 - of storage efficiency of scanning
556:05 - etc but we do need to traverse these
556:08 - foreign keys at times and
556:11 - the database software will do this for
556:13 - us automatically
556:15 - so the join operation basically is a way
556:17 - to specify in a select statement that
556:19 - you want to pull data
556:20 - out of more than one table and then
556:22 - specifying using what's called the on
556:23 - clause
556:24 - exactly how you want that data pulled
556:26 - out
556:28 - and so here we go we already have
556:32 - a a table an album table to the artist
556:35 - table
556:36 - and the foreign key and we want to in
556:38 - effect pull data
556:40 - from both the album and the artist the
556:42 - album title and the artist name
556:44 - and we want to show that and so we're
556:46 - going to say select which is the same
556:48 - select statement
556:49 - here's a little different syntax this is
556:51 - the list of fields this is
556:52 - table dot field so it's the album title
556:56 - and the artist dot name comma there from
556:58 - the album
557:00 - and i always start with where the little
557:02 - arrow starts from album
557:04 - joined with so that is going to can walk
557:07 - down this connection
557:08 - from album to artist album joined with
557:11 - artist don't say with i just say it
557:14 - on and then this is the conditions upon
557:17 - which that join is going to happen
557:19 - when the album's artist id which is this
557:22 - column here
557:22 - alums albums artist id matches
557:26 - think of that as is equal to or matches
557:28 - the artist's id
557:29 - and so it only connects the rows here
557:32 - when there is a match between these
557:34 - two tables and so if we look at this and
557:37 - we see that
557:39 - you know this one matches this one and
557:41 - this one matches that one and so it's
557:42 - the join
557:43 - connects conditionally and it can
557:46 - connects when the on clause is satisfied
557:48 - and so when this whole join runs this is
557:51 - what we get
557:53 - so you select all this stuff now this is
557:55 - an abstraction are you writing a loop
557:57 - are you doing two nested loops how are
557:59 - you exactly bringing all this data
558:00 - together
558:01 - we don't care about that because that's
558:03 - the beauty of sql that's the beauty of
558:05 - how we do this in a database so now if
558:08 - we we can just run this command
558:10 - so let's grab this command select
558:13 - track title genre name from track join
558:15 - genre that exact
558:16 - query case case of keywords doesn't
558:19 - matter
558:20 - and we go over here and we run this as
558:21 - sql and we run it
558:24 - we get oops i got when
558:27 - i got too far
558:33 - let's do this one so let's do that one
558:34 - there select artist name
558:38 - i have to add that one to my little
558:40 - cheat sheet the next time you see the
558:41 - cheat sheet it'll be right
558:44 - so the title so this is coming from one
558:46 - table and that's coming from another
558:48 - table
558:50 - okay so that's one
558:53 - so here is something we can do that
558:56 - gives us a little more detail on that
558:58 - we can say so so
559:02 - this is where the connection so you can
559:03 - think of the join as sort of spreading
559:05 - one table and connecting it to the other
559:07 - table and
559:08 - so what we're going to show here is it's
559:10 - exactly the same the thing we're going
559:12 - to do
559:12 - is we're going to add these two columns
559:14 - so you can see where the match happens
559:16 - and so this this is one table this is
559:19 - another table
559:20 - and these are the these are the the kind
559:22 - of columns in common even though they're
559:24 - not they're the columns that match
559:26 - this is where the on clause is happening
559:28 - right we've we have taken
559:34 - this table joined with this table
559:38 - on these two things connecting with each
559:41 - other
559:42 - so you can almost in some language some
559:44 - variants of sql this would even be a
559:45 - where clause
559:46 - so you connect these two rows but only
559:48 - connect them when those two numbers
559:50 - match so so you can see
559:54 - i mean if we run this i'll just run this
560:02 - and again you just see these this is
560:04 - where it connects okay
560:06 - now interestingly
560:10 - we can see what happens and what the
560:12 - purpose of the on clause is
560:15 - if we omit it so this is exactly the
560:18 - same as that previous query
560:19 - except there's no on clause so it's
560:22 - select all four of those fields
560:23 - from the track joined with the genre so
560:26 - it's basically taken the track
560:27 - table and the genre with a join but no
560:31 - on clause
560:32 - so it's not filtering for matches this
560:35 - is a match this is a match
560:37 - that's a match that's a match but we
560:40 - don't have a non clause so the matchness
560:42 - doesn't matter and so you're going to
560:43 - get all possible combinations
560:45 - and literally if there were you know 10
560:48 - on one side and
560:50 - 30 on the other side you would get 300
560:52 - rows
560:53 - in that join so it'd be all combinations
560:56 - except the on clause reduces the
560:57 - combinations and you might think
560:59 - whoa this is really inefficient and i
561:01 - will say that's what my first reaction
561:02 - was
561:03 - when i first saw this but it's not
561:05 - inefficient
561:06 - that's the beauty of abstraction that's
561:08 - the beauty of sql you say do it
561:10 - and and it just figures that out so
561:13 - um let me grab this and you will see
561:16 - that we can run this one as well
561:18 - and that kind of gives you why the on
561:20 - clause is important
561:22 - because now we have a whole bunch of
561:23 - these things and the on clause
561:25 - just filters that out so if we would
561:27 - just add the on clause back in
561:30 - then that would only show the ones we
561:31 - showed on the previous slide
561:33 - so that's why the on clause is important
561:35 - the join is like all possible
561:37 - combinations of all
561:38 - pairs of rows between these two tables
561:40 - on is
561:41 - oh but only where these two things match
561:43 - now you might think
561:44 - that it's inefficient but the on clause
561:46 - turns out to be the way it becomes
561:52 - efficient okay
562:06 - so now we're going to do the same thing
562:08 - where we're just going to take the track
562:09 - title in the genre we're going to
562:10 - connect that together
562:11 - together so we select this we're going
562:14 - to we need to join from one table join
562:16 - to the genre table with an on clause and
562:18 - so
562:19 - we're going to make those connections
562:20 - and the only thing we're going to look
562:21 - at is the title
562:23 - and the genre name
562:30 - oh oops and then
562:33 - run that and so we got those title and
562:36 - genre name
562:37 - now the thing you'll notice is for the
562:40 - first time
562:41 - we now have replication of string data
562:43 - in the vertical dimension
562:45 - that's okay because the data is not
562:48 - replicated in the database the data
562:50 - is now replicated as a result of the
562:51 - join and so we are going to reconstruct
562:54 - what the user wants to see which the
562:56 - user originally all the way back to the
562:58 - beginning
562:58 - wanted to see the duplicate information
563:00 - in the vertical axis
563:02 - but now we're reconstructing it we
563:04 - didn't waste the space
563:06 - or performance in our database but we
563:08 - still have to show them
563:09 - and so now the next thing we're going to
563:11 - do
563:13 - is a monster we're going to reconstruct
563:15 - across
563:16 - all four tables and you might think this
563:18 - is really hard and
563:19 - and sure it's going to be a little
563:21 - tricky but as long as you file the
563:23 - naming convention and the naming
563:25 - convention makes sense we're going to do
563:26 - a select from
563:27 - the track's title the artist name the
563:29 - album's title and genre name
563:32 - from the track join genre join the album
563:35 - joined artists
563:36 - so the joints follow the little arrows
563:38 - right and then the on clause
563:41 - qualifies each of those arrows when to
563:43 - follow the arrow
563:45 - and then this becomes pretty easy it's a
563:47 - foreign key the tracks
563:49 - genre id that's a foreign key equals
563:52 - genre dot id the primary that's primary
563:55 - key
563:55 - that's a foreign key because i name it
563:57 - that way and i know that this goes to
563:59 - that genre
564:00 - table because i name it that way and
564:03 - tracks album id is equal to the album's
564:05 - id foreign key
564:06 - primary key and albums artist id is
564:10 - equal to art assigned e
564:12 - after a while you could type these
564:13 - pretty fast as long as you follow a name
564:15 - and convention and
564:16 - and you know the naming convention so
564:18 - this looks like it's really hard to do
564:20 - but after a while
564:21 - it's really just a pattern so let's go
564:24 - ahead and
564:25 - run that one
564:29 - and it will assuming we've done
564:31 - everything right
564:33 - replicate all the data so there's all
564:34 - kinds of vertical data now being
564:36 - replicated
564:37 - every column has vertical data again
564:39 - it's not in the database the select and
564:41 - the join are reconstructing
564:43 - vertical data as it needs to be shown to
564:46 - the user
564:48 - and so if you've been following along
564:51 - probably a couple hours later now we
564:54 - started with a picture that was our
564:55 - mock-up of what we wanted our user
564:57 - interface to look like and it had
564:58 - vertical stuff and we're like ah
564:59 - we can't put that in a database model
565:02 - and then we
565:03 - carefully build a database model that
565:04 - didn't have the data and then we're like
565:06 - ah we got to reconstruct it so we use
565:07 - join to reconstruct it
565:09 - and so after all that we went here
565:12 - with a clean little model with four
565:14 - tables all beautifully connected
565:15 - together
565:16 - and then we had to join it all back
565:18 - together so join reconstructs it
565:20 - and again the key is the storage is
565:23 - efficient
565:24 - their scanning is efficient and we still
565:26 - use the join to produce the output
565:28 - that we ultimately want with all the
565:30 - sort of vertical representation
565:32 - the vertical replication that our users
565:35 - really want to see
565:36 - so so one more kind of relationship
565:39 - this is that was called a one-to-many
565:41 - relationship that was actually three
565:43 - one-to-many relationships and the other
565:45 - major relationship is what's called a
565:47 - many-to-many relationship
565:55 - [Music]
566:08 - [Music]
566:14 - so our last major topic is called many
566:15 - to many relationships and up to now
566:17 - everything that we've done is what's
566:19 - called a one-to-many relationship
566:21 - and that is there are many tracks
566:24 - associated with one album there are many
566:26 - albums associated with one artist there
566:28 - are many tracks associated with one
566:30 - genre
566:31 - and you can think of labeling and as you
566:33 - look at data models they put
566:35 - little labels on each arrow that tell
566:37 - you which end of the arrow is the many
566:39 - and which end of the arrow is the one
566:42 - and so in this case
566:43 - the foreign key is pointing to there are
566:45 - many of these rows over here many rows
566:47 - that point to one row over here
566:49 - so it's a many to one relationship there
566:52 - are various ways sometimes
566:53 - sometimes i'll put two arrows at this
566:55 - end and one arrow at that end
566:56 - but whatever it is this kind of thing
566:59 - we've been showing is a many-to-one
567:01 - relationship and that's
567:02 - probably the most common thing but there
567:04 - are times
567:05 - when you just can't model things with a
567:08 - one-to-many relationship
567:11 - so like if you have a mother and
567:13 - children well that's uh that's a many to
567:15 - one relationship
567:16 - and it's just fine and that works fine
567:18 - but sometimes
567:20 - you have a many-to-many relationship in
567:21 - that there might be many books
567:24 - one book has many authors and uh each
567:27 - author has many books and so you don't
567:28 - have like the one side there's no
567:30 - one and so you have to end up building a
567:34 - table that what we call
567:35 - i call it a connector table they call it
567:37 - a junction table on wikipedia
567:39 - but we need a little table that allows
567:41 - us to break a many-to-many relationship
567:43 - into an effect too many to one
567:45 - relationships and a connector table
567:47 - and so this is a connector table so you
567:50 - could think of this as
567:51 - you know there are many many links here
567:54 - but we don't have a way
567:55 - to model the many over here to here
567:58 - and so what you do is you basically say
568:00 - oh there's a lot of these things
568:02 - there's many that go to the one the many
568:04 - that go to the one
568:05 - and then in here you sort of create that
568:07 - many-ness that you want to create
568:10 - so it's probably just as easy to look at
568:12 - a sample of this
568:14 - so let's uh imagine a learning
568:17 - management system
568:18 - uh where you're taking a class and there
568:20 - are some people that are
568:21 - teachers and some people that are
568:22 - students and many students are
568:24 - members of many classes a student can be
568:27 - part of many classes and a class has
568:29 - many students in it so you can't really
568:31 - find the one
568:33 - end and so what we do is we make a table
568:34 - called membership
568:36 - and in that table of membership we
568:37 - actually often don't put a primary key
568:40 - in it all
568:40 - we simply put in two foreign keys
568:44 - and if we're going to put a uniqueness
568:45 - constraint we put a uni a combination
568:47 - of the two uh foreign keys as the
568:50 - uniqueness constraints so we say
568:53 - there could be duplicate user ids and
568:55 - duplicate course ids but there can only
568:56 - be
568:57 - you know user id course id combinations
569:00 - that has to be unique so you can make
569:01 - unique be more than one
569:03 - um one column and so if you imagine a
569:06 - course table
569:08 - and a user table there's a user id the
569:10 - name and email the course has a title
569:11 - and an id
569:12 - and then we have this little table that
569:14 - just is the connector table
569:16 - that shows the points out and so we can
569:19 - expand this membership
569:20 - so let's take a look at how that works
569:23 - so
569:24 - we're going to create some tables and
569:28 - the
569:31 - these are very classic tables because
569:33 - these are the
569:34 - the one end of it so these are the one
569:36 - end of it so it has a primary key a
569:38 - title
569:39 - a logical key email there's a primary
569:42 - key for course
569:42 - and then there's text so we had this
569:44 - unique to kind of indicate that it's a
569:46 - logical key we're not going to allow
569:47 - ourselves
569:48 - to put any duplicates in here now that
569:50 - the connector database here
569:53 - is a table member and it has two foreign
569:56 - keys user id and artist
569:58 - course id and you can easily model some
570:00 - data here so i'm going to model role
570:02 - which is going to be zero equals student
570:04 - and one equals instructor
570:07 - and then i'm going to indicate that the
570:08 - primary key or uniqueness constraint
570:10 - is the combination of the user id and a
570:13 - course id
570:14 - now when we say the primary key it it
570:17 - both limits our ability to insert
570:19 - duplicates
570:20 - but it also allows the database to
570:22 - optimize its scanning because it knows
570:24 - that that combination
570:25 - is always unique and so it can organize
570:28 - its disk structure
570:29 - and storage structure to understand how
570:32 - to look things up more efficiently
570:33 - knowing that
570:34 - once it's found a user id course id
570:36 - combination it doesn't have to look any
570:37 - farther
570:38 - because they're unique and so all of
570:40 - these contracts that we add
570:41 - speed things up save storage and makes
570:44 - things more efficient
570:45 - but in ways we don't always know exactly
570:47 - how they happened
570:48 - and so let's go ahead and make these
570:51 - let's go ahead and make these guys
570:54 - i think i will start with a new database
570:57 - i'm going to call it lms for learning
571:00 - management system
571:02 - uh no i don't really wanna do that one
571:05 - and so i'm going to not create the table
571:08 - i'm gonna do everything in sql
571:10 - and so let me see if it's in my cheat
571:12 - sheet nope that's not in my cheat sheet
571:14 - so i have to fix the cheat sheet again
571:16 - for you by the time you see a cheat
571:17 - sheet all these things will be in there
571:19 - so i'm going to go in here and i'm going
571:21 - to grab create table user
571:26 - actually i'm going to grab them all
571:27 - watch this
571:30 - grab them all highlight all these
571:34 - go over to sqlite browser blast them all
571:37 - in
571:38 - and then i'll put a semicolon at the end
571:40 - of each one of the statements
571:45 - and i want to run them
571:49 - so did i look does it look good yup yup
571:52 - yup
571:53 - so i got a course i got membership two
571:55 - foreign keys and i got user so that all
571:58 - looks good
571:59 - okay so now we're gonna have to insert
572:02 - some data in
572:06 - and we're gonna insert from the outside
572:08 - in and so we're going to just put the
572:09 - name and email
572:10 - the id will be automatically assigned
572:12 - for the users
572:14 - and we're going to do the same thing the
572:15 - the id and the courses will be
572:17 - automatically assigned
572:18 - so let me just grab all this stuff
572:22 - go into sql that has the semicolons at
572:25 - the end already for me thank you very
572:27 - much
572:28 - now i'm going to run it and if i take a
572:31 - look at my data
572:32 - now i've got primary keys for the
572:34 - courses and i've got
572:36 - primary keys for the users and i've got
572:38 - nothing in the membership table
572:40 - and i have to of course have to remember
572:42 - what these values are because
572:44 - jane is one and that is two and sue is
572:46 - three right
572:47 - and python is one sql is two is three
572:51 - and so when i go into membership
572:53 - i've got two foreign keys here in a row
572:55 - and they just have to be
572:57 - for the course person combination and so
573:01 - it's a little tricky to figure all this
573:02 - stuff out but again these are just
573:04 - numbers and if you look at these numbers
573:07 - user id course id role well user id one
573:09 - is in course one
573:10 - user id is in course as the teacher user
573:13 - id two is in course
573:14 - one as the student etc etc etc so i'm
573:17 - making these connections by just putting
573:18 - these
573:19 - little numbers in and once again
573:21 - conveniently i have all my semicolons
573:23 - perfectly in place
573:25 - so i go to sql
573:28 - and then i run that and then i take
573:32 - and i look at my membership data and
573:34 - there it is so two foreign keys and a
573:36 - bit of data modeled at the connection
573:38 - that's the way we say that
573:39 - the role is modeled at the connection
573:42 - so now we build all this stuff up we can
573:44 - write some queries
573:45 - that take a look at this and so
573:49 - what we're going to do is we're going to
573:50 - look at who's in what course and what
573:52 - role
573:53 - are they and we're going to
573:56 - sort this in a nice way so let's just
573:57 - take a quick look
573:59 - at the code we're writing we're going to
574:01 - do a select from
574:02 - three tables the username the member
574:04 - role
574:05 - the course title so we're in effect
574:08 - we're not showing any of the foreign
574:09 - keys or the primary keys
574:11 - we're going to go from the user table
574:13 - join to the member table join to the
574:14 - course table
574:15 - this is pretty easy to write you know
574:17 - there are three tables you want to go
574:18 - across
574:19 - the on clause is also very easy to write
574:22 - right the on clause models each of these
574:24 - connections
574:25 - where the members user id
574:29 - is equal to the user's id
574:32 - and where the member's course id
574:36 - is equal to the course id so we're going
574:38 - to connect can we're going to
574:39 - concatenate
574:40 - all three of these tables together but
574:41 - we're going to only keep rows that where
574:43 - it matters
574:44 - now that this is not this role doesn't
574:46 - participate
574:47 - but we're going to print that out and
574:49 - we're going to order it by
574:50 - the course title first and then the
574:53 - member role
574:54 - second and the name third and so let's
574:57 - run that
575:09 - so we've reconnected it so ed's the
575:11 - teacher of the php class who is the
575:13 - student in the php class
575:14 - jane is the teacher in the python class
575:16 - ed's a student and sewer students in the
575:18 - python class
575:19 - ed's the teacher in the sql class and
575:21 - jane is the student in the sql class
575:23 - and so we have many people are the in
575:26 - there are many students in many classes
575:28 - there and so we have modeled that but we
575:31 - model that
575:32 - with this sort of table and if you look
575:34 - at a piece of software that i've written
575:35 - called sugi which is a
575:37 - standalone learning management system
575:39 - that's built with learning tools
575:40 - you will see in anything we're
575:42 - membership where we have
575:44 - a we have a user table we have a context
575:48 - which is also the course table
575:49 - and then we have a membership table and
575:51 - you look here's these foreign keys it's
575:52 - kind of like that's the many side that's
575:54 - the one side
575:55 - many to one and so this you know this is
575:58 - now a
575:58 - an effect of many to many court
576:02 - between these two but then it's modeled
576:03 - as a series of
576:05 - many to one many to one relationships
576:07 - and you see this all the time
576:09 - in all kinds of things where membership
576:11 - or other kinds of things are necessary
576:14 - many to one
576:15 - of many too many so
576:18 - with all that there's so much to learn
576:21 - it's it's both
576:22 - easy and complex at the same time it's
576:24 - easy when someone shows you how to do it
576:25 - but at some point
576:26 - you will learn how to build database
576:28 - models and you realize oh it wasn't so
576:29 - bad
576:30 - uh it takes a while to get used to them
576:32 - um this really just is a
576:33 - quick walk but the the bottom line is
576:37 - the what we just did seems like
576:40 - it was wow that's nice do you really
576:44 - have to do that and the answer is
576:45 - if you're going to scale it all you
576:47 - absolutely have to because you simply
576:49 - can't
576:50 - read and write data sequentially you
576:52 - can't read through
576:53 - update one little piece of data in a
576:55 - file by reading all the way through and
576:56 - then writing a new copy of the file that
576:58 - could take
576:58 - seconds and in a system like an online
577:02 - system you get a
577:03 - 100th of a second to do something like
577:04 - that and the databases make it
577:06 - so that happens in a thousandth of a
577:08 - second so you ultimately you simply have
577:10 - to take advantage of this you just
577:12 - can't if you're going to modify data you
577:14 - can read data from flat files but
577:15 - even if you're going to read a lot of
577:16 - data if it's big it slows down terribly
577:19 - so it might seem like there's a
577:22 - trade-off that you could debate whether
577:23 - this is worth it but
577:24 - if you're going to deal with a lot of
577:26 - data it's you've got no choice
577:28 - it's really not as much a trade-off as
577:30 - you think
577:31 - so this has been a quick romp through
577:34 - databases we talked a little bit about
577:36 - indexes
577:37 - there are constraints we talked a little
577:38 - bit the not null stuff we've talked
577:40 - about that
577:41 - the uniqueness that's a constraint
577:44 - another whole area is what's called
577:45 - transactions and that's the
577:47 - locking of little areas so you can read
577:49 - an area then lock it
577:50 - and then update it to make sure no one
577:52 - else reads it uh and and so they make
577:54 - sure they either get the
577:56 - the version before uh you looked at it
577:58 - or
577:59 - before you change it or after you change
578:00 - it and so that's how
578:02 - you make sure that you can't do things
578:05 - having to do with
578:06 - um bank account uh balances and get
578:09 - yourself in trouble so these are a lot
578:11 - of sql
578:12 - it's really fascinating sql is a
578:13 - fascinating thing
578:15 - to use and learn and performance tune
578:17 - and enjoy
578:19 - so relational databases are cool this
578:22 - gets us started
578:23 - the the big thing is don't allow
578:27 - replication vertically of string data
578:28 - pull that out into a separate table
578:30 - establish a primary key and then have
578:32 - foreign keys that point to that primary
578:34 - key
578:34 - it is not just how much data you store
578:37 - it's sort of a compression way
578:38 - as a way of compressing data you might
578:40 - think strings take no data but they do
578:43 - numbers take a lot less data and it's
578:45 - both how much data that's stored but
578:47 - also how much data has to be scanned
578:49 - and that way joins work that's part of
578:52 - the magic of why oracle's such as
578:54 - such a successful company it's a bit of
578:56 - art form and it's something
578:58 - that you can work your whole life and
579:01 - always get better at
579:11 - [Music]
579:36 - hello everybody welcome to python for
579:38 - everybody we are doing some code
579:39 - walkthroughs if you want to follow along
579:41 - with the code you can download the
579:43 - source code
579:44 - uh from python for everybody dot uh the
579:46 - python for
579:47 - everybody website okay so the code we're
579:50 - playing with today is
579:52 - tw friends.py and this is a
579:55 - step beyond the simple tw spyder
579:58 - it is a restartable spider but we're
580:00 - going to data model things a little bit
580:02 - differently we're going to have two
580:03 - tables and we're going to have
580:04 - a a many-to-many relationship
580:07 - except that it's sort of a many-to-many
580:09 - relationship between the same table
580:11 - which is okay
580:13 - friends is a twitter friends are
580:16 - a directional relationship and so
580:20 - uh so we start out here in twfriends.py
580:23 - remember that the file hidden.py i'll
580:26 - show it to you but i'm not going to open
580:27 - it because i've got my keys and secrets
580:29 - in it
580:30 - so this hidden.py file you've got to
580:32 - edit that and you got to go to
580:35 - apps.twitter.com and get your keys and
580:37 - put them in there otherwise these things
580:39 - won't work but
580:40 - if you have twitter and you set your api
580:42 - keys up and you put them in hidden.py
580:45 - then all these things will work it's
580:46 - kind of fun actually and impressive
580:48 - not hard to do actually so
580:53 - the twitter url that's my library that
580:55 - reads hidden.py and augments the url and
580:58 - does all the oauth stuff
580:59 - json and ssl because twitter doesn't i
581:02 - mean because
581:03 - python doesn't accept any certificates
581:05 - even if they're good certificates so we
581:06 - kind of
581:07 - crush that here's our friends list that
581:10 - we're going to hit
581:10 - we're going to make a database
581:12 - friends.sqlite
581:14 - now here we're doing create table if not
581:16 - exists so what this really is saying is
581:19 - i want this to be a restartable process
581:20 - and i don't want to lose the data
581:22 - we're starting out uh we do not have
581:27 - uh sqlite any sqlite files and so this
581:30 - is going to create the database and
581:32 - create these tables
581:33 - but the second time we run it we're not
581:35 - going to recreate the tables we're not
581:36 - going to we're going to be able to
581:38 - restart this because we're going to run
581:39 - out
581:40 - of um we're going to run out of uh rate
581:44 - limit
581:44 - before uh we finish this but so we just
581:47 - have to wait however long the rate the
581:48 - temp takes to reset and we'll watch the
581:50 - rate limit go down
581:51 - and so we're going to have a people
581:53 - table and we're going to have an id
581:54 - a primary key and the name the name is
581:57 - going to be unique
581:58 - and whether or not we've retrieved it
581:59 - and that's kind of from a previous one
582:01 - but then there's the who follows who um
582:04 - the from id
582:05 - to two id and so this is a direction and
582:08 - we're going to put a uniqueness
582:09 - constraint in
582:10 - just like we do in many to many's that
582:12 - basically says the combination of from
582:14 - id and two id
582:15 - has got to be unique we don't allow
582:17 - ourselves to
582:18 - put duplicates of the combination so
582:21 - from id can be one in many records and
582:23 - two id can be one in many records but
582:25 - one
582:25 - one is only allowed once and
582:28 - this is the crud we have to do to
582:30 - convince python to accept the twitter
582:32 - uh certificate and so this is similar to
582:36 - some of the other stuff that we've done
582:37 - we're going to uh enter a twitter
582:39 - account or quit
582:40 - and if we hit enter by itself then we
582:43 - will actually go and retrieve
582:45 - a record that was not yet retrieved and
582:48 - now we're actually pulling out two
582:50 - values id and name
582:53 - and so we will we will grab fetch one is
582:56 - going to give us a two tuple basically
582:58 - and we're going to store that in id and
583:00 - account of course that's like
583:01 - this is this is coming back with a two
583:03 - tuple first of which is the id from the
583:05 - database
583:06 - limit one means we're only going to get
583:08 - one of these or zero of these if there
583:10 - are zero these
583:11 - that means there are no unretrieved
583:13 - twitter accounts retrieved equals zero
583:15 - well you'll see in a second that the all
583:17 - this new
583:19 - accounts we put in are the ones for
583:21 - which we haven't retrieved and again
583:22 - given that our rate limit we want to
583:24 - know
583:24 - which ones we've retrieved okay and
583:28 - um and so
583:31 - what we're going to do next is we're
583:33 - going to check to see if the person
583:35 - that we just checked which means the
583:38 - length of the account is great that we
583:40 - just
583:40 - were entered we're gonna check to see if
583:42 - they're already there okay
583:44 - and we're gonna select id from people
583:46 - where name equals so that's the one we
583:48 - just entered
583:49 - and we're going to fetch one and grab
583:51 - the first thing because we only we only
583:52 - got one thing in the select statement
583:54 - here
583:55 - and if this person that we just asked to
583:58 - see
583:59 - is not in the table that means this is
584:02 - going to fail
584:03 - we're going to do an insert or ignore
584:04 - this or ignore is kind of redundant
584:06 - because we just checked to see if it was
584:08 - there but we'll put that in just to be
584:10 - safe
584:11 - um and we're going to put the name in
584:13 - for as the new
584:14 - the new account that we're looking at uh
584:17 - and we're
584:18 - for indicating that retrieved is zero so
584:21 - that we will
584:22 - we will know that we haven't retrieved
584:23 - it yet you'll see that we'll update that
584:24 - in a second
584:25 - we commit it so that later selects will
584:28 - see this so that
584:29 - so you gotta do the commit
584:33 - the slater select wouldn't see the one
584:34 - we just inserted
584:36 - and we're gonna ask how many rows were
584:38 - affected and if it's not equal to one
584:40 - uh then we're going to complain about we
584:42 - inserted it and
584:43 - we are going to do this thing we're
584:45 - going to ask hey
584:47 - remember there was an id up there
584:51 - right here id integer primary key and
584:54 - we did not insert this here but we want
584:58 - to know what that id is and every time i
584:59 - was showing you that in lectures
585:01 - i was saying it's really easy in python
585:03 - to do this and that's we're saying
585:05 - this cursor did the insert but one of
585:07 - the things happens is
585:08 - after the insert we're going to grab the
585:10 - last row id which is the primary key
585:13 - that was assigned by sql
585:17 - okay and so that means that one way or
585:19 - another coming through this
585:21 - code here in line 45 one way or another
585:23 - we're either going to know the id of the
585:25 - user
585:25 - that was there before or we just
585:28 - inserted one and so we're going to know
585:29 - the primary key of the current user and
585:31 - you'll see why we need that so id
585:33 - is the primary key of the current user
585:36 - that we entered right here
585:38 - okay and now we're going to do is do the
585:41 - twitter url augment with the oauth and
585:43 - all the keys and the secrets and
585:44 - hidden.py
585:45 - instead we're going to go through let's
585:46 - count 1000. let's go count
585:49 - what the heck let's go 200 up to 200
585:51 - friends
585:52 - save now let's do 100. we'll keep it
585:55 - that way
585:56 - and then we're going to retrieve it and
585:58 - uh we're retrieving the account we're
586:00 - not going to print the nasty url out
586:02 - we could then we're going to open the
586:04 - url with the connection
586:06 - and then we're going to read that and
586:07 - we're going to get the utf-8 data from
586:09 - this and then we're going to decode that
586:11 - and we're going to have the unicode data
586:13 - so the data in string
586:14 - is a internal python string with all
586:16 - that data representing all the wonderful
586:18 - characters
586:19 - and of course we're going to ask url
586:21 - open to give us back the headers as a
586:24 - dictionary
586:25 - using this call and we can see what the
586:28 - how many we have left
586:29 - for the remaining right what's the
586:32 - remaining rate limit that we have
586:34 - okay and so then we're going to parse
586:36 - the data with json load
586:38 - s if uh oh wait i need to continue in
586:41 - here
586:43 - continue okay save
586:46 - um if we're going to parse this data
586:49 - we'll print it out right so that means
586:50 - that this
586:51 - this died which means it's not
586:53 - syntactically correct json basically
586:55 - and who knows if we're ever going to see
586:57 - that but at least
586:59 - when it blows up it'll print this data
587:01 - out we'll have to catch it
587:02 - and then it'll continue actually i'll
587:04 - make this a break
587:06 - because if that's blowing up that bad we
587:08 - should quit
587:09 - now we don't i don't yet know what
587:12 - happens when this rate limit says you
587:14 - can't have it
587:15 - and so but i do know that i expect when
587:18 - it's successful that there will be a
587:20 - key of users in this outer dictionary
587:23 - that we're going to get
587:25 - and if this outer dictionary that we're
587:27 - go if we if users is not
587:29 - in the parse dictionary then i'm going
587:31 - to dump out this data so that at least
587:34 - i can debug what happens when i've got
587:36 - some broken
587:38 - json so the difference between
587:41 - this code this code is going to fail
587:44 - when the json
587:45 - is syntactically bad meaning a curly
587:47 - brace isn't right or whatever
587:50 - this code will trigger when i get good
587:52 - json but i don't have a
587:54 - user's key in it okay
587:58 - so then once we've retrieved it we we're
588:02 - pretty happy with it we're going to
588:03 - update for our account that we are
588:05 - retrieving we're going to set this is
588:07 - one of our retrieved accounts
588:09 - okay and then what we're going to do is
588:11 - write a loop
588:13 - that goes through all the friends of
588:15 - this particular user that we're asking
588:18 - and gets their screen name prints it out
588:21 - and then we're going to
588:23 - check to see if this one is already in
588:26 - our people database because this is a
588:28 - spider we're grabbing accounts
588:30 - and uh and so we'll do a friend id
588:34 - and do a fetch one grab the subzero
588:36 - thing
588:37 - and if that works if this person's not
588:40 - in there
588:40 - this fetch one is gonna blow up which
588:42 - means we're gonna drop down to the
588:43 - accept code
588:44 - but if it does work we have friend id is
588:47 - the
588:48 - you know that we they they're there and
588:51 - they're already in our database right
588:52 - they just weren't retrieved okay and so
588:56 - now if we the friend id wasn't there
588:58 - we're going to do an insert into
589:00 - setting retrieve to zero and then we're
589:02 - going to commit
589:03 - right now remember row count
589:07 - is how many rows were affected by this
589:09 - last transaction ker.row count
589:11 - and we're going to die if that doesn't
589:13 - insert doesn't work this is unlikely
589:16 - unless somehow we've ran out of disk
589:17 - drive or something and we're going to
589:19 - grab the friend id
589:20 - as the as the key the last row that was
589:24 - inserted
589:24 - we're only going to insert one row so
589:26 - it's basically the primary key of the
589:28 - row that we just inserted
589:29 - so if you look at this code right here
589:33 - it comes out the bottom one way or
589:34 - another with friend id successful
589:37 - rights friend id is either they're
589:39 - already in our database
589:41 - or they're not and if we insert them
589:43 - then we have it
589:44 - and so now this count new and count old
589:47 - is just so i can print out a nice
589:49 - printout
589:49 - now we are going to insert into the
589:51 - friend table which is called the follows
589:53 - table in this case
589:54 - from id and two id those are the those
589:57 - are the two
589:58 - outward outward pointing uh foreign keys
590:02 - and we have the id of the account that
590:04 - we are retrieving the friends of
590:06 - and then this particular friend and so
590:08 - we're inserting the connection
590:10 - from this person to that person and then
590:13 - we commit it we want to commit these
590:15 - again so that
590:16 - later selects when the loop goes back up
590:19 - later selects get all of that data
590:22 - that's going on
590:23 - okay so we do want to commit from time
590:24 - to time and then we close the cursor at
590:26 - the very end
590:27 - okay so let's run this and see what
590:30 - happens
590:33 - okay so python tw
590:36 - friends dot py
590:40 - oh of course
590:43 - i am a refugee from python 2. so i
590:46 - always forget to type python
590:49 - okay so we're going to start if we take
590:52 - a look right now
590:53 - i'm going to start another tab over here
590:56 - and ls minus l
590:57 - star sqlite now that sqlite file
591:02 - is there right and it's actually made
591:04 - the tables if you go up here
591:06 - it ran all this stuff create the tables
591:08 - yada yada and we're sitting right here
591:10 - at this line
591:11 - as a matter of fact i think without
591:13 - causing too much trouble i can
591:15 - open that database and get into this
591:18 - database right here and there is no data
591:20 - in the follows table
591:21 - and there is no data in the people table
591:23 - it's completely empty
591:25 - okay so we're waiting for the first one
591:27 - and i'll go with mine dr
591:29 - chuck so it's retrieving the 100 friends
591:33 - and they all were brand new they're all
591:36 - inserted right
591:37 - um and so now if i hit refresh
591:40 - we will see that dr chuck is retrieved
591:44 - um who follows so these are all the
591:47 - people i follow
591:48 - one follows two so if we look at here we
591:51 - see that dr chuck follows stephanie
591:52 - teasley
591:53 - because we grab the followers of dr
591:54 - chuck you know we're going to have a
591:56 - record in
591:57 - all of the follows for all the ones that
592:00 - i did right so these are all the people
592:01 - i followed
592:03 - and we put them in okay so
592:06 - we can go back and
592:10 - we can let's see grab somebody let's go
592:12 - grab stephanie teasley
592:16 - and let's pull out her friends
592:20 - so we grabbed
592:23 - a hundred of her folks i got 14 left
592:25 - that's my
592:26 - x rate limit so i did stephanie teasley
592:28 - so let's go back here
592:30 - so you'll notice there's 101 there's
592:32 - probably going to be
592:33 - oh 182. uh that's interesting so we've
592:36 - retrieved dr chuck and stephanie teasley
592:38 - and let's go take a look in the friends
592:40 - table the follows table
592:42 - okay so we have all of people i follow
592:46 - now all the people stephanie follows
592:48 - okay so there we go so let's go ahead
592:51 - and do somebody else
592:52 - um let's see i think we both follow
592:56 - tim mckay where's tim mckay
593:04 - yeah let's follow tim mckay let's see
593:06 - what who tim follows see if we can get
593:08 - like an overlap
593:11 - oh we revisited some let's see if we can
593:13 - see this in the
593:14 - follows
593:19 - let's see people so we've got dr chuck
593:22 - retrieved into my case somewhere down
593:25 - here
593:31 - yeah it might take us a while before we
593:34 - get any really good overlaps uh
593:38 - let's see let's do a database call
593:42 - let's see let's do a database sql
593:50 - select
593:54 - count
594:05 - okay so let's just run this some more
594:07 - it's clearly working now one thing i can
594:08 - do here
594:09 - is i can hit enter and it will just pick
594:12 - one randomly
594:14 - so it grabbed live edu tv and i can
594:17 - and let's see how many i got left we got
594:19 - 12 left and now i can hit enter again
594:21 - and it picks another one
594:23 - uh that was the next one i was kind of
594:26 - picking them in order is it picking them
594:27 - in order let's go to people
594:30 - yeah it's picking these so it's gonna we
594:32 - can see that it's going to just do the
594:34 - first unretrieved person
594:35 - who's nancy let's let it retrieve nancy
594:38 - so it grabbed nancy
594:40 - new so we're finding some and this table
594:43 - is getting really big and so if we look
594:44 - at the people table we now have 455
594:47 - people
594:49 - and we have 467 following records
594:54 - and so there we go oops
594:58 - hit enter it does another one
595:01 - and away we go so you get the idea i can
595:04 - type quit
595:05 - to finish and just to give you a
595:09 - a a little interesting
595:14 - a bit of code to show you how to do
595:16 - selects i'm going to do this tw join now
595:18 - you'll notice that we're not talking
595:19 - oh let's show you one thing um ellis by
595:22 - nsl
595:23 - friends um star sqlite
595:28 - so this database has it so i can restart
595:31 - this process
595:33 - and run it again and the database is
595:35 - still there and so
595:36 - we just grab a swear trek
595:40 - um and so we can keep doing this and
595:44 - and so this data it keeps extending and
595:46 - so this is a restartable
595:48 - restartable process i can run it and
595:50 - then tell it to
595:51 - grab the next unretrieved one and so
595:54 - away we go right and um
595:59 - so that's part of it so so i can if i
596:02 - run out
596:02 - of my uh i've got eight left oh how many
596:06 - do i have left really
596:07 - let's keep going
596:12 - how many do i got left i got five left
596:14 - okay
596:15 - wait oh i guess we'll just run it out so
596:18 - i got four left
596:20 - you know what i should do is i should i
596:21 - can't change the code yes i can't change
596:23 - the code
596:24 - i can stop the code and i can quit the
596:26 - code
596:27 - so what i'm going to do is i'm going to
596:28 - change this code a little bit really
596:29 - quick
596:31 - and i'm going to print the headers of
596:33 - rate limiting
596:34 - at the beginning
596:38 - and at the end
596:45 - so now i can run it again i change the
596:47 - code hopefully didn't make a python
596:48 - error
596:49 - delta go get another one and a navarro
596:51 - and so i got three left
596:55 - oops we'll see what happens when i run
596:57 - out of rate limit
597:00 - run out of rate limit
597:03 - so we have one left hit enter
597:07 - hit ctrl k open source.org so we have
597:10 - zero left
597:11 - that worked now let's see what happens
597:14 - i don't know what happens next
597:18 - oh we blew up too many requests oh we
597:21 - got an http
597:22 - error 429 so that means that
597:26 - going for mark cuban uh that was in line
597:30 - 48 so the right thing to do would be
597:33 - in line 48 um
597:37 - we should really put this in a try try
597:39 - except blocked
597:41 - try accept block because it gives us an
597:48 - error
597:52 - uh print oh fiddlesticks
597:56 - how do i print the exception message i
597:58 - always am forgetting
598:00 - print failed to retrieve
598:06 - okay so we'll put that in
598:09 - now if i run it
598:17 - and then i have to put a break here
598:19 - because that's not a good break
598:27 - failed to retrieve not got to figure out
598:29 - oh see i never know
598:30 - how to print out the error message
598:34 - yeah so i have to i never rem
598:38 - see that's the weird thing about stuff
598:40 - is that i don't ever remember
598:41 - enough i don't remember the syntax what
598:44 - i say here
598:46 - to print the error message out so i'm
598:49 - going to go to google
598:50 - and i'm going to say print out the
598:54 - exception message in
598:59 - python print out the exception message
599:03 - in python
599:04 - oh python3 hello
599:11 - okay so let's go find it here in the
599:13 - documentation
599:17 - accept accept
599:24 - is this it is this what i say
599:42 - i just want to print out the message
599:48 - ah that's it except
599:53 - let's try this
600:09 - so this is part of python programming is
600:11 - like for me at least
600:13 - because i'm just not like a genius
600:14 - expert at this stuff
600:17 - [Laughter]
600:20 - this is one thing i like about python is
600:22 - you can guess stuff and sometimes you
600:24 - guess right
600:25 - so there we go we got the error we got
600:26 - the nice little error message and we see
600:28 - error 429 too many requests
600:30 - so that cleans that up nicely so we are
600:34 - we have run out of requests and
600:37 - on that it is a good uh good time to
600:40 - to say thanks for listening and uh i
600:43 - hope that you found this valuable
600:55 - [Music]
601:04 - so
601:06 - hello and welcome to our final chapter
601:09 - retrieving and visualizing data in this
601:11 - chapter we are going to basically
601:13 - bring this all together databases web
601:16 - services
601:18 - code loops logic and and we're going to
601:21 - solve a problem that is a multi-step
601:25 - data analysis we're going to
601:27 - find some data on the internet might be
601:29 - html might be an api or whatever
601:32 - and we're going to write a relatively
601:34 - slow process that's going to
601:36 - pull data slowly because these are all
601:38 - rate limited this is a slow and
601:40 - restartable process
601:42 - so you have to start this and what we're
601:44 - going to do is we're going to have a
601:45 - database that's going to
601:46 - hold the data that we're pulling and so
601:48 - this might take
601:49 - several days actually if you really have
601:52 - to do it
601:53 - and then you'll build up your data in
601:54 - your database and then what you tend to
601:56 - do is you tend to
601:57 - produce two databases one is kind of a
601:59 - raw database that you know is
602:02 - you really it's all of its data columns
602:05 - are aimed at
602:06 - helping you figure out what you've got
602:07 - to retrieve yet and what you haven't
602:09 - retrieved yet so that's kind of a
602:10 - crawling spidering process
602:13 - and then you find that the data is kind
602:15 - of nasty and ugly and
602:17 - you find that before you're going to do
602:18 - any analysis you probably want to clean
602:21 - and process it so you in a lot of these
602:23 - you're going to go from a raw database
602:24 - to a clean one
602:26 - and this is going to be really large and
602:28 - this is going to be really small
602:30 - and and you're going to do this sort of
602:32 - once but slowly and you'll do this
602:34 - as many times you need changing this
602:36 - program cleaning the data up over and
602:38 - over and over again
602:39 - and then you'll end up with really clean
602:41 - data and that's relatively small
602:42 - and you might run programs that loop
602:44 - through this to do visualizations or
602:46 - analysis or some things
602:48 - or whatever and so you'll actually sort
602:50 - of use this database as
602:52 - a source of information okay
602:55 - so that's the basic pattern of what
602:58 - we're going to work with now
603:00 - this is what i call personal data mining
603:02 - and if you're going to do this
603:03 - seriously python is used in lots of data
603:06 - mining activities but if you're going to
603:07 - do data mining seriously with really
603:09 - really large data sets we're doing
603:11 - uh small to medium-sized data sets as
603:14 - you might do sort of for
603:15 - individual personal research versus like
603:17 - an organizational research where you're
603:19 - processing
603:19 - the logs of a web server or something
603:21 - like that and there's lots and lots of
603:24 - wonderful technology and what's really
603:25 - cool is
603:26 - this technology just keeps getting
603:28 - better and better because the whole data
603:29 - mining data analysis
603:31 - uh natural language processing field is
603:33 - just so
603:34 - hot right now it's so awesome we're
603:36 - gonna keep it simple
603:38 - and do stuff for ourselves for now and
603:40 - um
603:41 - and and i gave you a bunch of sample
603:43 - code that's going to make it so that you
603:45 - can adapt this sample code to
603:47 - solve the problems that you need to
603:48 - solve so like i said
603:50 - this is more of a programming exercise
603:52 - data mining might be a lot more complex
603:54 - if you're doing simple research this
603:55 - might actually model what you do pretty
603:57 - well
603:58 - so the first thing that we're going to
604:00 - do is what's called use the google's
604:02 - uh json api for geocoding
604:05 - and there are two versions of this one
604:07 - version requires a key
604:09 - and one version doesn't require a key uh
604:12 - google used to make all this data
604:14 - available for free but with just a rate
604:16 - limit but now they're
604:17 - making increasingly requiring the key so
604:19 - i give you code
604:20 - in this zip file that kind of does both
604:23 - if you really want to do something in
604:24 - production of taking
604:26 - user entered places and names and
604:28 - getting precise latitude longitude
604:30 - coordinates so you can produce
604:31 - a nice little google map like this um
604:34 - and
604:36 - but if since google has made a rate
604:38 - limited api i've actually
604:40 - pre-spidered a copy of the google data
604:42 - and i have my own sort of fake google
604:44 - api and so you
604:45 - you can do your assignments and test all
604:47 - your code using my fake api
604:50 - um which has no rate limits and and has
604:52 - no problems but
604:53 - it's only a limited set of the data and
604:56 - so this is the basic process and it's
604:59 - it's one of those things that it's it
605:01 - follows that basic
605:02 - personal data modeling personal personal
605:04 - data mining pattern
605:05 - and so here's this api which is either
605:07 - google or me i've got my own dr chuck
605:09 - version of this doctortruck.net version
605:11 - of this
605:12 - and there is a an input queue
605:15 - of the location so this is the user data
605:17 - where they just put in the name of where
605:19 - they think they live
605:20 - university of uh to begin or something
605:23 - and
605:23 - um so this is the queue of the things
605:25 - that are to be retrieved
605:27 - and in in my case when i built this map
605:29 - for the first time there was like
605:30 - fifteen thousand
605:32 - and i it took me days to get this and so
605:35 - it would stop
605:36 - and so what i would do is i would you
605:38 - know read the first one
605:40 - into this geoload.py check to see if i
605:42 - already had it in my database if i
605:44 - didn't already had database i would go
605:45 - into the
605:46 - api pull the data down and i would put
605:47 - it in the database and then i'll go to
605:49 - the next one
605:50 - the next one the next one so you know i
605:52 - might get a thousand in my database and
605:54 - then it blows up or i'm told i can't go
605:56 - any further so i wait 24 hours i start
605:58 - it up
605:59 - and it reads the first thousand and says
606:00 - oh they're on the database already
606:02 - and then it starts at 1001 and then it
606:05 - adds that and adds that and then until
606:07 - it stops and so it took me
606:09 - several days of processing to get this
606:11 - data right now
606:13 - i didn't have a separate cleaning
606:14 - process because this data is pretty
606:16 - simple i was pulling out the
606:18 - the json and latitude and longitude etc
606:21 - and so i didn't have to do
606:22 - two separate processes to clean this
606:24 - data up it was clean enough right as i
606:26 - pulled it
606:27 - because i was talking to an api if
606:29 - you're talking to the html sometimes it
606:31 - gets nasty and ugly
606:33 - and so then i wrote this program that
606:35 - just reads through it it just does a
606:37 - select and you know reads through the
606:38 - stuff and it prints out
606:40 - some summary information and tells you
606:42 - what to do it also prints out
606:44 - you'll see this pattern because um you
606:47 - know
606:47 - i'm i'm visualizing using browsers html
606:50 - and this happens to be using the google
606:52 - maps api
606:54 - and putting all the data in a little
606:55 - javascript file so these end up being uh
606:58 - assignment statements in javascript you
606:59 - can take a look at that file
607:01 - and uh all the data shows up as
607:03 - assignment statements in the javascript
607:05 - and then when this html loads it reads
607:07 - this file
607:08 - and puts up all those pins as long as
607:09 - you have access to the
607:11 - the in browser uh javascript api
607:15 - so the next thing we're going to talk
607:16 - about is pagerank which is
607:18 - spidering now html we talked a lot about
607:21 - this
607:21 - spyder html get some links and so up
607:24 - next we're going to actually build a
607:25 - real database
607:27 - full featured search engine using
607:36 - pagerank
607:42 - [Music]
607:48 - so now we're going to write a search
607:51 - engine doing some of the things we're
607:52 - going to do page rank and we're going to
607:54 - visualize it in a
607:55 - in a web browser and show the weights
607:57 - we're really only going to do page rank
607:59 - on one page because
608:00 - you want to have links that more than
608:02 - one page that points to this
608:04 - to a page so that you can figure out
608:05 - which pages are more or less important
608:07 - and then visualize it we'll run the page
608:09 - rank algorithm and we'll separately do
608:11 - all this
608:12 - so at this point we're going to do
608:13 - pretty much the web crawling the index
608:15 - building and the searching we're not
608:16 - going to really search it we're going to
608:17 - visualize the index but you could write
608:20 - a simple program
608:21 - to do searches for keywords and figure
608:22 - out which page was the most likely page
608:24 - for a keyword
608:25 - and that that would be a fun additional
608:27 - thing to do
608:28 - so the web crawler is this program that
608:30 - hits hits a page
608:32 - pulls down the html parses the page
608:34 - looks for links makes a queue of
608:36 - incoming links
608:37 - that are as yet unretrieved and and i'm
608:39 - going to do this in a simple sqlite
608:41 - database and starts out with
608:43 - the database basically starts with one
608:45 - link as the starting point
608:46 - and then it retrieves that page and then
608:48 - you see the database end up with
608:50 - lots of unretrieved pages and it goes
608:52 - back in and picks a random page or
608:53 - retrieves that one
608:54 - and then it just expands and expands
608:57 - this code that i've built that you're
608:58 - going to play with
608:59 - is only stays on one website otherwise
609:01 - it would go crazy and but of course
609:03 - google doesn't use an sqlite database
609:05 - running on your hard drive
609:06 - but you get you'll get the idea you'll
609:08 - see this thing exponentially
609:10 - gain links and you'll run it for a while
609:13 - pull down thousand web pages or whatever
609:16 - but of course
609:17 - make sure that you uh don't violate any
609:20 - terms conditions and again
609:22 - i've got some data sources that you can
609:25 - use and they're not rate limited but you
609:27 - can also use things like wikipedia
609:30 - which i think they sort of discourage
609:31 - you or doctorchuck.com which has no rate
609:33 - limit
609:34 - or or who knows what right so so just be
609:37 - careful don't do this on facebook and
609:38 - don't do it on google don't get yourself
609:40 - in trouble
609:41 - and if you're using you know
609:44 - uh uh uh internet connection where
609:47 - you're paying for bandwidth uh
609:49 - be careful so this is the idea of the
609:50 - web crawler and this isn't my picture
609:52 - this is the classic picture of a web
609:54 - crawler
609:55 - read a page parse it take all the urls
609:58 - and stick them in a queue
610:00 - grab again and again so for us the
610:03 - scheduler is going to do it as long as
610:04 - you say oh do 100 pages
610:06 - or it runs until it blows up i mean and
610:09 - and again these processes that are
610:10 - have the network in the loop it's really
610:12 - important that they behave well when
610:14 - they blow up and that's why databases
610:16 - are so useful because you can be writing
610:17 - along to the database and
610:19 - some random thing happens in blosure
610:21 - blows your
610:22 - data up and you start over so you're
610:24 - reading these things you're storing each
610:26 - page
610:26 - building up your storage et cetera et
610:28 - cetera so you just keep on doing that
610:30 - and with this program you you'll be able
610:32 - to retrieve some stuff then run the page
610:34 - rank then you can retrieve them more and
610:35 - then you can run some more page rank and
610:37 - you can kind of see
610:38 - how google sort of evolves its index
610:41 - over time
610:42 - of course we're we're so much simpler
610:45 - and like i said be careful when you
610:46 - crawl um you're going to run a crawler
610:48 - that just goes
610:49 - as fast as it can um but google doesn't
610:52 - do that it's careful not to
610:54 - overwhelm any websites it's trying to be
610:56 - smart about the use of your bandwidth
610:58 - on your website there is a file
611:03 - our code won't bother looking at this
611:07 - but there's a file called robots.txt
611:09 - that real web crawlers look at and it
611:11 - gives a list of the things you're an
611:13 - art are allowed to look at and not
611:14 - allowed to look at and so if you go to
611:16 - google and you see a search it says
611:18 - we're not allowed to show you
611:20 - the summary text of this page because of
611:22 - the robots.txt
611:24 - it's there and you can go and you can
611:25 - actually see a robots.txt
611:29 - like on just go to any website it's at
611:31 - the top root
611:32 - blah blah blah blah blah robots.txt
611:35 - don't it's not a path it's not slash
611:37 - this slash that slash something else
611:38 - robots
611:39 - it's at the very very top of a website
611:43 - the index building uses the page rank
611:45 - algorithm and the whole goal of page
611:46 - rank algorithm is to
611:49 - figure out which pages have the
611:53 - most best links so having the most links
611:56 - is really easy you can just say how many
611:58 - links go to this
611:59 - but the problem is is you got to figure
612:00 - out the value of those links
612:02 - and then you have to how do you figure
612:03 - the value of those links by looking at
612:06 - how many good links come to it so it
612:09 - turns out that it's a
612:10 - an infinite problem it's an infinitely
612:12 - difficult problem
612:14 - to to use pagerank but you can
612:16 - approximate it and what happens is
612:18 - after a while it converges to a
612:21 - reasonable value and so we're going to
612:24 - run the search index
612:25 - and each time it runs you're going to
612:27 - see that it says you know how much did
612:28 - these numbers change and what happens is
612:31 - in the beginning they change very wildly
612:32 - but quickly they flatten out
612:34 - and it has the best way to think about
612:37 - uh
612:38 - the the page rank is
612:42 - think about how water runs where um
612:46 - you have a small little stream going by
612:49 - a house
612:50 - and sometimes it rains sometimes it's
612:53 - dry
612:54 - and sometimes you know and and
612:57 - there's like a little little lake and
613:00 - the stream is always running
613:01 - and it doesn't go up and it doesn't go
613:02 - down it might go up a little bit if it
613:04 - rains a lot but
613:05 - in general there's sort of a steady
613:07 - state meaning that whatever water is
613:09 - coming in is about the same as the water
613:10 - going out
613:12 - so we think about this in terms of web
613:14 - pages the
613:15 - the value of the links coming in is
613:18 - roughly the same as the value of links
613:19 - going out so
613:21 - when that starts to balance the in and
613:22 - the out value from each of the nodes
613:24 - then
613:25 - uh you've got a pretty stable and so
613:28 - what google does is they have a really
613:30 - relatively stable assessment of goodness
613:32 - and value of
613:33 - pages and they use that to commute page
613:35 - rank and then they throw a few more
613:37 - pages in and it kind of
613:38 - has to adjust for a while but it
613:39 - reconverges and so this is a calculation
613:42 - that generally converges um and
613:45 - it doesn't vary wildly and that's why it
613:47 - you know google's pretty good at
613:49 - kind of arriving at the true value of
613:51 - something so let's take a look at
613:53 - uh what we're going to do in this
613:54 - application again we have a
613:57 - a a file that is going to
614:01 - spider the web and we only have one
614:03 - database again in this one we'll have
614:05 - two databases in the next one
614:07 - and so this is spider is the restartable
614:10 - part
614:11 - and what we actually do is we we put one
614:13 - url in the starting url
614:15 - and then spider walks in and asks are
614:18 - there any unretrieved pages
614:20 - and it does that randomly and sort of
614:22 - picks among the unretrieved pages and
614:23 - says okay great i'll go retrieve that
614:25 - page
614:26 - and then i'll parse that page and then
614:28 - i'll put in a bunch of new unretrieved
614:30 - pages
614:31 - okay as well as the text of that page
614:33 - and then a bunch of unretrieved pages
614:35 - and then it'll go back up and it'll say
614:37 - oh give me one of the randomly
614:39 - non-retrieved pages and grab a next page
614:41 - and pull that page down
614:42 - and then add to it and so this is like
614:44 - there's a page
614:45 - and then a to-do list and then this one
614:47 - becomes a page and then adds a few more
614:49 - things to the to-do list and so the
614:51 - to-do list or the
614:52 - the unretrieved urls grows very rapidly
614:56 - um and the retrieved ones grow sort of
614:58 - as you retrieve them one at a time but
615:00 - you've always got this
615:01 - long list if you have a really short
615:03 - site that only has like two links if you
615:05 - start at doctorchuck.com
615:08 - page1.htm it'll go to page two and then
615:10 - go back to page one it'll be out of
615:11 - things it'll have retrieved all of the
615:13 - pages
615:13 - um and so if you have a website that has
615:15 - no external links or
615:17 - has very few pages and they point to
615:18 - each other this will run out
615:20 - of things to do but if you go to a page
615:23 - like my blog
615:24 - or the the code that i the the sample
615:26 - stuff that i have up for you to spider
615:28 - for testing
615:28 - on drchuck.net um it'll run for a very
615:32 - long time and you'll have
615:33 - far more pages to retrieve than pages
615:35 - that you retrieve but that's okay
615:37 - at some point you can stop this maybe it
615:40 - stops because you ran out of bandwidth
615:41 - or maybe your computer went down or
615:43 - who knows what right but it's okay this
615:45 - is a restartable process because it
615:47 - always has
615:48 - some pages that are retrieved and some
615:49 - unretrieved pages you start it back up
615:51 - it picks randomly from the unretrieved
615:52 - pages
615:53 - your database is the sort of persistent
615:56 - state
615:56 - of your spider rather than a bunch of
615:59 - dictionaries or lists inside the python
616:00 - which go away when the program dies
616:04 - and uh and so at some point you have
616:06 - let's just say a few hundred pages in
616:07 - here and a few
616:08 - thousand unretrieved pages you can run
616:11 - the page rank algorithm and what the
616:12 - page rank algorithm does is it loops
616:14 - through all the pages and figure out
616:15 - which pages are linked to which pages
616:17 - and then reads the numbers and then
616:19 - updates the numbers and then does that
616:21 - some number of times and so this is
616:24 - where the numbers all the pages sort of
616:25 - start out with goodness of one
616:27 - i think this printout is showing that
616:29 - goodness of one and then
616:31 - it changes and then the goodness goes to
616:33 - the sum of the goodness goes up to two
616:35 - some of the
616:36 - goes to seven and whatever but then it
616:38 - does this over and over and then it uses
616:40 - these numbers and then they change again
616:41 - and so
616:42 - there's a number of time steps that this
616:44 - page rank runs
616:45 - and you will see as the page rank runs
616:48 - when i show you the code
616:49 - you'll see the average sort of
616:53 - change in these numbers across all these
616:55 - things and you'll see that it
616:56 - the average goes down very rapidly as
616:58 - you get through and so usually
617:00 - with a few hundred or even thousand
617:02 - pages like a hundred
617:03 - plus times running this algorithm and
617:05 - these numbers have converged
617:08 - and that's when you sort of can begin to
617:09 - trust the numbers now there's this one
617:11 - program
617:12 - called sp reset which sets all the pages
617:14 - back to one
617:15 - so you can start this over so if you
617:17 - were to spider for a while run sp rank
617:20 - for a while
617:21 - play around and then you wanted to
617:22 - spider some more and start it over you
617:24 - could
617:24 - say oh let's start the page rank
617:26 - completely over or
617:28 - you could simply take the new pages and
617:31 - and
617:31 - and watch it adapt either way this is
617:33 - just a way to reset all the pages to
617:35 - have sort of their initial value
617:37 - of a goodness of 1.0 so at some point
617:40 - you run this this
617:41 - this runs really this part here runs
617:43 - really slow
617:44 - this part runs super fast like in the
617:46 - blink of an eye this one
617:48 - re is pretty fast and then at some point
617:52 - you've got these
617:53 - pages that have you know numbers on them
617:55 - they have values on the pages
617:57 - and there's a couple of programs that
617:59 - allow us to visualize that
618:01 - one is the dump which just reads it and
618:03 - checks to see it shows the
618:05 - the new page rank the old page rank um
618:08 - and various other things and shows just
618:10 - a way to dump it
618:12 - and then there's this thing that reads
618:13 - the whole thing you hum
618:15 - you say i'd like to do 25 the top the
618:17 - best it sorts it by page rank
618:19 - and then produces a javascript file it
618:20 - has just the the numbers in it
618:23 - and then there is some html and a
618:25 - visualization library called d3.js which
618:27 - you can read about
618:28 - that when the html starts it reads this
618:31 - and has this nice
618:32 - force direct layout of the page rank and
618:35 - you can hover over things and you can
618:36 - see
618:37 - uh what page rank you've got and so
618:40 - and so that is the page rank algorithm
618:44 - that we're going to do and up next we'll
618:45 - do the largest and most complex of these
618:48 - things and that is
618:49 - the email we're gonna spider some email
618:52 - which is about a gigabyte of data okay
619:06 - [Music]
619:13 - the last visualization application that
619:15 - we're going to take a look at is mailing
619:16 - list and that's kind of ironic we
619:18 - started with mailing lists
619:19 - and we're going to end with the mailing
619:20 - list the mailing lists of course are
619:22 - from
619:22 - my open source sakai project which i
619:25 - love and very proud of and
619:27 - and so uh what we're going to do is
619:29 - we're going to crawl the archive of a
619:30 - mailing list and then we're going to do
619:32 - two visualizations one is a
619:34 - activity visualization and another is a
619:36 - word cloud
619:37 - so um it's probably probably the more
619:40 - important thing is when i do the
619:41 - demonstration of how the software works
619:43 - so
619:43 - this is a large data set so you've got
619:45 - to be careful
619:47 - uh this could spider gmane.org which is
619:49 - a very free and friendly archive
619:51 - this data originally came from gmane.org
619:55 - but i've got a copy of it and so
619:57 - gmane.org is not
619:59 - rate limited but if everyone who is
620:02 - watching this
620:03 - starts spydering gmain.org at the same
620:05 - time you will crash it
620:06 - it just doesn't have the horsepower to
620:09 - give you this data as fast
620:10 - and so i've got something that can give
620:12 - you the data super fast and has no re
620:14 - rate limit on really good server and
620:16 - it's
620:17 - cached all around the world using a
620:19 - technology called cloudflare
620:20 - so please please please don't point this
620:23 - at gmane.org point this at
620:25 - the url here mbox.chuck.net etc etc and
620:29 - then you can run this as fast as you
620:31 - like now another thing to worry about
620:34 - is if you
620:37 - have a metered connection so don't do
620:39 - this on a cell phone connection because
620:40 - you'll pay
620:42 - thousands of dollars perhaps make sure
620:44 - you run a no-cost connection
620:46 - um before you start running this because
620:48 - this is going to pull a lot of data down
620:49 - if you just start this from scratch
620:51 - and you let it run it it on a super fast
620:55 - connection it
620:56 - the whole downloading the whole thing is
620:58 - probably about four hours on a
621:00 - on my home connection uh when i had like
621:04 - about a
621:05 - 10 megabit connection it took several
621:07 - days
621:08 - and so so just understand that in this
621:10 - one it's both
621:11 - fun to deal with a ton of data and it's
621:15 - scary to deal with a ton of data so this
621:17 - one is big this one is
621:19 - you'll see the process in action because
621:21 - it'll run
621:22 - for a while everything the things will
621:24 - take a long time
621:26 - so here's basically the flow of the data
621:28 - in this particular one
621:31 - you are going to have the restartable
621:33 - spider that talks to the api
621:35 - and box doctorchuck.net which has a
621:37 - scalable copy of all this information
621:40 - um and again it's going to do kind of a
621:43 - raw database
621:45 - not a very clean database it's sort of a
621:47 - mess it's just just enough columns to
621:49 - keep track of whether or not we've got
621:51 - this page or not
621:52 - and so so this has you know the ones
621:55 - we've retrieved so far
621:56 - and so what gmail does is it sort of
621:58 - scans down to see where to retrieve next
622:00 - gets that and then start scanning and
622:03 - then adding things here
622:04 - so it just adds it and then it blows up
622:07 - and then it comes in again
622:08 - and says okay i'll start here and then
622:09 - it starts retrieving stuff and fills
622:11 - this in fills this in fills us in
622:13 - and sometimes you put like a delay in
622:15 - this so you don't overwhelm networks or
622:16 - don't overwhelm servers
622:18 - but basically this is pretty much a raw
622:21 - retrieval of the email messages
622:23 - and this file can get rather large this
622:25 - is the one that's greater than a
622:26 - gigabyte
622:27 - now this data is actually really nasty
622:30 - it's email data
622:32 - the date formats changed this is data
622:34 - that lasted from 2004 to like 2012 or
622:38 - 13.
622:39 - um and so this just data is
622:42 - got a lot of things wrong with it it
622:45 - even has things where people's email
622:47 - is changed and so it has this mapping
622:49 - file this comes along with it this
622:50 - mapping file it says
622:52 - here's this one person and here are the
622:54 - six email addresses that they used
622:56 - throughout the life of the
622:58 - project and so there is a relatively
623:02 - complex and so this is this part here is
623:05 - super slow um very slow
623:09 - this part here is slow but it'll take
623:12 - like depending on how fast your computer
623:14 - is somewhere between two minutes and 10
623:15 - minutes
623:16 - this will this first this first part
623:18 - will take days perhaps depending on the
623:20 - speed of your network connection
623:21 - and so what g model does is it reads
623:24 - through this it actually
623:25 - recreates it wipes this out and
623:26 - recreates index.sqlite
623:28 - every time it runs so you can change any
623:30 - number of things you can re-spider
623:32 - things you can do whatever
623:34 - and often the cleanup this is one of
623:36 - those cleanup processes and you have to
623:38 - tweak the cleanup process you like look
623:40 - at your data like oh
623:41 - the cleanup missed something so i've got
623:42 - to run it again so this produces
623:44 - index.sqlite every time it runs
623:46 - so this is like two to ten minutes um g
623:49 - model is two to ten minutes
623:51 - and it like maps names and when it's all
623:54 - said and done
623:55 - this is a very small highly normalized
623:58 - it's a nice data model this one here had
624:00 - the content sqlite has an ugly data
624:02 - model
624:03 - index.sqlite has a pretty data model
624:05 - it's got foreign keys it's got all the
624:07 - stuff
624:08 - and all those things we talked about in
624:09 - the database where it's efficient and so
624:12 - in your mind keep track of how fast it
624:14 - is to scan all the data in a database
624:16 - with a bad model
624:17 - and then watch when you run like g basic
624:19 - which is a scanner or g
624:20 - line which produces line date or g word
624:22 - and watch how fast they run
624:24 - they run in like a couple of seconds at
624:26 - the most
624:27 - and this runs in two to ten minutes and
624:29 - that and the difference is is that's
624:31 - because the data is efficiently modeled
624:33 - in index.sqlite
624:35 - so you can take a look at that using
624:36 - sqlitebrowser and take a look at the
624:38 - data model
624:39 - and you'll see it looks just like the
624:40 - stuff we talked about in the database
624:41 - chapter it's got foreign keys and
624:44 - and all those things and so that runs
624:46 - and you've got this
624:47 - and then we do our visualizations and
624:49 - our analysis from this clean version of
624:51 - all the data and so g
624:52 - basic just loops through and prints some
624:54 - stuff out it's a great way to test
624:56 - things
624:57 - it's a pretty easy to understand program
624:59 - and you could take a look at it
625:00 - g line does some bucketing and makes it
625:02 - hit some histograms to produce a
625:04 - line graph and then g word does a
625:07 - different histogram it does a histogram
625:09 - of word frequency
625:10 - and then produces that is the word
625:11 - frequency ends up in gword.js
625:14 - and then we have two html files that use
625:16 - the d3.js
625:19 - visualization to produce a line and a
625:22 - word chart
625:23 - and so you know i'll in a in another
625:25 - video i will show you how this code
625:27 - works which is probably more useful than
625:29 - this picture
625:31 - but this is a whole bunch of
625:35 - good stuff in this particular
625:37 - application and
625:38 - and if you really understand everything
625:40 - in here you can build a pretty
625:41 - sophisticated uh data retrieval and
625:43 - analysis pipeline
625:46 - and so so that's it i thank you for
625:49 - watching all these
625:50 - lectures and look forward to seeing you
625:52 - on the net
626:05 - [Music]
626:16 - so
626:21 - hello everybody welcome to python for
626:22 - everybody we are doing some code
626:24 - walkthroughs if you want to follow along
626:26 - with the code you can download the
626:27 - source code
626:28 - uh from python for everybody dot the
626:31 - python for everybody website okay
626:34 - so the code we're playing with today is
626:36 - tw friends.py
626:38 - and this is a step beyond the simple uh
626:42 - tw spider
626:43 - it is a restartable spider but we're
626:45 - going to data model things a little bit
626:46 - differently we're going to have two
626:47 - tables and we're going to have a
626:49 - uh a many-to-many relationship except
626:52 - that it's
626:53 - sort of a many-to-many relationship
626:55 - between the same table which is okay
626:57 - um friends is a twitter friends
627:00 - are a directional relationship
627:03 - and so uh so we've started out here in
627:06 - tw friends.py
627:08 - remember that the filehidden.py i'll
627:11 - show it to you but i'm not going to open
627:12 - it because i've got my keys and secrets
627:14 - in it
627:14 - so this hidden.py file you've got to
627:17 - edit that and you've got to go to
627:20 - apps.twitter.com and get your keys and
627:22 - put them in there otherwise these things
627:24 - won't work but
627:25 - if you have twitter and you set your api
627:27 - keys up and you put them in hidden.py
627:29 - then all these things will work it's
627:31 - kind of fun actually and impressive
627:33 - uh not hard to do actually
627:36 - so the twitter url that's my library
627:40 - that reads hidden.py and augments the
627:42 - url and does all the oauth stuff
627:44 - json and ssl because twitter doesn't i
627:46 - mean because
627:47 - python doesn't accept any certificates
627:49 - even if they're good certificates so we
627:51 - kind of
627:51 - crush that here's our friends list that
627:54 - we're going to hit
627:55 - we're going to make a database
627:56 - friends.sqlite
627:59 - now here we're doing create table if not
628:01 - exists so what this really is saying is
628:03 - i want this to be a restartable process
628:05 - and i don't want to lose the data
628:07 - we're starting out uh we do not have
628:11 - uh sqlite any sqlite files and so this
628:15 - is going to create the database and
628:16 - create these tables
628:18 - but the second time we run it we're not
628:20 - going to recreate the tables we're not
628:21 - gonna we're gonna
628:22 - be able to restart this because we're
628:23 - going to run out of
628:25 - um we're going to run out of rate limit
628:29 - before we finish this but so we just
628:31 - have to wait
628:32 - however long the rate the temp takes to
628:33 - reset and we'll watch the rate limit go
628:35 - down
628:36 - and so we're going to have a people
628:37 - table and we're going to have an id a
628:39 - primary key and the name
628:41 - the name is going to be unique and
628:43 - whether or not we've retrieved it and
628:44 - that's kind of from a previous one
628:46 - but then there's the who follows who um
628:49 - the from id to two id and so this is a
628:51 - direction
628:52 - and we're going to put a uniqueness
628:54 - constraint in just like we do in many to
628:56 - many's that basically says
628:58 - the combination of from id and 2id has
629:00 - got to be unique
629:01 - we don't allow ourselves to put
629:03 - duplicates
629:04 - of the combination so from id can be one
629:07 - in many records and two id can be one in
629:09 - many records but one
629:10 - one is only allowed once and this is the
629:13 - crud we have to do to convince
629:15 - python to accept the twitter uh
629:17 - certificate
629:19 - and so this is similar to some of the
629:20 - other stuff that we've done
629:22 - we're going to uh enter a twitter
629:24 - account or quit
629:25 - and if we hit enter by itself then we
629:28 - will actually go and retrieve
629:30 - a record that was not yet retrieved and
629:33 - now we're actually pulling out two
629:35 - values id and name
629:37 - and so we will we will grab fetch one is
629:40 - going to give us a two tuple basically
629:42 - and we're going to store that in id and
629:44 - account of course that's like
629:46 - this is this is coming back with a two
629:48 - tuple first of which is the id from the
629:50 - database
629:51 - limit one means we're only going to get
629:52 - one of these or zero of these if there
629:55 - are zero these
629:56 - that means there are no unretrieved
629:58 - twitter accounts retrieved equals zero
630:00 - well you'll see in a second that the all
630:02 - this new
630:03 - accounts we put in are the ones for
630:05 - which we haven't retrieved and again
630:07 - given that our rate limit we want to
630:08 - know
630:09 - which ones we've retrieved okay and
630:12 - um and so what we're going to do
630:16 - next is we're going to check to see if
630:19 - the person
630:20 - that we just checked which means the
630:23 - length of the account is great that we
630:24 - just
630:24 - were entered we're going to check to see
630:26 - if they're already there
630:28 - okay and we're going to select id from
630:31 - people where name equals so that's the
630:32 - one we just entered
630:34 - and we're going to fetch one and grab
630:35 - the first thing because we only we only
630:37 - got one thing in the select statement
630:38 - here
630:39 - um and if this person that we just asked
630:42 - to see
630:44 - is not in the table that means this is
630:46 - going to fail
630:47 - we're going to do an insert or ignore
630:49 - this or ignore is kind of redundant
630:51 - because we just checked to see if it was
630:52 - there but we'll put that in just to be
630:54 - safe
630:56 - and we're going to put the name in for
630:58 - as the new the new account that we're
631:00 - looking at
631:01 - uh and we're for indicating that
631:04 - retrieved is zero
631:05 - so that we will we will know that we
631:07 - haven't retrieved it yet you'll see that
631:08 - we'll update that in a second
631:10 - we commit it so that later selects will
631:12 - see this so that
631:14 - so you got to do the commit
631:17 - this later select wouldn't see the one
631:19 - we just inserted and we're going to ask
631:21 - how many rows were affected
631:23 - and if it's not equal to 1 then we're
631:25 - going to complain about we inserted it
631:28 - and we are going to do this thing we're
631:30 - going to ask hey
631:32 - remember there was an id up there
631:35 - right here id integer primary key and
631:39 - we did not insert this here but we want
631:42 - to know what that id
631:43 - is and every time i was showing you that
631:44 - in lectures i was saying it's really
631:46 - easy in python to do this
631:48 - and that's we're saying this cursor did
631:50 - the insert but one of the things happens
631:52 - is after the insert
631:54 - we're going to grab the last row id
631:55 - which is the primary key
631:57 - that was assigned by sql
632:02 - okay and so that means that one way or
632:04 - another coming through this
632:05 - code here in line 45 one way or another
632:08 - we're either going to know the id of the
632:09 - user
632:10 - that was there before or we just
632:12 - inserted one and so we're going to know
632:14 - the primary key of the current user and
632:15 - you'll see why we need that so id
632:18 - is the primary key of the current user
632:20 - that we entered right here
632:23 - okay and now we're going to do is do the
632:25 - twitter url augment with the oauth and
632:27 - all the keys and the secrets and
632:28 - hidden.py
632:29 - instead we're going to go through let's
632:31 - count 1000 let's go count
632:33 - what the heck let's go 200 up to 200
632:36 - friends
632:37 - save now let's do 100. we'll keep it
632:39 - that way
632:40 - and then we're going to retrieve it and
632:43 - uh we're retrieving the account we're
632:44 - not going to print the nasty url
632:46 - out we could then we're going to open
632:49 - the url with the connection
632:50 - and then we're going to read that and
632:52 - we're going to get the utf-8 data from
632:53 - this and then we're going to decode that
632:56 - and we're going to have the unicode data
632:57 - so the data in string
632:59 - is a internal python string with all
633:01 - that data representing all the wonderful
633:03 - characters
633:04 - and of course we're going to ask url
633:06 - open to give us back the headers
633:08 - as a dictionary using this call and we
633:11 - can see what
633:12 - uh how many we have left for the
633:14 - remaining
633:15 - right what's the remaining rate limit
633:17 - that we have
633:18 - okay and so then we're going to parse
633:21 - the data with json load s
633:23 - if uh oh wait i need to continue in here
633:27 - continue okay save
633:30 - um if we're going to parse this data
633:33 - we'll print it out right so that means
633:35 - that this
633:35 - this died which means it's not
633:37 - syntactically correct
633:38 - json basically and who knows if we're
633:41 - ever going to see that but at least
633:43 - when it blows up it'll print this data
633:45 - out we'll have to catch it
633:47 - and then it'll continue actually i'll
633:48 - make this a break
633:51 - because if that's blowing up that bad we
633:53 - should quit
633:54 - now we don't i don't yet know what
633:57 - happens when
633:57 - this rate limit says you can't have it
634:00 - and so but i do know that
634:02 - i expect when it's successful that there
634:03 - will be a
634:05 - uh key of users in this outer dictionary
634:08 - that we're going to get
634:09 - and if this outer dictionary that we're
634:12 - go if we if users is not in the parse
634:14 - dictionary
634:15 - then i'm going to dump out this data so
634:17 - that at least
634:18 - i can debug what happens when i've got
634:21 - some
634:21 - broken json so the difference between
634:26 - this code this code is going to fail
634:28 - when the json
634:30 - is syntactically bad meaning a curly
634:32 - brace isn't right or whatever
634:35 - this code will trigger when i get good
634:37 - json but i don't have a user's key in it
634:40 - okay so then
634:45 - once we've retrieved it we're pretty
634:46 - happy with it we're gonna
634:48 - update for our account that we're
634:50 - retrieving we're gonna set this as one
634:52 - of our retrieved accounts
634:53 - okay and then what we're going to do is
634:56 - write a loop
634:57 - that goes through all the friends of
635:00 - this particular user that we're asking
635:02 - and gets their screen name prints it out
635:05 - and then we're going to
635:07 - check to see if this one is already in
635:11 - our people database because
635:12 - this is a spider we're grabbing accounts
635:15 - and uh and so we'll do a friend id
635:18 - and do a fetch one grab the subzero
635:21 - thing
635:21 - and if that works if if this person's
635:24 - not in there this fetch one is going to
635:26 - blow up which means we're going to drop
635:27 - down to the accept code
635:28 - but if it does work we have friend id is
635:31 - the
635:32 - you know that we they they're there and
635:35 - they're already in our database right
635:37 - they just weren't retrieved okay and so
635:40 - now if we the friend id wasn't there
635:43 - we're going to do an insert into
635:44 - setting retrieve to zero and then we're
635:47 - going to commit
635:48 - right now remember row count
635:52 - is how many rows were affected by this
635:53 - last transaction cur.row count
635:56 - and we're going to die if that it
635:57 - doesn't insert doesn't work this is
635:59 - unlikely
636:00 - unless somehow we've ran out of disk
636:02 - drive or something and we're going to
636:04 - grab the friend id
636:05 - as the as the key the last row that was
636:08 - inserted
636:09 - we're only going to insert one row so
636:10 - it's basically the primary key of the
636:12 - row that we just inserted
636:14 - so if you look at this code right here
636:17 - it comes out the bottom one way or
636:19 - another with friend id successful
636:21 - rights friend id is either they're
636:24 - already in our database
636:26 - or they're not and if we insert them
636:27 - then we have it
636:29 - and so now this count new and count old
636:32 - is just so i can print out a nice
636:33 - printout now we
636:34 - are going to insert into the friend
636:36 - table which is called the follows table
636:38 - in this case
636:39 - from id and two id those are the those
636:41 - are the two
636:42 - outward outward pointing uh foreign keys
636:46 - and we have the id of the account that
636:49 - we are retrieving the friends of
636:51 - and then this particular friend and so
636:52 - we're inserting the connection
636:55 - from this person to that person and then
636:57 - we commit it
636:58 - we want to commit these again so that
637:00 - later selects when the loop goes back
637:03 - up later selects get all of that data
637:06 - that's going on
637:07 - okay so we do want to commit from time
637:09 - to time and then we close the cursor at
637:11 - the very end
637:11 - okay so let's run this and see what
637:15 - happens
637:17 - okay so python tw friends
637:23 - dot p y o of course
637:27 - i am a refugee from python 2. so i
637:30 - always forget to type python
637:32 - 3. okay so we're going to start
637:36 - if we take a look right now i'm going to
637:38 - start another tab over here
637:40 - and ls minus l star sqlite
637:45 - now that sqlite file is there right and
637:48 - it's actually made the tables if you go
637:50 - up here
637:50 - it ran all this stuff create the tables
637:53 - yada yada and we're sitting right here
637:54 - at this line
637:55 - as a matter of fact i think without
637:57 - causing too much trouble
637:59 - i can open that database and get into
638:02 - this database right here
638:03 - and there is no data in the follows
638:05 - table and there is no data in the people
638:07 - table it's completely empty
638:09 - okay so we're waiting for the first one
638:12 - and i'll go with mine dr
638:13 - chuck so it's retrieving the 100 friends
638:18 - and they all were brand new they're all
638:20 - inserted right
638:23 - and so now if i hit refresh we will see
638:26 - that dr chuck is retrieved
638:28 - um who follows so these are all the
638:32 - people i follow
638:33 - one follows two so if we look at here we
638:35 - see that dr chuck follows stephanie
638:37 - teasley
638:37 - because we grabbed the followers of dr
638:39 - chuck you know we're going to have
638:40 - a record in all of the follows for all
638:44 - the ones that i did
638:45 - right so these are all the people i
638:46 - followed and we put them in
638:49 - okay so we can go back
638:53 - and we can let's see grab somebody let's
638:56 - go grab
638:57 - stephanie teasley
639:00 - and let's pull out her friends
639:04 - so we grabbed
639:08 - a hundred of her folks i got 14 left
639:10 - that's my
639:11 - x rate limit so i did stephanie teasley
639:13 - so let's go back here
639:14 - so you'll notice there's 101 there's
639:17 - probably going to be
639:18 - oh 182. uh that's interesting so we've
639:21 - retrieved dr chuck
639:22 - and stephanie teasley and let's go take
639:24 - a look in the friends table
639:25 - the follows table okay
639:29 - so we have all of people i follow now
639:30 - all the people stephanie follows
639:33 - okay so there we go so let's go ahead
639:36 - and do somebody else um
639:38 - let's see i think we both follow tim
639:41 - mckay where's tim mckay
639:49 - yeah let's follow tim mckay let's see
639:51 - what who tim follows see if we can get
639:52 - like an overlap
639:56 - oh we revisited some let's see if we can
639:58 - see this in the follows
640:04 - see people so we've got dr chuck
640:07 - retrieved and tim mccase somewhere down
640:09 - here
640:15 - yeah it might take us a while before we
640:18 - get any really good overlaps uh
640:22 - let's see let's do a database call
640:27 - let's see let's do a database sql
640:34 - select
640:39 - count
640:50 - okay so let's just run this some more
640:51 - it's clearly working now one thing i can
640:53 - do here
640:54 - is i can hit enter and it will just pick
640:57 - one randomly
640:58 - so it grabbed live edu tv and i can
641:02 - and let's see how many i got left we got
641:03 - 12 left and now i can hit enter again
641:06 - and it picks
641:06 - another one uh that was the next one
641:10 - i was kind of picking them in order is
641:11 - it picking them in order let's go to
641:13 - people
641:15 - yeah it's picking these so it's gonna we
641:17 - can see that it's gonna just do the
641:18 - first
641:19 - unretrieved person who's nancy let's
641:22 - let it retrieve nancy so it grabbed
641:24 - nancy new
641:25 - so we're finding some and this table's
641:27 - getting really big and so if we look at
641:29 - the people table we now have 455 people
641:33 - and we have 467 following records
641:39 - and so there we go oops
641:42 - hit enter it does another one
641:45 - and away we go so you get the idea i can
641:49 - type quit
641:49 - to finish um and just to give you a
641:54 - uh a little interesting
641:57 - um a bit of code to show you how to do
642:00 - selects i'm gonna do this tw join now
642:02 - you'll notice that we're not talking
642:04 - oh let's show you one thing um ellis by
642:07 - nacl friends
642:10 - star sqlite so
642:14 - this database has it so i can restart
642:16 - this process
642:17 - and run it again and the database is
642:20 - still there and so
642:21 - we just grab a swear trek
642:25 - um and so we can keep doing this and
642:28 - and so this data it keeps extending and
642:30 - so this is a restartable
642:32 - restartable process i can run it and
642:35 - then tell it to grab the next
642:36 - unretrieved one
642:38 - and so away we go right and
642:41 - um so that's part of it so
642:45 - so i can if i run out of my
642:48 - uh i've got eight left oh how many do i
642:51 - have left really
642:52 - let's keep going
642:56 - how many do i got left i got five left
642:59 - okay
643:00 - wait oh i guess we'll just run it out so
643:02 - i got four left
643:04 - you know what i should do is i should i
643:06 - can't change the code yes i can't change
643:07 - the code
643:08 - i can stop the code and i can quit the
643:10 - code
643:11 - so what i'm going to do is i'm going to
643:12 - change this code a little bit really
643:14 - quick
643:16 - and i'm going to print the headers of
643:17 - rate limiting at the beginning
643:23 - and at the end
643:30 - so now i can run it again i change the
643:31 - code hopefully didn't make a python
643:33 - error delta go get another one
643:35 - anna navarro and so i got three left
643:39 - oops we'll see what happens when i run
643:42 - out of rate limit
643:44 - run out of rate limit
643:48 - so we have one left hit enter
643:51 - hit ctrl k open source.org so we have
643:55 - zero left that worked now let's see what
643:58 - happens
643:59 - i don't know what happens next
644:02 - oh we blew up too many requests oh we
644:05 - got a http
644:06 - error 429. so that means
644:10 - that going for mark cuban
644:13 - that was in line 48 so the right thing
644:16 - to do would be
644:18 - in line 48
644:22 - we should really put this in a try try
644:24 - except blocked
644:25 - try accept block because it gives us an
644:29 - error
644:37 - print oh fiddlesticks
644:40 - how do i print the exception message i
644:42 - always am forgetting
644:44 - print failed to retrieve
644:51 - okay so we'll put that in
644:54 - now if i run it
645:01 - oh and then i have to put a break here
645:03 - because that's not good
645:10 - break
645:12 - to retrieve not got to figure out oh i
645:14 - see i never know
645:15 - how to print out the error message
645:19 - yeah so i have to i never
645:22 - see that's the weird thing about stuff
645:24 - is that i don't ever remember enough
645:27 - i don't remember the syntax what i say
645:29 - here uh
645:31 - to print the error message out uh so i'm
645:33 - gonna go to google
645:35 - and i'm gonna say print out the
645:38 - exception message in
645:44 - python print out the exception message
645:47 - in python
645:48 - oh python3 hello
645:56 - okay so let's go find it here in the
645:57 - documentation
646:02 - accept accept
646:08 - is this it is this what i say
646:26 - i just want to print out the message
646:32 - ah that's it except
646:38 - let's try this
646:54 - so this is part of python programming is
646:56 - like for me at least
646:57 - because i'm just not like a genius
646:59 - expert at this stuff
647:04 - this is one thing i like about python is
647:07 - you can guess stuff and sometimes you
647:08 - guess right
647:09 - so there we go we got the error we got
647:11 - the nice little error message
647:12 - and we see error 429 too many requests
647:15 - so that
647:15 - cleans that up nicely
647:27 - [Music]
647:44 - so
647:49 - [Music]
647:57 - hello everybody welcome to python for
647:59 - everybody this is another worked code
648:01 - example
648:02 - uh you can download the sample code zip
648:04 - file
648:05 - if you want to follow along and the code
648:08 - that we're working on today is what i
648:10 - call the geodata code
648:12 - and that is uh code that is going to uh
648:15 - pull uh some
648:18 - some locations from this file uh we're
648:21 - simulating or using the google
648:24 - uh places api to look places up and so
648:27 - we can visualize them on a map and so
648:29 - this is the basic picture
648:31 - if we take a look at this where dot data
648:33 - file it's just a flat
648:34 - file that has a list of organizations
648:37 - and it's actually was
648:39 - pulled from one of my mooc surveys we
648:42 - just let people type in
648:43 - where they were went to school and this
648:46 - is just a sample of them
648:48 - so this data is read in by this program
648:51 - geoload.py
648:52 - and if you recall this google geodata
648:55 - has rate limits it also has api keys
648:57 - which we'll talk about in a bit too
648:59 - and so the idea is this is a restartable
649:01 - uh spider-like
649:02 - process and so we want to be able to run
649:05 - this and have it blow up and run it and
649:07 - start it
649:07 - and not lose what we've got right and so
649:10 - this is unlike
649:11 - some though so we're not now using a
649:12 - database as as well as an api
649:15 - but in order to work around the rate
649:16 - limits of this api we're going to
649:19 - use the database for the restartable
649:20 - process and then we'll make some sense
649:22 - of this and then we'll visualize this
649:24 - but
649:25 - in the short term let's start with
649:27 - geoload.py code
649:30 - geoload.py take a look here so
649:34 - a lot of this hopefully by now is
649:36 - somewhat familiar to you
649:38 - uh url lib json sqlite
649:42 - and so i mentioned that the google apis
649:45 - these used to be
649:46 - free and did not require an api key but
649:48 - increasingly they're
649:50 - making you do api keys for especially
649:53 - new ones so what happens you you can go
649:55 - to your google places and go to google
649:57 - apis and get
649:59 - uh get it like an api key and you can
650:01 - put it in here it'll be this long
650:02 - big long thing that looks like that and
650:05 - then if you have an api key you can use
650:07 - the places api
650:08 - and i've got a copy of a subset not all
650:11 - of it a subset of it
650:13 - here at this url as a matter of fact you
650:16 - can just go to this url
650:18 - in a browser
650:22 - and it will tell you a list of the data
650:24 - that knows about okay
650:26 - and um and and i made it so that that
650:29 - does the same
650:30 - basic protocol with uh the address look
650:32 - you know address equals
650:34 - uh as the google places api so
650:37 - this will just change how we retrieve
650:39 - the data either retrieve it from my
650:41 - server nice thing about my server it's
650:43 - got no rate limit
650:44 - it's really fast and you're not fighting
650:47 - with google all the time and it means
650:49 - that perhaps if you're in a country
650:51 - that google is not well supported you
650:53 - can use my api i mean that's really
650:55 - strange that somehow my api is
650:57 - more reliable and available than the
650:59 - google one but it's true so we're going
651:02 - to make a database
651:04 - we're going to do a create table if not
651:05 - exists and we'll have some
651:07 - address and we're really just caching
651:08 - the geogra geographical data we're going
651:11 - to cache the json
651:12 - one of the things we do when we build
651:13 - these processes is we tend to simplify
651:16 - these things and not do all the
651:18 - calculation and parsing the json
651:21 - just load it and get it in and load it
651:23 - and get it in and fill the data up in
651:25 - this database and so that's what we're
651:26 - going to do
651:29 - because python doesn't ship with any
651:31 - legitimate certificates we have to sort
651:33 - of ignore certificate errors
651:35 - we're going to open the file and
651:38 - um we're going to loop through it
651:42 - and pull out the address from the file
651:45 - and we are going to um select
651:48 - from the geodata where that address is
651:51 - the address
651:52 - let's move this in a bit and um
651:55 - and so we're going to do a select and
651:57 - pull out that address
651:59 - and uh the idea is is if it's already in
652:02 - the database we don't want to do it
652:03 - so we do fetch one and pull out that
652:06 - first thing which is the ag
652:07 - that will be the json right there if we
652:09 - get that we'll continue up otherwise
652:11 - we'll
652:12 - keep going uh pass just means don't blow
652:15 - up so we accept and we just do a pass
652:17 - that's like a no op
652:19 - and um we're going to make a dictionary
652:22 - because that's what we do for the um
652:26 - the key value pairs everything you've
652:27 - seen so far i've used constants here but
652:29 - because we may or may not have an api
652:32 - key
652:32 - query equals and then that's the address
652:35 - and then the key equals and then the api
652:37 - key
652:38 - if you recall url and code adds the
652:41 - pluses and question marks and all that
652:43 - nice stuff
652:45 - we're going to retrieve it we're going
652:46 - to read it and decode it
652:48 - print out how much data we've got and
652:51 - add account and then we're going to try
652:54 - to parse that json data
652:55 - and print it if something goes wrong
652:58 - and as we've seen that at this top level
653:01 - of this json data from this geocoding
653:03 - api
653:03 - is an object which we'll see a little
653:06 - bit of it in a bit
653:08 - and it has a status field in it and the
653:11 - status is okay if things went well
653:13 - um so if the status is not there that
653:17 - means our javascript is not well formed
653:19 - or not how we expect it
653:20 - if the status is not okay or not equal
653:23 - to zero results then
653:24 - print out failure to retrieve and then
653:26 - then quit
653:27 - and then we're simply going to insert
653:29 - this new data that we just put in
653:32 - and then we're going to commit it and
653:34 - every tenth one this is count
653:36 - mod 10 we're going to pause for five
653:37 - seconds and we can hit control c
653:40 - here and then we're going to play the do
653:43 - the geo dump
653:44 - okay so let's just run this
653:47 - geo data python
653:52 - so let's do an ls so we don't ha oh we
653:55 - do have let's get rid of
653:56 - from a previous test geodata.sqlite so
654:00 - we'll start with a fresh
654:02 - a fresh set of data and run python
654:06 - geoload
654:07 - dot py of course i'm always forever
654:10 - making the mistake of forgetting python
654:12 - 3.
654:13 - so you can see that it's running and
654:15 - it's adding the query
654:17 - and in this case i don't have the api
654:19 - key and it's putting the pluses in and
654:21 - that's this part here with all the
654:22 - pluses
654:23 - that's the url and code and you notice
654:26 - it's pausing a bit now
654:27 - depends on how fast your net connection
654:29 - this may or may not go so fast but this
654:31 - is not that much data so it should
654:33 - it's like only two thousand three
654:34 - thousand characters and so it's working
654:37 - and talking to my uh my server
654:40 - and the interesting thing here is i can
654:42 - blow this up i'm gonna hit control c
654:45 - uh in windows you'd hit control in linux
654:47 - you'd hit control c and then windows i
654:49 - think you'd hit control z
654:51 - depending on what shell you're working
654:52 - in but i'm gonna hit control c
654:54 - and you see i sort of blew it up right
654:56 - and that's it causes a traceback
654:57 - a keyboard keyboard interrupt traceback
655:00 - we do an ls minus l
655:02 - um you can see that now this geodata is
655:04 - there now in the
655:06 - in the name of restarting i will restart
655:08 - this
655:09 - and you will see that it checks and
655:11 - skips and so all
655:12 - it runs this code here where it's um
655:16 - [Music]
655:18 - right here it grabs it and finds it in
655:20 - the database so you'll see it say found
655:21 - in the database really quick chop chop
655:23 - chop
655:23 - and go really fast and then it'll go
655:25 - back to catching up where it left off
655:28 - and so all those up there they did not
655:30 - actually retrieve it because it knew
655:32 - about those things
655:33 - and so now it's catching up and doing
655:35 - some more and doing some more and doing
655:37 - some more
655:38 - um and then i'll hit ctrl c it has a
655:41 - little counter in here
655:42 - that basically if it hits 200 it stops
655:44 - and you have to restart it
655:45 - you could obviously change this code you
655:47 - could make it so it didn't sleep
655:50 - it doesn't hurt to sleep for like a
655:51 - second after every 100 or so if you want
655:53 - you could change that code
655:55 - um and now uh let's just hit control c
656:00 - and blow it up ls minus l um and there
656:03 - is another bit of code and this code
656:05 - it's always good to write these really
656:06 - simple things and so
656:08 - we're gonna now we're going to import
656:10 - sqlite and json
656:12 - we're going to connect ourselves up
656:14 - we're going to uh
656:15 - open except this is a utf-8 because it's
656:18 - a utf we're going to open
656:20 - this with utf-8 and um we're going to
656:24 - read
656:25 - through and in this case we are going to
656:27 - um
656:29 - decode we did select star from locations
656:32 - and if you recall locations has
656:34 - a a location and a geodata
656:38 - uh and so the sub zero will be the
656:40 - location and the sub
656:42 - one will be the uh the geodata
656:45 - and we're going to parse it convert it
656:48 - to a string and then parse it
656:50 - if something goes wrong with the json
656:51 - we'll just keep skipping it or
656:53 - check to see if we have the status in
656:55 - our json
656:56 - um let me run the sqlite browser here
657:06 - file open database let's take a look at
657:08 - what's in this database
657:11 - oh where are we code three geodata
657:15 - geodata sqli so this is our
657:19 - the data we've got so if you make this a
657:22 - little bigger
657:22 - if i can can i make that bigger yeah
657:24 - it's not going to show us much
657:26 - so you can see that these are the
657:27 - addresses in the geodata that's just
657:30 - the json so that's the json that we got
657:33 - and it retrieves it and so this is a
657:34 - really simple database
657:36 - that's just a sort of spidering process
657:38 - run run run
657:39 - but now we're going to run the geodump
657:41 - code which is going to read this
657:42 - and dump this stuff out and printwear.js
657:45 - so it's going to actually parse this
657:47 - stuff
657:48 - and that's code we've seen before
657:52 - so we're actually reading it and this
657:53 - line goes into the results
657:55 - it results as an array so if we go into
657:57 - results results in array
658:00 - we're going to go grab the zeroth item
658:02 - in that array
658:03 - and then we're going to go find geometry
658:07 - and then location and then latin long
658:10 - for the latitude and longitude
658:12 - and then we're also going to take the
658:13 - actual address out of the formatted
658:16 - address right here so in this
658:20 - in this bit of code we're actually
658:22 - parsing the json
658:23 - and we're going to clean things up
658:27 - get rid of some single quotes this kind
658:29 - of data cleaning is just stuff after you
658:31 - play with it for a while you realize oh
658:32 - my data is ugly
658:34 - or does this i'm going to print it out
658:36 - and then i'm going to write this out
658:37 - and i'm going to write it into a
658:39 - javascript file
658:41 - and so the javascript file is this
658:44 - where.js
658:46 - and this i'll show you what it looks
658:48 - like
658:49 - it's going to be overwritten this is the
658:51 - one that came out of the zip file
658:53 - it'll have the latitude the longitude
658:55 - and we're going to use
658:57 - javascript to read this in this where
658:58 - dot html file
659:00 - it's going to actually read this right
659:02 - there
659:03 - and pull that data in and that's how
659:04 - we're going to visualize i'm not going
659:06 - to go into great detail on how the
659:07 - visualization happens
659:11 - but that's what's happening and so we're
659:13 - going to write that so we're going to
659:14 - actually write this to a file so let's
659:16 - go ahead and run this code
659:18 - and say python 3
659:24 - geodump
659:26 - okay so it wrote 120 records to where
659:28 - dot js
659:29 - so if we look at where dot js this is
659:31 - now the new data
659:32 - that i just downloaded moments ago and
659:35 - it says openwear.html
659:38 - in a browser
659:47 - now this way you'll need the google maps
659:49 - api and you might not be able to see
659:51 - this depending on where you're at but
659:53 - here you go with uh google maps
659:56 - locations and i think if you hover over
659:57 - this
659:58 - you can see and you see the utf why we
660:00 - there in that particular thing
660:02 - why we had to use the um utf-8 when we
660:06 - wrote the file so that we didn't end up
660:07 - with trouble writing the file out
660:09 - and so there you go and so that is a
660:12 - simple visualization and
660:17 - just a simple visualization wrote this
660:19 - where dot js
660:20 - if you are smart with html and
660:22 - javascript you can
660:24 - you can look at this where dot html file
660:27 - it's really
660:28 - just reading through a bunch of data and
660:30 - putting the points that's
660:31 - that's all there is but i'm not going to
660:33 - uh to go through that
660:35 - so at least not in this and so i i hope
660:39 - that
660:39 - this was useful to you and uh thanks for
660:44 - [Music]
660:48 - watching
660:55 - [Music]
661:03 - you