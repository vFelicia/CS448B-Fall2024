00:05 - what is linux
00:07 - well linux is the kernel that powers the
00:09 - linux operating system
00:11 - okay that's kind of nice
00:13 - and kernels are programs that talk
00:14 - directly to the hardware and manage
00:16 - resources and processes
00:19 - so what does that mean well
00:22 - in a cpu your chip that runs your
00:25 - computer
00:27 - ever since the 386 processors we've had
00:30 - this separation you have the kernel
00:35 - process and then you have everything
00:37 - else is in
00:38 - user land and they're separate
00:41 - so the
00:43 - way to make security work was they
00:45 - decided to separate them and decided
00:47 - that only one program was allowed to
00:50 - talk to the hard drive
00:52 - talk to the ram
00:54 - talk to
00:55 - all the other physical devices
00:57 - and that
00:59 - program
01:00 - was then responsible for making sure
01:02 - other programs started up
01:03 - and gave them permission to access
01:05 - things
01:07 - so the linux kernel
01:09 - does that in the linux operating system
01:12 - it's the only program allowed to talk to
01:14 - the hardware directly
01:16 - everything else
01:17 - has to talk to the linux kernel
01:19 - through things called system calls
01:22 - kernels need a whole operating system to
01:24 - be useful there are different kinds of
01:27 - operating systems if you look at linux
01:29 - you'll see there are the gnu linux
01:31 - operating systems which is basically the
01:33 - gnu software mixed with the
01:36 - linux kernel
01:37 - you also find things like android
01:40 - android is the linux kernel put on top
01:43 - of well
01:45 - added to a bunch of other software to
01:47 - run a phone
01:49 - when a linux kernel is bundled with
01:51 - operating system software and ship
01:53 - together that is called a linux
01:55 - distribution
01:58 - in the linux family or linux world there
02:01 - are many different families of
02:02 - distributions
02:04 - you have the red hat family you have the
02:06 - debian family you have all these source
02:08 - code distributions
02:10 - and then there's this whole
02:12 - recent debate about changing
02:14 - init to system d
02:16 - most
02:17 - distributions have switched to systemd
02:20 - but some are still back on the old
02:22 - indian system
02:24 - so what's the red hat family well the
02:25 - red hat family is one of the earliest
02:27 - families of linux distributions
02:29 - they discovered the red hat people
02:30 - discovered there was a problem and that
02:32 - problem was how do you
02:35 - package and ship software
02:38 - and not just ship it but ship it in such
02:40 - a way that
02:42 - you know which version of software you
02:43 - have and you can install things and make
02:46 - sure that they work together
02:48 - and so the red hat company
02:50 - created this
02:52 - red hat package management
02:54 - software
02:56 - and
02:57 - what happens here is all of your
03:00 - packages come as these rpm files and
03:03 - these rpm files
03:06 - are then
03:07 - installed and there is a database that
03:09 - keeps track of which ones are installed
03:11 - and
03:12 - then each rpm can tell you what its
03:15 - dependencies are
03:16 - it's become more advanced now you have
03:20 - big repositories that keep track of lots
03:22 - of different things and keep track of
03:24 - what the dependencies are so you don't
03:25 - have to try to figure that out on your
03:27 - own
03:29 - the debian family is basically the same
03:31 - thing as the r as the red hat family
03:32 - it's just slightly different
03:34 - and that would be
03:37 - with the deb packages instead of the rpm
03:39 - packages
03:41 - slightly different
03:43 - focus red hat tends to focus more on
03:45 - corporate
03:47 - company type things and debian's more
03:49 - the
03:50 - end user
03:52 - experience
03:53 - then you have these source code
03:54 - distributions well these source code
03:56 - distributions
03:57 - which includes things like i guess
04:00 - slackware and gen2 and arch
04:03 - these things
04:04 - they try to
04:07 - ship something but it wants to build
04:09 - stuff from source code because if you go
04:12 - from source code you have a much higher
04:14 - chance of things being
04:16 - compatible or not compatible and knowing
04:17 - very quickly
04:19 - you also have situations where
04:23 - you want to optimize your system and red
04:25 - hat and debian well they
04:27 - they're written with generic systems in
04:29 - mind and they're not really optimized
04:31 - for anything
04:32 - so it's kind of hard to optimize a red
04:35 - hat or debian system
04:36 - much
04:37 - but source code can get you much more
04:39 - optimized of course can be much worse as
04:41 - well
04:43 - and then
04:44 - there is this whole system so once the
04:47 - kernel starts up the next big thing is
04:49 - how do you start up everything else
04:51 - well
04:52 - you have this very first process after
04:54 - the kernel that runs and init
04:57 - the system 5 in it
04:59 - was something that came out of the
05:02 - old unix world and it runs these
05:05 - systems
05:07 - it starts up your services and it
05:11 - eventually brings you to
05:13 - your gui or your command line and start
05:16 - something up for you
05:17 - system d
05:19 - was created
05:21 - because they realized there were a
05:22 - couple of issues within it first of all
05:25 - it did everything sequential and you
05:27 - want to be able to do some things
05:29 - in
05:31 - a different order maybe you want to be
05:32 - able to start two things at the same
05:34 - time if they don't have any dependency
05:36 - relationship
05:37 - and then they
05:38 - just change the whole way of doing
05:40 - things so it's more
05:43 - closer together
05:44 - and it is just very organized scripts
05:47 - that do things and systemd is a more
05:50 - organized system of doing stuff
05:57 - so some hardware considerations when you
05:59 - are getting ready to install linux you
06:01 - need to know can your machine boot the
06:04 - installation media so that could be a
06:08 - cd-rom hard drive it could be
06:12 - floppy
06:13 - or it could be some kind of network
06:14 - based thing you have to decide can you
06:16 - boot it
06:18 - because you have to be able to boot into
06:19 - something in order to do your
06:20 - installation
06:22 - and you also need to know how much hard
06:23 - drive space do you need
06:25 - normally
06:27 - the earlier versions of linux get by
06:29 - with just a couple of
06:31 - well
06:32 - mags and it moved up to a couple of gigs
06:35 - and now you're looking at right around
06:37 - eight or so gigs and it's going to
06:39 - probably grow and get bigger as you need
06:41 - more and more in order to run
06:43 - how much ram do you need
06:45 - well in the early days you only needed a
06:47 - couple megabytes
06:48 - but now
06:49 - if you want a gui you have to have at
06:51 - least a gigabyte of ram
06:53 - and that's just kind of a minimum you
06:55 - really want more than that
06:57 - you want to know will your video card
06:58 - work
06:59 - one of the issues that originally
07:02 - plagued linux was these video cards
07:04 - would come out but they had this whole
07:06 - thing about secret drivers if you make a
07:09 - mistake with the hardware all you have
07:11 - to do is just fix it in the driver and
07:13 - no one will know
07:14 - but now well people do find out
07:19 - because most of the video cards
07:22 - have source code
07:24 - that is available to look at and people
07:26 - can see oh you messed up
07:29 - the same kind of thing happens with the
07:30 - wireless cards because if you have
07:31 - wireless cards
07:33 - you want to have drivers linux likes to
07:35 - run with everything
07:38 - compiled from source code rather than
07:40 - just binary drivers
07:43 - you also need to look at your other
07:44 - hardware needs do you need to have
07:45 - scanners or
07:47 - cameras or other devices hooked up and
07:50 - do you have software for it so you can
07:52 - look and try to figure out if the
07:53 - software is available and working for
07:55 - linux
07:58 - there are a couple different
07:59 - installation
08:00 - methods you can do a dvd installation
08:04 - so this is typical for physical devices
08:07 - when you want to physically install it
08:09 - on a computer
08:10 - also if you're using something like
08:13 - virtualbox or vmware you might use an
08:16 - iso installation you're actually doing a
08:18 - dvd installation but the iso image
08:22 - is really the image of the dvd before
08:24 - it's burned onto a dvd
08:26 - and the
08:28 - virtualization software can
08:31 - pretend that the dvd is actually burned
08:34 - and install off of that image
08:37 - you can do usb installations
08:41 - you can do hard drive installations if
08:42 - it's already installed in the hard drive
08:44 - and you can
08:45 - install from there and sometimes you can
08:47 - do network installations but that
08:48 - requires having
08:50 - some kind of a boot service and be able
08:53 - to install
08:54 - well off the network
08:58 - time and date when you're doing your
09:00 - installation
09:02 - you need to have your time and date set
09:05 - so how does a computer clock work well
09:09 - you've probably seen movies about
09:11 - crystals and stuff like that and
09:12 - trekking through jungles trying to find
09:14 - amazing crystals that'll make things
09:15 - work great
09:17 - really the whole idea is you're trying
09:19 - to find a clock
09:21 - trying to make a clock work and so they
09:23 - use quartz crystals
09:24 - the idea is if you send electricity
09:27 - through quartz crystal it oscillates at
09:29 - a given frequency and the computer can
09:31 - count that and keep track of
09:34 - date and time
09:36 - the problem is that not all course
09:38 - crystals are created equal so it doesn't
09:40 - work that way
09:41 - i mean they get off a little bit
09:43 - so
09:44 - in order to make things work properly
09:46 - you have to use things like network time
09:50 - so let's talk about time zones
09:52 - well if everybody were in the same time
09:54 - zone it wouldn't matter what time zone
09:56 - we were in
09:58 - but if we were in different time zones
10:00 - then there are all these differences
10:02 - the question of
10:04 - is it always the same number of minutes
10:06 - different between two different time
10:08 - time zones well that's not quite right
10:10 - because you have things like
10:13 - daylight savings time and other things
10:15 - that mess everything up sometimes
10:17 - political changes change your time zones
10:20 - and you want to make sure that you have
10:22 - the same time as somebody else
10:24 - if you are in
10:26 - seattle
10:28 - and someone else is in new york
10:29 - well there are a couple of time zones
10:31 - between you
10:33 - and you want to make sure you have the
10:34 - same time
10:35 - not the same time of the day but
10:38 - knowing that you can take the time on
10:40 - your computer and
10:42 - calculate out what time it is in a
10:44 - different computer somewhere else so it
10:46 - is important to make sure you set the
10:47 - correct time zone
10:49 - so that you know
10:50 - that you are not the same time as
10:53 - someone else
10:55 - when you're restoring your time on your
10:57 - computer
10:58 - it gets written out into a chip and
11:02 - the question is do you want to store
11:04 - local time or utc utc would be your
11:07 - greenwich mean time or your zulu time
11:12 - so windows machines tend to use local
11:15 - time for everything
11:17 - well that's great
11:18 - until you move your computer from one
11:20 - time zone to another time zone
11:22 - because then you have to sit there and
11:23 - recalculate everything
11:24 - linux likes to store everything as utc
11:26 - so then all it needs to know is what
11:28 - time zone am i in
11:30 - and then when it reads it from the
11:32 - computer it can immediately translate
11:34 - into your time zone and be fine
11:37 - windows when you move from one time zone
11:39 - another time zone you have to
11:41 - change it from your local time to utc
11:45 - then to the other time zone
11:48 - much more complex
11:50 - network time
11:51 - communicates
11:53 - over the network you send a request to a
11:56 - server
11:57 - the server sends you the time as utc and
11:59 - you have to calculate it and convert it
12:01 - to local time
12:05 - when you're doing installation you have
12:06 - to do your software selections you have
12:08 - to decide which software should i select
12:12 - normally the default is to have a
12:13 - minimal install
12:15 - minimal install has really minimal
12:18 - software there's very little there if
12:20 - you want to have a secure server you
12:22 - want to start with a minimal install
12:23 - however if you want a desktop you don't
12:25 - want to start with a minimal install you
12:26 - want to start with something like the
12:27 - gnome desktop
12:29 - options so make sure you have the right
12:30 - one
12:31 - selected
12:33 - what type of machine do you have
12:36 - well that's back to your hardware
12:38 - questions what hardware do you have
12:41 - and you also need to decide how is this
12:43 - machine going to be used are you using
12:45 - it as a desktop machine or as a server
12:47 - are you running a web server
12:50 - so you want to try to pick what you want
12:52 - if you are running it as a server
12:54 - and you don't want to be
12:56 - hacked
12:58 - it's best to start with a minimal
12:59 - install if you run around as a desktop
13:01 - well just start with the desktop
13:04 - can you install packages later yes you
13:06 - can
13:07 - you can install lots of packages later
13:09 - everything you can do during
13:10 - installation you can pretty much do
13:12 - later
13:14 - and where does the software come from
13:15 - well you have these software
13:17 - repositories and your software comes
13:19 - from the repositories and you download
13:21 - it
13:22 - and install it
13:24 - and linux when you have these linux
13:26 - distributions
13:28 - these distributions are
13:30 - the main purpose of them is to provide
13:31 - these repositories so you can get your
13:33 - software
13:34 - later
13:37 - what are the requirements of different
13:38 - packages well fortunately you don't have
13:40 - to know too much
13:42 - but
13:44 - the repository does keep track of which
13:47 - software is required by which other
13:49 - software pieces so when you do an
13:51 - installation
13:53 - of a particular piece of software it
13:55 - will search through a database and
13:56 - figure out which dependencies are
13:58 - required check your system to see which
14:00 - ones you already have and then after
14:02 - it's decided which ones you have
14:04 - it can download everything you're
14:06 - missing
14:07 - install those and then the package you
14:09 - need
14:10 - so you don't need to worry too much
14:16 - you are doing your installation you need
14:18 - to install linux onto the hard drive
14:22 - so
14:24 - where is that well you have a hard drive
14:28 - and
14:29 - you have it divided into individual
14:31 - partitions
14:32 - so the hard drive can be different
14:36 - drive volumes
14:38 - and linux can be installed in any one of
14:40 - these volumes
14:42 - normally you'd want to install
14:45 - at least the boot loader the main parts
14:47 - of it
14:48 - on the beginning part of the hard drive
14:51 - so that you can then read later parts of
14:53 - the hard drive and see everything
14:56 - you also have this thing called swap
14:58 - partitions a swap partition
15:01 - is used in situations where you run out
15:03 - of memory if you run out of memory or
15:05 - hard drive space
15:06 - really bad things happen to linux
15:07 - machines you don't want to ever run out
15:09 - of memory
15:10 - ever
15:11 - is bad
15:12 - don't do it
15:14 - so a swap partition
15:16 - is nice because it takes a portion of
15:19 - the hard drive
15:20 - and it uses it as virtual memory
15:23 - so when you start running out of hard
15:25 - drive space well not out of ram
15:28 - you will take pieces of your ram that
15:30 - are not being used you'll write them to
15:32 - the hard drive
15:34 - and if you suddenly need those pieces of
15:36 - ram again you will pull it from the hard
15:38 - drive back into ram and put something
15:39 - else on the hard drive
15:42 - if you do that a whole lot
15:43 - that's called thrashing it's really bad
15:45 - for your system makes everything slow
15:48 - because the hard drive is much slower
15:50 - than ram
15:53 - so you want to have swap
15:55 - but you don't want to have a large
15:59 - swap
16:01 - and you don't want to ever have to use
16:03 - the swap
16:04 - you just want it there in case you do
16:06 - run into it
16:09 - so what are the other partition types
16:10 - well you've got these linux types you've
16:12 - got your swap
16:14 - you also have things like raid
16:15 - partitions
16:17 - or lvm partitions
16:20 - so lvm is the local
16:23 - or logical volume management
16:25 - the idea being that you can create a
16:27 - giant partition and then make other
16:32 - fake-ish partitions inside of it
16:34 - lvms make it possible to resize and move
16:39 - data around
16:41 - seamlessly
16:42 - so it's kind of nice to have lvm
16:44 - but if you aren't making huge changes or
16:46 - adding hard drives removing hard drives
16:48 - or if you're using a virtual machine
16:49 - there's really no need to have lvm
16:51 - you can just stick with your standard
16:54 - linux partitions
16:58 - once you have a partition you need to
16:59 - install
17:00 - a file system into that partition and
17:02 - there are different file systems
17:05 - linux came from the minix world and so
17:08 - you have this mix file system
17:11 - and then you have
17:13 - expansions so it was extended
17:16 - the first extension of minix was ext2
17:21 - and then you have ext3 and ext4
17:24 - and these are extensions for the
17:27 - minix
17:29 - file system
17:31 - but there are other
17:32 - different
17:34 - file systems you can have xfs which is
17:37 - the default on a lot of newer linux
17:39 - machines
17:40 - you also have
17:44 - windows partition types like fat32 and
17:48 - you have your ntfs and linux can create
17:52 - different file systems and put them into
17:53 - partitions and use them
17:56 - and the way it uses them is through
17:58 - mount points amount point is a
18:02 - directory
18:03 - in your directory structure
18:05 - so you you first have your first main
18:07 - partition which is your root partition
18:09 - for the entire system and then you'll
18:11 - have directories inside of that and then
18:12 - you can take any one of those
18:13 - directories in there
18:15 - and say oh this directory is going to be
18:17 - redirecting to a different partition
18:20 - and those redirections into a different
18:22 - partition where you merge two different
18:24 - partitions together into the same
18:26 - directory tree
18:29 - are called mount points on windows
18:31 - machines you have your mount points as
18:34 - drive letters normally so you have the c
18:36 - drive and the d drive and the e drive
18:39 - and the f drive and those would all be
18:40 - separate partitions
18:45 - networking
18:46 - why should i set a host name well
18:49 - your machine does much better if it has
18:51 - a host name everything seems to work
18:53 - better
18:54 - usually it even works
18:56 - much better if the host name maps up to
18:59 - an actual dns entry in a dns server
19:01 - somewhere
19:04 - but that isn't required
19:06 - and if you have a host name on your
19:07 - machine that doesn't mean that anybody
19:09 - else can see that hostname
19:11 - maybe they have no idea what you've set
19:12 - and you're not telling them what your
19:13 - host name is
19:15 - so
19:18 - it's mostly for internal functioning
19:20 - and making sure you don't have to use
19:23 - the hostname of localhost
19:27 - why should i turn on my networking
19:29 - well you can't do software updates if
19:31 - you don't have networking
19:33 - it's hard to do any networking based
19:34 - things if you don't have networking so
19:36 - really you should turn it on
19:39 - but when you turn on what should you use
19:41 - should you use dhcp or a manual
19:43 - configuration
19:45 - most computers out there on the internet
19:48 - use dhcp
19:50 - most servers
19:52 - actually use a manual configuration so
19:54 - if you're using a client machine you're
19:56 - going to use dhcp
19:58 - in most cases
20:00 - and you'll use a manual configuration
20:02 - for
20:03 - anytime you need a server there are some
20:05 - servers that will not run
20:07 - with dhcp
20:09 - dns servers really want manual
20:10 - configurations
20:11 - dhcp servers
20:13 - manual configurations
20:15 - active directory and things like that on
20:18 - windows machines want manual
20:19 - configurations and don't really well run
20:21 - well on dhcp
20:25 - can i change the networking after
20:26 - installation
20:27 - of course
20:29 - linux networking
20:31 - on these uh
20:33 - centos linux based machines tends to be
20:36 - managed by the
20:38 - nm
20:39 - or network management tools
20:42 - and
20:44 - you can usually click on applets in your
20:47 - gui to change your networking settings
20:49 - or you can use the
20:51 - nmtui
20:53 - command
20:54 - for the command line to change your
20:56 - networking
21:00 - root what is the root user well the root
21:03 - user is the main user that runs the
21:06 - entire system
21:08 - root is the process or the user that
21:10 - runs all kinds of stuff and makes
21:12 - everything work
21:14 - so
21:15 - is it the same as administrative account
21:17 - well not quite
21:18 - administrative users usually have
21:22 - a group that they're part of
21:24 - and on most linux machines it's the
21:26 - wheel group
21:28 - so if you are a member of the wheel
21:29 - group then you're considered a
21:32 - administrative
21:33 - user
21:34 - and then
21:35 - the idea is that you can sometimes run
21:39 - administrative commands using
21:41 - different software things like the sudo
21:43 - command
21:46 - in order to run them as the root user
21:49 - so what are the requirements for root
21:51 - password well
21:53 - you really don't have a lot of
21:54 - requirements
21:56 - with during installation it might throw
21:57 - a fit if you are having simple easy
22:00 - passwords but you want to have a
22:02 - password that's hard to guess
22:04 - and that you can remember
22:06 - so you need to remember the password and
22:10 - don't forget it but why is it set during
22:13 - installation well it's a lot harder to
22:14 - set it after you've installed after
22:16 - you've booted up when you're trying to
22:17 - log in
22:19 - so make sure you set it during
22:20 - installation
22:23 - additional users why should i create
22:25 - additional users
22:27 - well it is not usually good practice to
22:29 - run as the root user all the time when
22:31 - you're doing administrative tasks you
22:33 - want to be able to have root access but
22:36 - you don't want to accidentally click on
22:38 - some link and
22:40 - do something accidentally and have your
22:42 - entire system destroyed because you're
22:44 - running as the root user
22:46 - so you want to run as a different user
22:49 - and in order to run as a different user
22:50 - you need to create an additional user
22:52 - that is not the root user
22:54 - you can make it an administrative
22:56 - account which basically puts it in the
22:58 - wheel group and allows you to run the
23:00 - sudo command sudo
23:03 - and that allows you to run stuff as root
23:08 - so you want to make sure you have a good
23:10 - username
23:11 - and a good username is a username that
23:13 - is not one of the standard easily guest
23:16 - usernames
23:18 - so you standardly easy guess usernames
23:21 - would be your generic
23:23 - names
23:26 - you know your alice bob and
23:28 - eve those kind of things
23:30 - you don't want to have
23:32 - bad passwords either make sure the
23:33 - password is good and does not match the
23:35 - username in any way make sure it's
23:37 - complex enough to be
23:40 - not guessed easily
23:45 - once you do your installation and you
23:46 - boot up you have this initial setup
23:48 - thing and the initial setup
23:52 - shows up during the
23:53 - gui installation
23:55 - they want you to accept the license
23:57 - agreement
23:58 - and then
24:00 - if you don't set accept license
24:02 - then they kind of really don't want you
24:04 - using it
24:06 - so they try to force you to do the
24:08 - license agreement and then there's this
24:10 - whole thing about kdump
24:12 - kdump
24:14 - basically is a feature that allows you
24:17 - to
24:19 - have all of your memory
24:21 - written out to the hard drive in cases
24:24 - of a kernel crash
24:27 - usually you're not going to look at that
24:29 - so you don't really care but if you are
24:31 - a kernel developer you might care about
24:33 - it i might want it there
24:37 - login options what are the login options
24:40 - well you can log in from
24:43 - your gui or you can log in from a
24:46 - command line
24:48 - normally you start up in the gui
24:51 - and you just
24:52 - pass in your username and
24:55 - password
24:57 - and usually your user shows up you can
24:59 - just click on your user and then type
25:01 - the password
25:04 - and
25:05 - that's how you get in
25:07 - if you don't want to log in as one of
25:09 - the users that shows up you can select
25:11 - additional users type in the root
25:14 - user's name which is root all lower case
25:18 - and the root password to get into the
25:19 - gui
25:21 - or you can press something like control
25:23 - alt and f2 or control f3 or control f4
25:27 - or one of those numbers and drop to a
25:30 - command line
25:31 - and then log in as root
25:34 - with a password
25:36 - when you log in
25:38 - you want to make sure that
25:41 - you realize that when you're typing your
25:42 - password it will not echo back any stars
25:45 - or letters or anything like that so you
25:46 - just have to know that the password is
25:48 - being typed in just trust that
25:50 - something's going in there it makes it
25:51 - so it's harder to do some kind of a
25:53 - screen observing and stealing
25:57 - so
25:58 - that's what that's for
26:00 - so what might cause a login to fail well
26:02 - you'll obviously fail to log in if you
26:04 - don't have that user on the system
26:07 - you will fail if your password doesn't
26:09 - match the user's password
26:11 - you will fail
26:13 - in some cases if you cannot log in
26:15 - because the hard drive is full or
26:17 - because directories got deleted
26:22 - you might also fail to log in if
26:25 - somehow permissions got set incorrectly
26:28 - if the ownership of a directory got
26:30 - messed up
26:31 - if you break things
26:32 - if your se linux context got messed up
26:36 - so if you break things it might not work
26:39 - so how do you know they're working well
26:41 - if you log in
26:42 - it's working
26:43 - so then what can you do in your system
26:45 - well you can do
26:47 - updates you can't install software you
26:49 - can run the
26:50 - software those are really the things you
26:52 - want to do
26:55 - all right so when you're booting up what
26:57 - is the boot process well you have a
26:59 - bootloader
27:01 - a bootloader is a piece of software that
27:04 - is there to load your operating system
27:09 - why do you need that well
27:10 - originally when they started looking at
27:12 - operating systems they decided to start
27:14 - with these really really really small
27:15 - processes they decided that
27:17 - the first 512
27:21 - bytes of memory we get loaded into
27:22 - memory
27:24 - and then you just start running it
27:26 - well that's great but
27:28 - 512
27:30 - bytes is not very much for anything
27:32 - you can't really run a huge operating
27:34 - system that but you can load a program
27:36 - that loads your boot loader that then
27:38 - loads your operating system
27:41 - so it's a long process
27:45 - with multiple steps
27:46 - you have your
27:48 - bios
27:49 - load your
27:51 - first bit of the hard drive that first
27:53 - fill the hard drive loads your boot
27:55 - loader your bootloader then loads your
27:58 - operating system
27:59 - and then your operating system then
28:02 - starts up your
28:04 - initial process
28:06 - which would be
28:07 - init or system d
28:09 - the system d
28:11 - process would then
28:13 - load up your services
28:15 - and create load your gui and create all
28:18 - of your terminal logins and all that
28:21 - so it's a long multiple step process
28:27 - how do you set boot options well it
28:29 - depends on which options you want to set
28:30 - but normally when you're talking about
28:33 - boot options you're looking at what the
28:35 - kernel loads as
28:37 - and those can be configured in the grub
28:39 - configuration and that's normally
28:41 - found in the etc
28:44 - boot directory
28:46 - and
28:48 - sometimes that gets written out there
28:50 - from other directories and you can look
28:52 - around for grub configurations
28:55 - and just
28:57 - find things
28:59 - where are the boot files located well
29:02 - normally in the
29:04 - boot directory
29:06 - and the boot directory contains your
29:08 - kernel your initial ram disk
29:11 - mapping your grub configurations all
29:14 - those be stored in your
29:16 - boot
29:17 - directory
29:20 - i guess we already talked about how the
29:21 - system starts and when does start
29:24 - but
29:26 - there we go
29:27 - navigation so when you log in where am i
29:31 - oh where
29:33 - am i when i start
29:36 - so normally you start right there in
29:39 - your home directory
29:42 - and how do you move around
29:44 - well
29:46 - in the gui you can click on things
29:48 - and
29:49 - look at different directories and that
29:50 - will show you
29:52 - what's in them if you get a terminal up
29:55 - or if you log in from a terminal
29:57 - you will start in your home directory
29:59 - and you can use the cd command to change
30:01 - directories
30:03 - then you figure out well where is
30:04 - everything stored
30:06 - well programs and user files
30:10 - and logs and configuration files are all
30:11 - stored in different places the programs
30:13 - are usually stored in the
30:15 - slash
30:16 - usr directory but sometimes they're
30:18 - stored in the slash opt directory and
30:22 - sometimes they're stored in the slash
30:24 - bin directory or slash s-pen
30:27 - it depends on which programs you want
30:29 - user files are usually stored in the
30:31 - home directory so slash home
30:33 - and then your username
30:35 - so you store all your files there logs
30:37 - get started in the slash var directory
30:40 - so slash var slash log you can go in
30:43 - there and take a look around and see
30:45 - what you find
30:47 - and then configuration files are
30:48 - normally stored in the slash etc
30:50 - directory so you can look at those and
30:53 - see what
30:55 - files can be edited and changed
30:59 - when you're doing networking it's kind
31:01 - of important to know what your ip
31:02 - address is and you can type in
31:04 - ifconfig on most
31:07 - linux and
31:09 - unix-like systems and they'll tell you
31:11 - your
31:13 - ip address so that's interface config
31:15 - ifconfig
31:16 - however on newer linux machines you need
31:19 - to type in ipspace addr
31:23 - and that will tell you your ip address
31:26 - it also tells you your mac address
31:30 - your host name normally shows up in your
31:31 - prompt but you can type in the keyword
31:33 - hostname by itself to see what your host
31:36 - name is set to
31:37 - where is it set
31:39 - it's normally set in the etc directory
31:42 - in a file called hostname so slash etc
31:45 - hostname is where your hostname is
31:47 - normally set
31:50 - where is your dns set well there is the
31:52 - etc directory once again because that's
31:54 - where the configuration files are at
31:56 - there's an etc and then resolve.com
31:59 - resolve dot conf is spelled without a
32:02 - trailing e on resolve so it's
32:04 - r-a-s-o-l-v
32:06 - dot c-o-n-f
32:08 - and it is your name server that's set
32:10 - there
32:11 - where is the ip address set
32:13 - well
32:14 - it is normally
32:16 - it depends on how how it's loaded but
32:19 - the configuration scripts for the ip
32:21 - address are in the etc
32:26 - etc directory and it's in the
32:29 - sysconfig
32:30 - network scripts directory
32:33 - and there is usually a file called ifcfg
32:36 - dash and then your interface
32:38 - name
32:40 - so
32:41 - ifcfg-ens32
32:44 - or
32:44 - ifcfglo for the local combat loopback
32:48 - and so you just go in there and
32:50 - look at that
32:52 - um
32:53 - how do you test your networking you can
32:54 - use ping traceroute
32:57 - you can try to do stuff
33:01 - how do you edit files well you can view
33:03 - files with the cat command
33:06 - cat's actually from concatenate
33:08 - but you can type in cat space in the
33:09 - name of a file and it will list the
33:11 - contents
33:12 - you can
33:13 - look at them with the less command if
33:15 - you want to scroll through it
33:18 - make sure you press q if you want to get
33:19 - out of less
33:20 - just less in the file name
33:22 - and queue to get out
33:24 - what about editing it if you want to
33:26 - edit it you can use vi nano emacs g edit
33:30 - any one of those editors
33:32 - how do you get more editors
33:34 - well you install them you can use yum
33:36 - install on the name of the editor
33:38 - assuming that's the name of the package
33:39 - that installs it
33:40 - so which editors are best well vi tends
33:43 - to be available on most
33:45 - systems
33:46 - it's been around for a very long time
33:48 - and
33:49 - many people who like archaic editors are
33:53 - familiar with vi
33:55 - it is not the best editor
33:57 - it is not a very good editor and is very
34:00 - cumbersome and complex and people hate
34:02 - it
34:03 - and because they hate it they are
34:04 - starting to remove it
34:06 - so it's starting to become less and less
34:08 - common on newer distributions but it is
34:11 - pretty much installed on every linux
34:14 - and unix distribution out there right
34:16 - now
34:18 - nano nano is a much better one
34:22 - nano is based off of
34:24 - a original editor from the university of
34:28 - washington called
34:29 - pico
34:32 - the university of washington had bad
34:33 - licensing
34:34 - so nano was created as a drop-in
34:37 - replacement for pico
34:40 - and that's kind of nice
34:42 - it's a much easier
34:45 - editor to use not
34:47 - incredibly powerful but it is easy to
34:49 - use
34:50 - emacs is one of the earlier editors as
34:53 - well like vi
34:55 - there was a long time a vi emacs debate
34:58 - on which one is better emacs was written
35:00 - by the same people who wrote the gnu
35:02 - project
35:04 - so
35:06 - comes from there emacs is very difficult
35:08 - to use and i recommend against using it
35:10 - fortunately is not installed on linux
35:12 - distributions by default
35:14 - so you have to worry
35:15 - g edit is your
35:18 - editor that shows up in your gui
35:21 - so
35:22 - much easier to use you can click on
35:24 - buttons like a save button
35:26 - and
35:27 - open button
35:29 - and you see everything and so g edit
35:31 - it's kinda nice there
35:36 - software updates how do i update the
35:38 - system well use the yum command
35:41 - so you can do a yum update yum
35:44 - first of all because you want to make
35:45 - sure your updater is updated all the way
35:48 - if you don't have a fully updated
35:49 - updater then weird things can happen
35:51 - sometimes
35:52 - you want to make sure you update the
35:54 - software
35:56 - of the entire system you can just do a
35:58 - yum update and that will update
36:00 - everything
36:02 - if new programs are available it will
36:04 - update anything that's new
36:08 - um you can also update new stuff
36:12 - with uh
36:13 - by just doing
36:15 - yum install
36:18 - in the individual package and again
36:20 - update or install new packages
36:22 - how do i know if it's already installed
36:23 - well you can try yum install something
36:27 - and if it says it's already installed
36:29 - then it's installed you can also type in
36:31 - the rpm command and look at the rpm
36:33 - database directly
36:35 - so you can do rpm minus q a to list all
36:38 - of your packages or just rpm minus q and
36:42 - the name of the package
36:44 - and see if it's installed
36:46 - how do you uninstall it well you can do
36:48 - yum
36:51 - remove and the package
36:53 - you can also do the rpm package
36:57 - directly
36:58 - rpm minus e for erase and then the
37:01 - package name
37:04 - so what happens when you update gui
37:06 - files while in the gui well that happens
37:08 - sometimes if you do a full system update
37:10 - and you're in the gui sometimes the gui
37:12 - gets updated
37:14 - and as you might imagine if you're in
37:15 - the middle of running a program and that
37:17 - program changes sometimes you have to
37:20 - read parts of that program from memory
37:22 - and sometimes you have to read parts of
37:24 - that program from the hard drive and if
37:26 - it changes it changes the hard drive and
37:28 - you can get an inconsistent state that
37:30 - crashes
37:31 - so don't update
37:33 - your gui from in the gui
37:35 - drop down to the command line and do it
37:36 - from there
37:39 - how do i connect to the internet
37:41 - well with the network
37:43 - but you also need to have your
37:45 - browsers so firefox and browsers are
37:48 - great
37:49 - if you want you can even install
37:51 - chrome
37:53 - or
37:54 - other browsers they are available and
37:56 - can be installed
37:58 - how do i get a remote terminal
38:00 - well remote terminals are things like
38:02 - ssh
38:03 - so you can use
38:04 - ssh and it's already installed on your
38:06 - system by
38:07 - default
38:09 - so you can
38:11 - type ssh space and the ip address of a
38:14 - machine to log into that machine
38:17 - um
38:18 - sometimes you need to pass a username i
38:20 - usually do ssh space
38:23 - username at symbol ip address to log
38:26 - into machines
38:28 - how do i get a remote gui
38:30 - well that's a lot more complex
38:32 - um you can have your
38:34 - x
38:35 - 11 gui exported
38:38 - and then you should go from one links
38:39 - machine to another linux machine and you
38:42 - can start up
38:43 - things like terminals inside the or
38:47 - web browsers inside of your local
38:49 - machine that are actually running on the
38:50 - remote machine
38:52 - or you can use something like
38:55 - vnc or other software to get a remote
38:58 - gui
39:02 - capturing data
39:04 - how do i take a screen print
39:08 - well
39:09 - if you're running a virtual machine that
39:10 - gets a little bit tricky
39:12 - sometimes the screen print button works
39:15 - for taking pictures and sometimes the
39:16 - screen print button doesn't
39:19 - um if you want to take a screen print of
39:21 - something
39:23 - and you want to
39:25 - show
39:26 - what's going wrong when you're trying to
39:27 - talk to people
39:29 - it's usually best if you're outside of
39:31 - in a virtual machine
39:33 - to take a picture of the virtual
39:36 - machines window
39:38 - using
39:40 - your local screen printing tools
39:43 - such as
39:44 - the stamping tool on windows
39:47 - how do you get data from a terminal
39:49 - well
39:50 - it depends on how you're connected
39:52 - if you're connected to your virtual
39:54 - machine
39:55 - through
39:56 - your virtual machines window
39:59 - maybe you can't
40:00 - um
40:01 - maybe you can maybe select it and copy
40:03 - it sometimes it copies out sometimes it
40:05 - doesn't
40:05 - what's usually easiest is if you ssh
40:08 - into your virtual machine
40:11 - or ssh into your machine it's easy to
40:13 - copy and paste into an ssh
40:17 - terminal emulator
40:19 - and that makes it much easier
40:21 - in addition to that if you have a
40:22 - terminal emulator that allows you to do
40:24 - file copying
40:26 - you can just usually drag and drop or
40:28 - copy it
40:31 - sometimes you use the scp command to do
40:33 - a secure copy between machines as well
40:38 - and then last how do i get out of my gui
40:44 - usually there is a button in the upper
40:45 - right hand corner sometimes this lower
40:47 - right hand corner sometimes this is the
40:48 - upper left hand corner and sometimes
40:50 - it's the lower left-hand corner
40:52 - so you just have to figure out where it
40:54 - is but click on the button and it will
40:56 - allow you to log out or
40:59 - shut down the machine
41:01 - how do i log out i would text with
41:02 - terminal just type the exit command
41:05 - until you are logged out
41:07 - how do i shut down
41:09 - well in the gui you just find the button
41:11 - to shut down
41:12 - on the command line
41:14 - you type in the shutdown
41:17 - command to shut down
41:19 - usually you have to tell it when you
41:21 - want to shut down so type in shutdown
41:23 - and then the keyword now to shut down
41:25 - now
41:26 - how do you reboot just type reboot on
41:28 - the command line or from the gui find
41:30 - out where your button is
41:33 - and this has been a quick little
41:34 - overview of your linux installation and
41:37 - leaving linux machine using a linux
41:39 - machine
41:41 - so
41:42 - good luck
41:45 - command line navigation
41:49 - when you first log in
41:51 - you're in your
41:53 - user environment and there are things
41:55 - you can do and things you
41:57 - might want to do but you need to know
41:59 - how to do
42:00 - one of the things you want to do is
42:01 - probably bring up a terminal window many
42:04 - things
42:05 - many different commands are written
42:07 - specifically to run well in the terminal
42:10 - and if you don't have access to the
42:11 - terminal it's hard to run them not
42:13 - everything is created to run in the gui
42:16 - so how do you bring up a terminal window
42:18 - well let's look at
42:22 - this right here
42:23 - you can see if i click on my application
42:28 - then i can scroll down to favorites and
42:30 - off to the right side there is terminal
42:33 - you can also go down to utilities
42:37 - or system tools
42:39 - some tools and you can find your
42:40 - terminal down here
42:41 - either way you can launch the terminal
42:43 - and once you have the terminal up you
42:45 - can start typing in commands
42:48 - and that's pretty useful
42:51 - so
42:52 - what do we have where am i
42:54 - if i do a pwd command i can see my
42:58 - present working directory
43:00 - i am in the slash home
43:02 - joseph directory if i do an ls
43:05 - command
43:06 - i can see
43:07 - things that are in that directory i can
43:09 - do an ls minus l to list it in long
43:12 - format
43:13 - which makes it easier to
43:15 - read for some people
43:16 - or i can do an ls minus al
43:19 - to show all files including the ones
43:22 - that are hidden hidden files are
43:23 - basically just files that start with a
43:25 - dot
43:27 - i see all these files in my directory
43:31 - so let's go back to the slides
43:36 - pressure man well the pwd command
43:39 - what does my prompt tell me well the
43:41 - prompt tells you your username
43:44 - and it also tells you the directory
43:46 - you're in
43:47 - and that can be useful
43:49 - it also tells you the hostname and we'll
43:51 - look at that again when we go back to
43:52 - the terminal
43:56 - when you're logged in you have an
43:58 - environment well what are environment
44:00 - variables environment variables are
44:02 - basically
44:05 - name
44:06 - value pairs that are stored that your
44:09 - programs can use
44:12 - so if you look at your environment you
44:14 - will see a bunch of name value pairs
44:17 - one of those name value pairs would be
44:19 - something like username and
44:22 - it would actually list the user for my
44:25 - case joseph so
44:27 - username equals joseph
44:29 - i might also have things like my path a
44:32 - path is a
44:34 - list of directories that i look in
44:36 - whenever i type in a command
44:38 - to try to run that command
44:41 - so it doesn't matter what my environment
44:42 - is well it does
44:44 - because if you have a
44:46 - environment
44:48 - and your environment
44:50 - doesn't have certain things in it
44:52 - then you will have to explicitly
44:55 - indicate where those things are
44:58 - programs rely on the path to be able to
45:00 - find things
45:02 - you can look at your environment
45:06 - with the env command to show the
45:09 - environment
45:10 - you can also change them
45:12 - with the export command
45:14 - so
45:14 - let's go ahead and look at this again
45:18 - so if i type in env
45:22 - i can see
45:23 - all these different variable
45:27 - variable sets
45:28 - such as my home
45:30 - and my actual home directory which can
45:33 - be useful because then i can use a
45:35 - program
45:36 - and i can tell it instead of going to
45:39 - slash home slash joseph
45:41 - i could
45:42 - do something like use the home variable
45:46 - so how to use the variables
45:48 - well if i wanted to type in echo
45:51 - i can type in echo and it will tell me
45:53 - things it will repeat whatever i tell it
45:55 - to repeat but i can use variables here i
45:57 - go
45:58 - home
45:59 - with a dollar sign and it will not echo
46:02 - the word home but it will echo the value
46:05 - of the home
46:08 - environment variable
46:10 - some of these variables are set in some
46:12 - of the files in my directory so if i do
46:14 - ls minus al i can see there is a dot
46:17 - bash underscore history dot bash
46:19 - underscore log out
46:22 - dot bash underscore profile and dot bash
46:25 - rc so if we take a look at the the dot
46:28 - bash
46:30 - rc file
46:31 - you can see that it has information here
46:34 - you can also see the keyword export
46:37 - is in the file
46:39 - but there is a hash mark in front of it
46:41 - meaning it is commented out
46:43 - if i look at my
46:46 - dot bash
46:48 - profile
46:50 - dot batch underscore profile i can see
46:53 - another thing right here i can see path
46:55 - is being set
46:57 - to whatever the path is currently at but
47:00 - then it's adding stuff to the end of it
47:03 - and then it is exporting it into the
47:05 - environment
47:06 - so whenever i log into my system
47:09 - this file
47:10 - the dot bash underscore profile file
47:12 - will be executed
47:15 - and you can see the cat command can be
47:16 - used to display contents of files
47:25 - all right
47:28 - terminal redirection when using the
47:30 - terminal what do the greater than less
47:32 - than and double grading mean well
47:35 - greater than is used when i'm running a
47:38 - program to direct the output into a file
47:42 - so whatever comes after that grading
47:44 - whatever it is pointing to
47:46 - is where it goes
47:49 - the less than
47:51 - i am directing
47:52 - a files contents
47:54 - into the input of a program
47:57 - and the double grader then means that
47:59 - i'm taking the output
48:01 - and appending it to a
48:04 - file
48:06 - i can also use variables in commands
48:09 - and i can use backticks as well
48:12 - so let's go back to this
48:14 - terminal and take a look at it
48:17 - so
48:18 - if i type in
48:21 - something like time
48:23 - it will display the time if i type in
48:26 - date
48:27 - it will display the date
48:29 - what if i wanted to save the date
48:31 - well i could type in date
48:34 - greater than
48:36 - saved
48:38 - date
48:39 - dot txt
48:41 - and it will save the date
48:44 - if i go cat
48:46 - saved
48:47 - date
48:49 - i can see the date's been saved if i run
48:51 - it again the same command
48:53 - it will
48:54 - overwrite it and replace it if i use the
48:56 - cat command
48:58 - i can see the new contents of that saved
49:00 - date text file
49:02 - if i use the double grader then
49:06 - now it will append it to the end of
49:08 - there
49:09 - i can append it multiple times
49:12 - and then i can go look at the contents
49:13 - of the file and i can see now we have
49:15 - multiple entries that are in this file
49:19 - that can be useful so what's the
49:21 - backtick well
49:22 - the date command also has options you
49:24 - can use so if i do date
49:28 - plus
49:30 - percent
49:33 - d
49:35 - it says
49:37 - zero nine
49:38 - well that's because it is the ninth day
49:40 - of the month
49:42 - i could also put in quotes right here
49:46 - add some more things like a percent
49:49 - capital y
49:51 - now as the year
49:54 - i do a percent
49:56 - m
49:57 - and it adds a month
49:59 - and if i want i can even add dashes in
50:01 - here
50:02 - so now it displays that
50:05 - so how can that be useful well
50:08 - what if i want to save the date
50:12 - and i want to save it into a file
50:15 - so i can do date
50:17 - redirect that
50:18 - into a file that has whatever this thing
50:22 - produces
50:23 - dot txt
50:26 - that's a little complex so basically
50:28 - what i am doing is taking the date
50:31 - command running that
50:33 - it will produce a date in the format we
50:35 - saw above
50:37 - and then this format above
50:40 - will be
50:42 - sent to the output the output will then
50:45 - take this command
50:47 - and run it
50:48 - and it will generate a
50:51 - date
50:52 - it will then append
50:54 - a dot txt to the end of that and it'll
50:57 - create a file with the contents there
51:01 - so now i can do a cat
51:04 - and
51:05 - 2009
51:07 - teen dash four dash nine dot txt
51:11 - and i can see the contents of that file
51:16 - so that's what the backtick does
51:18 - takes whatever runs whatever the output
51:19 - is and puts it right there on the
51:20 - command line for you
51:28 - manual pages
51:29 - how do i find information by commands
51:31 - what command
51:33 - or what information is provided by
51:34 - manual pages how do i find out or how do
51:36 - i get out of this man command
51:39 - and what if there are c functions and
51:41 - programs with the same name
51:43 - well what if i want to know how to use
51:45 - that date command i just used it it
51:47 - worked
51:49 - i can type in man
51:51 - date
51:52 - mandate
51:54 - and then it lists information about that
51:56 - command
51:57 - i can use the up and down arrows to
51:59 - scroll through it
52:00 - i can see
52:02 - instead of using a percent capital y
52:05 - i could use something else
52:09 - like a percent
52:11 - lower case y which would only give me
52:12 - two digits instead of four digits
52:15 - if i want to get out of this all i have
52:17 - to do is press the q button
52:21 - that's kind of nice
52:22 - it's very useful in giving me
52:26 - information about commands
52:30 - also if you want to sometimes
52:33 - the command also shows up in programming
52:35 - languages so if i type in man
52:38 - 2 date
52:40 - it looks to see if there is a section 2
52:42 - man 3 date
52:44 - is for section 3.
52:47 - if i look at
52:48 - man time
52:51 - you can see that
52:53 - there appear is there is there is a time
52:56 - one which means i'm looking at man page
52:59 - 1.
53:01 - well time happens to also be a c
53:03 - function so do man two
53:05 - time
53:06 - and see if it shows up there
53:08 - and we see oh this is a little bit
53:10 - different than the man one time
53:12 - this man two time and now we're looking
53:14 - at c code
53:16 - it tells me how the c code use is used
53:19 - and what it does
53:23 - now file management how do i create
53:25 - files how do i edit files what
53:27 - information does the file system keep on
53:29 - each file
53:30 - how do i move a file how to rename a
53:32 - file how do i copy file how i delete
53:33 - files all these things are kind of
53:35 - important things to do
53:36 - so let's jump right back in there and
53:38 - see how we do them
53:42 - okay you can create files obviously by
53:45 - redirecting output from something to
53:47 - another file and you can see that i've
53:49 - created a few files
53:51 - one of them is the
53:54 - well this date thing if i do ls minus l
53:57 - i can list a bunch of
53:59 - directories and files and maybe i want
54:01 - to get rid of that saved date so i can
54:03 - do rm
54:04 - saved
54:06 - date
54:08 - and that just gets rid of the file
54:13 - i can also rename files
54:14 - so mv is either move or rename so i'm
54:18 - going to mv
54:20 - 2019-04-09
54:24 - and i can call it
54:27 - sumfile.txt
54:31 - and that will either move it or rename
54:33 - it
54:34 - basically moving and renaming are the
54:35 - same thing
54:37 - the reason why we use the move command
54:39 - is because the way that we are
54:41 - moving something
54:44 - is by actually changing
54:46 - the entry
54:47 - in the file system that points to the
54:49 - data on the drive
54:51 - so we're just changing that entry and so
54:53 - that's the exact same process as moving
54:55 - something
54:56 - so it made a little bit less sense to
54:58 - have two different commands
54:59 - i can also create empty files so look
55:02 - right here
55:04 - there is
55:05 - well the sum file.txt and if i want to
55:08 - create another file that's empty i can
55:10 - do touch
55:11 - what touch does is it
55:13 - well it touches the file it changes the
55:17 - modify date times and things like that
55:20 - so if i do touch
55:22 - new file.txt
55:25 - it will
55:27 - change the date
55:28 - the modification date of that file well
55:30 - the file doesn't exist so it creates it
55:32 - and then changes it
55:34 - so video ls minus l you can see that a
55:37 - new file has been created and there it
55:39 - is
55:42 - you can also delete files
55:45 - in addition to using the rm for remove
55:46 - you can use the unlink
55:50 - command
55:51 - so if i unlink new file
55:53 - it takes away the symbolic link or not
55:56 - something like the hard link to the file
55:58 - and then the file is gone
56:00 - on the
56:02 - directory answers here you can see this
56:04 - number one
56:05 - number two number one right here and
56:07 - then the rest of them twos that is the
56:08 - number of links pointing to that entry
56:11 - and when the number of links goes to
56:13 - zero the file is gone and the memory is
56:15 - released
56:20 - okay
56:21 - so that's how you do some
56:24 - modifications and things like that if i
56:26 - wanted to move the some file into my
56:29 - desktop
56:31 - i can move
56:32 - some file to my desktop
56:35 - now it is case sensitive so lowercase
56:37 - desktop is not the same as uppercase
56:39 - desktop so if i do it with a lowercase d
56:42 - it says not a directory if i do with a
56:44 - capital d it does say it's a directory
56:46 - and suddenly it shows up on my desktop
56:48 - right here
56:51 - and if i want to remove it i can either
56:53 - remove it
56:57 - well
56:59 - by giving it the location the file or i
57:02 - can go into the directory
57:05 - take a look around
57:07 - see it's there and remove it there
57:12 - and then go back down to my directories
57:14 - just in
57:18 - and that's how you can do some basic
57:20 - file manipulation but what about editing
57:22 - files well i can use nano
57:26 - nano
57:27 - new file.txt
57:30 - and i can type in some file contents
57:34 - something
57:36 - and i can press ctrl x to exit out it
57:38 - asks me if i want to save it i say yes
57:41 - and asked me if i want to use the same
57:43 - name that i typed it in and i just press
57:44 - enter
57:45 - and then it creates a new file
57:48 - i can see
57:51 - this new file.txt i can use the cat
57:54 - command to display the contents
57:56 - of the file
58:01 - all right
58:04 - searching and editing files how do i
58:06 - find files containing some string of
58:08 - characters how do i display the contents
58:10 - of a file
58:11 - how do i know what type of file a file
58:14 - is and how do i edit a file well we just
58:17 - edited one so we can see that we know
58:18 - how to do that but what about finding
58:21 - files that have contents
58:23 - we know how to display the contents
58:25 - because we've used the cat command
58:27 - so now let's go ahead and
58:29 - find files
58:30 - i have a file in my directory somewhere
58:34 - that has the word something in it we
58:36 - know which one it is
58:38 - i can do a grep command grep
58:41 - some thing
58:43 - and star to search all the files in my
58:46 - directory
58:47 - well all the ones don't start with a dot
58:50 - and then it shows me
58:52 - okay a bunch of these things are
58:54 - directories we can't search those but
58:57 - there is this thing new file.txt that
59:00 - has the word something in it
59:03 - and i can even use parts of that smaller
59:04 - pieces if i'm using
59:06 - the word sum
59:08 - i can see that something
59:11 - still has some in it and it still shows
59:12 - up
59:14 - so that helps me find the file
59:16 - if i wanted to search in other
59:18 - directories
59:20 - let's say i move this new file up to my
59:23 - desktop
59:24 - it's gone if i do a search
59:28 - nothing shows up
59:30 - now if i want to search
59:32 - all of my directories
59:35 - for files inside of them i can do a star
59:38 - star
59:39 - and then it finds this something up
59:42 - there
59:44 - it doesn't really tell me where it is
59:46 - though
59:46 - which is kind of
59:48 - difficult but it does give me an idea
59:50 - that it is existing somewhere
59:57 - all right
59:58 - so that's searching
60:03 - how do i create directories how do i
60:05 - move directories how to rename them and
60:07 - how do i delete them directories are
60:09 - kind of like files they're files that
60:11 - contain contents
60:13 - including
60:14 - well files
60:16 - if i do ls minus l i can see that i have
60:18 - a bunch of directories here i can create
60:20 - a new directory with mkdir for make
60:24 - directory
60:25 - so my new directory is going to be
60:27 - called
60:29 - new
60:30 - der neuter
60:32 - new directory
60:34 - and then i can use ls minus
60:37 - l and i can see that this new directory
60:39 - is there
60:40 - i can
60:42 - rename that new directory
60:44 - mv
60:45 - neuter
60:46 - as older
60:52 - and that changes it lsl
60:54 - now i have to be careful if i decide i
60:56 - want to rename this old directory as
60:59 - desktop what would happen well if i do
61:02 - move
61:03 - older
61:04 - desk
61:06 - top
61:08 - that director already exists so what it
61:10 - will actually do
61:11 - is it will move it onto the desktop
61:15 - so you have to be careful with these
61:16 - removing or moving
61:18 - of directories
61:20 - i can also remove that directory as
61:22 - rmdir
61:25 - desktop
61:27 - older so it'll go up into the desktop
61:30 - directory and remove the old directory
61:33 - but only if that old directory is empty
61:36 - so if i drag this new file into the
61:37 - older directory
61:39 - and then try running it
61:41 - it will say directory not empty
61:44 - so i can go into that directory
61:46 - or i can remove the file first
61:48 - desktop
61:50 - older new file i can remove the old file
61:53 - or the new file
61:55 - and then i can remove the directory
61:59 - so you cannot remove directories using
62:01 - the rmdir command
62:03 - if they have contents in them if i
62:06 - create a new directory
62:09 - new
62:10 - again
62:12 - and i create a file inside of it
62:15 - touch
62:16 - neuter
62:18 - new file
62:24 - i can't remove the directory with the
62:26 - rmdir command
62:28 - new
62:29 - dir
62:30 - however i can remove it
62:33 - new
62:34 - der with a
62:37 - recursive
62:39 - command minus capital r to recursively
62:43 - remove it
62:44 - and that will remove the new directory
62:46 - and all the files inside of it so it
62:49 - cleans it out and it's gone
62:52 - so
62:53 - that is a little bit of directory
62:55 - management for you
62:58 - links what are hard links well hard
63:01 - links are
63:02 - entries in a file
63:05 - usually a directory file that tell you
63:08 - where the contents of a file are on the
63:11 - system
63:12 - symbolic links are like shortcuts they
63:15 - tell you a location
63:18 - and this is not a physical
63:21 - part of the drive where they're located
63:22 - they tell you a directory
63:25 - and a path all the way to the file
63:28 - so they are not quite the same thing as
63:30 - windows shortcuts but they're very
63:32 - similar
63:33 - window shortcuts are files that contain
63:35 - all kinds of information including
63:37 - the path
63:38 - so how do i create links and small links
63:41 - we know how to
63:42 - remove them because we use the unlink
63:43 - command and as you might guess you can
63:45 - also use the delete command or the rm
63:47 - command
63:48 - so i'm going to create some links
63:52 - so if i look at my directory i have no
63:53 - files so i do touch
63:55 - new file dot txt
63:59 - and now i see that there is a new file
64:02 - it also has one hard link to that new
64:05 - file
64:06 - so i can do ln
64:09 - new file
64:11 - and then new
64:12 - file
64:13 - two dot txt
64:15 - and this creates a symbolic link
64:18 - well not someone getting a hard link
64:19 - from new file to
64:22 - on the new file to new file
64:25 - two
64:26 - so if we do ls minus l i can see now
64:29 - there
64:30 - is number two right here indicates there
64:32 - are two hard links to the new file
64:35 - and new file
64:38 - two
64:39 - i can do ln minus s for symbolic
64:42 - new file
64:44 - and
64:45 - i can create a new file 3.txt
64:50 - which is not the same thing as a hard
64:52 - link so the number two will still stay
64:54 - at number two
64:55 - but you will see a new entry
64:59 - and that is my symbolic link the small
65:01 - link has one
65:04 - link to it and it points to new file
65:07 - and so if i were to look at the contents
65:09 - of new file which is
65:10 - empty
65:12 - then
65:14 - well
65:15 - they'd all have the same thing so let's
65:16 - go ahead and put something in it so
65:19 - echo
65:22 - and i'm going to append that to
65:25 - new file
65:27 - dot txt
65:28 - now if i do ls minus l i can see that
65:32 - the content size of new file 2 and new
65:35 - file has both changed to 6
65:38 - but new file 3
65:41 - still has the same 11.
65:44 - any one of them will display the same
65:45 - content so new file
65:47 - dot txt
65:49 - new file 2
65:51 - and new file
65:53 - 3 all display the same contents
65:57 - but
65:58 - if i want to remove things if i do an rm
66:01 - new file
66:05 - well what do i have here
66:08 - now we can see that
66:10 - new file 2 is still there
66:13 - and new file 2 because it was pointed
66:14 - the actual physical location on the hard
66:16 - drive will still have contents new file
66:18 - 3 was pointing to the name new file so
66:20 - the contents will be gone so cat new
66:23 - file
66:24 - 2
66:25 - i can see the content still a new file
66:27 - 3.
66:30 - well it says well there is no new file
66:33 - so i can't do that
66:35 - so we remove that
66:37 - new file
66:38 - three
66:39 - and remove new file two
66:42 - and they're gone now
66:47 - and then absolute path versus relative
66:49 - path absolute path starts with the very
66:52 - root of the system so it's the slash
66:53 - directory all the way down to the
66:56 - location of the file
66:58 - relative is based on where you're at so
67:00 - all the symbolic links i was doing were
67:02 - relative paths all the directory entries
67:04 - i was doing were relative paths all
67:06 - based on where i was currently at
67:09 - so they can be used interchangeably in
67:12 - certain situations so let's go ahead and
67:15 - look at this
67:16 - if i wanted to look at my
67:19 - well my current directory i can do ls
67:21 - minus l
67:22 - space dot dot is my current directory
67:25 - and i can see what's in my directory
67:28 - also because i know which director i'm
67:30 - in i can use slash home joseph so ls
67:33 - minus l
67:34 - slash home
67:36 - slash joseph will also display
67:39 - my current directory
67:41 - but i could look at the slash home
67:42 - directory and see other users well
67:45 - there's nobody else just me
67:47 - where i can look at the slash directory
67:49 - and i can see all of the directories on
67:51 - the system and get an idea of where
67:53 - things are
67:54 - this is useful because
67:57 - using these absolute paths
67:59 - even if you were in a different location
68:01 - the absolute path always works
68:04 - if you're in a different location
68:06 - if i do ls minus l dot dot
68:10 - it'll show me the home directory but if
68:12 - i go down into my home directory and use
68:14 - the same command it will show me the
68:16 - slash directory but no matter where i am
68:19 - ls myself
68:20 - home
68:21 - will still
68:22 - show me the home directory even if i
68:24 - move to the slash directory
68:26 - it will still show me this directory if
68:28 - i want to go back back to my home
68:30 - directory i can type in cd slash home
68:34 - joseph
68:36 - or i can type in cd or i can do cd tilde
68:40 - to get back to my home directory
68:43 - anyway
68:44 - these are some of the things you can use
68:46 - for
68:47 - going around looking at directories and
68:49 - that is the end of our slides for
68:52 - this chapter
68:56 - file systems
69:00 - in understanding the basics of file
69:02 - systems
69:03 - one of the first
69:04 - questions that come up is understanding
69:07 - what is the purpose of a file system
69:10 - a file system helps you organize your
69:13 - space
69:14 - a hard disk
69:16 - is really a large
69:18 - set of bits
69:21 - that are organized by well into bytes
69:23 - and organized by addresses
69:26 - and you can use the addresses to address
69:28 - anything on the
69:30 - entire hard disk
69:32 - so you have this this huge space
69:35 - with lots of addressable bytes
69:38 - and then you have to decide well okay if
69:40 - i want to store data on this how can i
69:43 - store it if you have a large gigantic
69:46 - file maybe your file is a one terabyte
69:48 - file you can start from the very
69:50 - beginning of the drive and start writing
69:51 - the file out and then
69:53 - at the end of the file you'd have
69:56 - it all written there
69:58 - and you can just read that single file
70:00 - back and you'd be fine
70:02 - but sometimes you want to put more than
70:04 - one thing in there so if you put two
70:06 - files in there
70:07 - the question is well where does one file
70:09 - begin and the next one
70:13 - well where's the one and the next one
70:14 - begin
70:15 - and you have to decide how to keep it
70:17 - organized
70:18 - so file system
70:20 - allows you to overlay
70:22 - a piece of information
70:24 - that contains all the addresses in a
70:28 - in that partition
70:30 - and
70:32 - lets you keep track of where
70:34 - files are what space is available what
70:36 - permissions are set which users have
70:38 - what permissions
70:39 - and all the information they can use to
70:42 - provide security or organization
70:45 - so how much space does the disk really
70:47 - have when you go in there and you look
70:48 - at your machine and you see how much
70:50 - space it has is that the real amount
70:52 - well not usually usually what you're
70:54 - seeing is how much space is available in
70:57 - the file system
71:00 - so then how do you know which disks you
71:01 - have well you can use some of the gui
71:04 - tools or you can use
71:05 - tools such as fdisk which will allow you
71:08 - to see which
71:10 - disks you have which partitions you have
71:13 - and
71:15 - then even you can look in there and
71:16 - figure out things like how they are
71:18 - formatted and set up
71:24 - so what is a partition table well when
71:26 - you take your original disk and you
71:29 - decide to break in individual pieces
71:32 - there is a table use the very front of
71:35 - the disk that will tell you where a
71:37 - partition begins and where it ends
71:39 - partitions are individual
71:42 - well
71:43 - blocks that we turn into volumes
71:46 - and there are two main formats that are
71:48 - currently in use there is the mbr
71:51 - which is the master boot record and
71:53 - there is the gpt
71:55 - gpt is a well it's an acronym that
71:58 - contains an acronym
72:00 - and the g is guid which is globally
72:03 - unique identifiers
72:05 - and then pt as partition table so guid
72:08 - partition table
72:11 - so mbr was written with the idea that
72:14 - machines would only go into 32-bit
72:17 - and because of that the addresses are
72:19 - only 32 bits which means that your
72:22 - largest
72:23 - i mean you you basically only address
72:26 - beginning and ending of partitions in
72:28 - 32-bit numbers
72:30 - and
72:31 - if you know much about 32-bit numbers
72:33 - that basically means you have 4 billion
72:36 - different possible addresses
72:39 - and so that's how you would have to have
72:41 - your petition set up
72:43 - to be based on the idea there are only
72:45 - four billion
72:47 - addresses
72:48 - you'll find that's quite a bit of a
72:50 - problem with 32-bit
72:52 - per file
72:54 - file systems as well as the mbr
72:57 - and it limits it quite a bit
72:59 - with larger hard drives in order to be
73:01 - able to address everything
73:03 - you have gpt which has much larger
73:07 - well addresses
73:10 - and it also resolved quite a few smaller
73:12 - issues with mbr
73:14 - such as the number of partitions you
73:17 - could create
73:18 - mbr originally
73:20 - was limited it didn't have things like
73:22 - extended partitions and logical
73:24 - partitions and
73:26 - and well anyway it was it was a mess
73:29 - so gpt solved a lot of that
73:31 - so then how do you edit the partition
73:32 - table well you can use the fdisk command
73:35 - to edit it
73:38 - and once you edit the partition table
73:40 - you write it out and what it does is it
73:42 - writes out to your
73:45 - you know either mbr or gpt
73:48 - and that information is stored there but
73:49 - then the kernel doesn't know about it
73:50 - unless the kernel goes back in and
73:52 - rereads that information
73:54 - so it knows about it
73:56 - so you can use things like part probe or
73:59 - other utilities to tell the kernel that
74:01 - it needs to re-read the partition tables
74:04 - and reload that information
74:07 - and then it can
74:08 - start using that information as it
74:11 - mounts partitions and
74:13 - puts them into its
74:15 - setup
74:17 - so what partition types are good
74:19 - well
74:20 - at this point it's probably a good idea
74:22 - to actually create some partitions
74:24 - so we can get some ideas of how it works
74:27 - so let's jump into it
74:32 - i have right here
74:34 - settings
74:35 - my machine is currently turned off i can
74:37 - go over to storage
74:39 - and click on my controller sata
74:42 - and then i want to add an extra
74:44 - disk so i create a new disk
74:47 - and this will be nice virtual disk
74:49 - dynamic calculated and i can go with
74:52 - whatever size i want
74:55 - let's just go with a one gigabyte
74:58 - this nice small disk
75:01 - and i can keep new virtual disk or i can
75:03 - just say
75:05 - spare doesn't really matter what i call
75:06 - it i create it
75:09 - then it's ready to go
75:11 - once my machine boots up i will be able
75:13 - to use that partition or use that disk
75:17 - and make partitions out of it so i can
75:18 - start that
75:21 - all right
75:22 - i kind of skipped through the booting
75:24 - process now i am ready to log in so log
75:27 - is root with my password aloha one two
75:29 - three
75:30 - and
75:31 - i go into my machine
75:33 - now at this point i have the option of
75:35 - either using command line utilities or
75:38 - the gui
75:39 - you want to probably get used to using
75:40 - command line tools because the gui isn't
75:42 - always there
75:44 - but let's look at the
75:46 - first gui so i click on applications and
75:48 - go down to utilities and i can see
75:50 - there's this disks option here
75:54 - i created my old disk and that one is 32
75:57 - gigabytes and then the new one is 1.1
75:59 - gigabytes
76:01 - and it's all unknown space
76:04 - now you can also see the device name is
76:06 - dev slash dev
76:08 - sdb
76:10 - the first one is
76:11 - slash dev
76:13 - sd
76:14 - a
76:16 - and i guess it's got multiple partitions
76:18 - in it sda1 and sda2
76:21 - in the sda2 i can see that the partition
76:23 - type is linux volume management
76:26 - lvm
76:27 - which means i can then create individual
76:30 - well volumes inside of that
76:34 - the original one is a standard partition
76:37 - and that one is where i have my kernel
76:39 - and the other information stored so i
76:42 - want to work with this second disk
76:44 - and i can click on icons here and create
76:47 - stuff or i can drop down to the command
76:49 - line
76:50 - to show you how that works
76:52 - so
76:53 - go to the terminal
76:57 - all right
76:58 - so in order to build partitions
77:02 - i can do fdisk
77:04 - minus l to list all my partitions it
77:07 - shows me i have a couple of different
77:08 - partitions
77:10 - you can see there is a slash dev slash
77:12 - sda and a slash dev slash sdb
77:17 - sdb is
77:20 - well a thousand seventy three megabytes
77:24 - so i will go edit that one so i do f
77:26 - disk
77:27 - slash dev
77:28 - sdb
77:31 - and i can use my mkb to show me my
77:34 - options
77:35 - this will list all the commands i can
77:36 - use p is to print my
77:40 - partition table and i have no partitions
77:43 - so i want to add a new partition so i do
77:45 - n for new
77:47 - i can decide what kind of partition it's
77:48 - going to be and this one is going to be
77:50 - a primary partition
77:52 - so p
77:53 - partition number one
77:56 - and i can decide what my first sector is
77:58 - i can just press enter here and decide
78:00 - how big this is i have a full gigabyte
78:02 - to work with so i will make this first
78:04 - one
78:04 - let's make it 200 megabytes so you plus
78:07 - 200 m
78:10 - it creates partition i can use p to
78:13 - print my partition table and i can see
78:15 - the type is linux
78:17 - linux works great if i want to make a
78:19 - file system
78:21 - other options i can also list with the l
78:24 - option
78:26 - and you can see
78:27 - there are quite a few different
78:28 - partition types and all these partition
78:31 - types are listed in hexadecimal
78:34 - index values
78:36 - or type values
78:39 - so linux is
78:41 - 83.
78:42 - if i want to do swap it's 82
78:46 - i can also do things like lvm
78:49 - and other partitions as well so lvm is
78:54 - 8e
78:56 - i'm going to leave this as a standard
78:58 - linux partition type so i'll do write w
79:02 - and then i will be out
79:05 - at this point i can type in
79:08 - part
79:09 - probe
79:12 - and it does not have the command so i
79:14 - can install yum install
79:16 - part probe
79:20 - and it has no package there
79:23 - so
79:24 - we will just go ahead and assume it's
79:26 - there and the kernel will just have to
79:27 - figure it out
79:29 - so the kernel will try to read it
79:31 - so to mount this
79:34 - you first have to build a file system so
79:36 - which file systems do i have
79:39 - well
79:40 - there's the mkfs command if i run it by
79:42 - itself
79:44 - it tells me that here are my options
79:47 - but the nice thing is this is just a
79:49 - front end to the other command so i do
79:51 - mkfs
79:52 - tab tab and you can see
79:54 - these are other commands that start with
79:56 - mkfs so mkfs dot
80:00 - and then you have different
80:03 - file systems so let's go ahead and go
80:05 - back to the slides
80:08 - all right
80:09 - so which partition types are good well
80:11 - you won't have linux probably for most
80:13 - things
80:16 - all right what file systems are
80:17 - available on linux well we just looked
80:19 - at that the mkfs command will show you
80:22 - which file systems are available on your
80:25 - system and which ones are installed
80:26 - there
80:27 - you usually have
80:30 - a couple of different things to install
80:31 - there is the
80:33 - um the programs or utilities type
80:36 - packages to go with things
80:38 - so
80:40 - if i wanted xfs which is already on here
80:42 - there might be an xfs
80:44 - progs
80:46 - package which will give me the xfs
80:48 - information
80:51 - some of these things require a kernel
80:52 - module to be loaded sometimes you have
80:54 - to
80:56 - do other things but that usually
80:57 - provides utilities you need in order to
80:58 - format the file system
81:01 - so what is the difference between
81:02 - different file systems
81:04 - well some file systems have features
81:06 - that other ones don't for example
81:08 - the fat32 file system which is very
81:10 - common in the older dos and early
81:13 - windows
81:15 - operating systems
81:17 - has all kinds of features to allow you
81:20 - to
81:21 - create files and do things with the
81:23 - files but it doesn't really have a lot
81:24 - with permissions
81:26 - and in addition to not having
81:28 - permissions it doesn't really have
81:29 - things like
81:31 - se linux or other security features that
81:33 - linux has
81:34 - it works great for cameras it works
81:36 - great for computers that don't have
81:38 - multiple users
81:40 - and that's really what it's good for
81:44 - when you go to other file systems such
81:47 - as
81:48 - ext3
81:51 - that's why linux file system exc3 is
81:53 - different from ext2 in the exe3 added
81:56 - journaling
81:57 - journaling is the ability to
82:00 - write to your file system and tell your
82:02 - file system what you're going to write
82:03 - before you write it
82:05 - and then after you write it you remove
82:06 - your entry
82:08 - and this makes it in a state where you
82:11 - don't ever get to a place where you're
82:14 - in the middle of writing something and
82:15 - you have no idea if you've completed
82:17 - writing it because you say you're going
82:19 - to write it you write it and then you
82:20 - remove the entry that says you're going
82:21 - to write it and if you crash anywhere in
82:24 - the middle
82:25 - then you can figure out
82:27 - where you're at
82:29 - and you can back out of things if you
82:30 - can't get it completely done
82:33 - exe4
82:34 - has more features added you have xfs
82:37 - which also has journaling and other
82:40 - linux type
82:43 - partitions
82:45 - permissions and other things like that
82:47 - so which file systems are supported well
82:49 - once again
82:51 - you have this
82:54 - mkfs command which will show you
82:57 - when you press tab twice which ones are
82:59 - available
83:00 - you can install additional ones
83:03 - and that's usually what's using using
83:05 - the yum package management system to
83:08 - install
83:09 - other
83:10 - packages sometimes you'll have to go and
83:12 - make kernel modifications or get kernel
83:15 - packages as well but most of these are
83:17 - packaged in a way that makes it pretty
83:18 - easy to get them
83:22 - so formatting why do file systems need
83:25 - to be formatted
83:27 - well
83:28 - if you mark a partition you create as
83:32 - well you create this partition
83:35 - it still is just a block of space you
83:37 - have to decide how to put the file
83:38 - system in there and
83:41 - the way you do that is through
83:42 - formatting
83:44 - what formatting does
83:45 - is it
83:47 - starts writing the file system in the
83:49 - beginning
83:50 - and then puts in all the
83:52 - indications and needs through midpoints
83:55 - and other places in there so that you
83:58 - can
84:00 - well
84:01 - start doing stuff so let's go ahead and
84:02 - create a
84:05 - a file system
84:07 - so i'll jump right in here
84:09 - so i'm going to create this one as
84:12 - ext3
84:14 - so mkfs exe3
84:17 - and the question is well which partition
84:20 - is it
84:21 - well we know the device was slash dev
84:25 - sda b
84:28 - and it's the very first partition i
84:29 - created so it's slash dev slash sd
84:34 - b
84:36 - one so
84:38 - sdb
84:40 - db
84:41 - and i can see a one here so now i type
84:45 - in this
84:46 - and it will create an ext3 file system
84:50 - and that was quick
84:52 - but there are other options you can add
84:53 - in there as well if you wanted to
84:57 - such as labels and
84:59 - everything is that so now that it's
85:01 - formatted
85:03 - i can start using it but i have to
85:04 - figure out where i'm going to use it and
85:06 - how i'm going to do stuff with it
85:10 - so
85:11 - let's go back to our slides
85:18 - how can i change
85:20 - how a file system is formatted
85:22 - well
85:23 - let's go back to this file system and
85:25 - let's change it
85:27 - i don't really want exc3 so let's change
85:29 - it to ext2
85:32 - now it's the ac2
85:33 - let's change the ext3
85:36 - c83 let's change it to
85:38 - xfs now it's
85:41 - not xfs yet it says that it appears to
85:45 - contain an exe3 file system use the
85:48 - minus f option to force an overwrite so
85:50 - i do minus f
85:53 - and then it reformats it so now it's xfs
85:56 - and then i can change it back to ext3 or
85:59 - exe2
86:05 - and convert it back
86:06 - all right what happens if there's data
86:09 - on the file system and i want to convert
86:10 - it well you can actually
86:13 - modify it in place for some file system
86:16 - types for example going from ext2 to
86:18 - ext3 all you need to do is add a journal
86:22 - so
86:22 - if i do tune
86:26 - to fs
86:27 - i have the option to add a journal to
86:30 - the file system
86:32 - so how do you do that well
86:35 - it's with the minus j option
86:39 - so i do tune
86:40 - to fs minus j
86:43 - dev
86:45 - ext 2 92 uh
86:48 - sdb one
86:52 - and now i've added a journal so
86:53 - basically i've now converted the ext2
86:56 - file system into an exe3 file system
86:59 - without damaging any of the files on
87:01 - there but there are no files not really
87:03 - i mean there's there's a empty directory
87:06 - for lost and found for if i lose things
87:10 - but that's it i could also do things
87:12 - like
87:15 - add a volume label so i want to call
87:18 - this my
87:20 - maybe
87:21 - storage
87:24 - it already has a journal so i take that
87:25 - away say fine
87:28 - and i put this storage label on the
87:33 - partition
87:35 - all right on the file system
87:37 - now if i want to
87:39 - use it
87:40 - well i just need to mount it
87:45 - all right let's click here
87:47 - how do i know if a file system has been
87:48 - formatted
87:50 - well sometimes you don't
87:51 - the easiest way to figure it out is you
87:53 - try to mount the file system if you try
87:54 - mounting it and it doesn't mount
87:56 - usually that's an indication that it's
87:58 - not done correctly it does some auto
88:00 - detection that helps a lot
88:03 - trying to format over it
88:05 - usually tells you
88:07 - if you're trying to go to something like
88:09 - xfs it will tell you that it has
88:10 - something there
88:11 - but you don't always know
88:14 - so what is mounting then
88:16 - well mounting is where you take
88:18 - part of your directory structure and you
88:22 - link in this new partition into that
88:24 - structure
88:25 - so you have
88:26 - a directory
88:27 - and your directory
88:29 - can then be redirected to a new
88:32 - partition a new file system and you
88:34 - start seeing things
88:36 - so where are the file system located
88:38 - when mounted
88:39 - well the file systems are just
88:42 - integrated into this entire directory
88:45 - tree
88:47 - you can use the mount command by itself
88:49 - to see which ones are currently mounted
88:51 - you can also see
88:53 - what mounting options were used when
88:54 - mounting mounting options are things
88:56 - like
88:58 - mounting it as read-only or read write
89:02 - you can mount it with
89:04 - information about how fast you can write
89:05 - to it which users are allowed to do
89:07 - things
89:10 - a lot of things
89:12 - can you mount uncommon things like dvds
89:14 - well dvds aren't that uncommon but yes
89:15 - you can mount them you can mount them as
89:18 - actual dvds or you can even mount the
89:20 - iso images
89:22 - so let's go ahead and mount this
89:24 - partition we just created and formatted
89:27 - so i figure out where am i going to put
89:29 - this partition
89:30 - so i call it storage it's a slash dev
89:34 - sdb1
89:36 - so let's make a directory and we will
89:39 - put it mounted there so if i do mkdir i
89:42 - can create a directory so i'll do slash
89:44 - and let's say new
89:48 - storage
89:49 - doesn't
89:50 - storage
89:52 - doesn't really matter what i call it
89:55 - and then if i look at my file system
89:57 - there is this directory called new
89:58 - storage
89:59 - if i go into new storage
90:03 - new storage
90:05 - there's nothing there so i go back out
90:08 - of it
90:09 - so i'm at the root of the file system
90:10 - and i want to mount
90:12 - this
90:14 - new partition there so i do mount
90:18 - and i can tell the mount device
90:22 - sdb1 and the mount partition or mount
90:26 - point
90:27 - so new
90:29 - storage so i do that command right here
90:32 - and it mounts it if i go into this new
90:34 - storage directory
90:36 - i can see
90:39 - there is a lost and found directory here
90:42 - this lost and found directory is stored
90:44 - at the root of any ext type file system
90:48 - so now i can see it's mounted
90:50 - which is kind of great
90:52 - of course if i reboot the system it will
90:54 - no longer be mounted because i manually
90:56 - mounted it and it's not being
90:57 - automatically mounted
90:58 - so that can be kind of a problem
91:04 - so what is the file system table well
91:06 - the file system table
91:08 - is a file on the file system that tells
91:11 - you
91:12 - where everything is mounted and how
91:13 - they're mounted so i can actually have
91:15 - this directory
91:17 - automatically have my new partition
91:20 - mounted to it
91:21 - at boot time so how do i edit this file
91:24 - system table
91:25 - well you use a nano or some other editor
91:29 - and you edit the slash etc
91:31 - fstab file
91:35 - okay
91:36 - then we have to figure out if it's
91:37 - working
91:38 - and
91:39 - look at what happens if i mess up
91:44 - so
91:45 - i was mounting
91:47 - the device
91:50 - sdb1
91:53 - to new storage so i'll do
91:56 - nano
91:57 - i'll tell the etc fs tab
92:02 - if i go in here i can see these are the
92:04 - partitions that are mounted
92:06 - so i'm going to add a new partition here
92:08 - so you first start with the device my
92:10 - device is slash dev slash sdb1
92:14 - you have some space could be a space a
92:16 - tab i just put a tab
92:18 - my mount point is new
92:20 - storage
92:22 - now tell it what type it is this is ext
92:25 - three
92:27 - give it the defaults
92:30 - and then these numbers indicate things
92:33 - like backups and
92:36 - other stuff just put zeros here you're
92:38 - fine exit out
92:43 - now there's this file
92:45 - because it's mounted
92:48 - well i should use the mount command and
92:49 - see that it's mounted and you see at the
92:51 - very last line down here
92:55 - there is a indication that this thing is
92:57 - mounted i can see which things which
92:59 - options are in place it's read write
93:03 - i can see it's mounted a c3
93:05 - and i can unmount it with the u mount
93:07 - command u mount
93:09 - slash dev
93:10 - s
93:11 - d b
93:14 - one
93:15 - or i could tell the mount point so i can
93:17 - mount it that way
93:19 - or i can remount
93:20 - it and unmount it
93:25 - with the
93:26 - mount point
93:28 - either way it will get unmounted then i
93:30 - can run the mount command by itself and
93:31 - i can see that it is no longer mounted
93:33 - now if i try running the mount command
93:35 - mount dev sdb1
93:39 - well
93:40 - what happens
93:41 - it mounts and the reason it mounts is
93:43 - because it looks at this device and says
93:45 - where is that device at and then it
93:47 - finds the fstab file and sees the device
93:50 - listed in there as the last entry
93:53 - and it knows where to mount it
93:55 - so run this mount command again and i
93:57 - can see that it is mounted
93:59 - right there in this new storage
94:00 - directory
94:02 - i can you mount that again
94:05 - new storage
94:07 - and then if i want to mount the new
94:08 - storage
94:09 - i can just tell it to do mount new
94:12 - storage
94:13 - and it'll mount it because once again it
94:14 - looks up in the fs tab
94:17 - or file system table file and figures
94:20 - out what it needs to mount and how to
94:22 - mount it
94:24 - and i can type the mount command again
94:26 - and once again see that it is mounted
94:28 - correctly
94:29 - now if i mess up this file
94:33 - let's go ahead and mount it first and
94:34 - then nano
94:36 - edc fs tab
94:38 - and let's say i tell it some direction
94:40 - that doesn't exist like
94:42 - new storage without the
94:46 - i try mounting
94:48 - mount
94:49 - dev sdb
94:51 - 1
94:52 - it says
94:54 - mount point new storage
94:56 - does not exist so if i try mount
95:01 - new
95:02 - storage
95:05 - it says it can't find it in the fstab
95:07 - file
95:08 - so you can see what's going on here
95:10 - that's how it's doing it
95:12 - now imagine what would happen if you
95:14 - booted up your system like this and you
95:16 - had a mistake in there
95:18 - well that could be bad
95:20 - especially if it's a critical file
95:22 - system for your system to run
95:25 - it could cause the entire system to
95:27 - basically crash
95:29 - you don't want that that's bad
95:32 - all right
95:34 - back to the slides
95:37 - what features are available with the
95:38 - file system
95:39 - well you have all kinds of features you
95:42 - have
95:44 - the ability to read and write to files
95:46 - edit files set permissions on files
95:49 - you can use things like se linux disk
95:51 - quotas
95:52 - all kinds of things
95:54 - so permissions how do they work well
95:57 - the way they work in linux is each file
96:00 - has some kind of an associated
96:02 - number
96:04 - and the associated number
96:06 - indicates
96:08 - well what the permissions are
96:10 - you have users and
96:12 - you have groups
96:14 - and
96:16 - you can see all this information with
96:17 - the stack command so if i go into my
96:18 - file system
96:20 - new
96:22 - let's create a new file so i use the
96:24 - touch command actually it's not mounted
96:25 - is it
96:27 - mount
96:29 - new
96:29 - storage
96:31 - go to new storage
96:34 - do touch
96:36 - new file.txt
96:41 - if i do a directory listing i can see
96:43 - that the new file is owned by root
96:45 - and
96:47 - it's zero bytes in size
96:50 - it's kind of a small file if i do stat
96:53 - new file
96:55 - i get some information about this new
96:56 - file i can see the size i can see the
96:59 - blocks it takes up
97:00 - other information i can see
97:03 - information about i knows and links and
97:06 - then i see this access permissions
97:09 - well
97:10 - it says it is zero six four four
97:14 - zero in the front
97:16 - is for things like your set user id and
97:19 - set group id and your sticky bit
97:21 - the 6 and the 4 4
97:24 - indicate the
97:25 - user the group and the world permissions
97:29 - you can see the owner is uid 0
97:32 - the group is uid
97:34 - 0.
97:35 - you can see the selinux context
97:38 - is listed right here
97:40 - basically it's kind of unlabeled
97:42 - and you can see
97:45 - all the information about its access
97:47 - modification and change
97:49 - times
97:51 - so that's all there
97:53 - and that's all stored most of that
97:55 - stored right there in the inode not the
97:56 - actual file name it's from the inode
97:58 - that the
97:59 - file
98:02 - is linked to so when you create a
98:04 - directory your directory has
98:07 - a list of file names and those file
98:09 - names are pointed to inodes on the
98:11 - system
98:12 - that allow you to then edit and modify
98:15 - the contents on the system
98:21 - so how does sc linux work on a file
98:23 - system well you set your
98:25 - sc linux
98:27 - context
98:29 - and then
98:31 - the selinux
98:34 - piece is tied to the kernel
98:36 - so that whenever you have access or try
98:38 - to access a file it looks at the kernel
98:40 - ask the kernel
98:42 - what it says the colonel looks at selinx
98:44 - and says yeah you're allowed or no
98:46 - you're not allowed and it blocks it
98:47 - doesn't matter what your permissions say
98:49 - if sc linux blocks you
98:52 - then you don't get to the permission
98:53 - level and you can't see it
98:55 - so
98:56 - that can be a bit of a problem
98:59 - it also makes things a lot more secure
99:01 - if you have services that have to run as
99:03 - root and you really don't want them to
99:04 - be able to touch certain files you can
99:06 - use sd links to block them from touching
99:08 - them even if they have
99:09 - full root access because they don't
99:11 - really have it with sd linux and the
99:14 - file system helps to support that
99:16 - how do disk quotas work
99:19 - well disk quotas
99:21 - you have a couple of files on the system
99:23 - and then those files are updated
99:24 - whenever you make modifications to file
99:26 - system
99:28 - and
99:28 - they then keep track of how much space
99:30 - you have what you're allowed to do and
99:33 - it protects it
99:35 - if a file system is read only then you
99:38 - read things but you never modify things
99:40 - including the access times access times
99:42 - for files don't change if you're reading
99:45 - it from a read-only file system
99:47 - read-only file systems are great when
99:49 - you don't want someone to mess with
99:50 - something
99:52 - so
99:53 - anyway that is your
99:56 - lecture on file systems
100:01 - people and permissions
100:05 - on a linux machine
100:07 - it's good to know which users are on
100:09 - your system
100:10 - you need to know who's in there what
100:12 - they're doing
100:14 - and
100:15 - sometimes you need to work with the
100:16 - users you need to remove users you need
100:19 - to change passwords delete users create
100:21 - users lock accounts all these things can
100:23 - be done so
100:25 - let's start with the beginning
100:27 - and look at a system
100:29 - so here is a system
100:31 - fully logged in
100:33 - and i can type in the w command to see
100:36 - which users are currently logged in and
100:38 - i can see that i am logged in as rude
100:41 - well okay that's nice
100:44 - it looks like i'm showing up twice two
100:46 - different route users
100:48 - what's really happening is one is this
100:51 - gui is logged in
100:53 - and then from within my gui i have a
100:55 - terminal up and going and inside that
100:56 - terminal you can see i'm running the w
100:58 - command to see
101:00 - well who's logged in
101:03 - you can always use the last command last
101:06 - and it will display all the users that
101:08 - have been logging in
101:10 - when they logged in what happened
101:13 - when they logged out you can get idea
101:14 - you can see the down here
101:17 - a few days ago the joseph user logged in
101:21 - and apparently logged out at a crash
101:24 - so the system was to crash for some
101:26 - reason and that's when the joseph user
101:28 - was logged out
101:29 - ever since then the only user that's
101:31 - logged in is the root user there's also
101:33 - the reboot user which apparently logged
101:35 - in probably from the gui
101:37 - when the system was rebooted or shut
101:39 - down
101:42 - so that gives you an idea of what
101:43 - happened with the system
101:45 - um you can also see if you jump back to
101:47 - the w command you can see things like
101:49 - how long the system has been up
101:51 - and it looks like it's been up for 48
101:53 - minutes
101:55 - so
101:56 - gives you an idea what's going on
101:58 - all right so
102:01 - what are they doing well
102:03 - the commands right here is what they're
102:05 - doing
102:06 - so then how do i create new users delete
102:09 - users
102:10 - change
102:12 - passwords let's start with changing
102:14 - joseph's password so i do p-a-s-s-w-d
102:18 - joseph
102:19 - i'm logged in as root so i can change
102:22 - joseph's password if it was josephine
102:24 - type in his password and
102:27 - then type in new passwords but i can
102:28 - just set the password for joseph so i'll
102:31 - set it to aloha123
102:34 - then
102:35 - aloha123
102:37 - and it's set
102:39 - if it doesn't like the password let's
102:40 - say i do something like abc
102:43 - it says the password is shorter than 8
102:45 - characters
102:46 - type in abc
102:48 - it will still change the password
102:52 - but it's not as happy it just warns you
102:56 - i can still change it back to whatever i
102:57 - want though
103:01 - all right so now the password is set
103:04 - if i want to create users or delete them
103:07 - there is this user dell
103:10 - or user ad commands
103:13 - so type in user and then tab twice and
103:15 - you can see there's user add user dell
103:17 - and user mod are the good commands i can
103:20 - use so if i do user add and hit it by
103:23 - itself it'll tell me all the information
103:25 - about this command
103:27 - okay well so how do you use it well user
103:30 - ad and then the login name but before
103:32 - that you can put in a bunch of options
103:34 - so what options do i want to use
103:36 - well i want to tell things like
103:40 - i don't know the comment
103:43 - the comment is usually the user's name
103:47 - i can tell any groups i want to add it
103:48 - to
103:50 - the primary group or secondary groups
103:53 - just remember
103:54 - lowercase g is your primary group
103:57 - capital g is your secondary groups
104:00 - all right those are some nice things you
104:02 - can do there
104:03 - userdel same thing
104:05 - user dell the big difference is that you
104:08 - can decide what you want to do with the
104:10 - directory so usually i do a minus r
104:13 - option to remove the directory when i
104:15 - delete the user
104:18 - now if there are important files in that
104:20 - directory you don't want them to be
104:22 - deleted
104:23 - you could
104:24 - remove the user
104:26 - without the minus r option but remember
104:28 - that the user's files are tied to the
104:31 - user id
104:33 - and you would have to go in there and
104:34 - change
104:36 - the user id
104:37 - or change the
104:39 - user id of the files
104:40 - in order to
104:41 - make sure that the new user if you
104:43 - create a new user afterwards
104:45 - doesn't get those same files
104:48 - all right
104:54 - can i lock accounts yes you can
104:57 - but that requires understanding
104:59 - basically how things work
105:01 - when you have a user and you have a
105:03 - password
105:05 - if i look at the
105:07 - etc
105:08 - shadow file
105:11 - that's where the passwords are stored
105:12 - you can see that this user joseph has a
105:14 - long password
105:16 - thing right here
105:18 - it's actually this long section right
105:20 - here is my
105:22 - hash
105:23 - the first part of it
105:25 - the dollar six dollar indicates which
105:28 - method i'm using
105:30 - from here
105:32 - i can see that my salt
105:34 - this is a random string of characters
105:36 - mixed in
105:37 - is well this
105:39 - and then this salt
105:42 - gets combined with my actual password
105:44 - using method number six
105:46 - to generate this long string right here
105:52 - and then whenever i type in my password
105:54 - to log in
105:55 - it will take my password type in combine
105:58 - it with the salt
106:00 - use method number six
106:02 - and then see if it generates this exact
106:04 - same long string right here
106:07 - and that's how you do password
106:08 - calculations so if i want to prevent
106:11 - someone from logging in all i have to do
106:12 - is modify this right here so that it
106:14 - doesn't work correctly
106:17 - so
106:18 - if i do a user mod
106:21 - minus capital l
106:24 - joseph
106:26 - it locks the account so if i cat this uh
106:29 - well let's do a grep
106:31 - grab joseph
106:33 - you can see that something happened
106:36 - what changed well if you look at it it's
106:38 - almost exactly the same except there is
106:40 - now an exclamation point at the very
106:42 - beginning and that exclamation point
106:45 - makes it so that my account is locked
106:48 - i believe i can unlock it with a minus
106:49 - capital u
106:53 - and then i can see that it has removed
106:54 - that exclamation point and it's no
106:56 - longer locked
106:57 - so that's how you lock accounts
107:03 - groups well what are groups on my system
107:06 - there is an etc
107:07 - groups
107:08 - directory or utc groups file and then it
107:11 - lists all the groups and it lists who
107:14 - are the supplementary users of those
107:16 - groups
107:18 - so who is the memories group well you
107:20 - can see these supplementary members
107:22 - there
107:23 - primary users don't always show up
107:26 - sometimes they just get it because it's
107:28 - assigned as their
107:29 - their group
107:32 - you can use the id command to indicate
107:34 - which groups users are part of
107:38 - and so i can type in id joseph spirit
107:39 - which groups he's part of
107:42 - and
107:43 - well let's go look at that
107:47 - so id
107:49 - joseph
107:50 - i can see that joseph is
107:53 - got a guid
107:55 - of 1000 that means his primary group is
107:59 - well the joseph group
108:01 - his supplementary groups are joseph and
108:04 - wheel
108:05 - so if i cut out the
108:07 - edc
108:08 - group
108:10 - file
108:11 - i can see that
108:13 - yes joseph is
108:15 - part of the joseph group as a
108:17 - supplemental member
108:19 - and then i scroll up a bit
108:21 - and find the wheel group
108:23 - somewhere
108:24 - you can see that the wheel group has
108:27 - right there joseph as a supplemental
108:29 - member of that group
108:33 - i could go in and add them to other
108:35 - groups by just modifying this file and
108:37 - that would take effect the next time you
108:38 - logged in
108:41 - so that can be useful but you can also
108:42 - use the
108:44 - user mod command to modify him adam
108:46 - dexter groups
108:48 - the wheel group is actually tied to the
108:51 - etc
108:53 - doers
108:55 - file
108:56 - the sudoers
108:58 - file
108:59 - says well okay down here
109:02 - all people in the willy group can run
109:03 - all commands as root
109:07 - so this wheel group right here
109:11 - basically means that my user joseph has
109:14 - the ability to use the pseudo command
109:16 - sudo
109:18 - and then
109:19 - run something that only root could run
109:21 - so like ls
109:23 - slash
109:24 - root
109:26 - of course i'm logged in as root so root
109:28 - can do that
109:30 - but if the joseph user were to do that
109:33 - he'd be prompted for a password and
109:35 - after being prompted for the password he
109:37 - could well run that command
109:39 - if i wanted to change that i could go
109:40 - ahead and modify this pseudors command
109:42 - and take this one right here right below
109:44 - it without a password and take out the
109:46 - hash mark and then
109:49 - hash the one right above it
109:52 - all right
109:53 - so that's this group thing right here
109:56 - when you have files
109:57 - you can see there's a group owner and
109:59 - there is a regular user
110:02 - user owner the owner and the group owner
110:05 - and then the permissions are set
110:07 - appropriately so this is the
110:10 - user permissions and this is the group
110:12 - permissions you can set files so that
110:15 - a group has access to the file
110:18 - and then if a user is not the owner
110:21 - but they are part of the group they will
110:23 - still have access to the file
110:25 - with whatever permissions are set
110:27 - if you don't
110:29 - put them in the group
110:30 - then they would be stuck with whatever
110:31 - the user
110:32 - when the world permissions are set at
110:39 - so how do i create and delete groups
110:41 - well
110:42 - group add group dell
110:46 - just like the user ad user l except it's
110:48 - much much quicker
110:49 - how do i modify group membership well
110:51 - you can modify it using the user mod
110:53 - command
110:54 - or by modifying the group
110:57 - file
110:58 - directly group file directly
111:02 - the etc scale directory is really
111:04 - interesting when you create a new user
111:07 - the question is what files do you put in
111:09 - the directory what files do new users
111:11 - get automatically well they get
111:13 - everything that's in the etc scale
111:14 - directory
111:16 - all right so let's go modify that
111:20 - so if i jump into this
111:23 - mercury so etc
111:26 - skill
111:27 - i can see what they get they get a
111:29 - bash
111:31 - log out bash profile and a bashrc file
111:35 - and they also get the mozilla directory
111:37 - so i can create a new directory
111:42 - public
111:43 - html
111:46 - and
111:47 - let's see this new directory here and
111:49 - then any users that are created now
111:51 - will automatically get this public html
111:53 - directory so if i look in the joseph
111:55 - directory
111:58 - he does not have the public html
112:00 - directory there's no public html because
112:02 - well
112:03 - it didn't exist in the scala directory
112:05 - when it's created if i do user add
112:08 - minus c
112:10 - alice
112:14 - and her username is gonna be alice
112:17 - now if i look in the uh home
112:20 - alice directory i can see she has the
112:23 - public html folder
112:25 - and she has everything else that was in
112:27 - the skeletal directory and not only that
112:28 - but you can even see the date that these
112:30 - things were added to the scale directory
112:34 - so if i look in here you'll see april
112:36 - 15th for the public html
112:38 - once again 8th
112:40 - april 15th everything matches it's just
112:42 - a direct copy of what is in the scala
112:45 - directory
112:47 - okay
112:48 - so that's the scale directory it's kind
112:50 - of useful you want to make sure you set
112:51 - it up before you create users otherwise
112:53 - you have to go manually back and create
112:54 - it so i look in the uh joseph directory
112:58 - and you can see there still isn't a
112:59 - public html folder there because it
113:01 - wasn't in the scale directory when his
113:03 - directory was created
113:09 - how are regular users and root users
113:12 - different well root has access to all
113:14 - kinds of amazing things
113:16 - they can edit all kinds of files they
113:18 - can edit anything with
113:20 - that they don't even have permissions
113:21 - for they can change permissions they can
113:22 - change ownership of any file
113:26 - so how do raider users get the right of
113:28 - root well we looked at that just a
113:29 - moment ago there's that wheel group
113:31 - thing
113:32 - with the wheel group
113:34 - sudoers
113:36 - you are able to run command with the run
113:38 - the sudo command
113:41 - and access things that root could access
113:45 - because you can run these commands as
113:47 - root
113:48 - so what can radar users do if they do
113:51 - not have root rights
113:52 - well they can ask for somebody with
113:55 - rewrites to do a forum
113:57 - or
113:58 - if these
114:00 - root user wants to it can grant them
114:03 - access so they can do it with the pseudo
114:05 - command themselves
114:09 - what do the rwx permissions mean
114:12 - well r is read w is right and x is
114:16 - execute
114:18 - and that different means it means
114:19 - different things in different contexts
114:21 - for example if it's a
114:23 - r and it's a directory it means you can
114:25 - read the contents of the directory that
114:27 - means you can see which files are in the
114:28 - directory
114:30 - if it is an r it's a file it means you
114:32 - can read the file
114:34 - w means you can write to it
114:36 - you can write to the directory you can
114:38 - write to the file
114:39 - x if it is a file it means you can run
114:42 - it as a program it can execute it
114:45 - x as a directory means you can get into
114:47 - the directory so that's what executing a
114:49 - directory means is going into the
114:50 - directory
114:52 - so can a directory have the execute
114:54 - permissions well we just answer that yes
114:56 - it can what are sticky bits
114:59 - okay
115:00 - well before that
115:02 - you have these permissions right
115:05 - rvx but you have one more permission so
115:08 - let's take a look at some permissions in
115:11 - well
115:12 - this directory for example
115:13 - if i do
115:14 - stat
115:15 - and i look at my desktop
115:19 - desktop
115:21 - desktop
115:23 - i'm in the wrong directory aren't they
115:26 - let's
115:28 - see the back to my root directory stat
115:31 - desktop
115:33 - i can see it has these
115:36 - permissions
115:38 - a zero seven five five
115:42 - okay seven means that it has read write
115:45 - and execute
115:47 - fives meaning has right read and execute
115:49 - read and execute
115:52 - so that's good
115:54 - if i create a well let's take a look at
115:56 - um the command if i want to change my
115:58 - password
116:00 - i use which
116:04 - user bin password now the password
116:07 - command itself
116:09 - edits files that only root has access to
116:11 - so the question is how does a regular
116:12 - user
116:15 - run or change their password well they
116:17 - can't a user cannot change the password
116:20 - the only way they can do it
116:21 - is if root does it for them
116:24 - so if i do a stat
116:26 - on the
116:27 - user
116:28 - bin
116:30 - psswd command
116:32 - i can see it has a four
116:35 - seven five five
116:37 - the four
116:38 - gives it it puts this little lowercase s
116:40 - there
116:43 - and it means that it will run as a root
116:46 - user so the 4 means it runs as the
116:49 - root
116:50 - and
116:53 - if you had a 6 that would mean it would
116:55 - run as both the root user and the root
116:58 - group
116:59 - and then the last bit the seven if you
117:01 - want seven there
117:03 - is the sticky bits to keep it means that
117:04 - when you run the program it stays in
117:06 - memory instead of being flushed out
117:07 - regularly so that could be useful if
117:09 - you're running a program regularly again
117:11 - and again and again
117:13 - but these are the set uid bits and the
117:17 - sticky bit
117:21 - so let's go back here
117:25 - how do programs run as different users
117:26 - well you can use the set uid bits
117:29 - and that's basically how you do it
117:31 - they if they have the set uid bit it
117:34 - will run
117:35 - as the
117:36 - user as the owner
117:39 - of that
117:40 - file
117:42 - is a set guid
117:44 - it will run
117:45 - with the group set as the group owner of
117:48 - the file
117:50 - and we talked about the file and
117:52 - directory permissions a little bit
117:55 - let's talk a little bit more about file
117:56 - permissions
117:58 - if you want to run a file you need to
118:00 - have the execute bit set right
118:03 - well what if you are running a
118:07 - well binary files it just needs execute
118:09 - bit and runs if it is a shell script of
118:12 - some sort the way it actually works is
118:14 - it starts running it looks at the very
118:16 - first line and that very first line gets
118:18 - executed
118:20 - and it passes in the contents of the
118:23 - file to that
118:24 - first lines program which then runs it
118:29 - so
118:31 - the very first line of a script
118:35 - is the interpreter so if you're writing
118:37 - a python script it'd be a hash mark
118:40 - exclamation point and then the directory
118:42 - and path all the way to the
118:45 - python binary so hash exclamation point
118:50 - slash user slash bin slash python or
118:53 - something like that
118:55 - and then what happens is that program is
118:57 - run and it's past the url or the
119:00 - location of this file
119:02 - and then it tries to read the file so if
119:04 - it is a script it needs to have the
119:07 - read bit set otherwise it will not be
119:09 - able to actually run
119:12 - the program
119:13 - so binary programs just need the execute
119:16 - bit set and
119:18 - scripts need to have both the execute
119:20 - and the
119:21 - read bit set
119:25 - all right so what are default
119:26 - permissions well
119:29 - so if you are creating new things with
119:31 - root
119:32 - root
119:33 - usually creates new files and it has
119:36 - read write access to all of its own
119:38 - files but
119:40 - if a user
119:41 - sets it it also has rewrite set but the
119:44 - user sets both the
119:45 - owner and the group permissions
119:48 - and root says basically just the owner
119:51 - permissions to be something that's
119:53 - open
119:55 - and the reason for that is to prevent
119:57 - root from accidentally giving too much
119:59 - rights to things it doesn't want to give
120:00 - rights to
120:02 - and that is all set with the umass
120:05 - so let's go ahead and take a look at
120:07 - that
120:09 - jump in here
120:11 - and type in umask
120:15 - you can see my umass for the root user
120:18 - is
120:19 - 0
120:20 - 0 2 2.
120:22 - what does that mean well if you take
120:24 - whatever it is so if it's a directory it
120:26 - normally starts with seven seven seven
120:29 - or you assume zero seven seven seven
120:31 - and you subtract that
120:34 - so a zero
120:36 - seven
120:38 - seven seven um
120:41 - you're looking at taking
120:43 - zero seven seven off of that
120:46 - and you end up with a
120:48 - seven
120:50 - five five
120:52 - and if you are a
120:56 - regular user it would be set to a umass
120:58 - of zero zero zero
121:00 - two
121:03 - and that would give you a seven seven
121:05 - five so imagine um your permissions of
121:08 - zero seven seven seven
121:10 - minus
121:11 - zero zero
121:13 - two two for a directory will give you
121:17 - zero
121:18 - seven five five
121:21 - and for a raider user your mask is going
121:23 - to be
121:25 - a zero here which will give you a seven
121:28 - here so that's kind of the idea
121:30 - um
121:31 - so
121:33 - you can change your umass if you want to
121:36 - someplace along the way in your bash
121:40 - profile or bash rc or something else and
121:42 - that will get you
121:44 - changed
121:45 - but you can leave it alone and that's
121:47 - what happens with the default
121:49 - permissions
121:54 - chmod and ch on
121:56 - so chmod is to change the mode or
121:59 - basically change your permissions and ch
122:02 - own changes your ownerships
122:04 - so how do i change permissions on a file
122:06 - or directory well you type in chmod
122:09 - the new permissions and
122:12 - then
122:13 - the name of the file
122:15 - you want to change it to
122:17 - um ch own you can do ch own
122:20 - the new user
122:23 - and then the file you want to change and
122:24 - then you have both a binary and
122:26 - non-binary
122:28 - representations we can look at
122:31 - so i'm in my directory
122:33 - well let's go make this new directory um
122:36 - temp
122:37 - and go into temp
122:40 - i can see there's no files here touch
122:42 - a
122:44 - b and c
122:45 - now create three empty files a b and c i
122:48 - can type in ch
122:50 - mod
122:52 - and right now their current permissions
122:54 - are read write
122:56 - and read and
122:58 - read so
123:00 - chmod
123:02 - and i will do
123:04 - uh group
123:06 - plus
123:07 - uh
123:09 - write
123:10 - for a
123:12 - so i added the group right so if i do ls
123:16 - l again i can see now it has the right
123:19 - for the group
123:21 - i can do a
123:23 - well
123:24 - a
123:28 - let's say b i'm going to do a group plus
123:30 - right and i'm going to do
123:32 - other
123:33 - minus
123:35 - read
123:36 - so i'm going to add write to the group
123:38 - and i'm going to subtract
123:40 - read from other now look at it again and
123:43 - you can see that it has
123:45 - these permissions right here
123:47 - so if you look at these things they're
123:48 - all kind of like binary numbers
123:51 - well they don't look like numbers those
123:52 - are letters but
123:53 - if you like think of it the first one
123:55 - has a value of four the second one has a
123:58 - value of two and the last one is value
124:00 - of one
124:02 - so
124:04 - this first one or here a
124:08 - well it's got
124:10 - six
124:11 - six and four six because of four plus
124:13 - two
124:14 - four plus two and then four if i do a
124:17 - stat
124:18 - on a i can see that it is in fact
124:21 - six six four right there
124:26 - well if i want to change something else
124:27 - maybe i want it to be executable
124:31 - well the execute bit is the one the very
124:33 - last one so if i do
124:36 - chmod
124:38 - seven seven
124:40 - five on a
124:43 - and then look at it again
124:46 - seven seven five makes it read write
124:48 - execute redirects you and then read and
124:51 - execute
124:53 - if i wanted to be just executable
124:55 - and no read no write then i could do
124:58 - well
124:59 - one one
125:02 - look at that again and you can see that
125:03 - it's just x cube bits
125:06 - if i want to make it just
125:11 - writeable now i can make it 2 2 2.
125:16 - and you can see that now it's just
125:17 - writable and if i want to make it just
125:18 - readable
125:19 - i can do four for four
125:23 - so you can see you can mess with the
125:24 - permissions with ch
125:27 - mod and set them that way both binary
125:29 - and with
125:31 - other things and you can learn about
125:32 - that more
125:34 - the
125:35 - using the man's
125:38 - ch mod command
125:40 - you get information about all the
125:41 - different modes and options you have
125:43 - here
125:45 - and q for quit
125:47 - all right what if i want to change the
125:49 - ownership well
125:51 - i created this new user alice so i do ch
125:55 - own
125:56 - alice
125:57 - i set the user and i want to maybe i
126:00 - sent her to the group alice
126:02 - a
126:03 - so now look and it is now owned by alice
126:08 - the alice is both the
126:10 - owner
126:11 - and the group owner
126:14 - they're both named dallas and that's how
126:16 - you change the ownership of files with
126:19 - ch own
126:26 - all right sc linux what about sc linux
126:28 - well sc linux allows you to control
126:30 - files and control access to the files
126:32 - sc links was created by the nsa
126:35 - so the big question that pops up is can
126:37 - we trust them
126:38 - well
126:39 - nsa is a group of spies right
126:42 - can you trust spies
126:44 - well
126:45 - they actually did this
126:46 - for knowing their own selfish reasons
126:49 - because they were required to have
126:51 - mandatory access controls and linux
126:53 - didn't really have good mandatory access
126:55 - controls so sc linux was built there
126:58 - seonx is the security enhanced linux
127:01 - it provides mandatory access controls
127:05 - so
127:05 - files have these different contexts
127:08 - and you can change it
127:10 - and if you mess it up bad things happen
127:12 - so let's go look at some files
127:14 - right here if i do ls minus capital z
127:18 - i can see these all have the admin home
127:21 - t
127:22 - context type you can also see which
127:25 - roles and the user stuff but we can
127:27 - really ignore that stuff all we really
127:28 - care about is the type for most of what
127:31 - we're doing
127:33 - so
127:33 - i can do a
127:36 - ch
127:37 - con for change the context type
127:41 - and maybe i want to change this from
127:42 - admin home t to
127:47 - conf
127:48 - t
127:49 - and then change a
127:52 - okay maybe comp t isn't a valid argument
127:56 - uh
127:57 - let's see what other types we have
127:59 - down the ecc directory we have um
128:02 - let's do a capital z
128:04 - we can see we have etct's let's make
128:06 - some of those so i'll look at that let
128:09 - me change this one to an
128:11 - e t c t
128:14 - and now i look at my directory right
128:16 - here and i can see that it has been
128:17 - changed from an a
128:20 - well from an admin home t to an e t c t
128:23 - if i want to change it back i can just
128:25 - use the c h con command again
128:27 - or i can use restore
128:30 - con
128:31 - a and it will restore it back to what it
128:33 - thinks it should be which might be
128:35 - correct it might not be
128:37 - and you can see it change back to the
128:38 - admin home t
128:41 - this is important because some programs
128:43 - are set to only be able to read certain
128:44 - types
128:46 - and that becomes critical when you start
128:48 - doing things with a lot of servers
128:52 - but just to be aware that you can do
128:53 - that you can look at the types and you
128:55 - can change them
128:56 - and that is it for our peoples and
129:02 - permissions software repositories
129:08 - when you're using linux one of the big
129:09 - questions that come up is what is the
129:11 - difference between linux and a linux
129:13 - distribution
129:15 - well
129:16 - linux technically is the kernel
129:20 - of the linux distribution
129:23 - so what we have is we have
129:25 - a
129:27 - system which is a collection of software
129:30 - and the main piece
129:32 - that runs your operating system is your
129:35 - linux kernel
129:37 - so a kernel
129:38 - is the only program that is allowed to
129:42 - access memory
129:44 - access the hard drive um
129:46 - lots of cpu things lots of things are
129:48 - restricted to just the kernel
129:50 - so when a computer starts up
129:53 - what it does is it starts up
129:56 - the kernel
129:57 - and the kernel is then able to start at
129:59 - the other programs that then run
130:02 - so then you have this thing
130:04 - called kernel space
130:06 - and you also have this thing called user
130:07 - space
130:09 - and things that run in the kernel have
130:11 - access to the physical hardware and
130:14 - things that run outside the kernel
130:17 - have access to
130:19 - asking the kernel for things
130:23 - well the kernel only manages the
130:25 - hardware and other programs and doesn't
130:28 - do a whole lot
130:30 - of user
130:32 - specific tasks that users see
130:36 - if you want to run a gui that's not run
130:38 - in the kernel if you want to have a
130:40 - command prompt that's not in the kernel
130:42 - all these things are run by external
130:44 - programs that are outside of the kernel
130:47 - and then you take all these programs
130:48 - that are run outside the convertible
130:50 - kernel and you gather them together
130:53 - to make a working system the kernel is
130:56 - the main piece the brain that runs
130:57 - everything
130:58 - and then all these other things are what
131:00 - makes the user experience
131:03 - so linux the kernel then a distribution
131:06 - is that big collection of software
131:08 - people can decide which pieces of
131:10 - software they want and collect them
131:12 - together as a
131:13 - linux distribution
131:15 - so you'll see sometimes people say gnu
131:18 - linux distribution
131:20 - gnu is a project that includes lots of
131:23 - different commands that you'd use
131:25 - your shell
131:28 - all of your commands to change ownership
131:30 - and change files and all these things
131:32 - are commands that are written to access
131:35 - or to make requests from the kernel and
131:37 - have a kernel do things
131:39 - and also provide an interface for users
131:42 - to type things so the gnu project
131:45 - got combined with the linux kernel
131:47 - and created this gnu linux thing
131:50 - and then you have other pieces of
131:52 - software such as your
131:54 - databases and your guise and all these
131:57 - things
131:58 - thrown together
132:00 - and makes a linux distribution
132:02 - so can linux be installed without a
132:04 - linux distribution
132:06 - well kind of yeah you can install it
132:08 - without linux distribution but basically
132:10 - what you're doing is you're installing
132:12 - the kernel and then when the kernel
132:15 - runs
132:17 - it won't be able to do anything
132:19 - so you really need something linux needs
132:22 - to be able to start something that you
132:23 - can use
132:24 - to run the rest of your system
132:26 - so sometimes you'll have linux kernel
132:29 - show up in things like android phones
132:31 - and
132:33 - other devices
132:34 - but
132:36 - those are still linux distributions of
132:38 - some sort
132:41 - so why do we need linux distributions it
132:43 - should probably be obvious at this point
132:45 - you need linux distributions because you
132:46 - need to be able to do something more
132:48 - than just
132:49 - work with the hardware you need to be
132:50 - able to work with the users as well
132:53 - and that requires linux distribution
132:58 - so what do linux distributions lead to
132:59 - you well linux distributions come with a
133:01 - set of software
133:03 - and they assume that this is the
133:05 - software that everyone or most people
133:07 - will need and they bundle everything
133:09 - that's very common together everything
133:11 - that makes your system work
133:13 - at that point you need to decide which
133:15 - other software packages you want to
133:16 - install if you want to build your own
133:18 - software packages they're not part of
133:19 - your linux distribution
133:21 - some distributions come with compilers
133:23 - some don't some you have to build them
133:26 - or add them you're at them later
133:28 - sometimes they're in a linux repository
133:32 - you download them
133:33 - and you get them installed on your
133:34 - system sometimes you have to manually go
133:36 - and grab things and build them or
133:39 - install them yourself
133:43 - so repositories what is a repository
133:47 - well the linux distribution usually
133:49 - comes on a
133:51 - dvd or some bootable media
133:53 - and then you install it and it gives you
133:55 - your basic set of files however
133:59 - the dvd might not be updated regular
134:02 - basis so
134:04 - that could be a bit of a problem you
134:06 - might have a bunch of old files that
134:07 - need to be replaced
134:10 - additionally you might have programs and
134:12 - files that you want in your system but
134:15 - are not part of the standard linux
134:17 - distribution because
134:19 - they're not very common or they just
134:21 - assume that most people won't need these
134:23 - they've taken what
134:24 - most people want input there but a dvd
134:27 - is limited really only to about four
134:29 - and a half gigabytes of data
134:31 - so
134:32 - all the other things you might need
134:34 - but aren't
134:36 - on that dvd are stored in repositories
134:40 - so a repository is a
134:42 - basically like a website
134:45 - with a
134:47 - base file that indicates what files are
134:49 - there and then it has references to
134:51 - everything else
134:53 - inside these files
134:55 - you also have information about what
134:59 - packages
135:01 - need
135:02 - you need to know which dependencies each
135:04 - package has and this is all stored kind
135:06 - of in the repository so you can download
135:08 - and build packages
135:12 - so what's the difference between a
135:14 - repository and linux distribution well
135:16 - the repository is your
135:18 - extra stuff
135:20 - it also includes your linux distribution
135:22 - as well but it's everything else you
135:24 - need it could be terabytes of data
135:27 - terabytes of files and programs
135:29 - different versions different
135:31 - different things you might need to
135:32 - install your system a linux distribution
135:35 - is more of this smaller confined
135:38 - grouping
135:39 - for getting you started
135:42 - so what repositories or which
135:44 - repositories does my system have
135:47 - and how do i add additional repositories
135:50 - and why would i want to add more
135:52 - repositories
135:54 - and then are there disadvantages so
135:56 - let's go ahead and take a look at a
135:58 - linux system
135:59 - so right here we have a linux system
136:02 - so if i go down to the etc directory
136:05 - and i go into the
136:08 - yum
136:09 - dot repos.d
136:11 - directory
136:13 - i can see a list of files
136:16 - and all these files have the repo
136:19 - extension
136:20 - these are my standard
136:23 - well standard repos
136:26 - so i can go in here and i can look at
136:29 - each of these files so the centos base
136:32 - let's take a look at that
136:33 - let's
136:35 - send os
136:36 - base
136:38 - and i can see that it has a bunch of
136:40 - comments and then it has this base thing
136:44 - and it looks like a name and it has this
136:47 - mirror list
136:48 - base urls gpu check things like that
136:52 - so what do we have here well the name is
136:54 - the name of the repo
136:57 - the mirror list is where you're going to
136:58 - find your files to download
137:02 - you have this base url as well
137:04 - which gets you started there
137:06 - the
137:07 - gpg check
137:10 - basically says well these packages could
137:12 - be signed do we want to check the key to
137:15 - make sure they're signed by the person
137:16 - who's supposed to sign them there's this
137:18 - whole public key private key thing
137:20 - and
137:20 - once the repo is installed you need to
137:24 - accept the key
137:26 - and then any packages that are created
137:28 - and added to that repo
137:29 - get signed with their
137:32 - private key which you can then verify
137:33 - with this public key
137:35 - and the public key is right below in gpg
137:38 - key
137:41 - so this
137:42 - base
137:44 - contains a whole lot of files
137:47 - and then after that you also have
137:48 - updates extras
137:50 - different
137:52 - repos that you can look at
137:54 - there's also one thing you want to look
137:55 - at the very bottom one centos plus there
137:58 - is enabled equals zero which means this
138:01 - one is not part of your
138:04 - lookups so how does this work well
138:07 - when you want to install something
138:10 - it has to go look in the repos you have
138:11 - to download files
138:13 - let's add an additional repo
138:16 - so one that's very common is the e-pal
138:18 - release or e-pala repo so i do a yum
138:21 - install
138:23 - epel
138:24 - release
138:26 - this is a package that will give me the
138:28 - repo files for the epel
138:30 - repo
138:32 - and you can see right here at the very
138:33 - beginning it did loading mirror speeds
138:37 - you can see it's looking at your base
138:39 - your extras your updates these are repos
138:41 - that are active
138:44 - and it's going through and grabbing
138:45 - these and checking these making sure
138:48 - that you have everything you need
138:50 - it looks at the dependencies in order to
138:52 - get the epel release
138:54 - figures out if there's any dependencies
138:55 - that need to be installed and there
138:56 - aren't any
138:57 - and then asked me do i want to download
138:59 - and install it
139:01 - and i say
139:03 - yes
139:04 - i could do d for download and just
139:06 - download it and not install it but why
139:08 - for downloading and installing
139:11 - and then it installs this epel release
139:16 - so then if i wanted to do a
139:18 - yum install ebell release again it's
139:21 - already installed
139:22 - but you'll see
139:25 - looks like my gui decided to take over
139:28 - i can kill that process
139:32 - sometimes the applet on the desktop
139:33 - decides to take over
139:35 - all right so i um install e-pal release
139:37 - and now you see in addition to checking
139:39 - base
139:40 - extras and updates it also checks e-bell
139:43 - to see if there are packages here
139:48 - now if i take my directory again i can
139:50 - see that there is a new set of files
139:52 - right here there is the epel
139:54 - repo file so i take a look at that one
140:00 - i can see it has a list of things as
140:03 - well
140:04 - i can go through and i can
140:06 - disable the payload if i want
140:09 - or i can leave it
140:10 - enabled
140:12 - you can see there's two other ones right
140:13 - here that are both listed as currently
140:15 - disabled if i wanted to get the
140:19 - debug info versions i could grab
140:23 - just turn on this one right here and
140:24 - probably turn off the other one
140:26 - if i want to get source code i could get
140:28 - the epel
140:30 - source and just enable that one
140:34 - if i wanted to install a package from
140:35 - the e-pal release alpine which is a
140:38 - great mail client
140:39 - based on the pine client is part of that
140:41 - so you can do yum install
140:44 - alpine
140:45 - and then it looks and it says okay
140:49 - you want to install alpine and it says
140:51 - alpine right here it says alpine is part
140:54 - of the
140:55 - epel repository
140:57 - it also requires mail cap which is part
140:59 - of the
141:01 - base repository
141:03 - so you can tell where he's getting it
141:04 - from so i do y
141:07 - it downloads
141:08 - this
141:09 - mail cap
141:11 - and then it says wait a second we don't
141:13 - have the key installed for
141:15 - epel
141:17 - so i said
141:18 - so i look at it and say do i want
141:19 - install it yes i want to install the key
141:22 - and i installed the key and then it
141:24 - installs both of the packages
141:26 - so that's how you get the new repo
141:28 - that's how you use it and get it in
141:30 - place
141:32 - all right
141:40 - where are the report repository files
141:42 - stored well that's in the
141:44 - etc directory etc
141:46 - yum.repos.d
141:49 - directory so you can see those
141:50 - can they be edited from the command line
141:52 - yes they can you can go in there and
141:53 - change them you can disable and
141:55 - re-enable them
141:57 - you can also remove these on the command
141:59 - line so you can delete the repo files
142:01 - once you delete a repo file it will
142:03 - remove the repo from use and you will
142:06 - not have to worry about
142:07 - taking up memory every time you do a um
142:09 - update also
142:11 - it
142:13 - doesn't
142:15 - then give you the option of downloading
142:17 - the packages from that repo so they are
142:19 - removed
142:22 - how do i update packages on my system
142:26 - hmm
142:27 - we have a system
142:28 - and i probably have updates
142:31 - so how would i update packages
142:35 - well let's go take a look
142:40 - if i go back over here
142:42 - let's clear the screen
142:44 - and if i do a yum update
142:47 - it will then check all my repos and
142:49 - you'll see i have lots of packages that
142:51 - need to be updated
142:53 - so
142:54 - i can say okay let's update them all so
142:56 - i do a wide update them
143:00 - and then they start updating
143:02 - the first thing you do is they
143:04 - start downloading
143:06 - and after they download all the packages
143:08 - then they will start installing the
143:10 - packages
143:12 - now if you have not accepted your key
143:14 - before it will then require you to
143:16 - accept your gpg key
143:18 - before it will install the packages
143:23 - how do i search for new packages or for
143:25 - new programs provided by the repository
143:27 - well you can use the yum command once
143:29 - again
143:30 - you did a yum install to install things
143:33 - you do a yum update to update
143:35 - if you want to search
143:38 - it is a yum search so if i wanted to
143:40 - find something such as
143:43 - alpine which i've already installed i
143:45 - could do a yum search
143:47 - alpine
143:50 - now that could be
143:51 - quick
143:52 - could be slow
143:55 - but
143:56 - much faster than just going to the web
143:58 - maybe
143:59 - sometimes the search will not tell you
144:02 - which package to install because you use
144:03 - the wrong search terms so keep that in
144:05 - mind it doesn't find everything always
144:09 - how do i install new programs from a
144:11 - repository well
144:12 - you use the yum install and the name of
144:15 - the package you want to install
144:17 - and then how do i know which packages
144:18 - are installed
144:20 - well there are a couple of different
144:21 - ways you can look at that
144:24 - when you use yum yum keeps track of all
144:27 - the packages that are installed in your
144:28 - system
144:30 - however there is the possibility to
144:34 - go around that because yum is actually a
144:36 - front end for the rpm
144:38 - package
144:39 - so rpm
144:41 - is what's used to actually install and
144:43 - remove packages and yum is a front end
144:46 - that downloads repository
144:49 - dependencies and everything and installs
144:51 - everything it keeps track but you can
144:53 - look at things with rpm by itself
144:58 - so let's jump back over here
145:00 - and we have everything installed
145:02 - if i do
145:05 - a rpm minus
145:07 - qa
145:09 - i will query all packages and this will
145:11 - list all the packages that are installed
145:13 - on my system
145:15 - you can see that there are things like
145:18 - well there's a name
145:20 - the name of the package
145:22 - you have a version number
145:24 - you have a release basically for which
145:27 - um
145:29 - repo or not report rich distribution it
145:32 - is and then which architecture this is
145:34 - specific to
145:35 - most these you can see is x86
145:38 - which means it's the 64-bit version
145:42 - for the x86
145:45 - so it runs on the newer processors no
145:47 - arch means that it's really
145:49 - configuration files or something that
145:51 - doesn't depend on a specific
145:53 - architecture
145:57 - if i wanted to do a
145:58 - update of something
146:00 - i just update everything
146:02 - but i could do a yum
146:04 - update
146:06 - and list this is a specific package
146:09 - like nmap it will check to see if
146:11 - there's any new updates and there are
146:13 - well none
146:15 - if you want to install a package that
146:17 - isn't installed let's see if we can find
146:19 - something that's not installed so maybe
146:20 - bind
146:23 - yum install
146:25 - find
146:26 - utils
146:29 - well it's already installed
146:31 - so you can install packages that way if
146:33 - i want to search for something i can do
146:35 - that let's say i really want to run a
146:38 - web server so i can do a yum
146:41 - search
146:43 - web
146:44 - and see what shows up
146:48 - shows everything that has web in either
146:50 - the name of the
146:52 - package or in the name of the or in the
146:56 - description
146:58 - see lots of things here it's usually
147:00 - best to figure out what package you want
147:02 - to install
147:04 - and then helps you
147:06 - narrow it down
147:08 - so if you did a yum search for web
147:11 - server
147:16 - you might find a shorter list which
147:18 - might include what you want
147:21 - now typically people use apache
147:25 - and apache
147:28 - apache is not listed in this list of
147:31 - packages so how would you look for it
147:33 - well you wouldn't search for web server
147:36 - because that didn't work you might have
147:37 - searched for apache
147:41 - and then you come up with this list that
147:43 - includes other things
147:46 - you guys apache commons and all kinds of
147:49 - things
147:50 - and you start saying well which one is
147:52 - it
147:53 - which one has apache
147:56 - well it turns out it's the httpd
148:02 - package
148:03 - you can see httpd dot x
148:07 - 86
148:08 - underscore 64 is the name of the package
148:10 - it's actually the package is called
148:12 - httpd
148:13 - it's the architecture and this is the
148:16 - description so i want to install the
148:18 - apache web server i do a yum install
148:23 - htpd
148:26 - and then you can get it
148:28 - installed
148:35 - so now we know how to install packages
148:37 - how to update packages and we also know
148:39 - how to figure out which packages are
148:41 - installed on the system
148:42 - and this is your brief overview on using
148:45 - software repositories
148:49 - programs and scripts
148:51 - so what is the difference between binary
148:54 - programs and text-based scripts well
148:56 - binary programs are
148:58 - basically programs that are files made
149:01 - out of machine code readable
149:04 - stuff
149:06 - and then text
149:07 - based scripts are human readable
149:10 - programs
149:12 - so when you run a binary program
149:15 - well there's multiple parts to a binary
149:16 - program
149:17 - but
149:18 - one of the main parts is you have actual
149:21 - machine code that is understood by the
149:23 - cpu
149:25 - directly
149:26 - in a text based script what you have is
149:29 - human readable code that is interpreted
149:31 - and converted to
149:34 - instructions as it runs
149:37 - so the binary programs are going to be
149:38 - much faster
149:40 - and the text-based stuff is much easier
149:41 - to read modify and update
149:44 - so how does the operating system tell
149:46 - the difference well
149:47 - there are
149:48 - pieces in the very beginning of a
149:51 - program that indicate what it is
149:54 - so
149:55 - for a script they all start with the
149:58 - hash
149:59 - and then exclamation point
150:01 - and after that they have the name of a
150:04 - binary program that's going to be run
150:06 - and then what happens is
150:10 - it reads that it sees the name of the
150:11 - binary program to run it runs that
150:14 - program and then passes the
150:16 - script as input to that program
150:21 - so that causes the
150:23 - interpreter to then interpret that
150:25 - script and run it
150:27 - so how do users tell the difference well
150:29 - it's pretty easy you just open the file
150:31 - and take a look at it and if you can
150:32 - read it it's probably a script if you
150:34 - can't read it it's probably not a script
150:36 - how are they made
150:38 - well you use text editors to create
150:41 - your text-based scripts and use
150:43 - compilers to take source code
150:46 - that's made with a textbox editor
150:49 - and convert that to binary
150:54 - so
150:54 - the conversion process happens with the
150:56 - compiler so what is compiler
150:59 - well a compiler reads through a source
151:01 - code file
151:03 - and it will then interpret and figure
151:05 - out what this means and convert it into
151:08 - binary data that can be understood by
151:10 - the cpu
151:12 - it's the same kind of thing as an
151:14 - interpreter but it converts it all the
151:16 - way down into binary
151:18 - and stores it as binary
151:20 - they still have to do the same kind of
151:21 - thing as interpreters because they both
151:22 - have to read what the human readable
151:24 - version is
151:25 - and understand it
151:27 - so why would i want a compiler
151:30 - well
151:31 - you need a compiler every time you want
151:33 - to
151:34 - write binary or create binary files
151:37 - and that could be because you need to
151:39 - download some source code someone's
151:40 - provided you need compiler to do that
151:43 - and you also need if you're going to
151:45 - create programs that are not going to be
151:47 - script-based programs
151:50 - so which compiler should i get
151:52 - well
151:53 - that depends on what the source code is
151:56 - written for
151:57 - there are multiple different compilers
151:58 - out there
151:59 - but the most common one on linux systems
152:02 - is the gcc compiler
152:05 - so it's the gnu compiler
152:07 - and that one is the one that i would
152:10 - recommend
152:11 - especially if you don't know any other
152:14 - one you need although it is possible
152:16 - there are some minor differences in the
152:18 - source code and different compilers will
152:20 - be required
152:21 - to do different things
152:23 - so you need to make sure you
152:25 - if you download some source code from
152:27 - somewhere you figure out if it requires
152:29 - a specific compiler or if it works just
152:30 - fine with the gcc compiler
152:34 - so building source code
152:35 - where can i go to get programs that are
152:37 - distributed as source
152:40 - well a lot of people go to
152:42 - github you can go to github and you can
152:44 - download source code there
152:46 - you can also go to other source code
152:48 - places such as
152:50 - sourceforge
152:51 - and download
152:53 - your source code there and get many
152:56 - different
152:57 - people who are creating projects have a
153:00 - source code distribution that you can
153:02 - download as well
153:04 - but then you figure out how to build the
153:05 - source code programs
153:08 - so
153:08 - how do you do that well
153:11 - that can be tricky because sometimes you
153:13 - have all kinds of libraries that need to
153:15 - be compiled and built into it so you
153:17 - need to make sure of all the libraries
153:18 - all the dependencies
153:21 - everything you need to make sure you
153:22 - have a compiler i want to work then you
153:25 - need to sometimes run scripts on it to
153:27 - then prep it up
153:29 - sometimes there are configure scripts
153:31 - that will check
153:32 - your system and see what hardware what
153:35 - what packages you have
153:37 - and then customize your build to use
153:40 - that
153:41 - then they have make files
153:44 - make files you run the make command and
153:47 - that will install
153:48 - all the
153:51 - well
153:52 - it'll build everything according to the
153:53 - make file instructions
153:56 - so
153:57 - that seems kind of complicated
153:58 - complicated and
154:00 - difficult so why would i want to build
154:02 - my own programs or build them myself
154:04 - well you want to build them yourself
154:05 - because
154:07 - it gets more efficiency or because they
154:09 - are not built
154:11 - or
154:12 - maybe you want to make changes and you
154:15 - can't make changes to someone else's
154:16 - binary very easily
154:18 - so you need to build them yourself
154:21 - so how then are source code projects
154:23 - installed
154:24 - well what happens is
154:26 - if you use a package management system
154:28 - such as an rpm package
154:30 - it installs and it puts
154:33 - files all across the system in different
154:35 - places but it keeps track of where
154:36 - they're at
154:38 - if you do a source good project you can
154:40 - do the same thing you can put them all
154:42 - across the system wherever you need to
154:43 - put them
154:44 - and then you need to keep track of where
154:46 - they're at
154:47 - or you need to make sure there's some
154:48 - way some script in there to remove them
154:51 - because otherwise removing them can be
154:54 - very difficult
154:57 - so
154:58 - what does a hello world program
155:00 - in c look like
155:02 - and how to use the seeks gcc compiler
155:05 - convert source go to binary
155:07 - and then let's look at the make file and
155:09 - then how to run the binary program
155:11 - so let's jump right in here
155:13 - so
155:14 - let's make a file so i'm going to make a
155:16 - directory first make dur
155:18 - and i'm going to make this the hello
155:21 - directory i go to hello
155:23 - and now i'm going to create a
155:26 - file so nano
155:28 - hello dot c
155:30 - so your c files end up with the c
155:33 - extension
155:34 - and in it you have to tell it
155:36 - you are using
155:39 - your libraries stdiu standard input
155:42 - output
155:43 - each
155:44 - and then in main you have to main
155:47 - function
155:48 - you can pass the variables here or you
155:49 - can skip that and go directly into your
155:52 - main function
155:54 - and in the main function i'm going to
155:56 - print f
155:57 - to print hello
155:59 - world
156:02 - i have a new line so it's not on the
156:04 - same line
156:05 - and and then i want to make sure i have
156:07 - a return value so that when the program
156:08 - ends it knows that it returns
156:10 - successfully
156:11 - returns zero
156:13 - so that's really about it
156:15 - um you can do much more much more
156:17 - complex you can add things like uh
156:20 - and arg c
156:26 - you know
156:27 - char
156:29 - maybe starch r r uv you can do whatever
156:32 - you want here but you pass in variables
156:35 - anyway let's go ahead and save that and
156:38 - exit out
156:39 - next i want to compile it so i need to
156:41 - use the gcc compiler if i try and
156:44 - running it right now
156:46 - i don't think i have it installed
156:50 - and it says command not found so i need
156:52 - to get my compiler
156:54 - so
156:55 - i could search for the gnu
156:57 - compiler and find it that way or i can
156:59 - just do yum
157:00 - install
157:01 - gcc
157:05 - and that will get it
157:06 - right
157:07 - here get it all installed
157:11 - and that's kind of quick
157:13 - the compiler does take a little bit of
157:15 - time it's a little bit bigger than the
157:17 - average package
157:18 - but it's not too hard to install i get
157:21 - installed and now i can try compiling
157:23 - again
157:24 - so i do a
157:27 - vm install
157:30 - actually not yet so i'll do it uh gcc
157:33 - hello dot c
157:36 - that takes my directory and i can see i
157:37 - have two files now there's the a dot out
157:39 - and the hello dot c so we do period
157:42 - slash a dot out
157:45 - it runs hello world
157:47 - if i don't want to be called a dot out i
157:49 - can change what it's
157:50 - saved as or what it's created as
157:52 - in the command
157:54 - gcc
157:55 - o dot c minus o for output
157:59 - hello
158:00 - so i want to be i want it to be called
158:02 - hello so i do that it creates
158:04 - instead of the a dot out it creates a
158:06 - hello dot
158:08 - orange hello
158:10 - binary you can see it's the same size as
158:12 - the out if i run hello
158:15 - it runs
158:16 - the way to run it is
158:18 - because the current directory is not my
158:20 - path i have to tell it a relative
158:23 - location which is the period directory's
158:25 - current directory slash hello
158:28 - so then what's this whole thing about
158:29 - make files well if i do a nano
158:32 - make file
158:35 - i go down here and i have
158:38 - my hello
158:40 - in order to create hello i need to make
158:41 - a hello
158:42 - dot i need a hello.c file and every time
158:46 - hello.c changes i want to run this
158:48 - command right here which is gcc
158:51 - hello dot c minus o
158:55 - hello
158:58 - i can also have another option here so a
159:01 - clean maybe
159:04 - and i want to remove
159:06 - hello so it removes the hello
159:08 - binary exit out of that
159:11 - it's going to do a make
159:14 - and it says holds up to date i do make
159:17 - clean
159:18 - and it removes the hello so do a ls
159:21 - minus l i can see that hello dot
159:26 - c is there but hello is not there
159:29 - so now i do make again and it compiles
159:31 - my hello
159:33 - program
159:34 - so that's how i convert
159:37 - my source code into a binary file
159:41 - using gcc and also using a make file
159:45 - gives you a bit of an idea how it all
159:46 - works
159:49 - all right how to run the binary program
159:51 - well you want to make sure you tell it
159:53 - which directory it's in and then you run
159:55 - it so period slash the name of the
159:56 - binary program
159:58 - so what does the hello world program
160:00 - look like in perl python or bash let's
160:03 - go back in here and take a look at each
160:04 - one of these so
160:06 - pearl
160:08 - it uses the pearl executable so if i do
160:11 - which
160:13 - pearl i can see it's in user bin pearl
160:17 - now a source code file
160:19 - a perl usually has a pl extension so i
160:22 - do
160:23 - nano
160:24 - hello dot pl
160:27 - i want to tell it
160:28 - right here
160:30 - you to use user bin
160:33 - perl
160:35 - use that binary and then when i run it i
160:37 - want to do a print
160:39 - and i'll do hello
160:42 - world
160:43 - for
160:45 - old
160:46 - and the new line and a semicolon
160:49 - afterwards to
160:51 - print hello world
160:52 - this right here basically it runs
160:55 - with this uh
160:57 - stuff in the beginning it says okay this
160:59 - is a script i'm going to run this
161:01 - program and i'm going to pass it this
161:03 - entire thing as
161:05 - the input
161:07 - exit out save that
161:10 - now i can see that the permissions are
161:12 - not set to executable on this pl thing
161:15 - so i need to set them executable so do
161:17 - chmod 755 hello dot pl
161:22 - and then i do period slash pillow appeal
161:24 - and oops
161:27 - appeal and that runs
161:31 - now let's try it with python
161:34 - nano hello dot py
161:38 - this one's a little shorter well i'm not
161:40 - sure
161:41 - these are
161:42 - in python
161:46 - print
161:49 - hello
161:50 - world
161:51 - world
161:53 - you don't need the
161:56 - new line character and you don't need
161:57 - the x and the semicolon at the end
161:59 - either this will just work like this
162:02 - chmod 755 hello dot
162:05 - py
162:08 - run that hello
162:10 - dot py
162:12 - and that runs
162:14 - now
162:15 - bash or shell script
162:17 - use the echo command so i do nano
162:21 - hello dot sh
162:24 - and i don't need to tell an interpreter
162:26 - i could i don't need to
162:28 - because it'll just assume if it's text
162:30 - file it's got to be run as a
162:33 - well
162:36 - as a script so i do echo
162:44 - that's it
162:47 - so i run that
162:52 - oops
163:02 - and that runs
163:04 - so those are your shell scripts you can
163:06 - see how they look
163:08 - the
163:09 - shell
163:10 - script could be done
163:12 - as a
163:14 - i can actually pass it the batch if i
163:15 - wanted to so do which
163:20 - bash
163:21 - which is user bin bash and then do nano
163:24 - on my hello
163:27 - sh
163:28 - and i put that line at the top
163:32 - user bin
163:35 - bash and it will run the same
163:42 - and there we go
163:44 - all right so multiple different ways to
163:46 - write a program and make it work
163:52 - standard in standard out and standard
163:54 - error
163:55 - so how do i use a text file for the
163:56 - input
163:58 - to a program
164:00 - well
164:01 - many programs
164:02 - can receive input and you type an input
164:06 - what you can do is redirect
164:08 - these things so standard in is whatever
164:10 - you type in from the keyboard usually
164:12 - standard out is what you print to the
164:14 - screen
164:16 - and standard error is what you print to
164:18 - the screen
164:21 - if you can't
164:22 - see things if you wanted to put out
164:24 - error messages
164:26 - so how do i redirect
164:30 - from
164:31 - standard in or from a file to standard
164:33 - in or out from standard out into some
164:36 - other file let's go ahead and take a
164:38 - look at some of those things right now
164:42 - if i do
164:44 - a command like a cat
164:48 - it's now taking input from my command
164:51 - prompt so i can type things in here
164:54 - and then control
164:56 - z to end
164:58 - well that's an end
165:00 - control c maybe they quit
165:03 - or i could do control
165:06 - control d end that's what it is
165:09 - what i can do is do cat
165:11 - then redirect from output or redirect
165:14 - the output into this new file.txt
165:19 - and then i can type in things right here
165:20 - like
165:23 - hello new file
165:27 - press ctrl d to end that
165:29 - now if i take a look around here i can
165:31 - see there is a new file.txt i cut out
165:33 - this new file
165:35 - and see it has contents
165:37 - i could do something like ls minus al
165:41 - list the directory then i can redirect
165:43 - that
165:44 - into new file and it will replace the
165:47 - contents
165:49 - so then if i cut out the new file
165:52 - it will list what was in the new file
165:57 - i can also redirect standard in
166:01 - or redirect it so standard incomes from
166:03 - something else
166:05 - so
166:06 - um
166:07 - the cat command we just saw cat
166:12 - i can
166:13 - instead of typing something in i can say
166:15 - well i want to get my hello dot c
166:18 - file as the input to cat
166:20 - and then i want to redirect the output
166:23 - into my
166:24 - new
166:25 - hello.c
166:29 - so what does that do
166:30 - well
166:31 - it takes the cat command
166:34 - it sends all the hello.c contents into
166:37 - that cat command which just prints it
166:39 - out and then it redirects the output
166:41 - into new hello.c so if i count new
166:44 - hello.c
166:46 - i would expect to see exactly
166:48 - the hello.c
166:50 - contents those are the same
166:53 - so you can redirect
166:56 - the standard in or redirect that
166:59 - then there's standard error so if i do
167:01 - some commands such as
167:03 - i don't know
167:05 - um find
167:09 - no
167:15 - i do ls minus
167:17 - l
167:19 - dev
167:21 - it does searching there i could do a
167:24 - grep to search for something grip
167:26 - so i look for that word hello
167:28 - in the etc directory
167:30 - all files
167:31 - it some of these things are directories
167:33 - and it cannot search them
167:35 - well i don't want to see this directory
167:37 - stuff so
167:39 - i can decide i'm going to do this but i
167:41 - don't want to see the errors so i
167:43 - redirect the 2 into dev
167:46 - null
167:46 - which basically throws it away
167:48 - and
167:51 - then i see everything that doesn't have
167:52 - an error in it
167:54 - so
167:56 - there you go if i wanted to get rid of
167:58 - all the stuff that does
168:00 - look normal and only have the errors i
168:01 - can get rid of
168:03 - my regular output
168:05 - and just see the errors
168:07 - instead
168:09 - so that's redirecting file
168:12 - input and
168:14 - output so let's clear that
168:20 - using pipes
168:22 - which character is the pipe
168:23 - if you look on your keyboard above the
168:25 - enter key there is this uh well there's
168:27 - a slash usually it's not always on the
168:29 - same same place on every computer but
168:33 - there is this
168:34 - vertical line
168:36 - so let's use the pipe command
168:42 - so if i run hello
168:46 - period slash hello
168:49 - it prints that
168:51 - that's nice
168:52 - um
168:55 - if i run a different command like a
168:59 - wc
169:00 - well wc does a word count so i can take
169:03 - this
169:04 - and
169:05 - redirect
169:06 - the input into the output
169:08 - or the output into the input of wc
169:11 - and it says okay we have
169:13 - one line
169:15 - with two words
169:17 - and 13 characters
169:19 - okay
169:21 - so now i want to try doing
169:24 - something more exciting let's do ls
169:26 - minus al
169:28 - that's quite a bit more i'm going to
169:29 - redirect that into wc
169:32 - it says well 12 lines 101
169:36 - words and 566 characters that's nice
169:41 - what i want to do something like sort
169:43 - this i could sort it
169:46 - sort
169:48 - well now this contents these contents
169:50 - have been sorted alphabetically
169:53 - not quite the same thing but do that and
169:55 - then i can run through word count
170:00 - same thing obviously but
170:02 - you know it does sort it first and then
170:04 - runs it through so you can run multiple
170:06 - different things
170:09 - and
170:10 - run multiple programs at once just have
170:12 - it pass the output into the input of the
170:14 - next thing until you're done
170:20 - so that's pipes
170:22 - file types what types of files exist on
170:25 - linux machines well we have
170:27 - these different letters when i do ls
170:29 - minus l
170:31 - d is for directory
170:32 - l is for link
170:34 - b is for
170:35 - block device and c is for character
170:37 - device
170:38 - so you can look around and see things
170:40 - do file extensions mean anything well
170:42 - they're used by some programs but they
170:44 - don't necessarily mean anything
170:46 - critical
170:48 - what does the file command tell me well
170:50 - it tells me something interesting tells
170:52 - me what the file is
170:54 - so let's jump back in here and take a
170:55 - look
170:56 - so
170:58 - if i do file
170:59 - star
171:00 - it tells all these files what's in so a
171:03 - dot out is an elf binary
171:07 - hello is now binary c is a c source code
171:10 - ascii text
171:12 - you can see each one of these things it
171:13 - lists what they are
171:15 - so elf
171:16 - is the
171:19 - the linux file format for binary files
171:22 - because it has not just binary
171:26 - code
171:27 - it also has things like memory and other
171:29 - things all set up in there
171:32 - and so it
171:34 - uses that
171:36 - so you got to make sure you know how
171:37 - this
171:38 - how these things are if it says elf it's
171:40 - binary if it says text it's not binary
171:46 - text right
171:47 - so you can keep track of those things
171:49 - and that could be useful
171:52 - for figuring out what type of file
171:54 - you're working with so the last thing
171:55 - right here is symbolic links and hard
171:58 - links
171:59 - so let's take a look at them
172:04 - so we have over here
172:08 - we can do a symbolic link so if i do
172:13 - ls minus
172:15 - our ln
172:16 - for link minus s
172:19 - i can do
172:21 - hello
172:22 - because that's my program and i want to
172:24 - make it symbolically hello
172:26 - 2
172:27 - and i can do a hard link with the
172:29 - without the s
172:30 - and do hello
172:32 - three
172:33 - so then i take a look at my directory
172:39 - so the ln
172:41 - does a link the 2 created a symbolic
172:44 - link what that does is it says hello to
172:48 - points to
172:49 - hello
172:50 - so i deleted hello it would be gone
172:53 - hello 3 points to the same address of
172:56 - memory
172:58 - as hello
172:59 - and you'll notice over here
173:01 - there's this number two that's the
173:02 - number of links pointing to that actual
173:05 - content on the disk
173:08 - one because it's just a
173:10 - link it says telling where to go
173:13 - the twos right here are both addressing
173:16 - the exact same space and memory
173:19 - so then if you edit them if you edit any
173:21 - one of those three
173:23 - it will edit the same exact file
173:26 - however
173:28 - some editors
173:29 - when they make file changes will
173:34 - save a new file and then move the new
173:36 - file to replace the old file so keep
173:38 - that in mind
173:40 - when you want to unlink them or delete
173:41 - them you can do
173:44 - either delete or remove or you unlink so
173:47 - unlink
173:49 - hello
173:51 - and i look at my directory listing and i
173:53 - can see that now the hello 2 says oh
173:56 - there's no hello but hello 3 is still
173:59 - fine because it points to the memory
174:01 - and the number 2 has decremented down to
174:04 - 1. so the hello 2 doesn't work but that
174:08 - l03
174:09 - still does because it pointed to the
174:11 - actual program
174:13 - and then you could go and remove or
174:15 - unlink things like hello
174:22 - all right so that's your symbolic links
174:26 - and i think this helps you get an idea
174:27 - of how programs and scripts work on link
174:29 - systems
174:31 - and that's it
174:33 - services and firewalls
174:38 - on a linux machine one of the questions
174:40 - you might ask is what is a service
174:43 - and then a related question might be
174:44 - what is a daemon
174:47 - so a service
174:49 - is basically
174:51 - some program or something that runs in
174:54 - the background
174:55 - someone that serves
174:57 - requests and answers things and helps
175:00 - you work so a web server
175:03 - is a background program that runs and
175:06 - when
175:07 - requests come in from the outside it
175:09 - receives these requests processes them
175:11 - and then sends out pages and information
175:14 - so that's a service there's also other
175:16 - services such as a time service
175:19 - which will
175:21 - sit there and periodically go and check
175:23 - to see what the time is compare the time
175:26 - to its clock and update the clock
175:29 - depending on
175:31 - the differences
175:33 - so that would also be the service
175:35 - so there was a damon well a daemon is
175:37 - basically or a demon is something that
175:39 - operates in the background
175:41 - so
175:42 - basically the same thing as a service
175:44 - so where the name damon or demon come
175:46 - from
175:48 - well there's this maxwell's demon thing
175:50 - where
175:52 - it just serves
175:53 - its master
175:55 - so which services do i want running well
175:58 - that can be a tricky question it depends
176:00 - on what you're doing with your server or
176:02 - with your machine
176:04 - what you're running what you need to run
176:06 - and
176:07 - [Music]
176:09 - how your machine needs to react but
176:11 - there are some services that
176:14 - are kind of essential
176:16 - not really essential but kind of
176:18 - essential such as the mail server
176:22 - so all linux machines all sent to us
176:25 - seven machines
176:26 - have a mail server running
176:28 - and the reason for that is not so they
176:30 - can receive mail it's so that
176:33 - the other services have a way to
176:34 - communicate back to
176:36 - the administrator that something
176:38 - happened
176:39 - so
176:40 - things like your crime jobs your tasks
176:43 - will send a message
176:46 - to
176:47 - the administrator when something
176:49 - produces output that's being run as a
176:51 - job
176:52 - so the administrator knows something
176:54 - happened
176:57 - so that's very useful
176:59 - there are other services that keep track
177:01 - of things like
177:03 - if you're
177:04 - doing
177:05 - dhcp based addressing your dhcp
177:10 - service needs to run in order to
177:12 - maintain and update your lease so you
177:14 - don't run out of ip addresses
177:17 - so then the question is which services
177:19 - pose security risks
177:21 - well any services that can be accessed
177:25 - from the outside or the inside
177:28 - pose a slight security risk the more
177:30 - rights a service has the more of a
177:32 - security risk that service becomes
177:38 - managing services
177:40 - how do i know if a service is running
177:42 - well
177:44 - on
177:45 - newer systems with a
177:47 - system d
177:48 - as the
177:51 - well the service or the system running
177:53 - the machine
177:54 - you can use the system ctl command for
177:56 - system control
177:58 - to check to see if the service is
177:59 - running you can also
178:03 - use other programs to check to see which
178:06 - processes are on the machine and try to
178:08 - figure out if the service is running
178:09 - that way
178:10 - it's probably easiest to use the
178:12 - built-in service checking utilities so
178:14 - let's take a look at
178:16 - the system ctl control
178:20 - command
178:21 - so we have on a default machine a couple
178:24 - of services running you type in system
178:28 - ctl status
178:31 - and that lists a whole bunch of stuff
178:35 - which is kind of useful but then you're
178:36 - like well what does all this mean
178:41 - many of the services you can see are
178:42 - running you can see
178:43 - process numbers what was used to start
178:45 - the services
178:47 - and that can be useful but let's say i
178:49 - want to look at a specific service i
178:51 - want to know if the sshd
178:53 - service is running so i do system
178:55 - ctl status
178:58 - sshd
179:01 - right here i can see that the service is
179:03 - running
179:04 - the green active indicates that it is
179:07 - running
179:08 - so you want to make sure you can keep
179:09 - that straight the active
179:11 - green
179:13 - right here
179:14 - says is running
179:15 - then you might see this other thing
179:17 - enabled
179:19 - what does enabled mean well enabled
179:21 - means that it is not
179:24 - just running
179:25 - but it will start at boot time you also
179:28 - see this vendor
179:29 - preset
179:31 - enabled also
179:33 - so when you install the software it
179:35 - assumes it needs to run and then it's
179:38 - currently set to enabled
179:41 - if i wanted to not start at boot time i
179:43 - can
179:44 - disable it
179:46 - and if i want to
179:48 - stop the service i can stop the service
179:50 - as well
179:51 - so
179:52 - let's do a check right here somebody
179:55 - who's system
179:56 - ctl
179:58 - disable
179:59 - sshd
180:02 - and now
180:03 - i look again
180:04 - at the status
180:07 - i can see that it is still
180:09 - active and running
180:11 - but now it says it is disabled
180:14 - so it will not start on boot time
180:18 - if i do a
180:21 - stop on sag
180:23 - the service stops so if i use system
180:25 - check again
180:28 - i can now see it is inactive or dead
180:31 - and it is still disabled
180:35 - if i want to
180:37 - enable it
180:39 - enable
180:41 - and i look at it
180:44 - you can see
180:46 - that it is
180:48 - enabled
180:50 - but it is still inactive and dead
180:53 - i want to start back up again i just do
180:56 - a start
181:01 - now one thing you might have noticed is
181:03 - when i disabled and re-enabled what it
181:05 - was doing is doing something with
181:06 - symbolic links
181:09 - you can see it created a symbolic link
181:13 - so etc system ct
181:15 - system d
181:16 - system
181:18 - multi-user target wants sshd service
181:23 - so currently my run level is multi-user
181:27 - target
181:29 - multi-user
181:31 - so
181:32 - in this directory
181:33 - there is a list of symbolog links
181:36 - that
181:37 - include the sshd
181:39 - dot service symbolic link and they link
181:42 - over to another place on the system
181:46 - user live
181:47 - system sshd.service
181:50 - which is where the service scripts are
181:52 - actually located
181:55 - so we'll be looking at that a little bit
182:01 - so will the services be running after
182:05 - the machine all you need to do is figure
182:07 - out
182:08 - if they are enabled
182:10 - and you can change that using the
182:12 - system ctl enable or disable commands
182:15 - and you can start and stop them with the
182:17 - system ctl start stop and you can use
182:19 - restart as well
182:24 - so how does the system
182:25 - use the scripts where this group stored
182:28 - what is contained in the scripts and
182:30 - what does it mean
182:33 - well
182:34 - so
182:35 - when you go over
182:37 - and you look at these scripts so let's
182:39 - take a look over them
182:42 - first we'll go over to the edc directory
182:46 - system
182:49 - d
182:50 - system
182:51 - and then multi-user
182:52 - [Music]
182:54 - target wants
182:57 - i can see there are a lot of symbolic
182:59 - links and these links link over to my
183:02 - actual scripts
183:04 - and these are the services that start
183:07 - in older
183:09 - startup processes
183:11 - so we have a system d right now but
183:13 - before that we had init and it had this
183:16 - thing where each
183:18 - each service had a
183:20 - number and that number indicated the
183:23 - order in which it was started
183:25 - and so that was great you just need to
183:26 - make sure you know which number your
183:28 - service needed and it would start before
183:32 - things that required it and it would
183:34 - start after things that it required
183:37 - so just figure out what number they had
183:38 - and you put it in the right place
183:40 - this is different with system d now it
183:43 - can look at the dependencies in there
183:46 - so if you think about the sshd
183:49 - service
183:50 - what does it need well
183:52 - it's a
183:54 - secure shell that you use to log in over
183:56 - the network so what does it need in
183:58 - these to have networking working right
184:01 - so we cut out the sshd.service
184:06 - it
184:07 - shows us this is our openssh server
184:10 - daemon
184:11 - it's got some documentation information
184:13 - it has to be started after
184:14 - network.target
184:16 - and the shd
184:18 - keygen service so it needs to actually
184:20 - have a key in place it wants the sshd
184:23 - keygen service
184:25 - and then it's got all these other pieces
184:26 - of information
184:28 - tells you things like how to start it
184:29 - how to stop it
184:31 - and that's all used by the system
184:34 - ctl command when it starts and stops
184:37 - things to make sure that things are
184:38 - ready
184:39 - also when you're doing
184:41 - when you're enabling it and you're
184:43 - booting it from the beginning it will
184:47 - take a look at these things and figure
184:49 - out which services need to be started in
184:50 - which order and calculate out that
184:52 - little tree and then start things in the
184:54 - order to make them work
184:59 - all right
185:05 - netstat how do i know if my services are
185:07 - really running well we've started the
185:09 - sshd service
185:11 - and system ctl tells me that sshd is
185:14 - running
185:15 - but is it really running we know that
185:18 - the ssh service listens on port 22.
185:23 - so
185:24 - we want to figure out
185:26 - if it's listening on 422
185:30 - so let's go and take a look so if i type
185:32 - in netstat
185:35 - it lists all this stuff
185:36 - and you can use different uh
185:38 - letters so i want to make sure i use my
185:41 - tcp and udp and
185:44 - i want numbers instead of names and all
185:47 - of them so i do tuna
185:49 - nest at minus tuna
185:52 - and then i can see this right here
185:56 - my ssh service is running on this right
186:00 - here
186:03 - which is useful information
186:05 - because i can tell oh ssh is
186:08 - listening on all ipv4 interfaces
186:12 - and it is port 22 and it's in listening
186:15 - state
186:16 - i can also look at this thing right here
186:17 - and says it's also listing on ipv6
186:21 - interfaces
186:22 - it's all those
186:24 - and it's in a listening state
186:28 - if i want to see a little bit more
186:29 - information i can add the p option which
186:31 - will show me which processes are
186:36 - running these things
186:37 - so i can see that the
186:40 - ssh service right here
186:42 - is using the sshd
186:44 - process
186:46 - and you can see the same exact
186:48 - process id number and program name
186:50 - is running on the ipv4 version right
186:53 - there
186:54 - so ibv6 and ib4 are both running they're
186:56 - both tcp i don't see anything with udp
186:59 - but i can see other processes here that
187:01 - are running
187:03 - and what's going on
187:12 - so how do i know if there are any
187:13 - current connections well there aren't
187:15 - any current connections right now but if
187:16 - there were
187:18 - you would see something about
187:19 - established connections
187:21 - not just the listening because this
187:23 - right now is just listening but no one's
187:25 - trying to connect to the ssh service
187:30 - nmap
187:31 - are my services
187:33 - visible from localhost well that's an
187:35 - interesting question
187:37 - so let's go back and take a look
187:40 - so
187:41 - if i do a yum install
187:43 - and map
187:45 - and i recommend nmap to anybody who
187:47 - wants to be a decent administrator it
187:50 - was considered originally kind of a
187:52 - hacking tool because you can scan ports
187:55 - and things like that but
187:58 - now it's useful for other things too so
188:00 - nmap
188:01 - localhost
188:05 - and then it comes back and says oh
188:07 - when i did a scan on localhost these are
188:09 - the ports that responded
188:13 - so one thing you want to pay attention
188:14 - to is it says not shown and it says
188:17 - closed ports
188:19 - so what are closed boards closed boards
188:21 - reports that when i tried talking to the
188:23 - ports
188:24 - the kernel respondents said these ports
188:26 - are not open
188:28 - and that means they got past the
188:30 - firewall
188:32 - then i got this thing right here where
188:34 - it says
188:35 - these ones right here are open
188:38 - okay so ssh is open
188:41 - smtp is my mail service and it's open
188:44 - for at least a localhost so local
188:46 - connections rpc bind is for
188:50 - some things like network file system and
188:54 - nis
188:55 - you know some of these things and then
188:56 - there's the
188:57 - printing thing right here so ipp for
189:01 - your internet printing that is actually
189:03 - run by the cups service
189:06 - now if i say well what's my ip address
189:09 - if i do ib adder you can see my ip
189:12 - address it's kind of hidden in here
189:15 - and it is the 10.0.2.15.
189:18 - so i want to scan that one so nmap
189:21 - 10.0.2.15.
189:26 - since i'm on my own machine you'd expect
189:28 - to see the same things right
189:30 - well
189:31 - not quite
189:32 - some of these things are only listening
189:34 - on
189:35 - localhost
189:37 - so the mail service proc mail was only
189:40 - listing on localhost
189:42 - and
189:43 - the print service was only listening
189:45 - local host but rbc bind
189:48 - and ssh are both listing on the external
189:51 - interface as well
189:56 - so what would i see from the outside i
189:58 - would see anything that gets through the
189:59 - firewall
190:01 - so ssh is currently getting through the
190:02 - firewall that's the default
190:03 - configuration but rpc bind would not get
190:05 - through the firewall so externally all i
190:07 - would see is the
190:09 - stuff getting through the firewall
190:13 - so let's go ahead now and take a look at
190:15 - what a different machine would see
190:19 - so switch over machine and right here i
190:22 - can use nmap
190:24 - to scan 10.0.2.15
190:28 - and very ways through
190:31 - so what we'd expect to see is
190:34 - the ssh service getting through and
190:36 - that's all we see
190:38 - notice how it doesn't say close ports
190:40 - right now it says
190:42 - not shown 99 filtered ports
190:46 - that's interesting
190:49 - so
190:50 - what does that mean it means that the
190:52 - rest of them didn't actually send a
190:54 - response back
190:57 - so
190:58 - that means there's a firewall
191:06 - scheduling tasks how do i schedule tasks
191:09 - well you can use the cron tab service
191:13 - and there are different places you can
191:15 - look at for
191:17 - scheduling tasks the most common is
191:20 - using the crime tab minus e option
191:24 - so let's take a look at that
191:26 - so
191:28 - clear this out let's go down to var
191:33 - spool
191:38 - so if i go to var spool cron i can see
191:41 - in this there is nothing here
191:43 - if i do cron
191:45 - tab minus e
191:48 - it will use your default editor and you
191:50 - can go and put something in here
191:52 - so you can put in a bunch of different
191:53 - numbers
191:54 - so if i want something to run every
191:56 - minute
191:58 - i could do this
192:00 - right here and then i can type in some
192:02 - command now one thing to keep in track
192:05 - of is that cron
192:08 - when it runs
192:09 - it does not necessarily run with the
192:11 - exact same environment that
192:13 - your user logs in and runs as that means
192:16 - that file locations and executable
192:19 - locations might not match exactly
192:22 - so you usually want to
192:25 - pass in
192:28 - the
192:29 - not just relative but the absolute path
192:31 - names for everything
192:34 - so what i wanted to do
192:36 - um
192:37 - let's find a
192:39 - control z switch no can't do that
192:42 - let's go ahead and leave a comment here
192:46 - and let's figure out what command we
192:47 - want to run
192:50 - so we
192:52 - write and quit and if i type in a
192:54 - command right now
192:56 - like
192:58 - ls
193:00 - it tells me
193:01 - what's in my directory
193:04 - and if i do
193:07 - which
193:10 - actually that's the part of bash
193:12 - which uh we'll say
193:15 - it's really an alias
193:17 - um but let's try this uh
193:20 - user
193:21 - bin ls
193:23 - so if i type in user bin ls
193:25 - and go back to my cron tab
193:30 - try to have minus e for edit
193:32 - and then
193:33 - i for insert mode
193:36 - i user bin
193:39 - ls
193:42 - then i can
193:46 - write this and it will install a new
193:48 - cron tab
193:49 - and if i take a look at my current
193:50 - directory
193:52 - there's this thing called root if i cut
193:54 - it out
193:56 - you can see it is that text file i just
193:58 - edited
193:59 - and now
194:02 - i may put it here in my
194:05 - varsitron directory
194:07 - didn't have to put it here
194:08 - but it does because that's where it puts
194:10 - all the cron tab files
194:12 - it's not just because i'm in this
194:13 - directory it's because this puts them
194:16 - so now it's supposed to be running every
194:17 - minute
194:20 - so you can see that in about 12
194:23 - and about 30 seconds they'll run again
194:25 - so then what were all the stars i put
194:27 - five stars there
194:29 - so i look at my crime tab
194:33 - information
194:35 - you can see all this stuff here it says
194:38 - here you go there's a bunch of stuff
194:40 - about using cron tab to get in here
194:43 - if we want to see more information and
194:45 - actually see what these things are
194:47 - we look at not the crime tab file not
194:49 - the crime tab executable but the
194:51 - information page so i can do man
194:55 - 5 cron tab
194:58 - and now it will tell me the information
194:59 - about how to set up cron
195:02 - so i scroll down and it says okay there
195:05 - are five fields the first one is your
195:08 - minute field
195:09 - which if i put star there it means every
195:11 - minute
195:12 - if i put
195:14 - a number there it would mean that minute
195:16 - so if i wanted to run on the hour every
195:18 - hour i put a zero there
195:21 - and then if i wanted to run
195:23 - maybe every day at midnight i could put
195:26 - zero zero
195:28 - and then three stars
195:29 - then i can limit things like the day of
195:31 - the month i can pick which day of the
195:33 - month from 1 to 31.
195:36 - some of these days of the month might
195:38 - not be hit
195:40 - 31 might not show up for every month
195:42 - so maybe you run things on the first day
195:44 - of the month or maybe some random day in
195:46 - the middle of the month you can pick
195:47 - which month
195:49 - 1 1 12. you can also pick the day of the
195:51 - week which is 0-7 so 0 and 7 are both
195:55 - sundays
195:57 - there's also other combinations you can
195:59 - do commas to separate multiple different
196:01 - things and
196:02 - you can do slash
196:04 - things i usually do things like
196:07 - star slash three for every three minutes
196:10 - or hours
196:12 - that can be useful all right
196:14 - so now if i look at my date right now i
196:17 - can see that some time has passed so the
196:20 - ls command should have run multiple
196:22 - times
196:24 - so if i go over my mail
196:27 - our
196:28 - school mail
196:32 - i can see there is a root file and if i
196:34 - count my root file right there
196:37 - i can see all the mail
196:39 - and
196:42 - it's probably generating something but
196:45 - maybe not
196:48 - sometimes when you have a crying job
196:49 - that runs it produces mail
196:51 - so just be aware of that
196:54 - all right so that's how you schedule
196:56 - tasks
196:57 - as a normal user or as the root user
197:00 - there's also the etc
197:02 - cron
197:06 - directories so there's etc crime.d for
197:09 - your configurations crime.daily current
197:11 - hourly monthly weekly something wants me
197:13 - to run every day
197:14 - i can do crime daily
197:19 - and in this chron daily i can see that
197:22 - these three commands are running every
197:25 - day
197:26 - it doesn't tell me when they're going to
197:28 - run but they're on every day
197:30 - and now it says i have mail in my
197:32 - directory
197:34 - or root
197:36 - notes full so i cut out this root thing
197:46 - it looks like it is running again
197:49 - and you can actually see this is
197:51 - actually output from the ls command it's
197:53 - running in the root directory and these
197:55 - are files in the root directory
197:57 - it doesn't matter where i'm at right now
198:00 - if i look at the
198:02 - root directory i will see the same files
198:05 - but it's running it
198:07 - slightly different
198:09 - it's not running it the same exact way
198:12 - but you can see how it's slightly
198:15 - different when it runs versus when i run
198:17 - it by hand
198:20 - all
198:20 - right so that's scheduled tasks
198:27 - how do you know if a cron job runs well
198:28 - you don't necessarily know if it runs if
198:30 - it produces no output but if it
198:33 - does produce output then
198:36 - you can see it right there in the mail
198:39 - so firewalls
198:40 - what firewall is used in my system
198:43 - well
198:44 - it depends on which system you have but
198:46 - it's changed quite a bit
198:48 - when i first started using
198:50 - linux
198:51 - the red hat
198:53 - distribution i was using had ip chains
198:56 - which was later replaced by iv tables
199:00 - and now we are in
199:02 - centos 7
199:05 - which is a little bit different it uses
199:07 - ib tables kind of in the background but
199:09 - it really has firewall d as a front end
199:12 - to it
199:13 - so it uses kind of both
199:16 - things there
199:17 - firewall these kind of a front end to
199:19 - manage it
199:21 - but in
199:22 - centos 8 they are switching out
199:25 - firewall d and going something different
199:27 - so just keep that in mind
199:29 - they keep changing back and firewall
199:32 - so
199:33 - firewd
199:35 - is what's used on my system but you can
199:37 - use ip tables as well
199:39 - how do i see the current firewall
199:40 - configuration well you can use the
199:44 - firewall cmd command to look at it so we
199:46 - can look at that how to open ports and
199:48 - services
199:49 - and figure out which services are
199:51 - supported and how i do a permanent
199:53 - service what that means
199:56 - okay
199:57 - so
199:57 - let's go back to my home directory
200:03 - if i do firewall
200:06 - wall dash cmd no space there dash
200:10 - list
200:11 - all
200:12 - like that it will list which services
200:16 - are allowed through the firewall
200:18 - this is the active current services
200:20 - getting through you'll also notice
200:22 - notice this is the public
200:24 - firewall rule
200:26 - and we can see the ssh service is
200:28 - getting through and we know that was
200:29 - getting through because we already did
200:30 - an end map
200:31 - and we can see this dhcp v6 client
200:35 - service is allowed through which means
200:37 - if i'm running as a dhcp client
200:40 - then
200:42 - i'm allowing responses from the dhp
200:44 - server to come back into me and tell me
200:46 - what my ip address is
200:49 - so that's important nice things to know
200:53 - what if i want to add a service so i do
200:55 - firewall
200:58 - cmd
201:00 - add
201:01 - service
201:03 - equals http
201:05 - so add the web service
201:07 - it says it's successful and
201:10 - i think okay that's great
201:12 - but if i reboot my system it will no
201:15 - longer be in
201:18 - in my firewall because this is an active
201:21 - only change if i wanted to be permanent
201:23 - i would use a dash dash permanent
201:25 - but let's take a look at what this does
201:27 - since i'm not running a web server
201:30 - what if i jump over here for a machine
201:32 - and scan it myself again
201:34 - so i jump over here and i scan myself
201:36 - again and i can see that the ssh service
201:39 - should still be open
201:41 - but now i should say something different
201:42 - about http
201:44 - it says http is closed which means that
201:47 - the firewall is open
201:50 - but
201:52 - the service is not running
201:55 - so keep that in mind that's what that
201:57 - means
202:00 - i just probably top stopped my crown job
202:01 - so if you cron
202:03 - tab minus e
202:05 - and i can just do
202:07 - d equal times and
202:09 - quit there we go
202:11 - all right
202:14 - so
202:15 - where are these rules stored
202:19 - and how does that all work
202:21 - well
202:22 - if i do
202:24 - i added the http
202:26 - firewall service if i wanted to get
202:28 - something else
202:30 - what do i have
202:32 - well i can do a
202:35 - firewall
202:38 - all
202:40 - cmd
202:42 - get
202:43 - services
202:45 - and that will list a complete list of
202:47 - all of the known services
202:50 - so that's quite a few of them
202:52 - so how do i make it all work well i
202:55 - figure which service i want and then i
202:57 - have to turn on that service what do
202:59 - these services do
203:03 - well
203:05 - we can probably assume that when i turn
203:06 - on the http service it turns on the port
203:10 - for http which is port 80.
203:13 - and we probably saw that when we were
203:14 - looking at map we just didn't pay
203:16 - attention to it
203:18 - so
203:20 - now what do we do
203:23 - well
203:24 - we can now take a look at
203:27 - some more information here and see
203:30 - where does this actually get stored
203:34 - so i take a look
203:36 - and we look at
203:39 - the user
203:40 - [Music]
203:43 - lib
203:47 - firewall d
203:49 - and you can see there's a bunch of stuff
203:50 - here
203:51 - and one of these things is the services
203:53 - directory so if i look in there
203:56 - i can see the exact same list of
203:58 - services
203:59 - but what does ssh do
204:01 - so i can cat out one of these services
204:05 - at
204:06 - ssh
204:08 - and i can see
204:10 - it says that i'm going to allow
204:13 - http i mean program i need to start up
204:16 - ssh it will be tcp port 22.
204:20 - if i want to look at something different
204:21 - like dns
204:23 - what does it do
204:26 - well it does two different things it
204:28 - does
204:29 - tcp port 53 and udp 453
204:33 - so most queries
204:36 - when you're doing dns lookups are udp
204:39 - but if you're doing a zone transfer it
204:41 - does tcp
204:43 - so you could modify this or change if
204:44 - you wanted to i wouldn't recommend it or
204:47 - you can also add new services here just
204:49 - put in the
204:50 - information
204:52 - right here
204:55 - so
204:56 - we can see what services there
204:59 - now
205:02 - what else do we have if we look at the
205:05 - etc directory
205:07 - there is a firewall
205:10 - d
205:11 - thing
205:13 - and in here there is
205:15 - zones and public
205:18 - so there is a zones public file if i
205:20 - look at this thing right here i can see
205:22 - some information it says that
205:24 - ssh
205:26 - and dhcp
205:28 - version 6 client
205:31 - are both listed in this file
205:33 - what happens if i add something
205:35 - permanently
205:36 - so i added the
205:39 - http service now i do permanent
205:45 - and i look at that same file again
205:48 - and you can see that it's been added to
205:49 - the file at the bottom
205:52 - this does not make it active it means
205:54 - the next time the firewall service will
205:56 - start up it will add that to the
205:57 - firewall
205:59 - if i remove it from
206:01 - this permanent thing so
206:05 - let me do
206:07 - dell service
206:09 - nope not dell it's removed
206:13 - remove service
206:14 - it removes it from the permanent but it
206:16 - is still in the active so i do firewall
206:21 - cmd
206:24 - list all i can see what is currently
206:28 - active
206:29 - and if i want to see what is in the
206:30 - configuration file i can look at the
206:32 - file or i can add the dash permanent
206:37 - to it and see what is in the
206:39 - configuration file so you can see
206:40 - actively we have all three of these
206:43 - in the permanent we only have
206:45 - these
206:47 - two
206:49 - so that's interesting to pay attention
206:51 - to and be aware of
206:55 - so where are the firewall files stored
206:58 - we just saw that
207:00 - can the firewall be updated using the
207:02 - files yes you can update it using the
207:04 - files you might need to restart the
207:06 - service but
207:08 - i'll assume and can you add additional
207:10 - services yes you can
207:12 - so you can go in there and just create
207:14 - new services just use the same file
207:16 - format and create them too
207:19 - and that is
207:23 - services
207:24 - let's look at ports and then we'll be
207:26 - done
207:27 - so a ladder here let's say i want to add
207:30 - port one two three
207:32 - what is it i don't know but we'll add it
207:34 - anyway so we do firewall
207:37 - we did add
207:39 - service
207:40 - equals something to add a service and if
207:42 - you want to do a specific port you can
207:44 - do add port
207:46 - then you have to figure out what's the
207:47 - format well you gotta remember if it's
207:48 - tcp
207:50 - slash one two three
207:52 - or if it's one two three
207:55 - slash tcp
207:57 - and one of them will probably work
208:00 - so you try both
208:02 - and figure out which one works
208:04 - in this case i did the one two three ccp
208:07 - and i added it it's not permanent so if
208:09 - i restart my firewall
208:11 - it will be gone
208:12 - so let's take a look at that so if i
208:14 - list my
208:16 - list all
208:17 - i can see there is a
208:20 - port section and ports are listed if i
208:21 - reset my firewall
208:26 - i should just use system ctl
208:29 - restart
208:31 - firewall
208:32 - d
208:34 - now if i look at the same thing again i
208:37 - can see the port is now gone
208:42 - you can also do the remove port as well
208:45 - just remove it the same way you add the
208:46 - ports
208:48 - and that is the end of this
208:51 - lecture
208:55 - processes and resources
208:58 - what is a process
209:00 - what is the thread
209:02 - how are processes and threads different
209:05 - a process is basically a program
209:08 - what happens in the cpu
209:11 - is there is a
209:13 - program counter
209:14 - and there's some memory and so what
209:16 - happens is the program gets loaded into
209:18 - memory and then the program counter
209:21 - tells the cpu which part of that memory
209:24 - is looking at which process or which
209:26 - operation is going to do next
209:28 - and so that process counter continuously
209:30 - moves through and
209:33 - then the cpu execute these commands
209:36 - so each one of these programs gets
209:38 - loaded into memory is a process
209:41 - within those processes you might have
209:44 - different pieces of execution
209:47 - and those different pieces of execution
209:49 - within the same process
209:50 - can be called threads so if you have
209:54 - a process that has threads what really
209:57 - happens is your process is running
210:00 - and your process switches between the
210:02 - different portions of the process
210:05 - to do different things
210:07 - it's very common
210:09 - to have
210:11 - some larger applications have
210:14 - multiple
210:15 - threads and even some of them are
210:17 - starting to have multiple processes
210:21 - games were pretty common to have
210:22 - multiple threads back in the day they
210:24 - still have multiple threads
210:26 - and the idea is that maybe you want to
210:29 - have your audio
210:31 - b1 thread
210:32 - your gui be a different thread
210:35 - and some of your game logic be different
210:37 - thread
210:38 - so your audio can continuously run
210:42 - and not have to wait for it to make
210:44 - other decisions about
210:46 - game logic
210:47 - while you're
210:48 - playing your game
210:50 - and
210:51 - one of the big changes with
210:54 - the chrome web browser was they decided
210:56 - that there were too many problems with
210:59 - one tab would crash and take down the
211:02 - entire browser
211:03 - so
211:04 - chrome decided to break it out
211:07 - and have each tab be a separate process
211:09 - they've changed a bit since then but
211:11 - originally that was the idea so that if
211:13 - one crash that tab could crash and the
211:15 - rest of the tabs could stay alive
211:18 - so processes when they crash
211:21 - they can take down a lot
211:24 - threads when they crash well
211:27 - sometimes things continue to run
211:28 - sometimes it depends on how they crash
211:30 - what happened if it crashes the whole
211:33 - process goes down if it somehow gets in
211:35 - an infinite loop then that portion of
211:37 - the right can just loop forever and the
211:39 - rest of it might
211:42 - stay live keep going
211:46 - so that's basically processes and
211:48 - threads and how they're different so
211:50 - then what is a multi-core cpu
211:53 - well
211:54 - there's this whole thing about moore's
211:56 - law where
211:58 - the
211:58 - speed of cpus doubles every certain
212:01 - number of months or years
212:03 - and
212:04 - things kept getting faster and faster
212:05 - and faster and then they ran into this
212:07 - problem
212:08 - the problem was that
212:11 - when you get things small enough
212:13 - it doesn't really work out so well so
212:15 - they were making
212:17 - all these cpu pieces smaller and smaller
212:20 - and smaller
212:21 - and
212:22 - when you have electricity going through
212:24 - a cpu
212:26 - at some point the electricity jumps
212:28 - across and
212:30 - breaks things so you have two wires
212:31 - right next to each other
212:33 - and there's a really high charge then
212:35 - they'll create some kind of a lightning
212:36 - bolt playing a little electric
212:38 - electricity
212:40 - charge between the two of them
212:42 - and that can can destroy stuff
212:44 - so what do you do well
212:46 - your electricity is basically watts but
212:50 - your watts are either going to be amps
212:53 - or volts
212:55 - so amps
212:57 - create heat and resistance and fun
213:00 - things like that and volts
213:02 - they create your arcing jump
213:05 - so as you take your larger cpus and you
213:09 - shrink them down
213:11 - you have to
213:13 - worry about these volts jumping across
213:15 - so what you do is you convert your volts
213:17 - into amps
213:19 - so that's kind of nice it means that you
213:21 - can go
213:22 - much stronger
213:23 - [Music]
213:25 - but not have to worry about it jumping
213:27 - across the problem is then your cpu
213:29 - heats up more
213:31 - so it's kind of a trade-off if you have
213:33 - a higher number of
213:36 - amps your cpu overheats if you have a
213:38 - higher number of volts
213:40 - the
213:41 - [Music]
213:42 - charges jump across and destroy stuff
213:44 - inside of your cpu
213:46 - so when i first got into computers cpus
213:50 - could handle something like 200 volts
213:53 - and then it got down to like 50 volts
213:55 - and now it's probably even lower
213:58 - before they start causing problems and
214:00 - they're always worried about this
214:01 - electrostatic discharge problem
214:04 - so what does this have to do with
214:05 - multi-core well they discovered we don't
214:07 - have to make smaller and smaller cpus at
214:10 - some point they're kind of small enough
214:12 - and so what we need to do is now have
214:15 - more cpus
214:16 - on the same cpu
214:18 - so they create these multi-core cpus
214:20 - dual core then quad core and some people
214:23 - even through like three core cpus and
214:25 - then six and eight and
214:27 - well 3 and 6 are basically because they
214:29 - fail in a couple but that's okay
214:31 - anyway so the idea is you get these
214:33 - multi-core cpus
214:36 - with multiple different cpus on the chip
214:39 - and that is what a multi-core cpu is
214:41 - it's a cpu with multiple different
214:44 - cpu cores
214:47 - on the chip
214:49 - so what does it mean when a cpu has
214:51 - hyper threading
214:53 - well we talked about processes and we
214:55 - talked about threads basically
214:58 - the idea with hyper threading is that
215:00 - your cpu tells the hardware the rest of
215:02 - the hardware it has more than one
215:04 - core
215:06 - so if it's a single core multi or hyper
215:09 - threaded cpu
215:11 - then it will tell the computer it might
215:13 - have two
215:14 - cpus on the chip
215:16 - and so the computer sends two different
215:17 - processes one to each one of its
215:20 - virtual cpus
215:22 - and then these virtual cpus both have a
215:23 - little bit of memory and a little bit of
215:25 - other information there
215:26 - and it only has one actual cpu
215:30 - but the chip
215:32 - can then switch between them very
215:33 - quickly
215:34 - and so it simulates two
215:37 - just switching back and forth very
215:38 - quickly without having to worry about
215:40 - the operating system keeping track of
215:42 - which processes are where
215:44 - it just sends them both there and
215:45 - they're both handled
215:48 - without
215:49 - the operating system needing to copy
215:52 - things out of memory and move new things
215:54 - into memory what it does with other
215:57 - multi
215:58 - multi-process type operating system
216:01 - tasks
216:04 - so you can have both a multi-core and a
216:06 - hyper-threaded
216:07 - cpu
216:08 - so you could have something like a
216:10 - quad-core cpu where all of them
216:11 - hyper-threaded so instead of showing up
216:13 - as
216:14 - quad or four it shows up as eight cpus
216:17 - which could be nice
216:19 - it makes it so you can run things faster
216:22 - but
216:24 - in
216:25 - a hyper threading situation you still
216:27 - only have one process running at a time
216:31 - in a multi-core situation you have
216:33 - multiple processes that can actually run
216:35 - simultaneously
216:37 - so then that brings us down to the next
216:39 - thing what is a race condition
216:42 - well a race condition is when you have a
216:45 - situation where the outcome
216:47 - is determined by
216:49 - what happens and what order
216:52 - so i like to think about the atm example
216:55 - say for a moment you have an atm machine
216:57 - and you want to make a 100
216:59 - withdrawal from the atm machine
217:02 - if you go to the atm machine put your
217:04 - card in there and withdraw a hundred
217:05 - dollars you get 100
217:07 - taken off your account and you get 100
217:10 - it comes out of the machine
217:11 - but what happens
217:13 - if at the exact same time you are making
217:15 - withdrawal you have a direct deposit
217:18 - let's say that you have a job you get
217:20 - two hundred dollars deposited into your
217:21 - account
217:24 - so
217:25 - the question is well does it matter what
217:28 - order you process these things in
217:31 - so what does an atm machine do
217:33 - well first it reads your account balance
217:35 - it sees you have the hundred dollars
217:38 - it
217:40 - takes the hundred dollars subtracts it
217:42 - from your account
217:43 - and then it
217:44 - sends you the hundred dollars
217:47 - now the direct deposit might look at
217:49 - your account figure out how much you
217:52 - have
217:53 - might add your 200 deposit into your
217:56 - account number and write it back to your
217:57 - account
217:59 - so what happens if they both read at the
218:01 - same time so they both find out your
218:03 - account balance
218:05 - one
218:06 - subtracts 100
218:08 - one adds 200
218:09 - and then they both write back well then
218:12 - it matters which one wrote back first as
218:14 - to what your account balance is going to
218:15 - be
218:17 - so that is a race condition
218:20 - obviously the ideal situation for you
218:23 - would probably that
218:25 - you withdraw the money at the exact same
218:26 - time the direct deposit goes in and the
218:28 - direct deposit reads and then
218:31 - the atm machine reads
218:33 - and your direct deposit is the one gets
218:35 - written after the atm gets written which
218:38 - means that instead of having
218:40 - a
218:41 - net of 100 more dollars you'd have a net
218:44 - of 200 more which would be great
218:46 - the bank probably not like that though
218:49 - okay
218:54 - how do i know which processes are
218:56 - running
218:57 - well on a linux machine you can look at
218:59 - which processes are running you can
219:00 - actually do on other machines too pretty
219:02 - much all of them have a way to look at
219:03 - the processes running
219:06 - and the easiest way to do that is with
219:07 - the ps command
219:09 - it'll show you the processes are running
219:12 - you can have processes that are running
219:14 - in the background
219:15 - and processes that are running in the
219:16 - foreground
219:18 - so a background process
219:20 - is one that runs and doesn't send out
219:23 - input to your output to you and things
219:25 - that is just running in the background
219:28 - a foreground type process is if you have
219:32 - a terminal or something open and you're
219:33 - running a program
219:35 - you will see
219:37 - um text print at your screen you'll be
219:39 - typing things those are in the
219:40 - foreground
219:42 - background you don't see anything
219:44 - or you rarely see anything
219:46 - so
219:47 - how do you get into background processes
219:49 - well you can actually pull them in the
219:50 - foreground
219:52 - and you can disconnect output and things
219:55 - like that and all be taken care of
219:58 - so
220:00 - let's take a look at
220:02 - a machine
220:04 - so here we have a client machine
220:07 - and i'm going to
220:09 - run the ps command so i type ps i can
220:12 - see these are two commands that are
220:14 - running
220:15 - the bash command which is my shell so
220:18 - my terminal opens up it's a terminal
220:20 - window inside the terminal window we
220:22 - have this
220:24 - program running that allows me to type
220:25 - in commands and then it runs them that
220:28 - is my bash
220:29 - shell
220:30 - and the command i just typed in is ps
220:33 - and so it says well bash is running and
220:36 - ps is running
220:38 - if i type it again see that bash is
220:40 - running and ps is running
220:43 - now what you might notice is that the
220:45 - process id number for bash stays the
220:48 - same because it's the same shell
220:50 - but my ps command is different because i
220:53 - started one command and it printed out
220:55 - the output and then ended
220:56 - then i started the next one it printed
220:58 - out the output and it ended
221:02 - so how do i start a background process
221:04 - well
221:05 - let's try the sleep command sleep
221:09 - if i type in sleep 5
221:11 - it will wait 5 seconds and then the
221:13 - command will end and it will return back
221:15 - to my terminal
221:17 - i can do sleep 5 ampersand and start as
221:20 - a background process and it immediately
221:22 - gives me control of my
221:24 - shell again
221:26 - but it's still running
221:28 - if i press enter again it says oh it's
221:30 - done by the way
221:31 - all right so if i want to sleep for much
221:33 - longer than that let's say i want to
221:35 - sleep for
221:36 - five minutes
221:38 - i can do sleep 300 and it starts in the
221:40 - background and you can see there's
221:42 - something here it also says that
221:46 - there's a process number
221:47 - five
221:49 - zero four seven if i have a ps i can see
221:52 - that five zero four seven is the sleep
221:54 - command and it is running
221:56 - i can also see that my bash is running
221:58 - and my ps is running if i want to i can
222:01 - type in
222:02 - jobs
222:03 - job says that number one
222:06 - is running
222:08 - i can bring this to the foreground if i
222:10 - want
222:12 - by typing in fg
222:14 - and that will take the default one but i
222:16 - can also do fc1 pull in the number
222:20 - so now it's running the foreground
222:22 - if i want to put it back in the
222:23 - background i can type in ctrl z which
222:26 - will stop it
222:27 - so now it's not doing anything
222:29 - and then i can do a
222:31 - jobs command again to see what it is and
222:33 - it says oh it stopped by the way
222:35 - so i can do a bg
222:37 - one and start it back up again
222:40 - in the background
222:44 - if i want to end the process well i can
222:46 - do that too
222:48 - but i need to figure out what process i
222:49 - have so i like ps and say okay
222:52 - my sleep command is five zero four seven
222:58 - so there are a couple ways to stop the
223:00 - process one is
223:02 - i can bring it to the foreground and
223:04 - press ctrl c to kill the process
223:07 - or i can use the kill command so we look
223:10 - at the
223:11 - kill command and kill
223:13 - it says terminate a process
223:16 - and it says
223:17 - i have to do
223:18 - pipe pipeline kill and then i give it
223:21 - some signal number if i want and then
223:24 - there's a pid number
223:26 - and all these things here
223:27 - you say well that's great
223:30 - so
223:31 - i can also look at other things like
223:34 - well there's a kill two oh that's
223:36 - interesting kill two means it's probably
223:39 - tied to the programming language kill
223:42 - then i got things like signal seven
223:44 - which is probably more informational so
223:46 - do man seven
223:49 - sig null
223:52 - and it says okay here's some information
223:54 - about how these signals work
223:56 - and it says okay here are some signals
224:00 - and you get some impression okay so what
224:02 - does it do
224:04 - well if i do a
224:06 - kill
224:07 - then it's going to send one of these
224:09 - signals it's going to send this
224:11 - sig term signal over
224:14 - so the program receives the sig term and
224:15 - it says oh it's time for me to terminate
224:18 - and that works
224:20 - however some programs don't like to
224:22 - terminate there
224:24 - because maybe they they're crashed or
224:26 - something else and they won't terminate
224:28 - so maybe you need to do it not from
224:30 - telling the program to terminate but you
224:32 - want to have
224:34 - the operating system itself kill it
224:36 - which case you will do a sig kill which
224:38 - is number nine
224:41 - so
224:42 - let's try that we can see
224:45 - once again my sleep command is still
224:47 - running so i can do kill
224:50 - and 5047
224:53 - and it says terminated
224:57 - so you do ps and you can see it is gone
225:00 - i think oh i want it back
225:02 - so now i'm going to start it back up
225:03 - again
225:05 - and i do a ps command
225:07 - you can see it's there running it's
225:08 - going to be running for another five
225:09 - minutes
225:10 - i can also do kill
225:13 - minus
225:15 - 9 or minus s9
225:18 - and then the number
225:19 - 5246
225:23 - and it says
225:25 - killed which is different from what it
225:27 - said previously which was terminated
225:29 - it's terminated
225:30 - and this one is killed
225:33 - so if you're having trouble getting
225:34 - something to stop
225:36 - use the kill command
225:37 - so once again i'm going to start this
225:39 - back up again
225:40 - now i'm going to do a fg to bring it to
225:42 - the foreground
225:45 - and i will press ctrl c
225:47 - to kill it
225:50 - now if i do a ps to see if it's still
225:52 - there i can see it is not there because
225:54 - i killed the process
225:57 - so it gives you an idea about starting
225:58 - things in the background and
226:00 - what happens there
226:02 - so the next big question is well
226:05 - what happens if i close the terminal
226:09 - well if you close the terminal it dies
226:13 - and it's gone
226:15 - so
226:16 - that can be a problem
226:17 - especially if you log into a server you
226:20 - start a process
226:21 - in the background and then you log out
226:23 - and suddenly your terminal is gone and
226:26 - the process dies how do you get that to
226:28 - work there is a no help command
226:30 - to do man no hub
226:33 - what it does is it runs a command immune
226:36 - to hang ups
226:37 - with output to a non-tty
226:41 - so you type in no hub space the command
226:43 - name and it runs it in the background
226:46 - without your intervention and you don't
226:49 - really
226:51 - yeah well it kind of keeps running kind
226:53 - of you can still kill it
226:55 - so let's start with the sleep command
226:56 - again with a no up no
227:00 - now it says ignore ignoring output
227:02 - or input and pending output to nohup dot
227:05 - out
227:05 - all right so now it's running
227:09 - if i close my window here it will
227:11 - continue running if i do a ps you can
227:13 - still see that it is running so i can
227:16 - still kill it just like i could before
227:20 - and i can do it jobs
227:23 - and suddenly you see it there so if i do
227:26 - fg i can bring to the foreground and
227:28 - then i can press ctrl c to kill it
227:32 - or i could have killed the kill command
227:35 - so i can still kill the process
227:37 - however
227:38 - it doesn't
227:42 - it doesn't die when i close my terminal
227:46 - all right
227:51 - so back to these questions how do i
227:53 - start a background process just with the
227:54 - ampersand at the end of it how do i get
227:56 - into a background process you can go to
227:58 - fg to bring it to the foreground you can
228:00 - do jobs to get an idea of which process
228:03 - is running in the background
228:05 - and then what happens when a process
228:07 - what happens to a process when terminal
228:08 - closes well it dies unless you use
228:11 - something like no up to keep it alive
228:16 - how do i know which processes others are
228:17 - running
228:18 - well other users
228:21 - who are who are they and what are they
228:22 - using
228:24 - how do i know how much resources each
228:26 - process
228:28 - so we're using so how much are they
228:30 - using and can i end running processes
228:32 - well we know we can end the processes
228:33 - because we saw the kill command
228:35 - what do i do if the process refuses to
228:37 - die just give it a stronger signal the
228:39 - -9
228:41 - is much stronger than the
228:43 - minus 15.
228:46 - so
228:47 - let's figure out what processes are
228:48 - running so i jump back into my machine
228:51 - here
228:51 - and let's take a look at my processes so
228:53 - i can do ps and it only shows me my
228:55 - processes but there's got to be other
228:57 - stuff running so do ps
229:00 - aux
229:02 - aox just a bunch of special keywords key
229:04 - letters
229:06 - anyway it displays this long list of
229:08 - processes running
229:10 - if i want to
229:12 - have a nice list to look out i can do
229:14 - type 3 less
229:15 - and i can scroll through it
229:17 - and see all the different process
229:19 - numbers what they are
229:21 - who's running them you can see there are
229:23 - other users here as well
229:26 - well mostly root
229:28 - but you know there are are users here
229:30 - like the
229:34 - i don't know like the
229:35 - gdm it's just your your login manager
229:38 - thing
229:39 - caller d and postfix which is your mail
229:42 - server so all these things are running
229:45 - and some have user accounts for it
229:48 - and at the top you can see the user
229:49 - running it
229:50 - you can see the process id number the
229:52 - amount of cpu they're using the amount
229:54 - of memory they're using
229:56 - and then there's a bunch of other stats
229:57 - here
230:00 - and the last thing over here is the
230:02 - command that was used to start it
230:05 - well kind of it's not always exactly
230:07 - that way
230:09 - so i can go ahead and kill any of these
230:11 - processes with the process id number i
230:13 - can also use another command top
230:16 - top
230:17 - is a more active
230:20 - dynamic list of processes running so you
230:22 - can see which processes are running and
230:25 - what's going on
230:27 - it tells you how much memory is being
230:28 - used
230:30 - the totals number of processes number
230:32 - running processes sleeping processes you
230:35 - see that most of the processes are
230:36 - sleeping at any given time
230:40 - that's what they mostly do there's this
230:42 - sleep
230:43 - and you can see how much you're using
230:45 - how much
230:46 - cpu how much memory and you can sort
230:48 - things we don't really know how they're
230:50 - being sorted right now but you can use
230:52 - the greater than or less than commands
230:54 - to
230:55 - keys to
230:56 - shift how it's sorted
230:58 - so how is it being sorted well if i go
231:00 - all the way over
231:03 - it's now being reversed sorted by
231:06 - process id number and i can go
231:10 - now over to user then
231:13 - pr then ni
231:15 - ni is the nice level so
231:17 - how aggressive it is in running this
231:19 - event
231:21 - and ver
231:22 - res
231:24 - sure
231:25 - s cpu
231:26 - so now it's ordered by the highest cpu
231:29 - down to the lowest cpu
231:30 - and i can switch over to memory from the
231:33 - highest memory down to the lowest memory
231:36 - so
231:37 - you can do lots of different things you
231:38 - can also press other keys such as k if i
231:41 - wanted to kill a process
231:43 - um
231:44 - so let's press ok
231:47 - and it says well there is this default
231:49 - process some number one at the top if i
231:52 - kill my known shell then that will
231:53 - probably log me out i don't want to kill
231:56 - that one i want to kill the top command
231:57 - so i do five four two seven
232:04 - and it says do i want to use the say
232:06 - term yeah we'll see yeah sure
232:09 - so happens the top command now ends so
232:12 - that was a quick way to end it right
232:14 - i could have just pressed
232:16 - q as well q to quit out that's okay
232:20 - but you can see how this works and you
232:21 - can see which processes are running on
232:22 - the system and what resources are being
232:24 - used
232:25 - by the
232:27 - on these processes
232:33 - what is the proc directory well the proc
232:35 - directory is an interface to the kernel
232:39 - what does that mean well it's a it's a
232:41 - actually a fake directory i mean there's
232:43 - a directory proc but
232:45 - you have this whole entire file system
232:46 - that
232:47 - includes lots of files that don't really
232:49 - exist they're not really files they're
232:50 - just virtual files
232:52 - and these virtual files have information
232:54 - in there
232:54 - and some of these pieces of information
232:57 - are things like your cpu information
233:00 - and what you do when you look at that
233:01 - file is you get information from the cpu
233:04 - from the kernel actually not cpu from
233:06 - the kernel it tells you what what
233:08 - information knows about the cpu your
233:10 - memory information shows you about your
233:13 - memory
233:15 - so all these different things you can
233:16 - look at so let's go take a look at the
233:18 - proc directory and so we can see
233:21 - so right here if i go to the block
233:24 - directory
233:25 - and take a look around you can see
233:27 - there's a whole bunch of
233:28 - empty files
233:30 - well they're like zero size
233:33 - so if i look at let's say i take a
233:35 - version right here at the bottom
233:37 - so version
233:39 - zero by file so i cut out version
233:43 - and that's clearly not zero bytes but it
233:45 - tells me the version of the kernel
233:47 - running
233:49 - okay so i cut out uh something like the
233:51 - zonium vote
233:53 - and it says well this is some
233:54 - information you might like to know
233:57 - i'm not sure why i know this but it's
233:59 - all there
234:02 - i can cut out things like
234:04 - my cpu info
234:06 - cpu info
234:08 - and it tells me oh i've got couple
234:11 - processors this one right here is
234:12 - processor zero it says it is genuine
234:15 - intel
234:17 - tells me about the cpu family it tells
234:18 - me how fast the cpu runs
234:21 - and all that information
234:24 - i can also do things like uh cut out my
234:26 - mem info
234:29 - which tells me how much memory i have it
234:32 - tells me that total memory it tells me
234:34 - how much is available
234:36 - and it also tells me things like how
234:38 - much swap is being used
234:40 - it talks about dirty memory which is
234:42 - basically memory that is
234:45 - um
234:47 - well it's been loaded into memory but it
234:49 - has not been written out so there's no
234:51 - copy of it and so
234:53 - it cannot be flushed out to swap cleanly
234:57 - so you have my swap total here my swap
234:59 - free
235:01 - all right so these are all these
235:02 - different memory information pieces
235:05 - if i look back at the directory ls again
235:07 - you can see
235:08 - there are a whole bunch of numbers here
235:11 - and there's a bunch of words
235:13 - numbers and words
235:14 - so what are these numbers well
235:17 - let's type in my ps command you can see
235:20 - that my bash shell once again is four
235:22 - seven two two so if i go into the
235:25 - four seven two directory
235:29 - and take a look around
235:31 - you can see there's a bunch of stuff
235:32 - here
235:33 - and these are different
235:36 - pieces of information you see
235:38 - the executable there's a symbolic link
235:40 - over to my bash
235:42 - and you got these
235:47 - well information about your process
235:50 - your cpu things
235:52 - here right here is the command line that
235:53 - was used to start my process
235:57 - all kinds of pieces of information you
235:59 - can use such as your environment
236:03 - so different things here
236:06 - you can look at you can mess with
236:09 - um well you can't mess with a whole lot
236:11 - of it but some of you can mess with
236:14 - so this information
236:16 - can be useful and this information is
236:18 - kind of what
236:20 - you get when you run the ps command
236:23 - you get
236:25 - all of these processes here
236:28 - and information about them
236:31 - but then there's other directories in
236:32 - here
236:33 - things like cis
236:34 - and
236:37 - fs let's look at that
236:39 - and they are really kind of what they
236:40 - sound like well let's go into sis and
236:42 - take a look at this
236:44 - so you have in your cis
236:49 - let's go into net
236:52 - now we got ibv force let's go to ibv4
236:57 - a bunch of things in here
237:00 - all right so what do we have
237:02 - well one of these things is a value so
237:05 - the ipford
237:08 - thing right here let's take a look at
237:09 - that
237:10 - if i cut out ip
237:12 - forward
237:14 - it says it has a value of one
237:16 - well it could be a value of one it would
237:18 - be a value of zero so let's do echo
237:20 - zero
237:22 - into that ibe
237:24 - forward
237:28 - now if i cut it out again it's zero so
237:30 - you can change the values
237:34 - and
237:35 - well so let's leave it as zero but let's
237:37 - do a ls minus
237:40 - l ip
237:42 - forward
237:43 - and you can see that even though i've
237:45 - changed the value it still has a value
237:47 - all right size of zero so what i did is
237:49 - just change a kernel value somewhere
237:52 - ipford
237:54 - is basically the value that tells your
237:57 - kernel that your computer can run as a
238:00 - router so why would you want your linux
238:03 - machine running as a router in fact that
238:04 - was the default value
238:06 - so let's put it back to what the default
238:09 - value was running as a router
238:11 - why would i do that
238:13 - well
238:14 - if you ever want to set up your machine
238:16 - as a nat box
238:17 - you provide you're doing your network
238:19 - address translation or you want to run
238:20 - as a normal router then you probably
238:23 - want to have that router switch flipped
238:25 - on
238:28 - so then manually going in here and using
238:30 - the echo command to set it will only set
238:32 - it
238:32 - in active memory what if you want it to
238:34 - be there on boot time well you can do
238:36 - that too so let's go down to the etc
238:39 - directory
238:40 - there is a assist ctl command versus ctl
238:43 - command and also a file
238:46 - so if i cannot sis ctl
238:49 - cto.com
238:54 - i can see oh here we have a bunch of
238:56 - stuff
238:58 - and if you want to figure out how do we
239:00 - use this well we could do the man page
239:02 - man
239:03 - cisctl.com
239:07 - and it says okay well all you need to do
239:10 - is figure out what you want
239:13 - and
239:14 - put them in here and tell it what you're
239:16 - doing
239:18 - okay well that's kind of confusing
239:22 - so what are we doing it also says you
239:24 - have other files you can look at there's
239:26 - the
239:27 - atc ctl
239:29 - dot d
239:33 - directory which has a bunch of comp
239:34 - files so let's take a look at that one
239:38 - cis ctl
239:40 - directory
239:42 - and you can see there is a
239:44 - 99ctl.com file okay
239:47 - so it says all right we just want to
239:48 - load this one first or not first but
239:51 - after everything else because they're in
239:53 - order and all it says is well the
239:56 - delete com file which you looked at
239:59 - so if you wanted to have something start
240:01 - up on
240:02 - [Music]
240:03 - boot time
240:04 - you could use the assist ctl.com to make
240:08 - it happen
240:10 - so
240:12 - how does that work well
240:14 - the i
240:15 - p forward command
240:17 - had this long path so if i do ls minus
240:21 - l
240:22 - you with the proc
240:24 - cis
240:25 - net
240:26 - ibv4
240:28 - before
240:30 - ip forward
240:32 - that was the file
240:34 - now everything from cis
240:37 - after cis
240:39 - this net ibv4 ib
240:41 - forward
240:42 - is all what you all need to know about
240:45 - so i can go into my
240:48 - cisco
240:52 - ctl.com file
240:55 - and i just need that part there
240:58 - net
240:58 - ipv4 ip4 so go down here and do a
241:02 - net dot
241:04 - ipv4
241:06 - dot ip
241:08 - forward
241:09 - equals
241:11 - one
241:12 - and that right there will set it up so
241:14 - that when it boots up it will set the
241:16 - ip4 to one well it's already been set to
241:18 - one so i could change it to zero if i
241:20 - wanted but that's how you do it
241:22 - you set values in there
241:25 - you can also use the sys ctl command
241:28 - this is ctl
241:30 - how does that work well it says you type
241:33 - in your options and your variables and
241:34 - values and some of that
241:37 - you can do a minus p to read from a file
241:39 - so i just use this ctl minus
241:42 - p
241:43 - and it sets my net ibv4
241:47 - ip421 because it's reading it from the
241:49 - file the default file i can also have
241:51 - other files i read from as well
241:54 - but that's how you set those
241:58 - all right
241:59 - so
242:01 - what other variables are stored in the
242:02 - kernel proc directory well we saw the ib
242:04 - forward
242:05 - can i change things well we know the
242:07 - answer that you can use the echo and you
242:09 - can also use the sys ctl command
242:12 - and that brings to the last question
242:15 - what's the cdl command used for it's for
242:17 - changing those things
242:21 - all right file systems how do i know how
242:23 - much hard drive space is being used
242:26 - hmm
242:28 - that could be important right
242:30 - how do i know how much space is used in
242:33 - a directory tree we can do that too
242:35 - we'll look at that in a moment and then
242:37 - what happens when the machine runs out
242:38 - of drive space
242:40 - i'll tell you it's very bad things
242:42 - happen
242:43 - if you think about it we have a
242:45 - journaling file system
242:47 - so
242:48 - um in theory
242:50 - what would happen if you absolutely ran
242:52 - out of space
242:54 - in order to write something to the hard
242:56 - drive usually you have to write to the
242:59 - journal first say i'm going to make
243:00 - changes to the hard drive
243:02 - and then
243:04 - you make those changes and then you
243:05 - remove your entry from the journal
243:07 - well what happens if the journal takes
243:09 - up extra space
243:10 - then you cannot write to the hard drive
243:14 - in fact there are some file systems that
243:16 - are written so poorly that once the hard
243:18 - drive is completely full
243:20 - if you try to delete a file it has to
243:22 - write to the journal that's going to
243:23 - delete the file
243:24 - which it can't do so it can't delete the
243:26 - file so the only way to get it clean is
243:30 - to completely reformat the file system
243:33 - that's a very poor design
243:36 - so that can be really bad don't ever run
243:38 - out of space linux is fortunately
243:41 - written by people who are much more
243:42 - intelligent and they leave a little bit
243:44 - of buffer space and things of that so
243:46 - that
243:47 - you can still do stuff even if you run
243:49 - out of space
243:50 - kind of they kind of run out without
243:53 - actually running out
243:55 - so how do i get more space
243:58 - well you can delete things
244:00 - you can add more hard drives
244:01 - and if you have something like a lvm in
244:04 - there you can add more hard drives and
244:06 - expand your current drive size and then
244:08 - use your file system tools to expand
244:11 - your file system in your drive space
244:15 - so let's go look at the
244:17 - file system see how much space is being
244:19 - used and how we can look at directory
244:20 - trees
244:23 - so
244:24 - let's jump right in
244:26 - clear that
244:28 - if i type in df
244:30 - it tells me information about my space
244:33 - being used now these 1k blocks are great
244:36 - we love seeing 1k blocks but what does
244:37 - that really mean well let's do a df
244:40 - minus h into human readable form
244:43 - it tells me okay this is how much space
244:45 - you have and it rounds these things a
244:46 - little bit so they're not quite exactly
244:49 - accurate but you know
244:51 - it's accurate
244:52 - all right you can see which devices i
244:54 - have
244:55 - and how much space is available on each
244:57 - device
244:58 - you can see there really are only two
245:00 - devices that have real space
245:03 - you have your
245:04 - first one right here your centos root
245:06 - which is your main file system
245:09 - and i also have this
245:11 - boot directory the rest of these are all
245:13 - kind of virtual-ish things they're not
245:16 - real really real they're kind of more
245:18 - memory
245:19 - things that are kind of fakeish
245:22 - so they don't really count
245:24 - but those two are real hard drive space
245:30 - all right
245:31 - so i know how much space is there i know
245:33 - how much is left
245:34 - but what about directories how much is
245:37 - being used by my i don't know my home
245:39 - users
245:40 - if i look at my
245:42 - home directory i can see there's a
245:44 - joseph person there
245:46 - so if i go down
245:48 - take a look i can go into
245:51 - my home directory
245:53 - i can go into joseph angle around see
245:56 - how much space is he using well it looks
245:58 - like it's not using very much
246:02 - how do i find out how much it is we can
246:04 - sit there and add everything up or you
246:06 - have the du command do it
246:08 - so du
246:10 - and
246:11 - let's do the home directory it says oh
246:13 - 12 is being used what's 12
246:16 - well
246:17 - let's once again use the minus h which
246:19 - happens to be the human readable form
246:21 - and it says oh it's 12k
246:23 - like oh okay thank you
246:26 - what about the user directory if i do it
246:29 - du minus h on the
246:33 - usr directory well that's much larger
246:35 - because it has to go through and parse
246:37 - through all of these directories and
246:39 - figure out how much space to be used
246:40 - being used in everyone and add it all up
246:43 - and it comes up with a total and says oh
246:45 - the entire usr directory is 3.5
246:48 - gigabytes
246:49 - more or less i could do that in less
246:52 - human readable form if i wanted to get
246:54 - more exact numbers and it'll say oh this
246:56 - is the number of
246:58 - blocks being used these are the 1k
247:00 - blocks
247:01 - and that's how you can figure out how
247:03 - much space is being used on your system
247:07 - anyway these are
247:10 - um that's how you can figure out the
247:12 - space that's how you can figure out
247:13 - what's in a tree
247:15 - and once again don't run out of hard
247:17 - drive space bad things happen
247:20 - and that is the end of this
247:22 - video
247:25 - kernels and hardware
247:29 - when you're running a linux system
247:31 - you might have questions about a kernel
247:33 - well first of all what is a kernel well
247:35 - kernel is the main program that runs
247:37 - your
247:38 - operating system it's the main thing so
247:40 - linux is the kernel
247:42 - so which kernel version am i running
247:45 - well there's lots of different kernels
247:47 - which i'm running and where is the
247:49 - kernel file stored
247:51 - where is the source code for the kernel
247:53 - and what options were used when building
247:54 - the kernel so let's take a look at these
247:56 - questions and see if we can figure them
247:58 - out
247:59 - so here we have a system
248:01 - i'm running my linux system and i want
248:03 - to know which kernel i'm running
248:06 - well if you look in your
248:09 - etc directory there's a bunch of files
248:11 - in there
248:13 - so
248:15 - if we
248:16 - cut out our edc
248:19 - there's a red hat release file
248:22 - and that tells me which version of
248:24 - sentosa right
248:26 - but it doesn't tell me which kernel i'm
248:28 - using
248:29 - so that's kind of uh tough
248:31 - so you start saying well
248:32 - where else could it be stored
248:35 - it actually turns out there's an easy
248:36 - way to do it just having the union
248:37 - command you name
248:39 - minus r
248:40 - and that tells me my kernel so my kernel
248:42 - is 3 10
248:44 - 0
248:47 - [Music]
248:53 - dot x864
248:56 - so these el
248:58 - 7
248:59 - maps up to this
249:00 - centos release thing which is seven
249:04 - same seven right there
249:06 - now the seven six
249:08 - well
249:10 - that is kind of retired the red hat
249:11 - release and this 1810
249:14 - basically tells you which centos release
249:17 - this is
249:18 - all right
249:20 - so we've got that
249:22 - how is the kernel built
249:24 - well
249:25 - most things that only system are built
249:27 - with the gcc compiler
249:30 - but do we know it was both that well we
249:32 - can actually take a look at the kernel
249:34 - and the kernel can tell you something as
249:35 - well so cat proc
249:38 - version
249:39 - and we see
249:42 - once again that same exact number so
249:44 - this number right here the kernel number
249:46 - is showing up right here
249:48 - so that's the kernel
249:51 - you can see where it was built
249:54 - and the gcc version that was used to
249:56 - build it
250:00 - all right so that's good information
250:02 - so where is the kernel file it's built
250:05 - it's loaded to memory i get that where
250:08 - is it at
250:09 - well fortunately you can find it in the
250:12 - boot directory
250:14 - and some systems have boot mounted by
250:16 - default some don't you can always cut
250:18 - out the etc fstab file and see what it
250:21 - says about your boot directory
250:23 - it's got my device here so uuid and then
250:26 - this boot and it says xfs defaults so
250:29 - it's not
250:30 - not being not booted sometimes it
250:32 - doesn't actually load for some older
250:36 - linux versions because they don't plan
250:37 - on changing the kernel often and so they
250:39 - just don't load it
250:42 - and it also protects it a little bit but
250:45 - it is mounted and it should be there so
250:47 - i go over the boot directory and take a
250:49 - look
250:50 - there are a bunch of files here and if i
250:52 - go back to my unanim command once again
250:56 - i can see this is the number i'm looking
250:58 - for
250:59 - so if i do ls
251:01 - minus
251:02 - let's do l
251:04 - and then
251:05 - pipe that through a grip
251:06 - and we want to do a back tick
251:08 - u name minus r
251:12 - and what we're gonna do is we're gonna
251:14 - look at all of the files and we're gonna
251:16 - filter out just the ones that happen to
251:17 - have that string in them
251:22 - correct unity as far as around there all
251:24 - right
251:25 - so you can see there's a bunch of stuff
251:27 - here
251:29 - okay what is it
251:30 - well this first one
251:32 - on the top is your
251:34 - config
251:35 - that is the configuration options that
251:37 - were used when creating
251:40 - this kernel
251:41 - so
251:43 - as you might expect you less out that
251:45 - config
251:47 - with 12
251:48 - and you'll see a bunch of options tons
251:50 - of options with yeses and
251:53 - and modules and
251:54 - not set and things like that and you go
251:56 - through you say okay so that's how the
251:59 - kernel was built all these options are
252:01 - set there's lots of options just kind of
252:03 - keep scrolling through them
252:05 - lots of options to set
252:08 - all right
252:10 - then you have this ram disk thing
252:13 - ram
252:14 - init ram fs
252:16 - well it's the initial ram disk file
252:18 - system thing and that's kind of
252:20 - important
252:23 - what does it have well when your kernel
252:26 - gets loaded to memory the way it happens
252:29 - is you have
252:30 - your
252:33 - i guess your bios loads the first part
252:36 - of your hard drive and the first part of
252:38 - your hard drive loads your
252:41 - your boot loader and your bootloader
252:44 - looks your configuration files figures
252:46 - out what to load
252:47 - and then it loads your kernel and when
252:50 - it loads your kernel
252:52 - there's always that risk
252:54 - there's a slight risk that your kernel
252:56 - will load up and it will not have the
252:57 - drivers in order to read the file system
253:01 - so that could be
253:02 - um because you have some kind of a raid
253:04 - set up hardware raid you need to have
253:06 - the hardware raid drivers in there other
253:08 - would otherwise you can't read the raid
253:09 - if you can't read the raid you can't get
253:11 - anything from the hard drive
253:13 - you all kinds of problems but
253:15 - the bios when it's reading it reads
253:17 - things differently
253:19 - than the kernel reads them
253:22 - so it has the ability to read things
253:24 - that the kernel cannot read
253:26 - so that could be a little interesting
253:28 - so it's always possible to get in a
253:30 - situation where
253:32 - your kernel is loaded but your kernel
253:34 - cannot read the hardware
253:36 - because it needs some kind of drivers
253:38 - so where do you put those drivers
253:41 - well you can put those drivers in the
253:42 - initial ram disk
253:45 - and so you put drivers in there these
253:47 - little kernel modules and they get
253:49 - loaded
253:50 - and then it can suddenly read the rest
253:52 - of the system so that could be important
253:55 - let's get down to the bottom we've got
253:57 - this vm lena's thing so the z is for
254:00 - compression it's basically a compressed
254:03 - file it's really a larger file
254:05 - and that is your kernel that's your
254:08 - kernel built out pressed waiting to be
254:10 - loaded into memory
254:13 - so
254:14 - that's what happens that gets loaded
254:18 - but then where is the source code
254:20 - well source code for the kernel is
254:23 - usually stored in the usr
254:26 - src directory so let's take a look over
254:28 - here
254:30 - we've got oh this directory called
254:32 - kernels so let's go in here and take a
254:33 - lot of kernels
254:34 - kernels they look and it's
254:38 - empty
254:39 - why is it empty well
254:41 - if you think about it most people don't
254:42 - need their source script for their
254:44 - kernel right you just want the kernel to
254:46 - run
254:47 - you don't need the plans you just want
254:50 - it there
254:51 - so
254:53 - some versions of linux ship without the
254:56 - kernel
254:58 - well that can be a bit of a problem
255:00 - because what happens if you need the
255:02 - kernel
255:03 - well
255:04 - that's okay we can get pieces of the
255:07 - kernel
255:08 - so when do you need the kernel if you
255:10 - are changing some of your libraries and
255:12 - your libraries need to be able to access
255:14 - the kernel so you need to make
255:16 - system calls to grab stuff from the
255:18 - kernel you might need to have your
255:20 - kernel headers
255:22 - and the kernel headers can be loaded
255:24 - with a special package
255:26 - so let's look
255:29 - if i do a yum
255:30 - install kernel
255:33 - devel
255:35 - it will install the kernel headers
255:39 - so i do yes
255:41 - now
255:42 - contrary to common belief if you install
255:45 - this kernel develop it doesn't give you
255:47 - everything you need to develop the
255:48 - kernel
255:49 - no not quite not that at all in fact all
255:52 - you're really getting is the kernel
255:54 - headers
255:55 - quite a small little uh
255:57 - piece of information you need more in
255:59 - order to actually build the kernel
256:02 - but we can go in there and take a look
256:03 - so now we suddenly see there is a
256:05 - directory here so i go to that directory
256:09 - and i can see all kinds of files here
256:13 - one of the files is that config thing so
256:15 - account my dot config
256:18 - and you can see this looks like
256:20 - well a bunch of the same thing that we
256:23 - had in that boot directory if i do a
256:25 - diff to compare my dot config in this
256:28 - directory
256:29 - config
256:31 - to the one in boot
256:33 - dot
256:35 - config
256:37 - right here
256:38 - you'll find those two files are exactly
256:41 - the same so there's no differences
256:44 - so that's great that's kind of nice
256:47 - but what if i don't want this kernel
256:48 - what if i want to get a new kernel
256:51 - well i can download it or if i want to
256:52 - actually build a kernel we can do that
256:54 - too
256:55 - in fact you can look at your options
256:56 - even
256:57 - there is a menu config thing you can do
256:59 - a
257:00 - make menu config and look at your
257:02 - options but it doesn't quite work
257:04 - without some development tools and a
257:06 - little bit more so let's do a
257:08 - yum group
257:11 - install
257:12 - and we're going to get our development
257:16 - tools
257:17 - that's the entire development tools
257:19 - package
257:20 - set which includes your gcc compiler and
257:23 - all kinds of other libraries
257:25 - so this will get you most of what you
257:27 - need in order to be able to see what the
257:29 - kernel needs in order to be developed in
257:31 - some of them
257:36 - so after a couple of seconds it's all
257:38 - downloaded and you're ready to go and i
257:40 - want to do a yum install
257:43 - n
257:44 - curses
257:48 - n curses allows me to have menus so i
257:50 - can do up down navigation through menus
257:53 - with the
257:54 - keypad
257:55 - all right so anyway i make
257:58 - menu config so i want to make sure i'm
257:59 - in this directory which i'm in you can
258:01 - see i'm in the correct directory you can
258:03 - see there is this make file here which
258:05 - allows me to run the make command so do
258:08 - a make
258:09 - menu config
258:12 - and that will
258:14 - do this right here print a few things
258:15 - and suddenly it'll pop into a
258:18 - nice gui right here and i can go look at
258:21 - the options that were set at the time
258:23 - that this kernel was built
258:27 - you can go into individual things say
258:30 - okay
258:31 - do i have the second extended file
258:33 - system that's ext2 do i have it no i
258:36 - don't have it do ibxc3 no i don't really
258:38 - have it but i do have ext4 that's great
258:42 - any xt4 can read
258:44 - ext2 and the xc3 we just want to make
258:46 - sure we use that and
258:49 - so you can say well whatever i want
258:50 - something like razer fs
258:52 - or jfs or xfs i can put those in there i
258:55 - can even build it into the kernel if i
258:56 - want to not use modules
259:00 - but you probably want to just use this
259:02 - module because maybe you're not using
259:03 - xfs
259:06 - but if you know you are maybe you build
259:08 - it in
259:10 - all right
259:11 - so exit out
259:12 - and
259:13 - if you make changes you can save those
259:15 - changes and
259:16 - that's good for building your kernel
259:18 - usually what you do to make your kernel
259:20 - is you
259:21 - use the make command and you do a
259:25 - well make make all
259:28 - but that doesn't really work here
259:29 - because we don't have the source code
259:31 - so where do we get the source code
259:34 - well the source code actually can be
259:35 - found in other places such as
259:39 - right here on kernel.org
259:42 - you can see kernel.org you can see the
259:44 - linux kernel archives has a bunch of
259:46 - files here you just download one of
259:48 - these tarballs
259:50 - and decompress it in the
259:53 - usr src kernels directory and then from
259:57 - in there
259:58 - you can just go inside of it and build
260:01 - it
260:03 - make sure you have your development
260:05 - tools make sure you end curses make sure
260:07 - if anything else is missing and
260:11 - yeah then you're good to go
260:14 - all right but that doesn't really get it
260:16 - all taken care of
260:20 - so let's go back and see what drivers do
260:22 - we actually need right because you think
260:24 - about it
260:26 - you've got this this thing you know
260:28 - where the kernel what version you're
260:29 - running you know where it's stored
260:31 - you know the source code is not there
260:33 - but you can get the development
260:34 - headers if you want
260:36 - which can be used for really other stuff
260:38 - and you know what options were built or
260:39 - used when building it
260:41 - so
260:43 - how do i know which hardware i need to
260:44 - use so you need to know what hardware
260:46 - you have on your system
260:48 - and you can figure out which usb devices
260:50 - you have you can see which pci devices
260:52 - you have you can see which drivers were
260:55 - used or are being used
260:57 - and you can see specific versions of all
260:58 - kinds of stuff and this information is
261:01 - going to be useful so let's take a look
261:03 - at it
261:06 - so if i do ls usb
261:09 - it says these are the devices that are
261:12 - connected to me
261:14 - okay
261:16 - well these are the kind of things i got
261:18 - which is kind of nice doesn't really
261:20 - tell me much
261:22 - because there's nothing really there i
261:24 - can also do lspci and that says these
261:27 - are the pci devices that i have on my
261:29 - system
261:32 - well what that's not enough information
261:34 - what if you need to know more
261:35 - information just that
261:37 - because i can see okay i've got a vga
261:40 - compatible controller
261:42 - thing here
261:44 - that's nice
261:45 - so i know that's what i need for my
261:47 - graphics card
261:50 - and i can also use my ethernet
261:52 - controller right here
261:54 - but
261:55 - i don't know what drivers i'm using so
261:56 - you can do a lspci minus v for verbose
262:01 - and that says oh here's some information
262:04 - and you can see
262:06 - for example my video card
262:09 - right here got some information about it
262:12 - that's nice
262:14 - um drop down to my ethernet controller
262:17 - right here
262:18 - and it even tells me things like this is
262:20 - the
262:21 - driver this is the kernel module that's
262:23 - being used the e1000
262:26 - is being used
262:28 - some of them tell me the
262:30 - drivers such as the sound cards and
262:33 - pci things all these things are showing
262:35 - up and giving information but what if
262:37 - that's not enough for information what
262:38 - if i want more i just add another v
262:42 - suddenly we have more
262:44 - what if that's not enough i want more i
262:45 - just add another v
262:48 - okay so it doesn't give me that much
262:50 - more
262:51 - so really two v's is about as much as
262:53 - you get but you can use three
262:55 - so add a couple of these and you're good
262:58 - you can see what hardware you have with
262:59 - this pci thing so why is that important
263:02 - well you need to know which drivers
263:04 - you're using
263:06 - if you want to guarantee you have them
263:08 - when you do your installation or
263:09 - building of a new kernel
263:11 - it can be kind of important you want to
263:13 - make sure they're either built or make
263:15 - sure that they are built into the kernel
263:16 - so that you don't need to build the
263:18 - modules
263:25 - kernel modules so what are kernel
263:26 - modules well kernel modules are your
263:28 - drivers they're the little pieces of
263:30 - kernel code that gets loaded in
263:33 - and used
263:36 - so
263:37 - you might say well why would i build
263:39 - kernel modules for hardware i never need
263:42 - or don't use
263:45 - well i don't know
263:48 - why would you
263:50 - well
263:50 - you might use it
263:52 - but if you know you will never use
263:54 - something you don't need that module
263:55 - it's not necessary
263:58 - so then
263:59 - why were the kernel modules built
264:01 - outside of the kernel instead of in the
264:02 - kernel well the reason they're built
264:03 - outside of it is because you don't
264:05 - necessarily need everything and there
264:07 - are even problems where multiple
264:09 - different kernel modules can conflict
264:10 - with each other
264:12 - and you can't have two
264:14 - two of the similar modules because maybe
264:16 - one will work only on one
264:19 - there might be two different modules
264:21 - built for the same hardware
264:22 - and you only want one of them maybe
264:24 - one's open source and one's a
264:26 - proprietary closed source and that could
264:28 - be
264:29 - well a good reason to have them outside
264:30 - the kernel because you can only have one
264:32 - in the kernel
264:33 - and if it's in the kernel it's
264:34 - guaranteed to be in the memory
264:37 - and what if you don't ever use
264:39 - xfs or
264:41 - ext2 or three if you don't use the exc2
264:44 - or three
264:45 - why would you want that that kernel
264:47 - module built into your kernel
264:49 - just don't build it
264:51 - so which kernel modules are loaded well
264:53 - you can use the ls mod command to see
264:58 - which ones are being loaded and
265:00 - things like that so let's go take a look
265:02 - at that right now
265:04 - to clear this up i do ls
265:07 - mod
265:08 - and something that shoots as a big list
265:11 - so we knew we were using the e1000
265:14 - driver for our
265:16 - our uh
265:17 - network card and we can see right there
265:19 - it's being used the e
265:21 - 1000 is loaded up and it's in in there
265:26 - we can see lots of other drivers in
265:28 - there as well
265:30 - so
265:30 - which
265:31 - drivers do we have
265:34 - well you do mod probe
265:37 - and that kind of tells me something
265:40 - it says well here's some things you
265:43 - could do
265:44 - and it's just saying well what do i have
265:47 - and you've got this minus a option so
265:50 - let's figure out what that does so do
265:52 - mod probe minus a
265:56 - and
266:00 - nothing there
266:03 - we want to usually you can use mod probe
266:05 - now load drivers
266:07 - and sometimes you can use it to
266:09 - list the drivers as well
266:12 - um
266:18 - let's clear this up
266:23 - so let's approach just a different way
266:25 - so we
266:27 - mod pro apparently doesn't have the
266:28 - option anymore to look at all the
266:30 - modules but we can still load modules
266:33 - and let's take a look at the directories
266:35 - where they are stored so if i look at
266:38 - the lib directory ls
266:40 - let's say oh
266:42 - lib
266:43 - there is a lib modules
266:47 - modules
266:50 - all right
266:51 - so that's interesting
266:52 - there's a lib modules
266:55 - and then we want to get our kernel which
266:57 - is 3
267:00 - right there with the 12 and we see this
267:02 - stuff right here
267:03 - well that's a lot of modules
267:08 - right maybe
267:09 - so use the find command find
267:13 - and we can list out a bunch of things in
267:14 - here
267:15 - well we know that we want to look for
267:18 - the
267:19 - let's find their network driver so we
267:21 - know it's ev1 000 so i do grep
267:23 - rep
267:24 - e1000
267:26 - and we see suddenly this is where you
267:28 - can find the drivers for the e1000
267:32 - there's the e1000 and there's the e1000
267:35 - um
267:37 - e
267:38 - whatever that is
267:39 - but you can see the directory
267:42 - where it's stored and you can also see
267:43 - the actual module stored there
267:45 - and it most have end in a ko but
267:48 - these ones are apparently compressed
267:49 - they have an xz at the end
267:53 - and so these all get loaded at boot time
267:57 - and well then when it gets loaded
268:00 - and sometimes they get loaded at a lot
268:02 - of times so once again if you look at ls
268:04 - mod you can see the list of modules if i
268:07 - wanted to remove a module i can do that
268:09 - as well with an rm mod or
268:11 - ins mod for insert mod
268:14 - to
268:16 - and modprobe once again can add or
268:18 - remove modules
268:20 - so
268:21 - those are a couple things with kernel
268:22 - modules
268:26 - so
268:26 - we can see
268:28 - first of all um which kernel modules are
268:30 - loaded with the ls mod command we can
268:32 - see
268:33 - um which kernel modules there are by
268:35 - just doing a
268:38 - look at the uh
268:40 - the
268:41 - lib modules directory
268:44 - and then how do i load kernel modules
268:46 - you can do mod probe to load them
268:49 - or ins mod
268:52 - so why would i want to build my own
268:53 - kernel
268:54 - well sometimes you want to build a
268:56 - kernel for a specific purpose maybe you
268:58 - don't want to have any
269:00 - extra modules built in maybe you want to
269:02 - just build a kernel that specifically
269:05 - meets a set of hardware and you're done
269:08 - if you do an embedded system you want to
269:10 - make sure your hardware meets exactly
269:13 - or matches exactly what the kernel has
269:16 - are there any performance advantages to
269:18 - building a kernel yes there are you can
269:20 - build a kernel specifically for your
269:22 - hardware and then you can optimize
269:24 - everything
269:26 - is that a lot of work yes it's a lot of
269:27 - work
269:30 - how do i build a kernel
269:31 - well
269:32 - first you need to
269:34 - get the source code and we saw where to
269:36 - get that because you get it from
269:37 - kernel.org
269:40 - you download that you put it into your
269:43 - user src kernels directory
269:46 - decompress the file you go into that
269:49 - file and you then
269:51 - can
269:53 - make sure you have your libraries
269:55 - installed and you can do a make menu
269:58 - config and
270:01 - set your settings
270:03 - if you want to copy over a config you
270:04 - can copy over config from a previous or
270:07 - different version of the kernel that you
270:08 - know works and then change the settings
270:10 - up a bit
270:11 - then you do a make
270:13 - make all
270:15 - and it will build it
270:18 - why do i need a compiler well you need a
270:20 - compiler because you need something to
270:21 - convert your source code into
270:23 - machine code
270:25 - how long does it take to build a kernel
270:26 - and the modules
270:28 - well that's an interesting question it
270:30 - depends on what your cpu is if your cpu
270:33 - is a nice slow virtual machine cpu
270:36 - it could take you
270:38 - i don't know two to three hours to build
270:39 - your kernel
270:41 - if you are building on much harder
270:42 - faster
270:43 - [Music]
270:46 - multi-core cpus you can do it much
270:48 - faster
270:50 - you could do it in 10 to 10-20 minutes
270:53 - so why does it take so long well there
270:55 - are a lot of files there's
270:58 - millions of lines of code in that kernel
271:01 - so you are looking at a lot of stuff
271:03 - parsing a lot of stuff and it depends on
271:05 - how many options you build the more
271:06 - options you put in there the longer it
271:08 - takes
271:11 - once a kernel has been built how do i
271:13 - change which kernel i am using
271:15 - well remember the bootloader loads the
271:16 - kernel right so all you need to do is
271:18 - tell the bootler
271:20 - how to load your kernel
271:23 - all right that sounds pretty easy so how
271:25 - do i change the default kernel system
271:26 - he's using
271:28 - well with the boot letter
271:31 - and let's go take a look at that
271:34 - so clear this out
271:36 - the bootloader so let's drop back to
271:38 - that boot directory again
271:40 - in here there is a grub and a grub 2.
271:44 - so let's take a look at the two
271:46 - directories so if we do allows myself
271:47 - grub
271:51 - rub
271:52 - i can see a splash.x
271:55 - pm.g
271:58 - z
271:59 - that is the splash screen you see when
272:01 - you boot up your system if you're using
272:03 - grub
272:04 - so
272:05 - it's being loaded
272:06 - great
272:07 - that's not
272:09 - where you make changes if you go into
272:11 - grub
272:13 - 2
272:15 - this is also not where you make your
272:16 - changes but you can see what changes
272:18 - have been made there's a grub dot c
272:21 - f g file here so let's take a look at
272:23 - that one
272:23 - grub
272:25 - dot cfg
272:26 - [Applause]
272:28 - and it's got all this information here
272:32 - but what's useful is it tells you
272:34 - basically where the files come from
272:37 - so
272:39 - it's a collection of files from the etc
272:41 - grub dot d directory
272:44 - so it goes through and it reads in these
272:46 - files so it takes this first one zero
272:48 - zero onto our header
272:50 - and it puts the header in there and then
272:52 - you can see it's adding each piece one
272:54 - at a time
272:57 - alright well
272:59 - if you go down here you see there's this
273:00 - 10 linux and you can see there's an
273:02 - option here menu entry
273:06 - uh mentoring entry so whatever here is
273:08 - in this menu entry quote is what you
273:10 - will see
273:11 - when you're booting up that will be the
273:13 - option you can choose to boot
273:16 - and then it tells you things like which
273:18 - modules have you loaded
273:20 - and it then has this line right here
273:23 - linux 16
273:25 - where it tells you this is where you
273:27 - load the linux kernel
273:29 - then right after you load the linux
273:31 - kernel you load the initial ram disk
273:34 - so it loads that image right there
273:36 - so those two get loaded and then you're
273:38 - good to go
273:40 - so
273:43 - how do i know what it's using well
273:45 - it says a couple of things that are
273:47 - interesting here
273:48 - there's a timeout that says you got five
273:51 - seconds to actually choose which
273:53 - kernel you want to load
273:55 - um
273:56 - and
273:59 - yeah
274:00 - you can also figure out which kernel is
274:02 - being loaded because you've got this uh
274:05 - default value
274:06 - things like that
274:08 - okay
274:09 - so
274:11 - what do we do we just need to go in
274:12 - there and change what the default is
274:15 - right
274:17 - or you can add another line in there
274:20 - so you go to the etc
274:23 - grub
274:24 - dot d directory
274:27 - and in here you can see
274:29 - all these files that are then thrown
274:31 - together to generate your kernel if you
274:33 - look at the readme file let's read me
274:38 - you can see information about these well
274:41 - okay so these are how it does it so
274:43 - you've got these zero zero
274:46 - things for reserve for the header you
274:48 - got this
274:49 - 10 stuff for your native boot entries
274:52 - and then you got this 20 stuff for your
274:54 - third-party app stuff so that they can
274:57 - all jump together
274:59 - and build it up
275:03 - and it builds this when you run a script
275:07 - or program to do that
275:13 - so now let's look at how we can actually
275:14 - generate this you can generate these
275:16 - things and you have to be careful when
275:18 - you get to some of this stuff because if
275:19 - you mess things up too badly it can be
275:21 - bad
275:23 - but there is a grub to rub two
275:27 - command you can see there's a bunch of
275:29 - commands here but grub to
275:31 - make config
275:33 - and that one will generate your
275:35 - configuration files so you'd want to do
275:37 - minus o
275:38 - and tell your files you do like a boot
275:42 - grub 2 and if i want to do a
275:45 - grub
275:46 - dot cfg file i can do that let's do a
275:49 - new so i can compare it
275:51 - so i run that command right here it
275:54 - grabs all that stuff
275:56 - that's good so if i go over to my uh
276:01 - need to see actually my boot grub 2
276:05 - directory
276:06 - i can see i've got a grub dot cfg n a
276:10 - grub dot cfg.new and video a diff on the
276:13 - two of them grub
276:15 - cfg and wrote
276:18 - cfg.new
276:20 - i can see there are a bunch of
276:22 - differences
276:24 - what are they well
276:27 - things like
276:28 - you know this one
276:30 - different versions of the kernel so
276:31 - let's change the menu options
276:34 - it looks like i basically just got a new
276:35 - kernel
276:36 - and i haven't installed it
276:39 - yet
276:41 - um but that's about it
276:43 - right there it's just
276:45 - slightly
276:46 - newer kernel
276:49 - all right
276:51 - and also it changed the
276:53 - default things for that
276:56 - so you can mess with your grub
276:57 - configuration there
276:59 - you can also do things like set a
277:00 - password there's a grub
277:03 - to
277:04 - make
277:06 - password thing and you can run that and
277:08 - type in some password like aloha one two
277:11 - three
277:12 - hello one two three
277:14 - and it will say your password you just
277:16 - need to copy that piece and install it
277:18 - into your
277:20 - um your grab configuration files if you
277:22 - wanted to add something
277:24 - um
277:26 - but yeah you can you can mess with your
277:28 - boot loader and change it and that's how
277:30 - you can work on installing your new
277:32 - kernel and making things work mess with
277:34 - grub
277:36 - so your atc
277:38 - grub dot d directory and then you can
277:40 - just build your
277:43 - your grub
277:45 - configuration file
277:47 - at boot time
277:48 - anyway
277:50 - that gives you an idea of what grub is
277:52 - so
277:53 - is it important to be able to change
277:54 - your kernel yeah sometimes but it's done
277:56 - automatically whenever you install new
277:58 - kernels it automatically rebuilds
277:59 - everything for you
278:01 - anyway that is it for your kernels and
278:03 - hardware
278:06 - system logs and queues
278:10 - so what are system logs
278:12 - well system logs are
278:14 - basically files some kind of file
278:17 - that stores
278:18 - information about events that happen so
278:20 - when something happens on your system
278:23 - it's usually sent to one of the many log
278:25 - files in the var log directory
278:28 - and then those files record the events
278:30 - and allows you to look back and see what
278:33 - happened in order to lead up to certain
278:35 - situations you're in or figure out
278:36 - what's happening in your system so what
278:38 - kind of information is stored in the
278:40 - system logs
278:41 - you have your regular messages whenever
278:43 - you start and stop services that's
278:45 - starting there you have logs indicate
278:47 - whenever you
278:49 - boot up your system what options and
278:51 - things happen there you have logs
278:53 - indicate
278:56 - things like mail coming in going out you
278:58 - have logs for your
279:00 - web services you have
279:03 - logs for
279:04 - logging in logging out
279:07 - sc linux has a set of logs all of these
279:08 - things are in the logs
279:11 - in the log directory
279:13 - so why do logs take up so much space
279:15 - well
279:16 - logs are
279:18 - written anytime some major event happens
279:20 - and there can be lots of different
279:21 - events that happen and all these events
279:23 - have a line entry or more in the log
279:26 - files
279:28 - if someone tries attacking you
279:31 - you can actually fill up the entire
279:33 - partition that those logs are stored in
279:35 - because you start generating too much
279:37 - data and
279:39 - it's
279:39 - well
279:40 - bad
279:41 - and if the logs completely fill up the
279:42 - system
279:44 - well it depends on where the logs are so
279:46 - some people put their logs their var log
279:49 - directory or their var directory in a
279:51 - separate partition so that if it does
279:53 - fill up all the way
279:54 - the system can continue to function
279:56 - however if it's not in a separate
279:58 - directory then whatever directory their
280:00 - or whatever petition they're in
280:02 - could completely fill up and if that's
280:04 - your main
280:06 - boot
280:08 - may not be your main route your system
280:10 - that means your system might become
280:12 - difficult to use for anything
280:14 - so you got to watch out for that
280:17 - so
280:19 - who reads all these logs
280:21 - well lots of people can read the logs
280:25 - well some of them anyway but there are
280:27 - some files that can be read only by
280:29 - people who have special rights so the
280:32 - root user or administrators who have
280:36 - the ability to cover
280:38 - and
280:39 - those logs usually have more sensitive
280:41 - data the less sensitive data can be
280:44 - visible to all users
280:46 - so why can't normal users read all the
280:48 - logs well
280:50 - imagine if someone were to try logging
280:52 - in
280:53 - and
280:54 - so you saw a login attempt
280:58 - with some username and you notice that
281:01 - username looked very much like a
281:02 - password and then right afterwards after
281:04 - they failed to log in a user logged in
281:08 - and they logged in with the correct
281:09 - password apparently but you see their
281:11 - name so then you might be able to take
281:13 - that password and that name and put them
281:14 - together and figure out what the user
281:16 - and password pair is
281:18 - that might not be something you want
281:20 - normal users to be able to see
281:22 - also
281:23 - other things if you try doing something
281:25 - bad on the system maybe you'll generate
281:27 - a log and you don't want that log entry
281:29 - to
281:31 - well everyone to know what log entries
281:33 - are generated when people are doing bad
281:34 - things because then they can figure out
281:35 - what they can get away with without
281:37 - having logs generated
281:39 - so it can be helpful so let's go take a
281:40 - look at the log file and see what we see
281:45 - so if i jump over here
281:46 - to the var log directory
281:50 - i can see a lot of files and there are
281:53 - well lots of them some of them are big
281:55 - some of them are small
281:57 - but let's just go through some of the
281:58 - main ones so we can see that there is a
282:00 - d message file at the top so my cata d
282:03 - message
282:05 - dmes
282:07 - you can see this is information about
282:09 - how the system started
282:11 - you can see what started what order
282:13 - and that can be useful for a few things
282:16 - also you can see there is this last log
282:19 - last log is well
282:23 - let's take a look at what we can see
282:24 - here last log
282:27 - it looks hard to read
282:29 - so you can actually type in last
282:32 - and then it will tell you
282:34 - who's in logging in and when they've
282:35 - been logging in and information like
282:37 - that
282:39 - there's a binary file
282:42 - so we can look at it using that tool you
282:45 - have messages
282:47 - so let's cut out messages
282:49 - messages is where your default log files
282:52 - are for everything
282:54 - you can see lots of things running
282:55 - through you can scan through it and
282:57 - figure out what's happening if people
282:58 - are having login failures
283:01 - um
283:02 - all that information
283:06 - also you have the lower the secure log
283:09 - that shows your logins attempts as well
283:12 - cat
283:13 - secure
283:15 - you can see all of your pam
283:18 - uh unix things
283:20 - which is basically your login attempts
283:25 - all right
283:27 - then after you see all that you know
283:30 - there's a few other logs in there but
283:32 - there are some directories as well
283:36 - so
283:37 - let's go look at these directories
283:40 - so there is one for
283:44 - audit so if you go into audit this is
283:46 - where your se linux audit logs are
283:49 - you cut out your audit file and you can
283:50 - see all these se linux violations or
283:53 - passes
283:54 - and you can see what succeeded what
283:56 - failed if something failed it will tell
283:58 - you in here what failed and this can be
284:00 - very useful for troubleshooting problems
284:04 - if you're doing some on the web and the
284:05 - website working properly you can look at
284:07 - your web logs assuming you have apache
284:09 - installed and
284:11 - your web logs and you can see those but
284:14 - maybe it wasn't a violation there maybe
284:17 - it was an sc linux violation and then go
284:19 - in here and look and see is there
284:21 - something showing up
284:26 - all right if i install apache for
284:29 - example i will see an httpd
284:32 - directory show up so let's do a yum
284:34 - install
284:36 - httpd
284:37 - just so we can see the directory
284:44 - and now i can see that there is an http
284:47 - directory that just showed up
284:49 - and i can go into this directory and
284:51 - take a look at that
284:55 - nothing here but then you'll see an
284:56 - access login error log whenever there
284:58 - are problems with your web pages
285:01 - all right
285:02 - so those are your log files
285:09 - so what is the var log messages file for
285:12 - well it's your standard default location
285:14 - for your log messages for any log
285:16 - messages if you don't have something
285:18 - specific such as um
285:20 - sc linux has its own audit directory and
285:23 - httpd or apache has its own httpd
285:25 - directory
285:27 - if it isn't one of those type of
285:28 - services or it doesn't have something
285:30 - special it might just write it to the
285:32 - messages
285:33 - log directory
285:34 - messages
285:36 - file
285:38 - can you read it in real time yes you can
285:42 - it's not very exciting if there's
285:43 - something happening
285:44 - but you can read it using the tail
285:47 - command
285:49 - so let's take a look at how that works
285:51 - if i wanted to
285:53 - look at it
285:54 - in real time i can do a
285:56 - tail minus f
285:59 - messages
286:01 - and you can see
286:03 - i press enter a few times that's what
286:05 - happened there's nothing going on so if
286:06 - i were to pull up another terminal over
286:09 - here
286:10 - and let's say oops i pulled up a
286:12 - terminal that didn't do anything but if
286:14 - i were to install something yum install
286:19 - let's do
286:20 - end maps it is there it's probably all
286:22 - right here well i guess not
286:27 - you can see that suddenly it says oh
286:29 - installed
286:30 - and map and you can see that showing up
286:32 - right there in the log if i do a yum
286:35 - update
286:36 - which could probably be a really bad
286:37 - idea from the gui but it's nothing
286:39 - replacing gui if i do that
286:43 - you can see suddenly it's
286:44 - showing up a whole bunch of stuff being
286:45 - updated
286:47 - and you can see those in real time if
286:49 - you're looking at the
286:50 - messages file
286:52 - with the minus f switch in the tail
286:54 - command so tail minus f
286:56 - the file and you can see changes
286:58 - happening to that file
287:02 - all right you press ctrl c to get out of
287:04 - that
287:07 - can the logs be changed
287:09 - yes they can i can go in there and edit
287:11 - the logs if i wanted to i could delete
287:12 - things out of it
287:14 - so if i were some kind of a hacker and i
287:16 - wanted to
287:18 - mess up your system what i probably do
287:20 - is either edit your logs or just delete
287:22 - your logs altogether
287:24 - so i've had hackers hack into my systems
287:26 - before and delete the logs if you notice
287:28 - your log directory is all empty
287:30 - well that's usually indication that
287:32 - something bad happened and some guiding
287:33 - your system
287:36 - the var log secure
287:38 - so var live secure once again i
287:39 - mentioned that one indicates who is
287:42 - logging your system and if they are
287:44 - failing to log in
287:45 - so what information is stored in that
287:47 - directory well it's got
287:50 - attempted logins so let's go ahead and
287:52 - fail a couple of logins so we can see
287:55 - what that looks like
287:58 - so
287:59 - i could do a
288:01 - tail
288:01 - minus f secure
288:05 - see where it starts i'll pull the number
288:07 - terminal right here
288:11 - and now i'm going to fail a few logins
288:13 - so i do uh
288:15 - ssh
288:16 - [Music]
288:20 - yeah sure
288:21 - password nope
288:23 - nope
288:26 - and you can see that it is failing to
288:28 - log in
288:32 - and then you can look at this and say
288:34 - well what happened well
288:37 - you can see it failed the password for
288:40 - root and it says where i logged in from
288:41 - so it's actually saying well i choose
288:43 - ipv6 logged in locally
288:46 - okay from localhost that's fine
288:48 - but if you see it from a different ip
288:50 - address
288:52 - what tends to happen is there are a lot
288:53 - of
288:55 - script kitties out on the internet and
288:57 - they are using these
288:59 - lists of passwords and they'll just
289:01 - there and guess your passwords and well
289:04 - try to use your password
289:05 - and they grab all the common passwords
289:07 - and if one of them goes through then
289:08 - you'll get it hacked into and it'll be
289:10 - over
289:11 - so don't pick a commonly
289:14 - common bad password or bad things can
289:16 - happen
289:19 - so
289:20 - do that all right um can i use the
289:24 - information to identify hackers you know
289:26 - yeah you can you can see that clearly i
289:28 - came in from poland colon one which was
289:30 - my ipv6 localhost
289:34 - can the information done by hazard users
289:37 - who are doing things
289:39 - or can identify users
289:41 - who are doing things they should not do
289:43 - yeah sometimes it depends on what you
289:45 - mean by identify users also um sometimes
289:48 - they are trying to switch over to root
289:51 - when they're not supposed to
289:52 - and that could show up
289:55 - sometimes
289:57 - the other things that happen but what it
289:59 - really tells you is what user is trying
290:01 - to do it or what ip address is trying to
290:02 - do it it doesn't tell you who the person
290:04 - was or where they came from
290:08 - can i use the information to detect
290:09 - system compromise well sometimes
290:12 - sometimes you can't sometimes all you
290:14 - can see is that they were attacking your
290:16 - system and trying to get in
290:18 - but that doesn't mean they got in there
290:20 - can i use the information to identify
290:21 - users who forgot their passwords
290:23 - maybe
290:25 - you can see who's failing login does
290:26 - that mean for the password no
290:28 - does it mean that they're a hacker no it
290:32 - could be either one it could be other
290:33 - things as well
290:34 - it could be their cat jumping on the
290:36 - keyboard we don't know
290:37 - all you know is that someone is failing
290:39 - login and that's all you see there
290:44 - what does it mean to rotate logs there
290:46 - is a
290:47 - program you can saw called log rotate
290:49 - and what that does is it will take all
290:52 - of your log files or many of them and
290:55 - every week or whatever set period time
290:57 - you want it will rotate the logs and
291:00 - what that means is it will take the
291:02 - existing log file and move it to a new
291:04 - file with a
291:06 - number extension
291:08 - and then it will create a new file and
291:10 - what happens by doing that is you can
291:12 - then decide how long you want to keep
291:14 - logs for and if you want to just let
291:16 - logs disappear after a month
291:18 - and then your system might not run out
291:20 - of space and might not crash
291:24 - can the log searching process be
291:26 - automated because i can look at those
291:28 - large right there
291:29 - and there is a
291:31 - tool called log watch
291:33 - which you can install which will
291:36 - go through once a day a little crime
291:38 - daily thing scan through it and figure
291:40 - out if there's anything that looks
291:41 - suspicious and then send you an email to
291:44 - let you know what things can or are bad
291:48 - can logs be stored on a different
291:49 - machine
291:50 - yes they can
291:52 - so your logging utility is usually your
291:54 - syslog syslike program and they're
291:56 - different syslag programs but your
291:58 - syslog program can be configured to send
292:00 - your logs to a different machine
292:03 - which can be useful if you want to save
292:05 - your logs you can also configure your
292:07 - linux machine to receive logs from other
292:10 - systems so you have your cisco routers
292:12 - and switches all send their logs to this
292:14 - machine
292:15 - and get them all consolidated in one
292:16 - safe location then if the router
292:18 - switches get hacked
292:19 - and the logs get messed up well they're
292:21 - already on this machine they're gone
292:23 - so you've got a copy and they're safe
292:28 - cues
292:29 - what is a queue
292:31 - well q is a line right it's a british
292:33 - word for line kind of you just queue up
292:36 - and well that's what a q is
292:39 - so what is it on the computer well a
292:41 - computer is basically a line you have
292:44 - these things that are getting ready to
292:46 - do something
292:48 - so you
292:49 - get ready
292:50 - you can have your mail cues and things
292:52 - of that
292:53 - so then what's a spool well a spool is
292:55 - when you are
292:57 - you think of like a spool of thread or
292:58 - something things are wrapped around it
293:01 - basically just kind of feeding things
293:02 - through something you're spooling it
293:03 - through so spooling
293:05 - your print jobs from your application to
293:08 - your
293:10 - print
293:12 - daemon which then spools it off to your
293:14 - print
293:15 - server or to your printer and it
293:17 - eventually gets printed
293:19 - that's spooling passing things through
293:22 - and cues and spools can kind of be
293:24 - thought of as similar things they're a
293:26 - little different but they are
293:28 - used for the same kind of purposes
293:31 - so what cues are used on a linux system
293:36 - well let's take a look so i clear my
293:39 - screen there
293:40 - jump down to the bar and there is a var
293:42 - spool directory
293:45 - in this var spool directory you can see
293:47 - a couple different things
293:49 - we can see
293:50 - var spool post fix
293:53 - var spool mail
293:55 - var spool
293:56 - cups var spool lpd
293:59 - vars blue cron like lots of different
294:01 - things
294:02 - so postfix is my mail server
294:05 - my mail directory is my well incoming
294:08 - mail
294:09 - lpd and cups are both for print services
294:13 - so that's kind of nice cron and at and
294:15 - anachron are all for timed task
294:18 - management
294:19 - so
294:20 - yeah you kind of get an idea there
294:22 - and let's take a look at the
294:26 - mail directory
294:28 - oops cd mail
294:32 - you can see there is a joseph and an rpc
294:35 - but joseph is empty
294:38 - if i were to have a mail client
294:41 - installed
294:42 - um i can do a mail which should mail
294:45 - joseph
294:48 - and i have a subject say
294:50 - something
294:53 - and say
294:54 - hey
294:56 - there
294:57 - i have a period myself
294:59 - and close it and then if i take it
295:01 - around
295:02 - something i see but just got mail
295:06 - so i just sent him mail and it went into
295:08 - this
295:10 - mail spool thing so if i cut out my
295:13 - joseph file i can see all of the mail
295:16 - that got sent to him
295:18 - so you can see who it's from i mentioned
295:20 - about where it's to
295:22 - subject
295:24 - um the from line and then the contents
295:26 - of the email all showing up right there
295:28 - in this
295:30 - mail thing if i send another email it
295:31 - will show up in the exact same file it
295:33 - just added to the end
295:36 - if joseph logs in he can then read his
295:38 - mail and he'll pull it out of this file
295:40 - and into his home directory
295:44 - so that's that directory
295:48 - all right what about um
295:52 - cups you can see it's temporary stuff
295:55 - here
295:57 - lpd
295:59 - you know it's basically the same thing
296:02 - they're just printing services if i go
296:04 - into
296:05 - postfix though you'll see something more
296:08 - exciting
296:09 - it's got a lot of different directories
296:11 - you've got the incoming you've got the
296:12 - outgoing stuff
296:14 - the bounce directory
296:16 - well if you think about it a mail server
296:18 - is a lot more complex than you might
296:20 - think
296:22 - i guess if you think about it yeah so
296:25 - what happens well
296:26 - you drop your mail into your
296:29 - your uh program this mail program it
296:32 - puts things in here
296:33 - it looks at them it tries to send the
296:36 - mail
296:37 - it receives mail if it can send mail it
296:39 - sends it if it can't send it it might
296:41 - have to sit there and defer it or bounce
296:43 - it or
296:45 - something else
296:46 - it depends on what's going on and so
296:48 - this keeps track of every single piece
296:50 - of mail at what state it is going
296:52 - through this
296:53 - mail system
296:56 - so that can be useful
296:58 - so let's jump back over here
297:02 - so where is incoming mail stored where
297:04 - we just looked it's in the
297:06 - var spool
297:08 - and then you have to decide which one
297:10 - are you looking at what do you mean
297:11 - incoming is it
297:12 - incoming that's already arrived or
297:14 - incoming that's
297:15 - incoming it's incoming be in the postfix
297:18 - directory if it's using postfix
297:20 - uh i'm going to be in postfix as well so
297:23 - var
297:24 - spool postfix but once it has gone
297:27 - through postfix and been processed it'll
297:30 - get put into var spool mail
297:34 - why do i care about mail
297:35 - well lots of different tasks and things
297:38 - on the system will use mail as a way to
297:40 - communicate with the
297:43 - users
297:44 - so
297:45 - whenever you have cron jobs that produce
297:47 - output it creates mail whenever you have
297:49 - log rotate
297:51 - well not rocket road table log watch
297:53 - looking at the logs and finding problems
297:56 - it'll report these log errors or these
297:59 - suspicious behaviors and things you can
298:01 - see
298:02 - to your mailbox so you look at it
298:05 - why is mail stored in cues well it has
298:07 - to do a lot of waiting and moving
298:09 - and so you really need it in queues
298:14 - where are the print jobs stored
298:17 - well they are stored in that spool
298:19 - directory right the var spool
298:23 - cups is our print server
298:25 - right now i don't have the print server
298:26 - configured for any printers
298:28 - but if it were
298:31 - you might see some stuff in there
298:33 - and if i was sending print jobs through
298:35 - you'd probably see that as well
298:37 - so why are print jobs put in a queue
298:39 - well
298:40 - printers don't always have enough space
298:42 - for all the print jobs that they receive
298:44 - all at once and so you send it to a
298:46 - queue
298:47 - and the
298:48 - spool cue
298:49 - slowly feeds it off to the printer as
298:51 - the printer is ready for another job
298:54 - so that can be important make sure that
298:57 - you don't lose jobs otherwise if you
298:58 - send too many jobs and it can't hold
299:00 - them all they get lost
299:03 - so that's why it's important
299:05 - and that's our little
299:07 - quick thing on
299:10 - system logs and queues
299:14 - linux installation
299:17 - so we're going to talk about sent os
299:19 - sent to us is based on the source code
299:21 - of red hat enterprise linux rel
299:25 - the centos
299:27 - distribution is community based
299:29 - and
299:30 - it does get some support from red hat in
299:32 - the form of paid developers red hat pays
299:35 - for red hat developers they also pay for
299:37 - fedora developers and they also pay for
299:41 - centos some of the centos developers
299:45 - so where does it fit in in the
299:46 - distribution families there are a couple
299:48 - of different major sources of
299:51 - well
299:53 - linux distributions
299:54 - you've got the source code based linux
299:57 - distributions that would include things
299:58 - like slackware which one of the oldest
300:00 - you have gen2 and arch and even android
300:03 - is kind of a source code based linux
300:05 - distribution
300:07 - then you have the whole red hat family
300:09 - red hat family includes fedora which is
300:12 - kind of their development suite you have
300:14 - centos which is a
300:17 - version of red hat with a lot of the
300:19 - proprietary
300:21 - stuff and branding removed there is
300:23 - oracle which is basically the same thing
300:26 - as centos except it's uh
300:28 - paid for by the oracle
300:30 - company there
300:32 - red flag which is the
300:35 - linux distribution put out by
300:38 - china and then there's also things like
300:40 - open souci
300:42 - so these are all in the red hat family
300:44 - so they all have they all have a lot of
300:46 - similarities they all have the same red
300:48 - hat package management system
300:51 - so you can identify them that way then
300:53 - there is the debian family the debian
300:54 - family would include the
300:56 - well debian
300:58 - but you also have ubuntu and mint
301:03 - basically you have debian
301:06 - and some people thought well it's kind
301:07 - of complex so let's make it a little
301:09 - better and so then you have ubuntu
301:12 - which based off that then they decide
301:14 - well that's a little bit too complex so
301:15 - they added a little bit more they gave
301:17 - some more proprietary drivers you have
301:19 - mint
301:20 - and then you have other distributions
301:21 - such as cali which is your penetration
301:24 - testing distribution which also is based
301:26 - off of the
301:28 - debian family probably based off of
301:30 - ubuntu most directly
301:34 - all right when you're doing an
301:35 - installation the first thing that you
301:37 - come across is you have the anaconda
301:40 - installer so anaconda is just the name
301:42 - of the installer but red hat based linux
301:44 - distributions such as centos linux use
301:47 - anaconda as the installer so you'll find
301:50 - that a lot of these distributions have
301:52 - an installation
301:53 - wizard
301:54 - that looks the same that's
301:56 - anaconda and the content
301:59 - is an installer written in python it's
302:01 - got some c parts as well
302:03 - but it is responsible for making sure
302:05 - the operating system is correctly
302:06 - applied to the machine put in place
302:08 - you have the bootloaders and everything
302:10 - else in place and it boots up anaconda
302:13 - works great
302:15 - some of the time sometimes it fails
302:17 - it fails
302:19 - well a lot more than the actual linux
302:22 - distribution will fail when it's running
302:24 - so you gotta be careful with that
302:26 - sometimes you have to start over but
302:27 - that's usually okay
302:30 - when you're in anaconda you have to
302:31 - configure networking
302:33 - you need to make sure you configure a
302:34 - hostname for the machine every machine
302:36 - should have its own hostname don't stay
302:38 - with localhost
302:40 - make sure you have a host name
302:42 - you want to make sure the machine has
302:44 - either dhcp or static
302:47 - manual addresses configured you can go
302:49 - in there and configure it up
302:52 - make sure you have a set if you do
302:54 - dhcp you have to make sure that you have
302:56 - a dhv server in the network it's going
302:58 - to be
303:00 - residing in
303:01 - if it is not doing dhcp then you need to
303:03 - make sure you configure all the
303:05 - important parts of static or manual
303:07 - address configuration you need an ip
303:09 - address you need a mask you need to have
303:11 - a gateway and you need to have a dns
303:13 - server
303:15 - also after you configure the networking
303:18 - you want to make sure you activate the
303:19 - interface so that it will come up when
303:21 - you start
303:23 - you want to make sure you configure the
303:24 - date and time well it's not really date
303:26 - and time you configure it's more setting
303:28 - the time zone
303:29 - that's kind of the important thing you
303:31 - want to make sure the time zone is set
303:34 - and it's best to set your time zone
303:36 - after you've already configured
303:37 - networking
303:38 - so it'll automatically decide that you
303:40 - have networking and it will use network
303:42 - time
303:43 - network time provides the ntp protocol
303:47 - or the network time protocol to allow it
303:49 - to synchronize with time servers and get
303:52 - updates automatically
303:54 - normally it saves the time
303:56 - on your machine as utc time
304:00 - basically the greenwich mean time versus
304:02 - the time windows on their hand stores as
304:05 - local time so what's written to the
304:07 - hardware
304:08 - might be different for windows and linux
304:11 - and that can cause problems sometimes
304:13 - if you have a dual boot machine or
304:15 - machine that uses both operating systems
304:20 - software selection you want to make sure
304:22 - you select which software needs to be
304:23 - installed
304:25 - so when you're starting the easiest
304:27 - thing to do is to select the gnome
304:29 - desktop
304:30 - gnome desktop will give you all the
304:31 - essentials get you a gui so you can have
304:33 - this
304:34 - clicking ability the ability to do
304:37 - well easier things
304:39 - however linux was designed mostly to be
304:42 - run without a gui
304:44 - gui has been built
304:46 - afterwards and they're they're nice and
304:48 - they can be very pretty
304:50 - but
304:51 - you don't really want to go if you're
304:52 - running a server
304:54 - so in a production environment you want
304:56 - to start with a minimal install and just
304:58 - add the features you need and not have
305:00 - everything else because there are
305:01 - security issues
305:03 - if you have too much
305:06 - any software you missed during the
305:08 - installation can be added after
305:10 - as long as it's not something like
305:11 - network drivers
305:14 - because you need the network
305:16 - installation destination so anaconda can
305:20 - automatically create petitions for you
305:22 - or you can create them manually yourself
305:27 - so there are two main kinds of
305:29 - partitions you will see you can see the
305:30 - standard partitions you can create those
305:32 - are your normal fixed length partitions
305:36 - with older style
305:38 - device names things like slash dev slash
305:42 - sda1 which you don't need to worry about
305:45 - or you can use the lvm partitions
305:47 - lvm partitions basically creates this
305:50 - giant
305:51 - well
305:52 - linux volume management partition
305:56 - and that partition is kind of a standard
305:57 - position and then within that you create
306:00 - these
306:02 - blocks
306:03 - that you can then use
306:05 - and
306:06 - that's
306:07 - that allows you to be more flexible
306:09 - resizing and adding things and allowing
306:13 - you to span multiple drives
306:16 - much easier
306:18 - when you are configuring
306:21 - your petitions there are lots of
306:23 - different directories you can consider
306:25 - to have as separate partitions normally
306:27 - you want to have a root partition
306:29 - which is the slash you want to have your
306:32 - partition for virtual memory which is
306:34 - your swap
306:35 - and you also want to have a partition
306:37 - for the bootloader
306:39 - the slash boot
306:41 - that also includes things like the
306:43 - kernel and initial ram disk so those
306:45 - three are your
306:47 - general three you have sometimes you add
306:49 - more the var directory contains logs and
306:52 - sometimes you can have problems if your
306:54 - logs fill up and it takes down your
306:55 - entire server so some people put it as a
306:57 - separate partition to prevent that from
306:59 - happening
307:02 - when you are
307:04 - done and you start the installation
307:06 - process
307:07 - you are then given the option to create
307:08 - users the main user for the system is
307:11 - called root so root needs to have a
307:13 - password needs to be nice and secure
307:16 - the root user has all power
307:18 - as far as the users go on the system and
307:21 - can do many many damaging destructive
307:23 - things
307:25 - you can also have additional users and
307:28 - additional users are very good to
307:31 - run on the system because they don't
307:33 - have all power which means that if they
307:35 - make mistakes they don't necessarily
307:37 - cause as much problems
307:40 - these users could also be
307:43 - administrative users so what happens is
307:45 - if you click the check box to make it an
307:47 - administrative user it will add the user
307:50 - to the wheel group so there are groups
307:52 - and the wheel group allows members to
307:54 - run
307:56 - commands as root using the sudo command
307:59 - so you type sudo space name the command
308:02 - it will then usually prompt you for the
308:04 - user's password and then after that they
308:07 - can run the commands as root
308:12 - when you are done with the installation
308:15 - sometimes you see a license agreement
308:17 - portion if you're doing minimal install
308:18 - you don't necessarily see it sometimes
308:20 - you do
308:21 - but
308:22 - you need to be aware that linux comes
308:25 - with the license like any other
308:26 - operating system it comes licensed
308:28 - and most of the stuff most of the
308:31 - packages you get on linux are
308:33 - distributed
308:35 - under a free software open source
308:37 - license
308:39 - free software licenses require all
308:41 - derivative works
308:42 - be distributed with a similar license so
308:46 - if you have access to modify it then
308:48 - this derivative license means that
308:50 - anybody else
308:51 - when you redistribute it has the same
308:54 - rights you received
308:56 - so you have to provide those same rights
308:58 - open source licenses allow you to see
309:00 - and modify the code
309:02 - and that's basically what to do
309:04 - now
309:06 - free software licenses are a special
309:08 - type of open source license slightly
309:09 - more restrictive but it makes for
309:13 - more security of the
309:15 - source code in the long run
309:20 - once you have your system going
309:22 - you should probably update it most
309:25 - linux installation disks are not
309:27 - absolutely new and there are updates
309:30 - that will need to be applied so the
309:32 - first thing you should consider doing is
309:34 - updating your updating system
309:37 - updating software so you can type in yum
309:39 - update yum
309:40 - yum is your updater
309:42 - so you want to update yum first
309:46 - now after that something you need to
309:48 - keep in mind is that there might be
309:49 - updates that include well
309:52 - packages
309:54 - with libraries
309:55 - that are part of your gui
309:57 - and you do not want to update your gui
309:59 - from within site from within your gui so
310:01 - you want to make sure you get out of it
310:03 - you can press the control alt f2 key
310:05 - sequence to drop into a terminal
310:09 - back
310:11 - place where you can type in commands and
310:13 - not be inside the gui you can also press
310:15 - ctrl alt f1 to switch back into the gui
310:19 - on older versions of linux or other
310:21 - versions of linux
310:22 - sometimes it's ctrl alt f6 or ctrl f7 to
310:26 - get into your gui
310:28 - just make sure you try a few you'll
310:30 - figure it out
310:31 - once you are outside your gui
310:34 - you want to update your system
310:36 - so i recommend you don't even log into
310:38 - your until your system is fully updated
310:40 - but just type in yum update and that
310:42 - will update your system
310:44 - and that is it for this
310:48 - lecture
310:50 - network file system or nfs
310:53 - the nfs protocol was developed by sun
310:55 - microsystems which is now
310:58 - oracle
310:59 - in 1984.
311:01 - it was built on the open network
311:02 - computing remote procedure call
311:05 - onc rpc
311:07 - it has some open standards
311:09 - these are rfcs 1094
311:13 - 1813 3010 3530
311:17 - 56 61.
311:19 - so you can look those up and look at the
311:21 - protocol and find information nfs was
311:25 - originally just a signed micro systems
311:27 - thing and then it went to other
311:30 - unix distributions made it to
311:32 - things like linux and mac os x and
311:36 - eventually to windows
311:38 - so it's available all over the place
311:40 - and it's pretty good
311:43 - so in order to get nfs running you need
311:46 - a couple of useful utilities
311:48 - nfs utils is a package you can
311:51 - install which provides nfs
311:53 - you also probably want to have man pages
311:56 - this is in general for everything
311:59 - you want to have man pages for
312:01 - well reading the manned documentation
312:05 - the nfs service needs to be started
312:08 - after the remote procedure call service
312:11 - is running if you don't have it running
312:14 - bad things happen
312:16 - so
312:17 - on a centos 7 machine you want to do a
312:20 - system ctl start rpc bind
312:23 - and start that service
312:25 - you also want to
312:27 - make sure that
312:30 - if you wanted to start automatically at
312:33 - boot time you do a system ctl enable rpc
312:37 - bind and make sure it's there as well
312:39 - nfs should only be started after rpc
312:44 - once you have rpc running you can do a
312:46 - system ctl start nfs server and get the
312:49 - server up and going
312:51 - you can also enable that one as well to
312:52 - make sure it's running at boot time
312:57 - now the nfs server
312:59 - needs to have a list of directories it's
313:01 - exporting these directories are listed
313:03 - in the etc exports
313:06 - file
313:07 - so the basic format is you type in your
313:11 - share name that's the directory location
313:14 - that you want to be exporting
313:15 - and then you want to decide well you
313:17 - list who you are exporting it to if you
313:20 - want to list export to everybody you
313:21 - just put a star there
313:23 - and then
313:24 - inside the permissions you list
313:27 - well information about what permissions
313:29 - you're exporting it as so if it's read
313:31 - only you do ro if it's read write you do
313:34 - rw if you want to do something else you
313:36 - put other permissions in there as well
313:39 - for the exporting
313:41 - so
313:42 - once that's there you can use the export
313:45 - fs command to actually export the
313:47 - directories usually you type in export
313:49 - fs space dash a to export all of your
313:55 - shares that are being shared in that etc
313:57 - exports
313:59 - file
314:00 - you can type in the export fs command by
314:02 - itself to then get a listing of which
314:04 - directories are being exported
314:09 - nfs doesn't really work well
314:11 - if you cannot get through the firewall
314:13 - so you need to make sure you allow it to
314:15 - get through the firewall
314:16 - so
314:18 - you go in there and you use the firewall
314:21 - cmd
314:23 - firewall.cmd command
314:25 - and you give the options you can give it
314:27 - the
314:28 - zone equals public that's actually
314:30 - optional you can it's just default
314:32 - but you want to do an ad dash service
314:35 - equals rpc bind
314:37 - just like it's displayed here so it's
314:39 - dash add dash service equals rpc dash
314:43 - bind that will allow the rbc binding to
314:46 - get through you also want to add the
314:48 - nfs service through
314:51 - now
314:52 - these are both great
314:54 - if you
314:55 - then restart your firewall they will no
314:56 - longer be there so you want to make sure
314:58 - you use the dash dash permanent option
315:01 - if you want them to be written to the
315:03 - firewall configuration file and be there
315:06 - after the firewall is rebooted
315:10 - all right you can then verify they're
315:11 - there you can use the firewall cmd
315:14 - command dash dash list dash services to
315:18 - see which services
315:21 - are there you can always use the
315:23 - firewall cmd space dash dash list all
315:27 - command to list all of your file rules
315:30 - i like the bottom one better because it
315:33 - gives me more of a
315:34 - well a big picture of what's actually
315:36 - going on
315:39 - okay
315:40 - once again
315:41 - um to make services available at boot
315:44 - time you need to make sure the system
315:45 - has a proper symbolic link for you to
315:48 - run
315:49 - run it
315:50 - so each run level has a set of symbolic
315:54 - links
315:55 - in centos 7 they have simplified it in
315:59 - earlier versions
316:00 - with the init before you had the system
316:02 - d
316:03 - you had these
316:05 - well seven red levels zero through six
316:08 - zero being halt six being reboot and
316:12 - one being just your
316:14 - basic system three being your multi-user
316:16 - system five being your gui and they
316:18 - decided to simplify this down to just a
316:21 - couple so you got your your multi-user
316:23 - one and your
316:25 - gui one
316:26 - and
316:28 - what happens is when you use the
316:29 - systemctl command with enable
316:32 - it will create a symbolic link from that
316:35 - run levels directory over to the actual
316:38 - script that starts
316:40 - so you just do a system ctl enable
316:43 - and enable your services the rpc bind
316:47 - and your nfs server
316:52 - when you want to mount nfs shares and i
316:54 - would recommend mounting nfs shares
316:57 - as a test before you put it in anything
316:59 - like your
317:00 - file system table fstab
317:03 - you want to make sure you can mount them
317:04 - manually so after the remote server has
317:07 - the shares exported and the nfs server
317:09 - is running and the firewalls out of the
317:11 - way you can mount the shares
317:14 - so
317:15 - you just type in mount
317:17 - the remote server's name or ip address
317:20 - colon the share or the directory being
317:22 - exported
317:23 - and then the amount point you want to
317:25 - mount it at so the directory name of the
317:27 - location you want to mount it to
317:30 - so if i had
317:34 - let's say a friend who was exporting his
317:36 - music files and i wanted to see the
317:39 - music files
317:40 - assuming this is all legal music files
317:42 - of course
317:44 - he might be exporting it from
317:48 - myfriend.com or example.com and it might
317:52 - be slash music directory
317:54 - and i might want to mount it into my
317:59 - local music directory so i might type in
318:02 - mount space
318:04 - example.com
318:06 - colon
318:08 - slash music space slash local music
318:13 - and then it would mount up and hopefully
318:15 - everything worked perfectly and smoothly
318:22 - all right so in addition to just being
318:25 - able to manually mount things sometimes
318:27 - you want to have it automatically mount
318:28 - on boot time
318:30 - this is especially important for
318:32 - situations where you have a machine
318:35 - that is getting its home directory from
318:37 - a server so you have the server
318:39 - exporting the slash home directory it
318:41 - might be mounting the home directory
318:42 - from the server and you want to then go
318:44 - into the etc fs tab file
318:47 - and
318:48 - mel
318:51 - make sure it's mounting and there is a
318:52 - standard format for all of the mounted
318:54 - partitions you want to give it the
318:56 - device name the mount point the type
318:59 - your options
319:01 - the dump
319:02 - number and the
319:04 - file system check number
319:07 - the device is the server
319:10 - and
319:12 - the colon and the share so if you're
319:14 - going from example.com
319:17 - home
319:18 - then the mount point
319:21 - would then be where it's mounted to so
319:23 - maybe something like slash home
319:25 - the type would be nfs
319:27 - and then you have your options any
319:29 - options for mounting whether or not you
319:31 - want to allow it to
319:33 - mount smoothly or
319:36 - if you wanted to make sure it's got this
319:37 - hard
319:38 - hard mounting
319:40 - whether or not you want it to crash when
319:41 - it goes down
319:43 - usually just defaults
319:45 - and dump and file system check usually
319:47 - just leave zeros
319:49 - anyway you can read all about using
319:52 - the fstab file and the formatting in the
319:55 - man pages which you should have because
319:57 - you have installed the man package
320:00 - when you're troubleshooting you want to
320:02 - verify that your ip address is correct
320:05 - so go take a look at the ip address make
320:07 - sure it's correct
320:08 - make sure the app address you are
320:10 - but the server is correct make sure you
320:13 - are in the same network things like that
320:16 - verify that the services are running
320:18 - you want to make sure your services
320:20 - the server is exporting everything it's
320:22 - running you can use netstat you can use
320:26 - export fs to make sure it's exporting
320:29 - verify the firewalls on the way you can
320:30 - use the firewall cmd
320:33 - space dash
320:35 - list all command to see what's actually
320:37 - being
320:38 - allowed through the firewall
320:40 - you want to make sure that the remote
320:42 - server is up and you can ping things
320:45 - you can use tools like nmap
320:47 - you can install nmap and use that also
320:49 - to verify ports are available
320:52 - when you are scanning the remote server
320:55 - so good luck with your nfs installation
320:59 - samba
321:01 - the server message block
321:03 - smb protocol was originally designed at
321:07 - ibm for use in dos operating systems
321:10 - microsoft started working with it in
321:12 - 1990 and has incorporated in windows
321:15 - since windows 311 which was windows 4
321:18 - work groups the sama package implements
321:22 - smb and uses it for communication with
321:24 - windows devices
321:27 - the smb protocol has many security
321:30 - concerns
321:32 - the sma gola has received many security
321:34 - updates since windows vista however
321:37 - it is known to be a security risk
321:39 - because of older older implementations
321:41 - and even some newer bugs
321:44 - we can use smb to hack into windows xp
321:46 - and windows server 2003 machines
321:51 - with windows xp
321:52 - all you had to do was have file sharing
321:54 - ports open through the firewall
321:57 - or just have your file turned off which
321:59 - was very common for gaming back in the
322:01 - windows xp days
322:03 - windows server 2003
322:05 - came right out of the box
322:07 - open for attacks and complete takeover
322:10 - through the s p protocol
322:11 - many major companies including sony have
322:13 - been hacked through the s b protocol
322:17 - there are a lot of useful packages in
322:20 - samba
322:22 - on the samba set there is the samba
322:24 - package which installs samba and
322:26 - dependencies you have the samba client
322:30 - which provides the smb
322:32 - client which allows you to navigate
322:34 - through remote samba share and download
322:36 - and upload files
322:37 - you have sifs utils which allows you to
322:40 - mount samba shares
322:42 - and
322:43 - you can even set it up so the amount
322:45 - automatically in your fstab file
322:49 - the samba service can be started using
322:51 - the system ctl command
322:53 - just use systemctl start smb
322:56 - and it will start the samba server
323:00 - you can also stop restart and check
323:02 - status if you wanted to start at boot
323:04 - time you just use the system ctl enable
323:08 - smb.service to enable it
323:13 - in order to allow other machines outside
323:15 - of your individual server to mount your
323:18 - samba shares you need to open up a hole
323:21 - in the firewall
323:22 - so
323:23 - the easiest way to do that is to add the
323:26 - samba service so you can use the
323:27 - firewall cmd command you can add the
323:30 - zone if you want then dash add dash
323:33 - service equals
323:34 - samba
323:36 - you can verify the service is present in
323:38 - the firewall using multiple commands my
323:40 - favorite being the bottom right there
323:41 - which was areas firewall dash cmd space
323:46 - dash dash list dash all which will list
323:48 - all of the services that are available
323:51 - through the firewall
323:55 - when you want to configure samba the
323:57 - main configuration files are found in
323:59 - the etc samba directory the most
324:02 - important of those configura
324:03 - configuration files is the
324:05 - smb.conf
324:07 - you might be able to find a file like
324:09 - smb.com.example
324:11 - and you might want to copy that over the
324:13 - smb.com file before you start editing
324:16 - and then you can go in and set all kinds
324:18 - of configuration settings because
324:20 - they'll be available and easy to see
324:23 - here is an example of an excerpt of
324:26 - well part of the smb.com file
324:30 - we have a
324:32 - share called software which is being
324:34 - exported that share is
324:38 - based on the slash share slash software
324:41 - directory so whatever files in that
324:43 - slash share
324:45 - software directory are being exported
324:48 - when that directory shows up on a remote
324:50 - machine it will be called windows
324:52 - software packages
324:53 - it is public so you can see it
324:56 - it is writable so it's read write but it
324:58 - is not printable so it's not a printer
325:00 - so that's the information you see right
325:02 - there
325:05 - when you want to
325:07 - share your samba shares
325:10 - you might have issues with se linux and
325:12 - their context se linux is very good for
325:15 - protecting you from very bad mistakes
325:17 - you might make
325:19 - but
325:19 - files shared using samba should have the
325:22 - correct selinux context type of a samba
325:24 - underscore share underscore t
325:27 - in order to be able to be viewable by
325:30 - the samba service
325:31 - to change the context of the file you
325:33 - can use the ch con command which is
325:36 - change context
325:37 - so chcon minus t for the type
325:41 - samba underscore
325:43 - share underscore t and then your file
325:45 - name or directory name and it will
325:47 - change the context type so that the
325:48 - samba service can see the file
325:52 - if you're having trouble with samba it's
325:54 - good to verify the ip addresses are
325:56 - correct you want to verify that services
325:58 - are running you can use netstat to view
326:01 - that
326:02 - you can verify the firewall is not the
326:04 - way using the firewall dash cmd
326:07 - space dash dash list dash all command to
326:10 - see which services are allowed through
326:11 - the firewall you can verify the sc linux
326:14 - context is set correctly you can use
326:16 - this ls
326:17 - minus
326:18 - capital
326:20 - z or ls minus al capital z and that will
326:23 - tell you the context type of all the
326:25 - files in the directory or you can do ls
326:28 - minus capital z
326:30 - of the file to list its context type
326:33 - if it's directory you want to add a d in
326:35 - there so there's all kinds of things
326:37 - you can verify the remote host is up
326:39 - using ping you can verify remote ports
326:42 - are open using nmap from a remote
326:44 - machine
326:45 - and you can also check the logs to see
326:46 - what's happening
326:48 - and that is your overview for samba
326:53 - apache web server
326:56 - the hypertext transfer protocol or http
327:00 - was created by tim berners-lee and his
327:03 - team
327:04 - they proposed the world wide web project
327:08 - in
327:08 - 1989
327:10 - they had a first working version in
327:13 - 1991 and then the
327:16 - rfc that defined it rfc 1945
327:21 - was in
327:23 - however by the time many web browsers
327:26 - were already out there and people were
327:28 - using the web
327:29 - there are multiple rfcs including
327:32 - 2616 which is for the http
327:36 - 1.1
327:37 - protocol
327:40 - the https protocol
327:43 - or the hypertext transfer protocol
327:45 - secure
327:47 - layers the http protocol on top of the
327:50 - ssl and then now tls protocol
327:53 - so
327:54 - ssl
327:56 - 3 is the same thing as tls1 so basically
327:59 - it's just kind of transferring over to
328:01 - the newer ones so you want to make sure
328:03 - you have tls.ssl
328:05 - it was created by netscape
328:06 - communications in 1994 for the netscape
328:10 - browser
328:12 - so netscape navigated browser and
328:15 - used and everyone else started using it
328:16 - it created an industry for signing
328:18 - digital certificates
328:20 - so many companies
328:22 - were able to make money off of this
328:24 - including the ubuntu project was funded
328:27 - by mark shuttleworth who made his money
328:29 - off of this as well
328:33 - security concerns there are some
328:37 - some concerns you should think about
328:39 - um all communication over http is plain
328:42 - text and easily sniffed or wiretapped
328:45 - people can read it they can also inject
328:48 - their own stuff into it some isps are
328:50 - starting to inject
328:52 - ads or javascript into your sessions and
328:56 - break things and that's always nice
328:58 - gotta i gotta know who your isps are web
329:02 - servers and web browsers cannot prevent
329:05 - programmers from making mistakes or
329:06 - malicious users from exploiting these
329:08 - mistakes so you have to keep that in
329:10 - mind
329:13 - the https
329:15 - protocol also has some security concerns
329:17 - there are various ssl and tls protocols
329:20 - with different levels of security
329:23 - so you need to keep that in mind if you
329:26 - get a browser that allows you to have
329:30 - keys of size 0 that's not so good
329:35 - you just need to make sure you know what
329:36 - your browser allows and if you're
329:38 - running a server know what your server
329:41 - is serving
329:43 - certificate authorities are sometimes
329:45 - exploited and used for further
329:47 - exploitation
329:48 - so you need to wear that and then
329:50 - government agencies such as the nsa have
329:52 - promoted protocols with secret
329:54 - vulnerabilities
329:55 - such as random number generators that
329:58 - don't
329:59 - produce random numbers
330:03 - some useful packages include the httpd
330:06 - package
330:07 - which provides the apache web server
330:10 - you have lynx which is a text-based web
330:13 - browser for testing things if you are
330:15 - not running on a
330:18 - on a gui environment
330:20 - sometimes you want to test things from
330:21 - the server and links is pretty good for
330:22 - that
330:23 - also open ssl which allows you to make
330:27 - certificates
330:29 - you can also sign your own certificates
330:31 - you can get the
330:34 - certificate signing request you can then
330:36 - use and send to
330:38 - a third party who will sign them for you
330:40 - so openssl will do that stuff for you
330:42 - mod ssl will allow you to
330:46 - integrate into apache the https
330:48 - functionality and then serve
330:51 - secure web pages
330:54 - the apache web service can be started
330:57 - using system ctl
330:59 - you can use systemctl start httpd
331:02 - you can also
331:03 - stop restart
331:05 - check status and also you have this
331:07 - reload option reload is interesting
331:11 - because what it does is it will send a
331:13 - signal to the server the server
331:16 - is then prompted to re-read its
331:17 - configuration files
331:19 - and the server is actually multiple
331:21 - servers running and when you
331:24 - send this over
331:25 - the main service
331:27 - can re-read the configuration files and
331:30 - respawn new children and then just let
331:32 - the other children
331:34 - well kill them off and then you won't
331:36 - have to worry about it anymore
331:39 - so you can keep your server running
331:42 - while you
331:43 - change configurations which is kind of
331:45 - nice
331:48 - there are
331:49 - some other issues whenever you want to
331:51 - connect to your web server from the
331:52 - outside you need to get through the
331:53 - firewall the firewall is not open by
331:55 - default for the
331:56 - http and https services so you need to
331:59 - open those up you can do that with the
332:01 - firewall cmd
332:03 - command you just need to use the dash
332:06 - add service equals http or https options
332:10 - if you want it to be permanent you can
332:12 - use the dash dash permanent
332:14 - option as well
332:16 - and that will make it so the firewall is
332:18 - open and
332:20 - well
332:21 - permanently open
332:23 - you can use the firewall dash cmd
332:26 - space dash list all command if you want
332:29 - to see which firewall rules are in place
332:32 - and which services are available
332:34 - so you can know if you will be able to
332:36 - get to the firewall
332:38 - the main apache configuration files are
332:41 - found in the slash etc
332:44 - httpd slash conf directory also you have
332:48 - this etc httpd
332:51 - conf d directory which has these other
332:54 - configurations such as user directories
332:56 - and ssl configurations but the most
332:59 - common file you'll work with is the etc
333:01 - httpd
333:02 - conf httpd dot com file this httpd.com
333:07 - file is the main file and there is a
333:10 - directive in that file that loads all
333:12 - the other files in the conf.d directory
333:15 - so in that directory you can
333:17 - well in that file you can configure your
333:20 - apache web server tell it which ports
333:22 - are open you can tell it
333:24 - whether or not
333:27 - it allows certain types of
333:29 - data or other types of pages such as
333:32 - server side and clues and
333:34 - cgi
333:36 - you can turn those things on or off
333:38 - you can also change which
333:40 - directory index files are used when
333:44 - a directory a file is not specified
333:46 - within a directory normally that's
333:48 - index.html but you can have it be
333:50 - index.cgi index.php index.html
333:54 - many different options
333:56 - so
333:57 - you also have a
333:59 - directory
334:01 - setting there where you can change where
334:03 - the
334:04 - directory root is and you can also
334:06 - change your document root
334:08 - your
334:10 - default document root is your var www
334:14 - html directory so you can go there and
334:16 - see your web pages or set your web pages
334:21 - when you are creating web pages there
334:23 - are a couple of sc linux context types
334:25 - you should be aware of
334:27 - the following are some that are used by
334:28 - apache you have this httpd underscore
334:32 - assist underscore content underscore t
334:36 - which is used for regular system wide
334:39 - web pages when you're serving
334:41 - web pages for your
334:43 - web server
334:44 - you can also use cgi scripts and i like
334:48 - cgs scripts a lot and so i think it's
334:51 - very important for me to know the httpd
334:53 - sys script
334:55 - exec t type which you have to set on all
334:58 - of your cgi scripts as well as setting
335:00 - your execute
335:02 - permissions or execute bits
335:06 - if you are not in the normal system
335:08 - directories and you are in user land
335:11 - well user of this user land but in user
335:14 - user home user directories and you've
335:16 - turned that on in your user dir
335:19 - configurations
335:20 - then you can
335:22 - use this httpd user content t
335:26 - or http user script exec t
335:29 - and keep those in mind
335:33 - in addition to those types you also have
335:35 - types for
335:36 - directories whether or not you were
335:38 - allowed to upload files or not upload
335:40 - files and so just keep that in mind
335:44 - troubleshooting
335:46 - so when you are having trouble with your
335:48 - apache web server or web pages it's good
335:50 - to first verify your ip address is
335:52 - correct sometimes it isn't correct
335:55 - sometimes you have dhp you want to make
335:56 - sure it's a static ip address or if
335:58 - you're doing dhp that's fine too but
336:00 - verify the services are running
336:02 - you can use netstat
336:04 - and you can check to make sure they're
336:05 - there and listening verify the the
336:08 - firewall is on the way you can use the
336:09 - firewall dash cmd space dash dash list
336:12 - dash all command in order to verify the
336:15 - firewall is not
336:17 - blocking anything make sure it's open
336:19 - you can use the selinux
336:22 - commands you can use the ls
336:24 - minus al capital z in order to see the
336:27 - context types of files and make sure
336:29 - they are correct
336:32 - sometimes this is really important in a
336:33 - situation where you have sc linux
336:36 - running
336:37 - you have all your permissions set
336:39 - correctly and you think a file should be
336:41 - available but apache just can't see it
336:43 - so se linux also that tends to throw up
336:46 - se linux
336:48 - well errors in the
336:50 - audit log
336:51 - so you can go to var log
336:55 - audit auto dollar i believe
336:57 - to look at the auto logs
336:59 - you can also verify to make sure the
337:01 - remote hose is up and you can ping it
337:02 - you can use map to scan it make sure the
337:05 - ports are open
337:06 - you can also check the apache
337:11 - logs so var log httpd
337:14 - and make sure the access log and error
337:16 - logs don't show anything or if they do
337:18 - show something
337:19 - use that to troubleshoot
337:21 - and you can also check system logs and
337:22 - see if you have trouble starting the
337:24 - apache web server and that is the end
337:27 - for this
337:28 - presentation
337:31 - database servers
337:33 - mariahdb is a database
337:36 - based on an older mysql database
337:39 - it was also created by the same people
337:41 - mirai db is a drop-in replacement for
337:43 - mysql
337:45 - mariah db is a relational database
337:48 - management system so as
337:50 - rdbms
337:51 - and implements the structured query
337:53 - language or sql
337:57 - so here's a little about the history so
337:59 - mariah db
338:02 - well it's kind of a fork
338:04 - um
338:05 - first mysql was created and replaced
338:07 - oracle in many projects especially in
338:10 - open source
338:11 - oracle
338:12 - is not was not very happy with this and
338:15 - it wanted to do something to solve the
338:17 - problem
338:19 - so there was a time when
338:21 - mysql was not financially able to
338:25 - continue on and so that became an issue
338:28 - so oracle was trying to get rid of mysql
338:32 - and it acquired multiple companies that
338:33 - provide libraries to mysql
338:36 - and that was a bit of an issue
338:39 - eventually sun microsystems acquired
338:41 - mysql
338:42 - did the whole white knight thing and
338:44 - saved it from oracle takeover
338:47 - however a little bit later oracle
338:49 - discovered that they could grab
338:51 - mysql
338:53 - java and other things all at once and
338:55 - they bought signed microsystems
338:58 - eventually the developers
339:00 - of mysql
339:02 - decided to fork the mysql code and they
339:05 - formed mariahdb
339:07 - the current vis versions of centos use
339:10 - mariahdb as the database
339:14 - there are a couple of mariah db security
339:17 - concerns first of all the default mariah
339:19 - db installation does not have a root
339:21 - password so you can create users
339:24 - database tables
339:25 - all without setting up a password
339:30 - also this might not be a a major concern
339:34 - security concern but administrators can
339:36 - reset the root password for the
339:37 - databases and get full access if they
339:40 - want to
339:41 - it might actually be a helpful thing if
339:43 - you lose access to your database and you
339:45 - can't get back into it
339:47 - the root user can then help you get back
339:49 - into it
339:52 - there are many useful patches packages
339:55 - there is the mariahdb
339:58 - that is the client programs the mariah
340:01 - db server which is the server
340:04 - and then there is the
340:05 - mysql-python
340:07 - package
340:09 - which provides a way for the python
340:12 - language to communicate with the mysql
340:14 - or more idb
340:16 - servers
340:20 - generally the configurations for
340:22 - mariahdb are just fine and you can leave
340:24 - them alone however if you do want to go
340:27 - in there and make some kind of a change
340:29 - you can go into the etc
340:32 - slash
340:34 - my.cnf.d directory
340:37 - and you can find configuration files in
340:39 - there you can mess with
340:41 - the standard format of the configuration
340:43 - files is a name
340:46 - equals value pairs
340:48 - for example you can type in port equals
340:50 - one two three four five
340:52 - and you can change which port it runs on
340:58 - here are a couple of sample mariah db
341:02 - commands so from the command line you
341:04 - can type in mysql
341:06 - to get into mariahdb
341:10 - you can also do options such as minus u
341:13 - and the user name or minus h and the
341:15 - host name and minus p to prompt for a
341:17 - password
341:19 - and this will get you into the mysql
341:22 - or mirai db
341:24 - databases depending which one you
341:25 - actually have installed
341:28 - so once you're inside you can create
341:30 - databases you just type in create
341:32 - database and the name of the database
341:34 - you want to create
341:36 - and then to actually use that database
341:38 - you use the word use and the database
341:40 - name and it will change your prompt and
341:43 - indicate that you are now inside of that
341:44 - database
341:45 - once you're inside the database you can
341:47 - create tables
341:48 - so here's an example create table people
341:51 - which gives
341:52 - it two columns you have name and age
341:56 - name is a primary key and it is a
341:58 - varchar 250
342:00 - and age is an integer
342:06 - so with those tables here are a couple
342:08 - of sample sql statements you can insert
342:11 - values into
342:13 - that people table you can update
342:16 - the people table and replace
342:18 - information you can do select statements
342:21 - to
342:22 - pull information out
342:24 - and you can also delete records from
342:27 - the table
342:28 - so these are the four basic commands you
342:30 - have insert update select and delete
342:32 - there are other commands
342:34 - obviously but those are the main four
342:36 - you can also do things like insert
342:40 - into the table and then if there are
342:42 - duplicate keys you can just
342:44 - update instead
342:45 - which is very common for things like
342:48 - logs and so i do that quite a bit
342:52 - so if you're using python and you want
342:55 - to do programming here are a couple of
342:57 - pieces of well a bunch of code examples
343:00 - thrown together onto one page
343:02 - you want to import the mysqldb
343:06 - library and you want to make sure that
343:08 - you pay close attention to case here
343:12 - because the case is important you want
343:14 - to connect to it and then once you
343:16 - connect to the database
343:18 - you want to
343:20 - create a cursor a cursor is where you
343:22 - send your commands
343:24 - so you just send your commands you can
343:26 - execute the sql statements
343:29 - and after you're executing the
343:32 - i for you've executed the statements you
343:33 - can sometimes grab back data
343:36 - if you make changes so inserts and
343:39 - deletes sometimes you want to commit
343:40 - that and that is committed not with the
343:42 - cursor but with the actual connection
343:45 - and then when you want to close you can
343:46 - close the connection itself
343:50 - if you're trying to troubleshoot
343:53 - mirai db you want to make sure your ip
343:55 - address is correct if you are
343:57 - going to a different machine which is
343:58 - not usually the case
344:00 - but you could
344:02 - you want to make sure the service is
344:04 - running if it's not running it's very
344:05 - difficult to connect to the database you
344:07 - want to verify the firewall is not in
344:09 - the way if you are going over something
344:11 - normally people just run it on their
344:13 - local machine and they use apache
344:16 - to actually get out
344:18 - so you're interfacing with the web
344:20 - server and the web server is talking
344:21 - directly to the database and so the
344:24 - firewall is not an issue
344:27 - you want to make sure that any sc linux
344:29 - stuff is not changed if it is changed
344:31 - you go and verify things
344:33 - you want to
344:34 - make sure if you're going to roll remote
344:36 - machine that the host is up
344:38 - and make sure that ports are open
344:42 - if they need to be
344:43 - and if there are any problems and you
344:45 - can't figure it out just take a look at
344:46 - the logs
344:48 - most of these things only matter if you
344:50 - are using a remote machine which is very
344:53 - unlikely
344:54 - anyway
344:55 - this is your
344:57 - mariah db
345:00 - or database overview
345:04 - secure shell
345:07 - the secure shell or ssh
345:10 - protocol was created in 1995 to prevent
345:13 - sniffing of telnet and our login traffic
345:16 - at helsinki university of technology
345:19 - ssh is encrypted and telnet gnarly again
345:22 - were both not encrypted and still aren't
345:24 - encrypted
345:26 - so the ssh protocol uses the
345:27 - diffie-hellman key exchange for key
345:30 - generation that it then uses to
345:32 - symmetrically encrypt data
345:35 - many programs use sh to create tunnels
345:37 - and transfer data securely
345:42 - the ssh package is normal or the
345:44 - packages are normally installed on a
345:46 - centos or other linux system by default
345:49 - however if you want to install them or
345:52 - take a look at them they are the openssh
345:54 - server package which provides the server
345:56 - openssh which provides some of the tools
346:00 - the openssh clients which provides more
346:02 - clients and then another useful package
346:05 - which is not actually ssh
346:08 - but is closely tied to it is rsync rsync
346:10 - allows you to synchronize data on two
346:13 - ends so a client and server can
346:15 - synchronize data over
346:16 - ssh we can do it itself without ssh as
346:19 - well
346:22 - when you're configuring ssh there are a
346:24 - couple of configuration files the main
346:26 - ssh configuration files are in the
346:29 - following two
346:30 - files you have the etc
346:33 - ssh sshd underscore config and the same
346:36 - thing without the d
346:38 - the one with the d is for the server and
346:40 - the regular one the ssh underscore
346:42 - config is for the client
346:45 - individuals can also have additional
346:47 - overrides type information for their
346:49 - clients in their
346:51 - dot ssh directory their home directory
346:57 - so some common configuration changes you
346:59 - would see on the server end
347:01 - is disabling root logins which is very
347:04 - important in situations where you're
347:06 - constantly being attacked by people
347:07 - trying to log in your system if you
347:09 - don't want them to have the option of
347:11 - doing a brute force
347:12 - login you can just disable root logins
347:14 - and then they have to log in as a
347:15 - different user and then switch over
347:17 - somehow using
347:18 - sudo or su
347:21 - you could
347:22 - change the port number sometimes people
347:24 - change it from 22 to something else and
347:26 - then they log in with that number
347:29 - you can disable password authentication
347:32 - which means you have to use keys to get
347:34 - in
347:34 - which makes it more secure this is very
347:36 - common
347:37 - amazon web services does this by default
347:40 - it makes it more secure and less likely
347:42 - to be hacked because once again you
347:43 - can't do the brute force logins
347:46 - and you can also
347:48 - do changes to things like x11 x11 is
347:51 - your gui system you could
347:55 - set it up so you can export your gui or
347:57 - not export your gui
348:02 - the
348:02 - secure cell service so ssh is
348:06 - on linux systems openssh
348:09 - and it can be controlled using the
348:11 - system ctl command you can use system
348:13 - ctl with start stop restart status you
348:17 - can enable or disable if you want to
348:19 - either not
348:20 - start boot time or not start boot time
348:23 - and
348:25 - so system ctl start
348:27 - and then the service name which is sshd
348:30 - and you can use the dot service if you
348:31 - want
348:33 - by default ssh is allowed through the
348:35 - firewall to make changes you can use the
348:37 - firewall cmd command
348:39 - and
348:40 - you can either add the service if it's
348:42 - not there you can remove the service
348:44 - or if you want to you can
348:47 - well additionally you can make the rules
348:49 - permanent with the dash permanent
348:51 - note that if you use the dash permanent
348:53 - option it will not change the active
348:55 - firewall settings it will only change
348:57 - the configuration files so when the
348:59 - firewall is restarted it will have the
349:00 - new settings in place
349:02 - you can verify the services are present
349:04 - in the firewall as well using the
349:06 - firewall-cmd command with the dash dash
349:09 - list-all
349:10 - option to see what's in the firewall
349:15 - when you connect to unknown servers ssh
349:18 - prompts you to accept the public key
349:20 - that it is presented with
349:21 - keys are remembered and stored in a file
349:24 - called known hosts
349:26 - and remote keys will change
349:29 - very rarely it's only when the machine
349:31 - is replaced
349:32 - or new keys are generated
349:34 - or if someone's trying to hack you and
349:36 - there's some kind of a man in the middle
349:37 - attack where they're trying to
349:38 - impersonate the server
349:40 - you can manually add and delete entries
349:42 - this is useful when you trust the
349:43 - changes but not so good when you
349:46 - don't trust them
349:49 - ssh has the ability to use keys to
349:51 - authenticate in order to authenticate
349:53 - using keys the client machine needs to
349:55 - create
349:56 - a public private key pair set
350:00 - the public key needs to be installed in
350:01 - the server
350:03 - and the server has a authorized key file
350:06 - in each user's directory that can be
350:08 - used and then you can
350:12 - just log in directly using the
350:14 - authorized key
350:15 - you can create the key pairs using the
350:17 - sh keygen command and then you can
350:19 - install them either
350:21 - using the ssh copy id command or you can
350:23 - manually copy them over and then put
350:26 - them into the authorized keys file
350:30 - here are a couple example incantations
350:33 - of things you can type in you can have
350:34 - an ssh keygen to generate keys you can
350:38 - tell it what type
350:39 - with the minus t option
350:41 - you can copy the key over the public key
350:43 - over to the server using the ssh copy id
350:48 - command
350:49 - you can
350:51 - manually copy it using scp and once you
350:54 - get it copied over there you need to log
350:55 - into that machine and use the cat
350:58 - command or some other command to get it
351:00 - into the authorized keys file
351:04 - if you want to you can also tunnel here
351:07 - are a couple of exciting titling
351:09 - incantations the tar command can create
351:13 - well
351:14 - archive files
351:16 - and this command basically the first
351:19 - command right there
351:20 - you're creating an archive file and the
351:23 - destination of that file is actually the
351:26 - standard out
351:28 - so that kind of works and then what
351:31 - we're doing is we're piping this
351:33 - into the ssh command which is then on
351:36 - the other end using the cat command and
351:38 - redirecting it standard in into a file
351:41 - so what we're doing is creating a tar
351:43 - archive that is being
351:45 - put into a file on the remote machine
351:49 - and you can look at the rest of these
351:50 - things they are kind of a weird
351:52 - incantations but it gives you an idea of
351:53 - some of the things that ssh can do
351:57 - if you want to troubleshoot ssh
352:00 - you want to make sure you that
352:02 - you can connect to the machine that's
352:04 - usually
352:04 - one of the biggest things
352:06 - you could either have the address wrong
352:07 - or you could have the host name wrong
352:09 - you want to make sure the service is
352:10 - running
352:11 - if it's not running
352:12 - then that can be a problem
352:14 - you want to make sure the firewall is
352:15 - open and you can get through it you want
352:17 - to make sure the remote host is up so
352:19 - you can ping it you can use nmap to scan
352:21 - it to make sure the ssh port is visible
352:24 - and you can also be on the server and
352:26 - look at the logs to see if you're having
352:28 - trouble logging in
352:30 - and this is a brief little overview of
352:32 - ssh
352:35 - mail servers most specifically postfix
352:39 - so the
352:41 - simple mail transfer protocol or smtp
352:44 - was published as rfc 788 in
352:48 - late 1981 by john postal who is
352:52 - considered the god of the internet
352:54 - john postal produced many many different
352:56 - standards lots of different rc's have
352:59 - his name on him especially the early
353:01 - ones
353:02 - he
353:03 - disappeared toward the end
353:05 - because he died
353:07 - but
353:09 - he was one of the founding inspirational
353:11 - members of
353:13 - the creation of the internet
353:16 - so this smtp protocol uses plain text
353:19 - commands to communicate with remote
353:20 - servers listening on tcp port 25.
353:25 - you also have webmail and application
353:27 - client programs that send mail
353:30 - and what happens with those is you have
353:32 - this this front end but you still have a
353:36 - mail server in the back end so this
353:37 - local mail server that handles all the
353:39 - communication with the remote servers it
353:41 - sends and receives them
353:44 - and then use the webmail or
353:47 - application clients to
353:49 - retrieve it from the server and send it
353:51 - to the server
353:55 - there are many different directories
353:56 - involved with these mail servers the etc
353:59 - postfix directory contains all the
354:01 - configuration map configuration
354:04 - information for the postfix server
354:07 - you have the var spool mail directory
354:10 - and that one contains all the email that
354:12 - has been received and processed and put
354:15 - into
354:16 - users files so this there's an mbox
354:19 - style file
354:21 - basically just lists all the email
354:23 - messages one after in one long text
354:26 - file so you can go there and grab the
354:30 - mail messages for each of the users
354:32 - and then there is these var spool
354:34 - postfix directory
354:36 - and that's where
354:38 - postfix stores data it's using
354:40 - as is acting as a server
354:42 - all the incoming mail outgoing mail that
354:44 - stores some different folders there are
354:46 - lots of things in the protocol
354:48 - um such as the ability to retry sending
354:51 - mail when the server is down and things
354:54 - like that so it has to maintain and hold
354:55 - things that are still on their outbound
354:58 - direction
355:00 - also inbound is processing and looking
355:02 - at things
355:04 - the var log mail log
355:07 - file is a log that can be used to
355:10 - troubleshoot email related problems all
355:12 - kinds of things show up in there about
355:14 - the mail server and mail messages coming
355:16 - in and out
355:18 - there are some smtp security concerns
355:21 - first of all plain text messages can be
355:24 - viewed in transit so
355:26 - if you are sending or receiving mail
355:28 - anybody along the way between the source
355:31 - and the destination could look at the
355:33 - mail and read it
355:35 - now that doesn't mean you can't encrypt
355:37 - your message inside of your mail
355:39 - but the
355:40 - header data would still be unencrypted
355:43 - so
355:44 - if you keep that in mind all
355:45 - of the messages are plain text
355:48 - if the message itself is encrypted that
355:50 - doesn't mean the headers are encrypted
355:53 - anyone can send unsolicited messages at
355:55 - a very low cost so spam is very cheap
355:59 - you can send all kinds of mail
356:01 - you can claim to be anybody you want
356:03 - there are a lot of different changes in
356:05 - how mail servers are handling this and
356:07 - so they can look at things and say well
356:09 - you're claiming to be from
356:11 - one server but you're actually sending
356:13 - it from a different server and they can
356:15 - mark you as spam
356:17 - and there are other things you can do to
356:18 - try to filter things out
356:21 - also the protocol allows for things like
356:23 - relays which make it easier to spoof
356:25 - sources so you can send mail messages
356:28 - through a server
356:30 - most mail servers now are configured by
356:32 - default to not allow relaying but
356:34 - relaying is still possible and it can
356:36 - still be turned on
356:38 - the messages themselves can carry
356:40 - malicious files or content
356:43 - you add things all the way way back to
356:45 - the islet view virus that was hitting
356:48 - people's machines and then being
356:50 - processed
356:51 - locally and causing all kinds of
356:54 - problems
356:55 - to
356:56 - more malicious
356:57 - more recent malicious things
357:00 - you can have
357:01 - all kinds of
357:03 - tricky messages you could have messages
357:05 - um telling you about a nigerian prince
357:08 - or
357:09 - selling you
357:11 - things
357:13 - claiming to be somebody they're
357:14 - not and
357:17 - yeah those are bad
357:19 - and
357:20 - rejected messages can be used to perform
357:22 - directory harvesting attacks they can
357:24 - just send email messages to everybody in
357:26 - your system
357:27 - and then decide which messages get
357:30 - bounced and which ones don't and the
357:31 - ones get balanced probably mean there's
357:33 - nobody there the ones that don't get
357:35 - bounced well
357:36 - they probably mean there's somebody that
357:38 - somebody is there so you can use that to
357:39 - find
357:41 - who's on the system and then use that
357:42 - information to then try to log into
357:44 - their account
357:45 - by guessing passwords and things like
357:47 - that
357:49 - so some of the useful packages
357:51 - postfix is the smtp mail server
357:54 - you have other things that are related
357:57 - dovecot which we will not talk about
357:58 - much
358:00 - does provide
358:01 - your pop and imap servers so devcott's a
358:04 - nice thing to look at
358:06 - telnet telnet is a great
358:09 - terminal emulation program that allows
358:12 - you to
358:13 - connect to ports and you can use it to
358:15 - tell it to your local host port 25 if
358:18 - you want to walk through the mail
358:20 - protocol and try to figure out what's
358:21 - going wrong
358:23 - alpine
358:24 - is a great email client
358:28 - um it comes from
358:30 - well it's based off of uh
358:33 - pine which was based off of pico and
358:36 - nano is based off of pico
358:38 - so you get this kind of um
358:41 - thing happening here
358:43 - only alpine
358:44 - is a great text based uh
358:48 - email client
358:49 - and you can use it but you have to first
358:53 - install the epel libraries
358:56 - so if you don't have the epel dash
358:58 - release package you'll need to get that
358:59 - in there
359:00 - and then get alpine
359:04 - postfix is available and running on
359:06 - default centos linux 7 machines
359:10 - but is only listening locally
359:12 - so it's receiving localhost type email
359:16 - messages and some of the services use
359:18 - mail as a way to communicate with the
359:20 - administrator so
359:23 - one example would be the cron
359:26 - process whenever there's a cron job that
359:28 - produces output it will send an email
359:30 - message to the
359:32 - user
359:33 - usually root
359:34 - indicating what the output of the
359:36 - command was so normally you write cron
359:37 - jobs have no output unless there's an
359:39 - error and then they produce output and
359:41 - it gets emailed to the administrator
359:43 - but if you wanted to do more than just
359:45 - listen locally you need to make some
359:47 - configuration changes
359:48 - so in order to configure postx to allow
359:50 - external connections you need to edit
359:53 - the etc postfix main.cf file and allow
359:57 - listening on all interfaces so you can
359:59 - scroll down a little ways through that
360:00 - file until you find a section with four
360:02 - lines
360:04 - the top line would be
360:06 - the inet interfaces equals all which
360:09 - will be commented out you need to
360:10 - uncomment that one
360:11 - and you want to take the one this is
360:13 - inet interfaces equals local and you
360:15 - want to comment that one
360:17 - now when you uncomment it make sure you
360:19 - just remove the hash mark don't
360:22 - remove it leave a space there or
360:23 - something because then it won't work so
360:25 - make sure you do it correctly
360:28 - and then once again you have to restart
360:30 - your service
360:32 - so if you want to restart your service
360:34 - you can use the
360:37 - system ctl command
360:38 - so systemctl
360:40 - startpostfix.service you can do
360:43 - systemctl
360:44 - with a start stop restart status
360:48 - to
360:48 - start stop and restart or get the status
360:51 - of your service you can also make sure
360:53 - it starts on boot time within enable or
360:56 - make it not start on boot time with
360:57 - disable now you don't need to worry
360:59 - about enable and disable because it
361:00 - should be running already by default
361:02 - once again because it
361:04 - comes pre-configured that way
361:09 - in order to receive mail the mail server
361:12 - must be obviously listening but it also
361:14 - needs to be allowed to receive
361:16 - communications to tc port 25 from
361:21 - outside machines
361:22 - so in order to allow inbound tcp 25 you
361:26 - can use the following command just use
361:27 - the firewall cmd space dash dash
361:31 - add dash service equals smtp which allow
361:35 - the smtp protocol to
361:37 - come through well allow port 25 to come
361:39 - through
361:41 - you can then verify the services are
361:42 - present in the firewall as well with the
361:44 - firewall-cmd-list
361:48 - all command
361:50 - and once again if you want to
361:54 - allow your service to be there after a
361:57 - restart of your firewall you'd want to
361:59 - add the dash dash permanent option to
362:02 - the top command
362:04 - so that it gets stored into the firewall
362:06 - configuration files
362:08 - so when it boots up it will
362:10 - automatically add it there
362:13 - one more thing to think about
362:15 - external email service identification so
362:17 - postfix and other email servers follow
362:20 - standard protocols
362:22 - which is nice but it's also kind of
362:24 - confusing sometimes in order to send
362:26 - email the postx server
362:28 - uses the host domain part of the email
362:30 - address to identify
362:32 - the server
362:33 - so if it's a bob at example.com
362:37 - is going to check first for a dns record
362:40 - for the well it namex record for
362:42 - example.com
362:44 - if it does not find it
362:46 - it will check for an a record in the dns
362:48 - service
362:49 - and so it looks for example.com and if
362:52 - it finds an mx record it will use that
362:54 - if it doesn't it will use the a record
362:57 - and if it doesn't find that it will not
362:59 - send the mail
363:01 - so it does not use the etc host file
363:04 - so don't try to make that work it just
363:06 - doesn't work it refuses to do that so
363:08 - you want to make sure you can use your
363:10 - dns service and which means you have to
363:12 - have it configured
363:16 - troubleshooting
363:17 - so if you are having trouble sending
363:19 - mail or receiving mail you want to
363:21 - verify your ip address is correct
363:24 - you want to verify the services are
363:25 - running
363:26 - you have your mail server running and up
363:27 - and going you want to verify the
363:29 - firewall is on the way
363:30 - you want to verify that dns records are
363:33 - there
363:35 - so that it knows which server to uh
363:37 - identify and use
363:39 - you want to make sure the remote host is
363:40 - up and you can ping it to do that
363:43 - you also want to verify that the remote
363:44 - ports are open so you can use nmap to
363:46 - scan the machine make sure port 25 is
363:48 - open
363:49 - you want to make sure you can check logs
363:53 - so you can go in that var log mail log
363:55 - and take a look at that you can also
363:56 - check the mail directory and see if mail
363:58 - is being received
364:01 - so here are a couple things and that is
364:03 - our mail server or postfix metal server
364:06 - overview
364:09 - dynamic host configuration protocol or
364:11 - dhcp
364:13 - so the dhp protocol operates on udp
364:15 - ports 68 and 67.
364:18 - dhcp is based on
364:21 - a series of messages you have a
364:23 - discovery message an offer request and
364:26 - acknowledgements so what happens is a
364:28 - client will come online and they will
364:29 - send out a dhcp discover
364:33 - packet
364:34 - then a dhcp server assuming it sees it
364:37 - will then offer a dhcp offer
364:40 - and they offer an ip address that the
364:42 - client could then potentially use
364:45 - it is then up to the client to collect
364:47 - all the offers it receives decide
364:50 - usually which the first one that comes
364:52 - but which one they're going to accept
364:53 - and then they're going to request that
364:55 - of that dhv server specifically
364:59 - after it has been requested
365:02 - they will i mean the request will be
365:04 - sent out broadcast so that all the other
365:06 - dhcp servers who made offers will see
365:08 - the request and then the acknowledgement
365:10 - comes back letting the client know that
365:13 - the
365:14 - request has been acknowledged and they
365:16 - can then start using that address in
365:18 - addition that they will get a lease so
365:21 - get a certain amount of time they can
365:22 - use this address at the end of which
365:24 - they will have to renew well actually
365:26 - somewhere in the middle they will renew
365:27 - their lease but at the end of which they
365:29 - would lose the address
365:33 - so some security issues with dhcp
365:36 - if you have rogue dhcp servers they can
365:38 - give addresses and that can be a problem
365:41 - it could mean security issues it could
365:44 - mean
365:45 - someone's giving you something incorrect
365:48 - sometimes you'll have someone plug a
365:50 - wireless access point
365:53 - some kind of a home router in your
365:55 - network backwards and it'll start
365:57 - issuing out
365:58 - addresses you can block that on the
366:01 - the switch but
366:02 - you know if it's not blocked they can
366:04 - cause all kinds of havoc
366:07 - um clients can spoof mac addresses to
366:09 - gain additional access so if you
366:12 - want to get access and you know that a
366:14 - specific ipaddress gets it
366:17 - or a certain mac address gets it through
366:19 - the firewall
366:20 - you can spoof addresses this isn't
366:22 - really a dhp problem so much as an issue
366:26 - with mac addresses and security and
366:29 - everything there
366:30 - but you can spoof things and get more
366:32 - access
366:34 - clients can also obtain multiple ip
366:36 - addresses by presenting multiple mac
366:38 - addresses so if you have a client that
366:40 - is trying to
366:42 - create a denial of service type
366:43 - situation they could present
366:46 - a whole bunch of different mac addresses
366:48 - get a whole bunch of different ip
366:49 - addresses and then lock them all up so
366:51 - they're not available to anybody else
366:55 - some of the useful packages the most
366:57 - useful package here is the dhcp package
367:00 - which includes the dhcp server
367:03 - which is dhcpd
367:05 - there are other ones that are there you
367:07 - have a dhp libs and dhcp common which
367:11 - are used basically in order to get dhp
367:13 - and client to run
367:17 - so the directories that are interesting
367:19 - there is the etc
367:21 - dacp directory which contains all of
367:23 - your dhcpd configuration files you can
367:25 - look in there and see what's there
367:27 - you have your network configuration
367:30 - and those are in the etc sysconfig
367:33 - network scripts directory all of them
367:35 - start with the ifcfg
367:38 - and then it's usually
367:39 - eth0 or
367:41 - ens32 or something else so you have to
367:44 - go look and see what what interfaces you
367:46 - have
367:48 - and then you can go configure those
367:50 - if you're running as a dasb server you
367:53 - can see the var lib dhcpd
367:56 - dhcpd.leases file which will contain all
367:58 - the leases you've given out you might
368:00 - note that there are multiple copies of
368:02 - the same
368:03 - lease that's there because sometimes a
368:06 - client will request something more than
368:07 - once it might go down come back up again
368:10 - before the lease is expired and it might
368:11 - get a new renewed lease and that
368:13 - releases file keeps track of all your
368:15 - releases for you
368:16 - and then there is the var log messages
368:18 - file which contains all kinds of
368:20 - information such as all of your your
368:23 - discoveries and offers and all those
368:24 - things can show up in your
368:27 - var log messages file
368:31 - so the configurations for the dh server
368:34 - dhcp server are in the etc dhcp
368:36 - directory the following is example
368:39 - dacpd.com file
368:41 - you can see right there on the top you
368:43 - have a
368:44 - the option domain name you tell it your
368:46 - domain name option domain name servers
368:48 - you tell it what dns servers people are
368:50 - using to get out
368:51 - you tell a default lease time this one
368:54 - has 300 which is 300 seconds
368:56 - a maximum lease time which right here is
368:58 - 1200 seconds so these are very
369:00 - short-term leases so a a default lease
369:03 - of five minutes with a maximum lease of
369:06 - 20 minutes
369:07 - obviously you want to have much much
369:08 - longer times
369:11 - but they're in seconds
369:13 - the subnet
369:14 - right there
369:16 - you can see we have a subnet being
369:19 - configured to give out information so
369:21 - this is the 10.10
369:26 - subnet and we are handing out addresses
369:29 - in that subnet only
369:31 - to
369:33 - 10.10.0.100 through 10.10.0.150.
369:37 - so there's only
369:39 - you know uh 51 addresses that are being
369:42 - handed out
369:43 - and then we're telling them that their
369:44 - default gateway is
369:47 - 10.10.0.1 so that is your the routers is
369:50 - your default gateway
369:53 - you can also in addition to just giving
369:56 - out a range of addresses you can give
369:57 - out static addresses so the dhcp server
369:59 - can be configured to assign the same ip
370:01 - address to a machine using the mac
370:03 - address this is very common in
370:05 - situations where you have
370:07 - a machine that has to come up with the
370:08 - same address every time because it
370:10 - provides services of some sort
370:13 - the following example
370:15 - to
370:16 - assign a printer so the printer had the
370:18 - mac address of zero zero colon one one
370:21 - colon two two colon three three colon
370:22 - four four colon five five
370:25 - and then you could have it have a fixed
370:27 - address of 10.10.10.10
370:30 - and that would be
370:31 - the information you give out as you put
370:33 - that inside that subnet section on the
370:35 - previous
370:36 - slide to make sure it gets that
370:38 - information and also to make sure it
370:40 - still gets the router information and
370:41 - dns information
370:45 - the dhv service needs to be started in
370:47 - order to start listening you can use the
370:50 - system ctl command to start the dhv
370:52 - server
370:53 - so you do system ctl start dhcpd.service
370:56 - to start it up
370:58 - and other options you have is stop
371:00 - restart status
371:02 - if you wanted to start boot time you can
371:03 - do enable
371:05 - and then you can disable to make it not
371:07 - start at boot time
371:11 - having the service running won't
371:12 - guarantee you can get anything you still
371:15 - need to make sure you get through the
371:16 - firewall
371:17 - in order to receive requests you need to
371:19 - make sure that the ports are open
371:22 - so
371:23 - you really need to be doing both because
371:24 - it does it sends out and receives on
371:26 - different port numbers but you can use
371:28 - the
371:31 - firewall-cmd-add-service equals dhb
371:33 - command to add the dhb
371:35 - service to your firewall if you want to
371:37 - be permanent once again you make sure
371:39 - you add the dash permit to the end so
371:40 - firewall-cmd
371:42 - space dash dash add dash service
371:45 - equals dhp space dash dash permanent
371:49 - to make it permanent and
371:51 - make it
371:52 - there when you start it
371:55 - you can verify the services are present
371:56 - in the firewall as well with the
371:58 - firewall cmd space dash dash list as all
372:01 - command
372:02 - and that will get it there
372:06 - once you have your server running you
372:07 - can go check your messages and some of
372:09 - that and but if you're having problems
372:10 - and clients aren't getting things
372:12 - you can go troubleshoot the clients
372:14 - first
372:15 - if it's a physical connection you want
372:17 - to make sure that you have the clients
372:19 - there
372:21 - you make sure the clients have nics and
372:25 - and
372:27 - you can use the lspci command on linux
372:29 - to verify to make sure you have a nic
372:32 - driver
372:33 - that can be important
372:35 - you can verify the server address is
372:37 - static so
372:38 - your dhcp server must have a static
372:41 - address otherwise it will not work
372:43 - properly it doesn't work off a dsp
372:46 - so don't try
372:48 - and you want to verify the firewall
372:49 - allows connections so you can look at
372:52 - that verify or look at the logs to see
372:54 - if there's anything in there check the
372:55 - leases to see if it really is giving out
372:57 - leases or
372:59 - you know if they're being handed out
373:03 - if you are
373:05 - setting up a network you can actually
373:06 - have your configuration have multiple
373:09 - different subnet sections
373:12 - and then if you have multiple subnet
373:13 - sections you might be servicing
373:15 - different subnets based on
373:17 - information being forwarded so you want
373:19 - to verify the routers for the request
373:22 - if they need that you want to verify the
373:24 - spam tree is not a problem sometimes
373:25 - fanning tree is configured so that a
373:27 - machine
373:28 - booting up will
373:29 - be assumed to be a switch in which case
373:32 - it will block everything until it is
373:34 - determined that the machine is not a
373:35 - switch
373:36 - and then we'll allow communication
373:38 - through so make sure the span tree is
373:39 - not blocking anything
373:41 - and you want to make sure that the
373:42 - switches are allowing you to answer so
373:44 - your machine needs to be
373:45 - connected to an interface that is
373:47 - allowed to send out your
373:49 - your dhcp
373:51 - offers so you can receive the
373:53 - discoveries but you can't make an offer
373:55 - unless well you can make it over but
373:56 - your offer won't get out
373:58 - unless the interface is allowing you to
374:00 - get out
374:01 - and so you want to make sure that the
374:02 - switches are not blocking you from
374:05 - making offers
374:07 - and that is the end of this section
374:09 - so good luck
374:13 - domain name system or dns
374:17 - the dns protocol converts names to ip
374:20 - addresses and vice versa it also does
374:22 - names names and other things as well
374:25 - but it solves some of the problems of
374:27 - the host file because the host file was
374:29 - getting too big there was at one point a
374:31 - single host file
374:33 - and people would send their submissions
374:36 - to the maintainer of this host file and
374:39 - the maintainer would update the source
374:40 - file
374:41 - and then people would download copies of
374:43 - this host file and it became a regular
374:46 - full-time job basically
374:48 - and so the dns protocol
374:52 - was in
374:54 - was basically invented as a solution to
374:56 - this problem how do you maintain this
374:58 - giant host file
375:00 - so
375:01 - it became a hierarchical database of
375:04 - information it was invented in 1983 and
375:07 - 84 and has been wide used since the
375:09 - mid-1980s
375:11 - the dns protocol operates on both udp
375:13 - and tcp ports 53
375:15 - udp
375:17 - for your normal
375:18 - inquiries and tcp for your
375:21 - downloads of
375:23 - zone transfers and things like that
375:27 - there are a couple of dns security
375:29 - issues or concerns you need to think
375:31 - about if you send spoofed responses
375:33 - while making a request the dns server
375:36 - might get confused and keep your entries
375:38 - basically the way this happens is
375:41 - you send a request
375:43 - to your dns server your dns server
375:46 - if it doesn't have a cache will have to
375:48 - go to another server to get the
375:49 - information so it sends the request if
375:52 - you know where it's sending the request
375:55 - and you can spoof that source address
375:58 - you can send a reply
376:00 - as if it were coming back from the
376:02 - server that it requested from and if you
376:04 - do it fast enough your reply will get
376:06 - there before the actual reply from the
376:08 - server it's requesting it from and then
376:10 - it will get loaded in the cache of your
376:12 - dns server and cause it to have
376:14 - incorrect data
376:16 - the next concern is that alternative dns
376:19 - routes can redirect all of your traffic
376:22 - so it's a hierarchy and it starts from
376:24 - the root servers
376:26 - which delegate to servers that manage
376:28 - the top-level domains
376:30 - and those delegate to individual servers
376:34 - that manage
376:36 - domain names and things like that
376:38 - if you modify the dns route you can
376:41 - redirect all the traffic somewhere else
376:44 - so some countries have done done this
376:46 - and such as
376:48 - china did this for a little bit might
376:50 - still be doing it other countries have
376:51 - done this where they have created their
376:53 - own root servers and redirect everything
376:58 - in addition to redirecting traffic from
377:00 - the root servers you can also do dns
377:02 - manipulation by isps your isp
377:06 - controls all of your traffic they can
377:08 - manipulate manipulate your traffic so if
377:10 - you send a request out to a dns server
377:14 - and your isp decides to modify the dns
377:17 - query or response they can do that
377:21 - also there is registrar based dns
377:24 - manipulation because the registrars
377:26 - are where the individual
377:28 - domain owners
377:31 - well have their data stored and those
377:33 - could redirect and point different
377:34 - places
377:36 - you can also uh trick
377:38 - the
377:39 - registrars into
377:40 - transferring names over to you and it
377:43 - can be all kinds of a mess
377:48 - so on linux we tend to use the bindi dns
377:52 - server
377:54 - usually you'll hear about it being bindi
377:57 - bind or name d
378:00 - anyway there are a couple of things to
378:02 - think about um all host names end in a
378:04 - trailing dot normally when you see a
378:06 - host name you don't put a trailing dot
378:08 - on it but the dns server knows it has a
378:10 - trailing dot and it puts it there
378:13 - um
378:14 - so you need to be aware of that because
378:16 - bind
378:17 - treats it
378:19 - like it should be there
378:21 - host names and ip addresses in dns are
378:23 - written with the largest grouping on the
378:25 - right and the smallest on the left what
378:27 - does that mean well
378:29 - if you look at a name like example.com
378:32 - com is a much larger grouping and so
378:34 - it's on the right hand side
378:37 - example would be on the left hand side
378:38 - because it's smaller so the larger it is
378:41 - the further to the right but if you
378:43 - think about ip addresses
378:45 - something like 10.11.12.13
378:50 - and you say well which one is the
378:52 - largest grouping well the 10 is the
378:53 - largest
378:55 - so
378:56 - it's on the left-hand side but that's
378:58 - not where the dns wants to put it it
379:00 - wants to put on the right-hand side so
379:02 - if you were to write out your
379:03 - 10.11.12.13
379:07 - in a dns type format
379:10 - it would actually be 13.12.11.10
379:14 - and then it boot it'd have a dot in
379:16 - adder.arpa
379:19 - so
379:20 - keep that in mind
379:22 - also some types of records have a single
379:25 - value and some have more than one value
379:28 - mx records have a priority and a value
379:31 - so an mx record will take a name usually
379:34 - domain name
379:36 - and then it will give you a priority
379:38 - and it will also give you
379:40 - a host name of a machine you can talk to
379:43 - if you want to send your mail
379:45 - in addition that there's things like the
379:46 - soa records and other records that have
379:49 - multiple different pieces in them
379:54 - some of the useful packages installing
379:56 - bind
379:58 - well you have bind
379:59 - and you have bind dash utils bindash
380:02 - utils is really good it provides all
380:04 - those really important tools like ns
380:06 - lookup and dig which are good for
380:09 - well doing dns queries
380:11 - you want those
380:16 - when you are configuring
380:18 - your bind server or name d
380:21 - the main configuration file is in the
380:23 - etc directory etc named.conf
380:28 - so you go in there you modify that file
380:31 - sometimes etc named then named.com but
380:35 - you find the file there you modify that
380:37 - file and that file lists all of the data
380:39 - that
380:40 - you need to know about
380:43 - so
380:44 - where is the data stored well the data
380:46 - is normally stored in the varnamd
380:48 - directory
380:49 - so you have the var name d data
380:52 - which would be all the zones that you
380:54 - control
380:55 - and then you have var name these slaves
380:57 - for all the zones that are acting as
380:59 - secondary or slave zones
381:02 - and
381:04 - those would be zones you get from
381:06 - somebody else
381:08 - now there is a big push for renaming
381:10 - things
381:11 - and so while it is var named slaves
381:13 - right now you'll probably find that
381:15 - words like master and slave will start
381:17 - to disappear
381:18 - because they have a negative connotation
381:22 - so just be aware that the name might
381:24 - change to something like secondary
381:26 - or something else
381:31 - what does the name the dot-com file look
381:33 - like well
381:35 - you have different zones in there
381:36 - there's lots of data in it but you have
381:38 - these little entries for your individual
381:40 - zones so that top one right there
381:43 - is for the domain.ext so you could have
381:46 - a example.com
381:48 - zone and then inside of it you have
381:52 - well information about that zone
381:54 - this one because we
381:56 - own it and we control it we have the
381:58 - type as master and then you list the
382:00 - file where's the file where the file is
382:02 - going to be called domain.ext.zone
382:07 - and where would you find that well
382:09 - you're probably going to find it in the
382:11 - var named
382:13 - maybe data directory but you have to
382:14 - look at the rest of the configuration
382:15 - file to figure out where things are
382:17 - actually stored
382:20 - all right if you look at the ip
382:21 - addresses let's say we were doing
382:23 - something for the 10 dot range we want
382:25 - to do the entire 10 dot range all in one
382:27 - file which is quite a bit actually
382:30 - so you might do zone 10 dot in dash
382:34 - adder dot arpa
382:36 - that would be the zone that you'll be
382:38 - doing
382:39 - and you'd have it
382:41 - be a master because you are
382:43 - controlling it and configuring it and
382:45 - then the file type would be or the file
382:47 - name would be something like your ip
382:50 - address dot zone
382:52 - now the file names don't have to match
382:55 - the
382:56 - the backwards orientation or anything
382:58 - like that so you could just put
383:00 - 10.0.00.zone
383:03 - it doesn't even need to add an end in
383:05 - the word zone but
383:08 - some editors treat different files
383:10 - differently depending on the extension
383:12 - so
383:12 - that's something to keep in mind
383:17 - so you have forward zones and reverse
383:19 - zones a four zone is a zone that uses
383:21 - names as its
383:23 - lookup reverse zone is something that
383:26 - goes from ip addresses back to names
383:29 - so forward zones have multiple different
383:30 - types of records in them
383:32 - so here's an example forward zone with
383:35 - well a bunch of
383:36 - things
383:38 - a bunch of variables and some of that
383:40 - but
383:41 - we can see the very top line or there is
383:43 - a dollar sign then ttl
383:46 - 3h which basically means your time to
383:48 - live for each of your entries is three
383:50 - hours that's the default time
383:53 - but it can be overridden and changed
383:56 - and then you can see the at sign the
383:58 - outside means for the entire zone
384:01 - so at nns
384:04 - dns.domain.edu
384:06 - dot you see that trailing dot that's
384:08 - important
384:09 - so basically what this is is a record
384:12 - for this zone and this zone is defined
384:14 - as whatever is in the named.com file
384:18 - it's saying that the name server for
384:20 - this zone is dns.domain.ext
384:23 - well you're going to need to make sure
384:24 - you have this
384:26 - dns.domain.ext defined somewhere
384:29 - so we're assuming this is the domain.ext
384:31 - file and you can see at the very bottom
384:33 - layer there is a dns in a
384:36 - and then you put the ip address there
384:39 - and the address right there is written
384:40 - in normal ip address format so it'd be
384:44 - 10.11.12.13. no trailing dot in that one
384:48 - so
384:49 - what you have is
384:51 - the word dns in the front that line
384:53 - and then your ip address at the end
384:56 - and if there is nothing after the dns
384:59 - no trailing dot it assumes that you are
385:02 - just giving an address in that
385:05 - that domain
385:06 - and so this is domain.ext
385:08 - it will assume that is dns.domain.ext
385:12 - dot
385:14 - and that would satisfy the
385:16 - name server record at the top with an a
385:18 - record at the bottom
385:20 - inside of each domain you have a start
385:23 - of
385:24 - authority type
385:26 - record in soa
385:28 - and each one of these records has a
385:31 - couple different pieces you can see the
385:32 - domain that it's
385:34 - doing everything for is the domain.ext
385:36 - and then you have this root.domain.ext
385:39 - well what is that that's actually an
385:40 - email address
385:42 - you don't see the at sign in the middle
385:44 - of the email address because the first
385:46 - dot is supposed to be replaced with an
385:48 - at sign when you write the email address
385:49 - so it actually be root domain.ext dot
385:53 - as the email address for the
385:56 - administrator of that record and you can
385:58 - see the serial number the serial number
386:00 - is usually written in a
386:03 - four digit year a two digit month two
386:06 - digit a day and then a serial number so
386:09 - every time you make an edit to the
386:12 - information you'd want the date written
386:14 - there and then you start with 0 0 0 1 0
386:17 - 2 0 3 just count up
386:19 - this would only allow up to 100 edits
386:23 - that day
386:24 - and the serial number is used when you
386:26 - do zone transfers in order to figure out
386:28 - if the zone is already well if it's new
386:30 - or if it's the same zone so if the
386:32 - serial number is the same
386:34 - it will assume there are no changes and
386:35 - will not download the zone
386:38 - so when you have your secondary servers
386:39 - out there they need to make sure that
386:41 - the root server has serial numbers
386:44 - changing
386:45 - the other numbers are refresh retry
386:48 - expire
386:49 - default time to live those kinds of
386:51 - things and those are all written in
386:52 - number of seconds
386:54 - so you can kind of get an idea of how
386:56 - long each one of these is
387:01 - some of the different types of records
387:03 - include your a records your quad a or
387:07 - a a
387:08 - you have your mx records you have your
387:10 - cname records your txt records there's
387:12 - all kinds of records so you can see a
387:14 - couple of different examples here the a
387:16 - records are for um
387:18 - for taking a name and converting it to
387:19 - an ipv4 address your quad
387:23 - a
387:24 - records take a name and convert it to an
387:27 - ipv6 address
387:29 - your mx record
387:31 - is a record that takes a name and
387:33 - converts it into a priority and
387:36 - a
387:37 - name
387:40 - and that is for your mail exchange so if
387:42 - this were for the
387:46 - domain.ext or example.com if you wanted
387:49 - to send an email to
387:53 - that domain
387:54 - you need to figure out where your mail
387:55 - server is and so that mx record right
387:57 - there indicates that you would go to the
388:00 - mail
388:01 - in the domain
388:03 - server so
388:04 - maybe mail.domain.ext
388:08 - and you can see the record right above
388:10 - it is an a record that tells you the ip
388:12 - address of that
388:14 - then you have a couple of cname records
388:16 - cnames are aliases
388:18 - and cdm stands for canonical name so you
388:21 - can see that pop and imap both map to
388:24 - mail and you can see mail maps to
388:27 - an ip address
388:29 - and then you can see under the mail in
388:32 - addition to having an a record mail also
388:34 - has a txt record and the txt record has
388:38 - what is called an spf
388:40 - and this is used to indicate which
388:43 - machines are allowed to send mail for
388:44 - that domain so if you received mail
388:49 - for
388:50 - something
388:52 - and this would probably actually be in
388:53 - the app but if you receive mail for a
388:55 - given domain
388:56 - you'd want to know
388:58 - who is authorized to send mail so you
389:00 - can do a lookup
389:02 - using the spf information in a txt
389:05 - record and figure out which
389:07 - ip addresses are allowed to send mail
389:09 - and this indicates that the 10 dot
389:12 - entire dot network is allowed to send
389:14 - mail but nothing else so all other ones
389:16 - are
389:17 - not allowed
389:20 - you also have reverse zones so the top
389:23 - part reversal looks the same you can see
389:25 - it jumps down to this origin thing so
389:27 - origin to specify individual pieces this
389:31 - is doing the 192.168.0
389:34 - range and you can see the 192.168.0.0
389:39 - is
389:40 - that second to the bottom line
389:42 - where it is in
389:44 - zero in ptr for pointer
389:48 - network.domain.ext dot so it's telling
389:50 - you what the name of that
389:53 - well ip address is when you do a reverse
389:56 - lookup and you can see the dot one as
389:58 - well
390:02 - the named service needs to be started in
390:04 - order to start listening you can use the
390:06 - systemctl command to start this the
390:08 - named server you just type in systemctl
390:11 - start named.service you can leave the
390:13 - dot servers off if you want
390:15 - other options you have is the start stop
390:18 - restart status
390:19 - and then if you want to make sure it
390:21 - starts at boot time you can use enable
390:23 - and if you want to remove that you can
390:25 - use the disable to remove that so it
390:26 - won't start at boot time
390:32 - in order to make dns available to really
390:35 - make it available the dns server needs
390:38 - to be able to receive data through the
390:40 - firewall you need both udp and tcp 53
390:44 - 53 is only necessary if you're doing
390:46 - zone transfers but normally dns servers
390:48 - should be able to do zone transfers
390:51 - so you want to indicate who can do zone
390:54 - transfers so you can add the services or
390:57 - the service
390:59 - for the server with the command
391:01 - firewall dash cmd space dash dash add
391:04 - dash service equals dns
391:06 - and that will add in the service so that
391:09 - dns can get through the firewall
391:11 - if you wanted to be permanent you can do
391:13 - that same exact command with the dash
391:14 - dash permanent option
391:16 - and then it will put it into the
391:17 - configuration file so the next time the
391:19 - firewall starts up it will add that rule
391:21 - in there you can verify whether the
391:24 - services are present in the firewall
391:27 - currently with the firewall cmd space
391:30 - dash dash list dash all command and that
391:32 - will indicate whether or not it is in
391:34 - the firewall
391:37 - when you're troubleshooting make sure
391:39 - the dns server is set
391:42 - and you can go look at the etc resolve
391:44 - dot com file and you'll see which dns
391:47 - server you have set which is kind of
391:49 - important
391:50 - you can make sure you want to make sure
391:51 - you can talk to your dns server in
391:53 - normal ways you can use ns lookup you
391:54 - can use ping all kinds of things to make
391:56 - sure you can talk to it
391:58 - make sure the record is download okay
391:59 - you can use nslookup or dig
392:02 - you can do
392:04 - a dns hierarchy trace
392:07 - so if you do a dig
392:09 - plus trace command
392:11 - on something it will start from the root
392:12 - surface and work its way down you can
392:13 - figure out if you are in the dns
392:15 - hierarchy if you're not
392:16 - then it's not likely anybody else will
392:18 - use you
392:20 - you can make sure your firewall is
392:21 - correct
392:22 - you can make sure
392:23 - logs look good
392:25 - if you have any mx records or senior
392:27 - records you want to make sure they point
392:28 - eventually to a valid
392:31 - a or quad a record so c names can point
392:34 - to other c names and m x's can point to
392:36 - c names
392:37 - or they can both point to a or quad a
392:40 - records but eventually if you keep
392:42 - resolving it it should get to a quad a
392:44 - record
392:45 - you want to verify the service is
392:46 - running
392:48 - so you can use netstat make sure it's
392:49 - running and you want to make sure that
392:51 - any selinux contexts are not strange so
392:55 - you can go look in the var name d
392:56 - directory and see if anything looks like
392:58 - it doesn't have name d in it
393:00 - it might not work properly
393:02 - and that is it for dns so
393:06 - good luck
393:09 - simple network management protocol or
393:11 - snmp
393:13 - the snmp protocol is commonly used to
393:15 - gather statistical information from
393:17 - networking devices
393:19 - it can grab all kinds of information
393:21 - such as bandwidth consumption
393:23 - [Music]
393:24 - ports whether
393:26 - on or off
393:28 - names of machines all this information
393:30 - can be gathered together
393:31 - and it's usually used to
393:33 - manage an entire network
393:36 - some variables gathered can also be set
393:39 - using the snmp protocol tools
393:42 - snmp typically operates on udp ports 161
393:46 - and 162 161 for normal communication and
393:49 - 162 for traps or
393:52 - indications when there is a problem
393:57 - there is a management information base
394:01 - and
394:02 - well this is for information sm provides
394:05 - a lot of
394:06 - information
394:07 - each individual element of information
394:10 - can be addressed with a hierarchical
394:12 - dotted decimal number called an object
394:15 - identifier or oid
394:17 - the object identifier for system name or
394:20 - hostname is
394:22 - one point three point
394:24 - six point one point two point one point
394:27 - five point one five five
394:29 - and this
394:31 - has multiple different pieces in it and
394:33 - the very first one which would be the
394:35 - system name is
394:37 - dot zero
394:40 - so if you have more than one name it
394:42 - might be a dot one and dot two and it
394:44 - kind of increments up
394:46 - to make things easier the mibs provide
394:49 - names for the numbers you could get the
394:51 - same hostname
394:53 - with that number above or you can also
394:55 - use
394:56 - either
394:58 - system.assistname.0 or sysname.0
395:02 - so those are a little bit simpler easier
395:04 - to read and recognize and remember as
395:06 - well
395:09 - community strings snmp does not want to
395:12 - provide information to just anyone so it
395:15 - requires a password called a community
395:16 - string
395:17 - there are two default community strings
395:20 - for read-only information
395:22 - collecting you can use the default
395:24 - community string public
395:25 - for read write information collecting
395:28 - and setting you can use the default
395:30 - community string private
395:36 - snmp uses the udp protocol and the
395:38 - server ignores messages with the
395:40 - incorrect community string so you do not
395:43 - know if datagrams were dropped or
395:45 - ignored it's kind of confusing makes it
395:47 - difficult you send it out you wait 10
395:50 - seconds nothing is back you say well it
395:53 - didn't work but that could be because
395:55 - your community string is being ignored
395:57 - and there is no reply
396:00 - many network devices have
396:02 - active snmp support
396:04 - the administrators are not aware of
396:06 - it's very common for printers for
396:08 - example to have snmp's support turned on
396:11 - and running
396:12 - and they might have both the public
396:16 - and the private community strings
396:18 - available so you might be able to do all
396:20 - kinds of fun things with the printer and
396:22 - the administrator wouldn't even know how
396:24 - you're getting in
396:26 - sometimes you have routers or wireless
396:30 - devices
396:31 - or
396:32 - cameras that all have snmp support
396:34 - turned on and running
396:37 - so you need to make sure you turn things
396:39 - off that
396:40 - should not have it running
396:42 - most snmp messages are not secure they
396:45 - send things in plain text they come back
396:47 - in plain text
396:48 - if you want to intercept something you
396:50 - want to see what the community string is
396:52 - just watch the line
396:54 - see what it is
396:58 - so some useful packages
397:00 - net snmp provides the snmp server
397:04 - net smp utils provide some utilities for
397:06 - performing queries and making changes
397:09 - so you can do your snmp get snmp set
397:12 - your snmp walk all kinds of
397:15 - activities and utilities right there
397:19 - when you're trying to configure the
397:21 - server
397:22 - you need to go and edit the etc snmp
397:25 - snmp
397:26 - d dot com file
397:29 - one of the most common changes people
397:30 - make is change the community string
397:33 - you'd want to probably make it not be
397:35 - public
397:36 - so you find the line that says com2sec
397:39 - not
397:40 - config user default public and you can
397:43 - change the string to something else
397:46 - for example aloha123 which is also a
397:49 - superc secure and see your password that
397:52 - no one will ever guess
397:55 - the snmpd service needs to be started in
397:58 - order to start listening you need to use
398:00 - the
398:01 - systemctl
398:03 - command to start the snmpd server so
398:06 - just use systemctl start snmped
398:10 - and you can use the dot service if you
398:11 - want other options include stop
398:15 - restart status enable and disable enable
398:18 - is for making it start at boot time and
398:21 - disable this to make it so it doesn't
398:22 - start at boot time
398:26 - in addition to having the service
398:27 - running
398:28 - you need to make sure you can get
398:30 - through the firewall
398:31 - you can add the service to the firewall
398:33 - with the firewall dash cmd space dash
398:36 - dash add dash service equals snmp
398:40 - and if you want to make it permanent
398:41 - make sure you add the dash dash
398:43 - permanent option to the end of that
398:45 - and it will make it permanent you can
398:48 - verify if the service is in the active
398:50 - firewall using the firewall cmd space
398:53 - dash dash list
398:55 - all command
398:56 - and that will tell you which services
398:59 - are in the firewall
399:02 - if you have it working
399:04 - you might want to verify it's working
399:07 - so you can use the s and the snmp client
399:11 - which is provider of the client
399:12 - utilities provided by net snmp utils
399:15 - and i recommend using the snmp get and
399:18 - the snmp walk commands to test your
399:20 - server
399:21 - the following two lines assume your
399:23 - community string is aloha one two three
399:27 - and you are just connecting to your
399:28 - local host although you can put the ip
399:30 - address of the server you're connecting
399:32 - to if you have the firewall open
399:36 - when you do the snmp get and the snmp
399:38 - walk commands you want to make sure you
399:40 - pass the snmp version
399:42 - you can use 2c or 1
399:46 - and you want to make sure you pass the
399:47 - community string with the minus c option
399:49 - there
399:50 - in the top one you are getting the
399:52 - system name or the host name so assist
399:54 - name dot 0
399:56 - and the snmp walk you're going to walk
399:58 - the entire system set of information
400:01 - so sysname would be one of those items
400:04 - in the system set
400:06 - and they'll just list a whole bunch of
400:07 - them walk through it until it runs out
400:08 - of
400:09 - responding oid values
400:14 - for troubleshooting you want to make
400:15 - sure your dns server is set correctly
400:18 - sometimes when you're trying to look
400:19 - things up by name it can be a problem
400:22 - you want to make sure you can talk to
400:23 - the snmp server you can ping it you can
400:25 - poor scan it make sure it's up
400:28 - make sure the firewall is correct
400:31 - you can check your logs you want to make
400:33 - sure the community string is correct if
400:35 - you change it you want to make sure you
400:36 - change your commands you're using to
400:38 - talk to it you want to make sure you
400:40 - have the correct object name
400:43 - and if you're having trouble talking to
400:44 - it try something you know will work
400:47 - so assist name dot zero it's a good one
400:49 - to try
400:50 - you also want to make sure the service
400:51 - is running so you can use the net
400:52 - netstat minus tuneup
400:55 - command to get a list of
400:58 - what services are there
401:01 - and that is the end of this
401:03 - chapter