With timestamps:

00:00 - hello this is gonna be me trying to
00:02 - answer a really common question which is
00:04 - about how you write pseudocode or what
00:06 - even in pseudocode it comes up all the
00:09 - time so it's obviously something which
00:11 - perplexes students year after year i
00:13 - also think it perplexes teachers to an
00:16 - extent because often I have spoken to
00:18 - teachers who are confused as to why
00:20 - their students find it difficult because
00:21 - it seems like an obvious concept when
00:23 - you have more context when you
00:24 - understand its purpose it seems like a
00:27 - easy to grasp idea but when you're a
00:30 - student certainly I think that's not the
00:31 - case and I know it wasn't for me when I
00:33 - learnt it it was just sort of mention
00:35 - out of a blue bow my teacher didn't
00:36 - understand what it was or how you write
00:38 - it or syntax at hand so let's try and
00:41 - clear it up now I have previously made a
00:43 - video on a very similar overlapping
00:46 - question which is about how you answer
00:48 - the algorithm questions so the longer
00:50 - mark questions which often appear
00:52 - towards the end of exams you know
00:54 - they're seven eight nine ten mark
00:56 - questions a lot of people find them
00:58 - difficult I think partly because you're
01:01 - often going to be writing pseudocode to
01:02 - answer them so there's a lot of overlap
01:04 - I spent a lot of time of that video
01:05 - talking about pseudocode because I know
01:08 - that it's difficult so this is going to
01:10 - be a slightly more high-level maybe even
01:15 - more practical I'm going to show you
01:16 - some examples of me going through it
01:17 - this was more just me showing you some
01:18 - slides like usual but I want to show you
01:20 - some examples of pseudocode in real life
01:22 - and also go through a few of these
01:24 - questions focusing on pseudocode
01:26 - specifically but this may be useful and
01:28 - if you've watched it there'll be some
01:29 - overlap but for the time being just to
01:32 - give a very short answer to this
01:34 - question how do you write pseudocode
01:35 - well it don't worry about it it's really
01:37 - not a big deal we don't have to it's not
01:40 - something you have to really think about
01:41 - but the whole idea it shouldn't be the
01:44 - actual writing of the pseudocode
01:45 - shouldn't be the stress point and the
01:48 - clue is were sued over prefix comes from
01:50 - a Greek word which I think he pronounces
01:52 - servers which means false or fake etc
01:56 - and even a normal English we have words
01:58 - like pseudoscience pseudonym which
02:01 - implies something not being quite true
02:03 - so pseudocode is not an actual program
02:06 - language it's fake code so isn't it
02:08 - looks like code but it doesn't belong to
02:10 - an actual language like Java pipe
02:12 - in C++ etc these actual programming
02:15 - languages have a very strict syntax the
02:18 - syntax being for kind of rules or for
02:20 - language of things you've got to follow
02:21 - for it to work and to translate to
02:24 - machine code so for Java versus and Java
02:26 - code you have to put a semicolon after
02:29 - every statement that is just part of its
02:31 - syntax and I've forgotten to put one
02:34 - here so the idea is come up with a
02:36 - syntax error when I try and run it we
02:38 - get an exception we get an error because
02:40 - we've broken the syntax pseudo code
02:43 - doesn't have a syntax so you can't have
02:45 - these sort of errors it doesn't matter
02:46 - there are reasons why we've got
02:48 - semicolons in Java but it's not
02:50 - essential to this code having a
02:52 - semicolon from my understanding point of
02:54 - view and this brings us to the main
02:56 - purpose of pseudo code which is to be a
02:58 - high-level and abstract way of
03:01 - representing now we've been without
03:02 - tying it to a specific language we don't
03:04 - want to limit the algorithm we've
03:06 - written to being just used in Python or
03:09 - just used in Java if you see an
03:11 - algorithm written in pseudo code if you
03:13 - are a good enough programmer you should
03:15 - be able to implement it without too much
03:16 - difficulty so the actual value of an
03:19 - algorithm is how it works rather than
03:21 - how you need to get it to work on a
03:24 - certain machine or by using a certain
03:27 - language it's regarded as high-level or
03:30 - abstract because we're simplifying the
03:32 - problem we're not dealing with all the
03:34 - nitty-gritty details for having a set
03:36 - syntax brings you you'll know from your
03:39 - own programming but there are lots of
03:40 - annoying things you have to do like put
03:42 - a semicolon like having to indent it
03:44 - which if you mess up your code won't run
03:47 - we don't really care about that because
03:48 - that's not important to how the
03:51 - algorithm works it's important on how
03:54 - you actually implement it but anyone can
03:56 - do that it's the important bit for
03:58 - valuable bit is how it works
04:00 - I think some of the confusion arises
04:02 - from the fact of exam boards do stick to
04:05 - a syntax kind of ievo have in exam
04:09 - papers pseudocode excerpts which all
04:13 - look very similar ie they all follow the
04:14 - same scheme that's because exam boards
04:17 - have to be roast and ER diced right they
04:19 - can't just one year create a different
04:22 - paper every year there are probably
04:24 - different authors so DIF
04:25 - questions written by different people
04:26 - they've got to make from not consistent
04:28 - otherwise developer questions asked by
04:30 - students teachers parents etc so
04:33 - probably very standardized which doesn't
04:35 - really lend itself to the actual use of
04:37 - pseudo code in the wider world outside
04:40 - of just you know scored exams it's not
04:43 - just that this very rich and looking
04:45 - pseudo code is included in questions but
04:48 - also amarte schemes so visa from OCR a
04:51 - level computing papers survey old course
04:53 - by the way and amarte schemes answers
04:56 - will be given using in this case OCR's
04:59 - specific pseudocode so you might compare
05:02 - your answer to this this example answer
05:05 - and be a bit confused as to why it looks
05:08 - different and you might think that
05:09 - you're wrong just because it looks a bit
05:11 - different to how they have done it but
05:13 - really it's for substance which has
05:14 - being mocked not you know if you've
05:16 - capitalized function whether you've done
05:18 - end if at the end of the block doesn't
05:22 - really matter it's virtual functionality
05:24 - which is important most examples allow
05:27 - you to see they're kind of standardized
05:29 - version of pseudocode in the
05:31 - specifications so in case of OCR or in
05:35 - fact almost all of them it's towards the
05:36 - end so if we go down here this is the
05:40 - OCR a level new course a specification
05:43 - actually here it says a really nice
05:44 - paragraph which sums up what I've been
05:46 - trying to say so far so although it
05:48 - gives us a guide of a pseudo code for
05:50 - examiner's are going to be using it says
05:53 - you're not expected to memorize the
05:55 - syntax of this pseudocode because
05:57 - actually we're doesn't really make sense
05:58 - outside of the exam board
06:00 - and when you ask to provide answers you
06:02 - can do it any style you choose the
06:04 - viennese meaning can be reasonably
06:06 - inferred by a competent programmer so
06:08 - anyone who knows how the program should
06:10 - be able to understand what's going on
06:11 - and certainly you know if you if you
06:14 - learnt this syntax which wouldn't
06:15 - recommend you'd be able to understand
06:17 - what's going on
06:17 - equally if you did things a little bit
06:19 - differently that would be perfectly fine
06:21 - too I now want to show you some
06:24 - real-life examples of pseudo code in
06:26 - action because if we're doing this for
06:28 - GCSE you a level your scope is quite
06:30 - limited you won't see the full context
06:32 - necessarily so
06:34 - is a university textbook a very famous
06:36 - AI one it's in its third edition but it
06:38 - was first written in the 90s I think
06:40 - possibly early 90s in see you've got a
06:42 - lien showing here he was one of the
06:44 - first people to really think about AI
06:46 - and you've got robots and so on so a
06:47 - very long textbook over a thousand pages
06:49 - long and it will use pseudocode to
06:52 - express the algorithms for a part of
06:54 - this topic so machine learning
06:55 - algorithms ones which take data and make
06:58 - some predictions based on it have a very
07:00 - specific implementation but a very
07:02 - specific way of operating so they need
07:05 - to have algorithms to represent them and
07:06 - there are quite a few different ones so
07:08 - to take one example let's look at
07:11 - decision trees which is probably the
07:13 - first one or learn if you do go down
07:15 - with roots so it talks about what
07:17 - decision trees are lots of background
07:19 - information some of the maths involved
07:21 - too and eventually we end up with some
07:24 - pseudocode for how you would actually
07:26 - how this algorithm works in a kind of
07:29 - formalized way so you won't necessarily
07:31 - understand the content here you'd have
07:34 - to read more or for context but there
07:37 - are constructs here you'll notice are
07:38 - the same as ones you'd be using so we've
07:40 - got a function we've got the name of our
07:43 - sub program or the function in other
07:45 - words we've got parameters we've got a
07:46 - return value we've got if-else
07:49 - statements we've got a for loop and
07:50 - variables and so on so it does look a
07:53 - bit difference but it has the same core
07:55 - concept and this isn't and that this
07:57 - isn't a language misses pseudocode is
07:59 - not I mean you wouldn't be able to have
08:00 - some of these mathematical notation in
08:03 - an actual programming language you'd
08:04 - have to convert it somehow I know this
08:06 - looks quite complicated but really this
08:08 - is a simplification because this is
08:10 - essentially the Python implementation
08:12 - just if I scroll down you can see it's a
08:15 - lot longer and requires a lot more you
08:19 - know repeated code and code but it's
08:21 - specific to Python so the Java version
08:23 - would look similar but wouldn't be
08:25 - exactly the same and all service
08:26 - includes things which aren't really
08:28 - relevant so how you predict using this
08:30 - how you load in the dataset isn't really
08:35 - relevant for how this works its
08:37 - operation so the core of it is just
08:40 - expressed here it's not
08:41 - you know none of the sort of background
08:42 - things you have to do to the parrot are
08:45 - involved writing in pseudocode is much
08:48 - more useful than writing in obviously
08:49 - the language not just because of the
08:51 - length but this was written 30 years ago
08:53 - who knows what pronouns are going to be
08:56 - around in 30 years it's better keeping
08:58 - it in an abstract form to give another
09:01 - example of real-life use you may or may
09:03 - not have come across scientific papers
09:05 - before you know scientists do research
09:07 - and they want to tell people about it
09:09 - and they do that by in most cases they
09:12 - do that by writing papers which are very
09:15 - structured document and they get
09:20 - published
09:20 - ideally in journals so you submit them
09:22 - to a journal and hopefully it will get
09:23 - published so this is one about machine
09:27 - learning and network security so on a
09:30 - similar theme to the AI textbook and
09:32 - they're proposing a algorithm and part
09:36 - of it is here so this is an example
09:38 - which isn't really pseudocode because
09:40 - it's too high level pseudocode is meant
09:43 - to look like program code you're meant
09:45 - to be able to convert it to program code
09:47 - fairly easily whereas here it's more
09:50 - just like a few statements so it's
09:52 - saying collector circulated from state
09:53 - estimator that's not really a program
09:56 - like statement whereas just below
09:59 - they've got a slightly more pseudocode
10:01 - like one so a second different algorithm
10:04 - which again our first glance looks
10:06 - different what we're dealing with but
10:08 - actually has got the same kind of
10:11 - structure even if it uses the same
10:13 - sentence as for one above so for an
10:15 - input we've got some variables we're
10:17 - initializing we've got a while loop and
10:19 - we've got an output in the form of a
10:21 - return value so similar sort of stuff to
10:24 - what we're doing in our pseudocode again
10:27 - the content you'd have to read a lot
10:28 - about what's going on I have no idea
10:30 - what's going on but you could convert
10:33 - this if you want to turn you to the time
10:34 - to read what they're proposing again
10:37 - they could have written this in Python
10:39 - or Java or Visual Basic or whatever but
10:41 - if I massively limits as usefulness
10:43 - because someone really miss could not
10:45 - know that language or may not be a
10:46 - programmer at all if they want to be
10:48 - able to understand what's going on
10:49 - regardless of what knowledge they have
10:51 - about
10:52 - hopefully that's given you a bit of a
10:54 - window into how pseudocode is used
10:56 - outside of exams but I know a lot of you
10:58 - are focused on exams so this is a
11:00 - paucity of a question from a QA GCC the
11:04 - old course and it's a pretty standard
11:06 - one a pretty easy one have to say it's a
11:08 - fairly easy seven marks I chose this
11:10 - because I want to focus on the actual
11:12 - writing rather than for problem solving
11:14 - parts which is which should be for more
11:16 - difficult bit but we've got two right
11:19 - now given like this standard question at
11:21 - using evil pseudocode or flowchart
11:23 - Wolf's you're gonna do pseudocode but
11:25 - don't always tell you to do this for
11:26 - don't always include this little
11:28 - classification so I'd suggest when they
11:30 - don't you still do it in pseudocode
11:32 - anyway i'll definitely recommend
11:34 - pseudocode over flowcharts for problems
11:37 - like these we are hoping you're gonna
11:38 - answer in pseudocode you can use a
11:40 - flowchart if you if it doesn't say not
11:42 - to but I would prefer it's people use
11:46 - pseudocode
11:46 - because it's certainly more designed for
11:48 - that but anyway so this specific problem
11:53 - is about calculating if you might not
11:55 - feel a train or need to complete a
11:57 - journey and they often break it down
11:59 - into bullet points which is really
12:00 - useful because it's often in a rough
12:02 - order so first of all winning till you
12:04 - ask for user how many kilometers of his
12:06 - journey will be and then you continue if
12:08 - this value in pursuit is greater than
12:10 - zero
12:10 - we've been going to serve you manna fuel
12:12 - to a number a hundred times greater than
12:14 - the number of kilometers and not allow
12:16 - this amount to be less than 1500 then
12:19 - we're going to display this amount to
12:20 - the user so like I say relatively
12:23 - straightforward but if I can just talk
12:25 - you through the kind of or how I would
12:27 - approach this from a writing point of
12:29 - view why I tend to do free things when I
12:31 - write pseudocode first of all I tend to
12:34 - capitalize my keywords and the keywords
12:39 - are kind of part of your commands but
12:42 - aren't quite vocal minded but aren't of
12:47 - a real body of the commander that make
12:48 - sense so things like if while even well
12:55 - I tend to capitalize boolean values so
12:59 - these are private part of a command but
13:01 - aren't although they're for for program
13:03 - language essentially they're not really
13:06 - part of this problem I'll also do
13:09 - indentation so I will indent when I do
13:13 - nesting so nesting is where you put a
13:15 - control structure within another control
13:18 - structure so if you had if a menu did a
13:23 - while leap within VF block you have a
13:25 - little nesting but you have a little
13:27 - indent here to make it clear that this
13:29 - is within this block you know it's not
13:32 - always clear otherwise if you don't -
13:34 - then you'll be used to this because you
13:35 - have two other languages you don't have
13:37 - to do indentation but it's definitely
13:39 - recommended I'll also I do what I
13:43 - described as closing off blocks there
13:49 - may be a technical word for this which I
13:50 - don't know but it's where you have say
13:52 - an if block and then we're going end if
13:54 - at the end to signal that we have
13:56 - finished this I mean in tation will also
13:59 - show this but it's useful to do this and
14:01 - all three of these are really for
14:03 - clarity you want to make it as clear to
14:05 - the examiner and actually clear for us
14:07 - as well it's easy to get confused you
14:08 - don't want to get confused in a
14:11 - stressful situation which is what an
14:12 - exam is you want to make it as clear as
14:15 - possible and as readable as possible so
14:19 - let's get rid of all of this and
14:20 - actually answer it because it may make
14:22 - more sense when I actually show you we
14:25 - need a couple of variables here we need
14:27 - an amount of fuel variable we also need
14:30 - how many kilometers variable and we want
14:33 - to initialize that it's usually the
14:35 - first thing you do when you write code
14:36 - so let's do amount
14:44 - whew and it's really useful to do what
14:49 - you would call descriptive names for
14:51 - variables so I also added camelcase
14:54 - seeing as we're talking about actually
14:56 - for writing I'll do lowercase for first
14:58 - word and then uppercase for the second
15:00 - word they're conjoined so this is one
15:01 - word in a sense but Billy is telling us
15:05 - two things
15:05 - I mean I personally will show my
15:08 - variables as an equal sign a lot of
15:10 - people in pseudocode will do a little
15:13 - arrow so I have identify here I even
15:15 - named off a variable and then they'll
15:17 - have an arrow and the value itself a lot
15:20 - of people do but I think mostly because
15:21 - you know equals implies a comparison I
15:24 - personally will use two equal signs as a
15:26 - comparison because program code would
15:28 - often do that but again these are sort
15:31 - of decisions which are really up to you
15:32 - you can do an arrow you can do an equal
15:34 - sign I'm not sure what else you can do
15:37 - or some people do some people do oops
15:41 - some people will do set your name ID to
15:46 - zero something like that again it's up
15:49 - to you I think in equal sign is
15:50 - perfectly serviceable so we'll do that
15:52 - here and we don't know if you might have
15:54 - fewer yet sort of set this to zero it's
15:56 - good to initialize it to a value we've
15:58 - then also need this how many kilometers
16:00 - one so we could let us say kilometers as
16:07 - our name and then we need to what we
16:10 - could do two steps and initialize mr.
16:13 - zero and then do an input but we could
16:14 - just try and combine it in one so we
16:17 - could just do input here so by keywords
16:20 - when I say I capitalized keywords which
16:21 - also includes built-in functions for me
16:25 - personally I'll do Inc in capitals so an
16:28 - input is a built-in function so we've
16:30 - got the function name input and we've
16:31 - got four parameter we have to put in and
16:33 - this will be for an input question so
16:37 - how many kilometers and the user will
16:40 - answer and we'll get saved in this
16:41 - variable again this is an honest debt
16:44 - which is kind of up to you I think mrs.
16:46 - the easiest way to do it and this is a
16:48 - step which will vary depending on your
16:50 - language different languages handle
16:52 - input
16:53 - from me but this is quite a simple way
16:55 - of expressing it in just one line in
16:57 - actual program code it may take several
16:59 - lines and it may take quite complicated
17:01 - function call to get this result but
17:04 - this is a fairly easy way of doing it
17:06 - and the whole point of pseudocode is
17:07 - that you can simplify those awkward
17:09 - little programming oddities like having
17:12 - to do with inputs this is a pretty
17:14 - simple way of doing it we're only going
17:16 - to continue if this value is greater
17:18 - than 0 so let's just do an if statement
17:20 - to do this so if kilometers is greater
17:27 - than 0 I mean I would do then
17:35 - capitalized you could do a colon you
17:38 - could just leave it but then I would
17:41 - indent you cross-city brackets up to you
17:43 - so if launches relativism we're going to
17:45 - continue with rest of its program and
17:48 - I'm gonna do a little indentation here
17:49 - so now we need to set a few amount and
17:52 - feel Tuvan up to a number 100 times
17:53 - greater than the number of kilometers so
17:57 - I'm out fuel it's gonna be a hundred
18:00 - times four kilometers so 100 times
18:06 - kilometers and here I've used the actual
18:09 - symbol often where you can't really do
18:11 - this in a programming language because
18:12 - you don't have this on our keyboards so
18:14 - often in programming it'll be a little
18:16 - star you could do that in order to up to
18:19 - you easy just write it as a normal
18:21 - multiplication sign when we have this
18:24 - caveat here that the amount of fuel
18:25 - can't be less than 1500 so we need to
18:28 - have another if statement which is going
18:30 - to be embedded in this it's going to be
18:32 - nested in this larger if statement so
18:35 - into another one here and we're gonna be
18:37 - careful to keep our indentation nice and
18:40 - consistent so if the amount of fuel is
18:43 - less than 1500 we're going to actually
18:46 - set the amount of fuel
18:50 - to be 1,500 because it that's the
18:53 - minimum it can't be any less than 1500
18:56 - and notice how you could be quite
18:58 - careful to be consistent ultimately it's
19:00 - up to you all these decisions are up to
19:02 - you but you've got to be consistent so
19:04 - once you make the decision to use if
19:06 - then you've got to vent use it
19:07 - throughout you can't just drop it
19:09 - because it will look a bit funny so now
19:11 - we I would like us say this is me
19:14 - closing off my block so I'd go and if
19:16 - and this is for this block I've done it
19:19 - in bruges tryna make it more obvious
19:20 - then we've got another wider one gonna
19:23 - go through each level of nesting in fact
19:26 - I was a bit premature then because we
19:27 - need to actually output it and this is
19:29 - still within our wider if buddy so we
19:33 - need to output amount fuel and then we
19:44 - can do the final endeth and that would
19:46 - be it for our algorithm output is
19:50 - another example of where we can make
19:52 - things a bit easier so in some languages
19:54 - it's relatively you know outputting to
19:55 - Akron so it's just as simple as doing
19:57 - print I mean whatever you want to output
19:59 - other languages you have to be do all
20:02 - sorts of stuff like system out console
20:05 - today it can be quite long sometimes so
20:07 - this is a nice way of simplifying it
20:09 - again like with input this is a built-in
20:12 - function you know I made up language but
20:15 - that would be it so it's a relatively
20:17 - simple way of doing it there are lots of
20:19 - ways you could do this differently as
20:20 - I've sort of pointed out for out you
20:22 - don't have to capitalize it but if and
20:24 - capitalizing it is important because you
20:27 - may get confused it's useful to be able
20:29 - to differentiate between a variable name
20:31 - which is all a lowercase and a keyword
20:33 - which is an uppercase the exception
20:35 - might be where you have a constant
20:37 - constant often written as capitals just
20:39 - by convention but usually it's nice to
20:42 - have this distinction between them or
20:44 - severe notation it makes it really clear
20:45 - how this nesting works and it removes
20:48 - any ambiguity which is where an examiner
20:52 - could take your code in multiple ways
20:54 - depending on how they interpret it you
20:57 - know it's nice and clear here that this
20:59 - is a separate loop it is
21:02 - if statement within for wider if
21:04 - statement if we didn't have annotation
21:05 - if we kind of shifted this across to
21:07 - here it might not be very clear but it's
21:13 - meant to be within this so the nesting
21:16 - is only really clear once you indent it
21:17 - and I think also closing off helps
21:19 - demonstrate that too here are two
21:22 - possible implementations of the
21:24 - algorithm for pseudocode we just wrote
21:26 - on the left you've got c++ on the right
21:28 - i've got java
21:29 - and that core code is very similar it's
21:32 - got to be to fulfill this task but very
21:34 - differences that are specific to each
21:36 - language so for example if both go to
21:38 - import some external code we've both got
21:41 - a main method i've got a class in java
21:44 - and the important the inputting
21:47 - outputting is a little bit different
21:49 - i've got a weird chained command here to
21:52 - try and get it to an integer and
21:53 - retrieve the input from the user
21:56 - and we've got a different output
21:58 - statements as well so as a little bit
21:59 - different these aren't these details
22:01 - aren't necessary to convey what this
22:04 - algorithm does is the actual core code
22:06 - we care about so we don't need to
22:08 - include all this stuff when we are
22:09 - writing pseudocode notice how both
22:11 - languages use braces to close off blocks
22:15 - so this is the equivalent of what I was
22:18 - doing before with end if you could use
22:20 - braces for that purpose if you wanted to
22:21 - and actually neither need indentation so
22:26 - you could really mess up the notation
22:29 - and it would still work it doesn't care
22:31 - about the invitation but it makes it
22:32 - look a lot nicer for the user if you
22:37 - wanted to you could write this code as
22:39 - your answer to the question we just
22:40 - looked at you could write actual program
22:41 - code in an exam and in some cases and
22:44 - simple cases that's perfectly fine but
22:46 - when you've got all this weird sort of
22:48 - boilerplate code you've got to include
22:50 - it just doesn't it doesn't make sense to
22:53 - include it particularly it also you know
22:55 - how to look up this bit I'd forgotten
22:57 - how to do this and a lot of programming
22:58 - as you probably know by now is looking
23:00 - up stuff because you forget it so you
23:03 - could just keep this nice and simple
23:04 - also things like having to declare the
23:06 - datatype or variables don't use in
23:08 - pseudocode it just can be implicit just
23:11 - make life easier
23:12 - think about how you would solve it in
23:14 - your actual language and
23:15 - simplify it to make things easier okay I
23:18 - want to now give you some tips and
23:20 - summarize some of the stuff I've been
23:22 - saying so to be able to write and read
23:25 - and understand pseudocode you do need to
23:27 - know some real code your selfie need to
23:32 - have learnt a real programming language
23:33 - and I certainly I think that's
23:35 - definitely an issue if you're looking at
23:37 - some of the stuff we've been doing and
23:39 - don't really know what's going on don't
23:41 - know what an if statement is don't know
23:42 - what a variable is it's important that
23:44 - you go away and learn four basics first
23:46 - so I learnt this I learn Python was the
23:50 - first language I learned and I learnt it
23:52 - on YouTube so if you type in something
23:53 - like python tutorial or java tutorial
23:56 - whatever language you're doing make sure
23:57 - you ask your teacher or if not python is
24:00 - a good one to go with lots of different
24:03 - options personally I learnt using the
24:05 - new Boston's videos is actually not this
24:09 - playlist the old one
24:10 - so I'm sure this is good as well with
24:12 - society newer but you don't need to know
24:14 - all of this stuff there are 56 videos in
24:16 - this one right to take this as an
24:18 - example others are good as well I'm sure
24:20 - you don't need to know all of this stuff
24:22 - you don't need to know how to build a
24:23 - web call though it's not really relevant
24:24 - for GCC and so you can stop about at
24:28 - reading and writing from files available
24:31 - you do need to know a little bit more
24:32 - you need to know about object-oriented
24:34 - stuff so classes and objects that sort
24:37 - of thing but again not all of this stuff
24:38 - is relevant even at a level so you need
24:41 - to go to details you just need to
24:43 - understand the basics and then you can
24:45 - well it'll make more sense and you're
24:48 - starting to write pseudocode because you
24:49 - know what actual code looks like and
24:52 - also on my channel I have Sophie's of a
24:54 - playlists I've got to take paper too as
24:57 - an example for psy GCSE very programming
25:00 - parts on a specification so I've
25:03 - approached for theory I haven't made pro
25:05 - many videos like these yet because we're
25:08 - certainly out there I feel like it's a
25:10 - bit redundant but I have made ones which
25:12 - cover the theory right so this will help
25:15 - too I think and this is specific to your
25:18 - courses so this is you know this is much
25:21 - more general approach but it's still
25:23 - really useful mrs. Pony in there
25:26 - and hopefully the combination of the two
25:28 - will make things better when you're
25:30 - writing pseudo code you'll know where to
25:31 - to go from to really emphasize this Mako
25:36 - silicon look like we all code based on
25:37 - your learning from point one about
25:40 - actually going away and learning real
25:41 - programming but simplify don't include
25:43 - awful wee little things which are unique
25:46 - to each language make it as general as
25:48 - possible you're not going to get good at
25:50 - this stuff
25:50 - overnight you've got to do some practice
25:52 - for it in the case of learning real
25:54 - programming you really want to be
25:56 - finding some problems to solve and just
25:58 - doing it in a practical sense here it's
26:00 - more written and more formal you've got
26:02 - to go through path separate questions as
26:05 - to do this and also in the description
26:07 - will be linked to a bunch of longer mark
26:10 - algorithm questions which require you in
26:12 - most cases to answer using a pseudo code
26:14 - that'll help you they're also all quite
26:16 - similar so you'll by doing lots of them
26:19 - you'll just it will become more and more
26:21 - automatic which is really useful so
26:23 - that's definitely a big recommendation
26:25 - I'm sure I've said this before but it's
26:28 - important to be consistent with your
26:29 - pseudo code right so there's no syntax
26:31 - so you can kind of choose what you're
26:33 - doing in a sense you might choose to use
26:35 - an arrow to assign data to a variable
26:38 - once you do that make sure you're
26:40 - consistent don't suddenly switch to an
26:42 - equal sign in this code here don't worry
26:46 - about what it does it doesn't do
26:47 - anything but you might want to pause and
26:48 - see how many inconsistencies you can
26:50 - spot so this isn't a good example of
26:52 - whatever this program is trying to do
26:54 - because you know for example we've got
26:57 - printing Capitals here we suddenly
26:59 - switched to an output in lower case
27:00 - we've got two quotes around our string
27:02 - here we have a quote around our string
27:04 - up here
27:05 - lots of inconsistencies and maybe one an
27:08 - examiner would forgive you for but if
27:10 - it's a litany of errors and
27:11 - inconsistencies they could notice and
27:14 - mark you down so make sure if once you
27:16 - choose to do something and the choice is
27:18 - yours just stick to it and make sure
27:20 - you're nice and consistent and my final
27:23 - point is that make sure you realize that
27:25 - your code isn't actually ever gonna get
27:26 - run so don't worry too much about it
27:29 - right it's not worth stressing about
27:30 - this is just a simplification of real
27:32 - code it's not a separate language it's
27:35 - not ever gonna get run there isn't a set
27:36 - syntax you can do what you want
27:38 - essentially
27:39 - as long as you're consistent and a nice
27:40 - and clear than whatever you write is
27:42 - gonna be absolutely fine
27:44 - so hopefully this video was useful if
27:46 - you have any questions or suggestions or
27:48 - maybe you've got your own method let me
27:50 - know in the comments and always
27:51 - interested to hear what you've got to
27:52 - say and otherwise good luck for your
27:55 - exams

Cleaned transcript:

hello this is gonna be me trying to answer a really common question which is about how you write pseudocode or what even in pseudocode it comes up all the time so it's obviously something which perplexes students year after year i also think it perplexes teachers to an extent because often I have spoken to teachers who are confused as to why their students find it difficult because it seems like an obvious concept when you have more context when you understand its purpose it seems like a easy to grasp idea but when you're a student certainly I think that's not the case and I know it wasn't for me when I learnt it it was just sort of mention out of a blue bow my teacher didn't understand what it was or how you write it or syntax at hand so let's try and clear it up now I have previously made a video on a very similar overlapping question which is about how you answer the algorithm questions so the longer mark questions which often appear towards the end of exams you know they're seven eight nine ten mark questions a lot of people find them difficult I think partly because you're often going to be writing pseudocode to answer them so there's a lot of overlap I spent a lot of time of that video talking about pseudocode because I know that it's difficult so this is going to be a slightly more highlevel maybe even more practical I'm going to show you some examples of me going through it this was more just me showing you some slides like usual but I want to show you some examples of pseudocode in real life and also go through a few of these questions focusing on pseudocode specifically but this may be useful and if you've watched it there'll be some overlap but for the time being just to give a very short answer to this question how do you write pseudocode well it don't worry about it it's really not a big deal we don't have to it's not something you have to really think about but the whole idea it shouldn't be the actual writing of the pseudocode shouldn't be the stress point and the clue is were sued over prefix comes from a Greek word which I think he pronounces servers which means false or fake etc and even a normal English we have words like pseudoscience pseudonym which implies something not being quite true so pseudocode is not an actual program language it's fake code so isn't it looks like code but it doesn't belong to an actual language like Java pipe in C++ etc these actual programming languages have a very strict syntax the syntax being for kind of rules or for language of things you've got to follow for it to work and to translate to machine code so for Java versus and Java code you have to put a semicolon after every statement that is just part of its syntax and I've forgotten to put one here so the idea is come up with a syntax error when I try and run it we get an exception we get an error because we've broken the syntax pseudo code doesn't have a syntax so you can't have these sort of errors it doesn't matter there are reasons why we've got semicolons in Java but it's not essential to this code having a semicolon from my understanding point of view and this brings us to the main purpose of pseudo code which is to be a highlevel and abstract way of representing now we've been without tying it to a specific language we don't want to limit the algorithm we've written to being just used in Python or just used in Java if you see an algorithm written in pseudo code if you are a good enough programmer you should be able to implement it without too much difficulty so the actual value of an algorithm is how it works rather than how you need to get it to work on a certain machine or by using a certain language it's regarded as highlevel or abstract because we're simplifying the problem we're not dealing with all the nittygritty details for having a set syntax brings you you'll know from your own programming but there are lots of annoying things you have to do like put a semicolon like having to indent it which if you mess up your code won't run we don't really care about that because that's not important to how the algorithm works it's important on how you actually implement it but anyone can do that it's the important bit for valuable bit is how it works I think some of the confusion arises from the fact of exam boards do stick to a syntax kind of ievo have in exam papers pseudocode excerpts which all look very similar ie they all follow the same scheme that's because exam boards have to be roast and ER diced right they can't just one year create a different paper every year there are probably different authors so DIF questions written by different people they've got to make from not consistent otherwise developer questions asked by students teachers parents etc so probably very standardized which doesn't really lend itself to the actual use of pseudo code in the wider world outside of just you know scored exams it's not just that this very rich and looking pseudo code is included in questions but also amarte schemes so visa from OCR a level computing papers survey old course by the way and amarte schemes answers will be given using in this case OCR's specific pseudocode so you might compare your answer to this this example answer and be a bit confused as to why it looks different and you might think that you're wrong just because it looks a bit different to how they have done it but really it's for substance which has being mocked not you know if you've capitalized function whether you've done end if at the end of the block doesn't really matter it's virtual functionality which is important most examples allow you to see they're kind of standardized version of pseudocode in the specifications so in case of OCR or in fact almost all of them it's towards the end so if we go down here this is the OCR a level new course a specification actually here it says a really nice paragraph which sums up what I've been trying to say so far so although it gives us a guide of a pseudo code for examiner's are going to be using it says you're not expected to memorize the syntax of this pseudocode because actually we're doesn't really make sense outside of the exam board and when you ask to provide answers you can do it any style you choose the viennese meaning can be reasonably inferred by a competent programmer so anyone who knows how the program should be able to understand what's going on and certainly you know if you if you learnt this syntax which wouldn't recommend you'd be able to understand what's going on equally if you did things a little bit differently that would be perfectly fine too I now want to show you some reallife examples of pseudo code in action because if we're doing this for GCSE you a level your scope is quite limited you won't see the full context necessarily so is a university textbook a very famous AI one it's in its third edition but it was first written in the 90s I think possibly early 90s in see you've got a lien showing here he was one of the first people to really think about AI and you've got robots and so on so a very long textbook over a thousand pages long and it will use pseudocode to express the algorithms for a part of this topic so machine learning algorithms ones which take data and make some predictions based on it have a very specific implementation but a very specific way of operating so they need to have algorithms to represent them and there are quite a few different ones so to take one example let's look at decision trees which is probably the first one or learn if you do go down with roots so it talks about what decision trees are lots of background information some of the maths involved too and eventually we end up with some pseudocode for how you would actually how this algorithm works in a kind of formalized way so you won't necessarily understand the content here you'd have to read more or for context but there are constructs here you'll notice are the same as ones you'd be using so we've got a function we've got the name of our sub program or the function in other words we've got parameters we've got a return value we've got ifelse statements we've got a for loop and variables and so on so it does look a bit difference but it has the same core concept and this isn't and that this isn't a language misses pseudocode is not I mean you wouldn't be able to have some of these mathematical notation in an actual programming language you'd have to convert it somehow I know this looks quite complicated but really this is a simplification because this is essentially the Python implementation just if I scroll down you can see it's a lot longer and requires a lot more you know repeated code and code but it's specific to Python so the Java version would look similar but wouldn't be exactly the same and all service includes things which aren't really relevant so how you predict using this how you load in the dataset isn't really relevant for how this works its operation so the core of it is just expressed here it's not you know none of the sort of background things you have to do to the parrot are involved writing in pseudocode is much more useful than writing in obviously the language not just because of the length but this was written 30 years ago who knows what pronouns are going to be around in 30 years it's better keeping it in an abstract form to give another example of reallife use you may or may not have come across scientific papers before you know scientists do research and they want to tell people about it and they do that by in most cases they do that by writing papers which are very structured document and they get published ideally in journals so you submit them to a journal and hopefully it will get published so this is one about machine learning and network security so on a similar theme to the AI textbook and they're proposing a algorithm and part of it is here so this is an example which isn't really pseudocode because it's too high level pseudocode is meant to look like program code you're meant to be able to convert it to program code fairly easily whereas here it's more just like a few statements so it's saying collector circulated from state estimator that's not really a program like statement whereas just below they've got a slightly more pseudocode like one so a second different algorithm which again our first glance looks different what we're dealing with but actually has got the same kind of structure even if it uses the same sentence as for one above so for an input we've got some variables we're initializing we've got a while loop and we've got an output in the form of a return value so similar sort of stuff to what we're doing in our pseudocode again the content you'd have to read a lot about what's going on I have no idea what's going on but you could convert this if you want to turn you to the time to read what they're proposing again they could have written this in Python or Java or Visual Basic or whatever but if I massively limits as usefulness because someone really miss could not know that language or may not be a programmer at all if they want to be able to understand what's going on regardless of what knowledge they have about hopefully that's given you a bit of a window into how pseudocode is used outside of exams but I know a lot of you are focused on exams so this is a paucity of a question from a QA GCC the old course and it's a pretty standard one a pretty easy one have to say it's a fairly easy seven marks I chose this because I want to focus on the actual writing rather than for problem solving parts which is which should be for more difficult bit but we've got two right now given like this standard question at using evil pseudocode or flowchart Wolf's you're gonna do pseudocode but don't always tell you to do this for don't always include this little classification so I'd suggest when they don't you still do it in pseudocode anyway i'll definitely recommend pseudocode over flowcharts for problems like these we are hoping you're gonna answer in pseudocode you can use a flowchart if you if it doesn't say not to but I would prefer it's people use pseudocode because it's certainly more designed for that but anyway so this specific problem is about calculating if you might not feel a train or need to complete a journey and they often break it down into bullet points which is really useful because it's often in a rough order so first of all winning till you ask for user how many kilometers of his journey will be and then you continue if this value in pursuit is greater than zero we've been going to serve you manna fuel to a number a hundred times greater than the number of kilometers and not allow this amount to be less than 1500 then we're going to display this amount to the user so like I say relatively straightforward but if I can just talk you through the kind of or how I would approach this from a writing point of view why I tend to do free things when I write pseudocode first of all I tend to capitalize my keywords and the keywords are kind of part of your commands but aren't quite vocal minded but aren't of a real body of the commander that make sense so things like if while even well I tend to capitalize boolean values so these are private part of a command but aren't although they're for for program language essentially they're not really part of this problem I'll also do indentation so I will indent when I do nesting so nesting is where you put a control structure within another control structure so if you had if a menu did a while leap within VF block you have a little nesting but you have a little indent here to make it clear that this is within this block you know it's not always clear otherwise if you don't then you'll be used to this because you have two other languages you don't have to do indentation but it's definitely recommended I'll also I do what I described as closing off blocks there may be a technical word for this which I don't know but it's where you have say an if block and then we're going end if at the end to signal that we have finished this I mean in tation will also show this but it's useful to do this and all three of these are really for clarity you want to make it as clear to the examiner and actually clear for us as well it's easy to get confused you don't want to get confused in a stressful situation which is what an exam is you want to make it as clear as possible and as readable as possible so let's get rid of all of this and actually answer it because it may make more sense when I actually show you we need a couple of variables here we need an amount of fuel variable we also need how many kilometers variable and we want to initialize that it's usually the first thing you do when you write code so let's do amount whew and it's really useful to do what you would call descriptive names for variables so I also added camelcase seeing as we're talking about actually for writing I'll do lowercase for first word and then uppercase for the second word they're conjoined so this is one word in a sense but Billy is telling us two things I mean I personally will show my variables as an equal sign a lot of people in pseudocode will do a little arrow so I have identify here I even named off a variable and then they'll have an arrow and the value itself a lot of people do but I think mostly because you know equals implies a comparison I personally will use two equal signs as a comparison because program code would often do that but again these are sort of decisions which are really up to you you can do an arrow you can do an equal sign I'm not sure what else you can do or some people do some people do oops some people will do set your name ID to zero something like that again it's up to you I think in equal sign is perfectly serviceable so we'll do that here and we don't know if you might have fewer yet sort of set this to zero it's good to initialize it to a value we've then also need this how many kilometers one so we could let us say kilometers as our name and then we need to what we could do two steps and initialize mr. zero and then do an input but we could just try and combine it in one so we could just do input here so by keywords when I say I capitalized keywords which also includes builtin functions for me personally I'll do Inc in capitals so an input is a builtin function so we've got the function name input and we've got four parameter we have to put in and this will be for an input question so how many kilometers and the user will answer and we'll get saved in this variable again this is an honest debt which is kind of up to you I think mrs. the easiest way to do it and this is a step which will vary depending on your language different languages handle input from me but this is quite a simple way of expressing it in just one line in actual program code it may take several lines and it may take quite complicated function call to get this result but this is a fairly easy way of doing it and the whole point of pseudocode is that you can simplify those awkward little programming oddities like having to do with inputs this is a pretty simple way of doing it we're only going to continue if this value is greater than 0 so let's just do an if statement to do this so if kilometers is greater than 0 I mean I would do then capitalized you could do a colon you could just leave it but then I would indent you crosscity brackets up to you so if launches relativism we're going to continue with rest of its program and I'm gonna do a little indentation here so now we need to set a few amount and feel Tuvan up to a number 100 times greater than the number of kilometers so I'm out fuel it's gonna be a hundred times four kilometers so 100 times kilometers and here I've used the actual symbol often where you can't really do this in a programming language because you don't have this on our keyboards so often in programming it'll be a little star you could do that in order to up to you easy just write it as a normal multiplication sign when we have this caveat here that the amount of fuel can't be less than 1500 so we need to have another if statement which is going to be embedded in this it's going to be nested in this larger if statement so into another one here and we're gonna be careful to keep our indentation nice and consistent so if the amount of fuel is less than 1500 we're going to actually set the amount of fuel to be 1,500 because it that's the minimum it can't be any less than 1500 and notice how you could be quite careful to be consistent ultimately it's up to you all these decisions are up to you but you've got to be consistent so once you make the decision to use if then you've got to vent use it throughout you can't just drop it because it will look a bit funny so now we I would like us say this is me closing off my block so I'd go and if and this is for this block I've done it in bruges tryna make it more obvious then we've got another wider one gonna go through each level of nesting in fact I was a bit premature then because we need to actually output it and this is still within our wider if buddy so we need to output amount fuel and then we can do the final endeth and that would be it for our algorithm output is another example of where we can make things a bit easier so in some languages it's relatively you know outputting to Akron so it's just as simple as doing print I mean whatever you want to output other languages you have to be do all sorts of stuff like system out console today it can be quite long sometimes so this is a nice way of simplifying it again like with input this is a builtin function you know I made up language but that would be it so it's a relatively simple way of doing it there are lots of ways you could do this differently as I've sort of pointed out for out you don't have to capitalize it but if and capitalizing it is important because you may get confused it's useful to be able to differentiate between a variable name which is all a lowercase and a keyword which is an uppercase the exception might be where you have a constant constant often written as capitals just by convention but usually it's nice to have this distinction between them or severe notation it makes it really clear how this nesting works and it removes any ambiguity which is where an examiner could take your code in multiple ways depending on how they interpret it you know it's nice and clear here that this is a separate loop it is if statement within for wider if statement if we didn't have annotation if we kind of shifted this across to here it might not be very clear but it's meant to be within this so the nesting is only really clear once you indent it and I think also closing off helps demonstrate that too here are two possible implementations of the algorithm for pseudocode we just wrote on the left you've got c++ on the right i've got java and that core code is very similar it's got to be to fulfill this task but very differences that are specific to each language so for example if both go to import some external code we've both got a main method i've got a class in java and the important the inputting outputting is a little bit different i've got a weird chained command here to try and get it to an integer and retrieve the input from the user and we've got a different output statements as well so as a little bit different these aren't these details aren't necessary to convey what this algorithm does is the actual core code we care about so we don't need to include all this stuff when we are writing pseudocode notice how both languages use braces to close off blocks so this is the equivalent of what I was doing before with end if you could use braces for that purpose if you wanted to and actually neither need indentation so you could really mess up the notation and it would still work it doesn't care about the invitation but it makes it look a lot nicer for the user if you wanted to you could write this code as your answer to the question we just looked at you could write actual program code in an exam and in some cases and simple cases that's perfectly fine but when you've got all this weird sort of boilerplate code you've got to include it just doesn't it doesn't make sense to include it particularly it also you know how to look up this bit I'd forgotten how to do this and a lot of programming as you probably know by now is looking up stuff because you forget it so you could just keep this nice and simple also things like having to declare the datatype or variables don't use in pseudocode it just can be implicit just make life easier think about how you would solve it in your actual language and simplify it to make things easier okay I want to now give you some tips and summarize some of the stuff I've been saying so to be able to write and read and understand pseudocode you do need to know some real code your selfie need to have learnt a real programming language and I certainly I think that's definitely an issue if you're looking at some of the stuff we've been doing and don't really know what's going on don't know what an if statement is don't know what a variable is it's important that you go away and learn four basics first so I learnt this I learn Python was the first language I learned and I learnt it on YouTube so if you type in something like python tutorial or java tutorial whatever language you're doing make sure you ask your teacher or if not python is a good one to go with lots of different options personally I learnt using the new Boston's videos is actually not this playlist the old one so I'm sure this is good as well with society newer but you don't need to know all of this stuff there are 56 videos in this one right to take this as an example others are good as well I'm sure you don't need to know all of this stuff you don't need to know how to build a web call though it's not really relevant for GCC and so you can stop about at reading and writing from files available you do need to know a little bit more you need to know about objectoriented stuff so classes and objects that sort of thing but again not all of this stuff is relevant even at a level so you need to go to details you just need to understand the basics and then you can well it'll make more sense and you're starting to write pseudocode because you know what actual code looks like and also on my channel I have Sophie's of a playlists I've got to take paper too as an example for psy GCSE very programming parts on a specification so I've approached for theory I haven't made pro many videos like these yet because we're certainly out there I feel like it's a bit redundant but I have made ones which cover the theory right so this will help too I think and this is specific to your courses so this is you know this is much more general approach but it's still really useful mrs. Pony in there and hopefully the combination of the two will make things better when you're writing pseudo code you'll know where to to go from to really emphasize this Mako silicon look like we all code based on your learning from point one about actually going away and learning real programming but simplify don't include awful wee little things which are unique to each language make it as general as possible you're not going to get good at this stuff overnight you've got to do some practice for it in the case of learning real programming you really want to be finding some problems to solve and just doing it in a practical sense here it's more written and more formal you've got to go through path separate questions as to do this and also in the description will be linked to a bunch of longer mark algorithm questions which require you in most cases to answer using a pseudo code that'll help you they're also all quite similar so you'll by doing lots of them you'll just it will become more and more automatic which is really useful so that's definitely a big recommendation I'm sure I've said this before but it's important to be consistent with your pseudo code right so there's no syntax so you can kind of choose what you're doing in a sense you might choose to use an arrow to assign data to a variable once you do that make sure you're consistent don't suddenly switch to an equal sign in this code here don't worry about what it does it doesn't do anything but you might want to pause and see how many inconsistencies you can spot so this isn't a good example of whatever this program is trying to do because you know for example we've got printing Capitals here we suddenly switched to an output in lower case we've got two quotes around our string here we have a quote around our string up here lots of inconsistencies and maybe one an examiner would forgive you for but if it's a litany of errors and inconsistencies they could notice and mark you down so make sure if once you choose to do something and the choice is yours just stick to it and make sure you're nice and consistent and my final point is that make sure you realize that your code isn't actually ever gonna get run so don't worry too much about it right it's not worth stressing about this is just a simplification of real code it's not a separate language it's not ever gonna get run there isn't a set syntax you can do what you want essentially as long as you're consistent and a nice and clear than whatever you write is gonna be absolutely fine so hopefully this video was useful if you have any questions or suggestions or maybe you've got your own method let me know in the comments and always interested to hear what you've got to say and otherwise good luck for your exams
