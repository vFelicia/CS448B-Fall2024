With timestamps:

00:00 - hi in the last video we looked at how we
00:02 - can create
00:03 - our own user-defined functions now i
00:05 - want to go back and use some other
00:07 - functions written by someone else
00:08 - built-in ones
00:09 - which in this case are going to allow us
00:10 - to generate some random numbers
00:13 - okay so as i say we talked in the last
00:14 - video about user-defined functions
00:17 - how we can create from using the def
00:18 - keyword do def
00:20 - my function can have some parameters if
00:22 - you want to or not
00:23 - and we can use a return value if you
00:25 - want to or not
00:27 - to pass some data back to the main
00:29 - calling functions if i do something like
00:30 - print hello
00:31 - i can then call my function if i get rid
00:33 - of my indent
00:34 - and call my function to reference it and
00:37 - we'll get hello
00:38 - if i wrap this in a print
00:41 - we'll get hello printed to the user
00:44 - based on that return value
00:46 - so great that's fine but if you want to
00:48 - do something a bit more complex like
00:49 - generating some random numbers
00:51 - i could well write a function for this
00:53 - but generating
00:54 - a decent random number is quite a
00:57 - challenge
00:59 - and what we're going to look at today is
01:00 - not really totally random
01:03 - we're going to look at how we can use
01:06 - what and often refer to as pseudo-random
01:08 - so you may have come across the word
01:10 - sudo talking about pseudocode
01:12 - so sudo is greek for fake so
01:16 - pseudorandom means we're sort of
01:17 - generating fake random numbers so
01:19 - numbers which
01:20 - seem random but actually are not random
01:22 - and we'll talk more about this a bit
01:23 - later
01:24 - but i just wanted to mention that now
01:25 - because if you want to generate truly
01:27 - random numbers you have to use
01:29 - some natural occurring event like
01:31 - radioactivity which is truly random
01:33 - here we're not doing that we're going to
01:35 - use well functions which rely on time
01:38 - and time since i believe 1970 or 1980
01:41 - um as a seed but anyway we'll come back
01:43 - to that so um we're not going to
01:45 - write our own functions to actually
01:46 - generate random numbers though we can
01:48 - use
01:49 - a random function to help us
01:52 - instead we're going to use built-in
01:53 - functions and these built-in functions
01:55 - are not
01:57 - available to us automatically so there
01:59 - isn't unfortunately a random function we
02:01 - can just use
02:02 - instead we have to import what is called
02:04 - a module
02:05 - so a module is a group of related
02:08 - subroutines
02:09 - related functions and methods which
02:13 - effectively fulfill the purpose of a
02:14 - library so a code library
02:16 - is just a bunch of subroutines which are
02:19 - available to us to use
02:21 - i mentioned how variable various
02:23 - built-in functions like print
02:25 - and output are so so important to us
02:28 - printing an output print and input
02:30 - because they're quite hard to do
02:31 - and there are other functions which are
02:32 - not really hard to do but
02:34 - there's no point else redoing them
02:36 - because someone else has already made
02:37 - them and
02:38 - random is a bit like that some random
02:40 - functions are quite hard to make some
02:41 - are
02:42 - less so depending on how truly random
02:44 - you want it to be
02:45 - but thankfully we are able to import a
02:48 - module to do this and so we do this
02:50 - using the input keyword
02:52 - and we follow it by the name of our
02:54 - module in this case it's random
02:56 - and some modules are available
02:59 - with for default python installation so
03:02 - either available if you've downloaded
03:03 - python or available
03:04 - on an ide like replits other ones you
03:07 - may have to install
03:08 - which are a little bit trickier so if
03:09 - you are doing something like machine
03:10 - learning
03:11 - you may have to install a module in this
03:14 - case random comes with default python
03:16 - we just have to import it and now we
03:18 - have access to
03:19 - other functions other methods which are
03:22 - only available
03:23 - via the random module okay so let's say
03:26 - we want to
03:26 - generate five random integers between
03:29 - one and a hundred
03:30 - i can do a for loop to just repeat this
03:33 - and save us time for iron range
03:35 - uh zero to five will give us five values
03:38 - and then if i print and inside my print
03:41 - statement
03:41 - i'm going to make use of a random sub
03:44 - routine so i'll do random dots
03:46 - and then i'm going to call then this one
03:48 - i want to use is rand int
03:50 - to generate random integer this came
03:52 - from the random module hence why i'm
03:54 - using
03:55 - a calling it like a method and now
03:57 - inside the brackets it takes two
03:58 - parameters so the lowest value we want
04:01 - so if i want it to be a minimum one
04:03 - followed by at a maximum 100
04:06 - and if i now run this code we're going
04:08 - to get five
04:09 - no we're not because i did that wrong
04:11 - we're gonna get five
04:14 - random values between one and one
04:16 - hundred
04:17 - and if i run again again i'm gonna get
04:19 - different values like i say not truly
04:21 - random but random enough for us to be
04:23 - able to use it perfectly fine in a
04:25 - program
04:25 - and if we don't want it to change every
04:27 - time we run it say i want to be able to
04:29 - send a program to a friend
04:30 - and or want them to be able to access
04:32 - the same values i did
04:33 - i can set a seed so if i do random.seed
04:37 - and if i put any number into the
04:39 - brackets if i just choose um
04:42 - two is my favorite number i can supply a
04:45 - seat of two and what this does
04:46 - is this is the starting point for this
04:49 - random action so it's going to use
04:53 - two to start off and this force for
04:56 - numbers to be the same every single time
04:58 - because we're starting off with the same
05:00 - number and this is why
05:01 - these numbers are not truly random they
05:03 - are instead deterministic
05:06 - if i can spell that right hopefully
05:08 - deterministic because
05:09 - we can supply an input and we know what
05:11 - the output is going to be
05:12 - based on the input so a seed will cause
05:14 - it to be the same if i get rid of a seed
05:16 - it'll go back to changing every single
05:18 - time
05:19 - okay if instead of integers you want to
05:21 - have decimal numbers so reals
05:23 - we can instead use a random random
05:27 - method within the module random so we
05:28 - get random.random
05:30 - this method has no parameters takes no
05:34 - parameters takes no arguments i should
05:36 - say
05:36 - really and we can print this because
05:39 - what this does if i can spell a number
05:41 - what this is going to do is generate
05:43 - numbers with inverrange zero to one
05:45 - but in this case it's going to be
05:46 - decimal numbers we get quite a few
05:47 - decimal places here
05:49 - and if i want to limit how many decimal
05:50 - places we get i can wrap this
05:52 - in a round function and if i
05:55 - leave this with just one i'll make sure
05:57 - i've got enough brackets
05:58 - i am going to this is going to make an
06:00 - integer which isn't very helpful here
06:02 - because it's
06:02 - either going to be zero or one so
06:04 - instead i can supply a second argument
06:05 - which is how many decimal points we want
06:07 - let's do four and now we should get a
06:10 - slightly more manageable
06:12 - set of random numbers if i want to scale
06:15 - these to be across
06:16 - a wider range what i can do is multiply
06:20 - this generated in a way a seed
06:23 - and multiply it by our upper range so
06:25 - let's do maybe a thousand
06:27 - minus our low range let's do 100 and
06:30 - then you add on
06:31 - your lower range which in this case is
06:33 - 100
06:34 - and then we should get bigger numbers
06:38 - within our range
06:39 - i won't show all of the functions
06:40 - because some are really specific and
06:42 - don't really need to be used for many
06:43 - people
06:44 - but in terms of lists there are two
06:46 - useful ones in particular so i've got a
06:48 - list
06:48 - called hat you can imagine you know a
06:50 - raffle having a hat
06:52 - and some names in the hat and you're
06:53 - going to pick one at random to give a
06:54 - prize to you maybe
06:56 - we can use a random dot
06:59 - choice method and inside we're going to
07:02 - supply
07:02 - our list which is hat as our parameter
07:05 - as our argument i should say
07:06 - always mix those two up and now it's
07:08 - going to choose a random item in our
07:10 - list in that case bob if i on it again
07:12 - i'll get a different one charlie back to
07:15 - charlie
07:16 - because it's random each time so that
07:17 - can be quite useful we can also shuffle
07:20 - our um list so if i
07:23 - shuffle hat like this uh nothing will
07:26 - happen because
07:27 - it's not um that's the shuffling yet so
07:30 - actually we shouldn't really have this
07:31 - in print
07:32 - we get none returned which isn't very
07:34 - helpful so if i shuffle this
07:36 - that's great and if i now just actually
07:38 - again not very helpful if i now print
07:39 - hat after the shuffle
07:41 - we're going to get a different order to
07:42 - one we had before because lists are
07:44 - ordered
07:45 - does matter and in that case it's
07:47 - changing the order for us that's also
07:49 - quite useful so maybe we are changing
07:51 - these names to be of athletes
07:53 - and we want to go through each athlete
07:56 - name and generate a random score for
07:58 - them maybe we're doing long jump
07:59 - in some school sports day maybe and we
08:02 - want to generate a random
08:05 - jump length for them so for world record
08:07 - for
08:08 - long jumpers as far as i'm aware about
08:10 - nine meters just below nine meters and
08:12 - so we may want to generate numbers
08:13 - between the range
08:16 - one and nine i think probably you can
08:17 - manage one meter even if not very good
08:19 - i think i i hope at least so we only
08:22 - generate numbers between this range so
08:23 - we can use what we did before
08:25 - we can let's just do jump
08:29 - length and choose random dot random
08:33 - and make sure we make this scaled
08:36 - by doing so let's do 10 as our upper
08:39 - limit subtracted by a lower limit which
08:40 - is one
08:41 - multiplied added our lower limit which
08:44 - is one again
08:45 - and now we might want to round this a
08:46 - jump length
08:48 - equals round jump
08:51 - length and let's do this to two decimal
08:53 - places and now we can print the athlete
08:55 - followed by their jump length which
08:57 - you've generated
08:58 - randomly so let's run this let's get rid
09:00 - of this white space
09:02 - and see what happens so um we get some
09:05 - values here which is fine
09:06 - it works how he kind of wants it to
09:08 - there is an issue
09:09 - here so we have a new world record
09:11 - holder because alice has jumped nine
09:13 - meters
09:14 - and like i said as far as world record
09:15 - is i think 8.95
09:17 - because i just looked up and we have
09:21 - values which go beyond it so it's not
09:22 - very realistic for you just going to
09:24 - magically beat the world record
09:26 - and that's because these numbers are
09:28 - distributed
09:30 - uniformly so they're distributed
09:31 - uniformly between one and nine and so
09:33 - you're likely
09:34 - you know just as likely to get a value
09:36 - of nine as you are a value of one
09:38 - and that's not really or as a value of
09:41 - five right so it's not that's not really
09:43 - realistic people tend to gather about a
09:47 - certain amount so maybe the average is
09:48 - five
09:50 - which still seems quite far um but you
09:53 - know it's very unlikely you're going to
09:54 - get nine it's possible someone can get
09:55 - nine but it's very very unlikely
09:57 - so instead of using a uniform
09:58 - distribution we can use a normal
10:00 - distribution also called a gaussian
10:02 - distribution
10:03 - now you may not have come across this in
10:05 - maths it sort of depends what stage
10:06 - you're at
10:07 - but this is where we have a nice smooth
10:09 - bell curve
10:10 - and it's a way of generating
10:12 - probabilities which
10:14 - match normal human life we don't tend to
10:16 - have people who are
10:18 - low massively tall or can jump really
10:20 - really far you have a very few people
10:22 - who can jump
10:22 - really really far or jump really really
10:24 - a short length
10:26 - we tend to sort of group around the mean
10:28 - and that is what a normal distribution
10:30 - is modeling so instead of using the
10:33 - random function again i can get rid
10:35 - of this and instead do random.gauss
10:40 - so gauss is a mathematician who this
10:43 - distribution is named after
10:44 - and this function this method takes two
10:47 - arguments
10:48 - the first one is the average so let's
10:50 - say just the average is five
10:52 - which may not be realistic i'm not quite
10:54 - sure and our second argument is for
10:55 - standard deviation so this is a
10:57 - measure of how spread out people tend to
11:00 - be so let's say the majority of people
11:02 - are going to be within
11:03 - about a meter and a half
11:06 - of that mean and now if i run this
11:10 - we're going to get similar looking
11:12 - values but now they're much more
11:13 - centered
11:14 - around the mean so majority are going to
11:18 - be between
11:19 - um 6.5 and 3.5 we do get here alice
11:23 - who again is smashing it with 7.88
11:26 - that's a pretty good score but it's not
11:28 - nine you know this is much more
11:29 - realistic assuming she was a
11:31 - professional athlete i suppose
11:33 - so the values are a bit more realistic
11:34 - we can still get some extreme
11:36 - outliers but it's it's not a uniform
11:38 - distribution it follows the bell curve
11:41 - this right now includes two programming
11:43 - exercises first of all
11:44 - i want you to based on the last video
11:47 - create a function
11:48 - called gen random list which is going to
11:50 - take three parameters
11:53 - and it's going to return a list of the
11:55 - size which we specify as our first
11:57 - parameter
11:58 - and then randomly generate values in
12:00 - that list
12:01 - until we hit the length between the
12:04 - lowest and highest parameters which also
12:06 - supplied
12:07 - the second exercise is about using
12:10 - the gaussian distribution we looked at
12:12 - just now
12:13 - and generating some heights for people
12:15 - so i've supplied
12:17 - a a mean of 160 and a standard deviation
12:21 - of seven
12:21 - so you can use this in the gauss
12:23 - function and also if you want to
12:25 - replicate the exact values i used here
12:27 - make sure you use a seed of 10 and you
12:29 - should get the same values here
12:31 - but the names you can obviously change
12:32 - you can add more names if you want to
12:34 - in your list of names so have a read
12:36 - through have a pause
12:37 - and have a go these exercises will be
12:39 - solutions in the description

Cleaned transcript:

hi in the last video we looked at how we can create our own userdefined functions now i want to go back and use some other functions written by someone else builtin ones which in this case are going to allow us to generate some random numbers okay so as i say we talked in the last video about userdefined functions how we can create from using the def keyword do def my function can have some parameters if you want to or not and we can use a return value if you want to or not to pass some data back to the main calling functions if i do something like print hello i can then call my function if i get rid of my indent and call my function to reference it and we'll get hello if i wrap this in a print we'll get hello printed to the user based on that return value so great that's fine but if you want to do something a bit more complex like generating some random numbers i could well write a function for this but generating a decent random number is quite a challenge and what we're going to look at today is not really totally random we're going to look at how we can use what and often refer to as pseudorandom so you may have come across the word sudo talking about pseudocode so sudo is greek for fake so pseudorandom means we're sort of generating fake random numbers so numbers which seem random but actually are not random and we'll talk more about this a bit later but i just wanted to mention that now because if you want to generate truly random numbers you have to use some natural occurring event like radioactivity which is truly random here we're not doing that we're going to use well functions which rely on time and time since i believe 1970 or 1980 um as a seed but anyway we'll come back to that so um we're not going to write our own functions to actually generate random numbers though we can use a random function to help us instead we're going to use builtin functions and these builtin functions are not available to us automatically so there isn't unfortunately a random function we can just use instead we have to import what is called a module so a module is a group of related subroutines related functions and methods which effectively fulfill the purpose of a library so a code library is just a bunch of subroutines which are available to us to use i mentioned how variable various builtin functions like print and output are so so important to us printing an output print and input because they're quite hard to do and there are other functions which are not really hard to do but there's no point else redoing them because someone else has already made them and random is a bit like that some random functions are quite hard to make some are less so depending on how truly random you want it to be but thankfully we are able to import a module to do this and so we do this using the input keyword and we follow it by the name of our module in this case it's random and some modules are available with for default python installation so either available if you've downloaded python or available on an ide like replits other ones you may have to install which are a little bit trickier so if you are doing something like machine learning you may have to install a module in this case random comes with default python we just have to import it and now we have access to other functions other methods which are only available via the random module okay so let's say we want to generate five random integers between one and a hundred i can do a for loop to just repeat this and save us time for iron range uh zero to five will give us five values and then if i print and inside my print statement i'm going to make use of a random sub routine so i'll do random dots and then i'm going to call then this one i want to use is rand int to generate random integer this came from the random module hence why i'm using a calling it like a method and now inside the brackets it takes two parameters so the lowest value we want so if i want it to be a minimum one followed by at a maximum 100 and if i now run this code we're going to get five no we're not because i did that wrong we're gonna get five random values between one and one hundred and if i run again again i'm gonna get different values like i say not truly random but random enough for us to be able to use it perfectly fine in a program and if we don't want it to change every time we run it say i want to be able to send a program to a friend and or want them to be able to access the same values i did i can set a seed so if i do random.seed and if i put any number into the brackets if i just choose um two is my favorite number i can supply a seat of two and what this does is this is the starting point for this random action so it's going to use two to start off and this force for numbers to be the same every single time because we're starting off with the same number and this is why these numbers are not truly random they are instead deterministic if i can spell that right hopefully deterministic because we can supply an input and we know what the output is going to be based on the input so a seed will cause it to be the same if i get rid of a seed it'll go back to changing every single time okay if instead of integers you want to have decimal numbers so reals we can instead use a random random method within the module random so we get random.random this method has no parameters takes no parameters takes no arguments i should say really and we can print this because what this does if i can spell a number what this is going to do is generate numbers with inverrange zero to one but in this case it's going to be decimal numbers we get quite a few decimal places here and if i want to limit how many decimal places we get i can wrap this in a round function and if i leave this with just one i'll make sure i've got enough brackets i am going to this is going to make an integer which isn't very helpful here because it's either going to be zero or one so instead i can supply a second argument which is how many decimal points we want let's do four and now we should get a slightly more manageable set of random numbers if i want to scale these to be across a wider range what i can do is multiply this generated in a way a seed and multiply it by our upper range so let's do maybe a thousand minus our low range let's do 100 and then you add on your lower range which in this case is 100 and then we should get bigger numbers within our range i won't show all of the functions because some are really specific and don't really need to be used for many people but in terms of lists there are two useful ones in particular so i've got a list called hat you can imagine you know a raffle having a hat and some names in the hat and you're going to pick one at random to give a prize to you maybe we can use a random dot choice method and inside we're going to supply our list which is hat as our parameter as our argument i should say always mix those two up and now it's going to choose a random item in our list in that case bob if i on it again i'll get a different one charlie back to charlie because it's random each time so that can be quite useful we can also shuffle our um list so if i shuffle hat like this uh nothing will happen because it's not um that's the shuffling yet so actually we shouldn't really have this in print we get none returned which isn't very helpful so if i shuffle this that's great and if i now just actually again not very helpful if i now print hat after the shuffle we're going to get a different order to one we had before because lists are ordered does matter and in that case it's changing the order for us that's also quite useful so maybe we are changing these names to be of athletes and we want to go through each athlete name and generate a random score for them maybe we're doing long jump in some school sports day maybe and we want to generate a random jump length for them so for world record for long jumpers as far as i'm aware about nine meters just below nine meters and so we may want to generate numbers between the range one and nine i think probably you can manage one meter even if not very good i think i i hope at least so we only generate numbers between this range so we can use what we did before we can let's just do jump length and choose random dot random and make sure we make this scaled by doing so let's do 10 as our upper limit subtracted by a lower limit which is one multiplied added our lower limit which is one again and now we might want to round this a jump length equals round jump length and let's do this to two decimal places and now we can print the athlete followed by their jump length which you've generated randomly so let's run this let's get rid of this white space and see what happens so um we get some values here which is fine it works how he kind of wants it to there is an issue here so we have a new world record holder because alice has jumped nine meters and like i said as far as world record is i think 8.95 because i just looked up and we have values which go beyond it so it's not very realistic for you just going to magically beat the world record and that's because these numbers are distributed uniformly so they're distributed uniformly between one and nine and so you're likely you know just as likely to get a value of nine as you are a value of one and that's not really or as a value of five right so it's not that's not really realistic people tend to gather about a certain amount so maybe the average is five which still seems quite far um but you know it's very unlikely you're going to get nine it's possible someone can get nine but it's very very unlikely so instead of using a uniform distribution we can use a normal distribution also called a gaussian distribution now you may not have come across this in maths it sort of depends what stage you're at but this is where we have a nice smooth bell curve and it's a way of generating probabilities which match normal human life we don't tend to have people who are low massively tall or can jump really really far you have a very few people who can jump really really far or jump really really a short length we tend to sort of group around the mean and that is what a normal distribution is modeling so instead of using the random function again i can get rid of this and instead do random.gauss so gauss is a mathematician who this distribution is named after and this function this method takes two arguments the first one is the average so let's say just the average is five which may not be realistic i'm not quite sure and our second argument is for standard deviation so this is a measure of how spread out people tend to be so let's say the majority of people are going to be within about a meter and a half of that mean and now if i run this we're going to get similar looking values but now they're much more centered around the mean so majority are going to be between um 6.5 and 3.5 we do get here alice who again is smashing it with 7.88 that's a pretty good score but it's not nine you know this is much more realistic assuming she was a professional athlete i suppose so the values are a bit more realistic we can still get some extreme outliers but it's it's not a uniform distribution it follows the bell curve this right now includes two programming exercises first of all i want you to based on the last video create a function called gen random list which is going to take three parameters and it's going to return a list of the size which we specify as our first parameter and then randomly generate values in that list until we hit the length between the lowest and highest parameters which also supplied the second exercise is about using the gaussian distribution we looked at just now and generating some heights for people so i've supplied a a mean of 160 and a standard deviation of seven so you can use this in the gauss function and also if you want to replicate the exact values i used here make sure you use a seed of 10 and you should get the same values here but the names you can obviously change you can add more names if you want to in your list of names so have a read through have a pause and have a go these exercises will be solutions in the description
