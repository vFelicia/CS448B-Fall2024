With timestamps:

00:00 - for a long form I look at variables
00:01 - we're now going to talk about data types
00:03 - we looked in the last video about how
00:06 - there are two main numbers in Python so
00:08 - two main numbers are integers and floats
00:14 - also called reals more generally so an
00:17 - integer is a whole number something like
00:20 - seven or something like minus twelve is
00:23 - an integer
00:23 - there is no fractional part or as a
00:26 - float has this decimal point and a
00:28 - fractional part something like you know
00:30 - seven point two or minus twelve point
00:32 - one has a fractional part it's a float
00:34 - as opposed to an integer now integers
00:36 - and floats are two examples of data
00:39 - types and data types are a really
00:41 - important topic in not only programming
00:44 - also computer science more generally so
00:46 - they're both examples present of course
00:47 - integers and we've got floats two
00:52 - examples of data types
00:54 - but both for numbers these are not the
00:57 - only data types we have in Python we
00:58 - also have characters you also have
01:03 - strings and we also have boolean values
01:08 - as well so let's talk about these one by
01:10 - one a character is any letter number or
01:13 - symbol for example a is a character
01:15 - because it's one letter on its own if I
01:17 - press ENTER after typing an a I get an
01:19 - error it says name error name a is not
01:21 - defined so what it's doing it here is
01:23 - expecting A to B and identify
01:26 - effectively it's expecting a to be a
01:27 - variable so we need to do is four
01:30 - characters and make sure you surround
01:31 - four character the single letter number
01:33 - symbol in quotes so like this double
01:36 - quotes or single quotes you can see when
01:39 - I typed in the single quotes like that
01:42 - and press ENTER it decided to make it
01:45 - into single quotes which is fine eva is
01:47 - okay I personally do double quotes but
01:49 - that's up to you the same idea for
01:51 - numbers if you want a number to be
01:52 - treated as a character as in one snippet
01:56 - of text I'd think of it as you need to
01:58 - put it around quote so if I just type in
01:59 - five and press Enter but also it's fine
02:01 - doesn't cause an error because this five
02:03 - down here is an integer and this five up
02:06 - here is a character now for us as humans
02:08 - for difference between this five miss
02:10 - five is just for quotes which don't mean
02:12 - anything to us but to a computer
02:13 - the computer can do certain things with
02:15 - four five down here that I can't do with
02:17 - a five up here because it's Tweety miss
02:18 - five four quotes as a character not a
02:21 - number it can't do things like division
02:23 - or multiplication or using mod so it
02:26 - needs to limit its operations to the
02:28 - datatype if a new something like five as
02:31 - a character / - press Enter I get an
02:35 - error it says we've got unsupported
02:36 - operand types for the division operator
02:39 - STR and int so int is what this side is
02:45 - so the two operands are effectively verb
02:47 - it's a data either side of the operator
02:48 - and the two is an integer and for STR is
02:52 - a string so we'll talk about strings in
02:55 - a second but really it's saying that
02:57 - actually we can't do this operation on a
02:59 - character it just doesn't know how to as
03:01 - 5/2 of course we'll be fine
03:04 - get 2.5 because the two operands are of
03:07 - the same data type errors occur when you
03:09 - try to or mistakingly mix datatypes
03:11 - let's talk about those strings then
03:13 - because they are really smart characters
03:16 - so say hello we did hello world before
03:18 - hello world when it surrounded by quotes
03:20 - either double or single press Enter
03:22 - that's fine but as a string so string as
03:24 - multiple characters put together strings
03:27 - are the datatype before text if we did
03:29 - say hello on its own press Enter again
03:31 - the name hello is not defined because
03:33 - it's expecting that to be a variable
03:35 - which hasn't been initialized yet the
03:37 - datatype dictates the operations we can
03:39 - do on that data and so for example we do
03:43 - hello / - again this is going to also
03:47 - cause an exact same error because we
03:50 - can't divide a word by an integer -
03:53 - doesn't make sense python is too
03:54 - confused it actually does let you do a
03:56 - few what look like arithmetic operations
03:58 - so timesing by 2 will do hello hello so
04:01 - python is overloaded the operator if you
04:03 - Asterix operator so it works of both
04:05 - integers and strings but obviously in a
04:07 - different way if I did hello
04:10 - as one word like that and plus world as
04:13 - a second word the plus works this
04:15 - operation is called concatenation
04:17 - we put two words together using the
04:19 - addition operator if I have different
04:21 - operands either side of that plus if I
04:23 - do hello
04:24 - Plus 5.5 hello plus a float press ENTER
04:29 - I get an error it can only concatenate
04:31 - string not float to string so again the
04:34 - errors have come from a data type being
04:37 - incorrect and inconsistent the final
04:40 - data type is boolean so boolean value is
04:44 - either true or false
04:45 - and so in Python we have only two values
04:48 - true and false so they start with
04:51 - capital F and lowercase rest of the word
04:53 - true and false like that so those very
04:56 - two boolean values either true or false
04:58 - and if you have done any binary yarn
05:01 - over computers represent all data as
05:03 - zeros and ones and we have boolean logic
05:06 - and we can map this boolean logic to
05:08 - zeros and ones so true can be one-fourth
05:11 - kameez zero and we can do lots of logic
05:13 - with this so boolean values are used a
05:15 - lot in programming as we'll come across
05:17 - such as in loops can also set variables
05:20 - to be boolean values as we can have any
05:23 - bit of data because a something like is
05:26 - password correct and initially this is
05:31 - going to be false until the person has
05:33 - put it in then later on to put an A in a
05:36 - correct password you can change that
05:38 - variable to be true it's good we have
05:39 - keeping track of various things in your
05:41 - code because these brilliant values are
05:43 - representing 1 & 0
05:45 - if you do something like true Plus force
05:47 - you get 1 because true is representing 1
05:50 - and force is representing 0 so 1 plus 0
05:53 - is 1 so they are kind of like variables
05:58 - in for we are representing a value but
06:00 - unlike variables you can't change true
06:02 - to be 0 and force to be 1 they are set
06:04 - how they are so in a way they are sort
06:05 - of like constants but first getting into
06:08 - slightly shaky territory I want to show
06:10 - you another useful thing regarding
06:11 - variables so from settings error
06:13 - variable to year he calls let's say 2000
06:16 - obsessing an integer to the variable
06:18 - year and now I can do some a year equals
06:21 - year plus 20 to add to that value and
06:25 - also save that new value which is now 20
06:28 - 20 under the name year if I did
06:30 - something like year across 20 that's
06:32 - great but it's not saving the new value
06:35 - under the name year
06:36 - okay so if I type in here you'll see
06:39 - it's 2020 not 2040 because this 2040 was
06:42 - coming outside of that assignment so we
06:44 - can use something called an Augmented
06:45 - assignment operator to shorten this
06:48 - process here we have something like year
06:50 - plus 20 is a bit repetitive
06:52 - instead I can use something like year
06:53 - plus equals 20 and this will combine it
06:57 - so it's sort of adding and saving for
06:59 - new value so this should be sort pierced
07:03 - when 20 which should now be 20 40
07:05 - because I've added 22 year which was
07:09 - 2020 and Batna Valley 2040 has been
07:12 - saved under the variable name you can
07:14 - use similar augmented assignments with
07:15 - the other or fitted operations so if it
07:18 - went - equals 20 could do x equals 20
07:22 - and missile year is now 40 thousand 400
07:25 - it is shortens the process a little bit
07:28 - just to say one final thing about floats
07:31 - in particular what it's typed more
07:32 - generally are all about categorizing
07:34 - data so some data is text some data is
07:37 - numbers some numbers are whole numbers
07:39 - and if this also determines how the data
07:42 - is stored in the computer and all data
07:44 - is stored in binary but is stored in
07:46 - different ways and floats in particular
07:48 - I can be quite awkward something like an
07:52 - 0.5 plus one point two gives us one
07:56 - point seven which is fine but if I do
07:58 - something like naught point one plus not
08:00 - point to I should get nine point three
08:02 - and I sort of do I get naught point free
08:05 - and a bunch of zeroes and therefore and
08:07 - I'm Intimus because if you play around
08:09 - find this it seems completely bizarre
08:11 - the reason is because because we are
08:15 - trying to represent this decimal number
08:16 - as binary we have to do the computer has
08:19 - to store it as binary and unfortunately
08:21 - there is not just inherent to how the
08:24 - negative powers of two correspond to the
08:26 - negative powers of 10 there isn't always
08:28 - a way to completely represent the number
08:31 - exactly so the computer needs to
08:32 - approximate nor point free in binary and
08:36 - so we get often a slight residue left
08:38 - over usually a very very small number
08:41 - but it looks very word and why you would
08:43 - fix this is by rounding for exactly it
08:45 - round and
08:47 - boom one plus in Auckland - and then add
08:50 - a second parameter here of two places
08:53 - two digits and I give it an open free
08:56 - we'll talk more about functions like
08:57 - this in future videos but we have this
09:00 - left over and this is not a huge deal
09:02 - once you understand what's going on and
09:04 - you are careful around it there have
09:05 - been some instances where programmers
09:07 - haven't really understood what's going
09:08 - on and so there's been major issues but
09:11 - we are used to approximations in decimal
09:13 - to thinking in an an open for itself if
09:16 - it's a third we can represent the third
09:18 - as a fraction but we need to cut off an
09:21 - Allpoint free free free free free at
09:22 - some point by use two approximations
09:24 - it's a similar sort of idea here I as
09:27 - always I recommend you pause the video
09:28 - now and try these exercises the first
09:30 - two are just about first of all reading
09:32 - freebies lines of code so we've got one
09:36 - line second line third line four find
09:37 - they're running like that try and think
09:39 - about with a final value of these
09:40 - variables will be so trace it through
09:41 - and see where the assignments are
09:43 - changing and then try it yourself to see
09:45 - if you were correct and four in four
09:47 - have a look at these two lines and see
09:48 - if you can figure out what the errors
09:50 - are and why the errors would occur

Cleaned transcript:

for a long form I look at variables we're now going to talk about data types we looked in the last video about how there are two main numbers in Python so two main numbers are integers and floats also called reals more generally so an integer is a whole number something like seven or something like minus twelve is an integer there is no fractional part or as a float has this decimal point and a fractional part something like you know seven point two or minus twelve point one has a fractional part it's a float as opposed to an integer now integers and floats are two examples of data types and data types are a really important topic in not only programming also computer science more generally so they're both examples present of course integers and we've got floats two examples of data types but both for numbers these are not the only data types we have in Python we also have characters you also have strings and we also have boolean values as well so let's talk about these one by one a character is any letter number or symbol for example a is a character because it's one letter on its own if I press ENTER after typing an a I get an error it says name error name a is not defined so what it's doing it here is expecting A to B and identify effectively it's expecting a to be a variable so we need to do is four characters and make sure you surround four character the single letter number symbol in quotes so like this double quotes or single quotes you can see when I typed in the single quotes like that and press ENTER it decided to make it into single quotes which is fine eva is okay I personally do double quotes but that's up to you the same idea for numbers if you want a number to be treated as a character as in one snippet of text I'd think of it as you need to put it around quote so if I just type in five and press Enter but also it's fine doesn't cause an error because this five down here is an integer and this five up here is a character now for us as humans for difference between this five miss five is just for quotes which don't mean anything to us but to a computer the computer can do certain things with four five down here that I can't do with a five up here because it's Tweety miss five four quotes as a character not a number it can't do things like division or multiplication or using mod so it needs to limit its operations to the datatype if a new something like five as a character / press Enter I get an error it says we've got unsupported operand types for the division operator STR and int so int is what this side is so the two operands are effectively verb it's a data either side of the operator and the two is an integer and for STR is a string so we'll talk about strings in a second but really it's saying that actually we can't do this operation on a character it just doesn't know how to as 5/2 of course we'll be fine get 2.5 because the two operands are of the same data type errors occur when you try to or mistakingly mix datatypes let's talk about those strings then because they are really smart characters so say hello we did hello world before hello world when it surrounded by quotes either double or single press Enter that's fine but as a string so string as multiple characters put together strings are the datatype before text if we did say hello on its own press Enter again the name hello is not defined because it's expecting that to be a variable which hasn't been initialized yet the datatype dictates the operations we can do on that data and so for example we do hello / again this is going to also cause an exact same error because we can't divide a word by an integer doesn't make sense python is too confused it actually does let you do a few what look like arithmetic operations so timesing by 2 will do hello hello so python is overloaded the operator if you Asterix operator so it works of both integers and strings but obviously in a different way if I did hello as one word like that and plus world as a second word the plus works this operation is called concatenation we put two words together using the addition operator if I have different operands either side of that plus if I do hello Plus 5.5 hello plus a float press ENTER I get an error it can only concatenate string not float to string so again the errors have come from a data type being incorrect and inconsistent the final data type is boolean so boolean value is either true or false and so in Python we have only two values true and false so they start with capital F and lowercase rest of the word true and false like that so those very two boolean values either true or false and if you have done any binary yarn over computers represent all data as zeros and ones and we have boolean logic and we can map this boolean logic to zeros and ones so true can be onefourth kameez zero and we can do lots of logic with this so boolean values are used a lot in programming as we'll come across such as in loops can also set variables to be boolean values as we can have any bit of data because a something like is password correct and initially this is going to be false until the person has put it in then later on to put an A in a correct password you can change that variable to be true it's good we have keeping track of various things in your code because these brilliant values are representing 1 & 0 if you do something like true Plus force you get 1 because true is representing 1 and force is representing 0 so 1 plus 0 is 1 so they are kind of like variables in for we are representing a value but unlike variables you can't change true to be 0 and force to be 1 they are set how they are so in a way they are sort of like constants but first getting into slightly shaky territory I want to show you another useful thing regarding variables so from settings error variable to year he calls let's say 2000 obsessing an integer to the variable year and now I can do some a year equals year plus 20 to add to that value and also save that new value which is now 20 20 under the name year if I did something like year across 20 that's great but it's not saving the new value under the name year okay so if I type in here you'll see it's 2020 not 2040 because this 2040 was coming outside of that assignment so we can use something called an Augmented assignment operator to shorten this process here we have something like year plus 20 is a bit repetitive instead I can use something like year plus equals 20 and this will combine it so it's sort of adding and saving for new value so this should be sort pierced when 20 which should now be 20 40 because I've added 22 year which was 2020 and Batna Valley 2040 has been saved under the variable name you can use similar augmented assignments with the other or fitted operations so if it went equals 20 could do x equals 20 and missile year is now 40 thousand 400 it is shortens the process a little bit just to say one final thing about floats in particular what it's typed more generally are all about categorizing data so some data is text some data is numbers some numbers are whole numbers and if this also determines how the data is stored in the computer and all data is stored in binary but is stored in different ways and floats in particular I can be quite awkward something like an 0.5 plus one point two gives us one point seven which is fine but if I do something like naught point one plus not point to I should get nine point three and I sort of do I get naught point free and a bunch of zeroes and therefore and I'm Intimus because if you play around find this it seems completely bizarre the reason is because because we are trying to represent this decimal number as binary we have to do the computer has to store it as binary and unfortunately there is not just inherent to how the negative powers of two correspond to the negative powers of 10 there isn't always a way to completely represent the number exactly so the computer needs to approximate nor point free in binary and so we get often a slight residue left over usually a very very small number but it looks very word and why you would fix this is by rounding for exactly it round and boom one plus in Auckland and then add a second parameter here of two places two digits and I give it an open free we'll talk more about functions like this in future videos but we have this left over and this is not a huge deal once you understand what's going on and you are careful around it there have been some instances where programmers haven't really understood what's going on and so there's been major issues but we are used to approximations in decimal to thinking in an an open for itself if it's a third we can represent the third as a fraction but we need to cut off an Allpoint free free free free free at some point by use two approximations it's a similar sort of idea here I as always I recommend you pause the video now and try these exercises the first two are just about first of all reading freebies lines of code so we've got one line second line third line four find they're running like that try and think about with a final value of these variables will be so trace it through and see where the assignments are changing and then try it yourself to see if you were correct and four in four have a look at these two lines and see if you can figure out what the errors are and why the errors would occur
