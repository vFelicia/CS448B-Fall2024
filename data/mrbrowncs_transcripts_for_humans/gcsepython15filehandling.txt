With timestamps:

00:00 - in the 15 tutorial in this series we're
00:02 - now going to look at how we can
00:04 - handle files so start to deal with
00:06 - external files
00:07 - and not just have our data stored
00:09 - temporarily now we can start to store it
00:11 - permanently so far we sort of have been
00:13 - saving data as we've gone along we've
00:15 - used variables we've used lists which
00:17 - hold data right so if i
00:18 - set a variable called age to 99
00:22 - i'm assigning the value 99 to the
00:24 - variable age and it means later in my
00:25 - code i'm able to use that value
00:27 - is being held it's not being forgotten
00:29 - straight away so if i just type in here
00:31 - print
00:32 - start to make this a bit more obvious
00:34 - because
00:35 - i can actually access this value from my
00:38 - shell so i'm starting it
00:39 - assigning isn't doing anything but now i
00:41 - can print
00:42 - the value of age like this so we get 99
00:45 - because it's been
00:46 - held for us but if i get rid of the
00:49 - second line
00:50 - and restart this start it again and now
00:53 - i try and print age
00:54 - in my shell let's do it properly
00:57 - lowercase
00:58 - um i get an issue because age is not
01:01 - defined
01:02 - this is because it's completely
01:03 - forgotten that age ever existed because
01:04 - with
01:05 - this was our second execution our second
01:07 - running
01:08 - of this code the code had changed and it
01:10 - doesn't remember the value of
01:12 - previous variables this is because when
01:15 - you are running a program
01:16 - all the data is being stored in your ram
01:18 - and your ram is temporary storage
01:20 - as soon as a program finishes or as soon
01:22 - as your computer turns off
01:24 - all data inside ram is lost unless it
01:26 - has been saved
01:27 - on secondary storage secondary storage
01:30 - being things like your hard disk
01:31 - so actually the files you can access on
01:33 - your computer
01:34 - and so if we want to save data
01:36 - permanently we've got to make sure we
01:37 - are saving it to an external file
01:39 - we can't rely on it being stored in ram
01:41 - because ram is only temporary
01:43 - we are going to look at how we can
01:44 - handle text files in this video so
01:47 - txt file and also a csv file which two
01:49 - common files but if you are writing a
01:50 - proper
01:51 - application you're likely going to save
01:54 - it to
01:54 - you know your own format or a special
01:56 - file or you're going to do it in binary
01:58 - you're going to maybe encrypt it you
01:59 - know if you're saving passwords you're
02:01 - not going to save it in a standard txt
02:03 - file you're going to encrypt it and try
02:04 - and keep it secret and so
02:06 - we're just sort of getting used to
02:07 - saving it i'm not saying this is how
02:08 - it's done
02:09 - exactly in proper programs but it's fine
02:12 - for now so in reply we can go over to
02:14 - the left-hand side
02:15 - and we currently have our main.py file
02:17 - our python file which is where our code
02:19 - goes
02:19 - and i can at the top create a new file
02:22 - up here
02:23 - and call it i want i could call this
02:25 - text file
02:26 - and a basic text file has got the
02:28 - extension txt
02:30 - like this so notepad would create
02:33 - a txt file like that the issue with a
02:36 - text file coming from something like
02:38 - microsoft word
02:39 - is that it has a lot more formatting and
02:41 - has a lot more metadata and so it can be
02:43 - a little bit harder to deal with
02:45 - a text file or a txt file i should say
02:47 - has just got text
02:49 - just got the ascii characters it doesn't
02:50 - have any other formatting
02:52 - which is why you can't make a notepad
02:53 - file go bold or anything like that
02:56 - so i've opened up my text file i can
02:57 - just type in hello and maybe i want to
02:59 - do
03:00 - um how are you so because
03:04 - i'm just doing a text file i don't need
03:05 - quotes anything like that but if i now
03:07 - go back to my main python file
03:09 - and show you how to open this so
03:12 - the way you open it is with a built-in
03:14 - function called open surprise surprise
03:16 - and inside the brackets the argument
03:18 - first of all
03:19 - is the file name so you've got to make
03:21 - sure you type in this properly so i did
03:22 - file
03:23 - uh the text file dot txt like so
03:26 - and because this file is in the same
03:28 - folder because replica is keeping them
03:30 - together in the same folder i don't have
03:32 - to specify the entire path
03:34 - if you were wanting to write or read to
03:36 - or from a text file stored somewhere
03:38 - else
03:38 - in pictures or downloads and you've got
03:40 - your file and documents
03:42 - you would need to put in the entire path
03:44 - and not just the file name because
03:46 - python needs to know where to look
03:48 - so if i run this nothing will happen
03:50 - because it's just opening it right
03:51 - that's not
03:52 - going to show anything to use about if i
03:54 - want to use this i need to make sure i
03:56 - assign this to a variable
03:59 - so let's call this my file
04:02 - let's just make it a bit wider so i'm
04:05 - assigning this i'm opening this and
04:07 - dumping it under the name my file and
04:09 - now if i
04:09 - just print my file to see
04:13 - what has been assigned we get a load of
04:16 - nonsense really it's just telling us
04:18 - what
04:18 - is being stored it's telling us what it
04:20 - is it's not very helpful to us
04:22 - and so that's because this is an object
04:24 - and we need to use a method
04:26 - to actually be able to show it to the
04:28 - views and this method
04:30 - is read so if i do dot read and make
04:33 - sure i do quotes after
04:35 - brackets after this as well it takes no
04:37 - arguments
04:38 - it doesn't need to take any arguments
04:39 - and now we are getting the contents of
04:41 - our file output to the user
04:43 - now that's great but the issue is maybe
04:45 - you don't want all of this maybe you
04:46 - just want hello first of all so if you
04:48 - just wanted to like what you could do is
04:49 - count how many characters we've got so
04:50 - we've got one two three four five six
04:53 - and inside read we can now add an
04:55 - argument and i can put six
04:57 - so you can put in how many characters
04:58 - you want and it will only print out
05:01 - the number of characters specified so
05:02 - just six in this case if i do seven
05:04 - let's see what happens so i should get
05:08 - a new line that's because even if we
05:10 - can't see it
05:11 - in our text file we have the new line
05:13 - character here the new line character
05:15 - is uh backslash and then n and then pi
05:19 - from the duvis in quotes so we can't see
05:21 - this
05:21 - the python is reading a new line
05:23 - character and so it's going on
05:24 - to a new line if i now put this to eight
05:27 - we should get
05:28 - the new line and h as well and so on and
05:31 - so on so that's okay but that doesn't
05:32 - give us too much control
05:34 - so instead we can change read to read
05:36 - line
05:37 - again make sure i add in my brackets
05:39 - which are empty in this case
05:41 - and i can run this and we get our first
05:44 - line
05:44 - although it's adding in this new line
05:45 - character which could be a bit annoying
05:46 - but that's okay
05:48 - but now i can call this one again and it
05:50 - will
05:51 - kind of track its progress and so it's
05:52 - now going to not just
05:54 - read the same line twice it's going to
05:56 - read both lines or
05:57 - well it's both lines technically but
05:59 - because we've got this new line
06:00 - character is doing
06:01 - three if i wanted to get rid of that
06:03 - newline character i can
06:05 - use string slicing to get rid of it if i
06:08 - do something like this
06:09 - and i want to go up until the negative
06:11 - one index which is the last character
06:13 - i can do that and it gets rid of a new
06:16 - line character
06:16 - okay so that's fine one thing i did
06:18 - forget to do is
06:20 - what is really actually really important
06:21 - is closing off our file so we've opened
06:23 - a file in line two
06:25 - as soon as you finish using it you've
06:26 - got to make sure you close your files so
06:28 - as soon as possible
06:29 - you should be closing your file because
06:31 - um
06:32 - well let's talk about this so where you
06:34 - close the file is just going my file and
06:36 - calling uh the close method on it
06:39 - and it closes connection to your file
06:41 - because what it's doing when you're
06:42 - opening it
06:43 - it's opening a connection to your text
06:45 - file when you're closing it it's
06:47 - tearing down that connection and not
06:49 - when you're reading it it doesn't matter
06:51 - so much when you're writing to a file
06:53 - which we'll look at in a second
06:55 - some issues can occur if you don't close
06:57 - it properly maybe it gets corrupted
06:59 - maybe you know if you forget to close
07:01 - that your data is never actually written
07:02 - because it's stored in a buffer
07:04 - so closing is really important um i will
07:07 - always forget and people always forget
07:08 - so we'll come into a more
07:10 - um concise way a bit later but let's
07:13 - show you how to write
07:14 - to a file but actually before that if i
07:16 - want to just make sure i read all of my
07:17 - lines i can just do
07:19 - thankfully python makes easy i could do
07:21 - four let's call this record
07:23 - in my file i want to print record
07:27 - like this and now if i get rid of these
07:28 - two lines of code i'll just comment them
07:30 - out for now
07:32 - we'll get to the same results except
07:34 - with our newline character
07:35 - and it's going through the entire file
07:37 - so if i now go back and add in a third
07:39 - line
07:41 - it will automatically adjust because
07:43 - it's all it's doing
07:44 - is like if we were going through a list
07:46 - it's going for each list it's going
07:48 - through
07:48 - each row and printing out so i've said
07:50 - record here
07:51 - when we talk about files we talk about
07:53 - records especially when we're talking
07:54 - about csv
07:55 - files we'll talk about later so record
07:57 - is another word for a row
07:59 - and a field is another word for a column
08:01 - so hello
08:02 - exclamation mark is a record and so on
08:04 - in a text file it doesn't
08:06 - apply so much but it does apply it with
08:08 - csv files anyway in terms of writing
08:10 - let's get rid of this for loop and now
08:12 - if i
08:13 - call if i refer to my file here and use
08:15 - a method
08:16 - to write so i'm going to write and i can
08:19 - now in my brackets as an argument
08:21 - supply what i want to write so if i want
08:23 - to write
08:24 - i'm good i like that and now if i run
08:28 - this we're going to get an error because
08:29 - where it says unsupported operation not
08:31 - writable
08:33 - it's not writable because in my first my
08:35 - second line here when i open the file
08:38 - i haven't said i want to write it by
08:40 - default
08:41 - when you're opening it you're only
08:42 - opening it to read from it which is a
08:44 - little bit safer
08:45 - in terms of it getting corrupted but if
08:47 - you want to write to it you've got to
08:48 - make sure you add in a second argument
08:50 - and in this case it is just w
08:53 - lower okay or w on its own say you
08:56 - saying you want to write by default it
08:58 - is just read on its own so in r
09:00 - you don't have to supply that so now
09:02 - i've added for w
09:03 - it will now let me write nothing's
09:05 - happening over here but if i go back to
09:07 - my text file
09:08 - i have now got i'm good the issue is
09:10 - i've now got rid
09:11 - of the original content of my file this
09:14 - is because right
09:15 - the write operation will override
09:17 - anything inside your file so it gets rid
09:19 - of it every time you call it so if i add
09:21 - in a second
09:22 - um right line down here
09:25 - um you'll see that actually we will get
09:27 - to i'm good
09:29 - it's more the actual operation is
09:31 - overriding not the actual right method
09:33 - and so if i change this w
09:35 - to an a a for append
09:38 - when you are appending it you're just
09:39 - adding on
09:41 - each time you are using write so here
09:43 - i've done it a few times i've got loads
09:44 - of i'm good and
09:45 - you can see the replica highlight here
09:47 - because it's writing to it
09:49 - so that's important otherwise if you use
09:51 - write
09:52 - you might unintentionally overwrite your
09:54 - entire file every time which can be
09:56 - quite irritating and you can't recover
09:57 - it
09:58 - so make sure you use a if you're only
09:59 - wanting to add on to it
10:01 - not just getting rid of it and you'll
10:03 - notice in my text file i've just got i'm
10:04 - good i'm good i'm good i'm good
10:06 - after another if you want from separate
10:08 - lines you want to make sure you add in
10:09 - that new line character so the backslash
10:12 - n is not
10:13 - actually written to a file it's being
10:15 - ignored and it's making it go into a new
10:17 - line
10:18 - so we've got i'm good down here which is
10:20 - on a new line if you now try and read
10:22 - again from this file we're going to come
10:25 - into another issue
10:26 - a very similar ones before unsupported
10:28 - operation not readable because
10:30 - we've now said we're appending it that
10:32 - means we're only able to append to it we
10:34 - can't then
10:35 - read from it either so if we get around
10:37 - this is by adding a plus
10:39 - after it so a plus will mean you want to
10:41 - append but also you want to be able to
10:43 - read from it as well so now this will
10:45 - work
10:45 - and i can initially read from it which
10:48 - isn't doing anything
10:49 - and then we can write to it as well so i
10:51 - said you have to always remember to
10:53 - close your file which i i even forget to
10:55 - do sometimes
10:56 - and people commonly forget to do if you
10:58 - do forget it it's not the end of the
11:00 - world your computer is not going to
11:01 - break
11:02 - but it can cause issues like i say like
11:04 - corruption and not all data may get
11:06 - written
11:06 - because it's stored in a temporary
11:08 - buffer and so to kind of
11:10 - circumvent this and make things a little
11:11 - bit simpler you can just
11:13 - use a web keyword this is really really
11:15 - useful so if i
11:16 - do now with open and the same
11:20 - format as before so text file dot txt
11:23 - and i'll follow this with as so
11:26 - if i now call this my file again this is
11:28 - doing exactly the same as doing my file
11:30 - equals open text file.txt
11:32 - but it's now doing it in a with
11:35 - statement and so if i add a colon and
11:37 - press enter
11:37 - now like an if statement or a world
11:40 - statement we now have an indent
11:42 - and so anything within this indent is
11:44 - contained within this with statement and
11:46 - so now if i
11:47 - do for listen i'll just do line
11:50 - in my file and print
11:53 - line it's not really called a record i
11:55 - shouldn't really have called it that
11:56 - and now we get our crazy pro
11:59 - uh text file written out but what is
12:02 - really good about with is it's not
12:04 - uh anything within this body
12:07 - is being applied to the text file and it
12:10 - means as soon as you end
12:11 - this as soon as you get out of this with
12:13 - statement by going back
12:15 - by decreasing the indent and printing
12:18 - hello
12:18 - we can't if i now actually let's just
12:20 - try this if i now do the exact same code
12:24 - but do it outside of a width you'll see
12:26 - that actually i'm going to get an error
12:28 - because
12:28 - this eye operation on a closed file
12:31 - because what we've done since with ends
12:34 - it closes it for you and so you don't
12:35 - have to worry about closing it yourself
12:37 - as soon as you leave
12:39 - this with block it closes and so you
12:41 - don't have to deal with any issues
12:43 - which relate to that so i'd definitely
12:45 - recommend using with and not
12:47 - the way i showed you the start which is
12:49 - really how i think most people learn how
12:51 - to do it
12:52 - okay to demonstrate for handling what
12:53 - might be a potential actual
12:55 - application of this i've added a csv
12:57 - file i've found
12:58 - online which has all of the major
13:00 - european cities in it
13:02 - along with a country and also population
13:04 - so we can do
13:05 - some processing on this and the format
13:08 - here is dot csv
13:09 - so a csv file stands for comma separated
13:11 - value file
13:12 - and you can see why it's called that
13:13 - because we have our values
13:15 - separated by commas here so first of all
13:17 - we've got our city
13:18 - separated by comma then our country
13:20 - separated by comma and then our
13:21 - population
13:23 - and here we have kind of like a table
13:26 - in text format only because our commas
13:29 - are separating it in the same way that a
13:31 - line in a table separate it so we have
13:33 - columns we have ascii name
13:35 - we have country and population those are
13:36 - our column headings then we have our
13:38 - values below
13:39 - and each row here is called a record and
13:41 - each value within varroa is called a
13:43 - field
13:43 - so here the moscow is oscar name field
13:46 - russia is our country field
13:48 - and this population is our population
13:50 - field
13:51 - and so you know it's very common to have
13:53 - data in csv format because it's a
13:55 - it's a fairly standard format it does
13:57 - vary occasionally here we've got our
13:59 - values in quotes
14:01 - which doesn't massively help but yeah
14:04 - it does happen sometimes you have
14:06 - instead of commas you have semicolons
14:08 - so it can vary a little bit and honestly
14:10 - your file handling operations will
14:12 - vary depending on your file it's often a
14:14 - bit of a barge job
14:15 - to try and get your code working with
14:17 - your file so if we
14:19 - make sure we open this so european
14:21 - cities dot csv
14:22 - is what it's called and i open it as a
14:24 - spot european
14:25 - wrong european cities as let's call this
14:28 - my file again
14:30 - and do a colon and now let's just as a
14:33 - starting point just print out
14:34 - each of these if id4 record in
14:38 - my file like this and just print out
14:41 - our record you'll see all of our
14:46 - all of our records in this and you can
14:49 - see straight away they are being
14:50 - separated by a line so we've got a line
14:52 - here
14:53 - this is because we have that hidden new
14:55 - line character at the end of each row
14:57 - which if you want to get rid
14:58 - of if the other ones are just back to
15:00 - back you can
15:01 - before you print it make sure you strip
15:04 - it using
15:04 - slicing so if i just do record equals
15:07 - record and slice it so if we are only
15:09 - getting or we're
15:10 - removing only the last character by
15:12 - using the next minus one
15:14 - we should if i just clear this oops we
15:17 - should get
15:18 - that line stripped if you do it's only
15:20 - going to a new line because print is
15:21 - telling it to
15:22 - and now if i want to separate each field
15:25 - and to sort of have it on its own and
15:26 - maybe print it out in a slightly more
15:28 - readable way we can do is
15:31 - make sure we split it based on the comma
15:34 - so we can use the split method on this
15:36 - so if i do record equals record
15:39 - dot split and now as an argument to the
15:42 - split method i'm going to supply a comma
15:45 - because that's what's separating each of
15:47 - our values what it's going to do in this
15:48 - line
15:49 - is it's working on the object record and
15:51 - it's being saved
15:53 - perhaps we cover something different
15:54 - perhaps we could call this values
15:56 - because really this is
15:56 - going to be a list because what it's
15:58 - doing is splitting it and saving each
15:59 - value
16:00 - under a new index in this list and so if
16:03 - i now
16:04 - do something like print we could do
16:08 - first of all or the first index is going
16:11 - to be the uh
16:12 - city and we could do a common thing we
16:13 - do is in
16:15 - and we could do for country which is our
16:16 - second
16:18 - our second value our first index and
16:20 - then
16:22 - that will do for now so i can run this
16:23 - if i clear this first of all
16:26 - and we get value is not defined because
16:28 - i did it as values not value
16:31 - we should get now
16:34 - a slightly better version it's a bit
16:35 - more readable a few issues first off
16:37 - about we've got
16:38 - our header row being printed which is
16:40 - not ideal because ascii name is in
16:42 - country doesn't really make any sense
16:44 - we've also got quotes around our strings
16:46 - because
16:47 - in european cities we had our original
16:49 - file we had quotes around
16:50 - our strings so let's take this one by
16:53 - one let's get rid of our
16:54 - quotes first of all because that's quite
16:56 - easy we want to get rid of our first
16:58 - and our last character so if i add on
17:01 - another slicing operation to this
17:03 - and we want to get rid of our first
17:04 - character and so we're starting with
17:05 - index of one
17:07 - we don't have a zero character and then
17:09 - equally we don't want the last character
17:11 - and so we can add that to our
17:14 - value and that should fix the first
17:17 - issue which is having
17:18 - the quotes around it so it looks a
17:20 - little bit nicer we still have
17:21 - the header row being printed and there
17:23 - are a few ways we could do this but i
17:25 - think possibly the easiest just using a
17:26 - for loop like this
17:28 - is if we wrap this in a if statements if
17:31 - i just
17:32 - indent this across if we do if um
17:35 - well let's just do values let's just
17:36 - copy this bit here because if i
17:39 - if you know what your header o value is
17:41 - going to be we can make sure we get rid
17:43 - of the ascii name is not a name of any
17:44 - city
17:45 - and so if i do not equals two
17:48 - ascii name which is our header name um
17:52 - it's going to print this out with the
17:54 - exception of our header row so if i
17:56 - clear this again and print this we now
17:58 - thankfully get rid of our header row
18:01 - not the most elegant solution but it
18:02 - gets rid of it at least in terms of
18:04 - printing out it is still there
18:06 - now this list is quite long and there
18:08 - are lots of fairly
18:09 - small cities sector six there's a city
18:12 - i've never heard of um
18:14 - and we may not want to have reading
18:18 - in our birkenhead in her list so maybe
18:21 - we want to limit it to cities with only
18:23 - more than one million people so if i now
18:27 - again add a nested if statement so if i
18:29 - now do if
18:30 - values and i believe this let's have a
18:32 - check what index would this be so
18:33 - population is our third item
18:34 - and so we'll have an index of two and
18:37 - again so this one actually we don't need
18:38 - to
18:39 - slice off the quotes because it doesn't
18:40 - have quotes around the numbers which is
18:42 - good
18:44 - and now if our if this is going to be
18:46 - want to be greater than
18:47 - one million let's check we have enough
18:50 - zeros there yes we do
18:52 - and now we're only going to print values
18:55 - we're
18:56 - going to print cities which have a
18:57 - population grade of one million maybe we
18:58 - want to add an add-on
19:00 - our population as well could do uh with
19:03 - a population of
19:06 - and then values two
19:09 - so let's have a look what happens here
19:10 - if i clear this we should have a
19:12 - slightly more no we don't because i need
19:14 - to make sure i convert between my types
19:16 - we have an error because we have
19:18 - a type error because we're trying here
19:20 - we're trying to convert
19:21 - we're trying to compare a string to an
19:23 - integer because what i should have said
19:25 - earlier is
19:25 - all values coming from external files
19:27 - are treated like strings
19:29 - even if they you know look like integers
19:31 - to us they are treated like strings are
19:33 - the same with
19:33 - user input is always a string and so i
19:35 - forgot i need to make sure i cast this
19:38 - to an integer like that
19:43 - and now clear and we can run and fingers
19:44 - crossed this works this time
19:46 - let's have a look so um formatting but
19:49 - dodgy but there we are so it now has
19:51 - hopefully only the biggest countries
19:53 - bigger cities i should say
19:55 - it does and we have population printed
19:57 - as well
19:59 - and let's say we want to take all of
20:00 - these larger cities and write these to a
20:02 - new file
20:03 - so we want to create a new csv file with
20:05 - only the biggest cities we've only admit
20:07 - with over a million
20:08 - what we can do is make sure we're nested
20:10 - within our if statement which kind of
20:12 - excludes
20:13 - the smaller cities still i can now down
20:15 - here
20:16 - create another with block and so if i do
20:18 - with open and this time let's call this
20:21 - one
20:21 - uh large cities dot csv
20:25 - and open this as just quite large not
20:28 - very sophisticated but it will do the
20:29 - job
20:30 - and now i can make sure i write so i'll
20:32 - write a similar way
20:33 - so if i now use object large dot right
20:36 - and now to format this in csv we need to
20:39 - make sure we separate each of our values
20:40 - with a comma
20:41 - so if i just copy this like so
20:45 - and extra add on a comma after every
20:47 - single value
20:49 - and perhaps let's only do two
20:53 - values here so we want our city name and
20:56 - also our country name
20:58 - and so we've added a comma between these
21:01 - two values but because this
21:02 - second value is going to be the last one
21:04 - in our record we need to make sure we
21:05 - add on a new line
21:07 - character as well which is not actually
21:09 - stored it's hidden from us but it will
21:11 - make sure it goes onto a new record
21:13 - as we've got a comma and we've got our
21:14 - new line character that's perfect
21:16 - so if i run this
21:21 - we're going to get we're going to come
21:22 - across an issue uh
21:24 - because there's two
21:27 - potential issues here we have first of
21:28 - all no such follow directory large
21:30 - cities.csv
21:32 - and that's because well partly because
21:34 - we haven't
21:35 - told it we want to append to it and
21:37 - we've only said we are wanting to read
21:39 - by default so hopefully that will fix
21:41 - that issue
21:42 - um so that's great um it's running
21:45 - fine now and it should really have
21:46 - created a new file over here if you were
21:48 - doing this on python on your desktop
21:51 - it will create a new file if one doesn't
21:52 - exist but in red apparently it doesn't
21:54 - so you can create a new one quickly
21:56 - called large cities
21:58 - csv and now if i run this
22:01 - code again we should now get our code
22:05 - get our values written to this new csv
22:08 - file like we do over here
22:09 - perfect so the thing i was going to say
22:11 - is i don't particularly like having
22:13 - a width nested within another with
22:15 - especially when we're doing it
22:16 - as a loop because here we're looping
22:19 - through each record in it
22:20 - and for each record which is above a
22:22 - million we're going to
22:24 - open a new file and then close a new
22:25 - file like in my mind at least this is
22:27 - adding unnecessary work to a computer
22:30 - because it's having to reopen and close
22:32 - it constantly
22:34 - on you know quite a few lines and so
22:36 - really what i would prefer to do
22:38 - is get rid of this statement up here
22:42 - and simply add it
22:45 - to the top so we've can accept multiple
22:48 - sections to it so we can add a comma to
22:50 - our first open
22:51 - and now open the set open our second
22:52 - file which was
22:54 - europe which was uh large cities got csv
22:58 - i make sure i follow this with a like so
23:01 - and we called it as large
23:03 - and now we have with at the top and so
23:05 - it isn't constantly opening and
23:07 - closing it's only going to close once it
23:08 - gets to the end of all of it
23:10 - so this should uh
23:13 - be less intensive on my computer but
23:15 - still will do the same effect
23:17 - for this try now in the description
23:18 - there will be a link to a csv file which
23:20 - contains
23:21 - data about all of the footballers who
23:23 - played in the premier league in the 2018
23:25 - and 2019 season
23:27 - including things like the name age club
23:29 - country games and home goals and away
23:31 - goals
23:32 - and it's got i think about 500 records
23:35 - but i want you to print out the exact
23:36 - number of records
23:37 - as well as each individual record each
23:39 - row to the user so that requires reading
23:41 - in
23:41 - and printing each record and then
23:43 - counting the total
23:45 - and then question two just amend this
23:46 - code so that now you're only going to
23:48 - print out
23:48 - the footballers who scored more than 10
23:50 - goals so above 10 so 11 and above
23:53 - and i want you to do it in a format like
23:54 - i've shown here so it's a little bit
23:56 - less
23:58 - ugly than just printing out in for
23:59 - commas and finally third extend this so
24:02 - actually adapt it so you're now going to
24:04 - write to a new file with the same fields
24:07 - as the one at the top
24:08 - but one extra field which is goals per
24:10 - appearance so you need to calculate
24:12 - goals per appearance to two decimal
24:13 - places
24:14 - and write this to a new file

Cleaned transcript:

in the 15 tutorial in this series we're now going to look at how we can handle files so start to deal with external files and not just have our data stored temporarily now we can start to store it permanently so far we sort of have been saving data as we've gone along we've used variables we've used lists which hold data right so if i set a variable called age to 99 i'm assigning the value 99 to the variable age and it means later in my code i'm able to use that value is being held it's not being forgotten straight away so if i just type in here print start to make this a bit more obvious because i can actually access this value from my shell so i'm starting it assigning isn't doing anything but now i can print the value of age like this so we get 99 because it's been held for us but if i get rid of the second line and restart this start it again and now i try and print age in my shell let's do it properly lowercase um i get an issue because age is not defined this is because it's completely forgotten that age ever existed because with this was our second execution our second running of this code the code had changed and it doesn't remember the value of previous variables this is because when you are running a program all the data is being stored in your ram and your ram is temporary storage as soon as a program finishes or as soon as your computer turns off all data inside ram is lost unless it has been saved on secondary storage secondary storage being things like your hard disk so actually the files you can access on your computer and so if we want to save data permanently we've got to make sure we are saving it to an external file we can't rely on it being stored in ram because ram is only temporary we are going to look at how we can handle text files in this video so txt file and also a csv file which two common files but if you are writing a proper application you're likely going to save it to you know your own format or a special file or you're going to do it in binary you're going to maybe encrypt it you know if you're saving passwords you're not going to save it in a standard txt file you're going to encrypt it and try and keep it secret and so we're just sort of getting used to saving it i'm not saying this is how it's done exactly in proper programs but it's fine for now so in reply we can go over to the lefthand side and we currently have our main.py file our python file which is where our code goes and i can at the top create a new file up here and call it i want i could call this text file and a basic text file has got the extension txt like this so notepad would create a txt file like that the issue with a text file coming from something like microsoft word is that it has a lot more formatting and has a lot more metadata and so it can be a little bit harder to deal with a text file or a txt file i should say has just got text just got the ascii characters it doesn't have any other formatting which is why you can't make a notepad file go bold or anything like that so i've opened up my text file i can just type in hello and maybe i want to do um how are you so because i'm just doing a text file i don't need quotes anything like that but if i now go back to my main python file and show you how to open this so the way you open it is with a builtin function called open surprise surprise and inside the brackets the argument first of all is the file name so you've got to make sure you type in this properly so i did file uh the text file dot txt like so and because this file is in the same folder because replica is keeping them together in the same folder i don't have to specify the entire path if you were wanting to write or read to or from a text file stored somewhere else in pictures or downloads and you've got your file and documents you would need to put in the entire path and not just the file name because python needs to know where to look so if i run this nothing will happen because it's just opening it right that's not going to show anything to use about if i want to use this i need to make sure i assign this to a variable so let's call this my file let's just make it a bit wider so i'm assigning this i'm opening this and dumping it under the name my file and now if i just print my file to see what has been assigned we get a load of nonsense really it's just telling us what is being stored it's telling us what it is it's not very helpful to us and so that's because this is an object and we need to use a method to actually be able to show it to the views and this method is read so if i do dot read and make sure i do quotes after brackets after this as well it takes no arguments it doesn't need to take any arguments and now we are getting the contents of our file output to the user now that's great but the issue is maybe you don't want all of this maybe you just want hello first of all so if you just wanted to like what you could do is count how many characters we've got so we've got one two three four five six and inside read we can now add an argument and i can put six so you can put in how many characters you want and it will only print out the number of characters specified so just six in this case if i do seven let's see what happens so i should get a new line that's because even if we can't see it in our text file we have the new line character here the new line character is uh backslash and then n and then pi from the duvis in quotes so we can't see this the python is reading a new line character and so it's going on to a new line if i now put this to eight we should get the new line and h as well and so on and so on so that's okay but that doesn't give us too much control so instead we can change read to read line again make sure i add in my brackets which are empty in this case and i can run this and we get our first line although it's adding in this new line character which could be a bit annoying but that's okay but now i can call this one again and it will kind of track its progress and so it's now going to not just read the same line twice it's going to read both lines or well it's both lines technically but because we've got this new line character is doing three if i wanted to get rid of that newline character i can use string slicing to get rid of it if i do something like this and i want to go up until the negative one index which is the last character i can do that and it gets rid of a new line character okay so that's fine one thing i did forget to do is what is really actually really important is closing off our file so we've opened a file in line two as soon as you finish using it you've got to make sure you close your files so as soon as possible you should be closing your file because um well let's talk about this so where you close the file is just going my file and calling uh the close method on it and it closes connection to your file because what it's doing when you're opening it it's opening a connection to your text file when you're closing it it's tearing down that connection and not when you're reading it it doesn't matter so much when you're writing to a file which we'll look at in a second some issues can occur if you don't close it properly maybe it gets corrupted maybe you know if you forget to close that your data is never actually written because it's stored in a buffer so closing is really important um i will always forget and people always forget so we'll come into a more um concise way a bit later but let's show you how to write to a file but actually before that if i want to just make sure i read all of my lines i can just do thankfully python makes easy i could do four let's call this record in my file i want to print record like this and now if i get rid of these two lines of code i'll just comment them out for now we'll get to the same results except with our newline character and it's going through the entire file so if i now go back and add in a third line it will automatically adjust because it's all it's doing is like if we were going through a list it's going for each list it's going through each row and printing out so i've said record here when we talk about files we talk about records especially when we're talking about csv files we'll talk about later so record is another word for a row and a field is another word for a column so hello exclamation mark is a record and so on in a text file it doesn't apply so much but it does apply it with csv files anyway in terms of writing let's get rid of this for loop and now if i call if i refer to my file here and use a method to write so i'm going to write and i can now in my brackets as an argument supply what i want to write so if i want to write i'm good i like that and now if i run this we're going to get an error because where it says unsupported operation not writable it's not writable because in my first my second line here when i open the file i haven't said i want to write it by default when you're opening it you're only opening it to read from it which is a little bit safer in terms of it getting corrupted but if you want to write to it you've got to make sure you add in a second argument and in this case it is just w lower okay or w on its own say you saying you want to write by default it is just read on its own so in r you don't have to supply that so now i've added for w it will now let me write nothing's happening over here but if i go back to my text file i have now got i'm good the issue is i've now got rid of the original content of my file this is because right the write operation will override anything inside your file so it gets rid of it every time you call it so if i add in a second um right line down here um you'll see that actually we will get to i'm good it's more the actual operation is overriding not the actual right method and so if i change this w to an a a for append when you are appending it you're just adding on each time you are using write so here i've done it a few times i've got loads of i'm good and you can see the replica highlight here because it's writing to it so that's important otherwise if you use write you might unintentionally overwrite your entire file every time which can be quite irritating and you can't recover it so make sure you use a if you're only wanting to add on to it not just getting rid of it and you'll notice in my text file i've just got i'm good i'm good i'm good i'm good after another if you want from separate lines you want to make sure you add in that new line character so the backslash n is not actually written to a file it's being ignored and it's making it go into a new line so we've got i'm good down here which is on a new line if you now try and read again from this file we're going to come into another issue a very similar ones before unsupported operation not readable because we've now said we're appending it that means we're only able to append to it we can't then read from it either so if we get around this is by adding a plus after it so a plus will mean you want to append but also you want to be able to read from it as well so now this will work and i can initially read from it which isn't doing anything and then we can write to it as well so i said you have to always remember to close your file which i i even forget to do sometimes and people commonly forget to do if you do forget it it's not the end of the world your computer is not going to break but it can cause issues like i say like corruption and not all data may get written because it's stored in a temporary buffer and so to kind of circumvent this and make things a little bit simpler you can just use a web keyword this is really really useful so if i do now with open and the same format as before so text file dot txt and i'll follow this with as so if i now call this my file again this is doing exactly the same as doing my file equals open text file.txt but it's now doing it in a with statement and so if i add a colon and press enter now like an if statement or a world statement we now have an indent and so anything within this indent is contained within this with statement and so now if i do for listen i'll just do line in my file and print line it's not really called a record i shouldn't really have called it that and now we get our crazy pro uh text file written out but what is really good about with is it's not uh anything within this body is being applied to the text file and it means as soon as you end this as soon as you get out of this with statement by going back by decreasing the indent and printing hello we can't if i now actually let's just try this if i now do the exact same code but do it outside of a width you'll see that actually i'm going to get an error because this eye operation on a closed file because what we've done since with ends it closes it for you and so you don't have to worry about closing it yourself as soon as you leave this with block it closes and so you don't have to deal with any issues which relate to that so i'd definitely recommend using with and not the way i showed you the start which is really how i think most people learn how to do it okay to demonstrate for handling what might be a potential actual application of this i've added a csv file i've found online which has all of the major european cities in it along with a country and also population so we can do some processing on this and the format here is dot csv so a csv file stands for comma separated value file and you can see why it's called that because we have our values separated by commas here so first of all we've got our city separated by comma then our country separated by comma and then our population and here we have kind of like a table in text format only because our commas are separating it in the same way that a line in a table separate it so we have columns we have ascii name we have country and population those are our column headings then we have our values below and each row here is called a record and each value within varroa is called a field so here the moscow is oscar name field russia is our country field and this population is our population field and so you know it's very common to have data in csv format because it's a it's a fairly standard format it does vary occasionally here we've got our values in quotes which doesn't massively help but yeah it does happen sometimes you have instead of commas you have semicolons so it can vary a little bit and honestly your file handling operations will vary depending on your file it's often a bit of a barge job to try and get your code working with your file so if we make sure we open this so european cities dot csv is what it's called and i open it as a spot european wrong european cities as let's call this my file again and do a colon and now let's just as a starting point just print out each of these if id4 record in my file like this and just print out our record you'll see all of our all of our records in this and you can see straight away they are being separated by a line so we've got a line here this is because we have that hidden new line character at the end of each row which if you want to get rid of if the other ones are just back to back you can before you print it make sure you strip it using slicing so if i just do record equals record and slice it so if we are only getting or we're removing only the last character by using the next minus one we should if i just clear this oops we should get that line stripped if you do it's only going to a new line because print is telling it to and now if i want to separate each field and to sort of have it on its own and maybe print it out in a slightly more readable way we can do is make sure we split it based on the comma so we can use the split method on this so if i do record equals record dot split and now as an argument to the split method i'm going to supply a comma because that's what's separating each of our values what it's going to do in this line is it's working on the object record and it's being saved perhaps we cover something different perhaps we could call this values because really this is going to be a list because what it's doing is splitting it and saving each value under a new index in this list and so if i now do something like print we could do first of all or the first index is going to be the uh city and we could do a common thing we do is in and we could do for country which is our second our second value our first index and then that will do for now so i can run this if i clear this first of all and we get value is not defined because i did it as values not value we should get now a slightly better version it's a bit more readable a few issues first off about we've got our header row being printed which is not ideal because ascii name is in country doesn't really make any sense we've also got quotes around our strings because in european cities we had our original file we had quotes around our strings so let's take this one by one let's get rid of our quotes first of all because that's quite easy we want to get rid of our first and our last character so if i add on another slicing operation to this and we want to get rid of our first character and so we're starting with index of one we don't have a zero character and then equally we don't want the last character and so we can add that to our value and that should fix the first issue which is having the quotes around it so it looks a little bit nicer we still have the header row being printed and there are a few ways we could do this but i think possibly the easiest just using a for loop like this is if we wrap this in a if statements if i just indent this across if we do if um well let's just do values let's just copy this bit here because if i if you know what your header o value is going to be we can make sure we get rid of the ascii name is not a name of any city and so if i do not equals two ascii name which is our header name um it's going to print this out with the exception of our header row so if i clear this again and print this we now thankfully get rid of our header row not the most elegant solution but it gets rid of it at least in terms of printing out it is still there now this list is quite long and there are lots of fairly small cities sector six there's a city i've never heard of um and we may not want to have reading in our birkenhead in her list so maybe we want to limit it to cities with only more than one million people so if i now again add a nested if statement so if i now do if values and i believe this let's have a check what index would this be so population is our third item and so we'll have an index of two and again so this one actually we don't need to slice off the quotes because it doesn't have quotes around the numbers which is good and now if our if this is going to be want to be greater than one million let's check we have enough zeros there yes we do and now we're only going to print values we're going to print cities which have a population grade of one million maybe we want to add an addon our population as well could do uh with a population of and then values two so let's have a look what happens here if i clear this we should have a slightly more no we don't because i need to make sure i convert between my types we have an error because we have a type error because we're trying here we're trying to convert we're trying to compare a string to an integer because what i should have said earlier is all values coming from external files are treated like strings even if they you know look like integers to us they are treated like strings are the same with user input is always a string and so i forgot i need to make sure i cast this to an integer like that and now clear and we can run and fingers crossed this works this time let's have a look so um formatting but dodgy but there we are so it now has hopefully only the biggest countries bigger cities i should say it does and we have population printed as well and let's say we want to take all of these larger cities and write these to a new file so we want to create a new csv file with only the biggest cities we've only admit with over a million what we can do is make sure we're nested within our if statement which kind of excludes the smaller cities still i can now down here create another with block and so if i do with open and this time let's call this one uh large cities dot csv and open this as just quite large not very sophisticated but it will do the job and now i can make sure i write so i'll write a similar way so if i now use object large dot right and now to format this in csv we need to make sure we separate each of our values with a comma so if i just copy this like so and extra add on a comma after every single value and perhaps let's only do two values here so we want our city name and also our country name and so we've added a comma between these two values but because this second value is going to be the last one in our record we need to make sure we add on a new line character as well which is not actually stored it's hidden from us but it will make sure it goes onto a new record as we've got a comma and we've got our new line character that's perfect so if i run this we're going to get we're going to come across an issue uh because there's two potential issues here we have first of all no such follow directory large cities.csv and that's because well partly because we haven't told it we want to append to it and we've only said we are wanting to read by default so hopefully that will fix that issue um so that's great um it's running fine now and it should really have created a new file over here if you were doing this on python on your desktop it will create a new file if one doesn't exist but in red apparently it doesn't so you can create a new one quickly called large cities csv and now if i run this code again we should now get our code get our values written to this new csv file like we do over here perfect so the thing i was going to say is i don't particularly like having a width nested within another with especially when we're doing it as a loop because here we're looping through each record in it and for each record which is above a million we're going to open a new file and then close a new file like in my mind at least this is adding unnecessary work to a computer because it's having to reopen and close it constantly on you know quite a few lines and so really what i would prefer to do is get rid of this statement up here and simply add it to the top so we've can accept multiple sections to it so we can add a comma to our first open and now open the set open our second file which was europe which was uh large cities got csv i make sure i follow this with a like so and we called it as large and now we have with at the top and so it isn't constantly opening and closing it's only going to close once it gets to the end of all of it so this should uh be less intensive on my computer but still will do the same effect for this try now in the description there will be a link to a csv file which contains data about all of the footballers who played in the premier league in the 2018 and 2019 season including things like the name age club country games and home goals and away goals and it's got i think about 500 records but i want you to print out the exact number of records as well as each individual record each row to the user so that requires reading in and printing each record and then counting the total and then question two just amend this code so that now you're only going to print out the footballers who scored more than 10 goals so above 10 so 11 and above and i want you to do it in a format like i've shown here so it's a little bit less ugly than just printing out in for commas and finally third extend this so actually adapt it so you're now going to write to a new file with the same fields as the one at the top but one extra field which is goals per appearance so you need to calculate goals per appearance to two decimal places and write this to a new file
