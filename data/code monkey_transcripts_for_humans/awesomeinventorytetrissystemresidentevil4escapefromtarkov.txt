With timestamps:

00:00 - hello and welcome i'm your code monkey
00:02 - and here let's build a really
00:03 - interesting system that i've wanted to
00:04 - make for quite a while
00:05 - an inventory tetris system now for me i
00:08 - remember this system from playing
00:09 - commandos as a kid
00:10 - great games or some of you might know it
00:12 - from resident evil 4
00:14 - or maybe more recently from something
00:16 - like daisy or escape from tarkov
00:18 - it's an interesting system that adds
00:20 - another layer of engagement to your
00:22 - game's inventory
00:23 - i have to say this is quite a bit more
00:24 - difficult to make that i initially
00:26 - anticipated
00:27 - it took me about 8 hours to make but i'm
00:29 - quite happy with the final result
00:30 - after watching the video you can go
00:32 - ahead and download the project files and
00:33 - inspect the code for yourself
00:35 - so let's see what i built here and how
00:37 - it works do you want to master game
00:39 - development and make a full-time living
00:41 - creating games
00:42 - learn how to do it with this video
00:43 - sponsored the ultimate gamedev course
00:45 - it's a massive course model at an
00:47 - extremely low price taught by both
00:49 - jason wyman and thomas brush who
00:51 - together already have over 3 500
00:53 - students worldwide
00:54 - it will teach you everything you need to
00:56 - know to make both 2d and 3d games on a
00:58 - professional level with some good
01:00 - patterns and workflows
01:01 - on top of this it will also teach you
01:03 - how to successfully launch your game and
01:05 - hopefully make a full-time living
01:07 - so you will learn how to work with
01:08 - publishers crowdfunding how to run a
01:10 - successful kickstarter just like thomas
01:12 - himself has done
01:13 - jason is a veteran in the aaa games
01:15 - industry having worked on massively
01:16 - complex titles like everquest 2 and
01:18 - vanguard
01:19 - and thomas has published two games that
01:21 - were very successful and received a
01:22 - bunch of awards and raised hundreds of
01:24 - thousands of dollars from publishers and
01:26 - kexner
01:26 - the campaign starts on july 1st and runs
01:29 - for only 30 days or until all the seats
01:31 - are sold out
01:32 - there's only 300 limited seats available
01:34 - to ensure the best experience possible
01:35 - for all students
01:37 - so go ahead and get the ultimate game of
01:39 - course before the seats run out with a
01:40 - link in the description and turn gamedev
01:42 - into your dream job
01:43 - now if you've been watching the channel
01:45 - for a while just by looking at the final
01:47 - goal you can probably already guess how
01:48 - i'm going to start to build this
01:50 - the answer is of course by once again
01:52 - reusing the grid system
01:54 - this class has been insanely useful in
01:56 - so many scenarios now
01:57 - you can go watch the phone playlist to
01:59 - see just how many use cases this has
02:01 - it started off simple just handling the
02:03 - basics then start doing some pathfinding
02:05 - a turn based game after that a grid
02:08 - building system
02:09 - then a factory game and the last one
02:11 - which was the house building system
02:13 - so yep this one started almost two years
02:15 - ago as just a very simple grid system
02:18 - but it has really turned into an
02:19 - excellent example for seeing the
02:20 - benefits of writing clean
02:22 - code and reusing it in tons of different
02:24 - scenarios in reality what i really want
02:26 - to build here is almost
02:27 - exactly like the grid building system i
02:29 - want to place down objects in a grid and
02:31 - rotate them around
02:32 - so this is an example for how you can
02:34 - take the same underlying system and by
02:36 - just using some different visuals with a
02:38 - different concept then it becomes
02:39 - something completely new
02:41 - so that was my starting point i grabbed
02:43 - the grid building system 2d and started
02:44 - working on it
02:46 - first the system is based on scriptable
02:48 - objects for defining the placed object
02:49 - types
02:50 - each scriptable object holds the data
02:52 - for the prefab the visual and the width
02:54 - and height of that object
02:55 - so i just made a tetris item scriptable
02:58 - object definition and created a whole
02:59 - bunch of objects for all my items
03:02 - for the items themselves i simply just
03:03 - reused a bunch of items that i've made
03:05 - for some of my games
03:06 - so i've got a bunch of weapons from my
03:08 - very first steam game survivor squad
03:10 - i've also got a katana from ninja tycoon
03:13 - and some money from battle royale tycoon
03:15 - so yet another example of what you
03:17 - should do to become a very efficient
03:19 - indie game developer
03:20 - whenever you need new assets always
03:22 - check if you can reuse something that
03:23 - you've built for previous projects
03:25 - i drew these weapons all the way back in
03:27 - 2013 when i was working on my first team
03:29 - game
03:30 - and now here i am eight years later
03:31 - reusing those same assets once again
03:33 - okay so i had the atom scriptable
03:35 - objects defined and just with that i
03:37 - already had tons of things working
03:39 - thanks to the underlying grid building
03:41 - system
03:42 - so i could place down objects i could
03:43 - even rotate them
03:45 - and i cannot place them outside bounds
03:47 - or on top of other objects
03:48 - already a great start and thanks to
03:50 - reusing a previously made system it
03:52 - really didn't take much work to do
03:54 - oh and by the way these characters on
03:55 - the bottom they are the people in chat
03:57 - i actually built a part of this system
03:59 - well in the live stream
04:00 - my live streams aren't planned so make
04:02 - sure you hit the bell icon if you want
04:03 - to know when i go live
04:05 - and if you want to know how the overlay
04:06 - works i also covered that in the
04:08 - transparent unity window video
04:10 - so after making the items the next task
04:12 - was to handle moving them
04:14 - now for this the final goal was to make
04:16 - it with a drag and drop
04:17 - but first i just wanted to handle the
04:18 - logic there are some potential issues
04:20 - with regards to what happens if you move
04:22 - it to an invalid position
04:24 - so you need to be careful not to lose
04:26 - the atom forever also you need to allow
04:28 - for the player to move the atom by just
04:30 - one position
04:31 - doing that was actually quite simple so
04:33 - first thing i do is just remove the atom
04:35 - from the inventory
04:36 - then just check if it can be placed on
04:38 - the final position if so i move it and
04:40 - if not i just place it back in the
04:42 - original position
04:43 - doing it this way by first removing the
04:45 - item means that the new position can
04:47 - overlap with the previous one
04:48 - so that logic seemed pretty complex but
04:50 - was actually quite simple
04:51 - now one huge change that i needed to
04:53 - make to this whole thing was to make it
04:55 - on a canvas
04:56 - the grid building system that i made
04:58 - previously is based on placing objects
04:59 - in the world
05:00 - not the canvas but of course the
05:02 - inventory is meant to be a ui element so
05:03 - i had to convert that
05:05 - this definitely required quite a bit of
05:07 - thinking first i was thinking that maybe
05:09 - i need to convert the whole grid class
05:11 - but in reality the 2d world space and
05:13 - the 2d canvas space are really just the
05:16 - same thing
05:16 - they are world spaces based on two
05:18 - dimensions so i didn't really need to
05:20 - change the underlying grid at all
05:22 - i just needed to modify how i grab those
05:24 - positions in order to use the mouse
05:25 - canvas position
05:26 - instead of the mouse button position and
05:28 - then of course i just swapped out all
05:30 - the visuals by changing sprite renderers
05:32 - for image components
05:33 - and actually one issue was with the grid
05:35 - visuals now normally for the debug
05:38 - visuals i just use debug.wrongline but
05:40 - that only works in world space
05:42 - so that's actually something that i'm
05:43 - going to have to work on in the future
05:45 - all of the logic works in the ui but i
05:47 - cannot see the grid
05:48 - for the background visual i really just
05:50 - made some images now the good news is
05:52 - that by using the grid layout component
05:54 - it makes it super easy to align the
05:56 - background perfectly with the grip
05:58 - without that the system was now working
06:00 - on a canvas then
06:01 - as a tiny thing i also added the tooltip
06:03 - that i made in a previous video
06:05 - i added it just to show the message when
06:07 - the position was already occupied
06:08 - very simple then at that point i started
06:11 - to think of my final goal which was to
06:13 - have the player's inventory and then
06:15 - on the side a second inventory that
06:17 - represents whatever the player is
06:18 - looking at
06:19 - so maybe it's just the floor so that the
06:21 - player can drop some items
06:22 - or maybe it's the inventory for some
06:24 - chess the players looting it can really
06:25 - be anything
06:26 - in order to make that second inventory i
06:28 - just needed to pretty much duplicate my
06:30 - object
06:30 - and in doing so i realized that i was
06:32 - handling all the manual placement logic
06:34 - in the exact same script as the
06:36 - inventory logic itself
06:37 - now if i do that and i duplicate it then
06:39 - i get all kinds of issues
06:41 - so the next task was to refactor the
06:43 - code in order to separate the underlying
06:45 - inventory tetras logic from the manual
06:47 - placement
06:48 - with those two scripts separated i can
06:50 - now have my two inventory tetris
06:52 - and only apply minimum placement to one
06:53 - of them or actually i can have as many
06:56 - inventory tetras as i want
06:57 - for this design i only need two but in
06:59 - reality i can add as many as i want
07:02 - next up was pre-adding some items to an
07:04 - inventory
07:05 - the final goal is to load up the second
07:07 - inventory with whatever items the player
07:09 - finds on a chest or something
07:11 - so pre-adding those was really just the
07:12 - case of using the same function that i
07:14 - used in the manual placement script
07:16 - so just place a certain item type on a
07:18 - certain position
07:19 - and for defining which items to add i
07:21 - also very quickly implemented some
07:23 - simple saving and loading
07:24 - i also added this to the house building
07:26 - system it's actually quite simple
07:28 - and i covered it a while ago in a
07:30 - dedicated video so go watch that if you
07:31 - want to learn
07:32 - a simple but powerful way of handling
07:34 - saving and loading
07:35 - i really just have to define a certain
07:37 - save object and then save the whole
07:39 - thing as a simple
07:40 - json string then unload simply just
07:42 - parse that json back into the save
07:44 - object and place them on the inventory
07:46 - as normal
07:47 - it's really quite easy to do by the way
07:49 - if you find the video helpful
07:50 - please hit the like button it's a tiny
07:52 - thing but it really does help thanks
07:54 - next up adding the ability to drag and
07:56 - drop this one was also pretty easy
07:58 - i covered drag and drop in a dedicated
08:00 - video previously so what i did here was
08:03 - just grab
08:03 - exactly that same class from that video
08:06 - just by doing that i could already click
08:07 - to drag and drop an item
08:09 - now while the atom visual was indeed
08:11 - moving the underlying grid position was
08:13 - not
08:14 - so for that i just made a drag drop
08:16 - system kind of like a manager
08:18 - so when an object gets grabbed the
08:20 - system listens to it
08:21 - it knows which inventory system the
08:23 - object came from
08:24 - and then i just apply the same moving
08:26 - logic that i made previously
08:28 - so just remove it from the current
08:29 - position and try to drop it on the
08:31 - target position
08:32 - if it can't be dropped then really just
08:33 - drop it back where it came from
08:35 - then the next tricky thing was how do i
08:37 - handle dragging and dropping between
08:39 - different inventory objects
08:41 - i actually thought this was going to be
08:42 - very difficult but it turned out quite
08:44 - easy
08:44 - all i really needed to do was go through
08:46 - all of the inventories
08:48 - so i just have a list go through each
08:50 - inventory one by one and get the local
08:52 - mouse grid position if the mouse is on a
08:55 - valid grid position then that means the
08:56 - mouse is on top of that inventory
08:58 - it's really that simple just check if
09:00 - it's not on a negative position and not
09:02 - more than the width and height
09:04 - and with that i know which inventory is
09:05 - meant to be the target then it's running
09:07 - the same drag drop logic
09:09 - remove from the original inventory and
09:11 - try to drop on the new inventory
09:12 - and that new inventory can also be the
09:14 - exact same one or can be a different one
09:16 - then a task that was actually quite
09:18 - difficult handling rotation while
09:20 - dragging
09:20 - this was difficult because of how the
09:22 - objects rotate and where on the object
09:24 - you grab with the mouse
09:25 - so as an object rotates the origin is
09:28 - always on the lower left corner
09:30 - so that means that i need to rotate the
09:31 - visual object but also offset its
09:33 - position
09:34 - this was very tricky took a lot of trial
09:36 - and error but i finally got it working
09:38 - so i could grab an item rotate it and
09:40 - drop it somewhere
09:41 - after that i just added a bit of polish
09:44 - so i removed the grid visual from the
09:46 - sprites themselves and made it only show
09:48 - up while dragging
09:49 - i also changed the background of the
09:50 - inventory to something a bit nicer
09:53 - and i added a little bit of snapping
09:54 - while dragging as well as hiding the
09:56 - mouse
09:56 - so put all of that together and here is
09:58 - the final system
10:00 - so starting off here is my empty
10:02 - inventory now let's say that i'm playing
10:04 - the game and i come across a chest
10:06 - so i press a button to open the chest
10:09 - and yep out pops out the inventory
10:11 - showing the chest contents
10:12 - now i can very simply just click and
10:14 - drag in order to move each item
10:16 - so i can move it to a different position
10:18 - on the exact same inventory
10:20 - or i can bring it back into my own
10:22 - inventory
10:23 - then if i also try to drag an item and
10:24 - drop it on an invalid position so right
10:26 - here in the middle of nowhere i drop it
10:28 - in nope i cannot drop the atom there
10:29 - so i get a nice snow tip and the item
10:31 - goes back to where it came from
10:32 - so i cannot drop an item outside the
10:34 - inventory and i also cannot drop it on
10:37 - top of the position that is already
10:38 - occupied
10:39 - so i just click and drag and drop it
10:41 - onto new positions so just like that
10:44 - now once i grab all the items then i can
10:46 - pretend that i open a new chest and
10:48 - load some more so all these items in
10:50 - their preset position
10:51 - is just a basic safe system at work so
10:54 - once again
10:55 - i grab this katana and i can move it and
10:58 - place it in here
10:59 - now while dragging i can also rotate the
11:01 - object in any of the four directions
11:04 - so i rotate it and i place the rifle
11:06 - right in there
11:07 - and then i just keep grabbing all the
11:08 - items and grabbing them position them
11:11 - where i want
11:12 - and load some more and get some more get
11:14 - a bunch of money
11:15 - put it on my nice inventory and just
11:18 - keep it up
11:25 - and yep there's my inventory all of it
11:27 - nicely organized with tons of items
11:29 - now like i said this actually took quite
11:31 - a bit more work than i initially
11:32 - anticipated but i'm quite happy with the
11:34 - final result
11:35 - you can go ahead and download the
11:36 - project files to inspect all the code
11:38 - for yourself
11:39 - now someone also mentioned during the
11:41 - live stream if i was going to add
11:42 - support for item shapes more than just
11:44 - simple rectangles
11:46 - it's definitely possible so i might do
11:47 - that in a future video
11:49 - i might also make it work as part of a
11:51 - larger third person shooter demo
11:53 - something like resident evil
11:54 - so hit the like button if you'd like to
11:56 - see some more on this topic
11:58 - also i'm thinking of perhaps punishing
12:00 - up this whole system and making it
12:01 - into my next pro asset let me know if
12:04 - you would be interested in this system
12:05 - as a fully featured super easy to use
12:07 - package
12:08 - also don't forget to check out the
12:09 - ultimate gamedev course in the
12:10 - description
12:11 - it's only running for 30 days so check
12:13 - it out and turn game dev into your dream
12:15 - job
12:15 - alright hope that's useful check out
12:17 - these videos to learn some more
12:19 - thanks to these awesome patreon
12:20 - supporters for making these videos
12:22 - possible
12:23 - thank you for watching and i'll see you
12:24 - next time

Cleaned transcript:

hello and welcome i'm your code monkey and here let's build a really interesting system that i've wanted to make for quite a while an inventory tetris system now for me i remember this system from playing commandos as a kid great games or some of you might know it from resident evil 4 or maybe more recently from something like daisy or escape from tarkov it's an interesting system that adds another layer of engagement to your game's inventory i have to say this is quite a bit more difficult to make that i initially anticipated it took me about 8 hours to make but i'm quite happy with the final result after watching the video you can go ahead and download the project files and inspect the code for yourself so let's see what i built here and how it works do you want to master game development and make a fulltime living creating games learn how to do it with this video sponsored the ultimate gamedev course it's a massive course model at an extremely low price taught by both jason wyman and thomas brush who together already have over 3 500 students worldwide it will teach you everything you need to know to make both 2d and 3d games on a professional level with some good patterns and workflows on top of this it will also teach you how to successfully launch your game and hopefully make a fulltime living so you will learn how to work with publishers crowdfunding how to run a successful kickstarter just like thomas himself has done jason is a veteran in the aaa games industry having worked on massively complex titles like everquest 2 and vanguard and thomas has published two games that were very successful and received a bunch of awards and raised hundreds of thousands of dollars from publishers and kexner the campaign starts on july 1st and runs for only 30 days or until all the seats are sold out there's only 300 limited seats available to ensure the best experience possible for all students so go ahead and get the ultimate game of course before the seats run out with a link in the description and turn gamedev into your dream job now if you've been watching the channel for a while just by looking at the final goal you can probably already guess how i'm going to start to build this the answer is of course by once again reusing the grid system this class has been insanely useful in so many scenarios now you can go watch the phone playlist to see just how many use cases this has it started off simple just handling the basics then start doing some pathfinding a turn based game after that a grid building system then a factory game and the last one which was the house building system so yep this one started almost two years ago as just a very simple grid system but it has really turned into an excellent example for seeing the benefits of writing clean code and reusing it in tons of different scenarios in reality what i really want to build here is almost exactly like the grid building system i want to place down objects in a grid and rotate them around so this is an example for how you can take the same underlying system and by just using some different visuals with a different concept then it becomes something completely new so that was my starting point i grabbed the grid building system 2d and started working on it first the system is based on scriptable objects for defining the placed object types each scriptable object holds the data for the prefab the visual and the width and height of that object so i just made a tetris item scriptable object definition and created a whole bunch of objects for all my items for the items themselves i simply just reused a bunch of items that i've made for some of my games so i've got a bunch of weapons from my very first steam game survivor squad i've also got a katana from ninja tycoon and some money from battle royale tycoon so yet another example of what you should do to become a very efficient indie game developer whenever you need new assets always check if you can reuse something that you've built for previous projects i drew these weapons all the way back in 2013 when i was working on my first team game and now here i am eight years later reusing those same assets once again okay so i had the atom scriptable objects defined and just with that i already had tons of things working thanks to the underlying grid building system so i could place down objects i could even rotate them and i cannot place them outside bounds or on top of other objects already a great start and thanks to reusing a previously made system it really didn't take much work to do oh and by the way these characters on the bottom they are the people in chat i actually built a part of this system well in the live stream my live streams aren't planned so make sure you hit the bell icon if you want to know when i go live and if you want to know how the overlay works i also covered that in the transparent unity window video so after making the items the next task was to handle moving them now for this the final goal was to make it with a drag and drop but first i just wanted to handle the logic there are some potential issues with regards to what happens if you move it to an invalid position so you need to be careful not to lose the atom forever also you need to allow for the player to move the atom by just one position doing that was actually quite simple so first thing i do is just remove the atom from the inventory then just check if it can be placed on the final position if so i move it and if not i just place it back in the original position doing it this way by first removing the item means that the new position can overlap with the previous one so that logic seemed pretty complex but was actually quite simple now one huge change that i needed to make to this whole thing was to make it on a canvas the grid building system that i made previously is based on placing objects in the world not the canvas but of course the inventory is meant to be a ui element so i had to convert that this definitely required quite a bit of thinking first i was thinking that maybe i need to convert the whole grid class but in reality the 2d world space and the 2d canvas space are really just the same thing they are world spaces based on two dimensions so i didn't really need to change the underlying grid at all i just needed to modify how i grab those positions in order to use the mouse canvas position instead of the mouse button position and then of course i just swapped out all the visuals by changing sprite renderers for image components and actually one issue was with the grid visuals now normally for the debug visuals i just use debug.wrongline but that only works in world space so that's actually something that i'm going to have to work on in the future all of the logic works in the ui but i cannot see the grid for the background visual i really just made some images now the good news is that by using the grid layout component it makes it super easy to align the background perfectly with the grip without that the system was now working on a canvas then as a tiny thing i also added the tooltip that i made in a previous video i added it just to show the message when the position was already occupied very simple then at that point i started to think of my final goal which was to have the player's inventory and then on the side a second inventory that represents whatever the player is looking at so maybe it's just the floor so that the player can drop some items or maybe it's the inventory for some chess the players looting it can really be anything in order to make that second inventory i just needed to pretty much duplicate my object and in doing so i realized that i was handling all the manual placement logic in the exact same script as the inventory logic itself now if i do that and i duplicate it then i get all kinds of issues so the next task was to refactor the code in order to separate the underlying inventory tetras logic from the manual placement with those two scripts separated i can now have my two inventory tetris and only apply minimum placement to one of them or actually i can have as many inventory tetras as i want for this design i only need two but in reality i can add as many as i want next up was preadding some items to an inventory the final goal is to load up the second inventory with whatever items the player finds on a chest or something so preadding those was really just the case of using the same function that i used in the manual placement script so just place a certain item type on a certain position and for defining which items to add i also very quickly implemented some simple saving and loading i also added this to the house building system it's actually quite simple and i covered it a while ago in a dedicated video so go watch that if you want to learn a simple but powerful way of handling saving and loading i really just have to define a certain save object and then save the whole thing as a simple json string then unload simply just parse that json back into the save object and place them on the inventory as normal it's really quite easy to do by the way if you find the video helpful please hit the like button it's a tiny thing but it really does help thanks next up adding the ability to drag and drop this one was also pretty easy i covered drag and drop in a dedicated video previously so what i did here was just grab exactly that same class from that video just by doing that i could already click to drag and drop an item now while the atom visual was indeed moving the underlying grid position was not so for that i just made a drag drop system kind of like a manager so when an object gets grabbed the system listens to it it knows which inventory system the object came from and then i just apply the same moving logic that i made previously so just remove it from the current position and try to drop it on the target position if it can't be dropped then really just drop it back where it came from then the next tricky thing was how do i handle dragging and dropping between different inventory objects i actually thought this was going to be very difficult but it turned out quite easy all i really needed to do was go through all of the inventories so i just have a list go through each inventory one by one and get the local mouse grid position if the mouse is on a valid grid position then that means the mouse is on top of that inventory it's really that simple just check if it's not on a negative position and not more than the width and height and with that i know which inventory is meant to be the target then it's running the same drag drop logic remove from the original inventory and try to drop on the new inventory and that new inventory can also be the exact same one or can be a different one then a task that was actually quite difficult handling rotation while dragging this was difficult because of how the objects rotate and where on the object you grab with the mouse so as an object rotates the origin is always on the lower left corner so that means that i need to rotate the visual object but also offset its position this was very tricky took a lot of trial and error but i finally got it working so i could grab an item rotate it and drop it somewhere after that i just added a bit of polish so i removed the grid visual from the sprites themselves and made it only show up while dragging i also changed the background of the inventory to something a bit nicer and i added a little bit of snapping while dragging as well as hiding the mouse so put all of that together and here is the final system so starting off here is my empty inventory now let's say that i'm playing the game and i come across a chest so i press a button to open the chest and yep out pops out the inventory showing the chest contents now i can very simply just click and drag in order to move each item so i can move it to a different position on the exact same inventory or i can bring it back into my own inventory then if i also try to drag an item and drop it on an invalid position so right here in the middle of nowhere i drop it in nope i cannot drop the atom there so i get a nice snow tip and the item goes back to where it came from so i cannot drop an item outside the inventory and i also cannot drop it on top of the position that is already occupied so i just click and drag and drop it onto new positions so just like that now once i grab all the items then i can pretend that i open a new chest and load some more so all these items in their preset position is just a basic safe system at work so once again i grab this katana and i can move it and place it in here now while dragging i can also rotate the object in any of the four directions so i rotate it and i place the rifle right in there and then i just keep grabbing all the items and grabbing them position them where i want and load some more and get some more get a bunch of money put it on my nice inventory and just keep it up and yep there's my inventory all of it nicely organized with tons of items now like i said this actually took quite a bit more work than i initially anticipated but i'm quite happy with the final result you can go ahead and download the project files to inspect all the code for yourself now someone also mentioned during the live stream if i was going to add support for item shapes more than just simple rectangles it's definitely possible so i might do that in a future video i might also make it work as part of a larger third person shooter demo something like resident evil so hit the like button if you'd like to see some more on this topic also i'm thinking of perhaps punishing up this whole system and making it into my next pro asset let me know if you would be interested in this system as a fully featured super easy to use package also don't forget to check out the ultimate gamedev course in the description it's only running for 30 days so check it out and turn game dev into your dream job alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time
