With timestamps:

00:00 - in this video we're going to learn how
00:01 - to make a transparent unity app
00:03 - the background of our unity window will
00:05 - be transparent allowing us to see what's
00:07 - behind it
00:08 - this is great for many scenarios like
00:09 - making a annotation app or a virtual
00:12 - assistant
00:12 - or some particles falling to mouse or
00:14 - just a simple desktop overlay let's
00:16 - begin
00:16 - [Music]
00:21 - this video is sponsored by audio mob
00:23 - audio mob helps developers monetize
00:25 - their games through non-interrupting
00:26 - audio ads
00:28 - you can earn more money while having
00:29 - happier players so instead of intrusive
00:32 - video ads that take up your entire
00:33 - screen
00:34 - you have audio ads playing in the
00:35 - background whilst the player is enjoying
00:37 - your game
00:38 - so the player continues having fun while
00:39 - the audio ad plays in the background
00:42 - you can monetize using standard audio
00:44 - ads that allow the user to skip the
00:45 - advert at any time
00:47 - or you also have the rewarded type which
00:49 - allows your player to get rewards by
00:51 - listening to an ad
00:52 - players don't enjoy having their games
00:54 - locked so it's quite possible that this
00:55 - new unintrusive ad type won't become the
00:58 - new standard in the future
00:59 - it's very easy to integrate into your
01:01 - games via their unity plugin
01:03 - click the link in the description to
01:04 - learn more and start monetizing your
01:06 - games through non-intrusive advertising
01:08 - clicking the link also helps support the
01:10 - channel okay so here
01:12 - let's learn how to make a transparent
01:14 - unity app now i first researched this a
01:16 - while ago because i had a really
01:17 - interesting idea
01:18 - and if you saw the game dev reacts video
01:20 - then you already saw what that is
01:22 - i wanted to be able to write some
01:23 - annotations on top of the video as i
01:25 - explained what was happening
01:27 - so i first went looking for normal
01:28 - annotation apps but i couldn't really
01:30 - find anything decent
01:31 - so eventually i started researching if
01:33 - it could be done with unity and made my
01:36 - own
01:36 - alright so here is the simplest thing i
01:38 - just have a cube moving around and it's
01:40 - on top of the desktop
01:41 - so the background of this unity app is
01:43 - transparent which lets me see the
01:44 - windows behind it so i can interact
01:46 - switch this one switch to this one there
01:48 - you go
01:48 - here is another simple example just some
01:50 - particles being spawned and following
01:52 - the mouse
01:53 - and finally here it is another possible
01:54 - use case just a simple virtual assistant
01:57 - so i can click on this button and there
01:59 - you go he tells a very nice joke
02:01 - he's just standing there playing a
02:03 - normal animation on top of my desktop so
02:05 - i can switch windows and there you go
02:06 - he's always there so note how if i click
02:09 - through it
02:09 - there you go the window app is running
02:11 - on top of everything else and the
02:12 - important thing is that it's fully
02:13 - transparent
02:14 - so i'm interacting with what's behind it
02:16 - there you go just like this
02:17 - and i can also define areas to receive
02:19 - clicks so for example this button i
02:21 - click on it and there you go he tells a
02:22 - nice joke
02:23 - so the important thing is that we're
02:25 - running unity on top of the desktop
02:27 - so whatever you can do with unity you
02:29 - can do it example like this
02:32 - so you can make a really complex virtual
02:34 - assistant maybe to it notify you when
02:36 - you receive an email or remind you of
02:37 - certain things
02:38 - or you can play around and build one of
02:40 - those destroy your desktop games
02:42 - so it's a really cool thing that greatly
02:43 - expands which you can build with unity
02:45 - i have also included links in
02:46 - description to all the results that i
02:48 - found during my research so if you want
02:49 - to dig deeper you can check those out
02:51 - check out the code monkey app on steam
02:53 - interactive tutorials complete games and
02:55 - more
02:56 - click the link in the description and
02:57 - add it to your wishlist this video is
02:59 - made possible thanks to these awesome
03:00 - supporters
03:01 - go to patreon.com unitycodemonkey to get
03:04 - some perks and help keep the videos free
03:06 - for everyone
03:07 - alright so this is our goal let's get to
03:09 - it
03:10 - okay so here we are in our starting
03:12 - scene it's completely empty all i have
03:14 - is this cube here just moving and
03:16 - rotating around
03:17 - so here in the editor everything is
03:18 - pretty much normal let's start off by
03:20 - making the script to run our code
03:22 - so we create a new c sharp script call
03:24 - this our transparent window
03:27 - let's make a game object
03:30 - and add our script okay now in order to
03:33 - make this effect it's actually very
03:35 - simple but also slightly complex
03:37 - meaning it's just a few lines of code
03:39 - but it does involve working directly
03:41 - with the windows api
03:42 - we need to tell the windows api what
03:44 - settings to use for our unity window
03:46 - now the way that we can interact with an
03:48 - external api
03:49 - is by first adding the attribute dll
03:52 - import
03:53 - now this attribute lives inside using
03:58 - system.runtime.interop
03:59 - services this attribute says that we're
04:02 - going to grab a function from an
04:03 - external library
04:04 - so in this case we want to grab it from
04:07 - user32.dll
04:09 - and then from this library we want to
04:11 - grab this function
04:17 - and this function requires an end
04:18 - pointer which lives inside using system
04:24 - all right so this is how we can access
04:26 - functions from external libraries like
04:27 - the various windows apis
04:29 - and through this function we can show a
04:31 - standard windows message box
04:33 - so for testing let's do down here a
04:35 - simple void start
04:38 - and on start let's just test it
04:41 - now the first argument is for the handle
04:43 - of the window
04:44 - so let's pass in just a zero pointer
04:47 - then we have some text
04:50 - then a caption and finally the type so
04:54 - let's use default
04:56 - alright so let's test and yep right away
04:59 - we see a standard windows message box
05:01 - showing up
05:01 - it has our text our caption and a simple
05:04 - okay button
05:05 - all right awesome so this is how we
05:07 - interact with the windows api
05:09 - first we import from a specific dll grab
05:11 - a specific function
05:13 - and then we simply use it now i'm not an
05:15 - expert on the windows api but by using
05:17 - the various libraries you can build just
05:19 - about anything
05:20 - there is this great website called
05:21 - pinvoke.net
05:23 - this one shows all the functions in all
05:25 - the various windows apis
05:27 - so it's a massive wiki it also shows
05:29 - c-sharp examples for all of the
05:31 - functions
05:31 - so this is extremely useful for learning
05:33 - how to use the windows api and what each
05:35 - parameter requires
05:36 - okay so let's go back to our goal to
05:38 - making the background transparent
05:40 - now in order to do that there are
05:42 - several possible methods
05:43 - again you can check the links in the
05:45 - description which are the results of my
05:46 - research and several people
05:48 - found multiple methods here i will
05:50 - showcase the method that achieved the
05:51 - result that i want
05:52 - so first we're going to need a function
05:54 - here it is it's a function from the dwm
05:57 - api
05:57 - this one allows us to set the window
05:59 - margins so down here on start we can use
06:02 - this function
06:06 - now the first parameter is the handle
06:08 - for the window so that means we also
06:10 - need a function to get the handle for
06:12 - this window so here it is from user32 we
06:15 - get the get
06:16 - active window so down here
06:20 - we get the handle for this window and we
06:22 - use it in this function
06:24 - and now we need our margins and here
06:26 - according to the documentation
06:28 - if we give it a negative number then we
06:30 - get a sheet of glass effect making our
06:32 - background transparent
06:38 - so just like this create our margins
06:40 - with -1 and we pass it in and call this
06:42 - function
06:42 - so that's it that's pretty much the bare
06:44 - minimum that we need
06:46 - however here if we try running it in the
06:48 - editor
06:50 - and nope nothing works yet so in order
06:52 - for this effect to work we need to make
06:54 - a proper build instead of running it in
06:55 - the editor
06:56 - so for that let's go into file open up
06:58 - the build settings now first we add our
07:00 - open scenes onto our build
07:02 - then in here everything is correct let's
07:04 - just open the player settings
07:06 - and now here we have an important option
07:07 - that we need to change
07:09 - down here on the resolution tab we have
07:11 - this option here
07:12 - to use the flip mode on swap chain so
07:15 - it's this one that we need to disable in
07:17 - order for this effect to actually work
07:19 - so we do that and then over here on our
07:21 - full screen mode
07:22 - we also need to make sure that we are in
07:24 - full screen window and we're also using
07:26 - the built-in render pipeline
07:28 - and lastly we just need to go to our
07:29 - camera here it is my main camera and
07:31 - just set the background color to black
07:33 - with zero alpha
07:34 - all right so that's it all of these
07:36 - settings are very important so we need
07:38 - this checkbox to be unticked
07:40 - it needs to be in full screen and the
07:42 - camera needs to be black with no alpha
07:44 - now with all of that we can try clicking
07:45 - on build and run
07:52 - and yep there's our unity app with a
07:53 - completely transparent background
07:55 - awesome so we have our unity build and
07:58 - it's running on top of the desktop
08:00 - so there it is exactly like that and as
08:02 - you can see this was actually very
08:03 - simple
08:04 - all we needed was pretty much just this
08:06 - line of code and everything is working
08:08 - now everything else that we want to do
08:09 - is simply expanding upon this concept
08:11 - for example over here i have this simple
08:13 - particle effect it follows the mouse and
08:15 - drops particles
08:16 - now let's run this as a build and if
08:18 - there it is we have the mouse with the
08:19 - visible desktop behind it and the
08:21 - particles looking nice following it
08:23 - now there's still one very important
08:24 - thing right now this works we have all
08:27 - of our visions on top of the desktop
08:29 - so we have our transparent ent window
08:31 - however even though it's transparent
08:33 - it's still capturing the mouse so as i
08:35 - click
08:35 - nope i cannot interact with what's
08:37 - behind it so let's make that happen
08:39 - now in order to do that we're going to
08:41 - need another function so here it is from
08:43 - user32.then the set window log
08:46 - so this lets us set attributes for a
08:48 - window you can view all the possible
08:50 - attributes in the windows documentation
08:53 - so down here let's call this function we
08:56 - pass in our window handle
08:58 - then we want the type that we're going
09:00 - to change we want to change the extended
09:02 - style
09:03 - so instead of using magic numbers i'm
09:04 - going to add a constant up here
09:08 - and we use this okay and now we set the
09:11 - new flags
09:12 - now to make it click through we need to
09:17 - so we need these two make it layered and
09:19 - transparent
09:21 - and we use them down here now these are
09:23 - flags so in order to add both of them we
09:25 - add one
09:26 - then the bitwise or operator and then
09:29 - the second
09:32 - i covered bitmasks and bitwise operators
09:34 - in another video if you want to learn
09:35 - more
09:36 - so we apply these two and now our window
09:38 - should be clicked through
09:39 - let's build and test okay so here is our
09:42 - window running on top and as i click
09:43 - behind it yep now i'm actually
09:45 - interacting with this window
09:47 - so our app is now click through awesome
09:49 - now one very important thing here
09:51 - which is if we run this code whilst in
09:53 - the editor then everything will end up
09:55 - being messed up
09:56 - so here instead of making a bill let's
09:58 - say i just click on play
09:59 - and yep everything is completely broken
10:01 - so it's broken on top and as i click yep
10:03 - the clicks go through
10:04 - so the editor is now broken to solve
10:06 - this i need to restart unity
10:08 - okay back to normal so as we saw this
10:10 - causes some pretty serious issues if we
10:12 - run it in the editor
10:14 - so in order to prevent that over here we
10:16 - can add an if
10:19 - so this code will only run if we are not
10:22 - on the unity editor
10:23 - so this helps prevent that issue from
10:25 - happening alright so here we have our
10:27 - transparent window which is acting as a
10:29 - click through
10:30 - now the next issue is it doesn't say on
10:31 - top so as i click yep unity comes to the
10:34 - foreground and this one goes to the
10:35 - background
10:36 - all right so let's fix them for that we
10:38 - need another function
10:39 - so another one from user 32 this one is
10:42 - set window pause
10:43 - now down here we're going to call it
10:46 - pass in the window handle
10:48 - now for the insert after we need another
10:50 - constant
10:51 - so we have a constant for the topmost
10:53 - and we use it in here and zero on the
10:55 - rest
10:57 - all right so just with this line let's
10:59 - test so here we are and click
11:02 - and yep the click went through and i'm
11:04 - now interacting with the window behind
11:05 - it
11:05 - but the transparent app is still on top
11:08 - alright so far so good now we see
11:09 - another issue
11:10 - the issue is that the build is not
11:11 - running when it's in the background so
11:13 - only one comes in here
11:14 - doesn't work and down there it's not
11:15 - visible but it's not running so we can
11:17 - fix that very easily
11:19 - down here we go into our build settings
11:21 - into our player settings
11:22 - and we simply take this box to run in
11:24 - background now alternatively we can also
11:26 - do it through code by setting
11:28 - application.run and background to true
11:32 - so let's test all right so it's on the
11:35 - foreground as i click
11:36 - yep there you go it's still running but
11:37 - i'm now interacting with the background
11:39 - all right awesome so here we have a
11:42 - transparent ent window running on top
11:44 - of our desktop so it's running on top of
11:46 - the ent window and now it's running on
11:48 - top of visual studio and so on
11:50 - now finally if we want to make it
11:52 - transparent but also interactable
11:54 - we have two methods one is just based on
11:57 - pixels and one is based on manual logic
12:00 - now the simplest one is based on pixels
12:02 - for that we need a new function
12:06 - here it is we set the layered window
12:08 - attributes then we also need another
12:10 - constant
12:13 - so here it is and now down here instead
12:16 - of set we're no longer passing in these
12:18 - two
12:18 - we only make it layered we do not add
12:20 - the transparent
12:21 - and then we call our set layered window
12:23 - attributes
12:25 - in order to access this window now we
12:27 - have a film for the chroma key a field
12:29 - for the alpha and a film for the flags
12:31 - which is our color key
12:32 - y all right so that's it essentially
12:35 - we're telling everything with a color of
12:36 - zero so
12:37 - completely black with zero alpha won't
12:39 - become
12:40 - click through and everything not won't
12:42 - become clickable
12:43 - so let's test
12:48 - all right so just for testing i add the
12:49 - new sprite with some alpha fade we'll
12:52 - see why in a bit
12:52 - so let's build okay so here's our
12:55 - transparent window running on top
12:56 - now if i click on the transparent part
12:58 - yep there you go now the window behind
13:00 - it is in focus
13:01 - however now if i click on the summit
13:03 - part yep there you go now this one is
13:05 - the one that's actually
13:06 - active so the clicks are not going
13:07 - through behind now let me just add some
13:09 - button behavior
13:15 - all right so here i made a simple button
13:17 - it's using the button sprite script from
13:19 - the utilities which as always you can
13:21 - grab for free from unitycodemonkey.com
13:23 - all i did was just add some behavior to
13:25 - change the color on the mouse over so as
13:27 - the mouse passes it don't change color
13:28 - let's test
13:30 - all right so here's the button down here
13:31 - and as you can see as i pass the mouse
13:32 - over
13:33 - yep it's interacting with the button now
13:34 - i click on transparent and i'm clicking
13:36 - on the
13:37 - window behind it but now if i click on
13:39 - the button yep now this one is active
13:41 - alright so like this you can see how it
13:42 - works very easily between the
13:44 - transparent click-through
13:45 - and the song it does not collect through
13:47 - however here this sprite has a fading
13:49 - alpha and now you see the issue with
13:51 - this approach
13:52 - now in order to capture clicks it makes
13:54 - each pixel either fully transparent or
13:55 - fully opaque
13:56 - so it does not deal well with alpha
13:58 - fades now the other approach is simply
14:01 - extending upon what we learned
14:02 - previously
14:03 - so we know how to make the window click
14:05 - through and not all we need to do is
14:07 - apply some logic to it
14:08 - so let's go back into the other method
14:11 - so for that we comment out this function
14:13 - call
14:13 - and in here we add our transparent flag
14:17 - and yep there it is everything is
14:19 - clicked through and right now you can
14:20 - also see the difference between the two
14:22 - methods
14:24 - so this one the alpha is actually
14:25 - correct so it's slowly fading away
14:27 - so with this method i'm just going to
14:29 - add some simple code
14:31 - so here it is just add an update and a
14:33 - simple function to set the click-through
14:35 - now we just need to make our window
14:37 - handle an actual field
14:47 - okay we make it a member field we set it
14:49 - in here and then we use it in here
14:51 - and there you go it's extremely simple
14:53 - we're just either adding the transparent
14:55 - or click-through or we're taking away
14:57 - and we're using the physics in order to
14:59 - test if there's a collateral beneath the
15:01 - mouse position
15:02 - and if so then it becomes knuckley
15:04 - through and if there isn't anything and
15:06 - it's transparent then becomes connected
15:08 - so very simple now if we run this here
15:11 - we are and if i click on the transparent
15:12 - part yep there you go i'm interacting
15:14 - with behind it
15:15 - however if i click on top of a collider
15:17 - so here on the button i click and there
15:19 - you go now this window is active
15:21 - so click on transparent and go through
15:22 - click on the button and captures on the
15:24 - button
15:25 - now the benefit of this approach is that
15:27 - the alpha phase work and you can also
15:29 - more specifically define what is
15:30 - clickable and unclickable
15:32 - so in here it's perfectly solid but i
15:33 - can click and clicks go through it
15:35 - over here is an example of all of this
15:37 - put together so it's my virtual
15:39 - assistant
15:40 - i can click through the character and
15:41 - interact with the objects behind it
15:44 - and i can click on this button to
15:45 - interact with it and there you go he
15:47 - tells a nice joke
15:48 - so here is everything put into action
15:50 - making an actual proper interesting
15:52 - thing
15:53 - so if you'd like to build an assistant
15:55 - that tells you corny jokes throughout
15:56 - the day there you go here's how you do
15:58 - it
15:58 - so now that you know this go ahead and
16:00 - make something awesome
16:01 - if you found this video helpful consider
16:03 - liking and subscribing also don't forget
16:05 - to check out audio mob to monetize your
16:07 - games and earn more money while keeping
16:08 - happier players
16:10 - clicking the link also helps support the
16:12 - channel check out the code monkey app on
16:14 - steam
16:14 - interactive tutorials complete games and
16:16 - more click the link in the description
16:18 - and add it to your wishlist
16:19 - this video is made possible thanks to
16:21 - these awesome supporters go to
16:22 - patreon.com
16:24 - unitycodemonkey to get some perks and
16:26 - help keep the videos free for everyone
16:28 - as always you can download the project
16:29 - files and utilities from
16:30 - untickoutmonkey.com
16:31 - subscribe to the channel for more unity
16:33 - tutorials post any question
16:35 - comments and i'll see you next time

Cleaned transcript:

in this video we're going to learn how to make a transparent unity app the background of our unity window will be transparent allowing us to see what's behind it this is great for many scenarios like making a annotation app or a virtual assistant or some particles falling to mouse or just a simple desktop overlay let's begin this video is sponsored by audio mob audio mob helps developers monetize their games through noninterrupting audio ads you can earn more money while having happier players so instead of intrusive video ads that take up your entire screen you have audio ads playing in the background whilst the player is enjoying your game so the player continues having fun while the audio ad plays in the background you can monetize using standard audio ads that allow the user to skip the advert at any time or you also have the rewarded type which allows your player to get rewards by listening to an ad players don't enjoy having their games locked so it's quite possible that this new unintrusive ad type won't become the new standard in the future it's very easy to integrate into your games via their unity plugin click the link in the description to learn more and start monetizing your games through nonintrusive advertising clicking the link also helps support the channel okay so here let's learn how to make a transparent unity app now i first researched this a while ago because i had a really interesting idea and if you saw the game dev reacts video then you already saw what that is i wanted to be able to write some annotations on top of the video as i explained what was happening so i first went looking for normal annotation apps but i couldn't really find anything decent so eventually i started researching if it could be done with unity and made my own alright so here is the simplest thing i just have a cube moving around and it's on top of the desktop so the background of this unity app is transparent which lets me see the windows behind it so i can interact switch this one switch to this one there you go here is another simple example just some particles being spawned and following the mouse and finally here it is another possible use case just a simple virtual assistant so i can click on this button and there you go he tells a very nice joke he's just standing there playing a normal animation on top of my desktop so i can switch windows and there you go he's always there so note how if i click through it there you go the window app is running on top of everything else and the important thing is that it's fully transparent so i'm interacting with what's behind it there you go just like this and i can also define areas to receive clicks so for example this button i click on it and there you go he tells a nice joke so the important thing is that we're running unity on top of the desktop so whatever you can do with unity you can do it example like this so you can make a really complex virtual assistant maybe to it notify you when you receive an email or remind you of certain things or you can play around and build one of those destroy your desktop games so it's a really cool thing that greatly expands which you can build with unity i have also included links in description to all the results that i found during my research so if you want to dig deeper you can check those out check out the code monkey app on steam interactive tutorials complete games and more click the link in the description and add it to your wishlist this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone alright so this is our goal let's get to it okay so here we are in our starting scene it's completely empty all i have is this cube here just moving and rotating around so here in the editor everything is pretty much normal let's start off by making the script to run our code so we create a new c sharp script call this our transparent window let's make a game object and add our script okay now in order to make this effect it's actually very simple but also slightly complex meaning it's just a few lines of code but it does involve working directly with the windows api we need to tell the windows api what settings to use for our unity window now the way that we can interact with an external api is by first adding the attribute dll import now this attribute lives inside using system.runtime.interop services this attribute says that we're going to grab a function from an external library so in this case we want to grab it from user32.dll and then from this library we want to grab this function and this function requires an end pointer which lives inside using system all right so this is how we can access functions from external libraries like the various windows apis and through this function we can show a standard windows message box so for testing let's do down here a simple void start and on start let's just test it now the first argument is for the handle of the window so let's pass in just a zero pointer then we have some text then a caption and finally the type so let's use default alright so let's test and yep right away we see a standard windows message box showing up it has our text our caption and a simple okay button all right awesome so this is how we interact with the windows api first we import from a specific dll grab a specific function and then we simply use it now i'm not an expert on the windows api but by using the various libraries you can build just about anything there is this great website called pinvoke.net this one shows all the functions in all the various windows apis so it's a massive wiki it also shows csharp examples for all of the functions so this is extremely useful for learning how to use the windows api and what each parameter requires okay so let's go back to our goal to making the background transparent now in order to do that there are several possible methods again you can check the links in the description which are the results of my research and several people found multiple methods here i will showcase the method that achieved the result that i want so first we're going to need a function here it is it's a function from the dwm api this one allows us to set the window margins so down here on start we can use this function now the first parameter is the handle for the window so that means we also need a function to get the handle for this window so here it is from user32 we get the get active window so down here we get the handle for this window and we use it in this function and now we need our margins and here according to the documentation if we give it a negative number then we get a sheet of glass effect making our background transparent so just like this create our margins with 1 and we pass it in and call this function so that's it that's pretty much the bare minimum that we need however here if we try running it in the editor and nope nothing works yet so in order for this effect to work we need to make a proper build instead of running it in the editor so for that let's go into file open up the build settings now first we add our open scenes onto our build then in here everything is correct let's just open the player settings and now here we have an important option that we need to change down here on the resolution tab we have this option here to use the flip mode on swap chain so it's this one that we need to disable in order for this effect to actually work so we do that and then over here on our full screen mode we also need to make sure that we are in full screen window and we're also using the builtin render pipeline and lastly we just need to go to our camera here it is my main camera and just set the background color to black with zero alpha all right so that's it all of these settings are very important so we need this checkbox to be unticked it needs to be in full screen and the camera needs to be black with no alpha now with all of that we can try clicking on build and run and yep there's our unity app with a completely transparent background awesome so we have our unity build and it's running on top of the desktop so there it is exactly like that and as you can see this was actually very simple all we needed was pretty much just this line of code and everything is working now everything else that we want to do is simply expanding upon this concept for example over here i have this simple particle effect it follows the mouse and drops particles now let's run this as a build and if there it is we have the mouse with the visible desktop behind it and the particles looking nice following it now there's still one very important thing right now this works we have all of our visions on top of the desktop so we have our transparent ent window however even though it's transparent it's still capturing the mouse so as i click nope i cannot interact with what's behind it so let's make that happen now in order to do that we're going to need another function so here it is from user32.then the set window log so this lets us set attributes for a window you can view all the possible attributes in the windows documentation so down here let's call this function we pass in our window handle then we want the type that we're going to change we want to change the extended style so instead of using magic numbers i'm going to add a constant up here and we use this okay and now we set the new flags now to make it click through we need to so we need these two make it layered and transparent and we use them down here now these are flags so in order to add both of them we add one then the bitwise or operator and then the second i covered bitmasks and bitwise operators in another video if you want to learn more so we apply these two and now our window should be clicked through let's build and test okay so here is our window running on top and as i click behind it yep now i'm actually interacting with this window so our app is now click through awesome now one very important thing here which is if we run this code whilst in the editor then everything will end up being messed up so here instead of making a bill let's say i just click on play and yep everything is completely broken so it's broken on top and as i click yep the clicks go through so the editor is now broken to solve this i need to restart unity okay back to normal so as we saw this causes some pretty serious issues if we run it in the editor so in order to prevent that over here we can add an if so this code will only run if we are not on the unity editor so this helps prevent that issue from happening alright so here we have our transparent window which is acting as a click through now the next issue is it doesn't say on top so as i click yep unity comes to the foreground and this one goes to the background all right so let's fix them for that we need another function so another one from user 32 this one is set window pause now down here we're going to call it pass in the window handle now for the insert after we need another constant so we have a constant for the topmost and we use it in here and zero on the rest all right so just with this line let's test so here we are and click and yep the click went through and i'm now interacting with the window behind it but the transparent app is still on top alright so far so good now we see another issue the issue is that the build is not running when it's in the background so only one comes in here doesn't work and down there it's not visible but it's not running so we can fix that very easily down here we go into our build settings into our player settings and we simply take this box to run in background now alternatively we can also do it through code by setting application.run and background to true so let's test all right so it's on the foreground as i click yep there you go it's still running but i'm now interacting with the background all right awesome so here we have a transparent ent window running on top of our desktop so it's running on top of the ent window and now it's running on top of visual studio and so on now finally if we want to make it transparent but also interactable we have two methods one is just based on pixels and one is based on manual logic now the simplest one is based on pixels for that we need a new function here it is we set the layered window attributes then we also need another constant so here it is and now down here instead of set we're no longer passing in these two we only make it layered we do not add the transparent and then we call our set layered window attributes in order to access this window now we have a film for the chroma key a field for the alpha and a film for the flags which is our color key y all right so that's it essentially we're telling everything with a color of zero so completely black with zero alpha won't become click through and everything not won't become clickable so let's test all right so just for testing i add the new sprite with some alpha fade we'll see why in a bit so let's build okay so here's our transparent window running on top now if i click on the transparent part yep there you go now the window behind it is in focus however now if i click on the summit part yep there you go now this one is the one that's actually active so the clicks are not going through behind now let me just add some button behavior all right so here i made a simple button it's using the button sprite script from the utilities which as always you can grab for free from unitycodemonkey.com all i did was just add some behavior to change the color on the mouse over so as the mouse passes it don't change color let's test all right so here's the button down here and as you can see as i pass the mouse over yep it's interacting with the button now i click on transparent and i'm clicking on the window behind it but now if i click on the button yep now this one is active alright so like this you can see how it works very easily between the transparent clickthrough and the song it does not collect through however here this sprite has a fading alpha and now you see the issue with this approach now in order to capture clicks it makes each pixel either fully transparent or fully opaque so it does not deal well with alpha fades now the other approach is simply extending upon what we learned previously so we know how to make the window click through and not all we need to do is apply some logic to it so let's go back into the other method so for that we comment out this function call and in here we add our transparent flag and yep there it is everything is clicked through and right now you can also see the difference between the two methods so this one the alpha is actually correct so it's slowly fading away so with this method i'm just going to add some simple code so here it is just add an update and a simple function to set the clickthrough now we just need to make our window handle an actual field okay we make it a member field we set it in here and then we use it in here and there you go it's extremely simple we're just either adding the transparent or clickthrough or we're taking away and we're using the physics in order to test if there's a collateral beneath the mouse position and if so then it becomes knuckley through and if there isn't anything and it's transparent then becomes connected so very simple now if we run this here we are and if i click on the transparent part yep there you go i'm interacting with behind it however if i click on top of a collider so here on the button i click and there you go now this window is active so click on transparent and go through click on the button and captures on the button now the benefit of this approach is that the alpha phase work and you can also more specifically define what is clickable and unclickable so in here it's perfectly solid but i can click and clicks go through it over here is an example of all of this put together so it's my virtual assistant i can click through the character and interact with the objects behind it and i can click on this button to interact with it and there you go he tells a nice joke so here is everything put into action making an actual proper interesting thing so if you'd like to build an assistant that tells you corny jokes throughout the day there you go here's how you do it so now that you know this go ahead and make something awesome if you found this video helpful consider liking and subscribing also don't forget to check out audio mob to monetize your games and earn more money while keeping happier players clicking the link also helps support the channel check out the code monkey app on steam interactive tutorials complete games and more click the link in the description and add it to your wishlist this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone as always you can download the project files and utilities from untickoutmonkey.com subscribe to the channel for more unity tutorials post any question comments and i'll see you next time
