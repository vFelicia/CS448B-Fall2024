With timestamps:

00:00 - in this video we're going to look how to
00:01 - make a simple building system in order
00:03 - to place down buildings in the world
00:05 - this is a freeform system so you don't
00:07 - need any kind of underlying grid
00:08 - just select the building type and click
00:10 - to place let's begin
00:16 - all right so let's look at how to
00:17 - implement a really nice building system
00:20 - now what we're going to do here is
00:21 - similar but more simplified version to
00:23 - what i cover
00:24 - in depth in my complete builder defender
00:26 - course the course is 10 hours long with
00:28 - over 15 lectures lastly organized into
00:30 - distinct topics
00:32 - it teaches you everything on how to make
00:33 - a game starting completely from scratch
00:35 - until the final polished game
00:36 - the lectures are presented as clear
00:38 - step-by-step tutorials just like my
00:39 - normal videos
00:40 - it teaches you how to make a building
00:42 - system resource management nmei worm
00:44 - building post processing polish and much
00:46 - much more
00:47 - so if you're looking for a guided
00:48 - step-by-step course making a complete
00:50 - game from start to finish then check the
00:51 - link in the description to pick up the
00:53 - course
00:54 - okay so here let's make a nice building
00:56 - system now the goal is to be able
00:58 - to click on the world and place a
00:59 - building on the mouse position
01:01 - so let's start off by making a new
01:02 - c-sharp script
01:04 - name it our building manager and let's
01:07 - make an empty game object
01:08 - name it the same thing and attach the
01:11 - script onto
01:12 - it okay now here we want to spawn a
01:14 - building on the mouse click so let's
01:16 - first make a simple private void update
01:19 - and we'll listen to input get mouse
01:21 - button down
01:22 - then here it takes the button so let's
01:24 - put 0 for the left mouse button
01:27 - all right so we press the left mouse
01:28 - button and now in here we want to spawn
01:30 - it on top of the mouse we're on position
01:32 - so we need to get the mouse position and
01:34 - that we can get from the utilities which
01:36 - is obviously can grab for free from
01:37 - unitycodemonkey.com
01:39 - so using codemonkey.utils and down here
01:42 - we just
01:42 - access the utilities class and get the
01:44 - mouse on position
01:46 - here is the function in case you want to
01:47 - make it yourself so all it really does
01:49 - is it takes the main camera does the
01:51 - screen to our own point
01:52 - on the input.mouse input.mouseposition
01:53 - so it does that and we've got the mouse
01:55 - one position
01:56 - all right so this is a vector3 for the
01:58 - mouse we're on position
02:01 - and now here we want to spawn a building
02:02 - so we're going to instantiate a building
02:04 - prefab
02:04 - let's go up here to add a film for it so
02:07 - make it a serialized field so we can set
02:09 - it in the editor
02:10 - of a transform and let's get the pf
02:13 - wood harvester so we get that field and
02:17 - in here we can instantiate
02:19 - instantiate that one on the model's
02:20 - world position and without any rotation
02:23 - so quaternion.identity
02:25 - all right so we have our very simple
02:27 - script let's test here in the editor
02:29 - just drag the prefab reference and hit
02:31 - play
02:32 - okay here we are and click and yep there
02:34 - you go it spawned indeed our prefab so
02:36 - wherever i click i spawn the pre-file
02:38 - right on the mouse or position
02:39 - all right awesome okay so now that we
02:41 - can click to place down a building let's
02:43 - look into placing different types
02:45 - now for defining the type of building
02:46 - we're going to use scriptable objects
02:48 - i cover them in detail in another video
02:50 - so check that out for a more in-depth
02:52 - look
02:52 - essentially scriptable objects allow you
02:54 - to create assets in your project files
02:56 - to contain any data that you want
02:58 - we're going to use it to define the
02:59 - various building types this is also the
03:01 - same method that i use in the complete
03:03 - course so let's make our scriptable
03:05 - object just create a new c-sharp script
03:07 - name this the building type so so for
03:11 - scriptable object
03:13 - okay and now in here we get rid of mono
03:14 - behavior and instead we extend
03:16 - scriptable object
03:19 - so you do that and now in here we can
03:20 - define any data that we want
03:22 - in this case all we want is to define a
03:24 - field for the building prefound
03:26 - so if only transform for the prefab okay
03:29 - so that's all the data we want for now
03:31 - and then let's create a create asset
03:33 - menu so that we can actually create our
03:35 - asset
03:37 - again if you want to learn more about
03:38 - scriptable objects go check out that
03:40 - other video link in the description
03:41 - alright so back in the editor let's make
03:44 - a new folder for our building types so a
03:46 - new folder for the building types
03:49 - and now inside let's right click go into
03:51 - create and yep we have our building type
03:52 - scriptable object
03:54 - so just click on it name this the wood
03:56 - harvester
03:57 - and there you go we have the prefab and
03:59 - over here just drag that reference
04:01 - all right so now i'm just going to make
04:02 - all the other ones
04:06 - alright so that's it all of our various
04:07 - types of scriptable objects each of them
04:09 - with a different data
04:11 - okay so far so good now we need to
04:12 - decide which type we want to place so
04:14 - let's go back into the building manager
04:17 - and in here let's have the building type
04:19 - scriptable object field for the active
04:21 - building type so a private
04:23 - building type so for the active building
04:26 - type
04:28 - and then down here instead of grabbing
04:29 - from this testing we can get rid of that
04:31 - one
04:32 - instead we go in there and we access the
04:33 - prefab okay so that should do it
04:35 - now let's also make this a serialized
04:37 - field so we can set the starting one in
04:39 - the editor
04:40 - and let's test okay we have our field
04:43 - and for example let's drag the tower
04:45 - and hit play okay here we are on click
04:47 - and if there you go we can still place
04:48 - an object but now it
04:49 - grabs the prefab from the scriptable
04:51 - object and if i pause the scene
04:53 - and in here swap out the active building
04:55 - type let's say select the hq
04:57 - and then unpause the scene and i'll
04:59 - click on it and if there you go now
05:01 - spawn a different building
05:02 - so you can see how useful several
05:04 - objects are all we need to do is really
05:06 - just change that film then we change
05:07 - what building we spawn
05:08 - okay so all we need to do is some way of
05:10 - selecting which type we want to build
05:12 - so for that let's make some buttons up
05:14 - here i have my normal ui canvas
05:17 - so first let's make a new game object
05:19 - name this the building type
05:21 - select ui and let's stretch it to occupy
05:25 - the whole thing
05:25 - so stretching zero zero zero okay now
05:28 - inside let's make a button
05:29 - so first make an empty game object for
05:31 - the container for the button
05:33 - then on this container let's add the
05:34 - button component
05:36 - and for now let's not change anything
05:38 - then inside let's add a ui
05:40 - image this will be our background and i
05:43 - have a simple button background texture
05:45 - okay let's make it stretch to occupy the
05:48 - whole parent all right
05:49 - next let's duplicate this for our image
05:52 - and this one will be the image on the
05:53 - button
05:54 - so for example down here select the wood
05:55 - harvester and make it a tiny bit smaller
05:58 - and make sure we preserve the aspect
06:04 - ratio
06:07 - all right so we have our single button
06:09 - now let's name the object to the
06:11 - building button template
06:13 - and on this one let's anchor it on the
06:16 - lower left corner
06:18 - and let's put it almost in there okay so
06:20 - that looks good and there it is in there
06:22 - now the reason why i gave it this name
06:23 - is because we're going to work with it
06:25 - as a template
06:26 - meaning we are going to duplicate this
06:28 - button to spawn as many times as we want
06:30 - so let's make the script to handle this
06:31 - window so make an esc sharp script
06:35 - for the building type select ui and here
06:37 - just rag script okay
06:39 - now in here let's dynamically build all
06:41 - of our buttons
06:42 - so first we need to know what buttons we
06:43 - want to build so let's start off by
06:46 - making a
06:47 - list of all of our building type so
06:50 - so building type so list so we have the
06:53 - list of all the building types and let's
06:55 - make this a serialized field so we set
06:56 - it in the editor
06:58 - and back in the editor we have the list
07:00 - and let's just drag all of them
07:02 - so let's drag all of them and put them
07:04 - in order so first the wood
07:05 - then the stone then the gold then the
07:08 - tower and then the hq
07:09 - all right we have our next list now here
07:11 - just do a private void awake
07:13 - and on the way let's cycle through our
07:14 - list
07:18 - and now in the list we want to duplicate
07:19 - the template so let's first grab it
07:24 - so we grab it and now let's first hide
07:27 - it so that the original template is
07:28 - hidden so this one gameobject.active
07:31 - into false
07:33 - okay so this is the original template
07:35 - and then down here we call instantiate
07:37 - and we're going to instantiate the
07:39 - original template
07:40 - instantiate onto this parent and this is
07:43 - the new building
07:44 - button then with it the first thing that
07:47 - we do
07:47 - is game object set active into true
07:51 - and now we need to position them so
07:53 - let's go into this
07:54 - building button transform get the
07:56 - component of type rect
07:58 - transform and we're going to modify the
08:00 - anchor position
08:02 - and now here let's shift it to the right
08:03 - for each of them so let's keep track of
08:05 - the simple index
08:09 - so we've got our index we cycle through
08:11 - at the end we increase the index
08:13 - and in here let's simply always move it
08:15 - to the right so do
08:16 - pause equals on the index times a
08:19 - certain size let's try out just with
08:20 - something like 60.
08:22 - so every single building type will be
08:24 - shifted to the right by 60 units
08:26 - okay so that handles the position next
08:28 - we need a sprite for this button so
08:30 - let's first
08:31 - find our image and we get the component
08:34 - of type
08:35 - image which is up here using unity
08:38 - engine.ui
08:41 - so we get the image and then we set the
08:42 - sprites and now here we need the sprite
08:44 - for this button
08:45 - so we're going to grab it from the
08:46 - building type as so
08:49 - and then we need to grab a sprite so
08:51 - let's go to the definition to add it
08:52 - so here it is scriptable object we have
08:54 - the prefab and now we publish for the
08:56 - sprite for the actual building sprite
08:59 - all right now let's just set this field
09:01 - on all of them so here it is we've got
09:03 - that field and just click and select the
09:05 - sprite
09:06 - and there you go same thing for all of
09:07 - them
09:12 - all right they all have the sprites and
09:14 - the last thing that we need to add is
09:15 - just the click behavior
09:17 - so for that we go into the transform we
09:19 - get the component of type button
09:22 - and then we go into the click
09:25 - and we add in listener
09:28 - okay so let's add a listener now in here
09:30 - i'm using a anonymous lambda expression
09:33 - now if you're not familiar with them
09:34 - then go check out the video on delegates
09:37 - essentially this is a function with no
09:38 - parameters and then in here we have our
09:40 - code body
09:41 - so when we click on this button then
09:43 - this is going to run and what we want to
09:44 - do is simply select
09:46 - this building time for construction so
09:48 - here let's also add a reference
09:50 - to the building manager so serialize
09:51 - field for the building
09:53 - manager okay we have that reference
09:56 - let's set it in the editor
09:57 - so there it is and just drag this game
09:59 - object okay good
10:01 - and now in here we want to tell the
10:03 - building manager to use this specific
10:05 - type
10:05 - so let's make a function to receive that
10:07 - so over here let's make a public void
10:09 - set
10:10 - active building type and we'll receive a
10:12 - building type
10:13 - so and we simply set the active building
10:17 - type to this building type
10:19 - alright so that's it and back in here we
10:21 - just go into the building manager
10:23 - and we call set the active building type
10:25 - and pass in this building type
10:28 - okay so that's really it let's test okay
10:30 - so here we are and by
10:32 - default if i click it should place a
10:33 - wood harvester so click
10:35 - yeah there you go it does work now down
10:37 - here we have the buttons let's click on
10:38 - this one to select the stone harvester
10:40 - so click
10:41 - and right away we have the issue that
10:42 - it's placing a building through the ui
10:44 - but let's ignore that for now
10:45 - so now it should be selecting the stone
10:47 - harvester and if i click
10:48 - if there you go it did spawn down now
10:50 - you're here select the gold and spawn
10:52 - down
10:52 - slide the tower and spawn down select hq
10:54 - and spawn that one
10:56 - all right so with this we can now select
10:58 - which building type we want to build
10:59 - awesome now let's just quickly add a
11:01 - visual for the selected type
11:03 - so over here on the button template
11:05 - let's duplicate the background called
11:07 - the selected
11:08 - and now inside select this other sprite
11:11 - so i have in here just a white outline
11:13 - and let's just put it just on white okay
11:16 - so that looks good
11:17 - now back in the code let's make a
11:18 - function to update the selected visual
11:21 - so private void update selected visual
11:25 - and now in here what we do is we cycle
11:27 - through all the buttons
11:28 - so for that we need to keep track of the
11:30 - references that we are constructing in
11:32 - here
11:32 - so let's store them in a dictionary
11:40 - so we've got dictionary and in here we
11:42 - initialize dictionary
11:43 - and then down here we set dictionary on
11:45 - the key for this building type
11:47 - we set it to this building button
11:49 - transform
11:51 - all right so now we have the dictionary
11:53 - of our buttons and then down here we
11:55 - simply cycle through it
12:00 - we second through all the keys we access
12:02 - the building button dictionary on this
12:05 - particular team
12:07 - then we find the selected child
12:12 - and we get the game object.active into
12:14 - false
12:15 - so first we hide all of them and then
12:17 - all we need to do is set the active one
12:19 - to be
12:20 - active so let's expose that in the
12:21 - building manager so in here just a
12:24 - public attorney building type so get the
12:26 - active building type
12:29 - and just return the active building type
12:30 - okay and now here just go into the
12:33 - building manager
12:35 - in order to get the active building type
12:42 - so we get the active building tab and
12:43 - set the selected back into visible
12:45 - all right now all we need to do is call
12:47 - this function so let's make a private
12:49 - void start
12:50 - and on start we update the visual and
12:52 - then in here after we click select the
12:54 - building let's also
12:55 - update okay so that's it very simple now
12:58 - let's test
12:59 - so here and right now the wood harvester
13:01 - selected now click on this one yep that
13:02 - one is selected now that one now that
13:04 - one and that one
13:05 - so the stone harvest is selected and if
13:07 - i click if there you go it does place a
13:08 - stone harvester
13:09 - all right so it's working now let's fix
13:11 - the issue with clicking through the ui
13:14 - so the thing is over here on the
13:15 - building manager all we're testing is if
13:17 - the input dot get mouse button if the
13:18 - mouse button is down
13:20 - so if so then we are spawning now we
13:22 - need to make sure that mouse button is
13:23 - down
13:24 - and it is not on top of the ui so for
13:26 - that we can add a
13:28 - using unity engine.event systems
13:32 - and then we can access the event system
13:37 - in order to grab the current event
13:39 - system and then we have the function
13:41 - is pointer over game object
13:44 - so we're only going to spawn if the
13:45 - mouse button is down and it is not
13:48 - over a game object so that's all we need
13:50 - let's test
13:51 - okay so here we are and if i click on
13:52 - the button if there you go it does not
13:54 - spawn a building so the clicks are no
13:56 - longer going through the buttons
13:57 - so i can select this one and place it on
13:59 - harvester selected and place that one
14:01 - and place that
14:02 - one and place that one and yep
14:03 - everything works all right awesome
14:05 - now just for fun let's add a visual and
14:07 - a simple construction timer
14:09 - so over here i've got two types of
14:10 - prefabs so there's the
14:12 - normal buildings that have already been
14:14 - built and there's these ones which are
14:15 - going through construction
14:17 - so let's use these ones instead first on
14:19 - the building type definition
14:20 - let's add another transform this will be
14:22 - the construction prefab
14:25 - and here let's set all the references
14:30 - okay they're all set and in here on the
14:32 - building manager when we instantiate
14:34 - instead of instantiating the prefab
14:35 - let's instantiate just the construction
14:37 - prefab all right so just like this we
14:39 - should be instantiating a different
14:40 - prefab
14:41 - let's see here we are in click and if
14:43 - there you go there's the building being
14:44 - constructed
14:45 - it's using the super awesome
14:46 - construction shader and gets built
14:48 - slowly over time
14:49 - and as soon as it's done some particles
14:51 - and spawns the final buildup now i cover
14:53 - the construction shader in detail in
14:54 - another video so check the link in the
14:56 - description to learn more
14:57 - it was funny made in shadowgraph and
14:58 - it's super adaptable you can modify the
15:01 - number of segments for example that one
15:02 - is slowly printing with 10 segments
15:05 - but if i go over here on the material
15:06 - and let's change from 10 segments to
15:09 - 30 and now spawn and yet there you go
15:12 - now it's printing a lot faster a lot
15:13 - more segments
15:14 - so it's a really awesome shader and go
15:16 - check out the other video to see how it
15:17 - all works so here is the construction
15:19 - prefab which as you can see is just a
15:21 - simple sprite using that material which
15:23 - uses that custom shader
15:24 - and then just has a simple construction
15:26 - script so here it is just has a film for
15:28 - the constructed building prefab
15:30 - another one for the particles then a
15:32 - simple timer
15:33 - and on update it's constantly increasing
15:35 - the timer it's setting a property on
15:37 - that material shader
15:38 - and once it's passed a certain amount
15:40 - then it instantiates the particles as
15:42 - well as the final building prefab
15:44 - so a very simple script just to spawn a
15:45 - building after a certain amount of time
15:47 - okay so with this we added a nice fun
15:49 - visual for our buildings
15:50 - so they get nicely constructed and after
15:53 - a while yep there you go they get done
15:55 - and the buildings are spawn alright
15:56 - great
15:57 - now let's also add some rules so right
15:59 - now we can for example spawn buildings
16:01 - right on top of each other
16:02 - that is obviously not meant to work like
16:04 - that so let's fix it the way we're going
16:06 - to fix that is by using the physics
16:07 - system
16:08 - so the first thing we need is to add a
16:10 - collider to all of our buildings so
16:11 - let's go for example inside the wood
16:13 - harvester
16:13 - here it is and on the parent game object
16:15 - just add a simple box collider 2d
16:17 - and just set the widget in order to
16:19 - occupy the whole thing
16:20 - okay so there it is so this is the area
16:22 - that will be occupied by this building
16:24 - now i need to do is just apply this to
16:26 - all the prefabs
16:32 - and also apply to the construction
16:34 - prefabs
16:38 - all right so all the objects have their
16:40 - collectors now let's go into the
16:41 - building manager
16:42 - and here let's make a function test if
16:44 - we can spawn
16:46 - so a private ball can spawn building
16:49 - and receives a building type so for the
16:51 - building that we want to spawn
16:54 - then we also get a vector 3 for the
16:56 - position where we want to spawn
16:58 - now in order to test if we can spawn we
16:59 - need to first test that this position
17:01 - is clear however we need to test more
17:03 - than a single point since the building
17:04 - itself has a shape
17:05 - so for that we can go into the building
17:07 - type so
17:08 - in order to find the construction prefab
17:11 - and then we do get component of type box
17:13 - collated 2d
17:17 - okay so we have the building box
17:19 - collider next we go into the
17:22 - physics 2d and here we can access the
17:24 - function
17:25 - overlap box so this one will test if a
17:28 - certain box would overlap with any
17:30 - objects in our world
17:31 - so now we just need the point and the
17:33 - point will be this position where we
17:34 - want to spawn
17:36 - plus whatever offset the box collider
17:38 - has so the bounding box will either
17:40 - and we access the offset then we need
17:42 - the size
17:43 - so the building blocks converter access
17:45 - the size and lastly the angle we don't
17:47 - want any rotation so just put it at zero
17:50 - and in here we cannot combine a vector
17:52 - three with a vector two so just convert
17:53 - this one into a vector three
17:56 - all right so that's it now this one
17:57 - returns a collated 2d
17:59 - so it's going to return something if the
18:01 - space is occupied so
18:03 - if this returns something different from
18:05 - null
18:06 - then the space is occupied so we return
18:08 - false
18:10 - if it is not then that means that it is
18:12 - known so this space is empty so return
18:14 - true
18:16 - all right so that's it and all we need
18:17 - to do is go all the way up here
18:19 - so we test left mouse button down test
18:21 - not over the ui
18:23 - and then we test if we can spawn a
18:24 - building pass in the active building
18:26 - type
18:27 - then pass in the miles we're on position
18:31 - and if we can't spawn the building then
18:32 - we spawn the dome
18:34 - all right that's it let's test okay so
18:37 - here on let's place
18:38 - and yep it'll work now let's place
18:39 - another one on top of it and nope cannot
18:41 - do it this position is now occupied
18:44 - and if i place it right outside of the
18:45 - collider nope still doesn't work because
18:48 - it's not testing just for the mouse
18:49 - position rather the shape that i'm
18:50 - trying to build
18:51 - so i need to go a bit more to the side
18:53 - and if there you go now it does place
18:54 - one next to it
18:55 - all right so we added a very simple rule
18:57 - to not place buildings on top of each
18:58 - other great
19:00 - now over here i also have a simple rock
19:02 - and a simple tree sprite
19:04 - they also have collectors so they should
19:05 - work to block buildings from being
19:06 - placed on top of them
19:08 - so i'm just going to populate the world
19:10 - with a bunch of these
19:21 - all right now let's test and see if they
19:23 - work okay so here i am in the world and
19:25 - now if i click on top of the
19:27 - stone no there you go can i place and
19:29 - see how it is occupied i need to place
19:31 - around it
19:31 - and if there you go in there it's a
19:32 - valid position same thing over here so
19:35 - just select something
19:36 - try to click it nope can't do it gotta
19:37 - go to the side and yep now it works
19:39 - all right so here we have added the rule
19:41 - that we cannot spawn on top of an object
19:43 - it needs to be placed on clear ground
19:45 - right awesome now let's have another
19:47 - room where the buildings cannot be
19:48 - insanely far from something else so for
19:50 - example when making an
19:52 - rts game you usually cannot place a
19:53 - building here and go all the way to the
19:55 - edge of the map and place another one in
19:56 - there
19:57 - so let's add that here in the building
20:00 - manager it's very simple
20:01 - we just have that new role over here on
20:03 - the same can building function
20:04 - first let's rename our overlap box here
20:06 - to make the code more clear
20:08 - so let's define a bowl for is area clear
20:13 - and we set it to this so we have ball is
20:15 - area clear
20:16 - and we do an overlap box and the area
20:18 - will be clear if this one returns null
20:20 - and then here if not is area clear so if
20:23 - the area is not clear then return false
20:26 - all right otherwise we keep going in
20:28 - here then we add our second rule
20:31 - and what we want to do is test to make
20:32 - sure that there's a building within
20:34 - range
20:35 - so for that instead of the overlap box
20:37 - we can do a physics 2d
20:39 - and use the overlap circle so this is
20:42 - pretty much the same thing
20:43 - except it just takes a point and a
20:44 - radius we can use our position as the
20:47 - point and now for the radius let's
20:49 - define a float for the max
20:50 - building radius and let's put some value
20:55 - okay so now this one will return a
20:57 - collider if there is one
20:58 - within this radius of this position
21:01 - however
21:01 - for this one we're going to have to
21:03 - validate and see which objects are
21:05 - inside of this radius
21:06 - so instead of this version which just
21:08 - returns the first object
21:09 - we're going to use the overlap circle
21:11 - all which returns
21:13 - all of the objects within range so let's
21:16 - store them
21:18 - and then we second through it and now
21:21 - here we need to test and see if any of
21:23 - them is a building
21:24 - so in order to identify let's add a
21:26 - simple building script to all the
21:27 - buildings
21:28 - so for that let's just make a uc sharp
21:30 - script name it a
21:32 - building and let's leave the script
21:34 - completely empty we're essentially just
21:35 - using this as a tag
21:37 - so just go into all the building prefabs
21:40 - and attach the building script okay now
21:42 - here we second through all of them then
21:44 - we go into this collector and we call
21:46 - git component
21:48 - and you try to get the building
21:49 - component
21:51 - so we test if it does not return null if
21:53 - it is not known then this one has a
21:55 - building
21:56 - so if it has a building then that means
21:59 - there's a valid building within range so
22:00 - we return true and we can build
22:03 - and if we get all the way down here then
22:04 - we did not find any building within
22:06 - range so just return false
22:08 - all right so that's pretty much it
22:10 - however with this you can already
22:11 - imagine that we have a problem
22:13 - which is in order to place on a building
22:15 - we must have a building within range
22:17 - so that means that we have no star
22:19 - building then we can never place
22:20 - anything
22:21 - so to solve that let's simply start off
22:22 - with a starter building so let's just
22:24 - use the hq put it on zero zero
22:27 - and there you go this is our starter
22:28 - build now let's test
22:30 - okay so here we are and right away let's
22:32 - try moving all the way over here and try
22:34 - to click
22:34 - and nope cannot do it i cannot place it
22:36 - in there since it's way too far from the
22:38 - actual building that we have
22:39 - however if i try to place it a bit
22:41 - closer say around here click and if
22:43 - there you go it does work
22:44 - so if i try to place it way too far can
22:46 - do it and if i want to reach there then
22:47 - i simply have to place various buildings
22:49 - until i get there
22:54 - so just place buildings every certain
22:56 - amount of space and if i click
22:58 - yep there you go now i can place it in
22:59 - there so with this we added a rule for
23:02 - an expanding building area just like you
23:03 - see in many rts games
23:05 - so we have added yet another very
23:07 - important base building room all right
23:08 - awesome
23:09 - okay so over here we have our fully
23:11 - functioning building system
23:12 - we can use these buttons to select which
23:14 - building type we want to construct
23:16 - then when we place down a building we
23:18 - can see it being constructed with this
23:19 - awesome shader effect
23:21 - and when the construction is done the
23:22 - final building gets actually spawned
23:25 - and we added rules to our building
23:26 - placement so naturally they cannot be
23:28 - spawned on top of each other or on top
23:30 - of objects
23:31 - and they also cannot be spawned way too
23:33 - far away from each other
23:34 - and as you can see this building system
23:36 - is not based on any underlying grid
23:37 - so it's a really nice freeform system
23:39 - allowing you to build bases and cities
23:41 - in any shape you want
23:43 - so here it is a really nice bailey's
23:44 - building system that you can expand upon
23:46 - to make an
23:47 - rds or a city builder or any genre that
23:49 - involves placing down buildings
23:51 - now like i said what we built here is a
23:53 - more simplified version of what i cover
23:54 - in the course
23:55 - in there i go into a lot more detail
23:57 - onto these various elements like the
23:59 - building type scriptable object the ui
24:01 - elements the rules for replacement the
24:02 - building construction and so on
24:04 - so if you want to see a step-by-step
24:06 - guide on how to make a complete game
24:07 - from start to finish check out the
24:09 - complete course link in the description
24:10 - if you found this video helpful consider
24:12 - liking and subscribing this video is
24:14 - made possible thanks to these awesome
24:15 - supporters
24:16 - go to patreon.com unitycodemonkey to get
24:19 - some perks and help keep the videos free
24:21 - for everyone
24:22 - as long as you can download the project
24:23 - files and utilities from
24:24 - unitycodemuck.com
24:25 - subscribe to the channel for more ent
24:27 - tutorials posting questions having
24:29 - comments and i'll see you next time
24:32 - [Music]

Cleaned transcript:

in this video we're going to look how to make a simple building system in order to place down buildings in the world this is a freeform system so you don't need any kind of underlying grid just select the building type and click to place let's begin all right so let's look at how to implement a really nice building system now what we're going to do here is similar but more simplified version to what i cover in depth in my complete builder defender course the course is 10 hours long with over 15 lectures lastly organized into distinct topics it teaches you everything on how to make a game starting completely from scratch until the final polished game the lectures are presented as clear stepbystep tutorials just like my normal videos it teaches you how to make a building system resource management nmei worm building post processing polish and much much more so if you're looking for a guided stepbystep course making a complete game from start to finish then check the link in the description to pick up the course okay so here let's make a nice building system now the goal is to be able to click on the world and place a building on the mouse position so let's start off by making a new csharp script name it our building manager and let's make an empty game object name it the same thing and attach the script onto it okay now here we want to spawn a building on the mouse click so let's first make a simple private void update and we'll listen to input get mouse button down then here it takes the button so let's put 0 for the left mouse button all right so we press the left mouse button and now in here we want to spawn it on top of the mouse we're on position so we need to get the mouse position and that we can get from the utilities which is obviously can grab for free from unitycodemonkey.com so using codemonkey.utils and down here we just access the utilities class and get the mouse on position here is the function in case you want to make it yourself so all it really does is it takes the main camera does the screen to our own point on the input.mouse input.mouseposition so it does that and we've got the mouse one position all right so this is a vector3 for the mouse we're on position and now here we want to spawn a building so we're going to instantiate a building prefab let's go up here to add a film for it so make it a serialized field so we can set it in the editor of a transform and let's get the pf wood harvester so we get that field and in here we can instantiate instantiate that one on the model's world position and without any rotation so quaternion.identity all right so we have our very simple script let's test here in the editor just drag the prefab reference and hit play okay here we are and click and yep there you go it spawned indeed our prefab so wherever i click i spawn the prefile right on the mouse or position all right awesome okay so now that we can click to place down a building let's look into placing different types now for defining the type of building we're going to use scriptable objects i cover them in detail in another video so check that out for a more indepth look essentially scriptable objects allow you to create assets in your project files to contain any data that you want we're going to use it to define the various building types this is also the same method that i use in the complete course so let's make our scriptable object just create a new csharp script name this the building type so so for scriptable object okay and now in here we get rid of mono behavior and instead we extend scriptable object so you do that and now in here we can define any data that we want in this case all we want is to define a field for the building prefound so if only transform for the prefab okay so that's all the data we want for now and then let's create a create asset menu so that we can actually create our asset again if you want to learn more about scriptable objects go check out that other video link in the description alright so back in the editor let's make a new folder for our building types so a new folder for the building types and now inside let's right click go into create and yep we have our building type scriptable object so just click on it name this the wood harvester and there you go we have the prefab and over here just drag that reference all right so now i'm just going to make all the other ones alright so that's it all of our various types of scriptable objects each of them with a different data okay so far so good now we need to decide which type we want to place so let's go back into the building manager and in here let's have the building type scriptable object field for the active building type so a private building type so for the active building type and then down here instead of grabbing from this testing we can get rid of that one instead we go in there and we access the prefab okay so that should do it now let's also make this a serialized field so we can set the starting one in the editor and let's test okay we have our field and for example let's drag the tower and hit play okay here we are on click and if there you go we can still place an object but now it grabs the prefab from the scriptable object and if i pause the scene and in here swap out the active building type let's say select the hq and then unpause the scene and i'll click on it and if there you go now spawn a different building so you can see how useful several objects are all we need to do is really just change that film then we change what building we spawn okay so all we need to do is some way of selecting which type we want to build so for that let's make some buttons up here i have my normal ui canvas so first let's make a new game object name this the building type select ui and let's stretch it to occupy the whole thing so stretching zero zero zero okay now inside let's make a button so first make an empty game object for the container for the button then on this container let's add the button component and for now let's not change anything then inside let's add a ui image this will be our background and i have a simple button background texture okay let's make it stretch to occupy the whole parent all right next let's duplicate this for our image and this one will be the image on the button so for example down here select the wood harvester and make it a tiny bit smaller and make sure we preserve the aspect ratio all right so we have our single button now let's name the object to the building button template and on this one let's anchor it on the lower left corner and let's put it almost in there okay so that looks good and there it is in there now the reason why i gave it this name is because we're going to work with it as a template meaning we are going to duplicate this button to spawn as many times as we want so let's make the script to handle this window so make an esc sharp script for the building type select ui and here just rag script okay now in here let's dynamically build all of our buttons so first we need to know what buttons we want to build so let's start off by making a list of all of our building type so so building type so list so we have the list of all the building types and let's make this a serialized field so we set it in the editor and back in the editor we have the list and let's just drag all of them so let's drag all of them and put them in order so first the wood then the stone then the gold then the tower and then the hq all right we have our next list now here just do a private void awake and on the way let's cycle through our list and now in the list we want to duplicate the template so let's first grab it so we grab it and now let's first hide it so that the original template is hidden so this one gameobject.active into false okay so this is the original template and then down here we call instantiate and we're going to instantiate the original template instantiate onto this parent and this is the new building button then with it the first thing that we do is game object set active into true and now we need to position them so let's go into this building button transform get the component of type rect transform and we're going to modify the anchor position and now here let's shift it to the right for each of them so let's keep track of the simple index so we've got our index we cycle through at the end we increase the index and in here let's simply always move it to the right so do pause equals on the index times a certain size let's try out just with something like 60. so every single building type will be shifted to the right by 60 units okay so that handles the position next we need a sprite for this button so let's first find our image and we get the component of type image which is up here using unity engine.ui so we get the image and then we set the sprites and now here we need the sprite for this button so we're going to grab it from the building type as so and then we need to grab a sprite so let's go to the definition to add it so here it is scriptable object we have the prefab and now we publish for the sprite for the actual building sprite all right now let's just set this field on all of them so here it is we've got that field and just click and select the sprite and there you go same thing for all of them all right they all have the sprites and the last thing that we need to add is just the click behavior so for that we go into the transform we get the component of type button and then we go into the click and we add in listener okay so let's add a listener now in here i'm using a anonymous lambda expression now if you're not familiar with them then go check out the video on delegates essentially this is a function with no parameters and then in here we have our code body so when we click on this button then this is going to run and what we want to do is simply select this building time for construction so here let's also add a reference to the building manager so serialize field for the building manager okay we have that reference let's set it in the editor so there it is and just drag this game object okay good and now in here we want to tell the building manager to use this specific type so let's make a function to receive that so over here let's make a public void set active building type and we'll receive a building type so and we simply set the active building type to this building type alright so that's it and back in here we just go into the building manager and we call set the active building type and pass in this building type okay so that's really it let's test okay so here we are and by default if i click it should place a wood harvester so click yeah there you go it does work now down here we have the buttons let's click on this one to select the stone harvester so click and right away we have the issue that it's placing a building through the ui but let's ignore that for now so now it should be selecting the stone harvester and if i click if there you go it did spawn down now you're here select the gold and spawn down slide the tower and spawn down select hq and spawn that one all right so with this we can now select which building type we want to build awesome now let's just quickly add a visual for the selected type so over here on the button template let's duplicate the background called the selected and now inside select this other sprite so i have in here just a white outline and let's just put it just on white okay so that looks good now back in the code let's make a function to update the selected visual so private void update selected visual and now in here what we do is we cycle through all the buttons so for that we need to keep track of the references that we are constructing in here so let's store them in a dictionary so we've got dictionary and in here we initialize dictionary and then down here we set dictionary on the key for this building type we set it to this building button transform all right so now we have the dictionary of our buttons and then down here we simply cycle through it we second through all the keys we access the building button dictionary on this particular team then we find the selected child and we get the game object.active into false so first we hide all of them and then all we need to do is set the active one to be active so let's expose that in the building manager so in here just a public attorney building type so get the active building type and just return the active building type okay and now here just go into the building manager in order to get the active building type so we get the active building tab and set the selected back into visible all right now all we need to do is call this function so let's make a private void start and on start we update the visual and then in here after we click select the building let's also update okay so that's it very simple now let's test so here and right now the wood harvester selected now click on this one yep that one is selected now that one now that one and that one so the stone harvest is selected and if i click if there you go it does place a stone harvester all right so it's working now let's fix the issue with clicking through the ui so the thing is over here on the building manager all we're testing is if the input dot get mouse button if the mouse button is down so if so then we are spawning now we need to make sure that mouse button is down and it is not on top of the ui so for that we can add a using unity engine.event systems and then we can access the event system in order to grab the current event system and then we have the function is pointer over game object so we're only going to spawn if the mouse button is down and it is not over a game object so that's all we need let's test okay so here we are and if i click on the button if there you go it does not spawn a building so the clicks are no longer going through the buttons so i can select this one and place it on harvester selected and place that one and place that one and place that one and yep everything works all right awesome now just for fun let's add a visual and a simple construction timer so over here i've got two types of prefabs so there's the normal buildings that have already been built and there's these ones which are going through construction so let's use these ones instead first on the building type definition let's add another transform this will be the construction prefab and here let's set all the references okay they're all set and in here on the building manager when we instantiate instead of instantiating the prefab let's instantiate just the construction prefab all right so just like this we should be instantiating a different prefab let's see here we are in click and if there you go there's the building being constructed it's using the super awesome construction shader and gets built slowly over time and as soon as it's done some particles and spawns the final buildup now i cover the construction shader in detail in another video so check the link in the description to learn more it was funny made in shadowgraph and it's super adaptable you can modify the number of segments for example that one is slowly printing with 10 segments but if i go over here on the material and let's change from 10 segments to 30 and now spawn and yet there you go now it's printing a lot faster a lot more segments so it's a really awesome shader and go check out the other video to see how it all works so here is the construction prefab which as you can see is just a simple sprite using that material which uses that custom shader and then just has a simple construction script so here it is just has a film for the constructed building prefab another one for the particles then a simple timer and on update it's constantly increasing the timer it's setting a property on that material shader and once it's passed a certain amount then it instantiates the particles as well as the final building prefab so a very simple script just to spawn a building after a certain amount of time okay so with this we added a nice fun visual for our buildings so they get nicely constructed and after a while yep there you go they get done and the buildings are spawn alright great now let's also add some rules so right now we can for example spawn buildings right on top of each other that is obviously not meant to work like that so let's fix it the way we're going to fix that is by using the physics system so the first thing we need is to add a collider to all of our buildings so let's go for example inside the wood harvester here it is and on the parent game object just add a simple box collider 2d and just set the widget in order to occupy the whole thing okay so there it is so this is the area that will be occupied by this building now i need to do is just apply this to all the prefabs and also apply to the construction prefabs all right so all the objects have their collectors now let's go into the building manager and here let's make a function test if we can spawn so a private ball can spawn building and receives a building type so for the building that we want to spawn then we also get a vector 3 for the position where we want to spawn now in order to test if we can spawn we need to first test that this position is clear however we need to test more than a single point since the building itself has a shape so for that we can go into the building type so in order to find the construction prefab and then we do get component of type box collated 2d okay so we have the building box collider next we go into the physics 2d and here we can access the function overlap box so this one will test if a certain box would overlap with any objects in our world so now we just need the point and the point will be this position where we want to spawn plus whatever offset the box collider has so the bounding box will either and we access the offset then we need the size so the building blocks converter access the size and lastly the angle we don't want any rotation so just put it at zero and in here we cannot combine a vector three with a vector two so just convert this one into a vector three all right so that's it now this one returns a collated 2d so it's going to return something if the space is occupied so if this returns something different from null then the space is occupied so we return false if it is not then that means that it is known so this space is empty so return true all right so that's it and all we need to do is go all the way up here so we test left mouse button down test not over the ui and then we test if we can spawn a building pass in the active building type then pass in the miles we're on position and if we can't spawn the building then we spawn the dome all right that's it let's test okay so here on let's place and yep it'll work now let's place another one on top of it and nope cannot do it this position is now occupied and if i place it right outside of the collider nope still doesn't work because it's not testing just for the mouse position rather the shape that i'm trying to build so i need to go a bit more to the side and if there you go now it does place one next to it all right so we added a very simple rule to not place buildings on top of each other great now over here i also have a simple rock and a simple tree sprite they also have collectors so they should work to block buildings from being placed on top of them so i'm just going to populate the world with a bunch of these all right now let's test and see if they work okay so here i am in the world and now if i click on top of the stone no there you go can i place and see how it is occupied i need to place around it and if there you go in there it's a valid position same thing over here so just select something try to click it nope can't do it gotta go to the side and yep now it works all right so here we have added the rule that we cannot spawn on top of an object it needs to be placed on clear ground right awesome now let's have another room where the buildings cannot be insanely far from something else so for example when making an rts game you usually cannot place a building here and go all the way to the edge of the map and place another one in there so let's add that here in the building manager it's very simple we just have that new role over here on the same can building function first let's rename our overlap box here to make the code more clear so let's define a bowl for is area clear and we set it to this so we have ball is area clear and we do an overlap box and the area will be clear if this one returns null and then here if not is area clear so if the area is not clear then return false all right otherwise we keep going in here then we add our second rule and what we want to do is test to make sure that there's a building within range so for that instead of the overlap box we can do a physics 2d and use the overlap circle so this is pretty much the same thing except it just takes a point and a radius we can use our position as the point and now for the radius let's define a float for the max building radius and let's put some value okay so now this one will return a collider if there is one within this radius of this position however for this one we're going to have to validate and see which objects are inside of this radius so instead of this version which just returns the first object we're going to use the overlap circle all which returns all of the objects within range so let's store them and then we second through it and now here we need to test and see if any of them is a building so in order to identify let's add a simple building script to all the buildings so for that let's just make a uc sharp script name it a building and let's leave the script completely empty we're essentially just using this as a tag so just go into all the building prefabs and attach the building script okay now here we second through all of them then we go into this collector and we call git component and you try to get the building component so we test if it does not return null if it is not known then this one has a building so if it has a building then that means there's a valid building within range so we return true and we can build and if we get all the way down here then we did not find any building within range so just return false all right so that's pretty much it however with this you can already imagine that we have a problem which is in order to place on a building we must have a building within range so that means that we have no star building then we can never place anything so to solve that let's simply start off with a starter building so let's just use the hq put it on zero zero and there you go this is our starter build now let's test okay so here we are and right away let's try moving all the way over here and try to click and nope cannot do it i cannot place it in there since it's way too far from the actual building that we have however if i try to place it a bit closer say around here click and if there you go it does work so if i try to place it way too far can do it and if i want to reach there then i simply have to place various buildings until i get there so just place buildings every certain amount of space and if i click yep there you go now i can place it in there so with this we added a rule for an expanding building area just like you see in many rts games so we have added yet another very important base building room all right awesome okay so over here we have our fully functioning building system we can use these buttons to select which building type we want to construct then when we place down a building we can see it being constructed with this awesome shader effect and when the construction is done the final building gets actually spawned and we added rules to our building placement so naturally they cannot be spawned on top of each other or on top of objects and they also cannot be spawned way too far away from each other and as you can see this building system is not based on any underlying grid so it's a really nice freeform system allowing you to build bases and cities in any shape you want so here it is a really nice bailey's building system that you can expand upon to make an rds or a city builder or any genre that involves placing down buildings now like i said what we built here is a more simplified version of what i cover in the course in there i go into a lot more detail onto these various elements like the building type scriptable object the ui elements the rules for replacement the building construction and so on so if you want to see a stepbystep guide on how to make a complete game from start to finish check out the complete course link in the description if you found this video helpful consider liking and subscribing this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone as long as you can download the project files and utilities from unitycodemuck.com subscribe to the channel for more ent tutorials posting questions having comments and i'll see you next time
