With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - in this video we're continuing to create
00:03 - a graph in unity we're going to create
00:05 - the in line graph visual object by
00:07 - implementing the object interface so we
00:09 - can later play a graph in real time
00:10 - let's begin
00:14 - so here's our graph it works perfectly
00:17 - fine displays any number of values we
00:19 - give it in the previous video we create
00:21 - the bar chart visual object which is
00:23 - responsible for handling each specific
00:25 - bar the object interface is what we will
00:28 - need in order to update the graph in
00:29 - real-time but before we do that let's
00:32 - apply the interface to the online graph
00:34 - you can see the line graph visual it has
00:36 - a simple dot and it has a connection to
00:38 - the previous dot so let's check out the
00:40 - code so here is the in line graph visual
00:43 - the one big difference from the bar
00:46 - chart is again the connection to the
00:48 - last game object so in our visual object
00:51 - we need to deal with that connection
00:53 - so let's first go down here and make a
00:56 - public class line graph visual object
01:01 - which will implement the i graph visual
01:04 - object interface so in here on the
01:08 - public constructor line graph visual
01:10 - object on the constructor we're going to
01:15 - receive a game object game object which
01:19 - will be d-done game object then we're
01:23 - also going to receive a game object for
01:25 - the dot connection game object and
01:28 - finally a line graph visual object for
01:31 - the last visual object so let's or all
01:36 - of these as member variables all right
01:44 - so let's the only the cleanup since that
01:46 - is a very simple thing to implement so
01:48 - in here a public void cleanup which
01:50 - again if you've seen the last video you
01:53 - know that the graph is a logical
01:55 - interface has the function to set the
01:57 - graph visual object info which contains
01:59 - all the information required to position
02:02 - the dot and the cleanup which is
02:04 - responsible for destroying all of the
02:05 - related game objects so on the cleanup
02:09 - phone we're going to do is destroy first
02:11 - of all the dot game object and then also
02:13 - destroy the dot connection game object
02:16 - ok so cleanup is very simple now let's
02:20 - work on the public void set graphed
02:23 - visual object
02:24 - in it oh and the function which again is
02:28 - defined on the interface has these
02:29 - parameters which are the same that we
02:32 - use when adding a new dot to our graph
02:35 - so in here we want to update the dot
02:38 - game object that we received with these
02:41 - values so let's go up here and see how
02:43 - the dot was created so for downtown we
02:46 - need these the actual position so we
02:48 - need to change the anchor position so
02:50 - let's start by doing that get the anchor
02:53 - position on the dot game objects at the
02:55 - anchored position to the graph position
02:57 - okay so with this set up the one thing
02:59 - we need to do on the interface is go up
03:02 - here on the create gravitational object
03:05 - what I sectionally create a line graph
03:08 - visual object line graphical object
03:10 - equals the new line graphical objects
03:11 - and let's give it the dot game object
03:15 - and then we need the dot connection and
03:18 - the last dot game object so let's go
03:20 - instead of adding it in here let's not
03:22 - down here define the dot connection game
03:26 - object up here settle down there and for
03:32 - the last visual object for now let's
03:34 - just send it as no and then this is what
03:37 - we're going to return from this function
03:40 - okay so let's test so here we are and if
03:43 - I switch to the line graph a yep there
03:45 - it is you can see everything works
03:47 - exactly the same as previously since we
03:49 - are using a common interface all of our
03:51 - graph code already worked correctly so
03:53 - we don't even need to worry about going
03:55 - into the main graph class and dealing
03:58 - with the show where I function that is
03:59 - one of the main benefits of using an
04:01 - interface as long as you implement it
04:02 - all the other code that uses the
04:04 - interface works just fine now the one
04:07 - thing we are currently not updating is
04:09 - the actual connection so right now you
04:11 - can't actually see that problem since it
04:13 - is already correctly set up on
04:15 - construction but if I were to randomly
04:18 - change the value of a point you would
04:19 - see the connection Norwood connects so
04:22 - let's try doing that just to see the
04:23 - error in action so on the way up here we
04:26 - have a graph is no logical is just like
04:28 - that okay so after creating everything
04:31 - on the list
04:32 - me randomly modifying a random one so
04:34 - let's say on index number four I'm going
04:37 - to change it so here I randomly change
04:39 - the value of this point but as you can
04:41 - see the connection did not update the
04:42 - point did update its position but not
04:45 - the connection so let's solve this bug
04:47 - down here on the sacrificial objects
04:50 - info let's update that connection game
04:52 - object now not all of them are going to
04:55 - have connections so the first thing we
04:57 - need to do is make sure we do have a
04:58 - connection so if the data connection
05:00 - game object is different from no then
05:02 - we're going to update it so let's go up
05:05 - here and see how the connection is set
05:07 - up and here you have a connection from
05:09 - position a to position B and this is
05:12 - what we're doing we grab the right
05:14 - transform we count like the direction
05:15 - from A to B we come like the distance
05:18 - between that and we apply to our size
05:20 - Delta and anchor position so let's copy
05:23 - most of this down here so here is the
05:31 - same code for updating our connection
05:33 - now obviously we need to get the dot
05:35 - position B and that position a now that
05:37 - position a won't be this graph position
05:39 - so we can change that for that okay now
05:41 - for the B we need to know the position
05:43 - of the and last visual object so
05:45 - tonight's visual object is of type line
05:47 - graph visual object so down here and
05:50 - let's make another function a public
05:51 - vector - which won't be get grab
05:54 - position essentially this will return
05:58 - the graph position of this visual object
06:00 - which as you can see is set on the rect
06:03 - transform anchor position so that's what
06:05 - we're going to return in here so we are
06:10 - returning the anchored position of this
06:12 - game object so now we can go up here and
06:15 - define the dot position B as the own
06:16 - last visual object dot get the graph
06:20 - position so when updating the graph
06:24 - visual object info first we check if we
06:27 - do have a connection if we do we grab
06:29 - the rect transform we call it the
06:31 - direction between this position to the
06:34 - last original object correct position
06:36 - then we calculate the distance and apply
06:38 - the size Delta anchored and the rotation
06:40 - all right so now let's see if the
06:42 - connection this correctly update to
06:44 - match
06:44 - the new position now the one thing we
06:46 - still need to do is actually send the
06:48 - last regional object so let's go all the
06:50 - way up here so here on the on line graph
06:57 - vision we are storing the unless thought
06:59 - game object
07:00 - but instead of saying that we want to
07:02 - store the last graph visual object so
07:04 - let's make a time line graph visual
07:07 - object this will be the last line graph
07:10 - visual object so we set it by the
07:14 - function know and down here if that one
07:17 - is different from no then you get that
07:19 - one that get the graph position stead of
07:22 - going to the anchor position and here we
07:24 - set the last one to be this line graph
07:28 - visual object and when we create it
07:30 - let's give it the previous last one all
07:32 - right so let's test and see if the
07:34 - connection now correctly matches alright
07:36 - so here it is this is the point that we
07:38 - have modified and you can see the
07:40 - connection from this one to the previous
07:41 - one is indeed correct that one it is
07:43 - correctly calculating the difference
07:45 - this dot used to be down here then it
07:47 - shifted up there and now it correctly
07:48 - connects however as you can see this
07:51 - connection here is not correctly
07:52 - connecting to that dot this is because
07:55 - we have set up the object to handle the
07:56 - connection to the previous dot so when
07:59 - we modify this one it modifies this
08:01 - connection but when we modify this one
08:03 - we also have to notify this object to
08:05 - update this connection so we're going to
08:08 - notify this object when this one changes
08:10 - using an event so here on the align
08:13 - graphical object let's make a public
08:15 - event event handler and let's call it on
08:18 - change graph visual object info and
08:23 - we're going to fire it in here when we
08:24 - set the for a special object so if that
08:27 - one is not known then fire it using this
08:30 - and event or it's not empty okay so
08:33 - whenever we change this object fires an
08:35 - event now that means we can go up here
08:37 - into the constructor and if we do have a
08:40 - last visual object so if the last visual
08:42 - object is different from now so this one
08:44 - is connected to something else
08:46 - so let's subscribe to the last visual
08:48 - object that can change visual object
08:50 - info so this function here won't become
08:53 - doing the previous diet changes which
08:55 - means in here we need to change the
08:57 - connection
08:57 - and the connection only we don't want to
08:59 - call this function directly because that
09:01 - would then fire the event and so on and
09:03 - so on and at the end it would end up
09:04 - updating every single dot so we want to
09:07 - change this code into its own function
09:09 - so here let's make a private void update
09:12 - dot connection
09:14 - and here we're essentially going to copy
09:18 - all this now we're going to call this
09:22 - function in here when we set the
09:24 - original object okay
09:25 - and when the previous one changes let's
09:28 - also update that connection all right so
09:30 - let's test and see if the connection
09:31 - correctly changes between both points
09:33 - all right so here it isn't as you can
09:35 - see both connections are now correctly
09:37 - updating so we modify this point
09:39 - manually and now this connection updates
09:41 - correctly and this one also updates
09:43 - correctly so this object in here was
09:46 - notified when this one changed all right
09:48 - so everything is pretty much working the
09:50 - only thing missing is our tooltip so
09:52 - let's do the same thing with it with the
09:54 - bar chart which is first of all we go up
09:56 - here and we add the button UI component
09:59 - when we actually create the dot game
10:01 - object so in here before we returned at
10:03 - the dot button UI components to the game
10:06 - object okay instead of setting the tone
10:09 - type in here we're going to set it on
10:11 - the set visual object info after
10:14 - updating connection let's also update
10:16 - the filter so grab the button UI for the
10:21 - dot button UI which is based on the dot
10:24 - game object target component type what
10:27 - you want so we are now updating the
10:32 - tooltip that is shown so let's see and
10:34 - if there is the tooltip has been updated
10:37 - it used to show a random value then I
10:39 - updated to show a random string and it
10:42 - did correctly update so we can now
10:44 - easily modify a specific data point
10:46 - change its position it's don't--if and
10:48 - everything else so there you have it we
10:50 - create the in line graph visual object
10:52 - using the previous interface in the next
10:54 - video we're finally going to work on
10:56 - updating the graph in real time as long
10:58 - as you can download the project files in
11:00 - utilities from Unity code monkey comm if
11:02 - you have any questions post them in the
11:04 - comments and I'll do my best answer them
11:05 - subscribe for more videos and I'll see
11:07 - you next time
11:19 - you

Cleaned transcript:

hello and welcome I'm your code monkey in this video we're continuing to create a graph in unity we're going to create the in line graph visual object by implementing the object interface so we can later play a graph in real time let's begin so here's our graph it works perfectly fine displays any number of values we give it in the previous video we create the bar chart visual object which is responsible for handling each specific bar the object interface is what we will need in order to update the graph in realtime but before we do that let's apply the interface to the online graph you can see the line graph visual it has a simple dot and it has a connection to the previous dot so let's check out the code so here is the in line graph visual the one big difference from the bar chart is again the connection to the last game object so in our visual object we need to deal with that connection so let's first go down here and make a public class line graph visual object which will implement the i graph visual object interface so in here on the public constructor line graph visual object on the constructor we're going to receive a game object game object which will be ddone game object then we're also going to receive a game object for the dot connection game object and finally a line graph visual object for the last visual object so let's or all of these as member variables all right so let's the only the cleanup since that is a very simple thing to implement so in here a public void cleanup which again if you've seen the last video you know that the graph is a logical interface has the function to set the graph visual object info which contains all the information required to position the dot and the cleanup which is responsible for destroying all of the related game objects so on the cleanup phone we're going to do is destroy first of all the dot game object and then also destroy the dot connection game object ok so cleanup is very simple now let's work on the public void set graphed visual object in it oh and the function which again is defined on the interface has these parameters which are the same that we use when adding a new dot to our graph so in here we want to update the dot game object that we received with these values so let's go up here and see how the dot was created so for downtown we need these the actual position so we need to change the anchor position so let's start by doing that get the anchor position on the dot game objects at the anchored position to the graph position okay so with this set up the one thing we need to do on the interface is go up here on the create gravitational object what I sectionally create a line graph visual object line graphical object equals the new line graphical objects and let's give it the dot game object and then we need the dot connection and the last dot game object so let's go instead of adding it in here let's not down here define the dot connection game object up here settle down there and for the last visual object for now let's just send it as no and then this is what we're going to return from this function okay so let's test so here we are and if I switch to the line graph a yep there it is you can see everything works exactly the same as previously since we are using a common interface all of our graph code already worked correctly so we don't even need to worry about going into the main graph class and dealing with the show where I function that is one of the main benefits of using an interface as long as you implement it all the other code that uses the interface works just fine now the one thing we are currently not updating is the actual connection so right now you can't actually see that problem since it is already correctly set up on construction but if I were to randomly change the value of a point you would see the connection Norwood connects so let's try doing that just to see the error in action so on the way up here we have a graph is no logical is just like that okay so after creating everything on the list me randomly modifying a random one so let's say on index number four I'm going to change it so here I randomly change the value of this point but as you can see the connection did not update the point did update its position but not the connection so let's solve this bug down here on the sacrificial objects info let's update that connection game object now not all of them are going to have connections so the first thing we need to do is make sure we do have a connection so if the data connection game object is different from no then we're going to update it so let's go up here and see how the connection is set up and here you have a connection from position a to position B and this is what we're doing we grab the right transform we count like the direction from A to B we come like the distance between that and we apply to our size Delta and anchor position so let's copy most of this down here so here is the same code for updating our connection now obviously we need to get the dot position B and that position a now that position a won't be this graph position so we can change that for that okay now for the B we need to know the position of the and last visual object so tonight's visual object is of type line graph visual object so down here and let's make another function a public vector which won't be get grab position essentially this will return the graph position of this visual object which as you can see is set on the rect transform anchor position so that's what we're going to return in here so we are returning the anchored position of this game object so now we can go up here and define the dot position B as the own last visual object dot get the graph position so when updating the graph visual object info first we check if we do have a connection if we do we grab the rect transform we call it the direction between this position to the last original object correct position then we calculate the distance and apply the size Delta anchored and the rotation all right so now let's see if the connection this correctly update to match the new position now the one thing we still need to do is actually send the last regional object so let's go all the way up here so here on the on line graph vision we are storing the unless thought game object but instead of saying that we want to store the last graph visual object so let's make a time line graph visual object this will be the last line graph visual object so we set it by the function know and down here if that one is different from no then you get that one that get the graph position stead of going to the anchor position and here we set the last one to be this line graph visual object and when we create it let's give it the previous last one all right so let's test and see if the connection now correctly matches alright so here it is this is the point that we have modified and you can see the connection from this one to the previous one is indeed correct that one it is correctly calculating the difference this dot used to be down here then it shifted up there and now it correctly connects however as you can see this connection here is not correctly connecting to that dot this is because we have set up the object to handle the connection to the previous dot so when we modify this one it modifies this connection but when we modify this one we also have to notify this object to update this connection so we're going to notify this object when this one changes using an event so here on the align graphical object let's make a public event event handler and let's call it on change graph visual object info and we're going to fire it in here when we set the for a special object so if that one is not known then fire it using this and event or it's not empty okay so whenever we change this object fires an event now that means we can go up here into the constructor and if we do have a last visual object so if the last visual object is different from now so this one is connected to something else so let's subscribe to the last visual object that can change visual object info so this function here won't become doing the previous diet changes which means in here we need to change the connection and the connection only we don't want to call this function directly because that would then fire the event and so on and so on and at the end it would end up updating every single dot so we want to change this code into its own function so here let's make a private void update dot connection and here we're essentially going to copy all this now we're going to call this function in here when we set the original object okay and when the previous one changes let's also update that connection all right so let's test and see if the connection correctly changes between both points all right so here it isn't as you can see both connections are now correctly updating so we modify this point manually and now this connection updates correctly and this one also updates correctly so this object in here was notified when this one changed all right so everything is pretty much working the only thing missing is our tooltip so let's do the same thing with it with the bar chart which is first of all we go up here and we add the button UI component when we actually create the dot game object so in here before we returned at the dot button UI components to the game object okay instead of setting the tone type in here we're going to set it on the set visual object info after updating connection let's also update the filter so grab the button UI for the dot button UI which is based on the dot game object target component type what you want so we are now updating the tooltip that is shown so let's see and if there is the tooltip has been updated it used to show a random value then I updated to show a random string and it did correctly update so we can now easily modify a specific data point change its position it's don'tif and everything else so there you have it we create the in line graph visual object using the previous interface in the next video we're finally going to work on updating the graph in real time as long as you can download the project files in utilities from Unity code monkey comm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time you
