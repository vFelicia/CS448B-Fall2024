With timestamps:

00:00 - hello and welcome I'm your code monkey
00:02 - I've been making videos on this channel
00:03 - for over four years now I've covered
00:05 - tons and tons of topics in over 600
00:07 - videos one thing that I made sure to
00:09 - always do since the very beginning is
00:10 - read through all the comments every
00:12 - single day and answer as many questions
00:13 - as I can I've probably answered
00:15 - thousands of questions usually I reply
00:17 - directly to the person but if at least
00:19 - one person has a question then chances
00:20 - are there's more people wondering the
00:22 - same thing so here let's see some
00:23 - interesting questions that I answered
00:24 - that maybe you'd also like to know the
00:26 - answer to I've already done a bunch of
00:27 - these videos check out the entire policy
00:29 - see some more questions hopefully you'll
00:31 - learn quite a lot by seeing what others
00:32 - are asking this next question is on a
00:35 - video highlighting a really awesome
00:36 - Humble Bundle it was one of the best
00:38 - moments that I've seen with tons and
00:40 - tons of awesome tools this question
00:41 - comes from snaz who asks basically how
00:44 - hard is it to make all these zones
00:45 - yourself is it really worth it to spend
00:47 - something like 50 bucks on an asset
00:49 - instead of building yourself the answer
00:50 - to this one is pretty simple but also
00:52 - something that takes a bit of getting
00:53 - used to since it requires thinking in a
00:55 - bit of a different way it is not so much
00:57 - can you build an asset like this but
00:59 - rather how long only take you and how
01:01 - much is your time worth if you're in a
01:03 - country like the US and you get paid
01:04 - something like 20 an hour can you build
01:07 - a tune that costs 40 bucks in just two
01:09 - hours the answer is probably not if
01:11 - you're in a low-cost country like me in
01:13 - Portugal where wages are between five
01:15 - and ten dollars an hour at the same time
01:17 - can you build that same tool in five to
01:19 - ten hours maybe maybe not and of course
01:21 - always remember the difference between
01:23 - doing something quick and dirty and
01:24 - building a proper feature complete tool
01:27 - for example I have my own paid asset the
01:29 - mouse cursor system Pro it is actually
01:31 - based on a free tutorial where I cover
01:33 - the basics for how to make custom
01:34 - cursors so you can just follow the
01:37 - tutorial and build it yourself building
01:38 - something basic might take you just
01:40 - perhaps one or two hours
01:42 - but the paid asset isn't just the
01:43 - absolute Basics it has a custom editor
01:45 - and a bunch of features to make it
01:47 - really easy to use so if you wanted to
01:48 - build all those features yourself it
01:50 - would take you many more hours I think
01:51 - for me it took me maybe something like
01:53 - 80 or 100 hours to make that asset so if
01:56 - you are as proficient as me at writing
01:58 - code and you build it yourself and your
01:59 - time is worth 20 an hour then you would
02:01 - have spent something like two thousand
02:03 - dollars where you could have just bought
02:04 - the final asset for 40 bucks it really
02:07 - is that simple it's just a question of
02:08 - Time Versus money when you look at it
02:10 - like that buying assets really becomes
02:12 - an easy answer either way you're going
02:14 - to pay a price either in time or money
02:16 - so it's up to you to decide which one is
02:18 - worth more to you personally I enjoy
02:20 - building things and writing code so in
02:22 - many cases I will end up building a
02:24 - system myself instead of just buying it
02:25 - just because I like to build things
02:27 - but if all you want is to add a certain
02:29 - feature to your game like for example
02:31 - letting saving and loading it is much
02:33 - easier to pick up an asset like easy
02:34 - save from the SSR and learn how that
02:36 - works rather than spend hundreds of
02:38 - hours building in a safe system yourself
02:39 - although on the other hand there are
02:41 - also the category of tools that you just
02:43 - don't have the skills to build for
02:45 - example my first steam game Survivor
02:47 - Squad had tons of units and they all
02:48 - needed to be able to pathfind around the
02:50 - world
02:51 - with my skill set at the time I really
02:53 - could only build a pathfinding system
02:54 - that would support maybe five units but
02:57 - of course I didn't want the game to have
02:58 - so few units so in that case I just did
03:01 - not have the skills required to bring my
03:03 - vision to life
03:04 - I could have spent maybe a thousand
03:06 - hours learning about complex
03:07 - multi-threading code and learning how to
03:09 - improve the algorithm or instead I could
03:11 - spend the time building my game and just
03:13 - buy the asset so even though back then I
03:15 - had essentially no money I still decided
03:17 - to buy the Acer pathfinding project I
03:19 - think I didn't even get it on a sale so
03:21 - I think I paid the phone 100 which was a
03:23 - pretty simple amount for me at the time
03:25 - but it was definitely worth it with it I
03:27 - could keep working on the game and bring
03:28 - my original Vision to life and of course
03:30 - in the end the game despite not being
03:32 - any kind of huge success it still made
03:34 - more than enough money to pay for those
03:35 - 100 bucks so when it comes to assets it
03:38 - really is a very simple decision Matrix
03:41 - first ask yourself can you build it
03:43 - yourself if not do you really need it
03:45 - for a game if so then buy an asset or
03:47 - spend thousands of hours learning that
03:49 - skill set if you can build it yourself
03:51 - calculate how much your time is worth
03:53 - and how long it will take your build is
03:55 - the cost less than the asset if so then
03:57 - build it is it a lot more if so then
04:00 - just buy the asset it really is that
04:01 - simple next here's a question posted on
04:04 - my time take system video this is a fun
04:06 - system that I've used in almost every
04:08 - one of my Steam games you just build a
04:10 - simple timer to trigger a tick every
04:12 - certain amount of time like for example
04:13 - 10 times per second then you run some
04:15 - Logic on that rate instead of on every
04:17 - update it's a super easy way to make
04:19 - your game much more performant by
04:21 - running logic less often than on every
04:23 - update this question comes from Zombie
04:25 - Chicken who asks how do you implement
04:27 - this kind of time Tech system running on
04:29 - a server so how do you have the clients
04:32 - listening react to server ticks the
04:34 - answer to this is pretty simple you just
04:36 - run exactly the same code on that server
04:38 - so the server keeps a timer counting
04:40 - down on every update then every x amount
04:42 - of time it just fires the tick and
04:44 - resets the timer as to how you send that
04:46 - take to your clients it won't depend on
04:48 - what networking stack you're using
04:50 - for example if you're using netcode for
04:52 - game objects which is unity's official
04:54 - networking solution that I covered in
04:55 - another video which by the way if you
04:57 - want to make multiplayer games
04:58 - definitely go watch that video it's
04:59 - super detailed when working with netcode
05:02 - for game objects it's super simple you
05:04 - can just use rpcs or remote procedure
05:06 - calls so in this case you will run this
05:08 - time take system on the server build
05:10 - then on every Tech you would simply call
05:12 - a client RPC which would run the tech
05:14 - logic in all the clients that's it
05:16 - really easy
05:17 - doing this kind of logic would be
05:19 - excellent for lowering bandwidth in many
05:20 - ways there's a lot of multiplayer game
05:23 - logic that does not require a constant
05:24 - connection and data transfer on every
05:26 - single update since multiplayer is
05:28 - usually paid on a per bandwidth basis
05:30 - this is definitely something that you
05:31 - shouldn't look into if you're making a
05:33 - multiplayer game this simple system can
05:34 - be extremely useful and save you on a
05:36 - lot of bandwidth costs this next
05:38 - question is from my machine learning
05:40 - video it's a really awesome topic and
05:42 - definitely something that I want to get
05:43 - back to at some point I think machine
05:45 - learning has tons of potential in the
05:47 - video for training the agent to move
05:48 - towards the goal I use physics to detect
05:50 - the collisions I made two empty attack
05:52 - components that I attached the walls
05:54 - into the goal then the agents check for
05:56 - a collision it does a get component to
05:57 - find the tag and it can identify if it
06:00 - had a wall or a goal the question comes
06:02 - from juicing who asks why use an empty
06:05 - script as a tag instead of using the
06:07 - actual game object tag is there some
06:08 - kind of Advantage when using that method
06:10 - the answer is that game object tags are
06:13 - strings and strings are always very
06:15 - brittle and very error prone if you
06:17 - change the capitalization in any way or
06:19 - maybe you add a space or a DOT or
06:21 - anything then everything will not work
06:22 - some characters are very easy to get
06:24 - mixed up you can easily add in lowercase
06:27 - L instead of an uppercase i they'll look
06:29 - very similar same thing with something
06:30 - like an o and a zero so if you use
06:33 - string tags you might look at your code
06:35 - and not understand where on Earth it
06:36 - isn't working everything looks correct
06:38 - so you won't go crazy for a few minutes
06:40 - or a few hours then you look in the
06:42 - editor and you notice that the tag had a
06:44 - small space at the end this actually
06:46 - happened to me on a live stream a couple
06:48 - of months ago the only place where I use
06:50 - strings is when doing a find and I
06:52 - accidentally added a space at the end of
06:54 - the game object name so even though the
06:55 - code looked right everything was broken
06:57 - that's a problem with strings they are
06:59 - very easy to make mistakes which will
07:01 - then make you go crazy trying to find it
07:03 - so in terms of identifying an object
07:05 - using a simple attack component it
07:06 - really is the best way
07:07 - by Tech component I mean just literally
07:09 - an empty mono Behavior component there
07:12 - are no functions no Fields just a class
07:14 - name extending mono Behavior so you can
07:15 - attach it to a game object with this you
07:17 - then try to get the component using try
07:19 - get component and here if you do make a
07:21 - mistake if you change the capitalization
07:23 - or change a letter or anything if you do
07:26 - that you are going to get a compound
07:28 - error because the type won't match so if
07:30 - you accidentally make a mistake the game
07:31 - won't even compile making it very easy
07:33 - to spot the mistake that is the reason
07:35 - why you should use Tag components
07:37 - instead of game object tags in general
07:39 - also why you should avoid strings as
07:41 - much as possible never use a string for
07:43 - identifying some object only use strings
07:45 - for actual text previously the only
07:47 - place where I use strings was in a find
07:49 - but nowadays I've changed that to pretty
07:51 - much always use serialized field and
07:53 - just write the reference directly it
07:55 - still has the drawbacks like for example
07:56 - if you forget to assign the reference
07:58 - but at least you can write your code
08:00 - without using any strings at all alright
08:02 - so those are a bunch more of your
08:03 - questions in my answers to them I hope
08:05 - you'll learn something new check out the
08:07 - entire playlist to see some more
08:08 - interesting questions I've already
08:10 - answered thousands of questions so stay
08:11 - tuned for more videos like this so you
08:13 - can learn from what others have asked
08:14 - alright hope that's useful check out
08:16 - these videos to learn some more thanks
08:18 - to these awesome patreon supporters for
08:20 - making these videos possible thank you
08:22 - for watching and I'll see you next time
08:28 - [Music]
08:30 - thank you

Cleaned transcript:

hello and welcome I'm your code monkey I've been making videos on this channel for over four years now I've covered tons and tons of topics in over 600 videos one thing that I made sure to always do since the very beginning is read through all the comments every single day and answer as many questions as I can I've probably answered thousands of questions usually I reply directly to the person but if at least one person has a question then chances are there's more people wondering the same thing so here let's see some interesting questions that I answered that maybe you'd also like to know the answer to I've already done a bunch of these videos check out the entire policy see some more questions hopefully you'll learn quite a lot by seeing what others are asking this next question is on a video highlighting a really awesome Humble Bundle it was one of the best moments that I've seen with tons and tons of awesome tools this question comes from snaz who asks basically how hard is it to make all these zones yourself is it really worth it to spend something like 50 bucks on an asset instead of building yourself the answer to this one is pretty simple but also something that takes a bit of getting used to since it requires thinking in a bit of a different way it is not so much can you build an asset like this but rather how long only take you and how much is your time worth if you're in a country like the US and you get paid something like 20 an hour can you build a tune that costs 40 bucks in just two hours the answer is probably not if you're in a lowcost country like me in Portugal where wages are between five and ten dollars an hour at the same time can you build that same tool in five to ten hours maybe maybe not and of course always remember the difference between doing something quick and dirty and building a proper feature complete tool for example I have my own paid asset the mouse cursor system Pro it is actually based on a free tutorial where I cover the basics for how to make custom cursors so you can just follow the tutorial and build it yourself building something basic might take you just perhaps one or two hours but the paid asset isn't just the absolute Basics it has a custom editor and a bunch of features to make it really easy to use so if you wanted to build all those features yourself it would take you many more hours I think for me it took me maybe something like 80 or 100 hours to make that asset so if you are as proficient as me at writing code and you build it yourself and your time is worth 20 an hour then you would have spent something like two thousand dollars where you could have just bought the final asset for 40 bucks it really is that simple it's just a question of Time Versus money when you look at it like that buying assets really becomes an easy answer either way you're going to pay a price either in time or money so it's up to you to decide which one is worth more to you personally I enjoy building things and writing code so in many cases I will end up building a system myself instead of just buying it just because I like to build things but if all you want is to add a certain feature to your game like for example letting saving and loading it is much easier to pick up an asset like easy save from the SSR and learn how that works rather than spend hundreds of hours building in a safe system yourself although on the other hand there are also the category of tools that you just don't have the skills to build for example my first steam game Survivor Squad had tons of units and they all needed to be able to pathfind around the world with my skill set at the time I really could only build a pathfinding system that would support maybe five units but of course I didn't want the game to have so few units so in that case I just did not have the skills required to bring my vision to life I could have spent maybe a thousand hours learning about complex multithreading code and learning how to improve the algorithm or instead I could spend the time building my game and just buy the asset so even though back then I had essentially no money I still decided to buy the Acer pathfinding project I think I didn't even get it on a sale so I think I paid the phone 100 which was a pretty simple amount for me at the time but it was definitely worth it with it I could keep working on the game and bring my original Vision to life and of course in the end the game despite not being any kind of huge success it still made more than enough money to pay for those 100 bucks so when it comes to assets it really is a very simple decision Matrix first ask yourself can you build it yourself if not do you really need it for a game if so then buy an asset or spend thousands of hours learning that skill set if you can build it yourself calculate how much your time is worth and how long it will take your build is the cost less than the asset if so then build it is it a lot more if so then just buy the asset it really is that simple next here's a question posted on my time take system video this is a fun system that I've used in almost every one of my Steam games you just build a simple timer to trigger a tick every certain amount of time like for example 10 times per second then you run some Logic on that rate instead of on every update it's a super easy way to make your game much more performant by running logic less often than on every update this question comes from Zombie Chicken who asks how do you implement this kind of time Tech system running on a server so how do you have the clients listening react to server ticks the answer to this is pretty simple you just run exactly the same code on that server so the server keeps a timer counting down on every update then every x amount of time it just fires the tick and resets the timer as to how you send that take to your clients it won't depend on what networking stack you're using for example if you're using netcode for game objects which is unity's official networking solution that I covered in another video which by the way if you want to make multiplayer games definitely go watch that video it's super detailed when working with netcode for game objects it's super simple you can just use rpcs or remote procedure calls so in this case you will run this time take system on the server build then on every Tech you would simply call a client RPC which would run the tech logic in all the clients that's it really easy doing this kind of logic would be excellent for lowering bandwidth in many ways there's a lot of multiplayer game logic that does not require a constant connection and data transfer on every single update since multiplayer is usually paid on a per bandwidth basis this is definitely something that you shouldn't look into if you're making a multiplayer game this simple system can be extremely useful and save you on a lot of bandwidth costs this next question is from my machine learning video it's a really awesome topic and definitely something that I want to get back to at some point I think machine learning has tons of potential in the video for training the agent to move towards the goal I use physics to detect the collisions I made two empty attack components that I attached the walls into the goal then the agents check for a collision it does a get component to find the tag and it can identify if it had a wall or a goal the question comes from juicing who asks why use an empty script as a tag instead of using the actual game object tag is there some kind of Advantage when using that method the answer is that game object tags are strings and strings are always very brittle and very error prone if you change the capitalization in any way or maybe you add a space or a DOT or anything then everything will not work some characters are very easy to get mixed up you can easily add in lowercase L instead of an uppercase i they'll look very similar same thing with something like an o and a zero so if you use string tags you might look at your code and not understand where on Earth it isn't working everything looks correct so you won't go crazy for a few minutes or a few hours then you look in the editor and you notice that the tag had a small space at the end this actually happened to me on a live stream a couple of months ago the only place where I use strings is when doing a find and I accidentally added a space at the end of the game object name so even though the code looked right everything was broken that's a problem with strings they are very easy to make mistakes which will then make you go crazy trying to find it so in terms of identifying an object using a simple attack component it really is the best way by Tech component I mean just literally an empty mono Behavior component there are no functions no Fields just a class name extending mono Behavior so you can attach it to a game object with this you then try to get the component using try get component and here if you do make a mistake if you change the capitalization or change a letter or anything if you do that you are going to get a compound error because the type won't match so if you accidentally make a mistake the game won't even compile making it very easy to spot the mistake that is the reason why you should use Tag components instead of game object tags in general also why you should avoid strings as much as possible never use a string for identifying some object only use strings for actual text previously the only place where I use strings was in a find but nowadays I've changed that to pretty much always use serialized field and just write the reference directly it still has the drawbacks like for example if you forget to assign the reference but at least you can write your code without using any strings at all alright so those are a bunch more of your questions in my answers to them I hope you'll learn something new check out the entire playlist to see some more interesting questions I've already answered thousands of questions so stay tuned for more videos like this so you can learn from what others have asked alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time thank you
