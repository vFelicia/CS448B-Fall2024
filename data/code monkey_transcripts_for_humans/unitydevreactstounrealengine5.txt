With timestamps:

00:00 - hello and welcome i'm your code monkey
00:02 - so there's a new unreal engine 5
00:04 - showcase and i figured i'd share my
00:05 - thoughts as a yinty developer
00:07 - now if you're regular in channel you
00:09 - probably know that i've been working
00:10 - with dnt for almost 10 years now
00:12 - in all that time i made and published 8
00:14 - steam games
00:15 - i transitioned directly from flash into
00:17 - unity because at the time that was
00:18 - pretty much the only option
00:20 - and i've been very happy with unity ever
00:22 - since so i never really had a reason to
00:24 - check out another game engine
00:25 - but unreal engine 5 definitely has quite
00:27 - a lot of hype behind it
00:28 - so let's see what it has to offer from
00:30 - the perspective of a unity solo indie
00:32 - game developer
00:34 - and if you are a unity developer check
00:36 - out my complete courses
00:37 - learn how to make a builder defender
00:38 - game using csharp just like i make my
00:40 - own steam games
00:41 - or learn how to make games internally
00:43 - using visual scripting build a
00:44 - platformer a action rpg and a first
00:46 - person shooter
00:47 - or learn all about unity with the
00:49 - ultimate overview course which contains
00:51 - over 13 lectures each covering a
00:53 - different tool or feature of the engine
00:54 - to help you make better games faster
00:56 - check them out to the link in the
00:57 - description
00:58 - [Music]
01:03 - now one of the main features of unreal
01:05 - engine 5 is nanite
01:07 - our virtualized micro polygon geometry
01:09 - system that frees artists to create as
01:11 - much geometric detail as the eye can see
01:14 - virtualized geometry supports orders of
01:16 - magnitude more triangles without
01:17 - compromising speed
01:19 - and replaces the traditional system of
01:21 - mesh lods
01:22 - handling all detail transitions
01:24 - seamlessly without any additional setup
01:26 - in other words nanites lets the artist
01:28 - create while the engine does the work
01:31 - alright so the first thing they show is
01:32 - nanite it's this system for unloading
01:34 - objects with millions of triangles
01:36 - and the system is smart enough to
01:38 - automatically generate all the leds with
01:40 - seamless transitions
01:41 - i work mainly in 2d so dealing with
01:43 - geometry is not something i usually deal
01:45 - with
01:46 - but i know just how time consuming it
01:47 - can be to have to create all the various
01:49 - leds for each object
01:51 - so having all this be automatic all of
01:53 - it just works that seems like huge deal
01:55 - for asset creators
01:56 - based on demo it is totally seamless i
01:59 - cannot find the seam anywhere
02:00 - i guess my only question would be just
02:02 - how memory intensive is it
02:03 - all of those automatically generated
02:05 - download these need to be in memory
02:06 - somewhere so i wonder what the cost is
02:08 - at the same time what is the cost in
02:10 - terms of just standard storage
02:12 - games keep getting bigger and bigger so
02:14 - with this either the games will have a
02:15 - higher startup time because it's
02:17 - dynamically generating all the lods
02:19 - or they will simply get bigger and
02:21 - bigger with hundreds of gigabytes
02:23 - but anyway it's definitely very
02:24 - impressive just drop a super high
02:26 - resolution 3d asset and use directly in
02:28 - the game
02:28 - super easy while highly detailed assets
02:33 - are great on their own
02:34 - high quality lighting that realistically
02:36 - reacts to your scene is what opens the
02:38 - door to more dynamic worlds and
02:39 - immersive gameplay
02:41 - lumen is our fully dynamic real-time
02:43 - global illumination solution
02:45 - that immediately reacts to scene and
02:46 - light change making for more believable
02:48 - experiences
02:49 - and the gi hooks in directly with our
02:51 - time of day settings allowing for true
02:53 - physically based setups for
02:54 - photorealistic environments
02:56 - the mega skins library has meticulously
02:58 - calibrated physically based services and
03:00 - objects in the thousands of assets as of
03:02 - today and the assets that were
03:03 - highlighted here
03:04 - show just how powerful it is to have
03:06 - nanite and lumen working in tandem
03:09 - now this part looks really gorgeous
03:11 - lighting is definitely the most
03:12 - important thing when making a scene look
03:14 - good
03:15 - if you have some great assets but
03:16 - terrible lighting then your game will
03:18 - definitely look terrible
03:20 - having lighting of this quality in real
03:22 - time is extremely impressive
03:23 - light baking is one of the processes
03:25 - that i most dislike it always takes me
03:27 - ages to figure out the right settings to
03:28 - make something look good
03:30 - so having lighting of this high quality
03:32 - running in real time is definitely very
03:34 - impressive
03:35 - being able to change the lighting at
03:36 - will and test out different times of day
03:38 - won't be a great boost for games with
03:39 - day night cycles
03:41 - of course when in development having
03:42 - access to high quality content that's
03:44 - easy to use
03:45 - helps you iterate quickly and saves lots
03:47 - of time that can be better spent
03:48 - elsewhere on your project
03:50 - with kwixel now being a part of the epic
03:52 - games family we've made the full mega
03:54 - scans library
03:55 - free and open for all unreal engine
03:57 - users
03:58 - bridge our online browser for mega scans
04:01 - assets has historically functioned as a
04:02 - standalone application for quickly
04:04 - exporting assets in bulk directly into
04:06 - the engine
04:07 - albeit separate from unreal quicksole is
04:10 - definitely one of the best things about
04:11 - unreal
04:12 - all these super awesome high quality
04:14 - assets free to use in your games
04:16 - it's insane just how good it actually is
04:18 - coupled with the free price tag
04:20 - at least if you're using unreal now for
04:22 - me i usually prefer making some more
04:24 - cartoony and low poly assets
04:26 - but if you're making a realistic looking
04:28 - game then quickson is definitely a
04:29 - godsend
04:30 - also by the way if you're a unity
04:32 - developer you can still use quixote it's
04:34 - just not free
04:35 - i've only briefly looked at the asset
04:37 - list but they've got quite a lot of
04:38 - stuff
04:39 - today we're happy to announce that is
04:41 - now natively integrated directly into
04:43 - the engine ui
04:44 - now you can simply drag and drop assets
04:46 - directly into your scene for a more
04:48 - intuitive and connected experience
04:50 - and simply logging in with your epic id
04:52 - gives you immediate access to thousands
04:54 - of assets to use for free in your unreal
04:56 - engine projects
04:59 - just being able to browse and drag and
05:00 - drop assets directly on the scene is
05:02 - awesome
05:03 - i certainly wish unity had something
05:05 - similar to this instead of having to
05:06 - import an entire package into your
05:08 - project
05:09 - i wish you could just browse the package
05:10 - just like this and select each
05:12 - individual asset to import
05:13 - that would certainly help in keeping the
05:15 - unt project smaller and ensure that you
05:17 - only have the actual assets that you're
05:19 - using
05:19 - by the way if you find the video helpful
05:21 - please hit the like button it's a tiny
05:23 - thing but really does help
05:24 - thanks we are constantly looking to
05:26 - enhance the value of the mega scans
05:28 - library
05:29 - and today we're excited to announce that
05:30 - we're adding a brand new asset type
05:32 - called mega assemblies
05:34 - mega assemblies are the natural next
05:36 - step for us in removing even more
05:37 - barriers for artists in crafting their
05:39 - worlds
05:40 - by combining existing assets from the
05:42 - mega scans library
05:44 - our artists are pre-assembling elements
05:46 - that can be quickly accessed and
05:47 - leveraged to populate your scenes
05:49 - now this one also looks great for me i'm
05:52 - mainly a programmer and definitely not a
05:54 - level designer
05:55 - so one of the things that i absolutely
05:56 - don't like to do is when i have to do
05:58 - some sort of demo and i need to populate
06:00 - it with all kinds of props so it doesn't
06:01 - look too empty
06:02 - individually placing each proper asset
06:04 - is not something i like to do
06:06 - so having some preset assemblies on top
06:08 - of each individual asset
06:10 - that can certainly be very useful and
06:12 - i'm guessing it will help speed up level
06:13 - design quite significantly
06:15 - my only question would be just how many
06:16 - of these assemblies do they have
06:18 - all they show here and all they've shown
06:20 - in the previous showcase
06:21 - is this desert environment so the
06:24 - question is do they have cities forests
06:26 - maybe some medieval villages maybe some
06:27 - more fantastical i'm not sure
06:29 - i've never used quixote so maybe they do
06:31 - have all of that and i'm just not
06:32 - familiar with it
06:34 - with ue5 we are re-imagining what
06:36 - collaboration looks like for teams
06:38 - and projects of all sizes a common
06:40 - challenge
06:41 - when collaborating on large worlds is
06:43 - deciding how to structure map content so
06:45 - that everyone on the team can easily
06:47 - work without asset contention
06:48 - while also avoiding painful merge
06:50 - conflicts
06:52 - a new system called world partition
06:54 - makes traditional world building
06:56 - workflows obsolete
06:57 - by changing the way that we think about
06:59 - map files rather than
07:00 - requiring artists to build out map
07:02 - content as a series of streaming levels
07:04 - world partition allows teams to think of
07:06 - a single map as one large world that
07:08 - gets broken down
07:09 - automatically into many smaller
07:11 - streamable cells on a grid
07:13 - these cells can be selectively loaded or
07:15 - unloaded in the editor to save on edit
07:17 - time resources
07:18 - allowing artists to only load up the
07:20 - sections of the map that they need
07:22 - now this one is interesting being able
07:24 - to have a single huge giant world but
07:26 - only low
07:27 - chunks of it so multiple people can work
07:28 - at once now for me i mostly work alone
07:31 - so this is not a problem that i'm
07:32 - usually faced with
07:33 - but again i can definitely see how
07:35 - useful this is on a large team with
07:37 - multiple level designers
07:38 - the more people you can have working at
07:40 - the same time the better you can
07:42 - actually do things
07:43 - and just in terms of performance it is
07:45 - probably also a very good thing
07:46 - if you unload a small chunk then you can
07:48 - probably do some work on a
07:50 - hyper-realistic game even on a weak
07:51 - laptop
07:57 - managing this much content at runtime
07:59 - typically requires a ton of thought
08:01 - about how to stream relevant content in
08:03 - and out to stay inside performance
08:04 - budgets
08:05 - fortunately world partition handles that
08:07 - as well at runtime
08:08 - only the cells in a user-defined radius
08:10 - from our player are loaded
08:12 - and as we move new cells are streamed in
08:14 - while cells no longer needed are
08:15 - replaced by their lower resolution
08:17 - hierarchical level of detail or h-lod
08:19 - version and since all projects have
08:21 - different requirements
08:22 - the cell size and loading radius are
08:24 - fully configurable to match each
08:26 - project's content streaming needs
08:29 - and on top of that it seems that this
08:31 - system is not only for edit time but
08:32 - also for runtime
08:34 - having an automated world chunk loading
08:36 - system is certainly going to be useful
08:38 - for devs working on huge maps
08:40 - making a good system like this takes a
08:41 - lot of work so if it's customizable
08:43 - enough to fit any game then
08:44 - this is another super useful feature to
08:47 - build and maintain more scalable
08:48 - gameplay systems
08:49 - we've also added a new framework called
08:51 - game feature plugins that will allow you
08:53 - to build and ship
08:54 - game content in a more modular way with
08:56 - game feature plugins
08:57 - numerous core gameplay features can be
08:59 - built in parallel with better
09:00 - encapsulation and finer content
09:02 - organization
09:03 - then they show game feature plugins it
09:05 - seems to be all about writing some
09:07 - individual
09:08 - modular components and then switch
09:09 - between them in runtime
09:11 - so it's one of those things that is
09:12 - potentially very complex and requires
09:14 - building your game to a specific
09:16 - architecture
09:16 - but if you come into it you can have
09:18 - some huge benefits
09:20 - using unity scripting objects you could
09:22 - build something like this just make your
09:23 - game logic mostly databased
09:25 - and load components in and out then if
09:27 - you needed to make this online you could
09:29 - combine it with the unity addressable
09:30 - system
09:31 - if you've never experimented with a more
09:33 - data focused architecture i would
09:35 - definitely encourage you to give it a
09:36 - try it's certainly interesting
09:38 - all of the assets and logic needed for
09:39 - the ability including new animations
09:41 - input controls blueprint code vfx and
09:44 - audio
09:45 - are contained inside this plugin and
09:46 - core game classes have no idea that
09:48 - these assets exist
09:49 - until we activate it now i do like how
09:53 - this feature kind of forces you to think
09:55 - about how to best organize your code and
09:56 - all your assets
09:57 - since the plugin needs to be fully
09:59 - decoupled from everything else
10:01 - so that alone will force you to write
10:02 - better code which is always a good thing
10:05 - we've also added a feature called
10:06 - animation motion warping which allows
10:08 - you to manipulate root motion animations
10:10 - to adapt them to the world
10:12 - before triggering the vaulting animation
10:14 - a blueprint script determines her
10:16 - rotation
10:16 - how high up she jumps how far she needs
10:19 - to move to get to the other side
10:20 - and where her feet should land motion
10:22 - warping then adapts the root motion of
10:24 - the vault animation to match this data
10:27 - then another interesting feature motion
10:28 - warping being able to slightly modify
10:31 - animations in runtime
10:32 - to make them perfectly match all kinds
10:33 - of objects
10:35 - it seems to be quite simple to use so
10:36 - that's great anything to make
10:38 - animations feel much more natural
10:40 - without having to make all kinds of
10:41 - variations
10:42 - one thing unity has which i'm always
10:44 - impressed with is kinematica
10:46 - that's also a system for generating some
10:48 - dynamic animations and runtime
10:50 - it's been development for quite a while
10:51 - so i wonder how they're progressing with
10:53 - that
10:53 - haven't seen it in a while but every
10:55 - time i do it's always very impressive
10:57 - here at epic we are passionate about
10:59 - building great tools and new technology
11:01 - and a big part of our excitement is
11:02 - being able to bring you the developer
11:04 - community
11:05 - on the journey with us so today we're
11:08 - making an early access build of unreal
11:10 - engine 5
11:10 - freely available on the epic games
11:12 - launcher in the unreal engine github
11:14 - so you can explore and test out these
11:16 - tools yourself to get an early look at
11:18 - what's coming later in the full release
11:19 - of ue 5.0
11:21 - and the final announcement is that it's
11:23 - now available as an early access version
11:24 - for free
11:25 - i've never touched in real engine before
11:27 - so maybe i'll give it a try and see what
11:29 - it's like to try out unreal from unt dev
11:31 - so all in all my thoughts on this are
11:33 - this is definitely an interesting and
11:35 - potentially big upgrade
11:36 - as a game player i would say this will
11:38 - lead to even better looking games with
11:40 - some gorgeous dynamic lighting
11:42 - and possibly also some bigger games if
11:44 - nanite does indeed speed up asset
11:45 - creation
11:46 - as well as some better performance for
11:48 - those huge worlds thanks to that
11:49 - streaming system
11:50 - now as a game developer from all the
11:52 - features they showed it seems like
11:54 - they're turning more the
11:55 - aaa developers making these huge hyper
11:57 - realistic worlds with some giant teams
11:59 - as opposed to some smaller indie devs so
12:02 - for me as a solo indie dev who is mainly
12:05 - a programmer and who mainly makes some
12:06 - cartoony or low pawn games
12:08 - for me the high quality real time
12:10 - lighting is probably the thing i would
12:11 - be most interested in
12:13 - it's kind of funny how both engines are
12:15 - sort of targeting the
12:16 - different audience so unreal targets
12:19 - aaa developers with massive teams and
12:21 - also the movie industry with all the
12:23 - super high fidelity tools
12:25 - whereas unity is more focused on in
12:26 - developers and letting everyone be a
12:28 - creator running their own games from the
12:30 - lowest mobile devices to some high-end
12:32 - pcs
12:32 - and unity is also targeting more of the
12:34 - automotive and building industries
12:36 - so both are definitely very great very
12:38 - capable engines and both have their
12:40 - audiences
12:41 - as for me unt is still perfect for
12:43 - everything i want to do but i definitely
12:44 - would like to give unreal a try
12:46 - maybe there's something that they do
12:47 - much better than unity that i simply
12:49 - don't even know about so that would be
12:50 - interesting to try out
12:52 - alright hope that's useful check out
12:54 - these videos to learn some more
12:55 - thanks to these awesome patreon
12:57 - supporters for making these videos
12:58 - possible
12:59 - thank you for watching and i'll see you
13:01 - next time
13:09 - you

Cleaned transcript:

hello and welcome i'm your code monkey so there's a new unreal engine 5 showcase and i figured i'd share my thoughts as a yinty developer now if you're regular in channel you probably know that i've been working with dnt for almost 10 years now in all that time i made and published 8 steam games i transitioned directly from flash into unity because at the time that was pretty much the only option and i've been very happy with unity ever since so i never really had a reason to check out another game engine but unreal engine 5 definitely has quite a lot of hype behind it so let's see what it has to offer from the perspective of a unity solo indie game developer and if you are a unity developer check out my complete courses learn how to make a builder defender game using csharp just like i make my own steam games or learn how to make games internally using visual scripting build a platformer a action rpg and a first person shooter or learn all about unity with the ultimate overview course which contains over 13 lectures each covering a different tool or feature of the engine to help you make better games faster check them out to the link in the description now one of the main features of unreal engine 5 is nanite our virtualized micro polygon geometry system that frees artists to create as much geometric detail as the eye can see virtualized geometry supports orders of magnitude more triangles without compromising speed and replaces the traditional system of mesh lods handling all detail transitions seamlessly without any additional setup in other words nanites lets the artist create while the engine does the work alright so the first thing they show is nanite it's this system for unloading objects with millions of triangles and the system is smart enough to automatically generate all the leds with seamless transitions i work mainly in 2d so dealing with geometry is not something i usually deal with but i know just how time consuming it can be to have to create all the various leds for each object so having all this be automatic all of it just works that seems like huge deal for asset creators based on demo it is totally seamless i cannot find the seam anywhere i guess my only question would be just how memory intensive is it all of those automatically generated download these need to be in memory somewhere so i wonder what the cost is at the same time what is the cost in terms of just standard storage games keep getting bigger and bigger so with this either the games will have a higher startup time because it's dynamically generating all the lods or they will simply get bigger and bigger with hundreds of gigabytes but anyway it's definitely very impressive just drop a super high resolution 3d asset and use directly in the game super easy while highly detailed assets are great on their own high quality lighting that realistically reacts to your scene is what opens the door to more dynamic worlds and immersive gameplay lumen is our fully dynamic realtime global illumination solution that immediately reacts to scene and light change making for more believable experiences and the gi hooks in directly with our time of day settings allowing for true physically based setups for photorealistic environments the mega skins library has meticulously calibrated physically based services and objects in the thousands of assets as of today and the assets that were highlighted here show just how powerful it is to have nanite and lumen working in tandem now this part looks really gorgeous lighting is definitely the most important thing when making a scene look good if you have some great assets but terrible lighting then your game will definitely look terrible having lighting of this quality in real time is extremely impressive light baking is one of the processes that i most dislike it always takes me ages to figure out the right settings to make something look good so having lighting of this high quality running in real time is definitely very impressive being able to change the lighting at will and test out different times of day won't be a great boost for games with day night cycles of course when in development having access to high quality content that's easy to use helps you iterate quickly and saves lots of time that can be better spent elsewhere on your project with kwixel now being a part of the epic games family we've made the full mega scans library free and open for all unreal engine users bridge our online browser for mega scans assets has historically functioned as a standalone application for quickly exporting assets in bulk directly into the engine albeit separate from unreal quicksole is definitely one of the best things about unreal all these super awesome high quality assets free to use in your games it's insane just how good it actually is coupled with the free price tag at least if you're using unreal now for me i usually prefer making some more cartoony and low poly assets but if you're making a realistic looking game then quickson is definitely a godsend also by the way if you're a unity developer you can still use quixote it's just not free i've only briefly looked at the asset list but they've got quite a lot of stuff today we're happy to announce that is now natively integrated directly into the engine ui now you can simply drag and drop assets directly into your scene for a more intuitive and connected experience and simply logging in with your epic id gives you immediate access to thousands of assets to use for free in your unreal engine projects just being able to browse and drag and drop assets directly on the scene is awesome i certainly wish unity had something similar to this instead of having to import an entire package into your project i wish you could just browse the package just like this and select each individual asset to import that would certainly help in keeping the unt project smaller and ensure that you only have the actual assets that you're using by the way if you find the video helpful please hit the like button it's a tiny thing but really does help thanks we are constantly looking to enhance the value of the mega scans library and today we're excited to announce that we're adding a brand new asset type called mega assemblies mega assemblies are the natural next step for us in removing even more barriers for artists in crafting their worlds by combining existing assets from the mega scans library our artists are preassembling elements that can be quickly accessed and leveraged to populate your scenes now this one also looks great for me i'm mainly a programmer and definitely not a level designer so one of the things that i absolutely don't like to do is when i have to do some sort of demo and i need to populate it with all kinds of props so it doesn't look too empty individually placing each proper asset is not something i like to do so having some preset assemblies on top of each individual asset that can certainly be very useful and i'm guessing it will help speed up level design quite significantly my only question would be just how many of these assemblies do they have all they show here and all they've shown in the previous showcase is this desert environment so the question is do they have cities forests maybe some medieval villages maybe some more fantastical i'm not sure i've never used quixote so maybe they do have all of that and i'm just not familiar with it with ue5 we are reimagining what collaboration looks like for teams and projects of all sizes a common challenge when collaborating on large worlds is deciding how to structure map content so that everyone on the team can easily work without asset contention while also avoiding painful merge conflicts a new system called world partition makes traditional world building workflows obsolete by changing the way that we think about map files rather than requiring artists to build out map content as a series of streaming levels world partition allows teams to think of a single map as one large world that gets broken down automatically into many smaller streamable cells on a grid these cells can be selectively loaded or unloaded in the editor to save on edit time resources allowing artists to only load up the sections of the map that they need now this one is interesting being able to have a single huge giant world but only low chunks of it so multiple people can work at once now for me i mostly work alone so this is not a problem that i'm usually faced with but again i can definitely see how useful this is on a large team with multiple level designers the more people you can have working at the same time the better you can actually do things and just in terms of performance it is probably also a very good thing if you unload a small chunk then you can probably do some work on a hyperrealistic game even on a weak laptop managing this much content at runtime typically requires a ton of thought about how to stream relevant content in and out to stay inside performance budgets fortunately world partition handles that as well at runtime only the cells in a userdefined radius from our player are loaded and as we move new cells are streamed in while cells no longer needed are replaced by their lower resolution hierarchical level of detail or hlod version and since all projects have different requirements the cell size and loading radius are fully configurable to match each project's content streaming needs and on top of that it seems that this system is not only for edit time but also for runtime having an automated world chunk loading system is certainly going to be useful for devs working on huge maps making a good system like this takes a lot of work so if it's customizable enough to fit any game then this is another super useful feature to build and maintain more scalable gameplay systems we've also added a new framework called game feature plugins that will allow you to build and ship game content in a more modular way with game feature plugins numerous core gameplay features can be built in parallel with better encapsulation and finer content organization then they show game feature plugins it seems to be all about writing some individual modular components and then switch between them in runtime so it's one of those things that is potentially very complex and requires building your game to a specific architecture but if you come into it you can have some huge benefits using unity scripting objects you could build something like this just make your game logic mostly databased and load components in and out then if you needed to make this online you could combine it with the unity addressable system if you've never experimented with a more data focused architecture i would definitely encourage you to give it a try it's certainly interesting all of the assets and logic needed for the ability including new animations input controls blueprint code vfx and audio are contained inside this plugin and core game classes have no idea that these assets exist until we activate it now i do like how this feature kind of forces you to think about how to best organize your code and all your assets since the plugin needs to be fully decoupled from everything else so that alone will force you to write better code which is always a good thing we've also added a feature called animation motion warping which allows you to manipulate root motion animations to adapt them to the world before triggering the vaulting animation a blueprint script determines her rotation how high up she jumps how far she needs to move to get to the other side and where her feet should land motion warping then adapts the root motion of the vault animation to match this data then another interesting feature motion warping being able to slightly modify animations in runtime to make them perfectly match all kinds of objects it seems to be quite simple to use so that's great anything to make animations feel much more natural without having to make all kinds of variations one thing unity has which i'm always impressed with is kinematica that's also a system for generating some dynamic animations and runtime it's been development for quite a while so i wonder how they're progressing with that haven't seen it in a while but every time i do it's always very impressive here at epic we are passionate about building great tools and new technology and a big part of our excitement is being able to bring you the developer community on the journey with us so today we're making an early access build of unreal engine 5 freely available on the epic games launcher in the unreal engine github so you can explore and test out these tools yourself to get an early look at what's coming later in the full release of ue 5.0 and the final announcement is that it's now available as an early access version for free i've never touched in real engine before so maybe i'll give it a try and see what it's like to try out unreal from unt dev so all in all my thoughts on this are this is definitely an interesting and potentially big upgrade as a game player i would say this will lead to even better looking games with some gorgeous dynamic lighting and possibly also some bigger games if nanite does indeed speed up asset creation as well as some better performance for those huge worlds thanks to that streaming system now as a game developer from all the features they showed it seems like they're turning more the aaa developers making these huge hyper realistic worlds with some giant teams as opposed to some smaller indie devs so for me as a solo indie dev who is mainly a programmer and who mainly makes some cartoony or low pawn games for me the high quality real time lighting is probably the thing i would be most interested in it's kind of funny how both engines are sort of targeting the different audience so unreal targets aaa developers with massive teams and also the movie industry with all the super high fidelity tools whereas unity is more focused on in developers and letting everyone be a creator running their own games from the lowest mobile devices to some highend pcs and unity is also targeting more of the automotive and building industries so both are definitely very great very capable engines and both have their audiences as for me unt is still perfect for everything i want to do but i definitely would like to give unreal a try maybe there's something that they do much better than unity that i simply don't even know about so that would be interesting to try out alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time you
