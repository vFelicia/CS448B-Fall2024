With timestamps:

00:00 - hello and welcome i'm your code monkey
00:02 - here is the game
00:03 - endzone a world apart which features
00:05 - some interesting mechanics and systems
00:07 - let's inspect and remake the soil
00:09 - moisture radiation system to see how it
00:11 - works
00:12 - it involves a grid system spawning some
00:14 - moving clouds adding moisture as the
00:15 - rain falls
00:16 - making the water spread throughout the
00:18 - map and of course dealing with radiation
00:20 - hopefully you'll learn something new
00:22 - that you can then apply to mechanics on
00:23 - your own games
00:24 - by the way i'm trying out this format
00:26 - because there were a lot of comments on
00:28 - my game design breakdown videos asking
00:30 - for a more actionable tutorial format so
00:32 - let me know if you like this type of
00:34 - video
00:34 - alright so first just a quick overview
00:37 - of what the game is about
00:38 - the game is called endzone the world
00:40 - apart it just had its full release
00:42 - coming out of early access after one
00:43 - year of constant updates
00:45 - it's a very interesting city builder
00:47 - where you essentially rebuild after the
00:49 - nuclear apocalypse
00:50 - so that means you have to deal with
00:52 - radiation droughts sandstorms and so on
00:54 - you need to build up your colony by
00:56 - giving your people homestone living set
00:58 - up some supply chains to gather food and
01:00 - water and of course make sure nothing is
01:02 - contaminated
01:02 - the game features an endless survival
01:04 - mode but also some really unique
01:06 - interesting scenarios
01:07 - in one of them the goal is to find all
01:09 - the seeds in the world
01:10 - another one you start with a completely
01:12 - broken settlement and need to rebuild
01:14 - and so on
01:15 - so if you're into city builders then
01:17 - this is a very good one i've definitely
01:18 - enjoyed my time with it
01:20 - and this is also a game made with yinty
01:22 - if you want to pick it up there's an
01:23 - affiliate link in the description and if
01:25 - you use that you'll
01:26 - also be supporting the channel and
01:27 - follow the curator page on seam if you
01:29 - want to see more of these types of
01:30 - videos
01:31 - okay so the game features a bunch of
01:33 - interesting systems and mechanics with
01:34 - one of them being the soil moisture
01:36 - radiation system so let's see how it
01:38 - works
01:39 - this is one of the more complex systems
01:41 - but once you understand the basics it's
01:43 - relatively simple to implement
01:45 - as the seasons go by you have some
01:47 - seasons with tons of rain some with very
01:49 - little and sometimes you have fallen
01:50 - droughts
01:51 - the soil system has a moisture save and
01:53 - also a radiation state
01:55 - and to handle that the whole game is run
01:57 - on the grid you can see it when you play
01:59 - sound buildings
02:00 - i've already done quite a lot of videos
02:02 - based on a grid system
02:03 - this is something that is insanely
02:05 - useful for tons and tons of games
02:07 - you can go watch the whole playlist to
02:08 - see a really nice criticism being built
02:10 - step by step
02:11 - in the system that i made you can define
02:13 - a class that will be instantiated on
02:16 - each grid position
02:17 - so that's perfect for building something
02:18 - just like this soil system
02:20 - you just define the class that is placed
02:22 - on each word object then you can store
02:24 - any data you want in any of those
02:25 - positions
02:26 - so in this case maybe you define a float
02:28 - to store the moisture state
02:30 - using a float you can make it a simple
02:32 - normalized value with zero being
02:33 - completely dry and one being fully wet
02:36 - and the other part of this system is the
02:38 - radiation so for that one you can either
02:40 - make a completely separate grid or
02:42 - simply just add another float over here
02:44 - for the radiation
02:45 - then the game actually splits moisture
02:47 - into four categories
02:48 - so you've got dried out dry moist and
02:51 - wet
02:52 - you can use a simple enum to define
02:54 - these values and then some basic math to
02:56 - convert the float value into these enums
02:58 - then for the radiation there's only two
03:00 - states either it's radiated or not
03:03 - so for that you can just define a
03:04 - certain volume like maybe 0.5 and if
03:06 - it's above this value then the position
03:08 - has radiation and if underneath then it
03:10 - does not then just a simple function to
03:11 - return a volume
03:13 - by the way if you find the video helpful
03:15 - please hit the like button it's a tiny
03:16 - thing but it really does help
03:18 - thanks then with that you just use a
03:20 - visual for example like the tile map
03:22 - that i made that works on top of the
03:23 - grid system
03:24 - then you convert those moisture states
03:26 - into various colors
03:28 - so that's the base of the system with
03:29 - that you have all of the data you need
03:31 - then for handling the moisture and
03:33 - drying out of the soil system
03:35 - the game has an actual cloud simulation
03:38 - meaning that there are some clouds and
03:39 - you can see them moving around both in
03:41 - the visual as well as
03:42 - on the tile map it's a great way to add
03:44 - some more complexity to the system to
03:46 - make it feel much more realistic as
03:48 - opposed to having moisture
03:49 - just come out of thin air for that you
03:51 - could define some cloud shapes maybe by
03:53 - drawing them on a texture
03:54 - then you just cycle through every pixel
03:56 - in that texture
03:57 - so just a basic cycle going through the
04:00 - whole width and height of the texture to
04:02 - the object
04:03 - and then you check out the pixel color
04:04 - in order to convert it into a simple
04:06 - boolean grid
04:07 - you can make a texture with literally
04:09 - just one channel or a normal texture and
04:11 - paint the area in white or just one of
04:13 - the main colors so red green or blue
04:15 - i covered lots of interaction that you
04:17 - can do with textures and pixels in my
04:19 - series on how i made the characters in
04:21 - battleground tycoon
04:22 - so you can grab pixels copy paste them
04:24 - and so on
04:26 - and the reason why you convert it into a
04:27 - bowling grid is simply for performance
04:30 - doing a get pixel call on every single
04:32 - pixel on the texture is a pretty
04:34 - expensive thing
04:35 - whereas simply grabbing the value from a
04:37 - boolean array is pretty cheap
04:38 - so essentially the bowling grid just
04:40 - acts as a cache for the actual
04:42 - texture so now with that you have a grid
04:44 - with all the positions that the cloud
04:46 - has
04:46 - then you just need to combine that data
04:48 - with the position of the clouds and the
04:50 - underlying soil grid
04:51 - so you can spawn an actual cloud object
04:54 - and move it over the scene then on every
04:56 - certain amount of time
04:57 - like for example 10 times per second you
05:00 - simply grab the cloud object position
05:02 - and convert it into a grid position
05:04 - you do a second going through all the
05:06 - positions in the cloud and add moisture
05:08 - to all of those soil grid positions
05:10 - for even more complexity you can make
05:12 - that valley depend on the weather
05:14 - examiner like the game doesn't
05:16 - the game has the season system and some
05:18 - of them have tons of rains and some of
05:20 - them have no rain
05:21 - so you just check with that season
05:23 - system to figure out just how much
05:24 - moisture to add on every song
05:26 - now i mentioned you run this on every
05:28 - certain amount of time and not on every
05:30 - update
05:31 - again the reason is performance if you
05:33 - have a very large world and you try to
05:35 - update on every single frame then it's
05:37 - going to cause a serious performance
05:39 - impact
05:40 - there are usually two ways that you can
05:42 - do to achieve better performance
05:43 - either you make the logic run faster or
05:46 - you just run the logic less often
05:48 - so in this case running it less often is
05:50 - perfect and the player will definitely
05:51 - not notice
05:52 - one super simple way to manage that is
05:55 - with a time take system which i covered
05:56 - in detail in another video
05:58 - it's just a very simple class to run
06:00 - some logic every certain amount of time
06:02 - as opposed to on every update
06:04 - i've used that simple class in that
06:05 - simple system in pretty much all of my
06:07 - steam games in order to ensure good
06:08 - performance
06:09 - so with that you have the clouds adding
06:11 - moisture then you just make multiple
06:13 - cloud shapes and combine it with a
06:15 - system to spawn clouds randomly over
06:17 - time and you have it all working
06:19 - the clouds spawn they move normally they
06:21 - constantly check their word position
06:23 - and if the cloud has some rain then adds
06:24 - moisture onto those positions
06:26 - for drying out it's also very simple you
06:29 - just constantly go through all the
06:30 - positions in the grid and lower their
06:32 - moisture by a tiny amount
06:34 - so if there are clouds and it's raining
06:36 - it will also receive more moisture than
06:37 - it dries out
06:38 - but as you stop spawning clouds then the
06:40 - whole thing becomes much more better
06:42 - now once again the game takes this even
06:44 - further every season you have either
06:46 - rain or no rain but then you also have
06:48 - sunlight
06:50 - so again if you want to have more
06:51 - complexity you can integrate this
06:53 - so instead of lowering the moisture on
06:55 - every single position every time
06:57 - maybe you do the same logic as for the
07:00 - clouds except you check for the sun
07:02 - amount
07:02 - and then you dry out more where there's
07:04 - no clouds as opposed to where there are
07:06 - clouds
07:06 - so with that simple addition you add
07:08 - even more complexity and realism to this
07:10 - system without adding much more effort
07:13 - with all of that you end up with a
07:14 - really awesome soil system but as you
07:16 - can see it's on based on some very
07:17 - simple interactions
07:18 - for the radiation it's really the same
07:20 - thing just maybe you spawn it
07:22 - differently
07:23 - as i said you can have a completely
07:25 - separate grind to handle just
07:26 - radiation or simply reuse the same one
07:29 - then the game
07:30 - features some seasons with toxic rain so
07:32 - if that's the case then you can add a
07:33 - bit of radiation on the exact same logic
07:35 - where you add moisture from the clouds
07:38 - however the game also sometimes gets
07:40 - radiation out of nowhere
07:41 - so for that you can do a very similar
07:43 - logic except instead of spawning some
07:45 - moving clouds
07:46 - you just spawn a static radiation cloud
07:48 - on just one position
07:50 - so no visual then you add a ton of rain
07:52 - with radiation instantly and you despawn
07:54 - that cloud
07:55 - with that you end up with radiation
07:57 - pretty much popping out of nowhere
07:59 - now with all that there's still one
08:01 - thing missing from this system
08:02 - just like this you have some areas that
08:04 - are wet where there are clouds
08:06 - but it can be completely burned right
08:08 - next to it that's not really realistic
08:10 - in real life water moves around it
08:12 - doesn't say static if there's somewhere
08:14 - it can go
08:15 - so for that you can cycle through every
08:17 - position on the grind then you check on
08:18 - its neighbors
08:19 - if they have less moisture then you grab
08:22 - some from the accurate position and
08:23 - transfer it to the neighbor
08:24 - so over time the water spreads all
08:26 - throughout the world even if you just
08:28 - spawn a single cloud right in the middle
08:30 - of the map
08:31 - again some extremely simple logic the
08:32 - only challenge with this one is really
08:34 - just making it performant
08:36 - so as you can see this is a great system
08:38 - and it looks extremely complex but it
08:40 - definitely is something you can recreate
08:41 - in your own games all it takes is an
08:43 - underlying grid system and some clever
08:45 - logic to make that simplicity and look
08:47 - complex
08:48 - then of course the farming system
08:49 - interacts directly with the soil system
08:51 - it is also working on a grid just like
08:53 - every building
08:55 - and every plant has a grid position so
08:58 - that plant simply asks the soil system
09:00 - to get the moisture and radiation
09:01 - underneath
09:02 - based on the moisture the plant will
09:04 - grow either faster or slower
09:06 - and based on the radiation the final
09:08 - food item will either be clean or
09:10 - radiated
09:11 - again some pretty simple logic so that's
09:14 - how you can recreate this system in your
09:16 - own games
09:16 - if you want to pick up the game there's
09:18 - an affiliate link in the description and
09:19 - if you use that one you'll also be
09:21 - supporting the channel
09:22 - and follow the creator page on steam if
09:24 - you want to see more of these types of
09:25 - videos
09:26 - like i said i'm trying out this format
09:27 - because there were a lot of comments on
09:29 - my game design breakdown videos
09:31 - asking for a more actionable tutorial
09:33 - format so let me know if you find this
09:35 - format helpful also let me know what
09:37 - other games have interesting mechanics
09:39 - that you like to know how they work
09:41 - alright hope that's useful check out
09:43 - these videos to learn some more
09:44 - thanks to these awesome patreon
09:46 - supporters for making these videos
09:47 - possible
09:48 - thank you for watching and i'll see you
09:50 - next time

Cleaned transcript:

hello and welcome i'm your code monkey here is the game endzone a world apart which features some interesting mechanics and systems let's inspect and remake the soil moisture radiation system to see how it works it involves a grid system spawning some moving clouds adding moisture as the rain falls making the water spread throughout the map and of course dealing with radiation hopefully you'll learn something new that you can then apply to mechanics on your own games by the way i'm trying out this format because there were a lot of comments on my game design breakdown videos asking for a more actionable tutorial format so let me know if you like this type of video alright so first just a quick overview of what the game is about the game is called endzone the world apart it just had its full release coming out of early access after one year of constant updates it's a very interesting city builder where you essentially rebuild after the nuclear apocalypse so that means you have to deal with radiation droughts sandstorms and so on you need to build up your colony by giving your people homestone living set up some supply chains to gather food and water and of course make sure nothing is contaminated the game features an endless survival mode but also some really unique interesting scenarios in one of them the goal is to find all the seeds in the world another one you start with a completely broken settlement and need to rebuild and so on so if you're into city builders then this is a very good one i've definitely enjoyed my time with it and this is also a game made with yinty if you want to pick it up there's an affiliate link in the description and if you use that you'll also be supporting the channel and follow the curator page on seam if you want to see more of these types of videos okay so the game features a bunch of interesting systems and mechanics with one of them being the soil moisture radiation system so let's see how it works this is one of the more complex systems but once you understand the basics it's relatively simple to implement as the seasons go by you have some seasons with tons of rain some with very little and sometimes you have fallen droughts the soil system has a moisture save and also a radiation state and to handle that the whole game is run on the grid you can see it when you play sound buildings i've already done quite a lot of videos based on a grid system this is something that is insanely useful for tons and tons of games you can go watch the whole playlist to see a really nice criticism being built step by step in the system that i made you can define a class that will be instantiated on each grid position so that's perfect for building something just like this soil system you just define the class that is placed on each word object then you can store any data you want in any of those positions so in this case maybe you define a float to store the moisture state using a float you can make it a simple normalized value with zero being completely dry and one being fully wet and the other part of this system is the radiation so for that one you can either make a completely separate grid or simply just add another float over here for the radiation then the game actually splits moisture into four categories so you've got dried out dry moist and wet you can use a simple enum to define these values and then some basic math to convert the float value into these enums then for the radiation there's only two states either it's radiated or not so for that you can just define a certain volume like maybe 0.5 and if it's above this value then the position has radiation and if underneath then it does not then just a simple function to return a volume by the way if you find the video helpful please hit the like button it's a tiny thing but it really does help thanks then with that you just use a visual for example like the tile map that i made that works on top of the grid system then you convert those moisture states into various colors so that's the base of the system with that you have all of the data you need then for handling the moisture and drying out of the soil system the game has an actual cloud simulation meaning that there are some clouds and you can see them moving around both in the visual as well as on the tile map it's a great way to add some more complexity to the system to make it feel much more realistic as opposed to having moisture just come out of thin air for that you could define some cloud shapes maybe by drawing them on a texture then you just cycle through every pixel in that texture so just a basic cycle going through the whole width and height of the texture to the object and then you check out the pixel color in order to convert it into a simple boolean grid you can make a texture with literally just one channel or a normal texture and paint the area in white or just one of the main colors so red green or blue i covered lots of interaction that you can do with textures and pixels in my series on how i made the characters in battleground tycoon so you can grab pixels copy paste them and so on and the reason why you convert it into a bowling grid is simply for performance doing a get pixel call on every single pixel on the texture is a pretty expensive thing whereas simply grabbing the value from a boolean array is pretty cheap so essentially the bowling grid just acts as a cache for the actual texture so now with that you have a grid with all the positions that the cloud has then you just need to combine that data with the position of the clouds and the underlying soil grid so you can spawn an actual cloud object and move it over the scene then on every certain amount of time like for example 10 times per second you simply grab the cloud object position and convert it into a grid position you do a second going through all the positions in the cloud and add moisture to all of those soil grid positions for even more complexity you can make that valley depend on the weather examiner like the game doesn't the game has the season system and some of them have tons of rains and some of them have no rain so you just check with that season system to figure out just how much moisture to add on every song now i mentioned you run this on every certain amount of time and not on every update again the reason is performance if you have a very large world and you try to update on every single frame then it's going to cause a serious performance impact there are usually two ways that you can do to achieve better performance either you make the logic run faster or you just run the logic less often so in this case running it less often is perfect and the player will definitely not notice one super simple way to manage that is with a time take system which i covered in detail in another video it's just a very simple class to run some logic every certain amount of time as opposed to on every update i've used that simple class in that simple system in pretty much all of my steam games in order to ensure good performance so with that you have the clouds adding moisture then you just make multiple cloud shapes and combine it with a system to spawn clouds randomly over time and you have it all working the clouds spawn they move normally they constantly check their word position and if the cloud has some rain then adds moisture onto those positions for drying out it's also very simple you just constantly go through all the positions in the grid and lower their moisture by a tiny amount so if there are clouds and it's raining it will also receive more moisture than it dries out but as you stop spawning clouds then the whole thing becomes much more better now once again the game takes this even further every season you have either rain or no rain but then you also have sunlight so again if you want to have more complexity you can integrate this so instead of lowering the moisture on every single position every time maybe you do the same logic as for the clouds except you check for the sun amount and then you dry out more where there's no clouds as opposed to where there are clouds so with that simple addition you add even more complexity and realism to this system without adding much more effort with all of that you end up with a really awesome soil system but as you can see it's on based on some very simple interactions for the radiation it's really the same thing just maybe you spawn it differently as i said you can have a completely separate grind to handle just radiation or simply reuse the same one then the game features some seasons with toxic rain so if that's the case then you can add a bit of radiation on the exact same logic where you add moisture from the clouds however the game also sometimes gets radiation out of nowhere so for that you can do a very similar logic except instead of spawning some moving clouds you just spawn a static radiation cloud on just one position so no visual then you add a ton of rain with radiation instantly and you despawn that cloud with that you end up with radiation pretty much popping out of nowhere now with all that there's still one thing missing from this system just like this you have some areas that are wet where there are clouds but it can be completely burned right next to it that's not really realistic in real life water moves around it doesn't say static if there's somewhere it can go so for that you can cycle through every position on the grind then you check on its neighbors if they have less moisture then you grab some from the accurate position and transfer it to the neighbor so over time the water spreads all throughout the world even if you just spawn a single cloud right in the middle of the map again some extremely simple logic the only challenge with this one is really just making it performant so as you can see this is a great system and it looks extremely complex but it definitely is something you can recreate in your own games all it takes is an underlying grid system and some clever logic to make that simplicity and look complex then of course the farming system interacts directly with the soil system it is also working on a grid just like every building and every plant has a grid position so that plant simply asks the soil system to get the moisture and radiation underneath based on the moisture the plant will grow either faster or slower and based on the radiation the final food item will either be clean or radiated again some pretty simple logic so that's how you can recreate this system in your own games if you want to pick up the game there's an affiliate link in the description and if you use that one you'll also be supporting the channel and follow the creator page on steam if you want to see more of these types of videos like i said i'm trying out this format because there were a lot of comments on my game design breakdown videos asking for a more actionable tutorial format so let me know if you find this format helpful also let me know what other games have interesting mechanics that you like to know how they work alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time
