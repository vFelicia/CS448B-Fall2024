With timestamps:

00:00 - in this video I'm going to go over what
00:01 - I would do if I was starring game
00:03 - development right now as you may know
00:05 - I've been making games for over 10 years
00:06 - now
00:07 - and it has never been easier to get
00:08 - started in game development these seven
00:10 - steps will take you from nothing to
00:12 - making a complete published game let's
00:14 - begin
00:17 - [Music]
00:21 - hello and welcome I'm your code monkey
00:24 - and this channel is all about helping
00:25 - you will learn how to make your own
00:26 - games with enough tutorials made by a
00:28 - professional indie game developer so if
00:30 - you find the video helpful consider
00:32 - subscribing okay so here are the seven
00:34 - steps that I would do if I was sharing
00:36 - my game development journey right now if
00:38 - you follow this list and by the end you
00:40 - will have become a game developer how
00:42 - much time you can put in is also up to
00:44 - you if you are super busy with a
00:46 - full-time job and can only dedicate an
00:47 - hour a day to game development then
00:49 - that's perfectly fine this is your
00:50 - journey it's not a race so do as much as
00:52 - you can the main thing is to make sure
00:55 - that you do it consistently do at least
00:57 - one thing towards your goal every single
00:59 - day this video is made possible thanks
01:01 - to these awesome supporters go to
01:03 - patreon.com/scishow decode McKee to get
01:06 - some perks and help keep the videos free
01:07 - for everyone
01:08 - here are these seven steps step number
01:11 - one start off small and spend one to two
01:13 - months making small weekly games these
01:16 - should be very similar protests
01:18 - essentially focused on a single mechanic
01:19 - don't spend too much time thinking up a
01:22 - cool unique idea be gone with this phase
01:24 - is to get acquainted with the engine and
01:25 - become more familiar with the tools at
01:27 - your disposal your main focus should be
01:29 - volume it's better to make 8 simple
01:31 - prototypes then just to really unique
01:33 - ones right now you're trying to gain
01:35 - some experience and not build a complete
01:37 - game also make sure you it's more
01:39 - various genres so don't do 8 platformers
01:42 - maybe do one fight former one top-down
01:44 - shooter when racing game one you I have
01:46 - a game and so on one way you can do is
01:48 - recreate very simple games or mechanics
01:51 - for example making pong is extremely
01:53 - simple and it will teach you about input
01:55 - and physics
01:56 - whatever you do focus on continuous
01:58 - learning also I would encourage you to
02:00 - stick with 2d since it's likely easier
02:02 - to learn unless you have a 3d modeling
02:05 - and texturing background you can draw a
02:07 - 2d sprite of whatever object you need
02:08 - much faster than you can do a 3d model
02:10 - and sticking to two dimensions also
02:13 - helps keep complexity down step number
02:15 - two and this one is actually alongside
02:17 - the first step which is watch basic and
02:20 - intermediate tutorial videos on unity
02:22 - and c-sharp do make sure you watch both
02:24 - unity specific videos as well as
02:26 - standalone c-sharp videos there's tons
02:28 - of excellent learning content out there
02:30 - related to C sharp 11 so in order to
02:32 - learn the language don't want me to
02:34 - yourself to unity
02:35 - videos watch basic videos that are right
02:37 - at your skill level but also make sure
02:39 - you check out some more advanced topics
02:41 - for example I have some more complex
02:43 - videos on path lining or making a
02:45 - quadrant system now if you start on this
02:47 - journey completely from scratch then
02:49 - it's perfectly normal if you can't
02:50 - follow 100% of the videos but even if
02:53 - you don't completely understand it you
02:54 - make sure you watch more intermediate
02:56 - complex videos doing so will expose you
02:58 - to more advanced concepts which don't
03:00 - help you learn faster step number three
03:02 - now it's time to make a complete simple
03:04 - game
03:05 - now when I say complete what I mean is
03:07 - something that you can play from start
03:09 - to finish and you could technically
03:10 - publish to the App Store or scene so
03:13 - that means it has to have a main menu
03:14 - game start gaem loop and end it should
03:18 - be as bug free as possible and it must
03:20 - have sound effects and some background
03:22 - music now this one should take you about
03:24 - 4 weeks here in this step you actually
03:27 - have two sub options you can recreate a
03:29 - specific game or build something
03:31 - original personally I would suggest you
03:34 - go with recreating a game and then add
03:36 - your own tiny twist doing so means you
03:38 - don't spend too much time on design
03:40 - since the design is already set that
03:42 - means you have more time for what really
03:44 - matters which is getting more experience
03:46 - working with the engine and building a
03:47 - complete game there are lots of designs
03:50 - that you can make in this timeframe for
03:51 - example you can make snake flappy bird
03:54 - space invaders asteroids pac-man and so
03:56 - on like I said that would be my
03:59 - suggested path but I understand that it
04:01 - might sound unappealing to make a game
04:02 - that already exists you probably started
04:04 - game development because you want to
04:05 - make your own games so if you really
04:08 - want to do something unique then go for
04:09 - it however do be careful with the scale
04:12 - of your design one extremely important
04:14 - thing you're trying to learn through
04:15 - this phase is how to scope by this time
04:18 - you won't have completed a bunch of
04:19 - prototypes so use that knowledge to
04:21 - figure out what you can do inside of
04:23 - this time frame it should be more
04:25 - complex than a simple prototype like
04:27 - pong but naturally it can be as complex
04:29 - as something like Skyrim a good run with
04:32 - thumb is to make your design for a
04:34 - 1-month game and then cut it in half
04:35 - believe me everyone falls for the trap
04:38 - of over scoping especially for beginners
04:40 - step number four and again this one is
04:43 - meant to go along with the previous step
04:45 - pick up a copy of clean code and
04:47 - research clean code principle
04:49 - this step alone will improve your skills
04:51 - as a programmer tenfold writing clean
04:54 - code helps your code be more organized
04:55 - more performant and easier to adapt and
04:58 - reuse if you've been following this
04:59 - channel for a while then you've
05:01 - certainly heard me talk about it quite a
05:02 - lot I mentioned it a lot because it is
05:05 - really that important if you write
05:07 - sloppy code it may work at first but as
05:09 - your projects you had more and more
05:10 - complex it will become more and more of
05:12 - a mess for example my latest game Baron
05:15 - round tycoon is in total ninety thousand
05:17 - lines of code law there's no way I could
05:20 - have built that game without constantly
05:21 - thinking how to structure everything so
05:24 - pick up the book read it apply it watch
05:26 - a bunch of videos on YouTube and always
05:28 - keep clean code concepts in the back of
05:30 - your mind step number five and this is
05:33 - where things are really interesting make
05:35 - a three month game and publish it to
05:37 - steam or the App Store this should be a
05:40 - proper albeit a tiny game by now you
05:42 - should be better at analyzing the scope
05:44 - of a certain game idea but again come up
05:47 - with your scope and cut it in half three
05:49 - months is enough time to make something
05:51 - small and really nice but not enough to
05:53 - do something huge focus upon making a
05:55 - title design core experience instead of
05:58 - a dozen systems that don't really work
05:59 - all together your design should be
06:01 - unique but not too unique it should
06:03 - stand out whilst also being familiar
06:05 - also take this time to analyze your own
06:07 - strengths and weaknesses so if your
06:10 - strength is art then maybe do something
06:12 - like a gorgeous pissant platformer or a
06:14 - narrative focused game on the other hand
06:17 - if your strength is programming then go
06:19 - for a more systems based game like a
06:21 - mini Tycoon or a strategy game a large
06:24 - part of this step is submitting your
06:25 - game to the Steam or App Store this
06:28 - should be your introduction to getting
06:29 - your game available for players so go
06:32 - through the whole process of adding it
06:33 - and learning how the platform works once
06:36 - it's out to interact with players and
06:38 - get feedback so you can always keep
06:40 - improving this is also going to be your
06:42 - first exposure to marketing read up on
06:44 - the basics and apply them as much as you
06:46 - can within the available time frame also
06:49 - in the end you should not worry about
06:50 - results this project is still firmly in
06:53 - the unlearning category it is meant to
06:55 - give you knowledge and experience and
06:57 - will likely not achieve financial
06:58 - success
06:59 - I've made some videos on what to do
07:01 - before and after watching your game so
07:03 - this is a great time to check those out
07:05 - and apply what you can step number six
07:08 - read code complete again from of this
07:10 - step alongside the previous one or maybe
07:12 - finish that project and then dedicate
07:14 - one month internally to studying this
07:16 - book and applying it to various
07:18 - prototypes once again a clean code is
07:20 - very important and more complex your
07:22 - project the more important it becomes
07:25 - the previous book clean code is a bit
07:27 - more condensed than this one so that's
07:29 - why I suggested that one first this one
07:31 - is the real deal it's 900 pages long and
07:34 - once you read it you will become a
07:35 - better programmer than most guaranteed
07:37 - make sure you read study and apply
07:40 - everything that you learn this step is
07:42 - really important and a must if you want
07:44 - to succeed in the next step as a game
07:46 - developer step number seven now you're
07:49 - ready for the big one make and publish a
07:52 - proper complete six month game by
07:55 - following all the previous steps you've
07:56 - made several small prototypes which help
07:58 - you get comfortable with the engine and
08:00 - the language you've made two complete
08:02 - games so you know all the various
08:04 - elements that make up a complete game
08:06 - like a main menu options music sound
08:08 - effects and making it bug free you've
08:11 - uploaded the game to the Steam or the
08:13 - App Store so you're familiar with that
08:15 - process and what those players expect
08:17 - from a complete game and you've studied
08:19 - it up on clean code principles which
08:21 - makes you ready to tackle a more complex
08:23 - more challenging project so the goal is
08:26 - a six-month game it should be larger
08:29 - than the previous three-month game but
08:30 - again be very careful with scope size
08:32 - some people start off with a six month
08:34 - project and then up taking years so be
08:37 - very wary to make sure that doesn't
08:39 - happen and again focus on making a tight
08:42 - core experience instead of making a
08:44 - 40-hour game with tons of content focus
08:46 - on making a really well-designed really
08:49 - well polished five-hour experience
08:51 - spend some time coming up with a proper
08:53 - design that has potential make some tiny
08:55 - prototypes if you have to and experiment
08:57 - with various ideas remember that players
09:00 - are very demanding so come up with
09:01 - something that is simultaneously unique
09:03 - and familiar you have six months so it's
09:06 - fine if you take two to three weeks to
09:08 - come up with your base design your
09:10 - design should be written somewhere
09:11 - either on physical
09:12 - paper or a file on your computer
09:14 - personally I prefer to design on paper
09:16 - it should contain a high-level view of
09:18 - your game and the main pillars with more
09:20 - detail for the main mechanics however it
09:22 - should not be an extremely detailed 100
09:25 - page document it should be simple enough
09:27 - to provide you with a clear direction
09:28 - but a lot of space for its rating as you
09:31 - build it once you have your idea set and
09:34 - your design stable then gets hard and
09:36 - pay close attention to what you're
09:37 - making focus on writing clean code or
09:40 - you will suffer at later stages of
09:42 - development this is not a prototype so
09:45 - don't write tons of hacks just to get
09:46 - your game working with your design you
09:49 - should know roughly what you're going to
09:50 - need to implement in the months ahead so
09:52 - always keep that in mind for example if
09:55 - you know your design involves multiple
09:56 - levels then make sure that when you're
09:58 - writing some sort of level manager class
10:00 - you write it thinking about expanding it
10:03 - to multiple levels rather than hard
10:04 - coding a single test level as your game
10:08 - progresses make sure you keep testing
10:10 - one very important concept you should
10:12 - have learned by researching clean code
10:14 - is the concept of technical debt as you
10:16 - play your game and find bugs depending
10:18 - on the severity make sure you deal with
10:20 - them rather than letting them go forward
10:22 - and telling yourself you'll fix it later
10:23 - keep everything as stable as possible as
10:26 - you add more mechanics and try to make
10:27 - sure that your game is always playable
10:29 - one of the main goals of this step is to
10:32 - actually publish your game in the end it
10:34 - should be available for purchase on
10:36 - Steam so you should work on pre-launch
10:38 - marketing and try your best to find
10:40 - success make your coming soon page as
10:42 - soon as possible and try to build up
10:44 - your wish list long before release as
10:46 - soon as you have some screenshots that
10:48 - look good enough get them out for people
10:50 - to see study some more on general
10:52 - marketing to figure out how to best
10:54 - write your store page so after 5 months
10:57 - your game should be pretty much complete
10:59 - it should be a solid experience that
11:01 - goes from start to finish as you
11:03 - approach the end make sure you leave
11:04 - some time to focus solely on polishing
11:06 - polish is what separates good games from
11:09 - great games so instead of adding more
11:11 - mechanics make sure you polish what you
11:13 - already have watch some videos on game
11:15 - juice to get an idea of the tiny details
11:18 - that can really enhance your game by now
11:21 - you should hopefully have several
11:23 - thousand wish lists gathered over
11:25 - months again go check out the videos I
11:27 - made on what to do before and after
11:29 - release to ensure your game has the best
11:31 - chances for success and as a release
11:34 - date comes then congratulations your
11:36 - game is now life
11:37 - you have successfully built a game and
11:39 - publish it for the world to pull it that
11:41 - is more than most people that new get
11:43 - started on this journey so be proud of
11:45 - yourself but at the same time this is no
11:47 - time to celebrate once the game is out
11:49 - it's critical to make sure everything is
11:50 - working correctly you don't want to go
11:52 - celebrate and then wake up 12 hours
11:54 - later with a dozen negative reviews due
11:56 - to technical issues watch the steam
11:59 - forums and reviews as closely as
12:00 - possible reply and be active interacting
12:03 - with the community answering questions
12:05 - and responding to bug reports also make
12:07 - sure you do some more marketing so send
12:10 - keys to curators websites and youtubers
12:12 - if you gathered a newsletter of people
12:15 - who fun will you make sure you notify
12:16 - them your biggest fans who will help you
12:18 - stem out from the other hundreds of
12:20 - games so by now you have your longest
12:23 - most complex and most compelling game
12:25 - out there for the world to play awesome
12:27 - once again don't obsess over the results
12:29 - hopefully you will find some success
12:32 - either in terms of copy sold or a good
12:34 - player feedback however this is your
12:36 - very first proper game and not your
12:38 - ultimate masterpiece so do keep that in
12:40 - mind
12:40 - you're only now just starting your very
12:43 - long and fruitful game development
12:44 - journey so analyze the game read the
12:46 - reviews and learn what went right and
12:48 - what went wrong so your next one is even
12:51 - better if you followed all the steps
12:53 - then congratulations after following
12:55 - them it won't be around a year from now
12:57 - and you will indeed have become a game
12:59 - developer however don't stop there game
13:02 - development and programming are a
13:03 - constant never-ending journeys there's
13:05 - always more games to make more designs
13:07 - to create more code to write and more
13:09 - things to learn so keep at it keep
13:11 - learning and keep creating I have a
13:14 - playlist with more general advice based
13:16 - on my experience as a solo indie game
13:18 - developer so check those videos out to
13:20 - learn more about this very interesting
13:21 - career I wish you all the best in your
13:24 - game development journey this video is
13:26 - made possible thanks to these awesome
13:28 - supporters go to patreon.com/scishow to
13:30 - code monkey to get some perks and help
13:32 - keep the videos free for everyone thank
13:34 - you for watching and I hope
13:36 - from this video helpful hit the like
13:37 - button if you liked the video subscribe
13:39 - for more content and I'll see you next
13:41 - time
13:44 - [Music]
13:47 - you

Cleaned transcript:

in this video I'm going to go over what I would do if I was starring game development right now as you may know I've been making games for over 10 years now and it has never been easier to get started in game development these seven steps will take you from nothing to making a complete published game let's begin hello and welcome I'm your code monkey and this channel is all about helping you will learn how to make your own games with enough tutorials made by a professional indie game developer so if you find the video helpful consider subscribing okay so here are the seven steps that I would do if I was sharing my game development journey right now if you follow this list and by the end you will have become a game developer how much time you can put in is also up to you if you are super busy with a fulltime job and can only dedicate an hour a day to game development then that's perfectly fine this is your journey it's not a race so do as much as you can the main thing is to make sure that you do it consistently do at least one thing towards your goal every single day this video is made possible thanks to these awesome supporters go to patreon.com/scishow decode McKee to get some perks and help keep the videos free for everyone here are these seven steps step number one start off small and spend one to two months making small weekly games these should be very similar protests essentially focused on a single mechanic don't spend too much time thinking up a cool unique idea be gone with this phase is to get acquainted with the engine and become more familiar with the tools at your disposal your main focus should be volume it's better to make 8 simple prototypes then just to really unique ones right now you're trying to gain some experience and not build a complete game also make sure you it's more various genres so don't do 8 platformers maybe do one fight former one topdown shooter when racing game one you I have a game and so on one way you can do is recreate very simple games or mechanics for example making pong is extremely simple and it will teach you about input and physics whatever you do focus on continuous learning also I would encourage you to stick with 2d since it's likely easier to learn unless you have a 3d modeling and texturing background you can draw a 2d sprite of whatever object you need much faster than you can do a 3d model and sticking to two dimensions also helps keep complexity down step number two and this one is actually alongside the first step which is watch basic and intermediate tutorial videos on unity and csharp do make sure you watch both unity specific videos as well as standalone csharp videos there's tons of excellent learning content out there related to C sharp 11 so in order to learn the language don't want me to yourself to unity videos watch basic videos that are right at your skill level but also make sure you check out some more advanced topics for example I have some more complex videos on path lining or making a quadrant system now if you start on this journey completely from scratch then it's perfectly normal if you can't follow 100% of the videos but even if you don't completely understand it you make sure you watch more intermediate complex videos doing so will expose you to more advanced concepts which don't help you learn faster step number three now it's time to make a complete simple game now when I say complete what I mean is something that you can play from start to finish and you could technically publish to the App Store or scene so that means it has to have a main menu game start gaem loop and end it should be as bug free as possible and it must have sound effects and some background music now this one should take you about 4 weeks here in this step you actually have two sub options you can recreate a specific game or build something original personally I would suggest you go with recreating a game and then add your own tiny twist doing so means you don't spend too much time on design since the design is already set that means you have more time for what really matters which is getting more experience working with the engine and building a complete game there are lots of designs that you can make in this timeframe for example you can make snake flappy bird space invaders asteroids pacman and so on like I said that would be my suggested path but I understand that it might sound unappealing to make a game that already exists you probably started game development because you want to make your own games so if you really want to do something unique then go for it however do be careful with the scale of your design one extremely important thing you're trying to learn through this phase is how to scope by this time you won't have completed a bunch of prototypes so use that knowledge to figure out what you can do inside of this time frame it should be more complex than a simple prototype like pong but naturally it can be as complex as something like Skyrim a good run with thumb is to make your design for a 1month game and then cut it in half believe me everyone falls for the trap of over scoping especially for beginners step number four and again this one is meant to go along with the previous step pick up a copy of clean code and research clean code principle this step alone will improve your skills as a programmer tenfold writing clean code helps your code be more organized more performant and easier to adapt and reuse if you've been following this channel for a while then you've certainly heard me talk about it quite a lot I mentioned it a lot because it is really that important if you write sloppy code it may work at first but as your projects you had more and more complex it will become more and more of a mess for example my latest game Baron round tycoon is in total ninety thousand lines of code law there's no way I could have built that game without constantly thinking how to structure everything so pick up the book read it apply it watch a bunch of videos on YouTube and always keep clean code concepts in the back of your mind step number five and this is where things are really interesting make a three month game and publish it to steam or the App Store this should be a proper albeit a tiny game by now you should be better at analyzing the scope of a certain game idea but again come up with your scope and cut it in half three months is enough time to make something small and really nice but not enough to do something huge focus upon making a title design core experience instead of a dozen systems that don't really work all together your design should be unique but not too unique it should stand out whilst also being familiar also take this time to analyze your own strengths and weaknesses so if your strength is art then maybe do something like a gorgeous pissant platformer or a narrative focused game on the other hand if your strength is programming then go for a more systems based game like a mini Tycoon or a strategy game a large part of this step is submitting your game to the Steam or App Store this should be your introduction to getting your game available for players so go through the whole process of adding it and learning how the platform works once it's out to interact with players and get feedback so you can always keep improving this is also going to be your first exposure to marketing read up on the basics and apply them as much as you can within the available time frame also in the end you should not worry about results this project is still firmly in the unlearning category it is meant to give you knowledge and experience and will likely not achieve financial success I've made some videos on what to do before and after watching your game so this is a great time to check those out and apply what you can step number six read code complete again from of this step alongside the previous one or maybe finish that project and then dedicate one month internally to studying this book and applying it to various prototypes once again a clean code is very important and more complex your project the more important it becomes the previous book clean code is a bit more condensed than this one so that's why I suggested that one first this one is the real deal it's 900 pages long and once you read it you will become a better programmer than most guaranteed make sure you read study and apply everything that you learn this step is really important and a must if you want to succeed in the next step as a game developer step number seven now you're ready for the big one make and publish a proper complete six month game by following all the previous steps you've made several small prototypes which help you get comfortable with the engine and the language you've made two complete games so you know all the various elements that make up a complete game like a main menu options music sound effects and making it bug free you've uploaded the game to the Steam or the App Store so you're familiar with that process and what those players expect from a complete game and you've studied it up on clean code principles which makes you ready to tackle a more complex more challenging project so the goal is a sixmonth game it should be larger than the previous threemonth game but again be very careful with scope size some people start off with a six month project and then up taking years so be very wary to make sure that doesn't happen and again focus on making a tight core experience instead of making a 40hour game with tons of content focus on making a really welldesigned really well polished fivehour experience spend some time coming up with a proper design that has potential make some tiny prototypes if you have to and experiment with various ideas remember that players are very demanding so come up with something that is simultaneously unique and familiar you have six months so it's fine if you take two to three weeks to come up with your base design your design should be written somewhere either on physical paper or a file on your computer personally I prefer to design on paper it should contain a highlevel view of your game and the main pillars with more detail for the main mechanics however it should not be an extremely detailed 100 page document it should be simple enough to provide you with a clear direction but a lot of space for its rating as you build it once you have your idea set and your design stable then gets hard and pay close attention to what you're making focus on writing clean code or you will suffer at later stages of development this is not a prototype so don't write tons of hacks just to get your game working with your design you should know roughly what you're going to need to implement in the months ahead so always keep that in mind for example if you know your design involves multiple levels then make sure that when you're writing some sort of level manager class you write it thinking about expanding it to multiple levels rather than hard coding a single test level as your game progresses make sure you keep testing one very important concept you should have learned by researching clean code is the concept of technical debt as you play your game and find bugs depending on the severity make sure you deal with them rather than letting them go forward and telling yourself you'll fix it later keep everything as stable as possible as you add more mechanics and try to make sure that your game is always playable one of the main goals of this step is to actually publish your game in the end it should be available for purchase on Steam so you should work on prelaunch marketing and try your best to find success make your coming soon page as soon as possible and try to build up your wish list long before release as soon as you have some screenshots that look good enough get them out for people to see study some more on general marketing to figure out how to best write your store page so after 5 months your game should be pretty much complete it should be a solid experience that goes from start to finish as you approach the end make sure you leave some time to focus solely on polishing polish is what separates good games from great games so instead of adding more mechanics make sure you polish what you already have watch some videos on game juice to get an idea of the tiny details that can really enhance your game by now you should hopefully have several thousand wish lists gathered over months again go check out the videos I made on what to do before and after release to ensure your game has the best chances for success and as a release date comes then congratulations your game is now life you have successfully built a game and publish it for the world to pull it that is more than most people that new get started on this journey so be proud of yourself but at the same time this is no time to celebrate once the game is out it's critical to make sure everything is working correctly you don't want to go celebrate and then wake up 12 hours later with a dozen negative reviews due to technical issues watch the steam forums and reviews as closely as possible reply and be active interacting with the community answering questions and responding to bug reports also make sure you do some more marketing so send keys to curators websites and youtubers if you gathered a newsletter of people who fun will you make sure you notify them your biggest fans who will help you stem out from the other hundreds of games so by now you have your longest most complex and most compelling game out there for the world to play awesome once again don't obsess over the results hopefully you will find some success either in terms of copy sold or a good player feedback however this is your very first proper game and not your ultimate masterpiece so do keep that in mind you're only now just starting your very long and fruitful game development journey so analyze the game read the reviews and learn what went right and what went wrong so your next one is even better if you followed all the steps then congratulations after following them it won't be around a year from now and you will indeed have become a game developer however don't stop there game development and programming are a constant neverending journeys there's always more games to make more designs to create more code to write and more things to learn so keep at it keep learning and keep creating I have a playlist with more general advice based on my experience as a solo indie game developer so check those videos out to learn more about this very interesting career I wish you all the best in your game development journey this video is made possible thanks to these awesome supporters go to patreon.com/scishow to code monkey to get some perks and help keep the videos free for everyone thank you for watching and I hope from this video helpful hit the like button if you liked the video subscribe for more content and I'll see you next time you
