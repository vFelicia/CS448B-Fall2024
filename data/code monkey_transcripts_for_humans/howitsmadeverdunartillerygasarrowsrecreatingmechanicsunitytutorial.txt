With timestamps:

00:00 - hello and welcome i'm your code monkey
00:02 - here is the game for done which features
00:03 - some interesting mechanics and systems
00:05 - let's inspect and remake three mechanics
00:07 - from the game first the map artillery
00:10 - then the gas system with the masks and
00:13 - finally the mini-map drawn arrows i will
00:15 - cover how they work how i remade them
00:17 - and how you two can make something like
00:19 - them just in your own games
00:21 - after watching this video you can go
00:22 - ahead and download the project files and
00:24 - inspect all the sources for yourself
00:26 - this video is part of my how it's made
00:28 - series where i remake interesting
00:29 - mechanics from various games
00:31 - go watch the home playlist link in the
00:32 - description if you want to learn some
00:34 - more about some other systems like for
00:35 - example the scout probe launcher from
00:37 - other wilds or the cleaning minigame
00:40 - from rover mechanic simulator or the
00:42 - soil moisture system from enzo in the
00:43 - world apart and follow the curator page
00:45 - on sim if you want to see more of these
00:47 - types of videos also if you haven't
00:49 - already played the game well then good
00:50 - news this one is actually part of the
00:52 - latest humboldt bundle which is made in
00:54 - partnership with unity themselves the
00:56 - bundle includes games as well as tons of
00:58 - awesome assets for you to make your own
01:00 - fps games it's a huge discount so
01:02 - definitely get it if you have any
01:04 - interest in making fps games at all and
01:06 - of course with this being a humble
01:07 - bundle it means part of the proceeds go
01:09 - to charity which is always great also
01:11 - this friday on the 24th i won't be
01:13 - participating in the official unity live
01:15 - stream we're going to play some verdun
01:17 - i'm going to talk about a bit about how
01:18 - i remade these mechanics i will be
01:20 - answering questions in chat and we will
01:22 - do a bunch of mini reviews and showcases
01:24 - of the various assets and bundle so if
01:26 - you like live streams then come check it
01:28 - out alright so first just a quick
01:30 - overview of the game it's a world war
01:32 - one first person shooter so just by
01:34 - itself that makes it a pretty unique
01:36 - setting all of the weapons and maps are
01:38 - very authentic you've got lots of
01:40 - bolt-action rifles and pistols some
01:42 - mortar artillery and tons of mustard gas
01:44 - it's a pretty unforgiving game very fast
01:46 - time to kill both action rifles kill
01:49 - mainly with just a single body shot
01:51 - the main game mode is called front lines
01:53 - where you're constantly fighting to
01:54 - capture the next front line and then
01:55 - defending it from the enemy it's a
01:57 - pretty fun back and forth on a very
01:59 - unique setting so if you're a fan of
02:01 - first person shooters and this one is
02:02 - certainly worth a try and like i
02:04 - mentioned this one is included in the
02:06 - bundle so even if you pick it up mainly
02:08 - for the assets definitely give the game
02:09 - a try also fun fact this game was made
02:12 - with yinty okay so let's inspect and
02:14 - remake three mechanics from the game
02:16 - starting off with the map artillery
02:19 - so in the game one of the classes is an
02:21 - officer and the officer has limited
02:23 - weapons but also has the ability to call
02:25 - in airstrikes and give some orders
02:27 - the way the airstrike works is you press
02:29 - a button then you look at a certain
02:31 - point in the map anywhere in front of
02:33 - you
02:34 - an indicator shows up telling you
02:35 - exactly where the mortise won't land so
02:37 - then you press another button and
02:39 - sometime after that the mortars fall
02:40 - down and blow up the whole area it's a
02:43 - pretty fun mechanic and makes this class
02:45 - pretty interesting so let's first think
02:46 - about how we can remake this well in
02:49 - reality this mechanic is actually quite
02:50 - simple all you really need is just to
02:52 - know where in the world the player is
02:54 - looking at so based on that you can
02:56 - already guess that we're going to be
02:57 - using a simple raycast
02:59 - so over here is my version i've got my
03:01 - player character just a standard first
03:03 - person character controller and for the
03:05 - map i'm using a very simple unity ring
03:08 - so now i can look anywhere and press a
03:10 - button and when i do the target pointer
03:12 - shows up it's really nice really
03:14 - animated and wherever i look you can see
03:16 - that it's placed on the exact perfect
03:17 - position so it perfectly matches the
03:19 - terrain so i can look around to make
03:21 - sure i have the right target position
03:23 - then i simply press a button and now the
03:25 - target goes away the motors get fired
03:27 - and after a while they simply fall down
03:28 - and explode and blow up the whole area
03:30 - all alright awesome so as you can see
03:32 - pretty simple and works pretty great so
03:35 - let's see individually all the various
03:36 - parts for making this work like i said i
03:39 - have my player character with a very
03:40 - basic first person controller this is
03:42 - the kind of thing you can easily build
03:44 - yourself or maybe you can use unity star
03:46 - assets controller then for the map like
03:48 - i said i'm using a simple terrain object
03:51 - so i just made it add a bunch of hills a
03:53 - bunch of nice textures and there it is
03:55 - and also very importantly the terrain
03:57 - has a terrain collider that's very
03:59 - important then in code i've got a simple
04:01 - script attached to the player so here it
04:03 - is and like i said essentially since the
04:05 - mouse is locked at the center of the
04:07 - screen then all we really need to know
04:08 - is the mouse position in the world which
04:10 - is the same thing that i covered in the
04:11 - mouse video so as you can see over here
04:13 - all i'm doing is a physics raycast so
04:15 - i'm doing that it starts from the player
04:17 - camera position the raycast direction is
04:20 - the exact same one as the player camera
04:22 - forward transform then for the distance
04:24 - i just put max valley so it's
04:25 - essentially infinite and finally just
04:27 - got a simple layer mask so it detects
04:29 - only the layer so that's it that's how
04:31 - simple the raycast is then the raycast
04:33 - info is stored over here on the raycast
04:35 - hit and one of the things that this
04:37 - structure has is the point so this is
04:39 - the exact point in world space where we
04:41 - hit so with that then i just simply have
04:43 - a very basic target visual object
04:45 - so here it is it's just a very very
04:47 - basic mesh and i also added an animator
04:49 - just to have a nice up and down
04:51 - animation so pretty simple then all i do
04:53 - is just position that object exactly
04:55 - where the raycast hit and for the input
04:57 - logic and the state handling as you can
04:59 - see i've got a very basic state machine
05:00 - so just two states either normal or the
05:03 - aiming target
05:04 - so while it's normal i just listen to a
05:06 - key input if the player presses that
05:08 - then we go into the aiming target mode
05:10 - and it shows the target visual then
05:12 - while it's in here it does the
05:13 - raycasture then it tests for another key
05:15 - input and if the player hits that then
05:17 - we do spawn the artillery explosion and
05:20 - here i just had a simple timer just so
05:22 - that it's not instant
05:23 - just like the game when you press it
05:24 - doesn't explode right away takes a while
05:26 - for the motors to actually get fired and
05:28 - land
05:29 - and for this one i use the function
05:30 - timer so this is a class for my
05:32 - utilities which i actually covered in
05:33 - detail in another video
05:35 - it is pretty simple and very useful all
05:37 - it does is really just triggers an
05:38 - action after a certain time so it's
05:40 - perfect for doing exactly this how it
05:42 - works is really very simple it just has
05:44 - a simple flow timer constantly counting
05:46 - down once the timer is elapsed and it
05:48 - simply triggers the action and for the
05:50 - action this is of type action
05:52 - this is a type of delegate which you can
05:54 - go watch this video if you don't know
05:55 - what they are so by just using that i
05:58 - can say that i want to spawn the
05:59 - artillery explosion after two seconds
06:01 - and then for this one it's also very
06:02 - simple all it really does is just
06:04 - instantiate a bunch of vfx explosion
06:07 - prefabs just instantiate them on the
06:09 - artillery position then just add a bunch
06:11 - of randomness so that it's not always
06:13 - exactly the same so just spawn it and
06:15 - destroy the explosion and of course if
06:17 - you wanted the artillery to deal damage
06:19 - then this is where you would place that
06:20 - logic then the final piece of the puzzle
06:23 - is the screen shake
06:24 - so for that i use the syn machine
06:26 - impulse component here on the player
06:28 - i've got a cinemachine impulse source so
06:31 - it's set up with one of the preset
06:32 - signals so just some 6d shake very
06:35 - simple so this is the info source and
06:37 - then on the virtual camera i've also got
06:39 - an impulse listener so with that through
06:41 - the code all i need to do is just go
06:42 - into the impulse source and generate
06:44 - some impulse so that's all it does to do
06:46 - some very simple screen shake so when
06:48 - you put it all together here's the final
06:49 - result i start off normal then i press a
06:51 - button it shows the target i can aim
06:53 - around and look and say that i want to
06:55 - blow up this area then i press the
06:56 - button the mortars go away and after a
06:58 - few seconds boom they fall down and they
07:00 - explode the whole area all right awesome
07:03 - as you can see it's some of this it's
07:05 - pretty simple some pretty basic logic
07:07 - it's mainly just a raycast in a bunch of
07:09 - polish but yep it looks pretty great
07:11 - alright great by the way if you find the
07:13 - video helpful please hit the like button
07:15 - it's a tiny thing but it really does
07:17 - help thanks next up let's look at the
07:19 - gas system so with the game being set
07:21 - during world war one then of course it
07:23 - features some mustard gas some officers
07:26 - have the ability to drop mustard bombs
07:28 - instead of mortars the logic for firing
07:30 - that is pretty much exactly the same so
07:32 - just point somewhere and press the
07:33 - button except instead of spawning
07:35 - mortars it spawns some gas
07:37 - then for the gas itself if i go inside
07:39 - of it then the screen gets all blurry
07:41 - everything is messed up and if i stay
07:43 - inside then the player takes damage
07:45 - until eventually dies
07:46 - so to counter that every player has a
07:48 - gas mask which you can put on
07:50 - it slightly limits your vision but it
07:52 - enables you to stay inside the gas
07:55 - so if you have the mask on i can walk
07:56 - around and the screen is not blurry and
07:58 - i'm not taking any damage alright so
08:00 - that's it another interesting mechanic
08:03 - over here is my recreation i've got my
08:05 - character in my map and then over there
08:07 - as you can see there's a bunch of gas so
08:09 - if i go inside there you go the whole
08:11 - screen is blurry and i'm starting to
08:13 - take some damage but then i also have
08:15 - the ability to put on a gas mask and if
08:17 - i do yep it covers the screen by quite a
08:20 - bit so my vision is quite limited
08:23 - however as you can see my health is no
08:24 - longer going down and my screen is no
08:26 - longer blurry
08:27 - so i can go outside take off the mask
08:30 - and as i go inside put on the mask first
08:32 - go inside and yep no damage all of it
08:34 - looks pretty great
08:36 - alright so this is another great
08:37 - mechanic let's see how all this works
08:40 - now the core of it is the gas element
08:42 - itself and for the visual this one is
08:44 - really just a very basic particle system
08:47 - so here it is
08:48 - very very simple
08:50 - it just got the shape of a cone so it's
08:51 - running particles all around this area
08:53 - then for the emission just spawning them
08:55 - every once in a while
08:57 - for the speed they are simply moving
08:58 - upwards and slowly increasing in size
09:01 - and then for the color over a lifetime
09:03 - they simply fade out in the end and for
09:05 - the renderer just using some basic
09:07 - particles so that's a visual pretty
09:09 - simple then for identifying if the
09:10 - player is inside the gas area for that
09:13 - the gas has a simple sphere converter
09:16 - and of course it's set to trigger so it
09:17 - doesn't work as a solid object
09:19 - and over here on the layer it is placed
09:21 - on the gas layer then on the player i've
09:23 - got a simple script and on this script
09:26 - over here on the update all i'm doing is
09:28 - just a physics overlap sphere
09:30 - so what this does is it locates all of
09:32 - the colliders within a certain range
09:35 - so i'm just using the transform position
09:36 - and a small range so essentially locate
09:38 - some of the colliders directly on top of
09:40 - the player and then of course i'm using
09:42 - a simple layer mask in order to only
09:44 - identify the gas layers so this finds
09:46 - all the colliders near the player
09:48 - and if there's more than one then the
09:50 - player is inside a gas object so with
09:52 - that then just a simple logic to test if
09:54 - the mask is on and if it is not on then
09:57 - i simply do a basic damage timer this is
09:59 - just so i don't deal damage on literally
10:01 - every frame but rather it's time based
10:03 - so just a basic timer and just deal some
10:05 - damage to the player and for the online
10:07 - damage over here i am once again reusing
10:10 - the health system which was made on the
10:11 - very first video on this channel many
10:13 - years ago
10:14 - it's a very simple but very useful
10:16 - health system so on the script all i'm
10:18 - doing is just dealing damage to the
10:19 - player and then simply updating the ui
10:21 - element so that's how it detects if the
10:23 - player is inside a gas area just a basic
10:25 - physics query then for the visual
10:27 - difference as you can see like this the
10:29 - game is looking normal and if i go
10:30 - inside yep it gets on blurry and much
10:32 - more green so this is the original
10:34 - difference in order to apply that it's
10:36 - really just a volume set to a local so
10:38 - that means that this post-processing
10:40 - profile is only applied if the player if
10:42 - the camera is inside of this sphere
10:44 - collector and for the effects it's all
10:46 - just pretty basic so just add a channel
10:48 - mixer to increase the green and then
10:50 - actually unity doesn't come with a
10:52 - standard blur effect but it does have
10:54 - depth of field so i just added this with
10:56 - a distance of zero so it pretty much
10:58 - blurs the whole thing also one very
11:00 - important thing for this to work like
11:01 - you mentioned this object is on a
11:02 - separate layer
11:04 - so if we go into the camera in order for
11:06 - that to be effective we need to go into
11:08 - the camera and down here on the
11:10 - environment we can see the volume mask
11:12 - so if you want that layer that post
11:14 - processing to be applied to this camera
11:15 - then we need to make sure the gas layer
11:17 - is also selected so with that if i'm
11:19 - like this and looks normal and if i go
11:21 - inside the collateral yep it turns into
11:22 - the other effects
11:24 - all right so far so good then for the
11:26 - final piece of the puzzle just the gas
11:28 - mask this one is really very basic it's
11:30 - literally just a image in the ui so if i
11:32 - go inside the canvas inside the gas mask
11:35 - if there it is it is literally just a
11:36 - texture occupying the whole screen and
11:39 - to make it a bit more fun i just had a
11:41 - very basic animation that literally just
11:43 - increases and decreases the scale of the
11:44 - image so the animator just has a basic
11:46 - is walking parameter so when the player
11:49 - is walking this one sets to true and
11:50 - when it is true then it triggers the
11:51 - transition
11:53 - goes into the gas moving animation and
11:54 - when that one is false goes back into
11:56 - the gas at all so very basic and finally
11:58 - to polish it all up i just had a simple
12:00 - fade
12:01 - so this is just a black image occupying
12:03 - the whole screen and i just got a simple
12:05 - animation that similarly starts with an
12:07 - alpha one and then it goes down so just
12:08 - like that just start spike and fades out
12:11 - so this is very useful for triggering
12:13 - the transition so it doesn't seem like
12:15 - the mass just appears instantly instead
12:17 - there's a nice fade forward all right so
12:19 - here is the final result i've got my
12:21 - player i've got my health bar so i'm on
12:23 - full health and everything looks normal
12:25 - and as i go inside yep i start taking
12:27 - damage and everything is blurry and very
12:29 - green now i go outside and now i'm safe
12:31 - now i've put on the mask everything
12:33 - looks good and i can safely go inside
12:35 - there and if there you go all the post
12:37 - processing is normal i'm not taking
12:38 - damage and everything looks great and if
12:40 - i take it off then yep there it is
12:43 - all right so that's the gas system it's
12:45 - just a very clever use of colliders and
12:47 - post processing volumes okay now for the
12:50 - final mechanic let's look at the minimap
12:52 - drawn arrows this is a really awesome
12:54 - feature that is perfect for any game
12:56 - where you want to give some orders so if
12:58 - you have a multiplayer strategy game or
13:00 - maybe you're making something like door
13:02 - kickers then this is a great mechanic so
13:04 - here it is in the game if you're playing
13:06 - with the officer class you can bring up
13:08 - the mini map and then with the mouse you
13:10 - can click and drag and it draws an arrow
13:12 - this is for you to give orders to the
13:14 - rest of the squad to tell them exactly
13:15 - where to go so the interesting part is
13:17 - that it's not a straight arrow you can
13:19 - really draw the exact path that you want
13:21 - so i can make the arrow in any shape to
13:23 - tell my teammates where to go and
13:25 - exactly what areas to avoid so this is a
13:27 - great mechanic for pretty much any team
13:29 - based game here is my version i've got
13:31 - my character and i'm walking around i
13:33 - can press a button in order to bring up
13:34 - the minimap it unlocks the mouse and now
13:37 - i can click and drag in order to draw an
13:38 - arrow in any shape in order to tell my
13:40 - characters exactly where to go so i
13:42 - click and i can do pretty much any shape
13:44 - that i want and everything draws
13:46 - perfectly okay now for this one in order
13:48 - to remake it i actually had to go and
13:50 - re-watch another video of mine since i
13:52 - forgot about how one thing was done it
13:54 - was a video where i covered how to draw
13:56 - dynamic meshes as a ui element
13:58 - specifically that one was making a stats
14:00 - radar chart so this is really the
14:03 - perfect moment for me to remind you that
14:04 - i really don't have infinite knowledge
14:06 - stored in my brain at all times i'm just
14:09 - like you whenever i don't know or don't
14:11 - remember how to do something i really
14:12 - just go searching for it and in this
14:14 - case i knew i covered this topic
14:16 - previously so i just searched my own
14:18 - videos and watched it again to remember
14:19 - how it works for making the visual i
14:21 - knew i needed a dynamic mesh so that was
14:24 - pretty easy i covered dynamic meshes in
14:26 - detail in another video it's very useful
14:28 - to know how to do that you just need to
14:30 - assign some vertices manually in order
14:32 - to draw the mesh now thankfully i've got
14:34 - this super useful mesh utils class that
14:36 - i made quite a while ago it's included
14:38 - in the project files for this video so
14:41 - in here i've got all kinds of functions
14:42 - for dealing with meshes
14:44 - specifically i've got a bunch of
14:45 - functions where i can already easily add
14:47 - another point to a previous mesh and the
14:49 - thing that i had to go re-watch that
14:51 - other video to remember is that you can
14:52 - assign a custom mesh to a ui element all
14:55 - you need to do is use the canvas render
14:57 - component and then call set material and
14:59 - set mesh
15:00 - that way you can draw dynamic meshes
15:01 - directly as a ui element so to make this
15:04 - mechanic work all you really need to
15:06 - know is how to work with dynamic meshes
15:08 - so i've got some basic logic for testing
15:10 - when the mouse button is down while it
15:12 - is held down and when let's go so when
15:14 - the player presses the mouse button i
15:16 - simply create a mesh directly on the
15:18 - player's mouse position so i use the
15:20 - rect transform utility in order to
15:22 - convert the input mouse position this
15:23 - one is in screen space and i use this
15:25 - function in order to convert from screen
15:27 - space into the local space of this
15:29 - transform so do that and we have the
15:31 - anchored position and then just create a
15:32 - mesh so literally just a point so create
15:35 - it and set it on the render and then on
15:37 - every update while the mouse is held
15:39 - down once again calculate the mouse
15:41 - local position then i just do a very
15:43 - basic distance check so this is just to
15:45 - make sure that it doesn't draw a new
15:46 - part on literally every frame so it
15:49 - waits until the mouse moves a little bit
15:51 - then i just count like the forward
15:52 - vector so that's this position minus the
15:54 - last position so that gives me the
15:56 - vector which is exactly how the mouse
15:58 - moved since the last point then since we
16:00 - have the new point i really just call
16:02 - the function in order to add it to my
16:04 - previous mesh so this function just
16:06 - takes the previous mesh it grabs the
16:08 - last two vertices so the last left and
16:10 - right
16:10 - and creates the new ones and simply adds
16:12 - it onto the mesh so for adding again
16:14 - just some basic mesh generation you just
16:17 - get the previous vertices uv triangles
16:19 - and set them all up so this looks
16:21 - slightly confusing but it's really quite
16:23 - simple once you know how to work with
16:24 - dynamic meshes with that i can simply
16:26 - click and drag in order to dynamically
16:28 - draw a line now the next part is the
16:29 - arrow and for that i literally just made
16:32 - a simple arrow texture and then as it's
16:34 - drawing after drawing the last point
16:36 - it simply places the airwreck
16:38 - transformer on that position and simply
16:40 - rotates it based on the forward vector
16:42 - and this is how you can convert a simple
16:44 - vector direction into euler angles and
16:46 - the final thing is simply the mouse so i
16:48 - just have a script attached to the
16:50 - player and it's listening to some events
16:52 - on the ui when the player press the
16:54 - button simply toggles the ui and when
16:57 - the ui is shown then it sets the cursor
16:59 - unlock state to none so it unlocks the
17:01 - cursor and when the ui hides then simply
17:04 - once again locks the cursor and then
17:05 - just enabling and disabling the player
17:07 - character controller so the player
17:08 - doesn't move and doesn't rotate as it
17:10 - moves the mouse so when you put it all
17:12 - together here is the final result so
17:14 - i've got my player character walking
17:15 - around i can press a button and up comes
17:18 - out the map and now anywhere i want i
17:20 - can just click and drag and tell my
17:22 - teammates in order to go through this
17:23 - area in order to attack this area
17:25 - so i can click i can drag i can make any
17:27 - shape that i want and yep it looks
17:29 - pretty great pretty dynamic alright
17:31 - awesome so as you can see this mechanic
17:33 - is also pretty simple to remake all you
17:35 - really need to know is how to work with
17:37 - dynamic meshes and that's pretty much it
17:39 - so if you have a multiplayer game then
17:41 - this is a great mechanic in order to
17:42 - enable some more tactical gameplay or
17:45 - maybe in a single player game you can
17:46 - use this to let the player draw some
17:48 - notes on their map alright so there you
17:50 - have it that's how you can recreate
17:52 - three interesting mechanics from verdun
17:54 - these are pretty interesting and as you
17:55 - can see they are definitely something
17:56 - you can implement in your own games if
17:58 - you want to try out the game for
18:00 - yourself check out the bundle and of
18:01 - course the bundle also contains tons of
18:03 - tools and assets perfect for making any
18:05 - fps game so if that's a genre you'd like
18:08 - to make then definitely grab the bundle
18:10 - it's an excellent discount also like i
18:12 - mentioned this friday on the 24th i
18:14 - won't be participating in the official
18:15 - unity live stream we're going to play
18:17 - around with the bumble assets and i
18:18 - won't be there answering any questions
18:20 - in chat so if you like watching live
18:22 - streams come ahead and say hi check out
18:24 - the full how it's made playlist follow
18:25 - the creator page on steam and like this
18:27 - video if you'd like to see more of these
18:29 - types of videos also let me know what
18:30 - other games have interesting mechanics
18:32 - that you'd like to know how they work
18:34 - alright hope that's useful check out
18:35 - these videos to learn some more thanks
18:37 - to these awesome patreon supporters for
18:39 - making these videos possible thank you
18:41 - for watching and i'll see you next time
18:47 - [Music]

Cleaned transcript:

hello and welcome i'm your code monkey here is the game for done which features some interesting mechanics and systems let's inspect and remake three mechanics from the game first the map artillery then the gas system with the masks and finally the minimap drawn arrows i will cover how they work how i remade them and how you two can make something like them just in your own games after watching this video you can go ahead and download the project files and inspect all the sources for yourself this video is part of my how it's made series where i remake interesting mechanics from various games go watch the home playlist link in the description if you want to learn some more about some other systems like for example the scout probe launcher from other wilds or the cleaning minigame from rover mechanic simulator or the soil moisture system from enzo in the world apart and follow the curator page on sim if you want to see more of these types of videos also if you haven't already played the game well then good news this one is actually part of the latest humboldt bundle which is made in partnership with unity themselves the bundle includes games as well as tons of awesome assets for you to make your own fps games it's a huge discount so definitely get it if you have any interest in making fps games at all and of course with this being a humble bundle it means part of the proceeds go to charity which is always great also this friday on the 24th i won't be participating in the official unity live stream we're going to play some verdun i'm going to talk about a bit about how i remade these mechanics i will be answering questions in chat and we will do a bunch of mini reviews and showcases of the various assets and bundle so if you like live streams then come check it out alright so first just a quick overview of the game it's a world war one first person shooter so just by itself that makes it a pretty unique setting all of the weapons and maps are very authentic you've got lots of boltaction rifles and pistols some mortar artillery and tons of mustard gas it's a pretty unforgiving game very fast time to kill both action rifles kill mainly with just a single body shot the main game mode is called front lines where you're constantly fighting to capture the next front line and then defending it from the enemy it's a pretty fun back and forth on a very unique setting so if you're a fan of first person shooters and this one is certainly worth a try and like i mentioned this one is included in the bundle so even if you pick it up mainly for the assets definitely give the game a try also fun fact this game was made with yinty okay so let's inspect and remake three mechanics from the game starting off with the map artillery so in the game one of the classes is an officer and the officer has limited weapons but also has the ability to call in airstrikes and give some orders the way the airstrike works is you press a button then you look at a certain point in the map anywhere in front of you an indicator shows up telling you exactly where the mortise won't land so then you press another button and sometime after that the mortars fall down and blow up the whole area it's a pretty fun mechanic and makes this class pretty interesting so let's first think about how we can remake this well in reality this mechanic is actually quite simple all you really need is just to know where in the world the player is looking at so based on that you can already guess that we're going to be using a simple raycast so over here is my version i've got my player character just a standard first person character controller and for the map i'm using a very simple unity ring so now i can look anywhere and press a button and when i do the target pointer shows up it's really nice really animated and wherever i look you can see that it's placed on the exact perfect position so it perfectly matches the terrain so i can look around to make sure i have the right target position then i simply press a button and now the target goes away the motors get fired and after a while they simply fall down and explode and blow up the whole area all alright awesome so as you can see pretty simple and works pretty great so let's see individually all the various parts for making this work like i said i have my player character with a very basic first person controller this is the kind of thing you can easily build yourself or maybe you can use unity star assets controller then for the map like i said i'm using a simple terrain object so i just made it add a bunch of hills a bunch of nice textures and there it is and also very importantly the terrain has a terrain collider that's very important then in code i've got a simple script attached to the player so here it is and like i said essentially since the mouse is locked at the center of the screen then all we really need to know is the mouse position in the world which is the same thing that i covered in the mouse video so as you can see over here all i'm doing is a physics raycast so i'm doing that it starts from the player camera position the raycast direction is the exact same one as the player camera forward transform then for the distance i just put max valley so it's essentially infinite and finally just got a simple layer mask so it detects only the layer so that's it that's how simple the raycast is then the raycast info is stored over here on the raycast hit and one of the things that this structure has is the point so this is the exact point in world space where we hit so with that then i just simply have a very basic target visual object so here it is it's just a very very basic mesh and i also added an animator just to have a nice up and down animation so pretty simple then all i do is just position that object exactly where the raycast hit and for the input logic and the state handling as you can see i've got a very basic state machine so just two states either normal or the aiming target so while it's normal i just listen to a key input if the player presses that then we go into the aiming target mode and it shows the target visual then while it's in here it does the raycasture then it tests for another key input and if the player hits that then we do spawn the artillery explosion and here i just had a simple timer just so that it's not instant just like the game when you press it doesn't explode right away takes a while for the motors to actually get fired and land and for this one i use the function timer so this is a class for my utilities which i actually covered in detail in another video it is pretty simple and very useful all it does is really just triggers an action after a certain time so it's perfect for doing exactly this how it works is really very simple it just has a simple flow timer constantly counting down once the timer is elapsed and it simply triggers the action and for the action this is of type action this is a type of delegate which you can go watch this video if you don't know what they are so by just using that i can say that i want to spawn the artillery explosion after two seconds and then for this one it's also very simple all it really does is just instantiate a bunch of vfx explosion prefabs just instantiate them on the artillery position then just add a bunch of randomness so that it's not always exactly the same so just spawn it and destroy the explosion and of course if you wanted the artillery to deal damage then this is where you would place that logic then the final piece of the puzzle is the screen shake so for that i use the syn machine impulse component here on the player i've got a cinemachine impulse source so it's set up with one of the preset signals so just some 6d shake very simple so this is the info source and then on the virtual camera i've also got an impulse listener so with that through the code all i need to do is just go into the impulse source and generate some impulse so that's all it does to do some very simple screen shake so when you put it all together here's the final result i start off normal then i press a button it shows the target i can aim around and look and say that i want to blow up this area then i press the button the mortars go away and after a few seconds boom they fall down and they explode the whole area all right awesome as you can see it's some of this it's pretty simple some pretty basic logic it's mainly just a raycast in a bunch of polish but yep it looks pretty great alright great by the way if you find the video helpful please hit the like button it's a tiny thing but it really does help thanks next up let's look at the gas system so with the game being set during world war one then of course it features some mustard gas some officers have the ability to drop mustard bombs instead of mortars the logic for firing that is pretty much exactly the same so just point somewhere and press the button except instead of spawning mortars it spawns some gas then for the gas itself if i go inside of it then the screen gets all blurry everything is messed up and if i stay inside then the player takes damage until eventually dies so to counter that every player has a gas mask which you can put on it slightly limits your vision but it enables you to stay inside the gas so if you have the mask on i can walk around and the screen is not blurry and i'm not taking any damage alright so that's it another interesting mechanic over here is my recreation i've got my character in my map and then over there as you can see there's a bunch of gas so if i go inside there you go the whole screen is blurry and i'm starting to take some damage but then i also have the ability to put on a gas mask and if i do yep it covers the screen by quite a bit so my vision is quite limited however as you can see my health is no longer going down and my screen is no longer blurry so i can go outside take off the mask and as i go inside put on the mask first go inside and yep no damage all of it looks pretty great alright so this is another great mechanic let's see how all this works now the core of it is the gas element itself and for the visual this one is really just a very basic particle system so here it is very very simple it just got the shape of a cone so it's running particles all around this area then for the emission just spawning them every once in a while for the speed they are simply moving upwards and slowly increasing in size and then for the color over a lifetime they simply fade out in the end and for the renderer just using some basic particles so that's a visual pretty simple then for identifying if the player is inside the gas area for that the gas has a simple sphere converter and of course it's set to trigger so it doesn't work as a solid object and over here on the layer it is placed on the gas layer then on the player i've got a simple script and on this script over here on the update all i'm doing is just a physics overlap sphere so what this does is it locates all of the colliders within a certain range so i'm just using the transform position and a small range so essentially locate some of the colliders directly on top of the player and then of course i'm using a simple layer mask in order to only identify the gas layers so this finds all the colliders near the player and if there's more than one then the player is inside a gas object so with that then just a simple logic to test if the mask is on and if it is not on then i simply do a basic damage timer this is just so i don't deal damage on literally every frame but rather it's time based so just a basic timer and just deal some damage to the player and for the online damage over here i am once again reusing the health system which was made on the very first video on this channel many years ago it's a very simple but very useful health system so on the script all i'm doing is just dealing damage to the player and then simply updating the ui element so that's how it detects if the player is inside a gas area just a basic physics query then for the visual difference as you can see like this the game is looking normal and if i go inside yep it gets on blurry and much more green so this is the original difference in order to apply that it's really just a volume set to a local so that means that this postprocessing profile is only applied if the player if the camera is inside of this sphere collector and for the effects it's all just pretty basic so just add a channel mixer to increase the green and then actually unity doesn't come with a standard blur effect but it does have depth of field so i just added this with a distance of zero so it pretty much blurs the whole thing also one very important thing for this to work like you mentioned this object is on a separate layer so if we go into the camera in order for that to be effective we need to go into the camera and down here on the environment we can see the volume mask so if you want that layer that post processing to be applied to this camera then we need to make sure the gas layer is also selected so with that if i'm like this and looks normal and if i go inside the collateral yep it turns into the other effects all right so far so good then for the final piece of the puzzle just the gas mask this one is really very basic it's literally just a image in the ui so if i go inside the canvas inside the gas mask if there it is it is literally just a texture occupying the whole screen and to make it a bit more fun i just had a very basic animation that literally just increases and decreases the scale of the image so the animator just has a basic is walking parameter so when the player is walking this one sets to true and when it is true then it triggers the transition goes into the gas moving animation and when that one is false goes back into the gas at all so very basic and finally to polish it all up i just had a simple fade so this is just a black image occupying the whole screen and i just got a simple animation that similarly starts with an alpha one and then it goes down so just like that just start spike and fades out so this is very useful for triggering the transition so it doesn't seem like the mass just appears instantly instead there's a nice fade forward all right so here is the final result i've got my player i've got my health bar so i'm on full health and everything looks normal and as i go inside yep i start taking damage and everything is blurry and very green now i go outside and now i'm safe now i've put on the mask everything looks good and i can safely go inside there and if there you go all the post processing is normal i'm not taking damage and everything looks great and if i take it off then yep there it is all right so that's the gas system it's just a very clever use of colliders and post processing volumes okay now for the final mechanic let's look at the minimap drawn arrows this is a really awesome feature that is perfect for any game where you want to give some orders so if you have a multiplayer strategy game or maybe you're making something like door kickers then this is a great mechanic so here it is in the game if you're playing with the officer class you can bring up the mini map and then with the mouse you can click and drag and it draws an arrow this is for you to give orders to the rest of the squad to tell them exactly where to go so the interesting part is that it's not a straight arrow you can really draw the exact path that you want so i can make the arrow in any shape to tell my teammates where to go and exactly what areas to avoid so this is a great mechanic for pretty much any team based game here is my version i've got my character and i'm walking around i can press a button in order to bring up the minimap it unlocks the mouse and now i can click and drag in order to draw an arrow in any shape in order to tell my characters exactly where to go so i click and i can do pretty much any shape that i want and everything draws perfectly okay now for this one in order to remake it i actually had to go and rewatch another video of mine since i forgot about how one thing was done it was a video where i covered how to draw dynamic meshes as a ui element specifically that one was making a stats radar chart so this is really the perfect moment for me to remind you that i really don't have infinite knowledge stored in my brain at all times i'm just like you whenever i don't know or don't remember how to do something i really just go searching for it and in this case i knew i covered this topic previously so i just searched my own videos and watched it again to remember how it works for making the visual i knew i needed a dynamic mesh so that was pretty easy i covered dynamic meshes in detail in another video it's very useful to know how to do that you just need to assign some vertices manually in order to draw the mesh now thankfully i've got this super useful mesh utils class that i made quite a while ago it's included in the project files for this video so in here i've got all kinds of functions for dealing with meshes specifically i've got a bunch of functions where i can already easily add another point to a previous mesh and the thing that i had to go rewatch that other video to remember is that you can assign a custom mesh to a ui element all you need to do is use the canvas render component and then call set material and set mesh that way you can draw dynamic meshes directly as a ui element so to make this mechanic work all you really need to know is how to work with dynamic meshes so i've got some basic logic for testing when the mouse button is down while it is held down and when let's go so when the player presses the mouse button i simply create a mesh directly on the player's mouse position so i use the rect transform utility in order to convert the input mouse position this one is in screen space and i use this function in order to convert from screen space into the local space of this transform so do that and we have the anchored position and then just create a mesh so literally just a point so create it and set it on the render and then on every update while the mouse is held down once again calculate the mouse local position then i just do a very basic distance check so this is just to make sure that it doesn't draw a new part on literally every frame so it waits until the mouse moves a little bit then i just count like the forward vector so that's this position minus the last position so that gives me the vector which is exactly how the mouse moved since the last point then since we have the new point i really just call the function in order to add it to my previous mesh so this function just takes the previous mesh it grabs the last two vertices so the last left and right and creates the new ones and simply adds it onto the mesh so for adding again just some basic mesh generation you just get the previous vertices uv triangles and set them all up so this looks slightly confusing but it's really quite simple once you know how to work with dynamic meshes with that i can simply click and drag in order to dynamically draw a line now the next part is the arrow and for that i literally just made a simple arrow texture and then as it's drawing after drawing the last point it simply places the airwreck transformer on that position and simply rotates it based on the forward vector and this is how you can convert a simple vector direction into euler angles and the final thing is simply the mouse so i just have a script attached to the player and it's listening to some events on the ui when the player press the button simply toggles the ui and when the ui is shown then it sets the cursor unlock state to none so it unlocks the cursor and when the ui hides then simply once again locks the cursor and then just enabling and disabling the player character controller so the player doesn't move and doesn't rotate as it moves the mouse so when you put it all together here is the final result so i've got my player character walking around i can press a button and up comes out the map and now anywhere i want i can just click and drag and tell my teammates in order to go through this area in order to attack this area so i can click i can drag i can make any shape that i want and yep it looks pretty great pretty dynamic alright awesome so as you can see this mechanic is also pretty simple to remake all you really need to know is how to work with dynamic meshes and that's pretty much it so if you have a multiplayer game then this is a great mechanic in order to enable some more tactical gameplay or maybe in a single player game you can use this to let the player draw some notes on their map alright so there you have it that's how you can recreate three interesting mechanics from verdun these are pretty interesting and as you can see they are definitely something you can implement in your own games if you want to try out the game for yourself check out the bundle and of course the bundle also contains tons of tools and assets perfect for making any fps game so if that's a genre you'd like to make then definitely grab the bundle it's an excellent discount also like i mentioned this friday on the 24th i won't be participating in the official unity live stream we're going to play around with the bumble assets and i won't be there answering any questions in chat so if you like watching live streams come ahead and say hi check out the full how it's made playlist follow the creator page on steam and like this video if you'd like to see more of these types of videos also let me know what other games have interesting mechanics that you'd like to know how they work alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time
