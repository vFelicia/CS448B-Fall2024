With timestamps:

00:00 - hello and welcome I'm your code monkey
00:02 - and in this video we're going to learn
00:03 - what a transform is and what it's used
00:05 - for let's begin
00:09 - so a transform is the main way to move
00:12 - rotate and scale game objects in your
00:14 - scene every game object has a transform
00:17 - by default
00:18 - let's go in the scene hierarchy in here
00:20 - and create a new game object here in the
00:23 - inspector you can see it automatically
00:25 - added the transform component every game
00:28 - object always has a transform component
00:30 - here you can see the three main values
00:33 - for the transform the position the
00:35 - rotation and the scale they are
00:37 - represented as a vector three so they
00:40 - have an X a Y and a Z value let's add a
00:44 - sprite renderer so we can see the result
00:46 - of modifying the transform so add
00:48 - component sprite renderer into drag this
00:51 - right in here so we can see visually our
00:53 - game object so here's the sprite and up
00:56 - here I can change the transform changing
00:59 - the position will move the sprite on the
01:01 - x-axis I can change it on the y-axis and
01:04 - since I have the scene setup in 2d you
01:08 - normally would not modify the z-axis
01:10 - since that would be towards and away
01:12 - from the camera so in 2d you simply
01:15 - leave this at zero I can also rotate my
01:18 - sprite however again since this is in 2d
01:21 - you normally would only rotate these z
01:23 - axis which would provide that rotation
01:26 - the x and y would apply some rotation
01:29 - that is only applicable in a 3d
01:31 - environment the scale modifies the size
01:34 - of the game object using a sprite
01:37 - renderer means that the size this object
01:39 - that you can see in here is dependent on
01:41 - the settings of these sprites when
01:43 - imported so in here as you can see this
01:45 - spaceship sprite as a size of 64 by 64
01:49 - and in pixels per unit I've selected 64
01:52 - that means 64 pixels in this texture
01:56 - will equal one unit in game so as you
01:58 - can see this texture is 64 by 64 using
02:02 - 64 pixels per unit means that the sprite
02:05 - by default won't be one by one as you
02:08 - can see the size it is in one by one
02:10 - unit right there and if I modify the
02:13 - scale it will modify according to that
02:16 - sprite scale so I can modify the X I can
02:18 - modify the Y and again I can modify this
02:21 - but since this is in 2d let's leave that
02:23 - at 1 one more thing that is related to
02:26 - transforms and these freights
02:28 - is when you import a sprite you can
02:30 - modify the pivot the pivot won't affect
02:33 - how the sprite rotates so by default
02:35 - it's in the center let's say I would put
02:37 - the pivot back here hit apply and now if
02:41 - I rotate on these z axes you can see
02:43 - that rotated around that pivot okay so
02:46 - that's movement rotation and scale of a
02:48 - single transform you can also parent
02:50 - various transforms so let's go in our
02:53 - hierarchy and duplicate our current game
02:55 - object and let's make the second one a
02:58 - child of the first game object move it
03:00 - to the side so you can see in so this in
03:03 - here and let me tend so you can easily
03:05 - see this is the child game object now
03:09 - when I modify the parent you can see
03:10 - that those changes are also applied to
03:12 - the child so if I move both of them move
03:15 - if I rotate both of them rotate and if I
03:18 - scale both of them scale on the
03:21 - inspector what you see are the local
03:23 - transform values and not become own
03:25 - values so if I go into the channel game
03:27 - object you can see that the values in
03:29 - here are represented in the Enloe
03:31 - composition space so let's put this one
03:33 - on 1 and 0 if I put my parent on to 0
03:38 - then the world position of this one is
03:41 - on 3 0 but it shows 1 0 again this is
03:44 - the local and not the global position
03:46 - this difference between local and common
03:49 - space is very important to fully
03:51 - understand the same thing is applied to
03:53 - the rotation and scale what you see here
03:55 - are the local values and if you apply
03:58 - them outside you won't still see the
04:00 - local values in here all right so that's
04:02 - what we can do with the transform from
04:04 - the editor now let's write some code
04:06 - let's make a new c-sharp script and
04:09 - let's name it transform test we're going
04:13 - to add this script to the parent
04:14 - transform and let's rename this to
04:17 - sprite and here a child transform just
04:21 - to have more proper names to deal
04:22 - through code with our script running on
04:25 - the parent let's go into the code and in
04:28 - here you can access the transform
04:30 - component by simply writing transform
04:32 - so let's make a debug log of the
04:35 - transform and see if it correctly prints
04:38 - out our transform object yep in the
04:41 - console as you can see our current
04:43 - transform has the name of sprite and it
04:45 - is of type int engine transfer
04:47 - so let's modify the transform position
04:49 - we do that by going into the transform
04:52 - dot position which won't set the
04:54 - transform can work on position and we're
04:56 - going to put it on vector three and
04:58 - let's say one zero zero
05:00 - so as you can see our transform is on
05:02 - two zero zero and if we run the code as
05:05 - soon as it starts you can see that it
05:07 - was a reposition to one zero zero so now
05:10 - let's move our transform on update so
05:12 - let's copy this in here and we're going
05:14 - to set our transform dot position to
05:16 - transform that position plus a new
05:18 - vector3 of let's say 0.01 per frame so
05:23 - essentially every single frame we're
05:24 - going to move this transform point zero
05:26 - one to the right side since we are
05:28 - moving on the x axis and here so let's
05:31 - test yep there you go as you can see the
05:34 - spaceship is moving and the champion
05:36 - object as you can see is moving with it
05:38 - now there are many ways to rotate a
05:40 - transform depending on if you are
05:41 - working in 2d or 3d for me since I work
05:45 - in 2d the easiest way is to modify
05:47 - transform the owner angles so let's do a
05:50 - transform dot Euler angles which again
05:54 - are represented as a new vector3 and
05:58 - again if you remember in 2d we only want
06:01 - to modify the Z value so let's do the
06:04 - same thing with it previously and
06:06 - increase the owner angles by 0.1 F every
06:09 - frame so this should make our sprite
06:12 - rotate continuously yep as you can say
06:15 - this sprite is rotating on the z axis so
06:18 - finally we can modify the scale of our
06:20 - transform by going to transform dot
06:23 - local scale and we're going to the same
06:26 - thing
06:26 - set the in local scale to the local
06:28 - scale plus a vector 3 and let's increase
06:32 - by point zero one point zero one also on
06:35 - the Y and 0 on the Z so this should
06:38 - increase the size of our transform once
06:40 - maintaining the aspect ratio yep there
06:42 - you go you can see the scale increasing
06:44 - friend so now we have a sprite that is
06:47 - changing position moving to the right
06:49 - side changing rotation by rotating and
06:52 - also changing the scale those are the
06:55 - three main properties of a transform so
06:57 - all these values that you see in here
06:59 - are global values there is a second set
07:02 - of variables to handle local values for
07:05 - position set of transform that position
07:07 - you have transformed our local position
07:10 - for the rotation you have local Euler
07:13 - angles or local rotation if you want to
07:15 - deal with quaternions and for the local
07:18 - scale you have the local scale so as we
07:21 - saw previously the inspector displays
07:23 - the local values of that transform on
07:25 - the child in here you can see the unload
07:29 - composition it is on 1 0 0 and we can
07:33 - see that through code what's going to
07:35 - our start and first of all in order to
07:37 - access the transform of the child we use
07:40 - transform dot fine and then we find the
07:45 - name of our transform which in this case
07:47 - child transform this is the reference to
07:50 - our child transform so now with that
07:54 - child transform let's print out the
07:56 - local and global position so let's do a
07:58 - debug log of the in local position which
08:02 - should display exactly the same as we
08:04 - see in the inspector and the position
08:07 - which should show something different
08:09 - and let's stop moving the parent don't
08:10 - start all right so let's see what these
08:13 - two values are at this point as you can
08:16 - see in the console the in local value is
08:17 - 1 0 0 but the global value is 3 0 0 so
08:22 - the in local matches what you see in the
08:24 - inspector but the global is different if
08:27 - we were to set the parent to 0 0 0 then
08:29 - the awoken would be the same as the
08:31 - global so there you have it we covered
08:33 - what is a transform and all the ways we
08:35 - can modify it both in the editor and
08:37 - through code if you have any questions
08:39 - post them in the comments and I'll do my
08:40 - best answer them subscribe for more
08:42 - videos and I'll see you next time

Cleaned transcript:

hello and welcome I'm your code monkey and in this video we're going to learn what a transform is and what it's used for let's begin so a transform is the main way to move rotate and scale game objects in your scene every game object has a transform by default let's go in the scene hierarchy in here and create a new game object here in the inspector you can see it automatically added the transform component every game object always has a transform component here you can see the three main values for the transform the position the rotation and the scale they are represented as a vector three so they have an X a Y and a Z value let's add a sprite renderer so we can see the result of modifying the transform so add component sprite renderer into drag this right in here so we can see visually our game object so here's the sprite and up here I can change the transform changing the position will move the sprite on the xaxis I can change it on the yaxis and since I have the scene setup in 2d you normally would not modify the zaxis since that would be towards and away from the camera so in 2d you simply leave this at zero I can also rotate my sprite however again since this is in 2d you normally would only rotate these z axis which would provide that rotation the x and y would apply some rotation that is only applicable in a 3d environment the scale modifies the size of the game object using a sprite renderer means that the size this object that you can see in here is dependent on the settings of these sprites when imported so in here as you can see this spaceship sprite as a size of 64 by 64 and in pixels per unit I've selected 64 that means 64 pixels in this texture will equal one unit in game so as you can see this texture is 64 by 64 using 64 pixels per unit means that the sprite by default won't be one by one as you can see the size it is in one by one unit right there and if I modify the scale it will modify according to that sprite scale so I can modify the X I can modify the Y and again I can modify this but since this is in 2d let's leave that at 1 one more thing that is related to transforms and these freights is when you import a sprite you can modify the pivot the pivot won't affect how the sprite rotates so by default it's in the center let's say I would put the pivot back here hit apply and now if I rotate on these z axes you can see that rotated around that pivot okay so that's movement rotation and scale of a single transform you can also parent various transforms so let's go in our hierarchy and duplicate our current game object and let's make the second one a child of the first game object move it to the side so you can see in so this in here and let me tend so you can easily see this is the child game object now when I modify the parent you can see that those changes are also applied to the child so if I move both of them move if I rotate both of them rotate and if I scale both of them scale on the inspector what you see are the local transform values and not become own values so if I go into the channel game object you can see that the values in here are represented in the Enloe composition space so let's put this one on 1 and 0 if I put my parent on to 0 then the world position of this one is on 3 0 but it shows 1 0 again this is the local and not the global position this difference between local and common space is very important to fully understand the same thing is applied to the rotation and scale what you see here are the local values and if you apply them outside you won't still see the local values in here all right so that's what we can do with the transform from the editor now let's write some code let's make a new csharp script and let's name it transform test we're going to add this script to the parent transform and let's rename this to sprite and here a child transform just to have more proper names to deal through code with our script running on the parent let's go into the code and in here you can access the transform component by simply writing transform so let's make a debug log of the transform and see if it correctly prints out our transform object yep in the console as you can see our current transform has the name of sprite and it is of type int engine transfer so let's modify the transform position we do that by going into the transform dot position which won't set the transform can work on position and we're going to put it on vector three and let's say one zero zero so as you can see our transform is on two zero zero and if we run the code as soon as it starts you can see that it was a reposition to one zero zero so now let's move our transform on update so let's copy this in here and we're going to set our transform dot position to transform that position plus a new vector3 of let's say 0.01 per frame so essentially every single frame we're going to move this transform point zero one to the right side since we are moving on the x axis and here so let's test yep there you go as you can see the spaceship is moving and the champion object as you can see is moving with it now there are many ways to rotate a transform depending on if you are working in 2d or 3d for me since I work in 2d the easiest way is to modify transform the owner angles so let's do a transform dot Euler angles which again are represented as a new vector3 and again if you remember in 2d we only want to modify the Z value so let's do the same thing with it previously and increase the owner angles by 0.1 F every frame so this should make our sprite rotate continuously yep as you can say this sprite is rotating on the z axis so finally we can modify the scale of our transform by going to transform dot local scale and we're going to the same thing set the in local scale to the local scale plus a vector 3 and let's increase by point zero one point zero one also on the Y and 0 on the Z so this should increase the size of our transform once maintaining the aspect ratio yep there you go you can see the scale increasing friend so now we have a sprite that is changing position moving to the right side changing rotation by rotating and also changing the scale those are the three main properties of a transform so all these values that you see in here are global values there is a second set of variables to handle local values for position set of transform that position you have transformed our local position for the rotation you have local Euler angles or local rotation if you want to deal with quaternions and for the local scale you have the local scale so as we saw previously the inspector displays the local values of that transform on the child in here you can see the unload composition it is on 1 0 0 and we can see that through code what's going to our start and first of all in order to access the transform of the child we use transform dot fine and then we find the name of our transform which in this case child transform this is the reference to our child transform so now with that child transform let's print out the local and global position so let's do a debug log of the in local position which should display exactly the same as we see in the inspector and the position which should show something different and let's stop moving the parent don't start all right so let's see what these two values are at this point as you can see in the console the in local value is 1 0 0 but the global value is 3 0 0 so the in local matches what you see in the inspector but the global is different if we were to set the parent to 0 0 0 then the awoken would be the same as the global so there you have it we covered what is a transform and all the ways we can modify it both in the editor and through code if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time
