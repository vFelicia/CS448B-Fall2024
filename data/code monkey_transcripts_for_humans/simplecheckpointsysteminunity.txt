With timestamps:

00:00 - hello and welcome i'm your code monkey
00:02 - let's learn how to make a very simple
00:04 - checkpoint system
00:04 - this is perfect for racing games or
00:06 - really just anything where you want the
00:08 - player or any object to follow a preset
00:10 - path
00:10 - a while ago i made my racing rts game
00:13 - and one of the things that i needed to
00:14 - implement
00:15 - was some way of identifying if the
00:17 - player was indeed following the track
00:18 - correctly
00:19 - so naturally in a racing game you don't
00:21 - want the player to just randomly skip
00:23 - around through huge chunks of the track
00:25 - so that led me to make a basic
00:27 - checkpoint system so over here i have my
00:29 - demo track
00:30 - now the goal is obviously to follow the
00:32 - player to actually go through the
00:33 - correct path
00:34 - so we want to make sure that the player
00:36 - goes through here and makes this turn to
00:38 - go through here rather than just cutting
00:39 - straight through here
00:40 - so let's first think how we can make
00:42 - that logic essentially we need to have
00:44 - multiple checkpoints
00:45 - then we test when the player goes
00:47 - through any of them and then we verify
00:49 - that the player went through the correct
00:50 - right checkpoint
00:51 - so we need to keep track of which one is
00:53 - going to be the next valid checkpoint
00:55 - so first for tracking when the player
00:57 - goes through a checkpoint we can use a
00:58 - simple trigger collider
01:00 - so let's create a new 3d object let's
01:02 - make it a simple cube
01:04 - and by default it already comes with a
01:06 - box letter so just go ahead and make it
01:07 - a trigger so it's not
01:08 - a solid object and then let's just put
01:11 - it all the way up here so just scale it
01:16 - and give it a transparent visual
01:20 - all right there it is there's our
01:21 - checkpoint now let's make a script to
01:23 - detect our collisions
01:24 - the script will be attached to a single
01:26 - checkpoint so let's give it a name make
01:28 - an easy sharp script
01:29 - name it our checkpoint single okay
01:32 - and let's rename this also checkpoint
01:34 - single
01:35 - and just attach the script on there okay
01:38 - now here in order to test for the
01:39 - collisions it's very simple just add a
01:41 - private void
01:42 - on trigger enter so as another collider
01:45 - enters inside of this trigger collider
01:47 - so when we do the first thing that we
01:48 - need to do is verify that it's a player
01:50 - now the player has a simple player
01:52 - component so we can test that
01:54 - so if going to the other get component
01:57 - or rather try get component
01:59 - this one is more performance so try to
02:00 - get component of type player
02:02 - out player player
02:05 - alright so if this succeeds then we know
02:07 - that it is indeed the player that went
02:08 - through this collateral
02:10 - so let's just verify that this is
02:11 - working do a simple debug log
02:14 - let's say checkpoint so here we are and
02:17 - down here is the console
02:18 - and as we move forward and hit it if
02:21 - there you go we have our checkpoint okay
02:22 - so far so good so we are correctly
02:24 - testing when the player goes through
02:25 - that checkpoint
02:26 - now this script is meant to handle only
02:28 - a single checkpoint object
02:30 - now let's make another script that will
02:32 - be responsible for the whole track logic
02:34 - so a new c-sharp script let's name it
02:37 - the track
02:38 - checkpoints and over here i have the
02:40 - track game object containing all of them
02:42 - and just drag the script onto it okay
02:45 - now this script is going to need to know
02:47 - all the checkpoints in our track
02:48 - so one way we could do that would be
02:50 - just making a simple list of transforms
02:52 - inside of this script
02:54 - and then here in the editor we would add
02:55 - them one by one so that's one approach
02:58 - but an easier way is to put all the
03:00 - single checkpoints as children
03:02 - of a certain checkpoint game object and
03:04 - we cycle through that
03:06 - so let's use that approach instead so
03:07 - inside the track let's create an empty
03:09 - game object
03:10 - name it the checkpoints and then take
03:12 - the checkpoint signal and just place it
03:14 - inside the checkpoint
03:15 - now before we make some more let's go
03:17 - ahead drag it onto the project files
03:19 - just to make it a prefab
03:20 - okay so now we have this one and let's
03:23 - add another one
03:23 - in here and another one in here so go
03:26 - ahead rotate them everything works
03:28 - just as long as the player collides okay
03:30 - and now essentially in our
03:32 - track script we're going to cycle
03:34 - through this container and go through
03:35 - all these objects
03:37 - so here let's first do a private void
03:39 - awake
03:40 - and on awake let's find it so transform
03:43 - find to find the checkpoints container
03:46 - so this is the transform for the
03:48 - checkpoints transform
03:52 - and then we just do a for each transform
03:54 - so checkpoint
03:56 - single transform in the checkpoints
03:59 - transform so what this does is it cycles
04:01 - through all the children
04:02 - of this particular transform
04:05 - so to verify this is working let's
04:07 - simply do a debug log
04:09 - on the checkpoint signal transform to
04:10 - see every single one of them let's see
04:13 - and yep over here on the console we can
04:14 - see we have all of our checkpoints so
04:16 - the first one second one and the third
04:17 - one
04:18 - so with this we are correctly grabbing
04:19 - on children and by the way if you find
04:22 - the video helpful consider subscribing
04:23 - and hitting the like button
04:25 - it really helps out the channel so this
04:27 - method that we're going to use to place
04:28 - all of our checkpoints
04:29 - now one very important thing about this
04:31 - method is the order in the hurricane
04:33 - as you can see here first we grab this
04:35 - one then grab the second one
04:38 - and then the third one so the order as
04:40 - we cycle through the children
04:41 - it goes through from top to bottom so
04:43 - the order in here is very important
04:45 - so back in this script we have the
04:47 - checkpoints in here okay
04:49 - now let's handle a way to have each
04:51 - checkpoint notify
04:52 - this track checkpoint's class when the
04:54 - player goes through it so let's make a
04:56 - function so make a public void
04:58 - let's name it the player through
05:00 - checkpoint
05:02 - and let's receive an argument so we know
05:04 - which checkpoint the player went through
05:06 - so let's receive it of type checkpoint
05:08 - single
05:09 - okay now we need to call this function
05:11 - from the checkpoint signal script
05:13 - so that means that this script needs a
05:15 - reference to the track checkpoints
05:16 - so we can easily do that first of all
05:18 - let's make a field of type track
05:20 - checkpoints and then let's say expose a
05:23 - function that we can set this field
05:25 - so a public void set track checkpoints
05:29 - and we receive of type track checkpoints
05:32 - and we simply set this dot track
05:34 - checkpoints to that one
05:36 - okay and then when we have here the
05:38 - ontrigger enter we trigger that one
05:40 - we say that the player went through the
05:42 - checkpoint and passed in this
05:43 - okay so we are notifying the main class
05:45 - when the player goes through this
05:46 - checkpoint
05:47 - now we just need to call this function
05:49 - from the other one so in here as we're
05:51 - cycling through
05:52 - all of them let's first grab the
05:53 - component of type checkpoint signal
05:57 - so just get component checkpoint signal
06:00 - and then go into the checkpoint single
06:02 - and call settrack checkpoints and pass
06:04 - in this one okay so
06:06 - just like this we should be able to see
06:07 - this function being called for each
06:09 - checkpoint
06:10 - so let's do a debug log on the
06:12 - checkpoint single
06:13 - and let's log the transform name just so
06:16 - we know that it's a different one so
06:17 - let's see
06:18 - so here we are here's the console and as
06:20 - i move up i should be able to see the
06:21 - first one yep the first checkpoint
06:23 - single and the second one and the third
06:25 - okay so far so good with this we are
06:27 - correctly tracking that the player goes
06:29 - through the checkpoints
06:30 - now all we need to do is actually
06:32 - identify the order
06:33 - so for keeping track of the order let's
06:35 - first actually make a list to keep all
06:37 - of our checkpoint signals
06:39 - so a simple private list checkpoint
06:41 - single and it's our checkpoint
06:43 - signal list and on awake we
06:46 - initialize it and every time we go
06:48 - through one we simply add it to the list
06:50 - very simple
06:52 - so we have a list with all of our
06:53 - checkpoints and now all we need to do is
06:56 - just keep track of which one is going to
06:57 - be the next one
06:59 - so here we have a list of all of our
07:00 - checkpoints and then when the player
07:02 - goes through it we can identify the
07:03 - index of the one that the player went
07:05 - through
07:05 - so we can go into the list and trigger
07:08 - index of
07:08 - pass in this checkpoint single and let's
07:11 - do
07:12 - a log on this one let's see
07:15 - here we are and let's go and yep the
07:17 - player went through index zero and index
07:19 - one
07:20 - and then index two all right great so
07:22 - with this you can already guess how
07:24 - we're going to handle this logic
07:25 - so here all we need to do is keep track
07:27 - of the next player checkpoint index so
07:30 - just a private end for the next
07:32 - checkpoint single index
07:35 - and when we start let's set it to zero
07:39 - and then here all we check is just
07:40 - compare this so if the index of the one
07:43 - that the player has just passed
07:45 - is the next one then we have passed the
07:47 - correct checkpoint
07:49 - and if not then we have the wrong
07:51 - checkpoint
07:52 - then if we go into correct checkpoint
07:54 - then we want to go into the next one
07:56 - so just going into the next checkpoint
07:57 - signal index and just increase it very
07:59 - simple
08:01 - let's set some logs so debug download
08:03 - say that it's correct
08:06 - and the wrong let's test so let's go
08:08 - through the first one which should be
08:09 - correct
08:10 - and yep it is correct now let's skip the
08:12 - second one
08:13 - and go straight into the third one and
08:15 - nope we have a wrong
08:16 - so we need to actually go back into the
08:18 - second one and if we hit the second one
08:21 - yep correct and now the third one and
08:22 - yep now it is correct
08:24 - all right great now one more thing we
08:27 - need to add is the ability to do
08:28 - multiple apps so right now i went
08:30 - through the very last checkpoint
08:31 - but if i go through the very first one
08:33 - once again and nope now it's saying
08:35 - wrong so let's fix that here when we
08:38 - increase instead of doing plus plus
08:40 - let's do the next checkpoint index
08:42 - equals that one plus one
08:44 - and then we do a modulo of the list
08:46 - count so checkpoint signal list
08:47 - dot count so this symbol is a modulo
08:52 - operation which returns the remainder of
08:54 - the division
08:55 - so as we go past the count it simply
08:57 - loops back into zero
08:58 - so let's see if we can now do multiple
09:00 - laps so as i go
09:01 - go through the first one and it's
09:03 - correct second one correct
09:04 - third one also correct now let's go back
09:07 - into the first one
09:11 - so here is the first one again let's go
09:12 - through it and yep also correct
09:14 - so now we have support for multiple
09:16 - tracks all right
09:17 - great now with this the system is almost
09:19 - done so we can correctly identify the
09:21 - correct checkpoint
09:22 - now let's punch up the code a bit with
09:24 - some nice events
09:31 - okay so just defining two simple events
09:33 - and firing them off in here okay now
09:36 - let's make a simple ui
09:50 - all right so i just made a very simple
09:52 - visual so on the canvas make a container
09:54 - inside we've got a red image and just
09:56 - some text on it
09:57 - now we just want to show and hide this
09:59 - depending on the checkpoints
10:01 - so up here on the script all we need is
10:02 - a reference to the track
10:04 - checkpoints let's make it a serialized
10:07 - field so we can set the reference in the
10:09 - editor
10:11 - so here just drag the reference on there
10:12 - okay and all we need to do is make a
10:15 - private void start
10:16 - since we should probably subscribe to
10:18 - the events on start and not
10:19 - awake so here just go into the track
10:21 - checkpoints
10:23 - and subscribe to the various events
10:29 - alright so there it is very simple we
10:31 - have our two events and we either show
10:33 - or hide
10:34 - okay that's it we don't need to touch
10:36 - the track checkpoints at all let's test
10:38 - and for each checkpoint single we can
10:40 - also get rid of the visual
10:42 - so we can remove the mesh renderer all
10:44 - it really needs is just the actual
10:46 - unboxing leather
10:47 - so let's see okay so here we are let's
10:49 - go through the first one
10:51 - okay now let's skip the second one and
10:53 - go straight to the third one
10:54 - and as we hit yep there we go we have
10:56 - our wrong checkpoint so we need to go
10:58 - back into that one
10:59 - and if we go through the second one yep
11:01 - that one hides and it's all correct
11:03 - all right let's just visualize the
11:04 - actual correct checkpoint
11:06 - so we can add a simple show and hide on
11:07 - the checkpoint single
11:16 - so just a simple show and hide function
11:18 - and on the traction point when we go
11:19 - through the wrong one
11:20 - let's access the correct one so the
11:23 - checkpoint single
11:24 - let's grab it from the list
11:28 - so we're going to list on the next
11:29 - checkpoint signal index
11:31 - and just grab that one and call show and
11:34 - when we go through it
11:35 - then we call false
11:38 - all right that should do it and just for
11:40 - fun let's add a fun animation
11:48 - all right so here we are let's go
11:49 - through the first one and everything so
11:51 - far so good let's keep the second one
11:52 - and go straight into the third one
11:55 - and yep we have the wrong checkpoint and
11:57 - now we should be able to visualize and
11:58 - yep we can see where the correct
12:00 - checkpoint is
12:01 - all right great now in this case for
12:04 - this simple design that i have here
12:05 - there's only a single player
12:07 - so if we had multiple cars on track we
12:09 - would need to keep track of the current
12:11 - checkpoint for each of them
12:12 - so let's handle that to make this
12:14 - checkpoint system a bit more versatile
12:16 - so here we're tracking a single in for
12:18 - the next checkpoint index
12:19 - in order to support multiple cars all we
12:21 - need to do is really just store multiple
12:23 - ins so instead of just one what story in
12:25 - list of ins
12:27 - next checkpoint single index list okay
12:29 - and now
12:30 - for the size let's also define a list of
12:32 - transforms which will be for all of our
12:34 - cars
12:36 - so a private list of transforms for the
12:38 - car transform
12:39 - list and let's make this a serialized
12:42 - film so we can set it in the editor
12:45 - so here let's make multiple cars so
12:48 - we've got this one let's make this one
12:50 - let's just disable the player script so
12:51 - i'm not controlling both at once
12:53 - and here on the track we have the card
12:54 - transform list and just drag both of
12:56 - them on there
12:57 - so now here on awake let's initialize
12:59 - this list so a new list
13:01 - and then we go for each card transform
13:06 - and for each of them we go into the next
13:08 - checkpoint signal and we add
13:10 - a new element onto our list then here
13:12 - let's rename this function it's no
13:14 - longer the player going through the
13:15 - checkpoint so let's
13:16 - use the very helpful visual studio
13:18 - rename so ctrl r and we can easily
13:20 - rename this
13:21 - so let's call it car through checkpoint
13:23 - we're passing the checkpoint signal
13:25 - and then also transform for the car
13:27 - transform
13:29 - and then in order to get the next
13:31 - checkpoint index so and in for the next
13:33 - checkpoint index
13:34 - let's go into the next checkpoint index
13:36 - list
13:37 - and we're going to access it and find
13:39 - the index of this card transform
13:42 - so on the card transform list do an
13:44 - index of this card transform
13:47 - and with that we get the next checkpoint
13:49 - signal index and here we do the same
13:51 - thing just compare it with that one
13:52 - and then we just increment the one on
13:54 - the exact same position
13:56 - okay that's pretty much it now on the
13:58 - checkpoint signal we just need to pass
14:00 - in the
14:00 - actual car so in this case it's the
14:02 - other dot transform
14:04 - let's test so here we are and i'm
14:06 - currently driving only this car
14:07 - and i go through this one and yep in the
14:10 - log i'm still seeing the correct
14:11 - checkpoint
14:12 - so then i go into this one and okay i
14:15 - went through both checkpoints
14:17 - now let's swap out the other car so i'm
14:19 - now driving this other car and let's see
14:21 - if the correct checkpoint for this other
14:23 - car is in the first one
14:24 - and as i go through if there is in there
14:27 - we have our correct checkpoints
14:28 - all right so we now keep track of the
14:30 - correct checkpoint for each individual
14:32 - car
14:32 - making this system very versatile and
14:34 - easily able to support multiple cars on
14:36 - the same track on different positions
14:38 - so here we have our final system it's
14:40 - really simple and it works great
14:42 - now you can obviously use this for
14:44 - racing games driving around the car
14:46 - that's obvious
14:47 - but over here i have another demo this
14:49 - one is in 2d
14:50 - i have a normal 2d player character and
14:52 - i want to tell the player to go to the
14:54 - right side
14:55 - so i place some checkpoints in here and
14:57 - use the exact same scripts
14:58 - just modify the to support in 2d and if
15:01 - i go into the left into the incorrect
15:02 - checkpoint that's placed in here
15:04 - and there you go now we see that i'm
15:05 - supposed to go through here so go
15:06 - through here then the next one and so on
15:08 - so i just place these checkpoints so
15:10 - pretty much exactly the same thing
15:11 - except using a box on leather 2d
15:14 - and over here instead of on trigger
15:15 - enter just using on trigger and 32d
15:17 - and the track checkpoint script this one
15:19 - didn't need to be touched at all so it
15:21 - all works perfectly fine
15:22 - either in 2d or 3d and as you can see it
15:25 - works great both for
15:26 - normal car games as well as just
15:28 - anything where you want the player to
15:29 - follow a specific path
15:31 - or the player or really any other object
15:33 - so this works great for really any
15:35 - scenario where you want the player or
15:36 - any object to go through a preset path
15:39 - as always you can download the project
15:40 - files and utilities from
15:42 - unitycodemonkey.com
15:43 - this video is made possible thanks to
15:44 - these awesome supporters
15:46 - go to patreon.com unitycodemonkey to get
15:49 - some perks and help keep the videos free
15:50 - for everyone
15:51 - if you found this video helpful consider
15:53 - liking and subscribing post any
15:54 - questions having comments and i'll see
15:56 - you next time

Cleaned transcript:

hello and welcome i'm your code monkey let's learn how to make a very simple checkpoint system this is perfect for racing games or really just anything where you want the player or any object to follow a preset path a while ago i made my racing rts game and one of the things that i needed to implement was some way of identifying if the player was indeed following the track correctly so naturally in a racing game you don't want the player to just randomly skip around through huge chunks of the track so that led me to make a basic checkpoint system so over here i have my demo track now the goal is obviously to follow the player to actually go through the correct path so we want to make sure that the player goes through here and makes this turn to go through here rather than just cutting straight through here so let's first think how we can make that logic essentially we need to have multiple checkpoints then we test when the player goes through any of them and then we verify that the player went through the correct right checkpoint so we need to keep track of which one is going to be the next valid checkpoint so first for tracking when the player goes through a checkpoint we can use a simple trigger collider so let's create a new 3d object let's make it a simple cube and by default it already comes with a box letter so just go ahead and make it a trigger so it's not a solid object and then let's just put it all the way up here so just scale it and give it a transparent visual all right there it is there's our checkpoint now let's make a script to detect our collisions the script will be attached to a single checkpoint so let's give it a name make an easy sharp script name it our checkpoint single okay and let's rename this also checkpoint single and just attach the script on there okay now here in order to test for the collisions it's very simple just add a private void on trigger enter so as another collider enters inside of this trigger collider so when we do the first thing that we need to do is verify that it's a player now the player has a simple player component so we can test that so if going to the other get component or rather try get component this one is more performance so try to get component of type player out player player alright so if this succeeds then we know that it is indeed the player that went through this collateral so let's just verify that this is working do a simple debug log let's say checkpoint so here we are and down here is the console and as we move forward and hit it if there you go we have our checkpoint okay so far so good so we are correctly testing when the player goes through that checkpoint now this script is meant to handle only a single checkpoint object now let's make another script that will be responsible for the whole track logic so a new csharp script let's name it the track checkpoints and over here i have the track game object containing all of them and just drag the script onto it okay now this script is going to need to know all the checkpoints in our track so one way we could do that would be just making a simple list of transforms inside of this script and then here in the editor we would add them one by one so that's one approach but an easier way is to put all the single checkpoints as children of a certain checkpoint game object and we cycle through that so let's use that approach instead so inside the track let's create an empty game object name it the checkpoints and then take the checkpoint signal and just place it inside the checkpoint now before we make some more let's go ahead drag it onto the project files just to make it a prefab okay so now we have this one and let's add another one in here and another one in here so go ahead rotate them everything works just as long as the player collides okay and now essentially in our track script we're going to cycle through this container and go through all these objects so here let's first do a private void awake and on awake let's find it so transform find to find the checkpoints container so this is the transform for the checkpoints transform and then we just do a for each transform so checkpoint single transform in the checkpoints transform so what this does is it cycles through all the children of this particular transform so to verify this is working let's simply do a debug log on the checkpoint signal transform to see every single one of them let's see and yep over here on the console we can see we have all of our checkpoints so the first one second one and the third one so with this we are correctly grabbing on children and by the way if you find the video helpful consider subscribing and hitting the like button it really helps out the channel so this method that we're going to use to place all of our checkpoints now one very important thing about this method is the order in the hurricane as you can see here first we grab this one then grab the second one and then the third one so the order as we cycle through the children it goes through from top to bottom so the order in here is very important so back in this script we have the checkpoints in here okay now let's handle a way to have each checkpoint notify this track checkpoint's class when the player goes through it so let's make a function so make a public void let's name it the player through checkpoint and let's receive an argument so we know which checkpoint the player went through so let's receive it of type checkpoint single okay now we need to call this function from the checkpoint signal script so that means that this script needs a reference to the track checkpoints so we can easily do that first of all let's make a field of type track checkpoints and then let's say expose a function that we can set this field so a public void set track checkpoints and we receive of type track checkpoints and we simply set this dot track checkpoints to that one okay and then when we have here the ontrigger enter we trigger that one we say that the player went through the checkpoint and passed in this okay so we are notifying the main class when the player goes through this checkpoint now we just need to call this function from the other one so in here as we're cycling through all of them let's first grab the component of type checkpoint signal so just get component checkpoint signal and then go into the checkpoint single and call settrack checkpoints and pass in this one okay so just like this we should be able to see this function being called for each checkpoint so let's do a debug log on the checkpoint single and let's log the transform name just so we know that it's a different one so let's see so here we are here's the console and as i move up i should be able to see the first one yep the first checkpoint single and the second one and the third okay so far so good with this we are correctly tracking that the player goes through the checkpoints now all we need to do is actually identify the order so for keeping track of the order let's first actually make a list to keep all of our checkpoint signals so a simple private list checkpoint single and it's our checkpoint signal list and on awake we initialize it and every time we go through one we simply add it to the list very simple so we have a list with all of our checkpoints and now all we need to do is just keep track of which one is going to be the next one so here we have a list of all of our checkpoints and then when the player goes through it we can identify the index of the one that the player went through so we can go into the list and trigger index of pass in this checkpoint single and let's do a log on this one let's see here we are and let's go and yep the player went through index zero and index one and then index two all right great so with this you can already guess how we're going to handle this logic so here all we need to do is keep track of the next player checkpoint index so just a private end for the next checkpoint single index and when we start let's set it to zero and then here all we check is just compare this so if the index of the one that the player has just passed is the next one then we have passed the correct checkpoint and if not then we have the wrong checkpoint then if we go into correct checkpoint then we want to go into the next one so just going into the next checkpoint signal index and just increase it very simple let's set some logs so debug download say that it's correct and the wrong let's test so let's go through the first one which should be correct and yep it is correct now let's skip the second one and go straight into the third one and nope we have a wrong so we need to actually go back into the second one and if we hit the second one yep correct and now the third one and yep now it is correct all right great now one more thing we need to add is the ability to do multiple apps so right now i went through the very last checkpoint but if i go through the very first one once again and nope now it's saying wrong so let's fix that here when we increase instead of doing plus plus let's do the next checkpoint index equals that one plus one and then we do a modulo of the list count so checkpoint signal list dot count so this symbol is a modulo operation which returns the remainder of the division so as we go past the count it simply loops back into zero so let's see if we can now do multiple laps so as i go go through the first one and it's correct second one correct third one also correct now let's go back into the first one so here is the first one again let's go through it and yep also correct so now we have support for multiple tracks all right great now with this the system is almost done so we can correctly identify the correct checkpoint now let's punch up the code a bit with some nice events okay so just defining two simple events and firing them off in here okay now let's make a simple ui all right so i just made a very simple visual so on the canvas make a container inside we've got a red image and just some text on it now we just want to show and hide this depending on the checkpoints so up here on the script all we need is a reference to the track checkpoints let's make it a serialized field so we can set the reference in the editor so here just drag the reference on there okay and all we need to do is make a private void start since we should probably subscribe to the events on start and not awake so here just go into the track checkpoints and subscribe to the various events alright so there it is very simple we have our two events and we either show or hide okay that's it we don't need to touch the track checkpoints at all let's test and for each checkpoint single we can also get rid of the visual so we can remove the mesh renderer all it really needs is just the actual unboxing leather so let's see okay so here we are let's go through the first one okay now let's skip the second one and go straight to the third one and as we hit yep there we go we have our wrong checkpoint so we need to go back into that one and if we go through the second one yep that one hides and it's all correct all right let's just visualize the actual correct checkpoint so we can add a simple show and hide on the checkpoint single so just a simple show and hide function and on the traction point when we go through the wrong one let's access the correct one so the checkpoint single let's grab it from the list so we're going to list on the next checkpoint signal index and just grab that one and call show and when we go through it then we call false all right that should do it and just for fun let's add a fun animation all right so here we are let's go through the first one and everything so far so good let's keep the second one and go straight into the third one and yep we have the wrong checkpoint and now we should be able to visualize and yep we can see where the correct checkpoint is all right great now in this case for this simple design that i have here there's only a single player so if we had multiple cars on track we would need to keep track of the current checkpoint for each of them so let's handle that to make this checkpoint system a bit more versatile so here we're tracking a single in for the next checkpoint index in order to support multiple cars all we need to do is really just store multiple ins so instead of just one what story in list of ins next checkpoint single index list okay and now for the size let's also define a list of transforms which will be for all of our cars so a private list of transforms for the car transform list and let's make this a serialized film so we can set it in the editor so here let's make multiple cars so we've got this one let's make this one let's just disable the player script so i'm not controlling both at once and here on the track we have the card transform list and just drag both of them on there so now here on awake let's initialize this list so a new list and then we go for each card transform and for each of them we go into the next checkpoint signal and we add a new element onto our list then here let's rename this function it's no longer the player going through the checkpoint so let's use the very helpful visual studio rename so ctrl r and we can easily rename this so let's call it car through checkpoint we're passing the checkpoint signal and then also transform for the car transform and then in order to get the next checkpoint index so and in for the next checkpoint index let's go into the next checkpoint index list and we're going to access it and find the index of this card transform so on the card transform list do an index of this card transform and with that we get the next checkpoint signal index and here we do the same thing just compare it with that one and then we just increment the one on the exact same position okay that's pretty much it now on the checkpoint signal we just need to pass in the actual car so in this case it's the other dot transform let's test so here we are and i'm currently driving only this car and i go through this one and yep in the log i'm still seeing the correct checkpoint so then i go into this one and okay i went through both checkpoints now let's swap out the other car so i'm now driving this other car and let's see if the correct checkpoint for this other car is in the first one and as i go through if there is in there we have our correct checkpoints all right so we now keep track of the correct checkpoint for each individual car making this system very versatile and easily able to support multiple cars on the same track on different positions so here we have our final system it's really simple and it works great now you can obviously use this for racing games driving around the car that's obvious but over here i have another demo this one is in 2d i have a normal 2d player character and i want to tell the player to go to the right side so i place some checkpoints in here and use the exact same scripts just modify the to support in 2d and if i go into the left into the incorrect checkpoint that's placed in here and there you go now we see that i'm supposed to go through here so go through here then the next one and so on so i just place these checkpoints so pretty much exactly the same thing except using a box on leather 2d and over here instead of on trigger enter just using on trigger and 32d and the track checkpoint script this one didn't need to be touched at all so it all works perfectly fine either in 2d or 3d and as you can see it works great both for normal car games as well as just anything where you want the player to follow a specific path or the player or really any other object so this works great for really any scenario where you want the player or any object to go through a preset path as always you can download the project files and utilities from unitycodemonkey.com this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone if you found this video helpful consider liking and subscribing post any questions having comments and i'll see you next time
