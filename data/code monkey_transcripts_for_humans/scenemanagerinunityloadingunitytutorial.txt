With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - in this video we're going to create a
00:03 - class to handle scene loading let's
00:05 - begin
00:08 - so this is what we're trying to create
00:10 - we start off with a very simple basic
00:12 - main menu we have a play button when we
00:14 - click it loads the unloading scene
00:16 - displays loading in a progress bar and
00:19 - when it is finally unloaded it loads our
00:21 - target scene and here we got a button to
00:24 - go back and so on and so forth so the
00:26 - loading scene works perfectly fun all
00:28 - right so let's get to it
00:30 - let's start off by making a loader class
00:33 - so we go in here we create the new
00:35 - c-sharp script and call this the loader
00:37 - this will be the class that handles all
00:40 - of the leveling so in here let's get rid
00:43 - of motor behavior and make this a static
00:46 - class that means we can only have static
00:49 - methods and fields we cannot instantiate
00:51 - this class which for a loaded class is
00:53 - exactly what we want so let's start off
00:57 - with a very simple log function so we
00:59 - make a public static void low and inside
01:03 - we're going to use the function scene
01:06 - manager dot load scene this function is
01:09 - inside the using unity engine scene
01:14 - management all right so this is the
01:18 - function that allows us to load a
01:20 - particular scene so in here we need to
01:22 - know the name of the scene we want to
01:24 - look so instead of using strings all
01:26 - over our code let's use an enemy instead
01:29 - so in here make a phony kanoon for our
01:31 - scenes now let's see the name of our
01:35 - scene so here it is a new project files
01:37 - you can see that this scene is called
01:38 - the game scene so let's add that valley
01:42 - now on the load function will receive a
01:45 - scene value can we use that scene value
01:48 - to load it and we simply do it a two
01:50 - string that way in our code is dealing
01:52 - with a very nice genome instead of just
01:54 - strings all over the place so now we
01:56 - have this function that is very simple
01:58 - and we can call so here my testing scene
02:01 - I have a button in the UI so let's use
02:03 - knot it contains this script so in here
02:07 - we can go into this function to go into
02:09 - the unloader class and call the unload
02:11 - function and we pass in the scene for
02:13 - the games
02:14 - so essentially clicking on the button
02:16 - should reload this quarantine will later
02:19 - obviously make this go into the main
02:21 - menu and then have an
02:22 - our button to go to the game scene from
02:23 - the main menu but for now just for
02:25 - testing let's simply reload the currency
02:27 - now this button is using the button UI
02:30 - class which is part of the code monkey
02:31 - utilities which as always you can grab
02:33 - for free from me in Tacoma Keep Calm
02:35 - it's just a very simple button class
02:37 - that handles buttons in the yuan
02:39 - so when we click on the button we
02:41 - execute this function which executes
02:43 - this code which loads the current scene
02:45 - all right so let's see if our scene
02:47 - doesn't need reload wouldn't click on
02:49 - the button okay so here we are this is
02:51 - the game scene just as a rotating sprite
02:53 - and if I click on the button it should
02:55 - reload this scene so I click on it and
02:57 - yep everything is frozen the scene is
02:59 - loading and the scene has correctly
03:01 - reloaded so loading is working correctly
03:04 - however one loading one issue that you
03:06 - can see is that the game hangs on the
03:08 - current screen while loading we want to
03:10 - have a proper loading screen being
03:12 - displayed on the scene is loading
03:13 - otherwise the player might think that
03:15 - the game has crashed so let's do that
03:17 - we're going to create a new scene this
03:21 - will be our loading scene now in here
03:24 - let's just set up our UI so for that
03:26 - let's just simply create a new text
03:28 - object so just like that it
03:30 - automatically created a canvas with a
03:32 - event system so here on let's just set
03:35 - up this text field to say loading and
03:37 - put it on the corner
03:45 - so this is what the welding scene looks
03:48 - like we just have a black background
03:49 - just saying loading so now in order to
03:51 - use this let's go into our loader class
03:53 - and in here let's add another scene
03:56 - value for the unloading scene and before
03:58 - we load our target scene
04:00 - let's first load the loading scene so we
04:02 - will in here these scene top loading and
04:05 - now in order to test this we need to go
04:07 - in here go into file build settings and
04:11 - we need to add our scenes in here
04:13 - otherwise the unloaded code will not
04:15 - work so let's drag the game scene the
04:17 - unloading and the main menu which we
04:19 - want later use all right so let's go
04:22 - back into the game scene in order to
04:23 - test out our button so here I am again
04:26 - the scene click the button and as you
04:29 - can see it's loading and it reload the
04:30 - same scene but it did not show the
04:32 - unloading scene so let's go into the
04:34 - code to see why that happened so here we
04:37 - are in the code and the reason we didn't
04:39 - see the unloading screen is right here
04:41 - in these two lines these two lines
04:43 - follow one another so as soon as the
04:45 - unloading scene finishes loading it
04:47 - immediately starts loading the target
04:49 - scene now the screen only refreshes on
04:52 - update so if there's no update there's
04:54 - no refresh so what we need to do is let
04:56 - it run for at least one update in order
04:58 - to refresh the screen and then we can
05:00 - load our target scene so for that let's
05:03 - create a script that won't call a
05:05 - function on the first update so let's go
05:07 - here create a new C sharp script and
05:09 - let's call this the unloaded come back
05:11 - in here let's have a simple private ball
05:16 - called is first update and defaulted to
05:19 - true and then we simply do a private
05:21 - void update and if this is the first
05:24 - update then we set it to false and we
05:28 - need to call a function on the unloader
05:30 - class alright so just like that we have
05:35 - this script which will call this
05:37 - function exactly after the first update
05:39 - so let's create that function go into
05:42 - the loader and here make a public static
05:45 - void and loader
05:46 - come back alright so we have this
05:49 - function being called after the screen
05:51 - refreshes now we can use this to load
05:54 - our target scene so in order to do that
05:56 - let's use a delegate to store the action
05:59 - we're going to execute so let's go here
06:02 - make it private action for the on loader
06:05 - comeback a action is just say don't
06:09 - forget that returns void so when we get
06:13 - the unloader combat function being
06:14 - triggered we test if this one is not
06:16 - known we can't let them and we set it to
06:20 - not okay so now all we need to do is put
06:24 - the target scene loading code inside our
06:27 - loader combat action and just like that
06:33 - now obviously we want to load only after
06:36 - we set that so do that and that all
06:50 - right so that's pretty much it when we
06:51 - call the unload function we give at the
06:53 - target scene that we want to load we set
06:55 - the action to load that target scene and
06:58 - then we start loading the unloading
06:59 - scene when the loading scene gets
07:01 - finished loading it won't fire this
07:02 - function and this function will execute
07:04 - the unloader come back which won't start
07:07 - loading the target scene so that way we
07:09 - have a refresh of our screen between
07:11 - loading the unloading and loading
07:12 - deterrent now all that remains is to
07:15 - have the unloader convex script into an
07:17 - object so here and let's go into the
07:20 - unloading scene here creating new game
07:23 - object for the unloader come back and we
07:25 - simply drag our script and just like
07:28 - that everything should be working and we
07:30 - should now be able to see the loading
07:31 - scene while the target scene is loading
07:34 - alright so here we are in the game scene
07:36 - now let's see what happens when I click
07:38 - on the button and if there you go
07:40 - there's no loading scene now it's
07:41 - loading and when you finishes loading it
07:43 - refreshes with our target scene all
07:45 - right great
07:45 - so everything is working exactly as
07:47 - intended now let's make it load between
07:50 - the main menu and the game scene instead
07:52 - of just reloading this same scene so
07:54 - here all we need is on the game scene UI
07:56 - instead of loading the game scene this
07:58 - one goes back into the main menu so
08:00 - need to go onto the scene list to add
08:02 - the main menu scene and on the main menu
08:07 - we have pretty much the same code and we
08:09 - do loader load and in this case we
08:12 - unload the game scene alright so now
08:15 - let's start off at the main menu and see
08:18 - okay so here we are in the main menu
08:20 - which is a simple play button I click on
08:22 - it there's no loading screen and yep
08:24 - there's the final scene being correctly
08:26 - loaded click on the main menu there's a
08:28 - loading and immediately jumps into the
08:30 - main menu alright everything is working
08:33 - exactly as intended so if all you want
08:36 - is a very simple loading screen then
08:38 - this code will do perfectly fine now we
08:40 - can try improving our loading by
08:42 - creating the unloading bar however
08:45 - whether that bloating bar works or not
08:47 - will depend very much on how your target
08:49 - scene is set up if you have a your
08:51 - target scene with lots of prefabs and
08:52 - lots of models with many different
08:54 - textures then unity might be able to
08:56 - break it into pieces and show the
08:58 - loading bar correctly however in this
09:00 - case the code I have for testing the
09:02 - unloading as you can see it stays in
09:04 - here for about two seconds and loads the
09:06 - code that I have in here this nationally
09:08 - get broken up by unity so by
09:10 - implementing the unloading part we won't
09:12 - actually see it working but still let's
09:15 - go over the code to see how it's done so
09:17 - let's go into the unloader class and
09:19 - here instead of having the unload scene
09:22 - function we can use the unload scene
09:23 - async function this lets us load the
09:26 - target scene asynchronously which means
09:28 - the game supposedly stays active while
09:30 - it loads in the background now this
09:33 - function returns a async operation
09:35 - object which will contain the unloading
09:37 - state and according to the unity
09:39 - documentation the right way to use it is
09:41 - with a KO routine so let's create that
09:43 - now in order to have a KO routine we
09:45 - must have a function that returns a I
09:47 - enumerator so let's make that
09:53 - and inside this function is when we're
09:57 - going to load the target team which
10:01 - returns a async operation object so up
10:08 - here we're going to use load scene async
10:10 - instead of the scene manager okay just
10:13 - like that however we want to start this
10:15 - as a core routine and again in order to
10:18 - start a KO routine we need an instance
10:20 - of a script that extends motor behavior
10:22 - and in this case our motor class is
10:24 - static and doesn't use mana behaviors so
10:26 - we cannot just start the routine using
10:28 - this class so we need some sort of dummy
10:31 - object with a dummy component so let's
10:33 - do that simply go in here make a private
10:36 - class let's call this the unloading mono
10:38 - behavior and we extend mono behavior and
10:42 - we sim only become wholly empty again
10:44 - this is just a dummy class so now here
10:46 - in our load function we can create a
10:48 - loading game object then we add the
10:56 - component for our loading model behavior
11:00 - and now we can use that loading model
11:03 - behavior to start a coup routine and
11:05 - we're going to start it using these
11:06 - parameters so this is really one of the
11:10 - reasons why I don't like using core
11:11 - routine since it requires such a
11:13 - complicated pattern in order to make
11:15 - them work but in this case and let's
11:17 - follow what the documentation says and
11:19 - use it exactly as it is so right now we
11:22 - have this function being executed as a
11:24 - cool routine which means it runs over
11:25 - several frames so for example we can put
11:28 - a yield return no thread on the
11:30 - beginning and that way this will go past
11:32 - one frame before starting the loading
11:34 - then we start loading and we get the
11:36 - async operation object and now in here
11:39 - we need to do a while so we do a while
11:41 - async operation that is done so we do a
11:45 - while it is not done while it is not
11:49 - done we're simply going to wait for the
11:51 - next frame so we do a yield return known
11:53 - and when it is done it will exit this
11:58 - and a lot of the targets seen and that's
12:00 - pretty much it now again this code might
12:02 - seem confusing but that's really just
12:04 - because of how Co routines work and in
12:06 - reality it's section
12:07 - very simple so now that we have this
12:09 - code working and loading our scene
12:11 - asynchronously we need to also have a
12:14 - function that will return the progress
12:15 - of that scene so we can later apply it
12:17 - to our bar so we can make a function
12:20 - here a public static float which will
12:23 - return the unloading progress and in
12:27 - here we're going to need information
12:28 - from the async operation so let's store
12:30 - it as a variable and here if it is not
12:37 - no then we return the async operation
12:40 - dot progress and if it is no we simply
12:45 - return Juana all right so we have this
12:48 - function which will return a value
12:49 - between 0 and 1 containing the progress
12:51 - of our loading so now all that remains
12:55 - is setting up the unloading bar in the
12:56 - editor so let's go in here into our
12:59 - loading scene and let's quickly create a
13:02 - very simple bar
13:14 - so here we have a very simple bar it is
13:16 - just an image inside I'm using the
13:18 - texture which is a simply white 1x1
13:21 - texture I'm only adding that so I can
13:23 - access the image type so we can use the
13:26 - film the image type fill it from
13:27 - horizontal from the left side and we
13:29 - have in here this nice value the film
13:31 - amount which we can set between 0 and 1
13:34 - in order to easily display our loading
13:35 - progress so now let's write a very
13:38 - simple script to hand on this bar so we
13:41 - create a new C sharp script this will be
13:44 - the unloading progress bar and then here
13:47 - all we need to change is the film on so
13:49 - let's first grab a reference to our
13:51 - image and on the private void update we
13:59 - simply set the image without film amount
14:00 - and we ask the another class to get the
14:03 - unloading progress and that's it that
14:07 - should do it so let's test so here's the
14:10 - main menu and now when I click yep
14:13 - there's the unloading screen and the
14:15 - unloading bar which was 90% filmed and
14:17 - now here we are on the final game scene
14:19 - and everything worked now again we go
14:21 - back to the main menu and worked go back
14:23 - and down and it is working exactly as
14:26 - intended
14:26 - now however as I said I'm not sure how
14:29 - unity breaks a scene apart piece by
14:31 - piece but it only seems to work on some
14:33 - cases so in this case you see the bar go
14:36 - from empty directly to 90% before
14:38 - loading the final scene the code is all
14:41 - correctly working but the smoothness of
14:42 - the loading bar will depend on how your
14:44 - target scene is set up so there you have
14:48 - it we created the unloading scene with
14:49 - the unloading bar for our game it
14:51 - displays the unloading progress won't
14:53 - being very easy to use adding more
14:55 - scenes is just a matter of adding
14:56 - another valley to the unknown and
14:58 - everything works perfectly fine as long
15:00 - as you can download the project files
15:01 - and utilities from Unity code monkey
15:03 - comm if you have any questions post them
15:05 - in the comments and I'll do my best
15:06 - Internet subscribe for more videos and
15:08 - I'll see you next time

Cleaned transcript:

hello and welcome I'm your code monkey in this video we're going to create a class to handle scene loading let's begin so this is what we're trying to create we start off with a very simple basic main menu we have a play button when we click it loads the unloading scene displays loading in a progress bar and when it is finally unloaded it loads our target scene and here we got a button to go back and so on and so forth so the loading scene works perfectly fun all right so let's get to it let's start off by making a loader class so we go in here we create the new csharp script and call this the loader this will be the class that handles all of the leveling so in here let's get rid of motor behavior and make this a static class that means we can only have static methods and fields we cannot instantiate this class which for a loaded class is exactly what we want so let's start off with a very simple log function so we make a public static void low and inside we're going to use the function scene manager dot load scene this function is inside the using unity engine scene management all right so this is the function that allows us to load a particular scene so in here we need to know the name of the scene we want to look so instead of using strings all over our code let's use an enemy instead so in here make a phony kanoon for our scenes now let's see the name of our scene so here it is a new project files you can see that this scene is called the game scene so let's add that valley now on the load function will receive a scene value can we use that scene value to load it and we simply do it a two string that way in our code is dealing with a very nice genome instead of just strings all over the place so now we have this function that is very simple and we can call so here my testing scene I have a button in the UI so let's use knot it contains this script so in here we can go into this function to go into the unloader class and call the unload function and we pass in the scene for the games so essentially clicking on the button should reload this quarantine will later obviously make this go into the main menu and then have an our button to go to the game scene from the main menu but for now just for testing let's simply reload the currency now this button is using the button UI class which is part of the code monkey utilities which as always you can grab for free from me in Tacoma Keep Calm it's just a very simple button class that handles buttons in the yuan so when we click on the button we execute this function which executes this code which loads the current scene all right so let's see if our scene doesn't need reload wouldn't click on the button okay so here we are this is the game scene just as a rotating sprite and if I click on the button it should reload this scene so I click on it and yep everything is frozen the scene is loading and the scene has correctly reloaded so loading is working correctly however one loading one issue that you can see is that the game hangs on the current screen while loading we want to have a proper loading screen being displayed on the scene is loading otherwise the player might think that the game has crashed so let's do that we're going to create a new scene this will be our loading scene now in here let's just set up our UI so for that let's just simply create a new text object so just like that it automatically created a canvas with a event system so here on let's just set up this text field to say loading and put it on the corner so this is what the welding scene looks like we just have a black background just saying loading so now in order to use this let's go into our loader class and in here let's add another scene value for the unloading scene and before we load our target scene let's first load the loading scene so we will in here these scene top loading and now in order to test this we need to go in here go into file build settings and we need to add our scenes in here otherwise the unloaded code will not work so let's drag the game scene the unloading and the main menu which we want later use all right so let's go back into the game scene in order to test out our button so here I am again the scene click the button and as you can see it's loading and it reload the same scene but it did not show the unloading scene so let's go into the code to see why that happened so here we are in the code and the reason we didn't see the unloading screen is right here in these two lines these two lines follow one another so as soon as the unloading scene finishes loading it immediately starts loading the target scene now the screen only refreshes on update so if there's no update there's no refresh so what we need to do is let it run for at least one update in order to refresh the screen and then we can load our target scene so for that let's create a script that won't call a function on the first update so let's go here create a new C sharp script and let's call this the unloaded come back in here let's have a simple private ball called is first update and defaulted to true and then we simply do a private void update and if this is the first update then we set it to false and we need to call a function on the unloader class alright so just like that we have this script which will call this function exactly after the first update so let's create that function go into the loader and here make a public static void and loader come back alright so we have this function being called after the screen refreshes now we can use this to load our target scene so in order to do that let's use a delegate to store the action we're going to execute so let's go here make it private action for the on loader comeback a action is just say don't forget that returns void so when we get the unloader combat function being triggered we test if this one is not known we can't let them and we set it to not okay so now all we need to do is put the target scene loading code inside our loader combat action and just like that now obviously we want to load only after we set that so do that and that all right so that's pretty much it when we call the unload function we give at the target scene that we want to load we set the action to load that target scene and then we start loading the unloading scene when the loading scene gets finished loading it won't fire this function and this function will execute the unloader come back which won't start loading the target scene so that way we have a refresh of our screen between loading the unloading and loading deterrent now all that remains is to have the unloader convex script into an object so here and let's go into the unloading scene here creating new game object for the unloader come back and we simply drag our script and just like that everything should be working and we should now be able to see the loading scene while the target scene is loading alright so here we are in the game scene now let's see what happens when I click on the button and if there you go there's no loading scene now it's loading and when you finishes loading it refreshes with our target scene all right great so everything is working exactly as intended now let's make it load between the main menu and the game scene instead of just reloading this same scene so here all we need is on the game scene UI instead of loading the game scene this one goes back into the main menu so need to go onto the scene list to add the main menu scene and on the main menu we have pretty much the same code and we do loader load and in this case we unload the game scene alright so now let's start off at the main menu and see okay so here we are in the main menu which is a simple play button I click on it there's no loading screen and yep there's the final scene being correctly loaded click on the main menu there's a loading and immediately jumps into the main menu alright everything is working exactly as intended so if all you want is a very simple loading screen then this code will do perfectly fine now we can try improving our loading by creating the unloading bar however whether that bloating bar works or not will depend very much on how your target scene is set up if you have a your target scene with lots of prefabs and lots of models with many different textures then unity might be able to break it into pieces and show the loading bar correctly however in this case the code I have for testing the unloading as you can see it stays in here for about two seconds and loads the code that I have in here this nationally get broken up by unity so by implementing the unloading part we won't actually see it working but still let's go over the code to see how it's done so let's go into the unloader class and here instead of having the unload scene function we can use the unload scene async function this lets us load the target scene asynchronously which means the game supposedly stays active while it loads in the background now this function returns a async operation object which will contain the unloading state and according to the unity documentation the right way to use it is with a KO routine so let's create that now in order to have a KO routine we must have a function that returns a I enumerator so let's make that and inside this function is when we're going to load the target team which returns a async operation object so up here we're going to use load scene async instead of the scene manager okay just like that however we want to start this as a core routine and again in order to start a KO routine we need an instance of a script that extends motor behavior and in this case our motor class is static and doesn't use mana behaviors so we cannot just start the routine using this class so we need some sort of dummy object with a dummy component so let's do that simply go in here make a private class let's call this the unloading mono behavior and we extend mono behavior and we sim only become wholly empty again this is just a dummy class so now here in our load function we can create a loading game object then we add the component for our loading model behavior and now we can use that loading model behavior to start a coup routine and we're going to start it using these parameters so this is really one of the reasons why I don't like using core routine since it requires such a complicated pattern in order to make them work but in this case and let's follow what the documentation says and use it exactly as it is so right now we have this function being executed as a cool routine which means it runs over several frames so for example we can put a yield return no thread on the beginning and that way this will go past one frame before starting the loading then we start loading and we get the async operation object and now in here we need to do a while so we do a while async operation that is done so we do a while it is not done while it is not done we're simply going to wait for the next frame so we do a yield return known and when it is done it will exit this and a lot of the targets seen and that's pretty much it now again this code might seem confusing but that's really just because of how Co routines work and in reality it's section very simple so now that we have this code working and loading our scene asynchronously we need to also have a function that will return the progress of that scene so we can later apply it to our bar so we can make a function here a public static float which will return the unloading progress and in here we're going to need information from the async operation so let's store it as a variable and here if it is not no then we return the async operation dot progress and if it is no we simply return Juana all right so we have this function which will return a value between 0 and 1 containing the progress of our loading so now all that remains is setting up the unloading bar in the editor so let's go in here into our loading scene and let's quickly create a very simple bar so here we have a very simple bar it is just an image inside I'm using the texture which is a simply white 1x1 texture I'm only adding that so I can access the image type so we can use the film the image type fill it from horizontal from the left side and we have in here this nice value the film amount which we can set between 0 and 1 in order to easily display our loading progress so now let's write a very simple script to hand on this bar so we create a new C sharp script this will be the unloading progress bar and then here all we need to change is the film on so let's first grab a reference to our image and on the private void update we simply set the image without film amount and we ask the another class to get the unloading progress and that's it that should do it so let's test so here's the main menu and now when I click yep there's the unloading screen and the unloading bar which was 90% filmed and now here we are on the final game scene and everything worked now again we go back to the main menu and worked go back and down and it is working exactly as intended now however as I said I'm not sure how unity breaks a scene apart piece by piece but it only seems to work on some cases so in this case you see the bar go from empty directly to 90% before loading the final scene the code is all correctly working but the smoothness of the loading bar will depend on how your target scene is set up so there you have it we created the unloading scene with the unloading bar for our game it displays the unloading progress won't being very easy to use adding more scenes is just a matter of adding another valley to the unknown and everything works perfectly fine as long as you can download the project files and utilities from Unity code monkey comm if you have any questions post them in the comments and I'll do my best Internet subscribe for more videos and I'll see you next time
