With timestamps:

00:00 - in this video we're going to make a very
00:01 - nice text writing effect each letter
00:04 - gets written one by one with variable
00:06 - speed and the text position is preserved
00:07 - as it gets written let's begin
00:12 - [Music]
00:17 - hello and welcome I'm your code monkey
00:19 - and this channel is all about helping
00:20 - you will learn how to make your own
00:22 - games with in-depth tutorials made by a
00:24 - professional indie game developer so if
00:26 - you find the video helpful consider
00:27 - subscribing so this is the effect that
00:29 - we want to make the text is written
00:32 - letter by letter with a custom speed as
00:34 - you can see the text position is
00:36 - preserved so each letter gets written
00:38 - exactly where it should be there is also
00:40 - the ability to skip writing this text by
00:42 - clicking while C text writer is active
00:44 - so quick starts and click and it skips
00:47 - and you can also hear a nice talking
00:49 - sound effect that is active long the
00:51 - text is being written and as soon as the
00:52 - text finishes the sound stops you might
00:55 - recognize this setup since this is
00:56 - pretty much exactly the assistant from
00:58 - Ballarat I could this is an excellent
01:00 - effect to polish up any text you have in
01:02 - your game
01:03 - alright so this is our goal let's get to
01:06 - it here we are in our starting scene so
01:10 - let's begin by making the UI visual so
01:12 - over here in the canvas let's make a new
01:15 - game object and call this the UI
01:17 - assistant now inside let's place a new
01:21 - UI image
01:23 - and over here in my textures folder I
01:25 - have the assistant image straight from
01:27 - Ballarat icon
01:34 - now in here let's make a new game object
01:37 - this will be our container for our
01:39 - message then in sign let's add an image
01:43 - for the arrow another image for the
01:46 - background
01:56 - all right this is the visual now for the
01:58 - UI text in here let's write some random
02:05 - text let's set it up right there and
02:14 - expand the size to occupy the entire box
02:22 - now here to make the support any amount
02:25 - of text let's add the best fit and put a
02:28 - nice maximum okay all right so this is
02:32 - our UI setup we have a nice assistant
02:35 - visual and the text object set up to
02:37 - support any amount of text that we want
02:39 - okay so with this set up let's go into
02:42 - our code so let's first go into the
02:44 - scripts making you see sharp script this
02:46 - will be our UI assistant drag it on to
02:51 - our game object okay now in here let's
02:54 - begin by first storing a reference to
02:56 - our text object so let's grab it on our
02:59 - private void awake we need to be using
03:06 - Unity engine UI okay
03:14 - okay we have our reference for our text
03:17 - field now just for testing let's try
03:19 - setting the text on our start so in here
03:23 - we simply do message text dot text then
03:26 - let's put this on text okay let's try it
03:33 - out and see if our text changes and if
03:36 - there it is there's our nice text okay
03:37 - so far so good we have our UI set up and
03:40 - the code is running now let's make our
03:42 - text brighter so over here make a new C
03:45 - sharp script this won't be the text
03:47 - writer let's make a game object to run
03:51 - our script so in here make our text
03:53 - writer and drag our script okay okay so
03:58 - let's begin by making a function to add
04:00 - a writer to write some text so let's
04:02 - call this simply add writer now in here
04:12 - we need to think about what parameters
04:14 - were going to need now first of all we
04:16 - obviously need to know where we want to
04:18 - write so we need a reference to the
04:19 - target text object then we also need to
04:29 - know what text we want to write so a
04:31 - string for our text to write and finally
04:35 - we need to know how fast each character
04:36 - should be written
04:37 - so let's receive a float for the time
04:40 - per character alright that's it this is
04:44 - all the information we need now let's
04:46 - store these as variables
04:55 - okay now we also need to store a timer
04:58 - so a simple float for our current
05:00 - timeline and now let's do our update and
05:06 - on our update first of all we're only
05:08 - going to run this if we have a UI text
05:10 - object so we do with something live so
05:15 - if it does not know then our text writer
05:17 - is active then in here we simply reduce
05:20 - our timer by the time double time then
05:25 - we check if the timer is under zero then
05:30 - we want to display next character so the
05:35 - first thing we do is reset the timer so
05:38 - we increase the timer by our time for a
05:40 - character that way the code in here only
05:43 - gets run every this amount of time and
05:46 - now in here we need to know what is the
05:48 - next character so that means that we
05:49 - need to keep track of the current index
05:51 - that we are writing so up here we store
05:54 - an int for our character index then we
05:59 - add the writer we set this simply to
06:01 - zero then on the update we increase the
06:05 - inlets so every time we go through this
06:08 - we increase it by one and as we increase
06:11 - it we set the text so our UI text our
06:15 - text we set it to a substring of the
06:19 - total text that we want to write so we
06:22 - do a substring we start off on index
06:25 - zero and we go all the way up to the
06:27 - character index so over time this runs
06:31 - the character index increases so we
06:33 - print another character right so just
06:35 - like this we should have our basic text
06:37 - writer working so let's see how we're
06:39 - going to run this code and we need to do
06:41 - is call this function so in order to do
06:43 - that we need a reference to our text
06:45 - writer so let's go to our UI assistant
06:49 - and in here let's
06:51 - a civilized feel for our text writer so
07:02 - let's drag that reference we're here in
07:05 - the editor there's the assistant with
07:07 - our film and just drag the reference yep
07:08 - there it is
07:09 - alright so now in here we can call our
07:11 - functions so on start instead of setting
07:13 - the text directly let's call our a
07:15 - driver
07:16 - let's pass in our message text for text
07:19 - right let's pass in this same message
07:22 - and the time for character let's put it
07:25 - whenever so we're going to print one
07:26 - character per second alright let's test
07:31 - if there is one character another one
07:33 - another one and yep everything seems to
07:36 - be working right it's printing one
07:38 - character each second so let's see what
07:40 - happens when reaches the end any of
07:43 - there you go we have an error here in
07:44 - the console we can see we have an
07:46 - argument out of range exception as it
07:48 - says the index and the length must refer
07:50 - to a location inside the string so the
07:52 - index cannot be passed in length so we
07:54 - need to test for our end condition so
07:57 - let's go into our code for our text
07:59 - writer and in here on the update we
08:01 - increase the character index okay and
08:03 - now in here let's test if we are already
08:06 - showing the complete string so we simply
08:09 - do an if the character index if the
08:13 - character index is bigger than the text
08:16 - to right point then we have the entire
08:20 - string display so in here let's stop our
08:24 - code so in order to make sure it doesn't
08:26 - run again let's set the UI text back
08:28 - need-to-know and we simply do a return
08:31 - so inclusive this then the next frame UI
08:34 - text will be no so it doesn't run again
08:36 - until it receives another writer all
08:38 - right so let's test and see if
08:39 - everything is working okay here it is
08:42 - and the message is still being written
08:43 - one character per second let's see it at
08:45 - the end and there it is the end of the
08:47 - message helloworld and if there you go
08:51 - no error as soon as it reaches the end
08:53 - the string everything stops and
08:54 - everything is great right awesome so far
08:56 - so good
08:57 - now the coding here actually has a
08:59 - sneaky error so let's say if we go in
09:02 - here
09:04 - let's try to print so here let's say we
09:13 - want to write 20 characters and we want
09:16 - to write it at a rate of 10 characters
09:18 - per second so 0.1 seconds per character
09:20 - so essentially this whole message should
09:22 - print in just few seconds so let's see
09:25 - it running normally there it is and yep
09:28 - after two seconds yep the whole message
09:29 - is ready okay great
09:31 - however now let's go in here and let's
09:34 - forcefully only with our frame rate to
09:35 - just 3 frames per second so go into the
09:39 - application and set the target frame
09:40 - rate to just 3 so again let's see if the
09:43 - message does write in 2 seconds and here
09:46 - we are and nope the message is not being
09:48 - written in 2 seconds it is taking a lot
09:50 - longer now the reason for that is
09:52 - because each frame is taking a ton of
09:54 - time to render so what happens is over
09:56 - here on the text writer our dump the
09:58 - time is massive so that means the timer
10:00 - goes down by a massive amount but we are
10:02 - only doing it simple if so the first
10:05 - tons of time won't put the timer a
10:07 - massive amount under 0 but it will only
10:09 - print 1 character on this update so on
10:11 - the next update it will only print 1
10:13 - character and so on and so forth so if
10:16 - the depth of time is bigger than 10 per
10:17 - character then the code will not work
10:19 - perfect so the solution to this is
10:21 - actually very simple we just work place
10:22 - in if with a while so whilst we're still
10:26 - in the same frame we're going to print
10:28 - as many characters as the timer allows
10:30 - so let's see if our code running at 3
10:32 - frames per second still writes that home
10:34 - message in just 2 seconds any of there
10:37 - it is you can see each frame more than
10:39 - one character is written in order to
10:40 - make sure that everything works great
10:42 - right great
10:43 - so even when running at an extremely low
10:45 - framerate our code cell works perfectly
10:47 - all right now one potential issue you
10:50 - see is with the position of the text
10:52 - since the text is centered as it gets
10:54 - written it becomes very hard to read
10:56 - since the text is always moving around
10:57 - so it would be a lot better if we could
11:00 - keep each character in its final
11:01 - position so let's do just that back in
11:05 - our text writer so let's head in here as
11:07 - an extra option let's receive just a
11:11 - bullion now let's call this the
11:13 - characters let's store it okay so now in
11:24 - here let's go into our update so in here
11:26 - we increase the index we calculate the
11:28 - substring okay let's hear store this on
11:31 - a string text and then we set the UI
11:36 - text our text to our text okay
11:38 - however before we do that let's do a
11:40 - simple if for our invisible characters
11:42 - and if we want to render the invisible
11:45 - characters then let's add the rest of
11:47 - the text but set the color in order to
11:49 - be invisible so we increase our text by
11:54 - the substring except in this case it's
11:56 - starting on the character index going
11:58 - all the way to the end and then we
12:00 - simply wrap this with a color tag the
12:08 - color in here is in RGB eh
12:11 - so we have our red then our green then
12:14 - our blue and finally our alpha so with
12:17 - an alpha of zero this text won't be
12:19 - hidden alright so that's pretty much it
12:22 - all we need to go is go back here and on
12:25 - our text writer let's trim on our
12:27 - invisible characters let's see any of
12:30 - there it is each character is being
12:32 - written one by one and now we can
12:33 - actually read it a lot better since
12:35 - every character stays exactly on its
12:37 - final position if we pause when the
12:39 - effect is active let's inspect our text
12:43 - object and in here you can see what's
12:45 - going on so we have the visible part and
12:47 - then we have our color tag and the
12:49 - remainder of our text without this being
12:52 - invisible right awesome so our text
12:55 - writer is working but right now we have
12:57 - one pre-baiting limitation in here and
13:00 - let's simply duplicate the UI assistant
13:02 - push it to the left I'm okay and now
13:05 - let's see what happens and as you can
13:08 - see the issue is that only one is
13:09 - working this one is completely static so
13:11 - essentially when we add a second one the
13:14 - second one overrides the first one so
13:16 - only one is active at a time so let's
13:19 - modify our code in order to support
13:21 - multiple text writers at once now there
13:24 - are many a pro
13:24 - we can take here for example we could
13:26 - create a new game object and add the
13:29 - text writer to it whenever we create one
13:31 - however that approach would create a lot
13:34 - of game objects which would severely
13:35 - affect performance so the approach we're
13:38 - going with is to have just one main text
13:40 - writer script and then internally we're
13:42 - going to handle various instances of
13:44 - text frames that way we just have one
13:47 - game object handling as many instances
13:49 - as we want so here on the text writer
13:51 - class let's make a missive class and
13:55 - this will represent a single text wrap
14:01 - okay
14:02 - now in here let's copy our code and the
14:11 - add writer function will essentially be
14:13 - on the constructor alright so we put our
14:22 - code in our nested class and over here
14:28 - on our main class let's simply store a
14:31 - film or a text writer single and when we
14:38 - add writer we created then on our
14:46 - private boy updates if it is not known
14:53 - then we simply call update on it all
14:58 - right so that's it we have our main
15:01 - class just responsible for receiving the
15:03 - function to add a writer and then we
15:05 - have our logic inside our nested class
15:08 - so let's test and see what happens and
15:10 - yep there you go the text writer is
15:13 - still working and everything so working
15:14 - fine exactly the same as previously so
15:17 - we modify the internals of the class but
15:19 - we kept the same exposed function so
15:21 - everything works without having to
15:22 - modify anything else all right now that
15:25 - this new structure is working let's add
15:27 - support for multiple text writers so in
15:29 - here instead of storing just a single
15:32 - text for instance let's store a list
15:38 - then on our private void awake let's
15:41 - initialize our list when we add a writer
15:46 - let's add it to the list and on the
15:49 - update we cycle through the list alright
15:56 - that's it so just like this we should
15:58 - have had a support for multiple text
16:00 - reps so let's test and see if both
16:02 - writers are working any of their it is
16:04 - we have our both text writers working at
16:06 - the same time awesome okay so everything
16:10 - is working but let's see how we can
16:11 - further improve our code now right now
16:14 - in here our objects never get removed
16:17 - from the list so we can't add we add an
16:19 - instance to the list and we keep
16:20 - updating it forever and the update just
16:22 - tests if it's not known so it doesn't
16:24 - break but we keep adding more instances
16:26 - to our list so after quite a while this
16:29 - list would be filled with zombie
16:30 - instances so let's make sure we remove
16:33 - an instance from the list when it is
16:35 - completed now one way I like to do that
16:38 - is by going into the update and just
16:41 - change the return value to boolean and
16:44 - essentially what it does is returns true
16:47 - on is complete so we no longer need to
16:53 - test for UI text to be not null since it
16:56 - won't always be valid then when we reach
17:00 - the end we simply return true and if we
17:03 - don't return true then we return false
17:07 - all right so we have our update function
17:09 - correctly updating and also telling it
17:11 - if it is complete so going back up here
17:14 - where we are cycling through our
17:16 - instance and here let's simply store the
17:18 - return for our update let's call it
17:21 - destroy instance and if we should
17:25 - destroy instance so if the update
17:27 - returned true then let's remove it from
17:29 - our list so going here remove
17:33 - index and since we are doing this inside
17:36 - our four we need to go back and index in
17:38 - order to not skip one alright that's it
17:40 - everything should be working so we're
17:42 - here on the update let's do a debug log
17:45 - on the single list in order to make sure
17:49 - that it goes up while active and then
17:51 - goes down okay here we are and the log
17:53 - is indeed saying two so we have two
17:55 - instances of our text writer and when
17:56 - they both finish their message and there
17:59 - we go it goes back down to zero okay
18:00 - awesome so we no longer have zombie
18:02 - instances wasting performance now one
18:05 - more thing we can do to make our class
18:07 - easy to use is to make it work with
18:09 - simple static functions so that is very
18:11 - simple we simply make here a private
18:13 - static text writer insolence and set it
18:18 - on awake and now let's make this
18:22 - function private and expose a public
18:25 - static the static function simply calls
18:34 - the internal function on our instance
18:39 - alright so we now have a static function
18:41 - and the benefit of this is let's go back
18:44 - into our assistant and in here we don't
18:46 - want to need to store a reference for
18:47 - our text writer in here instead of that
18:51 - we simply come by the class name X
18:53 - writer and we call the static function
18:56 - and that's it now our class is much
18:59 - easier to use this way we don't need to
19:02 - keep passing around references to our
19:03 - object we just come out using the static
19:05 - method so my tea and everything should
19:07 - still be working and there it is both of
19:10 - them still work but we no longer need
19:11 - that reference ok awesome now that we
19:14 - have this let's add the ability to
19:16 - cancel a right
19:17 - so before we see why that's important
19:19 - let's write some code to click on the
19:21 - window in order to skip and show the
19:22 - message so in here we can now get rid of
19:25 - the e secondary assistant ok here on the
19:27 - message game object let's add the button
19:30 - UI component this is part of the code
19:33 - monkey you Tonys that you can grab for
19:34 - free from unity code monkey calm now
19:37 - let's go into our assistant code let's
19:40 - grab the reference to the button
19:47 - and reset the click function to be
19:50 - something all right every time we click
19:55 - let's show a different message okay
20:12 - here's an array with a bunch of messages
20:13 - let's just play a random one all right
20:25 - let's s and see if when we click we can
20:27 - get a new message okay here it is let's
20:30 - click and if there you go there's a nice
20:32 - message click again and yep there you go
20:35 - nice message click again and yep there
20:38 - you go another message click again and
20:40 - yep another message ok great so we are
20:42 - correctly capturing our clicks and
20:44 - posting a different message however
20:46 - let's see what happens when I click
20:48 - multiple times and if there you go
20:51 - everything is completely broken so
20:53 - essentially what happens is that we have
20:55 - multiple text writers competing for the
20:57 - exact same object so we should really
20:59 - destroy the previous one before starting
21:01 - a new one so let's go make that function
21:04 - here on the text writer let's make a
21:07 - function for remove writer and let's
21:13 - identify it with the UI text object so
21:16 - what we do is we cycle through our
21:18 - single list and if this one we test for
21:27 - the UI text object so let's make a
21:30 - function here to return that object
21:38 - so now we can use this all the way up
21:41 - here so if the UI text matches the one
21:44 - that we are looking for then let's
21:47 - remove this one okay so we are correctly
21:50 - removing it from the list and now here
21:53 - on the end let's another optional
21:54 - parameter let's call this remove writer
21:57 - 54 ad and if we receive this as a true
22:02 - let's go remove right all right that
22:10 - should do it let's just go into the
22:13 - assistant and add true on our final
22:15 - remove right okay let's test okay click
22:19 - and yep some words normal now spam
22:21 - clicks any up there you go as you can
22:23 - see it goes back and only plays the very
22:26 - last tax credit so if I stop yep there
22:28 - you go there's one there's another one
22:30 - another one click a bunch of them and
22:32 - yep we no longer have that but okay
22:34 - awesome so another great thing to add to
22:37 - our text writer is in order to be able
22:39 - to skip it when we click so essentially
22:42 - if we click when one is active and click
22:44 - again we should be able to completely
22:45 - see that message before spawning another
22:47 - so for that let's go into our assistant
22:51 - code and in here let's store the text
22:55 - writer text writer single instance so
23:02 - when we add a text writer let's receive
23:04 - that instance so let's modify this in
23:07 - order to return the instance that is
23:08 - created so we just go here modify this
23:11 - return value return from this function
23:14 - modify this return value and then in
23:16 - here we created
23:26 - and just like this okay so every time we
23:30 - call this function we get a return value
23:32 - of the instance that was created so back
23:34 - in here we now have this one and I mean
23:36 - here when we click essentially we want
23:38 - to know if we have a text writer and if
23:40 - it is active and if it is we want to
23:42 - skip and if not then we want to show a
23:44 - new message so we need to test if the
23:47 - taxpayer is active so let's go in here
23:49 - in order to make that function so we
23:51 - make a public return a volume call it is
23:54 - active and here we simply return ap
23:59 - character index is under the text to
24:01 - write link if it is under that then we
24:05 - still have characters right so we are
24:07 - still active so back in the assistant we
24:09 - can out do our if so if the text writers
24:12 - single first of all let's test if it's
24:15 - not known so if it's not the very first
24:17 - one so not know and text writer single
24:20 - dot is active so we have the currently
24:25 - active text writer and if not then we do
24:29 - the same code as previously in order to
24:31 - spawn a new one okay so if it is active
24:34 - then we want to complete it instantly
24:36 - and destroy it so let's make that
24:38 - function or not our text writer single
24:40 - in here making public void and let's
24:43 - call it right all and destroy in here
24:49 - what we're going to do is write the
24:51 - whole thing so let's set the UI text add
24:53 - text to be the full text to write so we
24:57 - write all the text and then let's come
25:00 - up here
25:01 - our remove writer function so in order
25:04 - to not need to pass in references and
25:06 - let's make a static version of this
25:08 - function
25:14 - all right just like that so down here
25:16 - first we write on text and then we
25:18 - context writer dot remove the writer and
25:21 - we pass in our UI text all right so we
25:25 - simply call this in here so if we have a
25:27 - currently active text writer then we
25:29 - call extra a single dot right and
25:32 - destroy now here the is active is
25:36 - testing for the character index so let's
25:38 - make sure we also change that to be the
25:41 - text to write that link so the next time
25:46 - that this is called it won't be false
25:47 - all right so that's pretty much it
25:49 - essentially when we click on our message
25:51 - first we check if we have a text writer
25:54 - and if it is active if so then we call
25:57 - write and destroy so if we click once
26:00 - the text is being written it should
26:01 - display the entire text string and if
26:03 - not then we simply play a new text ring
26:07 - okay that you do it let's see okay your
26:11 - arm let's click OK I'm let's see more
26:14 - longer message click OK it's active
26:17 - click on any up it skips in order to
26:19 - display the entire message
26:20 - so click starts click skip click click
26:24 - click click ok awesome
26:26 - so we have successfully mated that we
26:28 - food click once the writer is active it
26:31 - instantly writes on the text and if we
26:34 - wait for all of it right then we click
26:36 - then it simply prints the next message
26:38 - all right awesome now let's just add one
26:41 - more thing over here in the project
26:44 - found I have this nice thumping effect I
26:46 - made this ages ago and it was heavily
26:49 - inspired by the sound effect on GTA and
26:51 - GTA 2 here it is what's here there it is
26:58 - as you can see just a very nice mumbled
27:00 - honking sound so we want this to play
27:02 - once the text is right so in here let's
27:05 - add the sound to our game object
27:15 - okay here's the talking sound game
27:17 - object now let's go into our script
27:19 - let's grab our reference and in here
27:30 - when we instantiate our ad writer let's
27:33 - start playing our sound just like that
27:37 - alright let's see if the audio starts
27:39 - when we start writing a message okay
27:42 - here we are let's click and if there you
27:44 - go the sound started when I click OK
27:46 - brick now obviously you can hear the
27:48 - problem is that it never stops so in
27:51 - order to fix that we need to know when
27:52 - the text has finished right so for that
27:55 - let's go into our text writer and all
27:58 - the way up here let's add another
28:00 - parameter this will be an action which
28:05 - is inside the using system namespace
28:10 - okay so we have an action which is
28:12 - essentially just a voice delegate and
28:14 - let's call this on complete so let's
28:18 - pass this to our instance function and
28:23 - also to our constructor
28:36 - so here we store our action and down
28:46 - here on our update when the entire
28:48 - string is displayed if we have a nun
28:51 - complete then let's trigger and do the
28:54 - same thing in here when we right on and
28:56 - destroy alright that you do it so we now
29:01 - have a nice compact function so we can
29:03 - go back into our assistant and in here
29:07 - we pass in our action so let's make a
29:09 - function that will work as our action
29:11 - let's call it the stop talking sound
29:23 - alright just like that
29:25 - so when we add a new writer we started
29:27 - talking sound and then we pass in the
29:29 - stop talking sound which won't be
29:31 - triggered when the text writer has
29:32 - finished okay so let's see that okay
29:35 - here we are let's click there is a sound
29:38 - and when it finishes yep the sound stops
29:40 - awesome so he clicked and reaches the
29:44 - end and stops now we click and we skip
29:46 - and it stops as well alright awesome
30:03 - so here we have created a very nice text
30:06 - writing effect this is great for anytime
30:08 - you want to polish the text you're
30:09 - showing the players you can see this
30:11 - effect in action in the assistant for
30:12 - battleground thank you it looks much
30:15 - better like this than just printing the
30:16 - text instantly we created a very nice
30:19 - clean class to handle everything it
30:21 - supports multiple writers and the whole
30:24 - thing is done using a single turn so
30:26 - it's very simple to use using our static
30:28 - functions anywhere else in the code all
30:30 - you need to do is call our static
30:32 - functions and everything will work
30:33 - flawlessly so there's no need to pass
30:35 - any references around so here it is our
30:38 - nice text effect one with some nice
30:40 - sounds as always you can download the
30:44 - project files in utilities from Unity
30:46 - code monkey comm if you liked the video
30:47 - subscribe the channel for more unity to
30:49 - turrets post any questions you have in
30:51 - the comments and I'll do my best
30:52 - internal alright see you next time
30:55 - [Music]

Cleaned transcript:

in this video we're going to make a very nice text writing effect each letter gets written one by one with variable speed and the text position is preserved as it gets written let's begin hello and welcome I'm your code monkey and this channel is all about helping you will learn how to make your own games with indepth tutorials made by a professional indie game developer so if you find the video helpful consider subscribing so this is the effect that we want to make the text is written letter by letter with a custom speed as you can see the text position is preserved so each letter gets written exactly where it should be there is also the ability to skip writing this text by clicking while C text writer is active so quick starts and click and it skips and you can also hear a nice talking sound effect that is active long the text is being written and as soon as the text finishes the sound stops you might recognize this setup since this is pretty much exactly the assistant from Ballarat I could this is an excellent effect to polish up any text you have in your game alright so this is our goal let's get to it here we are in our starting scene so let's begin by making the UI visual so over here in the canvas let's make a new game object and call this the UI assistant now inside let's place a new UI image and over here in my textures folder I have the assistant image straight from Ballarat icon now in here let's make a new game object this will be our container for our message then in sign let's add an image for the arrow another image for the background all right this is the visual now for the UI text in here let's write some random text let's set it up right there and expand the size to occupy the entire box now here to make the support any amount of text let's add the best fit and put a nice maximum okay all right so this is our UI setup we have a nice assistant visual and the text object set up to support any amount of text that we want okay so with this set up let's go into our code so let's first go into the scripts making you see sharp script this will be our UI assistant drag it on to our game object okay now in here let's begin by first storing a reference to our text object so let's grab it on our private void awake we need to be using Unity engine UI okay okay we have our reference for our text field now just for testing let's try setting the text on our start so in here we simply do message text dot text then let's put this on text okay let's try it out and see if our text changes and if there it is there's our nice text okay so far so good we have our UI set up and the code is running now let's make our text brighter so over here make a new C sharp script this won't be the text writer let's make a game object to run our script so in here make our text writer and drag our script okay okay so let's begin by making a function to add a writer to write some text so let's call this simply add writer now in here we need to think about what parameters were going to need now first of all we obviously need to know where we want to write so we need a reference to the target text object then we also need to know what text we want to write so a string for our text to write and finally we need to know how fast each character should be written so let's receive a float for the time per character alright that's it this is all the information we need now let's store these as variables okay now we also need to store a timer so a simple float for our current timeline and now let's do our update and on our update first of all we're only going to run this if we have a UI text object so we do with something live so if it does not know then our text writer is active then in here we simply reduce our timer by the time double time then we check if the timer is under zero then we want to display next character so the first thing we do is reset the timer so we increase the timer by our time for a character that way the code in here only gets run every this amount of time and now in here we need to know what is the next character so that means that we need to keep track of the current index that we are writing so up here we store an int for our character index then we add the writer we set this simply to zero then on the update we increase the inlets so every time we go through this we increase it by one and as we increase it we set the text so our UI text our text we set it to a substring of the total text that we want to write so we do a substring we start off on index zero and we go all the way up to the character index so over time this runs the character index increases so we print another character right so just like this we should have our basic text writer working so let's see how we're going to run this code and we need to do is call this function so in order to do that we need a reference to our text writer so let's go to our UI assistant and in here let's a civilized feel for our text writer so let's drag that reference we're here in the editor there's the assistant with our film and just drag the reference yep there it is alright so now in here we can call our functions so on start instead of setting the text directly let's call our a driver let's pass in our message text for text right let's pass in this same message and the time for character let's put it whenever so we're going to print one character per second alright let's test if there is one character another one another one and yep everything seems to be working right it's printing one character each second so let's see what happens when reaches the end any of there you go we have an error here in the console we can see we have an argument out of range exception as it says the index and the length must refer to a location inside the string so the index cannot be passed in length so we need to test for our end condition so let's go into our code for our text writer and in here on the update we increase the character index okay and now in here let's test if we are already showing the complete string so we simply do an if the character index if the character index is bigger than the text to right point then we have the entire string display so in here let's stop our code so in order to make sure it doesn't run again let's set the UI text back needtoknow and we simply do a return so inclusive this then the next frame UI text will be no so it doesn't run again until it receives another writer all right so let's test and see if everything is working okay here it is and the message is still being written one character per second let's see it at the end and there it is the end of the message helloworld and if there you go no error as soon as it reaches the end the string everything stops and everything is great right awesome so far so good now the coding here actually has a sneaky error so let's say if we go in here let's try to print so here let's say we want to write 20 characters and we want to write it at a rate of 10 characters per second so 0.1 seconds per character so essentially this whole message should print in just few seconds so let's see it running normally there it is and yep after two seconds yep the whole message is ready okay great however now let's go in here and let's forcefully only with our frame rate to just 3 frames per second so go into the application and set the target frame rate to just 3 so again let's see if the message does write in 2 seconds and here we are and nope the message is not being written in 2 seconds it is taking a lot longer now the reason for that is because each frame is taking a ton of time to render so what happens is over here on the text writer our dump the time is massive so that means the timer goes down by a massive amount but we are only doing it simple if so the first tons of time won't put the timer a massive amount under 0 but it will only print 1 character on this update so on the next update it will only print 1 character and so on and so forth so if the depth of time is bigger than 10 per character then the code will not work perfect so the solution to this is actually very simple we just work place in if with a while so whilst we're still in the same frame we're going to print as many characters as the timer allows so let's see if our code running at 3 frames per second still writes that home message in just 2 seconds any of there it is you can see each frame more than one character is written in order to make sure that everything works great right great so even when running at an extremely low framerate our code cell works perfectly all right now one potential issue you see is with the position of the text since the text is centered as it gets written it becomes very hard to read since the text is always moving around so it would be a lot better if we could keep each character in its final position so let's do just that back in our text writer so let's head in here as an extra option let's receive just a bullion now let's call this the characters let's store it okay so now in here let's go into our update so in here we increase the index we calculate the substring okay let's hear store this on a string text and then we set the UI text our text to our text okay however before we do that let's do a simple if for our invisible characters and if we want to render the invisible characters then let's add the rest of the text but set the color in order to be invisible so we increase our text by the substring except in this case it's starting on the character index going all the way to the end and then we simply wrap this with a color tag the color in here is in RGB eh so we have our red then our green then our blue and finally our alpha so with an alpha of zero this text won't be hidden alright so that's pretty much it all we need to go is go back here and on our text writer let's trim on our invisible characters let's see any of there it is each character is being written one by one and now we can actually read it a lot better since every character stays exactly on its final position if we pause when the effect is active let's inspect our text object and in here you can see what's going on so we have the visible part and then we have our color tag and the remainder of our text without this being invisible right awesome so our text writer is working but right now we have one prebaiting limitation in here and let's simply duplicate the UI assistant push it to the left I'm okay and now let's see what happens and as you can see the issue is that only one is working this one is completely static so essentially when we add a second one the second one overrides the first one so only one is active at a time so let's modify our code in order to support multiple text writers at once now there are many a pro we can take here for example we could create a new game object and add the text writer to it whenever we create one however that approach would create a lot of game objects which would severely affect performance so the approach we're going with is to have just one main text writer script and then internally we're going to handle various instances of text frames that way we just have one game object handling as many instances as we want so here on the text writer class let's make a missive class and this will represent a single text wrap okay now in here let's copy our code and the add writer function will essentially be on the constructor alright so we put our code in our nested class and over here on our main class let's simply store a film or a text writer single and when we add writer we created then on our private boy updates if it is not known then we simply call update on it all right so that's it we have our main class just responsible for receiving the function to add a writer and then we have our logic inside our nested class so let's test and see what happens and yep there you go the text writer is still working and everything so working fine exactly the same as previously so we modify the internals of the class but we kept the same exposed function so everything works without having to modify anything else all right now that this new structure is working let's add support for multiple text writers so in here instead of storing just a single text for instance let's store a list then on our private void awake let's initialize our list when we add a writer let's add it to the list and on the update we cycle through the list alright that's it so just like this we should have had a support for multiple text reps so let's test and see if both writers are working any of their it is we have our both text writers working at the same time awesome okay so everything is working but let's see how we can further improve our code now right now in here our objects never get removed from the list so we can't add we add an instance to the list and we keep updating it forever and the update just tests if it's not known so it doesn't break but we keep adding more instances to our list so after quite a while this list would be filled with zombie instances so let's make sure we remove an instance from the list when it is completed now one way I like to do that is by going into the update and just change the return value to boolean and essentially what it does is returns true on is complete so we no longer need to test for UI text to be not null since it won't always be valid then when we reach the end we simply return true and if we don't return true then we return false all right so we have our update function correctly updating and also telling it if it is complete so going back up here where we are cycling through our instance and here let's simply store the return for our update let's call it destroy instance and if we should destroy instance so if the update returned true then let's remove it from our list so going here remove index and since we are doing this inside our four we need to go back and index in order to not skip one alright that's it everything should be working so we're here on the update let's do a debug log on the single list in order to make sure that it goes up while active and then goes down okay here we are and the log is indeed saying two so we have two instances of our text writer and when they both finish their message and there we go it goes back down to zero okay awesome so we no longer have zombie instances wasting performance now one more thing we can do to make our class easy to use is to make it work with simple static functions so that is very simple we simply make here a private static text writer insolence and set it on awake and now let's make this function private and expose a public static the static function simply calls the internal function on our instance alright so we now have a static function and the benefit of this is let's go back into our assistant and in here we don't want to need to store a reference for our text writer in here instead of that we simply come by the class name X writer and we call the static function and that's it now our class is much easier to use this way we don't need to keep passing around references to our object we just come out using the static method so my tea and everything should still be working and there it is both of them still work but we no longer need that reference ok awesome now that we have this let's add the ability to cancel a right so before we see why that's important let's write some code to click on the window in order to skip and show the message so in here we can now get rid of the e secondary assistant ok here on the message game object let's add the button UI component this is part of the code monkey you Tonys that you can grab for free from unity code monkey calm now let's go into our assistant code let's grab the reference to the button and reset the click function to be something all right every time we click let's show a different message okay here's an array with a bunch of messages let's just play a random one all right let's s and see if when we click we can get a new message okay here it is let's click and if there you go there's a nice message click again and yep there you go nice message click again and yep there you go another message click again and yep another message ok great so we are correctly capturing our clicks and posting a different message however let's see what happens when I click multiple times and if there you go everything is completely broken so essentially what happens is that we have multiple text writers competing for the exact same object so we should really destroy the previous one before starting a new one so let's go make that function here on the text writer let's make a function for remove writer and let's identify it with the UI text object so what we do is we cycle through our single list and if this one we test for the UI text object so let's make a function here to return that object so now we can use this all the way up here so if the UI text matches the one that we are looking for then let's remove this one okay so we are correctly removing it from the list and now here on the end let's another optional parameter let's call this remove writer 54 ad and if we receive this as a true let's go remove right all right that should do it let's just go into the assistant and add true on our final remove right okay let's test okay click and yep some words normal now spam clicks any up there you go as you can see it goes back and only plays the very last tax credit so if I stop yep there you go there's one there's another one another one click a bunch of them and yep we no longer have that but okay awesome so another great thing to add to our text writer is in order to be able to skip it when we click so essentially if we click when one is active and click again we should be able to completely see that message before spawning another so for that let's go into our assistant code and in here let's store the text writer text writer single instance so when we add a text writer let's receive that instance so let's modify this in order to return the instance that is created so we just go here modify this return value return from this function modify this return value and then in here we created and just like this okay so every time we call this function we get a return value of the instance that was created so back in here we now have this one and I mean here when we click essentially we want to know if we have a text writer and if it is active and if it is we want to skip and if not then we want to show a new message so we need to test if the taxpayer is active so let's go in here in order to make that function so we make a public return a volume call it is active and here we simply return ap character index is under the text to write link if it is under that then we still have characters right so we are still active so back in the assistant we can out do our if so if the text writers single first of all let's test if it's not known so if it's not the very first one so not know and text writer single dot is active so we have the currently active text writer and if not then we do the same code as previously in order to spawn a new one okay so if it is active then we want to complete it instantly and destroy it so let's make that function or not our text writer single in here making public void and let's call it right all and destroy in here what we're going to do is write the whole thing so let's set the UI text add text to be the full text to write so we write all the text and then let's come up here our remove writer function so in order to not need to pass in references and let's make a static version of this function all right just like that so down here first we write on text and then we context writer dot remove the writer and we pass in our UI text all right so we simply call this in here so if we have a currently active text writer then we call extra a single dot right and destroy now here the is active is testing for the character index so let's make sure we also change that to be the text to write that link so the next time that this is called it won't be false all right so that's pretty much it essentially when we click on our message first we check if we have a text writer and if it is active if so then we call write and destroy so if we click once the text is being written it should display the entire text string and if not then we simply play a new text ring okay that you do it let's see okay your arm let's click OK I'm let's see more longer message click OK it's active click on any up it skips in order to display the entire message so click starts click skip click click click click ok awesome so we have successfully mated that we food click once the writer is active it instantly writes on the text and if we wait for all of it right then we click then it simply prints the next message all right awesome now let's just add one more thing over here in the project found I have this nice thumping effect I made this ages ago and it was heavily inspired by the sound effect on GTA and GTA 2 here it is what's here there it is as you can see just a very nice mumbled honking sound so we want this to play once the text is right so in here let's add the sound to our game object okay here's the talking sound game object now let's go into our script let's grab our reference and in here when we instantiate our ad writer let's start playing our sound just like that alright let's see if the audio starts when we start writing a message okay here we are let's click and if there you go the sound started when I click OK brick now obviously you can hear the problem is that it never stops so in order to fix that we need to know when the text has finished right so for that let's go into our text writer and all the way up here let's add another parameter this will be an action which is inside the using system namespace okay so we have an action which is essentially just a voice delegate and let's call this on complete so let's pass this to our instance function and also to our constructor so here we store our action and down here on our update when the entire string is displayed if we have a nun complete then let's trigger and do the same thing in here when we right on and destroy alright that you do it so we now have a nice compact function so we can go back into our assistant and in here we pass in our action so let's make a function that will work as our action let's call it the stop talking sound alright just like that so when we add a new writer we started talking sound and then we pass in the stop talking sound which won't be triggered when the text writer has finished okay so let's see that okay here we are let's click there is a sound and when it finishes yep the sound stops awesome so he clicked and reaches the end and stops now we click and we skip and it stops as well alright awesome so here we have created a very nice text writing effect this is great for anytime you want to polish the text you're showing the players you can see this effect in action in the assistant for battleground thank you it looks much better like this than just printing the text instantly we created a very nice clean class to handle everything it supports multiple writers and the whole thing is done using a single turn so it's very simple to use using our static functions anywhere else in the code all you need to do is call our static functions and everything will work flawlessly so there's no need to pass any references around so here it is our nice text effect one with some nice sounds as always you can download the project files in utilities from Unity code monkey comm if you liked the video subscribe the channel for more unity to turrets post any questions you have in the comments and I'll do my best internal alright see you next time
