With timestamps:

00:00 - hey everyone how's it going thanks for
00:02 - being here for this stream I'm planning
00:03 - to try out something different so we're
00:06 - going to make a sort of q a sort of a
00:09 - quiz where I can post a question then
00:11 - you can vote in chat and then we can see
00:13 - and learn a bunch of things together
00:15 - that's pretty much going with this live
00:17 - stream first of all just for testing let
00:19 - me actually make a simple question let's
00:23 - go Create a quiz and there you go a very
00:26 - simple and basic quiz and basically you
00:29 - vote in chat by doing vote and then
00:30 - either A or B that's pretty much the
00:32 - goal and let's see if all of this works
00:35 - correctly so as you vote there you go
00:36 - the little characters they move there
00:39 - it's recently but all right look at that
00:43 - all right that's great so far it seems
00:45 - to be working correctly so I'm going to
00:47 - vote myself a zone so in my case I'm
00:50 - going to go with dogs so I'm going to
00:51 - vote B look at that it's pretty much 50
00:54 - 30. Ah that's funny
00:56 - and then well the next part is when
01:00 - there's a question when the time is just
01:02 - visual so I can then manually end it and
01:05 - I can either say one question is correct
01:07 - or all of them are correct so in this
01:09 - case
01:09 - um they are correct so let's go ahead
01:11 - end the quiz and there you go they're
01:13 - all correct they're all happy everybody
01:15 - succeed okay so basically I'm going to
01:18 - try to show some questions and you can
01:20 - vote on the answer then I can talk about
01:22 - some learning thing related to the
01:24 - question all right okay so let me first
01:27 - post a post the first question there you
01:30 - go create quiz and there you go the
01:31 - brand new question so what is the name
01:33 - of the game relating to the game in the
01:35 - free course so is it kitchen chaos
01:37 - cloner cooked or Chef chaos so let's see
01:40 - if all of you know the first basic
01:41 - question I mean the clue is kind of on
01:43 - screen but let's see if all of you know
01:45 - it all right look at that so there's two
01:48 - song Theory people C and for some reason
01:50 - some people aren't even though there's
01:52 - no d right now some people want to be
01:54 - and most people over here on a there you
01:56 - go like that all those people and the
01:58 - correct one for this one is obviously a
02:00 - kitchen chaos so let's end the quiz and
02:02 - there you go everybody's really happy
02:04 - yeah let's start with a proper question
02:08 - so this is on the lecture for the
02:10 - creative project and the question is
02:12 - which anti version did I use in the
02:14 - course so was it the 2021 LTS the 2022
02:17 - Tech version or was it the 23 Alpha
02:20 - version so go ahead post your votes and
02:22 - this one is with regards to the create
02:25 - project ledger so by the way over here
02:27 - on the website here is the course
02:28 - collection and if you click on one of
02:30 - these it automatically Scrolls down and
02:32 - there you go you have the correct answer
02:33 - is indeed over here B and it is the tech
02:35 - version so usually Technically when it
02:38 - comes to UNT versions you should
02:39 - probably stick with the LTS version but
02:41 - the only reason why I went with the tech
02:43 - version for this uh course is because I
02:45 - want the course I want the video to stay
02:47 - up to date for as long as possible
02:49 - technically usually you should use LTS I
02:51 - just went to Tech because Tech is going
02:53 - to turned into the LTS version in about
02:55 - two months usually around March or April
02:57 - that's when Unity launches their brand
02:59 - new MTS version So at around that time
03:01 - 22 should turn into LTS so at that time
03:03 - you should be able to use that one and
03:05 - there you go here is the question so
03:07 - this one is with regards to lecture two
03:09 - so that's in layout lecture so this one
03:11 - is do you know about the pivot Center
03:12 - local buttons yes no maybe can you
03:15 - repeat the question so let's see who
03:18 - gets this reference and yeah there you
03:20 - go so the questions with regards to the
03:22 - pivot Center on local Global buttons
03:24 - these are extremely important you
03:25 - definitely need to know about them so
03:27 - let's see how many of you know about
03:28 - them so most people are getting etns
03:30 - that's awesome because this is actually
03:32 - two very important buttons that a lot of
03:35 - people don't know about so yeah and for
03:38 - this one there's really no wrong answer
03:39 - because it's a general so
03:41 - congratulations to all of you so here is
03:43 - a basic testing project just to test it
03:45 - out and basically the buttons that I'm
03:46 - referring to are the ones up here on the
03:48 - scene view so there's this one on this
03:49 - side which says Center or pivot and
03:52 - there's another one which is global or
03:53 - local and basically these are extremely
03:55 - important so for example if you've got a
03:57 - game object let's make it a Cuban set so
04:00 - let's make an empty queue there you go
04:01 - here is a cube and if inside I put
04:05 - another object so let's say I put
04:07 - another Cube inside this Cube and for
04:09 - this other Cube let's put it somewhere
04:11 - on the side so now if I select the
04:13 - parent object and if over there it is
04:15 - Select non-pivot look at where the
04:17 - transform handle is it's right there
04:19 - it's exactly on the origin of that
04:21 - object however if up there if now I
04:23 - change to center now instead of being on
04:25 - the pivot now it's over there on the
04:26 - center now if you try rotating you would
04:28 - assume that it would rotate right over
04:30 - there where the handle is if you look
04:32 - over there it is now rotating just on
04:34 - the Y but also moving on the X and also
04:36 - moving on the Z so if I move it even
04:38 - further away and now it's like this one
04:41 - there you go with that one set to center
04:43 - now it actually selects the transform
04:44 - handle right on the center and if I
04:46 - rotate it look over there it's not just
04:48 - rotating on the Y if I rotate on the
04:50 - white rotates like this but if I rotate
04:52 - on the handle it rotate it's like that
04:53 - so this is something that is usually
04:55 - very confusing if you don't know what is
04:57 - going on so that is why this is
04:58 - extremely important and pretty much in
05:00 - 99 of cases you want to leave this one
05:02 - on pivot that's that way it makes sense
05:04 - so if you rotate over there it rotates
05:06 - on the pivot exactly as it should and
05:08 - the next one that one is the local or
05:10 - Global so that is with regards to
05:12 - rotation so for example let's say on the
05:15 - parent I rotate this one let's rotate it
05:17 - point it upwards like this so like this
05:20 - this is set on local mode and look at
05:22 - how the handles are rotated kind of
05:24 - slanted whereas if I put this in global
05:26 - now the handles have the global rotation
05:28 - so regardless of how the object is
05:30 - rotated these are always like this so if
05:32 - I move over here on the red arrow you
05:35 - would assume that it moves just on the I
05:37 - think the red is the Zen or now it's e
05:39 - and CX you would think by this it would
05:41 - only move on the X
05:43 - whereas if I put it on local if I put
05:46 - them like this this one is moved based
05:47 - on the rotation that the object is in so
05:49 - if you want to put an object in front of
05:51 - it somewhere like this and you won't
05:53 - just push the object to the side then
05:55 - it's usually better to use it on local
05:56 - whereas if you want to move it relative
05:58 - to the world itself put it on global and
06:00 - move it around so yeah basically these
06:02 - two are some of the things that can
06:03 - really drive you crazy if you don't know
06:05 - about them so in most cases you really
06:07 - want to leave this one on pivot and this
06:08 - one either on local or Global depending
06:10 - on the use case all right so here is the
06:12 - question so in the lecture for visual
06:14 - studio so what Visual Studio extension
06:16 - did I use for the extra colors in the
06:17 - code so was it called counter plus is it
06:21 - nothing is it just a visual studio this
06:22 - phone defaults or is it vs4 so it seems
06:25 - a lot of people are confident in seeing
06:27 - is that correct some people are still
06:28 - over here stuck on D I don't know why
06:30 - because there's no d right now and the
06:33 - correct answer is C indeed it is the
06:35 - ashfora yep so that it is so here is my
06:38 - visual studio and basically on
06:39 - extensions magic extensions and over
06:42 - here if you search for online you'll
06:44 - find VIA
06:46 - and there you go it adds color to your
06:48 - Visual Studio text editor so this is the
06:51 - one that I use in the course and
06:52 - basically what it does it adds a bunch
06:53 - more colors so look at this over here
06:55 - the default in the case in a nice pink
06:57 - so the switch are nice orange and the
06:59 - types in a different color than the
07:01 - functions in another color having all
07:03 - these colors really makes the code much
07:05 - easier to read much easier to see I
07:07 - would definitely recommend you grab this
07:09 - extension so that is called vs4 and yep
07:11 - 61 of you did indeed correctly guess so
07:14 - yep congratulations and there you go
07:17 - okay so here's the question which is
07:18 - which one of these is correct so Pascal
07:21 - case camel case and snake case these are
07:24 - the names for the capitalization of the
07:27 - letters the words and so on and let's
07:29 - see which one is indeed correct in it
07:32 - there you go it is indeed option A so
07:34 - congratulations to all of you definitely
07:36 - make sure you always use the correct
07:37 - naming rules I mean correct is a bit of
07:39 - a wrong word the important thing is that
07:41 - you are consistent so whatever naming
07:43 - rules you follow doesn't matter you can
07:45 - follow Pascal case for functions or
07:47 - maybe use Pascal case for class names or
07:49 - maybe use it for fields or maybe
07:51 - properties whatever you want the most
07:53 - important thing when it comes to code
07:54 - style naming rules just being consistent
07:55 - so whatever you do whatever you choose
07:57 - come up with a style that makes sense to
07:59 - you and then stick with it that's pretty
08:01 - much it okay so with regards to post
08:03 - processing should you add post
08:04 - processing as soon as possible and let's
08:06 - end the quiz and which one is the
08:08 - correct answer and the answer is all of
08:10 - them are correct basically when it comes
08:12 - to post-processing usually you probably
08:13 - shouldn't do it like literally at the
08:16 - first thing so you should probably focus
08:17 - on the actual mechanics in the actual
08:19 - things so personally for me post
08:20 - processing is something that I'll leave
08:22 - later on in the process when I actually
08:24 - want to show the game to someone so when
08:26 - I want to promote it and so on however
08:28 - one thing that a lot of people have
08:30 - mentioned which I do think that it makes
08:32 - a lot of sense which is post-processing
08:33 - can also help you with regards to
08:35 - motivation so if you're the kind of
08:36 - person who has trouble with motivation
08:38 - motivating yourself with actually
08:40 - continuing to work on the game if that's
08:43 - the the kind of mindset that you have
08:45 - then post processing connection really
08:46 - help because by post processing
08:48 - originally making sure that your visuals
08:50 - look quite a bit better so if you focus
08:53 - on that in the very beginning that can
08:54 - actually help you stick with the project
08:55 - for the long run which in turn obviously
08:58 - helps you actually finish that project
08:59 - and there you go okay so question this
09:01 - one is on lecture seven so that's a
09:03 - lecture on the character controller
09:04 - should you make all of your variables
09:06 - public so a no yes or yes because I want
09:11 - to torture my programmer teammates okay
09:14 - so that's it so let's go ahead and the
09:16 - quiz and see which one is the answer for
09:19 - this one
09:20 - and yep of course the answer is indeed a
09:23 - so no you should not make all of your
09:25 - variables bubbling in fact they should
09:27 - never be public so pretty much I
09:28 - generally don't think I've ever seen a
09:30 - use case for public well the exception
09:32 - would be on Scribble objects so for
09:34 - those I usually do make them public
09:36 - because on a scriptable object we
09:38 - generally deal as a read-only data
09:40 - container but yeah for regular variables
09:42 - yeah they should never be public there's
09:43 - no reason to be public so for example
09:45 - over here I got a public a float for the
09:49 - move speed let's say this is the
09:50 - character script
09:52 - and then I've got another one so public
09:54 - class for the enemy
09:56 - so the enemy is doing something
09:58 - and over here the enemy has a reference
10:02 - to the character so the character so
10:03 - this is the player character and then on
10:07 - private void update
10:09 - for some reason the enemy decides that
10:11 - it wants to mess up the character so it
10:13 - can go into the character set the move
10:15 - speed equal zero and there you go this
10:17 - one is perfectly valid code so the enemy
10:19 - can suddenly modify the move speed on
10:21 - the character and everything breaks and
10:22 - your player can no longer move because
10:24 - you accidentally modified something when
10:26 - it should never be modified so basically
10:28 - by making it public you are enabling
10:30 - both read and right axes from any other
10:32 - class so if you have a thousand classes
10:34 - in your code base then that's a thousand
10:36 - points where you might be modifying this
10:38 - which might cause all kinds of breakage
10:40 - things in your game so you don't want
10:42 - that okay so this one is going to be on
10:44 - lecture eight so that is in lecture on
10:46 - the character Visual and rotation
10:49 - so in this lecture what is the
10:50 - difference between lerp and slurp so
10:52 - it's different that slurp sounds bad
10:54 - which I guess maybe a little bit uh is
10:57 - it that LARP works with vectors and
10:59 - smaller ports and directions or layer
11:01 - ports with directions and similar ports
11:03 - with vectors alright so let's end the
11:05 - quiz and there you go yep the answer is
11:07 - over here indeed the solar works with
11:10 - vectors where a slurp works with
11:12 - directions now the important thing with
11:13 - this one is for example if you make a
11:16 - interpolation between a vector pointing
11:17 - right and then a vector pointing left if
11:20 - you do that and you use slurp then
11:21 - basically it's going to rotate because
11:23 - it's going to work with directions
11:24 - whereas if you use it with alert then
11:27 - basically this Vector is going to shrink
11:28 - and then pretty much do a 180 and stick
11:31 - around there so that might sound a bit
11:33 - confusing so maybe this okay so here is
11:36 - the demo that I'm showing
11:37 - so basically what matters over there the
11:39 - blue arrow So currently this one is
11:42 - using slurp so let's see what this one
11:44 - does so if I hit on play look at that
11:46 - blue arrow and let's see what it does
11:47 - and there you go it rotates around like
11:50 - that so look what it does okay so this
11:53 - one is using lerp and basically the
11:54 - starting Vector is one zero so a vector
11:57 - pointed to right and look how this the
11:58 - vector basically becomes shorter and
12:00 - shorter until it gets into zero and then
12:03 - flips around to the other end and then
12:04 - becomes so basically we can shorten and
12:06 - then goes out whereas if you use slurp
12:09 - and there you go so it starts off on one
12:11 - and instead of becoming shortened this
12:12 - one actually rotates so this one goes
12:14 - down on the set so it goes down like
12:15 - this and rotates around instead of
12:17 - becoming shorter and pointing the other
12:19 - way so if an animation has a property in
12:21 - yellow saying missing what exactly is
12:23 - the problem so is the problem that there
12:25 - is no child object with that exact name
12:27 - is it that the animation file is
12:28 - corrupted or was the animation not added
12:31 - to the animator State machine alright so
12:34 - this is what I'm what I'm talking about
12:35 - there that one is in Young low so what
12:38 - does that mean so let's end the quiz and
12:41 - see which one is the correct answer and
12:43 - drum roll and there you go the answer is
12:45 - indeed over here a so the answer is
12:48 - there's no child object with that exact
12:49 - name yeah basically when this happens is
12:51 - because there's no child of this object
12:54 - named exactly head this is one of the
12:56 - annoying things about animations is that
12:58 - it's actually based on strings so it's
13:00 - all based on names so most of you
13:02 - probably don't write note that I hate
13:03 - strings for identifying things and
13:05 - basically the reason why this one is
13:07 - saying missing is because I went ahead
13:08 - and I modified this one so I renamed
13:10 - this one to head 2 so now if I play the
13:12 - animation that one isn't actually going
13:14 - to play the animation because it doesn't
13:16 - have any object named exactly head so
13:19 - the solution to this is either go up
13:21 - here and you can click you can click
13:23 - once to select and then wait a bit and
13:24 - then click again and you can rename the
13:26 - object so if I go over here and I rename
13:28 - this property to head 2 to match the one
13:30 - over there there you go now it's no
13:32 - longer in yellow so now it does fine
13:34 - there you go the head is indeed moving
13:36 - up whereas if I I put it back into that
13:38 - one
13:39 - where it says missing now I move around
13:41 - now the head does not move alright so
13:43 - yeah this was a a simple question can
13:45 - you use an orthograph camera in a 3D
13:47 - game and the answer is yep you can so
13:49 - here is my demo scene so this one is for
13:52 - the main menu for kitchen cows and if I
13:55 - select the camera where's my camera
13:57 - there you go my main camera and over
13:58 - here it is set as perspective so this is
14:00 - like a it's what you usually think about
14:02 - when you think of a 3D camera but you
14:05 - can put it as orthographic so over here
14:07 - the characters they all look perfectly
14:08 - the same even though they are at
14:10 - different distances whereas with a
14:11 - perspective camera this one up front is
14:13 - much bigger and the ones on front are
14:15 - more squished I don't know the technical
14:18 - terms that's pretty much it so the
14:20 - question is what is the difference
14:21 - between overlap box and box cast
14:24 - so is it a overnight box test if there's
14:27 - a collision on the target area and box
14:29 - casts if there's a collision anywhere
14:31 - between two points or is it B over on
14:33 - lightbox the 2D box cancels reading or
14:36 - is it C Overland box is better suited
14:38 - for characters and boxcast for objects
14:41 - so go ahead and post your votes in chat
14:43 - yeah there you go the correct answer is
14:45 - indeed a which is overlap box this if
14:47 - there's a collision just on the target
14:48 - area whereas the box has tests if
14:51 - there's a collision anywhere between the
14:52 - two points so here I've got a testing
14:54 - scene so let's say this is a wall and
14:56 - this one actually has a leather and
14:58 - let's say you've got a character over
15:00 - here and the character wants to move to
15:01 - this position so if you do if the
15:03 - character is here and you do an overlap
15:05 - box over here on this position then two
15:07 - on returned phones because it won't find
15:09 - any colliders because there are no
15:10 - colliders directly on this position
15:12 - whereas if you use a boxcast basically
15:14 - what the boxes does is it moves a
15:16 - virtual box or a virtual shape depends
15:18 - if it's a box has sphere cast and so on
15:20 - if it's a box yes then basically the
15:22 - physics system will move a virtual box
15:24 - in the virtual physics space and will
15:27 - move from A to B and in that movement it
15:29 - won't find anything that collides within
15:31 - between the points A and B so in this
15:34 - case if you do an overlap box it won't
15:35 - just has this position and return false
15:37 - but if you were to do a box cast it
15:39 - would start from here and move a virtual
15:41 - logs onto this direction and it would
15:43 - find this wall in the middle so that
15:44 - would return true because it would
15:46 - indeed find something so what is the
15:48 - cause of the flickering bug look at this
15:51 - look at this flickering so this is what
15:53 - I mean so what is the cause of this
15:55 - flickering bug where the texture is
15:57 - flickering back and forth
15:59 - so is it that two objects are on the
16:01 - mathematically exact position is the GPU
16:03 - broken or is it a physics collision and
16:05 - yep the answer is indeed a it is two
16:08 - objects are on the mathematically exact
16:10 - position or like these people mentioned
16:12 - the more technical term is Z fighting so
16:15 - it's more in the Z buffer so basically
16:18 - since this quad is literally on position
16:20 - where's the position
16:22 - there you go it's literally on zero just
16:24 - like the floor object these are on the
16:27 - exact same thing so this is a very nasty
16:29 - visual issue so if you have this one
16:31 - solution is super simple literally just
16:33 - put this a tiny bit off there you go
16:35 - just like this just by moving it by 0.01
16:37 - and now no longer got the problem so Yep
16:40 - this is called Z fighting because both
16:42 - are on the exact same depth so that is
16:44 - what makes it
16:45 - quite annoying so if you have that now
16:47 - you know just make sure that one of the
16:49 - objects is not on the exact perfect
16:51 - position and everything will be nice and
16:53 - fixed how many interfaces and bass
16:56 - masses can a class implement or extend
16:58 - so is it a multiple interfaces but only
17:00 - one base less or is it being multiple
17:03 - base less but only one interface or is
17:06 - it c as many as you want so if you have
17:07 - bass and lessons in interfaces how many
17:09 - can you implement slash extend and in
17:12 - the quiz any of there you go it is
17:13 - indeed correct so basically you can
17:15 - Implement multiple interfaces but you
17:18 - can only extend one base less that is
17:20 - one of the limitations and one of the
17:22 - reasons why you should use interfaces
17:24 - over base classes if you don't know what
17:27 - I'm talking about here's a quick test so
17:30 - instead of making a public class you can
17:32 - make it an interface so I my interface
17:36 - you can do this and then inside you can
17:39 - have a function my function and do
17:44 - something and then on a class you would
17:45 - implement this interface and again as it
17:47 - says on the question you can Implement
17:49 - multiple interface but as a C sharp 7
17:52 - you can also do something awesome which
17:54 - is over here
17:55 - you can do a default implementation so
17:58 - if you have an interface and already
17:59 - have a bunch of objects that Implement
18:01 - that interface and you want to add
18:03 - something new you can add a default
18:05 - implementation and everything will work
18:07 - perfectly so you don't have to actually
18:08 - add the implementation but you can if
18:10 - you want to so interface are super
18:12 - awesome for example if you got a game
18:14 - and some objects have an inventory and
18:16 - some objects don't you can use an
18:18 - interface to say I has enter I has
18:21 - inventory and Implement that interface
18:23 - on any object that has an inventory so
18:25 - interface are super powerful so this one
18:28 - about c-sharp events and c-sharp events
18:30 - you something called a function
18:32 - signature so the question is what is a
18:33 - function signature so is it a the
18:35 - function name is it B the return type
18:37 - and parameter types or is it C the
18:40 - return type the function name the
18:42 - parameter types and parameter names and
18:44 - there you go the answer is B so now the
18:46 - majority was actually wrong for the
18:48 - first time wow that is interesting so
18:51 - yep the answer is B for the function
18:53 - signature what matters is the return
18:54 - type and the premium other types meaning
18:57 - that the function name and the parameter
18:58 - names that does not matter so you can
19:00 - have a function with different names
19:03 - different parameter names as long as the
19:05 - types are correct that is the one thing
19:07 - that really does matter alright so yeah
19:09 - thank you all so much for being here on
19:11 - this live stream this was a different
19:12 - thing it was an experiment and well so
19:14 - far it went pretty well so I'm pretty
19:15 - happy with how it went so hopefully all
19:17 - of you enjoyed it so hopefully a bit
19:19 - more in the in the future so my plan for
19:22 - this year is definitely doing a bunch
19:23 - more live streams and experiment with
19:25 - different things kind of like this so
19:26 - hopefully you enjoyed it so thank you
19:28 - all so much for being here thank you so
19:29 - much and I'll see you next time

Cleaned transcript:

hey everyone how's it going thanks for being here for this stream I'm planning to try out something different so we're going to make a sort of q a sort of a quiz where I can post a question then you can vote in chat and then we can see and learn a bunch of things together that's pretty much going with this live stream first of all just for testing let me actually make a simple question let's go Create a quiz and there you go a very simple and basic quiz and basically you vote in chat by doing vote and then either A or B that's pretty much the goal and let's see if all of this works correctly so as you vote there you go the little characters they move there it's recently but all right look at that all right that's great so far it seems to be working correctly so I'm going to vote myself a zone so in my case I'm going to go with dogs so I'm going to vote B look at that it's pretty much 50 30. Ah that's funny and then well the next part is when there's a question when the time is just visual so I can then manually end it and I can either say one question is correct or all of them are correct so in this case um they are correct so let's go ahead end the quiz and there you go they're all correct they're all happy everybody succeed okay so basically I'm going to try to show some questions and you can vote on the answer then I can talk about some learning thing related to the question all right okay so let me first post a post the first question there you go create quiz and there you go the brand new question so what is the name of the game relating to the game in the free course so is it kitchen chaos cloner cooked or Chef chaos so let's see if all of you know the first basic question I mean the clue is kind of on screen but let's see if all of you know it all right look at that so there's two song Theory people C and for some reason some people aren't even though there's no d right now some people want to be and most people over here on a there you go like that all those people and the correct one for this one is obviously a kitchen chaos so let's end the quiz and there you go everybody's really happy yeah let's start with a proper question so this is on the lecture for the creative project and the question is which anti version did I use in the course so was it the 2021 LTS the 2022 Tech version or was it the 23 Alpha version so go ahead post your votes and this one is with regards to the create project ledger so by the way over here on the website here is the course collection and if you click on one of these it automatically Scrolls down and there you go you have the correct answer is indeed over here B and it is the tech version so usually Technically when it comes to UNT versions you should probably stick with the LTS version but the only reason why I went with the tech version for this uh course is because I want the course I want the video to stay up to date for as long as possible technically usually you should use LTS I just went to Tech because Tech is going to turned into the LTS version in about two months usually around March or April that's when Unity launches their brand new MTS version So at around that time 22 should turn into LTS so at that time you should be able to use that one and there you go here is the question so this one is with regards to lecture two so that's in layout lecture so this one is do you know about the pivot Center local buttons yes no maybe can you repeat the question so let's see who gets this reference and yeah there you go so the questions with regards to the pivot Center on local Global buttons these are extremely important you definitely need to know about them so let's see how many of you know about them so most people are getting etns that's awesome because this is actually two very important buttons that a lot of people don't know about so yeah and for this one there's really no wrong answer because it's a general so congratulations to all of you so here is a basic testing project just to test it out and basically the buttons that I'm referring to are the ones up here on the scene view so there's this one on this side which says Center or pivot and there's another one which is global or local and basically these are extremely important so for example if you've got a game object let's make it a Cuban set so let's make an empty queue there you go here is a cube and if inside I put another object so let's say I put another Cube inside this Cube and for this other Cube let's put it somewhere on the side so now if I select the parent object and if over there it is Select nonpivot look at where the transform handle is it's right there it's exactly on the origin of that object however if up there if now I change to center now instead of being on the pivot now it's over there on the center now if you try rotating you would assume that it would rotate right over there where the handle is if you look over there it is now rotating just on the Y but also moving on the X and also moving on the Z so if I move it even further away and now it's like this one there you go with that one set to center now it actually selects the transform handle right on the center and if I rotate it look over there it's not just rotating on the Y if I rotate on the white rotates like this but if I rotate on the handle it rotate it's like that so this is something that is usually very confusing if you don't know what is going on so that is why this is extremely important and pretty much in 99 of cases you want to leave this one on pivot that's that way it makes sense so if you rotate over there it rotates on the pivot exactly as it should and the next one that one is the local or Global so that is with regards to rotation so for example let's say on the parent I rotate this one let's rotate it point it upwards like this so like this this is set on local mode and look at how the handles are rotated kind of slanted whereas if I put this in global now the handles have the global rotation so regardless of how the object is rotated these are always like this so if I move over here on the red arrow you would assume that it moves just on the I think the red is the Zen or now it's e and CX you would think by this it would only move on the X whereas if I put it on local if I put them like this this one is moved based on the rotation that the object is in so if you want to put an object in front of it somewhere like this and you won't just push the object to the side then it's usually better to use it on local whereas if you want to move it relative to the world itself put it on global and move it around so yeah basically these two are some of the things that can really drive you crazy if you don't know about them so in most cases you really want to leave this one on pivot and this one either on local or Global depending on the use case all right so here is the question so in the lecture for visual studio so what Visual Studio extension did I use for the extra colors in the code so was it called counter plus is it nothing is it just a visual studio this phone defaults or is it vs4 so it seems a lot of people are confident in seeing is that correct some people are still over here stuck on D I don't know why because there's no d right now and the correct answer is C indeed it is the ashfora yep so that it is so here is my visual studio and basically on extensions magic extensions and over here if you search for online you'll find VIA and there you go it adds color to your Visual Studio text editor so this is the one that I use in the course and basically what it does it adds a bunch more colors so look at this over here the default in the case in a nice pink so the switch are nice orange and the types in a different color than the functions in another color having all these colors really makes the code much easier to read much easier to see I would definitely recommend you grab this extension so that is called vs4 and yep 61 of you did indeed correctly guess so yep congratulations and there you go okay so here's the question which is which one of these is correct so Pascal case camel case and snake case these are the names for the capitalization of the letters the words and so on and let's see which one is indeed correct in it there you go it is indeed option A so congratulations to all of you definitely make sure you always use the correct naming rules I mean correct is a bit of a wrong word the important thing is that you are consistent so whatever naming rules you follow doesn't matter you can follow Pascal case for functions or maybe use Pascal case for class names or maybe use it for fields or maybe properties whatever you want the most important thing when it comes to code style naming rules just being consistent so whatever you do whatever you choose come up with a style that makes sense to you and then stick with it that's pretty much it okay so with regards to post processing should you add post processing as soon as possible and let's end the quiz and which one is the correct answer and the answer is all of them are correct basically when it comes to postprocessing usually you probably shouldn't do it like literally at the first thing so you should probably focus on the actual mechanics in the actual things so personally for me post processing is something that I'll leave later on in the process when I actually want to show the game to someone so when I want to promote it and so on however one thing that a lot of people have mentioned which I do think that it makes a lot of sense which is postprocessing can also help you with regards to motivation so if you're the kind of person who has trouble with motivation motivating yourself with actually continuing to work on the game if that's the the kind of mindset that you have then post processing connection really help because by post processing originally making sure that your visuals look quite a bit better so if you focus on that in the very beginning that can actually help you stick with the project for the long run which in turn obviously helps you actually finish that project and there you go okay so question this one is on lecture seven so that's a lecture on the character controller should you make all of your variables public so a no yes or yes because I want to torture my programmer teammates okay so that's it so let's go ahead and the quiz and see which one is the answer for this one and yep of course the answer is indeed a so no you should not make all of your variables bubbling in fact they should never be public so pretty much I generally don't think I've ever seen a use case for public well the exception would be on Scribble objects so for those I usually do make them public because on a scriptable object we generally deal as a readonly data container but yeah for regular variables yeah they should never be public there's no reason to be public so for example over here I got a public a float for the move speed let's say this is the character script and then I've got another one so public class for the enemy so the enemy is doing something and over here the enemy has a reference to the character so the character so this is the player character and then on private void update for some reason the enemy decides that it wants to mess up the character so it can go into the character set the move speed equal zero and there you go this one is perfectly valid code so the enemy can suddenly modify the move speed on the character and everything breaks and your player can no longer move because you accidentally modified something when it should never be modified so basically by making it public you are enabling both read and right axes from any other class so if you have a thousand classes in your code base then that's a thousand points where you might be modifying this which might cause all kinds of breakage things in your game so you don't want that okay so this one is going to be on lecture eight so that is in lecture on the character Visual and rotation so in this lecture what is the difference between lerp and slurp so it's different that slurp sounds bad which I guess maybe a little bit uh is it that LARP works with vectors and smaller ports and directions or layer ports with directions and similar ports with vectors alright so let's end the quiz and there you go yep the answer is over here indeed the solar works with vectors where a slurp works with directions now the important thing with this one is for example if you make a interpolation between a vector pointing right and then a vector pointing left if you do that and you use slurp then basically it's going to rotate because it's going to work with directions whereas if you use it with alert then basically this Vector is going to shrink and then pretty much do a 180 and stick around there so that might sound a bit confusing so maybe this okay so here is the demo that I'm showing so basically what matters over there the blue arrow So currently this one is using slurp so let's see what this one does so if I hit on play look at that blue arrow and let's see what it does and there you go it rotates around like that so look what it does okay so this one is using lerp and basically the starting Vector is one zero so a vector pointed to right and look how this the vector basically becomes shorter and shorter until it gets into zero and then flips around to the other end and then becomes so basically we can shorten and then goes out whereas if you use slurp and there you go so it starts off on one and instead of becoming shortened this one actually rotates so this one goes down on the set so it goes down like this and rotates around instead of becoming shorter and pointing the other way so if an animation has a property in yellow saying missing what exactly is the problem so is the problem that there is no child object with that exact name is it that the animation file is corrupted or was the animation not added to the animator State machine alright so this is what I'm what I'm talking about there that one is in Young low so what does that mean so let's end the quiz and see which one is the correct answer and drum roll and there you go the answer is indeed over here a so the answer is there's no child object with that exact name yeah basically when this happens is because there's no child of this object named exactly head this is one of the annoying things about animations is that it's actually based on strings so it's all based on names so most of you probably don't write note that I hate strings for identifying things and basically the reason why this one is saying missing is because I went ahead and I modified this one so I renamed this one to head 2 so now if I play the animation that one isn't actually going to play the animation because it doesn't have any object named exactly head so the solution to this is either go up here and you can click you can click once to select and then wait a bit and then click again and you can rename the object so if I go over here and I rename this property to head 2 to match the one over there there you go now it's no longer in yellow so now it does fine there you go the head is indeed moving up whereas if I I put it back into that one where it says missing now I move around now the head does not move alright so yeah this was a a simple question can you use an orthograph camera in a 3D game and the answer is yep you can so here is my demo scene so this one is for the main menu for kitchen cows and if I select the camera where's my camera there you go my main camera and over here it is set as perspective so this is like a it's what you usually think about when you think of a 3D camera but you can put it as orthographic so over here the characters they all look perfectly the same even though they are at different distances whereas with a perspective camera this one up front is much bigger and the ones on front are more squished I don't know the technical terms that's pretty much it so the question is what is the difference between overlap box and box cast so is it a overnight box test if there's a collision on the target area and box casts if there's a collision anywhere between two points or is it B over on lightbox the 2D box cancels reading or is it C Overland box is better suited for characters and boxcast for objects so go ahead and post your votes in chat yeah there you go the correct answer is indeed a which is overlap box this if there's a collision just on the target area whereas the box has tests if there's a collision anywhere between the two points so here I've got a testing scene so let's say this is a wall and this one actually has a leather and let's say you've got a character over here and the character wants to move to this position so if you do if the character is here and you do an overlap box over here on this position then two on returned phones because it won't find any colliders because there are no colliders directly on this position whereas if you use a boxcast basically what the boxes does is it moves a virtual box or a virtual shape depends if it's a box has sphere cast and so on if it's a box yes then basically the physics system will move a virtual box in the virtual physics space and will move from A to B and in that movement it won't find anything that collides within between the points A and B so in this case if you do an overlap box it won't just has this position and return false but if you were to do a box cast it would start from here and move a virtual logs onto this direction and it would find this wall in the middle so that would return true because it would indeed find something so what is the cause of the flickering bug look at this look at this flickering so this is what I mean so what is the cause of this flickering bug where the texture is flickering back and forth so is it that two objects are on the mathematically exact position is the GPU broken or is it a physics collision and yep the answer is indeed a it is two objects are on the mathematically exact position or like these people mentioned the more technical term is Z fighting so it's more in the Z buffer so basically since this quad is literally on position where's the position there you go it's literally on zero just like the floor object these are on the exact same thing so this is a very nasty visual issue so if you have this one solution is super simple literally just put this a tiny bit off there you go just like this just by moving it by 0.01 and now no longer got the problem so Yep this is called Z fighting because both are on the exact same depth so that is what makes it quite annoying so if you have that now you know just make sure that one of the objects is not on the exact perfect position and everything will be nice and fixed how many interfaces and bass masses can a class implement or extend so is it a multiple interfaces but only one base less or is it being multiple base less but only one interface or is it c as many as you want so if you have bass and lessons in interfaces how many can you implement slash extend and in the quiz any of there you go it is indeed correct so basically you can Implement multiple interfaces but you can only extend one base less that is one of the limitations and one of the reasons why you should use interfaces over base classes if you don't know what I'm talking about here's a quick test so instead of making a public class you can make it an interface so I my interface you can do this and then inside you can have a function my function and do something and then on a class you would implement this interface and again as it says on the question you can Implement multiple interface but as a C sharp 7 you can also do something awesome which is over here you can do a default implementation so if you have an interface and already have a bunch of objects that Implement that interface and you want to add something new you can add a default implementation and everything will work perfectly so you don't have to actually add the implementation but you can if you want to so interface are super awesome for example if you got a game and some objects have an inventory and some objects don't you can use an interface to say I has enter I has inventory and Implement that interface on any object that has an inventory so interface are super powerful so this one about csharp events and csharp events you something called a function signature so the question is what is a function signature so is it a the function name is it B the return type and parameter types or is it C the return type the function name the parameter types and parameter names and there you go the answer is B so now the majority was actually wrong for the first time wow that is interesting so yep the answer is B for the function signature what matters is the return type and the premium other types meaning that the function name and the parameter names that does not matter so you can have a function with different names different parameter names as long as the types are correct that is the one thing that really does matter alright so yeah thank you all so much for being here on this live stream this was a different thing it was an experiment and well so far it went pretty well so I'm pretty happy with how it went so hopefully all of you enjoyed it so hopefully a bit more in the in the future so my plan for this year is definitely doing a bunch more live streams and experiment with different things kind of like this so hopefully you enjoyed it so thank you all so much for being here thank you so much and I'll see you next time
