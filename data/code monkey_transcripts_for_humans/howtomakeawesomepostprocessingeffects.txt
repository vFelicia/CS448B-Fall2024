With timestamps:

00:00 - in this video we're going to look at how
00:01 - we can make some custom post-processing
00:03 - effects in unity we're going to make a
00:05 - shader using shader graph and create a
00:07 - customer in their path to use it let's
00:10 - begin hello and welcome I'm your code
00:19 - monkey and this channel is all about
00:20 - helping you will learn how to make your
00:22 - own games with enough tutorials made by
00:24 - a professional indie game developer so
00:26 - if you find the video helpful consider
00:27 - to subscribe check out the code monkey
00:29 - app on Steam interactive tutorials
00:31 - complete games and more click knowing
00:33 - the description and add it to your
00:34 - wishlist ok so here we're going to add
00:37 - some custom post-processing effects this
00:39 - is usable in a GRP or a u RP or really
00:43 - any custom srp since it is based upon
00:45 - extending custom render passes and all
00:48 - the effects are made in cheetah graph so
00:50 - it's really easy to make your own custom
00:51 - effects alright so here is my normal
00:54 - scene just a player in a random level
00:56 - and I can walk around alright
00:58 - and now let's see and yep I've enabled a
01:02 - simple black and white filter so the
01:05 - carrot and bush I don't know component
01:06 - black and white so I made a custom
01:09 - shader and where I often appointed
01:10 - as a post-processing effect and now here
01:13 - it is a simple basic tent now with a
01:16 - foam blur a pixelated effect and finally
01:20 - here is a really awesome 2 song shader
01:23 - effect so this would be a really good
01:25 - really easy effect to add to make some
01:27 - really cool transitions alright so this
01:30 - is what we want to make now I've covered
01:32 - a bunch of these shader facts previously
01:34 - so check the link in the description to
01:36 - see the playlist of those effects can
01:38 - easily be applied as post-processing
01:40 - effects this video is made possible
01:42 - thanks to these awesome supporters go to
01:44 - patreon.com/scishow to code monkey to
01:46 - get some perks and help keep the videos
01:48 - free for everyone alright so this our
01:50 - goal let's get to it ok so here we are
01:53 - in our scene I just have my character
01:55 - and I can move around just like that now
01:58 - to make our custom post-processing
02:00 - effects it's actually a pretty simple
02:02 - process although finding the answer that
02:04 - takes some digging so if you're looking
02:06 - for the answer like I was then hopefully
02:08 - this video won't help what we need is a
02:10 - way to run some shader code on our image
02:12 - during the post-processing stage
02:14 - now if you're watching this video many
02:15 - months in the future then it's possible
02:17 - that you RP was updated with an
02:19 - efficient way to do custom
02:20 - post-processing using the volume system
02:22 - right now that is not possible so here
02:25 - we're going to use a custom render pass
02:26 - if you want to learn more about how to
02:29 - work with the universal render pipeline
02:30 - then check the link in the description
02:32 - for the official examples there's a lot
02:34 - of really cool demos including one which
02:35 - does exactly what we're going to do in
02:37 - here okay so let's do it
02:39 - now as I said we're going to create a
02:41 - custom render pass so to do that we're
02:45 - going to select our universal render
02:47 - pipeline asset and here you can see the
02:49 - various renders that are assigned to it
02:51 - and right now we're using the default
02:53 - forward render so here it is we can
02:56 - select it and see yep there's nothing
02:58 - different it's the default and then in
03:00 - here we can click on the pulse in order
03:02 - to add a render pass and by default we
03:05 - just have this one so it's in here that
03:06 - we're going to add our custom render
03:08 - pass so in the project files and let's
03:10 - create go into rendering Universal
03:13 - render and in here let's create a render
03:15 - feature let's call this our lit render
03:19 - pass feature and now just like this if
03:22 - we select our for render data again and
03:24 - click on the pause yep there we have our
03:25 - customer in their pass feature alright
03:27 - so there it is now let's open up the
03:29 - script and in here we have the default
03:32 - file which already has some very helpful
03:34 - comments here we have a class that
03:37 - extends the script upon render pass so
03:39 - by default it has a configure method
03:41 - which sets up the render pass then the
03:43 - execute which runs whatever render logic
03:45 - we want
03:46 - and finally the cleanup at yet so this
03:48 - is the render pass and then we have this
03:50 - other class which extends the scriptable
03:52 - regular feature and this one is what
03:55 - sets up and in queues our render pass
03:57 - now this system is extremely extensible
03:59 - you can do pretty much anything in here
04:01 - and go as crazy as you want but for our
04:03 - purposes we just want really the
04:05 - simplest method possible so here by
04:07 - default we have the render pass event
04:09 - this is where in the rendering process
04:11 - our pass will be injected into so in our
04:14 - case and let's set it to just before the
04:16 - post processing now all we want is to
04:19 - take an image from the camera and apply
04:21 - a shader onto it so the way we do that
04:23 - is again we go into the execute function
04:25 - and in here
04:27 - we're going to simply call the blitt
04:29 - function so this function takes a source
04:31 - and applies a material with a shader and
04:34 - place a result in the destination so
04:36 - we're going to need a command buffer the
04:38 - source destination and the material with
04:40 - our shader now for the command buffer we
04:43 - can simply go on up here we go into the
04:48 - command buffer pool and we get the new
04:50 - command buffer okay so we use this one
04:52 - in here next we need a source now the
04:56 - source will be the convert texture from
04:58 - the camera so we can actually grab it
05:00 - down here when we have a reference to
05:02 - our script on render we can access the
05:05 - renderer to grab the camera convert
05:08 - target so this is what we need to pass
05:10 - on to our custom render pass so for that
05:13 - let's simply make a basic public field
05:18 - and down here we simply pass it so we go
05:22 - into our script upon render pass and you
05:27 - pass our source okay so now on our boot
05:30 - command we can use our source then the
05:32 - destination will also be our source and
05:35 - now finally we need our material so here
05:38 - in our render feature let's make a class
05:41 - to hold all of our settings so just like
05:51 - that just basic class with our material
05:54 - and now we need to remember to add the
05:56 - attribute systems here and I suppose so
05:58 - that our class shows up in the editor
05:59 - and now let's just make a public field
06:02 - at this time so there's our public field
06:06 - and now if we go back into the editor in
06:09 - here with our custom renderer selected
06:10 - we can see yep indeed we do have some
06:12 - settings and we do have a film for our
06:14 - material all right so let's make the
06:16 - material that we're going to use we
06:17 - create a new material let's call this
06:20 - the tent post-processing and here and
06:24 - let's select a very simple shader so
06:26 - just a simple 10 shader we're going to
06:28 - inspect the shader and make a custom one
06:29 - in a bit so here we have our material
06:32 - and just select it and assign it ok now
06:35 - back in the code here we have this
06:37 - material field and we just need to pass
06:38 - it on to our render pass so I
06:41 - make a constructor then we'll receive it
06:49 - so you receive the material we're going
06:52 - to pass it in in here from these
06:54 - settings passing the material on to the
06:56 - render pass and the render pass we use
06:58 - the material in here on our plate now we
07:00 - have our material all right so we're
07:04 - almost there we have our command buffer
07:06 - and we're doing a plate
07:07 - now finally we tell it to execute this
07:09 - command buffer so we go into the context
07:11 - and call execute command buffer that's
07:14 - in our command buffer and finally that
07:17 - releases from the poem so we go to the
07:19 - pool and come release on our command
07:21 - buffer alright so that's pretty much it
07:25 - now if we go back into the editor and
07:27 - nope nothing has changed yet so the
07:30 - issue here is we cannot directly copy
07:32 - from into the source so we need to have
07:35 - a temporary texture in the middle so
07:37 - let's do just that in here let's create
07:40 - a new render texture then we initialize
07:47 - it here on the constructor we just give
07:52 - it a random name and now down here let's
07:55 - get a temporary rendered texture so go
07:58 - into the command buffer to get a
08:00 - temporary render texture let's pass in
08:03 - this ID and we wanted to match our
08:07 - current rendering data all right so now
08:13 - we have our temporary render texture now
08:15 - we're going to copy from the source onto
08:17 - that render texture and then after doing
08:21 - that then we copy from temporary onto
08:23 - the source all right just like that so
08:31 - we're doing this because we cannot
08:32 - directly copy from into the same thing
08:34 - so we need to use a temporary one in the
08:36 - middle of our process all right so now
08:39 - it should work and back into the editor
08:41 - and yep it immediately works so we have
08:44 - our custom post processing in fact being
08:46 - applied awesome
08:47 - now here one very important thing if
08:49 - you're making your own effects and need
08:51 - to debug to see what's going on then you
08:52 - can use the frame debugger
08:54 - so you go up here onto the window then
08:56 - analysis and in here you have the frame
08:58 - debugger this is a really useful tool so
09:01 - just hit on enable and now here we can
09:03 - view exactly what the renderer is doing
09:05 - and in what order now to find out which
09:07 - one of these is our custom pass we can
09:10 - actually go back into our code and in
09:12 - here when we are getting a new command
09:14 - buffer we can actually give it a name
09:16 - let's name it our custom lit render pass
09:22 - and now if we go back into the frame
09:24 - debugger if we go down here yep we can
09:27 - see our custom plate render pass so you
09:29 - can see how just before it yep there's
09:31 - no post-processing effect applied and
09:33 - then afterwards yep we apply it so here
09:37 - on the first pass we can see that we are
09:38 - grabbing the convert texture and we are
09:40 - placing it on our temporary convert
09:42 - texture and then we have the second draw
09:44 - which takes from the temporary car
09:46 - texture and place it back onto our
09:47 - source camera counter texture so if you
09:50 - have issues with your effects then the
09:52 - frame debugger is a very useful tool
09:54 - alright so now that everything is set up
09:55 - we can finally easily make our custom
09:58 - effects so let's first inspect how the
10:00 - attend shader works and you here we are
10:02 - in our shader graph now for the output
10:04 - right now it is a simple sprite again if
10:07 - you're watching this many months in the
10:08 - future there may be a more dedicated
10:10 - master node for actual custom
10:13 - post-processing effects but for now we
10:15 - use this one and then we really just
10:17 - take a tan color and apply a tint on to
10:20 - our main texture so the color texture
10:22 - that comes from the camera gets inputted
10:24 - onto the reference underscore main text
10:26 - now I've already done a bunch of effects
10:28 - in shader graph there's a playlist
10:29 - linked in the description so check it
10:31 - out all those can be applied as
10:33 - post-processing effects so here we have
10:35 - our tint effect and by modifying the
10:37 - material we can modify our actual effect
10:40 - yep just like that and now in the
10:42 - material just swap out the shader for a
10:44 - different one now here is a pixelated
10:47 - shader and yep everything is extremely
10:49 - pixelated now here we have a very nice
10:52 - the song shader and looks really
10:55 - interesting so this one would be great
10:56 - for some kind of transition effects and
11:01 - here we have our board shader
11:06 - so yup here it is our post-processing in
11:08 - fact it looks great so you can see how
11:11 - you can make whatever effects you want
11:13 - using the super useful graph and
11:15 - apply it as a post-processing effect
11:16 - like I said this system is extremely
11:18 - extensible and customizable for example
11:21 - if you sound like your camera in here
11:24 - you can actually see which render you're
11:26 - using so for example let's make another
11:28 - custom Ford renderer okay so I made a
11:40 - different for render and applied it with
11:42 - a different material and now here if we
11:45 - select the pipeline asset we can add the
11:48 - other renderer and now on the camera
11:50 - here we get some light to drop down and
11:53 - yep now let's say we sound like the blur
11:54 - and there you go everything is similar
11:56 - it's like this one and everything is
11:57 - tinted so we could easily modify this
11:59 - through a script to get some really
12:01 - awesome effects so like I said extremely
12:03 - customizable alright so now that you
12:05 - have this knowledge go ahead and make
12:07 - some awesome effects check out the code
12:10 - monkey upon Steam interactive tutorials
12:12 - complete games and more click knowing
12:14 - the description and add it to your wish
12:15 - list this video is made possible thanks
12:17 - to these awesome supporters go to
12:19 - patreon.com/scishow natee code monkey to
12:22 - get some perks and help keep the videos
12:23 - free for everyone as always you can
12:25 - download the project files in Antonis
12:27 - from in Tacoma com subscribe to channel
12:29 - for more unity tutorials post a new
12:31 - question comes and I'll see you next
12:33 - time
12:35 - [Music]

Cleaned transcript:

in this video we're going to look at how we can make some custom postprocessing effects in unity we're going to make a shader using shader graph and create a customer in their path to use it let's begin hello and welcome I'm your code monkey and this channel is all about helping you will learn how to make your own games with enough tutorials made by a professional indie game developer so if you find the video helpful consider to subscribe check out the code monkey app on Steam interactive tutorials complete games and more click knowing the description and add it to your wishlist ok so here we're going to add some custom postprocessing effects this is usable in a GRP or a u RP or really any custom srp since it is based upon extending custom render passes and all the effects are made in cheetah graph so it's really easy to make your own custom effects alright so here is my normal scene just a player in a random level and I can walk around alright and now let's see and yep I've enabled a simple black and white filter so the carrot and bush I don't know component black and white so I made a custom shader and where I often appointed as a postprocessing effect and now here it is a simple basic tent now with a foam blur a pixelated effect and finally here is a really awesome 2 song shader effect so this would be a really good really easy effect to add to make some really cool transitions alright so this is what we want to make now I've covered a bunch of these shader facts previously so check the link in the description to see the playlist of those effects can easily be applied as postprocessing effects this video is made possible thanks to these awesome supporters go to patreon.com/scishow to code monkey to get some perks and help keep the videos free for everyone alright so this our goal let's get to it ok so here we are in our scene I just have my character and I can move around just like that now to make our custom postprocessing effects it's actually a pretty simple process although finding the answer that takes some digging so if you're looking for the answer like I was then hopefully this video won't help what we need is a way to run some shader code on our image during the postprocessing stage now if you're watching this video many months in the future then it's possible that you RP was updated with an efficient way to do custom postprocessing using the volume system right now that is not possible so here we're going to use a custom render pass if you want to learn more about how to work with the universal render pipeline then check the link in the description for the official examples there's a lot of really cool demos including one which does exactly what we're going to do in here okay so let's do it now as I said we're going to create a custom render pass so to do that we're going to select our universal render pipeline asset and here you can see the various renders that are assigned to it and right now we're using the default forward render so here it is we can select it and see yep there's nothing different it's the default and then in here we can click on the pulse in order to add a render pass and by default we just have this one so it's in here that we're going to add our custom render pass so in the project files and let's create go into rendering Universal render and in here let's create a render feature let's call this our lit render pass feature and now just like this if we select our for render data again and click on the pause yep there we have our customer in their pass feature alright so there it is now let's open up the script and in here we have the default file which already has some very helpful comments here we have a class that extends the script upon render pass so by default it has a configure method which sets up the render pass then the execute which runs whatever render logic we want and finally the cleanup at yet so this is the render pass and then we have this other class which extends the scriptable regular feature and this one is what sets up and in queues our render pass now this system is extremely extensible you can do pretty much anything in here and go as crazy as you want but for our purposes we just want really the simplest method possible so here by default we have the render pass event this is where in the rendering process our pass will be injected into so in our case and let's set it to just before the post processing now all we want is to take an image from the camera and apply a shader onto it so the way we do that is again we go into the execute function and in here we're going to simply call the blitt function so this function takes a source and applies a material with a shader and place a result in the destination so we're going to need a command buffer the source destination and the material with our shader now for the command buffer we can simply go on up here we go into the command buffer pool and we get the new command buffer okay so we use this one in here next we need a source now the source will be the convert texture from the camera so we can actually grab it down here when we have a reference to our script on render we can access the renderer to grab the camera convert target so this is what we need to pass on to our custom render pass so for that let's simply make a basic public field and down here we simply pass it so we go into our script upon render pass and you pass our source okay so now on our boot command we can use our source then the destination will also be our source and now finally we need our material so here in our render feature let's make a class to hold all of our settings so just like that just basic class with our material and now we need to remember to add the attribute systems here and I suppose so that our class shows up in the editor and now let's just make a public field at this time so there's our public field and now if we go back into the editor in here with our custom renderer selected we can see yep indeed we do have some settings and we do have a film for our material all right so let's make the material that we're going to use we create a new material let's call this the tent postprocessing and here and let's select a very simple shader so just a simple 10 shader we're going to inspect the shader and make a custom one in a bit so here we have our material and just select it and assign it ok now back in the code here we have this material field and we just need to pass it on to our render pass so I make a constructor then we'll receive it so you receive the material we're going to pass it in in here from these settings passing the material on to the render pass and the render pass we use the material in here on our plate now we have our material all right so we're almost there we have our command buffer and we're doing a plate now finally we tell it to execute this command buffer so we go into the context and call execute command buffer that's in our command buffer and finally that releases from the poem so we go to the pool and come release on our command buffer alright so that's pretty much it now if we go back into the editor and nope nothing has changed yet so the issue here is we cannot directly copy from into the source so we need to have a temporary texture in the middle so let's do just that in here let's create a new render texture then we initialize it here on the constructor we just give it a random name and now down here let's get a temporary rendered texture so go into the command buffer to get a temporary render texture let's pass in this ID and we wanted to match our current rendering data all right so now we have our temporary render texture now we're going to copy from the source onto that render texture and then after doing that then we copy from temporary onto the source all right just like that so we're doing this because we cannot directly copy from into the same thing so we need to use a temporary one in the middle of our process all right so now it should work and back into the editor and yep it immediately works so we have our custom post processing in fact being applied awesome now here one very important thing if you're making your own effects and need to debug to see what's going on then you can use the frame debugger so you go up here onto the window then analysis and in here you have the frame debugger this is a really useful tool so just hit on enable and now here we can view exactly what the renderer is doing and in what order now to find out which one of these is our custom pass we can actually go back into our code and in here when we are getting a new command buffer we can actually give it a name let's name it our custom lit render pass and now if we go back into the frame debugger if we go down here yep we can see our custom plate render pass so you can see how just before it yep there's no postprocessing effect applied and then afterwards yep we apply it so here on the first pass we can see that we are grabbing the convert texture and we are placing it on our temporary convert texture and then we have the second draw which takes from the temporary car texture and place it back onto our source camera counter texture so if you have issues with your effects then the frame debugger is a very useful tool alright so now that everything is set up we can finally easily make our custom effects so let's first inspect how the attend shader works and you here we are in our shader graph now for the output right now it is a simple sprite again if you're watching this many months in the future there may be a more dedicated master node for actual custom postprocessing effects but for now we use this one and then we really just take a tan color and apply a tint on to our main texture so the color texture that comes from the camera gets inputted onto the reference underscore main text now I've already done a bunch of effects in shader graph there's a playlist linked in the description so check it out all those can be applied as postprocessing effects so here we have our tint effect and by modifying the material we can modify our actual effect yep just like that and now in the material just swap out the shader for a different one now here is a pixelated shader and yep everything is extremely pixelated now here we have a very nice the song shader and looks really interesting so this one would be great for some kind of transition effects and here we have our board shader so yup here it is our postprocessing in fact it looks great so you can see how you can make whatever effects you want using the super useful graph and apply it as a postprocessing effect like I said this system is extremely extensible and customizable for example if you sound like your camera in here you can actually see which render you're using so for example let's make another custom Ford renderer okay so I made a different for render and applied it with a different material and now here if we select the pipeline asset we can add the other renderer and now on the camera here we get some light to drop down and yep now let's say we sound like the blur and there you go everything is similar it's like this one and everything is tinted so we could easily modify this through a script to get some really awesome effects so like I said extremely customizable alright so now that you have this knowledge go ahead and make some awesome effects check out the code monkey upon Steam interactive tutorials complete games and more click knowing the description and add it to your wish list this video is made possible thanks to these awesome supporters go to patreon.com/scishow natee code monkey to get some perks and help keep the videos free for everyone as always you can download the project files in Antonis from in Tacoma com subscribe to channel for more unity tutorials post a new question comes and I'll see you next time
