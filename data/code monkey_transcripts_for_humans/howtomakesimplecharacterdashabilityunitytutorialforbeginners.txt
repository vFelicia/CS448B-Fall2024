With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - in this video we're going to take our
00:02 - simple character movement and add
00:04 - dashing let's begin
00:08 - so here is the character we have we can
00:11 - move them around using the keyboard and
00:12 - the movement also test for hitboxes so
00:15 - if I move above I cannot go through that
00:17 - wall
00:17 - so now let's implement - our - will be
00:21 - an instant movement kind of like a short
00:22 - teleport so let's look at the code so
00:24 - far here is our player character script
00:27 - so you can see on update we have our
00:29 - Hamill movement function being called
00:31 - this function deals with the basic
00:33 - character movement and it checks for
00:35 - keyboard input it takes that input and
00:37 - it creates a movement direction using
00:39 - that direction it then moves them whilst
00:41 - testing for hitboxes okay so now let's
00:44 - go down here make a private void handle
00:47 - - and we're also going to call this on
00:49 - update just like our handle loop now
00:52 - here the first thing we're going to do
00:54 - is test for keyboard input using our
00:56 - space key so if the input target key
00:58 - down of the key code dot space so when
01:02 - we press space we want to dash towards
01:04 - the in last move direction so I just
01:06 - move in there by modifying the transform
01:08 - dot position we're going to increase it
01:10 - towards the last move direction by a
01:12 - certain amount so in here let's define a
01:14 - float for the - distance we're defining
01:18 - the dash distance in here but we can
01:19 - also define it as a member variable and
01:21 - that way we could easily modify to
01:24 - support some sort of upgrade system but
01:26 - for now let's keep things simple and
01:28 - just define it in here so we're going to
01:30 - move on towards the unless move
01:31 - direction and by the dash distance
01:33 - amount so let's see and we should be
01:35 - able to see the character move towards
01:37 - the last move direction by a hundred
01:39 - units whenever we hit space okay so here
01:41 - I am I can move around now I move to the
01:43 - left so my last move Direction is to the
01:45 - left now if I hit space yep there you go
01:47 - he teleported on left by 100 units so -
01:50 - distance is a bit too big but everything
01:52 - else is working correctly however since
01:54 - we did a very simple transform movement
01:56 - we can currently dash through wall so if
01:58 - I go in here and I move up and I hit
01:59 - space yep I'm on the other side the wall
02:01 - that is not the intent behavior so let's
02:03 - fix it so back in our code in here and
02:05 - let's test for hitbox is the same way we
02:07 - did in the movement now before we do
02:09 - that let's clean up all of this code so
02:11 - in here we essentially need to do a ray
02:13 - cast to test if we can move and then we
02:15 - actually move our character so let's do
02:17 - that in a more clean way so then here
02:20 - let's make a
02:21 - bond can move we're going to receive a
02:24 - vector3 for the direction that we want
02:25 - to move towards and a float for the
02:27 - distance and here we're going to do the
02:29 - recast the same that we did up here
02:31 - using this direction towards this
02:35 - distance and we're simply going to
02:37 - return if this which returns a rake
02:40 - asset as you can see up here so if the
02:42 - rake asset can either if it is known
02:43 - then we can move there
02:45 - so dock neither equals no so now we have
02:48 - a nice simple function to test if we can
02:50 - move towards this direction by this
02:51 - amount so up here on our hammer movement
02:54 - we can now clean up this code
03:21 - okay so here is our cleanup code so
03:24 - first we define the base move direction
03:26 - which is the one using our keyboard
03:28 - input then we have a move the error
03:29 - vector we're using both so we can then
03:31 - modify the move the air whilst using the
03:33 - base movie Rex and why to test for a
03:36 - vertical and horizontal movement then we
03:38 - use our can move function to try to move
03:41 - first in the diagonal direction if we
03:43 - can then we skip all this and we just go
03:45 - straight in here and here we set the
03:47 - last move direction we play the monkey
03:48 - animation and we moving towards the move
03:50 - direction and if we cannot move then we
03:52 - play the at all animation and in here if
03:54 - we cannot move diagonally then we test
03:56 - for a move tear using only the base
03:58 - movie or X so essentially testing for
04:00 - only horizontal movement then we did a
04:02 - test and again for the vertical movement
04:03 - and so on now let's also put this in
04:05 - another function to keep the handle
04:07 - movement function even more simple
04:29 - so we may they try and move function it
04:32 - receives a base movement direction this
04:33 - incent is doing the same thing as
04:35 - previously and in the end it simply
04:37 - returns true if he did successfully move
04:39 - and returns false if it did not so
04:41 - appear on our handle movement function
04:44 - it is now extremely simple we get the
04:46 - input we commonly the move direction we
04:48 - call the function try to move if we can
04:49 - we won't if not we idle so our code is
04:52 - now much easier to read
04:53 - let's test to make sure that all of our
04:55 - cleanup did not mess up with the logic
04:57 - so here we are moving around and yep I
04:59 - cannot go through walls okay good so now
05:02 - that we have these two functions it is
05:03 - very easy to apply it to our - so first
05:06 - let's reduce the - distance is something
05:08 - more manageable and here we can call the
05:11 - try move to try to move towards the and
05:14 - last move dear by the - distance so
05:17 - let's see if we can now - whilst not
05:19 - going through the wall Here I am moving
05:21 - around and if I - okay still - normal if
05:24 - I - upwards yep there you go I can no
05:26 - longer - through the wall so now that we
05:29 - have the - working let's have a nice
05:31 - effect over here I have a - spreadsheet
05:34 - this is the same spreadsheet that I use
05:36 - for Hyper nights so we're going to use
05:37 - this as our - effect now we want to
05:40 - spawn it as a prefab when we - so let's
05:43 - make a prefab so here is a prefab with a
05:46 - simple sprite renderer and since this is
05:48 - a sprite based animation I'm going to
05:50 - use the sprite animator which is a very
05:52 - simple script we created in a previous
05:53 - video it is very simple it simply plays
05:56 - multiple frames one after the other so
05:58 - it is perfect for this case so this one
06:01 - point all the frames at 30 frames per
06:02 - second and when it passes the last frame
06:05 - it won't destroy itself which is perfect
06:07 - for a one-shot effect that we want to
06:09 - use so here in the code we need to spawn
06:11 - the effect before we actually - so up
06:14 - here first of all we're going to need a
06:16 - reference for the effect I'm just going
06:18 - to add it as a civilised field in here
06:20 - so a private transform for the PF -
06:23 - effect and down here we need to place
06:27 - the effect on the position before we
06:29 - actually - so let's store a vector3 for
06:31 - the before - position
06:34 - and we only want to actually spawn the
06:37 - effect if we can - so we can use the if
06:40 - on our try move function so if we did
06:42 - successfully move then now we have the
06:44 - before and after position so let's
06:46 - instantiate the prefab so Kiev - effect
06:49 - instantiate it on the b4 - position then
06:57 - let's rotate it towards the in last move
06:59 - direction so modify the owner angles
07:02 - give it 0 0 since we are in 2d and we
07:05 - just need to modify the Z so I'm using
07:08 - the utens class to get the anger from
07:10 - vector float this is part of the code
07:13 - monkey utilities that you can grab for
07:14 - free from unity code monkey calm it
07:16 - simply takes a vector3 and returns a
07:18 - Euler angle so it is perfect for this
07:21 - case I send it on last move direction
07:22 - and it will return the correct angle so
07:25 - now our effect is correctly positioned
07:27 - and rotated all we need is the scale the
07:31 - sprite has an actual width of 35 s so
07:33 - let's define here a float for the dash
07:35 - effect width this is the width of the
07:38 - sprite which is dependent on the pixels
07:41 - per unit that is set on the import
07:43 - support the dash distance divided by the
07:46 - width and everything else with Oana all
07:50 - right so let's test and see if our fact
07:51 - shows up okay so here I am moving around
07:53 - if I hit space if there yo he teleports
07:56 - forward and there's a nice dash effect
07:58 - behind him and again I still cannot go
08:01 - through wall I can teleport around but
08:03 - don't go through walls ok great
08:05 - the way we set up our code we can easily
08:07 - modify the dash distance and everything
08:09 - else should be the same so let's see
08:11 - here I am and yep I got a much bigger -
08:14 - and the effect is scaled correctly and
08:16 - again I still cannot go through walls
08:18 - yep great now the way we set things up
08:21 - it means that if we go up here and we
08:23 - try to - above since we are within the -
08:25 - distance we don't actually move forward
08:26 - if we if you if you wanted you could
08:29 - improve the code to make it so that when
08:31 - you hit space it would go right next to
08:33 - the wall you would simply need to do a
08:35 - ray cast and test the distance to the
08:37 - wall and then change the if - distance
08:39 - accordingly so there you have it we add
08:40 - the simple - ability with a nice effect
08:42 - to quickly move our character around as
08:45 - always you can download the project
08:46 - files in you tell
08:47 - from Unicode monkey calm if you have any
08:49 - questions post them in the comments and
08:50 - I'll do my best answer them subscribe
08:51 - for more videos and I'll see you next
08:53 - time

Cleaned transcript:

hello and welcome I'm your code monkey in this video we're going to take our simple character movement and add dashing let's begin so here is the character we have we can move them around using the keyboard and the movement also test for hitboxes so if I move above I cannot go through that wall so now let's implement our will be an instant movement kind of like a short teleport so let's look at the code so far here is our player character script so you can see on update we have our Hamill movement function being called this function deals with the basic character movement and it checks for keyboard input it takes that input and it creates a movement direction using that direction it then moves them whilst testing for hitboxes okay so now let's go down here make a private void handle and we're also going to call this on update just like our handle loop now here the first thing we're going to do is test for keyboard input using our space key so if the input target key down of the key code dot space so when we press space we want to dash towards the in last move direction so I just move in there by modifying the transform dot position we're going to increase it towards the last move direction by a certain amount so in here let's define a float for the distance we're defining the dash distance in here but we can also define it as a member variable and that way we could easily modify to support some sort of upgrade system but for now let's keep things simple and just define it in here so we're going to move on towards the unless move direction and by the dash distance amount so let's see and we should be able to see the character move towards the last move direction by a hundred units whenever we hit space okay so here I am I can move around now I move to the left so my last move Direction is to the left now if I hit space yep there you go he teleported on left by 100 units so distance is a bit too big but everything else is working correctly however since we did a very simple transform movement we can currently dash through wall so if I go in here and I move up and I hit space yep I'm on the other side the wall that is not the intent behavior so let's fix it so back in our code in here and let's test for hitbox is the same way we did in the movement now before we do that let's clean up all of this code so in here we essentially need to do a ray cast to test if we can move and then we actually move our character so let's do that in a more clean way so then here let's make a bond can move we're going to receive a vector3 for the direction that we want to move towards and a float for the distance and here we're going to do the recast the same that we did up here using this direction towards this distance and we're simply going to return if this which returns a rake asset as you can see up here so if the rake asset can either if it is known then we can move there so dock neither equals no so now we have a nice simple function to test if we can move towards this direction by this amount so up here on our hammer movement we can now clean up this code okay so here is our cleanup code so first we define the base move direction which is the one using our keyboard input then we have a move the error vector we're using both so we can then modify the move the air whilst using the base movie Rex and why to test for a vertical and horizontal movement then we use our can move function to try to move first in the diagonal direction if we can then we skip all this and we just go straight in here and here we set the last move direction we play the monkey animation and we moving towards the move direction and if we cannot move then we play the at all animation and in here if we cannot move diagonally then we test for a move tear using only the base movie or X so essentially testing for only horizontal movement then we did a test and again for the vertical movement and so on now let's also put this in another function to keep the handle movement function even more simple so we may they try and move function it receives a base movement direction this incent is doing the same thing as previously and in the end it simply returns true if he did successfully move and returns false if it did not so appear on our handle movement function it is now extremely simple we get the input we commonly the move direction we call the function try to move if we can we won't if not we idle so our code is now much easier to read let's test to make sure that all of our cleanup did not mess up with the logic so here we are moving around and yep I cannot go through walls okay good so now that we have these two functions it is very easy to apply it to our so first let's reduce the distance is something more manageable and here we can call the try move to try to move towards the and last move dear by the distance so let's see if we can now whilst not going through the wall Here I am moving around and if I okay still normal if I upwards yep there you go I can no longer through the wall so now that we have the working let's have a nice effect over here I have a spreadsheet this is the same spreadsheet that I use for Hyper nights so we're going to use this as our effect now we want to spawn it as a prefab when we so let's make a prefab so here is a prefab with a simple sprite renderer and since this is a sprite based animation I'm going to use the sprite animator which is a very simple script we created in a previous video it is very simple it simply plays multiple frames one after the other so it is perfect for this case so this one point all the frames at 30 frames per second and when it passes the last frame it won't destroy itself which is perfect for a oneshot effect that we want to use so here in the code we need to spawn the effect before we actually so up here first of all we're going to need a reference for the effect I'm just going to add it as a civilised field in here so a private transform for the PF effect and down here we need to place the effect on the position before we actually so let's store a vector3 for the before position and we only want to actually spawn the effect if we can so we can use the if on our try move function so if we did successfully move then now we have the before and after position so let's instantiate the prefab so Kiev effect instantiate it on the b4 position then let's rotate it towards the in last move direction so modify the owner angles give it 0 0 since we are in 2d and we just need to modify the Z so I'm using the utens class to get the anger from vector float this is part of the code monkey utilities that you can grab for free from unity code monkey calm it simply takes a vector3 and returns a Euler angle so it is perfect for this case I send it on last move direction and it will return the correct angle so now our effect is correctly positioned and rotated all we need is the scale the sprite has an actual width of 35 s so let's define here a float for the dash effect width this is the width of the sprite which is dependent on the pixels per unit that is set on the import support the dash distance divided by the width and everything else with Oana all right so let's test and see if our fact shows up okay so here I am moving around if I hit space if there yo he teleports forward and there's a nice dash effect behind him and again I still cannot go through wall I can teleport around but don't go through walls ok great the way we set up our code we can easily modify the dash distance and everything else should be the same so let's see here I am and yep I got a much bigger and the effect is scaled correctly and again I still cannot go through walls yep great now the way we set things up it means that if we go up here and we try to above since we are within the distance we don't actually move forward if we if you if you wanted you could improve the code to make it so that when you hit space it would go right next to the wall you would simply need to do a ray cast and test the distance to the wall and then change the if distance accordingly so there you have it we add the simple ability with a nice effect to quickly move our character around as always you can download the project files in you tell from Unicode monkey calm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time
