With timestamps:

00:00 - in this video we're going to look at the
00:01 - current state of visual scripting in
00:03 - unity visual scripting is an excellent
00:06 - learning tool and it opens up unity to a
00:08 - lot more people being dots based means
00:10 - you get epic performance by the font and
00:12 - it also works as a way for programmers
00:14 - to understand the dots and ECS paradigm
00:16 - let's begin
00:20 - [Music]
00:24 - hello and welcome I'm your code monkey
00:27 - and this channel is all about helping
00:28 - you learn how to make your own games
00:30 - with nf2 torrents made by a professional
00:31 - indie game developer so if you find the
00:34 - video helpful consider subscribing ok so
00:36 - here we're going to look into how to
00:38 - start using visual scripting and make a
00:40 - simple player character move left and
00:42 - right so first of all I'm mainly a
00:44 - programmer because I love the code I've
00:46 - been writing code for decades and it's
00:48 - definitely something that I love to do
00:49 - but I see a lot of comments from people
00:51 - saying they are scared to learn code
00:52 - because it only looks way too complex
00:55 - programming is mainly about logic and
00:57 - thinking about flow and that's exactly
00:59 - what visual scripting helps in
01:00 - visualizing if you understand of logic
01:03 - behind your visual scripts then all you
01:05 - need to do after that is learn the
01:06 - programming syntax and all of a sudden
01:08 - you know how to code so I'm a huge fan
01:10 - of visual scripting as a great learning
01:12 - tool for helping people get started and
01:14 - being less scared of program ok so here
01:17 - we're going to check out the unity
01:19 - visual scripting package this is still
01:21 - very much in development at the time of
01:23 - recording it is currently only six
01:25 - experimental drop running on unity 20
01:27 - 19.3 so if you're watching this many
01:30 - months in the future then some things
01:31 - unlikely have changed there's normally a
01:33 - new drop every six weeks or so check the
01:36 - link in the description to download it
01:38 - and try it for yourself now one
01:40 - particular thing about visual scripting
01:41 - is that it's fully based on unity dots
01:43 - so that means seven things first of all
01:46 - it means extreme performance your
01:48 - scripts are automatically set up to
01:49 - benefit from bursts and each job system
01:51 - giving you excellent performance another
01:54 - thing and this is very interesting is it
01:56 - also means that visual scripting works
01:58 - as an excellent tool for understanding
02:00 - how unity dots works so even if you're a
02:03 - complete programmer and not interested
02:04 - in visual scripting for production code
02:06 - you can still use it to understand the
02:08 - core concepts behind dots if you're not
02:11 - familiar with dots or in TCS then I
02:13 - won't cover it here but for a more
02:15 - detailed explanation check the links in
02:16 - the description that stands for the data
02:19 - oriented technology stack which is
02:21 - comprised of the ECS or entity component
02:24 - system the job system and bursts so ECS
02:27 - stands for the entity component system
02:29 - and this is a data oriented programming
02:31 - paradigm you have components which hold
02:33 - data then you have entities which hold
02:35 - instances of component
02:37 - and finally you have systems which were
02:39 - logic on entities and components again
02:42 - for a more detailed explanation check
02:43 - the links in the description here after
02:45 - you see the example it'll all become
02:47 - easier to understand so over here I have
02:50 - a component empty unity project and I
02:52 - have in soundy visual scripting package
02:54 - now I can go all the way up here into
02:56 - the window and open up the visual script
02:58 - window and here it is this is the window
03:00 - that pops up right now it's completely
03:02 - empty so let's create a visual script
03:05 - for that we go down here onto our
03:07 - project files and we create not the way
03:09 - down here we have visual script and then
03:11 - let's make a ECS graph let's go about
03:14 - something like player movements ok so
03:17 - here is the window with the player
03:18 - movement script as you can see we have
03:20 - an entity query and a on update running
03:23 - through every entity that matches that
03:24 - query now let's create our player entity
03:27 - so to do that it's very simple to what
03:29 - you're already used to over here on the
03:31 - hierarchy let's create a 3d object let's
03:34 - make it a quand okay so here in the
03:36 - scene you can see a very basic quad
03:38 - right now the current dots
03:40 - implementation doesn't support the
03:41 - sprite renderer so that's why we're
03:43 - using a mesh filter and a mesh renderer
03:45 - alright so here we have a basic player
03:47 - sprite now in order to convert this from
03:49 - a game object into an entity we need to
03:52 - go in here add the component of type
03:54 - convert to entity there yo this one
03:57 - converts a game object into an entity
03:59 - and then destroys the game object so now
04:01 - if we try running our game okay the game
04:04 - is running and now we can go into window
04:06 - in order to open up the entity debugger
04:08 - and there you go you can see that the NT
04:10 - debugger has our player character with
04:12 - all those components and if you pause
04:14 - you can see that the hierarchy is empty
04:16 - alright so our character is now working
04:18 - as an entity great now that we have this
04:21 - working and let's add some logic on to
04:22 - it so here is our visual script window
04:25 - and we can simply drag the player onto
04:27 - it and as soon as you do you can see
04:29 - that it automatically add a player query
04:31 - and in order to view information about
04:33 - this point query we go all the way up
04:35 - here onto this button which shows the
04:37 - blackboard so click on it and there you
04:39 - go we have our point board so here on
04:41 - the blackboard we can see our various
04:42 - queries variables in the current scope
04:44 - so for example we can expand this one
04:46 - and over here you can see all the
04:48 - components that were automatically out
04:50 - this query by dragging our player
04:52 - character onto it so the player
04:54 - character has render bounds welcome to
04:55 - whirl non-uniform scale rotation and so
04:58 - on so now we can get rid of this one
05:00 - previous get rid of that query okay and
05:03 - now we have our player query so we can
05:05 - drag it by clinging here drag it to the
05:07 - side and now we choose an action so
05:09 - let's choose the on update entities and
05:12 - now here to keep things simple let's
05:13 - make sure that we only care about the
05:15 - translation component so you had rid of
05:17 - all these since we're not going to
05:19 - modify them alright so here we have a
05:21 - very simple query so whatever actions
05:22 - that we put in here won't run on every
05:24 - single entity that contains a
05:26 - translation component which in this case
05:28 - all we have is our player so now here we
05:30 - can do something so something like this
05:31 - press space and let's add the translate
05:35 - so this note allows us to translate an
05:37 - entity so move it around so here instead
05:40 - of using a complete form of 3 which is
05:41 - essentially the same as a vector 3 we're
05:43 - going to put by axis and now we can
05:46 - modify them individually so here we can
05:48 - move our entity so let's simply put a
05:50 - certain value on the X and let's say
05:52 - point 1 and now here if we do it like
05:55 - this it won't translate onto x equals
05:57 - point 1 but we want to add it on every
05:59 - frame so we simply select that so this
06:02 - won't translate by an X of point 1 on
06:05 - every single update and that will happen
06:08 - for every single entity that matches
06:09 - this query which is simply the
06:11 - translation component so every entity
06:13 - that contains the translation is going
06:14 - to execute this action which will move
06:16 - it to the right let's see ok here we are
06:19 - and yep there's our player character
06:20 - constantly moving to the right awesome
06:22 - so just like this you can already see
06:24 - how this tool works and how it's useful
06:26 - for both non programmers to make games
06:28 - as well as for programmers to learn
06:29 - about the entity component system and
06:31 - also one thing is over here we have
06:33 - another button this one is for the code
06:36 - viewer so if you click on it there you
06:38 - go it shows up the code viewer window
06:40 - and in here you can see the killed
06:42 - representation of what we were doing
06:44 - with our visual script so here in the
06:47 - code you can see that we have our
06:48 - component system which is our visual
06:50 - script we have an entity query called
06:53 - player query
06:54 - exactly this one on the system create we
06:56 - are creating our entity query which as
06:58 - you can see only has the translation
07:00 - component and then on every update which
07:02 - is this stack we are cycling through
07:04 - every entity that matches their point of
07:06 - queering so for each of those entities
07:08 - we're going to grab the translation
07:10 - component and then in here we're going
07:12 - to modify the translation value X and
07:14 - increase it by 0.1 which is exactly what
07:16 - we're doing in here so this is how this
07:18 - tool can be excellent for programmers
07:20 - you can make a certain visual script and
07:22 - then look at the actual code that's
07:24 - running behind it okay so now let's make
07:26 - some more logic now over here we are
07:28 - moving to the right and let's make it
07:30 - move to the right until it reaches a
07:32 - certain point and then moves left so
07:34 - over here on our update and the stack we
07:36 - can add another node let's add a simple
07:39 - if condition so here as you can see we
07:42 - have an if which takes a condition if
07:44 - condition is true then it'll run this
07:47 - stack and if condition is false it on
07:48 - run this tank so now since we want to
07:51 - move to the right and then to the left
07:52 - we want the condition to be when it goes
07:54 - past a certain point so we want to test
07:57 - the x position and see if it's larger
07:59 - than a certain amount so first we grab
08:01 - the translation component so there it is
08:03 - so we stretch this out then we select
08:05 - the get property node then select the
08:08 - get property press space in order to
08:10 - select whatever properties we want to
08:12 - get and in this case we want to get the
08:13 - X so select that one and yep there you
08:16 - go now we have this node in here which
08:18 - will return the x value inside of the
08:20 - translation component now we need a
08:22 - condition to input into our if here so
08:25 - let's get the condition greater than so
08:28 - this one I'll put true if a is greater
08:29 - than B so we pass in a in there and now
08:32 - on B we select a certain value so we're
08:35 - here in the editor we can see and let's
08:37 - say that our sprite starts in here and
08:39 - we want to move it back when reaches
08:40 - this point so this point is at 7 so
08:43 - we're here this one will return true if
08:44 - a is passed 7 and then we put in this
08:47 - condition in there alright so in here we
08:49 - have our update which first moves our
08:52 - entity then we test if the translation X
08:54 - is past 7 if so then we're going to go
08:57 - into this stack and in this stack let's
08:59 - just add a debug log for testing so over
09:01 - here we can add a simple log and now for
09:04 - the message let's simply put out the
09:06 - valley X ok so here we have very simple
09:08 - script we're going to move our player to
09:10 - the right once it goes past 7 we should
09:12 - be able to see a log on the console
09:14 - let's see ok here we are with our
09:16 - console empty and now our
09:18 - sprite is moving to the right and once
09:19 - he goes past seven and yep there you go
09:22 - we have our condition triggering and now
09:23 - we have our lock
09:24 - awesome so just like this we already
09:26 - have a very simple script here working
09:28 - with some nice logic and again the whole
09:30 - thing is done without having to write
09:31 - any code whatsoever but we can also
09:33 - inspect the code viewer in order to see
09:35 - what's actually happening so we're here
09:37 - we are increasing the translation value
09:39 - on the X then we do an if that valid on
09:42 - X is bigger than seven if so then we do
09:44 - a debug log on the translation value X
09:46 - so now that we have this working and we
09:49 - are identifying when the player goes
09:51 - past it right when that happens let's
09:54 - make a move to the left so for that in
09:56 - here let's make a new component so we're
09:59 - going to create down here onto visual
10:01 - script and over here we have a bunch of
10:03 - options and let's unlike the new
10:04 - component let's make this our move
10:06 - direction so an create a component we
10:09 - see in this window as you can see it's
10:11 - named move directions of type component
10:13 - and over here we can add all the fields
10:15 - inside of this component so let's add a
10:18 - new field let's call this our value and
10:21 - instead of an integer let's make it a
10:23 - float all right so we have a component
10:25 - with one field of type float so now we
10:28 - select the player and we simply drag the
10:30 - move Direction straight onto our player
10:32 - all right so over here we can see our
10:34 - value now this is direction so we're
10:36 - only going to put either one or minus
10:38 - one so let's start with one so it starts
10:40 - going to the right okay so back in our
10:42 - visual script over here we have our
10:44 - player query currently running on all
10:45 - entities with translation and let's also
10:47 - add another required component and in
10:50 - this case it won't be our move Direction
10:52 - component and there you go over here you
10:54 - can already see it at the translation
10:55 - and the move direction so here let's
10:57 - first use our move direction when we
10:59 - translate something so let's drag the
11:00 - move direction there and we push it out
11:02 - and we use a get property on to get
11:05 - property and let's select our value and
11:07 - now we multiply the value by a certain
11:09 - speed which is what we're doing in here
11:11 - so we have our move Direction either one
11:13 - or minus one so going left or right and
11:15 - then we have our movement speed and we
11:18 - simply add a multiply node we multiply
11:21 - our direction by our speed and that's
11:22 - what we pass in to our translation
11:24 - component all right so we're doing
11:26 - examine the same thing as previously
11:27 - here we are and yep there's the player
11:29 - so moving to the right okay so
11:30 - are so good now back into our if down
11:33 - here so doing an if the translation
11:35 - value X goes past seven if that happens
11:38 - and we're going to run this stack and in
11:41 - here instead of doing a log what we're
11:42 - going to have is a set property so this
11:45 - is how we modify something so the
11:47 - something you want to modify is on the
11:49 - move Direction component so we drag it
11:51 - in here we connect that one into that
11:53 - one now we select set property press
11:55 - space and over here we can modify the
11:57 - value so when translation goes past
11:59 - seven let's simply set the value to
12:01 - minus one okay so just like this as soon
12:03 - as the play reaches the right side it
12:05 - should start moving to the left side
12:06 - okay here we are and there's the player
12:08 - and he's going to move and he moves as
12:11 - soon as he gets there yup there you go
12:13 - he modified the move Direction component
12:15 - and now he's moving to the left and we
12:17 - can pause and look at the entity
12:18 - debugger and over here we have our
12:20 - player entity and here is the inspector
12:23 - and we can see indeed the move Direction
12:25 - has value of minus one alright awesome
12:27 - so here we have the player going to the
12:30 - right and then left now let's make him
12:32 - go back to the right once he reaches the
12:33 - edge on the left so what we do is very
12:35 - simple we have our if we go pass to the
12:38 - right side then we set the move
12:39 - direction
12:39 - if not then let's drag it to make
12:41 - another stack on this stack let certain
12:43 - if so again we're going to need our
12:46 - condition like we did previously so we
12:47 - can simply sound like these control-c
12:50 - control-v there you go and I mean here
12:52 - instead of a greater than we want a less
12:54 - than node so we're here if the
12:59 - translation value X if it is under minus
13:01 - seven then this will be true so if that
13:05 - happens then we want to do the same
13:06 - thing in here so we want to do a set
13:09 - property we're going to set the move
13:11 - Direction selective value and we set the
13:14 - value to one alright so over here we
13:17 - have a very simple script working moving
13:19 - our player right and left let's see it
13:21 - in action okay here we are
13:23 - and there's the player going to the
13:25 - right as soon as he reaches the edge
13:27 - there you go he starts going left so
13:29 - they moved their component now has minus
13:31 - one now it reaches the in left side and
13:33 - they're gonna move their component is
13:35 - back to one so he's back to going to the
13:37 - right so here we have some nice simple
13:39 - logic working awesome and again here we
13:41 - can inspect this entity there's move
13:43 - direction
13:44 - currently at minus one so he's going to
13:45 - the left and you can see down here the
13:48 - translation component there's the X
13:49 - currently going to the left as soon as
13:52 - it reaches minus seven it will modify
13:53 - the move Direction component from minus
13:55 - one and yep there we go with modify to
13:59 - one and now he's going to the right all
14:01 - right now let's add a few more things
14:03 - first of all let's make a speed
14:04 - component so we're here we create go
14:07 - down here visual script new component
14:09 - let's go with type move speed in here
14:12 - we'll make it move speed and we add the
14:14 - field call it our value and again this
14:17 - one is a float and hit save there you go
14:20 - there's our move speed proxy component
14:22 - so we select the player we drag the move
14:24 - speed component on there and now we're
14:26 - going to multiply it by a delta x and
14:28 - let's put let's say ten back in our
14:30 - visual script let's open up our query
14:32 - add another required component this one
14:35 - of type moves beam and there it is
14:37 - there's our move speed component and in
14:39 - here instead of using this constant we
14:40 - were using previously we're going to use
14:42 - our move speed so we drag the component
14:44 - on there we push it out we add a get
14:48 - property node then we hit space in order
14:51 - to grab the value so grab the value and
14:53 - multiply it by there so here we have the
14:55 - speed multiplied by the direction and
14:57 - now after doing this lets get a delta
15:00 - time node this is in order for our code
15:02 - to be framerate independent so we get
15:05 - that and we simply multiply it so we add
15:08 - a multiply node between our adult time
15:10 - and our speed result then we take this
15:13 - and we add it on the X all right so here
15:15 - you can actually see our logic very
15:17 - visually we're multiplying the direction
15:20 - by the speed they're multiplying that
15:22 - result by the Delta time to make it
15:24 - frame rate independent and we're simply
15:26 - passing that into the translate by node
15:28 - on the x value
15:31 - and this note is set to add so it will
15:34 - constantly add the vowel that receives
15:35 - in here then we have our simple F
15:37 - testing if the ice goes past seven if so
15:39 - then we're going to run this tag and
15:41 - this type won't set the move Direction
15:42 - up here back to minus one so it will
15:44 - move to the left side and if it is not
15:47 - past the left side then we go into this
15:49 - tag and this tag we do an if if it is
15:52 - under minus seven then we set the move
15:54 - Direction back into one so he goes back
15:56 - into the right all right so here's our
15:58 - very nice script let's see it in action
16:00 - any of there's our player moving with a
16:02 - specific movement speed so we could
16:04 - modify the value inside of that
16:06 - component and it would modify how fast
16:08 - the player is moving and again the whole
16:11 - thing is frame rate independent so you
16:13 - can see we're running at 800 frames per
16:14 - second and with the speed of 10 so
16:17 - everything is working great so over here
16:19 - we have our logic completely working and
16:21 - we made all this happen without writing
16:23 - a single line of code again you can see
16:25 - how this is a great way for beginners to
16:27 - get started with a logic of programming
16:29 - without having to actually write code
16:30 - and thanks to the code viewer this is
16:32 - also excellent for program is in order
16:34 - to understand how the entity component
16:36 - system works so as you can see we are
16:38 - grabbing our entity query we're growing
16:41 - everything with the translation move
16:42 - direction and move speed components then
16:44 - we do an entities for each with this
16:47 - pointer query we're increasing it on the
16:49 - X and over here you can see our
16:51 - multiplication so we multiply the move
16:53 - Direction value by the move speed value
16:55 - and then we're multiplying this whole
16:56 - thing by our delta time and we're
16:58 - applying it to the translation value X
17:00 - then we're doing a simple if past 7f if
17:03 - so then we set the move direction to
17:05 - minus 1 and if not then we test if the
17:07 - value x is under minus 7 and if so we
17:10 - set the move Direction value to 1 so
17:13 - again here we have our nice pride going
17:15 - left and right with some simple magic
17:16 - and over here is the entire visual
17:18 - script running that action if you want
17:21 - to see more visual scripting content
17:22 - please let me know in the comments as
17:24 - always you can download the project
17:25 - files anatoly's from unity code monkey
17:27 - calm subscribe to the channel for more
17:29 - unity tutorials post a new question
17:30 - having two comments and I'll see you
17:32 - next time
17:34 - [Music]

Cleaned transcript:

in this video we're going to look at the current state of visual scripting in unity visual scripting is an excellent learning tool and it opens up unity to a lot more people being dots based means you get epic performance by the font and it also works as a way for programmers to understand the dots and ECS paradigm let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with nf2 torrents made by a professional indie game developer so if you find the video helpful consider subscribing ok so here we're going to look into how to start using visual scripting and make a simple player character move left and right so first of all I'm mainly a programmer because I love the code I've been writing code for decades and it's definitely something that I love to do but I see a lot of comments from people saying they are scared to learn code because it only looks way too complex programming is mainly about logic and thinking about flow and that's exactly what visual scripting helps in visualizing if you understand of logic behind your visual scripts then all you need to do after that is learn the programming syntax and all of a sudden you know how to code so I'm a huge fan of visual scripting as a great learning tool for helping people get started and being less scared of program ok so here we're going to check out the unity visual scripting package this is still very much in development at the time of recording it is currently only six experimental drop running on unity 20 19.3 so if you're watching this many months in the future then some things unlikely have changed there's normally a new drop every six weeks or so check the link in the description to download it and try it for yourself now one particular thing about visual scripting is that it's fully based on unity dots so that means seven things first of all it means extreme performance your scripts are automatically set up to benefit from bursts and each job system giving you excellent performance another thing and this is very interesting is it also means that visual scripting works as an excellent tool for understanding how unity dots works so even if you're a complete programmer and not interested in visual scripting for production code you can still use it to understand the core concepts behind dots if you're not familiar with dots or in TCS then I won't cover it here but for a more detailed explanation check the links in the description that stands for the data oriented technology stack which is comprised of the ECS or entity component system the job system and bursts so ECS stands for the entity component system and this is a data oriented programming paradigm you have components which hold data then you have entities which hold instances of component and finally you have systems which were logic on entities and components again for a more detailed explanation check the links in the description here after you see the example it'll all become easier to understand so over here I have a component empty unity project and I have in soundy visual scripting package now I can go all the way up here into the window and open up the visual script window and here it is this is the window that pops up right now it's completely empty so let's create a visual script for that we go down here onto our project files and we create not the way down here we have visual script and then let's make a ECS graph let's go about something like player movements ok so here is the window with the player movement script as you can see we have an entity query and a on update running through every entity that matches that query now let's create our player entity so to do that it's very simple to what you're already used to over here on the hierarchy let's create a 3d object let's make it a quand okay so here in the scene you can see a very basic quad right now the current dots implementation doesn't support the sprite renderer so that's why we're using a mesh filter and a mesh renderer alright so here we have a basic player sprite now in order to convert this from a game object into an entity we need to go in here add the component of type convert to entity there yo this one converts a game object into an entity and then destroys the game object so now if we try running our game okay the game is running and now we can go into window in order to open up the entity debugger and there you go you can see that the NT debugger has our player character with all those components and if you pause you can see that the hierarchy is empty alright so our character is now working as an entity great now that we have this working and let's add some logic on to it so here is our visual script window and we can simply drag the player onto it and as soon as you do you can see that it automatically add a player query and in order to view information about this point query we go all the way up here onto this button which shows the blackboard so click on it and there you go we have our point board so here on the blackboard we can see our various queries variables in the current scope so for example we can expand this one and over here you can see all the components that were automatically out this query by dragging our player character onto it so the player character has render bounds welcome to whirl nonuniform scale rotation and so on so now we can get rid of this one previous get rid of that query okay and now we have our player query so we can drag it by clinging here drag it to the side and now we choose an action so let's choose the on update entities and now here to keep things simple let's make sure that we only care about the translation component so you had rid of all these since we're not going to modify them alright so here we have a very simple query so whatever actions that we put in here won't run on every single entity that contains a translation component which in this case all we have is our player so now here we can do something so something like this press space and let's add the translate so this note allows us to translate an entity so move it around so here instead of using a complete form of 3 which is essentially the same as a vector 3 we're going to put by axis and now we can modify them individually so here we can move our entity so let's simply put a certain value on the X and let's say point 1 and now here if we do it like this it won't translate onto x equals point 1 but we want to add it on every frame so we simply select that so this won't translate by an X of point 1 on every single update and that will happen for every single entity that matches this query which is simply the translation component so every entity that contains the translation is going to execute this action which will move it to the right let's see ok here we are and yep there's our player character constantly moving to the right awesome so just like this you can already see how this tool works and how it's useful for both non programmers to make games as well as for programmers to learn about the entity component system and also one thing is over here we have another button this one is for the code viewer so if you click on it there you go it shows up the code viewer window and in here you can see the killed representation of what we were doing with our visual script so here in the code you can see that we have our component system which is our visual script we have an entity query called player query exactly this one on the system create we are creating our entity query which as you can see only has the translation component and then on every update which is this stack we are cycling through every entity that matches their point of queering so for each of those entities we're going to grab the translation component and then in here we're going to modify the translation value X and increase it by 0.1 which is exactly what we're doing in here so this is how this tool can be excellent for programmers you can make a certain visual script and then look at the actual code that's running behind it okay so now let's make some more logic now over here we are moving to the right and let's make it move to the right until it reaches a certain point and then moves left so over here on our update and the stack we can add another node let's add a simple if condition so here as you can see we have an if which takes a condition if condition is true then it'll run this stack and if condition is false it on run this tank so now since we want to move to the right and then to the left we want the condition to be when it goes past a certain point so we want to test the x position and see if it's larger than a certain amount so first we grab the translation component so there it is so we stretch this out then we select the get property node then select the get property press space in order to select whatever properties we want to get and in this case we want to get the X so select that one and yep there you go now we have this node in here which will return the x value inside of the translation component now we need a condition to input into our if here so let's get the condition greater than so this one I'll put true if a is greater than B so we pass in a in there and now on B we select a certain value so we're here in the editor we can see and let's say that our sprite starts in here and we want to move it back when reaches this point so this point is at 7 so we're here this one will return true if a is passed 7 and then we put in this condition in there alright so in here we have our update which first moves our entity then we test if the translation X is past 7 if so then we're going to go into this stack and in this stack let's just add a debug log for testing so over here we can add a simple log and now for the message let's simply put out the valley X ok so here we have very simple script we're going to move our player to the right once it goes past 7 we should be able to see a log on the console let's see ok here we are with our console empty and now our sprite is moving to the right and once he goes past seven and yep there you go we have our condition triggering and now we have our lock awesome so just like this we already have a very simple script here working with some nice logic and again the whole thing is done without having to write any code whatsoever but we can also inspect the code viewer in order to see what's actually happening so we're here we are increasing the translation value on the X then we do an if that valid on X is bigger than seven if so then we do a debug log on the translation value X so now that we have this working and we are identifying when the player goes past it right when that happens let's make a move to the left so for that in here let's make a new component so we're going to create down here onto visual script and over here we have a bunch of options and let's unlike the new component let's make this our move direction so an create a component we see in this window as you can see it's named move directions of type component and over here we can add all the fields inside of this component so let's add a new field let's call this our value and instead of an integer let's make it a float all right so we have a component with one field of type float so now we select the player and we simply drag the move Direction straight onto our player all right so over here we can see our value now this is direction so we're only going to put either one or minus one so let's start with one so it starts going to the right okay so back in our visual script over here we have our player query currently running on all entities with translation and let's also add another required component and in this case it won't be our move Direction component and there you go over here you can already see it at the translation and the move direction so here let's first use our move direction when we translate something so let's drag the move direction there and we push it out and we use a get property on to get property and let's select our value and now we multiply the value by a certain speed which is what we're doing in here so we have our move Direction either one or minus one so going left or right and then we have our movement speed and we simply add a multiply node we multiply our direction by our speed and that's what we pass in to our translation component all right so we're doing examine the same thing as previously here we are and yep there's the player so moving to the right okay so are so good now back into our if down here so doing an if the translation value X goes past seven if that happens and we're going to run this stack and in here instead of doing a log what we're going to have is a set property so this is how we modify something so the something you want to modify is on the move Direction component so we drag it in here we connect that one into that one now we select set property press space and over here we can modify the value so when translation goes past seven let's simply set the value to minus one okay so just like this as soon as the play reaches the right side it should start moving to the left side okay here we are and there's the player and he's going to move and he moves as soon as he gets there yup there you go he modified the move Direction component and now he's moving to the left and we can pause and look at the entity debugger and over here we have our player entity and here is the inspector and we can see indeed the move Direction has value of minus one alright awesome so here we have the player going to the right and then left now let's make him go back to the right once he reaches the edge on the left so what we do is very simple we have our if we go pass to the right side then we set the move direction if not then let's drag it to make another stack on this stack let certain if so again we're going to need our condition like we did previously so we can simply sound like these controlc controlv there you go and I mean here instead of a greater than we want a less than node so we're here if the translation value X if it is under minus seven then this will be true so if that happens then we want to do the same thing in here so we want to do a set property we're going to set the move Direction selective value and we set the value to one alright so over here we have a very simple script working moving our player right and left let's see it in action okay here we are and there's the player going to the right as soon as he reaches the edge there you go he starts going left so they moved their component now has minus one now it reaches the in left side and they're gonna move their component is back to one so he's back to going to the right so here we have some nice simple logic working awesome and again here we can inspect this entity there's move direction currently at minus one so he's going to the left and you can see down here the translation component there's the X currently going to the left as soon as it reaches minus seven it will modify the move Direction component from minus one and yep there we go with modify to one and now he's going to the right all right now let's add a few more things first of all let's make a speed component so we're here we create go down here visual script new component let's go with type move speed in here we'll make it move speed and we add the field call it our value and again this one is a float and hit save there you go there's our move speed proxy component so we select the player we drag the move speed component on there and now we're going to multiply it by a delta x and let's put let's say ten back in our visual script let's open up our query add another required component this one of type moves beam and there it is there's our move speed component and in here instead of using this constant we were using previously we're going to use our move speed so we drag the component on there we push it out we add a get property node then we hit space in order to grab the value so grab the value and multiply it by there so here we have the speed multiplied by the direction and now after doing this lets get a delta time node this is in order for our code to be framerate independent so we get that and we simply multiply it so we add a multiply node between our adult time and our speed result then we take this and we add it on the X all right so here you can actually see our logic very visually we're multiplying the direction by the speed they're multiplying that result by the Delta time to make it frame rate independent and we're simply passing that into the translate by node on the x value and this note is set to add so it will constantly add the vowel that receives in here then we have our simple F testing if the ice goes past seven if so then we're going to run this tag and this type won't set the move Direction up here back to minus one so it will move to the left side and if it is not past the left side then we go into this tag and this tag we do an if if it is under minus seven then we set the move Direction back into one so he goes back into the right all right so here's our very nice script let's see it in action any of there's our player moving with a specific movement speed so we could modify the value inside of that component and it would modify how fast the player is moving and again the whole thing is frame rate independent so you can see we're running at 800 frames per second and with the speed of 10 so everything is working great so over here we have our logic completely working and we made all this happen without writing a single line of code again you can see how this is a great way for beginners to get started with a logic of programming without having to actually write code and thanks to the code viewer this is also excellent for program is in order to understand how the entity component system works so as you can see we are grabbing our entity query we're growing everything with the translation move direction and move speed components then we do an entities for each with this pointer query we're increasing it on the X and over here you can see our multiplication so we multiply the move Direction value by the move speed value and then we're multiplying this whole thing by our delta time and we're applying it to the translation value X then we're doing a simple if past 7f if so then we set the move direction to minus 1 and if not then we test if the value x is under minus 7 and if so we set the move Direction value to 1 so again here we have our nice pride going left and right with some simple magic and over here is the entire visual script running that action if you want to see more visual scripting content please let me know in the comments as always you can download the project files anatoly's from unity code monkey calm subscribe to the channel for more unity tutorials post a new question having two comments and I'll see you next time
