With timestamps:

00:00 - in this video we're going to make a grid
00:01 - map to cut our world into various
00:03 - sections this can then be used for
00:05 - making all kinds of systems like a heat
00:07 - map pathfinding or defined valid on the
00:09 - area
00:12 - [Music]
00:17 - hello and welcome I'm your code monkey
00:19 - and this channel is all about helping
00:20 - you learn how to make your own games
00:22 - with NF tutorials made by a professional
00:24 - indie game developer so if you find the
00:26 - video helpful consider subscribing so
00:28 - here we are and this is what we want to
00:30 - make we have a nice scene here and as
00:32 - you can see our world is split into very
00:35 - squares each square is a grid position
00:37 - on our word map and when I click on a
00:40 - specific position you can see that it
00:42 - modified the underlying value on the
00:44 - grid map in that specific position this
00:47 - is a very simple grid map that you can
00:49 - extend to solve various problems for
00:52 - example you could use it to display
00:54 - where the mouse has been so here is a
00:56 - very simple example of the grid map
00:58 - being used in order to create a heat map
01:00 - alternatively you could use it to
01:02 - display where your player is dying or
01:04 - where he has killed enemies you could
01:07 - use it as a base for your pathfinding
01:08 - system to define which cells should be
01:10 - walkable and which should not or you
01:13 - could use it for example on a management
01:14 - game to define which areas you can build
01:16 - so as you can see there's a multitude of
01:19 - potential applications for this simple
01:21 - class for example in my own latest game
01:23 - battle royale tycoon I use grid maps for
01:25 - all sorts of things like for managing
01:27 - the path finding of each specific
01:28 - building to managing the town map for
01:31 - the ground towns as well as the
01:33 - environment heat map so as you can see
01:35 - there is a multitude of potential
01:37 - applications for this simple quest all
01:39 - right so this is our goal let's get to
01:41 - it okay so here we are in our scene all
01:45 - we have is a background texture and
01:47 - nothing else so let's begin by making
01:49 - our grid class over here on the scripts
01:51 - you see sharp script what's going on
01:53 - just great okay open it up now in here
01:57 - this will be a simple class so let's get
01:59 - rid of a monobehaviour and Sam let's
02:05 - make a constructor that receives a width
02:07 - and height
02:11 - let's also store these as variables now
02:19 - let's also create our underlying in
02:21 - terrain we're going to make a
02:24 - multi-dimensional array so we define it
02:27 - as int then brackets common brackets
02:30 - this is how we define a
02:31 - multi-dimensional array with two
02:33 - dimensions all right so now in here we
02:38 - create it so we do a new int array we
02:42 - pass in the width and the height all
02:46 - right so this is our very basic class we
02:49 - construct it with a width and height and
02:50 - we create the underlying array now let's
02:54 - set up a script in order to test it so
02:56 - back in the editor let's make a new
02:58 - c-sharp script let's call this our
03:01 - testing script let's make a game object
03:03 - to run it so a new game object call it
03:06 - testing and read the strip onto it okay
03:09 - okay so this script won't test our class
03:11 - so in here let's make a private void
03:14 - start and on start let's create a new
03:18 - grid with a certain width and height so
03:20 - let's create the grid object equals new
03:22 - grid and let's pass in width of 20 and a
03:26 - height of 10 okay that should do it now
03:30 - on the grid let's do it debug down low
03:33 - here on the constructor just to make
03:34 - sure that everything is worked so let's
03:36 - do a debug log of the width and then the
03:39 - height all right let's see any of their
03:42 - lives over here on the console say in
03:44 - 2010 okay great
03:45 - so we have our grid basic setup and the
03:47 - testing script is running now let's add
03:50 - some visuals to be able to see our int
03:52 - grid let's create some text objects that
03:54 - won't display the underlying value for
03:56 - each grid element so in here let's do a
03:59 - cycle to go through our entire array so
04:02 - let's do a simple form we start off at 0
04:06 - and now in here since we have a
04:08 - multi-dimensional array we need to
04:10 - figure out the size of each dimension so
04:12 - we can get that by going into the grid
04:13 - array and comma get 1 and here you can
04:17 - see that we can give an int for the
04:18 - dimension so in this case let's cycle
04:21 - through the first
04:21 - mention and then inside we cycle through
04:27 - the second dimension so this is how you
04:31 - cycle through a multi-dimensional right
04:33 - alright so now it's in here that we want
04:35 - to display a certain element okay so
04:37 - here just make sure that our cycles were
04:39 - in curriculum with you a debug command
04:41 - on the text and then the one and just
04:47 - for testing let's reduce our grid to
04:51 - just four - all right so we got four in
04:53 - the width and two on the height let's
04:54 - see and you up on the console you can
04:56 - see that we are indeed cycling through
04:58 - our entire array so you go through 0 0 0
05:01 - 1 1 0 1 1 2 0 2 1 3 0 & 3 1 so we have 4
05:05 - on the width and 2 on the height ok so
05:09 - far so good now in here let's phone a
05:11 - text object in order to visualize the
05:13 - underlining value for this grid element
05:16 - and for that I'm going to use a function
05:18 - from the utilities as long as you can
05:21 - download the utilities for free from in
05:22 - Tacoma Keep Calm so I'm going to be
05:24 - using code monkeytoes and in there in
05:29 - the utens class I have a create world
05:32 - text function here is the function in
05:35 - case you want to build it yourself
05:37 - instead of using the utilities as you
05:39 - can see just creates a game object
05:40 - positions it on a certain position
05:42 - creates a game object with a text match
05:45 - component sets all the text mesh values
05:47 - including the text so there it is very
05:50 - simple if you want to do it on your own
05:52 - but here let's use the utilities just to
05:54 - me make things easier for the text let's
05:57 - go into the grid array and grab on X Y
06:00 - so grab the underlying value and now in
06:04 - here we need to know where we're going
06:05 - to position our text object so let's
06:08 - figure out how we're going to define a
06:09 - position for our grid now in order to do
06:12 - that what we really need is to know how
06:14 - big each cell is so over here on the
06:17 - constructor let's receive a width then a
06:18 - height Emma let's also receive a point
06:20 - for the cell size let's store it up here
06:25 - and now with a certain cell size we can
06:29 - now calculate where each index lands on
06:31 - a worm position so let's make a function
06:34 - to convert an x and y into a warm
06:36 - position so here we make a profit going
06:40 - to return a vector3
06:41 - oh it's called get world position now
06:44 - we're going to receive an int for the X
06:46 - and therefore t1 and now in here it's
06:48 - extremely simple we just return a new
06:50 - vector3 with our x and y x our cell
06:54 - signs and that's it very simple so now
06:57 - we can now use this function all the way
06:59 - up here to get the wrong position cus in
07:01 - the X and the one alright this should do
07:09 - it so we should now be able to see a
07:11 - text object being placed on every grid
07:13 - position so here I'm testing we created
07:16 - four two and let's also pass in the cell
07:18 - size and let's say 10 ax right so we
07:22 - should be able to see four times two so
07:24 - eight text objects let's see
07:26 - any of their days we can now visually
07:29 - see the underlying values of our grid
07:30 - you know text objects are correctly
07:32 - located with a cell size of 10 we can
07:36 - verify that by creating a new empty game
07:38 - object just to see there it is so that
07:40 - one is right there as you can see on 0 0
07:42 - now we move around the side and this one
07:45 - is on 10 0 and the same up here is on
07:47 - 1010
07:48 - awesome alright so now that we can see
07:50 - the underlying values let's also add a
07:52 - debug to see the size of each grid
07:54 - position so we're here where we're
07:56 - creating our text objects let's also do
07:58 - a debug drawn line so here we need a
08:02 - start and an end point so for start and
08:05 - let's use get the world position to the
08:07 - current X&Y
08:08 - for the animal let's get the world
08:10 - position of the X and the y pause one so
08:15 - we have our left side vertical line now
08:17 - it's also make the horizontal line on
08:19 - the bottom so instead of going to our
08:22 - pose 1 it's exposed 1 alright so just
08:26 - like this we should be able to see
08:27 - vertical line and a horizontal line then
08:30 - let's make it within color dot white
08:34 - then let's make it last for let's say a
08:36 - hundred seconds alright that should do
08:41 - it
08:41 - let's test alright here we are and we
08:44 - actually can't see anything
08:45 - and the reason for that is because we
08:47 - are using the bug drama so when you use
08:49 - that you need to go all the way up here
08:51 - in our to enable gizmos and there you go
08:53 - when you do that you can now enable and
08:55 - we can now see the edges of our
08:57 - quadrants so just like this you can see
08:59 - the quadrant starts in here it goes all
09:00 - the way up here this is one quadrant
09:02 - another one another one and so on now
09:04 - since we're only printing the on
09:05 - left-hand bottom that means over here on
09:07 - the top and on the right we don't have
09:08 - anything so let's set it right at the
09:10 - end so after we go through our array
09:13 - down here let's do a horizontal line so
09:16 - we're going to start off at 0 and at the
09:18 - height and we go towards the width and
09:21 - the height and then for the vertical
09:24 - line we start off at width and 0 and we
09:28 - go towards the width and height all
09:32 - right what says any of there it is our
09:34 - nice grade is now fully visible awesome
09:37 - however you can also see one slight
09:39 - issue which is that our text objects are
09:42 - right at the origin of each cell it
09:45 - would be much easier to read it if it
09:46 - was right in the middle so let's do that
09:48 - over here when we create our world test
09:51 - we're getting the world position and we
09:53 - can simply offset it by half of our cell
09:55 - size so we do pause a new vector3 let's
09:59 - put it cell size on the X cell size on
10:02 - the wine and then we multiply it by 0.5
10:04 - so this won't shift it by half of the
10:06 - cell size let's see and there it is
10:08 - awesome so we can all visually see how
10:10 - our world map is split into various grid
10:13 - zones all right awesome
10:15 - so now that we can see the underlying
10:17 - values and see our grid let's make some
10:20 - functions you can modify it so first
10:22 - let's make a very simple function to set
10:24 - a single value so here let's make a
10:26 - public void let's call it set value
10:29 - we're going to receive an int for the X
10:32 - and int for the Y and then an int for
10:35 - the target value and now in here all we
10:38 - do is go into our grader right and set
10:41 - on position X Y to be our
10:45 - however here is also where we need to
10:48 - ask ourselves how should our class deal
10:50 - with invalid values so what should
10:52 - happen for example if we get a negative
10:54 - number there are very ways to solve that
10:56 - depending on what you're trying to go
10:58 - for we can either a thrown error or
11:00 - correct it to the closest value or just
11:03 - ignore it now throwing an error would
11:05 - potentially break the game so we should
11:06 - probably not do that and if we set the
11:09 - closest value then our grid map would
11:11 - behave very weirdly on the edges so in
11:14 - our case the best course of action is to
11:15 - simply ignore invalid values so in here
11:18 - before we set our value let's make sure
11:20 - that x and y are valid so we test if X
11:23 - is bigger than or equal to zero
11:27 - also make sure the Y is also bigger than
11:30 - or equal to zero and then let's make
11:33 - sure the X is out of the width and the Y
11:37 - is under our height without those that
11:40 - we have our valid votes and if we
11:43 - receive invalid X&Y we simply ignore it
11:46 - all right so far so good now in order to
11:49 - visually see setting the value we need
11:51 - to update our on text objects because in
11:53 - here we are simply creating them on the
11:55 - grid on the constructor and we're not
11:57 - obtaining it so if we use this this
11:59 - won't add update so let's see one with
12:00 - that let's make a second array just for
12:03 - debug purposes in order to store our
12:05 - debug text objects so here a private
12:08 - we're going to use a same
12:09 - multi-dimensional array but in this case
12:11 - of type text mesh we created just our
12:17 - like our underlying array and here when
12:21 - we are creating our debug test subjects
12:23 - let's set it for the X Y to be that
12:29 - all right so we now have a reference to
12:31 - our debug text objects again these are
12:34 - meant only for debug so when you go down
12:36 - here and we set the value let's also
12:38 - update our text object so we go into the
12:41 - X&Y and we set the text mesh text to be
12:46 - on the newly set bail all right that
12:52 - should do it
12:53 - over here on the constructor and let's
12:55 - test so let's call set value and let's
13:00 - try putting the value on the exit to Y
13:02 - of 1 let's write putting it to something
13:05 - like 56 all right so let's see and if
13:10 - there it is that one no longer has 0 go
13:12 - rather our new Lissa Valley awesome okay
13:15 - so now let's make a version of our
13:17 - function to set the value but instead of
13:19 - taking an x and y we're going to receive
13:21 - a world position so let's make a public
13:24 - void let's call it set value just the
13:27 - same except in here we'll receive
13:29 - effective 3 for the world position and
13:31 - then in for our value a now before we
13:35 - made a version to make the get the world
13:38 - position based on a certain X&Y and now
13:40 - we need the opposite we need a function
13:43 - to get the X&Y when given a certain
13:47 - vector 3 for the world position now in
13:51 - this function we need to return both the
13:53 - X and the y values however functions
13:55 - usually can only return a single them so
13:58 - we could modify all of our code to work
14:00 - with a struct that owns both the x and y
14:02 - values or we can simply add our
14:05 - parameters into this function so in here
14:08 - let's make this return point and instead
14:10 - let's have an out for need for our x and
14:13 - out int for our one this way we can
14:16 - return multiple values from a single
14:18 - function but again if you want it there
14:20 - are many approaches you could for
14:22 - example just make it return a vector 2
14:23 - and and that would work the same but
14:25 - let's go with the out for now so in here
14:30 - in order to get our X all we're going to
14:32 - do is go into the method and the way for
14:34 - to in it we're going to for our world
14:37 - position
14:38 - dot x / our cell size so with the cell
14:45 - size of 10 the world position 5 won't be
14:47 - on grid 0 and the world position of 15
14:49 - won't be ungraded 1 so that's how we
14:52 - calculated the X and the exact same
14:54 - thing for the Y and that's our
14:57 - calculation alright so we now have a
14:59 - function to convert our world position
15:01 - into a great position and we also have
15:03 - the previous one to convert grid into
15:05 - work awesome so now down here we can
15:08 - simply use that function so first we
15:10 - define our x and y then we call get XY
15:15 - we pass in the world position and we
15:19 - give an out for the x and an out for d1
15:22 - and then we simply call set value with
15:26 - our converting XY and passing the Evo
15:29 - and that's it alright so now let's go
15:32 - into our testing class and in here let's
15:35 - test setting a value on our mouse click
15:38 - so let's do a cardioid update and in
15:42 - here let's test for any input in order
15:46 - to get the mouse button down let's test
15:50 - on the in left mouse button
15:51 - so in x0 now when we click let's set the
15:57 - value on the grip so in order to get the
15:59 - world position again we can use the code
16:01 - monkey details in order to get the mouse
16:07 - world position again here is the
16:12 - function in case you want to belt
16:13 - yourself we just go into the world
16:16 - camera and call screen to our point on
16:18 - the screen position so that's how we get
16:19 - the mouse world position and now in here
16:22 - we can now go into our grid so let's
16:23 - store a reference to the grid our grid
16:27 - we constructed on start and then in here
16:29 - we call grid set value passing the mouse
16:32 - world position and then let's pass in a
16:34 - valley all right so let's see if we can
16:38 - modify our grid by simply clicking on it
16:40 - all right so here we are now first of
16:43 - all let's click outside and yet there
16:45 - you go clicking outside those apps
16:47 - nothing since we decided to ignore
16:48 - invalid values however now if I go in
16:51 - here and I click yep there you go we
16:54 - updated our grid value so we can now
16:57 - easily modify our grid by simply
16:59 - clicking on the desired element all
17:03 - right awesome we have all of our code
17:05 - working perfectly now that we can set a
17:08 - value let's also make a function to get
17:10 - a valid so we're here on our grid we
17:12 - have our two set value functions let's
17:14 - make the equivalent in order to get a
17:16 - value so we're going to make a public
17:18 - going to return an INT call it get value
17:21 - and we receive an in for the X in for
17:23 - the Y and then here we validate the
17:27 - value the same way and if it's a valid
17:31 - Jolley we're returning from the grid
17:32 - array XY and if not then we have an
17:39 - invalid value so in here it's up to you
17:41 - we could for example return in minus 1
17:44 - or in this case just return 0 how you
17:47 - dealing with infinite values is up to
17:49 - you let's make the same thing for the
17:51 - world position version all right we have
18:01 - our two very nice functions now let's
18:03 - test them so in here let's read the
18:05 - value on the right mouse button so in
18:14 - here just doing a debug log getting the
18:16 - value on the mauser opposition alright
18:18 - let's test ok here we are and I
18:20 - right-click outside and it always print
18:22 - 0 there this you know I right click in
18:25 - here says 0 left click and I've set it
18:27 - to 56 right click and there you go it is
18:30 - now correctly reading so that one read 0
18:32 - 10 reads 56 awesome so you can now set
18:35 - and get values from our grid
18:36 - all right now something else very useful
18:39 - is to have a variable origin up until
18:42 - now our grid does all the calculations
18:44 - assuming the origin is on 0 0 but
18:46 - sometimes you want your grid to start at
18:48 - a different point for example in
18:51 - parallel tycoon I have a grid created
18:53 - for each building and each building is
18:55 - located not in a different position
18:56 - so in here on let's go into our
18:58 - constructor right
18:59 - let's receive all of this and then let's
19:01 - also receive a vector3 for the origin
19:03 - position all right we have our origin
19:09 - and now down here whenever we are doing
19:11 - our calculations in order to get the
19:14 - wrong position or get the X Y when
19:17 - converting a great position into our
19:18 - position we do this and then we simply
19:20 - add our origin and the reverse getting
19:24 - the world from the XY we simply have our
19:27 - world position then we subtract our
19:29 - origin position and then we get the X in
19:32 - the Y all right that should do it
19:36 - let's test it out so here on testing
19:40 - let's set our origin instead of being on
19:43 - zero zero let's put it to the right so
19:46 - let's say on 20 0 km let's see so here
19:52 - we are and we can pause the game and
19:53 - look at it let's create an empty game
19:55 - object just to see where it is located
19:57 - and there you go zero zero is in here
19:59 - and over here on the right as you can
20:01 - see the origin is on 20 0 and let's see
20:04 - if the clicking still works so click out
20:06 - here nothing happens click over here and
20:08 - yep nothing is set and when I click in
20:10 - there there you go except that one that
20:12 - one that one and read also works awesome
20:14 - all right so that's pretty much our
20:17 - basic grade class done we TransAm make
20:19 - as many grades as we want with whatever
20:22 - size we want so let's try and make me
20:23 - bread with five let's put it under then
20:30 - let's put another one with 20
20:35 - all right so here we have a whole bunch
20:38 - of different grids each of them has a
20:40 - different cell size different with
20:42 - different height and they all work the
20:44 - same underneath so you can see how this
20:46 - class this code is extremely adaptable
20:48 - to whatever needs you have so again
20:51 - using this Bayes there's a ton of stuff
20:53 - that you can do with it now in here I
20:55 - will quickly show several potential uses
20:57 - for this grid map I'm going to make a
21:00 - simple heat map to show where the mouse
21:02 - has been I plan to do a completely
21:04 - detailed video on a heat map but right
21:06 - now I just want to show what can be done
21:07 - using this as a base
21:40 - all right so here we are with a nice
21:43 - simple heat map this was made to show
21:46 - where the mass has been so whenever I
21:47 - pass over the mouse there you go as you
21:50 - can see the Mazda leaves a trail
21:51 - wherever it goes you can see a heat map
21:54 - with the color so if I leave it there it
21:56 - goes from red to yellow to green and it
21:59 - shows how long the mouse has been on a
22:00 - certain position so there you go this is
22:02 - a very simple use case of the underlying
22:05 - grid so it's really doing is increasing
22:08 - the value on the underlying grid
22:10 - position under the mouse and converting
22:12 - that value into a nice cone in order to
22:15 - make that work I just added a few things
22:17 - over here to the grid like for example
22:18 - this event this gets fired whenever the
22:21 - grid value changed so down here when you
22:23 - have the set value we fire off this
22:25 - event and then over here on the testing
22:28 - class I created the heatmap visual as
22:31 - you can see it receives a grid then it
22:34 - updates when the grid value changes and
22:37 - the update simply creates the mesh if
22:40 - you'd like to know how a mesh is created
22:42 - through code check out the recent video
22:44 - I did on creating a dynamic mesh so here
22:47 - then just get see great value and sets
22:49 - the UV in order to change color of that
22:52 - quadrant any or Lissie texture that I'm
22:54 - using as you can see just has one pixel
22:57 - in black then it goes red yellow green
22:58 - again I plan on doing a complete video
23:01 - detailing the creation of a heat map but
23:03 - right now I just want to show one
23:05 - possible use case for this very simple
23:07 - underlying grid class I'm also planning
23:09 - another video on how to extend this
23:11 - class use generics so you can expand it
23:13 - even further so stay tuned for all of
23:15 - that as always you can download the
23:17 - project files in utilities from unity
23:18 - code monkey comm if you liked the video
23:20 - subscribe the channel for more ent
23:22 - tutorials post any questions you have in
23:24 - the comments and I'll do my best to
23:25 - answer them alright see you next time
23:39 - [Music]

Cleaned transcript:

in this video we're going to make a grid map to cut our world into various sections this can then be used for making all kinds of systems like a heat map pathfinding or defined valid on the area hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with NF tutorials made by a professional indie game developer so if you find the video helpful consider subscribing so here we are and this is what we want to make we have a nice scene here and as you can see our world is split into very squares each square is a grid position on our word map and when I click on a specific position you can see that it modified the underlying value on the grid map in that specific position this is a very simple grid map that you can extend to solve various problems for example you could use it to display where the mouse has been so here is a very simple example of the grid map being used in order to create a heat map alternatively you could use it to display where your player is dying or where he has killed enemies you could use it as a base for your pathfinding system to define which cells should be walkable and which should not or you could use it for example on a management game to define which areas you can build so as you can see there's a multitude of potential applications for this simple class for example in my own latest game battle royale tycoon I use grid maps for all sorts of things like for managing the path finding of each specific building to managing the town map for the ground towns as well as the environment heat map so as you can see there is a multitude of potential applications for this simple quest all right so this is our goal let's get to it okay so here we are in our scene all we have is a background texture and nothing else so let's begin by making our grid class over here on the scripts you see sharp script what's going on just great okay open it up now in here this will be a simple class so let's get rid of a monobehaviour and Sam let's make a constructor that receives a width and height let's also store these as variables now let's also create our underlying in terrain we're going to make a multidimensional array so we define it as int then brackets common brackets this is how we define a multidimensional array with two dimensions all right so now in here we create it so we do a new int array we pass in the width and the height all right so this is our very basic class we construct it with a width and height and we create the underlying array now let's set up a script in order to test it so back in the editor let's make a new csharp script let's call this our testing script let's make a game object to run it so a new game object call it testing and read the strip onto it okay okay so this script won't test our class so in here let's make a private void start and on start let's create a new grid with a certain width and height so let's create the grid object equals new grid and let's pass in width of 20 and a height of 10 okay that should do it now on the grid let's do it debug down low here on the constructor just to make sure that everything is worked so let's do a debug log of the width and then the height all right let's see any of their lives over here on the console say in 2010 okay great so we have our grid basic setup and the testing script is running now let's add some visuals to be able to see our int grid let's create some text objects that won't display the underlying value for each grid element so in here let's do a cycle to go through our entire array so let's do a simple form we start off at 0 and now in here since we have a multidimensional array we need to figure out the size of each dimension so we can get that by going into the grid array and comma get 1 and here you can see that we can give an int for the dimension so in this case let's cycle through the first mention and then inside we cycle through the second dimension so this is how you cycle through a multidimensional right alright so now it's in here that we want to display a certain element okay so here just make sure that our cycles were in curriculum with you a debug command on the text and then the one and just for testing let's reduce our grid to just four all right so we got four in the width and two on the height let's see and you up on the console you can see that we are indeed cycling through our entire array so you go through 0 0 0 1 1 0 1 1 2 0 2 1 3 0 & 3 1 so we have 4 on the width and 2 on the height ok so far so good now in here let's phone a text object in order to visualize the underlining value for this grid element and for that I'm going to use a function from the utilities as long as you can download the utilities for free from in Tacoma Keep Calm so I'm going to be using code monkeytoes and in there in the utens class I have a create world text function here is the function in case you want to build it yourself instead of using the utilities as you can see just creates a game object positions it on a certain position creates a game object with a text match component sets all the text mesh values including the text so there it is very simple if you want to do it on your own but here let's use the utilities just to me make things easier for the text let's go into the grid array and grab on X Y so grab the underlying value and now in here we need to know where we're going to position our text object so let's figure out how we're going to define a position for our grid now in order to do that what we really need is to know how big each cell is so over here on the constructor let's receive a width then a height Emma let's also receive a point for the cell size let's store it up here and now with a certain cell size we can now calculate where each index lands on a worm position so let's make a function to convert an x and y into a warm position so here we make a profit going to return a vector3 oh it's called get world position now we're going to receive an int for the X and therefore t1 and now in here it's extremely simple we just return a new vector3 with our x and y x our cell signs and that's it very simple so now we can now use this function all the way up here to get the wrong position cus in the X and the one alright this should do it so we should now be able to see a text object being placed on every grid position so here I'm testing we created four two and let's also pass in the cell size and let's say 10 ax right so we should be able to see four times two so eight text objects let's see any of their days we can now visually see the underlying values of our grid you know text objects are correctly located with a cell size of 10 we can verify that by creating a new empty game object just to see there it is so that one is right there as you can see on 0 0 now we move around the side and this one is on 10 0 and the same up here is on 1010 awesome alright so now that we can see the underlying values let's also add a debug to see the size of each grid position so we're here where we're creating our text objects let's also do a debug drawn line so here we need a start and an end point so for start and let's use get the world position to the current X&Y for the animal let's get the world position of the X and the y pause one so we have our left side vertical line now it's also make the horizontal line on the bottom so instead of going to our pose 1 it's exposed 1 alright so just like this we should be able to see vertical line and a horizontal line then let's make it within color dot white then let's make it last for let's say a hundred seconds alright that should do it let's test alright here we are and we actually can't see anything and the reason for that is because we are using the bug drama so when you use that you need to go all the way up here in our to enable gizmos and there you go when you do that you can now enable and we can now see the edges of our quadrants so just like this you can see the quadrant starts in here it goes all the way up here this is one quadrant another one another one and so on now since we're only printing the on lefthand bottom that means over here on the top and on the right we don't have anything so let's set it right at the end so after we go through our array down here let's do a horizontal line so we're going to start off at 0 and at the height and we go towards the width and the height and then for the vertical line we start off at width and 0 and we go towards the width and height all right what says any of there it is our nice grade is now fully visible awesome however you can also see one slight issue which is that our text objects are right at the origin of each cell it would be much easier to read it if it was right in the middle so let's do that over here when we create our world test we're getting the world position and we can simply offset it by half of our cell size so we do pause a new vector3 let's put it cell size on the X cell size on the wine and then we multiply it by 0.5 so this won't shift it by half of the cell size let's see and there it is awesome so we can all visually see how our world map is split into various grid zones all right awesome so now that we can see the underlying values and see our grid let's make some functions you can modify it so first let's make a very simple function to set a single value so here let's make a public void let's call it set value we're going to receive an int for the X and int for the Y and then an int for the target value and now in here all we do is go into our grader right and set on position X Y to be our however here is also where we need to ask ourselves how should our class deal with invalid values so what should happen for example if we get a negative number there are very ways to solve that depending on what you're trying to go for we can either a thrown error or correct it to the closest value or just ignore it now throwing an error would potentially break the game so we should probably not do that and if we set the closest value then our grid map would behave very weirdly on the edges so in our case the best course of action is to simply ignore invalid values so in here before we set our value let's make sure that x and y are valid so we test if X is bigger than or equal to zero also make sure the Y is also bigger than or equal to zero and then let's make sure the X is out of the width and the Y is under our height without those that we have our valid votes and if we receive invalid X&Y we simply ignore it all right so far so good now in order to visually see setting the value we need to update our on text objects because in here we are simply creating them on the grid on the constructor and we're not obtaining it so if we use this this won't add update so let's see one with that let's make a second array just for debug purposes in order to store our debug text objects so here a private we're going to use a same multidimensional array but in this case of type text mesh we created just our like our underlying array and here when we are creating our debug test subjects let's set it for the X Y to be that all right so we now have a reference to our debug text objects again these are meant only for debug so when you go down here and we set the value let's also update our text object so we go into the X&Y and we set the text mesh text to be on the newly set bail all right that should do it over here on the constructor and let's test so let's call set value and let's try putting the value on the exit to Y of 1 let's write putting it to something like 56 all right so let's see and if there it is that one no longer has 0 go rather our new Lissa Valley awesome okay so now let's make a version of our function to set the value but instead of taking an x and y we're going to receive a world position so let's make a public void let's call it set value just the same except in here we'll receive effective 3 for the world position and then in for our value a now before we made a version to make the get the world position based on a certain X&Y and now we need the opposite we need a function to get the X&Y when given a certain vector 3 for the world position now in this function we need to return both the X and the y values however functions usually can only return a single them so we could modify all of our code to work with a struct that owns both the x and y values or we can simply add our parameters into this function so in here let's make this return point and instead let's have an out for need for our x and out int for our one this way we can return multiple values from a single function but again if you want it there are many approaches you could for example just make it return a vector 2 and and that would work the same but let's go with the out for now so in here in order to get our X all we're going to do is go into the method and the way for to in it we're going to for our world position dot x / our cell size so with the cell size of 10 the world position 5 won't be on grid 0 and the world position of 15 won't be ungraded 1 so that's how we calculated the X and the exact same thing for the Y and that's our calculation alright so we now have a function to convert our world position into a great position and we also have the previous one to convert grid into work awesome so now down here we can simply use that function so first we define our x and y then we call get XY we pass in the world position and we give an out for the x and an out for d1 and then we simply call set value with our converting XY and passing the Evo and that's it alright so now let's go into our testing class and in here let's test setting a value on our mouse click so let's do a cardioid update and in here let's test for any input in order to get the mouse button down let's test on the in left mouse button so in x0 now when we click let's set the value on the grip so in order to get the world position again we can use the code monkey details in order to get the mouse world position again here is the function in case you want to belt yourself we just go into the world camera and call screen to our point on the screen position so that's how we get the mouse world position and now in here we can now go into our grid so let's store a reference to the grid our grid we constructed on start and then in here we call grid set value passing the mouse world position and then let's pass in a valley all right so let's see if we can modify our grid by simply clicking on it all right so here we are now first of all let's click outside and yet there you go clicking outside those apps nothing since we decided to ignore invalid values however now if I go in here and I click yep there you go we updated our grid value so we can now easily modify our grid by simply clicking on the desired element all right awesome we have all of our code working perfectly now that we can set a value let's also make a function to get a valid so we're here on our grid we have our two set value functions let's make the equivalent in order to get a value so we're going to make a public going to return an INT call it get value and we receive an in for the X in for the Y and then here we validate the value the same way and if it's a valid Jolley we're returning from the grid array XY and if not then we have an invalid value so in here it's up to you we could for example return in minus 1 or in this case just return 0 how you dealing with infinite values is up to you let's make the same thing for the world position version all right we have our two very nice functions now let's test them so in here let's read the value on the right mouse button so in here just doing a debug log getting the value on the mauser opposition alright let's test ok here we are and I rightclick outside and it always print 0 there this you know I right click in here says 0 left click and I've set it to 56 right click and there you go it is now correctly reading so that one read 0 10 reads 56 awesome so you can now set and get values from our grid all right now something else very useful is to have a variable origin up until now our grid does all the calculations assuming the origin is on 0 0 but sometimes you want your grid to start at a different point for example in parallel tycoon I have a grid created for each building and each building is located not in a different position so in here on let's go into our constructor right let's receive all of this and then let's also receive a vector3 for the origin position all right we have our origin and now down here whenever we are doing our calculations in order to get the wrong position or get the X Y when converting a great position into our position we do this and then we simply add our origin and the reverse getting the world from the XY we simply have our world position then we subtract our origin position and then we get the X in the Y all right that should do it let's test it out so here on testing let's set our origin instead of being on zero zero let's put it to the right so let's say on 20 0 km let's see so here we are and we can pause the game and look at it let's create an empty game object just to see where it is located and there you go zero zero is in here and over here on the right as you can see the origin is on 20 0 and let's see if the clicking still works so click out here nothing happens click over here and yep nothing is set and when I click in there there you go except that one that one that one and read also works awesome all right so that's pretty much our basic grade class done we TransAm make as many grades as we want with whatever size we want so let's try and make me bread with five let's put it under then let's put another one with 20 all right so here we have a whole bunch of different grids each of them has a different cell size different with different height and they all work the same underneath so you can see how this class this code is extremely adaptable to whatever needs you have so again using this Bayes there's a ton of stuff that you can do with it now in here I will quickly show several potential uses for this grid map I'm going to make a simple heat map to show where the mouse has been I plan to do a completely detailed video on a heat map but right now I just want to show what can be done using this as a base all right so here we are with a nice simple heat map this was made to show where the mass has been so whenever I pass over the mouse there you go as you can see the Mazda leaves a trail wherever it goes you can see a heat map with the color so if I leave it there it goes from red to yellow to green and it shows how long the mouse has been on a certain position so there you go this is a very simple use case of the underlying grid so it's really doing is increasing the value on the underlying grid position under the mouse and converting that value into a nice cone in order to make that work I just added a few things over here to the grid like for example this event this gets fired whenever the grid value changed so down here when you have the set value we fire off this event and then over here on the testing class I created the heatmap visual as you can see it receives a grid then it updates when the grid value changes and the update simply creates the mesh if you'd like to know how a mesh is created through code check out the recent video I did on creating a dynamic mesh so here then just get see great value and sets the UV in order to change color of that quadrant any or Lissie texture that I'm using as you can see just has one pixel in black then it goes red yellow green again I plan on doing a complete video detailing the creation of a heat map but right now I just want to show one possible use case for this very simple underlying grid class I'm also planning another video on how to extend this class use generics so you can expand it even further so stay tuned for all of that as always you can download the project files in utilities from unity code monkey comm if you liked the video subscribe the channel for more ent tutorials post any questions you have in the comments and I'll do my best to answer them alright see you next time
