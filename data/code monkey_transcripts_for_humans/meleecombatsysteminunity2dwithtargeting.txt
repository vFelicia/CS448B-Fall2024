With timestamps:

00:00 - in this video we're going to create a
00:01 - simple melee combat system we're going
00:04 - to have our player that we can move
00:05 - around enemies won't be spawned and will
00:07 - be able to attack them the target an
00:09 - enemy won't depend on the attack
00:11 - direction so we can choose which enemy
00:12 - we want to attack let's begin
00:17 - [Music]
00:22 - hello and welcome I'm your code monkey
00:24 - and this channel is all about helping
00:25 - you learn how to make your own games
00:27 - with enough tutorials made by a
00:29 - professional indie game developer so if
00:31 - you find the video helpful consider
00:32 - subscribing ok so here's what we want to
00:34 - make over here is my player character
00:36 - and I can move around normally this is
00:39 - using the character controller that I
00:40 - built in a previous video so check it
00:42 - out and as you can see I've set the
00:45 - camera system to phone with the mouse
00:46 - position slightly and by clicking on the
00:49 - mouse I can attack towards the mouse
00:51 - position so I click here attacked it
00:53 - right tected left and so on now I can
00:56 - spawn some enemies and yep there you go
00:58 - there he comes and he comes towards me
01:00 - now he's using the basic enemy AI that I
01:03 - covered in a previous video so
01:05 - essentially the enemy chases me and when
01:07 - he's close enough then he starts
01:08 - attacking and now if I click yep there
01:11 - it is I do my attack towards the enemy
01:13 - that is closest to my attack position
01:14 - when I hit then the enemy gets pushed
01:17 - back and the player moves forward with
01:19 - enough hits then the enemy simply dies
01:21 - now if I do get surrounded so I spawn a
01:25 - whole ton of enemies there yo now I'm
01:27 - surrounded and now since the attack is
01:29 - based on the position towards the mouse
01:31 - I can actually select which enemy I want
01:33 - to target so let's say I want to attack
01:35 - this one I click up there and there you
01:36 - go I'm attacking that one now I want to
01:38 - hit this one and click there and there
01:40 - so I can select individually which enemy
01:42 - do I want to attack so the fine target
01:45 - algorithm is looking for the closest
01:47 - valid target based on the direction
01:48 - towards the mouse and then it attacks
01:50 - that enemy ok so here is our nice and
01:53 - simple melee combat system this is the
01:55 - exact same system that I use in hyper
01:57 - Knights which is the action strategy
01:59 - game that I made which you can play
02:00 - included in the game bundle being able
02:03 - to target individual enemies with an
02:05 - essential part of the game and this is
02:06 - the solution that I used this video is
02:08 - made possible thanks to these awesome
02:10 - supporters go to patreon.com/scishow to
02:13 - code monkey to get some perks and help
02:15 - keep the videos free for everyone
02:16 - alright so the circle let's get to it
02:19 - okay so here's our starting scene I just
02:22 - have the player character standing
02:23 - around doing nothing he's just sitting
02:25 - there playing a simple idle animation if
02:27 - you want to know how my animation system
02:29 - works and check out the mesh video it's
02:31 - own based on dynamically modifying
02:33 - meshes in runtime
02:34 - I can also move them around with some
02:36 - very basic movement okay so in the
02:39 - editor here is the player game object
02:41 - and you can see that it has the
02:43 - character controller script this was
02:45 - fully created from scratch in a previous
02:47 - video so check it out if you haven't
02:49 - seen it yet here is the script and it's
02:52 - actually very simple we just have an
02:54 - update listening to inputs to calculate
02:56 - our move direction vector then we take
02:59 - that move Direction vector and we apply
03:01 - it using our rigid body physics so very
03:03 - simple basic character control and now
03:06 - that we have this the first thing we
03:07 - want is for our character to attack
03:09 - so first let's begin by listening to our
03:11 - mouse click so inside our update let's
03:14 - do a input get mouse button down so when
03:19 - we have a left mouse click just for
03:21 - testing let's do a simple pop-up so just
03:28 - for testing I'm using this function from
03:29 - the code monkey utilities which is
03:31 - always you can grab for free from unity
03:33 - karmic calm so now when we click we
03:35 - should be able to correctly see a pop-up
03:37 - let's test ok here and I click any up
03:40 - there you go we have our attack all
03:42 - right so we're listening for mouse input
03:43 - now that we have this let's calculate
03:45 - the direction towards the mouse that's
03:48 - what we're going to use in order to
03:49 - target our enemies so to come with the
03:51 - Direction first we grab the mouse wrong
03:53 - position so again we can use a function
03:55 - from the utilities to get the mouse
03:57 - wrong position here is the function in
04:00 - case you want to make yourself well it
04:02 - really does this takes the world camera
04:03 - and does a screen twirl point on the
04:05 - mouse position so we grab the vector 3
04:08 - for the mouse position and then in order
04:12 - to complete the vector 3 for our attack
04:14 - direction we just take the mouse
04:16 - position minus this transform position
04:18 - so in ado let's do a pop-up saying our
04:21 - attack direction and let's also
04:26 - normalize our vector all right so let's
04:30 - test ok here we are let's click on the
04:32 - right side and if there you go 1 0 0 so
04:35 - we have a vector to the right now here
04:36 - on the left minus 1 up we have one in
04:39 - there minus 1 and everything in between
04:41 - all right awesome
04:42 - so we correctly capture our mouse clicks
04:45 - and we have the direction towards the
04:46 - mouse
04:47 - which is going to be our attack
04:48 - direction now let's just play the
04:50 - animation so for the animations again
04:52 - I'm using my animation system and I have
04:54 - a simple function here on the character
04:57 - base just play the attack animation it
05:00 - takes in an attack direction and then a
05:03 - delegate for the animation complete and
05:05 - foreknowledge is ignored alright so
05:07 - let's see if it plays the animations so
05:09 - here we are in click and look at that we
05:11 - did correctly capture the mouse input
05:13 - but there's no actual animation so I can
05:17 - still move and click and nothing now the
05:20 - reason for this is actually pretty
05:22 - simple and if you follow the character
05:24 - controller video then you know exactly
05:25 - what's happening so over here is our
05:28 - code so we have our update or handling
05:29 - our movement and then we're handling our
05:31 - attack so the issue that we have here is
05:34 - the same that we had with our rolling
05:35 - code so we start the attack animation
05:38 - but if we say in this state then on the
05:40 - next frame we're going to go through the
05:42 - update again and we're going to cancel
05:44 - the attack animation with our simple
05:45 - move animation so the solution is the
05:47 - same as the dodge roll that we covered
05:49 - in the character controller video so
05:51 - let's go up here in order to define a
05:53 - new state so we have the normal set and
05:58 - the Italian state now we feel to store
06:00 - our current state and by default we
06:04 - start off at normal ok and now in our
06:07 - update we do our simple switch on our
06:09 - state so we have our normal state and
06:19 - during our normal state we play the
06:21 - normal move animation and then we listen
06:23 - to our inputs and we play the attack
06:25 - animation and seen here that when we
06:27 - play the attack that we need to modify
06:29 - our state into our attacking state and
06:32 - here case we are attacking we're not
06:34 - going to do anything and then when the
06:37 - animation completes let's reset the
06:39 - state back into state 0 alright so
06:43 - that's it let's test ok here we are
06:46 - let's put mouse in here and click any of
06:48 - there you go we have our very nice
06:49 - attack alright so it seems like it's
06:52 - working we have the animation playing
06:53 - correctly towards the correct direction
06:55 - however we still have an issue the issue
06:57 - is if we attack whilst moving so move
07:00 - and
07:00 - and there you go the character keeps
07:02 - sliding so move attack and keep sliding
07:05 - in that direction so the reason is
07:07 - because we set up our character
07:08 - controller in order to work with physics
07:09 - so if you look at how we implemented
07:11 - that here on our update we come later
07:14 - our move direction and then on our fixed
07:16 - update we are setting the rigidbody
07:18 - velocity so when we start attacking
07:20 - let's make sure that we put our move
07:22 - Direction back into the vector 3.0 so we
07:25 - stop sliding what's he okay so here our
07:27 - and clicked some works let's move and
07:29 - click any of there you go now he stomps
07:31 - to attack as he should be all right
07:33 - great
07:34 - now we have one final issue which is the
07:36 - rate of our attack so right now we have
07:39 - to wait for the attack animation to
07:40 - fully complete in order to do another
07:42 - attack so naturally this is going to
07:44 - depend on what type of game you're
07:46 - making so maybe if you're making
07:48 - something like there zones where you
07:49 - want every attack to count then this
07:51 - would be a good system however I want
07:53 - the attack to be snappy so I want to
07:55 - attack every time I press the mouse and
07:57 - I want that to work even once in the
07:59 - middle of another attack so let's do
08:01 - that alright so first of all let's clean
08:04 - up this code so let's make a perfect
08:07 - void count our handle attack function
08:09 - now we're going to pass in our attack
08:12 - code in there and we can also comment
08:16 - out the pop-up okay so then here we call
08:19 - our handle attack and let's also clean
08:22 - up the movement all right so everything
08:29 - is still behaving the same we just made
08:31 - our code a bit cleaner so we have a
08:32 - function to handle the attack and one to
08:34 - handle our movement so when the state is
08:36 - normal we are handling the movement and
08:38 - handling the attack and now what we need
08:40 - to do in order to make our attack be
08:41 - very snappy is all we need is to make
08:44 - sure that we handle attack also while
08:45 - attacking so that way we can attack
08:48 - while still in the middle of another
08:49 - attack so I'd see okay here we are
08:53 - moving around and click and there you go
08:55 - now if I spam the clicks I can actually
08:57 - spam the attacks so the attacks are now
08:59 - very snappy so if I go and I attack
09:01 - three times
09:02 - any of there you go just like that right
09:04 - great awesome so again this is going to
09:07 - depend on what game you're making but in
09:09 - this case I really like having some very
09:11 - quick very fast attacks okay
09:13 - so we can capture our clicks and play
09:15 - the attack animation now let's actually
09:17 - hit some enemies now I already set it up
09:20 - to spawn some enemies when I press a
09:21 - button so if I spawn there you go some
09:24 - enemies get spawned and they chase me
09:26 - and they get close and they start
09:28 - attacking me so the way they do that is
09:30 - using the basic enemy AI that I covered
09:32 - in a previous video so they come towards
09:35 - an attack but right now I cannot really
09:37 - attack them so I can click on them but
09:39 - nothing really happens so let's figure
09:41 - out how we're going to attack our
09:42 - enemies now the goal here is to attack
09:44 - the enemy nearest where I'm aiming with
09:46 - Mouse so what we're going to do is come
09:48 - like the position and look for the
09:50 - closest enemy so for example I want to
09:53 - be able to click on this one and attack
09:54 - this enemy and then click down here and
09:56 - tack this enemy so we don't want
09:58 - straight up just the enemy closest to
10:00 - the point position we also want to use
10:02 - the mouse position in order to come like
10:04 - the enemy that we're going to attack so
10:06 - instead of the player position we're
10:07 - going to calculate a position towards
10:09 - the mouse and then look for the enemy
10:10 - causes to that so here on our handle
10:13 - attack let's calculate the effector
10:15 - three for our attack position and now
10:18 - the attack position won't be our
10:20 - transform dot position plus our
10:23 - direction towards the mouse so let's
10:26 - rename this instead of a TAC direction
10:28 - to the mouse direction we're going to
10:31 - make our attack position be based on our
10:33 - current pointer position what is the
10:35 - mouse direction and multiplied by a
10:37 - certain amount so if we set the offset
10:42 - to zero then just going to be the enemy
10:44 - closest to the player and if we set it
10:46 - to more than zero then it's going to be
10:47 - more towards the mouse but if we set it
10:49 - too far then we might actually grab a
10:51 - enemy that is very far from the player
10:53 - so let's use a valley that is about two
10:55 - player size so in this case it's about
10:57 - three okay so let's test this out so
11:00 - when you know it's we debug log on our
11:02 - attack position and now let's test okay
11:06 - here we are let's click on the right
11:08 - side so click now let's pause so that's
11:11 - our attack position now let's create the
11:14 - game object just to be able to visualize
11:16 - it so in here put it in there alright so
11:21 - we place the game object on that
11:22 - position and if there you go it is
11:23 - indeed on the right side so we can
11:25 - probably increase the offset by a bit
11:27 - more
11:27 - but yep it is going towards the
11:29 - direction that we want okay so when we
11:32 - click we want to test for the enemy
11:34 - causes the attack position so now let's
11:37 - check out the code inside of the enemy
11:39 - class so first of all here is the enemy
11:41 - spawn or just basic script added into a
11:43 - game object and we're just testing for
11:46 - an input get key down and we're calling
11:48 - the create function on the enemy class
11:49 - so let's look at it so here is the enemy
11:52 - class and we have the function to create
11:54 - which is insensate say prefab and then
11:57 - we just have a very basic enemy AI
11:59 - script again I covered simple enemy AI
12:01 - so check it out to find out how this
12:03 - works but now that we have the enemy
12:06 - class how we're going to find the
12:08 - closest enemy is first of all we need to
12:10 - actually know where all the enemies are
12:12 - so we need to store a list of all of our
12:14 - enemies now we can define it right here
12:17 - so with the following a private make it
12:19 - static so we only want one list for the
12:22 - enemy class let's make it a list of type
12:24 - enemy so we have our mu list and now
12:30 - here we have our spawner function so
12:32 - when we spawn an enemy let's add that
12:34 - enemy onto our list now if we just do
12:39 - like this we're going to have an error
12:40 - since this enemy list won't be known so
12:43 - before we do that we test if the list is
12:45 - known then we create a new list all
12:49 - right so now when an enemy gebt spawn it
12:51 - gets correctly added onto this list now
12:53 - let's also remove that enemies from the
12:55 - list since we don't want to target that
12:57 - enemies so down here there is a die
13:00 - function that gets called when the enemy
13:02 - dies and in here we just going to list
13:05 - and we can remove and fasten this all
13:07 - right so that's it now we have a list
13:09 - that contains all of the alive enemies
13:11 - inside the world so with this list now
13:14 - we can finally look for the closest
13:16 - enemy so here in our class let's make
13:18 - that function let's make it public
13:21 - static we're going to return an enemy
13:23 - and let's say get closest enemy and
13:28 - we're going to have a parameter for the
13:29 - position and a 440 wrench so we want to
13:35 - find the closest enemy within this range
13:37 - closest to this position
13:39 - and now here let's just do a very basic
13:41 - with searching algorithm alright so here
14:03 - we have a very basic list searching
14:05 - algorithm so we start off with the field
14:07 - for the closest enemy and we start off
14:08 - at no then we second through our entire
14:11 - enemy list the first thing we do is we
14:14 - check if this enemy is within the valid
14:15 - range and if not if he is too far then
14:18 - the enemy is too far so we simply skip
14:20 - onto the next enemy if it is within
14:22 - range and the first thing we do is check
14:24 - if we already have a Const enemy and if
14:26 - we do not have one then this one becomes
14:28 - equalist however if we already have a
14:30 - consist enemy then we want to select
14:32 - which one is closer so we do a simple
14:34 - distance between the position and test
14:36 - enemy and if that one is closer than the
14:38 - position and it causes enemy then this
14:40 - one becomes the new causes and at the
14:42 - end we simply return it so that's it a
14:44 - very basic algorithm and just one more
14:47 - thing which is in here we might have the
14:49 - animal is set to null if we try to
14:51 - attack before we try to spawn one so
14:53 - let's simply test for it so if there is
14:55 - no then we just return not all right
15:01 - there it is now that we have this we can
15:03 - go back into our player so here we
15:06 - already have the mouse position Mouse
15:07 - Direction tack offset and the attack
15:09 - position this is what we're going to use
15:11 - so here we go into the enemy class in
15:14 - order to get the closest enemy now the
15:16 - closest to a certain position so in here
15:18 - we're going to use the attack position
15:20 - that we calculated previously and now
15:22 - for the attack range so we want this to
15:27 - be big enough so we can actually find
15:29 - closest enemy but not too big so that we
15:31 - attack someone that's way too far so
15:33 - let's use this and now this returns our
15:37 - target enemy and now this one can be
15:42 - known so we need to make sure we test
15:44 - for them so if this one is not now
15:47 - then we do have the enemy so then the
15:53 - enemies have a function in order to
15:54 - simply cause some damage alright so this
15:58 - should be working well its test okay so
16:01 - here I am now let's press the button or
16:03 - to spawn and me and yep there he is he's
16:05 - attacking me now if I can look straight
16:07 - on to him yep there yo we correctly
16:09 - attacked him but if I put mouse away and
16:12 - I click there you go now I'm not
16:14 - attacking him so this way we can easily
16:16 - target our enemies so if I click here
16:18 - and don't attack him I gotta click near
16:20 - him in order to actually deal damage
16:22 - after a while yep there you go he dies
16:24 - so now let's spawn more enemy so that
16:27 - I'm completely surrounded
16:28 - alright there it is and now yep I can
16:30 - actually target them so I target that
16:32 - guy
16:32 - then I target this guy and there you go
16:34 - now I can individually hit every single
16:36 - one that I want all right awesome okay
16:40 - so now that we have the basics working
16:41 - let's add some Polish first let's make
16:43 - the enemy get knocked back when he gets
16:45 - hit so here on the enemy class let's
16:48 - look at the damage function so there it
16:50 - is right here as you can see it just
16:52 - wants some bought particles which I
16:54 - covered in a previous video and spawns a
16:56 - damaged pop-up which again also covered
16:58 - in previous video and it has a health
17:00 - system in order to cause some damage
17:01 - which was actually the very first video
17:03 - on this channel so we're already using a
17:05 - whole bunch of interesting effects and
17:07 - now here let's also add a nice nut back
17:09 - now in order to knock back we need to
17:11 - know the direction and in order to
17:13 - calculate the direction we need to know
17:15 - the attacker position so let's receive
17:17 - that in our damage as a parameter so a
17:19 - vector3 for the attacker position and
17:23 - now we can calculate a vector3 for the
17:26 - direction from the attacker so that
17:29 - one's going to be this transform
17:32 - position - the attacker position and we
17:35 - normalize it all right so we have
17:38 - direction from the attacker and we can
17:40 - also use that when spawning our
17:41 - particles instead of a random direction
17:43 - okay and now with this direction we can
17:46 - actually apply some knock-back so i can
17:48 - modify the transform position plus
17:50 - equals the direction from the attacker
17:52 - times a certain hold for the knock back
17:54 - distance
17:57 - all right that's pretty much it now
17:59 - let's go into the Pointer script and in
18:02 - here when we pass in the damage yep
18:03 - let's fast in this transform position
18:05 - and now since the enemy has a knock back
18:09 - and let's also send the player forward
18:10 - so we're going to send them forward on
18:12 - the attack animation position so we just
18:16 - modify the transform position was equals
18:18 - the Mouse Direction multiplied by a
18:21 - certain float for the dash distance all
18:26 - right so that should do it
18:27 - however in here we're still using the
18:29 - mouse Direction which isn't really
18:30 - accurate right now since the position
18:32 - should actually snap onto the target
18:34 - enemy so instead of using this let's
18:37 - make a vector3 for the attack direction
18:40 - and by default the attack direction
18:45 - won't be the same as the mouse direction
18:46 - except when we have an enemy if we have
18:49 - an enemy then the attack Direction
18:50 - becomes the direction towards the actual
18:52 - enemy and then it's this actual attack
18:58 - direction that we use to play the
18:59 - animation and to do our nice little -
19:01 - alright so that should be working so
19:04 - let's test ok here we are let's spawn
19:07 - some enemies and there you go look at
19:09 - that one I know as I punch him yep there
19:11 - you go he gets pushed back and I get
19:13 - pushed forward so just like this it
19:15 - looks very nice so move and hit this guy
19:17 - at this guy now I'm surrounded but I can
19:19 - actually target them and just like that
19:21 - alright so here we have our fully
19:24 - working melee combat system so I have my
19:27 - player that I can move around I can
19:29 - click to attack and the attack goes
19:30 - towards the mouse position then I can
19:33 - spawn some enemies now when they are in
19:35 - range I can click to attack them however
19:38 - if I click away then I do not attack
19:40 - them so I'm using an actual attack
19:42 - position in order to calculate the
19:43 - closest enemy rather than just closest
19:45 - to the player position so they take some
19:48 - damage and after a couple of hits they
19:49 - die yep and if I am completely
19:52 - surrounded then I can use the mouse in
19:54 - order to aim at whatever enemy I
19:56 - actually want to hit so I want to hit
19:57 - that one and I want to hit down and now
20:00 - that one and so on so here is our nice
20:03 - and simple melee combat system this is
20:05 - the exact same system that I use in
20:07 - hyper nights which is the action
20:08 - strategy game that I made
20:10 - that you can play included in the game
20:11 - bundle this video is made possible
20:13 - thanks to these awesome supporters go to
20:16 - patreon.com/scishow to code monkey to
20:18 - get some perks and help keep the videos
20:20 - free for everyone as always you can
20:22 - download the project files in utilities
20:23 - from unity karma comm subscribe to the
20:25 - channel for more unity tutorials post
20:27 - any questions I have in the comments and
20:29 - I'll see you next time
20:30 - [Music]

Cleaned transcript:

in this video we're going to create a simple melee combat system we're going to have our player that we can move around enemies won't be spawned and will be able to attack them the target an enemy won't depend on the attack direction so we can choose which enemy we want to attack let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with enough tutorials made by a professional indie game developer so if you find the video helpful consider subscribing ok so here's what we want to make over here is my player character and I can move around normally this is using the character controller that I built in a previous video so check it out and as you can see I've set the camera system to phone with the mouse position slightly and by clicking on the mouse I can attack towards the mouse position so I click here attacked it right tected left and so on now I can spawn some enemies and yep there you go there he comes and he comes towards me now he's using the basic enemy AI that I covered in a previous video so essentially the enemy chases me and when he's close enough then he starts attacking and now if I click yep there it is I do my attack towards the enemy that is closest to my attack position when I hit then the enemy gets pushed back and the player moves forward with enough hits then the enemy simply dies now if I do get surrounded so I spawn a whole ton of enemies there yo now I'm surrounded and now since the attack is based on the position towards the mouse I can actually select which enemy I want to target so let's say I want to attack this one I click up there and there you go I'm attacking that one now I want to hit this one and click there and there so I can select individually which enemy do I want to attack so the fine target algorithm is looking for the closest valid target based on the direction towards the mouse and then it attacks that enemy ok so here is our nice and simple melee combat system this is the exact same system that I use in hyper Knights which is the action strategy game that I made which you can play included in the game bundle being able to target individual enemies with an essential part of the game and this is the solution that I used this video is made possible thanks to these awesome supporters go to patreon.com/scishow to code monkey to get some perks and help keep the videos free for everyone alright so the circle let's get to it okay so here's our starting scene I just have the player character standing around doing nothing he's just sitting there playing a simple idle animation if you want to know how my animation system works and check out the mesh video it's own based on dynamically modifying meshes in runtime I can also move them around with some very basic movement okay so in the editor here is the player game object and you can see that it has the character controller script this was fully created from scratch in a previous video so check it out if you haven't seen it yet here is the script and it's actually very simple we just have an update listening to inputs to calculate our move direction vector then we take that move Direction vector and we apply it using our rigid body physics so very simple basic character control and now that we have this the first thing we want is for our character to attack so first let's begin by listening to our mouse click so inside our update let's do a input get mouse button down so when we have a left mouse click just for testing let's do a simple popup so just for testing I'm using this function from the code monkey utilities which is always you can grab for free from unity karmic calm so now when we click we should be able to correctly see a popup let's test ok here and I click any up there you go we have our attack all right so we're listening for mouse input now that we have this let's calculate the direction towards the mouse that's what we're going to use in order to target our enemies so to come with the Direction first we grab the mouse wrong position so again we can use a function from the utilities to get the mouse wrong position here is the function in case you want to make yourself well it really does this takes the world camera and does a screen twirl point on the mouse position so we grab the vector 3 for the mouse position and then in order to complete the vector 3 for our attack direction we just take the mouse position minus this transform position so in ado let's do a popup saying our attack direction and let's also normalize our vector all right so let's test ok here we are let's click on the right side and if there you go 1 0 0 so we have a vector to the right now here on the left minus 1 up we have one in there minus 1 and everything in between all right awesome so we correctly capture our mouse clicks and we have the direction towards the mouse which is going to be our attack direction now let's just play the animation so for the animations again I'm using my animation system and I have a simple function here on the character base just play the attack animation it takes in an attack direction and then a delegate for the animation complete and foreknowledge is ignored alright so let's see if it plays the animations so here we are in click and look at that we did correctly capture the mouse input but there's no actual animation so I can still move and click and nothing now the reason for this is actually pretty simple and if you follow the character controller video then you know exactly what's happening so over here is our code so we have our update or handling our movement and then we're handling our attack so the issue that we have here is the same that we had with our rolling code so we start the attack animation but if we say in this state then on the next frame we're going to go through the update again and we're going to cancel the attack animation with our simple move animation so the solution is the same as the dodge roll that we covered in the character controller video so let's go up here in order to define a new state so we have the normal set and the Italian state now we feel to store our current state and by default we start off at normal ok and now in our update we do our simple switch on our state so we have our normal state and during our normal state we play the normal move animation and then we listen to our inputs and we play the attack animation and seen here that when we play the attack that we need to modify our state into our attacking state and here case we are attacking we're not going to do anything and then when the animation completes let's reset the state back into state 0 alright so that's it let's test ok here we are let's put mouse in here and click any of there you go we have our very nice attack alright so it seems like it's working we have the animation playing correctly towards the correct direction however we still have an issue the issue is if we attack whilst moving so move and and there you go the character keeps sliding so move attack and keep sliding in that direction so the reason is because we set up our character controller in order to work with physics so if you look at how we implemented that here on our update we come later our move direction and then on our fixed update we are setting the rigidbody velocity so when we start attacking let's make sure that we put our move Direction back into the vector 3.0 so we stop sliding what's he okay so here our and clicked some works let's move and click any of there you go now he stomps to attack as he should be all right great now we have one final issue which is the rate of our attack so right now we have to wait for the attack animation to fully complete in order to do another attack so naturally this is going to depend on what type of game you're making so maybe if you're making something like there zones where you want every attack to count then this would be a good system however I want the attack to be snappy so I want to attack every time I press the mouse and I want that to work even once in the middle of another attack so let's do that alright so first of all let's clean up this code so let's make a perfect void count our handle attack function now we're going to pass in our attack code in there and we can also comment out the popup okay so then here we call our handle attack and let's also clean up the movement all right so everything is still behaving the same we just made our code a bit cleaner so we have a function to handle the attack and one to handle our movement so when the state is normal we are handling the movement and handling the attack and now what we need to do in order to make our attack be very snappy is all we need is to make sure that we handle attack also while attacking so that way we can attack while still in the middle of another attack so I'd see okay here we are moving around and click and there you go now if I spam the clicks I can actually spam the attacks so the attacks are now very snappy so if I go and I attack three times any of there you go just like that right great awesome so again this is going to depend on what game you're making but in this case I really like having some very quick very fast attacks okay so we can capture our clicks and play the attack animation now let's actually hit some enemies now I already set it up to spawn some enemies when I press a button so if I spawn there you go some enemies get spawned and they chase me and they get close and they start attacking me so the way they do that is using the basic enemy AI that I covered in a previous video so they come towards an attack but right now I cannot really attack them so I can click on them but nothing really happens so let's figure out how we're going to attack our enemies now the goal here is to attack the enemy nearest where I'm aiming with Mouse so what we're going to do is come like the position and look for the closest enemy so for example I want to be able to click on this one and attack this enemy and then click down here and tack this enemy so we don't want straight up just the enemy closest to the point position we also want to use the mouse position in order to come like the enemy that we're going to attack so instead of the player position we're going to calculate a position towards the mouse and then look for the enemy causes to that so here on our handle attack let's calculate the effector three for our attack position and now the attack position won't be our transform dot position plus our direction towards the mouse so let's rename this instead of a TAC direction to the mouse direction we're going to make our attack position be based on our current pointer position what is the mouse direction and multiplied by a certain amount so if we set the offset to zero then just going to be the enemy closest to the player and if we set it to more than zero then it's going to be more towards the mouse but if we set it too far then we might actually grab a enemy that is very far from the player so let's use a valley that is about two player size so in this case it's about three okay so let's test this out so when you know it's we debug log on our attack position and now let's test okay here we are let's click on the right side so click now let's pause so that's our attack position now let's create the game object just to be able to visualize it so in here put it in there alright so we place the game object on that position and if there you go it is indeed on the right side so we can probably increase the offset by a bit more but yep it is going towards the direction that we want okay so when we click we want to test for the enemy causes the attack position so now let's check out the code inside of the enemy class so first of all here is the enemy spawn or just basic script added into a game object and we're just testing for an input get key down and we're calling the create function on the enemy class so let's look at it so here is the enemy class and we have the function to create which is insensate say prefab and then we just have a very basic enemy AI script again I covered simple enemy AI so check it out to find out how this works but now that we have the enemy class how we're going to find the closest enemy is first of all we need to actually know where all the enemies are so we need to store a list of all of our enemies now we can define it right here so with the following a private make it static so we only want one list for the enemy class let's make it a list of type enemy so we have our mu list and now here we have our spawner function so when we spawn an enemy let's add that enemy onto our list now if we just do like this we're going to have an error since this enemy list won't be known so before we do that we test if the list is known then we create a new list all right so now when an enemy gebt spawn it gets correctly added onto this list now let's also remove that enemies from the list since we don't want to target that enemies so down here there is a die function that gets called when the enemy dies and in here we just going to list and we can remove and fasten this all right so that's it now we have a list that contains all of the alive enemies inside the world so with this list now we can finally look for the closest enemy so here in our class let's make that function let's make it public static we're going to return an enemy and let's say get closest enemy and we're going to have a parameter for the position and a 440 wrench so we want to find the closest enemy within this range closest to this position and now here let's just do a very basic with searching algorithm alright so here we have a very basic list searching algorithm so we start off with the field for the closest enemy and we start off at no then we second through our entire enemy list the first thing we do is we check if this enemy is within the valid range and if not if he is too far then the enemy is too far so we simply skip onto the next enemy if it is within range and the first thing we do is check if we already have a Const enemy and if we do not have one then this one becomes equalist however if we already have a consist enemy then we want to select which one is closer so we do a simple distance between the position and test enemy and if that one is closer than the position and it causes enemy then this one becomes the new causes and at the end we simply return it so that's it a very basic algorithm and just one more thing which is in here we might have the animal is set to null if we try to attack before we try to spawn one so let's simply test for it so if there is no then we just return not all right there it is now that we have this we can go back into our player so here we already have the mouse position Mouse Direction tack offset and the attack position this is what we're going to use so here we go into the enemy class in order to get the closest enemy now the closest to a certain position so in here we're going to use the attack position that we calculated previously and now for the attack range so we want this to be big enough so we can actually find closest enemy but not too big so that we attack someone that's way too far so let's use this and now this returns our target enemy and now this one can be known so we need to make sure we test for them so if this one is not now then we do have the enemy so then the enemies have a function in order to simply cause some damage alright so this should be working well its test okay so here I am now let's press the button or to spawn and me and yep there he is he's attacking me now if I can look straight on to him yep there yo we correctly attacked him but if I put mouse away and I click there you go now I'm not attacking him so this way we can easily target our enemies so if I click here and don't attack him I gotta click near him in order to actually deal damage after a while yep there you go he dies so now let's spawn more enemy so that I'm completely surrounded alright there it is and now yep I can actually target them so I target that guy then I target this guy and there you go now I can individually hit every single one that I want all right awesome okay so now that we have the basics working let's add some Polish first let's make the enemy get knocked back when he gets hit so here on the enemy class let's look at the damage function so there it is right here as you can see it just wants some bought particles which I covered in a previous video and spawns a damaged popup which again also covered in previous video and it has a health system in order to cause some damage which was actually the very first video on this channel so we're already using a whole bunch of interesting effects and now here let's also add a nice nut back now in order to knock back we need to know the direction and in order to calculate the direction we need to know the attacker position so let's receive that in our damage as a parameter so a vector3 for the attacker position and now we can calculate a vector3 for the direction from the attacker so that one's going to be this transform position the attacker position and we normalize it all right so we have direction from the attacker and we can also use that when spawning our particles instead of a random direction okay and now with this direction we can actually apply some knockback so i can modify the transform position plus equals the direction from the attacker times a certain hold for the knock back distance all right that's pretty much it now let's go into the Pointer script and in here when we pass in the damage yep let's fast in this transform position and now since the enemy has a knock back and let's also send the player forward so we're going to send them forward on the attack animation position so we just modify the transform position was equals the Mouse Direction multiplied by a certain float for the dash distance all right so that should do it however in here we're still using the mouse Direction which isn't really accurate right now since the position should actually snap onto the target enemy so instead of using this let's make a vector3 for the attack direction and by default the attack direction won't be the same as the mouse direction except when we have an enemy if we have an enemy then the attack Direction becomes the direction towards the actual enemy and then it's this actual attack direction that we use to play the animation and to do our nice little alright so that should be working so let's test ok here we are let's spawn some enemies and there you go look at that one I know as I punch him yep there you go he gets pushed back and I get pushed forward so just like this it looks very nice so move and hit this guy at this guy now I'm surrounded but I can actually target them and just like that alright so here we have our fully working melee combat system so I have my player that I can move around I can click to attack and the attack goes towards the mouse position then I can spawn some enemies now when they are in range I can click to attack them however if I click away then I do not attack them so I'm using an actual attack position in order to calculate the closest enemy rather than just closest to the player position so they take some damage and after a couple of hits they die yep and if I am completely surrounded then I can use the mouse in order to aim at whatever enemy I actually want to hit so I want to hit that one and I want to hit down and now that one and so on so here is our nice and simple melee combat system this is the exact same system that I use in hyper nights which is the action strategy game that I made that you can play included in the game bundle this video is made possible thanks to these awesome supporters go to patreon.com/scishow to code monkey to get some perks and help keep the videos free for everyone as always you can download the project files in utilities from unity karma comm subscribe to the channel for more unity tutorials post any questions I have in the comments and I'll see you next time
