With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - and in this video let's learn about the
00:04 - complete basics of the cloud in general
00:05 - and specifically Microsoft Azure let's
00:08 - learn what it is what is the cloud what
00:10 - it can do for you and a quick editing
00:11 - start guide on making a simple web API
00:14 - which we can then call from a unity game
00:16 - there's timestamps in the video and this
00:18 - video is meant as a base which I won't
00:19 - then build upon in future video
00:21 - tutorials making specific cloud-based
00:23 - mechanics and tools things like in
00:25 - leaderboard the messages in Elden ring
00:27 - the online shared world of death
00:28 - stranding and so on now this whole thing
00:30 - the cloud this is something that I
00:32 - started researching myself I'm curious
00:34 - to play around with some more
00:35 - cloud-based mechanics like those that I
00:37 - mentioned and I really just want to
00:38 - understand the cloud in general so I'm
00:40 - making this video partly to help slowly
00:41 - Define my own knowledge and partly
00:43 - because basically I want to make a video
00:44 - that I wish exists when I started
00:46 - learning cloud can seem very
00:48 - overwhelming and confusing at first but
00:49 - once you learn the main terms it
00:51 - actually becomes much more
00:52 - understandable so first the complete
00:54 - Basics what exactly is the cloud that
00:56 - word sounds so mysterious but really
00:58 - what it means is basically just online
00:59 - servers in the old days if you wanted to
01:02 - build any kind of online infrastructure
01:04 - you had to build everything yourself so
01:06 - you had to find a data center rent some
01:08 - physical space you had to buy the
01:09 - hardware in some of the software mention
01:12 - all of the maintenance networking and
01:13 - keep it all running smoothly that's a
01:15 - ton of work even if all you wanted to do
01:17 - was just make a simple online
01:18 - leaderboard whereas nowadays with the
01:20 - cloud you can choose to let someone else
01:22 - handle all of that works and you just
01:23 - focus on the parts that you really want
01:25 - to do meaning just focus on writing
01:27 - logic and making interesting systems
01:28 - instead of having to deal with all the
01:30 - physical hardware and all that
01:31 - specifically for game developers and
01:34 - even more specifically for indie game
01:35 - developers you probably just want to
01:37 - deal with writing the logic and not have
01:38 - to worry about anything physical so for
01:40 - that use case the cloud is perfect
01:42 - something also pretty crucial about the
01:44 - cloud is generally speaking the services
01:45 - are in a pay-per-use basis so if your
01:48 - user is small if you have a small indie
01:50 - game they use the cloud in some small
01:51 - way in that case chances are it won't be
01:54 - completely free or just cause an
01:55 - extremely low amount in the order of
01:57 - cents to under 10 bucks a month so as
01:59 - developer the ability to add interesting
02:01 - game mechanics without a huge cost that
02:03 - is a huge Plus
02:05 - that's a very high level overview of the
02:07 - cloud and Cloud related things now let's
02:09 - look at Azure specifically and do a
02:10 - quick getting starter guide you can
02:12 - create a commonly free account and sign
02:14 - in they give you a certain amount of
02:16 - free credit that you can use with your
02:17 - free account so this is great for
02:19 - testing out everything
02:20 - and as soon as you log in it can
02:22 - definitely look quite a bit scary you
02:24 - have so many options so many services so
02:26 - many things it's really quite
02:28 - overwhelming for me I've already spent
02:30 - many hours learning all of this and I
02:32 - still have no idea what so many of these
02:34 - resources so many of these Services what
02:35 - they do so over here let's stick with
02:37 - the absolute basics
02:39 - but before that it helps to understand
02:40 - how Azure works on a top-down View and
02:42 - learn some terms you have your Azure
02:45 - Microsoft account then on that account
02:47 - you can have multiple subscriptions this
02:49 - is how you handle invoicing and payment
02:51 - so for more complex use case you can
02:53 - have different invoices for different
02:55 - departments but for a small Indie Dev
02:57 - chances are you have just one
02:58 - subscription then for each of those you
03:00 - can have one or more resource groups and
03:03 - each Resource Group is composed of
03:05 - resources the resources are the actual
03:07 - services that Azure provides for example
03:09 - web API is a resource the SQL database
03:12 - is a resource as is a serverless
03:14 - function virtual machine and so on all
03:16 - of those are various types of resources
03:18 - with resource groups you simply group
03:20 - them so for example you'd have a
03:22 - resource Group for an online leaderboard
03:24 - and inside that Resource Group you'd
03:25 - have a web API resource and a database
03:28 - resource then one Resource Group is
03:30 - assigned to a subscription for billing
03:31 - and all of that is inside your Azure
03:33 - account so that's a basic overview of
03:35 - how it works in the main terms whenever
03:37 - you create a new resource meaning
03:39 - whenever you create something like a web
03:41 - API you select a subscription then the
03:43 - resource Group where you want that
03:44 - resource to be created and just create
03:46 - so now that we know the basic terms
03:48 - let's actually start by building
03:49 - something over here on the Azure
03:51 - dashboard let's click on the button to
03:53 - create a resource then again here you
03:55 - see dozens or even hundreds of resources
03:57 - that exist again don't feel overwhelmed
03:59 - let's start off simple let's find a
04:01 - regular simple API app so you can either
04:04 - find them over here on the side so for
04:05 - an API app this would be under the
04:07 - compute however you also have a nice
04:09 - search bar up here so let's search for
04:11 - API app
04:12 - let's click on enter and up here we do
04:15 - see right away the API app made by
04:16 - Microsoft
04:18 - so let's select it this one as it says
04:20 - here it's a standard restful API this is
04:23 - the example of what we want so fastest
04:24 - way to build in the point and so on so
04:26 - exactly what we want so let's go ahead
04:28 - select this and click on create
04:30 - then over here it asks you for a bunch
04:32 - of things since we already covered all
04:34 - the basic terms this should only be
04:35 - easily understandable so first one is
04:37 - the subscription
04:38 - so just go ahead and select the free
04:40 - subscription then it's the resource
04:42 - Group this one you can use some group
04:44 - you already have or you can create a new
04:46 - one so let's do that let's call this my
04:49 - first web API
04:51 - next is the name this is going to be the
04:54 - hostname we're going to access the web
04:55 - API this one has to be a unique mobile
04:57 - name in the authority of azure so over
05:00 - here on let's say my first web API Code
05:03 - Monkey
05:04 - and yep that's available okay next up we
05:07 - want to publish with code we want to use
05:09 - that rather than using some pre-made
05:11 - Docker container so let's go with code
05:12 - next up for the runtime stack and here
05:15 - you can see that Azure actually supports
05:17 - a multitude of languages so you can see
05:19 - net Java node.js PHP python Ruby and so
05:23 - on in my case with this being a Unity
05:25 - c-sharp Channel I want to use.net and
05:27 - again another thing which is a bit
05:28 - confusing are the net versions
05:31 - so a quick explainer on those first you
05:33 - had the.net framework that was meant to
05:36 - run on Windows then after that to make
05:38 - the code multi-platform they created
05:40 - something called.net core with that you
05:43 - could run c-sharp code on Linux or Mac
05:45 - or so on and then after that since it
05:48 - was a bit confusing to have two
05:49 - separate.net packages they merge them
05:51 - both so now it's called just.net so over
05:54 - here the one that we want is not.net
05:55 - core not asp.net but let's go with net
05:58 - 6. next up for the operating system for
06:01 - this one choose the same one that you
06:02 - use to write the code so in my case I'm
06:04 - working on windows so let's select in
06:05 - Windows then for the region this is just
06:08 - for testing so select the place close to
06:10 - you so in my case I'm going to go with
06:11 - West Europe then down here the app
06:14 - service plan this is the machine specs
06:16 - and how much it costs right now since
06:18 - we're using the free subscription plan
06:20 - we just have an option for a free
06:21 - machine but if you upgrade your
06:23 - subscription then over here you'd see a
06:25 - button where you'd be able to click to
06:26 - see all of the available machines
06:28 - there's tons of options to choose from
06:30 - depending on how demanding your web API
06:32 - is for our case we just want to do some
06:34 - basic testing so the free machine is
06:35 - more than perfect okay everything is set
06:37 - up let's click on next then over here
06:39 - you can integrate with GitHub in various
06:41 - ways again for our simple example we
06:43 - don't want any of this so let's go on
06:45 - next then for networking we also don't
06:47 - need this next for monitoring let's
06:49 - leave the defaults application inside
06:51 - this is one way that you can get data
06:53 - and logs from your application
06:55 - so let's leave it enabled and click on
06:57 - next then tags again nothing we need
06:59 - right now let's continue okay so here we
07:02 - see what we want to create we want to
07:04 - make an API app under our standard
07:06 - subscription we created the new group
07:08 - for it we gave it this name we're going
07:10 - to publish using Code we're going to
07:12 - run.net6
07:14 - it's going to be located in West Europe
07:15 - running Windows and on a free machine
07:18 - okay everything is correct so let's
07:19 - click on create alright as you can see
07:21 - the deployment is in progress so let's
07:23 - just wait a bit
07:27 - and yep the appointment has completed so
07:29 - let's go to Resource all right here's
07:31 - our resource for our web API and just
07:33 - with this our web API is actually
07:34 - already running over here we can see the
07:37 - URL so if we click on this we can
07:38 - already see it and yep here it is so
07:41 - here is the web API default page all
07:43 - right awesome so far so good now of
07:45 - course we want to upload some custom
07:47 - code to our web API so let's do that
07:49 - back on the API dashboard over here on
07:51 - the left side we've got a really useful
07:53 - quick start so let's go ahead and follow
07:55 - this again I want to write in C sharp so
07:58 - let's go with asp.net it opens up this
08:01 - page where you can choose a development
08:02 - environment so in my case I'm going to
08:03 - be using visual studio then what we want
08:05 - is to pretty much follow all of this
08:07 - guide which is actually pretty simple
08:08 - although technically I should say that
08:10 - this guide is for making a web app as
08:12 - opposed to a web API the difference is
08:14 - that a web app is kind of like a regular
08:16 - web page meaning it's something meant
08:18 - for human Serene with images and text
08:20 - and so on whereas we want a web API so
08:23 - something that is meant for programs to
08:25 - interact with and not really humans so
08:26 - we want to be able to interact with it
08:28 - from ENT that said basically what we're
08:30 - going to do things slightly different
08:31 - from this guide but the basics of
08:33 - connecting and applying to Azure are the
08:35 - same so let's actually follow this to do
08:37 - that we're going to be using visual
08:38 - studio 22 but before doing that if you
08:42 - don't have it go ahead and install it
08:43 - the community version is commonly free
08:45 - and if you already have it installed
08:47 - then before opening up visual studio
08:48 - make sure you have the required modules
08:50 - installed you can run the visual studio
08:52 - installer and this will show you the
08:54 - versions that you have installed
08:56 - and if you already have something
08:57 - installed go ahead and click on modify
08:59 - and for following what we're going to do
09:01 - here make sure you have at least these
09:02 - two modules installed so Azure
09:04 - development and asp.net web development
09:06 - so make sure both those are installed
09:08 - then go ahead and open up visual studio
09:10 - and over here let's create a new project
09:13 - for the template let's choose over here
09:15 - the asp.net core web API again web API
09:19 - not the core web app let's go with the
09:21 - core web API go ahead click on next
09:24 - then let's give it a name like my first
09:26 - web API
09:28 - go ahead choose on location click on
09:30 - next
09:30 - then choose the framework again choose
09:32 - the same one that we picked previously
09:34 - so in this case.net6 yep for
09:37 - authentication let's use non to keep
09:38 - things simple but to use https and
09:41 - everything else leave with defaults okay
09:43 - let's click on create all right here is
09:46 - our basic web API we have a few files
09:49 - created by default so the entry point is
09:51 - over here the program
09:52 - this has some controllers a bunch of
09:54 - things but you don't need to worry about
09:55 - this one then it also has a weather
09:58 - forecast this a simple class with some
10:00 - data and the weather forecast controller
10:02 - which only does some things with that we
10:05 - can just go ahead and hit on play to
10:06 - test out this default template so up top
10:09 - click on the play button now when you do
10:11 - you might see some warnings about SSL
10:13 - and certificates
10:15 - so go ahead and accept the self-signed
10:17 - certificate then even after doing that
10:19 - you might still see an error if so go
10:21 - ahead and restart Visual Studio
10:23 - then after that you should be able to
10:24 - hit play and it should work although you
10:26 - might see another warning this time from
10:28 - your browser again just make sure you
10:30 - are on localhost which is where you're
10:31 - supposed to be so just go ahead click on
10:33 - advanced in this case we do trust our
10:35 - own machines so let's accept the risk
10:37 - and continue alright so here we have our
10:39 - localhost page working this is using
10:42 - swagger which is a really nice tool for
10:44 - testing out apis and in our case by
10:46 - default Visual Studio creates a sample
10:48 - with a weather forecast API just like we
10:50 - saw so there's this endpoint called
10:52 - weather forecast this one as you can see
10:54 - is a get endpoint and you can see down
10:57 - here an example of what it returns it
10:59 - returns textile plane and inside
11:00 - contains all this data which happens to
11:03 - be our weather forecast and we can even
11:05 - try it out so let's click on try it out
11:07 - this one takes no parameters so let's
11:09 - just execute
11:10 - and up here we did a kernel request on
11:12 - our localhost URL and here we've got the
11:14 - response body alright so it worked we
11:17 - did a simple get request and we got a
11:19 - return value now for on testing let's
11:21 - create a brand new API endpoint
11:23 - you can go ahead and close this window
11:25 - then over here on the installation
11:26 - Explorer let's create a brand new
11:28 - controller so let's right click inside
11:29 - the controllers folder let's add a new
11:31 - controller over here for the template
11:33 - let's go into API and let's choose this
11:36 - one API controller with read and write
11:38 - actions let's go ahead click on ADD
11:40 - then give it a name let's come with
11:42 - testing controller
11:44 - make sure you end the name with
11:45 - controller so in our case we're going to
11:47 - create an API endpoint called just
11:49 - testing but to make sure you add
11:51 - controller to the name make sure there
11:52 - are no typos so go ahead click on ADD
11:55 - and if here it is this is the default
11:57 - template basically this creates an
11:59 - endpoint under API controller these
12:02 - rectangle brackets that you see here
12:03 - this is going to basically interpret
12:05 - this so instead of being under API and
12:07 - then literally spelling controller it's
12:09 - going to be under API and then just
12:10 - testing so we have the main controller
12:13 - class and then over here we've got
12:14 - various things we've got a get under the
12:17 - endpoint API testing
12:18 - then we have another get but this one is
12:20 - under API testing and then some integer
12:23 - value
12:24 - this is one way to pass parameters into
12:26 - your get requests then we also got a
12:28 - post a put and a delete if we just test
12:31 - this right now like this so let's go
12:33 - ahead click on test and appear in
12:35 - Swagger we already see our new endpoints
12:37 - we've got to delete put get post and
12:39 - another get okay now let's simplify our
12:42 - code to make our testing a bit simpler
12:44 - so let's remove all these endpoints and
12:46 - leave just a very simple yet okay just
12:48 - like this and now let's create a custom
12:50 - data type that we want to return
12:53 - we can Define it in a separate file just
12:55 - like we have here for the weather
12:56 - forecast or in this case we're testing
12:58 - let's use it just on this phone it's
12:59 - only two here a public class called
13:01 - testing
13:03 - and let's just add a simple string
13:05 - message field so a public string call it
13:07 - message
13:08 - let's make it a property with a get and
13:10 - a set okay just like this and visual
13:14 - studio doesn't like it when it can be
13:15 - knowable so let's make this a novel
13:17 - Strangers Like This okay so a super
13:19 - simple class with just one field message
13:21 - now over here on the testing controller
13:24 - instead of returning an ineum of strings
13:27 - let's return an object of type testing
13:29 - then over here let's return let's create
13:31 - a new testing
13:33 - and for the message and let's say
13:34 - something this is my message
13:37 - all right that's it so now our get is
13:39 - going to return an object of this time
13:40 - with this value let's see so let's test
13:43 - it out again locally so let's click on
13:44 - the play button so here we see we still
13:47 - have the weather forecast and then the
13:48 - testing so let's go into testing let's
13:50 - go into API testing as you can see the
13:53 - example schema is going to return a
13:55 - string Under the field message
13:57 - so let's try it out let's execute there
13:59 - are no parameters
14:00 - any up over here everything worked
14:03 - so we did a request on the endpoint API
14:05 - testing and the responsibility is a
14:08 - message containing this is my message
14:09 - all right Awesome everything works now
14:12 - finally for the next step let's do
14:14 - connecting and Publishing to an Azure
14:15 - resource and before publishing let's
14:18 - just clean up our code so let's get rid
14:19 - of the weather forecast controller just
14:21 - delete that one and the weather forecast
14:22 - and like that one okay so we've got a
14:25 - very simple we just have our program.cs
14:27 - and then the testingcontroller.cs now
14:29 - for publishing over here on the solution
14:31 - Explorer let's right click on the
14:34 - project so not a solution don't right
14:35 - click on that one right click on the
14:37 - project itself then over here you see a
14:39 - button for publish and for our Target
14:41 - obviously let's go with Azure so let's
14:43 - click on next we made a Windows service
14:45 - so again select that one now make sure
14:48 - you are signed in on the exact same
14:49 - account that you use for Azure then over
14:52 - here you should be able to see your
14:53 - Azure subscription and then over here it
14:55 - should automatically unload all of your
14:57 - app services so let's select the one
14:59 - that we made the my first web API let's
15:01 - open it and yep here we have my first
15:03 - web API Code Monkey so let's select that
15:06 - one and click on next then we've got an
15:08 - option for API management this is an
15:10 - Azure tool for essentially acting like a
15:12 - middleman so you can have API stored in
15:14 - various places then you can use the API
15:16 - management dashboard to decide which one
15:18 - should receive the requests but again
15:20 - that's for a more advanced use case so
15:22 - right now let's just skip this step and
15:24 - click on finish
15:26 - all right so with that the publish
15:28 - profile has been created let's close
15:29 - this and over here we have everything
15:31 - ready for publishing so let's go ahead
15:33 - and click on the nice publish button
15:35 - everything is running the building is
15:37 - starting and it's uploading so let's
15:38 - wait a bit
15:43 - and if that's it our web API has been
15:45 - successfully published we can go to our
15:48 - web API dashboard and over here we can
15:49 - already see some requests and it can
15:51 - also again go to the same URL and if the
15:54 - URL worked although right now it's
15:56 - showing a empty white page
15:58 - the reason for that is because the
15:59 - default index page was deleted so we
16:01 - uploaded just our web API and for using
16:04 - our get endpoint it's super simple so
16:05 - let's just go into our URL and let you
16:08 - send our endpoint so that was API slash
16:10 - testing so if we go to this
16:13 - and if there is here we have our message
16:14 - this is my message all right Awesome
16:16 - everything worked now let's just make a
16:19 - quick change to see if everything is
16:20 - indeed working
16:21 - so back in the test and controller let's
16:23 - give it a different message
16:27 - all right new message the file is saved
16:29 - so again let's go into the publish Tab
16:31 - and now we don't even have to go through
16:33 - that setup we just need to click on the
16:34 - publish button and if everything was
16:37 - published successfully then over here if
16:39 - we refresh this page if there you go
16:41 - here we got our really nice new message
16:43 - alright awesome so with this we have our
16:46 - API project working in Visual Studio
16:48 - and we can easily make changes upload it
16:51 - publish it and have it working on azure
16:53 - and now just for fun over here I have a
16:55 - demo ENT project
16:57 - for accessing our web API is really the
16:59 - same as any other HTTP request I covered
17:02 - that process in detail in another video
17:04 - over here I have the class made in that
17:06 - video although also one important thing
17:08 - is in that video I was focused on
17:10 - showcasing the get so here in this class
17:12 - I upgraded it to also support posts to
17:14 - be able to send some data and
17:16 - importantly be able to send some Json
17:17 - data this entire class is included in
17:19 - the project files for this video if you
17:21 - want to look at it so with that I can do
17:23 - a request to the web API so just so we
17:26 - get request and use the URL that we just
17:28 - made so on the Azure website slash API
17:31 - testing we have our URL then if it's an
17:33 - error it's going to log an error if not
17:35 - we're going to see our nice server
17:36 - response okay so let's run this
17:39 - any up here in the game we do see the
17:41 - server response and our really nice
17:42 - message okay great now over here I have
17:46 - a more complex example I have a game
17:48 - with a mechanic kind of like dark souls
17:49 - or element ring so other players have
17:52 - placed down messages in the world now I
17:54 - can interact with the web API to get the
17:56 - nearby messages
17:57 - and up here we can see the response from
17:59 - the server we get a whole bunch of Json
18:02 - with some positions some messages some
18:03 - rotation and so on
18:05 - then with that data I just spawned some
18:07 - of these objects
18:08 - and if I approach yep I can see the
18:10 - message that that player posted so one
18:12 - message there one message there another
18:13 - one in there
18:15 - then I also have the ability to add more
18:17 - messages so I can go somewhere press a
18:19 - button and here it is a nice input
18:21 - window I made this window in a previous
18:23 - video tutorial
18:24 - so over here I can type my message
18:27 - I can press ok
18:28 - and yep there's my brand new message
18:31 - so I've got this message in those two
18:33 - now I can quit the game
18:35 - and then play again as if I were a
18:37 - completely different player
18:38 - and amp here are all the messages
18:40 - including the one that I just made
18:41 - alright awesome now for the code that is
18:44 - making this work here I have a function
18:47 - which shows my input window
18:49 - then when the player presses okay it
18:51 - creates a new structure of this type
18:53 - that I created so it has the position
18:55 - rotation and the text
18:57 - then it does a web request this time
18:59 - using post and using Json it does that
19:01 - into my API endpoint
19:03 - it sends the message system save single
19:06 - converted into Json and then simply has
19:08 - a response which contains all of the
19:10 - other messages then over here on the web
19:12 - API side
19:14 - for this one I have an add message
19:15 - controller so this is the endpoint the
19:17 - same one that I'm using I've got a
19:19 - simple post that is grabbing the message
19:21 - grabbing this same object type grabbing
19:24 - from the body it adds it to the list of
19:26 - messages now in this simple example this
19:29 - is just stored in memory so this not in
19:31 - any kind of permanent storage this is
19:33 - just memory again just keep it simple
19:35 - just for this demo
19:36 - so it adds the message that it receives
19:38 - adds it to all the other messages
19:40 - and then just Returns the Json with all
19:42 - of the messages then on Unity the code
19:44 - receives the response and loads the save
19:46 - Json
19:48 - then here just grab the message system
19:49 - save signals through all of them and
19:51 - spawns a prefab so here it is a really
19:53 - nice and simple messaging system just
19:55 - like Dark Souls just like London ring
19:57 - all of it made super simple thanks to
19:59 - the usage of the cloud
20:00 - alright so with this everything works
20:02 - this is the absolute Basics we created
20:05 - the service on the cloud and we access
20:06 - it from anywhere including from inside
20:08 - Unity
20:09 - now everything that you really want to
20:11 - build is really just expanding upon this
20:13 - I'm actually working on specific
20:15 - tutorials based on just this some more
20:17 - advanced systems using Azure functions
20:19 - rather than a web API and combining them
20:21 - with storage and so on definitely stay
20:23 - tuned for those interesting tutorials
20:24 - and if you want to learn more about
20:26 - cloud and Azure specifically then I can
20:28 - highly recommend the Microsoft learn
20:30 - site
20:31 - I've gone through a bunch of their
20:32 - learning paths and I learned quite a lot
20:34 - on the alert side you can just go over
20:36 - here on their products like Azure then
20:39 - down here for types you can select the
20:41 - entire learning path or if you want just
20:42 - go with a bunch of modules then here you
20:44 - can see tons of guided paths teaching
20:46 - you everything from a general overview
20:48 - of the cloud to some very more specific
20:50 - use case so if you want to learn more
20:52 - definitely check out the site
20:53 - and with that now you know the base of
20:55 - the cloud how to create a simple web API
20:57 - publish it to Azure and interact with it
20:59 - from a unity game alright hope that's
21:02 - useful check out these videos to learn
21:03 - some more thanks to these awesome
21:05 - patreon supporters for making these
21:07 - videos possible thank you for watching
21:09 - and I'll see you next time
21:14 - [Music]

Cleaned transcript:

hello and welcome I'm your code monkey and in this video let's learn about the complete basics of the cloud in general and specifically Microsoft Azure let's learn what it is what is the cloud what it can do for you and a quick editing start guide on making a simple web API which we can then call from a unity game there's timestamps in the video and this video is meant as a base which I won't then build upon in future video tutorials making specific cloudbased mechanics and tools things like in leaderboard the messages in Elden ring the online shared world of death stranding and so on now this whole thing the cloud this is something that I started researching myself I'm curious to play around with some more cloudbased mechanics like those that I mentioned and I really just want to understand the cloud in general so I'm making this video partly to help slowly Define my own knowledge and partly because basically I want to make a video that I wish exists when I started learning cloud can seem very overwhelming and confusing at first but once you learn the main terms it actually becomes much more understandable so first the complete Basics what exactly is the cloud that word sounds so mysterious but really what it means is basically just online servers in the old days if you wanted to build any kind of online infrastructure you had to build everything yourself so you had to find a data center rent some physical space you had to buy the hardware in some of the software mention all of the maintenance networking and keep it all running smoothly that's a ton of work even if all you wanted to do was just make a simple online leaderboard whereas nowadays with the cloud you can choose to let someone else handle all of that works and you just focus on the parts that you really want to do meaning just focus on writing logic and making interesting systems instead of having to deal with all the physical hardware and all that specifically for game developers and even more specifically for indie game developers you probably just want to deal with writing the logic and not have to worry about anything physical so for that use case the cloud is perfect something also pretty crucial about the cloud is generally speaking the services are in a payperuse basis so if your user is small if you have a small indie game they use the cloud in some small way in that case chances are it won't be completely free or just cause an extremely low amount in the order of cents to under 10 bucks a month so as developer the ability to add interesting game mechanics without a huge cost that is a huge Plus that's a very high level overview of the cloud and Cloud related things now let's look at Azure specifically and do a quick getting starter guide you can create a commonly free account and sign in they give you a certain amount of free credit that you can use with your free account so this is great for testing out everything and as soon as you log in it can definitely look quite a bit scary you have so many options so many services so many things it's really quite overwhelming for me I've already spent many hours learning all of this and I still have no idea what so many of these resources so many of these Services what they do so over here let's stick with the absolute basics but before that it helps to understand how Azure works on a topdown View and learn some terms you have your Azure Microsoft account then on that account you can have multiple subscriptions this is how you handle invoicing and payment so for more complex use case you can have different invoices for different departments but for a small Indie Dev chances are you have just one subscription then for each of those you can have one or more resource groups and each Resource Group is composed of resources the resources are the actual services that Azure provides for example web API is a resource the SQL database is a resource as is a serverless function virtual machine and so on all of those are various types of resources with resource groups you simply group them so for example you'd have a resource Group for an online leaderboard and inside that Resource Group you'd have a web API resource and a database resource then one Resource Group is assigned to a subscription for billing and all of that is inside your Azure account so that's a basic overview of how it works in the main terms whenever you create a new resource meaning whenever you create something like a web API you select a subscription then the resource Group where you want that resource to be created and just create so now that we know the basic terms let's actually start by building something over here on the Azure dashboard let's click on the button to create a resource then again here you see dozens or even hundreds of resources that exist again don't feel overwhelmed let's start off simple let's find a regular simple API app so you can either find them over here on the side so for an API app this would be under the compute however you also have a nice search bar up here so let's search for API app let's click on enter and up here we do see right away the API app made by Microsoft so let's select it this one as it says here it's a standard restful API this is the example of what we want so fastest way to build in the point and so on so exactly what we want so let's go ahead select this and click on create then over here it asks you for a bunch of things since we already covered all the basic terms this should only be easily understandable so first one is the subscription so just go ahead and select the free subscription then it's the resource Group this one you can use some group you already have or you can create a new one so let's do that let's call this my first web API next is the name this is going to be the hostname we're going to access the web API this one has to be a unique mobile name in the authority of azure so over here on let's say my first web API Code Monkey and yep that's available okay next up we want to publish with code we want to use that rather than using some premade Docker container so let's go with code next up for the runtime stack and here you can see that Azure actually supports a multitude of languages so you can see net Java node.js PHP python Ruby and so on in my case with this being a Unity csharp Channel I want to use.net and again another thing which is a bit confusing are the net versions so a quick explainer on those first you had the.net framework that was meant to run on Windows then after that to make the code multiplatform they created something called.net core with that you could run csharp code on Linux or Mac or so on and then after that since it was a bit confusing to have two separate.net packages they merge them both so now it's called just.net so over here the one that we want is not.net core not asp.net but let's go with net 6. next up for the operating system for this one choose the same one that you use to write the code so in my case I'm working on windows so let's select in Windows then for the region this is just for testing so select the place close to you so in my case I'm going to go with West Europe then down here the app service plan this is the machine specs and how much it costs right now since we're using the free subscription plan we just have an option for a free machine but if you upgrade your subscription then over here you'd see a button where you'd be able to click to see all of the available machines there's tons of options to choose from depending on how demanding your web API is for our case we just want to do some basic testing so the free machine is more than perfect okay everything is set up let's click on next then over here you can integrate with GitHub in various ways again for our simple example we don't want any of this so let's go on next then for networking we also don't need this next for monitoring let's leave the defaults application inside this is one way that you can get data and logs from your application so let's leave it enabled and click on next then tags again nothing we need right now let's continue okay so here we see what we want to create we want to make an API app under our standard subscription we created the new group for it we gave it this name we're going to publish using Code we're going to run.net6 it's going to be located in West Europe running Windows and on a free machine okay everything is correct so let's click on create alright as you can see the deployment is in progress so let's just wait a bit and yep the appointment has completed so let's go to Resource all right here's our resource for our web API and just with this our web API is actually already running over here we can see the URL so if we click on this we can already see it and yep here it is so here is the web API default page all right awesome so far so good now of course we want to upload some custom code to our web API so let's do that back on the API dashboard over here on the left side we've got a really useful quick start so let's go ahead and follow this again I want to write in C sharp so let's go with asp.net it opens up this page where you can choose a development environment so in my case I'm going to be using visual studio then what we want is to pretty much follow all of this guide which is actually pretty simple although technically I should say that this guide is for making a web app as opposed to a web API the difference is that a web app is kind of like a regular web page meaning it's something meant for human Serene with images and text and so on whereas we want a web API so something that is meant for programs to interact with and not really humans so we want to be able to interact with it from ENT that said basically what we're going to do things slightly different from this guide but the basics of connecting and applying to Azure are the same so let's actually follow this to do that we're going to be using visual studio 22 but before doing that if you don't have it go ahead and install it the community version is commonly free and if you already have it installed then before opening up visual studio make sure you have the required modules installed you can run the visual studio installer and this will show you the versions that you have installed and if you already have something installed go ahead and click on modify and for following what we're going to do here make sure you have at least these two modules installed so Azure development and asp.net web development so make sure both those are installed then go ahead and open up visual studio and over here let's create a new project for the template let's choose over here the asp.net core web API again web API not the core web app let's go with the core web API go ahead click on next then let's give it a name like my first web API go ahead choose on location click on next then choose the framework again choose the same one that we picked previously so in this case.net6 yep for authentication let's use non to keep things simple but to use https and everything else leave with defaults okay let's click on create all right here is our basic web API we have a few files created by default so the entry point is over here the program this has some controllers a bunch of things but you don't need to worry about this one then it also has a weather forecast this a simple class with some data and the weather forecast controller which only does some things with that we can just go ahead and hit on play to test out this default template so up top click on the play button now when you do you might see some warnings about SSL and certificates so go ahead and accept the selfsigned certificate then even after doing that you might still see an error if so go ahead and restart Visual Studio then after that you should be able to hit play and it should work although you might see another warning this time from your browser again just make sure you are on localhost which is where you're supposed to be so just go ahead click on advanced in this case we do trust our own machines so let's accept the risk and continue alright so here we have our localhost page working this is using swagger which is a really nice tool for testing out apis and in our case by default Visual Studio creates a sample with a weather forecast API just like we saw so there's this endpoint called weather forecast this one as you can see is a get endpoint and you can see down here an example of what it returns it returns textile plane and inside contains all this data which happens to be our weather forecast and we can even try it out so let's click on try it out this one takes no parameters so let's just execute and up here we did a kernel request on our localhost URL and here we've got the response body alright so it worked we did a simple get request and we got a return value now for on testing let's create a brand new API endpoint you can go ahead and close this window then over here on the installation Explorer let's create a brand new controller so let's right click inside the controllers folder let's add a new controller over here for the template let's go into API and let's choose this one API controller with read and write actions let's go ahead click on ADD then give it a name let's come with testing controller make sure you end the name with controller so in our case we're going to create an API endpoint called just testing but to make sure you add controller to the name make sure there are no typos so go ahead click on ADD and if here it is this is the default template basically this creates an endpoint under API controller these rectangle brackets that you see here this is going to basically interpret this so instead of being under API and then literally spelling controller it's going to be under API and then just testing so we have the main controller class and then over here we've got various things we've got a get under the endpoint API testing then we have another get but this one is under API testing and then some integer value this is one way to pass parameters into your get requests then we also got a post a put and a delete if we just test this right now like this so let's go ahead click on test and appear in Swagger we already see our new endpoints we've got to delete put get post and another get okay now let's simplify our code to make our testing a bit simpler so let's remove all these endpoints and leave just a very simple yet okay just like this and now let's create a custom data type that we want to return we can Define it in a separate file just like we have here for the weather forecast or in this case we're testing let's use it just on this phone it's only two here a public class called testing and let's just add a simple string message field so a public string call it message let's make it a property with a get and a set okay just like this and visual studio doesn't like it when it can be knowable so let's make this a novel Strangers Like This okay so a super simple class with just one field message now over here on the testing controller instead of returning an ineum of strings let's return an object of type testing then over here let's return let's create a new testing and for the message and let's say something this is my message all right that's it so now our get is going to return an object of this time with this value let's see so let's test it out again locally so let's click on the play button so here we see we still have the weather forecast and then the testing so let's go into testing let's go into API testing as you can see the example schema is going to return a string Under the field message so let's try it out let's execute there are no parameters any up over here everything worked so we did a request on the endpoint API testing and the responsibility is a message containing this is my message all right Awesome everything works now finally for the next step let's do connecting and Publishing to an Azure resource and before publishing let's just clean up our code so let's get rid of the weather forecast controller just delete that one and the weather forecast and like that one okay so we've got a very simple we just have our program.cs and then the testingcontroller.cs now for publishing over here on the solution Explorer let's right click on the project so not a solution don't right click on that one right click on the project itself then over here you see a button for publish and for our Target obviously let's go with Azure so let's click on next we made a Windows service so again select that one now make sure you are signed in on the exact same account that you use for Azure then over here you should be able to see your Azure subscription and then over here it should automatically unload all of your app services so let's select the one that we made the my first web API let's open it and yep here we have my first web API Code Monkey so let's select that one and click on next then we've got an option for API management this is an Azure tool for essentially acting like a middleman so you can have API stored in various places then you can use the API management dashboard to decide which one should receive the requests but again that's for a more advanced use case so right now let's just skip this step and click on finish all right so with that the publish profile has been created let's close this and over here we have everything ready for publishing so let's go ahead and click on the nice publish button everything is running the building is starting and it's uploading so let's wait a bit and if that's it our web API has been successfully published we can go to our web API dashboard and over here we can already see some requests and it can also again go to the same URL and if the URL worked although right now it's showing a empty white page the reason for that is because the default index page was deleted so we uploaded just our web API and for using our get endpoint it's super simple so let's just go into our URL and let you send our endpoint so that was API slash testing so if we go to this and if there is here we have our message this is my message all right Awesome everything worked now let's just make a quick change to see if everything is indeed working so back in the test and controller let's give it a different message all right new message the file is saved so again let's go into the publish Tab and now we don't even have to go through that setup we just need to click on the publish button and if everything was published successfully then over here if we refresh this page if there you go here we got our really nice new message alright awesome so with this we have our API project working in Visual Studio and we can easily make changes upload it publish it and have it working on azure and now just for fun over here I have a demo ENT project for accessing our web API is really the same as any other HTTP request I covered that process in detail in another video over here I have the class made in that video although also one important thing is in that video I was focused on showcasing the get so here in this class I upgraded it to also support posts to be able to send some data and importantly be able to send some Json data this entire class is included in the project files for this video if you want to look at it so with that I can do a request to the web API so just so we get request and use the URL that we just made so on the Azure website slash API testing we have our URL then if it's an error it's going to log an error if not we're going to see our nice server response okay so let's run this any up here in the game we do see the server response and our really nice message okay great now over here I have a more complex example I have a game with a mechanic kind of like dark souls or element ring so other players have placed down messages in the world now I can interact with the web API to get the nearby messages and up here we can see the response from the server we get a whole bunch of Json with some positions some messages some rotation and so on then with that data I just spawned some of these objects and if I approach yep I can see the message that that player posted so one message there one message there another one in there then I also have the ability to add more messages so I can go somewhere press a button and here it is a nice input window I made this window in a previous video tutorial so over here I can type my message I can press ok and yep there's my brand new message so I've got this message in those two now I can quit the game and then play again as if I were a completely different player and amp here are all the messages including the one that I just made alright awesome now for the code that is making this work here I have a function which shows my input window then when the player presses okay it creates a new structure of this type that I created so it has the position rotation and the text then it does a web request this time using post and using Json it does that into my API endpoint it sends the message system save single converted into Json and then simply has a response which contains all of the other messages then over here on the web API side for this one I have an add message controller so this is the endpoint the same one that I'm using I've got a simple post that is grabbing the message grabbing this same object type grabbing from the body it adds it to the list of messages now in this simple example this is just stored in memory so this not in any kind of permanent storage this is just memory again just keep it simple just for this demo so it adds the message that it receives adds it to all the other messages and then just Returns the Json with all of the messages then on Unity the code receives the response and loads the save Json then here just grab the message system save signals through all of them and spawns a prefab so here it is a really nice and simple messaging system just like Dark Souls just like London ring all of it made super simple thanks to the usage of the cloud alright so with this everything works this is the absolute Basics we created the service on the cloud and we access it from anywhere including from inside Unity now everything that you really want to build is really just expanding upon this I'm actually working on specific tutorials based on just this some more advanced systems using Azure functions rather than a web API and combining them with storage and so on definitely stay tuned for those interesting tutorials and if you want to learn more about cloud and Azure specifically then I can highly recommend the Microsoft learn site I've gone through a bunch of their learning paths and I learned quite a lot on the alert side you can just go over here on their products like Azure then down here for types you can select the entire learning path or if you want just go with a bunch of modules then here you can see tons of guided paths teaching you everything from a general overview of the cloud to some very more specific use case so if you want to learn more definitely check out the site and with that now you know the base of the cloud how to create a simple web API publish it to Azure and interact with it from a unity game alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time
