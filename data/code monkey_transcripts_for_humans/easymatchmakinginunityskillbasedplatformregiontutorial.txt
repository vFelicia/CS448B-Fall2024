With timestamps:

00:00 - hello and welcome I'm your Cod monkey in
00:02 - this video we're going to learn how to
00:04 - use Unity Matchmaker this is a complete
00:06 - matchmaking solution for all of your
00:07 - multiplayer games in order to match
00:09 - players together and automatically start
00:11 - the servers for them to play this is
00:13 - very well integrated with unity game
00:14 - server hosting or as it was previously
00:16 - called multiplay which is the tone that
00:18 - I covered in the previous video with
00:20 - both channels together the players just
00:21 - press a single button in game and in the
00:24 - background the system won't match
00:25 - players together according to whatever
00:27 - rooms you define and automatically start
00:29 - the servers for them to play this is an
00:31 - extremely robust production rate tool it
00:33 - has already been used by big studios
00:35 - like respawn entertainment and Team 17
00:37 - it works on any engine and on any
00:39 - platform
00:40 - you can Define all kinds of rules with
00:42 - as much or as little complexity as you
00:44 - want easily set up some skill based
00:46 - matchmaking or make it based on location
00:48 - or map type platform or anything you
00:50 - want for the demo for this video I'm
00:53 - going to use my own game kitchen counts
00:54 - which was fully made from scratch in two
00:56 - free courses go watch those if you want
00:58 - to see how the entire project was built
01:00 - and how it got to this point using that
01:02 - as demo I will show you how I
01:03 - implemented the UNT Matchmaker you can
01:05 - download the complete project files to
01:07 - inspect how it all works for yourself
01:08 - and also this video is sponsored by
01:10 - yinty learn more about Matchmaker and
01:12 - Unity gaming services with the link in
01:14 - the description okay so let's begin as
01:16 - usual on the ENT dashboard go ahead and
01:18 - select your project
01:20 - then over here on the left side go into
01:21 - multiplayer then let's scroll down and
01:24 - go into Matchmaker and over here let's
01:26 - set up the Matchmaker so let's follow
01:28 - the usual setup and the first one is
01:30 - integrate Matchmaker
01:31 - with this as you can see it supports
01:33 - unity and real and even a custom engine
01:35 - and for using that you can either use
01:37 - the SDK or the API directly the SDK is
01:40 - the easiest method so let's go with the
01:41 - ntsdk next now we need to link up the
01:44 - project so here I am in unity and first
01:47 - of all up here on the top left corner
01:48 - make sure you are signed in if you see a
01:50 - button saying sign in then close unity
01:52 - and open up the unity Hub then make sure
01:54 - you are signed in there before opening
01:56 - up the project when you are signed in go
01:58 - into edit and project settings then
02:00 - let's go down here into the services Tab
02:02 - and either create a brand new project or
02:04 - use an existing ID
02:06 - I don't really have one so I'm going to
02:07 - select that one okay I have the project
02:09 - selected and I'm just going to link it
02:10 - and if there you go success so if I can
02:13 - set up here and let's go and click on
02:14 - next now we need to install the package
02:17 - this one does not show up on the apexure
02:19 - manager by default so we need to install
02:20 - it through the name and it's very
02:22 - important that you copy the exact name
02:23 - so let's use this button here to copy
02:25 - directly to the clipboard then back into
02:27 - the intl let's go into window package
02:28 - manager and up top click on the plus
02:30 - button then add package by name and make
02:33 - sure you paste in the exact same name
02:34 - make sure you don't make a mistake the
02:36 - name has to be exact and let's go ahead
02:38 - and add and if there you go here is the
02:40 - Matchmaker package so back in the setup
02:43 - everything is done let's go ahead and
02:44 - finish okay so the integration is
02:46 - working the next step is to create a
02:48 - queue this basil is going to represent a
02:50 - specific type of tickets
02:52 - so you would have for example perhaps a
02:54 - rank you then a casual cue maybe a queue
02:57 - for a specific map maybe another one for
02:59 - a specific game mode so let's go ahead
03:01 - and create a queue now let's just give
03:03 - it a name so let's go with default queue
03:06 - then for the maximum number of players
03:08 - on a ticket for example you could make a
03:10 - queue only for summer play and one for
03:12 - Group Play for this one let's keep it
03:14 - simple and just make some a play so
03:15 - maximum of one okay let's create alright
03:18 - the queue is done so now we need to
03:20 - create a pool a pool is how you're going
03:23 - to group tickets together to find a
03:24 - match then you can have multiple which
03:27 - you can then match with filters so for
03:29 - example you would have one default pool
03:31 - then one for just beta players one for a
03:33 - specific version maybe a pool for super
03:36 - highly ranked players another one just
03:37 - for Xbox or Playstation and so on so
03:40 - let's go ahead and create it and let's
03:42 - assign the queue that we just selected
03:43 - then let's give the promo name let's go
03:45 - on this one just default fool
03:48 - and for the timeout in seconds let's say
03:50 - you want to search for 60 seconds and
03:52 - Yep this one this first one is going to
03:54 - be the default boom so we cannot add
03:56 - filters we can only add filters to extra
03:58 - phones so for now let's leave it on
03:59 - default and next then for the hosting
04:02 - settings
04:03 - this tool like I mentioned is very well
04:05 - integrated with game server hosting or
04:07 - multiply this is what I covered in the
04:09 - previous video for automatically
04:10 - spawning up servers in the cloud so you
04:12 - need to have multiply set up in the same
04:14 - project in order to use this let's go
04:16 - ahead select the fleet and select the
04:18 - build config like I mentioned then you
04:21 - could make different pools that use
04:22 - different builds
04:23 - so that's how you would have maybe one
04:25 - phone for regular players and one for
04:27 - beta players you would change it here
04:28 - let's go ahead click on next
04:31 - and now here is the really important
04:33 - part the rules so this is how the
04:35 - players are actually matched up this one
04:36 - is the true power of Matchmaker here you
04:39 - can go as simple or as complex as you
04:41 - like this is going to differ a lot
04:43 - depending on the specifics for each game
04:44 - so I'm going to set up the rules
04:46 - specifically for my kitchen chaos game
04:48 - so first for the match definition let's
04:50 - give it a name
04:51 - let's name it just normal for a normal
04:54 - match then for the region I'm in Europe
04:56 - so I'm going to select Europe and for
04:58 - backfill this basically means you want
05:01 - players to join servers that have
05:02 - already been created with some players
05:04 - or do you only want to make sure that
05:06 - the players in the tickets they create a
05:08 - brand new server every time so imagine
05:10 - for example a game like Battlefield
05:12 - where the game already started in that
05:14 - case you probably do want to allow
05:15 - players to join in the middle of the
05:16 - game this also helps with Team balancing
05:19 - for other games you might not want this
05:21 - you might just want to group The Players
05:23 - together directly in the Matchmaker and
05:25 - nothing else afterwards in my case for
05:27 - my game kitchen chaos we actually
05:29 - already defined rules in multiplayer
05:30 - course where we only want the players to
05:32 - join in the very beginning and never in
05:34 - the middle but then in the multiplayer
05:36 - video I also set it up to only accept
05:37 - layers in the very beginning sectionally
05:39 - the rooms here are also slightly related
05:41 - to the rooms on the game server hosting
05:44 - in my case I'm going to set back film to
05:46 - true in order to allow the players to
05:48 - get grouped together in the character
05:49 - select scene then if someone leaves the
05:51 - game before the game starts they can
05:53 - still join but as soon as the game
05:55 - actually starts at that point backfill
05:57 - will no longer be enabled okay so then
05:59 - we have the team definitions again
06:00 - different games have different rules you
06:03 - can add all kinds of teams you want so
06:05 - for a game like Battlefield you would
06:07 - have probably at least two teams but in
06:09 - a game that is free for all like for
06:10 - example a battle royale or in a game
06:12 - that there's no concept of teams like
06:14 - for example kitchen chaos for here let's
06:16 - just make one team so let's just give
06:18 - this team the name all then the team
06:20 - count so this is the number of replicas
06:23 - for this team basically if you have a
06:25 - game kind of like Counter-Strike where
06:26 - you have terrorists and counter
06:28 - terrorists for that kind of game you
06:29 - would make two separate teams but on
06:31 - games where you just have side a and
06:33 - side B for those you could make them
06:34 - rebellious in this case there's only one
06:36 - on team so let's put the minimum and
06:38 - maximum both at one okay so next the
06:41 - player count for kitchen chaos the game
06:43 - is playing about with any number of
06:45 - layers up to 4 so here we would put 1
06:48 - and 4 but actually let's put it four and
06:50 - four meaning that this will only start
06:52 - the server once four players are ready
06:54 - to be matched together which means this
06:56 - is also a great time to look at range
06:58 - relaxations this is an extremely
07:00 - powerful feature basically we have it
07:02 - set up to only match players if there
07:04 - are four players available so just like
07:06 - this if we only have two players looking
07:08 - for a match they won't do anything don't
07:10 - keep waiting until they find four but
07:12 - like I said for this game the game is
07:13 - actually playable with fewer players so
07:16 - we can make it set up so that it starts
07:17 - looking for groups of four players and
07:20 - then let's add a relaxation this one is
07:22 - going to replace the minimum value and
07:24 - let's replace it instead of four and
07:26 - let's replace it with just three and
07:28 - let's say after maybe 10 seconds so it
07:30 - won't try finding four players to group
07:32 - together for 10 seconds and after 10
07:34 - seconds if it still does not find them
07:36 - then it won't start looking for groups
07:37 - of three players
07:39 - we can also change here the ticket H
07:40 - type so if the oldest ticket has been
07:43 - waiting for 10 seconds or the youngest
07:45 - or the average of all the tickets so you
07:47 - can add this relaxation then we can add
07:48 - a bunch more
07:49 - so let's say for example after 15
07:51 - seconds let's start looking just for two
07:53 - players
07:54 - and after say 20 seconds let's just look
07:57 - for one player because again this game
07:59 - this specific game can be played with
08:01 - one or four players but at the same time
08:03 - since we enabled backfill up here that
08:05 - means that even if the server starts
08:07 - with let's say just one player then the
08:09 - other players will still be able to join
08:11 - that same server also by the way just a
08:13 - quick note over here on the right side
08:14 - you've got buttons to collapse on the
08:16 - rooms so if you want to get a better
08:18 - view this can be quite useful okay great
08:20 - so we've got our own team and then we've
08:23 - got rooms for this specific team so here
08:25 - you can do all kinds of logic the first
08:28 - thing you have is over here all kinds of
08:30 - types to do all kinds of logic
08:32 - comparison then you can test if the
08:34 - wrong should pass or should fail you can
08:36 - also add relaxations and so on so for
08:39 - example one of the more common scenarios
08:41 - would be skill based matchmaking so
08:43 - let's name this one the skill rule
08:45 - and then for the type let's go with
08:47 - difference then let's say this room
08:49 - should pass
08:50 - then for the source let's go with data
08:53 - in all the players we can set this data
08:55 - through the package SDK that we're going
08:56 - to see in a bit so let's call the data
08:58 - path the skill and for the number let's
09:01 - go with a difference of say 200.
09:04 - obviously this is up to you what the
09:06 - numbers actually mean and then we could
09:08 - also add some relaxations
09:10 - so for example let's set a relaxation of
09:12 - type let's say disable
09:14 - so after 10 seconds if it still does not
09:17 - find any players that match up this
09:19 - skill rule which means if for 10 seconds
09:21 - it does not find two players that have a
09:24 - skill difference of less than 200 if so
09:26 - then it's going to disable this Rule and
09:27 - it's no longer going to take the scale
09:28 - into account
09:30 - so this is a super simple way in order
09:31 - to add skill based matchmaking to your
09:33 - games
09:34 - and then finally down here we have the
09:36 - match rules now these are the same thing
09:38 - except they apply to the entire match in
09:39 - every single team in our case since we
09:41 - really just defined one single team
09:43 - because that we essentially already have
09:45 - a match rule okay so that's all our
09:47 - really nice logic also by the way one
09:49 - thing up here up top you can see two
09:51 - buttons so one for the logic Builder so
09:52 - this is the one that we're seeing and
09:54 - then you've got one to see pretty much
09:56 - the exact same data but look at it in
09:57 - Json and over here this is all editable
09:59 - so you can edit any of these fields this
10:02 - is just a text box so you can just type
10:03 - anything
10:04 - so if you prefer manual text editing
10:06 - then maybe you can use this one or you
10:08 - can really just using logic Builder
10:10 - which is pretty easy to use okay so with
10:12 - that we have set up all of our rooms so
10:14 - let's go ahead and create and if that's
10:15 - it the pawn has been created
10:17 - and now if you want we can create some
10:19 - additional pools so here let's go ahead
10:22 - select the queue let's go ahead add some
10:24 - different phone name and over here we've
10:26 - got a point with filters so let's just
10:27 - add some number and go into next
10:29 - let's select the fleet and the build
10:31 - config and if then here we have the
10:33 - filters for this phone so for example
10:35 - here we could add a film like platform
10:37 - and for the operator let's say equals
10:40 - and say value equals Xbox so basically
10:43 - with this then you would assign this
10:44 - field in the practice SDK and it would
10:46 - only match Xbox players in this pool so
10:49 - it filters you can really expand upon
10:50 - the pawn system to add all kinds of
10:52 - rules and separate your game into as
10:53 - many pawns as you want but for this
10:55 - tutorial let's stick with the simplest
10:57 - approach so let's not make model
10:58 - components let's just cancel and okay
11:00 - with that the setup is completely done
11:02 - over here on the side we can click on
11:04 - the cues in order to view our cues and
11:06 - up over here we do see the default Hue
11:08 - that we created then over here we can
11:10 - see the settings so the number of
11:11 - players on the ticket we can go and
11:13 - inspect on the pools and if here's our
11:15 - default pool here's the fleet to build
11:17 - config the timeout and so on and if we
11:20 - go inside over here we can change the
11:21 - name and we can also inspect or change
11:23 - any of the rules alright so that's
11:25 - really it for the setup over here on the
11:27 - dashboard now let's go into unity and
11:29 - implement the package SDK so here is the
11:32 - game in unity again I made this entire
11:34 - game in the two free courses
11:36 - go watch them to see how this project
11:38 - started from scratch and how it got to
11:40 - this point and after that they also
11:42 - implement the dedicated server logic
11:43 - from the previous video so here on the
11:46 - lobby scene I just had this Matchmaker
11:47 - UI script it really just adds this
11:50 - button and over here is the code so
11:52 - really just has a button reference and
11:54 - when we click on the button we're going
11:55 - to find the match so that is going to
11:57 - run this function and how it finds a
11:59 - match is it goes inside the Matchmaker
12:01 - service inside the instance and creates
12:03 - a ticket also one very important thing
12:05 - is that this must be called only after
12:07 - initializing the unity services and
12:09 - Authentication
12:10 - that is actually handled over here on
12:12 - the kitchen game Lobby script over here
12:14 - as soon as this one starts it
12:16 - initializes UNT authentication then it
12:18 - goes over here into the unity Services
12:20 - initialize and then the authentication
12:22 - Service now that means that in a proper
12:25 - game you would probably block out this
12:26 - button until the authentication
12:27 - completes but for this simple demo I can
12:29 - really just wait one second before
12:31 - clicking on the button so anyways you
12:33 - initialize Unity service and then you
12:34 - can create a brand new ticket for
12:36 - creating the ticket this one takes in
12:38 - list of players and for the players to
12:40 - find over here Unity Services Matchmaker
12:42 - models player also one reason why this
12:45 - takes a list and not just a single
12:46 - player is to answer a question that some
12:48 - of you might have which is how do you
12:49 - find a match as part of the group well
12:51 - this is exactly how basically the
12:53 - players would get together possibly by
12:55 - using it in the lobby then the lobby
12:57 - owner would send out just one ticket
12:58 - including all the players in that Lobby
13:01 - so this one takes a list of all the
13:03 - players for each player you include the
13:05 - authentication ID and then you can add
13:07 - whatever custom data you want this can
13:09 - be a custom type that you define for
13:11 - example I Define this one up here and I
13:12 - just defined a scale field so just
13:14 - example like I set up the dashboard you
13:17 - can Define whatever that you want you
13:19 - can send either a custom type or really
13:20 - just send a dictionary of string object
13:23 - so either way it works and then the
13:26 - final parameter over here takes in the
13:28 - queue name and for this one make sure
13:30 - this name matches exactly what you wrote
13:31 - on the dashboard perfectly okay so that
13:34 - is basically going to create a brand new
13:35 - ticket however just by doing that it
13:37 - won't actually join the game
13:38 - automatically that just creates a ticket
13:40 - we need to manually handle joining and
13:42 - how you do that is by pulling the state
13:44 - of the ticket so over here it stores the
13:46 - ticket response so this is the one that
13:48 - returns from this function then with
13:50 - this one down here on update we have a
13:51 - simpong timer for the maximum power
13:54 - amount for this one according to the
13:56 - docs you should do it once per second so
13:59 - I just put 1.1 in order to make sure
14:01 - that I don't get rate Limited if you do
14:03 - it too fast you don't start to get
14:04 - errors so do it a little bit less than
14:07 - once per second
14:08 - so that means that every second it is
14:10 - going to run this function to pull the
14:12 - Matchmaker ticket then this one calls
14:14 - the function to get the ticket async so
14:16 - that passes in the ticket ID in order to
14:18 - return a response so this is going to
14:20 - return what is the status of this ticket
14:22 - with that first of all if it returns
14:24 - null that means there have been no
14:25 - updates to this ticket so just keep
14:27 - winning but if it is not known then
14:29 - we're going to check the type and it
14:31 - should always be of this time so the
14:32 - type multiply assignment if so then that
14:35 - means everything is correct and we have
14:36 - some update so then we can just cast the
14:39 - ticket centers response.value as a
14:41 - multiply assignment and on this multiply
14:43 - assignment we can then check out the
14:44 - multiply status
14:46 - then we have all kinds of possible
14:47 - statuses so first we have an in progress
14:50 - this means that it's still searching so
14:52 - let it keep searching then maybe we have
14:54 - a film for some reason like perhaps your
14:57 - multiplayer settings are incorrect and
14:59 - it could not start the server
15:00 - or alternatively we can have a timeout
15:04 - this means that it either could not find
15:06 - a match or it could not start the server
15:07 - within the time limit that you define in
15:09 - the dashboard now in my testing it seems
15:11 - that timeout usually only happened once
15:13 - for the very first time that I was
15:14 - looking for a match
15:16 - it's probably related to how game server
15:18 - hosting synchronize evil data and how it
15:20 - takes a bit longer to do a concert
15:22 - but after that first time I never got a
15:24 - timeout so if it's neither of these
15:26 - states then it's the one up here so it's
15:27 - the phone state
15:28 - if so then really that means that it
15:30 - found a match so with this you can go
15:32 - inside the multiply assignment in order
15:33 - to grab the IP and the port and then
15:36 - with that data then you can go inside
15:37 - the NT transport and as usual set the
15:39 - connection data and finally start the
15:41 - client after that then the game only
15:43 - proceeds as normal so that's really it
15:45 - for the Matchmaker on the client side
15:47 - however there are some other things you
15:49 - must also Implement on the server side
15:51 - if you just do it just like this then it
15:53 - will only create brand new servers with
15:55 - whatever tickets are active
15:56 - so for example if four players are
15:58 - looking for a game at the same time then
16:00 - two indeed make a game with those four
16:01 - players
16:02 - however if one game already has a player
16:04 - waiting in the character select and then
16:06 - afterwards another player tries to find
16:08 - a match if so then just like this it
16:10 - won't actually join that match it won't
16:12 - create a brand new server for that
16:14 - second player meaning that just like
16:16 - this we don't actually have backfill
16:17 - enabled so for that we need to add some
16:20 - code on the server side so over here on
16:22 - the kitchen game Lobby script this is
16:25 - where we added the dedicated server
16:26 - logic in the unless video so if we go
16:28 - down to where we were allocating the
16:30 - server so here we've got the multiple
16:32 - events we allocate the multiplayer and
16:34 - yep here we got this function in order
16:36 - to allocate a server so we get the
16:38 - server config we set up the connection
16:40 - data and over here we set up the
16:41 - backfield tickets now the way that
16:44 - background works is you need a different
16:45 - type of ticket you need a specific
16:47 - backfill ticket these are separate from
16:49 - regular matchmaking tickets and actually
16:51 - multiplayer already automatically
16:53 - generates that how you get it is through
16:55 - this function so multiply service you go
16:57 - through the instance and get the payload
16:58 - allocation this returns an object of
17:01 - this type which you must create
17:03 - so this type is defined over here this
17:06 - is in the built-in type so you need to
17:07 - add this exam like this onto your
17:09 - project now I found out this time
17:11 - because there's actually another
17:12 - function which Returns the same thing
17:15 - if we go into the multiplayer service
17:17 - instance you can get the payload as
17:19 - plain text and if you do that that
17:20 - returns some Json then you can see that
17:22 - these Json structure is exactly the same
17:24 - as this type right here then this type
17:27 - as you can see it contains a background
17:28 - ticket ID
17:29 - so recently up here we get the parallel
17:31 - allocation we grab that one and from
17:33 - that one we grab the background ticket
17:34 - ID and we store it however just like on
17:37 - the client side we also need to
17:38 - constantly pull the API so again we have
17:41 - a simple photo timer so here I Define a
17:44 - timer and a timer Max again there is a
17:46 - rate limit so make sure you don't do it
17:48 - too often so over here just once per
17:49 - second
17:50 - then it just counts on timer and it's
17:52 - going to run this function here is the
17:54 - function that we're going to run on
17:55 - every single second so here it's going
17:58 - to go inside the Matchmaker servers and
17:59 - it's going to call the function to
18:00 - approve the backfill for the ticket
18:02 - meaning that this won't tell Matchmaker
18:04 - that this server has some slots
18:05 - available to backfill then the
18:07 - Matchmaker itself receives that message
18:09 - and allows other players to join the
18:10 - server that is why over here I'm only
18:12 - calling this function if the game itself
18:14 - if that one has available on player
18:16 - slots if it doesn't then it will not
18:18 - call this function and Matchmaker will
18:19 - not send players onto this game another
18:21 - thing you must do is update the
18:23 - Matchmaker so you need to call this
18:26 - function to update the backfill ticket
18:27 - need to do this if something changes
18:29 - like for example if the player list
18:31 - changes or the map changes or something
18:33 - like that in this simple game that I'm
18:35 - using here the only thing that can
18:36 - change is just the number of players so
18:38 - basically I'm just calling this function
18:39 - over here when the player that network
18:42 - list changes which means when a player
18:44 - joins or leaves then it's going to run
18:45 - this and over here I'm just going to
18:47 - update the back film ticket with the new
18:49 - player data and finally you must also
18:51 - delete the backfield ticket when the
18:53 - game is no longer accepting players so
18:55 - that the Matchmaker knows not to send
18:56 - any more over here I'm doing that based
18:59 - on an event here on game starting so
19:01 - this event is fired when all the players
19:03 - are ready and it goes into low the game
19:04 - scene so it's over here that I'm running
19:06 - this event and simply calling the lead
19:08 - back film ticket once you add all that
19:10 - logic here is the final result so I've
19:12 - got multiple builds running also by the
19:15 - way just for debugging purposes in order
19:16 - to have multiple builds running on the
19:18 - same PC I have this code setting the
19:20 - profile to random names this is only
19:22 - necessary for debugging just so I can
19:24 - run multiple Builds on the same PC
19:26 - otherwise all of these would end up with
19:28 - the same player ID which wouldn't work
19:29 - so this year is for testing but
19:31 - obviously you would not use this in the
19:33 - final game
19:34 - so with that here I have multiple builds
19:36 - running and in the dashboard I can see
19:38 - all of the servers are simply available
19:40 - they're not yet running so they're
19:41 - waiting to be allocated and used now on
19:44 - this one let's go ahead and try to find
19:45 - a match and as usual based on our rules
19:47 - it's going to take some time because
19:48 - first is going to try to find a game
19:50 - with four players but there's only one
19:52 - player searching so it will keep looking
19:54 - and relaxing rules until it gets to the
19:56 - room whether it only needs one player to
19:57 - start and if there is connecting and
19:59 - here I am in game okay great we can
20:02 - refresh the dashboard and we can see yep
20:04 - indeed one server was indeed allocated
20:06 - now let's try joining with four players
20:09 - at once so let's get all these prepared
20:11 - and let's go ahead and try to join all
20:13 - of them so try to join all of them and
20:15 - you have to look at what happened since
20:17 - we had four tickets searching for a game
20:18 - right away it created a brand new server
20:20 - for just those four tickets and now if I
20:22 - try to join with just one more once
20:24 - again it's going to count down and relax
20:26 - the rules and yep now he joined this one
20:28 - alright great then here in the dashboard
20:31 - we can see all kinds of stats of the
20:33 - tickets that were created matches and so
20:34 - on and in the servers we can see how
20:36 - many servers are allocated then we can
20:38 - go inside and see the logs and so on so
20:40 - this is the true power of this system
20:42 - once it's set up everything is
20:43 - automatically handled for you the
20:45 - players just press a button and
20:46 - everything automatically happens in the
20:48 - background either they go inside an open
20:50 - server or it creates a brand new one
20:52 - alright awesome okay so this is unity's
20:55 - Matchmaker it's a really powerful tool
20:57 - for adding matchmaking to your games
20:58 - when you combine it with unity game
21:01 - server hosting you end up with a really
21:02 - complete solution for all of your
21:04 - multiplayer needs learn more about it
21:05 - with the link in the description or
21:07 - download the project files for this
21:08 - video and also check out my two free
21:10 - courses to see how this multiplayer game
21:12 - was built from scratch whilst writing
21:14 - some good clean code and some good
21:15 - projects version alright hope that's
21:17 - useful check out these videos to learn
21:19 - some more thanks to these awesome
21:21 - patreon supporters for making these
21:22 - videos possible thank you for watching
21:24 - and I'll see you next time
21:29 - foreign

Cleaned transcript:

hello and welcome I'm your Cod monkey in this video we're going to learn how to use Unity Matchmaker this is a complete matchmaking solution for all of your multiplayer games in order to match players together and automatically start the servers for them to play this is very well integrated with unity game server hosting or as it was previously called multiplay which is the tone that I covered in the previous video with both channels together the players just press a single button in game and in the background the system won't match players together according to whatever rooms you define and automatically start the servers for them to play this is an extremely robust production rate tool it has already been used by big studios like respawn entertainment and Team 17 it works on any engine and on any platform you can Define all kinds of rules with as much or as little complexity as you want easily set up some skill based matchmaking or make it based on location or map type platform or anything you want for the demo for this video I'm going to use my own game kitchen counts which was fully made from scratch in two free courses go watch those if you want to see how the entire project was built and how it got to this point using that as demo I will show you how I implemented the UNT Matchmaker you can download the complete project files to inspect how it all works for yourself and also this video is sponsored by yinty learn more about Matchmaker and Unity gaming services with the link in the description okay so let's begin as usual on the ENT dashboard go ahead and select your project then over here on the left side go into multiplayer then let's scroll down and go into Matchmaker and over here let's set up the Matchmaker so let's follow the usual setup and the first one is integrate Matchmaker with this as you can see it supports unity and real and even a custom engine and for using that you can either use the SDK or the API directly the SDK is the easiest method so let's go with the ntsdk next now we need to link up the project so here I am in unity and first of all up here on the top left corner make sure you are signed in if you see a button saying sign in then close unity and open up the unity Hub then make sure you are signed in there before opening up the project when you are signed in go into edit and project settings then let's go down here into the services Tab and either create a brand new project or use an existing ID I don't really have one so I'm going to select that one okay I have the project selected and I'm just going to link it and if there you go success so if I can set up here and let's go and click on next now we need to install the package this one does not show up on the apexure manager by default so we need to install it through the name and it's very important that you copy the exact name so let's use this button here to copy directly to the clipboard then back into the intl let's go into window package manager and up top click on the plus button then add package by name and make sure you paste in the exact same name make sure you don't make a mistake the name has to be exact and let's go ahead and add and if there you go here is the Matchmaker package so back in the setup everything is done let's go ahead and finish okay so the integration is working the next step is to create a queue this basil is going to represent a specific type of tickets so you would have for example perhaps a rank you then a casual cue maybe a queue for a specific map maybe another one for a specific game mode so let's go ahead and create a queue now let's just give it a name so let's go with default queue then for the maximum number of players on a ticket for example you could make a queue only for summer play and one for Group Play for this one let's keep it simple and just make some a play so maximum of one okay let's create alright the queue is done so now we need to create a pool a pool is how you're going to group tickets together to find a match then you can have multiple which you can then match with filters so for example you would have one default pool then one for just beta players one for a specific version maybe a pool for super highly ranked players another one just for Xbox or Playstation and so on so let's go ahead and create it and let's assign the queue that we just selected then let's give the promo name let's go on this one just default fool and for the timeout in seconds let's say you want to search for 60 seconds and Yep this one this first one is going to be the default boom so we cannot add filters we can only add filters to extra phones so for now let's leave it on default and next then for the hosting settings this tool like I mentioned is very well integrated with game server hosting or multiply this is what I covered in the previous video for automatically spawning up servers in the cloud so you need to have multiply set up in the same project in order to use this let's go ahead select the fleet and select the build config like I mentioned then you could make different pools that use different builds so that's how you would have maybe one phone for regular players and one for beta players you would change it here let's go ahead click on next and now here is the really important part the rules so this is how the players are actually matched up this one is the true power of Matchmaker here you can go as simple or as complex as you like this is going to differ a lot depending on the specifics for each game so I'm going to set up the rules specifically for my kitchen chaos game so first for the match definition let's give it a name let's name it just normal for a normal match then for the region I'm in Europe so I'm going to select Europe and for backfill this basically means you want players to join servers that have already been created with some players or do you only want to make sure that the players in the tickets they create a brand new server every time so imagine for example a game like Battlefield where the game already started in that case you probably do want to allow players to join in the middle of the game this also helps with Team balancing for other games you might not want this you might just want to group The Players together directly in the Matchmaker and nothing else afterwards in my case for my game kitchen chaos we actually already defined rules in multiplayer course where we only want the players to join in the very beginning and never in the middle but then in the multiplayer video I also set it up to only accept layers in the very beginning sectionally the rooms here are also slightly related to the rooms on the game server hosting in my case I'm going to set back film to true in order to allow the players to get grouped together in the character select scene then if someone leaves the game before the game starts they can still join but as soon as the game actually starts at that point backfill will no longer be enabled okay so then we have the team definitions again different games have different rules you can add all kinds of teams you want so for a game like Battlefield you would have probably at least two teams but in a game that is free for all like for example a battle royale or in a game that there's no concept of teams like for example kitchen chaos for here let's just make one team so let's just give this team the name all then the team count so this is the number of replicas for this team basically if you have a game kind of like CounterStrike where you have terrorists and counter terrorists for that kind of game you would make two separate teams but on games where you just have side a and side B for those you could make them rebellious in this case there's only one on team so let's put the minimum and maximum both at one okay so next the player count for kitchen chaos the game is playing about with any number of layers up to 4 so here we would put 1 and 4 but actually let's put it four and four meaning that this will only start the server once four players are ready to be matched together which means this is also a great time to look at range relaxations this is an extremely powerful feature basically we have it set up to only match players if there are four players available so just like this if we only have two players looking for a match they won't do anything don't keep waiting until they find four but like I said for this game the game is actually playable with fewer players so we can make it set up so that it starts looking for groups of four players and then let's add a relaxation this one is going to replace the minimum value and let's replace it instead of four and let's replace it with just three and let's say after maybe 10 seconds so it won't try finding four players to group together for 10 seconds and after 10 seconds if it still does not find them then it won't start looking for groups of three players we can also change here the ticket H type so if the oldest ticket has been waiting for 10 seconds or the youngest or the average of all the tickets so you can add this relaxation then we can add a bunch more so let's say for example after 15 seconds let's start looking just for two players and after say 20 seconds let's just look for one player because again this game this specific game can be played with one or four players but at the same time since we enabled backfill up here that means that even if the server starts with let's say just one player then the other players will still be able to join that same server also by the way just a quick note over here on the right side you've got buttons to collapse on the rooms so if you want to get a better view this can be quite useful okay great so we've got our own team and then we've got rooms for this specific team so here you can do all kinds of logic the first thing you have is over here all kinds of types to do all kinds of logic comparison then you can test if the wrong should pass or should fail you can also add relaxations and so on so for example one of the more common scenarios would be skill based matchmaking so let's name this one the skill rule and then for the type let's go with difference then let's say this room should pass then for the source let's go with data in all the players we can set this data through the package SDK that we're going to see in a bit so let's call the data path the skill and for the number let's go with a difference of say 200. obviously this is up to you what the numbers actually mean and then we could also add some relaxations so for example let's set a relaxation of type let's say disable so after 10 seconds if it still does not find any players that match up this skill rule which means if for 10 seconds it does not find two players that have a skill difference of less than 200 if so then it's going to disable this Rule and it's no longer going to take the scale into account so this is a super simple way in order to add skill based matchmaking to your games and then finally down here we have the match rules now these are the same thing except they apply to the entire match in every single team in our case since we really just defined one single team because that we essentially already have a match rule okay so that's all our really nice logic also by the way one thing up here up top you can see two buttons so one for the logic Builder so this is the one that we're seeing and then you've got one to see pretty much the exact same data but look at it in Json and over here this is all editable so you can edit any of these fields this is just a text box so you can just type anything so if you prefer manual text editing then maybe you can use this one or you can really just using logic Builder which is pretty easy to use okay so with that we have set up all of our rooms so let's go ahead and create and if that's it the pawn has been created and now if you want we can create some additional pools so here let's go ahead select the queue let's go ahead add some different phone name and over here we've got a point with filters so let's just add some number and go into next let's select the fleet and the build config and if then here we have the filters for this phone so for example here we could add a film like platform and for the operator let's say equals and say value equals Xbox so basically with this then you would assign this field in the practice SDK and it would only match Xbox players in this pool so it filters you can really expand upon the pawn system to add all kinds of rules and separate your game into as many pawns as you want but for this tutorial let's stick with the simplest approach so let's not make model components let's just cancel and okay with that the setup is completely done over here on the side we can click on the cues in order to view our cues and up over here we do see the default Hue that we created then over here we can see the settings so the number of players on the ticket we can go and inspect on the pools and if here's our default pool here's the fleet to build config the timeout and so on and if we go inside over here we can change the name and we can also inspect or change any of the rules alright so that's really it for the setup over here on the dashboard now let's go into unity and implement the package SDK so here is the game in unity again I made this entire game in the two free courses go watch them to see how this project started from scratch and how it got to this point and after that they also implement the dedicated server logic from the previous video so here on the lobby scene I just had this Matchmaker UI script it really just adds this button and over here is the code so really just has a button reference and when we click on the button we're going to find the match so that is going to run this function and how it finds a match is it goes inside the Matchmaker service inside the instance and creates a ticket also one very important thing is that this must be called only after initializing the unity services and Authentication that is actually handled over here on the kitchen game Lobby script over here as soon as this one starts it initializes UNT authentication then it goes over here into the unity Services initialize and then the authentication Service now that means that in a proper game you would probably block out this button until the authentication completes but for this simple demo I can really just wait one second before clicking on the button so anyways you initialize Unity service and then you can create a brand new ticket for creating the ticket this one takes in list of players and for the players to find over here Unity Services Matchmaker models player also one reason why this takes a list and not just a single player is to answer a question that some of you might have which is how do you find a match as part of the group well this is exactly how basically the players would get together possibly by using it in the lobby then the lobby owner would send out just one ticket including all the players in that Lobby so this one takes a list of all the players for each player you include the authentication ID and then you can add whatever custom data you want this can be a custom type that you define for example I Define this one up here and I just defined a scale field so just example like I set up the dashboard you can Define whatever that you want you can send either a custom type or really just send a dictionary of string object so either way it works and then the final parameter over here takes in the queue name and for this one make sure this name matches exactly what you wrote on the dashboard perfectly okay so that is basically going to create a brand new ticket however just by doing that it won't actually join the game automatically that just creates a ticket we need to manually handle joining and how you do that is by pulling the state of the ticket so over here it stores the ticket response so this is the one that returns from this function then with this one down here on update we have a simpong timer for the maximum power amount for this one according to the docs you should do it once per second so I just put 1.1 in order to make sure that I don't get rate Limited if you do it too fast you don't start to get errors so do it a little bit less than once per second so that means that every second it is going to run this function to pull the Matchmaker ticket then this one calls the function to get the ticket async so that passes in the ticket ID in order to return a response so this is going to return what is the status of this ticket with that first of all if it returns null that means there have been no updates to this ticket so just keep winning but if it is not known then we're going to check the type and it should always be of this time so the type multiply assignment if so then that means everything is correct and we have some update so then we can just cast the ticket centers response.value as a multiply assignment and on this multiply assignment we can then check out the multiply status then we have all kinds of possible statuses so first we have an in progress this means that it's still searching so let it keep searching then maybe we have a film for some reason like perhaps your multiplayer settings are incorrect and it could not start the server or alternatively we can have a timeout this means that it either could not find a match or it could not start the server within the time limit that you define in the dashboard now in my testing it seems that timeout usually only happened once for the very first time that I was looking for a match it's probably related to how game server hosting synchronize evil data and how it takes a bit longer to do a concert but after that first time I never got a timeout so if it's neither of these states then it's the one up here so it's the phone state if so then really that means that it found a match so with this you can go inside the multiply assignment in order to grab the IP and the port and then with that data then you can go inside the NT transport and as usual set the connection data and finally start the client after that then the game only proceeds as normal so that's really it for the Matchmaker on the client side however there are some other things you must also Implement on the server side if you just do it just like this then it will only create brand new servers with whatever tickets are active so for example if four players are looking for a game at the same time then two indeed make a game with those four players however if one game already has a player waiting in the character select and then afterwards another player tries to find a match if so then just like this it won't actually join that match it won't create a brand new server for that second player meaning that just like this we don't actually have backfill enabled so for that we need to add some code on the server side so over here on the kitchen game Lobby script this is where we added the dedicated server logic in the unless video so if we go down to where we were allocating the server so here we've got the multiple events we allocate the multiplayer and yep here we got this function in order to allocate a server so we get the server config we set up the connection data and over here we set up the backfield tickets now the way that background works is you need a different type of ticket you need a specific backfill ticket these are separate from regular matchmaking tickets and actually multiplayer already automatically generates that how you get it is through this function so multiply service you go through the instance and get the payload allocation this returns an object of this type which you must create so this type is defined over here this is in the builtin type so you need to add this exam like this onto your project now I found out this time because there's actually another function which Returns the same thing if we go into the multiplayer service instance you can get the payload as plain text and if you do that that returns some Json then you can see that these Json structure is exactly the same as this type right here then this type as you can see it contains a background ticket ID so recently up here we get the parallel allocation we grab that one and from that one we grab the background ticket ID and we store it however just like on the client side we also need to constantly pull the API so again we have a simple photo timer so here I Define a timer and a timer Max again there is a rate limit so make sure you don't do it too often so over here just once per second then it just counts on timer and it's going to run this function here is the function that we're going to run on every single second so here it's going to go inside the Matchmaker servers and it's going to call the function to approve the backfill for the ticket meaning that this won't tell Matchmaker that this server has some slots available to backfill then the Matchmaker itself receives that message and allows other players to join the server that is why over here I'm only calling this function if the game itself if that one has available on player slots if it doesn't then it will not call this function and Matchmaker will not send players onto this game another thing you must do is update the Matchmaker so you need to call this function to update the backfill ticket need to do this if something changes like for example if the player list changes or the map changes or something like that in this simple game that I'm using here the only thing that can change is just the number of players so basically I'm just calling this function over here when the player that network list changes which means when a player joins or leaves then it's going to run this and over here I'm just going to update the back film ticket with the new player data and finally you must also delete the backfield ticket when the game is no longer accepting players so that the Matchmaker knows not to send any more over here I'm doing that based on an event here on game starting so this event is fired when all the players are ready and it goes into low the game scene so it's over here that I'm running this event and simply calling the lead back film ticket once you add all that logic here is the final result so I've got multiple builds running also by the way just for debugging purposes in order to have multiple builds running on the same PC I have this code setting the profile to random names this is only necessary for debugging just so I can run multiple Builds on the same PC otherwise all of these would end up with the same player ID which wouldn't work so this year is for testing but obviously you would not use this in the final game so with that here I have multiple builds running and in the dashboard I can see all of the servers are simply available they're not yet running so they're waiting to be allocated and used now on this one let's go ahead and try to find a match and as usual based on our rules it's going to take some time because first is going to try to find a game with four players but there's only one player searching so it will keep looking and relaxing rules until it gets to the room whether it only needs one player to start and if there is connecting and here I am in game okay great we can refresh the dashboard and we can see yep indeed one server was indeed allocated now let's try joining with four players at once so let's get all these prepared and let's go ahead and try to join all of them so try to join all of them and you have to look at what happened since we had four tickets searching for a game right away it created a brand new server for just those four tickets and now if I try to join with just one more once again it's going to count down and relax the rules and yep now he joined this one alright great then here in the dashboard we can see all kinds of stats of the tickets that were created matches and so on and in the servers we can see how many servers are allocated then we can go inside and see the logs and so on so this is the true power of this system once it's set up everything is automatically handled for you the players just press a button and everything automatically happens in the background either they go inside an open server or it creates a brand new one alright awesome okay so this is unity's Matchmaker it's a really powerful tool for adding matchmaking to your games when you combine it with unity game server hosting you end up with a really complete solution for all of your multiplayer needs learn more about it with the link in the description or download the project files for this video and also check out my two free courses to see how this multiplayer game was built from scratch whilst writing some good clean code and some good projects version alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time foreign
