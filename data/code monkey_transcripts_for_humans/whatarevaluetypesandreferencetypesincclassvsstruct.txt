With timestamps:

00:00 - in this video we're going to go over the
00:01 - differences between valley types and
00:03 - reference types in c-sharp it is
00:05 - extremely important to know differences
00:07 - so you understand what your code is
00:08 - actually doing let's begin
00:10 - [Music]
00:14 - okay so in c-sharp you have several
00:17 - types and mainly they are either valley
00:19 - types or reference types they behave
00:22 - quite differently and can lead to a lot
00:23 - of confusion if you don't know how they
00:25 - actually work reference types store
00:27 - references to their data whereas Valley
00:29 - types directly contain their data an
00:32 - example of valley types are simple types
00:34 - so numeric values like intz or floats
00:36 - and news and boolean our own value types
00:38 - reference types are classes and objects
00:41 - however structs are value types so
00:44 - that's the most important thing to
00:45 - remember especially when it comes to
00:47 - unity dots which is mainly based on
00:49 - struts and not classes arrays of simple
00:52 - types are also reference types as our
00:54 - strengths so with reference types you
00:56 - can have multiple variables holding
00:58 - references to the same exact object
01:00 - whereas with value types each time you
01:03 - do an assignment you are making a copy
01:05 - of the underlying data another
01:07 - difference is reference types can be
01:08 - known whereas value types cannot so for
01:11 - example if you have an a new for your
01:12 - weapon types and the player doesn't have
01:14 - any weapon then you cannot set it to no
01:16 - this video is made possible thanks to
01:18 - these awesome supporters go to
01:20 - patreon.com/scishow
01:22 - code monkey to get some perks and help
01:24 - keep the videos free for everyone let's
01:26 - look at some code to see how they behave
01:28 - differently okay so over here I have a
01:30 - simple script and for example let's
01:32 - define an int which is a value type so
01:35 - here the variable I contains the value 7
01:38 - but now if we make an object now here
01:44 - the variable does not contain this
01:46 - particular object but rather it contains
01:47 - a reference that points to this object
01:49 - so let's test this with a simple class
01:52 - so down here let's define a class
02:01 - all right so here we have a very simple
02:03 - class that contains a single int field
02:06 - now let's create an object of this type
02:08 - so here we do new my class and we pass
02:12 - in our parameter value okay so here we
02:15 - are creating our object and now let's
02:17 - store it in a variable type my class so
02:21 - here we have this object being assigned
02:22 - to this variable now let's make another
02:25 - variable at the same time and we're
02:29 - going to assign it to the same object
02:32 - okay so here we have two different
02:35 - variables now if we modify the value on
02:38 - the second one so you modify the value
02:41 - on the second one and then let's do a
02:43 - simple log on the first value okay so
02:46 - now let's see what happens is it going
02:47 - to print seven or five and there is the
02:50 - console saying five so what we have here
02:52 - is an example of a reference ID both of
02:54 - these variables are just holding
02:56 - references and not the actual object
02:59 - both of them are referencing the same
03:00 - single instance of this object so by
03:03 - going through either variable and
03:05 - modifying it we are actually modifying
03:07 - the underlying object so that's how
03:09 - reference apps works now let's look at
03:11 - valley types so let's define a simple
03:16 - int now let's define a second int and
03:20 - let's do the same assignment that we did
03:23 - on the class test and now here we modify
03:26 - the value of V so now the question is
03:29 - what do you think the value will be when
03:30 - we look into a sum let's see if it says
03:34 - 7 or 5 and there it is and the answer is
03:37 - 7 so the reason is because an int is a
03:40 - value type and not a reference type so
03:43 - when we assign a to the variable B we
03:46 - are not passing a reference to the
03:47 - original data but rather a copy of that
03:49 - original data so first we assign 7 into
03:52 - a then we're assigning a copy of what's
03:55 - on a so a copy of 7 onto B and then here
03:58 - we're modifying the copy inside B which
04:00 - has no relation to the data inside of a
04:02 - and now the scenario where it's most
04:04 - important to know this difference is
04:06 - when working with structs when writing
04:08 - unity dots code you will mainly be
04:10 - working with structs so it's very
04:11 - important to learn this so here let's go
04:14 - pretty much the same structure of our
04:15 - class except we're going to make it a
04:17 - struct so there it is exactly the same
04:21 - structure except this is a class and
04:23 - this is a struct and now let's go up
04:25 - here and copy the exact same test all
04:38 - right so here we have the same test one
04:40 - with classes and one with structs so we
04:42 - first create our object then we assign a
04:44 - second variable to the first object and
04:47 - we modify the second object and then we
04:50 - print what's on the first object all
04:52 - right so let's test any of their days
04:54 - with a class we have a value of five but
04:56 - with a struct we have a value of seven
04:58 - so here we're doing the exact same
04:59 - actions and this difference is exactly
05:01 - the difference between value types and
05:03 - reference types structs are value types
05:05 - so when we assign this object into this
05:07 - second variable we're not passing a
05:10 - reference to the first object but rather
05:11 - a copy of that object so each of these
05:14 - variables contains a different instance
05:16 - of our struct and when we modify the
05:18 - second one we're only modifying the copy
05:20 - inside the second variable so the first
05:23 - one does not get modified at all whereas
05:25 - with the class we have our variables
05:26 - holding references to the original
05:28 - object so modifying either of them
05:30 - modifies the underlying object that both
05:32 - of them reference so now let's look at
05:34 - what this means in unity dots okay so
05:41 - down here let's make a simple job all
05:49 - right here's our basic job we just
05:50 - implement a job that's it and now as you
05:53 - know one of the limitations inside jobs
05:55 - is we cannot use reference types only
05:57 - value types so we're here we cannot have
05:59 - a field for our my class but we can't
06:01 - have a field for our my struct
06:03 - so inside let's say we want to do some
06:05 - math and increase all of the values
06:06 - inside an array so here as you can see
06:14 - if we try to use a my class inside our
06:16 - native write we have an error we cannot
06:18 - use this but we can use our my Strutt
06:22 - now one thing which is normal arrays are
06:25 - actually reference types but native
06:27 - is a special type of array to work
06:29 - specifically with the job system so now
06:31 - here on our execute method let's simply
06:33 - cycle through all the elements in the
06:35 - array alright so there it is very simple
06:44 - we cycle through the array we grab the
06:46 - element in that position and we increase
06:47 - the underlying value it's now up here
06:49 - let's test this out alright so here
07:15 - we're in Senshi a ting our native array
07:17 - we're starting it with three elements
07:19 - then we create our job we pass in our
07:22 - native array and then we run our job so
07:24 - now afterwards
07:25 - well let's cycle through our native
07:27 - array and do a debug log alright so just
07:33 - like that we should be able to see all
07:34 - these values increase by one let's see
07:37 - and nope what we have here are still the
07:39 - original values so what's happening here
07:41 - is related to structs being a valley
07:43 - type and not a reference type if we were
07:45 - working with a class this would work
07:47 - since we would be modifying the
07:48 - underlying object but since here we are
07:51 - working with structs when we modify this
07:53 - value we're modifying the copy that was
07:55 - a sign into this variable so when
07:57 - working the structs we can modify our
07:58 - data just like this but afterwards we
08:01 - need to place our updated copy back in
08:03 - the array so we go back into the native
08:06 - array on the same index and replace our
08:08 - struct and now if we test and yep there
08:11 - it is now it's correctly incrementing
08:13 - all of the valleys so this one the
08:15 - things you have to watch out for when
08:16 - working with structs now there is one
08:19 - way you can work with value types as if
08:20 - they were reference types
08:21 - so let's saying here we have a function
08:24 - that takes an INT and increments
08:35 - so we have a function that increments an
08:37 - INT appear with fine and we call the
08:39 - function and then we dual Gandhi on now
08:41 - as you might guess what we're doing here
08:42 - is incrementing the copy that this
08:44 - function receives and not the underlying
08:46 - variable in here so just like that we
08:48 - still have a five inside of our variable
08:50 - however what we can do is at the ref
08:53 - keyword we have both on the definition
08:55 - of the parameter as well as in here now
08:58 - what this does is instead of passing a
09:00 - copy of data we're passing the reference
09:02 - even though we're using a value x and
09:04 - yep just like that we are modifying the
09:06 - original variable even though it is a
09:08 - value type also as I said before value x
09:11 - cannot be known so for example we cannot
09:14 - do an int I equals No
09:15 - as you can see it's an error however a
09:18 - c-sharp has an interesting feature
09:20 - called null bonds so if we define our
09:22 - int and put a question mark at the end
09:24 - by doing so this makes it a knowable so
09:27 - we can now set the variable to not
09:28 - putting a question mark at the end is
09:30 - the same thing as defining it as
09:32 - knowable of type so here this is the
09:35 - underlying type which is you can see it
09:38 - takes the T as a struct or a family-type
09:40 - and you can see it has a bunch of
09:42 - functions to test if it has a value and
09:43 - to get the underlying value for example
09:46 - we could have the enou or our weapon
09:48 - types and here we have a variable for
09:57 - the weapon that player is currently
09:58 - holding and again weapon types is in a
10:02 - new much is a family type so we cannot
10:03 - set it directly to know so in this case
10:05 - for example we could make the snow go
10:07 - and then we could define it as null if
10:09 - the player was not holding any weapons
10:10 - so here we learned about the differences
10:12 - between valley types and reference types
10:14 - this is extremely important to know
10:16 - especially when working with unity dots
10:18 - in order to benefit from the massive
10:20 - performance boosts of the Java system
10:22 - and burst we need to work with structs
10:24 - so we need to know how they won't behave
10:25 - now that you have this knowledge you
10:27 - will no longer be confused when making a
10:29 - job and the contents are not updated
10:31 - this video is made possible thanks to
10:32 - these awesome supporters go to
10:34 - patreon.com/scishow natee code monkey to
10:37 - get some perks and help keep the videos
10:38 - free for everyone as always you can
10:40 - download the project
10:41 - the newtonís from mt karma calm
10:43 - subscribe the channel for more unity
10:45 - tutorials post any questions have
10:47 - accounts and I'll see you next time
10:50 - [Music]

Cleaned transcript:

in this video we're going to go over the differences between valley types and reference types in csharp it is extremely important to know differences so you understand what your code is actually doing let's begin okay so in csharp you have several types and mainly they are either valley types or reference types they behave quite differently and can lead to a lot of confusion if you don't know how they actually work reference types store references to their data whereas Valley types directly contain their data an example of valley types are simple types so numeric values like intz or floats and news and boolean our own value types reference types are classes and objects however structs are value types so that's the most important thing to remember especially when it comes to unity dots which is mainly based on struts and not classes arrays of simple types are also reference types as our strengths so with reference types you can have multiple variables holding references to the same exact object whereas with value types each time you do an assignment you are making a copy of the underlying data another difference is reference types can be known whereas value types cannot so for example if you have an a new for your weapon types and the player doesn't have any weapon then you cannot set it to no this video is made possible thanks to these awesome supporters go to patreon.com/scishow code monkey to get some perks and help keep the videos free for everyone let's look at some code to see how they behave differently okay so over here I have a simple script and for example let's define an int which is a value type so here the variable I contains the value 7 but now if we make an object now here the variable does not contain this particular object but rather it contains a reference that points to this object so let's test this with a simple class so down here let's define a class all right so here we have a very simple class that contains a single int field now let's create an object of this type so here we do new my class and we pass in our parameter value okay so here we are creating our object and now let's store it in a variable type my class so here we have this object being assigned to this variable now let's make another variable at the same time and we're going to assign it to the same object okay so here we have two different variables now if we modify the value on the second one so you modify the value on the second one and then let's do a simple log on the first value okay so now let's see what happens is it going to print seven or five and there is the console saying five so what we have here is an example of a reference ID both of these variables are just holding references and not the actual object both of them are referencing the same single instance of this object so by going through either variable and modifying it we are actually modifying the underlying object so that's how reference apps works now let's look at valley types so let's define a simple int now let's define a second int and let's do the same assignment that we did on the class test and now here we modify the value of V so now the question is what do you think the value will be when we look into a sum let's see if it says 7 or 5 and there it is and the answer is 7 so the reason is because an int is a value type and not a reference type so when we assign a to the variable B we are not passing a reference to the original data but rather a copy of that original data so first we assign 7 into a then we're assigning a copy of what's on a so a copy of 7 onto B and then here we're modifying the copy inside B which has no relation to the data inside of a and now the scenario where it's most important to know this difference is when working with structs when writing unity dots code you will mainly be working with structs so it's very important to learn this so here let's go pretty much the same structure of our class except we're going to make it a struct so there it is exactly the same structure except this is a class and this is a struct and now let's go up here and copy the exact same test all right so here we have the same test one with classes and one with structs so we first create our object then we assign a second variable to the first object and we modify the second object and then we print what's on the first object all right so let's test any of their days with a class we have a value of five but with a struct we have a value of seven so here we're doing the exact same actions and this difference is exactly the difference between value types and reference types structs are value types so when we assign this object into this second variable we're not passing a reference to the first object but rather a copy of that object so each of these variables contains a different instance of our struct and when we modify the second one we're only modifying the copy inside the second variable so the first one does not get modified at all whereas with the class we have our variables holding references to the original object so modifying either of them modifies the underlying object that both of them reference so now let's look at what this means in unity dots okay so down here let's make a simple job all right here's our basic job we just implement a job that's it and now as you know one of the limitations inside jobs is we cannot use reference types only value types so we're here we cannot have a field for our my class but we can't have a field for our my struct so inside let's say we want to do some math and increase all of the values inside an array so here as you can see if we try to use a my class inside our native write we have an error we cannot use this but we can use our my Strutt now one thing which is normal arrays are actually reference types but native is a special type of array to work specifically with the job system so now here on our execute method let's simply cycle through all the elements in the array alright so there it is very simple we cycle through the array we grab the element in that position and we increase the underlying value it's now up here let's test this out alright so here we're in Senshi a ting our native array we're starting it with three elements then we create our job we pass in our native array and then we run our job so now afterwards well let's cycle through our native array and do a debug log alright so just like that we should be able to see all these values increase by one let's see and nope what we have here are still the original values so what's happening here is related to structs being a valley type and not a reference type if we were working with a class this would work since we would be modifying the underlying object but since here we are working with structs when we modify this value we're modifying the copy that was a sign into this variable so when working the structs we can modify our data just like this but afterwards we need to place our updated copy back in the array so we go back into the native array on the same index and replace our struct and now if we test and yep there it is now it's correctly incrementing all of the valleys so this one the things you have to watch out for when working with structs now there is one way you can work with value types as if they were reference types so let's saying here we have a function that takes an INT and increments so we have a function that increments an INT appear with fine and we call the function and then we dual Gandhi on now as you might guess what we're doing here is incrementing the copy that this function receives and not the underlying variable in here so just like that we still have a five inside of our variable however what we can do is at the ref keyword we have both on the definition of the parameter as well as in here now what this does is instead of passing a copy of data we're passing the reference even though we're using a value x and yep just like that we are modifying the original variable even though it is a value type also as I said before value x cannot be known so for example we cannot do an int I equals No as you can see it's an error however a csharp has an interesting feature called null bonds so if we define our int and put a question mark at the end by doing so this makes it a knowable so we can now set the variable to not putting a question mark at the end is the same thing as defining it as knowable of type so here this is the underlying type which is you can see it takes the T as a struct or a familytype and you can see it has a bunch of functions to test if it has a value and to get the underlying value for example we could have the enou or our weapon types and here we have a variable for the weapon that player is currently holding and again weapon types is in a new much is a family type so we cannot set it directly to know so in this case for example we could make the snow go and then we could define it as null if the player was not holding any weapons so here we learned about the differences between valley types and reference types this is extremely important to know especially when working with unity dots in order to benefit from the massive performance boosts of the Java system and burst we need to work with structs so we need to know how they won't behave now that you have this knowledge you will no longer be confused when making a job and the contents are not updated this video is made possible thanks to these awesome supporters go to patreon.com/scishow natee code monkey to get some perks and help keep the videos free for everyone as always you can download the project the newtonís from mt karma calm subscribe the channel for more unity tutorials post any questions have accounts and I'll see you next time
