With timestamps:

00:40 - ah
01:04 - so
02:00 - so
02:27 - so
02:56 - all right hey everyone how's it going
03:00 - all right
03:02 - hope you're all doing well today
03:08 - okay everything seems nice all right
03:12 - okay so i got a bit of interesting thing
03:15 - that i want to research and i figured
03:16 - i'd do it on live stream so this should
03:18 - be interesting
03:19 - i'm going to play around with hex grids
03:22 - which is pretty much just math but it's
03:24 - actually pretty simple math so that
03:25 - should be interesting so
03:27 - let's see
03:31 - map should be similar to isometric i'm
03:33 - going to be doing this the math in a
03:35 - well i was going to say in 3d but
03:37 - actually the plan the plane is in 2d xz
03:41 - but yeah
03:42 - so let's do it
03:45 - a star would actually be quite simple i
03:47 - mean i haven't done it yet but i'm
03:49 - pretty sure a7 will be super simple
03:50 - because a star is all about calculating
03:52 - the neighbors so the only difference
03:54 - between a grid and the hex grid is that
03:56 - the hex grid has six neighbors whereas
03:59 - the regular grid has three six eight so
04:03 - that's pretty much the only difference
04:04 - just with that difference i'm pretty
04:05 - sure it won't work but anyways before
04:07 - that i want to make sure the basics of
04:08 - the hex work so
04:11 - let's do some research and try to figure
04:12 - out if all of this works okay
04:16 - so i got my notes here the things that i
04:17 - want to test basically did a bunch of
04:19 - research to try to figure out what is
04:21 - the math required to
04:22 - make this work so let's give it a shot
04:26 - and by the way i got a video coming out
04:28 - in about 40 minutes
04:30 - it's about the unity art bundle
04:33 - so there was a tools bundle last week
04:34 - and now there's a art bundle
04:36 - so if you want go ahead and check that
04:38 - out afterwards the uh
04:41 - the regular video doing an overview is
04:42 - coming out in a bit but anyways over
04:44 - here let's start
04:47 - working with hexes i made a nice simple
04:49 - visual just to verify that everything is
04:51 - working
04:52 - so all right
04:55 - it should make a star faster with fewer
04:57 - neighbors uh yeah technically although
05:00 - the neighbors part if your a star is
05:02 - well optimized the neighbor's
05:03 - compilation shouldn't be too difficult
05:05 - but
05:06 - yeah technically yeah
05:07 - yep hexagons are bestigons yeah
05:10 - they are great
05:12 - i really gotta re-watch that video from
05:15 - cgp gray that was great
05:17 - i haven't seen it in quite a while
05:18 - anyways okay
05:20 - so let's figure it out typography
05:23 - oh that's awesome i hope you're enjoying
05:25 - it i hope you're on learning a lot
05:27 - took a lot of work but i'm really happy
05:28 - with how it came out and actually what
05:30 - i'm working on here this is going to be
05:31 - a free update to the course
05:34 - pretty much just converting the game of
05:35 - the course from working with regular uh
05:38 - rectangular grids to working with hex
05:40 - grids so that's going with all this
05:42 - research so let's figure out
05:44 - how it all works
05:47 - okay right so let's try doing some work
05:51 - okay so i got my notes here
05:54 - so the whole thing is a bunch of math
05:55 - but it's actually some pretty simple
05:57 - math
05:57 - i'm not very good at math so if you like
06:00 - me are also not very good at math then
06:02 - this should all be
06:03 - nicely understandable
06:05 - so let's start making a script just
06:07 - write some code and test it out okay
06:09 - let's go on a test hex grid
06:12 - and make a game object
06:18 - human brains use hex grids to make
06:20 - internal maps for navigation is that
06:22 - right
06:23 - oh that's quite interesting
06:26 - only working on your 2d build defender
06:28 - core so that's great yeah i really like
06:30 - that that game that was a
06:33 - a very fun design nice mix of building
06:35 - defending that was really fun i'm quite
06:37 - happy with the design of that game that
06:38 - was nice
06:40 - okay so here now the first thing that i
06:42 - want is well let's actually just hide
06:45 - the visual on the floor
06:47 - but don't leave the collider
06:49 - yeah right let me first just make sure
06:51 - that my mouse 3d script make sure this
06:53 - is working
06:54 - so over here
06:56 - let's put it on the ground layer on the
06:58 - mouse 3d
06:59 - let's put it also hit the ground layer
07:01 - and let me just make a quick visual for
07:03 - it
07:04 - so just a sphere put it super tiny
07:09 - and let's make a nice material just to
07:10 - make it glow nicely
07:13 - so mouse
07:16 - and on the sphere
07:18 - drag it
07:19 - and to make it fun let's enable emission
07:22 - nice screen and blow it up okay great
07:25 - so
07:26 - now for my camera just make sure that
07:28 - it's looking correctly so let's say i'm
07:30 - looking down here
07:32 - and okay
07:33 - all right
07:36 - so about making a hex based game that
07:39 - plays like an adventure board game
07:41 - yeah adventure or board games they are
07:45 - very usually working with hexes so
07:48 - yeah this is very useful to know okay
07:50 - why is this
07:53 - did i not make the
07:55 - does the cube not have a call either it
07:57 - does have a collector
08:00 - it's on the ground and all right i
08:03 - didn't drag it that's why
08:05 - okay let's just make sure that the mouse
08:07 - 3d is working
08:10 - and nope not working yet
08:12 - why isn't it working that's strange
08:15 - i also want to make a sphere planet with
08:17 - hex grids yep there was a a game what
08:20 - was that called
08:22 - uh
08:23 - what was that called before we leave i
08:26 - think that's it
08:27 - yeah this one
08:28 - really awesome it's a hex grid on a
08:32 - spherical planet that is a really
08:34 - awesome art style so yeah if you wanted
08:36 - to build something like this yeah that's
08:37 - pretty much just
08:38 - make a hex grid and somehow attach it
08:41 - into a sphere
08:43 - it's really nice
08:44 - yeah i've had this game on my two
08:46 - playlists for quite some time because it
08:48 - looks really interesting nice management
08:49 - building
08:50 - on a hex vertical world really cool
08:53 - okay um
08:55 - why was this one not
08:57 - working did i not
08:59 - examine the
09:02 - muscle position the recast using the
09:04 - mouse
09:06 - is this one not kidding that's strange
09:10 - [Applause]
09:16 - next i got oh right never mind i put
09:18 - this one on the wrong layer that's why
09:20 - it doesn't work of course um take it out
09:23 - put it on the ground okay
09:27 - all right there you go okay so my mouse
09:29 - is indeed working
09:31 - for the king was a popular isn't that an
09:34 - adventure game something like that
09:37 - i remember that name
09:38 - yeah that looks nice
09:42 - that yep pretty nice
09:44 - yup nice adventure hexes
09:47 - yep really nice i miss your dodge
09:49 - tutorials well when that's 1.0 comes out
09:51 - you can definitely expect a lot of them
09:54 - coming since i really enjoy the tech
09:56 - behind dots so yep once it hits 1.0
09:58 - definitely going to do a lot of things
10:00 - with it
10:01 - definitely going to be interesting okay
10:02 - anyway so i've got i just wanted to make
10:04 - my mouse
10:06 - just to make the most visual work
10:08 - just so i know i am okay
10:10 - so
10:11 - now let's first just flatten out
10:14 - this one so put it like that for 190
10:17 - degrees and maybe put the camera a bit
10:20 - more
10:20 - up
10:22 - just so i can actually test out okay put
10:24 - the camera right in here all right
10:26 - so now on the script
10:29 - let's just do a quick update
10:32 - and on update let's do
10:35 - a debug.log on the mouse 3d and let's
10:38 - get the mouse 1 position
10:40 - okay so let's see and make sure that the
10:42 - scale of this is indeed
10:44 - correct see working with hexagonal
10:47 - tunnels yep hexagons are awesome so
10:51 - and hopefully after the research that
10:52 - i've done it should be pretty simple to
10:54 - implement this
10:56 - so let's hope so oh and left the other
10:57 - log okay so anyways on that corner i've
11:00 - got
11:01 - 0.5 0 and 0.25 yep exactly what i'm
11:03 - expecting
11:04 - 0.5 yep exactly like that
11:07 - that one is
11:10 - yup exact
11:11 - all right so far the scale of my
11:16 - of my nice squad is indeed working
11:18 - because i made the squad i drew this in
11:20 - photoshop actually photoshop has a nice
11:22 - tool for making hexagons that was
11:24 - interesting
11:25 - and uh pretty much yeah so i've got
11:28 - all these points and the hex pretty much
11:30 - has a certain distance from the center
11:31 - to the side which happens to be 0.5 so
11:34 - this entire width is one unit
11:36 - and then this point over here this is
11:38 - the tricky thing i thought it i thought
11:39 - i was going to get it based on an angle
11:41 - but now really to calculate this point
11:43 - i'm going to have to start from the
11:44 - center go to the right by half the size
11:48 - then go up i also have the size so that
11:49 - is why this one is on 0.5 and 0.25 this
11:53 - is pretty much that exact point
11:56 - okay so let's first keep track of all
11:59 - the points calculate where all of them
12:01 - are
12:02 - and then i'm going to
12:04 - start identifying if a certain point is
12:06 - within or outside of the of the mesh all
12:11 - right okay so let's start completing
12:12 - those points all right
12:16 - so over here let's make
12:18 - a
12:19 - simple class private class
12:22 - what am i going to call it a
12:24 - well just hexagon i guess
12:26 - and i'm going to have a vector three
12:30 - let's figure out the name so i've got
12:33 - upper upper upper all right so an upper
12:36 - right corner
12:40 - yeah and the other one do i call it
12:41 - upper corner yeah i guess so so if only
12:43 - the three for the upper corner
12:45 - then i'm going to have the upper and
12:47 - left corner and then the ones down here
12:50 - so the lower left corner just the lower
12:54 - corner and the lower right corner
12:57 - okay so those are the six points on a
12:58 - hexagon so pretty much that is the upper
13:01 - right the upper upper left lower left
13:03 - lower and lower right okay great vertex
13:06 - instead of corner
13:08 - yeah i guess technically those two names
13:10 - would work corner vertex
13:13 - i guess vertex kind of means a mesh
13:14 - whereas i want it to be more abstract
13:16 - than an actual mesh but yeah even though
13:18 - in a bit i do want to make a
13:20 - dynamic mesh but okay
13:22 - so now let's first manually create a
13:24 - hexagon then going to do it procedurally
13:28 - so let's create a new one now
13:31 - for the well let me define a vector
13:33 - three for the hexagon
13:35 - center point so i actually gotta
13:38 - i need this as well so vector three for
13:40 - the center point
13:43 - writing each of those trying to put them
13:44 - in one line separated back out just
13:46 - because i don't like that at all i find
13:48 - that very confusing to read something
13:49 - like this one field in one line
13:51 - personally i find this much easier to
13:53 - read
13:53 - but yep as would always as with so many
13:56 - things when it comes to code readability
13:57 - it's whatever works for you so if you
13:59 - don't like that then by all means do
14:01 - that
14:02 - come past directions yeah that is also
14:04 - interesting but for me i always have a
14:06 - always takes about half a second in my
14:08 - brain to try to figure out okay west is
14:10 - that left or right
14:12 - i never quite know the east-west thing
14:14 - that is always triggered to me so that
14:16 - is why
14:16 - i stick with upper and lower instead of
14:19 - east-west and so on okay the center
14:21 - point let's put it on factor 3.0
14:24 - and then over here let's put the center
14:27 - point equals the hexagon center point
14:29 - all right
14:31 - and actually
14:33 - yeah i might as well put it
14:35 - over here or do i make that i don't know
14:37 - i mean i'm just doing this for testing
14:39 - this is going to be
14:40 - all refactored in quite a bit
14:42 - but
14:43 - let's do it like this okay vector three
14:45 - for the center point
14:47 - and i'm going to receive this center
14:49 - point all right and then inside of this
14:51 - one instead of creating it like this
14:53 - let's do a new one pass in down
14:56 - like that and then on this one let's do
14:58 - the compilations
15:00 - and i need the center point as well as
15:02 - the size of course otherwise i can't
15:03 - figure out where it is so a float for
15:06 - the size and look at that a custom
15:08 - character hello
15:10 - that's nice that's awesome by the way
15:12 - all of you you can all get custom
15:14 - characters you can just follow this
15:17 - nice little tutorial you can get your
15:19 - character you can just download the
15:20 - sprite sheet you can draw on top of it
15:22 - and your character will look nice and
15:24 - custom so if you want go ahead and play
15:26 - around that okay
15:27 - as soon as you are into the tiles with
15:28 - the points up yep
15:30 - yeah i might see how to rotate them but
15:33 - yeah for now i saw this if you want to
15:35 - learn pretty much this is the website
15:37 - that i learned a lot from it this is
15:40 - super detailed website so if you want to
15:41 - learn more about hexagons definitely
15:43 - check that out but yep this is pretty
15:44 - much the style that i'm going to be
15:46 - building so with a pointy top instead of
15:48 - a flat top so this kind of thing that
15:50 - i'm doing so i got the size over here
15:52 - the size up here then size half to get
15:54 - to this point size after that point and
15:56 - so on
15:57 - okay right so
16:00 - where was i where was i right so i got
16:02 - the point i need to receive the size and
16:04 - i can start calculating so the upper
16:06 - right corner
16:07 - this one
16:09 - and do i call it size or size half
16:11 - that's a good question
16:13 - let's say size half yeah that's probably
16:19 - okay let's go with size
16:20 - all right so the upper right corner is
16:22 - going to start off from the center point
16:24 - then i want to move to the right
16:26 - so vector
16:28 - oh that's a tricky thing
16:32 - oh actually that's freaking i'm trying
16:33 - to think in terms of
16:35 - x y x z
16:40 - the every online method
16:43 - take a square grid and shift if y'all
16:45 - yep that's that's pretty much what i'm
16:47 - going to do right now i'm mainly focused
16:48 - on the math of trying to figure out is a
16:50 - certain point inside a hex or not that's
16:52 - that's kind of thing okay so
16:54 - here a bit of a tricky issue because i'm
16:57 - trying to get this to work with xz plane
17:00 - so instead of using the default ones i'm
17:02 - going to be using like this okay so for
17:04 - the upper right corner i got to move to
17:06 - the right by half the size so for the
17:09 - right that is going to be one zero zero
17:11 - so that is movement to the right
17:12 - multiplied by size multiplied by point
17:15 - five f
17:16 - for let's define here the half size
17:18 - equal size times 0.5 up okay
17:21 - so then i multiplied by that so that
17:24 - puts me to the right and to get the
17:25 - upper right corner then i got to lift it
17:27 - up so pause a new vector3
17:30 - except up in this context is up on the
17:32 - zen so 0 0 1
17:35 - multiplied by
17:37 - and actually i think it's half size
17:39 - times 0.5
17:40 - right
17:43 - would it be very unperformant to have a
17:45 - collector on each hex yeah that that
17:47 - approach does work and it is indeed
17:50 - uh simpler than using math but yeah that
17:52 - is going to reach into
17:54 - scalability issues pretty quickly so
17:57 - yeah that's
17:58 - that is one option that you can do if
18:00 - your game is limited but i really want
18:02 - to do this proper
18:04 - proper approach using math because this
18:06 - one is going to be easily
18:08 - easily expandable scalable and so on
18:11 - what portuguese city are you based i'm
18:13 - in lisbon
18:14 - you can use radiant math with
18:16 - yeah i mean for me math and angle is
18:19 - already tricky enough and radiance
18:20 - becomes even more tricky so
18:22 - yeah i definitely stick with euler as
18:24 - much as possible
18:26 - okay uh
18:27 - [Music]
18:29 - right so i want to go to the right i
18:30 - want to go up but i want to go up by
18:32 - half size times 0.5 so i think this is
18:34 - correct because basically i've got the
18:36 - center point here i want to go to the
18:37 - right by my half size which is this
18:40 - distance
18:41 - however when going up
18:43 - is it also half size
18:46 - no i think it's half size
18:49 - exactly it's not half size it's half
18:51 - size but half of that half off size okay
18:54 - that's a bit confusing but yeah okay so
18:57 - i think this point
18:59 - should be correct so let's do a
19:00 - debug.log try to figure out and see if
19:03 - this corrects over here just got to
19:05 - define a float for the size and for the
19:07 - size let's put one unit so got point
19:09 - five on each side all right
19:12 - okay so let's
19:14 - try it out
19:17 - all right
19:22 - so all right because i got the mouse
19:26 - in the middle
19:29 - uh yeah let me take away the mouse but
19:32 - yeah the other one did work this one is
19:34 - indeed on 0.5 and 0.25 and it is indeed
19:37 - correct so if i put a new one and i put
19:39 - it on 0.5 0.25 and yep it is that point
19:42 - all right great
19:44 - okay so far so good
19:46 - turn on full body fps character you
19:48 - really need to be more specific than
19:50 - that
19:52 - what do you mean by phone body what do
19:53 - you mean by things what do you mean by
19:55 - fps i've got a video on a
19:58 - third person shooter
20:00 - so if you want look at that one third
20:02 - person or first person works pretty much
20:04 - the same and if you want to see how to
20:06 - work with animation rigging to make the
20:07 - weapon name perfectly look at that so
20:10 - pretty much something like that
20:12 - okay right so the first point is indeed
20:14 - working permanently so the upper right
20:15 - corner that is perfect so now doing all
20:17 - the others should be pretty simple so
20:19 - let's do the upper and left corner
20:21 - and for the upper left i go up by center
20:24 - point okay then instead of that go in
20:26 - minus one and then up by that yep
20:29 - now for the
20:31 - let's go the other which is the upper
20:33 - corner so the upper corner is on the
20:34 - center point and i just move up
20:36 - by half the size so that is just zero
20:39 - just one by the
20:41 - half size yep that is correct all right
20:43 - so the upper corner and the lower corner
20:45 - both these are super simple so the lower
20:48 - corner
20:49 - okay
20:51 - so i got those then for the other ones
20:55 - so for the lower left corner and the
20:57 - lower right corner let's see these two
20:59 - okay so for the lower right i start on
21:01 - the center point
21:03 - then i gotta move to the right so this
21:04 - one is a plus one by half the size and
21:06 - then i gotta move down by half size
21:09 - minus point yup that's pretty much it
21:12 - okay all right so i think
21:14 - i think these are working already hey
21:17 - great uh
21:18 - how do i print all this out without
21:20 - being one by one how about if i convert
21:21 - into json just for fun
21:23 - so to json but not this one let's put it
21:26 - over here
21:28 - let's convert this hexagon to json and
21:30 - see if this does work if i can read all
21:32 - the points
21:34 - okay
21:36 - all right
21:38 - well so far the math is going good
21:40 - although so far it's all the
21:42 - simple stuff yeah okay let's see
21:48 - so
21:50 - for all of these this be available in
21:53 - standalone youtube video later yep and
21:55 - actually i think for this one i made it
21:57 - on uh yeah this one will show up as a
21:59 - regular video yeah which is going to be
22:01 - interesting because i've got a standard
22:03 - video coming out in 20 minutes so then i
22:05 - have no idea how you how you how youtube
22:08 - is going to handle
22:09 - uh
22:10 - having one video in one one live stream
22:12 - coming out on the same day so that's
22:14 - going to be an interesting experiment to
22:16 - see what that does to the analytics
22:18 - okay right so this one i'm pretty sure
22:20 - that it works so for the center point on
22:21 - zero zero zero okay makes sense the
22:23 - right corner is on point five point
22:25 - twenty five yep the upper corner zero
22:27 - zero point five all right awesome then
22:29 - the upper left is to the left by minus
22:31 - point five then by point twenty five yep
22:33 - and for the lower left going left then
22:35 - down yep and lower corners just down and
22:38 - the lower right corner to the right and
22:40 - all right great
22:41 - okay so using some math using a center
22:44 - point i am now calculating all the
22:45 - various points okay
22:48 - so now let's figure out the logic for
22:50 - testing if a point
22:52 - is inside a hexagon okay
22:56 - so now let's see all this logic
23:02 - carbon direction is up you can simplify
23:04 - as left right
23:06 - trapezoid i'm not sure what that means
23:09 - cardinal direction is up
23:13 - are you saying use angles instead
23:18 - well let's see okay so i've got the okay
23:21 - so now let's define a point well the
23:23 - point is going to be the so a vector 3
23:25 - for the test point
23:27 - and the test point is going to be the
23:29 - mouse 3d
23:31 - dot get the mouse world position okay so
23:33 - this is going to be my test point now
23:35 - the first thing that i'm going to test
23:37 - is if it's within the horizontal so test
23:40 - if the test point
23:42 - test
23:44 - test point dot x
23:46 - if it is under the
23:48 - if exactly because it is the okay that's
23:50 - going to be interesting converting into
23:52 - local in global space that is going to
23:54 - be
23:55 - interesting um okay so for the hexagon
23:59 - dot i want to test the x if it's under
24:01 - the right side so let's go into the yeah
24:04 - i can use either of these the upper or
24:05 - the lower okay
24:07 - and
24:08 - testpoint.x is above hexagon dot
24:12 - upper and left corner
24:14 - okay so if it is this one debug.log
24:16 - let's do it
24:18 - inside horizontal
24:23 - and let's put analog so it doesn't
24:26 - break
24:31 - okay so the test point and the x
24:34 - all right great
24:36 - okay so let's see if that simple test is
24:38 - now working and does detect if it is
24:40 - within the
24:42 - inside bounds
24:44 - so if i'm here this one is outside and
24:46 - as i go there yep i'm inside and if i go
24:49 - to the other side okay now i'm outside
24:51 - and now i'm inside all right so i can
24:52 - detect if the mouse is within the left
24:54 - and right but of course it's still
24:56 - detecting over here as being inside when
24:57 - it's outside
24:59 - okay and also the text up here so next
25:02 - let's test under the width and height
25:07 - axial coordinates i'm not sure what that
25:10 - means you mean angles
25:13 - or do you mean low compositions
25:16 - so i gotta say math is not my strong
25:18 - point so if you give me technical terms
25:21 - yeah i'm not going to be able to
25:22 - understand but uh yeah okay so with this
25:24 - i am inside the horizontal now it says
25:27 - if it's inside the
25:29 - the vertical as well
25:31 - so if the test point that's zen if the z
25:34 - is under the hexagon dot upper corner
25:37 - dot z
25:38 - and the test point dot z
25:40 - is above the hexagon dot lower corner
25:44 - lower corner dot z
25:46 - if so
25:48 - then it is inside
25:49 - so let's see
25:51 - log
25:52 - except this time is inside the vertical
25:55 - although it's not really vertical but
25:57 - yep okay
25:59 - all right so let's see
26:07 - about just the closest hex position to
26:09 - the
26:11 - mouse position yeah that would not just
26:13 - testing distance wouldn't work because
26:15 - by testing distance you're essentially
26:16 - just testing around a circular radius so
26:18 - it would kind of break over here on
26:20 - these edge cases you would select the
26:22 - wrong one
26:23 - so yeah just doing like that wouldn't
26:25 - quite work
26:31 - split into two quads in left and right
26:33 - yep i do i do on this uh
26:36 - this really nice website over here there
26:38 - was
26:40 - a part where they mentioned they
26:41 - mentioned something interesting here
26:43 - about
26:44 - quadrants
26:46 - okay it wasn't on this one maybe it was
26:48 - another one but yeah so pretty much i
26:49 - want to test if it's inside the right
26:52 - and the left side then i want to make
26:54 - sure if it's within the bounds then i
26:56 - want to test is it on this corner if so
26:57 - then i got to test against this angle
26:59 - right here if it's on this quadrant i
27:01 - want to test against this one and so on
27:03 - so pretty much like
27:04 - that okay
27:11 - uh right so what am i testing okay so in
27:14 - here so if i go here i'm inside the
27:16 - horizontal and if i go in here now i'm
27:18 - inside the vertical okay so far so good
27:22 - all right
27:27 - [Music]
27:29 - right okay so i can test it inside the
27:31 - horizontal and vertical so these were
27:32 - the easy parts
27:34 - and now
27:37 - let me let me test just uh before i put
27:40 - all of them together okay so the
27:42 - horizontal and vertical and that does
27:43 - work
27:44 - but now i want to test if it's within
27:46 - that angle because dealing with odd
27:49 - angles that's the tough part
27:52 - so let me figure it out
27:55 - okay so basically the way that i let me
27:57 - check my notes here
27:59 - so basically with my notes i need to use
28:01 - the dot product and i need to use the
28:03 - vector3 dot perpendicular so let me
28:05 - first figure out how that one works
28:09 - to specific new game just working
28:11 - through new game mechanics well i've got
28:12 - my super useful grid system that i've
28:15 - made in so many videos
28:18 - where's my my grid system there you go
28:20 - all of these they're all based on
28:21 - rectangular grid so i'm pretty much
28:23 - working on the mat to be able to convert
28:25 - all of these into a hex grid
28:26 - specifically over here my
28:28 - my turn-based strategy course so this
28:30 - one works on a
28:33 - standard rectangular grid but yeah i
28:35 - pretty much want to
28:36 - research how to be able to convert that
28:38 - and so on make it hex
28:40 - so that's kind of the
28:42 - goal here so pretty much the research
28:44 - that i'm doing here will end up as a
28:47 - free expansion on the course so that
28:48 - should be fun
28:50 - okay
28:51 - so let me try to figure that okay so
28:54 - i'm going to need to so i've got my
28:57 - points now i need to calculate the
28:59 - direction from this point into this
29:00 - point
29:02 - why was i thinking oh right because then
29:04 - i need to rotate it okay
29:06 - so
29:07 - yeah i just finished that course that's
29:09 - awesome i hope you enjoyed it i hope
29:10 - you'll learn a lot all right so let me
29:12 - figure out the direction vector going
29:14 - from the upper right corner into the
29:15 - upper corner
29:17 - so let me do a thing about download here
29:19 - just to see if that does work
29:21 - or actually instead of working inside
29:23 - here let's work outside here okay debug
29:25 - download let's go inside the hexagon
29:28 - let's grab the upper right corner or
29:30 - actually now start on the hexagon dot
29:33 - the upper corner so upper corner minus
29:36 - the upper right corner so this should
29:38 - give me
29:39 - that
29:40 - thing and then let me make another one
29:42 - using that direction and i'm going to
29:44 - use
29:45 - the function which i've never used so
29:47 - vector
29:48 - 2 dot perpendicular except it's not
29:50 - going to work because it's the vector 3
29:52 - so that's going to be interesting
29:57 - uh right so i need only vector three
30:00 - so there from
30:03 - upper right corner
30:06 - is going to be a huge name to upper
30:09 - corner all right so this is this
30:10 - direction
30:13 - so let's get
30:14 - this
30:16 - so that's my direction
30:19 - so that's the one going from there and
30:20 - up and then for the perpendicular except
30:23 - i'm going to need to create a new vector
30:25 - 2 because this only works with vector 2s
30:28 - yeah along variable names i mean at
30:30 - least it's very descriptive so
30:32 - there can be no doubt as to what this
30:34 - variable contains okay
30:36 - so i can only be perpendicular and now
30:39 - let's see i actually don't know if that
30:40 - one is going to rotate that way or that
30:42 - way so
30:43 - let's see
30:52 - okay
30:54 - now let's see what it
30:56 - returns okay
30:58 - so which one is the direction which one
31:00 - is
31:01 - that one so this one is direction from
31:03 - the upper right to the upper corner
31:07 - uh does that actually make sense i
31:09 - actually don't know well that's
31:13 - yeah right i made this test but i don't
31:15 - know how to verify it
31:18 - but technically no yeah it is correct
31:21 - yeah of course going from this point to
31:22 - that point is going to move minus 0.5 on
31:25 - the x and plus 0.25 on the zen yep okay
31:28 - so that is correct and then the other
31:30 - one makes a vector on
31:32 - minus 25 and minus 0.5
31:35 - so i got it in my brain convert that
31:37 - from x y to x z
31:39 - so minus 0.25 is going to move
31:42 - just a little bit
31:44 - and then down so
31:47 - so it is correct basically i just want
31:48 - to i just wanted to know is that going
31:50 - to point in that direction or up here
31:52 - and apparently it is going to point
31:53 - around in this direction which is
31:54 - exactly what i want
31:56 - okay great so that is indeed the vector
31:58 - so that is that one
32:00 - so
32:02 - okay let's think
32:04 - uh i've got a vector 2
32:09 - perpendicular
32:13 - let me store this one yeah this one
32:16 - conversion is difficult i might actually
32:18 - have to make my own
32:20 - vector two perpendiculars vector three
32:22 - does not have a perpendicular nope it
32:24 - does not so yeah i'll probably have to
32:26 - make my own sort of utility function so
32:29 - i don't end up with very massive
32:30 - conversions between vector twos and
32:32 - factor threes
32:34 - okay so i've got
32:37 - a vector three
32:40 - so uh
32:42 - oh boy this is
32:44 - tricky
32:51 - oh god this is a tough name to figure
32:53 - out so
32:54 - direction to center except it's not
32:57 - really direction to the center but yeah
32:59 - anyways
33:00 - so let's figure that out in a bit so
33:02 - perpendicular dot x then zero on the y
33:04 - then perpendicular dot z okay so this
33:07 - one is going to be direction to center
33:09 - and now for the final thing that i
33:10 - actually want to use that's vector 3 dot
33:14 - and now i always forget which one of
33:15 - these but i think it doesn't matter so
33:18 - if i use
33:19 - this one
33:20 - and then the other direction
33:23 - is the point
33:27 - to the center okay now i'm confused
33:31 - no this one is the direction from that
33:33 - corner to the center
33:34 - so now i want from the test point to
33:36 - that one and if it goes in the same
33:37 - direction then it's correct if not
33:39 - okay so i need the vector three
33:42 - for the direction from test point to
33:48 - uh where am i going test point to the
33:49 - upper right corner
33:52 - okay i'm thinking a lot so sorry if i'm
33:54 - not responding to chat but yeah i'm
33:56 - trying to
33:57 - trying to think so the distance from the
33:59 - test point to the upper right corner so
34:00 - let's go into the hexagon grab the upper
34:02 - right corner minus the test point
34:06 - so this is going to be a certain
34:08 - direction
34:10 - let me do yeah i'm going to need a bunch
34:12 - of logs to make sure that i know what
34:14 - all this is doing
34:17 - and then i got the dot with that one and
34:19 - this one and maybe the dot product will
34:22 - indeed work
34:24 - well let's test let's see what all of
34:26 - this is doing
34:28 - dot
34:31 - okay and let's hide this one all right
34:35 - so let's do a test and try it out
34:38 - and i got an error what did i forget
34:41 - did i not save oh not z dot one okay
34:45 - all right
34:46 - hey there doing great hey thanks for
34:48 - being here with your awesome custom
34:50 - character
34:51 - thank you that's nice
34:53 - all right
34:55 - so let's see if this one does work
34:57 - let me actually zoom in the camera the
34:58 - camera is way too far
35:00 - so let me zoom in the camera so it's a
35:02 - bit easier to see
35:04 - all right
35:06 - okay
35:08 - just rectangle in mid and triggers to
35:10 - check if it hits any of them yeah that's
35:12 - pretty much it
35:14 - okay so
35:15 - first of all the direction
35:17 - from the test point to the upper right
35:19 - corner so if the test point isn't there
35:21 - so if the test point is right to the
35:23 - right
35:25 - then direction from the test point to
35:27 - yep going to the left alright that is
35:28 - perfect
35:29 - and
35:31 - yeah actually it is already working all
35:33 - right awesome so
35:35 - it is working
35:36 - so if i don't like this why is it yeah
35:38 - probably flip the the order around
35:42 - why is that one not approaching one
35:44 - that's a bit strange
35:46 - because it is working but
35:49 - is the magnitude
35:51 - does the dot product does that get get
35:53 - uh
35:54 - confused with magnitude that's probably
35:56 - it so let me just normalize these just
35:59 - to make sure that i see a nice minus one
36:01 - or plus one
36:03 - perpendicular point in the right
36:04 - direction yep it is going inside so that
36:06 - is correct
36:09 - so if i see yep okay so apparently that
36:11 - one does have to be normalized all right
36:12 - awesome so
36:14 - so pretty much over here i'm testing if
36:16 - the
36:16 - the mouse position if it is uh on this
36:20 - side of this line here so comparing
36:22 - against this line is it on this side or
36:23 - on that side and i can test with the dot
36:25 - product so if it's on this side the dot
36:27 - product is on minus one and if it's on
36:29 - that one it's on positive
36:31 - all right and if it is perfectly
36:32 - perpendicular so the other vector is
36:34 - pointing straight around let's see
36:37 - around here so that part the dot product
36:40 - is exactly on minus one and if i point
36:42 - in there it's exactly plus one all right
36:45 - awesome so
36:46 - this is indeed working just for a
36:48 - tutorial well uh yep i won't make a
36:51 - tutorial on how to make a hex word and i
36:53 - will also update my turn-based strategy
36:55 - course to make it work with hexes so
36:58 - this is going to be some very small
36:59 - research
37:00 - all right
37:05 - okay vestagons yep
37:08 - hexagons are vestagons okay now how do i
37:12 - clean up this code so that it's not
37:13 - quite such a mess
37:15 - um
37:18 - i'm trying to figure
37:20 - out what do i call a test direction
37:24 - uh trying to come up with some good
37:26 - names for this so maybe a vector 3 for
37:29 - the
37:31 - uh
37:31 - why not use vs code just because i've
37:34 - used regular visual studio for such a
37:36 - long time so this one
37:38 - works perfectly in fact i think this one
37:40 - what is version
37:43 - yeah i think this one is version 2017
37:44 - but it works perfectly so yeah
37:46 - no reason to switch you got nothing
37:48 - against visual studio code so if you
37:50 - like it definitely use it and for me
37:52 - i won't keep using this okay so let me
37:54 - think about the name
37:58 - what is wrong with the built-in timeline
38:00 - well because i want to learn how hexes
38:02 - work and because the built-in tile map i
38:05 - don't want to be using a time map i want
38:06 - to be using the hex for logic not just
38:08 - for visual so
38:10 - so that is why i want to handle it all
38:12 - by myself okay so let's figure out a
38:15 - good name for this so basically
38:17 - i only need this one in order to
38:18 - calculate the perpendicular that is
38:19 - pretty much the only one that i want
38:22 - ah i guess i i can just go with super
38:25 - long names and then figure out if
38:26 - there's a better name so basically i
38:29 - just want
38:31 - ah i'm annoyed because the
38:33 - the name isn't perfect
38:36 - wrong question is why not dark mode
38:38 - because dark mode burns my eyes that's
38:40 - pretty much it
38:41 - um
38:43 - i'm trying to think the direction of the
38:45 - upper right point down into the center
38:47 - except that is not true
38:49 - but
38:50 - yeah i guess i won't take a bit of an
38:53 - incorrect name
38:55 - as opposed to
38:56 - something that would be way too annoying
38:58 - i'm not sure all right anyway so
39:00 - direction
39:02 - uh upper right corner to center
39:06 - although again it's not exactly like
39:07 - that
39:09 - yeah long names are always better but
39:11 - over here it would technically be
39:13 - the
39:14 - direction upper right corner
39:16 - perpendicular from direction from upper
39:18 - right to upper corner so at that point i
39:20 - think if the name is 100 characters long
39:22 - then at that point it would become quite
39:25 - tricky so yeah i guess let's go with
39:27 - this even though the direction is not
39:28 - technically 100
39:30 - going from that corner to the center
39:31 - it's a bit more
39:33 - offside so yeah
39:35 - we're thinking about jetbrains rather
39:36 - i've heard lots of people uh talk lots
39:39 - of good things about it but
39:40 - i've never actually used it so i don't
39:43 - know basically i'm very happy with
39:45 - visual studio does everything that i
39:46 - wanted to do it allows me to rename it
39:49 - allows me to have
39:51 - it allows me to have
39:54 - colors on all the things so yeah pretty
39:56 - much visual studio works perfectly okay
39:59 - we should set codes for each other
40:00 - instead of similarly naming
40:02 - yeah maybe i mean for these i'm okay
40:04 - with these names they are worthy but i
40:06 - think they are descriptive
40:08 - it's on these ones that are confusing
40:10 - but anyways let's go with this then i'll
40:11 - figure out if i can find out
40:14 - some other name notice me senpai
40:17 - all right that's great i'm glad you
40:18 - enjoyed the videos thank you
40:20 - okay so upper right to center now upper
40:23 - left to center
40:24 - so upper and left corner to center
40:28 - then it's going to be the lower right
40:29 - corner to center
40:32 - right
40:33 - oh that is actually going to be tricky
40:35 - this one i'm not sure if it's going to
40:36 - work exactly as intended but let's go
40:38 - and the upper left corner to center
40:41 - we post this video later yep it won't be
40:44 - posted like oh look at that it's almost
40:46 - 6 p.m
40:47 - because i got a regular video coming out
40:50 - in a bit
40:52 - so
40:53 - yeah it's going to be interesting how
40:55 - that regular video is going to
40:57 - conflict with the live stream which is
40:58 - also going to be started as a video so
41:00 - that is going to be
41:01 - interesting to look at that from the
41:04 - point of view of analytics okay so let's
41:06 - just
41:07 - let's just do this
41:09 - is this part of a bigger project well
41:10 - the research that i'm doing here will
41:12 - eventually
41:13 - turn into a free expansion to my
41:15 - turn-based strategy course so
41:16 - technically yes although i will also
41:18 - make a standalone video so
41:21 - yes and no
41:22 - that is the answer okay
41:24 - so the direction from the upper right
41:26 - corner to the upper corner and i take
41:28 - the upper corner and the upper right
41:29 - corner
41:31 - then i've got to take that one and
41:33 - converting to the perpendicular
41:36 - oh god this definitely
41:37 - this is way too big a name oh boy i
41:40 - don't like again i'm going to have to
41:43 - refactor this i'm going to have to make
41:45 - my own perpendicular function
41:47 - so that it doesn't end up like this
41:50 - anyway so
41:51 - this one should be correct
41:54 - but now the other ones that is what is
41:56 - going to be tricky
41:58 - so
42:00 - i want the direction from the upper left
42:03 - corner upper and left corner to the
42:05 - upper corner so upper and left to the
42:06 - upper corner so that is this direction
42:09 - so upper corner minus the upper left
42:11 - corner
42:12 - okay then from that one i want to make
42:14 - that one a perpendicular
42:16 - except i think this perpendicular is
42:18 - going to be moving in the opposite
42:19 - direction so
42:21 - that is going to be tricky i got to
42:24 - convert this
42:26 - but yeah i do the perpendicular of that
42:28 - one and that is eventually going to
42:30 - become this one the direction upper and
42:32 - left corner to center okay now let's
42:34 - just do the other two ones
42:37 - so direction from the lower left corner
42:42 - or my background some inspiration while
42:44 - i work on combining some systems i had
42:46 - worked on months and months ago all
42:48 - right that's awesome go for it i hope
42:50 - the work goes well yeah definitely
42:52 - push it towards the finish line i mean
42:54 - finishing projects is definitely where
42:56 - you get the
42:57 - all of the unlearnings from that project
42:59 - so yeah definitely if you got something
43:01 - that was interesting
43:04 - definitely go ahead and finish it okay
43:06 - so this one is actually wrong this is
43:08 - from the lower left corner to the lower
43:11 - corner that's what i want i don't want
43:12 - to go to the upper corner
43:15 - so the lower corner let's go into this
43:17 - one
43:17 - yeah all these names are very
43:20 - unwieldy but let's see because i think a
43:23 - bunch of these
43:25 - oh right yeah i think a bunch of these
43:26 - are going to be yeah
43:28 - perpendicular trying to point to the
43:30 - center
43:31 - i'm trying to point to the center but
43:33 - it's not exactly to the center because
43:35 - the center is not uh
43:39 - uh where's my where's my thing so
43:41 - basically this angle here the center is
43:43 - over here in the middle and if i make
43:44 - the angle to the center it is not going
43:46 - to match this line here if i point
43:48 - straight to the center then the line is
43:50 - more around like this so i want to take
43:52 - this line this direction then make it
43:54 - perpendicular to get it pretty much just
43:55 - like this then with that one i can use
43:57 - the dot product
43:58 - to make it like that
44:01 - how do you get a custom avatar again
44:02 - there's a nice tutorial here and when
44:05 - you do it let me know because there's a
44:07 - manual validation process
44:09 - so if you make your own sprite sheet
44:11 - make sure you link your youtube account
44:13 - and then let me know so that i can
44:15 - manually validate it
44:17 - okay so back into this logic
44:20 - so this i want the lower order corner
44:25 - uh
44:26 - six game object children but that would
44:28 - not be scalable and the whole point
44:30 - we're doing this
44:31 - using math instead of raycasts and so on
44:33 - is to make it scalable so that is why
44:35 - i'm not doing it like that
44:37 - okay so the lower corner minus the lower
44:40 - left corner
44:43 - lower corner minus the lower left corner
44:45 - okay so i've got that one then i've got
44:46 - the perpendicular on this one yep then i
44:48 - take that perpendicular
44:50 - and this one becomes the direction from
44:52 - the lower left corner to the center
44:54 - and the final one the final one is going
44:56 - to be the lower right corner so that's
44:58 - the lower right
45:00 - corner
45:02 - to the lower corner yes so the lower
45:05 - right corner let's just make sure
45:09 - let's hope that all these are correct
45:10 - let's hope i didn't miss anything here
45:12 - okay
45:14 - so now let me do a whole bunch of logs
45:16 - on these ones okay so on all of these
45:20 - let's see
45:21 - this guy this one should be correct
45:25 - and now for the other ones the lower
45:27 - left the
45:30 - upper left lower left and lower right
45:32 - and lower all right
45:34 - so that was a lot of stuff but let's see
45:35 - if
45:37 - all of those are correct
45:39 - okay boy all right
45:46 - okay let's pause this all right
45:48 - so let's see the direction on the upper
45:51 - right corner that is this one up here
45:53 - going down to the center although not
45:54 - exactly the center that is minus on the
45:56 - x and lower on this end so that is
45:58 - correct
45:59 - then the upper and left corner to the
46:00 - center
46:02 - so nope that is going to the left yeah
46:04 - exactly that's the problem that is going
46:05 - to the left and going up so i pretty
46:07 - much want the opposite
46:10 - uh
46:11 - so how do i yeah i gotta i gotta invert
46:15 - it i gotta make the direction
46:17 - from the upper and left corner too i
46:20 - pretty much gotta invert oh boy what did
46:22 - i do
46:23 - uh i've got to invert this one
46:26 - and now like this obviously like this
46:28 - the name is broken but yeah
46:31 - check my character okay let me
46:33 - let me try that
46:36 - okay let's see if the other one is
46:37 - correct so that one going left and down
46:39 - that is correct that one is going right
46:40 - and down all right that is correct
46:42 - for the lower left corner that's this
46:44 - one over here it's going to right and up
46:46 - all right that is perfect and the lower
46:48 - right lower right is going to the right
46:51 - and down so that is not correct so that
46:53 - one also needs to change
46:56 - so like this
46:58 - i save it i did not save it
47:01 - all right because i was in there
47:04 - uh all right so there's
47:07 - two people with custom textures let's
47:09 - validate it then tell it to update the
47:11 - character customization
47:13 - and there you go look at that a custom
47:15 - character
47:16 - that's nice it's always awesome when
47:18 - when people do this only handful of
47:20 - people
47:21 - have done it but yeah it's a pretty fun
47:23 - so yeah there you go you've got a custom
47:25 - character that's nice
47:27 - uh
47:28 - okay so i think this logic
47:31 - did indeed work
47:33 - let's see
47:36 - uh right so all of them work so on the
47:39 - upper right corner i'm going left and
47:40 - down that is correct on the upper left
47:43 - corner i'm going right and down that is
47:44 - correct on the
47:46 - [Music]
47:47 - lower left corner i'm going to the right
47:50 - and up that is correct and on the lower
47:52 - right corner i'm going left and up that
47:54 - is correct all right
47:56 - okay that was tricky but yep it does
47:58 - work
48:00 - so i've got all the corners
48:03 - and yeah i should probably normalize
48:05 - them so i don't have
48:07 - that problem
48:09 - so let's just normalize these
48:13 - just normalize these
48:15 - where am i just
48:17 - normalize these and normalize okay
48:22 - so then i've got the direction
48:27 - oh right that is going to be
48:29 - i mean technically the math here is
48:31 - super simple but
48:33 - the logic to get it all working that's
48:35 - the thing that is quite a bit tricky
48:37 - about the vertices but you actually mean
48:39 - the sides no i do mean the corner so
48:41 - this one up here this is exactly the
48:43 - upper right corner then this one is
48:44 - exactly the upper corner this one is the
48:46 - upper left corner so it's only on the
48:48 - corners that i'm thinking so pretty much
48:50 - now i've got the perpendicular zone
48:51 - pointing to the side so using that i can
48:54 - calculate and see if a point is on one
48:56 - side or another side of a certain line
49:00 - so i got direction so let's just make
49:03 - sure this one works
49:06 - uh
49:07 - dear to center that was the other one
49:10 - that i was doing right yeah i think i
49:11 - was using
49:12 - this one
49:13 - so the hexagon dot this guy
49:17 - i think that's what i was using
49:19 - and yeah that's the only tricky things
49:21 - that i need the
49:23 - the test point to compare with that one
49:24 - but yeah okay so basically now i can get
49:26 - rid of this and i need this and now this
49:28 - dot should be working with regards to
49:30 - the upper right corner so let's see if
49:32 - it is working
49:34 - you don't sound like you look
49:36 - okay thank you i guess i don't know if
49:38 - that's positive or negative but thank
49:40 - you all right
49:45 - okay so i'm testing against this line so
49:48 - if the
49:49 - the point isn't there then i've got dot
49:51 - product on the positive and if the point
49:53 - is here i've got negative all right
49:55 - awesome
49:56 - so actually i wouldn't like that to be
49:58 - the opposite if i swap this won't that
50:00 - work actually i don't know so let's test
50:03 - test it out
50:06 - best way to structure architecture code
50:08 - as a newbie where should i start should
50:10 - i learn something like solid principle
50:12 - yep definitely do study the solid
50:14 - principles
50:16 - and uh well i mean
50:17 - if you know the absolute basics then i
50:20 - would definitely
50:21 - recommend you look into my turn-based
50:23 - strategy course because the whole point
50:25 - the whole point with that course was to
50:27 - help you learn how to structure organize
50:29 - the code write good click code so that
50:31 - is what i would recommend but you can
50:33 - also just go
50:34 - online oh and yeah and i don't have the
50:36 - book here with me but the book
50:39 - code complete2 i've recommended this
50:41 - book several times
50:44 - so yeah definitely go ahead and get this
50:45 - book it's a pretty massive book it's
50:47 - like a thousand pages long but if you
50:49 - want to learn how to
50:51 - write good clean code definitely go
50:52 - ahead and get this book okay
50:56 - so what was i doing
50:58 - uh right testing so this one oh right i
51:01 - just wanted to see if that one flips
51:03 - becomes positive instead of negative
51:04 - okay
51:08 - uh
51:09 - all right so
51:11 - yeah that actually didn't change did i
51:14 - not save the code or is that intentional
51:16 - yeah i don't know if the dot product
51:18 - is depending on then
51:20 - my vote for more live streams yeah i
51:21 - definitely want to make them quite a bit
51:23 - more regular since the setup works
51:26 - everything works honestly the only issue
51:28 - is that it's insanely hot
51:30 - that's kind of problem over here with
51:32 - these lights i'm sweating like crazy so
51:34 - i can't stream for more than about an
51:36 - hour and a half otherwise yeah it's a
51:38 - pretty messy all right so yeah that does
51:40 - not swap but it's okay the dot product
51:42 - is under one
51:44 - so that can be good okay
51:48 - so that's one of these dot products so
51:50 - let's call it a float for dot
51:54 - test
51:55 - upper right corner
51:58 - so this is going to be my test and i do
52:00 - this dot product all right
52:03 - so now testing for the other ones
52:06 - so the dot test on the upper
52:10 - left corner
52:11 - there from test point to the upper
52:14 - left corner
52:16 - and the upper left corner
52:18 - all right so this is actually
52:22 - hopefully pretty simple and deer upper
52:25 - and left corner to center
52:28 - alright so let's see if this one is
52:29 - working
52:31 - so already got the horizontals working
52:33 - so now if these lines work
52:35 - then everything will indeed work
52:41 - uh
52:42 - okay
52:43 - so
52:44 - which one am i testing i'm testing the
52:46 - other one right so i'm testing this line
52:48 - here and if i'm in here i've got a
52:49 - negative and here i got a positive
52:51 - all right so that is awesome
52:54 - okay
52:59 - but that course has helped me a lot to
53:01 - go through 35 but pause now because some
53:03 - worse on you all right yeah that's great
53:04 - i mean the the course is waiting for you
53:06 - so
53:07 - don't uh don't feel stressed about that
53:09 - definitely go back to it when you got
53:11 - the time
53:12 - yeah definitely
53:13 - if this is your hobby definitely don't
53:15 - stress there are more important things
53:16 - but yeah do get back to it because
53:19 - while completing things
53:21 - really helps i'm learning the the final
53:23 - part of it so
53:25 - don't stress out but eventually do make
53:27 - sure you get back to it don't don't drop
53:28 - it because
53:29 - that teaches you a lot of interesting
53:31 - things especially
53:33 - near the end of the course as things
53:34 - become more and more complex that's when
53:36 - you learn quite a bit more so that is
53:37 - quite an interesting one okay so let me
53:40 - test just the other points so this one
53:42 - is going to be this direction
53:44 - to the test point to the lower left
53:46 - corner so lower left corner that's all i
53:49 - need and the dear lower left corner to
53:52 - center
53:53 - so that is going to be the top test
53:56 - the lower left corner
53:59 - and let's do another one
54:00 - so that is that one and the dot test
54:03 - lower
54:04 - right corner is going to be
54:06 - this one
54:09 - okay explain what you are trying to do
54:11 - i'm trying to do some math to figure out
54:12 - if a point is inside a hexagon or not
54:16 - that is pretty much it so the lower
54:19 - right corner so i test the lower right
54:22 - corner to the test point and direction
54:24 - little right corner to the center and
54:27 - this one over here
54:29 - okay so i think that is correct
54:32 - do some vr deaf tutorials yup that is a
54:35 - topic that i very much would like to
54:37 - research
54:38 - i've only played a few vr games i really
54:40 - love beat saber that is really awesome
54:42 - and that is a
54:43 - quite a workout it's pretty awesome so
54:45 - yeah i definitely would like to
54:47 - research a bit more
54:49 - vr maybe do some videos but yeah with
54:51 - that the whole problem is how do you
54:53 - present them that is kind of the tricky
54:55 - thing so for vr i would kind of have to
54:58 - get a camera set up in order to
55:00 - i don't know showcase wearing the wet
55:03 - the headset and so on so yeah it's a
55:05 - tricky thing but yeah definitely an area
55:07 - that i would love to research all right
55:08 - so this is all working
55:11 - so that one is outside that one is
55:12 - inside down is outside down is inside
55:14 - okay so honestly with all of these
55:16 - obviously this code is not it's not
55:18 - really it's not very pretty but it does
55:22 - work
55:23 - so if i go like this i've got my test
55:25 - point i check if it's inside the
55:26 - horizontal inside the vertical
55:28 - and then inside i do all of these
55:31 - calculations test against all the angles
55:35 - and now after this
55:36 - oh hey another custom character hey
55:38 - thanks for being here all right
55:40 - uh
55:41 - so now for testing if it's inside all of
55:43 - them now of course i could still
55:45 - do some math but if i test
55:48 - pretty much all of these dot tests if
55:50 - they are all under zero
55:52 - so that's pretty much going to be the
55:54 - thing
55:56 - douglas quest you can easily cast to a
55:58 - web browser is that so
56:01 - is interesting i need to look into that
56:03 - i do have a quest it's really awesome
56:06 - being wireless really is quite a game
56:08 - changer so
56:10 - yeah that is pretty cool
56:12 - all right so with all these debug.oh
56:15 - inside hexagon
56:18 - there you go just like that so all the
56:20 - math is actually pretty simple
56:22 - it looks complex because there's a lot
56:23 - of things involved but the math is all
56:26 - pretty simple
56:28 - so with all this inside the horizontal
56:30 - the vertical yup yup yup
56:32 - and then i got this one
56:34 - all right
56:37 - so yeah this is quite the
56:39 - tricky thing
56:41 - make an application transparent window
56:43 - in unity with characters similar to one
56:46 - yep
56:47 - and just in case you don't know i did
56:48 - make a
56:49 - video on that so if you want the
56:51 - transparent unity window
56:54 - i made a video on how you can achieve
56:55 - that which is what i'm using over here
56:57 - for the overlay
56:58 - and if you want to know how i made the
57:00 - characters those are pretty much just
57:01 - dynamic meshes so you can look into
57:03 - those to figure out how i built all of
57:05 - this
57:07 - you are actually an old man
57:09 - am i old
57:10 - i guess that is very relative i mean i'm
57:13 - 34 years old so
57:15 - i guess depending on the point of view
57:17 - that might be old or not
57:20 - okay so let's test so
57:22 - did i not make oh i did make a log all
57:24 - right awesome
57:27 - let me make another log here so let's do
57:29 - that one return
57:30 - and if it does not return debug.log
57:33 - outside hexagon
57:36 - okay let's see
57:39 - 134
57:41 - okay all right
57:44 - okay so the logic
57:46 - is indeed working so over here i'm
57:47 - outside the hexagon and as i go here
57:50 - still outside as i go here still outside
57:52 - and i go in there and yep i'm inside
57:54 - so outside inside over here inside
57:56 - everywhere go there outside on the
57:59 - corners outside inside
58:01 - all right oh boy
58:03 - okay that was pretty interesting make
58:05 - the sphere change colors if it's
58:06 - outsider and you know what that's
58:08 - actually
58:09 - a very fun idea so let's do that just
58:11 - for fun
58:12 - so let's make a serialized field
58:15 - for the do i go material yeah let's go
58:17 - now let's go with mesh render
58:19 - mesh renderer for the sphere mesh
58:22 - renderer
58:24 - let's go with that one then make a
58:28 - material called green material
58:32 - and let's go with another one called the
58:34 - red material
58:36 - so let's try doing that just for fun so
58:38 - you put that one
58:40 - dot material ah
58:41 - auto complete isn't working uh that
58:44 - material equals the green material if
58:46 - it's inside and if it's outside the
58:48 - hexagon let's go with the red material
58:51 - red material just like this
58:54 - okay
58:56 - 37n can code this well well i mean
58:59 - it all depends on when you start that's
59:01 - pretty much it
59:03 - if you start a bit late then definitely
59:05 - don't feel
59:06 - too bad
59:08 - i mean you can always
59:10 - you can always learn that's pretty much
59:11 - it no matter how old you are you can
59:13 - always start learning right now
59:16 - that's the same thing with me with uh
59:18 - going to the gym i definitely wish i
59:20 - started going to the gym when i was like
59:22 - 18 years old
59:24 - but anyways okay i went a bit late but
59:26 - still
59:28 - it's only enough to be pretty effective
59:30 - so yeah
59:32 - okay so let's write the sphere mesh
59:34 - render and material boy i can't read it
59:37 - hey everyone nice i can't read
59:39 - underneath that so the green material
59:41 - and the red material all right oh boy
59:46 - oh right it's past 6 p.m i didn't even
59:48 - notice but the video should be live
59:50 - right now so it's red and green red
59:53 - green red green all right awesome
59:56 - so yeah all the logic works over here
59:57 - it's red as i go inside there you go
59:59 - turns green
60:00 - so i can definitely identify when an
60:02 - object is inside or outside a hexagon
60:06 - okay that is really awesome it's really
60:08 - cool
60:09 - oh boy all right nice
60:16 - okay
60:18 - thanks for the tutorials thanks a lot
60:20 - that's awesome
60:21 - i'm glad the videos have helped you okay
60:22 - let me just make sure that the
60:25 - the video was supposed to launch didn't
60:27 - launch correctly did everything go over
60:30 - yep it did
60:31 - and just in case you haven't seen that
60:33 - video yet pretty much is just an
60:35 - overview of the of the
60:37 - new humboldt bundle which has not just
60:39 - visuals but actually some really
60:41 - interesting tools like this one over
60:43 - here if you want to make
60:45 - things nice and bouncy
60:47 - look at that you can make things
60:48 - real nice and bouncy and collide with
60:50 - things that is really interesting so
60:51 - this one is supposedly about uh art
60:54 - but it does have a lot of interesting
60:55 - tools like this one
60:57 - which can make turn a 3d mesh and make
61:00 - it pixelated
61:01 - so really awesome so this bundle i
61:03 - thought with art it wasn't going to be
61:05 - as interesting but
61:07 - actually has quite a lot of interesting
61:10 - tools so yeah pretty nice anyways
61:13 - okay so the hex didn't did work yep a
61:16 - new homo bundle yeah there is the two
61:18 - bundle last week and now
61:20 - there's a new one
61:23 - okay so all this logic worked
61:26 - so i got all the corners on the thing so
61:28 - i'll have to refactor this code to come
61:30 - up with a bit better names but on the
61:32 - logic is indeed working so i test if
61:34 - it's inside the horizontal the vertical
61:36 - and then i test against all the things
61:38 - now of course this could be a lot more
61:40 - performant
61:42 - but yep that does indeed work
61:45 - so the only thing is over here the test
61:46 - point
61:47 - and you gotta do
61:49 - some math
61:51 - hmm
61:53 - try and think of how i would change that
61:56 - okay
61:57 - and the other thing that i want to test
61:58 - is if instead of just one hexagon if i'm
62:01 - testing out a grid of hexagons
62:04 - trying to see
62:06 - if the distance would work
62:09 - because i'm not sure that it would or
62:10 - would am i upside down no okay
62:13 - why is that
62:15 - okay now i'm confused where am i
62:17 - that is the x okay right i was a bit
62:20 - confused on that yeah
62:21 - a nice unity bundle yep how to be part
62:24 - of humboldt i'm not sure what you mean
62:26 - part
62:27 - you mean as a publisher well i guess
62:29 - unity organizes the bundle so
62:31 - the nts is our
62:33 - the unity assessor team would be the
62:35 - ones who
62:37 - invite people i would assume so pretty
62:39 - much like that okay
62:42 - [Music]
62:43 - so
62:47 - right i was going to test the
62:50 - distance just to see if a distance works
62:53 - because i don't think it works
62:55 - but maybe it does i'm not sure
62:58 - so technically on a grid this would be
62:59 - 0.5 this would be
63:01 - seven
63:02 - five is that correct
63:03 - or is it seven two five no i think
63:06 - that's
63:08 - two five no yeah definitely seven five
63:10 - okay
63:12 - so pretty much like this
63:15 - and now if i put over here on minus 0.5
63:19 - and
63:20 - if i go down there so this would be
63:23 - 1 1
63:26 - 1 0 yeah
63:28 - exactly all right so
63:30 - let me just do another interesting thing
63:33 - so let me make here
63:35 - a serialized field private uh
63:39 - uh what do i want a transform
63:41 - let's do one list i prefer a list list
63:43 - of transforms so
63:45 - so hex transform list
63:49 - so let's go with that one
63:52 - and over here let's actually
63:54 - let's not run this code right now so
63:56 - just return don't want to run that
63:58 - uh okay
64:02 - so i want to find the closest so
64:03 - transform
64:05 - closest because no
64:07 - then
64:09 - yeah for each of these so transform hex
64:12 - transform in the hex
64:14 - transform list
64:16 - if the closest
64:18 - equals null then this one becomes equals
64:20 - so of course this equals the hex
64:22 - transform
64:23 - and if not then let's do a vector three
64:26 - dot distance
64:28 - calculate the distance from the closest
64:30 - dot transform dot
64:32 - close dot position that is already
64:34 - transformed
64:35 - from down to the mouse realm position so
64:37 - let's use define the test point up here
64:41 - so from that the test point
64:43 - if the
64:45 - new one is closer than the closest so
64:47 - let's just this one this one
64:49 - the hex transform that position the
64:52 - distance if it is closer than the one
64:53 - that was closest then the closest
64:55 - becomes this hex transform
64:58 - okay let's do a debug.log on this hoses
65:01 - and see if this does work
65:06 - because i'm not sure that the um
65:11 - the hex transform list
65:14 - just testing like this i'm not sure this
65:16 - would work
65:18 - but maybe it does work so maybe all that
65:21 - math is only really required for
65:26 - or actually
65:29 - right yeah i don't know uh okay so
65:31 - well i need to kind of remember where
65:34 - all these positions are so that is the
65:37 - so yeah this one is the original then
65:40 - the quad one part two and quad three
65:42 - okay
65:43 - so if i'm here this one is the quad down
65:45 - is a quad one that one is a two and then
65:48 - there's a three
65:49 - and if it is right up there
65:51 - even if it goes to the corner
65:54 - yep still says down and down all right
65:56 - so yeah actually this does work so if
65:58 - i'm doing just one hex yeah i do need to
66:00 - do all that math
66:02 - but if i'm testing against a grid then i
66:06 - actually just need to do transform
66:08 - positions all right so that actually
66:10 - simplifies the code by quite a lot
66:17 - so i'm trying to think um
66:20 - [Music]
66:22 - let me
66:24 - let me think
66:25 - how to update textures in stream you can
66:28 - follow this tutorial
66:31 - where you can
66:32 - download the base texture you can draw
66:34 - whatever you want on it then you can
66:36 - save your changes
66:38 - and make sure you link your youtube
66:39 - account so that the character knows
66:41 - which one belongs to you and then of
66:43 - course this has manual validation so if
66:44 - you do that then let me know and i will
66:46 - manually validate
66:48 - okay
66:49 - so
66:51 - what do i want what i want let me go
66:52 - into my grid system
66:55 - um
66:56 - oh i didn't name it grid system i just
66:58 - named grid uh right
67:02 - because my attires are sick yeah
67:04 - nice mr bean with nice
67:06 - doggy
67:07 - doggy doge
67:08 - is that doge well technically just a
67:10 - shiva you know i guess
67:12 - uh anyways all right
67:14 - so
67:15 - actually can you validate okay let me
67:18 - let me try doing that let me see if
67:19 - there are any new ones
67:22 - uh
67:23 - okay
67:27 - yeah right so this is the other math
67:29 - that i'm going to
67:31 - pretty much need to do
67:35 - that is going to be tricky okay now that
67:37 - one is definitely going to be tricky
67:40 - how do i take a worm position and
67:42 - convert it into a hex grin xy
67:47 - i guess that would be it i would have to
67:49 - do some math and figure out which one is
67:51 - closest
67:52 - that's kind of it
67:55 - so let's see okay there's a bunch of
67:56 - custom textures
67:59 - all right so let me
68:01 - put them
68:02 - and now update the character
68:04 - customization and in a little bit there
68:06 - you go there's a custom texture a nice
68:08 - snowman
68:10 - that is nice
68:12 - is he looking left right he's looking
68:14 - right there you go i don't like that
68:16 - that is nice hey another one yeah there
68:18 - you go nice
68:20 - all right that is cool
68:23 - okay right so a lot of custom textures
68:25 - already
68:26 - that is fun okay uh
68:29 - anyway so yeah the main thing that i
68:30 - wanted to do
68:31 - the uh
68:33 - doing all this math to
68:35 - calculate if a certain point is inside
68:36 - or outside
68:39 - that did work perfectly
68:43 - just divide the wrong position dot x on
68:45 - the hex size and that point five zero is
68:47 - on
68:48 - yeah i can figure out the x and y the
68:50 - problem is on the angles
68:53 - because i need to take a world position
68:55 - and convert it into
68:58 - down if i just add an offset then it
69:00 - won't be a hex shape it won't just be an
69:02 - offset grid shape so yeah
69:04 - why don't you use dark mode because dark
69:06 - mode burns my eyes that's pretty much it
69:09 - about rendering the hex grid in game
69:12 - well actually yeah actually that is
69:14 - another thing that i wanted to
69:15 - try out now that this logic is indeed
69:17 - working uh you can pretty much just make
69:20 - a custom mesh so pretty much all the
69:21 - characters down here these are all
69:23 - custom meshes
69:24 - so that is kind of what i want to do in
69:26 - order to
69:27 - in order to print out a grid so let's
69:29 - actually try doing that but yep on the
69:30 - logic for testing if it's inside or
69:32 - outside a single one that does work
69:35 - smart mode burns my eyes but not the
69:37 - other way around yep that is correct
69:39 - dark mode burns my eyes my eyes can't
69:42 - seem to focus on
69:43 - white uh letters on a dark background
69:47 - but over here but if it isn't like this
69:49 - my eyes got no problem i can look at
69:50 - this for hours on end
69:52 - no issue
69:54 - okay so anyways yeah so the logic for
69:56 - testing if it's inside or outside a hex
69:58 - grid does work perfectly so inside and
70:00 - outside and all of this these are all
70:02 - outside of the main one and as i go in
70:03 - here
70:04 - go inside like that
70:06 - all right so that is pretty cool okay
70:08 - great
70:10 - uh right so yeah let's actually try
70:12 - doing a visual to the hex
70:15 - since this is indeed working so let's go
70:17 - up here i just want to run it once so
70:19 - let's do it on start
70:20 - and i've got my mesh utils which i wrote
70:24 - in a video i don't even know how long i
70:26 - think maybe it was on the mesh video
70:28 - kind of like that where i can create an
70:32 - empty mesh
70:35 - and then
70:36 - [Music]
70:38 - okay these are adding quads so that is
70:40 - not what i want
70:45 - yeah i think i'll just manually
70:48 - um
70:50 - add the mesh yeah i think that is
70:52 - probably the
70:54 - the best approach because these are all
70:56 - add line points so pretty much all this
70:58 - was made with quads in mind
71:00 - and not really made with
71:03 - the other thing in mind okay
71:06 - all right so i think i'll just
71:09 - manually make
71:10 - it which should be fun because i haven't
71:14 - i haven't made a mesh in quite some time
71:16 - so basically i need the vertices the uvs
71:18 - and triangles
71:19 - okay so let's actually
71:21 - do this
71:23 - can i create an empty mesh yeah that one
71:24 - just creates the empty ones
71:27 - then i'm copying them and so on okay
71:30 - uh right so let's actually try this to
71:32 - use vs code or vs this is just standard
71:34 - visual studio it's the community version
71:36 - which is free
71:38 - so
71:39 - yeah that's pretty much it okay so let's
71:41 - start just drawing a triangle so we need
71:44 - three vertices
71:45 - do i need the uvs i don't think i need
71:47 - uvs or not and the triangles that is six
71:51 - right
71:54 - six plus one oh right
71:57 - is it six
71:59 - okay now i'm confused no it's not six
72:01 - it's six if i was meaning a quad if i'm
72:03 - just making a triangle then it's only
72:04 - three
72:06 - okay great so mesh mesh becomes
72:10 - a new mesh
72:13 - and then mesh dot vertices
72:16 - equals these vertices mesh dot
72:19 - triangles equals triangles
72:24 - okay so now i just need a i got a mesh
72:26 - render now let's make a mesh
72:29 - filter so hex mesh filter
72:34 - so let's try this one then i do that
72:36 - then on measurement mesh equals this
72:38 - mesh
72:40 - okay so let's add something and see if
72:42 - it does work
72:44 - my chat is on the other side other thing
72:48 - okay right
72:50 - i didn't have the free version i enjoy
72:52 - it but i'm too poor
72:54 - yeah i've heard great things about
72:56 - writer but i have not used it
72:58 - how do i make my own utilities package
73:00 - i'm not sure what you mean by
73:02 - i mean there's nothing special about
73:04 - utilities let's just say for example
73:06 - over here i've got my
73:08 - code monkey.utils
73:11 - why can't i find the utel's class ah
73:13 - utils
73:14 - class
73:16 - so that's all it is these are utilities
73:18 - you just put it inside namespace and
73:20 - start writing classes objects functions
73:22 - whatever
73:23 - so yeah pretty much what you need
73:27 - so yeah there's nothing else there's
73:28 - nothing special about the name utilities
73:30 - it's from just code with useful
73:32 - functions that you might do for me i've
73:34 - been
73:34 - building this class with lots of
73:36 - interesting things for i don't know like
73:38 - 10 years now like for example over here
73:40 - random city name this is when i made my
73:43 - first steam game survivor nights
73:45 - survivor squad
73:48 - where i need a bunch of names for random
73:50 - towns that were randomly generated so i
73:53 - made this function and since it might be
73:55 - useful i also put it in here so that's
73:57 - pretty much it same thing for getting
73:59 - random names just in case i need them
74:01 - get a random id random so on so yeah
74:05 - just a bunch of useful functions
74:08 - okay
74:09 - where is the hexagon class it's over
74:11 - here just something simple just because
74:13 - i need to
74:14 - store all the points on the things okay
74:16 - so
74:17 - let's see if this one does spawn a mesh
74:19 - so i need to go up here and let me
74:21 - actually hide the visuals
74:24 - hide those visuals right now
74:26 - let me just duplicate this one let me
74:28 - unlock that one
74:30 - let's call this hex
74:32 - i'm going to have a mesh filter mesh
74:34 - renderer but no material no nothing just
74:36 - like that
74:37 - so let's see if this one does change
74:39 - let's just drag the reference and let's
74:41 - test
74:42 - okay right
74:44 - is this code hard to make not really
74:46 - what i've got here is very much
74:48 - uh
74:49 - something pretty simple so yeah okay so
74:51 - that's my mesh
74:53 - and
74:56 - isn't this super oh yeah there you go
74:58 - three vertices okay so i think that does
75:00 - work okay
75:04 - so now let's put some points so on the
75:07 - vertices we've already seen zero let's
75:10 - put it on
75:11 - new vector three on zero zero zero
75:14 - okay then i've got the vertices one
75:16 - let's put a triangle so put the right on
75:18 - one zero zero and that one zero zero one
75:22 - so just like this then i've got to set
75:24 - up the triangles so
75:27 - triangles where is this one going to be
75:28 - and let's go
75:30 - because this one
75:32 - i always get confused if it's clockwise
75:34 - or counterclockwise
75:36 - i'm going to assume that it's clockwise
75:37 - so let's start off on
75:39 - vertex zero
75:42 - and then let's go
75:44 - one that's one right so that would be
75:45 - counterclockwise so let's go into two
75:47 - and then two one okay let's see
75:49 - this looks complex to me well it depends
75:51 - on your base knowledge i mean for
75:53 - example what i'm doing here these are
75:55 - just basic uh meshes
75:57 - so if you know how meshes work then this
75:59 - is pretty basic but if you don't know
76:01 - how much is worked then yeah this looks
76:02 - quite a bit confusing and all the math
76:04 - down here it looks like a lot but it's
76:06 - really just doing the same thing over
76:07 - and over so vector3 dot dot
76:10 - this one by the way this was a super
76:12 - awesome thing that i made the backstab
76:14 - mechanic that was a fun video to make
76:15 - that is what
76:17 - what made me research the
76:19 - uh
76:20 - vector3.mechanic mechanic the math
76:22 - function to see how it works
76:25 - so yeah if you haven't seen that video
76:27 - definitely watch it because it's a
76:29 - pretty interesting thing you can
76:31 - basically use the math to figure out if
76:32 - a character is behind another one to
76:34 - trigger a backstab or not that is fun do
76:36 - you make assets or buy them i buy them
76:38 - because i am not a
76:41 - artist 3d modeler so all these these are
76:43 - from a various uh cinti packs
76:46 - so yeah i haven't drawn any of these i
76:48 - am not in uh
76:50 - an artist i'm not a 3d modeler nothing
76:52 - like that so yeah
76:54 - um
76:56 - okay so i could probably get rid of that
76:57 - but
76:58 - uh did this not work did it end up
77:01 - backwards
77:04 - why did i put a compiler i did put a
77:06 - collateral i don't want to call either
77:09 - but
77:10 - um
77:10 - [Music]
77:12 - let's go into wireframe
77:14 - except i don't see it
77:17 - oh there it is
77:18 - wait did i put it on these zed
77:22 - wait where am i yeah xz
77:25 - so why is that did i mess up in there
77:28 - what did i do
77:30 - now i put it on the x number is this
77:32 - rotate okay this is rotate yeah that is
77:34 - why
77:35 - put it on zero and get rid of the
77:37 - collider
77:38 - okay
77:39 - many times have you tried learning
77:41 - blender i tried it just the
77:43 - just what like
77:45 - a year ago half a year ago i don't know
77:46 - i tried i actually learned quite a bit
77:48 - but yeah as always it's a it's a
77:50 - question of experience and training so i
77:52 - haven't really touched it much since so
77:56 - yeah if i went back right now i
77:58 - definitely would need quite a bit of a
77:59 - refresher
78:01 - does portugal have their own version of
78:02 - silicon valley are there any tech hubs
78:04 - in the country
78:05 - now really uh
78:08 - i mean there's some tech related
78:10 - universities but not really anything on
78:13 - the scale of silicon valley there's no i
78:15 - mean there's pretty much no game
78:16 - developers over here in portugal there's
78:18 - a
78:19 - i think the biggest one is mini clip
78:21 - which they make mobile games they used
78:23 - to make flash games and i'll make mobile
78:25 - games so i think that's the biggest one
78:26 - here but yeah not much of a
78:28 - market is a pretty tiny country so yeah
78:32 - i mean that is why i eventually became
78:35 - independent is because if i went for a
78:37 - regular job i wouldn't be able to find
78:39 - anything so
78:41 - yeah
78:41 - i mean that led to me being doing what i
78:44 - am doing now so i'm quite happy with how
78:46 - things turned out so that was
78:48 - that was fun uh
78:51 - okay yeah originally wants to be like
78:53 - silicon valley yeah it wants to but i
78:56 - don't think
78:57 - i don't know at least i'm not
78:59 - i'm not too familiar with it but yeah
79:02 - i know they want to become but
79:04 - i don't know maybe there's something
79:06 - awesome that came out of there that i
79:07 - don't know
79:08 - that would be something got a custom
79:10 - character main okay let me refresh the
79:12 - validation
79:15 - okay
79:18 - thanks so much for the time-based course
79:20 - it immensely helped me nailed an
79:22 - interview segment all right that's
79:23 - awesome yeah i hope it goes well best of
79:26 - luck that is great
79:28 - that is great yeah
79:30 - i hope you get it
79:33 - uh
79:34 - what was i doing use unity for other
79:36 - projects other than making games well
79:37 - this overlay here this is technically
79:39 - not a game and it is made with unity so
79:42 - yeah i just messed up in here
79:44 - so
79:45 - yeah i haven't really built i also built
79:47 - a nice uh
79:49 - a graph to graph my
79:51 - to graph a bunch of things so i had some
79:54 - data points so i created a simple graph
79:56 - in
79:56 - unity and did that so like that and uh
79:59 - so yeah thanks again and now for the
80:01 - super chat
80:03 - was i doing that is not
80:05 - working uh
80:08 - yeah so this is indeed working so it is
80:10 - going to that to that and i'm pretty
80:12 - sure the only reason why it's pink is
80:13 - just because i did not assign a mesh
80:16 - so if i assign a a machine material yep
80:19 - it does work all right awesome
80:22 - so
80:23 - so actually this might be
80:27 - super simple for drawing a mesh i'm
80:28 - trying to think
80:30 - trying to think so i can create a
80:32 - hexagon
80:35 - and let me do a return here because i
80:36 - don't want those logs to keep popping up
80:39 - so i've got a hexagon point center let's
80:42 - actually define it up here
80:44 - so up here does the order matter in the
80:46 - vertices array uh yes
80:49 - it matters for
80:50 - depth i think
80:52 - yeah i'm pretty sure it matters for
80:54 - depth pretty much vertices
80:56 - lower on the on the array are going to
80:59 - be in front of the ones
81:02 - or i'm not sure
81:03 - there was something to it but yeah i'm
81:05 - not sure is it depth no actually i don't
81:07 - think it stops
81:09 - because obviously it does work if the
81:11 - camera rotates
81:12 - or maybe it was depth but only on 2d
81:14 - yeah i think that was it i think maybe
81:16 - that was it when making these characters
81:18 - i have to make sure that the quad for
81:20 - the head
81:21 - is drawn after the quad for the body and
81:24 - the quad for that hand has to be drawn
81:25 - first i think that was it i think that's
81:27 - why
81:28 - so i think in 2d the order on the
81:30 - vertices array does matter but in 3d
81:33 - maybe not
81:34 - i don't know
81:36 - i don't know that's a good question but
81:37 - over here on triangles it doesn't matter
81:38 - if you put it
81:40 - counterclockwise and it's pretty much
81:41 - going to
81:42 - look the other way so that's kind of
81:44 - tricky how many hours a day do you spend
81:46 - programming well that really depends on
81:48 - the days
81:49 - i i spend a lot of time just researching
81:51 - things for new videos
81:54 - i spend a lot of time just writing
81:55 - videos recording editing so
81:57 - yeah programming i don't know maybe two
82:00 - hours a day it really depends on kind of
82:02 - things that i'm doing when i was
82:04 - preparing the course yeah that was
82:05 - pretty much just programming when i was
82:07 - making the games pretty much just
82:08 - programming but yeah nowadays with
82:10 - making video tutorials that involves
82:12 - quite a lot more than just programming
82:13 - so yeah
82:15 - i'm getting thrown for using ap
82:16 - characters like spider-man in your
82:17 - videos no i mean i only use it in very
82:20 - very unlimited ways so for example the
82:23 - spider-man video that was quite a long
82:25 - time ago
82:26 - that was pretty fun making that one when
82:28 - i made this one shoot webs this was
82:31 - still when i was making tutorials in
82:32 - multiple parts
82:34 - yeah that was a fun character but yeah
82:36 - the character i mean it was drawn by me
82:38 - so it's obviously it's obviously
82:40 - spider-man but
82:41 - i drew the sprite in order to
82:43 - make it work so yeah it's not big enough
82:45 - for the automated uh content from disney
82:48 - or whatever to
82:50 - find out and my channel is way too small
82:52 - for anyone to manually care so
82:55 - so that's pretty much it why
82:57 - well i never really got any issues
82:59 - that's pretty much it
83:01 - uh
83:03 - what was i doing right so i got the
83:05 - hexagon
83:07 - so this is pretty much just making
83:10 - triangles right yeah
83:12 - so if i put let's let's build on the
83:15 - vertices so
83:16 - vertex one is going to be the
83:18 - hexagon.center point
83:21 - then for this one yeah let's put all of
83:23 - those so center point let's go the upper
83:26 - right corner
83:28 - let me just copy all these considered
83:30 - free advertising yeah maybe i mean if i
83:33 - got millions of views then maybe
83:35 - somebody would be upset
83:36 - but
83:38 - yeah at this point yeah just pretty much
83:40 - advertising unit testing in gamedev is
83:43 - an important part i mean that depends on
83:45 - how you work for me
83:46 - i really value the concept of testing
83:49 - but
83:50 - in terms of being an indie game
83:52 - developer you really have to be insanely
83:54 - fast
83:55 - you've got to be able to produce a game
83:56 - extremely quickly
83:58 - and for that if you are a solo game
84:00 - developer then then testing just adds
84:03 - more work without too much benefit if
84:05 - you're part of the team and making
84:06 - something really complex on a massive
84:08 - scale then definitely but something on
84:10 - the scale of the games that i make small
84:12 - indie games for that i don't think the
84:14 - math works out for for the time that it
84:17 - takes to make testing but just because i
84:20 - don't specifically do testing i
84:21 - absolutely do
84:23 - sort of test driven development i mean
84:25 - not driven by testing but every code
84:26 - that i write i try to make sure that the
84:28 - code would be testable so i don't write
84:30 - unit tests but i do make sure that the
84:32 - code that i write would be possible to
84:34 - use united so
84:36 - that's my insert nut
84:38 - all right another super chat that's nice
84:40 - thank you
84:41 - how would you make enemies backstab the
84:43 - player
84:45 - i'm not sure what you mean by that are
84:46 - you referring to the backstab
84:49 - video i mean the logic for that one
84:50 - would be the same
84:52 - so you would test the vector from the
84:54 - from the enemy's point of view to the
84:56 - player's point of view so if the
84:58 - enemy is behind the player then you
85:00 - would trigger the backstab attack
85:02 - although probably with the enemies you
85:03 - would make it a bit more
85:05 - more specific so they would have to be
85:06 - right behind otherwise it would be very
85:08 - tricky
85:10 - so yeah that's pretty much what you do
85:11 - pretty much the exact same logic as here
85:13 - on this video
85:16 - pretty much the exact same logic but
85:18 - just apply to the enemy ai so then how
85:21 - do you move the enemy and all of that
85:23 - that is pretty much well that really
85:25 - depends on what kind of ai you're using
85:27 - what kind of state machine what kind of
85:28 - system
85:29 - yeah but the logic for testing the
85:31 - backstab specifically yeah it's pretty
85:32 - much exactly the same thing so you just
85:34 - do
85:36 - a simple dot product to test if a point
85:38 - is underneath is behind a certain point
85:40 - okay
85:42 - so
85:43 - let's do a triangle let's try doing one
85:45 - on the upper right so
85:48 - yeah for this one let's actually make
85:50 - this yet it's not going to match but
85:51 - okay let's do seven points and four
85:53 - triangles let's switch is three
85:56 - and i already forgot it's gotta be
85:58 - counter clockwise or clockwise i think
86:00 - it's clockwise so let's start from the
86:01 - center point let's go to the upper
86:03 - corner so that is the next two okay
86:04 - great then let's go to the upper right
86:06 - corner which is the next one all right
86:08 - so just like this it
86:10 - should work i want to turn on let's keep
86:12 - it up that's awesome i'm glad you like
86:14 - the videos i mean the only reason why
86:15 - the channel exists is because all of you
86:17 - watch the videos so
86:19 - yeah thank you all for being here i'm
86:21 - glad
86:22 - you find the videos useful and helpful
86:26 - okay did this work
86:28 - let me create a point just to verify
86:30 - that it is positioned correctly
86:33 - on zero zero zero
86:35 - and for this point if i move it in there
86:37 - i'm 1.5.25 okay that is correct and
86:40 - there on 0.5 all right
86:44 - okay awesome so that did work
86:49 - i love your work i may have moved away
86:51 - from unity but your concepts certainly
86:53 - carry over yeah there's a lot of uh game
86:55 - development is very general for example
86:58 - i'm sure all of you are already aware
86:59 - but just in case you're not definitely
87:02 - let me open it ah it was broken
87:06 - definitely go and watch the
87:08 - game makers still kid thanks again for
87:10 - the super chat real nice thank you
87:12 - the game maker song kit so pretty much
87:15 - really awesome videos on game design and
87:18 - none of that is related to any specific
87:21 - engine so yeah a lot of things about
87:23 - game development are very global so yeah
87:25 - you can definitely
87:26 - even if you're not using unity you can
87:28 - certainly learn a bunch of things
87:31 - from my channel or if you're using unity
87:33 - you can learn from an unreal channel
87:34 - yeah a lot of things about games
87:36 - game development
87:38 - they're pretty universal
87:41 - yeah
87:42 - gmtk is definitely an awesome channel
87:44 - really awesome lots of awesome info
87:48 - okay so
87:50 - let me try making the second point let
87:52 - me make the one going from the upper
87:54 - right to the upper left
87:57 - so let's add another triangle
87:59 - so three four five so over here i'm
88:01 - going to need six triangles so for that
88:04 - one i'm going to start on zero
88:06 - and again gotta go clockwise so i gotta
88:08 - go there so that's the upper and left
88:10 - corner so that is on index three no this
88:13 - one is on zero this one's on three
88:15 - then going to one which is the upper
88:17 - corner or did i do it the other one
88:22 - right no yeah i did it correct okay like
88:24 - that so i gotta go into two which is the
88:26 - upper corner okay great
88:28 - i forget neck or shoulder pain when
88:29 - hunched over the keyboard i recommend
88:31 - that chair you're sitting on uh i don't
88:34 - know this chair is pretty basic but i've
88:36 - bought it like i don't know seven years
88:37 - ago so i don't even exactly know
88:40 - make or model or rather i don't think
88:42 - this company still exists so i don't
88:44 - know if i would recommend this chair
88:46 - specific i mean it's not bad it's pretty
88:48 - standard just nothing special
88:50 - and then yeah i don't really get neck or
88:52 - shoulder pain just because i make it an
88:55 - effort to go out as much as possible so
88:58 - i don't really sit here for eight hours
89:00 - a day i've got my dog so i take them
89:02 - outside three times a day so that lets
89:05 - me get up and move i drink a lot of
89:07 - water so getting up drinking a lot of
89:09 - water that also makes a nice break i go
89:11 - to the gym so again also a nice break i
89:13 - go for a walk so again nice break so
89:14 - yeah
89:15 - if you got problems with neck and
89:16 - shoulder pain i highly recommend you
89:18 - simply spend less time
89:20 - in front of the computer and less time
89:23 - sitting because yeah that is definitely
89:24 - not a very healthy thing
89:26 - yeah that would be my
89:28 - best advice because yeah
89:30 - focusing on a chair that
89:33 - can solve that i don't think that would
89:35 - actually work although yeah a good chair
89:38 - is definitely
89:39 - yeah a standing table can also be good
89:41 - if you're standing i mean the basic the
89:43 - best thing about posture that i've heard
89:45 - is the the best posture is your next
89:47 - posture meaning constantly switch around
89:50 - your posture that's pretty much the
89:51 - thing
89:53 - how do you do that with the pen these
89:54 - are pen tricks
89:57 - so if i search for pen tricks
90:00 - if you search back when i learned there
90:02 - was no youtube but yeah nowadays you've
90:05 - got lots of
90:06 - pen spinning pen tricks pen tricks and
90:08 - lots of lots of interesting awesome
90:10 - stuff i only know the basics but yeah
90:12 - pretty cool stuff all right anyway so
90:16 - yeah i did make that one so yeah the
90:18 - logic is indeed working so let's make
90:20 - all the other triangles
90:23 - so
90:23 - i've got that one so that's
90:25 - six seven and eight
90:27 - and for this one i want that one
90:29 - so in order to go i've got to go into
90:31 - the lower left corner so that is on
90:33 - index four then the
90:35 - upper and left corner that is on index
90:37 - three
90:38 - and then go into the center point so
90:40 - that is on two
90:43 - all right yeah because i started on the
90:44 - other one let's let's keep it the same
90:46 - so start on zero then go on the lower
90:49 - left so that is on four then going to
90:52 - three
90:53 - okay
90:55 - so for the next one i gotta go down so
90:57 - that's 9 10 and
91:00 - 11.
91:03 - so starting on zero go down that's the
91:04 - lower corner that's on six then to the
91:07 - lower left that's on four
91:09 - okay and now let's see the other one hey
91:11 - cpu hey how's it going let's see
91:14 - all right so let's get into 12 13 and
91:16 - 14.
91:17 - so start on zero
91:19 - uh okay i already forgot this one what
91:22 - is the six the six is the lower corner
91:24 - in the lower left all right so i want to
91:26 - go down
91:27 - into the same six but then i want to go
91:29 - into the lower right corner so that is
91:31 - on five
91:33 - okay and i think there's only one left
91:36 - so that going into five and from five
91:39 - then again going to the upper right
91:41 - corner that is on one
91:43 - that is on 14 15 16 17. so there are 18
91:47 - triangles
91:48 - okay let's see if i put all that correct
91:51 - all right thanks again
91:53 - oh boy it's already almost seven so just
91:56 - a bit more my voice already starting to
91:58 - go
92:03 - and apparently i messed something up
92:06 - okay what did i mess up
92:09 - um
92:11 - was it the last one oh i went backwards
92:13 - and this is always the tricky part
92:16 - uh this is always the tricky thing when
92:17 - making meshes you got to make them
92:19 - clockwise if you want them to face
92:21 - upwards if you make them
92:22 - counterclockwise they face downwards
92:25 - so that is why
92:28 - oh right because i kept going in this
92:30 - same direction instead of the other
92:31 - direction so that is why it broke so if
92:33 - i just swap this so five and six and one
92:36 - and five if i swap this now it should
92:38 - work
92:40 - okay
92:48 - and yep there you go look at that a nice
92:51 - drawn hexagon drawn using code
92:55 - like that it looks really nice so a nice
92:57 - pointy hexagon
92:59 - and it is on zero zero
93:03 - so now the other logic
93:06 - if i run that it should work the same
93:08 - even though the other visual isn't
93:10 - working
93:12 - kind of like coding is nice to turn on a
93:13 - hex rhythm
93:14 - does he that's nice
93:17 - i've seen that website a bunch of times
93:19 - a bunch of really
93:20 - good uh nice tutorial so yeah i don't
93:24 - know how i missed that okay so yeah it
93:26 - does work and the logic for testing if
93:27 - it's inside the hexagon still works let
93:30 - me just make a proper
93:32 - thing for this
93:34 - so let's make one just call it
93:36 - uh i don't know gray
93:39 - just take away the emission make it a
93:42 - simple gray just to put it on this one
93:44 - so it's not
93:46 - the boring pink
93:49 - so like this
93:51 - if i go and there you go so i'm inside
93:53 - and inside and inside
93:55 - so outside the hexagon and inside
93:57 - outside inside outside inside
93:59 - all right boy that's great
94:02 - portugal is android more popular than
94:03 - iphone i actually don't know these
94:05 - statistics uh
94:09 - i'm trying to think about
94:11 - the people that i know
94:14 - i think it's mainly android at least
94:17 - from the people that i do know
94:19 - i know about two or three people with
94:21 - iphones
94:23 - then about seven or eight with androids
94:26 - so yeah i guess over here android is
94:28 - more popular but yeah that's just very
94:30 - much anecdotal so yeah i really don't
94:32 - know
94:33 - what the stats are
94:35 - as for me i've always had
94:36 - android
94:38 - always i mean iphones are pretty
94:40 - expensive and portugal is not a very
94:43 - high income country so yeah very few
94:45 - people can afford to spend like 700 or
94:48 - 800 bucks on an iphone
94:51 - so yeah
94:53 - so maybe
94:54 - maybe it is yeah majority is android but
94:56 - you see plenty yep there's a bunch of
94:58 - iphones but yeah i wonder if
94:59 - statistically the majority is android
95:02 - that's an interesting one
95:05 - know about the octagon yeah that could
95:07 - be interesting actually that's a good
95:09 - question why do why are hexagons so
95:11 - popular amongst game development but
95:14 - octagons are not
95:16 - actually if you search octagon game
95:19 - development does it or just games
95:22 - is going to show me just ufc games no
95:26 - yeah so basically there's is that the
95:30 - oh god what was he called there was a
95:32 - really awesome one
95:33 - within the octagon but yeah not many
95:35 - with with grids like this
95:40 - yeah so apparently there are not many
95:43 - games using octagons i don't know why
95:45 - because it is an interesting shape so
95:48 - yeah
95:49 - but i guess most of them if i search for
95:52 - hexagon games
95:53 - then all of a sudden yeah see quite a
95:55 - bunch more things quite a bunch more
95:57 - yeah
95:58 - yeah so i guess
96:00 - for some reason people like
96:02 - uh hexagons more than octagons you
96:04 - cannot film the plane with octagons
96:07 - you can't
96:11 - because you
96:12 - octagon
96:16 - octagon grid this is create gaps
96:20 - oh okay well i guess that's why
96:23 - yeah okay so
96:24 - great news so we found the answer
96:27 - yeah because with hexagons they all fit
96:28 - perfectly but yeah i guess with octagons
96:30 - you end up with these tiny gaps so you
96:32 - could still make a game around that but
96:34 - yeah that would definitely make it if
96:36 - you want to make it fit perfectly then
96:38 - yeah i guess
96:39 - hexagons are bestagons i guess
96:42 - i guess that is the answer yes
96:44 - all right
96:46 - okay so all the research on the logic
96:48 - that i want to try out
96:50 - it did indeed work
96:53 - testing out all this logic with the
96:55 - directions testing out the lines doing a
96:57 - vector3 dot
96:59 - again for me i'm not very good at math
97:01 - so the fact that i figured out how to
97:02 - make all this i'm pretty happy with that
97:04 - pretty happy with the result so all the
97:06 - math worked
97:08 - doing all the directions the
97:09 - perpendiculars the dot products testing
97:11 - left right and so on
97:13 - so yeah all that works quite nicely
97:17 - okay
97:20 - octagons are better used as structure
97:22 - maps
97:23 - where you use the gap as tunnel between
97:25 - rooms oh that's a good point yeah
97:27 - i guess you could use octagons for the
97:31 - for sort of the world map and then
97:33 - hexagons for the inner map so kind of
97:35 - connect multiple world maps
97:37 - in octagon shape and then hexagons for
97:40 - the inner
97:41 - inner room shape that could be an
97:43 - interesting design that would be
97:44 - interesting
97:45 - okay right so my voice is going it's
97:48 - almost seven
97:52 - all right so i think
97:55 - that's gonna be it because this
97:58 - logic did work it did work correctly
98:00 - what's your keyboard the very own
98:02 - samsung guy i have no idea what the
98:03 - model name is
98:05 - i've had this for
98:06 - i don't know about 15 years so yeah it
98:09 - still works
98:10 - it's a membrane keyboard which
98:12 - technically a lot of people don't like
98:13 - but yeah it's what i'm used to so
98:16 - works pretty well
98:19 - all right yeah so yeah anyways the logic
98:22 - that i want to do research if a point is
98:24 - inside or outside a hexagon and yep the
98:26 - logic does work perfectly so i test
98:28 - there and there and it does work
98:31 - awesomely
98:32 - so yeah pretty great
98:35 - okay right
98:37 - so i think that's gonna be it
98:39 - my voice is messed up
98:42 - wonder why most game devs learn pen
98:43 - spinning
98:44 - well i learned that before i was into
98:46 - game development i mean i learned it
98:48 - when i was like i don't know 15 years
98:49 - old then i saw
98:51 - some random video clips of some people
98:53 - doing pen spinning and i thought oh that
98:55 - is so cool
98:56 - so i spent a bunch of time learning yeah
98:59 - i mean but it is a nice thing to keep
99:01 - your brain focused while you're trying
99:03 - to think of something and keep your
99:05 - hands occupied so yeah it's a pretty
99:07 - nice
99:08 - of some extensions for vs extensions i
99:10 - guess the only one that i use
99:13 - uh where do you see the extensions the
99:16 - extensions
99:17 - where are they is it this
99:20 - yeah there you go this one vs4 that's
99:22 - pretty much the only one that i use
99:24 - because it adds all these colors all
99:26 - these nice things
99:28 - then the visual commander i just got
99:29 - that one just for
99:31 - for moving up and down with the cursor
99:34 - so move up or down about
99:36 - 10 lines i think instead of going page
99:38 - up or page down which is massive so this
99:40 - one just goes up by a tiny bit so this
99:42 - is useful so that's pretty much the only
99:44 - the only two that i have
99:47 - there's the nice colors which i quite
99:49 - like makes everything super easy to read
99:51 - i can see okay look at this this one is
99:53 - a string this one is a type another type
99:56 - and another bunch of things
99:58 - so yeah pretty nice so that's so my
100:00 - visual studio is really pretty basic
100:04 - one butterfly knife tricks wow that is
100:06 - that's pretty hardcore
100:08 - i mean that does sound very cool but
100:10 - also very dangerous so
100:12 - so yeah i guess
100:14 - that's why i never got into that
100:17 - yeah
100:19 - good place to learn visual scripting
100:20 - from well i mean i've got a bunch of
100:22 - videos and i've got a course on it
100:24 - assuming that by vs you mean visual
100:26 - scripting not visual studio
100:28 - uh yeah
100:30 - visual scripting
100:32 - so i've got a whole bunch of videos on
100:34 - youtube and i've got my course which
100:37 - makes a whole bunch of games this was
100:39 - also a fun course to make i mean i love
100:41 - programming but it was fun to research
100:42 - how to make all of these games without
100:44 - writing a single line of code that's
100:45 - pretty fun i'm quite happy with
100:47 - with this game
100:49 - a really nice fps you've got some
100:51 - rockets some jumping got a nice boss
100:53 - fight
100:54 - got a nice hook shot
100:56 - multiple weapons and again all of it
100:58 - without writing a single line of code so
100:59 - that was pretty fun
101:02 - okay anyways so my voice is already
101:06 - already going so i think that's gonna be
101:08 - it this was very productive i managed to
101:11 - do quite a lot so figured out this logic
101:13 - of testing if a point is inside or
101:14 - outside a hexagon
101:16 - so now that the
101:18 - the research portion did work now
101:21 - eventually i have to
101:22 - write this into a video because i
101:24 - couldn't find any
101:26 - anyone teaching this specific thing how
101:28 - to test if a point is inside a hexagon
101:30 - the only things that i could find were
101:31 - using tons of math equations which for
101:33 - me really does not work so
101:35 - hopefully if you're also like me and
101:37 - you're not
101:38 - extremely advanced in math hopefully you
101:40 - should be able to
101:42 - follow my video on the subject so that
101:44 - should hopefully be useful to at least
101:45 - some people so
101:47 - that should be like that okay
101:50 - right my voice is really going so that's
101:51 - going to be it
101:55 - all right so yeah
101:56 - thank you all so much for being here
101:58 - this was really nice and the
102:00 - live streams have been going well so
102:02 - yeah i'm definitely planning to do i
102:04 - don't know at least one per week that
102:05 - should be
102:07 - should hopefully be doable so a bit of a
102:09 - nice interaction with all of you and
102:11 - answer all your questions and do
102:13 - whatever so that should be fun so
102:14 - hopefully
102:15 - a few more in the future coming so
102:18 - anyways all right so once again thank
102:20 - you all so much for being here let me
102:21 - just re-enable the background everything
102:23 - looks good
102:24 - all right so that's gonna be it for me
102:27 - all right so thank you all so much thank
102:29 - you and see you next time
103:29 - um
103:50 - um
105:39 - do
106:13 - so
106:27 - [Music]
106:29 - so
106:31 - [Music]
107:43 - [Music]
108:46 - [Music]
109:04 - [Music]
109:34 - do
109:43 - you

Cleaned transcript:

ah so so so all right hey everyone how's it going all right hope you're all doing well today okay everything seems nice all right okay so i got a bit of interesting thing that i want to research and i figured i'd do it on live stream so this should be interesting i'm going to play around with hex grids which is pretty much just math but it's actually pretty simple math so that should be interesting so let's see map should be similar to isometric i'm going to be doing this the math in a well i was going to say in 3d but actually the plan the plane is in 2d xz but yeah so let's do it a star would actually be quite simple i mean i haven't done it yet but i'm pretty sure a7 will be super simple because a star is all about calculating the neighbors so the only difference between a grid and the hex grid is that the hex grid has six neighbors whereas the regular grid has three six eight so that's pretty much the only difference just with that difference i'm pretty sure it won't work but anyways before that i want to make sure the basics of the hex work so let's do some research and try to figure out if all of this works okay so i got my notes here the things that i want to test basically did a bunch of research to try to figure out what is the math required to make this work so let's give it a shot and by the way i got a video coming out in about 40 minutes it's about the unity art bundle so there was a tools bundle last week and now there's a art bundle so if you want go ahead and check that out afterwards the uh the regular video doing an overview is coming out in a bit but anyways over here let's start working with hexes i made a nice simple visual just to verify that everything is working so all right it should make a star faster with fewer neighbors uh yeah technically although the neighbors part if your a star is well optimized the neighbor's compilation shouldn't be too difficult but yeah technically yeah yep hexagons are bestigons yeah they are great i really gotta rewatch that video from cgp gray that was great i haven't seen it in quite a while anyways okay so let's figure it out typography oh that's awesome i hope you're enjoying it i hope you're on learning a lot took a lot of work but i'm really happy with how it came out and actually what i'm working on here this is going to be a free update to the course pretty much just converting the game of the course from working with regular uh rectangular grids to working with hex grids so that's going with all this research so let's figure out how it all works okay right so let's try doing some work okay so i got my notes here so the whole thing is a bunch of math but it's actually some pretty simple math i'm not very good at math so if you like me are also not very good at math then this should all be nicely understandable so let's start making a script just write some code and test it out okay let's go on a test hex grid and make a game object human brains use hex grids to make internal maps for navigation is that right oh that's quite interesting only working on your 2d build defender core so that's great yeah i really like that that game that was a a very fun design nice mix of building defending that was really fun i'm quite happy with the design of that game that was nice okay so here now the first thing that i want is well let's actually just hide the visual on the floor but don't leave the collider yeah right let me first just make sure that my mouse 3d script make sure this is working so over here let's put it on the ground layer on the mouse 3d let's put it also hit the ground layer and let me just make a quick visual for it so just a sphere put it super tiny and let's make a nice material just to make it glow nicely so mouse and on the sphere drag it and to make it fun let's enable emission nice screen and blow it up okay great so now for my camera just make sure that it's looking correctly so let's say i'm looking down here and okay all right so about making a hex based game that plays like an adventure board game yeah adventure or board games they are very usually working with hexes so yeah this is very useful to know okay why is this did i not make the does the cube not have a call either it does have a collector it's on the ground and all right i didn't drag it that's why okay let's just make sure that the mouse 3d is working and nope not working yet why isn't it working that's strange i also want to make a sphere planet with hex grids yep there was a a game what was that called uh what was that called before we leave i think that's it yeah this one really awesome it's a hex grid on a spherical planet that is a really awesome art style so yeah if you wanted to build something like this yeah that's pretty much just make a hex grid and somehow attach it into a sphere it's really nice yeah i've had this game on my two playlists for quite some time because it looks really interesting nice management building on a hex vertical world really cool okay um why was this one not working did i not examine the muscle position the recast using the mouse is this one not kidding that's strange next i got oh right never mind i put this one on the wrong layer that's why it doesn't work of course um take it out put it on the ground okay all right there you go okay so my mouse is indeed working for the king was a popular isn't that an adventure game something like that i remember that name yeah that looks nice that yep pretty nice yup nice adventure hexes yep really nice i miss your dodge tutorials well when that's 1.0 comes out you can definitely expect a lot of them coming since i really enjoy the tech behind dots so yep once it hits 1.0 definitely going to do a lot of things with it definitely going to be interesting okay anyway so i've got i just wanted to make my mouse just to make the most visual work just so i know i am okay so now let's first just flatten out this one so put it like that for 190 degrees and maybe put the camera a bit more up just so i can actually test out okay put the camera right in here all right so now on the script let's just do a quick update and on update let's do a debug.log on the mouse 3d and let's get the mouse 1 position okay so let's see and make sure that the scale of this is indeed correct see working with hexagonal tunnels yep hexagons are awesome so and hopefully after the research that i've done it should be pretty simple to implement this so let's hope so oh and left the other log okay so anyways on that corner i've got 0.5 0 and 0.25 yep exactly what i'm expecting 0.5 yep exactly like that that one is yup exact all right so far the scale of my of my nice squad is indeed working because i made the squad i drew this in photoshop actually photoshop has a nice tool for making hexagons that was interesting and uh pretty much yeah so i've got all these points and the hex pretty much has a certain distance from the center to the side which happens to be 0.5 so this entire width is one unit and then this point over here this is the tricky thing i thought it i thought i was going to get it based on an angle but now really to calculate this point i'm going to have to start from the center go to the right by half the size then go up i also have the size so that is why this one is on 0.5 and 0.25 this is pretty much that exact point okay so let's first keep track of all the points calculate where all of them are and then i'm going to start identifying if a certain point is within or outside of the of the mesh all right okay so let's start completing those points all right so over here let's make a simple class private class what am i going to call it a well just hexagon i guess and i'm going to have a vector three let's figure out the name so i've got upper upper upper all right so an upper right corner yeah and the other one do i call it upper corner yeah i guess so so if only the three for the upper corner then i'm going to have the upper and left corner and then the ones down here so the lower left corner just the lower corner and the lower right corner okay so those are the six points on a hexagon so pretty much that is the upper right the upper upper left lower left lower and lower right okay great vertex instead of corner yeah i guess technically those two names would work corner vertex i guess vertex kind of means a mesh whereas i want it to be more abstract than an actual mesh but yeah even though in a bit i do want to make a dynamic mesh but okay so now let's first manually create a hexagon then going to do it procedurally so let's create a new one now for the well let me define a vector three for the hexagon center point so i actually gotta i need this as well so vector three for the center point writing each of those trying to put them in one line separated back out just because i don't like that at all i find that very confusing to read something like this one field in one line personally i find this much easier to read but yep as would always as with so many things when it comes to code readability it's whatever works for you so if you don't like that then by all means do that come past directions yeah that is also interesting but for me i always have a always takes about half a second in my brain to try to figure out okay west is that left or right i never quite know the eastwest thing that is always triggered to me so that is why i stick with upper and lower instead of eastwest and so on okay the center point let's put it on factor 3.0 and then over here let's put the center point equals the hexagon center point all right and actually yeah i might as well put it over here or do i make that i don't know i mean i'm just doing this for testing this is going to be all refactored in quite a bit but let's do it like this okay vector three for the center point and i'm going to receive this center point all right and then inside of this one instead of creating it like this let's do a new one pass in down like that and then on this one let's do the compilations and i need the center point as well as the size of course otherwise i can't figure out where it is so a float for the size and look at that a custom character hello that's nice that's awesome by the way all of you you can all get custom characters you can just follow this nice little tutorial you can get your character you can just download the sprite sheet you can draw on top of it and your character will look nice and custom so if you want go ahead and play around that okay as soon as you are into the tiles with the points up yep yeah i might see how to rotate them but yeah for now i saw this if you want to learn pretty much this is the website that i learned a lot from it this is super detailed website so if you want to learn more about hexagons definitely check that out but yep this is pretty much the style that i'm going to be building so with a pointy top instead of a flat top so this kind of thing that i'm doing so i got the size over here the size up here then size half to get to this point size after that point and so on okay right so where was i where was i right so i got the point i need to receive the size and i can start calculating so the upper right corner this one and do i call it size or size half that's a good question let's say size half yeah that's probably okay let's go with size all right so the upper right corner is going to start off from the center point then i want to move to the right so vector oh that's a tricky thing oh actually that's freaking i'm trying to think in terms of x y x z the every online method take a square grid and shift if y'all yep that's that's pretty much what i'm going to do right now i'm mainly focused on the math of trying to figure out is a certain point inside a hex or not that's that's kind of thing okay so here a bit of a tricky issue because i'm trying to get this to work with xz plane so instead of using the default ones i'm going to be using like this okay so for the upper right corner i got to move to the right by half the size so for the right that is going to be one zero zero so that is movement to the right multiplied by size multiplied by point five f for let's define here the half size equal size times 0.5 up okay so then i multiplied by that so that puts me to the right and to get the upper right corner then i got to lift it up so pause a new vector3 except up in this context is up on the zen so 0 0 1 multiplied by and actually i think it's half size times 0.5 right would it be very unperformant to have a collector on each hex yeah that that approach does work and it is indeed uh simpler than using math but yeah that is going to reach into scalability issues pretty quickly so yeah that's that is one option that you can do if your game is limited but i really want to do this proper proper approach using math because this one is going to be easily easily expandable scalable and so on what portuguese city are you based i'm in lisbon you can use radiant math with yeah i mean for me math and angle is already tricky enough and radiance becomes even more tricky so yeah i definitely stick with euler as much as possible okay uh right so i want to go to the right i want to go up but i want to go up by half size times 0.5 so i think this is correct because basically i've got the center point here i want to go to the right by my half size which is this distance however when going up is it also half size no i think it's half size exactly it's not half size it's half size but half of that half off size okay that's a bit confusing but yeah okay so i think this point should be correct so let's do a debug.log try to figure out and see if this corrects over here just got to define a float for the size and for the size let's put one unit so got point five on each side all right okay so let's try it out all right so all right because i got the mouse in the middle uh yeah let me take away the mouse but yeah the other one did work this one is indeed on 0.5 and 0.25 and it is indeed correct so if i put a new one and i put it on 0.5 0.25 and yep it is that point all right great okay so far so good turn on full body fps character you really need to be more specific than that what do you mean by phone body what do you mean by things what do you mean by fps i've got a video on a third person shooter so if you want look at that one third person or first person works pretty much the same and if you want to see how to work with animation rigging to make the weapon name perfectly look at that so pretty much something like that okay right so the first point is indeed working permanently so the upper right corner that is perfect so now doing all the others should be pretty simple so let's do the upper and left corner and for the upper left i go up by center point okay then instead of that go in minus one and then up by that yep now for the let's go the other which is the upper corner so the upper corner is on the center point and i just move up by half the size so that is just zero just one by the half size yep that is correct all right so the upper corner and the lower corner both these are super simple so the lower corner okay so i got those then for the other ones so for the lower left corner and the lower right corner let's see these two okay so for the lower right i start on the center point then i gotta move to the right so this one is a plus one by half the size and then i gotta move down by half size minus point yup that's pretty much it okay all right so i think i think these are working already hey great uh how do i print all this out without being one by one how about if i convert into json just for fun so to json but not this one let's put it over here let's convert this hexagon to json and see if this does work if i can read all the points okay all right well so far the math is going good although so far it's all the simple stuff yeah okay let's see so for all of these this be available in standalone youtube video later yep and actually i think for this one i made it on uh yeah this one will show up as a regular video yeah which is going to be interesting because i've got a standard video coming out in 20 minutes so then i have no idea how you how you how youtube is going to handle uh having one video in one one live stream coming out on the same day so that's going to be an interesting experiment to see what that does to the analytics okay right so this one i'm pretty sure that it works so for the center point on zero zero zero okay makes sense the right corner is on point five point twenty five yep the upper corner zero zero point five all right awesome then the upper left is to the left by minus point five then by point twenty five yep and for the lower left going left then down yep and lower corners just down and the lower right corner to the right and all right great okay so using some math using a center point i am now calculating all the various points okay so now let's figure out the logic for testing if a point is inside a hexagon okay so now let's see all this logic carbon direction is up you can simplify as left right trapezoid i'm not sure what that means cardinal direction is up are you saying use angles instead well let's see okay so i've got the okay so now let's define a point well the point is going to be the so a vector 3 for the test point and the test point is going to be the mouse 3d dot get the mouse world position okay so this is going to be my test point now the first thing that i'm going to test is if it's within the horizontal so test if the test point test test point dot x if it is under the if exactly because it is the okay that's going to be interesting converting into local in global space that is going to be interesting um okay so for the hexagon dot i want to test the x if it's under the right side so let's go into the yeah i can use either of these the upper or the lower okay and testpoint.x is above hexagon dot upper and left corner okay so if it is this one debug.log let's do it inside horizontal and let's put analog so it doesn't break okay so the test point and the x all right great okay so let's see if that simple test is now working and does detect if it is within the inside bounds so if i'm here this one is outside and as i go there yep i'm inside and if i go to the other side okay now i'm outside and now i'm inside all right so i can detect if the mouse is within the left and right but of course it's still detecting over here as being inside when it's outside okay and also the text up here so next let's test under the width and height axial coordinates i'm not sure what that means you mean angles or do you mean low compositions so i gotta say math is not my strong point so if you give me technical terms yeah i'm not going to be able to understand but uh yeah okay so with this i am inside the horizontal now it says if it's inside the the vertical as well so if the test point that's zen if the z is under the hexagon dot upper corner dot z and the test point dot z is above the hexagon dot lower corner lower corner dot z if so then it is inside so let's see log except this time is inside the vertical although it's not really vertical but yep okay all right so let's see about just the closest hex position to the mouse position yeah that would not just testing distance wouldn't work because by testing distance you're essentially just testing around a circular radius so it would kind of break over here on these edge cases you would select the wrong one so yeah just doing like that wouldn't quite work split into two quads in left and right yep i do i do on this uh this really nice website over here there was a part where they mentioned they mentioned something interesting here about quadrants okay it wasn't on this one maybe it was another one but yeah so pretty much i want to test if it's inside the right and the left side then i want to make sure if it's within the bounds then i want to test is it on this corner if so then i got to test against this angle right here if it's on this quadrant i want to test against this one and so on so pretty much like that okay uh right so what am i testing okay so in here so if i go here i'm inside the horizontal and if i go in here now i'm inside the vertical okay so far so good all right right okay so i can test it inside the horizontal and vertical so these were the easy parts and now let me let me test just uh before i put all of them together okay so the horizontal and vertical and that does work but now i want to test if it's within that angle because dealing with odd angles that's the tough part so let me figure it out okay so basically the way that i let me check my notes here so basically with my notes i need to use the dot product and i need to use the vector3 dot perpendicular so let me first figure out how that one works to specific new game just working through new game mechanics well i've got my super useful grid system that i've made in so many videos where's my my grid system there you go all of these they're all based on rectangular grid so i'm pretty much working on the mat to be able to convert all of these into a hex grid specifically over here my my turnbased strategy course so this one works on a standard rectangular grid but yeah i pretty much want to research how to be able to convert that and so on make it hex so that's kind of the goal here so pretty much the research that i'm doing here will end up as a free expansion on the course so that should be fun okay so let me try to figure that okay so i'm going to need to so i've got my points now i need to calculate the direction from this point into this point why was i thinking oh right because then i need to rotate it okay so yeah i just finished that course that's awesome i hope you enjoyed it i hope you'll learn a lot all right so let me figure out the direction vector going from the upper right corner into the upper corner so let me do a thing about download here just to see if that does work or actually instead of working inside here let's work outside here okay debug download let's go inside the hexagon let's grab the upper right corner or actually now start on the hexagon dot the upper corner so upper corner minus the upper right corner so this should give me that thing and then let me make another one using that direction and i'm going to use the function which i've never used so vector 2 dot perpendicular except it's not going to work because it's the vector 3 so that's going to be interesting uh right so i need only vector three so there from upper right corner is going to be a huge name to upper corner all right so this is this direction so let's get this so that's my direction so that's the one going from there and up and then for the perpendicular except i'm going to need to create a new vector 2 because this only works with vector 2s yeah along variable names i mean at least it's very descriptive so there can be no doubt as to what this variable contains okay so i can only be perpendicular and now let's see i actually don't know if that one is going to rotate that way or that way so let's see okay now let's see what it returns okay so which one is the direction which one is that one so this one is direction from the upper right to the upper corner uh does that actually make sense i actually don't know well that's yeah right i made this test but i don't know how to verify it but technically no yeah it is correct yeah of course going from this point to that point is going to move minus 0.5 on the x and plus 0.25 on the zen yep okay so that is correct and then the other one makes a vector on minus 25 and minus 0.5 so i got it in my brain convert that from x y to x z so minus 0.25 is going to move just a little bit and then down so so it is correct basically i just want to i just wanted to know is that going to point in that direction or up here and apparently it is going to point around in this direction which is exactly what i want okay great so that is indeed the vector so that is that one so okay let's think uh i've got a vector 2 perpendicular let me store this one yeah this one conversion is difficult i might actually have to make my own vector two perpendiculars vector three does not have a perpendicular nope it does not so yeah i'll probably have to make my own sort of utility function so i don't end up with very massive conversions between vector twos and factor threes okay so i've got a vector three so uh oh boy this is tricky oh god this is a tough name to figure out so direction to center except it's not really direction to the center but yeah anyways so let's figure that out in a bit so perpendicular dot x then zero on the y then perpendicular dot z okay so this one is going to be direction to center and now for the final thing that i actually want to use that's vector 3 dot and now i always forget which one of these but i think it doesn't matter so if i use this one and then the other direction is the point to the center okay now i'm confused no this one is the direction from that corner to the center so now i want from the test point to that one and if it goes in the same direction then it's correct if not okay so i need the vector three for the direction from test point to uh where am i going test point to the upper right corner okay i'm thinking a lot so sorry if i'm not responding to chat but yeah i'm trying to trying to think so the distance from the test point to the upper right corner so let's go into the hexagon grab the upper right corner minus the test point so this is going to be a certain direction let me do yeah i'm going to need a bunch of logs to make sure that i know what all this is doing and then i got the dot with that one and this one and maybe the dot product will indeed work well let's test let's see what all of this is doing dot okay and let's hide this one all right so let's do a test and try it out and i got an error what did i forget did i not save oh not z dot one okay all right hey there doing great hey thanks for being here with your awesome custom character thank you that's nice all right so let's see if this one does work let me actually zoom in the camera the camera is way too far so let me zoom in the camera so it's a bit easier to see all right okay just rectangle in mid and triggers to check if it hits any of them yeah that's pretty much it okay so first of all the direction from the test point to the upper right corner so if the test point isn't there so if the test point is right to the right then direction from the test point to yep going to the left alright that is perfect and yeah actually it is already working all right awesome so it is working so if i don't like this why is it yeah probably flip the the order around why is that one not approaching one that's a bit strange because it is working but is the magnitude does the dot product does that get get uh confused with magnitude that's probably it so let me just normalize these just to make sure that i see a nice minus one or plus one perpendicular point in the right direction yep it is going inside so that is correct so if i see yep okay so apparently that one does have to be normalized all right awesome so so pretty much over here i'm testing if the the mouse position if it is uh on this side of this line here so comparing against this line is it on this side or on that side and i can test with the dot product so if it's on this side the dot product is on minus one and if it's on that one it's on positive all right and if it is perfectly perpendicular so the other vector is pointing straight around let's see around here so that part the dot product is exactly on minus one and if i point in there it's exactly plus one all right awesome so this is indeed working just for a tutorial well uh yep i won't make a tutorial on how to make a hex word and i will also update my turnbased strategy course to make it work with hexes so this is going to be some very small research all right okay vestagons yep hexagons are vestagons okay now how do i clean up this code so that it's not quite such a mess um i'm trying to figure out what do i call a test direction uh trying to come up with some good names for this so maybe a vector 3 for the uh why not use vs code just because i've used regular visual studio for such a long time so this one works perfectly in fact i think this one what is version yeah i think this one is version 2017 but it works perfectly so yeah no reason to switch you got nothing against visual studio code so if you like it definitely use it and for me i won't keep using this okay so let me think about the name what is wrong with the builtin timeline well because i want to learn how hexes work and because the builtin tile map i don't want to be using a time map i want to be using the hex for logic not just for visual so so that is why i want to handle it all by myself okay so let's figure out a good name for this so basically i only need this one in order to calculate the perpendicular that is pretty much the only one that i want ah i guess i i can just go with super long names and then figure out if there's a better name so basically i just want ah i'm annoyed because the the name isn't perfect wrong question is why not dark mode because dark mode burns my eyes that's pretty much it um i'm trying to think the direction of the upper right point down into the center except that is not true but yeah i guess i won't take a bit of an incorrect name as opposed to something that would be way too annoying i'm not sure all right anyway so direction uh upper right corner to center although again it's not exactly like that yeah long names are always better but over here it would technically be the direction upper right corner perpendicular from direction from upper right to upper corner so at that point i think if the name is 100 characters long then at that point it would become quite tricky so yeah i guess let's go with this even though the direction is not technically 100 going from that corner to the center it's a bit more offside so yeah we're thinking about jetbrains rather i've heard lots of people uh talk lots of good things about it but i've never actually used it so i don't know basically i'm very happy with visual studio does everything that i wanted to do it allows me to rename it allows me to have it allows me to have colors on all the things so yeah pretty much visual studio works perfectly okay we should set codes for each other instead of similarly naming yeah maybe i mean for these i'm okay with these names they are worthy but i think they are descriptive it's on these ones that are confusing but anyways let's go with this then i'll figure out if i can find out some other name notice me senpai all right that's great i'm glad you enjoyed the videos thank you okay so upper right to center now upper left to center so upper and left corner to center then it's going to be the lower right corner to center right oh that is actually going to be tricky this one i'm not sure if it's going to work exactly as intended but let's go and the upper left corner to center we post this video later yep it won't be posted like oh look at that it's almost 6 p.m because i got a regular video coming out in a bit so yeah it's going to be interesting how that regular video is going to conflict with the live stream which is also going to be started as a video so that is going to be interesting to look at that from the point of view of analytics okay so let's just let's just do this is this part of a bigger project well the research that i'm doing here will eventually turn into a free expansion to my turnbased strategy course so technically yes although i will also make a standalone video so yes and no that is the answer okay so the direction from the upper right corner to the upper corner and i take the upper corner and the upper right corner then i've got to take that one and converting to the perpendicular oh god this definitely this is way too big a name oh boy i don't like again i'm going to have to refactor this i'm going to have to make my own perpendicular function so that it doesn't end up like this anyway so this one should be correct but now the other ones that is what is going to be tricky so i want the direction from the upper left corner upper and left corner to the upper corner so upper and left to the upper corner so that is this direction so upper corner minus the upper left corner okay then from that one i want to make that one a perpendicular except i think this perpendicular is going to be moving in the opposite direction so that is going to be tricky i got to convert this but yeah i do the perpendicular of that one and that is eventually going to become this one the direction upper and left corner to center okay now let's just do the other two ones so direction from the lower left corner or my background some inspiration while i work on combining some systems i had worked on months and months ago all right that's awesome go for it i hope the work goes well yeah definitely push it towards the finish line i mean finishing projects is definitely where you get the all of the unlearnings from that project so yeah definitely if you got something that was interesting definitely go ahead and finish it okay so this one is actually wrong this is from the lower left corner to the lower corner that's what i want i don't want to go to the upper corner so the lower corner let's go into this one yeah all these names are very unwieldy but let's see because i think a bunch of these oh right yeah i think a bunch of these are going to be yeah perpendicular trying to point to the center i'm trying to point to the center but it's not exactly to the center because the center is not uh uh where's my where's my thing so basically this angle here the center is over here in the middle and if i make the angle to the center it is not going to match this line here if i point straight to the center then the line is more around like this so i want to take this line this direction then make it perpendicular to get it pretty much just like this then with that one i can use the dot product to make it like that how do you get a custom avatar again there's a nice tutorial here and when you do it let me know because there's a manual validation process so if you make your own sprite sheet make sure you link your youtube account and then let me know so that i can manually validate it okay so back into this logic so this i want the lower order corner uh six game object children but that would not be scalable and the whole point we're doing this using math instead of raycasts and so on is to make it scalable so that is why i'm not doing it like that okay so the lower corner minus the lower left corner lower corner minus the lower left corner okay so i've got that one then i've got the perpendicular on this one yep then i take that perpendicular and this one becomes the direction from the lower left corner to the center and the final one the final one is going to be the lower right corner so that's the lower right corner to the lower corner yes so the lower right corner let's just make sure let's hope that all these are correct let's hope i didn't miss anything here okay so now let me do a whole bunch of logs on these ones okay so on all of these let's see this guy this one should be correct and now for the other ones the lower left the upper left lower left and lower right and lower all right so that was a lot of stuff but let's see if all of those are correct okay boy all right okay let's pause this all right so let's see the direction on the upper right corner that is this one up here going down to the center although not exactly the center that is minus on the x and lower on this end so that is correct then the upper and left corner to the center so nope that is going to the left yeah exactly that's the problem that is going to the left and going up so i pretty much want the opposite uh so how do i yeah i gotta i gotta invert it i gotta make the direction from the upper and left corner too i pretty much gotta invert oh boy what did i do uh i've got to invert this one and now like this obviously like this the name is broken but yeah check my character okay let me let me try that okay let's see if the other one is correct so that one going left and down that is correct that one is going right and down all right that is correct for the lower left corner that's this one over here it's going to right and up all right that is perfect and the lower right lower right is going to the right and down so that is not correct so that one also needs to change so like this i save it i did not save it all right because i was in there uh all right so there's two people with custom textures let's validate it then tell it to update the character customization and there you go look at that a custom character that's nice it's always awesome when when people do this only handful of people have done it but yeah it's a pretty fun so yeah there you go you've got a custom character that's nice uh okay so i think this logic did indeed work let's see uh right so all of them work so on the upper right corner i'm going left and down that is correct on the upper left corner i'm going right and down that is correct on the lower left corner i'm going to the right and up that is correct and on the lower right corner i'm going left and up that is correct all right okay that was tricky but yep it does work so i've got all the corners and yeah i should probably normalize them so i don't have that problem so let's just normalize these just normalize these where am i just normalize these and normalize okay so then i've got the direction oh right that is going to be i mean technically the math here is super simple but the logic to get it all working that's the thing that is quite a bit tricky about the vertices but you actually mean the sides no i do mean the corner so this one up here this is exactly the upper right corner then this one is exactly the upper corner this one is the upper left corner so it's only on the corners that i'm thinking so pretty much now i've got the perpendicular zone pointing to the side so using that i can calculate and see if a point is on one side or another side of a certain line so i got direction so let's just make sure this one works uh dear to center that was the other one that i was doing right yeah i think i was using this one so the hexagon dot this guy i think that's what i was using and yeah that's the only tricky things that i need the the test point to compare with that one but yeah okay so basically now i can get rid of this and i need this and now this dot should be working with regards to the upper right corner so let's see if it is working you don't sound like you look okay thank you i guess i don't know if that's positive or negative but thank you all right okay so i'm testing against this line so if the the point isn't there then i've got dot product on the positive and if the point is here i've got negative all right awesome so actually i wouldn't like that to be the opposite if i swap this won't that work actually i don't know so let's test test it out best way to structure architecture code as a newbie where should i start should i learn something like solid principle yep definitely do study the solid principles and uh well i mean if you know the absolute basics then i would definitely recommend you look into my turnbased strategy course because the whole point the whole point with that course was to help you learn how to structure organize the code write good click code so that is what i would recommend but you can also just go online oh and yeah and i don't have the book here with me but the book code complete2 i've recommended this book several times so yeah definitely go ahead and get this book it's a pretty massive book it's like a thousand pages long but if you want to learn how to write good clean code definitely go ahead and get this book okay so what was i doing uh right testing so this one oh right i just wanted to see if that one flips becomes positive instead of negative okay uh all right so yeah that actually didn't change did i not save the code or is that intentional yeah i don't know if the dot product is depending on then my vote for more live streams yeah i definitely want to make them quite a bit more regular since the setup works everything works honestly the only issue is that it's insanely hot that's kind of problem over here with these lights i'm sweating like crazy so i can't stream for more than about an hour and a half otherwise yeah it's a pretty messy all right so yeah that does not swap but it's okay the dot product is under one so that can be good okay so that's one of these dot products so let's call it a float for dot test upper right corner so this is going to be my test and i do this dot product all right so now testing for the other ones so the dot test on the upper left corner there from test point to the upper left corner and the upper left corner all right so this is actually hopefully pretty simple and deer upper and left corner to center alright so let's see if this one is working so already got the horizontals working so now if these lines work then everything will indeed work uh okay so which one am i testing i'm testing the other one right so i'm testing this line here and if i'm in here i've got a negative and here i got a positive all right so that is awesome okay but that course has helped me a lot to go through 35 but pause now because some worse on you all right yeah that's great i mean the the course is waiting for you so don't uh don't feel stressed about that definitely go back to it when you got the time yeah definitely if this is your hobby definitely don't stress there are more important things but yeah do get back to it because while completing things really helps i'm learning the the final part of it so don't stress out but eventually do make sure you get back to it don't don't drop it because that teaches you a lot of interesting things especially near the end of the course as things become more and more complex that's when you learn quite a bit more so that is quite an interesting one okay so let me test just the other points so this one is going to be this direction to the test point to the lower left corner so lower left corner that's all i need and the dear lower left corner to center so that is going to be the top test the lower left corner and let's do another one so that is that one and the dot test lower right corner is going to be this one okay explain what you are trying to do i'm trying to do some math to figure out if a point is inside a hexagon or not that is pretty much it so the lower right corner so i test the lower right corner to the test point and direction little right corner to the center and this one over here okay so i think that is correct do some vr deaf tutorials yup that is a topic that i very much would like to research i've only played a few vr games i really love beat saber that is really awesome and that is a quite a workout it's pretty awesome so yeah i definitely would like to research a bit more vr maybe do some videos but yeah with that the whole problem is how do you present them that is kind of the tricky thing so for vr i would kind of have to get a camera set up in order to i don't know showcase wearing the wet the headset and so on so yeah it's a tricky thing but yeah definitely an area that i would love to research all right so this is all working so that one is outside that one is inside down is outside down is inside okay so honestly with all of these obviously this code is not it's not really it's not very pretty but it does work so if i go like this i've got my test point i check if it's inside the horizontal inside the vertical and then inside i do all of these calculations test against all the angles and now after this oh hey another custom character hey thanks for being here all right uh so now for testing if it's inside all of them now of course i could still do some math but if i test pretty much all of these dot tests if they are all under zero so that's pretty much going to be the thing douglas quest you can easily cast to a web browser is that so is interesting i need to look into that i do have a quest it's really awesome being wireless really is quite a game changer so yeah that is pretty cool all right so with all these debug.oh inside hexagon there you go just like that so all the math is actually pretty simple it looks complex because there's a lot of things involved but the math is all pretty simple so with all this inside the horizontal the vertical yup yup yup and then i got this one all right so yeah this is quite the tricky thing make an application transparent window in unity with characters similar to one yep and just in case you don't know i did make a video on that so if you want the transparent unity window i made a video on how you can achieve that which is what i'm using over here for the overlay and if you want to know how i made the characters those are pretty much just dynamic meshes so you can look into those to figure out how i built all of this you are actually an old man am i old i guess that is very relative i mean i'm 34 years old so i guess depending on the point of view that might be old or not okay so let's test so did i not make oh i did make a log all right awesome let me make another log here so let's do that one return and if it does not return debug.log outside hexagon okay let's see 134 okay all right okay so the logic is indeed working so over here i'm outside the hexagon and as i go here still outside as i go here still outside and i go in there and yep i'm inside so outside inside over here inside everywhere go there outside on the corners outside inside all right oh boy okay that was pretty interesting make the sphere change colors if it's outsider and you know what that's actually a very fun idea so let's do that just for fun so let's make a serialized field for the do i go material yeah let's go now let's go with mesh render mesh renderer for the sphere mesh renderer let's go with that one then make a material called green material and let's go with another one called the red material so let's try doing that just for fun so you put that one dot material ah auto complete isn't working uh that material equals the green material if it's inside and if it's outside the hexagon let's go with the red material red material just like this okay 37n can code this well well i mean it all depends on when you start that's pretty much it if you start a bit late then definitely don't feel too bad i mean you can always you can always learn that's pretty much it no matter how old you are you can always start learning right now that's the same thing with me with uh going to the gym i definitely wish i started going to the gym when i was like 18 years old but anyways okay i went a bit late but still it's only enough to be pretty effective so yeah okay so let's write the sphere mesh render and material boy i can't read it hey everyone nice i can't read underneath that so the green material and the red material all right oh boy oh right it's past 6 p.m i didn't even notice but the video should be live right now so it's red and green red green red green all right awesome so yeah all the logic works over here it's red as i go inside there you go turns green so i can definitely identify when an object is inside or outside a hexagon okay that is really awesome it's really cool oh boy all right nice okay thanks for the tutorials thanks a lot that's awesome i'm glad the videos have helped you okay let me just make sure that the the video was supposed to launch didn't launch correctly did everything go over yep it did and just in case you haven't seen that video yet pretty much is just an overview of the of the new humboldt bundle which has not just visuals but actually some really interesting tools like this one over here if you want to make things nice and bouncy look at that you can make things real nice and bouncy and collide with things that is really interesting so this one is supposedly about uh art but it does have a lot of interesting tools like this one which can make turn a 3d mesh and make it pixelated so really awesome so this bundle i thought with art it wasn't going to be as interesting but actually has quite a lot of interesting tools so yeah pretty nice anyways okay so the hex didn't did work yep a new homo bundle yeah there is the two bundle last week and now there's a new one okay so all this logic worked so i got all the corners on the thing so i'll have to refactor this code to come up with a bit better names but on the logic is indeed working so i test if it's inside the horizontal the vertical and then i test against all the things now of course this could be a lot more performant but yep that does indeed work so the only thing is over here the test point and you gotta do some math hmm try and think of how i would change that okay and the other thing that i want to test is if instead of just one hexagon if i'm testing out a grid of hexagons trying to see if the distance would work because i'm not sure that it would or would am i upside down no okay why is that okay now i'm confused where am i that is the x okay right i was a bit confused on that yeah a nice unity bundle yep how to be part of humboldt i'm not sure what you mean part you mean as a publisher well i guess unity organizes the bundle so the nts is our the unity assessor team would be the ones who invite people i would assume so pretty much like that okay so right i was going to test the distance just to see if a distance works because i don't think it works but maybe it does i'm not sure so technically on a grid this would be 0.5 this would be seven five is that correct or is it seven two five no i think that's two five no yeah definitely seven five okay so pretty much like this and now if i put over here on minus 0.5 and if i go down there so this would be 1 1 1 0 yeah exactly all right so let me just do another interesting thing so let me make here a serialized field private uh uh what do i want a transform let's do one list i prefer a list list of transforms so so hex transform list so let's go with that one and over here let's actually let's not run this code right now so just return don't want to run that uh okay so i want to find the closest so transform closest because no then yeah for each of these so transform hex transform in the hex transform list if the closest equals null then this one becomes equals so of course this equals the hex transform and if not then let's do a vector three dot distance calculate the distance from the closest dot transform dot close dot position that is already transformed from down to the mouse realm position so let's use define the test point up here so from that the test point if the new one is closer than the closest so let's just this one this one the hex transform that position the distance if it is closer than the one that was closest then the closest becomes this hex transform okay let's do a debug.log on this hoses and see if this does work because i'm not sure that the um the hex transform list just testing like this i'm not sure this would work but maybe it does work so maybe all that math is only really required for or actually right yeah i don't know uh okay so well i need to kind of remember where all these positions are so that is the so yeah this one is the original then the quad one part two and quad three okay so if i'm here this one is the quad down is a quad one that one is a two and then there's a three and if it is right up there even if it goes to the corner yep still says down and down all right so yeah actually this does work so if i'm doing just one hex yeah i do need to do all that math but if i'm testing against a grid then i actually just need to do transform positions all right so that actually simplifies the code by quite a lot so i'm trying to think um let me let me think how to update textures in stream you can follow this tutorial where you can download the base texture you can draw whatever you want on it then you can save your changes and make sure you link your youtube account so that the character knows which one belongs to you and then of course this has manual validation so if you do that then let me know and i will manually validate okay so what do i want what i want let me go into my grid system um oh i didn't name it grid system i just named grid uh right because my attires are sick yeah nice mr bean with nice doggy doggy doge is that doge well technically just a shiva you know i guess uh anyways all right so actually can you validate okay let me let me try doing that let me see if there are any new ones uh okay yeah right so this is the other math that i'm going to pretty much need to do that is going to be tricky okay now that one is definitely going to be tricky how do i take a worm position and convert it into a hex grin xy i guess that would be it i would have to do some math and figure out which one is closest that's kind of it so let's see okay there's a bunch of custom textures all right so let me put them and now update the character customization and in a little bit there you go there's a custom texture a nice snowman that is nice is he looking left right he's looking right there you go i don't like that that is nice hey another one yeah there you go nice all right that is cool okay right so a lot of custom textures already that is fun okay uh anyway so yeah the main thing that i wanted to do the uh doing all this math to calculate if a certain point is inside or outside that did work perfectly just divide the wrong position dot x on the hex size and that point five zero is on yeah i can figure out the x and y the problem is on the angles because i need to take a world position and convert it into down if i just add an offset then it won't be a hex shape it won't just be an offset grid shape so yeah why don't you use dark mode because dark mode burns my eyes that's pretty much it about rendering the hex grid in game well actually yeah actually that is another thing that i wanted to try out now that this logic is indeed working uh you can pretty much just make a custom mesh so pretty much all the characters down here these are all custom meshes so that is kind of what i want to do in order to in order to print out a grid so let's actually try doing that but yep on the logic for testing if it's inside or outside a single one that does work smart mode burns my eyes but not the other way around yep that is correct dark mode burns my eyes my eyes can't seem to focus on white uh letters on a dark background but over here but if it isn't like this my eyes got no problem i can look at this for hours on end no issue okay so anyways yeah so the logic for testing if it's inside or outside a hex grid does work perfectly so inside and outside and all of this these are all outside of the main one and as i go in here go inside like that all right so that is pretty cool okay great uh right so yeah let's actually try doing a visual to the hex since this is indeed working so let's go up here i just want to run it once so let's do it on start and i've got my mesh utils which i wrote in a video i don't even know how long i think maybe it was on the mesh video kind of like that where i can create an empty mesh and then okay these are adding quads so that is not what i want yeah i think i'll just manually um add the mesh yeah i think that is probably the the best approach because these are all add line points so pretty much all this was made with quads in mind and not really made with the other thing in mind okay all right so i think i'll just manually make it which should be fun because i haven't i haven't made a mesh in quite some time so basically i need the vertices the uvs and triangles okay so let's actually do this can i create an empty mesh yeah that one just creates the empty ones then i'm copying them and so on okay uh right so let's actually try this to use vs code or vs this is just standard visual studio it's the community version which is free so yeah that's pretty much it okay so let's start just drawing a triangle so we need three vertices do i need the uvs i don't think i need uvs or not and the triangles that is six right six plus one oh right is it six okay now i'm confused no it's not six it's six if i was meaning a quad if i'm just making a triangle then it's only three okay great so mesh mesh becomes a new mesh and then mesh dot vertices equals these vertices mesh dot triangles equals triangles okay so now i just need a i got a mesh render now let's make a mesh filter so hex mesh filter so let's try this one then i do that then on measurement mesh equals this mesh okay so let's add something and see if it does work my chat is on the other side other thing okay right i didn't have the free version i enjoy it but i'm too poor yeah i've heard great things about writer but i have not used it how do i make my own utilities package i'm not sure what you mean by i mean there's nothing special about utilities let's just say for example over here i've got my code monkey.utils why can't i find the utel's class ah utils class so that's all it is these are utilities you just put it inside namespace and start writing classes objects functions whatever so yeah pretty much what you need so yeah there's nothing else there's nothing special about the name utilities it's from just code with useful functions that you might do for me i've been building this class with lots of interesting things for i don't know like 10 years now like for example over here random city name this is when i made my first steam game survivor nights survivor squad where i need a bunch of names for random towns that were randomly generated so i made this function and since it might be useful i also put it in here so that's pretty much it same thing for getting random names just in case i need them get a random id random so on so yeah just a bunch of useful functions okay where is the hexagon class it's over here just something simple just because i need to store all the points on the things okay so let's see if this one does spawn a mesh so i need to go up here and let me actually hide the visuals hide those visuals right now let me just duplicate this one let me unlock that one let's call this hex i'm going to have a mesh filter mesh renderer but no material no nothing just like that so let's see if this one does change let's just drag the reference and let's test okay right is this code hard to make not really what i've got here is very much uh something pretty simple so yeah okay so that's my mesh and isn't this super oh yeah there you go three vertices okay so i think that does work okay so now let's put some points so on the vertices we've already seen zero let's put it on new vector three on zero zero zero okay then i've got the vertices one let's put a triangle so put the right on one zero zero and that one zero zero one so just like this then i've got to set up the triangles so triangles where is this one going to be and let's go because this one i always get confused if it's clockwise or counterclockwise i'm going to assume that it's clockwise so let's start off on vertex zero and then let's go one that's one right so that would be counterclockwise so let's go into two and then two one okay let's see this looks complex to me well it depends on your base knowledge i mean for example what i'm doing here these are just basic uh meshes so if you know how meshes work then this is pretty basic but if you don't know how much is worked then yeah this looks quite a bit confusing and all the math down here it looks like a lot but it's really just doing the same thing over and over so vector3 dot dot this one by the way this was a super awesome thing that i made the backstab mechanic that was a fun video to make that is what what made me research the uh vector3.mechanic mechanic the math function to see how it works so yeah if you haven't seen that video definitely watch it because it's a pretty interesting thing you can basically use the math to figure out if a character is behind another one to trigger a backstab or not that is fun do you make assets or buy them i buy them because i am not a artist 3d modeler so all these these are from a various uh cinti packs so yeah i haven't drawn any of these i am not in uh an artist i'm not a 3d modeler nothing like that so yeah um okay so i could probably get rid of that but uh did this not work did it end up backwards why did i put a compiler i did put a collateral i don't want to call either but um let's go into wireframe except i don't see it oh there it is wait did i put it on these zed wait where am i yeah xz so why is that did i mess up in there what did i do now i put it on the x number is this rotate okay this is rotate yeah that is why put it on zero and get rid of the collider okay many times have you tried learning blender i tried it just the just what like a year ago half a year ago i don't know i tried i actually learned quite a bit but yeah as always it's a it's a question of experience and training so i haven't really touched it much since so yeah if i went back right now i definitely would need quite a bit of a refresher does portugal have their own version of silicon valley are there any tech hubs in the country now really uh i mean there's some tech related universities but not really anything on the scale of silicon valley there's no i mean there's pretty much no game developers over here in portugal there's a i think the biggest one is mini clip which they make mobile games they used to make flash games and i'll make mobile games so i think that's the biggest one here but yeah not much of a market is a pretty tiny country so yeah i mean that is why i eventually became independent is because if i went for a regular job i wouldn't be able to find anything so yeah i mean that led to me being doing what i am doing now so i'm quite happy with how things turned out so that was that was fun uh okay yeah originally wants to be like silicon valley yeah it wants to but i don't think i don't know at least i'm not i'm not too familiar with it but yeah i know they want to become but i don't know maybe there's something awesome that came out of there that i don't know that would be something got a custom character main okay let me refresh the validation okay thanks so much for the timebased course it immensely helped me nailed an interview segment all right that's awesome yeah i hope it goes well best of luck that is great that is great yeah i hope you get it uh what was i doing use unity for other projects other than making games well this overlay here this is technically not a game and it is made with unity so yeah i just messed up in here so yeah i haven't really built i also built a nice uh a graph to graph my to graph a bunch of things so i had some data points so i created a simple graph in unity and did that so like that and uh so yeah thanks again and now for the super chat was i doing that is not working uh yeah so this is indeed working so it is going to that to that and i'm pretty sure the only reason why it's pink is just because i did not assign a mesh so if i assign a a machine material yep it does work all right awesome so so actually this might be super simple for drawing a mesh i'm trying to think trying to think so i can create a hexagon and let me do a return here because i don't want those logs to keep popping up so i've got a hexagon point center let's actually define it up here so up here does the order matter in the vertices array uh yes it matters for depth i think yeah i'm pretty sure it matters for depth pretty much vertices lower on the on the array are going to be in front of the ones or i'm not sure there was something to it but yeah i'm not sure is it depth no actually i don't think it stops because obviously it does work if the camera rotates or maybe it was depth but only on 2d yeah i think that was it i think maybe that was it when making these characters i have to make sure that the quad for the head is drawn after the quad for the body and the quad for that hand has to be drawn first i think that was it i think that's why so i think in 2d the order on the vertices array does matter but in 3d maybe not i don't know i don't know that's a good question but over here on triangles it doesn't matter if you put it counterclockwise and it's pretty much going to look the other way so that's kind of tricky how many hours a day do you spend programming well that really depends on the days i i spend a lot of time just researching things for new videos i spend a lot of time just writing videos recording editing so yeah programming i don't know maybe two hours a day it really depends on kind of things that i'm doing when i was preparing the course yeah that was pretty much just programming when i was making the games pretty much just programming but yeah nowadays with making video tutorials that involves quite a lot more than just programming so yeah i'm getting thrown for using ap characters like spiderman in your videos no i mean i only use it in very very unlimited ways so for example the spiderman video that was quite a long time ago that was pretty fun making that one when i made this one shoot webs this was still when i was making tutorials in multiple parts yeah that was a fun character but yeah the character i mean it was drawn by me so it's obviously it's obviously spiderman but i drew the sprite in order to make it work so yeah it's not big enough for the automated uh content from disney or whatever to find out and my channel is way too small for anyone to manually care so so that's pretty much it why well i never really got any issues that's pretty much it uh what was i doing right so i got the hexagon so this is pretty much just making triangles right yeah so if i put let's let's build on the vertices so vertex one is going to be the hexagon.center point then for this one yeah let's put all of those so center point let's go the upper right corner let me just copy all these considered free advertising yeah maybe i mean if i got millions of views then maybe somebody would be upset but yeah at this point yeah just pretty much advertising unit testing in gamedev is an important part i mean that depends on how you work for me i really value the concept of testing but in terms of being an indie game developer you really have to be insanely fast you've got to be able to produce a game extremely quickly and for that if you are a solo game developer then then testing just adds more work without too much benefit if you're part of the team and making something really complex on a massive scale then definitely but something on the scale of the games that i make small indie games for that i don't think the math works out for for the time that it takes to make testing but just because i don't specifically do testing i absolutely do sort of test driven development i mean not driven by testing but every code that i write i try to make sure that the code would be testable so i don't write unit tests but i do make sure that the code that i write would be possible to use united so that's my insert nut all right another super chat that's nice thank you how would you make enemies backstab the player i'm not sure what you mean by that are you referring to the backstab video i mean the logic for that one would be the same so you would test the vector from the from the enemy's point of view to the player's point of view so if the enemy is behind the player then you would trigger the backstab attack although probably with the enemies you would make it a bit more more specific so they would have to be right behind otherwise it would be very tricky so yeah that's pretty much what you do pretty much the exact same logic as here on this video pretty much the exact same logic but just apply to the enemy ai so then how do you move the enemy and all of that that is pretty much well that really depends on what kind of ai you're using what kind of state machine what kind of system yeah but the logic for testing the backstab specifically yeah it's pretty much exactly the same thing so you just do a simple dot product to test if a point is underneath is behind a certain point okay so let's do a triangle let's try doing one on the upper right so yeah for this one let's actually make this yet it's not going to match but okay let's do seven points and four triangles let's switch is three and i already forgot it's gotta be counter clockwise or clockwise i think it's clockwise so let's start from the center point let's go to the upper corner so that is the next two okay great then let's go to the upper right corner which is the next one all right so just like this it should work i want to turn on let's keep it up that's awesome i'm glad you like the videos i mean the only reason why the channel exists is because all of you watch the videos so yeah thank you all for being here i'm glad you find the videos useful and helpful okay did this work let me create a point just to verify that it is positioned correctly on zero zero zero and for this point if i move it in there i'm 1.5.25 okay that is correct and there on 0.5 all right okay awesome so that did work i love your work i may have moved away from unity but your concepts certainly carry over yeah there's a lot of uh game development is very general for example i'm sure all of you are already aware but just in case you're not definitely let me open it ah it was broken definitely go and watch the game makers still kid thanks again for the super chat real nice thank you the game maker song kit so pretty much really awesome videos on game design and none of that is related to any specific engine so yeah a lot of things about game development are very global so yeah you can definitely even if you're not using unity you can certainly learn a bunch of things from my channel or if you're using unity you can learn from an unreal channel yeah a lot of things about games game development they're pretty universal yeah gmtk is definitely an awesome channel really awesome lots of awesome info okay so let me try making the second point let me make the one going from the upper right to the upper left so let's add another triangle so three four five so over here i'm going to need six triangles so for that one i'm going to start on zero and again gotta go clockwise so i gotta go there so that's the upper and left corner so that is on index three no this one is on zero this one's on three then going to one which is the upper corner or did i do it the other one right no yeah i did it correct okay like that so i gotta go into two which is the upper corner okay great i forget neck or shoulder pain when hunched over the keyboard i recommend that chair you're sitting on uh i don't know this chair is pretty basic but i've bought it like i don't know seven years ago so i don't even exactly know make or model or rather i don't think this company still exists so i don't know if i would recommend this chair specific i mean it's not bad it's pretty standard just nothing special and then yeah i don't really get neck or shoulder pain just because i make it an effort to go out as much as possible so i don't really sit here for eight hours a day i've got my dog so i take them outside three times a day so that lets me get up and move i drink a lot of water so getting up drinking a lot of water that also makes a nice break i go to the gym so again also a nice break i go for a walk so again nice break so yeah if you got problems with neck and shoulder pain i highly recommend you simply spend less time in front of the computer and less time sitting because yeah that is definitely not a very healthy thing yeah that would be my best advice because yeah focusing on a chair that can solve that i don't think that would actually work although yeah a good chair is definitely yeah a standing table can also be good if you're standing i mean the basic the best thing about posture that i've heard is the the best posture is your next posture meaning constantly switch around your posture that's pretty much the thing how do you do that with the pen these are pen tricks so if i search for pen tricks if you search back when i learned there was no youtube but yeah nowadays you've got lots of pen spinning pen tricks pen tricks and lots of lots of interesting awesome stuff i only know the basics but yeah pretty cool stuff all right anyway so yeah i did make that one so yeah the logic is indeed working so let's make all the other triangles so i've got that one so that's six seven and eight and for this one i want that one so in order to go i've got to go into the lower left corner so that is on index four then the upper and left corner that is on index three and then go into the center point so that is on two all right yeah because i started on the other one let's let's keep it the same so start on zero then go on the lower left so that is on four then going to three okay so for the next one i gotta go down so that's 9 10 and 11. so starting on zero go down that's the lower corner that's on six then to the lower left that's on four okay and now let's see the other one hey cpu hey how's it going let's see all right so let's get into 12 13 and 14. so start on zero uh okay i already forgot this one what is the six the six is the lower corner in the lower left all right so i want to go down into the same six but then i want to go into the lower right corner so that is on five okay and i think there's only one left so that going into five and from five then again going to the upper right corner that is on one that is on 14 15 16 17. so there are 18 triangles okay let's see if i put all that correct all right thanks again oh boy it's already almost seven so just a bit more my voice already starting to go and apparently i messed something up okay what did i mess up um was it the last one oh i went backwards and this is always the tricky part uh this is always the tricky thing when making meshes you got to make them clockwise if you want them to face upwards if you make them counterclockwise they face downwards so that is why oh right because i kept going in this same direction instead of the other direction so that is why it broke so if i just swap this so five and six and one and five if i swap this now it should work okay and yep there you go look at that a nice drawn hexagon drawn using code like that it looks really nice so a nice pointy hexagon and it is on zero zero so now the other logic if i run that it should work the same even though the other visual isn't working kind of like coding is nice to turn on a hex rhythm does he that's nice i've seen that website a bunch of times a bunch of really good uh nice tutorial so yeah i don't know how i missed that okay so yeah it does work and the logic for testing if it's inside the hexagon still works let me just make a proper thing for this so let's make one just call it uh i don't know gray just take away the emission make it a simple gray just to put it on this one so it's not the boring pink so like this if i go and there you go so i'm inside and inside and inside so outside the hexagon and inside outside inside outside inside all right boy that's great portugal is android more popular than iphone i actually don't know these statistics uh i'm trying to think about the people that i know i think it's mainly android at least from the people that i do know i know about two or three people with iphones then about seven or eight with androids so yeah i guess over here android is more popular but yeah that's just very much anecdotal so yeah i really don't know what the stats are as for me i've always had android always i mean iphones are pretty expensive and portugal is not a very high income country so yeah very few people can afford to spend like 700 or 800 bucks on an iphone so yeah so maybe maybe it is yeah majority is android but you see plenty yep there's a bunch of iphones but yeah i wonder if statistically the majority is android that's an interesting one know about the octagon yeah that could be interesting actually that's a good question why do why are hexagons so popular amongst game development but octagons are not actually if you search octagon game development does it or just games is going to show me just ufc games no yeah so basically there's is that the oh god what was he called there was a really awesome one within the octagon but yeah not many with with grids like this yeah so apparently there are not many games using octagons i don't know why because it is an interesting shape so yeah but i guess most of them if i search for hexagon games then all of a sudden yeah see quite a bunch more things quite a bunch more yeah yeah so i guess for some reason people like uh hexagons more than octagons you cannot film the plane with octagons you can't because you octagon octagon grid this is create gaps oh okay well i guess that's why yeah okay so great news so we found the answer yeah because with hexagons they all fit perfectly but yeah i guess with octagons you end up with these tiny gaps so you could still make a game around that but yeah that would definitely make it if you want to make it fit perfectly then yeah i guess hexagons are bestagons i guess i guess that is the answer yes all right okay so all the research on the logic that i want to try out it did indeed work testing out all this logic with the directions testing out the lines doing a vector3 dot again for me i'm not very good at math so the fact that i figured out how to make all this i'm pretty happy with that pretty happy with the result so all the math worked doing all the directions the perpendiculars the dot products testing left right and so on so yeah all that works quite nicely okay octagons are better used as structure maps where you use the gap as tunnel between rooms oh that's a good point yeah i guess you could use octagons for the for sort of the world map and then hexagons for the inner map so kind of connect multiple world maps in octagon shape and then hexagons for the inner inner room shape that could be an interesting design that would be interesting okay right so my voice is going it's almost seven all right so i think that's gonna be it because this logic did work it did work correctly what's your keyboard the very own samsung guy i have no idea what the model name is i've had this for i don't know about 15 years so yeah it still works it's a membrane keyboard which technically a lot of people don't like but yeah it's what i'm used to so works pretty well all right yeah so yeah anyways the logic that i want to do research if a point is inside or outside a hexagon and yep the logic does work perfectly so i test there and there and it does work awesomely so yeah pretty great okay right so i think that's gonna be it my voice is messed up wonder why most game devs learn pen spinning well i learned that before i was into game development i mean i learned it when i was like i don't know 15 years old then i saw some random video clips of some people doing pen spinning and i thought oh that is so cool so i spent a bunch of time learning yeah i mean but it is a nice thing to keep your brain focused while you're trying to think of something and keep your hands occupied so yeah it's a pretty nice of some extensions for vs extensions i guess the only one that i use uh where do you see the extensions the extensions where are they is it this yeah there you go this one vs4 that's pretty much the only one that i use because it adds all these colors all these nice things then the visual commander i just got that one just for for moving up and down with the cursor so move up or down about 10 lines i think instead of going page up or page down which is massive so this one just goes up by a tiny bit so this is useful so that's pretty much the only the only two that i have there's the nice colors which i quite like makes everything super easy to read i can see okay look at this this one is a string this one is a type another type and another bunch of things so yeah pretty nice so that's so my visual studio is really pretty basic one butterfly knife tricks wow that is that's pretty hardcore i mean that does sound very cool but also very dangerous so so yeah i guess that's why i never got into that yeah good place to learn visual scripting from well i mean i've got a bunch of videos and i've got a course on it assuming that by vs you mean visual scripting not visual studio uh yeah visual scripting so i've got a whole bunch of videos on youtube and i've got my course which makes a whole bunch of games this was also a fun course to make i mean i love programming but it was fun to research how to make all of these games without writing a single line of code that's pretty fun i'm quite happy with with this game a really nice fps you've got some rockets some jumping got a nice boss fight got a nice hook shot multiple weapons and again all of it without writing a single line of code so that was pretty fun okay anyways so my voice is already already going so i think that's gonna be it this was very productive i managed to do quite a lot so figured out this logic of testing if a point is inside or outside a hexagon so now that the the research portion did work now eventually i have to write this into a video because i couldn't find any anyone teaching this specific thing how to test if a point is inside a hexagon the only things that i could find were using tons of math equations which for me really does not work so hopefully if you're also like me and you're not extremely advanced in math hopefully you should be able to follow my video on the subject so that should hopefully be useful to at least some people so that should be like that okay right my voice is really going so that's going to be it all right so yeah thank you all so much for being here this was really nice and the live streams have been going well so yeah i'm definitely planning to do i don't know at least one per week that should be should hopefully be doable so a bit of a nice interaction with all of you and answer all your questions and do whatever so that should be fun so hopefully a few more in the future coming so anyways all right so once again thank you all so much for being here let me just reenable the background everything looks good all right so that's gonna be it for me all right so thank you all so much thank you and see you next time um um do so so do you
