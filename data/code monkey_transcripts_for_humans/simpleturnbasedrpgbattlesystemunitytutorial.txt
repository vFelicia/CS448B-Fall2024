With timestamps:

00:00 - in this video we're going to make a
00:01 - turn-based battle system as used in many
00:03 - RPGs we're going to listen to player
00:05 - input when it's his turn and do a simple
00:07 - attack we're going to have a health
00:09 - system health bar damage pop ups and
00:11 - several other effects later we're going
00:13 - to take this base and expand upon it
00:15 - with multiple enemies special attacks
00:17 - items and so on let's begin
00:22 - [Music]
00:26 - hello and welcome I'm your code monkey
00:29 - and this channel is all about helping
00:30 - you learn how to make your own games
00:32 - with nf2 torrents made by a professional
00:34 - indie game developer so if you find the
00:36 - video helpful consider subscribing okay
00:38 - so this is our goal we have our player
00:40 - over here on the left and the enemy on
00:42 - the right currently the active character
00:44 - is the player as you can see by the
00:46 - selection circle being visible now it is
00:49 - currently waiting for player input so
00:51 - when I press the attack button
00:52 - well it's press there he goes he slides
00:55 - a text the enemy and slides back as you
00:58 - see when he was done it was the enemy's
01:00 - turn and he immediately did the same
01:02 - thing he slid to the player attacked him
01:04 - and then went back to his starting
01:05 - position and when he's done now it's
01:07 - back to being the players turn so we're
01:10 - here I can attack him again there you go
01:12 - attack back now it's him he attacks and
01:14 - he goes back we also have some nice
01:16 - effects I made the hits feel very
01:17 - satisfying so for example the blood
01:19 - particles and over here you can see the
01:21 - damage pop up the damage pop up was
01:24 - created in a previous video so in here
01:26 - we're simply going to add it and at the
01:28 - end as you can see we are testing for
01:30 - which character is still alive based on
01:32 - their health and we are correctly
01:34 - identifying a battle it is over and who
01:36 - was the winner all right so this is our
01:38 - goal a very nice simple turn-based
01:40 - battle system let's get to it so here we
01:43 - are in our empty scene
01:44 - let's first spawn some simple characters
01:46 - over here I have a prefab which contains
01:49 - a script at Hamill's the animations for
01:51 - a simple character so let's just simply
01:53 - drop it in here in order to see how it
01:55 - works there it is there is a character
01:57 - just standing around the code for the
01:59 - battle system is going to be completely
02:01 - separate from the animation system so
02:02 - you can use any animation system you
02:04 - want okay so we want to instantiate this
02:06 - prefab twice one on the left for the
02:08 - player and one on the right for the
02:10 - enemy so let's start off by making a
02:12 - script I won't handle our battle so in
02:14 - here we make a new c-sharp script let's
02:16 - call it our battle handler let's make a
02:20 - new game object to add it
02:26 - okay here we are in our empty script
02:28 - let's first spawn our characters so in
02:31 - order to spawn them we need the
02:32 - reference to our prefab so let's add it
02:39 - so let's add it as a serialize field so
02:42 - we can now go into the editor and we can
02:45 - drag our prefab onto the film okay now
02:47 - let's go into our prayer toy to start
02:50 - and let's instantiate both prefabs okay
02:58 - let's see anybody there it is one on the
03:00 - left side one on the right okay great
03:02 - so far so good we are currently spawning
03:04 - two different characters now instead of
03:06 - calling in cinch it directly and let's
03:08 - make a function to properly spawn our
03:09 - characters so we have a function where
03:15 - we're going to do exactly what we did
03:16 - previously I've been here in order to
03:19 - define whether it goes on my left on on
03:21 - the right let's just add a boolean for
03:23 - is player/team okay so if the character
03:37 - is on the planar team we spawned on the
03:38 - web side if it's not then respondent on
03:40 - the right side and now in here we just
03:42 - do two very simple function problems one
03:45 - on true and one on plus any of our
03:48 - characters are still being nicely
03:50 - spawned okay great now that we have them
03:52 - in position let's deal with attacks now
03:55 - so far we've been using just empty
03:57 - characters they do nothing other than
03:58 - stand around so first we need the a
04:00 - script to control our character so let's
04:03 - make a new C sharp script let's call it
04:05 - the character battle now in here we're
04:08 - going to add this script onto our
04:10 - character as you can see our character
04:12 - prefab now has the character battle and
04:14 - the character based script again the bay
04:16 - script is the one that handles on the
04:18 - basic stuff related to the animations so
04:20 - we don't really care how that is
04:21 - implemented we just care about the
04:23 - function that it exposes and on the
04:25 - character button we're going to handle
04:26 - all of our battle logic so let's open
04:29 - that script and in here the first thing
04:31 - we're going to do is on awake grab a
04:33 - reference to the character base
04:41 - all right we have our reference let's
04:44 - just test to make sure that this is
04:46 - working so on our private Boyd's start
04:49 - let's wrapping some animation so we
04:56 - should now see both characters playing
04:58 - the movement animation to the right any
05:00 - of their it is great so we have our main
05:02 - script working now let's make a setup
05:05 - function that the battle Handler won't
05:06 - call to set up some starting values so
05:09 - here get rid of this and make a home Lee
05:12 - Boyd call it setup since this is a
05:17 - monobehaviour attach to a prefab we
05:19 - can't actually make a constructor so
05:21 - this set of function will essentially do
05:22 - what a constructor would do so in this
05:24 - case and let's simply set different
05:26 - animations and textures for the player
05:28 - or the enemy so on our setup we receive
05:30 - a boolean for is player team and if he
05:35 - is on the player team let's go to the
05:38 - character base in order to play the
05:41 - animations related to this or to hand it
05:43 - on the back and if not let's have them
05:48 - set these sword shield animations Emma
05:51 - let's also modify the texture so you get
05:55 - the material and change the main texture
05:58 - and I mean here we need references for
06:00 - our textures so let's add them into the
06:02 - battle hammer so here we make a public
06:06 - texture 2d for the player spreadsheet
06:10 - and another total accessor 2d for the
06:14 - enemy spreadsheet ok let's drag our
06:19 - references in the editor here's the
06:21 - barrel hello and over here I have the
06:22 - two spreadsheets so let's write the
06:24 - player and the enemy okay now in order
06:27 - to access these public fields from our
06:29 - character battle we're going to make a
06:31 - simple static instance
06:40 - okay so very simple we have a private
06:43 - static instance and a public function to
06:45 - get the instance and the instance is set
06:47 - on awake now obviously for adding this
06:49 - to a full game you would handle these
06:51 - references more appropriately but for
06:54 - this in are you this won't do so we can
06:56 - now go back into our character battle
06:58 - and modify the main texture we go into
07:00 - the battle hammer get the instance and
07:02 - get the player sprite sheet and for this
07:05 - when you get the enemies ready all right
07:08 - so just like that we should now be able
07:09 - to set different textures and different
07:11 - animations depending on whether it's the
07:13 - player or the enemy so back in the
07:15 - battle handler we just need to go to
07:18 - where we spawn our character so we are
07:20 - incenting the prefab and the transform
07:24 - has a component of type character battle
07:29 - and all we do is go into the character
07:32 - battle and call the setup function and
07:34 - passing is player team all right this
07:37 - should be working so in here we
07:39 - instantiate our prefab we get the
07:41 - component we call the setup function and
07:43 - on the setup function we test if it is
07:45 - on the player team if so we play these
07:46 - animations with this texture if not this
07:48 - one and this one so let's see if they
07:50 - are both different any of their it is
07:52 - they have different animations and
07:54 - different textures okay great so we now
07:56 - have a very nice set of function on our
07:58 - character battle and we can pass in
08:01 - whatever films we want to make different
08:02 - characters now that we have them
08:04 - different and unique
08:05 - let's see only the comment so for the
08:08 - combat we're going to listen to your
08:09 - player input here on the battle Handler
08:11 - so let's make a private void update and
08:15 - for our input let's simply do input not
08:18 - yet key down our attack button won't be
08:23 - the spacebar so when we press space
08:25 - let's do a simple attack let's make our
08:28 - attack function on the character so here
08:31 - we make a problem boy attack
08:34 - now here we need to know the target
08:37 - we're going to attack someone let's
08:38 - receive a reference to the character
08:40 - battle for our target so this is one we
08:45 - want to attack so in here all we do is
08:47 - play the animation so go into the
08:50 - character base so here I can pass in the
08:53 - direction for the animation then some
08:55 - comebacks when the animation hits the
08:57 - target and when the animation is
08:58 - completed for Direction let's count like
09:03 - direction towards the target character
09:05 - battle so that means we need the
09:07 - position of the Atari character bounce
09:09 - and let's make a simple helper function
09:12 - simply call it get position listen you
09:15 - just returned the position for this
09:17 - character okay so we have our tech
09:24 - direction now one hit and let's not do
09:26 - anything and I'm complete let's go back
09:29 - to idle okay that should do it
09:37 - now if you're not familiar with this
09:39 - this is a lambda expression so in here
09:42 - this is essential creating a function
09:44 - very quickly right in here so in this
09:46 - case this is the same thing as this so
09:52 - over here and this one are the exact
09:55 - same thing just different
09:55 - representations and this one is easier
09:57 - to write alright so we have our attack
10:00 - function we receive our target we come
10:03 - late the direction towards the target
10:05 - then we play the animation using that
10:07 - direction and when the attack animation
10:10 - has completed we go back to I don't now
10:12 - we need to do is call this from the
10:13 - battle hammer so let's go in here and in
10:16 - order to call it we need references for
10:18 - our characters so right now we just have
10:20 - to so let's simply make a film but later
10:22 - we're going to store them in a list so
10:25 - for now make a private reference to a
10:27 - character battle
10:38 - okay so here we are setting our films
10:41 - when we spawn our characters and when we
10:44 - press space let's go into the player
10:45 - character panel in order to attack our
10:47 - enemy character back so it see if we get
10:51 - an attack every time we press space okay
10:53 - so here we are with both them I don't
10:55 - know I press space and there you go
10:57 - the player character made an attack and
11:00 - then went back to it I don't right so
11:01 - every time I press space he plays that
11:03 - animation and attacks okay great so far
11:06 - so good now one issue we have is that we
11:08 - can spam atack so in here if I spam
11:10 - space
11:11 - he is constantly attacking now this is
11:13 - meant to be a turn-based battle system
11:14 - so I should only be able to do one
11:16 - action per turn
11:17 - so let's go onto our battle handler
11:20 - script and in here and let's define some
11:22 - very simple states we're making in a
11:26 - newb to define our possible States and
11:28 - the postman's are either waiting for
11:30 - player so waiting for player input or
11:33 - just busy so when we start and let's say
11:38 - we are waiting for the player and in
11:42 - here on our update we're only going to
11:44 - listen to input if we are waiting for
11:46 - the player so if state if we are waiting
11:50 - for the player then we do only see the
11:51 - input if not then we don't so when we do
11:54 - an attack let's modify the state to be
11:56 - busy okay
12:00 - now that means we also need to know when
12:03 - the attack has been completed so let's
12:05 - set a callback to our attack function
12:06 - that won't be triggered when the attack
12:07 - is completed so over here on the attack
12:10 - let's add an action that will simply be
12:13 - on attack complete now action is a very
12:18 - simple delegate that is on the system
12:19 - namespace okay so here we do our attack
12:23 - when we finish we play the idle
12:25 - animation and then let's call our
12:26 - convert alright so far so good now in
12:29 - the battle handler we can now use that
12:33 - so for the comeback when the attack has
12:38 - been completed and let's return back
12:39 - into state dot waiting for player
12:41 - alright so we have a very simple state
12:44 - function we all listen to input
12:45 - when we are waiting for the plane as
12:47 - soon as we hear the space bar we set it
12:49 - to busy and we start playing the attack
12:51 - animation and we only go back to waiting
12:52 - for player when the attack has been
12:54 - completed so it should now be working
12:56 - for just one action per turn let's see
12:58 - here we are press space there you go
13:01 - normal tank now try the spam space and
13:04 - there you go I can no longer spam I have
13:06 - to wait for the attack being completed
13:07 - before I can attack again okay awesome
13:09 - right now for the attack obviously this
13:12 - doesn't look good he's attacking him
13:13 - there where the enemy is in there so
13:15 - let's make him slide towards the enemy
13:17 - and then he does the attack animation
13:20 - and then he slides back so let's go to
13:22 - the character battle and in here instead
13:24 - of playing the attack animation right
13:26 - away and let's do some sliding before
13:28 - that now in order to slide we're going
13:29 - to have to add our code on our update
13:32 - okay here we make a private void update
13:35 - and in here we don't want this slight
13:37 - code to run every time so we're going to
13:39 - do the same thing with it with the panel
13:41 - handler so go up here to find another
13:44 - protein you for all our possible states
13:48 - so here are our states either I don't
13:51 - sliding or a busy sorry off at I don't
13:56 - and then on our update we do a normal
13:58 - switch on our states and now here we
14:03 - have our sliding code on our sliding now
14:06 - in order to slide we're just going to
14:07 - modify the transform table position move
14:09 - it towards a certain position so that
14:11 - means we need a slide target position so
14:13 - let's go up here to define that
14:21 - so we have a slight target position and
14:23 - in here we're going to move towards that
14:26 - slight position okay so here we are
14:37 - defining a certain slide speed and we
14:39 - simply modify our transform dot position
14:41 - we come like the target Direction
14:44 - multiplied by the speed n time dot down
14:46 - to time we are not normalizing this so
14:48 - essentially it's going to move very
14:49 - quickly and then slow down which is
14:51 - exactly what we want so with our slide
14:53 - and afterwards let's make a very simple
14:55 - distance check we come like the distance
15:00 - between our position and the slide
15:03 - target position so it is a stiff
15:13 - distance between our position and slide
15:15 - target position if it is under our reach
15:17 - distance then we have arrived at our
15:19 - small target position all right so this
15:24 - is pretty much our sliding code now in
15:26 - order to make it easy to slide attacking
15:28 - slide back let's add a simple compact
15:30 - that won't be triggered when we arrive
15:32 - at our slide target position so we just
15:35 - go up here define another action this
15:38 - will be on slide complete and we're
15:42 - simply going to call this action when we
15:44 - arrive ok very simple code for our
15:47 - sliding we just move our position
15:49 - towards the target by a certain speed
15:51 - when we get within a certain distance
15:53 - we simply trigger our comeback okay now
15:56 - let's make a function that won't set up
15:58 - the necessary values
16:08 - the bezel in here all we need to do is
16:10 - set our fields and modify our state all
16:15 - right very simple now that we have this
16:18 - we can update our attack function and
16:21 - let's just test these slides so let's
16:23 - comment this out
16:24 - and certainly simply call slide to
16:28 - position let's slide exactly on top of
16:31 - the target so Kari get positioned and
16:33 - when we get there ring to trigger this
16:36 - action and for now let's not do anything
16:39 - so we should simply be able to see when
16:41 - we press space he's going to slide
16:43 - towards the target let's see okay here
16:45 - we are both on I don't press space and
16:48 - there you go he slides exactly towards
16:49 - the target and stops okay great now
16:52 - let's combine the slide with the attack
16:54 - so in here we essentially copy the
16:56 - attack code when the slide has been
16:57 - completed and we don't want to slide
17:00 - exactly on top of the target but a bit
17:02 - to the left of them so we complete our
17:16 - semi target position to be on the target
17:19 - then we have the vector pointing towards
17:21 - our position so this way we don't stand
17:23 - right on top of the target so we do our
17:26 - slide to that position then we do the
17:28 - attack just like we did previously
17:30 - except when the attack is completed
17:32 - we're not going to call on attack
17:33 - completed but instead let's slide back
17:35 - to our original position so we do the
17:41 - attack then when you finish let's slide
17:43 - back
17:57 - all right so here it is our code so
18:00 - first we slide to our target when we get
18:02 - there we play our attack animation when
18:05 - the attack animation has been completed
18:06 - we slide back to our starting position
18:08 - and when we are back at the starting
18:10 - position we go back to I don't and we
18:12 - trigger on that complete and I just
18:15 - update our stakes all right just like
18:20 - that so I might see if the character
18:22 - slice the target attacks him and goes
18:24 - back here we are with both them I don't
18:26 - let's press face there you go slide
18:28 - attack slide back okay great
18:30 - so the logic completely worked slide
18:32 - attack slide back right great now let's
18:36 - also apply the slide animations make it
18:37 - look better so over here let's simply
18:40 - play the slide animation there's a slide
18:43 - left in the slide right okay that should
18:50 - be better let's see okay here we are
18:52 - press space there you go he slides
18:54 - attack slides back and goes back to idle
18:56 - okay awesome
18:57 - now just one final thing let's see one
18:59 - with the idle animations so the enemy
19:01 - should be idling towards the player so
19:04 - very simple all we need is to know if
19:09 - it's on the player team so let's store
19:10 - this
19:22 - all right so we now have a very simple
19:25 - function to play the animal animation so
19:27 - this should help us make sure that our
19:28 - sprites are always facing the correct
19:30 - direction okay so they are both facing
19:32 - the correct direction press space and
19:33 - there you go slide the tag slide back
19:35 - all right great
19:36 - and I also can't spam space so if I
19:38 - attack now I have to wait and yep I can
19:40 - attack yet okay great
19:41 - so we have a very basic turn base attack
19:44 - working now let's make the enemy attack
19:46 - as well so that means giving him a turn
19:49 - now over here on the battle hem one
19:52 - essentially we need to know whose turn
19:54 - it is if it's a player or the enemy so
19:57 - let's go up here and we're going to
20:01 - store a character battle for the active
20:04 - character battle so this is the one that
20:06 - is active right now let's make you a
20:10 - function to set it okay so here we just
20:17 - set the active character battle now by
20:19 - default let's start off with the player
20:21 - being active so let's go in here and now
20:25 - let's make a function that won't choose
20:27 - the next active character so a private
20:30 - void let's call it choose next active
20:33 - character and since we're starting
20:38 - simple with just two characters this
20:39 - will be very easy so here we just test
20:42 - if the active character battle is the
20:45 - player character battle then we set the
20:47 - active to be the enemy
20:53 - and if not we set it to be the player
20:56 - and we set the state to be waiting for
20:58 - the player okay so this function should
21:00 - correctly swap between the player and
21:02 - the enemy now over here when the player
21:04 - does his attack at the end instead of
21:07 - going to waiting for a player we simply
21:08 - can't choose the next character so the
21:12 - player does is attack then you choose
21:14 - the next which won't choose the enemy
21:15 - and when it's the enemy's turn let's do
21:19 - an attack very much like the player so
21:22 - since they're both using the same script
21:23 - it's very easy we just copy this and
21:28 - it's the enemy attacking the player all
21:34 - right so that's pretty much it we start
21:37 - off with the player being the active
21:39 - character so once we are waiting for the
21:41 - player we listen to input as soon as we
21:43 - press space we do our attack when the
21:45 - attack is completed we choose the next
21:47 - active character since we are currently
21:49 - on the player the next one won't be the
21:50 - enemy the enemy won't attack the player
21:52 - once the enemy is finished then we
21:54 - choose next which won't be the player
21:55 - and so on so we should now be able to
21:58 - see first the player turn then the enemy
22:00 - turn okay let's see okay here we are
22:03 - everything is on we're waiting for
22:04 - player input so let's press space there
22:07 - you go attack back any of now the enemy
22:09 - attack back and now we're back to the
22:11 - player so press space and yep and whilst
22:14 - it's the enemy turn obviously I cannot
22:16 - attack so I have to wait for the enemy
22:17 - to be done and now it's my turn I know
22:20 - attack okay great so everything is
22:22 - working correctly logic for switching
22:25 - who is active at which turn is now
22:27 - currently working now let's add a visual
22:29 - to be able to easily see which one is
22:31 - currently active so for the visual let's
22:34 - modify our prefab and over here we can't
22:37 - see the character since the animation
22:38 - system only runs when the game is
22:40 - running but we can see the shadow here
22:42 - and under the shadow we can place our
22:43 - circle outline texture just a very
22:46 - simple texture let's tint it in green
22:49 - and let's call this the selection circle
22:53 - okay so there it is let's play just make
22:55 - sure both of them have the circle and
22:57 - you both of them have the selection
22:59 - circle okay great
23:00 - now let's make two functions to hide and
23:02 - show so over here on the character
23:04 - battle
23:16 - so here we're grabbing the reference ton
23:19 - awake for our selection circle and all
23:21 - we need to do in order to show and hide
23:22 - it is very simple we just call the game
23:24 - object set active in order to hide it
23:27 - set it to false and show it set it to
23:29 - true okay so we have two functions to
23:32 - control the visibility of our selection
23:34 - circle and here we just hide it by
23:36 - default and now let's go into our battle
23:39 - Handler and in here when we are setting
23:41 - the active character panel let's test if
23:44 - we have an active character down if so
23:49 - then we tell this one to hide its
23:52 - selection circle then we swap out for
23:56 - new one and we tell the new one to show
23:59 - this selection server all right so we
24:02 - should now be able to see which one is
24:04 - currently active okay there it is as you
24:06 - can see the player is the one currently
24:08 - active so press space attack back and
24:11 - yep now he's active and he does attack
24:13 - and back to me and attack and there you
24:15 - go and great awesome so you can now
24:17 - visually see which one is active in this
24:19 - turn so without working it's time to
24:22 - actually deal some damage for that we
24:24 - need a health system over here I have a
24:27 - very simple health system this was
24:29 - created in a previous video so check the
24:31 - link in the description it's pretty
24:32 - simple we just have the health as an
24:34 - integer and a bunch of functions to
24:37 - modify it on with some events that get
24:38 - triggered when something happens so
24:41 - let's go into our character battle and
24:42 - here let's create our health system so
24:46 - we have a feel for the health system
24:51 - and we create it over here on our set up
24:54 - and let's start them off with a hundred
24:56 - help okay so we have constructed our
24:59 - health system now let's make a function
25:02 - to take damage so we're here a phone
25:04 - avoid damage and we simply go into the
25:11 - whole system and caused some damage
25:13 - now here we need the amount and that's
25:18 - pretty much it now we need is to go over
25:21 - here on our attack admission in here we
25:24 - have to come back on hit and on complete
25:26 - so let's use the on hit this woman is
25:29 - triggered when the animation actually
25:30 - hits the target so in here we go into
25:37 - the target character battle to cause
25:38 - damage and for now let's just simply put
25:41 - a certain value okay so that should do
25:44 - it
25:45 - we should now be able to deal damage
25:47 - while attacking make sure that it's
25:49 - working let's add some pop-ups in here
25:51 - so using the code monkey CM debug class
25:55 - this is part of the code monkey zombies
25:58 - which you can grab for free from minty
25:59 - Kermit calm so let's simply do a text
26:02 - pop up saying hit and then our current
26:05 - help alright well let's see if we aren't
26:11 - correctly attacking okay so here we are
26:14 - now we should be able to attack him and
26:15 - when we do should be able to see a
26:17 - pop-up and since we're dealing ten
26:19 - amount of damage we should be able to
26:20 - see the pop-up saying 90 press and there
26:23 - you go hit and he has 90 humph left and
26:25 - same thing there hit him again and now
26:27 - he has 80 he hits me and eighty okay
26:29 - awesome
26:30 - so we have correctly added a very simple
26:32 - health system now that we have damage
26:35 - let's test when a character dies so when
26:37 - the character dies when it's exposed a
26:40 - function that won't test if the
26:41 - character is dead so a public boom is
26:43 - dead and all we do is return the health
26:46 - system that is dead
26:49 - so with this function we can go back to
26:51 - the panel hammer and over here we can
26:54 - now identify if one character is dead
26:56 - so when we choose the next active
26:59 - character let's test if the battle is
27:01 - over so let's make here
27:03 - boom test battle over this one returned
27:09 - true if the battle is over so we're
27:12 - going to call this function over here if
27:17 - the battle is over we return so we stop
27:19 - this function so we know what we select
27:21 - the next active if not then we continue
27:23 - to do it now to test if the battle is
27:25 - over since right now we just have the
27:28 - player versus the enemy this is very
27:29 - simple so if the player character battle
27:32 - is dead the player is dead and the enemy
27:38 - wins if the enemies add then the enemy
27:43 - is dead and the player wins in either
27:47 - case the battle is over and if neither
27:49 - of these then the battle is not over all
27:53 - right that should do it
27:54 - let's add some puppets for testing no
28:03 - it's s if it's working so over here
28:05 - let's increase the amount of damage here
28:10 - on let's hit him and with 40 damage he
28:12 - now has 60 now get him again now he has
28:15 - 20 and I when I hit him he's going to
28:18 - die let's he hit him and the player wins
28:22 - and as you saw he didn't do his attack
28:24 - since he's essentially dead alright so
28:27 - Omar logic is working correctly now
28:30 - let's make it a little proper so for
28:32 - starters let's make a health bar instead
28:33 - of a debug pop-up so over here on the
28:36 - character battle on our setup we can use
28:39 - a very useful and warm bar from the code
28:41 - monkey toys which again can wear up for
28:43 - free from in Tacoma comm I've done
28:45 - several videos where I cover how to make
28:46 - a health bar so check those out to
28:48 - understand how they work it's pretty
28:50 - simple so in here we're just going to
28:51 - use the one from the utilities
29:08 - okay we should be able to see a bar on
29:11 - top of our characters and if there it is
29:14 - now let's update our bar now in order to
29:17 - update them let's first store a
29:18 - reference to our wine bar and then on
29:26 - the Health System we have some events
29:28 - that trigger when the health changes so
29:30 - we can just subscribe to those so on
29:35 - health change the event let's subscribe
29:38 - to that and when the health changes we
29:41 - just update a hump bar so we set size
29:45 - and we ask the health system to get the
29:48 - health percentage all right let you do
29:51 - it for the hump bar so let's take away
29:54 - our debug pop-ups in here and let's just
29:57 - test if there it is both numb with a
30:00 - thumb farm let's attack and there you go
30:03 - the health bar went down and yep just
30:05 - like that okay great
30:06 - now when the character dies and let's
30:08 - have them lying on four so here when he
30:10 - takes damage let's ask if the health
30:12 - system is dead then this character died
30:21 - we just played the correct animation
30:24 - let's test okay here it is he's going to
30:27 - die on this hit so hit him and there you
30:29 - go he's lying on the floor and the
30:31 - player wins great now for another effect
30:33 - let's have the damage pop ups okay here
30:36 - it is the damage Pappas folder this was
30:38 - created in a previous video so check
30:40 - that out to see how it was done
30:41 - in order to use it it's a very simple
30:43 - function call so here on the damage
30:47 - simply go to the damage pop-up and
30:50 - create a pop-up right here
30:53 - with this damaged amount okay you're on
30:57 - let's hit him and there you go a nice
31:00 - damaged pop-up and same thing on him
31:02 - now let's randomize our attack so the
31:04 - number isn't exactly the same every time
31:06 - seen here on let's define in for damage
31:08 - amount so we now have more variation on
31:17 - the damage and if there is we've got
31:21 - nice damage problems okay great now for
31:24 - another effect let's add a nice damage
31:26 - tint
31:31 - okay here we are and hit him and you
31:33 - better go a nice tint now for some nice
31:36 - bought particles so in here to know the
31:41 - direction of the particles we also need
31:42 - to know who attacked them so let's bet
31:45 - in here another character bottom for the
31:49 - attacker
32:12 - okay here we are let's hit him and
32:14 - you're gonna give some nice what
32:15 - particles happen right there now I
32:17 - haven't done a video on the particle
32:19 - system yet so let me know if that's
32:20 - something you would like to see it
32:22 - essentially just creates and updates a
32:23 - dynamic mesh let's also add some screen
32:26 - shake on hit and there it is a nice
32:43 - screen shake when he gets hit okay great
32:45 - and finally let's make a simple bottle
32:47 - over window
33:21 - all right here it is a script very
33:23 - simple we just have a static instance so
33:25 - we can have a static function and we
33:26 - simply pass in a winter strength so on
33:29 - the about hem one over here when you
33:31 - test instead of doing a puffle let's use
33:34 - that alright let you do it okay here we
33:50 - are let's see who wins
33:51 - so attack and there you go there's all
33:53 - of our nice effects now keep attacking
33:55 - the attacks are now randomized on the
33:57 - damage amount so let's see if I win and
34:00 - no no he hits me and nope and I hit him
34:03 - and yep I win and there you go bottle
34:05 - over player wins okay awesome so over
34:08 - here we have our very simple but also
34:10 - very nice turn-based battle system we
34:13 - start off with the player's turn as you
34:15 - can see by the select circle so we're
34:17 - currently waiting for a player input and
34:19 - I can hit space to do an attack and
34:22 - there you go he slides towards the enemy
34:24 - attacks him and goes back when he
34:26 - finishes it's the enemy's turn and as he
34:28 - saw his smile it's worthy player attacks
34:30 - him and goes back both characters are
34:33 - using the same script so all the effects
34:35 - and everything works flawlessly when the
34:37 - enemy is done he goes back to there and
34:39 - now again as you can see by the
34:40 - selection it's a player again and now I
34:42 - can hit him again and there you go go
34:43 - back now it's him and yep now attack him
34:47 - again and he's still alive now he kills
34:49 - me and there you go battle over enemy
34:51 - wins so we are correctly identifying
34:53 - when the battle is over and who was the
34:55 - winner now in the next video we're going
34:57 - to take this base and expand upon it
34:59 - with multiple enemies special attacks
35:01 - items and so on so make sure you
35:03 - understand how this base works and stay
35:05 - tuned for the next video as always you
35:07 - can download the project files in
35:08 - Italy's community code monkey comm if
35:10 - you liked the video subscribe the
35:12 - channel for more unity tutorial
35:13 - post any questions you have in the
35:15 - comments and I'll do my best Internet
35:16 - alright see you next time
35:18 - [Music]

Cleaned transcript:

in this video we're going to make a turnbased battle system as used in many RPGs we're going to listen to player input when it's his turn and do a simple attack we're going to have a health system health bar damage pop ups and several other effects later we're going to take this base and expand upon it with multiple enemies special attacks items and so on let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with nf2 torrents made by a professional indie game developer so if you find the video helpful consider subscribing okay so this is our goal we have our player over here on the left and the enemy on the right currently the active character is the player as you can see by the selection circle being visible now it is currently waiting for player input so when I press the attack button well it's press there he goes he slides a text the enemy and slides back as you see when he was done it was the enemy's turn and he immediately did the same thing he slid to the player attacked him and then went back to his starting position and when he's done now it's back to being the players turn so we're here I can attack him again there you go attack back now it's him he attacks and he goes back we also have some nice effects I made the hits feel very satisfying so for example the blood particles and over here you can see the damage pop up the damage pop up was created in a previous video so in here we're simply going to add it and at the end as you can see we are testing for which character is still alive based on their health and we are correctly identifying a battle it is over and who was the winner all right so this is our goal a very nice simple turnbased battle system let's get to it so here we are in our empty scene let's first spawn some simple characters over here I have a prefab which contains a script at Hamill's the animations for a simple character so let's just simply drop it in here in order to see how it works there it is there is a character just standing around the code for the battle system is going to be completely separate from the animation system so you can use any animation system you want okay so we want to instantiate this prefab twice one on the left for the player and one on the right for the enemy so let's start off by making a script I won't handle our battle so in here we make a new csharp script let's call it our battle handler let's make a new game object to add it okay here we are in our empty script let's first spawn our characters so in order to spawn them we need the reference to our prefab so let's add it so let's add it as a serialize field so we can now go into the editor and we can drag our prefab onto the film okay now let's go into our prayer toy to start and let's instantiate both prefabs okay let's see anybody there it is one on the left side one on the right okay great so far so good we are currently spawning two different characters now instead of calling in cinch it directly and let's make a function to properly spawn our characters so we have a function where we're going to do exactly what we did previously I've been here in order to define whether it goes on my left on on the right let's just add a boolean for is player/team okay so if the character is on the planar team we spawned on the web side if it's not then respondent on the right side and now in here we just do two very simple function problems one on true and one on plus any of our characters are still being nicely spawned okay great now that we have them in position let's deal with attacks now so far we've been using just empty characters they do nothing other than stand around so first we need the a script to control our character so let's make a new C sharp script let's call it the character battle now in here we're going to add this script onto our character as you can see our character prefab now has the character battle and the character based script again the bay script is the one that handles on the basic stuff related to the animations so we don't really care how that is implemented we just care about the function that it exposes and on the character button we're going to handle all of our battle logic so let's open that script and in here the first thing we're going to do is on awake grab a reference to the character base all right we have our reference let's just test to make sure that this is working so on our private Boyd's start let's wrapping some animation so we should now see both characters playing the movement animation to the right any of their it is great so we have our main script working now let's make a setup function that the battle Handler won't call to set up some starting values so here get rid of this and make a home Lee Boyd call it setup since this is a monobehaviour attach to a prefab we can't actually make a constructor so this set of function will essentially do what a constructor would do so in this case and let's simply set different animations and textures for the player or the enemy so on our setup we receive a boolean for is player team and if he is on the player team let's go to the character base in order to play the animations related to this or to hand it on the back and if not let's have them set these sword shield animations Emma let's also modify the texture so you get the material and change the main texture and I mean here we need references for our textures so let's add them into the battle hammer so here we make a public texture 2d for the player spreadsheet and another total accessor 2d for the enemy spreadsheet ok let's drag our references in the editor here's the barrel hello and over here I have the two spreadsheets so let's write the player and the enemy okay now in order to access these public fields from our character battle we're going to make a simple static instance okay so very simple we have a private static instance and a public function to get the instance and the instance is set on awake now obviously for adding this to a full game you would handle these references more appropriately but for this in are you this won't do so we can now go back into our character battle and modify the main texture we go into the battle hammer get the instance and get the player sprite sheet and for this when you get the enemies ready all right so just like that we should now be able to set different textures and different animations depending on whether it's the player or the enemy so back in the battle handler we just need to go to where we spawn our character so we are incenting the prefab and the transform has a component of type character battle and all we do is go into the character battle and call the setup function and passing is player team all right this should be working so in here we instantiate our prefab we get the component we call the setup function and on the setup function we test if it is on the player team if so we play these animations with this texture if not this one and this one so let's see if they are both different any of their it is they have different animations and different textures okay great so we now have a very nice set of function on our character battle and we can pass in whatever films we want to make different characters now that we have them different and unique let's see only the comment so for the combat we're going to listen to your player input here on the battle Handler so let's make a private void update and for our input let's simply do input not yet key down our attack button won't be the spacebar so when we press space let's do a simple attack let's make our attack function on the character so here we make a problem boy attack now here we need to know the target we're going to attack someone let's receive a reference to the character battle for our target so this is one we want to attack so in here all we do is play the animation so go into the character base so here I can pass in the direction for the animation then some comebacks when the animation hits the target and when the animation is completed for Direction let's count like direction towards the target character battle so that means we need the position of the Atari character bounce and let's make a simple helper function simply call it get position listen you just returned the position for this character okay so we have our tech direction now one hit and let's not do anything and I'm complete let's go back to idle okay that should do it now if you're not familiar with this this is a lambda expression so in here this is essential creating a function very quickly right in here so in this case this is the same thing as this so over here and this one are the exact same thing just different representations and this one is easier to write alright so we have our attack function we receive our target we come late the direction towards the target then we play the animation using that direction and when the attack animation has completed we go back to I don't now we need to do is call this from the battle hammer so let's go in here and in order to call it we need references for our characters so right now we just have to so let's simply make a film but later we're going to store them in a list so for now make a private reference to a character battle okay so here we are setting our films when we spawn our characters and when we press space let's go into the player character panel in order to attack our enemy character back so it see if we get an attack every time we press space okay so here we are with both them I don't know I press space and there you go the player character made an attack and then went back to it I don't right so every time I press space he plays that animation and attacks okay great so far so good now one issue we have is that we can spam atack so in here if I spam space he is constantly attacking now this is meant to be a turnbased battle system so I should only be able to do one action per turn so let's go onto our battle handler script and in here and let's define some very simple states we're making in a newb to define our possible States and the postman's are either waiting for player so waiting for player input or just busy so when we start and let's say we are waiting for the player and in here on our update we're only going to listen to input if we are waiting for the player so if state if we are waiting for the player then we do only see the input if not then we don't so when we do an attack let's modify the state to be busy okay now that means we also need to know when the attack has been completed so let's set a callback to our attack function that won't be triggered when the attack is completed so over here on the attack let's add an action that will simply be on attack complete now action is a very simple delegate that is on the system namespace okay so here we do our attack when we finish we play the idle animation and then let's call our convert alright so far so good now in the battle handler we can now use that so for the comeback when the attack has been completed and let's return back into state dot waiting for player alright so we have a very simple state function we all listen to input when we are waiting for the plane as soon as we hear the space bar we set it to busy and we start playing the attack animation and we only go back to waiting for player when the attack has been completed so it should now be working for just one action per turn let's see here we are press space there you go normal tank now try the spam space and there you go I can no longer spam I have to wait for the attack being completed before I can attack again okay awesome right now for the attack obviously this doesn't look good he's attacking him there where the enemy is in there so let's make him slide towards the enemy and then he does the attack animation and then he slides back so let's go to the character battle and in here instead of playing the attack animation right away and let's do some sliding before that now in order to slide we're going to have to add our code on our update okay here we make a private void update and in here we don't want this slight code to run every time so we're going to do the same thing with it with the panel handler so go up here to find another protein you for all our possible states so here are our states either I don't sliding or a busy sorry off at I don't and then on our update we do a normal switch on our states and now here we have our sliding code on our sliding now in order to slide we're just going to modify the transform table position move it towards a certain position so that means we need a slide target position so let's go up here to define that so we have a slight target position and in here we're going to move towards that slight position okay so here we are defining a certain slide speed and we simply modify our transform dot position we come like the target Direction multiplied by the speed n time dot down to time we are not normalizing this so essentially it's going to move very quickly and then slow down which is exactly what we want so with our slide and afterwards let's make a very simple distance check we come like the distance between our position and the slide target position so it is a stiff distance between our position and slide target position if it is under our reach distance then we have arrived at our small target position all right so this is pretty much our sliding code now in order to make it easy to slide attacking slide back let's add a simple compact that won't be triggered when we arrive at our slide target position so we just go up here define another action this will be on slide complete and we're simply going to call this action when we arrive ok very simple code for our sliding we just move our position towards the target by a certain speed when we get within a certain distance we simply trigger our comeback okay now let's make a function that won't set up the necessary values the bezel in here all we need to do is set our fields and modify our state all right very simple now that we have this we can update our attack function and let's just test these slides so let's comment this out and certainly simply call slide to position let's slide exactly on top of the target so Kari get positioned and when we get there ring to trigger this action and for now let's not do anything so we should simply be able to see when we press space he's going to slide towards the target let's see okay here we are both on I don't press space and there you go he slides exactly towards the target and stops okay great now let's combine the slide with the attack so in here we essentially copy the attack code when the slide has been completed and we don't want to slide exactly on top of the target but a bit to the left of them so we complete our semi target position to be on the target then we have the vector pointing towards our position so this way we don't stand right on top of the target so we do our slide to that position then we do the attack just like we did previously except when the attack is completed we're not going to call on attack completed but instead let's slide back to our original position so we do the attack then when you finish let's slide back all right so here it is our code so first we slide to our target when we get there we play our attack animation when the attack animation has been completed we slide back to our starting position and when we are back at the starting position we go back to I don't and we trigger on that complete and I just update our stakes all right just like that so I might see if the character slice the target attacks him and goes back here we are with both them I don't let's press face there you go slide attack slide back okay great so the logic completely worked slide attack slide back right great now let's also apply the slide animations make it look better so over here let's simply play the slide animation there's a slide left in the slide right okay that should be better let's see okay here we are press space there you go he slides attack slides back and goes back to idle okay awesome now just one final thing let's see one with the idle animations so the enemy should be idling towards the player so very simple all we need is to know if it's on the player team so let's store this all right so we now have a very simple function to play the animal animation so this should help us make sure that our sprites are always facing the correct direction okay so they are both facing the correct direction press space and there you go slide the tag slide back all right great and I also can't spam space so if I attack now I have to wait and yep I can attack yet okay great so we have a very basic turn base attack working now let's make the enemy attack as well so that means giving him a turn now over here on the battle hem one essentially we need to know whose turn it is if it's a player or the enemy so let's go up here and we're going to store a character battle for the active character battle so this is the one that is active right now let's make you a function to set it okay so here we just set the active character battle now by default let's start off with the player being active so let's go in here and now let's make a function that won't choose the next active character so a private void let's call it choose next active character and since we're starting simple with just two characters this will be very easy so here we just test if the active character battle is the player character battle then we set the active to be the enemy and if not we set it to be the player and we set the state to be waiting for the player okay so this function should correctly swap between the player and the enemy now over here when the player does his attack at the end instead of going to waiting for a player we simply can't choose the next character so the player does is attack then you choose the next which won't choose the enemy and when it's the enemy's turn let's do an attack very much like the player so since they're both using the same script it's very easy we just copy this and it's the enemy attacking the player all right so that's pretty much it we start off with the player being the active character so once we are waiting for the player we listen to input as soon as we press space we do our attack when the attack is completed we choose the next active character since we are currently on the player the next one won't be the enemy the enemy won't attack the player once the enemy is finished then we choose next which won't be the player and so on so we should now be able to see first the player turn then the enemy turn okay let's see okay here we are everything is on we're waiting for player input so let's press space there you go attack back any of now the enemy attack back and now we're back to the player so press space and yep and whilst it's the enemy turn obviously I cannot attack so I have to wait for the enemy to be done and now it's my turn I know attack okay great so everything is working correctly logic for switching who is active at which turn is now currently working now let's add a visual to be able to easily see which one is currently active so for the visual let's modify our prefab and over here we can't see the character since the animation system only runs when the game is running but we can see the shadow here and under the shadow we can place our circle outline texture just a very simple texture let's tint it in green and let's call this the selection circle okay so there it is let's play just make sure both of them have the circle and you both of them have the selection circle okay great now let's make two functions to hide and show so over here on the character battle so here we're grabbing the reference ton awake for our selection circle and all we need to do in order to show and hide it is very simple we just call the game object set active in order to hide it set it to false and show it set it to true okay so we have two functions to control the visibility of our selection circle and here we just hide it by default and now let's go into our battle Handler and in here when we are setting the active character panel let's test if we have an active character down if so then we tell this one to hide its selection circle then we swap out for new one and we tell the new one to show this selection server all right so we should now be able to see which one is currently active okay there it is as you can see the player is the one currently active so press space attack back and yep now he's active and he does attack and back to me and attack and there you go and great awesome so you can now visually see which one is active in this turn so without working it's time to actually deal some damage for that we need a health system over here I have a very simple health system this was created in a previous video so check the link in the description it's pretty simple we just have the health as an integer and a bunch of functions to modify it on with some events that get triggered when something happens so let's go into our character battle and here let's create our health system so we have a feel for the health system and we create it over here on our set up and let's start them off with a hundred help okay so we have constructed our health system now let's make a function to take damage so we're here a phone avoid damage and we simply go into the whole system and caused some damage now here we need the amount and that's pretty much it now we need is to go over here on our attack admission in here we have to come back on hit and on complete so let's use the on hit this woman is triggered when the animation actually hits the target so in here we go into the target character battle to cause damage and for now let's just simply put a certain value okay so that should do it we should now be able to deal damage while attacking make sure that it's working let's add some popups in here so using the code monkey CM debug class this is part of the code monkey zombies which you can grab for free from minty Kermit calm so let's simply do a text pop up saying hit and then our current help alright well let's see if we aren't correctly attacking okay so here we are now we should be able to attack him and when we do should be able to see a popup and since we're dealing ten amount of damage we should be able to see the popup saying 90 press and there you go hit and he has 90 humph left and same thing there hit him again and now he has 80 he hits me and eighty okay awesome so we have correctly added a very simple health system now that we have damage let's test when a character dies so when the character dies when it's exposed a function that won't test if the character is dead so a public boom is dead and all we do is return the health system that is dead so with this function we can go back to the panel hammer and over here we can now identify if one character is dead so when we choose the next active character let's test if the battle is over so let's make here boom test battle over this one returned true if the battle is over so we're going to call this function over here if the battle is over we return so we stop this function so we know what we select the next active if not then we continue to do it now to test if the battle is over since right now we just have the player versus the enemy this is very simple so if the player character battle is dead the player is dead and the enemy wins if the enemies add then the enemy is dead and the player wins in either case the battle is over and if neither of these then the battle is not over all right that should do it let's add some puppets for testing no it's s if it's working so over here let's increase the amount of damage here on let's hit him and with 40 damage he now has 60 now get him again now he has 20 and I when I hit him he's going to die let's he hit him and the player wins and as you saw he didn't do his attack since he's essentially dead alright so Omar logic is working correctly now let's make it a little proper so for starters let's make a health bar instead of a debug popup so over here on the character battle on our setup we can use a very useful and warm bar from the code monkey toys which again can wear up for free from in Tacoma comm I've done several videos where I cover how to make a health bar so check those out to understand how they work it's pretty simple so in here we're just going to use the one from the utilities okay we should be able to see a bar on top of our characters and if there it is now let's update our bar now in order to update them let's first store a reference to our wine bar and then on the Health System we have some events that trigger when the health changes so we can just subscribe to those so on health change the event let's subscribe to that and when the health changes we just update a hump bar so we set size and we ask the health system to get the health percentage all right let you do it for the hump bar so let's take away our debug popups in here and let's just test if there it is both numb with a thumb farm let's attack and there you go the health bar went down and yep just like that okay great now when the character dies and let's have them lying on four so here when he takes damage let's ask if the health system is dead then this character died we just played the correct animation let's test okay here it is he's going to die on this hit so hit him and there you go he's lying on the floor and the player wins great now for another effect let's have the damage pop ups okay here it is the damage Pappas folder this was created in a previous video so check that out to see how it was done in order to use it it's a very simple function call so here on the damage simply go to the damage popup and create a popup right here with this damaged amount okay you're on let's hit him and there you go a nice damaged popup and same thing on him now let's randomize our attack so the number isn't exactly the same every time seen here on let's define in for damage amount so we now have more variation on the damage and if there is we've got nice damage problems okay great now for another effect let's add a nice damage tint okay here we are and hit him and you better go a nice tint now for some nice bought particles so in here to know the direction of the particles we also need to know who attacked them so let's bet in here another character bottom for the attacker okay here we are let's hit him and you're gonna give some nice what particles happen right there now I haven't done a video on the particle system yet so let me know if that's something you would like to see it essentially just creates and updates a dynamic mesh let's also add some screen shake on hit and there it is a nice screen shake when he gets hit okay great and finally let's make a simple bottle over window all right here it is a script very simple we just have a static instance so we can have a static function and we simply pass in a winter strength so on the about hem one over here when you test instead of doing a puffle let's use that alright let you do it okay here we are let's see who wins so attack and there you go there's all of our nice effects now keep attacking the attacks are now randomized on the damage amount so let's see if I win and no no he hits me and nope and I hit him and yep I win and there you go bottle over player wins okay awesome so over here we have our very simple but also very nice turnbased battle system we start off with the player's turn as you can see by the select circle so we're currently waiting for a player input and I can hit space to do an attack and there you go he slides towards the enemy attacks him and goes back when he finishes it's the enemy's turn and as he saw his smile it's worthy player attacks him and goes back both characters are using the same script so all the effects and everything works flawlessly when the enemy is done he goes back to there and now again as you can see by the selection it's a player again and now I can hit him again and there you go go back now it's him and yep now attack him again and he's still alive now he kills me and there you go battle over enemy wins so we are correctly identifying when the battle is over and who was the winner now in the next video we're going to take this base and expand upon it with multiple enemies special attacks items and so on so make sure you understand how this base works and stay tuned for the next video as always you can download the project files in Italy's community code monkey comm if you liked the video subscribe the channel for more unity tutorial post any questions you have in the comments and I'll do my best Internet alright see you next time
