With timestamps:

00:00 - hello and welcome I'm your code monkey
00:02 - and in this video we're going to learn
00:04 - how to take screenshot in unity we're
00:06 - going to grab the pixels from a specific
00:08 - camera and save them into a PNG we can
00:11 - grab the entire screen from the main
00:12 - camera or grab the view of a secondary
00:14 - camera let's it's our
00:20 - so let's start off by creating a new
00:23 - c-sharp script and name it screenshot
00:27 - handler so in here on our private void
00:32 - awake we're going to grab a reference to
00:35 - the camera that this script will be
00:36 - placed on so up here first private
00:40 - camera my camera and on away my camera
00:45 - equal game logic key component of time
00:49 - we're also going to make a static
00:52 - instance so we can trigger screenshots
00:53 - through a static function so a private
00:56 - static screenshot handler instance and
01:00 - down here okay so let's make a private
01:06 - void take screenshots and in here we're
01:10 - going to receive the image for our width
01:12 - and then for our height which will be
01:15 - the size of our final image now in order
01:19 - to grab the screenshot image we need to
01:21 - capture it after the current frame has
01:23 - been rendered so we're going to use the
01:24 - monobehaviour function on post render so
01:27 - private void on post render now this is
01:33 - going to trigger every frame so we need
01:35 - a boolean to flag when we want to
01:36 - capture a frame so up here came to make
01:40 - a private ball take screenshot on next
01:44 - frame and on our trick take screenshot
01:47 - we're going to set it to true and then
01:50 - here it is true we're going to take our
01:53 - screenshot and set it to false now on
01:58 - our screen shot we're going to create a
02:00 - render texture and apply it to our
02:02 - camera so my camera dot target texture
02:06 - equals a new render texture dot gets a
02:10 - temporary texture with this with this
02:13 - height and a depth of 16 so we have some
02:16 - transparency so in here the reason we're
02:18 - using a render texture is so that we can
02:21 - take a screenshot of various widths and
02:24 - Heights without having to be exactly the
02:26 - size of our screen by setting the target
02:30 - texture we're directing this camera
02:32 - we're into this texture rather than the
02:34 - screen with the size of this texture now
02:39 - on our post render we're going to grab
02:41 - the renderer with read pixels so let's
02:46 - grab a reference to our render texture
02:49 - and the texture equals my camera dot
02:52 - target texture
02:54 - let's create a new texture 2d to hold
02:58 - our data so texture 2d render result
03:03 - equals new texture 2d we're going to
03:06 - grade with the same size as our render
03:08 - texture width thanks your dot height
03:13 - with a texture format of a RGB 32 so we
03:18 - have transparency and we don't need mid
03:22 - Maps so now down here let's create a
03:25 - rectangle start on 0 0 and go film
03:34 - renderer picture that would render
03:36 - texture dot height and finally on our
03:42 - render result we can use read pixels to
03:46 - read our rectangle on to our destination
03:49 - of 0 and 0 so now we have our texture
03:53 - with the correct image that we want so
03:55 - let's save it into a PNG going to create
03:59 - a byte array out byte array and it's
04:04 - going to be our render result dot encode
04:08 - to PNG then we're going to use system
04:12 - dar√≠o dot file dot right all bytes we're
04:19 - going to write our byte array into
04:23 - application that that a path was let's
04:27 - call it camera screenshot dot PNG and
04:32 - what a long
04:35 - so that we know our screen shot has been
04:39 - saved and finally going to run their
04:44 - texture and release power temporary and
04:53 - back into my camera set the target
04:55 - texture back to not okay so when our
04:59 - flag is set we reset the flag we grab
05:02 - the render texture that we added in here
05:04 - we create a new texture to deal with the
05:07 - size that we want with transparency we
05:11 - create a rectangle of the form texture
05:13 - which is what we want to read we read
05:16 - based on that rectangle into that
05:17 - texture 2d then we encode that texture
05:20 - TD into PNG bytes and we save that byte
05:23 - array into our file and finally we do
05:27 - our cleanup okay so let's make our
05:30 - static function to take this screenshot
05:33 - from elsewhere in our code so a public
05:36 - static void take screenshot make it
05:40 - static and we're going to take our with
05:45 - a name for a height and we're going to
05:48 - do instant stock take screenshot of the
05:50 - width and our height and now in here on
05:56 - our game handler we're going to add on
05:59 - our update just for testing let's do if
06:02 - input dot get key down let's say equal
06:07 - dot space when we hit space we're going
06:11 - to do screenshot handler dot take
06:15 - screenshot let's take a 500 by 500
06:18 - screenshot okay let's go back into our
06:21 - scene here and I have my main camera in
06:24 - here and I'm going to add the screenshot
06:26 - handler onto it
06:27 - now let's it play okay I have my camera
06:31 - here and when I press space there you go
06:33 - the log says it save the screenshot we
06:36 - can update and see our screenshot right
06:37 - here there you it rendered that camera
06:40 - into this image it's not what we're
06:44 - doing here is not necessarily just
06:45 - taking a screenshot but rather taking
06:47 - the
06:47 - which from a specific camera so I have a
06:50 - secondary camera right here on top of
06:52 - the player and in my scene I have some
06:56 - text right download the player this text
06:58 - is on a different layer which is not
07:00 - being rendered by this main camera but
07:03 - it's being rendered by this player
07:04 - camera
07:05 - this player camera is essentially
07:07 - functioning as a portrait view so we can
07:09 - use our commands to grab the view from
07:11 - this camera without affecting what the
07:15 - main camera actually sees so let's
07:18 - remove the screenshot handler from the
07:19 - main camera and apply it to our player
07:22 - camera hit play and right now my main
07:26 - camera still shows exactly the same
07:28 - thing but when I hit space you can see
07:31 - that the camera screenshot is a result
07:33 - of the other camera great ok so as you
07:39 - can see you can use this script to grab
07:41 - a portrait of a camera or set up a
07:43 - camera different from what is being
07:45 - shown on the main camera and since we're
07:47 - saving as a PNG we can also grab
07:49 - transparency so what's going here back
07:52 - into our scene and let's erase our
07:55 - background sprites and now it should
07:58 - save a transparent image here I have my
08:02 - player as usual the main camera is being
08:04 - rendered and my secondary camera has
08:08 - grabbed this image with a transparent
08:10 - background sorry oh you can see how you
08:13 - can use this to either take regular
08:15 - screenshots of the entire screen or use
08:17 - it to grab the image from a secondary
08:19 - camera showing something completely
08:21 - different in your game okay I hope that
08:24 - helps if you have any questions post
08:26 - them in the comments and I'll do my best
08:27 - to answer them ok see you next time
08:39 - you

Cleaned transcript:

hello and welcome I'm your code monkey and in this video we're going to learn how to take screenshot in unity we're going to grab the pixels from a specific camera and save them into a PNG we can grab the entire screen from the main camera or grab the view of a secondary camera let's it's our so let's start off by creating a new csharp script and name it screenshot handler so in here on our private void awake we're going to grab a reference to the camera that this script will be placed on so up here first private camera my camera and on away my camera equal game logic key component of time we're also going to make a static instance so we can trigger screenshots through a static function so a private static screenshot handler instance and down here okay so let's make a private void take screenshots and in here we're going to receive the image for our width and then for our height which will be the size of our final image now in order to grab the screenshot image we need to capture it after the current frame has been rendered so we're going to use the monobehaviour function on post render so private void on post render now this is going to trigger every frame so we need a boolean to flag when we want to capture a frame so up here came to make a private ball take screenshot on next frame and on our trick take screenshot we're going to set it to true and then here it is true we're going to take our screenshot and set it to false now on our screen shot we're going to create a render texture and apply it to our camera so my camera dot target texture equals a new render texture dot gets a temporary texture with this with this height and a depth of 16 so we have some transparency so in here the reason we're using a render texture is so that we can take a screenshot of various widths and Heights without having to be exactly the size of our screen by setting the target texture we're directing this camera we're into this texture rather than the screen with the size of this texture now on our post render we're going to grab the renderer with read pixels so let's grab a reference to our render texture and the texture equals my camera dot target texture let's create a new texture 2d to hold our data so texture 2d render result equals new texture 2d we're going to grade with the same size as our render texture width thanks your dot height with a texture format of a RGB 32 so we have transparency and we don't need mid Maps so now down here let's create a rectangle start on 0 0 and go film renderer picture that would render texture dot height and finally on our render result we can use read pixels to read our rectangle on to our destination of 0 and 0 so now we have our texture with the correct image that we want so let's save it into a PNG going to create a byte array out byte array and it's going to be our render result dot encode to PNG then we're going to use system dar√≠o dot file dot right all bytes we're going to write our byte array into application that that a path was let's call it camera screenshot dot PNG and what a long so that we know our screen shot has been saved and finally going to run their texture and release power temporary and back into my camera set the target texture back to not okay so when our flag is set we reset the flag we grab the render texture that we added in here we create a new texture to deal with the size that we want with transparency we create a rectangle of the form texture which is what we want to read we read based on that rectangle into that texture 2d then we encode that texture TD into PNG bytes and we save that byte array into our file and finally we do our cleanup okay so let's make our static function to take this screenshot from elsewhere in our code so a public static void take screenshot make it static and we're going to take our with a name for a height and we're going to do instant stock take screenshot of the width and our height and now in here on our game handler we're going to add on our update just for testing let's do if input dot get key down let's say equal dot space when we hit space we're going to do screenshot handler dot take screenshot let's take a 500 by 500 screenshot okay let's go back into our scene here and I have my main camera in here and I'm going to add the screenshot handler onto it now let's it play okay I have my camera here and when I press space there you go the log says it save the screenshot we can update and see our screenshot right here there you it rendered that camera into this image it's not what we're doing here is not necessarily just taking a screenshot but rather taking the which from a specific camera so I have a secondary camera right here on top of the player and in my scene I have some text right download the player this text is on a different layer which is not being rendered by this main camera but it's being rendered by this player camera this player camera is essentially functioning as a portrait view so we can use our commands to grab the view from this camera without affecting what the main camera actually sees so let's remove the screenshot handler from the main camera and apply it to our player camera hit play and right now my main camera still shows exactly the same thing but when I hit space you can see that the camera screenshot is a result of the other camera great ok so as you can see you can use this script to grab a portrait of a camera or set up a camera different from what is being shown on the main camera and since we're saving as a PNG we can also grab transparency so what's going here back into our scene and let's erase our background sprites and now it should save a transparent image here I have my player as usual the main camera is being rendered and my secondary camera has grabbed this image with a transparent background sorry oh you can see how you can use this to either take regular screenshots of the entire screen or use it to grab the image from a secondary camera showing something completely different in your game okay I hope that helps if you have any questions post them in the comments and I'll do my best to answer them ok see you next time you
