With timestamps:

00:00 - hello and welcome I'm your code monkey
00:02 - and in this video we're continuing to
00:03 - create a graph in unity we're going to
00:06 - automatically modify the scale of our
00:07 - graph based on our list of values let's
00:10 - get started
00:13 - so we have the graph here from the
00:15 - previous video we're correctly
00:17 - displaying our values we chair
00:18 - representing as a list of hints let's go
00:20 - into our code and down here on the show
00:23 - we're a function we currently have
00:26 - hard-coded the maximum of our graph
00:28 - which in this case is a hundred F
00:30 - regardless of what values it receives in
00:32 - here so let's make that based on the
00:35 - values we were receiving here instead so
00:37 - we're going to cycle through all of our
00:40 - values and identify the highest value so
00:43 - in here let's make a four-inch in value
00:47 - and value enlist and first of all let's
00:50 - set the maximum default to zero F and
00:53 - here if the value is higher than the y
00:56 - maximum then we're going to set the Y
00:59 - maximum to this valley okay so this way
01:02 - we have calculated the highest possible
01:04 - value in order to have a bit of a buffer
01:07 - on the top of our graph let's increase
01:09 - the Y maximum a little bit so make Y
01:11 - maximum equals y maximum x one point
01:15 - well so essentially increase it by 20%
01:17 - this way we don't have the highest value
01:20 - hugging the exact top of our graph now
01:22 - since the rest of our code is already
01:24 - dynamically using the y maximum
01:26 - everything should still be working
01:28 - exactly the same so let's go back into
01:30 - our scene and see if the highest value
01:33 - is 20 percent under the top of our graph
01:36 - so let's see here's my graph and there
01:38 - you go the highest value is this one
01:40 - which is pretty much 20 percent from the
01:42 - top of our graph okay great
01:44 - now depending on the graph you might
01:46 - also want to have the minimum dependent
01:48 - on the lowest value rather than zero so
01:51 - let's do that now
01:52 - so first let's calculate D and lowest
01:54 - value so let's make up here a float for
01:57 - the wine minimum which instead of
02:00 - starting off at zero let's start drawing
02:02 - list of zero same thing for our maximum
02:05 - we start off the maximum and minimum to
02:07 - the very first value and here let's set
02:10 - our minimum so if the value is under our
02:13 - Y minimum then set the Y minimum to
02:17 - our value and now in here on our buffer
02:20 - on the top we are currently increasing
02:22 - the maximum by 20% but now instead of
02:25 - increasing by 20% of the maximum we want
02:28 - to increase by 20% of the difference
02:30 - between the maximum and the minimum
02:32 - this way the buffer is only pretty much
02:34 - the same size if you were to base it on
02:37 - the maximum and the maximum was very
02:39 - high on let's say a thousand but the
02:41 - minimum was 500 you would have a huge
02:43 - buffer on top so we need to increase the
02:45 - buffer based on the difference between
02:47 - those two so Y maximum equals the y
02:49 - maximum plus the y maximum minus the Y
02:53 - minimum multiplied by zero point two up
02:57 - so we're going to increase the Y maximum
02:59 - by 20% of the difference between the two
03:02 - and now for our y minimum we want to do
03:06 - the same thing except decrease now down
03:10 - here when we're calculating the Y
03:12 - position for our dots we need to reduce
03:14 - the value of our minimum so our
03:16 - normalized value is still correct
03:18 - so in here the Y position is not going
03:20 - to be just the felon list rather than at
03:22 - minus the Y minimum so essentially the Y
03:25 - minimum is serving as a zero and divided
03:28 - by y maximum minus y minimum okay so
03:31 - this corrects our normalized value so
03:34 - let's go back into our scene and see if
03:37 - the values are correct okay there you go
03:39 - you can see we have a 20% buffer on top
03:41 - 20% buffer on the bottom and the graph
03:44 - is no longer starting from zero but as
03:47 - you can see the labels are incorrect so
03:50 - let's fix that now so down here don't
03:53 - labels for the X those are working
03:54 - exactly as they should but the Y need to
03:57 - be different now the difference is not
03:59 - on their actual position so this
04:01 - position is actually still perfectly
04:03 - fine the only thing that won't change is
04:05 - the value that we set to our axis label
04:08 - so the value up here won't be based on
04:11 - the Y minimum plus our normalized value
04:15 - which goes from 0 to 1
04:17 - except it's not x maximum rather
04:20 - maximum minus dy minimum so I have a
04:24 - base on the minimum and the normalized
04:26 - value multiplied by the difference
04:27 - between two so let's see if our axes and
04:31 - labels are correct and there you go as
04:34 - you can see the highest value is 98 so
04:36 - it's just under 103 and you got a buffer
04:38 - of about 20 and the lowest value is 5
04:41 - and it goes under by about 20 obviously
04:44 - it is up to you whether you want to
04:45 - scale it downwards or start at zero it
04:48 - depends on what type wherever you are
04:50 - creating now let's test our code with
04:52 - some random values in order to do that
04:55 - first we need to add some cleanup on our
04:57 - graph right now we're creating game
04:59 - objects but never actually destroying
05:01 - them so we're testing let me modify the
05:03 - list and then show it again so I'm going
05:05 - to modify the first index and instead of
05:07 - being a 5 let's say 20 and then show the
05:11 - exact same thing so right now it should
05:13 - incorrectly display two dots on the
05:15 - beginning yep there you go and since the
05:18 - first one was the lowest the whole thing
05:20 - is actually shifted so obviously we
05:22 - don't want this to be duplicate we just
05:23 - want to show one graph at a time so
05:25 - let's make sure we delete the previous
05:27 - game objects before spawning the new
05:29 - ones so up here and let us simply create
05:31 - a private list of game object game
05:35 - object list on our awake let's
05:38 - instantiate our list and down here on
05:42 - our show graph let's first destroy all
05:44 - the objects on this list before spawning
05:46 - new so I'm going to go for each game
05:49 - object game object in game object list
05:53 - and I'm going to destroy that game
05:56 - object but I'm going to clear my game
05:59 - object what okay so we're cycling
06:02 - through the game object list destroying
06:04 - all of them and clearing them now when
06:06 - we go down here when we create game
06:08 - objects we need to actually add them so
06:10 - let me add the circle game object let's
06:15 - modify the dark connection to return our
06:17 - game okay
06:20 - when here game object that connection
06:24 - game object it was that and I'm going
06:28 - game object list and add the dot
06:30 - connection I'm going to add the label so
06:34 - label X dot game object same thing for D
06:38 - dashes and same thing for these labels
06:43 - okay so we are now adding every
06:45 - insensate a game object into my game
06:48 - object list so let's see if we have
06:50 - fixed the issue yep there you we are now
06:53 - seeing only one graph the first game
06:56 - objects are being destroyed before we
06:58 - are spawning the second ones so now in
07:00 - order to make sure that our scaling is
07:02 - working correctly and let's set up our
07:04 - graph with random values so back up here
07:07 - we want to set up the value list with
07:11 - random values and show the graph again
07:13 - so in here we're going to use the
07:15 - function periodic from the code monkey
07:18 - utilities which as always you can wear
07:20 - out for free from unity code monkey comm
07:22 - and I'm going to create it will trigger
07:25 - an action every and let's say half a
07:29 - second now that action well first of all
07:33 - clear the volume list to remove our
07:36 - previous values then I'm going to cycle
07:39 - less then let's see 15 values and I'm
07:43 - going to add value list odd let's just
07:46 - pick a random value so randomed our
07:48 - range between let's say 0 and 500 and we
07:53 - want to use the Unity engine ran that
07:55 - range and finally we're going to show
07:58 - the same crap okay so now we should
08:01 - first see the first graph and then every
08:03 - half second we should display a new
08:05 - graph with random values this way we
08:08 - should be able to see if our scaling is
08:10 - correctly working can't let's hit play
08:12 - and there's my first graph in second
08:15 - third and so on and as you can see this
08:17 - game emily's correctly everything is
08:19 - always within 20 percent of the bottom
08:21 - and 20 percent of the top so regardless
08:23 - to what values we feed we can always
08:25 - view the graph on our screen so there
08:27 - you have it our graph now dynamically
08:29 - resize the scale based on the values
08:31 - that it receives in the next video we're
08:33 - going to cover dynamically modifying our
08:36 - horizontal scale as always you can
08:38 - download the project files and you
08:40 - tony's from unity code
08:41 - monkey calm if you have any questions
08:43 - post them in the comments and I'll do my
08:45 - best answer now okay see you next time

Cleaned transcript:

hello and welcome I'm your code monkey and in this video we're continuing to create a graph in unity we're going to automatically modify the scale of our graph based on our list of values let's get started so we have the graph here from the previous video we're correctly displaying our values we chair representing as a list of hints let's go into our code and down here on the show we're a function we currently have hardcoded the maximum of our graph which in this case is a hundred F regardless of what values it receives in here so let's make that based on the values we were receiving here instead so we're going to cycle through all of our values and identify the highest value so in here let's make a fourinch in value and value enlist and first of all let's set the maximum default to zero F and here if the value is higher than the y maximum then we're going to set the Y maximum to this valley okay so this way we have calculated the highest possible value in order to have a bit of a buffer on the top of our graph let's increase the Y maximum a little bit so make Y maximum equals y maximum x one point well so essentially increase it by 20% this way we don't have the highest value hugging the exact top of our graph now since the rest of our code is already dynamically using the y maximum everything should still be working exactly the same so let's go back into our scene and see if the highest value is 20 percent under the top of our graph so let's see here's my graph and there you go the highest value is this one which is pretty much 20 percent from the top of our graph okay great now depending on the graph you might also want to have the minimum dependent on the lowest value rather than zero so let's do that now so first let's calculate D and lowest value so let's make up here a float for the wine minimum which instead of starting off at zero let's start drawing list of zero same thing for our maximum we start off the maximum and minimum to the very first value and here let's set our minimum so if the value is under our Y minimum then set the Y minimum to our value and now in here on our buffer on the top we are currently increasing the maximum by 20% but now instead of increasing by 20% of the maximum we want to increase by 20% of the difference between the maximum and the minimum this way the buffer is only pretty much the same size if you were to base it on the maximum and the maximum was very high on let's say a thousand but the minimum was 500 you would have a huge buffer on top so we need to increase the buffer based on the difference between those two so Y maximum equals the y maximum plus the y maximum minus the Y minimum multiplied by zero point two up so we're going to increase the Y maximum by 20% of the difference between the two and now for our y minimum we want to do the same thing except decrease now down here when we're calculating the Y position for our dots we need to reduce the value of our minimum so our normalized value is still correct so in here the Y position is not going to be just the felon list rather than at minus the Y minimum so essentially the Y minimum is serving as a zero and divided by y maximum minus y minimum okay so this corrects our normalized value so let's go back into our scene and see if the values are correct okay there you go you can see we have a 20% buffer on top 20% buffer on the bottom and the graph is no longer starting from zero but as you can see the labels are incorrect so let's fix that now so down here don't labels for the X those are working exactly as they should but the Y need to be different now the difference is not on their actual position so this position is actually still perfectly fine the only thing that won't change is the value that we set to our axis label so the value up here won't be based on the Y minimum plus our normalized value which goes from 0 to 1 except it's not x maximum rather maximum minus dy minimum so I have a base on the minimum and the normalized value multiplied by the difference between two so let's see if our axes and labels are correct and there you go as you can see the highest value is 98 so it's just under 103 and you got a buffer of about 20 and the lowest value is 5 and it goes under by about 20 obviously it is up to you whether you want to scale it downwards or start at zero it depends on what type wherever you are creating now let's test our code with some random values in order to do that first we need to add some cleanup on our graph right now we're creating game objects but never actually destroying them so we're testing let me modify the list and then show it again so I'm going to modify the first index and instead of being a 5 let's say 20 and then show the exact same thing so right now it should incorrectly display two dots on the beginning yep there you go and since the first one was the lowest the whole thing is actually shifted so obviously we don't want this to be duplicate we just want to show one graph at a time so let's make sure we delete the previous game objects before spawning the new ones so up here and let us simply create a private list of game object game object list on our awake let's instantiate our list and down here on our show graph let's first destroy all the objects on this list before spawning new so I'm going to go for each game object game object in game object list and I'm going to destroy that game object but I'm going to clear my game object what okay so we're cycling through the game object list destroying all of them and clearing them now when we go down here when we create game objects we need to actually add them so let me add the circle game object let's modify the dark connection to return our game okay when here game object that connection game object it was that and I'm going game object list and add the dot connection I'm going to add the label so label X dot game object same thing for D dashes and same thing for these labels okay so we are now adding every insensate a game object into my game object list so let's see if we have fixed the issue yep there you we are now seeing only one graph the first game objects are being destroyed before we are spawning the second ones so now in order to make sure that our scaling is working correctly and let's set up our graph with random values so back up here we want to set up the value list with random values and show the graph again so in here we're going to use the function periodic from the code monkey utilities which as always you can wear out for free from unity code monkey comm and I'm going to create it will trigger an action every and let's say half a second now that action well first of all clear the volume list to remove our previous values then I'm going to cycle less then let's see 15 values and I'm going to add value list odd let's just pick a random value so randomed our range between let's say 0 and 500 and we want to use the Unity engine ran that range and finally we're going to show the same crap okay so now we should first see the first graph and then every half second we should display a new graph with random values this way we should be able to see if our scaling is correctly working can't let's hit play and there's my first graph in second third and so on and as you can see this game emily's correctly everything is always within 20 percent of the bottom and 20 percent of the top so regardless to what values we feed we can always view the graph on our screen so there you have it our graph now dynamically resize the scale based on the values that it receives in the next video we're going to cover dynamically modifying our horizontal scale as always you can download the project files and you tony's from unity code monkey calm if you have any questions post them in the comments and I'll do my best answer now okay see you next time
