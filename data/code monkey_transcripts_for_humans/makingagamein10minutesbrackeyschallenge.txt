With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - and in this video we're going to make a
00:02 - game in ten minutes using an interesting
00:04 - strategy let's begin
00:08 - okay so you might have seen some videos
00:11 - of this challenge which was first
00:12 - started by Becky's where you try to make
00:14 - a game in ten minutes so you open up a
00:16 - blank scene start a timer and try to do
00:18 - as much as possible in ten minutes I
00:20 - think it's a fun interesting challenge
00:22 - but here I won't be taking a somewhat
00:24 - different approach I will be creating a
00:26 - game in ten minutes however my main goal
00:28 - with this video is to showcase the power
00:30 - of writing clean reusable code the big
00:33 - advantage to reusing code is since we
00:35 - already have it written we can make
00:37 - something pretty complex in just 10
00:39 - minutes so I won't be using various
00:41 - assets and systems that I've created in
00:43 - the past and many of which I have
00:45 - individual videos that you can check to
00:46 - see how are they were originally created
00:48 - I hope that by the end the video when
00:50 - you see all that was made in just 10
00:52 - minutes you'll agree with my viewers so
00:54 - how important it is to write clean
00:55 - reusable code so the game we're making
00:58 - is essentially a prototype RTS with two
01:00 - warrior factions the words are spawned
01:02 - they don't look for an enemy move
01:04 - towards that enemy and attack them
01:05 - that's a pretty simple base for an RTS
01:07 - but in reality even without my
01:09 - reasonable code the whole scene still
01:11 - takes 15 minutes to create but I figured
01:14 - it was better to make something
01:15 - interesting rather than being strict on
01:17 - the 10 minute limit nothing of what I'm
01:19 - going to use here was created
01:20 - specifically for this video every ass
01:22 - and I'm using was made for something
01:24 - else in the past the starting scene I
01:26 - have here is the scene I use in all my
01:28 - videos so even this was initially set up
01:30 - six months ago with various improvements
01:32 - over time I have a bunch of generic
01:34 - classes that are very easy to adapt
01:36 - along with the code monkey utilities and
01:39 - my custom animation system alright so
01:41 - with that out of the way let's begin so
01:43 - the clock starts now
01:44 - okay so now first of all the main thing
01:48 - we need is a main script so it's great
01:51 - in you see sheriff script this will be
01:53 - our game handler this is gonna be the
01:56 - main script from which we set up our
01:58 - game so in here let's begin by making a
02:02 - serialize field for a camera phone
02:04 - script now this script was created in a
02:07 - previous video it essentially has a
02:09 - bunch of functions for easily modifying
02:12 - the camera so we can change the position
02:14 - and zoom so on start let's do the
02:17 - chemical setup the setup requires a
02:21 - function for the camera position and one
02:24 - for the zoom so let's define a private
02:26 - member variable for the camera position
02:29 - that's what we're going to pass in as
02:31 - the camera Falls position now on update
02:35 - let's do an input dot get key to get the
02:39 - key down for the wsad keys that's how
02:43 - we're going to pan around our camera so
02:46 - when we press W we simply change the
02:49 - camera position that wide move it up by
02:51 - a certain camera speed multiplied by
02:53 - time dot off the time define the camera
02:56 - speed and copy the same thing for all of
02:59 - the other keys so WI CD on the theme of
03:04 - the right on the a move to the left on
03:06 - the s move down and on TW move up and
03:09 - for the camera zoom let's only give it a
03:11 - fixed value of 70 okay so let's drag the
03:17 - script onto our game hammer object and
03:20 - drag the camera follow component which
03:23 - is placed on the main camera object okay
03:27 - so like that we can now Pan the camera
03:28 - around okay now we're going to duplicate
03:31 - the character position movement handler
03:34 - this is the script that is part of my
03:37 - base scene and it simply already
03:41 - contains some base code for implementing
03:43 - the animation system and moving a
03:47 - character around
03:48 - so first let's make a static whirring
03:51 - list which will contain all of our
03:53 - warriors we're going to add this object
03:58 - into that list and change the animations
04:01 - to work with the sword shield we're
04:06 - going to add a serialize film to define
04:07 - if this is an enemy or not and this way
04:10 - we're going to use the same square for
04:12 - both the enemies and the friendlies so
04:16 - duplicate the game object remove the
04:20 - original script and drag our warrior
04:22 - script leave not as enemies since this
04:26 - one will be the friendly and some we're
04:28 - going to the body and change the
04:29 - material the body is simply the mesh
04:32 - that is
04:33 - used by the animation system and just
04:36 - like that we should have a worry and yet
04:40 - there you go a warrior with a spartan
04:42 - spreadsheet and he's idle okay so now
04:44 - create a prefab so we can instantiate
04:47 - our friendly worried duplicate it to
04:54 - make one for the enemy warrior now the
04:58 - only difference is the enemy won't have
05:00 - is enemy set it true and have a
05:02 - different spreadsheet instead of having
05:04 - the Spartan we're going to use the
05:06 - Persian spreadsheet so now let's make an
05:10 - a new for our state so we can have two
05:13 - different states we have the normal and
05:15 - the busy essentially the busy does
05:17 - nothing and the normal does the normal
05:19 - logic so we start off at normal and on
05:23 - update we do a switch on our current
05:26 - state and we can be in either state dot
05:31 - normal or state dot busy if we are busy
05:39 - we do nothing but if we are normal we
05:42 - are handling the movement and after
05:45 - handling movement we also handle all the
05:47 - attacks so in here make a private boy to
05:50 - handle the attacks
05:56 - so first we're going to grab our target
05:59 - warrior so we're going to use a function
06:02 - to get the closest warrior we're going
06:04 - to give it the target of not is enemy so
06:07 - essentially we want a warrior from the
06:09 - opposing team and make a helper function
06:11 - to get the position which is simply the
06:13 - transform dodge position so let's make
06:18 - the get closest on the way up here make
06:21 - a private static warrior get closest
06:23 - we're going to receive a boolean for our
06:26 - target is enemy and we're going to
06:28 - receive an effector for our position so
06:32 - let's define a closest warrior first of
06:35 - all set it to no and then that's what
06:36 - we're going to return so let's act all
06:38 - through the list now if the warrior that
06:47 - is enemy equals the target that we're
06:49 - searching so essentially it's on the
06:51 - team that we're targeting let's first
06:53 - check if we do not have a closest if we
06:56 - don't then this one is the closest if we
06:59 - do already have a closest warrior then
07:02 - we want to select the one that is
07:03 - actually closer to this position so we
07:06 - do a distance check between this warrior
07:09 - and our position and if that one is
07:13 - closer than the closest then this war it
07:17 - won't become the actual causes so if we
07:24 - do have a territory if territory is not
07:27 - known then we do have a target and if we
07:30 - do the first thing we do is set the
07:32 - target position which simply moves this
07:34 - object towards that target position
07:36 - which is defined in the original script
07:40 - that we used and then we're going to do
07:44 - a simple distance check between this
07:46 - game object and the target and if it is
07:49 - close enough then we're going to start
07:51 - attacking
07:54 - now on the attack first thing we do is
07:56 - set the state to busy so we are no
07:58 - longer executing the movement logic and
08:01 - then we play an animation now the
08:04 - animation again is using the custom
08:06 - animation system so I'm going to use the
08:08 - animation sword shield attack now I need
08:14 - to calculate a direction for that
08:16 - animation so come with the attack
08:17 - direction which is based on the target
08:19 - Direction minus our get position and
08:22 - normalize the whole thing so we play on
08:30 - a complete frame right and then we have
08:33 - an action that is triggered when the
08:35 - animation is complete so it is complete
08:38 - we simply go back to the normal state
08:39 - and then we also have an action when the
08:43 - animation reaches a trigger which is the
08:45 - impact frame and for now do nothing and
08:49 - then set to no okay
08:53 - so now the game can learn let's add some
08:56 - serialize fields for the friendly and
08:58 - the enemy so a serialize film for a
09:01 - transform for the friendly warrior
09:03 - prefab and for the enemy warrior free
09:05 - from then on start let's instantiate a
09:13 - firmly warrior going to put them in a
09:16 - certain position
09:22 - and after the friendly and let's also
09:24 - spawn an enemy okay so let's go to the
09:30 - game hammer object and drag both
09:32 - references now let's test and yep there
09:37 - you go both them were spawn both them
09:39 - move one towards the other and they
09:41 - attack when they are within attack range
09:43 - okay so now let's change their position
09:47 - so they don't always spawn in the exact
09:49 - same position so for that I'm going to
09:51 - use the code monte Tony's to go into the
09:54 - utens class and get a random direction
09:56 - and multiply it by a certain value this
10:00 - just so they don't spawn exactly on 150
10:03 - and then I'm going to spawn five and
10:06 - place them alongside the vertical axis
10:13 - okay so it's S&C the five friendlies and
10:16 - the five enemies yet there you go five
10:20 - enemies five friendlies and the old
10:21 - chase the closest to them okay so now
10:25 - let's go back into the attack and now we
10:27 - want to actually deal damage so let's
10:30 - first make a function for the private
10:32 - void damage and we're going to receive a
10:34 - parameter for the attacker that is
10:35 - causing damage to this worried so in
10:38 - order to use damage we're going to use
10:40 - the health system which was created in a
10:42 - previous video we're going to give them
10:45 - a max health of a hundred and to find
10:47 - the health system as a member variable
10:52 - so using that health system we can
10:54 - simply call the damage function and give
10:56 - it a certain damage after we damage
10:59 - let's test if this worry is then if he
11:02 - is let's destroy key game object then
11:07 - let's also make a boolean to test if he
11:10 - is dead simply ask the health system if
11:13 - he is that and returns that
11:18 - so when we reach the impact frame if the
11:21 - territory is not dead because he could
11:25 - die once in the middle of the animation
11:26 - so if he is not dead then we're going to
11:28 - damage him using this as the attacker so
11:35 - let's test and see if the enemies are
11:36 - dying okay they are moving towards each
11:41 - other and they attack and after a while
11:43 - you can see some object disappeared but
11:45 - there was an error there is because up
11:48 - here when we are checking the causes we
11:49 - did not ignore the dead ones so in here
11:51 - similarly do if the warrior is dead then
11:54 - simply continue and ignoring from the
11:56 - cycle all right so when we're dealing
12:00 - damage let's first comment like the
12:02 - direction from the attacker and now we
12:07 - can use that direction to spawn some
12:10 - bullet particles which again the bullet
12:12 - handler script was first created for
12:15 - survivor squad so many years ago and
12:17 - scripts still works perfectly fine it
12:20 - takes a position and a direction and it
12:22 - spawned some bullet particles so let's
12:28 - make a health bar using the worm bar
12:31 - which is part of the code monkey Tonys
12:33 - which again was also created previously
12:35 - so let's spawn it on the transform place
12:39 - the warm bar on top of this transform
12:41 - give it a certain size give it a
12:45 - background color frame mark on a red
12:48 - start with it come only filled give a
12:50 - certain roared up so that it is on top
12:53 - of everything else
12:54 - give it a black outline with 1/2
12:56 - thickness all right
13:03 - so let's store this as a member variable
13:06 - for our world bar will be our health
13:09 - we're on bar and we set it in there and
13:12 - now since we have that member variable
13:14 - we can go into the health system which
13:16 - has an event that triggers when the
13:18 - health is changed so using that we can
13:21 - set the size of our health world bar and
13:24 - set the size based on what the health
13:26 - system is saying so now let's run we
13:30 - should we don't see the point particles
13:31 - and the health bar yep there's the
13:34 - health bars right there and when they
13:35 - hit yep there are the particles and you
13:37 - can see the health bar is going down all
13:39 - right good
13:44 - so now when we are dead let's add a nice
13:46 - flying body effect which again was also
13:49 - created on a previous video it simply
13:51 - takes a prefab and sends that pre-fund
13:53 - flying away the prefab contains the
13:57 - sprite of the dead flying body and then
14:00 - we place it on the position and we give
14:03 - it a flight direction which is the same
14:04 - as the direction from the attacker so
14:07 - now let's grab some references for the
14:10 - transforms that we're going to use for
14:12 - the prefabs of the flying bodies so for
14:14 - that let's making static instance on the
14:17 - game handler so we can use that from our
14:19 - warrior class we're going to make a poly
14:22 - transform for the Friendly flying body
14:25 - and then one for the enemy flying body
14:26 - since they have different sprites so
14:31 - using that we can go back into the
14:32 - warrior and first define if it is an
14:35 - enemy to pick out which flying body
14:38 - transform we should use so by default
14:43 - use the Friendly flying body and then if
14:45 - it is an enemy set it to the enemy
14:47 - flying body so we have enemy flying but
14:50 - ok so that we are spawning a flying body
14:56 - and now just for some polish let's also
14:58 - do a little bit of camera shake when the
15:00 - enemy actually does so when a unit dies
15:03 - the screen will shake ok so let's create
15:11 - the fine body so I have the sprite
15:14 - create a new prefab name it pf' friendly
15:17 - flying body and it won't simply be this
15:20 - very simple sprite and do the same thing
15:24 - for the enemy flying body and drive the
15:30 - new sprite okay try the references to
15:34 - the game Hamelin and now test out the
15:39 - game okay so there's the enemies they
15:45 - both have health bars and they take
15:47 - damage the young health bar and yep
15:48 - there you go you can see the falling
15:50 - bodies when one of them dies so they
15:52 - attack each other and when they reach
15:54 - zero
15:54 - yep the flying bodies spawn and there's
15:56 - a blood trail and what's very satisfying
15:58 - alright so now let's make a function in
16:01 - order to spawn multiple units so let's
16:04 - copy our code into its own function and
16:06 - first we're going to combat function and
16:08 - then we're going to use the function
16:09 - periodic which is part of the code
16:11 - monkey Tonys which again was written a
16:13 - long time ago in order to spawn the
16:15 - units every three seconds so let's test
16:19 - and yep there's the first wave and they
16:22 - are attacking any of there's another way
16:24 - and they're all attacking they're all
16:26 - working perfectly fine the units are
16:29 - created either as an enemy or as a
16:31 - friendly and they move towards their
16:33 - target and attack each other all right
16:39 - so that's our mini game it took 15
16:41 - minutes instead of 10 but the final
16:43 - result is quite nice if all of this can
16:45 - be done in 15 minutes then in one hour
16:47 - we could make some workers gathering
16:48 - goods and very quickly create a sort of
16:51 - Age of Empires prototype so this is a
16:53 - great fun challenge but obviously it's
16:55 - not representative of what game
16:56 - development is like I already know the
16:59 - game design in my head and the time it
17:00 - took to organize all of that is not in
17:02 - within the first 15 minutes but still
17:04 - this whole minigame was first conceived
17:06 - in my head and brought to life in a
17:07 - total of around 4 hours thinking about
17:10 - what game I wanted to make what elements
17:12 - I can reuse how they would interact with
17:13 - each other and so on so if you've seen
17:16 - other videos on this challenge you can
17:18 - probably see a massive difference in
17:20 - what we can accomplish from scratch
17:21 - versus if you already have a nice
17:23 - library of pre-written clean reusable
17:26 - code so let's review all of the reuse
17:28 - code so first of all there's the ebay
17:30 - scene whenever I start a new project I
17:32 - just copy the base in folder that way
17:35 - the camera is already very nicely set up
17:37 - into the exactly as I want to be and it
17:39 - has the cameraphone script that I use
17:41 - pretty much on every project the UI in
17:44 - canvas are also very nice and easily set
17:46 - up so I can easily add something in here
17:48 - and make a UI then I've got a bunch of
17:51 - generic based scripts that serve as a
17:53 - base for whatever I want to do so for
17:56 - example I have one for a character that
17:58 - can aim towards the mouse and move using
18:00 - WASD I have one to click to move to a
18:03 - position something that follows various
18:06 - waypoints and a character that uses a
18:09 - sword so for the assets I already have a
18:11 - bunch of characters from previous games
18:13 - for this game we use the Spartan and the
18:16 - Persians which were first created for
18:18 - hyper Knights balance I also have the
18:20 - worker spreadsheet that I want to add to
18:22 - this project which was made from ninja
18:25 - Tycoon and also have this background
18:27 - sprite in here which was first made for
18:29 - hyper Knights I used various scripts
18:31 - that were created in previous videos
18:33 - first of all the camera follow system
18:35 - which is very simple and very easy to
18:37 - use then the flying body which takes a
18:40 - transform and simply moves them away so
18:43 - it looks like an enemies flying and
18:44 - makes for a very nice effect and the
18:47 - health system which was created in the
18:49 - very first video then the inside of the
18:51 - script that we duplicated the character
18:53 - position movement handler it is named
18:56 - that way simple because it supports
18:58 - receiving a target position and it
19:00 - simply moves toward that position very
19:02 - simple and everything is set up to use
19:05 - my custom animation system that system
19:07 - was created almost two years ago for
19:09 - Hyper Nights and I'm constantly
19:10 - improving it and adding new features so
19:13 - in the meantime I've created a very
19:14 - large library of very
19:16 - animations the ones that I'm using in
19:17 - here for the marine idol and marine wonk
19:20 - these were first used for harbor Knights
19:22 - barrels as were the sword shield Idol
19:25 - and won't which was also used for Hyper
19:27 - Knights balance so there you have it we
19:30 - create the game prototype in just 15
19:32 - minutes
19:32 - I hope this helped you see the
19:34 - importance in writing clean reusable
19:36 - code and keep adding assets and generic
19:38 - elements to your own personal library to
19:40 - make your future work much easier as
19:42 - long as you can download the project
19:44 - files the new Toni's from unity code
19:45 - monkey comm if you have any questions
19:47 - post them in the comments and I'll do my
19:49 - best to answer them subscribe for more
19:50 - videos and I'll see you next time

Cleaned transcript:

hello and welcome I'm your code monkey and in this video we're going to make a game in ten minutes using an interesting strategy let's begin okay so you might have seen some videos of this challenge which was first started by Becky's where you try to make a game in ten minutes so you open up a blank scene start a timer and try to do as much as possible in ten minutes I think it's a fun interesting challenge but here I won't be taking a somewhat different approach I will be creating a game in ten minutes however my main goal with this video is to showcase the power of writing clean reusable code the big advantage to reusing code is since we already have it written we can make something pretty complex in just 10 minutes so I won't be using various assets and systems that I've created in the past and many of which I have individual videos that you can check to see how are they were originally created I hope that by the end the video when you see all that was made in just 10 minutes you'll agree with my viewers so how important it is to write clean reusable code so the game we're making is essentially a prototype RTS with two warrior factions the words are spawned they don't look for an enemy move towards that enemy and attack them that's a pretty simple base for an RTS but in reality even without my reasonable code the whole scene still takes 15 minutes to create but I figured it was better to make something interesting rather than being strict on the 10 minute limit nothing of what I'm going to use here was created specifically for this video every ass and I'm using was made for something else in the past the starting scene I have here is the scene I use in all my videos so even this was initially set up six months ago with various improvements over time I have a bunch of generic classes that are very easy to adapt along with the code monkey utilities and my custom animation system alright so with that out of the way let's begin so the clock starts now okay so now first of all the main thing we need is a main script so it's great in you see sheriff script this will be our game handler this is gonna be the main script from which we set up our game so in here let's begin by making a serialize field for a camera phone script now this script was created in a previous video it essentially has a bunch of functions for easily modifying the camera so we can change the position and zoom so on start let's do the chemical setup the setup requires a function for the camera position and one for the zoom so let's define a private member variable for the camera position that's what we're going to pass in as the camera Falls position now on update let's do an input dot get key to get the key down for the wsad keys that's how we're going to pan around our camera so when we press W we simply change the camera position that wide move it up by a certain camera speed multiplied by time dot off the time define the camera speed and copy the same thing for all of the other keys so WI CD on the theme of the right on the a move to the left on the s move down and on TW move up and for the camera zoom let's only give it a fixed value of 70 okay so let's drag the script onto our game hammer object and drag the camera follow component which is placed on the main camera object okay so like that we can now Pan the camera around okay now we're going to duplicate the character position movement handler this is the script that is part of my base scene and it simply already contains some base code for implementing the animation system and moving a character around so first let's make a static whirring list which will contain all of our warriors we're going to add this object into that list and change the animations to work with the sword shield we're going to add a serialize film to define if this is an enemy or not and this way we're going to use the same square for both the enemies and the friendlies so duplicate the game object remove the original script and drag our warrior script leave not as enemies since this one will be the friendly and some we're going to the body and change the material the body is simply the mesh that is used by the animation system and just like that we should have a worry and yet there you go a warrior with a spartan spreadsheet and he's idle okay so now create a prefab so we can instantiate our friendly worried duplicate it to make one for the enemy warrior now the only difference is the enemy won't have is enemy set it true and have a different spreadsheet instead of having the Spartan we're going to use the Persian spreadsheet so now let's make an a new for our state so we can have two different states we have the normal and the busy essentially the busy does nothing and the normal does the normal logic so we start off at normal and on update we do a switch on our current state and we can be in either state dot normal or state dot busy if we are busy we do nothing but if we are normal we are handling the movement and after handling movement we also handle all the attacks so in here make a private boy to handle the attacks so first we're going to grab our target warrior so we're going to use a function to get the closest warrior we're going to give it the target of not is enemy so essentially we want a warrior from the opposing team and make a helper function to get the position which is simply the transform dodge position so let's make the get closest on the way up here make a private static warrior get closest we're going to receive a boolean for our target is enemy and we're going to receive an effector for our position so let's define a closest warrior first of all set it to no and then that's what we're going to return so let's act all through the list now if the warrior that is enemy equals the target that we're searching so essentially it's on the team that we're targeting let's first check if we do not have a closest if we don't then this one is the closest if we do already have a closest warrior then we want to select the one that is actually closer to this position so we do a distance check between this warrior and our position and if that one is closer than the closest then this war it won't become the actual causes so if we do have a territory if territory is not known then we do have a target and if we do the first thing we do is set the target position which simply moves this object towards that target position which is defined in the original script that we used and then we're going to do a simple distance check between this game object and the target and if it is close enough then we're going to start attacking now on the attack first thing we do is set the state to busy so we are no longer executing the movement logic and then we play an animation now the animation again is using the custom animation system so I'm going to use the animation sword shield attack now I need to calculate a direction for that animation so come with the attack direction which is based on the target Direction minus our get position and normalize the whole thing so we play on a complete frame right and then we have an action that is triggered when the animation is complete so it is complete we simply go back to the normal state and then we also have an action when the animation reaches a trigger which is the impact frame and for now do nothing and then set to no okay so now the game can learn let's add some serialize fields for the friendly and the enemy so a serialize film for a transform for the friendly warrior prefab and for the enemy warrior free from then on start let's instantiate a firmly warrior going to put them in a certain position and after the friendly and let's also spawn an enemy okay so let's go to the game hammer object and drag both references now let's test and yep there you go both them were spawn both them move one towards the other and they attack when they are within attack range okay so now let's change their position so they don't always spawn in the exact same position so for that I'm going to use the code monte Tony's to go into the utens class and get a random direction and multiply it by a certain value this just so they don't spawn exactly on 150 and then I'm going to spawn five and place them alongside the vertical axis okay so it's S&C the five friendlies and the five enemies yet there you go five enemies five friendlies and the old chase the closest to them okay so now let's go back into the attack and now we want to actually deal damage so let's first make a function for the private void damage and we're going to receive a parameter for the attacker that is causing damage to this worried so in order to use damage we're going to use the health system which was created in a previous video we're going to give them a max health of a hundred and to find the health system as a member variable so using that health system we can simply call the damage function and give it a certain damage after we damage let's test if this worry is then if he is let's destroy key game object then let's also make a boolean to test if he is dead simply ask the health system if he is that and returns that so when we reach the impact frame if the territory is not dead because he could die once in the middle of the animation so if he is not dead then we're going to damage him using this as the attacker so let's test and see if the enemies are dying okay they are moving towards each other and they attack and after a while you can see some object disappeared but there was an error there is because up here when we are checking the causes we did not ignore the dead ones so in here similarly do if the warrior is dead then simply continue and ignoring from the cycle all right so when we're dealing damage let's first comment like the direction from the attacker and now we can use that direction to spawn some bullet particles which again the bullet handler script was first created for survivor squad so many years ago and scripts still works perfectly fine it takes a position and a direction and it spawned some bullet particles so let's make a health bar using the worm bar which is part of the code monkey Tonys which again was also created previously so let's spawn it on the transform place the warm bar on top of this transform give it a certain size give it a background color frame mark on a red start with it come only filled give a certain roared up so that it is on top of everything else give it a black outline with 1/2 thickness all right so let's store this as a member variable for our world bar will be our health we're on bar and we set it in there and now since we have that member variable we can go into the health system which has an event that triggers when the health is changed so using that we can set the size of our health world bar and set the size based on what the health system is saying so now let's run we should we don't see the point particles and the health bar yep there's the health bars right there and when they hit yep there are the particles and you can see the health bar is going down all right good so now when we are dead let's add a nice flying body effect which again was also created on a previous video it simply takes a prefab and sends that prefund flying away the prefab contains the sprite of the dead flying body and then we place it on the position and we give it a flight direction which is the same as the direction from the attacker so now let's grab some references for the transforms that we're going to use for the prefabs of the flying bodies so for that let's making static instance on the game handler so we can use that from our warrior class we're going to make a poly transform for the Friendly flying body and then one for the enemy flying body since they have different sprites so using that we can go back into the warrior and first define if it is an enemy to pick out which flying body transform we should use so by default use the Friendly flying body and then if it is an enemy set it to the enemy flying body so we have enemy flying but ok so that we are spawning a flying body and now just for some polish let's also do a little bit of camera shake when the enemy actually does so when a unit dies the screen will shake ok so let's create the fine body so I have the sprite create a new prefab name it pf' friendly flying body and it won't simply be this very simple sprite and do the same thing for the enemy flying body and drive the new sprite okay try the references to the game Hamelin and now test out the game okay so there's the enemies they both have health bars and they take damage the young health bar and yep there you go you can see the falling bodies when one of them dies so they attack each other and when they reach zero yep the flying bodies spawn and there's a blood trail and what's very satisfying alright so now let's make a function in order to spawn multiple units so let's copy our code into its own function and first we're going to combat function and then we're going to use the function periodic which is part of the code monkey Tonys which again was written a long time ago in order to spawn the units every three seconds so let's test and yep there's the first wave and they are attacking any of there's another way and they're all attacking they're all working perfectly fine the units are created either as an enemy or as a friendly and they move towards their target and attack each other all right so that's our mini game it took 15 minutes instead of 10 but the final result is quite nice if all of this can be done in 15 minutes then in one hour we could make some workers gathering goods and very quickly create a sort of Age of Empires prototype so this is a great fun challenge but obviously it's not representative of what game development is like I already know the game design in my head and the time it took to organize all of that is not in within the first 15 minutes but still this whole minigame was first conceived in my head and brought to life in a total of around 4 hours thinking about what game I wanted to make what elements I can reuse how they would interact with each other and so on so if you've seen other videos on this challenge you can probably see a massive difference in what we can accomplish from scratch versus if you already have a nice library of prewritten clean reusable code so let's review all of the reuse code so first of all there's the ebay scene whenever I start a new project I just copy the base in folder that way the camera is already very nicely set up into the exactly as I want to be and it has the cameraphone script that I use pretty much on every project the UI in canvas are also very nice and easily set up so I can easily add something in here and make a UI then I've got a bunch of generic based scripts that serve as a base for whatever I want to do so for example I have one for a character that can aim towards the mouse and move using WASD I have one to click to move to a position something that follows various waypoints and a character that uses a sword so for the assets I already have a bunch of characters from previous games for this game we use the Spartan and the Persians which were first created for hyper Knights balance I also have the worker spreadsheet that I want to add to this project which was made from ninja Tycoon and also have this background sprite in here which was first made for hyper Knights I used various scripts that were created in previous videos first of all the camera follow system which is very simple and very easy to use then the flying body which takes a transform and simply moves them away so it looks like an enemies flying and makes for a very nice effect and the health system which was created in the very first video then the inside of the script that we duplicated the character position movement handler it is named that way simple because it supports receiving a target position and it simply moves toward that position very simple and everything is set up to use my custom animation system that system was created almost two years ago for Hyper Nights and I'm constantly improving it and adding new features so in the meantime I've created a very large library of very animations the ones that I'm using in here for the marine idol and marine wonk these were first used for harbor Knights barrels as were the sword shield Idol and won't which was also used for Hyper Knights balance so there you have it we create the game prototype in just 15 minutes I hope this helped you see the importance in writing clean reusable code and keep adding assets and generic elements to your own personal library to make your future work much easier as long as you can download the project files the new Toni's from unity code monkey comm if you have any questions post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time
