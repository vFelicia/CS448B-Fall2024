With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - in this video we're going to make the
00:03 - adrenaline bar from Assassin's Creed
00:04 - Odyssey and apply it to our previously
00:06 - made adrenaline system let's begin
00:11 - okay so here's the scene I have my
00:13 - player Spartan character and I can move
00:15 - around and there are some enemies that I
00:17 - can attack
00:18 - I can also dodge their attacks when they
00:21 - attack me and I have an adrenaline bar
00:24 - that is currently only visible through
00:25 - this dot which tells me that I have a
00:28 - bar film and if the bar is filmed I can
00:30 - use a special ability which is the
00:33 - Spartan kick so just like that if I have
00:35 - the bar I can use it if I don't then I
00:37 - can't use it
00:41 - adrenaline is gained for each attack for
00:44 - each successful dodge and for each enemy
00:46 - killed so in a previous video we created
00:48 - the adrenaline system but as you saw we
00:51 - can only display if we have at least one
00:53 - bar filmed so currently we cannot see
00:55 - the progress of the current bar being
00:56 - film nor how many totem bars have
00:58 - actually been filmed so you want to
01:00 - create a visual bar to show the progress
01:02 - of our adrenaline system so let's set up
01:04 - the visual UI bar over here in the
01:07 - editor let's go into the UI into the
01:09 - canvas and let's create a new game
01:11 - object and we're going to name this the
01:13 - adrenaline window inside let's make a
01:18 - simple bar which won't be our template
01:19 - that we're going to duplicate to create
01:21 - as many bars as we need so enzyme let's
01:23 - make a new empty game object and here
01:25 - let's call it bar template inside let's
01:29 - add another empty game object for our
01:30 - bar background give it a image component
01:34 - and let's set it to film the parent
01:37 - object so just like that everything on
01:39 - zero okay so this way by modifying the
01:42 - parent size I modify the size of the
01:44 - actual bar background so now inside
01:46 - duplicate the background set at the bar
01:48 - filled let's give it a yellow color like
01:51 - that and let's give it the white pixel
01:54 - texture we need to set texture in order
01:56 - to access the image type so in here we
01:59 - can go from simple and select filled
02:01 - select horizontal and from the left side
02:04 - and this way we have a nice fill amount
02:07 - value that we can change to change how
02:08 - our bar is filled so I change the
02:11 - background to be a dark grey and if
02:13 - that's our bar template so with this
02:15 - setup it is very simple to modify how
02:17 - much of the bar is filmed and by
02:19 - changing the value of the parent we can
02:21 - also modify the actual size of the bar
02:24 - okay so this is our template now let's
02:26 - make the script to control it
02:28 - so let's making you see sharp script and
02:30 - let's name this the adrenaline window
02:33 - drag it on to our window game object and
02:35 - let's open it so in the script
02:37 - first of all let's do a private void
02:40 - awake on our awake let's grab a
02:43 - reference to our bar template so in here
02:45 - make a private transform for the bar
02:48 - templates and we're going to grab this
02:51 - in here by doing transform find our bar
02:54 - template then let's make a private void
02:58 - create bar and this will essentially
03:01 - duplicate the bar template and create a
03:04 - bar so in here let's receive the
03:05 - parameters one vector two for the
03:08 - anchored position and a vector two for
03:11 - our sides so in here duplicate our bar
03:15 - template so instantiate the bar template
03:19 - into this transform so we have the
03:23 - reference to the in Senshi ated bar
03:24 - transform okay then we grab the bar
03:29 - transform get component of type for X
03:31 - transform so this is our rect transform
03:35 - for the far right transform and using
03:38 - this we can set the anchor position to
03:41 - be our anchor position that we received
03:43 - in there and do the same thing for the
03:45 - size Delta equals our size okay so we
03:48 - now I have a function to easily
03:49 - duplicate our template and set the
03:52 - correct anchor position and size the one
03:55 - thing we also need to do is enable the
03:57 - game object since by default the
03:58 - template will be disabled so that the
04:00 - game object that's set active and set it
04:02 - to true so on our awake let's set the
04:06 - template to phone so it isn't visible
04:09 - okay so now on our private voice start
04:12 - we want to create all the bars that the
04:14 - adrenaline system is using so for that
04:17 - first we need to ask the adrenaline
04:19 - system for the bar amount so let's go in
04:22 - here and we're essentially going to need
04:24 - a public static int for the get total
04:28 - bar amount and in here we need to return
04:31 - our bar amount so we could divide
04:34 - nice by the amount per bar or simply
04:36 - just store the bar amount so in here
04:38 - make a private static and for the bar
04:40 - amount and that's what we set in there
04:42 - okay and down here that's simply all
04:44 - we're going to return our bar imma okay
04:47 - so now we can go back into our window
04:49 - and here simply do a four in t10 unless
04:53 - then the adrenaline dot get the total
04:56 - bar amount and increasing let's define a
05:00 - vector to four first of all the bar size
05:02 - so let's set it to a fixed value so
05:07 - let's test 120 and then we have a vector
05:09 - tube for the anchored position which is
05:12 - we're testing let's put them all one
05:14 - above the other so a new vector to let's
05:16 - start off at zero and then go - 30
05:19 - multiplied by the index and then finally
05:23 - we do create our bar using the anchor
05:26 - position and the bar size okay so we are
05:29 - grabbing a reference to our bar template
05:31 - we are setting it to inactive so the bar
05:33 - template is no longer visible then on
05:36 - start we are cycling through on the
05:38 - total bar amount that we ask the
05:40 - adrenaline system and we create a bar
05:42 - using an anchored position one on top of
05:44 - the other and create a bar simply
05:46 - duplicates our bar template and set the
05:49 - correct anchored position and the size
05:51 - dollar okay so we should be able to see
05:53 - two bars one on top of the other and yet
05:55 - there is two bars one on top the other
05:57 - and if we pause we can see that the
05:59 - template is hidden the game object is
06:01 - set to disabled and then we have this
06:04 - bar template which indeed does have 100
06:06 - width and 20 height and is placed on
06:08 - zero zero and this one is on zero minus
06:10 - 30 okay so just a test if everything is
06:13 - working let's go into adrenaline and
06:15 - instead of having two bars let's have
06:16 - four bars and yep now we have four bars
06:19 - okay great so in here on let's make a
06:22 - simple class to handle each bar so down
06:25 - here let's make a private class bar and
06:29 - here we're going to have a public bar
06:31 - constructor and inside we're going to
06:33 - receive a transform for the bar
06:35 - transform and store it internally okay
06:40 - let us also store a reference to our
06:43 - image component so in order to do that
06:45 - let's go here and do using unity engine
06:49 - you why so we can grab an image or the
06:54 - bar image and grab it in here bar image
06:57 - equals our bar transform docket
07:00 - component of type image let's make a
07:03 - public void set size in here let's
07:08 - receive a float for the film amount and
07:11 - we simply set the bar image not film
07:13 - amount to be this film amount and on our
07:16 - constructor let's emphasize initially to
07:19 - 0 F okay so the bar starts off
07:22 - completely empty so we now have this
07:24 - nice simple class to handle each
07:26 - specific bar to keep our code nice and
07:28 - clean so in here let's say this
07:30 - represents a single bar and this code is
07:34 - meant to be on the adrenaline window and
07:36 - not on the adrenaline class and let's
07:38 - copy this from here and put it in here
07:40 - okay now in here on our create Bar
07:43 - function instead of returning void we're
07:46 - going to return a bar and inside we're
07:48 - going to create a bar equals new bar and
07:50 - give it our bar transform and that's
07:53 - what we're going to return ok and now up
07:57 - here on our window let's set a private
08:00 - list of bars for our bar lists
08:02 - instantiated on our start and in here
08:07 - when we create a bar grab the bar
08:10 - reference and add it to our list so this
08:13 - way we have a list containing all the
08:15 - bars that the system is currently using
08:17 - ok so we now have a list of bars and a
08:19 - nice simple class the controller so now
08:21 - it's time to actually fill them up so
08:24 - let's make a private void update and on
08:27 - our update we need to figure out which
08:29 - bar should be completely filled so let's
08:31 - first cycle through all the bars the
08:33 - same thing that we did in here and let's
08:37 - calculate the adrenalin minimum and
08:39 - maximum for this specific bar so we're
08:42 - at the bar bar equals bar own list of in
08:45 - X I and in here let's complete an end
08:48 - for the adrenaline min which won't be
08:51 - essentially this index multiplied by the
08:53 - amount
08:53 - for a bar so it's going to be adrenaline
08:56 - and get the amount per bar then we also
09:00 - define the adrenaline max which won't be
09:05 - the next index multiplied by the amount
09:08 - per bar so I plus 1 multiplied by that
09:11 - okay so essentially the first bar won't
09:13 - have an index of zero so the minimum of
09:15 - the first bar won't be zero and the
09:17 - maximum won't be 1 times the amount per
09:20 - bar which is currently set up to 25 so
09:23 - so 1 times 25 equals 25 so the first bar
09:27 - will represent the adrenaline amount
09:29 - between 0 and 25 so then we ask the
09:32 - adrenaline system to get the adrenaline
09:36 - amount so let's go make this function
09:39 - very simple just in here make a public
09:42 - static int for to get the adrenaline
09:45 - amount and we similarly return key
09:47 - amount so this is the end for the
09:50 - adrenaline amount and then we check if
09:53 - the adrenaline amount if it is under
09:56 - adrenaline min then here the bar is
10:00 - empty so we set the bar that set the
10:04 - size to be zero up if it is not empty
10:08 - then we're going to check if the
10:09 - adrenaline amount if it is bigger than
10:13 - adrenaline max if it is at or above the
10:18 - maximum then the bar is completely home
10:20 - bar is commonly false so we set the bar
10:23 - not set size to be 1f Kamala phone okay
10:26 - if it is not come only empty neither
10:29 - couple like phone that means it's
10:31 - somewhere in the middle bar is filmed so
10:37 - let's grab the remainder amount so we
10:39 - float for the bar middle amount which is
10:42 - our adrenaline amount
10:44 - well it's multiplied by 1/2 to convert
10:46 - it into a float and then get the
10:48 - remainder of the adrenaline dot the
10:51 - amount per bar so if this is for example
10:56 - the second bar then the index will be 1
10:58 - and the next one will be 2 so this bar
11:00 - won't start from 25 going up to 15 so if
11:03 - the adrenaline amount is under 25 then
11:05 - the bar is empty
11:06 - if it is above 50 then the bars come
11:08 - only phone if it is neither then we take
11:11 - the adrenaline amount which let's say
11:13 - it's at 40 so we have 40 divided by the
11:16 - remainder of the amount per bar which is
11:18 - 25 which gives us 15 so using that we
11:21 - can go into the bar dot set the size to
11:24 - be the bar middle amount divided by the
11:27 - adrenaline dot amount per bar all right
11:31 - so that should do it
11:32 - let's test and we should be able to see
11:34 - the bars being filmed okay here I am and
11:36 - there are the bars they are all commonly
11:38 - empty now if I attack the enemy yep the
11:40 - first bar is filling up now it is almost
11:42 - false and only me has another enemy and
11:44 - yep that one is come only foam and you
11:46 - can see the icon that says I have
11:48 - adrenaline now if I spin it by pressing
11:50 - E to do a kick and yep the bar was spent
11:52 - and now another one is spent now I have
11:54 - no adrenaline so I can attack them all
11:56 - and fill all of my bars so let's go on
12:00 - four of them are filled so now I use the
12:02 - kick yep spent one and spent another one
12:05 - and another one and another one and I
12:07 - can't do any more ok great
12:08 - so the logic for our bars is completely
12:10 - working so with the logic warden let's
12:12 - polish it up a bit
12:13 - so first let's set up some color so down
12:16 - here when we are setting the size let's
12:20 - set the bar image not color and change
12:23 - the color based on the size if it is
12:25 - completely filmed it won't be a bright
12:27 - yellow if not it will be a darker yellow
12:29 - so in here if the film amount if it is
12:32 - bigger than or equal to 1 then the bar
12:34 - is commonly fill so we return the
12:36 - complete yellow so let's grab that hex
12:40 - value so in here this is our hex value
12:43 - and let's grab it and here going to the
12:45 - utils class which is part of the code
12:47 - monkey Tonys that you can grab for free
12:49 - from unity code monkey calm so using the
12:52 - code monkey details I just have a
12:54 - function there to get the color from the
12:56 - string and I give it that hexadecimal
12:59 - string which is the pure yellow and if
13:01 - it is not come only form then let's grab
13:03 - another different yellow type so bit
13:06 - darker grab it and that's we're going to
13:09 - use
13:11 - okay so if the bars come only filmed and
13:14 - I see you if it is not completely filmed
13:15 - a darker yellow so let's test okay here
13:19 - I am if I hit yep we got a dark yellow
13:22 - and when it's the only phone you got a
13:23 - bright yellow okay great
13:25 - so normally tell the background as a
13:27 - container for all of our bars so on the
13:30 - editor in here and let's make a new
13:32 - empty this will be the background for
13:34 - the window so add the image component
13:36 - and give it a very dark wearing okay
13:41 - so let's enter it somewhere down here
13:43 - and give it a why their width okay so in
13:47 - code we're going to make sure that
13:48 - whatever number of bars we get they all
13:50 - fit inside of this space so over here on
13:53 - our start let's define a float for the
13:56 - bar padding which will be the space in
13:59 - between bars so let's try with five then
14:02 - a float for the total bar width which
14:05 - won't be on our transform find the
14:08 - background and get the component dive
14:12 - rect transform dot size Delta X and
14:18 - let's also have a vector two for the
14:20 - starting position which will be a new
14:24 - vector to we're going to have zero on
14:27 - the Y and now on the X essential we're
14:29 - going to have minus total bar width
14:31 - divided by 2l and finally we need a
14:34 - float for the per bar width this is the
14:38 - total bar width minus the bar padding
14:42 - multiplied by the get total bar amount
14:45 - from the adrenaline system then the
14:49 - whole thing divided by the number of
14:51 - bars and let's also define the bar size
14:54 - down here and set it to the per bar
14:57 - width and then a height of 20 okay now
15:01 - in here when defining the anchored
15:03 - position let's set it on the starting
15:05 - position which is somewhere on the left
15:08 - side and then we add a vector to on the
15:12 - Y it will be at zero and on the X we're
15:16 - going to essentially multiply the index
15:18 - by the per bar width plus the bar
15:22 - padding
15:23 - if we didn't have the padding the bars
15:25 - would simply be exactly connected to
15:27 - each other and like this there's a
15:28 - little breathing room so let's see it in
15:30 - action and see if all four bars are
15:32 - correctly positioned within the size of
15:34 - our background one last thing is we need
15:36 - to set the anchor to be on the left side
15:39 - of the bar so the bar goes from there
15:40 - okay
15:41 - and yep they appear to be correct on
15:43 - though they are not on top so let's fix
15:45 - the wine in here for the starting
15:47 - position let's set it to the anchored
15:50 - position of the background was our
15:53 - offset of going to the left side so this
15:56 - way the wine should be correct
15:57 - and you we are on four bars correctly
16:00 - displaying within the size let's just
16:02 - increase the padding in the starting
16:04 - position and then everything is working
16:06 - okay and yep there we have four bars on
16:09 - occupying the size the background so by
16:11 - modifying the size we can modify how the
16:13 - bars are placed and as you can see they
16:15 - are all filling up correctly when one is
16:17 - commonly filmed the other one starts and
16:19 - so on everything is filmed and I can use
16:21 - it and I can spend the bars and yep
16:23 - everything works Pirtle so let's s
16:25 - reducing the size instead of a tunnel
16:27 - it's worth 400 so much smaller and see
16:29 - if it's correct and yep still on bars
16:31 - occupying the correct size okay now
16:34 - let's increase it again and on our
16:36 - adrenaline system instead of having four
16:38 - bars let's have five bars and yep we now
16:41 - have five bars occupying that same space
16:43 - and again I can now use the bars and
16:46 - they also work perfectly fine exactly as
16:48 - previously
17:01 - so there you have it we created the
17:04 - adrenaline bar from Assassin's Creed
17:05 - Odyssey we took our previously created
17:07 - adrenaline system and made a visual bar
17:09 - to display all the information needed in
17:11 - the next video we're going to add the
17:13 - bone rush ability as always you can
17:15 - download the project files in assemblies
17:17 - from unity code monkey comm if you have
17:19 - any questions post them in the comments
17:20 - and I'll do my best answer them
17:21 - subscribe for more videos and I'll see
17:23 - you next time

Cleaned transcript:

hello and welcome I'm your code monkey in this video we're going to make the adrenaline bar from Assassin's Creed Odyssey and apply it to our previously made adrenaline system let's begin okay so here's the scene I have my player Spartan character and I can move around and there are some enemies that I can attack I can also dodge their attacks when they attack me and I have an adrenaline bar that is currently only visible through this dot which tells me that I have a bar film and if the bar is filmed I can use a special ability which is the Spartan kick so just like that if I have the bar I can use it if I don't then I can't use it adrenaline is gained for each attack for each successful dodge and for each enemy killed so in a previous video we created the adrenaline system but as you saw we can only display if we have at least one bar filmed so currently we cannot see the progress of the current bar being film nor how many totem bars have actually been filmed so you want to create a visual bar to show the progress of our adrenaline system so let's set up the visual UI bar over here in the editor let's go into the UI into the canvas and let's create a new game object and we're going to name this the adrenaline window inside let's make a simple bar which won't be our template that we're going to duplicate to create as many bars as we need so enzyme let's make a new empty game object and here let's call it bar template inside let's add another empty game object for our bar background give it a image component and let's set it to film the parent object so just like that everything on zero okay so this way by modifying the parent size I modify the size of the actual bar background so now inside duplicate the background set at the bar filled let's give it a yellow color like that and let's give it the white pixel texture we need to set texture in order to access the image type so in here we can go from simple and select filled select horizontal and from the left side and this way we have a nice fill amount value that we can change to change how our bar is filled so I change the background to be a dark grey and if that's our bar template so with this setup it is very simple to modify how much of the bar is filmed and by changing the value of the parent we can also modify the actual size of the bar okay so this is our template now let's make the script to control it so let's making you see sharp script and let's name this the adrenaline window drag it on to our window game object and let's open it so in the script first of all let's do a private void awake on our awake let's grab a reference to our bar template so in here make a private transform for the bar templates and we're going to grab this in here by doing transform find our bar template then let's make a private void create bar and this will essentially duplicate the bar template and create a bar so in here let's receive the parameters one vector two for the anchored position and a vector two for our sides so in here duplicate our bar template so instantiate the bar template into this transform so we have the reference to the in Senshi ated bar transform okay then we grab the bar transform get component of type for X transform so this is our rect transform for the far right transform and using this we can set the anchor position to be our anchor position that we received in there and do the same thing for the size Delta equals our size okay so we now I have a function to easily duplicate our template and set the correct anchor position and size the one thing we also need to do is enable the game object since by default the template will be disabled so that the game object that's set active and set it to true so on our awake let's set the template to phone so it isn't visible okay so now on our private voice start we want to create all the bars that the adrenaline system is using so for that first we need to ask the adrenaline system for the bar amount so let's go in here and we're essentially going to need a public static int for the get total bar amount and in here we need to return our bar amount so we could divide nice by the amount per bar or simply just store the bar amount so in here make a private static and for the bar amount and that's what we set in there okay and down here that's simply all we're going to return our bar imma okay so now we can go back into our window and here simply do a four in t10 unless then the adrenaline dot get the total bar amount and increasing let's define a vector to four first of all the bar size so let's set it to a fixed value so let's test 120 and then we have a vector tube for the anchored position which is we're testing let's put them all one above the other so a new vector to let's start off at zero and then go 30 multiplied by the index and then finally we do create our bar using the anchor position and the bar size okay so we are grabbing a reference to our bar template we are setting it to inactive so the bar template is no longer visible then on start we are cycling through on the total bar amount that we ask the adrenaline system and we create a bar using an anchored position one on top of the other and create a bar simply duplicates our bar template and set the correct anchored position and the size dollar okay so we should be able to see two bars one on top of the other and yet there is two bars one on top the other and if we pause we can see that the template is hidden the game object is set to disabled and then we have this bar template which indeed does have 100 width and 20 height and is placed on zero zero and this one is on zero minus 30 okay so just a test if everything is working let's go into adrenaline and instead of having two bars let's have four bars and yep now we have four bars okay great so in here on let's make a simple class to handle each bar so down here let's make a private class bar and here we're going to have a public bar constructor and inside we're going to receive a transform for the bar transform and store it internally okay let us also store a reference to our image component so in order to do that let's go here and do using unity engine you why so we can grab an image or the bar image and grab it in here bar image equals our bar transform docket component of type image let's make a public void set size in here let's receive a float for the film amount and we simply set the bar image not film amount to be this film amount and on our constructor let's emphasize initially to 0 F okay so the bar starts off completely empty so we now have this nice simple class to handle each specific bar to keep our code nice and clean so in here let's say this represents a single bar and this code is meant to be on the adrenaline window and not on the adrenaline class and let's copy this from here and put it in here okay now in here on our create Bar function instead of returning void we're going to return a bar and inside we're going to create a bar equals new bar and give it our bar transform and that's what we're going to return ok and now up here on our window let's set a private list of bars for our bar lists instantiated on our start and in here when we create a bar grab the bar reference and add it to our list so this way we have a list containing all the bars that the system is currently using ok so we now have a list of bars and a nice simple class the controller so now it's time to actually fill them up so let's make a private void update and on our update we need to figure out which bar should be completely filled so let's first cycle through all the bars the same thing that we did in here and let's calculate the adrenalin minimum and maximum for this specific bar so we're at the bar bar equals bar own list of in X I and in here let's complete an end for the adrenaline min which won't be essentially this index multiplied by the amount for a bar so it's going to be adrenaline and get the amount per bar then we also define the adrenaline max which won't be the next index multiplied by the amount per bar so I plus 1 multiplied by that okay so essentially the first bar won't have an index of zero so the minimum of the first bar won't be zero and the maximum won't be 1 times the amount per bar which is currently set up to 25 so so 1 times 25 equals 25 so the first bar will represent the adrenaline amount between 0 and 25 so then we ask the adrenaline system to get the adrenaline amount so let's go make this function very simple just in here make a public static int for to get the adrenaline amount and we similarly return key amount so this is the end for the adrenaline amount and then we check if the adrenaline amount if it is under adrenaline min then here the bar is empty so we set the bar that set the size to be zero up if it is not empty then we're going to check if the adrenaline amount if it is bigger than adrenaline max if it is at or above the maximum then the bar is completely home bar is commonly false so we set the bar not set size to be 1f Kamala phone okay if it is not come only empty neither couple like phone that means it's somewhere in the middle bar is filmed so let's grab the remainder amount so we float for the bar middle amount which is our adrenaline amount well it's multiplied by 1/2 to convert it into a float and then get the remainder of the adrenaline dot the amount per bar so if this is for example the second bar then the index will be 1 and the next one will be 2 so this bar won't start from 25 going up to 15 so if the adrenaline amount is under 25 then the bar is empty if it is above 50 then the bars come only phone if it is neither then we take the adrenaline amount which let's say it's at 40 so we have 40 divided by the remainder of the amount per bar which is 25 which gives us 15 so using that we can go into the bar dot set the size to be the bar middle amount divided by the adrenaline dot amount per bar all right so that should do it let's test and we should be able to see the bars being filmed okay here I am and there are the bars they are all commonly empty now if I attack the enemy yep the first bar is filling up now it is almost false and only me has another enemy and yep that one is come only foam and you can see the icon that says I have adrenaline now if I spin it by pressing E to do a kick and yep the bar was spent and now another one is spent now I have no adrenaline so I can attack them all and fill all of my bars so let's go on four of them are filled so now I use the kick yep spent one and spent another one and another one and another one and I can't do any more ok great so the logic for our bars is completely working so with the logic warden let's polish it up a bit so first let's set up some color so down here when we are setting the size let's set the bar image not color and change the color based on the size if it is completely filmed it won't be a bright yellow if not it will be a darker yellow so in here if the film amount if it is bigger than or equal to 1 then the bar is commonly fill so we return the complete yellow so let's grab that hex value so in here this is our hex value and let's grab it and here going to the utils class which is part of the code monkey Tonys that you can grab for free from unity code monkey calm so using the code monkey details I just have a function there to get the color from the string and I give it that hexadecimal string which is the pure yellow and if it is not come only form then let's grab another different yellow type so bit darker grab it and that's we're going to use okay so if the bars come only filmed and I see you if it is not completely filmed a darker yellow so let's test okay here I am if I hit yep we got a dark yellow and when it's the only phone you got a bright yellow okay great so normally tell the background as a container for all of our bars so on the editor in here and let's make a new empty this will be the background for the window so add the image component and give it a very dark wearing okay so let's enter it somewhere down here and give it a why their width okay so in code we're going to make sure that whatever number of bars we get they all fit inside of this space so over here on our start let's define a float for the bar padding which will be the space in between bars so let's try with five then a float for the total bar width which won't be on our transform find the background and get the component dive rect transform dot size Delta X and let's also have a vector two for the starting position which will be a new vector to we're going to have zero on the Y and now on the X essential we're going to have minus total bar width divided by 2l and finally we need a float for the per bar width this is the total bar width minus the bar padding multiplied by the get total bar amount from the adrenaline system then the whole thing divided by the number of bars and let's also define the bar size down here and set it to the per bar width and then a height of 20 okay now in here when defining the anchored position let's set it on the starting position which is somewhere on the left side and then we add a vector to on the Y it will be at zero and on the X we're going to essentially multiply the index by the per bar width plus the bar padding if we didn't have the padding the bars would simply be exactly connected to each other and like this there's a little breathing room so let's see it in action and see if all four bars are correctly positioned within the size of our background one last thing is we need to set the anchor to be on the left side of the bar so the bar goes from there okay and yep they appear to be correct on though they are not on top so let's fix the wine in here for the starting position let's set it to the anchored position of the background was our offset of going to the left side so this way the wine should be correct and you we are on four bars correctly displaying within the size let's just increase the padding in the starting position and then everything is working okay and yep there we have four bars on occupying the size the background so by modifying the size we can modify how the bars are placed and as you can see they are all filling up correctly when one is commonly filmed the other one starts and so on everything is filmed and I can use it and I can spend the bars and yep everything works Pirtle so let's s reducing the size instead of a tunnel it's worth 400 so much smaller and see if it's correct and yep still on bars occupying the correct size okay now let's increase it again and on our adrenaline system instead of having four bars let's have five bars and yep we now have five bars occupying that same space and again I can now use the bars and they also work perfectly fine exactly as previously so there you have it we created the adrenaline bar from Assassin's Creed Odyssey we took our previously created adrenaline system and made a visual bar to display all the information needed in the next video we're going to add the bone rush ability as always you can download the project files in assemblies from unity code monkey comm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time
