With timestamps:

00:00 - hello and welcome i'm your code monkey
00:02 - and a while ago i was randomly browsing
00:04 - youtube and came across this video which
00:06 - has quite a lot of views and it's titled
00:08 - i stopped using unity and so should you
00:10 - naturally i clicked on it and watched
00:12 - the whole thing it features some common
00:14 - misconceptions that i've also seen in
00:16 - several comments on reddit so i figured
00:18 - i'd make a video with my thoughts on
00:19 - this topic now of course before i go any
00:21 - further let me start by saying obviously
00:23 - i'm biased towards unity it's what i've
00:26 - been using for almost 10 years it's the
00:27 - tool that allowed me to become an indie
00:29 - game developer
00:30 - back then i was having trouble in
00:32 - college and eventually dropped out so my
00:34 - future wasn't looking too bright so if i
00:35 - hadn't found unity and steam green light
00:37 - didn't happen then my life would be very
00:39 - very different right now so yes i'm
00:41 - definitely a bit biased towards unity
00:43 - but i'll try to be as objective as i can
00:44 - my responses if you think i'm being
00:46 - blind by my bias then please let me know
00:48 - in the comments but at least watch the
00:49 - full video so you hear my arguments it
00:51 - would be great to have this video reach
00:53 - a broader audience to see all of the
00:55 - comments so if you can please hit the
00:56 - like button so youtube promotes this
00:58 - video to reach more people with
00:59 - different perspectives and just to
01:01 - clarify this isn't meant as an attack on
01:03 - the original video everyone is free to
01:05 - have their opinion and use whatever
01:06 - engine you want
01:08 - my opinion on game development is always
01:10 - the same the goal is to make a game the
01:12 - engine is merely the tool so choose
01:14 - whatever tool you want just make sure
01:15 - your choice is based on valid arguments
01:17 - i merely want to clear up some common
01:19 - misconceptions and responding to this
01:21 - video is the perfect way to do that and
01:23 - while a lot of these are misconceptions
01:24 - or misinformation in the end i will give
01:27 - my own thoughts on some valid problems
01:28 - you unity that i think they should and
01:30 - could improve okay so let's hit play i
01:33 - got into game dev four years ago and in
01:35 - 2018 unity was just the thing that
01:38 - everyone used at that time it was truly
01:40 - the best you could get it was beginner
01:42 - friendly enough to learn without
01:44 - experience it could do 2d and 3d games
01:47 - it had a giant user base and heaps of
01:49 - online resources everyone was parading
01:52 - this engine around like it was going to
01:54 - be the golden child of gamedev software
01:56 - but
01:57 - things have changed alright so the video
02:00 - starts off talking about the positives
02:01 - back in 2018.
02:03 - it was very beginner friendly it did
02:05 - both 2d and 3d had a huge community with
02:07 - all of the resources you could possibly
02:09 - need to build any game you want
02:11 - but then supposedly things have changed
02:13 - and this is no longer the case right
02:15 - away i don't see how that's accurate in
02:17 - any way unity still works great in both
02:19 - 2d and 3d it's even better nowadays back
02:22 - when i started 2d had pretty much no
02:24 - tools and making my 2d steam games
02:26 - required quite a lot of tricks nowadays
02:28 - there's mountains of 2d and 3d tools
02:30 - both free and paid the community is
02:33 - bigger than ever which in turn makes it
02:34 - easier for beginners since you have so
02:36 - many places to learn literally anything
02:38 - but let's keep watching the video to see
02:40 - if he explains why things like that
02:42 - i literally cannot work in this thing
02:44 - anymore during my 1 year break from
02:46 - youtube videos i took the time to
02:48 - properly delve into other game engines
02:51 - mainly godot and unreal and i know i'm
02:53 - gonna get destroyed for seeing this but
02:56 - guys unity is objectively bad my biggest
02:58 - issue with this engine hands down is
03:00 - that it's way too bloated if something
03:01 - like unreal engine stays focused on
03:03 - making 3d games and godot stays focused
03:05 - on 2d games
03:07 - unity just says it i'll do what
03:09 - they do but worse and i don't care what
03:12 - people think less is more and here we
03:14 - come up to the first argument which is
03:16 - one that i've heard countless of times
03:18 - and to be honest i really just don't get
03:20 - it essentially pointing out the fact
03:21 - that the engine can do anything and has
03:23 - tons of features they point that out as
03:25 - a negative i generally do not understand
03:28 - this argument if you want to make 2d
03:29 - games then go ahead and use the 2d tools
03:31 - and don't worry about the 3d tools if
03:34 - you want to work on a simple 2d
03:35 - point-and-click game then the fact that
03:37 - the engine also supports something like
03:39 - machine learning that doesn't really
03:40 - negatively affect you at all the fact
03:42 - that the terrain system can be used for
03:43 - making an awesome 3d game like vanheim
03:45 - does not negatively impact your ability
03:47 - to make an awesome 2d side scroller kind
03:49 - of like hollow knight again i seriously
03:51 - just genuinely don't understand this
03:53 - argument but i've heard it countless
03:55 - times in tons of comments in reddit
03:57 - posts the fact that the engine can do so
03:59 - many things is a positive not a negative
04:01 - yes unity has tons of tools and supports
04:04 - an endless amount of use cases
04:05 - everything from simple games to
04:07 - extremely complex games to even things
04:09 - to do with architecture or cars ar vr
04:12 - and so on you can make games for a phone
04:14 - or a watch or a console or a super
04:16 - high-end pc
04:17 - those are really all positives if you
04:19 - want to make a 3d strategy game like
04:21 - dyson sphere program you can do that the
04:24 - fact that unity has tons of 2d tools
04:26 - does not negatively impact you at all so
04:28 - i really honestly do not understand this
04:30 - argument but let's keep watching opening
04:33 - a unity project nowadays feels like a
04:35 - pop quiz why are there three different
04:37 - rendering pipelines for 3d games why are
04:39 - there so many unity versions i gotta
04:40 - keep track of and reinstall every single
04:42 - month okay so now let's go through each
04:44 - point one by one first on the render pi
04:47 - points this is one that i would agree
04:48 - that as a beginner can seem quite
04:50 - confusing but at the same time it is
04:52 - literally a question that can be
04:54 - answered in 30 seconds unity has three
04:56 - rendered pipelines the legacy built-in
04:58 - render pipeline the high definition
05:00 - render pipeline and the universal render
05:02 - pipeline which one you choose you just
05:04 - need to ask yourself a very basic
05:06 - question are you trying to make a game
05:07 - that pushes the limits to its max trying
05:09 - to go for aaa quality and publish the
05:12 - game on consoles or high end pcs if so
05:14 - then go with the high definition render
05:16 - pipeline for literally every other use
05:18 - case go with the universal render
05:20 - pipeline the legacy built-in render
05:22 - pipeline is exactly that it's legacy so
05:24 - you only use it if you have a very
05:26 - specific use case where you absolutely
05:28 - must use it so on this point i
05:30 - understand how for a complete beginner
05:32 - it can seem confusing but the answer is
05:34 - literally just one google search away or
05:36 - if you don't even want that then you
05:38 - really just look at the name the
05:39 - universal render pipeline is universal
05:41 - it runs on anything and the high
05:43 - definition pipeline is if you want high
05:45 - definition so this is one where maybe
05:47 - i'm completely blind with my bias
05:49 - because i just know this but to me it
05:50 - seems like a really simple system
05:52 - and you're also going to use whatever
05:54 - game engine you choose for the next
05:56 - months or years so i really don't see
05:58 - how something you can learn in 30
05:59 - seconds is an issue in any way why are
06:01 - there so many unity versions i gotta
06:03 - keep track of and reinstall every single
06:05 - month then it's the same thing for the
06:07 - versions argument he asks why are there
06:10 - so many unity versions that you have to
06:11 - keep track and reinstall every single
06:13 - month and once again it's quickly
06:15 - answered with a simple google search if
06:17 - you search you might even come across my
06:19 - video on the subject where i literally
06:20 - say the answer in the first 30 seconds
06:23 - unity has three version types you've got
06:25 - long term support or lts tech and
06:28 - preview the quick answer is extremely
06:30 - simple use the latest lts version that's
06:32 - it long term support is the version that
06:34 - supports the maximum stability and the
06:36 - support for two years past its release
06:38 - if you're not working on the bleeding
06:40 - edge of tech then there's no reason for
06:41 - you to be using anything else
06:43 - if you just want to make games you just
06:45 - download the latest lts version it's
06:47 - that simple and then the part where he
06:48 - says you need to reinstall every single
06:50 - month i'm assuming he's referring to the
06:53 - hotfixes versions the first number in
06:55 - the version that one is the ear then
06:57 - you've got the major version number so
06:59 - 0.1 or 0.2 for tech and 0.3 for lts and
07:02 - the last one is the hotfix
07:04 - essentially major versions contain lots
07:06 - of new features lts versions just
07:09 - contain stability updates and hotfixes
07:12 - just contain bug fixes there's a new
07:14 - hotfix version about every two weeks but
07:16 - that's the thing those are hotfixes you
07:18 - don't need them if you're not about to
07:20 - release your game if you're just working
07:22 - during development and you're not
07:23 - encountering any unity bug then just
07:25 - keep using whatever version you already
07:27 - have i literally have not downloaded the
07:29 - unity version in probably about six
07:31 - months and for me i do tons of videos
07:33 - exploring tons of topics rather than
07:35 - working on a single game
07:36 - you can go watch my videos to see that
07:38 - i've used version 2020.3.3
07:40 - in 20 or so videos and then a while ago
07:43 - i updated to 2020.3.12
07:46 - so right now i have just three versions
07:48 - installed i've got a 2021 a 2020 and a
07:51 - 2019
07:52 - so the 21 is for when i explore some
07:54 - more bleeding edge packages then the
07:56 - 2020s where i use normally and the 2019
07:59 - version is because i'm making some
08:00 - assets if i was just making a game i
08:02 - would simply keep the 2020 version and
08:04 - nothing else so the idea that you need
08:06 - to keep dozens of versions especially
08:08 - while working on a single game i mean
08:09 - that's just not correct
08:11 - and again this isn't just in this video
08:13 - i've seen the same sentiment in so many
08:15 - comments so on these two topics
08:16 - regarding render pipelines and versions
08:18 - literally 30 seconds of searching will
08:20 - give you the answer
08:22 - personally when i think about choosing
08:23 - an engine i think about something that i
08:25 - won't be using for many many years so
08:27 - the fact that it takes 30 seconds to
08:29 - learn the specific quirks of operating
08:31 - in any engine it's not just unity unreal
08:34 - godot all of those have their own
08:35 - specific things i really don't see how
08:37 - that tiny amount of time is relevant in
08:39 - the grand scheme of things why have they
08:41 - not after seven years of time still not
08:44 - fixed their basic goddamn text renderer
08:47 - to not look pixelated like it's white uk
08:49 - and no downloadable packages made by
08:52 - third parties are not a solution
08:54 - they're a band-aid like everything else
08:56 - unity offers and then the next point is
08:59 - why haven't they fixed the text render
09:01 - and then he goes on to say downloadable
09:03 - packages made by third parties are not a
09:05 - solution in reference to text mesh pro
09:07 - and again this one is just plain wrong
09:09 - text mesh pro is not a third party
09:11 - package it did start off that way but
09:14 - has been officially integrated into
09:15 - unity for many many years now it's not
09:17 - even downloadable it's one of the
09:19 - built-in packages you'll literally open
09:21 - unity and it's right there by default so
09:23 - no this is not a third party and it's
09:25 - not downloadable
09:26 - the legacy text is still there for
09:28 - legacy reasons once again that's a good
09:30 - thing i can still open up my very first
09:32 - game made all the way back in 2013 and
09:35 - the project still opens because back
09:37 - then i made it using the legacy text and
09:39 - the engine still supports legacy text
09:41 - from what he says in the video he knows
09:43 - that text mesh pro is the better text
09:45 - component and just simply refuses to use
09:47 - it this argument is kind of like
09:48 - intentionally doing things wrong and
09:50 - complaining about it i really don't see
09:51 - how that's a fault of the engine for
09:53 - example did you know that you can still
09:55 - use the legacy animation component
09:57 - instead of the mechanim animation system
09:59 - the legacy one that's the animation
10:01 - system that came with the original unity
10:03 - version which was over 10 years ago and
10:05 - has almost no features compared to
10:07 - magnum and just like text mesh pro they
10:09 - acquired the mechanim animation system
10:11 - and integrated into the engine so if you
10:14 - decide to stubbornly use the unleash the
10:15 - animation component instead of the much
10:17 - more capable mechanism animator then i
10:19 - really don't see how that's the engine's
10:20 - fault and sure lots of unity veterans
10:23 - will ignore this and say that oh just
10:25 - learn this and that do some basic
10:27 - googling but bro
10:29 - beginners don't know this stuff they
10:31 - take up a lot more time to do basic
10:33 - things than you
10:34 - when they open up a new project they
10:36 - want to be able to start one easily then
10:38 - his next comment is kind of pointed
10:40 - exactly at me saying that veterans won't
10:43 - just say google but beginners don't know
10:44 - that stuff and well my response to that
10:47 - isn't that really the whole point of the
10:49 - entire learning process pretty much no
10:51 - one is born with knowledge nobody knows
10:53 - anything at the start and just slowly
10:55 - you learn things that's not even
10:56 - something related to unity that's just
10:58 - the process of learning literally
11:00 - anything
11:01 - for example a couple of years ago i
11:02 - started going to gym i had no idea what
11:05 - was a tricep or a rear delt what on
11:07 - earth was a deadlift and what is the
11:09 - proper form to do a bench press so i can
11:11 - learn anything i start by asking
11:13 - questions just learning things little by
11:15 - little just like you learn literally
11:17 - anything so maybe i'm just
11:19 - misunderstanding his argument but
11:20 - literally anything in the world has a
11:22 - learning process no one is automatically
11:24 - born with knowledge to do anything
11:26 - everyone starts learning from nothing
11:28 - beginners don't know this stuff they
11:31 - take up a lot more time to do basic
11:33 - things than you
11:34 - when they open up a new project they
11:36 - want to be able to start one easily and
11:38 - then it goes on to say when beginners
11:40 - open a new project they want to be able
11:42 - to start easily now if you had made this
11:44 - argument back when i started with unity
11:46 - back in 2013 back then this would have
11:48 - been somewhat correct
11:50 - back then i opened up a blank project
11:52 - and it was up to me to decide what to do
11:54 - there was no guide but nowadays when you
11:57 - first download unity hub it asks you if
11:59 - you are a complete beginner and if so
12:02 - then it automatically downloads the lts
12:04 - version so you don't even need to worry
12:05 - about the various versions and then it
12:08 - shows you all of the various micro games
12:09 - which contain guided tutorials for
12:11 - learning how to work with the engine and
12:13 - they literally allow you to start
12:14 - playing and modifying things in 30
12:16 - seconds and this design philosophy of
12:18 - being a swiss army knife of game engines
12:21 - bleeds into everything else for instance
12:23 - the package manager system let's talk
12:25 - about that so okay
12:27 - when you launch your first project in
12:28 - this engine you have a very bare bones
12:30 - set of features the idea is that users
12:33 - can use this nifty level thing called
12:35 - the package manager to download and
12:37 - install features that they want to keep
12:39 - which fine sure that sounds great i
12:41 - would have zero issues with the package
12:43 - manager whatsoever if it actually worked
12:46 - as advertised remember when i said that
12:48 - this engine has lots of versions to keep
12:49 - track of yeah that extends to the
12:51 - package manager as well because each of
12:53 - those packages that you install to your
12:55 - game have versions that you got to keep
12:56 - on top of as well so whereas the package
12:58 - manager sounds like a great feature on
13:00 - paper in practice this thing turns into
13:04 - such a cluster so quick that oftentimes
13:08 - i see devs just avoid having to use this
13:10 - thing altogether then he talks about the
13:12 - package manager again he points out
13:14 - versions and how packages require
13:16 - different versions and again if this
13:18 - video was made back when the package
13:20 - manager was first launched then at that
13:21 - point that argument was somewhat true
13:24 - back then the package manager showed you
13:26 - absolutely everything so that includes
13:28 - fully polished and stable verified
13:30 - packages but also completely
13:31 - experimental packages but nowadays that
13:34 - is no longer the case by default you
13:36 - only see verified packages you need to
13:38 - actively go into the user settings in
13:40 - order to enable preview packages which
13:42 - again preview packages are on the
13:44 - bleeding edge of tech development and
13:46 - it's meant for advanced users not
13:47 - beginners like he's talking about in
13:49 - this video if you're a beginner and you
13:51 - just downloaded the default lts version
13:53 - that unt hub gave you then you don't
13:55 - even see any invalid or preview packages
13:57 - and when you do become an advanced user
13:59 - then the package manager is great all of
14:00 - the things that unity can do are in
14:02 - separate packages so his dislike of the
14:05 - package manager kind of goes against his
14:07 - first dislike of supposedly being
14:08 - uploaded
14:09 - because of the package manager the
14:11 - engine is not loaded for example when
14:13 - you download unity you won't have the ml
14:15 - agent's package so it has no weight on
14:17 - your project but if in the future you do
14:19 - decide you want to explore machine
14:21 - learning in unity then it's literally
14:22 - just one click away that often times i
14:25 - see devs just avoid having to use this
14:27 - thing altogether
14:29 - and i don't blame them because when
14:30 - you're working on a project for years on
14:32 - end you need to make sure that your
14:33 - engine will not crash on you
14:35 - and speaking of crashes let's talk about
14:37 - those i often joke with my friends that
14:39 - unity has become the adobe of game
14:41 - engines because
14:43 - just like premiere pro my projects would
14:45 - crash so many
14:47 - times that i was seeing error messages
14:49 - in my sleep man but daniel my projects
14:52 - never crashed well you know man good for
14:54 - you because i swear to god that the
14:56 - stability of this software gets more and
14:58 - more fragile by the year maybe i'm alone
15:00 - with this maybe there's something wrong
15:01 - with my system but i don't care i see it
15:04 - how it is and i behave accordingly like
15:06 - i'm not exaggerating guys when i say
15:07 - that the early access build of unreal
15:09 - engine 5 has crashed less on me than the
15:12 - full-time long-term support build of
15:14 - unity i don't know about you guys but
15:16 - when i'm making a game the first thing
15:18 - that i want is stability it's kind of
15:20 - important for me
15:22 - on the subject of crashes it really
15:23 - depends on a per-user basis so for this
15:25 - one literally all i can do is talk about
15:27 - my personal experience which is i've
15:29 - probably had maybe five crashes in the
15:31 - past year and those were when i was
15:33 - playing around with the ml agents
15:35 - package which again is on the leading
15:37 - edge of development and is not intended
15:38 - to be stable i also had maybe one or two
15:41 - crashes when i was playing around with
15:42 - the pro bundle bowling tool that i
15:44 - covered in another video
15:45 - but again that one was marked as
15:47 - experimental so the warning is right
15:48 - there so yes i absolutely cannot say the
15:50 - engine doesn't crash everyone has
15:52 - different hardware different drivers all
15:54 - i can say is speak from my experience
15:56 - and all of the crashes that i had
15:58 - recently they were all related to
16:00 - experimental features i really don't
16:02 - remember the last time i had a crash
16:03 - when just working on a normal game with
16:05 - an lcs version i've been using unity for
16:08 - almost 10 years i've made eight steam
16:10 - games countless prototypes three
16:12 - complete courses and over 500 videos in
16:14 - all that time i've used unity across
16:16 - four or five machines and in all that
16:18 - time i've had maybe 20 or 30 crashes in
16:20 - probably 10 000 hours of usage so yes on
16:22 - this point really all i can do is share
16:24 - my personal experience if you have a
16:26 - different experience then really all i
16:27 - can say is i'm sorry to hear that but
16:29 - look man at the end of the day the unity
16:32 - company doesn't care about game devs
16:33 - anymore then his next point is unity
16:36 - doesn't care it's kind of hard to
16:37 - argument against this one because it's
16:39 - so light on specifics what exactly does
16:41 - he mean by doesn't care does it mean
16:43 - that unity doesn't have new features
16:45 - being added if so you can just browse
16:47 - the change log for any unity version and
16:49 - see there are features being added and
16:51 - tweaked all the time you've got tons of
16:53 - things for tripoli games and things for
16:55 - solo indie devs or maybe don't care
16:57 - means they are focused on things other
16:59 - than games unity does have tons of use
17:01 - cases and games is just one part of it
17:04 - but each team works on different things
17:05 - the game's team continues working on
17:07 - games and the automotive team continues
17:09 - working on automotive features
17:11 - an example of this is a while ago they
17:13 - changed their logo and some people post
17:15 - the obvious comment which is why are
17:17 - they working on changing the logo
17:18 - instead of adding more features to me
17:20 - this was a very strange comment i mean
17:22 - isn't it obvious that different people
17:24 - work on different things the marketing
17:25 - branding team is definitely not the same
17:27 - as the engineering team or maybe by
17:29 - don't care does it mean that the people
17:31 - behind the company don't care about
17:32 - their users i can speak from my personal
17:35 - experience i've met a bunch of people
17:36 - working for unity they were only
17:38 - extremely nice and committed to doing
17:39 - the best they can for example on twitter
17:42 - i'm constantly seeing will talk to
17:43 - people and passing feedback along to the
17:45 - relevant teams they also have a survey
17:47 - program where you can make your voice
17:49 - heard and every once in a while the
17:51 - subreddit gets posed by the official
17:53 - team so i'm not sure exactly what was
17:55 - his argument with saying unity doesn't
17:57 - care but either way i just don't see it
17:59 - with godot being on the rise for 2d game
18:01 - devs and unreal engine 5 completely
18:03 - outclassing them in the 3d department
18:05 - you unity loyalists can cope and see
18:08 - that this fact but
18:09 - while you're busy focusing on 3d render
18:12 - pipelines and version control
18:14 - i'm going to be focused on making my
18:15 - game instead
18:17 - and his final point is apparently unity
18:19 - devs spend their time trying to study
18:21 - render pipelines and version control
18:23 - systems well instead he is spending his
18:25 - time making his game i mean i do video
18:28 - tutorials so my job is to learn things
18:30 - and teach them which means i spend a lot
18:32 - more time dealing with unity than people
18:34 - who just want to make games
18:36 - but even with that the time that i have
18:37 - spent learning render pipelines was a
18:39 - tiny amount pretty much just enough to
18:41 - get them to work
18:42 - the last time that i even had to think
18:44 - about render pipelines was when i wanted
18:46 - to make a see-through effect for my
18:47 - house building system and that wasn't
18:49 - even anything specifically related to
18:51 - urp or agrp it was just learning how to
18:53 - do an effect
18:55 - another example i just recently made a
18:57 - complete minigame the squid game video i
18:59 - spent about 20 hours making that game
19:01 - and in total i think maybe about 10
19:03 - seconds of that were related to making
19:05 - the render pipeline object that's really
19:07 - it so anyways that's the end the video
19:09 - again i've seen so many of these
19:10 - arguments in so many places so i figured
19:12 - i'd share my thoughts on this topic and
19:14 - now this is the time that i wanted to
19:16 - take to mention all the things that i
19:17 - think unity could improve but this video
19:19 - is already super long and i don't want
19:21 - to force myself to cut down on
19:23 - mentioning all the things that i think
19:24 - unt can improve so i'm instead going to
19:27 - make that as a separate video just on
19:29 - that topic and maybe someone from unity
19:31 - will see that one and hopefully improve
19:33 - some of those things so stay tuned for
19:35 - that coming video or if you're from the
19:36 - future check the link description i'm
19:38 - working on editing it right now and
19:40 - again this isn't meant as an attack on
19:42 - the original video everyone is free to
19:44 - have their opinion and use whatever
19:45 - engine you want you can go with unity or
19:48 - godot unreal game maker whatever you
19:50 - want
19:51 - remember that the goal of a game
19:52 - developer is to make games the engine is
19:55 - just the tool you use so choose whatever
19:57 - tool you want
19:58 - but whatever choice you go with make
20:00 - sure it's not based on misinformation or
20:02 - things that are non-issues
20:04 - please do tell me in the comments if you
20:06 - think i'm acting like a blind fanboy or
20:07 - something i see the same arguments over
20:10 - and over again and i just don't see how
20:12 - most of them are valid i'm definitely
20:14 - biased towards unity but i think i'm
20:16 - being objective in my responses but by
20:18 - all means do tell me if you think i'm
20:19 - completely off on my thoughts nothing is
20:21 - perfect but i've been using unity for a
20:23 - very long time and as i see it the
20:25 - engine just keeps getting better and
20:27 - better and i've never come across an
20:28 - idea that i could not make with unity
20:31 - so until that moment comes and if that
20:33 - moment ever comes until then i'm a happy
20:36 - unity user and will continue using it to
20:38 - make my own games for many many years to
20:40 - come alright so this was a very
20:42 - different video from the usual but i
20:43 - hope it was interesting to hear my
20:45 - thoughts on this topic let me know what
20:46 - you think about it in the comments thank
20:48 - you for watching stay tuned for that
20:50 - upcoming video and i'll see you next
20:52 - time
20:53 - [Music]

Cleaned transcript:

hello and welcome i'm your code monkey and a while ago i was randomly browsing youtube and came across this video which has quite a lot of views and it's titled i stopped using unity and so should you naturally i clicked on it and watched the whole thing it features some common misconceptions that i've also seen in several comments on reddit so i figured i'd make a video with my thoughts on this topic now of course before i go any further let me start by saying obviously i'm biased towards unity it's what i've been using for almost 10 years it's the tool that allowed me to become an indie game developer back then i was having trouble in college and eventually dropped out so my future wasn't looking too bright so if i hadn't found unity and steam green light didn't happen then my life would be very very different right now so yes i'm definitely a bit biased towards unity but i'll try to be as objective as i can my responses if you think i'm being blind by my bias then please let me know in the comments but at least watch the full video so you hear my arguments it would be great to have this video reach a broader audience to see all of the comments so if you can please hit the like button so youtube promotes this video to reach more people with different perspectives and just to clarify this isn't meant as an attack on the original video everyone is free to have their opinion and use whatever engine you want my opinion on game development is always the same the goal is to make a game the engine is merely the tool so choose whatever tool you want just make sure your choice is based on valid arguments i merely want to clear up some common misconceptions and responding to this video is the perfect way to do that and while a lot of these are misconceptions or misinformation in the end i will give my own thoughts on some valid problems you unity that i think they should and could improve okay so let's hit play i got into game dev four years ago and in 2018 unity was just the thing that everyone used at that time it was truly the best you could get it was beginner friendly enough to learn without experience it could do 2d and 3d games it had a giant user base and heaps of online resources everyone was parading this engine around like it was going to be the golden child of gamedev software but things have changed alright so the video starts off talking about the positives back in 2018. it was very beginner friendly it did both 2d and 3d had a huge community with all of the resources you could possibly need to build any game you want but then supposedly things have changed and this is no longer the case right away i don't see how that's accurate in any way unity still works great in both 2d and 3d it's even better nowadays back when i started 2d had pretty much no tools and making my 2d steam games required quite a lot of tricks nowadays there's mountains of 2d and 3d tools both free and paid the community is bigger than ever which in turn makes it easier for beginners since you have so many places to learn literally anything but let's keep watching the video to see if he explains why things like that i literally cannot work in this thing anymore during my 1 year break from youtube videos i took the time to properly delve into other game engines mainly godot and unreal and i know i'm gonna get destroyed for seeing this but guys unity is objectively bad my biggest issue with this engine hands down is that it's way too bloated if something like unreal engine stays focused on making 3d games and godot stays focused on 2d games unity just says it i'll do what they do but worse and i don't care what people think less is more and here we come up to the first argument which is one that i've heard countless of times and to be honest i really just don't get it essentially pointing out the fact that the engine can do anything and has tons of features they point that out as a negative i generally do not understand this argument if you want to make 2d games then go ahead and use the 2d tools and don't worry about the 3d tools if you want to work on a simple 2d pointandclick game then the fact that the engine also supports something like machine learning that doesn't really negatively affect you at all the fact that the terrain system can be used for making an awesome 3d game like vanheim does not negatively impact your ability to make an awesome 2d side scroller kind of like hollow knight again i seriously just genuinely don't understand this argument but i've heard it countless times in tons of comments in reddit posts the fact that the engine can do so many things is a positive not a negative yes unity has tons of tools and supports an endless amount of use cases everything from simple games to extremely complex games to even things to do with architecture or cars ar vr and so on you can make games for a phone or a watch or a console or a super highend pc those are really all positives if you want to make a 3d strategy game like dyson sphere program you can do that the fact that unity has tons of 2d tools does not negatively impact you at all so i really honestly do not understand this argument but let's keep watching opening a unity project nowadays feels like a pop quiz why are there three different rendering pipelines for 3d games why are there so many unity versions i gotta keep track of and reinstall every single month okay so now let's go through each point one by one first on the render pi points this is one that i would agree that as a beginner can seem quite confusing but at the same time it is literally a question that can be answered in 30 seconds unity has three rendered pipelines the legacy builtin render pipeline the high definition render pipeline and the universal render pipeline which one you choose you just need to ask yourself a very basic question are you trying to make a game that pushes the limits to its max trying to go for aaa quality and publish the game on consoles or high end pcs if so then go with the high definition render pipeline for literally every other use case go with the universal render pipeline the legacy builtin render pipeline is exactly that it's legacy so you only use it if you have a very specific use case where you absolutely must use it so on this point i understand how for a complete beginner it can seem confusing but the answer is literally just one google search away or if you don't even want that then you really just look at the name the universal render pipeline is universal it runs on anything and the high definition pipeline is if you want high definition so this is one where maybe i'm completely blind with my bias because i just know this but to me it seems like a really simple system and you're also going to use whatever game engine you choose for the next months or years so i really don't see how something you can learn in 30 seconds is an issue in any way why are there so many unity versions i gotta keep track of and reinstall every single month then it's the same thing for the versions argument he asks why are there so many unity versions that you have to keep track and reinstall every single month and once again it's quickly answered with a simple google search if you search you might even come across my video on the subject where i literally say the answer in the first 30 seconds unity has three version types you've got long term support or lts tech and preview the quick answer is extremely simple use the latest lts version that's it long term support is the version that supports the maximum stability and the support for two years past its release if you're not working on the bleeding edge of tech then there's no reason for you to be using anything else if you just want to make games you just download the latest lts version it's that simple and then the part where he says you need to reinstall every single month i'm assuming he's referring to the hotfixes versions the first number in the version that one is the ear then you've got the major version number so 0.1 or 0.2 for tech and 0.3 for lts and the last one is the hotfix essentially major versions contain lots of new features lts versions just contain stability updates and hotfixes just contain bug fixes there's a new hotfix version about every two weeks but that's the thing those are hotfixes you don't need them if you're not about to release your game if you're just working during development and you're not encountering any unity bug then just keep using whatever version you already have i literally have not downloaded the unity version in probably about six months and for me i do tons of videos exploring tons of topics rather than working on a single game you can go watch my videos to see that i've used version 2020.3.3 in 20 or so videos and then a while ago i updated to 2020.3.12 so right now i have just three versions installed i've got a 2021 a 2020 and a 2019 so the 21 is for when i explore some more bleeding edge packages then the 2020s where i use normally and the 2019 version is because i'm making some assets if i was just making a game i would simply keep the 2020 version and nothing else so the idea that you need to keep dozens of versions especially while working on a single game i mean that's just not correct and again this isn't just in this video i've seen the same sentiment in so many comments so on these two topics regarding render pipelines and versions literally 30 seconds of searching will give you the answer personally when i think about choosing an engine i think about something that i won't be using for many many years so the fact that it takes 30 seconds to learn the specific quirks of operating in any engine it's not just unity unreal godot all of those have their own specific things i really don't see how that tiny amount of time is relevant in the grand scheme of things why have they not after seven years of time still not fixed their basic goddamn text renderer to not look pixelated like it's white uk and no downloadable packages made by third parties are not a solution they're a bandaid like everything else unity offers and then the next point is why haven't they fixed the text render and then he goes on to say downloadable packages made by third parties are not a solution in reference to text mesh pro and again this one is just plain wrong text mesh pro is not a third party package it did start off that way but has been officially integrated into unity for many many years now it's not even downloadable it's one of the builtin packages you'll literally open unity and it's right there by default so no this is not a third party and it's not downloadable the legacy text is still there for legacy reasons once again that's a good thing i can still open up my very first game made all the way back in 2013 and the project still opens because back then i made it using the legacy text and the engine still supports legacy text from what he says in the video he knows that text mesh pro is the better text component and just simply refuses to use it this argument is kind of like intentionally doing things wrong and complaining about it i really don't see how that's a fault of the engine for example did you know that you can still use the legacy animation component instead of the mechanim animation system the legacy one that's the animation system that came with the original unity version which was over 10 years ago and has almost no features compared to magnum and just like text mesh pro they acquired the mechanim animation system and integrated into the engine so if you decide to stubbornly use the unleash the animation component instead of the much more capable mechanism animator then i really don't see how that's the engine's fault and sure lots of unity veterans will ignore this and say that oh just learn this and that do some basic googling but bro beginners don't know this stuff they take up a lot more time to do basic things than you when they open up a new project they want to be able to start one easily then his next comment is kind of pointed exactly at me saying that veterans won't just say google but beginners don't know that stuff and well my response to that isn't that really the whole point of the entire learning process pretty much no one is born with knowledge nobody knows anything at the start and just slowly you learn things that's not even something related to unity that's just the process of learning literally anything for example a couple of years ago i started going to gym i had no idea what was a tricep or a rear delt what on earth was a deadlift and what is the proper form to do a bench press so i can learn anything i start by asking questions just learning things little by little just like you learn literally anything so maybe i'm just misunderstanding his argument but literally anything in the world has a learning process no one is automatically born with knowledge to do anything everyone starts learning from nothing beginners don't know this stuff they take up a lot more time to do basic things than you when they open up a new project they want to be able to start one easily and then it goes on to say when beginners open a new project they want to be able to start easily now if you had made this argument back when i started with unity back in 2013 back then this would have been somewhat correct back then i opened up a blank project and it was up to me to decide what to do there was no guide but nowadays when you first download unity hub it asks you if you are a complete beginner and if so then it automatically downloads the lts version so you don't even need to worry about the various versions and then it shows you all of the various micro games which contain guided tutorials for learning how to work with the engine and they literally allow you to start playing and modifying things in 30 seconds and this design philosophy of being a swiss army knife of game engines bleeds into everything else for instance the package manager system let's talk about that so okay when you launch your first project in this engine you have a very bare bones set of features the idea is that users can use this nifty level thing called the package manager to download and install features that they want to keep which fine sure that sounds great i would have zero issues with the package manager whatsoever if it actually worked as advertised remember when i said that this engine has lots of versions to keep track of yeah that extends to the package manager as well because each of those packages that you install to your game have versions that you got to keep on top of as well so whereas the package manager sounds like a great feature on paper in practice this thing turns into such a cluster so quick that oftentimes i see devs just avoid having to use this thing altogether then he talks about the package manager again he points out versions and how packages require different versions and again if this video was made back when the package manager was first launched then at that point that argument was somewhat true back then the package manager showed you absolutely everything so that includes fully polished and stable verified packages but also completely experimental packages but nowadays that is no longer the case by default you only see verified packages you need to actively go into the user settings in order to enable preview packages which again preview packages are on the bleeding edge of tech development and it's meant for advanced users not beginners like he's talking about in this video if you're a beginner and you just downloaded the default lts version that unt hub gave you then you don't even see any invalid or preview packages and when you do become an advanced user then the package manager is great all of the things that unity can do are in separate packages so his dislike of the package manager kind of goes against his first dislike of supposedly being uploaded because of the package manager the engine is not loaded for example when you download unity you won't have the ml agent's package so it has no weight on your project but if in the future you do decide you want to explore machine learning in unity then it's literally just one click away that often times i see devs just avoid having to use this thing altogether and i don't blame them because when you're working on a project for years on end you need to make sure that your engine will not crash on you and speaking of crashes let's talk about those i often joke with my friends that unity has become the adobe of game engines because just like premiere pro my projects would crash so many times that i was seeing error messages in my sleep man but daniel my projects never crashed well you know man good for you because i swear to god that the stability of this software gets more and more fragile by the year maybe i'm alone with this maybe there's something wrong with my system but i don't care i see it how it is and i behave accordingly like i'm not exaggerating guys when i say that the early access build of unreal engine 5 has crashed less on me than the fulltime longterm support build of unity i don't know about you guys but when i'm making a game the first thing that i want is stability it's kind of important for me on the subject of crashes it really depends on a peruser basis so for this one literally all i can do is talk about my personal experience which is i've probably had maybe five crashes in the past year and those were when i was playing around with the ml agents package which again is on the leading edge of development and is not intended to be stable i also had maybe one or two crashes when i was playing around with the pro bundle bowling tool that i covered in another video but again that one was marked as experimental so the warning is right there so yes i absolutely cannot say the engine doesn't crash everyone has different hardware different drivers all i can say is speak from my experience and all of the crashes that i had recently they were all related to experimental features i really don't remember the last time i had a crash when just working on a normal game with an lcs version i've been using unity for almost 10 years i've made eight steam games countless prototypes three complete courses and over 500 videos in all that time i've used unity across four or five machines and in all that time i've had maybe 20 or 30 crashes in probably 10 000 hours of usage so yes on this point really all i can do is share my personal experience if you have a different experience then really all i can say is i'm sorry to hear that but look man at the end of the day the unity company doesn't care about game devs anymore then his next point is unity doesn't care it's kind of hard to argument against this one because it's so light on specifics what exactly does he mean by doesn't care does it mean that unity doesn't have new features being added if so you can just browse the change log for any unity version and see there are features being added and tweaked all the time you've got tons of things for tripoli games and things for solo indie devs or maybe don't care means they are focused on things other than games unity does have tons of use cases and games is just one part of it but each team works on different things the game's team continues working on games and the automotive team continues working on automotive features an example of this is a while ago they changed their logo and some people post the obvious comment which is why are they working on changing the logo instead of adding more features to me this was a very strange comment i mean isn't it obvious that different people work on different things the marketing branding team is definitely not the same as the engineering team or maybe by don't care does it mean that the people behind the company don't care about their users i can speak from my personal experience i've met a bunch of people working for unity they were only extremely nice and committed to doing the best they can for example on twitter i'm constantly seeing will talk to people and passing feedback along to the relevant teams they also have a survey program where you can make your voice heard and every once in a while the subreddit gets posed by the official team so i'm not sure exactly what was his argument with saying unity doesn't care but either way i just don't see it with godot being on the rise for 2d game devs and unreal engine 5 completely outclassing them in the 3d department you unity loyalists can cope and see that this fact but while you're busy focusing on 3d render pipelines and version control i'm going to be focused on making my game instead and his final point is apparently unity devs spend their time trying to study render pipelines and version control systems well instead he is spending his time making his game i mean i do video tutorials so my job is to learn things and teach them which means i spend a lot more time dealing with unity than people who just want to make games but even with that the time that i have spent learning render pipelines was a tiny amount pretty much just enough to get them to work the last time that i even had to think about render pipelines was when i wanted to make a seethrough effect for my house building system and that wasn't even anything specifically related to urp or agrp it was just learning how to do an effect another example i just recently made a complete minigame the squid game video i spent about 20 hours making that game and in total i think maybe about 10 seconds of that were related to making the render pipeline object that's really it so anyways that's the end the video again i've seen so many of these arguments in so many places so i figured i'd share my thoughts on this topic and now this is the time that i wanted to take to mention all the things that i think unity could improve but this video is already super long and i don't want to force myself to cut down on mentioning all the things that i think unt can improve so i'm instead going to make that as a separate video just on that topic and maybe someone from unity will see that one and hopefully improve some of those things so stay tuned for that coming video or if you're from the future check the link description i'm working on editing it right now and again this isn't meant as an attack on the original video everyone is free to have their opinion and use whatever engine you want you can go with unity or godot unreal game maker whatever you want remember that the goal of a game developer is to make games the engine is just the tool you use so choose whatever tool you want but whatever choice you go with make sure it's not based on misinformation or things that are nonissues please do tell me in the comments if you think i'm acting like a blind fanboy or something i see the same arguments over and over again and i just don't see how most of them are valid i'm definitely biased towards unity but i think i'm being objective in my responses but by all means do tell me if you think i'm completely off on my thoughts nothing is perfect but i've been using unity for a very long time and as i see it the engine just keeps getting better and better and i've never come across an idea that i could not make with unity so until that moment comes and if that moment ever comes until then i'm a happy unity user and will continue using it to make my own games for many many years to come alright so this was a very different video from the usual but i hope it was interesting to hear my thoughts on this topic let me know what you think about it in the comments thank you for watching stay tuned for that upcoming video and i'll see you next time
