With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - in the series of creating spider-man in
00:03 - unity today we're going to make some
00:05 - enemies and attack them let's begin
00:10 - all right so here's the scene so far I
00:12 - have my spider-man character I can move
00:14 - them around and he plays attack
00:16 - animation so I click any attacks force a
00:18 - punch then a kick you can also see some
00:21 - particles on the hit position and the
00:24 - camera is following the character all
00:26 - right so now with that let's create an
00:28 - enemy so over here in the code I have
00:30 - the base enemy class and as you can see
00:33 - it is very similar to the base
00:35 - spider-man class I have move animation
00:38 - aisle animation test to see if it's
00:40 - playing the punch or kick animations and
00:42 - I can play the punch or kick animation
00:44 - those are the same as on the Spiderman
00:47 - base and the only difference is in here
00:49 - we have a play hit animation this is the
00:52 - animation that is meant to be played
00:53 - whenever the enemy is hit so let's first
00:56 - make our enemy script in the same way we
00:58 - set up our spider-man script so let's
01:00 - create a new C sharp script and name it
01:02 - enemy inside this won't be set up much
01:05 - like our spider-man class so first let's
01:08 - go up here make a private field for the
01:10 - enemy base enemy base and we're going to
01:14 - grab it on the private Lloyd awake so
01:16 - we're at the enemy base equals game
01:18 - object I get component of type enemy
01:21 - base ok so we now have a reference to
01:25 - our base script now let's create the
01:27 - prefab that won't be used to spawn an
01:29 - enemy so back into our editor in here
01:32 - let's duplicate the spider-man game
01:33 - object since the enemy won't have the
01:35 - same composition we have a main game
01:38 - object then we got the body which
01:40 - contains the mesh that is used by the
01:41 - animation system and a shadow which is
01:43 - just a simple sprite so the difference
01:46 - is in here instead of using the
01:48 - spider-man material that contains the
01:49 - spider-man spreadsheet let's use the
01:51 - enemy spreadsheet and on the main game
01:54 - object let's remove these to add the
01:57 - enemy base and then the enemy script all
02:00 - right so now we can go up here and
02:01 - create a new prefab let's name it PF
02:04 - enemy and drag the game object onto it
02:06 - alright so we now have our enemy prefab
02:09 - now let's run the game and see if our
02:10 - enemy shows up so let's just move him in
02:13 - there and see and yep there he is the
02:15 - enemy just standing around ok so now
02:17 - first let's create a function to spawn
02:19 - the enemies so let's go into our enemy
02:21 - class
02:22 - and up here let's make a public static
02:26 - enemy create function this won't be
02:29 - responsible for instantiating a new
02:31 - enemy and here we're going to receive a
02:33 - vector3 for the spawns position and
02:36 - inside let's instantiate the enemy
02:40 - prefab now in order to do that we need a
02:43 - reference to that prefab so as a helper
02:46 - let's go back into our code and make a
02:48 - new C sharp script called game assets
02:51 - this will essentially be our container
02:53 - for the references that we need let's
02:56 - make a new game object and name it game
02:59 - assets and drag the script onto it so
03:01 - here on the game assets script let's
03:03 - clean this up and we're going to have a
03:06 - public static game assets for our
03:08 - instance let's make a private void awake
03:11 - to set our instance equals this and then
03:14 - we're going to have a bunch of public
03:16 - fields for everything that we need so in
03:18 - this case a only transform for the PF
03:20 - enemy ok so now back in the editor we
03:23 - can see that the script has a public
03:26 - field for our enemy prefab and we can
03:28 - now drag it onto there ok so now we can
03:31 - go back to the enemy class and in here
03:33 - on the insensate we can go into the game
03:35 - assets dot instance and access the EPF
03:39 - enemy prefab all right so let's spawn it
03:42 - on the spawn position and with
03:44 - quaternion dot identity ok so this won't
03:47 - be our enemy transform that is
03:49 - insensitive
03:50 - okay now let's just grab a reference to
03:54 - the enemy script which is on the enemy
03:56 - transform getcomponent of type enemy and
03:59 - then return the enemy script all right
04:01 - so we now have a function to spawn
04:03 - enemies in order to test it let's go
04:05 - into the game handler and in here and
04:07 - let's spawn a bunch of enemies so we're
04:10 - going to do it on private void start
04:11 - which happens after all the awakes
04:13 - alright now in order to spawn a bunch of
04:16 - enemies let's use the function periodic
04:19 - which is part of the code mock utilities
04:21 - that you can grab for free from Unity
04:22 - code monkey calm so in here let's create
04:25 - a function that won't be triggered I've
04:27 - written let's say 2 seconds so the
04:29 - function that won't be triggered will
04:31 - execute the enemy dot create and let's
04:35 - create them in a
04:36 - position around spider-man so get the
04:38 - spider-man dot yet physician was a youth
04:43 - elastic get random dear so we get a
04:46 - random direction and multiply it by and
04:48 - let's say ATF okay so every two seconds
04:51 - a enemy won't be created on a random
04:54 - position within 80 units of spider-man
04:57 - so let's see that and yep there you go
05:00 - that one was spawn no that one was phone
05:02 - and as you can see we are now correctly
05:04 - spawning enemies in their correct
05:07 - position all right so now that we have
05:09 - our enemies being spawn let's make them
05:11 - attack them all so on the enemy script
05:13 - and here we need a function for the
05:15 - enemy to get hit so let's make a public
05:18 - void call it damage and in here we're
05:21 - going to receive a vector3 for the
05:23 - attacker position now in this function
05:27 - we're going to play the hit animation so
05:29 - first let's comment late the vector3 of
05:31 - the dear to attacker which will be the
05:35 - attacker position mine is our position
05:38 - so let's make down here a public factor
05:41 - 3 just a helper function called get
05:43 - position and tone return our transform
05:46 - dot position okay so to come with the
05:49 - direction it's the attacker position
05:51 - minus this position normalize alright so
05:53 - we now have the direction and using that
05:56 - direction we can now play the animation
05:57 - so we go into the enemy base and play
06:00 - the hit animation towards the direction
06:03 - to attacker and when it is complete
06:07 - let's go back to play the enemy base not
06:10 - play the idle animation alright so when
06:13 - we call this function we calculate the
06:14 - direction towards the attacker we use
06:16 - that direction to play the correct
06:17 - animation and when the animation is
06:20 - complete we go back to idle so let's see
06:22 - if that is correct so to test it let's
06:24 - go into the game Handler and in here
06:27 - instead of creating one every second
06:29 - let's just create one for easy testing
06:31 - so now I'm here only to an enemy dot
06:33 - create we're going to spawn him let's
06:36 - say on the right side so on 30 0 we're
06:39 - have that enemy reference and now let's
06:42 - make a function periodic that won't
06:45 - trigger the enemy
06:47 - that damage from the spider-man yet
06:50 - position and trigger that damage every
06:53 - second alright so in here we are
06:55 - spawning a new enemy on the right side
06:58 - then we are creating a function that
07:00 - won't trigger every second every second
07:02 - it won't damage the enemy using the
07:04 - Spider Man as the attacker position so
07:07 - he should be playing the hit animation
07:08 - every second towards spider-man let's
07:11 - see if that is behaving correctly there
07:13 - he is and yep as you can see he is
07:15 - correctly playing the hit animation and
07:17 - if I move them around you can see the
07:19 - direction is being correctly calculated
07:21 - alright so now let's make spider-man be
07:25 - the one to actually cause damage let's
07:27 - go first into game Handler and comment
07:29 - out this code but leave the enemy as
07:31 - being spawned now let's go into the
07:33 - spider-man script let's go down into the
07:35 - handle attack function and in here after
07:38 - we click on the left mouse button let's
07:41 - first define a vector3 Attack Position
07:44 - and by default this will be the get
07:48 - Mouse world position alright now in here
07:52 - we want to check if there's an enemy
07:54 - nearby this attack position so in order
07:56 - to do that we are going to ask the enemy
07:58 - class so we are going to have an enemy
08:01 - for the enemy that is nearby that
08:03 - position and we're going to ask the
08:05 - enemy class to get the closest enemy
08:08 - so let's going to the script and make
08:10 - that function so up here let's make a
08:13 - public static enemy get closest enemy
08:17 - we're going to receive a vector3 for the
08:20 - position and a float for the max range
08:22 - now in order to look for the closest
08:25 - enemy first we need a list of enemies so
08:27 - we need to create a private static list
08:30 - of enemy for our enemy list and on awake
08:38 - let's simply add this enemy to the enemy
08:41 - list alright good so now we can go in
08:44 - here only get Moses enemy first define a
08:46 - variable for the closest enemy instead
08:49 - of two no and this is what we're going
08:50 - to return so in here we're going to do
08:54 - for each and cycle through every enemy
08:57 - the enemy list in here the first thing
09:01 - we're going to do is check if the enemy
09:02 - is within the valid range so if the
09:04 - vector3 that distance between the
09:08 - position and the enemy target position
09:10 - if the distance between these two is
09:12 - less than or equal to the max range then
09:15 - this is a valid enemy if so then we
09:17 - check if the closest equals no then that
09:21 - means we don't have defined a closest
09:23 - enemy yet so we set this one close this
09:25 - sequence this enemy all right if not if
09:29 - we already have a closest enemy then we
09:31 - want to calculate which one is actually
09:33 - the closest so we do an if vector three
09:37 - the distance between the position and
09:41 - this enemy that get position if this one
09:45 - is closer than the vector 3 dot distance
09:47 - between the position and the closest
09:51 - that get position so if this enemy is
09:53 - closer than the previous closest then we
09:55 - set the causes to be this enemy all
09:58 - right that's a very simple script for
10:00 - calculating the closest enemy so with
10:02 - this function setup and correctly
10:03 - returning the closest enemy to a certain
10:06 - position we can now go back into our
10:08 - spiderman script and in here we can grab
10:11 - the closest enemy we give it our
10:13 - position and a max range of let's say 20
10:17 - F and then we check if enemy is not know
10:20 - then that means there is an enemy within
10:23 - range that we can attack so instead of
10:25 - setting the Attack Position to the
10:27 -  position let's set the attack
10:28 - position could be the actual enemy gebt
10:31 - position and we can actually do enemy
10:34 - damage and damage the enemy and give it
10:36 - the attacker position which is this
10:38 - position right here and when commonly in
10:41 - the attack direction instead of using
10:42 - the mouse position use the attack
10:44 - position all right so first by default
10:47 - we set the attack position to be the
10:49 - mouse war on position then we check if
10:51 - there is an enemy near our position if
10:53 - there is an enemy then we set the attack
10:55 - position to be that enemy position and
10:57 - we damage the enemy using our position
10:59 - all right so let's s and we should be
11:01 - able to attack the enemy all right so
11:03 - here's spider-man there's the enemy and
11:05 - if I go in here and I attack out here
11:07 - you can see nothing happens the attacks
11:10 - are perfectly normal
11:11 - heading towards the mouse okay and now
11:13 - if I go near the enemy and I attack yep
11:16 - there you go he was damn and she played
11:18 - the damaged animation so now for testing
11:20 - let's spawn another enemy so we now
11:26 - should have two enemies so let's see and
11:29 - now if I go in the middle of both of
11:31 - them he won't choose one and attack them
11:33 - now this as you can see is not a
11:35 - certainly ideal we want to give a
11:36 - priority to the enemy that is closer to
11:38 - the mouse position not just the generic
11:40 - spider-man position so let's do that so
11:43 - in here on the spider-man instead of
11:45 - looking for the closest to this position
11:47 - let's do for the closest to the mouse
11:49 - position now here I am I go into the
11:53 - middle of both of these enemies and if I
11:55 - click on this side yep I walk on to that
11:58 - enemy and I hit him and if I click on
12:00 - this one yep you know welcome to that
12:01 - one and you hit that one so I can now
12:03 - easily switch targets and hit one hit
12:05 - the other one so there you have it we
12:07 - created some enemies made a function to
12:09 - spawn them and attack the closest one
12:11 - using our spider-man in the next video
12:13 - we're going to setup enemy health so we
12:15 - can actually kill them as always you can
12:17 - download the project files in utilities
12:18 - from unity code monkey comm if you have
12:21 - any questions post them in the comments
12:22 - and I'll do my best to answer them
12:23 - subscribe for more videos and I'll see
12:25 - you next time

Cleaned transcript:

hello and welcome I'm your code monkey in the series of creating spiderman in unity today we're going to make some enemies and attack them let's begin all right so here's the scene so far I have my spiderman character I can move them around and he plays attack animation so I click any attacks force a punch then a kick you can also see some particles on the hit position and the camera is following the character all right so now with that let's create an enemy so over here in the code I have the base enemy class and as you can see it is very similar to the base spiderman class I have move animation aisle animation test to see if it's playing the punch or kick animations and I can play the punch or kick animation those are the same as on the Spiderman base and the only difference is in here we have a play hit animation this is the animation that is meant to be played whenever the enemy is hit so let's first make our enemy script in the same way we set up our spiderman script so let's create a new C sharp script and name it enemy inside this won't be set up much like our spiderman class so first let's go up here make a private field for the enemy base enemy base and we're going to grab it on the private Lloyd awake so we're at the enemy base equals game object I get component of type enemy base ok so we now have a reference to our base script now let's create the prefab that won't be used to spawn an enemy so back into our editor in here let's duplicate the spiderman game object since the enemy won't have the same composition we have a main game object then we got the body which contains the mesh that is used by the animation system and a shadow which is just a simple sprite so the difference is in here instead of using the spiderman material that contains the spiderman spreadsheet let's use the enemy spreadsheet and on the main game object let's remove these to add the enemy base and then the enemy script all right so now we can go up here and create a new prefab let's name it PF enemy and drag the game object onto it alright so we now have our enemy prefab now let's run the game and see if our enemy shows up so let's just move him in there and see and yep there he is the enemy just standing around ok so now first let's create a function to spawn the enemies so let's go into our enemy class and up here let's make a public static enemy create function this won't be responsible for instantiating a new enemy and here we're going to receive a vector3 for the spawns position and inside let's instantiate the enemy prefab now in order to do that we need a reference to that prefab so as a helper let's go back into our code and make a new C sharp script called game assets this will essentially be our container for the references that we need let's make a new game object and name it game assets and drag the script onto it so here on the game assets script let's clean this up and we're going to have a public static game assets for our instance let's make a private void awake to set our instance equals this and then we're going to have a bunch of public fields for everything that we need so in this case a only transform for the PF enemy ok so now back in the editor we can see that the script has a public field for our enemy prefab and we can now drag it onto there ok so now we can go back to the enemy class and in here on the insensate we can go into the game assets dot instance and access the EPF enemy prefab all right so let's spawn it on the spawn position and with quaternion dot identity ok so this won't be our enemy transform that is insensitive okay now let's just grab a reference to the enemy script which is on the enemy transform getcomponent of type enemy and then return the enemy script all right so we now have a function to spawn enemies in order to test it let's go into the game handler and in here and let's spawn a bunch of enemies so we're going to do it on private void start which happens after all the awakes alright now in order to spawn a bunch of enemies let's use the function periodic which is part of the code mock utilities that you can grab for free from Unity code monkey calm so in here let's create a function that won't be triggered I've written let's say 2 seconds so the function that won't be triggered will execute the enemy dot create and let's create them in a position around spiderman so get the spiderman dot yet physician was a youth elastic get random dear so we get a random direction and multiply it by and let's say ATF okay so every two seconds a enemy won't be created on a random position within 80 units of spiderman so let's see that and yep there you go that one was spawn no that one was phone and as you can see we are now correctly spawning enemies in their correct position all right so now that we have our enemies being spawn let's make them attack them all so on the enemy script and here we need a function for the enemy to get hit so let's make a public void call it damage and in here we're going to receive a vector3 for the attacker position now in this function we're going to play the hit animation so first let's comment late the vector3 of the dear to attacker which will be the attacker position mine is our position so let's make down here a public factor 3 just a helper function called get position and tone return our transform dot position okay so to come with the direction it's the attacker position minus this position normalize alright so we now have the direction and using that direction we can now play the animation so we go into the enemy base and play the hit animation towards the direction to attacker and when it is complete let's go back to play the enemy base not play the idle animation alright so when we call this function we calculate the direction towards the attacker we use that direction to play the correct animation and when the animation is complete we go back to idle so let's see if that is correct so to test it let's go into the game Handler and in here instead of creating one every second let's just create one for easy testing so now I'm here only to an enemy dot create we're going to spawn him let's say on the right side so on 30 0 we're have that enemy reference and now let's make a function periodic that won't trigger the enemy that damage from the spiderman yet position and trigger that damage every second alright so in here we are spawning a new enemy on the right side then we are creating a function that won't trigger every second every second it won't damage the enemy using the Spider Man as the attacker position so he should be playing the hit animation every second towards spiderman let's see if that is behaving correctly there he is and yep as you can see he is correctly playing the hit animation and if I move them around you can see the direction is being correctly calculated alright so now let's make spiderman be the one to actually cause damage let's go first into game Handler and comment out this code but leave the enemy as being spawned now let's go into the spiderman script let's go down into the handle attack function and in here after we click on the left mouse button let's first define a vector3 Attack Position and by default this will be the get Mouse world position alright now in here we want to check if there's an enemy nearby this attack position so in order to do that we are going to ask the enemy class so we are going to have an enemy for the enemy that is nearby that position and we're going to ask the enemy class to get the closest enemy so let's going to the script and make that function so up here let's make a public static enemy get closest enemy we're going to receive a vector3 for the position and a float for the max range now in order to look for the closest enemy first we need a list of enemies so we need to create a private static list of enemy for our enemy list and on awake let's simply add this enemy to the enemy list alright good so now we can go in here only get Moses enemy first define a variable for the closest enemy instead of two no and this is what we're going to return so in here we're going to do for each and cycle through every enemy the enemy list in here the first thing we're going to do is check if the enemy is within the valid range so if the vector3 that distance between the position and the enemy target position if the distance between these two is less than or equal to the max range then this is a valid enemy if so then we check if the closest equals no then that means we don't have defined a closest enemy yet so we set this one close this sequence this enemy all right if not if we already have a closest enemy then we want to calculate which one is actually the closest so we do an if vector three the distance between the position and this enemy that get position if this one is closer than the vector 3 dot distance between the position and the closest that get position so if this enemy is closer than the previous closest then we set the causes to be this enemy all right that's a very simple script for calculating the closest enemy so with this function setup and correctly returning the closest enemy to a certain position we can now go back into our spiderman script and in here we can grab the closest enemy we give it our position and a max range of let's say 20 F and then we check if enemy is not know then that means there is an enemy within range that we can attack so instead of setting the Attack Position to the position let's set the attack position could be the actual enemy gebt position and we can actually do enemy damage and damage the enemy and give it the attacker position which is this position right here and when commonly in the attack direction instead of using the mouse position use the attack position all right so first by default we set the attack position to be the mouse war on position then we check if there is an enemy near our position if there is an enemy then we set the attack position to be that enemy position and we damage the enemy using our position all right so let's s and we should be able to attack the enemy all right so here's spiderman there's the enemy and if I go in here and I attack out here you can see nothing happens the attacks are perfectly normal heading towards the mouse okay and now if I go near the enemy and I attack yep there you go he was damn and she played the damaged animation so now for testing let's spawn another enemy so we now should have two enemies so let's see and now if I go in the middle of both of them he won't choose one and attack them now this as you can see is not a certainly ideal we want to give a priority to the enemy that is closer to the mouse position not just the generic spiderman position so let's do that so in here on the spiderman instead of looking for the closest to this position let's do for the closest to the mouse position now here I am I go into the middle of both of these enemies and if I click on this side yep I walk on to that enemy and I hit him and if I click on this one yep you know welcome to that one and you hit that one so I can now easily switch targets and hit one hit the other one so there you have it we created some enemies made a function to spawn them and attack the closest one using our spiderman in the next video we're going to setup enemy health so we can actually kill them as always you can download the project files in utilities from unity code monkey comm if you have any questions post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time
