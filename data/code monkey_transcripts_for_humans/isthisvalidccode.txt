With timestamps:

00:00 - so is this valid code so simple yes or
00:01 - no question we've got a string State
00:03 - we've got the health and we're checking
00:05 - if the health is above zero then we've
00:06 - got alive or dead so let's go everyone
00:09 - thinks that it's a let's see if it is a
00:11 - and Yep this one is indeed Val for some
00:13 - of you if you don't know this this
00:15 - format this syntax it might seem strange
00:16 - it might seem this is not valid but Yep
00:18 - this is indeed valid this is the if
00:20 - shorthand or technically known the tary
00:23 - conditional operator we have up here is
00:25 - perfectly valid code and it's literally
00:26 - exactly the same thing that we have down
00:28 - here so we Define a string State and if
00:29 - the is above zero then we set the state
00:31 - into alive if not we set the state into
00:33 - dead and this can be really useful in
00:35 - certain simple scenarios however it's
00:37 - usual don't abuse it I mean technically
00:39 - you can make a ton of these all over the
00:41 - place and at that point it becomes super
00:44 - compact but also super difficult to read
00:46 - so basically as always you should never
00:48 - ever sacrifice code readability for
00:50 - compactness you should always value
00:51 - making your code readable easy to
00:53 - understand do that first and then
00:55 - secondly you can try to make it compact
00:57 - if it is just as readable as without it

Cleaned transcript:

so is this valid code so simple yes or no question we've got a string State we've got the health and we're checking if the health is above zero then we've got alive or dead so let's go everyone thinks that it's a let's see if it is a and Yep this one is indeed Val for some of you if you don't know this this format this syntax it might seem strange it might seem this is not valid but Yep this is indeed valid this is the if shorthand or technically known the tary conditional operator we have up here is perfectly valid code and it's literally exactly the same thing that we have down here so we Define a string State and if the is above zero then we set the state into alive if not we set the state into dead and this can be really useful in certain simple scenarios however it's usual don't abuse it I mean technically you can make a ton of these all over the place and at that point it becomes super compact but also super difficult to read so basically as always you should never ever sacrifice code readability for compactness you should always value making your code readable easy to understand do that first and then secondly you can try to make it compact if it is just as readable as without it
