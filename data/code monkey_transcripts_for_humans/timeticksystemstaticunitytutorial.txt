With timestamps:

00:00 - hello and welcome I'm your code monkey
00:02 - and in this video we're going to take
00:03 - our time tech system and clean it up a
00:05 - bit let's get started
00:09 - alright so in the previous video we
00:11 - created the time.take system after a
00:13 - certain amount of time it fires a take
00:15 - event which any object can subscribe to
00:17 - we have some buildings that I can
00:20 - collect to spawn a building and the
00:22 - building subscribes to the tick event to
00:23 - handle the construction time C&C goes up
00:26 - gets constructed all of that is handled
00:28 - by the tech event now let's make our
00:30 - system more robust by automatically
00:32 - creating the game object and adding some
00:35 - static accessors so let's first create a
00:37 - sub class to handle the mono behavior so
00:40 - down here let's make a private class
00:43 - time to system object which will
00:47 - implement model behavior inside let's
00:51 - copy the awake and update code in here
00:54 - let's also copy the tick timer but leave
00:57 - the tick outside of it we're going to
01:00 - make the tick static and on the awake in
01:04 - here just for testing let's do a game
01:07 - object add component of the time take
01:10 - system object alright so let's test and
01:13 - everything should be working exactly the
01:15 - same yep there you go still firing ticks
01:17 - everything's fine
01:18 - so now let's make the time take system a
01:20 - static class and remove the amount of
01:22 - behavior so up here make it static and
01:26 - remove mono behavior without amount of
01:28 - behavior we do not have the awake so
01:31 - we're going to have a create function
01:33 - that will automatically deal with
01:35 - creating the game object if necessary
01:37 - let's make a public static void create
01:41 - and we're going to have to store a
01:44 - static game object for the time tech
01:47 - system game object on the create if the
01:52 - time texas and game object if it is
01:55 - known so if it does not exist then we're
01:58 - going to make it a new game object and
02:02 - give it the name time ticket system and
02:06 - we're going to add the component of the
02:09 - time text system object alright so now
02:13 - on our game handler let's make sure to
02:15 - initialize the time tech system so the
02:18 - translate system that creates
02:21 - and here and finally we're going to go
02:25 - into our scene and we can now delete
02:27 - this game object since the time tech
02:29 - system will automatically take care of
02:31 - in Senshi ating its own game object when
02:33 - needed
02:34 - all right so let's test and yep there
02:37 - you go it takes our stone being fired
02:39 - and everything is working fine and if we
02:43 - pause the scene in here
02:44 - you can see that the time six system the
02:47 - game object was automatically created
02:48 - all right so now just for a helper
02:51 - function let's add in here make a public
02:56 - static int get tick to return the
02:59 - current tick and on the game handler on
03:03 - the pop-up instead of using the tick
03:04 - from the event args let's go into the
03:07 - time take system and get the current
03:09 - tick so IT if we're still seeing the
03:13 - same ticks and there you go one two
03:15 - three four five everything is working
03:17 - perfectly fine so there you have it we
03:20 - took our time take system and cleaned up
03:21 - the code to automatically create the
03:23 - game object when needed and hide the
03:25 - update implementation our class is now
03:28 - very clean and only exposes the
03:30 - necessary functions if you have any
03:32 - questions post them in the comments and
03:33 - I'll do my best answer them subscribe
03:35 - for more videos and I'll see you next
03:37 - time
03:48 - you

Cleaned transcript:

hello and welcome I'm your code monkey and in this video we're going to take our time tech system and clean it up a bit let's get started alright so in the previous video we created the time.take system after a certain amount of time it fires a take event which any object can subscribe to we have some buildings that I can collect to spawn a building and the building subscribes to the tick event to handle the construction time C&C goes up gets constructed all of that is handled by the tech event now let's make our system more robust by automatically creating the game object and adding some static accessors so let's first create a sub class to handle the mono behavior so down here let's make a private class time to system object which will implement model behavior inside let's copy the awake and update code in here let's also copy the tick timer but leave the tick outside of it we're going to make the tick static and on the awake in here just for testing let's do a game object add component of the time take system object alright so let's test and everything should be working exactly the same yep there you go still firing ticks everything's fine so now let's make the time take system a static class and remove the amount of behavior so up here make it static and remove mono behavior without amount of behavior we do not have the awake so we're going to have a create function that will automatically deal with creating the game object if necessary let's make a public static void create and we're going to have to store a static game object for the time tech system game object on the create if the time texas and game object if it is known so if it does not exist then we're going to make it a new game object and give it the name time ticket system and we're going to add the component of the time text system object alright so now on our game handler let's make sure to initialize the time tech system so the translate system that creates and here and finally we're going to go into our scene and we can now delete this game object since the time tech system will automatically take care of in Senshi ating its own game object when needed all right so let's test and yep there you go it takes our stone being fired and everything is working fine and if we pause the scene in here you can see that the time six system the game object was automatically created all right so now just for a helper function let's add in here make a public static int get tick to return the current tick and on the game handler on the popup instead of using the tick from the event args let's go into the time take system and get the current tick so IT if we're still seeing the same ticks and there you go one two three four five everything is working perfectly fine so there you have it we took our time take system and cleaned up the code to automatically create the game object when needed and hide the update implementation our class is now very clean and only exposes the necessary functions if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time you
