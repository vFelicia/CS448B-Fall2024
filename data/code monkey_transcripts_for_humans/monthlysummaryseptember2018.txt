With timestamps:

00:00 - hello and welcome I am your code monkey
00:01 - and in this video we're going to review
00:02 - all the videos published in September
00:04 - 2018 let's begin
00:09 - so September started off with a
00:10 - conclusion of the task system in
00:12 - battleground tycoon this series is
00:14 - focused on making a system where you can
00:16 - create tasks to do various things and
00:19 - workers to execute them when possible
00:20 - the video this month can hold the series
00:23 - by creating two different systems
00:25 - working in tandem each system has its
00:27 - own different task types and the workers
00:29 - execute them differently one system is
00:32 - responsible for grabbing items from the
00:34 - floor and placing them in an item slot
00:36 - the other system grabs items from the
00:38 - slots and sends them away each system is
00:40 - completely independent of the other this
00:43 - concludes the task system as is used in
00:45 - battle royale Tycoon I hope you learned
00:48 - something and finally use for it in your
00:49 - own games then there was a very beginner
00:52 - focused video covering what is a
00:54 - component and how it relates to model
00:56 - behavior I've done several beginner
00:58 - focus videos covering the basics of
01:00 - unity so if you're new check out the
01:01 - unity basics playlist also start a new
01:04 - series making spider-man in unity 2d
01:07 - I've been playing the game on a ps4 and
01:09 - it does a lot of things very well so in
01:11 - this series we're going to recreate as
01:13 - much as possible using 2d the series
01:16 - started as much from scratch as possible
01:18 - the only things already prepared were
01:20 - the animations and these sprites so
01:21 - first we have to deal with basic
01:23 - movement and attacks for spider-man then
01:26 - we spawned some enemies and then the
01:28 - ability to attack them once we could
01:30 - attack the enemies when from in the
01:31 - health system to be able to kill them so
01:34 - now the last basic thing we need to add
01:36 - is a simple enemy movement and then we
01:38 - can move on to spider-man specific
01:40 - abilities this series is continuing in
01:43 - October and I'm really looking forward
01:45 - to seeing how many different abilities
01:47 - we can recreate then we had two videos
01:50 - covering saving and loading in different
01:52 - ways first simply saving into a file
01:54 - using our own custom file format this is
01:57 - not necessarily the best approach to
01:58 - take but it teaches you how to separate
02:00 - data then we use JSON which is already a
02:04 - very robust format to store our
02:05 - safehouse the previous month had a video
02:08 - covering what is JSON so in here we
02:10 - simply took the file saving and use JSON
02:13 - to create a very simple but very robust
02:15 - save system we also completed the simple
02:18 - resource gathering a I Series
02:21 - in this series we created from scratch a
02:23 - nice little AI that can gather resources
02:25 - of various types and then use those
02:28 - resources to construct a tower which in
02:30 - turn spawns more gathers it's a great
02:32 - series to watch if you're interested in
02:34 - how you could create a game like Age of
02:36 - Empires so we had a video on resource
02:39 - regeneration so we could grab an
02:41 - infinite amount of resources but with a
02:44 - logic dictating how they would
02:46 - regenerate and in the final video we use
02:49 - the resources gathered to construct a
02:51 - tower after being built the tower spawns
02:53 - and you gather which can be used to
02:54 - gather more resources and so on there
02:57 - was one more video continuing they
02:59 - created where I've series so far in this
03:02 - series we have created a very robust
03:04 - graph that can be easily modified to
03:06 - display any data in this particular
03:08 - video we have some buttons and some code
03:10 - to be able to modify certain parts of
03:12 - our graph like manually change the
03:14 - visual type and string representation
03:16 - then a video on a simple element that is
03:19 - useful in many different game types
03:21 - which is a minimum the first video
03:24 - covered setting up and creating the
03:26 - mini-map we created a camera added the
03:30 - mini-map to the UI with a nice border on
03:32 - top and some icons for the various
03:34 - elements then a second video where we
03:37 - set up several classes to be able to
03:39 - manage our entire mini-map system in
03:40 - several ways through code also two
03:44 - videos on how to create a level by
03:46 - drawing pixels into a texture this is an
03:48 - interesting technique that can be useful
03:50 - depending on how your game is set up the
03:53 - first video covered how to read a
03:54 - texture and read each pixel in that
03:56 - texture and the second video covered how
03:59 - to place different objects depending on
04:01 - the pixel color essentially we draw
04:04 - pixels in a texture and convert those
04:06 - pixels into objects when we unload the
04:08 - unlevel that way we can easily create a
04:11 - lot of different interesting levels by
04:14 - simply drawing several images so that
04:17 - was it for the month of September 2018 I
04:20 - hope you found the video is helpful and
04:22 - learned something along the way if you
04:24 - have any questions regarding any of the
04:26 - videos feel free to post them in the
04:27 - comments and I'll do my best to answer
04:29 - them subscribe for more videos and I'll
04:31 - see you next time
04:43 - you

Cleaned transcript:

hello and welcome I am your code monkey and in this video we're going to review all the videos published in September 2018 let's begin so September started off with a conclusion of the task system in battleground tycoon this series is focused on making a system where you can create tasks to do various things and workers to execute them when possible the video this month can hold the series by creating two different systems working in tandem each system has its own different task types and the workers execute them differently one system is responsible for grabbing items from the floor and placing them in an item slot the other system grabs items from the slots and sends them away each system is completely independent of the other this concludes the task system as is used in battle royale Tycoon I hope you learned something and finally use for it in your own games then there was a very beginner focused video covering what is a component and how it relates to model behavior I've done several beginner focus videos covering the basics of unity so if you're new check out the unity basics playlist also start a new series making spiderman in unity 2d I've been playing the game on a ps4 and it does a lot of things very well so in this series we're going to recreate as much as possible using 2d the series started as much from scratch as possible the only things already prepared were the animations and these sprites so first we have to deal with basic movement and attacks for spiderman then we spawned some enemies and then the ability to attack them once we could attack the enemies when from in the health system to be able to kill them so now the last basic thing we need to add is a simple enemy movement and then we can move on to spiderman specific abilities this series is continuing in October and I'm really looking forward to seeing how many different abilities we can recreate then we had two videos covering saving and loading in different ways first simply saving into a file using our own custom file format this is not necessarily the best approach to take but it teaches you how to separate data then we use JSON which is already a very robust format to store our safehouse the previous month had a video covering what is JSON so in here we simply took the file saving and use JSON to create a very simple but very robust save system we also completed the simple resource gathering a I Series in this series we created from scratch a nice little AI that can gather resources of various types and then use those resources to construct a tower which in turn spawns more gathers it's a great series to watch if you're interested in how you could create a game like Age of Empires so we had a video on resource regeneration so we could grab an infinite amount of resources but with a logic dictating how they would regenerate and in the final video we use the resources gathered to construct a tower after being built the tower spawns and you gather which can be used to gather more resources and so on there was one more video continuing they created where I've series so far in this series we have created a very robust graph that can be easily modified to display any data in this particular video we have some buttons and some code to be able to modify certain parts of our graph like manually change the visual type and string representation then a video on a simple element that is useful in many different game types which is a minimum the first video covered setting up and creating the minimap we created a camera added the minimap to the UI with a nice border on top and some icons for the various elements then a second video where we set up several classes to be able to manage our entire minimap system in several ways through code also two videos on how to create a level by drawing pixels into a texture this is an interesting technique that can be useful depending on how your game is set up the first video covered how to read a texture and read each pixel in that texture and the second video covered how to place different objects depending on the pixel color essentially we draw pixels in a texture and convert those pixels into objects when we unload the unlevel that way we can easily create a lot of different interesting levels by simply drawing several images so that was it for the month of September 2018 I hope you found the video is helpful and learned something along the way if you have any questions regarding any of the videos feel free to post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time you
