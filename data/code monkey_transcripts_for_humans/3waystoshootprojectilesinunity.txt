With timestamps:

00:00 - this video is sponsored by unity in this
00:02 - video we're going to look at three ways
00:04 - of shooting projectiles and three ways
00:06 - of doing hit detection in unity all
00:08 - methods are valid each with their pros
00:10 - and cons and which one you choose
00:11 - depends on what game you're making let's
00:13 - begin
00:17 - [Music]
00:21 - hello and welcome I'm your code monkey
00:23 - and this channel is all about helping
00:25 - you learn how to make your own games
00:26 - with in-depth tutorials made by a
00:28 - professional indie game developer so if
00:30 - you find the video helpful consider
00:31 - subscribing alright so this is what we
00:33 - want to make over here is my player
00:35 - character and in here we have some nice
00:37 - targets and now if I click yep I'm
00:39 - firing a projectile now this is the
00:42 - first project on type it spawns a game
00:44 - object and moves z-transform then I can
00:46 - press a button in order to swap to the
00:48 - next projectile type and visually it
00:50 - looks exactly the same but it's working
00:52 - quite differently
00:53 - this one is working by using the physic
00:55 - system and now these two projectile
00:57 - types also have to separate hit
00:59 - detection methods now the first one is
01:01 - using a distance check and there you go
01:03 - it can hit all the targets and the
01:04 - second one is using a physics Collider
01:07 - and again visually they both look
01:09 - exactly the same so they both behave
01:11 - similarly and achieve the same result so
01:14 - these are the two normal projectile
01:16 - types and offer the last type which is
01:18 - not literally a projectile but rather it
01:20 - simulates a projectile
01:22 - this is the raycast method so I can
01:25 - shoot and yep there's the supposed
01:27 - projectile this one is using a break
01:29 - cast so it's an instant sort of
01:31 - projectile it gets fired towards the
01:33 - direction and there's a ray casted test
01:34 - if it hits something or not so here are
01:37 - the three methods of shooting
01:38 - projectiles that we're going to look at
01:39 - when using a transform to move our boat
01:41 - one using physics and one using a ray
01:45 - cast we're also going to try the three
01:48 - hit detection methods one using a dissin
01:50 - check one using colliders and one using
01:53 - ray cast as you're building your games
01:55 - you're going to need some assets and
01:56 - tools check out the grow your skills
01:58 - mega bundle sale happening right now on
02:01 - the unity asset store get over a
02:02 - thousand dollars worth of assets for up
02:04 - to 90 percent off so this is an
02:06 - excellent chance to get some assets at a
02:08 - great discount get some awesome assets
02:10 - who build the pure level some characters
02:12 - to play around with and lots of awesome
02:14 - effects get some tools to improve your
02:16 - work phone like in control for setting
02:18 - up multiple controllers and playmaker
02:20 - for visual scripting also included in
02:22 - the mega bundle is one year of unity and
02:24 - learn premium this is unities official
02:27 - online learning platform and it contains
02:29 - lots of completed projects courses and
02:31 - tutorials all efficiently certified by
02:33 - unity in teller and premium has over 500
02:35 - tutorials in structured learning paths
02:37 - at every level to help you upscale and
02:40 - reach your goals so if you've been
02:42 - meaning to look at unity learn premium
02:43 - then this is your chance for the normal
02:45 - price you can get it through the bundle
02:47 - alongside tons of awesome assets in
02:48 - tools the link in the description is
02:50 - also an affiliate link so if you pick up
02:52 - anything through there you'll also be
02:54 - humping out the channel so check out the
02:56 - mega bundle sale get some awesome assets
02:58 - and tools and check out unity and learn
03:00 - premium thank you to unity and thank you
03:02 - to these ASPs for us for making this
03:04 - video possible go to patreon.com/scishow
03:07 - code monkey to get some perks and help
03:09 - keep the videos free for everyone
03:11 - alright so this is our goal let's get to
03:13 - it okay so here we are in our stirring
03:16 - scene I have my player character that I
03:18 - can move around I cover the basic
03:20 - character controller in a previous video
03:21 - and I can look around and shoot and I
03:25 - also covered how to aim towards a mouse
03:26 - in another video so check the links in
03:28 - the description to learn more now as you
03:30 - see when I click it plays the shooting
03:31 - animation but it doesn't actually fire
03:33 - anything alright so let's begin by
03:35 - creating our boat over here in the
03:38 - project files I already have a simple
03:39 - boat sprite so just drag it onto the
03:42 - scene and yep there's the sprite now
03:44 - let's set this up so let's make an empty
03:47 - game object to home our bullet and
03:49 - inside let's drag our sprite call it our
03:52 - sprite just making a parent game object
03:54 - so we can later expand upon our boat and
03:57 - also let's rotate the sprite to point it
04:00 - to the right which is unity 0 angle so
04:04 - in here just put minus 90 and yep
04:05 - example like that all right so here's
04:07 - our simple bullet game object now let's
04:10 - just drag it onto the prefabs folder in
04:11 - order to create a prefab
04:13 - let's rename it to PF boat alright so we
04:16 - have our boat prefab now let's
04:18 - instantiate it when we shoot and now
04:20 - over here in the scene I have a game
04:22 - object for my player it has a bunch of
04:24 - scripts in order to handle the animation
04:26 - movement and so on and then here we have
04:28 - the simple shoot projectile script let's
04:30 - open this up and it's in here that we're
04:32 - going to handle our shooting all of our
04:34 - code is set up in a very clean way with
04:36 - all the systems nicely separated so here
04:38 - we're handling the shooting while
04:40 - listening to the on shoot event that is
04:41 - fired by a base class so this is how we
04:44 - keep everything nicely separated if you
04:46 - want to learn more about
04:47 - events then check the video linked in
04:48 - the description where I cover them in
04:50 - detail now here we can simply spawn our
04:52 - bullet so for that let's first add a
04:55 - nice field for our PF bullet bought
05:00 - prefab and then in here we can simply
05:03 - call insensate instantiate our bullet
05:05 - prefab now we need the position and for
05:08 - the position over here the event comes
05:10 - with a on shoot event args and in there
05:12 - it contains the gun endpoint position as
05:14 - well as the shoot position someone
05:16 - spawned a bullet right on the gun
05:17 - endpoint position and for the rotation
05:20 - let's pass in quaternion identity
05:22 - alright so just like this it should be
05:24 - spawning the boat so let's just go into
05:27 - the editor and in here we just drag our
05:30 - bullet prefab reference and try the game
05:32 - okay here we are and shoot any of there
05:35 - you go there is a bullet spawn exactly
05:36 - where it should alright so we have our
05:39 - nice boat being instantiated now that we
05:41 - have the bullet being accentuated and
05:43 - let's actually move it so for that let's
05:45 - make a script to handle our bullets so
05:47 - in you see sharp script come with just
05:49 - bullet let's drag it on to our prefabs
05:52 - so just there and drag it okay okay so
05:55 - now in here in order to move our bullet
05:57 - we need to know which direction we
05:58 - should move towards so let's make a
06:01 - function in order to receive that
06:02 - direction let's make it public void come
06:06 - lick the our setup function and we're
06:08 - going to receive a vector3
06:09 - for the shoot direction and now we can
06:14 - go back into our player script and in
06:16 - here we essentially it's bowling okay
06:17 - let's grab the in Senshi edit transform
06:19 - so our bullets transform and then we do
06:23 - get component to get our bullet
06:25 - component and we call our setup function
06:29 - and now in here we need to pass in the
06:31 - shoot direction so let's count like that
06:33 - and here factor three for the shoot
06:35 - direction and again over here on the
06:37 - event args we already have the two
06:39 - positions so they should position which
06:40 - is the target position so let's do that
06:43 - - the gun endpoint position and let's
06:45 - make sure that we normalize our vector
06:48 - alright so we have the issue Direction
06:51 - being calculated and we just pass it
06:52 - onto our bone so now the goal here
06:55 - receives the shoot direction now we just
06:57 - need to store it
07:00 - and then we make our normal update and
07:04 - on update and let's simply move the
07:05 - transform dot position towards the shoot
07:08 - direction x time down to time and let's
07:13 - also multiply it by a certain move speed
07:17 - and just like that very simple so we
07:22 - have the player which calculates the
07:23 - shoot direction then pass it - shoot
07:25 - direction on to the bone script
07:26 - and then the bone script stores that
07:28 - direction and simply moves towards it so
07:30 - if we test so here we are moving around
07:33 - and shoot and if there you go there goes
07:35 - the bullet going in that direction so
07:37 - shoot in there and yep go straight
07:39 - towards the mouse alright great so here
07:41 - we have our basic bone working however
07:44 - you can already see that we have two
07:46 - issues now the first one is that the
07:47 - bullet isn't rotating so if I should
07:49 - upwards if there you go you can see that
07:51 - the sprite is down pointing to the right
07:53 - and secondly the other issue is that the
07:55 - bone lives forever so if we pause over
07:58 - here you can see that we have all of
08:00 - these bones being in Senshi ated and
08:01 - they all still exist so this one for
08:03 - example is way all the way over there
08:05 - obviously we don't want our bouncing
08:07 - live forever so let's solve both those
08:09 - issues now first for the rotation it's
08:12 - actually very simple when we do our
08:14 - setup we receive the shoot direction
08:15 - vector so we go into our transform to
08:18 - modify our Euler angles and this case
08:21 - we're working in 2d so we're going to
08:23 - only be x and y at 0 and now for the Zen
08:27 - we need to convert this into an Euler
08:28 - angle and for that I can use one
08:32 - function from the utilities in order to
08:36 - convert the vector into an angle as long
08:40 - as you can download the code monkey
08:41 - Tony's for free from unity calm calm and
08:44 - here is the function in case you want to
08:46 - bounce yourself alright so just like
08:48 - this we should have fixed the rotation
08:49 - and now for the moment cleanup there are
08:52 - several ways that we can do this we
08:53 - could keep track of the distance that
08:55 - the boat has moved and destroy it after
08:57 - a certain distance or we can destroy it
08:59 - based on time using time approach is
09:01 - very simple here on setup we can just
09:04 - use the destroy function which is part
09:06 - of the monobehaviour and we're going to
09:08 - destroy this game object and this one
09:11 - takes the second
09:11 - parameter which is a time so here let's
09:14 - say after five seconds so after five
09:17 - seconds this game object won't be
09:19 - destroyed
09:19 - okay that should do it let's test okay
09:22 - here we are and first let's see the
09:23 - rotation so if I point upwards yep there
09:25 - you go it's now being rotated perfectly
09:28 - wherever I aim great and let's pause it
09:31 - over here we can see all of our bullets
09:33 - and they should all be destroyed after
09:34 - five seconds so I shoot them they get
09:36 - spawned and after five seconds they
09:38 - should become clean up and yep there you
09:42 - go they start being straight alright
09:43 - awesome okay so we can now spawn to
09:45 - shoot our bullets and after a while they
09:47 - get destroyed however right now they're
09:49 - not hitting anything so if I shoot at
09:50 - targets yep nothing happens so here now
09:53 - we have two methods of detecting hits we
09:56 - can decide to use the physic system or
09:58 - not let's first do it without the physic
10:00 - system so here in the editor there are
10:02 - the various target game objects they
10:04 - essentially just have two sprites and
10:06 - then over here they have the target
10:08 - script let's inspect this here it is
10:11 - it's a pretty small simple script now
10:13 - it's already set up in an interesting
10:15 - way we have a static list of one of our
10:18 - targets and on awake every target gets
10:20 - added on to the list so with this list
10:22 - we're going to have all of our targets
10:24 - and then up here we also have a nice
10:26 - static function it takes in a position
10:29 - and a certain max range and returns the
10:31 - closest target to that position within
10:33 - that max range so it cycles through all
10:35 - the targets in the target list
10:37 - Conal its distance and returns it
10:39 - closest so this is the same method that
10:41 - I use in the melee combat system that I
10:43 - made previously and now with this
10:45 - similar function we can use it to test
10:46 - for hits so let's go back into our boat
10:48 - script and in here on our update how
10:51 - we're going to do is call that function
10:52 - so it's going to the target in order to
10:55 - get the closest now for the position
10:57 - let's pass in transform position and for
11:00 - the max range let's define a certain hit
11:02 - detection and now this function returns
11:07 - a target so first we test if our target
11:11 - does not know so if we do have a target
11:13 - then let's just call the target damage
11:16 - function and once we do what's also
11:18 - destroy this game object alright so that
11:22 - should do it we test for the closest
11:24 - target to this
11:25 - position within a certain radius and if
11:28 - there is something then we're going to
11:29 - damage the target and destroy bolt
11:31 - let's test ok so here we are we can
11:33 - still move again so shoot normally all
11:35 - right then now if we shoot at the target
11:37 - and if there you go we correctly hit the
11:39 - target
11:40 - so our bullet is testing the position
11:42 - looking for the closest target within a
11:43 - certain radius and if it find something
11:45 - then we have our head awesome so we can
11:48 - now fire bullets and have them hit our
11:50 - targets and here you can see the first
11:52 - method for shooting projectiles by using
11:54 - a transform in order to move them and
11:56 - the first method of hit detection by
11:58 - cycling through our targets in doing a
12:00 - distance check
12:00 - now this method of hit detection has
12:03 - some pros and cons the main pro is it
12:05 - does not require the physics system at
12:06 - all
12:07 - so it works with a simple vector three
12:09 - position there's no need for any
12:11 - colliders or anything of the sort
12:12 - however the one downside is we're
12:15 - testing the distance against every
12:16 - single target if you have a small amount
12:19 - of targets and this isn't really an
12:20 - issue but if you have a lot then it can
12:22 - quite quickly become very expensive so
12:24 - let's look at the second method for hit
12:26 - detection by using the physics system so
12:29 - first here in the editor let's add a box
12:31 - Collider onto our target and let's edit
12:34 - it to put it right on top of the target
12:36 - okay just like that there's our Collider
12:38 - now we also need to add on our
12:41 - projectile so let's open up our bolt and
12:44 - in here also add another box Collider
12:46 - and again set the size yep just like
12:50 - that and now if you've seen the video
12:52 - where I covered simple collisions then
12:54 - you know that just like this it won't
12:56 - actually work in order for the collision
12:58 - to work we need to have at least one of
13:00 - the objects with a rigidbody so much
13:02 - added over here on our bullet we add a
13:05 - rigidbody 2d and now since we're moving
13:07 - the transform directly we need to make
13:09 - sure that this rigid body is set to
13:11 - kinematic then to make it move smoothly
13:13 - and let's interpolate and in order to
13:16 - not teleport between targets let's make
13:18 - sure that the collision is continuous
13:19 - and here let's also make sure that our
13:21 - bullet is a trigger alright so here we
13:24 - have both objects set up we have the
13:26 - bolt with a box Collider and a rigidbody
13:28 - and then we have our target just with a
13:31 - box Collider so now let's go into our
13:33 - boat scripts and then here the way that
13:36 - we handle collisions is actually very
13:38 - simple
13:39 - all we need to do is that the function
13:40 - private void on trigger enter to D we
13:44 - made the bullet that trigger that's why
13:45 - we're using the trigger and using enter
13:48 - means that it will be called once when
13:50 - the bullet enters into another Collider
13:51 - and we're working in 2d alright so this
13:54 - will be called when there's a collision
13:56 - in the physic system now we need to do
13:58 - is check if the collider that we hit was
13:59 - a valid hit so let's test if our
14:02 - Collider that get component of type
14:05 - targets if it is not known then we have
14:11 - hit a target alright so if our Collider
14:20 - does have a target component then we hit
14:23 - a target so we can't target damage and
14:24 - we destroy the bolt so that's it very
14:26 - simple now we can comment out the
14:28 - previous method for hit detection and
14:31 - just test this out ok so here we are in
14:33 - still shooting normally alright so far
14:35 - so good
14:35 - now let's shoot up the target any of
14:38 - there you go the colon either hits and
14:40 - we have our target hit so we can shoot
14:43 - all of our targets and all of our
14:45 - bullets are colliding exactly as
14:47 - intended awesome so here we saw the
14:50 - second method of hit detection we're
14:52 - using the physics system in order to
14:54 - test when a collision occurs then we
14:56 - test if we collided with a family target
14:57 - and if so we do our hit logic now the
15:00 - benefit of this approach is we don't
15:01 - have to test for collisions on every
15:03 - single update against every single
15:05 - target when it happens the physic system
15:08 - will not let us know so when dealing
15:09 - with projectiles this is probably the
15:11 - better approach for hit detection now
15:13 - let's look at the second method for
15:14 - handling the projectiles for that let's
15:17 - go and duplicate our prefab call this
15:20 - our bone with physics and now since we
15:23 - already set up everything to hand on
15:25 - physics collisions then everything is
15:26 - almost set up the main difference is
15:28 - down here instead of kinematic it won't
15:30 - be a dynamic rigidbody so we make it
15:33 - dynamic let's make sure the angular drag
15:35 - is set to zero as well as the gravity
15:37 - also set to zero all right so that's our
15:39 - setup not much different than the
15:41 - previous method now let's make our
15:43 - script so let's make in easysharp script
15:45 - call it our bullet physics and now in
15:50 - here let's also make a setup function
15:51 - where
15:52 - the direction so a public Boyd setup
15:55 - will receive a vector3 for our shoot
15:58 - direction and now when we receive it on
16:02 - our other method we were storing the
16:05 - shoot direction then using it on update
16:07 - in order to move our transform
16:08 - however in here we're going to use the
16:10 - physics system directly so instead of
16:12 - let's get component of our rigidbody 2d
16:16 - and then we use our rigidbody in order
16:20 - to call add force we're going to add a
16:23 - force towards our shoot direction and
16:25 - make sure that it's an impulse and
16:28 - finally since shoot Direction is
16:29 - normalized and let's also add a certain
16:31 - move speed all right so just like this
16:36 - our object should be moving in the world
16:37 - now let's just spawn this type of bullet
16:40 - so let's go into our player and let's
16:43 - duplicate to add a field for the bullet
16:45 - physics
16:46 - transform and here we're going to use
16:48 - the second method alright so just like
16:57 - this so it's essentially pretty much the
16:59 - same code as previously just with a
17:00 - different component and a different
17:02 - prefab okay so all this should work
17:04 - let's test ok so here we are and shoot
17:07 - any of their yo the bullet is still
17:09 - being spawned and flying towards a
17:11 - target so it's behaving pretty much
17:14 - exactly the same as the other boat
17:15 - except this one is being controlled by
17:17 - the physic system now we forgot to solve
17:19 - the issue with the rotation so let's
17:20 - solve that and then we also need to
17:22 - solve the hit detection so let's do
17:24 - those so we can pretty much copy the
17:26 - same code as in the boat so for example
17:28 - over here we have the Euler angles and
17:30 - the clean up after a while so we can
17:32 - pretty much copy the exact same thing
17:34 - and for the collision also pretty much
17:37 - the exact same thing alright so that's
17:41 - it now this should be working
17:42 - let's test ok so here we are in shoot
17:44 - and yep there goes the bone shoot to the
17:46 - other side and yep the rotation is all
17:48 - correct now I should add a target and if
17:51 - there you go we have our hit detection
17:52 - working so we can shoot the moments hit
17:54 - the targets and if not then they keep
17:56 - going and they get cleaned up afterwards
17:58 - alright so everything is working
18:00 - correctly awesome
18:01 - so just like this we have our second
18:03 - method of handling projectiles this one
18:05 - is using the
18:06 - system in order to handle its movement
18:07 - and we're also using the second hit
18:10 - detection method which is also based on
18:12 - physics
18:12 - so we have our bullet correctly working
18:14 - exactly as intended all right so we
18:17 - looked at two methods of shooting
18:18 - projectiles and two methods of hit
18:21 - detection first shooting by moving the
18:23 - projectile with the transform and
18:24 - secondly by using the physics system in
18:27 - order to move it and for the hit
18:28 - detection we tested the distance against
18:30 - all objects and we also use the physics
18:33 - system in order to handle our collisions
18:35 - now let's check out the third method for
18:37 - shooting a projectile and the third
18:39 - method of hit detection now this one
18:41 - isn't technically a projectile but
18:43 - rather a way that you can simulate a
18:45 - projectile in your game I'm talking
18:47 - about having an instant projectile so as
18:49 - it's fired it instantly either it hits
18:51 - or misses for that let's make our script
18:53 - so we need C sharp script we're going to
18:56 - call it our bonus rate cast and now here
18:59 - our supposed bullet is just going to be
19:02 - an instant so we're not really going to
19:03 - have any object at all so since we're
19:05 - not going to instantiate this class as
19:07 - an object then let's make it a static
19:10 - class and get rid of model behavior all
19:14 - right now let's make a shoot function so
19:17 - a public static let's return void and
19:20 - call it shoot we're going to shoot take
19:23 - a vector3 for the shoot position and a
19:27 - vector3 for the shoot direction so we're
19:31 - going to shoot from this position
19:32 - towards this direction now in here we do
19:35 - a simple recap so we are into the
19:36 - physics 2d in order to do a recast start
19:40 - on our shoot position and go towards
19:42 - issued direction now this will return a
19:44 - raycast hit 2d and we can test if we hit
19:49 - something by checking if our weak acid
19:51 - 2d collider if it is not known then we
19:54 - have a head so if we hit something let's
19:58 - test if it's our target
20:04 - so you try to get the component of
20:06 - target on the hit collider and if we
20:09 - have it then we have hit a target so
20:11 - let's cause some damage all right so
20:13 - that's pretty much it for making a
20:14 - simple array cast now back in our player
20:16 - here instead of using this other method
20:20 - let's use our recast method so we go
20:23 - into the bullet ray cast in order to
20:26 - convey shoot function press in the shoot
20:29 - position and our shoot direction alright
20:34 - so that's it very simple
20:36 - let's test ok so here we are and shoot
20:39 - and right now there's no visual so you
20:41 - can't really see anything but if we
20:43 - shoot towards the target if there you go
20:45 - we can indeed cause some damage so we
20:47 - hit target shoot down and shoot down and
20:50 - yep just like that so our ric acid is
20:53 - working now for the visual we can use a
20:55 - nice boat race visual that I made in a
20:57 - previous video quite a long time ago
20:59 - check the link description if you want
21:00 - to learn how it works do I set that up
21:03 - it is very simple I just use the weapon
21:05 - tracer class in order to create a weapon
21:07 - tracer from this gun end point position
21:10 - towards the target position so let's say
21:12 - the mouse position let's see okay here
21:17 - we are in shoot nè up now we have a nice
21:20 - round tracer visual so we can now shoot
21:22 - all of our targets and yep we can now
21:25 - see them again I cover this in a
21:27 - previous video so check it out to see
21:28 - how it works and just like this we have
21:30 - our third method and fully working
21:32 - instead of having a moving object what
21:34 - we have is an instant either hit or miss
21:36 - so depending on what game you're making
21:39 - this might be the better approach
21:40 - compared to a moving projectile
21:42 - all right so here is our final scene
21:44 - right now I can click and yep I'm
21:46 - shooting projectiles this is the first
21:48 - time that is firing a moving projectile
21:50 - by moving the transform it's also using
21:53 - the first method of hit detection by
21:54 - checking the distance against all
21:56 - targets and now by pressing a button I
21:58 - am now shooting the second type of
22:00 - projectile now originally they are
22:02 - exactly the same but functionally quite
22:04 - different this one is using physics in
22:06 - order to move the boat and it's also
22:08 - using physics in order to handle the hit
22:10 - detection and I'll finally click another
22:11 - button in order to use the third method
22:13 - so now this one isn't really a moving
22:15 - project
22:16 - rather an instant shot it's done using a
22:18 - recast and it checks instantly whether
22:20 - it hits something or not so just like
22:23 - this over here you have three methods of
22:25 - shooting projectiles that you can use in
22:27 - your game now go ahead and pick the one
22:29 - that best makes sense for your game
22:30 - design
22:31 - check out the grow your skills Mega Man
22:33 - on sale happening right now on the unity
22:35 - asset store get over a thousand dollars
22:37 - worth of assets for up to 90 percent off
22:39 - so this is an excellent chance to get
22:41 - some assets at a great discount thank
22:43 - you to unity and thank you to DS ASPs
22:45 - forest for making this video possible go
22:47 - to patreon.com/scishow to code monkey to
22:50 - get some perks and help keep the videos
22:51 - free for everyone as always you can
22:53 - download the project files and utilities
22:55 - from unity code Montcalm subscribe the
22:57 - channel for more unity tutorials post
22:59 - any question have in the comments and
23:00 - I'll see you next time
23:03 - [Music]

Cleaned transcript:

this video is sponsored by unity in this video we're going to look at three ways of shooting projectiles and three ways of doing hit detection in unity all methods are valid each with their pros and cons and which one you choose depends on what game you're making let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with indepth tutorials made by a professional indie game developer so if you find the video helpful consider subscribing alright so this is what we want to make over here is my player character and in here we have some nice targets and now if I click yep I'm firing a projectile now this is the first project on type it spawns a game object and moves ztransform then I can press a button in order to swap to the next projectile type and visually it looks exactly the same but it's working quite differently this one is working by using the physic system and now these two projectile types also have to separate hit detection methods now the first one is using a distance check and there you go it can hit all the targets and the second one is using a physics Collider and again visually they both look exactly the same so they both behave similarly and achieve the same result so these are the two normal projectile types and offer the last type which is not literally a projectile but rather it simulates a projectile this is the raycast method so I can shoot and yep there's the supposed projectile this one is using a break cast so it's an instant sort of projectile it gets fired towards the direction and there's a ray casted test if it hits something or not so here are the three methods of shooting projectiles that we're going to look at when using a transform to move our boat one using physics and one using a ray cast we're also going to try the three hit detection methods one using a dissin check one using colliders and one using ray cast as you're building your games you're going to need some assets and tools check out the grow your skills mega bundle sale happening right now on the unity asset store get over a thousand dollars worth of assets for up to 90 percent off so this is an excellent chance to get some assets at a great discount get some awesome assets who build the pure level some characters to play around with and lots of awesome effects get some tools to improve your work phone like in control for setting up multiple controllers and playmaker for visual scripting also included in the mega bundle is one year of unity and learn premium this is unities official online learning platform and it contains lots of completed projects courses and tutorials all efficiently certified by unity in teller and premium has over 500 tutorials in structured learning paths at every level to help you upscale and reach your goals so if you've been meaning to look at unity learn premium then this is your chance for the normal price you can get it through the bundle alongside tons of awesome assets in tools the link in the description is also an affiliate link so if you pick up anything through there you'll also be humping out the channel so check out the mega bundle sale get some awesome assets and tools and check out unity and learn premium thank you to unity and thank you to these ASPs for us for making this video possible go to patreon.com/scishow code monkey to get some perks and help keep the videos free for everyone alright so this is our goal let's get to it okay so here we are in our stirring scene I have my player character that I can move around I cover the basic character controller in a previous video and I can look around and shoot and I also covered how to aim towards a mouse in another video so check the links in the description to learn more now as you see when I click it plays the shooting animation but it doesn't actually fire anything alright so let's begin by creating our boat over here in the project files I already have a simple boat sprite so just drag it onto the scene and yep there's the sprite now let's set this up so let's make an empty game object to home our bullet and inside let's drag our sprite call it our sprite just making a parent game object so we can later expand upon our boat and also let's rotate the sprite to point it to the right which is unity 0 angle so in here just put minus 90 and yep example like that all right so here's our simple bullet game object now let's just drag it onto the prefabs folder in order to create a prefab let's rename it to PF boat alright so we have our boat prefab now let's instantiate it when we shoot and now over here in the scene I have a game object for my player it has a bunch of scripts in order to handle the animation movement and so on and then here we have the simple shoot projectile script let's open this up and it's in here that we're going to handle our shooting all of our code is set up in a very clean way with all the systems nicely separated so here we're handling the shooting while listening to the on shoot event that is fired by a base class so this is how we keep everything nicely separated if you want to learn more about events then check the video linked in the description where I cover them in detail now here we can simply spawn our bullet so for that let's first add a nice field for our PF bullet bought prefab and then in here we can simply call insensate instantiate our bullet prefab now we need the position and for the position over here the event comes with a on shoot event args and in there it contains the gun endpoint position as well as the shoot position someone spawned a bullet right on the gun endpoint position and for the rotation let's pass in quaternion identity alright so just like this it should be spawning the boat so let's just go into the editor and in here we just drag our bullet prefab reference and try the game okay here we are and shoot any of there you go there is a bullet spawn exactly where it should alright so we have our nice boat being instantiated now that we have the bullet being accentuated and let's actually move it so for that let's make a script to handle our bullets so in you see sharp script come with just bullet let's drag it on to our prefabs so just there and drag it okay okay so now in here in order to move our bullet we need to know which direction we should move towards so let's make a function in order to receive that direction let's make it public void come lick the our setup function and we're going to receive a vector3 for the shoot direction and now we can go back into our player script and in here we essentially it's bowling okay let's grab the in Senshi edit transform so our bullets transform and then we do get component to get our bullet component and we call our setup function and now in here we need to pass in the shoot direction so let's count like that and here factor three for the shoot direction and again over here on the event args we already have the two positions so they should position which is the target position so let's do that the gun endpoint position and let's make sure that we normalize our vector alright so we have the issue Direction being calculated and we just pass it onto our bone so now the goal here receives the shoot direction now we just need to store it and then we make our normal update and on update and let's simply move the transform dot position towards the shoot direction x time down to time and let's also multiply it by a certain move speed and just like that very simple so we have the player which calculates the shoot direction then pass it shoot direction on to the bone script and then the bone script stores that direction and simply moves towards it so if we test so here we are moving around and shoot and if there you go there goes the bullet going in that direction so shoot in there and yep go straight towards the mouse alright great so here we have our basic bone working however you can already see that we have two issues now the first one is that the bullet isn't rotating so if I should upwards if there you go you can see that the sprite is down pointing to the right and secondly the other issue is that the bone lives forever so if we pause over here you can see that we have all of these bones being in Senshi ated and they all still exist so this one for example is way all the way over there obviously we don't want our bouncing live forever so let's solve both those issues now first for the rotation it's actually very simple when we do our setup we receive the shoot direction vector so we go into our transform to modify our Euler angles and this case we're working in 2d so we're going to only be x and y at 0 and now for the Zen we need to convert this into an Euler angle and for that I can use one function from the utilities in order to convert the vector into an angle as long as you can download the code monkey Tony's for free from unity calm calm and here is the function in case you want to bounce yourself alright so just like this we should have fixed the rotation and now for the moment cleanup there are several ways that we can do this we could keep track of the distance that the boat has moved and destroy it after a certain distance or we can destroy it based on time using time approach is very simple here on setup we can just use the destroy function which is part of the monobehaviour and we're going to destroy this game object and this one takes the second parameter which is a time so here let's say after five seconds so after five seconds this game object won't be destroyed okay that should do it let's test okay here we are and first let's see the rotation so if I point upwards yep there you go it's now being rotated perfectly wherever I aim great and let's pause it over here we can see all of our bullets and they should all be destroyed after five seconds so I shoot them they get spawned and after five seconds they should become clean up and yep there you go they start being straight alright awesome okay so we can now spawn to shoot our bullets and after a while they get destroyed however right now they're not hitting anything so if I shoot at targets yep nothing happens so here now we have two methods of detecting hits we can decide to use the physic system or not let's first do it without the physic system so here in the editor there are the various target game objects they essentially just have two sprites and then over here they have the target script let's inspect this here it is it's a pretty small simple script now it's already set up in an interesting way we have a static list of one of our targets and on awake every target gets added on to the list so with this list we're going to have all of our targets and then up here we also have a nice static function it takes in a position and a certain max range and returns the closest target to that position within that max range so it cycles through all the targets in the target list Conal its distance and returns it closest so this is the same method that I use in the melee combat system that I made previously and now with this similar function we can use it to test for hits so let's go back into our boat script and in here on our update how we're going to do is call that function so it's going to the target in order to get the closest now for the position let's pass in transform position and for the max range let's define a certain hit detection and now this function returns a target so first we test if our target does not know so if we do have a target then let's just call the target damage function and once we do what's also destroy this game object alright so that should do it we test for the closest target to this position within a certain radius and if there is something then we're going to damage the target and destroy bolt let's test ok so here we are we can still move again so shoot normally all right then now if we shoot at the target and if there you go we correctly hit the target so our bullet is testing the position looking for the closest target within a certain radius and if it find something then we have our head awesome so we can now fire bullets and have them hit our targets and here you can see the first method for shooting projectiles by using a transform in order to move them and the first method of hit detection by cycling through our targets in doing a distance check now this method of hit detection has some pros and cons the main pro is it does not require the physics system at all so it works with a simple vector three position there's no need for any colliders or anything of the sort however the one downside is we're testing the distance against every single target if you have a small amount of targets and this isn't really an issue but if you have a lot then it can quite quickly become very expensive so let's look at the second method for hit detection by using the physics system so first here in the editor let's add a box Collider onto our target and let's edit it to put it right on top of the target okay just like that there's our Collider now we also need to add on our projectile so let's open up our bolt and in here also add another box Collider and again set the size yep just like that and now if you've seen the video where I covered simple collisions then you know that just like this it won't actually work in order for the collision to work we need to have at least one of the objects with a rigidbody so much added over here on our bullet we add a rigidbody 2d and now since we're moving the transform directly we need to make sure that this rigid body is set to kinematic then to make it move smoothly and let's interpolate and in order to not teleport between targets let's make sure that the collision is continuous and here let's also make sure that our bullet is a trigger alright so here we have both objects set up we have the bolt with a box Collider and a rigidbody and then we have our target just with a box Collider so now let's go into our boat scripts and then here the way that we handle collisions is actually very simple all we need to do is that the function private void on trigger enter to D we made the bullet that trigger that's why we're using the trigger and using enter means that it will be called once when the bullet enters into another Collider and we're working in 2d alright so this will be called when there's a collision in the physic system now we need to do is check if the collider that we hit was a valid hit so let's test if our Collider that get component of type targets if it is not known then we have hit a target alright so if our Collider does have a target component then we hit a target so we can't target damage and we destroy the bolt so that's it very simple now we can comment out the previous method for hit detection and just test this out ok so here we are in still shooting normally alright so far so good now let's shoot up the target any of there you go the colon either hits and we have our target hit so we can shoot all of our targets and all of our bullets are colliding exactly as intended awesome so here we saw the second method of hit detection we're using the physics system in order to test when a collision occurs then we test if we collided with a family target and if so we do our hit logic now the benefit of this approach is we don't have to test for collisions on every single update against every single target when it happens the physic system will not let us know so when dealing with projectiles this is probably the better approach for hit detection now let's look at the second method for handling the projectiles for that let's go and duplicate our prefab call this our bone with physics and now since we already set up everything to hand on physics collisions then everything is almost set up the main difference is down here instead of kinematic it won't be a dynamic rigidbody so we make it dynamic let's make sure the angular drag is set to zero as well as the gravity also set to zero all right so that's our setup not much different than the previous method now let's make our script so let's make in easysharp script call it our bullet physics and now in here let's also make a setup function where the direction so a public Boyd setup will receive a vector3 for our shoot direction and now when we receive it on our other method we were storing the shoot direction then using it on update in order to move our transform however in here we're going to use the physics system directly so instead of let's get component of our rigidbody 2d and then we use our rigidbody in order to call add force we're going to add a force towards our shoot direction and make sure that it's an impulse and finally since shoot Direction is normalized and let's also add a certain move speed all right so just like this our object should be moving in the world now let's just spawn this type of bullet so let's go into our player and let's duplicate to add a field for the bullet physics transform and here we're going to use the second method alright so just like this so it's essentially pretty much the same code as previously just with a different component and a different prefab okay so all this should work let's test ok so here we are and shoot any of their yo the bullet is still being spawned and flying towards a target so it's behaving pretty much exactly the same as the other boat except this one is being controlled by the physic system now we forgot to solve the issue with the rotation so let's solve that and then we also need to solve the hit detection so let's do those so we can pretty much copy the same code as in the boat so for example over here we have the Euler angles and the clean up after a while so we can pretty much copy the exact same thing and for the collision also pretty much the exact same thing alright so that's it now this should be working let's test ok so here we are in shoot and yep there goes the bone shoot to the other side and yep the rotation is all correct now I should add a target and if there you go we have our hit detection working so we can shoot the moments hit the targets and if not then they keep going and they get cleaned up afterwards alright so everything is working correctly awesome so just like this we have our second method of handling projectiles this one is using the system in order to handle its movement and we're also using the second hit detection method which is also based on physics so we have our bullet correctly working exactly as intended all right so we looked at two methods of shooting projectiles and two methods of hit detection first shooting by moving the projectile with the transform and secondly by using the physics system in order to move it and for the hit detection we tested the distance against all objects and we also use the physics system in order to handle our collisions now let's check out the third method for shooting a projectile and the third method of hit detection now this one isn't technically a projectile but rather a way that you can simulate a projectile in your game I'm talking about having an instant projectile so as it's fired it instantly either it hits or misses for that let's make our script so we need C sharp script we're going to call it our bonus rate cast and now here our supposed bullet is just going to be an instant so we're not really going to have any object at all so since we're not going to instantiate this class as an object then let's make it a static class and get rid of model behavior all right now let's make a shoot function so a public static let's return void and call it shoot we're going to shoot take a vector3 for the shoot position and a vector3 for the shoot direction so we're going to shoot from this position towards this direction now in here we do a simple recap so we are into the physics 2d in order to do a recast start on our shoot position and go towards issued direction now this will return a raycast hit 2d and we can test if we hit something by checking if our weak acid 2d collider if it is not known then we have a head so if we hit something let's test if it's our target so you try to get the component of target on the hit collider and if we have it then we have hit a target so let's cause some damage all right so that's pretty much it for making a simple array cast now back in our player here instead of using this other method let's use our recast method so we go into the bullet ray cast in order to convey shoot function press in the shoot position and our shoot direction alright so that's it very simple let's test ok so here we are and shoot and right now there's no visual so you can't really see anything but if we shoot towards the target if there you go we can indeed cause some damage so we hit target shoot down and shoot down and yep just like that so our ric acid is working now for the visual we can use a nice boat race visual that I made in a previous video quite a long time ago check the link description if you want to learn how it works do I set that up it is very simple I just use the weapon tracer class in order to create a weapon tracer from this gun end point position towards the target position so let's say the mouse position let's see okay here we are in shoot nè up now we have a nice round tracer visual so we can now shoot all of our targets and yep we can now see them again I cover this in a previous video so check it out to see how it works and just like this we have our third method and fully working instead of having a moving object what we have is an instant either hit or miss so depending on what game you're making this might be the better approach compared to a moving projectile all right so here is our final scene right now I can click and yep I'm shooting projectiles this is the first time that is firing a moving projectile by moving the transform it's also using the first method of hit detection by checking the distance against all targets and now by pressing a button I am now shooting the second type of projectile now originally they are exactly the same but functionally quite different this one is using physics in order to move the boat and it's also using physics in order to handle the hit detection and I'll finally click another button in order to use the third method so now this one isn't really a moving project rather an instant shot it's done using a recast and it checks instantly whether it hits something or not so just like this over here you have three methods of shooting projectiles that you can use in your game now go ahead and pick the one that best makes sense for your game design check out the grow your skills Mega Man on sale happening right now on the unity asset store get over a thousand dollars worth of assets for up to 90 percent off so this is an excellent chance to get some assets at a great discount thank you to unity and thank you to DS ASPs forest for making this video possible go to patreon.com/scishow to code monkey to get some perks and help keep the videos free for everyone as always you can download the project files and utilities from unity code Montcalm subscribe the channel for more unity tutorials post any question have in the comments and I'll see you next time
