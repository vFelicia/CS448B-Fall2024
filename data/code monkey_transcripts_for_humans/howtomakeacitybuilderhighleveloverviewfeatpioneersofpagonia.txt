With timestamps:

00:00 - hello and welcome I'm your km here let's
00:02 - see a highle overview on how to make a
00:04 - city Builder game first I want to cover
00:06 - the core Mechanics for pretty much any
00:07 - City Builder and how I would build them
00:09 - then I will cover some mechanics
00:11 - specific to this game that I've been
00:12 - playing pioneers of pagonia it's pretty
00:14 - great I very much enjoyed playing it
00:15 - it's a spiritual successor to the
00:17 - settlers games it's actually made by the
00:19 - original creator of the original series
00:21 - I really enjoyed playing those as a kid
00:23 - I loved how all the resources actually
00:25 - exist in the world unlike games like Age
00:26 - of Empires where it was really just
00:28 - number and this one is a great modern
00:30 - game that definitely captures that same
00:31 - feel I made a page on the website with
00:33 - links to all the various tutorials that
00:34 - I'm going to reference it's all Linked
00:36 - In the description many of these are
00:37 - topics that I have covered in detail
00:39 - previously so if you'd like to make a
00:40 - game in this genre hopefully this video
00:42 - and these links will help point you in
00:43 - the right direction if you want to build
00:44 - a game like this and you're looking for
00:46 - a more guide path and my Builder
00:47 - defender course would be a great
00:48 - starting point it features many
00:50 - mechanics that are used in both City
00:51 - Builder or Tower Defense games the game
00:53 - of the course in 2D but you could very
00:55 - easily convert Sprites into 3D meshes or
00:57 - check out my ultimate un overview course
00:59 - the go with that one is to help you make
01:01 - better games faster by teaching you
01:02 - about the tons of tools and features
01:03 - that Unity has that you might not know
01:05 - about okay so here is the mechanic list
01:08 - let's begin with the most basic ones
01:09 - that are common for any City Builder or
01:11 - Village management game the main thing
01:13 - is really a simple one these games
01:14 - usually have overhead view so you need
01:16 - to get the mouse run position basically
01:17 - the player controls the mouse and they
01:19 - need to be able to see that when the
01:20 - mouse is over here it is hitting that
01:21 - Terin position this is pretty simple and
01:23 - something I have covered in a dedicated
01:24 - tutorial previously you pretty much just
01:26 - do a rast from the camera towards the
01:28 - mouse position to hit some kind of
01:29 - terrain ler and then you get that worm
01:31 - position now with the mouse worm
01:32 - position the other important part is
01:33 - simply placing down buildings so
01:35 - selecting a building and being able to
01:36 - place it anywhere and for the buildings
01:38 - themselves the easiest way to handle
01:39 - buildings is simply with prefabs so you
01:41 - make a prefab for a wood cutter another
01:43 - for a sawmill another for a house and so
01:44 - on you get the mzor position and simply
01:46 - essentiate the prefab on that position
01:48 - then in terms of organizing all of your
01:50 - buildings for that the best way is
01:51 - really to use a script M object these
01:53 - are objects or assets that you can
01:54 - create in your project files which are
01:56 - great as data containers you can sort
01:58 - the building's prefab the building
01:59 - Sprite name and so on for example all
02:01 - the buildings in my game the Guardians
02:03 - they all have script M objects who hold
02:04 - the data for that specific building time
02:06 - and I did pretty much exact same thing
02:08 - on my Builder defender course which like
02:10 - I mentioned that course is great if
02:11 - you're looking for a guided stepbystep
02:12 - path on making this kind of City Builder
02:14 - game a lot of the mechanics Implement in
02:15 - that course are appable to both city
02:17 - builders and Tower Defense games so with
02:19 - that we can now select the building and
02:20 - simply place it down then for the
02:22 - building logic itself for that you can
02:24 - simply attach scripts directly onto
02:26 - those same prefabs the logic is
02:27 - naturally going to depend on what
02:29 - exactly you want that building to do so
02:30 - a lot of the logic in these kinds of
02:32 - games is based on the building finding
02:33 - out nearby buildings or resources for
02:35 - example over here I've got a wood
02:36 - cutting Hut this building basically
02:38 - requires trees nearby and the simplest
02:40 - way to find nearby objects the simplest
02:42 - way simply to use a basic physics query
02:44 - you really just do an overlap sphere
02:46 - which lets you find all the objects in
02:48 - an area as long as they have a collider
02:50 - that's one of the methods that I use in
02:51 - my find Targets video finding targets to
02:53 - attack or really any other object it's
02:54 - all really the same so with that simple
02:56 - query you can find all of the objects
02:58 - nearby then you simply simply cycle
03:00 - through them just to get the ones of a
03:01 - specific type so for example over here
03:03 - you would attach some kind of tag
03:04 - component to all of these three objects
03:06 - and then simply cycle through them and
03:07 - find only the ones that are trees so you
03:09 - would ignore all these buildings all
03:11 - these people and so on then with that
03:12 - you can do whatever logic you want like
03:14 - for example over here this wood
03:15 - Harvester you would probably want to
03:16 - find the closest tree and then assign
03:18 - some kind of task so that one of these
03:19 - settlers would go to dra tree and then
03:21 - Harvest it then in general in terms of
03:23 - city builders there are usually two main
03:25 - types ones that are free form where you
03:26 - can place the buildings anywhere and
03:28 - others where they are Road based and
03:29 - each building must be attached to a road
03:31 - in order to function this game is very
03:33 - much Road based so I can select to place
03:35 - on a road and there you go I can place
03:37 - it anywhere and connected to various
03:38 - points then the buildings themselves
03:40 - they also have entry points they need to
03:42 - be connected to a road in order to
03:43 - actually function if they're not
03:44 - connected to a road if I place it in the
03:46 - middle of nowhere there's a nice little
03:47 - flag saying there's no road so this one
03:49 - is not going to work so in order to
03:50 - position that road point that could be a
03:52 - very simple empty game object placed
03:54 - inside your building prefab you can let
03:56 - your designers easily place them when
03:57 - designing the buildings and that way it
03:59 - makes it it's super easy to edit and
04:00 - iterate also one thing to note as you
04:02 - place down road so for example over here
04:04 - there's this building which needs a road
04:05 - connection and if I place a road y there
04:07 - you go note how the mesh is generated so
04:09 - over here the road mesh is dynamically
04:11 - generated in order to make the actual
04:12 - connections between all the various
04:14 - points in fact the entire row this is
04:16 - all dynamically generated I covered
04:17 - dynamically generated meshes in a
04:19 - previous tutorial they are really great
04:20 - and you can do so much stuff with that
04:22 - method and speaking of dynamically
04:23 - generated meshes in this game the roads
04:25 - are just slightly altered for the most
04:27 - part they are pretty much relatively
04:28 - straight but if you wanted roads to be
04:30 - curved like in many city builders for
04:32 - that you simply need to make your roads
04:33 - using some kind of spine also cover that
04:35 - alongside Genera meshes in another
04:37 - tutorial once you learn the math behind
04:38 - spline it's actually pretty simple to
04:40 - use and I should also note that Unity
04:41 - has recently added their built-in spline
04:43 - tool I haven't used it myself just yet
04:45 - but from what I've seen looks quite
04:46 - capable then once you have the roads
04:48 - placed the units need to be able to go
04:50 - from one position to another one so
04:52 - basically they need pathf finding now
04:53 - there are many many ways to handle pathf
04:55 - finding for example one method that I
04:56 - covered in a previous tutorial that one
04:58 - is on making it grid based that's a
05:00 - great method but over here that would be
05:02 - Overkill since a lot of these roads as
05:03 - you can see they are pretty much
05:05 - straightforward so for example over here
05:06 - it would make no sense to have this one
05:08 - be grid based there's no point in having
05:10 - a grid position here here here here and
05:12 - so on all of these in order to find the
05:14 - PATH finding that makes no sense that
05:15 - would be a ton of wasted data so instead
05:18 - for this kind of game the best
05:19 - pathfinding method is simply a node
05:21 - based method so in all the places where
05:22 - the road intersects like for example
05:24 - over here over here and over here these
05:26 - are basically all nodes these are
05:27 - basically all points and then the path
05:29 - finding simply calculates the position
05:30 - between all of these various nodes now
05:32 - the underlying algorithm itself you
05:34 - still use the same ASR pathf finding
05:36 - Logic the exact same one that I covered
05:37 - in that video but simply make it based
05:39 - on individually placed nodes as opposed
05:41 - to every grid position being a node by
05:43 - default funnily enough this is exactly
05:45 - what I did in my own game blueprint
05:46 - Tycoon initially I went with a grid
05:48 - based pathfinding but it was pretty slow
05:49 - because the all in that game are pretty
05:51 - large and it has quite a lot of units so
05:53 - using grid based path finding the game
05:55 - simply did not work but by converting it
05:57 - to node based pathf finding by just
05:58 - doing that it literally became 100x
06:00 - faster since naturally it contains much
06:02 - much fewer nodes so basally in this game
06:04 - every time a node attaches to a road
06:06 - position or whenever it gets to a four
06:08 - grid splits in MO for those it simply
06:10 - creates a node and then this is
06:11 - obviously much more efficient than
06:12 - making the entire world split into one
06:14 - grid which would have thousands or maybe
06:16 - even millions of grid positions also one
06:18 - really amazing thing about this game is
06:20 - really just how optimized it is this one
06:22 - is not made with unity but it does make
06:23 - me wonder if they're using some kind of
06:25 - anti component system or really just a
06:27 - data oriented design even on large
06:29 - worlds like this one like for example
06:30 - over here I've got 1990 population and
06:33 - these are all individually simulated
06:35 - they all have their tasks they all have
06:36 - their goals they all move around they
06:38 - all have rendering and so on and even
06:39 - with all this the game has never really
06:41 - slowed down on my PC it is always
06:42 - working perfectly so in unity this would
06:44 - be the tough game that would be
06:45 - absolutely perfect for not each one of
06:47 - these individual units each one of these
06:49 - could be an individual entity and same
06:51 - thing for all the individual resources
06:53 - for example over here we can see all the
06:55 - piles of wood that this one is gathering
06:57 - these could all be individual entities
06:59 - so this kind of game this is really the
07:01 - perfect use case for Dots if you want to
07:02 - learn more about y dots I just recently
07:04 - made a really detailed video on it once
07:06 - you learned the basics it is actually
07:07 - pretty simple to use and yet playing
07:09 - this game definitely makes me want to
07:10 - try making a city Builder using dots
07:12 - okay so next on City Builder games like
07:14 - this one these are really all about
07:16 - Supply chains and Supply chains are
07:18 - really just about crafting for example
07:19 - this one the wood cutter this one just
07:21 - grabs some raw wood then brings over
07:23 - here onto the S Mill that s Mill takes
07:25 - wood and creates actual boards so
07:26 - there's this nice supply chain of
07:28 - objects being converted from one type
07:29 - onto the next and the best way to handle
07:31 - crafting is once again to hold the
07:32 - recipe data in some kind of script M
07:34 - object I've done a bunch of crafting
07:35 - systems and I use script M objects
07:37 - exactly for that and same thing in my
07:39 - own game d Guardians I also use them
07:40 - extensively so you can easily Define the
07:42 - inputs and outputs and then the building
07:44 - would simply take the recipe the player
07:46 - has selected and make a request for that
07:47 - specific input to then craft that output
07:49 - with some basic logic in scripal objects
07:51 - making this kind of Supply chains is
07:53 - actually pretty simple next is another
07:54 - really crucial one to these types of
07:56 - games time control this is something
07:58 - that every management or C builder game
08:00 - definitely needs to have in fact I think
08:01 - on the Early Access version for this
08:03 - game or actually it was a demo back then
08:05 - it did not have any time controls and
08:07 - people really did not like that so they
08:08 - definitely made sure to include it
08:10 - afterwards over here there's a nice time
08:12 - icon and I can increase it and go from
08:13 - 1X to 5x and everything works perfectly
08:15 - and again everything is still
08:17 - performance so the game is really nice
08:18 - now for this kind of thing the super
08:19 - simple way to handle this is really just
08:21 - to modify the time scale this will
08:23 - either speed up or slow down everything
08:24 - they uses time do all the time however
08:26 - that can also cause issues with things
08:28 - like particle effects or button
08:29 - animations so sometimes a better method
08:31 - could simply be to have your own updated
08:33 - logic basically have your own script
08:35 - that has a list of all the units or
08:36 - entities and then manually cycle through
08:38 - all of them and call some kind of update
08:40 - function while passing in the Delta time
08:41 - parameter that way you can easily modify
08:43 - that parameter in order to make the unit
08:45 - logic run faster or slower for example
08:47 - this is another thing that I also
08:48 - Implement in my game for the offw logic
08:50 - that one is all based on a custom
08:52 - updator in that example the reason why I
08:53 - did it was so that I could actually
08:55 - update less often so whilst the regular
08:57 - game the main World whilst that one is
08:58 - running at 60 frames per second for the
09:00 - off world those buildings and resources
09:02 - and all that logic all that runs at just
09:04 - 10 times per second which makes it much
09:05 - much more performant next for a quick
09:07 - one the mini map down here this is
09:09 - another one that I've covered in detail
09:10 - in a previous tutorial it's really
09:12 - pretty simple to build one it just
09:13 - requires a second camera and playing
09:14 - with some layers another important one
09:16 - for these types of games is having some
09:18 - kind of tool tip city builders usually
09:19 - have tons and tons of info that they
09:21 - need to show to the player so rather
09:22 - than having all that shown all the time
09:24 - it is only shown when the player hovers
09:26 - over a certain button or certain
09:27 - building another thing that might
09:29 - complement that tool tip is Simply
09:30 - Having a custom cursor for example I use
09:32 - custom cursor a lot in my Survivor Squad
09:34 - games in order to denote what action the
09:36 - player could take and if you want to
09:37 - easily make some custom cursors then
09:39 - check out my asset yet another tiny
09:41 - thing is simply the visual outlines when
09:43 - mousing over some kind of object or some
09:44 - kind of entity this makes it very clear
09:46 - that this object is currently being
09:47 - selected by the mouse this can be a
09:49 - simple Shader effect I covered an
09:51 - outline Shad in a previous video
09:52 - although that one is really only for 2D
09:54 - so for 3D there are several methods or
09:56 - you can do just like I did in my game
09:58 - and simply use one of the many assets
09:59 - that include this effect then you can
10:01 - just enable the outline on Mouse over
10:03 - and simply disable on Mouse out then on
10:05 - these types of games performances always
10:07 - going to be a concern and for that the
10:08 - best HP that I can give you is simply
10:10 - remember you don't have to run all the
10:11 - logic at the same time meaning for
10:13 - example on some kind of building like
10:15 - the wood Harvester over here for this
10:16 - one like I said the building needs to
10:18 - find the nearby trees to cut however
10:20 - there's absolutely no reason why you
10:21 - need to run that logic 60 times per
10:23 - second trees don't really grow that fast
10:25 - so a simple way to massively improve
10:26 - performance is just add some kind of
10:28 - timer in order to run some logic much
10:30 - less often than on update for example
10:31 - over here on the wood Harvester maybe
10:33 - just once or even just five times per
10:35 - second that would be more than enough
10:36 - and make the game Run much much faster
10:38 - same thing for when the unit is stuck
10:40 - during pathf finding if they're waiting
10:41 - for a path to get somewhere once again
10:43 - you don't need for that unit to try
10:44 - pathf finding on every single update
10:46 - really just once or twice per second
10:48 - would work so when you have performance
10:49 - issues first of all look into dots since
10:51 - that would kind of solve a lot of
10:52 - problems if you use that technique but
10:54 - just in general remember you don't have
10:56 - to run all the logic all the time now
10:58 - for some mechan mechanic specific to
10:59 - this game this game has some kind of
11:01 - task system for example if I place down
11:03 - some building so I place down something
11:05 - like this when I place it down it
11:06 - actually places an empty building then
11:08 - diggers have to come in in order to dig
11:10 - then Builders bring some resources and
11:11 - they actually start building so
11:13 - basically it requires a bunch of tasks
11:14 - to be completed Point by point I
11:16 - actually built a really capable test
11:18 - system for my game battle ra Tycoon and
11:19 - I made a series of tutorials on exactly
11:21 - how it works basically you have some
11:23 - kind of list and when the player places
11:24 - a building you add some tasks to that
11:26 - list for example add a task to grab some
11:28 - wood and drop it over here then add some
11:29 - tasks to building then various units
11:31 - have different jobs they'll look at the
11:33 - test list and see if any task can be
11:34 - done by them then they see if the
11:36 - requirements of the task can be done
11:37 - like for example before building make
11:38 - sure there's actual resources to build
11:40 - and if so then simply execute that task
11:42 - I remember building this system for my
11:44 - game and that was a lot of fun it was
11:45 - definitely one of the most enjoyable
11:47 - programming tasks for that game
11:48 - definitely makes me want to rebuild
11:50 - something like that again with knowledge
11:51 - that I have today and another system for
11:53 - this game is a world expansion system
11:55 - you can pretty much only build in a
11:56 - limited area then you need to build some
11:58 - guard Tower towers and expand your build
12:00 - area the guards basically go to a nearby
12:01 - area limit to expand it so in order to
12:03 - set up which parts of the map can be
12:05 - built or not for that you can use some
12:07 - kind of grid system although in this
12:08 - game it looks a little bit more free
12:10 - form and not really a harsh grid so
12:11 - another alternative could simply be to
12:13 - use a texture then when expand the Whirl
12:15 - you would simply paint that texture kind
12:16 - of like it did in the Rover mechanic
12:18 - simulator video you paint on the texture
12:20 - and then read that texture on a specific
12:21 - point to see where exactly the player
12:23 - can build all right so that's a highle
12:24 - overview on how to make a city Builder
12:26 - using the game pioneers of pagonia as an
12:28 - example I made a page on the website
12:30 - with all of the tutorial links that I
12:31 - mentioned previously hopefully this High
12:33 - LEL overview video can point you in the
12:34 - right direction for building a game just
12:36 - like this if you're looking for a guided
12:38 - path on this genre check out my Builder
12:39 - defender course or in order to learn how
12:41 - to make better games faster check out my
12:42 - ultimate unity over course all right so
12:45 - thanks for watching and I'll see you
12:46 - next
12:57 - time
13:01 - a

Cleaned transcript:

hello and welcome I'm your km here let's see a highle overview on how to make a city Builder game first I want to cover the core Mechanics for pretty much any City Builder and how I would build them then I will cover some mechanics specific to this game that I've been playing pioneers of pagonia it's pretty great I very much enjoyed playing it it's a spiritual successor to the settlers games it's actually made by the original creator of the original series I really enjoyed playing those as a kid I loved how all the resources actually exist in the world unlike games like Age of Empires where it was really just number and this one is a great modern game that definitely captures that same feel I made a page on the website with links to all the various tutorials that I'm going to reference it's all Linked In the description many of these are topics that I have covered in detail previously so if you'd like to make a game in this genre hopefully this video and these links will help point you in the right direction if you want to build a game like this and you're looking for a more guide path and my Builder defender course would be a great starting point it features many mechanics that are used in both City Builder or Tower Defense games the game of the course in 2D but you could very easily convert Sprites into 3D meshes or check out my ultimate un overview course the go with that one is to help you make better games faster by teaching you about the tons of tools and features that Unity has that you might not know about okay so here is the mechanic list let's begin with the most basic ones that are common for any City Builder or Village management game the main thing is really a simple one these games usually have overhead view so you need to get the mouse run position basically the player controls the mouse and they need to be able to see that when the mouse is over here it is hitting that Terin position this is pretty simple and something I have covered in a dedicated tutorial previously you pretty much just do a rast from the camera towards the mouse position to hit some kind of terrain ler and then you get that worm position now with the mouse worm position the other important part is simply placing down buildings so selecting a building and being able to place it anywhere and for the buildings themselves the easiest way to handle buildings is simply with prefabs so you make a prefab for a wood cutter another for a sawmill another for a house and so on you get the mzor position and simply essentiate the prefab on that position then in terms of organizing all of your buildings for that the best way is really to use a script M object these are objects or assets that you can create in your project files which are great as data containers you can sort the building's prefab the building Sprite name and so on for example all the buildings in my game the Guardians they all have script M objects who hold the data for that specific building time and I did pretty much exact same thing on my Builder defender course which like I mentioned that course is great if you're looking for a guided stepbystep path on making this kind of City Builder game a lot of the mechanics Implement in that course are appable to both city builders and Tower Defense games so with that we can now select the building and simply place it down then for the building logic itself for that you can simply attach scripts directly onto those same prefabs the logic is naturally going to depend on what exactly you want that building to do so a lot of the logic in these kinds of games is based on the building finding out nearby buildings or resources for example over here I've got a wood cutting Hut this building basically requires trees nearby and the simplest way to find nearby objects the simplest way simply to use a basic physics query you really just do an overlap sphere which lets you find all the objects in an area as long as they have a collider that's one of the methods that I use in my find Targets video finding targets to attack or really any other object it's all really the same so with that simple query you can find all of the objects nearby then you simply simply cycle through them just to get the ones of a specific type so for example over here you would attach some kind of tag component to all of these three objects and then simply cycle through them and find only the ones that are trees so you would ignore all these buildings all these people and so on then with that you can do whatever logic you want like for example over here this wood Harvester you would probably want to find the closest tree and then assign some kind of task so that one of these settlers would go to dra tree and then Harvest it then in general in terms of city builders there are usually two main types ones that are free form where you can place the buildings anywhere and others where they are Road based and each building must be attached to a road in order to function this game is very much Road based so I can select to place on a road and there you go I can place it anywhere and connected to various points then the buildings themselves they also have entry points they need to be connected to a road in order to actually function if they're not connected to a road if I place it in the middle of nowhere there's a nice little flag saying there's no road so this one is not going to work so in order to position that road point that could be a very simple empty game object placed inside your building prefab you can let your designers easily place them when designing the buildings and that way it makes it it's super easy to edit and iterate also one thing to note as you place down road so for example over here there's this building which needs a road connection and if I place a road y there you go note how the mesh is generated so over here the road mesh is dynamically generated in order to make the actual connections between all the various points in fact the entire row this is all dynamically generated I covered dynamically generated meshes in a previous tutorial they are really great and you can do so much stuff with that method and speaking of dynamically generated meshes in this game the roads are just slightly altered for the most part they are pretty much relatively straight but if you wanted roads to be curved like in many city builders for that you simply need to make your roads using some kind of spine also cover that alongside Genera meshes in another tutorial once you learn the math behind spline it's actually pretty simple to use and I should also note that Unity has recently added their builtin spline tool I haven't used it myself just yet but from what I've seen looks quite capable then once you have the roads placed the units need to be able to go from one position to another one so basically they need pathf finding now there are many many ways to handle pathf finding for example one method that I covered in a previous tutorial that one is on making it grid based that's a great method but over here that would be Overkill since a lot of these roads as you can see they are pretty much straightforward so for example over here it would make no sense to have this one be grid based there's no point in having a grid position here here here here and so on all of these in order to find the PATH finding that makes no sense that would be a ton of wasted data so instead for this kind of game the best pathfinding method is simply a node based method so in all the places where the road intersects like for example over here over here and over here these are basically all nodes these are basically all points and then the path finding simply calculates the position between all of these various nodes now the underlying algorithm itself you still use the same ASR pathf finding Logic the exact same one that I covered in that video but simply make it based on individually placed nodes as opposed to every grid position being a node by default funnily enough this is exactly what I did in my own game blueprint Tycoon initially I went with a grid based pathfinding but it was pretty slow because the all in that game are pretty large and it has quite a lot of units so using grid based path finding the game simply did not work but by converting it to node based pathf finding by just doing that it literally became 100x faster since naturally it contains much much fewer nodes so basally in this game every time a node attaches to a road position or whenever it gets to a four grid splits in MO for those it simply creates a node and then this is obviously much more efficient than making the entire world split into one grid which would have thousands or maybe even millions of grid positions also one really amazing thing about this game is really just how optimized it is this one is not made with unity but it does make me wonder if they're using some kind of anti component system or really just a data oriented design even on large worlds like this one like for example over here I've got 1990 population and these are all individually simulated they all have their tasks they all have their goals they all move around they all have rendering and so on and even with all this the game has never really slowed down on my PC it is always working perfectly so in unity this would be the tough game that would be absolutely perfect for not each one of these individual units each one of these could be an individual entity and same thing for all the individual resources for example over here we can see all the piles of wood that this one is gathering these could all be individual entities so this kind of game this is really the perfect use case for Dots if you want to learn more about y dots I just recently made a really detailed video on it once you learned the basics it is actually pretty simple to use and yet playing this game definitely makes me want to try making a city Builder using dots okay so next on City Builder games like this one these are really all about Supply chains and Supply chains are really just about crafting for example this one the wood cutter this one just grabs some raw wood then brings over here onto the S Mill that s Mill takes wood and creates actual boards so there's this nice supply chain of objects being converted from one type onto the next and the best way to handle crafting is once again to hold the recipe data in some kind of script M object I've done a bunch of crafting systems and I use script M objects exactly for that and same thing in my own game d Guardians I also use them extensively so you can easily Define the inputs and outputs and then the building would simply take the recipe the player has selected and make a request for that specific input to then craft that output with some basic logic in scripal objects making this kind of Supply chains is actually pretty simple next is another really crucial one to these types of games time control this is something that every management or C builder game definitely needs to have in fact I think on the Early Access version for this game or actually it was a demo back then it did not have any time controls and people really did not like that so they definitely made sure to include it afterwards over here there's a nice time icon and I can increase it and go from 1X to 5x and everything works perfectly and again everything is still performance so the game is really nice now for this kind of thing the super simple way to handle this is really just to modify the time scale this will either speed up or slow down everything they uses time do all the time however that can also cause issues with things like particle effects or button animations so sometimes a better method could simply be to have your own updated logic basically have your own script that has a list of all the units or entities and then manually cycle through all of them and call some kind of update function while passing in the Delta time parameter that way you can easily modify that parameter in order to make the unit logic run faster or slower for example this is another thing that I also Implement in my game for the offw logic that one is all based on a custom updator in that example the reason why I did it was so that I could actually update less often so whilst the regular game the main World whilst that one is running at 60 frames per second for the off world those buildings and resources and all that logic all that runs at just 10 times per second which makes it much much more performant next for a quick one the mini map down here this is another one that I've covered in detail in a previous tutorial it's really pretty simple to build one it just requires a second camera and playing with some layers another important one for these types of games is having some kind of tool tip city builders usually have tons and tons of info that they need to show to the player so rather than having all that shown all the time it is only shown when the player hovers over a certain button or certain building another thing that might complement that tool tip is Simply Having a custom cursor for example I use custom cursor a lot in my Survivor Squad games in order to denote what action the player could take and if you want to easily make some custom cursors then check out my asset yet another tiny thing is simply the visual outlines when mousing over some kind of object or some kind of entity this makes it very clear that this object is currently being selected by the mouse this can be a simple Shader effect I covered an outline Shad in a previous video although that one is really only for 2D so for 3D there are several methods or you can do just like I did in my game and simply use one of the many assets that include this effect then you can just enable the outline on Mouse over and simply disable on Mouse out then on these types of games performances always going to be a concern and for that the best HP that I can give you is simply remember you don't have to run all the logic at the same time meaning for example on some kind of building like the wood Harvester over here for this one like I said the building needs to find the nearby trees to cut however there's absolutely no reason why you need to run that logic 60 times per second trees don't really grow that fast so a simple way to massively improve performance is just add some kind of timer in order to run some logic much less often than on update for example over here on the wood Harvester maybe just once or even just five times per second that would be more than enough and make the game Run much much faster same thing for when the unit is stuck during pathf finding if they're waiting for a path to get somewhere once again you don't need for that unit to try pathf finding on every single update really just once or twice per second would work so when you have performance issues first of all look into dots since that would kind of solve a lot of problems if you use that technique but just in general remember you don't have to run all the logic all the time now for some mechan mechanic specific to this game this game has some kind of task system for example if I place down some building so I place down something like this when I place it down it actually places an empty building then diggers have to come in in order to dig then Builders bring some resources and they actually start building so basically it requires a bunch of tasks to be completed Point by point I actually built a really capable test system for my game battle ra Tycoon and I made a series of tutorials on exactly how it works basically you have some kind of list and when the player places a building you add some tasks to that list for example add a task to grab some wood and drop it over here then add some tasks to building then various units have different jobs they'll look at the test list and see if any task can be done by them then they see if the requirements of the task can be done like for example before building make sure there's actual resources to build and if so then simply execute that task I remember building this system for my game and that was a lot of fun it was definitely one of the most enjoyable programming tasks for that game definitely makes me want to rebuild something like that again with knowledge that I have today and another system for this game is a world expansion system you can pretty much only build in a limited area then you need to build some guard Tower towers and expand your build area the guards basically go to a nearby area limit to expand it so in order to set up which parts of the map can be built or not for that you can use some kind of grid system although in this game it looks a little bit more free form and not really a harsh grid so another alternative could simply be to use a texture then when expand the Whirl you would simply paint that texture kind of like it did in the Rover mechanic simulator video you paint on the texture and then read that texture on a specific point to see where exactly the player can build all right so that's a highle overview on how to make a city Builder using the game pioneers of pagonia as an example I made a page on the website with all of the tutorial links that I mentioned previously hopefully this High LEL overview video can point you in the right direction for building a game just like this if you're looking for a guided path on this genre check out my Builder defender course or in order to learn how to make better games faster check out my ultimate unity over course all right so thanks for watching and I'll see you next time a
