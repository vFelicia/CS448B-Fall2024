With timestamps:

00:00 - in this video we're going to cover
00:01 - holding down the mouse button to
00:03 - implement very Vaughn launch power let's
00:05 - begin
00:08 - [Music]
00:13 - hello and welcome I'm your code monkey
00:15 - and this channel is all about helping
00:16 - you learn how to make your own games
00:18 - with nf2 torrents made by a professional
00:20 - indie game developer so if you find the
00:22 - video how fun consider subscribing so
00:24 - here's our goal there's this bird here
00:26 - just sitting around and if I click
00:28 - somewhere I can launch him in the
00:30 - opposite direction of the mouse so click
00:32 - down here and he does just a tiny jump
00:34 - now in this case we want to test the
00:36 - illogic for holding the button down to
00:38 - launch him towards that tower so we have
00:41 - the logic that longer eHome the bigger
00:43 - the force and yep there we go and after
00:46 - two seconds we reach maximum force and
00:48 - he gets launched and the goal is to hold
00:50 - so we can point towards the tower and
00:53 - fire okay so that's our goal let's get
00:58 - to it so here we are in the starring
01:01 - scene and if I play you can see that the
01:04 - only thing it has our physics so there
01:06 - you go start playing everything falls
01:07 - down okay
01:08 - now the logic for holding the button
01:10 - down is actually quite simple so let's
01:13 - start off with a simple testing script
01:15 - to run our code so in here we create a
01:18 - new C sharp script this will be our
01:19 - testing script let's create a game
01:22 - object called testing and drag the
01:24 - script on to it okay now in here let's
01:27 - first make a simple predatory update and
01:31 - the first thing we need is to listen to
01:33 - input so for that we do an if input that
01:36 - get mouse button down this function
01:39 - returns true on the very first frame
01:41 - that we press the button and it takes a
01:44 - parameter for the button index so for
01:46 - that the left mouse button is on index 0
01:49 - and the right mouse button is on index 1
01:51 - so in this case we want to test for the
01:53 - left mouse button so we just pass in a 0
01:57 - okay so in here we have the code that
01:59 - will be triggered once when we press
02:01 - down on the button so much is to a
02:03 - simple debug log and say button down now
02:09 - just like we have get mouse button down
02:10 - we also have a if input that get mouse
02:13 - button up which gets triggered on the
02:16 - frame that the mouse button is up so we
02:19 - do again on the
02:20 - next zero and the way debug that walk
02:26 - okay so let's see this code in action
02:29 - okay here we are and here's the console
02:32 - now I press the mouse button and there
02:33 - you go button down now I let go and yet
02:36 - there you go button oh okay great so we
02:38 - are correctly capturing when we press in
02:40 - and let go of our button so with that
02:43 - essentially we have everything we need
02:44 - to start the hold and finish the home so
02:47 - in the same that gone with holding the
02:49 - mouse button is to define the force that
02:51 - we fire our bird
02:52 - so for that the bird has a bird class so
02:57 - let's add a reference on our testing
02:59 - class so we make a civilized film so we
03:01 - can set it in the editor for the private
03:03 - bird and we have our bird reference so
03:06 - now back in the editor here we have a
03:08 - field and we simply drag the bird onto
03:11 - it so drag the bird just like that okay
03:13 - the birth class has two very simple
03:16 - functions we can use we have the launch
03:18 - and the show force functions as the name
03:20 - of quantize this one shows a certain
03:22 - amount of force and this one uses
03:24 - physics to launch our bird so right now
03:26 - let's just use lunch to test launching
03:28 - so let's go back into our testing code
03:30 - and here we want to launch only one will
03:33 - let go of the mouse button so we go in
03:35 - here onto the mouse button up and we
03:38 - call her launch then here in let's just
03:41 - pass in a random force okay
03:44 - so let's test and see the code in action
03:46 - okay here we are here's my bird and if I
03:49 - click yeah there you go as you can see
03:52 - when I press down it just says the log
03:54 - and when I let go yep the bird flies up
03:56 - okay so we have the illogic working now
04:00 - the goal with this video is to test for
04:01 - holding down the mouse button so let's
04:03 - work on making the force dependent based
04:05 - on how long we hold the button down so
04:08 - for that we simply need to know when we
04:10 - start pressing and when we actually let
04:12 - go
04:12 - so let's go in here and we're going to
04:15 - define a private mode for the home down
04:17 - start time this will hold the curtain
04:21 - time when you start holding down so we
04:24 - go down here onto the mouse button down
04:25 - and we simply set it based on time dot
04:28 - time this contains the time in seconds
04:32 - since II started the game so here we
04:35 - define the time and then on the mouse
04:37 - button up we can calculate the whole
04:41 - down time which will be the current time
04:43 - minus the whole down start time so just
04:48 - like that we have the number of seconds
04:49 - that the mouse button was held down now
04:51 - with this value all we need is to
04:53 - convert it into a force that we want so
04:55 - let's make a function to do that down
04:57 - here we make a private cloud so
05:02 - calculate home down force and we receive
05:04 - a point for each time
05:06 - so with that time let's define also the
05:08 - amount of time to reach the maximum
05:10 - force so we make a float for the max
05:13 - force hold down time and let's say we
05:17 - want to maximum after two seconds then
05:20 - we normalize our whole time so a float
05:23 - for the whole time normalized you will
05:27 - essentially be the time divided by the
05:29 - max force from downtown so let's just
05:32 - rename this to home time to make this
05:34 - clear and then we just do a math F dot
05:38 - clamp zero one in order to make sure
05:40 - this value stays between zero and one
05:43 - okay so with the hometown normalized all
05:46 - we need to do really is to multiply it
05:48 - by the max force and the birth class has
05:50 - exactly that we got a constant for the
05:52 - max force so in here we define a float
05:55 - for the final force which will be the
05:57 - whole time normalized multiplied by the
06:00 - bird max force so if we hold the button
06:03 - down for two seconds we're going to have
06:05 - max force if we hold down for just one
06:07 - second we're going to have half and
06:12 - that's pretty much it for calculating
06:14 - our force so in here we have the whole
06:16 - down time and then we're going to launch
06:18 - with the force of completely calm down
06:20 - force and passing the home down time
06:23 - okay let you do it let's test and see if
06:25 - we can indeed change the amount of force
06:27 - we apply so here we are now just a
06:30 - simple point to see if it jumps just a
06:32 - tiny bit and if there you go just a tiny
06:34 - bit now if I home for two seconds
06:37 - yep there you go he goes with a lot more
06:40 - force
06:41 - so we pretty much have our logic for
06:43 - holding down the mouse button fully
06:44 - working now as one final thing we have
06:47 - in the bird class a function to show the
06:49 - current force so let's use that so we
06:51 - can see how long we have been holding
06:53 - here in the code we only want to show
06:55 - the force when the button is held down
06:57 - so we can use the other input function
06:59 - which is input not get mouse button so
07:05 - this one returns true whenever the
07:07 - button is held down so whereas this one
07:09 - is only true for example in one frame
07:11 - this one is true for as long as the
07:13 - button is held down so we test the same
07:15 - button index and we can use this to show
07:19 - our force so we call the bird down show
07:22 - force and then we pass in the same force
07:25 - that we calculated up here okay so
07:33 - here's our code first we test for the
07:35 - mouse button down and we store the
07:37 - current time as the home down start time
07:39 - then we're testing for every frame that
07:41 - the mouse button is held down while it's
07:44 - held down we call the bird that show
07:45 - force in order to show the current force
07:47 - based on this whole down time and
07:49 - finally when we let go of the mouse
07:51 - button we again calculate the force and
07:53 - we tell the bird to and watch okay so
07:55 - this should do it let's see here we are
07:58 - now let's see if I click and I hold yep
08:01 - there you go the forces increasing and
08:03 - after two seconds it reaches the maximum
08:04 - and it no longer goes up now if I want
08:07 - to fire two words there I go and boom
08:09 - there we go the bird is indeed fun and
08:12 - if I home you can see that the force the
08:14 - indicator is the pendant based on how
08:16 - long we call the mouse button down so if
08:18 - we hold for just a bit he just gets a
08:20 - tiny jump and hold for the maximum which
08:23 - is after two seconds and there you go he
08:25 - goes flying so we can now launch his
08:27 - bird round and define the force based on
08:29 - how long we hold the mouse button down
08:31 - as always you can download the project
08:34 - from the new tony's from unity called
08:35 - monkey comm if you liked the video
08:37 - subscribe to the channel for more unity
08:39 - tutorials post any questions you have in
08:42 - the car
08:42 - I'll do my best instrument alright see
08:44 - you next time
08:48 - [Music]

Cleaned transcript:

in this video we're going to cover holding down the mouse button to implement very Vaughn launch power let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with nf2 torrents made by a professional indie game developer so if you find the video how fun consider subscribing so here's our goal there's this bird here just sitting around and if I click somewhere I can launch him in the opposite direction of the mouse so click down here and he does just a tiny jump now in this case we want to test the illogic for holding the button down to launch him towards that tower so we have the logic that longer eHome the bigger the force and yep there we go and after two seconds we reach maximum force and he gets launched and the goal is to hold so we can point towards the tower and fire okay so that's our goal let's get to it so here we are in the starring scene and if I play you can see that the only thing it has our physics so there you go start playing everything falls down okay now the logic for holding the button down is actually quite simple so let's start off with a simple testing script to run our code so in here we create a new C sharp script this will be our testing script let's create a game object called testing and drag the script on to it okay now in here let's first make a simple predatory update and the first thing we need is to listen to input so for that we do an if input that get mouse button down this function returns true on the very first frame that we press the button and it takes a parameter for the button index so for that the left mouse button is on index 0 and the right mouse button is on index 1 so in this case we want to test for the left mouse button so we just pass in a 0 okay so in here we have the code that will be triggered once when we press down on the button so much is to a simple debug log and say button down now just like we have get mouse button down we also have a if input that get mouse button up which gets triggered on the frame that the mouse button is up so we do again on the next zero and the way debug that walk okay so let's see this code in action okay here we are and here's the console now I press the mouse button and there you go button down now I let go and yet there you go button oh okay great so we are correctly capturing when we press in and let go of our button so with that essentially we have everything we need to start the hold and finish the home so in the same that gone with holding the mouse button is to define the force that we fire our bird so for that the bird has a bird class so let's add a reference on our testing class so we make a civilized film so we can set it in the editor for the private bird and we have our bird reference so now back in the editor here we have a field and we simply drag the bird onto it so drag the bird just like that okay the birth class has two very simple functions we can use we have the launch and the show force functions as the name of quantize this one shows a certain amount of force and this one uses physics to launch our bird so right now let's just use lunch to test launching so let's go back into our testing code and here we want to launch only one will let go of the mouse button so we go in here onto the mouse button up and we call her launch then here in let's just pass in a random force okay so let's test and see the code in action okay here we are here's my bird and if I click yeah there you go as you can see when I press down it just says the log and when I let go yep the bird flies up okay so we have the illogic working now the goal with this video is to test for holding down the mouse button so let's work on making the force dependent based on how long we hold the button down so for that we simply need to know when we start pressing and when we actually let go so let's go in here and we're going to define a private mode for the home down start time this will hold the curtain time when you start holding down so we go down here onto the mouse button down and we simply set it based on time dot time this contains the time in seconds since II started the game so here we define the time and then on the mouse button up we can calculate the whole down time which will be the current time minus the whole down start time so just like that we have the number of seconds that the mouse button was held down now with this value all we need is to convert it into a force that we want so let's make a function to do that down here we make a private cloud so calculate home down force and we receive a point for each time so with that time let's define also the amount of time to reach the maximum force so we make a float for the max force hold down time and let's say we want to maximum after two seconds then we normalize our whole time so a float for the whole time normalized you will essentially be the time divided by the max force from downtown so let's just rename this to home time to make this clear and then we just do a math F dot clamp zero one in order to make sure this value stays between zero and one okay so with the hometown normalized all we need to do really is to multiply it by the max force and the birth class has exactly that we got a constant for the max force so in here we define a float for the final force which will be the whole time normalized multiplied by the bird max force so if we hold the button down for two seconds we're going to have max force if we hold down for just one second we're going to have half and that's pretty much it for calculating our force so in here we have the whole down time and then we're going to launch with the force of completely calm down force and passing the home down time okay let you do it let's test and see if we can indeed change the amount of force we apply so here we are now just a simple point to see if it jumps just a tiny bit and if there you go just a tiny bit now if I home for two seconds yep there you go he goes with a lot more force so we pretty much have our logic for holding down the mouse button fully working now as one final thing we have in the bird class a function to show the current force so let's use that so we can see how long we have been holding here in the code we only want to show the force when the button is held down so we can use the other input function which is input not get mouse button so this one returns true whenever the button is held down so whereas this one is only true for example in one frame this one is true for as long as the button is held down so we test the same button index and we can use this to show our force so we call the bird down show force and then we pass in the same force that we calculated up here okay so here's our code first we test for the mouse button down and we store the current time as the home down start time then we're testing for every frame that the mouse button is held down while it's held down we call the bird that show force in order to show the current force based on this whole down time and finally when we let go of the mouse button we again calculate the force and we tell the bird to and watch okay so this should do it let's see here we are now let's see if I click and I hold yep there you go the forces increasing and after two seconds it reaches the maximum and it no longer goes up now if I want to fire two words there I go and boom there we go the bird is indeed fun and if I home you can see that the force the indicator is the pendant based on how long we call the mouse button down so if we hold for just a bit he just gets a tiny jump and hold for the maximum which is after two seconds and there you go he goes flying so we can now launch his bird round and define the force based on how long we hold the mouse button down as always you can download the project from the new tony's from unity called monkey comm if you liked the video subscribe to the channel for more unity tutorials post any questions you have in the car I'll do my best instrument alright see you next time
