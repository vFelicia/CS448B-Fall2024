With timestamps:

00:00 - in this video we're going to look at how
00:01 - i made a complete match 3 game in just
00:03 - under 6 hours
00:04 - this is a very popular genre because you
00:06 - can use these underlying mechanics with
00:08 - just about any theme
00:09 - it's easy to learn easy to play and very
00:11 - versatile let's begin
00:18 - alright so let's check out the game i
00:19 - made in under six hours
00:21 - it is a mastery game now i made this
00:24 - because i'm working on a video where i
00:25 - need a mastery game in order to
00:27 - demonstrate something really awesome
00:28 - so stay tuned for that upcoming video
00:31 - and works out great since this is a very
00:33 - popular genre but i haven't covered it
00:34 - in any videos just yet
00:36 - also my goal with this video is to show
00:38 - you the power of experience
00:40 - so if i tried to do this several years
00:41 - ago it would have taken me over a week
00:43 - and perhaps over a month in order to
00:45 - build this but right now thanks to my 20
00:47 - years of programming experience and
00:49 - almost 10 years of unity i can build
00:51 - something like this very quickly
00:52 - so this works as a great example on why
00:54 - you should focus on getting more and
00:56 - more experience and make as many things
00:57 - as you can
00:58 - that really is the main thing that
01:00 - defines just how good and efficient you
01:02 - are
01:02 - i made not just the base game but also a
01:04 - ton of features in such a short period
01:06 - of time
01:07 - it has the standard match 3 game
01:09 - mechanics so you click and drag to move
01:11 - gems in order to make a match
01:12 - and when a match happens the gems get
01:14 - cleared so that's a standard game
01:16 - but then i also made a fully functioning
01:18 - level editor so
01:19 - i can easily create levels with any grid
01:22 - shape i want and manually design the
01:23 - starting state
01:24 - i also implemented two different goal
01:26 - times so there's a basic score going
01:28 - where you must reach a certain score
01:30 - amount
01:31 - and also a glass going where some gems
01:33 - are encased in glass and it needs to be
01:35 - destroyed
01:36 - i can just right click on a grid
01:37 - position in the level editor in order to
01:39 - encase it in glass
01:40 - and lastly i also made a bot to
01:42 - automatically play the game
01:43 - so it analyzes the board and decides
01:45 - what the best move would be and simply
01:47 - does it
01:47 - so it is smart enough to understand how
01:49 - to win the score goal as well as the
01:51 - glass goal
01:52 - this bot is a requirement for that other
01:54 - video that i'm working on so stay tuned
01:56 - to see how i will use this
01:57 - so in such a short amount of time i made
02:00 - not just a game but also a fully
02:01 - functioning level editor
02:02 - as well as a automated bot to test
02:04 - playing through the game
02:06 - okay so here's how i made it first of
02:08 - all the reason why i managed to do it so
02:09 - quickly is because like i always say you
02:11 - should always write clean code
02:13 - so rather than starting from a
02:14 - completely empty project i start from my
02:16 - base project that i use for all my
02:18 - videos
02:19 - so i already have the project set up
02:20 - with urp and already have tons of helper
02:23 - scripts and classes in the project files
02:25 - so pretty much everything was made in
02:26 - separate videos over the two years that
02:28 - i've been running this channel
02:30 - and in here i already have the grid
02:31 - class implemented so this is a really
02:33 - good real generic class with tons of
02:35 - features and it was funny made in
02:37 - several previous videos so check those
02:38 - out to learn more
02:39 - with this class i can very easily make
02:41 - the underlying grid for the game
02:43 - within a few minutes i have a grid
02:44 - visible and each root position has a
02:46 - word
02:46 - object then i use scriptable objects to
02:49 - hone the gem types
02:50 - i also covered them in detail in a
02:52 - previous video then let you define
02:54 - fields and store assets with all the
02:55 - data
02:56 - so i defined an object for each gem type
02:58 - which really makes it easy to customize
03:00 - each gem as well as easily add more
03:02 - types next again i made sure to write
03:04 - clean code so i separate the visuals
03:06 - from the underlying logic
03:08 - so there's a main match 3 script with a
03:10 - grid and logic
03:11 - and then a match 3 visual script which
03:13 - sets up on the visual representation
03:16 - i made a simple prefab for each gem so
03:18 - pretty much just normal sprite
03:19 - and i made a class to handle the visual
03:21 - representation it is connected to the
03:23 - underlying gem object
03:24 - and that class also has some simple
03:26 - smooth movement implemented
03:28 - so it just has the update method that
03:30 - smoothly moves the transform towards
03:32 - the underlying gem object position then
03:34 - with that i just spawned all the gems on
03:36 - top and they automatically fall into
03:37 - place
03:38 - so again really awesome clean code and
03:40 - as far as the underlying grid logic
03:42 - is concerned there's no animations
03:43 - anywhere the gems are just spawned in
03:45 - their position
03:46 - and that's it the visual script is what
03:48 - handles a nice smooth visual animation
03:50 - then for the player input again i kept
03:52 - it separate from the logic
03:54 - so the underlying match 3 script doesn't
03:56 - know anything about any player input it
03:58 - just has methods to swap positions
04:00 - so this was very useful later on when i
04:02 - made the bot script to play it
04:03 - automatically
04:04 - so i implement the simple state machine
04:06 - for the visual script
04:08 - it stays busy while there's an animation
04:10 - happening and then goes into the state
04:11 - listening for the player input
04:13 - then the input is based on the mouse so
04:15 - when the player presses the mouse button
04:16 - it keeps track of where it was pressed
04:19 - then when the player releases the mouse
04:20 - it knows that second position so with
04:22 - those two we know the starting point
04:24 - and direction of our swap so it just
04:25 - swaps those two gems then working on the
04:27 - logic for the matches
04:28 - this took a bit of work to think of a
04:30 - good approach but afterwards it's quite
04:32 - simple
04:33 - since the game lives on a grid it's easy
04:34 - to look at the grid neighbors
04:36 - so just take a certain grid position
04:38 - then look at how many gems of the same
04:40 - type are right next to it so start by
04:42 - looking the first one on the left
04:43 - and if it is the same then look at the
04:45 - next one and so on so do that for the
04:47 - left right up down
04:49 - directions and then simply keep a
04:50 - counter of how many of the same type are
04:52 - together
04:53 - then if it's more than three
04:55 - horizontally or vertically we have a
04:57 - match
04:57 - next making the matchy gems be clear so
05:00 - after finding a match we simply go
05:02 - through all the
05:03 - link gems and destroy them and again
05:05 - since i organized the project in a nice
05:06 - clean way this is very easy to implement
05:09 - i just added the event to the underlying
05:10 - gem grid object it fires the event when
05:12 - it is clear
05:13 - then the visual just listens to that
05:15 - event and when that happens it destroys
05:17 - the visual game object
05:19 - so i tested that and it worked perfectly
05:20 - fine and afterwards i simply made a nice
05:23 - small particle effect when the gem gets
05:25 - destroyed next up making the gems fall
05:27 - into new empty positions
05:28 - so the logic for this is rather simple
05:30 - just cycle through the whole grid and
05:32 - for every gem look at the positions
05:34 - underneath
05:34 - if there is an empty position then you
05:36 - move that gem to that position
05:38 - so that's it pretty simple and due to
05:40 - the way that i set up the visuals there
05:41 - is nothing else i need to change
05:42 - the visuals already ask for the
05:44 - underlying word position and smoothly
05:46 - move them so as long as the gem grid
05:48 - object changes position
05:49 - then the visual will smoothly follow
05:52 - then handling the spawning of new gems
05:54 - so after all the gems fall down into
05:56 - valid positions i need to spawn some
05:57 - more
05:58 - so this one is also very simple just
06:00 - cycle through the whole grid and look
06:02 - for empty grid positions and suddenly
06:03 - film it
06:04 - again since the code is nicely organized
06:06 - the visual script didn't need to change
06:07 - much
06:08 - it just needed to listen to an event
06:10 - when new gems are created
06:12 - and when that happens it creates the
06:13 - visual representation by spawning the
06:15 - prefab
06:15 - and the visual object so that's it very
06:17 - simple and with this the game is almost
06:20 - only working according to the base game
06:21 - design so the word is set up with gems
06:24 - and i can click and drag to swap them
06:26 - if there is a match then the link gems
06:27 - get destroyed all with a really nice
06:30 - visual and made with some really clean
06:31 - code
06:32 - so at this point it had only been pretty
06:34 - much under two hours so if my goal was
06:36 - just to make a bare bones match three
06:37 - game then this is how fast i could do it
06:40 - but my goal was to expand upon it so i
06:42 - kept going
06:43 - next up making the level editor now i
06:45 - wanted a level editor so i could
06:47 - manually design the starting state of
06:48 - the level
06:49 - and for that i also use the awesome
06:51 - scriptable object to save the data
06:53 - so first defining the structure the
06:55 - level needs a width
06:56 - and height of the underlying grid object
06:58 - then i define the class to home each
07:00 - grid position object
07:02 - so it has the gem type that is meant to
07:04 - be spawned there and all the word
07:05 - positions are stored in a list
07:07 - and then the level also contains a list
07:09 - of all the gem types available for that
07:11 - level
07:11 - so that's it for the definition of the
07:13 - level object then
07:15 - on the level editor script first it
07:17 - checks if the level object list already
07:19 - exists
07:19 - and if not then it creates a random
07:21 - yield level so just cycles through the
07:23 - home width and height
07:24 - and creates random gems on each position
07:27 - then just adding some simple player
07:28 - input
07:29 - so when pressing some keys it looks for
07:31 - the grid position under the mouse and
07:32 - modifies the gem type
07:34 - and that's really pretty much it it's
07:35 - really very simple and of course great
07:37 - for exactly what i want to do
07:38 - i can easily manually design some levels
07:41 - and the whole thing is stored in some
07:42 - really nice discrete scriptable objects
07:44 - then for implementing the class mechanic
07:47 - so some gems start off in case in class
07:49 - at the start of the game
07:50 - this is meant to add a different call
07:52 - type where the player must destroy all
07:54 - the glass positions
07:55 - doing this is very straightforward all
07:57 - it takes is adding a volume to the right
07:58 - position
07:59 - then making the visual show up if the
08:01 - bowling is true and when checking for
08:03 - matches if that position has that only
08:05 - set it to true then it simply turns to
08:07 - phones so that's it very simple
08:09 - then just adding that to the level
08:10 - editor which is also simple just test
08:12 - for the right mouse button click
08:14 - and get the word position then go into
08:16 - the level editor grid
08:17 - object and set the ball into true with
08:19 - that class was
08:20 - implemented then adding the ui the
08:22 - visual setup is very simple i just
08:24 - wanted to showcase the current score the
08:26 - number of moves left and the goal
08:28 - the goal can either be a target score or
08:31 - a class amount
08:32 - so the structure for the ui is very
08:34 - simple just some visual images and a
08:35 - bunch of text objects
08:37 - then for updating the ui i added a bunch
08:39 - of events whenever something happens in
08:41 - the game
08:42 - so when the player gets a match or
08:43 - destroy some glass and event is fire
08:45 - then the ui
08:46 - updates lastly i just made a simple you
08:48 - win or you only screen that again shows
08:50 - up based on the event fire
08:51 - by using events the home code is nicely
08:54 - decoupled
08:55 - so the underlying match 3 and logic
08:56 - script doesn't know anything about any
08:58 - ui element
08:59 - so the logic works both with or without
09:01 - the ui then for implementing the score
09:04 - this is just a basic end so when there's
09:06 - a match it adds a hundred points for
09:08 - each match position
09:09 - and an extra bonus 201 matching four
09:12 - more gems
09:12 - then for implementing the automatic bot
09:15 - now this task took
09:16 - quite a bit of thinking time in order to
09:18 - figure out essentially i need to know
09:20 - what would be a good move to make
09:22 - so i just made a function that goes
09:23 - through the home grid one by one
09:25 - and tests swapping the accurate position
09:27 - with any of its four neighbors
09:28 - and then seeing if doing that move would
09:30 - result in any matches
09:32 - so that's the logic pretty much just
09:33 - brute force going through the grin
09:35 - then for the bot itself it simply
09:37 - listens to events from the visual script
09:39 - when the visual script is waiting for
09:41 - player input that's when the bot makes
09:43 - its move so it makes a move by calling
09:44 - that exact same function that the manual
09:46 - player input calls
09:47 - so the bot only moves when the player
09:49 - could move which means it works pretty
09:50 - flawlessly
09:51 - when the bot wins or loses then that's
09:53 - it doesn't play anymore
09:54 - so by being directly linked with the
09:56 - visual everything is nice and easy
09:58 - so i made the function to get all the
10:00 - possible moves from the grid
10:02 - then i made another function in order to
10:03 - choose the best move from all the
10:05 - possible moves the logic is different
10:06 - depending on the goal type of the level
10:08 - so if it is a score level then looks for
10:10 - the move that gets the most score
10:12 - and if it is a less level then you
10:13 - choose the one that destroys the most
10:14 - class
10:15 - so it's relatively simple and it took a
10:17 - while to implement everything correctly
10:18 - but the end result is pretty great
10:20 - the bot plays automatically and plays
10:22 - quite well always doing some good moves
10:24 - and wins most of the time
10:25 - and finally adding a special explosion
10:27 - mechanic so i want the bonus when the
10:29 - player matches four more gems
10:31 - when that happens there's an explosion
10:32 - that takes down a bunch more gems
10:34 - so adding that was relatively easy just
10:36 - go into the code where the link jams are
10:38 - being destroyed
10:39 - and then check if it's more than four
10:41 - and if so grab the first gem and look at
10:43 - all the neighbors
10:43 - store their positions and in the end try
10:45 - to destroy them so that's it very simple
10:47 - logic
10:48 - so now when the player or the bot
10:50 - matches four in a row there's a nice
10:51 - explosion that takes down a few more
10:53 - gems
10:53 - and with all that the final game was
10:55 - made so in roughly six hours i made this
10:57 - game completely from scratch
10:59 - i made the basic part of the gems
11:01 - implemented the core game design
11:02 - looking for matches and clearing them
11:04 - then i also made a pretty robust level
11:06 - editor in order to manually design some
11:08 - levels
11:09 - added a glass mechanic and implemented
11:11 - the score made a bot to automatically
11:13 - play through the
11:14 - game and lastly added a special
11:16 - explosion mechanic
11:17 - alright so this was an overview of the
11:18 - match for the game that i made
11:20 - this was an interesting new type of
11:21 - video it's the first time that i've
11:23 - recorded the whole process of making a
11:24 - game and then doing an overview video
11:27 - so let me know in the comments if you
11:28 - like this video and maybe if you'd like
11:30 - to see some more like this
11:31 - making this type of video is much faster
11:33 - than doing step-by-step tutorials so if
11:35 - you enjoy this type of content this is
11:37 - something that i could do more often and
11:38 - cover more genres
11:39 - so let me know in the comments as always
11:41 - you can download the project files and
11:43 - utilities from unitycodemonkey.com
11:45 - if you found the video helpful consider
11:47 - liking and subscribing this video is
11:48 - made possible thanks to these awesome
11:50 - supporters
11:51 - go to patreon.com unitycodemonkey to get
11:54 - some perks and help keep the videos free
11:55 - for
11:56 - everyone post any questions have any
11:57 - comments and i'll see you next time
12:12 - you

Cleaned transcript:

in this video we're going to look at how i made a complete match 3 game in just under 6 hours this is a very popular genre because you can use these underlying mechanics with just about any theme it's easy to learn easy to play and very versatile let's begin alright so let's check out the game i made in under six hours it is a mastery game now i made this because i'm working on a video where i need a mastery game in order to demonstrate something really awesome so stay tuned for that upcoming video and works out great since this is a very popular genre but i haven't covered it in any videos just yet also my goal with this video is to show you the power of experience so if i tried to do this several years ago it would have taken me over a week and perhaps over a month in order to build this but right now thanks to my 20 years of programming experience and almost 10 years of unity i can build something like this very quickly so this works as a great example on why you should focus on getting more and more experience and make as many things as you can that really is the main thing that defines just how good and efficient you are i made not just the base game but also a ton of features in such a short period of time it has the standard match 3 game mechanics so you click and drag to move gems in order to make a match and when a match happens the gems get cleared so that's a standard game but then i also made a fully functioning level editor so i can easily create levels with any grid shape i want and manually design the starting state i also implemented two different goal times so there's a basic score going where you must reach a certain score amount and also a glass going where some gems are encased in glass and it needs to be destroyed i can just right click on a grid position in the level editor in order to encase it in glass and lastly i also made a bot to automatically play the game so it analyzes the board and decides what the best move would be and simply does it so it is smart enough to understand how to win the score goal as well as the glass goal this bot is a requirement for that other video that i'm working on so stay tuned to see how i will use this so in such a short amount of time i made not just a game but also a fully functioning level editor as well as a automated bot to test playing through the game okay so here's how i made it first of all the reason why i managed to do it so quickly is because like i always say you should always write clean code so rather than starting from a completely empty project i start from my base project that i use for all my videos so i already have the project set up with urp and already have tons of helper scripts and classes in the project files so pretty much everything was made in separate videos over the two years that i've been running this channel and in here i already have the grid class implemented so this is a really good real generic class with tons of features and it was funny made in several previous videos so check those out to learn more with this class i can very easily make the underlying grid for the game within a few minutes i have a grid visible and each root position has a word object then i use scriptable objects to hone the gem types i also covered them in detail in a previous video then let you define fields and store assets with all the data so i defined an object for each gem type which really makes it easy to customize each gem as well as easily add more types next again i made sure to write clean code so i separate the visuals from the underlying logic so there's a main match 3 script with a grid and logic and then a match 3 visual script which sets up on the visual representation i made a simple prefab for each gem so pretty much just normal sprite and i made a class to handle the visual representation it is connected to the underlying gem object and that class also has some simple smooth movement implemented so it just has the update method that smoothly moves the transform towards the underlying gem object position then with that i just spawned all the gems on top and they automatically fall into place so again really awesome clean code and as far as the underlying grid logic is concerned there's no animations anywhere the gems are just spawned in their position and that's it the visual script is what handles a nice smooth visual animation then for the player input again i kept it separate from the logic so the underlying match 3 script doesn't know anything about any player input it just has methods to swap positions so this was very useful later on when i made the bot script to play it automatically so i implement the simple state machine for the visual script it stays busy while there's an animation happening and then goes into the state listening for the player input then the input is based on the mouse so when the player presses the mouse button it keeps track of where it was pressed then when the player releases the mouse it knows that second position so with those two we know the starting point and direction of our swap so it just swaps those two gems then working on the logic for the matches this took a bit of work to think of a good approach but afterwards it's quite simple since the game lives on a grid it's easy to look at the grid neighbors so just take a certain grid position then look at how many gems of the same type are right next to it so start by looking the first one on the left and if it is the same then look at the next one and so on so do that for the left right up down directions and then simply keep a counter of how many of the same type are together then if it's more than three horizontally or vertically we have a match next making the matchy gems be clear so after finding a match we simply go through all the link gems and destroy them and again since i organized the project in a nice clean way this is very easy to implement i just added the event to the underlying gem grid object it fires the event when it is clear then the visual just listens to that event and when that happens it destroys the visual game object so i tested that and it worked perfectly fine and afterwards i simply made a nice small particle effect when the gem gets destroyed next up making the gems fall into new empty positions so the logic for this is rather simple just cycle through the whole grid and for every gem look at the positions underneath if there is an empty position then you move that gem to that position so that's it pretty simple and due to the way that i set up the visuals there is nothing else i need to change the visuals already ask for the underlying word position and smoothly move them so as long as the gem grid object changes position then the visual will smoothly follow then handling the spawning of new gems so after all the gems fall down into valid positions i need to spawn some more so this one is also very simple just cycle through the whole grid and look for empty grid positions and suddenly film it again since the code is nicely organized the visual script didn't need to change much it just needed to listen to an event when new gems are created and when that happens it creates the visual representation by spawning the prefab and the visual object so that's it very simple and with this the game is almost only working according to the base game design so the word is set up with gems and i can click and drag to swap them if there is a match then the link gems get destroyed all with a really nice visual and made with some really clean code so at this point it had only been pretty much under two hours so if my goal was just to make a bare bones match three game then this is how fast i could do it but my goal was to expand upon it so i kept going next up making the level editor now i wanted a level editor so i could manually design the starting state of the level and for that i also use the awesome scriptable object to save the data so first defining the structure the level needs a width and height of the underlying grid object then i define the class to home each grid position object so it has the gem type that is meant to be spawned there and all the word positions are stored in a list and then the level also contains a list of all the gem types available for that level so that's it for the definition of the level object then on the level editor script first it checks if the level object list already exists and if not then it creates a random yield level so just cycles through the home width and height and creates random gems on each position then just adding some simple player input so when pressing some keys it looks for the grid position under the mouse and modifies the gem type and that's really pretty much it it's really very simple and of course great for exactly what i want to do i can easily manually design some levels and the whole thing is stored in some really nice discrete scriptable objects then for implementing the class mechanic so some gems start off in case in class at the start of the game this is meant to add a different call type where the player must destroy all the glass positions doing this is very straightforward all it takes is adding a volume to the right position then making the visual show up if the bowling is true and when checking for matches if that position has that only set it to true then it simply turns to phones so that's it very simple then just adding that to the level editor which is also simple just test for the right mouse button click and get the word position then go into the level editor grid object and set the ball into true with that class was implemented then adding the ui the visual setup is very simple i just wanted to showcase the current score the number of moves left and the goal the goal can either be a target score or a class amount so the structure for the ui is very simple just some visual images and a bunch of text objects then for updating the ui i added a bunch of events whenever something happens in the game so when the player gets a match or destroy some glass and event is fire then the ui updates lastly i just made a simple you win or you only screen that again shows up based on the event fire by using events the home code is nicely decoupled so the underlying match 3 and logic script doesn't know anything about any ui element so the logic works both with or without the ui then for implementing the score this is just a basic end so when there's a match it adds a hundred points for each match position and an extra bonus 201 matching four more gems then for implementing the automatic bot now this task took quite a bit of thinking time in order to figure out essentially i need to know what would be a good move to make so i just made a function that goes through the home grid one by one and tests swapping the accurate position with any of its four neighbors and then seeing if doing that move would result in any matches so that's the logic pretty much just brute force going through the grin then for the bot itself it simply listens to events from the visual script when the visual script is waiting for player input that's when the bot makes its move so it makes a move by calling that exact same function that the manual player input calls so the bot only moves when the player could move which means it works pretty flawlessly when the bot wins or loses then that's it doesn't play anymore so by being directly linked with the visual everything is nice and easy so i made the function to get all the possible moves from the grid then i made another function in order to choose the best move from all the possible moves the logic is different depending on the goal type of the level so if it is a score level then looks for the move that gets the most score and if it is a less level then you choose the one that destroys the most class so it's relatively simple and it took a while to implement everything correctly but the end result is pretty great the bot plays automatically and plays quite well always doing some good moves and wins most of the time and finally adding a special explosion mechanic so i want the bonus when the player matches four more gems when that happens there's an explosion that takes down a bunch more gems so adding that was relatively easy just go into the code where the link jams are being destroyed and then check if it's more than four and if so grab the first gem and look at all the neighbors store their positions and in the end try to destroy them so that's it very simple logic so now when the player or the bot matches four in a row there's a nice explosion that takes down a few more gems and with all that the final game was made so in roughly six hours i made this game completely from scratch i made the basic part of the gems implemented the core game design looking for matches and clearing them then i also made a pretty robust level editor in order to manually design some levels added a glass mechanic and implemented the score made a bot to automatically play through the game and lastly added a special explosion mechanic alright so this was an overview of the match for the game that i made this was an interesting new type of video it's the first time that i've recorded the whole process of making a game and then doing an overview video so let me know in the comments if you like this video and maybe if you'd like to see some more like this making this type of video is much faster than doing stepbystep tutorials so if you enjoy this type of content this is something that i could do more often and cover more genres so let me know in the comments as always you can download the project files and utilities from unitycodemonkey.com if you found the video helpful consider liking and subscribing this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone post any questions have any comments and i'll see you next time you
