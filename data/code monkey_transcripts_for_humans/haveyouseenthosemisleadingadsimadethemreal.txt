With timestamps:

00:00 - hello and welcome i'm your code monkey
00:02 - now if you've been on youtube for a
00:03 - while then chances are you've seen those
00:05 - misleading mobile game ads you probably
00:07 - know the ones that i'm talking about
00:09 - actually let me know in the comments how
00:10 - many of you do know what i'm talking
00:12 - about
00:12 - i wonder how global these ads are if you
00:14 - just google misleading mobile ads you
00:16 - will find exactly what i mean
00:18 - usually they showcase some sort of
00:20 - pinned puzzle with lava or
00:21 - acid or a connect the gas puzzle however
00:24 - if you then click on those ads you end
00:26 - up on a game that has
00:27 - absolutely nothing to do with the game
00:29 - shown in those ads
00:30 - there was even a ruling in the uk that
00:32 - deemed those ads illegal due to being
00:33 - misleading
00:34 - but anyways the game ideas shown in the
00:36 - ads does seem interesting so i thought
00:38 - well why don't we try to turn those into
00:40 - a proper game
00:41 - also in this video i will talk about one
00:43 - of the most important hidden parts of
00:45 - game development so make sure you stick
00:46 - around for that
00:48 - so this is the main design that i was
00:49 - going for i wanted to be able to pull
00:51 - some pins
00:52 - and have some fluids like lava water and
00:55 - gas then combine those with a player
00:57 - character make some interaction between
00:58 - the particles and end up with a nice
01:00 - puzzle game
01:01 - so the first thing i began to do was
01:02 - making those fluids this is the first
01:04 - time that i attempted to do this so it
01:06 - actually required quite a bit of
01:07 - research
01:08 - i'm quite pleased with the end result i
01:10 - actually ended up making a complete
01:11 - tutorial
01:12 - on it on a previous video essentially
01:14 - it's tons of tiny spheres and some
01:16 - shader magic to make it look like a
01:18 - liquid
01:18 - go watch that video to see how it works
01:20 - i'm really happy with the final result
01:22 - so with that i had fluids working and i
01:24 - kept working on the game
01:26 - now i was actually going to cut out this
01:28 - next part from the video but i felt it
01:29 - showcased an important part of game
01:31 - development so i'll left it in
01:33 - but before i get to that let's thank the
01:34 - sponsor that helps these videos exist
01:36 - skillshare is an online learning
01:38 - community with thousands of classes on
01:40 - just about any topic
01:41 - explore new skills and improve your
01:42 - current ones at your own pace with
01:44 - unlimited access to thousands of
01:46 - inspiring classes for every skill level
01:48 - learn skills related to game development
01:50 - like the basics of computer science
01:52 - then learn modeling in blender by making
01:54 - your very first 3d character
01:56 - and then learn the basics of animation
01:58 - with all the important principles of
02:00 - squash and stretch timing and so on
02:02 - being a subscription means you don't
02:03 - have to buy each class individually
02:05 - so for less than 10 dollars a month with
02:07 - the annual subscription you have
02:09 - full access to all the classes you could
02:11 - possibly want with so many classes
02:12 - available you can learn skills related
02:14 - to game development but also improve on
02:16 - any hobbies you have
02:18 - for example learn how to play the guitar
02:20 - learning electronics with a arduino and
02:22 - a raspberry pi
02:23 - or learn how to be more productive in
02:25 - life join now with the link in the
02:26 - description and for a limited time the
02:28 - first 1000 people will get a free trial
02:30 - of skillshare premium membership
02:32 - thanks to skillshare for supporting the
02:34 - video and supporting the channel
02:35 - so as i was saying originally i was
02:37 - going to cut out this next part from the
02:38 - video but then i thought it would be so
02:40 - much better and more transparent if i
02:41 - just left it in
02:43 - now if you've seen many of my videos you
02:45 - might be misled into believing that i'm
02:46 - some sort of genius who makes all these
02:48 - complex systems perfectly without any
02:50 - errors
02:51 - but that's definitely not reality the
02:53 - reality is that as with anything making
02:55 - games and programming is all about
02:57 - learning and learning is all about
02:58 - making mistakes
03:00 - the final polished videos that you see
03:02 - are after i've done all of my mistakes
03:04 - and after i spent a considerable amount
03:05 - of time in research and preparation
03:07 - actually one comment that i sometimes
03:09 - get which is a bit frustrating is when
03:11 - people say that i go too fast in a
03:12 - certain video and they can't follow
03:14 - my response to that is to use the pause
03:16 - button and take your time learn at your
03:18 - own pace and just focus on learning
03:20 - but sometimes people get upset with that
03:21 - reply as if it's something they're not
03:23 - supposed to do
03:24 - like for some reason they think they
03:25 - should be able to learn absolutely
03:27 - everything about a particular system in
03:29 - exactly the length of the video
03:31 - so that's the distorted reality that a
03:33 - final published video creates
03:34 - when you see a 20 minute tutorial it
03:36 - absolutely did not take me 20 minutes to
03:39 - learn how to do that
03:40 - those final 20 minutes equate to hours
03:42 - or even days of research and preparation
03:44 - not to mention my 20 years of
03:46 - programming experience
03:47 - the learning progress takes time and
03:49 - mistakes are absolutely part of it
03:51 - i usually cut mistakes out of the videos
03:53 - because well i want to make sure that
03:54 - i'm teaching the correct way rather than
03:56 - leading you down a wrong path but those
03:58 - mistakes are no really mistakes
04:00 - just attempts that didn't exactly work
04:01 - out those do exist and are absolutely
04:04 - normal and part of the process
04:06 - now specifically what happened here was
04:08 - i was trying to solve one particular
04:10 - limitation of the liquid system that i
04:11 - showcased in the previous video
04:13 - in that system it uses a shader to apply
04:16 - a visual to the particles and then i
04:17 - have a different material for each
04:19 - liquid type
04:20 - however the shader is applied to all the
04:22 - particles on screen
04:23 - so i cannot have water particles and
04:25 - lava particles in the same scene at once
04:28 - for this design i absolutely needed
04:30 - multiple particle types active at once
04:32 - so i had to solve that after thinking
04:34 - for a bit i came up with an approach
04:36 - that could work
04:37 - so i thought i could tint the particles
04:39 - in a specific color
04:40 - and then in my shader use those colors
04:42 - essentially as masks
04:43 - so the shader would identify the red
04:45 - particles and make them look like lava
04:47 - then identify the blue particles and
04:49 - make them look like water it sounds like
04:51 - it should work
04:52 - and it probably does work however i'm
04:54 - not a shader expert
04:55 - it's one of the areas i don't have a lot
04:57 - of experience in so i had no clue how do
04:59 - i mask out a specific color out of an
05:01 - image
05:02 - i mean doing that through code is very
05:04 - simple i just go through every pixel
05:06 - check if it's close enough to the pixel
05:08 - color that i want to match and if so i
05:09 - keep the value if not i discard it
05:11 - i can easily think of that in logic but
05:13 - i couldn't really apply it to the shader
05:15 - so i tried doing it try doing a bunch of
05:17 - math to isolate a specific color
05:20 - i attempted subtracting the mask from
05:21 - the original colors and inverting the
05:23 - results
05:24 - i tried using a step node i thought
05:26 - maybe i could use multiplication or
05:28 - maybe the module node
05:29 - so i spent quite a while going through
05:31 - this trying all the possible scenarios
05:33 - and failing every single time
05:35 - not a single one of my attempted methods
05:37 - worked also it doesn't really help that
05:39 - i was trying to get this working at
05:40 - night after a 14 hour work day
05:42 - so that's a quick tip for you make sure
05:44 - you take your rest seriously a tired
05:46 - brain won't really just make tons of
05:47 - mistakes
05:48 - it's much better to rest and come back
05:49 - the next day so that's exactly what i
05:51 - did
05:52 - and in the end after destroying my brain
05:53 - for quite a while i opted to go with a
05:55 - simpler different approach
05:57 - i made a separate camera for each liquid
05:59 - type and used the same method as
06:00 - previously
06:02 - obviously this has a pretty steep
06:03 - performance cost having all these
06:05 - cameras and random textures at once but
06:07 - it did work
06:08 - so that's the part that normally i would
06:09 - cut from my videos and skip to this
06:11 - point but this time i felt it was
06:13 - important that i left it in
06:14 - trying different approaches and failing
06:16 - until you find the one that works is
06:17 - absolutely part of the process
06:19 - whenever you watch one of my videos i
06:21 - want you to know that i don't come up
06:22 - with all this magically it all takes
06:24 - tons of time and lots of trial and error
06:26 - and by the way if you find the video
06:28 - helpful consider subscribing and hitting
06:30 - the like button
06:31 - it really helps out the channel so with
06:33 - that i had my multiple liquids working
06:35 - next up i wanted to make some
06:37 - interactions between them for example i
06:39 - wanted to turn lava plus water into
06:41 - stone
06:41 - in terms of logic that task was
06:43 - surprisingly easy the first thing was i
06:45 - need to know the type of each particle
06:47 - and for that i made a scriptable object
06:49 - to hone the type
06:50 - these are super useful and i've used
06:52 - them in lots of games
06:54 - in this case i didn't even need any data
06:56 - just having the object for each tab was
06:57 - more than enough
06:58 - then i made a script that has a field to
07:00 - store the type and attach that script to
07:02 - every particle
07:03 - and with that now i know which particle
07:05 - is which so i made another simple script
07:07 - this one listens to collisions
07:09 - and when a collision happens it checks
07:11 - the type of the particles involved in
07:12 - collision
07:13 - if one of them is water and the other
07:15 - one is lava then i simply convert both
07:17 - those particles into stone
07:19 - as i mentioned previously the visual is
07:20 - handled by different cameras
07:22 - so changing the visual is literally just
07:24 - changing the layer in the particle
07:26 - and change the type stored in that
07:27 - script and that's it
07:29 - super simple interaction between the
07:30 - particles and now when lava touched
07:32 - water it would turn into stone
07:34 - the one issue is that it didn't really
07:35 - become as interesting as i would like
07:37 - essentially it would make a single layer
07:39 - of stone with lava beneath and water on
07:41 - top
07:42 - which i guess is realistic but it
07:43 - doesn't really look too good
07:45 - as a solution i thought well why don't i
07:47 - try to add some random jumping force to
07:49 - my left particles
07:51 - it would seem like the lava is bubbling
07:52 - which does make sense
07:54 - and having them bubble up would shift
07:55 - the particles around and clear some
07:57 - space so that more lava could turn into
07:58 - stone
07:59 - well i kind of messed up on the valves i
08:01 - used and accidentally created a
08:02 - lavish hour not exactly what i was going
08:04 - for but the idea worked
08:06 - so i tweaked the values a bit and the
08:07 - unliven particles randomly jumped up
08:09 - which slightly made them get into more
08:11 - contact with water and turned into more
08:13 - stone
08:14 - however that was still not great so i
08:16 - also added some simple logic to make the
08:18 - stone going to the bottom
08:19 - essentially if there is a collision it
08:20 - checks if one is stone and the other one
08:22 - is level
08:23 - then it checks if the lava is under the
08:25 - stone and if so they essentially swap
08:27 - positions
08:28 - then just for testing and also for fun i
08:30 - made a quick fountain script so it just
08:31 - spawns particles so i can keep spawning
08:33 - more water to make sure that everything
08:35 - works
08:36 - alright so with that it was time to move
08:37 - on from the particles
08:39 - next up was handling the pins i wanted
08:41 - to be able to click and push or pull a
08:43 - certain pin
08:44 - and it also needed to have some limits
08:46 - to how much it can move
08:47 - first for handling the click it's pretty
08:49 - simple just add a sprite for the pin
08:51 - head and implement i pointer down and i
08:53 - pointer
08:54 - up however it's actually not that simple
08:56 - i actually forgot that the pointer
08:58 - events were supposedly only meant to
08:59 - work with the ui
09:00 - usually for warmed objects you would use
09:02 - the mono behavior on mouse down
09:04 - however if you use a different raycaster
09:07 - in this case the physics raycaster they
09:09 - also work with game objects
09:10 - so that was interesting i went down a
09:12 - somewhat wrong path and learned
09:13 - something new
09:14 - and with that i could now click on the
09:16 - pins then it was time to move the pin
09:18 - alongside the axis
09:20 - this was another slightly tricky thing
09:22 - math is definitely not my strong point
09:24 - so this took some googling
09:25 - essentially i wanted to find out the
09:26 - closest point along the axis of the pin
09:29 - with that thankfully i found a great
09:31 - post on stack overflow applied to the
09:33 - pins and it worked perfectly
09:34 - with that i had the ability to click and
09:36 - drag pins along its axis
09:38 - then for the limits for the minimum it
09:40 - stores the starting position and
09:41 - collates the dot product between that
09:43 - and the desired new position if it's
09:45 - going past the starting position then
09:47 - simply don't move
09:48 - and for the maximum it's also simple
09:50 - calculate the distance between the start
09:51 - and new position if it's too far then
09:53 - snap it back
09:54 - and that's it another very simple
09:56 - mechanic implemented i can click and
09:57 - drag to move any pin and i can define
10:00 - how far i want it to move
10:01 - just with this if you put them together
10:03 - you already have some mechanics that
10:04 - work very well with one another
10:06 - so by this point the liquid portion of
10:08 - the game was working well
10:09 - so next up was handling the tubes for
10:11 - the gas i wanted a gas container with a
10:13 - tube that i could drag
10:14 - and if i connect it to another container
10:16 - then the gas should follow them
10:17 - first it was handling the custom shape
10:19 - of the pipe i wanted it to connect from
10:21 - the entry to the exit
10:23 - for that i made a simple custom mesh
10:25 - essentially just take these four points
10:27 - and generate the quad
10:28 - it's simple it works great i covered
10:30 - meshes in detail another video if you
10:32 - want to learn more
10:33 - then after that was actually the point
10:35 - when i started live streaming the
10:36 - development
10:37 - these live streams are not really
10:39 - planned ahead of time so if you want to
10:40 - be notified when they
10:41 - happen then make sure you hit the bell
10:43 - icon oh and by the way these characters
10:45 - you see at the bottom that was a fun
10:46 - overlay that i used during the
10:48 - live stream it shows the characters of
10:50 - the people in chat as well as some
10:51 - messages
10:52 - so make sure you join the next live
10:53 - stream to see yourself on screen
10:55 - i also previously made tutorials for the
10:57 - transparent tnt window as well as the
10:59 - chat bubble
11:00 - so the first task on the live stream was
11:02 - adding a health system to the player
11:04 - again i reused the health system which
11:06 - was actually made on the very first
11:07 - video on this channel over three years
11:09 - ago
11:10 - just made a health system and a health
11:12 - bar from my utilities
11:13 - then in order to apply damage i wanted
11:15 - to know when the lava touches the player
11:17 - since i already set up all the liquid
11:18 - types using scriptable objects this was
11:20 - very easy
11:21 - just make the player a trigger collider
11:23 - so it doesn't block liquids
11:24 - and listen to those collisions if it's
11:26 - lava deal damage very simple logic and
11:29 - work perfectly
11:30 - next up handling the coins also very
11:32 - simple these are exactly the same as the
11:33 - liquid particles except they don't have
11:35 - a special shader on top
11:37 - just a simple coin sprite the goals for
11:39 - the player to win when they touch these
11:41 - coins so then getting back into the
11:43 - pipes
11:43 - first handling the logic for clicking
11:45 - and dragging again using pointer vents
11:47 - and making it follow the mouse position
11:49 - then i made a separate connector and
11:51 - when the mouse is released it checks if
11:52 - there's a connector nearby
11:54 - if so it gets connect it snaps into the
11:56 - new position and rotation
11:58 - also added some external logic to make
11:59 - sure you can't drag the pipes too far
12:01 - with that they were connected then to
12:03 - make them flow was really just adding
12:04 - colliders
12:05 - there's the collateral on the entry and
12:07 - the exit and when a connection happens
12:09 - those two are disabled and two other
12:11 - colliders are created on the top and
12:13 - bottom
12:13 - and with this it allows the particles to
12:15 - flow it works for liquids and also works
12:17 - for gas
12:19 - for another mechanic i implemented
12:20 - player death and for the death type i
12:23 - used water essentially having the player
12:25 - drum
12:25 - so for that i placed a collateral at the
12:27 - height of the head
12:29 - then i made a simple script to listen to
12:30 - water collision
12:32 - if there's water touching the head then
12:33 - counts up a value and if it reaches
12:35 - above a certain value then the player
12:37 - simply drops
12:38 - again all very basic logic easy to
12:40 - implement and adds yet another mechanic
12:42 - into the game
12:42 - then i made pretty much exactly the same
12:44 - thing except instead of drowning it's
12:46 - lack of oxygen
12:47 - there's a timer constantly counting down
12:49 - and a bar showing the oxygen level
12:51 - every time the oxygen gas particle
12:53 - touches the character's face it raises
12:55 - that bar
12:55 - if it gets down to zero the player dies
12:57 - if it goes up the player survives
12:59 - so with this i could already make tons
13:01 - of unique designs based on gas pipes and
13:03 - liquids
13:04 - and that was the last test that i made
13:05 - during the live stream it was two hours
13:08 - which was surprisingly very productive
13:10 - again make sure you hit the bell icon if
13:12 - you want to be notified whenever i go
13:13 - live
13:14 - so after all that it was time to make
13:16 - some levels using all these mechanics
13:18 - i built a total of five levels all of
13:20 - them showcasing the various mechanics
13:22 - now i'm not much of a puzzle game
13:24 - designer myself but it was fun to design
13:26 - scenarios that showcase interesting
13:27 - interactions between the particles
13:29 - i designed those levels then just polish
13:31 - it all up and here's the final result
13:34 - alright so starting off over here on a
13:36 - very simple main menu
13:38 - just hit on play and yep here is the
13:41 - very first level
13:42 - so it's got water lava and some gold the
13:45 - objective is to get the gold
13:46 - so one of the interactions that i added
13:48 - was that if the coins such a lava they
13:50 - get destroyed so if i just
13:51 - point the coins right away and nope they
13:54 - don't actually reach the player
13:55 - they hit the lava and they get destroyed
13:57 - so that's not the solution
14:00 - so here the goal is essentially to drop
14:02 - the water on the lava
14:03 - so that creates some stone and then when
14:06 - there's enough stone essentially i can
14:08 - pass in the coins
14:10 - and they slide down they go through an
14:13 - invisible wall and they hit the player
14:14 - and you win alright very simple level
14:17 - then up here on level 2 on this one is
14:19 - to get stone into the pit
14:21 - so first i need to convert these into
14:23 - stone so pretty much just drag a bunch
14:25 - of water on there
14:29 - and if there's the interaction so as
14:30 - soon as water touches lava it turns into
14:32 - stone
14:33 - and then the stone gets filmed down into
14:35 - the bottom
14:36 - now here obviously tricky thing is that
14:38 - if i push it all away
14:39 - then a bunch of lava goes in and damages
14:41 - the player so i got to be careful with
14:43 - that
14:44 - i could essentially put it just little
14:46 - one by one
14:53 - and yep when enough stone gets on the
14:54 - pit then you win now up here on level
14:56 - three this scene showcases the gas pipes
14:59 - so if i connect the gas straight into
15:01 - the player then all this toxic gas goes
15:03 - towards the player as soon as it touches
15:05 - the player it starts damaging it
15:07 - and yep after a while there you go
15:09 - you'll lose so the goal here is to
15:11 - eliminate the zombie so instead of
15:12 - connecting to the player just connect
15:14 - into the zombie
15:17 - and yep you win and now on this one this
15:21 - one's really interesting
15:22 - so the goal save the knight in the water
15:24 - so right away the night is being drowned
15:26 - so he's under the water and constantly
15:28 - losing help
15:29 - so obviously i gotta connect the pipe in
15:31 - order to get the water to drain
15:33 - and there you go as soon as the water
15:34 - goes underneath the head area
15:36 - then the night is now no longer drowning
15:38 - however now i can't dump the water just
15:40 - like this
15:41 - since this is a gas so if i just connect
15:42 - these then nope doesn't quite work out
15:45 - so instead just open up that valve and
15:47 - now the gas is gonna flow away
15:48 - and with this and now the water flows
15:50 - down there and when enough
15:52 - water gets dumped
15:56 - if there you go we've got a little wind
15:58 - and on the final level also very
16:00 - interesting
16:01 - so the player is in there and he's in
16:03 - need of oxygen
16:04 - and right away there's oxygen down here
16:06 - in water in here if i just try to go
16:08 - nope doesn't quite go the water puts
16:10 - pressure on the oxygen
16:11 - and nothing actually happens so now the
16:14 - poor player is essentially
16:15 - gonna lose his oxygen
16:18 - so instead the solution this one is
16:20 - first dump the water so just connect the
16:22 - pipe and let the water flow
16:23 - then connect the oxygen
16:26 - now here is the tricky thing if i open
16:28 - the whole thing then the oxygen is going
16:30 - to leave through there
16:31 - so that's not quite going to work out
16:33 - only a bunch of them go in there
16:35 - so instead the solution is just to open
16:37 - up just a tiny bit
16:38 - just to be able to get exactly on there
16:41 - and not waste any oxygen
16:44 - and there you go when there is enough
16:45 - oxygen in there then the player is
16:47 - breathing it and your p
16:48 - saved alright so there it is those are
16:50 - five interesting levels that i made
16:52 - using these mechanics
16:53 - you can download the complete project
16:55 - files from the website or play the game
16:56 - for yourself through the steam app
16:58 - it's a simple design but it works quite
17:00 - well this was a great mini game to make
17:02 - i hope you enjoyed watching this making
17:04 - out video
17:05 - and thank you to everyone who joined me
17:07 - on the live stream if you want to be
17:08 - notified of new videos or whenever i go
17:10 - live then make sure you hit the bell
17:12 - icon
17:12 - don't forget to check out skillshare
17:14 - through the link in description and
17:15 - start learning a new skill today
17:17 - if you found this video helpful consider
17:18 - liking and subscribing this video is
17:20 - made possible thanks to these awesome
17:22 - supporters
17:22 - go to patreon.com unitycodemonkey to get
17:25 - some perks and help keep the videos free
17:27 - for everyone
17:28 - post any questions have any comments and
17:29 - i'll see you next time
17:37 - [Music]

Cleaned transcript:

hello and welcome i'm your code monkey now if you've been on youtube for a while then chances are you've seen those misleading mobile game ads you probably know the ones that i'm talking about actually let me know in the comments how many of you do know what i'm talking about i wonder how global these ads are if you just google misleading mobile ads you will find exactly what i mean usually they showcase some sort of pinned puzzle with lava or acid or a connect the gas puzzle however if you then click on those ads you end up on a game that has absolutely nothing to do with the game shown in those ads there was even a ruling in the uk that deemed those ads illegal due to being misleading but anyways the game ideas shown in the ads does seem interesting so i thought well why don't we try to turn those into a proper game also in this video i will talk about one of the most important hidden parts of game development so make sure you stick around for that so this is the main design that i was going for i wanted to be able to pull some pins and have some fluids like lava water and gas then combine those with a player character make some interaction between the particles and end up with a nice puzzle game so the first thing i began to do was making those fluids this is the first time that i attempted to do this so it actually required quite a bit of research i'm quite pleased with the end result i actually ended up making a complete tutorial on it on a previous video essentially it's tons of tiny spheres and some shader magic to make it look like a liquid go watch that video to see how it works i'm really happy with the final result so with that i had fluids working and i kept working on the game now i was actually going to cut out this next part from the video but i felt it showcased an important part of game development so i'll left it in but before i get to that let's thank the sponsor that helps these videos exist skillshare is an online learning community with thousands of classes on just about any topic explore new skills and improve your current ones at your own pace with unlimited access to thousands of inspiring classes for every skill level learn skills related to game development like the basics of computer science then learn modeling in blender by making your very first 3d character and then learn the basics of animation with all the important principles of squash and stretch timing and so on being a subscription means you don't have to buy each class individually so for less than 10 dollars a month with the annual subscription you have full access to all the classes you could possibly want with so many classes available you can learn skills related to game development but also improve on any hobbies you have for example learn how to play the guitar learning electronics with a arduino and a raspberry pi or learn how to be more productive in life join now with the link in the description and for a limited time the first 1000 people will get a free trial of skillshare premium membership thanks to skillshare for supporting the video and supporting the channel so as i was saying originally i was going to cut out this next part from the video but then i thought it would be so much better and more transparent if i just left it in now if you've seen many of my videos you might be misled into believing that i'm some sort of genius who makes all these complex systems perfectly without any errors but that's definitely not reality the reality is that as with anything making games and programming is all about learning and learning is all about making mistakes the final polished videos that you see are after i've done all of my mistakes and after i spent a considerable amount of time in research and preparation actually one comment that i sometimes get which is a bit frustrating is when people say that i go too fast in a certain video and they can't follow my response to that is to use the pause button and take your time learn at your own pace and just focus on learning but sometimes people get upset with that reply as if it's something they're not supposed to do like for some reason they think they should be able to learn absolutely everything about a particular system in exactly the length of the video so that's the distorted reality that a final published video creates when you see a 20 minute tutorial it absolutely did not take me 20 minutes to learn how to do that those final 20 minutes equate to hours or even days of research and preparation not to mention my 20 years of programming experience the learning progress takes time and mistakes are absolutely part of it i usually cut mistakes out of the videos because well i want to make sure that i'm teaching the correct way rather than leading you down a wrong path but those mistakes are no really mistakes just attempts that didn't exactly work out those do exist and are absolutely normal and part of the process now specifically what happened here was i was trying to solve one particular limitation of the liquid system that i showcased in the previous video in that system it uses a shader to apply a visual to the particles and then i have a different material for each liquid type however the shader is applied to all the particles on screen so i cannot have water particles and lava particles in the same scene at once for this design i absolutely needed multiple particle types active at once so i had to solve that after thinking for a bit i came up with an approach that could work so i thought i could tint the particles in a specific color and then in my shader use those colors essentially as masks so the shader would identify the red particles and make them look like lava then identify the blue particles and make them look like water it sounds like it should work and it probably does work however i'm not a shader expert it's one of the areas i don't have a lot of experience in so i had no clue how do i mask out a specific color out of an image i mean doing that through code is very simple i just go through every pixel check if it's close enough to the pixel color that i want to match and if so i keep the value if not i discard it i can easily think of that in logic but i couldn't really apply it to the shader so i tried doing it try doing a bunch of math to isolate a specific color i attempted subtracting the mask from the original colors and inverting the results i tried using a step node i thought maybe i could use multiplication or maybe the module node so i spent quite a while going through this trying all the possible scenarios and failing every single time not a single one of my attempted methods worked also it doesn't really help that i was trying to get this working at night after a 14 hour work day so that's a quick tip for you make sure you take your rest seriously a tired brain won't really just make tons of mistakes it's much better to rest and come back the next day so that's exactly what i did and in the end after destroying my brain for quite a while i opted to go with a simpler different approach i made a separate camera for each liquid type and used the same method as previously obviously this has a pretty steep performance cost having all these cameras and random textures at once but it did work so that's the part that normally i would cut from my videos and skip to this point but this time i felt it was important that i left it in trying different approaches and failing until you find the one that works is absolutely part of the process whenever you watch one of my videos i want you to know that i don't come up with all this magically it all takes tons of time and lots of trial and error and by the way if you find the video helpful consider subscribing and hitting the like button it really helps out the channel so with that i had my multiple liquids working next up i wanted to make some interactions between them for example i wanted to turn lava plus water into stone in terms of logic that task was surprisingly easy the first thing was i need to know the type of each particle and for that i made a scriptable object to hone the type these are super useful and i've used them in lots of games in this case i didn't even need any data just having the object for each tab was more than enough then i made a script that has a field to store the type and attach that script to every particle and with that now i know which particle is which so i made another simple script this one listens to collisions and when a collision happens it checks the type of the particles involved in collision if one of them is water and the other one is lava then i simply convert both those particles into stone as i mentioned previously the visual is handled by different cameras so changing the visual is literally just changing the layer in the particle and change the type stored in that script and that's it super simple interaction between the particles and now when lava touched water it would turn into stone the one issue is that it didn't really become as interesting as i would like essentially it would make a single layer of stone with lava beneath and water on top which i guess is realistic but it doesn't really look too good as a solution i thought well why don't i try to add some random jumping force to my left particles it would seem like the lava is bubbling which does make sense and having them bubble up would shift the particles around and clear some space so that more lava could turn into stone well i kind of messed up on the valves i used and accidentally created a lavish hour not exactly what i was going for but the idea worked so i tweaked the values a bit and the unliven particles randomly jumped up which slightly made them get into more contact with water and turned into more stone however that was still not great so i also added some simple logic to make the stone going to the bottom essentially if there is a collision it checks if one is stone and the other one is level then it checks if the lava is under the stone and if so they essentially swap positions then just for testing and also for fun i made a quick fountain script so it just spawns particles so i can keep spawning more water to make sure that everything works alright so with that it was time to move on from the particles next up was handling the pins i wanted to be able to click and push or pull a certain pin and it also needed to have some limits to how much it can move first for handling the click it's pretty simple just add a sprite for the pin head and implement i pointer down and i pointer up however it's actually not that simple i actually forgot that the pointer events were supposedly only meant to work with the ui usually for warmed objects you would use the mono behavior on mouse down however if you use a different raycaster in this case the physics raycaster they also work with game objects so that was interesting i went down a somewhat wrong path and learned something new and with that i could now click on the pins then it was time to move the pin alongside the axis this was another slightly tricky thing math is definitely not my strong point so this took some googling essentially i wanted to find out the closest point along the axis of the pin with that thankfully i found a great post on stack overflow applied to the pins and it worked perfectly with that i had the ability to click and drag pins along its axis then for the limits for the minimum it stores the starting position and collates the dot product between that and the desired new position if it's going past the starting position then simply don't move and for the maximum it's also simple calculate the distance between the start and new position if it's too far then snap it back and that's it another very simple mechanic implemented i can click and drag to move any pin and i can define how far i want it to move just with this if you put them together you already have some mechanics that work very well with one another so by this point the liquid portion of the game was working well so next up was handling the tubes for the gas i wanted a gas container with a tube that i could drag and if i connect it to another container then the gas should follow them first it was handling the custom shape of the pipe i wanted it to connect from the entry to the exit for that i made a simple custom mesh essentially just take these four points and generate the quad it's simple it works great i covered meshes in detail another video if you want to learn more then after that was actually the point when i started live streaming the development these live streams are not really planned ahead of time so if you want to be notified when they happen then make sure you hit the bell icon oh and by the way these characters you see at the bottom that was a fun overlay that i used during the live stream it shows the characters of the people in chat as well as some messages so make sure you join the next live stream to see yourself on screen i also previously made tutorials for the transparent tnt window as well as the chat bubble so the first task on the live stream was adding a health system to the player again i reused the health system which was actually made on the very first video on this channel over three years ago just made a health system and a health bar from my utilities then in order to apply damage i wanted to know when the lava touches the player since i already set up all the liquid types using scriptable objects this was very easy just make the player a trigger collider so it doesn't block liquids and listen to those collisions if it's lava deal damage very simple logic and work perfectly next up handling the coins also very simple these are exactly the same as the liquid particles except they don't have a special shader on top just a simple coin sprite the goals for the player to win when they touch these coins so then getting back into the pipes first handling the logic for clicking and dragging again using pointer vents and making it follow the mouse position then i made a separate connector and when the mouse is released it checks if there's a connector nearby if so it gets connect it snaps into the new position and rotation also added some external logic to make sure you can't drag the pipes too far with that they were connected then to make them flow was really just adding colliders there's the collateral on the entry and the exit and when a connection happens those two are disabled and two other colliders are created on the top and bottom and with this it allows the particles to flow it works for liquids and also works for gas for another mechanic i implemented player death and for the death type i used water essentially having the player drum so for that i placed a collateral at the height of the head then i made a simple script to listen to water collision if there's water touching the head then counts up a value and if it reaches above a certain value then the player simply drops again all very basic logic easy to implement and adds yet another mechanic into the game then i made pretty much exactly the same thing except instead of drowning it's lack of oxygen there's a timer constantly counting down and a bar showing the oxygen level every time the oxygen gas particle touches the character's face it raises that bar if it gets down to zero the player dies if it goes up the player survives so with this i could already make tons of unique designs based on gas pipes and liquids and that was the last test that i made during the live stream it was two hours which was surprisingly very productive again make sure you hit the bell icon if you want to be notified whenever i go live so after all that it was time to make some levels using all these mechanics i built a total of five levels all of them showcasing the various mechanics now i'm not much of a puzzle game designer myself but it was fun to design scenarios that showcase interesting interactions between the particles i designed those levels then just polish it all up and here's the final result alright so starting off over here on a very simple main menu just hit on play and yep here is the very first level so it's got water lava and some gold the objective is to get the gold so one of the interactions that i added was that if the coins such a lava they get destroyed so if i just point the coins right away and nope they don't actually reach the player they hit the lava and they get destroyed so that's not the solution so here the goal is essentially to drop the water on the lava so that creates some stone and then when there's enough stone essentially i can pass in the coins and they slide down they go through an invisible wall and they hit the player and you win alright very simple level then up here on level 2 on this one is to get stone into the pit so first i need to convert these into stone so pretty much just drag a bunch of water on there and if there's the interaction so as soon as water touches lava it turns into stone and then the stone gets filmed down into the bottom now here obviously tricky thing is that if i push it all away then a bunch of lava goes in and damages the player so i got to be careful with that i could essentially put it just little one by one and yep when enough stone gets on the pit then you win now up here on level three this scene showcases the gas pipes so if i connect the gas straight into the player then all this toxic gas goes towards the player as soon as it touches the player it starts damaging it and yep after a while there you go you'll lose so the goal here is to eliminate the zombie so instead of connecting to the player just connect into the zombie and yep you win and now on this one this one's really interesting so the goal save the knight in the water so right away the night is being drowned so he's under the water and constantly losing help so obviously i gotta connect the pipe in order to get the water to drain and there you go as soon as the water goes underneath the head area then the night is now no longer drowning however now i can't dump the water just like this since this is a gas so if i just connect these then nope doesn't quite work out so instead just open up that valve and now the gas is gonna flow away and with this and now the water flows down there and when enough water gets dumped if there you go we've got a little wind and on the final level also very interesting so the player is in there and he's in need of oxygen and right away there's oxygen down here in water in here if i just try to go nope doesn't quite go the water puts pressure on the oxygen and nothing actually happens so now the poor player is essentially gonna lose his oxygen so instead the solution this one is first dump the water so just connect the pipe and let the water flow then connect the oxygen now here is the tricky thing if i open the whole thing then the oxygen is going to leave through there so that's not quite going to work out only a bunch of them go in there so instead the solution is just to open up just a tiny bit just to be able to get exactly on there and not waste any oxygen and there you go when there is enough oxygen in there then the player is breathing it and your p saved alright so there it is those are five interesting levels that i made using these mechanics you can download the complete project files from the website or play the game for yourself through the steam app it's a simple design but it works quite well this was a great mini game to make i hope you enjoyed watching this making out video and thank you to everyone who joined me on the live stream if you want to be notified of new videos or whenever i go live then make sure you hit the bell icon don't forget to check out skillshare through the link in description and start learning a new skill today if you found this video helpful consider liking and subscribing this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone post any questions have any comments and i'll see you next time
