With timestamps:

00:00 - hello and welcome I'm your KMI so
00:02 - something just happened that I think is
00:03 - an excellent reminder of how myself and
00:05 - anyone who does tutorials we really just
00:07 - all human when you see a tutorial the
00:09 - final video is really not representative
00:11 - of what it took to research to get to
00:12 - that point that final tutorial might
00:14 - look perfect with no bugs no trial and
00:16 - error no mistakes nothing but that is
00:18 - because whoever is teaching the tutorial
00:19 - like myself I've literally already made
00:21 - all of the mistakes and all the trial
00:23 - and error during the research before
00:24 - making the final tutorial video just
00:26 - yesterday I did a live stream and I
00:28 - actually encountered two bugs that were
00:29 - very tricky to solve and someone wrote
00:31 - something in chat something like it's
00:33 - great to see how you struggle just like
00:34 - the rest of us and yep that is
00:36 - absolutely correct I encounter bugs just
00:38 - like you I have to find the cause just
00:40 - like you I'm really no different no one
00:41 - is encountering bugs is really a
00:43 - perfectly normal part of the process of
00:44 - building or learning literally anything
00:46 - so if you want to see how I solve bugs
00:48 - in real time if so you can watch what
00:49 - happened on this live stream okay what
00:51 - on Earth is
00:54 - going all right so the first bug was a
00:57 - non reference exception now usually this
00:59 - is a really isas to solve bug I've got
01:01 - my four-step process and it always works
01:03 - great however in this case things were
01:04 - different I had really no idea what was
01:06 - going on supposedly because the bug was
01:08 - on this line of code this one inside the
01:10 - undro system except undro should not be
01:12 - called at all when I play the game only
01:14 - when I exit so the fact that this was
01:16 - causing the bug exactly when I press the
01:17 - play button that was very strange so I
01:19 - did exactly what I always do to solve
01:21 - the no reference exceptions I added a
01:22 - bunch of logs to identify exactly what
01:24 - is now but that did not work for some
01:27 - weird strange inexplainable reason the
01:28 - logs were not running I add the logs
01:30 - right before the line that was shown in
01:31 - the stack trace and nope the logs did
01:33 - not run but the null reference error
01:35 - that was still happening that is
01:36 - extremely strange code runs from top to
01:39 - bottom so before getting to that line it
01:40 - has to go through the previous line it
01:42 - has to print logs but it wasn't doing
01:44 - that so all of it extremely strange I
01:45 - really had no idea what was going on you
01:47 - can see me trying all kinds of things on
01:49 - the live stream and thankfully Danny
01:51 - from the UN do seam he was watching the
01:53 - stream and pointed out how the error
01:55 - might not necessarily be on that exact
01:56 - line of code basically dots does a ton
01:58 - of magic sour generation in the
02:00 - background and because of that the stack
02:02 - Trace might not point to the exact line
02:04 - where the eror is actually throwing I
02:06 - didn't know this I obviously assume that
02:07 - whatever line was throwing the error was
02:09 - actually the line that was throwing the
02:10 - error but assuming that is not the case
02:12 - I quickly looked at the lines around
02:13 - that line and I very quickly found the
02:15 - reason no reference exception errors are
02:17 - extremely common errors so I can very
02:19 - easily figure out what is causing it
02:20 - when I find one just by looking at the
02:23 - line I knew exactly what was going on oh
02:25 - is it maybe not like in this function at
02:28 - all could it wait
02:30 - ah okay well I just figured out what is
02:33 - the answer it's exactly over here on
02:35 - this one previously in the live stream I
02:37 - showed the debug visual for how the FL
02:39 - Field pathfinding Works it shows all the
02:41 - visual errors for the algorithm it's all
02:42 - pretty fun so anyways I enabled that
02:44 - debug visual just to show it and then I
02:45 - disabled it and then over here on the do
02:47 - scrip system over here I'm accessing
02:49 - that debug visual in order to update it
02:51 - but of course if I disable the game
02:53 - object that actually shows the visual if
02:55 - I do that then the awake never runs
02:56 - which means the Singleton instance is
02:58 - left now so that was r the issue super
03:00 - simple to solve but in this case became
03:02 - really tricky to debug specifically
03:04 - because dots apparently does not give
03:05 - you the exact line number in the stack
03:07 - Trace all the time du to the whole
03:09 - Source generation it might give you a
03:11 - line that is different from the actual
03:12 - line causing the error I didn't know
03:14 - that I had no idea dots did that I did
03:16 - know there was Source generation but I
03:17 - never considered how the in line numbers
03:19 - might be different so I did not know
03:20 - what was happening here but that means
03:22 - that this bug was actually really
03:23 - awesome thing anytime you encounter a
03:25 - bug it's always a great chance to learn
03:26 - something new so my advice is don't get
03:28 - frustrated when you find bugs take them
03:30 - as learning experiences by solving them
03:32 - you will know what to do next whenever
03:33 - you encounter that bug the next time WR
03:35 - play and there you go does work all
03:38 - right so that was that was fun okay that
03:40 - was a a good thing to to find out then
03:43 - the second bug was even stranger even
03:45 - hard to debug so I had a system to make
03:48 - the zombies attack the HQ however only
03:50 - some entities should do that if the
03:51 - entity if the zombie has the random
03:53 - walking component then that entity
03:55 - should really just randomly walk around
03:56 - the spawn point it should not go towards
03:58 - the HQ so I thought this was pretty
04:00 - simle to achieve I just had the query
04:02 - with none for that component and with
04:04 - that the entities that have that
04:05 - component should not attack the HQ
04:07 - however that was not the case they were
04:08 - still attacking the HQ I had no idea why
04:11 - the query wasn't running correctly I
04:13 - verified the code and everything was
04:14 - written correctly it has the W none
04:15 - random woning so it should work but it
04:17 - didn't also verified by stopping the
04:19 - game and inspecting the entities
04:20 - manually and yep they did have the
04:22 - random walking component so they had it
04:24 - but they were also still being included
04:26 - in that query even though that query had
04:27 - the wood none so that made really no
04:29 - sense this one really confused me for
04:31 - quite a while this is very strange if
04:33 - the entities did have that component why
04:35 - on Earth were they being included in
04:36 - that query now first I thought the issue
04:39 - was that I had two whone calls thinking
04:41 - maybe it had to be just one with the
04:43 - extra comma for each component I thought
04:45 - that was the issue but nope that was not
04:46 - the case eventually I also added the log
04:48 - to check if it actually had that
04:50 - component and it said that it didn't so
04:52 - basically over here the log is saying
04:53 - that it does not have the random walking
04:55 - component but when inspecting the
04:56 - entities manually I can see they do have
04:58 - that component so this was all extremely
05:01 - odd it took some time in exploring all
05:02 - these scripts in order to finally figure
05:04 - out what was the reason it was a weird
05:06 - ordering issue basically when the units
05:08 - are spawned it just spawns the unit
05:09 - prefab and that one does not have the
05:11 - random one component that one is ADD
05:13 - manually afterwards because only some
05:15 - enemies will have that component for
05:17 - example the hord enemies these are not
05:18 - supposed to have that component so I was
05:20 - manually adding that component after
05:21 - spawning however adding components that
05:23 - is what is considered to be a structural
05:25 - change so you cannot do that inside a
05:27 - for each query so for doing that was
05:29 - using an anti command buffer
05:31 - specifically this one on the nend
05:32 - simulation and right here this was
05:34 - indeed the issue basically the unit was
05:36 - being spawned right here spawned without
05:37 - that component and then it was queued up
05:39 - to add the component but that was only
05:41 - happening at the end of frame so on the
05:42 - beginning of the frame that enemy entity
05:44 - is being spawned and at the end of frame
05:46 - it is adding that component but in
05:48 - between these two actions that is when
05:49 - the attack system is actually running
05:51 - and when that system ran the entity did
05:53 - not indeed have the random walk
05:54 - component attached so it was telling the
05:56 - entity to attack the HQ and only at the
05:58 - end of frame only then then was it
06:00 - actually adding the random walking
06:01 - component so that was the issue all
06:02 - about the order of operations after
06:05 - finding out then the solution becomes
06:06 - super simple instead of queuing up the N
06:08 - command buffer to run at the end of
06:10 - frame instead of that I just manually
06:11 - created one and ran it manually after
06:13 - the 4 each quering that way when the
06:15 - attack HQ system runs when that runs the
06:17 - entity does have the random one
06:19 - component and it does not go inside that
06:20 - query so yet now that a very random very
06:23 - strange bug and again yet another great
06:25 - reason for learning the next time that I
06:26 - encounter such a strange issue like this
06:28 - one next time I will remember to check
06:30 - the order of the operations so like that
06:32 - there you go the logic does work so yeah
06:35 - that was the issue okay so basically
06:37 - with this video I want you to always
06:38 - keep one thing in mind whenever you
06:40 - watch some kind of video tutorial on
06:41 - something literally anything when you do
06:43 - the fact that the person presented the
06:45 - tutorial is teaching everything
06:46 - correctly without any errors that is now
06:48 - representative of what it took for them
06:49 - to learn when you watch a video tutorial
06:51 - you are watching the final presentation
06:53 - after all the learning all the mistakes
06:54 - all the trial and error the final polish
06:56 - video does not include that part but
06:58 - that part absolutely still happens to
07:00 - everyone for example when I eventually
07:01 - finish my DOT course which by the way
07:03 - you can go sign up and I'll let you know
07:04 - when it's out when I do finish it you
07:06 - won't see me struggleing with these
07:07 - issues because the final video is meant
07:09 - to teach you how to build everything the
07:10 - correct way but as you can see here I am
07:13 - going through these issues while
07:14 - building the original prototype so when
07:16 - you yourself find bugs throughout your
07:17 - process of making games or making
07:19 - anything if so that is perfectly normal
07:21 - that is something that happens to
07:22 - literally everyone that's a perfectly
07:23 - normal part of the learning process it
07:25 - just isn't shown in tutorials but do
07:26 - know that it absolutely happens to
07:27 - everyone

Cleaned transcript:

hello and welcome I'm your KMI so something just happened that I think is an excellent reminder of how myself and anyone who does tutorials we really just all human when you see a tutorial the final video is really not representative of what it took to research to get to that point that final tutorial might look perfect with no bugs no trial and error no mistakes nothing but that is because whoever is teaching the tutorial like myself I've literally already made all of the mistakes and all the trial and error during the research before making the final tutorial video just yesterday I did a live stream and I actually encountered two bugs that were very tricky to solve and someone wrote something in chat something like it's great to see how you struggle just like the rest of us and yep that is absolutely correct I encounter bugs just like you I have to find the cause just like you I'm really no different no one is encountering bugs is really a perfectly normal part of the process of building or learning literally anything so if you want to see how I solve bugs in real time if so you can watch what happened on this live stream okay what on Earth is going all right so the first bug was a non reference exception now usually this is a really isas to solve bug I've got my fourstep process and it always works great however in this case things were different I had really no idea what was going on supposedly because the bug was on this line of code this one inside the undro system except undro should not be called at all when I play the game only when I exit so the fact that this was causing the bug exactly when I press the play button that was very strange so I did exactly what I always do to solve the no reference exceptions I added a bunch of logs to identify exactly what is now but that did not work for some weird strange inexplainable reason the logs were not running I add the logs right before the line that was shown in the stack trace and nope the logs did not run but the null reference error that was still happening that is extremely strange code runs from top to bottom so before getting to that line it has to go through the previous line it has to print logs but it wasn't doing that so all of it extremely strange I really had no idea what was going on you can see me trying all kinds of things on the live stream and thankfully Danny from the UN do seam he was watching the stream and pointed out how the error might not necessarily be on that exact line of code basically dots does a ton of magic sour generation in the background and because of that the stack Trace might not point to the exact line where the eror is actually throwing I didn't know this I obviously assume that whatever line was throwing the error was actually the line that was throwing the error but assuming that is not the case I quickly looked at the lines around that line and I very quickly found the reason no reference exception errors are extremely common errors so I can very easily figure out what is causing it when I find one just by looking at the line I knew exactly what was going on oh is it maybe not like in this function at all could it wait ah okay well I just figured out what is the answer it's exactly over here on this one previously in the live stream I showed the debug visual for how the FL Field pathfinding Works it shows all the visual errors for the algorithm it's all pretty fun so anyways I enabled that debug visual just to show it and then I disabled it and then over here on the do scrip system over here I'm accessing that debug visual in order to update it but of course if I disable the game object that actually shows the visual if I do that then the awake never runs which means the Singleton instance is left now so that was r the issue super simple to solve but in this case became really tricky to debug specifically because dots apparently does not give you the exact line number in the stack Trace all the time du to the whole Source generation it might give you a line that is different from the actual line causing the error I didn't know that I had no idea dots did that I did know there was Source generation but I never considered how the in line numbers might be different so I did not know what was happening here but that means that this bug was actually really awesome thing anytime you encounter a bug it's always a great chance to learn something new so my advice is don't get frustrated when you find bugs take them as learning experiences by solving them you will know what to do next whenever you encounter that bug the next time WR play and there you go does work all right so that was that was fun okay that was a a good thing to to find out then the second bug was even stranger even hard to debug so I had a system to make the zombies attack the HQ however only some entities should do that if the entity if the zombie has the random walking component then that entity should really just randomly walk around the spawn point it should not go towards the HQ so I thought this was pretty simle to achieve I just had the query with none for that component and with that the entities that have that component should not attack the HQ however that was not the case they were still attacking the HQ I had no idea why the query wasn't running correctly I verified the code and everything was written correctly it has the W none random woning so it should work but it didn't also verified by stopping the game and inspecting the entities manually and yep they did have the random walking component so they had it but they were also still being included in that query even though that query had the wood none so that made really no sense this one really confused me for quite a while this is very strange if the entities did have that component why on Earth were they being included in that query now first I thought the issue was that I had two whone calls thinking maybe it had to be just one with the extra comma for each component I thought that was the issue but nope that was not the case eventually I also added the log to check if it actually had that component and it said that it didn't so basically over here the log is saying that it does not have the random walking component but when inspecting the entities manually I can see they do have that component so this was all extremely odd it took some time in exploring all these scripts in order to finally figure out what was the reason it was a weird ordering issue basically when the units are spawned it just spawns the unit prefab and that one does not have the random one component that one is ADD manually afterwards because only some enemies will have that component for example the hord enemies these are not supposed to have that component so I was manually adding that component after spawning however adding components that is what is considered to be a structural change so you cannot do that inside a for each query so for doing that was using an anti command buffer specifically this one on the nend simulation and right here this was indeed the issue basically the unit was being spawned right here spawned without that component and then it was queued up to add the component but that was only happening at the end of frame so on the beginning of the frame that enemy entity is being spawned and at the end of frame it is adding that component but in between these two actions that is when the attack system is actually running and when that system ran the entity did not indeed have the random walk component attached so it was telling the entity to attack the HQ and only at the end of frame only then then was it actually adding the random walking component so that was the issue all about the order of operations after finding out then the solution becomes super simple instead of queuing up the N command buffer to run at the end of frame instead of that I just manually created one and ran it manually after the 4 each quering that way when the attack HQ system runs when that runs the entity does have the random one component and it does not go inside that query so yet now that a very random very strange bug and again yet another great reason for learning the next time that I encounter such a strange issue like this one next time I will remember to check the order of the operations so like that there you go the logic does work so yeah that was the issue okay so basically with this video I want you to always keep one thing in mind whenever you watch some kind of video tutorial on something literally anything when you do the fact that the person presented the tutorial is teaching everything correctly without any errors that is now representative of what it took for them to learn when you watch a video tutorial you are watching the final presentation after all the learning all the mistakes all the trial and error the final polish video does not include that part but that part absolutely still happens to everyone for example when I eventually finish my DOT course which by the way you can go sign up and I'll let you know when it's out when I do finish it you won't see me struggleing with these issues because the final video is meant to teach you how to build everything the correct way but as you can see here I am going through these issues while building the original prototype so when you yourself find bugs throughout your process of making games or making anything if so that is perfectly normal that is something that happens to literally everyone that's a perfectly normal part of the learning process it just isn't shown in tutorials but do know that it absolutely happens to everyone
