With timestamps:

00:00 - in this video we're going to look at 20
00:01 - quick unity tips in just 10 minutes
00:03 - alright so let's begin
00:05 - [Music]
00:09 - all right so let's begin with tip number
00:11 - one use a white pixel in order to
00:13 - visualize sprite renders
00:14 - so in the hierarchy if you right click
00:16 - create the 2d object and make it a
00:17 - sprite
00:18 - if you do then you can't see anything
00:20 - that is because the sprite render
00:21 - doesn't render anything if over here on
00:23 - the sprite field there's nothing
00:24 - assigned
00:25 - so an extremely useful thing to have is
00:27 - to have a simple white pixel texture
00:29 - and if you drag it and there you go now
00:31 - it's visible you can stretch it
00:33 - you can paint it into any color and so
00:35 - on so this is literally a texture just a
00:37 - one by one white pixel which you can
00:39 - make it in paint or photoshop or really
00:41 - any imaging program
00:42 - tip number two use the inspector debug
00:44 - view now when making your scripts if
00:46 - you're following clean code principles
00:48 - then most of your fields should be set
00:49 - to private
00:50 - now making them private is great but it
00:52 - also means that they don't show up in
00:53 - the editor which can sometimes be useful
00:55 - however there's a really interesting way
00:57 - to see that just go over here on these
00:59 - three dots
01:00 - and change the inspector from normal
01:02 - into debug using that we can now
01:04 - inspect all three private fields and see
01:05 - the value that they have stored
01:07 - now as another bonus tip you can also
01:09 - make multiple inspectors
01:10 - so go up here right click click on add
01:12 - tab add another inspector
01:14 - and for example you could have a normal
01:16 - inspector and then next to it
01:18 - a debug inspector so there it is very
01:20 - useful now tip number three you can
01:22 - automatically create the material to use
01:23 - a specific shaper
01:25 - so down here on my project files i have
01:26 - a very simple shader
01:28 - and now when you want to make a material
01:29 - you might go into the folder that you
01:31 - want to place it in right click go into
01:32 - create and create a new material
01:34 - so that creates a material then over
01:35 - here you go into shader and select your
01:37 - actual shader
01:38 - so that works but another quick shortcut
01:41 - is to right click directly on top of the
01:43 - shader and create a new material
01:45 - and it automatically creates it using
01:46 - that shader tip number four
01:48 - learn about the buttons to swap between
01:50 - pivot and center and local in global
01:53 - so this is something you absolutely must
01:54 - know otherwise it will drive you crazy
01:56 - up here on the top left corner you see
01:58 - these two buttons so this one as you
02:00 - click it changes from pivot to center
02:03 - and this one changes from global to
02:04 - local now this effect where the handles
02:06 - are positioned in the scene view
02:08 - so here let me create just a random
02:10 - object
02:13 - so here it is just an object with two
02:14 - channel sprites inside it
02:16 - and now if i select on the parent and
02:18 - over here is set to pivot
02:20 - then the handle shows up on the actual
02:22 - pivot of this object
02:23 - however if i click on it and select the
02:25 - center now it's over there in the center
02:27 - so for example down here this little
02:29 - white dot is on zero zero zero and then
02:31 - let's say i want to place this parent
02:32 - also on zero zero zero
02:34 - then if i were to go over here and place
02:36 - it on zero zero zero
02:37 - then if you didn't know about these you
02:38 - would be very confused as to why the
02:40 - position is on zero
02:41 - zero but the handle is not so this can
02:44 - cause a ton of confusion
02:45 - and it works the same on all the others
02:46 - so for example if i rotate over here on
02:48 - this end
02:49 - i would be very confused as to why it is
02:51 - not rotating exactly where the handle is
02:52 - placed
02:53 - so again keep in mind on these two and
02:55 - usually you probably want to keep it
02:56 - always on the pivot
02:57 - then the next one is the global and
03:00 - local so for example over here i have
03:02 - added some rotation into the parent game
03:04 - object
03:05 - but all of the other ones do not have
03:06 - any rotation and now if i select combo
03:09 - then on the child we see the handles
03:10 - exactly like this
03:12 - so they are oriented according to the
03:13 - global position space so in here as i
03:15 - move to the right it's moving to the
03:16 - right
03:17 - however let's say that i wanted to move
03:19 - the child alongside the axis of the
03:21 - parent
03:22 - now using this it's very tricky since
03:23 - you would have to pick both of them and
03:25 - visually try to make it exactly perfect
03:28 - so that is why you have the second
03:29 - button to transform into local and now
03:31 - you can modify
03:32 - this handle and there you go it moves
03:33 - along the axis
03:35 - so again if you experience some strange
03:36 - behavior with your handles always make
03:38 - sure to double check to see that you are
03:40 - in the correct mode
03:41 - next up the hierarchy visibility button
03:44 - so
03:44 - down here we have our nice hierarchy
03:46 - window we can see a list of all the game
03:47 - objects present in this scene
03:49 - and you can also see some white space
03:51 - over here on the left side
03:53 - now these are actually two separate
03:54 - buttons now for example here i have my
03:57 - game with a canvas on top
03:59 - now the canvas usually puts it in the
04:00 - corner in there so this is my normal
04:02 - canvas and i simply have a button on the
04:04 - left corner
04:05 - so that works great however if i'm
04:07 - trying to edit something in the actual
04:09 - world space
04:10 - then right here it gets quite confusing
04:11 - because i can really look underneath
04:13 - that one
04:14 - so you can easily go into the canvas and
04:15 - use the button on the left side in order
04:17 - to actually hide it
04:18 - so this one hides the canvas so i can
04:20 - now play around in the actual world
04:21 - without
04:22 - being bothered by what's on the canvas
04:24 - and now the important thing is that this
04:25 - only affects the scene view
04:26 - so if i go into the game view yep over
04:28 - here still looks the same there's the
04:30 - button still in the lower left corner
04:31 - so this button toggles the scene
04:33 - visibility for any game object so you
04:35 - can get a clear view of what you're
04:36 - working on
04:37 - and related to that is the button next
04:38 - to it which is the hierarchy unlock
04:40 - button
04:41 - so let's say i have a huge background
04:43 - sprite down there
04:44 - and now let's say i want to deselect the
04:45 - object that i'm currently selecting so i
04:47 - want to decent like this
04:48 - and if i do when i try to click on the
04:50 - empty space i can't do it since there's
04:52 - really no empty space so by clicking in
04:54 - there i just select
04:55 - the background so over here on the
04:56 - hierarchy on the background game object
04:58 - we press on this button and now this
04:59 - means that we can no longer touch
05:01 - on this actual object so if i click on
05:03 - it now it's the same thing as clicking
05:05 - on empty space
05:06 - so if i had this object selected i move
05:07 - it now i want to deselect i can click on
05:09 - there and yep it works
05:10 - and again this only affects the scene
05:12 - view and not the game view so these two
05:14 - buttons are really great for helping you
05:15 - easily play around as you're making your
05:17 - scene
05:18 - on to the next step use anonymous lambda
05:20 - functions in order to make your code
05:21 - more compact
05:22 - so when the functions are extremely
05:24 - compact which makes them perfect for
05:25 - many scenarios
05:26 - for example over here adding some
05:28 - behavior to a button click
05:30 - so like this it works you access the
05:31 - button you add a listener
05:33 - and you define the function that's going
05:34 - to listen that event so when you click
05:36 - on the button you're going to trigger
05:37 - this function okay
05:38 - however if you had tons of buttons this
05:40 - would be quite a lot of work you would
05:41 - have to write a separate function for
05:43 - every single button
05:44 - so instead you can make this a lot more
05:46 - compact by using a lambda function
05:50 - and yep there it is over here we have
05:52 - the exact same thing that we have down
05:54 - here
05:54 - so we have a function that takes no
05:56 - parameters and then inside we have our
05:58 - code block and in this case we just have
06:00 - a comment
06:01 - so you can use lambda functions whenever
06:03 - you need a delegate
06:07 - so another use case is when dealing with
06:08 - events let's say you don't want to
06:10 - define an actual function so you can do
06:12 - pause equals and over here write down
06:13 - the signature
06:16 - and yep there you go exam like that so
06:18 - lambda functions are extremely useful
06:19 - for making your code more compact
06:21 - if you want to learn more go watch the
06:22 - video where i cover delegates in detail
06:24 - next step you can destroy a script with
06:27 - destroy now for example let's say you
06:28 - want to run some code after the very
06:30 - first update
06:31 - so you make the script it does something
06:33 - on late update and over here we want to
06:35 - do it just once
06:36 - in order to do that you can simply just
06:38 - call destroy and over here we pass in
06:40 - this
06:40 - which is going to pass in the reference
06:42 - to this particular script and if you run
06:44 - it like this
06:45 - so here let's create an empty game
06:46 - object let's attach a script onto it and
06:49 - run the code
06:50 - and if there is the object no longer has
06:51 - that script so the object itself still
06:54 - exists but only the script was destroyed
06:56 - so this can be useful when for example a
06:57 - unit dies but you want to keep the
06:59 - visuals playing some sort of death
07:00 - animation
07:01 - you can just destroy the ai script and
07:02 - leave the rest next step debug.drawing
07:05 - now you probably already know that
07:07 - debug.log is extremely useful
07:10 - however did you know that the debug
07:11 - class also has more functions
07:13 - so if you just go here click on that you
07:15 - can see all the various functions there
07:17 - you go a ton of logs
07:18 - and over here we also have a really
07:20 - interesting draw line so this will draw
07:22 - a gizmo line which can be very useful
07:23 - for visualizing the state of your
07:28 - scripts
07:30 - so for example let's say i had a script
07:31 - that handled some pathfinding
07:33 - so it got almost a path and with this
07:35 - you could use debug.drawline in order to
07:37 - draw a visual representation of the path
07:42 - so here just cycling through the path
07:43 - and drawing a line between the current
07:45 - position onto the next position
07:46 - and yep over here we can see the inner
07:48 - workings of that class so we can see
07:50 - that we have a path going from there
07:51 - there there there
07:52 - so it's a really useful tool when you
07:54 - have some debug info that you want to
07:56 - show with some visual rather than just
07:57 - some text
07:58 - also when you're on the game view make
08:00 - sure you go up here and enable gizmos
08:01 - otherwise the debug.drawline does not
08:03 - actually show
08:04 - alright so the time is almost up so
08:06 - let's go through some quickfire tips
08:08 - you can hit shift space to go full
08:09 - screen so over here i have a shadow
08:11 - graph window
08:12 - so i click on it in order to select it
08:13 - then press shift space in order to talk
08:15 - on full screen
08:16 - so very useful to work around on
08:17 - shadowgraph then go back and go back
08:19 - into the game scene
08:20 - next one you can hit ctrl d in order to
08:22 - duplicate any object
08:24 - so it works in the project files and it
08:26 - also works over here on the hierarchy
08:28 - for another one you can press f2 to
08:30 - rename something
08:31 - again works with the hierarchy and also
08:33 - the project files
08:34 - next on the console right here if you
08:36 - select on these ones you can go into log
08:38 - entry
08:39 - and over here select the number of lines
08:40 - you want for the log so here are two log
08:43 - messages
08:43 - and you can set it to one in order to
08:44 - keep it really nice and compact but if
08:46 - you want to see a ton of text
08:48 - you can set it to many more lines and
08:50 - there you go now it shows that one
08:51 - now choose that one shows where it
08:52 - happened the script that happened and so
08:54 - on
08:54 - next up use the widget to modify the
08:56 - collider size so over here i've got a
08:58 - cube with the box highlighter you can
08:59 - click on this button
09:00 - and there you go now it shows a bunch of
09:02 - dots that you can grab so click and drag
09:04 - and there you go you can set the
09:05 - collateral to exactly the same size that
09:07 - you want without having to touch here on
09:09 - the numbers for the center and the size
09:11 - also related to that you have the
09:12 - polygon collider which you can still add
09:14 - a whole bunch of points anywhere on your
09:16 - shape
09:17 - and if you want to delete them you hold
09:19 - down control and then you click anywhere
09:21 - on the line
09:22 - now just keep in mind you have to click
09:23 - on line or to delete and not on top of
09:25 - the
09:25 - point if you go on top of the point
09:26 - nothing happens have to click on the
09:28 - line in order to delete it
09:29 - for a simple one you can press the f key
09:31 - in order to focus on an object
09:33 - so really simple and if you get lost it
09:35 - really helps when you don't know where a
09:36 - certain object is
09:37 - so just select on a hierarchy press f
09:39 - and there you go it goes straight onto
09:40 - the object
09:41 - and if you want to position your game
09:43 - camera you can use the scene controls in
09:45 - order to position the scene camera
09:46 - exactly where you want it
09:47 - then select the main camera object and
09:49 - press ctrl shift and f
09:51 - and there you go the camera
09:52 - automatically matches what the scene
09:53 - camera is seeing
09:54 - so move the scene camera to exactly
09:56 - where you want press ctrl shift f there
09:58 - you go
09:58 - next up you can enable or disable the
10:00 - select object by going over here and
10:02 - pulling on this toggle okay
10:03 - and also you can use a shortcut alt
10:05 - shift a so there you go it just toggles
10:07 - the visibility of this game object
10:08 - and regarding gizmos which are the
10:10 - various icons and lines that you can see
10:12 - here
10:13 - as you know you can enable or disable
10:14 - them but then you can also click on this
10:16 - area to see some more options and very
10:17 - importantly up here you have button to
10:19 - swap between 2d or 3d gizmos so right
10:21 - now it's 3d so they're almost invisible
10:24 - and if i click yep there you go now they
10:25 - become 2d and now they are visible no
10:27 - matter how much i zoom out
10:28 - or alternatively switch to 3d and
10:30 - massively increase the size
10:31 - alright so that's 10 minutes okay so
10:33 - that was quite a lot of tips and i hope
10:35 - you found some helpful ones that you
10:36 - didn't know about
10:37 - now as i was gathering this list i came
10:39 - up with many more tips so let me know in
10:40 - the comments if you'd like to see a part
10:42 - two
10:42 - alright so thanks for watching and i'll
10:44 - see you next time
10:52 - [Music]

Cleaned transcript:

in this video we're going to look at 20 quick unity tips in just 10 minutes alright so let's begin all right so let's begin with tip number one use a white pixel in order to visualize sprite renders so in the hierarchy if you right click create the 2d object and make it a sprite if you do then you can't see anything that is because the sprite render doesn't render anything if over here on the sprite field there's nothing assigned so an extremely useful thing to have is to have a simple white pixel texture and if you drag it and there you go now it's visible you can stretch it you can paint it into any color and so on so this is literally a texture just a one by one white pixel which you can make it in paint or photoshop or really any imaging program tip number two use the inspector debug view now when making your scripts if you're following clean code principles then most of your fields should be set to private now making them private is great but it also means that they don't show up in the editor which can sometimes be useful however there's a really interesting way to see that just go over here on these three dots and change the inspector from normal into debug using that we can now inspect all three private fields and see the value that they have stored now as another bonus tip you can also make multiple inspectors so go up here right click click on add tab add another inspector and for example you could have a normal inspector and then next to it a debug inspector so there it is very useful now tip number three you can automatically create the material to use a specific shaper so down here on my project files i have a very simple shader and now when you want to make a material you might go into the folder that you want to place it in right click go into create and create a new material so that creates a material then over here you go into shader and select your actual shader so that works but another quick shortcut is to right click directly on top of the shader and create a new material and it automatically creates it using that shader tip number four learn about the buttons to swap between pivot and center and local in global so this is something you absolutely must know otherwise it will drive you crazy up here on the top left corner you see these two buttons so this one as you click it changes from pivot to center and this one changes from global to local now this effect where the handles are positioned in the scene view so here let me create just a random object so here it is just an object with two channel sprites inside it and now if i select on the parent and over here is set to pivot then the handle shows up on the actual pivot of this object however if i click on it and select the center now it's over there in the center so for example down here this little white dot is on zero zero zero and then let's say i want to place this parent also on zero zero zero then if i were to go over here and place it on zero zero zero then if you didn't know about these you would be very confused as to why the position is on zero zero but the handle is not so this can cause a ton of confusion and it works the same on all the others so for example if i rotate over here on this end i would be very confused as to why it is not rotating exactly where the handle is placed so again keep in mind on these two and usually you probably want to keep it always on the pivot then the next one is the global and local so for example over here i have added some rotation into the parent game object but all of the other ones do not have any rotation and now if i select combo then on the child we see the handles exactly like this so they are oriented according to the global position space so in here as i move to the right it's moving to the right however let's say that i wanted to move the child alongside the axis of the parent now using this it's very tricky since you would have to pick both of them and visually try to make it exactly perfect so that is why you have the second button to transform into local and now you can modify this handle and there you go it moves along the axis so again if you experience some strange behavior with your handles always make sure to double check to see that you are in the correct mode next up the hierarchy visibility button so down here we have our nice hierarchy window we can see a list of all the game objects present in this scene and you can also see some white space over here on the left side now these are actually two separate buttons now for example here i have my game with a canvas on top now the canvas usually puts it in the corner in there so this is my normal canvas and i simply have a button on the left corner so that works great however if i'm trying to edit something in the actual world space then right here it gets quite confusing because i can really look underneath that one so you can easily go into the canvas and use the button on the left side in order to actually hide it so this one hides the canvas so i can now play around in the actual world without being bothered by what's on the canvas and now the important thing is that this only affects the scene view so if i go into the game view yep over here still looks the same there's the button still in the lower left corner so this button toggles the scene visibility for any game object so you can get a clear view of what you're working on and related to that is the button next to it which is the hierarchy unlock button so let's say i have a huge background sprite down there and now let's say i want to deselect the object that i'm currently selecting so i want to decent like this and if i do when i try to click on the empty space i can't do it since there's really no empty space so by clicking in there i just select the background so over here on the hierarchy on the background game object we press on this button and now this means that we can no longer touch on this actual object so if i click on it now it's the same thing as clicking on empty space so if i had this object selected i move it now i want to deselect i can click on there and yep it works and again this only affects the scene view and not the game view so these two buttons are really great for helping you easily play around as you're making your scene on to the next step use anonymous lambda functions in order to make your code more compact so when the functions are extremely compact which makes them perfect for many scenarios for example over here adding some behavior to a button click so like this it works you access the button you add a listener and you define the function that's going to listen that event so when you click on the button you're going to trigger this function okay however if you had tons of buttons this would be quite a lot of work you would have to write a separate function for every single button so instead you can make this a lot more compact by using a lambda function and yep there it is over here we have the exact same thing that we have down here so we have a function that takes no parameters and then inside we have our code block and in this case we just have a comment so you can use lambda functions whenever you need a delegate so another use case is when dealing with events let's say you don't want to define an actual function so you can do pause equals and over here write down the signature and yep there you go exam like that so lambda functions are extremely useful for making your code more compact if you want to learn more go watch the video where i cover delegates in detail next step you can destroy a script with destroy now for example let's say you want to run some code after the very first update so you make the script it does something on late update and over here we want to do it just once in order to do that you can simply just call destroy and over here we pass in this which is going to pass in the reference to this particular script and if you run it like this so here let's create an empty game object let's attach a script onto it and run the code and if there is the object no longer has that script so the object itself still exists but only the script was destroyed so this can be useful when for example a unit dies but you want to keep the visuals playing some sort of death animation you can just destroy the ai script and leave the rest next step debug.drawing now you probably already know that debug.log is extremely useful however did you know that the debug class also has more functions so if you just go here click on that you can see all the various functions there you go a ton of logs and over here we also have a really interesting draw line so this will draw a gizmo line which can be very useful for visualizing the state of your scripts so for example let's say i had a script that handled some pathfinding so it got almost a path and with this you could use debug.drawline in order to draw a visual representation of the path so here just cycling through the path and drawing a line between the current position onto the next position and yep over here we can see the inner workings of that class so we can see that we have a path going from there there there there so it's a really useful tool when you have some debug info that you want to show with some visual rather than just some text also when you're on the game view make sure you go up here and enable gizmos otherwise the debug.drawline does not actually show alright so the time is almost up so let's go through some quickfire tips you can hit shift space to go full screen so over here i have a shadow graph window so i click on it in order to select it then press shift space in order to talk on full screen so very useful to work around on shadowgraph then go back and go back into the game scene next one you can hit ctrl d in order to duplicate any object so it works in the project files and it also works over here on the hierarchy for another one you can press f2 to rename something again works with the hierarchy and also the project files next on the console right here if you select on these ones you can go into log entry and over here select the number of lines you want for the log so here are two log messages and you can set it to one in order to keep it really nice and compact but if you want to see a ton of text you can set it to many more lines and there you go now it shows that one now choose that one shows where it happened the script that happened and so on next up use the widget to modify the collider size so over here i've got a cube with the box highlighter you can click on this button and there you go now it shows a bunch of dots that you can grab so click and drag and there you go you can set the collateral to exactly the same size that you want without having to touch here on the numbers for the center and the size also related to that you have the polygon collider which you can still add a whole bunch of points anywhere on your shape and if you want to delete them you hold down control and then you click anywhere on the line now just keep in mind you have to click on line or to delete and not on top of the point if you go on top of the point nothing happens have to click on the line in order to delete it for a simple one you can press the f key in order to focus on an object so really simple and if you get lost it really helps when you don't know where a certain object is so just select on a hierarchy press f and there you go it goes straight onto the object and if you want to position your game camera you can use the scene controls in order to position the scene camera exactly where you want it then select the main camera object and press ctrl shift and f and there you go the camera automatically matches what the scene camera is seeing so move the scene camera to exactly where you want press ctrl shift f there you go next up you can enable or disable the select object by going over here and pulling on this toggle okay and also you can use a shortcut alt shift a so there you go it just toggles the visibility of this game object and regarding gizmos which are the various icons and lines that you can see here as you know you can enable or disable them but then you can also click on this area to see some more options and very importantly up here you have button to swap between 2d or 3d gizmos so right now it's 3d so they're almost invisible and if i click yep there you go now they become 2d and now they are visible no matter how much i zoom out or alternatively switch to 3d and massively increase the size alright so that's 10 minutes okay so that was quite a lot of tips and i hope you found some helpful ones that you didn't know about now as i was gathering this list i came up with many more tips so let me know in the comments if you'd like to see a part two alright so thanks for watching and i'll see you next time
