With timestamps:

00:00 - hello and welcome I am your code monkey
00:01 - in this video we're going to create the
00:03 - pink system from apex legends let's
00:05 - begin
00:08 - so apex legends has a bunch of really
00:11 - interesting systems and in this video
00:12 - we're going to recreate the ping system
00:14 - it's one of the best features in the
00:16 - game and one the reason why the game has
00:18 - been so successful by using simple
00:20 - things combined with context detection
00:22 - the game can be fully played
00:23 - cooperatively without ever talking to
00:25 - your teammates so for example if I press
00:28 - the ping button on the middle of nowhere
00:29 - you can see that I get a very nice
00:31 - simple movement thing that stays visible
00:33 - even when it goes off screen so I move
00:35 - away and there you go that is telling me
00:37 - that there's a ping in that direction
00:38 - and it shows the distance however if I
00:41 - press on top of an item like say this
00:43 - helmet in here I press it and Rigo the
00:46 - ping is correctly context-sensitive
00:48 - and this place that there is an helmet
00:49 - in that direction and again if I move
00:52 - away move the camera and there you go
00:54 - that cell meet there's an element in
00:55 - that direction works for all the other
00:57 - item types exactly as intended and if I
01:00 - double click instead of getting a simple
01:02 - movement like this I double click and it
01:04 - shows a enemy spotted ping so with just
01:09 - one button we can create three different
01:11 - ping types that provide a multitude of
01:13 - information for our teammates and we
01:16 - also have a ping we own that can be
01:18 - displayed when we hold on the ping
01:20 - button and we have even more ping types
01:22 - to show so for example saying that an N
01:24 - mu spot in here and again if I move away
01:26 - there you go you can see that there's
01:28 - the pain indicator saying there's a ping
01:30 - 65 meters in that direction now this is
01:33 - a really cool system and certainly one
01:35 - of the reasons why the game has found so
01:37 - much success because again even with our
01:39 - microphone it can communicate quite
01:40 - effectively with your teammates so we're
01:43 - going to implement this system in 2d but
01:45 - it really works pretty much the same in
01:47 - 3d all right so let's get to it
01:49 - here is my stirring scene I have a
01:52 - simple character in here aiming towards
01:54 - the mouse and I can move them around and
01:56 - shoot now the ping system won't be
01:58 - completely separate from anything else
02:00 - so the base movement code and aiming
02:02 - here doesn't really matter all we're
02:04 - going to focus on is to store the
02:06 - position of the ping and identify what's
02:07 - behind the mouse so we can display it I
02:09 - have done videos on a simple character
02:12 - movement and camera system so check
02:14 - those out to see how to create a basic
02:15 - character movement like this so with
02:18 - this base let's start making the pings
02:20 - we want to click on the middle
02:22 - button as our ping button and when we do
02:24 - highlight whatever is under the mouse
02:26 - and if nothing is in there we show a
02:28 - move ping and if we double click we show
02:31 - an enemy pang so let's start off with a
02:33 - very simple prefab to show the pink
02:35 - position so in here we create a new game
02:38 - object and we add the sprite pregnant
02:41 - and drag the move pane sprite okay so
02:44 - this is our simple game object now let's
02:47 - make this into a prefab so first create
02:49 - a prefabs folder and let's drag our ping
02:53 - into there to make it into a prefab okay
02:55 - let's rename this to PF ping world this
02:59 - will be a prefab that won't spawn
03:01 - whenever we want to display a ping in
03:02 - the world now let's create a class to
03:04 - hang all our ping system so in here
03:06 - making you see sharp script for our ping
03:08 - system in here and let's first make it a
03:11 - simple static class we're making static
03:15 - since we only want to have one ping
03:17 - system and we do not want to instantiate
03:19 - it now let's have a function to add a
03:22 - ping in order to add a pink we're
03:25 - required to know the position for that
03:28 - thing okay and in here let's just spawn
03:30 - our prefab in order to get a reference
03:33 - for our prefab let's add it as a new
03:35 - field on our game assets I've done video
03:38 - on how this class works but essentially
03:41 - what it does is we can provide public
03:43 - fields and then we can access those
03:44 - fields to get our references from our
03:46 - other scripts so in here we can simply
03:48 - add a public transform field for the PF
03:51 - ping world and now I can go here into
03:53 - the pink system and I can instantiate go
03:59 - into the game assets that instance that
04:01 - paying world and just like that we have
04:05 - a reference to the ping world which is
04:07 - stored as a public field in the game
04:09 - assets class and here in the editor I
04:11 - have a game object that contains that
04:13 - script and I can simply drag the
04:15 - reference onto it so now through code I
04:17 - can access this reference okay so now
04:19 - back in here on the ping system we can
04:21 - now insensate this prefab onto this
04:23 - position so insensate the pre film on
04:26 - the position we receive and put her in
04:28 - that identity in order to not be rotated
04:30 - all right so we should now be able to
04:33 - call this function and be able to see a
04:34 - ping exam
04:35 - on that position so now let's capture
04:37 - the mouse input so for that let's create
04:40 - a game Hamlin just a simple script where
04:45 - we can capture our mouse input and let's
04:47 - drag it on to this game object and in
04:49 - here let's go into our private void
04:51 - update and simply do a if input get
04:55 - mouse button down we want the middle
04:57 - mouse button so button zero is a left
05:00 - one button one is right and button two
05:02 - is the middle mouse button so when we
05:06 - press the middle mouse button let's
05:07 - simply add a pink so we go into the pink
05:09 - system when we call the add pink
05:11 - function and now in here we need to know
05:12 - the mouse run position so for that let's
05:15 - go into the code monkey Tonys which is
05:18 - obviously can grab for free from me and
05:19 - decoder monkey calm and in the utilities
05:23 - there is a very simple function to get
05:25 - the mouse wrong position all right so
05:28 - just like that when we click on the
05:29 - middle mouse button we should be able to
05:30 - see the ping prefab being spawned let's
05:33 - see okay so here I am moving around I
05:36 - put the mouse over it here and I click
05:37 - the middle mouse button any of there you
05:39 - go there's the prefab showing that's a
05:41 - move position and we should move in
05:43 - there put another one there and there
05:44 - you go all right great
05:46 - so so far so good now let's add a
05:49 - distance to the pink for that let's edit
05:52 - the prefab and inside let's make a new
05:56 - 3d object using text mesh now we're
06:00 - going to use this to this point in
06:01 - distance
06:13 - okay so we now have a nice distance text
06:16 - now let's make a script that won't run
06:18 - on that prefab so in here make a new
06:21 - c-sharp script this won't be the pink
06:23 - distance can work let's write that
06:26 - script on to the distance text okay now
06:30 - here on the script first on the private
06:32 - void awake let's grab a reference to the
06:35 - text mesh object and then on the private
06:43 - void update let's update to show the
06:45 - distance now here we need to calculate
06:55 - the distance so we need to do a vector3
06:57 - in that distance first we need the
07:00 - position of the ping which is on the
07:01 - transform dot parentage position since
07:04 - this is running on the text object which
07:06 - is a child of the pink prefab and then
07:13 - we need the player position so we get
07:21 - the pink position then the player
07:22 - position is based on the class that is
07:24 - handling the player is simply get the
07:26 - position from there then we calculate
07:28 - the vector three distance between those
07:29 - two and now in here how you convert it
07:33 - into meters won't depend on how you set
07:34 - up the units in your game so this will
07:37 - return the number of units now let's
07:39 - convert it into meters which in my case
07:42 - given the size of the sprite let's
07:45 - simply divide this by three F so around
07:47 - three units equals one meter then let's
07:50 - convert it into an int so we do a method
07:53 - on 2/10 and run it all into an int all
07:56 - right so that you do it for this playing
07:58 - the distance from the ping to our player
08:00 - so let's test again and now we should be
08:03 - able to see the ping correctly display
08:05 - the distance okay here I am with my
08:07 - character now let's run a ping in here
08:09 - yep there you go it's 37 meters away now
08:12 - if I move the player you have there you
08:13 - go it is correctly updating showing the
08:16 - distance from the player to the ping
08:18 - all right great so now that we have the
08:20 - basis of our ping where
08:22 - let's make sure that it's always visible
08:23 - since right now if I move the camera to
08:25 - the left side you don't actually know
08:26 - there's a thing in there so let's do
08:28 - that we're going to make it always
08:30 - visible by adding a secondary ping
08:32 - indicator in the you want so let's go
08:34 - into our canvas in here let's make a new
08:37 - game object this will be our obtained
08:38 - window and inside we're going to make a
08:41 - prefab very much like our normal prefab
08:55 - okay that's pretty much it let's make it
08:57 - in to a prefab
08:58 - the same as we did with a ping on the
09:00 - world so now we have a penguin prefab
09:02 - and a ping UI prefab so now let's make
09:05 - the code for our ping window so create
09:07 - the new c-sharp script for the ping
09:09 - window and here on let's first create a
09:12 - static instance so we can interact with
09:14 - this window through static functions so
09:16 - we just make a private static ping
09:18 - window this will be our instance and we
09:20 - simply set it on our awake
09:22 - alright so now let's make a public
09:27 - static void add ping and will receive a
09:31 - vector3 for the position of that ping
09:33 - and here we're going to instantiate the
09:36 - UI prefab again let's add a new field
09:40 - into our game assets class so we have PF
09:45 - ping UI on the game assets class and we
09:48 - instantiate it onto this transform as
09:50 - the parent
09:55 - so we have our in Senshi ated pingu i
09:58 - transform now in here we need to
10:00 - reposition and either show or hide the
10:03 - prefab so for that let's make another
10:05 - script that won't run on that prefab new
10:08 - c-sharp script call it the ping GUI
10:10 - handler
10:11 - let's drag it onto the prefab okay and
10:15 - now in here we need a function to
10:17 - receive the target position for this
10:19 - particular ping
10:20 - so let's make a public void call it the
10:24 - set up in order to set up this ping you
10:26 - why
10:26 - and we're going to receive a regular
10:28 - three for the ping position let's store
10:34 - it in the field all right now let's do
10:40 - an update and in here and let's locate
10:44 - the anchored position now for the
10:51 - anchored position let's place it in a
10:53 - circular area so what we want is let's
10:56 - say that the actual ping is over here
10:58 - outside the bounds so we want this one
11:00 - to be shifted in a certain area around
11:02 - pointing in that direction then let's
11:04 - say it's down here we want to point it
11:05 - in there and there and so on so in order
11:08 - to figure out the radius that we should
11:09 - move in let's look into the canvas and
11:11 - here I have set it up to match with the
11:13 - height so that means that when the
11:16 - aspect ratio changes like for example
11:18 - five four you can see that the height
11:20 - stays the same and only horizontally it
11:22 - changes so that means we can use the
11:24 - height as the radius for our circle and
11:27 - it won't always be visible so in this
11:29 - case in order to make it always visible
11:31 - let's use 270 as our radius so back in
11:35 - the code let's first come like the
11:37 - direction towards our target and here
11:40 - we're going to use the distance from the
11:42 - camera rather than from the player since
11:45 - we are supposed to be pointing towards
11:46 - something we cannot see so the camera
11:48 - makes more sense
11:52 - and let's calculate the direction which
11:56 - will be the target position which is the
11:58 - thing position minus D from position so
12:04 - now that we have the direction towards
12:06 - our target let's place it in D UI using
12:08 - that direction and the UI radius all
12:15 - right that should do it
12:16 - and just like that we should have this
12:18 - object being pointed towards the ping
12:21 - position so now we can go into the ping
12:23 - window and in here after we instantiate
12:26 - it thank you I transform let's get the
12:28 - component for the ping UI handler and we
12:32 - call the setup function and we give a
12:33 - deep pink position okay that's pretty
12:36 - much it and lastly here on the pinky Y
12:39 - handler let's update the distance just
12:41 - like we did in this script
12:53 - all right so that should do it
12:55 - and this code is working exactly the
12:57 - same except for the pink position we're
12:59 - using the one we received on our setup
13:01 - and finally we call the add thing
13:04 - function on the penguin Doe whenever we
13:06 - add a ping to the ping system so here we
13:09 - are adding a ping and we go into the
13:10 - ping window and we also call at ping and
13:13 - we pass in the same position so let's
13:16 - see if the UI ping does fall in the same
13:18 - direction as the actual paint okay so
13:21 - here I am
13:21 - now if I fire a pink if there you go
13:24 - there's the world ping and there's the
13:26 - UI pink now let's see if it's pointing
13:27 - towards it and yep indeed it is pointing
13:30 - towards it based on the camera position
13:32 - so I can circle around and if that thing
13:35 - is now hidden I know that there's a ping
13:37 - in that direction so I move towards it
13:39 - and yep there it is all right great so
13:41 - the UI ping is telling me both the
13:43 - direction and the distance towards the
13:45 - actual thing okay so far so good
13:48 - now obviously we only want the UI ping
13:50 - to be visible when the actual ping is
13:52 - off camera when it's visible then we
13:54 - don't want the UI paint to be visible so
13:56 - let's do that here in the ping UI hammer
14:00 - code we need to do a test to see if the
14:03 - ping position is inside the camera so
14:06 - for that we do a camera that main that
14:10 - world to screen point which transforms a
14:13 - position from world space into screen
14:15 - space so we can take the pink position
14:18 - this will return a vector to containing
14:22 - the ping screen coordinates so now we
14:26 - can test if these screen coordinates are
14:28 - inside the actual screen so in here we
14:32 - define a boolean call it is our screen
14:34 - and essentially we can test if it's off
14:37 - screen by testing the ping screen
14:39 - coordinates test if the X is bigger than
14:42 - screen dot width then it's off screen
14:45 - from the right side let's one or
14:56 - so we have our bullion testing if it's
14:59 - off screen and if soft screen if the
15:01 - screen coordinates are past the width or
15:02 - under zero or bigger than height or
15:05 - under zero all right so using this
15:08 - volume we can easily set this game
15:10 - object to either visible or hidden now
15:12 - in here the simplest way to make visible
15:14 - or hidden would be to set the game
15:16 - object out set active however in here we
15:18 - cannot do this since if we were to set
15:20 - this set active to false then the update
15:23 - would never run and it would be hidden
15:25 - and never shown again so instead of
15:27 - disabling the game object itself let's
15:29 - disable the image and text components so
15:36 - in here we only enable the image when
15:38 - the ping is off screen and if it's on
15:40 - screen then with the same one same thing
15:42 - for the distance text and here we only
15:45 - update the UI position and it isn't sex
15:47 - again when the ping is actually off
15:49 - screen so when the ping is on-screen the
15:56 - new I helmet is simply hidden and it
15:58 - doesn't do anything ok so that should do
16:01 - it
16:01 - let's test okay here's the character and
16:04 - let's spawn a ping and there you go
16:06 - there's only the world thing the UI
16:07 - thing is not visible now let's see if we
16:09 - move away and yep there's the UI ping
16:13 - showing that an actual thing is 90
16:15 - meters in that direction so we go
16:17 - towards it and when it shows up on
16:19 - screen there you go the UI pink vanishes
16:21 - and let's one another ping and look at
16:23 - that there's a ping in that distance
16:24 - ping that distance and we go and you
16:27 - when they're on-screen the UI things
16:29 - vanish all right so far so good so we
16:33 - now have a ping in the world and it's
16:35 - also shown in the UI if the world ping
16:38 - is hidden so essentially we have all the
16:40 - code to function with the basic ping
16:42 - logic so now we want to add different
16:45 - paint types so here on the pink system
16:48 - in order to have multiple ping types we
16:51 - need to store the type and not just its
16:54 - position so we need to rewrite this code
16:56 - in order to have the add ping function
16:58 - receive more information than just the
17:00 - position so for that let's use a custom
17:02 - class which will contain all the
17:04 - information
17:05 - for our pain so we do a common class
17:08 - let's call it a ping and in here the
17:12 - information we need in our ping is first
17:14 - of all we need a type so let's define a
17:16 - poly kanoon for the type of this thing
17:18 - and for the vowel types we have the move
17:21 - which is the one we were using and let's
17:23 - also make an enemy type then we store a
17:26 - private type for the pink type and a
17:28 - private vector3 for the bank position
17:43 - all right so here we have a nice very
17:45 - simple class to handle a single pink we
17:48 - have the type and we have the position
17:49 - and various functions to ask what type
17:52 - and position this ping has so now let's
17:54 - change all of our add ping functions to
17:56 - receive a pink object so if you think
17:59 - pink instead of receiving just a
18:01 - position so in here instead of getting a
18:04 - position we need to go into the pink and
18:06 - get the pink position okay now for the
18:09 - app thing let's pass in our ping object
18:11 - now let's edit this and here same thing
18:15 - receive a pink object which is inside
18:18 - the ping system
18:31 - all right so all of our code has been
18:34 - reworked to work with this specific
18:36 - class which contains our ping object
18:38 - so now let's left is here in the game
18:41 - handler when we add a ping in here we
18:44 - need to pass in a ping object so let's
18:46 - create a new ping system that ping here
18:51 - let's choose the pink type as a move
18:53 - thing just as we were doing and
18:55 - infesting the warm position all right
18:57 - so we refactor the code to work with
18:59 - this new ping object and everything
19:01 - should work perfectly fine so let's test
19:03 - and there's my character there's the
19:05 - things don't work perfectly fine if I
19:07 - move away the UI thing still works
19:08 - perfectly fine all right so everything
19:10 - is still working but we have
19:12 - successfully refactored our code to use
19:14 - a specific class to be able to handle
19:16 - all of our pings so now let's start
19:18 - testing creating an enemy ping so here
19:20 - on the game handler
19:21 - let's test spawning an enemy ping on the
19:25 - right mouse button so on the ping button
19:27 - one and we call it set up being a move
19:29 - type let's say it's an enemy time so if
19:32 - you click on the right mouse button we
19:34 - should see an enemy thing we want later
19:37 - make it work by double clicking just
19:38 - like in the game but for now let's keep
19:40 - things simple and make it this way so we
19:42 - just like that we are already creating a
19:44 - ping which contains the enemy ping time
19:46 - now we need to swap the visual based on
19:49 - the ping type so let's go to where we
19:52 - were creating the world ping here on the
19:54 - ping system and in here after in Senshi
19:59 - ating the transform let's do a switch on
20:02 - the ping type and now in here we could
20:04 - have different prefabs for each type of
20:06 - thing but we can also use the very same
20:09 - one and then through code modify the
20:10 - visuals so in here after instantiating
20:13 - let's do a switch on the ping that yet
20:16 - ping type case we have ping type dot
20:19 - move that's default so we don't do
20:21 - anything let's do it as the default yep
20:23 - and then we have case ping time enemy
20:26 - then this is where we need to change the
20:28 - visual so let's change the sprites and
20:32 - the text color for that let's go into
20:34 - the game assets as we've been doing so
20:36 - here let's set fields for our sprites
20:38 - so we add a sprite for the ping enemy
20:42 - sprite then let's also add a reference
20:46 - to these colors all right these are all
20:51 - the assets we need so now we can go back
20:52 - to the pink system and here we take the
20:55 - ping transform we get the component for
20:57 - the sprite render and we change the
21:00 - sprite to the game assets and we pick
21:03 - the enemy sprite then let's also change
21:07 - the color of the distance all right so
21:17 - just like that in here if we receive a
21:19 - ping that contains the enemy pang type
21:21 - we change the sprite renderer sprite and
21:24 - we change the distance text mesh color
21:26 - so now let's fill up these values on the
21:28 - editor here's the game assets script
21:31 - let's film that in okay so we have at
21:33 - the reference to our sprites and our
21:35 - colors so let's test and see okay here
21:38 - we are let's find a ping a move ping
21:40 - first and yep there's a move ping
21:42 - exactly the same as previously okay
21:44 - great
21:44 - now let's spawn an enemy thing any of
21:47 - there it is the enemy paying with the
21:49 - enemy color being applied both to the
21:51 - text and to the sprite and there's no
21:53 - there's another all right great so so
21:55 - far so good now let's make sure we deal
21:58 - with the UI sprites as well we can deal
22:01 - with them here on the ping UI handler
22:03 - which is a script that is being run on
22:05 - each UI element so here we do a switch
22:08 - on the thing get thing type and so on
22:18 - alright that you do it let's see so
22:21 - here's a move thing and then type thing
22:23 - now if I move away and yep there you go
22:26 - there's both things correctly showing
22:27 - the correct color and the correct sprite
22:29 - all right great
22:30 - so now that we have this working let's
22:32 - make it work just like the game by
22:34 - double-clicking the mouse button so for
22:36 - now let's go here into the ping system
22:38 - class and here what we need to know is
22:41 - if we get to move pings one right after
22:43 - the other
22:44 - so first let's make a simplified version
22:46 - of the add thing function one that does
22:48 - not require a ping object but rather
22:50 - adjust the position so this simplified
22:54 - version is what we're going to call on
22:55 - the game hammer so instead of sending in
22:58 - a pink object with its type we just send
23:00 - in the plank position and let's remove
23:03 - this second one okay that's it so now
23:06 - all the logic is handled in here and now
23:09 - this function will decide the type so in
23:12 - order to test if we got to move things
23:13 - in a row we need to know what was the
23:15 - previous ping
23:16 - so let's store the unless ping when you
23:21 - create a new thing let's set the last
23:23 - thing to the newly created thing okay
23:25 - and in this function let's test if the
23:27 - last thing if it is not known and the
23:31 - last thing that yet ping time equals a
23:34 - move pink so in here we know that last
23:39 - thing was a new thing so now we know
23:43 - that two things were added and the
23:44 - previous one was a move ping now let's
23:46 - test for the time difference between
23:48 - them so let's also store a private
23:51 - static float for the last ping time and
23:55 - we're going to set it when we set the
23:57 - last ping all right so we know what the
24:00 - last ping was and when it was created
24:02 - now all we need to do is define some
24:04 - sort of threshold for a double-click so
24:06 - let's put it up here as a constant and
24:11 - let's say in 50 milliseconds so if you
24:14 - hit the ping button twice within 50
24:17 - milliseconds then we want to create a
24:19 - enemy ping so in here if we're testing
24:21 - if the last one was a move ping lets us
24:24 - for a time difference
24:30 - so we test if the current time is under
24:34 - the investing time plus the double-click
24:36 - time so if the current time is within 50
24:39 - milliseconds of the last thing time then
24:44 - we have our pings in quick succession so
24:46 - let's create a enemy pink all right so
24:54 - that's pretty much it now in here if it
24:56 - was not in quick succession then we had
24:58 - a normal new thing and if you don't have
25:02 - one last ping or the last one wasn't a
25:04 - new thing then we simply add a move
25:06 - thing the same as no all right so let's
25:09 - s and see if we can spawn enemy things
25:11 - whenever we double click ok so here I am
25:14 - and I press once and yep there's the
25:16 - normal move ping now I press twice any
25:20 - of there you go the second one was a
25:21 - enemy ping all right so the double-click
25:24 - logic is working exactly as intended but
25:27 - right now we also have to remove the OL
25:29 - move ping that one should be destroyed
25:31 - when the enemy ping is spawned so here
25:34 - in the code I also made it 500
25:35 - milliseconds because 50 was just way too
25:37 - fast so let's go down here to make a
25:40 - function to destroy a thing so you
25:44 - receive a pink object and we want to
25:46 - destroy it so let's add a function on
25:49 - the ping to destroy itself first thing
25:52 - to destroy itself let's simply add a
25:54 - boolean to check if it is destroyed and
25:58 - a function test if it is destroyed and
26:04 - now in here always create an event that
26:05 - won't be triggered when this ping is
26:06 - destroyed
26:15 - all right so that's it now we have this
26:18 - event being called when the ping is
26:19 - destroyed here when we destroy the thing
26:22 - and let's call ping da destroy sound and
26:25 - now using this event we can destroy the
26:28 - actual visuals so here when we insensate
26:31 - the ping transform using this pink
26:33 - object let's subscribe to the ping dot
26:35 - on destroyed event and here when the
26:40 - ping is destroyed and let's just you
26:41 - object off destroy our paint transfer
26:45 - all right so just like that we should be
26:48 - destroying the pink transform whenever
26:50 - the actual ping object gets destroyed
26:52 - now let's also destroy the UI ping here
26:57 - we are on the set up let's add exactly
26:58 - the same code except we're going to
27:00 - destroy this game object all right so
27:04 - that should do it so now we have this
27:07 - destroy ping function which should be
27:09 - working perfectly fine so now we can go
27:11 - in here and when we want to add a new
27:13 - enemy pink we want to destroy the
27:15 - previous one so we simply called destroy
27:18 - ping on the last thing so we destroyed
27:22 - the last thing and then we instantiate a
27:23 - new enemy ping all right so let's see if
27:26 - we can now in sin she ate a new enemy
27:28 - ping and the move pain gets destroyed so
27:32 - here we are ping once and yep there's a
27:34 - move thing same as normal now ping twice
27:36 - and there you go you saw that the moving
27:38 - appeared but it vanished when we spawned
27:41 - the enemy pink and if we move on the UI
27:43 - they still work and the others
27:45 - everything still works so spawn a new
27:48 - enemy ping in there and there you go
27:50 - it's fun you move thing no enemy bank
27:53 - and yep everything is working perfectly
27:55 - fine all right so now that we have all
27:59 - of this working let's add a timer for
28:01 - the pings to destroy themselves so they
28:03 - don't stay on forever so let's go into
28:05 - the ping class and in here and let's
28:08 - store a destroy time this won't be the
28:11 - time that we should destroy this ping
28:13 - let's defined in the constructor so we
28:16 - set the destroy time based on time that
28:18 - time plus then some amount so let's say
28:20 - after 10 seconds each Bank should be
28:22 - destroyed
28:26 - all right so now we need to periodically
28:29 - test if it's time for this thing to be
28:31 - destroyed
28:31 - so let's go into our ping system and
28:34 - here we need a function that won't be
28:35 - counted our update now this is a static
28:38 - class that does not inherit
28:40 - monobehaviour so we need to manually
28:42 - trigger this function from somewhere
28:44 - else so let's go into the game panel and
28:46 - here we have our update and you can
28:48 - simply go into the ping system and call
28:50 - the update function all right so we now
28:53 - have this function being triggered on
28:54 - every update so in here we need to cycle
28:57 - through all the pings so we need to
28:59 - store a list of all of our pings on the
29:03 - update we need to second till that list
29:09 - and we test if time that time is bigger
29:13 - than the ping that get destroyed time
29:15 - then it's time to destroy this thing so
29:21 - we call destroy ping of this thing and
29:24 - since the ping destroy ping will remove
29:27 - it from the list let's go here remove
29:30 - our ping
29:32 - since we are modifying the lesson here
29:34 - we need to go backwards on our iterator
29:36 - alright so that should be working now
29:39 - let's add things to our list so in here
29:42 - we got the add thing when we add a new
29:45 - ping
29:46 - let's do ping let's not add our ping
29:49 - okay and the final thing we need is to
29:52 - actually initialize this list so it's
29:54 - making initialized function and in here
29:58 - we just initialize our ping list and we
30:01 - need to call this somewhere so let's go
30:03 - into the game Handler and make it
30:04 - private voice away all right so here on
30:10 - awake we can initialize which
30:12 - initializes our own list every time we
30:14 - add a pink we have that thing to that
30:16 - list
30:16 - on update we get this function called
30:18 - and we test if it's time to destroy each
30:21 - ping and if it is then we destroy it and
30:23 - we keep going so let's test and see if
30:26 - the pings automatically vanish after 10
30:28 - seconds okay here I am let's for an
30:31 - eighth thing and now we attack ping and
30:33 - now let's see after 10 seconds this one
30:36 - should
30:37 - and let's wait and yep there you go with
30:41 - the pink vanish and the other one
30:42 - vanished afterwards all right great and
30:45 - if we move away you can see that the UI
30:47 - ping is indeed vanished so we now have
30:50 - our pings with a very nice maximum
30:52 - destroy time now the next thing we need
30:54 - to work on our context-sensitive pings
30:57 - essentially we need to do a different
30:59 - ping based on what we click on so for
31:02 - that let's first create a simple item so
31:05 - here on let's create an empty game
31:06 - object let's give it a sprite renderer
31:09 - component and passing this medkit sprite
31:11 - no it's also add a box Collider 2d so we
31:15 - can test and that's pretty much it now
31:18 - when we click we're going to do a recast
31:20 - and see what we hit so let's go into the
31:23 - pink system and here when we have an add
31:26 - ping let's test if we're clicking right
31:29 - on top of something so we do a ray cast
31:35 - we do a ray cast on the amount of the
31:37 - world position and for the direction
31:45 - let's put vector 2.0 all right so we got
31:48 - a ray cast being done exactly on the
31:50 - mouse position then we test if our ray
31:53 - cast head it contains a Collider then
31:59 - that means that we hit something so in
32:02 - here we know we clicked on something now
32:04 - we need to identify what that something
32:06 - is so let's go into the editor and we're
32:09 - going to create a script to identify
32:11 - that particular object so let's create
32:14 - new c-sharp script and we're going to
32:15 - call this the item identifier and in
32:19 - here let's make a public in home for the
32:21 - item type let's start off with a medkit
32:26 - also a helmet and some armor now let's
32:31 - make a field to store that you know
32:35 - okay so with this symbol class we can
32:38 - now go into the editor select our game
32:41 - object and add our item identify our
32:43 - component now in here so like this one
32:46 - as the medkit okay so now we can go back
32:49 - onto our ping system and here when we
32:52 - are doing our ray cast we see if we do
32:54 - have a Collider and if so let's try to
32:56 - grab the item identifier component so we
32:59 - do our ray cast hit so in here we go
33:09 - into the collider we get the component
33:12 - for the item identifier if we do have
33:14 - that component that that means that
33:15 - we've clicked on an item so here we have
33:18 - identified the type of thing that we
33:20 - want to create so we add a new thing and
33:23 - now we need to add it as an item type so
33:26 - here in the pings we have move enemy
33:28 - then let's say also item however the
33:31 - item can be different so we need to go
33:34 - down here and also store what type of
33:36 - item this is so we're going to store
33:41 - this but only in the case that we have
33:42 - our type as the item type and I know by
33:46 - itself cannot be known but by adding our
33:48 - question mark we are turning it into a
33:50 - novel and now the default value won't it
33:53 - be known so when we create a new ping oh
33:57 - it's also receive an optional value for
33:59 - the knowable item type so now let's go
34:05 - up here onto our ad think function we're
34:08 - going to add it as an item and then
34:12 - we're going to pass in the item type
34:13 - that we get from the item identifier dot
34:17 - item type and just like that we should
34:20 - be able to create a item thing based on
34:23 - whatever item is stored in the item
34:24 - identifier which again is placed on the
34:27 - game object so now that we can insensate
34:30 - a new paint type with the item type
34:32 - let's deal with changing the visual in
34:35 - here
34:40 - in here we need to set the sprite and
34:43 - the color so let's ask the item
34:45 - identifier for it so here let's make
34:47 - those functions let's make a public
34:49 - static don't return it sprite and let's
34:52 - call it t get title sprite and we're
34:54 - going to receive a item time now we're
34:59 - going to have the same thing a public
35:01 - static taller to get the item color
35:35 - alright so we have these two nice
35:37 - functions which receive our item type
35:39 - the simple switchin returns the correct
35:41 - sprite or cone so now here in the pink
35:44 - system that's all we need to do we need
35:45 - to go into the item identifier in order
35:49 - to get the item sprite and we pass in
35:51 - the thing that get item type we can make
35:54 - a function alright now it's do the exact
36:04 - same thing on our UI element
36:11 - and that's pretty much it
36:13 - some wetsy okay so here I am there's the
36:17 - medkit now it's very normal thing and
36:19 - there you go stone works and attack
36:20 - thing there it is and now I click the
36:23 - ping button on top of the item any of
36:26 - there you go there's the item thing
36:28 - showing that there's a medikit in there
36:29 - now if I move away from the screen yeah
36:31 - there you go the indicator correctly
36:33 - shows correct collar and everything
36:35 - alright so it's working perfectly fine
36:37 - now let's test out the other items to
36:40 - add the other items all we need to do is
36:42 - duplicate our item so here it is and now
36:46 - we need to change is here the item type
36:48 - on the atom identifier so change this
36:50 - one to the element change it for the
36:52 - helmet image do the same thing for the
36:55 - armor and that's all we need to do in
37:00 - order to show our different items so
37:02 - let's see the pings at work so here it
37:05 - is let's put a ping on Medicaid and yep
37:07 - there's the medicaid thing and on the
37:09 - helmet a helmet thing and now an armor
37:11 - ping as you can see the color of the
37:12 - text and the various sprites and they're
37:14 - all correctly showing exactly where each
37:17 - item is located alright so everything is
37:21 - working exactly as intended our pink
37:23 - system is context sensitive which makes
37:25 - it more comprehensive and easy to use so
37:27 - far pretty much all of these different
37:29 - types of things only use the exact same
37:31 - ping button and just depends on how fast
37:34 - I click and where I click on so now
37:37 - finally let's make the wheel menu to
37:39 - display even more pink types
37:40 - so let's first create the pink wheel in
37:43 - the editor
37:58 - all right so this is the visual for our
38:01 - pinwheel now let's see on with the code
38:05 - let's make a private void awake and in
38:08 - here grab the references to the buttons
38:09 - and set their actions and now in order
38:22 - to add a think we also need a position
38:25 - so let's start as a feel that we won't
38:28 - were see you later
38:33 - alright so now we need functions to show
38:35 - and hide this wheel all right so we got
38:57 - some various static functions that we
38:59 - can count from elsewhere so now we need
39:01 - to figure out how we're going to show
39:02 - the pinwheel so the last thing we need
39:06 - is to receive a vector3 for the plank
39:08 - position which is what we're going to
39:09 - store all right so what this should be
39:15 - working just for the move button so now
39:17 - let's see where we're going to call this
39:19 - so let's go into the pink system and
39:22 - then here let's add two functions
39:32 - so we have a function that will be
39:34 - called on every frame that the button is
39:36 - held down and one that is called when
39:38 - the button is released
39:39 - so let's capture those inputs so here on
39:42 - the game camera let's see if input dot
39:44 - get mouse button just this one which is
39:47 - fired on every update that the button is
39:49 - held down so it has four the button
39:51 - number two which is our ping button if
39:54 - it is held down then we call pink system
39:56 - ping button held down update and then on
40:01 - the get mouse button up up again the
40:05 - second button we do our ping system that
40:08 - pink button really ok so the input logic
40:13 - should be working now let's go back in
40:15 - here and now we need to count the number
40:18 - of time that we are holding down the
40:20 - thing button so let's make a film to
40:23 - hold that now on this function we're
40:29 - going to increase it by time.deltatime
40:32 - and now we're going to check if the home
40:35 - down timer is bigger than a certain
40:37 - threshold so let's define it up here so
40:44 - if we hold the button down for one
40:45 - second let's go down here if the timer
40:50 - is bigger than the constant timer then
40:54 - we want to show the wheel so we test if
40:59 - the pinwheel we test if is visible so we
41:04 - want if it's not visible and if not this
41:07 - one we do pink wheel that show and now
41:11 - we pass in the pink position which again
41:13 - we go into the utens class to get the
41:16 - mouse world position and finally when we
41:20 - release button we simply set the pink
41:23 - button hold down timer to zero all right
41:26 - so that's pretty much it so here on the
41:29 - game home we are capturing for our
41:30 - inputs whilst we're holding down the
41:33 - ping button we are increasing a timer if
41:36 - the timer goes past a certain amount
41:38 - then we show our pinwheel and on the
41:42 - penguin we
41:43 - show the game object and we have some
41:45 - buttons to add specific pings right now
41:47 - only the movement works but let's test
41:50 - if that one is working okay so here we
41:52 - are let's do a normal thing still works
41:54 - enemy ping still works
41:56 - item things don't works now I hone down
41:58 - the ping button any of there it is after
42:01 - one second I'm holding down I can see
42:02 - the ping well and now I select whatever
42:04 - thing only this one is working so let's
42:06 - click on it and there you go it showed
42:08 - up in there now we need to destroy the
42:10 - previous one so it's done with that on
42:13 - the ping system let's create a function
42:14 - to destroy the last thing and now we can
42:18 - go into the pinwheel and when we show it
42:21 - we call the ping system and destroy D
42:24 - and last ping that way that move things
42:27 - should vanish when we create this one so
42:29 - let's see okay click here show the ping
42:33 - window and that thing vanished now I
42:35 - still like this one and there you would
42:36 - spawn that thing in there right great
42:38 - now let's apply the exact same thing to
42:41 - all other ping types
42:52 - all right the code in here should be
42:55 - working we simply set a different thing
42:57 - time for each button
43:14 - all right everything is set let's see
43:17 - okay so here we are normal move thing
43:20 - anything now show a beeping wheel now
43:23 - it's not like this one and yep there you
43:25 - go there's that special icon now it's
43:27 - not like another one it's like this one
43:28 - and yep there it is there it is all of
43:32 - the various pink types are working
43:34 - perfectly fine and if we move to the
43:35 - corner everything works exactly as
43:37 - intended so there you have it we created
43:40 - the pink system from apex legends we can
43:43 - click somewhere random and just fire a
43:45 - normal blue thing we can double click
43:47 - which creates a enemy thing we can think
43:50 - on top of an item and it automatically
43:52 - identifies the item under the mouse and
43:54 - spawns that specific thing and we also
43:56 - have a thing we own that shows up if we
43:58 - hold the button down
43:59 - which gives us even more pain types all
44:02 - thing types also have an indicator in
44:04 - the UI in case the ping is outside of
44:06 - the camera view as always you can
44:08 - download the project files and utilities
44:10 - from unity comic calm if you have any
44:12 - questions post them in the comments and
44:13 - I'll do my best answer subscribe for
44:15 - more videos and I'll see you next time
44:27 - you

Cleaned transcript:

hello and welcome I am your code monkey in this video we're going to create the pink system from apex legends let's begin so apex legends has a bunch of really interesting systems and in this video we're going to recreate the ping system it's one of the best features in the game and one the reason why the game has been so successful by using simple things combined with context detection the game can be fully played cooperatively without ever talking to your teammates so for example if I press the ping button on the middle of nowhere you can see that I get a very nice simple movement thing that stays visible even when it goes off screen so I move away and there you go that is telling me that there's a ping in that direction and it shows the distance however if I press on top of an item like say this helmet in here I press it and Rigo the ping is correctly contextsensitive and this place that there is an helmet in that direction and again if I move away move the camera and there you go that cell meet there's an element in that direction works for all the other item types exactly as intended and if I double click instead of getting a simple movement like this I double click and it shows a enemy spotted ping so with just one button we can create three different ping types that provide a multitude of information for our teammates and we also have a ping we own that can be displayed when we hold on the ping button and we have even more ping types to show so for example saying that an N mu spot in here and again if I move away there you go you can see that there's the pain indicator saying there's a ping 65 meters in that direction now this is a really cool system and certainly one of the reasons why the game has found so much success because again even with our microphone it can communicate quite effectively with your teammates so we're going to implement this system in 2d but it really works pretty much the same in 3d all right so let's get to it here is my stirring scene I have a simple character in here aiming towards the mouse and I can move them around and shoot now the ping system won't be completely separate from anything else so the base movement code and aiming here doesn't really matter all we're going to focus on is to store the position of the ping and identify what's behind the mouse so we can display it I have done videos on a simple character movement and camera system so check those out to see how to create a basic character movement like this so with this base let's start making the pings we want to click on the middle button as our ping button and when we do highlight whatever is under the mouse and if nothing is in there we show a move ping and if we double click we show an enemy pang so let's start off with a very simple prefab to show the pink position so in here we create a new game object and we add the sprite pregnant and drag the move pane sprite okay so this is our simple game object now let's make this into a prefab so first create a prefabs folder and let's drag our ping into there to make it into a prefab okay let's rename this to PF ping world this will be a prefab that won't spawn whenever we want to display a ping in the world now let's create a class to hang all our ping system so in here making you see sharp script for our ping system in here and let's first make it a simple static class we're making static since we only want to have one ping system and we do not want to instantiate it now let's have a function to add a ping in order to add a pink we're required to know the position for that thing okay and in here let's just spawn our prefab in order to get a reference for our prefab let's add it as a new field on our game assets I've done video on how this class works but essentially what it does is we can provide public fields and then we can access those fields to get our references from our other scripts so in here we can simply add a public transform field for the PF ping world and now I can go here into the pink system and I can instantiate go into the game assets that instance that paying world and just like that we have a reference to the ping world which is stored as a public field in the game assets class and here in the editor I have a game object that contains that script and I can simply drag the reference onto it so now through code I can access this reference okay so now back in here on the ping system we can now insensate this prefab onto this position so insensate the pre film on the position we receive and put her in that identity in order to not be rotated all right so we should now be able to call this function and be able to see a ping exam on that position so now let's capture the mouse input so for that let's create a game Hamlin just a simple script where we can capture our mouse input and let's drag it on to this game object and in here let's go into our private void update and simply do a if input get mouse button down we want the middle mouse button so button zero is a left one button one is right and button two is the middle mouse button so when we press the middle mouse button let's simply add a pink so we go into the pink system when we call the add pink function and now in here we need to know the mouse run position so for that let's go into the code monkey Tonys which is obviously can grab for free from me and decoder monkey calm and in the utilities there is a very simple function to get the mouse wrong position all right so just like that when we click on the middle mouse button we should be able to see the ping prefab being spawned let's see okay so here I am moving around I put the mouse over it here and I click the middle mouse button any of there you go there's the prefab showing that's a move position and we should move in there put another one there and there you go all right great so so far so good now let's add a distance to the pink for that let's edit the prefab and inside let's make a new 3d object using text mesh now we're going to use this to this point in distance okay so we now have a nice distance text now let's make a script that won't run on that prefab so in here make a new csharp script this won't be the pink distance can work let's write that script on to the distance text okay now here on the script first on the private void awake let's grab a reference to the text mesh object and then on the private void update let's update to show the distance now here we need to calculate the distance so we need to do a vector3 in that distance first we need the position of the ping which is on the transform dot parentage position since this is running on the text object which is a child of the pink prefab and then we need the player position so we get the pink position then the player position is based on the class that is handling the player is simply get the position from there then we calculate the vector three distance between those two and now in here how you convert it into meters won't depend on how you set up the units in your game so this will return the number of units now let's convert it into meters which in my case given the size of the sprite let's simply divide this by three F so around three units equals one meter then let's convert it into an int so we do a method on 2/10 and run it all into an int all right so that you do it for this playing the distance from the ping to our player so let's test again and now we should be able to see the ping correctly display the distance okay here I am with my character now let's run a ping in here yep there you go it's 37 meters away now if I move the player you have there you go it is correctly updating showing the distance from the player to the ping all right great so now that we have the basis of our ping where let's make sure that it's always visible since right now if I move the camera to the left side you don't actually know there's a thing in there so let's do that we're going to make it always visible by adding a secondary ping indicator in the you want so let's go into our canvas in here let's make a new game object this will be our obtained window and inside we're going to make a prefab very much like our normal prefab okay that's pretty much it let's make it in to a prefab the same as we did with a ping on the world so now we have a penguin prefab and a ping UI prefab so now let's make the code for our ping window so create the new csharp script for the ping window and here on let's first create a static instance so we can interact with this window through static functions so we just make a private static ping window this will be our instance and we simply set it on our awake alright so now let's make a public static void add ping and will receive a vector3 for the position of that ping and here we're going to instantiate the UI prefab again let's add a new field into our game assets class so we have PF ping UI on the game assets class and we instantiate it onto this transform as the parent so we have our in Senshi ated pingu i transform now in here we need to reposition and either show or hide the prefab so for that let's make another script that won't run on that prefab new csharp script call it the ping GUI handler let's drag it onto the prefab okay and now in here we need a function to receive the target position for this particular ping so let's make a public void call it the set up in order to set up this ping you why and we're going to receive a regular three for the ping position let's store it in the field all right now let's do an update and in here and let's locate the anchored position now for the anchored position let's place it in a circular area so what we want is let's say that the actual ping is over here outside the bounds so we want this one to be shifted in a certain area around pointing in that direction then let's say it's down here we want to point it in there and there and so on so in order to figure out the radius that we should move in let's look into the canvas and here I have set it up to match with the height so that means that when the aspect ratio changes like for example five four you can see that the height stays the same and only horizontally it changes so that means we can use the height as the radius for our circle and it won't always be visible so in this case in order to make it always visible let's use 270 as our radius so back in the code let's first come like the direction towards our target and here we're going to use the distance from the camera rather than from the player since we are supposed to be pointing towards something we cannot see so the camera makes more sense and let's calculate the direction which will be the target position which is the thing position minus D from position so now that we have the direction towards our target let's place it in D UI using that direction and the UI radius all right that should do it and just like that we should have this object being pointed towards the ping position so now we can go into the ping window and in here after we instantiate it thank you I transform let's get the component for the ping UI handler and we call the setup function and we give a deep pink position okay that's pretty much it and lastly here on the pinky Y handler let's update the distance just like we did in this script all right so that should do it and this code is working exactly the same except for the pink position we're using the one we received on our setup and finally we call the add thing function on the penguin Doe whenever we add a ping to the ping system so here we are adding a ping and we go into the ping window and we also call at ping and we pass in the same position so let's see if the UI ping does fall in the same direction as the actual paint okay so here I am now if I fire a pink if there you go there's the world ping and there's the UI pink now let's see if it's pointing towards it and yep indeed it is pointing towards it based on the camera position so I can circle around and if that thing is now hidden I know that there's a ping in that direction so I move towards it and yep there it is all right great so the UI ping is telling me both the direction and the distance towards the actual thing okay so far so good now obviously we only want the UI ping to be visible when the actual ping is off camera when it's visible then we don't want the UI paint to be visible so let's do that here in the ping UI hammer code we need to do a test to see if the ping position is inside the camera so for that we do a camera that main that world to screen point which transforms a position from world space into screen space so we can take the pink position this will return a vector to containing the ping screen coordinates so now we can test if these screen coordinates are inside the actual screen so in here we define a boolean call it is our screen and essentially we can test if it's off screen by testing the ping screen coordinates test if the X is bigger than screen dot width then it's off screen from the right side let's one or so we have our bullion testing if it's off screen and if soft screen if the screen coordinates are past the width or under zero or bigger than height or under zero all right so using this volume we can easily set this game object to either visible or hidden now in here the simplest way to make visible or hidden would be to set the game object out set active however in here we cannot do this since if we were to set this set active to false then the update would never run and it would be hidden and never shown again so instead of disabling the game object itself let's disable the image and text components so in here we only enable the image when the ping is off screen and if it's on screen then with the same one same thing for the distance text and here we only update the UI position and it isn't sex again when the ping is actually off screen so when the ping is onscreen the new I helmet is simply hidden and it doesn't do anything ok so that should do it let's test okay here's the character and let's spawn a ping and there you go there's only the world thing the UI thing is not visible now let's see if we move away and yep there's the UI ping showing that an actual thing is 90 meters in that direction so we go towards it and when it shows up on screen there you go the UI pink vanishes and let's one another ping and look at that there's a ping in that distance ping that distance and we go and you when they're onscreen the UI things vanish all right so far so good so we now have a ping in the world and it's also shown in the UI if the world ping is hidden so essentially we have all the code to function with the basic ping logic so now we want to add different paint types so here on the pink system in order to have multiple ping types we need to store the type and not just its position so we need to rewrite this code in order to have the add ping function receive more information than just the position so for that let's use a custom class which will contain all the information for our pain so we do a common class let's call it a ping and in here the information we need in our ping is first of all we need a type so let's define a poly kanoon for the type of this thing and for the vowel types we have the move which is the one we were using and let's also make an enemy type then we store a private type for the pink type and a private vector3 for the bank position all right so here we have a nice very simple class to handle a single pink we have the type and we have the position and various functions to ask what type and position this ping has so now let's change all of our add ping functions to receive a pink object so if you think pink instead of receiving just a position so in here instead of getting a position we need to go into the pink and get the pink position okay now for the app thing let's pass in our ping object now let's edit this and here same thing receive a pink object which is inside the ping system all right so all of our code has been reworked to work with this specific class which contains our ping object so now let's left is here in the game handler when we add a ping in here we need to pass in a ping object so let's create a new ping system that ping here let's choose the pink type as a move thing just as we were doing and infesting the warm position all right so we refactor the code to work with this new ping object and everything should work perfectly fine so let's test and there's my character there's the things don't work perfectly fine if I move away the UI thing still works perfectly fine all right so everything is still working but we have successfully refactored our code to use a specific class to be able to handle all of our pings so now let's start testing creating an enemy ping so here on the game handler let's test spawning an enemy ping on the right mouse button so on the ping button one and we call it set up being a move type let's say it's an enemy time so if you click on the right mouse button we should see an enemy thing we want later make it work by double clicking just like in the game but for now let's keep things simple and make it this way so we just like that we are already creating a ping which contains the enemy ping time now we need to swap the visual based on the ping type so let's go to where we were creating the world ping here on the ping system and in here after in Senshi ating the transform let's do a switch on the ping type and now in here we could have different prefabs for each type of thing but we can also use the very same one and then through code modify the visuals so in here after instantiating let's do a switch on the ping that yet ping type case we have ping type dot move that's default so we don't do anything let's do it as the default yep and then we have case ping time enemy then this is where we need to change the visual so let's change the sprites and the text color for that let's go into the game assets as we've been doing so here let's set fields for our sprites so we add a sprite for the ping enemy sprite then let's also add a reference to these colors all right these are all the assets we need so now we can go back to the pink system and here we take the ping transform we get the component for the sprite render and we change the sprite to the game assets and we pick the enemy sprite then let's also change the color of the distance all right so just like that in here if we receive a ping that contains the enemy pang type we change the sprite renderer sprite and we change the distance text mesh color so now let's fill up these values on the editor here's the game assets script let's film that in okay so we have at the reference to our sprites and our colors so let's test and see okay here we are let's find a ping a move ping first and yep there's a move ping exactly the same as previously okay great now let's spawn an enemy thing any of there it is the enemy paying with the enemy color being applied both to the text and to the sprite and there's no there's another all right great so so far so good now let's make sure we deal with the UI sprites as well we can deal with them here on the ping UI handler which is a script that is being run on each UI element so here we do a switch on the thing get thing type and so on alright that you do it let's see so here's a move thing and then type thing now if I move away and yep there you go there's both things correctly showing the correct color and the correct sprite all right great so now that we have this working let's make it work just like the game by doubleclicking the mouse button so for now let's go here into the ping system class and here what we need to know is if we get to move pings one right after the other so first let's make a simplified version of the add thing function one that does not require a ping object but rather adjust the position so this simplified version is what we're going to call on the game hammer so instead of sending in a pink object with its type we just send in the plank position and let's remove this second one okay that's it so now all the logic is handled in here and now this function will decide the type so in order to test if we got to move things in a row we need to know what was the previous ping so let's store the unless ping when you create a new thing let's set the last thing to the newly created thing okay and in this function let's test if the last thing if it is not known and the last thing that yet ping time equals a move pink so in here we know that last thing was a new thing so now we know that two things were added and the previous one was a move ping now let's test for the time difference between them so let's also store a private static float for the last ping time and we're going to set it when we set the last ping all right so we know what the last ping was and when it was created now all we need to do is define some sort of threshold for a doubleclick so let's put it up here as a constant and let's say in 50 milliseconds so if you hit the ping button twice within 50 milliseconds then we want to create a enemy ping so in here if we're testing if the last one was a move ping lets us for a time difference so we test if the current time is under the investing time plus the doubleclick time so if the current time is within 50 milliseconds of the last thing time then we have our pings in quick succession so let's create a enemy pink all right so that's pretty much it now in here if it was not in quick succession then we had a normal new thing and if you don't have one last ping or the last one wasn't a new thing then we simply add a move thing the same as no all right so let's s and see if we can spawn enemy things whenever we double click ok so here I am and I press once and yep there's the normal move ping now I press twice any of there you go the second one was a enemy ping all right so the doubleclick logic is working exactly as intended but right now we also have to remove the OL move ping that one should be destroyed when the enemy ping is spawned so here in the code I also made it 500 milliseconds because 50 was just way too fast so let's go down here to make a function to destroy a thing so you receive a pink object and we want to destroy it so let's add a function on the ping to destroy itself first thing to destroy itself let's simply add a boolean to check if it is destroyed and a function test if it is destroyed and now in here always create an event that won't be triggered when this ping is destroyed all right so that's it now we have this event being called when the ping is destroyed here when we destroy the thing and let's call ping da destroy sound and now using this event we can destroy the actual visuals so here when we insensate the ping transform using this pink object let's subscribe to the ping dot on destroyed event and here when the ping is destroyed and let's just you object off destroy our paint transfer all right so just like that we should be destroying the pink transform whenever the actual ping object gets destroyed now let's also destroy the UI ping here we are on the set up let's add exactly the same code except we're going to destroy this game object all right so that should do it so now we have this destroy ping function which should be working perfectly fine so now we can go in here and when we want to add a new enemy pink we want to destroy the previous one so we simply called destroy ping on the last thing so we destroyed the last thing and then we instantiate a new enemy ping all right so let's see if we can now in sin she ate a new enemy ping and the move pain gets destroyed so here we are ping once and yep there's a move thing same as normal now ping twice and there you go you saw that the moving appeared but it vanished when we spawned the enemy pink and if we move on the UI they still work and the others everything still works so spawn a new enemy ping in there and there you go it's fun you move thing no enemy bank and yep everything is working perfectly fine all right so now that we have all of this working let's add a timer for the pings to destroy themselves so they don't stay on forever so let's go into the ping class and in here and let's store a destroy time this won't be the time that we should destroy this ping let's defined in the constructor so we set the destroy time based on time that time plus then some amount so let's say after 10 seconds each Bank should be destroyed all right so now we need to periodically test if it's time for this thing to be destroyed so let's go into our ping system and here we need a function that won't be counted our update now this is a static class that does not inherit monobehaviour so we need to manually trigger this function from somewhere else so let's go into the game panel and here we have our update and you can simply go into the ping system and call the update function all right so we now have this function being triggered on every update so in here we need to cycle through all the pings so we need to store a list of all of our pings on the update we need to second till that list and we test if time that time is bigger than the ping that get destroyed time then it's time to destroy this thing so we call destroy ping of this thing and since the ping destroy ping will remove it from the list let's go here remove our ping since we are modifying the lesson here we need to go backwards on our iterator alright so that should be working now let's add things to our list so in here we got the add thing when we add a new ping let's do ping let's not add our ping okay and the final thing we need is to actually initialize this list so it's making initialized function and in here we just initialize our ping list and we need to call this somewhere so let's go into the game Handler and make it private voice away all right so here on awake we can initialize which initializes our own list every time we add a pink we have that thing to that list on update we get this function called and we test if it's time to destroy each ping and if it is then we destroy it and we keep going so let's test and see if the pings automatically vanish after 10 seconds okay here I am let's for an eighth thing and now we attack ping and now let's see after 10 seconds this one should and let's wait and yep there you go with the pink vanish and the other one vanished afterwards all right great and if we move away you can see that the UI ping is indeed vanished so we now have our pings with a very nice maximum destroy time now the next thing we need to work on our contextsensitive pings essentially we need to do a different ping based on what we click on so for that let's first create a simple item so here on let's create an empty game object let's give it a sprite renderer component and passing this medkit sprite no it's also add a box Collider 2d so we can test and that's pretty much it now when we click we're going to do a recast and see what we hit so let's go into the pink system and here when we have an add ping let's test if we're clicking right on top of something so we do a ray cast we do a ray cast on the amount of the world position and for the direction let's put vector 2.0 all right so we got a ray cast being done exactly on the mouse position then we test if our ray cast head it contains a Collider then that means that we hit something so in here we know we clicked on something now we need to identify what that something is so let's go into the editor and we're going to create a script to identify that particular object so let's create new csharp script and we're going to call this the item identifier and in here let's make a public in home for the item type let's start off with a medkit also a helmet and some armor now let's make a field to store that you know okay so with this symbol class we can now go into the editor select our game object and add our item identify our component now in here so like this one as the medkit okay so now we can go back onto our ping system and here when we are doing our ray cast we see if we do have a Collider and if so let's try to grab the item identifier component so we do our ray cast hit so in here we go into the collider we get the component for the item identifier if we do have that component that that means that we've clicked on an item so here we have identified the type of thing that we want to create so we add a new thing and now we need to add it as an item type so here in the pings we have move enemy then let's say also item however the item can be different so we need to go down here and also store what type of item this is so we're going to store this but only in the case that we have our type as the item type and I know by itself cannot be known but by adding our question mark we are turning it into a novel and now the default value won't it be known so when we create a new ping oh it's also receive an optional value for the knowable item type so now let's go up here onto our ad think function we're going to add it as an item and then we're going to pass in the item type that we get from the item identifier dot item type and just like that we should be able to create a item thing based on whatever item is stored in the item identifier which again is placed on the game object so now that we can insensate a new paint type with the item type let's deal with changing the visual in here in here we need to set the sprite and the color so let's ask the item identifier for it so here let's make those functions let's make a public static don't return it sprite and let's call it t get title sprite and we're going to receive a item time now we're going to have the same thing a public static taller to get the item color alright so we have these two nice functions which receive our item type the simple switchin returns the correct sprite or cone so now here in the pink system that's all we need to do we need to go into the item identifier in order to get the item sprite and we pass in the thing that get item type we can make a function alright now it's do the exact same thing on our UI element and that's pretty much it some wetsy okay so here I am there's the medkit now it's very normal thing and there you go stone works and attack thing there it is and now I click the ping button on top of the item any of there you go there's the item thing showing that there's a medikit in there now if I move away from the screen yeah there you go the indicator correctly shows correct collar and everything alright so it's working perfectly fine now let's test out the other items to add the other items all we need to do is duplicate our item so here it is and now we need to change is here the item type on the atom identifier so change this one to the element change it for the helmet image do the same thing for the armor and that's all we need to do in order to show our different items so let's see the pings at work so here it is let's put a ping on Medicaid and yep there's the medicaid thing and on the helmet a helmet thing and now an armor ping as you can see the color of the text and the various sprites and they're all correctly showing exactly where each item is located alright so everything is working exactly as intended our pink system is context sensitive which makes it more comprehensive and easy to use so far pretty much all of these different types of things only use the exact same ping button and just depends on how fast I click and where I click on so now finally let's make the wheel menu to display even more pink types so let's first create the pink wheel in the editor all right so this is the visual for our pinwheel now let's see on with the code let's make a private void awake and in here grab the references to the buttons and set their actions and now in order to add a think we also need a position so let's start as a feel that we won't were see you later alright so now we need functions to show and hide this wheel all right so we got some various static functions that we can count from elsewhere so now we need to figure out how we're going to show the pinwheel so the last thing we need is to receive a vector3 for the plank position which is what we're going to store all right so what this should be working just for the move button so now let's see where we're going to call this so let's go into the pink system and then here let's add two functions so we have a function that will be called on every frame that the button is held down and one that is called when the button is released so let's capture those inputs so here on the game camera let's see if input dot get mouse button just this one which is fired on every update that the button is held down so it has four the button number two which is our ping button if it is held down then we call pink system ping button held down update and then on the get mouse button up up again the second button we do our ping system that pink button really ok so the input logic should be working now let's go back in here and now we need to count the number of time that we are holding down the thing button so let's make a film to hold that now on this function we're going to increase it by time.deltatime and now we're going to check if the home down timer is bigger than a certain threshold so let's define it up here so if we hold the button down for one second let's go down here if the timer is bigger than the constant timer then we want to show the wheel so we test if the pinwheel we test if is visible so we want if it's not visible and if not this one we do pink wheel that show and now we pass in the pink position which again we go into the utens class to get the mouse world position and finally when we release button we simply set the pink button hold down timer to zero all right so that's pretty much it so here on the game home we are capturing for our inputs whilst we're holding down the ping button we are increasing a timer if the timer goes past a certain amount then we show our pinwheel and on the penguin we show the game object and we have some buttons to add specific pings right now only the movement works but let's test if that one is working okay so here we are let's do a normal thing still works enemy ping still works item things don't works now I hone down the ping button any of there it is after one second I'm holding down I can see the ping well and now I select whatever thing only this one is working so let's click on it and there you go it showed up in there now we need to destroy the previous one so it's done with that on the ping system let's create a function to destroy the last thing and now we can go into the pinwheel and when we show it we call the ping system and destroy D and last ping that way that move things should vanish when we create this one so let's see okay click here show the ping window and that thing vanished now I still like this one and there you would spawn that thing in there right great now let's apply the exact same thing to all other ping types all right the code in here should be working we simply set a different thing time for each button all right everything is set let's see okay so here we are normal move thing anything now show a beeping wheel now it's not like this one and yep there you go there's that special icon now it's not like another one it's like this one and yep there it is there it is all of the various pink types are working perfectly fine and if we move to the corner everything works exactly as intended so there you have it we created the pink system from apex legends we can click somewhere random and just fire a normal blue thing we can double click which creates a enemy thing we can think on top of an item and it automatically identifies the item under the mouse and spawns that specific thing and we also have a thing we own that shows up if we hold the button down which gives us even more pain types all thing types also have an indicator in the UI in case the ping is outside of the camera view as always you can download the project files and utilities from unity comic calm if you have any questions post them in the comments and I'll do my best answer subscribe for more videos and I'll see you next time you
