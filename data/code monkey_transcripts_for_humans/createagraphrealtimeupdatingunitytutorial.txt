With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - in this video were continuing to create
00:03 - a graph in unity we're going to add the
00:05 - ability to update our graph in real time
00:07 - let's begin
00:11 - so in the past two videos we modify the
00:13 - graph visual interface to work with an
00:15 - object that implements the graph visual
00:17 - object interface instead of simple game
00:19 - objects so each specific bar in our
00:22 - graph is now represented as a specific
00:24 - object in doing so we were able to add
00:26 - specific code to the graph visual object
00:28 - that manages each specific object here
00:31 - is the definition for the interfaces as
00:33 - you can see our main graph visual has a
00:36 - function to create a new visual object
00:38 - and each i graph visual object has a
00:41 - function to set that object's info when
00:44 - calling this function we are no longer
00:46 - creating a new object so this makes it
00:48 - very easy to update our graph so let's
00:50 - begin with a simple function to update a
00:53 - single value we're going to receive an
00:57 - int for the index that we wish to update
01:00 - and end in for the value that we're
01:02 - going to set in that index so here we
01:04 - are creating the graph visual object and
01:07 - adding it to this list so we simply
01:09 - access the index on that list and we set
01:12 - the graphical object info and now we
01:15 - need to send the new info so we can go
01:17 - up here and see how all those values are
01:19 - calculated so these are the various
01:22 - values we send it a new anchored
01:24 - position then we have the position width
01:27 - which is the excise and then we have the
01:30 - tooltip text which we calculate so in
01:32 - here obviously we have bunch of errors
01:33 - because inside this function we do not
01:35 - have these values so in order to can
01:37 - only the graph position we need to
01:39 - access the x size and the Y minimum and
01:42 - maximum those are calculated up here
01:45 - when we are first creating the graph so
01:47 - for now let's just store them as member
01:50 - variables so go up here and store those
01:52 - out and down here we're going to store
01:59 - them as the member variables okay so
02:04 - since we made these as member variables
02:06 - we now can access the same values that
02:08 - were coming later up here and we can
02:10 - access them in this function and use
02:12 - them to create a new X&Y position and XS
02:16 - and so on so just like this we should be
02:18 - able to update a single value in our
02:19 - graph so in order to test that let's go
02:22 - up here into our
02:23 - way and here on let's create a function
02:26 - periodic to test our update the function
02:29 - periodic is part of the code monkeys
02:30 - only said you can wear out for free from
02:32 - unity code monkey comm so let's create
02:36 - which won't trigger this action every
02:39 - let's say 100 milliseconds and in here
02:41 - let's just increase the very first value
02:43 - so in here define D value start off at 0
02:46 - and we're going to update our value at
02:48 - index 0 we're going to give it value and
02:51 - then increase the value so every 100
02:53 - milliseconds we are going to increase
02:55 - the value and update the value shown in
02:57 - our graph so let's see if the very first
02:59 - bar is constantly increasing okay there
03:02 - it is the bar is constantly increasing
03:04 - and if I pass the mouse over you can see
03:06 - that the toe tip updates and the sides
03:07 - updating okay so everything seems
03:10 - correct but as you can see right now the
03:12 - bar now goes past the graph borders that
03:16 - is because we also need to update the
03:17 - maximum and minimum in order to rescale
03:19 - the graph if needed if we change the
03:22 - scale then we're also going to need to
03:23 - update every other point on the graph so
03:26 - in here let's first make a function to
03:28 - calculate the Y maximum and minimum so
03:30 - instead of using the member variables
03:32 - that were committed previously we're
03:34 - going to calculate them inside this
03:35 - function now for this function we want
03:39 - to return both the Y minimum and the y
03:41 - maximum so instead of setting a return
03:43 - value in here we're simply going to
03:44 - return void and add some out parameters
03:47 - for the float Y minimum and a out for a
03:51 - float Y maximum if you're not familiar
03:54 - with the out parameter it is essentially
03:57 - unless you return more than one value
03:58 - from a function so when we call this
04:01 - function we can get both of these values
04:03 - as our return
04:04 - so inside we're going to copy the
04:06 - combination code that we were using
04:08 - previously right here so just like that
04:13 - we are calculating the Y scale and up
04:16 - here instead of having all this code
04:18 - we're going to first define a float for
04:21 - the Y minimum and one for dy maximum
04:24 - then we're going to call the function
04:26 - and give it these values so this
04:31 - function will do its calculations and
04:33 - put the correct calculated values back
04:36 - on
04:36 - these variables so we can also go up
04:39 - here and get rid of the member variables
04:41 - since they won't always be calculated
04:43 - so what's s and everything should be
04:44 - working exactly the same as previously
04:46 - and yep there it is our graph is still
04:49 - working exactly the same ok great now
04:51 - let's also go up here and define a
04:53 - private volume for the start Y scale at
04:58 - 0 and set it to true on our awake we're
05:04 - making this as a member variable so that
05:06 - later we can add a function to easily
05:08 - modify this during runtime and when we
05:10 - are calculating if the boolean value is
05:13 - set to true then we do reset our graph
05:16 - okay so back in our update value
05:18 - function let's also grab the Y minimum
05:20 - and Y maximum the same thing that we are
05:22 - doing when we are also creating the
05:24 - graph for the first time so now we have
05:28 - the count lated Y maximum and Y minimum
05:30 - that we can use in here ok great and now
05:32 - we want to update the home graph since
05:34 - this K on my change and all of them need
05:37 - to be updated so we're going to copy all
05:40 - this code and the difference is instead
05:42 - of creating a graphical object we're
05:44 - going to use the sacrificial object info
05:47 - in order to update it so just like this
05:53 - we should be able to see all of the
05:55 - valleys in the graph being updated and
05:57 - if the scale does change you can see all
05:59 - of them match that scale so let's see ok
06:03 - here it is the first value as you can
06:05 - see it is increasing and now when he
06:07 - gets up here he won't start to modify
06:09 - the scale and all the others should
06:11 - become smaller and yet there you go as
06:13 - soon as that one reaches the top of the
06:15 - graph which has some breathing room as
06:17 - soon as he goes higher all of the others
06:18 - these don't have the same values but
06:20 - relative to this one they are much
06:22 - smaller so our graph is now correctly
06:24 - scaling all of the values so now as you
06:27 - can see there is still an issue with our
06:29 - update the y-axis labels are not
06:32 - updating to reflect the new scale this
06:34 - one is saying the top is 117 when this
06:36 - bar is 429 so that is obviously not
06:39 - correct so let's deal with that here on
06:42 - our create graph function we are in sin
06:45 - XI ating all of the labels on the y-axis
06:47 - and we are simply adding them
06:49 - on to our generic game object list so
06:51 - before we can update those labels we
06:53 - need to first store those references so
06:55 - we need to go all the way up here and
06:57 - make a new private list a list of rect
07:01 - transform and we're going to call this
07:03 - the white label list so in here when we
07:06 - incent she ate a new label let's also
07:09 - add it to the list and just like that we
07:12 - have a list that contains references to
07:14 - every single label also we have to go up
07:17 - here on the clean up when we are
07:19 - destroying all the game objects and it's
07:21 - also clear this list okay so now that we
07:25 - have a list of references to the current
07:27 - levels we can go back into the update
07:29 - function so in here let's cycle through
07:31 - the home label is and in here we need to
07:35 - complete the new label values so let's
07:37 - see appear how it is calculated the
07:39 - position will be the same so we need to
07:41 - change is really this line here now in
07:43 - order to have this line we also need the
07:45 - normalized value so let's copy these the
07:50 - separated count is the number of labels
07:52 - so we can use the list count and for the
07:57 - label list rect transform it is on the
08:00 - in list of index I and yep it's this
08:02 - symbol so let's test and we should be
08:04 - able to see the labels now correctly
08:06 - updating okay so there's the bar
08:08 - increasing and when it gets high enough
08:11 - it should rescale the rest the size and
08:14 - the labels yep there you go they are now
08:16 - correctly being rescale so if I placed
08:19 - my mouse over it's on 160 and as you can
08:22 - see that one is always around 20% higher
08:24 - so everything is now scaling correctly
08:27 - and the labels are also updating so now
08:29 - I just add one more simple thing we only
08:32 - want to recalculate the y axis labels
08:34 - and update the home graph if the scale
08:36 - actually changes if the scale of the
08:38 - graph doesn't change then we only need
08:40 - to update a single phone so that's very
08:43 - simple to implement in here on our
08:45 - update before we modify the value in the
08:49 - list let's complete the Y minimum and y
08:52 - maximum and let's call this Y minimum
08:54 - before and Y maximum before then we set
08:58 - the new value come late everything yep
09:00 - correct and now in here let's define a
09:03 - bone bone Y scale change and this will
09:07 - be true if the Y minimum before is
09:09 - different from the Y minimum or if the y
09:13 - maximum before is different from the y
09:15 - maximum so then we do if the scale did
09:21 - not change if it did not change then we
09:24 - only want to update a single value so
09:26 - that's this code in here so if the scale
09:30 - did not change then we are only going to
09:32 - update this value but if the scale did
09:35 - change then we're going to update
09:37 - everything so this way we are no longer
09:46 - wasting resources by updating every
09:49 - single point and the labels when the Y
09:51 - scale does not change so let's see if
09:53 - that is correct and yep as you can see
09:56 - everything works perfectly fine the
09:58 - scale of the others are not changing and
10:01 - this one is increasing and one cuts up
10:03 - there you won't see everything else
10:05 - change accordingly so there you have it
10:07 - we have the ability to update our graph
10:09 - in real time we can update any value and
10:12 - the code automatically resizes the graph
10:14 - to make sure all values fit inside as
10:16 - always you can download the project
10:17 - files and utilities from unity code
10:19 - monkey comm if you have any questions
10:21 - post them in the comments and I'll do my
10:22 - best to answer them subscribe for more
10:24 - videos and I'll see you next time

Cleaned transcript:

hello and welcome I'm your code monkey in this video were continuing to create a graph in unity we're going to add the ability to update our graph in real time let's begin so in the past two videos we modify the graph visual interface to work with an object that implements the graph visual object interface instead of simple game objects so each specific bar in our graph is now represented as a specific object in doing so we were able to add specific code to the graph visual object that manages each specific object here is the definition for the interfaces as you can see our main graph visual has a function to create a new visual object and each i graph visual object has a function to set that object's info when calling this function we are no longer creating a new object so this makes it very easy to update our graph so let's begin with a simple function to update a single value we're going to receive an int for the index that we wish to update and end in for the value that we're going to set in that index so here we are creating the graph visual object and adding it to this list so we simply access the index on that list and we set the graphical object info and now we need to send the new info so we can go up here and see how all those values are calculated so these are the various values we send it a new anchored position then we have the position width which is the excise and then we have the tooltip text which we calculate so in here obviously we have bunch of errors because inside this function we do not have these values so in order to can only the graph position we need to access the x size and the Y minimum and maximum those are calculated up here when we are first creating the graph so for now let's just store them as member variables so go up here and store those out and down here we're going to store them as the member variables okay so since we made these as member variables we now can access the same values that were coming later up here and we can access them in this function and use them to create a new X&Y position and XS and so on so just like this we should be able to update a single value in our graph so in order to test that let's go up here into our way and here on let's create a function periodic to test our update the function periodic is part of the code monkeys only said you can wear out for free from unity code monkey comm so let's create which won't trigger this action every let's say 100 milliseconds and in here let's just increase the very first value so in here define D value start off at 0 and we're going to update our value at index 0 we're going to give it value and then increase the value so every 100 milliseconds we are going to increase the value and update the value shown in our graph so let's see if the very first bar is constantly increasing okay there it is the bar is constantly increasing and if I pass the mouse over you can see that the toe tip updates and the sides updating okay so everything seems correct but as you can see right now the bar now goes past the graph borders that is because we also need to update the maximum and minimum in order to rescale the graph if needed if we change the scale then we're also going to need to update every other point on the graph so in here let's first make a function to calculate the Y maximum and minimum so instead of using the member variables that were committed previously we're going to calculate them inside this function now for this function we want to return both the Y minimum and the y maximum so instead of setting a return value in here we're simply going to return void and add some out parameters for the float Y minimum and a out for a float Y maximum if you're not familiar with the out parameter it is essentially unless you return more than one value from a function so when we call this function we can get both of these values as our return so inside we're going to copy the combination code that we were using previously right here so just like that we are calculating the Y scale and up here instead of having all this code we're going to first define a float for the Y minimum and one for dy maximum then we're going to call the function and give it these values so this function will do its calculations and put the correct calculated values back on these variables so we can also go up here and get rid of the member variables since they won't always be calculated so what's s and everything should be working exactly the same as previously and yep there it is our graph is still working exactly the same ok great now let's also go up here and define a private volume for the start Y scale at 0 and set it to true on our awake we're making this as a member variable so that later we can add a function to easily modify this during runtime and when we are calculating if the boolean value is set to true then we do reset our graph okay so back in our update value function let's also grab the Y minimum and Y maximum the same thing that we are doing when we are also creating the graph for the first time so now we have the count lated Y maximum and Y minimum that we can use in here ok great and now we want to update the home graph since this K on my change and all of them need to be updated so we're going to copy all this code and the difference is instead of creating a graphical object we're going to use the sacrificial object info in order to update it so just like this we should be able to see all of the valleys in the graph being updated and if the scale does change you can see all of them match that scale so let's see ok here it is the first value as you can see it is increasing and now when he gets up here he won't start to modify the scale and all the others should become smaller and yet there you go as soon as that one reaches the top of the graph which has some breathing room as soon as he goes higher all of the others these don't have the same values but relative to this one they are much smaller so our graph is now correctly scaling all of the values so now as you can see there is still an issue with our update the yaxis labels are not updating to reflect the new scale this one is saying the top is 117 when this bar is 429 so that is obviously not correct so let's deal with that here on our create graph function we are in sin XI ating all of the labels on the yaxis and we are simply adding them on to our generic game object list so before we can update those labels we need to first store those references so we need to go all the way up here and make a new private list a list of rect transform and we're going to call this the white label list so in here when we incent she ate a new label let's also add it to the list and just like that we have a list that contains references to every single label also we have to go up here on the clean up when we are destroying all the game objects and it's also clear this list okay so now that we have a list of references to the current levels we can go back into the update function so in here let's cycle through the home label is and in here we need to complete the new label values so let's see appear how it is calculated the position will be the same so we need to change is really this line here now in order to have this line we also need the normalized value so let's copy these the separated count is the number of labels so we can use the list count and for the label list rect transform it is on the in list of index I and yep it's this symbol so let's test and we should be able to see the labels now correctly updating okay so there's the bar increasing and when it gets high enough it should rescale the rest the size and the labels yep there you go they are now correctly being rescale so if I placed my mouse over it's on 160 and as you can see that one is always around 20% higher so everything is now scaling correctly and the labels are also updating so now I just add one more simple thing we only want to recalculate the y axis labels and update the home graph if the scale actually changes if the scale of the graph doesn't change then we only need to update a single phone so that's very simple to implement in here on our update before we modify the value in the list let's complete the Y minimum and y maximum and let's call this Y minimum before and Y maximum before then we set the new value come late everything yep correct and now in here let's define a bone bone Y scale change and this will be true if the Y minimum before is different from the Y minimum or if the y maximum before is different from the y maximum so then we do if the scale did not change if it did not change then we only want to update a single value so that's this code in here so if the scale did not change then we are only going to update this value but if the scale did change then we're going to update everything so this way we are no longer wasting resources by updating every single point and the labels when the Y scale does not change so let's see if that is correct and yep as you can see everything works perfectly fine the scale of the others are not changing and this one is increasing and one cuts up there you won't see everything else change accordingly so there you have it we have the ability to update our graph in real time we can update any value and the code automatically resizes the graph to make sure all values fit inside as always you can download the project files and utilities from unity code monkey comm if you have any questions post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time
