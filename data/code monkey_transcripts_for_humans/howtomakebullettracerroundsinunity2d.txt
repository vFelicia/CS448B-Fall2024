With timestamps:

00:00 - hello and welcome I'm your code monkey
00:02 - and in this video we're going to make a
00:03 - visual weapon bullet tracer it won't be
00:06 - a visual line that we're going to spawn
00:08 - from the weapon shoot position to the
00:09 - target position and then we're going to
00:11 - add some extra effects alright let's get
00:13 - started
00:17 - so I have my scene here with my
00:20 - character I can move it around it is
00:22 - looking at the mouse and when I fire it
00:24 - plays a basic animation okay so let's go
00:28 - into our game handler script now in here
00:32 - I have a basic setup I have the camera
00:34 - fall script which we created in a
00:37 - previous video it is being set up to
00:39 - follow the player position and the
00:41 - player handler is handling the player
00:43 - movement and playing the animation when
00:45 - the left mouse button is down okay so on
00:49 - my player handler script I have an event
00:51 - called on shoot that is being fired
00:53 - every time the player shoots his weapon
00:56 - now in here this event is being fired
00:57 - with on shoot event args which contains
01:00 - the gun endpoint position and the shoot
01:02 - position which is the position of the
01:04 - mouse so just for testing let's do debug
01:07 - dot draw a line from our gun and quick
01:11 - position into the shoot position just to
01:14 - see the values that this event is fired
01:17 - let's draw the line in white with
01:20 - duration of 100 milliseconds okay make
01:23 - sure it gizmos are on and there you go
01:25 - we can see the line is going from the
01:27 - weapon endpoint right there into the
01:29 - mouse position okay great so our values
01:33 - are being sent correctly so in here in
01:35 - my textures I have a weapon tracer
01:37 - texture which is just a basic line that
01:40 - fades out at the beginning now this is
01:42 - what we're gonna spawn from the shoot
01:44 - and point position into the mouse target
01:47 - position so into our code here let's
01:49 - remove our debug so in here I'm going to
01:53 - create a function call it private roid
01:56 - create weapon tracer and this function
02:00 - will receive a vector3
02:03 - for our from position and a vector3
02:06 - for our target position and when I shoot
02:10 - we are going to call our function using
02:14 - a dart gun and point position towards
02:17 - the should position okay so now in here
02:20 - we're going to need to calculate the
02:23 - direction between these two points so
02:24 - let's make it vector three call it beer
02:26 - it's gonna be the
02:28 - position - the front position and make
02:31 - it normalized okay so we now have our
02:36 - direction now in order to display our
02:39 - weapon tracer we are going to use a quad
02:42 - that won't display our tracer texture
02:45 - where the lower part of the texture is
02:47 - located at the gun end point and is
02:49 - rotated towards our target position so
02:52 - in order to create that quand we are
02:54 - going to use the world mash class that
02:56 - is part of the code monkey utilities
02:58 - which is always you can grab from unity
03:00 - code monkey comm if you want to know how
03:02 - to create a match through code you can
03:04 - check out the video on that so we're all
03:07 - mesh let's go into world mesh and create
03:11 - going to create on the front position
03:15 - onto our rotation let's leave it at zero
03:18 - for now mesh width that's where that six
03:20 - mesh I want to say just a hundred we're
03:23 - going to need a material for a weapon
03:24 - tracer so let's say weapon tracer
03:27 - material and we'll grab that later
03:29 - coordinates just leave it as now and ten
03:33 - thousand on the offset so that it shows
03:34 - up on top of everything else so up here
03:37 - let's make a serialized field private
03:40 - material called weapon tracer material
03:46 - okay so let's convert our direction into
03:49 - an angle there's also a function on the
03:51 - utilities for that so you tell class dot
03:54 - get angle from the vector float and
03:57 - we're going to set our direction this is
04:00 - gonna be our killer
04:01 - Z which we're going to send in here so
04:06 - this should be displaying a mesh
04:08 - spawning at the front position and
04:10 - pointing towards our target position so
04:12 - let's create our weapon material create
04:15 - a new material weapon tracer and this is
04:20 - going to be unlit transparent drag our
04:24 - texture and drag our reference okay
04:28 - let's give it a shot
04:31 - and there you go it's being spawned it's
04:34 - spawning in the middle right on top of
04:36 - that and obviously the rotation is
04:38 - all right so let's solve up going here
04:41 - so yours is gonna be minus 19 okay the
04:48 - rotation is now correct so let's also
04:51 - solve the size of our mansion set of
04:54 - being a hundred it's going to be a float
04:57 - or our distance which will be vector
04:59 - three that distance between our front
05:02 - position and the target position this
05:05 - distance is going to be the height of
05:07 - the mesh and for our spawn position
05:12 - tracer spawn position won't be our front
05:16 - position was the direction multiplied by
05:19 - our distance by half so Traci respond
05:24 - position will be the midpoint between
05:26 - the front position and the turret
05:28 - position so let's spawn it in there with
05:30 - a height of distance okay let's see how
05:32 - it looks okay there you go the size of
05:39 - the mesh is correct the rotation is
05:40 - correct in the position is correct okay
05:42 - great and I can still move and
05:44 - everything still works awesome now as
05:48 - you can see the size of the mesh in
05:50 - there it is looks pretty decent but if I
05:53 - put it together it looks quite a bit
05:56 - squished in the beginning there this is
05:58 - why we are using mesh instead of just
06:00 - spawning a regular sprite so that this
06:02 - way we can change the scale of our
06:05 - texture and make it look good even when
06:07 - the size is very small so let's do that
06:10 - now
06:11 - so back in our code here and first we
06:15 - are actually going to duplicate our
06:17 - material so we don't modify the original
06:19 - rating you material call it Tim weapon
06:23 - tracer material will be a clone of our
06:28 - weapon tracer material so now on this
06:32 - temporary weapon tracer we want to
06:34 - modify the set texture scale of our main
06:39 - texture and the scale will be a vector
06:43 - to four width we want the exact same
06:46 - width but for our height this is what we
06:48 - want to modify based on our distance now
06:51 - the texture has a height of 256 pixels
06:56 - so in here we are similarly going to
06:59 - divide our distance by 256 so this is
07:04 - always only going to be dependent on the
07:06 - scale of the units in your game but in
07:08 - this case essentially it means the
07:09 - entire texture won't be visible if the
07:11 - distance between the front position and
07:13 - target position is 256 units if it's
07:16 - half of that if it's 128 then this
07:18 - texture won't display half of it so
07:21 - let's use this material instead of the
07:23 - original and see if that issue has been
07:26 - resolved yep okay there you going so you
07:29 - can see when I fire away
07:31 - you can see a lot of the texture but if
07:34 - I fire very little you just see the very
07:36 - beginning of the texture so this looks
07:38 - much better than just having a giant
07:40 - thing pop up right there okay great
07:43 - so now obviously we want to we want to
07:46 - clear up these tracers after some time
07:48 - so what's going to our code and make it
07:51 - disappear after a while in here we're
07:54 - going to have a float timer and let's
07:57 - say we want it to disappear after a
07:59 - hundred milliseconds and I'm going to
08:02 - use the function of data from the code
08:04 - monkeytoes I'm going to create it and
08:07 - here just time with minus equals time
08:09 - double time and if timer isn't less than
08:13 - zero then I'm going to destroy the world
08:18 - mesh and I'm going to return true to
08:21 - destroy the function of data object so
08:23 - in here if not we're going to return
08:25 - false okay let's test that out and see
08:28 - if our choices disappearing and you know
08:32 - there we go it shows up and then it
08:33 - vanishes move around okay great so
08:38 - now this solve easily looks very simple
08:40 - so let's add some frame animations to
08:42 - make it disappear a bit more softly
08:44 - rather than just disappearing all at
08:46 - once
08:46 - okay so in order to do that I have a
08:49 - tracer spreadsheet in here and that we
08:51 - were previously just using this one and
08:53 - now I have several frames to make it
08:55 - slowly disappear so what's great new
08:58 - material and call it weapon tracer
09:04 - spreadsheet make it unlit transparent
09:08 - drag our texture go in here switch our
09:11 - reference for this one okay back into
09:14 - our code here now in here in order to do
09:16 - some basic frame animation we are going
09:18 - to modify the UV coordinates so what's
09:21 - going to our world mesh dot set UV
09:24 - chords and I'm going to send it the
09:28 - coordinates of to start off just the
09:31 - first frame so the first frame will be
09:33 - an X of 0 Y of 0 the width of a single
09:37 - frame is 16 and the height is 256 so
09:41 - this will display just the first frame
09:43 - of that spreadsheet so let's head in
09:45 - here and end for our current frame and
09:48 - let's add a float for our frame rate and
09:53 - let's put it at point 0 69 which is 60
09:57 - frames per second so in our timeline
09:58 - let's edit that and now in here when the
10:02 - timer is under 0 we are going to
10:04 - increase our frame we are going to reset
10:06 - our timer increase it by the frame rate
10:10 - now if our frame is the final frame the
10:15 - final frame is currently visible we are
10:18 - going to destroy our world mesh return
10:21 - true to destroy this object if not then
10:26 - we're going to display our current frame
10:27 - so we're all mesh not set UV coordinates
10:31 - and we're essentially going to send this
10:34 - set instead of 0 it's going to be 16
10:37 - which is the size of each frame
10:39 - multiplied by our current frame so when
10:42 - we are at frame 1 it is gonna spawn it
10:45 - is going to display with the necks of 16
10:47 - one frame to an X of 32 so on ok so
10:51 - let's see if our basic frame animation
10:53 - is correctly working and there you go it
10:56 - is switching the frames and now it
10:58 - doesn't look as janky as before ok great
11:02 - so now let's add some more effects let's
11:05 - add a shoot flash on our shoot position
11:07 - so I have a text Rio which is just a
11:10 - basic yellow circle that signifies the
11:13 - flash and we're going to spawn it and
11:16 - very quickly and here lets you create
11:19 - shoot flash and we want to spawn it on
11:23 - the gun end point position so going here
11:25 - private void create shoot flash
11:28 - honorific two or three spawning position
11:32 - in here since we don't need to mess
11:35 - around with mesh UV sizes we're just
11:37 - going to spawn a basic sprite so we're
11:41 - on sprite spawning on the spawn
11:50 - positioned with our sprite for our shoot
11:53 - flash
11:54 - sprite which I'm going to go up here
11:59 - make it a sprite and shoot why sprite
12:02 - and add a function of timer to destroy
12:08 - it after a while the world sprite dot
12:11 - destroy self after let's say 100
12:14 - milliseconds okay so let's add a
12:17 - reference to our sprite and test it out
12:21 - okay there you go that makes the effect
12:24 - a bit better all right great
12:26 - and finally let's add some basic screen
12:29 - shake once intensity of 0.5 and loss for
12:32 - 0.05 okay let's see the final effect and
12:36 - there you go we got a basic weapon
12:38 - tracer with a basic screen shake and
12:41 - popping out some effects so to make it
12:43 - look very nice as always you can grab
12:45 - the project files in utilities from
12:47 - Unity code monkey calm if you have any
12:49 - questions post them in the comments and
12:50 - I'll do my best to answer them ok see
12:52 - you next time

Cleaned transcript:

hello and welcome I'm your code monkey and in this video we're going to make a visual weapon bullet tracer it won't be a visual line that we're going to spawn from the weapon shoot position to the target position and then we're going to add some extra effects alright let's get started so I have my scene here with my character I can move it around it is looking at the mouse and when I fire it plays a basic animation okay so let's go into our game handler script now in here I have a basic setup I have the camera fall script which we created in a previous video it is being set up to follow the player position and the player handler is handling the player movement and playing the animation when the left mouse button is down okay so on my player handler script I have an event called on shoot that is being fired every time the player shoots his weapon now in here this event is being fired with on shoot event args which contains the gun endpoint position and the shoot position which is the position of the mouse so just for testing let's do debug dot draw a line from our gun and quick position into the shoot position just to see the values that this event is fired let's draw the line in white with duration of 100 milliseconds okay make sure it gizmos are on and there you go we can see the line is going from the weapon endpoint right there into the mouse position okay great so our values are being sent correctly so in here in my textures I have a weapon tracer texture which is just a basic line that fades out at the beginning now this is what we're gonna spawn from the shoot and point position into the mouse target position so into our code here let's remove our debug so in here I'm going to create a function call it private roid create weapon tracer and this function will receive a vector3 for our from position and a vector3 for our target position and when I shoot we are going to call our function using a dart gun and point position towards the should position okay so now in here we're going to need to calculate the direction between these two points so let's make it vector three call it beer it's gonna be the position the front position and make it normalized okay so we now have our direction now in order to display our weapon tracer we are going to use a quad that won't display our tracer texture where the lower part of the texture is located at the gun end point and is rotated towards our target position so in order to create that quand we are going to use the world mash class that is part of the code monkey utilities which is always you can grab from unity code monkey comm if you want to know how to create a match through code you can check out the video on that so we're all mesh let's go into world mesh and create going to create on the front position onto our rotation let's leave it at zero for now mesh width that's where that six mesh I want to say just a hundred we're going to need a material for a weapon tracer so let's say weapon tracer material and we'll grab that later coordinates just leave it as now and ten thousand on the offset so that it shows up on top of everything else so up here let's make a serialized field private material called weapon tracer material okay so let's convert our direction into an angle there's also a function on the utilities for that so you tell class dot get angle from the vector float and we're going to set our direction this is gonna be our killer Z which we're going to send in here so this should be displaying a mesh spawning at the front position and pointing towards our target position so let's create our weapon material create a new material weapon tracer and this is going to be unlit transparent drag our texture and drag our reference okay let's give it a shot and there you go it's being spawned it's spawning in the middle right on top of that and obviously the rotation is all right so let's solve up going here so yours is gonna be minus 19 okay the rotation is now correct so let's also solve the size of our mansion set of being a hundred it's going to be a float or our distance which will be vector three that distance between our front position and the target position this distance is going to be the height of the mesh and for our spawn position tracer spawn position won't be our front position was the direction multiplied by our distance by half so Traci respond position will be the midpoint between the front position and the turret position so let's spawn it in there with a height of distance okay let's see how it looks okay there you go the size of the mesh is correct the rotation is correct in the position is correct okay great and I can still move and everything still works awesome now as you can see the size of the mesh in there it is looks pretty decent but if I put it together it looks quite a bit squished in the beginning there this is why we are using mesh instead of just spawning a regular sprite so that this way we can change the scale of our texture and make it look good even when the size is very small so let's do that now so back in our code here and first we are actually going to duplicate our material so we don't modify the original rating you material call it Tim weapon tracer material will be a clone of our weapon tracer material so now on this temporary weapon tracer we want to modify the set texture scale of our main texture and the scale will be a vector to four width we want the exact same width but for our height this is what we want to modify based on our distance now the texture has a height of 256 pixels so in here we are similarly going to divide our distance by 256 so this is always only going to be dependent on the scale of the units in your game but in this case essentially it means the entire texture won't be visible if the distance between the front position and target position is 256 units if it's half of that if it's 128 then this texture won't display half of it so let's use this material instead of the original and see if that issue has been resolved yep okay there you going so you can see when I fire away you can see a lot of the texture but if I fire very little you just see the very beginning of the texture so this looks much better than just having a giant thing pop up right there okay great so now obviously we want to we want to clear up these tracers after some time so what's going to our code and make it disappear after a while in here we're going to have a float timer and let's say we want it to disappear after a hundred milliseconds and I'm going to use the function of data from the code monkeytoes I'm going to create it and here just time with minus equals time double time and if timer isn't less than zero then I'm going to destroy the world mesh and I'm going to return true to destroy the function of data object so in here if not we're going to return false okay let's test that out and see if our choices disappearing and you know there we go it shows up and then it vanishes move around okay great so now this solve easily looks very simple so let's add some frame animations to make it disappear a bit more softly rather than just disappearing all at once okay so in order to do that I have a tracer spreadsheet in here and that we were previously just using this one and now I have several frames to make it slowly disappear so what's great new material and call it weapon tracer spreadsheet make it unlit transparent drag our texture go in here switch our reference for this one okay back into our code here now in here in order to do some basic frame animation we are going to modify the UV coordinates so what's going to our world mesh dot set UV chords and I'm going to send it the coordinates of to start off just the first frame so the first frame will be an X of 0 Y of 0 the width of a single frame is 16 and the height is 256 so this will display just the first frame of that spreadsheet so let's head in here and end for our current frame and let's add a float for our frame rate and let's put it at point 0 69 which is 60 frames per second so in our timeline let's edit that and now in here when the timer is under 0 we are going to increase our frame we are going to reset our timer increase it by the frame rate now if our frame is the final frame the final frame is currently visible we are going to destroy our world mesh return true to destroy this object if not then we're going to display our current frame so we're all mesh not set UV coordinates and we're essentially going to send this set instead of 0 it's going to be 16 which is the size of each frame multiplied by our current frame so when we are at frame 1 it is gonna spawn it is going to display with the necks of 16 one frame to an X of 32 so on ok so let's see if our basic frame animation is correctly working and there you go it is switching the frames and now it doesn't look as janky as before ok great so now let's add some more effects let's add a shoot flash on our shoot position so I have a text Rio which is just a basic yellow circle that signifies the flash and we're going to spawn it and very quickly and here lets you create shoot flash and we want to spawn it on the gun end point position so going here private void create shoot flash honorific two or three spawning position in here since we don't need to mess around with mesh UV sizes we're just going to spawn a basic sprite so we're on sprite spawning on the spawn positioned with our sprite for our shoot flash sprite which I'm going to go up here make it a sprite and shoot why sprite and add a function of timer to destroy it after a while the world sprite dot destroy self after let's say 100 milliseconds okay so let's add a reference to our sprite and test it out okay there you go that makes the effect a bit better all right great and finally let's add some basic screen shake once intensity of 0.5 and loss for 0.05 okay let's see the final effect and there you go we got a basic weapon tracer with a basic screen shake and popping out some effects so to make it look very nice as always you can grab the project files in utilities from Unity code monkey calm if you have any questions post them in the comments and I'll do my best to answer them ok see you next time
