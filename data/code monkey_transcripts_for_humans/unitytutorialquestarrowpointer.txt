With timestamps:

00:00 - hello and welcome I'm your code monkey
00:02 - and in this video we're going to create
00:03 - a quest arrow pointer that won't point
00:05 - to a location in our world
00:07 - let's get Sir
00:11 - so I have my scene here I have my player
00:13 - character and if I go over here to the
00:16 - right I have a tent let's say this is
00:19 - some type of open-world game and we have
00:21 - a quest active telling us to go to this
00:24 - tent we want to display an arrow in our
00:26 - UI showing the direction to the tent
00:28 - when the tent is off-screen and have it
00:30 - placed on top of the tent when it is on
00:32 - screen alright so let's start off by
00:35 - making our UI arrow let's go into the
00:38 - canvas in here and make a new game
00:41 - object name it window quest pointer
00:44 - let's expand it to occupy everything so
00:48 - there you go ok inside let's make
00:51 - another game object name it pointer
00:53 - let's add a image component and set the
00:57 - width and height to 60 and 60 and give
01:00 - it the arrow sprite so this is a sprite
01:02 - that won't be rotated and position
01:04 - pointing towards our tent alright so now
01:07 - let's make our script make a new c-sharp
01:10 - script and name it window quest pointer
01:13 - so in here let's make a member variable
01:15 - so a private vector3 target position and
01:20 - on our private boy away let's set the
01:24 - target position to our tenth position
01:26 - which in this case is set on 245 let's
01:30 - also grab a reference to the rect
01:33 - transform for our pointer pointer rect
01:36 - transform and let's grab it down here
01:41 - so now let's first just display the
01:43 - direction so we're going to go into our
01:46 - private void update and for direction we
01:49 - need the two positions so a vector 342
01:52 - position which will be our target
01:54 - position and a vector 3 to our front
01:58 - position which we only use as the camera
02:01 - position so going to camera dot main
02:04 - transform dot position let's reset the
02:09 - front position that said to 0 and
02:12 - contantly the deer which is to minus
02:16 - from dot normalize alright so this is
02:20 - our direction vector now I'm going to go
02:23 - into
02:24 - using code monkey dog mutants which is
02:27 - always you can grab for free from unity
02:29 - code monkey calm and in here in the UTS
02:33 - class and here I have get angle from
02:35 - vector float which converts a vector
02:38 - three Direction into a angle so fold
02:41 - angle equals this and then I'm going to
02:44 - go into the pointer right transform and
02:46 - set the alert on humor angles to zero
02:49 - zero and tango alright let's test and we
02:53 - should see the arrow pointing towards
02:54 - our tent yep there it is the arrow seems
02:57 - to be pointing in that direction and if
02:59 - I move yep you can see that it's
03:01 - pointing down based on where the camera
03:03 - is okay great so now let's move the
03:06 - arrow towards the tenth position instead
03:09 - of being placed in a random position on
03:11 - the screen
03:12 - first of all let's test if the tent is
03:14 - on screen or not so in order to do that
03:17 - and let's make a vector3 for the target
03:20 - position screen point and it's going to
03:23 - be based on the camera dot main and do a
03:26 - worm to screen point of our target
03:30 - position which is a position on the
03:32 - world let's add a boolean for is a
03:35 - screen and essentially we can take the
03:40 - screen point and if the X is under zero
03:42 - then it's off screen to the left if the
03:46 - X is bigger than screamed out width then
03:50 - it's to the right if the Y is under zero
03:54 - then it's below and if the Y is bigger
03:57 - than screen dot height and it's above
04:00 - okay so just for testing let's do a
04:03 - debug log but is our screen and let's
04:07 - also display our screen point okay let's
04:10 - test okay you can see the log in there
04:13 - you can see that it's true that it is
04:14 - off screen and as I move that won't
04:17 - become false as I get yep there you go
04:20 - when it is on screen it's false
04:23 - once outside it's true because it is off
04:26 - screen okay good so now in here if it is
04:29 - off screen then we want to shift the
04:33 - arrow towards the edge of
04:35 - or screen so in here let's make a
04:37 - vector3 and call it a cap target screen
04:43 - position and it's going to be based on
04:46 - the targets screen position so in here
04:49 - on let's just cap it to make sure that
04:50 - it's always on the screen so if it's
04:52 - under zero let's set it to zero and so
04:54 - on all right so now we have a camp
05:04 - screen position we need to convert this
05:05 - into our UI position so in order to do
05:09 - that let's go up here make a private
05:11 - camera and come with the UI camera and
05:14 - we're going to make this a serialized
05:16 - film so we can set it in the editor so
05:20 - we're going to go into the UI camera dot
05:22 - screen - world point of the cap target
05:25 - position and this will be a vector three
05:28 - for our pointer world position then I
05:33 - take the rect transform and set the
05:36 - position to this and just to make sure
05:40 - we don't have issues with that offsets
05:43 - being different between the cameras
05:44 - let's just set the local position to
05:48 - itself with an empty Z okay so let's
05:54 - test and the arrow should now be shifted
05:56 - towards the edge pointing towards the
05:58 - tent but it should never be off-screen
06:01 - alright there it is the arrow is on
06:03 - screen and it's correctly updating and
06:05 - pointing towards the tent there you go
06:07 - the tent should be right above me and
06:09 - when I move up yep there it is ok great
06:11 - so right now the arrow is hugging the
06:14 - edge of the screen so let's add a border
06:16 - to our arrow calculations so in here
06:19 - let's start off by making a float name
06:21 - it border size and give it a hundred F
06:23 - and in here on our calculation instead
06:25 - of being under zero we're going to test
06:28 - under the border size and when we're
06:31 - increasing it's the width minus the
06:34 - border size same thing for the height
06:35 - and apply to all the others okay so now
06:40 - the arrow should be pointing and moving
06:43 - but it should not hug the exact edge of
06:45 - our screen okay there it is it's
06:47 - pointing and as you can see it's not
06:49 - at the edge of the screen this way the
06:51 - arrow is much more visible yep there it
06:53 - is okay great so now that we have the
06:56 - arrow pointing let's turn the arrow into
06:59 - a cross when the 10th position is on our
07:01 - screen so in here this is the code if it
07:04 - is off screen and let's make our code
07:06 - when it is on-screen okay so in here
07:09 - let's place our pointer right transform
07:12 - on the target position which we're going
07:15 - to convert into a world position on this
07:18 - UI camera so copy this in there and just
07:22 - like that it should show up exactly on
07:24 - top of our 10 okay there it is there's
07:26 - the arrow you can see it as a border and
07:28 - when I get close it stays exactly on top
07:32 - okay great
07:33 - now let's change that sprite when it is
07:35 - on screen so in our code here and let's
07:38 - start off by making some serialize deals
07:41 - for a sprite for the arrows right
07:44 - another one for the cross sprite in here
07:47 - let's store a reference to our pointer
07:51 - image which is part of the Unity engine
07:55 - dot UI so go down here and grab the
07:59 - image component ok and down here if it
08:04 - is off-screen let's have the sprite to
08:06 - the arrow sprite if it is not off-screen
08:10 - so it is on screen let's display as a
08:12 - cross sprite okay
08:14 - all right there's the arrow pointing and
08:16 - when it gets on-screen it converts into
08:19 - a cross great now let's just remove the
08:22 - rotation from the cross and so that is
08:24 - probably not what you want to do so
08:26 - so in here and let's copy this into a
08:28 - different function so make private void
08:30 - and call it rotate pointer towards
08:34 - target position and we're going to call
08:39 - it only when it is off-screen when it is
08:42 - on-screen let's set the local Euler
08:46 - angles to vector 3.0 so there's the
08:49 - arrow and when Sun screen turns into a
08:53 - cross and back into the arrow begin to
08:56 - cross ok great it's no longer rotating
08:59 - exactly as we want now let's make our
09:01 - class able to receive a target
09:03 - instead of setting it up here on awake
09:05 - so let's make some show and hide
09:07 - functions down here let's first make the
09:10 - public void hi and on hide we're simply
09:13 - going to do game object that's a
09:14 - detective Falls and a public void show
09:18 - which you're going to set the active
09:21 - vacuum true so that it's visible and
09:23 - we're going to receive a vector3 for our
09:25 - target position up here let's remove
09:28 - this and call hide by default and down
09:32 - here let's set the this dot target
09:34 - position equals this target position all
09:37 - right so now in here let's make a script
09:39 - for our game handler that won't set the
09:42 - target that we want we can you see sharp
09:44 - script call it game Handler and here
09:47 - remove on this make a private void start
09:51 - and in here we're going to have a
09:54 - civilized film for a private window
09:57 - quest pointer window quest pointer and
10:02 - on start we're going to call the show
10:05 - function and we're going to give it the
10:07 - same as before
10:09 - okay so right now it should be working
10:11 - exactly the same as previously so there
10:14 - I am there's the arrow and when gets on
10:16 - screen it converts into a cross okay
10:18 - great everything is we're going to say
10:20 - now let's test swapping out the arrow
10:22 - during runtime so in here I'm going to
10:25 - go into the using the code monkey party
10:28 - tunes in order to create a function
10:31 - updater just so we can test this a
10:33 - function updater triggers a action every
10:37 - frame so this is the action and here
10:41 - let's make a in state set it to zero and
10:44 - here to a switch on our state and k zero
10:47 - we're simply going to test if camera dot
10:51 - main dot transform dots position do a
10:55 - vector3 dot distance towards our 245 and
11:02 - if that is under let's say fifty F then
11:04 - we're going to swap into the next one
11:06 - state equals one and let's show a
11:09 - different position so let's show
11:11 - position under down so let's a minus
11:15 - and Kaleigh state one we're going to
11:19 - test on this position and if it is let's
11:23 - just hide our pointer okay so we have in
11:29 - here just a basic state machine just so
11:31 - we can test if we can correctly swap our
11:34 - arrows during runtime so I'm creating a
11:37 - function of data which is going to
11:39 - trigger this function on every update
11:41 - and we're going to start off with a
11:43 - pointer towards this position we're
11:46 - going to test if we are near this
11:48 - position within 50 of this position if
11:50 - so let's swap the state to 1 and show an
11:53 - arrow on a different position so under
11:55 - down 1 then we're going to test again if
11:58 - we are close to that new position if so
12:00 - let's just hide and be done with it
12:02 - ok so let's test that behavior and make
12:05 - sure that everything is working
12:06 - correctly ok here I am the arrow is
12:09 - pointing in the exact same direction and
12:11 - as I get close boom there you go the
12:14 - arrow swamped position and now when I
12:16 - get close to that second position as
12:19 - soon as I get close the arrow should
12:21 - hide go and boom it's gone
12:23 - great yep there it is so there you have
12:25 - it we have created a UI arrow that we
12:28 - can use this point direction towards the
12:30 - position in our game you can use this to
12:32 - direct the player towards a target
12:34 - question location in the next video
12:37 - we're going to add support for multiple
12:38 - arrows as always you can download the
12:41 - project files and utilities from ent
12:43 - code monkey comp if you have any
12:45 - questions post them in the comments and
12:46 - I'll do my best answer them subscribe
12:48 - for more videos and I'll see you next
12:50 - time

Cleaned transcript:

hello and welcome I'm your code monkey and in this video we're going to create a quest arrow pointer that won't point to a location in our world let's get Sir so I have my scene here I have my player character and if I go over here to the right I have a tent let's say this is some type of openworld game and we have a quest active telling us to go to this tent we want to display an arrow in our UI showing the direction to the tent when the tent is offscreen and have it placed on top of the tent when it is on screen alright so let's start off by making our UI arrow let's go into the canvas in here and make a new game object name it window quest pointer let's expand it to occupy everything so there you go ok inside let's make another game object name it pointer let's add a image component and set the width and height to 60 and 60 and give it the arrow sprite so this is a sprite that won't be rotated and position pointing towards our tent alright so now let's make our script make a new csharp script and name it window quest pointer so in here let's make a member variable so a private vector3 target position and on our private boy away let's set the target position to our tenth position which in this case is set on 245 let's also grab a reference to the rect transform for our pointer pointer rect transform and let's grab it down here so now let's first just display the direction so we're going to go into our private void update and for direction we need the two positions so a vector 342 position which will be our target position and a vector 3 to our front position which we only use as the camera position so going to camera dot main transform dot position let's reset the front position that said to 0 and contantly the deer which is to minus from dot normalize alright so this is our direction vector now I'm going to go into using code monkey dog mutants which is always you can grab for free from unity code monkey calm and in here in the UTS class and here I have get angle from vector float which converts a vector three Direction into a angle so fold angle equals this and then I'm going to go into the pointer right transform and set the alert on humor angles to zero zero and tango alright let's test and we should see the arrow pointing towards our tent yep there it is the arrow seems to be pointing in that direction and if I move yep you can see that it's pointing down based on where the camera is okay great so now let's move the arrow towards the tenth position instead of being placed in a random position on the screen first of all let's test if the tent is on screen or not so in order to do that and let's make a vector3 for the target position screen point and it's going to be based on the camera dot main and do a worm to screen point of our target position which is a position on the world let's add a boolean for is a screen and essentially we can take the screen point and if the X is under zero then it's off screen to the left if the X is bigger than screamed out width then it's to the right if the Y is under zero then it's below and if the Y is bigger than screen dot height and it's above okay so just for testing let's do a debug log but is our screen and let's also display our screen point okay let's test okay you can see the log in there you can see that it's true that it is off screen and as I move that won't become false as I get yep there you go when it is on screen it's false once outside it's true because it is off screen okay good so now in here if it is off screen then we want to shift the arrow towards the edge of or screen so in here let's make a vector3 and call it a cap target screen position and it's going to be based on the targets screen position so in here on let's just cap it to make sure that it's always on the screen so if it's under zero let's set it to zero and so on all right so now we have a camp screen position we need to convert this into our UI position so in order to do that let's go up here make a private camera and come with the UI camera and we're going to make this a serialized film so we can set it in the editor so we're going to go into the UI camera dot screen world point of the cap target position and this will be a vector three for our pointer world position then I take the rect transform and set the position to this and just to make sure we don't have issues with that offsets being different between the cameras let's just set the local position to itself with an empty Z okay so let's test and the arrow should now be shifted towards the edge pointing towards the tent but it should never be offscreen alright there it is the arrow is on screen and it's correctly updating and pointing towards the tent there you go the tent should be right above me and when I move up yep there it is ok great so right now the arrow is hugging the edge of the screen so let's add a border to our arrow calculations so in here let's start off by making a float name it border size and give it a hundred F and in here on our calculation instead of being under zero we're going to test under the border size and when we're increasing it's the width minus the border size same thing for the height and apply to all the others okay so now the arrow should be pointing and moving but it should not hug the exact edge of our screen okay there it is it's pointing and as you can see it's not at the edge of the screen this way the arrow is much more visible yep there it is okay great so now that we have the arrow pointing let's turn the arrow into a cross when the 10th position is on our screen so in here this is the code if it is off screen and let's make our code when it is onscreen okay so in here let's place our pointer right transform on the target position which we're going to convert into a world position on this UI camera so copy this in there and just like that it should show up exactly on top of our 10 okay there it is there's the arrow you can see it as a border and when I get close it stays exactly on top okay great now let's change that sprite when it is on screen so in our code here and let's start off by making some serialize deals for a sprite for the arrows right another one for the cross sprite in here let's store a reference to our pointer image which is part of the Unity engine dot UI so go down here and grab the image component ok and down here if it is offscreen let's have the sprite to the arrow sprite if it is not offscreen so it is on screen let's display as a cross sprite okay all right there's the arrow pointing and when it gets onscreen it converts into a cross great now let's just remove the rotation from the cross and so that is probably not what you want to do so so in here and let's copy this into a different function so make private void and call it rotate pointer towards target position and we're going to call it only when it is offscreen when it is onscreen let's set the local Euler angles to vector 3.0 so there's the arrow and when Sun screen turns into a cross and back into the arrow begin to cross ok great it's no longer rotating exactly as we want now let's make our class able to receive a target instead of setting it up here on awake so let's make some show and hide functions down here let's first make the public void hi and on hide we're simply going to do game object that's a detective Falls and a public void show which you're going to set the active vacuum true so that it's visible and we're going to receive a vector3 for our target position up here let's remove this and call hide by default and down here let's set the this dot target position equals this target position all right so now in here let's make a script for our game handler that won't set the target that we want we can you see sharp script call it game Handler and here remove on this make a private void start and in here we're going to have a civilized film for a private window quest pointer window quest pointer and on start we're going to call the show function and we're going to give it the same as before okay so right now it should be working exactly the same as previously so there I am there's the arrow and when gets on screen it converts into a cross okay great everything is we're going to say now let's test swapping out the arrow during runtime so in here I'm going to go into the using the code monkey party tunes in order to create a function updater just so we can test this a function updater triggers a action every frame so this is the action and here let's make a in state set it to zero and here to a switch on our state and k zero we're simply going to test if camera dot main dot transform dots position do a vector3 dot distance towards our 245 and if that is under let's say fifty F then we're going to swap into the next one state equals one and let's show a different position so let's show position under down so let's a minus and Kaleigh state one we're going to test on this position and if it is let's just hide our pointer okay so we have in here just a basic state machine just so we can test if we can correctly swap our arrows during runtime so I'm creating a function of data which is going to trigger this function on every update and we're going to start off with a pointer towards this position we're going to test if we are near this position within 50 of this position if so let's swap the state to 1 and show an arrow on a different position so under down 1 then we're going to test again if we are close to that new position if so let's just hide and be done with it ok so let's test that behavior and make sure that everything is working correctly ok here I am the arrow is pointing in the exact same direction and as I get close boom there you go the arrow swamped position and now when I get close to that second position as soon as I get close the arrow should hide go and boom it's gone great yep there it is so there you have it we have created a UI arrow that we can use this point direction towards the position in our game you can use this to direct the player towards a target question location in the next video we're going to add support for multiple arrows as always you can download the project files and utilities from ent code monkey comp if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time
