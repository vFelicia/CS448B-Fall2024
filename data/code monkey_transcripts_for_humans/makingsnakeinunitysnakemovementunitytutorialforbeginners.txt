With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - man the series were making snake in
00:03 - unity in this video we're going to
00:05 - create our snake and handle movement
00:06 - let's begin
00:10 - so we previously did on the set up on
00:12 - our scene so we can now start to
00:14 - actually build something the game of
00:16 - snake is played on a grid so let's set
00:18 - up our snake to move on that grid now
00:20 - before we do that lets just resize our
00:22 - elements to make our grid a bit smaller
00:24 - which will make it easier to see in our
00:26 - game view so the snake is already
00:28 - correct it is currently occupying one
00:30 - unit or level area instead of making it
00:33 - 50 by 15 let's make it just 20 by 20 and
00:40 - just like that our scene is now a bit
00:42 - smaller which will make it easier and
00:43 - more simple so let's begin by making a
00:46 - new class to handle our snake so get
00:48 - into the scripts folder and create a new
00:51 - C sharp script and name it snake
00:53 - okay so again the game is played on a
00:55 - grid now in here for our snake to move
00:57 - along the grid we need to first know
00:59 - where it actually is so we need to store
01:03 - a x and y position
01:04 - so let's store a private we want to
01:07 - store a grid position and we're going to
01:09 - use a vector to int call it grid
01:12 - position a vector to end is exactly like
01:15 - a vector - except it uses ends instead
01:17 - of float which is perfect for a grid
01:19 - position so now in here let's do a
01:22 - private weight awake and on the weight
01:25 - let's initialize the grid position let's
01:29 - put it in the middle of the grid so on
01:31 - 10/10 ok and now on our private Lloyd
01:36 - update let's actually move the transform
01:38 - to the correct location based on the
01:40 - grid position since we set the grid to
01:42 - have a size of 1 the transform position
01:44 - will perfectly match our grid position
01:46 - so in here we simply do so just like
01:52 - that we are positioning our snake
01:53 - correctly ok so let's go back into the
01:55 - editor and now let's drag our script
01:58 - onto our snake game object and let's run
02:00 - the code and see if our snake appears
02:02 - right in the middle of our level if
02:04 - there it is there's the snake right in
02:05 - the middle ok great
02:06 - now back to the code let's add the
02:09 - ability to move our snake using the
02:11 - keyboard so on our update before we set
02:14 - its position
02:15 - let's do way if input dot get keydown
02:20 - of Kiko dot up arrow
02:23 - so this returns true on the frame when
02:25 - we press our up arrow so if we press up
02:28 - we simply change the grid position dot y
02:32 - and the y increases as you go up
02:35 - so we similarly increase it by one so a
02:38 - TFR snake moves up when we press the up
02:40 - arrow there it is in the middle and if I
02:42 - press up yep there you go it increased
02:44 - by one position on the grid okay let's
02:48 - add only other directions okay there it
02:56 - is I can move up
02:57 - I can move left right and now okay so we
03:00 - got all movement directions currently
03:01 - working now in the actual game of snake
03:04 - the movement is automatic and not when
03:06 - you press keys so let's deal with that
03:08 - essentially we want the grid position to
03:11 - change automatically every certain
03:12 - amount of time so to do that let's
03:15 - create a variable to count the time so
03:17 - we define a private float and we're
03:19 - going to call this the grid move timer
03:21 - this will contain the time remaining
03:24 - until the next movement and let's also
03:26 - define a variable to whom the time
03:28 - between moves so a private low-bred move
03:31 - timer max this will contain the amount
03:33 - of time between moves so here on our
03:35 - wake we set the grid move timer max to
03:38 - be at 1m so we want our snake to move on
03:42 - all the grid every one second and we set
03:44 - the grid move timer to be the grid love
03:47 - Tamra map so every second our snake will
03:50 - move on the grid so on the update let's
03:53 - increase the grid move timer by
03:55 - time.deltatime
03:57 - timed adult time contains the amount of
03:59 - time that has elapsed since the last
04:01 - update so after we increase it we want
04:04 - to test if grid move
04:06 - timer if it is bigger than grid move
04:08 - Tamra max if it isn't it has been one
04:12 - second since the last time we moved so
04:14 - we want to move again so now obviously
04:16 - we need to know where exactly we're
04:18 - going to move it towards which means we
04:20 - need a variable to store the move
04:21 - direction so let's go all the way up
04:23 - here make a new private again a vector
04:26 - to int this will be the grid move the
04:29 - right
04:31 - now unawakened let's set it a default
04:34 - two one zero
04:36 - so by default our snake won't be moving
04:38 - to the right and I'll update when we are
04:40 - inside here we're going to increase the
04:43 - grid position by the grid move direction
04:47 - and obviously after we move we need to
04:50 - reset the move time so we take the move
04:52 - timer and we reduce it by the grid move
04:55 - time or max so the code in here will run
04:58 - exactly once per second all right so
05:00 - let's test and see if our snake is
05:02 - indeed moving to the right every second
05:03 - okay there's a snake and yep moving to
05:06 - the right to the right to the right
05:07 - every second okay great now let's apply
05:10 - this to our keyboard input which again
05:12 - we are not directly modifying the grid
05:14 - position but rather in here we are
05:16 - setting the grid move direction so if I
05:19 - press up I set the grid move direction
05:21 - that Y to b1 and on the X to be zero so
05:27 - let's do the same for all the others
05:37 - okay so all the directions are set up
05:40 - when we press the up arrow we modified
05:42 - the move direction we set the x on the
05:44 - zero since we are moving up and we set
05:46 - the Y to pause one same thing for all
05:49 - the others so let's see okay there's a
05:51 - snake moving to the right now if I press
05:53 - up yep there you go he's now moving up
05:55 - now I press left and now he's moving to
05:58 - the left so as you can see by pressing
06:00 - the keyboard keys I can now change the
06:02 - direction that the snake is moving now
06:04 - there's still one thing which is
06:06 - different from the game which is we can
06:07 - go back to where we came from so here
06:09 - I'm going up now I press down and you
06:11 - can see that I can go down this is not
06:13 - intended so let's fix it so here on the
06:15 - update after we test for the input we're
06:18 - only going to modify our direction if we
06:20 - can actually modify our direction so in
06:23 - here for example when pressing up we can
06:25 - only go up if we are not currently going
06:28 - down so in here we check if the grid
06:31 - move direction if it's different from
06:34 - minus one then we are not going down if
06:36 - we are going down then we cannot go
06:38 - directly up the same thing on the down
06:41 - arrow
06:42 - we can only go down if we are not
06:44 - currently going up so let's apply this
06:46 - to the rest okay so let's see there's a
06:53 - snake going to the right press up and
06:56 - now it's going up pressing left and it's
06:57 - going to live now if I press right and
07:00 - if nothing happens because I cannot go
07:01 - right but I can't go down and now if I
07:03 - press up yep I cannot go directly up I
07:06 - have to go first to the right and then I
07:08 - can go up okay
07:08 - great alright so now that we have our
07:11 - basic movement set up let's clean this
07:13 - code a bit we're going to put all the
07:15 - input code in its own function so in
07:17 - here make a private void handle input
07:21 - we're going to copy all of our input
07:24 - code in there and on update we call that
07:26 - function and then let's also copy this
07:28 - code into a private void handle grid
07:33 - movement and call this in here and let's
07:37 - also copy the transform that position
07:39 - and put it on the grid movement okay so
07:46 - here on our update we are first handling
07:48 - our input which checks for all the
07:50 - keyboard inputs and then we do the
07:52 - handle grid movement which does the time
07:54 - check and then finally move Z transform
07:56 - now in here the one issue we still have
07:59 - is our sprite is not currently being
08:01 - rotated so our snake is always pointing
08:03 - up despite the direction that it's going
08:05 - so in here when we move we want to also
08:07 - rotate it to face the great move
08:09 - direction so here's a function that
08:11 - takes a vector to int and returns a
08:14 - float it's only does a math to get the
08:17 - angle and here when working in 2d you
08:19 - can see our rotation here these are our
08:21 - Euler angles and in 2d the only one we
08:24 - modify is the Z so in here we modify the
08:28 - transform dot humor angles make a new
08:31 - vector3 around 0 0 and then we modify
08:33 - the z and for these add let's get the
08:35 - angle from the vector and give our print
08:38 - move direction and just like that it
08:40 - should be working the one issue is the
08:43 - sprite is drawn facing upwards whereas
08:45 - in unity a zero is facing to the right
08:48 - so if you run the code you can see
08:50 - pointing to the right and it's pointing
08:51 - up and
08:53 - and they're in there so let's simply
08:54 - change that we could redraw the sprite
08:57 - or simply change in here and do this and
09:00 - just like that point to the right now I
09:02 - move up and now the snake is pointing up
09:04 - and pointing to the left and down and
09:06 - again if it's moving down
09:07 - I cannot go straight up and if I'm going
09:09 - straight to the left
09:10 - I cannot go straight right but I can
09:12 - move in every direction so there you
09:14 - have it
09:15 - we took our starting scene and began
09:16 - creating our game we set up the snake
09:19 - along with input controls and movement
09:21 - according to our game design in the next
09:22 - video we're going to spawn some food and
09:24 - add the ability for the snake to eat it
09:26 - as always you can download the project
09:28 - files in utilities from me in Tacoma
09:30 - keep calm if you have any questions post
09:32 - them in the comments and I'll do my best
09:33 - answer them subscribe for more videos
09:35 - and I'll see you next time
09:46 - you

Cleaned transcript:

hello and welcome I'm your code monkey man the series were making snake in unity in this video we're going to create our snake and handle movement let's begin so we previously did on the set up on our scene so we can now start to actually build something the game of snake is played on a grid so let's set up our snake to move on that grid now before we do that lets just resize our elements to make our grid a bit smaller which will make it easier to see in our game view so the snake is already correct it is currently occupying one unit or level area instead of making it 50 by 15 let's make it just 20 by 20 and just like that our scene is now a bit smaller which will make it easier and more simple so let's begin by making a new class to handle our snake so get into the scripts folder and create a new C sharp script and name it snake okay so again the game is played on a grid now in here for our snake to move along the grid we need to first know where it actually is so we need to store a x and y position so let's store a private we want to store a grid position and we're going to use a vector to int call it grid position a vector to end is exactly like a vector except it uses ends instead of float which is perfect for a grid position so now in here let's do a private weight awake and on the weight let's initialize the grid position let's put it in the middle of the grid so on 10/10 ok and now on our private Lloyd update let's actually move the transform to the correct location based on the grid position since we set the grid to have a size of 1 the transform position will perfectly match our grid position so in here we simply do so just like that we are positioning our snake correctly ok so let's go back into the editor and now let's drag our script onto our snake game object and let's run the code and see if our snake appears right in the middle of our level if there it is there's the snake right in the middle ok great now back to the code let's add the ability to move our snake using the keyboard so on our update before we set its position let's do way if input dot get keydown of Kiko dot up arrow so this returns true on the frame when we press our up arrow so if we press up we simply change the grid position dot y and the y increases as you go up so we similarly increase it by one so a TFR snake moves up when we press the up arrow there it is in the middle and if I press up yep there you go it increased by one position on the grid okay let's add only other directions okay there it is I can move up I can move left right and now okay so we got all movement directions currently working now in the actual game of snake the movement is automatic and not when you press keys so let's deal with that essentially we want the grid position to change automatically every certain amount of time so to do that let's create a variable to count the time so we define a private float and we're going to call this the grid move timer this will contain the time remaining until the next movement and let's also define a variable to whom the time between moves so a private lowbred move timer max this will contain the amount of time between moves so here on our wake we set the grid move timer max to be at 1m so we want our snake to move on all the grid every one second and we set the grid move timer to be the grid love Tamra map so every second our snake will move on the grid so on the update let's increase the grid move timer by time.deltatime timed adult time contains the amount of time that has elapsed since the last update so after we increase it we want to test if grid move timer if it is bigger than grid move Tamra max if it isn't it has been one second since the last time we moved so we want to move again so now obviously we need to know where exactly we're going to move it towards which means we need a variable to store the move direction so let's go all the way up here make a new private again a vector to int this will be the grid move the right now unawakened let's set it a default two one zero so by default our snake won't be moving to the right and I'll update when we are inside here we're going to increase the grid position by the grid move direction and obviously after we move we need to reset the move time so we take the move timer and we reduce it by the grid move time or max so the code in here will run exactly once per second all right so let's test and see if our snake is indeed moving to the right every second okay there's a snake and yep moving to the right to the right to the right every second okay great now let's apply this to our keyboard input which again we are not directly modifying the grid position but rather in here we are setting the grid move direction so if I press up I set the grid move direction that Y to b1 and on the X to be zero so let's do the same for all the others okay so all the directions are set up when we press the up arrow we modified the move direction we set the x on the zero since we are moving up and we set the Y to pause one same thing for all the others so let's see okay there's a snake moving to the right now if I press up yep there you go he's now moving up now I press left and now he's moving to the left so as you can see by pressing the keyboard keys I can now change the direction that the snake is moving now there's still one thing which is different from the game which is we can go back to where we came from so here I'm going up now I press down and you can see that I can go down this is not intended so let's fix it so here on the update after we test for the input we're only going to modify our direction if we can actually modify our direction so in here for example when pressing up we can only go up if we are not currently going down so in here we check if the grid move direction if it's different from minus one then we are not going down if we are going down then we cannot go directly up the same thing on the down arrow we can only go down if we are not currently going up so let's apply this to the rest okay so let's see there's a snake going to the right press up and now it's going up pressing left and it's going to live now if I press right and if nothing happens because I cannot go right but I can't go down and now if I press up yep I cannot go directly up I have to go first to the right and then I can go up okay great alright so now that we have our basic movement set up let's clean this code a bit we're going to put all the input code in its own function so in here make a private void handle input we're going to copy all of our input code in there and on update we call that function and then let's also copy this code into a private void handle grid movement and call this in here and let's also copy the transform that position and put it on the grid movement okay so here on our update we are first handling our input which checks for all the keyboard inputs and then we do the handle grid movement which does the time check and then finally move Z transform now in here the one issue we still have is our sprite is not currently being rotated so our snake is always pointing up despite the direction that it's going so in here when we move we want to also rotate it to face the great move direction so here's a function that takes a vector to int and returns a float it's only does a math to get the angle and here when working in 2d you can see our rotation here these are our Euler angles and in 2d the only one we modify is the Z so in here we modify the transform dot humor angles make a new vector3 around 0 0 and then we modify the z and for these add let's get the angle from the vector and give our print move direction and just like that it should be working the one issue is the sprite is drawn facing upwards whereas in unity a zero is facing to the right so if you run the code you can see pointing to the right and it's pointing up and and they're in there so let's simply change that we could redraw the sprite or simply change in here and do this and just like that point to the right now I move up and now the snake is pointing up and pointing to the left and down and again if it's moving down I cannot go straight up and if I'm going straight to the left I cannot go straight right but I can move in every direction so there you have it we took our starting scene and began creating our game we set up the snake along with input controls and movement according to our game design in the next video we're going to spawn some food and add the ability for the snake to eat it as always you can download the project files in utilities from me in Tacoma keep calm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time you
