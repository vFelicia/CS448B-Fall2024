With timestamps:

00:00 - in this video we're going to look at how
00:01 - layers and bit masks work how they're
00:04 - relevant to physics and cameras and how
00:06 - to use them we're also going to look at
00:08 - the user-friendly version that is the
00:09 - layer mask let's begin
00:14 - [Music]
00:18 - hello and welcome I'm your code monkey
00:21 - and this channel is all about helping
00:22 - you will learn how to make your own
00:23 - games with in-depth tutorials made by a
00:25 - professional indie game developer so if
00:27 - you find the video helpful consider
00:29 - subscribing okay so here's what we want
00:31 - to learn in this video I have this nice
00:33 - character here that I can move him
00:35 - around and as you can see he is pointing
00:36 - towards the in Mouse position if I click
00:39 - I can shoot and over here on the floor
00:41 - you can see some debris and if I move
00:43 - towards it you can see that I can push
00:44 - it around okay then over here there's a
00:47 - crate which acts like a solid object so
00:49 - I cannot go through it
00:50 - and if I should you can see that my
00:53 - shooting interacts with the crate
00:54 - however in here in the debris my
00:56 - shooting goes past the debris since it
00:58 - is on the floor and then in here I have
01:01 - a nice teammate and in front of him a
01:03 - zombie and if I shoot there you go I
01:06 - don't want my game to have friendly fire
01:08 - so my shooting is correctly ignoring him
01:10 - and only hitting the zombie alright so
01:13 - these are all the interactions that we
01:14 - want to make so let's learn about layers
01:17 - physics bit masks and layer masks so
01:20 - game objects are placed in layers and
01:23 - that impacts various systems in unity
01:25 - over here I have the player game object
01:27 - and if we go here in the inspector you
01:30 - can see that it is currently on the
01:31 - layer player if I click on the drop down
01:34 - you can see all the layers that are
01:35 - defined in this project layers are used
01:38 - for many things like for example for
01:39 - camera rendering soon here I have my
01:42 - main camera and in here you can see the
01:45 - culling mask and if we click it we can
01:47 - see all the layers that the camera is
01:48 - currently rendered so right now it's
01:51 - rendering everything as you can see over
01:52 - here my player D friendly the enemy the
01:55 - crate and debris and if I go here and I
01:58 - untape the player there give another
02:00 - player he's still there but he's now
02:02 - completely invisible so the camera no
02:04 - longer renders anything that is on the
02:05 - layer called player so with this you
02:07 - could have for example different cameras
02:09 - rendering different objects and doing
02:11 - some sort of post-processing or catching
02:13 - a screenshot without a background so
02:15 - that's one of the possible uses for
02:17 - layers another one that is very
02:19 - important is when dealing with physics
02:21 - so we're here I have this great object
02:24 - and if we inspect we can see that this
02:26 - one is on the layer objects and here if
02:29 - I move my play
02:30 - which is using the physics system and I
02:32 - try to move and there you go I cannot go
02:34 - through the box however I can go into
02:38 - edit project settings and over here is
02:41 - the physics 2d and in here you can see a
02:44 - very nice layer collision matrix so this
02:46 - is what the finds if a specific layer
02:48 - interacts with another layer so in this
02:50 - case let's go down here and locate the
02:52 - player and then in here and locate the
02:55 - objects and now one take and let's say
02:57 - that the player and the objects should
02:59 - not come on so let's see that Here I am
03:02 - and I move any of their yo now I can go
03:04 - straight through the box so with this
03:08 - you can customize layer of physics
03:09 - interactions as much as you need right
03:11 - awesome so that's the basics of layers
03:14 - now let's see how we can interact with
03:16 - them through code over here is my player
03:19 - script how it works isn't relevant to
03:21 - this video but it's relatively simple
03:23 - all that matters is over here an update
03:26 - function and all its doing is handling
03:29 - the movement and the shooting so here
03:31 - you can see when I press the left mouse
03:33 - button down I play the shooting
03:35 - animation and I do some effects so I see
03:38 - that so here I am and I press an yup
03:40 - there you go there's my player shooting
03:42 - now in here let's try to shoot the crate
03:44 - and there yo I'm shooting right over the
03:46 - crate the reason is because we're not
03:48 - doing any ray casts we're just showing
03:50 - the sprite directly towards the mouse
03:52 - position however we do want our bolts to
03:55 - hit something so let's deal with that
03:56 - over here in the shooting code let's do
03:59 - a nice spray cast so ray cast we go into
04:02 - the physics 2d and we simply call ray
04:05 - cast this one takes an origin so let's
04:08 - use the gun endpoint position then takes
04:12 - the direction so let's use the aim
04:13 - direction and finally takes a distance
04:16 - so here on which calculate the distance
04:19 - between the gun endpoint position and
04:23 - the target position alright so here we
04:26 - have our recast being done and this one
04:29 - returns a ray cast hit 2d which contains
04:32 - information on what happened with the
04:34 - right so one of the things that it
04:37 - contains is the ray casted 2d we can
04:40 - check if it has a compiler
04:42 - so if the colonizer is not known then
04:44 - that means that we hit something and if
04:47 - it is known then we hit nothing so if we
04:49 - did collide into something let's make
04:51 - sure we modify our target position to
04:53 - match where it actually hits them so we
04:55 - set the target position to be on where
04:58 - we hit so on the rake has hit and we can
05:01 - use the point this contains the point on
05:03 - the collider that the rake has hit all
05:05 - right so just like this we should be
05:07 - able to see our shooting correctly hit
05:10 - the crate let's see okay here we are now
05:13 - she's normal yep stonework should the
05:15 - crate any of there you go as you can see
05:17 - I cannot shoot past the crate if I click
05:20 - behind the crate there you go all in
05:21 - there down here you know goes and hit
05:23 - okay awesome
05:24 - however you can already see an issue
05:26 - which is yeah it works right on the
05:29 - crate but over here I have some debris
05:31 - and the goal is just to step on it and
05:33 - push it away what if I shoot and there
05:35 - you go they are acting as hit boxes as
05:37 - well
05:37 - now the Brie are meant to be on the
05:39 - ground so they're just visual so that I
05:41 - can push them and the bullets are meant
05:43 - to go past them so this is where only
05:45 - your interactions come in we want to be
05:47 - able to hit the crate since it is a high
05:49 - object but the debris on the floor we
05:51 - want to be able to shoot over it
05:53 - over here you can see the layers aren't
05:54 - really nicely set up so the creighton
05:56 - here is on the objects layer but the
05:59 - debris is on the either Brina layer so
06:01 - we want our ray cast to hit things on
06:03 - the object layer but ignore the ground
06:04 - debris layer now back in the code in
06:07 - order to do that we can go here inspect
06:09 - the other versions of the raycast and
06:11 - there yo one of them takes a layer mask
06:13 - so this is what we need to use in order
06:16 - to identify which layers we should
06:18 - collide with and now in here there are
06:20 - two ways we can do this one is very
06:22 - simple and editor based and another is
06:24 - more complex and code based so let's
06:26 - start with the simple all the way up
06:29 - here let's define a serum ice field and
06:32 - this will be of type layer mask and
06:36 - let's call it a layer mask so this is
06:40 - the default unity stroke that already
06:42 - contains a default editor script so we
06:44 - can go back to the editor and in here on
06:47 - the player script we can see right here
06:48 - the in layer mask and if we click there
06:51 - you go we have a nice drop-down where we
06:52 - can select a bunch of layers so here we
06:55 - can someone
06:56 - just like we did for the camera so in
06:58 - this case let's hit everything except
07:00 - the debris layer alright that should do
07:03 - it
07:03 - let's test ok here we are now let's
07:05 - click and okay shooting normally still
07:07 - works click on the crate and yep I'm
07:10 - hitting the crate and out debris any of
07:12 - there you go I am shooting over the
07:13 - debris so there you go I can push it
07:15 - around
07:15 - I can shoot over it and it hits on the
07:17 - crate and if we pause we can go here and
07:21 - modify it now let's say hit the debris
07:23 - but do not hit the objects and we see
07:26 - and there you go the debris is hitting
07:28 - and the objects are going past right
07:30 - awesome so here you can see how the own
07:33 - layer mask is extremely useful for
07:34 - easily setting the layers that you want
07:36 - to test however it definitely helps to
07:39 - understand what sort of magic is
07:40 - happening behind here now the way it
07:42 - works is with what is called a bit mask
07:45 - so essentially this layer mask gets
07:47 - converted into an int you can see here
07:49 - on this function that indeed we require
07:51 - an int now an int as you may know is
07:53 - made up of four bytes
07:55 - which equals 32 bits and if we go here
07:58 - onto the layer inspector you can see
08:00 - it's not a coincidence that we have
08:02 - exactly 32 layers so this is the reason
08:05 - why an int as 32 bits which means 32
08:09 - ones and zeros and the math simply set
08:11 - certain bits to one and leaves the
08:13 - others at zero
08:14 - so over here we can add a nice debug log
08:17 - to see the binary representation of our
08:19 - current layer mask so we do a debug down
08:22 - log so let's visualize the own layer
08:29 - mask in binary and there it is exam like
08:32 - that you can see only one bit is set to
08:34 - one and that is the objects layer so we
08:36 - can count it from the right so 0 1 2 3 4
08:39 - 5 6 7 8 9 and if we pause and go in here
08:43 - there go our objects are need only or
08:45 - not so you can see exactly how a layer
08:48 - mask works behind the scenes so now that
08:50 - we know how they work let's see how we
08:52 - can do them manually now the way we're
08:54 - going to do it is by using the bitwise
08:56 - operators you have or and not exclusive
09:01 - or and shared these allow us to do logic
09:04 - working with the underlying bits so in
09:06 - this case let's define an int for a bit
09:08 - man
09:09 - and the easiest way to collide with a
09:11 - single layer is we take the value 1 and
09:14 - we shift it to the left by the number of
09:17 - the layer so our objects were on layer 9
09:20 - so we shift to the left by nine okay so
09:23 - let's test this and use it in here okay
09:25 - let's see and here you can see the in
09:27 - layer mask is indeed correct exactly as
09:29 - previously and if we shoot we can shoot
09:31 - past that and we hit on the quick right
09:34 - awesome now let's set up the bit mask to
09:36 - hit both the crate and eat debris so in
09:39 - here you can see the crate is on layer 9
09:40 - debris is on layer 10 so in here the way
09:43 - that we hit multiple layers is by doing
09:46 - an or so we shift the one by 9 or we
09:52 - shift the one by 10 so if you know how
09:56 - binary works or just basic logic gates
09:58 - you know that an or won't return a one
10:00 - if either position is one so that means
10:03 - that using a 1 we are essentially adding
10:05 - to our bit mask so we're going to have a
10:07 - 1 on the position 9 and 1 on the
10:09 - position 10 let's see ok so here it is
10:12 - and you can see indeed we have two ones
10:14 - example like that so we can shoot and
10:16 - hit the crate and shoot and hit the
10:18 - debris all right awesome so now let's
10:20 - see how we can make shooting everything
10:22 - except the crate and debris so the way
10:25 - that we do that is by using the nut
10:28 - bitwise operator which is a tilde so
10:30 - what essentially this does is flip all
10:32 - the bits so we're first going to do what
10:34 - we were doing previously which is the
10:37 - objects layer or the debris layer and
10:39 - then we are simply inverting the whole
10:41 - thing so we should be able to see our
10:43 - bit mask form of ones except for two
10:45 - zeros let's see and there it is exactly
10:49 - as intended we have everything for ones
10:51 - except those two zeros so we are not
10:53 - going to hit the crate not going to hit
10:55 - debris but we are going to hit our
10:56 - teammate and also our zombie all right
11:00 - great so this is pretty much how you
11:02 - create layer masks using bitwise
11:04 - operators so now that you understand
11:06 - this you should be able to understand
11:08 - how the only your mask works behind the
11:09 - scenes as always it's programming there
11:11 - is no magic involved everything has a
11:13 - logic to it now in here let's define our
11:16 - rooms
11:22 - so in here I have to find it in order to
11:24 - hit everything except on the debris
11:26 - later so let's see and here it is and if
11:30 - I shoot yep I'm hitting the crate okay
11:32 - everything's good now on debris and yep
11:35 - I'm shooting over the debris so I can
11:37 - push for the debris and hits the crate
11:40 - okay great
11:40 - however we have one issue over here I
11:43 - have my teammate and I don't actually
11:45 - want to have friendly fire however if I
11:47 - click yep there you go my poor teammate
11:49 - is getting hit before I can hit the
11:51 - zombie so for our rules we want to hit
11:54 - the crate but not to debris and the
11:57 - enemy but not be friendly so we're here
11:59 - we have our layers so we want to hit
12:01 - layer 9 the objects but not hit layer 10
12:05 - which is the Bree and then we want to
12:07 - hit layer 12 which is the enemy but not
12:09 - differently which is 11 so here we want
12:16 - to make sure that our recast hits
12:17 - everything except on the debris layer
12:19 - and the friendly layer so let's try
12:21 - doing this using the and bitwise
12:23 - operation so let's first start off by
12:26 - hitting everything except on the debris
12:27 - layer so we do one shifted by the brain
12:30 - layer and we invert this alright so here
12:34 - we have a bit mask with one on
12:37 - everywhere except on the debris layer
12:39 - and now we also want to not hit on
12:41 - different layer so we use the end and
12:44 - again we do the same thing we invert a1
12:47 - shifted by the friendly layer so when
12:53 - doing an end as you know it only returns
12:55 - one if both are one so we're either one
12:58 - is zero they won't have 0 all right so
13:02 - let's see if this is working we should
13:04 - be able to hit everything except the
13:05 - debris layer and the friendly layer ok
13:08 - here we are moving on let's see the
13:09 - crate yep we are correctly hitting the
13:11 - crate let's see the debris and we are
13:13 - correctly going above the debris all
13:15 - right and we getting so push great and
13:17 - on let's see here if we're going to
13:19 - shoot our friendly or the enemy and
13:20 - click and there you go we are now
13:22 - hitting the enemy and our shooting is
13:25 - ignoring our friendly right awesome so
13:28 - here we have all our room set up now
13:31 - again let's just use the
13:32 - Unity provide molar mass to achieve the
13:34 - same result so here on the player on
13:36 - layer mask let's make sure that we hit
13:38 - everything except on to the brain and
13:41 - except on the friendly so here's our own
13:43 - layer mask and let's see and yep we can
13:46 - shoot the crate yup we shoot above it
13:48 - and let's see here my friendly and there
13:50 - you go I can shoot Class D friendly so
13:52 - just like that all of our rooms are
13:54 - correctly working so the owner masks are
13:57 - really easy to use and now you know how
13:59 - they work behind the scenes with
14:01 - knowledge of layers layer masks and bit
14:03 - masks you can now play around and meet
14:05 - some really interesting physics
14:06 - interactions or really cool effects
14:08 - using cameras and separate layers as
14:10 - always you can download the project
14:11 - files in utilities from in Tacoma comm
14:14 - subscribe the channel for more unity to
14:16 - terms post any questions you have in the
14:17 - comments and I'll see you next time
14:21 - [Music]

Cleaned transcript:

in this video we're going to look at how layers and bit masks work how they're relevant to physics and cameras and how to use them we're also going to look at the userfriendly version that is the layer mask let's begin hello and welcome I'm your code monkey and this channel is all about helping you will learn how to make your own games with indepth tutorials made by a professional indie game developer so if you find the video helpful consider subscribing okay so here's what we want to learn in this video I have this nice character here that I can move him around and as you can see he is pointing towards the in Mouse position if I click I can shoot and over here on the floor you can see some debris and if I move towards it you can see that I can push it around okay then over here there's a crate which acts like a solid object so I cannot go through it and if I should you can see that my shooting interacts with the crate however in here in the debris my shooting goes past the debris since it is on the floor and then in here I have a nice teammate and in front of him a zombie and if I shoot there you go I don't want my game to have friendly fire so my shooting is correctly ignoring him and only hitting the zombie alright so these are all the interactions that we want to make so let's learn about layers physics bit masks and layer masks so game objects are placed in layers and that impacts various systems in unity over here I have the player game object and if we go here in the inspector you can see that it is currently on the layer player if I click on the drop down you can see all the layers that are defined in this project layers are used for many things like for example for camera rendering soon here I have my main camera and in here you can see the culling mask and if we click it we can see all the layers that the camera is currently rendered so right now it's rendering everything as you can see over here my player D friendly the enemy the crate and debris and if I go here and I untape the player there give another player he's still there but he's now completely invisible so the camera no longer renders anything that is on the layer called player so with this you could have for example different cameras rendering different objects and doing some sort of postprocessing or catching a screenshot without a background so that's one of the possible uses for layers another one that is very important is when dealing with physics so we're here I have this great object and if we inspect we can see that this one is on the layer objects and here if I move my play which is using the physics system and I try to move and there you go I cannot go through the box however I can go into edit project settings and over here is the physics 2d and in here you can see a very nice layer collision matrix so this is what the finds if a specific layer interacts with another layer so in this case let's go down here and locate the player and then in here and locate the objects and now one take and let's say that the player and the objects should not come on so let's see that Here I am and I move any of their yo now I can go straight through the box so with this you can customize layer of physics interactions as much as you need right awesome so that's the basics of layers now let's see how we can interact with them through code over here is my player script how it works isn't relevant to this video but it's relatively simple all that matters is over here an update function and all its doing is handling the movement and the shooting so here you can see when I press the left mouse button down I play the shooting animation and I do some effects so I see that so here I am and I press an yup there you go there's my player shooting now in here let's try to shoot the crate and there yo I'm shooting right over the crate the reason is because we're not doing any ray casts we're just showing the sprite directly towards the mouse position however we do want our bolts to hit something so let's deal with that over here in the shooting code let's do a nice spray cast so ray cast we go into the physics 2d and we simply call ray cast this one takes an origin so let's use the gun endpoint position then takes the direction so let's use the aim direction and finally takes a distance so here on which calculate the distance between the gun endpoint position and the target position alright so here we have our recast being done and this one returns a ray cast hit 2d which contains information on what happened with the right so one of the things that it contains is the ray casted 2d we can check if it has a compiler so if the colonizer is not known then that means that we hit something and if it is known then we hit nothing so if we did collide into something let's make sure we modify our target position to match where it actually hits them so we set the target position to be on where we hit so on the rake has hit and we can use the point this contains the point on the collider that the rake has hit all right so just like this we should be able to see our shooting correctly hit the crate let's see okay here we are now she's normal yep stonework should the crate any of there you go as you can see I cannot shoot past the crate if I click behind the crate there you go all in there down here you know goes and hit okay awesome however you can already see an issue which is yeah it works right on the crate but over here I have some debris and the goal is just to step on it and push it away what if I shoot and there you go they are acting as hit boxes as well now the Brie are meant to be on the ground so they're just visual so that I can push them and the bullets are meant to go past them so this is where only your interactions come in we want to be able to hit the crate since it is a high object but the debris on the floor we want to be able to shoot over it over here you can see the layers aren't really nicely set up so the creighton here is on the objects layer but the debris is on the either Brina layer so we want our ray cast to hit things on the object layer but ignore the ground debris layer now back in the code in order to do that we can go here inspect the other versions of the raycast and there yo one of them takes a layer mask so this is what we need to use in order to identify which layers we should collide with and now in here there are two ways we can do this one is very simple and editor based and another is more complex and code based so let's start with the simple all the way up here let's define a serum ice field and this will be of type layer mask and let's call it a layer mask so this is the default unity stroke that already contains a default editor script so we can go back to the editor and in here on the player script we can see right here the in layer mask and if we click there you go we have a nice dropdown where we can select a bunch of layers so here we can someone just like we did for the camera so in this case let's hit everything except the debris layer alright that should do it let's test ok here we are now let's click and okay shooting normally still works click on the crate and yep I'm hitting the crate and out debris any of there you go I am shooting over the debris so there you go I can push it around I can shoot over it and it hits on the crate and if we pause we can go here and modify it now let's say hit the debris but do not hit the objects and we see and there you go the debris is hitting and the objects are going past right awesome so here you can see how the own layer mask is extremely useful for easily setting the layers that you want to test however it definitely helps to understand what sort of magic is happening behind here now the way it works is with what is called a bit mask so essentially this layer mask gets converted into an int you can see here on this function that indeed we require an int now an int as you may know is made up of four bytes which equals 32 bits and if we go here onto the layer inspector you can see it's not a coincidence that we have exactly 32 layers so this is the reason why an int as 32 bits which means 32 ones and zeros and the math simply set certain bits to one and leaves the others at zero so over here we can add a nice debug log to see the binary representation of our current layer mask so we do a debug down log so let's visualize the own layer mask in binary and there it is exam like that you can see only one bit is set to one and that is the objects layer so we can count it from the right so 0 1 2 3 4 5 6 7 8 9 and if we pause and go in here there go our objects are need only or not so you can see exactly how a layer mask works behind the scenes so now that we know how they work let's see how we can do them manually now the way we're going to do it is by using the bitwise operators you have or and not exclusive or and shared these allow us to do logic working with the underlying bits so in this case let's define an int for a bit man and the easiest way to collide with a single layer is we take the value 1 and we shift it to the left by the number of the layer so our objects were on layer 9 so we shift to the left by nine okay so let's test this and use it in here okay let's see and here you can see the in layer mask is indeed correct exactly as previously and if we shoot we can shoot past that and we hit on the quick right awesome now let's set up the bit mask to hit both the crate and eat debris so in here you can see the crate is on layer 9 debris is on layer 10 so in here the way that we hit multiple layers is by doing an or so we shift the one by 9 or we shift the one by 10 so if you know how binary works or just basic logic gates you know that an or won't return a one if either position is one so that means that using a 1 we are essentially adding to our bit mask so we're going to have a 1 on the position 9 and 1 on the position 10 let's see ok so here it is and you can see indeed we have two ones example like that so we can shoot and hit the crate and shoot and hit the debris all right awesome so now let's see how we can make shooting everything except the crate and debris so the way that we do that is by using the nut bitwise operator which is a tilde so what essentially this does is flip all the bits so we're first going to do what we were doing previously which is the objects layer or the debris layer and then we are simply inverting the whole thing so we should be able to see our bit mask form of ones except for two zeros let's see and there it is exactly as intended we have everything for ones except those two zeros so we are not going to hit the crate not going to hit debris but we are going to hit our teammate and also our zombie all right great so this is pretty much how you create layer masks using bitwise operators so now that you understand this you should be able to understand how the only your mask works behind the scenes as always it's programming there is no magic involved everything has a logic to it now in here let's define our rooms so in here I have to find it in order to hit everything except on the debris later so let's see and here it is and if I shoot yep I'm hitting the crate okay everything's good now on debris and yep I'm shooting over the debris so I can push for the debris and hits the crate okay great however we have one issue over here I have my teammate and I don't actually want to have friendly fire however if I click yep there you go my poor teammate is getting hit before I can hit the zombie so for our rules we want to hit the crate but not to debris and the enemy but not be friendly so we're here we have our layers so we want to hit layer 9 the objects but not hit layer 10 which is the Bree and then we want to hit layer 12 which is the enemy but not differently which is 11 so here we want to make sure that our recast hits everything except on the debris layer and the friendly layer so let's try doing this using the and bitwise operation so let's first start off by hitting everything except on the debris layer so we do one shifted by the brain layer and we invert this alright so here we have a bit mask with one on everywhere except on the debris layer and now we also want to not hit on different layer so we use the end and again we do the same thing we invert a1 shifted by the friendly layer so when doing an end as you know it only returns one if both are one so we're either one is zero they won't have 0 all right so let's see if this is working we should be able to hit everything except the debris layer and the friendly layer ok here we are moving on let's see the crate yep we are correctly hitting the crate let's see the debris and we are correctly going above the debris all right and we getting so push great and on let's see here if we're going to shoot our friendly or the enemy and click and there you go we are now hitting the enemy and our shooting is ignoring our friendly right awesome so here we have all our room set up now again let's just use the Unity provide molar mass to achieve the same result so here on the player on layer mask let's make sure that we hit everything except on to the brain and except on the friendly so here's our own layer mask and let's see and yep we can shoot the crate yup we shoot above it and let's see here my friendly and there you go I can shoot Class D friendly so just like that all of our rooms are correctly working so the owner masks are really easy to use and now you know how they work behind the scenes with knowledge of layers layer masks and bit masks you can now play around and meet some really interesting physics interactions or really cool effects using cameras and separate layers as always you can download the project files in utilities from in Tacoma comm subscribe the channel for more unity to terms post any questions you have in the comments and I'll see you next time
