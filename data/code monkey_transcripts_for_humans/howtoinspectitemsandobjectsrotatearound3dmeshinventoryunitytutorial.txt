With timestamps:

00:00 - hello and welcome i'm your code monkey
00:02 - and here let's build a simple but really
00:04 - awesome item inspect system you see this
00:06 - kind of thing in many many games you
00:08 - have items or objects maybe in your
00:10 - inventory or just some list and you can
00:12 - look at the 3d object in the ui and by
00:15 - touching it you can also rotate the
00:17 - object and look at it from any angle
00:19 - this is actually quite easy to do it
00:20 - just requires one super useful and unity
00:23 - feature which i already covered in many
00:24 - videos so you can probably already guess
00:26 - what it is if you prefer a more guided
00:28 - path with step-by-step lectures then
00:30 - check out my complete courses learn how
00:32 - to make a builder defender game using
00:34 - c-sharp just like i make my own steam
00:36 - games or learn how to make games
00:38 - internally using visual scripting or
00:40 - learn all about unity with the ultimate
00:42 - overview course which contains over 13
00:44 - lectures each covering a different tool
00:46 - or feature of the engine to help you
00:48 - make better games faster i'm always
00:50 - available in the courses q a section
00:51 - answering your questions every single
00:53 - day so check out all the courses with
00:54 - the link in the description alright so
00:56 - let's build our item inspect system over
00:59 - here is my starting point i have this ui
01:02 - which would be something like an
01:03 - inventory system so i just have a bunch
01:05 - of slots and each one of them is a
01:07 - button
01:08 - but what we're going to build here it
01:10 - could easily be applied to any other
01:12 - inventory system for example i covered a
01:14 - normal inventory system quite a long
01:16 - time ago and then i also covered the
01:18 - really interesting tetris inventory
01:20 - system in another video you can use
01:22 - whatever inventory system you want all
01:24 - you really need to know is when the
01:25 - player clicks to select an item or
01:27 - object as long as you know when that
01:29 - happens and you can build this system on
01:31 - top of that so here i've got my dummy
01:33 - inventory system
01:34 - and here is the script it's pretty
01:36 - simple the main thing is we're only just
01:37 - seeing a list of items so this is an
01:40 - item scriptable object if you don't know
01:42 - about scriptable objects they are really
01:44 - awesome it's a super useful way to store
01:46 - data in distinct assets i also cover
01:48 - them in detail in another video over
01:50 - here i'm using that scriptable object
01:52 - for the item definitions again this is
01:54 - all very simple so over here i just have
01:56 - two fields so one for the 2d sprite of
01:59 - the item and another one for the prefab
02:01 - which contains the 3d mesh then here in
02:03 - the project files i've got all my items
02:05 - of the instances of the scriptdown
02:07 - object and then over here i've got
02:09 - prefabs with all the 3d models as well
02:11 - as e2d sprites and my inventory script
02:14 - simply cycles through that list
02:15 - instantiates a template and then sets it
02:18 - to the image then on a button click i
02:20 - simply got a select item which then
02:22 - fires off this event so as you can see
02:24 - very simple now it's on top of this that
02:26 - we're going to build the item inspect
02:27 - system let's begin by making the visual
02:30 - so let's go into the ui so over here is
02:31 - my canvas i've got the inventory with
02:33 - background so it's in here let's create
02:35 - an empty game object
02:36 - call this the item 3d viewer
02:40 - then inside let's add another ui object
02:42 - this one let's make it a raw image so a
02:45 - raw image not an image you'll see why in
02:47 - a bit
02:47 - okay so now just position it somewhere
02:50 - around here
02:51 - just expand this one
02:53 - and size up the other one
02:56 - now to make this look a bit better i'm
02:57 - actually going to put it inside a mask
03:07 - okay so here it is so i've got my raw
03:09 - image it's inside a mask object just to
03:11 - make that nice round border and then
03:13 - behind it just a background for the
03:15 - background
03:16 - all right so now for the logic let's
03:18 - make a new script
03:21 - and just attach it to the main game
03:23 - object okay
03:24 - now over here first like i said we need
03:26 - to know when the item is selected in the
03:28 - inventory
03:29 - so for that we need a reference to the
03:31 - inventory system
03:37 - okay so i've got a serialized field so
03:39 - right here in the editor just need to
03:40 - drag that reference
03:42 - and then here we can now do a private
03:44 - void start and on start let's go into
03:46 - the dummy inventory and subscribe to the
03:48 - on item selected event
03:51 - and again this event is fired whenever i
03:53 - select an item so whenever i click on it
03:56 - so here let's verify that it's working
03:57 - just do a simple download
04:00 - so i'm running the game and as i click
04:02 - on this weapon and if there you go i've
04:04 - got the log right here so i select that
04:06 - one select the key select the bike and
04:07 - so on okay so far so good like i said
04:10 - you can use any inventory system you
04:11 - want really the only connection with the
04:13 - inventory system is through this event
04:15 - all right so now that we know when the
04:16 - player selects an item now let's handle
04:19 - spawning the 3d object
04:21 - now the prefab reference is stored
04:23 - inside the atomsmall object so over here
04:25 - i've got a transform for the prefab so
04:27 - when we select let's instantiate that
04:31 - just go into the adam scriptural object
04:33 - and essentially the prefab
04:37 - then for the position we don't want it
04:39 - to spawn on top of the regular world so
04:41 - let's spawn it somewhere really far away
04:46 - okay on a thousand thousand thousand and
04:48 - quaternion.identity
04:50 - okay now we need to keep track of the
04:51 - objects that we instantiate
04:57 - and before we spawn a new one let's
04:59 - destroy the previous one if it exists
05:03 - okay so let's test this and see if it's
05:05 - spawning the atom vision when i click on
05:07 - it by the way if you find the video
05:09 - helpful please hit the like button it's
05:11 - a tiny thing but it really does help
05:12 - thanks all right here we are and here's
05:14 - my hierarchy so nothing is spawned now i
05:16 - still like the key and there you go it
05:18 - swans the key now i select a pistol and
05:20 - there you go destroys the key and spawns
05:21 - the pistol alright awesome now let's
05:23 - handle the actual visual so this is the
05:26 - part where i use the thing that i
05:27 - already talked about in several previous
05:29 - videos you can probably already guess
05:31 - and yep we're going to use rendered
05:32 - textures if you don't know about them
05:34 - check out the video where i cover them
05:36 - in detail for that the first thing we're
05:38 - going to need is to set up a new camera
05:39 - so let's create a new camera call this
05:42 - the item inspect camera
05:44 - now for the position let's put it around
05:47 - a thousand a thousand a thousand we're
05:48 - going to see the exact position in a
05:50 - little bit okay right now this second
05:53 - camera is rendering onto the main screen
05:55 - so let's make our render texture
05:58 - so let's create a new render texture
06:01 - and here on the output texture we just
06:03 - drag it okay so now for the render
06:06 - texture settings over here the main one
06:08 - is really just the size so this will
06:10 - depend on how big is your item window in
06:12 - the final game so over here this windows
06:14 - about half of the resolution and i'm
06:16 - using a reference resolution of 1080p
06:19 - so if we use something like 1024 that
06:21 - should be more than enough
06:23 - okay so that's it it's assigned and now
06:25 - this part is why i said to make a raw
06:27 - image instead of an image if we go into
06:29 - the raw image we've got a film for the
06:31 - texture and we can d drag our render
06:33 - texture
06:34 - if we made it an image it would only
06:36 - accept the sprite so we would not be
06:37 - able to drag this reference i actually
06:40 - made a lecture in my ultimate unity
06:42 - overview course going through all the
06:43 - differences between image and raw image
06:45 - and the differences between texture and
06:47 - sprites
06:48 - so check out that election on the course
06:49 - if you want to learn more okay with this
06:51 - we can now test and put the camera on
06:53 - the perfect position here with the game
06:55 - running let's first spawn an item let's
06:57 - spawn just a normal hat then let's go
06:59 - into scene view let's look at the hat so
07:01 - just select it and i'm going to press f
07:03 - in order to focus on the object and now
07:05 - here's a quick empty tip you can move
07:07 - the scene camera to get it placed
07:09 - exactly where you want it then when
07:11 - you've got the perfect position you can
07:13 - select the item inspect camera and then
07:15 - you press the hotkeys control shift and
07:17 - f
07:18 - and that places the camera on the exact
07:20 - position in rotation as you see in
07:22 - camera so you go down there the camera
07:24 - is viewing the exact same thing as a
07:26 - scene camera so that's super easy
07:27 - whenever you want to position certain
07:29 - objects
07:30 - okay now of course the issues were in
07:31 - play mode so let's not lose this
07:33 - position so let's select the camera go
07:35 - into the transform copy the component
07:37 - leave the play mode then on the
07:39 - transform right click paste component
07:40 - values and now if we test again
07:43 - and we spawn an item and yet there you
07:45 - go the camera is indeed on the perfect
07:46 - position looking straight at the item
07:48 - all right awesome okay so just like this
07:51 - it's almost done we can already click on
07:53 - any item and we have the ability to view
07:56 - the 3d model in this really nice window
07:58 - now the only thing missing is just one
08:00 - more feature the ability to click on
08:02 - this window and rotate the object for
08:04 - that we're going to need to listen to
08:06 - some mouse events so over here in our
08:08 - script first let's set the using so
08:10 - using it's inside unity engine dot event
08:12 - systems
08:14 - and now we can implement the various
08:16 - interfaces to listen to those mouse
08:18 - events what we want here is to click and
08:20 - drag the mouse to move the object so the
08:22 - perfect one for this is the i drag
08:24 - handler
08:25 - so let's implement this interface so
08:28 - here it is the on drag function
08:30 - now let's do a quick test just in case
08:31 - you don't know what this does so
08:33 - debug.log let's just do something
08:36 - okay let's see
08:38 - so here if i just click on it you can
08:40 - see nothing on the console if i click
08:41 - and let go nothing on the console it
08:43 - only happens if i click and then i move
08:45 - a bit and there you go we've got the on
08:47 - drag event and it's only fired whenever
08:49 - i move the mouse so if i leave the mouse
08:50 - stable it's not actually adding more but
08:52 - if i move the mouse yep there you go
08:54 - we've got our events okay so this is
08:56 - perfect for what we want to do back in
08:58 - the code over here on this event we have
09:01 - a pointer event data this contains lots
09:04 - of data from the pointer and one of
09:05 - those is the delta so that's how far the
09:08 - mouse moved in the last frame
09:09 - so we can access the event data.delta
09:12 - and then using the mouse movement we can
09:14 - simply convert this movement into some
09:16 - object rotation
09:18 - so let's take our object so the item
09:20 - prefab that we spawned and then we're
09:22 - going to modify the euler angles
09:25 - and we're going to set it to this
09:30 - however if we do it directly like this
09:32 - it doesn't work as expected but let's
09:34 - try it anyway so we're going to move
09:36 - using the delta x and the delta y let's
09:38 - see
09:39 - and actually here it needs to be plus
09:40 - equals the delta is how much it moves on
09:43 - a performance basis so we want to
09:44 - constantly add that onto our euler
09:46 - angles so here we are there's the head
09:48 - and if i click and i drag and i move the
09:50 - mouse to the left
09:52 - and nope you can see it's actually
09:53 - moving on the y axis and if i move to
09:56 - the right same thing
09:58 - so it's moving vertically instead of
10:00 - horizontally
10:01 - and if i move vertically and yep there
10:04 - you go now it's rotating horizontally
10:05 - instead of vertical so we're only just
10:07 - doing the opposite that we want whenever
10:09 - we have some mouse x movement we want to
10:12 - rotate the object along the y axis and
10:14 - whenever we have y movement we want to
10:16 - rotate on the x axis so let's change
10:18 - that here just change use the y in here
10:21 - and the action here
10:22 - so now if i click and i move and yep
10:24 - there you go it is now working so it's
10:25 - now moving horizontally and if i go up
10:27 - and down yep it is moving vertically the
10:29 - only issue now is that it's reversed so
10:31 - as i move to the right it's actually
10:32 - rotating to the left and so on so let's
10:34 - reverse this so here just add a minus on
10:37 - both of them
10:38 - and let's do a final test
10:40 - so here we are and i can click on any
10:42 - item in order to select it and view it
10:44 - over here on the nice view then i can
10:46 - click on the window and drag the mouse
10:48 - and there you go i am rotating the
10:49 - object i can inspect it in any way i
10:51 - want so i want to see the rear end of
10:53 - this hat and i can do that i can select
10:55 - the bike and if there you go here's my
10:57 - nice bike 3d model and i can walk
10:58 - anywhere i can select this nice pistol
11:01 - and look anywhere it's like this smg and
11:03 - so on
11:04 - alright great
11:06 - so here is the system fully working and
11:08 - as you can see it's all pretty simple
11:10 - like i said you can connect this with
11:12 - any inventory system the only connection
11:13 - we have is the event that's pretty much
11:15 - it so you could use this with the
11:17 - inventory system that i made in a long
11:18 - time ago or the really interesting
11:21 - tetris inventory system or any other
11:23 - inventory system you have so here it is
11:25 - a really nice item inspect system
11:28 - alright hope that's useful check out
11:29 - these videos to learn some more thanks
11:31 - to these awesome patreon supporters for
11:33 - making these videos possible thank you
11:35 - for watching and i'll see you next time
11:42 - [Music]
11:45 - you

Cleaned transcript:

hello and welcome i'm your code monkey and here let's build a simple but really awesome item inspect system you see this kind of thing in many many games you have items or objects maybe in your inventory or just some list and you can look at the 3d object in the ui and by touching it you can also rotate the object and look at it from any angle this is actually quite easy to do it just requires one super useful and unity feature which i already covered in many videos so you can probably already guess what it is if you prefer a more guided path with stepbystep lectures then check out my complete courses learn how to make a builder defender game using csharp just like i make my own steam games or learn how to make games internally using visual scripting or learn all about unity with the ultimate overview course which contains over 13 lectures each covering a different tool or feature of the engine to help you make better games faster i'm always available in the courses q a section answering your questions every single day so check out all the courses with the link in the description alright so let's build our item inspect system over here is my starting point i have this ui which would be something like an inventory system so i just have a bunch of slots and each one of them is a button but what we're going to build here it could easily be applied to any other inventory system for example i covered a normal inventory system quite a long time ago and then i also covered the really interesting tetris inventory system in another video you can use whatever inventory system you want all you really need to know is when the player clicks to select an item or object as long as you know when that happens and you can build this system on top of that so here i've got my dummy inventory system and here is the script it's pretty simple the main thing is we're only just seeing a list of items so this is an item scriptable object if you don't know about scriptable objects they are really awesome it's a super useful way to store data in distinct assets i also cover them in detail in another video over here i'm using that scriptable object for the item definitions again this is all very simple so over here i just have two fields so one for the 2d sprite of the item and another one for the prefab which contains the 3d mesh then here in the project files i've got all my items of the instances of the scriptdown object and then over here i've got prefabs with all the 3d models as well as e2d sprites and my inventory script simply cycles through that list instantiates a template and then sets it to the image then on a button click i simply got a select item which then fires off this event so as you can see very simple now it's on top of this that we're going to build the item inspect system let's begin by making the visual so let's go into the ui so over here is my canvas i've got the inventory with background so it's in here let's create an empty game object call this the item 3d viewer then inside let's add another ui object this one let's make it a raw image so a raw image not an image you'll see why in a bit okay so now just position it somewhere around here just expand this one and size up the other one now to make this look a bit better i'm actually going to put it inside a mask okay so here it is so i've got my raw image it's inside a mask object just to make that nice round border and then behind it just a background for the background all right so now for the logic let's make a new script and just attach it to the main game object okay now over here first like i said we need to know when the item is selected in the inventory so for that we need a reference to the inventory system okay so i've got a serialized field so right here in the editor just need to drag that reference and then here we can now do a private void start and on start let's go into the dummy inventory and subscribe to the on item selected event and again this event is fired whenever i select an item so whenever i click on it so here let's verify that it's working just do a simple download so i'm running the game and as i click on this weapon and if there you go i've got the log right here so i select that one select the key select the bike and so on okay so far so good like i said you can use any inventory system you want really the only connection with the inventory system is through this event all right so now that we know when the player selects an item now let's handle spawning the 3d object now the prefab reference is stored inside the atomsmall object so over here i've got a transform for the prefab so when we select let's instantiate that just go into the adam scriptural object and essentially the prefab then for the position we don't want it to spawn on top of the regular world so let's spawn it somewhere really far away okay on a thousand thousand thousand and quaternion.identity okay now we need to keep track of the objects that we instantiate and before we spawn a new one let's destroy the previous one if it exists okay so let's test this and see if it's spawning the atom vision when i click on it by the way if you find the video helpful please hit the like button it's a tiny thing but it really does help thanks all right here we are and here's my hierarchy so nothing is spawned now i still like the key and there you go it swans the key now i select a pistol and there you go destroys the key and spawns the pistol alright awesome now let's handle the actual visual so this is the part where i use the thing that i already talked about in several previous videos you can probably already guess and yep we're going to use rendered textures if you don't know about them check out the video where i cover them in detail for that the first thing we're going to need is to set up a new camera so let's create a new camera call this the item inspect camera now for the position let's put it around a thousand a thousand a thousand we're going to see the exact position in a little bit okay right now this second camera is rendering onto the main screen so let's make our render texture so let's create a new render texture and here on the output texture we just drag it okay so now for the render texture settings over here the main one is really just the size so this will depend on how big is your item window in the final game so over here this windows about half of the resolution and i'm using a reference resolution of 1080p so if we use something like 1024 that should be more than enough okay so that's it it's assigned and now this part is why i said to make a raw image instead of an image if we go into the raw image we've got a film for the texture and we can d drag our render texture if we made it an image it would only accept the sprite so we would not be able to drag this reference i actually made a lecture in my ultimate unity overview course going through all the differences between image and raw image and the differences between texture and sprites so check out that election on the course if you want to learn more okay with this we can now test and put the camera on the perfect position here with the game running let's first spawn an item let's spawn just a normal hat then let's go into scene view let's look at the hat so just select it and i'm going to press f in order to focus on the object and now here's a quick empty tip you can move the scene camera to get it placed exactly where you want it then when you've got the perfect position you can select the item inspect camera and then you press the hotkeys control shift and f and that places the camera on the exact position in rotation as you see in camera so you go down there the camera is viewing the exact same thing as a scene camera so that's super easy whenever you want to position certain objects okay now of course the issues were in play mode so let's not lose this position so let's select the camera go into the transform copy the component leave the play mode then on the transform right click paste component values and now if we test again and we spawn an item and yet there you go the camera is indeed on the perfect position looking straight at the item all right awesome okay so just like this it's almost done we can already click on any item and we have the ability to view the 3d model in this really nice window now the only thing missing is just one more feature the ability to click on this window and rotate the object for that we're going to need to listen to some mouse events so over here in our script first let's set the using so using it's inside unity engine dot event systems and now we can implement the various interfaces to listen to those mouse events what we want here is to click and drag the mouse to move the object so the perfect one for this is the i drag handler so let's implement this interface so here it is the on drag function now let's do a quick test just in case you don't know what this does so debug.log let's just do something okay let's see so here if i just click on it you can see nothing on the console if i click and let go nothing on the console it only happens if i click and then i move a bit and there you go we've got the on drag event and it's only fired whenever i move the mouse so if i leave the mouse stable it's not actually adding more but if i move the mouse yep there you go we've got our events okay so this is perfect for what we want to do back in the code over here on this event we have a pointer event data this contains lots of data from the pointer and one of those is the delta so that's how far the mouse moved in the last frame so we can access the event data.delta and then using the mouse movement we can simply convert this movement into some object rotation so let's take our object so the item prefab that we spawned and then we're going to modify the euler angles and we're going to set it to this however if we do it directly like this it doesn't work as expected but let's try it anyway so we're going to move using the delta x and the delta y let's see and actually here it needs to be plus equals the delta is how much it moves on a performance basis so we want to constantly add that onto our euler angles so here we are there's the head and if i click and i drag and i move the mouse to the left and nope you can see it's actually moving on the y axis and if i move to the right same thing so it's moving vertically instead of horizontally and if i move vertically and yep there you go now it's rotating horizontally instead of vertical so we're only just doing the opposite that we want whenever we have some mouse x movement we want to rotate the object along the y axis and whenever we have y movement we want to rotate on the x axis so let's change that here just change use the y in here and the action here so now if i click and i move and yep there you go it is now working so it's now moving horizontally and if i go up and down yep it is moving vertically the only issue now is that it's reversed so as i move to the right it's actually rotating to the left and so on so let's reverse this so here just add a minus on both of them and let's do a final test so here we are and i can click on any item in order to select it and view it over here on the nice view then i can click on the window and drag the mouse and there you go i am rotating the object i can inspect it in any way i want so i want to see the rear end of this hat and i can do that i can select the bike and if there you go here's my nice bike 3d model and i can walk anywhere i can select this nice pistol and look anywhere it's like this smg and so on alright great so here is the system fully working and as you can see it's all pretty simple like i said you can connect this with any inventory system the only connection we have is the event that's pretty much it so you could use this with the inventory system that i made in a long time ago or the really interesting tetris inventory system or any other inventory system you have so here it is a really nice item inspect system alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time you
