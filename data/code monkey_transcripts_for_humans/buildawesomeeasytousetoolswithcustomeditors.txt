With timestamps:

00:00 - in this video we're going to create a
00:01 - custom inspector for our script along
00:03 - with some custom gizmos this is
00:05 - excellent for building awesome
00:06 - easy-to-use tools by making your classes
00:09 - more designer friendly and easier to
00:10 - work with the inspector shows exactly
00:12 - only what we want and the gizmos help
00:14 - display extra information right on our
00:16 - scene view let's begin this video is
00:23 - sponsored by audio mob audio mob helps
00:25 - developers monetize their games through
00:27 - non interrupting audio ads you can earn
00:29 - more money while having happier players
00:31 - so instead of intrusive video ads that
00:34 - they kept your entire screen you have
00:35 - audio ads playing in the background once
00:37 - the player is enjoying your game so the
00:39 - player continues having fun we want the
00:41 - audio ad plays in the background you can
00:43 - monetize using standard audio ads that
00:45 - allow the user to skip the advert at any
00:47 - time or you also have the rewarded type
00:50 - which allows your player to get rewards
00:52 - by listening to an ad players don't
00:54 - enjoy having their games walk so it's
00:55 - quite possible that this new unintrusive
00:58 - ad type won't become the new standard in
01:00 - the future it's very easy to integrate
01:01 - into your games via their unity plugin
01:04 - click the link in the description to
01:06 - learn more and start monetizing your
01:07 - games through non-intrusive
01:08 - advertising clicking the link also help
01:11 - support the channel so lately I've been
01:13 - working on the interactive tutorials for
01:15 - the code monkey steam app if you haven't
01:17 - yet then please click the link in the
01:19 - description to add it to your wishlist
01:20 - I've been playing around with several
01:22 - possible approaches for teaching the
01:24 - player and I realized I needed to make a
01:25 - scripting system in order to handle
01:27 - timing and clicks and since I have to
01:29 - build tons and tons of content I decided
01:32 - to research how I could make my script
01:33 - very designer friendly to make content
01:35 - building much easier alright so here's
01:37 - what we want to make there's a script to
01:39 - make a bunch of actions and tons of
01:41 - awesome gizmos to be able to easily
01:43 - visualize all the scripted events that
01:44 - are happening let's see it in action
01:47 - here this starts off with that character
01:49 - he goes there and he opens the door he
01:50 - moves forward he says something then
01:53 - this one moves there he says another
01:54 - thing then that one goes away and he
01:56 - causes the nice door so this is all
01:58 - scripted using very simple actions so
02:00 - for here this is the simple script to
02:02 - handle those actions it hasn't known for
02:04 - each action type and each one is
02:06 - supposed to have different type of
02:08 - parameters without the editor script
02:10 - this is what it looks like everything
02:12 - looks very messy so
02:13 - this one for example is an action type
02:15 - of door but over here I can still see
02:17 - the chat bubble parameters and he moved
02:18 - Ramblers so ideally if I pick the door
02:21 - action that means that all I want see
02:23 - are the door parameters and over here on
02:24 - the scene view all I see is an empty
02:26 - game object working like this would be
02:28 - extremely difficult in order to set up
02:30 - all the scripting logic I would need to
02:32 - select each individual game object and
02:34 - here I would have to think about which
02:36 - fields need to be set so that would make
02:38 - content building very difficult and here
02:40 - it is with all the editor scripts
02:42 - enabled and right away you can see that
02:44 - the parameters shown are dependent on
02:46 - the action type so this is a chat bubble
02:48 - it only shows me the check button
02:49 - parameters this one is a move it only
02:51 - show me the move parameters and this
02:53 - from the door and again only shows the
02:55 - door parameters so the custom inspector
02:57 - is showing different fields based on
02:58 - logic of what I have selected in this
03:00 - field and visually the scene view we can
03:02 - also see a bunch of arrows and labels
03:04 - that clearly indicate what each action
03:06 - is doing so for example over here I have
03:09 - a move action and this move action is
03:11 - linked to this unit and it's going to
03:13 - move this unit on to this position then
03:15 - once it's done it goes into this action
03:16 - and you can see that this action is of
03:18 - type open door and it won't open this
03:21 - door right here and once it's done it
03:22 - goes into move which again is going to
03:24 - move down up to this position and so on
03:25 - then this one is a chat bubble so it's
03:27 - going to say this message on top of this
03:29 - unit and so on so thanks to all of these
03:31 - gizmos it's very easy to visualize all
03:33 - of this scripted behavior now like I
03:35 - said I research this while working on
03:37 - the code monkey schema here is a scene
03:40 - with all of its scripted behavior now
03:42 - this object has an action of type mask
03:44 - mesh which is using this object as its
03:46 - mast and leads into this other action
03:48 - now I cover the mesh mask in a previous
03:50 - video so check it out if you want to
03:52 - learn how to make a complex mesh in your
03:53 - UI visually I can clearly see what the
03:56 - scripting is doing managing of this
03:58 - logic without a custom inspector and
04:00 - gizmos would take 10 times longer so
04:02 - here I won't cover how you can make your
04:04 - own custom inspector and gizmos and this
04:06 - is just one possible example of how I
04:08 - use them to make a tool to make my life
04:10 - easier making custom editors is
04:12 - extremely extensible so you can do
04:13 - whatever you want for example having
04:15 - custom gizmos is really helpful if you
04:17 - have some sort of patrolling your axe
04:19 - system and you want to drop some way
04:20 - point positions or visually just to see
04:22 - in the our scene view of the sets for
04:24 - each object in your world
04:25 - custom editor scripts are
04:27 - mentally useful for making all of your
04:29 - tools easy to use and improving your
04:30 - productivity when building content then
04:33 - in the next video we're going to see how
04:34 - we can take this even further by
04:36 - capturing clicks in scene view to
04:37 - automatically fill our fields all right
04:39 - so this our goal let's get to it
04:41 - okay so here we are in our starring
04:43 - scene pretty much is two characters
04:45 - sitting around Adam and here is the
04:47 - editor all right so let's begin by
04:49 - making our underlying script so we make
04:52 - an easy sharp script let's call this our
04:54 - custom action and open it okay now here
04:58 - we're going to keep things as simple as
05:00 - possible we're going to make an enum for
05:02 - the action type and have different
05:04 - parameters for each action type so first
05:07 - we make our public you know all right
05:13 - here this so one won't spawn a chat
05:16 - bubble and the other one will move a
05:18 - character now let's define the
05:20 - parameters for each time all right so
05:33 - here it is we have classes containing
05:35 - all the fields that we need to execute
05:37 - our actions now one thing here in order
05:40 - for our custom classes to show up in the
05:42 - editor we need to add here the attribute
05:45 - system that serializable if we don't
05:49 - then these films would not show up in
05:51 - the editor okay so here we have all that
05:53 - required to complete each action and now
05:55 - that we have of our action panel let's
05:57 - make a simple function to trigger
06:12 - all right so there it is over here I
06:14 - have a main execute action function and
06:16 - we just do a switch on the action type
06:18 - so if we have an action type of chat
06:20 - bubble we trigger the execute action on
06:23 - the chat bubble params class so we
06:25 - triggered this one and if we have move
06:27 - we trigger this one now the behavior for
06:29 - these particular functions isn't
06:30 - relevant to this video here we just want
06:32 - to learn how to make custom inspectors
06:34 - but if you want to learn more I also
06:35 - cover these two in previous videos so
06:37 - the chat bubble is from the chat bubble
06:39 - video and down here the move action
06:42 - that's from the modular character
06:44 - controller video so go ahead check the
06:46 - links in description if you want to
06:48 - learn more about how these two are made
06:49 - in this video and we care about is
06:51 - learning how to make a custom inspector
06:52 - that we can apply to any scenario we
06:54 - want and here let me also make just one
06:56 - simple note in terms of code
06:58 - architecture here I am keeping it as
07:00 - simple as possible and just demonstrate
07:01 - the effects of a custom inspector so
07:03 - that's why I'm placing in both actions
07:05 - in the same script using any new if
07:07 - you'd like to make a custom action
07:09 - script the absolute proper way that
07:10 - would be by having each action in its
07:12 - own script probably by using a proper
07:14 - common interface so here I want to say
07:17 - focus just on the editor script but I
07:18 - also wanted to point out what would be
07:20 - the proper way to expand upon this okay
07:22 - so here we have our very basic custom
07:24 - action class that is set up to execute
07:26 - two different action types now let's go
07:28 - back into the editor and then you know
07:31 - let's make a game object to run our
07:32 - script on our custom action and let's
07:35 - drag our script onto it and you pry the
07:38 - way we see our issue now this one for
07:40 - example we just want it to be a chat
07:42 - bubble action but we're also seeing the
07:44 - move parameters so this is where a
07:45 - custom inspector comes in we can use
07:47 - some logic to show our height parameters
07:49 - so when we select on this in um the
07:51 - check button we only want this one to
07:53 - show and we want this one to be
07:54 - invisible
07:54 - and same thing so like the other one
07:56 - hide this one show this one okay so
07:58 - let's make our custom inspector now for
08:00 - that first we need to make a phone so
08:03 - down here inside the scripts form always
08:05 - create a new folder and this will be our
08:07 - editor folder and inside this folder
08:09 - we're going to add our editor scripts so
08:12 - for our custom inspector and let's give
08:13 - it the same name and add editor at the
08:15 - end so when you see char script call
08:17 - this the custom action editor alright
08:20 - let's open it
08:21 - now here the first thing we need to do
08:23 - is add appear using unity editor this is
08:28 - so we can use editor classes and in here
08:31 - instead of extending model behavior
08:33 - we're going to extend the editor and get
08:36 - rid of the skip part so this is the base
08:40 - class for custom editor script and now
08:43 - in order to make this a custom editor of
08:45 - our script up here we have the attribute
08:47 - custom editor then we pass in the typo
08:50 - and we pass in our actual tank so in
08:54 - this case the custom action so this
08:58 - means that this script won't be applied
08:59 - as a custom inspector whenever we
09:01 - inspect the class of type custom action
09:03 - and now in order to showcase a custom
09:05 - inspector we need to add the override we
09:11 - override on inspector GUI and if we just
09:14 - save this and go back into the editor
09:15 - yep right away our custom inspector no
09:18 - longer shows the default representation
09:19 - so right now it's not showing anything
09:21 - since we didn't tell to show anything
09:22 - all right so with the starting point we
09:25 - can now choose exactly what we want to
09:26 - show so here in this function is where
09:28 - we're going to build our custom
09:29 - inspector now the underlying data for
09:32 - our script is in a civilized object so
09:35 - we access the field civilized object and
09:37 - the first thing we do is update the
09:39 - representation of our object so we call
09:41 - update and now we can decide to show a
09:43 - specific property so the way we do that
09:45 - is use the editor going in layout and we
09:51 - can create a default property field and
09:53 - then here we pass in the property so
09:55 - once again we access the sterilized
09:57 - object we find the property and we give
10:00 - it our type so in this case can go back
10:02 - into the action and let's just show the
10:04 - action type so let's pass in this so
10:08 - just like this we should see the
10:09 - inspector displaying our type and this
10:11 - function automatically identifies the
10:13 - type of the property so in this case
10:14 - since it's an enum it will show the
10:16 - standard drop-down many so we do this
10:18 - end at the end of the un-- inspector GUI
10:20 - we need to call our serialized object
10:22 - and call apply modified properties so
10:25 - this writes any changes we make back
10:27 - onto the underlying object all right so
10:29 - that's it this is the absolute basics
10:30 - for making a custom inspector and if we
10:33 - test any of there's the custom
10:35 - editor script running it is showing me
10:36 - exactly just the tank filmed which is
10:38 - what we want alright great so now that
10:40 - we have this working let's show the
10:42 - remaining fields wants also applying
10:43 - some logic so for our logic we need to
10:46 - apply a switch on the current select
10:48 - type now the current selected object is
10:50 - stored within target so this is the
10:53 - object being inspected and we can cast
10:55 - this down onto our custom type which is
10:57 - custom action so here we have reference
11:04 - to our selected instance and now here we
11:07 - can do a simple switch we access it
11:09 - access the action type and then let's do
11:12 - a simple case so if we are on chat
11:14 - bubble then let's show the chat bubble
11:16 - friends so we do the exact same thing in
11:18 - this case again go back and use the
11:21 - exact same name chat bubble params and
11:23 - we show this one and here's the other
11:25 - one we show the other all right that
11:30 - should do it back into the editor and
11:32 - you pry the way we can see it working so
11:34 - if I select the chat bubble it shows
11:36 - each at bone params and if I select
11:37 - movie chose the move params so the
11:40 - inspector is only showing you exactly
11:41 - what I need based on the type that I
11:42 - select right great so just like this we
11:45 - already have built a custom smart
11:47 - inspector that only shows the exactly
11:48 - what we want so this is the simplest
11:50 - custom inspector that we can build and
11:52 - here since we have access to the
11:54 - annoying object you can do whatever you
11:56 - want with the inspector for example
11:57 - let's say we want to add an extra button
11:59 - over here on each hat bubble so we go
12:01 - into the GUI and layout in order to
12:03 - create a button and let's call button
12:06 - and just like that and if there it is if
12:09 - we don't like the check but when we see
12:10 - our nice button even if we sound like
12:12 - move we do not see it and right now
12:14 - we're showing the entire chat bubble
12:15 - programs but we can also show each field
12:17 - individually so to do that instead of
12:20 - showing the civilized object of the chat
12:21 - bubble params instead we do this we go
12:24 - into that and then we actually find the
12:27 - property relative to down one so in this
12:30 - case you have bomb crimes as these
12:31 - parameters and let's say we just want to
12:33 - show the text so we just show down and
12:36 - if there it is if we saw my chat bubble
12:37 - we see our button and our text field so
12:39 - just like that you can see how
12:40 - extensible this system is alright so
12:43 - this pretty much covers the basic custom
12:45 - inspector now let's add some gizmos over
12:47 - here on our scene
12:48 - now for this one there are two places we
12:51 - can write our code over here in the
12:53 - editor script we can add the function
12:55 - public Boyd on scene GUI so this
12:59 - function gets called whenever the scene
13:00 - updates so here for example let's draw a
13:03 - simple text and label alright so just
13:10 - like this we should be able to see some
13:12 - text showing the action type right on
13:13 - top of the custom action transform and
13:16 - yep we see it right there there you go
13:17 - the chat bubble highlighted right on the
13:19 - object so just like this we can visually
13:21 - look into the scene view and immediately
13:23 - see alright this is a chat bubble
13:25 - however the unseen gooey method only
13:27 - runs when the object is selected so if I
13:30 - select something else yep there you go
13:31 - the label actually disappears so if we
13:34 - want to display some information at all
13:35 - times and this is not the best approach
13:37 - now the other approach we have for
13:39 - drawing gizmos is on the normal object
13:41 - script so here we are on the custom
13:43 - action script and let's go down here and
13:46 - what we can add is a simple private boy
13:48 - on draw a gizmos so this one gets
13:51 - updated whether the object is selected
13:53 - or not so here we can have the same code
13:57 - alright just like that
13:59 - let's test and if there's the text level
14:01 - so I can select it and you could see
14:03 - some like now that object and yep it's
14:05 - still in there so this label now shows
14:07 - up whether the object is selected or
14:09 - deselect it now in this case I want to
14:11 - show some information at all time so
14:13 - let's go with this approach now there
14:15 - are actually several ways of drawing
14:16 - gizmos so for example for drawing a
14:19 - simple line you can use the handles then
14:27 - you also have gizmos draw a line and
14:30 - then you also have the debug drawn line
14:34 - so all three methods behave in the exact
14:37 - same way so here in the other we can see
14:39 - on line going from the object position
14:40 - on to the origin now I've tried to look
14:42 - for what is the difference between all
14:44 - of them and which one should be used but
14:45 - I couldn't really find anything so if
14:48 - you know how they differ from each other
14:49 - then please let me know in the comments
14:51 - now the one difference that I see is
14:53 - that handles exists inside of unity
14:55 - editor
14:55 - whereas gizmos exists inside of unity
14:58 - engine now in this case I will be mainly
15:00 - using Hamill's in
15:01 - has a lot more options and gizmos and
15:03 - the handles works both in here and also
15:06 - over here on the editor code whereas
15:08 - gizmos cannot be used on the unseen GUI
15:10 - function and since handles uses the
15:12 - unity editor let's go up here to add a
15:16 - using statement and let's also add an if
15:19 - to make sure that this code only runs in
15:21 - the editor and not in a bill alright
15:28 - that should do it
15:28 - so let's draw some lines between all of
15:30 - our fields now this code here is running
15:33 - on this object so we can access all of
15:35 - the fields up here let's start off
15:37 - simple by drawing a line when the chat
15:39 - bubble type is pointing to our unit so
15:41 - we do a switch on our type alright so
15:52 - here this we do a switch on the action
15:53 - type if we are on the chat bubble the
15:55 - first thing we do is we check if the
15:56 - game object film has been set and if so
15:59 - then we draw a line going from this onto
16:01 - the object position so very basic very
16:03 - simple let's see so here we are and
16:06 - right now yep there's no line pointing
16:07 - anywhere since that field is set to no
16:09 - and I would say a drug reference to this
16:11 - unit put in there any of there you go
16:13 - now we see our nice line so you can see
16:15 - that this event is correctly linked on
16:17 - to that unit so we can very easily
16:18 - visualize all the links to our actions
16:20 - awesome all right now let's apply the
16:22 - same thing to our move type so here we
16:25 - just use switch on the other type
16:36 - alright so doing they pretty much the
16:38 - same thing first we test if we have
16:39 - something set to that field if so we
16:41 - drawn line from the action on to the
16:43 - unit game object then we draw another
16:45 - one from the unit game object to its
16:47 - move position and this one just for fun
16:49 - we're adding a different color let's see
16:51 - how this works so here we swap the chat
16:53 - bubble for a move and there you go that
16:55 - link disappears now let's drag our
16:57 - reference and if there it is
16:59 - and it's going on to move position zero
17:01 - zero zero so right there so we can move
17:03 - this any of their your line is moving so
17:05 - without any object selected I can just
17:07 - look at my scene and see they're over
17:08 - here I have a move action it's connected
17:10 - to this unit and it's going to move this
17:12 - unit from this position out
17:14 - position and since we're working with a
17:16 - custom inspector we can very easily add
17:18 - a custom handle to this vector3
17:20 - so back into our custom action editor
17:22 - script in here we can add a position
17:25 - handle so before all this let's begin to
17:29 - add a change check so that means that
17:39 - the code over here in the middle will be
17:41 - checked if it changes or not so it's in
17:43 - here that we can add our position handle
17:45 - so you into the handles and we create a
17:48 - new position handle so we add a position
17:53 - handle right on the move params move
17:55 - position and now this function returns
17:57 - the new target position and this one
18:02 - returns true if something has changed so
18:04 - if it has changed and let's modify it
18:08 - all right so like this now here the
18:11 - position handle cannot actually be used
18:13 - whilst inside of the unexpected GUI
18:14 - rather it needs to be used on the
18:17 - on-scene GUI so let's pass this code in
18:20 - here and again this one is for the move
18:23 - parameters so let's do a switch on our
18:24 - kite all right there it is so if we have
18:32 - the move tab let's show a move position
18:34 - Hamel to update our move position let's
18:37 - see if it works so here we are in select
18:39 - our object and you've there you go now
18:40 - we have a second move position Hamel so
18:42 - we have this one for the actual object
18:44 - position and then we have this one to
18:46 - modify the very nice move position so
18:49 - instead of setting numbers in there we
18:50 - can use this really nice handle right
18:52 - awesome and here let's just make this
18:54 - the complete proper way so let's also
18:56 - add an undo so we record the objects 8
19:04 - then we change it then we update 0
19:06 - object so here we are and now if we move
19:08 - it and we press ctrl-z if there you go
19:10 - we have nice and do alright great so
19:12 - we've already learned how to make a
19:14 - custom inspector and add some custom
19:15 - gizmos now just for fun let's see how
19:19 - easy it is to add the new action type so
19:21 - let's expand upon our custom actions
19:23 - let's add a door action and once again
19:27 - though you know let's make
19:27 - parameters all right there it is over
19:39 - here we have the new annum type then
19:41 - down here we made some new params and
19:43 - all of the required parameters and the
19:44 - function to execute this action then
19:47 - down here we add it to our switch now in
19:49 - the editor and let's show our property
19:51 - fields there it is
19:55 - and on the gizmos let's show some gizmos
19:57 - all right just like this all right so
19:59 - now back in here we can swap this for a
20:01 - move and select door and there we have
20:04 - our door parameters so here let's pass
20:06 - in this door reference and let's not
20:08 - open it and now let's just make a script
20:10 - to run our very first action here there
20:16 - is a very simple script we just have a
20:17 - reference for our starting action and on
20:19 - start we execute it and here just set
20:22 - this object and we're going to run this
20:23 - action so we should be able to play the
20:25 - game and see the door open and if there
20:28 - is we saw our action and our door open
20:30 - awesome so you can see how easy it is to
20:32 - expand upon our system now if you want
20:35 - to know more about this door it was
20:36 - actually fully created on a previous
20:37 - video I've done three videos covering
20:39 - doors one on the key door system one on
20:42 - various methods of creating doors and
20:43 - one on various ways to interact with any
20:45 - object so if you want to learn more
20:47 - about how door is made then check those
20:48 - out alright so we have our inspectors
20:51 - and our gizmos now let me just punch
20:53 - this up a bit alright so here it is I
20:56 - made this nice function to draw some
20:58 - cool errors it's using the draw a a pawn
21:01 - line in order to draw a nicer
21:03 - anti-aliased line it also supports
21:05 - drawing in different colors there is a
21:08 - label on the right down the middle sing
21:09 - some text and a bunch of lines to make
21:12 - it look like an actual arrow let's see
21:14 - it in the editor any of there it is so
21:16 - we have some very nice arrows pointing
21:18 - to our targets with some labels
21:20 - providing more context so just by
21:22 - looking at the scene view we can see all
21:23 - the information to understand what is
21:25 - going on so this is a door type and it's
21:27 - pointing and it's linked towards this
21:29 - door and it's going to make it open
21:30 - alright now let's just build the
21:32 - scenario that we saw in the beginning
21:50 - all right so here it is I just sat on
21:53 - the fields and we can very easily see
21:55 - what is happening so it's going to start
21:57 - off with this move action so it's going
21:59 - to move this unit on to this position
22:01 - then once he reaches there he's going to
22:03 - go into this next action this is the
22:05 - door it won't open this door when there
22:08 - are opens then he moves on to this one
22:09 - which will move this unit back into this
22:12 - position then when it does it triggers
22:14 - this chat button so this unit won't say
22:17 - this message then it goes into this one
22:19 - where this unit goes there and then it
22:21 - goes into this chat button where he says
22:22 - something and then he goes into the move
22:25 - which is going to move that one all the
22:26 - way back up there and then finally close
22:28 - the door so we can very easily visualize
22:31 - on fire scripted behavior thanks to all
22:33 - of our very nice gizmos let's see it in
22:35 - action okay there it is using air he
22:37 - opens door he moves foreign he says his
22:40 - message then the other one moves forward
22:42 - says his message then he moves away and
22:44 - finally he causes earth alright awesome
22:47 - so here we have a really nice scripted
22:49 - scene that we built using our very
22:52 - awesome new easy-to-use tool we have our
22:54 - custom inspector just showing the
22:56 - parameters that we need and we have a
22:58 - bunch of information on our scene view
23:00 - to easily visualize what is going on
23:02 - again this is just one possible example
23:05 - of the benefits of writing a custom
23:06 - editor with custom gizmos you can apply
23:09 - this to whatever you want in your games
23:10 - so before you start manually creating
23:13 - tons of content ask yourself if you can
23:15 - spend just one day building a tool that
23:17 - won't greatly improve your productivity
23:18 - now in the next video I will cover how
23:21 - to capture clicks in the scene view in
23:23 - order to take this tool even further if
23:25 - you're watching this in the future check
23:26 - the link in the description and if not
23:28 - it should be out by next week check out
23:30 - the code monkey app on Steam interactive
23:32 - tutorials complete games and more click
23:34 - going in the description and add it to
23:36 - your wish list this video is made
23:37 - possible thanks to these awesome
23:38 - supporters go to patreon.com/scishow to
23:41 - code monkey to get some perks and help
23:43 - keep the videos free for everyone as
23:45 - always you can download the project
23:46 - ultimate tony's from unity
23:48 - Montcalm subscribe the channel for more
23:50 - indeed turns where seven comes and
23:52 - I'll see you next time
23:55 - [Music]

Cleaned transcript:

in this video we're going to create a custom inspector for our script along with some custom gizmos this is excellent for building awesome easytouse tools by making your classes more designer friendly and easier to work with the inspector shows exactly only what we want and the gizmos help display extra information right on our scene view let's begin this video is sponsored by audio mob audio mob helps developers monetize their games through non interrupting audio ads you can earn more money while having happier players so instead of intrusive video ads that they kept your entire screen you have audio ads playing in the background once the player is enjoying your game so the player continues having fun we want the audio ad plays in the background you can monetize using standard audio ads that allow the user to skip the advert at any time or you also have the rewarded type which allows your player to get rewards by listening to an ad players don't enjoy having their games walk so it's quite possible that this new unintrusive ad type won't become the new standard in the future it's very easy to integrate into your games via their unity plugin click the link in the description to learn more and start monetizing your games through nonintrusive advertising clicking the link also help support the channel so lately I've been working on the interactive tutorials for the code monkey steam app if you haven't yet then please click the link in the description to add it to your wishlist I've been playing around with several possible approaches for teaching the player and I realized I needed to make a scripting system in order to handle timing and clicks and since I have to build tons and tons of content I decided to research how I could make my script very designer friendly to make content building much easier alright so here's what we want to make there's a script to make a bunch of actions and tons of awesome gizmos to be able to easily visualize all the scripted events that are happening let's see it in action here this starts off with that character he goes there and he opens the door he moves forward he says something then this one moves there he says another thing then that one goes away and he causes the nice door so this is all scripted using very simple actions so for here this is the simple script to handle those actions it hasn't known for each action type and each one is supposed to have different type of parameters without the editor script this is what it looks like everything looks very messy so this one for example is an action type of door but over here I can still see the chat bubble parameters and he moved Ramblers so ideally if I pick the door action that means that all I want see are the door parameters and over here on the scene view all I see is an empty game object working like this would be extremely difficult in order to set up all the scripting logic I would need to select each individual game object and here I would have to think about which fields need to be set so that would make content building very difficult and here it is with all the editor scripts enabled and right away you can see that the parameters shown are dependent on the action type so this is a chat bubble it only shows me the check button parameters this one is a move it only show me the move parameters and this from the door and again only shows the door parameters so the custom inspector is showing different fields based on logic of what I have selected in this field and visually the scene view we can also see a bunch of arrows and labels that clearly indicate what each action is doing so for example over here I have a move action and this move action is linked to this unit and it's going to move this unit on to this position then once it's done it goes into this action and you can see that this action is of type open door and it won't open this door right here and once it's done it goes into move which again is going to move down up to this position and so on then this one is a chat bubble so it's going to say this message on top of this unit and so on so thanks to all of these gizmos it's very easy to visualize all of this scripted behavior now like I said I research this while working on the code monkey schema here is a scene with all of its scripted behavior now this object has an action of type mask mesh which is using this object as its mast and leads into this other action now I cover the mesh mask in a previous video so check it out if you want to learn how to make a complex mesh in your UI visually I can clearly see what the scripting is doing managing of this logic without a custom inspector and gizmos would take 10 times longer so here I won't cover how you can make your own custom inspector and gizmos and this is just one possible example of how I use them to make a tool to make my life easier making custom editors is extremely extensible so you can do whatever you want for example having custom gizmos is really helpful if you have some sort of patrolling your axe system and you want to drop some way point positions or visually just to see in the our scene view of the sets for each object in your world custom editor scripts are mentally useful for making all of your tools easy to use and improving your productivity when building content then in the next video we're going to see how we can take this even further by capturing clicks in scene view to automatically fill our fields all right so this our goal let's get to it okay so here we are in our starring scene pretty much is two characters sitting around Adam and here is the editor all right so let's begin by making our underlying script so we make an easy sharp script let's call this our custom action and open it okay now here we're going to keep things as simple as possible we're going to make an enum for the action type and have different parameters for each action type so first we make our public you know all right here this so one won't spawn a chat bubble and the other one will move a character now let's define the parameters for each time all right so here it is we have classes containing all the fields that we need to execute our actions now one thing here in order for our custom classes to show up in the editor we need to add here the attribute system that serializable if we don't then these films would not show up in the editor okay so here we have all that required to complete each action and now that we have of our action panel let's make a simple function to trigger all right so there it is over here I have a main execute action function and we just do a switch on the action type so if we have an action type of chat bubble we trigger the execute action on the chat bubble params class so we triggered this one and if we have move we trigger this one now the behavior for these particular functions isn't relevant to this video here we just want to learn how to make custom inspectors but if you want to learn more I also cover these two in previous videos so the chat bubble is from the chat bubble video and down here the move action that's from the modular character controller video so go ahead check the links in description if you want to learn more about how these two are made in this video and we care about is learning how to make a custom inspector that we can apply to any scenario we want and here let me also make just one simple note in terms of code architecture here I am keeping it as simple as possible and just demonstrate the effects of a custom inspector so that's why I'm placing in both actions in the same script using any new if you'd like to make a custom action script the absolute proper way that would be by having each action in its own script probably by using a proper common interface so here I want to say focus just on the editor script but I also wanted to point out what would be the proper way to expand upon this okay so here we have our very basic custom action class that is set up to execute two different action types now let's go back into the editor and then you know let's make a game object to run our script on our custom action and let's drag our script onto it and you pry the way we see our issue now this one for example we just want it to be a chat bubble action but we're also seeing the move parameters so this is where a custom inspector comes in we can use some logic to show our height parameters so when we select on this in um the check button we only want this one to show and we want this one to be invisible and same thing so like the other one hide this one show this one okay so let's make our custom inspector now for that first we need to make a phone so down here inside the scripts form always create a new folder and this will be our editor folder and inside this folder we're going to add our editor scripts so for our custom inspector and let's give it the same name and add editor at the end so when you see char script call this the custom action editor alright let's open it now here the first thing we need to do is add appear using unity editor this is so we can use editor classes and in here instead of extending model behavior we're going to extend the editor and get rid of the skip part so this is the base class for custom editor script and now in order to make this a custom editor of our script up here we have the attribute custom editor then we pass in the typo and we pass in our actual tank so in this case the custom action so this means that this script won't be applied as a custom inspector whenever we inspect the class of type custom action and now in order to showcase a custom inspector we need to add the override we override on inspector GUI and if we just save this and go back into the editor yep right away our custom inspector no longer shows the default representation so right now it's not showing anything since we didn't tell to show anything all right so with the starting point we can now choose exactly what we want to show so here in this function is where we're going to build our custom inspector now the underlying data for our script is in a civilized object so we access the field civilized object and the first thing we do is update the representation of our object so we call update and now we can decide to show a specific property so the way we do that is use the editor going in layout and we can create a default property field and then here we pass in the property so once again we access the sterilized object we find the property and we give it our type so in this case can go back into the action and let's just show the action type so let's pass in this so just like this we should see the inspector displaying our type and this function automatically identifies the type of the property so in this case since it's an enum it will show the standard dropdown many so we do this end at the end of the un inspector GUI we need to call our serialized object and call apply modified properties so this writes any changes we make back onto the underlying object all right so that's it this is the absolute basics for making a custom inspector and if we test any of there's the custom editor script running it is showing me exactly just the tank filmed which is what we want alright great so now that we have this working let's show the remaining fields wants also applying some logic so for our logic we need to apply a switch on the current select type now the current selected object is stored within target so this is the object being inspected and we can cast this down onto our custom type which is custom action so here we have reference to our selected instance and now here we can do a simple switch we access it access the action type and then let's do a simple case so if we are on chat bubble then let's show the chat bubble friends so we do the exact same thing in this case again go back and use the exact same name chat bubble params and we show this one and here's the other one we show the other all right that should do it back into the editor and you pry the way we can see it working so if I select the chat bubble it shows each at bone params and if I select movie chose the move params so the inspector is only showing you exactly what I need based on the type that I select right great so just like this we already have built a custom smart inspector that only shows the exactly what we want so this is the simplest custom inspector that we can build and here since we have access to the annoying object you can do whatever you want with the inspector for example let's say we want to add an extra button over here on each hat bubble so we go into the GUI and layout in order to create a button and let's call button and just like that and if there it is if we don't like the check but when we see our nice button even if we sound like move we do not see it and right now we're showing the entire chat bubble programs but we can also show each field individually so to do that instead of showing the civilized object of the chat bubble params instead we do this we go into that and then we actually find the property relative to down one so in this case you have bomb crimes as these parameters and let's say we just want to show the text so we just show down and if there it is if we saw my chat bubble we see our button and our text field so just like that you can see how extensible this system is alright so this pretty much covers the basic custom inspector now let's add some gizmos over here on our scene now for this one there are two places we can write our code over here in the editor script we can add the function public Boyd on scene GUI so this function gets called whenever the scene updates so here for example let's draw a simple text and label alright so just like this we should be able to see some text showing the action type right on top of the custom action transform and yep we see it right there there you go the chat bubble highlighted right on the object so just like this we can visually look into the scene view and immediately see alright this is a chat bubble however the unseen gooey method only runs when the object is selected so if I select something else yep there you go the label actually disappears so if we want to display some information at all times and this is not the best approach now the other approach we have for drawing gizmos is on the normal object script so here we are on the custom action script and let's go down here and what we can add is a simple private boy on draw a gizmos so this one gets updated whether the object is selected or not so here we can have the same code alright just like that let's test and if there's the text level so I can select it and you could see some like now that object and yep it's still in there so this label now shows up whether the object is selected or deselect it now in this case I want to show some information at all time so let's go with this approach now there are actually several ways of drawing gizmos so for example for drawing a simple line you can use the handles then you also have gizmos draw a line and then you also have the debug drawn line so all three methods behave in the exact same way so here in the other we can see on line going from the object position on to the origin now I've tried to look for what is the difference between all of them and which one should be used but I couldn't really find anything so if you know how they differ from each other then please let me know in the comments now the one difference that I see is that handles exists inside of unity editor whereas gizmos exists inside of unity engine now in this case I will be mainly using Hamill's in has a lot more options and gizmos and the handles works both in here and also over here on the editor code whereas gizmos cannot be used on the unseen GUI function and since handles uses the unity editor let's go up here to add a using statement and let's also add an if to make sure that this code only runs in the editor and not in a bill alright that should do it so let's draw some lines between all of our fields now this code here is running on this object so we can access all of the fields up here let's start off simple by drawing a line when the chat bubble type is pointing to our unit so we do a switch on our type alright so here this we do a switch on the action type if we are on the chat bubble the first thing we do is we check if the game object film has been set and if so then we draw a line going from this onto the object position so very basic very simple let's see so here we are and right now yep there's no line pointing anywhere since that field is set to no and I would say a drug reference to this unit put in there any of there you go now we see our nice line so you can see that this event is correctly linked on to that unit so we can very easily visualize all the links to our actions awesome all right now let's apply the same thing to our move type so here we just use switch on the other type alright so doing they pretty much the same thing first we test if we have something set to that field if so we drawn line from the action on to the unit game object then we draw another one from the unit game object to its move position and this one just for fun we're adding a different color let's see how this works so here we swap the chat bubble for a move and there you go that link disappears now let's drag our reference and if there it is and it's going on to move position zero zero zero so right there so we can move this any of their your line is moving so without any object selected I can just look at my scene and see they're over here I have a move action it's connected to this unit and it's going to move this unit from this position out position and since we're working with a custom inspector we can very easily add a custom handle to this vector3 so back into our custom action editor script in here we can add a position handle so before all this let's begin to add a change check so that means that the code over here in the middle will be checked if it changes or not so it's in here that we can add our position handle so you into the handles and we create a new position handle so we add a position handle right on the move params move position and now this function returns the new target position and this one returns true if something has changed so if it has changed and let's modify it all right so like this now here the position handle cannot actually be used whilst inside of the unexpected GUI rather it needs to be used on the onscene GUI so let's pass this code in here and again this one is for the move parameters so let's do a switch on our kite all right there it is so if we have the move tab let's show a move position Hamel to update our move position let's see if it works so here we are in select our object and you've there you go now we have a second move position Hamel so we have this one for the actual object position and then we have this one to modify the very nice move position so instead of setting numbers in there we can use this really nice handle right awesome and here let's just make this the complete proper way so let's also add an undo so we record the objects 8 then we change it then we update 0 object so here we are and now if we move it and we press ctrlz if there you go we have nice and do alright great so we've already learned how to make a custom inspector and add some custom gizmos now just for fun let's see how easy it is to add the new action type so let's expand upon our custom actions let's add a door action and once again though you know let's make parameters all right there it is over here we have the new annum type then down here we made some new params and all of the required parameters and the function to execute this action then down here we add it to our switch now in the editor and let's show our property fields there it is and on the gizmos let's show some gizmos all right just like this all right so now back in here we can swap this for a move and select door and there we have our door parameters so here let's pass in this door reference and let's not open it and now let's just make a script to run our very first action here there is a very simple script we just have a reference for our starting action and on start we execute it and here just set this object and we're going to run this action so we should be able to play the game and see the door open and if there is we saw our action and our door open awesome so you can see how easy it is to expand upon our system now if you want to know more about this door it was actually fully created on a previous video I've done three videos covering doors one on the key door system one on various methods of creating doors and one on various ways to interact with any object so if you want to learn more about how door is made then check those out alright so we have our inspectors and our gizmos now let me just punch this up a bit alright so here it is I made this nice function to draw some cool errors it's using the draw a a pawn line in order to draw a nicer antialiased line it also supports drawing in different colors there is a label on the right down the middle sing some text and a bunch of lines to make it look like an actual arrow let's see it in the editor any of there it is so we have some very nice arrows pointing to our targets with some labels providing more context so just by looking at the scene view we can see all the information to understand what is going on so this is a door type and it's pointing and it's linked towards this door and it's going to make it open alright now let's just build the scenario that we saw in the beginning all right so here it is I just sat on the fields and we can very easily see what is happening so it's going to start off with this move action so it's going to move this unit on to this position then once he reaches there he's going to go into this next action this is the door it won't open this door when there are opens then he moves on to this one which will move this unit back into this position then when it does it triggers this chat button so this unit won't say this message then it goes into this one where this unit goes there and then it goes into this chat button where he says something and then he goes into the move which is going to move that one all the way back up there and then finally close the door so we can very easily visualize on fire scripted behavior thanks to all of our very nice gizmos let's see it in action okay there it is using air he opens door he moves foreign he says his message then the other one moves forward says his message then he moves away and finally he causes earth alright awesome so here we have a really nice scripted scene that we built using our very awesome new easytouse tool we have our custom inspector just showing the parameters that we need and we have a bunch of information on our scene view to easily visualize what is going on again this is just one possible example of the benefits of writing a custom editor with custom gizmos you can apply this to whatever you want in your games so before you start manually creating tons of content ask yourself if you can spend just one day building a tool that won't greatly improve your productivity now in the next video I will cover how to capture clicks in the scene view in order to take this tool even further if you're watching this in the future check the link in the description and if not it should be out by next week check out the code monkey app on Steam interactive tutorials complete games and more click going in the description and add it to your wish list this video is made possible thanks to these awesome supporters go to patreon.com/scishow to code monkey to get some perks and help keep the videos free for everyone as always you can download the project ultimate tony's from unity Montcalm subscribe the channel for more indeed turns where seven comes and I'll see you next time
