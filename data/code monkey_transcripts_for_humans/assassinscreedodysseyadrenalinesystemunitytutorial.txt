With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - in this video we're going to make the
00:03 - adrenaline system from Assassin's Creed
00:04 - Odyssey the player gains adrenaline
00:06 - based on enemy heads and well-timed
00:08 - dodges in later videos we're going to
00:10 - use it for abilities like these parking
00:12 - kick alright let's begin
00:17 - okay here's my scene I have my Spartan
00:20 - character I can move them around there
00:22 - are some enemies that chase me and
00:23 - attack me and I can also attack them and
00:26 - I can dodge their attacks I can do a
00:28 - simple roll and dodge away so with this
00:33 - we have the base for creating our
00:34 - adrenaline system so let's check out how
00:37 - the code is setup over here is the
00:39 - player class it's pretty simple there
00:42 - are several states and on update it runs
00:45 - different logic based on the state so if
00:47 - the state is normal which means normal
00:49 - basic movement he handles the movement
00:51 - handles the movement by checking for the
00:53 - input and moving the transform then it
00:56 - also handles a Dodge by checking for the
00:58 - spacebar and finally it handles the
01:01 - attack which it simply test for the left
01:04 - mouse button click if so it looks for a
01:07 - nearby enemy if he finds when he damages
01:09 - him and plays the attack animation okay
01:12 - so let's make the adrenaline class so in
01:15 - here let's make a new c-sharp script and
01:17 - name it adrenaline in here let's first
01:20 - make it a static class since we only
01:22 - want there to be one adrenaline system
01:24 - and remove the mono behavior so the
01:28 - first thing we need is a certain amount
01:30 - for the adrenaline amount so a private
01:33 - static int
01:34 - for the amount then let's also make a
01:37 - maximum amount so a private static int
01:39 - for the amount Max and then we're going
01:42 - to divide the adrenaline by a certain
01:44 - number of bars essentially need to fill
01:46 - up an entire bar before you can actually
01:48 - use it so let's define a public constant
01:53 - for the amount per bar which let's say
01:57 - at 25 so essentially the amount needs to
02:00 - reach at least 25 in order for us to use
02:03 - it okay let's make now a public static
02:05 - void in it to initialize our adrenaline
02:08 - system so first set the amount to zero
02:12 - and let's calculate the amount max by
02:15 - the finding a certain number of bars so
02:16 - in for the bar amount and let's say two
02:19 - bars and we're going to define the
02:21 - amount max which will be the bar amount
02:24 - multip
02:24 - by the amount for a bar so in this case
02:27 - with two bars in each of them having 25
02:29 - the amount max won't be 50 so now for
02:32 - some functions let's make a public
02:34 - static void add adrenaline and we're
02:38 - going to receive a parameter for the ad
02:41 - amount and in here we're similarly going
02:43 - to increase it by that amount so amount
02:45 - Falls equals ad amount and let's make
02:49 - sure we don't go over the max so if a
02:51 - month is bigger than a month max set the
02:54 - amount equals amount max okay and then
02:58 - let's do a debug pop up with the current
03:00 - amount just so we can see how much we
03:02 - actually have so for that I'm going to
03:04 - use the CM debug class which is part of
03:06 - the code monkey Tonys which as long as
03:08 - you can grab for free from unity code
03:10 - monkey calm so using code monkey and
03:13 - let's go down here use the CM debug to
03:15 - create a text pop up on the mouse
03:18 - position and that pop up won't simply
03:20 - say the amount this is just so we can
03:24 - see what is going on inside this class
03:25 - all right this is a nice starting point
03:27 - so let's go into the game handler which
03:30 - is our main script and in here and let's
03:32 - make a private void awake and on the
03:35 - awakened let's initialize the adrenalin
03:36 - system so adrenaline dot init and here
03:40 - on cert you can see we are setting the
03:41 - camera to follow the player and we are
03:44 - spawning an enemy every one and a half
03:45 - seconds okay so finally let's go into
03:48 - the player class and on the Hamel attack
03:50 - when we actually damage an enemy let's
03:53 - add some adrenaline so in here do
03:55 - adrenaline dot add adrenaline and let's
03:59 - give it a let's say three okay so let's
04:01 - test then we should see the pop-up
04:03 - whenever we attack an enemy okay here I
04:06 - am moving around if I attack nothing yep
04:08 - nothing happens but if I hit an enemy
04:10 - yup there you go you can see the various
04:12 - pop-ups showing how much it's running we
04:14 - have and if I go up to a maximum of
04:17 - fifty yep you can see it doesn't go
04:18 - above the maximum okay great
04:20 - so now let's add some more functions to
04:23 - our adrenaline system first let's make a
04:25 - function to come like the number of film
04:27 - bars so make a public static int get
04:31 - film bar amount
04:34 - so this is meant to return how many bars
04:37 - we can actually use so the film bar is
04:40 - if the amount is bigger than the amount
04:42 - per bar so in here we are going to
04:43 - return the amount divided by amount per
04:47 - bar so if we have 25 then this one
04:51 - return 1 since we have one film bar
04:54 - however we have to account for when the
04:56 - amount is in between bars so in here
04:58 - let's do a math F dot for two int 2 for
05:02 - that value so essentially if the amount
05:04 - is 30 30 divided by 25 will essentially
05:08 - be one point something so we need 2 for
05:10 - that number to get a 1 and since in here
05:14 - we are dividing two integers together
05:15 - and let's first multiply this by a float
05:18 - to convert it into a float so if the
05:21 - amount is 30 this will return 1 if it is
05:23 - 20 to return 0 okay so let's make
05:26 - another function for removing a film bar
05:28 - so public static void remove film bar
05:32 - and in here we're simply going to remove
05:36 - the amount by amount per bar and make
05:40 - sure it's not under 0 if it isn't or 0
05:44 - set it to 0 and now we can make our code
05:47 - a little less error-prone
05:49 - with a function that automatically tests
05:51 - if we can actually remove a bar so let's
05:53 - make a public static boom try remove
05:57 - film bar and in here we're going to
06:01 - first test if you get film bar amount if
06:03 - it is bigger than 1 then we can actually
06:06 - remove it so then remove the film bar
06:08 - and once we do let's return true to say
06:11 - that this function was successful if not
06:13 - then return false so you can call this
06:17 - function whenever and if we do remove a
06:19 - film bar it'll return true if not it
06:21 - will return false okay so our journal in
06:24 - system is beginning to take shape now
06:26 - let's add a simple indicator to show if
06:28 - we have an adrenaline bar that we can
06:30 - use so let's head into the editor and
06:32 - here I have the player game object let
06:35 - me add an in
06:37 - game object let's come with the
06:39 - adrenaline icon and simply give it a
06:42 - sprite renderer with a circle sprite so
06:47 - this is one will simply be our indicator
06:48 - to show if we do have a bar that we can
06:50 - use so let's make it a bit bigger and
06:52 - tint it and it should work okay so this
06:55 - is our indicator in case we do have an
06:56 - adrenaline bar film that we can use
06:58 - we're going to enable it when you can
07:00 - and the same only 20 we can't
07:02 - so by default let's start with it
07:04 - disabled now let's head into the player
07:06 - script and all the way up here on the
07:08 - awake let's first grab a reference so
07:10 - here make a private game object for the
07:13 - adrenaline icon game object and we're
07:17 - going to grab it in here by doing
07:18 - transform dot fine our adrenaline icon
07:25 - so using that game object on our update
07:28 - let's do the adrenaline game object
07:31 - that's set active and this will only be
07:35 - enabled if we do have an adrenaline bar
07:37 - so go into the adrenaline class and get
07:40 - the film var amount and return if it is
07:42 - bigger than or equal to one so if we
07:45 - have at least one bar filled then the
07:48 - adrenaline icon won't be visible if not
07:50 - it won't be hidden and now just for
07:51 - testing let's go here into the normal
07:53 - update and they simple if input gif key
07:58 - down let's say key code II so if we do
08:03 - press the II let's try to spend an
08:06 - adrenaline bar so do an if adrenaline
08:09 - dot try remove the film bar and if we do
08:13 - successfully remove it let's spawn a
08:15 - pop-up so again using the CM debug let's
08:18 - fire text pop up on the mouse position
08:20 - and say bar spent so this is just for
08:26 - testing to see if the adrenaline system
08:28 - is working later on we're going to
08:30 - remove this code so to recap we added
08:32 - some functions to be able to remove and
08:35 - get the number of bars that are
08:36 - currently filled we add an icon to our
08:38 - player game object and on the player
08:40 - class we are setting that icon to
08:42 - visible if we do have at least
08:44 - one film bar if not it is invisible and
08:47 - when we press the e key we try to remove
08:50 - that film bar and if we do successfully
08:52 - remove it it says bar spent if we don't
08:54 - have a film bar then this function
08:56 - return false and there won't be no papa
08:58 - okay so let's test okay so here I am as
09:01 - you can see the icon is currently hidden
09:03 - now I can attack him you can see the
09:05 - pop-up saying the adrenaline amount so
09:07 - it is currently at 24 now if I hit the
09:10 - next one yep there's the icon right
09:11 - there
09:12 - and now if I press E if there you go the
09:14 - bar was spent and again I can increase
09:17 - and I can go up to the maximum of 15 now
09:20 - I can press E to spend one bar and yep
09:23 - there you go I still can use another one
09:25 - and I use it and there you go again go
09:27 - up and so on okay great so everything is
09:30 - working perfectly exactly as we wanted
09:32 - so far now let's add some bonus
09:34 - adrenaline on kill and also on a
09:36 - successful dodge so back in our player
09:38 - class let's go down to the handle attack
09:40 - function down here we are testing the
09:43 - mouse button we are not looking for it
09:44 - closer than me and we are attacking him
09:46 - if we do find them so we are causing
09:48 - damage to the enemy and now in here
09:51 - let's ask if the enemy dot is dead if
09:55 - the enemy is dead then we have killed
09:56 - them so let's add a bonus amount okay so
10:01 - that is pretty simple we add three of
10:03 - adrenaline for every hit and if we do
10:05 - kill him we add three on the killer hit
10:08 - now for the Dodge let's go all the way
10:10 - up here to see where we are handling the
10:13 - Dodge which we are testing for the
10:15 - spacebar if so we change the state to
10:17 - dodging which acts as the animation
10:19 - we'll look for the keys to get the move
10:21 - direction and we simply play dodge
10:24 - animation towards that direction and we
10:26 - move him while he's dodging okay so in
10:29 - here when we begin to dodge we want to
10:32 - test if we actually dodged any enemies
10:34 - we don't want to give a bonus adrenaline
10:36 - if you are just spamming the Dodge
10:37 - around but rather we only want to give a
10:39 - bonus if you actually dodge any enemy
10:42 - attack so the first thing we need is the
10:44 - number of enemies within range so for
10:46 - that we need to go into the enemy class
10:48 - and make that function so in here let's
10:50 - make a public static list of enemy
10:54 - and we're going to call this get enemy
10:57 - list in range we're going to receive a
11:01 - vector3 for the position and they float
11:05 - for the range so here let's cycle
11:07 - through all the enemies so for each
11:09 - enemy enemy in the enemy list let's do a
11:15 - simple test for D distance so if the
11:17 - vector 3 dot distance between the
11:20 - position and the enemy get position if
11:23 - that distance is under the range then
11:28 - the enemy is enraged saying here we want
11:30 - to add them to own list so let's make
11:32 - the list of enemy this will be our
11:34 - return list and down here we're going to
11:38 - return our list and here if it is in
11:40 - range and then add them to the list
11:42 - alright so we now have a nice simple
11:45 - function to get on the enemies within
11:46 - range so now we can go back into the
11:48 - player and here after we begin to dodge
11:51 - let's grab a list of enemies near the
11:54 - player position so let's grab a list of
11:56 - enemy for the enemy lists which is on
11:59 - the enemy dot get the enemy list in
12:02 - range in range of this position and by a
12:06 - certain amount which we're going to call
12:08 - dodge enemy distance so let's define
12:12 - here it's long for dodge enemy distance
12:14 - and let's give it say about 40 okay so
12:17 - we now have a list of enemies within 40
12:19 - units of our position so now let's cycle
12:22 - for each enemy on this list in the enemy
12:26 - list and I mean here we want to test if
12:30 - the enemy is attacking so if enemy that
12:32 - is attacking if the enemy is attacking
12:36 - then we do want to give bonus adrenaline
12:38 - so do adrenaline dot add adrenaline and
12:41 - let's give it also about 3 all right so
12:44 - that should do it
12:45 - let's test ok here I am and there's an
12:48 - enemy and I'm gonna hit him now I have 9
12:50 - if I hit him again yep there you go it
12:53 - was too pop-ups exactly on the same
12:55 - position but you can see that it trigger
12:56 - twice and gave me the bonus per kill
12:58 - only about 24 and now again - okay great
13:01 - now let me spend the bar and now let's
13:03 - test dodge so let one of them get
13:05 - now dodge and yep there you go I got
13:07 - bonus and their dodge and yep and if I
13:11 - get a lot of them attacking up once and
13:13 - I thought yep I have pretty much maxed
13:16 - out all right great so there you have it
13:19 - we created the adrenaline system as it's
13:21 - used in Assassin's Creed Odyssey we gain
13:23 - adrenaline on enemy hits per enemy kill
13:25 - and per successful dodge in the next
13:28 - video we're going to use a journaling to
13:29 - execute a spartan kick as always you can
13:32 - download the project files and utilities
13:34 - from unity code monkey comm if you have
13:36 - any questions post them in the comments
13:37 - and I'll do my best answer them
13:39 - subscribe for more videos and I'll see
13:40 - you next time

Cleaned transcript:

hello and welcome I'm your code monkey in this video we're going to make the adrenaline system from Assassin's Creed Odyssey the player gains adrenaline based on enemy heads and welltimed dodges in later videos we're going to use it for abilities like these parking kick alright let's begin okay here's my scene I have my Spartan character I can move them around there are some enemies that chase me and attack me and I can also attack them and I can dodge their attacks I can do a simple roll and dodge away so with this we have the base for creating our adrenaline system so let's check out how the code is setup over here is the player class it's pretty simple there are several states and on update it runs different logic based on the state so if the state is normal which means normal basic movement he handles the movement handles the movement by checking for the input and moving the transform then it also handles a Dodge by checking for the spacebar and finally it handles the attack which it simply test for the left mouse button click if so it looks for a nearby enemy if he finds when he damages him and plays the attack animation okay so let's make the adrenaline class so in here let's make a new csharp script and name it adrenaline in here let's first make it a static class since we only want there to be one adrenaline system and remove the mono behavior so the first thing we need is a certain amount for the adrenaline amount so a private static int for the amount then let's also make a maximum amount so a private static int for the amount Max and then we're going to divide the adrenaline by a certain number of bars essentially need to fill up an entire bar before you can actually use it so let's define a public constant for the amount per bar which let's say at 25 so essentially the amount needs to reach at least 25 in order for us to use it okay let's make now a public static void in it to initialize our adrenaline system so first set the amount to zero and let's calculate the amount max by the finding a certain number of bars so in for the bar amount and let's say two bars and we're going to define the amount max which will be the bar amount multip by the amount for a bar so in this case with two bars in each of them having 25 the amount max won't be 50 so now for some functions let's make a public static void add adrenaline and we're going to receive a parameter for the ad amount and in here we're similarly going to increase it by that amount so amount Falls equals ad amount and let's make sure we don't go over the max so if a month is bigger than a month max set the amount equals amount max okay and then let's do a debug pop up with the current amount just so we can see how much we actually have so for that I'm going to use the CM debug class which is part of the code monkey Tonys which as long as you can grab for free from unity code monkey calm so using code monkey and let's go down here use the CM debug to create a text pop up on the mouse position and that pop up won't simply say the amount this is just so we can see what is going on inside this class all right this is a nice starting point so let's go into the game handler which is our main script and in here and let's make a private void awake and on the awakened let's initialize the adrenalin system so adrenaline dot init and here on cert you can see we are setting the camera to follow the player and we are spawning an enemy every one and a half seconds okay so finally let's go into the player class and on the Hamel attack when we actually damage an enemy let's add some adrenaline so in here do adrenaline dot add adrenaline and let's give it a let's say three okay so let's test then we should see the popup whenever we attack an enemy okay here I am moving around if I attack nothing yep nothing happens but if I hit an enemy yup there you go you can see the various popups showing how much it's running we have and if I go up to a maximum of fifty yep you can see it doesn't go above the maximum okay great so now let's add some more functions to our adrenaline system first let's make a function to come like the number of film bars so make a public static int get film bar amount so this is meant to return how many bars we can actually use so the film bar is if the amount is bigger than the amount per bar so in here we are going to return the amount divided by amount per bar so if we have 25 then this one return 1 since we have one film bar however we have to account for when the amount is in between bars so in here let's do a math F dot for two int 2 for that value so essentially if the amount is 30 30 divided by 25 will essentially be one point something so we need 2 for that number to get a 1 and since in here we are dividing two integers together and let's first multiply this by a float to convert it into a float so if the amount is 30 this will return 1 if it is 20 to return 0 okay so let's make another function for removing a film bar so public static void remove film bar and in here we're simply going to remove the amount by amount per bar and make sure it's not under 0 if it isn't or 0 set it to 0 and now we can make our code a little less errorprone with a function that automatically tests if we can actually remove a bar so let's make a public static boom try remove film bar and in here we're going to first test if you get film bar amount if it is bigger than 1 then we can actually remove it so then remove the film bar and once we do let's return true to say that this function was successful if not then return false so you can call this function whenever and if we do remove a film bar it'll return true if not it will return false okay so our journal in system is beginning to take shape now let's add a simple indicator to show if we have an adrenaline bar that we can use so let's head into the editor and here I have the player game object let me add an in game object let's come with the adrenaline icon and simply give it a sprite renderer with a circle sprite so this is one will simply be our indicator to show if we do have a bar that we can use so let's make it a bit bigger and tint it and it should work okay so this is our indicator in case we do have an adrenaline bar film that we can use we're going to enable it when you can and the same only 20 we can't so by default let's start with it disabled now let's head into the player script and all the way up here on the awake let's first grab a reference so here make a private game object for the adrenaline icon game object and we're going to grab it in here by doing transform dot fine our adrenaline icon so using that game object on our update let's do the adrenaline game object that's set active and this will only be enabled if we do have an adrenaline bar so go into the adrenaline class and get the film var amount and return if it is bigger than or equal to one so if we have at least one bar filled then the adrenaline icon won't be visible if not it won't be hidden and now just for testing let's go here into the normal update and they simple if input gif key down let's say key code II so if we do press the II let's try to spend an adrenaline bar so do an if adrenaline dot try remove the film bar and if we do successfully remove it let's spawn a popup so again using the CM debug let's fire text pop up on the mouse position and say bar spent so this is just for testing to see if the adrenaline system is working later on we're going to remove this code so to recap we added some functions to be able to remove and get the number of bars that are currently filled we add an icon to our player game object and on the player class we are setting that icon to visible if we do have at least one film bar if not it is invisible and when we press the e key we try to remove that film bar and if we do successfully remove it it says bar spent if we don't have a film bar then this function return false and there won't be no papa okay so let's test okay so here I am as you can see the icon is currently hidden now I can attack him you can see the popup saying the adrenaline amount so it is currently at 24 now if I hit the next one yep there's the icon right there and now if I press E if there you go the bar was spent and again I can increase and I can go up to the maximum of 15 now I can press E to spend one bar and yep there you go I still can use another one and I use it and there you go again go up and so on okay great so everything is working perfectly exactly as we wanted so far now let's add some bonus adrenaline on kill and also on a successful dodge so back in our player class let's go down to the handle attack function down here we are testing the mouse button we are not looking for it closer than me and we are attacking him if we do find them so we are causing damage to the enemy and now in here let's ask if the enemy dot is dead if the enemy is dead then we have killed them so let's add a bonus amount okay so that is pretty simple we add three of adrenaline for every hit and if we do kill him we add three on the killer hit now for the Dodge let's go all the way up here to see where we are handling the Dodge which we are testing for the spacebar if so we change the state to dodging which acts as the animation we'll look for the keys to get the move direction and we simply play dodge animation towards that direction and we move him while he's dodging okay so in here when we begin to dodge we want to test if we actually dodged any enemies we don't want to give a bonus adrenaline if you are just spamming the Dodge around but rather we only want to give a bonus if you actually dodge any enemy attack so the first thing we need is the number of enemies within range so for that we need to go into the enemy class and make that function so in here let's make a public static list of enemy and we're going to call this get enemy list in range we're going to receive a vector3 for the position and they float for the range so here let's cycle through all the enemies so for each enemy enemy in the enemy list let's do a simple test for D distance so if the vector 3 dot distance between the position and the enemy get position if that distance is under the range then the enemy is enraged saying here we want to add them to own list so let's make the list of enemy this will be our return list and down here we're going to return our list and here if it is in range and then add them to the list alright so we now have a nice simple function to get on the enemies within range so now we can go back into the player and here after we begin to dodge let's grab a list of enemies near the player position so let's grab a list of enemy for the enemy lists which is on the enemy dot get the enemy list in range in range of this position and by a certain amount which we're going to call dodge enemy distance so let's define here it's long for dodge enemy distance and let's give it say about 40 okay so we now have a list of enemies within 40 units of our position so now let's cycle for each enemy on this list in the enemy list and I mean here we want to test if the enemy is attacking so if enemy that is attacking if the enemy is attacking then we do want to give bonus adrenaline so do adrenaline dot add adrenaline and let's give it also about 3 all right so that should do it let's test ok here I am and there's an enemy and I'm gonna hit him now I have 9 if I hit him again yep there you go it was too popups exactly on the same position but you can see that it trigger twice and gave me the bonus per kill only about 24 and now again okay great now let me spend the bar and now let's test dodge so let one of them get now dodge and yep there you go I got bonus and their dodge and yep and if I get a lot of them attacking up once and I thought yep I have pretty much maxed out all right great so there you have it we created the adrenaline system as it's used in Assassin's Creed Odyssey we gain adrenaline on enemy hits per enemy kill and per successful dodge in the next video we're going to use a journaling to execute a spartan kick as always you can download the project files and utilities from unity code monkey comm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time
