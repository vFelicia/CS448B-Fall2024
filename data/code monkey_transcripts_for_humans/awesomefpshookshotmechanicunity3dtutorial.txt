With timestamps:

00:00 - in this video we're going to make a hook
00:01 - shot mechanic in unity when we press a
00:04 - button we fire the hook shot and when it
00:06 - connects to an object it starts pulling
00:07 - the player towards it by jumping wrong
00:09 - being pulled we keep our momentum which
00:11 - lets us have some really cool movement
00:13 - let's begin
00:17 - [Music]
00:22 - hello and welcome I'm your code monkey
00:24 - and this channel is all about helping
00:26 - you learn how to make your own games
00:27 - with in-depth tutorials made by a
00:29 - professional indie game developer so if
00:31 - you find the video helpful consider
00:32 - subscribing okay so first of all the
00:34 - origin for this mechanic was from the
00:36 - FPS game that I made recently I took
00:38 - unities FPS micro game base and built a
00:40 - bunch of mechanics on top the hookshot
00:42 - has been the most requested one so here
00:44 - I won't cover exactly how it works if
00:47 - you haven't seen that video or played
00:48 - through the game then go check it out
00:49 - it's a very short game that you can play
00:51 - fully in your browser and it has some
00:53 - really interesting mechanics I've also
00:55 - done a showcase video where I go through
00:57 - the game and talk about all the elements
00:58 - I build so check that out as well now
01:01 - here this is what we want to create I
01:02 - have my player character in a very
01:04 - normal level and I can move and walk
01:06 - around now I can look at a point on that
01:08 - wall and by pressing a key there you go
01:11 - the hookshot goes flying it hooks onto
01:13 - the wall and it pulls me towards it then
01:16 - if I wait until I reach the destination
01:17 - the hookshot simply stops and I start
01:19 - falling down
01:20 - however if I'm mid-air being pulled and
01:23 - I press the jump button there you go the
01:24 - jump continues I contain with my
01:26 - momentum and it had some height so I can
01:29 - go in there jump above it and there you
01:30 - go just like that I can combine it with
01:33 - almost everything and move everywhere so
01:36 - with this I can really quickly get
01:38 - around level and get anywhere in like
01:39 - for example on this hidden area right up
01:42 - here yep there you go nice this is a
01:44 - really great fun mechanic to play around
01:46 - with and really makes your first-person
01:48 - shooter and a lot more fun to play
01:49 - alright so this circle let's get to it
01:53 - okay so here's our starting scene I'm
01:56 - standing in a basic world with a very
01:58 - basic FPS controller so I can move and I
02:01 - can look around I can jump and the
02:03 - character is affected by gravity over
02:05 - here in the editor you can see the setup
02:07 - for the character it has a standard
02:09 - character controller as well as a player
02:12 - character controller inside the game
02:14 - object we have our simple camera so
02:16 - let's check out the player character
02:18 - controller script okay here it is and
02:20 - it's very small and very simple we grab
02:23 - the character controller as well as the
02:25 - camera we also make sure to lock the
02:27 - mouse in the center then we just have
02:29 - two functions one which were happy mouse
02:31 - input and simply rotates the transform
02:33 - and the
02:34 - another function to handle our very
02:36 - simple movement so you grab the input
02:38 - create a velocity vector then we test if
02:41 - we should jump we apply gravity to our
02:43 - character velocity and finally we move
02:45 - the character controller so here is our
02:47 - very simple character controller all
02:49 - right now our goal here is to make a
02:51 - hook-shot mechanic so we want to be able
02:53 - to look at a certain position then press
02:55 - a button as soon as we do a hook-shot
02:57 - won't be thrown from the player towards
02:59 - that position and when it connects it
03:01 - should pull the player towards it okay
03:03 - so here in our player controller let's
03:05 - go all the way down here and make a
03:07 - private boy call it handle hook shot
03:11 - start so we're going to call this on
03:15 - update so up here we handled all the
03:17 - movement and now the hook shot
03:19 - now in here let's search for a simple
03:21 - key input so let's simply do a input get
03:25 - key down of let's say when we press the
03:28 - e so when we press a key let's test what
03:31 - we're looking at so the way we do that
03:33 - is by making a simple physics dot
03:36 - raycast so here it takes an origin and a
03:39 - direction so we go into the player
03:41 - camera grab the transform position then
03:44 - for the direction we use the player
03:46 - camera transform and we use the forward
03:50 - vector since the camera is already I'm
03:52 - looking at the mouse position so just
03:54 - like that we have our origin and our
03:55 - direction and now we can use the final
03:58 - parameter to get our ray cast hit and
04:01 - this returns a boolean if it does hit
04:04 - something okay just like that so here we
04:09 - can use the raycast hit and use the
04:12 - point which contains the exact point
04:15 - where the rake has hit the collider all
04:17 - right so let's see how we can test this
04:18 - now we can go up here to add a field for
04:22 - a simple transform so let's add another
04:25 - serialize field or a private transform
04:28 - let's call this the debug hit point
04:31 - transform okay now we go into the editor
04:36 - here's our script with our field so
04:39 - let's create a new cue and let's apply
04:43 - this nice material so it's nice and
04:45 - green okay okay let's write the
04:47 - reference for the
04:47 - cube in there there it is you know here
04:50 - when we hit something
04:51 - let's simply take our debug transform
04:54 - and set the position to be our break
04:56 - asset dot point
04:58 - okay that should do it so we do a recast
05:01 - towards where we're looking at and if we
05:03 - hit something we're going to place our
05:04 - object exactly where we hit let's see
05:07 - okay here we are and there's the nice
05:09 - cube now let's look in there Pressey any
05:11 - of there you go the cube gets placed
05:13 - exactly where I pressed so there you go
05:15 - just like that I can look anywhere and
05:17 - it's correctly doing a recast and
05:19 - hitting the correct position all right
05:21 - awesome
05:21 - now back in our code when we have the
05:24 - correct position we want to move towards
05:26 - it so let's go all the way up here to
05:28 - make this a simple state machine so
05:30 - first we define an enum for our state's
05:34 - and we're going to start off just with a
05:37 - normal state so we also have a variable
05:42 - - home our current state and on awake we
05:46 - start off as normal
05:47 - okay then on the update we can do a
05:50 - simple switch on our state okay if we
05:56 - our state normal we do the same we were
05:58 - doing previously okay and now we can
06:00 - make another state for when the player
06:02 - is being pulled by the hookshot
06:05 - and now we do a different thing on our
06:08 - case this state okay so let's make the
06:12 - function that we're going to run in here
06:16 - so we have a function to handle our
06:18 - hookshot movement and we simply call it
06:21 - on our update in here okay and when we
06:24 - start our hookshot
06:24 - let's modify our state to be our new
06:28 - hookshot flying state all right so we
06:30 - have implemented a very basic state
06:32 - machine now here in our hookshot
06:34 - movement we're going to move the
06:36 - character controller so pretty much the
06:38 - same as this so in order to do it we
06:40 - need a direction in order to calculate
06:42 - the direction we need a position so
06:44 - let's store our hookshot position so we
06:47 - store a vector3 for the hookshot
06:49 - position and down here when we hit
06:53 - something well it said the hookshot
06:56 - position to be our rake asset dot point
06:59 - okay so now we know exactly where we
07:01 - want to hook into so now on the hookshot
07:04 - movement we can calculate a vector3 for
07:06 - the hookshot direction and direction is
07:09 - simply the target position - our current
07:11 - position and normalize that vector okay
07:16 - so we have the hookshot direction as
07:17 - well as the position and now we can
07:19 - simply move it towards our hookshot
07:21 - direction just like that and it's also
07:24 - quite basic pop shot speed okay so here
07:29 - it is very simple as soon as we press on
07:31 - the e we're going to do a recast if the
07:33 - raycast hits something then we're going
07:35 - to set our hook shot position vector and
07:36 - we're going to modify our state then
07:38 - when we have this state we're going to
07:40 - call this function and in this function
07:42 - we're going to calculate the direction
07:43 - towards our hook shot position and we're
07:46 - simply going to move the character
07:47 - towards it at a certain speed
07:48 - let's test okay here we are let's click
07:51 - in there and press E and there you go it
07:53 - correctly set the hook shot position and
07:55 - it's moving towards it right great but
07:57 - you can already see plenty of issues
07:59 - first of all there's no camera movement
08:01 - I'm moving the mouse but the camera
08:02 - isn't loading anywhere then we also have
08:04 - an issue with a speed being extremely
08:06 - slow and finally when we reach our hook
08:09 - shot position yep we are stuck and we no
08:11 - longer fall down that's because we did
08:13 - not reset our state so let's solve all
08:16 - of those issues
08:17 - first of all dealing with the camera
08:18 - looking is extremely simple we already
08:20 - have a separate function just the hand
08:22 - on the character and look and only need
08:24 - to do is also call this well skier
08:25 - flying there it is let's see okay here
08:28 - we are on with NER press E and there you
08:30 - go now I'm being pulled towards it and I
08:32 - can say look around okay so far so good
08:34 - now let's see always resetting our state
08:36 - so we go all the way down here where we
08:38 - are handling our hookshot movement and
08:41 - after removing let's do a very simple
08:43 - distance check so we do if vector3
08:45 - distance the distance between the
08:48 - current transformed our position and the
08:50 - hookshot position if that distance is
08:53 - under a certain amount
08:58 - if it isn't there a certain amount and
09:01 - we have reached our hookshot position so
09:03 - it's in here that we want to reset back
09:04 - to our normal state so we simply set the
09:06 - state equals our state normal okay
09:10 - that's pretty much it let's see so here
09:12 - we are on let's look in there press e
09:14 - and there you go I'm being pulled toward
09:16 - extremely slowly so let's wait until we
09:18 - get there
09:19 - okay we're almost there and when I reach
09:21 - the hookshot position yep there you go I
09:23 - phone down according to the gravity
09:24 - exactly as intended all right awesome so
09:27 - now the remaining issue is with the
09:29 - speed so when I press it's very slow we
09:31 - want to speed it up and be faster at the
09:33 - beginning and then slower at the end so
09:35 - here in our hookshot movement let's play
09:37 - around with our speed and we will make
09:39 - it faster in that slower is by having
09:41 - the movement be based on the distance so
09:43 - we set the hookshot speed to be a
09:45 - distance between our transform position
09:47 - and the hookshot position okay so just
09:50 - like this the speed will be faster the
09:51 - further away we are and then let's also
09:53 - have a secondary speed multiplier just
09:58 - in case our actual distance is too slow
10:00 - of a speed so then in here we use the
10:03 - hookshot speed multiplied by the
10:04 - multiplier and by Delta time okay so
10:07 - just like this we should be able to see
10:08 - our speed faster and then slower let's
10:10 - see so here we are let's look in there
10:11 - proceed and there you go he pulls really
10:14 - fast and then really slow and then he
10:15 - falls out so click go really fast really
10:18 - slow and slow down right great so this
10:21 - is working however we have an issue with
10:23 - the speed being way too low as we reach
10:25 - very close towards the end we should
10:28 - keep a minimum velocity at all times so
10:30 - it's very simple to do that here on our
10:33 - speed we can simply define a minimum and
10:36 - a maximum
10:40 - okay we have our minimum and maximum and
10:43 - then we simply do a math F dot clamp and
10:45 - we're going to clamp this value between
10:47 - our minimum and our maximum so no matter
10:51 - how close we are we are never going to
10:53 - move slower than this one and no matter
10:54 - how far we are it's never going to be
10:56 - faster than this one let's test so here
10:59 - I am looking there press E and there yo
11:01 - gets foamed and yep there you go the
11:03 - speed is no longer super slow at the
11:05 - bottom and goes just like that so now we
11:08 - can play around with the multiplier and
11:10 - with the various values okay here it is
11:12 - press e and there you go gets one really
11:14 - fast and then slows down but it always
11:16 - remains quite a nice speed yep just like
11:20 - that all right great now one other issue
11:22 - we have is regarding our gravity so
11:25 - right now the gravity is not resetting
11:27 - so as I hookshot
11:29 - if I don't let it touch the floor there
11:31 - you go the gravity becomes more and more
11:33 - intense so just like that I almost fall
11:35 - down instantly so let's go into the code
11:37 - now the reason why that is happening is
11:40 - because of how we decide to handle our
11:41 - grouting so we have a character velocity
11:44 - Y that we are pushing down on every
11:46 - frame and it only gets reset when the
11:48 - character is ground so if the character
11:50 - never actually gets grounded then the
11:52 - gravity down force just keeps increasing
11:54 - and increasing so we can fix this very
11:56 - simply by resetting our gravity velocity
11:59 - Y force whenever we go back into our
12:01 - normal state so we can simply do a
12:03 - private coin called reset gravity effect
12:08 - and you simply do what we were doing
12:10 - here so we set the velocity right back
12:12 - into zero and then down here when we go
12:15 - back into our normal state we reset our
12:17 - gravity effect okay let's test so here I
12:20 - am and I can hook shot and hook shot
12:22 - again and again and you have to go the
12:24 - gravity is now resetting every time I
12:26 - hook shot so I can keep jumping up and
12:28 - down and never touch the floor all right
12:31 - awesome
12:32 - so I can hook shot anywhere and the
12:34 - effect is already starting to look quite
12:36 - nice however right now we have no
12:39 - control in me there so we get pulled
12:40 - towards it and we can only go back into
12:42 - moving as soon as we reach the position
12:44 - so let's first add a simple cancel so we
12:47 - can cancel the hookshot whilst moving in
12:49 - midair so when we are handling our
12:51 - hookshot movement
12:52 - let's test for the
12:53 - input that we use to start our hook shot
12:55 - so here and put this into a separate
12:58 - function okay on this one we just
13:04 - returned our function and just like that
13:07 - we use it in here okay so this way if we
13:10 - want to change our input we just have to
13:12 - modify this function so then in here we
13:14 - first if we press that same input so if
13:19 - you press the same input once we're
13:21 - moving one to cancel the hookshot in
13:23 - order to cancel it it's extremely simple
13:25 - all we have to do is pretty much just
13:26 - this we reset into our normal state that
13:29 - should do it let's test okay here I am
13:32 - and let's hook shot in there and stop in
13:34 - the middle any of there you go he stops
13:35 - immediately and starts falling down so I
13:38 - can now cancel them anywhere I want so
13:40 - cancel cancel and yep just like that
13:42 - okay so cancel is great but now let's
13:44 - see on with the more interesting action
13:46 - of jumping well cinema there so back in
13:49 - our code let's also make another
13:51 - function for testing the input on the
13:53 - jump since in here we're using the key
13:54 - directly okay so we test the jump on the
14:01 - space and we can also use it in here
14:03 - instead of hard-coding our key okay and
14:06 - on our handle hookshot movement we test
14:08 - if we hit space lost in midair so if we
14:14 - jump once the hookshot is active then we
14:16 - want to keep our hookshot momentum and
14:18 - add a nice jump onto it so before we can
14:21 - handle this we need to first handle our
14:23 - character velocity momentum so we go all
14:26 - the way up here next to our camera
14:27 - velocity we define a vector3
14:30 - call it our character velocity momentum
14:33 - and then on our handle movement before
14:37 - we move our character let's apply our
14:40 - character momentum we simply increase
14:43 - the character velocity by our momentum
14:49 - okay just like that and then afterwards
14:51 - we want to dampen the momentum
15:06 - okay so here we have some nice momentum
15:09 - being dampened so we tested magnitude is
15:12 - more than zero if so then we define a
15:14 - drag value and we simply reduce our
15:16 - momentum by the drive value by
15:18 - time.deltatime and when it's small
15:20 - enough we simply set it to zero some
15:23 - like this we are applying our momentum
15:24 - and then constantly reducing it so down
15:27 - here now when we press jump and we
15:29 - cancel our hookshot we can simply set
15:31 - the character velocity momentum to be
15:34 - our current hookshot Direction
15:36 - multiplied by the current Oakshott speed
15:38 - and then multiplied by a little extra
15:44 - and after we set the momentum we cancel
15:47 - and go back into our normal state all
15:49 - right did she do it let's test okay so
15:52 - lets hook shot and then stop so hook
15:53 - shot press jump and there you go he
15:56 - jumps and he goes once in midair so just
15:58 - like that go jump and he stops but he
16:01 - keeps up with its momentum so I go there
16:03 - I jump and there we go he keeps it like
16:06 - that all right
16:08 - great so it's starting to feel really
16:10 - nice now since we were pressing jump
16:13 - let's add a bit of a vertical movement
16:15 - as well so in order to add our jump it's
16:18 - extremely simple over here we have our
16:20 - character velocity momentum based on the
16:22 - hookshot direction and then we need to
16:24 - do is apply this and then we simply and
16:26 - a vector3 dot up multiplied by a certain
16:30 - jump speed alright that's pretty much it
16:35 - let's see so here I am go in there press
16:39 - space and here you go now I can nicely
16:41 - and jump on top of that and there you go
16:44 - I can play around and I can already move
16:47 - almost everywhere so here we have our
16:50 - nice hook shot looking better and better
16:52 - right awesome now so far our hook shot
16:55 - has been instant so the second that I
16:57 - press the button I get fall towards it
16:59 - so let's first make a visual that
17:01 - travels towards the hook shot position
17:03 - and only when it connects do we get
17:04 - pumped so the way we're going to do that
17:06 - is extremely simple here in the editor
17:08 - let's make a new cube here is the cube
17:11 - let's make it a bit darker okay and now
17:15 - let's put it as a child of the player
17:17 - put it on zero zero zero and let's make
17:20 - it thinner on the X and on the Y and
17:22 - leave the set okay and now the way we're
17:25 - going to do this is we're going to
17:27 - increase the set scale until it reaches
17:29 - the position however just like this it's
17:31 - not going to work since when we scale
17:33 - we're scaling from the middle instead of
17:34 - from the edge so the way we do that is
17:37 - we make a new game object comment our
17:40 - hookshot make the cube h out of it
17:43 - and now we just need to shift it forward
17:45 - by half of its size so by 0.5 on the set
17:47 - and now we have the hookshot and we can
17:50 - modify this game about set and there we
17:51 - go it now increases straight from there
17:53 - alright so now let's go to the code and
17:55 - first of all let's go all the way up
17:57 - here at a field for our hookshot
17:59 - transform and let's drag the reference
18:03 - there's a reference just drag the
18:05 - hookshot transfer okay
18:06 - and now back in our states let's add a
18:09 - new state we're going to call this the
18:11 - hookshot
18:11 - thrown so we have an extra state and on
18:16 - our update let's handle another case for
18:19 - the hookshot thrown and then down here
18:22 - when we have our hook shot start instead
18:24 - of going straight into the flowing let's
18:26 - go into the thrown state and then we're
18:29 - going to make a function call it handle
18:31 - hook shot throw and this is the function
18:35 - that we call whilst we're in our thrown
18:37 - state so we just like that and I once in
18:40 - this state it's extremely simple we just
18:42 - take our hookshot transform and we can
18:45 - look at and here we can pass in our
18:48 - target position so that's going to be
18:50 - our cookshop position so we can look at
18:52 - that position and then we want to scale
18:54 - towards it
18:55 - so let's go up here to define a float
18:57 - for our hook shot sighs okay we have our
19:01 - hook shot sighs and down here when we
19:03 - modify our state let's set the size back
19:05 - into zero and then on the hookshot throw
19:08 - we simply go and increase the size by a
19:11 - certain hook shot throw speed
19:17 - then we apply this size into our
19:19 - transform okay so we have the size
19:24 - constantly increasing and updating the
19:26 - transform and now we need our end
19:28 - condition so for that we do a simple
19:30 - distance check so if the hookshot size
19:37 - is bigger than the distance towards our
19:39 - hookshot position then we have
19:41 - essentially reached it with our hoja so
19:43 - when we do we simply go into the next
19:45 - state
19:47 - okay so let's pretty much it now all we
19:50 - need to do is call this function on our
19:51 - talk-show our own state and when you do
19:54 - let's also handle the unlock and the
19:56 - movement okay let's test okay here we
19:59 - are
19:59 - and now the first issue that we can
20:01 - already see is that the hookshot is
20:02 - currently visible whereas it should be
20:04 - invisible but we'll fix that later but
20:06 - we can look and we can look in there and
20:09 - press the E and there you go the
20:10 - hookshot starts being thrown and there
20:12 - it goes very slowly and I can still look
20:14 - around I can move and when it finally
20:17 - connects with our hookshot position
20:19 - there you go almost there almost there
20:20 - and yep just like that Connect and
20:24 - finally yep there you go I get pull
20:26 - alright so the speed is obviously very
20:28 - bad and this should be hidden but let's
20:30 - start those things so first in dealing
20:32 - with the visibility let's try to make
20:37 - our awake we go into the transform we
20:39 - set the game object active to false and
20:43 - then when we start our hook shot
20:46 - when the hookshot gets thrown let's set
20:48 - it to active to true and when we cancel
20:52 - it let's set it back into false now here
20:57 - we can already see some very nasty code
20:59 - duplication so let's fix this while
21:01 - we're at it
21:07 - okay so just like this our cup looks
21:09 - better and now let's see on with the
21:11 - speed of our hook shot being thrown here
21:13 - it is we have a very simple speed and
21:16 - now here we have two options we can put
21:18 - a static speed or we can do the same
21:19 - thing with it with our hook shot
21:21 - movement making it dependent on the
21:22 - distance in this case let's simply make
21:24 - it just static since it's a very quick
21:26 - effect so we just make this quite a bit
21:29 - faster and let's try okay here where I'm
21:32 - looking there press E and there you go
21:33 - there goes the hook shot sound a bit too
21:35 - slow but yep it's going much faster when
21:37 - it connects it goes and we can already
21:39 - see another issue which is after it
21:42 - connects and it starts being thrown and
21:44 - there you go it no longer rotates
21:46 - towards the correct position so it's
21:48 - sort of those issues first word speed
21:50 - let's increase it quite a bit more then
21:53 - when we start there's also a frame where
21:54 - we can actually see it so here when he
21:57 - set it to active to true oh it's all set
21:58 - the local scale to zero so that is very
22:02 - small okay and finally we want to look
22:05 - at the hookshot position whilst we're
22:07 - handling our hook shaft movement okay
22:10 - that should fix all of our issues let's
22:11 - see so here we are in first of all it
22:14 - starts off hidden so far so good now
22:15 - looking there press E and there you go
22:17 - there goes the hook shot and gets pulled
22:18 - towards it and it still rotates looking
22:20 - at it as it's going like that okay so
22:24 - now let's make it quite a bit faster
22:27 - okay so here we are and let's test in
22:30 - yep there we go the speed is now much
22:32 - faster and as I'm being a hook shot
22:33 - there you go
22:34 - it always points towards the hookshot
22:36 - position just like that and I phoned out
22:38 - and I can come back and there you go and
22:40 - I can also move while some hook shouting
22:43 - so hook shot and I can still move whilst
22:45 - it's being thrown all right so our
22:48 - effect is starting to look very very
22:49 - nice now let's add a couple more things
22:52 - first of all let's change the camera fov
22:54 - while flying to really give the illusion
22:55 - of speed here the camera already has a
22:58 - very simple script attached onto it here
23:00 - it is extremely simple extremely small
23:02 - we just have a target fov and occurring
23:04 - FOV and on update we simply lower power
23:07 - current fov towards the target and then
23:09 - we have a function that we can set our
23:10 - camera FOV so let's use this first we
23:13 - need a reference to our camera fov
23:15 - script
23:21 - so you grab our component okay and now
23:24 - let's also define some constants for our
23:26 - two types of FOV okay so normal we have
23:33 - 60 film to view and on hook shot let's
23:35 - put it at 100 and now we simply use this
23:38 - so we grab our camera movie and down
23:40 - here on our hook shot
23:42 - okay so first was throwing okay and then
23:44 - only when we actually grab it then we go
23:47 - into camera fov and we set the camera
23:49 - fov and let's use the hook shot fov and
23:51 - then when we cancel so here on our stop
23:54 - hook shot function we simply reset it
23:56 - into the normal ethylene alright let you
24:00 - do it let's test okay here on with soap
24:02 - shot in there any of their yo you can
24:04 - see the hook shot changes the fov does
24:07 - giving a very nice illusion of speed all
24:10 - right so it's looking quite nice now one
24:13 - more thing let's add a particle system
24:15 - so here I have a particle system that
24:18 - I've set up it just has some nice trails
24:20 - so we're going to enable this once the
24:22 - player is flying so here in the code
24:24 - let's grab our particle system
24:35 - so you grabbed the particle system
24:37 - reference and then when we start our
24:39 - hook shot at the same place as we modify
24:41 - our fov we simply call this on play and
24:45 - when we stop we simply call stop okay
24:50 - that's it very simple let's test okay so
24:53 - here I am
24:53 - hook shot in there and there you go the
24:55 - fov changes and we have the nice
24:57 - particles to really sell the illusion of
24:59 - speed so I can go jump jump and yep just
25:04 - like that I can go anywhere I can fall
25:06 - off the mouse and using the jump I can
25:09 - try it yep and I made it in and back in
25:11 - here and playing around alright so here
25:14 - we have our very cool hook shot
25:16 - and here on the left side I have a nice
25:18 - special hidden area in there and now we
25:20 - can try to hook shot and try to get up
25:22 - there so hook shot and jump hook shot
25:24 - and jump hook shot and jump and there
25:26 - you go I managed to make it all the way
25:27 - up here so just like this we have a
25:30 - really cool mechanic to play around with
25:32 - and it feels really great we can hook
25:34 - shot we can jump we have all the effects
25:37 - to make it work awesome and it works
25:40 - great all right awesome
25:42 - now you could expand upon this design
25:45 - and make it so that the hook shot only
25:46 - connects to certain areas rather than
25:48 - every single surface you could also add
25:51 - a maximum distance so you couldn't hook
25:52 - shot on to infinity and you could also
25:55 - add some gravity once being hook shot
25:57 - and it would essentially turn the hook
25:59 - shot into a rope mechanic so using this
26:01 - as a base you can get really creative
26:03 - and make something that perfectly suits
26:05 - your game and again if you haven't
26:07 - played it yet then go check out the game
26:08 - I made using the FPS micro game as a
26:11 - base which uses this mechanic it's a
26:13 - really quick game that you can play in
26:15 - our browser and it's really fun and
26:16 - combines this mechanic with enemies and
26:18 - shooting watched showcase video where I
26:20 - talk more about how I made that game and
26:22 - all the elements that go into it I'm
26:25 - currently working on videos covering the
26:26 - shield shader effect as well as the key
26:28 - door system so if you're watching this
26:30 - in the future go check out those links
26:32 - in the description as always you can
26:33 - download the project files in a tony's
26:35 - from unity cosmic
26:36 - subscribe to the channel for more unity
26:39 - deterrents post any questions you have
26:41 - in the comments and I'll see you next
26:42 - time
26:44 - [Music]

Cleaned transcript:

in this video we're going to make a hook shot mechanic in unity when we press a button we fire the hook shot and when it connects to an object it starts pulling the player towards it by jumping wrong being pulled we keep our momentum which lets us have some really cool movement let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with indepth tutorials made by a professional indie game developer so if you find the video helpful consider subscribing okay so first of all the origin for this mechanic was from the FPS game that I made recently I took unities FPS micro game base and built a bunch of mechanics on top the hookshot has been the most requested one so here I won't cover exactly how it works if you haven't seen that video or played through the game then go check it out it's a very short game that you can play fully in your browser and it has some really interesting mechanics I've also done a showcase video where I go through the game and talk about all the elements I build so check that out as well now here this is what we want to create I have my player character in a very normal level and I can move and walk around now I can look at a point on that wall and by pressing a key there you go the hookshot goes flying it hooks onto the wall and it pulls me towards it then if I wait until I reach the destination the hookshot simply stops and I start falling down however if I'm midair being pulled and I press the jump button there you go the jump continues I contain with my momentum and it had some height so I can go in there jump above it and there you go just like that I can combine it with almost everything and move everywhere so with this I can really quickly get around level and get anywhere in like for example on this hidden area right up here yep there you go nice this is a really great fun mechanic to play around with and really makes your firstperson shooter and a lot more fun to play alright so this circle let's get to it okay so here's our starting scene I'm standing in a basic world with a very basic FPS controller so I can move and I can look around I can jump and the character is affected by gravity over here in the editor you can see the setup for the character it has a standard character controller as well as a player character controller inside the game object we have our simple camera so let's check out the player character controller script okay here it is and it's very small and very simple we grab the character controller as well as the camera we also make sure to lock the mouse in the center then we just have two functions one which were happy mouse input and simply rotates the transform and the another function to handle our very simple movement so you grab the input create a velocity vector then we test if we should jump we apply gravity to our character velocity and finally we move the character controller so here is our very simple character controller all right now our goal here is to make a hookshot mechanic so we want to be able to look at a certain position then press a button as soon as we do a hookshot won't be thrown from the player towards that position and when it connects it should pull the player towards it okay so here in our player controller let's go all the way down here and make a private boy call it handle hook shot start so we're going to call this on update so up here we handled all the movement and now the hook shot now in here let's search for a simple key input so let's simply do a input get key down of let's say when we press the e so when we press a key let's test what we're looking at so the way we do that is by making a simple physics dot raycast so here it takes an origin and a direction so we go into the player camera grab the transform position then for the direction we use the player camera transform and we use the forward vector since the camera is already I'm looking at the mouse position so just like that we have our origin and our direction and now we can use the final parameter to get our ray cast hit and this returns a boolean if it does hit something okay just like that so here we can use the raycast hit and use the point which contains the exact point where the rake has hit the collider all right so let's see how we can test this now we can go up here to add a field for a simple transform so let's add another serialize field or a private transform let's call this the debug hit point transform okay now we go into the editor here's our script with our field so let's create a new cue and let's apply this nice material so it's nice and green okay okay let's write the reference for the cube in there there it is you know here when we hit something let's simply take our debug transform and set the position to be our break asset dot point okay that should do it so we do a recast towards where we're looking at and if we hit something we're going to place our object exactly where we hit let's see okay here we are and there's the nice cube now let's look in there Pressey any of there you go the cube gets placed exactly where I pressed so there you go just like that I can look anywhere and it's correctly doing a recast and hitting the correct position all right awesome now back in our code when we have the correct position we want to move towards it so let's go all the way up here to make this a simple state machine so first we define an enum for our state's and we're going to start off just with a normal state so we also have a variable home our current state and on awake we start off as normal okay then on the update we can do a simple switch on our state okay if we our state normal we do the same we were doing previously okay and now we can make another state for when the player is being pulled by the hookshot and now we do a different thing on our case this state okay so let's make the function that we're going to run in here so we have a function to handle our hookshot movement and we simply call it on our update in here okay and when we start our hookshot let's modify our state to be our new hookshot flying state all right so we have implemented a very basic state machine now here in our hookshot movement we're going to move the character controller so pretty much the same as this so in order to do it we need a direction in order to calculate the direction we need a position so let's store our hookshot position so we store a vector3 for the hookshot position and down here when we hit something well it said the hookshot position to be our rake asset dot point okay so now we know exactly where we want to hook into so now on the hookshot movement we can calculate a vector3 for the hookshot direction and direction is simply the target position our current position and normalize that vector okay so we have the hookshot direction as well as the position and now we can simply move it towards our hookshot direction just like that and it's also quite basic pop shot speed okay so here it is very simple as soon as we press on the e we're going to do a recast if the raycast hits something then we're going to set our hook shot position vector and we're going to modify our state then when we have this state we're going to call this function and in this function we're going to calculate the direction towards our hook shot position and we're simply going to move the character towards it at a certain speed let's test okay here we are let's click in there and press E and there you go it correctly set the hook shot position and it's moving towards it right great but you can already see plenty of issues first of all there's no camera movement I'm moving the mouse but the camera isn't loading anywhere then we also have an issue with a speed being extremely slow and finally when we reach our hook shot position yep we are stuck and we no longer fall down that's because we did not reset our state so let's solve all of those issues first of all dealing with the camera looking is extremely simple we already have a separate function just the hand on the character and look and only need to do is also call this well skier flying there it is let's see okay here we are on with NER press E and there you go now I'm being pulled towards it and I can say look around okay so far so good now let's see always resetting our state so we go all the way down here where we are handling our hookshot movement and after removing let's do a very simple distance check so we do if vector3 distance the distance between the current transformed our position and the hookshot position if that distance is under a certain amount if it isn't there a certain amount and we have reached our hookshot position so it's in here that we want to reset back to our normal state so we simply set the state equals our state normal okay that's pretty much it let's see so here we are on let's look in there press e and there you go I'm being pulled toward extremely slowly so let's wait until we get there okay we're almost there and when I reach the hookshot position yep there you go I phone down according to the gravity exactly as intended all right awesome so now the remaining issue is with the speed so when I press it's very slow we want to speed it up and be faster at the beginning and then slower at the end so here in our hookshot movement let's play around with our speed and we will make it faster in that slower is by having the movement be based on the distance so we set the hookshot speed to be a distance between our transform position and the hookshot position okay so just like this the speed will be faster the further away we are and then let's also have a secondary speed multiplier just in case our actual distance is too slow of a speed so then in here we use the hookshot speed multiplied by the multiplier and by Delta time okay so just like this we should be able to see our speed faster and then slower let's see so here we are let's look in there proceed and there you go he pulls really fast and then really slow and then he falls out so click go really fast really slow and slow down right great so this is working however we have an issue with the speed being way too low as we reach very close towards the end we should keep a minimum velocity at all times so it's very simple to do that here on our speed we can simply define a minimum and a maximum okay we have our minimum and maximum and then we simply do a math F dot clamp and we're going to clamp this value between our minimum and our maximum so no matter how close we are we are never going to move slower than this one and no matter how far we are it's never going to be faster than this one let's test so here I am looking there press E and there yo gets foamed and yep there you go the speed is no longer super slow at the bottom and goes just like that so now we can play around with the multiplier and with the various values okay here it is press e and there you go gets one really fast and then slows down but it always remains quite a nice speed yep just like that all right great now one other issue we have is regarding our gravity so right now the gravity is not resetting so as I hookshot if I don't let it touch the floor there you go the gravity becomes more and more intense so just like that I almost fall down instantly so let's go into the code now the reason why that is happening is because of how we decide to handle our grouting so we have a character velocity Y that we are pushing down on every frame and it only gets reset when the character is ground so if the character never actually gets grounded then the gravity down force just keeps increasing and increasing so we can fix this very simply by resetting our gravity velocity Y force whenever we go back into our normal state so we can simply do a private coin called reset gravity effect and you simply do what we were doing here so we set the velocity right back into zero and then down here when we go back into our normal state we reset our gravity effect okay let's test so here I am and I can hook shot and hook shot again and again and you have to go the gravity is now resetting every time I hook shot so I can keep jumping up and down and never touch the floor all right awesome so I can hook shot anywhere and the effect is already starting to look quite nice however right now we have no control in me there so we get pulled towards it and we can only go back into moving as soon as we reach the position so let's first add a simple cancel so we can cancel the hookshot whilst moving in midair so when we are handling our hookshot movement let's test for the input that we use to start our hook shot so here and put this into a separate function okay on this one we just returned our function and just like that we use it in here okay so this way if we want to change our input we just have to modify this function so then in here we first if we press that same input so if you press the same input once we're moving one to cancel the hookshot in order to cancel it it's extremely simple all we have to do is pretty much just this we reset into our normal state that should do it let's test okay here I am and let's hook shot in there and stop in the middle any of there you go he stops immediately and starts falling down so I can now cancel them anywhere I want so cancel cancel and yep just like that okay so cancel is great but now let's see on with the more interesting action of jumping well cinema there so back in our code let's also make another function for testing the input on the jump since in here we're using the key directly okay so we test the jump on the space and we can also use it in here instead of hardcoding our key okay and on our handle hookshot movement we test if we hit space lost in midair so if we jump once the hookshot is active then we want to keep our hookshot momentum and add a nice jump onto it so before we can handle this we need to first handle our character velocity momentum so we go all the way up here next to our camera velocity we define a vector3 call it our character velocity momentum and then on our handle movement before we move our character let's apply our character momentum we simply increase the character velocity by our momentum okay just like that and then afterwards we want to dampen the momentum okay so here we have some nice momentum being dampened so we tested magnitude is more than zero if so then we define a drag value and we simply reduce our momentum by the drive value by time.deltatime and when it's small enough we simply set it to zero some like this we are applying our momentum and then constantly reducing it so down here now when we press jump and we cancel our hookshot we can simply set the character velocity momentum to be our current hookshot Direction multiplied by the current Oakshott speed and then multiplied by a little extra and after we set the momentum we cancel and go back into our normal state all right did she do it let's test okay so lets hook shot and then stop so hook shot press jump and there you go he jumps and he goes once in midair so just like that go jump and he stops but he keeps up with its momentum so I go there I jump and there we go he keeps it like that all right great so it's starting to feel really nice now since we were pressing jump let's add a bit of a vertical movement as well so in order to add our jump it's extremely simple over here we have our character velocity momentum based on the hookshot direction and then we need to do is apply this and then we simply and a vector3 dot up multiplied by a certain jump speed alright that's pretty much it let's see so here I am go in there press space and here you go now I can nicely and jump on top of that and there you go I can play around and I can already move almost everywhere so here we have our nice hook shot looking better and better right awesome now so far our hook shot has been instant so the second that I press the button I get fall towards it so let's first make a visual that travels towards the hook shot position and only when it connects do we get pumped so the way we're going to do that is extremely simple here in the editor let's make a new cube here is the cube let's make it a bit darker okay and now let's put it as a child of the player put it on zero zero zero and let's make it thinner on the X and on the Y and leave the set okay and now the way we're going to do this is we're going to increase the set scale until it reaches the position however just like this it's not going to work since when we scale we're scaling from the middle instead of from the edge so the way we do that is we make a new game object comment our hookshot make the cube h out of it and now we just need to shift it forward by half of its size so by 0.5 on the set and now we have the hookshot and we can modify this game about set and there we go it now increases straight from there alright so now let's go to the code and first of all let's go all the way up here at a field for our hookshot transform and let's drag the reference there's a reference just drag the hookshot transfer okay and now back in our states let's add a new state we're going to call this the hookshot thrown so we have an extra state and on our update let's handle another case for the hookshot thrown and then down here when we have our hook shot start instead of going straight into the flowing let's go into the thrown state and then we're going to make a function call it handle hook shot throw and this is the function that we call whilst we're in our thrown state so we just like that and I once in this state it's extremely simple we just take our hookshot transform and we can look at and here we can pass in our target position so that's going to be our cookshop position so we can look at that position and then we want to scale towards it so let's go up here to define a float for our hook shot sighs okay we have our hook shot sighs and down here when we modify our state let's set the size back into zero and then on the hookshot throw we simply go and increase the size by a certain hook shot throw speed then we apply this size into our transform okay so we have the size constantly increasing and updating the transform and now we need our end condition so for that we do a simple distance check so if the hookshot size is bigger than the distance towards our hookshot position then we have essentially reached it with our hoja so when we do we simply go into the next state okay so let's pretty much it now all we need to do is call this function on our talkshow our own state and when you do let's also handle the unlock and the movement okay let's test okay here we are and now the first issue that we can already see is that the hookshot is currently visible whereas it should be invisible but we'll fix that later but we can look and we can look in there and press the E and there you go the hookshot starts being thrown and there it goes very slowly and I can still look around I can move and when it finally connects with our hookshot position there you go almost there almost there and yep just like that Connect and finally yep there you go I get pull alright so the speed is obviously very bad and this should be hidden but let's start those things so first in dealing with the visibility let's try to make our awake we go into the transform we set the game object active to false and then when we start our hook shot when the hookshot gets thrown let's set it to active to true and when we cancel it let's set it back into false now here we can already see some very nasty code duplication so let's fix this while we're at it okay so just like this our cup looks better and now let's see on with the speed of our hook shot being thrown here it is we have a very simple speed and now here we have two options we can put a static speed or we can do the same thing with it with our hook shot movement making it dependent on the distance in this case let's simply make it just static since it's a very quick effect so we just make this quite a bit faster and let's try okay here where I'm looking there press E and there you go there goes the hook shot sound a bit too slow but yep it's going much faster when it connects it goes and we can already see another issue which is after it connects and it starts being thrown and there you go it no longer rotates towards the correct position so it's sort of those issues first word speed let's increase it quite a bit more then when we start there's also a frame where we can actually see it so here when he set it to active to true oh it's all set the local scale to zero so that is very small okay and finally we want to look at the hookshot position whilst we're handling our hook shaft movement okay that should fix all of our issues let's see so here we are in first of all it starts off hidden so far so good now looking there press E and there you go there goes the hook shot and gets pulled towards it and it still rotates looking at it as it's going like that okay so now let's make it quite a bit faster okay so here we are and let's test in yep there we go the speed is now much faster and as I'm being a hook shot there you go it always points towards the hookshot position just like that and I phoned out and I can come back and there you go and I can also move while some hook shouting so hook shot and I can still move whilst it's being thrown all right so our effect is starting to look very very nice now let's add a couple more things first of all let's change the camera fov while flying to really give the illusion of speed here the camera already has a very simple script attached onto it here it is extremely simple extremely small we just have a target fov and occurring FOV and on update we simply lower power current fov towards the target and then we have a function that we can set our camera FOV so let's use this first we need a reference to our camera fov script so you grab our component okay and now let's also define some constants for our two types of FOV okay so normal we have 60 film to view and on hook shot let's put it at 100 and now we simply use this so we grab our camera movie and down here on our hook shot okay so first was throwing okay and then only when we actually grab it then we go into camera fov and we set the camera fov and let's use the hook shot fov and then when we cancel so here on our stop hook shot function we simply reset it into the normal ethylene alright let you do it let's test okay here on with soap shot in there any of their yo you can see the hook shot changes the fov does giving a very nice illusion of speed all right so it's looking quite nice now one more thing let's add a particle system so here I have a particle system that I've set up it just has some nice trails so we're going to enable this once the player is flying so here in the code let's grab our particle system so you grabbed the particle system reference and then when we start our hook shot at the same place as we modify our fov we simply call this on play and when we stop we simply call stop okay that's it very simple let's test okay so here I am hook shot in there and there you go the fov changes and we have the nice particles to really sell the illusion of speed so I can go jump jump and yep just like that I can go anywhere I can fall off the mouse and using the jump I can try it yep and I made it in and back in here and playing around alright so here we have our very cool hook shot and here on the left side I have a nice special hidden area in there and now we can try to hook shot and try to get up there so hook shot and jump hook shot and jump hook shot and jump and there you go I managed to make it all the way up here so just like this we have a really cool mechanic to play around with and it feels really great we can hook shot we can jump we have all the effects to make it work awesome and it works great all right awesome now you could expand upon this design and make it so that the hook shot only connects to certain areas rather than every single surface you could also add a maximum distance so you couldn't hook shot on to infinity and you could also add some gravity once being hook shot and it would essentially turn the hook shot into a rope mechanic so using this as a base you can get really creative and make something that perfectly suits your game and again if you haven't played it yet then go check out the game I made using the FPS micro game as a base which uses this mechanic it's a really quick game that you can play in our browser and it's really fun and combines this mechanic with enemies and shooting watched showcase video where I talk more about how I made that game and all the elements that go into it I'm currently working on videos covering the shield shader effect as well as the key door system so if you're watching this in the future go check out those links in the description as always you can download the project files in a tony's from unity cosmic subscribe to the channel for more unity deterrents post any questions you have in the comments and I'll see you next time
