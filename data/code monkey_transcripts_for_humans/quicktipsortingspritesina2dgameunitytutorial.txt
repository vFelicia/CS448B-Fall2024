With timestamps:

00:02 - hello and welcome I am your code monkey
00:05 - and this is a quick tip for sorting
00:07 - sprites in a 2-d game I usually work on
00:10 - a front top-down perspective sort of
00:12 - like pokémon red and blue which means
00:14 - that in terms of sorting that sprites
00:16 - that have a lower world position should
00:18 - appear on top of sprites that have a
00:20 - higher world position so this string
00:23 - here with a Y of three should appear
00:25 - behind this one with a Y of minus six
00:27 - and the player here should obviously
00:30 - update its sorting and show up in front
00:33 - and behind depending on its moving
00:35 - position okay let's start a new C sharp
00:40 - script name it position renderer sorter
00:46 - so in here we're going to have a private
00:49 - field for our renderer and we're going
00:53 - to grab it on the weight my regular
00:56 - equals game object getcomponent till
01:00 - time renderer we're using renderer so
01:03 - that in this case it can work with both
01:05 - the mesh renderer and the sprite
01:07 - renderer so the easiest way to calculate
01:09 - our sorting order is to have a number
01:11 - level function as a sorting order base
01:13 - and subtract our current position from
01:15 - it so let's create a private in sorting
01:19 - order base and down here instead of the
01:23 - update we're going to use the late
01:25 - update to make sure that this executes
01:27 - after this transform has moved and set
01:31 - my render dot sorting order to our
01:34 - sorting order base
01:36 - - our transform position Y and cast this
01:41 - down to an end like that let's make our
01:46 - sorting order base serialized so we can
01:48 - set it in d ted etre and give it a
01:51 - default value of let's say 5,000 so now
01:55 - in here add it to all of our positions
01:59 - these are using the sprite renderer and
02:01 - I have the player here using a mesh
02:03 - renderer and since we were using the
02:05 - renderer it works with both types so
02:07 - let's test it out and as you can see the
02:11 - player is correctly showing up
02:14 - and then goes behind now the one problem
02:17 - that we see here is that it's changing
02:19 - on the players origin which happens to
02:21 - be about his neck obviously we want this
02:26 - to only change based on the characters
02:28 - feet so let's add a simple offset let's
02:32 - go back to our script and add a new
02:35 - private in offset okay serialize as well
02:40 - and default to zero and in here we're
02:46 - going to subtract our offset as well so
02:50 - now when we go up to our body and set
02:55 - the offset to -10 and now there you go
03:01 - it is pretty much correct on defeat it
03:05 - is changing I can move back and forth
03:08 - and everything is correctly being sorted
03:12 - so for another minor improvement we can
03:14 - add a toggle to only run once since all
03:17 - of these objects never move so it makes
03:19 - no sense it constantly updated every
03:22 - frame so let's go back in here and add a
03:26 - private ball run only once
03:32 - let's default it to false make it
03:35 - serialized and here if you have run only
03:43 - once then destroy this so now if we have
03:49 - run only once it will on the first
03:51 - update set the sorting order based on
03:53 - its transform dot position and this
03:56 - right sounds so it doesn't waste
03:57 - resources so we want to apply that to
04:00 - all of our fixed sprites so all of these
04:04 - will run once and then this script will
04:06 - destroy its own yep all the sorting is
04:10 - still correctly working and as you can
04:14 - see in here they no longer have that
04:15 - script great for another minor
04:18 - performance improvement let's just make
04:20 - sure that this isn't update every frame
04:22 - since it's probably not necessary what
04:25 - sad
04:26 - a private float timer private flow timer
04:30 - Max and put it at point one out so
04:33 - essentially this will only update every
04:35 - 100 milliseconds and on our lake update
04:39 - we're going to decrease timer by time
04:42 - comp time and if timer goes under zero
04:47 - and we're going to reset the timer and
04:51 - set everything the same so this way it
04:54 - works exactly the same but now it will
04:56 - only do the calculation every hundred
04:58 - milliseconds so it doesn't really affect
05:00 - much but so the effect is the same and
05:04 - every little bit helps and there you
05:07 - have it a very easy way to correctly
05:08 - sort your sprites in a front top-down
05:11 - perspective so if you have any questions
05:13 - post them in the comments and only my
05:15 - best answer them
05:15 - alright see you next time
05:29 - you

Cleaned transcript:

hello and welcome I am your code monkey and this is a quick tip for sorting sprites in a 2d game I usually work on a front topdown perspective sort of like pokémon red and blue which means that in terms of sorting that sprites that have a lower world position should appear on top of sprites that have a higher world position so this string here with a Y of three should appear behind this one with a Y of minus six and the player here should obviously update its sorting and show up in front and behind depending on its moving position okay let's start a new C sharp script name it position renderer sorter so in here we're going to have a private field for our renderer and we're going to grab it on the weight my regular equals game object getcomponent till time renderer we're using renderer so that in this case it can work with both the mesh renderer and the sprite renderer so the easiest way to calculate our sorting order is to have a number level function as a sorting order base and subtract our current position from it so let's create a private in sorting order base and down here instead of the update we're going to use the late update to make sure that this executes after this transform has moved and set my render dot sorting order to our sorting order base our transform position Y and cast this down to an end like that let's make our sorting order base serialized so we can set it in d ted etre and give it a default value of let's say 5,000 so now in here add it to all of our positions these are using the sprite renderer and I have the player here using a mesh renderer and since we were using the renderer it works with both types so let's test it out and as you can see the player is correctly showing up and then goes behind now the one problem that we see here is that it's changing on the players origin which happens to be about his neck obviously we want this to only change based on the characters feet so let's add a simple offset let's go back to our script and add a new private in offset okay serialize as well and default to zero and in here we're going to subtract our offset as well so now when we go up to our body and set the offset to 10 and now there you go it is pretty much correct on defeat it is changing I can move back and forth and everything is correctly being sorted so for another minor improvement we can add a toggle to only run once since all of these objects never move so it makes no sense it constantly updated every frame so let's go back in here and add a private ball run only once let's default it to false make it serialized and here if you have run only once then destroy this so now if we have run only once it will on the first update set the sorting order based on its transform dot position and this right sounds so it doesn't waste resources so we want to apply that to all of our fixed sprites so all of these will run once and then this script will destroy its own yep all the sorting is still correctly working and as you can see in here they no longer have that script great for another minor performance improvement let's just make sure that this isn't update every frame since it's probably not necessary what sad a private float timer private flow timer Max and put it at point one out so essentially this will only update every 100 milliseconds and on our lake update we're going to decrease timer by time comp time and if timer goes under zero and we're going to reset the timer and set everything the same so this way it works exactly the same but now it will only do the calculation every hundred milliseconds so it doesn't really affect much but so the effect is the same and every little bit helps and there you have it a very easy way to correctly sort your sprites in a front topdown perspective so if you have any questions post them in the comments and only my best answer them alright see you next time you
