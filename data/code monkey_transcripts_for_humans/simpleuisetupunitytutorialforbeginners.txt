With timestamps:

00:00 - hello and welcome I am your code monkey
00:02 - and in this video we're going to cover
00:03 - the setup for the UI let's get started
00:08 - okay so here I have an empty scene it
00:11 - only has a basic 2d camera now in order
00:13 - to keep our hierarchy clean let's start
00:15 - by making a game object and name it game
00:18 - Hamlet we're going to put this on zero
00:21 - zero zero and drag the main camera onto
00:23 - it this is just so our scene hierarchy
00:25 - is organized inside it let's make
00:27 - another game object and name it the UI
00:30 - you can leave it on any position but
00:32 - personally I like to put it to the side
00:34 - so let's put it on a thousand and a
00:37 - thousand on the said this way you can
00:39 - view it in the scene view next to the
00:40 - game view so it doesn't block the origin
00:43 - of our action or game scene so this game
00:45 - object in here won't be the container
00:46 - for our you want let's go right click
00:49 - and create a UI canvas as you can see
00:53 - when you create the canvas the event
00:55 - system gets automatically created inside
00:57 - our canvas let's create a UI image just
01:02 - so we can see something in our game view
01:04 - so as you can see this square is a UI
01:06 - image being displayed in our UI now in
01:09 - here in the canvas we have several
01:12 - different render modes the screen space
01:15 - overlay mode displays a rectangle on our
01:18 - scene view and any UI elements you place
01:20 - inside it won't be visible personally
01:22 - I'm not a big fan of this one since it
01:25 - keeps everything very busy
01:26 - the other main render mode is screen
01:28 - space camera which allows you to assign
01:30 - a camera that will then render your UI
01:33 - this is the mode that we're going to use
01:35 - since using a camera allows us to do a
01:36 - lot of really cool things like for
01:38 - example displaying the UI with
01:39 - perspective and applying cone shaders so
01:42 - let's create the camera that won't
01:43 - display our UI let's create a new game
01:46 - object name it UI camera let's add the
01:50 - camera component make it
01:53 - orthographic so with this plays in 2d
01:55 - set the size to a hundred and there you
01:59 - go we now have in here a basic 2d camera
02:01 - that we're going to use to display
02:03 - however you want well let's set the
02:04 - clear flags to depth only so it only
02:07 - clears the depth after the main camera
02:09 - has render so now that we have our UI
02:11 - Cameron let's go into our canvas and set
02:13 - it to use this camera there you go as
02:16 - you can see we now can place our UI in
02:18 - here rather than having an arbitrary
02:19 - square and
02:20 - of Arsene this way it helps to make
02:22 - things much more clear when you're going
02:24 - in scene view you can see this is the
02:26 - origin of the game scene and this is
02:27 - where the UI is placed all right so now
02:29 - let's take care of the scaling there are
02:32 - several different scale modes constant
02:34 - pixel size maintains the pixel size of
02:37 - your UI regardless of screen size scale
02:40 - with screen size resize the UI to fit
02:42 - the screen and constant physical size
02:43 - maintains the same size regardless of
02:45 - screen or resolution the one that I find
02:48 - best to use is scale with screen size
02:50 - which resize the UI elements to fit the
02:52 - screen and resolution the reference
02:55 - resolution in here is the main
02:56 - resolution for your UI if the current
02:59 - resolution is smaller don't be scaled
03:01 - down if it's bigger don't be scaled up
03:02 - since I make mainly desktop games I'd
03:05 - like to set this to 720p so 1280 by 720
03:09 - and for the match mode let's fully match
03:11 - with the height this means that elements
03:13 - in our UI won't only be resized if the
03:16 - height of our resolution changes so if I
03:18 - change the expiration here from 16 by 9
03:21 - to 5 by 4 you can see the image does not
03:24 - get scale if I change the vertical size
03:27 - you can see that it does get scaled so
03:30 - with the UI setup like this you can
03:31 - place everything vertically and only
03:33 - have to worry about or Zanka movement
03:35 - for the reference pixels per unit let's
03:37 - just leave it at a hundred so our UI is
03:39 - now correctly set up inside the canvas
03:42 - is where you put your UI object for
03:45 - example in my games I usually have a
03:47 - version in the corner so let's make a
03:50 - game object inside the canvas let's name
03:53 - it window version on the rect transform
03:57 - let's expand to occupy our entire canvas
04:00 - so set it to expand and everything on 0
04:02 - so as you can see in the corners it's
04:04 - occupying the entire UI window so
04:07 - regardless of the aspect ratio this one
04:09 - always occupies the entire screen and
04:11 - inside let's make a UI text object let's
04:15 - make it in white and give it a text of
04:18 - v1 point zero zero let's make it in
04:21 - overflow
04:22 - set the size to zero and we're going to
04:25 - anchor it to the oil and left corner and
04:27 - fourth position let's put it on 5 and 5
04:30 - so just like that you can see the text
04:32 - object on the
04:33 - left side I can drag the game window to
04:36 - modify the vertical resolution and as
04:39 - you can see the version is always there
04:41 - on the corner it gets scaled up or down
04:43 - but it never moves that position and
04:45 - since i anchored it to the left side if
04:48 - I change the horizontal size it also
04:50 - stays within that corner so there you
04:53 - have it we start with an empty scene and
04:54 - send up to this player you want we set
04:57 - it to display using a camera which we
04:59 - can later use to make some cool shader
05:00 - effects we also set up the scaling to
05:03 - automatically resize the UI depending on
05:05 - the resolution ensuring that our UI is
05:07 - versatile and works with any resolution
05:09 - if you have any questions post them in
05:11 - the comments and I'll do my best to
05:12 - answer them subscribe for more videos
05:14 - and I'll see you next time

Cleaned transcript:

hello and welcome I am your code monkey and in this video we're going to cover the setup for the UI let's get started okay so here I have an empty scene it only has a basic 2d camera now in order to keep our hierarchy clean let's start by making a game object and name it game Hamlet we're going to put this on zero zero zero and drag the main camera onto it this is just so our scene hierarchy is organized inside it let's make another game object and name it the UI you can leave it on any position but personally I like to put it to the side so let's put it on a thousand and a thousand on the said this way you can view it in the scene view next to the game view so it doesn't block the origin of our action or game scene so this game object in here won't be the container for our you want let's go right click and create a UI canvas as you can see when you create the canvas the event system gets automatically created inside our canvas let's create a UI image just so we can see something in our game view so as you can see this square is a UI image being displayed in our UI now in here in the canvas we have several different render modes the screen space overlay mode displays a rectangle on our scene view and any UI elements you place inside it won't be visible personally I'm not a big fan of this one since it keeps everything very busy the other main render mode is screen space camera which allows you to assign a camera that will then render your UI this is the mode that we're going to use since using a camera allows us to do a lot of really cool things like for example displaying the UI with perspective and applying cone shaders so let's create the camera that won't display our UI let's create a new game object name it UI camera let's add the camera component make it orthographic so with this plays in 2d set the size to a hundred and there you go we now have in here a basic 2d camera that we're going to use to display however you want well let's set the clear flags to depth only so it only clears the depth after the main camera has render so now that we have our UI Cameron let's go into our canvas and set it to use this camera there you go as you can see we now can place our UI in here rather than having an arbitrary square and of Arsene this way it helps to make things much more clear when you're going in scene view you can see this is the origin of the game scene and this is where the UI is placed all right so now let's take care of the scaling there are several different scale modes constant pixel size maintains the pixel size of your UI regardless of screen size scale with screen size resize the UI to fit the screen and constant physical size maintains the same size regardless of screen or resolution the one that I find best to use is scale with screen size which resize the UI elements to fit the screen and resolution the reference resolution in here is the main resolution for your UI if the current resolution is smaller don't be scaled down if it's bigger don't be scaled up since I make mainly desktop games I'd like to set this to 720p so 1280 by 720 and for the match mode let's fully match with the height this means that elements in our UI won't only be resized if the height of our resolution changes so if I change the expiration here from 16 by 9 to 5 by 4 you can see the image does not get scale if I change the vertical size you can see that it does get scaled so with the UI setup like this you can place everything vertically and only have to worry about or Zanka movement for the reference pixels per unit let's just leave it at a hundred so our UI is now correctly set up inside the canvas is where you put your UI object for example in my games I usually have a version in the corner so let's make a game object inside the canvas let's name it window version on the rect transform let's expand to occupy our entire canvas so set it to expand and everything on 0 so as you can see in the corners it's occupying the entire UI window so regardless of the aspect ratio this one always occupies the entire screen and inside let's make a UI text object let's make it in white and give it a text of v1 point zero zero let's make it in overflow set the size to zero and we're going to anchor it to the oil and left corner and fourth position let's put it on 5 and 5 so just like that you can see the text object on the left side I can drag the game window to modify the vertical resolution and as you can see the version is always there on the corner it gets scaled up or down but it never moves that position and since i anchored it to the left side if I change the horizontal size it also stays within that corner so there you have it we start with an empty scene and send up to this player you want we set it to display using a camera which we can later use to make some cool shader effects we also set up the scaling to automatically resize the UI depending on the resolution ensuring that our UI is versatile and works with any resolution if you have any questions post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time
