With timestamps:

00:00 - hello and welcome I'm your code monkey
00:02 - in this video we're continuing our
00:03 - resource gatherer AI let's set up player
00:05 - control so we can tell our units were to
00:07 - harvest let's get started
00:11 - all right so here's the scene so far we
00:13 - have the gatherer he goes to a node
00:16 - mines it drops the resources in storage
00:18 - and goes back to finding another no
00:20 - right now he's deciding where to mine
00:23 - let's add the ability to tell him where
00:25 - to go so first off let's create a very
00:28 - simple text mesh to see what together is
00:30 - carrying so in here let's make a new
00:33 - game object call it inventory text mesh
00:36 - and let's add a text mash to display the
00:40 - inventory amount
00:52 - alright so there's the text mesh on top
00:55 - of the unit that we can use to display
00:56 - what he is carrying so let's go in our
00:59 - gather AI code and here let's grab a
01:02 - reference to the text mesh so a private
01:04 - text mesh and call it inventory text
01:07 - mesh and we're going to grab it on the
01:10 - awake in here and let's make a function
01:18 - to update it so proud void update
01:20 - inventory tax if we do have inventory
01:26 - then let's display it so if gold
01:28 - inventory amount if it is bigger than 0
01:30 - then go into the inventory tax math text
01:33 - and set it to the amount that we are
01:36 - carrying if we are not carrying anything
01:38 - then just hide it by setting the text to
01:42 - nothing okay so we want to update it on
01:45 - awake and update it every time the gold
01:48 - inventory amount changes so in here
01:51 - update the text and in here update it as
01:53 - well alright let's test and see how it's
01:56 - going there you go it's hidden now in
01:58 - mines and you see one two three and now
02:01 - it drops and it vanishes again okay
02:03 - great so very simple and we can now view
02:05 - what the unit is carrying now let's set
02:08 - up a way to click our resource notes in
02:11 - order to do that and let's go in here
02:13 - into the goal node game object going to
02:16 - add a box Collider 2d and set it to
02:19 - occupy roughly the size of sprite so we
02:22 - have a box Collider and now we need to
02:23 - be able to click it to do that I'm going
02:26 - to use the script button sprite which is
02:29 - part of the code monkey utilities which
02:30 - is always you can grab for free from
02:32 - Unity code monkey calm this script
02:34 - allows me to easily capture clicks on
02:36 - this specific box Collider so in our
02:38 - code here we previously created a
02:40 - resource node that handles the node
02:42 - logic and is constructed using a
02:44 - reference to the resource node transform
02:47 - so here in the constructor let's capture
02:50 - the transform clicks so transform dot
02:53 - get component of type button sprites
02:56 - which we have to go up here using code
02:59 - monkey dot utils
03:00 - and here is the button sprite which has
03:04 - an action
03:04 - like funk which is triggered whenever we
03:07 - click on the specific button now in
03:10 - order to keep our code clean we're going
03:12 - to firon invent when this transform is
03:14 - clicked so let's go up here and make a
03:18 - public static event event handler on
03:21 - resource node click in order to use even
03:26 - handler we have to do using the system
03:29 - namespace and here when we click the
03:33 - action that we're going to fire is going
03:36 - to fire that event so if on resource
03:38 - note click if it is not know so if we
03:41 - have subscribers let's trigger it by
03:43 - sending this and event our it's empty so
03:46 - this way we can capture clicks with
03:48 - another class and this class doesn't
03:50 - need to know about it so let's capture
03:52 - those clicks on our game Handler on a
03:54 - wait here let's subscribe to that event
03:56 - which is on resource no dot on resource
03:58 - note clicked now the event center object
04:03 - is going to be of type resource notes
04:04 - and let's cast it to that so set a
04:07 - resource node resource node equals the
04:09 - sender as a resource node since the
04:13 - sender is sent as an object we have to
04:15 - cast it first to the resource no alright
04:17 - so in here we are being notified when a
04:19 - resource node is click now we have to
04:21 - tell the gatherer to mind that so first
04:24 - let's go in our together and stop him
04:26 - looking for nodes automatically which
04:28 - he's doing in here by commenting out
04:31 - this line he is no longer automatically
04:33 - searching for nodes instead let's make a
04:36 - public function to give him a resource
04:38 - node so go down here make a public void
04:41 - set resource node and here we are going
04:45 - to receive a resource node resource node
04:48 - and inside and let's set our internal
04:52 - resource node so this dot resource node
04:54 - equals this resource node so if the unit
04:58 - is iPhone the next time we set the node
05:00 - he's gonna move towards it all right now
05:02 - back in our game handler let's go up
05:05 - here and add a reference to our gather a
05:07 - I
05:08 - so make a serialize film for the
05:10 - gatherer AI and gather AI and when we
05:16 - click on the node we call this phone
05:18 - and here let's go into our gather AI and
05:20 - set the resource node to this resource
05:22 - node all right so let's test and see how
05:26 - it's going all right so here's together
05:28 - he's completely still which makes sense
05:30 - since he's no longer automatically
05:32 - searching for a resource node and now
05:34 - when I click on this one and boom there
05:36 - he goes he's going to mine that node now
05:39 - when he finishes he goes back to the
05:41 - storage and once again he stops and
05:43 - waits for another arm no I sent him in
05:44 - here and he goes okay great now let's
05:47 - make him automatically keep mining nodes
05:49 - if they are near the one that he was
05:50 - ordered to mind so in here let's make a
05:53 - cluster of nodes so put this one in here
05:55 - another one here in here and in here so
05:59 - when he finishes mining the target
06:01 - resource node let's tell him to ask the
06:03 - game handler for a valid node near that
06:05 - one so on game panel let's make that
06:08 - function we were simply using a resource
06:11 - node now let's make a get resource node
06:16 - near position and we're going to receive
06:20 - a vector3 for the position so here let's
06:24 - set a max distance amount and here if it
06:29 - has no more resources we are removing it
06:31 - from the list or if the vector 3 dot
06:35 - distance between the position and the
06:39 - temp resource node list I dot get
06:41 - positioned if that distance is bigger
06:44 - than the max distance then we're also
06:46 - going to remove to a list so this gets
06:49 - removed from the list if it either has
06:50 - no more resources or too far and let's
06:55 - make a static function to call this one
07:00 - so in here before we move to storage
07:03 - instead of setting the resource node
07:04 - back to no let's ask the game handler
07:07 - for get resource node near the resource
07:10 - node position so when this one is
07:13 - depleted we're going to look for another
07:15 - one near that position all right so now
07:18 - on the game handler up here currently
07:20 - we're receiving three separate things
07:22 - but instead of that let's receive an
07:24 - array of goal node transform array and
07:29 - when creating would simply go
07:31 - for each alright so we now have just one
07:37 - array instead of having multiple
07:38 - variables so let's set that array and
07:41 - film it up with all of these gold nodes
07:43 - he has the array with me lock the
07:45 - inspectors like all of these and drag it
07:47 - all in there okay let's test and let's
07:51 - see how it's going right there he is he
07:53 - is staying still I'm going to mine this
07:55 - one he goes there and he mines it to
07:58 - three now he drops it on storage he
08:01 - stays still
08:02 - now let's mine this one so what's going
08:04 - there now he's mining one two three okay
08:08 - now he's gonna drop it on storage and
08:10 - yep he picked another position in there
08:12 - and now he's mining another resource
08:14 - note the plates it goes back goes to
08:17 - another one now he's mining the final
08:19 - one and when he finishes boom there we
08:23 - go he stays idle since there are no more
08:25 - nodes near these ones alright so we have
08:28 - exactly the behavior we wanted so there
08:31 - you have it we had a support for
08:32 - controlling our gatherer by telling him
08:34 - where to go to mine a specific node once
08:37 - he finishes that node he decides to look
08:39 - for nodes that are near that one and if
08:41 - there are goes there if not he stops and
08:43 - waits for another order in the next
08:45 - video we're going to add support for
08:47 - multiple gatherers if you have any
08:49 - questions post them in the comments and
08:50 - I'll do my best answer them subscribe
08:52 - for more videos and I'll see you next
08:54 - time

Cleaned transcript:

hello and welcome I'm your code monkey in this video we're continuing our resource gatherer AI let's set up player control so we can tell our units were to harvest let's get started all right so here's the scene so far we have the gatherer he goes to a node mines it drops the resources in storage and goes back to finding another no right now he's deciding where to mine let's add the ability to tell him where to go so first off let's create a very simple text mesh to see what together is carrying so in here let's make a new game object call it inventory text mesh and let's add a text mash to display the inventory amount alright so there's the text mesh on top of the unit that we can use to display what he is carrying so let's go in our gather AI code and here let's grab a reference to the text mesh so a private text mesh and call it inventory text mesh and we're going to grab it on the awake in here and let's make a function to update it so proud void update inventory tax if we do have inventory then let's display it so if gold inventory amount if it is bigger than 0 then go into the inventory tax math text and set it to the amount that we are carrying if we are not carrying anything then just hide it by setting the text to nothing okay so we want to update it on awake and update it every time the gold inventory amount changes so in here update the text and in here update it as well alright let's test and see how it's going there you go it's hidden now in mines and you see one two three and now it drops and it vanishes again okay great so very simple and we can now view what the unit is carrying now let's set up a way to click our resource notes in order to do that and let's go in here into the goal node game object going to add a box Collider 2d and set it to occupy roughly the size of sprite so we have a box Collider and now we need to be able to click it to do that I'm going to use the script button sprite which is part of the code monkey utilities which is always you can grab for free from Unity code monkey calm this script allows me to easily capture clicks on this specific box Collider so in our code here we previously created a resource node that handles the node logic and is constructed using a reference to the resource node transform so here in the constructor let's capture the transform clicks so transform dot get component of type button sprites which we have to go up here using code monkey dot utils and here is the button sprite which has an action like funk which is triggered whenever we click on the specific button now in order to keep our code clean we're going to firon invent when this transform is clicked so let's go up here and make a public static event event handler on resource node click in order to use even handler we have to do using the system namespace and here when we click the action that we're going to fire is going to fire that event so if on resource note click if it is not know so if we have subscribers let's trigger it by sending this and event our it's empty so this way we can capture clicks with another class and this class doesn't need to know about it so let's capture those clicks on our game Handler on a wait here let's subscribe to that event which is on resource no dot on resource note clicked now the event center object is going to be of type resource notes and let's cast it to that so set a resource node resource node equals the sender as a resource node since the sender is sent as an object we have to cast it first to the resource no alright so in here we are being notified when a resource node is click now we have to tell the gatherer to mind that so first let's go in our together and stop him looking for nodes automatically which he's doing in here by commenting out this line he is no longer automatically searching for nodes instead let's make a public function to give him a resource node so go down here make a public void set resource node and here we are going to receive a resource node resource node and inside and let's set our internal resource node so this dot resource node equals this resource node so if the unit is iPhone the next time we set the node he's gonna move towards it all right now back in our game handler let's go up here and add a reference to our gather a I so make a serialize film for the gatherer AI and gather AI and when we click on the node we call this phone and here let's go into our gather AI and set the resource node to this resource node all right so let's test and see how it's going all right so here's together he's completely still which makes sense since he's no longer automatically searching for a resource node and now when I click on this one and boom there he goes he's going to mine that node now when he finishes he goes back to the storage and once again he stops and waits for another arm no I sent him in here and he goes okay great now let's make him automatically keep mining nodes if they are near the one that he was ordered to mind so in here let's make a cluster of nodes so put this one in here another one here in here and in here so when he finishes mining the target resource node let's tell him to ask the game handler for a valid node near that one so on game panel let's make that function we were simply using a resource node now let's make a get resource node near position and we're going to receive a vector3 for the position so here let's set a max distance amount and here if it has no more resources we are removing it from the list or if the vector 3 dot distance between the position and the temp resource node list I dot get positioned if that distance is bigger than the max distance then we're also going to remove to a list so this gets removed from the list if it either has no more resources or too far and let's make a static function to call this one so in here before we move to storage instead of setting the resource node back to no let's ask the game handler for get resource node near the resource node position so when this one is depleted we're going to look for another one near that position all right so now on the game handler up here currently we're receiving three separate things but instead of that let's receive an array of goal node transform array and when creating would simply go for each alright so we now have just one array instead of having multiple variables so let's set that array and film it up with all of these gold nodes he has the array with me lock the inspectors like all of these and drag it all in there okay let's test and let's see how it's going right there he is he is staying still I'm going to mine this one he goes there and he mines it to three now he drops it on storage he stays still now let's mine this one so what's going there now he's mining one two three okay now he's gonna drop it on storage and yep he picked another position in there and now he's mining another resource note the plates it goes back goes to another one now he's mining the final one and when he finishes boom there we go he stays idle since there are no more nodes near these ones alright so we have exactly the behavior we wanted so there you have it we had a support for controlling our gatherer by telling him where to go to mine a specific node once he finishes that node he decides to look for nodes that are near that one and if there are goes there if not he stops and waits for another order in the next video we're going to add support for multiple gatherers if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time
