With timestamps:

00:00 - hello and welcome I am your code monkey
00:01 - in the series of creating spider-man in
00:03 - unity 2d in this video we're going to
00:05 - take our enemies and add a health system
00:07 - let's begin
00:11 - so here's the scene so far we have our
00:14 - Spider Man he can attack towards the
00:16 - mouse there are two enemies in here they
00:19 - are being spawned from prefabs so we can
00:21 - instantiate as many as we want and if I
00:23 - go here and I click near him I can
00:25 - attack that one and if I click on this
00:27 - one I can attack this alright so far
00:29 - everything looks great except obviously
00:32 - for the fact that no matter how many
00:33 - times I hit him the enemies never
00:35 - actually die so we need to have a simple
00:37 - health system to the enemies now before
00:40 - we do that and let's sort out one issue
00:41 - now the enemy that I attack is being
00:43 - selected based on the position near
00:45 - where I click so if I'm near the enemy
00:48 - and I click on him it looks just fine
00:50 - however if I'm Way over here and I click
00:53 - you can see that it still attacks the
00:54 - enemy this is because we are calculating
00:57 - an enemy near the mouse position where
00:59 - it should be near the spider-man
01:01 - position but pointed towards the mouse
01:03 - position so if I click in here I should
01:06 - be looking for enemies around this area
01:08 - so let's go into the code here in our
01:11 - spider-man class down here on the handle
01:14 - attack we are checking for the closest
01:16 - and me to the attack position which is
01:18 - set on the mouse world position instead
01:20 - of doing that let's calculate the attack
01:22 - position to be near the Spider Man but
01:25 - towards the direction of the mouse so
01:26 - let's complete a vector3 of the
01:29 - direction to the mouse cutting like that
01:31 - taking the mouse role position - our
01:34 - Spider Man position and then normalize
01:36 - the whole thing so now our tack position
01:40 - will be the gap position so the position
01:43 - of our Spider Man plays the direction
01:45 - towards the mouse position and
01:47 - multiplied by an offset of let's say
01:50 - about 20 units so this contemplates a
01:53 - position moving 20 units away from the
01:56 - Spider Man position towards the mouse so
01:58 - that's at the attack position and the
02:00 - rest of the code works perfectly fine
02:02 - alright so here I am in between both of
02:04 - them and if I click on here yep I'm
02:06 - attacking now one click on this one
02:07 - attack this one okay
02:09 - and now if I go away and I click right
02:11 - on top of this one yep you can see that
02:13 - he's no longer being hit I'm attacking
02:15 - but since there are no enemies near
02:17 - around this position then that
02:19 - it's not being hit and if I move closer
02:21 - yep no he's being hit okay great let's
02:24 - just clean up our code in here to remove
02:26 - these magic numbers all right so our
02:34 - code is now clear and very easy to
02:36 - follow
02:36 - so now let's set up the enemy health
02:38 - we're going to keep things very nice and
02:40 - simple so let's first go into the enemy
02:42 - class and in here on the member
02:45 - variables let's just simply define an
02:47 - INT or the enemy helm
02:49 - very simple on awake let's set the
02:51 - health to three okay and down here on
02:56 - our damage function let's decrease the
02:58 - health by one okay then let's also make
03:02 - a public bomb function for testing if he
03:04 - is dead and to simply return if the
03:07 - health is under zero and in here on
03:11 - damage if this enemy is now dead then
03:15 - let's simply destroy the game object now
03:18 - we also need to go up here when grabbing
03:21 - the closest enemy we have to ignore the
03:23 - enemies that are dead so in here simply
03:25 - do if the enemy dot is then so if this
03:28 - enemy is dead then continue so let's
03:31 - just ignore this one continue simply
03:33 - continues to the next enemy on the cycle
03:36 - so if the enemy is dead this does not
03:38 - get run now can also simply remove him
03:40 - from the list when he dies but for now
03:42 - let's leave them all in there so let's
03:44 - run the game okay there's the enemies
03:47 - and now if I hit him one two three and
03:49 - poof he vanishes so he is correctly
03:52 - taking damage and since he has three
03:54 - home after three hits he vanishes
03:57 - now just for testing let's go back into
03:59 - the game hammer and here we set this
04:01 - function to automatically create enemy
04:03 - so let's remove that comment just so we
04:06 - can test them adding multiple enemies
04:08 - okay so here I am as you can see enemies
04:11 - are being spawned and if I hit him yep
04:13 - three hits he's dead one two three he's
04:15 - gone one two three gone one two three
04:17 - gone and it works with all that okay
04:20 - great
04:20 - now just vanishing enemies obviously
04:23 - isn't very fun so let's make them fly
04:25 - away when they actually done now in
04:27 - order to make them fly I'm going to use
04:29 - the script that we created in a previous
04:30 - the flying body script you can check out
04:33 - the video to see the home creation of
04:35 - the script but essentially it's very
04:37 - simple we have a static create function
04:40 - we give it a prefab a spawn position and
04:42 - a fly direction it in Senshi AIT's the
04:44 - prefab adds the fine body component and
04:46 - sets up with the flying direction then
04:49 - on update that simply moves the
04:51 - transform towards the fire Direction it
04:53 - increases the scale every update rotates
04:56 - them and after one second destroys
04:59 - itself so it's a pretty simple but
05:01 - satisfying effect now in order to use it
05:03 - the one thing we need is a prefab to
05:05 - instantiate so let's create an empty
05:08 - game object and give it the sprite
05:10 - renderer and in here I have a texture
05:13 - for an enemy flying body so this is a
05:16 - sprite that won't be flying away so
05:18 - let's make it into a prefab so create a
05:21 - new prefab TF enemy flying body and drag
05:25 - the game object onto it okay now let's
05:28 - go into the game assets to add a
05:30 - reference for our prefabs so a public
05:33 - transform PF enemy flying body now in
05:37 - here let's drag the reference okay and
05:39 - now let's go back into the enemy script
05:41 - and down here when he takes damage if he
05:44 - is dead
05:45 - we still destroy this game object but
05:47 - then we want to instantiate the flying
05:49 - body so let's do flying body dot create
05:53 - using the static create function now
05:56 - again in here we take a prefab so we go
05:58 - into the game assets not instance not
06:00 - grab the enemy flying body prefab we
06:03 - spawn him on this position and with
06:07 - regards to the flow direction it won't
06:09 - be the same direction that he was
06:11 - attacked in so in here we are currently
06:13 - the direction to the attacker so we want
06:15 - to reverse of that to keep going from
06:17 - where the attacker attacked him so
06:19 - direction to attacker x -1 f alright
06:22 - it's not when he dies he should spawn a
06:25 - flying body let's see alright there's
06:27 - the enemy and if I hit him 1 2 3 and yep
06:30 - there you go he's flying away 1 2 3
06:32 - fine fly fine alright so we now have a
06:36 - nice satisfying effect for winning and
06:38 - me is killed now let's make it more
06:40 - impactful by moving spider-man for
06:42 - on attack and giving the enemy a slight
06:44 - knock back so first let's go into our
06:47 - enemy code and in here we are going to
06:50 - check if he is dead then we do that if
06:52 - he is not that then we do something else
06:55 - so enemy is still alive and essentially
06:59 - in here we only want to play the hit
07:00 - animation if he is still alive if he's
07:02 - dead obviously it doesn't matter and if
07:04 - he's still alive then let's knock him
07:06 - back so we do that by moving the
07:08 - transform dot position move it towards
07:11 - the direction to the attacker times
07:13 - minus 1/2 since we don't want to move to
07:16 - towards the attacker brother away from
07:18 - the attacker so move them away by let's
07:20 - say five units so minus 1/2 times 500k
07:24 - so float knock back distance let's put
07:28 - up five up and that's what we're going
07:30 - to use in here so if he's still alive we
07:32 - move him away from the attacker by a
07:35 - distance of knock-back
07:37 - this is so now let's go into the
07:38 - spider-man and in here when we are
07:41 - attacking first in here we are checking
07:43 - if there is an enemy or not
07:45 - so in here there's an enemy range if not
07:48 - there's no enemy and right so if there
07:51 - is no enemy in range then we are simply
07:53 - punching into the air then let's move in
07:56 - towards the attack direction so we need
07:58 - to actually define the attack direction
08:00 - up here we do have to recount late if we
08:03 - do have an enemy so common later it
08:04 - again in there and calculate it in here
08:08 - so if there is no enemy in range then
08:11 - simply do a transform dot position and
08:13 - move them towards the attack dere by a
08:17 - dash forward okay so if there is no
08:26 - enemy simply move them forward by this
08:28 - amount
08:28 - all right now if there is an enemy first
08:31 - we're gonna call the damage function so
08:33 - that the enemy gets knocked back or
08:35 - killed and then after we do first we
08:38 - need to check out if he is that so if
08:40 - the enemy dot is dead if he is dead then
08:44 - we want to move forward the same as
08:46 - before okay but if he is not dead let's
08:50 - position him relative to where the enemy
08:52 - was not back to so we're going to say
08:55 - the transform dot position to be at the
08:58 - enemy that get position plus the attack
09:01 - direction reversed multiplied by a
09:05 - distance to enemy
09:07 - hello distance to enemy and let's say
09:10 - five okay so if the enemy is dead then
09:13 - we dash forward the same as if there is
09:15 - no enemy if the enemy is not dead then
09:18 - he's still there so the enemy was
09:20 - knocked back then we grabbed a position
09:22 - where he was knocked back to then we
09:24 - applied the reverse of the attack
09:26 - direction and we moved by a certain
09:29 - amount this way every time we attack an
09:31 - enemy we stay exactly within the same
09:33 - distance of him okay so we should be
09:36 - seeing the enemy knocked back and
09:37 - spider-man right next to him okay so
09:39 - here I am first of all let's try and see
09:41 - if we - when we attack and yep there you
09:44 - go he's moving slightly forward every
09:46 - time we talk okay
09:47 - and now if I approach an enemy and I hit
09:49 - him the enemy should get knocked back
09:50 - and I should also move forward and yep
09:53 - there it is he's moving towards the
09:55 - enemy the enemy gets knocked back and as
09:58 - you can see no matter how far I attack
10:00 - him so if I take him this far he goes
10:02 - exactly within the same distance and if
10:04 - I'm very close also the same distance so
10:06 - the animation always connects all right
10:13 - so far so good
10:14 - now the hit particles shouldn't really
10:16 - only spawn if I hit something so if I'm
10:18 - hitting the air it really doesn't make
10:21 - much sense to see all of these head
10:22 - particles so let's make sure the only
10:24 - spawn when I actually hit an enemy so
10:27 - back on our spider-man class down here
10:29 - we are spawning the hit particles in
10:31 - here inside our play punch or kick
10:33 - animation now we only want to trigger
10:36 - this if we do attack an enemy so let's
10:39 - go up here and simply define a ball for
10:41 - hit enemy and if the enemy is not know
10:45 - that we did hit an enemy so hit enemy
10:48 - set to true and if no enemy is in range
10:50 - then set to false because we didn't hit
10:53 - any enemy and down here we are simply
10:56 - going to spawn the impact effect if we
10:58 - did hit the enemy if not then we don't
11:00 - spawn anyway do the same thing there and
11:02 - in
11:03 - here all right so now the hit particles
11:08 - should only spawn if I actually hit
11:09 - something so in here if I hit the air
11:12 - yep no particles didn't hit anything
11:14 - just punching the air and if I hit him
11:16 - yep there's the particles there's a nice
11:18 - solid hit all right good so now final
11:21 - and let's add a little screen shake
11:23 - there is a simple screen shape function
11:25 - on the code monkey utility so let's use
11:27 - that and we want to shake only when we
11:30 - actually hit an enemy so in here let's
11:32 - do the utah's class not shake camera and
11:35 - we give it an intensity and the timer so
11:37 - let's test out these values all right
11:40 - here I am and if I hit the air yep no
11:43 - particles no screen shake okay and if I
11:45 - hit an enemy if there your very slight
11:48 - screen shake and the particles as well
11:50 - now let's make a tiny bit more screen
11:53 - shake when we actually kill an enemy
11:54 - just to differentiate D 2 so in here
11:57 - instead of shaking every time when we
11:58 - don't hit an enemy do a screen shake
12:00 - when you do hit an enemy do slightly
12:03 - more ok Here I am and I hit nothing and
12:07 - nothing happens hit an enemy 1 2 3 and
12:10 - as you can see on the third one when he
12:12 - was killed it shake a bit more 1 2 3 and
12:15 - yep so we can now attack the various
12:17 - enemies and it looks very nice and they
12:20 - fly away alright so there you have it we
12:23 - added help to the enemies and various
12:25 - effects to make hitting them feel very
12:27 - satisfying in the next video we're going
12:29 - to setup enemy movement as always you
12:31 - can download the project family Nutella
12:33 - tease from unity code monkey comm if you
12:35 - have any questions post them in the
12:36 - comments and I'll do my best to answer
12:38 - them subscribe for more videos and I'll
12:40 - see you next time
12:52 - you

Cleaned transcript:

hello and welcome I am your code monkey in the series of creating spiderman in unity 2d in this video we're going to take our enemies and add a health system let's begin so here's the scene so far we have our Spider Man he can attack towards the mouse there are two enemies in here they are being spawned from prefabs so we can instantiate as many as we want and if I go here and I click near him I can attack that one and if I click on this one I can attack this alright so far everything looks great except obviously for the fact that no matter how many times I hit him the enemies never actually die so we need to have a simple health system to the enemies now before we do that and let's sort out one issue now the enemy that I attack is being selected based on the position near where I click so if I'm near the enemy and I click on him it looks just fine however if I'm Way over here and I click you can see that it still attacks the enemy this is because we are calculating an enemy near the mouse position where it should be near the spiderman position but pointed towards the mouse position so if I click in here I should be looking for enemies around this area so let's go into the code here in our spiderman class down here on the handle attack we are checking for the closest and me to the attack position which is set on the mouse world position instead of doing that let's calculate the attack position to be near the Spider Man but towards the direction of the mouse so let's complete a vector3 of the direction to the mouse cutting like that taking the mouse role position our Spider Man position and then normalize the whole thing so now our tack position will be the gap position so the position of our Spider Man plays the direction towards the mouse position and multiplied by an offset of let's say about 20 units so this contemplates a position moving 20 units away from the Spider Man position towards the mouse so that's at the attack position and the rest of the code works perfectly fine alright so here I am in between both of them and if I click on here yep I'm attacking now one click on this one attack this one okay and now if I go away and I click right on top of this one yep you can see that he's no longer being hit I'm attacking but since there are no enemies near around this position then that it's not being hit and if I move closer yep no he's being hit okay great let's just clean up our code in here to remove these magic numbers all right so our code is now clear and very easy to follow so now let's set up the enemy health we're going to keep things very nice and simple so let's first go into the enemy class and in here on the member variables let's just simply define an INT or the enemy helm very simple on awake let's set the health to three okay and down here on our damage function let's decrease the health by one okay then let's also make a public bomb function for testing if he is dead and to simply return if the health is under zero and in here on damage if this enemy is now dead then let's simply destroy the game object now we also need to go up here when grabbing the closest enemy we have to ignore the enemies that are dead so in here simply do if the enemy dot is then so if this enemy is dead then continue so let's just ignore this one continue simply continues to the next enemy on the cycle so if the enemy is dead this does not get run now can also simply remove him from the list when he dies but for now let's leave them all in there so let's run the game okay there's the enemies and now if I hit him one two three and poof he vanishes so he is correctly taking damage and since he has three home after three hits he vanishes now just for testing let's go back into the game hammer and here we set this function to automatically create enemy so let's remove that comment just so we can test them adding multiple enemies okay so here I am as you can see enemies are being spawned and if I hit him yep three hits he's dead one two three he's gone one two three gone one two three gone and it works with all that okay great now just vanishing enemies obviously isn't very fun so let's make them fly away when they actually done now in order to make them fly I'm going to use the script that we created in a previous the flying body script you can check out the video to see the home creation of the script but essentially it's very simple we have a static create function we give it a prefab a spawn position and a fly direction it in Senshi AIT's the prefab adds the fine body component and sets up with the flying direction then on update that simply moves the transform towards the fire Direction it increases the scale every update rotates them and after one second destroys itself so it's a pretty simple but satisfying effect now in order to use it the one thing we need is a prefab to instantiate so let's create an empty game object and give it the sprite renderer and in here I have a texture for an enemy flying body so this is a sprite that won't be flying away so let's make it into a prefab so create a new prefab TF enemy flying body and drag the game object onto it okay now let's go into the game assets to add a reference for our prefabs so a public transform PF enemy flying body now in here let's drag the reference okay and now let's go back into the enemy script and down here when he takes damage if he is dead we still destroy this game object but then we want to instantiate the flying body so let's do flying body dot create using the static create function now again in here we take a prefab so we go into the game assets not instance not grab the enemy flying body prefab we spawn him on this position and with regards to the flow direction it won't be the same direction that he was attacked in so in here we are currently the direction to the attacker so we want to reverse of that to keep going from where the attacker attacked him so direction to attacker x 1 f alright it's not when he dies he should spawn a flying body let's see alright there's the enemy and if I hit him 1 2 3 and yep there you go he's flying away 1 2 3 fine fly fine alright so we now have a nice satisfying effect for winning and me is killed now let's make it more impactful by moving spiderman for on attack and giving the enemy a slight knock back so first let's go into our enemy code and in here we are going to check if he is dead then we do that if he is not that then we do something else so enemy is still alive and essentially in here we only want to play the hit animation if he is still alive if he's dead obviously it doesn't matter and if he's still alive then let's knock him back so we do that by moving the transform dot position move it towards the direction to the attacker times minus 1/2 since we don't want to move to towards the attacker brother away from the attacker so move them away by let's say five units so minus 1/2 times 500k so float knock back distance let's put up five up and that's what we're going to use in here so if he's still alive we move him away from the attacker by a distance of knockback this is so now let's go into the spiderman and in here when we are attacking first in here we are checking if there is an enemy or not so in here there's an enemy range if not there's no enemy and right so if there is no enemy in range then we are simply punching into the air then let's move in towards the attack direction so we need to actually define the attack direction up here we do have to recount late if we do have an enemy so common later it again in there and calculate it in here so if there is no enemy in range then simply do a transform dot position and move them towards the attack dere by a dash forward okay so if there is no enemy simply move them forward by this amount all right now if there is an enemy first we're gonna call the damage function so that the enemy gets knocked back or killed and then after we do first we need to check out if he is that so if the enemy dot is dead if he is dead then we want to move forward the same as before okay but if he is not dead let's position him relative to where the enemy was not back to so we're going to say the transform dot position to be at the enemy that get position plus the attack direction reversed multiplied by a distance to enemy hello distance to enemy and let's say five okay so if the enemy is dead then we dash forward the same as if there is no enemy if the enemy is not dead then he's still there so the enemy was knocked back then we grabbed a position where he was knocked back to then we applied the reverse of the attack direction and we moved by a certain amount this way every time we attack an enemy we stay exactly within the same distance of him okay so we should be seeing the enemy knocked back and spiderman right next to him okay so here I am first of all let's try and see if we when we attack and yep there you go he's moving slightly forward every time we talk okay and now if I approach an enemy and I hit him the enemy should get knocked back and I should also move forward and yep there it is he's moving towards the enemy the enemy gets knocked back and as you can see no matter how far I attack him so if I take him this far he goes exactly within the same distance and if I'm very close also the same distance so the animation always connects all right so far so good now the hit particles shouldn't really only spawn if I hit something so if I'm hitting the air it really doesn't make much sense to see all of these head particles so let's make sure the only spawn when I actually hit an enemy so back on our spiderman class down here we are spawning the hit particles in here inside our play punch or kick animation now we only want to trigger this if we do attack an enemy so let's go up here and simply define a ball for hit enemy and if the enemy is not know that we did hit an enemy so hit enemy set to true and if no enemy is in range then set to false because we didn't hit any enemy and down here we are simply going to spawn the impact effect if we did hit the enemy if not then we don't spawn anyway do the same thing there and in here all right so now the hit particles should only spawn if I actually hit something so in here if I hit the air yep no particles didn't hit anything just punching the air and if I hit him yep there's the particles there's a nice solid hit all right good so now final and let's add a little screen shake there is a simple screen shape function on the code monkey utility so let's use that and we want to shake only when we actually hit an enemy so in here let's do the utah's class not shake camera and we give it an intensity and the timer so let's test out these values all right here I am and if I hit the air yep no particles no screen shake okay and if I hit an enemy if there your very slight screen shake and the particles as well now let's make a tiny bit more screen shake when we actually kill an enemy just to differentiate D 2 so in here instead of shaking every time when we don't hit an enemy do a screen shake when you do hit an enemy do slightly more ok Here I am and I hit nothing and nothing happens hit an enemy 1 2 3 and as you can see on the third one when he was killed it shake a bit more 1 2 3 and yep so we can now attack the various enemies and it looks very nice and they fly away alright so there you have it we added help to the enemies and various effects to make hitting them feel very satisfying in the next video we're going to setup enemy movement as always you can download the project family Nutella tease from unity code monkey comm if you have any questions post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time you
