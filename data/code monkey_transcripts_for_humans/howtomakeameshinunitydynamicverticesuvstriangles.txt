With timestamps:

00:00 - in this video we're going to see how we
00:01 - can make a mesh dynamically through code
00:03 - this is extremely useful in many
00:05 - scenarios like for making a custom
00:07 - animation system like the one I use in
00:09 - my videos or make me heat map or a radar
00:12 - chart let's begin
00:16 - [Music]
00:21 - hello and welcome I'm your code monkey
00:23 - and this channel is all about helping
00:24 - you learn how to make your own games
00:26 - with in-depth tutorials made by a
00:27 - professional indie game developer so if
00:29 - you find the video helpful consider
00:31 - subscribing
00:31 - okay so let's first talk about how
00:33 - useful it is to be able to make dynamic
00:35 - meshes meshes are used to render
00:37 - everything as you will soon see and
00:39 - making meshes through code allows you to
00:41 - dynamically generate interesting shapes
00:43 - on the fly we can modify the vertices
00:45 - and what part of the texture is rendered
00:47 - which allows for very useful matte facts
00:49 - one of the recent videos was covering a
00:52 - radar chart new UI and the shape for
00:54 - that radar is using a custom mesh the
00:57 - environment heat map used in Parramatta
00:59 - gone along with the four towns our own
01:01 - based on dynamic meshes another example
01:04 - is simply the animation system that I
01:05 - use in my videos each unit is a single
01:08 - mesh that is dynamically composed of
01:10 - multiple quads that display certain
01:12 - parts of the texture also the persistent
01:14 - particle system that I use for both
01:16 - particles is also mesh base each
01:18 - particle is a single part that moves its
01:20 - vertices until it comes to complete stop
01:21 - so this is just a sample from the
01:24 - awesome stuff we can create once you
01:26 - know how to create custom dynamic meshes
01:28 - so in this video we're going to learn
01:30 - how to create a mesh completely from
01:32 - scratch we're going to see how something
01:34 - is rendered on screen then we're going
01:36 - to learn to create a mesh object in code
01:38 - learn what size each of the mesh
01:40 - elements need to be draw a triangle then
01:43 - apply a texture to it and finally draw
01:46 - another triangle in order to create a
01:47 - square with that you will know
01:49 - everything you need to know in order to
01:51 - make your own custom meshes to create
01:53 - your own specific awesome systems then
01:56 - in the end I will expand upon the code
01:57 - to make some examples of custom meshes
01:59 - in action like a 4-time and the
02:01 - animation system okay so now that we've
02:04 - seen just how useful it is being able to
02:06 - make a mesh through code let's talk
02:07 - about how something is actually rendered
02:09 - on screen so here is my empty scene
02:12 - there's nothing on it over here in the
02:15 - hierarchy you can see that all I have is
02:16 - the UI and a simple camera and the
02:19 - camera as you can see it is rendering
02:20 - component in black now here I make a new
02:23 - game object and again still nothing is
02:25 - rendered now I add
02:27 - mesh filter and a mesh renderer and
02:31 - again stone nothing invisible however
02:34 - now I go in here and I set a mesh let's
02:36 - use the default quad and now finally you
02:39 - can see something it's increasing and
02:43 - now I drag a material onto it and there
02:45 - yo we can now view our texture so these
02:47 - are the two core components that we need
02:49 - in order to render something on screen
02:51 - we have a mesh and a mesh renderer the
02:54 - mesh is what defines the shape that is
02:56 - rendered and the material contains the
02:58 - texture data to be applied to that mesh
03:00 - as you may know computer graphics are
03:02 - made using polygons so triangles and
03:05 - over here I have chosen the default quad
03:07 - mesh and in order to make a Quan or
03:09 - square we need two polygons or two
03:11 - triangles and if we go in here on our
03:14 - scene we can select here it is currently
03:16 - shaded and we select wireframe instead
03:18 - and you can see indeed that our quad is
03:21 - made up of two polygons so here we have
03:23 - one and down here we have not so you put
03:25 - two of them together and we have a nice
03:27 - square make me what mesh the sprite
03:30 - renderer works exactly in the same way
03:31 - so if we go in here create a new sprite
03:33 - there Lissie sprite renderer drag the
03:35 - sprite and here you can see the sprite
03:37 - ring does the example the same thing
03:38 - also has a quad with two polygons all
03:41 - right so now that we've seen how
03:42 - something is rendered on screen let's
03:44 - see how we can dynamically create a mesh
03:46 - through code so let's make a script to
03:48 - test our code so in here make a new C
03:51 - sharp script let's call it our testing
03:53 - let's make a new game object call it
03:55 - testing and drag the script on to it
03:59 - okay now here in our script let's first
04:02 - just going to our private void start and
04:04 - do a simple debug well just make sure
04:07 - that our script is running
04:10 - okay I'm let's see the console and we
04:12 - have our console same test okay great so
04:15 - our script is running correct now in
04:17 - here let's start by creating a mesh so
04:19 - it's going to be an object of type mesh
04:21 - well it's called mesh can we just do new
04:23 - mesh all right there's our mesh object
04:26 - however unlike this all we've done is
04:28 - create a mesh in memory it doesn't
04:30 - really exist in our scene in order to
04:32 - show our mesh like we saw one of the
04:34 - things we need is a mesh filter so here
04:36 - in our testing object what
04:39 - mesh filter and now we can go back into
04:42 - our code and here we get the component
04:44 - of type mesh filter and we set the mesh
04:47 - to be our and you only create an mesh
04:49 - okay now let's test okay here we are and
04:51 - so nothing is visible however if we
04:53 - inspect in here on our mesh filter we
04:55 - can see that there is something in there
04:57 - and if we double click we can now
05:00 - inspect the mesh and we can see that it
05:01 - has zero vertices and zero triangles so
05:04 - the mesh has no data but we did manage
05:06 - to create an assignment okay so far so
05:08 - good
05:09 - all right now let's set up the vertices
05:11 - and triangles over here back in our code
05:14 - when we create the mesh there are three
05:17 - fields that we need to set we need to
05:19 - set the vertices which is an array of
05:22 - vector threes vertices represent each
05:24 - vertex of our mesh then we also need to
05:28 - set the UV this is an array of vector
05:31 - twos which define the part of the
05:32 - texture that matches with a certain
05:34 - vertex and finally we need to set the
05:37 - triangles which is an array of ends
05:39 - which define the vertex index and three
05:41 - of them make up a polygon okay
05:43 - so let's set them all first let's make
05:46 - some local arrays we're going to set
05:48 - them up and only in the end do we assign
05:50 - it to our mesh so we need an array of
05:52 - vector threes for our vertices then we
05:57 - need an array of vector twos for our UV
06:00 - and finally we need an array of events
06:04 - for our triangles all right so we do it
06:10 - we set them all up and finally we upload
06:12 - them to the mesh alright so far so good
06:18 - now as you can see we need to define a
06:20 - size for our race so let's start off
06:22 - with the simplest thing we can render
06:24 - which is a single polygon in order to
06:26 - create the triangle polygon we need
06:28 - three points so in here we're going to
06:30 - have three vertices then the UV is
06:32 - always the same size as the vertices so
06:34 - we also have three and finally the
06:36 - triangles contains the indexes of each
06:38 - vertex that makes up a triangle and a
06:40 - triangle is made up of three points so
06:42 - in here again we're also going to have
06:43 - three alright so just like this
06:46 - let's test and inspect our mesh okay see
06:49 - we are we still can't see anything but
06:51 - let's inspect our mesh
06:52 - and there it is our mesh now has some
06:54 - data it has three vertices it has UV and
06:57 - one triangle one polygon triangle
06:59 - alright great back in the code in here
07:03 - let's define our vertices so we're going
07:10 - to have three vertices for vertex zero
07:12 - let's put it on new vector3 on 0 0 then
07:17 - for d1 let's put it right above so on 0
07:20 - 100 and finally for the third vertex
07:24 - let's put it up into the right so we're
07:26 - going to set it to 100 100 alright these
07:32 - are our three vertices now for the UV
07:35 - let's ignore it for now and finally for
07:38 - the triangles this is an array of ins
07:42 - which contains the index of the vertices
07:44 - that make up a polygon so it start our
07:47 - triangle on vertex zero then we connect
07:51 - the vertex 0 into the vertex on index 1
07:54 - and finally we connect it into the index
07:56 - 2 and that's it now one thing that is
08:00 - very important in here is the order of
08:02 - the indexes each polygon has a face and
08:05 - a back face and some shaders won't call
08:07 - the back face what defines the front and
08:09 - back of the polygon is the order of the
08:11 - indexes in order to see the front face
08:13 - always set the indexes in a clockwise
08:15 - order so here you can see that our
08:18 - triangle is going from the origin then
08:21 - going up and then up into the right if
08:24 - we swapped it and then up to the right
08:26 - to the up to the down then we would have
08:28 - said our triangle counterclockwise which
08:30 - would swap the front and back so always
08:32 - keep that in mind and in most cases just
08:33 - set it to clockwise all right so now
08:36 - that we've set everything up let's test
08:38 - ok here we are and we still can't see
08:41 - anything let's inspect the mansion there
08:42 - yo everything is correct reverse his
08:44 - triangles in the UV and the reason we
08:46 - can't see anything is like we've seen
08:47 - previously we need a mesh filter for the
08:49 - mesh and then we need a mesh render and
08:52 - you we can finally see our next polygon
08:54 - awesome if we inspect the scene and
08:57 - again put it on wireframe we can see our
08:59 - nice poly you're on connecting there's a
09:01 - virtus here one here one here and the
09:03 - Tran
09:03 - connecting of them now our polygon is
09:06 - currently not displaying a texture
09:08 - because we did not set the UV so let's
09:10 - do that so we're going to set up the UV
09:12 - right now in here the UV array always
09:17 - has the same size as the vertex array so
09:18 - we have three vertices and three UV each
09:21 - UV index contains a texture position
09:23 - that should be matched to the vertex in
09:25 - that exact same index over here on the
09:28 - project files I have this texture as you
09:31 - can see it has a bunch of different
09:32 - colors so we can easily see what part of
09:34 - our texture is being shown now we want
09:37 - to apply this texture to our polygon in
09:39 - here the UVs are vector twos and they
09:43 - are normalized vector twos that means
09:45 - that the lower left corner of the
09:47 - texture is on point zero zero and the
09:49 - upper right point is on one one so we
09:52 - created our polygon with three vertices
09:53 - one on the bottom then one above and one
09:55 - two right so in order to display this
09:58 - texture just like the polygon shape
09:59 - we're going to set the vertex on index 0
10:02 - into 0 0 so that it displays the lower
10:05 - left corner then on the index one we
10:08 - want to show the upper left part of the
10:10 - texture so we're going to keep the X at
10:13 - 0 and the Y at 1 and finally on the two
10:17 - we want to show the upper right so we
10:19 - set it into 1 1 all right that should do
10:24 - it we assigned our vertices or UVs and
10:27 - our triangles so our mesh has complete
10:29 - information
10:30 - let's test so here we are and we still
10:32 - see the same thing texture the reason is
10:35 - because we need to assign our material
10:37 - so down here we have our texture let's
10:39 - make a material to a point to it so a
10:42 - new material thrown with the same thing
10:44 - and here in this case let's use a very
10:47 - simple shader so just unlit texture and
10:50 - we drag our rainbow texture ok now back
10:53 - in our testing object we just drag the
10:55 - material and there it is and as you can
10:57 - see the texture perfectly matches with
10:59 - the corners we select so down here the
11:01 - in light blue exactly matching that one
11:03 - then appear the green yep and the red
11:05 - yep and the rest of the texture is not
11:08 - visible since we did not set the UV to
11:10 - use it awesome
11:11 - so a triangle is a great shape but on
11:14 - one of the time
11:14 - a square shape is more helpful so let's
11:17 - see how we can expand our mesh in order
11:18 - to make a quad now here in our code we
11:21 - set up our triangle which has three
11:23 - versus three UVs and three triangles now
11:27 - in order to make a quad essentially what
11:29 - we need is just another triangle we put
11:31 - two triangles together and we have a
11:33 - nice square so let's think about what we
11:35 - need in order to make a square we need
11:37 - four points so in here we need four
11:39 - vertices then you these are the exact
11:42 - same number as the vertices so again
11:43 - also for and now for the triangles over
11:48 - here we have three triangle indexes for
11:50 - each polygon now in order to make our
11:52 - square we need two polygons so that
11:54 - means we need to have three times two
11:56 - triangles which is six and that's it
11:58 - that's the size of our race now here we
12:01 - are setting up our values so you have 0
12:04 - 0 0 100 100 0 and another to make quad
12:07 - what we need is the one that is right
12:09 - and down so let's at the very Sun index
12:12 - 3 to be on 100 and 0 now on the uvn
12:18 - let's show the entire texture so for the
12:21 - UV 3 let's put it on 1 0 and now in here
12:25 - for the triangles the first polygon
12:27 - stays the same so we'll leave the first
12:29 - three indexes and now for the next 3
12:33 - again we remember to set them clockwise
12:35 - so for the second polygon we're going to
12:37 - go from vertex 0 then go into vertex 2
12:41 - which is up and to the right
12:42 - and finally going to vertex 3 which is
12:45 - to the right and down and that's it we
12:47 - have our quad nicely set up so we have 4
12:50 - vertices for UVs and six friends alright
12:53 - let's test any of there it is we have
12:56 - our quad being displayed as a perfect
12:58 - square
12:58 - showing the entirety of our texture so
13:01 - we have essentially recreated the
13:03 - underlying code for the sprite printer
13:04 - if we inspect our scene we can see that
13:08 - indeed we have our two polygons so we
13:11 - can see shades wireframe and see exam
13:13 - like that we have two triangles
13:14 - connected not to make NS quad so now you
13:17 - know how to create a mesh and set up the
13:19 - vertices UVs and triangles to take any
13:22 - shape you want every other effect you
13:24 - want to make is just an expansion of
13:25 - this code by adding more
13:27 - sieze and different triangles for
13:29 - example let's make some tiles alright so
13:55 - here's the code to make some tiles now I
13:57 - plan on doing a dedicated video on how
13:59 - to make a grid map and visualize it but
14:01 - for now I just want to quickly
14:02 - demonstrate the various uses for the
14:05 - dynamic mesh so here you can see that I
14:07 - have a certain width and certain height
14:09 - let's put this bigger let's put it 4 by
14:10 - 4 and a certain town size then the
14:14 - vertices I calculate them by 4 since
14:16 - again we have 4 per quad so 4 vertices 4
14:18 - and 6 multiply them by the total size of
14:22 - the grid then I cycle through the
14:24 - website onto the height and set the quad
14:26 - data for that specific quad so do all
14:29 - this and then the result and here it is
14:31 - we have our result our nice tiled grid
14:34 - so again the way that it works
14:35 - essentially each of these is a nice quad
14:38 - so we can go back into the scene and
14:40 - here inspect and you can see that each
14:42 - of them is indeed one quad so this is
14:45 - just an expansion of what we were doing
14:47 - previously so instead of having this
14:49 - texture you would add a fourth out
14:50 - lecture and you can see how you could
14:52 - have a nice 4 tile system just like the
14:54 - one that is used in Parramatta kun now
14:57 - for another example let's make a simple
14:59 - animation
15:32 - all right so here is a small animation
15:35 - that functions exactly like the custom
15:37 - animation system that I use in my videos
15:38 - so as you can see the head is bouncing
15:41 - up and down there's a body behind and if
15:43 - we go and inspect again our boyfriend
15:45 - there it is you can see the quad for the
15:48 - body and the quad for the head so put it
15:49 - on shaded and yep there you go you can
15:51 - easily see two quads and one of them is
15:53 - moving and down here I have the texture
15:55 - and you can see it is a simple
15:58 - spreadsheet texture with the various
16:00 - body parts cleanly separated now here in
16:03 - the code as you can see it is all based
16:05 - on quads so we have two quads then we
16:09 - have a quad to render our body exactly
16:12 - the same way that we created our
16:13 - previous quads and another one for the
16:15 - head when the main difference is over
16:17 - here on the UV again the UV is a
16:20 - normalized value so we need to take the
16:22 - texture width and height in pixels take
16:25 - the position in pixels and then we
16:27 - simply divide them in order to get our
16:28 - normalized ohms so we do that
16:30 - in order to just show the body texture
16:33 - on this force quad and down here we show
16:35 - just the head texture and then down here
16:38 - I'm using the code monkey Tonys to
16:40 - create a function on update so this code
16:42 - runs on every update and it's just a
16:45 - simple moving up and down code so as you
16:47 - can see I just take the head position I
16:49 - move the Y up and down then I modify the
16:52 - vertices array based on the new head
16:54 - position and I upload them back into the
16:56 - mesh remember that in order to modify a
16:58 - mesh first you need to modify and local
17:00 - array and in the end you need to apply
17:02 - it to the mesh so we do all that and
17:05 - again here is our nice result we have
17:07 - our simple character with two quads one
17:10 - of them moving up and down by modifying
17:11 - these vertices and again you can see
17:13 - that it is all running on a single game
17:15 - object on a single mesh so this is the
17:18 - core for my animation system you just
17:20 - have more buddy
17:21 - parts store the keyframes positions in a
17:23 - file and have it all working so now you
17:25 - know everything you need to know about
17:27 - making custom meshes now go ahead and
17:29 - make some cool stuff yourself as always
17:32 - you can download the project files any
17:34 - tony's from unity code monkey comm if
17:36 - you liked the video subscribe the
17:37 - channel for more ent tutorials post any
17:39 - questions you have in the comments and
17:40 - I'll do my best answer them
17:42 - alright see you next time
17:44 - [Music]

Cleaned transcript:

in this video we're going to see how we can make a mesh dynamically through code this is extremely useful in many scenarios like for making a custom animation system like the one I use in my videos or make me heat map or a radar chart let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with indepth tutorials made by a professional indie game developer so if you find the video helpful consider subscribing okay so let's first talk about how useful it is to be able to make dynamic meshes meshes are used to render everything as you will soon see and making meshes through code allows you to dynamically generate interesting shapes on the fly we can modify the vertices and what part of the texture is rendered which allows for very useful matte facts one of the recent videos was covering a radar chart new UI and the shape for that radar is using a custom mesh the environment heat map used in Parramatta gone along with the four towns our own based on dynamic meshes another example is simply the animation system that I use in my videos each unit is a single mesh that is dynamically composed of multiple quads that display certain parts of the texture also the persistent particle system that I use for both particles is also mesh base each particle is a single part that moves its vertices until it comes to complete stop so this is just a sample from the awesome stuff we can create once you know how to create custom dynamic meshes so in this video we're going to learn how to create a mesh completely from scratch we're going to see how something is rendered on screen then we're going to learn to create a mesh object in code learn what size each of the mesh elements need to be draw a triangle then apply a texture to it and finally draw another triangle in order to create a square with that you will know everything you need to know in order to make your own custom meshes to create your own specific awesome systems then in the end I will expand upon the code to make some examples of custom meshes in action like a 4time and the animation system okay so now that we've seen just how useful it is being able to make a mesh through code let's talk about how something is actually rendered on screen so here is my empty scene there's nothing on it over here in the hierarchy you can see that all I have is the UI and a simple camera and the camera as you can see it is rendering component in black now here I make a new game object and again still nothing is rendered now I add mesh filter and a mesh renderer and again stone nothing invisible however now I go in here and I set a mesh let's use the default quad and now finally you can see something it's increasing and now I drag a material onto it and there yo we can now view our texture so these are the two core components that we need in order to render something on screen we have a mesh and a mesh renderer the mesh is what defines the shape that is rendered and the material contains the texture data to be applied to that mesh as you may know computer graphics are made using polygons so triangles and over here I have chosen the default quad mesh and in order to make a Quan or square we need two polygons or two triangles and if we go in here on our scene we can select here it is currently shaded and we select wireframe instead and you can see indeed that our quad is made up of two polygons so here we have one and down here we have not so you put two of them together and we have a nice square make me what mesh the sprite renderer works exactly in the same way so if we go in here create a new sprite there Lissie sprite renderer drag the sprite and here you can see the sprite ring does the example the same thing also has a quad with two polygons all right so now that we've seen how something is rendered on screen let's see how we can dynamically create a mesh through code so let's make a script to test our code so in here make a new C sharp script let's call it our testing let's make a new game object call it testing and drag the script on to it okay now here in our script let's first just going to our private void start and do a simple debug well just make sure that our script is running okay I'm let's see the console and we have our console same test okay great so our script is running correct now in here let's start by creating a mesh so it's going to be an object of type mesh well it's called mesh can we just do new mesh all right there's our mesh object however unlike this all we've done is create a mesh in memory it doesn't really exist in our scene in order to show our mesh like we saw one of the things we need is a mesh filter so here in our testing object what mesh filter and now we can go back into our code and here we get the component of type mesh filter and we set the mesh to be our and you only create an mesh okay now let's test okay here we are and so nothing is visible however if we inspect in here on our mesh filter we can see that there is something in there and if we double click we can now inspect the mesh and we can see that it has zero vertices and zero triangles so the mesh has no data but we did manage to create an assignment okay so far so good all right now let's set up the vertices and triangles over here back in our code when we create the mesh there are three fields that we need to set we need to set the vertices which is an array of vector threes vertices represent each vertex of our mesh then we also need to set the UV this is an array of vector twos which define the part of the texture that matches with a certain vertex and finally we need to set the triangles which is an array of ends which define the vertex index and three of them make up a polygon okay so let's set them all first let's make some local arrays we're going to set them up and only in the end do we assign it to our mesh so we need an array of vector threes for our vertices then we need an array of vector twos for our UV and finally we need an array of events for our triangles all right so we do it we set them all up and finally we upload them to the mesh alright so far so good now as you can see we need to define a size for our race so let's start off with the simplest thing we can render which is a single polygon in order to create the triangle polygon we need three points so in here we're going to have three vertices then the UV is always the same size as the vertices so we also have three and finally the triangles contains the indexes of each vertex that makes up a triangle and a triangle is made up of three points so in here again we're also going to have three alright so just like this let's test and inspect our mesh okay see we are we still can't see anything but let's inspect our mesh and there it is our mesh now has some data it has three vertices it has UV and one triangle one polygon triangle alright great back in the code in here let's define our vertices so we're going to have three vertices for vertex zero let's put it on new vector3 on 0 0 then for d1 let's put it right above so on 0 100 and finally for the third vertex let's put it up into the right so we're going to set it to 100 100 alright these are our three vertices now for the UV let's ignore it for now and finally for the triangles this is an array of ins which contains the index of the vertices that make up a polygon so it start our triangle on vertex zero then we connect the vertex 0 into the vertex on index 1 and finally we connect it into the index 2 and that's it now one thing that is very important in here is the order of the indexes each polygon has a face and a back face and some shaders won't call the back face what defines the front and back of the polygon is the order of the indexes in order to see the front face always set the indexes in a clockwise order so here you can see that our triangle is going from the origin then going up and then up into the right if we swapped it and then up to the right to the up to the down then we would have said our triangle counterclockwise which would swap the front and back so always keep that in mind and in most cases just set it to clockwise all right so now that we've set everything up let's test ok here we are and we still can't see anything let's inspect the mansion there yo everything is correct reverse his triangles in the UV and the reason we can't see anything is like we've seen previously we need a mesh filter for the mesh and then we need a mesh render and you we can finally see our next polygon awesome if we inspect the scene and again put it on wireframe we can see our nice poly you're on connecting there's a virtus here one here one here and the Tran connecting of them now our polygon is currently not displaying a texture because we did not set the UV so let's do that so we're going to set up the UV right now in here the UV array always has the same size as the vertex array so we have three vertices and three UV each UV index contains a texture position that should be matched to the vertex in that exact same index over here on the project files I have this texture as you can see it has a bunch of different colors so we can easily see what part of our texture is being shown now we want to apply this texture to our polygon in here the UVs are vector twos and they are normalized vector twos that means that the lower left corner of the texture is on point zero zero and the upper right point is on one one so we created our polygon with three vertices one on the bottom then one above and one two right so in order to display this texture just like the polygon shape we're going to set the vertex on index 0 into 0 0 so that it displays the lower left corner then on the index one we want to show the upper left part of the texture so we're going to keep the X at 0 and the Y at 1 and finally on the two we want to show the upper right so we set it into 1 1 all right that should do it we assigned our vertices or UVs and our triangles so our mesh has complete information let's test so here we are and we still see the same thing texture the reason is because we need to assign our material so down here we have our texture let's make a material to a point to it so a new material thrown with the same thing and here in this case let's use a very simple shader so just unlit texture and we drag our rainbow texture ok now back in our testing object we just drag the material and there it is and as you can see the texture perfectly matches with the corners we select so down here the in light blue exactly matching that one then appear the green yep and the red yep and the rest of the texture is not visible since we did not set the UV to use it awesome so a triangle is a great shape but on one of the time a square shape is more helpful so let's see how we can expand our mesh in order to make a quad now here in our code we set up our triangle which has three versus three UVs and three triangles now in order to make a quad essentially what we need is just another triangle we put two triangles together and we have a nice square so let's think about what we need in order to make a square we need four points so in here we need four vertices then you these are the exact same number as the vertices so again also for and now for the triangles over here we have three triangle indexes for each polygon now in order to make our square we need two polygons so that means we need to have three times two triangles which is six and that's it that's the size of our race now here we are setting up our values so you have 0 0 0 100 100 0 and another to make quad what we need is the one that is right and down so let's at the very Sun index 3 to be on 100 and 0 now on the uvn let's show the entire texture so for the UV 3 let's put it on 1 0 and now in here for the triangles the first polygon stays the same so we'll leave the first three indexes and now for the next 3 again we remember to set them clockwise so for the second polygon we're going to go from vertex 0 then go into vertex 2 which is up and to the right and finally going to vertex 3 which is to the right and down and that's it we have our quad nicely set up so we have 4 vertices for UVs and six friends alright let's test any of there it is we have our quad being displayed as a perfect square showing the entirety of our texture so we have essentially recreated the underlying code for the sprite printer if we inspect our scene we can see that indeed we have our two polygons so we can see shades wireframe and see exam like that we have two triangles connected not to make NS quad so now you know how to create a mesh and set up the vertices UVs and triangles to take any shape you want every other effect you want to make is just an expansion of this code by adding more sieze and different triangles for example let's make some tiles alright so here's the code to make some tiles now I plan on doing a dedicated video on how to make a grid map and visualize it but for now I just want to quickly demonstrate the various uses for the dynamic mesh so here you can see that I have a certain width and certain height let's put this bigger let's put it 4 by 4 and a certain town size then the vertices I calculate them by 4 since again we have 4 per quad so 4 vertices 4 and 6 multiply them by the total size of the grid then I cycle through the website onto the height and set the quad data for that specific quad so do all this and then the result and here it is we have our result our nice tiled grid so again the way that it works essentially each of these is a nice quad so we can go back into the scene and here inspect and you can see that each of them is indeed one quad so this is just an expansion of what we were doing previously so instead of having this texture you would add a fourth out lecture and you can see how you could have a nice 4 tile system just like the one that is used in Parramatta kun now for another example let's make a simple animation all right so here is a small animation that functions exactly like the custom animation system that I use in my videos so as you can see the head is bouncing up and down there's a body behind and if we go and inspect again our boyfriend there it is you can see the quad for the body and the quad for the head so put it on shaded and yep there you go you can easily see two quads and one of them is moving and down here I have the texture and you can see it is a simple spreadsheet texture with the various body parts cleanly separated now here in the code as you can see it is all based on quads so we have two quads then we have a quad to render our body exactly the same way that we created our previous quads and another one for the head when the main difference is over here on the UV again the UV is a normalized value so we need to take the texture width and height in pixels take the position in pixels and then we simply divide them in order to get our normalized ohms so we do that in order to just show the body texture on this force quad and down here we show just the head texture and then down here I'm using the code monkey Tonys to create a function on update so this code runs on every update and it's just a simple moving up and down code so as you can see I just take the head position I move the Y up and down then I modify the vertices array based on the new head position and I upload them back into the mesh remember that in order to modify a mesh first you need to modify and local array and in the end you need to apply it to the mesh so we do all that and again here is our nice result we have our simple character with two quads one of them moving up and down by modifying these vertices and again you can see that it is all running on a single game object on a single mesh so this is the core for my animation system you just have more buddy parts store the keyframes positions in a file and have it all working so now you know everything you need to know about making custom meshes now go ahead and make some cool stuff yourself as always you can download the project files any tony's from unity code monkey comm if you liked the video subscribe the channel for more ent tutorials post any questions you have in the comments and I'll do my best answer them alright see you next time
