With timestamps:

00:00 - hello and welcome I'm your code monkey a
00:02 - while ago Mark Brown from the channel
00:04 - game makers toolkit did an excellent
00:05 - beginner's guide for Unity it's a great
00:07 - video if you're a beginner or you want
00:09 - to get a quick refresher on the basics
00:11 - go ahead and give it a watch it covers
00:13 - the absolute Basics on making a game
00:14 - kind of like Flappy Bird with some
00:16 - really nice editing that makes it really
00:17 - easy to follow I definitely wish I had
00:19 - one tenth of his editing skills I
00:21 - started writing a comment pointing out
00:23 - some more things to help beginner go one
00:24 - level past the complete beginner stage
00:26 - and that comment ended up huge in super
00:28 - detailed so I figured I'd make a quick
00:30 - visual version covering all the points
00:32 - that are exactly one level above
00:33 - absolute beginners by the way if you
00:35 - want to learn blender 3D modeling
00:37 - there's an excellent homo bundle with a
00:39 - bunch of horses and the usual extremely
00:41 - deep 98 off discount I followed the
00:43 - complete blender created course myself
00:45 - last year and I managed to go from
00:46 - complete beginner to being able to build
00:48 - some nice models or if you just want to
00:50 - pick up some ready-made assets then
00:52 - there's also a sale on the city store
00:54 - lots of packs for everything you can
00:56 - think of all in their signature gorgeous
00:58 - low poly Style so check out both sales
01:01 - with the links in the description so
01:03 - let's take a look at the slightly more
01:04 - advanced concepts and some
01:05 - clarifications starting off with naming
01:08 - rules as I've mentioned many times
01:09 - before you can use whatever naming
01:11 - neurons you want you can use a prefix in
01:13 - your variables use a postfix use
01:15 - capitals for consonants chemical case
01:17 - for properties snake case for Fields any
01:19 - of those can work by the way here are
01:21 - the definitions of what those mean in
01:23 - case you don't know them Pascal K starts
01:25 - with a capital and every word is
01:27 - capitalized camel K starts with
01:29 - lowercase and then uppercase for the
01:31 - first letter of every other word kind of
01:33 - like a camo hump in the middle and snake
01:35 - case is where you add an underscore in
01:37 - between the words like I said every rule
01:39 - can be valid the important thing is that
01:41 - you are consistent in always following
01:42 - through with your rules as you might
01:44 - know Unity mono behaviors have some
01:46 - default functions you can Implement so
01:47 - things like start and update which are
01:49 - written using Pascal case since you
01:52 - cannot really change unity's on rules
01:53 - that means that at least on function
01:55 - names I would say you should probably
01:56 - base your rules off of theirs so for
01:58 - functions you should probably use pass
02:00 - on case for the other rules like I said
02:02 - choose whatever makes sense to you here
02:04 - are some of my own personal rules that
02:06 - I've developed over the last 10 years
02:07 - for functions I use Pascal case just
02:10 - like unity and just like the c-sharp
02:12 - standard for function parameters I use
02:13 - camel case for Fields also camel case
02:16 - properties are in Pascal case constants
02:20 - are in uppercase snake case for a room
02:22 - that's a bit more controversial
02:24 - personally unlike the opening currently
02:25 - brackets on the same line I do hope this
02:28 - statement doesn't Center more in the
02:29 - comments it's just the visual sound that
02:31 - I personally prefer visually I think it
02:33 - looks better on the same line but if you
02:35 - like new line then go ahead and use that
02:37 - and a final rule which is simply spend
02:39 - some time deciding on a proper name and
02:41 - don't be afraid to rename things
02:43 - never use a variable with a single
02:45 - letter like X or k the exception of
02:47 - course would be iterators on something
02:49 - like a for Loop also do not use acronyms
02:52 - or abbreviation those might seem clear
02:54 - to you right now but in a few weeks you
02:55 - might not remember what they mean
02:57 - remember you don't get bonus points for
02:59 - writing extremely compact code
03:01 - so make sure you make your code readable
03:03 - and understandable even if it requires
03:05 - variables and functions with very long
03:06 - names so these are my general rules for
03:09 - the code style that I personally follow
03:10 - figure out what works for you and always
03:13 - make sure to follow your own rules next
03:15 - topic magic numbers these are numbers
03:18 - that you use directly in your code which
03:19 - have some sort of magical meaning that
03:21 - is not immediately apparent for example
03:24 - in the video he uses a 10 here now what
03:26 - does that mean if you watch the video
03:28 - where he is wearing the code then it's
03:30 - clear what it does when writing the code
03:32 - you always know exactly what you're
03:33 - writing but you will quickly forget the
03:35 - meaning of that value after some time
03:38 - so instead of using magic numbers always
03:40 - make sure to use a variable either a
03:42 - member variable or just a simple local
03:44 - variable and give it a proper
03:46 - descriptive name that clearly indicates
03:48 - what that variable represents you can
03:50 - see the huge difference to the code
03:52 - readability when Mark changes it to a
03:53 - proper variable with that simple change
03:55 - the code is much much easier to
03:57 - understand if you were to get back to
03:59 - that code sometime in the future you
04:00 - would have no problem understanding what
04:02 - it was doing because there are no magic
04:03 - numbers involved I covered more about
04:06 - magic numbers indeed on another video if
04:07 - you want to learn more next topic why
04:09 - you should not make everything public
04:12 - this is an extremely important topic and
04:14 - one where I already made a dedicated
04:16 - video on
04:17 - basically when you make something public
04:18 - you are enabling both read and write
04:20 - access from anywhere in your entire code
04:22 - base meaning that if you have a thousand
04:25 - classes then you have a thousand places
04:26 - where you could be modifying that field
04:29 - for example in the video the rigid body
04:31 - feel on this set is public but you don't
04:33 - really want another random class to
04:34 - randomly modify that field if you had
04:37 - another script that set that field to
04:38 - know while the game was running then
04:40 - everything would break with the film set
04:42 - as public there is nothing to stop that
04:43 - from happening
04:44 - so the better approach is to make it
04:46 - private that way only that one class can
04:49 - read or write to that field no other
04:51 - class can modify it in any way good
04:53 - programming is all about minimizing
04:55 - complexity the more you limit how
04:57 - accessible something is the easier it is
04:59 - to understand you don't need to keep in
05:01 - mind the entire code base since only the
05:03 - code in that class can read or write to
05:04 - that field so in that case you have two
05:07 - better options you can make it private
05:09 - but then of course you have the issue
05:10 - where you can't direct references in the
05:12 - inspector now since a rigid body happens
05:14 - to be on the same game object you can
05:16 - grab the reference with get component
05:17 - that's one approach another approach is
05:20 - make it private but add the attribute
05:22 - serialized field this one lets you make
05:24 - you feel on private so it's not
05:26 - accessible from any class but because
05:28 - it's serializable it is accessible from
05:30 - the UNT editor so with that you can drag
05:32 - the reference in the editor directly
05:33 - again go watch my dedicated video on why
05:36 - you should not make everything public if
05:37 - you haven't seen that one yet this is
05:39 - one of the easiest things you can do to
05:41 - drastically increase the quality of your
05:42 - code just following this one simple rule
05:45 - will make you a 10 times better program
05:46 - next topic and this one is really simple
05:49 - but a very important one which is tags
05:51 - this is something that a lot of beginner
05:53 - tutorials use if you want to identify an
05:55 - object use a tag if you want to find an
05:57 - object use a tag so it's a simple system
06:00 - that sounds good but as you grow your
06:02 - programming skills you will quickly
06:04 - recognize that it has one massive flow
06:06 - and that is that it's all based on
06:07 - strings strings are horrible horrible
06:10 - way of identifying things the issue is
06:12 - that they are extremely error prone it
06:14 - is very easy to break something when
06:16 - using string names and on top of that it
06:18 - is extremely difficult to debug if you
06:20 - have some kind of main logic game object
06:22 - and you tag it with the word logic if
06:24 - you write logic in lowercase it won't
06:26 - break if you write logic with a capital
06:28 - I it looks the same but it won't break
06:30 - if you add a 0 instead of an O it won't
06:32 - break if you had an invisible string in
06:34 - the beginning or end and again
06:36 - everything breaks and like I said on top
06:38 - of being easy to make mistakes it also
06:40 - makes it very difficult to find those
06:42 - mistakes because of this code this is
06:44 - all perfectly valid code there are no
06:46 - compiler errors as far as the compiler
06:48 - knows this is all valid workable in C
06:50 - sharp code the problem happens in
06:52 - runtime when this exact string does not
06:54 - match the exact tag in game development
06:56 - and programming it's usually unwise to
06:58 - use absolutes like you should never use
07:00 - something or you should always use
07:01 - something but in this case this would be
07:03 - the exception where I would say you
07:05 - should definitely never use tags or
07:07 - strings to identify anything I don't
07:09 - think I've ever seen a good use case for
07:11 - tags so instead of tags the better
07:13 - option is to drag the object reference
07:15 - directly probably by making it a
07:17 - serialized film private alternatively if
07:19 - it's something that exists only one like
07:21 - a main logic manager then perhaps use
07:24 - the Singleton pattern
07:25 - another way for identifying objects is
07:28 - use Tag components meaning you make a
07:30 - standard monobehavior component that is
07:32 - commonly empty and you just attach that
07:34 - component to something with that you can
07:36 - use get component or has component to
07:38 - see if the object has that tag component
07:40 - the important thing about these methods
07:41 - is none of them are based on strings if
07:44 - you write the wrong class name on a tag
07:46 - component you will get a compiler error
07:48 - so the compiler won't even let you run
07:49 - the game so again do not use tags and
07:52 - strings for identifying things and if
07:54 - you are now thinking to yourself well
07:56 - I'm way too smart or experienced to fall
07:58 - into that trap of mistyping something
07:59 - just know that this exact problem
08:01 - happened to me a few months ago while on
08:03 - Livestream back then the only place
08:05 - where I use strings was in a fine to get
08:06 - child game objects and even though I was
08:09 - very careful with my names I still had
08:11 - an error that made no sense the code did
08:13 - not have any typos the fine string was
08:15 - exactly the same as the object name
08:17 - except of course it wasn't after going
08:19 - crazy for a few minutes live on stream I
08:21 - finally figured it out turns out the
08:23 - game object name had an extra invisible
08:25 - space at the end so yep my advice to you
08:28 - is never use tags or strings for
08:30 - identifying things next topic updating
08:32 - UI state code decoupling and defense
08:35 - so as I mentioned a while ago the main
08:37 - goal with good programming is minimizing
08:39 - complexity you want to limit how many
08:41 - things you have to keep in your head at
08:42 - the same time and the best way to do
08:45 - that is with code decoupling meaning to
08:47 - have systems and scripts as separated
08:48 - from everything else as possible that
08:51 - way when you work on a single system you
08:53 - only have to think about that one system
08:55 - it doesn't matter how big the rest of
08:57 - the code base is if that system is
08:59 - nicely decoupled from everything else
09:00 - then nothing else matters one example of
09:03 - this where beginners usually do it wrong
09:05 - is when it comes to logic and UI for
09:07 - example in the video when updating the
09:09 - UI he has the pathology class on the UI
09:11 - class what to do doing it this way means
09:14 - that these scripts are tightly coupled
09:15 - if you remove the UI script from the
09:17 - project then everything won't break
09:19 - because in logic class expects the UI to
09:21 - exist the easy way to achieve decoupling
09:24 - in a scenario like this with logic and
09:25 - UI is use the excellent c-sharp feature
09:27 - called events which I've also covered in
09:29 - detail another video
09:31 - with events you can define an event name
09:33 - kind of like on past pipe you can Define
09:36 - that on something like a bird class and
09:38 - then you fire that event whenever
09:39 - something happens then some other class
09:41 - like for example a UI class can listen
09:43 - to that event and do whatever logic it
09:45 - wants like for example updating this
09:47 - cortex that way the bird class does not
09:49 - know and does not want to know that
09:51 - there is a UI element at all maybe there
09:53 - is maybe there isn't all the bird class
09:55 - cares about is that it fires the event
09:56 - into the void perhaps someone listens to
09:59 - it perhaps not in this case the UI class
10:01 - would listen to it but the birth class
10:03 - has no direct connection to it so if you
10:05 - can only remove the UI class the code
10:07 - would still compile and everything would
10:09 - work just the same another example is on
10:11 - the game over logic instead of the bird
10:13 - telling the game over screen to pop up
10:15 - it shouldn't set for an event some like
10:17 - onboard died then the game over screen
10:19 - can listen to it and show itself
10:21 - so as a general rule try to keep logic
10:23 - and UI as separated as possible if you
10:26 - want your UI to display some kind of
10:28 - state then don't make the logical list
10:30 - on the UI what to do just fire an event
10:32 - and have the UI figure out what to do
10:34 - with that info definitely watch my video
10:36 - on events if you haven't seen it events
10:38 - are insanely useful then just a quick
10:40 - mention on something used in video using
10:42 - Legacy text component Unity has two text
10:45 - systems the lazy text and text mesh Pro
10:48 - nowadays you should be using text mesh
10:51 - Pro it's much better in every single way
10:52 - the difference in the code is instead of
10:55 - using unity engine.ui and the class text
10:57 - you would instead use using TM Pro and
11:00 - text mesh Pro ugui or text mesh Pro
11:02 - depending if you're referencing a UI
11:04 - text or World text object
11:06 - another quick mention is on inputs Unity
11:08 - also has two systems there's the Legacy
11:11 - input manager in the new input system in
11:14 - this case the difference is less
11:15 - pronounced you can still use the in
11:17 - Legacy input manager
11:18 - personally I use it all the time in my
11:20 - own videos because it is so much similar
11:22 - to setup than the new input system so I
11:24 - always use the Legacy input manager for
11:26 - quick demos and prototypes but in terms
11:28 - of proper features the new input system
11:30 - is so much better so go ahead and use
11:32 - the latest input manager for quick demos
11:34 - and quick prototypes but as soon as you
11:37 - have a proper project you want to
11:38 - release you should probably refactor
11:39 - your code to use the new input system I
11:41 - also covered it in detail in another
11:43 - video also something tricky for
11:45 - beginners are the render Pipelines in
11:47 - the video Mark quickly selected the
11:49 - regular 2D template now this template
11:51 - uses what is called the built-in render
11:53 - pipeline this is the render pipeline
11:55 - that Unity has had for many years it
11:57 - works great but nowadays you have two
11:59 - other options you have agrp or the high
12:02 - definition Runner pipeline which is a
12:04 - render pipeline you want to use if your
12:05 - game is pushing visuals to their
12:07 - absolute limit or you have urp the
12:10 - universal render pipeline this one is
12:12 - the option that you should probably be
12:13 - using nowadays you have many more
12:15 - features like 2D light Shadow graph and
12:17 - a bunch more there's a bunch of
12:18 - templates you can download which come
12:20 - with the render Pipeline on setup but in
12:22 - most cases I would say urp is what you
12:24 - should use and if you're making PC or
12:26 - console games then yep use urp or agrp
12:29 - in my case I always use urp for example
12:31 - it's what I'm using to build my next
12:33 - steam game total warm liberation another
12:35 - topic that is also a bit tricky for
12:37 - beginners are the versions although this
12:39 - one is really only tricky if you try to
12:41 - make it tricky in the video Mark show
12:43 - downloading and installing unity and by
12:45 - default it installed version 2021.3
12:48 - which is also known as the 2021 LTS
12:50 - version LTS means long-term support it's
12:53 - the most stable ENT version that's the
12:55 - version you should be using in 99 of
12:57 - cases so if you just follow whatever ENT
12:59 - gives you by default you're fine but if
13:02 - you tried it again you might be
13:03 - surprised to see that there are quote
13:05 - unquote newer versions right now you
13:07 - have version 22.2 so for a beginner you
13:10 - might think well surely I want the
13:12 - absolute latest version that one would
13:13 - be the best right and technically it is
13:16 - technically it is the most advanced
13:17 - recent version but that might also come
13:19 - at the cost of some stability when
13:21 - publishing your games you really want
13:22 - the engine to be as stable as possible
13:24 - so that is why they recommend you use
13:26 - the LTS version which is always one year
13:28 - behind the tech version so for 99 of
13:31 - cases you should use the version it
13:32 - automatically selects which is the LTS
13:34 - or long term support version so right
13:37 - now you should be using 2021 LTS in
13:39 - about six months you can use the 2022
13:41 - LTS
13:42 - all right so those are my more advanced
13:44 - notes on the contents of that video it's
13:46 - really great it's an excellent quick
13:48 - overview of the absolute Basics I'm sure
13:50 - that video will help lots of people get
13:52 - started on their own gamedev journey and
13:54 - with this video I hope you found it
13:56 - useful to hear me talk about these more
13:57 - advanced topics and hopefully you'll
13:59 - learn something new alright hope that's
14:01 - useful check out these videos to learn
14:03 - some more thanks to these awesome
14:04 - patreon supporters for making these
14:06 - videos possible thank you for watching
14:08 - and I'll see you next time
14:13 - [Music]

Cleaned transcript:

hello and welcome I'm your code monkey a while ago Mark Brown from the channel game makers toolkit did an excellent beginner's guide for Unity it's a great video if you're a beginner or you want to get a quick refresher on the basics go ahead and give it a watch it covers the absolute Basics on making a game kind of like Flappy Bird with some really nice editing that makes it really easy to follow I definitely wish I had one tenth of his editing skills I started writing a comment pointing out some more things to help beginner go one level past the complete beginner stage and that comment ended up huge in super detailed so I figured I'd make a quick visual version covering all the points that are exactly one level above absolute beginners by the way if you want to learn blender 3D modeling there's an excellent homo bundle with a bunch of horses and the usual extremely deep 98 off discount I followed the complete blender created course myself last year and I managed to go from complete beginner to being able to build some nice models or if you just want to pick up some readymade assets then there's also a sale on the city store lots of packs for everything you can think of all in their signature gorgeous low poly Style so check out both sales with the links in the description so let's take a look at the slightly more advanced concepts and some clarifications starting off with naming rules as I've mentioned many times before you can use whatever naming neurons you want you can use a prefix in your variables use a postfix use capitals for consonants chemical case for properties snake case for Fields any of those can work by the way here are the definitions of what those mean in case you don't know them Pascal K starts with a capital and every word is capitalized camel K starts with lowercase and then uppercase for the first letter of every other word kind of like a camo hump in the middle and snake case is where you add an underscore in between the words like I said every rule can be valid the important thing is that you are consistent in always following through with your rules as you might know Unity mono behaviors have some default functions you can Implement so things like start and update which are written using Pascal case since you cannot really change unity's on rules that means that at least on function names I would say you should probably base your rules off of theirs so for functions you should probably use pass on case for the other rules like I said choose whatever makes sense to you here are some of my own personal rules that I've developed over the last 10 years for functions I use Pascal case just like unity and just like the csharp standard for function parameters I use camel case for Fields also camel case properties are in Pascal case constants are in uppercase snake case for a room that's a bit more controversial personally unlike the opening currently brackets on the same line I do hope this statement doesn't Center more in the comments it's just the visual sound that I personally prefer visually I think it looks better on the same line but if you like new line then go ahead and use that and a final rule which is simply spend some time deciding on a proper name and don't be afraid to rename things never use a variable with a single letter like X or k the exception of course would be iterators on something like a for Loop also do not use acronyms or abbreviation those might seem clear to you right now but in a few weeks you might not remember what they mean remember you don't get bonus points for writing extremely compact code so make sure you make your code readable and understandable even if it requires variables and functions with very long names so these are my general rules for the code style that I personally follow figure out what works for you and always make sure to follow your own rules next topic magic numbers these are numbers that you use directly in your code which have some sort of magical meaning that is not immediately apparent for example in the video he uses a 10 here now what does that mean if you watch the video where he is wearing the code then it's clear what it does when writing the code you always know exactly what you're writing but you will quickly forget the meaning of that value after some time so instead of using magic numbers always make sure to use a variable either a member variable or just a simple local variable and give it a proper descriptive name that clearly indicates what that variable represents you can see the huge difference to the code readability when Mark changes it to a proper variable with that simple change the code is much much easier to understand if you were to get back to that code sometime in the future you would have no problem understanding what it was doing because there are no magic numbers involved I covered more about magic numbers indeed on another video if you want to learn more next topic why you should not make everything public this is an extremely important topic and one where I already made a dedicated video on basically when you make something public you are enabling both read and write access from anywhere in your entire code base meaning that if you have a thousand classes then you have a thousand places where you could be modifying that field for example in the video the rigid body feel on this set is public but you don't really want another random class to randomly modify that field if you had another script that set that field to know while the game was running then everything would break with the film set as public there is nothing to stop that from happening so the better approach is to make it private that way only that one class can read or write to that field no other class can modify it in any way good programming is all about minimizing complexity the more you limit how accessible something is the easier it is to understand you don't need to keep in mind the entire code base since only the code in that class can read or write to that field so in that case you have two better options you can make it private but then of course you have the issue where you can't direct references in the inspector now since a rigid body happens to be on the same game object you can grab the reference with get component that's one approach another approach is make it private but add the attribute serialized field this one lets you make you feel on private so it's not accessible from any class but because it's serializable it is accessible from the UNT editor so with that you can drag the reference in the editor directly again go watch my dedicated video on why you should not make everything public if you haven't seen that one yet this is one of the easiest things you can do to drastically increase the quality of your code just following this one simple rule will make you a 10 times better program next topic and this one is really simple but a very important one which is tags this is something that a lot of beginner tutorials use if you want to identify an object use a tag if you want to find an object use a tag so it's a simple system that sounds good but as you grow your programming skills you will quickly recognize that it has one massive flow and that is that it's all based on strings strings are horrible horrible way of identifying things the issue is that they are extremely error prone it is very easy to break something when using string names and on top of that it is extremely difficult to debug if you have some kind of main logic game object and you tag it with the word logic if you write logic in lowercase it won't break if you write logic with a capital I it looks the same but it won't break if you add a 0 instead of an O it won't break if you had an invisible string in the beginning or end and again everything breaks and like I said on top of being easy to make mistakes it also makes it very difficult to find those mistakes because of this code this is all perfectly valid code there are no compiler errors as far as the compiler knows this is all valid workable in C sharp code the problem happens in runtime when this exact string does not match the exact tag in game development and programming it's usually unwise to use absolutes like you should never use something or you should always use something but in this case this would be the exception where I would say you should definitely never use tags or strings to identify anything I don't think I've ever seen a good use case for tags so instead of tags the better option is to drag the object reference directly probably by making it a serialized film private alternatively if it's something that exists only one like a main logic manager then perhaps use the Singleton pattern another way for identifying objects is use Tag components meaning you make a standard monobehavior component that is commonly empty and you just attach that component to something with that you can use get component or has component to see if the object has that tag component the important thing about these methods is none of them are based on strings if you write the wrong class name on a tag component you will get a compiler error so the compiler won't even let you run the game so again do not use tags and strings for identifying things and if you are now thinking to yourself well I'm way too smart or experienced to fall into that trap of mistyping something just know that this exact problem happened to me a few months ago while on Livestream back then the only place where I use strings was in a fine to get child game objects and even though I was very careful with my names I still had an error that made no sense the code did not have any typos the fine string was exactly the same as the object name except of course it wasn't after going crazy for a few minutes live on stream I finally figured it out turns out the game object name had an extra invisible space at the end so yep my advice to you is never use tags or strings for identifying things next topic updating UI state code decoupling and defense so as I mentioned a while ago the main goal with good programming is minimizing complexity you want to limit how many things you have to keep in your head at the same time and the best way to do that is with code decoupling meaning to have systems and scripts as separated from everything else as possible that way when you work on a single system you only have to think about that one system it doesn't matter how big the rest of the code base is if that system is nicely decoupled from everything else then nothing else matters one example of this where beginners usually do it wrong is when it comes to logic and UI for example in the video when updating the UI he has the pathology class on the UI class what to do doing it this way means that these scripts are tightly coupled if you remove the UI script from the project then everything won't break because in logic class expects the UI to exist the easy way to achieve decoupling in a scenario like this with logic and UI is use the excellent csharp feature called events which I've also covered in detail another video with events you can define an event name kind of like on past pipe you can Define that on something like a bird class and then you fire that event whenever something happens then some other class like for example a UI class can listen to that event and do whatever logic it wants like for example updating this cortex that way the bird class does not know and does not want to know that there is a UI element at all maybe there is maybe there isn't all the bird class cares about is that it fires the event into the void perhaps someone listens to it perhaps not in this case the UI class would listen to it but the birth class has no direct connection to it so if you can only remove the UI class the code would still compile and everything would work just the same another example is on the game over logic instead of the bird telling the game over screen to pop up it shouldn't set for an event some like onboard died then the game over screen can listen to it and show itself so as a general rule try to keep logic and UI as separated as possible if you want your UI to display some kind of state then don't make the logical list on the UI what to do just fire an event and have the UI figure out what to do with that info definitely watch my video on events if you haven't seen it events are insanely useful then just a quick mention on something used in video using Legacy text component Unity has two text systems the lazy text and text mesh Pro nowadays you should be using text mesh Pro it's much better in every single way the difference in the code is instead of using unity engine.ui and the class text you would instead use using TM Pro and text mesh Pro ugui or text mesh Pro depending if you're referencing a UI text or World text object another quick mention is on inputs Unity also has two systems there's the Legacy input manager in the new input system in this case the difference is less pronounced you can still use the in Legacy input manager personally I use it all the time in my own videos because it is so much similar to setup than the new input system so I always use the Legacy input manager for quick demos and prototypes but in terms of proper features the new input system is so much better so go ahead and use the latest input manager for quick demos and quick prototypes but as soon as you have a proper project you want to release you should probably refactor your code to use the new input system I also covered it in detail in another video also something tricky for beginners are the render Pipelines in the video Mark quickly selected the regular 2D template now this template uses what is called the builtin render pipeline this is the render pipeline that Unity has had for many years it works great but nowadays you have two other options you have agrp or the high definition Runner pipeline which is a render pipeline you want to use if your game is pushing visuals to their absolute limit or you have urp the universal render pipeline this one is the option that you should probably be using nowadays you have many more features like 2D light Shadow graph and a bunch more there's a bunch of templates you can download which come with the render Pipeline on setup but in most cases I would say urp is what you should use and if you're making PC or console games then yep use urp or agrp in my case I always use urp for example it's what I'm using to build my next steam game total warm liberation another topic that is also a bit tricky for beginners are the versions although this one is really only tricky if you try to make it tricky in the video Mark show downloading and installing unity and by default it installed version 2021.3 which is also known as the 2021 LTS version LTS means longterm support it's the most stable ENT version that's the version you should be using in 99 of cases so if you just follow whatever ENT gives you by default you're fine but if you tried it again you might be surprised to see that there are quote unquote newer versions right now you have version 22.2 so for a beginner you might think well surely I want the absolute latest version that one would be the best right and technically it is technically it is the most advanced recent version but that might also come at the cost of some stability when publishing your games you really want the engine to be as stable as possible so that is why they recommend you use the LTS version which is always one year behind the tech version so for 99 of cases you should use the version it automatically selects which is the LTS or long term support version so right now you should be using 2021 LTS in about six months you can use the 2022 LTS all right so those are my more advanced notes on the contents of that video it's really great it's an excellent quick overview of the absolute Basics I'm sure that video will help lots of people get started on their own gamedev journey and with this video I hope you found it useful to hear me talk about these more advanced topics and hopefully you'll learn something new alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time
