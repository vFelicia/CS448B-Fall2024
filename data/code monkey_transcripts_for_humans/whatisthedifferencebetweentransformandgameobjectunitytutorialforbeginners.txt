With timestamps:

00:00 - hello and welcome i'm your code monkey
00:02 - here's a super quick video on something
00:04 - that some people find quite confusing
00:06 - which is what is the difference between
00:08 - a game object or a transform
00:10 - now where i see this question pop up is
00:12 - whenever i have some video where i call
00:14 - in century to create some sort of prefab
00:16 - instance and usually as a personal
00:18 - preference i tend to use transform
00:19 - references for the prefabs instead of
00:21 - game objects and for some people that
00:23 - can be confusing to see if you've always
00:25 - learned to reference your prefabs only
00:27 - as game objects so as an example here
00:29 - i've got some super simple code
00:31 - i've got a prefab reference of type
00:33 - transform
00:35 - it's also a serialized field so it's
00:36 - exposed in the editor now if you don't
00:38 - know about serialized field if you
00:40 - normally just expose it as public then
00:42 - go watch my video on why you should not
00:44 - make everything public so here i have
00:46 - this simple reference to my prefab as a
00:48 - type transform
00:49 - and in the editor here is my script with
00:51 - that field and i can simply drag the
00:52 - prefab reference then here on the code
00:55 - just asking for some input and calling
00:56 - instantiate on that prefab so if we run
00:59 - this i just press the button and yep
01:01 - there you go my object is incentive by
01:03 - the way this object is a really nice
01:05 - money clip from the cinti polygon heist
01:07 - pack
01:08 - it's a great pack with lots of money and
01:10 - lots of stealth lots of heists so if you
01:12 - want to get it check it out with a link
01:13 - description
01:14 - okay so with this the object was spawned
01:16 - so everything works perfectly fine
01:18 - however you might have learned to use
01:20 - game objects so if you go up here and
01:22 - you change the type from transform into
01:24 - game object
01:25 - so if you do this all of the code works
01:27 - just the same
01:28 - and here in the editor let's assign the
01:30 - exact same reference there it is and if
01:31 - we try
01:33 - then press on t and if there you go
01:34 - everything still works exactly the same
01:36 - however don't be confused this does not
01:39 - mean that a game object and transform is
01:41 - the exact same thing that is not true
01:43 - those are two unique different types
01:45 - if you grab this prefab and you try to
01:47 - cast it back into a transform
01:52 - if you try doing this then nope you have
01:53 - an error you cannot convert the type
01:55 - game object directly into a transform
01:58 - however at the same time despite being
02:00 - two different types they're also pretty
02:01 - much interchangeable the reason for that
02:03 - is because every single game object
02:05 - always has to have a transform component
02:07 - if you're in the editor you right click
02:09 - let's create an empty new game object
02:11 - and in the inspector you can see yep it
02:13 - comes with a transform component if you
02:15 - right click on the transform you can't
02:16 - even find the option to remove it
02:18 - whereas if you add a random component
02:20 - you right click you can remove it but
02:22 - transform nope cannot remove it and
02:24 - conversely every transform always has to
02:26 - be attached to a game object if you go
02:28 - up here and you just try doing new
02:30 - transform then nope that does not work
02:32 - unity does not let you do this
02:34 - so game objects and transforms they are
02:36 - two different types but they always need
02:38 - to work with one another so that's why
02:40 - they end up pretty much interchangeable
02:42 - anytime you have a game object reference
02:44 - you can grab the transform by just going
02:46 - in there and grab the transform
02:49 - and on the other hand if this was a
02:51 - transform reference you can go into the
02:53 - transform and grab the game object
02:55 - reference so from one you can always get
02:57 - the other one now the main difference is
02:59 - over here when calling instantiate if
03:01 - you have a transform reference and you
03:03 - call instantiate and pass in a transform
03:04 - then you can see that this returns
03:06 - another transform whereas if up here you
03:08 - change this into a game object if you do
03:10 - that and you can't send sheet now this
03:12 - one returns a game object
03:14 - now for me usually when i instantiate
03:16 - something i like to move it or scale it
03:18 - or do anything like that
03:19 - so if i make this directly uptype
03:21 - transform then this one is going to
03:23 - return a transform so i can just grab
03:26 - the transform for the prefab transform i
03:28 - can grab that one and then directly just
03:30 - access the position and set it to
03:32 - something
03:33 - so i can do this directly it's super
03:35 - easy
03:35 - whereas if i change this into a game
03:38 - object
03:39 - then now this one instead of returning a
03:40 - transform it returns a game object
03:43 - so let's rename this to the prefab game
03:45 - object
03:46 - and now in this if i did want to modify
03:49 - the game object right after
03:50 - instantiating then over here i have to
03:52 - access the game object then access the
03:53 - transform and then i can move it so
03:55 - that's really the main difference with
03:57 - using a transformer and why i intend to
03:58 - use them if you use a transform for the
04:00 - prefab then instantiate returns the
04:02 - transform and over here you can avoid
04:04 - having to access the transform from the
04:05 - game object so you just avoid one extra
04:07 - access call and of course like i said
04:09 - all transforms are always attached to
04:11 - game objects so even if you use a
04:13 - transform reference
04:15 - so even if you use this if you want to
04:16 - access the game object just access
04:18 - transform.gameobject
04:20 - so for me personally since i tend to
04:21 - work more directly with transforms as
04:23 - opposed to game objects like i said
04:25 - usually i like to move the object change
04:27 - the scale rotation and so on so because
04:30 - of that i tend to use my prefab
04:32 - references as transforms but for you
04:34 - perhaps if you tend to work more with
04:36 - game objects and transforms like perhaps
04:38 - usually right after calling instantiate
04:40 - after that perhaps you tend to call the
04:42 - gameobject.setactive
04:44 - if normally this is the type of thing in
04:45 - order to enable or disable a certain
04:47 - instantiated game object if you tend to
04:49 - do that often then it might be more
04:51 - useful to define all of your prefabs as
04:53 - game objects
04:55 - so that's just a quick explainer on
04:56 - transform versus game objects when it
04:58 - comes to prefabs you can use whatever
05:00 - type you prefer and personally i tend to
05:02 - prefer transforms also one more note on
05:04 - transforms versus game objects
05:06 - if you want to destroy an object and you
05:08 - try to destroy the transform so appear
05:10 - called destroy
05:11 - on this prefab transform
05:14 - if you try to run this code
05:16 - then nope there's our issue we cannot
05:18 - destroy the transform component again
05:20 - like i mentioned previously you cannot
05:22 - have a game object without a transform
05:24 - so if you want to destroy the transform
05:26 - the only thing that you need to do is
05:27 - you need to destroy the actual game
05:29 - object if you do this and you press the
05:31 - button yep the game object is spawned
05:33 - and destroyed alright so i hope this
05:35 - video helps clarify why sometimes you
05:36 - might see transform prefabs and other
05:38 - times you might see game objects if you
05:40 - found this video because you're commonly
05:42 - new to unity check out my video doing a
05:44 - quick overview of how the engine works
05:46 - and if you're just past the complete
05:47 - beginner stage and you want to learn
05:49 - more about the engine then check out my
05:50 - turn turn-based strategy course i
05:52 - designed this specifically to help guide
05:54 - you and take you from beginner to
05:55 - advanced even if you are not interested
05:57 - in that specific genre you will still
05:59 - learn a ton in that course i assume you
06:01 - know the absolute basics and then i help
06:03 - you take the leap to the next level by
06:05 - making a more complex game using things
06:07 - like c sharp generics using delegates in
06:09 - machine ai and all of that while
06:11 - focusing on writing good clean code
06:13 - so if you want to take your game dev
06:14 - skills to the next level then check out
06:16 - the course
06:17 - alright hope that's useful check out
06:18 - these videos to learn some more thanks
06:20 - to these awesome patreon supporters for
06:22 - making these videos possible thank you
06:24 - for watching and i'll see you next time
06:30 - [Music]

Cleaned transcript:

hello and welcome i'm your code monkey here's a super quick video on something that some people find quite confusing which is what is the difference between a game object or a transform now where i see this question pop up is whenever i have some video where i call in century to create some sort of prefab instance and usually as a personal preference i tend to use transform references for the prefabs instead of game objects and for some people that can be confusing to see if you've always learned to reference your prefabs only as game objects so as an example here i've got some super simple code i've got a prefab reference of type transform it's also a serialized field so it's exposed in the editor now if you don't know about serialized field if you normally just expose it as public then go watch my video on why you should not make everything public so here i have this simple reference to my prefab as a type transform and in the editor here is my script with that field and i can simply drag the prefab reference then here on the code just asking for some input and calling instantiate on that prefab so if we run this i just press the button and yep there you go my object is incentive by the way this object is a really nice money clip from the cinti polygon heist pack it's a great pack with lots of money and lots of stealth lots of heists so if you want to get it check it out with a link description okay so with this the object was spawned so everything works perfectly fine however you might have learned to use game objects so if you go up here and you change the type from transform into game object so if you do this all of the code works just the same and here in the editor let's assign the exact same reference there it is and if we try then press on t and if there you go everything still works exactly the same however don't be confused this does not mean that a game object and transform is the exact same thing that is not true those are two unique different types if you grab this prefab and you try to cast it back into a transform if you try doing this then nope you have an error you cannot convert the type game object directly into a transform however at the same time despite being two different types they're also pretty much interchangeable the reason for that is because every single game object always has to have a transform component if you're in the editor you right click let's create an empty new game object and in the inspector you can see yep it comes with a transform component if you right click on the transform you can't even find the option to remove it whereas if you add a random component you right click you can remove it but transform nope cannot remove it and conversely every transform always has to be attached to a game object if you go up here and you just try doing new transform then nope that does not work unity does not let you do this so game objects and transforms they are two different types but they always need to work with one another so that's why they end up pretty much interchangeable anytime you have a game object reference you can grab the transform by just going in there and grab the transform and on the other hand if this was a transform reference you can go into the transform and grab the game object reference so from one you can always get the other one now the main difference is over here when calling instantiate if you have a transform reference and you call instantiate and pass in a transform then you can see that this returns another transform whereas if up here you change this into a game object if you do that and you can't send sheet now this one returns a game object now for me usually when i instantiate something i like to move it or scale it or do anything like that so if i make this directly uptype transform then this one is going to return a transform so i can just grab the transform for the prefab transform i can grab that one and then directly just access the position and set it to something so i can do this directly it's super easy whereas if i change this into a game object then now this one instead of returning a transform it returns a game object so let's rename this to the prefab game object and now in this if i did want to modify the game object right after instantiating then over here i have to access the game object then access the transform and then i can move it so that's really the main difference with using a transformer and why i intend to use them if you use a transform for the prefab then instantiate returns the transform and over here you can avoid having to access the transform from the game object so you just avoid one extra access call and of course like i said all transforms are always attached to game objects so even if you use a transform reference so even if you use this if you want to access the game object just access transform.gameobject so for me personally since i tend to work more directly with transforms as opposed to game objects like i said usually i like to move the object change the scale rotation and so on so because of that i tend to use my prefab references as transforms but for you perhaps if you tend to work more with game objects and transforms like perhaps usually right after calling instantiate after that perhaps you tend to call the gameobject.setactive if normally this is the type of thing in order to enable or disable a certain instantiated game object if you tend to do that often then it might be more useful to define all of your prefabs as game objects so that's just a quick explainer on transform versus game objects when it comes to prefabs you can use whatever type you prefer and personally i tend to prefer transforms also one more note on transforms versus game objects if you want to destroy an object and you try to destroy the transform so appear called destroy on this prefab transform if you try to run this code then nope there's our issue we cannot destroy the transform component again like i mentioned previously you cannot have a game object without a transform so if you want to destroy the transform the only thing that you need to do is you need to destroy the actual game object if you do this and you press the button yep the game object is spawned and destroyed alright so i hope this video helps clarify why sometimes you might see transform prefabs and other times you might see game objects if you found this video because you're commonly new to unity check out my video doing a quick overview of how the engine works and if you're just past the complete beginner stage and you want to learn more about the engine then check out my turn turnbased strategy course i designed this specifically to help guide you and take you from beginner to advanced even if you are not interested in that specific genre you will still learn a ton in that course i assume you know the absolute basics and then i help you take the leap to the next level by making a more complex game using things like c sharp generics using delegates in machine ai and all of that while focusing on writing good clean code so if you want to take your game dev skills to the next level then check out the course alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time
