With timestamps:

00:00 - hello and welcome I'm your code monkey
00:02 - and in this video we're continuing to
00:03 - create a graph in unity we're going to
00:05 - add the ability to switch between a bar
00:07 - chart and a line graph by making a
00:09 - generic chart visual interface let's get
00:12 - CERN
00:16 - all right so we previously converted our
00:19 - line graph into a bar chart in here we
00:22 - have commented our code so right now the
00:24 - graph type is hard-coded into our script
00:27 - now let's find a way to be able to
00:29 - display as either a bar chart or a line
00:31 - graph we're going to go down here and
00:34 - create a new sub class for each of our
00:36 - display types let's start off with a bar
00:39 - chart create a private class and name it
00:43 - bar chart video so we want to copy the
00:48 - bar chart specific code into this class
00:50 - so in here the create bar function let's
00:53 - dump it in here and as you can see we
00:55 - got an error because we need the graph
00:57 - container so let's store a rect
00:59 - transform for our graph container and
01:01 - we're going to create a public
01:04 - constructor in that constructor and
01:07 - let's receive our graph container and
01:10 - set internal value okay so this sub
01:13 - class now has everything necessary to
01:15 - display the bars since we want to have
01:17 - multiple visual types let's create a
01:19 - generic function to display the value in
01:21 - our graph we're going to make a public
01:24 - void and say add graph visual and Nord
01:28 - to have a generic function to add the
01:30 - graph visual we're going to send it a
01:32 - vector two for our graph position and a
01:36 - float for our graph position width we
01:40 - want to keep a good level of abstraction
01:43 - so we're going to give it the width of
01:45 - the graph position rather than a bar
01:47 - width so in here we're going to create
01:49 - our bar as we did previously so go up
01:52 - here and grab our bar code place it in
01:56 - here and we're going to modify the
01:57 - return type to game object so we can
01:59 - return this game object for our position
02:02 - let's set the graph position and for the
02:06 - graph position with what's in it this
02:08 - one okay so now using this function we
02:11 - should be able to display the bar graph
02:12 - as previously so back up here into our
02:16 - show graph code let's create a bar chart
02:18 - visual so bar chart visual bar chart
02:21 - visually
02:22 - new bar charts visual going to give it
02:25 - the grab container and in here I'm going
02:28 - to use it instead of creating a bar like
02:31 - previously let's go into our visual and
02:33 - do a graph visual I'm going to send it
02:36 - the vector two and this right here okay
02:41 - the set up is correct so let's test it
02:44 - out and it should be displaying the
02:45 - exact same thing as before yep there you
02:48 - go I can see my bar chart as normal
02:50 - great now let's add some customization
02:53 - for our visuals so here on the
02:56 - constructor let's receive a color for
02:58 - our bar color and a float for the bar
03:02 - with multiplier and we're going to store
03:04 - it as remember variables and in here
03:10 - when we're creating a bar let's go into
03:13 - our game object I get component of type
03:16 - image and set the color to our bar color
03:19 - and multiply the bar width by our bar
03:23 - with multiplier it's now appear when
03:25 - we're creating our bar chart visual
03:27 - let's add some custom things so let's
03:29 - send a color green and bar with
03:33 - multiplier and let's say point eight F
03:34 - so the bars won't be slimmer and they
03:36 - won't be green yep there it is the bars
03:39 - are now green and slightly thinner our
03:41 - graph is now easily customizable so now
03:45 - that the bar chart visuals are working
03:47 - let's make the in line graph visuals so
03:49 - we're going to be use the same pattern
03:51 - that we did so we're going to go down
03:53 - here and create a new subclass let's
03:56 - call it line graph visual inside we're
04:00 - also going to need the rect transform
04:02 - for our graph and Tanner which we will
04:06 - receive on a constructor and let's go up
04:11 - here and copy/paste the dot connection
04:13 - and the create code down here into our
04:16 - class now we also need a private sprite
04:19 - for our dot sprite and get that in our
04:23 - constructor okay so now let's create a
04:26 - function with the same signature as this
04:29 - one and we're going to copy paste the
04:32 - code that we were using in here
04:34 - so this code right here we're going to
04:36 - place it down here and first of all we
04:39 - need a game object to store the previous
04:41 - so private game object for our last game
04:45 - object which will be known by the phone
04:48 - we're going to create it using our graph
04:50 - position we don't need the position
04:52 - width but we want the signature to be
04:54 - the same as up here and since we need to
04:58 - return more than one value in order to
05:00 - clean up our graph we need to return the
05:02 - dot and the dot connection so let's
05:04 - return a list of game objects instead of
05:07 - just one game object so let's return the
05:11 - game object list and make a game object
05:13 - list and here and let's also switch the
05:17 - return value up here to keep the same
05:20 - signature and just going to return a new
05:23 - list of game object with just this
05:25 - project okay
05:27 - now let's go up here and when we're
05:30 - adding instead of adding like this let's
05:33 - do add range since we're receiving a
05:36 - list as a return value of the add we're
05:39 - visual but we're actually going to use
05:42 - our line graph the visual that's new
05:47 - we're a visual give it the grab
05:49 - container and give it the dots price
05:52 - let's comment out the bar chart visual
05:55 - and here instead of making the bar chart
05:58 - let's use the line graph visual and
06:02 - we're using the same method signature so
06:04 - right now we should be able to display
06:06 - our line graph again okay let's see and
06:10 - there you go we are back to this playing
06:12 - a line graph so again let's add some
06:14 - customization to our line graph so down
06:17 - here in our constructor letters received
06:20 - a color for the dot color and another
06:24 - Congre for the dot connection color down
06:30 - here let's apply our color so going to
06:35 - bounine image color long dark color and
06:41 - in here let's set the color to our dot
06:44 - connection collar and back up here when
06:48 - we create and let's give it some colors
06:50 - so for the dots let's make them green
06:52 - and for the dot connection color let's
06:55 - give it a transparent white as
06:58 - previously since that is the easiest way
07:00 - to view it yep there it is the dots are
07:03 - green
07:04 - the others are transparent okay great so
07:07 - we now have both visuals each in their
07:09 - own specific class that we can swap
07:11 - easily so now let's make our graph
07:14 - function receive which visual it will
07:16 - actually use so here on our parameters
07:18 - we want to receive the visual time so in
07:21 - order to receive multiple possible types
07:24 - let's use an interface so let's go down
07:27 - here and we're going to create a private
07:29 - interface name it I grab visual now in
07:34 - that interface we're simply going to
07:35 - have the method that we created in here
07:38 - this is the matter that this interface
07:41 - needs to implement and we're going to
07:43 - use this interface on both of our
07:46 - subclasses and on our show graph this is
07:50 - what we're going to receive and here
07:52 - wrap visual and in here instead of using
07:56 - all of this we're going to use the graph
07:59 - visual and add our graph visual and
08:02 - finally on our start method in here and
08:05 - let's call it with the visual so let's
08:06 - use the constructor we built in here go
08:09 - up here make an eye graph the visual
08:11 - graph visual and make this one that's
08:17 - what we're going to use so let's see if
08:19 - we're displaying the line graph visual
08:21 - as previously yep there you go it is
08:25 - this plane to the line graph visual okay
08:27 - now just for fun let's add a function
08:29 - periodic to swap the visual every half a
08:32 - second so make a function periodic
08:35 - create the function periodic is part of
08:38 - the code monkey utilities which is
08:40 - always you can grab for free from ent
08:42 - code monkey calm so in here we take a
08:45 - action and then a timer so let's say
08:47 - every half a second we want to call this
08:50 - action and this action won't swap the
08:52 - visuals so let's say this is the line
08:56 - graph visual and let's make the bar
09:01 - chart visual which we're going to use
09:05 - what we built in here and let's also go
09:09 - down here and clean up all this code get
09:12 - rid of all of these comments okay and
09:15 - now in here let's make a bone use bar
09:18 - chart let's set it to true if use bar
09:22 - charts okay so we're going to trigger
09:28 - this function every half a second and
09:30 - the first time triggers is going to use
09:32 - a bar chart so this play with the bar
09:34 - chart visual and then it's going to swap
09:36 - it out and the second time it runs is
09:37 - going to display the line graph and so
09:39 - on and so forth so let's essen we should
09:41 - be able to easily see the visuals
09:43 - changing there's the line and there's
09:45 - the bar line bar line bar okay awesome
09:48 - we can now switch the visuals very
09:51 - easily so there you have it we have
09:53 - successfully created different visual
09:55 - types that we can apply to our graph in
09:57 - the next video we're going to add
09:59 - tooltips to display the exact value of
10:01 - each data point as always you can
10:04 - download the project files and utilities
10:05 - from Unity code monkey comm if you have
10:08 - any questions post them in the comments
10:10 - and I'll do my best
10:10 - answer them ok see you next time

Cleaned transcript:

hello and welcome I'm your code monkey and in this video we're continuing to create a graph in unity we're going to add the ability to switch between a bar chart and a line graph by making a generic chart visual interface let's get CERN all right so we previously converted our line graph into a bar chart in here we have commented our code so right now the graph type is hardcoded into our script now let's find a way to be able to display as either a bar chart or a line graph we're going to go down here and create a new sub class for each of our display types let's start off with a bar chart create a private class and name it bar chart video so we want to copy the bar chart specific code into this class so in here the create bar function let's dump it in here and as you can see we got an error because we need the graph container so let's store a rect transform for our graph container and we're going to create a public constructor in that constructor and let's receive our graph container and set internal value okay so this sub class now has everything necessary to display the bars since we want to have multiple visual types let's create a generic function to display the value in our graph we're going to make a public void and say add graph visual and Nord to have a generic function to add the graph visual we're going to send it a vector two for our graph position and a float for our graph position width we want to keep a good level of abstraction so we're going to give it the width of the graph position rather than a bar width so in here we're going to create our bar as we did previously so go up here and grab our bar code place it in here and we're going to modify the return type to game object so we can return this game object for our position let's set the graph position and for the graph position with what's in it this one okay so now using this function we should be able to display the bar graph as previously so back up here into our show graph code let's create a bar chart visual so bar chart visual bar chart visually new bar charts visual going to give it the grab container and in here I'm going to use it instead of creating a bar like previously let's go into our visual and do a graph visual I'm going to send it the vector two and this right here okay the set up is correct so let's test it out and it should be displaying the exact same thing as before yep there you go I can see my bar chart as normal great now let's add some customization for our visuals so here on the constructor let's receive a color for our bar color and a float for the bar with multiplier and we're going to store it as remember variables and in here when we're creating a bar let's go into our game object I get component of type image and set the color to our bar color and multiply the bar width by our bar with multiplier it's now appear when we're creating our bar chart visual let's add some custom things so let's send a color green and bar with multiplier and let's say point eight F so the bars won't be slimmer and they won't be green yep there it is the bars are now green and slightly thinner our graph is now easily customizable so now that the bar chart visuals are working let's make the in line graph visuals so we're going to be use the same pattern that we did so we're going to go down here and create a new subclass let's call it line graph visual inside we're also going to need the rect transform for our graph and Tanner which we will receive on a constructor and let's go up here and copy/paste the dot connection and the create code down here into our class now we also need a private sprite for our dot sprite and get that in our constructor okay so now let's create a function with the same signature as this one and we're going to copy paste the code that we were using in here so this code right here we're going to place it down here and first of all we need a game object to store the previous so private game object for our last game object which will be known by the phone we're going to create it using our graph position we don't need the position width but we want the signature to be the same as up here and since we need to return more than one value in order to clean up our graph we need to return the dot and the dot connection so let's return a list of game objects instead of just one game object so let's return the game object list and make a game object list and here and let's also switch the return value up here to keep the same signature and just going to return a new list of game object with just this project okay now let's go up here and when we're adding instead of adding like this let's do add range since we're receiving a list as a return value of the add we're visual but we're actually going to use our line graph the visual that's new we're a visual give it the grab container and give it the dots price let's comment out the bar chart visual and here instead of making the bar chart let's use the line graph visual and we're using the same method signature so right now we should be able to display our line graph again okay let's see and there you go we are back to this playing a line graph so again let's add some customization to our line graph so down here in our constructor letters received a color for the dot color and another Congre for the dot connection color down here let's apply our color so going to bounine image color long dark color and in here let's set the color to our dot connection collar and back up here when we create and let's give it some colors so for the dots let's make them green and for the dot connection color let's give it a transparent white as previously since that is the easiest way to view it yep there it is the dots are green the others are transparent okay great so we now have both visuals each in their own specific class that we can swap easily so now let's make our graph function receive which visual it will actually use so here on our parameters we want to receive the visual time so in order to receive multiple possible types let's use an interface so let's go down here and we're going to create a private interface name it I grab visual now in that interface we're simply going to have the method that we created in here this is the matter that this interface needs to implement and we're going to use this interface on both of our subclasses and on our show graph this is what we're going to receive and here wrap visual and in here instead of using all of this we're going to use the graph visual and add our graph visual and finally on our start method in here and let's call it with the visual so let's use the constructor we built in here go up here make an eye graph the visual graph visual and make this one that's what we're going to use so let's see if we're displaying the line graph visual as previously yep there you go it is this plane to the line graph visual okay now just for fun let's add a function periodic to swap the visual every half a second so make a function periodic create the function periodic is part of the code monkey utilities which is always you can grab for free from ent code monkey calm so in here we take a action and then a timer so let's say every half a second we want to call this action and this action won't swap the visuals so let's say this is the line graph visual and let's make the bar chart visual which we're going to use what we built in here and let's also go down here and clean up all this code get rid of all of these comments okay and now in here let's make a bone use bar chart let's set it to true if use bar charts okay so we're going to trigger this function every half a second and the first time triggers is going to use a bar chart so this play with the bar chart visual and then it's going to swap it out and the second time it runs is going to display the line graph and so on and so forth so let's essen we should be able to easily see the visuals changing there's the line and there's the bar line bar line bar okay awesome we can now switch the visuals very easily so there you have it we have successfully created different visual types that we can apply to our graph in the next video we're going to add tooltips to display the exact value of each data point as always you can download the project files and utilities from Unity code monkey comm if you have any questions post them in the comments and I'll do my best answer them ok see you next time
