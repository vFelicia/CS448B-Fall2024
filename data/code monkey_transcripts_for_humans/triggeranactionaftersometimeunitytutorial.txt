With timestamps:

00:00 - in this video we're going to learn how
00:01 - to trigger an action after a certain
00:03 - amount of time this is extremely useful
00:05 - for testing your game and creating timed
00:07 - events like for example when making a
00:08 - cut scene let's
00:13 - [Music]
00:17 - begin hello and welcome I'm your code
00:19 - monkey and this channel is all about
00:21 - helping you learn how to make your own
00:22 - games with inap tutorials made by a
00:24 - professional indie game developer so if
00:26 - you find the video helpful consider
00:27 - subscribing so here we will cover how
00:30 - the function timer works it's a simple
00:32 - but very useful class for triggering an
00:34 - action after some time this is one of
00:36 - the classes that is part of the
00:38 - codemonkey utilities which you can grab
00:39 - for free from Unity codem monkey.com
00:41 - this is very useful for easily setting
00:43 - up timers in your code so here for
00:45 - example I have a scene with a little cut
00:47 - scene set up cut scenes are one of the
00:49 - scenarios where timed events are really
00:51 - important so it's perfect to demonstrate
00:53 - this use so in here when I press space
00:56 - the unit Won Won it won stop show some
00:58 - cinematic bars zoom in and then go back
01:00 - to normal so let's see hit space there
01:04 - it is moving zoom in show The Cinematic
01:07 - and move away okay
01:09 - great so that's one example of how it
01:11 - can be useful so let's check out the
01:14 - code here is the code that makes all of
01:16 - those events happen one after the other
01:18 - it might seem complicated but it's
01:20 - actually very simple as you can see each
01:21 - of them is just one different function
01:24 - call the function call triggers a
01:26 - certain action after a certain amount of
01:28 - time so for for example here on the last
01:30 - one you can see that after 3 seconds we
01:32 - are triggering an action which hides The
01:34 - Cinematic bars so now that we know the
01:37 - benefits and one of the uses for the
01:39 - function timer let's recreate it to see
01:41 - how it works so first in here let's make
01:44 - a new C script and we're going to call
01:46 - this the function
01:48 - timer essentially we trigger a function
01:50 - after some time I want this to be a
01:52 - simple class and to be able to use the
01:54 - Constructor so let's first remove the
01:57 - Model Behavior to make this the simplest
01:59 - class it can be
02:02 - now let's make the Constructor a public
02:03 - function
02:05 - timer now in here to trigger an action
02:08 - after sometime let's receive an action
02:11 - which is inside the using system
02:15 - namespace an action in case you don't
02:17 - know it's a very simple delegate that
02:19 - takes no parameters and returns void so
02:22 - it's essentially the same as in here
02:24 - private void my action this would be a
02:26 - valid function that could be passed on
02:29 - into that action
02:32 - so we need an action and then we're also
02:34 - going to need a float for the
02:36 - timer now let's sort them as
02:42 - variables and now let's make a function
02:45 - that we won't run on update so make a
02:48 - simple public void
02:52 - update in here we're going to count down
02:55 - the timer using time. Delta
02:58 - time and we just do a a simple test if
03:00 - the timer is under
03:03 - zero then we trigger the action again
03:07 - the action is essentially just a stored
03:09 - function so in order to trigger it we
03:11 - simply call Action and execute it as if
03:14 - it were a function all right so that's
03:17 - very simple and it should be working so
03:19 - now let's figure out a way to test it
03:22 - let's create a new script for testing so
03:25 - Mak an easy sh script and let's call
03:26 - this
03:27 - testing and let's also drag it on to a
03:30 - game
03:32 - object that we're going to name testing
03:34 - and drag the testing script onto it okay
03:36 - so we now have this script running with
03:38 - mono
03:43 - Behavior now here we can do our test on
03:46 - this start so we need to create a
03:49 - function timer so we do a new function
03:51 - timer create a new instance of our class
03:55 - and now in here we pass in the action
03:56 - that we want to
03:58 - trigger so let's make a private void
04:00 - testing action and inside let's do a
04:04 - debug.log saying
04:07 - testing and now we can pass in this
04:09 - function as our action and we're going
04:12 - to trigger it after 3 seconds okay so
04:15 - after 3 seconds this function will be
04:17 - called which will do a debug.log now we
04:20 - still need to call the update function
04:22 - on this function timer so let's store
04:26 - this and now since this class is running
04:29 - with a mod Behavior we have access to
04:31 - the private void
04:32 - update and we can call the function
04:35 - timer.
04:36 - update okay so we are creating our
04:39 - testing timer passing in the testing
04:41 - action and 3
04:42 - seconds then on every update we are
04:44 - calling the update on the function timer
04:47 - and once those 3 seconds are passed it
04:49 - will trigger this function which will do
04:51 - a debug.log so let's see
04:54 - that okay here's the scene and after 3
04:56 - seconds you should see in the console
04:58 - yep there it is okay great
05:00 - so it worked and it is indeed triggering
05:02 - the action after 3 seconds however as
05:05 - you can see we also have a problem since
05:07 - it's triggering that action over and
05:09 - over again instead of doing it only once
05:11 - as it is
05:12 - intended so let's go back into our
05:14 - function timer and here let's create a
05:17 - function to destroy this function timer
05:19 - so let's call this the private void
05:21 - destroy
05:25 - self we're going to destroy this
05:28 - function timer after triggering the
05:30 - action and in order to destroy this
05:33 - object let's simply set a simple bully
05:35 - so we do a private bull is
05:38 - destroying by default we are not
05:40 - destroyed and when we do destroy self we
05:43 - set it to true and here we only run this
05:45 - code if we are not
05:49 - destroyed okay that should do it for
05:51 - making sure that our action is only
05:53 - triggered once so let's see here we are
05:56 - and after 3 seconds and yep there you go
05:59 - as you can see exactly only once okay
06:02 - great so we can now trigger an action
06:04 - after a certain amount of time so the
06:07 - code is all working but the setup is
06:08 - pretty clunky and here as you can see on
06:11 - our testing we need to First create the
06:13 - object then we need to keep a reference
06:15 - to it and we need to call it on update
06:18 - let's make the function timer class
06:20 - handle all of that to make it very easy
06:21 - to use so back in the function timer
06:24 - code we need to call this update
06:26 - function from somewhere in here now we
06:29 - could make this class extend monob
06:30 - Behavior but that would make this class
06:32 - more complicated and be tightly coupled
06:34 - with the mono Behavior system so another
06:37 - approach is to keep this as a simple
06:39 - class and then have another simple class
06:41 - that hooks into the mono Behavior
06:43 - functions so let's make a class inside
06:45 - this class we're going to do a public
06:48 - class let's call it the mono Behavior
06:52 - hook and this one will indeed extend
06:54 - mono
06:57 - Behavior so this class will essentially
06:59 - hope into the mono Behavior system which
07:02 - means that in here we have access to the
07:03 - private void
07:06 - update so here we can store a action for
07:09 - the on update action and we simply
07:12 - trigger it on
07:18 - update and just like that we can pass in
07:21 - whatever function we want into this on
07:23 - update and it w be called on update so
07:26 - to make this class easy to use let's
07:28 - make a static create function
07:30 - so in here we do a public static we're
07:33 - going to return a function timer and
07:35 - let's call this
07:36 - create and in here we're going to
07:38 - receive an action and a float for our
07:42 - time and in doing so we're also going to
07:45 - make the Constructor private to make
07:46 - sure this Constructor is only called
07:48 - from inside this class and now in here
07:52 - essentially we take care of everything
07:53 - we were doing on our testing so first we
07:56 - create the function
07:58 - timer
08:00 - then we create a game
08:05 - object we create the object with the
08:07 - name function timer and we start off
08:09 - with the mono Behavior hook
08:13 - component then we get that mono Behavior
08:16 - hook component get
08:19 - component and we set the on update
08:23 - function to trigger the function timer.
08:27 - update so with that that everything
08:30 - should be working and it's all contained
08:31 - here inside this one
08:35 - class so to see the benefits of doing
08:38 - all of this let's go back into our
08:40 - testing and this is what we were
08:42 - previously doing we were holding the
08:43 - reference creating an instance and
08:45 - calling update and now we don't need to
08:47 - do any of this we just need to call the
08:50 - function timer call the create function
08:53 - pass in the action and the
08:55 - time and just like that everything
08:57 - will't work so we can get rid of this
08:59 - this and all of this so as you can see
09:02 - we got rid of all that we made it just
09:04 - one line very simple and it's all taken
09:06 - care of inside the function
09:08 - timer so let's test and see if
09:10 - everything is still working exactly as
09:12 - intended here's the scene and after 3
09:15 - seconds yep there you go there's our
09:17 - testing and as you can see our function
09:19 - timer game object was indeed created all
09:22 - right so everything is working perfectly
09:24 - fine however the one issue that you see
09:27 - is that even though the timer hasn't
09:29 - left and it triggered the action this
09:31 - game object is still in
09:33 - here that is a potential garbage problem
09:35 - so we need to make sure that we clean it
09:37 - up when the action is triggered so let's
09:39 - go into the function
09:41 - timer and here on our Constructor let's
09:44 - receive an action a timer and then also
09:46 - a game
09:50 - object and now we can go into our
09:52 - destroy sound function and in here we
09:55 - also destroy our game
09:58 - object
10:01 - so just like that when we call destroy
10:03 - self it will destroy the game object and
10:05 - this is called after triggering our
10:07 - action so we should be able to see the
10:09 - game object exist whilst the timer is
10:12 - active as soon as it's over the game
10:13 - object should be cleaned up and
10:15 - everything perfectly fine let's see we
10:18 - just need to also pass in the object so
10:20 - let's go up here first we create the
10:22 - game object then we pass in that game
10:24 - object into our function timer and then
10:27 - we hook onto the mono Behavior up update
10:29 - with our function timer update now let's
10:34 - test okay here we are waiting and
10:36 - there's the game object and yep there
10:38 - you go the game object was destroyed and
10:40 - the action was
10:41 - triggered great so everything is working
10:45 - now sometimes you might want to set up a
10:47 - timer to do something like play an
10:48 - animation but you want to cancel it if
10:50 - something else happens so let's see how
10:53 - we can cancel active timers for that
10:56 - really the only thing we need is to have
10:58 - a list of all our active timers so for
11:01 - that let's make a static list so in here
11:03 - we make a private static list of
11:06 - function timers this will be our active
11:09 - timer
11:13 - list now we need to initialize this list
11:16 - so again let's make sure everything is
11:18 - contained inside this class so for that
11:21 - let's make a private static void in it
11:24 - if
11:26 - needed so this function will deal with
11:29 - the initialization of everything that
11:31 - this class requires since our function
11:33 - timers use game objects we can use that
11:35 - to make sure if our game objects are
11:37 - still alive or if they have been
11:38 - destroyed so for that we can use a
11:40 - private static hold an instance to a
11:42 - game object let's call this the init
11:46 - game
11:48 - object and here we can use that game
11:50 - object to test if the scene has been
11:52 - reloaded so we do a test if that game
11:55 - object is
11:56 - null then it means this class is running
11:58 - for the the very first time or there has
12:00 - been a level load which does necessitate
12:02 - resetting our timers so in here we
12:05 - create the game
12:09 - object and we can also initialize our
12:12 - list so active timer list equals a new
12:14 - list okay so just like this we will make
12:17 - sure that our list is always
12:18 - reinitialized every time the scene
12:20 - changes our timers aren't meant to go
12:22 - beyond the current scene so this is
12:24 - exactly the behavior we want so now that
12:27 - we have the en list set up in here when
12:29 - when we create a new function timer all
12:32 - we need to do is add it to our list so
12:34 - we go into the active timer list and we
12:36 - add our new function
12:40 - timer now to make sure that this does
12:42 - not give a null reference exception
12:44 - we're going to call in it if needed when
12:46 - creating a function timer so if it is
12:49 - necessary it will initialize the list if
12:51 - it's already initialized then it doesn't
12:52 - do
12:53 - anything so when we create we add it to
12:55 - the list let's also make a function to
12:57 - remove it from the list so a private
12:59 - static void remove
13:03 - timer and here we call in it if needed
13:06 - to make sure that the list exists and we
13:08 - go into the active timer list and remove
13:11 - our
13:13 - timer okay so we have our list correctly
13:16 - adding and
13:17 - removing now let's call the remove timer
13:20 - when we destroy this actual timer so we
13:22 - call remove timer on
13:24 - this and just like that we now have our
13:27 - list that always contains only the
13:29 - active timers so with that we can now
13:32 - decide to stop a certain timer so let's
13:35 - make here a function a private static
13:38 - void let's call this stop
13:42 - timer and now in here we need some way
13:44 - of identifying a timer so for that let's
13:47 - use a string for the
13:51 - name so that also means that we need to
13:54 - initialize a function timer and also
13:56 - give it a name so on to create function
13:58 - in here let's add a potential string
14:01 - value for the timer
14:03 - name we want this to be just an optional
14:05 - parameter since most cases you probably
14:07 - won't need to use it so by default let's
14:09 - set it to
14:11 - null we're going to pass in the timer
14:13 - name to our function timer so in here
14:16 - we'll receive a string for the timer
14:24 - name so now this object also has a timer
14:27 - name so now in here on the stop
14:30 - timer all we need to do is cycle through
14:32 - the timer
14:39 - list and if the active timer list on
14:42 - this index. timer name equals the timer
14:46 - name that we want to
14:50 - stop then we want to stop this
14:56 - timer so here in order to stop the timer
14:58 - we simply we go into the active timer
15:00 - list of this index and we call destroy
15:03 - self that won't stop the timer and
15:05 - remove it from the active timer list and
15:07 - then since we are cycling through that
15:09 - list we need to go back on the index so
15:10 - we make sure we don't skip
15:12 - one okay so that's pretty much it so now
15:16 - let's go to our testing class to test if
15:17 - all of this is
15:19 - working so let's make two testing
15:24 - actions and first let's call the testing
15:26 - action and then 1 second later let's
15:28 - let's call the testing action two so
15:30 - first let's see if both of these run
15:32 - exactly as intended one after 3 seconds
15:35 - and one after 4 seconds here we are and
15:37 - after 3 seconds and yep there's the
15:40 - testing and yep there's the testing too
15:42 - okay so we have both timers
15:44 - working now let's give them names so
15:47 - this is the first timer and this is the
15:49 - timer
15:53 - two so let's say we started off both of
15:55 - these timers but then we wanted to
15:57 - cancel the first timer so we go into the
15:59 - function timer and we call the stop
16:01 - timer
16:02 - function we pass in the timer name that
16:05 - we wish to stop and let's stop the first
16:08 - timer okay so we are creating the first
16:10 - timer then the second timer and then we
16:12 - stop the first timer so the only one
16:14 - that should still be triggered is the
16:16 - second timer let's
16:17 - see okay here we are
16:21 - and yep there you go only the second
16:23 - timer was actually triggered the first
16:25 - timer didn't happen at all so that means
16:28 - that we we can trigger an action after
16:30 - some time or cancel a currently active
16:32 - timer so that's pretty much it for the
16:34 - function timer class as you can see we
16:37 - have just one entry point it's extremely
16:39 - simple and in using it all we need to do
16:40 - is call the function timer and call the
16:42 - create function and we can now trigger
16:44 - an action after some time and if needed
16:46 - we can also stop it so we can now look
16:49 - into the class that is included in the
16:52 - utilities so here is the class that is
16:54 - included in the utilities as you can see
16:57 - it's called function timer we still have
16:59 - the same monob behavior hook we have a
17:01 - list of our timers and a game object
17:03 - used for initializing the class we have
17:06 - our initializing function and various
17:09 - function calls to pass in timer no timer
17:11 - function time we also have a couple more
17:14 - extra features like for example use
17:16 - unscaled Delta time or the normal Delta
17:18 - time and an option to stop all with the
17:20 - same name so with the understanding of
17:23 - what we created in this video you should
17:24 - be able to understand all of the code in
17:26 - here and how all of this works
17:29 - so that's pretty much it and here is the
17:31 - example scene that I showed
17:33 - earlier as you can see the function
17:35 - calls are very simple and should now be
17:37 - easy to understand we call the create
17:40 - function on the function timer we pass
17:42 - in the action this action for example is
17:44 - selling the character to move to a
17:45 - Target position and it will execute
17:47 - after 100 milliseconds so .1 seconds
17:50 - then after 0.9 seconds we are going to
17:52 - move the camera after .9 seconds we also
17:54 - zoom in and we also show The Cinematic
17:57 - bars so as you can you can see with just
17:59 - these few lines of codes we can create a
18:01 - very nice complex cut scene so anytime
18:04 - you need to trigger an action after a
18:05 - certain amount of time all it takes is
18:07 - one simple line of code so there you
18:10 - have it we recreated the function timer
18:12 - from the utilities in order to
18:13 - understand how it works as always you
18:15 - can download the project files and
18:16 - utilities from Unity codem monkey.com if
18:19 - you like the video subscribe to the
18:20 - channel for more Unity tutorials post
18:23 - any questions you have in the comments
18:24 - and I'll do my best to answer them all
18:26 - right see you next
18:27 - time
18:29 - [Music]
18:35 - [Music]

Cleaned transcript:

in this video we're going to learn how to trigger an action after a certain amount of time this is extremely useful for testing your game and creating timed events like for example when making a cut scene let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with inap tutorials made by a professional indie game developer so if you find the video helpful consider subscribing so here we will cover how the function timer works it's a simple but very useful class for triggering an action after some time this is one of the classes that is part of the codemonkey utilities which you can grab for free from Unity codem monkey.com this is very useful for easily setting up timers in your code so here for example I have a scene with a little cut scene set up cut scenes are one of the scenarios where timed events are really important so it's perfect to demonstrate this use so in here when I press space the unit Won Won it won stop show some cinematic bars zoom in and then go back to normal so let's see hit space there it is moving zoom in show The Cinematic and move away okay great so that's one example of how it can be useful so let's check out the code here is the code that makes all of those events happen one after the other it might seem complicated but it's actually very simple as you can see each of them is just one different function call the function call triggers a certain action after a certain amount of time so for for example here on the last one you can see that after 3 seconds we are triggering an action which hides The Cinematic bars so now that we know the benefits and one of the uses for the function timer let's recreate it to see how it works so first in here let's make a new C script and we're going to call this the function timer essentially we trigger a function after some time I want this to be a simple class and to be able to use the Constructor so let's first remove the Model Behavior to make this the simplest class it can be now let's make the Constructor a public function timer now in here to trigger an action after sometime let's receive an action which is inside the using system namespace an action in case you don't know it's a very simple delegate that takes no parameters and returns void so it's essentially the same as in here private void my action this would be a valid function that could be passed on into that action so we need an action and then we're also going to need a float for the timer now let's sort them as variables and now let's make a function that we won't run on update so make a simple public void update in here we're going to count down the timer using time. Delta time and we just do a a simple test if the timer is under zero then we trigger the action again the action is essentially just a stored function so in order to trigger it we simply call Action and execute it as if it were a function all right so that's very simple and it should be working so now let's figure out a way to test it let's create a new script for testing so Mak an easy sh script and let's call this testing and let's also drag it on to a game object that we're going to name testing and drag the testing script onto it okay so we now have this script running with mono Behavior now here we can do our test on this start so we need to create a function timer so we do a new function timer create a new instance of our class and now in here we pass in the action that we want to trigger so let's make a private void testing action and inside let's do a debug.log saying testing and now we can pass in this function as our action and we're going to trigger it after 3 seconds okay so after 3 seconds this function will be called which will do a debug.log now we still need to call the update function on this function timer so let's store this and now since this class is running with a mod Behavior we have access to the private void update and we can call the function timer. update okay so we are creating our testing timer passing in the testing action and 3 seconds then on every update we are calling the update on the function timer and once those 3 seconds are passed it will trigger this function which will do a debug.log so let's see that okay here's the scene and after 3 seconds you should see in the console yep there it is okay great so it worked and it is indeed triggering the action after 3 seconds however as you can see we also have a problem since it's triggering that action over and over again instead of doing it only once as it is intended so let's go back into our function timer and here let's create a function to destroy this function timer so let's call this the private void destroy self we're going to destroy this function timer after triggering the action and in order to destroy this object let's simply set a simple bully so we do a private bull is destroying by default we are not destroyed and when we do destroy self we set it to true and here we only run this code if we are not destroyed okay that should do it for making sure that our action is only triggered once so let's see here we are and after 3 seconds and yep there you go as you can see exactly only once okay great so we can now trigger an action after a certain amount of time so the code is all working but the setup is pretty clunky and here as you can see on our testing we need to First create the object then we need to keep a reference to it and we need to call it on update let's make the function timer class handle all of that to make it very easy to use so back in the function timer code we need to call this update function from somewhere in here now we could make this class extend monob Behavior but that would make this class more complicated and be tightly coupled with the mono Behavior system so another approach is to keep this as a simple class and then have another simple class that hooks into the mono Behavior functions so let's make a class inside this class we're going to do a public class let's call it the mono Behavior hook and this one will indeed extend mono Behavior so this class will essentially hope into the mono Behavior system which means that in here we have access to the private void update so here we can store a action for the on update action and we simply trigger it on update and just like that we can pass in whatever function we want into this on update and it w be called on update so to make this class easy to use let's make a static create function so in here we do a public static we're going to return a function timer and let's call this create and in here we're going to receive an action and a float for our time and in doing so we're also going to make the Constructor private to make sure this Constructor is only called from inside this class and now in here essentially we take care of everything we were doing on our testing so first we create the function timer then we create a game object we create the object with the name function timer and we start off with the mono Behavior hook component then we get that mono Behavior hook component get component and we set the on update function to trigger the function timer. update so with that that everything should be working and it's all contained here inside this one class so to see the benefits of doing all of this let's go back into our testing and this is what we were previously doing we were holding the reference creating an instance and calling update and now we don't need to do any of this we just need to call the function timer call the create function pass in the action and the time and just like that everything will't work so we can get rid of this this and all of this so as you can see we got rid of all that we made it just one line very simple and it's all taken care of inside the function timer so let's test and see if everything is still working exactly as intended here's the scene and after 3 seconds yep there you go there's our testing and as you can see our function timer game object was indeed created all right so everything is working perfectly fine however the one issue that you see is that even though the timer hasn't left and it triggered the action this game object is still in here that is a potential garbage problem so we need to make sure that we clean it up when the action is triggered so let's go into the function timer and here on our Constructor let's receive an action a timer and then also a game object and now we can go into our destroy sound function and in here we also destroy our game object so just like that when we call destroy self it will destroy the game object and this is called after triggering our action so we should be able to see the game object exist whilst the timer is active as soon as it's over the game object should be cleaned up and everything perfectly fine let's see we just need to also pass in the object so let's go up here first we create the game object then we pass in that game object into our function timer and then we hook onto the mono Behavior up update with our function timer update now let's test okay here we are waiting and there's the game object and yep there you go the game object was destroyed and the action was triggered great so everything is working now sometimes you might want to set up a timer to do something like play an animation but you want to cancel it if something else happens so let's see how we can cancel active timers for that really the only thing we need is to have a list of all our active timers so for that let's make a static list so in here we make a private static list of function timers this will be our active timer list now we need to initialize this list so again let's make sure everything is contained inside this class so for that let's make a private static void in it if needed so this function will deal with the initialization of everything that this class requires since our function timers use game objects we can use that to make sure if our game objects are still alive or if they have been destroyed so for that we can use a private static hold an instance to a game object let's call this the init game object and here we can use that game object to test if the scene has been reloaded so we do a test if that game object is null then it means this class is running for the the very first time or there has been a level load which does necessitate resetting our timers so in here we create the game object and we can also initialize our list so active timer list equals a new list okay so just like this we will make sure that our list is always reinitialized every time the scene changes our timers aren't meant to go beyond the current scene so this is exactly the behavior we want so now that we have the en list set up in here when when we create a new function timer all we need to do is add it to our list so we go into the active timer list and we add our new function timer now to make sure that this does not give a null reference exception we're going to call in it if needed when creating a function timer so if it is necessary it will initialize the list if it's already initialized then it doesn't do anything so when we create we add it to the list let's also make a function to remove it from the list so a private static void remove timer and here we call in it if needed to make sure that the list exists and we go into the active timer list and remove our timer okay so we have our list correctly adding and removing now let's call the remove timer when we destroy this actual timer so we call remove timer on this and just like that we now have our list that always contains only the active timers so with that we can now decide to stop a certain timer so let's make here a function a private static void let's call this stop timer and now in here we need some way of identifying a timer so for that let's use a string for the name so that also means that we need to initialize a function timer and also give it a name so on to create function in here let's add a potential string value for the timer name we want this to be just an optional parameter since most cases you probably won't need to use it so by default let's set it to null we're going to pass in the timer name to our function timer so in here we'll receive a string for the timer name so now this object also has a timer name so now in here on the stop timer all we need to do is cycle through the timer list and if the active timer list on this index. timer name equals the timer name that we want to stop then we want to stop this timer so here in order to stop the timer we simply we go into the active timer list of this index and we call destroy self that won't stop the timer and remove it from the active timer list and then since we are cycling through that list we need to go back on the index so we make sure we don't skip one okay so that's pretty much it so now let's go to our testing class to test if all of this is working so let's make two testing actions and first let's call the testing action and then 1 second later let's let's call the testing action two so first let's see if both of these run exactly as intended one after 3 seconds and one after 4 seconds here we are and after 3 seconds and yep there's the testing and yep there's the testing too okay so we have both timers working now let's give them names so this is the first timer and this is the timer two so let's say we started off both of these timers but then we wanted to cancel the first timer so we go into the function timer and we call the stop timer function we pass in the timer name that we wish to stop and let's stop the first timer okay so we are creating the first timer then the second timer and then we stop the first timer so the only one that should still be triggered is the second timer let's see okay here we are and yep there you go only the second timer was actually triggered the first timer didn't happen at all so that means that we we can trigger an action after some time or cancel a currently active timer so that's pretty much it for the function timer class as you can see we have just one entry point it's extremely simple and in using it all we need to do is call the function timer and call the create function and we can now trigger an action after some time and if needed we can also stop it so we can now look into the class that is included in the utilities so here is the class that is included in the utilities as you can see it's called function timer we still have the same monob behavior hook we have a list of our timers and a game object used for initializing the class we have our initializing function and various function calls to pass in timer no timer function time we also have a couple more extra features like for example use unscaled Delta time or the normal Delta time and an option to stop all with the same name so with the understanding of what we created in this video you should be able to understand all of the code in here and how all of this works so that's pretty much it and here is the example scene that I showed earlier as you can see the function calls are very simple and should now be easy to understand we call the create function on the function timer we pass in the action this action for example is selling the character to move to a Target position and it will execute after 100 milliseconds so .1 seconds then after 0.9 seconds we are going to move the camera after .9 seconds we also zoom in and we also show The Cinematic bars so as you can you can see with just these few lines of codes we can create a very nice complex cut scene so anytime you need to trigger an action after a certain amount of time all it takes is one simple line of code so there you have it we recreated the function timer from the utilities in order to understand how it works as always you can download the project files and utilities from Unity codem monkey.com if you like the video subscribe to the channel for more Unity tutorials post any questions you have in the comments and I'll do my best to answer them all right see you next time
