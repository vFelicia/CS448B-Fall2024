With timestamps:

00:00 - hello and welcome I'm your code monkey
00:02 - so recently I announced my upcoming Sim
00:04 - game called leaky Guardians go ahead and
00:06 - add it to your wishlist in order to
00:08 - announce the game I need to make a
00:09 - trailer and the game is meant to be
00:10 - multiplayer so it needed to show
00:12 - multiple players running around however
00:14 - the game is still very much in early
00:15 - development right now there's no
00:17 - multiplayer connection at all so that
00:19 - was a problem that I needed to solve how
00:20 - do I simulate multiplayer to show the
00:22 - vision of the final game in the trailer
00:24 - the straightforward answer is to just
00:26 - make some simple AI just like you would
00:27 - for making enemies or something like
00:29 - that however in order to simulate
00:31 - multiplayer that means I want the AI to
00:33 - control player objects now technically I
00:35 - could make an air script just for the
00:36 - app players make it specifically base to
00:38 - be AI controlled I could Define some
00:40 - waypoints and make the AI directly move
00:42 - towards it then play some kind of pickup
00:44 - animation or something like that it
00:46 - would require a bunch of specific code
00:48 - just to make that but it would work I've
00:50 - done that several times in the past
00:51 - however then I would have a bunch of
00:53 - duplicate code and tons of work that
00:55 - would only work for the AI I would
00:57 - basically end up with one player that is
00:59 - meant to be player controlled and a very
01:00 - similar one that is meant to be AI
01:02 - controlled so what I end up doing is
01:03 - actually something very simple and it's
01:05 - a nice trick that many of you might not
01:07 - know about so hopefully you find this
01:08 - video useful basically what you do is
01:10 - you simply separate the logic from the
01:12 - inputs then you have a script that
01:13 - listens to player input another one that
01:15 - fakes input based on AI that way the
01:18 - core player script is shared between
01:19 - both the player and the AI does making
01:21 - the code much much simpler so here I
01:23 - have my player it's pretty basic it's
01:25 - just walking around so I'm controlling
01:27 - the player myself and then over here are
01:29 - a whole bunch of AIS just walking around
01:31 - for example there's this one over here
01:33 - doing a bunch of predefined tasks so it
01:35 - goes to that position grab some
01:36 - resources goes there drops it then goes
01:39 - to another position and then back in
01:41 - there back to ground bringing resources
01:42 - and doing a bunch more things now with
01:44 - the game pause if I look at both these
01:46 - characters here's the one being player
01:48 - control you can see this one has a
01:49 - player component and then the air one
01:51 - also has a player component but then the
01:53 - player has this player input control
01:55 - script whereas the AI has this bot
01:57 - control script so they both share the
01:59 - same core player component but then have
02:01 - different components attached to those
02:02 - so let's see how this really works here
02:05 - is the planescript and the important
02:06 - part is over here here we have a bunch
02:08 - of delegates now if you're not familiar
02:10 - with delegates I have a home video on
02:12 - them so go watch that they are super
02:13 - useful and basically the way that this
02:15 - works is the player logic always asks
02:17 - for input directly through these
02:19 - delegates so for example down here for
02:21 - handling the movement it simply gets the
02:23 - input vector and uses that to move the
02:24 - actual object and then I just have a
02:27 - simple function in order to set all of
02:28 - the input delegates then for the other
02:30 - scripts here is the player input
02:31 - controller which as you can see simply
02:33 - has a reference to the player and on
02:35 - start simply calls the set input
02:36 - delegates in order to set input
02:38 - downloads on that player here it really
02:40 - just use the regular inputs so it goes
02:42 - into the input manager it can't let the
02:44 - move Direction then test for a bunch of
02:45 - key Downs something very basic by the
02:48 - way you might be questioning why am I
02:49 - not using the new input system this is a
02:51 - great example to how I developed my own
02:53 - Games first I get things working with
02:55 - the input manager and then in the future
02:57 - then I refactor it to use the much more
02:58 - capable input system that's exactly what
03:01 - I did in my free course and it's also
03:02 - what I'm doing here in my sim game so
03:04 - this script sets the input delegates
03:05 - using the input manager for the player
03:07 - inputs and then I have this other script
03:09 - the bot controller this one if we see it
03:12 - also has a reference to the same core
03:14 - player component and then down here on
03:16 - start it also sets the input vectors on
03:18 - the player however instead of using
03:20 - input directly from the player this one
03:22 - actually uses some AI to Define what
03:24 - values to return from these values so as
03:26 - you can see the get input Vector just
03:27 - returns a input moved here and this
03:30 - input moved here is down here on update
03:31 - depending on the action it is calculated
03:33 - based on some basic AI the analogic is
03:36 - all really simple for the trailer I just
03:38 - needed some super basic actions pretty
03:40 - much just moving interacting and waiting
03:42 - so all the actions in the trailer are
03:43 - just based on those the interact action
03:46 - depends on what object is in front of
03:47 - the character I'm using pretty much
03:49 - exact same logic that I covered in the
03:50 - how to talk to NPCs video for defining
03:53 - the actions I simply made this basic
03:55 - struct I made it serializable so that it
03:57 - shows up in the editor here's an example
03:59 - on the app I bought that we saw over
04:01 - here on the bot controller here is the
04:02 - bot action array so as you can see it's
04:04 - going to move to this position then it's
04:06 - going to trigger an interact action then
04:07 - wait for three seconds move to another
04:09 - one interact and so on so that is how
04:11 - the bot goes to this position then goes
04:13 - here interacts together that then goes
04:15 - there and tries to drop it and so on
04:16 - here are all of the basic actions and
04:19 - for triggering those actions AI is super
04:21 - basic so for doing a move to action for
04:24 - that it just calculates the direction
04:25 - towards the target position and then it
04:27 - stores that direction on the input move
04:28 - there which again the core player
04:30 - component is going to use this however
04:32 - this logic over here this is not
04:33 - directly moving the player that is going
04:35 - to happen later on when the core player
04:37 - script requests this input Vector so
04:39 - this doesn't actually move the player
04:41 - directly but still it's going to run on
04:42 - every update and then over here just a
04:44 - basic reach position logic if it gets
04:46 - close enough to the Target position then
04:47 - simply goes on to the next action then
04:49 - the weight action is also super simple
04:51 - just count down a simple float timer
04:53 - when some lapse goes to the next action
04:55 - and interact again the same thing it
04:57 - basically fakes pressing the interact
04:59 - button and then it's done so that's
05:00 - really it as you can see it's super
05:01 - basic then back here in the core play
05:03 - script this one does not care where
05:05 - these values come from so it does not
05:07 - care if it's the player driving these
05:09 - inputs or if it's the AI it does not
05:12 - matter it simply goes into these
05:13 - functions in order to test for the input
05:15 - and use that to move the player or use
05:17 - that to test for interaction and so on
05:18 - the score script does not care where
05:20 - those inputs come from here's another
05:22 - simple example that's shown in the
05:24 - trailer so this character right here is
05:26 - meant to go there in order to gather
05:27 - some food then it's meant to go here in
05:29 - order to feed the stinky and simply
05:30 - repeat if I look on the bot controller
05:32 - yep it has exactly those two actions so
05:34 - it has moved to an interact meaning it's
05:36 - going to move there interact and wait a
05:38 - bit then it's going to move here
05:39 - interact and wait a bit so let's hit an
05:41 - action if there's a character it goes
05:43 - there triggers an interact action then
05:44 - Waits a bit then when it's done goes on
05:47 - there interacts feeds the denki and goes
05:49 - there and does the same thing alright
05:50 - awesome and again I can still move my
05:52 - regular player perfectly normally so
05:54 - both these are sharing the same core
05:56 - components that's the main benefit of
05:57 - this approach the player class is
05:59 - internally shared between both the
06:00 - player and the AI that way if I want to
06:03 - add more mechanics like for example
06:04 - enabling the player to build something
06:06 - in order to do that I just need to add
06:08 - that logic over here on the interaction
06:09 - script and if the core player can do one
06:11 - action then the AI and the actual player
06:14 - can both do that action also because the
06:16 - code is very clean with clearly the
06:18 - coupon interactions it means I don't
06:19 - really have to change much here's the
06:21 - scene showcasing the building
06:22 - construction and as you can see the Bots
06:24 - walk around and they do some regular
06:26 - construction now as far as the Bots are
06:28 - concerned they are really just moving
06:29 - around doing an interact action so it
06:31 - sounds super basic so with this simple
06:33 - AI script only had to do was really just
06:35 - to find all the positions for all the
06:36 - interactions that I want to showcase in
06:38 - the trailer so there's this area right
06:40 - here for showing the player feeding
06:41 - dinkies then over here there's an area
06:44 - showcasing all the building mechanics
06:45 - and then finally at the end there's a
06:48 - area showcasing the defense mechanics
06:50 - now for this one these two towers they
06:52 - are driven by just regular AI so this
06:54 - does not require any delegates or
06:56 - anything it's just normal AI but also to
06:58 - make that defense shot look a bit more
07:00 - more interesting I also added a bunch of
07:01 - players just randomly walking around and
07:03 - finally over here for the resource
07:05 - Gathering automation for this part this
07:06 - is all handled through some regular AI
07:08 - so this Tower here this is looking for
07:11 - resources within a certain radius it
07:13 - looks for them it finds one picks it up
07:15 - and puts it over here in search then the
07:17 - vehicle is also some basic AI so the
07:19 - vehicle simply goes to storage if
07:20 - there's something in there picks it up
07:21 - and drops it somewhere else so the
07:23 - tricky part was really just handling the
07:25 - player eye to simulate multiplier and as
07:27 - you can see thanks to using this pattern
07:28 - for using delegates for inputs and also
07:30 - because of using clean code for the
07:32 - interactions because of that this was
07:33 - all pretty easy to do also here's an
07:36 - extra quick tip related to the trailer
07:37 - if you notice the trailer has some nice
07:39 - moving shots now for that the
07:41 - straightforward approach is to make some
07:43 - animations moving the camera so grab
07:45 - this virtual camera make an animation
07:46 - and move it somewhere that would be the
07:48 - manual approach however that is really
07:50 - pretty time consuming so a much simpler
07:52 - trick is just using the built-in
07:53 - cinemasion blending if you look inside
07:55 - the cinemasion brain so here it is the
07:57 - main camera and inspector yep it does
07:59 - have a in machine brain component and
08:01 - over here you can see some settings
08:02 - based on how it Blends between the
08:04 - various virtual cameras the important
08:05 - one is over here the blend so you've got
08:07 - ease in is out custom and so on and
08:09 - importantly over here AZ time so this is
08:11 - going to take 10 seconds to smoothly
08:13 - interpolate between one virtual camera
08:14 - and the other one so if you set it to a
08:16 - huge amount like this like 10 seconds
08:18 - then you take one of these virtual
08:20 - cameras you make the start virtual
08:21 - camera with a certain priority
08:23 - and then you make another virtual camera
08:25 - on a different position with a higher
08:27 - priority however just like this then
08:29 - it's simply going to start with this one
08:30 - enabled so to make a nice animation
08:32 - during runtime simply set this one as
08:34 - higher priority and then disable this
08:35 - game object then start playing the game
08:37 - now start recording and it's currently
08:39 - only showing the first camera and now
08:41 - simply enable this one and there you go
08:43 - it now nicely smoothly interpolates
08:45 - between the first camera and the second
08:46 - camera for a really nice slow moving
08:48 - shot so that's another quick tip which
08:50 - is quite useful when making trailers for
08:52 - your games alright I hope you found
08:53 - these tips useful and I hope they help
08:55 - you in making your own games go ahead
08:57 - and add dinky Garden see your wish list
08:58 - thanks to these awesome patreon
09:00 - supporters for making these videos
09:01 - possible thank you for watching and I'll
09:04 - see you next time
09:08 - foreign

Cleaned transcript:

hello and welcome I'm your code monkey so recently I announced my upcoming Sim game called leaky Guardians go ahead and add it to your wishlist in order to announce the game I need to make a trailer and the game is meant to be multiplayer so it needed to show multiple players running around however the game is still very much in early development right now there's no multiplayer connection at all so that was a problem that I needed to solve how do I simulate multiplayer to show the vision of the final game in the trailer the straightforward answer is to just make some simple AI just like you would for making enemies or something like that however in order to simulate multiplayer that means I want the AI to control player objects now technically I could make an air script just for the app players make it specifically base to be AI controlled I could Define some waypoints and make the AI directly move towards it then play some kind of pickup animation or something like that it would require a bunch of specific code just to make that but it would work I've done that several times in the past however then I would have a bunch of duplicate code and tons of work that would only work for the AI I would basically end up with one player that is meant to be player controlled and a very similar one that is meant to be AI controlled so what I end up doing is actually something very simple and it's a nice trick that many of you might not know about so hopefully you find this video useful basically what you do is you simply separate the logic from the inputs then you have a script that listens to player input another one that fakes input based on AI that way the core player script is shared between both the player and the AI does making the code much much simpler so here I have my player it's pretty basic it's just walking around so I'm controlling the player myself and then over here are a whole bunch of AIS just walking around for example there's this one over here doing a bunch of predefined tasks so it goes to that position grab some resources goes there drops it then goes to another position and then back in there back to ground bringing resources and doing a bunch more things now with the game pause if I look at both these characters here's the one being player control you can see this one has a player component and then the air one also has a player component but then the player has this player input control script whereas the AI has this bot control script so they both share the same core player component but then have different components attached to those so let's see how this really works here is the planescript and the important part is over here here we have a bunch of delegates now if you're not familiar with delegates I have a home video on them so go watch that they are super useful and basically the way that this works is the player logic always asks for input directly through these delegates so for example down here for handling the movement it simply gets the input vector and uses that to move the actual object and then I just have a simple function in order to set all of the input delegates then for the other scripts here is the player input controller which as you can see simply has a reference to the player and on start simply calls the set input delegates in order to set input downloads on that player here it really just use the regular inputs so it goes into the input manager it can't let the move Direction then test for a bunch of key Downs something very basic by the way you might be questioning why am I not using the new input system this is a great example to how I developed my own Games first I get things working with the input manager and then in the future then I refactor it to use the much more capable input system that's exactly what I did in my free course and it's also what I'm doing here in my sim game so this script sets the input delegates using the input manager for the player inputs and then I have this other script the bot controller this one if we see it also has a reference to the same core player component and then down here on start it also sets the input vectors on the player however instead of using input directly from the player this one actually uses some AI to Define what values to return from these values so as you can see the get input Vector just returns a input moved here and this input moved here is down here on update depending on the action it is calculated based on some basic AI the analogic is all really simple for the trailer I just needed some super basic actions pretty much just moving interacting and waiting so all the actions in the trailer are just based on those the interact action depends on what object is in front of the character I'm using pretty much exact same logic that I covered in the how to talk to NPCs video for defining the actions I simply made this basic struct I made it serializable so that it shows up in the editor here's an example on the app I bought that we saw over here on the bot controller here is the bot action array so as you can see it's going to move to this position then it's going to trigger an interact action then wait for three seconds move to another one interact and so on so that is how the bot goes to this position then goes here interacts together that then goes there and tries to drop it and so on here are all of the basic actions and for triggering those actions AI is super basic so for doing a move to action for that it just calculates the direction towards the target position and then it stores that direction on the input move there which again the core player component is going to use this however this logic over here this is not directly moving the player that is going to happen later on when the core player script requests this input Vector so this doesn't actually move the player directly but still it's going to run on every update and then over here just a basic reach position logic if it gets close enough to the Target position then simply goes on to the next action then the weight action is also super simple just count down a simple float timer when some lapse goes to the next action and interact again the same thing it basically fakes pressing the interact button and then it's done so that's really it as you can see it's super basic then back here in the core play script this one does not care where these values come from so it does not care if it's the player driving these inputs or if it's the AI it does not matter it simply goes into these functions in order to test for the input and use that to move the player or use that to test for interaction and so on the score script does not care where those inputs come from here's another simple example that's shown in the trailer so this character right here is meant to go there in order to gather some food then it's meant to go here in order to feed the stinky and simply repeat if I look on the bot controller yep it has exactly those two actions so it has moved to an interact meaning it's going to move there interact and wait a bit then it's going to move here interact and wait a bit so let's hit an action if there's a character it goes there triggers an interact action then Waits a bit then when it's done goes on there interacts feeds the denki and goes there and does the same thing alright awesome and again I can still move my regular player perfectly normally so both these are sharing the same core components that's the main benefit of this approach the player class is internally shared between both the player and the AI that way if I want to add more mechanics like for example enabling the player to build something in order to do that I just need to add that logic over here on the interaction script and if the core player can do one action then the AI and the actual player can both do that action also because the code is very clean with clearly the coupon interactions it means I don't really have to change much here's the scene showcasing the building construction and as you can see the Bots walk around and they do some regular construction now as far as the Bots are concerned they are really just moving around doing an interact action so it sounds super basic so with this simple AI script only had to do was really just to find all the positions for all the interactions that I want to showcase in the trailer so there's this area right here for showing the player feeding dinkies then over here there's an area showcasing all the building mechanics and then finally at the end there's a area showcasing the defense mechanics now for this one these two towers they are driven by just regular AI so this does not require any delegates or anything it's just normal AI but also to make that defense shot look a bit more more interesting I also added a bunch of players just randomly walking around and finally over here for the resource Gathering automation for this part this is all handled through some regular AI so this Tower here this is looking for resources within a certain radius it looks for them it finds one picks it up and puts it over here in search then the vehicle is also some basic AI so the vehicle simply goes to storage if there's something in there picks it up and drops it somewhere else so the tricky part was really just handling the player eye to simulate multiplier and as you can see thanks to using this pattern for using delegates for inputs and also because of using clean code for the interactions because of that this was all pretty easy to do also here's an extra quick tip related to the trailer if you notice the trailer has some nice moving shots now for that the straightforward approach is to make some animations moving the camera so grab this virtual camera make an animation and move it somewhere that would be the manual approach however that is really pretty time consuming so a much simpler trick is just using the builtin cinemasion blending if you look inside the cinemasion brain so here it is the main camera and inspector yep it does have a in machine brain component and over here you can see some settings based on how it Blends between the various virtual cameras the important one is over here the blend so you've got ease in is out custom and so on and importantly over here AZ time so this is going to take 10 seconds to smoothly interpolate between one virtual camera and the other one so if you set it to a huge amount like this like 10 seconds then you take one of these virtual cameras you make the start virtual camera with a certain priority and then you make another virtual camera on a different position with a higher priority however just like this then it's simply going to start with this one enabled so to make a nice animation during runtime simply set this one as higher priority and then disable this game object then start playing the game now start recording and it's currently only showing the first camera and now simply enable this one and there you go it now nicely smoothly interpolates between the first camera and the second camera for a really nice slow moving shot so that's another quick tip which is quite useful when making trailers for your games alright I hope you found these tips useful and I hope they help you in making your own games go ahead and add dinky Garden see your wish list thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time foreign
