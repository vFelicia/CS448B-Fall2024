With timestamps:

00:00 - in this video we're going to make a
00:01 - simple character jump in 2d the jump
00:04 - will be using unity physics so we can
00:06 - easily implement a platforming level
00:07 - let's begin hello and welcome I'm your
00:18 - code monkey and this channel is all
00:19 - about helping you learn how to make your
00:21 - own games with in-depth tutorials made
00:22 - by a professional indie game developer
00:24 - so if you find the video helpful
00:25 - consider subscribing so this is what we
00:28 - want to make we have this character here
00:30 - with some nice animations I can press
00:32 - space to make him jump and as you can
00:34 - see the jump uses the Unity physics
00:36 - system so he jumps up and gets pushed
00:38 - down by gravity there are also three
00:40 - modes that we can apply to our jump so
00:42 - for example we can have our character
00:43 - have full control once the jump is in
00:46 - midair we can also make it have no
00:48 - control whilst in the air so if we jump
00:50 - he keeps going on the same direction and
00:52 - we can also set it to have some control
00:54 - in midair so I jump to the right and
00:56 - then I can stop and stop it for a bit of
00:59 - these various jump types are dependent
01:01 - on your game design so we're going to
01:03 - create these three modes and then it's
01:04 - up to you to figure out which mode best
01:06 - suits your game alright so let's get to
01:09 - it
01:09 - first here is my starting scene with my
01:11 - character
01:12 - oh yes are some simple animations
01:14 - there's no movement or jumping
01:15 - whatsoever so let's see the simplest way
01:18 - to implement jumping for that let's
01:20 - first go into the player game object and
01:22 - in here in order to be able to use unity
01:25 - physics we're going to add a rigidbody
01:27 - 2d this is the main component that
01:30 - interacts with the physic system and
01:31 - just by adding this we can already test
01:34 - to see those physics being applied
01:35 - so let's run the code and yep there it
01:38 - is the character starts falling along
01:39 - with gravity okay so let's have a simple
01:42 - platformer for that we come here we
01:45 - create an empty game object call this a
01:47 - platformer let's add a sprite renderer
01:50 - so we can see it and hear on the sprite
01:53 - renderer without any texture it's not
01:55 - visible so let's add the white pixel
01:57 - texture this texture is literally just a
02:00 - 1x1 white pixel and by adding that we
02:02 - can now view the game object in our
02:04 - scene so now let's stretch it to make
02:06 - our platform
02:14 - okay so let's say this is the size that
02:16 - we want now let's add the box Collider
02:19 - 2d component and that's pretty much it
02:22 - for adding physics to a platform this
02:24 - object now has a hitbox that won't be
02:27 - used by the physics system however if we
02:29 - run the code there's the character
02:32 - falling down and yep it goes through the
02:34 - platform that's because our character
02:36 - also needs a head box so let's go back
02:38 - into the character and in here at also a
02:41 - box Collider 2d make sure that the head
02:44 - box size matches that of the sprite okay
02:55 - now it should work let's see there's the
02:58 - character falling down and yep there you
03:00 - go he stops falling down once he had
03:01 - supplied one okay great so now we have
03:05 - our basic physics set up now let's make
03:07 - it so that our character can jump here
03:09 - on the character game object I already
03:11 - have two squares applied the prescript
03:14 - is what handles the animation so don't
03:15 - worry about that one for now since the
03:17 - animations are irrelevant regarding the
03:20 - jump system so for that let's open the
03:22 - player script okay here we are as you
03:24 - can see it is pretty much empty on has
03:26 - is a reference to the player base
03:28 - component so we can play our animations
03:30 - so in here let's first listen to player
03:32 - input so for that we make a private void
03:35 - update and now in order to listen to
03:37 - simple input we simply do if input that
03:41 - get you down and let's test for Kiko dot
03:44 - space so on the frame when we press the
03:49 - spacebar this will be true and when we
03:52 - do that we want to jump now in order to
03:54 - jump we're going to change something in
03:56 - our rigidbody so let's go up here and
03:58 - make a reference for the rigidbody 2d
04:06 - so with our reference you cannot go in
04:09 - here and modify the rigid body down
04:11 - philosophy velocity is how fast the
04:14 - rigid body is moving so by changing it
04:16 - directly we won't have a correct jump
04:18 - instead of adding force which would be
04:19 - more gradual so velocity takes a vector
04:22 - two for our vector two we wanted to move
04:25 - up so we do a vector two that up and
04:28 - then multiplied by a certain jump
04:30 - velocity so let's do it here a float for
04:33 - the jump velocity and then we multiply
04:37 - it in here okay so that should do it
04:40 - when we press our spacebar we are
04:42 - modifying the velocity to make our
04:43 - character jump up let's see okay there's
04:47 - a character sitting on the platform and
04:49 - when our press space yep there you go as
04:51 - you can see it did indeed jump up and
04:53 - fall down now the jump feels a bit
04:56 - floaty so we can play around with the
04:57 - values to get a nice jump feel here on
05:00 - the originally scale so by increasing it
05:04 - we can make the jump
05:05 - much less floating okay so these vowels
05:08 - that are obviously gonna depend heavily
05:09 - on the scale of your sprites and your
05:11 - own levels but in this case a gravity
05:13 - scale of 25 and a jump velocity of 100
05:17 - makes for a nice jump here it is in the
05:19 - game and if I jump yep I have a much
05:22 - better jump it's much less floaty and
05:23 - much more accurate okay quick in here we
05:26 - can also go into the constraints in
05:27 - order to freeze our rotation so the
05:29 - character doesn't bounce around when you
05:31 - go it to an edge now one issue that we
05:33 - do have in here is that essentially we
05:35 - can keep jumping so if I spam space as
05:37 - you can see he just keeps jumping
05:39 - non-stop and essentially our character
05:41 - can fly so that means we need to test
05:43 - when the character is on the ground and
05:44 - only if the character is on the ground
05:46 - then we can jump so let's go into the
05:49 - code and now in here we only want to do
05:51 - this jump if our character is grounded
05:53 - so in order to test if the character is
05:55 - grounded we have several options
05:57 - depending on how we want our game to
05:59 - work the simplest way possible is just
06:01 - with a simple ray cast so you do a ray
06:04 - cast from the center pointing down any
06:06 - test that works fine but it only works
06:08 - on a perfect line meaning if your
06:10 - character is on an edge the center of
06:13 - the character will not be on top so it
06:14 - will not
06:15 - as being grounded if you want your
06:18 - character to essentially occupy just one
06:19 - pixel that would be a valid way however
06:22 - for our character were using a box
06:24 - Collider so we want to occupy more than
06:25 - just a single point so instead of a
06:28 - raycast we're going to do a box cast so
06:30 - let's go in here make a private loan
06:32 - comic is grounded and in here we're
06:36 - going to go into the physics 2d class
06:38 - and do a box cast so we need an origin
06:42 - for our box and the origin will be our
06:44 - box Collider so let's go up here and
06:46 - grab that reference a reference to our
06:48 - box Collider 2d so we can use the Box
06:55 - Collider dot bounce dot Center so the
06:58 - center of the box Collider is going to
07:00 - be our origin for the size we use the
07:02 - same size as our box Collider now for
07:07 - the angle we don't want the box to be
07:09 - rotated so we just give it 0 and for the
07:12 - direction we want to point down so let's
07:14 - do a vector 2 dot down and we want to
07:17 - move down by just a tiny amount just
07:19 - enough to check if there's something in
07:21 - there so in here we need to multiply by
07:23 - a certain distance amount so in this
07:25 - case let's say just point 1f this is
07:27 - just so that the box casts that we're
07:29 - doing is just slightly offset from where
07:31 - the player is sitting ok so this is our
07:34 - function and this box has returns a rake
07:37 - a set to Dean so great asset to D and
07:42 - then all we need to do is check if the
07:45 - array cast it to be that Collider if it
07:48 - is different from no if it isn't that
07:51 - means we hit something
07:52 - so we are indeed run so just for testing
07:55 - let's do a debug down walk to make sure
07:57 - we are hearing what we want and here on
08:00 - update we're only going to jump if our
08:03 - character is grounded and we press the
08:06 - spacebar
08:06 - ok that should do it now let's see so
08:10 - here is the character on the platform
08:12 - however here in the WoW you can see an
08:13 - issue the array cast is hitting the
08:15 - player's hitbox so essentially we still
08:18 - have the same behavior where we can
08:19 - essentially jump since he's hitting the
08:21 - player pit hitbox so he's constantly
08:23 - ground what we need is to ignore the
08:25 - player's hitbox and test for the
08:26 - platforms
08:27 - for that we can use a layer so we click
08:31 - here on layer at the new layer this will
08:34 - be the layer for our platforms and now
08:36 - we go into our platform sprite and we
08:39 - set it to the platform's layer ok and
08:41 - now we can go back into our code and up
08:44 - here
08:45 - let's add a field for a layer mask so a
08:48 - private layer mask this is essentially
08:53 - what describes which layers we want to
08:55 - hit with our raycast we're going to set
08:57 - this in the editor so let's make it a
08:58 - serialize field let's see how it looks
09:02 - in the editor here we are on the player
09:05 - as you can see there's the layer mask
09:06 - we're going to set this to only hit on
09:09 - platforms so our layer mask will only
09:11 - hit platforms and now back in the code
09:14 - let's rename this to platforms layer
09:19 - mask just to make a better name and down
09:24 - here when we are checking if we are
09:26 - grounded on this function we can also
09:28 - pass in a and layer mask ok so that's
09:31 - pretty much it so now this box cast will
09:33 - only hit things that are on the platform
09:35 - layer so we can now go back and test and
09:38 - see if our ground code is now correctly
09:40 - working and yep here it is in the log as
09:43 - you can see it's no longer interacting
09:44 - with the player but rather with a
09:45 - platform soon here I can press space and
09:48 - yep there you go a normal jump and if I
09:50 - spam space if there you go I can no
09:52 - longer fly now I can only jump when I'm
09:54 - touching the floor right great so we now
09:57 - have vertical jumping working perfectly
09:59 - fine now that we have that let's see on
10:01 - with some movement whilst in the air so
10:04 - before that I'm going to write some
10:05 - quick simple movement code
10:18 - okay so here is the movement code I want
10:21 - this video to be focused on jumping so I
10:22 - won't go into too much detail but let me
10:24 - know if you would like a video focused
10:26 - on various types of movement so in here
10:28 - all I'm doing is checking for the in
10:30 - left and right arrow keys when no key is
10:32 - pressed then the rigidbody a velocity
10:34 - suddenly stops when I'm pressing left I
10:37 - put the velocity on - move speed on on
10:39 - right on pause moves me so this makes
10:42 - our movement very snappy and controlled
10:43 - so let's see it in action so I can move
10:47 - to the left move to the right I can jump
10:48 - and you up there you go I have full
10:50 - control over movement okay now let's add
10:53 - our animations to make this song look
10:55 - much better okay so here is the set
10:57 - animations code we just check if we are
11:00 - grounded if we are grounded and the
11:01 - velocity is zero then we play the idle
11:03 - animation if we are ground and velocity
11:05 - is not zero then we play the movement
11:07 - animation and if we are not grounded
11:09 - then we play the jump animation so here
11:11 - they are movement left move rides as you
11:13 - can see the animations and jump and yep
11:14 - there you go everything looks right okay
11:17 - great so with all that working now with
11:20 - regards to the jump we can do several
11:21 - things the way that it's currently
11:23 - implemented we have full control lost in
11:25 - me there so in here I can jump it right
11:27 - then midair stop and come back this is
11:30 - one way to do it however now let's say
11:33 - in your design you want the player to
11:34 - have no control whilst in midair so
11:36 - let's go to the cone here on the
11:40 - movement code we're setting the velocity
11:41 - once the key is held down so we need to
11:44 - do is make sure that this code only runs
11:46 - when the character is grounded so in
11:49 - here in handling the movement to
11:51 - assembly do if is grounded then we
11:54 - handle movement if it is not grounded
11:55 - then we do not handle movement okay
11:58 - let's see okay we are moving now I jump
12:04 - any of there you go I cannot change my
12:06 - direction one time in the middle of the
12:08 - air so I can jump to the right now I
12:10 - pressing left and doesn't work it only
12:11 - works when I fell down so this is one
12:14 - possibility again all this depends on
12:16 - your design now let's check out another
12:18 - possible design so let's say we want to
12:21 - have some
12:22 - Cutrone well in midair but not example
12:24 - like on the form so let's first go back
12:26 - to the code where we had full control
12:29 - okay here we are and I have absolute
12:32 - full control once the character is in
12:34 - midair
12:34 - okay and now in our handle movement code
12:37 - we're going to do some different things
12:39 - in here for example when we are not
12:42 - pressing any Keys when we are grounded
12:45 - it is grounded then we're going to do
12:47 - exactly this we're going to completely
12:48 - stop but when we are not grounded we're
12:51 - going to leave the velocity as it is so
12:53 - if we don't let go of the keys he keeps
12:54 - going on the same direction now when
12:57 - pressing left if we are grounded then we
13:01 - change the velocity exactly as
13:02 - previously however when not grounded
13:06 - we're going to modify the velocity a bit
13:09 - to the left
13:10 - so we modify the velocity we don't
13:14 - change the Y and we change the X here
13:17 - since we are running this on every frame
13:18 - we need to multiply by time.deltatime so
13:22 - essentially when we are not grounded we
13:23 - are constantly pushing the velocity to
13:26 - the left side now let's add also a
13:28 - variable to check our midair control so
13:32 - it's low to mid air control and then we
13:35 - can play around with this value and then
13:40 - let's make sure it is always within
13:42 - valid ranges
13:49 - okay so we shift the velocity to the
13:51 - left side by a certain amount then we
13:54 - make sure that our rigidbody velocity X
13:56 - stays within - moves speed and pause
13:58 - move speed and we don't let go of the
14:00 - velocity of Y so all this essentially
14:03 - means that we slow down while in mid-air
14:05 - so let's see if this works
14:08 - okay here we are now I jump to the right
14:10 - and then I'm gonna try to stop my jump
14:12 - jump and try to stop when II up there
14:14 - you go I had some control as you can see
14:16 - if I go and just let go he goes on the
14:18 - way there if I get when I stop yup there
14:20 - we go I have some control in me there
14:22 - now we can increase this amount but yep
14:25 - that's exactly what we want now let's
14:27 - apply it to the other side okay let's
14:35 - test here we are jump to the right and
14:38 - yep I can control it slightly and jump
14:40 - to the left and I can also control it
14:42 - slightly so I can for example jump then
14:45 - I see I'm going to overshoot it and I
14:46 - can try to cancel it again the valleys
14:50 - are easy to change so if we want more we
14:52 - can change it so here instead of minute
14:54 - control like that let's put three so I
14:57 - go I jump and yep there you go I can
14:59 - almost change direction fully whilst in
15:01 - midair so I jump and I can fall exactly
15:04 - on the same point jump in there and come
15:06 - back and I found out okay great so as
15:09 - you can see we have three possible rule
15:11 - sets we can have full control while in
15:13 - midair we can have no control or some
15:15 - control whichever you choose will depend
15:17 - on the design for your game now let's
15:19 - see one final problem that we have first
15:22 - let's set another platform to the side
15:25 - and now let's revert back to being able
15:28 - to move in midair
15:49 - okay so I have separated all the
15:51 - behaviors in three functions so you can
15:53 - use which one best suits your game so
15:55 - here we have the phone midair control
15:57 - send me their control and know me their
15:58 - control so now let's use the format
16:00 - error control and now let's test how
16:03 - things work with this second platform
16:05 - okay there's the second platform I can
16:07 - go into it and yep there you go I can
16:09 - jump on top okay everything seems nice
16:11 - however if I jump at an angle straight
16:13 - to it there go the character is now
16:16 - stuck in me there that is because I am
16:18 - holding down the right key so he's
16:20 - constantly trying to move to the side
16:21 - which stops his phone so he found let go
16:24 - of the right key there you go he falls
16:25 - and works from so the issue in here is
16:28 - because of friction so if I'm pushing to
16:30 - the right and is causing freshing then
16:32 - that friction is keeping him whilst on
16:34 - midair so for that we can pause our
16:37 - scene here on our rigid body we have a
16:40 - place where we can add a physics
16:41 - material so we can create one let's go
16:43 - in here create a new physics material
16:45 - and we're going to call this no friction
16:49 - and here on we need to do is set our
16:53 - friction to zero drag it onto our
16:56 - rigidbody okay and now let's test here
17:00 - we aren't if I jump at an angle yep
17:01 - there you go he hugged the wall and kept
17:03 - moving up and then fall down so as you
17:06 - can see he no longer get stuck if we hit
17:08 - the wall from the side so there you have
17:12 - it who created a simple jump using the
17:14 - Unity physics system using this as a
17:16 - base we can now create any number of
17:17 - platforming games we can easily do in
17:20 - level design by creating multiple
17:21 - platforms and managing the player jump
17:23 - height as always you can download the
17:25 - project fountain utilities from unity
17:27 - cosmic comm if you liked the video
17:29 - subscribe the channel for more unity
17:31 - tutorials post any questions you have in
17:33 - the comments and I'll do
17:34 - to answer them alright see you next time
17:37 - [Music]

Cleaned transcript:

in this video we're going to make a simple character jump in 2d the jump will be using unity physics so we can easily implement a platforming level let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with indepth tutorials made by a professional indie game developer so if you find the video helpful consider subscribing so this is what we want to make we have this character here with some nice animations I can press space to make him jump and as you can see the jump uses the Unity physics system so he jumps up and gets pushed down by gravity there are also three modes that we can apply to our jump so for example we can have our character have full control once the jump is in midair we can also make it have no control whilst in the air so if we jump he keeps going on the same direction and we can also set it to have some control in midair so I jump to the right and then I can stop and stop it for a bit of these various jump types are dependent on your game design so we're going to create these three modes and then it's up to you to figure out which mode best suits your game alright so let's get to it first here is my starting scene with my character oh yes are some simple animations there's no movement or jumping whatsoever so let's see the simplest way to implement jumping for that let's first go into the player game object and in here in order to be able to use unity physics we're going to add a rigidbody 2d this is the main component that interacts with the physic system and just by adding this we can already test to see those physics being applied so let's run the code and yep there it is the character starts falling along with gravity okay so let's have a simple platformer for that we come here we create an empty game object call this a platformer let's add a sprite renderer so we can see it and hear on the sprite renderer without any texture it's not visible so let's add the white pixel texture this texture is literally just a 1x1 white pixel and by adding that we can now view the game object in our scene so now let's stretch it to make our platform okay so let's say this is the size that we want now let's add the box Collider 2d component and that's pretty much it for adding physics to a platform this object now has a hitbox that won't be used by the physics system however if we run the code there's the character falling down and yep it goes through the platform that's because our character also needs a head box so let's go back into the character and in here at also a box Collider 2d make sure that the head box size matches that of the sprite okay now it should work let's see there's the character falling down and yep there you go he stops falling down once he had supplied one okay great so now we have our basic physics set up now let's make it so that our character can jump here on the character game object I already have two squares applied the prescript is what handles the animation so don't worry about that one for now since the animations are irrelevant regarding the jump system so for that let's open the player script okay here we are as you can see it is pretty much empty on has is a reference to the player base component so we can play our animations so in here let's first listen to player input so for that we make a private void update and now in order to listen to simple input we simply do if input that get you down and let's test for Kiko dot space so on the frame when we press the spacebar this will be true and when we do that we want to jump now in order to jump we're going to change something in our rigidbody so let's go up here and make a reference for the rigidbody 2d so with our reference you cannot go in here and modify the rigid body down philosophy velocity is how fast the rigid body is moving so by changing it directly we won't have a correct jump instead of adding force which would be more gradual so velocity takes a vector two for our vector two we wanted to move up so we do a vector two that up and then multiplied by a certain jump velocity so let's do it here a float for the jump velocity and then we multiply it in here okay so that should do it when we press our spacebar we are modifying the velocity to make our character jump up let's see okay there's a character sitting on the platform and when our press space yep there you go as you can see it did indeed jump up and fall down now the jump feels a bit floaty so we can play around with the values to get a nice jump feel here on the originally scale so by increasing it we can make the jump much less floating okay so these vowels that are obviously gonna depend heavily on the scale of your sprites and your own levels but in this case a gravity scale of 25 and a jump velocity of 100 makes for a nice jump here it is in the game and if I jump yep I have a much better jump it's much less floaty and much more accurate okay quick in here we can also go into the constraints in order to freeze our rotation so the character doesn't bounce around when you go it to an edge now one issue that we do have in here is that essentially we can keep jumping so if I spam space as you can see he just keeps jumping nonstop and essentially our character can fly so that means we need to test when the character is on the ground and only if the character is on the ground then we can jump so let's go into the code and now in here we only want to do this jump if our character is grounded so in order to test if the character is grounded we have several options depending on how we want our game to work the simplest way possible is just with a simple ray cast so you do a ray cast from the center pointing down any test that works fine but it only works on a perfect line meaning if your character is on an edge the center of the character will not be on top so it will not as being grounded if you want your character to essentially occupy just one pixel that would be a valid way however for our character were using a box Collider so we want to occupy more than just a single point so instead of a raycast we're going to do a box cast so let's go in here make a private loan comic is grounded and in here we're going to go into the physics 2d class and do a box cast so we need an origin for our box and the origin will be our box Collider so let's go up here and grab that reference a reference to our box Collider 2d so we can use the Box Collider dot bounce dot Center so the center of the box Collider is going to be our origin for the size we use the same size as our box Collider now for the angle we don't want the box to be rotated so we just give it 0 and for the direction we want to point down so let's do a vector 2 dot down and we want to move down by just a tiny amount just enough to check if there's something in there so in here we need to multiply by a certain distance amount so in this case let's say just point 1f this is just so that the box casts that we're doing is just slightly offset from where the player is sitting ok so this is our function and this box has returns a rake a set to Dean so great asset to D and then all we need to do is check if the array cast it to be that Collider if it is different from no if it isn't that means we hit something so we are indeed run so just for testing let's do a debug down walk to make sure we are hearing what we want and here on update we're only going to jump if our character is grounded and we press the spacebar ok that should do it now let's see so here is the character on the platform however here in the WoW you can see an issue the array cast is hitting the player's hitbox so essentially we still have the same behavior where we can essentially jump since he's hitting the player pit hitbox so he's constantly ground what we need is to ignore the player's hitbox and test for the platforms for that we can use a layer so we click here on layer at the new layer this will be the layer for our platforms and now we go into our platform sprite and we set it to the platform's layer ok and now we can go back into our code and up here let's add a field for a layer mask so a private layer mask this is essentially what describes which layers we want to hit with our raycast we're going to set this in the editor so let's make it a serialize field let's see how it looks in the editor here we are on the player as you can see there's the layer mask we're going to set this to only hit on platforms so our layer mask will only hit platforms and now back in the code let's rename this to platforms layer mask just to make a better name and down here when we are checking if we are grounded on this function we can also pass in a and layer mask ok so that's pretty much it so now this box cast will only hit things that are on the platform layer so we can now go back and test and see if our ground code is now correctly working and yep here it is in the log as you can see it's no longer interacting with the player but rather with a platform soon here I can press space and yep there you go a normal jump and if I spam space if there you go I can no longer fly now I can only jump when I'm touching the floor right great so we now have vertical jumping working perfectly fine now that we have that let's see on with some movement whilst in the air so before that I'm going to write some quick simple movement code okay so here is the movement code I want this video to be focused on jumping so I won't go into too much detail but let me know if you would like a video focused on various types of movement so in here all I'm doing is checking for the in left and right arrow keys when no key is pressed then the rigidbody a velocity suddenly stops when I'm pressing left I put the velocity on move speed on on right on pause moves me so this makes our movement very snappy and controlled so let's see it in action so I can move to the left move to the right I can jump and you up there you go I have full control over movement okay now let's add our animations to make this song look much better okay so here is the set animations code we just check if we are grounded if we are grounded and the velocity is zero then we play the idle animation if we are ground and velocity is not zero then we play the movement animation and if we are not grounded then we play the jump animation so here they are movement left move rides as you can see the animations and jump and yep there you go everything looks right okay great so with all that working now with regards to the jump we can do several things the way that it's currently implemented we have full control lost in me there so in here I can jump it right then midair stop and come back this is one way to do it however now let's say in your design you want the player to have no control whilst in midair so let's go to the cone here on the movement code we're setting the velocity once the key is held down so we need to do is make sure that this code only runs when the character is grounded so in here in handling the movement to assembly do if is grounded then we handle movement if it is not grounded then we do not handle movement okay let's see okay we are moving now I jump any of there you go I cannot change my direction one time in the middle of the air so I can jump to the right now I pressing left and doesn't work it only works when I fell down so this is one possibility again all this depends on your design now let's check out another possible design so let's say we want to have some Cutrone well in midair but not example like on the form so let's first go back to the code where we had full control okay here we are and I have absolute full control once the character is in midair okay and now in our handle movement code we're going to do some different things in here for example when we are not pressing any Keys when we are grounded it is grounded then we're going to do exactly this we're going to completely stop but when we are not grounded we're going to leave the velocity as it is so if we don't let go of the keys he keeps going on the same direction now when pressing left if we are grounded then we change the velocity exactly as previously however when not grounded we're going to modify the velocity a bit to the left so we modify the velocity we don't change the Y and we change the X here since we are running this on every frame we need to multiply by time.deltatime so essentially when we are not grounded we are constantly pushing the velocity to the left side now let's add also a variable to check our midair control so it's low to mid air control and then we can play around with this value and then let's make sure it is always within valid ranges okay so we shift the velocity to the left side by a certain amount then we make sure that our rigidbody velocity X stays within moves speed and pause move speed and we don't let go of the velocity of Y so all this essentially means that we slow down while in midair so let's see if this works okay here we are now I jump to the right and then I'm gonna try to stop my jump jump and try to stop when II up there you go I had some control as you can see if I go and just let go he goes on the way there if I get when I stop yup there we go I have some control in me there now we can increase this amount but yep that's exactly what we want now let's apply it to the other side okay let's test here we are jump to the right and yep I can control it slightly and jump to the left and I can also control it slightly so I can for example jump then I see I'm going to overshoot it and I can try to cancel it again the valleys are easy to change so if we want more we can change it so here instead of minute control like that let's put three so I go I jump and yep there you go I can almost change direction fully whilst in midair so I jump and I can fall exactly on the same point jump in there and come back and I found out okay great so as you can see we have three possible rule sets we can have full control while in midair we can have no control or some control whichever you choose will depend on the design for your game now let's see one final problem that we have first let's set another platform to the side and now let's revert back to being able to move in midair okay so I have separated all the behaviors in three functions so you can use which one best suits your game so here we have the phone midair control send me their control and know me their control so now let's use the format error control and now let's test how things work with this second platform okay there's the second platform I can go into it and yep there you go I can jump on top okay everything seems nice however if I jump at an angle straight to it there go the character is now stuck in me there that is because I am holding down the right key so he's constantly trying to move to the side which stops his phone so he found let go of the right key there you go he falls and works from so the issue in here is because of friction so if I'm pushing to the right and is causing freshing then that friction is keeping him whilst on midair so for that we can pause our scene here on our rigid body we have a place where we can add a physics material so we can create one let's go in here create a new physics material and we're going to call this no friction and here on we need to do is set our friction to zero drag it onto our rigidbody okay and now let's test here we aren't if I jump at an angle yep there you go he hugged the wall and kept moving up and then fall down so as you can see he no longer get stuck if we hit the wall from the side so there you have it who created a simple jump using the Unity physics system using this as a base we can now create any number of platforming games we can easily do in level design by creating multiple platforms and managing the player jump height as always you can download the project fountain utilities from unity cosmic comm if you liked the video subscribe the channel for more unity tutorials post any questions you have in the comments and I'll do to answer them alright see you next time
