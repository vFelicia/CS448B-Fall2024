With timestamps:

00:00 - hello and welcome i'm your code monkey
00:02 - and here let's learn how to make one
00:03 - feature that is relatively easy to do
00:05 - and it will always help make your game a
00:07 - bit better we want to be able to save a
00:09 - screenshot along with a save file and
00:11 - that screenshot can really be any image
00:13 - you want so it can be literally what the
00:15 - player sees at the time of saving or
00:16 - perhaps on an rpg game it's an image of
00:19 - your character showing all the equipment
00:20 - and stats or maybe in a city builder
00:22 - game it's an image of the entire city so
00:24 - it can be anything you want the main
00:26 - goal is that the image is included in
00:28 - the save file so you have just one
00:29 - single file containing both the game
00:31 - data and a nice screenshot okay so let's
00:33 - see how to do it if you prefer a more
00:35 - guided path with step-by-step lectures
00:38 - then check out my complete courses learn
00:40 - how to make a builder defender game
00:41 - using c-sharp just like i make my own
00:43 - steam games or learn how to make games
00:46 - internally using visual scripting or
00:48 - learn all about unity with the ultimate
00:50 - overview course which contains over 13
00:52 - lectures each covering a different tool
00:54 - or feature of the engine to help you
00:55 - make better games faster i'm always
00:57 - available in the courses q a section
00:59 - answering your questions every single
01:00 - day so check out all the courses with
01:02 - the link in the description okay now
01:04 - let's see how to save an image alongside
01:06 - our save file now as an example i've got
01:08 - a demo scene here so i've got a simple
01:10 - character and i can equip some items in
01:12 - order to customize my character now for
01:14 - example i like this character and i hit
01:16 - on save
01:17 - and now i can stop playing
01:19 - and if i try to play again here's the
01:21 - default character and if i click on load
01:23 - yep unload my previous character so i've
01:26 - got a very basic save and load system
01:27 - fully working this system is pretty easy
01:30 - but if you want to know how i did it i
01:31 - actually covered it in detail in another
01:33 - video i'm saving the game data using
01:35 - json and some saved objects of it pretty
01:38 - simple so in this very simple demo i
01:40 - just have to save data saving the hat
01:41 - the armor and the weapon then i just set
01:44 - up all of the fields on the save data
01:45 - and finally use the json utility in
01:47 - order to convert that object into json
01:49 - then on load it's the same thing just
01:51 - read all the text in order to read the
01:53 - json convert it back into a saved data
01:54 - and actually unload the objects here is
01:57 - all data stored in my save file as you
01:58 - can see very simple again go watch that
02:00 - video if you want to learn how it works
02:02 - in more detail
02:03 - and then the next thing we need in order
02:05 - to build this feature is learning how to
02:06 - take a screenshot and for that topic i
02:08 - also covered it in another video quite a
02:10 - long time ago
02:11 - however as i was preparing for this
02:13 - video i realized that actually that old
02:15 - video only works on the built-in render
02:16 - pipeline and does not actually work on
02:18 - the universal random pipeline which is
02:19 - what i'm using here
02:21 - so there's just one tiny difference
02:23 - so most of the things in that video was
02:25 - still accurate so essentially you just
02:26 - set the target texture you create a
02:28 - temporary render texture
02:29 - and the main difference is in that one
02:31 - when using the built-in render pipeline
02:33 - you've got a built-in function called on
02:35 - post render whereas when using the srp
02:37 - the scriptable render pipeline so urp
02:40 - and agrp it works slightly different so
02:42 - in this one instead of that function you
02:43 - really just add another callback onto
02:45 - this action then logic is pretty much
02:47 - exactly the same so you get the render
02:48 - texture you do the render results called
02:51 - read pixels to read it into a texture
02:53 - and then you can simply save it so just
02:56 - take that texture and code it to png and
02:58 - right on the bytes again go watch that
03:00 - video if you want to learn about all of
03:01 - this in detail like i said there's the
03:03 - only difference is just this one
03:04 - everything else is still exactly the
03:06 - same
03:06 - so here in this demo i've pretty much
03:08 - got just those two things working so
03:10 - i've got the save like you saw and then
03:11 - over here the image is also taking a
03:13 - screenshot so if i save this one there
03:15 - you go that screenshot updates so if i
03:16 - change it yep it updates and here in my
03:18 - project files you can see i've got the
03:20 - save file so containing all the json
03:22 - saved data and i've got my camera
03:23 - screenshot so everything is working
03:25 - except we've got it in two separate
03:27 - files now what we need is to combine
03:29 - both of them into a single file
03:31 - okay so let's learn how to do that let's
03:33 - go into my script and down here i've got
03:35 - my simple save function so this one gets
03:37 - the save data json so that's what i saw
03:39 - previously
03:41 - so it creates the save that object and
03:42 - converts it into json so over here we've
03:44 - got a nice string and then take the
03:46 - screenshot and over here i've got the
03:48 - bytes and the screenshot texture now the
03:50 - way we're going to compose both these
03:52 - separate things so this one is a string
03:53 - and this one is a texture
03:55 - we can save both of them into a single
03:57 - file by simply working with bytes so for
03:59 - example over here we've got json this is
04:02 - a string so we need to convert a string
04:04 - into bytes
04:05 - and for that we can use the encoding so
04:07 - that one is actually let's set it using
04:10 - system.txt
04:12 - and with that using now we can access
04:14 - the encoding namespace
04:17 - then over here we can choose some
04:18 - encoding so let's go with just normal
04:20 - unicode
04:21 - and then we can call getbytes
04:24 - so this one takes essentially a string
04:26 - and returns an array of bytes
04:32 - alright so that's it so we are
04:33 - converting this string into an array of
04:35 - bytes now down here i've got my take
04:37 - screenshot now this one is working with
04:39 - the delegate just in case you don't know
04:41 - about delegates i've also made a video
04:42 - covering how that works the reason why i
04:44 - need the delegate here is because
04:46 - essentially you gotta wait for the
04:47 - camera to actually render the entire
04:49 - frame before we can actually take the
04:50 - screenshot so it's using a delegate just
04:53 - because this code is going to be run
04:54 - slightly after this one
04:56 - so we've got the json byte array okay
04:58 - then we take our nice screenshot then
05:00 - over here we've got the screenshot
05:02 - texture and when we encode it into png
05:04 - we already get a byte array so then we
05:07 - can simply append this byte array onto
05:09 - the json byte array let's actually just
05:12 - rename this to the screenshot byte array
05:14 - okay
05:15 - and instead of saving it directly like
05:17 - this
05:18 - let's append both of them so we can
05:20 - manually create a new array with the
05:22 - length of both of these or we can just
05:24 - do it super simple make a new list
05:32 - okay so i just create the new byte list
05:34 - based on the json byte array and then
05:36 - simply add the screenshot bytes so with
05:38 - this we can do excel the same thing we
05:40 - were doing here
05:41 - so instead of the camera screenshot
05:43 - let's say my save file dot something by
05:47 - the way you can use whatever extension
05:48 - you want that's around just text doesn't
05:50 - matter for anything so let's call it
05:52 - byte save
05:54 - and we're going to add the white list
05:56 - this one requires an array so just
05:58 - convert the list into an array okay so
06:00 - that's really it let's test
06:02 - so here i am let's build up something
06:04 - and then i hit on save by the way if you
06:06 - find the video helpful please hit the
06:08 - like button it's a tiny thing but it
06:10 - really does help thanks and yep here is
06:12 - the save phone and if we check the found
06:14 - properties we can see yep over here the
06:16 - screenshot 345 144 then the game data is
06:19 - only 30 bytes and then this one combines
06:21 - both them another reason why it's more
06:23 - than 30 it's actually 60 more that's
06:24 - around just to do an encoding but yep we
06:27 - can indeed confirm that this one does
06:28 - contain both this data and this data all
06:31 - right so far so good
06:33 - okay so we have our files saved with
06:34 - game data along with the screenshot now
06:36 - of course the next question is how do we
06:38 - unload it now down here on the unload
06:40 - function over here i've got the logic
06:42 - for unloading just based on the json
06:43 - game data
06:45 - so since that one is just text i'm using
06:47 - found.read on text now of course since
06:49 - we're working with bytes we can do the
06:51 - same thing so read all bytes instead of
06:53 - text
06:58 - so we can do this and essentially we
07:00 - will load the byte array so this is the
07:02 - entire byte array containing both the
07:04 - json game data and the screenshot and of
07:06 - course here comes the really important
07:08 - question how do we know when the json
07:11 - bytes end and when the image begins we
07:13 - need to know that in order to know which
07:14 - one of these bytes are meant to be part
07:16 - of the string and which ones are meant
07:18 - to be part of an image we need to know
07:20 - though since those two types are two
07:22 - component different types so actually
07:24 - just like this the way we did it doesn't
07:25 - actually work since just by looking at
07:27 - this file we cannot tell when the json
07:29 - begins and ends so that means that we
07:31 - need to make some sort of header where
07:33 - we can store the number of bytes for
07:35 - each section so for that let's go up
07:38 - here make a proper class to hold all of
07:40 - that data
07:43 - and let's make a function that receives
07:44 - both the json and a texture
07:55 - okay so in this a function we receive
07:57 - the json and the screenshot we convert
07:59 - them into bytes make the byte array and
08:00 - then save it okay so same thing we were
08:02 - doing previously
08:04 - now here we could just append onto the
08:06 - beginning of the file we could append
08:07 - the number of bytes that the json byte
08:09 - array has
08:10 - so that would be one way but let's make
08:12 - it a bit more adaptable and define a
08:14 - proper class for the header that way we
08:16 - can later on add some more data to the
08:18 - header if we need to
08:22 - so i defined the header that just
08:23 - contains the json byte size so now here
08:26 - let's create the header
08:34 - okay so i construct the header we're
08:36 - saving the json byte size so the json
08:38 - vital rate dot length then we convert
08:40 - that editor object into json and then we
08:43 - convert the json string into a byte
08:45 - array so then finally here we've got our
08:47 - final invite list composed of these
08:49 - three elements
08:50 - and all we need to know in order to be
08:52 - able to load these three pieces all we
08:54 - need to know is the size of the header
08:56 - so for that we can make the first two
08:58 - bytes of our save file be special so we
09:01 - can say that those two bytes contain the
09:02 - entire size of the header and the reason
09:05 - why i'm saying two bytes is because with
09:06 - two bytes you can save an unsigned short
09:08 - so a u short
09:12 - so a u short or an unsigned short
09:15 - this one can store any value between 0
09:17 - and 65 000 so that means that our header
09:20 - can be between 0 and 65 kilobytes that's
09:23 - more than big enough for any header you
09:25 - can think of then we just need to save
09:26 - this so we need to convert our u short
09:28 - into two bytes
09:30 - so we can do that with bit converter and
09:32 - we can use the get bytes and pass in our
09:35 - header size u short
09:38 - okay so with all this we have our final
09:40 - byte list
09:41 - so the first two bytes will be a u short
09:43 - containing our header size once we know
09:46 - that size then we can load the entire
09:47 - header json and then on the header json
09:50 - we've got the json byte size so that
09:52 - means we can load the json bytes
09:54 - and then finally the remainder will be
09:56 - the screenshot byte array alright great
09:58 - so everything is working
10:00 - now we just need to make a load function
10:02 - to do essentially the reverse of all
10:03 - this
10:08 - okay so we do find out read on bytes in
10:10 - order to load our entire byte array now
10:12 - the first thing we need is to know the
10:14 - size of the header so once again we can
10:16 - use the bit converter and convert this
10:18 - one so a u short is the same thing as a
10:20 - uin16
10:22 - this one takes an array of bytes which
10:24 - again remember it's the first two bytes
10:26 - so let's create the new byte array
10:28 - with the byte array on index 0 and on
10:31 - index 1.
10:34 - okay so with this we have our header
10:36 - size now we can load the actual header
10:48 - okay so here it is first of all i just
10:50 - convert the byte array into a byte and
10:51 - let's just because it's easier to work
10:52 - with less then for the header size we do
10:55 - the bit converter and we get the under
10:56 - size then we go into the button list we
10:58 - get range starting from index 2 so the 2
11:01 - bytes for the header size and then going
11:03 - through the entirety of the header size
11:05 - so we do that and we get the header byte
11:07 - list then we just do encoding unicode
11:09 - and we get string and we get our header
11:11 - byte list and convert it into json so
11:14 - with this we have the header json then
11:16 - we just need to make the header object
11:19 - okay so we've got our header object now
11:22 - with this inside the header object we've
11:24 - got the json byte size so that's the
11:25 - next thing
11:33 - okay then we do the same thing so we go
11:34 - into the original button list we get
11:36 - range starting on index two pause the
11:39 - header size and then going for the count
11:41 - of header.json bytesize so with that we
11:43 - get the json byte list then again doing
11:45 - the same thing unicode string and
11:47 - convert from json and the final thing is
11:49 - just the image
11:59 - so once again we complete the start and
12:01 - the end indexes then we get to the
12:03 - button list we get the array so we've
12:04 - got the screenshot button list then we
12:06 - create a new texture to the object and
12:08 - convert image in order to convert this
12:10 - white list into an actual image alright
12:12 - so that's pretty much it now let's just
12:14 - modify our function to get this data out
12:16 - of here
12:22 - all right so i just made two out
12:23 - parameters
12:24 - and then down here on the unload
12:26 - function
12:27 - you can just comment out all this
12:30 - and said just call load
12:32 - and then pass in the out save data save
12:35 - data
12:36 - in this case we don't need the texture
12:37 - but still we need to get it
12:42 - okay so we've got save data then we'll
12:44 - load it just as usual
12:45 - and then the final thing is just on the
12:47 - ui so over here is my ui with the
12:49 - function to save the image
12:54 - all right so here just called the exact
12:56 - same thing got the screenshot texture 2d
12:58 - and then just go into the raw image and
13:00 - set it as the visual alright so let's
13:02 - see if finally all of this worked okay
13:04 - so here i am with my default character
13:06 - and if i hit unload yep it actually
13:08 - loaded my object and now if i try saving
13:11 - so let's save this one just like this
13:12 - hit on save and there you go you can see
13:14 - that the screenshot updated immediately
13:16 - and now if i stop playing and i play
13:18 - again
13:19 - now i go again i got the default hit on
13:21 - load and there you go it loaded down
13:23 - all right awesome so we have everything
13:25 - fully working so we've got both the save
13:27 - data as well as the screenshot all in
13:29 - the exact same save file so here in the
13:31 - project files i can just move those to
13:33 - make sure that those aren't being used
13:36 - so the old save file game data and the
13:38 - old camera screenshot just move them to
13:40 - a different location just make sure that
13:41 - we're only using the single save file
13:44 - and yep there it is everything works
13:45 - here's the default load and there you go
13:47 - we got down now let's save this one
13:49 - there you go save the screenshot updated
13:51 - and load and it's down and i'll play
13:53 - again
13:54 - there's the default hit on load and yep
13:56 - there it is all right awesome so with
13:58 - this as you can see we've got all the
14:00 - basics working
14:01 - and all of this code is extremely
14:03 - adaptable all the save data for this
14:05 - demo was just on this class so you could
14:07 - easily add any info you want onto this
14:09 - last and the whole system works same
14:11 - thing for the header if you want to add
14:12 - a bunch more data into the header for
14:15 - example maybe you wanted to add when the
14:16 - file was saved or something like that
14:18 - you could add over here on the header
14:19 - and everything would work and same thing
14:21 - for the image no matter what image you
14:23 - take it does work so you see how this
14:25 - system is extremely adaptable to fit
14:27 - whatever examples your game requires for
14:30 - instance instead of saving the whole
14:31 - screen you can do it a bit more focused
14:33 - so appear in the code for taking the
14:35 - screenshot as you can see here we're
14:37 - using the camera main but you could
14:38 - easily swap this out for a different
14:40 - camera so here for example i can
14:42 - duplicate the main camera just make one
14:44 - slightly different
14:57 - so here i just made a second screenshot
14:59 - camera and position it differently over
15:01 - here we can add a film for that new
15:03 - camera
15:06 - and then we just use this one instead of
15:07 - the references to camera domain
15:10 - and then just assign this camera okay so
15:12 - now i can equip my player and hit on
15:14 - save and there you go there's my new
15:16 - screenshot so as you can see the
15:17 - screenshot doesn't have to be just
15:18 - exactly what you see it can be anything
15:20 - from any camera
15:21 - so on the screenshot maybe you could add
15:23 - some stats some things a completely
15:25 - different view of the world or anything
15:27 - you want so just remember that it can be
15:29 - anything doesn't have to be just the
15:30 - main camera and again if we stop and
15:32 - play again here it is my default player
15:35 - and over there the screenshot from the
15:36 - last save file and hit on load and yep
15:38 - everything loads all right awesome so as
15:41 - you can see this system is super
15:43 - adaptable super versatile you can make
15:45 - just a normal screenshot or you can make
15:47 - a separate camera saying something
15:49 - different or maybe on a city builder it
15:51 - could be an overhead view of the whole
15:52 - city so as you can see you can do
15:54 - anything you want with it and while
15:55 - learning how to do this you also learn
15:57 - how to save multiple pieces of data in a
15:58 - single file so now you can go ahead and
16:01 - use that knowledge in order to save some
16:02 - more complex data in your own save files
16:05 - again if you're looking for a more
16:07 - guided path with step-by-step lectures
16:08 - then check out my complete courses
16:10 - alright hope that's useful check out
16:12 - these videos to learn some more thanks
16:14 - to these awesome patreon supporters for
16:16 - making these videos possible thank you
16:18 - for watching and i'll see you next time
16:23 - [Music]
16:27 - you

Cleaned transcript:

hello and welcome i'm your code monkey and here let's learn how to make one feature that is relatively easy to do and it will always help make your game a bit better we want to be able to save a screenshot along with a save file and that screenshot can really be any image you want so it can be literally what the player sees at the time of saving or perhaps on an rpg game it's an image of your character showing all the equipment and stats or maybe in a city builder game it's an image of the entire city so it can be anything you want the main goal is that the image is included in the save file so you have just one single file containing both the game data and a nice screenshot okay so let's see how to do it if you prefer a more guided path with stepbystep lectures then check out my complete courses learn how to make a builder defender game using csharp just like i make my own steam games or learn how to make games internally using visual scripting or learn all about unity with the ultimate overview course which contains over 13 lectures each covering a different tool or feature of the engine to help you make better games faster i'm always available in the courses q a section answering your questions every single day so check out all the courses with the link in the description okay now let's see how to save an image alongside our save file now as an example i've got a demo scene here so i've got a simple character and i can equip some items in order to customize my character now for example i like this character and i hit on save and now i can stop playing and if i try to play again here's the default character and if i click on load yep unload my previous character so i've got a very basic save and load system fully working this system is pretty easy but if you want to know how i did it i actually covered it in detail in another video i'm saving the game data using json and some saved objects of it pretty simple so in this very simple demo i just have to save data saving the hat the armor and the weapon then i just set up all of the fields on the save data and finally use the json utility in order to convert that object into json then on load it's the same thing just read all the text in order to read the json convert it back into a saved data and actually unload the objects here is all data stored in my save file as you can see very simple again go watch that video if you want to learn how it works in more detail and then the next thing we need in order to build this feature is learning how to take a screenshot and for that topic i also covered it in another video quite a long time ago however as i was preparing for this video i realized that actually that old video only works on the builtin render pipeline and does not actually work on the universal random pipeline which is what i'm using here so there's just one tiny difference so most of the things in that video was still accurate so essentially you just set the target texture you create a temporary render texture and the main difference is in that one when using the builtin render pipeline you've got a builtin function called on post render whereas when using the srp the scriptable render pipeline so urp and agrp it works slightly different so in this one instead of that function you really just add another callback onto this action then logic is pretty much exactly the same so you get the render texture you do the render results called read pixels to read it into a texture and then you can simply save it so just take that texture and code it to png and right on the bytes again go watch that video if you want to learn about all of this in detail like i said there's the only difference is just this one everything else is still exactly the same so here in this demo i've pretty much got just those two things working so i've got the save like you saw and then over here the image is also taking a screenshot so if i save this one there you go that screenshot updates so if i change it yep it updates and here in my project files you can see i've got the save file so containing all the json saved data and i've got my camera screenshot so everything is working except we've got it in two separate files now what we need is to combine both of them into a single file okay so let's learn how to do that let's go into my script and down here i've got my simple save function so this one gets the save data json so that's what i saw previously so it creates the save that object and converts it into json so over here we've got a nice string and then take the screenshot and over here i've got the bytes and the screenshot texture now the way we're going to compose both these separate things so this one is a string and this one is a texture we can save both of them into a single file by simply working with bytes so for example over here we've got json this is a string so we need to convert a string into bytes and for that we can use the encoding so that one is actually let's set it using system.txt and with that using now we can access the encoding namespace then over here we can choose some encoding so let's go with just normal unicode and then we can call getbytes so this one takes essentially a string and returns an array of bytes alright so that's it so we are converting this string into an array of bytes now down here i've got my take screenshot now this one is working with the delegate just in case you don't know about delegates i've also made a video covering how that works the reason why i need the delegate here is because essentially you gotta wait for the camera to actually render the entire frame before we can actually take the screenshot so it's using a delegate just because this code is going to be run slightly after this one so we've got the json byte array okay then we take our nice screenshot then over here we've got the screenshot texture and when we encode it into png we already get a byte array so then we can simply append this byte array onto the json byte array let's actually just rename this to the screenshot byte array okay and instead of saving it directly like this let's append both of them so we can manually create a new array with the length of both of these or we can just do it super simple make a new list okay so i just create the new byte list based on the json byte array and then simply add the screenshot bytes so with this we can do excel the same thing we were doing here so instead of the camera screenshot let's say my save file dot something by the way you can use whatever extension you want that's around just text doesn't matter for anything so let's call it byte save and we're going to add the white list this one requires an array so just convert the list into an array okay so that's really it let's test so here i am let's build up something and then i hit on save by the way if you find the video helpful please hit the like button it's a tiny thing but it really does help thanks and yep here is the save phone and if we check the found properties we can see yep over here the screenshot 345 144 then the game data is only 30 bytes and then this one combines both them another reason why it's more than 30 it's actually 60 more that's around just to do an encoding but yep we can indeed confirm that this one does contain both this data and this data all right so far so good okay so we have our files saved with game data along with the screenshot now of course the next question is how do we unload it now down here on the unload function over here i've got the logic for unloading just based on the json game data so since that one is just text i'm using found.read on text now of course since we're working with bytes we can do the same thing so read all bytes instead of text so we can do this and essentially we will load the byte array so this is the entire byte array containing both the json game data and the screenshot and of course here comes the really important question how do we know when the json bytes end and when the image begins we need to know that in order to know which one of these bytes are meant to be part of the string and which ones are meant to be part of an image we need to know though since those two types are two component different types so actually just like this the way we did it doesn't actually work since just by looking at this file we cannot tell when the json begins and ends so that means that we need to make some sort of header where we can store the number of bytes for each section so for that let's go up here make a proper class to hold all of that data and let's make a function that receives both the json and a texture okay so in this a function we receive the json and the screenshot we convert them into bytes make the byte array and then save it okay so same thing we were doing previously now here we could just append onto the beginning of the file we could append the number of bytes that the json byte array has so that would be one way but let's make it a bit more adaptable and define a proper class for the header that way we can later on add some more data to the header if we need to so i defined the header that just contains the json byte size so now here let's create the header okay so i construct the header we're saving the json byte size so the json vital rate dot length then we convert that editor object into json and then we convert the json string into a byte array so then finally here we've got our final invite list composed of these three elements and all we need to know in order to be able to load these three pieces all we need to know is the size of the header so for that we can make the first two bytes of our save file be special so we can say that those two bytes contain the entire size of the header and the reason why i'm saying two bytes is because with two bytes you can save an unsigned short so a u short so a u short or an unsigned short this one can store any value between 0 and 65 000 so that means that our header can be between 0 and 65 kilobytes that's more than big enough for any header you can think of then we just need to save this so we need to convert our u short into two bytes so we can do that with bit converter and we can use the get bytes and pass in our header size u short okay so with all this we have our final byte list so the first two bytes will be a u short containing our header size once we know that size then we can load the entire header json and then on the header json we've got the json byte size so that means we can load the json bytes and then finally the remainder will be the screenshot byte array alright great so everything is working now we just need to make a load function to do essentially the reverse of all this okay so we do find out read on bytes in order to load our entire byte array now the first thing we need is to know the size of the header so once again we can use the bit converter and convert this one so a u short is the same thing as a uin16 this one takes an array of bytes which again remember it's the first two bytes so let's create the new byte array with the byte array on index 0 and on index 1. okay so with this we have our header size now we can load the actual header okay so here it is first of all i just convert the byte array into a byte and let's just because it's easier to work with less then for the header size we do the bit converter and we get the under size then we go into the button list we get range starting from index 2 so the 2 bytes for the header size and then going through the entirety of the header size so we do that and we get the header byte list then we just do encoding unicode and we get string and we get our header byte list and convert it into json so with this we have the header json then we just need to make the header object okay so we've got our header object now with this inside the header object we've got the json byte size so that's the next thing okay then we do the same thing so we go into the original button list we get range starting on index two pause the header size and then going for the count of header.json bytesize so with that we get the json byte list then again doing the same thing unicode string and convert from json and the final thing is just the image so once again we complete the start and the end indexes then we get to the button list we get the array so we've got the screenshot button list then we create a new texture to the object and convert image in order to convert this white list into an actual image alright so that's pretty much it now let's just modify our function to get this data out of here all right so i just made two out parameters and then down here on the unload function you can just comment out all this and said just call load and then pass in the out save data save data in this case we don't need the texture but still we need to get it okay so we've got save data then we'll load it just as usual and then the final thing is just on the ui so over here is my ui with the function to save the image all right so here just called the exact same thing got the screenshot texture 2d and then just go into the raw image and set it as the visual alright so let's see if finally all of this worked okay so here i am with my default character and if i hit unload yep it actually loaded my object and now if i try saving so let's save this one just like this hit on save and there you go you can see that the screenshot updated immediately and now if i stop playing and i play again now i go again i got the default hit on load and there you go it loaded down all right awesome so we have everything fully working so we've got both the save data as well as the screenshot all in the exact same save file so here in the project files i can just move those to make sure that those aren't being used so the old save file game data and the old camera screenshot just move them to a different location just make sure that we're only using the single save file and yep there it is everything works here's the default load and there you go we got down now let's save this one there you go save the screenshot updated and load and it's down and i'll play again there's the default hit on load and yep there it is all right awesome so with this as you can see we've got all the basics working and all of this code is extremely adaptable all the save data for this demo was just on this class so you could easily add any info you want onto this last and the whole system works same thing for the header if you want to add a bunch more data into the header for example maybe you wanted to add when the file was saved or something like that you could add over here on the header and everything would work and same thing for the image no matter what image you take it does work so you see how this system is extremely adaptable to fit whatever examples your game requires for instance instead of saving the whole screen you can do it a bit more focused so appear in the code for taking the screenshot as you can see here we're using the camera main but you could easily swap this out for a different camera so here for example i can duplicate the main camera just make one slightly different so here i just made a second screenshot camera and position it differently over here we can add a film for that new camera and then we just use this one instead of the references to camera domain and then just assign this camera okay so now i can equip my player and hit on save and there you go there's my new screenshot so as you can see the screenshot doesn't have to be just exactly what you see it can be anything from any camera so on the screenshot maybe you could add some stats some things a completely different view of the world or anything you want so just remember that it can be anything doesn't have to be just the main camera and again if we stop and play again here it is my default player and over there the screenshot from the last save file and hit on load and yep everything loads all right awesome so as you can see this system is super adaptable super versatile you can make just a normal screenshot or you can make a separate camera saying something different or maybe on a city builder it could be an overhead view of the whole city so as you can see you can do anything you want with it and while learning how to do this you also learn how to save multiple pieces of data in a single file so now you can go ahead and use that knowledge in order to save some more complex data in your own save files again if you're looking for a more guided path with stepbystep lectures then check out my complete courses alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time you
