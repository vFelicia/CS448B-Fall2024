With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - min this series were making snake in
00:03 - unity in this video we're going to spawn
00:05 - some food and have our snake eat it
00:07 - let's begin
00:11 - so this is our scene so far we have our
00:13 - snake in here and we can move it with
00:15 - the keyboard it from Lausanne movement
00:17 - rules such as you cannot directly turn
00:19 - back so if I'm going to right I cannot
00:21 - go straight left I have to go up and
00:23 - then I can go to the left so now that we
00:26 - have the movement working let's add some
00:27 - food for our snake to eat essentially
00:30 - the food won't be spawned somewhere
00:31 - random on the grid so let's create a
00:33 - class to handle our 11 grid so in you
00:36 - see sheriff script and name it our 11
00:39 - great this will be a simple script so
00:42 - let's remove monobehaviour
00:45 - and now in here we need to store a
00:47 - position for where the food is spawned
00:49 - so we can simply do a vector to int for
00:53 - our food word position now let's make a
00:58 - function to actually spawn our food so a
01:00 - private roit spawn food now in here we
01:04 - won't set the food grade position so in
01:07 - order to randomize we need to know the
01:08 - total size of our level so let's create
01:10 - a constructor for the level grid and in
01:15 - here we're going to receive an end for
01:17 - the width and an end for the height
01:18 - let's sort in fields ok so now we can go
01:25 - here and generate a random grid position
01:28 - so we do our food grid position equals a
01:31 - new vector to int and inside we get a
01:33 - random range between 0 and width and
01:37 - then a random dot range between 0 and
01:41 - the height ok so we now have the
01:43 - component random position for our food
01:45 - so that we have that let's add a visual
01:51 - so we are creating a new game object
01:54 - named food with a sprite random
01:56 - component so now for the sprite for our
02:01 - food let's go into the game assets class
02:03 - and here let's add a new field for the
02:06 - food sprite and back into our level grid
02:09 - let's use that sprite so we now have our
02:13 - food game object using the correct
02:14 - sprite tone we need this to locate an
02:16 - incorrect position so I take the game
02:18 - object our transform and set the
02:20 - position
02:23 - all right so this should be working we
02:25 - have our spawn food function which
02:27 - generates a random food credit position
02:30 - and then Senshi AIT's a new game object
02:32 - and gives it our transform position and
02:34 - the correct sprite so now obviously
02:36 - let's just spawn food as soon as we
02:38 - start our level and for testing let's
02:41 - try spawning a bunch of food just to
02:43 - make sure our food word position is
02:44 - correctly randomizing in order to do
02:46 - that let's do using code monkey so then
02:49 - I can go down here and use a function
02:52 - periodic the action we won't fire won't
02:56 - be the spawn food and let's call it once
02:59 - per second all right so this should be
03:01 - great just to test to make sure our
03:03 - random is working correctly and we are
03:05 - in sanh shading a new food now obviously
03:07 - the one thing we need is to actually
03:08 - create our level red object-- so for
03:11 - that we're going to go into game handler
03:12 - again this is the script that is simply
03:15 - on a starting object so we can use this
03:18 - to be our code entry point so in here we
03:20 - create let's store our level grid now
03:26 - we're going to instantiate it in here
03:27 - and for the width and height we and I've
03:29 - defined as 20 and also in our scene we
03:32 - have to go into the game assets and drag
03:34 - our food sprite and yep just like that
03:37 - okay let's test yep there's one piece of
03:40 - food and another one there I'll run
03:41 - there another room there and yep they
03:43 - are being correctly randomized all right
03:45 - so now that we can spawn food the next
03:48 - step is to make the snake eat it so back
03:50 - into our level grid class so let's make
03:53 - a function that won't be triggered when
03:54 - the snake moves now we're going to
03:57 - receive a vector to end for the snake
04:00 - we're in position so our snake won't
04:03 - trigger this function after it moves so
04:06 - when the snake moves we want to see if
04:07 - the snake moved on top of the food where
04:10 - its position if that happens we want to
04:14 - destroy the current game object so let's
04:16 - store this as a member variable so we
04:22 - destroy the current game object and then
04:26 - we call spawn food again and just for
04:29 - testing let's do a pop-up to make sure
04:32 - we see that the snake ate two
04:35 - and over here we no longer need this
04:38 - testing all right so when we sin she ate
04:40 - our level grid we are calling our spawn
04:42 - food which generates a food where it
04:44 - position and creates the game object and
04:46 - then we have a snake moved function
04:48 - which is called by our snake and it
04:50 - sends the snake red position and we
04:52 - simply check if the snake is in the
04:54 - exact same position as the food if so we
04:56 - destroy the food game object and we
04:58 - spawn another piece of food and just say
05:00 - the bug to say that the code executes so
05:04 - on we need to make sure all this works
05:05 - is to go into our snake class and make
05:07 - sure we trigger this function so here on
05:09 - the snake class let's go to where we are
05:12 - handling the in grid movement so here we
05:15 - are we change it we modify the transform
05:17 - so in here we need to have a reference
05:20 - to our level grid object and later on
05:22 - our level current object we are also
05:24 - going to need a reference to our snake
05:25 - so in order to do that we need to ask
05:27 - ourselves how are we going to handle the
05:30 - references now there are two ways we can
05:32 - do this we can add a static instance to
05:34 - the snake and the Eleven grid and call
05:37 - our functions as static or we can pass
05:40 - in references when we instantiate our
05:42 - object both approaches will work just
05:45 - the same in order to keep the code as
05:47 - simple as possible let's go with the
05:49 - second approach so in order to pass in
05:51 - our references and let's go into our
05:53 - game Hammond and here we are in sin she
05:55 - ating the 11 word and we can also add a
05:58 - feel for our snake so we now need to
06:02 - pass a reference to the 11 grid for the
06:04 - snake and a reference for the snake to
06:06 - the level grid
06:07 - so let's first passing the level where
06:09 - it to the snake by creating a simple set
06:11 - up function so here make a polaroid
06:14 - setup and in here we're going to receive
06:17 - our own local grid all right so very
06:23 - similar just make sure we pass in the
06:25 - reference to our snake and on the game
06:27 - hammer all we need to do is call the
06:29 - snake out set up function and pass in
06:31 - the autumn grit now we need to do the
06:34 - same thing for our level grid slide
06:36 - through the exact same pattern so here
06:38 - we do a public void setup and in here
06:40 - let's receive our snake
06:45 - so just like that our objects now have
06:48 - the references that they need and
06:49 - obviously on the game handler need to go
06:51 - into the level grid and call the setup
06:53 - and passing the snake reference so in
06:56 - here in our snake we can now go down
06:57 - here when we handle the word movement we
07:00 - modify our grid and then we tell the
07:03 - level grid that east snake has moved and
07:05 - we pass in our grid position so again
07:08 - our snake handles its grid movement it
07:11 - come weights the time and so on moves in
07:13 - a certain direction and ends up in a
07:14 - certain grid position after it moves it
07:17 - calls the snake moved function on our
07:19 - level grid and in this function will
07:22 - receive the snake worth position and we
07:23 - know our food word position if both of
07:25 - them match then our snake has eaten the
07:27 - food so we destroy the food game object
07:29 - and we spawn a new food object so let's
07:32 - see if all of that is working correctly
07:34 - okay so here I am and there's the food
07:36 - now I move the snake towards the food
07:39 - and yep it has ittan and another one
07:42 - spawn and another one has been eaten and
07:43 - another one there and so on so as you
07:46 - can see everything is working correctly
07:47 - all right so now that the basics seem to
07:51 - be working we have one potential issue
07:53 - in our code in here on the 11th when we
07:56 - are spawning our food we are just
07:58 - picking a completely random position now
08:01 - what that means is that we might be
08:03 - unlucky to spawn right on top of the
08:05 - snake now obviously we don't want that
08:07 - to happen so let's fix it we already
08:09 - have a reference to our snake so we can
08:12 - just easily ask the snake where it is
08:13 - when we try to spawn into a valid
08:15 - position so let's go into the snake to
08:18 - create a new function so we can return
08:20 - our grid position so if unlike the
08:22 - vectors you went and let's return the
08:25 - word position so now here on the eleven
08:30 - point let's do a cycle for making sure
08:33 - that our position is valid so do
08:36 - randomize the food word position while
08:39 - the snake that get weird position is the
08:42 - same as a food grid position so while
08:45 - the snake weird position is the same as
08:47 - the food then run this code again and
08:49 - generate the new one so in essence we're
08:51 - only going to leave this cycle when this
08:52 - position is not the same as our snake
08:55 - word position so down here we can make
08:57 - sure
08:57 - our position is valid so just like that
09:00 - our food should never spawn on top of
09:02 - our snake now the one issue we have in
09:05 - our code here is with regards to our
09:07 - spawn food we are constructing our level
09:10 - where it but only after constructing do
09:11 - we give it the snake reference so we
09:13 - cannot spawn food in here because if we
09:15 - do then our snake won't be known and it
09:17 - won't cause an error so we simply spawn
09:19 - the food on our setup instead of on our
09:21 - constructor so let's run the code and
09:23 - see if everything still works perfectly
09:25 - fine exactly as previously all right
09:28 - there's a snake I can move it around
09:29 - going towards the food and eat it and
09:32 - yep there you go
09:33 - the snake has eaten the food now I go
09:35 - into that one and I eat it and yep
09:38 - another one has been spawned and we can
09:40 - now be confident in knowing that the
09:42 - food will never be spawn right on top of
09:44 - the snake so there you have it we added
09:46 - food to our game and the ability for the
09:48 - snake to eat it in the next video we're
09:51 - going to grow our snake every time we
09:52 - eat some food as always you can download
09:54 - the project files and utilities from
09:56 - unity code monkey comm if you have any
09:58 - questions post them in the comments and
09:59 - I'll do my best to answer them subscribe
10:01 - for more videos and I'll see you next
10:02 - time

Cleaned transcript:

hello and welcome I'm your code monkey min this series were making snake in unity in this video we're going to spawn some food and have our snake eat it let's begin so this is our scene so far we have our snake in here and we can move it with the keyboard it from Lausanne movement rules such as you cannot directly turn back so if I'm going to right I cannot go straight left I have to go up and then I can go to the left so now that we have the movement working let's add some food for our snake to eat essentially the food won't be spawned somewhere random on the grid so let's create a class to handle our 11 grid so in you see sheriff script and name it our 11 great this will be a simple script so let's remove monobehaviour and now in here we need to store a position for where the food is spawned so we can simply do a vector to int for our food word position now let's make a function to actually spawn our food so a private roit spawn food now in here we won't set the food grade position so in order to randomize we need to know the total size of our level so let's create a constructor for the level grid and in here we're going to receive an end for the width and an end for the height let's sort in fields ok so now we can go here and generate a random grid position so we do our food grid position equals a new vector to int and inside we get a random range between 0 and width and then a random dot range between 0 and the height ok so we now have the component random position for our food so that we have that let's add a visual so we are creating a new game object named food with a sprite random component so now for the sprite for our food let's go into the game assets class and here let's add a new field for the food sprite and back into our level grid let's use that sprite so we now have our food game object using the correct sprite tone we need this to locate an incorrect position so I take the game object our transform and set the position all right so this should be working we have our spawn food function which generates a random food credit position and then Senshi AIT's a new game object and gives it our transform position and the correct sprite so now obviously let's just spawn food as soon as we start our level and for testing let's try spawning a bunch of food just to make sure our food word position is correctly randomizing in order to do that let's do using code monkey so then I can go down here and use a function periodic the action we won't fire won't be the spawn food and let's call it once per second all right so this should be great just to test to make sure our random is working correctly and we are in sanh shading a new food now obviously the one thing we need is to actually create our level red object so for that we're going to go into game handler again this is the script that is simply on a starting object so we can use this to be our code entry point so in here we create let's store our level grid now we're going to instantiate it in here and for the width and height we and I've defined as 20 and also in our scene we have to go into the game assets and drag our food sprite and yep just like that okay let's test yep there's one piece of food and another one there I'll run there another room there and yep they are being correctly randomized all right so now that we can spawn food the next step is to make the snake eat it so back into our level grid class so let's make a function that won't be triggered when the snake moves now we're going to receive a vector to end for the snake we're in position so our snake won't trigger this function after it moves so when the snake moves we want to see if the snake moved on top of the food where its position if that happens we want to destroy the current game object so let's store this as a member variable so we destroy the current game object and then we call spawn food again and just for testing let's do a popup to make sure we see that the snake ate two and over here we no longer need this testing all right so when we sin she ate our level grid we are calling our spawn food which generates a food where it position and creates the game object and then we have a snake moved function which is called by our snake and it sends the snake red position and we simply check if the snake is in the exact same position as the food if so we destroy the food game object and we spawn another piece of food and just say the bug to say that the code executes so on we need to make sure all this works is to go into our snake class and make sure we trigger this function so here on the snake class let's go to where we are handling the in grid movement so here we are we change it we modify the transform so in here we need to have a reference to our level grid object and later on our level current object we are also going to need a reference to our snake so in order to do that we need to ask ourselves how are we going to handle the references now there are two ways we can do this we can add a static instance to the snake and the Eleven grid and call our functions as static or we can pass in references when we instantiate our object both approaches will work just the same in order to keep the code as simple as possible let's go with the second approach so in order to pass in our references and let's go into our game Hammond and here we are in sin she ating the 11 word and we can also add a feel for our snake so we now need to pass a reference to the 11 grid for the snake and a reference for the snake to the level grid so let's first passing the level where it to the snake by creating a simple set up function so here make a polaroid setup and in here we're going to receive our own local grid all right so very similar just make sure we pass in the reference to our snake and on the game hammer all we need to do is call the snake out set up function and pass in the autumn grit now we need to do the same thing for our level grid slide through the exact same pattern so here we do a public void setup and in here let's receive our snake so just like that our objects now have the references that they need and obviously on the game handler need to go into the level grid and call the setup and passing the snake reference so in here in our snake we can now go down here when we handle the word movement we modify our grid and then we tell the level grid that east snake has moved and we pass in our grid position so again our snake handles its grid movement it come weights the time and so on moves in a certain direction and ends up in a certain grid position after it moves it calls the snake moved function on our level grid and in this function will receive the snake worth position and we know our food word position if both of them match then our snake has eaten the food so we destroy the food game object and we spawn a new food object so let's see if all of that is working correctly okay so here I am and there's the food now I move the snake towards the food and yep it has ittan and another one spawn and another one has been eaten and another one there and so on so as you can see everything is working correctly all right so now that the basics seem to be working we have one potential issue in our code in here on the 11th when we are spawning our food we are just picking a completely random position now what that means is that we might be unlucky to spawn right on top of the snake now obviously we don't want that to happen so let's fix it we already have a reference to our snake so we can just easily ask the snake where it is when we try to spawn into a valid position so let's go into the snake to create a new function so we can return our grid position so if unlike the vectors you went and let's return the word position so now here on the eleven point let's do a cycle for making sure that our position is valid so do randomize the food word position while the snake that get weird position is the same as a food grid position so while the snake weird position is the same as the food then run this code again and generate the new one so in essence we're only going to leave this cycle when this position is not the same as our snake word position so down here we can make sure our position is valid so just like that our food should never spawn on top of our snake now the one issue we have in our code here is with regards to our spawn food we are constructing our level where it but only after constructing do we give it the snake reference so we cannot spawn food in here because if we do then our snake won't be known and it won't cause an error so we simply spawn the food on our setup instead of on our constructor so let's run the code and see if everything still works perfectly fine exactly as previously all right there's a snake I can move it around going towards the food and eat it and yep there you go the snake has eaten the food now I go into that one and I eat it and yep another one has been spawned and we can now be confident in knowing that the food will never be spawn right on top of the snake so there you have it we added food to our game and the ability for the snake to eat it in the next video we're going to grow our snake every time we eat some food as always you can download the project files and utilities from unity code monkey comm if you have any questions post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time
