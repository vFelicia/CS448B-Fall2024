With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - and in this series we're going to create
00:03 - spider-man in unity 2d on this first
00:05 - video we're going to set up the basic
00:07 - movement and attacks let's begin
00:11 - all right so as a starting point I have
00:14 - some animations already set up I have
00:16 - some punch animations and some kick
00:19 - animations also the basic movement
00:22 - animations now I'm using my own custom
00:24 - animation system but you can set up the
00:25 - animations in your game using whatever
00:27 - animation system you prefer you could
00:29 - use your own custom animations or the
00:31 - Unity animation system the only
00:32 - important thing is that you expose
00:34 - certain functions to be able to trigger
00:35 - those animations so let's go into the
00:38 - code and see what functions we need to
00:40 - set up our logic alright so here's the
00:42 - base script and in here you can see all
00:44 - the various functions that we're going
00:45 - to use to set up our logic I can play
00:48 - the punch and kick animations these
00:51 - functions contain a direction and then
00:53 - some optional callbacks for when the
00:55 - animation is complete and when the
00:56 - animation actually hits I can also test
00:59 - which one is active and I can play
01:02 - either move or idle animations okay so
01:04 - with all of these functions we should be
01:06 - able to make a script to handle the
01:07 - logic for moving and attacking so let's
01:10 - go into the editor and make a new
01:12 - c-sharp script and let's name this
01:14 - spider-man let's drag it onto our
01:17 - spiderman game object which as you can
01:18 - see also contains the base script and
01:20 - this game object only contains the body
01:23 - which contains a mesh renderer to handle
01:25 - the animations and a simple shadow which
01:27 - is just a basic sprite alright so let's
01:30 - go to the code now in here let's first
01:32 - remove the start and update and instead
01:34 - make a private void away on the awake
01:37 - let's grab a reference to the base crib
01:39 - so we can access those functions so
01:41 - first let's go up here make a private
01:43 - spider-man be spider-man base and let's
01:48 - get that component in here game object I
01:51 - get component type spider-man base ok
01:54 - now to make sure that everything is
01:56 - working let's test doing a kick so to
01:59 - test that I'm going to use the function
02:01 - periodic which is part of the code
02:03 - monkey Tony's that you can grab for free
02:05 - from unity code monkey comm so I'm gonna
02:08 - go appear in the using code monkey value
02:10 - tones now the function periodic triggers
02:13 - an action every certain amount of time
02:15 - so in here I can create and in here I
02:18 - can give it an action than some time so
02:20 - the action we want to test is a kick so
02:23 - in order to do
02:24 - let's pass in a function we're going to
02:26 - go into the spider-man base and play the
02:29 - kick animation for direction let's just
02:32 - kick to the right side and for the
02:34 - comebacks and let's leave them at No
02:36 - all right so trigger that action every
02:38 - second all right so we should be able to
02:40 - see spider-man doing a kick every second
02:43 - let's see and yep there it is he's doing
02:46 - a kick every second which means our
02:48 - setup is correct and we can now use all
02:50 - the base functions to continue our
02:51 - script so let's first handle movement so
02:54 - in here let's do a private void handle
02:57 - movement and this function won't be
03:01 - called on our private void update here
03:04 - we call a no movement okay now we're
03:06 - going to set up movement using W a s and
03:08 - D so let's test for those various keys
03:11 - in order to test we do if input dot get
03:14 - key down of the key code let's say W and
03:17 - if it is we want to move up so let's go
03:20 - up here and set up some floats for the
03:22 - move on the X and a float for the move
03:25 - on the Y now if we are pressing W we
03:30 - want to move up so set the move Y to one
03:33 - app then let's do the same from the
03:34 - other keys all right so when we press EE
03:41 - we want to move on the Y on the positive
03:44 - on the S you move down on the a you move
03:46 - left and on the D you move right all
03:49 - right now let's create a vector3 using
03:51 - those floats so vector3 for the move
03:53 - there which won't be a new vector3 using
03:56 - the move X to move Y and then we
03:58 - normalize this Specter now in here let's
04:00 - do a boolean and test if we are idle and
04:04 - we are I don't if move x equals zero and
04:07 - move Y also equals 0 if both are 0 then
04:10 - we are either so in here we test if we
04:13 - are idle then we want to play the idle
04:16 - animations to go into the spider-man
04:18 - base class and play the idle animation
04:21 - if we are not idle then we want to move
04:24 - so go into the base and play the move
04:27 - animation towards the movement there ok
04:30 - so we are playing the move animation now
04:32 - let's also actually move the transform
04:34 - so for that we do transform
04:36 - and we increase our transform position
04:38 - by the movement Direction multiplied by
04:42 - time.deltatime and also multiplied by a
04:45 - speed value so we have to go up here and
04:49 - let's set up a private cons float for
04:52 - our speed and let's for that 50m
04:55 - okay so let's use that constant down
04:57 - here so increase the position by the
04:59 - movement Direction multiplied by our
05:02 - speed multiplied by time time to time
05:04 - this is so our movement is independent
05:06 - of our frame rate okay so our movement
05:09 - should be correctly working first we set
05:11 - up some floats then we assign values to
05:13 - those floats if the keys are oppressed
05:14 - we create a normalized vector three
05:17 - using those we test if we are I don't
05:19 - which happens only if both are zero if
05:22 - we are we play the idle animation if not
05:24 - we play the move animation and we move
05:26 - towards the move to your position
05:28 - so in our function we actually have a
05:29 - tiny issue so instead of get keyed down
05:31 - it should USB get clean because if
05:33 - you're using get key down it will only
05:35 - trigger on that particular frame and we
05:37 - want this to trigger every frame all
05:39 - right so it now should be working okay
05:41 - there's spider-man he's idle and if I
05:43 - move yup there you go he's moving around
05:45 - he's playing the animations and moving
05:47 - the transform and if I stop yep he stops
05:50 - and he stays on I don't all right
05:53 - great so now that our movement is
05:56 - working let's set up some attacks
05:57 - so let's first go down here and make a
06:00 - private point and let's call it the
06:02 - handle attack this function will also be
06:06 - called on our update after remove and
06:08 - all our attacks okay
06:10 - now we're moving with WASD and for the
06:13 - attack we're going to use the mouse
06:14 - click so inside our function let's test
06:17 - if input dot get mouse button down and
06:20 - here we're using mouse button down since
06:22 - we want to trigger only on that specific
06:24 - update we test for the left mouse button
06:27 - which is on index 0 if the mouse is down
06:31 - then let's do an attack so let's go into
06:34 - the spider-man base and play the punch
06:36 - animation now we need a direction so
06:39 - let's first go up here do a vector3 for
06:42 - the attack direction now the attack
06:44 - direction won't be essentially pointing
06:46 - towards the mouse so let's grab the
06:48 - mouse position
06:50 - for that I'm going to go into the utens
06:51 - class and get the mouse world position
06:54 - and subtract it to our transform dot
06:57 - position and finally normalize the whole
06:59 - thing okay so we now have the attack
07:02 - direction that's what we're going to use
07:04 - on our punch animation on hit let's do
07:06 - nothing and when the animation is
07:08 - complete let's go back to item Spiderman
07:11 - base dot play the idle animation okay so
07:14 - we test if the in left mouse button is
07:16 - down if it is we calculate the direction
07:18 - pointing towards the mouse and we play a
07:20 - punch animation using that direction
07:22 - when the animation is complete it goes
07:24 - back to being titled so let's test and
07:26 - see if we're playing the punch animation
07:28 - towards the mouse button when we click
07:30 - alright here's spider-man if I click as
07:33 - you can see there's an issue it plays
07:36 - the animation when we click but in the
07:38 - very next frame it goes back to being
07:39 - idle so let's go into the code and see
07:41 - why that's happening so here on our
07:44 - update every single frame we're running
07:46 - these two functions and on the handle
07:49 - movement function on every frame we are
07:51 - either playing the idle animation or the
07:53 - movement animation so those are
07:55 - canceling the attack animations so we
07:57 - want to make sure that we only call this
07:59 - function when we're not attacking so
08:01 - let's go up here and create a private in
08:04 - room called state that will handle our
08:07 - current state for the possible states
08:09 - we're going to have normal or attacker
08:11 - and let's make a private state to store
08:14 - our current state
08:16 - so on the awake we set this state to
08:19 - start off as normal and on our update we
08:21 - only want to call these functions if the
08:23 - state is normal so if States equals
08:26 - state dot normal then we want to do this
08:29 - if we are attacking then we don't want
08:30 - to trigger this so let's make some
08:32 - helper functions for setting the state
08:34 - soproud Boyd set state normal and here
08:37 - simply do state people state dog normal
08:39 - and do the same for the attack
08:45 - all right now down here when we attack
08:48 - let's set the state to attacking set
08:50 - state attacking okay and when the attack
08:53 - completes when the punch animation is
08:55 - completed instead of playing the idle
08:57 - animation let's set the state back to
08:59 - normal so when it finishes it goes back
09:01 - to normal and we can move again so let's
09:03 - see okay here I am and I click and yep
09:06 - the punch animation plays completely so
09:09 - I can move around my punch and he only
09:12 - goes back to moving Wendie punch is
09:14 - completed so I can punch multiple times
09:16 - and yep there you go okay great now the
09:19 - potential issue that you might see is
09:21 - the fact that we can only attack when
09:22 - the state is normal so if I spam you can
09:25 - see that the attack doesn't actually
09:26 - spam every time I click but rather only
09:28 - one goes back to normal now depending on
09:31 - what type of game you're making this
09:32 - could be what you want in a game like
09:34 - dart songs for example your attacks are
09:36 - meant to be heavy and not easily
09:38 - spammable so in that case it makes sense
09:41 - to wait for the attack to complete
09:42 - before doing another one however in the
09:44 - game we are making here it is meant to
09:46 - be more arcadey
09:47 - so we want our attacks to be fast and
09:49 - responsive so let's go back into our
09:51 - code now in here on our update we want
09:55 - to handle movement only when it's normal
09:57 - but we also want to test for attacks
09:59 - when the state is attacking that way we
10:01 - can't move while attacking but we can do
10:03 - another attack so instead of an F let's
10:06 - do a switch so a switch on our state now
10:10 - case we are on state dot normal then we
10:13 - test for both of these but case we are
10:17 - on state dot attacking then we only want
10:20 - to attack so this way we can only move
10:23 - whilst normal but we can attack once we
10:26 - are also in the middle of an attack so
10:28 - let's test okay so here I am I can move
10:31 - and I can attack and as you can see I
10:33 - don't move whilst in the middle of an
10:35 - attack but if I click twice really fast
10:37 - yep you can see then he is constantly
10:40 - firing the attacks this way our code is
10:44 - much more responsive ok so right now we
10:46 - have the punch animation working
10:48 - correctly but we aren't doing any kicks
10:49 - let's make it so we do a punch then a
10:51 - cake then a punch and so on so breaking
10:54 - our code down here when we're attacking
10:57 - before we play the punch animation let's
11:00 - first test if we are already punching so
11:03 - we're going to use that function on the
11:04 - base class to test that so do one if go
11:07 - into the base class and test is playing
11:10 - the punch animation now if we are
11:14 - currently playing the punch animation
11:15 - then we want to play the kick animation
11:18 - if we are not playing the punch
11:20 - animation then we want to play the punch
11:22 - animation so the first attack will
11:24 - always be a punch but if we attack again
11:26 - once in the middle of a punch we won't
11:27 - do a kick ok so here I am and if I click
11:30 - yep you can see that I'm doing a punch
11:32 - if I wait for the animation to complete
11:34 - and go back to normal he always does a
11:35 - punch but if I click twice really fast
11:39 - you can see that he did a punch and then
11:42 - a kick if I attack both yeah you can see
11:44 - he is switching between punching and
11:47 - kicking I can move around kick twice and
11:50 - there you go he does a punch cake punch
11:52 - kick alright great so we now have a nice
11:55 - simple combo so now let's add a impact
11:58 - effect down here in the textures I have
12:01 - a impact sprite sheet it is a very
12:03 - simple spreadsheet containing some basic
12:05 - animation of an impact effect so let's
12:08 - create a game object and inside let's
12:11 - make another game object and for the
12:13 - inner one we're going to call it sprite
12:15 - I'm going to add a sprite renderer and
12:18 - then also add a sprite animator this
12:22 - work was created in a previous video
12:23 - it's very simple it just receives an
12:26 - array of sprites and plays them
12:27 - sequentially so I can drag all of my
12:30 - sprite frames and just like that it
12:33 - won't play them sequentially keep it at
12:34 - 30 frames per second and this right when
12:37 - complete now the default rotation in
12:39 - unity is on the right side but our
12:41 - sprite is pointing up so let's just do a
12:43 - simple rotation here let's push it
12:46 - slightly forward and let's make this
12:48 - into a prefab so make a new prefab and
12:51 - let's call it PF impact effect let's
12:56 - drag it onto our prefab and like that so
12:58 - now we can go into the code on our
13:00 - spider-man class and go up here let's
13:03 - add a reference to the impact effect so
13:06 - a private transform for the PF impact
13:09 - five and let's make this a serialized
13:11 - field so we can set it in the editor and
13:15 - down here when we are playing the punch
13:17 - or kick animations again we can now use
13:20 - this callback right here it triggers
13:23 - when the animation actually reaches the
13:25 - impact frame and inside it receives a
13:28 - vector3 for the impact position so
13:30 - vector3 for our impact position so using
13:36 - that and let's spawn the impact effect
13:38 - on that position
13:39 - so in Senshi 8-hour PF impact effect
13:42 - let's put it on the impact position for
13:46 - a quaternion dot identity and then let's
13:48 - rotate it set the Euler angles to a new
13:53 - vector3 since we're rotating in 2d set
13:56 - it to zero zero and then what's going to
13:58 - the Utah's class to get the angle from
14:00 - vector and we're going to rotate it
14:03 - towards the attack direction all right
14:05 - let's do the same thing also on our 2000
14:09 - K so now let's run the code
14:12 - okay there's spider-man and if I punch
14:14 - yep you can see a nice little effect in
14:16 - there if I punch and kick and so on I
14:19 - can punch in any direction and it just
14:22 - has a nice simple impact effect okay
14:25 - great now final one let's set up the
14:27 - camera to actually follow our player
14:29 - character I'm going to use the script
14:31 - that we created in a previous series the
14:33 - camera phone script it allows me to
14:35 - easily set the camera following a
14:37 - certain position
14:38 - so let's first make a script for our
14:41 - game handler this will help us set
14:43 - things up let's write the game handler
14:46 - onto the game handler object and onto
14:48 - the main camera let's add the camera
14:51 - follow script it's not let's go into the
14:53 - game handle or script now in here let's
14:55 - add a field for our camera follow now
15:01 - the camera phone is included in the code
15:03 - monkey tomahto behaviors then let's also
15:07 - add a reference for our Spider Man and
15:10 - make both of the Sirah ice fields and on
15:15 - our private void awake
15:18 - let's set up the camera to follow
15:20 - spider-man so do a camera follow that
15:24 - setup and we're going to set it up to
15:26 - phone with the Spider Man position so
15:29 - before we do this let's go into our
15:30 - Spider Man and now the function to
15:33 - return our positions so let's go down
15:34 - here make a probably cuz vector3 call
15:37 - get position and we're simply going to
15:39 - return our transform down position okay
15:42 - so we can now go back into our game home
15:44 - and use spider-man that get position
15:47 - that is the function that won't get the
15:49 - camera final position and for the zoom
15:52 - let's just give it a static zoom so zoom
15:55 - at sixty all right so we should now have
15:57 - the camera smoothly following the player
16:00 - and yep there you can see the camera
16:03 - smoothly following our spider-man okay
16:06 - now since we're using the mouse to
16:08 - attack let's also make the camera
16:10 - slightly from the mouse so on the game
16:12 - handler in here let's go down and make a
16:15 - private vector3 and let's go get camera
16:18 - follow position and this is the function
16:23 - that we're going to use up here instead
16:24 - of directly following just spider-man so
16:27 - in here we want the camera to be shifted
16:29 - slightly towards the mouse position so
16:31 - first let's grab a vector3 for our mouse
16:33 - position which again I'm going to go
16:35 - into the utens class and get the mouse
16:41 - world position so let's calculate the
16:44 - vector three of spider-man two mouse
16:46 - deer which will be the mouse position -
16:49 - spider-man yet position let's leave the
16:53 - vector with its magnitude so we're not
16:55 - going to normalize it and here we're
16:57 - going to return the spider-man that get
16:58 - position so the spider-man position was
17:01 - the direction towards the mouse
17:04 - multiplied by a small amount since we
17:07 - don't want it to be exactly at the mouse
17:09 - position okay so in here we are grabbing
17:11 - the mouse position calculating the
17:13 - direction from the spider-man towards
17:15 - the mouse then we are returning a
17:17 - position based on the spider-man
17:19 - position plus that direction to the
17:21 - mouse multiplied by a tiny amount so
17:23 - let's test and yep as you can see the
17:26 - camera is slightly shifted towards the
17:28 - mouse so I can move the player they can
17:31 - moves and if I'm looking in there the
17:33 - camera is slightly shift in there and
17:35 - there and there so this way we can
17:37 - easily move the player is always in view
17:40 - and I can attack and if I attack to the
17:43 - various sights the camera is nicely
17:44 - packed so there you have it we start
17:47 - with some basic animations and create a
17:49 - simple logic for our Spider Man to move
17:50 - an attack in the next video we're going
17:53 - to create some enemies and attack them
17:54 - as always you can download the project
17:57 - files and utilities from unity code
17:58 - monkey comm if you have any questions
18:00 - post them in the comments and I'll do my
18:01 - best answer them subscribe for more
18:03 - videos and I'll see you next time

Cleaned transcript:

hello and welcome I'm your code monkey and in this series we're going to create spiderman in unity 2d on this first video we're going to set up the basic movement and attacks let's begin all right so as a starting point I have some animations already set up I have some punch animations and some kick animations also the basic movement animations now I'm using my own custom animation system but you can set up the animations in your game using whatever animation system you prefer you could use your own custom animations or the Unity animation system the only important thing is that you expose certain functions to be able to trigger those animations so let's go into the code and see what functions we need to set up our logic alright so here's the base script and in here you can see all the various functions that we're going to use to set up our logic I can play the punch and kick animations these functions contain a direction and then some optional callbacks for when the animation is complete and when the animation actually hits I can also test which one is active and I can play either move or idle animations okay so with all of these functions we should be able to make a script to handle the logic for moving and attacking so let's go into the editor and make a new csharp script and let's name this spiderman let's drag it onto our spiderman game object which as you can see also contains the base script and this game object only contains the body which contains a mesh renderer to handle the animations and a simple shadow which is just a basic sprite alright so let's go to the code now in here let's first remove the start and update and instead make a private void away on the awake let's grab a reference to the base crib so we can access those functions so first let's go up here make a private spiderman be spiderman base and let's get that component in here game object I get component type spiderman base ok now to make sure that everything is working let's test doing a kick so to test that I'm going to use the function periodic which is part of the code monkey Tony's that you can grab for free from unity code monkey comm so I'm gonna go appear in the using code monkey value tones now the function periodic triggers an action every certain amount of time so in here I can create and in here I can give it an action than some time so the action we want to test is a kick so in order to do let's pass in a function we're going to go into the spiderman base and play the kick animation for direction let's just kick to the right side and for the comebacks and let's leave them at No all right so trigger that action every second all right so we should be able to see spiderman doing a kick every second let's see and yep there it is he's doing a kick every second which means our setup is correct and we can now use all the base functions to continue our script so let's first handle movement so in here let's do a private void handle movement and this function won't be called on our private void update here we call a no movement okay now we're going to set up movement using W a s and D so let's test for those various keys in order to test we do if input dot get key down of the key code let's say W and if it is we want to move up so let's go up here and set up some floats for the move on the X and a float for the move on the Y now if we are pressing W we want to move up so set the move Y to one app then let's do the same from the other keys all right so when we press EE we want to move on the Y on the positive on the S you move down on the a you move left and on the D you move right all right now let's create a vector3 using those floats so vector3 for the move there which won't be a new vector3 using the move X to move Y and then we normalize this Specter now in here let's do a boolean and test if we are idle and we are I don't if move x equals zero and move Y also equals 0 if both are 0 then we are either so in here we test if we are idle then we want to play the idle animations to go into the spiderman base class and play the idle animation if we are not idle then we want to move so go into the base and play the move animation towards the movement there ok so we are playing the move animation now let's also actually move the transform so for that we do transform and we increase our transform position by the movement Direction multiplied by time.deltatime and also multiplied by a speed value so we have to go up here and let's set up a private cons float for our speed and let's for that 50m okay so let's use that constant down here so increase the position by the movement Direction multiplied by our speed multiplied by time time to time this is so our movement is independent of our frame rate okay so our movement should be correctly working first we set up some floats then we assign values to those floats if the keys are oppressed we create a normalized vector three using those we test if we are I don't which happens only if both are zero if we are we play the idle animation if not we play the move animation and we move towards the move to your position so in our function we actually have a tiny issue so instead of get keyed down it should USB get clean because if you're using get key down it will only trigger on that particular frame and we want this to trigger every frame all right so it now should be working okay there's spiderman he's idle and if I move yup there you go he's moving around he's playing the animations and moving the transform and if I stop yep he stops and he stays on I don't all right great so now that our movement is working let's set up some attacks so let's first go down here and make a private point and let's call it the handle attack this function will also be called on our update after remove and all our attacks okay now we're moving with WASD and for the attack we're going to use the mouse click so inside our function let's test if input dot get mouse button down and here we're using mouse button down since we want to trigger only on that specific update we test for the left mouse button which is on index 0 if the mouse is down then let's do an attack so let's go into the spiderman base and play the punch animation now we need a direction so let's first go up here do a vector3 for the attack direction now the attack direction won't be essentially pointing towards the mouse so let's grab the mouse position for that I'm going to go into the utens class and get the mouse world position and subtract it to our transform dot position and finally normalize the whole thing okay so we now have the attack direction that's what we're going to use on our punch animation on hit let's do nothing and when the animation is complete let's go back to item Spiderman base dot play the idle animation okay so we test if the in left mouse button is down if it is we calculate the direction pointing towards the mouse and we play a punch animation using that direction when the animation is complete it goes back to being titled so let's test and see if we're playing the punch animation towards the mouse button when we click alright here's spiderman if I click as you can see there's an issue it plays the animation when we click but in the very next frame it goes back to being idle so let's go into the code and see why that's happening so here on our update every single frame we're running these two functions and on the handle movement function on every frame we are either playing the idle animation or the movement animation so those are canceling the attack animations so we want to make sure that we only call this function when we're not attacking so let's go up here and create a private in room called state that will handle our current state for the possible states we're going to have normal or attacker and let's make a private state to store our current state so on the awake we set this state to start off as normal and on our update we only want to call these functions if the state is normal so if States equals state dot normal then we want to do this if we are attacking then we don't want to trigger this so let's make some helper functions for setting the state soproud Boyd set state normal and here simply do state people state dog normal and do the same for the attack all right now down here when we attack let's set the state to attacking set state attacking okay and when the attack completes when the punch animation is completed instead of playing the idle animation let's set the state back to normal so when it finishes it goes back to normal and we can move again so let's see okay here I am and I click and yep the punch animation plays completely so I can move around my punch and he only goes back to moving Wendie punch is completed so I can punch multiple times and yep there you go okay great now the potential issue that you might see is the fact that we can only attack when the state is normal so if I spam you can see that the attack doesn't actually spam every time I click but rather only one goes back to normal now depending on what type of game you're making this could be what you want in a game like dart songs for example your attacks are meant to be heavy and not easily spammable so in that case it makes sense to wait for the attack to complete before doing another one however in the game we are making here it is meant to be more arcadey so we want our attacks to be fast and responsive so let's go back into our code now in here on our update we want to handle movement only when it's normal but we also want to test for attacks when the state is attacking that way we can't move while attacking but we can do another attack so instead of an F let's do a switch so a switch on our state now case we are on state dot normal then we test for both of these but case we are on state dot attacking then we only want to attack so this way we can only move whilst normal but we can attack once we are also in the middle of an attack so let's test okay so here I am I can move and I can attack and as you can see I don't move whilst in the middle of an attack but if I click twice really fast yep you can see then he is constantly firing the attacks this way our code is much more responsive ok so right now we have the punch animation working correctly but we aren't doing any kicks let's make it so we do a punch then a cake then a punch and so on so breaking our code down here when we're attacking before we play the punch animation let's first test if we are already punching so we're going to use that function on the base class to test that so do one if go into the base class and test is playing the punch animation now if we are currently playing the punch animation then we want to play the kick animation if we are not playing the punch animation then we want to play the punch animation so the first attack will always be a punch but if we attack again once in the middle of a punch we won't do a kick ok so here I am and if I click yep you can see that I'm doing a punch if I wait for the animation to complete and go back to normal he always does a punch but if I click twice really fast you can see that he did a punch and then a kick if I attack both yeah you can see he is switching between punching and kicking I can move around kick twice and there you go he does a punch cake punch kick alright great so we now have a nice simple combo so now let's add a impact effect down here in the textures I have a impact sprite sheet it is a very simple spreadsheet containing some basic animation of an impact effect so let's create a game object and inside let's make another game object and for the inner one we're going to call it sprite I'm going to add a sprite renderer and then also add a sprite animator this work was created in a previous video it's very simple it just receives an array of sprites and plays them sequentially so I can drag all of my sprite frames and just like that it won't play them sequentially keep it at 30 frames per second and this right when complete now the default rotation in unity is on the right side but our sprite is pointing up so let's just do a simple rotation here let's push it slightly forward and let's make this into a prefab so make a new prefab and let's call it PF impact effect let's drag it onto our prefab and like that so now we can go into the code on our spiderman class and go up here let's add a reference to the impact effect so a private transform for the PF impact five and let's make this a serialized field so we can set it in the editor and down here when we are playing the punch or kick animations again we can now use this callback right here it triggers when the animation actually reaches the impact frame and inside it receives a vector3 for the impact position so vector3 for our impact position so using that and let's spawn the impact effect on that position so in Senshi 8hour PF impact effect let's put it on the impact position for a quaternion dot identity and then let's rotate it set the Euler angles to a new vector3 since we're rotating in 2d set it to zero zero and then what's going to the Utah's class to get the angle from vector and we're going to rotate it towards the attack direction all right let's do the same thing also on our 2000 K so now let's run the code okay there's spiderman and if I punch yep you can see a nice little effect in there if I punch and kick and so on I can punch in any direction and it just has a nice simple impact effect okay great now final one let's set up the camera to actually follow our player character I'm going to use the script that we created in a previous series the camera phone script it allows me to easily set the camera following a certain position so let's first make a script for our game handler this will help us set things up let's write the game handler onto the game handler object and onto the main camera let's add the camera follow script it's not let's go into the game handle or script now in here let's add a field for our camera follow now the camera phone is included in the code monkey tomahto behaviors then let's also add a reference for our Spider Man and make both of the Sirah ice fields and on our private void awake let's set up the camera to follow spiderman so do a camera follow that setup and we're going to set it up to phone with the Spider Man position so before we do this let's go into our Spider Man and now the function to return our positions so let's go down here make a probably cuz vector3 call get position and we're simply going to return our transform down position okay so we can now go back into our game home and use spiderman that get position that is the function that won't get the camera final position and for the zoom let's just give it a static zoom so zoom at sixty all right so we should now have the camera smoothly following the player and yep there you can see the camera smoothly following our spiderman okay now since we're using the mouse to attack let's also make the camera slightly from the mouse so on the game handler in here let's go down and make a private vector3 and let's go get camera follow position and this is the function that we're going to use up here instead of directly following just spiderman so in here we want the camera to be shifted slightly towards the mouse position so first let's grab a vector3 for our mouse position which again I'm going to go into the utens class and get the mouse world position so let's calculate the vector three of spiderman two mouse deer which will be the mouse position spiderman yet position let's leave the vector with its magnitude so we're not going to normalize it and here we're going to return the spiderman that get position so the spiderman position was the direction towards the mouse multiplied by a small amount since we don't want it to be exactly at the mouse position okay so in here we are grabbing the mouse position calculating the direction from the spiderman towards the mouse then we are returning a position based on the spiderman position plus that direction to the mouse multiplied by a tiny amount so let's test and yep as you can see the camera is slightly shifted towards the mouse so I can move the player they can moves and if I'm looking in there the camera is slightly shift in there and there and there so this way we can easily move the player is always in view and I can attack and if I attack to the various sights the camera is nicely packed so there you have it we start with some basic animations and create a simple logic for our Spider Man to move an attack in the next video we're going to create some enemies and attack them as always you can download the project files and utilities from unity code monkey comm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time
