With timestamps:

00:00 - hello and welcome i'm your code monkey
00:02 - so a while ago i made a video with my
00:04 - reaction to the battle film 2042
00:06 - gameplay trailer
00:07 - in there one of the mechanics that i
00:09 - briefly talked about was the mini-map
00:11 - and how battlefield games are all about
00:13 - capturing various areas
00:15 - and how they show up in the map in
00:16 - different colors this is actually quite
00:18 - simple to do with some basic
00:20 - letters and some ui images so let's try
00:22 - to do that
00:23 - we're going to start off with a map and
00:24 - define various areas
00:26 - then by moving our character we're going
00:27 - to capture multiple areas
00:29 - and as an area is captured they change
00:31 - the color on the map
00:32 - okay it's pretty simple so let's do it
00:35 - if you prefer a more guided path with
00:37 - step-by-step
00:38 - lectures then check out my complete
00:39 - courses learn how to make a builder
00:41 - defender game using csharp just like i
00:43 - make my
00:44 - own steam games or learn how to make
00:46 - games internally using visual scripting
00:48 - or
00:48 - learn all about unity with the ultimate
00:50 - overview course which contains over 13
00:52 - lectures each covering a different tool
00:54 - or feature of the engine to help you
00:56 - make better games faster
00:57 - i'm always available in the courses q a
00:59 - section answering your questions every
01:00 - single day so check out all the courses
01:02 - with the link in the description
01:04 - alright so here let's build a capture
01:06 - area system just like you see in
01:07 - battlefield
01:08 - or even in my own game hypernights the
01:11 - world is divided into areas which can be
01:13 - captured individually
01:14 - so here as a starting point i've got
01:16 - this demo scene
01:17 - this is from the cinti polygon battle
01:19 - royale asset pack there's a link in the
01:20 - description if you want to get it
01:22 - i have my nice character from that same
01:24 - pack and i can move it around
01:26 - for that i'm actually using the third
01:28 - person shooter controller that i made in
01:29 - another video
01:30 - so you can go watch that to see how this
01:32 - was done so i can walk around i can
01:34 - sprint i can aim my weapon
01:36 - and go everywhere alright so first of
01:38 - all we need to define some areas to
01:40 - capture
01:41 - and how we're going to do that is by
01:42 - using some colliders
01:44 - so let's make a new object a new 3d cube
01:47 - and now let's say this container area is
01:49 - one area that i want to capture
01:51 - so let's just scale it roughly like that
01:54 - okay just make sure it occupies on the z
01:57 - as well so that the player can go inside
01:58 - this area
01:59 - okay so there you go that's the area i
02:01 - want to capture now of course this is
02:02 - not meant to have a visual so
02:04 - let's hide the visual and for the
02:06 - clutter itself
02:07 - make sure you set this trigger so this
02:09 - does not work as a solid object
02:11 - and then just one more thing in order to
02:13 - make sure that this collider does not
02:15 - break any other things in the game
02:16 - let's put it in its own layer so for
02:18 - example here let's call it map areas
02:21 - and here we assign it to them okay so
02:23 - we've got our collector and we
02:24 - positioned it now we really just need to
02:26 - know when the player enters this area
02:28 - so for that let's make a simple script
02:30 - to add to it so in easyjet script called
02:32 - map area collider
02:34 - let's rename this object to map area
02:36 - collider
02:38 - and attach the script okay so now here
02:40 - it's really simple we add the trigger
02:42 - collider so we just listen to
02:43 - private void on trigger enter so when
02:46 - that enters then here we've got the
02:48 - other collider that we hit
02:50 - so i need to do is test if this can
02:51 - leather belongs to the player if so then
02:53 - the player has entered this area
02:55 - so to identify the player let's make a
02:57 - proper script to handle all this map
02:59 - various logic
03:00 - so here let's just make an easy sharp
03:01 - script called player map
03:03 - areas and on the player already has a
03:06 - bunch of scripts so just attach this one
03:08 - okay and now here just go into the
03:10 - collider in order to get the component
03:12 - of type
03:12 - player map areas and if this one is not
03:16 - known
03:18 - then that means the player is the one
03:19 - that entered this so over here let's
03:21 - just see with debug.log
03:23 - layer entered okay so let's test
03:27 - okay i've got my character and let's go
03:30 - inside
03:31 - over here the container areas and as
03:33 - soon as i go in yep there you go i've
03:34 - got the log
03:35 - it's right in here yep it's the log
03:36 - saying the player is entered all right
03:38 - so far so good so with this we already
03:41 - have the basic logic for identifying
03:42 - when the player is
03:43 - inside a collider now in order to make
03:45 - this system much more adaptable we're
03:47 - going to make each map area composed of
03:50 - multiple colliders instead of just one
03:52 - that way we can have all kinds of weird
03:54 - shapes so for that let's handle the
03:56 - logic for handling multiple colliders
03:59 - let's first make a parent to hold all
04:01 - the various game objects
04:02 - so let's make another game object call
04:04 - this the map area
04:06 - and now the position for this object
04:07 - doesn't really matter but maybe put it
04:09 - roughly around the same position and
04:11 - then for the map here you can later make
04:12 - it a child with that one
04:14 - okay so there's the map area collector
04:16 - and just for testing let's make this one
04:18 - a bit smaller just so we test with two
04:21 - colliders so let's push this one to the
04:23 - side
04:24 - and there you go so this area is
04:25 - composed of those two colliders
04:27 - and now let's make a script to handle
04:29 - this logic so in uc sharp script
04:31 - come with the map area and attach it to
04:33 - the parent
04:35 - and now here the first thing that we
04:36 - need is to know all the multiple
04:38 - colliders that make up this map area
04:40 - so let's make a first void awake and
04:42 - unawake let's circle through all the
04:44 - children
04:46 - so for each transformed child in
04:49 - transform
04:50 - so this way we are cycling through all
04:52 - the children then we go into the child
04:54 - we get the component of type map area
04:56 - collider
05:04 - all right so cycle through the list if
05:05 - it does have the component of that type
05:07 - if it is not null then we simply add it
05:09 - to the list now that we have
05:11 - all of our mapping collectors let's end
05:13 - on some simple capture progress logic
05:16 - so let's make a product float call it
05:18 - progress
05:19 - so the progress of capture and then we
05:22 - make a simple
05:23 - predroid update and on update let's
05:25 - simply ask each collider if there's a
05:28 - player inside of it
05:29 - so we cycle through it
05:33 - and now we need to ask if the player is
05:35 - inside of it so over here we need to
05:36 - handle that logic
05:46 - all right so here i just defined the
05:47 - list for player map areas emitted on
05:49 - list so we can support multiple players
05:51 - and then just using tri-get component so
05:53 - if this one succeeds and we've got the
05:55 - component simply add it to the list
05:56 - and then on trigger exit remove it from
05:58 - the list okay
06:00 - so we have all of our players here now
06:01 - we just need to expose this list
06:06 - and here just don't forget to initialize
06:08 - this list
06:10 - okay just like that and back in here now
06:13 - we can go into the map area collider in
06:15 - order to get the player map areas list
06:17 - so you get this one and if we get the
06:19 - count then we know how many players are
06:20 - inside of this collider
06:22 - so we just do define an end for the
06:25 - player
06:26 - count inside map area
06:29 - so start off at zero go through each
06:31 - collider increase by the amount that is
06:33 - on there
06:34 - and then afterwards we're simply going
06:36 - to increase the progress
06:37 - based on the player count inside the map
06:39 - area
06:44 - all right so we just increase the
06:45 - progress based on the player count
06:46 - inside map area
06:48 - based by a certain move speed and
06:49 - multiplied by delta time
06:52 - all right so let's just add some logs
07:00 - okay so like this let's test all right
07:03 - so here it is and we can read the log so
07:04 - we can see the
07:05 - player inside is zero progress is zero
07:08 - okay and now as i approach that area it
07:10 - should go into one and the progress
07:11 - should start increasing
07:12 - so as i go in yeah there we go one n is
07:15 - increasing and yep after one second it
07:17 - reaches a progress of one
07:18 - alright awesome so the logic is indeed
07:20 - working
07:21 - now let's see if this captures faster
07:23 - with two players by the way if you find
07:25 - the video helpful
07:26 - please hit the like button it's a tiny
07:28 - thing but it really does help thanks
07:30 - so over here now this player character
07:32 - really wasn't made to be duplicated but
07:33 - i still think it should work so let's
07:35 - just duplicate pull on the side another
07:37 - one in there
07:38 - now let's see when i resume if it says
07:40 - three and it increases faster
07:41 - and if there it is it does recognize
07:43 - three players and the progress is indeed
07:45 - moving faster
07:46 - all right awesome now there is one
07:49 - potential issue with the logic that we
07:50 - set up here
07:51 - so on map here it's made up of
07:53 - monopolizers okay so that's pretty good
07:55 - however right now we have an issue if
07:58 - the collider is overlapped so if i make
07:59 - this one overlap into that one
08:01 - now these two are overlapping so now
08:04 - let's see what happens when the player
08:05 - goes inside of this area
08:07 - so as i go inside this area it counts as
08:09 - one player okay but now i go here and
08:11 - now it counts the same player twice
08:13 - so this is an issue this is not supposed
08:15 - to happen it's a very similar fix
08:17 - over here when we get the player count
08:19 - inside the map area we just need to add
08:21 - some logic to make sure that this number
08:22 - is actually only counting for uniques
08:43 - all right so instead of just an end with
08:45 - the final list
08:46 - then we cycle through all the child
08:48 - collectors we go through all of them and
08:50 - we ask
08:50 - what players are inside of that map area
08:53 - and then we simply test on this list if
08:55 - it does not contain
08:56 - that current player if not then he
08:58 - simply add it and if it does already
09:00 - contain it then you simply ignore it
09:02 - then down here the same thing just
09:03 - listen to the account and do that
09:05 - okay let's test alright so everything is
09:07 - correctly at zero
09:08 - now as i go in it should say one yep and
09:11 - as i go in here
09:12 - yep it always says one so even when i'm
09:14 - on the overlap area it is still saying
09:16 - one
09:17 - all right great now let's end on the
09:19 - states on the map area
09:21 - so make it neutral or captured so we're
09:23 - here on the map area
09:24 - let's define an enum for the state
09:28 - and it can either be neutral or captured
09:36 - okay we define the state and unawake we
09:38 - start off as neutral
09:40 - and then on update let's set a basic
09:42 - state machine
09:46 - so if it's neutral we're going to do the
09:48 - same thing that we were doing
09:50 - so we're going to capture it and when it
09:52 - is captured let's not do anything
09:54 - then we just need no logic for actually
09:56 - capturing it so over here on the
09:58 - progress
09:59 - so if the progress is above 1f
10:02 - then we simply modify the state into
10:04 - state dot capture
10:06 - here i'm using one f just to make sure
10:07 - that the progress is normalized
10:09 - so i can play around over here with the
10:11 - progress b and put it at 0.5 so it takes
10:13 - actually two seconds
10:14 - all right so let's just add a debug.log
10:17 - here
10:19 - and let's test okay so let's go in
10:23 - i'm inside progress is increasing and as
10:25 - it reaches one yep there you go capture
10:27 - alright great so all of the basic logic
10:30 - is fully working
10:31 - now let's handle the ui visual for that
10:34 - we actually have two methods
10:36 - we can use multiball sprites or we can
10:38 - play around with pixels
10:39 - now if you want to learn the pixel
10:41 - method it's pretty much exactly what i
10:42 - covered in my battleground tycoon guests
10:45 - video
10:45 - you just copy paste some pixels and tint
10:47 - them into a certain color
10:49 - and i also cover another use case in the
10:51 - rover mechanic cleaning mini game video
10:53 - working directly with pixels is one
10:55 - approach you can take
10:56 - but for another one here let's use these
10:58 - price which is really the simpler method
11:00 - so in my project files i've got a
11:02 - texture for the
11:04 - actual map so i just zoomed out took a
11:06 - screenshot and pasted it
11:08 - so this is the normal map texture and
11:11 - then there's one just for the map area a
11:13 - another one for the map area b another
11:15 - one for the map where you see
11:17 - and also note how these textures are in
11:19 - white by being in white that means they
11:21 - can easily be turned in any color
11:23 - okay so let's build the ui element let's
11:25 - first of all make a new ui canvas
11:30 - then on canvas set it up like i normally
11:32 - do so scale with screen size
11:34 - reference 1280 by 720 and measure the
11:37 - height
11:38 - that's just the standard that i like to
11:39 - stick to and now inside let's add an
11:41 - empty game object
11:42 - called the map areas ui
11:49 - and now inside let's add a ui image
11:52 - and for this one i'm going to assign the
11:54 - normal map
11:56 - okay just make sure preserve aspect
11:58 - ratio and let's put it on the corner
12:00 - there
12:08 - all right so there it is nice on the
12:09 - corner now other images for the overlays
12:22 - alright so there is each map area on top
12:24 - of the map
12:25 - now let's make a simple script to handle
12:26 - this so in uc sharp script
12:29 - map areas ui okay so here essentially we
12:33 - need to connect a ui visual to a
12:35 - specific map
12:36 - area so let's define a class to handle
12:38 - that connection
12:40 - so define a class map area image
12:44 - and we need to make this
12:45 - system.serializable in order to make
12:47 - sure it shows up in the editor
12:49 - then for the films we make it of type
12:51 - image so first we need using unity
12:53 - engine.ui
12:55 - and the first one will be an image so
12:58 - this is the ui image
13:00 - and then the other one is going to be a
13:02 - map area
13:03 - okay so now we just need a field for
13:05 - this one
13:10 - all right so serialize field a list of
13:12 - map area image and since this one is
13:14 - serializable it should show up in the
13:16 - editor
13:17 - and if there's the map area cy and we
13:19 - have our list so let's add our three
13:21 - areas okay and on the first one drag the
13:24 - map area a
13:24 - image okay and drag the map area that we
13:27 - just defined
13:28 - now let's just make all the other map
13:30 - areas so make this one a
13:32 - and let's build out the other ones
13:52 - all right so here are all three map
13:54 - areas we don't need to change anything
13:56 - on the map area script since that one
13:58 - already works by searching for all the
13:59 - children
14:00 - so just on the ui let's fill in the rest
14:02 - so my various being
14:04 - okay we have all of our references now
14:07 - we just need to handle the
14:08 - logic of making sure when an area gets
14:10 - captured the ui image changes
14:12 - so let's add some events to know when
14:14 - the map area changes state
14:16 - so on the map area over here let's just
14:18 - make an event so a public event
14:20 - use the standard so even handler using
14:24 - system make it an event handler
14:26 - now if you don't know about events check
14:27 - out the video that i made on it
14:29 - they are super useful so in this case
14:31 - we're going to make an event for on
14:33 - captured so we define this event
14:36 - and then down here when it actually gets
14:38 - captured then we're going to
14:40 - invoke that event
14:43 - all right so we have this super useful
14:45 - event
14:46 - and then on the ui we've got all this
14:48 - okay let's make a private void start
14:51 - so here i'm using start because we're
14:52 - going to access an external reference
14:55 - let's cycle through all of our map area
14:57 - images
15:01 - second through that go into the map area
15:03 - image access the map area
15:04 - and we're going to subscribe to the
15:06 - uncaptured event
15:13 - all right so we are subscribing to the
15:15 - event and also if you don't know about
15:17 - this this is a
15:18 - lambda expression which is a type of
15:20 - delegate so go watch my video on
15:21 - delegates
15:22 - okay so we've got that and when it is
15:24 - captured then we simply want to tint
15:25 - this image
15:27 - so we're going to tint the ui image set
15:29 - the color and let's say color.green
15:32 - alright so just like this it should be
15:34 - working so let's test
15:36 - alright so here i am and if i go inside
15:38 - of a
15:39 - and i wait for two seconds i'm inside
15:41 - and after two seconds if there you go
15:43 - the a turned into green so it was
15:44 - correctly captured and now if i go
15:47 - and let's say i want to skip the b so
15:48 - that's in there and the c is over here
15:50 - on the barracks
15:51 - so if i go in here and i wait around for
15:54 - two seconds yep there you go
15:55 - c was captured all right awesome so
15:58 - what's left is just a ui visual for the
16:01 - capture progress
16:02 - so on our canvas let's make another
16:04 - empty game object
16:05 - this one let's call the map areas
16:07 - capturing ui
16:10 - and for this one let's put it up here
16:12 - right in there okay
16:14 - now inside let's add a ui image and for
16:17 - the image over here i've got a nice
16:18 - circle
16:19 - so let's tint it maybe in green
16:25 - all right so there's our circle and now
16:27 - in order to make it actually fill up
16:29 - over here on the image type instead of
16:31 - simple
16:31 - let's go with filled and then for the
16:34 - film method choose radial okay and then
16:36 - we simply have to move the film out and
16:38 - let's put this one
16:39 - on the top just because i think it looks
16:40 - a bit better okay so now we just have to
16:42 - increase this field in order to see the
16:44 - progress
16:45 - so let's make the script to handle that
16:46 - logic so an ec sharp script
16:49 - this will be the map areas capturing ui
16:53 - okay now here let's first grab the image
16:56 - so here let's actually rename this with
16:58 - a proper name so progress
17:02 - image
17:07 - all right we get our image now we need a
17:09 - list for all of our map areas
17:14 - and make it a serialized field so we can
17:16 - set it in editor
17:18 - okay we have the list so here let's add
17:20 - the map area a
17:21 - then the map area b and finally map
17:23 - where you see
17:24 - okay now in order to show or hide this
17:27 - ui element we need to know when the
17:28 - player enters or exits a certain map
17:30 - area so on the map area let's add some
17:33 - more events
17:35 - okay on player enter and on player exit
17:38 - now we need to listen to that
17:39 - on the colliders so over here let's do
17:42 - the same thing
17:49 - okay over here we have one player enter
17:51 - and on player exit
17:52 - it's not the map areas for each map area
17:55 - collider we just need to listen to that
18:03 - however just like this if we now fire
18:05 - off these events
18:06 - we might have some issues and the issues
18:08 - for that is once again if the collateral
18:10 - is overlapped
18:12 - so if they do overlap then there's a
18:13 - chance that the player might actually
18:15 - exit
18:15 - one collider before entering another one
18:17 - and if it works like that
18:19 - it works okay however there's also a
18:21 - chance that the player might enter the
18:22 - second collider and afterwards exit the
18:25 - first collider
18:26 - so if we were to fire off the events
18:28 - there's a chance that we could have the
18:29 - on player enter and then afterwards the
18:31 - on player exit
18:32 - so if we use that directly in order to
18:34 - show the ui
18:35 - then we would show and then hide even
18:37 - though the player was still inside
18:39 - so when working with multiple colliders
18:41 - you always need to be careful with the
18:42 - order
18:43 - so on enter we can just trigger the
18:45 - normal event
18:48 - and it's only on the exit that we need
18:49 - to be careful with so we need to
18:52 - cycle through
19:02 - all right so when the player exits we
19:04 - check all the colliders
19:05 - and if the player still exists on at
19:07 - least one of those colliders then we do
19:09 - not fire the vent we only fire if
19:10 - there's
19:11 - no player on any of the collectors okay
19:13 - so back in the ui we can now subscribe
19:15 - to those events
19:28 - all right so we listen to the enter next
19:30 - event and we simply show our hide this
19:32 - ui element
19:33 - all that's left is to update the
19:35 - progress image.filmount
19:44 - alright so when the player enters we
19:46 - keep track of what map area they entered
19:48 - and on update we simply set the film
19:49 - amount we go into the map area
19:51 - we ask to get the progress and we set it
19:53 - since the progress is already normalized
19:55 - and this should work perfectly
19:56 - let's see all right so here i am and
19:59 - let's go
20:00 - inside map area and as i go in if there
20:03 - you go there's a progress going up and
20:05 - yep
20:05 - when it's filmed there you go the area
20:06 - is captured now let me just briefly pass
20:09 - through b
20:10 - and there you go that one is filling up
20:12 - let me leave okay so that one is not
20:14 - captured now i go into c
20:16 - i capture it fully yep there you go
20:18 - fully captured knowing to be and yep
20:20 - fully captured
20:21 - alright awesome so here is the system
20:24 - fully working
20:25 - we've got the character we can move
20:26 - around we can define what areas of the
20:28 - map we want to be capturable
20:30 - and when the player goes inside each of
20:32 - those areas they can capture those areas
20:34 - now if you wanted you could easily
20:35 - expand upon this to have multiple themes
20:38 - multiple areas multiple shapes tons of
20:40 - things so you could add some capture
20:42 - areas in red others in blue and have as
20:44 - many colors and as many teams as you
20:46 - want
20:46 - but even without that this is a great
20:48 - system for a co-op or a single player
20:50 - game where you want the player to be
20:51 - able to capture some areas
20:53 - again if you're looking for a more
20:55 - guided path with step-by-step lectures
20:56 - then check out my complete courses
20:58 - alright hope that's useful check out
21:00 - these videos to learn some more
21:02 - thanks to these awesome patreon
21:03 - supporters for making these videos
21:05 - possible
21:06 - thank you for watching and i'll see you
21:07 - next time

Cleaned transcript:

hello and welcome i'm your code monkey so a while ago i made a video with my reaction to the battle film 2042 gameplay trailer in there one of the mechanics that i briefly talked about was the minimap and how battlefield games are all about capturing various areas and how they show up in the map in different colors this is actually quite simple to do with some basic letters and some ui images so let's try to do that we're going to start off with a map and define various areas then by moving our character we're going to capture multiple areas and as an area is captured they change the color on the map okay it's pretty simple so let's do it if you prefer a more guided path with stepbystep lectures then check out my complete courses learn how to make a builder defender game using csharp just like i make my own steam games or learn how to make games internally using visual scripting or learn all about unity with the ultimate overview course which contains over 13 lectures each covering a different tool or feature of the engine to help you make better games faster i'm always available in the courses q a section answering your questions every single day so check out all the courses with the link in the description alright so here let's build a capture area system just like you see in battlefield or even in my own game hypernights the world is divided into areas which can be captured individually so here as a starting point i've got this demo scene this is from the cinti polygon battle royale asset pack there's a link in the description if you want to get it i have my nice character from that same pack and i can move it around for that i'm actually using the third person shooter controller that i made in another video so you can go watch that to see how this was done so i can walk around i can sprint i can aim my weapon and go everywhere alright so first of all we need to define some areas to capture and how we're going to do that is by using some colliders so let's make a new object a new 3d cube and now let's say this container area is one area that i want to capture so let's just scale it roughly like that okay just make sure it occupies on the z as well so that the player can go inside this area okay so there you go that's the area i want to capture now of course this is not meant to have a visual so let's hide the visual and for the clutter itself make sure you set this trigger so this does not work as a solid object and then just one more thing in order to make sure that this collider does not break any other things in the game let's put it in its own layer so for example here let's call it map areas and here we assign it to them okay so we've got our collector and we positioned it now we really just need to know when the player enters this area so for that let's make a simple script to add to it so in easyjet script called map area collider let's rename this object to map area collider and attach the script okay so now here it's really simple we add the trigger collider so we just listen to private void on trigger enter so when that enters then here we've got the other collider that we hit so i need to do is test if this can leather belongs to the player if so then the player has entered this area so to identify the player let's make a proper script to handle all this map various logic so here let's just make an easy sharp script called player map areas and on the player already has a bunch of scripts so just attach this one okay and now here just go into the collider in order to get the component of type player map areas and if this one is not known then that means the player is the one that entered this so over here let's just see with debug.log layer entered okay so let's test okay i've got my character and let's go inside over here the container areas and as soon as i go in yep there you go i've got the log it's right in here yep it's the log saying the player is entered all right so far so good so with this we already have the basic logic for identifying when the player is inside a collider now in order to make this system much more adaptable we're going to make each map area composed of multiple colliders instead of just one that way we can have all kinds of weird shapes so for that let's handle the logic for handling multiple colliders let's first make a parent to hold all the various game objects so let's make another game object call this the map area and now the position for this object doesn't really matter but maybe put it roughly around the same position and then for the map here you can later make it a child with that one okay so there's the map area collector and just for testing let's make this one a bit smaller just so we test with two colliders so let's push this one to the side and there you go so this area is composed of those two colliders and now let's make a script to handle this logic so in uc sharp script come with the map area and attach it to the parent and now here the first thing that we need is to know all the multiple colliders that make up this map area so let's make a first void awake and unawake let's circle through all the children so for each transformed child in transform so this way we are cycling through all the children then we go into the child we get the component of type map area collider all right so cycle through the list if it does have the component of that type if it is not null then we simply add it to the list now that we have all of our mapping collectors let's end on some simple capture progress logic so let's make a product float call it progress so the progress of capture and then we make a simple predroid update and on update let's simply ask each collider if there's a player inside of it so we cycle through it and now we need to ask if the player is inside of it so over here we need to handle that logic all right so here i just defined the list for player map areas emitted on list so we can support multiple players and then just using triget component so if this one succeeds and we've got the component simply add it to the list and then on trigger exit remove it from the list okay so we have all of our players here now we just need to expose this list and here just don't forget to initialize this list okay just like that and back in here now we can go into the map area collider in order to get the player map areas list so you get this one and if we get the count then we know how many players are inside of this collider so we just do define an end for the player count inside map area so start off at zero go through each collider increase by the amount that is on there and then afterwards we're simply going to increase the progress based on the player count inside the map area all right so we just increase the progress based on the player count inside map area based by a certain move speed and multiplied by delta time all right so let's just add some logs okay so like this let's test all right so here it is and we can read the log so we can see the player inside is zero progress is zero okay and now as i approach that area it should go into one and the progress should start increasing so as i go in yeah there we go one n is increasing and yep after one second it reaches a progress of one alright awesome so the logic is indeed working now let's see if this captures faster with two players by the way if you find the video helpful please hit the like button it's a tiny thing but it really does help thanks so over here now this player character really wasn't made to be duplicated but i still think it should work so let's just duplicate pull on the side another one in there now let's see when i resume if it says three and it increases faster and if there it is it does recognize three players and the progress is indeed moving faster all right awesome now there is one potential issue with the logic that we set up here so on map here it's made up of monopolizers okay so that's pretty good however right now we have an issue if the collider is overlapped so if i make this one overlap into that one now these two are overlapping so now let's see what happens when the player goes inside of this area so as i go inside this area it counts as one player okay but now i go here and now it counts the same player twice so this is an issue this is not supposed to happen it's a very similar fix over here when we get the player count inside the map area we just need to add some logic to make sure that this number is actually only counting for uniques all right so instead of just an end with the final list then we cycle through all the child collectors we go through all of them and we ask what players are inside of that map area and then we simply test on this list if it does not contain that current player if not then he simply add it and if it does already contain it then you simply ignore it then down here the same thing just listen to the account and do that okay let's test alright so everything is correctly at zero now as i go in it should say one yep and as i go in here yep it always says one so even when i'm on the overlap area it is still saying one all right great now let's end on the states on the map area so make it neutral or captured so we're here on the map area let's define an enum for the state and it can either be neutral or captured okay we define the state and unawake we start off as neutral and then on update let's set a basic state machine so if it's neutral we're going to do the same thing that we were doing so we're going to capture it and when it is captured let's not do anything then we just need no logic for actually capturing it so over here on the progress so if the progress is above 1f then we simply modify the state into state dot capture here i'm using one f just to make sure that the progress is normalized so i can play around over here with the progress b and put it at 0.5 so it takes actually two seconds all right so let's just add a debug.log here and let's test okay so let's go in i'm inside progress is increasing and as it reaches one yep there you go capture alright great so all of the basic logic is fully working now let's handle the ui visual for that we actually have two methods we can use multiball sprites or we can play around with pixels now if you want to learn the pixel method it's pretty much exactly what i covered in my battleground tycoon guests video you just copy paste some pixels and tint them into a certain color and i also cover another use case in the rover mechanic cleaning mini game video working directly with pixels is one approach you can take but for another one here let's use these price which is really the simpler method so in my project files i've got a texture for the actual map so i just zoomed out took a screenshot and pasted it so this is the normal map texture and then there's one just for the map area a another one for the map area b another one for the map where you see and also note how these textures are in white by being in white that means they can easily be turned in any color okay so let's build the ui element let's first of all make a new ui canvas then on canvas set it up like i normally do so scale with screen size reference 1280 by 720 and measure the height that's just the standard that i like to stick to and now inside let's add an empty game object called the map areas ui and now inside let's add a ui image and for this one i'm going to assign the normal map okay just make sure preserve aspect ratio and let's put it on the corner there all right so there it is nice on the corner now other images for the overlays alright so there is each map area on top of the map now let's make a simple script to handle this so in uc sharp script map areas ui okay so here essentially we need to connect a ui visual to a specific map area so let's define a class to handle that connection so define a class map area image and we need to make this system.serializable in order to make sure it shows up in the editor then for the films we make it of type image so first we need using unity engine.ui and the first one will be an image so this is the ui image and then the other one is going to be a map area okay so now we just need a field for this one all right so serialize field a list of map area image and since this one is serializable it should show up in the editor and if there's the map area cy and we have our list so let's add our three areas okay and on the first one drag the map area a image okay and drag the map area that we just defined now let's just make all the other map areas so make this one a and let's build out the other ones all right so here are all three map areas we don't need to change anything on the map area script since that one already works by searching for all the children so just on the ui let's fill in the rest so my various being okay we have all of our references now we just need to handle the logic of making sure when an area gets captured the ui image changes so let's add some events to know when the map area changes state so on the map area over here let's just make an event so a public event use the standard so even handler using system make it an event handler now if you don't know about events check out the video that i made on it they are super useful so in this case we're going to make an event for on captured so we define this event and then down here when it actually gets captured then we're going to invoke that event all right so we have this super useful event and then on the ui we've got all this okay let's make a private void start so here i'm using start because we're going to access an external reference let's cycle through all of our map area images second through that go into the map area image access the map area and we're going to subscribe to the uncaptured event all right so we are subscribing to the event and also if you don't know about this this is a lambda expression which is a type of delegate so go watch my video on delegates okay so we've got that and when it is captured then we simply want to tint this image so we're going to tint the ui image set the color and let's say color.green alright so just like this it should be working so let's test alright so here i am and if i go inside of a and i wait for two seconds i'm inside and after two seconds if there you go the a turned into green so it was correctly captured and now if i go and let's say i want to skip the b so that's in there and the c is over here on the barracks so if i go in here and i wait around for two seconds yep there you go c was captured all right awesome so what's left is just a ui visual for the capture progress so on our canvas let's make another empty game object this one let's call the map areas capturing ui and for this one let's put it up here right in there okay now inside let's add a ui image and for the image over here i've got a nice circle so let's tint it maybe in green all right so there's our circle and now in order to make it actually fill up over here on the image type instead of simple let's go with filled and then for the film method choose radial okay and then we simply have to move the film out and let's put this one on the top just because i think it looks a bit better okay so now we just have to increase this field in order to see the progress so let's make the script to handle that logic so an ec sharp script this will be the map areas capturing ui okay now here let's first grab the image so here let's actually rename this with a proper name so progress image all right we get our image now we need a list for all of our map areas and make it a serialized field so we can set it in editor okay we have the list so here let's add the map area a then the map area b and finally map where you see okay now in order to show or hide this ui element we need to know when the player enters or exits a certain map area so on the map area let's add some more events okay on player enter and on player exit now we need to listen to that on the colliders so over here let's do the same thing okay over here we have one player enter and on player exit it's not the map areas for each map area collider we just need to listen to that however just like this if we now fire off these events we might have some issues and the issues for that is once again if the collateral is overlapped so if they do overlap then there's a chance that the player might actually exit one collider before entering another one and if it works like that it works okay however there's also a chance that the player might enter the second collider and afterwards exit the first collider so if we were to fire off the events there's a chance that we could have the on player enter and then afterwards the on player exit so if we use that directly in order to show the ui then we would show and then hide even though the player was still inside so when working with multiple colliders you always need to be careful with the order so on enter we can just trigger the normal event and it's only on the exit that we need to be careful with so we need to cycle through all right so when the player exits we check all the colliders and if the player still exists on at least one of those colliders then we do not fire the vent we only fire if there's no player on any of the collectors okay so back in the ui we can now subscribe to those events all right so we listen to the enter next event and we simply show our hide this ui element all that's left is to update the progress image.filmount alright so when the player enters we keep track of what map area they entered and on update we simply set the film amount we go into the map area we ask to get the progress and we set it since the progress is already normalized and this should work perfectly let's see all right so here i am and let's go inside map area and as i go in if there you go there's a progress going up and yep when it's filmed there you go the area is captured now let me just briefly pass through b and there you go that one is filling up let me leave okay so that one is not captured now i go into c i capture it fully yep there you go fully captured knowing to be and yep fully captured alright awesome so here is the system fully working we've got the character we can move around we can define what areas of the map we want to be capturable and when the player goes inside each of those areas they can capture those areas now if you wanted you could easily expand upon this to have multiple themes multiple areas multiple shapes tons of things so you could add some capture areas in red others in blue and have as many colors and as many teams as you want but even without that this is a great system for a coop or a single player game where you want the player to be able to capture some areas again if you're looking for a more guided path with stepbystep lectures then check out my complete courses alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time
