With timestamps:

00:00 - in this video we're going to learn how
00:01 - to make a cutout mask in the ui
00:04 - using the standard ui mask you can show
00:06 - objects behind it
00:07 - and with this one we're going to invert
00:08 - it and instead only show objects
00:10 - not behind the mask this can be used to
00:12 - make some really interesting effects
00:14 - let's begin
00:17 - [Music]
00:22 - hello and welcome i'm your code monkey
00:24 - and this channel is all about helping
00:25 - you
00:26 - learn how to make your own games with
00:27 - in-depth tutorials made by a
00:29 - professional indie game developer so if
00:30 - you find the video helpful consider
00:32 - subscribing
00:33 - okay so this is a really quick video
00:34 - that will help you if you're searching
00:36 - for this effect just like i was
00:38 - a while ago i made the code monkey steam
00:40 - app and for the transitions between
00:42 - scenes i wanted to do a simple circle
00:44 - shrink and grow
00:45 - now the simplest way to do this is by
00:46 - making a black quad occupy the whole
00:48 - screen
00:49 - and then have a cutout mask in the shape
00:51 - of a circle that shrinks and grows
00:53 - unity already comes with a default ui
00:55 - mask however that one shows everything
00:57 - behind the mask
00:58 - whereas i wanted the opposite i wanted
01:00 - to use the mask as a cutout and show
01:02 - everything
01:02 - not in the mask okay so let's make our
01:05 - cutout mask
01:06 - this video is made possible thanks to
01:08 - these awesome supporters
01:09 - go to patreon.com unitycodemonkey to get
01:12 - some perks and help keep the videos free
01:14 - for everyone
01:15 - over here is my basic demo project so
01:17 - it's just a character sitting around
01:19 - idle just for fun
01:20 - then over here in the hierarchy we can
01:22 - go into our ui canvas
01:25 - now in here let's create a very basic ui
01:28 - create a image okay so we have a basic
01:31 - quad
01:31 - now let's first look at how the standard
01:33 - mask works now with this image
01:35 - in order to make a mask we just add the
01:37 - mask component
01:39 - and now what this does is masks out the
01:41 - things behind it so let's add
01:43 - inside another ui image so it's a child
01:46 - of that one
01:47 - and this one let's say just give it a
01:48 - different color so right now depending
01:50 - on the size of this image it only shows
01:52 - where the parent is there
01:54 - then here the parent can have any sprite
01:56 - so for example let's add
01:57 - a simple circle sprite so the parent is
02:00 - in the shape of a circle
02:01 - and you can see that it only shows the
02:03 - child image where that circle exists
02:06 - so we can also just disable the mask
02:08 - graphic and now it really only shows
02:10 - the child on the areas where they are
02:12 - inside of the mask image
02:14 - okay so this is the standard mask it
02:16 - shows where the mask exists
02:17 - but what we want is the opposite to show
02:19 - it where it does not exist
02:21 - so for that let's grow and create a new
02:23 - c-sharp script
02:24 - call this our cutout mask ui okay now in
02:28 - here
02:29 - the first thing we're going to do is add
02:32 - using unity engine.ui
02:34 - so we can access the ui functions and
02:36 - now in here
02:37 - instead of expanding mono behavior we're
02:40 - instead going to extend
02:41 - a normal image so we're essentially
02:43 - going to replace our normal image with
02:45 - the script
02:46 - and now the way that the standard ui
02:47 - mask works is by using the stencil
02:49 - buffer
02:50 - if we go back in the editor here and
02:52 - select the mask game object
02:54 - so this is the one that has the mask
02:55 - component and in here you can see that
02:58 - it's using this ui default material
03:00 - as soon as we apply the mass component
03:02 - it applied this specific material
03:04 - if we remove it or just disable it then
03:07 - there you go it's using the standard
03:08 - default ui material and as soon as we
03:10 - enable it there you go it gets all of
03:12 - these options
03:13 - so you can see all the properties that
03:14 - are related to the sensor buffer
03:16 - now the main thing is we're doing
03:18 - various comparisons and writing to the
03:20 - sensor buffer
03:21 - i won't go too deep into what exactly is
03:23 - this stencil buffer but if you'd like to
03:25 - see a dedicated video covering that
03:26 - let me know in the comments for this
03:28 - case all we need to know is that it's a
03:30 - simple grid based on the pixels on the
03:31 - screen
03:32 - and it does some comparisons with the
03:33 - underlying values so the mask here has
03:36 - this shape of the circle
03:38 - and it's writing values on the pixels
03:40 - that make up this circle shape
03:42 - then the image behind it is doing a
03:44 - comparison and only showing pixels where
03:45 - that comparison succeeds
03:47 - so what we do is essentially just invert
03:49 - this comparison operation
03:51 - for that let's go to our script and we
03:53 - are extending image okay
03:55 - and now since we are extending it we can
03:57 - override the property that gets the
03:59 - rendering material
04:00 - so to do that we do public we override
04:03 - and we're going to override the material
04:05 - material for rendering
04:13 - so this property is returning the
04:14 - material that the ui will use to render
04:16 - this object
04:17 - and here we have the base material for
04:19 - rendering so this
04:20 - essentially gives us the basic ui
04:22 - material and now we can actually try to
04:24 - modify this material
04:26 - so instead of using the base one let's
04:28 - first make a copy so
04:29 - material and we're going to make a new
04:31 - material which will essentially
04:33 - duplicate that one
04:34 - then we take this material and we're
04:36 - going to access the shader in order to
04:38 - call
04:38 - set int and we're going to modify the
04:41 - property
04:42 - stencil comp in order to modify the
04:44 - comparison that is used
04:46 - now like i said the normal mask image
04:48 - compares the value with the sensor on
04:49 - buffer and it only shows the pixel when
04:51 - that value equals what it finds
04:53 - so in here we want to do the opposite so
04:56 - not equal
04:57 - so here for the value we can use the
04:59 - compare function
05:01 - and this is inside the namespace using
05:04 - unity engine.rendering
05:07 - so we have the compare function all
05:09 - these and again we want the not equal so
05:10 - not
05:11 - equal and this one expects an end so
05:14 - just cast down into an
05:15 - end and finally we just return our new
05:18 - material
05:20 - so we're making a duplicate copy so that
05:22 - we're not modifying the actual base
05:24 - material for rendering
05:25 - otherwise we could cause all sorts of
05:26 - issues with all the other materials that
05:28 - use the bayes ui material
05:30 - okay so this is it we take the base we
05:32 - modify the comparison
05:34 - in order to make it equal we make it not
05:36 - equal and we simply use this one
05:39 - okay so let's test now here in the
05:41 - editor let's duplicate our mass
05:43 - container so we can see both effects in
05:44 - action so here just duplicate this one
05:46 - shift it on the left side and now in
05:48 - this one on the parent we're still going
05:50 - to have the same thing so just a normal
05:52 - image with a mask and what changes is
05:54 - over here on the underlying child image
05:57 - instead of using the basic image
05:58 - component we're going to drag our cutout
06:00 - mask ui script
06:02 - and right away you can actually see it
06:03 - in action so let's just tint this in
06:05 - something and just like this
06:07 - so we're using a custom ui mask image
06:10 - and over here we can see our perfect
06:12 - effect and action
06:13 - so we can change the shape of our
06:15 - underlying child image
06:17 - and it only shows where the parent is
06:19 - not whereas this one only shows where
06:20 - the parent exists
06:22 - all right so we have our effect exactly
06:24 - as we want it awesome
06:25 - so as you can see it's very simple we
06:27 - just really need to change the
06:28 - comparison operation
06:29 - on the default ui shader and it all
06:31 - works perfect
06:32 - okay now let's see this quickly apply to
06:34 - a very simple very nice transition
06:36 - cutout effect
06:37 - okay so here it is exactly the same
06:39 - thing so we just have a mask parent
06:41 - it has an image and a mask and then a
06:43 - nice animation just making it look cool
06:45 - and underlying it we have a basic image
06:48 - which is really just a black quad
06:50 - so if we try this okay so here we are
06:52 - seeing our normal scene
06:53 - and now press a button and there you go
06:55 - the animation plays the circle grows
06:57 - smaller so the cutout closes and the
06:58 - screen is now black
07:00 - now press it again and there you go the
07:02 - inverse happens and the screen opens up
07:04 - so here in the editor you can see what's
07:06 - actually happening
07:11 - so the underlying image never changes
07:12 - we're only modifying the actual mask
07:14 - parent so as we click
07:17 - there you go it shrinks down and click
07:19 - again and shrinks up
07:21 - so here it is this is a really cool
07:23 - effect that you can very easily build by
07:25 - using just this simple custom cutout
07:27 - mask
07:27 - image if you found this video helpful
07:29 - consider liking and subscribing
07:31 - this video is made possible thanks to
07:32 - these awesome supporters
07:34 - go to patreon.com unitycodemonkey to get
07:37 - some perks and help keep the videos free
07:38 - for everyone
07:39 - as always you can download the project
07:41 - files and utilities from
07:42 - unitycodemonkey.com
07:43 - subscribe to the channel for more unity
07:45 - tutorials posting query 7 comments and
07:47 - i'll see you next time
08:01 - you

Cleaned transcript:

in this video we're going to learn how to make a cutout mask in the ui using the standard ui mask you can show objects behind it and with this one we're going to invert it and instead only show objects not behind the mask this can be used to make some really interesting effects let's begin hello and welcome i'm your code monkey and this channel is all about helping you learn how to make your own games with indepth tutorials made by a professional indie game developer so if you find the video helpful consider subscribing okay so this is a really quick video that will help you if you're searching for this effect just like i was a while ago i made the code monkey steam app and for the transitions between scenes i wanted to do a simple circle shrink and grow now the simplest way to do this is by making a black quad occupy the whole screen and then have a cutout mask in the shape of a circle that shrinks and grows unity already comes with a default ui mask however that one shows everything behind the mask whereas i wanted the opposite i wanted to use the mask as a cutout and show everything not in the mask okay so let's make our cutout mask this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone over here is my basic demo project so it's just a character sitting around idle just for fun then over here in the hierarchy we can go into our ui canvas now in here let's create a very basic ui create a image okay so we have a basic quad now let's first look at how the standard mask works now with this image in order to make a mask we just add the mask component and now what this does is masks out the things behind it so let's add inside another ui image so it's a child of that one and this one let's say just give it a different color so right now depending on the size of this image it only shows where the parent is there then here the parent can have any sprite so for example let's add a simple circle sprite so the parent is in the shape of a circle and you can see that it only shows the child image where that circle exists so we can also just disable the mask graphic and now it really only shows the child on the areas where they are inside of the mask image okay so this is the standard mask it shows where the mask exists but what we want is the opposite to show it where it does not exist so for that let's grow and create a new csharp script call this our cutout mask ui okay now in here the first thing we're going to do is add using unity engine.ui so we can access the ui functions and now in here instead of expanding mono behavior we're instead going to extend a normal image so we're essentially going to replace our normal image with the script and now the way that the standard ui mask works is by using the stencil buffer if we go back in the editor here and select the mask game object so this is the one that has the mask component and in here you can see that it's using this ui default material as soon as we apply the mass component it applied this specific material if we remove it or just disable it then there you go it's using the standard default ui material and as soon as we enable it there you go it gets all of these options so you can see all the properties that are related to the sensor buffer now the main thing is we're doing various comparisons and writing to the sensor buffer i won't go too deep into what exactly is this stencil buffer but if you'd like to see a dedicated video covering that let me know in the comments for this case all we need to know is that it's a simple grid based on the pixels on the screen and it does some comparisons with the underlying values so the mask here has this shape of the circle and it's writing values on the pixels that make up this circle shape then the image behind it is doing a comparison and only showing pixels where that comparison succeeds so what we do is essentially just invert this comparison operation for that let's go to our script and we are extending image okay and now since we are extending it we can override the property that gets the rendering material so to do that we do public we override and we're going to override the material material for rendering so this property is returning the material that the ui will use to render this object and here we have the base material for rendering so this essentially gives us the basic ui material and now we can actually try to modify this material so instead of using the base one let's first make a copy so material and we're going to make a new material which will essentially duplicate that one then we take this material and we're going to access the shader in order to call set int and we're going to modify the property stencil comp in order to modify the comparison that is used now like i said the normal mask image compares the value with the sensor on buffer and it only shows the pixel when that value equals what it finds so in here we want to do the opposite so not equal so here for the value we can use the compare function and this is inside the namespace using unity engine.rendering so we have the compare function all these and again we want the not equal so not equal and this one expects an end so just cast down into an end and finally we just return our new material so we're making a duplicate copy so that we're not modifying the actual base material for rendering otherwise we could cause all sorts of issues with all the other materials that use the bayes ui material okay so this is it we take the base we modify the comparison in order to make it equal we make it not equal and we simply use this one okay so let's test now here in the editor let's duplicate our mass container so we can see both effects in action so here just duplicate this one shift it on the left side and now in this one on the parent we're still going to have the same thing so just a normal image with a mask and what changes is over here on the underlying child image instead of using the basic image component we're going to drag our cutout mask ui script and right away you can actually see it in action so let's just tint this in something and just like this so we're using a custom ui mask image and over here we can see our perfect effect and action so we can change the shape of our underlying child image and it only shows where the parent is not whereas this one only shows where the parent exists all right so we have our effect exactly as we want it awesome so as you can see it's very simple we just really need to change the comparison operation on the default ui shader and it all works perfect okay now let's see this quickly apply to a very simple very nice transition cutout effect okay so here it is exactly the same thing so we just have a mask parent it has an image and a mask and then a nice animation just making it look cool and underlying it we have a basic image which is really just a black quad so if we try this okay so here we are seeing our normal scene and now press a button and there you go the animation plays the circle grows smaller so the cutout closes and the screen is now black now press it again and there you go the inverse happens and the screen opens up so here in the editor you can see what's actually happening so the underlying image never changes we're only modifying the actual mask parent so as we click there you go it shrinks down and click again and shrinks up so here it is this is a really cool effect that you can very easily build by using just this simple custom cutout mask image if you found this video helpful consider liking and subscribing this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone as always you can download the project files and utilities from unitycodemonkey.com subscribe to the channel for more unity tutorials posting query 7 comments and i'll see you next time you
