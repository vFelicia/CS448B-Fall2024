With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - and in this video we're going to learn
00:03 - the simplest way for saving and loading
00:05 - data in unity let's begin
00:09 - so as you're making your game you will
00:12 - eventually have to deal with saving and
00:13 - loading so in the scene here I have a
00:16 - character and he can mine for gold the
00:18 - text object is is playing the total gold
00:20 - amount that he is carrying I can move
00:22 - him around and tell him to go to a goal
00:24 - node and he starts mining and you can
00:26 - see the counter going up now we want to
00:28 - save the point position any amount of
00:30 - gold and he's caring okay so let's look
00:33 - at the code the character implements
00:35 - this interface in here we can get the
00:38 - position of the player with this
00:40 - function and we can get the gold amount
00:42 - that he is carrying this is what we're
00:44 - going to use to save our data then we
00:47 - have a set position any set gold mount
00:49 - this is what we're going to use when
00:51 - loading so first let's take care of
00:53 - saving so let's go to the game Handler
00:56 - and in here let's add a button to save
00:59 - our data so first let's make a private
01:01 - void update and inside the update let's
01:04 - do an input dot get key down let's say
01:09 - Kiko dot s this is going to be our Save
01:11 - button
01:12 - so in here say so in here let's gather
01:15 - the info that we need to save first we
01:17 - need the point position so a vector3
01:19 - for the player position and we're going
01:22 - to go into the unit and get the position
01:24 - so for testing let's add a pop-up to
01:27 - view the save position so for that I'm
01:29 - going to go into the CM debug class
01:31 - which is part of the code monkey
01:33 - utilities that you can grab from unity
01:35 - code monkey comm and in there I'm going
01:37 - to use the text pop up on the mouse
01:39 - position and I'm going to display the
01:41 - player position okay let's test okay
01:45 - here I am and when I hit s yep you can
01:47 - see he's on zero zero zero and if I move
01:50 - him around he's now different okay great
01:52 - so we are correctly grabbing the
01:53 - position that we want to save
01:54 - so now let's store that position in this
01:57 - video we're saving and loading using
01:59 - player price which is the simplest way
02:01 - to save persistent data in unity in a
02:03 - later video we're going to cover saving
02:05 - and loading to a file so first let's
02:08 - cover what our player preps player
02:10 - perhaps is the cross-platform way to
02:11 - store persistent data in unity on
02:13 - Windows the player prefs gets stored in
02:16 - the registry so let's go into our code
02:18 - and in here when we hit save after we
02:20 - grab the player position let's save it
02:23 - you
02:23 - player preps now point preps doesn't
02:26 - actually have a native function for
02:28 - storing a vector3 so we're going to
02:29 - store two floats two floats in this case
02:32 - since we're working in 2d so we don't
02:34 - need the Z so in here we go into player
02:37 - preps and set a float and here you give
02:41 - the name of the field that you wish to
02:43 - save so let's say player position X and
02:47 - I'm going to save the player position
02:48 - dot X do the same thing for the wine
02:52 - okay
02:53 - now the player preps are automatically
02:55 - saved to disk when the game exits but in
02:57 - order to support saving and loading
02:59 - whilst we're in game we're going to
03:00 - manually trigger a safe so Duclair prefs
03:04 - dot safe okay so now let's run the code
03:08 - and see if it saves okay Here I am let's
03:11 - move them in there in there okay hit s
03:13 - and there you go 25 1.3 so we should
03:17 - have saved our player preps so now let's
03:19 - go and look in the registry and see if
03:21 - it was correctly safe so here we are in
03:24 - the registry on Windows it is on
03:27 - computer H hkey current user software
03:29 - unity and t editor then the name of your
03:32 - company and the name of the product and
03:34 - in here you can see if player position X
03:36 - and player position Y if you are running
03:39 - the standalone version instead of the
03:40 - editor it won't be on a different place
03:42 - it won't no longer be on unity unity
03:44 - editor it won't be directly on software
03:46 - company name and product name okay so
03:49 - this is just so we confirm that we are
03:51 - actually saving data the registry is
03:53 - persistent data so you know the save
03:56 - will still be there when you close unity
03:58 - on Mac and Linux the location is
04:00 - different on Mac is on library
04:03 - preferences and on Linux is on config
04:05 - E&T 3d so let's look at where you define
04:08 - the company name and product name so in
04:10 - the editor go into edit project settings
04:13 - and player and in here you can see the
04:17 - company name and the product name
04:19 - alright so we confirm that we are saving
04:21 - now let's handle loading so in here
04:23 - let's make another if input dot get key
04:27 - down key code and let's say L for
04:30 - loading so in here we're going to load
04:32 - so here on load let's grab the player
04:35 - position but again we
04:37 - as floats so let's grab both floats so a
04:40 - float for the player position X we're
04:44 - going to go into player crafts and get
04:46 - the float that we named player position
04:49 - X do the same thing for the wine and now
04:55 - we have the data to create our vector
04:57 - three so vector three player position
05:00 - equals a new vector3 with the X and the
05:04 - y alright so this code and lets us grab
05:09 - our player perhaps that we saved
05:11 - previously do a pop up on that found
05:13 - position and let's test so here I am and
05:16 - if I hit L yep there you go the pop up
05:18 - and he correctly loaded what we stored
05:20 - in the player press so again I can move
05:23 - him around let's say he's in here I'm
05:25 - going to save 3416 now move him away and
05:28 - I'm going to load and again 34:16 okay
05:32 - so we got civilian loading correctly
05:33 - working through player preps so now that
05:36 - we are correctly unloading the player
05:38 - position let's actually set the position
05:40 - on our unit so unit that set position
05:43 - and set it to the player position okay
05:46 - so let's see for unit now correctly
05:48 - teleports to the allotted position so
05:51 - here is on the default zero zero and if
05:53 - I hit L yep there you go he teleported
05:56 - position where he saved so I can move
05:58 - him in here there go he's there
06:00 - save move up there up there there you
06:02 - know I hit load and yep there you go he
06:05 - unloaded the position okay great
06:07 - so now let's handle what happens if we
06:09 - have no save to load since player preps
06:12 - is pretty much a dictionary we also have
06:14 - a function called has key we can use
06:16 - this to check if a save exists so before
06:19 - we try to grab any floats let's do a
06:21 - hash key so if player preps dot has key
06:26 - and let's say any of them so player
06:29 - position X if he does have this key then
06:32 - we're going to assume that we have a
06:34 - correct safe data if not then no save is
06:38 - a bell
06:42 - so just for testing let's go up here and
06:44 - clear out the player preps so do play
06:47 - preps dot delete fall so now when we run
06:52 - all of our player prep should be deleted
06:54 - which should trigger this to say no safe
06:57 - then we can save and load it again and
06:59 - make sure this logic is working
07:00 - correctly okay here I am moving around
07:03 - and now if I hit L yep there you go no
07:05 - saves since we cleared out to say when
07:07 - we start and now if I move them in here
07:10 - I hit s I've saved now I move him away
07:12 - and I hit the L and there you go he
07:15 - correctly unloaded the previous state ok
07:17 - great
07:18 - all right so now let's sort the resource
07:20 - amount as well so first let's clean up
07:23 - this code and put it in separate
07:24 - functions so go down here make a private
07:27 - boy save and the private boy load to
07:32 - keep our code nice and clean let's copy
07:35 - everything in here okay so now on our
07:42 - save let's grab the resource amounts so
07:44 - that resource amount is an int so the
07:48 - goal amount and it's on unit dot get
07:51 - gold amount we store the position as
07:53 - floats and then we store the set int for
07:58 - our goal amount and we're going to store
08:01 - our gold amount then we save our player
08:03 - profs and so on let's pop up save and
08:08 - then on our load we grab the position X
08:12 - the position Y then let's grab an end
08:15 - for the gold amount and we're going to
08:17 - go into play pipes dot get int of the
08:21 - gold amount and down here after we set
08:27 - the position then the unit dot set the
08:29 - gold amount to our loaded gold amount
08:33 - all right so now in this case we
08:35 - actually have a save that we saved
08:37 - previously and the save does have player
08:39 - position x and y but does not have a
08:41 - called amount in order to cover that
08:44 - potentiality we can use the get int and
08:46 - then add a default value in case that
08:48 - key does not
08:50 - dictionary so in this case grab to go on
08:52 - the mount and let's say a default of
08:53 - zero if the key does not exist this is
08:56 - very useful if you are making your game
08:58 - and you change what you want to save you
09:00 - can still allowed loading up save files
09:02 - from previous versions and just set the
09:04 - new values as the default so in this
09:06 - case our previous save does not contain
09:08 - a current amount so we can make sure
09:09 - that it returns zero since the key does
09:11 - not exist in the player prefs dictionary
09:13 - alright let's test okay everything's on
09:16 - default is on zero zero with zero of
09:19 - gold and now if I hit L yep we unloaded
09:22 - in the previous position and the gold
09:23 - amount is zero so now let's mine some
09:26 - gold go in there and mine that gold ok
09:29 - one two let's say three okay stop now
09:32 - let's hit save okay we have saved no
09:35 - let's reset our scene okay we're back on
09:38 - the phone 0-0 with zero cone and if I
09:40 - hit L yep there you go we unload the
09:42 - correct position with three gold amount
09:44 - and again everything some works I can
09:46 - still tell them to mine more an AC 4 5 6
09:49 - and so on and I save in here go down
09:52 - here got some more there you go 8 9 now
09:56 - unload and goes back up they're back
09:57 - with 6 okay great so there you have it
10:00 - we learn a very simple way of saving and
10:02 - loading data using player preps we
10:04 - looked at where those point profs are
10:05 - stored and how we can use the default
10:07 - values to keep save files valid between
10:09 - versions in the next video we're going
10:11 - to cover how we can save and load data
10:13 - into a file as always you can download
10:15 - the project files in utilities from
10:17 - Endicott monkey comm if you have any
10:19 - questions post them in the comments and
10:20 - I'll do my best to answer them subscribe
10:22 - for more videos and I'll see you next
10:24 - time

Cleaned transcript:

hello and welcome I'm your code monkey and in this video we're going to learn the simplest way for saving and loading data in unity let's begin so as you're making your game you will eventually have to deal with saving and loading so in the scene here I have a character and he can mine for gold the text object is is playing the total gold amount that he is carrying I can move him around and tell him to go to a goal node and he starts mining and you can see the counter going up now we want to save the point position any amount of gold and he's caring okay so let's look at the code the character implements this interface in here we can get the position of the player with this function and we can get the gold amount that he is carrying this is what we're going to use to save our data then we have a set position any set gold mount this is what we're going to use when loading so first let's take care of saving so let's go to the game Handler and in here let's add a button to save our data so first let's make a private void update and inside the update let's do an input dot get key down let's say Kiko dot s this is going to be our Save button so in here say so in here let's gather the info that we need to save first we need the point position so a vector3 for the player position and we're going to go into the unit and get the position so for testing let's add a popup to view the save position so for that I'm going to go into the CM debug class which is part of the code monkey utilities that you can grab from unity code monkey comm and in there I'm going to use the text pop up on the mouse position and I'm going to display the player position okay let's test okay here I am and when I hit s yep you can see he's on zero zero zero and if I move him around he's now different okay great so we are correctly grabbing the position that we want to save so now let's store that position in this video we're saving and loading using player price which is the simplest way to save persistent data in unity in a later video we're going to cover saving and loading to a file so first let's cover what our player preps player perhaps is the crossplatform way to store persistent data in unity on Windows the player prefs gets stored in the registry so let's go into our code and in here when we hit save after we grab the player position let's save it you player preps now point preps doesn't actually have a native function for storing a vector3 so we're going to store two floats two floats in this case since we're working in 2d so we don't need the Z so in here we go into player preps and set a float and here you give the name of the field that you wish to save so let's say player position X and I'm going to save the player position dot X do the same thing for the wine okay now the player preps are automatically saved to disk when the game exits but in order to support saving and loading whilst we're in game we're going to manually trigger a safe so Duclair prefs dot safe okay so now let's run the code and see if it saves okay Here I am let's move them in there in there okay hit s and there you go 25 1.3 so we should have saved our player preps so now let's go and look in the registry and see if it was correctly safe so here we are in the registry on Windows it is on computer H hkey current user software unity and t editor then the name of your company and the name of the product and in here you can see if player position X and player position Y if you are running the standalone version instead of the editor it won't be on a different place it won't no longer be on unity unity editor it won't be directly on software company name and product name okay so this is just so we confirm that we are actually saving data the registry is persistent data so you know the save will still be there when you close unity on Mac and Linux the location is different on Mac is on library preferences and on Linux is on config E&T 3d so let's look at where you define the company name and product name so in the editor go into edit project settings and player and in here you can see the company name and the product name alright so we confirm that we are saving now let's handle loading so in here let's make another if input dot get key down key code and let's say L for loading so in here we're going to load so here on load let's grab the player position but again we as floats so let's grab both floats so a float for the player position X we're going to go into player crafts and get the float that we named player position X do the same thing for the wine and now we have the data to create our vector three so vector three player position equals a new vector3 with the X and the y alright so this code and lets us grab our player perhaps that we saved previously do a pop up on that found position and let's test so here I am and if I hit L yep there you go the pop up and he correctly loaded what we stored in the player press so again I can move him around let's say he's in here I'm going to save 3416 now move him away and I'm going to load and again 3416 okay so we got civilian loading correctly working through player preps so now that we are correctly unloading the player position let's actually set the position on our unit so unit that set position and set it to the player position okay so let's see for unit now correctly teleports to the allotted position so here is on the default zero zero and if I hit L yep there you go he teleported position where he saved so I can move him in here there go he's there save move up there up there there you know I hit load and yep there you go he unloaded the position okay great so now let's handle what happens if we have no save to load since player preps is pretty much a dictionary we also have a function called has key we can use this to check if a save exists so before we try to grab any floats let's do a hash key so if player preps dot has key and let's say any of them so player position X if he does have this key then we're going to assume that we have a correct safe data if not then no save is a bell so just for testing let's go up here and clear out the player preps so do play preps dot delete fall so now when we run all of our player prep should be deleted which should trigger this to say no safe then we can save and load it again and make sure this logic is working correctly okay here I am moving around and now if I hit L yep there you go no saves since we cleared out to say when we start and now if I move them in here I hit s I've saved now I move him away and I hit the L and there you go he correctly unloaded the previous state ok great all right so now let's sort the resource amount as well so first let's clean up this code and put it in separate functions so go down here make a private boy save and the private boy load to keep our code nice and clean let's copy everything in here okay so now on our save let's grab the resource amounts so that resource amount is an int so the goal amount and it's on unit dot get gold amount we store the position as floats and then we store the set int for our goal amount and we're going to store our gold amount then we save our player profs and so on let's pop up save and then on our load we grab the position X the position Y then let's grab an end for the gold amount and we're going to go into play pipes dot get int of the gold amount and down here after we set the position then the unit dot set the gold amount to our loaded gold amount all right so now in this case we actually have a save that we saved previously and the save does have player position x and y but does not have a called amount in order to cover that potentiality we can use the get int and then add a default value in case that key does not dictionary so in this case grab to go on the mount and let's say a default of zero if the key does not exist this is very useful if you are making your game and you change what you want to save you can still allowed loading up save files from previous versions and just set the new values as the default so in this case our previous save does not contain a current amount so we can make sure that it returns zero since the key does not exist in the player prefs dictionary alright let's test okay everything's on default is on zero zero with zero of gold and now if I hit L yep we unloaded in the previous position and the gold amount is zero so now let's mine some gold go in there and mine that gold ok one two let's say three okay stop now let's hit save okay we have saved no let's reset our scene okay we're back on the phone 00 with zero cone and if I hit L yep there you go we unload the correct position with three gold amount and again everything some works I can still tell them to mine more an AC 4 5 6 and so on and I save in here go down here got some more there you go 8 9 now unload and goes back up they're back with 6 okay great so there you have it we learn a very simple way of saving and loading data using player preps we looked at where those point profs are stored and how we can use the default values to keep save files valid between versions in the next video we're going to cover how we can save and load data into a file as always you can download the project files in utilities from Endicott monkey comm if you have any questions post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time
