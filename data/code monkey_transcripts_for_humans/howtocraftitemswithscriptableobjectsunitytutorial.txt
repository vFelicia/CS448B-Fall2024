With timestamps:

00:00 - in this video we're going to apply
00:01 - scriptable objects to a bunch of systems
00:03 - that we made previously
00:05 - scriptable objects are great and they
00:06 - help us make our games more designer
00:08 - friendly
00:09 - so we're going to use them to define
00:10 - items and recipes
00:12 - and apply them to our inventory and
00:14 - crafting systems
00:15 - let's begin
00:18 - [Music]
00:23 - hello and welcome i'm your code monkey
00:25 - and this channel is all about helping
00:26 - you
00:27 - learn how to make your own games with
00:28 - in-depth tutorials made by a
00:30 - professional indie game developer
00:31 - so if you find the video helpful
00:32 - consider subscribing okay
00:34 - so in the last video we covered the
00:36 - basics of scriptable objects
00:38 - what they are how they are defined how
00:40 - they are created and how they can be
00:41 - used
00:42 - if you haven't seen it yet go check the
00:44 - link in the description to go watch it
00:45 - after watching that video you should be
00:47 - able to easily follow this one
00:49 - so now that we know the basics of
00:51 - scriptable objects we want to apply to a
00:53 - concrete example
00:54 - so over here i have my crafting system
00:57 - this was fully made from scratch in
00:59 - another video so check it out to learn
01:00 - more
01:01 - so i have the inventory system with a
01:03 - bunch of items
01:05 - i can split them and then drag them onto
01:07 - the crafting system window
01:09 - and if the recipe is correct it crafts a
01:11 - more complex item
01:12 - so there you go with two wood i make a
01:14 - stick and then
01:15 - if i take one stick and two diamonds
01:19 - there you go i can make a diamond sword
01:21 - now i can take that diamond sword and
01:22 - apply it to the player and there you go
01:23 - now the player has a diamond sword
01:25 - so really nice system now the way we
01:27 - made this was by creating all the items
01:29 - and recipes through code
01:31 - now that approach works just fine but if
01:33 - you want your game to be more designer
01:35 - friendly then we can use some really
01:36 - excellent scriptable objects
01:38 - by using them we can keep all of our
01:40 - data outside of our code and completely
01:42 - separate it from the logic
01:43 - this video is made possible thanks to
01:45 - these awesome supporters
01:46 - go to patreon.com unitycodemonkey to get
01:49 - some perks and help keep the videos free
01:51 - for everyone
01:52 - so over here is the item class and as
01:56 - you can see we have an enum for the item
01:58 - type
01:59 - then based on the item type we have some
02:01 - functions down here to get sprite
02:03 - so it receives a item type then it does
02:05 - a switch on it and returns a sprite
02:07 - and another one to return a caller and
02:10 - we also return the name
02:12 - now we can group all this data in a
02:13 - simple scriptable object
02:15 - so let's do just that so in here let's
02:18 - create a new c sharp script
02:20 - we're going to call this our item
02:22 - scriptable object
02:24 - and here we are all right now again
02:27 - first things first replace monobehavior
02:28 - instead
02:29 - extend scriptable object
02:32 - and now let's see all the data that we
02:34 - need to represent a single item
02:36 - now first of all we actually have two
02:38 - options regarding the type
02:40 - so we can continue using an inum just
02:42 - like we used over here for the basic
02:44 - item
02:45 - so we can use this to define the type or
02:47 - we can use the scriptable object itself
02:50 - as a type so those are two interesting
02:52 - approaches
02:53 - now if we were building this system from
02:55 - scratch the better approach would
02:56 - possibly be to
02:57 - use the scriptable object itself as the
02:59 - type and not have to use the enum at all
03:02 - however in this case since we're
03:03 - upgrading an existing system
03:05 - it's probably going to be somewhere to
03:06 - keep the enum type for now
03:08 - so later when everything is working with
03:10 - scriptable objects if we want we can
03:12 - then work on removing the type in them
03:14 - so for now let's store a public item dot
03:17 - item type
03:18 - for the item type inum then let's also
03:21 - store a string
03:23 - for the item name and let's also store a
03:27 - sprite for the
03:28 - item sprite okay so we have a type
03:32 - a name and a sprite pretty basic now in
03:34 - order to create it
03:35 - let's add the attribute create asset
03:37 - menu
03:38 - and let's set a mini name let's put it
03:42 - inside a folder called scriptable
03:43 - objects
03:45 - and let's call this our item scriptable
03:47 - object
03:48 - all right so that's it we have our
03:50 - scriptable object definition with all
03:52 - the fields that we're going to need to
03:53 - store the data for any of our items
03:56 - now back in the editor let's create it
03:58 - so for that to keep things nice and
03:59 - organized let's create a new folder
04:02 - for our scriptable objects and inside
04:06 - let's go to create scriptable objects
04:08 - and yep let's create an item scriptable
04:10 - object
04:11 - and for this one let's start off simple
04:12 - with just a piece of wood
04:14 - so now here let's set all the data for
04:16 - descriptive object so first of all for
04:18 - the type
04:19 - let's select wood then for the item name
04:21 - let's call it wood
04:22 - and for the atom sprite let's also
04:24 - select the wood sprite
04:26 - alright that's it so here we have a very
04:28 - simple scriptable object defining our
04:30 - single wood item
04:32 - it has a type name and a simple sprite
04:35 - now let's go to our item class and in
04:37 - here let's modify this
04:38 - to no longer work with the inum but
04:41 - instead of the enum it's going to
04:42 - receive
04:42 - a scriptable object so let's replace
04:45 - this with a
04:46 - item scriptable object for the item
04:48 - scriptable object
04:51 - all right that's it and naturally we see
04:53 - a bunch of errors since the rest of our
04:55 - code is
04:55 - actually expecting the item to have a
04:57 - new field so we need to go through all
04:59 - the errors and replace all the instances
05:01 - where we were using the inum
05:03 - and instead now we're going to use the
05:04 - atom scriptable object so for example on
05:07 - here on the git sprite
05:08 - instead of having to ask for this place
05:10 - and get a switch
05:12 - we simply go into the item scriptable
05:14 - object
05:15 - and we return the actual item sprite so
05:18 - the sprite is no longer stored in the
05:19 - code but rather in the scriptable object
05:21 - now here for the two string instead of
05:23 - returning the item type we go into the
05:25 - script long object to return the item
05:27 - name
05:29 - all right so i fixed all the errors in
05:31 - here now let's go and see the inventory
05:34 - and yep over here we have a bunch of
05:36 - errors because again we're using the
05:37 - item type
05:38 - now again all this code was made fully
05:41 - from scratch in the previous videos
05:42 - where we made the inventory and crafting
05:44 - system
05:45 - so if you feel lost go re-watch those
05:47 - and you'll be able to easily understand
05:48 - the changes that we're making
05:50 - okay so here in the inventory we have
05:52 - our starting items which again are using
05:54 - the item type
05:55 - so let's comment this out for now
05:58 - then down here let's see the other
05:59 - errors okay so here we're comparing the
06:02 - item type
06:03 - so you can do pretty much exactly the
06:04 - same thing except we compare the atoms
06:06 - scriptable object
06:08 - all right there it is done here we're
06:10 - doing another comparison
06:13 - and right now we can just remove this
06:15 - function
06:17 - all right so all the errors have been
06:18 - fixed right now and over here in our
06:20 - base testing script
06:22 - we are creating the player's inventory
06:25 - so we can also add a field
06:27 - so we have a reference to our item
06:29 - scriptable object
06:35 - and just for testing we can get the
06:37 - player inventory
06:39 - in order to add an item and we create an
06:43 - item
06:45 - pressing the item scriptable object
06:49 - and a certain amount
06:52 - all right so just like this the basics
06:54 - for our inventory should be working
06:56 - so here we are and on the testing script
06:58 - we can see we have film for a scriptable
07:00 - object
07:01 - and just select how you would scriptable
07:03 - object okay let's test and see if the
07:05 - inventory is now working with scriptable
07:07 - objects
07:08 - and yep there it is over here we have
07:09 - our starting inventory and yep it does
07:11 - indeed have 10 pieces of wood
07:13 - alright so it's all working great we
07:14 - changed our code to be based on
07:16 - scriptable objects instead of enums and
07:18 - everything works perfect
07:19 - awesome now let's continue instead of
07:22 - making our starting inventory over here
07:24 - through our testing script
07:26 - let's once again separate the logic from
07:28 - the data and actually expose it in the
07:30 - editor
07:31 - so let's create a simple stroke to hone
07:32 - our starting items
07:46 - all right so here it is so we define
07:48 - this struct which contains a item
07:50 - scriptable object and then an amount
07:52 - it's also a system not serializable so
07:54 - it actually shows up in the editor
07:56 - then up here we've got a field for an
07:58 - array of starting items
08:00 - and then on start we simply get the
08:02 - player's inventory
08:04 - we cycle through the array and we add
08:06 - the items to the player inventory
08:08 - so there it is very simple and once
08:10 - again the whole purpose is to be fully
08:12 - databased and fully exposed in the
08:13 - editor
08:14 - so back in the editor over here we can
08:16 - see our starting item array
08:18 - and now let's say once again just start
08:20 - with one very simple
08:22 - then we take the scriptable object let's
08:23 - select the wood and now it's like six
08:26 - pieces of wood
08:27 - okay let's see if our inventory does
08:29 - start with six pieces of wood
08:31 - and if there you go over there we have
08:32 - indeed six pieces of wood
08:34 - all right so we have the inventory fully
08:36 - working on with its starting state
08:38 - but now it's own working with scriptable
08:40 - objects
08:41 - so again we completely took all of the
08:43 - data from inside our code and separated
08:45 - it from the logic
08:46 - and just to verify this is all working
08:48 - let's try making another scriptable
08:50 - object
08:51 - so once again right click create a new
08:52 - one new item
08:54 - let's call this a diamond and again for
08:56 - now we select the type in
08:58 - um but again in the future we're going
09:00 - to use the scripting logic itself as a
09:01 - type
09:02 - so we've got a basic diamond select the
09:04 - sprite for the diamond
09:06 - and now in order to add it to our
09:07 - starting inventory just go in here
09:10 - and let's add another element to our
09:12 - starting items
09:13 - and this one will be a diamond and let's
09:15 - say add two diamonds
09:16 - now let's see if it does indeed update
09:18 - without ever touching the code
09:20 - and yep there you go we have wood and
09:22 - diamonds in our starting inventory
09:24 - so once again we didn't touch our code
09:26 - everything is completely databased
09:28 - right awesome so far so good so now that
09:31 - the
09:31 - inventory is working let's make the
09:33 - crafting system based on scriptable
09:35 - objects now the one thing we need to do
09:37 - for that
09:38 - is to define a scriptable object for the
09:40 - recipe
09:41 - so let's do just that so create a new
09:44 - c-sharp script
09:46 - call this the recipe scriptable object
09:49 - and once again instead of modern
09:50 - behavior it's a scriptable object
09:55 - and now again let's think of what data
09:57 - do we need to store a actual recipe
09:59 - so we can inspect the crafting system
10:01 - that again we've only made in the
10:03 - previous video
10:04 - and over here we see our recipe
10:06 - dictionary
10:07 - and we can see a whole bunch of
10:08 - different recipes so we can see that
10:10 - we're creating a dictionary
10:12 - where we're going to hold the output
10:14 - type as the key
10:15 - so for this one is the recipe for a
10:17 - stick it's going to have this recipe
10:19 - and the recipe itself is essentially a
10:21 - 3x3 crafting matrix with all the items
10:24 - required
10:25 - so this one you can see it requires none
10:27 - on all these except
10:28 - two wood on these positions okay so we
10:31 - need to store the output and then our
10:33 - item matrix
10:34 - so over here in our scriptable object
10:35 - definition let's first define a item
10:37 - scriptable object
10:39 - for the output and then we just need to
10:42 - store our crafting matrix
10:44 - so again that's going to be of type
10:45 - scriptable object
10:47 - and then let's call it item00 and so on
10:55 - all right so here we have our 3x3
10:57 - crafting matrix
10:58 - defined of type item script object so we
11:00 - got from zero zero all the way up to two
11:02 - two
11:03 - all right so just like this we have our
11:05 - recipe definition
11:06 - now again just add the create asset menu
11:13 - all right there it is now back in here
11:15 - on our scriptable objects
11:17 - let's create a new scriptable object a
11:19 - recipe scriptable object
11:21 - let's make this our stick recipe
11:28 - so we have our two items
11:32 - and then we have our recipe now this is
11:34 - the recipe for the stick so we also need
11:36 - to create the stick
11:37 - scriptable object so again very simple
11:40 - just create new scriptable object
11:42 - and set up on the data and now we just
11:44 - need to fill in our data so first of all
11:46 - for the output the output of this will
11:48 - be a stick
11:49 - and then for the recipe we're going to
11:51 - have two pieces of wood right down the
11:52 - middle
11:53 - so that's going to be on one zero a
11:55 - piece of wood
11:56 - and on one one also a piece of wood all
11:59 - right so there's our recipe definition
12:02 - and if you wanted you could combine this
12:03 - with a custom inspector to really make
12:05 - the recipes look visually great
12:07 - now i covered custom editors in a
12:09 - previous video and you can easily apply
12:10 - that knowledge here
12:12 - so in fact let me do that really quick
12:13 - all right so here it is the recipe with
12:15 - a really nice custom editor
12:17 - we have the output and we can easily
12:19 - visualize the matrix for our crafting
12:21 - so here is the whole editor script it's
12:24 - long but it's pretty simple it's
12:26 - essentially just copy pasted for all
12:28 - nine positions
12:29 - this is included in the project file so
12:31 - if you want to browse around this to see
12:32 - how it works you can go and download
12:33 - that
12:34 - so we have our recipe scriptable object
12:37 - and it looks really awesome thanks to
12:38 - our custom inspector
12:40 - okay now let's actually use it in our
12:42 - crafting system
12:43 - so here we're no longer going to have a
12:45 - recipe dictionary
12:47 - instead we're going to have is going to
12:49 - be just a list
12:51 - of recipes scriptable object
12:56 - and where we set it up we're creating
12:58 - the crafting system so let's pass it in
12:59 - there
13:02 - okay now let's remove the dictionary and
13:04 - now we're going to see a whole ton of
13:06 - errors
13:07 - so let's fix all of them
13:10 - okay the main one is just down here
13:12 - where we try to get the recipe output
13:15 - and now again we are not using the item
13:17 - time for rather the item scriptable
13:19 - object
13:29 - okay so here we cycling through the
13:31 - recipe scriptable object
13:32 - list and now here it's also a great way
13:34 - of seeing how you can store data with
13:36 - scriptable objects
13:37 - but you can also run some logic so for
13:39 - example we need to ask the
13:41 - position on x y so we can add that as a
13:44 - symbol function
13:45 - so on our recipe definition let's do
13:47 - that
13:58 - all right there you go just a pretty
13:59 - simple function to return the various
14:00 - fields depending on the x and y
14:02 - and now here we go into the scriptable
14:04 - object and we use that nice function
14:12 - alright so there it is pretty much the
14:13 - exact same logic and if the recipe is
14:15 - indeed complete then we're going to
14:17 - return the output
14:19 - and if not then we're going to return
14:20 - none which in this case is not
14:22 - then down here on the create output
14:30 - and yep there we go all right so all the
14:32 - errors are fixed now our recipe data is
14:34 - no longer written directly in the code
14:36 - but rather it is stored as a scriptable
14:38 - object
14:39 - now the last thing we need is just to
14:40 - pass in all the recipes to our crafting
14:42 - system so
14:44 - here in our testing script we have the
14:46 - starting items and let's also add all
14:48 - the recipes
14:49 - and we pass that into our crafting
14:51 - system okay now back in the editor we
14:53 - have our testing script with the recipe
14:55 - script long object list and just drag
14:57 - the stick recipe
14:58 - alright everything should be working
15:00 - let's try okay so here we are
15:02 - let's try making a stick now for the
15:04 - stick we need two pieces of wood so
15:06 - let's split that put one there
15:07 - then one down there and if there we go
15:09 - we have our stick recipe
15:11 - and now we can take this and drag and
15:12 - yep there you go we have a stick
15:14 - all right awesome so our recipe is
15:16 - working perfectly and now for example if
15:18 - we wanted to change the recipe
15:20 - using the script mall object system it's
15:22 - really simple so in here
15:23 - let's say the wood is not down the
15:25 - middle let's say in order to make a
15:27 - stick
15:27 - we put none there and we put a diamond
15:29 - over there on the corner
15:30 - so that's all we have to change we don't
15:32 - touch the code at all and let's run
15:34 - and if we use our previous recipe nope
15:37 - doesn't work
15:38 - but now we use the new recipe and yep
15:40 - there you go we have our very nice stick
15:42 - okay so here you can see how we have
15:44 - indeed converted
15:45 - our inventory and our crafting system to
15:48 - work entirely with scriptable objects
15:50 - there's no data stored in the code
15:52 - itself the code only handles logic
15:54 - now one big benefit of using scriptable
15:56 - objects as opposed to making it all
15:58 - through code is that adding new items
15:59 - and recipes is very simple
16:01 - so we don't need to change absolutely
16:03 - anything in the code
16:04 - all we need to do is create some new
16:06 - objects so let's create a new item
16:07 - scriptable object
16:09 - let's do it for the diamond sword
16:16 - so we have our data for the atom now
16:18 - let's make the recipe
16:22 - and again using our really nice custom
16:24 - editor we can make this really easily so
16:26 - the output won't be a diamond sword
16:28 - and let's say we need one diamond in
16:30 - here one diamond in here and a stick
16:32 - down here
16:33 - all right that's a recipe we just added
16:36 - to our testing so that the recipe is
16:37 - seen by the crafting system
16:40 - and now if we run okay here we are now
16:42 - first we need the stick
16:43 - so let's make that yep there you go
16:45 - that's a recipe so we got a stick
16:47 - now we put the stick we split the
16:48 - diamonds put one there one there and
16:50 - there you go we have our very nice item
16:52 - so you can see how literally it was
16:54 - super easy just to add a completely new
16:56 - different type of item
16:57 - as well as the recipe to actually make
16:59 - that item so let's try a different one
17:01 - let's say create new item for a chicken
17:04 - breast
17:06 - and then another item for some chicken
17:09 - nuggets
17:16 - all right we have our items now let's
17:18 - make the recipe
17:23 - all right here's the recipe once again
17:25 - we add the recipe to our list
17:27 - you could also dynamically populate this
17:29 - list and set it manually
17:30 - and then let's also add some chicken
17:32 - breast to our starting adam array
17:34 - okay should be working let's test and
17:36 - even right away we start off with some
17:37 - chicken in our inventory
17:39 - so now let's craft some nuggets so we
17:40 - need three stacks so put one there
17:42 - one there one there there you go we got
17:44 - some really nice chicken nuggets
17:46 - so there you go yup just like that so
17:48 - you can see how without touching the
17:49 - coat at all we managed to make a new
17:51 - item and a new recipe
17:52 - right awesome
18:01 - all right so i've created two new items
18:02 - for the hamilton armor and there you go
18:04 - just equipped a nice helmet equipped
18:06 - nice armor yep
18:07 - now let's make a diamond sword
18:11 - there it is the stick two diamonds there
18:13 - you got the item sword and equip it and
18:14 - there you go everything looks really
18:16 - awesome
18:16 - so again all this is completely 100 data
18:19 - driven
18:20 - now again this is just one example use
18:22 - case scriptable objects can be used for
18:23 - just about anything
18:25 - you can use it to store game data just
18:27 - like we did here
18:28 - or you can also use them for making some
18:30 - really useful custom editor tools
18:32 - most unity tools like shadowgraph and
18:34 - the scriptable render pipeline
18:36 - actually use crypto objects extensively
18:38 - to manage their data
18:39 - so take that as inspiration and make
18:41 - your games more designer friendly with
18:42 - better tools by using scriptable objects
18:45 - if you found this video helpful consider
18:47 - liking and subscribing this video is
18:49 - made possible thanks to these awesome
18:50 - supporters
18:51 - go to patreon.com unitycodemonkey to get
18:54 - some perks and help keep the videos free
18:56 - for everyone
18:57 - as always you can download the project
18:58 - files and utilities from
18:59 - unitycodemonkey.com
19:01 - subscribe to the channel for more unity
19:02 - tutorials post any questions have
19:04 - incomes and i'll see you next time
19:44 - you

Cleaned transcript:

in this video we're going to apply scriptable objects to a bunch of systems that we made previously scriptable objects are great and they help us make our games more designer friendly so we're going to use them to define items and recipes and apply them to our inventory and crafting systems let's begin hello and welcome i'm your code monkey and this channel is all about helping you learn how to make your own games with indepth tutorials made by a professional indie game developer so if you find the video helpful consider subscribing okay so in the last video we covered the basics of scriptable objects what they are how they are defined how they are created and how they can be used if you haven't seen it yet go check the link in the description to go watch it after watching that video you should be able to easily follow this one so now that we know the basics of scriptable objects we want to apply to a concrete example so over here i have my crafting system this was fully made from scratch in another video so check it out to learn more so i have the inventory system with a bunch of items i can split them and then drag them onto the crafting system window and if the recipe is correct it crafts a more complex item so there you go with two wood i make a stick and then if i take one stick and two diamonds there you go i can make a diamond sword now i can take that diamond sword and apply it to the player and there you go now the player has a diamond sword so really nice system now the way we made this was by creating all the items and recipes through code now that approach works just fine but if you want your game to be more designer friendly then we can use some really excellent scriptable objects by using them we can keep all of our data outside of our code and completely separate it from the logic this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone so over here is the item class and as you can see we have an enum for the item type then based on the item type we have some functions down here to get sprite so it receives a item type then it does a switch on it and returns a sprite and another one to return a caller and we also return the name now we can group all this data in a simple scriptable object so let's do just that so in here let's create a new c sharp script we're going to call this our item scriptable object and here we are all right now again first things first replace monobehavior instead extend scriptable object and now let's see all the data that we need to represent a single item now first of all we actually have two options regarding the type so we can continue using an inum just like we used over here for the basic item so we can use this to define the type or we can use the scriptable object itself as a type so those are two interesting approaches now if we were building this system from scratch the better approach would possibly be to use the scriptable object itself as the type and not have to use the enum at all however in this case since we're upgrading an existing system it's probably going to be somewhere to keep the enum type for now so later when everything is working with scriptable objects if we want we can then work on removing the type in them so for now let's store a public item dot item type for the item type inum then let's also store a string for the item name and let's also store a sprite for the item sprite okay so we have a type a name and a sprite pretty basic now in order to create it let's add the attribute create asset menu and let's set a mini name let's put it inside a folder called scriptable objects and let's call this our item scriptable object all right so that's it we have our scriptable object definition with all the fields that we're going to need to store the data for any of our items now back in the editor let's create it so for that to keep things nice and organized let's create a new folder for our scriptable objects and inside let's go to create scriptable objects and yep let's create an item scriptable object and for this one let's start off simple with just a piece of wood so now here let's set all the data for descriptive object so first of all for the type let's select wood then for the item name let's call it wood and for the atom sprite let's also select the wood sprite alright that's it so here we have a very simple scriptable object defining our single wood item it has a type name and a simple sprite now let's go to our item class and in here let's modify this to no longer work with the inum but instead of the enum it's going to receive a scriptable object so let's replace this with a item scriptable object for the item scriptable object all right that's it and naturally we see a bunch of errors since the rest of our code is actually expecting the item to have a new field so we need to go through all the errors and replace all the instances where we were using the inum and instead now we're going to use the atom scriptable object so for example on here on the git sprite instead of having to ask for this place and get a switch we simply go into the item scriptable object and we return the actual item sprite so the sprite is no longer stored in the code but rather in the scriptable object now here for the two string instead of returning the item type we go into the script long object to return the item name all right so i fixed all the errors in here now let's go and see the inventory and yep over here we have a bunch of errors because again we're using the item type now again all this code was made fully from scratch in the previous videos where we made the inventory and crafting system so if you feel lost go rewatch those and you'll be able to easily understand the changes that we're making okay so here in the inventory we have our starting items which again are using the item type so let's comment this out for now then down here let's see the other errors okay so here we're comparing the item type so you can do pretty much exactly the same thing except we compare the atoms scriptable object all right there it is done here we're doing another comparison and right now we can just remove this function all right so all the errors have been fixed right now and over here in our base testing script we are creating the player's inventory so we can also add a field so we have a reference to our item scriptable object and just for testing we can get the player inventory in order to add an item and we create an item pressing the item scriptable object and a certain amount all right so just like this the basics for our inventory should be working so here we are and on the testing script we can see we have film for a scriptable object and just select how you would scriptable object okay let's test and see if the inventory is now working with scriptable objects and yep there it is over here we have our starting inventory and yep it does indeed have 10 pieces of wood alright so it's all working great we changed our code to be based on scriptable objects instead of enums and everything works perfect awesome now let's continue instead of making our starting inventory over here through our testing script let's once again separate the logic from the data and actually expose it in the editor so let's create a simple stroke to hone our starting items all right so here it is so we define this struct which contains a item scriptable object and then an amount it's also a system not serializable so it actually shows up in the editor then up here we've got a field for an array of starting items and then on start we simply get the player's inventory we cycle through the array and we add the items to the player inventory so there it is very simple and once again the whole purpose is to be fully databased and fully exposed in the editor so back in the editor over here we can see our starting item array and now let's say once again just start with one very simple then we take the scriptable object let's select the wood and now it's like six pieces of wood okay let's see if our inventory does start with six pieces of wood and if there you go over there we have indeed six pieces of wood all right so we have the inventory fully working on with its starting state but now it's own working with scriptable objects so again we completely took all of the data from inside our code and separated it from the logic and just to verify this is all working let's try making another scriptable object so once again right click create a new one new item let's call this a diamond and again for now we select the type in um but again in the future we're going to use the scripting logic itself as a type so we've got a basic diamond select the sprite for the diamond and now in order to add it to our starting inventory just go in here and let's add another element to our starting items and this one will be a diamond and let's say add two diamonds now let's see if it does indeed update without ever touching the code and yep there you go we have wood and diamonds in our starting inventory so once again we didn't touch our code everything is completely databased right awesome so far so good so now that the inventory is working let's make the crafting system based on scriptable objects now the one thing we need to do for that is to define a scriptable object for the recipe so let's do just that so create a new csharp script call this the recipe scriptable object and once again instead of modern behavior it's a scriptable object and now again let's think of what data do we need to store a actual recipe so we can inspect the crafting system that again we've only made in the previous video and over here we see our recipe dictionary and we can see a whole bunch of different recipes so we can see that we're creating a dictionary where we're going to hold the output type as the key so for this one is the recipe for a stick it's going to have this recipe and the recipe itself is essentially a 3x3 crafting matrix with all the items required so this one you can see it requires none on all these except two wood on these positions okay so we need to store the output and then our item matrix so over here in our scriptable object definition let's first define a item scriptable object for the output and then we just need to store our crafting matrix so again that's going to be of type scriptable object and then let's call it item00 and so on all right so here we have our 3x3 crafting matrix defined of type item script object so we got from zero zero all the way up to two two all right so just like this we have our recipe definition now again just add the create asset menu all right there it is now back in here on our scriptable objects let's create a new scriptable object a recipe scriptable object let's make this our stick recipe so we have our two items and then we have our recipe now this is the recipe for the stick so we also need to create the stick scriptable object so again very simple just create new scriptable object and set up on the data and now we just need to fill in our data so first of all for the output the output of this will be a stick and then for the recipe we're going to have two pieces of wood right down the middle so that's going to be on one zero a piece of wood and on one one also a piece of wood all right so there's our recipe definition and if you wanted you could combine this with a custom inspector to really make the recipes look visually great now i covered custom editors in a previous video and you can easily apply that knowledge here so in fact let me do that really quick all right so here it is the recipe with a really nice custom editor we have the output and we can easily visualize the matrix for our crafting so here is the whole editor script it's long but it's pretty simple it's essentially just copy pasted for all nine positions this is included in the project file so if you want to browse around this to see how it works you can go and download that so we have our recipe scriptable object and it looks really awesome thanks to our custom inspector okay now let's actually use it in our crafting system so here we're no longer going to have a recipe dictionary instead we're going to have is going to be just a list of recipes scriptable object and where we set it up we're creating the crafting system so let's pass it in there okay now let's remove the dictionary and now we're going to see a whole ton of errors so let's fix all of them okay the main one is just down here where we try to get the recipe output and now again we are not using the item time for rather the item scriptable object okay so here we cycling through the recipe scriptable object list and now here it's also a great way of seeing how you can store data with scriptable objects but you can also run some logic so for example we need to ask the position on x y so we can add that as a symbol function so on our recipe definition let's do that all right there you go just a pretty simple function to return the various fields depending on the x and y and now here we go into the scriptable object and we use that nice function alright so there it is pretty much the exact same logic and if the recipe is indeed complete then we're going to return the output and if not then we're going to return none which in this case is not then down here on the create output and yep there we go all right so all the errors are fixed now our recipe data is no longer written directly in the code but rather it is stored as a scriptable object now the last thing we need is just to pass in all the recipes to our crafting system so here in our testing script we have the starting items and let's also add all the recipes and we pass that into our crafting system okay now back in the editor we have our testing script with the recipe script long object list and just drag the stick recipe alright everything should be working let's try okay so here we are let's try making a stick now for the stick we need two pieces of wood so let's split that put one there then one down there and if there we go we have our stick recipe and now we can take this and drag and yep there you go we have a stick all right awesome so our recipe is working perfectly and now for example if we wanted to change the recipe using the script mall object system it's really simple so in here let's say the wood is not down the middle let's say in order to make a stick we put none there and we put a diamond over there on the corner so that's all we have to change we don't touch the code at all and let's run and if we use our previous recipe nope doesn't work but now we use the new recipe and yep there you go we have our very nice stick okay so here you can see how we have indeed converted our inventory and our crafting system to work entirely with scriptable objects there's no data stored in the code itself the code only handles logic now one big benefit of using scriptable objects as opposed to making it all through code is that adding new items and recipes is very simple so we don't need to change absolutely anything in the code all we need to do is create some new objects so let's create a new item scriptable object let's do it for the diamond sword so we have our data for the atom now let's make the recipe and again using our really nice custom editor we can make this really easily so the output won't be a diamond sword and let's say we need one diamond in here one diamond in here and a stick down here all right that's a recipe we just added to our testing so that the recipe is seen by the crafting system and now if we run okay here we are now first we need the stick so let's make that yep there you go that's a recipe so we got a stick now we put the stick we split the diamonds put one there one there and there you go we have our very nice item so you can see how literally it was super easy just to add a completely new different type of item as well as the recipe to actually make that item so let's try a different one let's say create new item for a chicken breast and then another item for some chicken nuggets all right we have our items now let's make the recipe all right here's the recipe once again we add the recipe to our list you could also dynamically populate this list and set it manually and then let's also add some chicken breast to our starting adam array okay should be working let's test and even right away we start off with some chicken in our inventory so now let's craft some nuggets so we need three stacks so put one there one there one there there you go we got some really nice chicken nuggets so there you go yup just like that so you can see how without touching the coat at all we managed to make a new item and a new recipe right awesome all right so i've created two new items for the hamilton armor and there you go just equipped a nice helmet equipped nice armor yep now let's make a diamond sword there it is the stick two diamonds there you got the item sword and equip it and there you go everything looks really awesome so again all this is completely 100 data driven now again this is just one example use case scriptable objects can be used for just about anything you can use it to store game data just like we did here or you can also use them for making some really useful custom editor tools most unity tools like shadowgraph and the scriptable render pipeline actually use crypto objects extensively to manage their data so take that as inspiration and make your games more designer friendly with better tools by using scriptable objects if you found this video helpful consider liking and subscribing this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone as always you can download the project files and utilities from unitycodemonkey.com subscribe to the channel for more unity tutorials post any questions have incomes and i'll see you next time you
