With timestamps:

00:00 - hello and welcome I'm your code monkey
00:02 - in this video we're going to create the
00:03 - mercenary bounty bar from Assassin's
00:05 - Creed Odyssey we're going to make it in
00:06 - the UI with a script to dynamically
00:08 - modify the number of mercenaries and the
00:10 - size of the bar between them let's begin
00:15 - so in assistance read Odyssey there is a
00:18 - bounty bar which is for the mercenary
00:20 - system essentially it starts off empty
00:22 - and increases every time you are caught
00:24 - doing a crime if it reaches a certain
00:26 - amount a mercenary won't come after you
00:28 - it's a pretty simple bar but still
00:30 - require some interesting logic so we're
00:32 - going to make it in the UI I have my
00:35 - basic scene set up over here I have the
00:38 - canvas which is being rendered through
00:40 - this UI camera for an interview one how
00:43 - this is set up you can check out the
00:45 - simple UI setup video then in here I
00:48 - have some textures first I have a bar
00:50 - border which won't go on top of our bar
00:53 - then I have the gray and red helmet and
00:56 - finally a simple white gradient which
00:58 - we're going to Tintin in red as the bar
01:00 - fills up so let's first set up the bar
01:03 - in the editor and then we'll make the
01:04 - code to control so in our canvas let's
01:07 - begin by creating an empty game object
01:09 - this will be our container so let's name
01:11 - it
01:12 - mercenary bar inside let's create
01:16 - another empty game object this one let's
01:18 - name it bar and this is the container
01:21 - for our bar so let's set the size to 70
01:25 - 15 okay inside let's make another empty
01:29 - game object this will be our bar
01:30 - background and for this one let's add an
01:34 - image and add the white gradient texture
01:37 - for the size let's expand it to fill up
01:40 - the entire parent so set everything to
01:42 - zero and right then the bar is occupying
01:45 - the bar size so we can change the parent
01:47 - and the inside changes with it okay now
01:50 - it's duplicated and make the bar filled
01:52 - which again is stretch to occupy
01:55 - everything and for this one let's tint
01:57 - it in red now in here on the image type
02:00 - instead of being in simple let's set it
02:02 - to filmed on the film method let's
02:05 - choose horizontal and film origin from
02:07 - the left this way we can easily set the
02:09 - fill amount to increase and decrease the
02:11 - size of our bar okay so now the last
02:14 - thing we need is a border so let's
02:16 - duplicate the background name this the
02:18 - border and drag the bar border sprite
02:21 - now as you can see in here the texture
02:24 - looks a bit stretched in there on the
02:26 - left side it's quite stretching there is
02:27 - quite small
02:29 - we can fix this by going into the bar
02:31 - border texture and open the sprite
02:34 - editor and in here if we drag on the
02:36 - sides we can essentially set a border we
02:39 - can also go down here and simply set the
02:41 - bar to 5 on every side so essentially we
02:45 - are saying do not stretch these corners
02:47 - in here and only stretch the empty space
02:49 - in the middle so if we hit apply and go
02:52 - back it's now select the border and here
02:55 - on the image type instead of simple
02:56 - let's set it to sliced and now as you
02:58 - can see everything is scaling much
03:00 - better ok so this is our bar only
03:02 - created in the editor this will be the
03:05 - template that we're going to use to
03:06 - duplicate and modify through our code so
03:09 - let's rename this from bar and make it a
03:11 - bar template let's add a new UI image
03:15 - for the helmet and the helmet won't
03:19 - simply have the helmet sprite let's set
03:21 - it on 70 70 and just like that alright
03:24 - so our home bar is set up in the editor
03:27 - as you can see we got the bar template
03:28 - which has a background then it has a
03:30 - filled corner which we can increase and
03:32 - decrease then it has a border just to
03:35 - make it all nice and then outside of the
03:37 - bar we have the helmet template which
03:39 - can either be in grey or then we won't
03:41 - switch to red when the bar is film so
03:44 - now that everything is set up let's work
03:46 - on the code so it's going to the scripts
03:48 - folder and create a new C sharp script
03:50 - and let's name this the mercenary bar
03:53 - let's drag it onto our mercenary bar yep
03:56 - like that and check out the code okay so
03:59 - in here the first thing we're going to
04:01 - do is grab a reference to our templates
04:03 - so let's go up here and make a private
04:05 - rect transform and we're going to grab
04:07 - the bar template and then also grab the
04:10 - helmet template we're going to grab it
04:14 - on the void awake so bar templates
04:17 - equals transform dot find our bar
04:21 - templates and get the component of
04:24 - fabric transform and do the same for the
04:26 - helmet all right now just for testing
04:31 - let's try duplicating our bar so in here
04:34 - do a rect transform for the new bar
04:37 - which will be an instantiate of our bar
04:41 - temp
04:41 - and into the parent which is this
04:43 - transform and then let's set the anchor
04:48 - position to be somewhere on the left
04:50 - side alright let's test and see if the
04:53 - new bar pops up yep there's the original
04:56 - bar our template and there's a new
04:58 - incense she added bar okay so we are now
05:00 - correctly duplicating our template so
05:03 - now let's go back into our code and down
05:06 - here let's make a new class named bar so
05:09 - a private class named bar now this class
05:15 - is responsible for handling the logic of
05:17 - a single bar and the total mercenary bar
05:20 - will be composed of several of these
05:22 - bars so inside let's add some member
05:27 - variables to store the bar and helmet
05:29 - transforms so a private rect transform
05:32 - for the bar correct transform and we're
05:39 - going to receive them on the constructor
05:46 - okay so this is the basic composition of
05:48 - our clients now let's go up here on to
05:51 - the mercenary bar class and let's make a
05:53 - function to create a bar so make a
05:55 - private bar create bar inside let's do
06:01 - what we did for testing up here which is
06:03 - we instantiate a new bar from the
06:05 - template what is also in Senshi Utley
06:09 - helmets and finally create a bar object
06:18 - so Bar object equals a new bar to give
06:20 - it the bar right transform and then the
06:22 - helmet right transform and finally we
06:25 - return our bar object okay so now let's
06:28 - go up here and first of all let's hide
06:31 - our templates so we're going to do bar
06:34 - template dot game object
06:35 - dot set active to false so that the
06:38 - templates are hidden by default do the
06:41 - same for the helmet and in here when we
06:44 - instantiate we actually need to
06:45 - re-enable it so go back into the game
06:47 - objects active and for this one which is
06:50 - the one that is in Senshi ated set it to
06:51 - true and
06:52 - same for the helmet so then let's go up
06:55 - here and create a new bar just like that
06:58 - okay so let's test and we should be able
07:00 - to see a new bar along with a new helmet
07:02 - yep there they are a new bar and new
07:05 - helmet and if we hit stop you can see
07:07 - that the templates are still there but
07:09 - they are disabled and the clones have
07:11 - been accentuated okay so far so good
07:14 - now on the create bar let's receive a
07:17 - position any size for the bar so a
07:19 - vector2
07:20 - for the incurred position and another
07:23 - vector two for the size let's set the
07:27 - bar dot anchored position into our
07:29 - anchored position and set the bar right
07:32 - transform size Delta to our side now for
07:36 - the helmet we want to place the helmet
07:37 - at the end of the bar so let's set the
07:40 - helmet anchored position to be at
07:42 - anchored position which is the starting
07:45 - bar position then let's shift it to the
07:47 - side by size dot X so you have a bar on
07:53 - the anchored position with a certain
07:55 - size received in here then you place the
07:57 - helmet to the right of the bar by using
08:00 - anchored position and offsetting it on
08:02 - the X by the same as the size so let's
08:05 - go up here and create a new bar and
08:08 - let's place it on zero zero with a size
08:12 - of let's say 70 18 now one last thing is
08:17 - we need to go in here m to our bar
08:19 - template and right now the pivot is in
08:21 - the middle what we wanted to be on the
08:23 - left side so let's simply click here and
08:25 - press shift-click on the left side and
08:27 - there you go the pivot is now correctly
08:29 - on the left side so let's run and see
08:31 - our new bars yep there you go there's a
08:34 - new bar and right at the end there's the
08:36 - helmet and if we check out the positions
08:38 - you can see that the size is in 70 and
08:42 - 18 and the home template is on 70 right
08:45 - there ok so now that we are correctly
08:48 - placing it let's see on whit filling up
08:50 - the bar and changing the helmet icon so
08:53 - back in our bar class let's make a
08:55 - function to set the fill amount so in
08:57 - here the way public void set film amount
09:00 - and we're going to receive a float for
09:03 - the film amount this film amount goes
09:05 - from 0 to 1 so 0 is commonly empty and
09:08 - one is completely foam regardless of the
09:10 - actual size of our bar now in order to
09:12 - set the film amount we need a reference
09:14 - to the image that is placed on the bar
09:16 - so let's go here grab an image and now
09:19 - the image we have to do using the Unity
09:22 - engine UI so make a bar filled image and
09:27 - let's grab the bar fill image in here on
09:30 - the bar right transform fine the bar
09:33 - fill and get the component type image
09:38 - then we can use that image component to
09:41 - go in here and set the fill amount to be
09:43 - this film amount now on awake let's set
09:46 - this to 0 F so the bar starts off
09:49 - coupled with empty okay now let's go up
09:51 - here
09:52 - after we create the bar let's first go
09:54 - out to a reference to it and now let's
09:57 - test filling it up now in order to test
09:59 - I'm going to use the function updater
10:02 - which is part of the using code monkey
10:05 - utils which as always you can grab for
10:08 - free from unity code monkey calm now the
10:11 - function updater lets me create a action
10:15 - which will be triggered on every update
10:18 - so on every update let's increase the
10:21 - film amount so let's go up here create a
10:23 - float for the film amounts are off at 0
10:26 - F and in here on every update let's
10:28 - increase the film amount by let's say
10:31 - time down to time divided by 4 F so
10:34 - essentially the bar won't completely
10:35 - fill up after 4 seconds so after
10:37 - increasing let's go into the bar and set
10:39 - the fill amount to be this film amount
10:41 - alright let's test and see if it fills
10:44 - up in 4 seconds ok there it is and yep
10:47 - as you can see it is filling up and it
10:49 - is now completely full ok great so now
10:51 - that we have the bar correctly filling
10:53 - up let's the only the helmet so back in
10:55 - our code appear on our mercenary bar
10:58 - let's add to serialize fields for the
11:00 - gray and red helmets so make a serialize
11:02 - field for the private sprite gray helmet
11:07 - sprites and
11:09 - another one for the red helmet sprite
11:11 - now we're going to pass those and store
11:14 - those on our bar so in here they don't
11:16 - have to be Cyril eyes
11:19 - we're going to receive those in our
11:22 - constructor and let's send them when we
11:28 - construct our bar so first in the gray
11:31 - and then send the red home alright so we
11:33 - now I have references to our boat
11:35 - sprites in here so let's make some
11:37 - helper functions for setting the color
11:39 - so make a private void set helmet gray
11:43 - and then we're going to have a private
11:44 - Roy set helmet red so for that one let's
11:48 - go up here and grab an image for the
11:50 - helmet image now the helmet image is in
11:54 - the helmet rect transform docket
11:57 - components of type image okay so we grab
12:00 - the helmet image and in here we set the
12:02 - anomic image sprite to be our gray
12:05 - helmet sprite and here set it to the red
12:08 - helmets breath all right so now in here
12:12 - when we set our fill amount if the film
12:16 - amount if it is greater than one that
12:19 - means the bar is completely filled so
12:22 - let's set the helmet to red if not let's
12:26 - set the helmet to work all right so on
12:30 - our constructor we are receiving
12:31 - references to both of our sprites then
12:34 - when we set the fill amount we check if
12:36 - it is bigger than one if so it changes
12:38 - to red if not it sticks with gray so
12:41 - again we are testing up here increasing
12:44 - the film amount and it's completely foam
12:46 - after four seconds so when it is
12:49 - commonly formed the helmet should turn
12:51 - red so now first let's go up here and
12:53 - drag the references for the gray and the
12:55 - red and run the code yep filling up
12:58 - and now it goes up and yep there you go
13:01 - the helmet turn right so the helmet turn
13:03 - red which is correct but it seems like
13:05 - it took a bit too long that's because of
13:07 - how we created in our bar now if we
13:09 - processing and we check out the scene
13:11 - view as you can see the bar stretches
13:14 - behind the helmet so essentially once
13:17 - the bar is filling this part up you
13:18 - can't really see it but it's still not
13:20 - fully filmed up so we need to make our
13:22 - bar a tiny bit smaller so that we can
13:25 - actually see it fully fill up and as
13:26 - soon as it gets completed
13:27 - it turns the helmet into red so for that
13:30 - let's go into our create bar function
13:32 - and now in here let's set a different
13:35 - size for our bar instead of being this
13:37 - size let's set a new vector2 and 40 X
13:42 - let's use size dot X minus a certain
13:45 - padding amounts and let's say 10 F and
13:47 - for the wine let's use the same as the
13:49 - size on what this way the bar will end
13:52 - slightly before the helmet so let's test
13:55 - again and yep there it is filling up and
13:58 - when it gets to the edge of the helmet
14:00 - yep there you go it turned red so if we
14:02 - go into the scene view you can see that
14:04 - the bar is now smaller we could still
14:06 - make it a tiny bit smaller but just
14:08 - about that is good okay all right so we
14:10 - essentially have one bar pretty much
14:12 - fully working now let's see how we can
14:14 - set up multiple bars one after the other
14:16 - now creating multiple bars is simple
14:19 - since we already have this function to
14:20 - create a single one all we need to do is
14:22 - call this function multiple times so
14:24 - creating the bars is simple but the
14:26 - logic of the film has to go from one bar
14:28 - to the next so for that we're
14:31 - essentially going to define a total
14:32 - number for the complete bar and divided
14:35 - by a certain amount for each bar so
14:37 - let's go up here and make some variables
14:40 - we're going to have a private float for
14:43 - the film value max this is the complete
14:46 - amount in this mercenary bar so the
14:49 - total value for entire mercenary bar
14:54 - then we're going to have a private float
14:56 - film value now this one is the currently
15:00 - film value and finally we're going to
15:03 - have a private float for the film value
15:06 - per bar and this is the film
15:11 - value amount per each bar so in order to
15:15 - calculate all these values let's make a
15:17 - private void setup this function will
15:20 - initialize our bar now in our setup
15:23 - we're going to receive the set of values
15:25 - so we need the float for the film value
15:29 - max this again is a total film value
15:32 - used in this mercenary bar and then an
15:34 - end for the bar amount seen here let's
15:38 - set the dis dot film value max to be
15:40 - philip value max for the regular film
15:44 - value let's set it to zero so it starts
15:46 - off empty and for the film value per bar
15:50 - it's going to be the film felling max
15:52 - divided by the bar amount so essentially
15:56 - if the film value is and let's say 100
15:58 - and we have five bars then essentially
16:00 - we're going to have 100 divided by 5
16:02 - we're going to have each of our won't
16:04 - have a value of 20 so after completing
16:07 - that let's create the number of bars
16:09 - that we need in order to store them we
16:12 - need to go up here and make a private
16:14 - list for our bars this will be our bar
16:16 - list so let's instantiate our bar and
16:20 - list and then do a simple for in a
16:22 - equals zero less than the bar amount PI
16:25 - plus plus okay now here we need to
16:28 - create the bars and place them correctly
16:30 - so a vector2 for the bar size which
16:34 - we're going to set the same thing that
16:36 - we've been using so 70 18 now we need to
16:39 - place them correctly so let's define a
16:42 - float for the bar size offset this is
16:45 - essentially that little buffer that we
16:47 - have between the bar size so let's set
16:50 - it to 10 F and for the vector 2 for the
16:53 - bar anchor position for the X won't be
16:59 - on bar size dot X multiplied by I for
17:03 - the why we got 0 but now for the X if we
17:06 - do it like this then we have each bar
17:08 - hugging each other so we need to add the
17:10 - bar size offset so it's the bar size rx
17:13 - plus the bar size offset and then the
17:16 - whole thing multiplied by the index of
17:18 - this bar then we get a bar bar equals
17:22 - create a bar we're going to create it
17:25 - using the bar anchored position and the
17:28 - bar size then we add that Bart is varlas
17:32 - bar let's not add our bar okay so in our
17:35 - setup we receive a maximum value and the
17:37 - number of bars displayed that value in
17:39 - we calculate these families to see how
17:42 - much per bar we're going to have and
17:44 - then we simply instantiate that certain
17:46 - amount of bars so now let's go up here
17:49 - and let's comment out this testing code
17:51 - and instead let's do a set up now for
17:56 - the set up and let's give it the maximum
17:57 - value of 100 F and let's fill it with
18:00 - five bars so let's run the code and see
18:03 - if we have correctly spawned five bars
18:05 - yep there you go we have five bars one
18:08 - two three four five they are all empty
18:11 - and all the helmets are in gray now as
18:13 - you can see we got a slight issue with
18:14 - the helmets here the hierarchy and the
18:17 - UI is what defines the sorting order so
18:20 - essentially we need to take all of the
18:23 - helmets and set them all as the last
18:24 - sibling and then it looks correct so
18:27 - let's sort that problem so in here there
18:29 - are several ways that we can set the
18:31 - helmets to the end we could for example
18:33 - have a container for all the bars in
18:35 - another one for all the helmets and have
18:36 - each container one sorting with the
18:38 - other one but here the same most way is
18:41 - similarly to set the Bart transform to
18:43 - be essentially lower in the hierarchy so
18:46 - the bars always show up before so I
18:48 - simply do that that's set as first
18:51 - sibling so whenever we instantiate a
18:54 - helmet it goes to the end whenever we
18:57 - instantiate a bar it also goes to the
18:58 - end so we send it back on top so I see
19:01 - four helmets are on top of the bars and
19:03 - yep there you go
19:05 - we got the helmets on top of the bars
19:06 - and as you can see in the scene view
19:08 - they're all like that they're all on top
19:09 - of that one and first we got all the bar
19:13 - template clones and then all the helmets
19:15 - ok great so with our five empty bar
19:18 - setup now we need to set up the illogic
19:20 - to increase the film between the bars so
19:23 - in our code appear on the code for the
19:26 - mercenary bar let's create a function to
19:30 - set the film value so making a profit
19:32 - ROI set film
19:36 - and here we're going to receive a float
19:38 - for the film value and let's also set
19:41 - the member tonal value to be this film
19:44 - value so we keep track of the film
19:46 - valley okay so now in here is where we
19:49 - need to do some calculations we need to
19:51 - figure out how much each bar should be
19:53 - filmed
19:54 - so essentially let's begin by doing a
19:56 - cycle for in the equal zero going
19:59 - through all of the bars on the bar list
20:01 - okay so bar bar equals bar on list all
20:05 - right now we need to figure out how much
20:09 - this specific bar should be filmed so
20:11 - let's begin by calculating the float for
20:14 - the bar value min this is the minimum
20:17 - value that this bar represents so that
20:20 - minimum value is essentially just the I
20:23 - which is the index of this bar
20:25 - multiplied by the film value for each
20:27 - bar so bar zero starts on 0 multiplied
20:31 - by let's say 20 so it starts off in 0
20:33 - then we have the bar value max which is
20:37 - the next index so I plus 1 multiplied by
20:40 - the film value so the bar on index 0
20:43 - starts off at 0 times 20 so 0 and goes
20:46 - up to 1 times 20 goes up to 20 so the
20:49 - first bar represents from 0 to 20 for
20:52 - the second one you have 1 times 20 so 20
20:55 - and then 2 times 20 so 40 so the second
20:57 - one goes from 20 to 40 and so on alright
21:00 - so using that we can now there's no
21:01 - logic so if the film value that we
21:04 - receive is under the bar value min then
21:10 - essentially that means the film value
21:13 - doesn't reach this bar so if it doesn't
21:17 - reach this bar then set the bar film
21:19 - amount to be 0f because it is completely
21:22 - empty if it is not under the bar value
21:26 - min and we check if the film value if it
21:30 - is bigger than devop bar value max if it
21:35 - is then that means the film value
21:37 - completely fills this bar and set the
21:41 - bar dot set fill amount to be 1 F so
21:44 - that it is completely
21:45 - and if it is not under or above then
21:49 - that means the film value is somewhere
21:51 - in between
21:52 - so let's commonly D float for the bar
21:56 - film amount so we need to normalize the
22:00 - value to fit inside the bar values so we
22:03 - take the film value and we reduce it by
22:06 - the bar value min and then we divide it
22:08 - by the size of the bar so we divided by
22:11 - the bar value max - bar value min so
22:17 - let's say this is the first bar which
22:18 - means it goes from 20 to 40 and we are
22:21 - giving it a film value of 30 so the bar
22:24 - fill amount will be 30 minus the 20
22:26 - which is the bar value min which means
22:28 - this is 10 and then the bar has a size
22:31 - of 40 minus 20 which is 20 so we have 10
22:34 - divided by 20 so this one won't be 0.5
22:37 - so if we send a 30 then the second bar
22:40 - will be 1/2 film so after that we simply
22:43 - need to do set the film mount to the bar
22:45 - film amount all right so now let's see
22:48 - if all of this math is correct for
22:51 - testing let's go all the way up here and
22:53 - after we set up our bar let's use set
22:56 - film value now since we have 5 bars on a
23:00 - total of 100 that means each bar
23:02 - occupies a value of 20 so if we put for
23:06 - a film value of 50 we should see the
23:08 - first 2 helmets in red then bar half
23:11 - filmed and all the other helmets in grey
23:13 - so let's see if that is correct and yep
23:16 - there it is we have 2 red helmets then
23:19 - the bar is half filmed and the others
23:20 - are in grey alright so it seems all of
23:23 - our math is correctly working now let's
23:26 - test with an increasing value so let's
23:28 - use the same thing we use in here now
23:32 - the film amount has to go up to 100 so
23:34 - let's increase the speed by a bit okay
23:37 - so in here we are increasing the film
23:39 - amount by time.deltatime multiplied by
23:41 - the maximum size which is a hundred and
23:44 - then we divide by 5 so essentially we
23:46 - are going to increase a hundred over
23:48 - five seconds and you simply do set the
23:51 - film value to this film amount and here
23:53 - we nationally start off at zero all
23:55 - right so let's see if all of our bars
23:58 - correctly
23:58 - in five seconds yep there it is there's
24:01 - one film to film three four and five and
24:05 - yep as you can see they all filmed
24:07 - correctly the bar goes in once it
24:09 - reaches the end the helmet turns to red
24:12 - then it passes on to filling the next
24:14 - one and so on and so forth so our logic
24:17 - is completely correct and we have our
24:19 - various bars being filmed up one by one
24:21 - now the way we set up our code makes it
24:23 - very simple to go the other way so let's
24:25 - simply try creasing the value so in here
24:28 - and let's her off at a hundred and
24:30 - decrease it by this so it should be
24:33 - empty after five seconds yep there it is
24:35 - it starts off full and goes down down
24:38 - and down and down into zero and as you
24:41 - can see they start off in red then turn
24:43 - off into grey so there you have it we
24:46 - created from scratch the mercenary bar
24:47 - as it's used in Assassin's Creed Odyssey
24:50 - as long as you can download the project
24:52 - files and utilities from Unity code
24:54 - monkey comm if you have any questions
24:56 - post them in the comments and I'll do my
24:57 - best answer them
24:58 - subscribe for more videos and I'll see
25:00 - you next time

Cleaned transcript:

hello and welcome I'm your code monkey in this video we're going to create the mercenary bounty bar from Assassin's Creed Odyssey we're going to make it in the UI with a script to dynamically modify the number of mercenaries and the size of the bar between them let's begin so in assistance read Odyssey there is a bounty bar which is for the mercenary system essentially it starts off empty and increases every time you are caught doing a crime if it reaches a certain amount a mercenary won't come after you it's a pretty simple bar but still require some interesting logic so we're going to make it in the UI I have my basic scene set up over here I have the canvas which is being rendered through this UI camera for an interview one how this is set up you can check out the simple UI setup video then in here I have some textures first I have a bar border which won't go on top of our bar then I have the gray and red helmet and finally a simple white gradient which we're going to Tintin in red as the bar fills up so let's first set up the bar in the editor and then we'll make the code to control so in our canvas let's begin by creating an empty game object this will be our container so let's name it mercenary bar inside let's create another empty game object this one let's name it bar and this is the container for our bar so let's set the size to 70 15 okay inside let's make another empty game object this will be our bar background and for this one let's add an image and add the white gradient texture for the size let's expand it to fill up the entire parent so set everything to zero and right then the bar is occupying the bar size so we can change the parent and the inside changes with it okay now it's duplicated and make the bar filled which again is stretch to occupy everything and for this one let's tint it in red now in here on the image type instead of being in simple let's set it to filmed on the film method let's choose horizontal and film origin from the left this way we can easily set the fill amount to increase and decrease the size of our bar okay so now the last thing we need is a border so let's duplicate the background name this the border and drag the bar border sprite now as you can see in here the texture looks a bit stretched in there on the left side it's quite stretching there is quite small we can fix this by going into the bar border texture and open the sprite editor and in here if we drag on the sides we can essentially set a border we can also go down here and simply set the bar to 5 on every side so essentially we are saying do not stretch these corners in here and only stretch the empty space in the middle so if we hit apply and go back it's now select the border and here on the image type instead of simple let's set it to sliced and now as you can see everything is scaling much better ok so this is our bar only created in the editor this will be the template that we're going to use to duplicate and modify through our code so let's rename this from bar and make it a bar template let's add a new UI image for the helmet and the helmet won't simply have the helmet sprite let's set it on 70 70 and just like that alright so our home bar is set up in the editor as you can see we got the bar template which has a background then it has a filled corner which we can increase and decrease then it has a border just to make it all nice and then outside of the bar we have the helmet template which can either be in grey or then we won't switch to red when the bar is film so now that everything is set up let's work on the code so it's going to the scripts folder and create a new C sharp script and let's name this the mercenary bar let's drag it onto our mercenary bar yep like that and check out the code okay so in here the first thing we're going to do is grab a reference to our templates so let's go up here and make a private rect transform and we're going to grab the bar template and then also grab the helmet template we're going to grab it on the void awake so bar templates equals transform dot find our bar templates and get the component of fabric transform and do the same for the helmet all right now just for testing let's try duplicating our bar so in here do a rect transform for the new bar which will be an instantiate of our bar temp and into the parent which is this transform and then let's set the anchor position to be somewhere on the left side alright let's test and see if the new bar pops up yep there's the original bar our template and there's a new incense she added bar okay so we are now correctly duplicating our template so now let's go back into our code and down here let's make a new class named bar so a private class named bar now this class is responsible for handling the logic of a single bar and the total mercenary bar will be composed of several of these bars so inside let's add some member variables to store the bar and helmet transforms so a private rect transform for the bar correct transform and we're going to receive them on the constructor okay so this is the basic composition of our clients now let's go up here on to the mercenary bar class and let's make a function to create a bar so make a private bar create bar inside let's do what we did for testing up here which is we instantiate a new bar from the template what is also in Senshi Utley helmets and finally create a bar object so Bar object equals a new bar to give it the bar right transform and then the helmet right transform and finally we return our bar object okay so now let's go up here and first of all let's hide our templates so we're going to do bar template dot game object dot set active to false so that the templates are hidden by default do the same for the helmet and in here when we instantiate we actually need to reenable it so go back into the game objects active and for this one which is the one that is in Senshi ated set it to true and same for the helmet so then let's go up here and create a new bar just like that okay so let's test and we should be able to see a new bar along with a new helmet yep there they are a new bar and new helmet and if we hit stop you can see that the templates are still there but they are disabled and the clones have been accentuated okay so far so good now on the create bar let's receive a position any size for the bar so a vector2 for the incurred position and another vector two for the size let's set the bar dot anchored position into our anchored position and set the bar right transform size Delta to our side now for the helmet we want to place the helmet at the end of the bar so let's set the helmet anchored position to be at anchored position which is the starting bar position then let's shift it to the side by size dot X so you have a bar on the anchored position with a certain size received in here then you place the helmet to the right of the bar by using anchored position and offsetting it on the X by the same as the size so let's go up here and create a new bar and let's place it on zero zero with a size of let's say 70 18 now one last thing is we need to go in here m to our bar template and right now the pivot is in the middle what we wanted to be on the left side so let's simply click here and press shiftclick on the left side and there you go the pivot is now correctly on the left side so let's run and see our new bars yep there you go there's a new bar and right at the end there's the helmet and if we check out the positions you can see that the size is in 70 and 18 and the home template is on 70 right there ok so now that we are correctly placing it let's see on whit filling up the bar and changing the helmet icon so back in our bar class let's make a function to set the fill amount so in here the way public void set film amount and we're going to receive a float for the film amount this film amount goes from 0 to 1 so 0 is commonly empty and one is completely foam regardless of the actual size of our bar now in order to set the film amount we need a reference to the image that is placed on the bar so let's go here grab an image and now the image we have to do using the Unity engine UI so make a bar filled image and let's grab the bar fill image in here on the bar right transform fine the bar fill and get the component type image then we can use that image component to go in here and set the fill amount to be this film amount now on awake let's set this to 0 F so the bar starts off coupled with empty okay now let's go up here after we create the bar let's first go out to a reference to it and now let's test filling it up now in order to test I'm going to use the function updater which is part of the using code monkey utils which as always you can grab for free from unity code monkey calm now the function updater lets me create a action which will be triggered on every update so on every update let's increase the film amount so let's go up here create a float for the film amounts are off at 0 F and in here on every update let's increase the film amount by let's say time down to time divided by 4 F so essentially the bar won't completely fill up after 4 seconds so after increasing let's go into the bar and set the fill amount to be this film amount alright let's test and see if it fills up in 4 seconds ok there it is and yep as you can see it is filling up and it is now completely full ok great so now that we have the bar correctly filling up let's the only the helmet so back in our code appear on our mercenary bar let's add to serialize fields for the gray and red helmets so make a serialize field for the private sprite gray helmet sprites and another one for the red helmet sprite now we're going to pass those and store those on our bar so in here they don't have to be Cyril eyes we're going to receive those in our constructor and let's send them when we construct our bar so first in the gray and then send the red home alright so we now I have references to our boat sprites in here so let's make some helper functions for setting the color so make a private void set helmet gray and then we're going to have a private Roy set helmet red so for that one let's go up here and grab an image for the helmet image now the helmet image is in the helmet rect transform docket components of type image okay so we grab the helmet image and in here we set the anomic image sprite to be our gray helmet sprite and here set it to the red helmets breath all right so now in here when we set our fill amount if the film amount if it is greater than one that means the bar is completely filled so let's set the helmet to red if not let's set the helmet to work all right so on our constructor we are receiving references to both of our sprites then when we set the fill amount we check if it is bigger than one if so it changes to red if not it sticks with gray so again we are testing up here increasing the film amount and it's completely foam after four seconds so when it is commonly formed the helmet should turn red so now first let's go up here and drag the references for the gray and the red and run the code yep filling up and now it goes up and yep there you go the helmet turn right so the helmet turn red which is correct but it seems like it took a bit too long that's because of how we created in our bar now if we processing and we check out the scene view as you can see the bar stretches behind the helmet so essentially once the bar is filling this part up you can't really see it but it's still not fully filmed up so we need to make our bar a tiny bit smaller so that we can actually see it fully fill up and as soon as it gets completed it turns the helmet into red so for that let's go into our create bar function and now in here let's set a different size for our bar instead of being this size let's set a new vector2 and 40 X let's use size dot X minus a certain padding amounts and let's say 10 F and for the wine let's use the same as the size on what this way the bar will end slightly before the helmet so let's test again and yep there it is filling up and when it gets to the edge of the helmet yep there you go it turned red so if we go into the scene view you can see that the bar is now smaller we could still make it a tiny bit smaller but just about that is good okay all right so we essentially have one bar pretty much fully working now let's see how we can set up multiple bars one after the other now creating multiple bars is simple since we already have this function to create a single one all we need to do is call this function multiple times so creating the bars is simple but the logic of the film has to go from one bar to the next so for that we're essentially going to define a total number for the complete bar and divided by a certain amount for each bar so let's go up here and make some variables we're going to have a private float for the film value max this is the complete amount in this mercenary bar so the total value for entire mercenary bar then we're going to have a private float film value now this one is the currently film value and finally we're going to have a private float for the film value per bar and this is the film value amount per each bar so in order to calculate all these values let's make a private void setup this function will initialize our bar now in our setup we're going to receive the set of values so we need the float for the film value max this again is a total film value used in this mercenary bar and then an end for the bar amount seen here let's set the dis dot film value max to be philip value max for the regular film value let's set it to zero so it starts off empty and for the film value per bar it's going to be the film felling max divided by the bar amount so essentially if the film value is and let's say 100 and we have five bars then essentially we're going to have 100 divided by 5 we're going to have each of our won't have a value of 20 so after completing that let's create the number of bars that we need in order to store them we need to go up here and make a private list for our bars this will be our bar list so let's instantiate our bar and list and then do a simple for in a equals zero less than the bar amount PI plus plus okay now here we need to create the bars and place them correctly so a vector2 for the bar size which we're going to set the same thing that we've been using so 70 18 now we need to place them correctly so let's define a float for the bar size offset this is essentially that little buffer that we have between the bar size so let's set it to 10 F and for the vector 2 for the bar anchor position for the X won't be on bar size dot X multiplied by I for the why we got 0 but now for the X if we do it like this then we have each bar hugging each other so we need to add the bar size offset so it's the bar size rx plus the bar size offset and then the whole thing multiplied by the index of this bar then we get a bar bar equals create a bar we're going to create it using the bar anchored position and the bar size then we add that Bart is varlas bar let's not add our bar okay so in our setup we receive a maximum value and the number of bars displayed that value in we calculate these families to see how much per bar we're going to have and then we simply instantiate that certain amount of bars so now let's go up here and let's comment out this testing code and instead let's do a set up now for the set up and let's give it the maximum value of 100 F and let's fill it with five bars so let's run the code and see if we have correctly spawned five bars yep there you go we have five bars one two three four five they are all empty and all the helmets are in gray now as you can see we got a slight issue with the helmets here the hierarchy and the UI is what defines the sorting order so essentially we need to take all of the helmets and set them all as the last sibling and then it looks correct so let's sort that problem so in here there are several ways that we can set the helmets to the end we could for example have a container for all the bars in another one for all the helmets and have each container one sorting with the other one but here the same most way is similarly to set the Bart transform to be essentially lower in the hierarchy so the bars always show up before so I simply do that that's set as first sibling so whenever we instantiate a helmet it goes to the end whenever we instantiate a bar it also goes to the end so we send it back on top so I see four helmets are on top of the bars and yep there you go we got the helmets on top of the bars and as you can see in the scene view they're all like that they're all on top of that one and first we got all the bar template clones and then all the helmets ok great so with our five empty bar setup now we need to set up the illogic to increase the film between the bars so in our code appear on the code for the mercenary bar let's create a function to set the film value so making a profit ROI set film and here we're going to receive a float for the film value and let's also set the member tonal value to be this film value so we keep track of the film valley okay so now in here is where we need to do some calculations we need to figure out how much each bar should be filmed so essentially let's begin by doing a cycle for in the equal zero going through all of the bars on the bar list okay so bar bar equals bar on list all right now we need to figure out how much this specific bar should be filmed so let's begin by calculating the float for the bar value min this is the minimum value that this bar represents so that minimum value is essentially just the I which is the index of this bar multiplied by the film value for each bar so bar zero starts on 0 multiplied by let's say 20 so it starts off in 0 then we have the bar value max which is the next index so I plus 1 multiplied by the film value so the bar on index 0 starts off at 0 times 20 so 0 and goes up to 1 times 20 goes up to 20 so the first bar represents from 0 to 20 for the second one you have 1 times 20 so 20 and then 2 times 20 so 40 so the second one goes from 20 to 40 and so on alright so using that we can now there's no logic so if the film value that we receive is under the bar value min then essentially that means the film value doesn't reach this bar so if it doesn't reach this bar then set the bar film amount to be 0f because it is completely empty if it is not under the bar value min and we check if the film value if it is bigger than devop bar value max if it is then that means the film value completely fills this bar and set the bar dot set fill amount to be 1 F so that it is completely and if it is not under or above then that means the film value is somewhere in between so let's commonly D float for the bar film amount so we need to normalize the value to fit inside the bar values so we take the film value and we reduce it by the bar value min and then we divide it by the size of the bar so we divided by the bar value max bar value min so let's say this is the first bar which means it goes from 20 to 40 and we are giving it a film value of 30 so the bar fill amount will be 30 minus the 20 which is the bar value min which means this is 10 and then the bar has a size of 40 minus 20 which is 20 so we have 10 divided by 20 so this one won't be 0.5 so if we send a 30 then the second bar will be 1/2 film so after that we simply need to do set the film mount to the bar film amount all right so now let's see if all of this math is correct for testing let's go all the way up here and after we set up our bar let's use set film value now since we have 5 bars on a total of 100 that means each bar occupies a value of 20 so if we put for a film value of 50 we should see the first 2 helmets in red then bar half filmed and all the other helmets in grey so let's see if that is correct and yep there it is we have 2 red helmets then the bar is half filmed and the others are in grey alright so it seems all of our math is correctly working now let's test with an increasing value so let's use the same thing we use in here now the film amount has to go up to 100 so let's increase the speed by a bit okay so in here we are increasing the film amount by time.deltatime multiplied by the maximum size which is a hundred and then we divide by 5 so essentially we are going to increase a hundred over five seconds and you simply do set the film value to this film amount and here we nationally start off at zero all right so let's see if all of our bars correctly in five seconds yep there it is there's one film to film three four and five and yep as you can see they all filmed correctly the bar goes in once it reaches the end the helmet turns to red then it passes on to filling the next one and so on and so forth so our logic is completely correct and we have our various bars being filmed up one by one now the way we set up our code makes it very simple to go the other way so let's simply try creasing the value so in here and let's her off at a hundred and decrease it by this so it should be empty after five seconds yep there it is it starts off full and goes down down and down and down into zero and as you can see they start off in red then turn off into grey so there you have it we created from scratch the mercenary bar as it's used in Assassin's Creed Odyssey as long as you can download the project files and utilities from Unity code monkey comm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time
