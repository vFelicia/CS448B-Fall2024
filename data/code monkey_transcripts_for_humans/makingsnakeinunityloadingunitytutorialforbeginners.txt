With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - made the series were making snake in
00:03 - unity in this video we're going to deal
00:05 - with the loading so we can reload the
00:06 - game when we die let's begin
00:11 - okay so here's our game we have the
00:13 - snake move around we can eat some food
00:15 - whenever we do the body grows and as you
00:18 - can see the score increases and right
00:20 - now if we have enough of the body we can
00:22 - actually trigger a game over so there's
00:25 - the body with a nice size and now if I
00:27 - wrap around it
00:28 - and there you go we got a game over it
00:30 - says dead and everything just stops so
00:33 - right now in order to reset I have to
00:34 - stop and restart the scene so let's deal
00:37 - with loading so we can reload the game
00:39 - scene when we done so in order to deal
00:41 - with loading let's make a dedicated
00:43 - class so in here a new c-sharp script
00:45 - and this will be our loader now in here
00:49 - this will be a very simple class so
00:51 - first of all let's get rid of
00:52 - monobehaviour
00:54 - and also let's make this a static class
00:57 - that means we can only have static
00:59 - methods and fields we cannot instantiate
01:01 - this class which for a loader class it's
01:04 - exactly what we want so now let's make a
01:06 - simple milk function so we do a public
01:08 - static void load and inside in order to
01:11 - load we need to go up here and do using
01:14 - Unity engine scene management inside
01:18 - that namespace we can now use the scene
01:20 - manager to use the load scene and now in
01:24 - here we need a name for the scene that
01:25 - we want to load now instead of using
01:28 - strings in our code and let's make an a
01:29 - new that has the scene name so in here
01:31 - let's make a public in home and this
01:33 - will be our scene so our currency name
01:37 - as you can see in the editor we named
01:39 - this our game scene so let's use that so
01:42 - define our first value for the game
01:44 - scene and now on the unload function
01:46 - let's receive a scene for the scene to
01:49 - load and our it's unloaded we say Malone
01:52 - our scene and put it to string since
01:55 - this expects a string alright so we now
01:57 - have a very simple function we can count
01:59 - so now let's go back into the game
02:01 - handler and in here on cert let's create
02:03 - a simple testing button so in here using
02:06 - the ECM debug class which again is part
02:08 - of the code monkey tony's i can create a
02:11 - simple button on the you are
02:17 - so this function is very simple it just
02:19 - takes a position where to spawn the
02:20 - button some texts that won't say on the
02:22 - button and finally an action that won't
02:24 - happen when we click on the button so in
02:26 - here we want to test our loading so
02:28 - we're going to do our loader and call
02:31 - the unload function and we're going to
02:33 - load the game scene so that's it very
02:36 - simple we now have a nice button so we
02:38 - can test to make sure our auditor is
02:40 - currently working so let's see and okay
02:43 - here's our nice testing button so if I
02:45 - click on it if there you go the scene
02:48 - reloaded so let's put the snake down
02:51 - there
02:52 - okay so now the snake has a body and
02:54 - let's hit reload and see if everything
02:55 - returns to normal
02:56 - hit reload and if there go the snake
02:59 - went back to zero zero and the new food
03:00 - was spawned all right so the scene
03:02 - apparently reloaded component back to
03:04 - normal however as you can see we have an
03:06 - issue with our score it did not reset
03:09 - when we reload the scene so let's look
03:11 - into why that's happening so here in the
03:13 - game home we are storing the score using
03:16 - this private static field and since it's
03:19 - static that means that when the game
03:21 - hammer instance is destroyed this static
03:23 - variable continues to hold the same
03:24 - value so one solution is to have a
03:26 - function to initialize our static
03:28 - variables and count on awake so let's do
03:31 - that here to make that function and in
03:36 - this function now we're going to do is
03:37 - set the score back to zero and now let's
03:40 - call this on our awake okay so now let's
03:44 - test again and see if this core gets
03:45 - correctly reset when we reload the scene
03:48 - okay here we are there's the snake now
03:50 - let's eat some food now I have a score
03:53 - of 100 and if I hit reload if there you
03:55 - go the score reset back to zero and if I
03:57 - add another one now it goes up to 100
03:59 - again and so on all right so everything
04:01 - is working correctly
04:02 - now one potential issue we have is that
04:05 - the game hands while loading in this
04:06 - case it's loading pretty fast so you can
04:08 - really see that problem but let's try
04:09 - and century adding some more objects
04:11 - just to see that problem in action so in
04:13 - order to make our game hang on start
04:15 - let's add a bunch of food on our setup
04:21 - okay so here we have some code in order
04:23 - to test the problem that I'm talking
04:25 - about so essentially we are simply
04:27 - instantiate in 50,000 game objects
04:29 - whenever we start this we'll make sure
04:31 - our loading takes quite a while so let's
04:33 - test okay there's a snake let me eat
04:35 - some food
04:40 - okay the snake is dead now I wouldn't
04:43 - like to reload the scene so let's hit
04:44 - reload and see how long this image stays
04:46 - on and I click reload and yep there you
04:49 - go as you can see it's stayed stuck on
04:51 - that image for a while so when we are
04:54 - unloading we don't want to display a
04:55 - static the image which makes it seem
04:57 - like the game has broken so let's add a
04:59 - nice loading scene so for that let's go
05:02 - up here and create a new scene and this
05:04 - will be called our loading and in here
05:07 - let's just create a very simple UI
05:19 - okay so this is it very simple we just
05:21 - have an empty scene just same loading in
05:22 - the corner that way the player can know
05:24 - that the game is currently loading so
05:27 - now let's go back into the unloader
05:28 - class and first let's add a new value to
05:31 - our anu for our loading scene and now on
05:34 - the unload function before we unload our
05:37 - target scene let's load the unloading
05:40 - scene so first we load the loading scene
05:43 - then once that one is visible then we
05:45 - load our target scene right that should
05:47 - do it so let's go back to the game and
05:49 - see if it's working also in order to use
05:52 - the scene management top loading we need
05:54 - to go up here into the build settings
05:55 - and add our scenes so in here let's add
05:58 - the game scene and the unloading scene
06:01 - okay here we are and if I hit the reload
06:04 - scene you can see that nothing actually
06:06 - changed it is still hanging on this
06:07 - screen before reloading the same scene
06:10 - the issue we have right now is that in
06:12 - our code we are loading the unloading
06:14 - scene and then immediately unloading the
06:15 - target scene so we are never leaving
06:18 - anytime for the screen to update between
06:20 - these two statements so what we need is
06:22 - to load the unloading scene and then
06:24 - wait for an update for the screen to
06:26 - refresh and then we can load our target
06:28 - scene so for that let's create a script
06:30 - that waits for one update and then run
06:32 - some code so let's create a new script a
06:34 - new C sharp script and this will be our
06:37 - loader comeback and then here let's wait
06:40 - for our first update so we have just a
06:50 - boolean by default set to true and on
06:51 - the first update we sell it back to
06:53 - false so in here this code will run only
06:54 - once after the very first update so when
06:57 - this happens and let's sound the
06:58 - unloader that the scene has correctly
07:00 - unloaded and we can now run the rest of
07:02 - the code so for that let's go into our
07:04 - loader and make another function so we
07:09 - now have this nice function that we can
07:11 - go back into the loader come back and
07:13 - call it so the loader that call the
07:15 - unloader callback function so we now
07:20 - have this function being called on the
07:22 - very first update after we load
07:23 - something so now when we need this to
07:25 - store an action of what to do when we
07:27 - get this count
07:57 - okay so let's see the code that I have
07:59 - written here first I add the field for
08:01 - the unloader combat action an action is
08:04 - just a function that you can save in a
08:06 - field so when we call the unload
08:08 - function we give it a scene that we want
08:09 - to load and we set the unloader come
08:12 - back action to be an action which won't
08:14 - trigger the load scene of that target
08:16 - scene so essentially when this action is
08:18 - triggered it won't execute this line of
08:20 - code which unload our target scene so
08:22 - first we set our field and then we load
08:25 - our loading scene when the loading scene
08:27 - has finished loading and it updates our
08:30 - screen then this script will run and
08:32 - this script will call our loader combat
08:34 - function and this loader comeback
08:36 - function will check to make sure that
08:38 - our action is not no and if it isn't
08:40 - then we simply call our action which
08:42 - again won't load the target scene so
08:44 - what we should see happening is we
08:46 - unload our loading scene when it
08:48 - finishes loading we unload our targeting
08:50 - some let's see and we also need that
08:53 - script to run so obviously let's create
08:55 - a game object for the unloader come back
08:57 - and drag our script onto it okay so now
09:00 - we are ready to test so here we are with
09:02 - our reload scene button so there's our
09:04 - snake movie now I hit reload scene and
09:07 - there you go it loads a nice black
09:08 - loading screen and then it loaded in our
09:10 - actual scene so I click reload again
09:12 - first it goes into loading then finishes
09:14 - loading and it shows this screen so now
09:16 - we no longer have a static image which
09:19 - makes it seem like the game is broken
09:20 - and again the reset is not working so I
09:22 - can still go all the way up here eat
09:24 - some food eat some more so now my body
09:27 - is large enough so now let's trigger our
09:30 - snake that there you go the snake has
09:32 - died and now in order to play again
09:35 - let's click the reload scene button and
09:37 - there you go we went into loading and
09:39 - now back and we're back into score zero
09:41 - with the size of zero so there you have
09:43 - it
09:43 - create the unloader class to help us
09:45 - load various scenes and took care of
09:46 - bugs related to static fields in the
09:49 - next video we're going to create a game
09:50 - over window as always you can download
09:53 - the project fountain utilities from
09:54 - unity called monkey comm if you have any
09:56 - questions post them in the comments and
09:58 - I'll do my best to answer them subscribe
09:59 - for more videos and I'll see you next
10:01 - time

Cleaned transcript:

hello and welcome I'm your code monkey made the series were making snake in unity in this video we're going to deal with the loading so we can reload the game when we die let's begin okay so here's our game we have the snake move around we can eat some food whenever we do the body grows and as you can see the score increases and right now if we have enough of the body we can actually trigger a game over so there's the body with a nice size and now if I wrap around it and there you go we got a game over it says dead and everything just stops so right now in order to reset I have to stop and restart the scene so let's deal with loading so we can reload the game scene when we done so in order to deal with loading let's make a dedicated class so in here a new csharp script and this will be our loader now in here this will be a very simple class so first of all let's get rid of monobehaviour and also let's make this a static class that means we can only have static methods and fields we cannot instantiate this class which for a loader class it's exactly what we want so now let's make a simple milk function so we do a public static void load and inside in order to load we need to go up here and do using Unity engine scene management inside that namespace we can now use the scene manager to use the load scene and now in here we need a name for the scene that we want to load now instead of using strings in our code and let's make an a new that has the scene name so in here let's make a public in home and this will be our scene so our currency name as you can see in the editor we named this our game scene so let's use that so define our first value for the game scene and now on the unload function let's receive a scene for the scene to load and our it's unloaded we say Malone our scene and put it to string since this expects a string alright so we now have a very simple function we can count so now let's go back into the game handler and in here on cert let's create a simple testing button so in here using the ECM debug class which again is part of the code monkey tony's i can create a simple button on the you are so this function is very simple it just takes a position where to spawn the button some texts that won't say on the button and finally an action that won't happen when we click on the button so in here we want to test our loading so we're going to do our loader and call the unload function and we're going to load the game scene so that's it very simple we now have a nice button so we can test to make sure our auditor is currently working so let's see and okay here's our nice testing button so if I click on it if there you go the scene reloaded so let's put the snake down there okay so now the snake has a body and let's hit reload and see if everything returns to normal hit reload and if there go the snake went back to zero zero and the new food was spawned all right so the scene apparently reloaded component back to normal however as you can see we have an issue with our score it did not reset when we reload the scene so let's look into why that's happening so here in the game home we are storing the score using this private static field and since it's static that means that when the game hammer instance is destroyed this static variable continues to hold the same value so one solution is to have a function to initialize our static variables and count on awake so let's do that here to make that function and in this function now we're going to do is set the score back to zero and now let's call this on our awake okay so now let's test again and see if this core gets correctly reset when we reload the scene okay here we are there's the snake now let's eat some food now I have a score of 100 and if I hit reload if there you go the score reset back to zero and if I add another one now it goes up to 100 again and so on all right so everything is working correctly now one potential issue we have is that the game hands while loading in this case it's loading pretty fast so you can really see that problem but let's try and century adding some more objects just to see that problem in action so in order to make our game hang on start let's add a bunch of food on our setup okay so here we have some code in order to test the problem that I'm talking about so essentially we are simply instantiate in 50,000 game objects whenever we start this we'll make sure our loading takes quite a while so let's test okay there's a snake let me eat some food okay the snake is dead now I wouldn't like to reload the scene so let's hit reload and see how long this image stays on and I click reload and yep there you go as you can see it's stayed stuck on that image for a while so when we are unloading we don't want to display a static the image which makes it seem like the game has broken so let's add a nice loading scene so for that let's go up here and create a new scene and this will be called our loading and in here let's just create a very simple UI okay so this is it very simple we just have an empty scene just same loading in the corner that way the player can know that the game is currently loading so now let's go back into the unloader class and first let's add a new value to our anu for our loading scene and now on the unload function before we unload our target scene let's load the unloading scene so first we load the loading scene then once that one is visible then we load our target scene right that should do it so let's go back to the game and see if it's working also in order to use the scene management top loading we need to go up here into the build settings and add our scenes so in here let's add the game scene and the unloading scene okay here we are and if I hit the reload scene you can see that nothing actually changed it is still hanging on this screen before reloading the same scene the issue we have right now is that in our code we are loading the unloading scene and then immediately unloading the target scene so we are never leaving anytime for the screen to update between these two statements so what we need is to load the unloading scene and then wait for an update for the screen to refresh and then we can load our target scene so for that let's create a script that waits for one update and then run some code so let's create a new script a new C sharp script and this will be our loader comeback and then here let's wait for our first update so we have just a boolean by default set to true and on the first update we sell it back to false so in here this code will run only once after the very first update so when this happens and let's sound the unloader that the scene has correctly unloaded and we can now run the rest of the code so for that let's go into our loader and make another function so we now have this nice function that we can go back into the loader come back and call it so the loader that call the unloader callback function so we now have this function being called on the very first update after we load something so now when we need this to store an action of what to do when we get this count okay so let's see the code that I have written here first I add the field for the unloader combat action an action is just a function that you can save in a field so when we call the unload function we give it a scene that we want to load and we set the unloader come back action to be an action which won't trigger the load scene of that target scene so essentially when this action is triggered it won't execute this line of code which unload our target scene so first we set our field and then we load our loading scene when the loading scene has finished loading and it updates our screen then this script will run and this script will call our loader combat function and this loader comeback function will check to make sure that our action is not no and if it isn't then we simply call our action which again won't load the target scene so what we should see happening is we unload our loading scene when it finishes loading we unload our targeting some let's see and we also need that script to run so obviously let's create a game object for the unloader come back and drag our script onto it okay so now we are ready to test so here we are with our reload scene button so there's our snake movie now I hit reload scene and there you go it loads a nice black loading screen and then it loaded in our actual scene so I click reload again first it goes into loading then finishes loading and it shows this screen so now we no longer have a static image which makes it seem like the game is broken and again the reset is not working so I can still go all the way up here eat some food eat some more so now my body is large enough so now let's trigger our snake that there you go the snake has died and now in order to play again let's click the reload scene button and there you go we went into loading and now back and we're back into score zero with the size of zero so there you have it create the unloader class to help us load various scenes and took care of bugs related to static fields in the next video we're going to create a game over window as always you can download the project fountain utilities from unity called monkey comm if you have any questions post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time
