With timestamps:

00:00 - hello and welcome I'm your code monkey
00:02 - so while ago I was researching the
00:04 - clouds specifically Microsoft Azure it's
00:06 - a really interesting area with tons of
00:08 - potential use cases for game developers
00:09 - I made a getting started video tutorial
00:11 - a while ago if you don't know anything
00:13 - about what is the cloud what is azure
00:15 - and you quickly want to learn Basics and
00:16 - follow a step-by-step tutorial
00:18 - definitely watch that video basically
00:20 - it's a video that I wish I had when I
00:21 - started learning and I also made a
00:23 - second video one of my most detailed
00:25 - video tutorials I've ever done it's all
00:27 - about how to make an online leaderboard
00:29 - using Azure functions and search based
00:31 - on that combination of tools using
00:33 - functions in storage there's a bunch of
00:35 - really interesting cloud-based mechanics
00:37 - that you could build so here let's look
00:39 - at five interesting ones that I built
00:40 - all of them are based on all of the
00:42 - logic that I covered in that video so
00:44 - this one is kind of more of a showcase
00:45 - than a tutorial I just want you to see
00:47 - what you could build to add some
00:49 - interesting mechanics and make your game
00:50 - stand out and for Indie devs all of this
00:52 - can be done pretty much within the free
00:54 - tier or maybe just one or two cents per
00:56 - month so when you hear Cloud Don't Be
00:58 - Afraid right away thinking you need a
01:00 - huge budget to create all these
01:01 - interesting things most of them are
01:03 - probably completely free so we're going
01:05 - to look at how to make asynchronous
01:07 - multiplayer where both players don't
01:08 - need to be online at the same time then
01:11 - how to create your own custom scene
01:12 - Workshop which works on all platforms
01:15 - after that look how to create the player
01:17 - messages like in Elden ring or Dark
01:19 - Souls then how to create a histogram
01:21 - kind of like in the electronics games
01:23 - how to create a shared worm like in this
01:25 - running where a player can build
01:27 - something and other players can see it
01:29 - built and a few more examples okay so
01:32 - let's look at some awesome mechanics we
01:33 - can build using the cloud first example
01:35 - is how you can add asynchronous
01:37 - multiplayer to your game
01:38 - now I recently covered Unity multiplayer
01:40 - using netcode for game objects that tool
01:43 - is excellent if you want real-time
01:44 - multiplayer meaning all the players are
01:46 - connected and playing the game at the
01:48 - exact same time but if your game is
01:49 - something like turn base so maybe
01:51 - something like Civilization then perhaps
01:53 - you don't need a Content connection so
01:55 - here is a super basic tic-tac-toe
01:57 - example I've got two bones they are not
02:00 - directly connected in any way so there's
02:02 - no netcode involved here then up here I
02:04 - can make a move so let's Place one right
02:06 - down the middle and there you go it does
02:07 - synchronize to the other one and now I
02:09 - can't make any more moves so now I need
02:11 - to play with this player down here so
02:13 - let's put a no right in there
02:15 - and if there you go it synchronizes so
02:17 - now it's this one so now this one do
02:19 - something
02:20 - and now this one play again see up here
02:23 - as you can see I'm playing a multiplayer
02:24 - game without needing any direct
02:26 - connection and of course a bonus benefit
02:28 - of not being directly connected is that
02:30 - like I said it's asynchronous so for
02:32 - example in a complex scene like
02:33 - Civilization I could take my turn then
02:36 - my opponent could go and live their life
02:38 - like normal and then when they have time
02:40 - they can come back and they can take
02:42 - their own turn then maybe I could get
02:43 - notified that my opponent took a turn so
02:46 - then I can take my own turn and so on so
02:48 - this is a really awesome feature for
02:49 - people who can't play multiplayer games
02:51 - on top but still would like to play a
02:53 - game against another player to be on
02:55 - this kind of thing is really quite
02:56 - simple you just need some place to store
02:58 - the game say data which of course for
03:00 - that you have Azure storage then you
03:02 - need some way to run logic and update
03:04 - that game data and for that you can use
03:07 - Azure functions so that's exactly what I
03:09 - have working here I have this simple
03:11 - script and then down here on update I'm
03:13 - just testing for a simple mouse input
03:15 - when that happens then over here I'm
03:17 - just connecting to the Azure function by
03:19 - doing a standard HTTP request over here
03:21 - I'm using localhost just for testing but
03:23 - obviously in a final game this would be
03:24 - a regular URL so this is all it does
03:27 - just contacts the Azure function then
03:29 - the Azure function is running this code
03:31 - here it grabs the blob from Azure
03:33 - storage and similarly takes the request
03:36 - and writes it onto the blob and over
03:37 - here we can view the Moab storage so we
03:39 - can click on it to see and then go into
03:41 - edit and if here is all of the entire
03:44 - game state which is a simple structure
03:46 - holding data on each possible board
03:48 - position again all of this is the exact
03:50 - same logic that I covered in the online
03:52 - leaderboard tutorial it's just an Azure
03:54 - function interacting with some
03:55 - persistent storage that's it so when I
03:57 - make a move it simply modifies the game
03:59 - state
04:00 - here is the game set that I'm using it's
04:01 - all pretty basic I just got an array of
04:04 - all of the board positions and I got
04:05 - which one is the current player so when
04:07 - the player clicks really just updating
04:09 - that position set the other one to be
04:11 - the other next turn player just convert
04:13 - the whole thing into Json and send it to
04:15 - the Azure function now obviously in the
04:17 - super simple demo I didn't worry about
04:19 - security at all as usual when it comes
04:21 - to multiplayer the general rule is you
04:22 - really should never trust the client
04:24 - whereas over here I am trusting the
04:26 - client I'm just sending the entire cloud
04:28 - game State and in the function I just
04:30 - write the exact same thing over there
04:32 - onto the blob but of course in the final
04:34 - game you would run some kind of
04:35 - validation Logic on the server just to
04:37 - prevent the client from doing some kind
04:38 - of illegal move so this is the function
04:41 - for setting the aim State and obviously
04:43 - the other one is for getting the game
04:44 - State like I said this is not a constant
04:46 - connection like netcode for game objects
04:48 - so over here it's pretty much just based
04:50 - on polling so every half a second it's
04:52 - going to run this function and again
04:54 - it's going to contact the Azure function
04:56 - it will receive a response simply use
04:58 - Json to parse that response onto to a
05:00 - cloud game State and then simply updates
05:03 - over here is the Azure function which as
05:05 - you can see simply reads from The Blob
05:07 - and simply returns everything in that
05:09 - blob which again the whole thing is just
05:11 - this so in the game I can make a move it
05:13 - sends the state then the other one pumps
05:16 - for the update and simply gets it and
05:17 - sets the visual now of course one big
05:19 - limitation with this simple demo that I
05:21 - have here is there's just one game state
05:23 - of course in a proper game you would
05:25 - expand upon this to have multiple game
05:27 - States you wouldn't want just one game
05:29 - to be available for the home run so
05:30 - there would be some kind of game manager
05:32 - which would manage all of the game state
05:33 - that exists at once another thing is for
05:35 - getting updates so right now it just
05:37 - downloads the entire game State it's not
05:39 - a problem in this simple demo but if
05:41 - your game say it is super large maybe
05:43 - that could be an issue so simple for
05:45 - that would be when getting the game
05:47 - State the only return the things that
05:48 - changed since the last update so as you
05:50 - can see you can build upon this simple
05:51 - demo in many ways but the core of it is
05:54 - really simple it's super easy to add
05:56 - some asynchronous multiplayer tier games
05:57 - which is a really great feature to add
05:59 - especially only for turn-based games for
06:01 - the second example you can make your own
06:04 - custom scene Workshop where players can
06:06 - upload and download mods as you might
06:08 - know the scene Workshop is a really
06:09 - awesome scene feature for helping you
06:11 - easily add money to your game it's
06:12 - basically an online database to store
06:14 - all of the mods that players have built
06:16 - and allow players to easily download any
06:18 - mods they want so it's a really awesome
06:19 - system and works great I've used it in
06:21 - almost some of my Sim games it's great
06:23 - for enabling the player to use custom
06:24 - characters or sharing some levels but
06:27 - the obvious downside is since it's
06:28 - called Steam Workshop it really only
06:30 - works on Steam so if your game is not on
06:32 - Steam so if you are on mobile or
06:34 - consoles then you cannot use that system
06:35 - so there are some reasons for wanting to
06:37 - build your own and you can build that
06:39 - just using the cloud basically only
06:41 - needs is just some way of storing each
06:42 - mod data along with a total model list
06:45 - so here is my demo I have my player
06:47 - character and I can walk around the
06:49 - scene then on the side I can see my
06:51 - model list and mod types that I made for
06:53 - this game is pretty much just adding
06:55 - NPCs if I click on one of these mods
06:57 - it's going to download it so I'm going
06:59 - to click on this one there you go it's
07:00 - satellite mod and there you go it
07:02 - downloaded and added a new NPC onto my
07:04 - world importantly this is using the
07:06 - cloud so this character over here this
07:08 - Sprite sheet this is not included in the
07:09 - game files and also the NPC logic which
07:12 - were the NPCs I can press a button to
07:13 - interact with them so this message is
07:15 - also not anywhere in the base game
07:17 - instead of it was built by perhaps some
07:20 - other random player they created they
07:22 - drew on the spreadsheet they uploaded
07:24 - the mod and then I just downloaded and
07:26 - automatically added it to my game in
07:28 - order to make a mod it's also super
07:29 - simple over here on the left I've got a
07:31 - basic UI first of all I can input the
07:33 - position where I want my NPCs to spawn
07:35 - so let's say I want to spawn somewhere
07:37 - around here so I can pause the game and
07:39 - see that this position is 3.4 and 2.1 so
07:42 - over here let's go 3.4
07:45 - 0 and 2.1 then for the message this is
07:48 - whatever I want the NPC to say let's say
07:51 - nice to meet you
07:52 - and finally I can include a custom
07:54 - texture over here I have some texture so
07:57 - let's go with this one and I just paste
07:59 - the texture name now here obviously on
08:01 - the simple demo I just made this a
08:02 - regular text box but obviously in a
08:04 - final game you would use some buttons
08:06 - basically you would go through the game
08:07 - folder find all of the custom textures
08:09 - and automatically populate the name so I
08:11 - can just go ahead click on upload and
08:13 - it's uploading and there you go it was
08:15 - uploaded and on the right side my model
08:17 - list was automatically updated
08:19 - if I want I can also click here in order
08:21 - to manually update it then I can click
08:24 - to download and there you go on with
08:26 - that there's my awesome new custom
08:27 - character that was just downloaded from
08:29 - the mod server and I can try it and
08:31 - there you go it does say the message
08:32 - that I sent alright awesome how this
08:35 - system works is on pretty simple again
08:36 - it's just clever usage of azure
08:38 - functions and storage here's my storage
08:41 - account and it has as usually
08:43 - modelist.json
08:45 - we can edit and see that it's really
08:46 - just a simple list of of the months then
08:49 - obviously are all of the modern visual
08:51 - files so you can look at the one that we
08:52 - just created here it is this one again a
08:54 - very basic structure it's got a file
08:56 - name the spawn position then a text
08:59 - message for the chat bubble and finally
09:00 - the spreadsheet URL and spreadsheet as
09:03 - you can see was also uploaded to the
09:05 - server so this one is also over here in
09:07 - storage there it is now let's see on the
09:10 - function side first of all here on the
09:12 - empty side for the upload UI when I
09:14 - click the upload button it runs this
09:16 - code it's basically split into two parts
09:18 - so first it's going to upload just the
09:20 - image so it is a put using this image
09:23 - that is going to run this Azure function
09:26 - which is going to open up a mob with
09:28 - right access on the folder mods and then
09:31 - with the upload file name then simply
09:34 - writes directly onto that file with that
09:36 - done if that succeeds then it just
09:38 - generates a mod file name based on the
09:40 - Unix timestamp create a new cloud map
09:42 - structure sets the spawn position the
09:44 - Sprite URL detects messages and so on
09:46 - and again there's another very simple
09:48 - Azure function call then over here for
09:50 - this one simply grabs the model list
09:52 - with read and write access and also
09:54 - writes a new mod name then over here its
09:56 - own pre-basic logic and for downloading
09:58 - the entire model list again it's pretty
10:00 - easy it just gets that blob file and
10:02 - just returns it super simple for
10:04 - unloading a specific mod it's also very
10:06 - simple just cause the function to get
10:08 - the mod which again is going to return
10:09 - that Json object then simply use the
10:11 - Json utility to convert that into a quad
10:13 - mod then just another function in order
10:15 - to grab the actual texture and finally
10:17 - just spawn the NPC with all the basic
10:19 - things so here is the working demo I'm
10:21 - walking around my world I'm a bit lonely
10:23 - so I'm going to click on this and there
10:25 - you go it's going to download an NPC I
10:27 - can go and I can interact with it so
10:29 - here is a character that was created by
10:30 - some other players and it was downloaded
10:32 - straight from the cloud alright awesome
10:34 - for the third example here are the
10:37 - player messages like in Elden ring or
10:39 - dark zones so it's just like I showed in
10:41 - the Azure Basics video except in this
10:43 - video I just refactor the code to use
10:45 - Azure functions and precision storage as
10:48 - opposed to the web API which is what I
10:49 - used in that original video so again
10:51 - players anywhere in the world they can
10:53 - write some messages they can go
10:54 - somewhere right and everyone else can
10:55 - download the same messages so the other
10:57 - players playing their own game they can
10:59 - see messages from other players without
11:01 - being directly connected in multiplayer
11:02 - with any of them again it's all based on
11:05 - super basic Azure functions and storage
11:07 - so I got a function which grabs a blob
11:09 - storage and grabs all of the messages
11:12 - that have been added by other players
11:13 - and simply spawns a prefab and I myself
11:16 - can also spawn something so I can press
11:17 - then over here is a nice input window
11:19 - that I made in a previous video I can
11:22 - write my own message
11:25 - so I can write my own message and press
11:27 - OK and there you go with contact C
11:28 - function and then update see pull up
11:31 - storage puts a message there and any
11:32 - player anywhere in the world can now see
11:34 - this brand new message so in terms of
11:36 - logic you can see how building a system
11:37 - like this is really super easy and it's
11:39 - a great way to add some player
11:41 - interaction to your games even if they
11:42 - are mostly in single player for the
11:44 - fourth example storing leaderboards and
11:46 - histograms kind of like in the various
11:48 - Electronics games in those games like
11:50 - spacecam and infinite Monitor and so on
11:52 - when you complete on level you can see
11:54 - how he did compared to all the other
11:55 - players there's a really nice histogram
11:57 - that shows you where you land on the
11:59 - distribution of all the scores so this
12:01 - one is almost exactly like the
12:02 - leaderboard that I covered in detail the
12:04 - only difference here is really you just
12:05 - presented that differently so instead of
12:07 - a line by line leaderboard you show a
12:10 - nice bar graph so the player finishes
12:11 - the level and uploads their score over
12:13 - here I got some nice buttons to test so
12:15 - let's say I got a score between 100 and
12:16 - 200 so I click on it and they're going
12:19 - at a score of 153 and gets out and we
12:21 - can see over here nice visual of the
12:23 - histogram again the code is super simple
12:25 - so click a button generate a random
12:27 - number and add a score for adding the
12:29 - score just contacts the Azure function
12:31 - and uploads the score with a nice Json
12:33 - then the function once again grabs the
12:35 - blob as read and write simply reads the
12:38 - blob adds any score and updates a new
12:40 - blob here you see blob data it's really
12:42 - just a list of all of the scores and the
12:44 - other function simply gets the scores
12:45 - and updates the UI so even though I'm
12:47 - playing in single player I can upload my
12:49 - score and see how I compare to other
12:50 - players in the world once again
12:52 - obviously you would add some Foundation
12:53 - since you don't want people to submit
12:55 - fake scores but yep you can see how easy
12:57 - it is just to add some score sort and so
13:00 - on for the fifth example you could also
13:02 - make a mechanic kind of like the
13:03 - connected Whirlwind that's running if
13:05 - you haven't played it basically there's
13:06 - a way for you to invest in building
13:08 - roads and bridges that other players can
13:10 - also use so even though the game is
13:12 - single player there's this nice
13:13 - connection between player worlds as
13:15 - usual only takes is once again just a
13:17 - way of storing and retrieving living
13:18 - data so here I've Got My Demo which by
13:21 - the way I'm using the cinti Sci-Fi City
13:23 - pack there's only in the description if
13:25 - you want to get it so right now no one
13:27 - has built anything for example I would
13:29 - like to go all the way up there but
13:31 - right now the only way to get up there
13:32 - is to go for a huge detour around this
13:34 - building or another way is I can simply
13:36 - build a teleporter that no one in the
13:38 - world has built just yet so as the first
13:40 - one I can go all the way up here and I
13:41 - can build a teleporter so press a button
13:43 - use resources whatever and there you go
13:45 - it creates that nice teleporter and now
13:47 - I can go I can touch it and there you go
13:49 - it jumps me all the way up here once
13:51 - again the whole point is that it's a
13:53 - connected world so in my single player
13:55 - game I built this now if I stop playing
13:57 - the game and I play again as if I were a
14:00 - completely different player on the other
14:01 - side of the world and look at that the
14:03 - town part is built so thanks to some
14:05 - really helpful player thousands of miles
14:07 - away they built this teleport which is
14:09 - now helping me in my own single player
14:11 - game it would be super easy to also
14:13 - expand upon this to allow the players to
14:15 - upvote other player construct buildings
14:16 - just like in that streaming so here we
14:18 - have another example similar to The Dark
14:20 - Souls one where we have a single player
14:22 - game but we did some asynchronous
14:23 - multiplier mechanics so these are demos
14:25 - that I've built but here's some more
14:27 - mechanics you could build you could make
14:29 - a kind of auction house or trading house
14:31 - like in Eve online or Diablo basically
14:33 - some place where you can say that you
14:35 - want to sell some goods and other
14:36 - players can see what you're selling once
14:38 - again you don't need real-time
14:39 - multiplayer connection to do that again
14:41 - you just need a place to Source some
14:42 - data and interact with it you could also
14:45 - make an update in patching system so
14:46 - have your game connect to a server on
14:48 - the cloud to check if there's any
14:49 - updates if so download them and
14:51 - automatically patch the game you can
14:53 - make a persistent online world so for
14:55 - example in fps like PlanetSide 2 where
14:57 - you find some small skirmishes and then
14:59 - those skirmishes have an impact on the
15:01 - entire world map once again all you need
15:03 - is to store the world State and some
15:05 - function to run logic to update it
15:07 - another possibility is slightly related
15:09 - to the custom CM Workshop is you can
15:11 - upload s to the cloud using Azure
15:13 - storage and then download them in your
15:14 - game but unlike the Steam Workshop demo
15:17 - what I mean is a place where only you
15:19 - developer has access so with that you
15:21 - can add extra content to your game
15:23 - without having to upload a brand new
15:24 - build for example upload assets for
15:26 - adding some more levels some more new
15:28 - weapons or something like a Christmas
15:30 - event this is exactly what ENT cloud
15:32 - content delivery does actually have a
15:34 - lecture on how to use that in my
15:36 - ultimate TNT overview course so if you
15:38 - want to learn more about that check it
15:39 - out and speaking of cloudcon delivery I
15:41 - should also mention that YouTube
15:43 - themselves also have a bunch of these
15:44 - Cloud related Services Under The Brand
15:46 - Indie gaming Services I covered an
15:48 - overview of the 30 or so tools that ENT
15:50 - provides you can watch that video to see
15:52 - all of them and of course there are
15:53 - other services like for example Firebase
15:55 - and playfab so the question is do you
15:58 - want to build a model yourself or do you
15:59 - want to use a pre-built tool if you
16:01 - build them all yourself then you have
16:03 - phone control to make it work exactly as
16:04 - you wanted whereas with something like
16:06 - Unity gaming Services you can only
16:08 - interact with the pre-made tools but
16:09 - they might not do exactly what you want
16:11 - so it's really the same question as when
16:13 - using any kind of asset do you want to
16:15 - spend the time and effort making
16:16 - something like a 3D model or do you just
16:18 - buy something from the s store here for
16:20 - example you can combine Azure functions
16:22 - with storage to make some kind of cloud
16:24 - safe tool or you can just use unity's
16:26 - built-in tool and of course the best
16:28 - option of all is simply to use both for
16:30 - for anything that UNT already has a
16:33 - built-in tool go ahead and use that and
16:35 - for anything else that there's no
16:36 - built-in tool go ahead build yourself
16:38 - and use it with the cloud with azure so
16:41 - personally I would not build my own
16:42 - cloud save tool I would just use Unity
16:44 - however for a custom messaging system
16:46 - kind of like the Elden ring for that I
16:49 - would say build yourself since Unity
16:50 - doesn't have a pre-built to own
16:52 - specifically for that purpose alright so
16:53 - these are a bunch of mechanics and
16:55 - interesting ways you can use the cloud
16:56 - in your games
16:57 - if you'd like to explore this area
16:59 - definitely check out my video on Azure
17:00 - Basics it will quickly teach you the
17:03 - basic terms to help you get certain and
17:05 - of course check out the complete
17:06 - leaderboard tutorial it's made using
17:08 - Azure functions and search exactly like
17:09 - I showed for all of these mechanics so
17:11 - if you found that tutorial you won't be
17:13 - able to build everything that I should
17:14 - here and much more alright hope that's
17:16 - useful check out these videos to learn
17:18 - some more thanks to these awesome
17:20 - patreon supporters for making these
17:21 - videos possible thank you for watching
17:23 - and I'll see you next time
17:29 - foreign

Cleaned transcript:

hello and welcome I'm your code monkey so while ago I was researching the clouds specifically Microsoft Azure it's a really interesting area with tons of potential use cases for game developers I made a getting started video tutorial a while ago if you don't know anything about what is the cloud what is azure and you quickly want to learn Basics and follow a stepbystep tutorial definitely watch that video basically it's a video that I wish I had when I started learning and I also made a second video one of my most detailed video tutorials I've ever done it's all about how to make an online leaderboard using Azure functions and search based on that combination of tools using functions in storage there's a bunch of really interesting cloudbased mechanics that you could build so here let's look at five interesting ones that I built all of them are based on all of the logic that I covered in that video so this one is kind of more of a showcase than a tutorial I just want you to see what you could build to add some interesting mechanics and make your game stand out and for Indie devs all of this can be done pretty much within the free tier or maybe just one or two cents per month so when you hear Cloud Don't Be Afraid right away thinking you need a huge budget to create all these interesting things most of them are probably completely free so we're going to look at how to make asynchronous multiplayer where both players don't need to be online at the same time then how to create your own custom scene Workshop which works on all platforms after that look how to create the player messages like in Elden ring or Dark Souls then how to create a histogram kind of like in the electronics games how to create a shared worm like in this running where a player can build something and other players can see it built and a few more examples okay so let's look at some awesome mechanics we can build using the cloud first example is how you can add asynchronous multiplayer to your game now I recently covered Unity multiplayer using netcode for game objects that tool is excellent if you want realtime multiplayer meaning all the players are connected and playing the game at the exact same time but if your game is something like turn base so maybe something like Civilization then perhaps you don't need a Content connection so here is a super basic tictactoe example I've got two bones they are not directly connected in any way so there's no netcode involved here then up here I can make a move so let's Place one right down the middle and there you go it does synchronize to the other one and now I can't make any more moves so now I need to play with this player down here so let's put a no right in there and if there you go it synchronizes so now it's this one so now this one do something and now this one play again see up here as you can see I'm playing a multiplayer game without needing any direct connection and of course a bonus benefit of not being directly connected is that like I said it's asynchronous so for example in a complex scene like Civilization I could take my turn then my opponent could go and live their life like normal and then when they have time they can come back and they can take their own turn then maybe I could get notified that my opponent took a turn so then I can take my own turn and so on so this is a really awesome feature for people who can't play multiplayer games on top but still would like to play a game against another player to be on this kind of thing is really quite simple you just need some place to store the game say data which of course for that you have Azure storage then you need some way to run logic and update that game data and for that you can use Azure functions so that's exactly what I have working here I have this simple script and then down here on update I'm just testing for a simple mouse input when that happens then over here I'm just connecting to the Azure function by doing a standard HTTP request over here I'm using localhost just for testing but obviously in a final game this would be a regular URL so this is all it does just contacts the Azure function then the Azure function is running this code here it grabs the blob from Azure storage and similarly takes the request and writes it onto the blob and over here we can view the Moab storage so we can click on it to see and then go into edit and if here is all of the entire game state which is a simple structure holding data on each possible board position again all of this is the exact same logic that I covered in the online leaderboard tutorial it's just an Azure function interacting with some persistent storage that's it so when I make a move it simply modifies the game state here is the game set that I'm using it's all pretty basic I just got an array of all of the board positions and I got which one is the current player so when the player clicks really just updating that position set the other one to be the other next turn player just convert the whole thing into Json and send it to the Azure function now obviously in the super simple demo I didn't worry about security at all as usual when it comes to multiplayer the general rule is you really should never trust the client whereas over here I am trusting the client I'm just sending the entire cloud game State and in the function I just write the exact same thing over there onto the blob but of course in the final game you would run some kind of validation Logic on the server just to prevent the client from doing some kind of illegal move so this is the function for setting the aim State and obviously the other one is for getting the game State like I said this is not a constant connection like netcode for game objects so over here it's pretty much just based on polling so every half a second it's going to run this function and again it's going to contact the Azure function it will receive a response simply use Json to parse that response onto to a cloud game State and then simply updates over here is the Azure function which as you can see simply reads from The Blob and simply returns everything in that blob which again the whole thing is just this so in the game I can make a move it sends the state then the other one pumps for the update and simply gets it and sets the visual now of course one big limitation with this simple demo that I have here is there's just one game state of course in a proper game you would expand upon this to have multiple game States you wouldn't want just one game to be available for the home run so there would be some kind of game manager which would manage all of the game state that exists at once another thing is for getting updates so right now it just downloads the entire game State it's not a problem in this simple demo but if your game say it is super large maybe that could be an issue so simple for that would be when getting the game State the only return the things that changed since the last update so as you can see you can build upon this simple demo in many ways but the core of it is really simple it's super easy to add some asynchronous multiplayer tier games which is a really great feature to add especially only for turnbased games for the second example you can make your own custom scene Workshop where players can upload and download mods as you might know the scene Workshop is a really awesome scene feature for helping you easily add money to your game it's basically an online database to store all of the mods that players have built and allow players to easily download any mods they want so it's a really awesome system and works great I've used it in almost some of my Sim games it's great for enabling the player to use custom characters or sharing some levels but the obvious downside is since it's called Steam Workshop it really only works on Steam so if your game is not on Steam so if you are on mobile or consoles then you cannot use that system so there are some reasons for wanting to build your own and you can build that just using the cloud basically only needs is just some way of storing each mod data along with a total model list so here is my demo I have my player character and I can walk around the scene then on the side I can see my model list and mod types that I made for this game is pretty much just adding NPCs if I click on one of these mods it's going to download it so I'm going to click on this one there you go it's satellite mod and there you go it downloaded and added a new NPC onto my world importantly this is using the cloud so this character over here this Sprite sheet this is not included in the game files and also the NPC logic which were the NPCs I can press a button to interact with them so this message is also not anywhere in the base game instead of it was built by perhaps some other random player they created they drew on the spreadsheet they uploaded the mod and then I just downloaded and automatically added it to my game in order to make a mod it's also super simple over here on the left I've got a basic UI first of all I can input the position where I want my NPCs to spawn so let's say I want to spawn somewhere around here so I can pause the game and see that this position is 3.4 and 2.1 so over here let's go 3.4 0 and 2.1 then for the message this is whatever I want the NPC to say let's say nice to meet you and finally I can include a custom texture over here I have some texture so let's go with this one and I just paste the texture name now here obviously on the simple demo I just made this a regular text box but obviously in a final game you would use some buttons basically you would go through the game folder find all of the custom textures and automatically populate the name so I can just go ahead click on upload and it's uploading and there you go it was uploaded and on the right side my model list was automatically updated if I want I can also click here in order to manually update it then I can click to download and there you go on with that there's my awesome new custom character that was just downloaded from the mod server and I can try it and there you go it does say the message that I sent alright awesome how this system works is on pretty simple again it's just clever usage of azure functions and storage here's my storage account and it has as usually modelist.json we can edit and see that it's really just a simple list of of the months then obviously are all of the modern visual files so you can look at the one that we just created here it is this one again a very basic structure it's got a file name the spawn position then a text message for the chat bubble and finally the spreadsheet URL and spreadsheet as you can see was also uploaded to the server so this one is also over here in storage there it is now let's see on the function side first of all here on the empty side for the upload UI when I click the upload button it runs this code it's basically split into two parts so first it's going to upload just the image so it is a put using this image that is going to run this Azure function which is going to open up a mob with right access on the folder mods and then with the upload file name then simply writes directly onto that file with that done if that succeeds then it just generates a mod file name based on the Unix timestamp create a new cloud map structure sets the spawn position the Sprite URL detects messages and so on and again there's another very simple Azure function call then over here for this one simply grabs the model list with read and write access and also writes a new mod name then over here its own prebasic logic and for downloading the entire model list again it's pretty easy it just gets that blob file and just returns it super simple for unloading a specific mod it's also very simple just cause the function to get the mod which again is going to return that Json object then simply use the Json utility to convert that into a quad mod then just another function in order to grab the actual texture and finally just spawn the NPC with all the basic things so here is the working demo I'm walking around my world I'm a bit lonely so I'm going to click on this and there you go it's going to download an NPC I can go and I can interact with it so here is a character that was created by some other players and it was downloaded straight from the cloud alright awesome for the third example here are the player messages like in Elden ring or dark zones so it's just like I showed in the Azure Basics video except in this video I just refactor the code to use Azure functions and precision storage as opposed to the web API which is what I used in that original video so again players anywhere in the world they can write some messages they can go somewhere right and everyone else can download the same messages so the other players playing their own game they can see messages from other players without being directly connected in multiplayer with any of them again it's all based on super basic Azure functions and storage so I got a function which grabs a blob storage and grabs all of the messages that have been added by other players and simply spawns a prefab and I myself can also spawn something so I can press then over here is a nice input window that I made in a previous video I can write my own message so I can write my own message and press OK and there you go with contact C function and then update see pull up storage puts a message there and any player anywhere in the world can now see this brand new message so in terms of logic you can see how building a system like this is really super easy and it's a great way to add some player interaction to your games even if they are mostly in single player for the fourth example storing leaderboards and histograms kind of like in the various Electronics games in those games like spacecam and infinite Monitor and so on when you complete on level you can see how he did compared to all the other players there's a really nice histogram that shows you where you land on the distribution of all the scores so this one is almost exactly like the leaderboard that I covered in detail the only difference here is really you just presented that differently so instead of a line by line leaderboard you show a nice bar graph so the player finishes the level and uploads their score over here I got some nice buttons to test so let's say I got a score between 100 and 200 so I click on it and they're going at a score of 153 and gets out and we can see over here nice visual of the histogram again the code is super simple so click a button generate a random number and add a score for adding the score just contacts the Azure function and uploads the score with a nice Json then the function once again grabs the blob as read and write simply reads the blob adds any score and updates a new blob here you see blob data it's really just a list of all of the scores and the other function simply gets the scores and updates the UI so even though I'm playing in single player I can upload my score and see how I compare to other players in the world once again obviously you would add some Foundation since you don't want people to submit fake scores but yep you can see how easy it is just to add some score sort and so on for the fifth example you could also make a mechanic kind of like the connected Whirlwind that's running if you haven't played it basically there's a way for you to invest in building roads and bridges that other players can also use so even though the game is single player there's this nice connection between player worlds as usual only takes is once again just a way of storing and retrieving living data so here I've Got My Demo which by the way I'm using the cinti SciFi City pack there's only in the description if you want to get it so right now no one has built anything for example I would like to go all the way up there but right now the only way to get up there is to go for a huge detour around this building or another way is I can simply build a teleporter that no one in the world has built just yet so as the first one I can go all the way up here and I can build a teleporter so press a button use resources whatever and there you go it creates that nice teleporter and now I can go I can touch it and there you go it jumps me all the way up here once again the whole point is that it's a connected world so in my single player game I built this now if I stop playing the game and I play again as if I were a completely different player on the other side of the world and look at that the town part is built so thanks to some really helpful player thousands of miles away they built this teleport which is now helping me in my own single player game it would be super easy to also expand upon this to allow the players to upvote other player construct buildings just like in that streaming so here we have another example similar to The Dark Souls one where we have a single player game but we did some asynchronous multiplier mechanics so these are demos that I've built but here's some more mechanics you could build you could make a kind of auction house or trading house like in Eve online or Diablo basically some place where you can say that you want to sell some goods and other players can see what you're selling once again you don't need realtime multiplayer connection to do that again you just need a place to Source some data and interact with it you could also make an update in patching system so have your game connect to a server on the cloud to check if there's any updates if so download them and automatically patch the game you can make a persistent online world so for example in fps like PlanetSide 2 where you find some small skirmishes and then those skirmishes have an impact on the entire world map once again all you need is to store the world State and some function to run logic to update it another possibility is slightly related to the custom CM Workshop is you can upload s to the cloud using Azure storage and then download them in your game but unlike the Steam Workshop demo what I mean is a place where only you developer has access so with that you can add extra content to your game without having to upload a brand new build for example upload assets for adding some more levels some more new weapons or something like a Christmas event this is exactly what ENT cloud content delivery does actually have a lecture on how to use that in my ultimate TNT overview course so if you want to learn more about that check it out and speaking of cloudcon delivery I should also mention that YouTube themselves also have a bunch of these Cloud related Services Under The Brand Indie gaming Services I covered an overview of the 30 or so tools that ENT provides you can watch that video to see all of them and of course there are other services like for example Firebase and playfab so the question is do you want to build a model yourself or do you want to use a prebuilt tool if you build them all yourself then you have phone control to make it work exactly as you wanted whereas with something like Unity gaming Services you can only interact with the premade tools but they might not do exactly what you want so it's really the same question as when using any kind of asset do you want to spend the time and effort making something like a 3D model or do you just buy something from the s store here for example you can combine Azure functions with storage to make some kind of cloud safe tool or you can just use unity's builtin tool and of course the best option of all is simply to use both for for anything that UNT already has a builtin tool go ahead and use that and for anything else that there's no builtin tool go ahead build yourself and use it with the cloud with azure so personally I would not build my own cloud save tool I would just use Unity however for a custom messaging system kind of like the Elden ring for that I would say build yourself since Unity doesn't have a prebuilt to own specifically for that purpose alright so these are a bunch of mechanics and interesting ways you can use the cloud in your games if you'd like to explore this area definitely check out my video on Azure Basics it will quickly teach you the basic terms to help you get certain and of course check out the complete leaderboard tutorial it's made using Azure functions and search exactly like I showed for all of these mechanics so if you found that tutorial you won't be able to build everything that I should here and much more alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time foreign
