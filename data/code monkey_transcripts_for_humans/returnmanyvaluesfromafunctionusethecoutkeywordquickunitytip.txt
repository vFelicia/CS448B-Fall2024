With timestamps:

00:01 - hi there this is a quick tip for how to
00:04 - return multiple values from a single
00:05 - function so I have this scene here with
00:08 - a zombie just hanging around and when I
00:10 - click on the mouse button there is an
00:12 - explosion that should damage him so I
00:14 - can click somewhere and if it's within a
00:16 - certain distance you know damage if it's
00:17 - far away it does not so let's see the
00:20 - code so over here is the script running
00:23 - on the scene and here we're simply doing
00:25 - on our updates testing if the left mouse
00:28 - button is down if so we spawn the
00:30 - explosion on the mouse wrong position on
00:32 - the spawn explosion we simply
00:34 - instantiate the prefab on that position
00:36 - then we use this function to test if the
00:38 - zombie should be hit and if so we
00:39 - trigger damage now in this function we
00:42 - receive the zombie position and the
00:43 - explosion position then we simply do a
00:46 - distance check between the zombie
00:48 - position and the explosion position and
00:50 - if it is within a certain range then we
00:53 - return true if not return false okay so
00:56 - this works pretty simple if the players
00:57 - within this distance he won't take
00:59 - damage if not he will not however now
01:02 - let's say we want the damage to be
01:04 - dependent on the distance of the bomb
01:05 - and also we want to get a random chance
01:07 - for the bomb to cause a knock back this
01:10 - function is simply returning a boolean
01:12 - so right now there's no way to return
01:14 - more information now one way we could do
01:16 - it is by creating a class or struct to
01:19 - hold the various values and return an
01:21 - instance of that class with those values
01:23 - so for example here make a private
01:25 - struct zombie hit info and inside we
01:29 - would have a public pool for hit then a
01:32 - polygon for damage amount and the public
01:36 - ball for cause knock-back
01:38 - so you could do this and return this
01:41 - object in there so this would work but
01:43 - there's another way that does not
01:44 - require is to define another different
01:47 - struct or class so instead of that we
01:51 - have our function it's some returns a
01:52 - boolean and in here we can add several
01:55 - other parameters and now we need to do
01:57 - is at the out keyword so for example
02:01 - when in for the damage amount and
02:03 - evolved for the cost knock back the out
02:06 - keyword means we're going to modify
02:08 - these parameters inside this function so
02:10 - we can access them outside so if he's
02:12 - far away we simply set the damage of
02:15 - to zero since it's not going to cause
02:16 - damage and the cost not life we also set
02:19 - it to false so as you can see the air
02:21 - disappeared since if you are using the
02:23 - out keyword you must set those variables
02:25 - before you exit the function so in here
02:28 - let's make the damage amount dependent
02:30 - on the distance so here we are defining
02:38 - the damage amount based on the distance
02:41 - to the zombie to the explosion sophie is
02:44 - right on top he takes 50 damage if he is
02:46 - right at the edge you only taste one
02:47 - damage and we are simply defining a 50%
02:50 - chance to cause a knock back so then in
02:52 - here in order to use these parameters we
02:54 - need to first create some variables to
02:56 - hold our values so in here before we
02:58 - call the function we define an inch for
03:00 - the damage amount and a bulb for the
03:03 - cause knock-back and here when we do our
03:07 - function call we pass in those two and
03:10 - then our out for the damage amount and
03:12 - out for the cause knock back so the our
03:17 - keyword means that when this function is
03:18 - run we know that we have some value
03:20 - stored in these two so in here we can
03:23 - use this damage amount instead of using
03:25 - effects by only use the one returned by
03:27 - this function and if we are cause
03:29 - knock-back which regulate knock-back
03:34 - okay so essentially we have three pieces
03:37 - of data being returned by this function
03:38 - we've got a boolean if the zombie has
03:40 - been hit we have the damage amount to
03:42 - depend on the distance to the explosion
03:44 - position and we have a boolean for the
03:46 - cosna track so let's see okay here we
03:49 - are let's cause M Juran here and there
03:51 - you go took a little bit and they knock
03:53 - back and now there was no knock back and
03:55 - right on top takes 50 and far away takes
03:57 - nothing and like that okay so as you can
04:00 - see this is how you return multiple
04:02 - values from just one function and that's
04:04 - it hope you found this tip useful
04:06 - alright see you next time
04:09 - [Music]
04:15 - [Music]
04:17 - you

Cleaned transcript:

hi there this is a quick tip for how to return multiple values from a single function so I have this scene here with a zombie just hanging around and when I click on the mouse button there is an explosion that should damage him so I can click somewhere and if it's within a certain distance you know damage if it's far away it does not so let's see the code so over here is the script running on the scene and here we're simply doing on our updates testing if the left mouse button is down if so we spawn the explosion on the mouse wrong position on the spawn explosion we simply instantiate the prefab on that position then we use this function to test if the zombie should be hit and if so we trigger damage now in this function we receive the zombie position and the explosion position then we simply do a distance check between the zombie position and the explosion position and if it is within a certain range then we return true if not return false okay so this works pretty simple if the players within this distance he won't take damage if not he will not however now let's say we want the damage to be dependent on the distance of the bomb and also we want to get a random chance for the bomb to cause a knock back this function is simply returning a boolean so right now there's no way to return more information now one way we could do it is by creating a class or struct to hold the various values and return an instance of that class with those values so for example here make a private struct zombie hit info and inside we would have a public pool for hit then a polygon for damage amount and the public ball for cause knockback so you could do this and return this object in there so this would work but there's another way that does not require is to define another different struct or class so instead of that we have our function it's some returns a boolean and in here we can add several other parameters and now we need to do is at the out keyword so for example when in for the damage amount and evolved for the cost knock back the out keyword means we're going to modify these parameters inside this function so we can access them outside so if he's far away we simply set the damage of to zero since it's not going to cause damage and the cost not life we also set it to false so as you can see the air disappeared since if you are using the out keyword you must set those variables before you exit the function so in here let's make the damage amount dependent on the distance so here we are defining the damage amount based on the distance to the zombie to the explosion sophie is right on top he takes 50 damage if he is right at the edge you only taste one damage and we are simply defining a 50% chance to cause a knock back so then in here in order to use these parameters we need to first create some variables to hold our values so in here before we call the function we define an inch for the damage amount and a bulb for the cause knockback and here when we do our function call we pass in those two and then our out for the damage amount and out for the cause knock back so the our keyword means that when this function is run we know that we have some value stored in these two so in here we can use this damage amount instead of using effects by only use the one returned by this function and if we are cause knockback which regulate knockback okay so essentially we have three pieces of data being returned by this function we've got a boolean if the zombie has been hit we have the damage amount to depend on the distance to the explosion position and we have a boolean for the cosna track so let's see okay here we are let's cause M Juran here and there you go took a little bit and they knock back and now there was no knock back and right on top takes 50 and far away takes nothing and like that okay so as you can see this is how you return multiple values from just one function and that's it hope you found this tip useful alright see you next time you
