With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - and here is a fun drag racing minigame
00:04 - you pick a car and opponent and go race
00:07 - step on the throttle when the light
00:08 - turns green change gears at the perfect
00:10 - timing hit the Nas and wipe out the
00:12 - competition it's a simple minigame that
00:14 - is very much inspired by the many drag
00:16 - racing flash games that I have played 20
00:18 - years ago simple but very fun making
00:20 - this game involved building some
00:22 - interesting things like for example
00:23 - using animation curves for the gear
00:25 - ratios I use a nice 3D UI with some gear
00:28 - shift animations and a bunch of tiny
00:31 - effects to really sell these sense of
00:32 - speed you can look at these two shots
00:34 - where both cars are moving at the exact
00:36 - same speed and you can clearly see how
00:37 - one of them sells the sense of speed
00:39 - much better adding all of these tiny
00:41 - effects really makes a big difference
00:42 - I'll mention exactly what they all are
00:44 - in a little bit there is skill involved
00:46 - in this game so go ahead and download
00:48 - the free project files to see how fast
00:50 - you can do it the reason why I made this
00:52 - game is because right now there's an
00:53 - awesome sale happening on the synthy
00:55 - store pretty much all of their packs are
00:57 - currently at Half Price personally I
00:58 - love their low poly Style I covered lots
01:01 - of potential games you could build with
01:02 - these ads in the previous video and on
01:04 - top of the regular discounts they have a
01:06 - flash deal every week with an even
01:07 - deeper discount this week the massive
01:09 - discount is on the street racer pack
01:11 - which is exactly what I use to make this
01:13 - minigame this one has over a thousand
01:15 - prefabs lots of cars with tons of
01:17 - customizable parts you can swap out the
01:19 - wheels a paint job add some spoilers and
01:21 - so on it also includes a bunch of
01:23 - characters with tons of customization
01:25 - options and a really nice looking
01:26 - environment of some docs so check out
01:29 - the entire settle in the street racer
01:30 - pack Link in the description here let's
01:32 - see the game that I made pretty quickly
01:33 - using that pack I think in total I
01:36 - worked on this mini game for about 10
01:38 - hours and the final result looks pretty
01:39 - great thanks to using these awesome
01:41 - assets you can download the project
01:43 - files for this game link description in
01:45 - there you will find two scenes one which
01:47 - is functional but only has basic Hues
01:49 - and a second one which is using all
01:51 - these assets if you pick up this asset
01:53 - pack just import it directly onto the
01:55 - project and all of the assets should
01:56 - load correctly okay so here let's
01:58 - inspect the game to see what we can
01:59 - learn from it personally see it in
02:01 - action so here it starts off with a
02:03 - simple car selector window I can pick
02:06 - any of these cars they all got varying
02:08 - different sets I can also pick the car
02:10 - from my opponent and I can also set the
02:13 - AI as either easy normal or hard so for
02:15 - example let's go with these cars and
02:17 - Let's Race here we are ready to go so
02:19 - let's start the countdown and there you
02:21 - go three two one and after the light yep
02:24 - going off now I'm changing gears I'm
02:26 - trying to change as quickly as possible
02:28 - There You Go Changing I'm also using the
02:30 - nas there you go super fast speed up and
02:32 - the camera is shaking the car is going
02:33 - super fast
02:35 - and yep there you go look at that I won
02:37 - all right awesome so now let's inspect
02:40 - all of this starting over here from the
02:42 - Carson liked window now this window is
02:44 - actually pretty interesting this window
02:46 - itself is a UI element but as you can
02:48 - see the cars are actually 3D so how this
02:51 - works is the cars are actually over on
02:53 - the side so if I go yep over here so on
02:55 - position zero two thousand zero over
02:57 - here are both cars with a basic
02:59 - animation just rotating them and then as
03:01 - you can see each of them has a camera
03:02 - looking straight at them and for that
03:04 - camera the way that is working is over
03:06 - here on the output instead of outputting
03:08 - to the screen it is outputting to a
03:10 - rendered texture now I cover the red
03:12 - detection detail in another video they
03:13 - are really useful so it renders onto
03:15 - this random texture and then on the
03:17 - campus itself over here there's a simple
03:19 - raw image showing that random texture
03:21 - the rest of this UI is on pretty basic
03:23 - I've got a basic button to change the
03:25 - car which modifies the visual transform
03:27 - and updates stats
03:29 - for the stats themselves they are stored
03:31 - in a simple swordball object so here is
03:33 - the definition pretty basic so just as a
03:35 - transform for the visual prefab the
03:37 - nazimont max the car Speed Max the
03:39 - acceleration and the brake speed then
03:41 - for the visual for these bars I'm just
03:42 - using some film images
03:44 - so it's just an image component with
03:46 - over here the image type set to film
03:48 - horizontal and here it has the film
03:50 - Mount although remember that in order to
03:52 - use this film the mount image setting in
03:53 - order to use this you must have a source
03:55 - image assigned if there is no Sprite
03:57 - here so if I click on delete nope like
04:00 - this you cannot access that so it needs
04:01 - to have a spread assigned over here I'm
04:03 - using the built-in white pixel Sprite if
04:06 - you search for it and you don't see it
04:07 - make sure on the top right corner you
04:09 - click on the eye icon that will show all
04:11 - the built-in Sprites so this I can
04:13 - select any of these cars I can select my
04:16 - car and click on race then here we are
04:18 - waiting for the player input before
04:20 - actually starting the countdown how this
04:22 - handled is by a very simple State
04:24 - machine so this is pretty much excellent
04:26 - like I covered in my free course for the
04:28 - game State machine for that one when the
04:30 - site is going to start then simply waits
04:32 - for player input and 30 counter then
04:34 - also just like in the free course I
04:35 - separated the only logic individuals so
04:37 - on this group there's only the logic for
04:39 - the countdown itself there are no
04:40 - visuals here and then I have another UI
04:43 - script and only this one handles all the
04:44 - visuals the images similarly change
04:46 - color as the timer counts on by the way
04:48 - like I said this game this was inspired
04:50 - by the flash games that I played as Akin
04:52 - so before I actually started working on
04:54 - this game I went to YouTube to look at
04:56 - some gameplay basically whenever you
04:58 - make a game or prototype definitely
04:59 - start off by doing a bit of research
05:01 - first study what other games in the
05:03 - similar genre have done see what works
05:05 - and what doesn't and then give it your
05:06 - own unique twist now for the car itself
05:08 - it's using a pre-basic script this is
05:11 - pretty small most of the logic is really
05:12 - just on the update so we're only just
05:14 - about 100 lines this is really only a
05:16 - drag racing game so it doesn't need a
05:17 - complex controller it literally just
05:19 - rides forward and changes gears so over
05:22 - here I've got some simple throttle
05:23 - acceleration input then I've got some
05:26 - braking even though it's really only
05:28 - used when the outer brake is enabled
05:29 - which is after completing the race
05:31 - there's only no point in Breaking the
05:32 - middle then some input for changing
05:34 - gears and then for changing the nose now
05:36 - for the input as you can see over here
05:38 - I'm using a whole bunch of funks so
05:40 - these are delegates I'm using this
05:42 - instead of accessing the input directly
05:43 - I'm going to talk about this a bit more
05:45 - when I talk about the AI but basically
05:47 - it's the same thing that I used to
05:48 - record the trailer for my upcoming steam
05:50 - game Thinking Guardians go ahead and
05:52 - edit your wishlist so here the car
05:54 - controller is pretty simple just move
05:56 - forward change gears and use knots of it
05:58 - pretty basic the more complex part is
06:00 - actually how the gears work and how I
06:02 - handled that was with some animation
06:03 - curves this is a really awesome int
06:05 - feature that a lot of people don't know
06:07 - about they can be used for so much more
06:09 - than just animations I covered lots of
06:11 - use cases in a tutorial video here I'm
06:14 - using them for defining the acceleration
06:15 - curves to essentially handle the gear
06:17 - ratios so I've got all of these curves
06:19 - for each gear and here you can see the
06:21 - curve the vertical y-axis that one is
06:24 - the amount of acceleration and the
06:26 - x-axis that is the total car speed
06:28 - so over here on the first gear you can
06:30 - see it gets a ton of acceleration at
06:31 - load speeds but then quickly goes down
06:33 - if you're trying to use the first gear
06:35 - while the car is near the max speed then
06:36 - you won't get much acceleration then for
06:39 - the second gear it's pretty similar it
06:40 - also has a peak but this the peak starts
06:42 - off a bit more in front then same thing
06:44 - for all the other gears so all of them
06:46 - have a peak slightly a bit more ahead I
06:48 - basically just Googled car acceleration
06:50 - curves you can find all kinds of graphs
06:53 - on how the actual gears actually work
06:55 - basically on any graph there's a certain
06:57 - point where it's actually optimal to
06:59 - change gears to the next one for example
07:00 - here on the first gear it starts going
07:02 - down let's say around 15 to 20 percent
07:05 - of Max Speed it starts going down here
07:07 - with acceleration under 80 percent and
07:09 - then on the second gear you can see
07:11 - between 15 and 20 percent of Max Speed
07:13 - over here the acceleration is over 80
07:15 - percent so technically around here would
07:17 - be the best spot to change this year now
07:19 - obviously let me point out this is
07:21 - definitely not a physically accurate
07:22 - simulation but for an arcade game this
07:24 - simple process actually works quite well
07:26 - here I am playing and I'm going to stay
07:28 - ages in first year so there you go going
07:31 - up and I'm not changing gears and yep
07:33 - look at that the max speed is actually
07:34 - not increasing too much so it's
07:37 - constantly still going up but as you can
07:39 - see the acceleration is super low
07:40 - whereas if I change gears and if they're
07:42 - going out speeds up quite a bit more so
07:44 - if I try to change gears a bit way too
07:46 - late so let's wait for that one to be
07:48 - really at the end and really at the end
07:50 - keep waiting and okay almost at the end
07:53 - let's see how long
07:54 - so 14.4 seconds okay now let's try again
07:58 - so now I'm going to swap gears a bit
08:00 - more around here which is a bit better
08:02 - so swap it out keep going and let's see
08:06 - how fast it goes and if they go 12.2
08:08 - seconds so quite a bit difference this
08:10 - is where the skill comes in in a game
08:11 - like this and that is basically how the
08:13 - car works as you can see it's on pretty
08:15 - basic also by the way in order to get a
08:17 - value from the animation curve really
08:19 - you just get the animation curve
08:20 - reference and then you just call the
08:22 - evaluate function pass in the time value
08:24 - and it gives you the Y value then for
08:27 - the UI itself for this I went with a fun
08:29 - 3D UI basically I wanted to only use
08:31 - assets from the street racer asset pack
08:33 - and this pack really only has 3D models
08:35 - and no UI elements so I needed some kind
08:38 - of speedometer and I browse the snls and
08:40 - I found this boost gauge which by the
08:42 - way as you can see this is not exactly
08:44 - the one that I'm using so this is
08:46 - actually a great practical tip for you
08:47 - when you're using some assets from some
08:49 - asset pack remember that you can always
08:51 - take whatever assets are included in
08:53 - that pack and slightly modify them
08:55 - that's exactly what I did personally I
08:57 - have no 3D modeling excuse so I
08:58 - definitely could not build something
09:00 - like this from scratch but given
09:01 - something like this I can definitely
09:02 - modify it to get it looking a bit more
09:04 - example like what I want so I took this
09:06 - original boost gauge and then I just
09:08 - used Pro Builder which is unity's
09:10 - built-in 3D modeling tool this one is
09:12 - somewhat basic but it works great for
09:14 - these kinds of minor changes so as you
09:16 - can see I added a bunch more dashes made
09:18 - them a bit thinner I also elongated the
09:20 - needle a little bit and got exactly what
09:22 - I wanted oh also if you don't know how
09:23 - to make a 3D White just like this as you
09:26 - can see these are all 3D elements just
09:29 - like the other cars they are also played
09:30 - offset so these are on zero one thousand
09:32 - zero so just to be offset from the
09:33 - actual world all the way down there so
09:35 - these are regular 3D models and the way
09:38 - they are shown in the UI is they have a
09:40 - second camera so here I have another
09:41 - object so this is another camera and
09:44 - what you need to do in order to make
09:45 - this a secondary camera is over here on
09:47 - the render type instead of making a base
09:49 - camera make it an overlay camera and
09:51 - then you go back into the main camera
09:53 - itself and over here note how this one
09:55 - is a base camera and then down here you
09:57 - have the stack so this is the camera
09:58 - stack and you can hear at all of the
10:00 - overlay cameras so that way you have the
10:02 - main camera and then on top of that you
10:04 - get the UI camera this is a really
10:06 - interesting way of building a UI it
10:08 - looks great and also importantly with
10:10 - this method of using two separate
10:12 - cameras this second camera will not be
10:14 - affected by the all of the speed effects
10:16 - that won't be applied on the first
10:17 - camera that I'm going to show in a
10:18 - little bit now the rest UI is all pretty
10:21 - basic so for needle itself that one just
10:24 - rotates so that's just a basic rotation
10:26 - on the y-axis so all of it pretty basic
10:28 - the rotation is supposed to be based on
10:30 - the RPM also for calculating the RPM
10:33 - this is not a similar game it's more rkd
10:35 - so this is definitely not a perfect RPM
10:37 - simulation here for the RPM math I just
10:40 - did something super basic basically just
10:42 - went through the animation curve for the
10:44 - acceleration graph I just went through
10:46 - it and basically inverted so this way
10:48 - when the point of the graph is near the
10:49 - top that means low RPM and when it's
10:52 - down here close to the bottom that means
10:53 - Max RPM again not realistic but it's
10:56 - simple and it works actually quite well
10:57 - the DUI also has this basic progress
10:59 - track down here really just two objects
11:02 - moving alongside a normalized position
11:04 - value and then the noise gauge itself
11:06 - here it's a super basic object just got
11:09 - the nas inside got the nas tank and note
11:11 - how the pivot is on the bottom I covered
11:13 - how you can modify the pivot in another
11:15 - video basically it's all to do with how
11:17 - you are clever with positioning the
11:19 - child objects relative to the parent so
11:21 - over here the child object is offset
11:23 - above so this way I can modify over here
11:25 - the Y scale and make some super basic
11:27 - NOS capsule container then the more fun
11:30 - part of the UI is actually down here the
11:31 - gear shifter this one was actually quite
11:33 - fun to make with that additional looks
11:35 - pretty interesting I'm quite happy with
11:36 - this
11:37 - for the visual I actually made this
11:39 - myself it really is just a bunch of
11:41 - cubes in the sphere so this one down
11:42 - here is a cube the dash is over here
11:44 - they're Cube that one is a cylinder and
11:46 - that one is a sphere some of it's super
11:48 - basic but it actually looks quite well I
11:49 - think and the reason why it looks pretty
11:51 - good is because of the animation
11:53 - so here this object has a basic animated
11:55 - component and inside it I've got all the
11:57 - various animations so starting off on
11:59 - Neutron going for Neutron to first the
12:01 - second third and so on the animations
12:03 - are on pretty basic really just goes
12:05 - from one place to the other when seen in
12:07 - action the gear stick actually looks
12:09 - quite nice thanks to all of those
12:10 - interesting animations next for the car
12:12 - visual again like I talked about time
12:14 - and time again in my free course I made
12:16 - sure to separate the visuals from the
12:18 - logic so the car script that I showed a
12:20 - while ago this one only handles the
12:21 - logic and then I've got a separate
12:23 - script this one only handles the visuals
12:25 - so here it's got a reference to the
12:26 - wheels to rotate them the braking lights
12:28 - the exhaust smoke and so on this asset
12:30 - pack actually only has all of the car
12:32 - parts of them separated so that makes
12:34 - handling the visuals actually super easy
12:35 - all of these objects are all separated
12:37 - so I could even modify the hood I can
12:39 - modify any of these things if I wanted
12:40 - but the main one is really just down
12:42 - here the wheels so I've got the wheel
12:44 - objects and I can easily just rotate
12:46 - them in any direction although for this
12:48 - one even though this is simple I
12:49 - actually did have some issues the first
12:51 - time I tried to rotate I actually did it
12:53 - on the wrong axes which was pretty funny
12:55 - then I also had tons of issues where the
12:57 - rotation wasn't working working with
12:59 - rotation is always super tricky usually
13:01 - I prefer using Euler angles because I
13:03 - find them much more intuitive but it
13:05 - wasn't working at all the wheels would
13:06 - just randomly stop rotating at some
13:08 - point
13:09 - so we're here for the wheel on rotation
13:10 - Logic for this one I was actually forced
13:12 - to use good turnips by using this method
13:14 - instead of all our angles with this it
13:16 - actually fix the rotation so the wheels
13:17 - now rotate perfectly for the braking
13:19 - lights they are some very basic lights
13:21 - then here for the original logic just
13:23 - set them as active if the car is
13:25 - breaking so again separating the vision
13:26 - from logic so divisional as the logic
13:29 - script are you breaking or not if so
13:31 - then enables the visual then this asset
13:34 - pack also includes a whole bunch of
13:35 - particle effects one of them is this
13:37 - really nice smoke this one is only
13:39 - triggered when the car actually moves
13:41 - and this one as you can see it's pretty
13:42 - intense so for this one I want to enable
13:44 - it only when the car was essentially
13:45 - peeling out so for that I made some
13:47 - logic to identify that basically if it's
13:49 - on the first gear and if it's
13:51 - accelerating a bit if so then enables
13:54 - that particle effect and just in case
13:55 - you don't know how to modify a particle
13:57 - system through code this is exactly how
13:59 - you do it so you go inside the particle
14:01 - system you grab the emission so this is
14:02 - the emission module then you can just
14:04 - modify that object and you don't need to
14:06 - assign it back into the object so this
14:07 - one is a nice reference so just mod if I
14:09 - do whatever you want with it and changes
14:11 - all happen exactly I mean another small
14:13 - effect is the exhaust backfire so look
14:15 - at the exhaust down there as I change
14:16 - gears so as I change boom there we go
14:18 - there it is and there it is yep that's a
14:21 - nice subtle nice effect the way that
14:23 - works is obviously based on changing
14:24 - gears and here the car actually fires
14:27 - off an event when the year is changed
14:29 - and when it happens we only just set
14:31 - that effect to True pretty simple looks
14:33 - quite nice again the main takeaway from
14:35 - all this is really just separating the
14:36 - logic and visuals that way over here the
14:39 - car visual script this one is pretty
14:40 - Compact and the in logic script this one
14:42 - is also pretty compact each of them
14:43 - handles a different thing a normal logic
14:45 - and nice and contained then for the
14:47 - logic making the easy normally hard for
14:50 - this one I went with a super basic
14:52 - approach since this is really just a
14:53 - simple minigame basically I just played
14:55 - the game for myself and I saw where
14:57 - would I change gear so I intentionally
14:58 - played quite badly and then saw when I
15:01 - change gears so over here when speed is
15:02 - on 66 67 then over here like this and so
15:06 - on so I just did that and stored those
15:08 - values and then I saw those values in
15:10 - three nice scriptable objects so here
15:12 - I've got the easy and there you go you
15:14 - can see the max speed where it actually
15:15 - changes gear so that one changes from
15:17 - the first to the second gear when it's
15:19 - at 26 percent of the total Max Speed
15:21 - then the normal one is going to change a
15:23 - bit earlier and the hard one is going to
15:24 - change a bit more and here is the
15:27 - carrier script which really just matches
15:28 - these on what I did so once it gets to
15:30 - that point it simply swaps the gear and
15:32 - same thing for nose when it gets to that
15:34 - point it simply enables us now the more
15:36 - interesting part is how the AI actually
15:38 - use this inputs The Insider is related
15:40 - to what I mentioned a while ago which
15:42 - are these delegates over here on the car
15:43 - script basically both the player and the
15:46 - AI both of them use the exact same car
15:48 - script in order to control it there are
15:50 - these delegates so the throttle input
15:52 - the brake gear change and the NOS now if
15:54 - you don't know about delegates I cover
15:56 - them in data on another video basically
15:58 - I have these delegates on the main car
15:59 - script and then I have the car Ai and
16:02 - the car player script which actually
16:03 - sets those inputs as you can see for the
16:05 - carplayer for this one does use use the
16:07 - input so the inputs from the player so
16:08 - the usual stuff and for the car AI
16:11 - script it receives that as so with all
16:12 - those values and simply uses those to
16:14 - drive the actual car this way the base
16:16 - card script is shared between both of
16:18 - them which really simplifies things the
16:20 - ion logic really only exists in this
16:22 - one's where this is exactly the same
16:23 - thing that I did in my upcoming steam
16:25 - game dinky Guardians in order to record
16:27 - the announcement trailer right now the
16:29 - game doesn't yet have multiplier
16:30 - implemented so for controlling multiple
16:32 - characters for the trailer for that I
16:34 - made some simple AI Bots to do exactly
16:36 - this so I can control the characters
16:37 - myself or I can have the ad control them
16:40 - of them using this exact same method by
16:42 - doing that through delegates which can
16:44 - be based on player input or some AI by
16:47 - the way go ahead and add dinky Guardians
16:48 - to your wishlist and now for the really
16:50 - fun part the speed effects these are a
16:52 - bunch of small effects that when you put
16:54 - them together they really help sell the
16:55 - sense of speed here are two shots side
16:58 - by side we can easily see the massive
17:00 - difference some of these effects makes
17:01 - this is the same thing that I always say
17:03 - which is how publishes what separates
17:04 - good games from great games adding just
17:07 - add a little bit of Polish to really
17:08 - sell the sense of speed really takes
17:10 - this game to the next level so let's see
17:12 - all the effects that I added don't let
17:14 - you guys don't being handled by this
17:15 - script again to bring the visuals from
17:16 - the logic now the most obvious one for
17:19 - getting that since the Sweden is
17:20 - changing the field of view so here if I
17:22 - were to position the camera right behind
17:24 - the car also by the way one quick tip
17:26 - you can actually modify the film review
17:27 - for the scene camera itself just going
17:29 - to the top right corner and yep over
17:31 - here you can modify the Field view so
17:32 - with 14 it looks like this so if the car
17:34 - was moving it wouldn't work decently
17:36 - fast but as I increase it just like this
17:38 - the edges are much more distorted which
17:40 - really helps out the sensor speed so
17:42 - that's exactly what I'm doing over here
17:44 - in this script now I covered how to
17:46 - modify scene machine parameters through
17:47 - code another video here you can see that
17:49 - I'm grabbing the reference to the
17:51 - version on camera and then over here on
17:52 - late update I'm grabbing the Inland
17:54 - settings and just doing a simple math F
17:56 - download in order to interpolate between
17:58 - the minimum field of view and the
18:00 - maximum feel on The View and going to do
18:02 - that based on the car speed normalized
18:03 - so this is really just the current speed
18:05 - divided by the maximum mean so as the
18:08 - car speeds up the film The View goes
18:09 - closer to the maximum so it goes between
18:11 - 40 fov and 100 fov which is pretty
18:13 - intense then the next effect is the
18:15 - camera position if I just have the
18:17 - camera looking straight from the side
18:18 - and over here I increase the fov that
18:20 - really doesn't change much so the second
18:22 - effect is as the fov increases as the
18:24 - car speed increases the camera also
18:26 - slowly goes behind the car that's this
18:28 - simple line right here so we just grabs
18:31 - the send machine transposer from the
18:32 - virtual camera which by the way this is
18:34 - how the main camera set up so as you can
18:35 - see it just has a transposer so all of
18:37 - it pretty basic by default it's looking
18:39 - from the side so with the phone offset
18:41 - with X and Y and zero on the Zen and
18:44 - then once again it interpolates the
18:46 - values between minimum and maximum based
18:48 - on the car speed normalized and those
18:50 - values are up here so it starts off
18:52 - flowing from the side and ends up
18:53 - looking pretty much from behind and the
18:55 - final effect is the screen shake so for
18:57 - that over here on the virtual camera
18:59 - right over here a noise a basic
19:01 - multi-channel Parlin so it has a certain
19:03 - amplitude and frequency and again over
19:05 - here through the script trying to do the
19:07 - exact same thing so it basically gets
19:09 - that multi-channel purling it gets it
19:11 - through here the gets in machine
19:12 - component gets sound and when again the
19:14 - exact same thing just using mathapp.orp
19:16 - with the car speed normalized in order
19:17 - to go from 0 to the maximum basically as
19:19 - the car goes faster it's going to shake
19:21 - the camera more and more with all those
19:23 - tiny things as the car speeds up the
19:24 - camera goes behind it increases the fov
19:27 - and starts shaking which really helps
19:28 - out the sensor speed again looking at
19:31 - the side by side you can really tell the
19:32 - difference so I can only say polish is
19:34 - what separates good games from great so
19:36 - definitely make sure you spend some time
19:38 - punishing your games to really make them
19:39 - shine put all that together and this
19:41 - minigame came out quite well nice small
19:43 - and fun go ahead and download the free
19:45 - project files and try to beat my time
19:47 - again the reason why I made this game is
19:49 - because this street racer pack is
19:50 - currently on the flash deal on the
19:52 - synthy sale if you have any idea for
19:54 - which you need a bunch of cars and
19:55 - racing things then definitely check it
19:57 - out the pack has tons of stuff so you
19:59 - could make game like this or maybe make
20:01 - some kind of car mechanic game maybe
20:02 - something like crazy taxi or really just
20:04 - a basic Racer the project files for this
20:07 - video includes one scene without assets
20:08 - and one scene which will automatically
20:10 - allow the racer pack if you import those
20:12 - into the same project beyond that check
20:14 - out everything else on the Cindy store
20:15 - if you like their Style just like I do
20:17 - then definitely give it a look there's
20:18 - tons of awesome stuff on all kinds of
20:20 - themes that you can use to make an
20:21 - endless amount of unique games alright I
20:23 - hope you found this video interesting
20:25 - thank you for watching and I'll see you
20:26 - next time
20:29 - foreign
20:36 - [Music]

Cleaned transcript:

hello and welcome I'm your code monkey and here is a fun drag racing minigame you pick a car and opponent and go race step on the throttle when the light turns green change gears at the perfect timing hit the Nas and wipe out the competition it's a simple minigame that is very much inspired by the many drag racing flash games that I have played 20 years ago simple but very fun making this game involved building some interesting things like for example using animation curves for the gear ratios I use a nice 3D UI with some gear shift animations and a bunch of tiny effects to really sell these sense of speed you can look at these two shots where both cars are moving at the exact same speed and you can clearly see how one of them sells the sense of speed much better adding all of these tiny effects really makes a big difference I'll mention exactly what they all are in a little bit there is skill involved in this game so go ahead and download the free project files to see how fast you can do it the reason why I made this game is because right now there's an awesome sale happening on the synthy store pretty much all of their packs are currently at Half Price personally I love their low poly Style I covered lots of potential games you could build with these ads in the previous video and on top of the regular discounts they have a flash deal every week with an even deeper discount this week the massive discount is on the street racer pack which is exactly what I use to make this minigame this one has over a thousand prefabs lots of cars with tons of customizable parts you can swap out the wheels a paint job add some spoilers and so on it also includes a bunch of characters with tons of customization options and a really nice looking environment of some docs so check out the entire settle in the street racer pack Link in the description here let's see the game that I made pretty quickly using that pack I think in total I worked on this mini game for about 10 hours and the final result looks pretty great thanks to using these awesome assets you can download the project files for this game link description in there you will find two scenes one which is functional but only has basic Hues and a second one which is using all these assets if you pick up this asset pack just import it directly onto the project and all of the assets should load correctly okay so here let's inspect the game to see what we can learn from it personally see it in action so here it starts off with a simple car selector window I can pick any of these cars they all got varying different sets I can also pick the car from my opponent and I can also set the AI as either easy normal or hard so for example let's go with these cars and Let's Race here we are ready to go so let's start the countdown and there you go three two one and after the light yep going off now I'm changing gears I'm trying to change as quickly as possible There You Go Changing I'm also using the nas there you go super fast speed up and the camera is shaking the car is going super fast and yep there you go look at that I won all right awesome so now let's inspect all of this starting over here from the Carson liked window now this window is actually pretty interesting this window itself is a UI element but as you can see the cars are actually 3D so how this works is the cars are actually over on the side so if I go yep over here so on position zero two thousand zero over here are both cars with a basic animation just rotating them and then as you can see each of them has a camera looking straight at them and for that camera the way that is working is over here on the output instead of outputting to the screen it is outputting to a rendered texture now I cover the red detection detail in another video they are really useful so it renders onto this random texture and then on the campus itself over here there's a simple raw image showing that random texture the rest of this UI is on pretty basic I've got a basic button to change the car which modifies the visual transform and updates stats for the stats themselves they are stored in a simple swordball object so here is the definition pretty basic so just as a transform for the visual prefab the nazimont max the car Speed Max the acceleration and the brake speed then for the visual for these bars I'm just using some film images so it's just an image component with over here the image type set to film horizontal and here it has the film Mount although remember that in order to use this film the mount image setting in order to use this you must have a source image assigned if there is no Sprite here so if I click on delete nope like this you cannot access that so it needs to have a spread assigned over here I'm using the builtin white pixel Sprite if you search for it and you don't see it make sure on the top right corner you click on the eye icon that will show all the builtin Sprites so this I can select any of these cars I can select my car and click on race then here we are waiting for the player input before actually starting the countdown how this handled is by a very simple State machine so this is pretty much excellent like I covered in my free course for the game State machine for that one when the site is going to start then simply waits for player input and 30 counter then also just like in the free course I separated the only logic individuals so on this group there's only the logic for the countdown itself there are no visuals here and then I have another UI script and only this one handles all the visuals the images similarly change color as the timer counts on by the way like I said this game this was inspired by the flash games that I played as Akin so before I actually started working on this game I went to YouTube to look at some gameplay basically whenever you make a game or prototype definitely start off by doing a bit of research first study what other games in the similar genre have done see what works and what doesn't and then give it your own unique twist now for the car itself it's using a prebasic script this is pretty small most of the logic is really just on the update so we're only just about 100 lines this is really only a drag racing game so it doesn't need a complex controller it literally just rides forward and changes gears so over here I've got some simple throttle acceleration input then I've got some braking even though it's really only used when the outer brake is enabled which is after completing the race there's only no point in Breaking the middle then some input for changing gears and then for changing the nose now for the input as you can see over here I'm using a whole bunch of funks so these are delegates I'm using this instead of accessing the input directly I'm going to talk about this a bit more when I talk about the AI but basically it's the same thing that I used to record the trailer for my upcoming steam game Thinking Guardians go ahead and edit your wishlist so here the car controller is pretty simple just move forward change gears and use knots of it pretty basic the more complex part is actually how the gears work and how I handled that was with some animation curves this is a really awesome int feature that a lot of people don't know about they can be used for so much more than just animations I covered lots of use cases in a tutorial video here I'm using them for defining the acceleration curves to essentially handle the gear ratios so I've got all of these curves for each gear and here you can see the curve the vertical yaxis that one is the amount of acceleration and the xaxis that is the total car speed so over here on the first gear you can see it gets a ton of acceleration at load speeds but then quickly goes down if you're trying to use the first gear while the car is near the max speed then you won't get much acceleration then for the second gear it's pretty similar it also has a peak but this the peak starts off a bit more in front then same thing for all the other gears so all of them have a peak slightly a bit more ahead I basically just Googled car acceleration curves you can find all kinds of graphs on how the actual gears actually work basically on any graph there's a certain point where it's actually optimal to change gears to the next one for example here on the first gear it starts going down let's say around 15 to 20 percent of Max Speed it starts going down here with acceleration under 80 percent and then on the second gear you can see between 15 and 20 percent of Max Speed over here the acceleration is over 80 percent so technically around here would be the best spot to change this year now obviously let me point out this is definitely not a physically accurate simulation but for an arcade game this simple process actually works quite well here I am playing and I'm going to stay ages in first year so there you go going up and I'm not changing gears and yep look at that the max speed is actually not increasing too much so it's constantly still going up but as you can see the acceleration is super low whereas if I change gears and if they're going out speeds up quite a bit more so if I try to change gears a bit way too late so let's wait for that one to be really at the end and really at the end keep waiting and okay almost at the end let's see how long so 14.4 seconds okay now let's try again so now I'm going to swap gears a bit more around here which is a bit better so swap it out keep going and let's see how fast it goes and if they go 12.2 seconds so quite a bit difference this is where the skill comes in in a game like this and that is basically how the car works as you can see it's on pretty basic also by the way in order to get a value from the animation curve really you just get the animation curve reference and then you just call the evaluate function pass in the time value and it gives you the Y value then for the UI itself for this I went with a fun 3D UI basically I wanted to only use assets from the street racer asset pack and this pack really only has 3D models and no UI elements so I needed some kind of speedometer and I browse the snls and I found this boost gauge which by the way as you can see this is not exactly the one that I'm using so this is actually a great practical tip for you when you're using some assets from some asset pack remember that you can always take whatever assets are included in that pack and slightly modify them that's exactly what I did personally I have no 3D modeling excuse so I definitely could not build something like this from scratch but given something like this I can definitely modify it to get it looking a bit more example like what I want so I took this original boost gauge and then I just used Pro Builder which is unity's builtin 3D modeling tool this one is somewhat basic but it works great for these kinds of minor changes so as you can see I added a bunch more dashes made them a bit thinner I also elongated the needle a little bit and got exactly what I wanted oh also if you don't know how to make a 3D White just like this as you can see these are all 3D elements just like the other cars they are also played offset so these are on zero one thousand zero so just to be offset from the actual world all the way down there so these are regular 3D models and the way they are shown in the UI is they have a second camera so here I have another object so this is another camera and what you need to do in order to make this a secondary camera is over here on the render type instead of making a base camera make it an overlay camera and then you go back into the main camera itself and over here note how this one is a base camera and then down here you have the stack so this is the camera stack and you can hear at all of the overlay cameras so that way you have the main camera and then on top of that you get the UI camera this is a really interesting way of building a UI it looks great and also importantly with this method of using two separate cameras this second camera will not be affected by the all of the speed effects that won't be applied on the first camera that I'm going to show in a little bit now the rest UI is all pretty basic so for needle itself that one just rotates so that's just a basic rotation on the yaxis so all of it pretty basic the rotation is supposed to be based on the RPM also for calculating the RPM this is not a similar game it's more rkd so this is definitely not a perfect RPM simulation here for the RPM math I just did something super basic basically just went through the animation curve for the acceleration graph I just went through it and basically inverted so this way when the point of the graph is near the top that means low RPM and when it's down here close to the bottom that means Max RPM again not realistic but it's simple and it works actually quite well the DUI also has this basic progress track down here really just two objects moving alongside a normalized position value and then the noise gauge itself here it's a super basic object just got the nas inside got the nas tank and note how the pivot is on the bottom I covered how you can modify the pivot in another video basically it's all to do with how you are clever with positioning the child objects relative to the parent so over here the child object is offset above so this way I can modify over here the Y scale and make some super basic NOS capsule container then the more fun part of the UI is actually down here the gear shifter this one was actually quite fun to make with that additional looks pretty interesting I'm quite happy with this for the visual I actually made this myself it really is just a bunch of cubes in the sphere so this one down here is a cube the dash is over here they're Cube that one is a cylinder and that one is a sphere some of it's super basic but it actually looks quite well I think and the reason why it looks pretty good is because of the animation so here this object has a basic animated component and inside it I've got all the various animations so starting off on Neutron going for Neutron to first the second third and so on the animations are on pretty basic really just goes from one place to the other when seen in action the gear stick actually looks quite nice thanks to all of those interesting animations next for the car visual again like I talked about time and time again in my free course I made sure to separate the visuals from the logic so the car script that I showed a while ago this one only handles the logic and then I've got a separate script this one only handles the visuals so here it's got a reference to the wheels to rotate them the braking lights the exhaust smoke and so on this asset pack actually only has all of the car parts of them separated so that makes handling the visuals actually super easy all of these objects are all separated so I could even modify the hood I can modify any of these things if I wanted but the main one is really just down here the wheels so I've got the wheel objects and I can easily just rotate them in any direction although for this one even though this is simple I actually did have some issues the first time I tried to rotate I actually did it on the wrong axes which was pretty funny then I also had tons of issues where the rotation wasn't working working with rotation is always super tricky usually I prefer using Euler angles because I find them much more intuitive but it wasn't working at all the wheels would just randomly stop rotating at some point so we're here for the wheel on rotation Logic for this one I was actually forced to use good turnips by using this method instead of all our angles with this it actually fix the rotation so the wheels now rotate perfectly for the braking lights they are some very basic lights then here for the original logic just set them as active if the car is breaking so again separating the vision from logic so divisional as the logic script are you breaking or not if so then enables the visual then this asset pack also includes a whole bunch of particle effects one of them is this really nice smoke this one is only triggered when the car actually moves and this one as you can see it's pretty intense so for this one I want to enable it only when the car was essentially peeling out so for that I made some logic to identify that basically if it's on the first gear and if it's accelerating a bit if so then enables that particle effect and just in case you don't know how to modify a particle system through code this is exactly how you do it so you go inside the particle system you grab the emission so this is the emission module then you can just modify that object and you don't need to assign it back into the object so this one is a nice reference so just mod if I do whatever you want with it and changes all happen exactly I mean another small effect is the exhaust backfire so look at the exhaust down there as I change gears so as I change boom there we go there it is and there it is yep that's a nice subtle nice effect the way that works is obviously based on changing gears and here the car actually fires off an event when the year is changed and when it happens we only just set that effect to True pretty simple looks quite nice again the main takeaway from all this is really just separating the logic and visuals that way over here the car visual script this one is pretty Compact and the in logic script this one is also pretty compact each of them handles a different thing a normal logic and nice and contained then for the logic making the easy normally hard for this one I went with a super basic approach since this is really just a simple minigame basically I just played the game for myself and I saw where would I change gear so I intentionally played quite badly and then saw when I change gears so over here when speed is on 66 67 then over here like this and so on so I just did that and stored those values and then I saw those values in three nice scriptable objects so here I've got the easy and there you go you can see the max speed where it actually changes gear so that one changes from the first to the second gear when it's at 26 percent of the total Max Speed then the normal one is going to change a bit earlier and the hard one is going to change a bit more and here is the carrier script which really just matches these on what I did so once it gets to that point it simply swaps the gear and same thing for nose when it gets to that point it simply enables us now the more interesting part is how the AI actually use this inputs The Insider is related to what I mentioned a while ago which are these delegates over here on the car script basically both the player and the AI both of them use the exact same car script in order to control it there are these delegates so the throttle input the brake gear change and the NOS now if you don't know about delegates I cover them in data on another video basically I have these delegates on the main car script and then I have the car Ai and the car player script which actually sets those inputs as you can see for the carplayer for this one does use use the input so the inputs from the player so the usual stuff and for the car AI script it receives that as so with all those values and simply uses those to drive the actual car this way the base card script is shared between both of them which really simplifies things the ion logic really only exists in this one's where this is exactly the same thing that I did in my upcoming steam game dinky Guardians in order to record the announcement trailer right now the game doesn't yet have multiplier implemented so for controlling multiple characters for the trailer for that I made some simple AI Bots to do exactly this so I can control the characters myself or I can have the ad control them of them using this exact same method by doing that through delegates which can be based on player input or some AI by the way go ahead and add dinky Guardians to your wishlist and now for the really fun part the speed effects these are a bunch of small effects that when you put them together they really help sell the sense of speed here are two shots side by side we can easily see the massive difference some of these effects makes this is the same thing that I always say which is how publishes what separates good games from great games adding just add a little bit of Polish to really sell the sense of speed really takes this game to the next level so let's see all the effects that I added don't let you guys don't being handled by this script again to bring the visuals from the logic now the most obvious one for getting that since the Sweden is changing the field of view so here if I were to position the camera right behind the car also by the way one quick tip you can actually modify the film review for the scene camera itself just going to the top right corner and yep over here you can modify the Field view so with 14 it looks like this so if the car was moving it wouldn't work decently fast but as I increase it just like this the edges are much more distorted which really helps out the sensor speed so that's exactly what I'm doing over here in this script now I covered how to modify scene machine parameters through code another video here you can see that I'm grabbing the reference to the version on camera and then over here on late update I'm grabbing the Inland settings and just doing a simple math F download in order to interpolate between the minimum field of view and the maximum feel on The View and going to do that based on the car speed normalized so this is really just the current speed divided by the maximum mean so as the car speeds up the film The View goes closer to the maximum so it goes between 40 fov and 100 fov which is pretty intense then the next effect is the camera position if I just have the camera looking straight from the side and over here I increase the fov that really doesn't change much so the second effect is as the fov increases as the car speed increases the camera also slowly goes behind the car that's this simple line right here so we just grabs the send machine transposer from the virtual camera which by the way this is how the main camera set up so as you can see it just has a transposer so all of it pretty basic by default it's looking from the side so with the phone offset with X and Y and zero on the Zen and then once again it interpolates the values between minimum and maximum based on the car speed normalized and those values are up here so it starts off flowing from the side and ends up looking pretty much from behind and the final effect is the screen shake so for that over here on the virtual camera right over here a noise a basic multichannel Parlin so it has a certain amplitude and frequency and again over here through the script trying to do the exact same thing so it basically gets that multichannel purling it gets it through here the gets in machine component gets sound and when again the exact same thing just using mathapp.orp with the car speed normalized in order to go from 0 to the maximum basically as the car goes faster it's going to shake the camera more and more with all those tiny things as the car speeds up the camera goes behind it increases the fov and starts shaking which really helps out the sensor speed again looking at the side by side you can really tell the difference so I can only say polish is what separates good games from great so definitely make sure you spend some time punishing your games to really make them shine put all that together and this minigame came out quite well nice small and fun go ahead and download the free project files and try to beat my time again the reason why I made this game is because this street racer pack is currently on the flash deal on the synthy sale if you have any idea for which you need a bunch of cars and racing things then definitely check it out the pack has tons of stuff so you could make game like this or maybe make some kind of car mechanic game maybe something like crazy taxi or really just a basic Racer the project files for this video includes one scene without assets and one scene which will automatically allow the racer pack if you import those into the same project beyond that check out everything else on the Cindy store if you like their Style just like I do then definitely give it a look there's tons of awesome stuff on all kinds of themes that you can use to make an endless amount of unique games alright I hope you found this video interesting thank you for watching and I'll see you next time foreign
