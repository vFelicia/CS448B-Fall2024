With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - in this video we're going to learn the
00:03 - simplest way for saving and loading data
00:04 - into a file in unity let's begin
00:10 - so I have this scene here that we use in
00:12 - the previous video I have a player
00:14 - character and I can move around I can
00:16 - tell them to your mind some resources
00:17 - and in here you can view how much he is
00:20 - carrying now in the previous video we
00:22 - covered city unloading using player
00:24 - preps in this video we're going to use
00:26 - files so let's just test I can hit on
00:29 - the ass and it saved it save the
00:31 - position and the gold amount so I can
00:34 - now move them away mind some more gold
00:36 - there you go
00:37 - and now when I hit L it's going to load
00:40 - using the player preps and he's going to
00:42 - go back up there with 11 so there you go
00:44 - yep Ayoo loaded correctly the position
00:47 - and the goal amount okay so let's look
00:50 - in the game here in order to see how
00:52 - implemented things so in here on the
00:54 - update we are testing for the key on the
00:56 - s and yell and calling save or load on
00:59 - the save we are grabbing the player
01:02 - position going to the unit get the
01:04 - position and the gold amount then we are
01:07 - using player prep set float to set the
01:10 - player position X as a float dy again a
01:13 - float and an int for the gold amount
01:15 - then we are manually hearing save so we
01:17 - can save and load Waseem game on the
01:20 - unload down here first of all we are
01:22 - testing if we do have a key we are
01:24 - testing for the pointer position X but
01:26 - it could be any King this is just so we
01:28 - can identify if we do have a safer so if
01:31 - we do have a player position X then we
01:33 - do have safer we load the XL ody create
01:37 - the vector 3 using the ax and y and load
01:40 - egon amount then we go into the unit
01:42 - then set the position and eagled amount
01:44 - if he does not have that key then it
01:47 - does not have that save saved in the
01:49 - player press so we simply do a pop up no
01:52 - say okay so now let's swap out this code
01:54 - to work with files instead of the player
01:56 - preps so first let's look at how to save
01:59 - a file so up here on the save let simply
02:03 - save some text to a file now in order to
02:06 - save and read files we're going to use
02:08 - the file class which is inside of the
02:10 - system I own in space so let's go up
02:12 - here using system dot io so now we can
02:16 - go down here and use the file class in
02:19 - order to save files we're going to use
02:20 - write all text
02:23 - for the path let's say but on
02:25 - application dot data path was and let's
02:30 - call it save dot txt and for the
02:34 - contents let us simply save test
02:37 - well that's comment out the player for
02:39 - us for now and let's see if the file
02:42 - correctly saves okay Here I am hit s
02:45 - saved okay now in here as you can see on
02:48 - the project we got a save file
02:50 - containing tests okay great so that's
02:52 - the basics for saving a file so now
02:55 - let's look at reading a file so let's go
02:57 - into our load function now in order to
02:59 - load instead of file dot write all text
03:02 - we are going to do read all text and
03:05 - here again we get the past so let's use
03:09 - the same path that we used previously
03:11 - and this function will return a string
03:14 - so the string let's see save string and
03:17 - let's simply do a pop-up with that
03:20 - strength pretty safe string okay and
03:24 - let's comment out everything up here
03:27 - okay here I am and if I hit L it should
03:30 - print out test
03:31 - so hit yep there your test so he is
03:33 - correctly reading a string that is
03:35 - placed on the file alright so now we
03:37 - know the basics for working with files
03:39 - let's start off with a simple save and
03:41 - load for the gold amount so appear on
03:44 - the save after we grab the gold amount
03:47 - let us make a save string and we're
03:51 - going to contain a string of the gold
03:53 - amount and this save string is what
03:56 - we're going to save into our file so now
03:59 - let's go into our code and in here first
04:02 - off we start with zero so let's start to
04:04 - mind some goal so one two three okay
04:07 - stop no it's it s okay he saved now
04:11 - let's check out the file yep there you
04:13 - go the file contains a three so now
04:15 - let's go back into the code and on the
04:17 - unload function first of all in order to
04:20 - completely remove the player price and
04:21 - let's comment out the whole thing
04:22 - instead of just that up there
04:29 - so in here we are reading the text that
04:31 - is saved on this SAF file and up here we
04:34 - save the goal amount so we need to do is
04:36 - convert the contents of this string into
04:39 - an integer that we can then load so we
04:41 - grab the gold amount by going into int
04:44 - and parse the save string into an int
04:48 - then we apply that int back into our
04:51 - unit so setting on the mount is on the
04:54 - mount of the parse int okay so now let's
04:57 - run the code and when we hit L we should
05:00 - be correctly loading three gold amount
05:02 - so in here hit hell yep there you go he
05:05 - loaded three gold okay great
05:07 - so we can all easily save and load one
05:10 - value from a file now in order to save
05:12 - multiple values things become much more
05:14 - interesting when using files you have to
05:17 - define your own file format to separate
05:19 - the data there are many ways to separate
05:21 - that inside a string you can look at
05:23 - Jason for a very good implementation but
05:26 - in this video we're going to keep things
05:27 - very simple a very easy way is simply to
05:30 - use a separator that you know for sure
05:32 - will never occur in your save data so
05:35 - what's going to our code on the save
05:37 - function let us define a unique
05:39 - separator so string save separator and
05:43 - let's do something very unique save
05:47 - value okay like that all we need to do
05:49 - is make sure that this string never
05:51 - appears on the actual save string so let
05:55 - us make a string array call it contents
05:58 - this will be the save contents so a new
06:00 - string array and inside let's save our
06:03 - goal amount then we also want to store
06:07 - the player position X and the player
06:09 - position dot Y let's convert all of
06:12 - these into strings okay so these are the
06:17 - contents of our save file and for our
06:19 - save string we can use string dot join
06:21 - and join those contents using our saved
06:26 - separator then we save our save string
06:30 - into our file all right so let's run the
06:32 - code and see our final string so here I
06:35 - am let's gather some goals one two okay
06:39 - move
06:39 - and now hit save all right he saved now
06:42 - let's check out the file yep there's the
06:44 - file you can see the value separated by
06:47 - our unique separator string so we got
06:49 - two volt annex of 52 and a y of 13 now
06:54 - let's take a look at the load function
06:56 - and in here we are reading the complete
06:59 - string from our say file now we need to
07:01 - split it based on our separator so again
07:04 - let's declare our separator however
07:07 - instead of declaring it in here let's
07:08 - make it a constant on our class so this
07:13 - way we can be sure this never changes
07:15 - and since this is a constant let's put
07:17 - it all in caps okay so down here we need
07:21 - to split the safe string based on our
07:23 - safe separator so we do that with safe
07:26 - string dot split split takes a separator
07:29 - so our safe separator and then some
07:32 - options which in this case shins dot
07:38 - none all right so the split returns a
07:43 - string array so that's the string array
07:45 - for our contents that we defined up here
07:48 - so we should be getting the exact same
07:50 - thing that we got in here now all we
07:52 - need is to use these same indexes and
07:54 - parsley values so first of all on index
07:58 - 0 we store the called amount so in here
08:00 - we're going to parse an integer that is
08:02 - on content 0 then let's parse a float
08:05 - for the player position X and oil dot
08:10 - parse on the contents of index 1 and the
08:14 - Y on index of to construct the final
08:18 - player position vector using our player
08:22 - position X and the player position Y
08:25 - okay and then finally unit dot set the
08:29 - position to our player position and city
08:32 - called amount to our gold amount so we
08:35 - are grabbing the safe string from our
08:37 - file we are splitting it using our safe
08:40 - separator which is the same one we use
08:42 - when we save the string then we have a
08:45 - string containing all of the contents we
08:47 - just parse that into
08:49 - the types that we need and then use the
08:51 - loaded data to finally unload our unit
08:54 - all right so let's run the game okay
08:57 - everything is on default he's on 0-0
08:59 - with zero gone and if I hit L yep there
09:02 - you there it's the file that was loaded
09:04 - the string and he's now placed in here
09:07 - with two of count which is exactly what
09:09 - was or not he's safe
09:10 - so I can move him around go up here move
09:13 - it again
09:13 - there he goes up there my nap it 1 2 3 4
09:17 - ok load and there you go
09:19 - he's up there and again the save also
09:21 - loads so save them there move more in
09:24 - there and load and there you go he's
09:26 - exactly back in there ok great so there
09:29 - you have it we'll learn how to save and
09:30 - load data into a file we'll learn how to
09:33 - create our own file format and define
09:35 - how multiple values are stored in a file
09:37 - again this is the simplest way to save
09:39 - and load files using your own format in
09:42 - the next video we're going to cover how
09:43 - we can use the adjacent format which is
09:45 - already very robust to save and load
09:47 - complex objects as always you can
09:50 - download the project files in utilities
09:51 - from India on monkey comm if you have
09:54 - any questions post them in the comments
09:55 - and I will do my best to answer them
09:56 - subscribe for more videos and I'll see
09:58 - you next time
10:10 - you

Cleaned transcript:

hello and welcome I'm your code monkey in this video we're going to learn the simplest way for saving and loading data into a file in unity let's begin so I have this scene here that we use in the previous video I have a player character and I can move around I can tell them to your mind some resources and in here you can view how much he is carrying now in the previous video we covered city unloading using player preps in this video we're going to use files so let's just test I can hit on the ass and it saved it save the position and the gold amount so I can now move them away mind some more gold there you go and now when I hit L it's going to load using the player preps and he's going to go back up there with 11 so there you go yep Ayoo loaded correctly the position and the goal amount okay so let's look in the game here in order to see how implemented things so in here on the update we are testing for the key on the s and yell and calling save or load on the save we are grabbing the player position going to the unit get the position and the gold amount then we are using player prep set float to set the player position X as a float dy again a float and an int for the gold amount then we are manually hearing save so we can save and load Waseem game on the unload down here first of all we are testing if we do have a key we are testing for the pointer position X but it could be any King this is just so we can identify if we do have a safer so if we do have a player position X then we do have safer we load the XL ody create the vector 3 using the ax and y and load egon amount then we go into the unit then set the position and eagled amount if he does not have that key then it does not have that save saved in the player press so we simply do a pop up no say okay so now let's swap out this code to work with files instead of the player preps so first let's look at how to save a file so up here on the save let simply save some text to a file now in order to save and read files we're going to use the file class which is inside of the system I own in space so let's go up here using system dot io so now we can go down here and use the file class in order to save files we're going to use write all text for the path let's say but on application dot data path was and let's call it save dot txt and for the contents let us simply save test well that's comment out the player for us for now and let's see if the file correctly saves okay Here I am hit s saved okay now in here as you can see on the project we got a save file containing tests okay great so that's the basics for saving a file so now let's look at reading a file so let's go into our load function now in order to load instead of file dot write all text we are going to do read all text and here again we get the past so let's use the same path that we used previously and this function will return a string so the string let's see save string and let's simply do a popup with that strength pretty safe string okay and let's comment out everything up here okay here I am and if I hit L it should print out test so hit yep there your test so he is correctly reading a string that is placed on the file alright so now we know the basics for working with files let's start off with a simple save and load for the gold amount so appear on the save after we grab the gold amount let us make a save string and we're going to contain a string of the gold amount and this save string is what we're going to save into our file so now let's go into our code and in here first off we start with zero so let's start to mind some goal so one two three okay stop no it's it s okay he saved now let's check out the file yep there you go the file contains a three so now let's go back into the code and on the unload function first of all in order to completely remove the player price and let's comment out the whole thing instead of just that up there so in here we are reading the text that is saved on this SAF file and up here we save the goal amount so we need to do is convert the contents of this string into an integer that we can then load so we grab the gold amount by going into int and parse the save string into an int then we apply that int back into our unit so setting on the mount is on the mount of the parse int okay so now let's run the code and when we hit L we should be correctly loading three gold amount so in here hit hell yep there you go he loaded three gold okay great so we can all easily save and load one value from a file now in order to save multiple values things become much more interesting when using files you have to define your own file format to separate the data there are many ways to separate that inside a string you can look at Jason for a very good implementation but in this video we're going to keep things very simple a very easy way is simply to use a separator that you know for sure will never occur in your save data so what's going to our code on the save function let us define a unique separator so string save separator and let's do something very unique save value okay like that all we need to do is make sure that this string never appears on the actual save string so let us make a string array call it contents this will be the save contents so a new string array and inside let's save our goal amount then we also want to store the player position X and the player position dot Y let's convert all of these into strings okay so these are the contents of our save file and for our save string we can use string dot join and join those contents using our saved separator then we save our save string into our file all right so let's run the code and see our final string so here I am let's gather some goals one two okay move and now hit save all right he saved now let's check out the file yep there's the file you can see the value separated by our unique separator string so we got two volt annex of 52 and a y of 13 now let's take a look at the load function and in here we are reading the complete string from our say file now we need to split it based on our separator so again let's declare our separator however instead of declaring it in here let's make it a constant on our class so this way we can be sure this never changes and since this is a constant let's put it all in caps okay so down here we need to split the safe string based on our safe separator so we do that with safe string dot split split takes a separator so our safe separator and then some options which in this case shins dot none all right so the split returns a string array so that's the string array for our contents that we defined up here so we should be getting the exact same thing that we got in here now all we need is to use these same indexes and parsley values so first of all on index 0 we store the called amount so in here we're going to parse an integer that is on content 0 then let's parse a float for the player position X and oil dot parse on the contents of index 1 and the Y on index of to construct the final player position vector using our player position X and the player position Y okay and then finally unit dot set the position to our player position and city called amount to our gold amount so we are grabbing the safe string from our file we are splitting it using our safe separator which is the same one we use when we save the string then we have a string containing all of the contents we just parse that into the types that we need and then use the loaded data to finally unload our unit all right so let's run the game okay everything is on default he's on 00 with zero gone and if I hit L yep there you there it's the file that was loaded the string and he's now placed in here with two of count which is exactly what was or not he's safe so I can move him around go up here move it again there he goes up there my nap it 1 2 3 4 ok load and there you go he's up there and again the save also loads so save them there move more in there and load and there you go he's exactly back in there ok great so there you have it we'll learn how to save and load data into a file we'll learn how to create our own file format and define how multiple values are stored in a file again this is the simplest way to save and load files using your own format in the next video we're going to cover how we can use the adjacent format which is already very robust to save and load complex objects as always you can download the project files in utilities from India on monkey comm if you have any questions post them in the comments and I will do my best to answer them subscribe for more videos and I'll see you next time you
