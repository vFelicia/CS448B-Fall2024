With timestamps:

00:02 - hello and welcome I'm your code monkey
00:05 - and this is a quick tip for measuring
00:06 - compound time in the editor this can be
00:09 - useful if you're trying to organize your
00:10 - code into different assemblies and
00:12 - seeing if you're improving the compound
00:14 - time so let's start and create a new C
00:19 - sharp script and name it editor compile
00:22 - time okay so in here we're going to be
00:26 - using unity editor and we're going to
00:31 - apply the attribute execute in edit mode
00:35 - so that this class executes whilst we're
00:39 - in edit mode now on our private void
00:42 - update we're going to use editor
00:46 - application dot is compiling to measure
00:49 - our compile time north to do that we
00:52 - need some variables to store the current
00:54 - time so let's add a private double
00:57 - called compile start time and we also
01:01 - need to test if we are already compiling
01:03 - so a private ball is compiling and let's
01:07 - default that to false okay so on update
01:11 - we're going to test if is compile if we
01:16 - are already compiling we are going to
01:18 - test if the editor is no longer
01:21 - confounded and we're going to trigger a
01:23 - function called compile finish now if we
01:28 - are not compiling and all of a sudden
01:30 - editor application shows that we are
01:33 - compiling we have starts of a bomb start
01:37 - and modify our boolean so is compiling
01:41 - here suddenly became false and here it
01:44 - became true so let's make our functions
01:48 - a private boy compile started and the
01:53 - private boy compile pinch
01:58 - so on compulsory let's do a debug log
02:02 - and say compiled and started and we're
02:07 - going to store the compile starts time
02:10 - based on the editor application dot time
02:15 - since start up and then our compiled
02:19 - finished we are simply going to come in
02:22 - late the time that has passed since
02:23 - compiled start time so double compiled
02:27 - time equals editor application not time
02:31 - since startup - our compiled start time
02:34 - so this one returned the number of
02:36 - seconds that we have taken to compile so
02:40 - let's put a debug log and call it
02:43 - compile finish and this way compile time
02:48 - and we're going to do that to string f2
02:52 - so that we display two values so I don't
02:55 - say like 9.50 two and one second since
02:59 - this is measured in seconds okay so in
03:03 - here let's create an empty game object
03:05 - call it editor compile timer so that we
03:09 - can apply our script into it now our
03:11 - script is going to trigger on the update
03:13 - which won't be called when we modify
03:15 - something so let's modify the code of
03:17 - course compile there you go compile
03:19 - starting it's compiling compound
03:21 - finished so this is a very small project
03:24 - 2.29 seconds and as you can see anytime
03:27 - you make some changes you can test and
03:31 - see the resulting time okay so you can
03:34 - see how this would help you if you were
03:36 - going to go into create and create a
03:38 - bunch of assembly definitions this way
03:40 - you can easily measure if what you're
03:43 - doing is having a positive effect or not
03:47 - if you have any questions post them in
03:49 - the comments and I'll do my best to
03:50 - answer them alright
03:52 - see you next time
04:04 - you

Cleaned transcript:

hello and welcome I'm your code monkey and this is a quick tip for measuring compound time in the editor this can be useful if you're trying to organize your code into different assemblies and seeing if you're improving the compound time so let's start and create a new C sharp script and name it editor compile time okay so in here we're going to be using unity editor and we're going to apply the attribute execute in edit mode so that this class executes whilst we're in edit mode now on our private void update we're going to use editor application dot is compiling to measure our compile time north to do that we need some variables to store the current time so let's add a private double called compile start time and we also need to test if we are already compiling so a private ball is compiling and let's default that to false okay so on update we're going to test if is compile if we are already compiling we are going to test if the editor is no longer confounded and we're going to trigger a function called compile finish now if we are not compiling and all of a sudden editor application shows that we are compiling we have starts of a bomb start and modify our boolean so is compiling here suddenly became false and here it became true so let's make our functions a private boy compile started and the private boy compile pinch so on compulsory let's do a debug log and say compiled and started and we're going to store the compile starts time based on the editor application dot time since start up and then our compiled finished we are simply going to come in late the time that has passed since compiled start time so double compiled time equals editor application not time since startup our compiled start time so this one returned the number of seconds that we have taken to compile so let's put a debug log and call it compile finish and this way compile time and we're going to do that to string f2 so that we display two values so I don't say like 9.50 two and one second since this is measured in seconds okay so in here let's create an empty game object call it editor compile timer so that we can apply our script into it now our script is going to trigger on the update which won't be called when we modify something so let's modify the code of course compile there you go compile starting it's compiling compound finished so this is a very small project 2.29 seconds and as you can see anytime you make some changes you can test and see the resulting time okay so you can see how this would help you if you were going to go into create and create a bunch of assembly definitions this way you can easily measure if what you're doing is having a positive effect or not if you have any questions post them in the comments and I'll do my best to answer them alright see you next time you
