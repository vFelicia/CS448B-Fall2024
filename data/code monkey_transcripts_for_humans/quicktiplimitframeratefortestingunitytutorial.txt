With timestamps:

00:02 - hi there this is a quick tip for how to
00:04 - limit the frame rate for testing in
00:06 - making a game you have to make sure it
00:08 - works on many different types of
00:09 - hardware one of the things that can
00:10 - cause serious issues is the framerate
00:12 - for example if you're moving a transform
00:15 - and multiplying the movement vector by
00:17 - Delta time everything could work
00:18 - perfectly fine when playing at a high
00:20 - frame rate since out the time will be
00:21 - tiny but it could break everything when
00:24 - running at a low frame rate since now at
00:25 - the time won't be massive to show that
00:27 - problem in action here is seen I have a
00:29 - unit and I want to move it to this
00:31 - position so let's run the code and see
00:33 - how it goes
00:34 - there's the transform and as he saw he
00:36 - moved from there to there perfectly fine
00:38 - he got there and he stopped works
00:39 - perfectly fine so if you had this type
00:42 - of movement in your game you would
00:43 - assume everything was working fine here
00:45 - is the code for moving that unit we
00:47 - simply have an is moving bullion that
00:49 - simply moves while that one is true we
00:51 - got a target position we come later move
00:53 - direction and a movement speed and
00:55 - remove towards that direction by a
00:56 - movement amount which is movement speed
00:58 - multiplied by time down to time so very
01:00 - simple movement and after moving he does
01:02 - a quick distance check and checks if it
01:04 - is close enough if so he stops moving so
01:07 - a very simple transform movement and as
01:09 - he saw it works perfectly fine when
01:10 - running normally however in order to
01:12 - test we can limit the framerate by using
01:15 - application that target framerate so in
01:18 - this case let's limit it to 10 frames to
01:20 - see how this code would run on a
01:21 - computer with low specs okay there's the
01:25 - unit and yep as you go the unit move
01:27 - from there to there and that's the
01:28 - target position but he's not stopping
01:30 - there as he was previously he's jumping
01:32 - back and forth between two positions the
01:35 - issue that is happening here is directly
01:36 - related to the framerate as you can see
01:38 - we are running at 10 frames per second
01:40 - so that means in the coding here our
01:42 - term downtime won't be a very large
01:44 - number so essentially transferring our
01:45 - position won't be on the left of the
01:47 - target then it moves by a very large
01:49 - amount and all of a sudden on the right
01:51 - and on the left and so on and so forth
01:52 - so he never actually stops so the fix in
01:55 - here is very simple we just clamp our
01:57 - move amount to never go past the target
01:59 - position so we simply do so the clamp
02:05 - function takes a value and returns that
02:07 - value between a certain minimum
02:09 - maxximum so here it is perfect for
02:11 - validating our move amount so if the
02:14 - move amount is larger than the actual
02:16 - distance remaining then it will be
02:17 - capped to that distance so now let's see
02:20 - the code there's a unit and yep as you
02:23 - saw it went to the target position and
02:25 - it stopped right there so now our code
02:26 - works both at a high frame rate and at a
02:29 - low framework so again of this ishow
02:31 - that you need to test your game in
02:32 - various frame rates because you never
02:33 - know in what type of hardware the game
02:35 - won't be run on so for that you can use
02:38 - the target frame rate to limit the frame
02:40 - rate in order to test what do you want
02:41 - to stop testing you can simply set the
02:43 - target frame rate to minus 1 which
02:45 - equals unlimited and that's it hope you
02:47 - found this tip useful
02:48 - alright see you next time

Cleaned transcript:

hi there this is a quick tip for how to limit the frame rate for testing in making a game you have to make sure it works on many different types of hardware one of the things that can cause serious issues is the framerate for example if you're moving a transform and multiplying the movement vector by Delta time everything could work perfectly fine when playing at a high frame rate since out the time will be tiny but it could break everything when running at a low frame rate since now at the time won't be massive to show that problem in action here is seen I have a unit and I want to move it to this position so let's run the code and see how it goes there's the transform and as he saw he moved from there to there perfectly fine he got there and he stopped works perfectly fine so if you had this type of movement in your game you would assume everything was working fine here is the code for moving that unit we simply have an is moving bullion that simply moves while that one is true we got a target position we come later move direction and a movement speed and remove towards that direction by a movement amount which is movement speed multiplied by time down to time so very simple movement and after moving he does a quick distance check and checks if it is close enough if so he stops moving so a very simple transform movement and as he saw it works perfectly fine when running normally however in order to test we can limit the framerate by using application that target framerate so in this case let's limit it to 10 frames to see how this code would run on a computer with low specs okay there's the unit and yep as you go the unit move from there to there and that's the target position but he's not stopping there as he was previously he's jumping back and forth between two positions the issue that is happening here is directly related to the framerate as you can see we are running at 10 frames per second so that means in the coding here our term downtime won't be a very large number so essentially transferring our position won't be on the left of the target then it moves by a very large amount and all of a sudden on the right and on the left and so on and so forth so he never actually stops so the fix in here is very simple we just clamp our move amount to never go past the target position so we simply do so the clamp function takes a value and returns that value between a certain minimum maxximum so here it is perfect for validating our move amount so if the move amount is larger than the actual distance remaining then it will be capped to that distance so now let's see the code there's a unit and yep as you saw it went to the target position and it stopped right there so now our code works both at a high frame rate and at a low framework so again of this ishow that you need to test your game in various frame rates because you never know in what type of hardware the game won't be run on so for that you can use the target frame rate to limit the frame rate in order to test what do you want to stop testing you can simply set the target frame rate to minus 1 which equals unlimited and that's it hope you found this tip useful alright see you next time
