With timestamps:

00:00 - hello and welcome i'm your code monkey
00:02 - let's check out how we can make the
00:03 - simplest form a fluid simulation in
00:05 - unity
00:06 - now this is a very complex topic and
00:08 - making 100 realistic fluids is pretty
00:10 - much bleeding edge research
00:12 - so what we're going to build here is the
00:14 - simplest most straightforward
00:15 - implementation possible
00:17 - so let's first think of what do we mean
00:19 - when we think of a fluid
00:20 - essentially it's meant to be formless
00:22 - shapeless like water
00:24 - so as you put water into a cup it
00:25 - becomes a cup as you put water into a
00:27 - bottle it becomes a bottle and if you
00:29 - put it in a teapot it becomes a teapot
00:31 - at the same time it also has physics so
00:34 - water doesn't go through walls
00:35 - and as you know water by itself is not a
00:38 - single solid thing but instead it is
00:40 - made up of billions or trillions of
00:41 - individual molecules
00:43 - so this is how we're going to simulate
00:45 - it we're just going to make tons of tiny
00:47 - physics particles and let the physics
00:48 - engine do its thing
00:50 - so here i am in my scene i just have a
00:51 - bunch of interesting shapes
00:53 - and let's begin by making our first
00:55 - singular water molecule
00:56 - so we just create an empty game object
00:59 - let's name this just the
01:00 - liquid particle then over here let's
01:03 - reset the transform
01:05 - and for the visual let's add a sprite
01:07 - render
01:08 - and for the sprite i'm going to use this
01:10 - simple circle
01:12 - so there it is just push it up there yep
01:14 - there you go just a tiny circle
01:17 - now let's send it in blue just to
01:18 - pretend like it's water okay
01:20 - next up we're going to use physics so
01:22 - let's add a circle collider so this is
01:24 - the shape of our particle
01:26 - and the default yep it already matches
01:28 - the sprite perfectly
01:30 - and finally we add a rigid body in this
01:32 - case a rigid body 2d
01:34 - so just with this we should have one
01:36 - physically accurate particle
01:37 - so if i press play it should fall down
01:39 - and run down here let's see
01:41 - and yep there's the tiny particle it
01:42 - falls down and rolls down
01:44 - so here we have a physically accurate
01:46 - particle all right so far so good
01:49 - however in my case it's falling a bit
01:51 - too slowly i would prefer if it was a
01:52 - bit faster
01:54 - so for that we can play around over here
01:55 - with the rigid body properties
01:57 - specifically you can play around with
01:58 - the mass and over here the gravity scale
02:01 - now obviously the scale that you use
02:02 - here will depend on the unity scale of
02:04 - the game that you're using
02:05 - in my case if i leave the mass at one
02:07 - input gravity scale at three it looks
02:09 - pretty good
02:09 - so yep now it falls a bit faster which i
02:11 - think it looks better now another thing
02:13 - we can add is a physics material
02:15 - so we can simply right click go into
02:17 - create and in here create a physics
02:19 - material on 2d
02:21 - let's name this no friction and here you
02:24 - see the two properties for the physics
02:26 - material
02:27 - and we can just set friction down to
02:28 - zero so this will make it so that the
02:30 - particle easily slides along
02:32 - so just select the particle and over
02:33 - here on the rigid body just drag that
02:35 - physics
02:36 - material and also here on the angular
02:38 - drag settings to zero so it has
02:40 - absolutely no drag anywhere so there it
02:42 - is now our particle is nicely slippery
02:44 - just like water
02:45 - on the other hand if you wanted to make
02:46 - some slimy goo you would perhaps
02:48 - increase the friction so it all depends
02:50 - on what liquid you're trying to simulate
02:52 - learn all about vr and ar with the
02:54 - patreon sponsor
02:55 - xr bootcamp it's a 6-8 week bootcamp
02:58 - taught by industry professionals
03:00 - learn how to interact in vr optimize
03:02 - your rendering and learn about dots
03:04 - check them out at xrbootcamp.com and use
03:06 - the coupon cm10 to get 10 off any of the
03:09 - master classes
03:10 - okay so far so good now like i said this
03:12 - is just a single particle
03:14 - so before we make a bunch let's turn
03:16 - into a prefab so just drag it right here
03:18 - into our folder yep now it's a pre-file
03:20 - and now just duplicate it tons of times
03:32 - all right so there it is i just
03:33 - duplicated and made tons of prefabs
03:35 - and if we run and if there they are they
03:38 - all fall down
03:39 - all right awesome so physically we have
03:42 - our scene working
03:43 - exactly as intended but visually this
03:45 - definitely does not look like water
03:47 - it looks like a bunch of different
03:48 - separate circles that are clearly
03:50 - separate from one another
03:51 - so even if i move it in order to make it
03:53 - fall down
03:54 - yep they fall down but again they are
03:56 - just particles they do not look like a
03:58 - liquid
04:00 - so let's solve that and the way we're
04:01 - going to do that is with a bit of visual
04:03 - trickery
04:04 - what we want to do is essentially merge
04:06 - the various particles when they are near
04:08 - one another
04:09 - so we want to fill in all of these tiny
04:11 - gaps
04:12 - and one way that we can do that is
04:14 - pretty much just blur the particles so
04:15 - they don't look like they're merged
04:16 - together
04:17 - and one way to do that is by rendering
04:19 - the particles into a separate texture
04:21 - so over here in my scene i've got my
04:23 - main camera there you go just a basic 2d
04:25 - camera
04:26 - and now i'm going to duplicate this
04:28 - let's name this one the fluid camera
04:31 - and on this one the tricky thing we're
04:33 - going to do is we're only going to
04:34 - render just the particles
04:36 - so we can do that by playing around with
04:38 - the layers so let's select our prefab
04:40 - we're going to go into the layers and
04:42 - we're going to add a new layer and in
04:44 - here let's add a layer and name it
04:45 - fluids
04:46 - then on the prefab let's make sure we
04:48 - set it into that layer
04:50 - and now we select first of all the
04:51 - original main camera and in here we go
04:54 - into the coloring mask
04:55 - and we make sure that this one renders
04:57 - everything except the fluids so if we
04:59 - look over here on the camera preview we
05:00 - do not see our prefabs
05:02 - and then we go into the fluid camera and
05:04 - on this one we only want to render the
05:06 - fluids so let's select first nothing and
05:08 - then
05:08 - just the fluids okay so far so good
05:11 - now we don't want to render this camera
05:13 - to our screen but instead we want to
05:15 - render it into a texture
05:17 - so let's go here create and we're going
05:19 - to create a new render texture here it
05:21 - is
05:22 - let's name this the fluid render texture
05:25 - and now up here on the size of the
05:27 - render texture we can pretty much
05:28 - automatically blur the particles
05:30 - so just use a small size and 256x256
05:33 - sounds pretty good
05:34 - and just with that it will automatically
05:36 - have some blurriness so we've got this
05:38 - tiny texture in here
05:40 - and just select our fluid camera and on
05:42 - the output
05:43 - instead of outputting to the screen
05:44 - let's output into this texture
05:46 - as soon as we do and if we inspect the
05:48 - texture yep that's what it looks like
05:49 - so now we want to see this one in game
05:52 - so for that let's create a new object
05:54 - let's select a 3d object and select a
05:56 - flat quad
05:58 - now on this squad let's first scale it
06:00 - up by a bit
06:01 - and in here we want to render our render
06:03 - texture
06:04 - so let's make a material to render it
06:06 - let's go up here simply create a brand
06:08 - new material
06:09 - make it for the fluid and on the quad
06:12 - we're going to display that fluid
06:14 - material let's also get rid of the mesh
06:16 - collider
06:17 - and in here for the texture itself let's
06:19 - drag our render texture
06:20 - and there you go now this squad is
06:22 - showing what the second camera sees
06:24 - and by the way if you find the video
06:25 - helpful consider subscribing and hitting
06:27 - the like button
06:28 - it really helps out the channel so now
06:30 - we just need to make these match up
06:32 - so for that we can just actually take
06:34 - the quad and go all the way up there
06:36 - and in here we make it a child of the
06:38 - fluid camera then put it on
06:40 - x and y of zero and yep now it's
06:42 - positioned exactly
06:44 - and now in order to make sure that the
06:45 - size is correct we need to go and see
06:47 - how our
06:48 - camera is set up and over here you can
06:49 - see that it's an orthographic camera
06:51 - with a size of 50.
06:53 - now the 50 orthographic size is
06:55 - essentially half of the total vertical
06:57 - size
06:58 - so it means there's 50 units from here
06:59 - down to the center and 50 more from here
07:01 - down to here so the total from top to
07:03 - bottom is 100
07:05 - so that's why we go into the quad and in
07:06 - here set the y into 100
07:08 - and let's put the x also at 100. so if
07:11 - you don't like this enable and disable
07:13 - yep it is perfectly positioned
07:14 - and as you can see because of the low
07:17 - resolution of the texture it already has
07:18 - quite a bit of blurriness
07:20 - okay so far so good however this texture
07:23 - is meant to only show the particles and
07:25 - leave the rest of it transparent
07:27 - right now we can actually see a
07:28 - background as well as some post-crossing
07:30 - effects so you can see some vignette in
07:31 - there
07:32 - we don't want that so let's select this
07:34 - camera and first of all to get rid of
07:35 - the post processing just up here untick
07:37 - it
07:38 - yep there you go and now we have our
07:40 - solid color
07:41 - let's make sure that the background type
07:43 - is set to solid color and for the
07:44 - background color select black
07:46 - and then 0 on the alpha so with this it
07:49 - is correct however here it does not look
07:51 - correct
07:51 - that is because the material also needs
07:53 - to be transparent so let's select our
07:55 - fluid material
07:56 - and instead of making it opaque just
07:57 - make it transparent and yep there you go
07:59 - now it does work exactly as intended
08:01 - and just one final thing which is make
08:03 - sure that the quad is in front of the
08:04 - camera
08:05 - so right now if i go into the game view
08:06 - i can't see it that's because the quad
08:08 - is on a z of -159 so it's way behind the
08:11 - camera
08:12 - in my case my fluid camera is on his
08:14 - head of minus 10 so for the quad itself
08:15 - let's put it on pause 10.
08:17 - and yep there you go now it does show up
08:19 - okay so we can now run this and see how
08:21 - it looks like
08:22 - and yep it doesn't even look correct so
08:24 - we have all of our particles they are
08:26 - being rendered onto a blurry texture
08:28 - and then that texture is being overlaid
08:30 - on top so we have a main camera
08:32 - rendering the rest of the scene and then
08:33 - a second camera rendering just the
08:35 - particles
08:36 - however like this as you can see it
08:37 - obviously still doesn't look exactly
08:39 - very good
08:40 - so it still looks like individual
08:41 - particles now we want the shape as a
08:44 - home to be blurry but the visual is
08:46 - meant to be clear
08:47 - so for that we're going to make a simple
08:48 - custom shader
08:50 - let's simply right click and we're going
08:52 - to create we're going to create a new
08:53 - shader
08:54 - and let's make a new unload graph let's
08:57 - name it our fluid shader
08:59 - and just double click to open it okay so
09:01 - here we have our shader open up in
09:03 - shadow graph
09:04 - now i've covered a quick getting start
09:06 - guide to shadow graph so go watch that
09:08 - if you're not familiar with this tool
09:09 - essentially lets us very easily make
09:11 - some awesome shaders
09:13 - and one that we're going to make here is
09:14 - extremely simple the first thing we need
09:16 - is obviously a texture
09:17 - so let's add a new texture 2d let's name
09:20 - it our main text which is the standard
09:22 - name
09:23 - so for the reference underscore mean
09:24 - text okay then for the default we can
09:27 - actually select it
09:28 - so i've selected the fluid render
09:30 - texture and now we just simply grab the
09:32 - texture on here
09:33 - then we need to sample it so sample our
09:35 - texture 2d
09:37 - and just like this we can see what the
09:38 - camera sees now the trick for making our
09:41 - effect work
09:41 - is going to be using the step node i've
09:44 - already used this node previously when
09:46 - making the grass wind shader this is
09:48 - very useful
09:49 - what it does is it only grabs values
09:51 - above a certain threshold and ignores
09:53 - the rest
09:54 - so we take something with smooth values
09:56 - and clamps them to either one or zero
09:58 - so over here we have an edge and an
09:59 - input and on the input let's drag the
10:01 - alpha channel from our simple texture
10:04 - yep there it is so we have white where
10:06 - there is something in black where it's
10:07 - transparent
10:08 - and now up here if we modify the edge
10:10 - you can see roughly what happens in
10:12 - there
10:12 - so the lower there and lower this you
10:15 - can see that it becomes more white
10:16 - so this is essentially taking the blurry
10:18 - parts and either make them solid or
10:20 - completely transparent
10:22 - so the end result is that we take away
10:23 - the blurriness of the render texture and
10:25 - make a solid shape out of it
10:27 - so instead of modifying a value in here
10:28 - let's make a simple vector one
10:30 - let's name it the thickness
10:35 - and let's defound it 2.3 so just drag it
10:38 - in there
10:38 - and connect it onto that one okay so we
10:41 - have this
10:42 - and we can send this directly over to
10:43 - the alpha channel and here on the
10:45 - preview let's right click select the
10:46 - quad
10:47 - and then we're going to need the colors
10:49 - so for the color let's define another
10:51 - property for our color just name it our
10:53 - color
10:55 - let's default it to a watery blue okay
10:59 - and by the way let's also make it hdr
11:00 - just to have a bit more fun
11:02 - all right and we're going to add a
11:04 - multiply node and we simply multiply
11:06 - this one by
11:06 - our color okay so we have this and here
11:09 - we have our color output and just go in
11:11 - there
11:11 - alright so there we can see the preview
11:13 - we just have an issue with transparency
11:14 - so on the master node just click on the
11:16 - gear icon
11:17 - and in here on surface instead of opaque
11:19 - make it into transparent and on blend
11:21 - make sure you set the alpha
11:22 - and here we have our texture so if we go
11:25 - back
11:26 - and on the fluid material we just go
11:28 - into shadow graphs and use our shader
11:30 - and yep there it is now the gaps do get
11:32 - a bit more closed off
11:33 - and we can play around over here with
11:35 - the thickness so as we increase we get
11:36 - more gaps and if i put this in like 0.1
11:39 - then it starts to become like solid
11:40 - shape now we can improve this a bit
11:42 - further
11:43 - so let's go into each individual
11:44 - particle and by the way here's a quick
11:46 - unity tip
11:47 - so right away i can see the particles
11:49 - because the quad is on top
11:51 - over here on the hierarchy on the left
11:52 - side we've got this button which
11:54 - essentially says we cannot touch this
11:56 - so now if i click it goes through the
11:57 - quad and there's another one just to
11:59 - hide it so that way i can easily see the
12:01 - particles all right now on the particle
12:03 - let's modify it a bit let's actually
12:04 - open the prefab to see it easily
12:06 - so instead of using a perfect circle
12:08 - let's swap this for a
12:10 - faded circle so here i have one just
12:12 - like this so there you go
12:13 - and now for division let's make it a bit
12:14 - bigger so 1.5 on each side
12:17 - and for the circumference size let's
12:19 - make it a bit smaller so
12:20 - something like point three so this way
12:22 - now the circle itself has a bit of
12:24 - fadeness
12:24 - which again that's what's going to help
12:26 - in order to merge the whole visual into
12:28 - one thing
12:29 - and just with this if we now try and yep
12:32 - there it is now it does indeed
12:33 - look like water so it no longer looks
12:35 - like a ton of individual particles now
12:37 - it doesn't look like a solid shape
12:39 - and if we try to see them in action if
12:42 - there you go they fall down and yep now
12:43 - it does start to look like a liquid
12:45 - and now here i have swapped out for a
12:47 - bit of a more complex shader
12:49 - so the logic is all still the same and
12:50 - yep now it does start to look
12:52 - a lot more like water so it does have a
12:54 - bit of foam on top so it looks quite
12:56 - nice
12:57 - so here is how the shade works and it's
12:59 - a bit more complex but it's really just
13:00 - following the exact same logic as
13:02 - previously
13:03 - up here i just add a bunch of noise in
13:05 - order to make the water feel like
13:07 - something moving
13:08 - so that's just the visual and the same
13:09 - thing that we had previously is what we
13:11 - have here so we grab the texture we
13:12 - sample it
13:13 - then we do a step node and multiply
13:16 - another color and so on
13:17 - and the only difference is over here for
13:19 - the phone so we just sample the texture
13:21 - but instead of sampling on the exact
13:22 - same position we just add a tiny offset
13:25 - so that means that the sample texture is
13:27 - a bit higher then we just do a subtract
13:28 - node
13:29 - and essentially that gives us the very
13:31 - edge on the top
13:32 - then just take that do a step node
13:34 - multiply by a certain foam collar and
13:35 - yep everything looks like that
13:37 - so here is the final effect and it does
13:39 - look pretty good
13:40 - you can download and inspect the final
13:42 - shader in the downloadable project
13:43 - phones
13:44 - but essentially it works exactly like
13:46 - the outline shader that i covered
13:47 - previously
13:48 - so just shifting the texture and doing a
13:50 - subtraction and here it is looking
13:52 - awesome
13:53 - so it's got some noise to make it seem
13:54 - like there's actual water rather than
13:56 - just a solid object
13:57 - and you've got a nice foam and
13:59 - everything still behaves exactly as you
14:00 - would expect now like i said this is the
14:03 - simplest way to do fluid simulation
14:05 - as you can tell the big issue with this
14:07 - is with regards to either accuracy or
14:09 - performance
14:10 - so the more particles that you use and
14:11 - the smaller that you make them the more
14:13 - accurate the simulation becomes
14:15 - but remember that these are all physics
14:17 - objects so the more you have the more it
14:19 - drags on performance
14:20 - so the system works great but do keep
14:22 - that in mind and don't go too crazy with
14:24 - extremely tiny particles
14:26 - and now we can just play around with the
14:27 - color in order to get some different
14:28 - liquids
14:29 - so if you test it in red we now have
14:31 - some lava if we tint it in green then we
14:33 - have some slimy goo or acid
14:35 - and yep there it is some very awesome
14:37 - simple fluid simulations
14:39 - we can use this exact same system to
14:40 - make a gas as opposed to a liquid
14:43 - the only thing you really need to do is
14:44 - just go up here onto the gravity scale
14:46 - instead of putting a positive value just
14:47 - put a negative value
14:48 - and yep there it is and now instead of a
14:50 - liquid you have a gas that floats
14:52 - upwards
14:52 - and again you can pretend that this is a
14:54 - different thing depending on the colors
14:56 - so if you make it in purple it looks
14:58 - like some toxic gas if you put it in
15:00 - black then it looks like some pollution
15:02 - and if you put it in white then it looks
15:03 - like some sort of steam so here is the
15:05 - final result we've got both liquids and
15:07 - gas and it all looks awesome
15:09 - so this is an excellent system to use
15:10 - whenever you need some very simple
15:12 - fluids
15:13 - stay tuned for an upcoming video where i
15:14 - will be using this to make a nice puzzle
15:16 - game
15:17 - as always you can download the project
15:18 - files and utilities from
15:19 - unitycodemonkey.com
15:20 - if you found this video helpful consider
15:22 - liking and subscribing this video is
15:24 - made possible thanks to these awesome
15:25 - supporters
15:26 - go to patreon.com unitycodemonkey to get
15:29 - some perks and help keep the videos free
15:31 - for everyone
15:32 - post any questions you have in comments
15:33 - and i'll see you next time
15:41 - [Music]
15:45 - you

Cleaned transcript:

hello and welcome i'm your code monkey let's check out how we can make the simplest form a fluid simulation in unity now this is a very complex topic and making 100 realistic fluids is pretty much bleeding edge research so what we're going to build here is the simplest most straightforward implementation possible so let's first think of what do we mean when we think of a fluid essentially it's meant to be formless shapeless like water so as you put water into a cup it becomes a cup as you put water into a bottle it becomes a bottle and if you put it in a teapot it becomes a teapot at the same time it also has physics so water doesn't go through walls and as you know water by itself is not a single solid thing but instead it is made up of billions or trillions of individual molecules so this is how we're going to simulate it we're just going to make tons of tiny physics particles and let the physics engine do its thing so here i am in my scene i just have a bunch of interesting shapes and let's begin by making our first singular water molecule so we just create an empty game object let's name this just the liquid particle then over here let's reset the transform and for the visual let's add a sprite render and for the sprite i'm going to use this simple circle so there it is just push it up there yep there you go just a tiny circle now let's send it in blue just to pretend like it's water okay next up we're going to use physics so let's add a circle collider so this is the shape of our particle and the default yep it already matches the sprite perfectly and finally we add a rigid body in this case a rigid body 2d so just with this we should have one physically accurate particle so if i press play it should fall down and run down here let's see and yep there's the tiny particle it falls down and rolls down so here we have a physically accurate particle all right so far so good however in my case it's falling a bit too slowly i would prefer if it was a bit faster so for that we can play around over here with the rigid body properties specifically you can play around with the mass and over here the gravity scale now obviously the scale that you use here will depend on the unity scale of the game that you're using in my case if i leave the mass at one input gravity scale at three it looks pretty good so yep now it falls a bit faster which i think it looks better now another thing we can add is a physics material so we can simply right click go into create and in here create a physics material on 2d let's name this no friction and here you see the two properties for the physics material and we can just set friction down to zero so this will make it so that the particle easily slides along so just select the particle and over here on the rigid body just drag that physics material and also here on the angular drag settings to zero so it has absolutely no drag anywhere so there it is now our particle is nicely slippery just like water on the other hand if you wanted to make some slimy goo you would perhaps increase the friction so it all depends on what liquid you're trying to simulate learn all about vr and ar with the patreon sponsor xr bootcamp it's a 68 week bootcamp taught by industry professionals learn how to interact in vr optimize your rendering and learn about dots check them out at xrbootcamp.com and use the coupon cm10 to get 10 off any of the master classes okay so far so good now like i said this is just a single particle so before we make a bunch let's turn into a prefab so just drag it right here into our folder yep now it's a prefile and now just duplicate it tons of times all right so there it is i just duplicated and made tons of prefabs and if we run and if there they are they all fall down all right awesome so physically we have our scene working exactly as intended but visually this definitely does not look like water it looks like a bunch of different separate circles that are clearly separate from one another so even if i move it in order to make it fall down yep they fall down but again they are just particles they do not look like a liquid so let's solve that and the way we're going to do that is with a bit of visual trickery what we want to do is essentially merge the various particles when they are near one another so we want to fill in all of these tiny gaps and one way that we can do that is pretty much just blur the particles so they don't look like they're merged together and one way to do that is by rendering the particles into a separate texture so over here in my scene i've got my main camera there you go just a basic 2d camera and now i'm going to duplicate this let's name this one the fluid camera and on this one the tricky thing we're going to do is we're only going to render just the particles so we can do that by playing around with the layers so let's select our prefab we're going to go into the layers and we're going to add a new layer and in here let's add a layer and name it fluids then on the prefab let's make sure we set it into that layer and now we select first of all the original main camera and in here we go into the coloring mask and we make sure that this one renders everything except the fluids so if we look over here on the camera preview we do not see our prefabs and then we go into the fluid camera and on this one we only want to render the fluids so let's select first nothing and then just the fluids okay so far so good now we don't want to render this camera to our screen but instead we want to render it into a texture so let's go here create and we're going to create a new render texture here it is let's name this the fluid render texture and now up here on the size of the render texture we can pretty much automatically blur the particles so just use a small size and 256x256 sounds pretty good and just with that it will automatically have some blurriness so we've got this tiny texture in here and just select our fluid camera and on the output instead of outputting to the screen let's output into this texture as soon as we do and if we inspect the texture yep that's what it looks like so now we want to see this one in game so for that let's create a new object let's select a 3d object and select a flat quad now on this squad let's first scale it up by a bit and in here we want to render our render texture so let's make a material to render it let's go up here simply create a brand new material make it for the fluid and on the quad we're going to display that fluid material let's also get rid of the mesh collider and in here for the texture itself let's drag our render texture and there you go now this squad is showing what the second camera sees and by the way if you find the video helpful consider subscribing and hitting the like button it really helps out the channel so now we just need to make these match up so for that we can just actually take the quad and go all the way up there and in here we make it a child of the fluid camera then put it on x and y of zero and yep now it's positioned exactly and now in order to make sure that the size is correct we need to go and see how our camera is set up and over here you can see that it's an orthographic camera with a size of 50. now the 50 orthographic size is essentially half of the total vertical size so it means there's 50 units from here down to the center and 50 more from here down to here so the total from top to bottom is 100 so that's why we go into the quad and in here set the y into 100 and let's put the x also at 100. so if you don't like this enable and disable yep it is perfectly positioned and as you can see because of the low resolution of the texture it already has quite a bit of blurriness okay so far so good however this texture is meant to only show the particles and leave the rest of it transparent right now we can actually see a background as well as some postcrossing effects so you can see some vignette in there we don't want that so let's select this camera and first of all to get rid of the post processing just up here untick it yep there you go and now we have our solid color let's make sure that the background type is set to solid color and for the background color select black and then 0 on the alpha so with this it is correct however here it does not look correct that is because the material also needs to be transparent so let's select our fluid material and instead of making it opaque just make it transparent and yep there you go now it does work exactly as intended and just one final thing which is make sure that the quad is in front of the camera so right now if i go into the game view i can't see it that's because the quad is on a z of 159 so it's way behind the camera in my case my fluid camera is on his head of minus 10 so for the quad itself let's put it on pause 10. and yep there you go now it does show up okay so we can now run this and see how it looks like and yep it doesn't even look correct so we have all of our particles they are being rendered onto a blurry texture and then that texture is being overlaid on top so we have a main camera rendering the rest of the scene and then a second camera rendering just the particles however like this as you can see it obviously still doesn't look exactly very good so it still looks like individual particles now we want the shape as a home to be blurry but the visual is meant to be clear so for that we're going to make a simple custom shader let's simply right click and we're going to create we're going to create a new shader and let's make a new unload graph let's name it our fluid shader and just double click to open it okay so here we have our shader open up in shadow graph now i've covered a quick getting start guide to shadow graph so go watch that if you're not familiar with this tool essentially lets us very easily make some awesome shaders and one that we're going to make here is extremely simple the first thing we need is obviously a texture so let's add a new texture 2d let's name it our main text which is the standard name so for the reference underscore mean text okay then for the default we can actually select it so i've selected the fluid render texture and now we just simply grab the texture on here then we need to sample it so sample our texture 2d and just like this we can see what the camera sees now the trick for making our effect work is going to be using the step node i've already used this node previously when making the grass wind shader this is very useful what it does is it only grabs values above a certain threshold and ignores the rest so we take something with smooth values and clamps them to either one or zero so over here we have an edge and an input and on the input let's drag the alpha channel from our simple texture yep there it is so we have white where there is something in black where it's transparent and now up here if we modify the edge you can see roughly what happens in there so the lower there and lower this you can see that it becomes more white so this is essentially taking the blurry parts and either make them solid or completely transparent so the end result is that we take away the blurriness of the render texture and make a solid shape out of it so instead of modifying a value in here let's make a simple vector one let's name it the thickness and let's defound it 2.3 so just drag it in there and connect it onto that one okay so we have this and we can send this directly over to the alpha channel and here on the preview let's right click select the quad and then we're going to need the colors so for the color let's define another property for our color just name it our color let's default it to a watery blue okay and by the way let's also make it hdr just to have a bit more fun all right and we're going to add a multiply node and we simply multiply this one by our color okay so we have this and here we have our color output and just go in there alright so there we can see the preview we just have an issue with transparency so on the master node just click on the gear icon and in here on surface instead of opaque make it into transparent and on blend make sure you set the alpha and here we have our texture so if we go back and on the fluid material we just go into shadow graphs and use our shader and yep there it is now the gaps do get a bit more closed off and we can play around over here with the thickness so as we increase we get more gaps and if i put this in like 0.1 then it starts to become like solid shape now we can improve this a bit further so let's go into each individual particle and by the way here's a quick unity tip so right away i can see the particles because the quad is on top over here on the hierarchy on the left side we've got this button which essentially says we cannot touch this so now if i click it goes through the quad and there's another one just to hide it so that way i can easily see the particles all right now on the particle let's modify it a bit let's actually open the prefab to see it easily so instead of using a perfect circle let's swap this for a faded circle so here i have one just like this so there you go and now for division let's make it a bit bigger so 1.5 on each side and for the circumference size let's make it a bit smaller so something like point three so this way now the circle itself has a bit of fadeness which again that's what's going to help in order to merge the whole visual into one thing and just with this if we now try and yep there it is now it does indeed look like water so it no longer looks like a ton of individual particles now it doesn't look like a solid shape and if we try to see them in action if there you go they fall down and yep now it does start to look like a liquid and now here i have swapped out for a bit of a more complex shader so the logic is all still the same and yep now it does start to look a lot more like water so it does have a bit of foam on top so it looks quite nice so here is how the shade works and it's a bit more complex but it's really just following the exact same logic as previously up here i just add a bunch of noise in order to make the water feel like something moving so that's just the visual and the same thing that we had previously is what we have here so we grab the texture we sample it then we do a step node and multiply another color and so on and the only difference is over here for the phone so we just sample the texture but instead of sampling on the exact same position we just add a tiny offset so that means that the sample texture is a bit higher then we just do a subtract node and essentially that gives us the very edge on the top then just take that do a step node multiply by a certain foam collar and yep everything looks like that so here is the final effect and it does look pretty good you can download and inspect the final shader in the downloadable project phones but essentially it works exactly like the outline shader that i covered previously so just shifting the texture and doing a subtraction and here it is looking awesome so it's got some noise to make it seem like there's actual water rather than just a solid object and you've got a nice foam and everything still behaves exactly as you would expect now like i said this is the simplest way to do fluid simulation as you can tell the big issue with this is with regards to either accuracy or performance so the more particles that you use and the smaller that you make them the more accurate the simulation becomes but remember that these are all physics objects so the more you have the more it drags on performance so the system works great but do keep that in mind and don't go too crazy with extremely tiny particles and now we can just play around with the color in order to get some different liquids so if you test it in red we now have some lava if we tint it in green then we have some slimy goo or acid and yep there it is some very awesome simple fluid simulations we can use this exact same system to make a gas as opposed to a liquid the only thing you really need to do is just go up here onto the gravity scale instead of putting a positive value just put a negative value and yep there it is and now instead of a liquid you have a gas that floats upwards and again you can pretend that this is a different thing depending on the colors so if you make it in purple it looks like some toxic gas if you put it in black then it looks like some pollution and if you put it in white then it looks like some sort of steam so here is the final result we've got both liquids and gas and it all looks awesome so this is an excellent system to use whenever you need some very simple fluids stay tuned for an upcoming video where i will be using this to make a nice puzzle game as always you can download the project files and utilities from unitycodemonkey.com if you found this video helpful consider liking and subscribing this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone post any questions you have in comments and i'll see you next time you
