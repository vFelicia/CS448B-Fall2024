With timestamps:

00:00 - hello and welcome I'm your code monkey
00:02 - and in this video we're going to create
00:03 - a simple sprite animator
00:05 - let's get Sir
00:09 - ok so I have my basic scene here and in
00:12 - my textures I have a wonk spreadsheet
00:15 - which contains four frames of animation
00:17 - since this animation is based on frames
00:20 - we want to display frame 1 than frame to
00:22 - frame 3 etc so in order to set up our
00:25 - sprite to support frame animation that
00:28 - is change our sprite mode to multiple
00:31 - hit apply and on my sprite editor going
00:35 - to slice by cell size and this
00:39 - spreadsheet contains frames that are 170
00:41 - in width and 256 in height so slice it
00:45 - and there you go I got my first frame
00:47 - second frame third frame and fourth room
00:49 - okay hit apply and okay our sprite sheet
00:52 - and frames are now correctly setup so
00:54 - let's make a new C sharp script and name
00:57 - it
00:58 - sprite animator so in here we want to
01:02 - cycle through an array containing all of
01:04 - our frames let's set up that array which
01:07 - will be a private sprite array and call
01:11 - it frame array we're also going to need
01:15 - to store the current frame that is being
01:17 - displayed so a private game for any
01:19 - frame and we need a time where to store
01:23 - the time that the current frame is being
01:25 - displayed so private float time okay now
01:30 - on our private void update we are going
01:33 - to first of all increase the timer by
01:36 - I'm dot Delta time and then here for now
01:39 - let's just make one frame per second so
01:41 - if timer is bigger than 1/2 then timer
01:46 - minus equals now and we're going to
01:49 - increase our current frame so after one
01:51 - second we're going to reset the timer
01:53 - and increase our current frame and then
01:55 - display our current frame so
01:57 - getcomponent the type sprite renderer
01:59 - dot sprite it won't be on the frame
02:03 - array in the sprite that is in the index
02:06 - current frame okay so we are increasing
02:09 - our frame every second and this point
02:11 - let's see what it looks like back into
02:14 - our scene here and create a empty game
02:18 - object let's say our sprite anim
02:22 - going to drag our script and in here we
02:27 - actually need to make this serialized so
02:31 - that we can set up in the editor there
02:35 - we go I have my frame alright and here
02:37 - just a bonus tip you can unlock the
02:40 - current inspector
02:41 - while you select all your sprites and
02:43 - drag them in there add the sprite
02:46 - renderer so we can display our sprite
02:48 - well it's serif by displaying our first
02:51 - fright
02:51 - there's my object and let's see it there
02:56 - your first frame second frame third
02:58 - frame fourth firm and now it crashes
03:01 - because we went array index out of range
03:04 - okay so let's make sure that when you
03:06 - reaches the final one it resets back to
03:08 - frame 0 so in here instead of just
03:11 - increasing the current frame we're going
03:12 - to current frame equals current frame
03:15 - was one and then get the remainder of
03:20 - the division by the frame array length
03:24 - so this way when current frame reaches
03:26 - frame array dot length which in this
03:28 - case is four you won't automatically
03:30 - reset to zero okay let's see if our
03:33 - animation is now correctly looping okay
03:38 - there give a first for any secondary
03:39 - fourth frame and yep exactly
03:41 - it is now working correctly ok great so
03:46 - now instead of increasing every second
03:48 - let's make our frame rate into a
03:49 - variable so make a private float frame
03:54 - rate and let's say a hundred
03:57 - milliseconds and in here instead of
03:59 - testing bigger than one second let's
04:01 - just test if it is bigger than the frame
04:03 - rate and decrease by that amount okay
04:05 - let's see it okay there you it is now
04:09 - running at a hundred
04:10 - changing frames every 100 milliseconds
04:13 - which equals ten frames per second now
04:16 - let's clean our code and make it a bit
04:18 - more performance by storing a reference
04:20 - to our sprite renderer so we don't have
04:22 - to constantly do get component on every
04:24 - update so up here a private sprite
04:27 - renderer call it sprite renderer
04:30 - and we're going to grab it on void awake
04:33 - it makes sprite renderer equals game
04:38 - object active component a type sprite
04:41 - renderer okay and now in here instead of
04:45 - constantly using getcomponent
04:47 - we're just going to use our cache sprite
04:50 - render great and there you have it a
04:54 - very simple class that takes a set of
04:56 - frames and place them sequentially as
05:00 - always you can download the project
05:01 - files in utilities for free from unity
05:03 - code monkey comm if you have any
05:05 - questions post them in the comments and
05:07 - I'll do my best
05:07 - Internet okay see you next time

Cleaned transcript:

hello and welcome I'm your code monkey and in this video we're going to create a simple sprite animator let's get Sir ok so I have my basic scene here and in my textures I have a wonk spreadsheet which contains four frames of animation since this animation is based on frames we want to display frame 1 than frame to frame 3 etc so in order to set up our sprite to support frame animation that is change our sprite mode to multiple hit apply and on my sprite editor going to slice by cell size and this spreadsheet contains frames that are 170 in width and 256 in height so slice it and there you go I got my first frame second frame third frame and fourth room okay hit apply and okay our sprite sheet and frames are now correctly setup so let's make a new C sharp script and name it sprite animator so in here we want to cycle through an array containing all of our frames let's set up that array which will be a private sprite array and call it frame array we're also going to need to store the current frame that is being displayed so a private game for any frame and we need a time where to store the time that the current frame is being displayed so private float time okay now on our private void update we are going to first of all increase the timer by I'm dot Delta time and then here for now let's just make one frame per second so if timer is bigger than 1/2 then timer minus equals now and we're going to increase our current frame so after one second we're going to reset the timer and increase our current frame and then display our current frame so getcomponent the type sprite renderer dot sprite it won't be on the frame array in the sprite that is in the index current frame okay so we are increasing our frame every second and this point let's see what it looks like back into our scene here and create a empty game object let's say our sprite anim going to drag our script and in here we actually need to make this serialized so that we can set up in the editor there we go I have my frame alright and here just a bonus tip you can unlock the current inspector while you select all your sprites and drag them in there add the sprite renderer so we can display our sprite well it's serif by displaying our first fright there's my object and let's see it there your first frame second frame third frame fourth firm and now it crashes because we went array index out of range okay so let's make sure that when you reaches the final one it resets back to frame 0 so in here instead of just increasing the current frame we're going to current frame equals current frame was one and then get the remainder of the division by the frame array length so this way when current frame reaches frame array dot length which in this case is four you won't automatically reset to zero okay let's see if our animation is now correctly looping okay there give a first for any secondary fourth frame and yep exactly it is now working correctly ok great so now instead of increasing every second let's make our frame rate into a variable so make a private float frame rate and let's say a hundred milliseconds and in here instead of testing bigger than one second let's just test if it is bigger than the frame rate and decrease by that amount okay let's see it okay there you it is now running at a hundred changing frames every 100 milliseconds which equals ten frames per second now let's clean our code and make it a bit more performance by storing a reference to our sprite renderer so we don't have to constantly do get component on every update so up here a private sprite renderer call it sprite renderer and we're going to grab it on void awake it makes sprite renderer equals game object active component a type sprite renderer okay and now in here instead of constantly using getcomponent we're just going to use our cache sprite render great and there you have it a very simple class that takes a set of frames and place them sequentially as always you can download the project files in utilities for free from unity code monkey comm if you have any questions post them in the comments and I'll do my best Internet okay see you next time
