With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - and here let's take the grid pathfinding
00:04 - that I made previously and apply it to a
00:06 - hex grid honestly I was wondering
00:07 - whether I should make this video or not
00:09 - because it literally is a super simple
00:10 - change but I decided to make the video
00:12 - anyway so that it shows up in search
00:13 - results and helps anyone who is looking
00:15 - for specifically hex based pathfinding
00:17 - if you want the 10 second answer here it
00:19 - is you just change the pathfinding grind
00:21 - to use the new hex grid then you change
00:23 - which neighbors are tested and that's it
00:26 - that's all it takes now in preparation
00:28 - for this topic I already made two
00:29 - related videos one covering how to test
00:32 - if a point is inside a hex now that one
00:34 - isn't really necessary when it comes to
00:36 - hex words but still very useful to know
00:37 - how to do that
00:38 - and a second video on making a hex
00:41 - written in there I take the regular
00:43 - square grid system that I've used in so
00:44 - many videos on the channel I take that
00:46 - grid system and convert it to support
00:48 - hexes to be able to tell which one
00:50 - position equals a certain hex word
00:51 - position then of course I also covered
00:54 - pathfinding in data on another video
00:55 - again that one is also based on the same
00:57 - square chord system so here let's see
00:59 - how easy it is to swap pathfinding from
01:01 - a square grid to a hex grid over here I
01:04 - have my demo scene I have exactly the
01:06 - same Pathfinder that I made in that
01:08 - other video the only difference is I
01:09 - change the grid to work in the XZ axis
01:11 - instead of X Y I did that just to be
01:14 - able to have a bit more fun in a 3D
01:15 - scene but everything else is exactly the
01:17 - same as it was built in that video so I
01:19 - have my simple unit and I have my Square
01:21 - grid and I can click anywhere to tell
01:23 - the end to move and the unit calculates
01:25 - the pathfinding to get it to that
01:26 - position so I click there it goes there
01:28 - it goes there and so on now with a right
01:30 - click I can also make a certain position
01:31 - walkable so let's make all these
01:33 - unlockable now if I click here and if
01:35 - there go simple pathfinding avoiding the
01:37 - unwalkable areas okay so that's the
01:39 - basic demo with only working pathfinding
01:41 - on a square grid now let's swap it out
01:43 - for a hex grid so here is the
01:45 - pathfinding script that we made in that
01:46 - previous video again the only change I
01:48 - did was just swap the grid to work with
01:50 - XZ instead of X Y so let's duplicate
01:53 - this script we don't want to destroy
01:55 - this on their pathfinding square roots
01:56 - are still insanely useful so we're here
01:58 - on let's just duplicate this and call
02:00 - this the pathfinding hex XZ over here
02:03 - let's change the name so hex XZ and then
02:06 - all of these references change them so
02:08 - just this one and this one now swapping
02:10 - out the grid so let's use the grid hex
02:12 - XZ that we created in the previous video
02:14 - so just replace all these references so
02:16 - just find them all this one this one
02:18 - this one and that's it no more
02:19 - references now doing this requires
02:21 - changing over here the path node as well
02:23 - so let's also deploy it down
02:25 - so over here on the path node let's
02:27 - duplicate it and again just call it hex
02:29 - and here change all of these so the hex
02:32 - XZ
02:33 - so replace all of these references okay
02:36 - and for the grin this one is great hex
02:39 - Zen so just replace this one and this
02:42 - one all right that's it so now back into
02:44 - the pathfinding hex xn and over here
02:46 - instead of using this path node let's
02:48 - use the path node hex XZ so we just need
02:50 - to make sure to change all of these
02:52 - references so change all of them one by
02:54 - one just find this one find this one
02:56 - over here change change this one this
03:00 - one this one
03:01 - and these
03:04 - and a bunch more down here so change all
03:06 - of them and finally these ones all right
03:08 - great so we have no more errors here and
03:11 - we have swapped it to use pathfinding
03:12 - hex xn using the grid hex and the path
03:15 - node hex and here in the editor yep the
03:18 - scripts are compiling so everything is
03:19 - working correctly now let's do some
03:21 - quick testing over here we have a game
03:24 - object with a testing script and here
03:25 - just have a prefab reference for the
03:27 - square the hex and the unwalkable then
03:30 - on away simply instantiate the grid hex
03:32 - end second through it to spawn all of
03:34 - the original transforms and create the
03:36 - pathfinding and then on update and
03:38 - listen to a mouse click then tell the
03:40 - unit where to go and on right click make
03:42 - the position unlockable so let's swap
03:44 - this out for a hex grid so let's go up
03:46 - here instead of using the grid xn the
03:49 - green hex and the pathfinding swap route
03:51 - for the pathfinding hex let's also
03:53 - rename this so hex by the way the
03:55 - shortcut over here is control RR that's
03:58 - the rename shortcut which remains all of
04:00 - the references
04:01 - so rename all of those and down here the
04:04 - grid hex xn which is also used here and
04:07 - the pathfinding hex XZ okay that's it no
04:10 - more errors and just over here we're
04:12 - instantiating instead of instantiating
04:13 - the square let's instantiate the hex
04:15 - okay so we should be able to see our hex
04:17 - grid let's see and up here we do see our
04:20 - hexary okay so far so good now let's do
04:22 - a quick test to visualize the
04:23 - pathfinding so let's go to where we are
04:25 - getting a mouse click over here let's go
04:28 - into pathfinding hex X end and let's go
04:30 - on the function to find the PATH this
04:32 - takes a start form position so let's use
04:34 - Vector 3.0 and for the end let's use the
04:37 - mouse worm position
04:39 - okay so we do this and this returns a
04:41 - list of vector three
04:43 - so this is our path list and then let's
04:46 - just cycle through it
04:49 - and let's just do a debug.rawline on
04:52 - these positions so let's go into the
04:54 - path list on this index and let's go
04:58 - until the path list on the next index
05:01 - and just up here and let's make sure we
05:03 - only cycle until the path count minus
05:05 - one and finally color dot green and
05:08 - let's show this for just three seconds
05:10 - it's not a log but actually a draw line
05:13 - okay
05:14 - all right so we should be able to click
05:16 - somewhere and see a bunch of lines going
05:18 - from zero zero onto the mouse position
05:20 - let's see so here we are in Game View
05:22 - and now since we use debug.tronline that
05:25 - means we need to enable gizmos to see it
05:27 - so we're here on game view let's go up
05:28 - to the top right corner and click on
05:30 - gizmos to enable them and now if I click
05:32 - somewhere let's say I click in here and
05:34 - if there go it does show the path so
05:36 - going to path in there going to pattern
05:38 - there and so on okay great so we can
05:40 - currently see the path being calculated
05:42 - except of course it's not really working
05:44 - so the path is going through weird
05:45 - places so this one going in there is
05:47 - going through there and that is not a
05:48 - valent position so going in there should
05:50 - either go through there or through there
05:52 - okay so the reason why the path isn't
05:54 - working is because the last thing we
05:56 - need to change is the algorithm itself
05:57 - and again the only change needed is
05:59 - really just getting the neighbors again
06:01 - make sure you watch the pathfinding
06:03 - video if you want a quick refresh here
06:05 - on how the ASR pathfinding algorithm
06:06 - Works basically over here on the find
06:09 - path function we have a open list and a
06:12 - closed list then we second through all
06:13 - the nodes on the open list we check if
06:16 - it's a final one if not then we continue
06:17 - we remove that one from the open list we
06:20 - test all of its neighbors and so on so
06:22 - all we need to do is modify over here
06:23 - this function which Returns the
06:24 - neighbors of a certain node and here for
06:27 - the Neighbors we have the neighbors on a
06:28 - regular square we're in so we've got
06:30 - left left down left up right right down
06:32 - right up and so on so for example here's
06:34 - a diagram of a square grid so let's say
06:37 - we are testing this position and we're
06:38 - going to look for Neighbors so we're
06:40 - going to look on the right we're going
06:41 - to look on the left we're going to look
06:42 - up and also going to look down and then
06:45 - obviously on the corners so the upper
06:47 - left the upper right down right and down
06:49 - left so any Square grid we have one two
06:51 - three four five six seven eight
06:53 - neighbors whereas over here on a hex
06:55 - grid if we're testing out this node then
06:57 - the neighbors are going to be the one
06:58 - right the one on the left and then we're
07:01 - going to have one that is straight above
07:02 - so this one is position two two so two
07:04 - three is going to be straight above and
07:06 - T1 is going to be straight below and in
07:08 - this case we're also going to need to
07:09 - test this one and this one so in a hex
07:11 - grid we only have these two these two
07:13 - and these two so only six and not eight
07:15 - neighbors however the other thing which
07:17 - I also mentioned in the hex grade video
07:19 - is that the neighbors depend on whether
07:21 - you are working on an even row or an odd
07:24 - row so here on this on row you can see
07:26 - the ones above you see the ones with X
07:28 - plus zero so on the exact same X just
07:30 - above and you test for the ones with x
07:32 - minus one so that's what you do on an
07:34 - even row however on an odd row like for
07:37 - example this one if we were to test the
07:39 - x minus 1 we would end up testing this
07:41 - one above that is not the one we want we
07:42 - want to test this one which is X plus
07:44 - zero and this one which is the X plus
07:46 - one so we need to be extremely careful
07:48 - here just like we were very careful with
07:50 - the hex grid video so here on the get
07:52 - neighbor analyst function let's first
07:54 - test if we are in an odd row so bull for
07:56 - the odd row and we just grab the current
07:59 - node and grab the Y which is actually
08:01 - the Z since we're working on the X Z
08:03 - case but sure so we take that one then
08:05 - we do a module of Two And if it is one
08:07 - then we have an odd row if not we have
08:09 - an even row and then instead of all
08:11 - these neighbors we just asked for
08:13 - different ones so we've got the ones
08:15 - that are the same regardless of being on
08:16 - an odd row or an even row so you've got
08:19 - the x minus one so the one the left one
08:20 - on the right the one down and the one up
08:22 - and then the only difference over here
08:24 - if we are odd or an even row if we are
08:26 - in an odd row then we want to get the
08:28 - ones with an X plus one and if we are on
08:30 - an even row then we want the x minus one
08:32 - okay so with this all of the neighbors
08:34 - should be correct again make sure you
08:36 - don't make any mistakes here if you test
08:38 - the wrong neighbors then the algorithm
08:40 - won't work and finally there's just one
08:42 - more minor change which is down here
08:44 - when we are calculating the distance
08:45 - cost for a square grid we've got the
08:48 - difference between diagonal costs and
08:49 - strict costs that is because
08:51 - mathematically moving over here going
08:52 - straight to the right that is a shorter
08:54 - distance and going from here to here on
08:56 - diagonal however on a hex read we don't
08:58 - have that issue all of those those are
09:00 - all straight movements so over here we
09:02 - can simplify this or really just make
09:04 - straight costs all the way so it's never
09:06 - a diagonal cost however there is still
09:08 - one last sneaky issue here like this
09:11 - it's not exactly 100 correct because of
09:13 - the offset between the odd and even rows
09:15 - so over here the way we were getting our
09:17 - diagonal moves is the minimum between
09:19 - the X and the Y distance and then the
09:21 - straight moves are simply the remaining
09:22 - ones so going from 0 0 to 1 1 the
09:25 - minimum between those two that would be
09:27 - indeed one so this would be one diagonal
09:29 - move and then the remaining one minus
09:31 - one is zero so there would be Zero moves
09:33 - so that makes sense in a square grid
09:36 - going from here from zero zero to one
09:38 - one that is indeed just one diagonal
09:39 - move but if we go back here onto the hex
09:42 - diagram on this one if we are going from
09:44 - zero zero to one one then with that
09:46 - logic we have just one move whereas in
09:48 - reality over here we have two we cannot
09:50 - go straight like this in order to go
09:52 - there we need to go here and here so
09:54 - using the exact same cost logic that
09:56 - would not be correct now this is
09:58 - actually something that took me tons of
09:59 - time to figure it out and I'm still not
10:01 - entirely sure how to correctly calculate
10:03 - a Manhattan distance on a hex grid so
10:05 - for example getting the distance from
10:07 - zero zero over here to three three how
10:09 - do I get one two two three four and five
10:12 - I tried tons of approaches but there was
10:14 - only something wrong it needs to take
10:15 - into account the direction so going left
10:17 - and right the number of odd or even rows
10:19 - in between the start and the end and so
10:21 - on so I tried lots of things and it
10:23 - didn't quite work but then I realized
10:25 - that it's also not really necessary I
10:27 - don't need to know that from here to
10:28 - here is a certain number of moves the
10:30 - distance is really only used for a
10:31 - heuristic which is really just a guess
10:33 - so in order to get that guess the simple
10:35 - way to do is just test the actual warm
10:37 - distance since we already have a super
10:39 - easy way of converting a grid position
10:41 - onto a warm position so we're here when
10:43 - calculating the distance cost instead of
10:45 - this we can just use something super
10:46 - simple
10:47 - so we do effector 3 dot distance let's
10:50 - go into the grid system then on the grid
10:53 - we get the worm position get the wrong
10:55 - position from this starting point so a
10:57 - DOT X and a DOT y then call it the
11:00 - distance towards the B position
11:04 - with this we have distance so let's just
11:06 - multiply it by the move straight cost
11:08 - and since this expectation and let's
11:11 - just do a math F dot round to end so on
11:13 - all of this
11:18 - all right so that's it this will indeed
11:20 - give us a very rough distance which is
11:22 - all we need for the algorithm to work so
11:24 - let's rename this to give it a proper
11:25 - name so it's not the direct distance
11:27 - cause instead it's just a rough guess
11:29 - so let's rename this and let's call it
11:32 - the complete heuristic distance cost
11:34 - then I'll let you see where we're using
11:36 - this function and if we go up here onto
11:38 - the algorithm we do see that we're using
11:40 - it to set the H cost of going from this
11:42 - node onto the end node so that is
11:44 - correct the H cost is the heuristic cost
11:46 - in the algorithm but we're also using it
11:49 - over here for the G cost but the G cost
11:51 - is not meant to be heuristic it's meant
11:53 - to be the actual cost so this one that
11:55 - we use over here this one must be
11:56 - correct and this one is always going to
11:58 - be a straight move it's always a street
12:00 - move from the current node to the
12:01 - neighbor node so over here we can just
12:03 - put the move straight cost and just use
12:05 - this directly
12:07 - all right so that's it again the
12:09 - heuristic in the algorithm this is just
12:11 - a rough guess so that is why we don't
12:13 - necessarily need an extremely accurate
12:15 - heuristic like we did for the Manhattan
12:17 - distance on the Square grid system with
12:19 - this very rough very simple heuristic
12:21 - our algorithm should still be working
12:22 - perfectly so let's finally test so here
12:25 - we are and if I click over here and yup
12:27 - it does take the exact correct hex path
12:29 - I can click anywhere I want and yep it
12:31 - always goes straight through the hexes
12:33 - and never in between all dashes alright
12:35 - awesome now let's verify that it is
12:38 - indeed working by making some nodes
12:39 - unlockable again here in my testing
12:41 - script I already have that logic so I'm
12:43 - testing for the right Mouse button if so
12:45 - then I get the grid object on the mouse
12:47 - run position and I set it as unlockable
12:49 - then I also get the one position where I
12:51 - clicked and I instantiate the unwalkable
12:53 - prefab so over here I can right click
12:55 - let's make these positions unlockable so
12:57 - we're going to start from there and
12:58 - let's say go in there and if there go it
13:00 - does go over there so I can now make
13:02 - whatever path I want and yep there you
13:05 - go it always finds a path so finally
13:07 - here it is applied to a character so I
13:09 - can right click to make any notes
13:10 - unlockable then I can click and yep
13:12 - there you go the character does find the
13:13 - PATH and goes straight through the
13:15 - target position so I can go anywhere do
13:17 - anything and yep the character always
13:19 - finds a path throughout my hex grid
13:21 - alright great here is how the character
13:24 - is set up this is based on the modular
13:26 - character system that I covered in
13:28 - another video it just has this component
13:30 - move position hex pathfinding then this
13:32 - function over here receives a Target
13:34 - move position and an action when it
13:36 - reaches that position then just goes
13:38 - into the pathfinding columns find the
13:39 - PATH and gets the path Factor on list
13:41 - and then on update simply goes from
13:43 - position to position so here it is on a
13:45 - bigger more complex math and yep
13:47 - everything works I can click anywhere
13:48 - and the character finds a path and goes
13:50 - straight towards there alright awesome
13:52 - okay so that's it as you can see it's
13:55 - pretty simple to convert from grid based
13:57 - pathfinding into hex based pathfinding
13:59 - really just a few tiny changes and
14:01 - everything already works perfectly the
14:03 - algorithm is really all the same the
14:04 - only difference is just the neighbors
14:06 - now like you mentioned in the hexade
14:08 - video the reason why I've been
14:09 - researching hexes is because it's the
14:11 - most requests topic on my turn-based
14:13 - strategy course so now that I've done my
14:14 - research I'm currently working on
14:16 - writing all the lectures making a free
14:17 - update covering the complete conversion
14:19 - process if you haven't picked up the
14:21 - course yet then definitely give it a
14:22 - look I worked really hard on making it
14:24 - an excellent course specifically to help
14:26 - guide you and take your skills from
14:27 - beginner to Advanced so if you are
14:29 - interested in turn-based strategy games
14:31 - or really you just want to improve your
14:32 - programming and Game Dev skills while
14:34 - learning how to write good clean code
14:36 - then check it out and if you already
14:37 - have it then this hex grid update will
14:39 - be a completely free expansion to the
14:41 - course hopefully within the next few
14:42 - weeks alright hope that's useful check
14:44 - out these videos to learn some more
14:46 - thanks to these awesome patreon
14:48 - supporters for making these videos
14:49 - possible thank you for watching and I'll
14:51 - see you next time
14:53 - foreign
14:55 - [Music]

Cleaned transcript:

hello and welcome I'm your code monkey and here let's take the grid pathfinding that I made previously and apply it to a hex grid honestly I was wondering whether I should make this video or not because it literally is a super simple change but I decided to make the video anyway so that it shows up in search results and helps anyone who is looking for specifically hex based pathfinding if you want the 10 second answer here it is you just change the pathfinding grind to use the new hex grid then you change which neighbors are tested and that's it that's all it takes now in preparation for this topic I already made two related videos one covering how to test if a point is inside a hex now that one isn't really necessary when it comes to hex words but still very useful to know how to do that and a second video on making a hex written in there I take the regular square grid system that I've used in so many videos on the channel I take that grid system and convert it to support hexes to be able to tell which one position equals a certain hex word position then of course I also covered pathfinding in data on another video again that one is also based on the same square chord system so here let's see how easy it is to swap pathfinding from a square grid to a hex grid over here I have my demo scene I have exactly the same Pathfinder that I made in that other video the only difference is I change the grid to work in the XZ axis instead of X Y I did that just to be able to have a bit more fun in a 3D scene but everything else is exactly the same as it was built in that video so I have my simple unit and I have my Square grid and I can click anywhere to tell the end to move and the unit calculates the pathfinding to get it to that position so I click there it goes there it goes there and so on now with a right click I can also make a certain position walkable so let's make all these unlockable now if I click here and if there go simple pathfinding avoiding the unwalkable areas okay so that's the basic demo with only working pathfinding on a square grid now let's swap it out for a hex grid so here is the pathfinding script that we made in that previous video again the only change I did was just swap the grid to work with XZ instead of X Y so let's duplicate this script we don't want to destroy this on their pathfinding square roots are still insanely useful so we're here on let's just duplicate this and call this the pathfinding hex XZ over here let's change the name so hex XZ and then all of these references change them so just this one and this one now swapping out the grid so let's use the grid hex XZ that we created in the previous video so just replace all these references so just find them all this one this one this one and that's it no more references now doing this requires changing over here the path node as well so let's also deploy it down so over here on the path node let's duplicate it and again just call it hex and here change all of these so the hex XZ so replace all of these references okay and for the grin this one is great hex Zen so just replace this one and this one all right that's it so now back into the pathfinding hex xn and over here instead of using this path node let's use the path node hex XZ so we just need to make sure to change all of these references so change all of them one by one just find this one find this one over here change change this one this one this one and these and a bunch more down here so change all of them and finally these ones all right great so we have no more errors here and we have swapped it to use pathfinding hex xn using the grid hex and the path node hex and here in the editor yep the scripts are compiling so everything is working correctly now let's do some quick testing over here we have a game object with a testing script and here just have a prefab reference for the square the hex and the unwalkable then on away simply instantiate the grid hex end second through it to spawn all of the original transforms and create the pathfinding and then on update and listen to a mouse click then tell the unit where to go and on right click make the position unlockable so let's swap this out for a hex grid so let's go up here instead of using the grid xn the green hex and the pathfinding swap route for the pathfinding hex let's also rename this so hex by the way the shortcut over here is control RR that's the rename shortcut which remains all of the references so rename all of those and down here the grid hex xn which is also used here and the pathfinding hex XZ okay that's it no more errors and just over here we're instantiating instead of instantiating the square let's instantiate the hex okay so we should be able to see our hex grid let's see and up here we do see our hexary okay so far so good now let's do a quick test to visualize the pathfinding so let's go to where we are getting a mouse click over here let's go into pathfinding hex X end and let's go on the function to find the PATH this takes a start form position so let's use Vector 3.0 and for the end let's use the mouse worm position okay so we do this and this returns a list of vector three so this is our path list and then let's just cycle through it and let's just do a debug.rawline on these positions so let's go into the path list on this index and let's go until the path list on the next index and just up here and let's make sure we only cycle until the path count minus one and finally color dot green and let's show this for just three seconds it's not a log but actually a draw line okay all right so we should be able to click somewhere and see a bunch of lines going from zero zero onto the mouse position let's see so here we are in Game View and now since we use debug.tronline that means we need to enable gizmos to see it so we're here on game view let's go up to the top right corner and click on gizmos to enable them and now if I click somewhere let's say I click in here and if there go it does show the path so going to path in there going to pattern there and so on okay great so we can currently see the path being calculated except of course it's not really working so the path is going through weird places so this one going in there is going through there and that is not a valent position so going in there should either go through there or through there okay so the reason why the path isn't working is because the last thing we need to change is the algorithm itself and again the only change needed is really just getting the neighbors again make sure you watch the pathfinding video if you want a quick refresh here on how the ASR pathfinding algorithm Works basically over here on the find path function we have a open list and a closed list then we second through all the nodes on the open list we check if it's a final one if not then we continue we remove that one from the open list we test all of its neighbors and so on so all we need to do is modify over here this function which Returns the neighbors of a certain node and here for the Neighbors we have the neighbors on a regular square we're in so we've got left left down left up right right down right up and so on so for example here's a diagram of a square grid so let's say we are testing this position and we're going to look for Neighbors so we're going to look on the right we're going to look on the left we're going to look up and also going to look down and then obviously on the corners so the upper left the upper right down right and down left so any Square grid we have one two three four five six seven eight neighbors whereas over here on a hex grid if we're testing out this node then the neighbors are going to be the one right the one on the left and then we're going to have one that is straight above so this one is position two two so two three is going to be straight above and T1 is going to be straight below and in this case we're also going to need to test this one and this one so in a hex grid we only have these two these two and these two so only six and not eight neighbors however the other thing which I also mentioned in the hex grade video is that the neighbors depend on whether you are working on an even row or an odd row so here on this on row you can see the ones above you see the ones with X plus zero so on the exact same X just above and you test for the ones with x minus one so that's what you do on an even row however on an odd row like for example this one if we were to test the x minus 1 we would end up testing this one above that is not the one we want we want to test this one which is X plus zero and this one which is the X plus one so we need to be extremely careful here just like we were very careful with the hex grid video so here on the get neighbor analyst function let's first test if we are in an odd row so bull for the odd row and we just grab the current node and grab the Y which is actually the Z since we're working on the X Z case but sure so we take that one then we do a module of Two And if it is one then we have an odd row if not we have an even row and then instead of all these neighbors we just asked for different ones so we've got the ones that are the same regardless of being on an odd row or an even row so you've got the x minus one so the one the left one on the right the one down and the one up and then the only difference over here if we are odd or an even row if we are in an odd row then we want to get the ones with an X plus one and if we are on an even row then we want the x minus one okay so with this all of the neighbors should be correct again make sure you don't make any mistakes here if you test the wrong neighbors then the algorithm won't work and finally there's just one more minor change which is down here when we are calculating the distance cost for a square grid we've got the difference between diagonal costs and strict costs that is because mathematically moving over here going straight to the right that is a shorter distance and going from here to here on diagonal however on a hex read we don't have that issue all of those those are all straight movements so over here we can simplify this or really just make straight costs all the way so it's never a diagonal cost however there is still one last sneaky issue here like this it's not exactly 100 correct because of the offset between the odd and even rows so over here the way we were getting our diagonal moves is the minimum between the X and the Y distance and then the straight moves are simply the remaining ones so going from 0 0 to 1 1 the minimum between those two that would be indeed one so this would be one diagonal move and then the remaining one minus one is zero so there would be Zero moves so that makes sense in a square grid going from here from zero zero to one one that is indeed just one diagonal move but if we go back here onto the hex diagram on this one if we are going from zero zero to one one then with that logic we have just one move whereas in reality over here we have two we cannot go straight like this in order to go there we need to go here and here so using the exact same cost logic that would not be correct now this is actually something that took me tons of time to figure it out and I'm still not entirely sure how to correctly calculate a Manhattan distance on a hex grid so for example getting the distance from zero zero over here to three three how do I get one two two three four and five I tried tons of approaches but there was only something wrong it needs to take into account the direction so going left and right the number of odd or even rows in between the start and the end and so on so I tried lots of things and it didn't quite work but then I realized that it's also not really necessary I don't need to know that from here to here is a certain number of moves the distance is really only used for a heuristic which is really just a guess so in order to get that guess the simple way to do is just test the actual warm distance since we already have a super easy way of converting a grid position onto a warm position so we're here when calculating the distance cost instead of this we can just use something super simple so we do effector 3 dot distance let's go into the grid system then on the grid we get the worm position get the wrong position from this starting point so a DOT X and a DOT y then call it the distance towards the B position with this we have distance so let's just multiply it by the move straight cost and since this expectation and let's just do a math F dot round to end so on all of this all right so that's it this will indeed give us a very rough distance which is all we need for the algorithm to work so let's rename this to give it a proper name so it's not the direct distance cause instead it's just a rough guess so let's rename this and let's call it the complete heuristic distance cost then I'll let you see where we're using this function and if we go up here onto the algorithm we do see that we're using it to set the H cost of going from this node onto the end node so that is correct the H cost is the heuristic cost in the algorithm but we're also using it over here for the G cost but the G cost is not meant to be heuristic it's meant to be the actual cost so this one that we use over here this one must be correct and this one is always going to be a straight move it's always a street move from the current node to the neighbor node so over here we can just put the move straight cost and just use this directly all right so that's it again the heuristic in the algorithm this is just a rough guess so that is why we don't necessarily need an extremely accurate heuristic like we did for the Manhattan distance on the Square grid system with this very rough very simple heuristic our algorithm should still be working perfectly so let's finally test so here we are and if I click over here and yup it does take the exact correct hex path I can click anywhere I want and yep it always goes straight through the hexes and never in between all dashes alright awesome now let's verify that it is indeed working by making some nodes unlockable again here in my testing script I already have that logic so I'm testing for the right Mouse button if so then I get the grid object on the mouse run position and I set it as unlockable then I also get the one position where I clicked and I instantiate the unwalkable prefab so over here I can right click let's make these positions unlockable so we're going to start from there and let's say go in there and if there go it does go over there so I can now make whatever path I want and yep there you go it always finds a path so finally here it is applied to a character so I can right click to make any notes unlockable then I can click and yep there you go the character does find the PATH and goes straight through the target position so I can go anywhere do anything and yep the character always finds a path throughout my hex grid alright great here is how the character is set up this is based on the modular character system that I covered in another video it just has this component move position hex pathfinding then this function over here receives a Target move position and an action when it reaches that position then just goes into the pathfinding columns find the PATH and gets the path Factor on list and then on update simply goes from position to position so here it is on a bigger more complex math and yep everything works I can click anywhere and the character finds a path and goes straight towards there alright awesome okay so that's it as you can see it's pretty simple to convert from grid based pathfinding into hex based pathfinding really just a few tiny changes and everything already works perfectly the algorithm is really all the same the only difference is just the neighbors now like you mentioned in the hexade video the reason why I've been researching hexes is because it's the most requests topic on my turnbased strategy course so now that I've done my research I'm currently working on writing all the lectures making a free update covering the complete conversion process if you haven't picked up the course yet then definitely give it a look I worked really hard on making it an excellent course specifically to help guide you and take your skills from beginner to Advanced so if you are interested in turnbased strategy games or really you just want to improve your programming and Game Dev skills while learning how to write good clean code then check it out and if you already have it then this hex grid update will be a completely free expansion to the course hopefully within the next few weeks alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time foreign
