With timestamps:

00:00 - in this video we're going to make a
00:01 - radar chart as commonly used in RPGs to
00:04 - display stats we're going to create a
00:06 - class to found our stats and then we're
00:07 - going to make the UI script to
00:09 - dynamically generate and update our
00:10 - radar chart let's begin
00:15 - [Music]
00:19 - hello and welcome I'm your code monkey
00:22 - and this channel is all about helping
00:23 - you will learn how to make your own
00:25 - games with in-depth tutorials made by a
00:26 - professional indie game developer so if
00:28 - you find the video helpful consider
00:30 - subscribing alright so here's what we
00:32 - want to create we have the radar chart
00:35 - element in here with our five underlying
00:37 - stats over here we can see the inner
00:40 - values our stats go from 0 to 20 and you
00:42 - can see the radar correctly this place
00:44 - those inner valence with these nice
00:46 - buttons I can test to update so as you
00:48 - can see the offense goes down and that
00:50 - edge goes down goes up and it goes up so
00:53 - as I modify you can see that the radar
00:56 - chart correctly updates to any single
00:58 - value and here we are using a mesh in
01:01 - order to dynamically draw the radar
01:03 - chart based on these underlying values
01:05 - now we're going to start off by creating
01:08 - a simple stats class and set it up to
01:10 - hold a single stat then we're going to
01:12 - create the script to represent that stat
01:14 - in the UI along with some buttons to
01:16 - test it then we're going to modify our
01:18 - script to home multiple stats after that
01:21 - we're going to learn how to create a
01:22 - mesh in the UI and display two stats as
01:25 - a simple triangle and then we're going
01:27 - to add all of the remaining stats and
01:29 - play around with the values so we won't
01:32 - be creating both the radar chart and the
01:34 - underlying nice clean stats class so if
01:37 - only we want to see is how to create the
01:39 - UI mesh then skip to the later part of
01:41 - the video alright so this is our goal
01:44 - let's get to it
01:45 - so here we are in a completely empty
01:48 - scene now let's start off by creating a
01:50 - class to home our stats so here in the
01:52 - project folder go to scripts create a
01:55 - new C sharp script and let's just call
01:57 - this stats okay here's our code now
02:00 - first we're going to get rid of mana
02:02 - behavior since this class is going to be
02:04 - extremely simple so get rid of all this
02:07 - now all we really need to store is the
02:10 - value of each stat however as always
02:12 - let's make sure that we write clean code
02:14 - so here for example your first instinct
02:16 - might be to make a bunch of simple
02:18 - public ends that would work but you
02:21 - would be exposing the values to every
02:23 - other class in your program and they
02:24 - could easily be modified outside the
02:26 - valid ranges so it would not be good
02:28 - code since it would be very easy to
02:30 - break so inside this quad
02:32 - most or all of the underlying values
02:34 - privately and only expose functions to
02:36 - modify them so in here can make a
02:38 - private int let's come out our attacks
02:40 - that and then we expose a public void
02:44 - set attack stack amount so now we have
02:51 - this function exposed in order to set
02:53 - our text at and in here we can validate
02:55 - our new amount so in this case all we
02:58 - really want is to make sure that the
03:00 - value is above a certain minimum and
03:01 - billow a certain maximum so let's store
03:04 - those minimum and maximum as constants
03:06 - so all the way up here
03:07 - a public static int for the stat min and
03:10 - let's say the mean is zero and a public
03:12 - static int for the static max which in
03:15 - this case let's put it at 20 so every
03:17 - single staff can go from 0 to 20 this
03:20 - also makes it very easy to modify so if
03:22 - you had a game with the staff max of a
03:23 - hundred you would need to just change
03:25 - this constant and everything else will
03:27 - work fine so in here we do our
03:29 - validation so just like that we are
03:35 - clamping our value between a minimum and
03:37 - a maximum all right so this should do it
03:40 - now let's make a function to return the
03:42 - current value so we are again exposing a
03:47 - public function in order to return the
03:49 - value and now we need as a constructor
03:51 - to set the starting value all right so
03:58 - far so good we have nice clean class to
04:01 - home our stat value obviously later we
04:03 - will expand it to support all the other
04:05 - stats but for now let's keep it simple
04:06 - and make everything work with a single
04:08 - stat now that we have this set up let's
04:11 - make a testing script to test our code
04:12 - so back in the editor let's make a new
04:15 - c-sharp script let's just call this
04:17 - testing and let's create a new game
04:20 - object and we simply drag our testing
04:24 - script on to it okay now over here in
04:27 - our testings group this won't indeed
04:29 - extend mana behavior and here let's go
04:32 - into our private void start and in here
04:35 - we can test our class so let's first
04:37 - instantiate our stats object
04:41 - so we aren't sentient it with ten on our
04:44 - text at amount and then let them like do
04:47 - a debug blog on our stats that get a tax
04:50 - that amount okay so everything goes well
04:53 - we should be able to see a ten in our
04:55 - console let's test and if there it is a
04:58 - ten on the console okay great
05:00 - alright so we can now create and read
05:02 - our stats class this will be the basis
05:05 - that we're going to use in order to
05:06 - display our radar chart so let's make
05:08 - our UI object so we're here let's go
05:11 - into the canvas if you don't like to
05:14 - know how the campus is set up check out
05:15 - my video on how I do my basic setup for
05:18 - the UI so here all we need to do is
05:20 - create the new game object let's call
05:23 - this the UI stats radar chart and inside
05:28 - and let's create a UI image for our
05:29 - background and if we're on the project
05:33 - folder I have this nice background here
05:38 - it is a nice radar chart with five sides
05:41 - and let's also add a nice text object
05:44 - just to be our attack text label all
05:53 - right so here's our basic visual setup
05:54 - we have a background on top of the
05:56 - background we're going to dynamically
05:58 - generate a radar chart and we're going
06:00 - to have labels on various edges to
06:02 - indicate what each edge represents now
06:05 - in order to certain things and bones out
06:07 - of the radar chart and let's start off
06:08 - with a very simple bar once we have on
06:11 - the code working with a simple bar then
06:12 - we'll work on replacing the bar with a
06:14 - radar chart mesh so over here and let's
06:16 - create a new image this won't be our bar
06:18 - let's simply put the anchor on the
06:21 - bottom put it on zero zero and make it a
06:24 - rectangle like that now just stretch it
06:28 - to occupy right there on the edge and
06:30 - just like that okay so this bar won't
06:33 - work for our testing through code all
06:36 - we're going to do is modify the scale in
06:37 - here we're going to modify the Y and
06:39 - essentially if it's a Y of one it's
06:41 - going to be right at the edge so fooling
06:43 - max out on the attack and if it's less
06:45 - than it's less so it goes from zero to
06:47 - one okay great now let's make the code
06:50 - to handle all this so in here making a
06:52 - news
06:52 - script this won't be the UI stats radar
06:56 - chart and let's just drag it onto our
06:58 - main game object okay like that all
07:01 - right so now in here let's make a
07:03 - function to receive our stats object and
07:06 - store it all right so we have our
07:17 - private stats our inner object and we
07:19 - have a public function in order to set
07:21 - the stats now let's make a function to
07:23 - update the visual and in here we're
07:27 - going to update the bar so let's see how
07:29 - we set it up in the editor in here and
07:31 - let's just rename this instead of image
07:33 - let's call it the attack bar so we're
07:36 - going to grab the reference this game
07:37 - object and we're going to modify the
07:39 - scale on the one so this is where we
07:46 - need to modify our visual which means in
07:48 - here we need to go into these stunts and
07:50 - to get the attacks at amount however we
07:53 - want to get a normalize value rather
07:54 - than the actual amount so let's add that
07:57 - to our stats class so over here let's
07:59 - make a public will return the float
08:02 - let's go get Attack stat amount
08:04 - normalize and we return our normalized
08:08 - value so really all we need is a tax
08:10 - that divided by the maximum now since
08:14 - these are two ends we need to make sure
08:16 - to convert one of them to float in order
08:18 - to get a return foot all right so that's
08:20 - it now this function will return a value
08:22 - between 0 and 1 and now we can go back
08:25 - in here and we can now use this function
08:28 - to get the value that we're going to set
08:29 - into our attack bar y-axis all right
08:32 - that's it this should do it now let's
08:34 - just update it over here
08:36 - when we set stance we update the visual
08:38 - okay so this should be working now all
08:41 - we need to do is call this function so
08:44 - let's go into our testing script and
08:46 - over here first we need a reference to
08:48 - the UI stats radar chart so let's add it
08:51 - as a serialized field for our private UI
08:54 - stats parade our chart
08:58 - and with a reference after we create our
09:02 - stats object we simply call set stats
09:04 - and we pass in our stats object okay so
09:07 - our testing starts testing it in Senshi
09:10 - it's the stats it calls set stats on our
09:12 - UI
09:13 - script and the UI script sets the
09:15 - internal stats and updates our stats
09:17 - visual based on the amount that is on
09:19 - the attack stat so over here we are
09:21 - currently with 10 out of a maximum of 20
09:23 - so our bar should be at half size yeah
09:26 - this is a serialize film so let's drag
09:28 - it in the editor over here is the
09:31 - testing game object there's our film and
09:32 - let's just drag this onto it all right
09:35 - that you do it lets test any up there it
09:38 - is our nice bar is at half size so we
09:42 - correctly have communication between our
09:43 - stats class and the UI display object
09:46 - now let's add some testing buttons to
09:48 - modify the stats amount in real time for
09:51 - land over here in the testing class for
09:54 - some testing buttons there are some on
09:55 - the code monkey utilities as long as you
09:57 - can download the utilities for free from
09:59 - in Tacoma comm utilities I have a
10:04 - function to make some nice testing
10:05 - button so let's use that I want to have
10:15 - the button to increase and want to
10:17 - decrease the stat amount right now the
10:19 - only function we have to modify is in
10:21 - order to set the amount so let's set
10:23 - some helper functions are to increase or
10:25 - decrease by 1 so we're here on the stats
10:27 - class let's make a public void called
10:31 - increase attach that amount another one
10:37 - for a decrease
10:43 - so here all we're doing is we set it to
10:46 - the current one pause one or the current
10:48 - one minus one okay right now we can use
10:50 - this functions on our button alright so
10:58 - we should have two buttons that when I
11:00 - was test increasing and decreasing our
11:02 - tax that amount now when we do that we
11:05 - need to make sure that our UI updates
11:06 - right now it's only updating when we set
11:08 - stats so since we have a mana behavior
11:11 - we can simply use our private ROI update
11:14 - and over here we just update our stats
11:17 - every frame
11:18 - all right let's test okay so here we are
11:21 - with two nice testing buttons and as you
11:23 - can see it starts off at half now let's
11:25 - increase and see if the bar increases
11:27 - and there you go it increases and let's
11:29 - see the maximum and yep it reaches
11:30 - maximum can no longer go higher
11:32 - now the - and you it goes down and
11:35 - reaches zero and there you go doesn't go
11:37 - down anymore all right awesome so we now
11:40 - have the UI correctly displaying any
11:42 - value that we have on the underlying
11:44 - stats object now there's one thing we
11:46 - can improve in here right now on our UI
11:49 - we are updating on every frame so this
11:52 - works as you can see but it is quite
11:54 - wasteful most of the times it's updating
11:56 - when the underlying stats didn't change
11:57 - at all so we are really just wasting CPU
12:00 - cycles and necessarily so let's make
12:02 - sure we only update when needed for that
12:05 - we can go into our stats class and in
12:07 - here we're going to find an event
12:08 - whenever the sets have changed so let's
12:10 - go up here in order to make a public
12:13 - event use the standard event channel and
12:18 - let's call it on stats change so we have
12:22 - this event and we're going to trigger
12:24 - this event whenever the stats change so
12:26 - in here let's fire off the event all
12:31 - right so when we call the function to
12:33 - stat it's taxed that then we fire our
12:35 - event all right so far so good
12:37 - so right now you can see another example
12:39 - of why we should write code this way
12:42 - instead of just exposing a public int if
12:44 - we did that then we would have no way of
12:46 - knowing when the value would change and
12:48 - we would be forced to update on every
12:49 - single frame but since we worked our
12:51 - code nice and clean then we have this
12:53 - function which is the only function that
12:55 - modified
12:56 - this variable so we can simply add our
12:58 - event in here and everything won't work
13:00 - perfect so now we can go back into our
13:02 - UI script and in here when we receive
13:06 - our stats and let's subscribe to our
13:08 - event so onsets changed event we
13:10 - subscribe to that and when we get that
13:13 - event then we do update our stats video
13:16 - alright and now we can get rid of it
13:18 - from the update so it won't only update
13:20 - when stats changed so let's test and
13:23 - make sure that everything still works
13:24 - exactly the same so here we are so might
13:26 - have an increase and yep there you go
13:28 - goes up and goes down okay awesome so
13:31 - you have everything working with nice
13:32 - clean code and without wasting any CPU
13:34 - cycles okay awesome
13:37 - so now that we have everything working
13:39 - with a single stat it's time to handle
13:41 - multiple stats so here back in our set
13:44 - class right now we have a value and
13:46 - various functions to modify that though
13:48 - if we were to keep this pattern then we
13:51 - would have to duplicate all these
13:52 - functions for every single satellite
13:54 - that we wanted that would work but would
13:57 - obviously result in a ton of horrible
13:59 - duplicate code so that is not the
14:01 - correct way to do it instead let's make
14:03 - a nested class that won't contain all
14:05 - the logic for a single stat so let's go
14:07 - in here we're going to make a private
14:09 - class call it single stat and this will
14:13 - represent a single stat so now
14:16 - essentially we're going to put
14:17 - everything related to this stat inside
14:19 - our single stat class and now let's
14:25 - remove all the references to the attack
14:27 - stats specifically so this is just a
14:30 - start and everything on these functions
14:32 - is just set stat amount
14:42 - all right so there you go no more
14:44 - references to our single attack stat so
14:47 - now this class will represent any type
14:48 - of stat we want and over here on our
14:50 - stats class we will instead hold an
14:52 - instance of each single stat for each
14:54 - stat type so in here let's make a
14:57 - private of type single fat and here
15:01 - we'll have our attack stat and now we
15:03 - can also have our defense stat so the
15:08 - constructor will receive the amount for
15:10 - our attack and also an end for the
15:12 - defense stat amount and now in here we
15:17 - instantiate our two variables so let's
15:20 - also make a constructor for our single
15:22 - stat class so we receive the stat amount
15:29 - and we just set it like we were doing
15:30 - previously and in here let's instantiate
15:33 - our attacks that equals a new single set
15:37 - with our attacks that amount same thing
15:40 - for the defense all right so we have
15:43 - pretty much our two objects and
15:45 - everything is nice and cleanly separated
15:48 - now we still have an issue with our
15:50 - event being inside stat instead of
15:52 - outside and we also have an issue over
15:55 - here in our UI code since this function
15:57 - no longer exists so we need to expose
16:00 - functions to modify each specific stat
16:02 - type so let's go back into our stance
16:05 - and over here let's copy pretty much
16:08 - every single one of these functions
16:14 - however in here every single one of
16:17 - these is going to receive an extra
16:18 - argument to select which that modify in
16:22 - order to define various stat types let's
16:24 - go up here in order to make a public a
16:26 - new for our stat type and in this case
16:31 - we have attack and defense now know
16:35 - these functions we're going to receive a
16:37 - stat type okay so far so good so you can
16:42 - probably see where I'm going to this now
16:44 - we just need to get the single stat that
16:47 - matches up with this type so we have a
17:00 - function which takes a standpipe and
17:02 - returns our single Stan object this is a
17:05 - private one since no one outside will
17:06 - ever deal with this and all these
17:09 - functions simply call the inner function
17:11 - on our single stat all right so that's
17:26 - it and now we can also get rid of this
17:28 - error since the event won't be called on
17:30 - our stats and not on the single staff
17:35 - now over here just like this we have one
17:37 - potential issue with our event which is
17:40 - the event is only fired if it goes
17:42 - through this one but over here we're
17:43 - going directly through the increased
17:44 - stat so we need to modify it to make
17:47 - sure that everything goes through only
17:48 - this one so on the increase instead of
17:51 - going straight into the single stat we
17:53 - go into the stat amount
18:02 - and now we can go down into this one and
18:05 - remove these two all right so our code
18:08 - is now much more simplified and
18:10 - everything looks great
18:11 - and that's it we should now have our
18:13 - code correctly working with two stats
18:15 - which we can expand to any amount and we
18:17 - would need to do is add more values into
18:19 - this and new and add more inner
18:21 - variables so let's test out our stats
18:24 - with two stats so let's first go into
18:27 - testing and in here you can see all
18:29 - these errors so that one has a ten on
18:32 - the attacks huh and let's put a two on
18:35 - the defense that let's get rid of this
18:38 - debug log over here we have these
18:41 - buttons let's add two more for testing
18:43 - out our defense all right so we have
19:01 - updated everything now we essentially
19:03 - the stats with ten on the attack and two
19:05 - on the defense and we have our buttons
19:08 - which this one increases the attack and
19:10 - this one increase the defense so as you
19:13 - can see the only thing we need to change
19:14 - is over here the type on the argument so
19:17 - let's go into the UI now here we have
19:20 - the attack bar let's get the stat amount
19:23 - normalized of type attack then we're
19:26 - going to have another bar for the
19:28 - defense and let's come out the defense
19:31 - bar now let's make it in the editor so
19:36 - we have the attack bar and let's rotate
19:38 - it and put over here this is the defense
19:41 - bar
19:58 - all right that's it so let's test and
20:01 - see if we can correctly see a bar
20:02 - showing the attacks that another one
20:04 - showing the defense that and yep here we
20:06 - are and the attack is indeed at half and
20:08 - defense almost at zero and we can use
20:10 - our nice buttons in order to increase
20:12 - and decrease the attack and also the
20:15 - defense all right so we have our two
20:18 - stats of Emily's working perfectly and
20:20 - the way we set up the code also makes it
20:22 - very easy in order to modify things to
20:24 - support many more okay awesome so now
20:27 - it's the time to finally replace our
20:29 - testing bars with a custom mesh in order
20:31 - to draw our radar so for that let's go
20:33 - into the editor and in here let's take
20:36 - our radar chart and instead of having
20:39 - these bars so let's get pregnant instead
20:43 - of the bars we're going to draw a mesh
20:45 - now in order to draw a mesh let's create
20:47 - a new empty game object let's call this
20:50 - the radar mesh and inside we're going to
20:53 - have a canvas renderer this is what we
20:57 - can use in order to render a mesh on our
20:59 - canvas
21:00 - alright so that's it for our UI setup
21:03 - now let's go into the code and grab the
21:06 - reference to this canvas renderer so
21:08 - here in the radar chart is where things
21:10 - get interesting now I've done a couple
21:12 - videos on how to create a mesh from code
21:14 - but I'll go over it again in here on the
21:17 - updates that's visual we create a new
21:20 - mesh object now a mesh is essentially
21:25 - composed of vertices UVs and triangles
21:28 - the vertices are the various points of
21:31 - our mesh the UVs define how the texture
21:34 - is shown on each vertex and the
21:36 - triangles define which vertices compose
21:38 - a triangle polygons now that might seem
21:40 - confusing but it all becomes very easy
21:42 - once you see it in action so first we
21:44 - define our arrays so an array of vector
21:47 - threes for our vertices then we have an
21:52 - array of vector tools for our UV
21:56 - and finally we have an array of pins for
21:59 - our triangles alright so these are all
22:04 - the values we need to in order to
22:05 - display our mesh now just for starters
22:08 - let's simply start with one triangle so
22:10 - for one triangle we need three vertices
22:13 - then we need as many UVs as we have
22:16 - vertices so also three and four
22:18 - triangles we're only going to spawn one
22:20 - triangle so we need three points and do
22:22 - it so three
22:23 - okay now let's set the vertices so let's
22:26 - start off with vertices set the zero
22:29 - index in order to be on a vector 3.0 so
22:33 - this will be our origin then let's put
22:36 - one right above so on zero hundred won't
22:40 - be the vertex on index one and then on
22:42 - index two let's put it above it to the
22:45 - right okay
22:47 - so these are our points for right now
22:49 - our graph won't be a solid color so we
22:51 - don't actually need to bother with our
22:53 - movies so we'll leave them all at zero
22:56 - and now let's modify our triangles
23:03 - so you have index 0 1 & 2 now over here
23:07 - we need to set the indexes for the
23:09 - vertices and the triangle polygon is
23:11 - composed of three vertices so in this
23:13 - case it's very simple we start off at
23:15 - the origin so start off on index 0 then
23:17 - we go into this one which is right above
23:20 - it so we go into index 1 and finally we
23:23 - complete our triangle by going into the
23:24 - other vertex so - so just like that we
23:28 - have our nice triangle now we upload our
23:30 - race into the mesh and that's it so we
23:36 - have successfully created our nice mesh
23:38 - now we need to display it so that's
23:41 - where the canvas renderer comes in let's
23:44 - go up here in order to grab our
23:45 - reference to the canvas renderer let's
23:54 - grab it on our awake in order to grab
23:56 - our reference okay we have our canvas
24:04 - renderer and reference so now we can go
24:06 - down here and all we need to do is call
24:08 - set mesh and press in our new mesh
24:13 - alright so the canvas renderer now has
24:15 - our mesh in order to see it we also need
24:18 - to pass in a material so we need to call
24:22 - the function set material over here as
24:24 - you can see we need a material so let's
24:28 - go up here to make a serialize field for
24:31 - a material
24:37 - and this material is what we're going to
24:39 - use in here and for now let's set the
24:42 - texture into no all right so that's it
24:46 - our triangle should now be visible in
24:48 - our u1 let's just drag our material so
24:53 - in here let's create a new material
24:55 - let's call this the radar material and
25:00 - in here let's modify the shader in order
25:03 - to use the UI default and let's tint it
25:07 - in nice green okay like that
25:09 - so back in here and let's drag the
25:11 - reference to our material and let's
25:13 - Destin everything should work and if
25:16 - there it is we have our nice triangle
25:17 - being drawn in our it you want so if we
25:20 - pause we can go and see that it is
25:22 - indeed being drawn right in here on this
25:24 - object and we can move it around and
25:26 - there it is we have a nice triangle mesh
25:29 - being drawn directly onto our UI so
25:34 - we're here as you can see this point up
25:35 - here is indeed on 0 100 and this one
25:38 - here is need on a hundred a hundred ok
25:41 - so we now know how to draw a simple
25:43 - triangle using a custom mesh on the UI
25:45 - now let's use the values from our stats
25:48 - in order to set the two points in our
25:50 - triangle so let's go in here in order to
25:52 - define our correct vertex ease so let's
25:56 - say the vector three for our attack
25:58 - vertex this one goes straight up so
26:02 - let's use vector three dot o and now we
26:05 - multiply it by a certain radar chart
26:07 - size so we can go here in the editor
26:10 - in order to test out so there it is
26:12 - that's the origin on zero zero and the
26:14 - total size of the radar and let's put it
26:16 - up there and it's about 145 okay so
26:20 - let's define here a quote for the radar
26:22 - chart size and let's put it at 145 so
26:28 - here the attack vertex won't be pointing
26:30 - upwards by our radar chart size
26:33 - multiplied by our stats not get stats
26:36 - amount normalize of our attack step
26:42 - all right so that's it we have the
26:45 - correct position for our attack vertex
26:47 - let's also put an int or the attack to
26:50 - vertex index and this won't be on index
26:53 - one so in here let's just set our attack
26:58 - vertex in there just to make sure that
26:59 - everything works let's see okay here we
27:02 - are and there is that point is indeed at
27:04 - half of the size so let's increase it
27:05 - and there you go the triangle correctly
27:07 - updates goes up and it goes down okay
27:10 - awesome
27:10 - so now let's also update our defense
27:13 - vertex now to keep things simple let's
27:15 - first do it just horizontally so one
27:17 - ninety degree angle so we need the
27:19 - effector three for the defense vertex in
27:22 - this case let's go to the right and we
27:25 - do pretty much the same map setting here
27:28 - our defense let's also define a defense
27:33 - vertex index this is just to help us
27:35 - keep our code nice and readable so the
27:39 - attack vertex is down one defense is
27:42 - down and defense vertex so using these
27:49 - variables helps us make sure that our
27:51 - triangles are correct so our triangle
27:53 - starts off at the origin then goes
27:55 - towards the attack vertex and then goes
27:57 - towards the defense vertex and that
27:59 - makes our tracker right so we have a
28:01 - triangle pointing up and went to the
28:02 - right showing the attack and the defense
28:04 - let's see any of their it is and the
28:07 - attack is indeed a half and the
28:08 - difference also in there so we can
28:10 - increase the attack increase defense and
28:12 - if there it is awesome we have our
28:13 - triangle nicely updated okay awesome so
28:18 - far so good so this is looking great
28:20 - right now however we want to display
28:23 - five stats so the defense isn't supposed
28:25 - to be shown at a ninety degree angle but
28:27 - rather at an angle that makes for our
28:29 - five sides so let's go to the code and
28:31 - in here let's first calculate that angle
28:34 - so we are going to call it our angle
28:36 - increment which will be three sixteen
28:39 - divided by five sides
28:44 - and I mean here we can apply this angle
28:47 - based on our vector so in here the
28:50 - attack vertex is pointing upwards now
28:52 - let's apply the rotation so we going to
28:54 - eternium Euler 0 and the X 0 on the Y
28:59 - and we only modify these egg
29:00 - and now the Zed won't be our angle
29:02 - increment multiply it by the index that
29:05 - is on the increment so this one is on 0
29:09 - so here what we're doing is essentially
29:12 - applying a rotation on to our upwards
29:14 - vector so the attack will be rotated on
29:18 - 0 however the one on the defense can be
29:22 - rotated by an index of 1 so this might
29:26 - seem confusing but it all makes sense
29:27 - once you see the code in action so
29:30 - everything else stay the same and now
29:31 - let's see if it does follow the right
29:33 - corner for our five sided polygon and if
29:36 - there it is it is indeed working however
29:38 - the angle is inverted but the correct
29:40 - thing is working so as you increase the
29:42 - defense as you can see it goes straight
29:43 - along that line and the attack goes
29:45 - straight along that one so I just
29:47 - reverse it seen here instead of going
29:50 - positive on the angle let's go on the
29:52 - negative and there it is and everything
29:55 - looks awesome so we increase the defense
29:57 - and our radar chart doesn't need
29:59 - increase up to a maximum and up to a
30:01 - maximum there is our nice perfect
30:03 - triangle awesome okay so at this point
30:06 - we have pretty much everything done all
30:08 - we need to do is add the remaining stats
30:10 - so let's go back into our steps class
30:12 - and over here let's add all of them so
30:15 - it's that speed mana and finally health
30:18 - so we just add them on to our enemies
30:21 - and also in here and on the constructor
30:27 - we receive all our starring bones
30:35 - and the last thing we need is over here
30:38 - on our nice switch all right so that's
30:54 - it we should be able to have our stats
30:56 - class correctly holding every single one
30:59 - of our stat types so now let the
31:01 - remaining labels over here in the editor
31:12 - alright so there it is our nice labels
31:15 - now we just need to go into our UI
31:18 - script and over here we add the
31:21 - remaining vertices now in here the
31:24 - tricky thing will be the size of our
31:26 - arrays for the vertices it's very easy
31:28 - we have five points plus the origin so
31:31 - we have six vertices for the UVs must be
31:34 - the same size the vertices so also a six
31:36 - and now for the triangles now remember
31:39 - each triangle requires three vertices so
31:42 - in this case we're going to display our
31:44 - five stats with five triangles so we
31:46 - need three times five triangles
31:49 - okay so let's test again to make sure
31:51 - that our first trying only stone correct
31:53 - in order to do that we just need to go
31:55 - into testing and add all the remaining
31:57 - ones okay let's test here we are and yep
32:03 - our initial triangles still works
32:05 - okay now let's add the next triangle
32:08 - first we define the vertex and the index
32:12 - so the next one is a spin
32:19 - and here we increment the angle by one
32:22 - more so this one is 2 and the speed
32:24 - won't be on vertex index 3 so here we
32:29 - need another triangle so let's copy all
32:31 - these three positions now this won't be
32:33 - on index 3 4 & 5 now the first point
32:37 - will be the origin so sorry fat 0 yep
32:39 - then we go into our defense and then we
32:41 - go into these feed vertex so that's how
32:44 - we make our second triangle and just
32:47 - like that we should be able to see the
32:48 - speed and our radar chart and if there
32:50 - it is we have three points let's
32:52 - increase defense and if there you go
32:53 - difference goes up and the speed is in
32:56 - there at about five and the attack goes
32:58 - up and yep awesome all right so we are
33:00 - currently displaying our three values in
33:02 - our radar chart now let's have the
33:05 - remaining two
33:24 - all right so here it is all of our
33:26 - valance all I did was these new
33:29 - variables and increase the angle
33:32 - increment on each of them as well as the
33:34 - index then we define all six indexes and
33:38 - finally all the triangles as you can see
33:41 - the final triangle connects the origin
33:43 - on to the health vertex and on to the
33:45 - attack vertex the final one so let's
33:48 - test any of there it is our five stats
33:51 - are now being this point in our nice
33:53 - radar chart all right so at this point
33:56 - pretty much everything is working and
33:59 - here we have our nice testing buttons
34:01 - and let's increase the speed and see if
34:02 - now it increases and if there you go it
34:04 - increases the manner yep just like that
34:06 - and the help just like that let's put
34:08 - them all at the maximum and if there you
34:10 - go they own occupy the background
34:12 - perfectly increase and yep they're
34:15 - awesome all right so now we can punch
34:18 - this up a bit by adding our UVs now the
34:21 - UV defines what point in the texture
34:23 - course points that to vertex so we're
34:26 - here I have a nice gradient line it's a
34:29 - very simple tiny texture so essentially
34:32 - the origin will be on the left side not
34:34 - the other points on the right side so
34:36 - over here in our radar chart code let's
34:42 - go in here to set up the UV
34:54 - now in here for the origin will be on
34:56 - the left side so we can simply put it on
34:58 - factor 2.0 and for the others we could
35:02 - for example make a UV where each vertex
35:04 - would have a different color so the
35:06 - attack would be in red defense and polio
35:08 - and so on we could do that with UV but
35:10 - in this case and let's make them all the
35:12 - same color and just use the gradient
35:13 - from left to right so on these and let's
35:15 - simply put vector e 2.1 in order to
35:18 - stretch to the right side all right so
35:24 - that's it that's our UVs now since we're
35:27 - adding the UV we also need to go up here
35:30 - on our radar canvass mesh renderer as
35:34 - you can see in here we're passing the
35:36 - material and let's also pass our texture
35:37 - so up here let's make another serialize
35:40 - field this will be the texture 2d for
35:43 - our radar texture now we're going to use
35:49 - that at the same place that we use our
35:51 - material so in here let's just drag the
35:54 - gradient line all right awesome let's
35:56 - see how it looks and if there it is now
35:58 - we have our nice texture being applied
36:00 - as you can see at the edge we have our
36:02 - white border and darker on the inside
36:05 - and we can increase it to the maximum
36:09 - and just like that there's our nice
36:11 - final texture being applied into our
36:14 - radar chart okay so this is pretty much
36:16 - our completed element let's just add
36:19 - some polish
37:54 - all right so here we have our nice radar
37:57 - chart displaying all of our stats and
37:59 - some nice buttons to play around with we
38:01 - can see the internal values we can
38:03 - increase and decrease we can randomize
38:07 - and there you go their own very nice and
38:09 - random and just a fun nice little
38:11 - animation the code to display our radar
38:14 - chart is completely separate from our
38:16 - inner stats class so our code is nice
38:19 - and clean and we could easily modify
38:21 - this to add as many stats as we need so
38:24 - you can use this in any game where you
38:25 - would like to display some stats or you
38:28 - can just use the underlying stats class
38:29 - which has been very carefully
38:31 - constructed so that's it and this is our
38:34 - very nice final effect as always you can
38:37 - download the project files in utilities
38:38 - from indycar Montcalm if you liked the
38:41 - video subscribe to the channel for more
38:42 - ent tutorials post any questions you
38:44 - have in the comments and I'll do my best
38:46 - internal write see you next time
38:48 - [Music]

Cleaned transcript:

in this video we're going to make a radar chart as commonly used in RPGs to display stats we're going to create a class to found our stats and then we're going to make the UI script to dynamically generate and update our radar chart let's begin hello and welcome I'm your code monkey and this channel is all about helping you will learn how to make your own games with indepth tutorials made by a professional indie game developer so if you find the video helpful consider subscribing alright so here's what we want to create we have the radar chart element in here with our five underlying stats over here we can see the inner values our stats go from 0 to 20 and you can see the radar correctly this place those inner valence with these nice buttons I can test to update so as you can see the offense goes down and that edge goes down goes up and it goes up so as I modify you can see that the radar chart correctly updates to any single value and here we are using a mesh in order to dynamically draw the radar chart based on these underlying values now we're going to start off by creating a simple stats class and set it up to hold a single stat then we're going to create the script to represent that stat in the UI along with some buttons to test it then we're going to modify our script to home multiple stats after that we're going to learn how to create a mesh in the UI and display two stats as a simple triangle and then we're going to add all of the remaining stats and play around with the values so we won't be creating both the radar chart and the underlying nice clean stats class so if only we want to see is how to create the UI mesh then skip to the later part of the video alright so this is our goal let's get to it so here we are in a completely empty scene now let's start off by creating a class to home our stats so here in the project folder go to scripts create a new C sharp script and let's just call this stats okay here's our code now first we're going to get rid of mana behavior since this class is going to be extremely simple so get rid of all this now all we really need to store is the value of each stat however as always let's make sure that we write clean code so here for example your first instinct might be to make a bunch of simple public ends that would work but you would be exposing the values to every other class in your program and they could easily be modified outside the valid ranges so it would not be good code since it would be very easy to break so inside this quad most or all of the underlying values privately and only expose functions to modify them so in here can make a private int let's come out our attacks that and then we expose a public void set attack stack amount so now we have this function exposed in order to set our text at and in here we can validate our new amount so in this case all we really want is to make sure that the value is above a certain minimum and billow a certain maximum so let's store those minimum and maximum as constants so all the way up here a public static int for the stat min and let's say the mean is zero and a public static int for the static max which in this case let's put it at 20 so every single staff can go from 0 to 20 this also makes it very easy to modify so if you had a game with the staff max of a hundred you would need to just change this constant and everything else will work fine so in here we do our validation so just like that we are clamping our value between a minimum and a maximum all right so this should do it now let's make a function to return the current value so we are again exposing a public function in order to return the value and now we need as a constructor to set the starting value all right so far so good we have nice clean class to home our stat value obviously later we will expand it to support all the other stats but for now let's keep it simple and make everything work with a single stat now that we have this set up let's make a testing script to test our code so back in the editor let's make a new csharp script let's just call this testing and let's create a new game object and we simply drag our testing script on to it okay now over here in our testings group this won't indeed extend mana behavior and here let's go into our private void start and in here we can test our class so let's first instantiate our stats object so we aren't sentient it with ten on our text at amount and then let them like do a debug blog on our stats that get a tax that amount okay so everything goes well we should be able to see a ten in our console let's test and if there it is a ten on the console okay great alright so we can now create and read our stats class this will be the basis that we're going to use in order to display our radar chart so let's make our UI object so we're here let's go into the canvas if you don't like to know how the campus is set up check out my video on how I do my basic setup for the UI so here all we need to do is create the new game object let's call this the UI stats radar chart and inside and let's create a UI image for our background and if we're on the project folder I have this nice background here it is a nice radar chart with five sides and let's also add a nice text object just to be our attack text label all right so here's our basic visual setup we have a background on top of the background we're going to dynamically generate a radar chart and we're going to have labels on various edges to indicate what each edge represents now in order to certain things and bones out of the radar chart and let's start off with a very simple bar once we have on the code working with a simple bar then we'll work on replacing the bar with a radar chart mesh so over here and let's create a new image this won't be our bar let's simply put the anchor on the bottom put it on zero zero and make it a rectangle like that now just stretch it to occupy right there on the edge and just like that okay so this bar won't work for our testing through code all we're going to do is modify the scale in here we're going to modify the Y and essentially if it's a Y of one it's going to be right at the edge so fooling max out on the attack and if it's less than it's less so it goes from zero to one okay great now let's make the code to handle all this so in here making a news script this won't be the UI stats radar chart and let's just drag it onto our main game object okay like that all right so now in here let's make a function to receive our stats object and store it all right so we have our private stats our inner object and we have a public function in order to set the stats now let's make a function to update the visual and in here we're going to update the bar so let's see how we set it up in the editor in here and let's just rename this instead of image let's call it the attack bar so we're going to grab the reference this game object and we're going to modify the scale on the one so this is where we need to modify our visual which means in here we need to go into these stunts and to get the attacks at amount however we want to get a normalize value rather than the actual amount so let's add that to our stats class so over here let's make a public will return the float let's go get Attack stat amount normalize and we return our normalized value so really all we need is a tax that divided by the maximum now since these are two ends we need to make sure to convert one of them to float in order to get a return foot all right so that's it now this function will return a value between 0 and 1 and now we can go back in here and we can now use this function to get the value that we're going to set into our attack bar yaxis all right that's it this should do it now let's just update it over here when we set stance we update the visual okay so this should be working now all we need to do is call this function so let's go into our testing script and over here first we need a reference to the UI stats radar chart so let's add it as a serialized field for our private UI stats parade our chart and with a reference after we create our stats object we simply call set stats and we pass in our stats object okay so our testing starts testing it in Senshi it's the stats it calls set stats on our UI script and the UI script sets the internal stats and updates our stats visual based on the amount that is on the attack stat so over here we are currently with 10 out of a maximum of 20 so our bar should be at half size yeah this is a serialize film so let's drag it in the editor over here is the testing game object there's our film and let's just drag this onto it all right that you do it lets test any up there it is our nice bar is at half size so we correctly have communication between our stats class and the UI display object now let's add some testing buttons to modify the stats amount in real time for land over here in the testing class for some testing buttons there are some on the code monkey utilities as long as you can download the utilities for free from in Tacoma comm utilities I have a function to make some nice testing button so let's use that I want to have the button to increase and want to decrease the stat amount right now the only function we have to modify is in order to set the amount so let's set some helper functions are to increase or decrease by 1 so we're here on the stats class let's make a public void called increase attach that amount another one for a decrease so here all we're doing is we set it to the current one pause one or the current one minus one okay right now we can use this functions on our button alright so we should have two buttons that when I was test increasing and decreasing our tax that amount now when we do that we need to make sure that our UI updates right now it's only updating when we set stats so since we have a mana behavior we can simply use our private ROI update and over here we just update our stats every frame all right let's test okay so here we are with two nice testing buttons and as you can see it starts off at half now let's increase and see if the bar increases and there you go it increases and let's see the maximum and yep it reaches maximum can no longer go higher now the and you it goes down and reaches zero and there you go doesn't go down anymore all right awesome so we now have the UI correctly displaying any value that we have on the underlying stats object now there's one thing we can improve in here right now on our UI we are updating on every frame so this works as you can see but it is quite wasteful most of the times it's updating when the underlying stats didn't change at all so we are really just wasting CPU cycles and necessarily so let's make sure we only update when needed for that we can go into our stats class and in here we're going to find an event whenever the sets have changed so let's go up here in order to make a public event use the standard event channel and let's call it on stats change so we have this event and we're going to trigger this event whenever the stats change so in here let's fire off the event all right so when we call the function to stat it's taxed that then we fire our event all right so far so good so right now you can see another example of why we should write code this way instead of just exposing a public int if we did that then we would have no way of knowing when the value would change and we would be forced to update on every single frame but since we worked our code nice and clean then we have this function which is the only function that modified this variable so we can simply add our event in here and everything won't work perfect so now we can go back into our UI script and in here when we receive our stats and let's subscribe to our event so onsets changed event we subscribe to that and when we get that event then we do update our stats video alright and now we can get rid of it from the update so it won't only update when stats changed so let's test and make sure that everything still works exactly the same so here we are so might have an increase and yep there you go goes up and goes down okay awesome so you have everything working with nice clean code and without wasting any CPU cycles okay awesome so now that we have everything working with a single stat it's time to handle multiple stats so here back in our set class right now we have a value and various functions to modify that though if we were to keep this pattern then we would have to duplicate all these functions for every single satellite that we wanted that would work but would obviously result in a ton of horrible duplicate code so that is not the correct way to do it instead let's make a nested class that won't contain all the logic for a single stat so let's go in here we're going to make a private class call it single stat and this will represent a single stat so now essentially we're going to put everything related to this stat inside our single stat class and now let's remove all the references to the attack stats specifically so this is just a start and everything on these functions is just set stat amount all right so there you go no more references to our single attack stat so now this class will represent any type of stat we want and over here on our stats class we will instead hold an instance of each single stat for each stat type so in here let's make a private of type single fat and here we'll have our attack stat and now we can also have our defense stat so the constructor will receive the amount for our attack and also an end for the defense stat amount and now in here we instantiate our two variables so let's also make a constructor for our single stat class so we receive the stat amount and we just set it like we were doing previously and in here let's instantiate our attacks that equals a new single set with our attacks that amount same thing for the defense all right so we have pretty much our two objects and everything is nice and cleanly separated now we still have an issue with our event being inside stat instead of outside and we also have an issue over here in our UI code since this function no longer exists so we need to expose functions to modify each specific stat type so let's go back into our stance and over here let's copy pretty much every single one of these functions however in here every single one of these is going to receive an extra argument to select which that modify in order to define various stat types let's go up here in order to make a public a new for our stat type and in this case we have attack and defense now know these functions we're going to receive a stat type okay so far so good so you can probably see where I'm going to this now we just need to get the single stat that matches up with this type so we have a function which takes a standpipe and returns our single Stan object this is a private one since no one outside will ever deal with this and all these functions simply call the inner function on our single stat all right so that's it and now we can also get rid of this error since the event won't be called on our stats and not on the single staff now over here just like this we have one potential issue with our event which is the event is only fired if it goes through this one but over here we're going directly through the increased stat so we need to modify it to make sure that everything goes through only this one so on the increase instead of going straight into the single stat we go into the stat amount and now we can go down into this one and remove these two all right so our code is now much more simplified and everything looks great and that's it we should now have our code correctly working with two stats which we can expand to any amount and we would need to do is add more values into this and new and add more inner variables so let's test out our stats with two stats so let's first go into testing and in here you can see all these errors so that one has a ten on the attacks huh and let's put a two on the defense that let's get rid of this debug log over here we have these buttons let's add two more for testing out our defense all right so we have updated everything now we essentially the stats with ten on the attack and two on the defense and we have our buttons which this one increases the attack and this one increase the defense so as you can see the only thing we need to change is over here the type on the argument so let's go into the UI now here we have the attack bar let's get the stat amount normalized of type attack then we're going to have another bar for the defense and let's come out the defense bar now let's make it in the editor so we have the attack bar and let's rotate it and put over here this is the defense bar all right that's it so let's test and see if we can correctly see a bar showing the attacks that another one showing the defense that and yep here we are and the attack is indeed at half and defense almost at zero and we can use our nice buttons in order to increase and decrease the attack and also the defense all right so we have our two stats of Emily's working perfectly and the way we set up the code also makes it very easy in order to modify things to support many more okay awesome so now it's the time to finally replace our testing bars with a custom mesh in order to draw our radar so for that let's go into the editor and in here let's take our radar chart and instead of having these bars so let's get pregnant instead of the bars we're going to draw a mesh now in order to draw a mesh let's create a new empty game object let's call this the radar mesh and inside we're going to have a canvas renderer this is what we can use in order to render a mesh on our canvas alright so that's it for our UI setup now let's go into the code and grab the reference to this canvas renderer so here in the radar chart is where things get interesting now I've done a couple videos on how to create a mesh from code but I'll go over it again in here on the updates that's visual we create a new mesh object now a mesh is essentially composed of vertices UVs and triangles the vertices are the various points of our mesh the UVs define how the texture is shown on each vertex and the triangles define which vertices compose a triangle polygons now that might seem confusing but it all becomes very easy once you see it in action so first we define our arrays so an array of vector threes for our vertices then we have an array of vector tools for our UV and finally we have an array of pins for our triangles alright so these are all the values we need to in order to display our mesh now just for starters let's simply start with one triangle so for one triangle we need three vertices then we need as many UVs as we have vertices so also three and four triangles we're only going to spawn one triangle so we need three points and do it so three okay now let's set the vertices so let's start off with vertices set the zero index in order to be on a vector 3.0 so this will be our origin then let's put one right above so on zero hundred won't be the vertex on index one and then on index two let's put it above it to the right okay so these are our points for right now our graph won't be a solid color so we don't actually need to bother with our movies so we'll leave them all at zero and now let's modify our triangles so you have index 0 1 & 2 now over here we need to set the indexes for the vertices and the triangle polygon is composed of three vertices so in this case it's very simple we start off at the origin so start off on index 0 then we go into this one which is right above it so we go into index 1 and finally we complete our triangle by going into the other vertex so so just like that we have our nice triangle now we upload our race into the mesh and that's it so we have successfully created our nice mesh now we need to display it so that's where the canvas renderer comes in let's go up here in order to grab our reference to the canvas renderer let's grab it on our awake in order to grab our reference okay we have our canvas renderer and reference so now we can go down here and all we need to do is call set mesh and press in our new mesh alright so the canvas renderer now has our mesh in order to see it we also need to pass in a material so we need to call the function set material over here as you can see we need a material so let's go up here to make a serialize field for a material and this material is what we're going to use in here and for now let's set the texture into no all right so that's it our triangle should now be visible in our u1 let's just drag our material so in here let's create a new material let's call this the radar material and in here let's modify the shader in order to use the UI default and let's tint it in nice green okay like that so back in here and let's drag the reference to our material and let's Destin everything should work and if there it is we have our nice triangle being drawn in our it you want so if we pause we can go and see that it is indeed being drawn right in here on this object and we can move it around and there it is we have a nice triangle mesh being drawn directly onto our UI so we're here as you can see this point up here is indeed on 0 100 and this one here is need on a hundred a hundred ok so we now know how to draw a simple triangle using a custom mesh on the UI now let's use the values from our stats in order to set the two points in our triangle so let's go in here in order to define our correct vertex ease so let's say the vector three for our attack vertex this one goes straight up so let's use vector three dot o and now we multiply it by a certain radar chart size so we can go here in the editor in order to test out so there it is that's the origin on zero zero and the total size of the radar and let's put it up there and it's about 145 okay so let's define here a quote for the radar chart size and let's put it at 145 so here the attack vertex won't be pointing upwards by our radar chart size multiplied by our stats not get stats amount normalize of our attack step all right so that's it we have the correct position for our attack vertex let's also put an int or the attack to vertex index and this won't be on index one so in here let's just set our attack vertex in there just to make sure that everything works let's see okay here we are and there is that point is indeed at half of the size so let's increase it and there you go the triangle correctly updates goes up and it goes down okay awesome so now let's also update our defense vertex now to keep things simple let's first do it just horizontally so one ninety degree angle so we need the effector three for the defense vertex in this case let's go to the right and we do pretty much the same map setting here our defense let's also define a defense vertex index this is just to help us keep our code nice and readable so the attack vertex is down one defense is down and defense vertex so using these variables helps us make sure that our triangles are correct so our triangle starts off at the origin then goes towards the attack vertex and then goes towards the defense vertex and that makes our tracker right so we have a triangle pointing up and went to the right showing the attack and the defense let's see any of their it is and the attack is indeed a half and the difference also in there so we can increase the attack increase defense and if there it is awesome we have our triangle nicely updated okay awesome so far so good so this is looking great right now however we want to display five stats so the defense isn't supposed to be shown at a ninety degree angle but rather at an angle that makes for our five sides so let's go to the code and in here let's first calculate that angle so we are going to call it our angle increment which will be three sixteen divided by five sides and I mean here we can apply this angle based on our vector so in here the attack vertex is pointing upwards now let's apply the rotation so we going to eternium Euler 0 and the X 0 on the Y and we only modify these egg and now the Zed won't be our angle increment multiply it by the index that is on the increment so this one is on 0 so here what we're doing is essentially applying a rotation on to our upwards vector so the attack will be rotated on 0 however the one on the defense can be rotated by an index of 1 so this might seem confusing but it all makes sense once you see the code in action so everything else stay the same and now let's see if it does follow the right corner for our five sided polygon and if there it is it is indeed working however the angle is inverted but the correct thing is working so as you increase the defense as you can see it goes straight along that line and the attack goes straight along that one so I just reverse it seen here instead of going positive on the angle let's go on the negative and there it is and everything looks awesome so we increase the defense and our radar chart doesn't need increase up to a maximum and up to a maximum there is our nice perfect triangle awesome okay so at this point we have pretty much everything done all we need to do is add the remaining stats so let's go back into our steps class and over here let's add all of them so it's that speed mana and finally health so we just add them on to our enemies and also in here and on the constructor we receive all our starring bones and the last thing we need is over here on our nice switch all right so that's it we should be able to have our stats class correctly holding every single one of our stat types so now let the remaining labels over here in the editor alright so there it is our nice labels now we just need to go into our UI script and over here we add the remaining vertices now in here the tricky thing will be the size of our arrays for the vertices it's very easy we have five points plus the origin so we have six vertices for the UVs must be the same size the vertices so also a six and now for the triangles now remember each triangle requires three vertices so in this case we're going to display our five stats with five triangles so we need three times five triangles okay so let's test again to make sure that our first trying only stone correct in order to do that we just need to go into testing and add all the remaining ones okay let's test here we are and yep our initial triangles still works okay now let's add the next triangle first we define the vertex and the index so the next one is a spin and here we increment the angle by one more so this one is 2 and the speed won't be on vertex index 3 so here we need another triangle so let's copy all these three positions now this won't be on index 3 4 & 5 now the first point will be the origin so sorry fat 0 yep then we go into our defense and then we go into these feed vertex so that's how we make our second triangle and just like that we should be able to see the speed and our radar chart and if there it is we have three points let's increase defense and if there you go difference goes up and the speed is in there at about five and the attack goes up and yep awesome all right so we are currently displaying our three values in our radar chart now let's have the remaining two all right so here it is all of our valance all I did was these new variables and increase the angle increment on each of them as well as the index then we define all six indexes and finally all the triangles as you can see the final triangle connects the origin on to the health vertex and on to the attack vertex the final one so let's test any of there it is our five stats are now being this point in our nice radar chart all right so at this point pretty much everything is working and here we have our nice testing buttons and let's increase the speed and see if now it increases and if there you go it increases the manner yep just like that and the help just like that let's put them all at the maximum and if there you go they own occupy the background perfectly increase and yep they're awesome all right so now we can punch this up a bit by adding our UVs now the UV defines what point in the texture course points that to vertex so we're here I have a nice gradient line it's a very simple tiny texture so essentially the origin will be on the left side not the other points on the right side so over here in our radar chart code let's go in here to set up the UV now in here for the origin will be on the left side so we can simply put it on factor 2.0 and for the others we could for example make a UV where each vertex would have a different color so the attack would be in red defense and polio and so on we could do that with UV but in this case and let's make them all the same color and just use the gradient from left to right so on these and let's simply put vector e 2.1 in order to stretch to the right side all right so that's it that's our UVs now since we're adding the UV we also need to go up here on our radar canvass mesh renderer as you can see in here we're passing the material and let's also pass our texture so up here let's make another serialize field this will be the texture 2d for our radar texture now we're going to use that at the same place that we use our material so in here let's just drag the gradient line all right awesome let's see how it looks and if there it is now we have our nice texture being applied as you can see at the edge we have our white border and darker on the inside and we can increase it to the maximum and just like that there's our nice final texture being applied into our radar chart okay so this is pretty much our completed element let's just add some polish all right so here we have our nice radar chart displaying all of our stats and some nice buttons to play around with we can see the internal values we can increase and decrease we can randomize and there you go their own very nice and random and just a fun nice little animation the code to display our radar chart is completely separate from our inner stats class so our code is nice and clean and we could easily modify this to add as many stats as we need so you can use this in any game where you would like to display some stats or you can just use the underlying stats class which has been very carefully constructed so that's it and this is our very nice final effect as always you can download the project files in utilities from indycar Montcalm if you liked the video subscribe to the channel for more ent tutorials post any questions you have in the comments and I'll do my best internal write see you next time
