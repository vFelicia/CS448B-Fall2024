With timestamps:

00:00 - hello and welcome I'm your code monkey
00:02 - and in this video we're going to convert
00:03 - a caller into a hexadecimal string and
00:05 - back let's get started
00:10 - so here's my scene I have a game object
00:12 - in here with a sprite renderer
00:14 - displaying a white square and I have a
00:16 - game handler script running which has a
00:19 - reference to my sprite game object now
00:21 - in here I want to change the sprite
00:22 - caller into red so the way to do it is
00:25 - first of all grab the reference to the
00:26 - sprite renderer which is on the sprite
00:29 - game object getcomponent
00:31 - sprite renderer and then I go into the
00:35 - sprite renderer and set the color to a
00:37 - new color red green blue so 1 0 0 so the
00:42 - sprite should now be red
00:43 - yep there you go the sprite change the
00:45 - color to red so this works but I'm used
00:48 - to dealing with colors in hexadecimal
00:50 - values so I would prefer instead to be
00:52 - able to write something like ff0000 that
00:55 - to me is much more simple than using 1 0
00:57 - 0 so let's make some functions to create
01:00 - a color object with a hexadecimal string
01:02 - so first we need to convert a string
01:05 - into the corresponding decimal number to
01:07 - do that we can use a function in the
01:10 - system namespace dot convert and the way
01:13 - to and 32 of a hexadecimal value so
01:18 - let's convert FF from base 16 and this
01:22 - will give me a decimal integer so let's
01:27 - do a debug log and see what this says
01:31 - all right as you can see in the input it
01:33 - says 255 which is correct F F equals 255
01:37 - all right so let's make this into a
01:39 - function so a private in hex to death
01:44 - and here I'm going to receive a string
01:46 - for the hexadecimal and I'm going to
01:48 - return this
01:51 - so convert the hexadecimal string into a
01:54 - decimal value now let's make another
01:56 - function to do the reverse so a private
02:00 - string that's 2 hex and in here I'm
02:04 - going to receive an int for each decimal
02:06 - value in order to convert back we can
02:08 - simply use to string with a format so
02:11 - return value to string and the format
02:15 - we're going to use is x2 which converts
02:18 - it to a hexadecimal representation with
02:21 - always two digits so let's go up here
02:24 - and test so do a debug log of doing hex
02:28 - to deaths of ffs and then a dead 2 hex
02:35 - of 255 alright so this one should print
02:39 - 255 and this one should print FF let's
02:41 - see
02:42 - and yep there it is 255 FF okay so we
02:45 - can now easily convert from a
02:47 - hexadecimal string into a decimal number
02:49 - now the commerce trout works with the
02:51 - normalized value and not with 255 so
02:54 - let's make two more functions to work
02:56 - with normalized balance so in here make
02:59 - a private string flute normalized to hex
03:02 - and here we're going to receive a float
03:06 - value so this function will receive a
03:09 - float between 0 and 1 to return the
03:11 - correct hex value let's multiply that
03:13 - normalize value by 255 and then use the
03:16 - previous function so we're going to
03:18 - return that's two tanks of the value x
03:23 - 255 F and do a math after round two ends
03:29 - so in here we're going to receive a
03:31 - value between 0 and 1 then we're going
03:33 - to multiply it by 255 so if we get a 1
03:36 - in here then we're going to have a 255
03:38 - in here we're going to round that number
03:41 - to an integer and then send it to this
03:43 - function to return the hexadecimal
03:45 - representation of that number all right
03:47 - now let's do the opposite function so a
03:49 - private float text to quote normalized
03:53 - and here I'm going to receive a string
03:56 - for the hexadecimal representation and
03:59 - I'm going to return in here you convert
04:03 - text to a decimal of this one so as you
04:07 - know this one will return between 0 and
04:09 - 255 so we have to do is divide this by
04:12 - 255 F so the return value of this won't
04:16 - be from 0 to 1 so let's test in here so
04:23 - in here this one should output 1 and
04:25 - this one should output FF so let's see
04:28 - give there you go 1 + FF all right so
04:31 - now we have all the helper functions to
04:33 - help us convert a hexadecimal string
04:35 - into various values that we
04:37 - can use in our collar struct so let's
04:40 - finally make a function to return a
04:41 - color object make a private color get
04:45 - color from string and in here we're
04:49 - going to receive a string for our text
04:51 - string and we're going to have a float
04:55 - for each color so float red is going to
04:59 - be a text to float normalized of the red
05:04 - portion of this string
05:05 - now this string will be a complete
05:07 - hexadecimal string so it won't have as
05:09 - you can see up here two values for the
05:12 - red two for the green and you for the
05:14 - blue so we only want to grab the first
05:16 - two characters of this string in order
05:18 - to do that go into the hex string and do
05:21 - a substring starting on index zero and
05:24 - going for a length of two so in here if
05:27 - this receives ff0000 then in here it
05:30 - will return FF so now let's do the same
05:33 - for the other color so you got red you
05:36 - got green and you got blue now red
05:40 - starts on zero and has two characters
05:42 - green starts on two and has two
05:45 - characters and blue starts on four and
05:47 - has two characters so we now have found
05:49 - three values in here that convert this
05:51 - hex string into normalized values all we
05:54 - need to do is finally do a return new
05:57 - color and use red green and blue all
06:02 - right so now up here we can remove the
06:05 - comments from here and instead of making
06:07 - a new color let's do get come word from
06:10 - string and give it at first FF 0 0 so
06:14 - from red and foam green should display
06:16 - yellow let's see all right there you go
06:18 - R square is yellow ok great so now let's
06:21 - make the reverse of this function so a
06:24 - private string you can get string from
06:27 - color and we're going to receive a
06:30 - caller in here we're going to grab the
06:32 - hexadecimal string from each color so
06:34 - strange red won't be float normalized to
06:38 - hex of color dot R which is the red
06:41 - value and it the same thing for the
06:44 - other caller so green and
06:46 - whoo all right so now these variables
06:51 - contain the hexadecimal values of that
06:53 - caller so for example red contains F F
06:56 - and blue contains zero zero so all we
06:59 - need to do now is return a string which
07:02 - is red for this green plus blue the plus
07:05 - concatenate strings so if red is FF and
07:08 - green is zero zero this will return FF 0
07:11 - 0 all right so let's go up here and test
07:13 - firstly to get color from string FF FF 0
07:17 - 0 and here get string from color I'm
07:22 - going to give it the same color which is
07:24 - 1 1 0 so we should be able to see both
07:27 - representations of yellow and yep as you
07:30 - can see here are the two representations
07:32 - of yellow you can see it's got one the
07:35 - red one the green and 0 in the blue and
07:37 - here same thing ffff 0 0 all right so
07:40 - now the only thing left to add is alpha
07:42 - support as you can see in here the Alpha
07:44 - is 1 since we didn't touch it
07:46 - so in here on get confirm string will
07:48 - receive a string in here we need to test
07:51 - to make sure that this string contains
07:52 - an alpha value so in here we're going to
07:55 - do if Tex string length is bigger than 8
08:00 - if it does have 8 characters then it
08:03 - does have an alpha value so if it does
08:06 - have then we want to use that so we want
08:08 - to do alpha equals of the hex string
08:12 - starting on 6 but if it does not contain
08:15 - that then we want alpha to be a default
08:17 - 1f and down here let's return the alpha
08:21 - velm
08:21 - so this function supports receiving a
08:24 - string there is only six characters so
08:25 - it only contains red green and blue but
08:28 - also supports a character so it supports
08:30 - alpha and down here on get string from
08:33 - color let's add an optional parameter
08:35 - for grabbing the Alpha or not so let's
08:37 - say boom use alpha let's make it
08:40 - optional so set the default two phones
08:42 - and here if we are not using alpha then
08:46 - return what we were returning previously
08:49 - but if we are returning the Alpha we're
08:52 - going to return red green plus blue plus
08:54 - alpha and we are going to grab the Alpha
08:58 - value
08:59 - on cholerae all right so let's go up
09:01 - here and set the sprite to
09:03 - half-transparent so let's give it
09:05 - 88 on the alpha and do the same thing in
09:08 - here 88 and 0.5 F on the alpha so this
09:13 - fright should now be yellow and half
09:14 - transparent yep there you go it is in
09:16 - yellow you can see the transparency is
09:18 - about half you can see that 188 equals
09:22 - 0.53 and here it still says only the
09:26 - three color values since we didn't set
09:28 - the optional parameter so let's try that
09:31 - and here's that use alpha to true and
09:33 - now it should say yes there you go ffff
09:36 - zero zero eight zero so there you have
09:38 - it in this video we'll learn how to
09:40 - convert hexadecimal strings into color
09:42 - objects so we can easily use color
09:44 - strings in our code if you have any
09:46 - questions post them in the comments and
09:48 - I'll do my best to answer them subscribe
09:50 - for more videos and I'll see you next
09:51 - time

Cleaned transcript:

hello and welcome I'm your code monkey and in this video we're going to convert a caller into a hexadecimal string and back let's get started so here's my scene I have a game object in here with a sprite renderer displaying a white square and I have a game handler script running which has a reference to my sprite game object now in here I want to change the sprite caller into red so the way to do it is first of all grab the reference to the sprite renderer which is on the sprite game object getcomponent sprite renderer and then I go into the sprite renderer and set the color to a new color red green blue so 1 0 0 so the sprite should now be red yep there you go the sprite change the color to red so this works but I'm used to dealing with colors in hexadecimal values so I would prefer instead to be able to write something like ff0000 that to me is much more simple than using 1 0 0 so let's make some functions to create a color object with a hexadecimal string so first we need to convert a string into the corresponding decimal number to do that we can use a function in the system namespace dot convert and the way to and 32 of a hexadecimal value so let's convert FF from base 16 and this will give me a decimal integer so let's do a debug log and see what this says all right as you can see in the input it says 255 which is correct F F equals 255 all right so let's make this into a function so a private in hex to death and here I'm going to receive a string for the hexadecimal and I'm going to return this so convert the hexadecimal string into a decimal value now let's make another function to do the reverse so a private string that's 2 hex and in here I'm going to receive an int for each decimal value in order to convert back we can simply use to string with a format so return value to string and the format we're going to use is x2 which converts it to a hexadecimal representation with always two digits so let's go up here and test so do a debug log of doing hex to deaths of ffs and then a dead 2 hex of 255 alright so this one should print 255 and this one should print FF let's see and yep there it is 255 FF okay so we can now easily convert from a hexadecimal string into a decimal number now the commerce trout works with the normalized value and not with 255 so let's make two more functions to work with normalized balance so in here make a private string flute normalized to hex and here we're going to receive a float value so this function will receive a float between 0 and 1 to return the correct hex value let's multiply that normalize value by 255 and then use the previous function so we're going to return that's two tanks of the value x 255 F and do a math after round two ends so in here we're going to receive a value between 0 and 1 then we're going to multiply it by 255 so if we get a 1 in here then we're going to have a 255 in here we're going to round that number to an integer and then send it to this function to return the hexadecimal representation of that number all right now let's do the opposite function so a private float text to quote normalized and here I'm going to receive a string for the hexadecimal representation and I'm going to return in here you convert text to a decimal of this one so as you know this one will return between 0 and 255 so we have to do is divide this by 255 F so the return value of this won't be from 0 to 1 so let's test in here so in here this one should output 1 and this one should output FF so let's see give there you go 1 + FF all right so now we have all the helper functions to help us convert a hexadecimal string into various values that we can use in our collar struct so let's finally make a function to return a color object make a private color get color from string and in here we're going to receive a string for our text string and we're going to have a float for each color so float red is going to be a text to float normalized of the red portion of this string now this string will be a complete hexadecimal string so it won't have as you can see up here two values for the red two for the green and you for the blue so we only want to grab the first two characters of this string in order to do that go into the hex string and do a substring starting on index zero and going for a length of two so in here if this receives ff0000 then in here it will return FF so now let's do the same for the other color so you got red you got green and you got blue now red starts on zero and has two characters green starts on two and has two characters and blue starts on four and has two characters so we now have found three values in here that convert this hex string into normalized values all we need to do is finally do a return new color and use red green and blue all right so now up here we can remove the comments from here and instead of making a new color let's do get come word from string and give it at first FF 0 0 so from red and foam green should display yellow let's see all right there you go R square is yellow ok great so now let's make the reverse of this function so a private string you can get string from color and we're going to receive a caller in here we're going to grab the hexadecimal string from each color so strange red won't be float normalized to hex of color dot R which is the red value and it the same thing for the other caller so green and whoo all right so now these variables contain the hexadecimal values of that caller so for example red contains F F and blue contains zero zero so all we need to do now is return a string which is red for this green plus blue the plus concatenate strings so if red is FF and green is zero zero this will return FF 0 0 all right so let's go up here and test firstly to get color from string FF FF 0 0 and here get string from color I'm going to give it the same color which is 1 1 0 so we should be able to see both representations of yellow and yep as you can see here are the two representations of yellow you can see it's got one the red one the green and 0 in the blue and here same thing ffff 0 0 all right so now the only thing left to add is alpha support as you can see in here the Alpha is 1 since we didn't touch it so in here on get confirm string will receive a string in here we need to test to make sure that this string contains an alpha value so in here we're going to do if Tex string length is bigger than 8 if it does have 8 characters then it does have an alpha value so if it does have then we want to use that so we want to do alpha equals of the hex string starting on 6 but if it does not contain that then we want alpha to be a default 1f and down here let's return the alpha velm so this function supports receiving a string there is only six characters so it only contains red green and blue but also supports a character so it supports alpha and down here on get string from color let's add an optional parameter for grabbing the Alpha or not so let's say boom use alpha let's make it optional so set the default two phones and here if we are not using alpha then return what we were returning previously but if we are returning the Alpha we're going to return red green plus blue plus alpha and we are going to grab the Alpha value on cholerae all right so let's go up here and set the sprite to halftransparent so let's give it 88 on the alpha and do the same thing in here 88 and 0.5 F on the alpha so this fright should now be yellow and half transparent yep there you go it is in yellow you can see the transparency is about half you can see that 188 equals 0.53 and here it still says only the three color values since we didn't set the optional parameter so let's try that and here's that use alpha to true and now it should say yes there you go ffff zero zero eight zero so there you have it in this video we'll learn how to convert hexadecimal strings into color objects so we can easily use color strings in our code if you have any questions post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time
