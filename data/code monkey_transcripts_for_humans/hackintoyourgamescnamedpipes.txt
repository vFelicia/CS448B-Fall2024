With timestamps:

00:00 - hello and welcome i'm your code monkey
00:02 - and what i'm covering in this video is
00:03 - some really exciting stuff that has tons
00:05 - of potential use cases
00:07 - essentially you can make your games like
00:08 - normal and then make a second unity
00:10 - window which hacks into the first one
00:12 - and interacts with your main window to
00:13 - do whatever you want to do
00:15 - in my case i use this in order to have a
00:17 - main unity application running in my
00:19 - primary monitor
00:20 - and a second one on the second monitor
00:22 - controlling the first one
00:23 - so let me tell you the story about why i
00:25 - needed to research this
00:26 - a couple of weeks ago i started live
00:28 - streaming progress on the mini games
00:30 - that i was working on
00:31 - it's been interesting to work alongside
00:32 - chat so i definitely would like to make
00:34 - them more regular
00:35 - and in order to make this a more regular
00:37 - thing i went researching live streams in
00:38 - general
00:39 - one of the awesome things that i found
00:41 - out was something called stream avatars
00:43 - it lets viewers have a visual character
00:45 - walking on screen i thought that looked
00:47 - fun
00:47 - and then i also remembered that i
00:49 - already did the research towards
00:50 - creating a transparent unt window
00:52 - i even made a phone tutorial about it a
00:54 - while ago essentially you can make unity
00:57 - as a transparent overlay on top of the
00:58 - desktop so one of the demos that i
01:00 - showcased was making an assistant that
01:02 - would tell me jokes
01:03 - kind of like those characters that were
01:04 - so popular in the 90s like bunty buddy
01:07 - so with that i very easily made my own
01:09 - version of stream avatars i just have my
01:11 - characters using my animation system and
01:13 - all the sprites that i've used in my
01:14 - various steam games
01:16 - then i connected them to youtube live
01:17 - chat which was something i also
01:19 - researched two years ago when i first
01:21 - attempted the live chat game
01:22 - put them all together and i had
01:24 - characters joining from chat and seeing
01:25 - things on top of my desktop window
01:28 - but then of course came a huge issue
01:30 - with this everything works
01:31 - but if this was meant to be used
01:33 - alongside chat then naturally i needed
01:35 - some way to control it
01:36 - with the internet being the internet it
01:38 - was guaranteed that someone would try to
01:39 - say something inappropriate
01:40 - and i didn't want that to show on the
01:42 - live stream automatically so i needed
01:44 - some way
01:44 - some method of controlling things to
01:46 - manage the main window
01:47 - but at the same time this is an overlay
01:49 - the live stream is showing on my main
01:51 - monitor
01:52 - meaning that i cannot have the control
01:53 - window also on the main monitor
01:55 - so that's what led me down this rabbit
01:57 - hole of making a second unt window that
01:59 - controlled the first one and that i
02:00 - could place that one on the second
02:02 - monitor
02:02 - that way i could live stream normally
02:04 - and add whatever data or control options
02:06 - that i want in that secondary window
02:08 - for example i have a list of characters
02:10 - that are live and i can manually remove
02:12 - any of them
02:13 - i can also make the chat bubbles be
02:14 - based on approval so essentially they
02:16 - only show up on the main monitor after i
02:18 - accept them
02:18 - then i also have some simple buttons for
02:20 - hiding the characters showing
02:22 - a background or disabling or enabling
02:24 - the on top
02:25 - so that's what i use this for but you
02:26 - can really do anything with this method
02:28 - it's a two-way communication between two
02:30 - instances
02:31 - what data you communicate is really up
02:33 - to you you can use it for example to
02:35 - have your game running on the main
02:36 - window and then
02:37 - a second unity instance displaying some
02:39 - extra data like maybe performance or
02:41 - stats
02:42 - so it's very useful for testing or you
02:44 - can even use this without the main
02:45 - window being a unity game
02:47 - this is just using some basic c sharp
02:49 - classes so if you have some sort of app
02:51 - made in c sharp then you can use unity
02:52 - to visualize whatever that you want to
02:54 - transfer
02:55 - so this really has tons of potential use
02:57 - cases now getting all of this to work
02:59 - was actually very difficult
03:00 - so that's really why i'm making this
03:02 - video honestly i'm not sure how many
03:04 - people
03:04 - are interested in this topic since it's
03:06 - such a niche specific thing
03:08 - so this video is kind of for my own
03:10 - personal use this way i have this method
03:12 - documented just in case i forget
03:13 - something and i want to revisit it
03:15 - sometime in the future
03:16 - so the main thing is communication
03:18 - between two separate instances
03:20 - and from my research i found two methods
03:22 - that you can use to make this
03:23 - you can use a tcp tunnel to communicate
03:26 - between both instances
03:27 - or you can use something that c-sharp
03:29 - has which are named pipes
03:31 - during my research i encountered someone
03:33 - mentioning how they use tcp but the
03:35 - connection was always being dropped due
03:37 - to sending too much data
03:38 - i'm not sure what is the amount of too
03:40 - much data but i didn't want to bother
03:42 - with having to compress
03:43 - data and i didn't need it for it to be
03:45 - over the internet so i went with the
03:47 - named pipes approach
03:48 - figuring it all out was quite tricky but
03:50 - in the end everything is working and
03:51 - it's quite simple and works perfectly
03:53 - alright so here i am on my empty project
03:56 - i have a simple game object with an
03:57 - empty script
03:58 - so on this one this is meant to be my
04:00 - server so let's begin by making a
04:02 - function to actually start
04:04 - listening now the reason why i'm naming
04:08 - this server thread is because we're
04:09 - going to need to run this code on a
04:11 - separate thread
04:12 - in order to make a thread first we need
04:13 - to add using system.threading
04:17 - and then we can do a basic private void
04:20 - start
04:20 - and on start we're going to start off
04:22 - the new thread so let's make a thread
04:24 - name it the server read
04:26 - thread and make a new thread and pass in
04:28 - the server thread
04:31 - okay so this creates a thread and then
04:33 - just server read thread dot start
04:36 - so this will start running this function
04:37 - on a separate thread
04:39 - and now the first thing that we're going
04:40 - to do in here is create the server pipe
04:42 - now the class that we need is inside
04:44 - using system.io.pipes
04:48 - the class name is the named pi server
04:50 - stream
04:54 - and this one first takes a name
04:58 - and then a certain pipe direction
05:02 - okay here it is now based on the name
05:04 - that i use here and on the pipe
05:06 - direction you can tell this is a read
05:07 - pipe
05:08 - actually on the pipe direction you can
05:10 - make it both read and
05:11 - write so in and out however when you set
05:14 - it up like that the communication has to
05:16 - be
05:17 - one type at a time meaning that either
05:19 - you're reading or writing
05:20 - if you use a single pipe you cannot be
05:22 - reading waiting for input
05:24 - and writing something else at the same
05:25 - time so that's why here i set it up with
05:27 - a pipe just for reading and then later
05:29 - i'm going to make another one just for
05:30 - writing
05:31 - that way we're always ready for both
05:33 - reading and writing now on the server
05:35 - the first thing we need to do is wait
05:36 - for a client to connect
05:38 - so just go into the name pipe and call
05:41 - wait for connection
05:43 - so this is why you need to run this on a
05:44 - separate thread essentially this line
05:46 - won't block the code execution until a
05:48 - client connects
05:49 - and just one note here which is the
05:51 - pipes themselves they also have async
05:54 - versions of the methods so you can use
05:55 - them if you prefer to work with async
05:57 - and await
05:58 - but here i will be using the synchronous
06:00 - method simply because i find it simpler
06:02 - now after this line runs then
06:03 - essentially here we've got
06:05 - the client has connected
06:10 - so once the client has connected then
06:12 - it's time to start listening
06:13 - now for sending and receiving data we
06:15 - need some sort of data stream
06:17 - and for that on the official c-sharp
06:19 - examples they have this nice stream
06:21 - reader class
06:22 - so you go ahead and copy that over here
06:25 - then we just need to add some using
06:26 - statements
06:30 - serious system system io and system text
06:32 - and all the errors are done okay
06:34 - so we have this nice stream string this
06:36 - is a pretty simple class essentially
06:38 - it's got two methods one for reading a
06:40 - string and one for writing a string
06:41 - so up here we just need to use this
06:47 - so we just use it and send in the pipe
06:49 - and now let's read a message
06:56 - so we go into the stream we call read
06:58 - string and once again this won't block
07:00 - the code execution until message
07:02 - is received and then just doing a debug
07:04 - log okay
07:05 - so just with this code we already have
07:07 - enough to do a test
07:09 - then after we read the message let's
07:11 - just do the pipe and close our pipe
07:13 - so name pipe and we're going to call
07:15 - close
07:16 - okay this is the simplest thing that we
07:18 - have okay so that's pretty much it for
07:20 - our server
07:21 - it's set up to open the pipe it listens
07:23 - to connections when a client connects
07:25 - it listens to a message then it prints
07:28 - out the message and closes the pipe
07:30 - so now it's time to handle the client so
07:32 - here i have another empty project
07:34 - this will be our client now the logic
07:37 - here is going to be very similar so
07:38 - first we make our function
07:43 - then we need to start the thread
07:54 - so we start the thread and then here we
07:56 - create our pipe and in this case the
07:58 - class name is the name pipe client
08:00 - stream
08:01 - now the first parameter is the server
08:03 - name
08:04 - so this can be a remote computer that
08:06 - you want to connect to or in this case
08:08 - we want to connect on the local computer
08:10 - so just put a dot then for the pipe name
08:16 - and finally for the pipe direction
08:19 - and again this one is just a right pipe
08:22 - then afterwards instead of waiting for a
08:23 - connection we just actually connect
08:30 - okay so the client is connected and the
08:32 - way we set up our demo the server then
08:34 - expects a message so let's send one
08:36 - we're going to reuse the same stream
08:38 - class
08:43 - okay i've got the same stream class now
08:45 - just created
08:48 - in this case we just go in there and we
08:51 - write onto our stream
08:56 - and afterwards close the pipe okay so
08:58 - that's it as you can see pretty simple
09:01 - so if we test like this everything
09:02 - should be working now the one thing that
09:04 - we need to make sure that this test does
09:06 - work is we need to run the
09:08 - server first if we run the client first
09:10 - then essentially this line will fail
09:12 - and it won't try to reconnect so i've
09:13 - got my both unt
09:15 - instances so let's start off the server
09:17 - okay the server is waiting now start off
09:19 - the client
09:20 - and yep there you go and you see that
09:22 - everything did indeed working
09:23 - so the client has connected so the
09:25 - client connected and then the server
09:27 - received a message from the client
09:29 - all right awesome so here we have the
09:31 - absolute basics working
09:32 - the server starts listening then the
09:34 - client connects the client says
09:35 - something the server receives it and
09:36 - they both quit
09:37 - so everything else is really just
09:39 - building upon this now there's actually
09:41 - still one massive issue remaining that
09:42 - won't break this when we try to make a
09:44 - proper build instead of running in the
09:45 - editor
09:46 - but before i cover that issue let's
09:48 - quickly look at the final code
09:50 - in my live chat characters project and
09:52 - by the way
09:53 - if you find the video helpful consider
09:54 - subscribing and hitting the like button
09:56 - it really helps out the channel so here
09:58 - is my final server
10:00 - now as i mentioned there is a separate
10:02 - thread one for reading and one for
10:03 - writing
10:04 - then i also got a bunch of external
10:06 - logic in order to make the code thread
10:07 - safe
10:08 - so i'm not going to go into too much
10:09 - detail on how multi-threading works
10:11 - just know that in order to access unity
10:13 - specific things like game objects and
10:15 - transforms you need the code to be
10:17 - running on the main thread
10:18 - so that's why over here i am working
10:20 - with some cues so i've got a read cue
10:22 - and a write queue
10:22 - as well as a read lock and a right lock
10:25 - and then for those cues then i've got a
10:27 - simple function that i'm running on the
10:28 - main thread
10:29 - and this one simply goes into the req
10:31 - and dequeues and reads the command
10:33 - so over here on the read thread we do
10:35 - the same things that we just saw
10:37 - so create the pipe wait for the
10:38 - connection create the stream string
10:41 - then we read something when we do read
10:43 - something then we use our unlock in
10:44 - order to make things thread
10:46 - safe then we enqueue our message then
10:48 - just make it sleep so this doesn't run
10:50 - non-stop
10:51 - and this is always on a while through
10:53 - and then also just catching some
10:55 - exception just making sure that it
10:56 - doesn't crash when there's some issue
10:58 - and then the right method down here is
11:00 - working pretty much exactly the same way
11:01 - create a new pipe wait for the
11:02 - connection
11:03 - create the stream get the lock dequeue
11:06 - from the queue
11:07 - and actually send it so this as you saw
11:09 - is sending just pretty much
11:11 - normal text so for encoding the contents
11:14 - of the messages i'm essentially just
11:15 - using json
11:16 - so i've got this function which takes in
11:18 - just a string for the message
11:20 - it creates a pipe command which is
11:21 - really just a structure to hold some
11:23 - data
11:24 - so i've got that and then i simply
11:25 - convert that into json and when i read
11:27 - the messages convert it back into json
11:29 - if you're not familiar with json i
11:30 - covered that in a previous video
11:32 - it's just a very simple way to encode
11:34 - some data so that's pretty much all it
11:36 - is and then over here just a function to
11:38 - destroy itself
11:39 - so this one runs on a mono behavior on
11:41 - destroy and all it does is just aborts
11:43 - the threads
11:44 - now avoiding a threat like this is
11:45 - actually something that you should not
11:47 - do
11:47 - however i really could not find any
11:49 - other way to stop the pipes
11:51 - once they start reading they cannot stop
11:53 - reading until it receives something
11:54 - so this is not the ideal method but i
11:56 - really couldn't find any other solution
11:58 - and this does work
11:59 - all right so this is the server code so
12:01 - as you can see it's just expanding upon
12:03 - what we saw
12:04 - and then over here is the client which
12:05 - works pretty much exactly in the same
12:07 - way so separate for reading separate for
12:09 - writing
12:10 - the main difference from what he saw is
12:12 - over here essentially getting it to try
12:14 - to reconnect
12:15 - so if it is not connected then it tries
12:17 - to connect
12:18 - if the connection fails then wait one
12:19 - second and try again
12:21 - so that's pretty much it then here the
12:22 - same thing reading into a queue and then
12:24 - for writing
12:25 - same thing writing from the queue and
12:27 - sending the message using json and so on
12:30 - now as i said there's still one massive
12:32 - issue remaining that drove me crazy for
12:33 - many hours
12:34 - as we saw in the demo everything is
12:36 - working perfectly fine we have the
12:37 - server
12:38 - and client talking to each other however
12:40 - if instead of running this in the editor
12:41 - you make a build that's when everything
12:43 - breaks
12:44 - you won't see an error related to how
12:46 - named pipe server stream is not
12:47 - implemented this is a very weird bug
12:49 - however after a lot of searching i
12:51 - finally managed to make it work
12:52 - i even posted on the thread that i found
12:54 - while googling so the solution was
12:55 - mainly to compile it as a 32-bit
12:58 - executable
12:58 - for some reason that one has server
13:00 - implemented while the 64-bit does not
13:03 - so on the server just make sure that you
13:05 - go into the build settings
13:07 - and over here instead of x86 64 just x86
13:10 - which is 32 bits
13:12 - then i'm also using mono and api.net 4.x
13:15 - on the client i didn't have any issues
13:17 - so i just ran on my standard parameters
13:19 - and with that everything is working both
13:20 - in the editor as well as in the
13:22 - standalone builds you can create a pipe
13:23 - to communicate between two instances and
13:25 - you can pass through any data that you
13:27 - want
13:27 - so in my case i use it to create my main
13:29 - window showing all the chat characters
13:31 - and a second window to moderate and
13:33 - control the first one
13:34 - if you have some sort of app made in c
13:36 - sharp then you can use unity to
13:37 - visualize whatever that you want
13:39 - maybe you have a normal console app like
13:41 - a website scraper and you want to
13:43 - visualize some graphs and charts
13:45 - or just really for game testing play a
13:47 - normal build with your game and connect
13:48 - to it to display some debug data or a
13:50 - bunch of sad to help you balance levels
13:52 - and weapons
13:53 - unity is a game engine which makes it
13:54 - perfect for making complex
13:55 - visualizations
13:56 - so this really has tons of potential use
13:58 - cases alright so this was a unique video
14:01 - on a pretty obscure topic but i hope it
14:03 - helps someone
14:04 - as always you can download the project
14:05 - files and utilities from
14:06 - unitycodemonk.com if you found this
14:08 - video helpful consider liking and
14:09 - subscribing
14:10 - this video is made possible thanks to
14:11 - these awesome supporters
14:13 - go to patreon.com unitycodemonkey to get
14:16 - some perks and help keep the videos free
14:17 - for everyone
14:18 - post any questions you have in the
14:19 - comments and i'll see you next time
14:31 - you

Cleaned transcript:

hello and welcome i'm your code monkey and what i'm covering in this video is some really exciting stuff that has tons of potential use cases essentially you can make your games like normal and then make a second unity window which hacks into the first one and interacts with your main window to do whatever you want to do in my case i use this in order to have a main unity application running in my primary monitor and a second one on the second monitor controlling the first one so let me tell you the story about why i needed to research this a couple of weeks ago i started live streaming progress on the mini games that i was working on it's been interesting to work alongside chat so i definitely would like to make them more regular and in order to make this a more regular thing i went researching live streams in general one of the awesome things that i found out was something called stream avatars it lets viewers have a visual character walking on screen i thought that looked fun and then i also remembered that i already did the research towards creating a transparent unt window i even made a phone tutorial about it a while ago essentially you can make unity as a transparent overlay on top of the desktop so one of the demos that i showcased was making an assistant that would tell me jokes kind of like those characters that were so popular in the 90s like bunty buddy so with that i very easily made my own version of stream avatars i just have my characters using my animation system and all the sprites that i've used in my various steam games then i connected them to youtube live chat which was something i also researched two years ago when i first attempted the live chat game put them all together and i had characters joining from chat and seeing things on top of my desktop window but then of course came a huge issue with this everything works but if this was meant to be used alongside chat then naturally i needed some way to control it with the internet being the internet it was guaranteed that someone would try to say something inappropriate and i didn't want that to show on the live stream automatically so i needed some way some method of controlling things to manage the main window but at the same time this is an overlay the live stream is showing on my main monitor meaning that i cannot have the control window also on the main monitor so that's what led me down this rabbit hole of making a second unt window that controlled the first one and that i could place that one on the second monitor that way i could live stream normally and add whatever data or control options that i want in that secondary window for example i have a list of characters that are live and i can manually remove any of them i can also make the chat bubbles be based on approval so essentially they only show up on the main monitor after i accept them then i also have some simple buttons for hiding the characters showing a background or disabling or enabling the on top so that's what i use this for but you can really do anything with this method it's a twoway communication between two instances what data you communicate is really up to you you can use it for example to have your game running on the main window and then a second unity instance displaying some extra data like maybe performance or stats so it's very useful for testing or you can even use this without the main window being a unity game this is just using some basic c sharp classes so if you have some sort of app made in c sharp then you can use unity to visualize whatever that you want to transfer so this really has tons of potential use cases now getting all of this to work was actually very difficult so that's really why i'm making this video honestly i'm not sure how many people are interested in this topic since it's such a niche specific thing so this video is kind of for my own personal use this way i have this method documented just in case i forget something and i want to revisit it sometime in the future so the main thing is communication between two separate instances and from my research i found two methods that you can use to make this you can use a tcp tunnel to communicate between both instances or you can use something that csharp has which are named pipes during my research i encountered someone mentioning how they use tcp but the connection was always being dropped due to sending too much data i'm not sure what is the amount of too much data but i didn't want to bother with having to compress data and i didn't need it for it to be over the internet so i went with the named pipes approach figuring it all out was quite tricky but in the end everything is working and it's quite simple and works perfectly alright so here i am on my empty project i have a simple game object with an empty script so on this one this is meant to be my server so let's begin by making a function to actually start listening now the reason why i'm naming this server thread is because we're going to need to run this code on a separate thread in order to make a thread first we need to add using system.threading and then we can do a basic private void start and on start we're going to start off the new thread so let's make a thread name it the server read thread and make a new thread and pass in the server thread okay so this creates a thread and then just server read thread dot start so this will start running this function on a separate thread and now the first thing that we're going to do in here is create the server pipe now the class that we need is inside using system.io.pipes the class name is the named pi server stream and this one first takes a name and then a certain pipe direction okay here it is now based on the name that i use here and on the pipe direction you can tell this is a read pipe actually on the pipe direction you can make it both read and write so in and out however when you set it up like that the communication has to be one type at a time meaning that either you're reading or writing if you use a single pipe you cannot be reading waiting for input and writing something else at the same time so that's why here i set it up with a pipe just for reading and then later i'm going to make another one just for writing that way we're always ready for both reading and writing now on the server the first thing we need to do is wait for a client to connect so just go into the name pipe and call wait for connection so this is why you need to run this on a separate thread essentially this line won't block the code execution until a client connects and just one note here which is the pipes themselves they also have async versions of the methods so you can use them if you prefer to work with async and await but here i will be using the synchronous method simply because i find it simpler now after this line runs then essentially here we've got the client has connected so once the client has connected then it's time to start listening now for sending and receiving data we need some sort of data stream and for that on the official csharp examples they have this nice stream reader class so you go ahead and copy that over here then we just need to add some using statements serious system system io and system text and all the errors are done okay so we have this nice stream string this is a pretty simple class essentially it's got two methods one for reading a string and one for writing a string so up here we just need to use this so we just use it and send in the pipe and now let's read a message so we go into the stream we call read string and once again this won't block the code execution until message is received and then just doing a debug log okay so just with this code we already have enough to do a test then after we read the message let's just do the pipe and close our pipe so name pipe and we're going to call close okay this is the simplest thing that we have okay so that's pretty much it for our server it's set up to open the pipe it listens to connections when a client connects it listens to a message then it prints out the message and closes the pipe so now it's time to handle the client so here i have another empty project this will be our client now the logic here is going to be very similar so first we make our function then we need to start the thread so we start the thread and then here we create our pipe and in this case the class name is the name pipe client stream now the first parameter is the server name so this can be a remote computer that you want to connect to or in this case we want to connect on the local computer so just put a dot then for the pipe name and finally for the pipe direction and again this one is just a right pipe then afterwards instead of waiting for a connection we just actually connect okay so the client is connected and the way we set up our demo the server then expects a message so let's send one we're going to reuse the same stream class okay i've got the same stream class now just created in this case we just go in there and we write onto our stream and afterwards close the pipe okay so that's it as you can see pretty simple so if we test like this everything should be working now the one thing that we need to make sure that this test does work is we need to run the server first if we run the client first then essentially this line will fail and it won't try to reconnect so i've got my both unt instances so let's start off the server okay the server is waiting now start off the client and yep there you go and you see that everything did indeed working so the client has connected so the client connected and then the server received a message from the client all right awesome so here we have the absolute basics working the server starts listening then the client connects the client says something the server receives it and they both quit so everything else is really just building upon this now there's actually still one massive issue remaining that won't break this when we try to make a proper build instead of running in the editor but before i cover that issue let's quickly look at the final code in my live chat characters project and by the way if you find the video helpful consider subscribing and hitting the like button it really helps out the channel so here is my final server now as i mentioned there is a separate thread one for reading and one for writing then i also got a bunch of external logic in order to make the code thread safe so i'm not going to go into too much detail on how multithreading works just know that in order to access unity specific things like game objects and transforms you need the code to be running on the main thread so that's why over here i am working with some cues so i've got a read cue and a write queue as well as a read lock and a right lock and then for those cues then i've got a simple function that i'm running on the main thread and this one simply goes into the req and dequeues and reads the command so over here on the read thread we do the same things that we just saw so create the pipe wait for the connection create the stream string then we read something when we do read something then we use our unlock in order to make things thread safe then we enqueue our message then just make it sleep so this doesn't run nonstop and this is always on a while through and then also just catching some exception just making sure that it doesn't crash when there's some issue and then the right method down here is working pretty much exactly the same way create a new pipe wait for the connection create the stream get the lock dequeue from the queue and actually send it so this as you saw is sending just pretty much normal text so for encoding the contents of the messages i'm essentially just using json so i've got this function which takes in just a string for the message it creates a pipe command which is really just a structure to hold some data so i've got that and then i simply convert that into json and when i read the messages convert it back into json if you're not familiar with json i covered that in a previous video it's just a very simple way to encode some data so that's pretty much all it is and then over here just a function to destroy itself so this one runs on a mono behavior on destroy and all it does is just aborts the threads now avoiding a threat like this is actually something that you should not do however i really could not find any other way to stop the pipes once they start reading they cannot stop reading until it receives something so this is not the ideal method but i really couldn't find any other solution and this does work all right so this is the server code so as you can see it's just expanding upon what we saw and then over here is the client which works pretty much exactly in the same way so separate for reading separate for writing the main difference from what he saw is over here essentially getting it to try to reconnect so if it is not connected then it tries to connect if the connection fails then wait one second and try again so that's pretty much it then here the same thing reading into a queue and then for writing same thing writing from the queue and sending the message using json and so on now as i said there's still one massive issue remaining that drove me crazy for many hours as we saw in the demo everything is working perfectly fine we have the server and client talking to each other however if instead of running this in the editor you make a build that's when everything breaks you won't see an error related to how named pipe server stream is not implemented this is a very weird bug however after a lot of searching i finally managed to make it work i even posted on the thread that i found while googling so the solution was mainly to compile it as a 32bit executable for some reason that one has server implemented while the 64bit does not so on the server just make sure that you go into the build settings and over here instead of x86 64 just x86 which is 32 bits then i'm also using mono and api.net 4.x on the client i didn't have any issues so i just ran on my standard parameters and with that everything is working both in the editor as well as in the standalone builds you can create a pipe to communicate between two instances and you can pass through any data that you want so in my case i use it to create my main window showing all the chat characters and a second window to moderate and control the first one if you have some sort of app made in c sharp then you can use unity to visualize whatever that you want maybe you have a normal console app like a website scraper and you want to visualize some graphs and charts or just really for game testing play a normal build with your game and connect to it to display some debug data or a bunch of sad to help you balance levels and weapons unity is a game engine which makes it perfect for making complex visualizations so this really has tons of potential use cases alright so this was a unique video on a pretty obscure topic but i hope it helps someone as always you can download the project files and utilities from unitycodemonk.com if you found this video helpful consider liking and subscribing this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone post any questions you have in the comments and i'll see you next time you
