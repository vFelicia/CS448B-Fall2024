With timestamps:

00:00 - hello and welcome I'm your Cod Mony so
00:02 - do you know if this code has an error or
00:04 - do you know what is the purpose of using
00:06 - time. onto time do you know what is
00:08 - difference between action float and Funk
00:09 - float or do you know if this range
00:11 - syntax if this is valid code this is all
00:13 - part of the question of day system that
00:15 - I have on my website there's a new
00:17 - interesting question that is generated
00:18 - every 3 days you can see it over here
00:20 - directly on the website or you can log
00:22 - in go to your user page and sign up to
00:24 - get the emails in this video let's go
00:26 - through the last 10 questions to learn
00:27 - some interesting things and actually
00:29 - record the rest of this video during a
00:30 - live stream where people try to answer
00:32 - the questions in real time that was a
00:33 - lot of fun and I'll definitely be doing
00:34 - that next month as well so let's learn a
00:36 - bit more by answering all these
00:37 - questions and if you want to learn more
00:39 - check out my complete C course it
00:41 - contains over 50 lectures and a ton of
00:43 - frequently asked questions quizzes and
00:45 - interactive exercise help you learn by
00:46 - doing check it out with the link in the
00:48 - description okay so let's begin with the
00:50 - first question so the question is what
00:52 - is the value stored in percentage so
00:54 - we've got an inal and we are defining
00:56 - with value 25 then the health max this
00:58 - one is also an in with a value of 100
01:01 - then we've got a follow percentage and
01:02 - we have health divide by health max so
01:05 - is the correct answer of this going to
01:07 - be 0.25 the value over here stored in
01:09 - percentage is it going to be zero or
01:15 - 2.5 so I'm going to go along with the
01:18 - wisdom on the crow so I'm going to vote
01:20 - a and let's see if a is indeed the
01:22 - correct one and nope actually it isn't
01:24 - correct so congratulations to all of you
01:27 - for getting it right so basically over
01:30 - here for this question what is the value
01:31 - stored in percentage and over here this
01:33 - question is meant to teach you the issue
01:35 - that comes from dividing one in by
01:37 - another int and if you divide an in by
01:39 - another int then the result is going to
01:41 - be also an INT and since ins cannot
01:44 - store decimal points then the final
01:46 - result is going to be 25 divid by 100
01:49 - it's going to be 0.25 but an in cannot
01:51 - store 0.25 so when this one when you
01:54 - divide n by another end the result is
01:55 - another end so the final result is going
01:57 - to be zero so by default the compiler
01:59 - will cast result onto an end ignoring
02:01 - any decimal points essentially doing a
02:03 - floor operation so if the goal is indeed
02:05 - to get a float which if you're doing
02:06 - this kind of thing probably that is
02:08 - exactly what you want to do if so then
02:10 - in order to get the correct result you
02:11 - need to cast at least one of the numbers
02:12 - into a float which will then do a float
02:15 - divide by an INT and the result of that
02:16 - is going to be a float so that is
02:17 - actually going to be correct so the
02:19 - simple way is just do a cast just cast
02:21 - one of them onto a float and then you've
02:22 - got a float divided by an in and that is
02:24 - going to be the correct percentage and
02:26 - if you want specifically a health system
02:28 - I've got my free health system AET that
02:30 - I made it's pretty robust and I've used
02:31 - in quite a while and it does help solve
02:33 - this problem which is probably the main
02:35 - problem that people are going to
02:36 - encounter whenever they first try to do
02:38 - a night cell system so yeah that was the
02:40 - first question already got a nice split
02:42 - of some people getting 100% right other
02:44 - 50% let's go on to the next one and next
02:47 - one is going to be question number 22 so
02:50 - question does this code have an error so
02:53 - we've got an INT my new X and we're
02:55 - assigning it to the value of 10 and then
02:57 - we're setting the transform.position dox
02:59 - onto my my new act so this new position
03:01 - so does this have an error so is it yes
03:03 - no or only if the game object does not
03:05 - have a transform component all right so
03:07 - let's go ahead and vote and there's the
03:09 - question right
03:16 - there okay so I'm confident let's see if
03:18 - that confidence is indeed correct so I'm
03:21 - going to vote according to the crowd so
03:22 - most people think that it's say so let's
03:24 - vote on a and see does this code have an
03:26 - error and the answer is Yep this code
03:28 - does have an error so in this Cas yep
03:30 - everybody got it or the majority got it
03:32 - right so congratulations to all of you
03:34 - so yeah basically does this code have an
03:36 - error so we're assigning we're creating
03:39 - a brand new int and we're assigning it
03:40 - some value and then we're directly
03:41 - assigning the transform.position dox and
03:44 - the answer is yes this does have an
03:45 - error because you cannot directly modify
03:47 - a vector 3 component inside a transform.
03:49 - position funnily enough transform.
03:51 - position this one is actually a property
03:53 - which actually I talk about down here
03:54 - the reason is because Unity transform
03:56 - opposition is a property not a field so
03:58 - when you access it you're actually
03:59 - getting a copy you're not accessing the
04:01 - underlying structure that is why there
04:03 - is a there's an issue and you cannot
04:05 - directly set it so yep if you want to
04:07 - set the trans on opposition to something
04:09 - if so then you need to construct a brand
04:11 - new Vector 3 you need to give it the new
04:13 - X New Y new Zed do all of that or simply
04:16 - grab the current position assigned the
04:18 - ux and then assign the whole thing so
04:20 - basically if you want to modify it you
04:21 - always have to assign the trans position
04:23 - in the end and again that's because it's
04:25 - a property and so on and this is one of
04:27 - the potential issues with Vector 3 that
04:30 - some people might not know is that a
04:31 - vector 3 is a struct it's not a uh it's
04:34 - not a class meaning it's a value type
04:36 - it's not a reference type this is
04:37 - something that you definitely should
04:38 - know about this little difference it is
04:40 - actually quite important and has some
04:42 - very important implications and if you
04:43 - want to learn more about that definitely
04:45 - check out my video on that topic if you
04:47 - don't know about it then the issues with
04:48 - when something is a copy versus when
04:50 - something is a reference that can really
04:52 - drive you insane so I highly encourage
04:53 - you to know about that and alternatively
04:55 - for moving you can also use just
04:56 - transform. translate that also works
04:58 - just fine and and finally option C that
05:00 - one cannot be true and the option C over
05:03 - here was only if the game object does
05:04 - not have a transform component and this
05:06 - one cannot be true because the game
05:07 - object always has to have a transform
05:09 - component and vice versa a transform
05:11 - always has to be attached to a game
05:12 - object compon to a game object so that
05:14 - is why that one cannot be see because
05:16 - those always have one and the other so
05:18 - those are somewhat interchangeable and
05:20 - if you want to know the big differences
05:21 - between them then definitely check out
05:23 - this video uh okay so question if I do
05:27 - insentient mouse position we use qu.
05:30 - identity if I do that will my prefab be
05:32 - spawned under the mouse yes or no so
05:35 - pretty simple yes or no
05:42 - question all right so on this one the
05:44 - response seems somewhat unanimous so B
05:47 - so if I do instantiate my prefab on the
05:49 - input. mouse Position will my prefab be
05:52 - spawned under the mouse and apparently
05:53 - most people think the answer is no so
05:55 - let's see if that is correct and if that
05:57 - it is indeed correct the answer is
05:58 - indeed no and and there you go
06:00 - congratulations to all of you all of you
06:01 - getting it right so yep input on Mouse
06:04 - position Returns the screen pixel
06:06 - coordinates that are dependent on
06:07 - resolution not in World space this is
06:09 - something that is definitely very
06:10 - important to understand the differences
06:13 - between screen space and World space
06:15 - those are two completely different
06:16 - coordinate spaces so yeah if you do
06:18 - input. mouse position it will not show
06:20 - up under the mouse because that is a
06:22 - completely different thing when you do
06:23 - intiate you are insena in the world
06:25 - space as opposed to input out Mouse
06:27 - position which contains a coordinate in
06:29 - in screen space so in order to get the
06:31 - worm position from the mouse you need to
06:33 - convert from screen space into worm
06:35 - space so for example in a 2d game you
06:36 - can do it with going into the camera and
06:39 - doing a screen to worm point for the
06:40 - input out Mouse position that'll
06:42 - basically give you a worm position given
06:44 - from that Mouse position based on this
06:46 - specific camera based on what this
06:48 - camera sees and in a 3D game in order to
06:50 - get that you can simply convert because
06:52 - 3D has depth so you don't know if the
06:54 - mouse is over here should it be it can
06:56 - be anywhere along this axis so in a 3D
06:59 - game you need to do some kind of recast
07:01 - or some kind of math function in order
07:02 - to figure out where it actually should
07:04 - be in the 3D World so usually in 3D game
07:07 - you do some kind of raycast so you've
07:09 - got some kind of floor and you use the
07:10 - mouse position as the input for the
07:12 - raycast and throws and wherever it hits
07:14 - this the mouse wor position I covered
07:16 - both methods and I created a really
07:18 - useful helper class over here on this
07:20 - video I've actually reused that class in
07:22 - pretty much every game every demo every
07:24 - video that I make where I need to use
07:26 - the uh Mouse position so this actually
07:28 - super useful can definitely just use
07:30 - that in your own projects and yep here
07:32 - is an example so when I made the third
07:33 - person shooter controller and when I
07:35 - made the weapon aiming using ik when I
07:37 - did those in order to figure out where
07:39 - should the player aim and shoot in third
07:41 - person in order to do that I did exactly
07:43 - that so I did calculate the ray cast in
07:44 - order to find the position in World
07:46 - space and then use that for the
07:47 - character in order to move and aim to
07:49 - the correct position so yep just like
07:51 - that or alternatively if you want to use
07:53 - DUI there's also the rec transform
07:55 - utility this one has a whole bunch of
07:56 - helper functions in order to convert
07:58 - from screen space into UI space which
08:00 - might not necessarily be the exact same
08:02 - thing all right so another question what
08:04 - is the purpose of using time. Delta time
08:07 - so is the purpose to do random movement
08:08 - is it faster performance or is it frame
08:10 - rate
08:16 - Independence pretty much everyone
08:18 - believes that it's C so let's see if it
08:19 - is C frame rate Independence and if that
08:22 - is indeed correct and apparently 98% of
08:24 - people got it right so the purpose of
08:26 - using time. time is indeed frame rate
08:28 - Independence and there you go everyone
08:31 - congratulations all right so yep time.
08:33 - time this um actually I was going to say
08:36 - variable but I actually don't know if
08:37 - all the time is a variable or property
08:39 - but doesn't really matter when we read
08:40 - it basically this contains the number of
08:42 - seconds since the very last frame so by
08:44 - using it you can normalize a certain
08:45 - value regardless of frame rate because
08:47 - obviously if you've got some kind of
08:48 - movement speed you don't want the
08:50 - character to move faster if the game is
08:51 - running at 60 frames per second as
08:53 - opposed to if the game is running at 10
08:54 - Fram 10 frames per second regardless of
08:57 - how fast the game is running you want
08:58 - the character to only always move a
09:00 - certain amount of units per second so
09:02 - that is why you always want to use uh
09:04 - time. time in all of your calulations so
09:07 - yep like I like I say here for example
09:09 - on update if you increases by one then
09:11 - on 60 FPS it will move 60 units whereas
09:13 - on 30 FPS it will move 30 units and you
09:16 - definitely don't want this you want
09:17 - consistent movement regardless of frame
09:19 - rate so that is why whenever you do
09:20 - anything on the update in which you want
09:22 - to make sure that it is not based on the
09:24 - frame rate so whenever you want frame
09:26 - rate Independence for that you always
09:28 - need to make sure to use time time and
09:30 - this will make sure that your transform
09:31 - moves exactly one unit over 1 second
09:33 - regardless of frame rate so basically if
09:35 - your game is running at literally just
09:37 - one FPS then the only stored inside time
09:39 - on time will be literally one whereas if
09:42 - you're running at 10 frames per second
09:43 - this this will be 0.1 if it's running at
09:46 - like 60 FPS it's like what is
09:49 - it16 so yeah by using this you can make
09:51 - it frame rate independent okay so next
09:54 - question so what is the difference
09:55 - between action float and Funk float so
09:59 - are the both the same or does Action
10:01 - float take a float parameter and fun
10:03 - float returns a float or does fun float
10:05 - take a float parameter and action
10:07 - returns
10:10 - float okay so let's see most people
10:12 - voted on B so let's see if that is
10:14 - correct so what is the difference
10:15 - between action float and fun float and
10:17 - people think that the answer is action
10:19 - float takes a float parameter and fun
10:21 - float returns a float and let's see any
10:23 - up that it is indeed correct and 71% of
10:26 - people got it so yep basically actions
10:27 - are delegates have returned void point
10:29 - and can have multiple parameters or none
10:31 - and fun those are delegates that return
10:33 - a specific type in this case float if
10:35 - you have a funk float and can have
10:37 - multiple parameters or none and
10:39 - delegates if you don't know delegates
10:41 - essentially let you store a function
10:42 - inside a variable this has a ton of use
10:44 - case like swapping weapons that do
10:46 - different attacks or use as callbacks
10:48 - which is wiely used in web development
10:50 - so if you want to learn about C
10:51 - delegates I cover them all over here so
10:54 - yep if you want to which a while ago I
10:56 - was talking about how this little uh
10:58 - element Works how it works with the
10:59 - YouTube API and that's exactly what I
11:01 - cover in this video how to download data
11:03 - and images so this basically doing a
11:05 - basic HTTP request and same thing with
11:07 - when I made a bunch of things using
11:09 - Azure using using it to make some five
11:11 - unique Cloud mechanics that is all based
11:13 - on contacting your web server in order
11:15 - to do that you're always going to need
11:17 - delegates in order to run the comeback
11:18 - action so basically contact the server
11:20 - and the contact for the server is not
11:21 - going to be automatic it's not going to
11:23 - be instant so you have to wait a little
11:24 - bit in order to get the response back so
11:26 - that is where delegates are really used
11:28 - in order to get callbacks and yep action
11:30 - and Funk those are the two default ones
11:32 - which are actually pretty nice extremely
11:34 - useful so delegates if you don't know
11:35 - about them definitely know about them
11:37 - and if you don't know this syntax this
11:39 - little angled brackets these are C
11:41 - generics which is how you can write some
11:43 - code that works with multiple types
11:44 - again this another Super useful C
11:47 - feature so you can watch these Stone
11:49 - videos you can see all the things that I
11:50 - made using generics which was
11:52 - specifically my grid system where I made
11:54 - it and built a ton of things based on
11:56 - top of that original grid system and the
11:58 - reason why I was say able to do that is
12:00 - because he use generics so yep that is
12:02 - another Super useful thing so definitely
12:03 - delegates in generics you definitely
12:05 - need to know about those in C those will
12:07 - help you build a ton of different stuff
12:09 - and yep and if you want to to learn
12:11 - about them you can watch these 10 milon
12:13 - videos on delegates and generics or of
12:14 - course if you have my C course over here
12:17 - I also cover delegates and generics over
12:19 - here on the intermediate section there's
12:21 - a bunch of stuff including all that so
12:23 - delegates generics and so on okay so
12:26 - next question so what types can you
12:27 - natively store with player prefs uh so
12:30 - is it anything is it string in float and
12:33 - b or is it string in and
12:41 - float and apparently most people think
12:43 - that it's c meaning that it's string
12:45 - intent float and yep that is indeed the
12:48 - correct answer and congratulations to
12:50 - all of you yep you can make a bull yeah
12:52 - exactly so natively it does not support
12:55 - bullan booleans cannot be natively
12:57 - stored using player prefs the only
12:59 - native functions that exist are set
13:00 - string set in and set float and yep the
13:03 - bone that one is quite a strange
13:05 - ambition because bones are used quite a
13:07 - lot so it is a bit strange why the API
13:10 - does not have a set bow so you cannot
13:12 - sort natively but you can definitely
13:14 - easily make a function that stores a
13:16 - bullion by simply storing an end or
13:18 - string and doing one or zero and
13:20 - considering that as a bullion true or
13:22 - false and yeah player prefs are really
13:24 - great for storing player preferences
13:26 - things like key bindings audio volume
13:27 - and so on so those are it's super easy
13:29 - to use so whenever you need some
13:31 - persistent data and you don't need
13:32 - anything too complex so you don't need
13:34 - something like save fils and so on we
13:36 - need something super simple player preps
13:38 - are really awesome so yep like I say
13:41 - here however don't use it for storing
13:42 - save files and for that my preferred
13:44 - method is making save object and saving
13:46 - them using Json so there is this video
13:48 - this video is really awesome if you want
13:50 - to save Json if you want to make a save
13:52 - system if you've never done it then yeah
13:54 - it's kind of it's funny how this video
13:56 - is technically a little bit old I think
13:57 - I made this one in 19 but Yep this is
14:00 - still exactly the same process that I
14:01 - use nowadays so if you want to learn how
14:04 - to save this is definitely exactly what
14:06 - I do so on my latest game dinky Gardians
14:07 - I still use Exel this method so
14:09 - basically just make a save object I save
14:11 - all the data that I want to save and
14:13 - convert that save object into Json and
14:15 - just save the whole thing onto a file
14:16 - super simple super easy and if you want
14:18 - to uh save some extra data if you want
14:20 - to take that to the next level then go
14:22 - ahead and watch this video basically it
14:23 - teaches you how to save a file including
14:25 - a screenshot with the file so this
14:27 - actually something really interesting so
14:28 - basically you can read the bytes and
14:30 - split the file into multiple things so
14:32 - you can have one part of the file
14:33 - contains the save data and another part
14:35 - contains some thumbnail so then when you
14:37 - are showing all the all the files that
14:39 - the player can load you can simply
14:40 - display that thumbnail that relates to
14:42 - that file so this is actually really
14:43 - interesting it's actually not that
14:45 - difficult to make so that is actually a
14:47 - very nice method and Y like I said here
14:49 - yep that is the exactly the same method
14:51 - that I've used for over 10 years and
14:52 - same method that I used in my latest
14:54 - game so next question is this valid code
14:56 - so we've got a caller question mark my
14:58 - caller equals no so is the answer is yes
15:01 - or no because my color is a struct and
15:03 - as such the stru cannot be known so
15:05 - which one is
15:11 - correct and there's someone running down
15:14 - here why are you down here I don't know
15:17 - so is it yes or no most people seem to
15:19 - think the answer is yes so let's see any
15:22 - of there is indeed correct so
15:23 - congratulations to all of you for
15:25 - getting this right for those of you who
15:27 - got it wrong you probably got it wrong
15:28 - because you don't know about nullable
15:29 - this is a super useful C feature which
15:31 - basically allows you to make any type
15:33 - you want into nullable even things that
15:35 - usually could not be null if you remove
15:37 - this question mark then over here this
15:39 - is not valid code if you were to remove
15:41 - that because if you remove that then you
15:42 - make just a basic CER and caller is inde
15:44 - the struct and structs cannot be null
15:46 - however over here my caller is not a
15:48 - struct my caller over here is a nullable
15:51 - because of over here the little question
15:52 - mark and since it is a nullable this one
15:54 - does support sending it to null so yep
15:57 - strs indeed cannot be null however this
15:59 - example my Coler is not a stroke but
16:01 - rather it is a nullable so note the
16:03 - question mark after the type that is
16:04 - what marks the type as nullable
16:06 - alternatively you can just write
16:07 - nullable and then use the generics in
16:09 - order to write the type inside and when
16:11 - you make something nullable you can make
16:12 - the type null regardless of what type it
16:14 - is so for this this is all valid code so
16:17 - you can set a color into null you can
16:18 - set an NT into null and a bll into null
16:20 - all of this is valid code nullable is
16:23 - basically a wrapper that soures the
16:25 - underlying value and a buan to define
16:27 - whether the value has been set or not so
16:29 - inside null B you've got something
16:31 - called has value if that one is true
16:33 - then it does have a containing value if
16:34 - not then the variable has no value
16:36 - assigned and basically set to null so
16:38 - null BS are really awesome whenever you
16:40 - have some kind of logic and you're
16:42 - working with some like a color or int or
16:44 - bll and it would be useful to use some
16:46 - kind of null because sometimes sometimes
16:48 - when you use an INT in order to Define
16:50 - some invalid type usually people use
16:52 - something like minus one but sometimes
16:54 - it might actually be better in order to
16:55 - use null because if you use null that's
16:57 - pretty obvious that that means nothing
16:58 - means no data is storen in there for
17:00 - those cases using null ball is really
17:02 - awesome you can just add a little
17:03 - question mark and you can make anything
17:05 - support null so next one so is this
17:08 - valid code so simple yes or no question
17:10 - so we've got a string State we've got
17:12 - the health and we're checking if the
17:13 - health is above zero then you've got
17:15 - alive or dead so we've got this little
17:17 - syntax right here so is it spelling code
17:19 - yes or
17:23 - no so let's go everyone thinks that it's
17:25 - a let's see if it is a and yep it is
17:28 - indeed a so congratulations and Yep this
17:31 - one is indeed valid code for some of you
17:33 - if you don't know this this format this
17:35 - syntax it might seem strange might seem
17:37 - this is not valid but Yep this is indeed
17:39 - valid this is the if shorthand or
17:42 - technically known the ternary
17:43 - conditional operator so basically you do
17:46 - a condition so for example over here the
17:47 - condition is Health above zero and then
17:50 - you have a little question mark and then
17:51 - you basically have what this will return
17:53 - if the condition is true and then we
17:55 - have a con and then what this will
17:57 - return if the condition is false so in
17:59 - this case the state will be set to alive
18:01 - if the health is above zero and will be
18:03 - set to dead if the health is not above
18:05 - zero so we've got the condition if true
18:07 - and if false so what we have up here is
18:10 - perfectly valid code and it's literally
18:11 - exactly the same thing that we have down
18:13 - here so we Define a string State and if
18:15 - the health is above zero then we set the
18:16 - state into alive if not we set the state
18:19 - into dead so this is the if shorthand or
18:21 - the conditional operator and this can be
18:23 - really useful in certain simple
18:25 - scenarios however it's usual don't abuse
18:27 - it I mean technically you can make a ton
18:29 - of these all over the place and at that
18:31 - point it becomes super compact but also
18:33 - super difficult to read so basically as
18:35 - always you should never ever sacrifice
18:38 - code readability for compactness you
18:40 - should always value making your code
18:41 - readable easy to understand do that
18:44 - first and then secondly you can try to
18:46 - make it compact if it is just as
18:47 - readable as without it so yep question
18:50 - of the day does this code compile so
18:52 - we've got a private void set Target
18:54 - function it takes a transform Target as
18:56 - a parameter and inside we are setting
18:59 - the game object for the Target game
19:00 - object onto this target so does this
19:03 - code compile so no yes or yes if Target
19:06 - is not
19:12 - know so does this code compile and
19:14 - apparently most people are voting into a
19:17 - so the answer is no and let's see and Y
19:20 - that it is indeed correct so
19:21 - congratulations to all of you for
19:23 - getting this one right this code does
19:26 - not compile and the answer is because
19:28 - you cannot cannot implicitly convert a
19:30 - transform onto a game object so over
19:32 - here this function this one takes a
19:34 - transform as the first parameter and for
19:36 - this parameter so since this target is
19:38 - of type transform you cannot implicitly
19:40 - assign it onto a game object however
19:43 - like I said a while ago every game
19:45 - object always has a transform and every
19:47 - transform always has a game object so
19:49 - while this code up here does not work
19:51 - this code down here doesn't need work so
19:53 - you grab the target which is a transform
19:55 - and actually I messed up on the on the
19:57 - code here I just noticed got to fix this
19:59 - it should be target. game object because
20:01 - for every Target over here is a
20:03 - transform and inside the transform
20:05 - you've got a game object field so that
20:06 - refers to a game object so you cannot
20:08 - implicitly convert but if you have a
20:10 - transform or game object then you can
20:12 - grab the other one from either one of
20:14 - them so y if you want to do that
20:16 - definitely watch this video to know the
20:17 - various differences between game object
20:19 - and transforms and over here just a fun
20:21 - more useful ones and as a bonus tip when
20:24 - calling instantiate the return type will
20:25 - be the same type that you use as the
20:27 - first parameter so if you call
20:28 - instantiate on a prefab which is a type
20:31 - transform if so then this is going to
20:33 - spawn a transform but if you call it on
20:35 - a prefab of type game object then this
20:36 - is going to spawn a game object and also
20:38 - by the way just an extra bonus bonus tip
20:41 - over here inside the insensate you can
20:42 - also use a custom script so you can use
20:44 - something like an enemy script you can
20:46 - put in a prefab enemy reference of type
20:49 - enemy and doing so we'll insatiate that
20:51 - prefab and give you the the external
20:53 - reference of type enemy so basically you
20:55 - can do over here you can do transform
20:56 - game objects or you can also use custom
20:59 - types now personally for me normally I
21:01 - prefer to use prefab transform just
21:03 - because since usually after spawning an
21:04 - object I tend to want to modify the
21:06 - position the parent or something so
21:08 - usually for me whenever I spawn
21:09 - something I use transform just so I
21:10 - already have the transform in order to
21:12 - be able to use it but yep you can
21:14 - definitely spawn a transform spawn a
21:15 - game object or spawn anything and over
21:18 - here in the original question remember
21:19 - how you cannot implicitly convert but
21:21 - every game object has a transform and
21:23 - every transform has a game
21:25 - object and you pay some crash prize when
21:28 - you win the award are you talking about
21:29 - the unity Awards the ones that I won
21:30 - nope there's no cash prize just the just
21:33 - the personal satisfaction of knowing
21:35 - that all of you enjoy the videos and yep
21:38 - that's pretty much it they got me they
21:39 - did give me a physical
21:42 - thing here it is actually a very nice
21:46 - award look at this that's the award
21:48 - that's actually really awesome so I won
21:50 - this thanks to all of you voting for me
21:51 - so thank you all so much it's actually
21:53 - really nice and thanks to un for making
21:55 - this and sending it over because it
21:56 - actually it actually looks really
21:58 - awesome look at that it has a little
22:00 - looks like a 3d effect it's got a little
22:02 - thing on the background and yeah look at
22:05 - that it's actually really good and it's
22:06 - really heavy too this weighs like I
22:08 - don't know 2 kilos something like that
22:10 - it's actually really weighty really
22:12 - heavy really nice really cool so yeah
22:15 - that that's it and it's actually
22:17 - surprisingly awesome so yeah that was it
22:20 - was really awesome to get that and yeah
22:22 - thanks to all of you for voting that's
22:24 - why I have this and yeah I hope you keep
22:26 - enjoying the videos and I'll I'll
22:28 - definitely continue making them so yeah
22:30 - that was a that was a fun thing there
22:34 - all right so let's go on to the next
22:37 - question uh so how should you store the
22:40 - health of each unit in your game so
22:42 - should you store with a Publican Health
22:44 - with a private End Health with a public
22:46 - static End Health or private end age so
22:50 - go ahead and answer the question so this
22:52 - is a fun question both a technical
22:54 - question and more of a naming rules and
22:56 - clean code question okay is this
23:04 - so let's see this one seems pretty
23:05 - unanimous on B so let's see if that is
23:09 - indeed correct so how should you store
23:10 - the health of each unit in your game and
23:12 - most people seem to think the answer is
23:14 - B so private and health and let's see if
23:16 - that is indeed correct and if that is
23:18 - indeed correct so congrats to all of you
23:21 - and Y that is indeed the correct one the
23:23 - key point is how do you store the health
23:25 - for each unit so each unit that means it
23:27 - cannot be static because static when you
23:29 - mark something as static it belongs to
23:30 - the class itself as opposed to each
23:32 - individual instance of that class so in
23:34 - order to have each unit have their own
23:36 - health it cannot be static and then well
23:39 - let me just read the answer so it cannot
23:41 - be seen like I said because multiple
23:43 - units they cannot be static you need to
23:45 - have the health amount for each
23:46 - individual unit and then it should not
23:48 - be d d is over here the private int AG
23:51 - so it should not be that one because you
23:53 - should always give your variables proper
23:54 - names this is extremely important while
23:56 - writing the code it might be clear to
23:58 - you that age means Health but then you
24:00 - come back to that code after a few weeks
24:01 - and you definitely forget what it means
24:03 - so always always make sure you use
24:05 - proper names for all your variables so
24:07 - that is why age should not be good and
24:09 - then it should also not be a a is public
24:11 - in health it should not be that because
24:13 - you should almost never make your Fields
24:15 - public by doing so you are enabling both
24:17 - read and right access to that field
24:20 - which means that any other class in your
24:21 - entire code base any of those can modify
24:23 - that field and potentially break
24:24 - everything so the simplest guideline you
24:27 - can follow to write some good clean code
24:28 - is to minimize complexity and one of the
24:30 - best ways to do that is to minimize
24:32 - access as much as possible so this is a
24:34 - really important topic and I've covered
24:35 - it in detail in this video If you
24:37 - haven't seen that video I highly highly
24:38 - encourage you to watch it if you just
24:40 - follow this one rule just make sure that
24:42 - you default things making an uh private
24:44 - instead of making public if you just do
24:46 - that the quality of a code the quality
24:48 - of your code will massively increase
24:49 - just follow that one rule and really
24:51 - will help you a lot because if you make
24:52 - it public then your code becomes a
24:54 - complete mess you've got things on tons
24:56 - of classes that are constantly
24:57 - interacting with another constantly
24:59 - modifying all kinds of things becomes
25:00 - really messy so definitely make it
25:02 - private and only make it public if you
25:04 - absolutely need to so yep exactly like
25:07 - that so congratulations because most
25:09 - people got it right so that's really
25:10 - awesome I'm very happy to see that
25:12 - because yeah some beginner tutorials uh
25:16 - they teach you how to make things public
25:18 - and I understand why they do that
25:20 - because it's a little bit simpler but in
25:21 - order to do it properly it should be
25:23 - private so I'm really happy to see that
25:24 - over here all of you the audience on
25:26 - this channel knows that the answer is is
25:28 - need to make it private that is really
25:29 - awesome CU that is I'm very passionate
25:31 - about writing good clean code so I'm
25:33 - really happy to see that all of you also
25:35 - value that all right so those are the
25:37 - last 10 questions for my question day
25:38 - system I hope you learned something new
25:40 - there's an interesting new question
25:41 - generated every 3 days you can find over
25:43 - here on the website or go into your user
25:45 - page and sign up for the emails also if
25:47 - you need some awesome low poly acids
25:49 - check out the current humble mton that's
25:50 - going on this one is all about Cy assets
25:53 - and you've got a m of stuff that you can
25:54 - use to build all kinds of interesting
25:56 - games and all it for just 25 bucks all
25:59 - right hope that's useful check out these
26:01 - videos to learn some more thanks to
26:03 - these awesome patreon supporters for
26:04 - making these videos possible thank you
26:06 - for watching and I'll see you next
26:12 - [Music]
26:15 - time

Cleaned transcript:

hello and welcome I'm your Cod Mony so do you know if this code has an error or do you know what is the purpose of using time. onto time do you know what is difference between action float and Funk float or do you know if this range syntax if this is valid code this is all part of the question of day system that I have on my website there's a new interesting question that is generated every 3 days you can see it over here directly on the website or you can log in go to your user page and sign up to get the emails in this video let's go through the last 10 questions to learn some interesting things and actually record the rest of this video during a live stream where people try to answer the questions in real time that was a lot of fun and I'll definitely be doing that next month as well so let's learn a bit more by answering all these questions and if you want to learn more check out my complete C course it contains over 50 lectures and a ton of frequently asked questions quizzes and interactive exercise help you learn by doing check it out with the link in the description okay so let's begin with the first question so the question is what is the value stored in percentage so we've got an inal and we are defining with value 25 then the health max this one is also an in with a value of 100 then we've got a follow percentage and we have health divide by health max so is the correct answer of this going to be 0.25 the value over here stored in percentage is it going to be zero or 2.5 so I'm going to go along with the wisdom on the crow so I'm going to vote a and let's see if a is indeed the correct one and nope actually it isn't correct so congratulations to all of you for getting it right so basically over here for this question what is the value stored in percentage and over here this question is meant to teach you the issue that comes from dividing one in by another int and if you divide an in by another int then the result is going to be also an INT and since ins cannot store decimal points then the final result is going to be 25 divid by 100 it's going to be 0.25 but an in cannot store 0.25 so when this one when you divide n by another end the result is another end so the final result is going to be zero so by default the compiler will cast result onto an end ignoring any decimal points essentially doing a floor operation so if the goal is indeed to get a float which if you're doing this kind of thing probably that is exactly what you want to do if so then in order to get the correct result you need to cast at least one of the numbers into a float which will then do a float divide by an INT and the result of that is going to be a float so that is actually going to be correct so the simple way is just do a cast just cast one of them onto a float and then you've got a float divided by an in and that is going to be the correct percentage and if you want specifically a health system I've got my free health system AET that I made it's pretty robust and I've used in quite a while and it does help solve this problem which is probably the main problem that people are going to encounter whenever they first try to do a night cell system so yeah that was the first question already got a nice split of some people getting 100% right other 50% let's go on to the next one and next one is going to be question number 22 so question does this code have an error so we've got an INT my new X and we're assigning it to the value of 10 and then we're setting the transform.position dox onto my my new act so this new position so does this have an error so is it yes no or only if the game object does not have a transform component all right so let's go ahead and vote and there's the question right there okay so I'm confident let's see if that confidence is indeed correct so I'm going to vote according to the crowd so most people think that it's say so let's vote on a and see does this code have an error and the answer is Yep this code does have an error so in this Cas yep everybody got it or the majority got it right so congratulations to all of you so yeah basically does this code have an error so we're assigning we're creating a brand new int and we're assigning it some value and then we're directly assigning the transform.position dox and the answer is yes this does have an error because you cannot directly modify a vector 3 component inside a transform. position funnily enough transform. position this one is actually a property which actually I talk about down here the reason is because Unity transform opposition is a property not a field so when you access it you're actually getting a copy you're not accessing the underlying structure that is why there is a there's an issue and you cannot directly set it so yep if you want to set the trans on opposition to something if so then you need to construct a brand new Vector 3 you need to give it the new X New Y new Zed do all of that or simply grab the current position assigned the ux and then assign the whole thing so basically if you want to modify it you always have to assign the trans position in the end and again that's because it's a property and so on and this is one of the potential issues with Vector 3 that some people might not know is that a vector 3 is a struct it's not a uh it's not a class meaning it's a value type it's not a reference type this is something that you definitely should know about this little difference it is actually quite important and has some very important implications and if you want to learn more about that definitely check out my video on that topic if you don't know about it then the issues with when something is a copy versus when something is a reference that can really drive you insane so I highly encourage you to know about that and alternatively for moving you can also use just transform. translate that also works just fine and and finally option C that one cannot be true and the option C over here was only if the game object does not have a transform component and this one cannot be true because the game object always has to have a transform component and vice versa a transform always has to be attached to a game object compon to a game object so that is why that one cannot be see because those always have one and the other so those are somewhat interchangeable and if you want to know the big differences between them then definitely check out this video uh okay so question if I do insentient mouse position we use qu. identity if I do that will my prefab be spawned under the mouse yes or no so pretty simple yes or no question all right so on this one the response seems somewhat unanimous so B so if I do instantiate my prefab on the input. mouse Position will my prefab be spawned under the mouse and apparently most people think the answer is no so let's see if that is correct and if that it is indeed correct the answer is indeed no and and there you go congratulations to all of you all of you getting it right so yep input on Mouse position Returns the screen pixel coordinates that are dependent on resolution not in World space this is something that is definitely very important to understand the differences between screen space and World space those are two completely different coordinate spaces so yeah if you do input. mouse position it will not show up under the mouse because that is a completely different thing when you do intiate you are insena in the world space as opposed to input out Mouse position which contains a coordinate in in screen space so in order to get the worm position from the mouse you need to convert from screen space into worm space so for example in a 2d game you can do it with going into the camera and doing a screen to worm point for the input out Mouse position that'll basically give you a worm position given from that Mouse position based on this specific camera based on what this camera sees and in a 3D game in order to get that you can simply convert because 3D has depth so you don't know if the mouse is over here should it be it can be anywhere along this axis so in a 3D game you need to do some kind of recast or some kind of math function in order to figure out where it actually should be in the 3D World so usually in 3D game you do some kind of raycast so you've got some kind of floor and you use the mouse position as the input for the raycast and throws and wherever it hits this the mouse wor position I covered both methods and I created a really useful helper class over here on this video I've actually reused that class in pretty much every game every demo every video that I make where I need to use the uh Mouse position so this actually super useful can definitely just use that in your own projects and yep here is an example so when I made the third person shooter controller and when I made the weapon aiming using ik when I did those in order to figure out where should the player aim and shoot in third person in order to do that I did exactly that so I did calculate the ray cast in order to find the position in World space and then use that for the character in order to move and aim to the correct position so yep just like that or alternatively if you want to use DUI there's also the rec transform utility this one has a whole bunch of helper functions in order to convert from screen space into UI space which might not necessarily be the exact same thing all right so another question what is the purpose of using time. Delta time so is the purpose to do random movement is it faster performance or is it frame rate Independence pretty much everyone believes that it's C so let's see if it is C frame rate Independence and if that is indeed correct and apparently 98% of people got it right so the purpose of using time. time is indeed frame rate Independence and there you go everyone congratulations all right so yep time. time this um actually I was going to say variable but I actually don't know if all the time is a variable or property but doesn't really matter when we read it basically this contains the number of seconds since the very last frame so by using it you can normalize a certain value regardless of frame rate because obviously if you've got some kind of movement speed you don't want the character to move faster if the game is running at 60 frames per second as opposed to if the game is running at 10 Fram 10 frames per second regardless of how fast the game is running you want the character to only always move a certain amount of units per second so that is why you always want to use uh time. time in all of your calulations so yep like I like I say here for example on update if you increases by one then on 60 FPS it will move 60 units whereas on 30 FPS it will move 30 units and you definitely don't want this you want consistent movement regardless of frame rate so that is why whenever you do anything on the update in which you want to make sure that it is not based on the frame rate so whenever you want frame rate Independence for that you always need to make sure to use time time and this will make sure that your transform moves exactly one unit over 1 second regardless of frame rate so basically if your game is running at literally just one FPS then the only stored inside time on time will be literally one whereas if you're running at 10 frames per second this this will be 0.1 if it's running at like 60 FPS it's like what is it16 so yeah by using this you can make it frame rate independent okay so next question so what is the difference between action float and Funk float so are the both the same or does Action float take a float parameter and fun float returns a float or does fun float take a float parameter and action returns float okay so let's see most people voted on B so let's see if that is correct so what is the difference between action float and fun float and people think that the answer is action float takes a float parameter and fun float returns a float and let's see any up that it is indeed correct and 71% of people got it so yep basically actions are delegates have returned void point and can have multiple parameters or none and fun those are delegates that return a specific type in this case float if you have a funk float and can have multiple parameters or none and delegates if you don't know delegates essentially let you store a function inside a variable this has a ton of use case like swapping weapons that do different attacks or use as callbacks which is wiely used in web development so if you want to learn about C delegates I cover them all over here so yep if you want to which a while ago I was talking about how this little uh element Works how it works with the YouTube API and that's exactly what I cover in this video how to download data and images so this basically doing a basic HTTP request and same thing with when I made a bunch of things using Azure using using it to make some five unique Cloud mechanics that is all based on contacting your web server in order to do that you're always going to need delegates in order to run the comeback action so basically contact the server and the contact for the server is not going to be automatic it's not going to be instant so you have to wait a little bit in order to get the response back so that is where delegates are really used in order to get callbacks and yep action and Funk those are the two default ones which are actually pretty nice extremely useful so delegates if you don't know about them definitely know about them and if you don't know this syntax this little angled brackets these are C generics which is how you can write some code that works with multiple types again this another Super useful C feature so you can watch these Stone videos you can see all the things that I made using generics which was specifically my grid system where I made it and built a ton of things based on top of that original grid system and the reason why I was say able to do that is because he use generics so yep that is another Super useful thing so definitely delegates in generics you definitely need to know about those in C those will help you build a ton of different stuff and yep and if you want to to learn about them you can watch these 10 milon videos on delegates and generics or of course if you have my C course over here I also cover delegates and generics over here on the intermediate section there's a bunch of stuff including all that so delegates generics and so on okay so next question so what types can you natively store with player prefs uh so is it anything is it string in float and b or is it string in and float and apparently most people think that it's c meaning that it's string intent float and yep that is indeed the correct answer and congratulations to all of you yep you can make a bull yeah exactly so natively it does not support bullan booleans cannot be natively stored using player prefs the only native functions that exist are set string set in and set float and yep the bone that one is quite a strange ambition because bones are used quite a lot so it is a bit strange why the API does not have a set bow so you cannot sort natively but you can definitely easily make a function that stores a bullion by simply storing an end or string and doing one or zero and considering that as a bullion true or false and yeah player prefs are really great for storing player preferences things like key bindings audio volume and so on so those are it's super easy to use so whenever you need some persistent data and you don't need anything too complex so you don't need something like save fils and so on we need something super simple player preps are really awesome so yep like I say here however don't use it for storing save files and for that my preferred method is making save object and saving them using Json so there is this video this video is really awesome if you want to save Json if you want to make a save system if you've never done it then yeah it's kind of it's funny how this video is technically a little bit old I think I made this one in 19 but Yep this is still exactly the same process that I use nowadays so if you want to learn how to save this is definitely exactly what I do so on my latest game dinky Gardians I still use Exel this method so basically just make a save object I save all the data that I want to save and convert that save object into Json and just save the whole thing onto a file super simple super easy and if you want to uh save some extra data if you want to take that to the next level then go ahead and watch this video basically it teaches you how to save a file including a screenshot with the file so this actually something really interesting so basically you can read the bytes and split the file into multiple things so you can have one part of the file contains the save data and another part contains some thumbnail so then when you are showing all the all the files that the player can load you can simply display that thumbnail that relates to that file so this is actually really interesting it's actually not that difficult to make so that is actually a very nice method and Y like I said here yep that is the exactly the same method that I've used for over 10 years and same method that I used in my latest game so next question is this valid code so we've got a caller question mark my caller equals no so is the answer is yes or no because my color is a struct and as such the stru cannot be known so which one is correct and there's someone running down here why are you down here I don't know so is it yes or no most people seem to think the answer is yes so let's see any of there is indeed correct so congratulations to all of you for getting this right for those of you who got it wrong you probably got it wrong because you don't know about nullable this is a super useful C feature which basically allows you to make any type you want into nullable even things that usually could not be null if you remove this question mark then over here this is not valid code if you were to remove that because if you remove that then you make just a basic CER and caller is inde the struct and structs cannot be null however over here my caller is not a struct my caller over here is a nullable because of over here the little question mark and since it is a nullable this one does support sending it to null so yep strs indeed cannot be null however this example my Coler is not a stroke but rather it is a nullable so note the question mark after the type that is what marks the type as nullable alternatively you can just write nullable and then use the generics in order to write the type inside and when you make something nullable you can make the type null regardless of what type it is so for this this is all valid code so you can set a color into null you can set an NT into null and a bll into null all of this is valid code nullable is basically a wrapper that soures the underlying value and a buan to define whether the value has been set or not so inside null B you've got something called has value if that one is true then it does have a containing value if not then the variable has no value assigned and basically set to null so null BS are really awesome whenever you have some kind of logic and you're working with some like a color or int or bll and it would be useful to use some kind of null because sometimes sometimes when you use an INT in order to Define some invalid type usually people use something like minus one but sometimes it might actually be better in order to use null because if you use null that's pretty obvious that that means nothing means no data is storen in there for those cases using null ball is really awesome you can just add a little question mark and you can make anything support null so next one so is this valid code so simple yes or no question so we've got a string State we've got the health and we're checking if the health is above zero then you've got alive or dead so we've got this little syntax right here so is it spelling code yes or no so let's go everyone thinks that it's a let's see if it is a and yep it is indeed a so congratulations and Yep this one is indeed valid code for some of you if you don't know this this format this syntax it might seem strange might seem this is not valid but Yep this is indeed valid this is the if shorthand or technically known the ternary conditional operator so basically you do a condition so for example over here the condition is Health above zero and then you have a little question mark and then you basically have what this will return if the condition is true and then we have a con and then what this will return if the condition is false so in this case the state will be set to alive if the health is above zero and will be set to dead if the health is not above zero so we've got the condition if true and if false so what we have up here is perfectly valid code and it's literally exactly the same thing that we have down here so we Define a string State and if the health is above zero then we set the state into alive if not we set the state into dead so this is the if shorthand or the conditional operator and this can be really useful in certain simple scenarios however it's usual don't abuse it I mean technically you can make a ton of these all over the place and at that point it becomes super compact but also super difficult to read so basically as always you should never ever sacrifice code readability for compactness you should always value making your code readable easy to understand do that first and then secondly you can try to make it compact if it is just as readable as without it so yep question of the day does this code compile so we've got a private void set Target function it takes a transform Target as a parameter and inside we are setting the game object for the Target game object onto this target so does this code compile so no yes or yes if Target is not know so does this code compile and apparently most people are voting into a so the answer is no and let's see and Y that it is indeed correct so congratulations to all of you for getting this one right this code does not compile and the answer is because you cannot cannot implicitly convert a transform onto a game object so over here this function this one takes a transform as the first parameter and for this parameter so since this target is of type transform you cannot implicitly assign it onto a game object however like I said a while ago every game object always has a transform and every transform always has a game object so while this code up here does not work this code down here doesn't need work so you grab the target which is a transform and actually I messed up on the on the code here I just noticed got to fix this it should be target. game object because for every Target over here is a transform and inside the transform you've got a game object field so that refers to a game object so you cannot implicitly convert but if you have a transform or game object then you can grab the other one from either one of them so y if you want to do that definitely watch this video to know the various differences between game object and transforms and over here just a fun more useful ones and as a bonus tip when calling instantiate the return type will be the same type that you use as the first parameter so if you call instantiate on a prefab which is a type transform if so then this is going to spawn a transform but if you call it on a prefab of type game object then this is going to spawn a game object and also by the way just an extra bonus bonus tip over here inside the insensate you can also use a custom script so you can use something like an enemy script you can put in a prefab enemy reference of type enemy and doing so we'll insatiate that prefab and give you the the external reference of type enemy so basically you can do over here you can do transform game objects or you can also use custom types now personally for me normally I prefer to use prefab transform just because since usually after spawning an object I tend to want to modify the position the parent or something so usually for me whenever I spawn something I use transform just so I already have the transform in order to be able to use it but yep you can definitely spawn a transform spawn a game object or spawn anything and over here in the original question remember how you cannot implicitly convert but every game object has a transform and every transform has a game object and you pay some crash prize when you win the award are you talking about the unity Awards the ones that I won nope there's no cash prize just the just the personal satisfaction of knowing that all of you enjoy the videos and yep that's pretty much it they got me they did give me a physical thing here it is actually a very nice award look at this that's the award that's actually really awesome so I won this thanks to all of you voting for me so thank you all so much it's actually really nice and thanks to un for making this and sending it over because it actually it actually looks really awesome look at that it has a little looks like a 3d effect it's got a little thing on the background and yeah look at that it's actually really good and it's really heavy too this weighs like I don't know 2 kilos something like that it's actually really weighty really heavy really nice really cool so yeah that that's it and it's actually surprisingly awesome so yeah that was it was really awesome to get that and yeah thanks to all of you for voting that's why I have this and yeah I hope you keep enjoying the videos and I'll I'll definitely continue making them so yeah that was a that was a fun thing there all right so let's go on to the next question uh so how should you store the health of each unit in your game so should you store with a Publican Health with a private End Health with a public static End Health or private end age so go ahead and answer the question so this is a fun question both a technical question and more of a naming rules and clean code question okay is this so let's see this one seems pretty unanimous on B so let's see if that is indeed correct so how should you store the health of each unit in your game and most people seem to think the answer is B so private and health and let's see if that is indeed correct and if that is indeed correct so congrats to all of you and Y that is indeed the correct one the key point is how do you store the health for each unit so each unit that means it cannot be static because static when you mark something as static it belongs to the class itself as opposed to each individual instance of that class so in order to have each unit have their own health it cannot be static and then well let me just read the answer so it cannot be seen like I said because multiple units they cannot be static you need to have the health amount for each individual unit and then it should not be d d is over here the private int AG so it should not be that one because you should always give your variables proper names this is extremely important while writing the code it might be clear to you that age means Health but then you come back to that code after a few weeks and you definitely forget what it means so always always make sure you use proper names for all your variables so that is why age should not be good and then it should also not be a a is public in health it should not be that because you should almost never make your Fields public by doing so you are enabling both read and right access to that field which means that any other class in your entire code base any of those can modify that field and potentially break everything so the simplest guideline you can follow to write some good clean code is to minimize complexity and one of the best ways to do that is to minimize access as much as possible so this is a really important topic and I've covered it in detail in this video If you haven't seen that video I highly highly encourage you to watch it if you just follow this one rule just make sure that you default things making an uh private instead of making public if you just do that the quality of a code the quality of your code will massively increase just follow that one rule and really will help you a lot because if you make it public then your code becomes a complete mess you've got things on tons of classes that are constantly interacting with another constantly modifying all kinds of things becomes really messy so definitely make it private and only make it public if you absolutely need to so yep exactly like that so congratulations because most people got it right so that's really awesome I'm very happy to see that because yeah some beginner tutorials uh they teach you how to make things public and I understand why they do that because it's a little bit simpler but in order to do it properly it should be private so I'm really happy to see that over here all of you the audience on this channel knows that the answer is is need to make it private that is really awesome CU that is I'm very passionate about writing good clean code so I'm really happy to see that all of you also value that all right so those are the last 10 questions for my question day system I hope you learned something new there's an interesting new question generated every 3 days you can find over here on the website or go into your user page and sign up for the emails also if you need some awesome low poly acids check out the current humble mton that's going on this one is all about Cy assets and you've got a m of stuff that you can use to build all kinds of interesting games and all it for just 25 bucks all right hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time
