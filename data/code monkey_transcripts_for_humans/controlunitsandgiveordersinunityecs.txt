With timestamps:

00:00 - in this video we're going to handle unit
00:02 - selection and control in unity ECS we're
00:05 - going to make various systems and
00:06 - components don't listen to input and
00:08 - give commands let's begin
00:12 - [Music]
00:17 - hello and welcome I'm your code monkey
00:19 - and this channel is all about helping
00:20 - you learn how to make your own games
00:22 - with nf2 torrents made by a professional
00:24 - indie game developer so if you find the
00:26 - video helpful consider subscribing so
00:28 - this is what we want to create we have a
00:30 - bunch of units in our scene and they are
00:32 - all just standing around
00:33 - now using the mouse button I can click
00:35 - and drag to draw a selection area and
00:38 - all the units inside that area gets
00:40 - selected as you can see we can visually
00:41 - see the selection then by using the
00:44 - right mouse button I can give a move
00:46 - order to tell the units to go to a
00:47 - certain position the positions that they
00:50 - go to are dynamically generated so some
00:52 - like those and as you can see they do
00:53 - not overlap they all go into various
00:55 - positions around our target position so
00:58 - here I can select all of them tell them
01:00 - all to go there and they all go into
01:02 - different positions and none of them are
01:03 - overlapping and everything looks good so
01:06 - I can select just a bunch of them and
01:08 - tell them to go there they're there and
01:10 - so on I can also just click on a unit to
01:13 - select each one individually so just
01:16 - like this we have a very nice RTS unit
01:19 - control system so this is our zone let's
01:22 - get to it so here we are in our scene
01:24 - and first server sir you just have a
01:26 - simple entity being spawned there's no
01:28 - input no controls and I can't do
01:30 - anything so let's look at the code to
01:32 - see how we're spawning this over here we
01:34 - have our main script and down here we go
01:37 - into our start we are just setting up
01:40 - the camera initializing the animations
01:42 - and in here we are spawning our unit we
01:45 - randomized the spawn position and here
01:47 - is our entity so we create an entity
01:50 - archetype
01:51 - first of all with marine component this
01:53 - is just a simple empty tag component
01:55 - then we have the translation for the
01:57 - position a move to which we're going to
01:59 - use in order to give our unit some
02:01 - commands and then some simple animation
02:04 - components so again just a basic unit
02:06 - being spawned and here he is just
02:08 - standing around okay crit now let's get
02:11 - started and listening to our input so
02:13 - we're here on our project files and
02:15 - let's create a new C sharp script and
02:17 - we're going to call this the unit
02:18 - control system now in here we're working
02:22 - with ECS so instead of a mono behavior
02:24 - this will be a
02:25 - component system okay so we have our
02:37 - nice update function and now in here
02:39 - let's do a very simple listen to our
02:41 - mouse input so we do if input not get
02:44 - mouse button down on the Left mouse
02:47 - button so button zero so here we have
02:52 - our mouse pressed and then we have in
02:56 - here we have the mouse released okay so
02:59 - we now know when the player presses and
03:01 - releases the mouse now we're trying to
03:03 - control our units so that means we need
03:04 - to know the selection area so we need to
03:07 - know when we started pressing the mouse
03:08 - and when we release it so here let's
03:11 - store the starting position so store a
03:14 - private point three for the start
03:16 - position and then here we set it on the
03:21 - mouse world position so for that I'm
03:23 - going to use a function from the code
03:25 - mock utilities that you can grab for
03:26 - free from unity code montcalm here I got
03:32 - a function that returns the mouse run
03:33 - position
03:34 - okay so we have our start position that
03:37 - is set when we press our mouse and now
03:39 - when we release we have our end position
03:43 - and now we'd start at the end we can do
03:46 - some simple math in order to get our
03:47 - selected area corners
04:03 - so here we have our lower left and upper
04:05 - right position we just do a method min
04:08 - and Method Max in order to calculate it
04:10 - and now with the lower left and upper
04:12 - right essentially we have our selection
04:14 - area so we need to do is figure out
04:16 - which units are inside that area so in
04:19 - here let's I go through our entities so
04:21 - entities for each in here well let's
04:27 - grab the translation components so we
04:34 - need to do is test it there inside the
04:36 - selection area so if the entity position
04:40 - dot X is bigger than the lower left
04:57 - so if the position is within our bounds
05:01 - then let's just do a simple debugged
05:03 - unlock the scene so do a debug log of
05:06 - our entity all right so let's s and we
05:09 - should be able to see various logs
05:10 - depending on how many some entities we
05:12 - have selected so here we are in here the
05:15 - console if I just click on nowhere then
05:17 - we see nothing but if I start in here
05:19 - and let go in here yep there you go
05:21 - there's our entity it was neat inside
05:22 - our selection area now let's see with
05:25 - two entities okay here we have two
05:27 - entities starting here stop in here and
05:29 - yep there's nothing started here stop
05:31 - there and yep entity 1 1 start let go
05:35 - and yep 0 1 and I was like both of them
05:37 - and if there is only both ok awesome so
05:40 - we are now correctly identifying which
05:42 - entities are inside our selection area
05:44 - all right now before we make a component
05:46 - to actually select our units let's make
05:48 - a visual to be able to see our selection
05:50 - area so this won't be very simple in
05:53 - here let's just make an empty game
05:55 - object this will be the selection area
05:57 - and now inside let's make another empty
06:00 - game object this will be the sprite add
06:03 - the sprite renderer component add our
06:06 - simple white pixel let's tint it and
06:14 - here and let's just shift the sprite to
06:17 - that corner so put it on 0.5 and 0.5 so
06:20 - that way the pivot right there on the
06:22 - parent is on the lower left so just like
06:24 - that we can easily place this transform
06:27 - wherever we start and then we scale it
06:29 - to reach our end position all right
06:33 - that's it very simple and by default
06:34 - let's start with it disabled so that
06:36 - it's hidden now the first thing we need
06:38 - to do is actually have a reference for
06:40 - it now when using ECS we don't have
06:43 - instances of our systems attached the
06:45 - game objects so in here we can't just
06:47 - add a serialized field
06:48 - so in order to grab our reference let's
06:50 - go into our main script and appear at
06:52 - our field so this will be our transform
06:57 - for the selection area transform
07:01 - okay now in the editor just drag our
07:03 - reference here's our script and just
07:06 - drag the selection area okay so now we
07:08 - have our reference in here obviously if
07:11 - you were using this improper game you
07:12 - would manage your references better but
07:14 - for now just for testing this works fun
07:16 - so we have our static instance which is
07:19 - set on our wake so we can access this
07:21 - instance in order to access our treasure
07:22 - so let's go into our control system and
07:25 - now the first thing we need to do is
07:26 - make it visible when we have the mouse
07:27 - down so in here when you start pressing
07:29 - our mouse let's go into our main script
07:33 - to access the instance and the selection
07:36 - area transform and we just go to the
07:38 - game object set active with your true
07:42 - then we're going to let go we want to
07:44 - hide it so we set it back into false and
07:47 - now here in the middle is when we need
07:49 - to actually scale it so let's you if
07:51 - input dot get mouse button on the same
07:55 - mouse button so this code runs one of
08:01 - the mouse's hometown so in here we just
08:04 - need to actually scale it so if we're
08:06 - have a flow tree for the selection area
08:09 - size and some missionary size is the
08:11 - current Mouse or opposition minus the
08:13 - start position and then we just set the
08:18 - welcome scale in here and when we press
08:24 - on the mouse button we also need to
08:25 - locate it so in there we scale it and in
08:28 - here we set the position so the position
08:30 - won't be the start position all right
08:35 - that you do it let's test okay here we
08:37 - are let's see press the mouse button
08:39 - drag in any up there's our nice
08:40 - selection area right there
08:42 - okay so as you can see in here it's not
08:44 - selecting any and there yep we sound
08:46 - like one there's like another one and
08:48 - select both okay awesome so everything
08:50 - is working correctly alright so with our
08:53 - visual selection area working let's
08:55 - actually sound like there are units the
08:57 - way we're going to select them is with a
08:59 - very simple tag component so let's go in
09:01 - here simply make a public struct this
09:03 - won't be the unit
09:04 - weapon and it's a I component down here
09:10 - this is just a simple tag so we're not
09:12 - going to add any fields and now down
09:15 - here when we are locating our units
09:17 - inside the selection area all we need to
09:22 - do is add our tag component so we're
09:26 - going to the post update commands to add
09:27 - a component to this entity add the
09:31 - unit's selected component alright that
09:39 - you do it
09:40 - let's test here we have our two units
09:42 - let's try something just this one okay
09:45 - now let's look at the entity debugger
09:46 - and here we are and you can see that
09:49 - this one does not have and this one does
09:51 - have the unit selected component okay
09:53 - awesome
09:53 - now that we have our selected component
09:56 - being added let's make a system in order
09:58 - to actually visually see it so in here
10:01 - let's make a public we're going to call
10:03 - this the unit selected renderer and it's
10:06 - a component system now in here we cycle
10:13 - through all the units that have the
10:14 - selected components
10:23 - so we are cycling through entities that
10:26 - have the unit selected component and
10:27 - grabbing their translation and now in
10:30 - here let's just do a simple draw mesh so
10:32 - we do a graphic start draw mesh now in
10:36 - here we need a mesh and material so
10:39 - let's add that into our main script so
10:42 - here we add a material for the unit
10:46 - selected circle material and also a mesh
10:53 - okay now for the mesh we can meet the
10:56 - mesh through code so in here we create
11:00 - the mesh
11:01 - already have a nice function to create
11:03 - just that it takes a mesh width and a
11:05 - mesh height so let's try some values
11:08 - here is the create mesh function as you
11:11 - can see it's very simple it just creates
11:12 - a simple quad through code so we have
11:14 - four vertices for UVs and our triangles
11:17 - and similarly creates a mesh and assign
11:19 - them so very simple code all right now
11:22 - let's take care of our material so here
11:25 - we make a new material this won't be the
11:28 - selected circle material and over here I
11:33 - have a nice sprite which is a circle so
11:36 - we can use just that and here for the
11:38 - color
11:38 - let's tint it in green alright great so
11:41 - this is our material now let's drag the
11:44 - references here on the game Handler and
11:46 - we just need to drag the selected circle
11:48 - material and the mesh is created through
11:50 - code okay so we have our references for
11:52 - the things we need now back into the
11:54 - control system and here we can out
11:57 - render that so we grab the instance grab
12:01 - the mesh for the position let's pass in
12:05 - translation dot value returning that
12:09 - identity since we don't want rotation
12:10 - now for the material
12:16 - and finally I'm layer 0 alright so we
12:24 - have our very simple unit selected
12:26 - brender which is going to draw mesh on
12:28 - top of all the units that are selected
12:30 - so let's see okay here we are and none
12:33 - of them is life did something like
12:34 - nothing and if nothing happens now some
12:36 - like this one any of there you go
12:37 - there's a sound like the mesh now we
12:40 - obviously need to move it and sort it
12:41 - correctly but yep the mesh is being
12:43 - drunk and if we sound like this one yep
12:45 - there you go also in there ok awesome ok
12:56 - again let's see and yep now it looks
12:58 - much better
12:58 - it's behind it and yep it's correctly
13:00 - place ok great now however we do have
13:03 - one tiny issue in here when we select
13:06 - the unit we can already selected so
13:09 - right now if I select nothing it should
13:11 - decent like these two but it currently
13:12 - doesn't so let's solve that now we can
13:15 - solve this in a very very simple way in
13:17 - here let's go when we release our mouse
13:20 - one position come only two positions
13:21 - okay and in here before we do our
13:24 - selection we can simply deselect
13:25 - everything so in here we just cycle
13:28 - through entities with the unit selected
13:32 - component when we do it for each ok so
13:39 - in here we are cycling through all the
13:41 - entities that have the unit select
13:42 - component in order to deselect it all we
13:45 - need to do is actually remove the
13:46 - component so again go into the post
13:48 - update commands in order to remove the
13:50 - component of type in its selected and
13:54 - that's it
13:56 - so first we deselect everything on
13:58 - Whitney so first we deselect every
14:00 - single entity and then we sound like the
14:02 - ones inside the error
14:08 - okay let's see okay so here we are now I
14:12 - can select nothing and yet nothing is
14:13 - selected now some like this one okay
14:15 - it's selected now some like nothing and
14:17 - it should deselect and if there it is it
14:19 - decent light so I can select decent like
14:21 - both them decent let's like this one
14:23 - then this one okay awesome so we have
14:24 - all our controls correctly working
14:26 - exactly as intended
14:28 - now another potential issue we have is
14:30 - the size of the selection area so right
14:33 - now our system works great when we want
14:35 - to drag from A to B so start here and
14:37 - stop here and yep it's like correctly
14:39 - however in the current system it's very
14:41 - difficult to select just one unit so if
14:44 - I click right on top this one I can't
14:45 - actually select it I need to make a
14:48 - small bounding box in order to actually
14:49 - get it
14:50 - so when solution to this problem is to
14:52 - simply check the size of our selection
14:54 - area and if it's too small we
14:55 - automatically increase it so let's do
14:57 - that here in our control system when you
15:00 - release the mouse we have the in lower
15:03 - left and upper right positions and now
15:05 - in here and let's do a simple distance
15:07 - check so we do if math dot distance
15:10 - between the lower left and the upper
15:12 - right if that distance is under a
15:16 - certain amount so in here a float for
15:17 - the selection area means size
15:25 - so if the size the selection area is
15:27 - under this amount then we want to
15:29 - increase it so here if the selection
15:37 - area is too small let's expand it so we
15:39 - move the lower left position we increase
15:42 - it okay so we essentially expand the
15:55 - lower left in the upper right positions
15:56 - then the rest of our logic works exactly
15:58 - the same with both of our updated values
16:00 - so let's see okay so here we are in the
16:03 - normal selection yep it still works now
16:06 - if I just click on him yep there you go
16:08 - it's unlike that one click and select
16:09 - okay awesome so we no longer need to
16:11 - create a bounding box in order to select
16:13 - each other alright now that we have our
16:16 - unit selection working let's see how we
16:17 - can give them orders we have the on left
16:21 - mouse button to select and now we're
16:22 - going to use the right mouse button in
16:24 - order to give a move order so again here
16:26 - on our system let's do a if input get
16:32 - mouse button down but in this case we
16:34 - want the right mouse button so button
16:35 - one if we press the right mouse button
16:42 - let's give an order to all of our
16:44 - selected units so we're going to do a
16:47 - cycle very much like this one so I go
16:51 - through all the units emitted and in
16:53 - here we give the order now in this
16:55 - example as you saw on our archetype in
16:58 - here we have the move to component this
17:01 - what's handling a very simple move to so
17:03 - let's see the component we have a
17:04 - boolean to see if this unit is moving a
17:06 - position that it's moving towards any
17:09 - movement speed then we have this system
17:12 - which as you can see very simple widget
17:14 - says distance towards the target
17:16 - position and if we are too far we move
17:18 - towards it and if we're wrong right
17:20 - there we stop moving
17:21 - okay so extremely simple movement so
17:24 - let's go and do that so in here we need
17:26 - our entity then also a reference to
17:28 - remove two components now we need to do
17:32 - is set the move to position to be our
17:34 - mouse were on position
17:39 - okay that should do it so when we press
17:41 - the right mouse button we go through
17:43 - every single unit that is selected and
17:45 - we tell it to go to the mouse position
17:47 - let's see okay so here we are and if no
17:50 - unit is selected I press it right mouse
17:51 - button now there is only nothing happens
17:53 - now something like this one now right
17:55 - click any of there you go we told that
17:57 - unit to go there and it did indeed go so
18:00 - some like that one now some like that
18:01 - one time to go and yep we have our
18:02 - orders okay awesome so we can now select
18:04 - our units and give them orders to each
18:06 - of them so that is working but one issue
18:09 - we have is regarding overlapping units
18:11 - so in here if a unit is right on top of
18:14 - the other one and we saw like both of
18:15 - them and tell them to go there and they
18:17 - both go example into the same position
18:19 - so right now we can no longer actually
18:20 - separate them because if I click on
18:22 - there he's going to automatically select
18:24 - both them now we can solve this
18:26 - selection problem very simple we test if
18:28 - we are doing a normal click and if so
18:30 - we're only going to select a single unit
18:32 - so in this case we would be able to
18:33 - select just one push it to the side and
18:35 - then they would be separate
18:37 - okay let's do it all we need to go is go
18:39 - up here so in here we define a vote
18:42 - let's say the select only one entity and
18:46 - by default we start at false because by
18:47 - default we want to smell it mob talk and
18:49 - only in here when the selection area is
18:51 - too small then we set it to true so we
18:53 - select only one entity and in here let's
18:56 - make him in for the selected entity
18:59 - counts and we increase it when we select
19:04 - an entity and we're only going to run
19:06 - this code if the select only one entity
19:11 - is false so we are meant to select
19:14 - multiple or this selected entity count
19:17 - is under one
19:22 - so this way when we do a simple plague
19:24 - we won't select just one entity but when
19:26 - we do a selection area we don't select
19:28 - all them let's see okay here we are and
19:31 - select one yup it works give it a
19:32 - movement works right down works now some
19:35 - like both them put them both one on top
19:37 - of the other and now I can select one
19:38 - and yep it only selected one since they
19:41 - are both overlapping if I do a simple
19:43 - click
19:43 - then just select one unit so smite them
19:46 - both they're both on top and yep like
19:48 - that okay great so that's another simple
19:50 - problem that we have solved okay so far
19:53 - so good we have our unit selection and
19:55 - control now we have some of the
19:58 - overlapping problem if two units are
20:01 - overlapping and we click we can now
20:02 - separate them however we still have the
20:04 - issue that both of them go exactly into
20:06 - the same position so here with four
20:09 - units it becomes quite a bit of problem
20:11 - if they all go example into the same
20:13 - position that looks quite bad so we
20:16 - should really be giving each unit a
20:18 - different position so we want to
20:20 - calculate positions around the target
20:21 - position so that each unit goes to a
20:24 - different position but near the target
20:25 - position let's do that here in our
20:28 - control system let's go down here this
20:30 - is where we're telling our units to move
20:32 - now let's generate a list of positions
20:34 - so in here a list of three let's make
20:37 - the move position a list and right now
20:41 - let's just manually make the enlists so
20:45 - in here the first one will be the target
20:47 - position so let's make here if all three
20:49 - for the target position which will be
20:51 - the mouse world position
20:58 - so this is our first position and now
21:01 - let's put a second position right on the
21:03 - right okay so here we have only sweet
21:10 - four different positions now when we
21:12 - tell the unit to go somewhere let's give
21:15 - it a position from our list so let's
21:17 - make a rotating index so an int for the
21:20 - position in index and we start at zero
21:22 - and in here we give it a position from
21:25 - the move position list of position index
21:28 - so that one gets that position and then
21:31 - we increase our index so index equals
21:34 - our index plus 1 and grab the remainder
21:37 - of the move position unless that counts
21:41 - so if we have more in and selected and
21:44 - positions in here we simply rotate them
21:46 - so let's see if the units are need going
21:47 - to different positions let's select all
21:50 - four move them all in there and if they
21:53 - all went to different positions okay
21:55 - great now here we have 10 units let's
21:58 - select all of them tell them to move and
22:00 - yep now we have some overlap since it is
22:02 - reusing positions okay
22:03 - so the logic is working and all we
22:05 - really need is to create more positions
22:07 - let's make a simple function to
22:09 - automatically generate positions within
22:11 - a circle let's make that function so a
22:14 - private this will return a list of all
22:16 - three let's call this to get position
22:18 - list around since we're going to get the
22:21 - positions around a target position so if
22:24 - all three for our starting position then
22:27 - let's receive a float for the distance
22:29 - and an end for the position count so
22:34 - we're going to automatically generate
22:35 - this many positions within this distance
22:37 - of this position
22:47 - so we do a cycle through all of the
22:49 - positions let's complete the angle for
22:52 - this index so we define a circle between
22:58 - this number of positions so here let's
23:03 - get a direction vector based on this
23:05 - angle so let's make a function to do
23:08 - just that I'll return a.load 3 so here
23:21 - we have a function where we take a
23:22 - vector and we apply an angle to it and
23:34 - then we can relate the position based on
23:36 - the start position and then we move
23:38 - towards the direction by that distance
23:41 - and then we simply add it to our
23:42 - positional lists okay so we are
23:47 - generating as many positions as we want
23:49 - let's just restart position up here and
23:54 - now we can use this function let's go in
23:55 - here in order to get our move position
23:57 - list so we're going to grab it using our
23:59 - function for the start position from be
24:01 - the target position for the distance
24:04 - let's put 10 units away and position
24:07 - come let's just generate 5 so let's see
24:09 - what that works so you should have 5
24:14 - positions pause our target position in a
24:16 - circle within 10 units of the target
24:18 - position okay here we are select the
24:21 - mount on the mom to go there any of
24:23 - there you go as you can see it did
24:24 - generate 5 positions around our target
24:26 - position all right
24:28 - so that logic is working now let's push
24:31 - it one step further in order to generate
24:33 - in various rings outside of our target
24:36 - position so this would be the first ring
24:37 - then we would have another one outside
24:39 - another one outside
24:40 - let's do
25:15 - okay here's our function we take a start
25:18 - position then an array of ring distances
25:20 - M array of position counts we start by
25:23 - adding the start position then we sign
25:25 - on through all of the Rings and we count
25:26 - like those positions using our function
25:28 - so now we can go up here instead of
25:31 - using this let's use the other version
25:33 - so we pass in the start position then we
25:35 - pass in an array of floats for our ring
25:38 - distance so the first ring won't be ten
25:45 - units away the second one 20 then 30 and
25:48 - for the positions first ring we'll have
25:54 - five positions in the second one ten and
25:56 - the third one twenty alright so just
25:59 - like this we are already generating a
26:01 - lot of different positions now let's see
26:03 - here's our 10 units and like all of them
26:06 - I'm about to go here and there they go
26:09 - any up there you go they all went into
26:11 - different positions so now I can move
26:13 - all of them I can select some go in
26:14 - there so I'm going there and you
26:16 - everything worked great let's add more
26:18 - units okay here we have three keys like
26:21 - all of them tell them all to go right
26:23 - there and they all go into different
26:25 - positions so everything looks very nice
26:26 - and now we have a very nice arm no it's
26:29 - not like just those like just those just
26:31 - those any of we have multiple squads in
26:34 - a nice RTS unit control system now if
26:37 - you want you could further improve this
26:38 - by adding some sort of validation based
26:40 - on pathfinding or just doing some simple
26:43 - physics free casts so you generate on
26:45 - positions and then you validate which
26:47 - ones are valid so here with our full
26:50 - system we can click insert drag and
26:53 - select all the units inside a selection
26:56 - we can also just click on one of them
26:58 - and move it individual we are giving our
27:01 - orders by right-clicking on a unit and
27:03 - telling it to move and all our units
27:06 - move to positions that are generated
27:07 - around a target move position so just
27:10 - like that we have a very nice
27:11 - RTS unit control system as always you
27:15 - can download the project files in its
27:16 - own lease from mentok of Montcalm if you
27:19 - liked the video subscribe to the channel
27:20 - for more unity tutorials post any
27:22 - questions you have in the comments and
27:23 - I'll do my best answer alright see you
27:25 - next time
27:26 - [Music]

Cleaned transcript:

in this video we're going to handle unit selection and control in unity ECS we're going to make various systems and components don't listen to input and give commands let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with nf2 torrents made by a professional indie game developer so if you find the video helpful consider subscribing so this is what we want to create we have a bunch of units in our scene and they are all just standing around now using the mouse button I can click and drag to draw a selection area and all the units inside that area gets selected as you can see we can visually see the selection then by using the right mouse button I can give a move order to tell the units to go to a certain position the positions that they go to are dynamically generated so some like those and as you can see they do not overlap they all go into various positions around our target position so here I can select all of them tell them all to go there and they all go into different positions and none of them are overlapping and everything looks good so I can select just a bunch of them and tell them to go there they're there and so on I can also just click on a unit to select each one individually so just like this we have a very nice RTS unit control system so this is our zone let's get to it so here we are in our scene and first server sir you just have a simple entity being spawned there's no input no controls and I can't do anything so let's look at the code to see how we're spawning this over here we have our main script and down here we go into our start we are just setting up the camera initializing the animations and in here we are spawning our unit we randomized the spawn position and here is our entity so we create an entity archetype first of all with marine component this is just a simple empty tag component then we have the translation for the position a move to which we're going to use in order to give our unit some commands and then some simple animation components so again just a basic unit being spawned and here he is just standing around okay crit now let's get started and listening to our input so we're here on our project files and let's create a new C sharp script and we're going to call this the unit control system now in here we're working with ECS so instead of a mono behavior this will be a component system okay so we have our nice update function and now in here let's do a very simple listen to our mouse input so we do if input not get mouse button down on the Left mouse button so button zero so here we have our mouse pressed and then we have in here we have the mouse released okay so we now know when the player presses and releases the mouse now we're trying to control our units so that means we need to know the selection area so we need to know when we started pressing the mouse and when we release it so here let's store the starting position so store a private point three for the start position and then here we set it on the mouse world position so for that I'm going to use a function from the code mock utilities that you can grab for free from unity code montcalm here I got a function that returns the mouse run position okay so we have our start position that is set when we press our mouse and now when we release we have our end position and now we'd start at the end we can do some simple math in order to get our selected area corners so here we have our lower left and upper right position we just do a method min and Method Max in order to calculate it and now with the lower left and upper right essentially we have our selection area so we need to do is figure out which units are inside that area so in here let's I go through our entities so entities for each in here well let's grab the translation components so we need to do is test it there inside the selection area so if the entity position dot X is bigger than the lower left so if the position is within our bounds then let's just do a simple debugged unlock the scene so do a debug log of our entity all right so let's s and we should be able to see various logs depending on how many some entities we have selected so here we are in here the console if I just click on nowhere then we see nothing but if I start in here and let go in here yep there you go there's our entity it was neat inside our selection area now let's see with two entities okay here we have two entities starting here stop in here and yep there's nothing started here stop there and yep entity 1 1 start let go and yep 0 1 and I was like both of them and if there is only both ok awesome so we are now correctly identifying which entities are inside our selection area all right now before we make a component to actually select our units let's make a visual to be able to see our selection area so this won't be very simple in here let's just make an empty game object this will be the selection area and now inside let's make another empty game object this will be the sprite add the sprite renderer component add our simple white pixel let's tint it and here and let's just shift the sprite to that corner so put it on 0.5 and 0.5 so that way the pivot right there on the parent is on the lower left so just like that we can easily place this transform wherever we start and then we scale it to reach our end position all right that's it very simple and by default let's start with it disabled so that it's hidden now the first thing we need to do is actually have a reference for it now when using ECS we don't have instances of our systems attached the game objects so in here we can't just add a serialized field so in order to grab our reference let's go into our main script and appear at our field so this will be our transform for the selection area transform okay now in the editor just drag our reference here's our script and just drag the selection area okay so now we have our reference in here obviously if you were using this improper game you would manage your references better but for now just for testing this works fun so we have our static instance which is set on our wake so we can access this instance in order to access our treasure so let's go into our control system and now the first thing we need to do is make it visible when we have the mouse down so in here when you start pressing our mouse let's go into our main script to access the instance and the selection area transform and we just go to the game object set active with your true then we're going to let go we want to hide it so we set it back into false and now here in the middle is when we need to actually scale it so let's you if input dot get mouse button on the same mouse button so this code runs one of the mouse's hometown so in here we just need to actually scale it so if we're have a flow tree for the selection area size and some missionary size is the current Mouse or opposition minus the start position and then we just set the welcome scale in here and when we press on the mouse button we also need to locate it so in there we scale it and in here we set the position so the position won't be the start position all right that you do it let's test okay here we are let's see press the mouse button drag in any up there's our nice selection area right there okay so as you can see in here it's not selecting any and there yep we sound like one there's like another one and select both okay awesome so everything is working correctly alright so with our visual selection area working let's actually sound like there are units the way we're going to select them is with a very simple tag component so let's go in here simply make a public struct this won't be the unit weapon and it's a I component down here this is just a simple tag so we're not going to add any fields and now down here when we are locating our units inside the selection area all we need to do is add our tag component so we're going to the post update commands to add a component to this entity add the unit's selected component alright that you do it let's test here we have our two units let's try something just this one okay now let's look at the entity debugger and here we are and you can see that this one does not have and this one does have the unit selected component okay awesome now that we have our selected component being added let's make a system in order to actually visually see it so in here let's make a public we're going to call this the unit selected renderer and it's a component system now in here we cycle through all the units that have the selected components so we are cycling through entities that have the unit selected component and grabbing their translation and now in here let's just do a simple draw mesh so we do a graphic start draw mesh now in here we need a mesh and material so let's add that into our main script so here we add a material for the unit selected circle material and also a mesh okay now for the mesh we can meet the mesh through code so in here we create the mesh already have a nice function to create just that it takes a mesh width and a mesh height so let's try some values here is the create mesh function as you can see it's very simple it just creates a simple quad through code so we have four vertices for UVs and our triangles and similarly creates a mesh and assign them so very simple code all right now let's take care of our material so here we make a new material this won't be the selected circle material and over here I have a nice sprite which is a circle so we can use just that and here for the color let's tint it in green alright great so this is our material now let's drag the references here on the game Handler and we just need to drag the selected circle material and the mesh is created through code okay so we have our references for the things we need now back into the control system and here we can out render that so we grab the instance grab the mesh for the position let's pass in translation dot value returning that identity since we don't want rotation now for the material and finally I'm layer 0 alright so we have our very simple unit selected brender which is going to draw mesh on top of all the units that are selected so let's see okay here we are and none of them is life did something like nothing and if nothing happens now some like this one any of there you go there's a sound like the mesh now we obviously need to move it and sort it correctly but yep the mesh is being drunk and if we sound like this one yep there you go also in there ok awesome ok again let's see and yep now it looks much better it's behind it and yep it's correctly place ok great now however we do have one tiny issue in here when we select the unit we can already selected so right now if I select nothing it should decent like these two but it currently doesn't so let's solve that now we can solve this in a very very simple way in here let's go when we release our mouse one position come only two positions okay and in here before we do our selection we can simply deselect everything so in here we just cycle through entities with the unit selected component when we do it for each ok so in here we are cycling through all the entities that have the unit select component in order to deselect it all we need to do is actually remove the component so again go into the post update commands in order to remove the component of type in its selected and that's it so first we deselect everything on Whitney so first we deselect every single entity and then we sound like the ones inside the error okay let's see okay so here we are now I can select nothing and yet nothing is selected now some like this one okay it's selected now some like nothing and it should deselect and if there it is it decent light so I can select decent like both them decent let's like this one then this one okay awesome so we have all our controls correctly working exactly as intended now another potential issue we have is the size of the selection area so right now our system works great when we want to drag from A to B so start here and stop here and yep it's like correctly however in the current system it's very difficult to select just one unit so if I click right on top this one I can't actually select it I need to make a small bounding box in order to actually get it so when solution to this problem is to simply check the size of our selection area and if it's too small we automatically increase it so let's do that here in our control system when you release the mouse we have the in lower left and upper right positions and now in here and let's do a simple distance check so we do if math dot distance between the lower left and the upper right if that distance is under a certain amount so in here a float for the selection area means size so if the size the selection area is under this amount then we want to increase it so here if the selection area is too small let's expand it so we move the lower left position we increase it okay so we essentially expand the lower left in the upper right positions then the rest of our logic works exactly the same with both of our updated values so let's see okay so here we are in the normal selection yep it still works now if I just click on him yep there you go it's unlike that one click and select okay awesome so we no longer need to create a bounding box in order to select each other alright now that we have our unit selection working let's see how we can give them orders we have the on left mouse button to select and now we're going to use the right mouse button in order to give a move order so again here on our system let's do a if input get mouse button down but in this case we want the right mouse button so button one if we press the right mouse button let's give an order to all of our selected units so we're going to do a cycle very much like this one so I go through all the units emitted and in here we give the order now in this example as you saw on our archetype in here we have the move to component this what's handling a very simple move to so let's see the component we have a boolean to see if this unit is moving a position that it's moving towards any movement speed then we have this system which as you can see very simple widget says distance towards the target position and if we are too far we move towards it and if we're wrong right there we stop moving okay so extremely simple movement so let's go and do that so in here we need our entity then also a reference to remove two components now we need to do is set the move to position to be our mouse were on position okay that should do it so when we press the right mouse button we go through every single unit that is selected and we tell it to go to the mouse position let's see okay so here we are and if no unit is selected I press it right mouse button now there is only nothing happens now something like this one now right click any of there you go we told that unit to go there and it did indeed go so some like that one now some like that one time to go and yep we have our orders okay awesome so we can now select our units and give them orders to each of them so that is working but one issue we have is regarding overlapping units so in here if a unit is right on top of the other one and we saw like both of them and tell them to go there and they both go example into the same position so right now we can no longer actually separate them because if I click on there he's going to automatically select both them now we can solve this selection problem very simple we test if we are doing a normal click and if so we're only going to select a single unit so in this case we would be able to select just one push it to the side and then they would be separate okay let's do it all we need to go is go up here so in here we define a vote let's say the select only one entity and by default we start at false because by default we want to smell it mob talk and only in here when the selection area is too small then we set it to true so we select only one entity and in here let's make him in for the selected entity counts and we increase it when we select an entity and we're only going to run this code if the select only one entity is false so we are meant to select multiple or this selected entity count is under one so this way when we do a simple plague we won't select just one entity but when we do a selection area we don't select all them let's see okay here we are and select one yup it works give it a movement works right down works now some like both them put them both one on top of the other and now I can select one and yep it only selected one since they are both overlapping if I do a simple click then just select one unit so smite them both they're both on top and yep like that okay great so that's another simple problem that we have solved okay so far so good we have our unit selection and control now we have some of the overlapping problem if two units are overlapping and we click we can now separate them however we still have the issue that both of them go exactly into the same position so here with four units it becomes quite a bit of problem if they all go example into the same position that looks quite bad so we should really be giving each unit a different position so we want to calculate positions around the target position so that each unit goes to a different position but near the target position let's do that here in our control system let's go down here this is where we're telling our units to move now let's generate a list of positions so in here a list of three let's make the move position a list and right now let's just manually make the enlists so in here the first one will be the target position so let's make here if all three for the target position which will be the mouse world position so this is our first position and now let's put a second position right on the right okay so here we have only sweet four different positions now when we tell the unit to go somewhere let's give it a position from our list so let's make a rotating index so an int for the position in index and we start at zero and in here we give it a position from the move position list of position index so that one gets that position and then we increase our index so index equals our index plus 1 and grab the remainder of the move position unless that counts so if we have more in and selected and positions in here we simply rotate them so let's see if the units are need going to different positions let's select all four move them all in there and if they all went to different positions okay great now here we have 10 units let's select all of them tell them to move and yep now we have some overlap since it is reusing positions okay so the logic is working and all we really need is to create more positions let's make a simple function to automatically generate positions within a circle let's make that function so a private this will return a list of all three let's call this to get position list around since we're going to get the positions around a target position so if all three for our starting position then let's receive a float for the distance and an end for the position count so we're going to automatically generate this many positions within this distance of this position so we do a cycle through all of the positions let's complete the angle for this index so we define a circle between this number of positions so here let's get a direction vector based on this angle so let's make a function to do just that I'll return a.load 3 so here we have a function where we take a vector and we apply an angle to it and then we can relate the position based on the start position and then we move towards the direction by that distance and then we simply add it to our positional lists okay so we are generating as many positions as we want let's just restart position up here and now we can use this function let's go in here in order to get our move position list so we're going to grab it using our function for the start position from be the target position for the distance let's put 10 units away and position come let's just generate 5 so let's see what that works so you should have 5 positions pause our target position in a circle within 10 units of the target position okay here we are select the mount on the mom to go there any of there you go as you can see it did generate 5 positions around our target position all right so that logic is working now let's push it one step further in order to generate in various rings outside of our target position so this would be the first ring then we would have another one outside another one outside let's do okay here's our function we take a start position then an array of ring distances M array of position counts we start by adding the start position then we sign on through all of the Rings and we count like those positions using our function so now we can go up here instead of using this let's use the other version so we pass in the start position then we pass in an array of floats for our ring distance so the first ring won't be ten units away the second one 20 then 30 and for the positions first ring we'll have five positions in the second one ten and the third one twenty alright so just like this we are already generating a lot of different positions now let's see here's our 10 units and like all of them I'm about to go here and there they go any up there you go they all went into different positions so now I can move all of them I can select some go in there so I'm going there and you everything worked great let's add more units okay here we have three keys like all of them tell them all to go right there and they all go into different positions so everything looks very nice and now we have a very nice arm no it's not like just those like just those just those any of we have multiple squads in a nice RTS unit control system now if you want you could further improve this by adding some sort of validation based on pathfinding or just doing some simple physics free casts so you generate on positions and then you validate which ones are valid so here with our full system we can click insert drag and select all the units inside a selection we can also just click on one of them and move it individual we are giving our orders by rightclicking on a unit and telling it to move and all our units move to positions that are generated around a target move position so just like that we have a very nice RTS unit control system as always you can download the project files in its own lease from mentok of Montcalm if you liked the video subscribe to the channel for more unity tutorials post any questions you have in the comments and I'll do my best answer alright see you next time
