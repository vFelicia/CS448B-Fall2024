With timestamps:

00:00 - hello and welcome I'm your code monkey
00:02 - and here on let's learn how to use Unity
00:04 - really this is their tool for helping
00:06 - you handle multiplayer connections
00:07 - without needing dedicated servers and
00:09 - without asking your players to open
00:10 - ports and share IPS so there are no more
00:12 - issues with firewalls not and so on you
00:15 - just connect the ENT really get a join
00:17 - code share the code with your friends
00:18 - and then they can easily connect to the
00:20 - same server the other Unity tool which
00:22 - works very well with really is Lobby
00:24 - which I'm already covered in detail on
00:25 - the previous video
00:26 - when you combine both you don't even
00:28 - need to share the relay code you can do
00:30 - it automatically through a Lobby and
00:31 - I've also covered the unity's netcode
00:33 - library called netcode for game objects
00:35 - in another video all three of these
00:37 - tools are completely independent you can
00:38 - use just one or any combination of these
00:40 - but they are also made to very easily
00:42 - work with one another here in this video
00:44 - let's focus on the relay but that part
00:46 - is actually extremely simple it
00:47 - literally just takes three lines of code
00:49 - so I will also showcase how to use it in
00:52 - conjunction with netcode for game
00:53 - objects and lobby with that we can
00:55 - create a Lobby the second player can
00:57 - join the host starts the game and both
00:59 - players connect through the relay and
01:01 - play the game with netcode for game
01:02 - objects also this video is officially
01:04 - sponsored by Unity gaming services this
01:06 - is a collection of tools for helping you
01:08 - build operate and grow your games with
01:09 - ease it includes all of the tools that
01:11 - I'm going to mention here netcode for
01:13 - game objects for adding multiplayer to
01:15 - your games
01:16 - Lobby for joining players really for
01:19 - connecting them there's also a dedicated
01:21 - game server tool one for matchmaking
01:23 - vivox for Voice and text you have Cloud
01:26 - save for storing player that in the
01:27 - cloud cloudcon delivery for delivering
01:29 - SEO players you can explore your game
01:32 - analytics do some a b testing monetize
01:34 - with ads or do in-app purchases or a
01:36 - bunch more all of these symbols are
01:38 - either completely free or they have
01:39 - generous free tiers so click the link in
01:41 - the description to learn more about TNT
01:43 - gaming services and get started for free
01:44 - okay so here I will be starting from
01:47 - where I'm left off on the netcode for
01:48 - game objects video so I've got two
01:50 - builds right here and these two buttons
01:52 - where I can start as a host or a client
01:53 - so this one let's make it a host on this
01:55 - one let's make it a client and there you
01:57 - go both of them are connected in
01:59 - multiplayer
02:00 - all right great however the issue here
02:03 - is that the only reason why this is
02:05 - working is because I'm running on the
02:06 - exact same PC
02:07 - if I try to send this build over to a
02:09 - friend and have them connect it would
02:11 - not work
02:12 - it would have issues with firewall so I
02:13 - would have to manually open up ports and
02:15 - disable the firewall really is a tool
02:17 - that helps you solve that so you don't
02:18 - need to do that okay so here is a
02:21 - working demo using netcode for game
02:22 - objects but like I said really works by
02:24 - itself without net code for game objects
02:26 - so let's first look at the absolute
02:28 - Basics the first step is to install the
02:30 - package so let's open up the package
02:31 - manager let's go up here into DNT
02:33 - registry and then find over here the
02:36 - relay package so just go ahead and
02:38 - install this the next step is to set up
02:40 - a project on the NT dashboard
02:42 - so you can go here into edit project
02:44 - settings then go down into Services then
02:47 - make sure you're logged in and over here
02:49 - you can select the organization and
02:50 - create a project from here or if you
02:52 - already made the project in unity
02:54 - dashboard then you can click here and
02:55 - just sign the project I already created
02:57 - the project so over here I'm just going
02:58 - to select my project and just link the
03:00 - project okay the project is linked now
03:03 - let's go here into the NT dashboard make
03:06 - sure you select the project up here then
03:07 - on the left side let's select
03:09 - multiplayer and then over here let's go
03:11 - under relay and over here you should be
03:13 - able to see a button to enable it then
03:15 - you can go through the setup guide so
03:17 - first of all it tells you to link the
03:18 - project which we already did so let's go
03:19 - next then it tells us to install the
03:21 - package which we did on next and finally
03:24 - turn on the relay next and that's it if
03:27 - you want there are also some really nice
03:29 - samples that you can download to see how
03:30 - it all works okay so that's the basic
03:32 - setup done back in our project let's
03:35 - create a brand new c-sharp script let's
03:37 - call this test relay let's make a game
03:40 - object to run it
03:42 - attach the script and let's open okay so
03:45 - now here the first thing that we need is
03:47 - we need to initialize the unity services
03:49 - so let's make a private void start and
03:51 - on start let's do that by the way this
03:54 - initialization part for the unity
03:55 - services and authentication this one is
03:57 - the exact same as the lobby so if you've
03:59 - already seen that video you can fast
04:00 - forward this part there's time steps in
04:02 - the video so we go inside Unity Services
04:05 - which is inside unity.services.com so
04:08 - let's add that using in here and we just
04:10 - call initialize async now importantly
04:13 - this isn't awaitable so up here let's
04:15 - add a weight in order for this a way to
04:17 - run then we need to Define this function
04:19 - as async now if you're not familiar with
04:21 - async in a way don't worry too much
04:22 - about it you don't need to know how it
04:24 - works in order to use it but essentially
04:26 - what it does is it lets you run code
04:28 - asynchronously so for example over here
04:30 - this will send a request to ENT services
04:32 - to initialize the API that request goes
04:35 - over the Internet so it's not instant if
04:37 - you didn't make it async then the game
04:38 - would freeze and someone receives their
04:40 - reply
04:41 - that's the main purpose of async and
04:43 - weight with this your game does not
04:44 - freeze hit pause the execution of this
04:46 - function and the rest of the game keeps
04:48 - going so any code that we write down
04:50 - here it will not run immediately inside
04:53 - the execution won't pause in here until
04:54 - it receives a reply then when it does
04:56 - then this function continues executing
04:58 - but like I said you don't need to worry
05:00 - about it just don't forget the await and
05:02 - async keywords okay so this is all we
05:05 - need to initialize these Services then
05:07 - really requires authentication to use
05:09 - Unity authentication has tons of options
05:11 - you can link a Sim account Apple Android
05:14 - Facebook or open ID so you can use that
05:16 - to create an account and Link with any
05:18 - of those services or something super
05:20 - awesome which is you can just do a super
05:22 - quick Anonymous sign-in over here all we
05:24 - do is access the authentication Service
05:26 - this one right here inside UNT Services
05:29 - authentication and then we can access
05:31 - the static instance and then we call
05:33 - sign in anonymously async again this one
05:36 - is an available console let's await
05:38 - basically this will sign in anonymously
05:40 - and create an new account for this user
05:42 - if we want we can listen to the event to
05:44 - know when the sign in completes so again
05:46 - let's go into the authentication Service
05:48 - and listen to the signed in event
05:53 - so over here for example let's see we
05:54 - debug.log
05:57 - and we can go into the authentication
05:59 - Service instance in order to get the
06:01 - player ID we can do a quick test just to
06:03 - verify this is working
06:04 - and if there it is it's signed in and
06:06 - gave me this player ID okay so we have
06:09 - everything we need to start using the
06:10 - relay so let's begin by making a
06:12 - function so a private world let's call
06:14 - it create relay
06:16 - and over here the first thing we're
06:17 - going to do is create an allocation so
06:19 - for that we're going to access the relay
06:21 - service inside unity.services.relay
06:24 - on this one we access the static
06:26 - instance and we're going to create an
06:28 - allocation async and this one takes a
06:30 - parameter for the max number of
06:32 - connections importantly this does not
06:34 - include the host creating the allocation
06:36 - so for example if you have a four player
06:38 - game that means it's going to be the
06:40 - host plus three more players so over
06:42 - here you just put three then optionally
06:44 - you can also Define which region you
06:46 - want to create the allocation in
06:47 - or you can just leave it as empty and
06:49 - just let the relay decide which is the
06:51 - best region and again this one is an
06:53 - avoidable console let's await an async
06:56 - now one important thing about this
06:58 - function and really every relay function
07:00 - is that it can throw an exception if we
07:02 - do just like this and throws an
07:03 - exception then it's going to pretty much
07:04 - break our whole game we don't want that
07:06 - to happen so let's make sure to wrap
07:08 - these functions inside a try catch so
07:11 - try then catch and we can catch a relay
07:14 - service exception so really service
07:16 - exception
07:18 - and if that happens let's just do a
07:20 - debug log with this if we have any
07:22 - errors we will get some details on what
07:24 - went wrong like for example maybe the
07:26 - relay is disconnected or disabled or so
07:28 - on okay so with this over here we are
07:30 - going to return an allocation let's grab
07:32 - that object of type and location inside
07:34 - Unity services greenlee.models so our
07:37 - allocation
07:39 - and then with this allocation
07:41 - the next thing we need is to generate a
07:43 - join code so again let's go into the
07:45 - real estate service
07:46 - and access the instance and now let's
07:48 - get the join code async and we need to
07:51 - pass in the allocation ID so let's go
07:52 - into allocation and pass in the
07:54 - allocation ID
07:55 - then this is going to return a string so
07:57 - it's a string for our join code and
07:59 - again this is available so let's await
08:02 - okay so that's it it really is this
08:04 - simple with this we are creating an
08:06 - allocation on the relay and then getting
08:07 - the join code to join that on location
08:09 - the string that we get here is going to
08:11 - be the code which we can send to our
08:12 - friends so they can connect to the same
08:14 - relay let's do a quick test just see
08:16 - what this is doing and for testing like
08:18 - I was using in the netcode for game
08:20 - objects video over here I'm using the
08:21 - quantum console it's an excellent asset
08:24 - that lets you easily add a console I
08:25 - made a full review on it really awesome
08:27 - here it is especially useful so we can
08:30 - call this function
08:31 - so to do that I'm just going to add the
08:33 - attribute command
08:35 - with this I can easily call this
08:36 - function from the console now this is
08:38 - optional you don't have to use this
08:40 - asset you can call this function from
08:41 - wherever you want I'm just doing it like
08:43 - this just make it easier for the demo
08:45 - okay so with this let's test all right
08:47 - here we are we are signed in so now
08:49 - let's call our function to create the
08:51 - relay so let's run that and if there you
08:53 - go it did work so over here you can see
08:55 - that it pinged a whole bunch of servers
08:57 - in order to find the closest one
08:59 - and in my case I decide that the best
09:01 - region was Euro Quest 2 which makes
09:03 - sense since I'm in Portugal so yep
09:05 - everything worked correctly I just
09:07 - forgot to add a log for the join code so
09:08 - let's do that
09:09 - so over here after we get the joint code
09:11 - just to debug.log on the join code
09:14 - again let's create a relay and if there
09:17 - you go there we have our join code okay
09:20 - great so we create the allocation and we
09:22 - got the join code now the next step is
09:23 - to join using this code so over here
09:26 - let's make another function right void
09:28 - and let's call it join relay
09:30 - and we're going to receive a string for
09:32 - the join code then over here it's pretty
09:34 - simple let's just access the real lay
09:36 - service
09:38 - get the instance and now let's call join
09:41 - allocation async this takes our joint
09:43 - code so let's pass that in
09:45 - and again this is awaitable let's put a
09:48 - sink and let's make sure to put this
09:50 - inside a try catch again so that this
09:52 - whole thing doesn't break
10:00 - all right so here it is it really is
10:02 - this simple this is only neat to get the
10:04 - relay working so on the host you create
10:06 - an allocation and generate a joint code
10:08 - and then on the client you simply join
10:10 - using the join code now this is the part
10:12 - where normally I would do a quick test
10:14 - to Showcase that it is indeed working
10:15 - but while this code does work if we test
10:18 - just like this so over here I've got two
10:20 - bones running now on this one let's call
10:22 - create really
10:24 - so let's create it if there you go got
10:27 - the region got the code okay great
10:29 - and now on this one let's call join
10:31 - relay and then just pass in the code so
10:33 - in this case fccc G7 so let's join and
10:37 - nope there's the error it's saying the
10:39 - join code is not found basically
10:41 - everything is indeed working correctly
10:43 - except it really won't really open if
10:45 - you don't immediately make a connection
10:46 - after you allocate the relay you need to
10:49 - open a connection in whatever way you
10:51 - want using whatever transport you want
10:53 - so this is where we can connect relay to
10:55 - netcode for game objects and unity
10:57 - transport in order to open that
10:58 - connection and make everything work
11:00 - through the relay so let's do that the
11:02 - first setup is let's go into the network
11:04 - manager object so here it is again I set
11:07 - up all this in the netcode for game
11:08 - objects video go watch that if you have
11:10 - no idea what is a network manager so
11:13 - down here if we scroll we can see we're
11:15 - using ADT transport and for the protocol
11:17 - type over here it says Unity transport
11:19 - all we need to do is on this drop down
11:20 - menu let's swap for the real Unity
11:22 - transport and that's it there's nothing
11:24 - else we need to change Here and Now for
11:26 - setting up the transport to use relay
11:28 - this is going to differ are slightly
11:30 - depending on what version you're using
11:32 - see if you find any issues pretty close
11:33 - attention here there are two methods the
11:35 - second method is newer and quite a bit
11:37 - easier to use but first let's begin with
11:39 - the first method this first method is if
11:42 - you are using netcode for game objects
11:43 - version 1.0.2 which as of the time of
11:46 - this recording is the version that you
11:47 - can get from the package manager and
11:50 - also down here the unity transport
11:51 - version 1.2.0 so these are the versions
11:54 - that I use in the netcode video with
11:57 - these specific versions let's see how it
11:58 - is first over here when we create the
12:01 - relay allocation we get the join code
12:03 - then we can access the network manager
12:05 - which is inside unity.net code then on
12:08 - this one we can access the Singleton and
12:11 - through the Singleton we can do get
12:12 - component in order to get the component
12:14 - of type Unity transport
12:16 - then on this one we can call set host
12:18 - relay data so this function
12:21 - which as you can see it takes tons of
12:23 - parameters all of these parameters we
12:24 - can get from the allocation so let's add
12:26 - all of these
12:28 - the first one is the IP address so let's
12:30 - go into allocation let's grab the
12:32 - reality server and grab the ipv4 next
12:35 - one is the port so allocation the relay
12:37 - server and let's grab the port although
12:39 - this field accepts a u-short whereas
12:41 - Port over here this one is an INT so we
12:44 - need to convert it so back into U short
12:47 - okay we have the port next one the
12:48 - allocation ID so again allocation let's
12:51 - get the allocation ID bytes then for the
12:54 - key that's an allocation.key
12:56 - and finally the allocation.connection
12:58 - data
13:00 - okay so with this all of the parameters
13:01 - have been sent and then over here we can
13:04 - start the host which will finally create
13:05 - the connection so let's go into network
13:07 - manager get the Singleton
13:10 - and let's call start host okay that's it
13:13 - that's only takes to set up the network
13:15 - manager to work with Drilling and then
13:18 - down here when joining We join the
13:20 - allocation we need the code okay then
13:22 - let's again go into the network manager
13:24 - access the Singleton let's do a get
13:26 - component to grab the unity transport
13:29 - and then on this one instead of calling
13:30 - set host friendly data we can't set
13:32 - client relay data so pay attention it's
13:34 - a different function and now we need the
13:36 - same bunch of parameters so let's add
13:39 - them and for the parameters we can get
13:41 - them from here so when we join the
13:42 - allocation this returns an object of
13:44 - type join allocation so let's grab the
13:46 - join allocation
13:49 - and from this one we can grab all of
13:51 - these parameters so first of all
13:53 - once again let's go relay server grab
13:55 - the ipv4 and so on
14:03 - so here we have the connection data and
14:05 - on this one we've got an extra one so
14:07 - that's the join the location the host
14:08 - connection data
14:10 - all right so we set up DNT transport
14:12 - with the set relay client data and then
14:14 - afterwards we can start our client so
14:16 - again network manager let's access the
14:18 - Singleton
14:20 - and let's call start client all right so
14:22 - that's it so with these two our UND
14:25 - transport connection should now be
14:26 - handled through the relay so let's test
14:28 - okay so here I have both builds now on
14:31 - this one let's concrete really which is
14:32 - going to create really and start the
14:34 - host so there you go thus and yep my
14:36 - character is here so yep it does work
14:37 - and there we have our code so then down
14:39 - here let's go and join really passing
14:42 - the code so the
14:44 - 7fffff6m so let's join
14:46 - and if there go with the join and we
14:48 - have both players connected in the same
14:50 - world and both connected through the
14:52 - relay alright awesome so as you can see
14:54 - I can move and everything is nicely
14:56 - synchronized on each of them okay great
14:58 - everything works now let's see the newer
15:00 - similar method first of all let's
15:02 - install new versions now like I said at
15:04 - the time of this recording the new
15:06 - versions are released but they don't
15:07 - show up on the package manager
15:09 - automatically so we can't install it
15:11 - over here to the list but we can go and
15:12 - add package by name and for this one is
15:15 - the
15:17 - com.unity.netcode.game objects and the
15:20 - version that we want to install is
15:21 - version 1.1.0 so let's add this one okay
15:24 - here it is so net code for game objects
15:26 - I've got in sound version 1.1.0 and
15:29 - importantly it also automatically
15:30 - installed in the transport 130 so down
15:33 - here make sure we have this one the
15:34 - 1.3.0 so this is important for this new
15:37 - method you need these two versions for
15:39 - both the netcode and the transport so
15:41 - back here in the code instead of having
15:43 - to send all these parameters one by one
15:45 - there's a simple method there is a
15:47 - different function so instead of being
15:48 - set host friendly data we call set relay
15:51 - server data so we call this one and we
15:54 - have version which takes a really server
15:56 - data so we can create that object
15:58 - so here let's make of type relay server
16:01 - data inside Unity networking transport
16:03 - really
16:04 - and on this one we can use the
16:05 - Constructor any construct takes an
16:07 - allocation so let's pass in the
16:09 - allocation and then also has a
16:10 - connection type this can be either UDP
16:13 - or dtls dtls is encrypted and it's what
16:16 - they use in docs so let's use that here
16:18 - so dtls
16:21 - and if that's it so we now have this
16:22 - relay server data and over here we just
16:25 - use this instead of sending all these
16:26 - parameters okay that's it as you can see
16:28 - much simpler method then on the client
16:30 - down here let's use the exact same thing
16:32 - so let's actually copy this and paste on
16:34 - top of this so we have this we created
16:36 - based on this join allocation and do
16:38 - exam like this so now we use the same
16:39 - function and just pass in a really
16:41 - server data all right now let's test
16:43 - like this so here are both Builds on
16:46 - this one let's create the relay and
16:48 - let's go it's going to create and yep
16:50 - start the host so there you go it works
16:51 - and on this one let's call join really
16:53 - passing the code and you'll be joined
16:55 - the real estate of the client and yep
16:57 - everything does work okay great now
16:59 - let's verify that it does indeed work so
17:01 - here on my PC I'm using my original
17:03 - connection you can see that I'm
17:04 - unfortunate then on my laptop I'm using
17:06 - a VPN so you can see that I'm connecting
17:08 - through the netheroids in the scenario
17:10 - if we did not use relay then I would
17:12 - have to manually open my firewall and
17:13 - open some ports but with really working
17:15 - let's just connect so over here on my PC
17:18 - I'm going to create a relay there it is
17:21 - placed in Europe questio okay great now
17:23 - on my laptop here let's join the relay
17:26 - and if there you go we have a nice
17:29 - connection so again I'm connecting
17:30 - through a VPN so both builds are running
17:33 - on different IPS and as you can see
17:35 - everything is working perfectly so
17:36 - everything is synchronized so I can do
17:38 - exactly anything that I want there are
17:40 - no worries with that no problems with
17:42 - firewalls everything is connected nice
17:43 - and seamlessly all right awesome now
17:46 - finally let's look at how to get it
17:48 - working with Lobby I covered Lobby in
17:50 - detail in the previous video and here I
17:52 - have the demo sample that I built in
17:54 - that video so I've got four windows open
17:56 - I can set the name so I've set the
17:58 - unique name just so they authenticate
17:59 - with different player ID so let's join
18:01 - with all of them now for example on this
18:03 - one I can create a brand new Lobby so
18:04 - let's make it public my lobby with four
18:06 - players and Capture the Flag let's
18:08 - create and there you go there's the
18:10 - lobby so now on the other ones if I
18:11 - search I should be able to see that
18:13 - Lobby and yep I do see it on all of them
18:15 - so now I can just join with all these so
18:17 - join with that one join with that one
18:18 - and there you go all four are currently
18:20 - joined in the same Lobby then like you
18:22 - should know I'll be them over here I've
18:23 - got tons of options so I can change the
18:25 - character I can change anything I want
18:26 - one I can change the game mode I can
18:28 - kick players I can leave and so on so
18:30 - this is a fully working Lobby so far
18:33 - everything here is exactly the same as
18:34 - the sampling in lobby video the only
18:36 - thing I changed was adding this nice
18:38 - arrow button here what this does is it
18:40 - starts the game so when I click on that
18:42 - button it triggers this so we go to
18:44 - start game on the unlocking manager then
18:46 - on this level manager here is the code
18:48 - basically a Lobby you can Source some
18:49 - data so the way that I decided to
18:51 - synchronize the relay joining code is by
18:54 - setting it as some Lobby data so up here
18:56 - when we create a Lobby so here is a
18:59 - function to create a Lobby and on the
19:00 - data I include one for the start game
19:02 - and I just defaulted it to zero also
19:05 - importantly remember how Lobby has some
19:07 - data accessors for the Relay you don't
19:09 - want that to be public that would be
19:10 - accessible to anyone searching for a
19:12 - Lobby you only want it to be visible to
19:14 - people inside Lobby so that's why I made
19:16 - this one a member variable then I just
19:18 - defaulted it to zero and then on the
19:20 - start game function on this one just
19:22 - make an update to the lobby and set this
19:24 - one into the relay code so I basically
19:26 - just go into the test release function
19:28 - that we just made to create the Greenlee
19:29 - and this function is going to return the
19:31 - join code so it allocates the real link
19:34 - sets Unity transport starts the host and
19:36 - Returns the join code so it does that
19:38 - and updates the lobby with the relay
19:40 - code then for all the other players if
19:42 - we saw the lobby video they are
19:44 - constantly polling for a lot of the
19:45 - updates over here is the function to
19:47 - handle the lobby polling so it's
19:48 - constantly getting for updates and over
19:51 - here it checks for the lobby check the
19:53 - data check the start game and if it is
19:55 - not zero which was the default if it is
19:56 - not zero then it contains the relay code
19:59 - if so then just as a check if this one
20:00 - is Lobby host because Lobby host joins
20:02 - automatically when it generates the code
20:04 - and if not just call the join relay and
20:07 - join the relay passing the relay code
20:08 - and that's really it when joining the
20:10 - relay this one starts up the client and
20:13 - the host starts when generates the code
20:15 - so everything should work they should be
20:16 - connected although before I test this
20:19 - let me point out that alternatively you
20:21 - could decide to start the real-time
20:22 - connection right away over here I
20:25 - decided to pretty much only create the
20:27 - relay allocation and only start net code
20:29 - for game objects and only do that as
20:30 - soon as the player decides to start the
20:32 - game but you could call start host
20:34 - directly as soon as anyone joins the
20:36 - lobby that would be useful if for
20:37 - example you want to have some really
20:39 - data transfer once inside the lobby
20:42 - perhaps you wanted some more complex
20:44 - options to share while the players were
20:45 - inside the lobby over here on the sample
20:47 - as you saw in the previous video if I
20:49 - click somewhere to update it you can see
20:51 - it takes a little bit of time before it
20:52 - update in all the other clients again
20:54 - that is because Lobby is not meant for
20:56 - real-time connection that is why it only
20:58 - pawns once per second so alternatively
21:00 - if you wanted you could start the host
21:02 - and start the coins as soon as they
21:03 - enter or you can do what I did here
21:05 - which is it only creates a relay
21:07 - allocation when we press the start game
21:08 - button it's up to you to decide which
21:10 - method makes more sense for your game
21:12 - alright so with everything set up over
21:14 - here on the host all that's left is to
21:16 - start the game so I'm going to press
21:18 - this button and this one is going to
21:19 - generate a relay allocation and then
21:21 - start net code for game objects and at
21:23 - the same time these other clients you
21:25 - are going to pump for updates and within
21:26 - about one second they are going to get
21:28 - the update they are going to connect to
21:29 - the relay and they are going to start
21:31 - netcode for game objects so let's see
21:33 - all of that in action over here let's
21:35 - click and there you go it's allocating
21:37 - the relay in a bit yep there you go
21:39 - starts the host and the host right here
21:41 - and all the other ones are connecting
21:42 - there you go this one and this one and
21:44 - this one and all of them are connected
21:45 - all of them connected through the lobby
21:47 - and all of them are being connected
21:49 - through the relay and handling the
21:51 - real-time data through netcode for game
21:52 - objects alright awesome so again note
21:55 - how we did all this without having to
21:57 - share any text any really join code
21:59 - anything like that we just use the lobby
22:01 - we found an open public Lobby and we
22:03 - just joined it so no need to handle any
22:05 - codes anything at all it all works
22:07 - seamlessly under the hood and here we
22:09 - have a nice game with four clients all
22:11 - working together on playing in the same
22:13 - game alright great now let me point out
22:16 - just one more quick note
22:17 - like this the lobby still exists those
22:20 - players are still connected to that
22:21 - Lobby again that is up to you to decide
22:23 - how you want to handle it perhaps you do
22:25 - want to keep them in the lobby so that
22:27 - if something happens like for example
22:29 - one of these hosts disconnects if that
22:31 - happens you can go back to the lobby and
22:33 - start another game or alternatively you
22:35 - can decide to destroy the lobby as soon
22:37 - as the game starts and not allow anyone
22:38 - else to join so it's up to you to decide
22:40 - what makes sense in your game do you
22:42 - keep the lobby alive or do you destroy
22:44 - it as soon as the game starts okay so
22:46 - finally let's look at pricing over here
22:48 - on the ugs pricing page we can scroll
22:50 - down and find the relay so over here
22:53 - under multiplayer here it is multiplier
22:57 - and we've got the relay and Lobby the
22:59 - left side is the free tier and the right
23:00 - side is the paid here so for the Relay
23:03 - we have a free tier with 50 free ccus
23:05 - per month
23:06 - CCU means concurrent users so you can
23:09 - have 50 players connected at the exact
23:11 - same time all of that's for free again
23:14 - remember those are not 50 players total
23:16 - it's 50 players at the exact same time
23:18 - so you could have thousands of players
23:20 - as long as they're not around playing at
23:22 - once and you stay within the free tier
23:23 - then for bandwidth for this one you have
23:26 - three gigabytes per concurrent user and
23:29 - 150 per toron per month this is
23:31 - obviously going to depend on a per game
23:33 - basis but these three tiers seem pretty
23:34 - generous to me 150 gigabytes per month
23:37 - is quite a huge amount quite a lot of
23:39 - bandwidth and if you end up going past
23:41 - these three limits then the paid tier is
23:43 - also pretty cheap if your game was a
23:45 - massive hit and you had a thousand
23:47 - concurrent users then it would only cost
23:49 - you about 160 bucks and if you had a
23:52 - thousand concurrent users that would
23:54 - probably mean that you sold something
23:55 - like 50 000 copies so these values look
23:57 - pretty cheap but again for the most part
23:59 - you're probably going to stay within
24:00 - three tier so that's great alright so
24:02 - that's Unity really it's an awesome tool
24:04 - for helping you make multiplayer games
24:06 - without requiring dedicated servers and
24:08 - without requiring your players to the
24:09 - avoid firewalls or port forwarding or
24:11 - anything with eyepiece then when
24:13 - combined with netcode for game objects
24:15 - and Lobby it makes it really easy to
24:17 - make multiplayer games if you've tried
24:19 - to make a multiplayer game just five
24:20 - years ago it would have been extremely
24:22 - difficult but now thanks to all of these
24:24 - tools it's all extremely easy so now go
24:26 - ahead take these tools and build some
24:27 - awesome multiplayer games alright hope
24:30 - that's useful check out these videos to
24:32 - learn some more thanks to these awesome
24:34 - patreon supporters for making these
24:35 - videos possible thank you for watching
24:37 - and I'll see you next time
24:43 - foreign

Cleaned transcript:

hello and welcome I'm your code monkey and here on let's learn how to use Unity really this is their tool for helping you handle multiplayer connections without needing dedicated servers and without asking your players to open ports and share IPS so there are no more issues with firewalls not and so on you just connect the ENT really get a join code share the code with your friends and then they can easily connect to the same server the other Unity tool which works very well with really is Lobby which I'm already covered in detail on the previous video when you combine both you don't even need to share the relay code you can do it automatically through a Lobby and I've also covered the unity's netcode library called netcode for game objects in another video all three of these tools are completely independent you can use just one or any combination of these but they are also made to very easily work with one another here in this video let's focus on the relay but that part is actually extremely simple it literally just takes three lines of code so I will also showcase how to use it in conjunction with netcode for game objects and lobby with that we can create a Lobby the second player can join the host starts the game and both players connect through the relay and play the game with netcode for game objects also this video is officially sponsored by Unity gaming services this is a collection of tools for helping you build operate and grow your games with ease it includes all of the tools that I'm going to mention here netcode for game objects for adding multiplayer to your games Lobby for joining players really for connecting them there's also a dedicated game server tool one for matchmaking vivox for Voice and text you have Cloud save for storing player that in the cloud cloudcon delivery for delivering SEO players you can explore your game analytics do some a b testing monetize with ads or do inapp purchases or a bunch more all of these symbols are either completely free or they have generous free tiers so click the link in the description to learn more about TNT gaming services and get started for free okay so here I will be starting from where I'm left off on the netcode for game objects video so I've got two builds right here and these two buttons where I can start as a host or a client so this one let's make it a host on this one let's make it a client and there you go both of them are connected in multiplayer all right great however the issue here is that the only reason why this is working is because I'm running on the exact same PC if I try to send this build over to a friend and have them connect it would not work it would have issues with firewall so I would have to manually open up ports and disable the firewall really is a tool that helps you solve that so you don't need to do that okay so here is a working demo using netcode for game objects but like I said really works by itself without net code for game objects so let's first look at the absolute Basics the first step is to install the package so let's open up the package manager let's go up here into DNT registry and then find over here the relay package so just go ahead and install this the next step is to set up a project on the NT dashboard so you can go here into edit project settings then go down into Services then make sure you're logged in and over here you can select the organization and create a project from here or if you already made the project in unity dashboard then you can click here and just sign the project I already created the project so over here I'm just going to select my project and just link the project okay the project is linked now let's go here into the NT dashboard make sure you select the project up here then on the left side let's select multiplayer and then over here let's go under relay and over here you should be able to see a button to enable it then you can go through the setup guide so first of all it tells you to link the project which we already did so let's go next then it tells us to install the package which we did on next and finally turn on the relay next and that's it if you want there are also some really nice samples that you can download to see how it all works okay so that's the basic setup done back in our project let's create a brand new csharp script let's call this test relay let's make a game object to run it attach the script and let's open okay so now here the first thing that we need is we need to initialize the unity services so let's make a private void start and on start let's do that by the way this initialization part for the unity services and authentication this one is the exact same as the lobby so if you've already seen that video you can fast forward this part there's time steps in the video so we go inside Unity Services which is inside unity.services.com so let's add that using in here and we just call initialize async now importantly this isn't awaitable so up here let's add a weight in order for this a way to run then we need to Define this function as async now if you're not familiar with async in a way don't worry too much about it you don't need to know how it works in order to use it but essentially what it does is it lets you run code asynchronously so for example over here this will send a request to ENT services to initialize the API that request goes over the Internet so it's not instant if you didn't make it async then the game would freeze and someone receives their reply that's the main purpose of async and weight with this your game does not freeze hit pause the execution of this function and the rest of the game keeps going so any code that we write down here it will not run immediately inside the execution won't pause in here until it receives a reply then when it does then this function continues executing but like I said you don't need to worry about it just don't forget the await and async keywords okay so this is all we need to initialize these Services then really requires authentication to use Unity authentication has tons of options you can link a Sim account Apple Android Facebook or open ID so you can use that to create an account and Link with any of those services or something super awesome which is you can just do a super quick Anonymous signin over here all we do is access the authentication Service this one right here inside UNT Services authentication and then we can access the static instance and then we call sign in anonymously async again this one is an available console let's await basically this will sign in anonymously and create an new account for this user if we want we can listen to the event to know when the sign in completes so again let's go into the authentication Service and listen to the signed in event so over here for example let's see we debug.log and we can go into the authentication Service instance in order to get the player ID we can do a quick test just to verify this is working and if there it is it's signed in and gave me this player ID okay so we have everything we need to start using the relay so let's begin by making a function so a private world let's call it create relay and over here the first thing we're going to do is create an allocation so for that we're going to access the relay service inside unity.services.relay on this one we access the static instance and we're going to create an allocation async and this one takes a parameter for the max number of connections importantly this does not include the host creating the allocation so for example if you have a four player game that means it's going to be the host plus three more players so over here you just put three then optionally you can also Define which region you want to create the allocation in or you can just leave it as empty and just let the relay decide which is the best region and again this one is an avoidable console let's await an async now one important thing about this function and really every relay function is that it can throw an exception if we do just like this and throws an exception then it's going to pretty much break our whole game we don't want that to happen so let's make sure to wrap these functions inside a try catch so try then catch and we can catch a relay service exception so really service exception and if that happens let's just do a debug log with this if we have any errors we will get some details on what went wrong like for example maybe the relay is disconnected or disabled or so on okay so with this over here we are going to return an allocation let's grab that object of type and location inside Unity services greenlee.models so our allocation and then with this allocation the next thing we need is to generate a join code so again let's go into the real estate service and access the instance and now let's get the join code async and we need to pass in the allocation ID so let's go into allocation and pass in the allocation ID then this is going to return a string so it's a string for our join code and again this is available so let's await okay so that's it it really is this simple with this we are creating an allocation on the relay and then getting the join code to join that on location the string that we get here is going to be the code which we can send to our friends so they can connect to the same relay let's do a quick test just see what this is doing and for testing like I was using in the netcode for game objects video over here I'm using the quantum console it's an excellent asset that lets you easily add a console I made a full review on it really awesome here it is especially useful so we can call this function so to do that I'm just going to add the attribute command with this I can easily call this function from the console now this is optional you don't have to use this asset you can call this function from wherever you want I'm just doing it like this just make it easier for the demo okay so with this let's test all right here we are we are signed in so now let's call our function to create the relay so let's run that and if there you go it did work so over here you can see that it pinged a whole bunch of servers in order to find the closest one and in my case I decide that the best region was Euro Quest 2 which makes sense since I'm in Portugal so yep everything worked correctly I just forgot to add a log for the join code so let's do that so over here after we get the joint code just to debug.log on the join code again let's create a relay and if there you go there we have our join code okay great so we create the allocation and we got the join code now the next step is to join using this code so over here let's make another function right void and let's call it join relay and we're going to receive a string for the join code then over here it's pretty simple let's just access the real lay service get the instance and now let's call join allocation async this takes our joint code so let's pass that in and again this is awaitable let's put a sink and let's make sure to put this inside a try catch again so that this whole thing doesn't break all right so here it is it really is this simple this is only neat to get the relay working so on the host you create an allocation and generate a joint code and then on the client you simply join using the join code now this is the part where normally I would do a quick test to Showcase that it is indeed working but while this code does work if we test just like this so over here I've got two bones running now on this one let's call create really so let's create it if there you go got the region got the code okay great and now on this one let's call join relay and then just pass in the code so in this case fccc G7 so let's join and nope there's the error it's saying the join code is not found basically everything is indeed working correctly except it really won't really open if you don't immediately make a connection after you allocate the relay you need to open a connection in whatever way you want using whatever transport you want so this is where we can connect relay to netcode for game objects and unity transport in order to open that connection and make everything work through the relay so let's do that the first setup is let's go into the network manager object so here it is again I set up all this in the netcode for game objects video go watch that if you have no idea what is a network manager so down here if we scroll we can see we're using ADT transport and for the protocol type over here it says Unity transport all we need to do is on this drop down menu let's swap for the real Unity transport and that's it there's nothing else we need to change Here and Now for setting up the transport to use relay this is going to differ are slightly depending on what version you're using see if you find any issues pretty close attention here there are two methods the second method is newer and quite a bit easier to use but first let's begin with the first method this first method is if you are using netcode for game objects version 1.0.2 which as of the time of this recording is the version that you can get from the package manager and also down here the unity transport version 1.2.0 so these are the versions that I use in the netcode video with these specific versions let's see how it is first over here when we create the relay allocation we get the join code then we can access the network manager which is inside unity.net code then on this one we can access the Singleton and through the Singleton we can do get component in order to get the component of type Unity transport then on this one we can call set host relay data so this function which as you can see it takes tons of parameters all of these parameters we can get from the allocation so let's add all of these the first one is the IP address so let's go into allocation let's grab the reality server and grab the ipv4 next one is the port so allocation the relay server and let's grab the port although this field accepts a ushort whereas Port over here this one is an INT so we need to convert it so back into U short okay we have the port next one the allocation ID so again allocation let's get the allocation ID bytes then for the key that's an allocation.key and finally the allocation.connection data okay so with this all of the parameters have been sent and then over here we can start the host which will finally create the connection so let's go into network manager get the Singleton and let's call start host okay that's it that's only takes to set up the network manager to work with Drilling and then down here when joining We join the allocation we need the code okay then let's again go into the network manager access the Singleton let's do a get component to grab the unity transport and then on this one instead of calling set host friendly data we can't set client relay data so pay attention it's a different function and now we need the same bunch of parameters so let's add them and for the parameters we can get them from here so when we join the allocation this returns an object of type join allocation so let's grab the join allocation and from this one we can grab all of these parameters so first of all once again let's go relay server grab the ipv4 and so on so here we have the connection data and on this one we've got an extra one so that's the join the location the host connection data all right so we set up DNT transport with the set relay client data and then afterwards we can start our client so again network manager let's access the Singleton and let's call start client all right so that's it so with these two our UND transport connection should now be handled through the relay so let's test okay so here I have both builds now on this one let's concrete really which is going to create really and start the host so there you go thus and yep my character is here so yep it does work and there we have our code so then down here let's go and join really passing the code so the 7fffff6m so let's join and if there go with the join and we have both players connected in the same world and both connected through the relay alright awesome so as you can see I can move and everything is nicely synchronized on each of them okay great everything works now let's see the newer similar method first of all let's install new versions now like I said at the time of this recording the new versions are released but they don't show up on the package manager automatically so we can't install it over here to the list but we can go and add package by name and for this one is the com.unity.netcode.game objects and the version that we want to install is version 1.1.0 so let's add this one okay here it is so net code for game objects I've got in sound version 1.1.0 and importantly it also automatically installed in the transport 130 so down here make sure we have this one the 1.3.0 so this is important for this new method you need these two versions for both the netcode and the transport so back here in the code instead of having to send all these parameters one by one there's a simple method there is a different function so instead of being set host friendly data we call set relay server data so we call this one and we have version which takes a really server data so we can create that object so here let's make of type relay server data inside Unity networking transport really and on this one we can use the Constructor any construct takes an allocation so let's pass in the allocation and then also has a connection type this can be either UDP or dtls dtls is encrypted and it's what they use in docs so let's use that here so dtls and if that's it so we now have this relay server data and over here we just use this instead of sending all these parameters okay that's it as you can see much simpler method then on the client down here let's use the exact same thing so let's actually copy this and paste on top of this so we have this we created based on this join allocation and do exam like this so now we use the same function and just pass in a really server data all right now let's test like this so here are both Builds on this one let's create the relay and let's go it's going to create and yep start the host so there you go it works and on this one let's call join really passing the code and you'll be joined the real estate of the client and yep everything does work okay great now let's verify that it does indeed work so here on my PC I'm using my original connection you can see that I'm unfortunate then on my laptop I'm using a VPN so you can see that I'm connecting through the netheroids in the scenario if we did not use relay then I would have to manually open my firewall and open some ports but with really working let's just connect so over here on my PC I'm going to create a relay there it is placed in Europe questio okay great now on my laptop here let's join the relay and if there you go we have a nice connection so again I'm connecting through a VPN so both builds are running on different IPS and as you can see everything is working perfectly so everything is synchronized so I can do exactly anything that I want there are no worries with that no problems with firewalls everything is connected nice and seamlessly all right awesome now finally let's look at how to get it working with Lobby I covered Lobby in detail in the previous video and here I have the demo sample that I built in that video so I've got four windows open I can set the name so I've set the unique name just so they authenticate with different player ID so let's join with all of them now for example on this one I can create a brand new Lobby so let's make it public my lobby with four players and Capture the Flag let's create and there you go there's the lobby so now on the other ones if I search I should be able to see that Lobby and yep I do see it on all of them so now I can just join with all these so join with that one join with that one and there you go all four are currently joined in the same Lobby then like you should know I'll be them over here I've got tons of options so I can change the character I can change anything I want one I can change the game mode I can kick players I can leave and so on so this is a fully working Lobby so far everything here is exactly the same as the sampling in lobby video the only thing I changed was adding this nice arrow button here what this does is it starts the game so when I click on that button it triggers this so we go to start game on the unlocking manager then on this level manager here is the code basically a Lobby you can Source some data so the way that I decided to synchronize the relay joining code is by setting it as some Lobby data so up here when we create a Lobby so here is a function to create a Lobby and on the data I include one for the start game and I just defaulted it to zero also importantly remember how Lobby has some data accessors for the Relay you don't want that to be public that would be accessible to anyone searching for a Lobby you only want it to be visible to people inside Lobby so that's why I made this one a member variable then I just defaulted it to zero and then on the start game function on this one just make an update to the lobby and set this one into the relay code so I basically just go into the test release function that we just made to create the Greenlee and this function is going to return the join code so it allocates the real link sets Unity transport starts the host and Returns the join code so it does that and updates the lobby with the relay code then for all the other players if we saw the lobby video they are constantly polling for a lot of the updates over here is the function to handle the lobby polling so it's constantly getting for updates and over here it checks for the lobby check the data check the start game and if it is not zero which was the default if it is not zero then it contains the relay code if so then just as a check if this one is Lobby host because Lobby host joins automatically when it generates the code and if not just call the join relay and join the relay passing the relay code and that's really it when joining the relay this one starts up the client and the host starts when generates the code so everything should work they should be connected although before I test this let me point out that alternatively you could decide to start the realtime connection right away over here I decided to pretty much only create the relay allocation and only start net code for game objects and only do that as soon as the player decides to start the game but you could call start host directly as soon as anyone joins the lobby that would be useful if for example you want to have some really data transfer once inside the lobby perhaps you wanted some more complex options to share while the players were inside the lobby over here on the sample as you saw in the previous video if I click somewhere to update it you can see it takes a little bit of time before it update in all the other clients again that is because Lobby is not meant for realtime connection that is why it only pawns once per second so alternatively if you wanted you could start the host and start the coins as soon as they enter or you can do what I did here which is it only creates a relay allocation when we press the start game button it's up to you to decide which method makes more sense for your game alright so with everything set up over here on the host all that's left is to start the game so I'm going to press this button and this one is going to generate a relay allocation and then start net code for game objects and at the same time these other clients you are going to pump for updates and within about one second they are going to get the update they are going to connect to the relay and they are going to start netcode for game objects so let's see all of that in action over here let's click and there you go it's allocating the relay in a bit yep there you go starts the host and the host right here and all the other ones are connecting there you go this one and this one and this one and all of them are connected all of them connected through the lobby and all of them are being connected through the relay and handling the realtime data through netcode for game objects alright awesome so again note how we did all this without having to share any text any really join code anything like that we just use the lobby we found an open public Lobby and we just joined it so no need to handle any codes anything at all it all works seamlessly under the hood and here we have a nice game with four clients all working together on playing in the same game alright great now let me point out just one more quick note like this the lobby still exists those players are still connected to that Lobby again that is up to you to decide how you want to handle it perhaps you do want to keep them in the lobby so that if something happens like for example one of these hosts disconnects if that happens you can go back to the lobby and start another game or alternatively you can decide to destroy the lobby as soon as the game starts and not allow anyone else to join so it's up to you to decide what makes sense in your game do you keep the lobby alive or do you destroy it as soon as the game starts okay so finally let's look at pricing over here on the ugs pricing page we can scroll down and find the relay so over here under multiplayer here it is multiplier and we've got the relay and Lobby the left side is the free tier and the right side is the paid here so for the Relay we have a free tier with 50 free ccus per month CCU means concurrent users so you can have 50 players connected at the exact same time all of that's for free again remember those are not 50 players total it's 50 players at the exact same time so you could have thousands of players as long as they're not around playing at once and you stay within the free tier then for bandwidth for this one you have three gigabytes per concurrent user and 150 per toron per month this is obviously going to depend on a per game basis but these three tiers seem pretty generous to me 150 gigabytes per month is quite a huge amount quite a lot of bandwidth and if you end up going past these three limits then the paid tier is also pretty cheap if your game was a massive hit and you had a thousand concurrent users then it would only cost you about 160 bucks and if you had a thousand concurrent users that would probably mean that you sold something like 50 000 copies so these values look pretty cheap but again for the most part you're probably going to stay within three tier so that's great alright so that's Unity really it's an awesome tool for helping you make multiplayer games without requiring dedicated servers and without requiring your players to the avoid firewalls or port forwarding or anything with eyepiece then when combined with netcode for game objects and Lobby it makes it really easy to make multiplayer games if you've tried to make a multiplayer game just five years ago it would have been extremely difficult but now thanks to all of these tools it's all extremely easy so now go ahead take these tools and build some awesome multiplayer games alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time foreign
