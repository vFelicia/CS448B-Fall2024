With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - miniseries we're going to make snake in
00:03 - the unity in this video we're going to
00:05 - setup our scene to be able to start
00:07 - making our game let's begin
00:11 - all right so the goal of this series is
00:13 - to make snake in unity it's a very
00:15 - simple game which makes it perfect for
00:16 - beginners to learn so here is the unity
00:19 - main window we're going to create a new
00:21 - project name it snake and we're going to
00:24 - use the ETD template all right so let's
00:26 - hit create project all right so here's
00:29 - our completely empty scene now the first
00:32 - thing we're going to do is give our
00:33 - scene a more appropriate name than
00:35 - sample scene so let's rename this to
00:37 - game scene this will be the main scene
00:40 - where our game is we won't later have a
00:42 - different scene for the main menu and
00:43 - anything else we need so let's set up
00:45 - our main camera since we selected 2d our
00:49 - camera is already in orthographic mode
00:50 - which is what we need in our display in
00:53 - 2d here we can see the orthographic size
00:55 - of our camera this size represents the
00:58 - amount of units is played vertically so
01:00 - in this case this is half of our
01:02 - vertical size so with the Sun is a 5 we
01:05 - are currently seeing from minus 5 to
01:06 - plus 5 so in order to get a total
01:10 - vertical space of 100 units let's set
01:12 - our size to 50 so just like that you can
01:14 - see that our camera displaying from
01:16 - minus 50 all the way up here to plus 50
01:19 - ok that's our camera setup
01:21 - now let's create a game handler which
01:23 - won't be our main starting object so we
01:25 - create a new empty game object name this
01:28 - the game hammer and let's locate it on 0
01:30 - 0 now this will be our main container
01:33 - for all of our preset scene objects the
01:36 - better you keep your objects organized
01:38 - the easier it is to find what you're
01:39 - looking for so in here I'm going to drag
01:41 - the camera inside the game Hamill now
01:43 - let's make a game handler script which
01:45 - will be the entry point for most of our
01:47 - game so before we do that let's create a
01:50 - new folder and we're going to name this
01:51 - script making you see sharp script and
01:55 - this will be our game hello
01:57 - ok here is our script and now let's just
02:00 - add a debug log on our start debug back
02:03 - home and say game handler that start so
02:06 - banging here let's write script onto our
02:08 - game handler game object and run the
02:11 - code any of their days game handle dot
02:13 - start on the console
02:14 - so everything is on good we have our
02:16 - entry point correctly working so now
02:19 - let's set up a background object
02:21 - so first let's create another folder
02:23 - this will be for
02:24 - our textures all right so I've copied
02:26 - some textures in here I have the snake
02:29 - and food textures and then I also have a
02:32 - simple white pixel texture this is very
02:35 - helpful when we want to display a common
02:37 - rectangle on a sprite render as you can
02:39 - see it is literally just a one-by-one
02:41 - white pixel so let's begin by setting up
02:43 - the import options for this texture
02:45 - which for our white pixel we want the
02:47 - pixels per unit to match one so whenever
02:50 - we apply this texture it will occupy one
02:52 - unit now for our other textures which
02:55 - you said here will depend on the size of
02:57 - the texture that you have drawn in this
03:00 - case I wanted to occupy a bit more than
03:02 - one unit so much but at about 180 when
03:05 - we finally use this texture we will
03:06 - modify this to make sure everything
03:08 - works correctly so our game won't be
03:10 - grid based and the grid won't have a
03:12 - size of one so that's why we are setting
03:14 - up our textures to occupy roughly one
03:16 - unit okay so let's draw something in our
03:19 - scene create a game object this won't be
03:20 - the background let's add the sprite
03:24 - renderer component and again with just
03:27 - the sprite renderer you can see that
03:28 - nothing is visible so that's why we drag
03:30 - our home phone white pixel and just like
03:33 - that we have a white pixel occupying one
03:35 - by one let's make it in gray to be a bit
03:38 - different from the background and
03:39 - stretch it to 50/50 which will be the
03:42 - total size of our map again our game
03:45 - won't be grid based so down here we want
03:47 - to be grid position 0 0 and over here 25
03:50 - 25 so let's shift our background to 25
03:54 - 25 0 and just like that our camera is
03:57 - there on 0 0 and the background works
03:59 - like that ok now let's make a new game
04:02 - object this will be our snake and we're
04:04 - going to add again these fried render
04:06 - component and drag the snake head if we
04:08 - zoom in we can see one unit in our grid
04:11 - and as you can see the exercise is
04:12 - pretty much correct it is supposed to
04:14 - occupy just about the correct size the
04:16 - grid so this is our snake with its
04:18 - texture ok now let's set up some basic
04:21 - sorting layers so you can simply click
04:23 - in here and add a new sorting layer
04:25 - let's make a background layer so the
04:30 - background layer renders before the
04:32 - default so the default is on top of the
04:34 - background and then we have the new
04:35 - layer and this will be
04:36 - over just in case we need it later so
04:38 - down here our snake won't be on the
04:40 - default sorting layer and our background
04:42 - won't be on the background soaring away
04:44 - okay so this is our basic setup we have
04:47 - our camera correctly setup we have a
04:49 - background just to show the play area
04:51 - and we have our snake object now in
04:53 - order to help us develop our game faster
04:55 - we're going to use some very helpful
04:56 - classes from decode monkey Tony's this
04:59 - is just an optional step you don't
05:00 - absolutely need to have them but it will
05:02 - help us in iterating and debugging our
05:04 - game you can go to the website unity
05:06 - code monkey dot-com to download the
05:08 - utilities for free and then you get a
05:09 - unity package file when you open the
05:12 - unity package file you'll see this
05:14 - window these utilities contain a lot of
05:16 - classes and functions that will be
05:17 - immensely helpful while developing the
05:19 - game so in here we simply select
05:21 - everything and import and there it is
05:24 - you can see now we have a code monkey
05:26 - folder on our script that contains
05:27 - everything and as you can see this
05:29 - contains all of the source files so feel
05:31 - free to go through all of these to see
05:33 - how everything works now to make sure
05:35 - everything is set up correctly and let's
05:37 - go into the game handler we want to
05:39 - spawn some pop-ups so let's go all the
05:41 - way up here and write using code monkey
05:44 - and using code monkey utils this is how
05:48 - we use the code monkey namespace and now
05:51 - in here on let's create a function
05:52 - periodic which triggers an action every
05:55 - certain amount of time so we will
05:57 - execute this action and inside let's do
06:00 - a text popper we're going to execute
06:08 - this action on every point three seconds
06:10 - so this might seem confusing but it's
06:12 - extremely simple and here we are
06:14 - similarly going to trigger this action
06:16 - every 300 milliseconds and inside this
06:18 - action we are simply going to do a text
06:20 - pop up on the mouse position saying a
06:22 - text and the number this just so we can
06:24 - verify that everything has been
06:26 - correctly installed so let's test and
06:29 - yep there this as you can see we are
06:31 - getting our pop-ups which means the
06:32 - utilities are correctly working this
06:34 - will be very useful as we go on but
06:37 - again as I said this is only optional
06:38 - you don't absolutely need to have this
06:40 - but it won't be very helpful so we have
06:42 - our complete setup almost done let's add
06:45 - one more very useful thing we're going
06:47 - to create a class that we can use to
06:49 - easily refer
06:49 - assets from code that way we keep all
06:52 - our references in just one class and
06:54 - everywhere else in our code we just
06:55 - access it so let's create a new C sharp
06:58 - script and we're going to call this the
06:59 - game Athens okay so in here we won't
07:02 - have various films for all the asset
07:04 - references that we need so for example
07:06 - we add a film for a strike for the snake
07:09 - head sprite so back into the editor in
07:13 - here let's create a new game object this
07:16 - will be the game assets and we drag our
07:18 - script onto it so as you can see we have
07:21 - a public film for our snake head sprite
07:23 - so let's drag that onto there and now
07:25 - here in our code in order to access this
07:27 - from another class let's add a static
07:29 - instance now in here normally the
07:33 - correct name is example like this we
07:35 - name it instance however in this case
07:37 - and in this case alone we're going to
07:39 - make it just died in order to make our
07:40 - code easier to write again as I said in
07:42 - any other case you should give a proper
07:44 - name to your instance variable this is a
07:46 - very unique exception just so that
07:48 - elsewhere we can simply do game assets
07:50 - that I dot snake head sprite if you make
07:53 - a static instance outside of this you
07:56 - should give it a proper variable name
07:57 - okay so we have a static variable for
08:00 - our instance now we need to make a
08:01 - private void awake and inside our way we
08:04 - set the instance to this so just like
08:07 - that we can access all of these public
08:09 - fields through a static reference for
08:12 - testing let's go into the game Hamlet
08:13 - and here we'll create a new game object
08:17 - we add a sprite renderer component and
08:24 - then we can set the sprite to be grabbed
08:27 - from the game assets class dot instance
08:29 - and then we grab our snake at sprite so
08:32 - just like that you can see how we can
08:34 - have an acid reference through our code
08:36 - so now if we run our game yep there you
08:39 - go we have a new game object and it is
08:40 - correctly using the snakehead sprite now
08:43 - we need just one last thing which is we
08:45 - need to make sure that the game assets
08:47 - are awake runs before anyone else tries
08:49 - to access one of these fields so it can
08:52 - simply go into edit project settings
08:54 - then the script execution order and in
08:58 - here we drag the game assets script and
09:00 - we put it to run before the default time
09:02 - this will make sure that
09:04 - game assets that script the awake runs
09:06 - before any other script run the game
09:08 - again and as you see everything works
09:10 - perfectly fun
09:11 - so there you have it we now have
09:13 - everything set up to begin creating our
09:15 - game we set up the main camera and a
09:17 - main game object there won't be the
09:19 - entry point for the game we also
09:21 - imported the code monkey utilities which
09:22 - will be extremely useful for helping us
09:24 - make our game faster and we also made
09:26 - the game assets class which will also be
09:28 - very useful for grabbing acid references
09:30 - from code in the next video we're going
09:32 - to start building our game by creating
09:34 - our snake and moving it around the map
09:36 - as always you can download the project
09:38 - files in a Tony's from indie code monkey
09:39 - calm if you have any questions post them
09:41 - in the comments around in my best answer
09:43 - subscribe for more videos and I'll see
09:45 - you next time

Cleaned transcript:

hello and welcome I'm your code monkey miniseries we're going to make snake in the unity in this video we're going to setup our scene to be able to start making our game let's begin all right so the goal of this series is to make snake in unity it's a very simple game which makes it perfect for beginners to learn so here is the unity main window we're going to create a new project name it snake and we're going to use the ETD template all right so let's hit create project all right so here's our completely empty scene now the first thing we're going to do is give our scene a more appropriate name than sample scene so let's rename this to game scene this will be the main scene where our game is we won't later have a different scene for the main menu and anything else we need so let's set up our main camera since we selected 2d our camera is already in orthographic mode which is what we need in our display in 2d here we can see the orthographic size of our camera this size represents the amount of units is played vertically so in this case this is half of our vertical size so with the Sun is a 5 we are currently seeing from minus 5 to plus 5 so in order to get a total vertical space of 100 units let's set our size to 50 so just like that you can see that our camera displaying from minus 50 all the way up here to plus 50 ok that's our camera setup now let's create a game handler which won't be our main starting object so we create a new empty game object name this the game hammer and let's locate it on 0 0 now this will be our main container for all of our preset scene objects the better you keep your objects organized the easier it is to find what you're looking for so in here I'm going to drag the camera inside the game Hamill now let's make a game handler script which will be the entry point for most of our game so before we do that let's create a new folder and we're going to name this script making you see sharp script and this will be our game hello ok here is our script and now let's just add a debug log on our start debug back home and say game handler that start so banging here let's write script onto our game handler game object and run the code any of their days game handle dot start on the console so everything is on good we have our entry point correctly working so now let's set up a background object so first let's create another folder this will be for our textures all right so I've copied some textures in here I have the snake and food textures and then I also have a simple white pixel texture this is very helpful when we want to display a common rectangle on a sprite render as you can see it is literally just a onebyone white pixel so let's begin by setting up the import options for this texture which for our white pixel we want the pixels per unit to match one so whenever we apply this texture it will occupy one unit now for our other textures which you said here will depend on the size of the texture that you have drawn in this case I wanted to occupy a bit more than one unit so much but at about 180 when we finally use this texture we will modify this to make sure everything works correctly so our game won't be grid based and the grid won't have a size of one so that's why we are setting up our textures to occupy roughly one unit okay so let's draw something in our scene create a game object this won't be the background let's add the sprite renderer component and again with just the sprite renderer you can see that nothing is visible so that's why we drag our home phone white pixel and just like that we have a white pixel occupying one by one let's make it in gray to be a bit different from the background and stretch it to 50/50 which will be the total size of our map again our game won't be grid based so down here we want to be grid position 0 0 and over here 25 25 so let's shift our background to 25 25 0 and just like that our camera is there on 0 0 and the background works like that ok now let's make a new game object this will be our snake and we're going to add again these fried render component and drag the snake head if we zoom in we can see one unit in our grid and as you can see the exercise is pretty much correct it is supposed to occupy just about the correct size the grid so this is our snake with its texture ok now let's set up some basic sorting layers so you can simply click in here and add a new sorting layer let's make a background layer so the background layer renders before the default so the default is on top of the background and then we have the new layer and this will be over just in case we need it later so down here our snake won't be on the default sorting layer and our background won't be on the background soaring away okay so this is our basic setup we have our camera correctly setup we have a background just to show the play area and we have our snake object now in order to help us develop our game faster we're going to use some very helpful classes from decode monkey Tony's this is just an optional step you don't absolutely need to have them but it will help us in iterating and debugging our game you can go to the website unity code monkey dotcom to download the utilities for free and then you get a unity package file when you open the unity package file you'll see this window these utilities contain a lot of classes and functions that will be immensely helpful while developing the game so in here we simply select everything and import and there it is you can see now we have a code monkey folder on our script that contains everything and as you can see this contains all of the source files so feel free to go through all of these to see how everything works now to make sure everything is set up correctly and let's go into the game handler we want to spawn some popups so let's go all the way up here and write using code monkey and using code monkey utils this is how we use the code monkey namespace and now in here on let's create a function periodic which triggers an action every certain amount of time so we will execute this action and inside let's do a text popper we're going to execute this action on every point three seconds so this might seem confusing but it's extremely simple and here we are similarly going to trigger this action every 300 milliseconds and inside this action we are simply going to do a text pop up on the mouse position saying a text and the number this just so we can verify that everything has been correctly installed so let's test and yep there this as you can see we are getting our popups which means the utilities are correctly working this will be very useful as we go on but again as I said this is only optional you don't absolutely need to have this but it won't be very helpful so we have our complete setup almost done let's add one more very useful thing we're going to create a class that we can use to easily refer assets from code that way we keep all our references in just one class and everywhere else in our code we just access it so let's create a new C sharp script and we're going to call this the game Athens okay so in here we won't have various films for all the asset references that we need so for example we add a film for a strike for the snake head sprite so back into the editor in here let's create a new game object this will be the game assets and we drag our script onto it so as you can see we have a public film for our snake head sprite so let's drag that onto there and now here in our code in order to access this from another class let's add a static instance now in here normally the correct name is example like this we name it instance however in this case and in this case alone we're going to make it just died in order to make our code easier to write again as I said in any other case you should give a proper name to your instance variable this is a very unique exception just so that elsewhere we can simply do game assets that I dot snake head sprite if you make a static instance outside of this you should give it a proper variable name okay so we have a static variable for our instance now we need to make a private void awake and inside our way we set the instance to this so just like that we can access all of these public fields through a static reference for testing let's go into the game Hamlet and here we'll create a new game object we add a sprite renderer component and then we can set the sprite to be grabbed from the game assets class dot instance and then we grab our snake at sprite so just like that you can see how we can have an acid reference through our code so now if we run our game yep there you go we have a new game object and it is correctly using the snakehead sprite now we need just one last thing which is we need to make sure that the game assets are awake runs before anyone else tries to access one of these fields so it can simply go into edit project settings then the script execution order and in here we drag the game assets script and we put it to run before the default time this will make sure that game assets that script the awake runs before any other script run the game again and as you see everything works perfectly fun so there you have it we now have everything set up to begin creating our game we set up the main camera and a main game object there won't be the entry point for the game we also imported the code monkey utilities which will be extremely useful for helping us make our game faster and we also made the game assets class which will also be very useful for grabbing acid references from code in the next video we're going to start building our game by creating our snake and moving it around the map as always you can download the project files in a Tony's from indie code monkey calm if you have any questions post them in the comments around in my best answer subscribe for more videos and I'll see you next time
