With timestamps:

00:00 - hello and welcome I'm your code Mahim in
00:01 - the series were making snake in unity in
00:04 - this video we're going to handle sounds
00:06 - and save the high score once we
00:10 - all right so here's our snake game we
00:13 - can move this snake around and eat some
00:15 - food when we eat the snake grows and we
00:18 - can now hit escape to pause our game and
00:21 - in here we got a resume and in main menu
00:23 - go back there and in the previous video
00:25 - we create this main menu we got how to
00:27 - play and back to play and quit and so on
00:30 - so everything is working very nice so
00:32 - far now our game is completely muted so
00:35 - let's have some nice sounds over here in
00:38 - the project files I have a sounds folder
00:40 - with a bunch of sounds I have a button
00:42 - click button over snake die snake eat
00:45 - and snake move the sound effects were
00:47 - created with chip tone which is a great
00:50 - free tool to create simple sounds that
00:52 - is actually an expanded version of
00:53 - another excellent tool which is SFX R so
00:56 - let's create a class to help us play our
00:58 - sounds let's go into our scripts create
01:01 - a new C sharp script this will be our
01:03 - sound manager this will be our class
01:06 - responsible for pulling every one of our
01:08 - sounds so let's make it static so we
01:10 - don't accidentally instantiate it remove
01:15 - monobehaviour and put it like that
01:18 - alright so first let's make a very
01:20 - simple function to play a sound in here
01:24 - we're going to create a game object in
01:30 - order to play sound we need to add the
01:32 - audio source component and now we can
01:37 - access the audio source and call the
01:39 - function play one shot now here in the
01:43 - parameters we need an audio clip
01:45 - reference so it's young with that we're
01:48 - going to go just like we've been doing
01:49 - to our game assets in here make a public
01:52 - audio clip and let's try out the snake
01:55 - loop
01:57 - alright so we can go back to the sound
01:59 - manager access the game assets and call
02:04 - these snake move okay great
02:05 - so this is extremely simple so now we
02:08 - can go into our snake class and let's go
02:11 - down to where we are moving our snake
02:13 - and here let's go into the sound manager
02:16 - and call the play sound function alright
02:20 - not you do it now back into the editor
02:22 - let's write the reference to
02:24 - our game assets just like that okay so
02:27 - let's test and yep there's the sound
02:30 - being point whenever these snake moves
02:32 - okay great so we can all play a very
02:34 - simple sound now let's change our code
02:36 - to be able to play different sounds so
02:39 - here in these some manager let's
02:40 - creating a new to keep track of all
02:41 - possible sounds okay these are all of
02:49 - our sounds and now in our play some
02:51 - function let's receive a sound velm now
02:54 - all we need to know is the auto clip
02:56 - that matches that particular sound so
02:58 - let's go into the game assets and here
03:01 - let's create a class to home both an
03:03 - audio clip and a sound value so let's
03:06 - make it a public class sound audio clip
03:10 - inside we have a sound manager loud
03:13 - sound and also a audio clip and let's
03:19 - make this a serializable class so we can
03:24 - set it in the editor so make it
03:25 - serializable and using system alright
03:30 - this should be working and now instead
03:31 - of having an audio clip for a snake
03:33 - moving here let's simply have an array
03:35 - of sound audio clip okay so let's see
03:40 - how this looks in the editor so here in
03:43 - the editor as you can see we got an
03:44 - array of sound audio clips so let's put
03:47 - up five elements and here they are
03:50 - and now we can set them and yep there it
03:53 - is our snake move snake move snake die
03:55 - and so on and so forth so we now have a
03:57 - custom object keeping our audio clip and
04:00 - the sound together so we need this to
04:02 - find the correct audio clip for the
04:04 - sound that we want so let's go into the
04:05 - sound manager and here let's make a
04:08 - function to do that so a private static
04:10 - you don't return a audio clip now let's
04:14 - call it you get audio clip in here we're
04:17 - going to take a sound as a parameter and
04:20 - now in here on we do is we cycle through
04:22 - the array on the game assets
04:27 - and if the sound audio clips sound
04:32 - matches this sound then we returned and
04:36 - in the end if we can find we returned no
04:39 - and let's also do a debug that will have
04:42 - errors since we should never actually
04:43 - get here all right that should be
04:49 - working so now we can go up here instead
04:51 - of using this snake move we simply use
04:54 - the get audio clip and we pass in our
04:55 - sound so we should now be able to play
04:58 - any of these sounds and if we want to
05:00 - add a new sound we would just add
05:01 - another field in here and then add it on
05:04 - our game essence so now let's go to the
05:07 - snake class and in here instead of just
05:09 - play sound we do play sound and we pass
05:11 - in the sound for the snake move yep just
05:14 - like that and now let's deal with the
05:16 - snake eat and die so in here we have a
05:19 - boolean we are asking the level grid if
05:21 - we ate some food if so we do all this
05:23 - then let's also play the sound for the
05:25 - snake and then here we're checking if
05:28 - the snake has died and if this thing is
05:30 - that Ivan let's play the sound snake die
05:33 - alright so all of that should be working
05:35 - let's run the code and see if sound is
05:37 - correctly being point okay so the move
05:40 - sound is working let's see if the eat
05:41 - sound
05:42 - yep there it is the eat sound is
05:44 - correctly working so we have the move
05:47 - and the eat sound and our code is nicely
05:49 - set up to be able to add more sounds and
05:53 - now that our snake is big enough let's
05:55 - test out the die sound
05:58 - any of their yo we got a very nice game
06:01 - over sound all right so as you can see
06:03 - we have our sounds correctly working so
06:06 - now let's deal with the button sounds
06:07 - and for our button sounds we're going to
06:09 - use something really cool a extension
06:11 - method so let's go into the sound
06:14 - manager down here and let's make a
06:16 - function to add the button sounds so
06:24 - this is an extension method you can see
06:26 - it because it has the disc keyword we're
06:29 - essentially adding a Add button sounds
06:31 - method to our button UI class without
06:33 - modifying the code inside that class so
06:36 - this is great for adding functionality
06:37 - to a previously written class so for
06:40 - example we can go into our main menu
06:42 - window down here we have our code
06:44 - setting the click function on the button
06:46 - UI yep and now in here I can get the
06:49 - button UI component and now as you can
06:51 - see I have the function add button
06:52 - sounds and as you can see it is indeed
06:55 - an extension method so I simply call
06:58 - this function like this and this
06:59 - function does not exist on the button UI
07:01 - but rather in here on our sound manager
07:03 - so this is great and now in here we can
07:06 - either our sounds to this button
07:18 - and just like that we are adding to our
07:21 - mouse over function and to our click
07:23 - function we are adding these delegates
07:25 - which 1.8 the correct sounds so this is
07:28 - an extension method which is extremely
07:30 - useful when you want to add
07:31 - functionality to a class without
07:33 - actually having to modify that class all
07:35 - right so let's test and see if the main
07:37 - menu button now has a sound okay so here
07:41 - we are in the main menu now let's see if
07:42 - the play button has a sound any of there
07:45 - you go there's our mouse over sound and
07:49 - if I click yep there was the click sound
07:52 - and now we're in our main menu and all
07:54 - the snake sounds are correctly still
07:57 - working right great
07:58 - now let's appoint sounds to the rest of
08:01 - the buttons so here on the main menu
08:03 - window we simply call this on these
08:05 - other buttons all right just like that
08:09 - all of our buttons should have our
08:11 - sounds now let's also go into the
08:12 - opposed window and here do the same
08:15 - thing alright so all of our buttons
08:20 - should have sound let's test ok here's
08:23 - the main menu yep everything on one of
08:27 - them has a sound when I click it also
08:30 - has sound so now play now let's see the
08:33 - pause menu there's the sound and so on
08:36 - alright great
08:37 - so we have correctly added sounds to our
08:40 - game we set up the sub manager class to
08:43 - be responsible for all sounds and we can
08:45 - play them when needed so now that we
08:47 - have sounds working and let's deal with
08:49 - saving a high score now in here we are
08:51 - on ready correctly calculating and
08:53 - displaying our current score so let's
08:56 - start off by figuring out how we can
08:57 - store data to be able to store a high
08:59 - score for stirring that we're going to
09:02 - use player prefs
09:03 - this is the simplest way to store
09:05 - persistent data in unity the player
09:08 - prefs
09:09 - has a set int function which takes a key
09:12 - and a value that allows us to save our
09:14 - death
09:15 - so first let's test this out by setting
09:18 - a int with a key value of high score and
09:22 - let's present the value of 100 so we do
09:26 - that then we do player preps dots
09:28 - and then let's read that value to make
09:31 - sure that it is working so we do a play
09:33 - preps that get int and the key that we
09:36 - want is on high score and let's do a
09:39 - debug log on this all right so let's
09:43 - test and see if the console says a
09:45 - hundred so here we are and there's the
09:47 - console indeed saying a hundred so as
09:49 - you can see it's extremely simple to
09:51 - save and all that now in here we can now
09:54 - hide the set end and if we run again it
09:57 - won't say a hundred again and if there
09:59 - it is a hundred again okay great so here
10:02 - now you why we have our score window so
10:05 - now let's add another text field to
10:07 - display the current high score all right
10:17 - so we have our high score being
10:18 - displayed in the corner so let's go into
10:20 - the window code now in awaken here we
10:23 - want to read the high score however we
10:26 - don't want to deal with the player
10:27 - perhaps directly from this window so
10:29 - let's make another class dealing with
10:30 - the scores so make a new c-sharp script
10:34 - this won't be our score now in here
10:37 - let's make this a static class since
10:39 - again we don't want to instantiate this
10:40 - one and let's make a function to return
10:44 - the current high score inside we just to
10:50 - return the player preps that get int and
10:52 - our get int also has a secondary
10:55 - function column which is you can see it
10:58 - takes a keen so our key is high score
11:00 - and then we can also return a default
11:02 - value in case that key does not contain
11:04 - a value so by default we return a zero
11:06 - alright so that's it and now let's go
11:09 - back into our score window and in here
11:12 - on a week we can simply go into our
11:14 - score class and get the high score so
11:19 - with our high score let's simply update
11:20 - our text
11:30 - all right this should be working so
11:32 - let's test and if there's a high-score
11:34 - window saying 100 okay so now here in
11:37 - this corner let's make a function to try
11:39 - to set a new high score so we're going
11:41 - to make a public static ball and call it
11:44 - try set new high score
11:48 - essentially this function won't test to
11:50 - see if the score is a new high score
11:52 - if so it will return true if not it will
11:54 - return false so the first thing we do is
11:57 - get the current high score then we do a
12:01 - test if the current score is higher than
12:02 - the previous high score and if so we
12:06 - want to replace the stored high score
12:11 - and if we did set a new high score then
12:15 - we have correctly set it so we return
12:17 - true and if not we return false so
12:21 - whenever we call this function we know
12:23 - if our given score is a new high score
12:25 - or not okay so just for testing let's go
12:28 - into our game Handler and try to update
12:30 - the high score to 200 so we go into the
12:32 - score class we call try set a new high
12:35 - score to 200 any of there is the high
12:38 - score now says 200 okay great so we can
12:42 - now read the current high score and save
12:43 - a new one now let's call those functions
12:45 - when the snake dies now the snake let's
12:48 - go to the code where the snake has died
12:50 - yep in here and as you can see we are
12:52 - calling our game handler function star
12:55 - in this function when the snake dies we
12:56 - show the game over window and let's also
12:58 - update the high score so we do a score
13:00 - dot try set a new high score and we pass
13:03 - in the score which is currently being
13:04 - stored on this class but now that we
13:07 - have a dedicated score class we should
13:09 - keep all of our score code in that class
13:11 - instead of in here so let's do that
13:27 - all right so we now have all of our
13:29 - score code inside our score class and
13:31 - let's make another function of this one
13:33 - which takes no parameters since this
13:35 - class is the one that contains the sport
13:37 - reason we do this and we return try set
13:41 - new high score with our current score
13:43 - all right this should work now let's
13:46 - also fix the issue on our score window
13:48 - which in here is asking the game handler
13:50 - now in seven life class the score class
13:52 - and here on the snake when we are
13:54 - calling out score instead we tell the
13:56 - score class all right great so now
13:59 - everything is working in here in the
14:00 - game hammer when the snake dies we try
14:02 - to set a new high score however we still
14:05 - have one issue which is on the score
14:07 - window in here we are only updating the
14:09 - high score text on awake so when the
14:11 - snake dies this code will not update so
14:15 - in order to fix that let's go into the
14:16 - store class all the way up here let's
14:18 - make a event call it on high score
14:24 - change so we have that event and now
14:29 - it's trigger event when we set a new
14:31 - high score which is in here after we set
14:35 - the pointer perhaps and we save we check
14:37 - if we have subscribers to this event if
14:39 - so let's fire alright the event should
14:46 - be working so we can now go back into
14:48 - the score window and on awake instead of
14:51 - having this we go into the score coils
14:53 - we subscribe to the on high score
14:54 - changed event and let's make a function
14:58 - to update
15:05 - all right so we got a function to update
15:08 - our high score we call that function on
15:09 - awake and also when the high score has
15:11 - changed so you should be able to save a
15:14 - new high score if you beat the current
15:16 - high score and we should be able to see
15:17 - it updated on the score window so let's
15:20 - test okay so here we are with a high
15:23 - score of two hundred we had a hundred
15:25 - per food we ate so all we need to do is
15:28 - eat more than two and we won't beat our
15:30 - current high score so we have a score of
15:37 - 600 which is bigger than the current
15:39 - high score of two hundreds now let's die
15:40 - and see what happens yep we have done as
15:44 - you can see the high score has correctly
15:46 - increased to 600 and now if we hit retry
15:49 - yep there we go it still saves and it
15:51 - sells as 600 all right so we are
15:54 - correctly saving our high score now one
15:56 - more thing we can do is change the game
15:58 - over window for when we beat the high
16:00 - score first let's go into the score
16:02 - window and make a function to hide it so
16:05 - we can hide this when we show our game
16:06 - over window okay so we can now hide the
16:15 - score window we are doing that so that
16:17 - we hide the score when you show the game
16:19 - over window so let's go in here and well
16:22 - let's first change it in the editor here
16:24 - we have the game over window with a
16:26 - retry button now it's for a text field
16:28 - above it
16:41 - so we have a congratulation message that
16:44 - will appear when we beat the high score
16:46 - we have something showing our score in
16:48 - this run and we have something showing
16:50 - they currently saved score all right so
16:52 - let's deal with that in the code here on
16:55 - the GAMEOVER window first we need to
16:57 - know if we did beat the high score so on
16:59 - our show static you receive a boolean
17:02 - for is new high score and in here if
17:09 - this is a new high score we want to show
17:11 - the message if not then we want to hide
17:16 - so essentially set the text object game
17:20 - object to active based on if it is a new
17:23 - high score and then for the normal score
17:25 - text let's just change that
17:41 - all right so we show the new high score
17:44 - text if this is a new high score if not
17:47 - it is hidden then we show the current
17:49 - score for this run and then we show the
17:51 - currently saved high score so now all we
17:53 - need to do is go into the game hammer
17:54 - and down here when the snake has died we
17:57 - show static then we need to save on this
18:00 - function which returns if this is a new
18:02 - high score so we passed that to that and
18:08 - let's also high D score window all right
18:13 - everything should be working
18:15 - let's test okay here we are everything
18:17 - is so perfectly normal the current high
18:19 - score is 600 so let's try to beat that
18:29 - okay we have 900 now let's lose and see
18:34 - if there you go there's the message
18:36 - saying a new high score we currently
18:38 - saved high score is 900 which is the one
18:39 - we got in this run and as you can see
18:41 - the score window on the background is
18:43 - hidden so everything looks nice and
18:44 - clean now let's try if we don't beat the
18:47 - high score as you can see the high score
18:49 - is currently 900 okay so we have 600
18:54 - which is under the current high score so
18:56 - let's die and see any of their days it
18:58 - does not say the congratulations message
19:00 - and it does show the current score of
19:02 - 600 for this run and the stored high
19:04 - score of 900 so there you have it we
19:08 - have it sounds to our game for the
19:09 - various actions of the snake as well as
19:11 - for the buttons we also set up a class
19:13 - to handle scoring with the ability to
19:15 - get the current high score and save a
19:17 - new one as always you can download the
19:19 - project from the utilities from unity
19:21 - con monkey comm if you have any
19:22 - questions post any comments and I'll do
19:24 - my best
19:24 - Angela subscribe for more videos and
19:26 - I'll see you next time

Cleaned transcript:

hello and welcome I'm your code Mahim in the series were making snake in unity in this video we're going to handle sounds and save the high score once we all right so here's our snake game we can move this snake around and eat some food when we eat the snake grows and we can now hit escape to pause our game and in here we got a resume and in main menu go back there and in the previous video we create this main menu we got how to play and back to play and quit and so on so everything is working very nice so far now our game is completely muted so let's have some nice sounds over here in the project files I have a sounds folder with a bunch of sounds I have a button click button over snake die snake eat and snake move the sound effects were created with chip tone which is a great free tool to create simple sounds that is actually an expanded version of another excellent tool which is SFX R so let's create a class to help us play our sounds let's go into our scripts create a new C sharp script this will be our sound manager this will be our class responsible for pulling every one of our sounds so let's make it static so we don't accidentally instantiate it remove monobehaviour and put it like that alright so first let's make a very simple function to play a sound in here we're going to create a game object in order to play sound we need to add the audio source component and now we can access the audio source and call the function play one shot now here in the parameters we need an audio clip reference so it's young with that we're going to go just like we've been doing to our game assets in here make a public audio clip and let's try out the snake loop alright so we can go back to the sound manager access the game assets and call these snake move okay great so this is extremely simple so now we can go into our snake class and let's go down to where we are moving our snake and here let's go into the sound manager and call the play sound function alright not you do it now back into the editor let's write the reference to our game assets just like that okay so let's test and yep there's the sound being point whenever these snake moves okay great so we can all play a very simple sound now let's change our code to be able to play different sounds so here in these some manager let's creating a new to keep track of all possible sounds okay these are all of our sounds and now in our play some function let's receive a sound velm now all we need to know is the auto clip that matches that particular sound so let's go into the game assets and here let's create a class to home both an audio clip and a sound value so let's make it a public class sound audio clip inside we have a sound manager loud sound and also a audio clip and let's make this a serializable class so we can set it in the editor so make it serializable and using system alright this should be working and now instead of having an audio clip for a snake moving here let's simply have an array of sound audio clip okay so let's see how this looks in the editor so here in the editor as you can see we got an array of sound audio clips so let's put up five elements and here they are and now we can set them and yep there it is our snake move snake move snake die and so on and so forth so we now have a custom object keeping our audio clip and the sound together so we need this to find the correct audio clip for the sound that we want so let's go into the sound manager and here let's make a function to do that so a private static you don't return a audio clip now let's call it you get audio clip in here we're going to take a sound as a parameter and now in here on we do is we cycle through the array on the game assets and if the sound audio clips sound matches this sound then we returned and in the end if we can find we returned no and let's also do a debug that will have errors since we should never actually get here all right that should be working so now we can go up here instead of using this snake move we simply use the get audio clip and we pass in our sound so we should now be able to play any of these sounds and if we want to add a new sound we would just add another field in here and then add it on our game essence so now let's go to the snake class and in here instead of just play sound we do play sound and we pass in the sound for the snake move yep just like that and now let's deal with the snake eat and die so in here we have a boolean we are asking the level grid if we ate some food if so we do all this then let's also play the sound for the snake and then here we're checking if the snake has died and if this thing is that Ivan let's play the sound snake die alright so all of that should be working let's run the code and see if sound is correctly being point okay so the move sound is working let's see if the eat sound yep there it is the eat sound is correctly working so we have the move and the eat sound and our code is nicely set up to be able to add more sounds and now that our snake is big enough let's test out the die sound any of their yo we got a very nice game over sound all right so as you can see we have our sounds correctly working so now let's deal with the button sounds and for our button sounds we're going to use something really cool a extension method so let's go into the sound manager down here and let's make a function to add the button sounds so this is an extension method you can see it because it has the disc keyword we're essentially adding a Add button sounds method to our button UI class without modifying the code inside that class so this is great for adding functionality to a previously written class so for example we can go into our main menu window down here we have our code setting the click function on the button UI yep and now in here I can get the button UI component and now as you can see I have the function add button sounds and as you can see it is indeed an extension method so I simply call this function like this and this function does not exist on the button UI but rather in here on our sound manager so this is great and now in here we can either our sounds to this button and just like that we are adding to our mouse over function and to our click function we are adding these delegates which 1.8 the correct sounds so this is an extension method which is extremely useful when you want to add functionality to a class without actually having to modify that class all right so let's test and see if the main menu button now has a sound okay so here we are in the main menu now let's see if the play button has a sound any of there you go there's our mouse over sound and if I click yep there was the click sound and now we're in our main menu and all the snake sounds are correctly still working right great now let's appoint sounds to the rest of the buttons so here on the main menu window we simply call this on these other buttons all right just like that all of our buttons should have our sounds now let's also go into the opposed window and here do the same thing alright so all of our buttons should have sound let's test ok here's the main menu yep everything on one of them has a sound when I click it also has sound so now play now let's see the pause menu there's the sound and so on alright great so we have correctly added sounds to our game we set up the sub manager class to be responsible for all sounds and we can play them when needed so now that we have sounds working and let's deal with saving a high score now in here we are on ready correctly calculating and displaying our current score so let's start off by figuring out how we can store data to be able to store a high score for stirring that we're going to use player prefs this is the simplest way to store persistent data in unity the player prefs has a set int function which takes a key and a value that allows us to save our death so first let's test this out by setting a int with a key value of high score and let's present the value of 100 so we do that then we do player preps dots and then let's read that value to make sure that it is working so we do a play preps that get int and the key that we want is on high score and let's do a debug log on this all right so let's test and see if the console says a hundred so here we are and there's the console indeed saying a hundred so as you can see it's extremely simple to save and all that now in here we can now hide the set end and if we run again it won't say a hundred again and if there it is a hundred again okay great so here now you why we have our score window so now let's add another text field to display the current high score all right so we have our high score being displayed in the corner so let's go into the window code now in awaken here we want to read the high score however we don't want to deal with the player perhaps directly from this window so let's make another class dealing with the scores so make a new csharp script this won't be our score now in here let's make this a static class since again we don't want to instantiate this one and let's make a function to return the current high score inside we just to return the player preps that get int and our get int also has a secondary function column which is you can see it takes a keen so our key is high score and then we can also return a default value in case that key does not contain a value so by default we return a zero alright so that's it and now let's go back into our score window and in here on a week we can simply go into our score class and get the high score so with our high score let's simply update our text all right this should be working so let's test and if there's a highscore window saying 100 okay so now here in this corner let's make a function to try to set a new high score so we're going to make a public static ball and call it try set new high score essentially this function won't test to see if the score is a new high score if so it will return true if not it will return false so the first thing we do is get the current high score then we do a test if the current score is higher than the previous high score and if so we want to replace the stored high score and if we did set a new high score then we have correctly set it so we return true and if not we return false so whenever we call this function we know if our given score is a new high score or not okay so just for testing let's go into our game Handler and try to update the high score to 200 so we go into the score class we call try set a new high score to 200 any of there is the high score now says 200 okay great so we can now read the current high score and save a new one now let's call those functions when the snake dies now the snake let's go to the code where the snake has died yep in here and as you can see we are calling our game handler function star in this function when the snake dies we show the game over window and let's also update the high score so we do a score dot try set a new high score and we pass in the score which is currently being stored on this class but now that we have a dedicated score class we should keep all of our score code in that class instead of in here so let's do that all right so we now have all of our score code inside our score class and let's make another function of this one which takes no parameters since this class is the one that contains the sport reason we do this and we return try set new high score with our current score all right this should work now let's also fix the issue on our score window which in here is asking the game handler now in seven life class the score class and here on the snake when we are calling out score instead we tell the score class all right great so now everything is working in here in the game hammer when the snake dies we try to set a new high score however we still have one issue which is on the score window in here we are only updating the high score text on awake so when the snake dies this code will not update so in order to fix that let's go into the store class all the way up here let's make a event call it on high score change so we have that event and now it's trigger event when we set a new high score which is in here after we set the pointer perhaps and we save we check if we have subscribers to this event if so let's fire alright the event should be working so we can now go back into the score window and on awake instead of having this we go into the score coils we subscribe to the on high score changed event and let's make a function to update all right so we got a function to update our high score we call that function on awake and also when the high score has changed so you should be able to save a new high score if you beat the current high score and we should be able to see it updated on the score window so let's test okay so here we are with a high score of two hundred we had a hundred per food we ate so all we need to do is eat more than two and we won't beat our current high score so we have a score of 600 which is bigger than the current high score of two hundreds now let's die and see what happens yep we have done as you can see the high score has correctly increased to 600 and now if we hit retry yep there we go it still saves and it sells as 600 all right so we are correctly saving our high score now one more thing we can do is change the game over window for when we beat the high score first let's go into the score window and make a function to hide it so we can hide this when we show our game over window okay so we can now hide the score window we are doing that so that we hide the score when you show the game over window so let's go in here and well let's first change it in the editor here we have the game over window with a retry button now it's for a text field above it so we have a congratulation message that will appear when we beat the high score we have something showing our score in this run and we have something showing they currently saved score all right so let's deal with that in the code here on the GAMEOVER window first we need to know if we did beat the high score so on our show static you receive a boolean for is new high score and in here if this is a new high score we want to show the message if not then we want to hide so essentially set the text object game object to active based on if it is a new high score and then for the normal score text let's just change that all right so we show the new high score text if this is a new high score if not it is hidden then we show the current score for this run and then we show the currently saved high score so now all we need to do is go into the game hammer and down here when the snake has died we show static then we need to save on this function which returns if this is a new high score so we passed that to that and let's also high D score window all right everything should be working let's test okay here we are everything is so perfectly normal the current high score is 600 so let's try to beat that okay we have 900 now let's lose and see if there you go there's the message saying a new high score we currently saved high score is 900 which is the one we got in this run and as you can see the score window on the background is hidden so everything looks nice and clean now let's try if we don't beat the high score as you can see the high score is currently 900 okay so we have 600 which is under the current high score so let's die and see any of their days it does not say the congratulations message and it does show the current score of 600 for this run and the stored high score of 900 so there you have it we have it sounds to our game for the various actions of the snake as well as for the buttons we also set up a class to handle scoring with the ability to get the current high score and save a new one as always you can download the project from the utilities from unity con monkey comm if you have any questions post any comments and I'll do my best Angela subscribe for more videos and I'll see you next time
