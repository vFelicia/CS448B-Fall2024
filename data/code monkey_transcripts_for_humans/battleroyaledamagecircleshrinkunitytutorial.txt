With timestamps:

00:00 - hello and welcome I am your code monkey
00:01 - in this video we're going to create the
00:03 - damage circle that shrinks just like in
00:05 - Battle Royale games let's begin
00:10 - so this is what we want to create I have
00:12 - a player character here that I can move
00:14 - with a keyboard and in here you can see
00:17 - that we have a damage circle and the
00:19 - secondary is the target circle where the
00:22 - red circle won't shrink towards and if I
00:25 - go outside of the red circle you can see
00:27 - that I start to take damage if I go
00:28 - inside the damage stops so after a while
00:31 - it shrinks to that and it shows the next
00:33 - shrink position this health system that
00:35 - I'm using is the one from Apex legends
00:37 - which was created in a previous video so
00:39 - check that out if you haven't already
00:40 - all right so let's get to it so here is
00:44 - the starting scene I have a player that
00:46 - I can move around and in the UI and here
00:49 - you can see my current health so let's
00:51 - start off by seeing how we're going to
00:52 - display our damage circle so essentially
00:55 - we need to show a circle which is fully
00:57 - transparent inside and red on the
00:59 - outside now there are several ways we
01:01 - can do this we could use a shader cut
01:04 - out and tint in red outside of it that
01:07 - would allow us to make some special
01:08 - effects like some animation on the
01:10 - outside texture or we can just use a
01:13 - simple circle texture on a sprite
01:15 - renderer which is what we're going to do
01:17 - so over here in the textures folder I
01:19 - have this texture in here as you can see
01:22 - it has a circle red on the outside and
01:24 - transparent on the inside for the pixels
01:27 - per unit I'm going to choose the same as
01:29 - the texture size so just like that if I
01:32 - drag the texture I have my circle shrink
01:35 - and due to the pixels per unit right now
01:38 - it's occupying one unit so this is our
01:40 - circle sprite okay so this looks mostly
01:44 - okay but obviously we need to be tinted
01:46 - in red on the outside as well so for
01:49 - that we are going to create a new sprite
01:51 - render and in here in order to make it
01:56 - visible I'm going to use just a simple
01:58 - white 1x1 pixel this is just a simple
02:01 - pixel that is literally just a texture
02:03 - that is 1 by 1 in white so by using that
02:06 - the sprite is now visible and now I can
02:08 - stretch it and I can tint it in red to
02:11 - match the outside and I need four of
02:13 - these for the four sides outside of the
02:15 - circle and through code we're going to
02:18 - set the size to correctly match the size
02:19 - of the circle so that's pretty much it
02:22 - for how we're going to set up
02:23 - visuals let's just rename this to more
02:25 - proper names and let's put them all
02:32 - inside a container game object let's
02:35 - name this the damage circle and drag
02:38 - everything inside and just like that
02:40 - okay so now let's make a script to
02:42 - handle it so let's make a new c-sharp
02:44 - script this will be our damage circle
02:47 - and we're going to drag it onto our game
02:49 - object okay so here on our code let's
02:52 - first go into our await to grab all of
02:54 - our references okay so we have our
03:05 - references to the circle and all of our
03:07 - signs now let's make a simple function
03:09 - to set our circle size so we do a
03:12 - private void let's call this set circle
03:15 - signs and in here we're going to receive
03:17 - a vector three for the size and inside
03:21 - and we're going to do is go into the
03:23 - circle transform and set the unwelcome
03:25 - scale to be our size so for testing
03:29 - let's go here onto our awake and let's
03:31 - set the circle size to be let's say 200
03:37 - all right so let's test for testing
03:45 - let's simply hide the others since we
03:47 - only want to see the circle size all
03:49 - right let's run the code and yep the
03:51 - circle does seem to have a size of 200
03:53 - let's stop it go into the circle and
03:55 - there it is 200 200 okay great
03:57 - now we need to position and scale the
03:59 - sides and for the size it will depend on
04:02 - the total size of your map it just needs
04:04 - to be stretch enough to where the player
04:06 - can walk so that it is always visible
04:08 - now we could do some really complex
04:10 - calculations to make the size perfectly
04:12 - fit whatever rectangle we want but in
04:14 - here we're simply going for the similar
04:15 - way of just making it very large so in
04:17 - here for example we would stretch it
04:19 - into there to where the player never
04:22 - goes past that same thing for the top
04:24 - and all the other size okay so let's do
04:26 - this through our code so let's start off
04:28 - with the top we're going to set the top
04:31 - transform local scale we're going to put
04:34 - this with the size of
04:36 - a thousand now we need to position it so
04:39 - top transform dot hello composition now
04:42 - if you remember how skin works it scales
04:44 - exactly from the middle so in here we
04:46 - need to move it up by half of our size
04:48 - plus half the size of the circle so we
04:51 - do a new vector3 this is the top
04:54 - transform so for the X we'll leave it on
04:56 - 0 and now for the Y we want half of our
04:59 - local scale plus half of our size so
05:04 - this is our Y times 0.5 up alright so
05:08 - that should do it for the top let's test
05:10 - and if there's the top as you can see it
05:13 - has a very large size of a thousand a
05:15 - thousand and it is correctly placed
05:16 - exactly on top of the circle so in here
05:19 - you can see that there's no seams it's
05:21 - all very seamless all right great
05:23 - now let's do the same thing for the
05:25 - bottom so we're going to set the bottom
05:29 - transform for the in local scale let's
05:33 - do the exact same thing now for the
05:34 - unwelcome position stead of going up
05:36 - we're going down and then down on this
05:39 - alright okay there's the top in there
05:41 - and down here yep there's the bottom
05:43 - alright so far so good now let's see on
05:46 - with the signs first let's set the left
05:48 - side so we take the left transform and
05:50 - set the local scale now for the X let's
05:55 - give it a thousand and now for the Y
05:58 - let's give it the same as our circle
05:59 - size so this is dot Y then we move it to
06:02 - the left so we do an let transform the
06:05 - whole composition and we set it we move
06:09 - to the left by half of our size so we
06:11 - take the left transform dot local scale
06:14 - dot X multiplied by 0.5 up and we shift
06:18 - this to the left side and also by the
06:22 - size dot X also half of it and for the
06:26 - one I will leave it at zero alright so
06:28 - let's see if the left is working
06:30 - correctly if there it is there's the
06:32 - left one and as you can see there are no
06:33 - seams the only left one is in there the
06:35 - top is in there the circle in here and
06:37 - the bottom in here and everything is
06:38 - fixed on perfect now all we on left is
06:41 - the right side let's see so the pretty
06:44 - much exact same thing
06:47 - so then here we do a plus and yet there
06:53 - it is as you can see all of our sides
06:55 - are currently working and now we do have
06:57 - a circle being visually shown right
07:00 - great so we can now dynamically size our
07:03 - circle and everything else gets resized
07:05 - accordingly so now that we have the size
07:08 - working let's set another parameter for
07:10 - the position of the damaged circle now
07:12 - for the position we could shift the
07:14 - circle transform and the table transform
07:16 - now these and that would work
07:18 - however in here as you can see we are
07:19 - using a very nice container so we can
07:22 - simply locate everything on the unload
07:24 - composition inside and on the outside we
07:26 - simply move this container so let's
07:28 - receive a vector3 this will be our
07:32 - position and we simply set the transform
07:36 - position to be on this position so you
07:40 - know let's try putting it on the right
07:42 - side okay
07:45 - so let's test and if they're dizzy
07:47 - circum is now on a hundred one hundred
07:49 - in here and it still has a size of two
07:51 - hundred and all the edges work correctly
07:54 - right great so we have the circle where
07:57 - we want with whatever size we want now
07:59 - obviously we want the circle to cause
08:01 - damage to our player if he is outside of
08:03 - it so let's make a function to testify a
08:05 - certain position is outside of the
08:07 - circle so let's go down here make a
08:10 - private ball and let's call this is
08:12 - outside circle now we're going to
08:15 - receive a vector3 for the position now
08:19 - in here to test this is very simple
08:20 - since it's a circle so we just need to
08:23 - calculate the distance between this
08:25 - point and the circle position and if
08:28 - that distance is more than the circle
08:29 - radius then the position is indeed
08:31 - outside of the circle so let's go up
08:33 - here to store the circle size and
08:35 - position and we're simply going to set
08:39 - it here in our function
08:43 - so we now have these two variables that
08:45 - contain the current size and position of
08:47 - the circle now in here we return the
08:51 - vector three distance we calculate the
08:53 - distance between this position and the
08:55 - circle position and we are outside the
08:58 - circle if the distance between that
09:00 - position in the circle position is
09:01 - bigger than the circle size in this case
09:05 - the circle will always be uniform so we
09:07 - can simply use the X now here however
09:10 - this contains the diameter and not the
09:12 - radius so let's multiply it by 0.5 all
09:15 - right so that's pretty much it now let's
09:18 - make a static function so we can easily
09:20 - call this from the player and let's go
09:26 - up here to make a private static
09:29 - instance so we can simply do a return on
09:35 - the instance that is outside circle all
09:39 - right so we have this function that we
09:41 - can come from anywhere to see if a
09:42 - certain position is outside of the
09:44 - circle so here is my player class don't
09:47 - worry about the code in here since it
09:49 - isn't relevant for the damage circle and
09:51 - here all we need to do is test to see if
09:54 - the player position is outside of the
09:55 - circle so for that I'm going to create a
09:58 - function periodic the function periodic
10:01 - is part of the code monkey Tonys that
10:03 - you can wear out for free from unity
10:04 - code monkey calm it simply triggers an
10:06 - action every certain amount of time so
10:13 - we're going to execute the code in here
10:14 - every 200 milliseconds and the code we
10:17 - want to simply to damage and let's cause
10:22 - 10 damage every 200 milliseconds however
10:26 - we only want to do that if we're outside
10:27 - so let's ask if the damage Circle dot is
10:31 - outside static and we pass in the player
10:34 - position so if the player is outside
10:36 - then caused damage all right so let's
10:39 - test okay so here I am I am inside the
10:42 - circle with foliage pink now if I move
10:44 - outside and yep there you go I'm now
10:48 - taking damage and now I move inside and
10:50 - I stop taking damage go outside take
10:52 - damage inside and you stop taking notes
10:54 - all right great so we can set the circle
10:57 - size and position and the player takes
10:59 - damage if he goes outside of it so so
11:01 - far so good now let's make our circle
11:03 - shrink so here in the code appear we're
11:05 - already storing the circle size and
11:07 - position now let's also store a private
11:10 - vector3 for the target circle size this
11:14 - won't be the size that we want to shrink
11:16 - to now let's make a update and let's get
11:21 - the change vector between both sides all
11:29 - right so using this we can now calculate
11:31 - the new size and we're going to multiply
11:36 - it by a certain circle shrink speed so
11:40 - let's define it up here and then awake
11:44 - let's set it to a certain amount we're
11:48 - defining this as a normal variable so we
11:49 - could easily change the speed now after
11:52 - calculating the new circle size all we
11:54 - need to do is just set it so we set the
11:56 - circle size let's use the same circle
11:59 - position and the new circle size all
12:03 - right that should do it now let's set up
12:05 - our test here on the awake we're
12:08 - positioning it on 0 0 with 200 200 so
12:11 - let's set the target circle size to be
12:14 - 100 100 all right so let's s and see if
12:18 - the circle doesn't need shrink to half
12:19 - its size yep there's a circle and yes it
12:22 - is indeed shrinking to half its size and
12:24 - if I move away take damage move inside
12:26 - stop taking them if I stay at the edge
12:28 - and yep now I'm taking damage and move
12:31 - inside all right great and it's not
12:33 - shrinking once it reached its target
12:35 - size all right so with the size working
12:37 - let's also add movement to our shrink so
12:39 - we already have the circle position now
12:41 - let's making a private vector3 for the
12:43 - target circle position and on update
12:47 - we're going to do pretty much the same
12:49 - thing going to find a vector3 for the
12:52 - circle move direction which will be the
12:56 - target circle position minus the current
12:58 - circle position normalize the whole
13:00 - valley
13:02 - and recalculate the vector3 for the new
13:05 - circle position which will be the
13:07 - current circle position plus the circle
13:10 - move dear x times all the time and by
13:14 - the circle shrink speed and here we use
13:18 - the new circle position all right that
13:22 - should do it
13:23 - let's go up here and set the target sir
13:25 - composition to be somewhere on the right
13:27 - side all right so let's see if these
13:31 - circle shrinks and moves to the right at
13:33 - the same time and yep there it is the
13:35 - circle is indeed shrinking and moving to
13:37 - the right at the same time all right
13:39 - great
13:40 - now let's add a visual to the target
13:42 - circle so let's duplicate our circle and
13:45 - use this texture in here this one just
13:48 - has the outline of the circle now the
13:50 - way we set things up was that we were
13:52 - moving the container instead of the
13:54 - transforms inside so we need to make
13:56 - sure this one is outside and now in here
13:58 - let's add a reference to our target
14:01 - circle so a private transform for the
14:03 - target circle transform and let's make
14:06 - this a serialize field so we can set it
14:11 - in the editor so here we are in the
14:13 - editors unlike the damage circle and
14:15 - drag our target circle reference okay
14:20 - now let's go down here and create a
14:23 - function to set the target circle so a
14:25 - Frank Lloyd set target circle and we're
14:28 - going to receive a vector three for the
14:31 - position and a vector three for the size
14:33 - and in here and we're going to do is set
14:36 - the target circle transform set the
14:39 - position to this position and the Ilocos
14:42 - scale to this size all right so that
14:48 - positions the visual now let's also set
14:50 - the target circle size and targets our
14:52 - composition and now we can use this
14:57 - function when we go up here on our awake
15:00 - we use this function if you move it to
15:02 - the right side so let's send 50 and 0
15:05 - and 40 sighs let's again use a hundred a
15:08 - hundred
15:10 - all right so let's s and see if
15:12 - everything is still working exactly the
15:14 - same as previously okay so here we are
15:16 - there's the target circle sprite showing
15:18 - where the circle shrink to and as you
15:20 - can see the circle does indeed move
15:22 - towards it and is shrinking towards it
15:24 - and now once it reaches the final size
15:27 - it won't stop shrinking and yep there it
15:29 - is examine like that all right
15:31 - great all right everything is working so
15:33 - far now let's make it shrink but only
15:35 - after some time so here on the saturated
15:38 - circle let's also receive a float for
15:41 - the shrink time this won't be a the
15:44 - amount of time that it waits before it
15:45 - starts to shrink so let's store it up
15:48 - here now we're going to set it down here
15:56 - and now on our update the first thing
16:01 - we're going to do is reduce our shrink
16:03 - timer by time.deltatime and then we're
16:05 - only going to actually modify the circle
16:07 - size if the shrink timer if it is under
16:10 - zero okay so let's test then we're going
16:16 - to start shrinking only after five
16:18 - seconds okay so here it is and
16:20 - everything is stopped and now after five
16:23 - seconds yep there you go it starts to
16:25 - move towards the target all right now
16:27 - let's make it shrink more and more each
16:29 - time so on our update let's figure out
16:32 - when the shrinking has been completed so
16:34 - in here since these are our vectors we
16:35 - can simply use a vector three distance
16:37 - to calculate the difference between them
16:41 - so if the distance between the new
16:43 - circle size and you target circle size
16:46 - if that one is under a certain amount
16:51 - and we also do a test on the new circle
16:57 - position if both the size and position
17:02 - are near their targets then let's shrink
17:05 - again so in here on let's do a set
17:07 - target circle we're going to let's keep
17:11 - the same position so these are
17:12 - composition and for the size let's
17:14 - shrink it a little bit
17:17 - and we're going to shrink after three
17:20 - seconds all right so let's test okay
17:23 - there's the first target size and it's
17:27 - shrinking after five seconds yep there
17:29 - you go and shrinks once it gets there
17:31 - yep it stops and he set the new target
17:34 - size and after three seconds it starts
17:37 - to shrink and again it's gonna shrink
17:39 - again and after five seconds if I stay
17:41 - here in the edge and if there you go I'm
17:43 - outside taking damage and move back in
17:45 - son great so we have all of our
17:47 - shrinking logic working perfectly now
17:50 - only need is to add some randomness so
17:52 - in here instead of always shrinking to
17:54 - the same position and by the same amount
17:56 - let's make a new function this will be
18:00 - our generate target circle and in here
18:05 - let's randomize how much we're going to
18:07 - shrink back so it's a float for the
18:10 - shrink size amount and we're going to
18:13 - simply do a random that range going to
18:15 - shrink by between 5 and 40 so the
18:22 - generate target circle size will be the
18:25 - current certain size minus a new vector3
18:29 - with our ring size amount and let's also
18:34 - generate a new position
18:48 - so we generate the new position based on
18:51 - the current position then we randomized
18:53 - between minus shrink sized amount and
18:54 - the plus shrink size amount and finally
18:57 - we need the random shrink time and then
19:05 - we set all this so we do set target
19:08 - circle we pass in our generated target
19:11 - position generate a target size and the
19:14 - shrink time all right so now up here
19:17 - instead of using this we use generate
19:19 - our target circle all right everything
19:22 - looks good now let's test okay so here I
19:25 - am and that's the target circle and
19:27 - after five seconds it's going to start
19:29 - to shrink yep there you go once it gets
19:31 - there yep it generates a new circle
19:33 - inside the current circle and after a
19:35 - while it's going to shrink to that one
19:37 - and again generate another one and after
19:40 - a while it will shrink again generate
19:41 - and so on and so forth
19:43 - and in the meantime everything some
19:45 - works and if I move outside yep I'm
19:47 - taking damage move inside and now I'm
19:49 - safe so there you have it we create a
19:51 - damage circle shrink for a battle royale
19:53 - game we can place a circle wherever we
19:56 - want with any size we can think of
19:57 - there's an extremely simple function
19:59 - that we can use to test if a certain
20:01 - position is inside or outside of the
20:03 - circle our sprites are dynamically sized
20:05 - so visually everything looks correct
20:07 - regardless of the total size we could
20:10 - further expand it by adding more logic
20:12 - to change the shrinking speed or take
20:14 - more damage the further from the circle
20:15 - the player is we could also change it to
20:17 - make them moving and scaling always take
20:19 - the exact amount of time on to take
20:21 - would be some simple math so this is a
20:23 - great base to add to your battle round
20:25 - game as always you can download the
20:27 - project fountain utilities from unity
20:29 - code monkey comm if you have any
20:31 - questions post them in the comments and
20:32 - I'll do my best Internet subscribe for
20:34 - more videos and I'll see you next time

Cleaned transcript:

hello and welcome I am your code monkey in this video we're going to create the damage circle that shrinks just like in Battle Royale games let's begin so this is what we want to create I have a player character here that I can move with a keyboard and in here you can see that we have a damage circle and the secondary is the target circle where the red circle won't shrink towards and if I go outside of the red circle you can see that I start to take damage if I go inside the damage stops so after a while it shrinks to that and it shows the next shrink position this health system that I'm using is the one from Apex legends which was created in a previous video so check that out if you haven't already all right so let's get to it so here is the starting scene I have a player that I can move around and in the UI and here you can see my current health so let's start off by seeing how we're going to display our damage circle so essentially we need to show a circle which is fully transparent inside and red on the outside now there are several ways we can do this we could use a shader cut out and tint in red outside of it that would allow us to make some special effects like some animation on the outside texture or we can just use a simple circle texture on a sprite renderer which is what we're going to do so over here in the textures folder I have this texture in here as you can see it has a circle red on the outside and transparent on the inside for the pixels per unit I'm going to choose the same as the texture size so just like that if I drag the texture I have my circle shrink and due to the pixels per unit right now it's occupying one unit so this is our circle sprite okay so this looks mostly okay but obviously we need to be tinted in red on the outside as well so for that we are going to create a new sprite render and in here in order to make it visible I'm going to use just a simple white 1x1 pixel this is just a simple pixel that is literally just a texture that is 1 by 1 in white so by using that the sprite is now visible and now I can stretch it and I can tint it in red to match the outside and I need four of these for the four sides outside of the circle and through code we're going to set the size to correctly match the size of the circle so that's pretty much it for how we're going to set up visuals let's just rename this to more proper names and let's put them all inside a container game object let's name this the damage circle and drag everything inside and just like that okay so now let's make a script to handle it so let's make a new csharp script this will be our damage circle and we're going to drag it onto our game object okay so here on our code let's first go into our await to grab all of our references okay so we have our references to the circle and all of our signs now let's make a simple function to set our circle size so we do a private void let's call this set circle signs and in here we're going to receive a vector three for the size and inside and we're going to do is go into the circle transform and set the unwelcome scale to be our size so for testing let's go here onto our awake and let's set the circle size to be let's say 200 all right so let's test for testing let's simply hide the others since we only want to see the circle size all right let's run the code and yep the circle does seem to have a size of 200 let's stop it go into the circle and there it is 200 200 okay great now we need to position and scale the sides and for the size it will depend on the total size of your map it just needs to be stretch enough to where the player can walk so that it is always visible now we could do some really complex calculations to make the size perfectly fit whatever rectangle we want but in here we're simply going for the similar way of just making it very large so in here for example we would stretch it into there to where the player never goes past that same thing for the top and all the other size okay so let's do this through our code so let's start off with the top we're going to set the top transform local scale we're going to put this with the size of a thousand now we need to position it so top transform dot hello composition now if you remember how skin works it scales exactly from the middle so in here we need to move it up by half of our size plus half the size of the circle so we do a new vector3 this is the top transform so for the X we'll leave it on 0 and now for the Y we want half of our local scale plus half of our size so this is our Y times 0.5 up alright so that should do it for the top let's test and if there's the top as you can see it has a very large size of a thousand a thousand and it is correctly placed exactly on top of the circle so in here you can see that there's no seams it's all very seamless all right great now let's do the same thing for the bottom so we're going to set the bottom transform for the in local scale let's do the exact same thing now for the unwelcome position stead of going up we're going down and then down on this alright okay there's the top in there and down here yep there's the bottom alright so far so good now let's see on with the signs first let's set the left side so we take the left transform and set the local scale now for the X let's give it a thousand and now for the Y let's give it the same as our circle size so this is dot Y then we move it to the left so we do an let transform the whole composition and we set it we move to the left by half of our size so we take the left transform dot local scale dot X multiplied by 0.5 up and we shift this to the left side and also by the size dot X also half of it and for the one I will leave it at zero alright so let's see if the left is working correctly if there it is there's the left one and as you can see there are no seams the only left one is in there the top is in there the circle in here and the bottom in here and everything is fixed on perfect now all we on left is the right side let's see so the pretty much exact same thing so then here we do a plus and yet there it is as you can see all of our sides are currently working and now we do have a circle being visually shown right great so we can now dynamically size our circle and everything else gets resized accordingly so now that we have the size working let's set another parameter for the position of the damaged circle now for the position we could shift the circle transform and the table transform now these and that would work however in here as you can see we are using a very nice container so we can simply locate everything on the unload composition inside and on the outside we simply move this container so let's receive a vector3 this will be our position and we simply set the transform position to be on this position so you know let's try putting it on the right side okay so let's test and if they're dizzy circum is now on a hundred one hundred in here and it still has a size of two hundred and all the edges work correctly right great so we have the circle where we want with whatever size we want now obviously we want the circle to cause damage to our player if he is outside of it so let's make a function to testify a certain position is outside of the circle so let's go down here make a private ball and let's call this is outside circle now we're going to receive a vector3 for the position now in here to test this is very simple since it's a circle so we just need to calculate the distance between this point and the circle position and if that distance is more than the circle radius then the position is indeed outside of the circle so let's go up here to store the circle size and position and we're simply going to set it here in our function so we now have these two variables that contain the current size and position of the circle now in here we return the vector three distance we calculate the distance between this position and the circle position and we are outside the circle if the distance between that position in the circle position is bigger than the circle size in this case the circle will always be uniform so we can simply use the X now here however this contains the diameter and not the radius so let's multiply it by 0.5 all right so that's pretty much it now let's make a static function so we can easily call this from the player and let's go up here to make a private static instance so we can simply do a return on the instance that is outside circle all right so we have this function that we can come from anywhere to see if a certain position is outside of the circle so here is my player class don't worry about the code in here since it isn't relevant for the damage circle and here all we need to do is test to see if the player position is outside of the circle so for that I'm going to create a function periodic the function periodic is part of the code monkey Tonys that you can wear out for free from unity code monkey calm it simply triggers an action every certain amount of time so we're going to execute the code in here every 200 milliseconds and the code we want to simply to damage and let's cause 10 damage every 200 milliseconds however we only want to do that if we're outside so let's ask if the damage Circle dot is outside static and we pass in the player position so if the player is outside then caused damage all right so let's test okay so here I am I am inside the circle with foliage pink now if I move outside and yep there you go I'm now taking damage and now I move inside and I stop taking damage go outside take damage inside and you stop taking notes all right great so we can set the circle size and position and the player takes damage if he goes outside of it so so far so good now let's make our circle shrink so here in the code appear we're already storing the circle size and position now let's also store a private vector3 for the target circle size this won't be the size that we want to shrink to now let's make a update and let's get the change vector between both sides all right so using this we can now calculate the new size and we're going to multiply it by a certain circle shrink speed so let's define it up here and then awake let's set it to a certain amount we're defining this as a normal variable so we could easily change the speed now after calculating the new circle size all we need to do is just set it so we set the circle size let's use the same circle position and the new circle size all right that should do it now let's set up our test here on the awake we're positioning it on 0 0 with 200 200 so let's set the target circle size to be 100 100 all right so let's s and see if the circle doesn't need shrink to half its size yep there's a circle and yes it is indeed shrinking to half its size and if I move away take damage move inside stop taking them if I stay at the edge and yep now I'm taking damage and move inside all right great and it's not shrinking once it reached its target size all right so with the size working let's also add movement to our shrink so we already have the circle position now let's making a private vector3 for the target circle position and on update we're going to do pretty much the same thing going to find a vector3 for the circle move direction which will be the target circle position minus the current circle position normalize the whole valley and recalculate the vector3 for the new circle position which will be the current circle position plus the circle move dear x times all the time and by the circle shrink speed and here we use the new circle position all right that should do it let's go up here and set the target sir composition to be somewhere on the right side all right so let's see if these circle shrinks and moves to the right at the same time and yep there it is the circle is indeed shrinking and moving to the right at the same time all right great now let's add a visual to the target circle so let's duplicate our circle and use this texture in here this one just has the outline of the circle now the way we set things up was that we were moving the container instead of the transforms inside so we need to make sure this one is outside and now in here let's add a reference to our target circle so a private transform for the target circle transform and let's make this a serialize field so we can set it in the editor so here we are in the editors unlike the damage circle and drag our target circle reference okay now let's go down here and create a function to set the target circle so a Frank Lloyd set target circle and we're going to receive a vector three for the position and a vector three for the size and in here and we're going to do is set the target circle transform set the position to this position and the Ilocos scale to this size all right so that positions the visual now let's also set the target circle size and targets our composition and now we can use this function when we go up here on our awake we use this function if you move it to the right side so let's send 50 and 0 and 40 sighs let's again use a hundred a hundred all right so let's s and see if everything is still working exactly the same as previously okay so here we are there's the target circle sprite showing where the circle shrink to and as you can see the circle does indeed move towards it and is shrinking towards it and now once it reaches the final size it won't stop shrinking and yep there it is examine like that all right great all right everything is working so far now let's make it shrink but only after some time so here on the saturated circle let's also receive a float for the shrink time this won't be a the amount of time that it waits before it starts to shrink so let's store it up here now we're going to set it down here and now on our update the first thing we're going to do is reduce our shrink timer by time.deltatime and then we're only going to actually modify the circle size if the shrink timer if it is under zero okay so let's test then we're going to start shrinking only after five seconds okay so here it is and everything is stopped and now after five seconds yep there you go it starts to move towards the target all right now let's make it shrink more and more each time so on our update let's figure out when the shrinking has been completed so in here since these are our vectors we can simply use a vector three distance to calculate the difference between them so if the distance between the new circle size and you target circle size if that one is under a certain amount and we also do a test on the new circle position if both the size and position are near their targets then let's shrink again so in here on let's do a set target circle we're going to let's keep the same position so these are composition and for the size let's shrink it a little bit and we're going to shrink after three seconds all right so let's test okay there's the first target size and it's shrinking after five seconds yep there you go and shrinks once it gets there yep it stops and he set the new target size and after three seconds it starts to shrink and again it's gonna shrink again and after five seconds if I stay here in the edge and if there you go I'm outside taking damage and move back in son great so we have all of our shrinking logic working perfectly now only need is to add some randomness so in here instead of always shrinking to the same position and by the same amount let's make a new function this will be our generate target circle and in here let's randomize how much we're going to shrink back so it's a float for the shrink size amount and we're going to simply do a random that range going to shrink by between 5 and 40 so the generate target circle size will be the current certain size minus a new vector3 with our ring size amount and let's also generate a new position so we generate the new position based on the current position then we randomized between minus shrink sized amount and the plus shrink size amount and finally we need the random shrink time and then we set all this so we do set target circle we pass in our generated target position generate a target size and the shrink time all right so now up here instead of using this we use generate our target circle all right everything looks good now let's test okay so here I am and that's the target circle and after five seconds it's going to start to shrink yep there you go once it gets there yep it generates a new circle inside the current circle and after a while it's going to shrink to that one and again generate another one and after a while it will shrink again generate and so on and so forth and in the meantime everything some works and if I move outside yep I'm taking damage move inside and now I'm safe so there you have it we create a damage circle shrink for a battle royale game we can place a circle wherever we want with any size we can think of there's an extremely simple function that we can use to test if a certain position is inside or outside of the circle our sprites are dynamically sized so visually everything looks correct regardless of the total size we could further expand it by adding more logic to change the shrinking speed or take more damage the further from the circle the player is we could also change it to make them moving and scaling always take the exact amount of time on to take would be some simple math so this is a great base to add to your battle round game as always you can download the project fountain utilities from unity code monkey comm if you have any questions post them in the comments and I'll do my best Internet subscribe for more videos and I'll see you next time
