With timestamps:

00:00 - hello and welcome I'm your code monkey
00:02 - and in this video we're going to learn
00:03 - what a sprite runner is and what it's
00:05 - used for let's begin
00:09 - a sprite renderer is the main way to
00:11 - display to these sprites in your game so
00:14 - let's begin by making a new game object
00:17 - and let's name this our sprite and in
00:20 - here let's add a component and it won't
00:23 - be the sprite renderer component so here
00:26 - you can view all the fields of the
00:27 - sprite renderer first of all you have
00:30 - the sprite which is the visual texture
00:32 - that is actually displayed as you can
00:34 - see if you don't apply a sprite then
00:35 - nothing is actually displayed you can
00:38 - see that our game object is in here and
00:40 - nothing is visible so let's go in the
00:42 - textures folder to apply a sprite so in
00:45 - here you can see that I have a spaceship
00:48 - sprite and when you import a texture
00:50 - into unity you can see the import type
00:53 - up here this texture is a simple PNG
00:57 - file and when imported you can see that
01:00 - unity automatically selected the texture
01:02 - type to be a sprite that you can use in
01:05 - TD or in the EU I this is what you need
01:08 - to have selected in order to use the
01:10 - sprite in the sprite renderer so back in
01:13 - our sprite renderer let's go in there we
01:15 - can drag our spaceships right into our
01:17 - sprite field and now as you can see it
01:20 - is visible on the scene window for the
01:22 - size of the sprite and let's go back to
01:24 - the texture import settings so in here
01:27 - on the spaceship you have a pixels per
01:30 - unit field that means how many pixels in
01:33 - the sprite will equal one unit in your
01:35 - scene down here you can view the size of
01:38 - the sprite in this case it is 64 by 64
01:40 - and if we go up here and set the pixels
01:44 - per unit to be 64 and hit apply you can
01:48 - see that the sprite has been resized and
01:51 - now occupies one unit by one unit you
01:53 - can see it matches perfectly it is
01:55 - occupying one unit so if you go in here
01:59 - essentially that converts 64 pixels in
02:02 - the width into one unit and 64 in height
02:05 - and to also one unit always keep the
02:08 - size in mind when drawing an importing
02:10 - new sprites so that's the sprite field
02:12 - now let's go into our sprite again check
02:15 - out the sprite runner so here's our
02:18 - spaceship as our sprite and then we have
02:20 - the color field this
02:22 - the comet in that won't be applied to
02:24 - the sprite so the spaceship is red but
02:27 - using the common field I can tint it in
02:29 - various colors so like that tint it
02:31 - about a blue as you can see it is a tint
02:34 - which multiplies the colors of the
02:36 - spaceship one thing that I always have
02:39 - in my games that is always very useful
02:41 - is a simple white pixel texture that you
02:44 - can see it down here it is literally
02:45 - just a 1x1 white pixel since again if we
02:49 - delete this frighten here so let's
02:51 - duplicate this one and only the sprite
02:53 - and you can see that on the second game
02:55 - object we have nothing visible if you
02:58 - don't apply a sprite then nothing shows
02:59 - up so by having a simple white pixel on
03:02 - your project you can use it whenever you
03:04 - want to display a rectangle and since
03:07 - the sprite is in white you can easily
03:09 - tent it to any color this is extremely
03:12 - useful anytime you need a tinted
03:14 - rectangle for anything in your game like
03:16 - for example for a health bar just do it
03:18 - set the correct size and there you go
03:21 - you got a makeshift health bar right
03:22 - there so back in the sprite runner up
03:25 - next you have the flip which very simply
03:27 - flips the texture in the x-axis or in
03:30 - the y-axis very simple and can be useful
03:33 - in your game then we have the material
03:36 - the material is for more advanced uses
03:39 - for your sprite chances are for the most
03:41 - part you want to use the regular
03:42 - material and just display a simple
03:44 - sprite using a custom material allows
03:47 - you to use custom shaders the shaders
03:50 - won't work the same as with a mesh
03:51 - except if the shader has a texture then
03:54 - it won't be ignored and use these
03:55 - sprites as the texture instead but again
03:58 - for the most part you'll simply use the
04:00 - default then we have the draw mode which
04:03 - you can set a simple size or tile simple
04:06 - simply this place is sprite as normal as
04:09 - you've seen and then we have sliced
04:11 - which first of all you can see a warning
04:13 - in here if you're using slice you should
04:15 - set the sprite import textures to use
04:17 - foam rect so let's go in here instead of
04:19 - using a mesh type for type let's use
04:21 - foam rect and now when using sliced
04:24 - essentially you can go to the sprite
04:26 - editor and slice the texture in here so
04:29 - instead of using the whole spaceship
04:31 - let's just use this part in here just
04:34 - like that let's only display
04:36 - the middle of the spacer and when you
04:39 - check out as you can see it shows only
04:41 - the middle of our spacer so if you set
04:44 - two simple displays entire sprite if you
04:46 - set to slice in only this place that's
04:48 - nice
04:48 - and finally we have timed which lets you
04:51 - tile a sprite multiple times as you can
04:54 - see you change the width and height in
04:56 - here and the sprite gets down correctly
04:58 - yep there you go so after the drum oh do
05:01 - you have the sorting layer and the order
05:03 - in layer this is how you define which
05:05 - sprites are on top of which a sprite on
05:08 - order of one won't show up on top of a
05:10 - sprite on order of zero so let's
05:12 - duplicate our spaceship put another one
05:14 - in there and let's tint this one so we
05:17 - can see both of them right there okay so
05:20 - there you go we have our red sprite and
05:23 - let's put it on two and as you can see
05:26 - it is on top of the other one which is
05:27 - on one so a higher order and later will
05:30 - show up on top of a lower order in layer
05:32 - you can also add your own soaring layers
05:35 - by going in here and click Add sorting
05:37 - layer in here you view only sorting
05:40 - layers so let's make a background layer
05:42 - new layer name it background and now
05:46 - let's drag it on top of the default
05:48 - again the organ here is the order in
05:51 - which the objects are rendered that
05:53 - means the sprite that has the background
05:55 - suring layer won't be rendered before
05:57 - the sprites on the default layer so the
05:59 - sprites on the default layer will show
06:01 - up on top of the ones on the background
06:03 - usually temple to have a bunch of layers
06:06 - for the usual things in your game so at
06:08 - least a background default and then
06:09 - another layer and let's name it over
06:11 - back in our sprite renderer the order is
06:14 - a point after the layers so in here
06:17 - let's put this one on minus 10 which as
06:19 - you can see is under the other spaceship
06:21 - but now if I set the sorting layer to be
06:24 - on over you can see that it is on top
06:26 - the order is minus 10 whereas this one
06:28 - has an order of zero so it has a higher
06:30 - order but it is on the default sorting
06:32 - layer whereas this one is on the over so
06:35 - no matter what number I put in here this
06:37 - one will always be on top of the other
06:38 - one since it is on a layer that is
06:40 - rendered on top of the other one all
06:43 - right so that's what we can do through
06:44 - the editor now let's check out the code
06:46 - so let's go in here and make a
06:49 - new c-sharp script Hema let's name it
06:51 - test sprite renderer let's apply to our
06:54 - first spaceship and let's check out the
06:56 - code so inside let's first grab a
06:59 - reference to our sprite renderer we do
07:01 - that by setting a variable for the
07:03 - sprite renderer and doing game objects
07:06 - that get component of type sprite
07:08 - renderer let's do a debug that one just
07:12 - make sure we're grabbing the reference
07:14 - correctly debug that log of the sprite
07:17 - renderer yep as you can see in the
07:19 - console we are correctly grabbing this
07:21 - friend okay now we can change the sprite
07:24 - through code so let's go up here and add
07:26 - a public field for a sprite and let's
07:29 - say burger sprite and through code we're
07:33 - going to go down here and do sprite
07:35 - renderer dot sprite equals our burger
07:39 - sprite so let's go back into the editor
07:42 - and drag the burger sprite into our
07:45 - field and run the code yep there you our
07:48 - spaceship has now converted into a
07:49 - burger through code then we can also
07:52 - change the content so let's go into the
07:55 - sprite renderer and set the color to a
07:58 - new color and let's put it on red so one
08:01 - zero zero and let's see the color there
08:04 - you go it's a burger and tinted in red
08:07 - another thing we can do is add
08:09 - transparency so in here and let's set
08:11 - the Alpha 2.5 F essentially it will be
08:13 - half transparent so let's see if there
08:16 - we go a red tinted burger and half
08:18 - transparent so now let's create a new
08:20 - sprite through code so down here let's
08:23 - make a game object burger game objects
08:26 - and we're going to create a new game
08:28 - object give it the name further game ok
08:31 - and we're going to initialize the new
08:33 - game object with a sprite renderer
08:36 - component then we're going to go into
08:38 - the bar game object and get the
08:40 - component for our sprite renderer and
08:43 - call it sprite renderer burger sprite
08:47 - renderer and set the sprite of this one
08:51 - to our burger sprite and remove it from
08:54 - up here
08:54 - so we now should have two different game
08:57 - objects you have there you go there's
08:58 - the spaceship tinted and half
09:00 - transparent and then
09:01 - new game object that we created through
09:03 - code as you can see it is down here it
09:05 - has a sprite render with our sprite so
09:08 - now let's check out the sorting order as
09:10 - you can see the newly created game
09:11 - object is on the sorting layer default
09:13 - with an order in layer of 0 so through
09:17 - code and let's set our initial sprite
09:19 - our spaceships right and in here we can
09:22 - set the sorting order to be let's say 10
09:26 - and we can also change the sprite
09:28 - renderer dot sorting layer name and
09:31 - let's give it the over layer and do the
09:34 - same thing for this one down here and
09:37 - instead of putting it on 10 let's put it
09:40 - on 20 so the burger sprite should be on
09:42 - top of these spaceship sprite and they
09:44 - should both be on this layer in here and
09:47 - yep there you got the burg sprite on top
09:49 - of these spaceships right and if we
09:51 - check out in the hierarchy and look in
09:53 - the inspector you can see this one is
09:56 - indeed on the over layer with an order
09:58 - of 20 and this one is on the over layer
10:02 - with an order of 10 just make sure you
10:05 - actually create a layer by going in here
10:07 - add the layer in here so that you can
10:09 - use the string in your code so there you
10:12 - have it we covered what is a sprite
10:14 - render and all the ways we can modify it
10:16 - both in the editor and through code as
10:18 - always you can download the project
10:20 - files and utilities from unity code
10:22 - monkey comm if you have any questions
10:24 - post them in the comments and I'll do my
10:25 - best answer them subscribe for more
10:27 - videos and I'll see you next time

Cleaned transcript:

hello and welcome I'm your code monkey and in this video we're going to learn what a sprite runner is and what it's used for let's begin a sprite renderer is the main way to display to these sprites in your game so let's begin by making a new game object and let's name this our sprite and in here let's add a component and it won't be the sprite renderer component so here you can view all the fields of the sprite renderer first of all you have the sprite which is the visual texture that is actually displayed as you can see if you don't apply a sprite then nothing is actually displayed you can see that our game object is in here and nothing is visible so let's go in the textures folder to apply a sprite so in here you can see that I have a spaceship sprite and when you import a texture into unity you can see the import type up here this texture is a simple PNG file and when imported you can see that unity automatically selected the texture type to be a sprite that you can use in TD or in the EU I this is what you need to have selected in order to use the sprite in the sprite renderer so back in our sprite renderer let's go in there we can drag our spaceships right into our sprite field and now as you can see it is visible on the scene window for the size of the sprite and let's go back to the texture import settings so in here on the spaceship you have a pixels per unit field that means how many pixels in the sprite will equal one unit in your scene down here you can view the size of the sprite in this case it is 64 by 64 and if we go up here and set the pixels per unit to be 64 and hit apply you can see that the sprite has been resized and now occupies one unit by one unit you can see it matches perfectly it is occupying one unit so if you go in here essentially that converts 64 pixels in the width into one unit and 64 in height and to also one unit always keep the size in mind when drawing an importing new sprites so that's the sprite field now let's go into our sprite again check out the sprite runner so here's our spaceship as our sprite and then we have the color field this the comet in that won't be applied to the sprite so the spaceship is red but using the common field I can tint it in various colors so like that tint it about a blue as you can see it is a tint which multiplies the colors of the spaceship one thing that I always have in my games that is always very useful is a simple white pixel texture that you can see it down here it is literally just a 1x1 white pixel since again if we delete this frighten here so let's duplicate this one and only the sprite and you can see that on the second game object we have nothing visible if you don't apply a sprite then nothing shows up so by having a simple white pixel on your project you can use it whenever you want to display a rectangle and since the sprite is in white you can easily tent it to any color this is extremely useful anytime you need a tinted rectangle for anything in your game like for example for a health bar just do it set the correct size and there you go you got a makeshift health bar right there so back in the sprite runner up next you have the flip which very simply flips the texture in the xaxis or in the yaxis very simple and can be useful in your game then we have the material the material is for more advanced uses for your sprite chances are for the most part you want to use the regular material and just display a simple sprite using a custom material allows you to use custom shaders the shaders won't work the same as with a mesh except if the shader has a texture then it won't be ignored and use these sprites as the texture instead but again for the most part you'll simply use the default then we have the draw mode which you can set a simple size or tile simple simply this place is sprite as normal as you've seen and then we have sliced which first of all you can see a warning in here if you're using slice you should set the sprite import textures to use foam rect so let's go in here instead of using a mesh type for type let's use foam rect and now when using sliced essentially you can go to the sprite editor and slice the texture in here so instead of using the whole spaceship let's just use this part in here just like that let's only display the middle of the spacer and when you check out as you can see it shows only the middle of our spacer so if you set two simple displays entire sprite if you set to slice in only this place that's nice and finally we have timed which lets you tile a sprite multiple times as you can see you change the width and height in here and the sprite gets down correctly yep there you go so after the drum oh do you have the sorting layer and the order in layer this is how you define which sprites are on top of which a sprite on order of one won't show up on top of a sprite on order of zero so let's duplicate our spaceship put another one in there and let's tint this one so we can see both of them right there okay so there you go we have our red sprite and let's put it on two and as you can see it is on top of the other one which is on one so a higher order and later will show up on top of a lower order in layer you can also add your own soaring layers by going in here and click Add sorting layer in here you view only sorting layers so let's make a background layer new layer name it background and now let's drag it on top of the default again the organ here is the order in which the objects are rendered that means the sprite that has the background suring layer won't be rendered before the sprites on the default layer so the sprites on the default layer will show up on top of the ones on the background usually temple to have a bunch of layers for the usual things in your game so at least a background default and then another layer and let's name it over back in our sprite renderer the order is a point after the layers so in here let's put this one on minus 10 which as you can see is under the other spaceship but now if I set the sorting layer to be on over you can see that it is on top the order is minus 10 whereas this one has an order of zero so it has a higher order but it is on the default sorting layer whereas this one is on the over so no matter what number I put in here this one will always be on top of the other one since it is on a layer that is rendered on top of the other one all right so that's what we can do through the editor now let's check out the code so let's go in here and make a new csharp script Hema let's name it test sprite renderer let's apply to our first spaceship and let's check out the code so inside let's first grab a reference to our sprite renderer we do that by setting a variable for the sprite renderer and doing game objects that get component of type sprite renderer let's do a debug that one just make sure we're grabbing the reference correctly debug that log of the sprite renderer yep as you can see in the console we are correctly grabbing this friend okay now we can change the sprite through code so let's go up here and add a public field for a sprite and let's say burger sprite and through code we're going to go down here and do sprite renderer dot sprite equals our burger sprite so let's go back into the editor and drag the burger sprite into our field and run the code yep there you our spaceship has now converted into a burger through code then we can also change the content so let's go into the sprite renderer and set the color to a new color and let's put it on red so one zero zero and let's see the color there you go it's a burger and tinted in red another thing we can do is add transparency so in here and let's set the Alpha 2.5 F essentially it will be half transparent so let's see if there we go a red tinted burger and half transparent so now let's create a new sprite through code so down here let's make a game object burger game objects and we're going to create a new game object give it the name further game ok and we're going to initialize the new game object with a sprite renderer component then we're going to go into the bar game object and get the component for our sprite renderer and call it sprite renderer burger sprite renderer and set the sprite of this one to our burger sprite and remove it from up here so we now should have two different game objects you have there you go there's the spaceship tinted and half transparent and then new game object that we created through code as you can see it is down here it has a sprite render with our sprite so now let's check out the sorting order as you can see the newly created game object is on the sorting layer default with an order in layer of 0 so through code and let's set our initial sprite our spaceships right and in here we can set the sorting order to be let's say 10 and we can also change the sprite renderer dot sorting layer name and let's give it the over layer and do the same thing for this one down here and instead of putting it on 10 let's put it on 20 so the burger sprite should be on top of these spaceship sprite and they should both be on this layer in here and yep there you got the burg sprite on top of these spaceships right and if we check out in the hierarchy and look in the inspector you can see this one is indeed on the over layer with an order of 20 and this one is on the over layer with an order of 10 just make sure you actually create a layer by going in here add the layer in here so that you can use the string in your code so there you have it we covered what is a sprite render and all the ways we can modify it both in the editor and through code as always you can download the project files and utilities from unity code monkey comm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time
