With timestamps:

00:00 - in this video we're going to create the
00:01 - unlevel system that we can apply to any
00:03 - character the underlying system will be
00:05 - very simple and very easy to use with
00:07 - some nice flashy visuals alright let's
00:09 - begin hello and welcome I'm your code
00:18 - monkey and this channel is all about
00:20 - helping you will learn how to make your
00:21 - own games with in-depth tutorials made
00:23 - by a professional indie game developer
00:25 - so if you find the video helpful
00:26 - consider subscribing so here's what we
00:28 - want to create we're going to make the
00:30 - underlying level system as well as a UI
00:33 - to represent it
00:34 - the player character here is also using
00:36 - the same level system we have levels
00:39 - that require certain amounts of
00:40 - experience we can use these buttons to
00:42 - gain some experience so when I click you
00:44 - can see the experience bar go up over
00:46 - time if we get enough experience there
00:49 - you go we got a level up so it shows in
00:50 - here at level and we play some nice
00:52 - effects and animation and then we have
00:55 - these buttons in here to equip items on
00:57 - the player however they need a certain
00:59 - level to be equipped if we add a lot of
01:02 - experience at once you can see that the
01:04 - bar is correctly animated and goes up
01:06 - over time so first we're going to create
01:11 - a simple level system class with a
01:13 - simple function to add the experience
01:15 - which will calculate the 11 once that is
01:17 - working we will create a simple UI and
01:19 - integrate the local system class onto it
01:21 - so we're going to be able to visually
01:23 - see what is happening inside the level
01:25 - system and add some buttons to add our
01:27 - experience then we're going to apply
01:29 - that same logic to our player character
01:31 - so we're going to make him listen to the
01:33 - level system and trigger an animation
01:34 - and particle effect on level up next
01:38 - we're going to make a separate class
01:39 - which will help us animate our bar
01:41 - without modifying the underlying system
01:43 - then we're going to work on adding a max
01:46 - level and a different amount of XP per
01:48 - level and finally we're going to create
01:50 - some buttons for various helmets and add
01:52 - the code to make them only equippable
01:54 - after a certain level alright that's our
01:57 - goal let's get to it here we are in an
02:00 - empty scene let's start off by making a
02:02 - very simple level class to handle our
02:03 - logic so we go in here we make a new
02:06 - c-sharp script this will be our level
02:08 - system now here in our code let's first
02:12 - get rid of
02:12 - monobehaviour since we want this to be a
02:14 - very simple class now to store our
02:18 - current level let's define an inn so
02:20 - prevalent for the unlevel then we also
02:22 - need the experience the player currently
02:24 - has so a private in for the current
02:26 - experience and then we need to know the
02:29 - experience needed to reach the next
02:30 - level so also a private n't
02:32 - for the experience to next level ok so
02:36 - this is the basic information we need
02:37 - for a functional level system so let's
02:40 - make a constructor so a public one
02:42 - system here we set the in level to zero
02:46 - the experience also to zero and let's
02:49 - put the experience the max level at a
02:51 - hundred so we need to gain 100
02:53 - experience in order to go up on level so
02:55 - let's make a function to add experience
02:58 - so a public body at experience and we're
03:02 - going to receive a parameter for the
03:04 - amount in here we increase the
03:07 - experience by the amount and then we
03:10 - check if the experience goes past the
03:12 - amount needed so if the current
03:13 - experience is bigger or equal to the
03:16 - experience to the next level so here we
03:21 - increase our level and we need to reset
03:25 - our experience so we reduce the
03:27 - experience by the amount needed to reach
03:29 - this level so like that ok so this is
03:33 - the basic logic for our level class so
03:37 - we have a level we have the current
03:39 - experience and the experience needed to
03:40 - reach the next level we have our
03:43 - constructor and a function to add
03:44 - experience so let's set up a very quick
03:47 - test like in the editor let's make a new
03:49 - c-sharp script this won't be our testing
03:53 - let's make a game object to keep our
03:55 - testing and drag the script on to it
03:57 - okay now here let's test our class let's
04:00 - make a private void awake and in here
04:03 - we're going to create a new 11 system
04:05 - and then let's just do a debug log to
04:11 - print the current level so let's go into
04:13 - our class in order to make that function
04:15 - so we make a public in get level number
04:19 - and in here we just returned the current
04:22 - level okay so we can now go back into
04:24 - our testing we do a log of the 11 system
04:27 - get level number then let's add some
04:31 - experience so local system had
04:33 - experience let's add a small amount so
04:35 - not enough to reach the next level so
04:37 - add 50 then we print one level again and
04:40 - then we add 60 and finally we print
04:44 - again okay so here we have a nice simple
04:47 - test to let us know if our logic is all
04:49 - correctly working
04:50 - so essentially up here after we
04:52 - construct our level system we should be
04:54 - able to see a zero then we add 50
04:56 - experience which is not enough to reach
04:58 - the next level so in here it should say
05:00 - still zero and finally we add 60 which
05:02 - should get us up one level and this
05:04 - final log should say one so let's see
05:07 - and see the console and here is the
05:10 - console and it does say zero zero one
05:12 - okay great so we have our basic logic
05:15 - fully working now obviously just like
05:17 - this and what's very boring so let's
05:19 - handle some visuals so here go into the
05:22 - canvas let's make a empty game object
05:26 - this will be our little window now in
05:29 - here I'm going to construct a simple UI
06:09 - okay so here is the simple UI it shows
06:12 - the current level then I have a bar in
06:14 - here for the current experience this bar
06:17 - is very simple I just have this game
06:19 - object in here with an image and the
06:22 - image I can set the fill amount you can
06:24 - check out the various videos I have on
06:25 - the channel where I make UI bars for
06:27 - more in-depth tutorial and then I have
06:29 - these three buttons in here so that I
06:31 - can add various amounts of experience
06:33 - these buttons have the button UI
06:35 - component which is part of the code
06:36 - mockito notice that you can grab for
06:38 - free from in Tacoma com
06:39 - it's just a simple class so I can handle
06:42 - our button clicks okay so let's make the
06:45 - code to handle this you want so we make
06:48 - a new c-sharp script this will be our
06:51 - level window and let's drag it on to our
06:54 - level window game object now in here
06:58 - first let's make a private void awake to
07:01 - grab our references
07:11 - okay we have the references now let's
07:13 - make a function to set the size of the
07:15 - experience bar so in here make a prep
07:17 - void set experience bar signs
07:20 - we're going to receive a float for the
07:22 - experience normalize and here all we're
07:27 - going to do is go into the experience
07:29 - bar image and set the fill amount to the
07:31 - experience normalize and yep it's that
07:34 - simple now a function to set the level
07:37 - number and here when we do is go into
07:42 - the in level text to set the text to be
07:45 - level then a new line and then the level
07:49 - number however the level number in our
07:52 - logic script won't be starting at zero
07:54 - so let's increase this by one to be our
07:57 - readable level okay so these are the
08:00 - basics that we need now we need to call
08:02 - these functions with the correct values
08:05 - so let's first do a simple test in here
08:08 - we set the experience bar let's put it
08:10 - at 0.5 so at half the bar and set the
08:13 - imago number let's put on level number 7
08:15 - some level number 7 again this is the
08:18 - logic which starts at 0 so we should be
08:20 - able to see um level 8 at 50% experience
08:23 - let's see
08:25 - and yep here's our UI working currently
08:27 - says level 8 and the bar is at half okay
08:30 - so now that this code is working we need
08:32 - to call these functions with the correct
08:34 - values so for that we need a reference
08:36 - to a level system object so go in here
08:39 - store a reference for the malevolent
08:42 - system now let's make a function to
08:45 - receive the object so in here we make a
08:48 - public void set level system and we're
08:51 - going to receive a level system object
08:55 - then when we receive the level system we
08:59 - call set level number and we pass in the
09:02 - in level system dot get level number
09:04 - okay and then we also need to call these
09:07 - set experience bar size and we need to
09:09 - grab the own level system dot and it's
09:13 - in here that we need to add another
09:14 - function to do the get experience
09:16 - normalized
09:19 - so let's make that function on the
09:20 - unlevel system so here in the unlevel
09:23 - system let's go down here make a new
09:24 - function a public float get the
09:27 - experience normalized and now to get
09:29 - expert storm wise it's extremely simple
09:30 - we just return the experience divided by
09:33 - the experience to the next level and
09:35 - again since these two are int we need to
09:38 - make sure to convert one of these to a
09:39 - float otherwise we won't get an
09:41 - incorrect value
09:42 - so with this function done back in our
09:44 - own level window everything is done we
09:45 - set the level number and the experience
09:47 - bar size now all that's left is to call
09:49 - this function in order to pass in our
09:51 - level system object let's get rid of
09:53 - this testing code and now let's see
09:55 - where we were creating our level system
09:57 - which is here on the testing class so up
10:01 - here we can simply add a serialized
10:02 - field for our private level window of a
10:07 - window so since this is a serialize
10:11 - field we can go into the editor and here
10:14 - on the testing game object there's the
10:16 - 11:00 window and we simply drag the
10:17 - reference onto it okay
10:19 - and now back in here we created we do
10:21 - our nice little testing and then we come
10:23 - to another window and we set the level
10:25 - system and we pass in this level system
10:27 - okay so that's pretty much it and it
10:29 - should be correctly displaying the
10:31 - result of the unlevel system after this
10:33 - testing code so it should say on level
10:35 - number two and be at ten percent of the
10:37 - bar film let's see and yep there it is
10:40 - level two and the bar is 10 percent film
10:42 - okay great
10:43 - so the window is now correctly
10:44 - displaying the state of our level system
10:46 - now we don't want this to only update on
10:49 - start we want to update every time
10:51 - something changes so let's see how we're
10:54 - going to do that here on the on level
10:56 - system the way that we can notify that
10:58 - something has changed is by using events
11:01 - so let's go up here and first of all
11:03 - using a system and in here we make a
11:07 - public event event handler this will be
11:10 - the own experience change and also
11:14 - another event for the on level change so
11:18 - we have one event for when the
11:20 - experience changes and one when don't
11:22 - level changes now let's see to trigger
11:24 - this here we are on the add experience
11:26 - so when we add experience we check if we
11:29 - have
11:30 - subscribers to this event if so we call
11:32 - it passing this and event are empty and
11:38 - in here if we get a new level we come on
11:41 - let's on changed ok so that's it for
11:45 - triggering our event as you can see it's
11:48 - extremely simple and now we can go back
11:50 - into the window code and here when we
11:52 - set the level system we subscribe to
11:54 - those events so we go to the eleven
11:56 - system dot on experience changed let's
11:59 - subscribe to that event now when the
12:02 - experience changes and let's update our
12:04 - experience bar just like that and when
12:07 - the eleven system dot on level changed
12:10 - we trigger the seven level number okay
12:20 - so this you don't pretty much be working
12:21 - we have our function we will receive the
12:24 - eleven system we update our starting
12:26 - values and then we subscribe for when
12:27 - avenges so on the level system whenever
12:30 - we add experience we trigger the on
12:32 - experience change and if the level
12:34 - changes we trigger that event and back
12:37 - on the window we listen to those events
12:38 - and when they happen we update our bar
12:41 - in our text so to test all of this
12:43 - working now we can finally add the code
12:45 - for our testing buttons so let's go up
12:47 - here and grab the reference to them and
12:56 - that's pretty much it this button UI
12:59 - class again is part of the utilities and
13:01 - it just makes it very simple to create a
13:03 - button so when I click on the button
13:04 - this delegate is triggered which won't
13:06 - execute this code so when I click on the
13:09 - five button it won't fire the experience
13:10 - on the 51 at 50 and so on okay so
13:13 - everything is correct for us to test
13:15 - let's just go into our testing class and
13:17 - here no longer do this so we just in sin
13:19 - she ate a neon level system and we set
13:21 - it on the window so it should start off
13:24 - at level one with experience completely
13:26 - at zero let's see and yet there is level
13:29 - one with zero experience okay now with
13:32 - our testing buttons if I press on this
13:33 - one if there you go the experience bar
13:36 - indeed updated as he got some XP and as
13:38 - I had
13:39 - I'm gaining five experience someone
13:42 - let's keep adding and see if it reaches
13:44 - the end and yep there you go now we are
13:47 - at level two and we can go up and it
13:50 - fills up and goes back down and we can
13:52 - also add a massive amount so let's add
13:53 - 50 and the level should increase and the
13:56 - bar should be around there so let them
13:58 - ne up there you go exactly correct as
14:00 - intended okay so we have the basics of
14:03 - our level system working as well as the
14:05 - window to display the current state now
14:08 - let's just quickly apply this to a
14:09 - player character so over here I have a
14:12 - simple player character let's pause and
14:15 - look at the player game object so here
14:18 - as you can see there is a player script
14:19 - and the player based script the base
14:21 - script contains the code for the
14:22 - animation system so we don't need to
14:24 - worry about it now let's look at the
14:26 - player script so here we are and again
14:28 - don't worry too much about the code that
14:30 - is already in here all we want is to be
14:32 - able to apply our 11 system onto this
14:34 - pre-made character so here we're going
14:37 - to do very much the same thing that we
14:38 - did for the window so first of all we
14:40 - need a function to receive our level
14:42 - system so let's make here a public void
14:46 - set level system we're going to receive
14:50 - in a level system level system okay we
14:57 - have this function now let's go on to
14:58 - our testing code and here make another
15:01 - Asuna last field this time it's going to
15:04 - be a reference for our player so now
15:07 - let's go into the editor and here on our
15:09 - testing game object let's try the
15:11 - reference to our player okay so back in
15:14 - the testing code we can now go into big
15:16 - player and we set the own level system
15:18 - and we pass in the same organ system
15:20 - okay so now both the level window and
15:23 - the player are receiving a reference to
15:24 - the exact same level system and now we
15:26 - can go back into the player code and now
15:29 - in here we're going to do very much the
15:31 - same thing we did on the unlevel window
15:32 - so we go into the level system and we
15:35 - subscribe except on the player the only
15:38 - thing we care about is when level
15:39 - changes we don't really care when the
15:41 - experience changes so we just subscribe
15:43 - to the on level changed event so when
15:46 - the level system changes the level let's
15:48 - play a nice animation in
15:50 - Effects so in here play the victory
15:52 - animation let's also spawn a particle
15:55 - effect and let's also make him flash
15:59 - okay so everything should be working the
16:02 - player is listening to the unlevel
16:04 - changed event when that event is fired
16:06 - by the in level system we captured that
16:09 - event we come in here and then we play
16:11 - the animation spawn the particle effect
16:13 - and make the character flash the
16:15 - implementation of these functions
16:16 - doesn't really matter all that matters
16:17 - is that we can see how we can easily do
16:19 - things when the level changes so in here
16:21 - for example this one is just playing a
16:23 - vector animation this one is just in
16:25 - Senshi ating a effect and the flash just
16:28 - changes the ten color on the sprite so
16:31 - as you can see extremely simple to apply
16:32 - a level system and do something with it
16:35 - so let's test okay here we are
16:38 - there's the player just sitting around
16:40 - currently at level one now let's add
16:42 - some experience and when I reach the end
16:45 - yep there you go as you can see he
16:48 - captured the event when the level system
16:50 - changed level any play the animation the
16:52 - particle system and everything and the
16:54 - window again still updates so let's add
16:56 - some more and yep there we go every time
16:58 - he goes he plays the animation the
17:00 - particles and everything ok so we have
17:03 - the alarm system working along with the
17:04 - window and the player now here on the
17:07 - player object I also have a very simple
17:09 - health bar so this is just to
17:11 - demonstrate how we can change stats on
17:13 - the level up so here I have a function
17:15 - which simply sets the size of the health
17:17 - bar so here on level changes we can
17:20 - simply do a set health bar size and then
17:23 - we get the size based on the level
17:24 - system level so we go to the level
17:26 - system we get the current level number
17:28 - and then let's say we add the bar by 10%
17:32 - for every level so our health bar size
17:36 - if don't level is Colonel level zero
17:38 - then don't just return one
17:39 - so the standard health bar size if we
17:42 - get up to five then this won't be 0.5 F
17:45 - so we don't have 1.5 and if it gets 1/10
17:48 - won't be two and so on so again just
17:50 - very simple code to see how you can
17:51 - change things change some various stats
17:53 - on your player based on the unlevel
17:55 - number so let's see if the health bar
17:57 - doesn't need increase okay here we are
17:59 - let's go
18:00 - and let's see the health bar sighs when
18:03 - gets up if they're gonna increase a tiny
18:06 - bit now increase a bit more and a bit
18:08 - more and a bit more and a bit more and
18:09 - yep there it is all right so as you can
18:11 - see it's very simple to take this and
18:14 - apply some actual stats onto the player
18:16 - okay so everything is with me awesome
18:18 - however we have one small issue which is
18:21 - the way that we set up our code we can
18:23 - only go up one level at a time so in
18:25 - here if I go from that and go up yup he
18:28 - goes to level two perfectly fine and if
18:30 - I click on 500 he should go up five
18:32 - levels but let's see what happens and if
18:35 - there it is he did not go up five levels
18:37 - he just went up one level and the bar is
18:39 - double only film so let's see why that
18:41 - happens why we can only go up one level
18:43 - at a time here we are on the on level
18:45 - system and here is the code for the add
18:47 - experience and the error is right here
18:50 - so we add our amount of experience
18:52 - whatever that is and then we simply do
18:54 - an if that experience is bigger than the
18:56 - one if so we increase the level and we
18:58 - reduce the experience by the one to the
19:00 - next level however after decreasing it
19:03 - there's a chance that this experience
19:04 - might still be above the necessary to
19:06 - the next level
19:07 - so that means we need to keep running
19:09 - this code until this is normal true so
19:11 - inside of this pinyon if let's switch it
19:12 - into 81 so while the experience is more
19:16 - than the one needed to reach the next
19:17 - level we're going to keep increasing so
19:19 - let's see here we are back at level 1
19:22 - and now if I had 500 let's see if we go
19:24 - up five levels and if there you go
19:26 - indeed one two from level one to level
19:28 - six and the bar is completely empty
19:30 - and everything still works for going up
19:32 - just one level okay great so that
19:36 - problem is sorted but now we have
19:38 - another potential issue the issue is the
19:40 - fact that oh this is happening instantly
19:42 - so if I just press the enlarge XP button
19:44 - and just like that everything instantly
19:47 - went up into level we didn't see the bar
19:48 - fill up with in see the numbers change
19:50 - so this wouldn't look a lot better if we
19:53 - could actually see the progression
19:54 - instead of everything just changing
19:55 - instantly so now the question becomes
19:57 - how can we actually do that now we could
20:00 - add some animation logic directly into
20:03 - our level system so in here instead of
20:05 - adding immediately we would add slowly
20:07 - over time however doing it that way
20:09 - would be screwing up with a logic of
20:11 - this class this class is meant to home
20:13 - the current state so when I add some
20:15 - experience I do want it to be added
20:17 - instantly so the approach of hard-coding
20:19 - the animations straight onto the unlevel
20:22 - system isn't exactly the best approach
20:24 - next we could do the animation on the
20:26 - eleven window that would be better
20:28 - however it would only work on this
20:30 - eleven window meaning if we also wanted
20:33 - to animate the effect on the employer we
20:35 - would need to copy pasted that code so
20:37 - in this case our best approach is to
20:39 - have a separate class dedicated just to
20:42 - that animation so essentially we're
20:44 - going to create a wrapper for our level
20:45 - system that way the in level system
20:47 - won't still work instantly as intended
20:49 - but this points will interact with the
20:51 - animated commands instead of directly
20:52 - with our local system okay so if that
20:55 - sounds confusing don't worry let's go
20:56 - through it step-by-step so first back in
20:59 - the editor and let's create our script
21:00 - so a new c-sharp script this will be our
21:03 - level system animated now here first
21:07 - let's make this a simple class so no
21:09 - mana behavior okay now the first thing
21:12 - we're going to need is a reference to
21:14 - our eleven system so just like we did we
21:20 - can make this class easy to use by
21:21 - adding the eleven system on the
21:22 - constructor so we make a public level
21:24 - system animated and here we're going to
21:27 - receive the unlevel system and we just
21:30 - have that directly okay now when we set
21:34 - it let's subscribe to the experience
21:35 - changed event and also to the level
21:40 - system dot on level change now when
21:43 - either of these happen we're going to
21:45 - enable a animation so in here let's
21:48 - define a boolean for whether our
21:49 - animation is active or not so a private
21:52 - ball is animating in order to run our
21:55 - animation let's create the update
21:57 - function and we're making this class
22:00 - nice and simple without the motor
22:02 - behavior so we need to trigger this
22:03 - function somehow but let's leave that
22:05 - for later so in the update the first
22:07 - thing we do is check if is animating if
22:11 - so we do something if we are not
22:12 - animating then we do nothing that way we
22:15 - don't waste performance by running the
22:16 - code when there's nothing to animate so
22:18 - if we are animating then we start
22:20 - animating towards the values in the
22:21 - unlevel system so that means we need to
22:24 - keep pretty much the same values as for
22:26 - eleven systems so let's go into the
22:27 - eleven system and here let's copy these
22:30 - vowels don't let them the experience and
22:31 - the experience of the next eleven so in
22:34 - reset the level system let's update
22:35 - these values so the level is pretty
22:37 - simple we already have the level system
22:39 - that get a little number then we need a
22:42 - function to return the experience the
22:44 - next level and also our experience and
22:46 - let's make those so a public int to get
22:49 - experience and we're also going to have
22:53 - a public and get experience to next
22:56 - level okay we have this let's go back in
23:01 - here and set those now we can go to our
23:06 - update function and animates our crude
23:09 - valleys towards the ones that are on the
23:11 - unlevel system so first we test if the
23:14 - current level is under the level system
23:17 - gate level and that means we need to go
23:23 - up one level in order to match the level
23:25 - on the level system so that means we
23:27 - need to add the experience so let's make
23:30 - a private void add experience now in
23:34 - here we're going to add experience very
23:35 - much like on a local system except we're
23:37 - only going to add one by one so here we
23:40 - increase the experience then we check if
23:43 - the experience is bigger than needed to
23:46 - reach the next level if so we simply
23:48 - increase the in level and now in here if
23:53 - the current level is lower than the
23:55 - target level then we add our experience
23:57 - so essentially for every update we're
24:00 - only going to add one experience then we
24:03 - have an else so the local level equals
24:07 - the target level if we are at the same
24:13 - as a target level then we need to test
24:14 - if we are under the target experience so
24:17 - if the current local experience is under
24:21 - the eleven system dot get experience if
24:25 - it is under then we keep adding and
24:28 - essentially when we have the exact same
24:30 - level system and the exact same
24:32 - experience and then we stop animating so
24:35 - we do an else
24:36 - and is animating default so as you can
24:41 - see we still have our level system which
24:44 - has a function to add a certain amount
24:46 - of experience and adds it instantly and
24:47 - then we have our special animated class
24:50 - which takes our target level and target
24:52 - experience and animates our valleys
24:54 - towards them now we need this set is
24:57 - animating to true so we're going to do
24:59 - that when the experience or the unlevel
25:00 - changes okay
25:05 - and now in order to be able to test
25:07 - let's go here into our constructor we
25:09 - need to find a way to trigger our update
25:11 - function and for that I have a very
25:13 - useful class on the code Mach utilities
25:15 - and that is the function updater this
25:20 - does exactly what we need right now
25:22 - which is it triggers an action on every
25:25 - single update so we pass in the update
25:27 - function so just like that we have our
25:31 - update being count on every update the
25:34 - benefit of doing this way without
25:36 - implementing one behavior is we don't
25:37 - need to attach this to any game object
25:39 - we just run this code and everything
25:41 - won't work so that's pretty much it for
25:44 - our animated class now to test if it's
25:46 - working let's do some logs to say the
25:48 - current XP and level so let's go down
25:51 - here on our update and let's do a debug
25:54 - log and we're going to print the current
25:57 - level and then the current experience
26:00 - and now we go into our testing class and
26:03 - here we are creating a novel system
26:05 - passing it to the 11 window and to the
26:07 - player and then let's also create an 11
26:10 - system and Maydan we're going to create
26:15 - it and pass in our model system ok that
26:19 - should do it
26:20 - and just one small thing we forgot to
26:22 - add it's in here when we add our
26:23 - experience we increase the level and
26:25 - then we need to reset our experience
26:26 - otherwise that one won't always be
26:28 - increasing so in this case since we're
26:30 - adding one by one we can simply set it
26:32 - to zero okay so let's test ok so here we
26:36 - are and here's the console as you can
26:38 - see it's constantly displaying our
26:39 - messages currently at level zero
26:41 - experience zero
26:42 - there's the player in the window now I
26:44 - add 50 and let's see that number
26:46 - increased slowly add 50 and there you
26:49 - can see it increased slowly did not go
26:51 - instantly into 50 now if I had 500 and
26:54 - there you go increasing level in another
26:56 - level another level and another and
26:58 - there you reach 50 okay so our animating
27:01 - logic is working great now that we have
27:03 - this working let's apply the animated
27:05 - logic to our window so when you press
27:08 - this we can actually see the bars
27:09 - increase here on the 11:00 window the
27:12 - way we're going to do that is actually
27:13 - quite simple all we're going to do is
27:15 - replace our references to the level
27:17 - system with the in level system animated
27:19 - so let's make a private level system and
27:22 - Maidan and now the buttons are the only
27:29 - thing that won't still be interacting
27:30 - with the default level system everything
27:34 - else let's see all of these references
27:35 - here we're not going to receive an 11
27:38 - system but rather level system animated
27:40 - passing and Maidan
27:50 - okay so we have replaced all the
27:53 - references from the 11 system into the
27:55 - animated now we have all these errors so
27:57 - we need to implement these functions and
27:59 - these events the same way we did on the
28:01 - unlevel system so let's do that we can
28:04 - for the most part copy most of this
28:18 - and that's pretty much it so this class
28:20 - has pretty much the exact same
28:22 - functionality as the unlevel system we
28:24 - have the same events which are triggered
28:26 - in the same way and the same functions
28:28 - which return these local values instead
28:30 - of the ones directly from the on level
28:32 - system so here in the level window as
28:34 - you can see everything should be working
28:35 - exactly as intended now we just need to
28:38 - go into our testing code and here we
28:41 - don't set it with the basic level system
28:43 - however we still need to pass in the
28:45 - level system so the buttons work so
28:46 - let's make two functions first we pass
28:49 - in the 11 system and then the 11 system
28:51 - and made it so let's make the set level
28:57 - system function here on the 11 window we
29:01 - do a set level system and just like that
29:08 - ok so now this class has the own level
29:11 - system so we can still modify the
29:12 - buttons and then we have the 11 system
29:14 - and made it in order to display our
29:16 - visuals ok so let's test ok here we are
29:20 - the scene is still running exactly as
29:23 - previously and there are no errors and
29:25 - now when I press the 50 and let's see if
29:27 - the bar increases slowly instead of
29:28 - instantly appearing on the 50 and I
29:30 - click any of there you go it increased
29:32 - slowly click again anyone comes up goes
29:34 - to level 2 and as you can see this one
29:36 - is still interacting with the original
29:38 - level system so as soon as I press that
29:41 - one goes up slowly and that one is
29:42 - instant and yep there it is ok so
29:46 - everything is working great however one
29:49 - potential issue we have with our
29:50 - animations is that when we click here
29:52 - there you go the animation goes at that
29:54 - particular speed right now that speed is
29:57 - tied to the update which means that in
29:59 - our stats depending on how fast our game
30:02 - is running the animation will be slower
30:03 - or faster obviously we don't want that
30:06 - to happen otherwise if the game were
30:08 - running at 10 frames per second and this
30:10 - animation would be extremely slow so
30:13 - let's make the animation code frame rate
30:15 - independent for them let's go here into
30:17 - our level system animator class and
30:20 - let's define a timer variable so here a
30:23 - private float for the update timer then
30:27 - we also need a maximum for
30:28 - a private boat updates timer max now on
30:33 - the constructor what's going here set
30:36 - the update timer max 2.0 60 mm so
30:39 - essentially this one updates 60 times
30:41 - per second and now on the update if we
30:45 - are animating let's increase the update
30:47 - timer by time.deltatime and then we're
30:53 - only going to run this code if the
30:54 - update timer is bigger then the update
30:57 - timer max if it is then first thing we
31:02 - do is reset the update timer so they
31:04 - timer - equals t max and then we run our
31:07 - update code and now let's just copy this
31:14 - code into a separate function to make
31:16 - this easier to read so a prime Droid and
31:22 - in here we just call this function so
31:25 - just like that our code should be
31:27 - updating 60 times per second now the
31:30 - only thing missing here should be a
31:31 - while instead of an if just in case the
31:34 - game is running very slowly and it will
31:35 - require more than one update per frame
31:37 - so and here we do eight well
31:39 - okay so let's test so here we are let's
31:42 - add 500 XP and yep there we go it is
31:45 - increasing just like that okay now just
31:48 - to make sure this is all working
31:49 - correctly let's artificially slow down
31:51 - the frame rate so for now we simply go
31:54 - up here and set the application that
31:56 - target framerate let's test the game out
31:58 - at 10 frames per second so here we are
32:01 - as you can see the player is very janky
32:03 - running at 10 frames per second and on
32:05 - the stats it is at 10 frames and I had
32:07 - 500 and there here it is increasing at
32:10 - roughly the same speed so our animation
32:12 - is now successfully frame rate
32:14 - independent ok so now let's apply this
32:16 - same code to our player so here on the
32:19 - panel let's do the same things that are
32:21 - receiving a little system we interact
32:23 - with a level system animated
32:28 - and we have the same event so everything
32:31 - should work exactly as intended and just
32:33 - on the testing we pass in the level
32:35 - system animator okay that should do it
32:40 - let's see okay here we are now if I had
32:42 - 15 that one goes up okay and the player
32:45 - doesn't move since he only activates on
32:47 - the 11 lip and now if I had 500 and if
32:50 - there you go on level 2 and now level 3
32:52 - and level 4 and so on and as you can see
32:54 - the bar increases and he increases it as
32:56 - well okay so we have our level system
32:59 - and the alarm system animated so the
33:02 - logic works great and it also looks
33:04 - great now let's add a couple more
33:06 - features to the underlying level system
33:08 - first let's make the amount of
33:10 - experience very per level until right
33:13 - now we always have the same a hundred XP
33:15 - per level now in most games the
33:17 - experience to the next level always
33:18 - increases so let's modify to have that
33:21 - let's start off by making a function to
33:24 - get the maximum amount for a certain
33:26 - level so we can pretty much use this
33:28 - same one the get experience the next
33:30 - level except in here we're going to
33:32 - receive the level so if we call this get
33:34 - experience the next level and we've
33:35 - passed in a zero then we want to know
33:37 - the amount of experience necessary to go
33:39 - from zero to one if we pass in 20 then
33:42 - it's going to be the experience from 20
33:44 - 21 and so on so in order to calculate
33:46 - that we have two options one if we want
33:50 - the game to have infinite levels we
33:52 - could do a certain calculation so in
33:54 - here for example we would simply return
33:56 - the level multiplied by 10 so
33:59 - essentially on level one it would take
34:01 - ten experience to the level two then
34:03 - from two to three to take 20 and so on
34:05 - and so on so this is great if we want
34:08 - automatic infinite levels however let's
34:11 - say we want a fixed number of levels if
34:13 - it is fixed that means we can define a
34:15 - certain level XP manual so for that and
34:18 - let's go all the way up here and we're
34:20 - going to define an array which won't
34:22 - contain the XP need this per level so
34:25 - let's make a private static read-only
34:28 - this won't be an int array and it will
34:31 - be the experience per level
34:37 - we're defining it as static read-only
34:39 - need to make sure that we can accentuate
34:41 - the array in here and never touch it
34:43 - again so now here all we need to do is
34:45 - input certain amounts so when index 0
34:48 - we're going to have the experience
34:49 - needed to go from level zero to level 1
34:51 - so let's put it at a hundred just like
34:53 - we were doing and then let's fill these
34:55 - up to all our levels ok so here I have
35:03 - film ten levels total so now let's go
35:06 - down here into our function to get the
35:07 - experience and here instead of
35:09 - calculating all we need to do is return
35:11 - the value in that array for that level
35:13 - indexed so we simply return the
35:15 - experience from level on index level now
35:20 - let's make our code safe from errors by
35:22 - first checking the array size so if the
35:25 - level is under the experience for
35:27 - eleventh length so in other words if it
35:30 - is a valid value then we simply return
35:31 - that one and if not then let's just
35:35 - return a random zone so don't let's say
35:37 - just a hundred however the code should
35:38 - never get to here you can also make a
35:44 - debug log error to make sure we get
35:46 - notified if we do get here ok so that's
35:53 - it now let's make a function to return
35:55 - if this is the max level so we make a
35:58 - public ball is max level and we simply
36:02 - return if this level equals the
36:08 - experience from level dot length minus
36:12 - one and now on the add experience first
36:16 - we test if we are already on the max
36:18 - level and we're only going to run this
36:21 - if we are not on the max level and down
36:25 - here we can also make a secondary
36:26 - function call that also has that public
36:29 - ball is max level with no parameters and
36:33 - we simply return D is max level and
36:35 - passing the current level okay so if we
36:41 - are not max level then we keep adding
36:43 - experience and here we're no longer
36:45 - going to have this variable so we can
36:47 - remove it
36:47 - and look at the errors and instead of
36:50 - that we get the experience to next level
36:52 - of the current level here we reduce it
36:59 - by that amount before we increase the
37:01 - level and here we're going to same thing
37:05 - okay we have no errors good and on the
37:08 - experiencer moines if we are on the max
37:10 - level
37:11 - let's return one so we have a foam bar
37:14 - on the max level and if not then we
37:16 - calculated and here we only run this
37:19 - code if the experience is enough and we
37:21 - are not in max level okay so the logic
37:27 - should be working correctly for a total
37:29 - number of levels if we want to add the
37:31 - number we just add more into this array
37:32 - so this is the experience from level 0
37:35 - to level 1 and this one is gonna be the
37:36 - experience from level 9th 1110 now let's
37:39 - go into the animated class and in here
37:42 - as you can see we have an error again
37:44 - that is because we no longer have just
37:45 - one experience of the next level
37:47 - so let's do the same thing at rid of
37:49 - this variable down here on the errors
37:52 - we're going to do the same thing we go
37:54 - to the level system and we ask get the
37:56 - experience to the next level and we pass
37:58 - in this local level here also if one
38:03 - system that is max level as in the
38:05 - current level if so we return 1f if not
38:09 - we calculated okay so that should do it
38:13 - now let's test and see if the first
38:16 - level is the easiest one to move up and
38:18 - if the maximum is at 10 okay so here we
38:21 - are and we are currently on level 1
38:23 - which as you remember has a total of 100
38:26 - so if I add 50 it should be half the bar
38:28 - so let's go and if there we go it goes
38:30 - straight to half a bar okay now at 50
38:33 - again should go up to level 2 okay
38:35 - exactly now if I add 50 level 2 has a
38:38 - bit more than 100 so 50 should be
38:39 - slightly less than half the bar let's
38:41 - add and yep there you go that is
38:43 - slightly less that again and it's not
38:45 - enough to reach the end so we correctly
38:48 - have more experience needed to go from
38:50 - level 2 to 3 then we do from 1 to 2 now
38:53 - let's add 500 see where that takes us
38:55 - and there you go it's increasing and
38:58 - still increasing we are
38:59 - four and level five and about in there
39:03 - on level six yep exactly
39:05 - now let's keep adding some more here we
39:09 - are at level nine let's see what happens
39:10 - when we reach the end and if there it is
39:14 - we are at level ten and it is no longer
39:16 - increasing so we have successfully
39:18 - reached our maximum now let's add our
39:21 - final feature so we're going to walk
39:23 - into how we could add a level
39:25 - requirement to a certain item here in
39:28 - the project files I have some sprites
39:29 - for various helmets and no helmet so
39:32 - let's create some buttons with these
39:34 - icons so let's go back into the canvas
39:37 - here make an empty game object this will
39:39 - be the equipment window and here I'm
39:42 - going to make some simple buttons
40:02 - okay so here are the three simple
40:04 - buttons this one is to remove the helmet
40:06 - this one adds this helmet and this one
40:08 - this one so let's make a script to
40:10 - control this window so we need to see
40:12 - sharp script this won't be our a quick
40:14 - window and we dragged the script on to
40:17 - the game object now here let's make a
40:21 - private void away to grab the reference
40:26 - to the buttons and on the click function
40:36 - we want to change the player equipment
40:38 - now on the planner class
40:40 - I already have a function to set the
40:42 - equipment here it is so let's call that
40:45 - function and for that we need a
40:46 - reference so again a serie light steel
40:49 - for the private player player let's drag
40:55 - the player reference okay so on this one
40:57 - we call the player dot set equip let's
41:01 - put it to using none and the others so
41:08 - that's it for the quick window now here
41:10 - on the equip function this function is
41:13 - simply just modifying the player sprite
41:15 - if you want to learn how to modify
41:17 - sprites you can check out the link in
41:19 - the description for the video covering
41:20 - how to make module or sprite chains in
41:22 - here on we're testing is how we can set
41:24 - an Eden level to equipment item so we
41:27 - can place the limiting code either in
41:29 - here on in the equip window let's try
41:32 - doing it on the window so for that we
41:35 - need the reference to the unlevel system
41:42 - and you need to pass it on the testing
41:45 - so in here same thing
41:51 - on testing we'd write the reference okay
41:54 - and on the equip window before we
41:56 - actually set it to equip for equipping
41:58 - nothing we don't have any analytical
42:00 - requirements okay but for these two we
42:02 - do so in here we're going to ask if the
42:08 - in level system that get a level number
42:12 - let's say this one is only if above
42:14 - level four so if above level four then
42:17 - we equip that and for this one so this
42:26 - one is above 104 which is actually the
42:28 - visual in level five and this one
42:30 - essentially at level 10 and on this one
42:32 - we can equip at any time so let's try to
42:34 - equip so here we are at level one if I
42:37 - try to equip these nope it doesn't work
42:40 - so let's level up since we need to go up
42:43 - to level five to equip this one so
42:44 - increase by a bit okay here we are at
42:47 - one five now if I click on this one if
42:49 - there you go now I can indeed equip this
42:51 - one and I can equip this one since this
42:53 - doesn't have a level requirement however
42:55 - this one still doesn't work we need to
42:56 - go up to level 10 in order to that one
42:58 - here we are at level 10 and now let's
43:01 - see if I can equip this one and if there
43:03 - you go I can equip the last helmet so I
43:05 - can now equip any of them since I have
43:08 - total max level all right awesome so as
43:11 - you can see it is very simple to have
43:13 - level gating okay now let's make this
43:16 - look home by adding an element we
43:17 - created previously so here I have the
43:20 - total warning and the tooltip item stats
43:22 - these were created in a previous series
43:24 - so check the links in the description so
43:26 - here if we cannot equip might show a
43:29 - warning so use the tongue tip warning
43:39 - so we have warning if we cannot
43:41 - currently equip and let's also add the
43:44 - tongue tip I have stats okay so that
44:00 - should do it
44:01 - we are adding the item stats window and
44:03 - also the warning so let's see this in
44:05 - game okay here we are and if I pass the
44:08 - mouse over if there you go no helmet
44:10 - level one and this is the basic helmet
44:12 - at level five and this one at level ten
44:14 - and if I try to equip this one if there
44:17 - you go there's a warning saying level
44:18 - required ten and this one I also can't
44:21 - because I need level five so now I can
44:23 - live them up and now at level five yep I
44:28 - can indeed equip this helmet and an
44:31 - equipment and this one I still can't
44:33 - again check out the photon tip series to
44:35 - see how these two elements were created
44:37 - so here we have our very nice game scene
44:40 - we have the UI in here showing our
44:42 - current level and the current XP amount
44:44 - we have these buttons to add our
44:46 - experience the experienc bar is nicely
44:49 - animated even when we go past multiple
44:51 - levels at once
44:52 - there is the player also connected to
44:54 - the same level system so when this one
44:56 - increases it goes past level he plays
44:58 - the animation changes the health bar and
45:00 - plays a nice particle effect and finally
45:03 - we have some buttons which are gated
45:05 - based on the levels and the my was to
45:08 - modify our player as always you can
45:11 - download the project files in utilities
45:12 - from in Tacoma com if you liked the
45:14 - video subscribe to the channel for more
45:16 - unity tutorials post any questions you
45:18 - have in the comments and I'll do my best
45:20 - to answer them alright see you next time
45:23 - [Music]

Cleaned transcript:

in this video we're going to create the unlevel system that we can apply to any character the underlying system will be very simple and very easy to use with some nice flashy visuals alright let's begin hello and welcome I'm your code monkey and this channel is all about helping you will learn how to make your own games with indepth tutorials made by a professional indie game developer so if you find the video helpful consider subscribing so here's what we want to create we're going to make the underlying level system as well as a UI to represent it the player character here is also using the same level system we have levels that require certain amounts of experience we can use these buttons to gain some experience so when I click you can see the experience bar go up over time if we get enough experience there you go we got a level up so it shows in here at level and we play some nice effects and animation and then we have these buttons in here to equip items on the player however they need a certain level to be equipped if we add a lot of experience at once you can see that the bar is correctly animated and goes up over time so first we're going to create a simple level system class with a simple function to add the experience which will calculate the 11 once that is working we will create a simple UI and integrate the local system class onto it so we're going to be able to visually see what is happening inside the level system and add some buttons to add our experience then we're going to apply that same logic to our player character so we're going to make him listen to the level system and trigger an animation and particle effect on level up next we're going to make a separate class which will help us animate our bar without modifying the underlying system then we're going to work on adding a max level and a different amount of XP per level and finally we're going to create some buttons for various helmets and add the code to make them only equippable after a certain level alright that's our goal let's get to it here we are in an empty scene let's start off by making a very simple level class to handle our logic so we go in here we make a new csharp script this will be our level system now here in our code let's first get rid of monobehaviour since we want this to be a very simple class now to store our current level let's define an inn so prevalent for the unlevel then we also need the experience the player currently has so a private in for the current experience and then we need to know the experience needed to reach the next level so also a private n't for the experience to next level ok so this is the basic information we need for a functional level system so let's make a constructor so a public one system here we set the in level to zero the experience also to zero and let's put the experience the max level at a hundred so we need to gain 100 experience in order to go up on level so let's make a function to add experience so a public body at experience and we're going to receive a parameter for the amount in here we increase the experience by the amount and then we check if the experience goes past the amount needed so if the current experience is bigger or equal to the experience to the next level so here we increase our level and we need to reset our experience so we reduce the experience by the amount needed to reach this level so like that ok so this is the basic logic for our level class so we have a level we have the current experience and the experience needed to reach the next level we have our constructor and a function to add experience so let's set up a very quick test like in the editor let's make a new csharp script this won't be our testing let's make a game object to keep our testing and drag the script on to it okay now here let's test our class let's make a private void awake and in here we're going to create a new 11 system and then let's just do a debug log to print the current level so let's go into our class in order to make that function so we make a public in get level number and in here we just returned the current level okay so we can now go back into our testing we do a log of the 11 system get level number then let's add some experience so local system had experience let's add a small amount so not enough to reach the next level so add 50 then we print one level again and then we add 60 and finally we print again okay so here we have a nice simple test to let us know if our logic is all correctly working so essentially up here after we construct our level system we should be able to see a zero then we add 50 experience which is not enough to reach the next level so in here it should say still zero and finally we add 60 which should get us up one level and this final log should say one so let's see and see the console and here is the console and it does say zero zero one okay great so we have our basic logic fully working now obviously just like this and what's very boring so let's handle some visuals so here go into the canvas let's make a empty game object this will be our little window now in here I'm going to construct a simple UI okay so here is the simple UI it shows the current level then I have a bar in here for the current experience this bar is very simple I just have this game object in here with an image and the image I can set the fill amount you can check out the various videos I have on the channel where I make UI bars for more indepth tutorial and then I have these three buttons in here so that I can add various amounts of experience these buttons have the button UI component which is part of the code mockito notice that you can grab for free from in Tacoma com it's just a simple class so I can handle our button clicks okay so let's make the code to handle this you want so we make a new csharp script this will be our level window and let's drag it on to our level window game object now in here first let's make a private void awake to grab our references okay we have the references now let's make a function to set the size of the experience bar so in here make a prep void set experience bar signs we're going to receive a float for the experience normalize and here all we're going to do is go into the experience bar image and set the fill amount to the experience normalize and yep it's that simple now a function to set the level number and here when we do is go into the in level text to set the text to be level then a new line and then the level number however the level number in our logic script won't be starting at zero so let's increase this by one to be our readable level okay so these are the basics that we need now we need to call these functions with the correct values so let's first do a simple test in here we set the experience bar let's put it at 0.5 so at half the bar and set the imago number let's put on level number 7 some level number 7 again this is the logic which starts at 0 so we should be able to see um level 8 at 50% experience let's see and yep here's our UI working currently says level 8 and the bar is at half okay so now that this code is working we need to call these functions with the correct values so for that we need a reference to a level system object so go in here store a reference for the malevolent system now let's make a function to receive the object so in here we make a public void set level system and we're going to receive a level system object then when we receive the level system we call set level number and we pass in the in level system dot get level number okay and then we also need to call these set experience bar size and we need to grab the own level system dot and it's in here that we need to add another function to do the get experience normalized so let's make that function on the unlevel system so here in the unlevel system let's go down here make a new function a public float get the experience normalized and now to get expert storm wise it's extremely simple we just return the experience divided by the experience to the next level and again since these two are int we need to make sure to convert one of these to a float otherwise we won't get an incorrect value so with this function done back in our own level window everything is done we set the level number and the experience bar size now all that's left is to call this function in order to pass in our level system object let's get rid of this testing code and now let's see where we were creating our level system which is here on the testing class so up here we can simply add a serialized field for our private level window of a window so since this is a serialize field we can go into the editor and here on the testing game object there's the 1100 window and we simply drag the reference onto it okay and now back in here we created we do our nice little testing and then we come to another window and we set the level system and we pass in this level system okay so that's pretty much it and it should be correctly displaying the result of the unlevel system after this testing code so it should say on level number two and be at ten percent of the bar film let's see and yep there it is level two and the bar is 10 percent film okay great so the window is now correctly displaying the state of our level system now we don't want this to only update on start we want to update every time something changes so let's see how we're going to do that here on the on level system the way that we can notify that something has changed is by using events so let's go up here and first of all using a system and in here we make a public event event handler this will be the own experience change and also another event for the on level change so we have one event for when the experience changes and one when don't level changes now let's see to trigger this here we are on the add experience so when we add experience we check if we have subscribers to this event if so we call it passing this and event are empty and in here if we get a new level we come on let's on changed ok so that's it for triggering our event as you can see it's extremely simple and now we can go back into the window code and here when we set the level system we subscribe to those events so we go to the eleven system dot on experience changed let's subscribe to that event now when the experience changes and let's update our experience bar just like that and when the eleven system dot on level changed we trigger the seven level number okay so this you don't pretty much be working we have our function we will receive the eleven system we update our starting values and then we subscribe for when avenges so on the level system whenever we add experience we trigger the on experience change and if the level changes we trigger that event and back on the window we listen to those events and when they happen we update our bar in our text so to test all of this working now we can finally add the code for our testing buttons so let's go up here and grab the reference to them and that's pretty much it this button UI class again is part of the utilities and it just makes it very simple to create a button so when I click on the button this delegate is triggered which won't execute this code so when I click on the five button it won't fire the experience on the 51 at 50 and so on okay so everything is correct for us to test let's just go into our testing class and here no longer do this so we just in sin she ate a neon level system and we set it on the window so it should start off at level one with experience completely at zero let's see and yet there is level one with zero experience okay now with our testing buttons if I press on this one if there you go the experience bar indeed updated as he got some XP and as I had I'm gaining five experience someone let's keep adding and see if it reaches the end and yep there you go now we are at level two and we can go up and it fills up and goes back down and we can also add a massive amount so let's add 50 and the level should increase and the bar should be around there so let them ne up there you go exactly correct as intended okay so we have the basics of our level system working as well as the window to display the current state now let's just quickly apply this to a player character so over here I have a simple player character let's pause and look at the player game object so here as you can see there is a player script and the player based script the base script contains the code for the animation system so we don't need to worry about it now let's look at the player script so here we are and again don't worry too much about the code that is already in here all we want is to be able to apply our 11 system onto this premade character so here we're going to do very much the same thing that we did for the window so first of all we need a function to receive our level system so let's make here a public void set level system we're going to receive in a level system level system okay we have this function now let's go on to our testing code and here make another Asuna last field this time it's going to be a reference for our player so now let's go into the editor and here on our testing game object let's try the reference to our player okay so back in the testing code we can now go into big player and we set the own level system and we pass in the same organ system okay so now both the level window and the player are receiving a reference to the exact same level system and now we can go back into the player code and now in here we're going to do very much the same thing we did on the unlevel window so we go into the level system and we subscribe except on the player the only thing we care about is when level changes we don't really care when the experience changes so we just subscribe to the on level changed event so when the level system changes the level let's play a nice animation in Effects so in here play the victory animation let's also spawn a particle effect and let's also make him flash okay so everything should be working the player is listening to the unlevel changed event when that event is fired by the in level system we captured that event we come in here and then we play the animation spawn the particle effect and make the character flash the implementation of these functions doesn't really matter all that matters is that we can see how we can easily do things when the level changes so in here for example this one is just playing a vector animation this one is just in Senshi ating a effect and the flash just changes the ten color on the sprite so as you can see extremely simple to apply a level system and do something with it so let's test okay here we are there's the player just sitting around currently at level one now let's add some experience and when I reach the end yep there you go as you can see he captured the event when the level system changed level any play the animation the particle system and everything and the window again still updates so let's add some more and yep there we go every time he goes he plays the animation the particles and everything ok so we have the alarm system working along with the window and the player now here on the player object I also have a very simple health bar so this is just to demonstrate how we can change stats on the level up so here I have a function which simply sets the size of the health bar so here on level changes we can simply do a set health bar size and then we get the size based on the level system level so we go to the level system we get the current level number and then let's say we add the bar by 10% for every level so our health bar size if don't level is Colonel level zero then don't just return one so the standard health bar size if we get up to five then this won't be 0.5 F so we don't have 1.5 and if it gets 1/10 won't be two and so on so again just very simple code to see how you can change things change some various stats on your player based on the unlevel number so let's see if the health bar doesn't need increase okay here we are let's go and let's see the health bar sighs when gets up if they're gonna increase a tiny bit now increase a bit more and a bit more and a bit more and a bit more and yep there it is all right so as you can see it's very simple to take this and apply some actual stats onto the player okay so everything is with me awesome however we have one small issue which is the way that we set up our code we can only go up one level at a time so in here if I go from that and go up yup he goes to level two perfectly fine and if I click on 500 he should go up five levels but let's see what happens and if there it is he did not go up five levels he just went up one level and the bar is double only film so let's see why that happens why we can only go up one level at a time here we are on the on level system and here is the code for the add experience and the error is right here so we add our amount of experience whatever that is and then we simply do an if that experience is bigger than the one if so we increase the level and we reduce the experience by the one to the next level however after decreasing it there's a chance that this experience might still be above the necessary to the next level so that means we need to keep running this code until this is normal true so inside of this pinyon if let's switch it into 81 so while the experience is more than the one needed to reach the next level we're going to keep increasing so let's see here we are back at level 1 and now if I had 500 let's see if we go up five levels and if there you go indeed one two from level one to level six and the bar is completely empty and everything still works for going up just one level okay great so that problem is sorted but now we have another potential issue the issue is the fact that oh this is happening instantly so if I just press the enlarge XP button and just like that everything instantly went up into level we didn't see the bar fill up with in see the numbers change so this wouldn't look a lot better if we could actually see the progression instead of everything just changing instantly so now the question becomes how can we actually do that now we could add some animation logic directly into our level system so in here instead of adding immediately we would add slowly over time however doing it that way would be screwing up with a logic of this class this class is meant to home the current state so when I add some experience I do want it to be added instantly so the approach of hardcoding the animations straight onto the unlevel system isn't exactly the best approach next we could do the animation on the eleven window that would be better however it would only work on this eleven window meaning if we also wanted to animate the effect on the employer we would need to copy pasted that code so in this case our best approach is to have a separate class dedicated just to that animation so essentially we're going to create a wrapper for our level system that way the in level system won't still work instantly as intended but this points will interact with the animated commands instead of directly with our local system okay so if that sounds confusing don't worry let's go through it stepbystep so first back in the editor and let's create our script so a new csharp script this will be our level system animated now here first let's make this a simple class so no mana behavior okay now the first thing we're going to need is a reference to our eleven system so just like we did we can make this class easy to use by adding the eleven system on the constructor so we make a public level system animated and here we're going to receive the unlevel system and we just have that directly okay now when we set it let's subscribe to the experience changed event and also to the level system dot on level change now when either of these happen we're going to enable a animation so in here let's define a boolean for whether our animation is active or not so a private ball is animating in order to run our animation let's create the update function and we're making this class nice and simple without the motor behavior so we need to trigger this function somehow but let's leave that for later so in the update the first thing we do is check if is animating if so we do something if we are not animating then we do nothing that way we don't waste performance by running the code when there's nothing to animate so if we are animating then we start animating towards the values in the unlevel system so that means we need to keep pretty much the same values as for eleven systems so let's go into the eleven system and here let's copy these vowels don't let them the experience and the experience of the next eleven so in reset the level system let's update these values so the level is pretty simple we already have the level system that get a little number then we need a function to return the experience the next level and also our experience and let's make those so a public int to get experience and we're also going to have a public and get experience to next level okay we have this let's go back in here and set those now we can go to our update function and animates our crude valleys towards the ones that are on the unlevel system so first we test if the current level is under the level system gate level and that means we need to go up one level in order to match the level on the level system so that means we need to add the experience so let's make a private void add experience now in here we're going to add experience very much like on a local system except we're only going to add one by one so here we increase the experience then we check if the experience is bigger than needed to reach the next level if so we simply increase the in level and now in here if the current level is lower than the target level then we add our experience so essentially for every update we're only going to add one experience then we have an else so the local level equals the target level if we are at the same as a target level then we need to test if we are under the target experience so if the current local experience is under the eleven system dot get experience if it is under then we keep adding and essentially when we have the exact same level system and the exact same experience and then we stop animating so we do an else and is animating default so as you can see we still have our level system which has a function to add a certain amount of experience and adds it instantly and then we have our special animated class which takes our target level and target experience and animates our valleys towards them now we need this set is animating to true so we're going to do that when the experience or the unlevel changes okay and now in order to be able to test let's go here into our constructor we need to find a way to trigger our update function and for that I have a very useful class on the code Mach utilities and that is the function updater this does exactly what we need right now which is it triggers an action on every single update so we pass in the update function so just like that we have our update being count on every update the benefit of doing this way without implementing one behavior is we don't need to attach this to any game object we just run this code and everything won't work so that's pretty much it for our animated class now to test if it's working let's do some logs to say the current XP and level so let's go down here on our update and let's do a debug log and we're going to print the current level and then the current experience and now we go into our testing class and here we are creating a novel system passing it to the 11 window and to the player and then let's also create an 11 system and Maydan we're going to create it and pass in our model system ok that should do it and just one small thing we forgot to add it's in here when we add our experience we increase the level and then we need to reset our experience otherwise that one won't always be increasing so in this case since we're adding one by one we can simply set it to zero okay so let's test ok so here we are and here's the console as you can see it's constantly displaying our messages currently at level zero experience zero there's the player in the window now I add 50 and let's see that number increased slowly add 50 and there you can see it increased slowly did not go instantly into 50 now if I had 500 and there you go increasing level in another level another level and another and there you reach 50 okay so our animating logic is working great now that we have this working let's apply the animated logic to our window so when you press this we can actually see the bars increase here on the 1100 window the way we're going to do that is actually quite simple all we're going to do is replace our references to the level system with the in level system animated so let's make a private level system and Maidan and now the buttons are the only thing that won't still be interacting with the default level system everything else let's see all of these references here we're not going to receive an 11 system but rather level system animated passing and Maidan okay so we have replaced all the references from the 11 system into the animated now we have all these errors so we need to implement these functions and these events the same way we did on the unlevel system so let's do that we can for the most part copy most of this and that's pretty much it so this class has pretty much the exact same functionality as the unlevel system we have the same events which are triggered in the same way and the same functions which return these local values instead of the ones directly from the on level system so here in the level window as you can see everything should be working exactly as intended now we just need to go into our testing code and here we don't set it with the basic level system however we still need to pass in the level system so the buttons work so let's make two functions first we pass in the 11 system and then the 11 system and made it so let's make the set level system function here on the 11 window we do a set level system and just like that ok so now this class has the own level system so we can still modify the buttons and then we have the 11 system and made it in order to display our visuals ok so let's test ok here we are the scene is still running exactly as previously and there are no errors and now when I press the 50 and let's see if the bar increases slowly instead of instantly appearing on the 50 and I click any of there you go it increased slowly click again anyone comes up goes to level 2 and as you can see this one is still interacting with the original level system so as soon as I press that one goes up slowly and that one is instant and yep there it is ok so everything is working great however one potential issue we have with our animations is that when we click here there you go the animation goes at that particular speed right now that speed is tied to the update which means that in our stats depending on how fast our game is running the animation will be slower or faster obviously we don't want that to happen otherwise if the game were running at 10 frames per second and this animation would be extremely slow so let's make the animation code frame rate independent for them let's go here into our level system animator class and let's define a timer variable so here a private float for the update timer then we also need a maximum for a private boat updates timer max now on the constructor what's going here set the update timer max 2.0 60 mm so essentially this one updates 60 times per second and now on the update if we are animating let's increase the update timer by time.deltatime and then we're only going to run this code if the update timer is bigger then the update timer max if it is then first thing we do is reset the update timer so they timer equals t max and then we run our update code and now let's just copy this code into a separate function to make this easier to read so a prime Droid and in here we just call this function so just like that our code should be updating 60 times per second now the only thing missing here should be a while instead of an if just in case the game is running very slowly and it will require more than one update per frame so and here we do eight well okay so let's test so here we are let's add 500 XP and yep there we go it is increasing just like that okay now just to make sure this is all working correctly let's artificially slow down the frame rate so for now we simply go up here and set the application that target framerate let's test the game out at 10 frames per second so here we are as you can see the player is very janky running at 10 frames per second and on the stats it is at 10 frames and I had 500 and there here it is increasing at roughly the same speed so our animation is now successfully frame rate independent ok so now let's apply this same code to our player so here on the panel let's do the same things that are receiving a little system we interact with a level system animated and we have the same event so everything should work exactly as intended and just on the testing we pass in the level system animator okay that should do it let's see okay here we are now if I had 15 that one goes up okay and the player doesn't move since he only activates on the 11 lip and now if I had 500 and if there you go on level 2 and now level 3 and level 4 and so on and as you can see the bar increases and he increases it as well okay so we have our level system and the alarm system animated so the logic works great and it also looks great now let's add a couple more features to the underlying level system first let's make the amount of experience very per level until right now we always have the same a hundred XP per level now in most games the experience to the next level always increases so let's modify to have that let's start off by making a function to get the maximum amount for a certain level so we can pretty much use this same one the get experience the next level except in here we're going to receive the level so if we call this get experience the next level and we've passed in a zero then we want to know the amount of experience necessary to go from zero to one if we pass in 20 then it's going to be the experience from 20 21 and so on so in order to calculate that we have two options one if we want the game to have infinite levels we could do a certain calculation so in here for example we would simply return the level multiplied by 10 so essentially on level one it would take ten experience to the level two then from two to three to take 20 and so on and so on so this is great if we want automatic infinite levels however let's say we want a fixed number of levels if it is fixed that means we can define a certain level XP manual so for that and let's go all the way up here and we're going to define an array which won't contain the XP need this per level so let's make a private static readonly this won't be an int array and it will be the experience per level we're defining it as static readonly need to make sure that we can accentuate the array in here and never touch it again so now here all we need to do is input certain amounts so when index 0 we're going to have the experience needed to go from level zero to level 1 so let's put it at a hundred just like we were doing and then let's fill these up to all our levels ok so here I have film ten levels total so now let's go down here into our function to get the experience and here instead of calculating all we need to do is return the value in that array for that level indexed so we simply return the experience from level on index level now let's make our code safe from errors by first checking the array size so if the level is under the experience for eleventh length so in other words if it is a valid value then we simply return that one and if not then let's just return a random zone so don't let's say just a hundred however the code should never get to here you can also make a debug log error to make sure we get notified if we do get here ok so that's it now let's make a function to return if this is the max level so we make a public ball is max level and we simply return if this level equals the experience from level dot length minus one and now on the add experience first we test if we are already on the max level and we're only going to run this if we are not on the max level and down here we can also make a secondary function call that also has that public ball is max level with no parameters and we simply return D is max level and passing the current level okay so if we are not max level then we keep adding experience and here we're no longer going to have this variable so we can remove it and look at the errors and instead of that we get the experience to next level of the current level here we reduce it by that amount before we increase the level and here we're going to same thing okay we have no errors good and on the experiencer moines if we are on the max level let's return one so we have a foam bar on the max level and if not then we calculated and here we only run this code if the experience is enough and we are not in max level okay so the logic should be working correctly for a total number of levels if we want to add the number we just add more into this array so this is the experience from level 0 to level 1 and this one is gonna be the experience from level 9th 1110 now let's go into the animated class and in here as you can see we have an error again that is because we no longer have just one experience of the next level so let's do the same thing at rid of this variable down here on the errors we're going to do the same thing we go to the level system and we ask get the experience to the next level and we pass in this local level here also if one system that is max level as in the current level if so we return 1f if not we calculated okay so that should do it now let's test and see if the first level is the easiest one to move up and if the maximum is at 10 okay so here we are and we are currently on level 1 which as you remember has a total of 100 so if I add 50 it should be half the bar so let's go and if there we go it goes straight to half a bar okay now at 50 again should go up to level 2 okay exactly now if I add 50 level 2 has a bit more than 100 so 50 should be slightly less than half the bar let's add and yep there you go that is slightly less that again and it's not enough to reach the end so we correctly have more experience needed to go from level 2 to 3 then we do from 1 to 2 now let's add 500 see where that takes us and there you go it's increasing and still increasing we are four and level five and about in there on level six yep exactly now let's keep adding some more here we are at level nine let's see what happens when we reach the end and if there it is we are at level ten and it is no longer increasing so we have successfully reached our maximum now let's add our final feature so we're going to walk into how we could add a level requirement to a certain item here in the project files I have some sprites for various helmets and no helmet so let's create some buttons with these icons so let's go back into the canvas here make an empty game object this will be the equipment window and here I'm going to make some simple buttons okay so here are the three simple buttons this one is to remove the helmet this one adds this helmet and this one this one so let's make a script to control this window so we need to see sharp script this won't be our a quick window and we dragged the script on to the game object now here let's make a private void away to grab the reference to the buttons and on the click function we want to change the player equipment now on the planner class I already have a function to set the equipment here it is so let's call that function and for that we need a reference so again a serie light steel for the private player player let's drag the player reference okay so on this one we call the player dot set equip let's put it to using none and the others so that's it for the quick window now here on the equip function this function is simply just modifying the player sprite if you want to learn how to modify sprites you can check out the link in the description for the video covering how to make module or sprite chains in here on we're testing is how we can set an Eden level to equipment item so we can place the limiting code either in here on in the equip window let's try doing it on the window so for that we need the reference to the unlevel system and you need to pass it on the testing so in here same thing on testing we'd write the reference okay and on the equip window before we actually set it to equip for equipping nothing we don't have any analytical requirements okay but for these two we do so in here we're going to ask if the in level system that get a level number let's say this one is only if above level four so if above level four then we equip that and for this one so this one is above 104 which is actually the visual in level five and this one essentially at level 10 and on this one we can equip at any time so let's try to equip so here we are at level one if I try to equip these nope it doesn't work so let's level up since we need to go up to level five to equip this one so increase by a bit okay here we are at one five now if I click on this one if there you go now I can indeed equip this one and I can equip this one since this doesn't have a level requirement however this one still doesn't work we need to go up to level 10 in order to that one here we are at level 10 and now let's see if I can equip this one and if there you go I can equip the last helmet so I can now equip any of them since I have total max level all right awesome so as you can see it is very simple to have level gating okay now let's make this look home by adding an element we created previously so here I have the total warning and the tooltip item stats these were created in a previous series so check the links in the description so here if we cannot equip might show a warning so use the tongue tip warning so we have warning if we cannot currently equip and let's also add the tongue tip I have stats okay so that should do it we are adding the item stats window and also the warning so let's see this in game okay here we are and if I pass the mouse over if there you go no helmet level one and this is the basic helmet at level five and this one at level ten and if I try to equip this one if there you go there's a warning saying level required ten and this one I also can't because I need level five so now I can live them up and now at level five yep I can indeed equip this helmet and an equipment and this one I still can't again check out the photon tip series to see how these two elements were created so here we have our very nice game scene we have the UI in here showing our current level and the current XP amount we have these buttons to add our experience the experienc bar is nicely animated even when we go past multiple levels at once there is the player also connected to the same level system so when this one increases it goes past level he plays the animation changes the health bar and plays a nice particle effect and finally we have some buttons which are gated based on the levels and the my was to modify our player as always you can download the project files in utilities from in Tacoma com if you liked the video subscribe to the channel for more unity tutorials post any questions you have in the comments and I'll do my best to answer them alright see you next time
