With timestamps:

00:00 - this video is sponsored by ad mix in
00:02 - this video we're going to make a modular
00:04 - character controller we're going to set
00:06 - up our character in such a way that it's
00:08 - composed of various scripts this way we
00:10 - can easily swap out a different movement
00:12 - system different animation system swap
00:14 - layer control for enemy AI and many many
00:16 - more
00:16 - this is also an excellent learning
00:18 - exercise in writing clean code let's
00:20 - begin
00:24 - [Music]
00:28 - hello and welcome I'm your code monkey
00:31 - and this channel is all about helping
00:32 - you learn how to make your own games
00:34 - with nf2 torrents made by a professional
00:36 - indie game developer so if you find the
00:37 - video helpful consider subscribing ok so
00:40 - here's what we're trying to make over
00:42 - here is my player character and it's
00:43 - working perfectly normal so I can move
00:45 - around with the keys and I can do some
00:47 - basic sword attacks now for the really
00:49 - interesting part I can pause the game
00:51 - and over here we can inspect the player
00:53 - game object and you can see that it's
00:55 - composed of a whole bunch of different
00:57 - scripts each script is essentially a
00:59 - module executing a specific type of
01:01 - behavior so for example I can move the
01:04 - player movement keys which handles
01:05 - movement by key inputs so I can remove
01:08 - that one and now replace it with the
01:10 - player movement Mouse so now here if I
01:12 - use the keys and nope I cannot kill
01:14 - anywhere but if I right click yep there
01:17 - you go now the player is using a
01:18 - movement system based on the mouse
01:20 - position by clicking so I have swapped
01:22 - out a completely different movement
01:23 - system by just simply swapping a script
01:25 - now for the attacks I currently have
01:27 - some very simple sword attacks and again
01:29 - here the player has a sword attack
01:31 - script so I can get rid of this one and
01:33 - let's say I put the punch attack and
01:35 - said and I'll back in here and I click
01:37 - any up now I'm attacking using punches
01:38 - and kicks and now again swap this one
01:40 - for the projectile attack and yep there
01:43 - you go now I'm shooting projectiles with
01:45 - my player and with the right click I get
01:47 - some move and I could swap it out for
01:49 - the keys if I want it then for the
01:50 - movement I also have different types of
01:52 - handling movement so right now the input
01:54 - is with the right mouse button ok and
01:56 - right now I'm using a movement script
01:58 - which moves directly towards a position
02:00 - so for example if I go through this wall
02:02 - and there you go he just bounces towards
02:05 - the wall and he stops there but again I
02:07 - can pause and use a different module so
02:09 - we're here instead of using the move
02:10 - position direct which goes directly
02:12 - towards the position I can swap it out
02:14 - and it said use the move position
02:16 - pathfinding module so here I am now if I
02:19 - right-click on the other side wall
02:20 - yep there you go now he's correctly
02:22 - completing the pathfinding so instead of
02:24 - using a module that goes directly I use
02:26 - the module that completes it path and
02:28 - now in here I'm using pretty much the
02:29 - exact same basis for the module system
02:31 - in order to create an NPC that works by
02:33 - itself so that one does not have any
02:35 - player input scripts instead over here
02:38 - on the NPC you can see that it has the
02:40 - move Waypoint script so he's moving
02:42 - two waypoints and again I can remove
02:44 - this and instead I have the Rome module
02:48 - and now from look and now he roams
02:50 - around randomly around a certain
02:52 - position and again he is using pretty
02:54 - much the same type of scripts so he's
02:56 - also using the move position that the
02:57 - player can use move transform velocity
03:00 - as well and a character based for the
03:01 - animations everything in order to
03:03 - continue building your games in the long
03:04 - run you need to think about monetization
03:06 - admix is a great tool to help you solve
03:08 - that with admix you can place
03:10 - unintrusive
03:11 - integrated ads inside of your game so
03:13 - instead of an ugly banner ad you have a
03:15 - billboard right inside your game this is
03:17 - especially useful for monetizing AR and
03:19 - VR content without breaking player
03:21 - immersion and since the ads are less
03:23 - intrusive that leads to a better player
03:25 - experience which leads to higher
03:26 - retention which allows you to make more
03:28 - money so you can keep building your
03:30 - awesome game the tool is extremely easy
03:32 - to use
03:32 - just download the unity plugin and
03:34 - import it into your scene you'll see
03:36 - this window where you can select from a
03:38 - variety of sizes and drag and drop the
03:40 - ad mix object into your scene the object
03:42 - is very adaptable so it can fit any
03:44 - surface like something flat or put it
03:46 - around the pillar as you can see it's
03:48 - extremely simple to use and having
03:49 - in-game ads is a lot better than
03:51 - annoying banner ads once you've set up
03:53 - all your ads click this button to go to
03:55 - the website to validate your app once
03:57 - you do you don't start generating
03:58 - revenue in under 24 hours so ad mix is
04:02 - an extremely easy to use tool that works
04:03 - better than standard ads unless you
04:05 - start earning revenue immediately go to
04:07 - ad mix dot in and download the end mix
04:10 - unity plugin to start earning revenue
04:11 - today thank you to add mix and also
04:14 - thank you to these awesome supporters
04:16 - for making this video possible go to
04:18 - patreon.com/scishow to code monkey to
04:20 - get some perks and help keep the videos
04:22 - free for everyone so here is a very nice
04:24 - modular character system now how much
04:27 - only ego depends on what type of game
04:29 - you're trying to make so you can make
04:30 - this extremely modular or just a
04:32 - necessary amount so for example you can
04:34 - also make the input modular or have it
04:36 - baked into the movement handler so it
04:38 - really depends on what you're trying to
04:39 - accomplish here the character is built
04:42 - in a very modular way you can easily
04:43 - make your own custom modules with
04:45 - whatever behavior you want this is also
04:47 - an excellent system for learning about
04:49 - cling code by separating logic into
04:51 - modules it forces you to think about how
04:53 - to best decouple all of your systems so
04:55 - even a
04:56 - you're not interested in using this
04:57 - specific type of system in your game
04:59 - this is still an excellent learning tool
05:01 - all right so this circle let's get to it
05:03 - okay so here we are in our stirring
05:06 - scene all I have is my basic character
05:08 - sitting around doing nothing essentially
05:10 - the only module
05:11 - I have pre-built is the animation system
05:13 - which is my custom animation system that
05:15 - I always used in the videos is based on
05:17 - dynamically modifying meshes in runtime
05:19 - so if you want to learn more about how
05:21 - it works check the video linked in the
05:23 - description so over here is the game
05:25 - object and the connection with the
05:27 - animations is done so only through this
05:28 - script so again I could replace this
05:31 - script with another one that works with
05:32 - a completely different animation system
05:34 - and everything would work perfectly
05:36 - alright so let's begin by handling some
05:38 - basic movement first let's make a script
05:41 - to handle setting a velocity vector so
05:44 - here let's make a new c-sharp script
05:46 - let's call it the move velocity now this
05:50 - script is going to be solely responsible
05:51 - for setting the velocity vector on this
05:54 - particular game object so here pretty
05:56 - much all we're going to have is a
05:58 - function in order to set the velocity
06:08 - all right centered is we just have this
06:10 - function and we set our vector now in
06:12 - this case we're going to move our game
06:14 - object using a rigidbody in saying the
06:17 - velocity so let's use this vector on our
06:20 - private roid fixedupdate we simply go
06:23 - into the rigid body so let's grab it
06:28 - alright so just like that we were at the
06:30 - rigidbody and we set the rigidbody
06:32 - velocity to this velocity vector so this
06:34 - way we're going to move the rigidbody
06:36 - now let's expose the field for the speed
06:39 - and let's also play the animation and
06:44 - yet there it is just like this so here
06:47 - is our entire move on a three script so
06:50 - as you can see it's extremely unlimited
06:51 - it has one purpose and one purpose only
06:54 - it sets the velocity in order to move
06:56 - the object now let's make a player input
06:58 - script so let's make a new c-sharp
07:01 - script call it let's say player movement
07:03 - keys we're going to move the player
07:06 - using the key input so here let's do
07:09 - some very
07:10 - music input code all right here this all
07:18 - we're doing is checking for the keys on
07:21 - the various directions and constructing
07:22 - our move vector another we have the move
07:25 - vector and let's pass it on to the movie
07:26 - script so we just do get our component
07:30 - type move velocity and we set the
07:33 - velocity to this move vector okay so
07:37 - that's it essentially here the move on a
07:40 - three does not care who is calling this
07:41 - function it just takes the velocity
07:44 - vector and uses it in order to move the
07:46 - game object okay so our simple script
07:48 - should be working now let's go into the
07:50 - editor and here let's just set up our
07:53 - game object so first we had the movie
07:55 - script then we had the player movement
07:57 - keys here and let's set a certain
07:59 - movement speed and now we also need the
08:02 - rigidbody 2d and we should probably also
08:04 - add a simple toy alright alright so here
08:08 - we have our game object set up with all
08:09 - the required components let's dust okay
08:12 - so here we are let's press the keys and
08:14 - yep there you go he's walking correctly
08:16 - alright so the player is moving exactly
08:19 - as intended awesome
08:20 - however our code isn't really very
08:22 - modular just yet we have one player
08:24 - input and one movement script so right
08:27 - now this movement script is working with
08:29 - the rigid body physics but let's say we
08:31 - want to work directly with the transform
08:33 - dot position instead so here let's make
08:35 - another type of movement script
08:37 - well let's create a new c-sharp script
08:39 - call this the Move transform velocity
08:42 - and now here let's pretty much copy the
08:45 - move Austrey script so just copy all
08:47 - this except we are not going to work
08:50 - with the rigidbody
08:51 - instead we are going to move the
08:53 - transform directly so instead of our
08:56 - fixed update let's make a normal update
08:58 - and just move the transform that
09:00 - position using our velocity vector by
09:03 - our move speed and time dumptown alright
09:07 - so that's pretty much it so we have this
09:09 - script working with physics and this one
09:11 - just moving the transform directly so
09:13 - here in our player script let's remove
09:15 - the move velocity component and replace
09:18 - it with our move transform velocity
09:20 - module and now if we test there your
09:23 - an error instantly essentially we have a
09:26 - known reference exception and if we look
09:28 - into this line over here is our error
09:31 - essentially the player expects that this
09:33 - object has a move on a three-component
09:36 - and not a move transform velocity
09:38 - component so our code isn't really
09:40 - modular just yet now the way that we
09:42 - solve this is by making a nice interface
09:44 - so here on let's make a new you see
09:47 - sharp script and we're going to call
09:48 - this the eye move velocity and now in
09:52 - here this will not inherit the mana
09:54 - behavior and it will not be a class but
09:56 - instead it's going to be an interface
09:59 - now if you're not familiar with
10:01 - interfaces they are actually very simple
10:03 - instead of defining methods and
10:05 - implementation we just defined a method
10:07 - signature then all the objects that
10:09 - implement this interface must implement
10:11 - those methods and the name usually by
10:13 - convention starts with an I so I move on
10:16 - interfaces are really interesting so let
10:18 - me know if you'd like to see a dedicated
10:19 - video on them now here what we're going
10:22 - to do is implement this same interface
10:24 - on both the move elasticity and the move
10:26 - transform velocity scripts and 40
10:28 - functions let's make sure they both
10:30 - implement a simple void set velocity so
10:36 - every single script that implements this
10:38 - interface must also implement this
10:40 - method so let's go into the move on a
10:42 - city script and here we're going to
10:44 - extend monobehaviour yes and also
10:46 - implement I move a city and here we
10:49 - already have this method so we already
10:51 - implemented our interface and the same
10:53 - thing for the Move transfer velocity so
10:56 - in here we also implement this alright
11:00 - so now we have both scripts implementing
11:02 - this same interface another way that we
11:04 - solve the error that we have is over
11:06 - here on the player movement Keys instead
11:08 - of getting the component of type move on
11:10 - a city we're going to get the component
11:12 - of type time move velocity so our
11:13 - interface rather than a specific script
11:16 - so this group doesn't really care about
11:18 - which script he's going to use the set
11:20 - velocity function so it can be either
11:23 - this one or this one it doesn't matter
11:24 - as long as they both implement this same
11:26 - interface
11:27 - okay so let's test so here we are and
11:31 - let's move and if there yo we are indeed
11:33 - moving and if we inspect we can see that
11:35 - we are moving using the
11:36 - move transform velocity component so now
11:39 - we can swap this out so get rid of this
11:41 - one and send let's add the move velocity
11:43 - and let's see and if there you go we are
11:47 - still moving except now we are moving
11:49 - through the rigid body and now to see
11:51 - the difference between physics or no
11:52 - physics let's have a simple one so here
11:55 - is a basic one it is a sprite with a box
11:57 - Collider now let's see so here we are
12:00 - currently using the movement system that
12:02 - works by modifying the transform
12:04 - directly so if I go through the wall yep
12:06 - there you go I can go straight through
12:08 - the wall because again we are moving by
12:10 - modifying the transform position
12:11 - directly however if we pause and now
12:14 - swap out the move transfer velocity by
12:16 - our move velocity and now we test and
12:20 - now we move and there you go now we can
12:21 - no longer go through the wall because we
12:23 - are now moving using our velocity in the
12:26 - physics so here we have an example of
12:29 - modular code in action we have two
12:32 - scripts that have different behavior but
12:34 - they share the same interface and then
12:36 - we have another script that interacts
12:37 - with whatever script is present through
12:39 - the interface all right so now that
12:41 - we've seen the basics let's expand upon
12:43 - this concept now let's make a script
12:45 - that moves to a position so let's make a
12:48 - nice sharp script call this smooth
12:50 - position direct so this grip won't take
12:53 - a position and move the unit towards
12:55 - that position directly all right so here
13:04 - we have our very simple script it just
13:06 - exposes a function in order to set the
13:07 - move position and then on update we
13:10 - simply use the movements in the
13:12 - interface in order to set the velocity
13:13 - to move towards that move position now
13:15 - let's make a player mouth script so a
13:18 - new script call this the player movement
13:21 - Mouse and now in here let's listen to
13:25 - our part void
13:26 - update input get mouse button down on
13:29 - the right mouse button so when we press
13:32 - the right mouse button let's down that
13:34 - script in order to move to the mouse
13:35 - position all right so there it is very
13:39 - simple here I'm using the mouse run
13:41 - position from the code monkey Tony's
13:43 - which is almost he can grab for free
13:44 - from in Tacoma comm and if you want to
13:47 - implement yourself here it is just doing
13:48 - a worm camera screen to run point
13:50 - so just like this everything should work
13:52 - we have this script listening to a right
13:54 - mouse button down and when it happens it
13:56 - passes in the mouse wrong position onto
13:58 - this script and then this script
14:01 - receives that position and uses the
14:03 - movie mastery interface in order to set
14:04 - the velocity to reach that position so
14:07 - back in the editor let's use these
14:08 - modules so let's get rid of the player
14:10 - movement keys and instead we're going to
14:12 - add the player movement Mouse and we're
14:15 - also going to add the move position
14:16 - direct so we have the point movement
14:18 - mouse move position direct and also knee
14:20 - move transform velocity let's test ok so
14:23 - here we are and if I move using the keys
14:25 - if there you go no movement so we are
14:27 - not listening to key input but if I go
14:29 - in here and I right click yep there you
14:31 - go the character moves towards that
14:32 - position so now we have movement being
14:34 - handled through the mouse so here it is
14:37 - just like that all right great however
14:39 - we have one issue which is let's go up
14:42 - here onto our wall so let's go in here
14:44 - and I click on the other side and there
14:46 - you go it's moving directly through the
14:48 - wall and if we add the physics movement
14:50 - module so remove the move transform
14:52 - instead use the move velocity and I
14:55 - click and there you go I'm going
14:57 - straight through the wall so this rift
14:59 - is trying to move straight to the target
15:01 - once ignoring any objects so once again
15:03 - let's make a different movement script
15:05 - and on this one we're going to use path
15:07 - finding so let's create a new script
15:10 - let's call it move position cat finding
15:13 - and now here we're going to have the
15:15 - exact same function so a public void set
15:18 - little position and now in here instead
15:21 - of going directly like we did on the
15:22 - other script we're going to use path
15:24 - finding
15:41 - all right so here it is so we have the
15:44 - same set move position function except
15:47 - instead of moving directly we're
15:49 - completing the path finding I covered a
15:51 - star path finding on a previous video so
15:53 - check the link in the description then
15:55 - we simply have a simple path finding
15:57 - movement so we get the next path
15:59 - position we can only move velocity we
16:01 - set our velocity in order to move our
16:03 - transform and then we check if we are
16:05 - near that next path position if so we
16:08 - increment the path and if we reach the
16:09 - end we set it to minus one which makes
16:11 - them go idle so there it is very simple
16:13 - and now let's see the same thing that we
16:15 - did with the move on a three so let's
16:16 - make a common interface between this one
16:19 - and the move position direct so let's
16:22 - make a new script call this the I move
16:25 - position and now this one is not a
16:27 - class-four rather an interface and all
16:31 - we're going to have is a void set move
16:33 - position and yep that's it that's our
16:37 - interface and now on the move position
16:40 - path planning we implement it which
16:42 - already has this one and only move the
16:44 - right we do the same thing all right so
16:47 - now we have this interface being
16:48 - implemented in two separate ways so one
16:51 - of them goes straight direct towards the
16:52 - target position and one of them uses
16:54 - path finding in order to calculate the
16:55 - path so now all we need is to go into
16:58 - our player movement Mouse instead of
17:00 - using move position direct let's used
17:01 - the interface
17:02 - alright and that's it and everything
17:04 - should be working now here in the editor
17:06 - and let's swap out the move position
17:08 - direct for the move position pathfinding
17:10 - so now let's see if we right click and
17:12 - it goes around our walk let's see okay
17:15 - here we are and if I click yep there you
17:17 - go I am still moving towards the mouse
17:19 - position and if I click on the other
17:21 - side the wall yep there we go he's
17:22 - correctly going around the wall so here
17:25 - with a bunch more walls just to see
17:26 - let's right-click on the other side any
17:27 - of there you go he come likes a path and
17:29 - he goes around it and once again if we
17:31 - swap it out so here the player using the
17:34 - move position path finding so let's get
17:36 - rid of that and go back into the move
17:38 - position indirect and now here and right
17:40 - click directly there any of there you go
17:41 - now with this script with this much
17:43 - he's trying to go direct instead of
17:45 - complaining the path so you can see how
17:47 - we have completely different movement
17:48 - logic by just swapping out one module
17:50 - for another one now with these examples
17:52 - you can already see how we can build a
17:54 - modular character so essentially we make
17:56 - several modules each of them only with a
17:58 - specific single purpose and we make all
18:01 - the interactions going through
18:02 - interfaces so we can easily swap out
18:04 - components for other components with
18:06 - different behavior all right now let's
18:08 - expand upon this concept even further
18:09 - okay so now here I found the same logic
18:12 - to build a bunch more modules so for
18:14 - example I have a sword attack punch
18:16 - attack projectile attack and those
18:18 - implement the eye attack interface and
18:21 - here it is pretty much the same pattern
18:22 - so we just have our interface and our
18:24 - attack method so here the player has the
18:27 - movement key script as well as the
18:29 - player attack which is just listening to
18:30 - mouse input and right now we have the
18:32 - projectile attack module so let's see
18:35 - this okay so here I am and I can move
18:37 - around with the keys
18:38 - yep perfectly fine and I'm using the
18:40 - physics module so I cannot go through
18:41 - all this okay great any file left-click
18:44 - and there you go I can now shoot some
18:46 - projectiles so there you go just like
18:47 - that and now if we pause and now let's
18:50 - swap out the projectile attack for the
18:52 - punch attack and here we are now if I
18:54 - click if they're going on with tagging
18:56 - with punches and kicks so again
18:58 - following the same thing now we have two
18:59 - different attack behaviors and over here
19:02 - I have an NP scene so it essentially has
19:05 - no player input and it has some
19:07 - different logic scripts so if you pause
19:09 - and look at him there you go he has the
19:12 - Move olicity and he moved position
19:14 - direct and then he has this move roam
19:16 - component so here what we're doing is
19:18 - just calculating a random position and
19:20 - we're using the I move position in order
19:22 - to set that move position so he goes
19:24 - towards it once he gets there then he
19:26 - gets a new random position so you can
19:28 - see that he has no input components at
19:30 - all so they're both using the same
19:32 - marginal things so they both use the
19:33 - move velocity they both can use the move
19:36 - position direct and they both have the
19:38 - same animation system but over here I
19:40 - have the player input scripts and that
19:42 - one has an automatic similar logic AI
19:44 - and again I can swap out the modules for
19:47 - different ones so instead of the Move
19:48 - Rome let's add the move Waypoint script
19:51 - and here it takes a list of waypoints
19:54 - so this script has
19:56 - logic going from one main point to the
19:58 - next and then let's also replace the
20:00 - move position direct for the move
20:01 - position and pathfinding now let's see
20:03 - and there you go now the NPC is working
20:06 - with a different logic just roaming from
20:07 - one position to the next and once again
20:09 - I'm back to shooting some projectiles
20:11 - which I can easily swap for different
20:13 - behavior so here you can see just how
20:15 - crazy modular our system is already and
20:17 - by building this system we learn some
20:19 - more about the importance of writing
20:21 - clean code with as few dependencies as
20:23 - possible most of the components that we
20:25 - built are completely decoupled from any
20:27 - other system so using this we can easily
20:29 - make just about any type of behavior we
20:31 - want we can make a player character that
20:33 - attacks using a sword and moving with
20:35 - keys or we can make a ghost enemy that
20:37 - goes through walls without using physics
20:39 - and roams around an area looking for the
20:41 - player while moving using path line so
20:43 - here you see a very versatile and very
20:45 - modular way of making a nice character
20:48 - controller with as many different
20:49 - modules as you want thank you to add mix
20:51 - and also thank you to these awesome
20:53 - supporters for making this video
20:54 - possible go to patreon.com/scishow new
20:57 - code monkey to get some perks and help
20:59 - keep the videos free for everyone as
21:01 - always you can download the project
21:02 - housing utilities from unity karmic calm
21:04 - subscribe the channel for more ent
21:06 - tutorials post any questions have in the
21:08 - comments and I'll see you next time
21:11 - [Music]

Cleaned transcript:

this video is sponsored by ad mix in this video we're going to make a modular character controller we're going to set up our character in such a way that it's composed of various scripts this way we can easily swap out a different movement system different animation system swap layer control for enemy AI and many many more this is also an excellent learning exercise in writing clean code let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with nf2 torrents made by a professional indie game developer so if you find the video helpful consider subscribing ok so here's what we're trying to make over here is my player character and it's working perfectly normal so I can move around with the keys and I can do some basic sword attacks now for the really interesting part I can pause the game and over here we can inspect the player game object and you can see that it's composed of a whole bunch of different scripts each script is essentially a module executing a specific type of behavior so for example I can move the player movement keys which handles movement by key inputs so I can remove that one and now replace it with the player movement Mouse so now here if I use the keys and nope I cannot kill anywhere but if I right click yep there you go now the player is using a movement system based on the mouse position by clicking so I have swapped out a completely different movement system by just simply swapping a script now for the attacks I currently have some very simple sword attacks and again here the player has a sword attack script so I can get rid of this one and let's say I put the punch attack and said and I'll back in here and I click any up now I'm attacking using punches and kicks and now again swap this one for the projectile attack and yep there you go now I'm shooting projectiles with my player and with the right click I get some move and I could swap it out for the keys if I want it then for the movement I also have different types of handling movement so right now the input is with the right mouse button ok and right now I'm using a movement script which moves directly towards a position so for example if I go through this wall and there you go he just bounces towards the wall and he stops there but again I can pause and use a different module so we're here instead of using the move position direct which goes directly towards the position I can swap it out and it said use the move position pathfinding module so here I am now if I rightclick on the other side wall yep there you go now he's correctly completing the pathfinding so instead of using a module that goes directly I use the module that completes it path and now in here I'm using pretty much the exact same basis for the module system in order to create an NPC that works by itself so that one does not have any player input scripts instead over here on the NPC you can see that it has the move Waypoint script so he's moving two waypoints and again I can remove this and instead I have the Rome module and now from look and now he roams around randomly around a certain position and again he is using pretty much the same type of scripts so he's also using the move position that the player can use move transform velocity as well and a character based for the animations everything in order to continue building your games in the long run you need to think about monetization admix is a great tool to help you solve that with admix you can place unintrusive integrated ads inside of your game so instead of an ugly banner ad you have a billboard right inside your game this is especially useful for monetizing AR and VR content without breaking player immersion and since the ads are less intrusive that leads to a better player experience which leads to higher retention which allows you to make more money so you can keep building your awesome game the tool is extremely easy to use just download the unity plugin and import it into your scene you'll see this window where you can select from a variety of sizes and drag and drop the ad mix object into your scene the object is very adaptable so it can fit any surface like something flat or put it around the pillar as you can see it's extremely simple to use and having ingame ads is a lot better than annoying banner ads once you've set up all your ads click this button to go to the website to validate your app once you do you don't start generating revenue in under 24 hours so ad mix is an extremely easy to use tool that works better than standard ads unless you start earning revenue immediately go to ad mix dot in and download the end mix unity plugin to start earning revenue today thank you to add mix and also thank you to these awesome supporters for making this video possible go to patreon.com/scishow to code monkey to get some perks and help keep the videos free for everyone so here is a very nice modular character system now how much only ego depends on what type of game you're trying to make so you can make this extremely modular or just a necessary amount so for example you can also make the input modular or have it baked into the movement handler so it really depends on what you're trying to accomplish here the character is built in a very modular way you can easily make your own custom modules with whatever behavior you want this is also an excellent system for learning about cling code by separating logic into modules it forces you to think about how to best decouple all of your systems so even a you're not interested in using this specific type of system in your game this is still an excellent learning tool all right so this circle let's get to it okay so here we are in our stirring scene all I have is my basic character sitting around doing nothing essentially the only module I have prebuilt is the animation system which is my custom animation system that I always used in the videos is based on dynamically modifying meshes in runtime so if you want to learn more about how it works check the video linked in the description so over here is the game object and the connection with the animations is done so only through this script so again I could replace this script with another one that works with a completely different animation system and everything would work perfectly alright so let's begin by handling some basic movement first let's make a script to handle setting a velocity vector so here let's make a new csharp script let's call it the move velocity now this script is going to be solely responsible for setting the velocity vector on this particular game object so here pretty much all we're going to have is a function in order to set the velocity all right centered is we just have this function and we set our vector now in this case we're going to move our game object using a rigidbody in saying the velocity so let's use this vector on our private roid fixedupdate we simply go into the rigid body so let's grab it alright so just like that we were at the rigidbody and we set the rigidbody velocity to this velocity vector so this way we're going to move the rigidbody now let's expose the field for the speed and let's also play the animation and yet there it is just like this so here is our entire move on a three script so as you can see it's extremely unlimited it has one purpose and one purpose only it sets the velocity in order to move the object now let's make a player input script so let's make a new csharp script call it let's say player movement keys we're going to move the player using the key input so here let's do some very music input code all right here this all we're doing is checking for the keys on the various directions and constructing our move vector another we have the move vector and let's pass it on to the movie script so we just do get our component type move velocity and we set the velocity to this move vector okay so that's it essentially here the move on a three does not care who is calling this function it just takes the velocity vector and uses it in order to move the game object okay so our simple script should be working now let's go into the editor and here let's just set up our game object so first we had the movie script then we had the player movement keys here and let's set a certain movement speed and now we also need the rigidbody 2d and we should probably also add a simple toy alright alright so here we have our game object set up with all the required components let's dust okay so here we are let's press the keys and yep there you go he's walking correctly alright so the player is moving exactly as intended awesome however our code isn't really very modular just yet we have one player input and one movement script so right now this movement script is working with the rigid body physics but let's say we want to work directly with the transform dot position instead so here let's make another type of movement script well let's create a new csharp script call this the Move transform velocity and now here let's pretty much copy the move Austrey script so just copy all this except we are not going to work with the rigidbody instead we are going to move the transform directly so instead of our fixed update let's make a normal update and just move the transform that position using our velocity vector by our move speed and time dumptown alright so that's pretty much it so we have this script working with physics and this one just moving the transform directly so here in our player script let's remove the move velocity component and replace it with our move transform velocity module and now if we test there your an error instantly essentially we have a known reference exception and if we look into this line over here is our error essentially the player expects that this object has a move on a threecomponent and not a move transform velocity component so our code isn't really modular just yet now the way that we solve this is by making a nice interface so here on let's make a new you see sharp script and we're going to call this the eye move velocity and now in here this will not inherit the mana behavior and it will not be a class but instead it's going to be an interface now if you're not familiar with interfaces they are actually very simple instead of defining methods and implementation we just defined a method signature then all the objects that implement this interface must implement those methods and the name usually by convention starts with an I so I move on interfaces are really interesting so let me know if you'd like to see a dedicated video on them now here what we're going to do is implement this same interface on both the move elasticity and the move transform velocity scripts and 40 functions let's make sure they both implement a simple void set velocity so every single script that implements this interface must also implement this method so let's go into the move on a city script and here we're going to extend monobehaviour yes and also implement I move a city and here we already have this method so we already implemented our interface and the same thing for the Move transfer velocity so in here we also implement this alright so now we have both scripts implementing this same interface another way that we solve the error that we have is over here on the player movement Keys instead of getting the component of type move on a city we're going to get the component of type time move velocity so our interface rather than a specific script so this group doesn't really care about which script he's going to use the set velocity function so it can be either this one or this one it doesn't matter as long as they both implement this same interface okay so let's test so here we are and let's move and if there yo we are indeed moving and if we inspect we can see that we are moving using the move transform velocity component so now we can swap this out so get rid of this one and send let's add the move velocity and let's see and if there you go we are still moving except now we are moving through the rigid body and now to see the difference between physics or no physics let's have a simple one so here is a basic one it is a sprite with a box Collider now let's see so here we are currently using the movement system that works by modifying the transform directly so if I go through the wall yep there you go I can go straight through the wall because again we are moving by modifying the transform position directly however if we pause and now swap out the move transfer velocity by our move velocity and now we test and now we move and there you go now we can no longer go through the wall because we are now moving using our velocity in the physics so here we have an example of modular code in action we have two scripts that have different behavior but they share the same interface and then we have another script that interacts with whatever script is present through the interface all right so now that we've seen the basics let's expand upon this concept now let's make a script that moves to a position so let's make a nice sharp script call this smooth position direct so this grip won't take a position and move the unit towards that position directly all right so here we have our very simple script it just exposes a function in order to set the move position and then on update we simply use the movements in the interface in order to set the velocity to move towards that move position now let's make a player mouth script so a new script call this the player movement Mouse and now in here let's listen to our part void update input get mouse button down on the right mouse button so when we press the right mouse button let's down that script in order to move to the mouse position all right so there it is very simple here I'm using the mouse run position from the code monkey Tony's which is almost he can grab for free from in Tacoma comm and if you want to implement yourself here it is just doing a worm camera screen to run point so just like this everything should work we have this script listening to a right mouse button down and when it happens it passes in the mouse wrong position onto this script and then this script receives that position and uses the movie mastery interface in order to set the velocity to reach that position so back in the editor let's use these modules so let's get rid of the player movement keys and instead we're going to add the player movement Mouse and we're also going to add the move position direct so we have the point movement mouse move position direct and also knee move transform velocity let's test ok so here we are and if I move using the keys if there you go no movement so we are not listening to key input but if I go in here and I right click yep there you go the character moves towards that position so now we have movement being handled through the mouse so here it is just like that all right great however we have one issue which is let's go up here onto our wall so let's go in here and I click on the other side and there you go it's moving directly through the wall and if we add the physics movement module so remove the move transform instead use the move velocity and I click and there you go I'm going straight through the wall so this rift is trying to move straight to the target once ignoring any objects so once again let's make a different movement script and on this one we're going to use path finding so let's create a new script let's call it move position cat finding and now here we're going to have the exact same function so a public void set little position and now in here instead of going directly like we did on the other script we're going to use path finding all right so here it is so we have the same set move position function except instead of moving directly we're completing the path finding I covered a star path finding on a previous video so check the link in the description then we simply have a simple path finding movement so we get the next path position we can only move velocity we set our velocity in order to move our transform and then we check if we are near that next path position if so we increment the path and if we reach the end we set it to minus one which makes them go idle so there it is very simple and now let's see the same thing that we did with the move on a three so let's make a common interface between this one and the move position direct so let's make a new script call this the I move position and now this one is not a classfour rather an interface and all we're going to have is a void set move position and yep that's it that's our interface and now on the move position path planning we implement it which already has this one and only move the right we do the same thing all right so now we have this interface being implemented in two separate ways so one of them goes straight direct towards the target position and one of them uses path finding in order to calculate the path so now all we need is to go into our player movement Mouse instead of using move position direct let's used the interface alright and that's it and everything should be working now here in the editor and let's swap out the move position direct for the move position pathfinding so now let's see if we right click and it goes around our walk let's see okay here we are and if I click yep there you go I am still moving towards the mouse position and if I click on the other side the wall yep there we go he's correctly going around the wall so here with a bunch more walls just to see let's rightclick on the other side any of there you go he come likes a path and he goes around it and once again if we swap it out so here the player using the move position path finding so let's get rid of that and go back into the move position indirect and now here and right click directly there any of there you go now with this script with this much he's trying to go direct instead of complaining the path so you can see how we have completely different movement logic by just swapping out one module for another one now with these examples you can already see how we can build a modular character so essentially we make several modules each of them only with a specific single purpose and we make all the interactions going through interfaces so we can easily swap out components for other components with different behavior all right now let's expand upon this concept even further okay so now here I found the same logic to build a bunch more modules so for example I have a sword attack punch attack projectile attack and those implement the eye attack interface and here it is pretty much the same pattern so we just have our interface and our attack method so here the player has the movement key script as well as the player attack which is just listening to mouse input and right now we have the projectile attack module so let's see this okay so here I am and I can move around with the keys yep perfectly fine and I'm using the physics module so I cannot go through all this okay great any file leftclick and there you go I can now shoot some projectiles so there you go just like that and now if we pause and now let's swap out the projectile attack for the punch attack and here we are now if I click if they're going on with tagging with punches and kicks so again following the same thing now we have two different attack behaviors and over here I have an NP scene so it essentially has no player input and it has some different logic scripts so if you pause and look at him there you go he has the Move olicity and he moved position direct and then he has this move roam component so here what we're doing is just calculating a random position and we're using the I move position in order to set that move position so he goes towards it once he gets there then he gets a new random position so you can see that he has no input components at all so they're both using the same marginal things so they both use the move velocity they both can use the move position direct and they both have the same animation system but over here I have the player input scripts and that one has an automatic similar logic AI and again I can swap out the modules for different ones so instead of the Move Rome let's add the move Waypoint script and here it takes a list of waypoints so this script has logic going from one main point to the next and then let's also replace the move position direct for the move position and pathfinding now let's see and there you go now the NPC is working with a different logic just roaming from one position to the next and once again I'm back to shooting some projectiles which I can easily swap for different behavior so here you can see just how crazy modular our system is already and by building this system we learn some more about the importance of writing clean code with as few dependencies as possible most of the components that we built are completely decoupled from any other system so using this we can easily make just about any type of behavior we want we can make a player character that attacks using a sword and moving with keys or we can make a ghost enemy that goes through walls without using physics and roams around an area looking for the player while moving using path line so here you see a very versatile and very modular way of making a nice character controller with as many different modules as you want thank you to add mix and also thank you to these awesome supporters for making this video possible go to patreon.com/scishow new code monkey to get some perks and help keep the videos free for everyone as always you can download the project housing utilities from unity karmic calm subscribe the channel for more ent tutorials post any questions have in the comments and I'll see you next time
