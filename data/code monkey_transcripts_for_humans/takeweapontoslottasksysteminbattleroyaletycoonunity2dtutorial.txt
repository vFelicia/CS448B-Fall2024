With timestamps:

00:00 - hello and welcome I'm your code monkey
00:02 - and in this video we're continuing to
00:03 - check out the inner workings of the task
00:05 - system in Batam Riau
00:06 - Tycoon now that we know how to make and
00:08 - cue complex tasks let's put them to the
00:10 - test with something really interesting
00:12 - let's begin
00:16 - all right so here's our scene so far we
00:19 - have a worker in here we can spawn
00:21 - different test times that I have
00:22 - different executions so I can tell them
00:24 - to move here I can tell them to play a
00:26 - victory animation and in the previous
00:29 - video we had support for validating and
00:31 - cueing a task in me the worker clean up
00:33 - some shells after some time so I can
00:35 - click to spawn a junk sprite and the
00:37 - champlain up task which will make the
00:39 - work together in the sprite position
00:40 - playing animation point up the sprite
00:42 - the task is cute so he only does that
00:44 - when the task is valid which happens
00:46 - after 5 seconds so let's see that I
00:48 - click the spawn five-second delay he
00:51 - waits 1 2 3 4 5 test is the cute he goes
00:55 - there he executes and cleans it up ok
00:57 - great all right so now let's use our
00:59 - knowledge of complex tasks and queueing
01:01 - tasks to create a real-world scenario
01:03 - that you might use in your game let's
01:06 - say I have a weapon that I want to take
01:08 - to a storage position but I only want to
01:10 - take the weapon there if the storage
01:12 - position is empty so we're going to
01:14 - create a task to take that weapon but
01:16 - the task won't be executed once a free
01:19 - storage position is found the game is
01:21 - still in development so if you like the
01:23 - concept go to the steam page add it to
01:24 - your wish list and follow so to make
01:27 - testing easy let's begin by making some
01:29 - function to spawn a weapon and a weapon
01:32 - slot now let's go all the way down here
01:34 - and essentially copy the spawn for
01:36 - shells since that's what we want to do
01:38 - we want to create a sprite so let's call
01:41 - this spawn pistol sprites and have
01:49 - another one for spawn weapon slot
02:03 - all right so here I have the two
02:05 - functions who spawn a person sprite he
02:08 - uses a piston sprite it puts it in the
02:10 - correct position same thing for the
02:12 - weapon SWAT it creates simply a white
02:14 - pixel so a square tinted in gray and
02:17 - place in the correct position all right
02:19 - so let's spawn a pistol on the left
02:22 - mouse click so up here what mouse click
02:25 - instead of adding this task let's spawn
02:26 - a person sprite on the mouse position
02:30 - and on the right mouse click let's spawn
02:33 - a weapon swap all right so let's test
02:38 - and see if we can spawn these sprites
02:40 - all right so on left mouse click I can
02:43 - spawn pistols and on right mouse click I
02:45 - can spawn weapon slots okay great
02:47 - so now let's make a complex task for
02:50 - grabbing a weapon taking it to a weapon
02:52 - slot and dropping it so let's go into
02:54 - the test system and up here let's make a
02:57 - new test type only class and let's call
03:00 - it fake weapon to weapon slot so in here
03:08 - the worker moves to weapon position
03:12 - grabs the weapon takes it to weapon and
03:18 - slot and drops the weapon that's the
03:22 - behavior we want to create so here on
03:24 - let's figure out what information the
03:25 - worker needs to execute this task so
03:27 - first of all obviously he needs a
03:29 - vector3 for the weapon position then he
03:34 - needs to grab the weapon now the way
03:35 - we're going to add that is as an action
03:38 - so we'll focus on the implementation
03:39 - when we actually create the task so make
03:42 - a public action grab weapon once he
03:45 - grabs the weapon he needs to take it to
03:47 - the weapon slot so let's make a public
03:49 - vector3 for the weapon slot position and
03:52 - finally we need another action for
03:56 - dropping our weapon so a public action
03:58 - drop weapon alright so this test now has
04:02 - all the information that the worker will
04:03 - need to execute it now let's set up the
04:06 - worker so in here on switch on type
04:08 - let's do a switch
04:10 - on the take weapon to weapon slot and
04:12 - we're going to make a function with that
04:14 - name that takes a weapon slot so let's
04:18 - make that go down here make a private
04:20 - void and it takes a test system that
04:24 - tasks that take weapon to weapon SWAT
04:27 - and let's call it test ok great
04:30 - so in here let's make him execute the
04:32 - task first of all we go to that position
04:35 - so workers moved to and we're going to
04:38 - move to take weapon to slot esque first
04:41 - of all move to the weapon position when
04:43 - we get there let's grab the weapon so
04:45 - take weapon do the grab weapon action
04:50 - once you grab it then we're going to do
04:53 - a worker down move to and we're going to
04:55 - move to the weapon slot position and
04:59 - when we get there
05:00 - execute this action and this action will
05:03 - do the take weapon dot drop weapon and
05:06 - once we do we go back to idle alright so
05:10 - the worker is now set up when he
05:12 - receives a weapon to weapon slot task he
05:15 - moves to the weapon position once he
05:17 - gets there he grabs the weapon he moves
05:20 - to the weapon slot position he drops the
05:22 - weapon and goes back to either so let's
05:24 - go in the game handler and up here and
05:27 - let's easily spawn the task
05:30 - so let's first spawn these two so we can
05:32 - easily see them so a game object for the
05:35 - pistol game object and another one for
05:40 - the weapon slot game okay Sam spawning
05:45 - on the mouse position let's spawn to the
05:47 - left and to the right of our workers so
05:50 - put it on four hundred five hundred and
05:52 - this one put it on the right of the
05:55 - workers so on 600 500 okay great
05:58 - so now here let's spawn the actual task
06:01 - so we're going to create a task system
06:04 - that tasks tasks and it will be a new GM
06:09 - task system does not take weapon to
06:12 - weapon slot and then we're going to add
06:15 - it to the test system that
06:17 - of this task all right now the
06:20 - information we need in here first of all
06:23 - for the weapon position let's give it
06:25 - the pistol game object transform dot
06:27 - position for the weapon slot position
06:31 - let's give it the weapon small game
06:33 - object transform that position for the
06:37 - grab weapon this is where we're going to
06:40 - do something interesting now when we
06:43 - grabbed weapon it is actually quite
06:45 - useful if we can know who grabbed it so
06:47 - let's go in the test system and modify
06:49 - in here
06:50 - for the grab weapon instead of being a
06:52 - simple action let's be an action that
06:54 - takes an argument which is a worker task
06:56 - AI so this way we can know who has
06:59 - brought the weapon so in here when we're
07:01 - creating the grab weapon won't take the
07:03 - worker task AI as an argument so worker
07:06 - task
07:07 - guy and now we know who has grabbed this
07:09 - weapon so who is executing this
07:11 - particular task so now the simplest
07:15 - thing to do in here is to simply parent
07:17 - the weapon to the worker that way the
07:19 - weapon will fall the worker as he moves
07:21 - so we can do a pistol game object the
07:25 - transform God set parent and we're
07:27 - simply going to set the parent to the
07:30 - worker transform all right so when he
07:33 - grabs
07:33 - he simply parents the weapon to the
07:36 - worker and for the drop weapon we're
07:41 - going to execute a action and this
07:44 - action does not have any parameters and
07:46 - what we're going to do here is simply
07:48 - reset the parent back to no and down
07:51 - here just make sure that he did drop the
07:53 - weapon let's move him away so let's
07:55 - spawn a simple move to position tasks
07:57 - just to move him away so put this in
08:01 - here in here
08:07 - all right so first we are spawning the
08:10 - sprite for deep personal and a sprite
08:12 - for the weapon spot then we are creating
08:15 - a task we are using the weapon position
08:17 - as that pistol sprite position the
08:20 - weapon slot position as the weapon slot
08:22 - the game object transfer on that
08:23 - position for the grab weapon action we
08:26 - are simply setting the pistol game
08:28 - object parent to the worker transform
08:31 - and for the drop we are simply resetting
08:34 - the parent back to know so this way the
08:37 - weapon should follow the worker when the
08:38 - worker is carrying it and finally we
08:41 - simply added a move to position just to
08:43 - move the worker away so we make sure
08:45 - that he is correctly dropping the weapon
08:48 - all right so let's s and see if the
08:50 - worker is correctly executing that task
08:52 - all right there he is going to the
08:54 - weapon when he gets there yippee whereas
08:57 - the weapon you can see the weapon is now
08:58 - falling yeah now he's going to the
09:01 - weapon slot when he gets there yup he
09:04 - correctly dropped the weapon and he
09:05 - executes the other task and moved away
09:07 - all right great
09:09 - this is exactly the behavior we want to
09:11 - create so now that this complex task is
09:14 - working let's validate the task before
09:16 - executing it so the thing we want to
09:19 - check is if the weapon slot is actually
09:21 - available before we execute that task in
09:24 - order to do that let's make a simple
09:26 - weapon slot class so let's go all the
09:28 - way down here make a private class
09:31 - weapon slots and this won't simply be a
09:34 - very simple object just to keep track of
09:36 - when the weapon slot is empty and when
09:38 - it is occupied so let's have a public
09:42 - transform for the weapon slot
09:44 - transform we're going to have a function
09:47 - public goal is empty and you were simply
09:52 - going to return if the weapon slot
09:53 - transform equals null
09:55 - that's how we're going to identify if it
09:57 - is empty before we do that let's make a
10:00 - weapon slot constructor and on the
10:02 - constructor we're simply going to
10:04 - receive the transform for the web to
10:06 - spawn and let's have a public void
10:10 - function to set the weapon and transform
10:16 - and the public vector3 just to get the
10:21 - position of this weapons once so we're
10:24 - going to return the weapon smart
10:26 - transform dot position let's make a
10:29 - function to change the color so we can
10:31 - visually see when it is empty and when
10:33 - it is occupying so a private void of the
10:36 - sprites all right so here it is a very
10:50 - simple weapon slot class we have an
10:53 - inner transform so this should actually
10:55 - be private we created using that
10:57 - transform we have a function to check if
10:59 - this weapon slot is empty we can set the
11:03 - weapon transform we can update the
11:05 - sprite to visually show the color
11:08 - whether it's empty or not if it is empty
11:10 - then it shows in grey if not to choose
11:12 - in red and we can grab the position all
11:15 - right now let's make the slot become
11:17 - empty after some time so when we set the
11:20 - weapon transform let's use the function
11:23 - timer which is part of the code monkey
11:25 - Tonys which is always you can wear for
11:27 - free from unity code monkey calm then
11:29 - we're going to create now the function
11:32 - timer execute an action after some time
11:35 - so after let's say 4 seconds we're going
11:38 - to essentially destroy this weapon and
11:41 - now in here actually made a mistake with
11:43 - the weapon transform we need a second
11:46 - transform for the weapon to transform so
11:49 - we need the reference to the weapon slot
11:51 - transform as well as the weapon
11:53 - transform that is currently caring so
11:55 - the weapon smart transform you do have
11:57 - this one but for the weapon transform in
12:00 - this case it starts off no so it is
12:02 - empty so that's what we're going to test
12:04 - and when we set it in here we're going
12:06 - to set the weapon transform instead of
12:09 - the weapon slot transfer ok so we have
12:11 - the weapon slot transform which is a
12:13 - transform of this weapon slot and a
12:15 - weapon transform which is the weapon
12:17 - that is occupying this slot and that's
12:20 - what we use to test if it is empty and
12:22 - when we set it the same thing and now
12:24 - after four seconds of setting the weapon
12:26 - we're going to destroy the weapon
12:29 - transform that game object and we're
12:32 - going to again set the weapon transform
12:33 - back to No
12:35 - so essentially every time we set
12:37 - something in here we're going to destroy
12:39 - it after four seconds and reset it back
12:41 - to no this is just so we can easily see
12:43 - it being occupied and empty and occupied
12:45 - again all right so let's test that
12:51 - behavior up here when we create the
12:55 - weapon spot let's create an actual
12:56 - weapon slot object weapon slot equals
12:59 - new weapon slot and it's going to take
13:01 - the sprite game object transform so now
13:07 - in here let's do a function timer just
13:09 - for testing to create a function that
13:11 - won't execute let's say after two
13:15 - seconds so after few seconds the weapon
13:18 - slot dot set the weapon transform to
13:21 - this one that we spawn up here and for
13:27 - now let's comment out tasks so we just
13:29 - want to test the actual weapon slot code
13:32 - all right so let's see all right there's
13:35 - a slot it's empty now it is occupied
13:38 - with this one and now that one poof it
13:41 - vanishes and it's empty again okay great
13:43 - so we now have what is necessary to test
13:46 - if our test validation is working
13:48 - correctly so if you don't let's only add
13:50 - one more thing down to our weapon slot
13:53 - and we're going to need a private ball
13:56 - for PA's weapon incoming essentially we
14:00 - need to know if this one is currently
14:02 - empty but has something incoming onto it
14:04 - so I want to make it public void set as
14:08 - weapon incoming and when we test for
14:13 - empty we make sure that that one is
14:15 - known and has no weapon incoming so
14:19 - we're adding this just to make sure that
14:21 - we keep the slot busy while the worker
14:22 - is enroute to taking a weapon to this
14:25 - weapon slot and when we set the
14:27 - transform let's reset back to false
14:29 - since the weapon has been received all
14:33 - right so let's go up here and first
14:34 - let's store a reference to the what
14:37 - one weapon slide weapon slot okay and
14:42 - this is what we're going to set and
14:44 - we're no longer going to spawn a weapon
14:47 - on the start in here rather we are going
14:50 - to go in here when we spawn a weapon
14:52 - let's sort the game object this whole
14:55 - game object so now when we do spawn a
14:59 - weapon we need to also spawn a cute task
15:02 - so we're going to go into the task
15:04 - system dot NQ a task now the task that
15:08 - we are going to kill well essentially
15:10 - test if the weapon slot is available so
15:13 - if the weapon slot dot is empty if it is
15:18 - empty then we do want to take them there
15:20 - if not then we want to keep the task on
15:22 - the cube so returning now so if it is
15:25 - empty the first thing we do is down the
15:27 - weapon slot that it has a weapon
15:30 - incoming so set has weapon incoming to
15:32 - true and then we want to execute this
15:36 - task in here so task same as previously
15:40 - and what we're going to return and the
15:44 - weapon slot will be this weapon slot in
15:46 - here the transfer on that position
15:48 - except we have the gift position all
15:51 - right
15:51 - so when we press the left mouse button
15:53 - we spawn a pistol sprite and we add a
15:57 - test to the queue that won't test if
15:59 - that weapon slot is empty if it is not
16:01 - empty then returns now and it keeps
16:03 - trying again when it is empty we set it
16:06 - to has a weapon and we generate the task
16:09 - that we saw previously which sets your
16:11 - weapon position the slot grab drop and
16:13 - so on and returns that task all right so
16:16 - it says to make sure that we are cueing
16:18 - the tasks whenever we spawn a pistol and
16:20 - since the weapon slot is automatically
16:23 - destroying the weapon after some time it
16:25 - should constantly be becoming occupied
16:28 - empty occupied empty and so on so let's
16:30 - see one final thing is in here when we
16:33 - drop the weapon we need to actually add
16:35 - the weapon to the weapon slot so we go
16:37 - to the weapon slot that set the weapon
16:40 - transform to this pistol game object dot
16:43 - transport so we notify the weapon slot
16:47 - window weapon actually arrives at the
16:49 - slot so let's test
16:50 - all right here's the weapons want as you
16:52 - can see it is in gray which means that
16:54 - it is empty now when I click it's going
16:57 - to spawn a pistol sprite and the worker
16:59 - won't grab the task move towards the
17:01 - pistol and move towards the weapon slot
17:03 - and as soon as I click the weapon slot
17:05 - won't turn red since it has a weapon
17:07 - incoming so let's see if all that is
17:09 - working so I click yep it is red TAS
17:12 - DQ'd he's going he gets there he drops
17:15 - it and now after five seconds he should
17:17 - destroy the weapon and yep there you go
17:19 - it's in grey so now let's try to spawn
17:21 - multiple weapons at once so there's one
17:24 - and there's another one that one is
17:26 - taking it he goes in there all right so
17:29 - now the weapon is occupying that slot
17:31 - and after five seconds it gets destroyed
17:34 - it gets empty he grabs the other one and
17:36 - so on so forth so as you can see we can
17:38 - now queue up various actions and they
17:41 - will only be executed once the question
17:43 - once the validation function has been
17:46 - validated so there you have it we
17:48 - created a task that is a complex task
17:50 - and use task queuing to only executed
17:53 - when it can actually be executed this
17:55 - exact behavior is used many times in
17:57 - battle royale Tycoon in the next video
17:59 - we're going to cover how to set up
18:01 - multiple task systems with multiple task
18:03 - types again the game is still in
18:05 - development so if you like the concept
18:07 - you're the same page add it to your
18:08 - wishlist and phone as always you can
18:10 - download the project files and utilities
18:12 - from indie code monkey comm if you have
18:14 - any questions post them in the comments
18:16 - and I'll do my best answer them
18:17 - subscribe for more videos and I'll see
18:19 - you next time

Cleaned transcript:

hello and welcome I'm your code monkey and in this video we're continuing to check out the inner workings of the task system in Batam Riau Tycoon now that we know how to make and cue complex tasks let's put them to the test with something really interesting let's begin all right so here's our scene so far we have a worker in here we can spawn different test times that I have different executions so I can tell them to move here I can tell them to play a victory animation and in the previous video we had support for validating and cueing a task in me the worker clean up some shells after some time so I can click to spawn a junk sprite and the champlain up task which will make the work together in the sprite position playing animation point up the sprite the task is cute so he only does that when the task is valid which happens after 5 seconds so let's see that I click the spawn fivesecond delay he waits 1 2 3 4 5 test is the cute he goes there he executes and cleans it up ok great all right so now let's use our knowledge of complex tasks and queueing tasks to create a realworld scenario that you might use in your game let's say I have a weapon that I want to take to a storage position but I only want to take the weapon there if the storage position is empty so we're going to create a task to take that weapon but the task won't be executed once a free storage position is found the game is still in development so if you like the concept go to the steam page add it to your wish list and follow so to make testing easy let's begin by making some function to spawn a weapon and a weapon slot now let's go all the way down here and essentially copy the spawn for shells since that's what we want to do we want to create a sprite so let's call this spawn pistol sprites and have another one for spawn weapon slot all right so here I have the two functions who spawn a person sprite he uses a piston sprite it puts it in the correct position same thing for the weapon SWAT it creates simply a white pixel so a square tinted in gray and place in the correct position all right so let's spawn a pistol on the left mouse click so up here what mouse click instead of adding this task let's spawn a person sprite on the mouse position and on the right mouse click let's spawn a weapon swap all right so let's test and see if we can spawn these sprites all right so on left mouse click I can spawn pistols and on right mouse click I can spawn weapon slots okay great so now let's make a complex task for grabbing a weapon taking it to a weapon slot and dropping it so let's go into the test system and up here let's make a new test type only class and let's call it fake weapon to weapon slot so in here the worker moves to weapon position grabs the weapon takes it to weapon and slot and drops the weapon that's the behavior we want to create so here on let's figure out what information the worker needs to execute this task so first of all obviously he needs a vector3 for the weapon position then he needs to grab the weapon now the way we're going to add that is as an action so we'll focus on the implementation when we actually create the task so make a public action grab weapon once he grabs the weapon he needs to take it to the weapon slot so let's make a public vector3 for the weapon slot position and finally we need another action for dropping our weapon so a public action drop weapon alright so this test now has all the information that the worker will need to execute it now let's set up the worker so in here on switch on type let's do a switch on the take weapon to weapon slot and we're going to make a function with that name that takes a weapon slot so let's make that go down here make a private void and it takes a test system that tasks that take weapon to weapon SWAT and let's call it test ok great so in here let's make him execute the task first of all we go to that position so workers moved to and we're going to move to take weapon to slot esque first of all move to the weapon position when we get there let's grab the weapon so take weapon do the grab weapon action once you grab it then we're going to do a worker down move to and we're going to move to the weapon slot position and when we get there execute this action and this action will do the take weapon dot drop weapon and once we do we go back to idle alright so the worker is now set up when he receives a weapon to weapon slot task he moves to the weapon position once he gets there he grabs the weapon he moves to the weapon slot position he drops the weapon and goes back to either so let's go in the game handler and up here and let's easily spawn the task so let's first spawn these two so we can easily see them so a game object for the pistol game object and another one for the weapon slot game okay Sam spawning on the mouse position let's spawn to the left and to the right of our workers so put it on four hundred five hundred and this one put it on the right of the workers so on 600 500 okay great so now here let's spawn the actual task so we're going to create a task system that tasks tasks and it will be a new GM task system does not take weapon to weapon slot and then we're going to add it to the test system that of this task all right now the information we need in here first of all for the weapon position let's give it the pistol game object transform dot position for the weapon slot position let's give it the weapon small game object transform that position for the grab weapon this is where we're going to do something interesting now when we grabbed weapon it is actually quite useful if we can know who grabbed it so let's go in the test system and modify in here for the grab weapon instead of being a simple action let's be an action that takes an argument which is a worker task AI so this way we can know who has brought the weapon so in here when we're creating the grab weapon won't take the worker task AI as an argument so worker task guy and now we know who has grabbed this weapon so who is executing this particular task so now the simplest thing to do in here is to simply parent the weapon to the worker that way the weapon will fall the worker as he moves so we can do a pistol game object the transform God set parent and we're simply going to set the parent to the worker transform all right so when he grabs he simply parents the weapon to the worker and for the drop weapon we're going to execute a action and this action does not have any parameters and what we're going to do here is simply reset the parent back to no and down here just make sure that he did drop the weapon let's move him away so let's spawn a simple move to position tasks just to move him away so put this in here in here all right so first we are spawning the sprite for deep personal and a sprite for the weapon spot then we are creating a task we are using the weapon position as that pistol sprite position the weapon slot position as the weapon slot the game object transfer on that position for the grab weapon action we are simply setting the pistol game object parent to the worker transform and for the drop we are simply resetting the parent back to know so this way the weapon should follow the worker when the worker is carrying it and finally we simply added a move to position just to move the worker away so we make sure that he is correctly dropping the weapon all right so let's s and see if the worker is correctly executing that task all right there he is going to the weapon when he gets there yippee whereas the weapon you can see the weapon is now falling yeah now he's going to the weapon slot when he gets there yup he correctly dropped the weapon and he executes the other task and moved away all right great this is exactly the behavior we want to create so now that this complex task is working let's validate the task before executing it so the thing we want to check is if the weapon slot is actually available before we execute that task in order to do that let's make a simple weapon slot class so let's go all the way down here make a private class weapon slots and this won't simply be a very simple object just to keep track of when the weapon slot is empty and when it is occupied so let's have a public transform for the weapon slot transform we're going to have a function public goal is empty and you were simply going to return if the weapon slot transform equals null that's how we're going to identify if it is empty before we do that let's make a weapon slot constructor and on the constructor we're simply going to receive the transform for the web to spawn and let's have a public void function to set the weapon and transform and the public vector3 just to get the position of this weapons once so we're going to return the weapon smart transform dot position let's make a function to change the color so we can visually see when it is empty and when it is occupying so a private void of the sprites all right so here it is a very simple weapon slot class we have an inner transform so this should actually be private we created using that transform we have a function to check if this weapon slot is empty we can set the weapon transform we can update the sprite to visually show the color whether it's empty or not if it is empty then it shows in grey if not to choose in red and we can grab the position all right now let's make the slot become empty after some time so when we set the weapon transform let's use the function timer which is part of the code monkey Tonys which is always you can wear for free from unity code monkey calm then we're going to create now the function timer execute an action after some time so after let's say 4 seconds we're going to essentially destroy this weapon and now in here actually made a mistake with the weapon transform we need a second transform for the weapon to transform so we need the reference to the weapon slot transform as well as the weapon transform that is currently caring so the weapon smart transform you do have this one but for the weapon transform in this case it starts off no so it is empty so that's what we're going to test and when we set it in here we're going to set the weapon transform instead of the weapon slot transfer ok so we have the weapon slot transform which is a transform of this weapon slot and a weapon transform which is the weapon that is occupying this slot and that's what we use to test if it is empty and when we set it the same thing and now after four seconds of setting the weapon we're going to destroy the weapon transform that game object and we're going to again set the weapon transform back to No so essentially every time we set something in here we're going to destroy it after four seconds and reset it back to no this is just so we can easily see it being occupied and empty and occupied again all right so let's test that behavior up here when we create the weapon spot let's create an actual weapon slot object weapon slot equals new weapon slot and it's going to take the sprite game object transform so now in here let's do a function timer just for testing to create a function that won't execute let's say after two seconds so after few seconds the weapon slot dot set the weapon transform to this one that we spawn up here and for now let's comment out tasks so we just want to test the actual weapon slot code all right so let's see all right there's a slot it's empty now it is occupied with this one and now that one poof it vanishes and it's empty again okay great so we now have what is necessary to test if our test validation is working correctly so if you don't let's only add one more thing down to our weapon slot and we're going to need a private ball for PA's weapon incoming essentially we need to know if this one is currently empty but has something incoming onto it so I want to make it public void set as weapon incoming and when we test for empty we make sure that that one is known and has no weapon incoming so we're adding this just to make sure that we keep the slot busy while the worker is enroute to taking a weapon to this weapon slot and when we set the transform let's reset back to false since the weapon has been received all right so let's go up here and first let's store a reference to the what one weapon slide weapon slot okay and this is what we're going to set and we're no longer going to spawn a weapon on the start in here rather we are going to go in here when we spawn a weapon let's sort the game object this whole game object so now when we do spawn a weapon we need to also spawn a cute task so we're going to go into the task system dot NQ a task now the task that we are going to kill well essentially test if the weapon slot is available so if the weapon slot dot is empty if it is empty then we do want to take them there if not then we want to keep the task on the cube so returning now so if it is empty the first thing we do is down the weapon slot that it has a weapon incoming so set has weapon incoming to true and then we want to execute this task in here so task same as previously and what we're going to return and the weapon slot will be this weapon slot in here the transfer on that position except we have the gift position all right so when we press the left mouse button we spawn a pistol sprite and we add a test to the queue that won't test if that weapon slot is empty if it is not empty then returns now and it keeps trying again when it is empty we set it to has a weapon and we generate the task that we saw previously which sets your weapon position the slot grab drop and so on and returns that task all right so it says to make sure that we are cueing the tasks whenever we spawn a pistol and since the weapon slot is automatically destroying the weapon after some time it should constantly be becoming occupied empty occupied empty and so on so let's see one final thing is in here when we drop the weapon we need to actually add the weapon to the weapon slot so we go to the weapon slot that set the weapon transform to this pistol game object dot transport so we notify the weapon slot window weapon actually arrives at the slot so let's test all right here's the weapons want as you can see it is in gray which means that it is empty now when I click it's going to spawn a pistol sprite and the worker won't grab the task move towards the pistol and move towards the weapon slot and as soon as I click the weapon slot won't turn red since it has a weapon incoming so let's see if all that is working so I click yep it is red TAS DQ'd he's going he gets there he drops it and now after five seconds he should destroy the weapon and yep there you go it's in grey so now let's try to spawn multiple weapons at once so there's one and there's another one that one is taking it he goes in there all right so now the weapon is occupying that slot and after five seconds it gets destroyed it gets empty he grabs the other one and so on so forth so as you can see we can now queue up various actions and they will only be executed once the question once the validation function has been validated so there you have it we created a task that is a complex task and use task queuing to only executed when it can actually be executed this exact behavior is used many times in battle royale Tycoon in the next video we're going to cover how to set up multiple task systems with multiple task types again the game is still in development so if you like the concept you're the same page add it to your wishlist and phone as always you can download the project files and utilities from indie code monkey comm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time
