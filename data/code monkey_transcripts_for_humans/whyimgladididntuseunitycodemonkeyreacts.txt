With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - here's an interesting video titled
00:03 - learning Game Dev and why I'm glad I
00:05 - didn't start with unity sounds
00:07 - interesting so let's watch and I'll give
00:09 - you my thoughts from my perspective as
00:10 - an indie Dev who has been using Unity
00:12 - professionally for over 10 years I'm
00:13 - currently using it in my upcoming Sim
00:15 - game dinky Gardens and I'm still very
00:17 - happy with my choice of engine seven
00:18 - years ago 12 year old me was very bored
00:21 - because my parents put a 30 minute limit
00:23 - on video games I figured that if I could
00:25 - make games myself the limit wouldn't
00:27 - apply
00:28 - that's a a fun loophole I guess if your
00:32 - parents limit how much gameplaying you
00:34 - can do then yeah I guess getting started
00:36 - into game development I guess that could
00:38 - be one good way to avoid that limit if
00:40 - your parents ask you are you playing
00:42 - your game you can say nope I'm not
00:43 - playing I'm actually learning how to
00:44 - make a game so I guess that's that's one
00:47 - way to work this is when I decided I
00:49 - would learn to code I picked python
00:51 - because it was the only language I knew
00:52 - of at the time python is excellent
00:54 - language that a lot of people recommend
00:56 - personally I'm not a huge fan I hate the
00:58 - fact that there are no semicolons I hate
01:00 - the fact that there are no curly braces
01:02 - so personally I do not like the syntax
01:05 - behind python but a lot of people say it
01:07 - is one of the easiest languages to learn
01:08 - it's not really very good for game
01:10 - development but when you're learning
01:12 - really only that matters is learning how
01:14 - to actually run the game logic learning
01:16 - about game design update loops and all
01:18 - kinds of things and you can really learn
01:20 - those principles in any language so if
01:22 - you already know python it's not really
01:23 - a bad thing to start actually making
01:25 - games with python install The
01:27 - Interpreter Googled some tutorials and
01:29 - within a few months of using python
01:31 - isards or in pi game which is a graphics
01:34 - library for python in the last few years
01:36 - I've tried messing around with engines
01:38 - like Unity or Godot a bit and I even
01:40 - participated in a game Jam using Godot
01:42 - when I was 12 I don't even think I knew
01:44 - what a game engine was to this day I'm
01:46 - still glad I chose python over something
01:48 - like Unity there are a bunch of ways to
01:50 - get into Game Dev and in my opinion
01:52 - there isn't really a one-size-fits-all
01:54 - method ultimately the ideal route
01:56 - depends on what you're trying to do when
01:58 - deciding where to start there's one
02:00 - major choice that a lot of people seem
02:01 - to forget about it's a decision of
02:03 - whether or not to use a game engine this
02:06 - is one thing that you hear quite a lot
02:07 - should I even use a game engine or do it
02:10 - from scratch on this topic my advice is
02:12 - super simple it is simply ask yourself
02:14 - do you want to make a game or do you
02:16 - want to make a game engine generally
02:18 - unless you are a genius unless you are
02:20 - insanely productive you cannot do both
02:22 - at the same time if you want to learn
02:24 - how to make Dimensions if you want to
02:25 - learn how to make some level of level
02:27 - code and figure out how opengl or
02:29 - DirectX Works they can definitely be fun
02:31 - that is definitely one thing that I
02:33 - personally I would love to learn about
02:34 - at some point in the future whenever I
02:35 - can find some time but that requires a
02:38 - ton of work requires a ton of effort so
02:39 - in general unless you are a massive
02:41 - outline you need to ask yourself do you
02:44 - want to make games or do you want to
02:45 - make a game engine engines come with a
02:47 - bunch of built-in functionality that
02:49 - allows you to make complex games with
02:51 - minimal knowledge they also handle a lot
02:53 - of Messier stuff that goes into
02:55 - rendering which is a big deal if you
02:57 - want to do 3D stuff
02:59 - yeah that's the thing I mean if you want
03:01 - to build your game engine from scratch
03:02 - then all those tunes that you probably
03:05 - take for granted if you use any game
03:07 - engine those do not exist like if you
03:09 - want to render a pixel on screen in
03:11 - unity you just create a game object and
03:13 - add a mesh filter and mesh renderer or a
03:15 - Sprite render and boom there you go
03:16 - you've got something on screen but if
03:18 - you're working on building your actual
03:20 - game engine you've got to go into the
03:22 - opengl or the DirectX library in order
03:24 - to figure out okay how do I render a
03:25 - triangle on screen then you got to
03:27 - figure out okay so how do I make all
03:29 - kinds of complex math transformations in
03:32 - order to figure out okay so the camera
03:33 - is moving from here with a certain
03:34 - perspective how should that triangle
03:36 - look and so on it is insanely complex so
03:39 - that is why I say either make games or
03:40 - make game engine you got to choose one
03:42 - or the other this is usually done
03:43 - through some layers of abstraction and
03:46 - you interact with that abstraction
03:47 - rather than using the lower level
03:49 - methods that things like Graphics
03:51 - libraries use
03:53 - yep again I mean if you want to render
03:55 - mesh on screen in unity you just drag
03:57 - the mesh into your project files attach
03:59 - it to a game object to the mesh filter
04:00 - and that's it everything is rendering
04:01 - you don't have to worry about vertices
04:03 - perspective camera none of that just put
04:05 - it physically in front of the camera and
04:07 - boom everything is rendered so okay
04:09 - mentions you help a massive amount they
04:11 - abstract a way of a lot of things so you
04:13 - don't have to worry about them if you
04:14 - want to get into Game Dev and your only
04:16 - goal is to make games then an engine is
04:18 - probably the right choice for you
04:19 - however there is a bit more to this
04:21 - story than there seems if this was all
04:23 - there was to it then I wouldn't be happy
04:25 - with the route I took one of the major
04:27 - differences in using an engine or not
04:30 - using one comes down to what exactly
04:32 - you're learning while you do learn the
04:33 - programming language your engine uses
04:35 - assuming you're not using blueprints
04:37 - with unreal or something you're
04:39 - primarily learning to use the game in
04:41 - this one thing that I really disagree
04:43 - with I mean he's not necessarily wrong
04:46 - like if you're making games with unity
04:48 - you're learning about game objects and
04:49 - game objects that is a Unity specific
04:51 - concept there's no such thing as a game
04:54 - object and just C sharp in general but
04:56 - once you are learning very hyper
04:58 - specific things that are specific to
04:59 - that game engine whilst you aren't
05:01 - learning that you're also learning a
05:02 - language that is very generic personally
05:04 - I have made a ton of random applications
05:06 - random things with c-sharp and my
05:08 - knowledge from c-sharp comes from using
05:10 - Unity so yes you won't learn quite a lot
05:12 - of things that are hyper focused to that
05:14 - specific engine but you also learn so
05:16 - many other skills that are so generic so
05:18 - applicable to literally anything I'm
05:20 - pretty sure that with the knowledge that
05:21 - I have with knowledge that I've gained
05:23 - from making tons of games with identity
05:24 - I'm pretty sure I could go work for
05:26 - Microsoft and work on some random
05:27 - software related to c-sharp I'm pretty
05:30 - sure I could do that and do quite well
05:32 - on the other hand if you learn to make
05:34 - games without an engine by using a
05:37 - graphics library or something similar
05:38 - you're spending a lot more time making
05:40 - your own systems I mean that kind of
05:43 - becomes exactly the same problem instead
05:46 - of working with specific game objects
05:47 - you're working with specific visual
05:49 - representations of something like opengl
05:51 - or DirectX so unless you're writing an
05:52 - assembly you're always working on some
05:54 - kind of layer of abstraction there's so
05:56 - much to learn that an engine normally
05:58 - does for you such as the way you store
06:00 - and render a world or the way you handle
06:02 - entities when you go this route you'll
06:04 - get to know your language of choice even
06:06 - better than if you had chosen an engine
06:08 - yeah I agree with that I mean if you go
06:10 - the low level route that definitely
06:11 - forces you to be hyper familiar with the
06:13 - actual language that you're using but
06:15 - again goes back to the same question do
06:16 - you want to make games or do you want to
06:18 - deeply learn a language there's no wrong
06:20 - answer both are personally valid
06:21 - depending on what exactly you want to do
06:23 - and you'll get much more experience that
06:25 - will force you to develop your problem
06:27 - solving skills you'll be more likely to
06:29 - think about how something could be made
06:32 - rather than whether or not there is a
06:34 - library or some software that does what
06:35 - you want there's definitely something to
06:37 - be said about over relying on tools like
06:40 - for example the unity asset store is
06:41 - absolutely excellent you can find tools
06:43 - that won't do just about anything so
06:45 - there there is something to be said
06:46 - about overlying on those tunes and not
06:49 - actually trying to solve the problems
06:50 - yourself but again that is not really
06:52 - related to Engine versus no engine that
06:54 - is related to overusing or abusing tools
06:57 - and just trying to build something
06:59 - yourself skills you get are
07:00 - significantly more transferable than the
07:03 - skills you'd get while learning to use a
07:05 - game engine
07:06 - again while working with or without a
07:08 - game engine that is going to involve
07:09 - lots of problem solving you are going to
07:11 - gain a lot of those skills regardless of
07:13 - using a game engine or not so yes some
07:16 - things won't be specific to that game
07:17 - engine but a lot of it is really just
07:19 - knowledge I mean for me personally I've
07:21 - been writing code for 25 years I started
07:23 - writing code by writing mirror scripts
07:25 - that is a completely ancient language
07:27 - that is not used anywhere nowadays I
07:29 - don't even think America exists anymore
07:30 - but the knowledge that I gained while I
07:32 - was working on that that still serves me
07:34 - well to this day all the problem solving
07:36 - all the logic cells that I gained when I
07:38 - was making all kinds of things all kinds
07:40 - of trivia games making hangman games
07:42 - making simple applications in order to
07:44 - manage a IRC channel on the knowledge
07:46 - that again there that is still somewhere
07:48 - deep in my brain that still helps me to
07:50 - this day remember that knowledge doesn't
07:52 - really get replaced it just gets built
07:54 - more and more on top of each other one
07:56 - of the things that's worth noting here
07:57 - is that it's also easier to go from
08:00 - using a graphics library or something
08:03 - like that to using an engine rather than
08:05 - the other way around uh is it though
08:07 - because again the whole thing it's all
08:09 - everything is on layer of abstraction so
08:11 - is it easier to go from the union layer
08:13 - of abstraction to let's say the opengl
08:15 - layer of abstraction is it is to go
08:17 - through that one or the other way around
08:18 - I would say either one is going to
08:20 - require learning whenever you switch to
08:22 - almost there's only some time you have
08:24 - to spend in order to learn those Tunes I
08:26 - don't see that as either a positive or
08:28 - negative that's just what happens
08:29 - whenever you switch tools an
08:30 - overwhelming majority of people who get
08:32 - into game development are not able to
08:33 - turn it into a sustainable career
08:35 - learning game div without engines gives
08:37 - you a significantly more transferable
08:38 - skills that that can prepare you for
08:40 - working in the computer science Industry
08:42 - again I disagree with that I mean
08:44 - c-sharp is just C sharp if you learn the
08:46 - language doesn't matter if you don't
08:47 - learn it making games or making business
08:49 - apps or websites if you learn the
08:51 - language then you learn the language
08:52 - it's not like if I suddenly try to
08:54 - making a website with ASP I would have
08:57 - no idea what to do I would obviously
08:58 - have to learn the tools in order to
09:00 - actually learn how to make websites but
09:01 - the language itself from the knowledge
09:03 - that I've gained that would still be
09:04 - very well transferable there's nothing
09:06 - magic about making business apps the
09:08 - language is the same so if you know
09:09 - about classes if you know about
09:11 - programming patterns how to write good
09:13 - clean code all of those skills are
09:14 - transferable regardless if you're making
09:16 - games business apps anything one example
09:18 - of that is how a while ago I was
09:19 - researching cloud and for that since I
09:21 - was using Azure I use c-sharp and again
09:24 - all the knowledge that I've learned in
09:25 - unity writing C sharp for games all that
09:27 - knowledge was directly applicable to
09:28 - making some back-end c-sharp code not
09:31 - only are the working conditions better
09:32 - than the Game Dev industry but the pay
09:34 - is better as well yeah that is
09:36 - definitely something I mean that's one
09:38 - of the negatives of The Game Dev
09:40 - industry basically you should only
09:41 - become a game developer if you
09:42 - absolutely love it if you absolutely
09:44 - want to make games whereas if you're
09:47 - going with simply making money then
09:48 - definitely do not go into the game
09:49 - industry go into a regular boring Bank
09:52 - Job do some Bank software and you won't
09:55 - earn a lot more money but at the same
09:57 - time I would say it's going to be a lot
09:59 - less fun so personally I love making
10:01 - games I'm definitely going to continue
10:02 - regardless of the money
10:04 - although at the same time there is no
10:05 - reason why you can't do both
10:07 - you can definitely get a regular
10:09 - well-paying software development job and
10:11 - then on the weekends on your time off
10:13 - just make some indie games just for fun
10:14 - so you can definitely combine both it is
10:16 - a lot of work but if you really like
10:18 - making games and you want to have a
10:19 - comfortable life then that is one valid
10:21 - option personally my seven years of
10:23 - experience with python that I got from
10:25 - using a graphics Library over an engine
10:28 - has landed me a job and I regularly get
10:30 - smaller freelance jobs that pay very
10:33 - well that's great that's awesome but
10:34 - once again that has nothing to do with
10:36 - choosing an engine versus not choosing
10:38 - an engine if you don't learn unity and
10:39 - essentially you'll learn C sharp there
10:41 - are many freelance c-sharp jobs
10:42 - available so that is an option
10:44 - regardless of choosing Engine versus no
10:46 - engine if you're interested in going
10:48 - with the no engine route at this point
10:50 - you've got a ton of options if you like
10:52 - python obviously there's Pi game which
10:54 - is what I use Pi game is good if you
10:55 - like pixel art and you don't have any
10:57 - interest in 3D stuff there's also Pi
10:59 - opengl if you want to get a bit lower
11:01 - level and get even better performance if
11:04 - you like Java there's llwjgl
11:07 - if you like Lua there's love2d if you
11:09 - like C plus plus there's oh that's
11:12 - interesting I didn't actually know there
11:13 - was a Lua based Game Dev Library that's
11:17 - interesting because Lua is more of a
11:18 - scripting language so I didn't know that
11:20 - but that is interesting Lua is really
11:22 - extremely versatile so that's awesome to
11:24 - know Python's also the most widely used
11:26 - language in the world after JavaScript
11:28 - according to the stack Overflow
11:29 - developer survey I'm pretty sure it has
11:31 - the widest variety of use cases as well
11:33 - it's used for web development Bots AI
11:35 - data science automation computer vision
11:37 - scraping and so much more yeah python is
11:40 - a great language with a lot of use case
11:42 - definitely true
11:43 - okay so that's an interesting video and
11:45 - there's actually apparently a sequel to
11:47 - it so let's see this one so I've
11:48 - officially learned why they always teach
11:51 - you to State your thesis at the end of
11:52 - an introduction in composition classes I
11:55 - figured I'd make this video to clear
11:56 - things up so I'll State my stance now so
11:59 - everyone half asleep can hear it I'm
12:01 - glad I personally as an individual did
12:03 - not use a game engine but the choice
12:05 - depends on the circumstance yeah again
12:08 - like I said a while ago if you want to
12:10 - make engines that's awesome make engines
12:11 - if you want to make games that's awesome
12:12 - make games there's no right or wrong
12:14 - answer here thankfully nowadays there's
12:16 - so much education so many tools you can
12:18 - really do anything you want to
12:20 - understand why I'm glad I didn't start
12:22 - Game Dev using engines it's important to
12:25 - understand my opinion on the choice
12:26 - itself ultimately the most important
12:28 - aspect of the decision of whether or not
12:31 - to use a game engine is your goal when
12:33 - making the games if your primary goal
12:36 - for game development is education and
12:38 - you're looking to get experience with
12:39 - problem solving and programming in
12:41 - general I'd highly recommend not using a
12:43 - game engine yep 100 agree if you want to
12:47 - learn just for fun you want to improve
12:49 - your programming skills and really deal
12:51 - with low level languages and low-level
12:53 - things then making your game engine is
12:55 - an excellent way to learn how to do all
12:56 - of that my reasoning is similar to why
12:59 - many high schools and universities like
13:02 - to teach Python and Pie game as opposed
13:04 - to having people learn programming
13:05 - through game engine oh is that a thing
13:07 - do colleges teach Python and biking
13:10 - that's interesting for me I went to
13:12 - college but I never really finished it
13:14 - so my experience was very strange and in
13:16 - high school for some reason my teacher
13:18 - taught us Pascal I have no idea why
13:21 - Pascal and why that language that's very
13:22 - strange but anyways also learn a little
13:24 - bit about c-sharp back in high school so
13:26 - that was interesting either way had no
13:28 - idea that Pi game was used in colleges
13:30 - but yeah python is an extremely
13:31 - versatile language so that does make
13:33 - sense game engines force you to interact
13:36 - with their abstractions when making
13:37 - games making games through these
13:39 - abstractions change the type of problems
13:41 - you deal with to be less like the types
13:44 - of problems you deal with in the
13:45 - majority of the rest of the software
13:47 - industry I can't say for a fact that I
13:50 - would not have the job I have now had I
13:53 - use game engines for game development
13:55 - yeah that part I sort of disagree with I
13:58 - mean I guess he did mention that his job
14:00 - he got because of python so yeah by that
14:02 - yeah by definition if he had no
14:05 - experience with python he might not have
14:06 - gotten that job but I'm certain that if
14:08 - he was looking for a job on some kind of
14:10 - c-sharp software some c-sharp Bank
14:12 - software I'm sure UNT experience would
14:15 - have helped or if he was working on
14:16 - embedded systems with C plus plus I'm
14:18 - sure unreal experience would have helped
14:20 - the entire argument about The Learning
14:22 - Experience aside though I'd like to
14:24 - mention a few other factors while still
14:27 - important I believe they're less
14:28 - important than the learning based
14:31 - argument first if you're looking to do
14:33 - 3D stuff it takes a special kind of
14:35 - person to want to do that without an
14:37 - engine I know a few people who do that
14:39 - but it's really not for most people
14:41 - yeah making 3D and low level stuff that
14:44 - is insanely complex sometimes people ask
14:46 - me in the comments what math do I need
14:48 - to become a game developer and my answer
14:50 - is usually you don't really need much
14:51 - you just need the basics if you know
14:53 - some basic trigonometry some basic
14:55 - Vector math if you know that then you
14:57 - know pretty much all the math required
14:58 - to make games but if you want to make
15:00 - low level stuff if you want to make low
15:03 - level Graphics then yeah that is going
15:04 - to require a ton of math a ton of
15:06 - matrixes Transformations all kinds of
15:09 - strange things
15:10 - personally I do not have the math skills
15:12 - to do things like those so yeah if you
15:14 - go that route be aware math is a huge
15:16 - requirement second going guys have an
15:18 - engine ultimately gives you more control
15:20 - which is great if you want to make your
15:22 - own framework for making a certain type
15:24 - of game I've personally benefited from
15:27 - this it's the main reason why I continue
15:29 - to make games without engines that is
15:31 - true I mean if you build your own engine
15:33 - you can make an engine that is perfect
15:35 - for exactly the type of game that you're
15:36 - making whereas engines like though Unity
15:39 - are unreal those are made to be general
15:41 - purpose engines those are made so that
15:43 - you can build literally any game using
15:44 - them naturally there are some benefits
15:46 - of making one tool that does just one
15:48 - job and does it extremely well one
15:50 - example of that is for example factorio
15:52 - that is an insanely complex game it is
15:55 - one that if they were trying to do that
15:56 - inside of an engine like in real or
15:58 - Unity if they did that they would
16:00 - require so many low level optimizations
16:02 - that would essentially become almost a
16:04 - custom engine which is why they went
16:06 - with a custom engine because they
16:07 - support a level of complacent like that
16:09 - would literally hundreds of thousands or
16:11 - millions of particles on screen to
16:13 - support that really needs a very
16:15 - specialized very custom thing although
16:17 - it is still possible to build games on
16:18 - this scale even using something like
16:20 - Unity one example is the game Dyson
16:22 - Sphere program which also has a massive
16:24 - scale and it is built with UNT I assume
16:26 - they've got a lot of custom multi-thread
16:28 - code to make it all work and recently
16:30 - Unity dots actually just hit 1.0 and
16:32 - with that you can build insanely
16:34 - performing things directly inside Unity
16:36 - finally for some people it's just
16:37 - straight up easier to not use a game
16:39 - engine some people find it easier to
16:41 - build complex systems from simple
16:42 - functionality rather than understanding
16:45 - and using other people's higher level
16:47 - functionality to build complex systems
16:49 - this one of those things where it's more
16:51 - like those people are lying to
16:52 - themselves outside you might say oh I'm
16:54 - much more productive working on my own
16:56 - thing if I fully understand the entire
16:58 - Tech stack I'm much more productive but
17:00 - usually what happens is you really just
17:01 - kind of caught up on building all kinds
17:03 - of systems from scratch and you never
17:05 - actually make your game so that goes
17:07 - back to the same thing that I've
17:08 - mentioned many times in this video make
17:09 - games are made engines you can't really
17:11 - do both unless you're super special
17:12 - telling yourself oh no I'm much better
17:15 - off not making an engine because I fully
17:17 - understand everything and I'm very
17:18 - productive chances are if you're
17:20 - thinking like that you'll probably never
17:21 - actually finish the game in conclusion I
17:24 - believe that the most valid reason for
17:26 - not using a game engine is for the
17:28 - purpose of learning aside from that
17:29 - there are some less common cases where
17:31 - someone may find working on a lower
17:33 - level to be a better option for most
17:37 - people they're probably going to want to
17:39 - be using an engine but you really need
17:40 - to take a look at the pros and cons
17:42 - yourself okay that's the video and
17:45 - it's a really interesting discussion
17:47 - choosing not to use an engine that is
17:49 - definitely a valid option I mean if you
17:51 - want to go for education for just
17:52 - learning how everything works nowadays
17:54 - because again remember game engines are
17:56 - really magic it's all religious software
17:58 - its own religious code if you want to
18:00 - really understand how those engines work
18:01 - in the back end then building your own
18:03 - engine is definitely an excellent way to
18:05 - do it either building your own engine or
18:06 - just using a low level library but in
18:08 - the end I would say my opinion is choose
18:11 - do you want to make a game or do you
18:13 - want to make an engine unless you are a
18:14 - literal genius you probably cannot do
18:16 - both so make your choice and there's
18:18 - really no wrong answer if you want to
18:20 - learn how to make games with unity you
18:21 - can watch my 10 hour free course and
18:23 - then the final of multiplayer course
18:24 - this will cover a lot of the basics and
18:26 - lots of stuff that I'm actually using in
18:28 - my upcoming Sim game thank you Gardens
18:29 - alright so I hope you found this
18:31 - interesting thank you for watching and
18:33 - I'll see you next time
18:44 - thank you
18:47 - [Music]

Cleaned transcript:

hello and welcome I'm your code monkey here's an interesting video titled learning Game Dev and why I'm glad I didn't start with unity sounds interesting so let's watch and I'll give you my thoughts from my perspective as an indie Dev who has been using Unity professionally for over 10 years I'm currently using it in my upcoming Sim game dinky Gardens and I'm still very happy with my choice of engine seven years ago 12 year old me was very bored because my parents put a 30 minute limit on video games I figured that if I could make games myself the limit wouldn't apply that's a a fun loophole I guess if your parents limit how much gameplaying you can do then yeah I guess getting started into game development I guess that could be one good way to avoid that limit if your parents ask you are you playing your game you can say nope I'm not playing I'm actually learning how to make a game so I guess that's that's one way to work this is when I decided I would learn to code I picked python because it was the only language I knew of at the time python is excellent language that a lot of people recommend personally I'm not a huge fan I hate the fact that there are no semicolons I hate the fact that there are no curly braces so personally I do not like the syntax behind python but a lot of people say it is one of the easiest languages to learn it's not really very good for game development but when you're learning really only that matters is learning how to actually run the game logic learning about game design update loops and all kinds of things and you can really learn those principles in any language so if you already know python it's not really a bad thing to start actually making games with python install The Interpreter Googled some tutorials and within a few months of using python isards or in pi game which is a graphics library for python in the last few years I've tried messing around with engines like Unity or Godot a bit and I even participated in a game Jam using Godot when I was 12 I don't even think I knew what a game engine was to this day I'm still glad I chose python over something like Unity there are a bunch of ways to get into Game Dev and in my opinion there isn't really a onesizefitsall method ultimately the ideal route depends on what you're trying to do when deciding where to start there's one major choice that a lot of people seem to forget about it's a decision of whether or not to use a game engine this is one thing that you hear quite a lot should I even use a game engine or do it from scratch on this topic my advice is super simple it is simply ask yourself do you want to make a game or do you want to make a game engine generally unless you are a genius unless you are insanely productive you cannot do both at the same time if you want to learn how to make Dimensions if you want to learn how to make some level of level code and figure out how opengl or DirectX Works they can definitely be fun that is definitely one thing that I personally I would love to learn about at some point in the future whenever I can find some time but that requires a ton of work requires a ton of effort so in general unless you are a massive outline you need to ask yourself do you want to make games or do you want to make a game engine engines come with a bunch of builtin functionality that allows you to make complex games with minimal knowledge they also handle a lot of Messier stuff that goes into rendering which is a big deal if you want to do 3D stuff yeah that's the thing I mean if you want to build your game engine from scratch then all those tunes that you probably take for granted if you use any game engine those do not exist like if you want to render a pixel on screen in unity you just create a game object and add a mesh filter and mesh renderer or a Sprite render and boom there you go you've got something on screen but if you're working on building your actual game engine you've got to go into the opengl or the DirectX library in order to figure out okay how do I render a triangle on screen then you got to figure out okay so how do I make all kinds of complex math transformations in order to figure out okay so the camera is moving from here with a certain perspective how should that triangle look and so on it is insanely complex so that is why I say either make games or make game engine you got to choose one or the other this is usually done through some layers of abstraction and you interact with that abstraction rather than using the lower level methods that things like Graphics libraries use yep again I mean if you want to render mesh on screen in unity you just drag the mesh into your project files attach it to a game object to the mesh filter and that's it everything is rendering you don't have to worry about vertices perspective camera none of that just put it physically in front of the camera and boom everything is rendered so okay mentions you help a massive amount they abstract a way of a lot of things so you don't have to worry about them if you want to get into Game Dev and your only goal is to make games then an engine is probably the right choice for you however there is a bit more to this story than there seems if this was all there was to it then I wouldn't be happy with the route I took one of the major differences in using an engine or not using one comes down to what exactly you're learning while you do learn the programming language your engine uses assuming you're not using blueprints with unreal or something you're primarily learning to use the game in this one thing that I really disagree with I mean he's not necessarily wrong like if you're making games with unity you're learning about game objects and game objects that is a Unity specific concept there's no such thing as a game object and just C sharp in general but once you are learning very hyper specific things that are specific to that game engine whilst you aren't learning that you're also learning a language that is very generic personally I have made a ton of random applications random things with csharp and my knowledge from csharp comes from using Unity so yes you won't learn quite a lot of things that are hyper focused to that specific engine but you also learn so many other skills that are so generic so applicable to literally anything I'm pretty sure that with the knowledge that I have with knowledge that I've gained from making tons of games with identity I'm pretty sure I could go work for Microsoft and work on some random software related to csharp I'm pretty sure I could do that and do quite well on the other hand if you learn to make games without an engine by using a graphics library or something similar you're spending a lot more time making your own systems I mean that kind of becomes exactly the same problem instead of working with specific game objects you're working with specific visual representations of something like opengl or DirectX so unless you're writing an assembly you're always working on some kind of layer of abstraction there's so much to learn that an engine normally does for you such as the way you store and render a world or the way you handle entities when you go this route you'll get to know your language of choice even better than if you had chosen an engine yeah I agree with that I mean if you go the low level route that definitely forces you to be hyper familiar with the actual language that you're using but again goes back to the same question do you want to make games or do you want to deeply learn a language there's no wrong answer both are personally valid depending on what exactly you want to do and you'll get much more experience that will force you to develop your problem solving skills you'll be more likely to think about how something could be made rather than whether or not there is a library or some software that does what you want there's definitely something to be said about over relying on tools like for example the unity asset store is absolutely excellent you can find tools that won't do just about anything so there there is something to be said about overlying on those tunes and not actually trying to solve the problems yourself but again that is not really related to Engine versus no engine that is related to overusing or abusing tools and just trying to build something yourself skills you get are significantly more transferable than the skills you'd get while learning to use a game engine again while working with or without a game engine that is going to involve lots of problem solving you are going to gain a lot of those skills regardless of using a game engine or not so yes some things won't be specific to that game engine but a lot of it is really just knowledge I mean for me personally I've been writing code for 25 years I started writing code by writing mirror scripts that is a completely ancient language that is not used anywhere nowadays I don't even think America exists anymore but the knowledge that I gained while I was working on that that still serves me well to this day all the problem solving all the logic cells that I gained when I was making all kinds of things all kinds of trivia games making hangman games making simple applications in order to manage a IRC channel on the knowledge that again there that is still somewhere deep in my brain that still helps me to this day remember that knowledge doesn't really get replaced it just gets built more and more on top of each other one of the things that's worth noting here is that it's also easier to go from using a graphics library or something like that to using an engine rather than the other way around uh is it though because again the whole thing it's all everything is on layer of abstraction so is it easier to go from the union layer of abstraction to let's say the opengl layer of abstraction is it is to go through that one or the other way around I would say either one is going to require learning whenever you switch to almost there's only some time you have to spend in order to learn those Tunes I don't see that as either a positive or negative that's just what happens whenever you switch tools an overwhelming majority of people who get into game development are not able to turn it into a sustainable career learning game div without engines gives you a significantly more transferable skills that that can prepare you for working in the computer science Industry again I disagree with that I mean csharp is just C sharp if you learn the language doesn't matter if you don't learn it making games or making business apps or websites if you learn the language then you learn the language it's not like if I suddenly try to making a website with ASP I would have no idea what to do I would obviously have to learn the tools in order to actually learn how to make websites but the language itself from the knowledge that I've gained that would still be very well transferable there's nothing magic about making business apps the language is the same so if you know about classes if you know about programming patterns how to write good clean code all of those skills are transferable regardless if you're making games business apps anything one example of that is how a while ago I was researching cloud and for that since I was using Azure I use csharp and again all the knowledge that I've learned in unity writing C sharp for games all that knowledge was directly applicable to making some backend csharp code not only are the working conditions better than the Game Dev industry but the pay is better as well yeah that is definitely something I mean that's one of the negatives of The Game Dev industry basically you should only become a game developer if you absolutely love it if you absolutely want to make games whereas if you're going with simply making money then definitely do not go into the game industry go into a regular boring Bank Job do some Bank software and you won't earn a lot more money but at the same time I would say it's going to be a lot less fun so personally I love making games I'm definitely going to continue regardless of the money although at the same time there is no reason why you can't do both you can definitely get a regular wellpaying software development job and then on the weekends on your time off just make some indie games just for fun so you can definitely combine both it is a lot of work but if you really like making games and you want to have a comfortable life then that is one valid option personally my seven years of experience with python that I got from using a graphics Library over an engine has landed me a job and I regularly get smaller freelance jobs that pay very well that's great that's awesome but once again that has nothing to do with choosing an engine versus not choosing an engine if you don't learn unity and essentially you'll learn C sharp there are many freelance csharp jobs available so that is an option regardless of choosing Engine versus no engine if you're interested in going with the no engine route at this point you've got a ton of options if you like python obviously there's Pi game which is what I use Pi game is good if you like pixel art and you don't have any interest in 3D stuff there's also Pi opengl if you want to get a bit lower level and get even better performance if you like Java there's llwjgl if you like Lua there's love2d if you like C plus plus there's oh that's interesting I didn't actually know there was a Lua based Game Dev Library that's interesting because Lua is more of a scripting language so I didn't know that but that is interesting Lua is really extremely versatile so that's awesome to know Python's also the most widely used language in the world after JavaScript according to the stack Overflow developer survey I'm pretty sure it has the widest variety of use cases as well it's used for web development Bots AI data science automation computer vision scraping and so much more yeah python is a great language with a lot of use case definitely true okay so that's an interesting video and there's actually apparently a sequel to it so let's see this one so I've officially learned why they always teach you to State your thesis at the end of an introduction in composition classes I figured I'd make this video to clear things up so I'll State my stance now so everyone half asleep can hear it I'm glad I personally as an individual did not use a game engine but the choice depends on the circumstance yeah again like I said a while ago if you want to make engines that's awesome make engines if you want to make games that's awesome make games there's no right or wrong answer here thankfully nowadays there's so much education so many tools you can really do anything you want to understand why I'm glad I didn't start Game Dev using engines it's important to understand my opinion on the choice itself ultimately the most important aspect of the decision of whether or not to use a game engine is your goal when making the games if your primary goal for game development is education and you're looking to get experience with problem solving and programming in general I'd highly recommend not using a game engine yep 100 agree if you want to learn just for fun you want to improve your programming skills and really deal with low level languages and lowlevel things then making your game engine is an excellent way to learn how to do all of that my reasoning is similar to why many high schools and universities like to teach Python and Pie game as opposed to having people learn programming through game engine oh is that a thing do colleges teach Python and biking that's interesting for me I went to college but I never really finished it so my experience was very strange and in high school for some reason my teacher taught us Pascal I have no idea why Pascal and why that language that's very strange but anyways also learn a little bit about csharp back in high school so that was interesting either way had no idea that Pi game was used in colleges but yeah python is an extremely versatile language so that does make sense game engines force you to interact with their abstractions when making games making games through these abstractions change the type of problems you deal with to be less like the types of problems you deal with in the majority of the rest of the software industry I can't say for a fact that I would not have the job I have now had I use game engines for game development yeah that part I sort of disagree with I mean I guess he did mention that his job he got because of python so yeah by that yeah by definition if he had no experience with python he might not have gotten that job but I'm certain that if he was looking for a job on some kind of csharp software some csharp Bank software I'm sure UNT experience would have helped or if he was working on embedded systems with C plus plus I'm sure unreal experience would have helped the entire argument about The Learning Experience aside though I'd like to mention a few other factors while still important I believe they're less important than the learning based argument first if you're looking to do 3D stuff it takes a special kind of person to want to do that without an engine I know a few people who do that but it's really not for most people yeah making 3D and low level stuff that is insanely complex sometimes people ask me in the comments what math do I need to become a game developer and my answer is usually you don't really need much you just need the basics if you know some basic trigonometry some basic Vector math if you know that then you know pretty much all the math required to make games but if you want to make low level stuff if you want to make low level Graphics then yeah that is going to require a ton of math a ton of matrixes Transformations all kinds of strange things personally I do not have the math skills to do things like those so yeah if you go that route be aware math is a huge requirement second going guys have an engine ultimately gives you more control which is great if you want to make your own framework for making a certain type of game I've personally benefited from this it's the main reason why I continue to make games without engines that is true I mean if you build your own engine you can make an engine that is perfect for exactly the type of game that you're making whereas engines like though Unity are unreal those are made to be general purpose engines those are made so that you can build literally any game using them naturally there are some benefits of making one tool that does just one job and does it extremely well one example of that is for example factorio that is an insanely complex game it is one that if they were trying to do that inside of an engine like in real or Unity if they did that they would require so many low level optimizations that would essentially become almost a custom engine which is why they went with a custom engine because they support a level of complacent like that would literally hundreds of thousands or millions of particles on screen to support that really needs a very specialized very custom thing although it is still possible to build games on this scale even using something like Unity one example is the game Dyson Sphere program which also has a massive scale and it is built with UNT I assume they've got a lot of custom multithread code to make it all work and recently Unity dots actually just hit 1.0 and with that you can build insanely performing things directly inside Unity finally for some people it's just straight up easier to not use a game engine some people find it easier to build complex systems from simple functionality rather than understanding and using other people's higher level functionality to build complex systems this one of those things where it's more like those people are lying to themselves outside you might say oh I'm much more productive working on my own thing if I fully understand the entire Tech stack I'm much more productive but usually what happens is you really just kind of caught up on building all kinds of systems from scratch and you never actually make your game so that goes back to the same thing that I've mentioned many times in this video make games are made engines you can't really do both unless you're super special telling yourself oh no I'm much better off not making an engine because I fully understand everything and I'm very productive chances are if you're thinking like that you'll probably never actually finish the game in conclusion I believe that the most valid reason for not using a game engine is for the purpose of learning aside from that there are some less common cases where someone may find working on a lower level to be a better option for most people they're probably going to want to be using an engine but you really need to take a look at the pros and cons yourself okay that's the video and it's a really interesting discussion choosing not to use an engine that is definitely a valid option I mean if you want to go for education for just learning how everything works nowadays because again remember game engines are really magic it's all religious software its own religious code if you want to really understand how those engines work in the back end then building your own engine is definitely an excellent way to do it either building your own engine or just using a low level library but in the end I would say my opinion is choose do you want to make a game or do you want to make an engine unless you are a literal genius you probably cannot do both so make your choice and there's really no wrong answer if you want to learn how to make games with unity you can watch my 10 hour free course and then the final of multiplayer course this will cover a lot of the basics and lots of stuff that I'm actually using in my upcoming Sim game thank you Gardens alright so I hope you found this interesting thank you for watching and I'll see you next time thank you
