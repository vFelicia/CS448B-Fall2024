With timestamps:

00:00 - hello and welcome I'm your code monkey
00:02 - here is a quick correction slash
00:04 - clarification on something that I
00:06 - briefly said in my last video which a
00:07 - lot of people pointing out in the
00:09 - comments the video is titled be careful
00:11 - with scriptable objects and the goal
00:13 - with the video was to teach you that
00:14 - scriptable objects have one specific
00:16 - Quirk where they behave very differently
00:18 - in the editor and in the build in the
00:21 - editor they act like persistent state
00:23 - but in a build they do not
00:25 - so if you build your game depending on
00:27 - that persistent State behavior that you
00:28 - see in the editor then you would go
00:30 - crazy when you finally make a build and
00:32 - everything suddenly broke without you
00:33 - knowing why that was the main point that
00:35 - I was trying to get across but in the
00:37 - video I also said they should only be
00:39 - used for static read-only data which is
00:41 - not necessarily correct basically I just
00:43 - said it quickly without thinking too
00:44 - much about it because that wasn't the
00:46 - main purpose of the video and that is
00:47 - indeed how I personally use them but
00:49 - like many people pointing down in the
00:50 - comments that is not correct you can use
00:52 - them for more than just read only that
00:54 - containers you can use them for read
00:56 - write just not for precision that a lot
00:59 - of the comments mentioned an excellent
01:00 - tone call about scriptable objects I
01:03 - definitely encourage you to go watch it
01:04 - if you haven't seen it it's an excellent
01:06 - talk that showcases lots of interesting
01:08 - uses of scriptable objects other than
01:09 - just as read-only data containers it's
01:12 - an interesting architecture but as with
01:14 - everything nothing is perfect and there
01:16 - are always pros and cons depending on
01:18 - your skill set your team composition and
01:20 - size it might be a great architecture or
01:22 - maybe it might not be the main Pro is
01:24 - that it's very designer friendly if your
01:26 - attack types are scriptable objects then
01:28 - your designer doesn't need to bother a
01:30 - programmer to add another value to the
01:31 - enum if your designer wants to add more
01:34 - behavior when the player takes some
01:35 - damage they don't need to touch any code
01:37 - the cons are that you can end up with
01:40 - hundreds or thousands of individual
01:41 - Assets in your project if you use them
01:43 - for every single variable every single
01:44 - event it's also now really very suitable
01:46 - for games with a dynamic number of units
01:49 - like an RTS or Tycoon games which happen
01:51 - to be the time of games that I like to
01:52 - make also it's pretty hard to debug It's
01:55 - tricky to see the stack Trace in the
01:57 - tomoki specifically mentions how they
01:59 - need to build several layers built on
02:00 - top of the Demos in order to make this
02:02 - architecture easier to debug than there
02:04 - are potential performance issues you do
02:06 - all those layers you need to add on top
02:07 - of it to make it more design friendly
02:09 - and he also mentioned in the end the
02:11 - very issue that I pointed out in the
02:13 - last video how script bone objects are
02:14 - persistent in the editor which he does
02:16 - not want so he has another script which
02:19 - then goes through every single scribble
02:21 - object and resets their values so that
02:23 - the behavior in the editor matches the
02:24 - build so it is a valid architecture with
02:27 - some pros and cons and for me since
02:30 - primarily I'm a programmer and I work
02:32 - alone personally I use crypto model
02:34 - objects just like I said in that quick
02:35 - offend remark I use them solely for
02:38 - read-only data like storing a weapon
02:40 - sets or crafting recipe or some general
02:42 - game config however like many people
02:44 - mentioned it is a valid architecture so
02:46 - just because personally I do not like it
02:48 - does not mean you shouldn't like it if
02:50 - it makes sense to you then by all means
02:52 - use it as more than just read-only data
02:54 - containers many people pointed down how
02:56 - they use them for even handling and yep
02:58 - that works again personally I just use
03:01 - regular c-sharp events and hook them
03:03 - through code but yep script more objects
03:04 - are a valve alternative
03:06 - other people pointed out using them for
03:08 - very long containers and hooking UI
03:10 - elements it's a very designer friendly
03:12 - workflow
03:13 - someone else mentioned how you can call
03:15 - instantiate on a suitable object and
03:17 - indicate a user just like any other data
03:19 - in memory some people pointing out how
03:21 - it's very useful for sharing data
03:23 - between scenes and yep that's right
03:24 - again personally for me I just use
03:26 - static fields for that purpose but a
03:28 - scriptable object works as well although
03:31 - someone else did point out another Quirk
03:32 - which I had never even thought about
03:33 - since read write access only works on
03:36 - the options in memory that means that if
03:38 - the object is cleared from memory then
03:40 - it will lose that previous state so if
03:42 - you do use script objects for sharing
03:44 - data between scenes do make sure you
03:46 - keep a reference to it all the time for
03:48 - example something that I do in my games
03:50 - is I make a separate scene just a hand
03:52 - on loading and nothing else so it acts
03:54 - like an intermediary between any two
03:56 - scenes that I want to load if you did
03:58 - that then the object in memory would be
04:00 - destroyed because there would be no
04:01 - reference to it in the loading scene
04:03 - then some people also mentioned the
04:05 - asset scriptable object Pro which was
04:06 - apparently designed specifically to help
04:08 - solve that persistent problem and add
04:10 - some more features and also someone else
04:12 - posted a simple but very useful comment
04:15 - when building at your game definitely do
04:16 - some testing in your target platform as
04:18 - you're developing don't do it just once
04:21 - right before release so yes to further
04:24 - clarify what I was trying to say and
04:25 - what I should have said in that quick
04:27 - off and remark yes you can use script on
04:30 - objects for more than just read-only
04:31 - data you can use it for read write
04:33 - access that is a valid use case if you
04:36 - find it useful just be very very aware
04:38 - of that one Quirk where they persist in
04:40 - the editor but not in a build so if you
04:43 - do use them for read write access then
04:45 - either create a system to reset all the
04:47 - values just like Ryan mentioned in that
04:49 - talk in order to make the editor
04:50 - Behavior match the build Behavior or
04:53 - alternatively create a system to always
04:55 - save back the changes to a file to make
04:57 - the build Behavior match the editor
04:59 - Behavior also for some more discussion
05:01 - on this topic check out the Game Dev
05:02 - show that just came out they talk about
05:04 - it around the 17 minute Mark and around
05:06 - the one hour mark okay so thank you all
05:09 - for all your comments and let me take
05:11 - this time to point out that please yep
05:13 - do post a comment whenever you feel that
05:15 - I said something wrong or that there's
05:17 - more to something than whatever I said
05:19 - I have quite a lot of experience since
05:21 - I've been programming for over 20 years
05:23 - and using Unity for almost 10 but that
05:25 - absolutely does not mean that I know
05:27 - everything or that I'm immune to
05:28 - mistakes or oversimplifying things and
05:31 - this is also a great example of how when
05:33 - you follow some tutorial you should
05:34 - always read the comments if there is
05:36 - something that the instructor might have
05:38 - missed or something that was wrong or
05:39 - should have more clarification chances
05:41 - are people in the comments won't point
05:43 - it out alright hope that's useful check
05:45 - out these videos to learn some more
05:46 - thanks to these awesome patreon
05:48 - supporters for making these videos
05:50 - possible thank you for watching and I'll
05:52 - see you next time
05:55 - foreign

Cleaned transcript:

hello and welcome I'm your code monkey here is a quick correction slash clarification on something that I briefly said in my last video which a lot of people pointing out in the comments the video is titled be careful with scriptable objects and the goal with the video was to teach you that scriptable objects have one specific Quirk where they behave very differently in the editor and in the build in the editor they act like persistent state but in a build they do not so if you build your game depending on that persistent State behavior that you see in the editor then you would go crazy when you finally make a build and everything suddenly broke without you knowing why that was the main point that I was trying to get across but in the video I also said they should only be used for static readonly data which is not necessarily correct basically I just said it quickly without thinking too much about it because that wasn't the main purpose of the video and that is indeed how I personally use them but like many people pointing down in the comments that is not correct you can use them for more than just read only that containers you can use them for read write just not for precision that a lot of the comments mentioned an excellent tone call about scriptable objects I definitely encourage you to go watch it if you haven't seen it it's an excellent talk that showcases lots of interesting uses of scriptable objects other than just as readonly data containers it's an interesting architecture but as with everything nothing is perfect and there are always pros and cons depending on your skill set your team composition and size it might be a great architecture or maybe it might not be the main Pro is that it's very designer friendly if your attack types are scriptable objects then your designer doesn't need to bother a programmer to add another value to the enum if your designer wants to add more behavior when the player takes some damage they don't need to touch any code the cons are that you can end up with hundreds or thousands of individual Assets in your project if you use them for every single variable every single event it's also now really very suitable for games with a dynamic number of units like an RTS or Tycoon games which happen to be the time of games that I like to make also it's pretty hard to debug It's tricky to see the stack Trace in the tomoki specifically mentions how they need to build several layers built on top of the Demos in order to make this architecture easier to debug than there are potential performance issues you do all those layers you need to add on top of it to make it more design friendly and he also mentioned in the end the very issue that I pointed out in the last video how script bone objects are persistent in the editor which he does not want so he has another script which then goes through every single scribble object and resets their values so that the behavior in the editor matches the build so it is a valid architecture with some pros and cons and for me since primarily I'm a programmer and I work alone personally I use crypto model objects just like I said in that quick offend remark I use them solely for readonly data like storing a weapon sets or crafting recipe or some general game config however like many people mentioned it is a valid architecture so just because personally I do not like it does not mean you shouldn't like it if it makes sense to you then by all means use it as more than just readonly data containers many people pointed down how they use them for even handling and yep that works again personally I just use regular csharp events and hook them through code but yep script more objects are a valve alternative other people pointed out using them for very long containers and hooking UI elements it's a very designer friendly workflow someone else mentioned how you can call instantiate on a suitable object and indicate a user just like any other data in memory some people pointing out how it's very useful for sharing data between scenes and yep that's right again personally for me I just use static fields for that purpose but a scriptable object works as well although someone else did point out another Quirk which I had never even thought about since read write access only works on the options in memory that means that if the object is cleared from memory then it will lose that previous state so if you do use script objects for sharing data between scenes do make sure you keep a reference to it all the time for example something that I do in my games is I make a separate scene just a hand on loading and nothing else so it acts like an intermediary between any two scenes that I want to load if you did that then the object in memory would be destroyed because there would be no reference to it in the loading scene then some people also mentioned the asset scriptable object Pro which was apparently designed specifically to help solve that persistent problem and add some more features and also someone else posted a simple but very useful comment when building at your game definitely do some testing in your target platform as you're developing don't do it just once right before release so yes to further clarify what I was trying to say and what I should have said in that quick off and remark yes you can use script on objects for more than just readonly data you can use it for read write access that is a valid use case if you find it useful just be very very aware of that one Quirk where they persist in the editor but not in a build so if you do use them for read write access then either create a system to reset all the values just like Ryan mentioned in that talk in order to make the editor Behavior match the build Behavior or alternatively create a system to always save back the changes to a file to make the build Behavior match the editor Behavior also for some more discussion on this topic check out the Game Dev show that just came out they talk about it around the 17 minute Mark and around the one hour mark okay so thank you all for all your comments and let me take this time to point out that please yep do post a comment whenever you feel that I said something wrong or that there's more to something than whatever I said I have quite a lot of experience since I've been programming for over 20 years and using Unity for almost 10 but that absolutely does not mean that I know everything or that I'm immune to mistakes or oversimplifying things and this is also a great example of how when you follow some tutorial you should always read the comments if there is something that the instructor might have missed or something that was wrong or should have more clarification chances are people in the comments won't point it out alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time foreign
