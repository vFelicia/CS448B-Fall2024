With timestamps:

00:00 - hello and welcome I'm your code monkey
00:01 - in this video we're going to make a
00:02 - simple character move around the map
00:04 - let's begin
00:08 - okay so this is my scene I have a
00:10 - character playing a default idle
00:12 - animation in the code here I have a base
00:15 - character class it exposes some
00:17 - functions to play the animations that
00:18 - we're going to need so in this case we
00:20 - can play the whomping animation and the
00:22 - iodine animation both these functions
00:24 - take a vector for the animation
00:26 - direction this base class essentially is
00:28 - the connection between the logic and the
00:30 - visuals we always want to write code
00:32 - that is decoupled from other systems so
00:35 - the movement logic when we use these
00:36 - functions but it doesn't matter how they
00:37 - are implemented we could switch to a
00:39 - different animation system and as long
00:41 - as these functions do the same thing
00:43 - then everything would work just the same
00:44 - so with that let's start by making our
00:47 - character script so in here let's make a
00:49 - new c-sharp script and we're going to
00:51 - call this the player character going to
00:54 - place a script on the player character
00:56 - game object which as you see already has
00:58 - the base as another component so let's
01:00 - open it so in here the first thing we're
01:02 - going to do is do a private void awake
01:05 - and on our awake what's grab a reference
01:08 - to the base class that is on the same
01:10 - game object so in here make a private
01:12 - for the player character base and call
01:15 - it player character base and we're going
01:20 - to grab this from the game object get
01:22 - component of type player character base
01:24 - okay so we can use this reference to
01:27 - access all of our animations so now
01:30 - let's do some movement on our private
01:33 - void update we're going to test for some
01:35 - input now there are many ways to test
01:37 - for input including getting it from a
01:39 - gamepad or joystick but for this video
01:41 - let's keep things as simple as possible
01:43 - so we're simply going to test for the
01:45 - keyboard so in here do an if input get
01:48 - key of key code EE we're going to use W
01:52 - a s and D as our movement keys and here
01:55 - we are using get key instead of get key
01:57 - down because we want this to be true
01:58 - every frame where the key is pressed so
02:01 - as long as the W is pressed we want this
02:03 - code to run so in here in order to do
02:06 - some simple movement we just do a
02:07 - transform that position and add to that
02:10 - position a new vector3
02:12 - and since this is EE we want them to
02:15 - move up so on the X given 0 and on the y
02:18 - one to move in vertically going up then
02:22 - we multiply this by a speed variable so
02:24 - in here to find a float for our speed
02:26 - and let's give it at 40m just for
02:29 - testing and afterwards let's also
02:31 - multiply by time dot delta time okay so
02:34 - if the W key is pressed down on every
02:37 - frame we are going to modify the
02:39 - transform position and we're going to
02:40 - increase it by a factor moving upwards
02:43 - multiplied by a speed variable and then
02:46 - multiplied by time.deltatime this
02:48 - variable contains the number of seconds
02:50 - since the very last frame so if your
02:52 - game is running at one frame per second
02:54 - and this will return one and if your
02:57 - game is running at 30 frames per second
02:58 - then this would be zero point zero three
03:00 - three so essentially by multiplying it
03:02 - by our Delta time we can make our
03:04 - movement independent of our frame rate
03:06 - so using this our character should move
03:09 - up four units every second so let's test
03:12 - here's my character and if I press W yep
03:15 - there you go he's moving up at a
03:17 - constant speed okay so that's the basic
03:19 - of our movement now let's apply to all
03:21 - of our other directions so back in our
03:23 - code first we want to check for the
03:25 - other keys but we only want to modify
03:28 - the transform position once in order to
03:29 - keep our code nice and clean so let's
03:32 - copy this from here and place it at the
03:34 - end of all the keys and in here and
03:36 - let's define some floats for the move X
03:39 - and a float for the move Y so these are
03:42 - the variables that we're going to use to
03:44 - see where we are moving so in the case
03:46 - of W we're going to set the move Y to be
03:48 - one F so we're going to move upwards so
03:51 - let's copy to use all the other keys so
03:53 - we got W get the SD a and B D so on W
03:58 - move up on the Y is you move down on the
04:04 - a you move to the left so minus one on
04:07 - the move X and I'm D we set the move X
04:09 - to be plus 1 and then here with a fine a
04:12 - vector3 for our movement direction which
04:15 - will be a new vector3 using our move X
04:17 - and our move Y then that's what we're
04:20 - going to use in order to move so again
04:24 - we're adding to the position our move
04:25 - Direction multiplied by our speed
04:27 - multiplied by our Delta time so it's S&C
04:30 - if our character cannot move
04:31 - in every direction okay here's the
04:33 - character and move right move left move
04:35 - up and move down and yep our character
04:38 - is now currently moving in every
04:39 - direction now there's actually a hidden
04:42 - issue in here which is if we move
04:44 - diagonally we are moving faster than if
04:46 - we move in just one direction so here
04:48 - I'm going to the right and if I also go
04:50 - up you can see the character is moving
04:52 - quite a bit faster than just in one
04:54 - direction this is not our intended
04:56 - behavior so let's look at what's causing
04:58 - it so we're here in our code we are
05:00 - setting move X and move Y floats and in
05:02 - creating a direction with it however if
05:05 - we have both the X and the y being set
05:08 - then this vector won't have a magnitude
05:11 - of more than one this is what caused him
05:13 - to move faster when he's moving diagonal
05:15 - in order to fix that all we need to do
05:17 - is normalize this vector to make sure
05:19 - the magnitude is always 1 so if we are
05:22 - moving both on the Y and on the X then
05:24 - both of them will be set to 1 so this
05:26 - vector would have 1 1 but then since we
05:30 - are normalizing it we are setting the
05:31 - magnitude to just 1 so essentially we
05:33 - get a vector of 0.5 0.5 which is
05:36 - correctly moving in that direction so
05:38 - let's test and our speech now be correct
05:41 - and yep move the right move up move
05:44 - diagonally and yup the speed is now
05:45 - correct going in every single direction
05:47 - all right so now that we have basic
05:50 - movement working let's apply some
05:51 - animations make your action work correct
05:53 - so back in the code here the first thing
05:56 - we're going to do is put this code into
05:58 - its own separate function to keep our
05:59 - code nice and clean so in here make a
06:01 - private void and call it handle movement
06:04 - and we're essentially going to copy all
06:07 - this and there and we're going to call
06:09 - this function on our update ok the code
06:11 - is much more clean right now so now we
06:13 - have two types of animations we have a
06:16 - walking animation and an idle animation
06:18 - so here let's make a boolean to identify
06:21 - if the character is idle so we do a bowl
06:24 - is I don't now where I don't if we have
06:27 - no movement which essentially means if
06:29 - the move X equals zero and the move Y
06:34 - also equals zero if both of them are at
06:37 - zero then the idle is true so then we
06:40 - simply do one if if is either
06:42 - is true then we want to play the idle
06:45 - animation so again we use our base
06:47 - character so player character base we go
06:51 - in there and play the idle animation it
06:53 - needs a vector so for now give it vector
06:56 - 3.0 and if we are not idle then we are
07:00 - actually moving so let's do player
07:02 - character base dot play the walking
07:04 - animation and we're going to play
07:06 - towards our move direction so here like
07:10 - that okay so let's test and see if he's
07:12 - correctly either or walking okay there
07:15 - he is currently I don't know if I press
07:17 - down yep there you go he's playing the
07:19 - animation and right and diagonally and
07:21 - going up and so on and yep now if I stop
07:24 - him yep he stopped goes back to I don't
07:26 - want animation I don't walk animation
07:29 - I don't okay great so the logic seems to
07:31 - be working however we have one tiny
07:33 - issue which is our idle direction in
07:35 - here if I move up and then I stop yeah
07:38 - we can see that he chose the idle
07:40 - animation to be on looking down when it
07:42 - should really be looking up so if I'm
07:44 - moving to the right I wanted to stop and
07:46 - look to the right move up stop and he
07:48 - should be looking up so let's see the
07:50 - code so the issue is in here when we are
07:52 - playing the outline mission we are using
07:54 - a vector3 of zero that is because since
07:57 - both of these are zero that's the only
07:58 - factor we have so what we need is to
08:01 - store the in last direction that we
08:02 - moved and use that as our item direction
08:05 - so let's go all the way up here and make
08:07 - a private vector3 for the last move
08:11 - direction and down here when we actually
08:15 - move let's set the in last move
08:17 - direction to be this moved here and then
08:20 - we can use the last move here as our
08:22 - animation direction for our eyeball so
08:24 - when every move we update this variable
08:26 - when we stop moving we use it as our
08:28 - eyeball direction so let's test okay
08:31 - there he is I can walk around and if I
08:34 - move up and I stop yep there we go he's
08:37 - now playing the idle animation walking
08:38 - up which was the last movement direction
08:40 - do the same thing to the right and now
08:42 - he's idle idle and so on and so forth
08:44 - and yep everything is correct moving in
08:46 - every direction and playing the correct
08:48 - idle animations so there you have it we
08:50 - set up some very simple character
08:52 - movement our character can move around
08:54 - and play
08:55 - walking or the idle animations as always
08:57 - you can download the project files and
08:58 - utilities from unity called monkey comm
09:00 - if you have any questions post them in
09:02 - the comments along with my best answer
09:03 - them subscribe for more videos and I'll
09:05 - see you next time

Cleaned transcript:

hello and welcome I'm your code monkey in this video we're going to make a simple character move around the map let's begin okay so this is my scene I have a character playing a default idle animation in the code here I have a base character class it exposes some functions to play the animations that we're going to need so in this case we can play the whomping animation and the iodine animation both these functions take a vector for the animation direction this base class essentially is the connection between the logic and the visuals we always want to write code that is decoupled from other systems so the movement logic when we use these functions but it doesn't matter how they are implemented we could switch to a different animation system and as long as these functions do the same thing then everything would work just the same so with that let's start by making our character script so in here let's make a new csharp script and we're going to call this the player character going to place a script on the player character game object which as you see already has the base as another component so let's open it so in here the first thing we're going to do is do a private void awake and on our awake what's grab a reference to the base class that is on the same game object so in here make a private for the player character base and call it player character base and we're going to grab this from the game object get component of type player character base okay so we can use this reference to access all of our animations so now let's do some movement on our private void update we're going to test for some input now there are many ways to test for input including getting it from a gamepad or joystick but for this video let's keep things as simple as possible so we're simply going to test for the keyboard so in here do an if input get key of key code EE we're going to use W a s and D as our movement keys and here we are using get key instead of get key down because we want this to be true every frame where the key is pressed so as long as the W is pressed we want this code to run so in here in order to do some simple movement we just do a transform that position and add to that position a new vector3 and since this is EE we want them to move up so on the X given 0 and on the y one to move in vertically going up then we multiply this by a speed variable so in here to find a float for our speed and let's give it at 40m just for testing and afterwards let's also multiply by time dot delta time okay so if the W key is pressed down on every frame we are going to modify the transform position and we're going to increase it by a factor moving upwards multiplied by a speed variable and then multiplied by time.deltatime this variable contains the number of seconds since the very last frame so if your game is running at one frame per second and this will return one and if your game is running at 30 frames per second then this would be zero point zero three three so essentially by multiplying it by our Delta time we can make our movement independent of our frame rate so using this our character should move up four units every second so let's test here's my character and if I press W yep there you go he's moving up at a constant speed okay so that's the basic of our movement now let's apply to all of our other directions so back in our code first we want to check for the other keys but we only want to modify the transform position once in order to keep our code nice and clean so let's copy this from here and place it at the end of all the keys and in here and let's define some floats for the move X and a float for the move Y so these are the variables that we're going to use to see where we are moving so in the case of W we're going to set the move Y to be one F so we're going to move upwards so let's copy to use all the other keys so we got W get the SD a and B D so on W move up on the Y is you move down on the a you move to the left so minus one on the move X and I'm D we set the move X to be plus 1 and then here with a fine a vector3 for our movement direction which will be a new vector3 using our move X and our move Y then that's what we're going to use in order to move so again we're adding to the position our move Direction multiplied by our speed multiplied by our Delta time so it's S&C if our character cannot move in every direction okay here's the character and move right move left move up and move down and yep our character is now currently moving in every direction now there's actually a hidden issue in here which is if we move diagonally we are moving faster than if we move in just one direction so here I'm going to the right and if I also go up you can see the character is moving quite a bit faster than just in one direction this is not our intended behavior so let's look at what's causing it so we're here in our code we are setting move X and move Y floats and in creating a direction with it however if we have both the X and the y being set then this vector won't have a magnitude of more than one this is what caused him to move faster when he's moving diagonal in order to fix that all we need to do is normalize this vector to make sure the magnitude is always 1 so if we are moving both on the Y and on the X then both of them will be set to 1 so this vector would have 1 1 but then since we are normalizing it we are setting the magnitude to just 1 so essentially we get a vector of 0.5 0.5 which is correctly moving in that direction so let's test and our speech now be correct and yep move the right move up move diagonally and yup the speed is now correct going in every single direction all right so now that we have basic movement working let's apply some animations make your action work correct so back in the code here the first thing we're going to do is put this code into its own separate function to keep our code nice and clean so in here make a private void and call it handle movement and we're essentially going to copy all this and there and we're going to call this function on our update ok the code is much more clean right now so now we have two types of animations we have a walking animation and an idle animation so here let's make a boolean to identify if the character is idle so we do a bowl is I don't now where I don't if we have no movement which essentially means if the move X equals zero and the move Y also equals zero if both of them are at zero then the idle is true so then we simply do one if if is either is true then we want to play the idle animation so again we use our base character so player character base we go in there and play the idle animation it needs a vector so for now give it vector 3.0 and if we are not idle then we are actually moving so let's do player character base dot play the walking animation and we're going to play towards our move direction so here like that okay so let's test and see if he's correctly either or walking okay there he is currently I don't know if I press down yep there you go he's playing the animation and right and diagonally and going up and so on and yep now if I stop him yep he stopped goes back to I don't want animation I don't walk animation I don't okay great so the logic seems to be working however we have one tiny issue which is our idle direction in here if I move up and then I stop yeah we can see that he chose the idle animation to be on looking down when it should really be looking up so if I'm moving to the right I wanted to stop and look to the right move up stop and he should be looking up so let's see the code so the issue is in here when we are playing the outline mission we are using a vector3 of zero that is because since both of these are zero that's the only factor we have so what we need is to store the in last direction that we moved and use that as our item direction so let's go all the way up here and make a private vector3 for the last move direction and down here when we actually move let's set the in last move direction to be this moved here and then we can use the last move here as our animation direction for our eyeball so when every move we update this variable when we stop moving we use it as our eyeball direction so let's test okay there he is I can walk around and if I move up and I stop yep there we go he's now playing the idle animation walking up which was the last movement direction do the same thing to the right and now he's idle idle and so on and so forth and yep everything is correct moving in every direction and playing the correct idle animations so there you have it we set up some very simple character movement our character can move around and play walking or the idle animations as always you can download the project files and utilities from unity called monkey comm if you have any questions post them in the comments along with my best answer them subscribe for more videos and I'll see you next time
