With timestamps:

00:00 - hello and welcome i'm your code monkey
00:02 - and let's learn all about the awesome
00:03 - world of splines this is how you can set
00:06 - up multiple points in your world and
00:07 - easily calculate a nice smooth path
00:09 - between them
00:10 - so it's very useful for making things
00:12 - like roads terrain
00:13 - orbits or really just about anything
00:15 - where you need a nice smooth shape and
00:17 - also use it to move an object along that
00:19 - shape
00:19 - we're going to build a spline based on a
00:21 - bezier curve now you've probably
00:23 - already used bezier curves before even
00:25 - if you didn't know the actual name
00:27 - if you've ever used an image or
00:29 - animation program where you have curves
00:31 - and handles to modify the shape of those
00:33 - curves
00:33 - then you've likely already used bezier
00:35 - curves for example i've already covered
00:37 - another awesome tool previously the
00:39 - animation curves
00:40 - that's an awesome tool and one example
00:42 - of a spline bezier curve in action
00:45 - that one is a spline in a virtual graph
00:47 - and here we're going to build it in the
00:49 - actual world
00:50 - now first of all if you go on wikipedia
00:52 - you can see all the formulas behind it
00:54 - so if you're interested in the math
00:56 - behind it go ahead and check it out but
00:57 - that looks quite intimidating so here
00:59 - let's look at it as a more visual
01:01 - example
01:02 - in order to understand how to make a
01:03 - busier curve you first need to
01:04 - understand basic linear interpolation
01:07 - so let's make a script to try it out and
01:09 - visually see it in action
01:10 - here i am the editor and let's rightly
01:12 - create a new c sharp script
01:13 - let's name this just testing and let's
01:16 - make a game object
01:18 - and attach the script on there okay now
01:20 - let's open
01:21 - so here let's first look at some very
01:23 - basic linear interpolation
01:24 - and the way that we can do that is first
01:26 - of all a simple private void update and
01:28 - here we go into
01:29 - the vector3 class and then we have the
01:32 - alert function
01:33 - verb stands for linear interpolation so
01:35 - as you can see it takes two points a and
01:37 - b
01:37 - and then a t the t is for the
01:40 - interpolation factor
01:41 - so if the last argument if t is set to
01:43 - zero then we get a
01:45 - if t is set to one we get b and if we
01:47 - get a value in between zero and one then
01:49 - we get
01:49 - the position in between a and b so let's
01:52 - visualize this in action
01:54 - just a simple private float for the
01:56 - interpolate amount
01:58 - and here we constantly increase it by
02:00 - time dot delta time
02:02 - and let's actually make it a modular of
02:03 - one so that it loops back so
02:05 - this one
02:10 - so increase it by time dot of the time
02:11 - and then a modulo of one f
02:13 - so as it goes up it loops back into zero
02:16 - and then we're going to use this in our
02:17 - parameter here but we also need our two
02:19 - points
02:20 - so for that let's set up here serialize
02:22 - films private transform
02:24 - for the point a another one for the
02:26 - point b another one for the point a b
02:29 - and then here we're going to do alert
02:31 - between the point a and we grab the
02:33 - position
02:34 - then the point debris grab the position
02:37 - and modified by interpolate amount okay
02:40 - we do this and we place our point av
02:43 - that position on this one so we should
02:45 - be able to visualize this object being
02:47 - positioned in the interpolate amount
02:49 - between point a and point b
02:51 - and it will constantly be moving over
02:52 - time okay so let's just set up
02:54 - all these objects in the editor let's do
02:57 - the simplest thing possible so just a
02:59 - simple sprite let's name this the point
03:02 - a
03:10 - so this is point a then another one for
03:12 - the point b
03:16 - another one for the point a b so here
03:18 - just drag the references
03:20 - and now let's position them so let's put
03:22 - the point a around here then the point b
03:24 - let's put around here and then through
03:26 - code this one won't be moved and it will
03:28 - go from here all the way in there let's
03:30 - see
03:30 - and if there it is exam like that so
03:32 - this is what linear interpolation looks
03:34 - like we take two points then an
03:35 - interpolation factor
03:37 - and when it's zero we got it in here
03:38 - when it's one we have it in there
03:40 - and if we pass in any other value then
03:42 - it gets in in between
03:43 - and obviously this works no matter how
03:45 - you put it so if i move this one if
03:46 - there you go it always goes from that
03:48 - point on to that point
03:50 - okay so here we have basic linear
03:51 - interpolation now let's go up one level
03:54 - so let's add another point and another
03:56 - interpolation so in the editor let's add
03:58 - another point this will be our point c
04:00 - then let's set another one for the point
04:02 - b c
04:04 - and then here we're going to interpolate
04:06 - do pretty much the same thing
04:07 - so we're going to interpolate between
04:09 - point b and point c
04:10 - and move this one on there okay that's
04:12 - it let's test
04:14 - here just make another one for the point
04:15 - c put it down there so this is the point
04:17 - c and just duplicate this one this is
04:19 - the point b c
04:21 - and on testing here we just drag our
04:23 - references let's see
04:24 - and yep now we can see our logic in
04:26 - action so we've got this linear
04:27 - interpolation from a to b and this one
04:29 - from b to c
04:30 - okay so far so good and now here comes
04:32 - the fun part
04:34 - let's add another interpolate point and
04:36 - this one is going to interpolate
04:37 - between this movement and this movement
04:40 - so here
04:41 - let's make another one and for this one
04:43 - let's name it the point abbc
04:45 - and now down here we're going to do
04:47 - another linear interpolation
04:49 - for the point abvc except instead of
04:52 - using either of the original points
04:54 - we're going to use the ones composed by
04:56 - this linear interpolation so we take
04:57 - this one
04:58 - and this one and we interpolate those
05:00 - two so let's see what this looks like
05:02 - here make another one
05:07 - and yep there we have our logic so we
05:09 - have one linear interpolation right here
05:10 - from a to b
05:11 - another one from here from b to c and
05:13 - then we have the yellow one which is
05:15 - interpolating between these two
05:17 - interpolations so here we can already
05:18 - see a really nice smooth curve and
05:20 - obviously by modifying any of these
05:22 - since this is all made by math then
05:24 - everything is very versatile
05:26 - so what we have here is called quadratic
05:28 - interpolation
05:29 - and now in order to achieve our final
05:31 - result we just need to go up
05:32 - one more level so here let's add another
05:35 - point so
05:36 - this will be our point d and let's add
05:39 - another
05:39 - interpolate this one will go from c to d
05:42 - and then another one of these
05:44 - and this one will be the bc cd
05:48 - so i just set these ones up
05:55 - okay there it is we have the point cd
05:56 - going from c to d
05:58 - and the b c c d going from b c to c d
06:01 - and yep this is what we have here so we
06:03 - have one linear one linear one linear
06:05 - then one and two quadratic and now we
06:08 - just need to go one more level
06:10 - so here we add our final one so let's
06:12 - call it a b
06:13 - c d and the logic is exactly the same
06:15 - that we saw in here
06:16 - so we take the abcd and we're going to
06:18 - interpolate between this one
06:20 - and this one so here let's make another
06:23 - one for the abcd
06:26 - put it in a nice purple and let's see
06:29 - and if there it is looking at the purple
06:30 - we can see it in action
06:31 - so here we have a really nice mood curve
06:34 - so the object smoothly moves along the
06:36 - curve which is made up of all of our
06:37 - points
06:38 - and since this whole thing is being
06:39 - calculated using math that means it's
06:41 - adaptable to changes in runtime
06:43 - so as i take this one and i move it
06:45 - slightly down there you can see the
06:47 - purple one the curve of that one
06:49 - and i can take this one and put it
06:50 - somewhere in there and there you go
06:51 - something like this
06:52 - so what we have here is already one of
06:54 - those smooth splines that you see in
06:56 - those animation programs
06:58 - so essentially these two are our anchors
07:00 - and these two are handles
07:02 - so if i place this one and i move it all
07:04 - the way down here and this one put it up
07:05 - there
07:06 - and you have to look at the purple one
07:07 - going through this really nice really
07:09 - awesome smooth curve
07:10 - so by modifying the anchors we can
07:12 - easily modify the shape of that curve
07:13 - that goes in there and then right in
07:15 - there all right so that's all the math
07:17 - behind it now let's just clean up the
07:18 - code a bit to make it more
07:19 - understandable
07:20 - so here let's refactor this let's make
07:22 - two nice functions
07:36 - all right so we have our two really nice
07:37 - functions for the quadratic linear
07:39 - interpolation and the cubic linear
07:41 - interpolation
07:41 - so this one takes an abc this one takes
07:43 - the a b c and d
07:45 - so here we can now clean up all this
07:46 - code and let's position only the final
07:48 - one
07:49 - so let's comment all this out and we're
07:51 - going to take this one and set the
07:52 - position
07:53 - use our nice cubicle function pass in
07:56 - the point a
07:57 - and so on
08:02 - all right that's it very simple just
08:04 - using a function so let's see what this
08:06 - looks like
08:07 - and if there it is we have our really
08:08 - nice really smooth curve
08:10 - so we've got all of our points and as we
08:12 - move them around yeah we can make some
08:13 - really nice shapes so there you go just
08:15 - a nice little smooth curve going from
08:17 - here to here and it
08:18 - looks really nice really smooth so what
08:21 - we have here is essentially
08:22 - a single segment so we have four points
08:24 - to calculate one segment
08:26 - and now in order to make some long
08:27 - useful splines all we need to do is
08:29 - really just add more segments
08:31 - by the way if you find the video helpful
08:33 - please hit the like button and consider
08:34 - subscribing
08:35 - it really helps out the channel now over
08:37 - here i have a proper spine class that i
08:39 - prepared previously
08:40 - it simply builds upon what we just saw
08:42 - specifically it has a list of all of the
08:45 - anchors
08:46 - and each anchor is just a simple object
08:48 - that contains a position and the handle
08:50 - for the left and right side
08:51 - then it also has a simple editor script
08:54 - so with this i can position each handle
08:56 - and each anchor wherever i want so very
08:58 - easy to use
09:00 - and then i've got a spline follower
09:01 - script which takes a reference to the
09:03 - spline
09:04 - and simply grabs the position from it so
09:07 - here it is in
09:07 - action the object following along with
09:09 - the spline and on the spine i also have
09:11 - the option to make it a closed loop
09:12 - so if i do yep it connects the last
09:14 - anchor to the very first one and here we
09:16 - have something really nice really close
09:18 - also in this more advanced version i
09:20 - also have some rotation
09:22 - the way that's handled is the spline
09:24 - also has a list of points
09:25 - so these are dynamically generated at
09:28 - runtime
09:29 - each point simply contains its position
09:31 - a forward and a normal vector
09:33 - so using that i can make my nice spline
09:35 - and then enable a car object
09:37 - and if there you go the car correctly
09:39 - interpolates along the spline
09:40 - and it also has the correct rotation and
09:43 - the last thing that i have is a script
09:44 - to make a spline mesh
09:46 - so once again it takes the underlying
09:47 - spline and then what it does
09:49 - is simply dynamically creates the mesh
09:51 - by going through every single point on
09:52 - the spline
09:53 - so for every point it adds two vertices
09:55 - and connects them to the previous two
09:57 - so that way it creates a mesh alongside
09:58 - of the length and the shape of the
10:00 - spline
10:01 - so if you combine that with a very
10:02 - simple road sprite and yep here is the
10:04 - outcome
10:05 - so we can see over here instead of
10:07 - shaded put it on wireframe and we can
10:08 - see how this whole mesh is constructed
10:10 - so for every single point it adds
10:12 - another two vertices and connects them
10:14 - to the previous one and goes all the way
10:16 - over
10:16 - so just take this then enable the car on
10:18 - top and here we have
10:20 - a really nice scene so we've got a road
10:22 - mesh and we've got the car driving along
10:23 - the road and yep it goes along perfectly
10:26 - and of course this whole thing is being
10:27 - driven by math so i can just modify any
10:30 - of these points
10:31 - and it all connects perfectly so i can
10:33 - modify the shape
10:34 - and whatever i give it it perfectly
10:36 - follows along the path
10:38 - and yep just like that alright so here
10:40 - you can see how splines are an awesome
10:42 - tool you have at your disposal whenever
10:44 - you need to set up some really nice mood
10:45 - curves
10:46 - as always you can download the project
10:48 - files and utilities from
10:49 - unitycodemuck.com
10:50 - this video is made possible thanks to
10:52 - these awesome supporters go to
10:53 - patreon.com
10:55 - unitycodemonkey to get some perks and
10:57 - help keep the videos free for everyone
10:59 - if you found this video helpful consider
11:00 - liking and subscribing post any
11:02 - questions i have in comments and i'll
11:03 - see you next time

Cleaned transcript:

hello and welcome i'm your code monkey and let's learn all about the awesome world of splines this is how you can set up multiple points in your world and easily calculate a nice smooth path between them so it's very useful for making things like roads terrain orbits or really just about anything where you need a nice smooth shape and also use it to move an object along that shape we're going to build a spline based on a bezier curve now you've probably already used bezier curves before even if you didn't know the actual name if you've ever used an image or animation program where you have curves and handles to modify the shape of those curves then you've likely already used bezier curves for example i've already covered another awesome tool previously the animation curves that's an awesome tool and one example of a spline bezier curve in action that one is a spline in a virtual graph and here we're going to build it in the actual world now first of all if you go on wikipedia you can see all the formulas behind it so if you're interested in the math behind it go ahead and check it out but that looks quite intimidating so here let's look at it as a more visual example in order to understand how to make a busier curve you first need to understand basic linear interpolation so let's make a script to try it out and visually see it in action here i am the editor and let's rightly create a new c sharp script let's name this just testing and let's make a game object and attach the script on there okay now let's open so here let's first look at some very basic linear interpolation and the way that we can do that is first of all a simple private void update and here we go into the vector3 class and then we have the alert function verb stands for linear interpolation so as you can see it takes two points a and b and then a t the t is for the interpolation factor so if the last argument if t is set to zero then we get a if t is set to one we get b and if we get a value in between zero and one then we get the position in between a and b so let's visualize this in action just a simple private float for the interpolate amount and here we constantly increase it by time dot delta time and let's actually make it a modular of one so that it loops back so this one so increase it by time dot of the time and then a modulo of one f so as it goes up it loops back into zero and then we're going to use this in our parameter here but we also need our two points so for that let's set up here serialize films private transform for the point a another one for the point b another one for the point a b and then here we're going to do alert between the point a and we grab the position then the point debris grab the position and modified by interpolate amount okay we do this and we place our point av that position on this one so we should be able to visualize this object being positioned in the interpolate amount between point a and point b and it will constantly be moving over time okay so let's just set up all these objects in the editor let's do the simplest thing possible so just a simple sprite let's name this the point a so this is point a then another one for the point b another one for the point a b so here just drag the references and now let's position them so let's put the point a around here then the point b let's put around here and then through code this one won't be moved and it will go from here all the way in there let's see and if there it is exam like that so this is what linear interpolation looks like we take two points then an interpolation factor and when it's zero we got it in here when it's one we have it in there and if we pass in any other value then it gets in in between and obviously this works no matter how you put it so if i move this one if there you go it always goes from that point on to that point okay so here we have basic linear interpolation now let's go up one level so let's add another point and another interpolation so in the editor let's add another point this will be our point c then let's set another one for the point b c and then here we're going to interpolate do pretty much the same thing so we're going to interpolate between point b and point c and move this one on there okay that's it let's test here just make another one for the point c put it down there so this is the point c and just duplicate this one this is the point b c and on testing here we just drag our references let's see and yep now we can see our logic in action so we've got this linear interpolation from a to b and this one from b to c okay so far so good and now here comes the fun part let's add another interpolate point and this one is going to interpolate between this movement and this movement so here let's make another one and for this one let's name it the point abbc and now down here we're going to do another linear interpolation for the point abvc except instead of using either of the original points we're going to use the ones composed by this linear interpolation so we take this one and this one and we interpolate those two so let's see what this looks like here make another one and yep there we have our logic so we have one linear interpolation right here from a to b another one from here from b to c and then we have the yellow one which is interpolating between these two interpolations so here we can already see a really nice smooth curve and obviously by modifying any of these since this is all made by math then everything is very versatile so what we have here is called quadratic interpolation and now in order to achieve our final result we just need to go up one more level so here let's add another point so this will be our point d and let's add another interpolate this one will go from c to d and then another one of these and this one will be the bc cd so i just set these ones up okay there it is we have the point cd going from c to d and the b c c d going from b c to c d and yep this is what we have here so we have one linear one linear one linear then one and two quadratic and now we just need to go one more level so here we add our final one so let's call it a b c d and the logic is exactly the same that we saw in here so we take the abcd and we're going to interpolate between this one and this one so here let's make another one for the abcd put it in a nice purple and let's see and if there it is looking at the purple we can see it in action so here we have a really nice mood curve so the object smoothly moves along the curve which is made up of all of our points and since this whole thing is being calculated using math that means it's adaptable to changes in runtime so as i take this one and i move it slightly down there you can see the purple one the curve of that one and i can take this one and put it somewhere in there and there you go something like this so what we have here is already one of those smooth splines that you see in those animation programs so essentially these two are our anchors and these two are handles so if i place this one and i move it all the way down here and this one put it up there and you have to look at the purple one going through this really nice really awesome smooth curve so by modifying the anchors we can easily modify the shape of that curve that goes in there and then right in there all right so that's all the math behind it now let's just clean up the code a bit to make it more understandable so here let's refactor this let's make two nice functions all right so we have our two really nice functions for the quadratic linear interpolation and the cubic linear interpolation so this one takes an abc this one takes the a b c and d so here we can now clean up all this code and let's position only the final one so let's comment all this out and we're going to take this one and set the position use our nice cubicle function pass in the point a and so on all right that's it very simple just using a function so let's see what this looks like and if there it is we have our really nice really smooth curve so we've got all of our points and as we move them around yeah we can make some really nice shapes so there you go just a nice little smooth curve going from here to here and it looks really nice really smooth so what we have here is essentially a single segment so we have four points to calculate one segment and now in order to make some long useful splines all we need to do is really just add more segments by the way if you find the video helpful please hit the like button and consider subscribing it really helps out the channel now over here i have a proper spine class that i prepared previously it simply builds upon what we just saw specifically it has a list of all of the anchors and each anchor is just a simple object that contains a position and the handle for the left and right side then it also has a simple editor script so with this i can position each handle and each anchor wherever i want so very easy to use and then i've got a spline follower script which takes a reference to the spline and simply grabs the position from it so here it is in action the object following along with the spline and on the spine i also have the option to make it a closed loop so if i do yep it connects the last anchor to the very first one and here we have something really nice really close also in this more advanced version i also have some rotation the way that's handled is the spline also has a list of points so these are dynamically generated at runtime each point simply contains its position a forward and a normal vector so using that i can make my nice spline and then enable a car object and if there you go the car correctly interpolates along the spline and it also has the correct rotation and the last thing that i have is a script to make a spline mesh so once again it takes the underlying spline and then what it does is simply dynamically creates the mesh by going through every single point on the spline so for every point it adds two vertices and connects them to the previous two so that way it creates a mesh alongside of the length and the shape of the spline so if you combine that with a very simple road sprite and yep here is the outcome so we can see over here instead of shaded put it on wireframe and we can see how this whole mesh is constructed so for every single point it adds another two vertices and connects them to the previous one and goes all the way over so just take this then enable the car on top and here we have a really nice scene so we've got a road mesh and we've got the car driving along the road and yep it goes along perfectly and of course this whole thing is being driven by math so i can just modify any of these points and it all connects perfectly so i can modify the shape and whatever i give it it perfectly follows along the path and yep just like that alright so here you can see how splines are an awesome tool you have at your disposal whenever you need to set up some really nice mood curves as always you can download the project files and utilities from unitycodemuck.com this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone if you found this video helpful consider liking and subscribing post any questions i have in comments and i'll see you next time
