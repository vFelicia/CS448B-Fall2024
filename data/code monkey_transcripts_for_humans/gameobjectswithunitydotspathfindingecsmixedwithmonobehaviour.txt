With timestamps:

00:00 - in this video we're going to take our
00:01 - dodge pathfinding and apply to units
00:03 - built as normal game objects this is an
00:06 - excellent example of how you can mix
00:07 - dots with game objects by writing
00:09 - performance intensive operations with
00:11 - dots and the rest using normal game
00:13 - objects let's begin okay so here's our
00:20 - goal over here I have my normal unit
00:23 - just being idle this is using all of the
00:25 - normal systems that I normally use so
00:27 - it's my normal animation system running
00:29 - on a game object with a simple transform
00:31 - if I pause the game yep there it is you
00:33 - can see we have the unit as a game
00:35 - object in our scene so I can select it I
00:38 - can inspect it look at the children and
00:40 - so on here you can see I have the body
00:42 - which has a mesh filter and the mesh
00:44 - renderer which is how I run my animation
00:46 - system however we can also look into the
00:48 - entity debugger and in here as you can
00:50 - see we have a unit entity so the game
00:53 - object has a script which holds a
00:54 - reference to this particular entity then
00:57 - we use this entity in order to
00:58 - communicate with the dot systems back
01:00 - and forth so in this case we're using
01:02 - dots and Hinnom our path finding in
01:03 - super fast jobs then we get the
01:06 - resulting path back into our game object
01:08 - and relative fauit so over here as I
01:10 - click somewhere yep there you go the
01:12 - unit as a game object is moving around
01:14 - but the dots path finding code if we
01:16 - pause here it is we can look at the
01:18 - linked entity in order to see that it
01:20 - does have the path file component as
01:22 - well as the path position dynamic buffer
01:24 - so here we are using the dots path
01:26 - finding code we made in a previous video
01:28 - as well as the easiest path finding to
01:30 - work with our entities so make sure you
01:32 - watch those videos to see just how fast
01:33 - that's about finding is so again here we
01:36 - have the normal grid I can right click
01:37 - in order to make some walls then I can
01:39 - click and it commonly is a path using
01:41 - super fast starts path lining here we
01:44 - have a whole bunch of Units roaming
01:45 - around everything is done using normal
01:48 - game objects and motor behaviors except
01:50 - for the path finding which is running
01:51 - super fast code if you look in the
01:54 - profiler
01:54 - yep there's the path finding running on
01:56 - a first compiled job taking a tiny
01:58 - amount of time well everything else is
02:00 - running on mono behaviors so this is a
02:02 - great practical example of how you can
02:04 - mix game objects with dots in order to
02:06 - solve a very specific performance need
02:08 - this video is made possible thanks to
02:10 - these awesome supporters go to
02:12 - patreon.com/scishow
02:13 - Ginty code monkey to get some perks and
02:15 - help keep the videos free for everyone
02:17 - alright so this is our goal let's get to
02:19 - it okay so here we are in our starting
02:22 - scene over here I have a bunch of Units
02:24 - just roaming around the map and if we
02:25 - pause the game yep you can see there are
02:28 - no game objects in here so all of our
02:30 - scene is running using pure entities so
02:32 - this is the starting scene which is
02:34 - where we ended up after the EECS path
02:36 - fighting video so make sure you watch
02:38 - that video to figure out how we got here
02:39 - we have tons of Units just roaming
02:41 - around brenell everything is working
02:43 - with dots code so as you can see it's
02:45 - insanely fast over here we have a
02:47 - thousand units running at 80 frames per
02:49 - second alright so back in the editor
02:51 - here over here as you can see this is
02:53 - the unit that we were converting into an
02:55 - entity so now let's get rid of this one
02:57 - and instead I have here my normal unit
03:00 - game object so that has the normal
03:02 - components that are using pretty much
03:03 - all game object videos and if we test
03:06 - and yep there it is there's my usual
03:08 - character just sitting around playing an
03:09 - idle animation and if we pause and yep
03:12 - there it is we can see our normal game
03:14 - object with the body holding the
03:16 - animation mesh system if you want to
03:18 - learn more about how this animation
03:19 - system works check - they don't like the
03:20 - description it's all about dynamic with
03:22 - modifying meshes in grunta okay so here
03:25 - we have our character as a game object
03:26 - now let's make an entity in order to
03:29 - connect it with our dots path funny now
03:31 - in order to do that we have essentially
03:33 - two options we can create the entity
03:35 - from scratch or we can use e conversion
03:37 - work phone since we're working with game
03:39 - objects let's go with the conversion
03:40 - workflow so here we have the unit game
03:42 - object and inside mode create an empty
03:45 - game object convinced our unit entity
03:48 - and here on let's just add the convert
03:50 - to entity script alright so just like
03:53 - this we're going to have this game
03:54 - object be converted into an entity and
03:56 - if we test everything still runs and if
03:59 - we look into the entity debugger yep
04:01 - there it is over here we have our unit
04:03 - entity and as you can see it was indeed
04:04 - correctly converted alright awesome so
04:07 - now that we have our entity being
04:08 - converted let's make a script in order
04:10 - to capture the entity as it's being
04:12 - converted so for that let's make a new
04:14 - you see sharp script and call this the
04:17 - converted entity holder so this krypton
04:20 - will hold the entity as its converted
04:22 - let's make sure we drag it onto the unit
04:25 - entity game object okay and
04:26 - open it up now in here we're going to
04:29 - hook into the conversion system so in
04:31 - order to do that we're going to
04:35 - implement I convert game object to
04:37 - entity I cover this interface and a few
04:41 - more in the dots at the prefabs video so
04:43 - check that out to learn more here this
04:45 - function is called when the conversion
04:46 - system is converting this game object
04:48 - into an entity so here we can simply
04:50 - store this converting entity and entity
04:52 - manager into a field all right so that's
05:04 - it so we store the converted entity and
05:06 - let's also add a simple debug log just
05:09 - to test that this is running okay that
05:12 - should do it
05:12 - let's test any up over here in the log
05:14 - we have our message so we know our code
05:16 - is running all right awesome
05:17 - okay so now we have this script which
05:19 - holds a converted entity and now with
05:22 - this we can interact with the DOS part
05:23 - of our game now let's make a script to
05:26 - handle our unit game object so a new
05:28 - c-sharp script and con with our unit
05:30 - game object let's drag it on to our game
05:33 - object okay and now in here let's simply
05:36 - start off by making a field so we can
05:39 - set our convert an empty reference okay
05:43 - just like this and now in the editor
05:45 - there's a script with our references and
05:48 - let's just drag this reference okay and
05:50 - here with this reference let's make a
05:52 - simple start and on start with UE debug
05:55 - log of the entity that is converted so
05:58 - let's also make a function to return our
06:00 - entity
06:06 - okay so here we are exposing our private
06:09 - fields and then in here we're doing a
06:12 - debug log on the yep Anthony alright so
06:14 - let's see this running any of their yo
06:16 - over here we have our log so our
06:17 - monobehaviour script is correctly
06:20 - accessing the entity that was converted
06:21 - awesome now as I said we have two
06:24 - options for making our entity now over
06:27 - here we use the conversion system so
06:28 - essentially we made a game object and
06:30 - automatically convert it into an entity
06:32 - so as you can see in here it works
06:34 - however one potential issue with that
06:36 - approach is that it converts the base
06:39 - components so we're here we end up with
06:41 - a ton of components that we're probably
06:42 - not going to need so over here the
06:44 - rotation the scale and welcome to world
06:45 - these are probably unnecessary so
06:48 - another approach we could have taken
06:50 - would be to manually create the entity
06:52 - through our character script in here so
06:54 - we would for example access the world
06:56 - default game world in order to access
06:58 - the empty manager and create an entity
07:00 - so another approach would be to use this
07:03 - in order to create an empty completely
07:04 - from scratch again both approaches work
07:06 - so I just wanted to mention to make sure
07:08 - that you know you have multiple options
07:09 - so just pick the one that best suits
07:11 - your yeah all right now that we've set
07:13 - this up we can interact with dots
07:15 - through the entity that we convert in
07:17 - any way that we want so here in our unit
07:20 - game object script let's do a simple
07:22 - update in our update let's test for a
07:26 - input get mouse button down so when we
07:30 - click on the elect miles button then
07:31 - let's calculate a simple path so for
07:33 - that if you remember from the previous
07:35 - video all we need to do is add the
07:37 - trance finding params component so here
07:39 - is the component that we use in order to
07:41 - calculate it we have this component with
07:43 - a start and end position and then we
07:45 - have the path finding component system
07:47 - which runs on all the entities that have
07:49 - this parameter and calculates a path so
07:52 - when we press on the left mouse button
07:53 - let's go into the converted and
07:56 - keyholder in order to get the entity and
08:01 - we also get the entity manager and now
08:04 - we use this entity manager in order to
08:08 - add component data on to this entity of
08:12 - type new path finding frames and we pass
08:15 - in a certain start position
08:18 - and a certain end position all right so
08:29 - here this when we press on the in left
08:31 - mouse button we're going to add a path
08:33 - diagrams onto this entity after we do
08:35 - that then our path finding system won't
08:37 - grab that entity and do all of its
08:39 - calculations and as it calculates that
08:41 - we also need the entity to have a
08:43 - dynamic buffer as well as the path file
08:45 - component so for those two we can easily
08:47 - set them up in the editor so I can the
08:50 - editor we have our unit game object and
08:52 - inside we have our unit entity and then
08:54 - here we can add our path position
08:56 - authoring component which won't add the
08:57 - dynamic buffer as well as the path
08:59 - follow and again here put it at minus
09:01 - one so for starters it has an invalid
09:03 - path all right so everything should be
09:05 - working
09:06 - let's test okay so here we are and first
09:08 - let's look into the entity debugger and
09:10 - here we are with the unit entity and you
09:13 - can indeed see that it has the path
09:15 - final component as well as the path
09:17 - position dynamic buffer and back in the
09:19 - game if we click any of their yo over
09:22 - here we have our path being correctly
09:23 - completed so we have the path home then
09:26 - we have our path 0 0 1 0 2 1 3 1 & 4 0
09:29 - all right awesome
09:30 - so here you can already see the
09:32 - interaction between game objects and
09:34 - dots we have a game object which has a
09:36 - linked entity and through that entity we
09:39 - can add components then the dot system
09:41 - runs logic on those components and puts
09:43 - the result back in some other component
09:45 - and finally the game object can read
09:47 - those components with the camel 8 data
09:48 - so now that we have pathfinding being
09:51 - calculated let's make the game object
09:52 - actually followed that path and now here
09:54 - when it comes to connecting our game
09:56 - objects with our dots code we have a
09:57 - multitude of options so the question is
10:00 - essentially where should we have our
10:01 - connection
10:02 - should it be right on the path finding
10:04 - what we're doing here so just using it
10:06 - to call it or may be dots should also be
10:08 - responsible for moving the entity and
10:10 - the game object it just takes the entity
10:12 - position so we have several places where
10:15 - we can do our connection depending
10:16 - exactly on what our goal is we can use
10:19 - more or less of the dot systems as we
10:21 - prefer here I want to do it on the
10:23 - simplest way possible so all I want from
10:26 - dots is to complete the path finding and
10:27 - that's it I want the game objects with
10:29 - their normal monobehaviour scripts to
10:31 - handle movement
10:32 - and everything else so back in our unit
10:34 - game objects script let's make our
10:35 - follow code now you can do pretty much
10:37 - the same code that we're using when
10:39 - using dots here is our previously used
10:42 - path file system which was moving all
10:44 - the entities and let's pretty much copy
10:46 - all this so here our update let's put
10:50 - this and now it just fixes issues all
11:07 - right so here we have our path final
11:09 - code again we use the empty manager that
11:11 - we grabbed on this script in order to
11:14 - get the component out of type path
11:15 - follow and also the path position buffer
11:17 - and then we do pretty much the exact
11:19 - same thing the only difference is
11:21 - instead of using the translation value
11:22 - here we're using the transform position
11:24 - and everything else is pretty much the
11:26 - same and again we're doing all this
11:28 - inside a monobehaviour script with the
11:31 - game object world the only difference is
11:33 - over here at the end we need to actually
11:35 - tell the entity manager in order to
11:39 - update the paths also set component data
11:43 - so just like this all right so let's
11:46 - test ok here we are there's our unit and
11:49 - click and there you go there's the unit
11:51 - working as a game object but correctly
11:53 - following the path that was calculated
11:54 - in unity dots okay now let's make him
11:57 - phone with the mouse position instead so
11:59 - right now we're doing this one just sent
12:01 - him from a static 0 0 to a 4 0 and here
12:04 - we have the unit move our system that we
12:06 - made in a previous video which is
12:07 - validating the mouse position and doing
12:09 - all that so you can pretty much use the
12:11 - exact same code and let's copy all this
12:28 - all right so over here is the script we
12:31 - just grab the mouse world position we
12:34 - convert that word position into a grid
12:36 - position and validate it do the same
12:38 - thing for the starting position so using
12:40 - the transform table position and finally
12:42 - we add our path finding params component
12:44 - just like we were doing previously all
12:46 - right so let's test ok so here we are
12:48 - and click and yep there you go now the
12:50 - unit is correctly going from the start
12:52 - position to the mouse position so now
12:54 - since we're working with the normal game
12:55 - object I can use my normal animation
12:57 - system so for that the game object
12:59 - already has the character base script ok
13:10 - so there it is now again this
13:11 - implementation is going to depend on
13:13 - what type of animation system you're
13:14 - using for my animation system which
13:16 - again it is based completely on game
13:18 - objects and motor behaviors all I need
13:20 - to do is call this function with the
13:21 - move direction so this should be working
13:23 - let's see ok so here are and click any
13:25 - of their ego he goes to the target Mouse
13:27 - position and he's using the nice game
13:30 - object based animations and again we
13:32 - still have all the paths finally working
13:34 - so let's right-click to make some walls
13:36 - and now it's time to go here and if
13:38 - there you go he completes a path and
13:40 - again if we pause we can see that this
13:43 - is indeed a unit game object so here in
13:46 - the scene there it is there's the game
13:47 - object but in the entity debugger over
13:50 - here we can also see our unit entity so
13:53 - we have a game object connected to an
13:55 - entity and the entity is being used to
13:56 - call it the path line so we have this
13:58 - working with one unit now let's add a
14:00 - whole bunch of them
14:19 - many appear we have a whole bunch of
14:21 - units they're all animated they're all
14:23 - working with game objects and they're
14:25 - all using super fast dots pathfinding in
14:27 - order to calculate their path so here
14:29 - you see how we can make a game
14:31 - completely using game objects and use
14:33 - dots only for very specific performance
14:35 - intensive operations if we look into the
14:37 - profile and yep there it is over here
14:39 - you can see our path finding running on
14:41 - a birth compound job taking a tiny
14:44 - amount of time so again here we have all
14:46 - of the units all made up of game objects
14:48 - using normal model behaviors and using
14:50 - dots for path line so this is a great
14:52 - practical example of how you can make
14:54 - schema objects with dots this video is
14:57 - made possible thanks to these awesome
14:58 - supporters go to patreon.com/scishow new
15:01 - code monkey to get some perks and help
15:03 - keep the videos free for everyone as
15:04 - long as you can download the project
15:06 - fountain utilities from Unity code
15:07 - Mikiko
15:08 - subscribe to the channel for more EMT
15:10 - tutorials post any question having the
15:11 - comes and I'll see you next time
15:15 - [Music]
15:17 - you

Cleaned transcript:

in this video we're going to take our dodge pathfinding and apply to units built as normal game objects this is an excellent example of how you can mix dots with game objects by writing performance intensive operations with dots and the rest using normal game objects let's begin okay so here's our goal over here I have my normal unit just being idle this is using all of the normal systems that I normally use so it's my normal animation system running on a game object with a simple transform if I pause the game yep there it is you can see we have the unit as a game object in our scene so I can select it I can inspect it look at the children and so on here you can see I have the body which has a mesh filter and the mesh renderer which is how I run my animation system however we can also look into the entity debugger and in here as you can see we have a unit entity so the game object has a script which holds a reference to this particular entity then we use this entity in order to communicate with the dot systems back and forth so in this case we're using dots and Hinnom our path finding in super fast jobs then we get the resulting path back into our game object and relative fauit so over here as I click somewhere yep there you go the unit as a game object is moving around but the dots path finding code if we pause here it is we can look at the linked entity in order to see that it does have the path file component as well as the path position dynamic buffer so here we are using the dots path finding code we made in a previous video as well as the easiest path finding to work with our entities so make sure you watch those videos to see just how fast that's about finding is so again here we have the normal grid I can right click in order to make some walls then I can click and it commonly is a path using super fast starts path lining here we have a whole bunch of Units roaming around everything is done using normal game objects and motor behaviors except for the path finding which is running super fast code if you look in the profiler yep there's the path finding running on a first compiled job taking a tiny amount of time well everything else is running on mono behaviors so this is a great practical example of how you can mix game objects with dots in order to solve a very specific performance need this video is made possible thanks to these awesome supporters go to patreon.com/scishow Ginty code monkey to get some perks and help keep the videos free for everyone alright so this is our goal let's get to it okay so here we are in our starting scene over here I have a bunch of Units just roaming around the map and if we pause the game yep you can see there are no game objects in here so all of our scene is running using pure entities so this is the starting scene which is where we ended up after the EECS path fighting video so make sure you watch that video to figure out how we got here we have tons of Units just roaming around brenell everything is working with dots code so as you can see it's insanely fast over here we have a thousand units running at 80 frames per second alright so back in the editor here over here as you can see this is the unit that we were converting into an entity so now let's get rid of this one and instead I have here my normal unit game object so that has the normal components that are using pretty much all game object videos and if we test and yep there it is there's my usual character just sitting around playing an idle animation and if we pause and yep there it is we can see our normal game object with the body holding the animation mesh system if you want to learn more about how this animation system works check they don't like the description it's all about dynamic with modifying meshes in grunta okay so here we have our character as a game object now let's make an entity in order to connect it with our dots path funny now in order to do that we have essentially two options we can create the entity from scratch or we can use e conversion work phone since we're working with game objects let's go with the conversion workflow so here we have the unit game object and inside mode create an empty game object convinced our unit entity and here on let's just add the convert to entity script alright so just like this we're going to have this game object be converted into an entity and if we test everything still runs and if we look into the entity debugger yep there it is over here we have our unit entity and as you can see it was indeed correctly converted alright awesome so now that we have our entity being converted let's make a script in order to capture the entity as it's being converted so for that let's make a new you see sharp script and call this the converted entity holder so this krypton will hold the entity as its converted let's make sure we drag it onto the unit entity game object okay and open it up now in here we're going to hook into the conversion system so in order to do that we're going to implement I convert game object to entity I cover this interface and a few more in the dots at the prefabs video so check that out to learn more here this function is called when the conversion system is converting this game object into an entity so here we can simply store this converting entity and entity manager into a field all right so that's it so we store the converted entity and let's also add a simple debug log just to test that this is running okay that should do it let's test any up over here in the log we have our message so we know our code is running all right awesome okay so now we have this script which holds a converted entity and now with this we can interact with the DOS part of our game now let's make a script to handle our unit game object so a new csharp script and con with our unit game object let's drag it on to our game object okay and now in here let's simply start off by making a field so we can set our convert an empty reference okay just like this and now in the editor there's a script with our references and let's just drag this reference okay and here with this reference let's make a simple start and on start with UE debug log of the entity that is converted so let's also make a function to return our entity okay so here we are exposing our private fields and then in here we're doing a debug log on the yep Anthony alright so let's see this running any of their yo over here we have our log so our monobehaviour script is correctly accessing the entity that was converted awesome now as I said we have two options for making our entity now over here we use the conversion system so essentially we made a game object and automatically convert it into an entity so as you can see in here it works however one potential issue with that approach is that it converts the base components so we're here we end up with a ton of components that we're probably not going to need so over here the rotation the scale and welcome to world these are probably unnecessary so another approach we could have taken would be to manually create the entity through our character script in here so we would for example access the world default game world in order to access the empty manager and create an entity so another approach would be to use this in order to create an empty completely from scratch again both approaches work so I just wanted to mention to make sure that you know you have multiple options so just pick the one that best suits your yeah all right now that we've set this up we can interact with dots through the entity that we convert in any way that we want so here in our unit game object script let's do a simple update in our update let's test for a input get mouse button down so when we click on the elect miles button then let's calculate a simple path so for that if you remember from the previous video all we need to do is add the trance finding params component so here is the component that we use in order to calculate it we have this component with a start and end position and then we have the path finding component system which runs on all the entities that have this parameter and calculates a path so when we press on the left mouse button let's go into the converted and keyholder in order to get the entity and we also get the entity manager and now we use this entity manager in order to add component data on to this entity of type new path finding frames and we pass in a certain start position and a certain end position all right so here this when we press on the in left mouse button we're going to add a path diagrams onto this entity after we do that then our path finding system won't grab that entity and do all of its calculations and as it calculates that we also need the entity to have a dynamic buffer as well as the path file component so for those two we can easily set them up in the editor so I can the editor we have our unit game object and inside we have our unit entity and then here we can add our path position authoring component which won't add the dynamic buffer as well as the path follow and again here put it at minus one so for starters it has an invalid path all right so everything should be working let's test okay so here we are and first let's look into the entity debugger and here we are with the unit entity and you can indeed see that it has the path final component as well as the path position dynamic buffer and back in the game if we click any of their yo over here we have our path being correctly completed so we have the path home then we have our path 0 0 1 0 2 1 3 1 & 4 0 all right awesome so here you can already see the interaction between game objects and dots we have a game object which has a linked entity and through that entity we can add components then the dot system runs logic on those components and puts the result back in some other component and finally the game object can read those components with the camel 8 data so now that we have pathfinding being calculated let's make the game object actually followed that path and now here when it comes to connecting our game objects with our dots code we have a multitude of options so the question is essentially where should we have our connection should it be right on the path finding what we're doing here so just using it to call it or may be dots should also be responsible for moving the entity and the game object it just takes the entity position so we have several places where we can do our connection depending exactly on what our goal is we can use more or less of the dot systems as we prefer here I want to do it on the simplest way possible so all I want from dots is to complete the path finding and that's it I want the game objects with their normal monobehaviour scripts to handle movement and everything else so back in our unit game objects script let's make our follow code now you can do pretty much the same code that we're using when using dots here is our previously used path file system which was moving all the entities and let's pretty much copy all this so here our update let's put this and now it just fixes issues all right so here we have our path final code again we use the empty manager that we grabbed on this script in order to get the component out of type path follow and also the path position buffer and then we do pretty much the exact same thing the only difference is instead of using the translation value here we're using the transform position and everything else is pretty much the same and again we're doing all this inside a monobehaviour script with the game object world the only difference is over here at the end we need to actually tell the entity manager in order to update the paths also set component data so just like this all right so let's test ok here we are there's our unit and click and there you go there's the unit working as a game object but correctly following the path that was calculated in unity dots okay now let's make him phone with the mouse position instead so right now we're doing this one just sent him from a static 0 0 to a 4 0 and here we have the unit move our system that we made in a previous video which is validating the mouse position and doing all that so you can pretty much use the exact same code and let's copy all this all right so over here is the script we just grab the mouse world position we convert that word position into a grid position and validate it do the same thing for the starting position so using the transform table position and finally we add our path finding params component just like we were doing previously all right so let's test ok so here we are and click and yep there you go now the unit is correctly going from the start position to the mouse position so now since we're working with the normal game object I can use my normal animation system so for that the game object already has the character base script ok so there it is now again this implementation is going to depend on what type of animation system you're using for my animation system which again it is based completely on game objects and motor behaviors all I need to do is call this function with the move direction so this should be working let's see ok so here are and click any of their ego he goes to the target Mouse position and he's using the nice game object based animations and again we still have all the paths finally working so let's rightclick to make some walls and now it's time to go here and if there you go he completes a path and again if we pause we can see that this is indeed a unit game object so here in the scene there it is there's the game object but in the entity debugger over here we can also see our unit entity so we have a game object connected to an entity and the entity is being used to call it the path line so we have this working with one unit now let's add a whole bunch of them many appear we have a whole bunch of units they're all animated they're all working with game objects and they're all using super fast dots pathfinding in order to calculate their path so here you see how we can make a game completely using game objects and use dots only for very specific performance intensive operations if we look into the profile and yep there it is over here you can see our path finding running on a birth compound job taking a tiny amount of time so again here we have all of the units all made up of game objects using normal model behaviors and using dots for path line so this is a great practical example of how you can make schema objects with dots this video is made possible thanks to these awesome supporters go to patreon.com/scishow new code monkey to get some perks and help keep the videos free for everyone as long as you can download the project fountain utilities from Unity code Mikiko subscribe to the channel for more EMT tutorials post any question having the comes and I'll see you next time you
