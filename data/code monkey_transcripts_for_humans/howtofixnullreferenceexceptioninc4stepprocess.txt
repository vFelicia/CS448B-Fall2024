With timestamps:

00:00 - in this video we're going to learn how
00:01 - to fix a known reference exception
00:03 - in c sharp programming is all about
00:05 - experience so the next time you come
00:07 - across this error you'll know exactly
00:08 - what to do to solve it
00:10 - here i will give you a process that you
00:11 - can follow every time let's begin
00:18 - okay so let's see how to fix a
00:20 - non-reference exception
00:22 - but before we can do that we need to
00:24 - first understand exactly what it means
00:26 - objects in c sharp are reference types
00:28 - which means that when you store
00:30 - a variable of a certain object type
00:32 - you're not really storing that whole
00:33 - object
00:34 - what you're storing is a reference to
00:36 - that object so when you access that
00:38 - variable you are accessing the reference
00:40 - in order to access the object stored
00:42 - somewhere in memory
00:43 - so think of it as a pointer to a
00:44 - location in memory where the actual
00:46 - object is
00:48 - if you have the reference correctly set
00:49 - then you grab that memory location then
00:51 - go into the memory in order to find the
00:53 - actual
00:53 - object however if the reference has no
00:56 - value meaning that it's set to no
00:58 - then the code does not know where else
00:59 - to go so when you do that that's when
01:01 - you get the error
01:02 - the name no reference exception first of
01:04 - all it's an exception meaning an error
01:06 - and the error is due to trying to access
01:08 - a reference that is currently set to no
01:11 - alright so i hope that helped clarify
01:13 - exactly what the error means
01:14 - now let's see some practical examples
01:16 - and how to solve it but what i want you
01:18 - to take away from this video is not how
01:20 - to solve a specific problem
01:22 - instead i want you to understand what
01:24 - caused the error and what is the process
01:25 - you can follow in order to identify and
01:28 - solve it
01:29 - so here i am in a normal c-sharp script
01:31 - now i'm working inside unity so that's
01:33 - why the script extends this class and it
01:35 - has this start method
01:37 - but if you're working on a normal c
01:38 - sharp program then the logic is exactly
01:40 - the same
01:40 - so this script is really very simple
01:42 - over here i just have a variable of type
01:45 - object and then down here i'm accessing
01:47 - my object and calling the function to
01:49 - string
01:50 - which should give me a string
01:51 - representation of whatever is stored on
01:53 - this object
01:54 - so with this you can probably already
01:55 - see the error but let's test and right
01:57 - away in the console we see we have our
01:59 - known reference exception
02:00 - so the issue that we have here is quite
02:02 - simply that the variable is defined but
02:04 - the value is never set
02:05 - so by default this takes the value no so
02:08 - here we are doing what we saw previously
02:10 - we are accessing
02:11 - this variable to try to get the object
02:13 - but this is set to no
02:15 - so the error happens because we're
02:16 - trying to call the two string function
02:18 - on this object
02:19 - but this object is set to no remember
02:21 - that when you use a dot you are
02:23 - accessing that object
02:24 - so in this case access this object to
02:26 - use this function and the error only
02:27 - happens when you try to use the object
02:29 - that is set to no
02:30 - so for example you could do object
02:32 - second object
02:34 - and assign it to this my object so you
02:36 - can use this object when it says no what
02:38 - you cannot do
02:39 - is actually access it now when you get a
02:41 - non-reference exception your first step
02:43 - should be to look at where the error is
02:45 - happening and think of exactly what
02:46 - could be said to know
02:48 - so over here we have our error and we
02:50 - can see down here on our stack trace
02:52 - that the error is happening on this line
02:55 - so on this script at line number 10. and
02:57 - in here we can just double click on the
02:59 - error and it will automatically go there
03:01 - see if there you go the error is on this
03:02 - line so on line 10 on this script
03:04 - and now here you need to ask yourself
03:06 - which is okay so what in here could
03:08 - possibly be set to null
03:10 - now in this line we're really only doing
03:11 - two things we're accessing this object
03:13 - and calling this function
03:15 - now calling a function simply runs the
03:16 - function and like i said previously the
03:18 - error only happens when you try to
03:20 - access a reference that is set to no
03:22 - so for example even if this function
03:24 - returned no the error wouldn't be here
03:26 - because we're not then
03:27 - accessing this in order to do something
03:28 - else with it so the only possible cause
03:31 - for the error in here
03:32 - is by accessing this object which we're
03:34 - using to call this function
03:35 - so we can verify that this is likely the
03:37 - error that is set to no
03:38 - by looking at what is stored in the
03:40 - variable so let's do a simple print
03:42 - before we run this line
03:43 - now here i'm working in unity so in
03:45 - order to print something on the console
03:47 - i can just use debug.log
03:49 - and then pass in the object that i want
03:51 - to print so my object
03:52 - so this will print whatever is stored on
03:54 - this object however if you're working on
03:56 - a normal c sharp app you can instead
03:58 - just use
03:59 - console.writeline so these two do pretty
04:01 - much the same thing all that matters is
04:03 - that you have way of seeing the current
04:04 - value stored in an object
04:06 - all right so with this let's test and
04:07 - yep we still have the error which is
04:09 - fine
04:10 - now the first step in the process is to
04:11 - identify where the error is happening
04:13 - and then you worry about solving
04:15 - so here in the log we can see that we
04:16 - printed no so here we have our answer
04:19 - the error is that this variable is set
04:21 - to null and then we're trying to access
04:23 - it
04:23 - now the solution here naturally will
04:25 - depend on exactly what you're doing with
04:27 - that object
04:28 - so it either means that you should check
04:29 - for known like this so if
04:31 - my object if it is not null then you do
04:34 - this
04:35 - so that's one approach just check if
04:37 - it's null or not
04:39 - or maybe in this scenario this field
04:41 - should have been set to something before
04:42 - this point
04:43 - so in this example i'm just using the
04:45 - object type which is the base time for
04:47 - every class
04:48 - so down here for example i can just
04:50 - define a normal class
04:53 - so i just got a type test object and
04:55 - then here
04:56 - i can simply do my object equals new
04:58 - test object
05:00 - and if i test now and yep now it works
05:01 - there's no error because that field has
05:03 - indeed been assigned
05:04 - alright so here we have the most basic
05:06 - example now the process for solving a
05:09 - non-reference exception is as follows
05:11 - first you go to the offending line then
05:13 - you analyze what that line is doing and
05:15 - think of all the possible objects that
05:17 - could be set to null
05:18 - then you add some logs before that line
05:20 - to see the values stored in each of
05:22 - those possible objects
05:24 - when you have confirmation of exactly
05:26 - what object is set to null then you
05:27 - decide what you should do about it
05:29 - so maybe it's okay that the object is
05:31 - null and you should do a simple note
05:33 - check
05:33 - or maybe the object should have been set
05:35 - to something at which point you go
05:37 - backwards through your code
05:38 - to see where it should have been set
05:39 - okay so this was a very general example
05:42 - now let's look at some real normal
05:43 - examples so over here i have this script
05:46 - it's just a very basic script
05:48 - essentially takes a target transform
05:50 - and then just calculates the direction
05:51 - and moves towards that target transform
05:53 - so very basic
05:54 - now let's try running this code and yep
05:57 - we have our error
05:58 - so again the first step is going to the
06:00 - offending line so line 11.
06:01 - so here it is it's this line now step
06:04 - number two is to analyze this line and
06:06 - think of all the possible objects in
06:08 - here that could be set to null
06:10 - now if you want go ahead pause the video
06:11 - and try to figure it out this is a
06:13 - pretty simple example
06:15 - okay so here we are calculating the move
06:17 - direction
06:18 - and in order to do that we are using two
06:20 - objects so we're accessing the target
06:22 - transform in order to get the target
06:24 - position
06:24 - and we're accessing this transform in
06:26 - order to get this object position
06:28 - so both of these two objects could
06:30 - possibly be set to null
06:32 - now the next step is to add some logs to
06:33 - identify exactly what is said to know
06:36 - so here just add a debug.log on the
06:39 - target transform
06:40 - and another one on this transform
06:44 - okay so now we run and yep we have our
06:46 - logs
06:47 - now it seems that the second object is
06:49 - fine but the first one is set to no
06:50 - so double click on this log line and yep
06:53 - it's this one
06:54 - so the target is null so down here when
06:56 - you try to access the target position
06:59 - we're going to try to access the
07:00 - position of a known reference
07:02 - and then we get our no reference
07:03 - exception so now that we have
07:05 - confirmation of what object is known
07:07 - now we need to think about what should
07:08 - we do about it so
07:10 - should we perhaps ignore the target if
07:12 - it is null
07:13 - now maybe that could be one approach but
07:15 - in this case according to my particular
07:16 - game design i want the player to always
07:18 - be moving towards the target
07:20 - so based on my design this really should
07:22 - have been set with the correct value
07:23 - previously
07:24 - now in this case the variable is defined
07:26 - up here let's define a private transform
07:28 - for the target transform
07:30 - and it's set up as a serialized field so
07:32 - this is an attribute that you add when
07:34 - you want to expose certain private
07:36 - variables to the unt
07:37 - editor so this tells us that this
07:39 - reference should have been set in the
07:40 - editor
07:41 - so if we go there and yep here we see
07:43 - the issue so we have our move to target
07:45 - script
07:46 - and down here our reference is set to no
07:48 - so in this case the solution is simply
07:50 - to remember to drag the reference so
07:52 - down here is the target just click and
07:53 - drag and there you go
07:55 - and now if we run if there it is now it
07:57 - works the
07:58 - object is moving towards the target so
07:59 - with this we solved our error
08:01 - awesome okay let's look at yet another
08:03 - example
08:05 - so over here i have this game object and
08:08 - then inside it i have a sprite for the
08:10 - player
08:10 - and then inside that one i have a sprite
08:12 - for the helmet now let's say that we
08:14 - want to hide the helmet
08:15 - so here is the script it's very simple
08:17 - we just do a transform we find the
08:19 - player we find the helmet then we access
08:21 - the game object and set it to active to
08:23 - false in order to hide it
08:24 - so let's run and yep there we have our
08:26 - error so again
08:27 - first step double click so the error is
08:30 - on this line
08:31 - now the second step is to analyze this
08:33 - line and try to guess all the possible
08:35 - objects and possible reasons that
08:36 - something could be known here
08:38 - so once again go ahead if you want pause
08:40 - the video and try to figure it out
08:43 - okay so there's really two possible
08:45 - errors in here
08:46 - now in terms of what could theoretically
08:49 - be known the answer is actually four
08:51 - so the transform is a class so it could
08:54 - technically be null
08:56 - then over here each find can return null
08:59 - and then the game object is also class
09:00 - so it could also be technically no
09:02 - however this script is a mono behavior
09:05 - so in order for this run
09:06 - it needs to be attached to a game object
09:09 - and a game object
09:10 - always has a transform component so this
09:12 - transform reference will never be known
09:14 - then we have our two separate finds so
09:17 - these take a name for the child game
09:19 - object
09:19 - and these can indeed return null and
09:22 - lastly we have the game object which is
09:24 - a class which
09:24 - technically could be known however in
09:27 - here we're accessing the game object of
09:29 - whatever
09:29 - transform we come from here so if this
09:31 - one does return transform then it's
09:33 - guaranteed that that transform will also
09:35 - have a game
09:36 - object so just by looking at this line i
09:38 - can tell that the issue is either with
09:39 - this fine or this find
09:41 - so either one of these could possibly be
09:43 - returning no so now let's add some logs
09:45 - before running this line
09:46 - or to identify it now here since one of
09:49 - the fines
09:50 - is a child of the previous fine then we
09:52 - need to make sure that we add the logs
09:53 - in order
09:55 - so first we do a debug.log on the
09:58 - transform.find
09:59 - our player so first we check if that
10:02 - finds
10:02 - 16 and then we check for the other one
10:04 - which is dot find
10:06 - then we have the helmet alright so let's
10:08 - see
10:09 - and yep we have our logs and we can see
10:11 - that one of them is set correctly
10:13 - but the other one is indeed set to no so
10:16 - with this we have correctly identified
10:18 - where the error is now the next step is
10:20 - figure out what to do about it
10:21 - so let's double click to go to the
10:23 - offending line so here it is
10:25 - we can successfully find the player but
10:27 - we cannot find the helmet game object
10:29 - now in this case let's assume that the
10:31 - character is always meant to have
10:32 - a helmet so this line should work so we
10:35 - should not need to do a null checking
10:37 - here
10:37 - and in this case one particular thing is
10:39 - we're using find and the thing we'd find
10:41 - is you have to remember that the name
10:43 - needs to be absolutely exact
10:44 - so here we're calling find on helmet and
10:47 - if we go into the editor
10:49 - and if over here we can see the reason
10:50 - for the error we have helmet
10:52 - typed within uppercase h but in our code
10:55 - we're using a lowercase h
10:57 - now find this case sensitive so this
10:59 - helmet that we're using in here does not
11:01 - match this helmet that we're using in
11:02 - here
11:03 - so since they are not perfectly exact
11:05 - then the find returns no which then
11:07 - causes our error
11:08 - so in this case let's just rename this
11:10 - and write it
11:11 - exactly as we have in the editor and if
11:14 - we run
11:15 - and yep now it works perfectly so the
11:17 - code ran it found the player it found
11:19 - the helmet and it made it invisible
11:21 - okay awesome all right so let's look at
11:24 - one last example
11:25 - over here in my scene i have an object
11:27 - with the script and then inside it
11:29 - there's the circle visual with just this
11:31 - nice visual
11:32 - very simple now let's look at the script
11:34 - okay here it is
11:35 - now what we're doing is we're grabbing
11:37 - the visual then we define a bunch of
11:39 - colors
11:40 - and we do some randomness in order to
11:41 - pick a random color we do all of that
11:43 - just on a weight just once and then on
11:45 - every update we're simply moving the
11:48 - visual transform in order to follow the
11:49 - mouse position
11:50 - so very simple just a circle with a
11:52 - random color following the mouse let's
11:54 - test
11:54 - and yep right away we have our known
11:56 - reference exception so once again let's
11:58 - follow the process
11:59 - so the first step is to go to the
12:01 - offending line so line 26
12:03 - okay here it is here is the error now
12:05 - step two is analyze and think of what
12:07 - could possibly be set to null
12:09 - here all we're doing is setting a
12:10 - position so the only possible thing that
12:13 - could be known here is just this object
12:15 - so step three is to verify that by
12:17 - adding a log so let's set a debug.log
12:20 - on our circle visual transform and yep
12:22 - we have confirmation that
12:24 - that object is indeed what is said to
12:25 - know so now the final step is to figure
12:28 - out what to do with this null object
12:30 - so in this case it's not meant to be
12:32 - known so that means we need to go back
12:34 - in order to see where this object should
12:36 - have been set
12:37 - now this is a very simple script so in
12:39 - here it's very easy to figure out
12:40 - and by the way here's one quick visual
12:42 - studio tip
12:44 - if you click on an object in order to
12:45 - select it and then press ctrl shift
12:47 - and the up or down arrows you can cycle
12:50 - through all the references where this
12:51 - object is used
12:52 - also if you just place it in you can see
12:54 - them all highlighted now if you want go
12:56 - ahead
12:56 - try to pause the video and figure out
12:58 - why this object has been set to null
13:01 - alright so just by highlighting you can
13:03 - right away see what's actually the issue
13:05 - now you can see that this one is
13:06 - highlighted this one is highlighted and
13:08 - this one as well
13:09 - but this one is not so this tells us
13:11 - that the variable that we're using in
13:13 - these three spaces
13:14 - is different from the one that we're
13:15 - using in here so here we see how c sharp
13:18 - works with regards to member variables
13:20 - and local variables
13:21 - so the goal with this line is to set
13:23 - this field but since we added the type
13:26 - what we're actually doing here is
13:27 - creating a local variable with the exact
13:29 - same name
13:30 - so when we set this to this value we're
13:33 - actually not accessing this field member
13:35 - and since we're not setting this one
13:37 - then this one says no which then caused
13:39 - our error down here
13:40 - so the mistake in this case was simply
13:42 - making this one a local variable if we
13:44 - take away the transform
13:45 - yep there you go now all of our
13:47 - references are indeed referencing the
13:48 - exact same object
13:49 - so one awake we set that one and then on
13:51 - update we can safely use it
13:53 - and if we run and yep there you go now
13:55 - it works exactly as intended
13:57 - so here we have solved yet another
13:59 - possible known reference scenario
14:00 - awesome okay so here we've been solving
14:03 - this problem using debug.log in or to
14:05 - print the values that we think
14:06 - might be known so this is one approach
14:09 - however for a more advanced approach you
14:11 - can also use the debugger
14:12 - so here i am working in visual studio
14:14 - and you can easily add what is called a
14:16 - breakpoint
14:17 - so down here on the left side on this
14:19 - empty space just click
14:21 - and yep it showcases a nice red circle
14:24 - so what this means is that when the code
14:26 - reaches this point it will automatically
14:27 - stop
14:28 - executing so the game is now running and
14:30 - it automatically stopped as soon as it
14:32 - got into this line
14:33 - and down here you have some windows
14:35 - related to debugging
14:37 - so you can click on this one and here
14:38 - you can see the actual value stored in
14:40 - each variable
14:41 - so this is another way that we can see
14:43 - that the circumference will transform
14:45 - so this variable is indeed set to null
14:47 - so this is where we have our error
14:49 - so the debugger is a very useful tool
14:51 - for looking at what the code is doing at
14:53 - any point
14:54 - you can then step through your code step
14:55 - out and so on now personally when it
14:57 - comes to solving known references for me
14:59 - using logs is more than enough
15:00 - and i also like forcing myself to
15:02 - analyze the code and think of what
15:04 - objects could possibly contain the error
15:06 - but you can use whatever approach you
15:08 - prefer alright so i hope this video
15:10 - helped you understand what are null
15:12 - reference exceptions and what caused
15:13 - them
15:14 - and like i said what i hope you take
15:15 - away from this video is not how to solve
15:17 - a specific problem
15:18 - instead i want you to remember the
15:20 - process for solving it so you can fix
15:21 - the error whenever it happens
15:23 - so you first go to the affining line
15:25 - second you analyze and figure out what
15:27 - could possibly be null
15:28 - third you add some logs to see the value
15:30 - stored in edge object and
15:32 - identify which one is set to known and
15:34 - lastly figure out what to do about it
15:35 - depending on the scenario
15:37 - so this is the basic process that can be
15:39 - used to solve the error whatever it may
15:40 - appear
15:41 - so next time you encounter it now you
15:43 - know what to do if you found this video
15:45 - helpful consider liking and subscribing
15:47 - this video is made possible thanks to
15:48 - these awesome supporters go to
15:50 - patreon.com
15:51 - unitycodemonkey to get some perks and
15:53 - help keep the videos free for everyone
15:55 - subscribe to the channel for more unity
15:57 - tutorials post any questions
15:58 - in the comments and i'll see you next
16:05 - [Music]
16:06 - time
16:08 - you

Cleaned transcript:

in this video we're going to learn how to fix a known reference exception in c sharp programming is all about experience so the next time you come across this error you'll know exactly what to do to solve it here i will give you a process that you can follow every time let's begin okay so let's see how to fix a nonreference exception but before we can do that we need to first understand exactly what it means objects in c sharp are reference types which means that when you store a variable of a certain object type you're not really storing that whole object what you're storing is a reference to that object so when you access that variable you are accessing the reference in order to access the object stored somewhere in memory so think of it as a pointer to a location in memory where the actual object is if you have the reference correctly set then you grab that memory location then go into the memory in order to find the actual object however if the reference has no value meaning that it's set to no then the code does not know where else to go so when you do that that's when you get the error the name no reference exception first of all it's an exception meaning an error and the error is due to trying to access a reference that is currently set to no alright so i hope that helped clarify exactly what the error means now let's see some practical examples and how to solve it but what i want you to take away from this video is not how to solve a specific problem instead i want you to understand what caused the error and what is the process you can follow in order to identify and solve it so here i am in a normal csharp script now i'm working inside unity so that's why the script extends this class and it has this start method but if you're working on a normal c sharp program then the logic is exactly the same so this script is really very simple over here i just have a variable of type object and then down here i'm accessing my object and calling the function to string which should give me a string representation of whatever is stored on this object so with this you can probably already see the error but let's test and right away in the console we see we have our known reference exception so the issue that we have here is quite simply that the variable is defined but the value is never set so by default this takes the value no so here we are doing what we saw previously we are accessing this variable to try to get the object but this is set to no so the error happens because we're trying to call the two string function on this object but this object is set to no remember that when you use a dot you are accessing that object so in this case access this object to use this function and the error only happens when you try to use the object that is set to no so for example you could do object second object and assign it to this my object so you can use this object when it says no what you cannot do is actually access it now when you get a nonreference exception your first step should be to look at where the error is happening and think of exactly what could be said to know so over here we have our error and we can see down here on our stack trace that the error is happening on this line so on this script at line number 10. and in here we can just double click on the error and it will automatically go there see if there you go the error is on this line so on line 10 on this script and now here you need to ask yourself which is okay so what in here could possibly be set to null now in this line we're really only doing two things we're accessing this object and calling this function now calling a function simply runs the function and like i said previously the error only happens when you try to access a reference that is set to no so for example even if this function returned no the error wouldn't be here because we're not then accessing this in order to do something else with it so the only possible cause for the error in here is by accessing this object which we're using to call this function so we can verify that this is likely the error that is set to no by looking at what is stored in the variable so let's do a simple print before we run this line now here i'm working in unity so in order to print something on the console i can just use debug.log and then pass in the object that i want to print so my object so this will print whatever is stored on this object however if you're working on a normal c sharp app you can instead just use console.writeline so these two do pretty much the same thing all that matters is that you have way of seeing the current value stored in an object all right so with this let's test and yep we still have the error which is fine now the first step in the process is to identify where the error is happening and then you worry about solving so here in the log we can see that we printed no so here we have our answer the error is that this variable is set to null and then we're trying to access it now the solution here naturally will depend on exactly what you're doing with that object so it either means that you should check for known like this so if my object if it is not null then you do this so that's one approach just check if it's null or not or maybe in this scenario this field should have been set to something before this point so in this example i'm just using the object type which is the base time for every class so down here for example i can just define a normal class so i just got a type test object and then here i can simply do my object equals new test object and if i test now and yep now it works there's no error because that field has indeed been assigned alright so here we have the most basic example now the process for solving a nonreference exception is as follows first you go to the offending line then you analyze what that line is doing and think of all the possible objects that could be set to null then you add some logs before that line to see the values stored in each of those possible objects when you have confirmation of exactly what object is set to null then you decide what you should do about it so maybe it's okay that the object is null and you should do a simple note check or maybe the object should have been set to something at which point you go backwards through your code to see where it should have been set okay so this was a very general example now let's look at some real normal examples so over here i have this script it's just a very basic script essentially takes a target transform and then just calculates the direction and moves towards that target transform so very basic now let's try running this code and yep we have our error so again the first step is going to the offending line so line 11. so here it is it's this line now step number two is to analyze this line and think of all the possible objects in here that could be set to null now if you want go ahead pause the video and try to figure it out this is a pretty simple example okay so here we are calculating the move direction and in order to do that we are using two objects so we're accessing the target transform in order to get the target position and we're accessing this transform in order to get this object position so both of these two objects could possibly be set to null now the next step is to add some logs to identify exactly what is said to know so here just add a debug.log on the target transform and another one on this transform okay so now we run and yep we have our logs now it seems that the second object is fine but the first one is set to no so double click on this log line and yep it's this one so the target is null so down here when you try to access the target position we're going to try to access the position of a known reference and then we get our no reference exception so now that we have confirmation of what object is known now we need to think about what should we do about it so should we perhaps ignore the target if it is null now maybe that could be one approach but in this case according to my particular game design i want the player to always be moving towards the target so based on my design this really should have been set with the correct value previously now in this case the variable is defined up here let's define a private transform for the target transform and it's set up as a serialized field so this is an attribute that you add when you want to expose certain private variables to the unt editor so this tells us that this reference should have been set in the editor so if we go there and yep here we see the issue so we have our move to target script and down here our reference is set to no so in this case the solution is simply to remember to drag the reference so down here is the target just click and drag and there you go and now if we run if there it is now it works the object is moving towards the target so with this we solved our error awesome okay let's look at yet another example so over here i have this game object and then inside it i have a sprite for the player and then inside that one i have a sprite for the helmet now let's say that we want to hide the helmet so here is the script it's very simple we just do a transform we find the player we find the helmet then we access the game object and set it to active to false in order to hide it so let's run and yep there we have our error so again first step double click so the error is on this line now the second step is to analyze this line and try to guess all the possible objects and possible reasons that something could be known here so once again go ahead if you want pause the video and try to figure it out okay so there's really two possible errors in here now in terms of what could theoretically be known the answer is actually four so the transform is a class so it could technically be null then over here each find can return null and then the game object is also class so it could also be technically no however this script is a mono behavior so in order for this run it needs to be attached to a game object and a game object always has a transform component so this transform reference will never be known then we have our two separate finds so these take a name for the child game object and these can indeed return null and lastly we have the game object which is a class which technically could be known however in here we're accessing the game object of whatever transform we come from here so if this one does return transform then it's guaranteed that that transform will also have a game object so just by looking at this line i can tell that the issue is either with this fine or this find so either one of these could possibly be returning no so now let's add some logs before running this line or to identify it now here since one of the fines is a child of the previous fine then we need to make sure that we add the logs in order so first we do a debug.log on the transform.find our player so first we check if that finds 16 and then we check for the other one which is dot find then we have the helmet alright so let's see and yep we have our logs and we can see that one of them is set correctly but the other one is indeed set to no so with this we have correctly identified where the error is now the next step is figure out what to do about it so let's double click to go to the offending line so here it is we can successfully find the player but we cannot find the helmet game object now in this case let's assume that the character is always meant to have a helmet so this line should work so we should not need to do a null checking here and in this case one particular thing is we're using find and the thing we'd find is you have to remember that the name needs to be absolutely exact so here we're calling find on helmet and if we go into the editor and if over here we can see the reason for the error we have helmet typed within uppercase h but in our code we're using a lowercase h now find this case sensitive so this helmet that we're using in here does not match this helmet that we're using in here so since they are not perfectly exact then the find returns no which then causes our error so in this case let's just rename this and write it exactly as we have in the editor and if we run and yep now it works perfectly so the code ran it found the player it found the helmet and it made it invisible okay awesome all right so let's look at one last example over here in my scene i have an object with the script and then inside it there's the circle visual with just this nice visual very simple now let's look at the script okay here it is now what we're doing is we're grabbing the visual then we define a bunch of colors and we do some randomness in order to pick a random color we do all of that just on a weight just once and then on every update we're simply moving the visual transform in order to follow the mouse position so very simple just a circle with a random color following the mouse let's test and yep right away we have our known reference exception so once again let's follow the process so the first step is to go to the offending line so line 26 okay here it is here is the error now step two is analyze and think of what could possibly be set to null here all we're doing is setting a position so the only possible thing that could be known here is just this object so step three is to verify that by adding a log so let's set a debug.log on our circle visual transform and yep we have confirmation that that object is indeed what is said to know so now the final step is to figure out what to do with this null object so in this case it's not meant to be known so that means we need to go back in order to see where this object should have been set now this is a very simple script so in here it's very easy to figure out and by the way here's one quick visual studio tip if you click on an object in order to select it and then press ctrl shift and the up or down arrows you can cycle through all the references where this object is used also if you just place it in you can see them all highlighted now if you want go ahead try to pause the video and figure out why this object has been set to null alright so just by highlighting you can right away see what's actually the issue now you can see that this one is highlighted this one is highlighted and this one as well but this one is not so this tells us that the variable that we're using in these three spaces is different from the one that we're using in here so here we see how c sharp works with regards to member variables and local variables so the goal with this line is to set this field but since we added the type what we're actually doing here is creating a local variable with the exact same name so when we set this to this value we're actually not accessing this field member and since we're not setting this one then this one says no which then caused our error down here so the mistake in this case was simply making this one a local variable if we take away the transform yep there you go now all of our references are indeed referencing the exact same object so one awake we set that one and then on update we can safely use it and if we run and yep there you go now it works exactly as intended so here we have solved yet another possible known reference scenario awesome okay so here we've been solving this problem using debug.log in or to print the values that we think might be known so this is one approach however for a more advanced approach you can also use the debugger so here i am working in visual studio and you can easily add what is called a breakpoint so down here on the left side on this empty space just click and yep it showcases a nice red circle so what this means is that when the code reaches this point it will automatically stop executing so the game is now running and it automatically stopped as soon as it got into this line and down here you have some windows related to debugging so you can click on this one and here you can see the actual value stored in each variable so this is another way that we can see that the circumference will transform so this variable is indeed set to null so this is where we have our error so the debugger is a very useful tool for looking at what the code is doing at any point you can then step through your code step out and so on now personally when it comes to solving known references for me using logs is more than enough and i also like forcing myself to analyze the code and think of what objects could possibly contain the error but you can use whatever approach you prefer alright so i hope this video helped you understand what are null reference exceptions and what caused them and like i said what i hope you take away from this video is not how to solve a specific problem instead i want you to remember the process for solving it so you can fix the error whenever it happens so you first go to the affining line second you analyze and figure out what could possibly be null third you add some logs to see the value stored in edge object and identify which one is set to known and lastly figure out what to do about it depending on the scenario so this is the basic process that can be used to solve the error whatever it may appear so next time you encounter it now you know what to do if you found this video helpful consider liking and subscribing this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone subscribe to the channel for more unity tutorials post any questions in the comments and i'll see you next time you
