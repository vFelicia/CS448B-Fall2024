With timestamps:

00:00 - hello and welcome I'm your code monkey
00:02 - and in this video we're going to make
00:03 - the demo man from Team Fortress 2 in
00:05 - unity we're going to start off by
00:07 - creating the grenade launcher it's gonna
00:09 - fire bouncing grenades have them bounce
00:11 - off walls and damage enemies what the
00:13 - third
00:17 - so I have my Demoman character here with
00:19 - a spreadsheet applying some animations
00:21 - already set up I can move them around
00:23 - and when I click my mouse button it
00:25 - plays a firing animation so let's make
00:29 - some bouncing grenades that won't be
00:30 - fired when we shoot our weapon so into
00:34 - our game ml script here and here I've
00:36 - got a very basic setup I've got my
00:38 - player handler handling the movement and
00:40 - playing the animations for my demo man I
00:43 - have a transform for an enemy that we
00:46 - are going to use later I have the camera
00:48 - phone script which was created in a
00:51 - previous video and it's currently being
00:52 - set up to follow with the camera
00:54 - position it is basically just the player
00:56 - Hamlet positioned shifted slightly
00:58 - towards the mouse so on my coin handler
01:02 - script I have an event being fired on
01:05 - shoot this event is fired when the
01:09 - player plays the shooting animation and
01:11 - inside it on our event args we have the
01:15 - gun endpoint position and our shoot
01:17 - position so we're going to want to spawn
01:20 - the grenade on our gun end point
01:22 - position and move it towards our shoot
01:24 - position which is the mouse position on
01:25 - screen so we're going to fire our innate
01:28 - in here so let's create this court to
01:30 - handle that can here create a new C
01:33 - sharp script and name it
01:35 - bouncy grenade now in here let's make a
01:40 - static creator so public static void
01:43 - creates this won't construct our actual
01:47 - your name so in order to spawn the
01:49 - grenade
01:50 - we need a vector3 for our spawn position
01:53 - and a vector3
01:55 - for our target position and we're also
02:00 - going to need a transform for our 3/5
02:03 - for our bouncy Cornett so let's
02:06 - instantiate our yea or nay prefab into
02:11 - our spawn position with patern n dot
02:13 - identity we're going to apply this class
02:15 - to our prefab so we can grab it right
02:17 - here the renamed
02:22 - and start get component left i-10 net
02:27 - now in here we're going to have a setup
02:30 - function in that setup we are going to
02:33 - receive our target position
02:36 - okay so private point set up inside
02:42 - winter seal vector three for our target
02:44 - position now let us go and create our
02:46 - prefab so make a new prefab name it here
02:52 - bouncy grenade now for that prefab we
02:59 - are going to have a game object with a
03:03 - sprite renderer and we're going to use
03:05 - this sprite right here
03:07 - I'm going to add the bouncy grenade
03:09 - script and we're going to use physics to
03:12 - move our grenade so add a rigidbody 2d
03:16 - and add a capsule Collider 2d make it a
03:21 - bit bigger than the actual visual object
03:23 - okay good let's put on linear drag of
03:25 - two I'm going to drag also to gravity of
03:29 - zero since we're using this on a
03:31 - top-down perspective and we're going to
03:33 - need a material to make it bouncy so
03:36 - create a new physics material 2d
03:38 - conflict bouncy material and it's going
03:42 - to have friction of zero and bounciness
03:44 - of one apply it as our physics material
03:48 - and this is our prefab so back into our
03:51 - code here let's have another serialize
03:53 - field for a transform for our PF bouncy
03:57 - Renee and when we shoot we're going to
04:01 - go into our bouncy grenade dot create
04:04 - we're going to give it this prefab the
04:07 - spawn position won't be the gun end
04:09 - point position and turret positional be
04:11 - the chute position okay let's see for a
04:13 - prefab is being correctly instantiated
04:17 - let's fire and there you go it is
04:19 - spawning exactly on the point that it
04:22 - should okay now obviously let's make it
04:25 - move back into my bouncy grenade and in
04:28 - here on a set up so let us calculate our
04:32 - move the direction which will be the
04:35 - third position - our transformed
04:37 - position let's make it normalize we're
04:41 - going to have a move speed and let's say
04:45 - 250 m and we're going to go into game
04:48 - object get component of type rigidbody
04:52 - to Dean and we're going to set the
04:55 - velocity to our move direction x bar
04:58 - move speed and we're also going to make
05:01 - it aim towards our target position so
05:03 - let's make our transform local Euler
05:06 - angles make it at zero zero and here
05:10 - we're going to use the code monkey dot
05:13 - films to go into our get cells class get
05:19 - angle from vector of our move Direction
05:22 - okay so now our bouncing grenade should
05:24 - be correctly being spawned it should be
05:26 - rotated towards our target position and
05:28 - move towards it let's test it out okay
05:32 - boom there you go
05:34 - it is moving towards there okay great
05:36 - now obviously we don't want them to live
05:37 - forever so let's add some time to
05:39 - explode here the private will time to
05:44 - explode initialize it in here and let's
05:47 - say two and a half seconds we've had a
05:51 - private boy update on our updates time
05:54 - to explode - each one's time Delta time
05:57 - if have to explode is under zero out
06:02 - then destroy our game object and let's
06:07 - see if they vanish after two and a half
06:09 - seconds fire there it is and poof
06:13 - vanished okay great
06:14 - now let's add a wall to test our grenade
06:18 - bounciness so adding you just for test
06:21 - the game object called wall add a sprite
06:24 - renderer add a basic white pixel let's
06:27 - make it in a dark grey and let's
06:31 - increase scale our height and move it
06:37 - around here and add a box Collider 2d
06:40 - okay let's see if it is bouncing off of
06:43 - our walls
06:45 - and yep they're your weekend fire
06:48 - grenades goes into all and bounced the
06:50 - back okay great
06:51 - now let's add a basic bounce effect to
06:55 - make it seem like the grenade is going
06:56 - up and down so at a private int bounce
07:00 - state and to start off at zero and in
07:06 - here we can do a switch on our about
07:10 - state and Cays 0 if it is 0 we're going
07:16 - to increase our local scale so transform
07:19 - dot local scale plus equals vector $3 1
07:25 - times let's say 7f x times down the top
07:29 - now if our transforms out local scale
07:32 - that X if it is bigger than a let's say
07:35 - 2.5 F then change the bound state 1 and
07:39 - here if we have bound state of 1 we're
07:42 - going to reduce it to go down therefore
07:48 - were transformed on scale dot X if it
07:51 - isn't less than 1 F set the bound state
07:54 - to 2 and here case to do nothing okay so
07:58 - it should be increasing and decreasing
08:00 - the scale adding a basic effect
08:02 - simulating vertical up and down yep
08:07 - there you go okay now obviously our
08:11 - grenades need to explode someone set a
08:12 - next motion effect go back into our game
08:15 - hammer and we're going to need another
08:18 - transform what's called TF explosion and
08:21 - then here when we were creating our
08:23 - bouncy grenade we're going to add
08:24 - another parameter for a function that
08:26 - will be called when the bounty grenade
08:27 - actually explodes and we're going to
08:30 - call it on the grenade explode private
08:35 - void on grenade explode and inside we're
08:37 - actually going to receive vector 3 for
08:40 - the position where the grenade exploded
08:41 - so what's going to here and here first
08:44 - we're going to be using system and we're
08:49 - going to receive an action though
08:51 - have friends at four vector3 oh it's on
08:54 - exploded action we're going to add it to
08:57 - our members very lumps here and we're
08:59 - going to add it to the setup okay and
09:02 - now when we actually explode what's
09:04 - making you function phone explode her
09:06 - name and have a private boy explode her
09:11 - name and when you explode we're going to
09:13 - trigger our action sending our current
09:16 - position and destroy this game object
09:21 - okay so now back into our game Hamill or
09:23 - this won't be called
09:24 - when our grenade actually explodes so
09:26 - it's in here that we want to instantiate
09:27 - our explosion prefab so insatiate our PF
09:32 - explosion into our position with what
09:37 - there and our identity ok great for my
09:40 - explosion prefab I am using a free asset
09:42 - from the asset store and let's test it
09:45 - out and see if it is correctly being
09:47 - instantiated I can fire and after two
09:49 - and a half seconds boom there we go it
09:52 - exploded okay great now we also want our
09:56 - grenade to explode after some time but
09:58 - also when they hit certain objects like
10:00 - for example an enemy so in order to do
10:02 - that we are going to create a dummy
10:04 - component to identify which objects
10:06 - should explode on contact going to our
10:08 - scripts and let's create a new C sharp
10:10 - script and just call it exploit on
10:13 - contact
10:14 - open it and just leave it completely
10:17 - blank since we're only using this to tag
10:20 - objects and in here let's create a
10:23 - different wall just for testing purposes
10:25 - drag it to the side make it a different
10:27 - color and we're going to add our explode
10:30 - on contact and we're going to make it a
10:32 - trigger so back into our Vaughn C
10:34 - grenade code here and we're
10:36 - to add a private void on trigger enter
10:38 - to dean very test if the collider that
10:43 - we have that game object contains our
10:46 - component for explode on contact if it
10:50 - is not known if it does contain that
10:51 - component then we are going to explode
10:53 - our grenade so exploit grenade back into
10:56 - our scene and let's see if the grenades
10:58 - explode as soon as they touched this
11:00 - object and boom there you go I can hit
11:04 - that one and nothing happens it says
11:05 - normal and if I hit that one then they
11:07 - explore this and as a touch ok great
11:09 - so let's add some enemies to our scene I
11:12 - have a prefab here with an enemy that
11:14 - simply moves towards the player and I'm
11:16 - going to add the component for explode
11:18 - on contact and back into my game land
11:22 - when I'm here I'm going to use the code
11:24 - monkeytales function periodic which is
11:26 - always you can grab from Unity code
11:28 - monkey comm I'm going to create I'm
11:30 - going to create with the action spawn
11:32 - enemy and let's say every one second
11:35 - spawn an enemy no it says that out and
11:37 - see if enemies are being spawned and if
11:39 - they get hit by the grenades as soon as
11:41 - a touch seen here there's an enemy and I
11:43 - hit him boom he explodes it's not taking
11:46 - damage but it is exploding exactly when
11:48 - they touch okay great
11:49 - so let's actually cause some damage to
11:51 - our enemies so I have the list of my
11:54 - enemies in here and it's when the
11:56 - grenade actually explodes I want to see
11:57 - which enemies are within range of this
12:00 - position so in here I want to do damage
12:04 - units and blast radius so I'm going to
12:07 - have a float for my damage radius and
12:10 - let's say 20 F so here let's create a
12:14 - new temporary list for our enemy handler
12:16 - so we call the original list
12:18 - so 10 enemy and we're list equals a new
12:22 - one of the enemy handler lists way to go
12:25 - for each enemy handler and
12:28 - in enemy in my temp any cameras and then
12:34 - here if my like the three dot distance
12:37 - between the explosion position and the
12:40 - enemy handler get the position if the
12:43 - distance is less than the damage radius
12:46 - and I'm going to damage the enemy I'm
12:48 - going to do enemy handler doc die you're
12:51 - going to die in just one hit and I'm
12:53 - going to remove him from the original
12:54 - and the handler list okay let's see if
12:59 - the enemies are being killed by our
13:02 - grenades there you go there's an enemy I
13:06 - can hit him boom he vanishes okay great
13:08 - and the grenades don't bounce and they
13:10 - can hit okay so now just for fun let's
13:15 - add some screen shake when the grenade
13:17 - actually explodes to our code and have a
13:21 - shake camera and what sane to see one
13:24 - okay so we now have some basic screen
13:27 - shake and now for another effect let's
13:30 - make the enemies fly off screen like we
13:31 - did in a previous video for the flying
13:34 - enemy dead body so I have here this
13:37 - quirk that we created in that previous
13:39 - video and as well as the prefab so let's
13:42 - spawn this first I have a reference to
13:45 - our TF enemy dead body and when the
13:49 - grenade explodes when we kill an enemy
13:51 - trying to go into our flowing body class
13:53 - we're going to create it give it to PA
13:56 - and meet that Bonnie spawn it on this
13:59 - enemy position so enemy hammer god get
14:01 - the position and we're going to move
14:03 - away so let's calculate our effector
14:06 - three for our direction which will be
14:08 - the enemy camera dot get the position -
14:11 - our current position dot normalized now
14:14 - we're going to send that direction okay
14:16 - let's see if we correctly apply the
14:19 - script from previous video okay so here
14:22 - I am there's an enemy and boom there he
14:24 - goes
14:26 - alright so now we have our grenade
14:30 - launcher firing grenades they bounce off
14:32 - of walls and they kill enemies when they
14:34 - touch him even if they don't touch them
14:37 - they explode after two and a half
14:38 - seconds and damage
14:39 - anyone within range okay great and there
14:43 - you have it we have built a grenade
14:44 - launcher with power bouncing grenades on
14:47 - the next video we're going to cover this
14:49 - sticky grenade launcher as always you
14:51 - can grab the project files from unity
14:52 - code monkey comm if you have any
14:55 - questions post them in the comments and
14:56 - I'll do my best to answer them alright
14:57 - see you next time

Cleaned transcript:

hello and welcome I'm your code monkey and in this video we're going to make the demo man from Team Fortress 2 in unity we're going to start off by creating the grenade launcher it's gonna fire bouncing grenades have them bounce off walls and damage enemies what the third so I have my Demoman character here with a spreadsheet applying some animations already set up I can move them around and when I click my mouse button it plays a firing animation so let's make some bouncing grenades that won't be fired when we shoot our weapon so into our game ml script here and here I've got a very basic setup I've got my player handler handling the movement and playing the animations for my demo man I have a transform for an enemy that we are going to use later I have the camera phone script which was created in a previous video and it's currently being set up to follow with the camera position it is basically just the player Hamlet positioned shifted slightly towards the mouse so on my coin handler script I have an event being fired on shoot this event is fired when the player plays the shooting animation and inside it on our event args we have the gun endpoint position and our shoot position so we're going to want to spawn the grenade on our gun end point position and move it towards our shoot position which is the mouse position on screen so we're going to fire our innate in here so let's create this court to handle that can here create a new C sharp script and name it bouncy grenade now in here let's make a static creator so public static void creates this won't construct our actual your name so in order to spawn the grenade we need a vector3 for our spawn position and a vector3 for our target position and we're also going to need a transform for our 3/5 for our bouncy Cornett so let's instantiate our yea or nay prefab into our spawn position with patern n dot identity we're going to apply this class to our prefab so we can grab it right here the renamed and start get component left i10 net now in here we're going to have a setup function in that setup we are going to receive our target position okay so private point set up inside winter seal vector three for our target position now let us go and create our prefab so make a new prefab name it here bouncy grenade now for that prefab we are going to have a game object with a sprite renderer and we're going to use this sprite right here I'm going to add the bouncy grenade script and we're going to use physics to move our grenade so add a rigidbody 2d and add a capsule Collider 2d make it a bit bigger than the actual visual object okay good let's put on linear drag of two I'm going to drag also to gravity of zero since we're using this on a topdown perspective and we're going to need a material to make it bouncy so create a new physics material 2d conflict bouncy material and it's going to have friction of zero and bounciness of one apply it as our physics material and this is our prefab so back into our code here let's have another serialize field for a transform for our PF bouncy Renee and when we shoot we're going to go into our bouncy grenade dot create we're going to give it this prefab the spawn position won't be the gun end point position and turret positional be the chute position okay let's see for a prefab is being correctly instantiated let's fire and there you go it is spawning exactly on the point that it should okay now obviously let's make it move back into my bouncy grenade and in here on a set up so let us calculate our move the direction which will be the third position our transformed position let's make it normalize we're going to have a move speed and let's say 250 m and we're going to go into game object get component of type rigidbody to Dean and we're going to set the velocity to our move direction x bar move speed and we're also going to make it aim towards our target position so let's make our transform local Euler angles make it at zero zero and here we're going to use the code monkey dot films to go into our get cells class get angle from vector of our move Direction okay so now our bouncing grenade should be correctly being spawned it should be rotated towards our target position and move towards it let's test it out okay boom there you go it is moving towards there okay great now obviously we don't want them to live forever so let's add some time to explode here the private will time to explode initialize it in here and let's say two and a half seconds we've had a private boy update on our updates time to explode each one's time Delta time if have to explode is under zero out then destroy our game object and let's see if they vanish after two and a half seconds fire there it is and poof vanished okay great now let's add a wall to test our grenade bounciness so adding you just for test the game object called wall add a sprite renderer add a basic white pixel let's make it in a dark grey and let's increase scale our height and move it around here and add a box Collider 2d okay let's see if it is bouncing off of our walls and yep they're your weekend fire grenades goes into all and bounced the back okay great now let's add a basic bounce effect to make it seem like the grenade is going up and down so at a private int bounce state and to start off at zero and in here we can do a switch on our about state and Cays 0 if it is 0 we're going to increase our local scale so transform dot local scale plus equals vector $3 1 times let's say 7f x times down the top now if our transforms out local scale that X if it is bigger than a let's say 2.5 F then change the bound state 1 and here if we have bound state of 1 we're going to reduce it to go down therefore were transformed on scale dot X if it isn't less than 1 F set the bound state to 2 and here case to do nothing okay so it should be increasing and decreasing the scale adding a basic effect simulating vertical up and down yep there you go okay now obviously our grenades need to explode someone set a next motion effect go back into our game hammer and we're going to need another transform what's called TF explosion and then here when we were creating our bouncy grenade we're going to add another parameter for a function that will be called when the bounty grenade actually explodes and we're going to call it on the grenade explode private void on grenade explode and inside we're actually going to receive vector 3 for the position where the grenade exploded so what's going to here and here first we're going to be using system and we're going to receive an action though have friends at four vector3 oh it's on exploded action we're going to add it to our members very lumps here and we're going to add it to the setup okay and now when we actually explode what's making you function phone explode her name and have a private boy explode her name and when you explode we're going to trigger our action sending our current position and destroy this game object okay so now back into our game Hamill or this won't be called when our grenade actually explodes so it's in here that we want to instantiate our explosion prefab so insatiate our PF explosion into our position with what there and our identity ok great for my explosion prefab I am using a free asset from the asset store and let's test it out and see if it is correctly being instantiated I can fire and after two and a half seconds boom there we go it exploded okay great now we also want our grenade to explode after some time but also when they hit certain objects like for example an enemy so in order to do that we are going to create a dummy component to identify which objects should explode on contact going to our scripts and let's create a new C sharp script and just call it exploit on contact open it and just leave it completely blank since we're only using this to tag objects and in here let's create a different wall just for testing purposes drag it to the side make it a different color and we're going to add our explode on contact and we're going to make it a trigger so back into our Vaughn C grenade code here and we're to add a private void on trigger enter to dean very test if the collider that we have that game object contains our component for explode on contact if it is not known if it does contain that component then we are going to explode our grenade so exploit grenade back into our scene and let's see if the grenades explode as soon as they touched this object and boom there you go I can hit that one and nothing happens it says normal and if I hit that one then they explore this and as a touch ok great so let's add some enemies to our scene I have a prefab here with an enemy that simply moves towards the player and I'm going to add the component for explode on contact and back into my game land when I'm here I'm going to use the code monkeytales function periodic which is always you can grab from Unity code monkey comm I'm going to create I'm going to create with the action spawn enemy and let's say every one second spawn an enemy no it says that out and see if enemies are being spawned and if they get hit by the grenades as soon as a touch seen here there's an enemy and I hit him boom he explodes it's not taking damage but it is exploding exactly when they touch okay great so let's actually cause some damage to our enemies so I have the list of my enemies in here and it's when the grenade actually explodes I want to see which enemies are within range of this position so in here I want to do damage units and blast radius so I'm going to have a float for my damage radius and let's say 20 F so here let's create a new temporary list for our enemy handler so we call the original list so 10 enemy and we're list equals a new one of the enemy handler lists way to go for each enemy handler and in enemy in my temp any cameras and then here if my like the three dot distance between the explosion position and the enemy handler get the position if the distance is less than the damage radius and I'm going to damage the enemy I'm going to do enemy handler doc die you're going to die in just one hit and I'm going to remove him from the original and the handler list okay let's see if the enemies are being killed by our grenades there you go there's an enemy I can hit him boom he vanishes okay great and the grenades don't bounce and they can hit okay so now just for fun let's add some screen shake when the grenade actually explodes to our code and have a shake camera and what sane to see one okay so we now have some basic screen shake and now for another effect let's make the enemies fly off screen like we did in a previous video for the flying enemy dead body so I have here this quirk that we created in that previous video and as well as the prefab so let's spawn this first I have a reference to our TF enemy dead body and when the grenade explodes when we kill an enemy trying to go into our flowing body class we're going to create it give it to PA and meet that Bonnie spawn it on this enemy position so enemy hammer god get the position and we're going to move away so let's calculate our effector three for our direction which will be the enemy camera dot get the position our current position dot normalized now we're going to send that direction okay let's see if we correctly apply the script from previous video okay so here I am there's an enemy and boom there he goes alright so now we have our grenade launcher firing grenades they bounce off of walls and they kill enemies when they touch him even if they don't touch them they explode after two and a half seconds and damage anyone within range okay great and there you have it we have built a grenade launcher with power bouncing grenades on the next video we're going to cover this sticky grenade launcher as always you can grab the project files from unity code monkey comm if you have any questions post them in the comments and I'll do my best to answer them alright see you next time
