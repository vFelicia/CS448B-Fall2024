00:03 - Hey Guys and we'll go back to Lesson on Coding my name Is ryan Lesson
00:08 - So in Today's Video I will be Showing you how to build A very Highly
00:13 - Scalable Project Set up With Angular 4
00:16 - And Web pack so I'll be Showing you Just some extra Tips and Tricks I use Personally in my Project Setups
00:23 - To Make it very Highly Configurable and Available in Depth in Many Different environments so without any further ado,
00:30 - Let's get Started
00:36 - Okay, Guys So to get Started With our Project
00:39 - Setup I'm gonna be Starting This Thing pretty much from Scratch so first Things first
00:44 - We're Going to need to get all of our Dependencies We need
00:47 - For our Project so I was loaded all of Them I'm Gonna be Creating A?
00:50 - Package.json File I'm Gonna Quickly Copy and Paste over all of our Dependencies so
00:56 - In Our dependencies We'll be Stalling things Necessary for anger to run and our dev Dependencies We'll be using Different things for um
01:02 - Web pack and we're using the fittings for Testing and again This will come Full Circle
01:07 - Throughout The Entirety of This Video so
01:10 - We have all Those Things in There and Without Any Further Ado let's?
01:14 - Install Them all so I'm Gonna bring the terminal Up here and I'm Gonna run npm Install
01:20 - Okay so now While that's?
01:21 - Installing This is a great Time for us to talk about typescript so if you don't know what typescript. Is it's a superset of Javascript
01:28 - and
01:29 - It's built by microsoft and the anglin Team Decided that they want Angular to be built with typescript
01:36 - and Gives A whole bunch of Functionality to it and you can get type Safety and
01:41 - One Thing We Gotta Realize Is that, Web Pack being A modular Bundle only Recognize J's Files so to use it
01:49 - Throughout our Application We need to convert These Files from typescript down to Javascript
01:56 - So to do that we're Gonna Be Creating A config file that most ts Owners Understand and will use
02:02 - Okay, so i'm gonna Come in Here Now I'll be Creating a ts config File
02:08 - Oop it's actually Ts config dot Json sorry about that
02:12 - Okay and That's Gonna Quickly Copy and Paste over some Boilerplate I'm Configuration settings
02:18 - So real quick, we're Gonna be Converting our?
02:23 - Ts co Because we're Targeting
02:25 - Job Should be A 6-3 Mckernon Converting it down to Es6
02:29 - and we're Gonna do A couple other Things I'm using Common J's and all our Modules and
02:34 - Node Modular Resolution is a common way to do that have These lives here awesome okay so next Up if You May have
02:42 - Guessed it Is that we, also need A config file for Web pack to you
02:47 - So i want to come in Here When you create A wet pack
02:52 - Configure A js file I'm so quickly Copy/paste this is gonna do it's just Gonna
02:57 - Require A file That we'll be Creating Later?
02:59 - And our config Folder called, Web Pack dev Jazz awesome so when, We run a webpage
03:04 - Web pack we'll go to config File and run that File
03:07 - awesome so next Thing, We will be
03:11 - Thinking About Testing if We actually go to our pack is a json file you will see that, We have the Jasmine?
03:18 - Assertion Library and We also have
03:21 - Karma To run our Tests so again Karma Needs a configuration file so let's Create a Karma Configuration file
03:33 - Okay, i'm just Gonna Copy and Paste over some other Things it's Gonna Just Basically
03:36 - Do what we did in Our Web hack config file Just Gonna Require file that will create Later
03:41 - okay, awesome
03:43 - So next thing up is let's Talk about, Web pack and How it Works
03:47 - So, Web pack Builds a Dependency Graph Through it entry Point
03:52 - For our whole Application it does This by looking at Import Statements
03:57 - So it does This and it Puts all of our Application Code Into one Big Bundle
04:03 - okay so this Bundle
04:06 - If We want to Add cool stuff To it like for example what I love to Use in my Application Just hot Module Reloading
04:12 - If You don't know what how Module Load. Is what it Basically Does is Basically
04:17 - Insert script Tags Into your
04:20 - Application and Then Basically it Updates your Code in Real Time so you don't need to refresh the Browser
04:26 - So it Makes Developing A
04:28 - Whole Lot More fun so the problem with that is We don't want to Keep reloading the Code Every Time
04:35 - We don't want to Keep refreshing it and things that are static, We don't want to Keep Refreshing them because again
04:41 - Web packet Take a while to refresh things that are big so for all of our Static assets, we're Going to put them Into our?
04:48 - separate Bundle
04:50 - So i'm gonna Be Creating a quick vendor dot Ts file in our vendo Ts file and abi
04:56 - Copying and Pasting over all of our static stuff so here's Just A
05:00 - Bunch of Sack Stuff you know Things like Angular like the Angular Compiler and Stuff Like that that won't change Throughout our Application
05:08 - Awesome okay so have all that so next we're Gonna Create one More
05:12 - Bundle
05:15 - Polyfills and Again This Is to set up environments and Compiler Code to be
05:21 - Cross Browser and Cross Platform Compatible
05:24 - okay There, we go awesome and
05:29 - so, we
05:30 - also Had This Thing for Processed and Ve
05:33 - Nv which we'll Be using for our node E and V to set the Environment for our Project which will be Giving to later and
05:40 - This Stuff Here Just Sets of Long Air Stack Traces when, we're Running in development Mode?
05:46 - ok, awesome
05:51 - okay, Guys so before
05:53 - We go in-Depth on our Webpack Configuration let's Quickly Scaffold out in Angular for Application
05:59 - So first things first, we're Going to Bootstrap Angular by Building, or by creating a, main dot Ts
06:05 - File I'm Just Gonna Copy Later over some Boilerplate
06:08 - Bootstrap
06:09 - Configurations so here We go and One Thing to note here, is we're Actually enabling the hot Module
06:15 - Replacement That I alluded to Earlier right Here
06:19 - Okay so got that in There awesome so next Thing up
06:22 - Is we're Gonna Actually Create A folder here I'm Gonna Call it App okay so in our App Folder We'll be Creating an App Component?
06:30 - Dot es file and we'll, also be Creating
06:34 - at
06:36 - Module dot es file okay so our Module Basically
06:40 - Hold our Dependencies or our App Component
06:44 - File has Access to so let's Come in Here I'm Just Gonna Quickly um
06:51 - Scaffold out the Module, oh
06:56 - There it is okay so got that in There and then Just to add A couple things to it
07:04 - We will be Adding?
07:08 - In our Imports, We will be, also adding the Browser Module Which is essential for Angular to run Into Browsers
07:16 - There We go
07:18 - And also it's going to need Access to where our Main Component is so in A components Quickly Scaffold out a Component
07:27 - Awesome Let's Change Some Names here Let's Change this to App
07:31 - Let's Change This to F as, well and we're not using s css. We're Going to be using css
07:37 - The Words Can Change it from Name to App
07:40 - Awesome so let's Come Here and Create Those two files that, we're Missing
07:45 - That HtMl and Then
07:50 - Css. Okay, let's Come in Here Let's Just put in an H1 Tag and be like
07:56 - Hello From The Starter
08:01 - Okay, Gotcha so got that in There so go back to abdominal Let's Declare it Oops Excuse me Let's Declare
08:09 - In our Declarations and Let's also Bootstrap it so we're Gonna add
08:16 - Bootstrap Right Here Oop if I could Spell it Correctly
08:21 - And we're Gonna put it in our App Component so it knows our Main Component to do it to when
08:26 - We quickly Changed this from Feature to App Module?
08:30 - Okay There, We go now we Quickly Scaffold out our Angular for Application
08:38 - So now
08:39 - We're Going to dive More in Depth on our Web Pad Configuration so A web Pet Configuration file will have Three Different environments A
08:46 - Development Environment
08:48 - Production Environment and A testing Environment
08:51 - Okay so with all These Three, environments There is Definitely A lot of Common things
08:56 - Associated Between all Three so, we're Gonna first start Off by Building, A, Web pack Common Configuration file
09:03 - So when I come in Here
09:06 - When I come to our config and we're Going to be Creating A, web pack
09:09 - That Common
09:11 - J's file and so i'm Just Gonna Quickly Copy, over
09:16 - Some of These will be using
09:19 - Webpack our HtMl
09:20 - Web pack Plug-in which this will Actually
09:23 - Insert Dynamically insert A script Tag to our Bundle so we don't need to do that for Us in our index.html file
09:30 - I'm gonna extract Text Plug-in Which Basically Takes all our cSS and Listen To a Different Bundle so when We load our?
09:37 - Application We Could Load our Javascript and cSS in
09:39 - Parallel
09:40 - So things are a Lot a Lot Faster and our Helpers file Here
09:43 - Which Is just Gives us Access to a root Function we'll be using to set up pass Within our Web pack config File
09:50 - So Coming back to the, Web Pack Column let's Come here and Let's do Module Export
09:57 - Okay, the first things first we need to create the entry Where our Web Pack will be Creating our Dependency Graph I look at Those
10:03 - Import Statements so we're Gonna have Three
10:07 - Entries We're Gonna be entering from
10:11 - Polyfills
10:15 - Vendor
10:21 - And we're Gonna Be Entering Through our Angular Application?
10:26 - And that's gonna Be source slash Main
10:31 - Okay so now that, We have all that in There we've Set up our Three Bundles so next Thing up?
10:36 - We're Going to create a resolve
10:42 - Okay, and we're Gonna Resolve on Extensions?
10:50 - Okay, so Whenever Web Pack?
10:53 - Looks at A files in The First Try Resolve it as either a type your file Or A
10:57 - Javascript file so that's why, I didn't have to include it up here
11:01 - Okay so next up, we're Gonna Be Going Into Modules
11:06 - so in the Module, We will be Having
11:10 - Rules and Rules Is how
11:11 - We set up loaders so remember how I said Earlier that We need to compile our?
11:16 - Typescript Files Into J's files This is where I'll be Setting up the logic do that right here so first Things first
11:23 - We're Gonna be Testing
11:26 - for
11:30 - Where's Backslash There it is dot Ts
11:33 - So, we're Gonna be Testing for everything with A, dot ts extension and if We find it we're Going to be
11:41 - so
11:42 - Webpack Wheezy's Loaders and
11:45 - D and a ascending order so it reads it from Bottom to Top so again this is gonna be the last lor that's Gonna
11:51 - Run is going to be the Babel Loader
11:57 - Okay and After that, We will be Running
12:06 - The awesome Typescript Loader so this Loader will Actually convert our Type script Into our
12:15 - Es6 Target that, We put on our Ts config File and then in Options we're Just Going to tell it to
12:32 - The config file Name will Be when Use our Helpers Function?
12:45 - Okay, so there we go and then last but not least we'll be
12:51 - Having One More Loader attached to this so, We will also have our
13:03 - Angular2 Template Loader so the Angular 2 Template Loader to Talk About all Three and What's going
13:08 - On here The Inglot template Loader will Inline all of our templates and Styles That are on our Components Just
13:15 - To give you the visual example right here All These will be Inlined and
13:20 - We need this for Building A ot build which I'll get Into Later
13:25 - So first it does That and then next the awesome type script Loader
13:30 - Takes it from Type script Looks at our Ts
13:32 - Config file Which We tell where to find it and it Loads it Into VS6 Code then
13:36 - We'll have a babel loader do it next and I'll get, Into a second why
13:40 - We have our Babel loader so it's from bot on the Top Is how the loaders Work?
13:45 - okay, so
13:47 - After We have all Those loaders run the last Thing?
13:50 - We're Going to do Is exclude some files There's Just some files that, We don't Care about
13:57 - Running Through our Ts Loader and That's Gonna be our node Modules
14:02 - Okay, awesome so we did that so let's come Down Here
14:07 - and
14:08 - Let's add some More Loaders so I'm Just Gonna Copy and paste These right now to save some Time so we're Going to
14:18 - The Adding A
14:20 - Javascript Loader so When, We have Javascript, we're Gonna run Through our Babel Loader and We have our Presets to?
14:26 - ES2015 so now This is something very Cool, that I specifically used for my Applications so
14:33 - Talking About Browser
14:34 - Compatibility There's A bunch of Different Things a bunch of Different Polyfills to, worry about you know why
14:39 - Worry About Any of that why not Just Have something that Already has Standards Set do it for you that's Exactly what
14:45 - Babel odor With The Presets Es2015 Does
14:49 - So first things first we're Gonna Have to come over Here and create A
14:55 - Babel config file Which Is called da'ville Rc. O
14:59 - Rx Rc
15:01 - Okay and then in our Babel. RC. File Gonna put the Copy over some Boilerplate
15:06 - Configurations okay so what's gonna be doing is gonna be Looking at
15:11 - Different Pi
15:11 - Files That are Already
15:12 - Associated With This type of Setup and it's going to use a latch to Version of Every Browser
15:17 - and Greater Than Or equal to Safari of Version 7 and
15:20 - We're Not gonna Use load Modules again Use again our Ts. Config Files are re Loading Modules
15:25 - for This Through Commonjs
15:27 - So, we do that then, We don't need to, worry about?
15:29 - Compatibility for Browsers
15:31 - So that's Pretty cool saved Us a lot of Time and A Lot of Headache of trying to find the right Polyfills Ourselves
15:36 - So, we're Gonna do that
15:38 - awesome
15:39 - So the next loader We'll be doing Is an Html loader and This will Basically
15:46 - Just Take our HTMl and Throw it Through an Html loader Which
15:50 - We're Gonna Clone Into strings then Basically have it Use as Javascript that our Web head will be able to
15:55 - Recognize so After, We do that
15:58 - I'm gonna set Up a loader real Quick for our images and Different Types of Files
16:04 - So our file Loader will Basically Take
16:07 - Create Pass
16:08 - Well Take all of our Images and Load it Make it compatible With our Bundle and Give us Access to them Through relative Pass
16:16 - Throughout our Application that, We set up through, Web pack awesome and then Another loader we'll be doing Is cSs
16:23 - We will be Having two loaders here?
16:25 - so
16:28 - Not There
16:30 - Right here okay so first of all we're gonna do Is put css to raw loader Which is loads of the strings and
16:36 - Then We're Gonna Be using the extract Text Plug-in Which I talked about Briefly Earlier
16:40 - Which Takes all our csS of our App Bundle and Puts it in A separate Bundles for your loader in Parallel With our Application
16:49 - Okay, awesome so that about does it for all of our Loaders I think
16:53 - We pretty much Covered everything here again you can do Stuff for like A csS for a Pug?
16:57 - Whatever You want to Use but again This is Boilerplate Stuff
17:01 - Typical Things i I See and not Use so we're Gonna leave it here okay so the next thing, we're getting to Is
17:08 - Plugins
17:09 - So a plugins are Basically Just extra Functionality, we're Gonna add
17:13 - So that Web Packet
17:14 - Add to our Application so first things first I'm Gonna Had a context Replacement Plug-in
17:19 - It's just Gonna Help Alleviate some warnings that
17:23 - Might Arise
17:25 - Okay and then After that I will be so
17:29 - Even Though We gave
17:31 - Three Entry Points for our Application Wet Peck isn't smart enough to see Those and Be like oh I need to split the Zonda
17:37 - Three Different Bundles doesn't know so we need to Actually have a plug in Give Webpack the Ability to Recognize
17:44 - Oh hey I need to separate This Into Three Different Bundles
17:47 - So, we're Gonna do that With
17:54 - Not that one, oh, Web pack A, web pack optimized
18:07 - We're Gonna Copy and Paste it my typing Is
18:12 - Subpar Today Alright so we're Gonna Come here Paste the Common Chunks Plug-in so this Basically
18:18 - Lets Web Heck Identify okay, we need Three Bundles to build, okay next and
18:24 - We're Gonna Just do the html, Web Pack Plug-in Which again I talked about Earlier and This will Just Dynamically
18:31 - Insert The script Tag Referencing our Bundle Into
18:36 - Index Id Into index.html and if You Remember, We Didn't Create an Index at html so let's created real Quickly, okay?
18:48 - And then Let's Just Copy and Paste Some things, Over I'm Just Gonna Copy Paste some Boilerplate Things over okay awesome
18:55 - So got that in There and got Reference to my App Which if You remember it was our App dot Components
19:00 - Selectors you Can See right There
19:02 - Awesome okay so there We go, we have our Web Pack Common Build-out?
19:11 - Okay, Guys Let's Go and create our Web Pack def Config file but before We do that let's Fix A couple little Mistakes I made
19:18 - In the Web pack Common File I'm a couple of Typos um this Is not Polyfills that's Probably fill
19:25 - Which is Where I named the file I?
19:27 - Changed out to Probably fill and then let's Come up here and I put it as rules it's Actually Plaus
19:32 - It as Rule Let's put it as Plural as rules, okay?
19:36 - Awesome so now Let's Come in Here and then let's create our Web Page
19:42 - Is file
19:44 - Okay, and I'm Just Gonna Copy over some Stuff that's Gonna Look very similar to our
19:49 - Web pack Common Configuration but you'll Notice that, We have A, web pack merge and A
19:54 - Path To our Exported Comma Configuration so Let's Start Building it
20:05 - Okay, so i'm Gonna Use the, Web pack merge on our Common Configuration?
20:10 - and
20:11 - We're Gonna Add Talking get Some dev Tools in There so when use the Cheap
20:16 - Module
20:18 - Eval Source and so Basically what this is doing Is this is making it Easier for us to
20:24 - Debug The big Bundle That Webpack Creates for us then
20:28 - We're Gonna Create our L Path Configuration so at the very least for A
20:34 - Web pack to Work you need an Entry File and you need an Output
20:40 - Configuration so let's set the Path for it right Now and we're Gonna set it as
20:45 - Helpers Root
20:47 - Disk and so this is where the bundles will be?
20:52 - You Know Export it to will be Exported to the Disk Folder when, We set a public Path for all our Assets as?
20:59 - Just slash
21:02 - We're Going to do some file Naming
21:09 - Bundle Jas and we're Going to serve some Chunk File-Naming
21:27 - Okay so now, We have all that and We have the Bare Minimum to run
21:30 - A, web pack Application so let's go Ahead and let's run it
21:35 - So i'm going to
21:39 - Bring my terminal Up here and if You haven't I have it to gain Access to Webex Cli or you could run it Through
21:47 - The bin Folder and your know Modules or you could run it Through A script in your Pekka's out Json
21:53 - But if You want to run Through a Cli Just run npm install
21:57 - With A Peg - G. Draw, Globally I Already did This so I'm not Gonna do it again and
22:02 - So Once You've Installed it Just run the command Web pack, oh
22:08 - I must have Spelled it Wrong sorry about that Guys Common config okay and then, Let's Grab it back out Here
22:18 - Okay, so here We go?
22:23 - It's Bundling and There We go so as you can See
22:26 - We have a three bundles here the Pile Is that Bottle ijs the App on Logis and oh?
22:32 - We have two Poli We have a polyfills and a polyfill bundles ijs?
22:37 - Probably Because if We have to change something in The Kama Configuration let's go Fix that now?
22:42 - It's going to the Common Configuration like Phil
22:50 - Phil, oh, We got to Change this to Polyfill There, We go okay and Let's run it One more Time
23:07 - Okay There, we go so there, We go, we have our Three bundles right Here?
23:10 - okay and as you Can See
23:12 - We attracted our vendor Bundle and Again I was Talking About Stack Assets and Look that's Three megabytes so you don't need A?
23:18 - Recompile Every Time, We Make Changes to our Code?
23:22 - Okay, awesome so there you go you can See it Bundled and then if We look Into our Folder Structure you will
23:29 - Also See that A Disc file has Been Created and Within our Disk file Is
23:34 - All the Assets that We exported There and Then Within our App Bottle digest you will See kind of what it looks like
23:41 - Sort of Look This is what on the Module bundles Look
23:44 - Like this how this Jumbled Up you know Mess and Then it connects to all these Different things here, okay so
23:52 - Now Let's go back To our Deck Configuration Let's Confits A finished Configure eight
23:58 - Configuring it so after the Output Here
24:03 - The next Thing
24:04 - We're Gonna do Is and give it A dev Server so out of the Box what pack Provides us with the Web Pack dev Server
24:11 - They Became used to run our Application
24:13 - So, we're Gonna Quickly Configure it right Here
24:18 - And we're Going to set the History?
24:24 - to True and This Lets Us use Html5
24:28 - Pushstate Instead of the Hashed Location Strategy and We're Gonna Set the stats as minimal?
24:35 - Now, okay so I got that There so then next up is
24:40 - Plugins so These Are Plugins that are Specific to the dev Environment
24:46 - so it's Gonna Copy over a couple of things
24:52 - Okay and then Just Copy over one More Thing, okay?
24:57 - okay, so
24:58 - The Name Modulus Plug-in Is what we're Gonna Be using to help With our hot Module Replacement
25:03 - On the Web pack Define Plug-in defines Global Variables for us Throughout our
25:08 - Application in This case if We were using an Api on localhost 5,000 this is how you Would Quickly set up
25:16 - The way to use this Throughout your Hob Acacia Make it really
25:19 - Easy to Switch Where your Api calls are hitting when you're Changing Environments and The extract Text Plug-in
25:25 - Again Just Basically is giving it the Name of the css then it's abstracting from our App Daibo Notch Is
25:32 - Awesome okay so there's our Web Pack dev Configuration finished so now let's Move on to our Web pack Production Configuration
25:40 - So i'm gonna Come in Here and
25:43 - I'm going to create a new another file Called
25:46 - Webex Projects
25:48 - okay so in the Prodigious
25:51 - We're Gonna Have again A very similar Configuration
25:58 - But we're Gonna Now Start Setting up environments so before We even Get too far Into This?
26:03 - Let's start Setting up the Environments That
26:05 - We're Going to need for this Application
26:07 - So, we're Gonna do that in The Package that Json so the type of that Json, We have Access to these scripts Here
26:13 - And Through These scripts, We Could Set Different Environments Through Node okay? So let's Set A couple right Now?
26:24 - So first one I'm Gonna Set Is going to be
26:29 - I'm just going to add some Configuration actually to the list right here so
26:33 - It's Already Configured Correctly
26:35 - Just These are Configuration These and - hot
26:39 - Enables Hot Module Replacement for our Deaf Server
26:42 - okay, so first Thing I do Is create A wet Peg Dev
26:47 - And it's gonna run Cross e and V which is a way to set the note Environment Variable on
26:55 - Windows and Other Cross Platforms
26:58 - Node E and V
27:01 - Equals development and then, We run Wet Pack okay and then, we're Gonna Basically have A wet pack
27:09 - Prod Which Is just Gonna run across
27:14 - V and V node E
27:19 - and V
27:20 - Eagles
27:21 - Production and then We're Also gonna run One Pack After that as, well okay so there we go?
27:26 - We set up our Environments here awesome so now we're Gonna Come Back Into our Webp A config File?
27:37 - Really A config, file hold on I gotta Readjust This
27:41 - There it is okay so when
27:43 - We come Back Into our Web Pack and Fig File and we're Gonna Change out how this Is ron so now that We have set?
27:48 - Environment Variables
27:49 - We're Coming here and we're Gonna go by room
27:58 - So when you set the no D&V in the package.json this is Where it's stored I'm gonna See, was equal to the development and?
28:06 - Trimly Or the white Space
28:10 - okay so if
28:17 - So if Environment Equals development, we're Going to
28:23 - Use the dev Environment and
28:27 - If not, we're Going to be using the Production environment
28:43 - okay
28:45 - Awesome okay so now that We have the environment Set up let's go back Into our Web Pack Production
28:59 - Okay and then, we're Going to Quickly
29:05 - Set up the Configuration
29:08 - With What Pack Merge and
29:11 - Basically The Same Thing, We did and what pack dev With the comic Is big
29:17 - So in dev Tools we're Just Gonna Use source map Instead of the Cheap avail source map
29:23 - and
29:24 - For Output, we're Going to be Changing A lot about the Outputs
29:31 - We're Going to still be
29:35 - Not Actually not Changing Anything about the Output, sorry that Misleads you folks, we're Going to use the same Output
29:41 - Configuration
29:42 - That We use for dev and then Plugins will, be a little bit different so
29:47 - Plugins That will be Specific to a Production environment things, We want to do is We Would want to do like?
29:58 - I'm gonna Pick that no amit
30:06 - We want to know millionaires plug in for the Production Code so don't want that Crashing?
30:13 - We would also want to Uglify our Code?
30:15 - And Compress it Down to Make our Module Bundle even Smaller so, we're Gonna do that by using the uglify js
30:22 - Plugin Which will Basically Minify
30:26 - and Compress no Just yeah, well of the fire our Code sorry about that and
30:32 - Then After, We do that We will be using
30:36 - The Extract Text Plug-in
30:44 - Which again will Load our cSS in Parallel to Make it even Faster and
30:49 - Then We will
30:51 - Also Just to show you Guys
30:59 - We will also have a workaround right Here?
31:04 - Okay so there We go there's our Production Environment Setup awesome and so now I'm Just Gonna Quickly um Just to Make Sure everything's Working
31:12 - I'm gonna put in Here
31:16 - Fraud okay so now Let's run, Web Practice Duction Through our
31:22 - Terminal
31:27 - We're On npm run, Web pack pry
31:35 - We were Gonna Just About that Wrong?
31:46 - Oh man i butchered that one
31:52 - All Right There, We go come Back in Here and Let's run it
31:56 - So you See now, we're Running in the prod
32:00 - Folder
32:04 - It Takes a second to compile Because again, we are, also uggla Fiying it during the build Process
32:17 - okay and There we go as you can See our our Bundle Sizes are Significantly Smaller than they were
32:23 - Previously and This Is very Helpful for Building very High Speed Applications
32:29 - Okay, so We have that done and That completes our Production Setup?
32:36 - Okay, Guys Now that, We have built Both our Production and our development?
32:40 - Wet Pad Configuration Files I think it's Time to just run the App and Take a look at. What it looks like
32:47 - So before We Move on to our Test Environment let's do that we're Going to?
32:50 - Come Into our Package dot Json as you can see, we Already have the?
32:55 - Web pack Start Configuration I have a bunch of config These on Arrow With how about you reload
32:59 - Have the Progress Open in The default Browser on Port 8080
33:03 - Awesome Alright so then let's open Up our terminal
33:09 - And then Let's Quickly Navigate To it and then Let's run, Npm run start
33:15 - As you can See it Opens Up right Here
33:21 - Floating, oh
33:25 - We got an Error?
33:26 - Evany, did not Match Any Element, oh?
33:29 - okay so Unfortunately the Joys of live Coding does have some Pitfalls it looks Like I
33:34 - Did miss some Naming up so if We go to our index.html
33:38 - I
33:39 - Named it my App Which I believe in our App dot Component it's Actually App Name so let's go back to
33:46 - index.html Change it to App Name
33:54 - Okay There, We go, awesome so now Let's Navigate Back to our terminal Close It and Rerun it
34:01 - As you can See it's loaded again, We Wait for it to finish Let's put This over here if We get Split Screen view
34:10 - Let's Open This Up and as you can See boom, We have the hello from the Angular Starter
34:15 - Alright and as you Can, also see in our console here, We can see we're in development Mode and we?
34:21 - Also have hot Module Replacement enabled so I know I talked About hot Module Replacement before but Let me Really Show you what it does
34:27 - So if I come Here and I just Add in Let's Say hot Module Replacement Rules
34:35 - and i click
34:36 - Right When I click Outside of Focus it Reloads?
34:40 - When i click and lose Focus and the Application Saves in my Visual Studio code, Ide
34:46 - Automatically Updates Without Any Refresh so this Makes Senior Output
34:51 - Extremely fast and Just like Makes development so much of more Enjoyable
34:57 - Alright so now it's time to move on to the test Environment let's get Started
35:08 - Okay, Guys Now that We Have Created our Webpack Production Environment We need to create?
35:13 - A
Web pack Testing environment so let's get Started so
35:17 - Because I kind of Talked about Earlier We Had to Create that Karma config File and We were Gonna Build on that later so we're?
35:22 - Gonna Start Right now so on the config, on the Create Another Karma config File
35:29 - Okay, and in Here I'm Just Gonna
35:31 - Quickly Pay Some Boilerplate Code and Go
35:34 - Over it Real Quickly so Basically what this is gonna do Is it's Gonna Import our Web Pack Test file Which
35:39 - We're Gonna Create in Just a second I
35:42 - Think you'd Be using Jasmine Here's the Files and the Panics Gonna be Looking for
35:47 - Pre-Processors Right Here is gonna be a Karma Test shim which, we're Gonna Create real Quickly and this Is Just to give it Browser Compatibility
35:58 - Shim yes oh Excuse Me
36:01 - Karma - M - J @o desu wow
36:06 - I'm all over the place here howard test - Shim dot j S
36:10 - Okay and then in Here I'm Just Gonna
36:13 - Paste A whole bunch of Stuff that we'll be using as Shims Oop not that
36:20 - Okay and Just a whole bunch of things, We will be using okay so then back in Here I'm in Our Web Peg Middleware?
36:28 - Stance There's Only With x server, no Info okay then in A reporter's When
36:32 - We using Progress to Report our Test and if We've Already got Poor?
36:36 - 9 8 7 6 so now, We have our Configuration files set up let's go Ahead and Let's Actually
36:42 - Add A test so we're Just Gonna Add one Test and
36:45 - The Test is just gonna be Testing to See if The Tests are Actually Working
36:50 - so
36:51 - We're Gonna Come in Here
36:52 - We're Going to create an App Component Dots back dot es file Then in Here I'm Gonna Basically Copy and Paste
37:01 - What our Tests are Gonna Be doing and it's Basically Just Going to be Creating
37:05 - The Configuration for The Test Environment
37:08 - For our Angular Application and We just be Testing if it's working okay so that We have all that There Let's run our Test?
37:16 - If We remember in our Package that Json We had an Npm run Test?
37:20 - of Command Run that, oh
37:24 - I'Ve got something Wrong up did I forget the Name of something let's Take a look real Quickly
37:28 - Sorry, About that Guys oh I forgot to, Add the Webpack test so let's Add it Real Quickly so webpack die Test
37:36 - Digest is getting Ahead of Myself There sorry about that so in the whip Egg that I'm Just Gonna Copy and Paste it
37:43 - So i'm Specially Gonna Look A lot like other two files not much of a Difference Here
37:50 - I'm just Basically to set the Test environment of how to Basically compile our you know our Tiger Code and Everything Else
37:56 - Okay so now, We have that Let's run our Test One More Time?
38:03 - Yeah, okay, so while we're Waiting?
38:06 - Should Open Up a Browser Any Second Now Once it compiles There, We go, we got it in the Test
38:11 - Pass so There We go, we have set up our Testing Environment that Can Easily be Expanded for Anything Throughout our whole Application?
38:18 - awesome
38:23 - Okay, Guys for the final Part of our Project Setup
38:26 - We'll Be Sending our Angular Application to use the ahead of Time Compiler Now as of right now it's using the Just-In-Time
38:33 - Compiler Which Compiles the Code for Every Instance of the Application Running Which Could slow Down the Performance
38:40 - of our Application and We don't want that
38:42 - We want our App Running at Blazing fast Speed?
38:45 - so there's A couple little tweaks for you to do this Stuff
38:47 - The Angler our Angular Application Wrong With Ahead of Time Compiler so let's dive Right in
38:52 - So first things first I want to show you this List of Engler Don'ts While Building the
38:56 - Building With The äôt. Compiler so as you can see right here, We have a couple of them?
39:02 - Most importantly the ones That
39:04 - We will need is We don't use Require Status for your Temperature Styles We have the used Style Urls and Temple Urls and?
39:10 - That's Where The Angular 2 Template Load of Plug-in that, we?
39:13 - Already Loaded in Our Pegs Adjacent will Help Us out with A couple of things With Forms don't Use default Exports
39:20 - Use public for Any Annotations and
39:24 - Yeah, ok, so
39:27 - Now let's get started, Let's Start Building it so first things first
39:30 - Hangar äôt uses a Different type of
39:35 - Typescript Compiler for This so, We will need to be giving it a Different types or a compiler
39:40 - Configuration so When I come in Here and install a ts config that's A ot that
39:46 - Json File and So I'm Just gonna Come here I'm Gonna
39:50 - Copy and Paste the Code, we're Gonna be using for this and go over it so
39:54 - Again We'll Be targeting Es6 not too, much Just Changed Here
39:59 - These are Juicy Difference, We don't have this anger compile Options Thing here which will be running Through
40:05 - The General Directive äôt, Folder Which is going to be generated when, We run the
40:10 - Angular Typescript äôt Compiler and We're Gonna Step here's the entry Module we'll be using
40:16 - So as you can see the file We'll be Looking for is May not A ot that Ts
40:21 - This is Because the made a ott S is Bootstrapping at module Factory Instead of
40:29 - May Not See s Which is Bootstrapping at Module so let's create our Main dot A
40:35 - Ts file so we're Gonna Come here
40:38 - We do Main dot io tTs
40:41 - There We go then I was Gonna Quickly Copy over this stuff We Gotta Use for that?
40:49 - Okay so there we go and so just again the big Changes, we're using at module Factory Instead of
40:55 - At Module Another Thing you can See is online Safes for enabling proud, Mode so now if We're Running the Maintenance
41:03 - We know that we're using running the Application Through Production Mode and When Angular Runs in development runs?
41:10 - Development Ro Excuse Me
41:11 - Well words all Jumbled Up when Angular Runs in development Mode it runs Actually Two checks on it to See if Any?
41:18 - Expression Change
41:20 - After it was Checked Errors Occur and These are?
41:23 - Take a little bit more Time to run Through the compiled Through the change Detection Through Angular
41:28 - So running enable prom Mode Actually Speeds up your Application a whole Bunch Because it eliminates That Second Check
41:34 - So it'll be enabling Prime Mode Right There
41:37 - Okay, awesome so now, We have to come Into our Web Pack
41:40 - Common
41:43 - Config and We need to change A few Things for our environment
41:47 - So, we're Come in here so in our App so first things first I'm going to define Something right Here
41:56 - We're Gonna define A Variable
41:59 - And We use we're Going to do it is prod Variable so you look at. Process that e&V know. D and V
42:10 - And it's going to Check if it Equals to Production so it's gonna See if its Production or not
42:16 - So i want to come Down here I'm gonna be like, We Use a ternary Operator so it is prod
42:21 - We're Gonna run
42:31 - Okay so if it is proud. We're Going to be Running the Manor
42:36 - That Ts file if it's not Probably going to be Running the Main file okay, who, Made that Ts. Sorry
42:44 - okay
42:46 - What so now, we're Going to come Down Here?
42:48 - And we're Also Gonna have to?
42:52 - Know I think That's Pretty much all we need is to just Change your Bootstrapping the Files from
42:58 - So but Now, we, also need to come Into our Package that Json and so have some scripts to run
43:03 - The äôt, typescript Compiler and Configure The Build so let's add them real Quickly
43:15 - So first things first we're Gonna have to have a build for it so I'm gonna Call build a ot and
43:21 - Build A ot is gonna run the
43:23 - Ng C. Compiler Which is the Head of Time Compiler in Production and
43:29 - We're Gonna run it with ts. Config - a ot json
43:34 - Okay and then, we're also gonna have a build A?
43:38 - Ot prod Which
43:43 - will run npm run build a ot and
43:50 - It will also run npm run, Web pack prod, okay
43:57 - Oop and Let's Fix This right Here
44:02 - Okay There we go?
44:05 - So, we got all that in There so now that We have that in There Let's run our Iot Build?
44:10 - So let's pull up the terminal
44:14 - And let's clear it out real, Quickly now it's from npm
44:18 - Build
44:20 - you know, what I call build - a ot - Price run that
44:42 - I spelled Build wrong some of the Guys Fraud There you go, okay so now, We See wearing the ng C compiler
44:49 - and as you can See now an ao t file has Just Appeared and
44:54 - That's Gonna Contain all of our A ot folders in Here
44:58 - Awesome and Then Now We could See that we're also running on the Web Pack Production config File?
45:04 - So it's Basically going to take that put that Into the Disk Folder
45:09 - So, we're Gonna weigh on that to compile okay and There we go and this Is our Ahead of Time compile or build so now
45:16 - Everything will Be Available Within our Disk for so then all you have to do is Point Whatever server you're using
45:22 - To run the comments When This Disk Folder then, you'll be Running Ahead of Time
45:28 - Compiled Angular for Application
45:32 - All right so
45:34 - Thank You Guys so much for Watching I've Been Wanting to this Video for a while
45:38 - Learning How to do This Myself I mean took you know like A
45:42 - Like a little bit over a year I want to learn it just kind of doing on my Own Looking for Information
45:48 - I'm Happy to Help and I really Just
45:50 - Don't want to see People
45:51 - Suffering From The Same Pitfalls I Had Trying to learn you know Kind of What everything does and how to do this so um
45:57 - Thanks Again for Watching and Yeah Take Care