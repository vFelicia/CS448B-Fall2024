00:00 - this course from Harvard University is
00:02 - an introduction to programming using the
00:05 - Python programming language you will
00:07 - learn how to read and write code as well
00:10 - as how to test and debug it this course
00:12 - is taught by Dr David Malin and it's
00:15 - designed for students with or without
00:17 - prior programming experience who'd like
00:20 - to Learn Python
00:24 - [Music]
00:36 - [Music]
00:39 - foreign
00:40 - [Music]
00:45 - world my name is David Malin and this is
00:48 - cs50's Introduction to programming with
00:50 - python whereas cs50 itself is an
00:53 - introduction to the intellectual
00:54 - Enterprises of computer science and the
00:56 - Art of programming this course is
00:58 - specifically focused on programming in
01:00 - Python itself at the beginning of the
01:02 - course we'll be focus on a topic in
01:04 - programming known as functions and
01:05 - variables mechanisms via which you can
01:07 - write code that solve smaller problems
01:09 - but you can compose those smaller
01:11 - Solutions into solutions to larger
01:13 - problems still we'll then transition to
01:15 - a look at conditionals away in code of
01:17 - expressing yourself logically to maybe
01:19 - do something if some question has an
01:22 - answer of true or not do something if
01:24 - the answer is false we'll transition
01:26 - thereafter to introducing you to Loops
01:28 - the ability and code to do something
01:30 - again and again and again some number of
01:32 - times we'll then transition to something
01:34 - a little more technical known as
01:36 - exceptions unfortunately a lot can go
01:38 - wrong when you're writing code some of
01:39 - it your fault some of it perhaps someone
01:41 - else's fault but you can write code
01:42 - defensively so to speak and actually
01:45 - catch those kinds of exceptions those
01:47 - errors and handle them properly so that
01:49 - the users you're writing code for don't
01:51 - actually see the same thereafter we'll
01:53 - take a look at libraries third-party
01:55 - code written by other people often or
01:57 - perhaps yourself in the past that you
01:59 - can use and reuse in your own project so
02:01 - as to avoid Reinventing the wheel again
02:03 - and again we'll look thereafter at
02:05 - something called Unit tests it turns out
02:07 - you'll actually write code to test your
02:10 - own code but you won't have to write
02:11 - tests for your tests indeed this is a
02:14 - best practice in Industry writing tests
02:16 - for your code so that one you can be
02:17 - sure that your code today is hopefully
02:19 - if your tests are correct correct itself
02:21 - but moreover if you or someone else
02:23 - modifies your code tomorrow or down the
02:25 - line you can rerun those same tests to
02:28 - ensure that those new changes have not
02:30 - broken anything about your own code
02:32 - we'll then take a look at something
02:33 - called file Io Io for input and output
02:36 - the ability to not just store
02:37 - information inside of a computer's
02:40 - memory but rather save it persistently
02:42 - to disk so to speak to files and folders
02:44 - we'll then take a look at another
02:46 - technique known as regular expressions
02:48 - whereby in Python you can Define
02:50 - patterns and you can validate data to
02:52 - make sure the human types something in
02:54 - as you expect you can use regular
02:56 - Expressions to extract data perhaps from
02:57 - some data set you're trying to analyze
02:59 - we'll then take a look ultimately at
03:02 - object oriented programming a paradigm a
03:04 - way of writing code whereby you can
03:06 - represent in code real world entities
03:09 - and this is an addition to other
03:10 - paradigms of programming that we'll also
03:12 - explore among them procedural
03:14 - programming where you write lots of
03:15 - those functions procedures really top to
03:17 - bottom to solve problems step by step
03:19 - and even something known as functional
03:21 - programming as well and then at the very
03:23 - end of the course when we equip you with
03:25 - all the more tools for your toolkit an
03:27 - additional building blocks additional
03:29 - vocabulary via which after the same
03:32 - course you can go off on your own and
03:33 - either take other courses or solve
03:35 - projects of your own using all of these
03:37 - mechanisms now this course itself
03:39 - assumes no prior programming background
03:42 - so you don't have to have written a
03:43 - single line of code in python or n any
03:45 - language yet but this is also a course
03:47 - that you can take before during or even
03:50 - after cs50 itself if you'd like to get
03:52 - all the more versed with python each
03:54 - week via the course's lectures will we
03:56 - introduce you to any number of Concepts
03:58 - that will then drill down more deeply
04:00 - into in the form of problem sets each
04:02 - week that is programming projects that
04:04 - will enable you to apply some of those
04:06 - Lessons Learned to problems of your very
04:08 - own and by the end of the course you'll
04:10 - solve to have solved so many problems
04:12 - that ideally are representative of
04:14 - problems you'll eventually encounter in
04:16 - the real world whether you aspire to
04:18 - solve code in the technical world or
04:20 - perhaps in the Arts the humanities the
04:22 - social sciences the Natural Sciences or
04:24 - Beyond you'll have ultimately the
04:26 - vocabulary and the technical skills via
04:28 - which to approach the same this then is
04:31 - cs50 and this is cs50's Introduction to
04:34 - programming with python
04:43 - foreign
04:45 - [Music]
05:01 - all right this is cs50's Introduction to
05:05 - programming with python my name is David
05:07 - Malin and this is our week on functions
05:09 - and variables but odds are many of you
05:11 - most of you have never actually
05:12 - programmed before so let's start by
05:14 - doing just that let me go ahead here and
05:17 - open up my computer and on it a program
05:19 - called Visual Studio code or vs code
05:21 - which is just a very popular program
05:23 - nowadays for actually writing code now
05:25 - you don't have to write code using this
05:27 - particular tool in fact all we need at
05:29 - the end of the day is a so-called text
05:30 - editor a program for writing text and
05:33 - Heck if you really want you could even
05:34 - use something like Google Docs or
05:36 - Microsoft Word you'd have to save it in
05:38 - the right format but really at the end
05:40 - of the day all you need is a program for
05:41 - writing text because that's what code is
05:43 - text now within this particular program
05:45 - I'm going to have the ability to create
05:47 - one or more files via this top portion
05:49 - of the screen and I'm going to do so by
05:51 - diving right in and doing this at the
05:54 - bottom of my screen at the bottom of my
05:55 - screen is a so-called terminal window
05:57 - and this is a command line interface or
06:00 - CLI enter face to the underlying
06:03 - computer be it your Mac or your PC or
06:05 - even some server in the cloud and what
06:07 - I'm going to do here is literally write
06:09 - code and then the name of the file that
06:11 - I want to code for instance Hello dot pi
06:14 - as we'll soon see any program that you
06:16 - write in Python generally has a file
06:18 - name that ends in dot pi to indicate to
06:20 - the computer that it's indeed a program
06:22 - written in Python now you'll see here at
06:24 - the top of my screen I have a blinking
06:25 - cursor a line one which is where the
06:28 - very first line of my code is going to
06:29 - go and then just a tab that reminds me
06:31 - of the name of this file hello.pi and
06:34 - without even knowing much python I'm
06:36 - going to write my very first program
06:37 - here as follows print open parenthesis
06:40 - quote hello comma World close quote and
06:45 - close parenthesis and you'll see that at
06:47 - my keyboard some of my thoughts were
06:49 - finished for me I only had to type one
06:50 - parenthesis and the other one
06:51 - automatically appeared and that's just a
06:53 - feature that we'll see of tools like
06:55 - this tool here now even if you've never
06:58 - programmed before odds are you can guess
07:00 - infer what the this simple program is
07:03 - going to do and it's only one line print
07:05 - open parenthesis quote Hello World close
07:08 - quote close parenthesis indeed when I
07:10 - run this program ultimately it's just
07:12 - going to say hello to the world and in
07:14 - fact this is a very famous perhaps the
07:16 - most canonical program you can write as
07:18 - your very first program in Python or any
07:20 - other language and so that's what I've
07:21 - done here but on my Mac my PC even my
07:25 - phone I'm generally in the habit like
07:26 - you of running programs by double
07:28 - clicking an icon or just tapping on the
07:30 - screen but I see no such icons here and
07:33 - in fact that's because my interface to
07:35 - at least my current Mac or PC or some
07:37 - server in the cloud is again only a CLI
07:40 - command line interface which even though
07:42 - it might feel like it's a step back from
07:44 - the menus and buttons and icons that you
07:46 - and I take for granted every day you'll
07:48 - find we think that it's ultimately a
07:49 - much more powerful interface and
07:51 - Incredibly popular to use among
07:53 - programmers in the real world so to run
07:55 - this program I'm going to have to use a
07:57 - command and I'm going to move my cursor
07:59 - back down to the bottom of the screen
08:01 - here where previously I already ran one
08:03 - command the command code which has the
08:05 - effect of opening vs code in my computer
08:08 - and then I passed in the name of the
08:10 - file that I wanted to code up now I have
08:12 - a chance to type a second command and
08:14 - you'll see I see a second dollar sign
08:15 - now the dollar sign here doesn't
08:17 - indicate any kind of currency or money
08:19 - it just is the symbol that's generally
08:21 - used to indicate your prompt where the
08:23 - command line interface wants you to put
08:25 - those commands now the command I can run
08:27 - here is going to be this I'm going to
08:30 - run python of Hello dot Pi now why is
08:34 - that well it turns out that when I
08:35 - actually write code in a language like
08:37 - python it's of course stored in that
08:39 - file hello.pi but I need to interpret
08:43 - the code top to bottom left to right so
08:45 - that the computer knows what to do
08:47 - indeed at the end of the day even if you
08:48 - don't really know much about computers
08:50 - you've probably heard that computers
08:51 - only understand zeros in one the
08:54 - so-called binary system well if that's
08:56 - the case then something that says prints
08:58 - and parenthesis and quote unquote hello
09:00 - world is not surely zeros and ones we
09:03 - have to somehow translate it into the
09:05 - zeros and ones that the computer
09:06 - understands now fortunately so long as
09:08 - you've installed such a program in
09:10 - advance there's a program as well as a
09:13 - language called python so python is not
09:15 - only a language in which we're going to
09:16 - write code it's also a program Otherwise
09:19 - Known As an interpreter that you install
09:21 - for free on your own Mac or PC or some
09:23 - server in the cloud and you can then run
09:25 - that program that interpreter passing to
09:28 - it as input the name of your file like
09:30 - mine here hello.pi and then that program
09:32 - that interpreter will handle the process
09:34 - of reading it top to bottom left to
09:37 - right and translating it effectively
09:39 - into those zeros and ones that the
09:40 - computer can understand so let's do just
09:43 - that let me go back to vs code here I
09:45 - already typed out python of hello.pi but
09:48 - I didn't yet hit enter and that's what's
09:50 - now going to kick off this command and
09:51 - hopefully if I didn't mess any of this
09:53 - up I should see my very first programs
09:57 - output to the screen and voila hello
10:00 - world so if you two have typed exactly
10:03 - that same code and have executed exactly
10:05 - that same command you will have written
10:07 - your very first program in this case in
10:10 - Python well now let's take a step back
10:12 - and consider what is it that we actually
10:14 - just did and what is it we're looking
10:15 - here on the screen well first and
10:17 - foremost in most any programming
10:19 - language you tend to have access to what
10:20 - are called functions a function is like
10:22 - an action or a verb that lets you do
10:25 - something in the program and generally
10:27 - speaking any language comes with some
10:29 - predetermined set of functions some very
10:31 - basic actions or verbs that the computer
10:34 - will already know how to do for you that
10:36 - the language really will know how to do
10:38 - for you and you the programmer the human
10:40 - can use those functions at will to get
10:43 - the computer to do those things now the
10:45 - program in question here hello.pi is
10:48 - using one function and you can perhaps
10:50 - guess what it is that function is of
10:52 - course going to be this function print
10:54 - and that print function of course
10:56 - doesn't print some pre-ordained string
10:59 - of text that is to say it Prince
11:02 - whatever it is you want it to print and
11:04 - here too do we have another piece of
11:06 - terminology in the world of programming
11:08 - namely arguments an argument is an input
11:11 - to a function that somehow influences
11:14 - Its Behavior the people who invented
11:15 - python of course didn't necessarily know
11:17 - what it is you and I are going to want
11:19 - to print to the screen so they designed
11:21 - this print function using these
11:23 - parentheses with the ability to take as
11:25 - input some string of text be it in
11:27 - English or any other human language that
11:30 - is what you want this function
11:31 - ultimately to print onto the screen
11:34 - and what is it that the program's
11:36 - ultimately doing on the screen well it's
11:38 - printing of course it's showing us hello
11:40 - world on the screen and that's generally
11:42 - in programming known as a side effect it
11:43 - can be visual can be audio in this case
11:45 - it's something that appears on the
11:46 - screen and functions therefore can
11:48 - indeed have these side effects one of
11:51 - the things they can do as this verb or
11:53 - action is to display on the screen as a
11:55 - side effect something like those World
11:56 - words that we wanted hello world so
12:00 - that's my first program and you know I'm
12:02 - feeling pretty good everything worked as
12:04 - planned I didn't make any mistakes but
12:06 - honestly when you're learning how to
12:07 - program and even once you've learned how
12:09 - to program years later you're going to
12:11 - make mistakes and those mistakes of
12:13 - course are refer to a term you might
12:15 - already know which is that of a bug a
12:17 - bug is a mistake in a program and they
12:18 - can take so many forms and take comfort
12:21 - perhaps in knowing that over the coming
12:23 - weeks you're going to make so many
12:25 - mistakes you're going to have so many
12:27 - bugs in your code just like I did and
12:29 - just as I still do and those bugs
12:32 - themselves are just mistakes that are
12:34 - problems for you to solve and over the
12:35 - weeks to come we're going to give you a
12:37 - lot of tools both mental and Technical
12:40 - via which you can solve those problems
12:41 - but just don't get discouraged if when
12:43 - writing your program for the first time
12:45 - it doesn't even work that first time it
12:47 - will with time with practice and with
12:50 - experience so let me deliberately now
12:52 - make a mistake that there was a non-zero
12:54 - chance I might have done accidentally
12:56 - already but I got lucky let me go ahead
12:58 - and just suppose I forgot to include
13:00 - something like the closing parenthesis
13:02 - at the end of this line of code you know
13:04 - the code is almost correct it's like 99
13:07 - of the way there but now that I've
13:09 - pointed it out it's pretty obvious that
13:10 - it's missing that close parenthesis but
13:13 - even little seemingly Minor Details like
13:15 - that that you and I as humans wouldn't
13:17 - really care about and if you're sending
13:19 - an email or a text message out whatever
13:21 - it's just a typo it's not that big a
13:23 - deal it is going to be a big deal to the
13:25 - computer a computer is going to take you
13:26 - literally and if you don't finish your
13:28 - thought in the way the language expects
13:31 - it's not going to necessarily run at all
13:33 - so let's do this I'm going to go go
13:34 - ahead here and clear my screen down at
13:36 - the bottom just so I can start fresh and
13:38 - I'm going to go ahead and run this
13:39 - version of my program after having made
13:42 - that change by deleting the parenthesis
13:44 - I'm going to go ahead and type python
13:45 - again of hello.pi and this time when I
13:48 - hit enter I'm hoping I'm going to see
13:50 - hello world but here we have an error on
13:53 - the screen a so-called syntax error
13:55 - which refers to my having made a mistake
13:58 - at my keyboard and if this one
14:00 - fortunately is pretty straightforward it
14:02 - indeed says that this open parenthesis
14:04 - was never closed and so that's probably
14:07 - pretty intuitive now what I need to do I
14:10 - need of course to close it unfortunately
14:12 - sometimes the error messages we'll see
14:13 - in the coming weeks are not going to be
14:15 - nearly that user friendly but there too
14:17 - again with experience with practice will
14:19 - you get better at debugging such
14:21 - programs let me now make sure that I
14:23 - indeed fixed it correctly let me go
14:24 - ahead run now hello.pi and hit enter and
14:27 - voila we're back in business well let me
14:30 - pause here and see if we have any
14:32 - questions now about python itself
14:34 - writing or running even the simplest
14:37 - of these programs
14:40 - uh could I write code inside a word or
14:43 - for example Microsoft Excel and what's
14:45 - the barrier to doing that a really good
14:48 - question and allow me to very explicitly
14:51 - say to the entire internet that you
14:53 - should not write code with Microsoft
14:55 - Word I mentioned that only because it's
14:57 - a tool via which you can write text and
14:59 - code is at the end of the day just text
15:01 - but it's not the right tool for the job
15:02 - we don't need bold facing underlining
15:04 - paragraphs and the like we generally
15:06 - want something much simpler than
15:07 - Microsoft Word or Google Docs and so vs
15:10 - code is an example of just a more
15:12 - general purpose text editor its purpose
15:14 - in life is to allow you the human to
15:16 - edit text nowadays these text editors
15:18 - come with many more features in fact
15:20 - you'll notice that even in my code here
15:22 - even though it's just one line there's a
15:24 - bit of color to it the word print for me
15:26 - is appearing in blue the parentheses are
15:28 - black and we'll see as we might write
15:30 - more lines of code more and more of the
15:32 - lines will come to life in various
15:34 - colors now that's just one feature of a
15:36 - text editor we'll see too that it has
15:38 - features like this built-in terminal
15:39 - window it's going to have a built-in
15:40 - tool for debugging or finding problems
15:43 - with code and it's just a very popular
15:44 - tool nowadays but there are many many
15:46 - others out there you're welcome to use
15:48 - them for this course and Beyond we just
15:50 - happen to use this one in large part two
15:52 - because you can also use vs code
15:54 - nowadays for free in the cloud how about
15:57 - one other question here on programming
15:58 - with python or hello world or syntax
16:01 - more generally if
16:05 - it's not possible to run the computer
16:07 - using the terminal window I think I
16:10 - heard is it not if it's possible to run
16:12 - the program without the terminal window
16:15 - yes sir okay you froze for me again but
16:18 - let me infer what the question is so in
16:20 - this environment as I've configured my
16:22 - computer I can only run these python
16:24 - programs via the terminal window now
16:26 - that's good for me the programmer or the
16:28 - person who's trying to learn how to
16:30 - program but it's not very good if you
16:31 - want to ship this software and have
16:33 - other people use your actual code you
16:35 - can absolutely write programs and then
16:38 - allow other people to use not a command
16:40 - line interface but a graphical user
16:42 - interface or GUI GUI this is just one
16:45 - mechanism and perhaps I think the the
16:46 - best one with which to start writing
16:48 - code because eventually it's going to
16:50 - give us a lot more control allow me to
16:52 - forge ahead here but please feel free to
16:54 - continue asking questions along the way
16:56 - if only via the chat and let's consider
16:58 - now how we might go about improving this
17:01 - program let's go about improving this
17:03 - program to make it a little more
17:04 - interactive and not just assume that
17:06 - everyone is going to want to be greeted
17:08 - more generically as hello world let's
17:10 - see if I can't get this program to say
17:12 - something like hello David or hello
17:13 - Jeremiah or hello Horatio or when
17:15 - whatever the actual user's name is well
17:18 - to do this I'm going to go back up to
17:20 - hello.pi and I'm going to add another
17:22 - line of code at the very top that simply
17:24 - says for instance what's your name quote
17:28 - unquote with an extra space at the end
17:30 - so I'm printing to the user asking them
17:32 - a question for some input but now I need
17:34 - another function to actually get input
17:36 - from the user and perfectly enough
17:38 - python comes with a function named input
17:40 - so here I'm going to go ahead and call a
17:42 - function input open paren close paren
17:45 - and that's going to prompt the user with
17:47 - just a blinking cursor waiting for them
17:49 - to type something in now it turns out if
17:51 - I read the documentation for the input
17:53 - function it actually takes an argument
17:55 - itself I don't need to use print
17:57 - separately and then prompt the user for
17:59 - input so I can actually simplify this
18:01 - code before we even use it I'm going to
18:03 - go ahead here and take that same string
18:05 - from print put it as an argument to the
18:08 - input function and get rid of the print
18:09 - altogether and in fact that print would
18:11 - have added a new line anyway so now I've
18:13 - just got a prompt where the user's
18:15 - cursor is going to end up blinking at
18:16 - the end of the line asking them what's
18:18 - your name in my terminal window I'm
18:20 - going to run python of hello.pi enter
18:24 - okay we're making progress it seems that
18:26 - this new function input is indeed
18:28 - prompting me the human for input so I'm
18:30 - going to type in my name David and hit
18:31 - enter unfortunately it doesn't really do
18:34 - anything with my name it just outputs it
18:36 - immediately all right well I could fix
18:38 - this right I could go up to line two and
18:41 - I could change world to David and then
18:44 - back in my terminal window here I can do
18:45 - python of hello.pi enter what's your
18:49 - name David enter and there we go all
18:51 - right now I'm up and running now my
18:53 - program is working as intended of course
18:56 - this isn't really working as intended
18:59 - here let me go ahead and try pretending
19:01 - to be my colleague Carter here well
19:03 - Carter's name is this I'm going to go
19:05 - ahead and hit enter and I'll see of
19:06 - course hello Carter well obviously not
19:08 - because I've hard coded so to speak I've
19:10 - written literally my name inside of the
19:12 - string so we need some way now of
19:14 - actually getting back what the user's
19:17 - input is and doing something with It
19:19 - ultimately and for this we're going to
19:20 - leverage another feature of programming
19:22 - specifically a feature of some functions
19:24 - which is that they can have return
19:26 - values as well if you think of input as
19:29 - being again this action this verb you
19:31 - can actually personify it as maybe a
19:33 - person like a friend of yours that
19:35 - you've asked a question of and you've
19:36 - asked your friend to go get input from
19:38 - someone else go ask that person their
19:39 - name and if your friend comes back
19:41 - knowing that person's name well wouldn't
19:43 - it be nice if they handed that name back
19:46 - to you that's kind of what we need
19:47 - metaphorically the function to do is get
19:49 - the user's input and then hand it back
19:51 - to me so that I the programmer can do
19:53 - something with it but if it's going to
19:56 - be handed back to me I kind of want to
19:58 - put it somewhere so that I can then
19:59 - print it back on the screen I need to do
20:02 - the equivalent of take out like a piece
20:03 - of paper or Post-It note write down on
20:06 - this piece of paper what it is the human
20:08 - has said so that I can then feed it into
20:11 - as input that print function and to do
20:13 - that we're going to need one more
20:14 - feature of programming namely variables
20:16 - and odds are most everyone's familiar
20:19 - with variables for math class way back
20:20 - when X and Y and Z and the like well
20:23 - programming has that same capability
20:25 - this ability to create a variable in
20:28 - this case in the computer's memory not
20:29 - just on a piece of paper and that
20:31 - variable can store a value a number some
20:34 - text even an image or video or more a
20:37 - variable is just a container for some
20:39 - variable a variable is just a container
20:41 - for some value inside of a computer or
20:45 - inside of your own program so how do I
20:47 - go about expressing myself in this way
20:49 - well I think what I'm going to do is
20:50 - introduce a variable that's a little
20:52 - more interestingly named than X or Y I
20:55 - could just say this x equals input but
20:58 - I'm going to use a better name than a
21:00 - typical mathematical variable here and
21:02 - I'm going to literally call my variable
21:03 - name why well in programming because I
21:05 - have a whole keyboard in front of me I
21:07 - can use more descriptive terms to
21:08 - describe what it is I'm writing and now
21:11 - though there's an opportunity to
21:12 - consider a specific piece of syntax
21:14 - we've seen parentheses we've seen quotes
21:16 - all of which are necessary when passing
21:18 - inputs to a function but this equal sign
21:22 - here that's in between input on the
21:24 - right and name on the left is actually
21:27 - important and it's technically not an
21:29 - equal sign per se it doesn't mean
21:31 - equality as much as it means assignment
21:33 - so in Python in many programming
21:36 - languages a single equal sign is the
21:38 - assignment operator and what that means
21:40 - specifically is that you want to assign
21:42 - from right to left whatever the user's
21:45 - input is so the equal sign copies from
21:49 - the right to the left whatever the
21:52 - return value of the function on the
21:54 - right is so again the input function
21:56 - clearly gets input from the user that's
21:58 - why I was able to type my name or
22:00 - Carter's but it also sort of behind the
22:03 - scenes hands that value that return
22:06 - value back to me the programmer and if I
22:08 - use an equal sign and a variable no
22:10 - matter what I call it I can store that
22:13 - input in that variable so as to reuse it
22:16 - later so now sitting in the computer's
22:17 - memory somewhere is a container
22:19 - containing David quote unquote or Carter
22:22 - quote unquote or whatever the human has
22:24 - typed in
22:25 - but here it's easy to make a mistake
22:27 - suppose I decide to try to print that
22:30 - name and so I I kind of on a hunch type
22:34 - in this hello comma name just kind of
22:36 - plugging in the name of the variable
22:38 - well let me go ahead here and run python
22:40 - of hello.pi and hit enter that's going
22:43 - to prompt me for my name and let me type
22:45 - in my name David but I haven't hit enter
22:47 - yet and perhaps via the chat what's
22:50 - going to happen here when I now hit
22:52 - enter I'm hoping it says hello David I'd
22:56 - be okay if it says hello world but I
22:59 - don't want it to say what it's actually
23:00 - going to say and yep what we're seeing
23:02 - in the chat is well it's probably going
23:04 - to say literally hello comma name so
23:06 - that's not quite right so we need
23:08 - another way of printing out the value
23:11 - inside of that variable rather than just
23:13 - this word name well let me try this in a
23:16 - couple of different ways let me try this
23:17 - as follows let me go ahead and maybe
23:19 - undo this because I've gotten pretty
23:21 - good already at saying hello so let's
23:23 - let you know let's draw that Line in the
23:25 - Sand to just say all right let's get at
23:26 - least get hello comma out the door let's
23:28 - now print name and just on a hunch I'm
23:31 - going to try this I'm going to use print
23:32 - again because you can use these
23:34 - functions as many times as you need and
23:36 - I'm going to pass to the name to the
23:38 - print function the variable called name
23:40 - but notice I'm being a little clever now
23:42 - I'm not putting it in double quotes
23:44 - because we've seen already that double
23:45 - quotes means literally print out n-a-m-e
23:48 - I'm getting rid of the quotes this time
23:50 - in hopes that now by passing the
23:53 - variable called name to the function
23:55 - called print it will in fact go about
23:58 - printing the contents of that variable
24:00 - that is its so-called value all right
24:03 - let's go ahead and do this here python
24:05 - of hello.pi enter what's your name David
24:08 - and now crossing my finger still I see
24:11 - hello comma David all right so it's not
24:15 - the best program I'm I'm kind of cutting
24:17 - some Corners here so to speak I'm saying
24:19 - hello David on two separate lines so
24:22 - it's not as elegant it's not as pretty
24:23 - it's not as grammatically appropriate it
24:25 - in English as just saying it all in one
24:27 - breath on one line but at least I've
24:29 - solved the problem just not very well
24:31 - yet but let me take a step back now and
24:33 - perhaps introduce a couple of other
24:35 - concepts with which we should be
24:36 - familiar which is as our programs get
24:38 - longer and they're no longer just one
24:40 - line or two or even three eventually our
24:43 - programs are going to become dozens of
24:45 - lines maybe even hundreds of lines long
24:46 - let's set the stage for Success moving
24:49 - forward it turns out that python and a
24:51 - lot of programming languages also
24:53 - support something called comments
24:55 - comments are notes to yourself in your
24:58 - code and you include comments by way of
25:01 - a special symbol in Python it's going to
25:02 - be the hash symbol typically and that
25:04 - allows you to write the equivalent of a
25:06 - note to yourself but in a way that's not
25:08 - going to break your code the computer
25:09 - actually ignores your comments it's just
25:12 - there for you it's just there for your
25:13 - teacher it's just there for your
25:15 - colleague with whom you're sharing
25:16 - ultimately that code so if I go back to
25:18 - vs code here and I just want to add some
25:21 - comments to this program to explain to
25:23 - my teacher to myself to my colleagues
25:26 - what this program is doing well let's go
25:28 - ahead and do that I'm going to go at the
25:29 - very top of my program and on line one
25:32 - now I'm going to move that original line
25:34 - of code down a bit I'm going to add a
25:36 - hash and I'm going to say something like
25:37 - this ask user for their name now I don't
25:41 - have to use that language I don't have
25:43 - to use that that text I could use any
25:45 - human language whatsoever it doesn't
25:47 - have to be English but I'm going to now
25:49 - below that just say something like this
25:52 - say hello to user and you'll notice that
25:54 - vs code by default is kind of graying
25:56 - out my comments they're no longer blue
25:58 - there's no red there's no color in them
25:59 - and that's just because they're notes to
26:01 - myself and the computer ultimately is
26:03 - going to ignore them but what we have
26:05 - now is two comments ask user for their
26:07 - name and then a second comment say hello
26:09 - to user and I've just kind of commented
26:12 - each chunk of code like each line or
26:15 - lines plural of code that are doing
26:17 - something noteworthy why well tomorrow
26:19 - morning when I wake up having you know
26:21 - uh slept for quite some time forgotten
26:24 - what it is I did the previous this day
26:25 - it's convenient with comments to just
26:27 - see in English or your own human
26:29 - language what it is this program is
26:31 - doing so that you don't have to read the
26:33 - code itself and better yet if there's
26:35 - maybe a mistake down the road you can
26:37 - read what your intention was and then
26:39 - you can look at the code and figure out
26:41 - if your code's now doing what you
26:43 - intended so this isn't really necessary
26:45 - for a program this small it's pretty
26:47 - obvious with just one or two or three
26:49 - lines what the program's doing it's just
26:51 - as fast to read the code than the
26:52 - comments but getting into this habit is
26:54 - generally a good thing to comment your
26:55 - code every one or few lines so as to
26:58 - remind yourself and others what it is
27:00 - your intent and your code is doing
27:02 - what's nice about comments too is this
27:04 - comments can also serve to be sort of a
27:07 - to-do list for yourself there's this
27:09 - notion in programming of pseudo code
27:11 - pseudocode isn't a formal thing it's not
27:13 - one specific language it's just using
27:16 - English or your own human language to
27:18 - express your thoughts succinctly
27:20 - methodically algorithmically so to speak
27:23 - but pseudocode therefore because it's
27:25 - not not Python and it's not necessarily
27:27 - English it just kind of allows you to
27:29 - outline your program even in advance so
27:31 - for instance if I wasn't sure today how
27:34 - I wanted to go about writing this
27:35 - program but I didn't know what I want to
27:37 - do I could have started today by just
27:40 - writing this in hello.pi no code I could
27:43 - have written just a couple of comments
27:45 - to myself step one ask user for their
27:47 - name step two say hello to user then
27:50 - once I've outlined my program in
27:51 - pseudocode then I can go in there and
27:53 - say all right how do I ask the user for
27:55 - their name well I can do input quote
27:57 - unquote what's your name question mark
27:59 - and then on the left here I can maybe
28:01 - put a variable and assign it to that
28:03 - okay how do I say hello to the user well
28:05 - I know I can use print to say things on
28:07 - the screen let me say hello comma and
28:10 - let me okay let me now print the
28:12 - person's name so again pseudocode is a
28:14 - nice way of structuring your to-do list
28:16 - especially if you have no idea how to
28:19 - write the code because it breaks a
28:20 - bigger program down into small
28:22 - bite-sized tasks all right let me call
28:25 - us here to see if there are now any
28:26 - questions on comments pseudo code return
28:30 - values or variables
28:34 - any questions we can clear up here
28:37 - yeah my question is uh does the function
28:39 - input work for any type of information
28:42 - or only for Words yeah really good
28:46 - question so according to its
28:47 - documentation and we'll look more at
28:49 - formal documentation soon input is going
28:51 - to expect what's called a string that is
28:53 - a sequence of text be it in English or
28:55 - any other human language but it's indeed
28:57 - going to be expecting text with which to
28:59 - prompt the user a good question how
29:02 - about another question from the group if
29:04 - we could I I wanted to ask how I make a
29:07 - server line comment
29:09 - oh how do you do many lines of comments
29:10 - if I'm hearing it correctly sure uh you
29:13 - would just keep doing them like this you
29:16 - just prefix each of the lines with a
29:19 - hash symbol like I'm doing here there is
29:22 - another technique for doing multi-line
29:24 - comments in Python that actually tend to
29:25 - have special meaning you can do three
29:27 - double quotes like this and then
29:29 - anything in between here is a comment
29:32 - that's another technique or you can use
29:34 - single quotes as well but more on those
29:36 - I think another time
29:38 - all right well if you don't mind let me
29:39 - Forge ahead here and see how we might
29:41 - improve this program further and also
29:43 - introduce a few other features that we
29:45 - might want to take into account over
29:47 - time so it turns out that we can
29:49 - certainly improve on this program
29:51 - because it's a little disappointing that
29:54 - I'm cutting this corner and saying hello
29:55 - comma and then on a new line printing
29:58 - out name like we can do better and most
30:00 - programs you use on your phone or your
30:01 - laptop certainly keep text together when
30:04 - people want so how can we go about doing
30:06 - that well there's a few different ways
30:07 - and in fact the goal here is not so much
30:09 - to solve this one problem but to
30:11 - demonstrate and emphasize that in
30:12 - programming Python and other languages
30:14 - there's so many ways sometimes to solve
30:17 - the same problem and here's one way to
30:19 - solve this problem let me go in here and
30:22 - let me go ahead now and say hello comma
30:25 - and let me just add to the end of that
30:28 - the user's name so I'm using Plus in
30:32 - kind of an interesting way this is not
30:33 - addition per se I'm not adding numbers
30:35 - obviously but I do kind of want to add
30:38 - add the person's name to the string of
30:41 - text hello comma well let me go now down
30:44 - to my terminal window and run python if
30:46 - hello.pi again enter what's your name
30:48 - I'm going to type in David enter okay
30:51 - it's better it's better but there's a
30:54 - minor bug albeit aesthetic here there's
30:56 - missing space but let's just use some
30:58 - intuition here well if I'm missing the
30:59 - space after the comma why don't I go
31:01 - ahead and just add it manually here let
31:04 - me now rerun the program python of
31:06 - hello.pi enter David enter and there we
31:09 - go now we have something that looks a
31:10 - little prettier in terms of English
31:12 - grammar hello comma space David and now
31:15 - if we rewind you might have noticed
31:17 - before or wondered why I had this
31:20 - seemingly extra space after my question
31:22 - mark namely here there's a space after
31:24 - the question mark before the double
31:26 - quote and that was just for Aesthetics
31:28 - too I wanted to move the user's cursor
31:29 - one space to the right so that when I
31:32 - type their name or they type their name
31:33 - it's not immediately next to that same
31:36 - question mark there but there's other
31:38 - ways we can do this it turns out that
31:40 - some functions print among them actually
31:43 - take multiple arguments and it turns out
31:46 - that if you separate the inputs to a
31:49 - function the so-called arguments to a
31:51 - function with a comma you can pass in
31:53 - not just one but two three four five
31:56 - onward so let me go ahead and pass in
31:58 - not just hello comma space but that
32:02 - followed by name and this is a little
32:04 - confusing potentially at first glance
32:06 - because now I've got two commas but it's
32:07 - important to note that the first comma
32:09 - is inside of my quotation marks which is
32:13 - uh simply an English grammatical thing
32:15 - the second comma here is outside of the
32:18 - quotes but between what are now two
32:20 - separate arguments to print the first
32:22 - argument is hello comma space the second
32:24 - argument is the name variable itself so
32:27 - let's see how this looks
32:29 - python of hello.pi enter what's your
32:32 - name David enter okay I've kind of over
32:35 - corrected now I've got two spaces for
32:37 - some reason well it turns out and this
32:39 - is subtle when you pass multiple
32:41 - arguments to print it automatically
32:44 - inserts a space for you this was not
32:46 - relevant earlier because I was passing
32:48 - in one big argument to print all at once
32:52 - by using that plus operator this time
32:55 - I'm passing in two because of the comma
32:57 - so if I don't want that extra space I
32:59 - don't need to pass in one myself I can
33:01 - just do this and now notice if I run
33:03 - this program again pythonoflo.pi type in
33:06 - my name David now it looks grammatically
33:09 - like I might want now which of these
33:11 - approaches is better this approach uses
33:13 - a function print with two arguments
33:15 - hello comma and the name variable the
33:19 - previous version recall technically used
33:21 - one argument even though it looked a
33:23 - little curious It's one argument in the
33:25 - sense that the computer just like
33:26 - mathematicians are going to do what's
33:28 - inside of parentheses for first so if
33:30 - inside of parentheses you have this
33:31 - string of text hello comma and a space
33:35 - which I need to add back then you have a
33:37 - plus which means not addition per se but
33:39 - concatenation to join the thing on the
33:42 - left and the thing on the right this
33:44 - ultimately becomes the English phrase
33:46 - hello comma space David and then what's
33:50 - being passed ultimately to the function
33:52 - is technically something like this but
33:55 - it's doing it all dynamically it's not
33:57 - me typing in David as I I secretly as I
34:00 - discreetly did earlier it's figuring out
34:02 - dynamically what that value is after
34:04 - concatenating hello with the value of
34:06 - name and then passing that ultimately to
34:09 - print as the sole argument let me pause
34:12 - here to see if there's any questions on
34:14 - numbers of arguments now
34:17 - to functions
34:19 - can we use a function many times to
34:22 - solve a certain problem which we can
34:24 - encounter many times in our code
34:26 - you can you can use a function many
34:28 - different times to solve some problem
34:30 - what we'll soon see though is if you
34:32 - find yourself as the programmer solving
34:34 - a problem the same way again and again
34:37 - and again it turns out you'll be able to
34:39 - make your own function so that you don't
34:40 - have to keep reusing the basic ones that
34:43 - come with the language
34:45 - I was curious about the comma and the
34:48 - plus sign so after plus sign can we give
34:51 - just one variable and after comma can we
34:53 - give multiple variables like what is the
34:55 - difference a good question so in the
34:58 - context of strings and I keep using that
35:00 - term string is a technical term in a
35:02 - programming language and again it means
35:03 - a sequence of text a character a word a
35:06 - whole paragraph even so the plus
35:09 - operator is not just used as we'll see
35:11 - for addition of numbers in Python like
35:14 - we do on paper pencil but it also is
35:17 - used for concatenation of strings on the
35:18 - left and the right if you did want to
35:20 - combine not just two strings left and
35:22 - right but a third and a fourth you can
35:24 - absolutely keep using plus plus plus
35:27 - plus and chain them together just like
35:29 - in math eventually that's going to start
35:31 - to look a little ugly I dare say
35:33 - especially if your line of code gets
35:35 - long so there's better ways that we'll
35:36 - actually soon see and a good question as
35:39 - well well let me come back to the code
35:41 - here in question and see if we can't
35:43 - show you just a couple of other ways to
35:44 - solve the same problem along the way
35:46 - emphasizing that what we're technically
35:48 - talking about here yes are strings but
35:50 - there's even a technical term for these
35:52 - strings in Python it's just stir so to
35:55 - speak Str for short for string as you
35:58 - may know if you programmed in other
35:59 - languages people who invent programming
36:01 - languages like to be very succinct to
36:03 - the point so we tend to use fairly short
36:06 - phrases to describe things not
36:08 - necessarily full words so while you
36:10 - might say string technically in Python
36:12 - what we're really talking about these
36:14 - sequences of text are technically stirs
36:16 - this is an actual type of data in a
36:19 - program but we'll soon see that there's
36:20 - other types of data in programs as well
36:23 - in fact let's see if we can't improve
36:25 - this in one other way I like the
36:27 - progress we've made by keeping
36:29 - everything on the same line hello comma
36:31 - David
36:32 - all on the same line what more though
36:34 - could we do in terms of solving this
36:36 - problem well it turns out that we didn't
36:38 - have to give up entirely with using
36:41 - print twice let me rewind a little bit
36:43 - and go back to that earlier version
36:45 - where I wasn't really sure how to solve
36:47 - this problem so I was using print once
36:49 - to print out just the hello and the
36:51 - space and the comma and then I use print
36:53 - again to call to print name that
36:56 - strictly speaking wasn't bad but there
36:58 - was this visual side effect that I just
37:00 - didn't like it just looked ugly to have
37:03 - these two lines of text separate from
37:04 - one another but there's another way to
37:06 - fix this clearly it seems to be the case
37:09 - that the print function is automatically
37:12 - outputting a blank line it's moving the
37:14 - cursor automatically for me to the next
37:16 - line because that's why I'm seeing hello
37:19 - on one line and David on the next and
37:21 - then my prompt the dollar sign on the
37:23 - line below that so print seems to be
37:25 - presuming automatically that you want it
37:27 - to move the cursor to the next line
37:29 - after you pass it some argument but you
37:31 - can override that Behavior again
37:33 - functions take arguments which influence
37:35 - their behavior you just have to know
37:37 - what those arguments are and it turns
37:39 - out that if we look at the documentation
37:42 - for Python's print function we can
37:45 - actually look up at this URL here
37:48 - docs.python.org is where all of Python's
37:50 - official documentation lies if I poke
37:52 - around I can find my way to more
37:54 - specifically this URL here where I can
37:57 - find all of the available functions in
37:59 - Python
38:00 - that and the documentation therefore and
38:02 - if I go a little more precisely I can
38:04 - even find specific documentation for the
38:07 - print function itself and rather than
38:09 - pull that up in a browser I'm going to
38:10 - go ahead and highlight just one line
38:11 - from that same URL which is this and
38:15 - this is easily the most cryptic thing
38:16 - we've seen yet but this is the official
38:19 - documentation for the print function and
38:21 - one of the best things you can do when
38:22 - learning a programming language is
38:24 - honestly learn to read the documentation
38:26 - because truly all of the answers to your
38:28 - questions will in some way be there even
38:31 - though admittedly it's not always
38:32 - obvious and I will say too Python's
38:34 - documentation isn't necessarily the
38:36 - easiest thing especially for a first
38:38 - time or a novice programmer it too just
38:40 - takes practice so try not to get
38:42 - overwhelmed if you're not sure what
38:43 - you're looking at but let me walk you
38:45 - through this example this again is a
38:47 - line of text from Python's official
38:48 - documentation for the print function
38:50 - what this indicates as follows is this
38:52 - the name of this function is of course
38:54 - print then there's a parenthesis over
38:56 - here and another close parenthesis way
38:58 - over there everything inside of those
39:00 - parentheses are the arguments the
39:02 - potential arguments to the function
39:04 - however when we're looking at these
39:07 - arguments in the documentation like this
39:10 - there's technically a different term
39:12 - that we would use these are technically
39:14 - the parameters to the function so when
39:16 - you're talking about what you can pass
39:18 - to a function and what those inputs are
39:21 - called those are parameters when you
39:24 - actually use the function and pass in
39:26 - values inside of those parentheses those
39:29 - inputs those values are arguments so
39:31 - we're talking about the exact same thing
39:33 - parameters and arguments are effectively
39:35 - the same thing but the terms you use
39:37 - from looking at the problem from
39:38 - different directions when we're looking
39:40 - at what the function can take versus
39:42 - what you're actually passing into the
39:43 - function so what does this imply well
39:45 - this syntax is pretty cryptic but at the
39:48 - moment just know that an asterisk a star
39:50 - and then the word objects means that the
39:53 - print function can take any number of
39:54 - objects you can pass in zero strings of
39:57 - text one string like I did two strings
39:59 - like I did or technically infinitely
40:01 - many if you you really want though that
40:03 - code's not going to look very good after
40:05 - that we see a comma then we see another
40:07 - parameter here called sep short for
40:10 - separator in English and notice the
40:13 - equal sign and the single quote space
40:15 - single quote so quote unquote space I
40:19 - don't know what that is yet but I I
40:21 - think we've seen a hint about it let's
40:22 - focus though for a moment on this the
40:24 - print function takes another parameter
40:26 - called end and the default value of that
40:29 - parameter is apparently based on this
40:31 - equal sign and these quotes backslash n
40:34 - and what is backslash n if you'd like to
40:37 - chime in the chat anyone who's
40:39 - programmed before has probably seen this
40:40 - though if you've never programmed before
40:42 - this might look quite cryptic
40:45 - backslash n
40:47 - means new line and it's a way textually
40:50 - of indicating if and when you want the
40:53 - computer effectively to move the cursor
40:54 - to the next line create a new line of
40:57 - text and so technically if we read into
40:59 - the documentation we'll see more detail
41:01 - on this the fact that there's a
41:03 - parameter called end in the
41:05 - documentation for the print function
41:07 - just means that by default this print
41:09 - function is going to end every line with
41:12 - backslash n you don't literally see
41:14 - backslash n you see a new line you see
41:16 - the cursor moving to the next line now
41:18 - by that logic let's move backwards sep
41:21 - for separator the default value of
41:23 - separator is apparently a single Blank
41:26 - Space well where have we seen that well
41:29 - recall in an earlier example when I
41:31 - passed in not just one but two arguments
41:34 - to the print function recall that they
41:36 - magically had a space between them in
41:38 - fact they had that space plus my own
41:40 - space and that's why I deleted my space
41:42 - because at that point it was extra so
41:44 - this just means that when you pass
41:45 - multiple arguments to print by by
41:47 - default they're going to be separated by
41:48 - a single Space by default when you pass
41:51 - arguments to print it's the whole thing
41:53 - is going to be ended with a new line now
41:56 - just by knowing this and let me
41:57 - literally wave my hand at the rest of
41:59 - the documentation for another day
42:01 - there's more things that print can do
42:02 - but we're going to focus just on sep and
42:04 - on end let's see if we can't leverage
42:06 - this now to solve that original problem
42:08 - the original problem was this I don't
42:10 - like how hello comma David is on two
42:12 - different lines well that's happening
42:14 - again because print is automatically
42:16 - printing out a new line so let's tell it
42:18 - not to do that let's Tell It by passing
42:21 - a second argument to the first use of
42:24 - print to say end equals quote unquote
42:28 - not backslash n which is the default
42:31 - automatically let's make it quote
42:34 - unquote nothing else let's override the
42:38 - default value so there is no new line
42:39 - there's literally nothing there and
42:42 - let's see what happens let me now go
42:44 - down to my terminal window and clear it
42:46 - and I'm going to run python of hello.pi
42:48 - enter I'm going to type in my name David
42:50 - and I think now everything's going to
42:52 - stay on the same line because and it did
42:55 - this line here 5 is going to print out
42:58 - hello comma space but then nothing at
43:01 - the end of it because I changed it to be
43:03 - quote unquote the second line is going
43:05 - to print the name David or whatever the
43:07 - human's name is and it will move the
43:09 - cursor to the next line because I didn't
43:11 - override the value of n there just to
43:14 - see this more explicitly if you do
43:16 - something cryptic like well I have no
43:18 - idea what's going on let me just put in
43:20 - temporarily three question marks here
43:22 - we'll see the results of this too let me
43:24 - go back down to my terminal window run
43:26 - pythonflo.pi what's your name David and
43:29 - now you see literally really ugly output
43:32 - but you see literally what's going on
43:33 - hello comma space then three question
43:36 - marks and that print statement and then
43:39 - you see DAV ID so not a good outcome but
43:44 - it demonstrates just how much control we
43:46 - have here too and let me rewind further
43:48 - recall that in our other version of this
43:50 - when I passed in hello comma and name
43:53 - they were separated by a single space so
43:57 - python of hello.pi
43:58 - d-a-v-i-d enter that just worked well
44:02 - what if we override the value of sep for
44:05 - separator instead of being one space we
44:08 - could say something like uh question
44:11 - mark question mark question mark just to
44:12 - wrap our minds around what's going on
44:14 - there let me now do python of hello.pi
44:17 - David enter and you see two these two
44:21 - inputs hello comma and the name are now
44:24 - separated in an ugly Way by three
44:26 - question marks because I've overridden
44:28 - the default behavior of sep and even
44:31 - though the documentation uses single
44:32 - quotes I've been in the habit of using
44:34 - double quotes in Python you can use
44:36 - either strictly speaking it doesn't
44:37 - matter but you should be consistent and
44:39 - I generally always use double quotes
44:41 - Python's documentation though always
44:43 - uses single quotes
44:46 - questions now on these types of
44:49 - parameters and allow me to propose that
44:51 - we give these an official name up until
44:54 - now when we've been passing values to
44:56 - print those are called positional
44:58 - parameters positional in the sense that
45:00 - the first thing you pass to print gets
45:02 - printed first the second thing you pass
45:03 - to print after a comma gets printed
45:05 - second and so forth but there's also
45:07 - these things we've now seen called named
45:09 - parameters named SCP separator or end
45:13 - end for the line ending those are named
45:16 - parameters because one they're optional
45:18 - and you can pass them in at the end of
45:21 - your print statement but you can also
45:23 - call use them by name this may be a
45:27 - weird question but I was wondering uh
45:29 - what if someone wants to like add
45:31 - actually quote quotation marks within
45:34 - the quotation marks yeah I like how you
45:37 - think this is what we would call a
45:39 - corner case right just when we've made
45:40 - right this is this is all sounding great
45:42 - at least as as programming goes but wait
45:44 - a minute what if you want to print a
45:46 - quote that's a really good question well
45:48 - let's see if we can't figure this out
45:49 - suppose that I want to print out not
45:52 - just the user's name let me simplify
45:54 - this further let me go ahead and get rid
45:55 - of all out of this and let me just say
45:58 - something like hello
46:01 - um
46:02 - maybe I'm being a little sarcastic here
46:04 - hello friend you know in that kind of
46:07 - tone well this is not gonna work
46:09 - actually because you are trying to use
46:11 - quotes to be like friend and finger
46:14 - quotes but you're also trying to end the
46:15 - sentence and if I try running this let's
46:17 - do this pythonf hello.pi you'll see that
46:19 - this is just invalid syntax perhaps you
46:21 - forgot a comma and this is actually a
46:23 - bit annoying sometimes the error
46:25 - messages you see are misleading like the
46:27 - computer the language doesn't really
46:28 - know what's going on so it gives its
46:30 - best guess but it's not necessarily
46:32 - correct but I can solve this problem in
46:35 - a couple of ways I can do this I can
46:37 - change my outermost quotes to single
46:39 - quotes because recall a moment ago I
46:41 - said you could use double quotes or
46:43 - single quotes so long as you're
46:44 - consistent so that's fine if you use
46:46 - single quotes on the outside you can
46:48 - then use double quotes on the inside and
46:50 - you'll see them literally so for
46:51 - instance if I run python if hello.pi
46:54 - there we go hello friend but there's
46:57 - another way if you insist on using
46:59 - double quotes as you might want to just
47:01 - because consistent you can also use that
47:04 - backslash character again we saw the
47:06 - backslash n a moment ago and that meant
47:08 - we don't want a literal n to be in the
47:11 - output we wanted a new line so the
47:13 - backslash actually represents what's
47:14 - called an escape character an escape
47:16 - character is one that you can't just
47:18 - type necessarily once on your keyboard
47:21 - you need to express it with multiple
47:22 - characters so I can actually put
47:24 - backslashes in front of these inner
47:27 - double quotes so that the computer
47:29 - realizes oh wait a minute those aren't
47:31 - literal those aren't quotes that finish
47:33 - or start the thought they're literal
47:35 - quotes So now let me go back to my
47:36 - terminal window run python of hello.pi
47:39 - enter and now it's working as well so
47:42 - escaping is a general technique that
47:44 - allows us to do that too
47:46 - and if I may let me rewind now on these
47:49 - examples and go back to where we left
47:51 - off with my code I'm just undoing all of
47:54 - that because I want to get back to the
47:56 - point ultimately of specifying now a
47:59 - final way of solving this problem well
48:02 - it turns out that we have yet another
48:04 - way we can solve this problem which is
48:05 - perhaps the most frequently done now or
48:09 - at least the most elegant when it comes
48:12 - to setting us up for longer and longer
48:15 - uses of strings you can use a relatively
48:18 - new feature of python that allows you to
48:21 - do this you can literally put not the
48:23 - name of the variable like that in your
48:25 - string because we already saw this is
48:26 - wrong right if you do this you will
48:28 - literally see hello comma name but what
48:30 - if I do this what if I put curly braces
48:33 - or curly brackets around the variable's
48:35 - name notice vs code is actually very
48:37 - subtly changing the color of it so vs
48:39 - code knows something interesting is
48:40 - going on here let me run this program
48:42 - but I'm not done yet python if hello.pi
48:45 - enter DAV vid enter okay obviously not
48:49 - what I want but I need to tell python
48:51 - that this is a special string this is
48:53 - what we're going to call a format string
48:55 - or an F string a relatively new feature
48:57 - of python in the past few years that
49:00 - tells python to actually format stuff in
49:03 - the string in a special way and the
49:05 - symbol via which you do this is a little
49:07 - weird but this is what the World shows
49:09 - if you put a f at the beginning of the
49:12 - string right before the first quote Mark
49:15 - that's a clue to python that oh this is
49:18 - a special string let me format this in a
49:20 - special way for you let me now rerun the
49:22 - program python hello.pi enter David
49:25 - enter and now we see the goal this whole
49:28 - time hello comma David we don't start
49:31 - with this way because I think if we did
49:32 - this the first way you'd be like why are
49:34 - we doing this what are all these magical
49:36 - symbols but this is just yet another way
49:38 - to solve the same problem but let me
49:40 - propose that we consider now yet other
49:43 - things we can do with strings and it
49:45 - turns out that even as we've been doing
49:47 - some relatively simple operations here
49:49 - we've generally been trusting that the
49:51 - user is going to cooperate and that is
49:53 - to say that they're going to actually
49:54 - type in what we want them to type now
49:56 - just because they type A String though
49:58 - doesn't mean it's going to look the way
49:59 - we want you and I honestly as humans are
50:02 - actually in the habit on websites and
50:04 - apps of like accidentally hitting the
50:06 - space bar a lot either at the beginning
50:07 - of our input or at the end maybe because
50:09 - the space bar tends to be so big it's
50:11 - pretty common to get accidental spaces
50:13 - before or after some user's input you
50:16 - and I are definitely in the habit of not
50:18 - necessarily capitalizing words like we
50:20 - should if we're sending text messages
50:21 - we're probably being a little quick and
50:23 - just sending everything in lower case
50:24 - for instance if that's your style if
50:26 - your phone's not fixing it for you maybe
50:28 - in a formal letter you would capitalize
50:30 - things properly but you and I as humans
50:31 - we can't really be trusted to type
50:33 - things in a nice way necessarily when
50:35 - using some piece of software be it an
50:37 - app or a website or something else but
50:39 - it turns out that strings themselves
50:41 - come with a lot of built-in
50:43 - functionality and you can see all of
50:45 - that in Python's own documentation here
50:47 - the string data type that we've been
50:50 - talking about comes with a lot of
50:51 - functionality built in that means that
50:53 - we can manipulate the user's input to do
50:55 - more than just join it with something
50:57 - else like hello we can actually clean it
51:00 - up or reformat it in a way that
51:02 - hopefully looks a little better for us
51:04 - so let me go back to my code here and
51:06 - let me just demonstrate what might
51:08 - happen if a user doesn't cooperate if I
51:10 - go ahead here and run python of hello.pi
51:12 - enter let me just sloppily hit the space
51:15 - bar a few too many times why I just
51:17 - wasn't paying attention and I'm going to
51:19 - type in my name David and I don't know I
51:21 - hit the space bar a couple more times
51:23 - like it's kind of a mess it's all lower
51:25 - case that's not going to necessarily
51:27 - look grammatically right it's got spaces
51:29 - here and here the program is going to
51:31 - print exactly that and that looks really
51:33 - bad at least if we're prioritizing
51:34 - Aesthetics and grammar like why are
51:36 - there so many spaces after the comma
51:38 - this is not a very nice way to greet
51:40 - your users but we can clean this up it
51:43 - turns out that built into Strings which
51:46 - again is this data type so to speak this
51:48 - type of data in Python is the ability to
51:52 - actually do things to that string so let
51:54 - me do this I can actually go ahead and
51:56 - do something like this uh name equals
51:59 - name dot strip and what does this do
52:03 - remove white space from string
52:08 - and what do I mean by this well on the
52:10 - right hand side notice I've written the
52:12 - variable name called name I've then used
52:15 - a period or a DOT and then I seem to be
52:18 - doing what's a function right anytime
52:20 - we've seen a function thus far we see
52:22 - it's the the function's name print or
52:24 - input then we see a parenthesis then
52:26 - another parenthesis and that's exactly
52:27 - what I see here but I'm using this
52:29 - function a little differently
52:30 - technically this function is in this
52:32 - context called a method and what do I
52:34 - mean by that well if name is a string
52:37 - AKA stir well it turns out according to
52:40 - the documentation there's a lot of
52:41 - functions that come with strings in
52:45 - Python and you can access that
52:46 - functionality by using the name of a
52:48 - string like literally name here then a
52:51 - period Then the name of the function and
52:54 - then an open parenthesis and a closed
52:55 - parenthesis maybe some arguments inside
52:57 - of those parentheses but in this case it
52:59 - doesn't need any arguments I just want
53:01 - to strip the space from the left and the
53:04 - space from the right of the user's input
53:05 - but that's not enough I want to remember
53:07 - that I've stripped off that white space
53:09 - on the left and the right so I'm going
53:11 - to use the equal sign again here and
53:13 - notice that just as before this doesn't
53:15 - mean equality this means assignment from
53:18 - right to left so when this line of code
53:20 - here name dot strip returns to me AKA a
53:24 - return value it will return the same
53:27 - thing that the user typed in but with no
53:28 - more white space to the left or to the
53:30 - white to the right so then the equal
53:33 - sign assignment is going to copy that
53:35 - value from the right to the left thereby
53:39 - updating the value inside of my name
53:42 - variable so you can not only assign
53:44 - values to variables you can absolutely
53:46 - change the value of variables by just
53:48 - using the assignment operator the equal
53:50 - sign again and again and again and it
53:52 - will just keep copying from right to
53:53 - left whatever the new value should be so
53:56 - now if I rerun this program python of
53:58 - hello.pi
54:00 - enter
54:01 - I have Davi let's do it again space
54:04 - space space space dab ID in all
54:06 - lowercase space space enter it's better
54:09 - it hasn't fixed my capitalization so I'm
54:12 - still being a little sloppy with the
54:13 - first D but it has stripped off all of
54:16 - that extra space super Minor Detail
54:18 - right like this isn't all that exciting
54:21 - but it just speaks to the power of what
54:23 - you can do with just a single line of
54:25 - code now what else can I do here well I
54:27 - could capitalize the user's input let me
54:30 - go ahead and try this it turns out that
54:32 - I could also
54:33 - uh do this name dot capitalize so let me
54:38 - go ahead and capitalize uh user's name
54:41 - and again I'm making comments and
54:43 - there's no one right way to write the
54:44 - comments I'm just using some short
54:46 - English phrases here to remind myself of
54:47 - what I'm doing what's now going on here
54:50 - well let me go ahead and run python if
54:51 - hello.pi enter uh space space space
54:54 - d-a-v-i-d space enter
54:57 - okay now it's looking prettier right no
54:59 - matter how the user typed in their name
55:01 - even a little sloppily I'm now fixing
55:03 - that but let's let's try something I'm
55:05 - getting a little curious here how about
55:07 - this uh space space space
55:09 - David space Malin I'll use my last name
55:13 - now enter okay so ironically capitalize
55:17 - is not really capitalizing everything we
55:19 - want it's clearly capitalizing what just
55:22 - the very first letter so it turns out
55:24 - that again there's other functions in
55:26 - Python that come with strings and if we
55:28 - poke around the documentation scrolling
55:30 - through a URL like that I bet we'll find
55:33 - another solution one of which is
55:35 - actually this let's actually change this
55:38 - to title there's yet another function
55:40 - that come with strings called title that
55:43 - do title based capitalization just like
55:45 - a book or a person's name capitalizing
55:47 - the first letter of each word and this
55:50 - is just going to do a little more work
55:51 - for us so let's go ahead and run this
55:53 - and as an aside I'm kind of tired now at
55:56 - this point of typing python python
55:58 - python all the time it turns out that
56:01 - when using a command line interface like
56:03 - this you can actually go back through
56:05 - all of your old commands what I just did
56:06 - a moment ago is I hit the up arrow that
56:08 - immediately goes back through my history
56:10 - of all of the commands I've ever typed
56:12 - so this is just a faster way now for me
56:14 - to repeat myself than typing everything
56:16 - manually let me go ahead and hit enter
56:18 - space space space
56:20 - David mail in space space all lowercase
56:23 - enter now it's it's looking better now
56:28 - I've capitalized things and cleaned
56:29 - things up but what about my code I've
56:31 - got like eight lines of code now four of
56:33 - which are comments four of which are
56:35 - actual code do I really need this much
56:37 - well not necessarily watch what I can
56:39 - also do in Python let me not bother
56:42 - capitalizing the user's name separately
56:44 - let me say this and capital log uh
56:48 - capitalize user's name I can chain these
56:52 - functions together I can add title to
56:55 - the end of this and now what's happening
56:57 - well again with a line of code like this
56:59 - you first focus on what's to the right
57:01 - of the equal sign then we'll get to the
57:03 - left of the equal sign what's on the
57:05 - right of the equal sign this line here
57:07 - well what does this mean get the value
57:09 - of the name variable like David space
57:12 - m-a-l-a-n then strip off the white space
57:15 - on the left and the right that is going
57:17 - to return a value it's going to return
57:19 - dab ID space m-a-l-a-n without any white
57:22 - space to the left or right what do you
57:24 - want to do with that return value you
57:26 - want python to title case it that is go
57:29 - through every word in that resulting
57:31 - string and fix the first letter of the
57:34 - first word the first letter of the
57:35 - second word and so forth and and then
57:36 - now we can finish our thought copy the
57:39 - whole thing
57:40 - from right to left into that same name
57:43 - variable and you know what I can take
57:44 - this even one step further why don't we
57:47 - go ahead and do this if we want let me
57:49 - get rid of all that and let me just do
57:52 - strip and title all on that first line
57:56 - and now we've gone from like eight lines
57:58 - of code to four it's a lot tighter it's
58:01 - a lot neater and even though reasonable
58:03 - people might disagree it's arguably
58:05 - better because it's just easier to read
58:08 - fewer lines of code fewer opportunities
58:09 - for mistakes it just allows me to move
58:12 - on with my next problem to solve
58:15 - all right let me pause here and see if
58:16 - there's any questions on these methods a
58:20 - method is a function that's built in to
58:22 - a type of value like these functions are
58:25 - or on F strings which we saw a moment
58:27 - ago
58:28 - yes hi thanks David
58:30 - um so is there a way to remove the
58:32 - spaces between the spaces that I might
58:34 - have added a short answer no if you read
58:37 - the documentation at that same URL
58:38 - earlier you'll see that strip removes
58:40 - from the left and the right but not in
58:42 - between in fact there's two other
58:44 - functions that come with strings one's
58:46 - called L strip the other is called R
58:48 - strip that allow you to do one or the
58:50 - other if we want to start getting rid of
58:51 - space in the middle we're going to have
58:53 - to do a different trick altogether
58:55 - how many functions can be combined like
58:58 - this dot strip dot title you have
59:00 - combined so how many we can combine yeah
59:03 - a really good question technically as
59:06 - many as you want but at some point your
59:08 - code is going to start to look really
59:09 - really bad right because the line of
59:11 - code is going to get really really long
59:13 - it's eventually going to maybe wrap
59:14 - around again and again so at some point
59:17 - you just kind of say like uh-uh that's
59:18 - too many and you start breaking it up
59:20 - into multiple lines like I did maybe
59:22 - reassigning the value to the variable as
59:25 - needed and this is actually a good
59:26 - question if I can pivot to video off
59:28 - your question I mean what do people
59:30 - think if we could go ahead and put
59:31 - everyone's hands down for a moment let
59:34 - me ask this is the way I've done this
59:37 - now with strip and title and input all
59:41 - in the same line better than my previous
59:44 - approach in Zoom you can use the yes
59:47 - icon or the no icon if you think this
59:50 - version is better say yes if you think
59:53 - this previous version was better there
59:56 - for instance this one here where we had
59:59 - everything broken out say no and then
60:01 - we'll see why in just a moment
60:04 - I proposed earlier that reasonable
60:06 - people can disagree and that's
60:08 - absolutely the case
60:10 - doing it one way or the other isn't
60:12 - necessarily best at least if you can
60:14 - justify it let me go back to the most
60:16 - recent version here
60:19 - all right so we're seeing a lot of yeses
60:22 - and a lot of no's why don't we go ahead
60:24 - and call on one of the yeses if we could
60:26 - someone who's voting yes why do you
60:29 - think the current version of this code
60:30 - is indeed better than the previous
60:32 - longer version of the code
60:35 - I think it's more readable so I can say
60:37 - hey this is the name Fung this is the
60:39 - name variable it gets some input and
60:42 - then remove the space and give it a
60:44 - title and there you go you have a Hello
60:47 - name yeah I think that's pretty
60:48 - reasonable it's very readable at least
60:50 - if you're in the habit as you are in
60:51 - English of reading left to right it just
60:52 - kind of flows very naturally as a result
60:54 - the lines is not really that long it's
60:57 - certainly fitting nicely onto the screen
60:58 - so I think that's a good argument how
61:00 - about a Counterpoint though someone who
61:01 - voted no if we could call on someone who
61:04 - thinks this is worse because it's not
61:07 - available at all it seems like uh
61:12 - it's a very long uh line so I think it's
61:16 - better to separate yeah I I think that's
61:18 - persuasive too right it's getting a
61:20 - little longer and even though my
61:22 - sentence here what's your name is
61:24 - relatively short you could imagine that
61:25 - this could get even uglier quickly if I
61:27 - were asking a longer question of the
61:29 - user that's going to make this line of
61:31 - code even longer and therefore less
61:33 - readable it might be less obvious to me
61:35 - or my colleagues that I am calling strip
61:37 - or that I am calling title it might be
61:40 - kind of a unexpected surprise so I think
61:42 - that's reasonable too in short there is
61:44 - no right answer here and in fact part of
61:46 - the process of getting better at
61:48 - programming is getting your own sense of
61:50 - style or working for a company where
61:52 - they might prescribe which way is better
61:54 - than the other because they just want
61:55 - everyone doing the same thing even
61:57 - though reasonable people might disagree
61:59 - ultimately though so long as you have
62:02 - what's a pretty good argument in favor
62:04 - of one way or the other like ultimately
62:06 - that's what's important if you're just
62:08 - doing things because you don't really
62:09 - know which one's better that's not great
62:10 - but if if and when you start to acquire
62:12 - require opinions and if your boss if
62:14 - your teacher if your colleague your
62:16 - friend can challenge you and say wait
62:18 - why did you do it like this they might
62:19 - not agree with you but at least have an
62:21 - answer and that should be sufficiently
62:23 - persuasive in general now strings come
62:26 - with a whole bunch of other methods as
62:27 - well among which is one called split
62:29 - which can as the name suggests split a
62:32 - string into multiple smaller substrings
62:34 - so to speak for instance if the human
62:36 - here is in the habit of typing in their
62:37 - first name then a space and then their
62:39 - last name and you want to go ahead and
62:41 - greet them only by first name what we
62:43 - could actually leverage that single
62:45 - space between the first name and last
62:46 - name and split that string into two
62:48 - smaller substrings how can we do this
62:50 - well let me go ahead and in between
62:52 - these lines proactively comment that
62:54 - we're about to split users name into
62:57 - first name and last name and then let's
63:01 - go ahead and take that name variable
63:03 - which currently contains something like
63:04 - presumably David space Malin and let me
63:07 - go ahead and call split and pass in as
63:09 - the argument to split a single white
63:12 - space thereby indicating that I indeed
63:14 - want to split on that character now it
63:16 - turns out split's going to return a
63:17 - sequence of values ideally a first name
63:20 - and then a last name and we can actually
63:21 - in Python assign both of those values
63:23 - from that sequence at once to some
63:25 - variables for instance first comma last
63:28 - equals and that's going to have the
63:30 - effect from right to left of putting the
63:31 - first such value in the first variable
63:33 - the second such value in the second
63:35 - variable so now on my last line of code
63:37 - I can go in and say hello not to the
63:40 - full name something like David Malin I
63:42 - can just say hello comma first all right
63:45 - let's go ahead and clear my terminal
63:46 - window run python of hello.pi and hit
63:48 - enter I won't bother with any leading
63:50 - white space this time but let me go
63:51 - ahead and type in David space Malin and
63:54 - crossing my fingers as usual hello David
63:57 - is what we now see
63:59 - all right so we've seen so much so many
64:02 - examples thus far involving strings but
64:04 - certainly programs uh and programming
64:06 - languages can manipulate other types of
64:09 - data as well let's go ahead and
64:10 - transition them to another very common
64:13 - type of data in Python in programming
64:15 - more generally namely integers otherwise
64:17 - known in Python is int int so just as
64:20 - stir Str is short for string so is INT
64:23 - in Python short for integer well what's
64:25 - an integer well just like in math it's a
64:28 - number like negative two negative one
64:30 - zero one two and all the way toward
64:32 - negative Infinity all the way toward
64:34 - positive Infinity but there's no decimal
64:36 - point in an integer it's just a number
64:38 - like negative two negative one zero one
64:40 - and two onward that's an INT of course
64:43 - in the world of mathematics there's lots
64:46 - of symbols that we use and we've seen
64:48 - plus before although we used it for a
64:49 - different purpose but python supports
64:51 - these symbols and more and python allows
64:54 - you to add numbers together plus
64:55 - subtract numbers multiply numbers divide
64:59 - numbers and the only one here that might
65:00 - look a little strange to people or
65:02 - unfamiliar is this percent sign but it
65:05 - doesn't mean percent in this context if
65:07 - you use a single percent sign in a
65:09 - Python program that's actually the
65:11 - so-called modulo operator the operator
65:13 - that allows you to take the remainder
65:15 - after dividing one number by another so
65:18 - we'll see examples of that before long
65:19 - but the first four of these are perhaps
65:21 - quite quite familiar well it turns out
65:24 - that in Python you cannot necessarily
65:27 - you don't necessarily have to keep
65:28 - writing code in a file like hello.pi and
65:32 - then running it in a terminal window one
65:35 - of the features that many people like
65:37 - about python is that it supports this
65:38 - so-called interactive mode like you can
65:40 - start writing python code and
65:42 - immediately execute each of those lines
65:45 - interactively if especially if you don't
65:47 - care about saving all of your lines of
65:49 - code you just want to execute code and
65:51 - get back some answers so for instance
65:53 - let me go back to vs code here and let
65:54 - me close hello.pi and let me click on
65:57 - the Little Triangle over here and my
65:59 - terminal a window just to make it much
66:00 - bigger just temporarily for a moment so
66:03 - I'm not creating any dot Pi file now I'm
66:06 - just going to run python by itself at my
66:09 - prompt and you'll see when I do this I
66:11 - get some cryptic looking output and the
66:13 - date and time at which the program was
66:15 - last updated and so forth but I
66:17 - ultimately get three triple uh brackets
66:20 - like this this is the interactive mode
66:23 - for python so I'm running the python
66:26 - interpreter and anytime I type a line of
66:29 - code in The Interpreter it's going to
66:31 - execute it immediately I don't have to
66:33 - keep running python again and again it's
66:35 - as though in the human world if you were
66:36 - standing next to a human who speaks some
66:39 - other language and you're just having a
66:40 - conversation with them back and forth
66:42 - It's all happening the translation
66:43 - immediately so what might I do in
66:46 - interactive mode well I could do
66:47 - something like one plus one enter that's
66:50 - actually code right you might not think
66:52 - of it as code but if you know a bit of
66:53 - arithmetic and you know numbers and you
66:56 - know plus that's valid python code and
66:59 - you can use Python really as a fancy
67:01 - calculator but I could do other things
67:02 - too if I want to print to myself hello
67:05 - comma world I can also print out that
67:07 - line of code there too hello world so
67:09 - it's interactive in the sense that the
67:11 - moment you execute a line of code boom
67:13 - you see the result we're generally not
67:16 - going to do that because at least when
67:17 - teaching the language we tend to want to
67:19 - do things incrementally and we want you
67:21 - to be able to see where it is we came
67:23 - from and we want to be able to try
67:24 - things again and again especially if we
67:26 - make mistakes but know that this is
67:28 - indeed a feature of python this
67:30 - so-called interactive mode but let's
67:32 - focus for a moment now not just on that
67:34 - interactivity but really on the fact
67:36 - that python apparently supports integers
67:37 - and Mathematics and some of those basic
67:40 - operations and let's see if we can't
67:42 - make maybe our our own little calculator
67:43 - so let me go ahead and open up vs code
67:46 - again and I'm going to shrink down my
67:48 - terminal window and I'm going to create
67:50 - a new file called calculator dot Pi so
67:53 - to do that recall I can type code down
67:55 - here and the name of the file I want to
67:57 - create dot Pi enter that gives me a new
68:00 - tab up top so I have already closed
68:03 - hello.piom now in calculator.pi and
68:05 - let's just make a simple calculator that
68:07 - does some addition for me but I'm going
68:09 - to do it in a file so that we can
68:10 - iterate on this and make changes for
68:13 - better for worse over time let me go
68:15 - ahead and first declare a couple of
68:16 - variables I'm going to do the
68:17 - mathematical thing of calling my first
68:19 - variable X
68:20 - my second variable Y and then I'm going
68:23 - to give myself a third variable Z equals
68:25 - X Plus Y and then I'm going to go ahead
68:27 - and print out Z now this program
68:30 - admittedly not very exciting or
68:32 - interesting in fact it's a little less
68:34 - interesting than printing stuff on the
68:35 - screen like before with strings but
68:38 - we'll build on this and see what other
68:39 - features exist in Python that we can
68:41 - leverage so hopefully if python knows
68:44 - its math as well as I do when I run
68:45 - python of calculator.pi I should see
68:49 - hopefully that 1 plus 2 equals indeed 3.
68:53 - all right so not that surprising and not
68:55 - that interesting and honestly this isn't
68:57 - the most useful program because it's
68:59 - always going to calculate 1 plus 2
69:01 - equals three let's at least make this
69:04 - program say a little more interactive
69:05 - right we already know from previous
69:07 - examples how we can get input from the
69:09 - user let's bring back that input
69:11 - function and let's do this let me go
69:13 - ahead now and at the top of my code
69:15 - let's change X to not be the number one
69:18 - always let's change it to be whatever
69:19 - the return value you is of asking the
69:22 - user for x and I can use any English or
69:25 - human language I want here I'm going to
69:27 - say what's X just like I asked before
69:28 - what's your name and I'm going to do the
69:31 - same thing for y I'm going to use input
69:33 - again but this time change the question
69:35 - to be what's y
69:36 - all right at this point I think I'm
69:38 - going to leave the rest of the code the
69:40 - same Z equals X Plus Y and then print Z
69:43 - but what's nice now is that I think I
69:45 - have a nice interactive calculator right
69:48 - now it's not going to do one plus two
69:50 - all the time it's going to do whatever
69:51 - the user types plus whatever the user
69:53 - types so let's try this let me go ahead
69:55 - and run the program all right let's do
69:57 - it one is going to be x 2 is going to be
70:01 - Y and of course everyone in agreement 1
70:04 - plus 2 equals 3.
70:09 - huh what's going on there
70:13 - either your math class misled you or I
70:17 - have misled you
70:18 - why don't we call on someone here to see
70:20 - if you can't help us reason through what
70:22 - the bug is what's the mistake uh Anjali
70:25 - if I'm saying it right
70:26 - I think the issue is is that it's
70:29 - concatenating strings because you use
70:31 - the plus operator instead of adding
70:33 - perfect so perfect intuition we've seen
70:35 - that plus is used a little differently
70:37 - in the context of strings because it
70:39 - concatenates that is it joins the two
70:41 - strings and that seems to indeed be
70:43 - what's happening here even though the
70:44 - user typed a number but the interesting
70:46 - thing here is that when you get user
70:48 - input because they're using a keyboard
70:51 - on their Mac or PC or their phone it is
70:53 - always going to be text it might look
70:55 - like a number but by default it's coming
70:57 - from the keyboard as a string that is as
71:01 - text and so how do we go about
71:03 - resolving this if ultimately we don't
71:06 - want to treat those inputs as strings we
71:08 - want to treat them as actual numbers
71:10 - well we need another function and it
71:12 - turns out in Python that you can convert
71:14 - sometimes from one type of data to
71:16 - another type of data for instance from
71:18 - string to int by doing something like
71:21 - this let me go back into my code and let
71:24 - me change X before adding it to y to be
71:27 - whatever the integer version of X is
71:30 - plus whatever the integer version of Y
71:33 - is so it turns out that int is not only
71:36 - a type of data in Python it's also a
71:38 - function and it's a function that if you
71:41 - pass in an input like a string so long
71:44 - as that string looks like a number like
71:46 - one or like two it will convert it to an
71:49 - actual number that you can perform
71:50 - mathematics on instead so if I now go
71:53 - back to my terminal window and run
71:55 - Python and let me show you another trick
71:57 - calculator is kind of a long word it's a
72:00 - little tedious to type notice what I can
72:01 - do in my terminal window in a command
72:04 - line interface in general if I start
72:06 - typing C-A-L for calculator I can
72:09 - actually hit tab to finish my thought so
72:12 - autocomplete is possible in a terminal
72:14 - window like this type the first letter
72:15 - or few letters and then boom with tab
72:17 - it'll finish your thought for you or you
72:19 - can go back in your history like I did
72:21 - with the up and down arrows let me go
72:23 - ahead and execute this what's X1 what's
72:26 - X2 and there we go now we have a general
72:29 - purpose calculator that's going to
72:30 - support not just
72:32 - addition of one and two but now any two
72:35 - integers that the user types and let me
72:37 - now improve this right we've seen how we
72:39 - can make improvements to code and I I
72:42 - don't know if it's going to necessarily
72:43 - be better but let's try this do I really
72:45 - need the Z variable
72:47 - it's worth noting that I'm creating a
72:49 - variable called c z and then I'm
72:52 - immediately using it on the next line of
72:54 - code now that's not that compelling
72:57 - because if you're creating a variable
72:58 - and then immediately using it but never
73:00 - again using it did you really need to
73:02 - take the time to introduce another
73:04 - symbol and another variable just to use
73:07 - it once and only once well maybe not
73:09 - maybe we don't really need Z in this way
73:11 - maybe I should go and do something
73:14 - like this maybe I should get rid of Z
73:18 - here
73:19 - maybe I should change this to be int up
73:22 - here change this to be int up here doing
73:26 - something that's pretty interesting now
73:28 - even though it's a bit of new syntax
73:29 - notice that you can Nest functions so to
73:33 - speak you can put one function call that
73:38 - is the use of a function inside of the
73:40 - use of another function so that the
73:42 - return value of the inner function
73:44 - becomes the argument to or the input to
73:48 - the outer function so just like in math
73:50 - if you have parentheses parentheses
73:51 - parentheses your teacher probably taught
73:53 - you to focus on what's inside the
73:55 - innermost parentheses first and then
73:56 - work your way out same thing with
73:58 - programming that's what Python's going
73:59 - to do it's going to look at what's
74:00 - inside of the parentheses first it's
74:03 - going to get the answer and then it's
74:05 - going to pass the return value to the
74:07 - outermost function so what happens on
74:09 - line one now is that the input function
74:11 - gets called first then the result of
74:14 - that quote unquote one becomes the input
74:17 - to the int function and same online too
74:20 - the output of what's y becomes the input
74:23 - to this int function and now there is no
74:26 - Z I could just do print X Plus Y and
74:30 - because I've taken the time to convert
74:32 - each of those strings to an integer I
74:36 - think we're okay so let me try this
74:37 - python of calculator.pi enter one and
74:40 - two and we're still getting 3. not 12 or
74:44 - not twelve one two we're indeed getting
74:46 - three and we've additionally gotten rid
74:48 - of the variable because we didn't
74:50 - necessarily need it it seems especially
74:52 - if only using it once well here too let
74:54 - me put everyone's hands down for just a
74:56 - moment and let me ask as before this
74:58 - version now which uses int around the
75:02 - invocations of input and does not use Z
75:06 - is this better than the previous version
75:08 - if you want to vote yes go ahead or if
75:11 - you prefer the old Way vote no the old
75:13 - way I'll undo all of this as we vote
75:16 - instead looked like this
75:21 - all right and let me go back to now the
75:23 - newest version let's take a hand of the
75:25 - yeses someone who thinks this latest
75:27 - version is better I think this way is
75:30 - better because it uh allows us to
75:33 - immediately see what the X and Y
75:36 - variables are with integers and so we
75:41 - know what to expect from them and also
75:43 - the print argument is more inclusive we
75:47 - avoid too much clutter in the code
75:53 - the lines of code are not very long I
75:56 - don't need to know what Z is because it
75:58 - doesn't exist it just C print X Plus y I
76:00 - like that but someone who prefers the
76:01 - older way where we did have Z and we
76:04 - more explicitly passed individual
76:07 - variables to the in function yeah hi uh
76:10 - I think but the earlier version is
76:12 - better because when uh I mean if user
76:15 - can put something else other than ink
76:17 - let's say I mean let's say they type one
76:19 - right and two like so will be it will be
76:23 - easier to debug this version or the this
76:26 - version here or the old version
76:28 - okay that's fair and in fact I'm I'm
76:31 - being very careful today as best I can
76:34 - not to mess up I have thus far only
76:36 - inputted integers when I'm expecting
76:38 - integers and Rose actually pointed to
76:40 - something we'll come back to in the
76:41 - coming weeks how do we actually handle
76:43 - errors what if the user doesn't type in
76:45 - the number one or the number two or a
76:47 - number at all what if they type in a
76:49 - word like cat c-a-t that's not a number
76:52 - and I bet I can't convert it to an
76:53 - integer but for today I'm not going to
76:55 - focus on that I'm just going to hope
76:56 - that the user cooperates but that's not
76:58 - going to be the case and so perhaps one
77:00 - way would set us up for more success
77:02 - when it comes to handling those errors
77:03 - now for today's purposes which is better
77:06 - I mean I like both and I think both of
77:08 - you made very valid arguments in there
77:10 - too so long as you have a justification
77:12 - that feels pretty reasonable I mean
77:14 - that's what ultimately matters but
77:16 - acquiring again a sense of the
77:18 - trade-offs here well is this way better
77:20 - if so why or why not just understanding
77:23 - what those trade-offs are but generally
77:25 - speaking prioritizing readability is a
77:28 - very good thing making your code
77:30 - readable for someone else is a very good
77:32 - thing and very good for you too so that
77:34 - when you wake up the next morning or you
77:36 - come back the next week or the next year
77:37 - you too can read your own code without
77:39 - having to waste time trying to remember
77:41 - what you did and simplicity tends to be
77:44 - a good thing too keeping your code
77:45 - simple so is as you get more comfortable
77:48 - with programming you might be tempted to
77:49 - try to like combine an entire program
77:52 - into one long line for instance let me
77:54 - do right just that don't technically
77:56 - speaking we don't really need X in a
77:58 - variable we don't really need Y in a
78:00 - variable we could also do this I could
78:03 - just get rid of X and Y altogether I
78:06 - could then now eliminate that and make
78:08 - it just one line of code okay so on some
78:11 - sense you might be inclined to think wow
78:12 - that's really nice you made it one
78:14 - simple line of code I would argue this
78:17 - actually isn't that simple now I think
78:19 - I'm starting to Nest too many things I
78:21 - have to think about print and int and
78:24 - input I then have to notice that okay
78:25 - I've opened two parentheses I've closed
78:27 - two of them there's a plus you're making
78:29 - me think too much and anytime you make
78:31 - me think you're wasting time and anytime
78:33 - you complicate the look of the code like
78:36 - this you're just going to increase the
78:37 - probability of mistakes and tactical
78:40 - mistakes or logical errors in your code
78:42 - so of all the things we've done this is
78:44 - the only one that I would argue yes it's
78:46 - one line and it's nice and compact it's
78:49 - just not readable enough I would shy
78:51 - away from doing this especially since
78:52 - two of those function calls are getting
78:54 - input from the user but there too
78:56 - reasonable people might disagree but
78:58 - that's the kind of like visceral
78:59 - reaction you should have sometimes when
79:01 - code starts getting a little too
79:04 - complicated a little too clever perhaps
79:07 - for its own good
79:09 - all right well it's not just integers we
79:11 - have access to let me propose that we
79:13 - transition from integers to one more
79:16 - data type here namely a float so again a
79:19 - string is a sequence of text an INT is
79:22 - an integer like negative one zero and
79:24 - one a flow is a number with a decimal
79:26 - point properly called a floating point
79:28 - value and you can think of the floating
79:30 - Point as being the decimal that might be
79:32 - over here or over here with some number
79:34 - of digits to the left or the right
79:35 - mathematically it's a real number a
79:37 - number that has a decimal point in it so
79:40 - that's a third type of data that python
79:42 - supports right now our calculator is
79:44 - somewhat naively assuming that the user
79:46 - is only going to type in integers but if
79:48 - I want to support floating Point values
79:50 - too I think I can just make a couple of
79:52 - tweaks so I'm going to go back to vs
79:54 - code here and instead of just converting
79:56 - the user's input X and Y to integers on
79:59 - line one and two let's just make a
80:01 - simple change let's actually convert it
80:03 - to a float on the first line and a float
80:07 - on the second line here now I think if I
80:10 - go down to my terminal window and run
80:11 - python of calculator.pi let's type in a
80:14 - number like 1.2 with a decimal point and
80:17 - 3.4 with the decimal point and there we
80:19 - go we have 4.6 as the final answer so
80:22 - that wouldn't have worked before if I
80:24 - was only expecting integers from the
80:26 - user but now that I'm support expecting
80:28 - floating Point values and accommodating
80:30 - it I can actually now do floating Point
80:32 - arithmetic as well but suppose that I
80:35 - don't really want the final answer to be
80:38 - a floating point value like 4.6 I would
80:41 - be happy if we just round to the nearest
80:43 - integer so I want to support the user
80:45 - typing in floating Point values with
80:47 - decimal points but at the end of the day
80:49 - I just want to round the result to the
80:51 - nearest possible integer for instance
80:53 - well it turns out that here too python
80:56 - comes with some functionality built in
80:58 - and in fact if we return to this URL
81:01 - from earlier wherein all of the Python
81:03 - built-in functions are listed there's
81:04 - one called round which does exactly as
81:07 - we would expect it takes as input a
81:09 - number and then rounds it for us for
81:11 - instance to the nearest digit to the
81:13 - nearest integer but if we look a little
81:16 - closer to that documentation as we can
81:17 - here I'll provide an excerpt this is
81:20 - what the function looks like in the
81:22 - documentation and recall that earlier we
81:24 - looked at the documentation for print
81:26 - and this is similar in spirit that this
81:28 - shows us not just the name of the
81:30 - function but it's available parameters
81:32 - that is inputs that we can provide when
81:35 - using this function but this is a little
81:36 - cryptic too just like Prince was and it
81:38 - adds some syntax so let's see the name
81:40 - of this function here is of course round
81:42 - and its first argument is a number
81:45 - notice this times there's no star
81:47 - there's no star objects like there was
81:49 - for print the round function takes just
81:51 - one number as its first argument period
81:53 - that's its positional parameter but
81:57 - notice this syntax and this is a
81:59 - convention in programming or technology
82:00 - more generally generally speaking when
82:03 - you see square brackets and
82:04 - documentation like this this means that
82:06 - you're about to see something optional
82:08 - and so what this means is that if you
82:10 - want to specify more precisely the
82:12 - number of digits that you want the round
82:15 - function to round two you can specify it
82:18 - here by adding a comma and then that
82:21 - number so if we read the documentation
82:23 - if you don't specify a number of digits
82:26 - you just specify the number to Round it
82:28 - rounds to the nearest integer but
82:30 - suppose you want to round to the tenths
82:32 - place or the hundredths place that is
82:34 - one or two digits after the decimal
82:36 - point you could additionally pass in
82:37 - comma 1 or comma 2 to be more precise so
82:42 - that's what the documentation there is
82:44 - saying let's see if we can't then
82:45 - translate this to some actual code for
82:48 - us so if I go back now to vs code and I
82:51 - consider that I want to go ahead and
82:52 - round X and Y I can do this in a couple
82:55 - of ways phase I could do round X Plus y
82:59 - but uh you know I'd actually kind of
83:01 - prefer to break this now out into two
83:03 - lines I don't have to and reasonable
83:04 - people here might disagree but I'd like
83:07 - to revert to a scenario where I'm
83:08 - printing Z so that I can just a little
83:10 - more clearly to myself to others say Z
83:12 - equals the rounded result of X Plus y
83:16 - it's not necessarily the better way to
83:18 - do it but I'm a little more comfortable
83:20 - with breaking out my thoughts one at a
83:22 - time especially if I want to start
83:23 - commenting each of these chunks of code
83:25 - all right let me go down to my terminal
83:27 - window now and run python of
83:29 - calculator.pi what's X let's do 1.2
83:31 - again then let's do 3.4 and now it was
83:35 - previously 4.6 but now it's been rounded
83:38 - up to the nearest integer which of
83:40 - course is going to be 5. all right what
83:43 - if I wanted to change this a little
83:46 - further what if I wanted to support
83:48 - maybe really big numbers big numbers
83:50 - irrespective of rounding let's just do
83:52 - something like this let me go ahead and
83:54 - run python if calculator.pi again and
83:56 - let me just add 999 plus 1 and notice I
84:01 - don't have to type decimal points even
84:03 - though I'm converting to float my
84:05 - program will just allow me to type
84:06 - decimal points but I don't need to
84:08 - oblige the answer of course here should
84:10 - be and is in fact one thousand whether
84:12 - or not we round so that's just
84:14 - arithmetic with integers here but in uh
84:17 - the us we tend to format long numbers by
84:21 - putting commas after or before every
84:24 - triple of digits other countries flip it
84:26 - and they use periods and commas instead
84:28 - that's a system setting you can change
84:30 - that on your own Mac or PC or device for
84:33 - python or any language but for me I'm
84:35 - using the US approach here which is
84:37 - periods for decimal points and commas
84:40 - for separators what if I wanted this to
84:42 - be outputted as 1 comma zero zero zero
84:45 - just to make it a little more clear that
84:48 - it's 1 000 and not something like 100
84:50 - that's even more useful when it's like 1
84:52 - million one comma zero zero zero comma
84:55 - zero zero zero wouldn't it be nice if we
84:57 - could automatically output those numbers
84:58 - as well well it turns out that we can
85:01 - there is a way using python to actually
85:04 - specify that we want to include commas
85:07 - like this and here we have an
85:09 - opportunity to bring back our old friend
85:11 - the F string first let me do something
85:14 - that's not that productive first let me
85:16 - do this let me print out the value of Z
85:18 - but wait a minute I can't just say quote
85:20 - unquote Z because that's literally going
85:22 - to print Z on the screen so let me wrap
85:24 - it with those curly braces like I did
85:26 - before but that too was not enough I
85:29 - literally needed to add an F at the
85:31 - beginning of my string to tell python
85:32 - that this is an F string a format string
85:34 - that now is going to print out not very
85:37 - interestingly just the value of Z itself
85:40 - so that I'm going to Great Lengths just
85:42 - to print Z when really I could have just
85:44 - passed Z as the sole argument but just
85:46 - to ensure that I haven't broken it let's
85:49 - do this again 999 plus one enter okay
85:52 - it's still a thousand so I didn't make
85:53 - anything worse but notice this and this
85:56 - syntax is unfortunately a bit cryptic
85:58 - notice that I can actually do this I can
86:00 - put a colon after the Z and I can put a
86:04 - comma thereafter this looks very cryptic
86:06 - admittedly and even I have to constantly
86:08 - look things like this up in the
86:10 - documentation to remember the syntax but
86:12 - here let me run it again python of
86:14 - calculator.pi 999 1 and now notice that
86:19 - the number has been automatically
86:20 - formatted for me if I were in a
86:22 - different country or Locale I could
86:24 - absolutely override this to use periods
86:26 - instead of commas or vice versa but in
86:28 - this case here it's just happening for
86:30 - me automatically so there too we see a
86:32 - hint of what it means to really format a
86:34 - string there's even more power more
86:36 - powerful capabilities built into that
86:39 - all right let me pause here to see if
86:40 - there's any questions now on floats on
86:43 - rounding or on this use of f strings
86:48 - yes so I have a question so when using
86:50 - floats um is it like a cap you how many
86:53 - decimal points it can have a really good
86:55 - question so floats yes and this is a
86:57 - problem we'll revisit before long floats
87:00 - cannot represent numbers infinitely
87:02 - precisely in a nutshell because
87:04 - computers only have so much memory they
87:06 - only have a finite amount of memory you
87:08 - and I only have a finite uh amount of
87:10 - Hardware inside of the computer so at
87:12 - some point they're going to have to
87:14 - Round right now I'm rounding
87:15 - automatically effectively computers will
87:17 - eventually have to do that for us but
87:18 - we'll see that as a fundamental problem
87:20 - before long allow me to turn back just
87:23 - for a few final examples on float before
87:25 - we introduce a few final examples that
87:27 - allow us not just to use functions but
87:29 - to make our own let me propose that we
87:31 - also try our hand at a bit of division
87:34 - here let me propose that we modify this
87:36 - calculator now to still take a couple of
87:38 - floats but let's now just do something a
87:40 - little simpler than a little different
87:42 - from this just doing x divided by Y and
87:45 - let me go ahead and get rid of my format
87:47 - string and just keep it simple for now
87:48 - printing out Z instead and what are we
87:51 - going to see here well just some simple
87:52 - division so python of calculator dot Pi
87:54 - let's do something like 2 divided by
87:57 - three and of course I get .6666 and to
88:00 - Ethan's question a moment ago it does
88:02 - seem to be finite it's not rounding in a
88:04 - weird way here but I only seem to see so
88:07 - many digits that's a an inevitability of
88:11 - using a float in this way by contrast
88:13 - just so you know integers nowadays in
88:15 - Python can be as big as you want them to
88:17 - be unlike other languages there is no
88:19 - upper bound on how big an INT can be now
88:21 - in Python on but there is a bound on
88:23 - just how precise a floating point value
88:25 - can be all right now that I've got some
88:27 - simple division working here let's go
88:29 - ahead and round this it would be nice to
88:31 - round this really long number 0.6666666
88:34 - and so forth to maybe just two decimal
88:36 - places we've seen how to do this with
88:38 - round though at least in its
88:39 - documentation let's just round this not
88:41 - to the nearest int by passing in just x
88:44 - divided by Y which is one argument once
88:47 - the math is done inside of the
88:48 - parentheses I don't want to pass in just
88:50 - one argument I want to pass in two so
88:52 - that I can specify n digits number of
88:55 - digits which recall was the second
88:57 - parameter for round let me go ahead and
88:59 - run python of calculator.pi I'll do the
89:01 - same thing 2 and then
89:04 - 3.67 so here too we see a way of
89:07 - rounding now not just to a nearest
89:08 - integer but to his nearest number of
89:11 - digits but there's another way to do
89:13 - this here and in fact this evokes our
89:15 - our F F string example again let me go
89:19 - ahead and change this suppose that you
89:21 - didn't remember for the round function
89:22 - or for some reason you didn't want to
89:24 - use it you instead want to just use a
89:26 - format string well let's go there let me
89:29 - do quote unquote Z but let me surround
89:31 - it with those curly braces let me add
89:33 - the F at the beginning and again this is
89:35 - not interesting yet this is just going
89:37 - to print out Z but I'm adding a lot more
89:39 - complexity to turn it into an F string
89:41 - but notice I can do something else after
89:44 - my variable name after the colon if this
89:47 - were going to be a big integer I might
89:49 - want to use a comma like before to
89:51 - separate each triple of numbers with
89:53 - commas but I don't I'm going to use a
89:55 - different sequence of characters I'm
89:58 - going to say 0.2 F and this 2 is one of
90:01 - these very cryptic things I have to
90:03 - constantly look up because I forget if I
90:05 - don't use it that often so don't be
90:06 - intimidated if this looks especially
90:08 - weird but this is according to the
90:10 - documentation the way you specify using
90:13 - an F string how many digits you want to
90:15 - print so let me run this version of the
90:17 - calculator type in 2 and then three we
90:19 - get the exact same thing but again this
90:22 - is just consistent with my claim that in
90:23 - programming we can so very often solve
90:26 - the same problem in multiple ways this
90:29 - is just now the F string approach to
90:32 - that very same problem
90:34 - all right which one is better it depends
90:36 - in this case they're pretty equivalent
90:38 - you could imagine though it being useful
90:39 - to use a function sometimes so that you
90:41 - can pass in an argument like n digits as
90:44 - that second argument or you can imagine
90:46 - just deciding in advance that you want
90:48 - point two and then writing it like this
90:50 - let's transition now from focusing on
90:53 - strings and on integers and on floats to
90:55 - focusing now on functions themselves we
90:58 - began today by focusing on how you can
91:00 - use functions that come with python but
91:02 - wouldn't it be nice if you could invent
91:04 - your own functions especially if to our
91:06 - Point earlier you find yourself solving
91:08 - the same kind of problem again and again
91:10 - it's nice that python comes with the
91:12 - print function because it's really
91:13 - useful to be able to print things on the
91:14 - screen but wouldn't it be nice if you
91:16 - could print specific things on the
91:18 - screen by just calling your own function
91:19 - well let me propose that we do this let
91:22 - me go back to vs code here and let me
91:24 - propose that we go back to hello.pi I'm
91:28 - going to reopen hello.pi where we left
91:30 - it before and I'm going to go ahead now
91:31 - and propose that we consider how we can
91:34 - start improving this further by making
91:36 - our own function I have written so many
91:38 - programs today that just say hello and
91:42 - each time I'm using print but wouldn't
91:43 - it have been nice if from the beginning
91:45 - of today we could just call a function
91:47 - called hello that just says hello for us
91:50 - now the authors of python years ago
91:52 - didn't think that we need a special
91:54 - function just to say hello but I would
91:56 - like that to exist I'm saying hello so
91:59 - many times I just want to be able to
92:00 - call a function hello so I'm going to
92:02 - start from scratch here I'm going to
92:03 - delete all of my code from earlier and
92:06 - I'm going to pretend for the moment that
92:08 - a function called hello exists and I'm
92:10 - going to do just as I did before I'm
92:12 - going to get the user's name with the
92:13 - input function asking what's your name
92:16 - question mark and now I'm going to call
92:18 - a function hello and then I'm going to
92:21 - print out the user's name now I will
92:24 - admit hello doesn't exist so bad things
92:27 - are about to happen but let's see what
92:29 - let me go down to my terminal window let
92:31 - me run python of hello.pi I think the
92:34 - first line is going to be okay because
92:35 - that worked before and indeed it's
92:37 - prompting me for my name so let me type
92:40 - in David the second line of code is
92:42 - apparently calling a function that looks
92:44 - like it's called hello because why is it
92:46 - a function it has a parenthesis and a
92:48 - closed parenthesis immediately after it
92:49 - and that's what every function we've
92:51 - used has looked like but Python's not
92:53 - going to recognize this one when I hit
92:54 - enter now I get a name error name hello
92:57 - is not defined did you mean help I
93:00 - didn't although it's opportune that's
93:02 - what I need at this point is some help
93:03 - but I am encountering this error because
93:07 - why the function just doesn't exist so
93:09 - how do I make this function exist well I
93:11 - need to create it myself using this
93:13 - keyword def for Define so here too just
93:18 - as stir is short for string and into
93:20 - short for integer def is short for fine
93:23 - if and when you want to Define create
93:26 - invent your own functions you can do so
93:29 - using now this keyword in Python so let
93:32 - me go back to my code here and let me
93:34 - propose that we Define this perhaps in
93:37 - this way at the very top of my file I'm
93:39 - going to first take a moment to define a
93:42 - function called hello using def
93:44 - hello open parenthesis close parenthesis
93:47 - colon what this means now is that python
93:50 - is going to treat every line of code
93:53 - that I indent underneath this one as the
93:56 - meaning of this new function hello So
93:58 - Def is important as is the space I get
94:01 - to choose the name of the function and
94:03 - I'm choosing to call it hello the
94:05 - parentheses with nothing inside means
94:06 - that this function at the moment is not
94:08 - going to take any inputs no arguments
94:09 - there too the colon means stay tuned for
94:12 - some indentation everything that's
94:14 - indented beneath this line of code is
94:16 - going to be part of this function it's
94:18 - going to be a super short function one
94:20 - line of code it's just going to print
94:22 - out quote unquote hello but now on lines
94:26 - one and two I have invented my own
94:28 - function hello notice these dots that
94:31 - have now magically appeared here this is
94:33 - just a setting of my text editor vs code
94:35 - in this case that's just making super
94:37 - explicit to me that I've hit the space
94:39 - bar four times or equivalently the Tab
94:41 - Key once which is converted
94:43 - automatically to four space cases
94:45 - generally speaking I'm going to need to
94:46 - make sure that all of my indented code
94:48 - lines up now so that python knows that
94:50 - it's all part of the same thing but it's
94:52 - easy in this case because it's just a
94:54 - single line but now thanks to lines one
94:56 - and two the function hello will
94:59 - absolutely exist when I'm ready to use
95:01 - it on line six so let me go down to my
95:04 - terminal window and run python of
95:05 - hello.pi enter here comes my name again
95:08 - and now when I hit enter I now see hello
95:11 - David all right we've kind of regressed
95:14 - though right this is not nearly as
95:16 - pretty as it once was I think we can
95:18 - probably do better than this by
95:21 - improving things further why don't we
95:23 - consider though how we might say
95:26 - parameterize this same function that is
95:28 - to say can we customize hello to maybe
95:31 - take the user's name as input so that we
95:33 - can say not only hello but the person's
95:35 - name all on one line all in one breath
95:39 - well I think we can do this let me
95:40 - propose that we do this as follows let
95:43 - me go ahead in up in my code let me
95:46 - inside of these parentheses let me come
95:48 - up with my own parameter name I have
95:50 - complete Choice here and I'm going to
95:52 - say that the name of my parameter will
95:54 - be the word to why because I want my
95:57 - function to sound like the verb it
96:00 - represents hello but who do you want to
96:02 - say hello to well I'm going to call my
96:04 - parameter for this function 2 just
96:06 - because in English it kind of sounds
96:08 - nice to me hello to who do you want to
96:10 - say hello to that's why I'm calling this
96:12 - parameter 2 instead of something simpler
96:14 - like X or Y or Z all right well what do
96:17 - I want to do with the word two well I
96:19 - can do a couple of different things
96:20 - we've seen like so many different ways
96:22 - to implement hello let me just add a
96:24 - comma there for grammar's sake and then
96:26 - let me put the word to after that as the
96:29 - second argument to the function hello
96:31 - there's other ways we can do this and
96:33 - we've seen so many but this one looks a
96:35 - little clear to me I'll say what's going
96:37 - to happen next well I don't think I need
96:39 - this extra print line here I think what
96:42 - I'm going to do is this I'm going to go
96:44 - head here and print out not the person's
96:47 - name manually I'm going to sense instead
96:50 - say hello parentheses name so what am I
96:54 - now doing on lines one and two I'm
96:56 - defining my very own function called
96:58 - hello but this time that function has
97:00 - been designed to take a parameter a
97:02 - single parameter as input and I'm using
97:05 - the value of that parameter which I
97:08 - called 2 to plug into print so that I
97:10 - see not only hello but also that
97:13 - person's name what am I doing on line
97:14 - five same as always I'm just getting the
97:16 - user's name line six I'm not only
97:18 - calling hello I'm passing as input the
97:21 - name variable as an argument
97:24 - so that that's what gets passed into
97:26 - hello and what's Happening Here is
97:28 - essentially this even though the
97:29 - variable is called name here when the
97:32 - function itself is called the computer
97:35 - assumes that that same value is now
97:37 - called two so name is essentially copied
97:41 - to another variable called 2 so that in
97:44 - the context of hello I can say hello to
97:47 - that variable instead and we'll see in a
97:50 - moment what happens if we don't keep
97:51 - those straight let me go ahead and run
97:53 - python if hello.pi enter what's your
97:56 - name and now I'm crossing my fingers
97:57 - enter there we go we're back in business
98:00 - but now I have my own custom function
98:02 - called hello that's allowing me to say
98:04 - hello to a specific person and here's
98:07 - where now things can get really fancy
98:08 - what if you wanted your hello function
98:10 - to say hello to someone specific but you
98:12 - know what if you don't know who you want
98:14 - to say hello to you want to say hello to
98:16 - the whole world you can give parameters
98:18 - default values we've seen that recall
98:20 - that with print there was a default
98:22 - value for sep for the separator there
98:24 - was a default value for end the line
98:27 - ending we can do that too and here's the
98:29 - syntax if you want the value of this
98:32 - parameter by default if not provided by
98:35 - the programmer to be equal to
98:37 - quote-unquote world you literally do
98:39 - that in the same line you're defining
98:42 - the function and I'll admit it's
98:44 - starting to look more cryptic but I'm
98:45 - still just defining a function called
98:47 - hello it takes a parameter called 2 but
98:50 - I'm assigning it with the equal sign a
98:53 - default value of quote unquote world
98:55 - just in case the programmer doesn't call
98:58 - hello with an argument and we can see
99:01 - this here let me change my code to use
99:03 - hello in two ways on line five I'm going
99:06 - to very simply call hello no arguments
99:09 - then on line six I'm going to get the
99:11 - name line seven I'm going to call hello
99:13 - with an argument so you'll see hello now
99:15 - being used in two ways let me go ahead
99:17 - and run pythonflow.pi
99:19 - I'll type in my name oh interesting
99:22 - notice I already see hello world but
99:25 - that's expected because line five
99:26 - happens before line six but once I type
99:29 - my name now the program is going to be a
99:31 - little more polite and say hello to me
99:33 - personally
99:35 - so there too we see with relatively
99:37 - simple but new syntax how you can
99:40 - Implement functionality very similar in
99:43 - spirit to what the print function gave
99:44 - us automatically now you have control
99:46 - over doing that yourself but let me now
99:49 - make this point too one of the whole
99:51 - points of defining your own functions is
99:53 - one just to avoid having to repeat
99:55 - yourself again and again you don't have
99:57 - to actually keep Reinventing the wheel
99:59 - and keep using the print function again
100:01 - and again and again if you just want to
100:03 - say hello wouldn't it be nice now if I
100:05 - could kind of move this code that I
100:08 - wrote for defining the hello function
100:10 - and just to be dramatic I'm going to hit
100:12 - enter a whole lot of times 50 lines down
100:15 - and put my definition of hello way
100:18 - further down in this file why well just
100:20 - from the spirit of out of sight out of
100:22 - mind because if I now rewind to the
100:24 - start of my program now you can sort of
100:27 - take for granted that oh hello is a
100:29 - function y because it's there on line
100:30 - one and it has an open parenthesis and a
100:32 - closed parenthesis which up until now
100:33 - has meant call this function and then on
100:36 - line two we're getting a variable from
100:37 - the user by typing in their name and
100:39 - then we're calling hello passing in that
100:42 - value well at this point I can just take
100:44 - for granted that hello exists even if
100:46 - it's way down further in the file or as
100:48 - we'll see in future weeks even if it's
100:49 - in a different file altogether but
100:52 - there's a problem here and let me go
100:54 - ahead and run this version of hello.pi
100:57 - notice that as soon as I run The
100:59 - Interpreter python of hello.pi I see a
101:02 - name error name hello is not defined
101:04 - again did you mean help well again
101:07 - fitting I do need some help here but I
101:09 - didn't mean to call the function help
101:11 - the problem here though is that python
101:13 - is just taking me literally I have
101:15 - defined my function hello all the way
101:17 - down here but I'm trying to use it way
101:20 - up here and that's not allowed Python's
101:22 - interpreter is going to take you
101:23 - literally and if you use a function it
101:25 - must already exist by the time you are
101:27 - calling it so how do I fix this well
101:29 - apparently I can't do that I have to
101:31 - Define any functions I want at the very
101:34 - top of my file but that too could get me
101:36 - into a bit of trouble eventually because
101:39 - if I constantly have to define a
101:41 - function above where I want to use it
101:43 - you're kind of writing code in Reverse
101:45 - you're constantly writing functions up
101:46 - here appear up here as opposed to like
101:48 - writing your code logically top to
101:49 - bottom so let me fix this in a more
101:52 - standard way which is to do this
101:54 - generally speaking you do want to put
101:57 - the main part of your code at the top of
102:00 - your file and in fact I'm going to go so
102:01 - far as to Define my function called main
102:04 - it's not a requirement but it's indeed a
102:07 - convention and this just connotes to the
102:09 - reader that this is the main part of my
102:11 - program I'm going to get rid of my empty
102:13 - hello call now and only pass in one
102:15 - version with hello name and then down
102:18 - here a couple lines further down I'll
102:20 - actually Define my hello function
102:22 - unfortunately now that I've reordered
102:24 - the functions in this way by putting the
102:26 - main part of my code at the top and
102:28 - hello at the bottom so that my logic
102:30 - kind of flows top to bottom if I go
102:32 - ahead and run python of hello.pi enter
102:35 - nothing whatsoever happens if I do it
102:39 - again nothing whatsoever happens well
102:41 - why in the world is this well just
102:43 - because I've defined a function called
102:44 - Main and I've defined a function called
102:46 - hello doesn't mean that I've actually
102:48 - called that is used either of them yes
102:51 - I'm using hello inside of Main but no
102:54 - one is telling python to actually use or
102:57 - call Main so in order to tidy this up
103:00 - the last thing I need to do in this file
103:02 - it seems is actually call my main
103:05 - function and in fact by calling my main
103:07 - function in this way it gets me out of
103:09 - trouble because now I'm defining main
103:11 - first but I'm not calling hello yet I'm
103:13 - defining hello next but I'm not calling
103:15 - hello next I only at the very end of
103:18 - this file call Main which has the effect
103:21 - of running this code up here which has
103:23 - the effect of running this code down
103:25 - here and it allows me therefore to
103:27 - organize my file and Order My functions
103:30 - in any way I want including main at the
103:32 - very top and solving ultimately that
103:35 - problem of python not knowing what's
103:37 - going on now it's important to note that
103:39 - I defined my function hello as taking an
103:42 - argument to and then I passed into that
103:44 - function the value of the variable that
103:46 - I wanted to say hello to that is the
103:48 - variable called name because suppose I
103:50 - had done something a little bit
103:51 - differently suppose that I hadn't
103:53 - defined hello is taking an argument so I
103:56 - just remove mention of two and its
103:57 - default value help world and I go back
104:00 - up to my main function and I just call
104:03 - hello itself without passing in any
104:05 - arguments and now let me go ahead and
104:07 - make one more change one more mistake
104:09 - technically let me go ahead and just try
104:11 - to naively print out the value of name
104:14 - in the hello function so now to be clear
104:16 - in my main function on line two I'm
104:18 - defining my variable called name and
104:20 - assigning it the return value of the
104:22 - input function from the user I'm then
104:24 - just calling hello in my hello function
104:26 - which now no longer takes any arguments
104:28 - I am calling print passing in hello
104:31 - comma and then immediately passing a
104:33 - name the variable into which I got the
104:36 - user's input but the catch is that name
104:38 - exists now only in Main and so watch
104:40 - what happens when I try to run this
104:42 - version of the program with python
104:44 - hello.pi I hit enter I'm prompted for my
104:47 - name David enter and ah a name error
104:50 - name name quote unquote is not defined
104:53 - so it turns out that this is actually an
104:55 - issue of what's called scope scope
104:57 - refers to a variable only existing in
105:00 - the context in which you defined it so
105:02 - insofar as I Define this variable name
105:04 - in my main function I can only use that
105:07 - variable in my name function I can't use
105:09 - it as I've tried to here in my hello
105:11 - function it doesn't exist in that
105:13 - so-called scope and so this is why now
105:16 - if I rewind and undo all of those
105:19 - changes you'll see that I'm deliberately
105:21 - passing main from my main function into
105:24 - my hello function and now in the hello
105:26 - function it technically has a different
105:27 - name it's called 2 in that context but
105:30 - that's fine it's completely up to each
105:31 - individual function to name its own
105:33 - variables or name its own arguments but
105:35 - this is a way now that I'm handing to
105:37 - the hello function the value of that
105:39 - variable so it can be printed by hello
105:41 - as well and there's one final flourish
105:44 - we can add here now that we've
105:46 - implemented hello you'll notice that
105:48 - hello only has a so-called side effect
105:50 - it only prints out something to the
105:52 - screen well what if I also want my
105:54 - function
105:55 - to not have a side effect per se but
105:58 - actually hand me back a value recall
106:00 - that the input function returns a value
106:03 - the string that the user typed in recall
106:06 - that the int function returns a value
106:08 - the float function returns a value that
106:10 - was passed into it well you can use one
106:13 - final keyword here literally return to
106:16 - return a value explicitly yourself in
106:19 - fact let me go back to vs code here and
106:21 - I think we'll return our attention to
106:24 - calculator dot pi and see if we can't
106:26 - Implement one other version of calculate
106:29 - calculator.pi that actually has our own
106:31 - function that even returns a value so
106:34 - I'm going to go ahead and open up
106:36 - calculator.pi and I think this time I'm
106:38 - going to throw everything away as before
106:40 - and I'm just going to start practicing
106:42 - what we're preaching here Define a
106:45 - function called main which is now going
106:47 - to be the main part of my function let's
106:49 - go ahead and now declare a variable
106:51 - called X and assign it to the converted
106:54 - version of the user input after asking
106:57 - them what's X so again a line of code
107:00 - quite like we've done before and suppose
107:02 - now that what I want to do is square
107:04 - this value I want to take the number
107:06 - that the users typed in and raise it to
107:07 - the power of 2. so 2 squared would be 4.
107:10 - 3 squared would be 9. 4 squared would be
107:13 - 16 and so forth well how do I go about
107:15 - implementing a function literally called
107:17 - Square which actually doesn't come with
107:19 - python built in well let me assume for
107:22 - the moment that it does exist and let me
107:23 - say something like this let me go ahead
107:26 - and say that printing how about x
107:30 - squared is
107:32 - comma square of X so what have I done
107:36 - I've defined a function called Main and
107:39 - I've implemented two lines the first of
107:41 - these lines prompts the user for a value
107:43 - X and converts it to an INT and stores
107:45 - it in a variable called X on line three
107:48 - I then say x squared is and then I pass
107:51 - a second argument to the print function
107:53 - whatever the return value is of a square
107:56 - function but Square doesn't exist and
107:59 - I'll show you this here if I now call
108:01 - Main at the bottom and I run python of
108:04 - calculator dot pi
108:06 - foreign
108:07 - I'll see that X is 2 and then I see a
108:11 - whole bunch of Errors a name error name
108:13 - square is not defined so this isn't a
108:16 - typo here it's just the function doesn't
108:17 - exist but I think I can make it exist
108:19 - here let me go ahead and Define another
108:21 - function called Square this one's going
108:24 - to take in a number and I'm going to
108:25 - call it generically n as many a
108:27 - programmer would just to represent any
108:29 - old number and then what do I want to do
108:31 - in order to square n well a numbered
108:35 - squared is really just itself times
108:36 - itself so I'm going to do this n times n
108:40 - but it's not enough just to do the math
108:42 - yourself n times n you're going to have
108:44 - to return the actual value n times n and
108:48 - that's our new keyword here when I now
108:50 - do this Watch What Happens python of
108:52 - calculator.pi enter X say shall be 2 x
108:57 - squared is 4. let me go ahead now and
108:59 - say x is now 3 x squared is now 9. so
109:04 - I've implemented my very own function
109:05 - that Returns the square of a value and
109:08 - because I'm using the return keyword
109:10 - that ensures that I can pass the return
109:13 - value of this just like the return value
109:14 - of input or int or float to another
109:17 - function like print instead and here too
109:20 - there's going to be so many ways to
109:21 - solve the same problem I can actually
109:23 - raise n to the power of two we've not
109:25 - seen the syntax before but if you use
109:27 - two two asterisks like this two stars
109:30 - that raises the thing on the left so the
109:32 - power on the right or it turns out there
109:34 - is in Python a function called pal for
109:37 - raising something to the power that
109:38 - takes two arguments the first of which
109:40 - is the number the second of which is the
109:42 - exponent so there too there's just so
109:44 - many ways to actually solve that same
109:47 - problem as well
109:49 - so ultimately what we have we done here
109:51 - we first introduced functions these
109:52 - actions are verbs many of which come
109:54 - built into python that you can just use
109:55 - in your own code we then introduced
109:57 - variables via which you could store
109:59 - those return values and then maybe do
110:01 - something more with it at the end of the
110:02 - day too you now have the ability to
110:04 - create to invent your own functions to
110:06 - solve simple problems like hello or in
110:08 - the weeks to come much more
110:10 - sophisticated more challenging more fun
110:12 - problems as well
110:19 - [Music]
110:26 - thank you
110:31 - foreign
110:34 - [Music]
110:40 - this is cs50's Introduction to
110:43 - programming with python my name is David
110:45 - Malin and this week we focus on
110:46 - conditionals conditionals or conditional
110:49 - statements in Python and in other
110:51 - languages are this ability to ask
110:53 - questions and answer those questions in
110:56 - order to decide do you want to execute
110:58 - this line of code or this line of code
110:59 - or this other line of code instead they
111:01 - allow you to take the proverbial Forks
111:04 - in the road within your own code
111:05 - logically so how might we go about
111:08 - making some of these decisions well it
111:10 - turns out that python comes with a lot
111:11 - of built-in syntax for instance here are
111:14 - just some of the symbols you can use in
111:15 - Python to ask questions admittedly
111:18 - mathematical questions but we'll start
111:19 - there if only to keep the example simply
111:21 - simple simple early on this first symbol
111:24 - as you might know for math represents
111:25 - greater than the second symbol might not
111:28 - look too familiar because we usually
111:29 - write it all as one thing on a piece of
111:32 - paper but on a keyboard if you want to
111:34 - say greater than or equal to you'd use
111:35 - this symbol Instead This of course means
111:37 - less than this means less than or equal
111:40 - to and this one's a bit of a curiosity
111:43 - we've seen in our look at functions and
111:45 - variables how we were able to assign
111:47 - values to variables using a single equal
111:50 - sign but that equal sign didn't
111:52 - represent equality it represented
111:54 - assignment from right to left that's
111:56 - great because it solved that problem but
111:58 - it kind of left us in a bit of a bind
111:59 - because how do we now compare two things
112:01 - left and right well in Python and in
112:04 - many languages you actually use two
112:06 - equal signs so two equal signs
112:08 - represents equality comparing the thing
112:10 - on the left and the right one equal sign
112:12 - as always represents assignment of
112:14 - copying the thing from the right to the
112:17 - left lastly this last symbol represents
112:19 - not equal to so the exclamation point or
112:22 - bang followed by an equal sign means not
112:25 - equal to some value next to it well to
112:28 - ask the questions using these symbols or
112:31 - any others we're going to need another
112:32 - keyword in Python and that keyword quite
112:34 - simply as in English is if you can ask
112:37 - questions in Python code along the line
112:39 - of if the answer to this question is
112:42 - true then go ahead and execute this code
112:45 - for me so let's go ahead and write some
112:47 - of these examples here I'm going to go
112:49 - over to vs code and let's go ahead and
112:51 - create a program first called compare.pi
112:54 - the goal of which is simply to write
112:56 - code that compares values and makes
112:58 - decisions based on those values let's go
113:00 - ahead and type code of compare.pi in
113:03 - order to create a brand new file called
113:04 - compare in which we'll start to express
113:06 - some of this logic all right well what
113:08 - do we want to compare so
113:12 - jurors but we'd like those integers to
113:14 - come from the user so that we can make
113:17 - decisions based on numbers we don't know
113:20 - the values of in advance well let's go
113:22 - ahead and do this as we've done in the
113:23 - past let's declare a variable like X
113:25 - let's assign it equal to the return
113:28 - value of the int function and pass to
113:32 - the int function the return value of the
113:34 - input function asking the user a
113:36 - question like what's X question mark As
113:38 - we've done in the past let's do this one
113:40 - more time with Y asking the user for the
113:43 - value of y and again converting that
113:47 - ultimately to an INT as well so with
113:49 - this amount of the story we have two
113:51 - variables X and Y Each of which has
113:53 - values and ideally we should be able to
113:55 - now compare these values so suppose I
113:57 - want to make a decision based on the
113:59 - values of these variables I'm going to
114:01 - use the keyword if and I'm going to use
114:03 - some of those mathematical symbols to
114:05 - actually ask the question itself so how
114:07 - about this if x is less than y then
114:10 - let's go ahead and just print as much
114:12 - Out quote unquote X is less than y so
114:15 - this is in a very interesting program
114:17 - yet I'm literally just stating the
114:19 - obvious based on the math but it's
114:21 - allowing me to now introduce some new
114:23 - syntax and exactly what is this syntax
114:25 - well it's this not just the keyword if
114:28 - which I've added here at the start of
114:29 - line four but then I ask my question
114:32 - here x less than y x is one variable on
114:35 - the left Y is one variable on the right
114:37 - and of course the less than sign is
114:38 - expressing the mathematical question I
114:40 - have what I've highlighted here is
114:42 - technically called a Boolean expression
114:45 - a Boolean expression named after a
114:46 - mathematician named bull is simply a
114:49 - question that has a yes or no answer or
114:52 - technically a true or false answer and
114:54 - that's nice because if there's only two
114:56 - possible answers it's very easy for me
114:58 - and in turn the computer to make a
115:00 - decision do this or don't do this thing
115:02 - now notice if you come from other
115:04 - languages you might notice that I have
115:07 - not typed any parentheses they are not
115:09 - in fact necessary at least in this case
115:11 - in Python but I have typed a colon at
115:13 - the end of the line and even more
115:15 - importantly at the next line I have
115:18 - begun my line with some indentation
115:19 - hitting the space bar four times or just
115:22 - hitting tab once which will
115:23 - automatically be converted to the same
115:25 - that indentation is what tells python
115:27 - that line five should only be executed
115:30 - if the answer to line Four's question is
115:34 - in fact true so if x is less than y that
115:38 - phrase will be printed thereafter well
115:40 - let's add a few more lines of code how
115:41 - about another question If X is greater
115:44 - than y then let's go ahead and print
115:45 - that X is greater than y and let's do
115:49 - one final question if x equals y then
115:52 - wait a minute
115:54 - what have I done wrong here right a good
115:57 - eye here I don't want to assign y to x
115:59 - if x equals equals y is how I express
116:02 - equality let's go ahead and print out X
116:06 - is equal to Y so I now have a uh three
116:10 - conditions if you will one question
116:12 - asking X less than y one asking X
116:14 - greater than y One X getting x equals
116:17 - equals y let's run the code well down
116:20 - here in my terminal window I'm going to
116:21 - run python of compare.pi and hit enter
116:23 - what's X let's go with one what's y
116:26 - let's go with two this should of course
116:29 - execute that first line of code and tell
116:32 - me indeed that X is less than y exactly
116:35 - as I would expect there well what just
116:38 - happened though in code well let's take
116:40 - a look perhaps at this same code
116:42 - visually particularly if you're a more
116:45 - visual learner this I dare say is what
116:47 - just happened so what we're looking at
116:49 - here is a flow chart it's a diagram of
116:52 - this program's logic and more
116:54 - technically it shows the program's
116:55 - control flow that is the ability of you
116:58 - and code to control the flow of a
117:00 - program generally from top to bottom in
117:02 - fact let me go ahead and zoom in on the
117:03 - top of this flowchart and you'll see an
117:05 - oval at the very top that says quite
117:07 - literally start that is irrespective of
117:09 - what shape or layout the diagram is is
117:12 - where your own thinking and logic should
117:14 - start when trying to wrap your mind
117:16 - around this program notice that there's
117:17 - an arrow from start to this diamond
117:19 - shape and inside of that diamond is a
117:21 - question a Boolean expression X less
117:23 - than y and this shape just means based
117:26 - on the answer to that question go left
117:28 - or go right specifically go left if the
117:31 - answer is true or go right if the answer
117:34 - is false well the inputs I typed were
117:37 - one and two respectively for X and Y so
117:40 - of course 1 is less than two so that's
117:43 - why my program printed out quote unquote
117:45 - X is less than y but recall the code the
117:50 - code then proceeded to ask two more
117:52 - questions is X greater than y is x equal
117:55 - equal to Y well the flowchart depicts
117:58 - those questions too notice that no
118:00 - matter whether the question had an
118:02 - answer of true or false the arrows both
118:04 - convert urge back down to this second
118:07 - diamond shape here and that second
118:09 - diamond shape asks the second question X
118:11 - greater than y that too has a true or
118:14 - false answer so we go one way or the
118:15 - other but if x is one and Y is two then
118:18 - no the answer is false one is not
118:20 - greater than y so logically in the
118:23 - flowchart you follow the false Arrow
118:24 - this time and notice along that false
118:27 - Arrow you don't print anything this time
118:29 - that's why we only saw one print out on
118:31 - the screen now there was still a third
118:33 - question and this flowchart captures
118:34 - that as well the third Diamond asks x
118:36 - equals equals y now that too has a false
118:39 - answer in this case because 1 of course
118:41 - does not equal equal Y and so we again
118:43 - follow the third false Branch here and
118:46 - that leads us of course to stop and stop
118:49 - just indicates that's it for the program
118:50 - so I think that's correct and that
118:54 - particular flow chart does happen to
118:56 - represent the actual code that I wrote
118:59 - so it's correct it does what it's
119:01 - supposed to do it answered the question
119:03 - correctly by printing on the screen X
119:04 - less than 1 why but what is perhaps
119:07 - poorly designed about it let's make this
119:10 - first distinction it's not enough
119:11 - necessarily for the code that you write
119:12 - to be correct and do what you intend
119:14 - longer term especially as our programs
119:16 - get longer and more sophisticated more
119:18 - complicated we're going to want them to
119:19 - be well designed too
119:22 - thoughts on in what way this program is
119:25 - arguably not well designed even though
119:29 - it's correct
119:30 - let's see here uh Khalid if I'm saying
119:33 - that right your thoughts too many ifs I
119:35 - think is getting repetitive we can make
119:38 - our code more concise maybe yeah it
119:40 - seems a little repetitive I'm asking if
119:42 - this if this if this and yet logically I
119:45 - should know the answer to some of those
119:46 - later questions once I figure one out
119:48 - and in short if you look at this diagram
119:50 - here notice that no matter whether I go
119:52 - left or I go right I'm always asking
119:55 - three questions no matter what all of
119:58 - those arrows lead to the first the
120:00 - second and the third Diamond so I'm
120:02 - asking three questions no matter whether
120:04 - any of those answers are true or false
120:06 - well how might I go about improving this
120:08 - well let me propose that we introduce
120:09 - another keyword to our python vocabulary
120:12 - namely L if and this too is kind of a
120:14 - succinct one it's a conjunction of else
120:17 - if in English which allows us to ask a
120:20 - question that takes into account whether
120:23 - or not a previous question had a true or
120:25 - false answer well what do I mean by that
120:27 - well let me go back to my code here and
120:29 - let me propose that we now improve upon
120:32 - this year by asking ourselves ultimately
120:35 - how can we ask fewer questions and let
120:38 - me go ahead here and propose that
120:40 - instead of asking if if if let's make
120:44 - these conditions potentially mutually
120:46 - exclusive that is to say don't keep
120:49 - answering questions once we get back a
120:51 - true answer so I'm going to change my
120:53 - code up here as follows instead of
120:55 - asking if if I'm going to say if x less
120:58 - than y l if x greater than y l if x
121:04 - equals equals y so I'm going to
121:06 - implicitly just like in English take
121:08 - into account that I'm only going to keep
121:11 - it's asking myself these questions if I
121:14 - haven't yet gotten a true response think
121:16 - about the logic here the English if x is
121:19 - less than y on line four print out X is
121:22 - less than y well if that's the case
121:24 - you're done logically because if the
121:26 - English is saying if x less than y else
121:29 - if x greater than why those are going to
121:32 - be mutually exclusive if the answer to
121:34 - the first question is true you don't
121:35 - have to keep asking questions to which
121:37 - you already logically know the answer so
121:39 - let me go ahead now and run this program
121:41 - and I think the behavior is going to be
121:42 - the same python of compare.pi what's X
121:45 - let's do one what's y let's do two x is
121:48 - less than y now honestly I didn't really
121:50 - notice a difference when I ran the
121:52 - program and honestly my Mac my PC my
121:55 - phone nowadays are so darn fast these
121:58 - kinds of improvements aren't going to
122:00 - necessarily feel any faster until we're
122:02 - writing bigger faster programs but it's
122:05 - laying the foundation for writing better
122:07 - code longer term now what is the
122:09 - Improvement I've just made well if
122:10 - previously my diagram looked like this
122:13 - which was problematic in so far as I was
122:16 - asking three questions no matter what
122:18 - even if I already figured out what I
122:20 - want to print on the screen this new
122:22 - version of the program that says if L if
122:25 - L if might look a little something like
122:27 - this instead now it got a little wider
122:29 - that's just because we drew the arrow
122:30 - Rose to be a bit wider here but let's
122:32 - focus on just how many questions are
122:34 - getting asked let me zoom in at the top
122:35 - as before and let me propose that we
122:38 - note that the start oval is at the very
122:40 - top and it's asking us to ask one
122:42 - question first X less than y is one less
122:44 - than two but notice here let me zoom out
122:47 - if one is indeed less than two we follow
122:51 - this longer Arrow the down Mark true we
122:55 - print out quote unquote X is less than y
122:58 - but then we immediately follow this next
123:00 - arrow down to the icon that says stop so
123:04 - that's what's implied by doing if L if L
123:07 - if if we get back a true answer right
123:09 - away to that first if we're going to
123:11 - print out X is less than y and then stop
123:13 - we're logically at the end of the
123:15 - program so this picture is just
123:16 - representing graphically what the code
123:20 - is actually doing but suppose I typed in
123:22 - something else suppose that my code
123:24 - actually ran and I typed in 2 for x and
123:28 - one for y that is to say the answer to
123:30 - the first question is now false but the
123:32 - answer to the second question is now
123:34 - true because of course one two is
123:38 - greater than one well let's go back to
123:40 - the diagram same as before we start at
123:42 - the very top where it says start the
123:44 - very first question up here now X less
123:46 - than y is an answer of false because no
123:49 - 2 is not less than one so we follow this
123:52 - arrow to the next question this diamond
123:54 - is X greater than y well yes 2 is
123:58 - greater than one so now we follow this
124:01 - left Arrow which is true we print out
124:03 - quote unquote X is greater than y and
124:06 - then stop so what's the Improvement well
124:09 - in the first case we got lucky and we
124:11 - only had to ask one question and boom
124:13 - we're done this time we had asked two
124:15 - questions but then boom we're done only
124:17 - if x happens to equal y do we actually
124:21 - find ourselves logically getting all the
124:23 - way down to this final L if in my code
124:27 - and pictorially only if x is equal to Y
124:30 - we we find ourselves going all the way
124:32 - down to the third Diamond the third
124:34 - question asking is it equal to why or
124:38 - not now hopefully the answer at that
124:40 - point is not false we've included a
124:42 - false Arrow just so that the program
124:44 - itself is well defined but logically we
124:46 - shouldn't actually be getting there
124:48 - anyway because it's got to be less than
124:50 - or greater than or equal to in this case
124:52 - well let me pause here to see if there's
124:54 - any questions now either on the code
124:56 - version thereof here or on this
124:58 - diagramming of that very same logic
125:02 - questions here on this control flow
125:07 - aren't we supposed to put an else at the
125:10 - end ah a good question and yes so that's
125:13 - going to be my my third and Final
125:15 - Approach and if you don't mind let's
125:16 - pivot there right away identifying a
125:18 - third keyword that indeed exists in
125:20 - Python that allows us to be even better
125:23 - at expressing this logic to design this
125:25 - program even better and that's going to
125:27 - solve a particular problem so if I take
125:30 - us back to our code here notice that
125:32 - what I've highlighted earlier L if x
125:35 - equals equals y it's not wrong to ask
125:38 - that question in fact if you're trying
125:39 - to be especially thorough it makes
125:41 - perfect sense to check if x is less than
125:43 - y greater than y or equal to Y but
125:48 - why don't I need to ask this third and
125:51 - final question we don't need to ask if x
125:54 - is equal to Y anymore because logically
125:57 - if the two conditionals evaluate to
126:00 - false there is only one
126:03 - um conditional that will evaluate to
126:05 - true and that is X is equal to Y exactly
126:08 - if we're all pretty comfortable with
126:09 - math and comparisons here of course X is
126:12 - either going to be less than y greater
126:14 - than y or equal to Y but once you rule
126:16 - out the first two scenarios logically
126:18 - it's got to be the case that X must
126:20 - equal y if it wasn't the case that it's
126:22 - less than or greater than so hope
126:24 - proposed that we use this other keyword
126:26 - else and how do we use this well exactly
126:28 - as we might in English let me go back to
126:29 - my code here and instead of bothering to
126:32 - ask the third and final question let's
126:34 - not ask a question at all let's just
126:36 - have this catch-all so to speak a final
126:39 - line of code that says else just assume
126:42 - that X is equal to Y therefore printing
126:44 - it as well so what's the upside of that
126:46 - my code is still going to work exactly
126:48 - the same and again my computer's so darn
126:50 - fast I don't even notice that it's
126:52 - working even faster than it was before
126:54 - but we would notice these kinds of
126:56 - things if we were doing a lot more work
126:58 - a lot bigger programs here but let me
127:00 - run python of compare.pi let's do for
127:03 - instance one and two it still works for
127:06 - that let's do two and one still works
127:09 - for that let's do one and one and it
127:11 - indeed now works for that but in these
127:14 - cases now let's consider the path we
127:16 - just went down previously our diagram
127:18 - when we had if L if L if in place looked
127:22 - a little something like this and notice
127:24 - that again we might have asked one
127:26 - question or two or worst case three
127:28 - whole questions but we can do better
127:30 - than that using else as hope proposed we
127:33 - can Whittle this diagram now down to
127:35 - this and even though it looks like the
127:36 - diagram is getting bigger notice that
127:38 - it's having fewer building blocks inside
127:41 - of it there's fewer arrows and there's
127:42 - fewer nodes in this picture let's start
127:45 - at the top now start leads us to the
127:47 - first first question still X less than y
127:49 - if the answer is true great we can say
127:52 - as much X is less than y and we can stop
127:53 - if it's not true if it's false we can
127:56 - ask the next question X is greater than
127:58 - y true or false if it is great we can
128:00 - print X is greater than y and stop else
128:03 - if it's not the case that X is greater
128:05 - than y the answer is false we can just
128:07 - immediately logically say x is equal to
128:11 - Y we don't have to add the third
128:13 - question at all we can just immediately
128:15 - conclude there so what's the implication
128:17 - here you can see with these pictures a
128:19 - relative decrease in the complexity of a
128:22 - program the first one was very long and
128:24 - stringy with lots and lots of questions
128:26 - unnecessarily ultimately the next one
128:28 - got a little shorter and this one's even
128:30 - shorter still and again the fewer lines
128:33 - of code you have the less likely you are
128:35 - arguably to make any mistakes the easier
128:37 - it is for other people to read and so
128:39 - generally this readability this
128:41 - simplification is indeed a good thing
128:44 - well let's go ahead and add another
128:45 - piece of capability it's a python and
128:49 - that's this one here just like in
128:50 - English where you can ask this question
128:52 - or this other question you can say the
128:54 - same thing in Python using literally
128:56 - this word or so let me go back to my
128:58 - python code here and let's propose how
129:01 - we might ask a couple of questions at
129:03 - once this time perhaps this time
129:04 - considering how we might ask not whether
129:08 - or not it's greater than or equal to in
129:09 - caring about the precise answer let's
129:12 - take a a coarser approach here and let's
129:14 - just try to determine is X greater is x
129:17 - equal to y or not well let me go ahead
129:21 - and delete some of this code and change
129:23 - the question we're asking let me do this
129:24 - well if I care about whether it's equal
129:27 - or not let's check the possible
129:29 - scenarios if x is less than y or X is
129:33 - greater than y let's go ahead and print
129:36 - out X is not equal to Y now why is that
129:40 - no pun intended if x is less than y well
129:43 - it's obviously not equal if x is greater
129:45 - than y it's obviously not equal so we
129:47 - can include X is not equal to y
129:51 - so if we instead want to make sure that
129:55 - it is equal to we can just use hopes
129:59 - else using print quote unquote X is
130:02 - equal to Y and again Y is this well if x
130:05 - is less than y or X is greater than y
130:08 - they're obviously not equal otherwise
130:10 - logically they must be equal in fact so
130:12 - let's run this let's go ahead and run
130:13 - python if compare.pi what's X1 what's Y2
130:17 - okay X is not equal to Y let's do it
130:20 - again but 2 for x 1 for Y X is not equal
130:23 - to Y and one third time how about X is
130:26 - one and Y is One X is now equal to Y now
130:30 - if we want to compare that visually to
130:33 - let me propose that the picture looks a
130:35 - little something like this and again
130:37 - this is the exact same thing logically
130:39 - but it's a pictorial representation
130:40 - thereof what's the first question well
130:42 - if x is less than y well then we follow
130:45 - the true arrow and we say quote unquote
130:47 - X is not equal to Y and then we stop
130:50 - but what if X is not less than y what if
130:53 - it's greater than y what if it's 2 and 1
130:55 - respectively then the answer to x less
130:57 - than y's first question is false so we
131:00 - go here we ask the second question
131:02 - because of the or and that asks is X
131:05 - greater than y if so notice this we can
131:08 - kind of reuse some of the same parts of
131:10 - this picture and just say X is not equal
131:13 - to Y we don't need to add arrows and add
131:15 - boxes unnecessarily we can reuse lines
131:18 - of code uh picture parts of the picture
131:20 - just as we have lines of code and then
131:22 - we stop lastly we have the following if
131:25 - we know that X is not less than y we
131:27 - know that X is not greater than y it
131:29 - must be the case that x equals y we
131:32 - don't need to ask a third question
131:33 - another diamond we can just immediately
131:35 - print as much and then say stop as well
131:39 - well what could I do here I bet I could
131:42 - improve this code slightly
131:44 - and if we really want to be nitpicky I
131:47 - would argue that this is now really just
131:49 - a minor refinement but it's a good habit
131:51 - to get into thinking about could my code
131:53 - be better could my code be simpler
131:56 - could I improve this code further it's
131:59 - subtle but could I improve the design
132:02 - could I ask fewer questions could I
132:05 - tighten it up so to speak
132:07 - what do folks think you can ask if x is
132:12 - just equal to Y then if we print X is
132:15 - equal to Y else X is not equal to RX
132:19 - perfect recall one of the other symbols
132:21 - we saw in the available list earlier we
132:23 - can check not just less than or greater
132:25 - than or equal to we can literally ask
132:27 - the question is it not equal to why are
132:29 - we wasting time asking if it's less than
132:31 - or if it's greater than well if all you
132:33 - care about is is it not equal I think we
132:35 - can do exactly that let's just ask the
132:37 - one simple question we do care about and
132:40 - so let me go back up here and let me
132:42 - just say not both of these questions
132:43 - let's get rid of the or let's just say
132:45 - if X is not equal to Y then go ahead and
132:49 - print X is not equal to Y and that too I
132:53 - think is going to work exactly the same
132:54 - but the picture now looks a little bit
132:57 - different notice that this was our
132:58 - flowchart earlier that represented that
133:01 - same logic and there's a bit of
133:02 - complexity you got to go left you got to
133:04 - go right based on the answer to these
133:05 - couple of questions if we now take into
133:07 - account what this version of the program
133:09 - looks like it's even simpler perhaps the
133:11 - simplest one we've seen yet when we
133:12 - start off the program we ask just one
133:14 - and only one question is X not equal to
133:17 - Y and if so true we we go ahead and
133:20 - print out X not equal to Y if the answer
133:23 - is false then of course it must be equal
133:25 - to Y so we say that instead and if we
133:28 - really want we could invert this if I go
133:30 - back here to my code and if for whatever
133:32 - reason you just prefer to think in terms
133:34 - of equal or not equal as opposed to not
133:37 - equal or equal it's really up to you we
133:41 - could change this to be equals equals
133:43 - but I'm going to have to change my print
133:45 - statements to be in the opposite order
133:47 - so let me go ahead now and reverse these
133:49 - two here and move the second one first
133:52 - and the first one second so now when I
133:55 - execute this code I'm asking still just
133:57 - one question so it's still just as good
133:59 - just as succinct but now the diagram
134:01 - instead of looking like this is going to
134:03 - change the not equal to equal equal and
134:06 - we just need to make sure that we print
134:07 - out the right thing accordingly and
134:10 - again here too just as the code is
134:12 - getting a little more compact a little
134:13 - more compact with fewer and fewer
134:15 - characters so are these diagrams these
134:17 - flow charts capturing the relative
134:19 - simplification of each of those programs
134:22 - too all right let me go ahead and pause
134:24 - here to see if there's any questions now
134:26 - on any of these versions of code
134:32 - yeah I have a couple of questions
134:34 - what if indentation is not used
134:37 - uh if indentation is not used your
134:40 - program will not work so python is a
134:42 - little different from a lot of languages
134:44 - in that it enforces the indentation
134:46 - requirement uh some of you who have been
134:48 - programming for years might not
134:50 - necessarily be in the best habit of
134:51 - indenting your code properly and one of
134:54 - the features arguably of python is that
134:56 - it makes you indent your code or it will
134:58 - not just work and I think did you have
135:01 - one other question
135:02 - uh yeah uh this is the colon necessary
135:06 - is the colon necessary yes the colon 2
135:09 - is necessary so with python what you see
135:12 - is what you get here and indeed it needs
135:14 - to be indented and the colon is
135:16 - necessary python does not use in the
135:18 - same way by Convention as C and C plus
135:20 - plus and Java curly braces to connote
135:22 - blocks instead it relies indeed on this
135:25 - indentation
135:26 - well let me propose that we introduce
135:28 - one other keyword here in Python to see
135:30 - exactly how we might combine additional
135:32 - thoughts and that's going to be
135:33 - literally the word and a conjunction of
135:35 - one or two or more questions that we
135:38 - might want to ask at once and let me
135:40 - propose here that we explore this kind
135:43 - of logic by way of another program
135:45 - altogether in vs code whereby I'll go
135:47 - ahead now and create a new program say
135:49 - called grade dot Pi let's consider
135:52 - exactly what grade a student should get
135:53 - based on their score on an exam or a
135:56 - test or a quiz or some other assignment
135:57 - like that I'm going to go ahead and run
135:59 - code of grade.pi to give myself a new
136:02 - file and I'm going to go ahead and start
136:03 - by just getting the user's score again
136:05 - on some assignment or tester or the like
136:07 - and I'm going to store it in a variable
136:08 - called score equal the return value of
136:11 - the int function which is going to
136:12 - convert whatever the user's input is
136:14 - when prompted for this score so again
136:16 - the user should just Oblige by giving me
136:18 - a number like zero or one or two or
136:21 - hopefully much higher than that like 97
136:23 - 98 99 100 assuming the test or assess is
136:26 - out of 100 percentage points now how
136:29 - could I go about assigning a grade to
136:31 - the student score well in the U.S it's
136:34 - very commonly the case that if you get
136:36 - between a 90 and 100 that's an A and if
136:38 - it's between an 80 and an 89 it's a b if
136:42 - it's 70 and 79 it's a c and so forth all
136:46 - the way down to F which should be e but
136:48 - we'll see that there's a bit of a jump
136:49 - so how might I express this well I can
136:51 - use conditionals and I can ask a few
136:53 - questions and then print out the
136:54 - student's grade accordingly so let me
136:56 - express it like this if the student
136:58 - score is greater than or equal to 90 and
137:02 - the student's score is less than or
137:04 - equal to 100 so it's in that range let's
137:07 - go ahead and print out that their grade
137:09 - shall be an a because they're in the 90s
137:11 - above grades range
137:13 - L if the score is greater than or equal
137:17 - to 80 and the score is less than or
137:20 - equal to say 89 but here I have some
137:23 - options logically I can actually express
137:25 - myself in any number of ways and maybe
137:26 - just to be a little cleaner I'm going to
137:28 - say and score is less than 90. so I'm
137:31 - using less than instead of less than or
137:33 - equal to so I'm making sure that they're
137:35 - boundaries between these grades are
137:36 - correct then I'm going to go ahead and
137:38 - give the student a b
137:40 - if it's in the 80s L if score is greater
137:44 - than or equal to 70 and the score is
137:46 - less than 80. I'm going to go ahead and
137:48 - give them a c l if the score is greater
137:52 - than or equal to 60 and the score is
137:54 - less than 70. I'm going to go ahead and
137:56 - give them a d and here's where it's a
137:59 - little anomalous at least in some
138:00 - schools here else I'm going to go ahead
138:02 - and give them uh an F so we're skipping
138:05 - e all together and we're going to give
138:07 - an f instead for the grade so that's the
138:10 - catch-all and I think logically I've
138:12 - gotten this correct at least based on
138:14 - where I went to school growing up such
138:16 - that it's going to give an A or a b or c
138:18 - or a d else it's going to assume that
138:21 - you got an F well let's try just a few
138:23 - of these here let's run python of
138:24 - grade.pi my score is let's let's start
138:27 - strong 100. all right I got an A didn't
138:30 - do as well the next time maybe it's a 95
138:32 - still an a starting to slip further so I
138:35 - got an 89 the next time that's now say a
138:38 - b and let's say I really had a bad week
138:40 - and it's now like a 71 that's now A C or
138:44 - I didn't even submit it at all that's a
138:46 - an F all together all right so it seems
138:48 - to work that's not really an exhaustive
138:50 - test but at least based on some sampling
138:51 - there my code seems to work as I expect
138:54 - but let's see if we can't tighten this
138:56 - up it's not wrong it's correct and
138:58 - indeed according to my own
138:59 - specifications I dare say this code is
139:00 - correct but can we tighten it up can we
139:02 - reduce the probability of bugs now we're
139:05 - down the line can we increase the
139:07 - readability of it and can we increase
139:08 - the efficiency of it can we get the
139:10 - computer to have to answer fewer
139:12 - questions and still get the same result
139:14 - well let's see what we might do let me
139:16 - just kind of switch things up if only to
139:18 - demonstrate that we can use these
139:19 - symbols in different ways I could say as
139:22 - I've done if score is greater than or
139:24 - equal to 90 but I can actually do this I
139:27 - can flip it around instead of saying
139:29 - greater than or equal to let's say 90 is
139:32 - less than or equal to score and here
139:35 - let's say if 80 is less than or equal to
139:39 - score and here 70
139:41 - is less than or equal to score and then
139:44 - lastly 60 is less than or equal to score
139:46 - so it's the same thing logically I'm
139:49 - just kind of switching things around
139:50 - just like you could do on paper pencil
139:52 - if you really wanted but now notice this
139:54 - trick and this is not possible for those
139:56 - of you who have programmed in C or C
139:57 - plus or Java or other languages notice
140:00 - what I can do here is actually combine
140:03 - these ranges notice that I'm asking two
140:05 - questions two Boolean Expressions is 90
140:08 - less than or equal to score and is score
140:11 - less than or equal to 100 well python
140:13 - allows you to Nest these things like
140:16 - this and chain them together and just
140:18 - like you would on paper pencil in the
140:21 - real world you can encode in Python do
140:23 - this which is just a little cleaner
140:25 - right it's tightening up the code a
140:26 - little bit it's fewer keystrokes it's
140:28 - faster to type it's easier to read
140:30 - moving forward so that's arguably better
140:32 - as well so that's one Improvement it's
140:35 - largely aesthetic in this case it's
140:37 - still asking the same number of
140:38 - questions but it's doing it a little
140:40 - more succinctly still well what what
140:43 - more could I do here next well you know
140:46 - what each time I'm deciding these grades
140:48 - I don't think I have to ask two
140:49 - questions I don't have to ask is it
140:52 - greater than 90 and less than 100 is it
140:54 - greater than 80 and less than 90 if I
140:57 - kind of rethink my logic I can maybe do
140:59 - this better still let me propose that we
141:01 - simplify this further and just do this
141:04 - if we know the input for the moment is
141:06 - going to be within 0 and 100 we can make
141:09 - some assumptions we could say something
141:11 - like if the score is greater than or
141:13 - equal to 90 well the student gets an A L
141:17 - if the score is greater than or equal to
141:19 - 80 the student gets a b l if score is
141:22 - greater than or equal to 70 they get a c
141:24 - l if
141:26 - the score is greater than or equal to 60
141:29 - they get a d else they get an F so what
141:34 - have I done here well instead of asking
141:36 - two questions every time checking the
141:39 - lower bound and the upper bound of that
141:41 - range I'm kind of being a little more
141:43 - clever here by asking if the score is
141:45 - greater than 90 well they've obviously
141:47 - gotten an A or better if your score is
141:50 - greater than 80 well you either deserve
141:52 - an a if it's really strong or a B if
141:55 - it's just above 80 but because of the if
141:57 - L if logic we've already checked as the
142:00 - student score greater than 90 and if
142:02 - it's not then we're asking the question
142:04 - well is it greater than 80 so you
142:06 - implicitly know it's somewhere in the 80
142:08 - to 89 range else you know it's in the 70
142:11 - to 79 reach else it's in the next range
142:14 - down so it's a minor optimization that
142:17 - allows us to ask fewer questions but
142:18 - again it's making the code arguably a
142:20 - little more readable certainly more
142:22 - succinct and then hopefully more
142:24 - maintainable longer term any questions
142:27 - then on these types
142:30 - of changes and this type of logic with
142:33 - our code
142:35 - uh what if we don't use alif at all what
142:38 - if we uh write the code in F yeah so
142:42 - that's a good question because it's
142:43 - actually going to have an unintended
142:46 - effect here let me get rid of the F
142:48 - temporarily and just focus on a through
142:49 - D if we revert to where we began today's
142:53 - story with conditional saying if if if
142:55 - if now our cleverness here of using
142:59 - broader strokes and not using an upper
143:01 - and lower bound ranges is going to come
143:04 - back to be a downside let me go ahead
143:07 - and run python of grade.pi and suppose
143:09 - my score is uh 95 I am so darn excited I
143:14 - want my a but nope I just got an A a b a
143:18 - c and a d so logically that's broken
143:21 - things because if you don't make these
143:22 - conditions mutually exclusive every one
143:26 - of those questions is going to get asked
143:28 - and therefore answered and even if your
143:30 - grade is above a 90 it's also logically
143:33 - above an 80 above a 70 above a 60 and if
143:36 - I'd kept it in there I would have failed
143:37 - as well with an F really good question
143:40 - other questions here
143:42 - on this form of logic like would there
143:44 - be any I guess better way to kind of
143:46 - clean up even just this simple statement
143:47 - like we had before the previous one that
143:49 - you had with the Elton oh I I like your
143:52 - enthusiasm for simplifying things
143:54 - further
143:55 - I'm gonna go out on a limb here and say
143:58 - this is about as good as it gets at
144:01 - least using only conditional statements
144:03 - I can if my mind wanders think of a
144:06 - slightly more clever way to do this
144:08 - maybe with something called a loop or
144:10 - another programming construct we don't
144:11 - have that yet in our vocabulary but yes
144:13 - there's absolutely other ways to do it
144:15 - but I think not yet if we want to
144:16 - restrict ourselves to just words like if
144:18 - and or and else uh and elif and and the
144:22 - like well let me propose that we pivot
144:24 - now to use another approach here that
144:26 - uses one other symbol that up until now
144:28 - we've not really had occasion to use let
144:30 - me propose that we Implement a program
144:32 - that we'll call parity and Mathematics
144:35 - parity can refer to whether a number is
144:36 - even or odd and that's kind of an
144:39 - interesting question and it turns out it
144:40 - can be useful in other applications too
144:42 - to just ask the question is a given
144:44 - number even or odd maybe that the user
144:46 - typed in and let me go ahead and write a
144:48 - new program called parity dot Pi via
144:52 - code parody.pi in my terminal and let me
144:55 - propose that we use this as an
144:56 - opportunity to introduce the last of
144:59 - those arithmetic symbols at least most
145:01 - of which we're familiar with addition
145:03 - subtraction multiplication division but
145:05 - there's been on this list before this
145:07 - last one here a percent sign and it
145:09 - doesn't mean percentage in this case
145:10 - when used as an operator in programming
145:12 - in Python rather it represents the
145:14 - so-called modulo operator for modular
145:17 - arithmetic or at least in our case we're
145:19 - going to use it to calculate the
145:20 - remainder when dividing one number by
145:23 - another well what do I mean by that well
145:24 - if you take a number like 1 divided by
145:27 - three three does not go into one eat
145:29 - cleanly so you have a remainder of one
145:32 - two divided by three has a remainder of
145:35 - two three divided by three has a
145:37 - remainder of zero because it divides
145:39 - cleanly 4 divided by three has a
145:43 - remainder of one because you can divide
145:45 - it in once but then that leaves one so
145:47 - it has a remainder of one and then
145:48 - lastly something like 5 divided by 3 has
145:51 - a remainder of course of two so that's
145:53 - all we mean by remainder how much is
145:54 - left over after divide dividing one
145:56 - number by another well if I go back now
145:58 - to my code and I consider how I might
146:01 - implement the question is this number
146:03 - even or odd let's consider how we might
146:06 - Implement that since it's perhaps not
146:08 - necessarily obvious how we can use this
146:10 - additional building block but it turns
146:11 - out it's going to be very useful longer
146:13 - term well let's first just get a number
146:15 - from the user in a variable called X and
146:17 - I'm going to set that equal to the
146:19 - conversion to int of whatever the user
146:21 - inputs after asking them what's X
146:23 - question mark and we've done that before
146:25 - many times how do I now determine if x
146:28 - is even or odd well it turns out if I
146:31 - have access to a programmatic operator
146:34 - that tells me the remainder I think I
146:37 - can do this in fact let me just ask the
146:38 - group and this is just from grade school
146:40 - math perhaps what does it mean for a
146:42 - number to be even
146:44 - to be clear a number like zero two four
146:48 - six eight ten twelve fourteen sixteen
146:52 - those are all even numbers but what does
146:53 - that really mean Elena if I'm saying
146:55 - that right uh even numbers that can
146:58 - divide it exactly by two for example two
147:01 - four six eight and ten and perfect and
147:05 - we could go on all day long literally
147:06 - since there's an infinite number of
147:07 - those even numbers but it's nice that
147:09 - you formulated it in terms of a question
147:11 - that we can ask very clearly is this
147:14 - number cleanly divided by two that is
147:17 - can we divide it by two with no
147:19 - remainder a remainder of zero well
147:21 - that's perfect because if we have this
147:23 - operator this percentage sign that
147:25 - allows us to answer just that what is
147:27 - the remainder we can presumably check is
147:29 - the remainder is zero or is it one do we
147:31 - have nothing left over or do we have one
147:33 - left over well let's ask that if x
147:37 - divided by
147:39 - two has a remainder of zero as Elena
147:42 - proposes let's go ahead and print out
147:44 - something like quote unquote even and
147:46 - just say as much to the user else I
147:49 - think we can assume that if a number is
147:50 - not even it's going to be odd if it's
147:53 - indeed an integer so I'm going to go
147:54 - ahead and print out quote unquote odd
147:56 - instead and let's go ahead and now run
147:59 - pythonofparity.pi in my prompt what's X
148:01 - let's start with two two is in fact even
148:03 - let's start with four four is in fact
148:06 - even let's get thing let's get
148:07 - interesting with three three is now odd
148:10 - and I think we could do that all day
148:12 - long and hopefully get back indeed
148:13 - exactly that answer but what more could
148:16 - we do here how could we improve upon
148:19 - this well recall that we have the
148:21 - ability to invent our own functions and
148:24 - let me just propose for the sake of
148:25 - discussion that we're going to
148:26 - eventually find that it's useful to be
148:28 - able to determine if a number is even or
148:30 - odd and so we'd like to have that
148:31 - functionality built in and I don't think
148:33 - python has a function for telling me
148:35 - just that but I can invent it using Code
148:37 - like just this so so let me go into my
148:41 - earlier version here and let me propose
148:43 - that we do this let me go ahead and
148:46 - write a main function I'm going to get
148:48 - back into that habit of defining a main
148:50 - function to represent the main part of
148:52 - my program and I'm going to do what I
148:54 - did before I'm going to get an integer
148:55 - from the user's input asking them what's
148:58 - X question mark and then I'm going to
149:01 - ask this question for the moment I'm
149:03 - going to naively assume that the
149:04 - function already exists but that's a
149:06 - useful problem solving technique even if
149:08 - I have no idea yet where I'm going with
149:10 - this how I'm going to invent and
149:12 - function that determines if a number is
149:13 - even I'm just going to assume that
149:15 - there's a function called is even and
149:17 - I'm going to call it blindly like this
149:19 - if is even passing in x
149:23 - and then go ahead and print quote
149:26 - unquote even so if this magical function
149:28 - called is even returns true as its
149:32 - return value I am going to print out
149:34 - that it's even else otherwise I'm going
149:37 - to assume that it's of course odd now
149:39 - the one problem with this program even
149:41 - if I call Main over here is that is even
149:44 - does not exist and this program would
149:46 - break if I ran it right now but that's
149:48 - okay I have the ability to recall to
149:50 - invent my own function so let me Define
149:52 - with def a function called is even I
149:56 - want this function to take an argument
149:58 - and I'm going to call it n just a number
150:00 - generically I could call it X but again
150:02 - I don't want to confuse myself as to
150:04 - which X is which so I'm going to give it
150:06 - a different name and that's fine I'm
150:07 - just going to call it more generically n
150:09 - for number and then I'm going to do this
150:12 - I'm going to say if n percent two equals
150:16 - equals 0 just like before then and
150:19 - here's the magic you the programmer can
150:22 - actually return what are called Boolean
150:25 - values we've seen in Python that python
150:28 - has stirs or strings ins or integers
150:31 - Floats or floating Point values all of
150:34 - which are different types of data in
150:36 - python python also has a fourth data
150:39 - type called Bool for a Boolean value and
150:42 - even though this is just adding to our
150:43 - list the nice thing about bulls is that
150:45 - they can only be true or false an INT
150:49 - can be any number of an infinite
150:51 - possible values a bull can only be true
150:53 - or false and it must be capital T and
150:56 - capital F if you're writing itself so if
150:59 - I go back now to my code and I consider
151:01 - exactly what I want to return here well
151:05 - if x if n percent two equals equals zero
151:09 - that is if n divided by 2 has a
151:11 - remainder of 0 well I think it's even to
151:14 - Elena your definition so let's return
151:16 - true capital T else if it doesn't have a
151:20 - remainder of zero I'm pretty sure
151:21 - mathematically it's got to have a
151:22 - remainder of one but it doesn't matter I
151:25 - know it's not even so I'm going to
151:27 - return false and we've returned false
151:30 - instead capital F and now that we've
151:33 - defined both Main and is even and I'm
151:36 - calling main at the bottom I think I've
151:38 - got this right python of parity.pi enter
151:41 - what's X let's try something simple like
151:43 - two and it's even let's do it again
151:46 - what's X how about four even once more
151:49 - what's X how about 3 and it's odd now
151:52 - what have I done here I've just made the
151:54 - point that if I want to create my own
151:56 - function called is even that answers
151:59 - this question for me that I can now use
152:00 - in this program and heck maybe future
152:02 - programs that I write I now have a
152:05 - function that no one gave me I gave
152:07 - myself that I can use and reuse and I
152:09 - can even perhaps share it with others
152:10 - I'm using that function now on line
152:13 - three just to make a decision I'm using
152:15 - a conditional up there and my Boolean
152:18 - expression something that's true or
152:20 - false is going to be not something
152:22 - explicit like X less than y or y greater
152:25 - than x or the like it's going to be a
152:27 - function call I'm using a function as my
152:30 - Boolean expression but that's okay
152:32 - because I know because I wrote it that
152:34 - that function is even returns true or it
152:38 - returns false and that's all I need in a
152:40 - conditional to make a decision to print
152:43 - even or print odd
152:45 - so let me pause here to see if there's
152:46 - any questions now on how I've
152:48 - implemented is even
152:51 - using this bull hello hi David first of
152:54 - all thank you for this wonderful class
152:55 - uh name for yesterday and create stuff
152:58 - uh I have just one query like basis on
153:01 - the background of java uh there when we
153:04 - used to pass the arguments we can also
153:07 - pass the address of the variables so is
153:10 - there any sort of this concept in Python
153:12 - uh short answer no those who are
153:14 - unfamiliar with Java or other languages
153:16 - or C or C plus plus there's generally
153:18 - ways to pass values in different
153:20 - mechanisms that allow you or disallow
153:22 - you to change them in Python no
153:24 - everything we're going to see is
153:25 - actually in fact an object but more on
153:27 - that down the line how about time for
153:30 - one more question here
153:32 - on these bulls and these is evens
153:35 - so I actually had a question about
153:37 - um defining a function okay if that's
153:39 - okay sure so if you define one are you
153:42 - like within your code like you made it
153:44 - up are you allowed to use the dot
153:46 - operator like we did name dot strip and
153:49 - use it like that good question if you've
153:51 - created your own function can you use
153:53 - other functions like dot strip or dot
153:56 - title or dot capitalize that we've seen
153:58 - in the past
153:59 - um you can use those on strings those
154:02 - functions come with strings you can't
154:05 - necessarily use them on your own
154:07 - functions unless your function returns a
154:09 - string for the examples you gave I'm
154:12 - returning a bull bulls have no notion of
154:14 - white space to the left or the right you
154:16 - can't call strip you can't call
154:17 - capitalize but if you were writing a
154:19 - different function that returns a string
154:20 - absolutely you could use those functions
154:22 - as well well let me turn our attention
154:24 - if I may back to this example here and
154:26 - consider as we now frequently do can we
154:29 - improve on the design of this code can I
154:31 - make this particular program better and
154:34 - I can there's a couple of ways here and
154:36 - I'll show you something that's now
154:37 - generally known as something pythonic
154:40 - there's actually this term of Art in the
154:41 - python world where something is pythonic
154:44 - if it's just the way you do things in
154:46 - Python which is to say we've seen
154:48 - already there's so many different ways
154:49 - to solve certain problems and in the
154:51 - python community of programmers there
154:54 - tend to be some ways that are smiled
154:56 - upon more than others and they tend to
154:58 - relate to features that maybe only
155:00 - python has but not other languages and
155:02 - here's some syntax that you might not
155:04 - have seen in languages like Java or C or
155:06 - C plus if you've programmed before and
155:08 - if you've never programmed before this
155:09 - too is going to be new
155:11 - instead of asking a question like this
155:14 - if else using four lines in Python you
155:18 - can actually collapse this into just one
155:20 - more elegant line if you will instead of
155:24 - asking if n divided by 2 has a remainder
155:27 - of 0 return true else returned false let
155:31 - me delete all of that and just say this
155:33 - return true if n divided by 2 has a
155:39 - remainder of 0 else return false now
155:43 - those of you who do have prior
155:44 - programming experience might actually
155:46 - think this is kind of cool you can
155:48 - condense from four lines into one line
155:50 - that very same thought and one of the
155:52 - reasons why python is popular is that it
155:54 - does tend to read rather like English
155:56 - it's not quite as user friendly as most
155:58 - English or most human languages but
156:00 - notice now the line does rather say what
156:03 - you mean return true if n divided by 2
156:07 - has a remainder of 0 else false I mean
156:10 - that's pretty darn close to something
156:12 - you might say logically in English be it
156:14 - about even an odd or really anything
156:17 - else so that program is going to work
156:18 - exactly the same python of parody.pi let
156:21 - me type in two it's still even let me
156:23 - type in three it's still odd but I can
156:26 - refine this even further and again
156:28 - consistent with this idea of not just
156:29 - writing correct code but writing better
156:32 - and better code but still keeping it
156:34 - readable I can do one even better than
156:37 - this notice this value here is my
156:40 - Boolean expression and it is going to
156:42 - evaluate to true or false is n divided
156:46 - by 2 having a remainder of 0 or not like
156:49 - that is by definition a Boolean
156:51 - expression it has a yes no answer a true
156:54 - false answer well if you're Boolean
156:56 - expression itself has a true or false
157:00 - answer why are you asking a question in
157:03 - the first place why ask if why say else
157:07 - just return the value of your own
157:11 - Boolean expression and perhaps the
157:14 - tightest version the most succinct and
157:16 - still readable version of this code
157:18 - would be to delete this whole line
157:20 - pythonic though it is and just return n
157:24 - modulo 2 equals equals zero if it helps
157:29 - let me add parentheses temporarily
157:30 - because what's going to happen in
157:32 - parentheses will happen first n divided
157:35 - by 2 either does or does not have a a
157:38 - remainder of zero if it does the answer
157:40 - is true if it doesn't the answer is
157:43 - false so just return the question if you
157:46 - will you don't need to wrap it
157:48 - explicitly with an if and an else and in
157:51 - fact because of order of operations you
157:53 - don't even need the parentheses so now
157:55 - this is perhaps the most elegant way to
157:58 - implement this same idea now which is
158:01 - better this is pretty darn good and it's
158:03 - hard to take fault with this because
158:05 - it's so very succinct but it's perfectly
158:08 - okay and just as correct to have an if
158:10 - and then an else even though it might be
158:13 - four Total Lines if that helps you think
158:15 - about your code more clearly and it
158:16 - helps other people reason about it as
158:19 - well so it turns out there's another
158:21 - syntax that you can use to implement the
158:23 - same idea of a conditional whereby you
158:25 - do something optionally based on the
158:27 - answer to some Boolean expression and
158:29 - the keyword that you can now use in
158:31 - recent versions of python is called this
158:33 - match match is a mechanism that if
158:35 - you've programmed before is similar in
158:37 - spirit to something called switch in
158:39 - other languages for instance let me go
158:41 - ahead here and close out parity.pi and
158:43 - let me go ahead and create a new file
158:45 - called house.pi and in house.pi I think
158:49 - what we're going to do is try to
158:50 - implement a program that prompts the
158:52 - user for their name and it just outputs
158:53 - what house they're known to be in in the
158:55 - World of Harry Potter so for instance
158:57 - let me go ahead and do this let me give
158:59 - myself a variable called name set it
159:01 - equal to the return value of the input
159:03 - function and I'll say something like
159:04 - what's your name question mark and then
159:07 - after that I'm just going to use a
159:08 - traditional if L if else construct to
159:11 - decide what house this person is in so
159:14 - let me say if name equals equals say
159:16 - Harry as in Harry Potter well let's go
159:19 - ahead and print out Harry's house which
159:20 - is Gryffindor in the World of Harry
159:23 - Potter L if the name is instead Hermione
159:26 - then go ahead and print out also quote
159:29 - unquote Gryffindor as she's in the same
159:31 - house too L if name equals equals Ron
159:34 - let's go ahead and similarly print out
159:36 - Gryffindor quote unquote and let's make
159:40 - this a little more interesting now L if
159:41 - name equals quote unquote about Draco
159:44 - Draco Malfoy in the books Let's go ahead
159:47 - and print out quote unquote Slytherin
159:49 - and just in case someone else's name
159:51 - gets inputted for now let's just suppose
159:54 - that we don't recognize them and say by
159:56 - default else print out quote unquote who
159:58 - question mark just to convey that we
160:00 - don't actually have a hard-coded
160:01 - response to that particular name let me
160:04 - go ahead now and run this as python of
160:06 - house.pi enter and I'll go ahead and
160:09 - type in something like Harry and voila
160:11 - we see that Harry is indeed in
160:12 - Gryffindor let's run it one more time
160:14 - python of house.pi let's type in Draco
160:16 - this time Slytherin and now let's type
160:19 - in an unrecognized name let's go ahead
160:21 - and rerun python of house.pi and let's
160:23 - go ahead and type in Padma enter and who
160:26 - because we haven't actually hard-coded
160:28 - with an L if condition in this case uh
160:30 - what house Padma is meant to be in all
160:32 - right well it turns out there's other
160:34 - ways to implement this indeed there's
160:36 - some redundancy here in that we're check
160:37 - checking if Harry or Hermione or Ron are
160:40 - all in Gryffindor I feel like we can at
160:42 - least tighten this code up a little bit
160:44 - using techniques we've seen already so
160:46 - let me go ahead and do this let me go up
160:48 - here and instead do something like this
160:49 - let's get rid of these two blocks of L
160:52 - ifs leaving just Harry's for a moment
160:54 - and let's use that or keyword again and
160:56 - say or name equals equals quote unquote
160:59 - Hermione or name equals quote unquote
161:02 - Ron thereby consolidating all three
161:05 - cases if you will into just one if
161:07 - statement then we still have a separate
161:09 - L if for Draco because he's not in fact
161:11 - in Gryffindor and then the final else to
161:13 - catch anyone else all right let me go
161:15 - ahead now and run this version of the
161:17 - program python of house.pi I'll type in
161:19 - Hermione this time she too is still in
161:22 - Gryffindor let me try it with Ron and
161:24 - that too still seems to be correct well
161:26 - it turns out there's another approach
161:28 - altogether that can perhaps make your
161:29 - code a little less verbose you could
161:32 - imagine how complicated this code might
161:34 - get if we had not just Harry and
161:35 - Hermione and Ron but a whole bunch of
161:37 - other names as well for Gryffindor for
161:39 - Slytherin and for all of the other
161:41 - Hogwarts houses so you can imagine that
161:43 - code just getting pretty unwieldy pretty
161:45 - fast well it turns out another technique
161:47 - you can use is indeed this keyword
161:48 - called match which is very similar in
161:50 - spirit but the syntax is different and
161:52 - allows you to express the same ideas a
161:54 - little more compactly so let me go back
161:56 - to house.pi and let me propose that I
161:58 - get rid of my current if L if else
162:00 - approach and instead do this literally
162:03 - use the keyword match and type the name
162:05 - of the variable or value that we want to
162:07 - match on and then I'm going to go ahead
162:09 - and include a colon and then underneath
162:11 - that I'm going to include literally a
162:14 - keyword called case and the first case I
162:16 - want to consider is going to be Harry
162:17 - and I'm going to put Harry in quotes
162:19 - because it's a string or a stir and I'm
162:21 - going to have another colon at the end
162:23 - of this line and indent it under that
162:25 - one I'm going to go ahead and for now
162:26 - print out Gryffindor which of course is
162:28 - Harry's house otherwise I'm going to
162:30 - have another case for quote unquote
162:32 - Hermione and similarly I'm going to have
162:34 - under that indented print quote unquote
162:37 - Gryffindor or close quote now I'm going
162:39 - to have another case for Ron also in
162:42 - quotes with a colon now print quote
162:44 - unquote Gryffindor and now I'm going to
162:46 - have a other case for let's say Draco
162:49 - this one gets a little more interesting
162:50 - because Draco of course now is in
162:52 - Slytherin and then I'm gonna go ahead
162:54 - and leave it as that for now so let me
162:57 - go ahead and save this file and go back
162:58 - down to my terminal window running
163:00 - python of house.pi enter and let's go
163:03 - ahead and try Harry and he seems still
163:05 - to be in Gryffindor let's run it again
163:06 - for Hermione enter Gryffindor let's skip
163:09 - ahead to Draco and type in draco's name
163:12 - he's indeed in Slytherin now let's try
163:14 - another name that we haven't handled a
163:16 - case for like Padma again enter and
163:19 - we're just ignored there's no output
163:21 - whatsoever because there wasn't a case
163:22 - for Padma now we could of course go back
163:24 - in and explicitly add one for Padma but
163:27 - what if we similarly to the else
163:29 - construct just want kind of a catch-all
163:31 - that handles anyone whose name is not
163:33 - explicitly specified Well turns out the
163:35 - Syntax for that using this new match
163:37 - statement is to still have another case
163:39 - but then to use this single underscore
163:42 - character which is used in other
163:43 - contexts in Python but for here it's
163:45 - meant to say whatever case has not yet
163:47 - been handled go ahead and print out as
163:49 - we did before for instance quote unquote
163:51 - who with a question mark at the end now
163:54 - let's go ahead and rerun this python of
163:57 - house.pi I'll type padma's name again
163:59 - and this time I think we're at least
164:01 - going to get an explicit response
164:02 - indicating who whereas previously we did
164:05 - not have the equivalent of that now I
164:07 - think we've regressed a little bit we
164:09 - went from tightening things up by
164:11 - putting Harry and Hermione and Ron all
164:12 - on the same line in the same if
164:14 - statement but here we have now three
164:16 - case statements again for all three of
164:18 - those well we can tighten these this
164:20 - code up as well but the syntax is going
164:22 - to be a little bit different I'm going
164:24 - to go ahead and delete these two middle
164:25 - cases for Hermione and Ron and then up
164:28 - here next to Harry's name before the
164:30 - colon I'm going to go ahead and use a
164:32 - single vertical bar and then a
164:33 - quote-unquote Hermione then another
164:36 - single bar and do quote on unquote Ron
164:38 - and this is how using this relatively
164:40 - new match statement you can say the
164:42 - equivalent of Harry or Hermione or Ron
164:45 - but more concisely than you could using
164:48 - an if statement alone as we implemented
164:50 - it previously so now one final run of
164:53 - the program with python of house.pi
164:55 - let's make sure that Harry is still in
164:57 - Gryffindor let's make sure that Hermione
164:59 - is still in Gryffindor let's make sure
165:01 - that Ron is still in Gryffindor and
165:02 - indeed all three of them are now as
165:05 - always with python and programming more
165:07 - generally there's going to be different
165:08 - ways you can solve these problems this
165:10 - is just another tool in your toolkit
165:11 - arguably it has tightened things up
165:13 - arguably it's perhaps a little more
165:15 - readable because there's a little less
165:17 - syntax going on a little less
165:19 - duplication of equal signs and elephant
165:21 - elephant eleph all over the place but
165:23 - ultimately this would be an equally
165:24 - correct approach to that same problem
165:27 - but it turns out with the match
165:28 - statement you can do even more powerful
165:30 - forms of matching as well here we've
165:32 - used it simply to implement the same
165:34 - idea as that if L if else construct and
165:37 - it's worth noting if you've programmed
165:39 - in some other language the syntax here
165:41 - is indeed correct you do not need for
165:42 - instance a break statement as has been
165:44 - peppered throughout and you don't need
165:46 - something like default or something
165:48 - explicit you indeed just use this
165:49 - underscore as your catch-all at the end
165:51 - of the match
165:53 - so just by adding in some of these new
165:56 - keywords here like if and L if and else
165:59 - we have now the ability to ask questions
166:01 - about values we have the ability to
166:04 - analyze input from users and ultimately
166:06 - make decisions about it and these then
166:08 - were our conditionals lying ahead is
166:11 - going to be the ability for us to not
166:13 - only use functions and variables and
166:14 - also these conditionals but also next
166:16 - Loops the ability to do something now
166:19 - again and again
166:27 - [Music]
166:40 - thank you
166:47 - all right this is cs50's Introduction to
166:50 - programming with python my name is David
166:52 - Malin and this week we focus on Loops
166:54 - disability in python and a lot of other
166:56 - programming languages to do something
166:58 - again and again a cycle of sorts and
167:02 - let's see if we can't begin by
167:03 - motivating exactly why we have this
167:04 - ability to do things cyclically using
167:07 - these loops I'm going to go ahead here
167:09 - and open up vs code and in my terminal
167:12 - window let's go ahead and create uh via
167:15 - code cat.pi a Python program that meows
167:19 - like a cat and I'm going to go ahead
167:21 - here in this code tab very simply
167:23 - perhaps I'm going to start by
167:25 - implementing this cat just by using
167:26 - print we're going to have this cat not
167:28 - make audible sounds but just print meow
167:30 - meow meow on the screen three times well
167:32 - I think the simplest way I can do this
167:33 - is just to print meow once and to print
167:36 - meow again and to print meow One Last
167:40 - Time on the screen and now let me go
167:42 - down to my terminal window let me run
167:44 - python of cat.pi enter and meow meow
167:48 - meow all right so this program works
167:50 - this program indeed works if my goal is
167:52 - to get the cat to meow three times and
167:54 - let me propose just to help us wrap our
167:56 - minds around what's going on inside of
167:58 - the computer let me propose that we
168:00 - consider this flowchart so as before we
168:03 - have this flowchart that starts with a
168:04 - this oval which just means start reading
168:07 - here and then notice it goes via arrows
168:09 - to a meow meow meow and then it stops
168:13 - it's perfectly correct and honestly it's
168:15 - wonderfully simple but I dare say we can
168:18 - find fault with my code nonetheless
168:21 - why is my code arguably poorly designed
168:26 - now the answer is going to be Loops in
168:28 - some way but let's see if we can
168:29 - identify in what way the code is
168:32 - actually poorly designed in some sense
168:36 - let's see any thoughts Alex
168:38 - okay so I mean repeating the same action
168:42 - like three times so even more
168:44 - um it's not a good habit yeah I'm just
168:47 - repeating myself and honestly it's not
168:49 - that big a deal if we go back to my code
168:51 - here am I really doing such a bad thing
168:55 - by just printing meow meow meow three
168:57 - times not really but let's consider The
168:59 - Logical extension of this suppose I
169:00 - wanted me out four times or five times
169:04 - or 50 times or 500 times do you really
169:07 - think even if you've never programmed
169:08 - before is the solution to this problem
169:10 - really going to be to hit copy paste 50
169:12 - times like probably not we can probably
169:15 - do better than that and Beyond it just
169:16 - being ugly at that point having so many
169:19 - lines of identical code just imagine if
169:21 - you wanted to change the code maybe I
169:23 - changed my mind and I don't want to make
169:24 - a cat I want to make a dog so now it has
169:26 - to say woof woof woof multiple times now
169:28 - I have to change that in like 50
169:29 - different places and yes sure I could do
169:32 - find and replace but come on like we're
169:34 - programmers now there's got to be a
169:36 - better way than just repeating ourselves
169:38 - so I bet that we can do better than that
169:40 - if we think about a little harder what
169:43 - we how we go about structuring this
169:45 - program and we can do that if we augment
169:47 - our vocabulary just a little bit it
169:50 - turns out in Python and in other
169:51 - languages too there's a keyword called
169:53 - while and while is one way that we can
169:57 - express what's called a loop a block of
169:58 - code that's going to do something again
170:00 - and again and again zero times one time
170:03 - two times fifty times as many times as
170:05 - we want
170:06 - but while rather leaves to us the the
170:10 - particulars of how we express ourselves
170:13 - to do something again and again so let
170:15 - me go back over to vs code here and let
170:18 - me propose that I do this while is a
170:20 - construct that allows me to ask a
170:23 - question again and again and anytime
170:25 - we've seen a question it's been in the
170:27 - form of a Boolean expression a question
170:29 - to which the answer is true or false
170:31 - well how could I do this how could I
170:33 - print out meow three times and ask three
170:37 - times a question to which the answer is
170:39 - true or false well what if I did some
170:42 - counting right like literally on my
170:44 - fingers and if I'm trying to count maybe
170:46 - down from three I want to meow three
170:48 - times I can put three fingers up and I
170:50 - can meow and then I can put like one of
170:52 - the fingers down and then meow and I can
170:55 - put one of the fingers down and I can
170:56 - meow put one of the fingers down and
170:58 - maybe the question I can ask every time
171:00 - I meow is do I have any fingers up still
171:03 - do I have any fingers up still do I have
171:06 - any fingers up still don't the answer is
171:07 - true keep going if the answer is false
171:10 - stop
171:11 - so how can I translate that to code well
171:14 - once we've added this wild keyword I
171:16 - think we have all the building blocks
171:17 - already let me propose that I do this
171:20 - let me propose that I give myself a
171:22 - variable and I'll call it I for integer
171:24 - but I could call it anything I want and
171:26 - I'm going to initialize it to 3. then
171:28 - I'm going to use this new feature of
171:29 - python while and I'm going to ask a
171:32 - question the answer to which must be
171:34 - true or false and I'm going to say while
171:37 - I does not equal zero so I'm going to
171:41 - ask the question while I does not equal
171:44 - 0 do the following notice the colon at
171:47 - the end of the line notice my
171:48 - indentation and just like with functions
171:50 - just like with conditionals you indent
171:52 - the lines that you only want to execute
171:55 - as part of this other thing what do I
171:58 - want to do while I does not equal zero
172:01 - well I think I just want to meow but
172:04 - it's not enough just to write this code
172:07 - if I were to very dangerously run python
172:12 - of cat.pi and hit enter right now
172:15 - what might happen on the screen
172:18 - whether you've programmed before or not
172:21 - why is this a very bad thing potentially
172:24 - it's not going to break things but it
172:26 - might it might lose control of my
172:28 - computer somehow
172:30 - any thoughts uh yeah Teemo hi uh I think
172:34 - it's going to continue uh to print out
172:38 - mail since I is always equal to 3 and
172:42 - the wow is always true yeah exactly if
172:45 - I'm initializing I to three that is
172:47 - setting it equal to three on line one
172:49 - then I'm asking the question while I
172:51 - does not equal zero and that's going to
172:53 - be true it does not equal zero it
172:55 - obviously equals three print meow and
172:57 - the way a while loop works is that the
173:00 - python interpreter just keeps going back
173:03 - and forth it goes from line one to line
173:06 - two then to line three and then it goes
173:09 - back to line two to ask the question
173:11 - again if the answer is still true it
173:13 - goes to line three it then goes back to
173:15 - line two if the answer is still true it
173:16 - goes back to line three and to timu's
173:19 - point if you're never actually changing
173:21 - the value of I it's always three you're
173:25 - just going to be looping literally
173:27 - forever and this is an accidental
173:29 - infinite Loop so we've got to be smarter
173:31 - than that I'm not going to hit enter
173:32 - because I don't want to lose control
173:33 - over my computer here such that it's
173:35 - printing out meow forever fortunately if
173:38 - you ever do do that and you find
173:39 - yourself in an accidental infinite Loop
173:41 - control C for cancel or interrupt is
173:45 - going to be your friend if you ever seem
173:47 - to lose control you don't need to like
173:48 - reboot or turn off the computer you can
173:51 - just hit Ctrl C in your terminal window
173:53 - and that will likely fix it all right
173:56 - well what do I want to do then after
173:57 - meowing each time I think what I'd like
174:00 - to do here is maybe something like this
174:02 - let me update I to equal whatever the
174:06 - current value is
174:08 - minus one here whoops sorry minus one so
174:12 - if I on each iteration am updating I to
174:16 - be one less one less one less it should
174:19 - eventually hit zero at which point the
174:21 - answer to 9 2's question will now be
174:24 - false so let's see if this works I'm
174:27 - going to go down to my terminal window
174:28 - and run python of cat.pi and I indeed
174:31 - get three meows why why because I've
174:34 - kind of wired this up kind of like a
174:36 - machine in software if you will I've set
174:37 - I equal to three then I keep asking this
174:40 - question but I keep turning the gears I
174:43 - keep changing the value of the variable
174:45 - to make sure that ultimately it is
174:47 - actually being decremented that is
174:50 - decreased by one until we eventually hit
174:53 - zero now for those of you who think a
174:55 - little more graphically let me pull up
174:56 - one of our usual flow charts this is
174:58 - just a representation graphically of the
175:00 - exact same thing notice what's happening
175:02 - I first start the program and then I
175:05 - initialize I to three and then I ask the
175:08 - first of my questions again the diamonds
175:10 - always represent questions and the
175:12 - answer is going to be true or false does
175:14 - I not equal zero well it doesn't equals
175:17 - three so if I follow the true line I
175:19 - meow and then I follow this arrow and I
175:22 - update I to equal I minus 1 at this
175:25 - point in the story I presumably equals
175:27 - two mathematically I Follow the arrow
175:29 - and there's the loop this is why it's
175:31 - nice to see this graphically perhaps
175:32 - because you can literally see the loop
175:34 - back and forth now I ask the question
175:36 - again does two not equal zero well it
175:40 - does not equal zero it's two so we meow
175:42 - again we change I from two to one well
175:45 - does one not equal zero well obviously
175:47 - if one is not zero so we meow again we
175:51 - decrement I again I is now zero does
175:54 - zero not equal zero no it equals zero so
175:58 - the answer is false and we stop
176:01 - so there perhaps more so than any of our
176:03 - flow charts before do you really see the
176:06 - structure of what's Happening inside of
176:08 - the program and you don't have to get
176:09 - into the habit of making these charts or
176:11 - creating these charts but just as a
176:13 - first pass at what's going on inside of
176:14 - the computer that's indeed one way to
176:17 - visualize it instead well let me propose
176:19 - that like always there's many different
176:20 - ways to solve this problem and suppose
176:22 - you just like to think a little
176:23 - differently maybe you don't like
176:25 - starting at three and then counting down
176:27 - to zero y maybe your just brain doesn't
176:29 - work that way and you prefer to count up
176:31 - instead of down totally fine let me go
176:34 - ahead and change my code here to set I
176:36 - equal to one instead of three and here
176:39 - let me just change my logic rather than
176:41 - checking for not equal to zero like
176:43 - maybe you don't like thinking in terms
176:44 - of not because it's a little confusing
176:46 - and it might be let's just check that I
176:49 - is less than or equal to three so we'll
176:52 - be a little more explicit we'll count
176:54 - from one up through three each time
176:57 - printing meow but I'm going to need to
176:58 - change this line here let me see if we
177:01 - can't call on someone to change line
177:02 - four for me how do I want to change line
177:04 - four
177:06 - to be consistent
177:08 - with counting from one up to and through
177:13 - three
177:15 - I would be plus one every time you meow
177:20 - yeah exactly in this case we want to add
177:23 - one not subtract one and in fact if you
177:26 - think about this this two could end very
177:28 - poorly right if you start counting at
177:29 - one and you keep subtracting one
177:31 - subtracting one subtracting one I think
177:34 - we're going to find ourselves with the
177:35 - same problem which is that we're never
177:37 - going to stop because we're going to
177:39 - keep getting more and more negative as
177:41 - opposed to ever getting up to the number
177:42 - three so I think you're right I need to
177:45 - change this to be I equals I plus one
177:47 - and now notice just for clarity two the
177:50 - equal sign is again our assignment
177:52 - operator from right to left logically
177:54 - this might otherwise strike you as
177:56 - strange like how can I equal itself plus
177:58 - one well it doesn't until you execute
178:01 - this code from right to left you add one
178:04 - to I or You Subtract one from I and then
178:06 - you update the value of I on the left
178:08 - the assignment copies the value from the
178:10 - right to the left well how else might I
178:12 - do this well I will say that most
178:15 - programmers computer scientists more
178:17 - generally tend to start counting from
178:19 - zero it's a convention and it actually
178:21 - has upsides even in Python and other
178:24 - languages where generally speaking it's
178:25 - a good thing to start counting from zero
178:27 - instead of counting like we might in the
178:29 - real world from one let's go ahead and
178:31 - adopt that convention now let me set I
178:34 - equal to zero and I need to make a
178:36 - change now notice if I don't change my
178:39 - logic this program just became buggy the
178:43 - cat has a bug it's now meowing four
178:45 - times if I run it as is but the easiest
178:48 - fix here would be to change my
178:50 - inequality to be this less than instead
178:53 - of less than or equal to now I'm
178:55 - starting at zero but I'm going up two
178:57 - but not through three and even though
179:00 - this might of all the things we've seen
179:02 - thus far see maybe the least familiar
179:04 - most of us might start at one two then
179:07 - three it's a good habit to get into now
179:09 - start at zero and go up two but not
179:12 - through the value that you care about
179:14 - ultimate at least three in this case
179:16 - here well let me tighten things up a bit
179:18 - here not only will this now fix my
179:20 - counting problem it now meows three
179:22 - times as expected there's a more
179:24 - succinct way to express I equals I plus
179:26 - one and this is because it's such a
179:28 - popular thing to do in code you can
179:30 - instead just say I plus equals one and
179:34 - that's it you don't need to put
179:36 - everything on the right hand side this
179:37 - is a special syntax that says the exact
179:40 - same thing increment I but it does it
179:43 - with a few fewer keystrokes it's just a
179:45 - little more pleasant to type it's a
179:46 - little faster to read it's just a
179:48 - convention those of you who have
179:50 - programmed in C C plus plus python not
179:53 - python C C plus plus Java JavaScript
179:56 - might have seen plus plus before or
179:59 - minus minus
180:00 - sorry python doesn't have it so you
180:02 - cannot use that this is a succinct as
180:04 - your line of code might get
180:07 - all right let me pause here to see then
180:09 - if there's any questions about these
180:12 - implementations of while loops
180:16 - um can we use stuff like for Loops which
180:19 - um have a certain I value initialized to
180:24 - it at the start and it runs from the
180:28 - particular condition you put into the
180:31 - um into the thing and increment it as as
180:34 - you go along short answer no you cannot
180:37 - do what you're describing but there is
180:39 - another type of for Loop that we will
180:41 - soon see but let's compare to that in
180:43 - just a moment other questions
180:45 - on Loops using while here
180:49 - so I had a question about the flow
180:51 - charts okay uh there were certainly yeah
180:53 - there were certain symbols for the
180:56 - certain kind of the statements uh sir
180:59 - the artists certainly used for that kind
181:02 - of statement that they are protected
181:05 - they are so I deliberate use anyone I
181:08 - deliberately use certain types of
181:09 - symbols certain shapes here uh whereby
181:12 - an oval is conventional for start and
181:14 - stop I used rectangles for any statement
181:17 - of code like an assignment or a printing
181:20 - and so forth and I use diamonds to
181:22 - represent uh questions that you might
181:24 - ask conditions as we've seen
181:27 - um if you're doing this for yourself if
181:29 - you're just trying to make sense of your
181:30 - code and writing it down you certainly
181:31 - don't need to use these formal symbols
181:33 - but I tried to be consistent with some
181:35 - best practices and in fact let me come
181:37 - back to the same picture because this
181:39 - was the first version of our picture but
181:41 - we've since modified our code a couple
181:42 - of times this recall was the version
181:44 - where the question we were asking was I
181:46 - not equal to zero let me go ahead and
181:48 - just change this code now to represent
181:50 - the next version we did which recall
181:52 - changed our logic to start counting from
181:54 - one it changed our question to check is
181:57 - I less than or equal to three but then
181:59 - everything else was the same except for
182:01 - the counting which is now Plus instead
182:04 - of minus and then we refined it little
182:06 - bit further by counting now from zero up
182:09 - two but not through three and we
182:12 - tightened up this code here by just
182:14 - incrementing one by using the slightly
182:16 - more succinct syntax so at this point
182:18 - these flow charts might become less and
182:19 - less useful for us because once you've
182:21 - wrapped your mind around the concept and
182:24 - hopefully the picture helps bring that
182:25 - concept to life it's certainly fine to
182:28 - focus entirely on the code and only
182:30 - think about or even draw something like
182:32 - this if you need to wrap your mind
182:33 - around something more complicated than
182:35 - you're used to well let me go ahead if I
182:37 - may and propose that we transition to
182:40 - another approach of types of Loops using
182:43 - another keyword here namely a for Loop
182:46 - and this is a word that does exist in
182:47 - other languages but doesn't necessarily
182:49 - have as many features as other languages
182:51 - might use it for but there is a
182:53 - different type of loop not a while loop
182:55 - but a for Loop and a for Loop is going
182:57 - to explore allow us to express ourselves
182:59 - a little differently but to do so I'd
183:02 - propose that the easiest way is if we
183:03 - introduce one other idea in Python we
183:05 - which is that of a list and here too no
183:08 - pun intended we're adding to the list of
183:10 - data types that python supports we've
183:13 - seen stirs or strings ins or integers
183:16 - Floats or floating Point values bulls or
183:19 - Boolean Expressions python also has
183:21 - lists which is another type of data but
183:24 - wonderfully this one's probably pretty
183:25 - familiar a list of things in the real
183:27 - world is a list of things in Python it's
183:29 - a way of containing multiple values all
183:33 - in the same place all in the same
183:35 - variable so what do I mean by this well
183:37 - let me propose that we go back to our vs
183:41 - code here and let me kind of start fresh
183:43 - with my code here and not use a while
183:44 - loop at all but let me use this new
183:46 - keyword for the way the for Loop works
183:49 - is that it allows you to iterate over a
183:52 - list of items so what does this look
183:54 - like it might look like this 4 I in the
183:59 - following list of items 0 1 2. this is
184:02 - my starting point and on each iteration
184:04 - of this Loop that is on each execution
184:07 - of this loop again and again I want to
184:09 - print out meow
184:10 - now I'll admit I kind of like the look
184:13 - of this code already even though there's
184:15 - some new syntax here because it's just
184:17 - shorter than the while loop right the
184:19 - while loop had multiple lines a moment
184:21 - ago and it was entirely up to me to
184:23 - decide what i is I have to check a
184:25 - condition I have to increment or
184:26 - decrement I like I was doing a lot of
184:28 - work relatively speaking to make that
184:31 - thing turn to make that Loop go and go
184:33 - it was very mechanical in a sense you
184:36 - could kind of in your mind's eye maybe
184:38 - see the gears turning as all of these
184:40 - variables are changing and these
184:42 - questions are being asked a for Loop
184:45 - kind of simplifies all of that and it
184:47 - just says if you want a variable like I
184:49 - a number and you know in advance how
184:52 - many times you want this Loop to execute
184:54 - three times we'll just kind of specify
184:57 - what it is you want I to take on as
184:59 - values explicitly in this loop I will be
185:02 - automatically initialized by python to
185:04 - be zero then meow will be printed then
185:07 - python would automatically update I to
185:09 - equal one then meow will be printed then
185:12 - python will automatically update I to B2
185:15 - and meow will be printed and because
185:17 - that's it for the values in that list
185:19 - python will stop and it will only map
185:21 - now a total of three times what is the
185:24 - list the list in this program is exactly
185:26 - that zero comma one comma two and notice
185:28 - the square brackets those aren't
185:31 - parentheses those are square brackets
185:33 - that represent a list that's how you
185:35 - know visually as the programmer that's
185:37 - how python knows as the language that
185:39 - you intend for that to be a list
185:41 - so let me go ahead and run this python
185:44 - of cat dot pi and it works just the same
185:46 - but it's only two lines it's pretty
185:48 - readable once you have familiarity with
185:50 - that construct but
185:53 - to my constant point about correctness
185:56 - not necessarily being the same as design
185:59 - in what sense is this program perhaps
186:02 - poorly designed it seems to work it
186:04 - meows three times
186:07 - but why might this not be the best way
186:10 - to solve this problem even if you've
186:12 - never programmed before again think
186:14 - about Corner cases things that may or
186:16 - may not happen think about extreme cases
186:19 - that really test the quality of this
186:21 - code okay I think that because like
186:24 - again we are saying 0 1 2
186:28 - please subscribed and then like if you
186:31 - want to print a million you say one two
186:34 - three
186:35 - yeah exactly and that's what I mean
186:37 - about thinking about the extreme cases
186:38 - if you're trying to decide for yourself
186:39 - if your own code is good or someone
186:42 - else's code is good it might look so at
186:44 - first glance but think about the extreme
186:46 - well what if it's not three things it's
186:48 - a million things I mean are you really
186:50 - gonna write out one zero through a
186:53 - million or zero through nine uh you know
186:56 - 999 thousand uh 999 999 like no you're
187:02 - not gonna write that many numbers on the
187:04 - screen there's got to be a better way so
187:06 - let's do the better way from the get-go
187:08 - rather than set the stage for doing
187:10 - something poorly and the one way we can
187:12 - solve this problem to improve the design
187:15 - is don't just manually specify the list
187:18 - of values use a function someone else's
187:21 - function that comes with python that
187:22 - gives you the list you want and the
187:24 - easiest way to do that in Python is to
187:26 - use a function called range that returns
187:28 - to a range of values it expects his
187:31 - input at least one argument and that
187:33 - number is going to be the number of
187:35 - values you want back those values are
187:38 - going to start at zero and go to one to
187:40 - two and so forth but they will go up two
187:43 - but not through the number you specify
187:45 - so by specifying range three you're
187:48 - essentially being handed back one two
187:51 - three values and by default those values
187:54 - are 0 1 and 2 and that's it but what's
187:57 - brilliant about this is that now to
187:59 - Hope's point if I do want to meow a
188:01 - million times I mean that is an angry
188:03 - cat I can now do a million by just
188:06 - typing a million I don't have to
188:08 - literally type zero comma one comma two
188:11 - comma three comma four all the way up to
188:13 - 999 999 I just do this so that's got to
188:17 - be a better way long term so that's
188:20 - indeed one Improvement we can indeed
188:22 - make here still using a for Loop but now
188:24 - using this range function and just to
188:26 - show you something else that's pythonic
188:28 - this is not strictly necessary but it's
188:30 - commonly done there's a minor
188:32 - Improvement we can make here even if
188:35 - we're just meowing three times and
188:37 - notice that even though I'm defining a
188:39 - variable I
188:41 - I'm not ever using it and it's kind of
188:45 - necessary logically because python
188:47 - presumably has to use something for
188:49 - counting right it has to know what it's
188:51 - iterating over but there's this
188:52 - convention in Python where if you need a
188:55 - variable just because the programming
188:57 - feature requires it to do some kind of
188:59 - counting or automatic updating but you
189:01 - the human don't care about its value a
189:04 - pythonic Improvement here would be to
189:06 - name that variable a single underscore
189:08 - just because it's not required it
189:11 - doesn't change the correctness of the
189:12 - program but it signals to yourself later
189:15 - it signals to colleagues or teachers
189:17 - that are looking at your code too that
189:19 - yes it's a variable but you don't care
189:21 - about its name because you're not using
189:22 - it later it's just necessary in order to
189:25 - use this feature this Loop in this case
189:27 - here so just a minor Improvement or
189:31 - change there
189:32 - but to really get you intrigued by
189:35 - what's possible in Python let's take
189:37 - this one step further so if we really
189:39 - want to be pythonic this one if you've
189:42 - programmed before is kind of going to
189:44 - blow your mind so to speak whereby if I
189:46 - want the cat to meow three times what if
189:49 - I actually do this
189:51 - print open parenthesis quote unquote
189:54 - meow times three
189:57 - all right you have to be kind of a geek
189:58 - to think this is cool but this is kind
190:00 - of cool so you can literally just print
190:03 - what you want multiply it by the number
190:05 - of times that you wanted and you will
190:08 - get back exactly that result now I've
190:11 - kind of made a mistake here so let's see
190:14 - what this does it's not quite as
190:16 - beautiful as this code might look to to
190:18 - you to some of you to me let me run
190:21 - python of cat.pi enter okay it's a
190:24 - really like Hungry Cat or something it's
190:26 - meowing really fast but I can fix this I
190:28 - bet
190:29 - let's think about now some of the basic
190:31 - building blocks we've discussed the
190:33 - problem is clearly that literally meow
190:35 - meow meow is being repeated three times
190:38 - but it's not as pretty as I want it I
190:39 - want it to be meow meow meow on separate
190:42 - lines what might be a possible solution
190:44 - here while still using this
190:47 - multiplication operator and think back
190:50 - we've used plus to concatenate strings
190:53 - you can apparently use multiplication to
190:55 - concatenate strings but more than once
190:57 - again and again and again how could I
190:59 - clean this up without reverting to my
191:01 - for Loop or my while loop and still use
191:03 - multiplication in this way we can use an
191:06 - escape sequence we should do backslash
191:08 - and amazing yes think back to backslash
191:11 - n which is the way you as the programmer
191:13 - can express a new line in code and I
191:16 - think if I take your advice I put a
191:19 - backslash in there inside of my quotes
191:21 - So that at the end of every meow there's
191:24 - a new line let's see how this looks Let
191:26 - Me Clear My screen and run python of
191:28 - cat.pi okay so close I like this let me
191:32 - call on someone else the only thing I
191:34 - don't like and I know I'm being really
191:36 - nitpicky now is that it's meow meow meow
191:38 - on separate lines but there's kind of
191:40 - this extra blank line which I'm just not
191:41 - loving aesthetically I think we can uh
191:45 - make Endeavor
191:50 - yeah so here too like all of these
191:53 - things we've seen in past weeks are kind
191:54 - of coming together right recall that the
191:56 - print function lets you control what the
191:59 - line ending is by default it's backslash
192:02 - and itself which is why at the very end
192:04 - of this print the cursor is being moved
192:06 - again to the next line well we need to
192:08 - just override that so let me go into my
192:10 - code here and let me change this to
192:12 - comma end equals quote unquote so that
192:15 - it's no longer the default backslash n
192:18 - it's instead now going to be uh nothing
192:21 - whatsoever that should eliminate then
192:23 - hopefully that additional uh blank line
192:27 - so let me run this one last time here
192:28 - python of cat.i I enter and there we
192:31 - have it so now you know at least as
192:34 - programming goes it's kind of cool that
192:36 - I can distill this into a short line and
192:39 - express myself all at once now to be
192:40 - fair it's a little less readable like
192:43 - now I've got backslash n I've got times
192:44 - three I've got and equals quote unquote
192:46 - so you don't have to do things this way
192:48 - my previous approach with a for Loop
192:50 - totally fine my previous approach with a
192:52 - while loop totally fine and in some
192:54 - sense perfectly well designed but this
192:58 - is just yet another way to do it but
193:00 - it's not a good thing if you or your
193:02 - teacher your colleague your friend are
193:03 - going to struggle to read your own code
193:05 - but this is a feature of python that
193:07 - some languages do not in fact have
193:11 - all right well let me propose that
193:12 - things get more interesting still if
193:14 - we're not just smelling three times only
193:16 - but we're meowing some variable number
193:18 - of times let's ask the user how many
193:20 - times this cat should meow so let me
193:22 - clear the screen here and let me figure
193:25 - out well how do I get a number from the
193:28 - user the catch here is that if I want
193:30 - the user to give me a number I'm not
193:32 - doing math per se I'm meowing and
193:34 - therefore the user has to give me a
193:36 - positive value the user has to give me a
193:39 - positive value so how can I insist on
193:41 - this well if I just do this n equals int
193:44 - of input what's n question mark
193:48 - well I want to check like I could say if
193:52 - n is less than zero like if it's
193:55 - negative well I could do this well then
193:58 - ask again int input what's and question
194:02 - mark okay well what if the user still
194:05 - doesn't give me a positive number what
194:07 - if they're being really difficult
194:08 - they're not paying attention and they
194:09 - typed in two negative numbers well if n
194:12 - is less than zero well let's do it again
194:15 - n equals right this does not end well
194:17 - you can't infinitely many times keep
194:20 - checking is it negative is it negative
194:21 - is it negative right the program would
194:23 - never be done written so we can do this
194:26 - I think better maybe with a loop so let
194:28 - me propose this a very common Paradigm
194:30 - in Python when you want to get user
194:33 - input that matches a certain expectation
194:36 - you have that it's all positive that
194:38 - it's all negative or just something like
194:40 - that you just immediately say while true
194:43 - you deliberately and a little
194:45 - dangerously but a very conventionally
194:47 - induce an infinite it Loop now what is
194:49 - an infinite loop it's just one that goes
194:51 - forever and we've seen how that can
194:52 - happen accidentally mathematically it's
194:55 - absolutely going to happen when you say
194:57 - while true why well the answer to the
195:00 - true question is always true so this is
195:03 - a way of deliberately inducing a loop
195:04 - that by default is going to go forever
195:06 - so we're going to need a way of breaking
195:09 - out of this Loop when we have the number
195:10 - we want the convention though inside of
195:13 - this otherwise an infinite Loop is to
195:15 - ask the question you care about like
195:16 - give me an INT by prompting the user for
195:18 - input like what's n question mark and
195:21 - then just ask your question so if n is
195:24 - less than zero then I think we want
195:26 - python to just continue to prompt the
195:28 - user again that is we want the code to
195:30 - stay in the loop recall the input
195:32 - function and hope that the user gives us
195:34 - a better answer if this time around it's
195:36 - less than zero so let's just literally
195:38 - use Python's keyword continue which says
195:40 - just that continue to stay within this
195:42 - Loop else if it's not less than zero
195:45 - let's go ahead and just break out of the
195:47 - loop altogether using another keyword in
195:49 - Python break break will break you out of
195:51 - the most recently begun Loop in this
195:54 - case if it's not the case that n is less
195:56 - than zero so this will work and it will
195:59 - allow us to get a value that's zero or
196:01 - greater from the user but I think we can
196:02 - tighten it up further so as to not
196:04 - bother having an if and an else why
196:07 - don't we instead just say if n is
196:10 - greater than zero go ahead and break in
196:12 - fact it's not that interesting a program
196:14 - if we even allow the user to type in
196:15 - zero so let's wait until they give us an
196:17 - integer that is greater than zero and
196:20 - then break out of this Loop and what can
196:23 - I now do down here for I in range of
196:26 - whatever that value n is print meow and
196:30 - honestly I don't need I here so let me
196:32 - come back to that principle before and
196:34 - let me just change it to an underscore
196:35 - just to be pythonic if you will so
196:37 - what's going on lines one through four
196:40 - deliberately Implement an infinite Loop
196:43 - that otherwise by default is going to go
196:46 - forever but I'm asking a question inside
196:48 - of that loop after getting an INT from
196:51 - the user on line two I'm then checking
196:53 - is it greater than zero or is it zero is
196:57 - it negative none of which makes sense
196:58 - for a meowing cat like I want the cat to
197:00 - meow at least one time so if it is
197:02 - greater than zero break and this break
197:05 - statement even though it's indented
197:07 - indented twice has the effect of
197:09 - breaking out of the most recently begun
197:12 - while loop so once the user gives you a
197:15 - positive value then we get to line six
197:18 - at which point we meow that many times
197:21 - because of lines six and seven so if I
197:23 - run this now python of cat.pi enter well
197:26 - what's n let's start with 3 where we
197:28 - began meow meow meow well this time let
197:31 - me go ahead and increase the size of my
197:32 - terminal window just temporarily let me
197:34 - run python of cat.pi let me do it 10
197:36 - times meow 10 times now appears on the
197:40 - screen and the takeaways here are not
197:42 - just that we can meow 10 times or do
197:44 - something again and again but this is a
197:46 - very common Paradigm in Python when you
197:48 - want to do something again and again and
197:50 - again but only until the user actually
197:53 - gives you a value that you care about
197:56 - here
197:57 - and let me propose actually now that we
197:59 - practice a little more what we've been
198:01 - preaching especially when it comes to
198:03 - say
198:04 - especially when it comes to say writing
198:07 - your own functions you know now that I'm
198:08 - doing all this mailing it might be nice
198:10 - to actually have a meow function that
198:13 - the inventors of python didn't Envision
198:15 - so let me do this let me actually get
198:16 - rid of all this code and let me go ahead
198:18 - and do this let me go ahead and say
198:20 - Define a main function as I've done
198:22 - before and let me just blindly call meow
198:25 - three meow doesn't exist yet but when it
198:27 - does that'll be great so let me go ahead
198:30 - now and Define meow so my meow function
198:33 - should take as input a parameter called
198:36 - n or anything I want and this part's
198:38 - pretty easy now how do you meow in times
198:40 - well for underscore in the range of n Go
198:44 - ahead and just print meow so same code
198:46 - as before nothing new here I'm just
198:48 - putting that logic inside of a meow
198:51 - function that's going to have this side
198:52 - effect of printing meow and now as
198:54 - before let me go down here and let me
198:56 - make sure I call Main and if I now run
198:58 - this code python of cat.pai meow meow
199:02 - meow it's always going to do three be
199:04 - because I've hard-coded the three well
199:06 - let's make one Improvement here let me
199:08 - go ahead now and maybe do this let me
199:12 - ask the user for a number so let's say
199:14 - something like this number equals get
199:17 - number all right unfortunately there is
199:19 - no function in Python called get number
199:21 - that gets a positive number from the
199:23 - user but I can invent that so Define get
199:25 - number open paren close paren and then
199:28 - inside of this function let me do this
199:30 - while true go ahead and get a number
199:33 - from the user converting it to an INT
199:35 - asking them what's in question mark and
199:38 - then if n is what I want it's a greater
199:41 - than zero value a positive number I
199:44 - don't want to break this time
199:45 - necessarily
199:47 - although I could I instead want to
199:50 - return the value so I can actually do
199:52 - this instead and this too is a feature
199:55 - of python this ability not to just break
199:57 - out of a block of code but also to
200:00 - return a value in code to actually
200:02 - return a value gives you the ability
200:04 - ultimately to return explicitly a value
200:07 - so that your function has not just a
200:10 - side effect necessarily but it actually
200:12 - hands back just like input does just
200:15 - like int does just like float does and
200:17 - actual value to the user now to be clear
200:20 - I don't have to return n here I can
200:22 - still break out of the loop as I've done
200:24 - in the past with code like this but then
200:27 - after the loop I still have to return n
200:29 - and so what's happening here is that if
200:32 - you use break to get out of the loop but
200:34 - you need to hand back a value from a
200:36 - function you still have to use the
200:38 - return keyword now explicitly either in
200:40 - the loop as I did or now outside of the
200:43 - loop but still inside of
200:46 - the function the last thing I'm going to
200:48 - do here now is change that 3 which we
200:50 - hard coded earlier to actually be the
200:52 - value of the variable we've gotten from
200:54 - the user so that now down here if I run
200:56 - python of cat.pi enter what's N I can
200:59 - type in three I get my three meows or if
201:02 - I only want one I now get one meow
201:05 - instead
201:06 - all right so if we now have this ability
201:08 - to do things again and again in these
201:10 - Loops let's see if we can't solve some
201:13 - other problems via which to express
201:15 - ourselves cyclically but get back some
201:17 - interesting answers as well let me
201:19 - propose for instance that we look a
201:22 - little more closely at these lists it
201:23 - turns out that in Python and really in
201:25 - programs in general it's useful to have
201:27 - a list of values because we're going to
201:29 - be able to work with more and more data
201:31 - larger and larger data sets so let me
201:34 - propose that we come back to vs code
201:35 - here and let's do something that's
201:36 - perhaps a little familiar to some folks
201:38 - the world of Hogwarts and let me go
201:40 - ahead and code up a file called Hogwarts
201:42 - and let's see if we can't have a list of
201:45 - students at Hogwarts here so I have a
201:47 - new tab called hogwarts.pi and let me go
201:50 - ahead and propose that I just Define in
201:53 - this program a list of students whose
201:55 - names I know in advance so I'm not going
201:56 - to get user input for now I'm just going
201:58 - to know from the get-go that the three
202:00 - students I want to consider are these a
202:02 - variable is going to be called students
202:04 - it's going to equal as I've stun in the
202:06 - past a square bracket which means hey
202:08 - here comes a list and those values are
202:10 - going to be Hermione in quotes because
202:12 - it's a string Harry in quotes because
202:15 - it's a string and then Ron in quotes
202:17 - because it's a string as well so this is
202:19 - a list of length three it's similar in
202:21 - spirit to my list of length 3 earlier
202:23 - but that had three ins zero one two now
202:26 - I have a list of three strings instead
202:29 - and this isn't very useful at the moment
202:31 - but let me just do something as a check
202:34 - for myself let me print out each of
202:37 - these students well wait a minute how do
202:39 - I
202:39 - print the contents of a list well in the
202:44 - past when we've printed a variable we've
202:46 - just printed out the name of the
202:47 - variable but I don't want to print out
202:49 - all of Hermione and Harry and Ron all at
202:51 - once maybe I want to print out Hermione
202:53 - first then Harry then Ron so I need a
202:57 - way to express more precisely which
202:59 - value do I want from this list and the
203:01 - way you do this in Python is you use
203:04 - square brackets in another way if you
203:06 - have a variable in this case called
203:08 - students and you want to go inside of
203:10 - that variable and get a specific value
203:12 - that is to say you want to index into
203:15 - the list you use square brackets this
203:17 - way using numbers inside of the square
203:20 - brackets and here's where we see that it
203:22 - is useful to think and count in terms of
203:25 - zero on up instead of one on up these
203:28 - lists in python or shall we say zero
203:30 - indexed the first item in a list is at
203:34 - location zero the second item in a
203:36 - python list is at location one and the
203:38 - third is that location 2 too so you're
203:40 - always kind of off by one mentally but
203:42 - you get used to it if you've never
203:43 - programmed before over time so let me
203:46 - print out all three students so let me
203:47 - print out students bracket zero then
203:49 - students bracket one then lastly let me
203:51 - print students bracket two and this is
203:54 - my third and final line and of course if
203:56 - I run this code it probably does what
203:57 - you would guess if I run python of
203:59 - hogwarts.pi there's Hermione Harry and
204:02 - Rob each on their own lines there but
204:05 - there's got to be a better way right
204:06 - especially if I don't know in advance
204:07 - who's going to be in this list if next
204:09 - year there's some new students at
204:10 - Hogwarts we can use a loop to do
204:13 - something automatically without having
204:14 - to manually type out zero and then one
204:17 - and two well here's another feature of
204:19 - python you can use a for Loop not just
204:22 - to count from zero to one to two you can
204:25 - use Python to just iterate over anything
204:26 - not just numbers but strings so I could
204:29 - actually do this
204:31 - 4. student in students colon and then
204:35 - indented underneath that I can say print
204:37 - student now it doesn't matter if I have
204:40 - three students or four or four hundred
204:42 - this two lines of code this Loop will
204:45 - print all of those students for me one
204:47 - at a time so if I now run python of
204:49 - hogwarts.pi there's the same list but I
204:52 - don't need to know in advance how long
204:53 - that actual list is now notice I made a
204:57 - conscious decision here I didn't call
204:59 - this variable underscore because this
205:02 - time I'm using the variable and while I
205:05 - could do this now no no no no your code
205:07 - is getting way too cryptic if you're
205:09 - naming the variable underscore and
205:12 - you're using the variable underscore now
205:13 - you're helping no one now you're
205:15 - confusing the reader yourself down in
205:17 - the down the line you should call your
205:19 - variables what they are so in very
205:21 - appropriate name though I'm sure you
205:22 - could come up with others would be
205:24 - student and here you could say you would
205:26 - say student as well if you'd prefer to
205:28 - be more succinct it's not unreal
205:30 - reasonable to do something succinct in a
205:32 - loop like this for s in students using
205:34 - maybe the same letter that the list
205:36 - itself begins with but again why bother
205:39 - python is meant to be more readable if
205:41 - you have a list of students iterate over
205:42 - them one student at a time let me pause
205:46 - here to see if there's now questions
205:47 - about lists as I've now defined them a
205:49 - list of strings in this case or using a
205:52 - for Loop now to iterate over and print
205:54 - each of those names yeah uh so is it not
205:59 - necessary to initiate student in this
206:01 - case or we can just declare a variable
206:03 - in the loop good question you do not
206:05 - need to manually initialize it python
206:07 - takes care of initializing the student
206:08 - variable to Hermione first then Harry
206:12 - second then Ron third unlike other
206:14 - languages you don't need to initialize
206:15 - it to something yourself it just exists
206:17 - and it will work other questions on
206:19 - loops and lists in this way since you
206:22 - describe break so is there any concept
206:24 - of continue so that we can skip a
206:26 - particular case in Loops yes you can
206:28 - continue using another syntax as well we
206:30 - haven't shown that for now we focused
206:31 - only on break
206:33 - uh okay so uh can this follow work with
206:37 - either hash tables or different kind of
206:39 - fight tables or arrays uh indeed so
206:41 - we're getting ahead of ourselves there
206:42 - but there are yet other types of data in
206:45 - Python and indeed you can use a for Loop
206:48 - to iterate over those as well anything
206:50 - that is iterable so to speak is a piece
206:52 - of data that can be used with a loop
206:54 - like this but more on those more on
206:56 - those soon in fact let me transition
206:59 - here to show just another way of solving
207:01 - the same problem because up until now
207:02 - when we've used Loops we really have
207:04 - relied on numbers and that's fine if you
207:06 - prefer to sort of stay in that space
207:08 - suppose I did want to iterate using
207:11 - numbers like I and 0 1 2 and so forth
207:14 - let me propose that we could change this
207:15 - code as follows if you would prefer to
207:18 - think about or if the program you're
207:20 - trying to implement requires that you
207:22 - use numbers like this you might do this
207:23 - for I in well I don't want to just say
207:27 - students because then I is not going to
207:30 - be a number I is going to be literally
207:33 - Hermione then Harry then Rob I need to
207:37 - iterate from zero to one to two right if
207:40 - I know a list with three elements has
207:42 - these locations zero one two I need to
207:45 - create a loop somehow that starts at
207:47 - zero and ends at two previously when I
207:49 - wanted to do that I needed range but
207:52 - this 2 is not going to work I can't just
207:54 - say in the range of students because
207:56 - students is not a number it's not an
207:58 - integer so you can't pass it to range
208:00 - range expects an integer but there is a
208:03 - solution here it turns out that there is
208:07 - a function in Python called length or
208:09 - Len Len that will tell you the length of
208:12 - a list and other things down the line
208:14 - too and now I think I can assemble these
208:17 - building blocks in a way that can allow
208:19 - me to use numbers in this way so range
208:22 - doesn't take a list of strings it takes
208:25 - a number and ideally that number is
208:27 - going to be three so I get a range of
208:29 - values 0 1 and 2. so I think I can Nest
208:32 - my functions like this this if I first
208:34 - get the length of the students list
208:36 - that's going to be 3 then I pass that
208:39 - return value as the argument to range
208:42 - that's going to give me back a range of
208:44 - value 0 then 1 then 2. and what that's
208:47 - going to allow me to do then in code if
208:49 - I want is not just this I could do print
208:52 - now students bracket I and this is now
208:56 - where the syntax we're seeing is getting
208:59 - very expressive new and perhaps
209:01 - unfamiliar but if I can do Open Bracket
209:04 - zero close bracket or Open Bracket one
209:07 - close bracket or Open Bracket two close
209:09 - bracket turns out I can actually put a
209:12 - variable in there and I can express any
209:14 - number inside of those brackets so as to
209:16 - print these all out dynamically in a
209:17 - loop let me do this python of
209:19 - hogwarts.pi enter there's Hermione Harry
209:22 - and Ron and now if I'm just curious I
209:25 - just want to poke around or maybe I want
209:27 - to do a ranking like who are the top
209:28 - three students in the school or in
209:30 - Gryffindor well I can print multiple
209:32 - things at a time we've seen let me print
209:35 - out not just the students at location I
209:38 - but rather let's print I first and then
209:41 - the student at location I so two things
209:43 - to print and we know that print can take
209:45 - two arguments we've seen that before
209:46 - they'll be separated by a space let me
209:48 - go ahead and rerun this now I see that
209:51 - okay Hermione is the top student but
209:53 - she's in zeroth place that's a little
209:55 - weird like we don't need to show the
209:57 - human using my program that we started
209:59 - counting at zero I can clean this up I
210:02 - can just add one to the I up here and
210:04 - now we see sort of a top three list of
210:06 - students Hermione is number one Harry's
210:08 - number two and of course Ron is number
210:10 - three so we can get access to all of
210:12 - those same values as well or any
210:14 - questions now on on these lists
210:18 - any questions now on these lists
210:21 - this length these ranges or otherwise my
210:24 - question is
210:26 - 4i in range can you explain this once
210:29 - more uh
210:33 - so let me rewind in time we started off
210:36 - doing this for I in 0 1 2 and then we
210:41 - printed out meow three times in that way
210:43 - the way that the for Loop works is that
210:46 - it creates for you a variable that I've
210:48 - called I but I could call it anything I
210:50 - want it then assigns I initially to the
210:53 - first thing in the list it then
210:55 - automatically assigns I to the next
210:57 - thing in the list and then it assigns I
210:59 - to the third thing in the list and each
211:01 - time it does all of the indented code
211:03 - underneath
211:04 - we realize though that this is not going
211:07 - to scale well if I want to do something
211:08 - like a million times so we introduced
211:10 - range instead that has the effect of
211:13 - doing the same thing it returns to me a
211:15 - range of values a list of three things
211:17 - really so the behavior is exactly the
211:20 - same if we now fast forward to this
211:22 - Hogwarts example now though what I'm
211:24 - doing is just combining these smaller
211:26 - ideas I'm still creating a for Loop I'm
211:29 - still creating a variable called I I
211:32 - want to do it over a range of values but
211:34 - how many values well if I use the length
211:36 - function and pass to the length function
211:38 - the list of values lengths purpose in
211:41 - life is to tell me how long is this list
211:43 - and it's three so that's almost as
211:45 - though before I had just done something
211:48 - like this but I don't want to hard code
211:50 - three I want to dynamically figure out
211:52 - how many students are at Hogwarts so I'm
211:54 - just composing composing composing or
211:56 - nesting all of these various ideas
211:59 - all right if I may let me transition now
212:01 - to hog in Hogwarts still to introduce
212:04 - one final type of data before we combine
212:06 - everything with a few final programs it
212:09 - turns out in Python there's not just
212:11 - strings not just ins not just floating
212:13 - Point values not just bulls not just
212:15 - lists there are also what are called
212:17 - dictionaries or dicks which are a data
212:20 - structure that allows you to associate
212:22 - one value with another literally a
212:26 - dictionary like in the human world if
212:27 - you were to open in a dictionary be it
212:29 - in English or any other human language
212:30 - what's inside of a dictionary well it's
212:33 - a bunch of words and definitions a
212:36 - computer scientist though and a
212:37 - programmer would describe those more
212:39 - generically as keys and values something
212:42 - associated with something else that's
212:45 - all a dictionary is it allows you to
212:46 - associate something with something else
212:49 - and notice this is already more powerful
212:50 - more interesting than a list a list is
212:53 - just a set of multiple values but a
212:56 - dictionary is sort of two-dimensional if
212:58 - you well just like a human dictionary a
213:01 - book it Associates something with
213:02 - something else like words with their
213:04 - definitions now what does this actually
213:06 - mean in practice well suppose that we
213:09 - wanted to keep track of who is in what
213:13 - house at Hogwarts well I could do it
213:16 - using lists alone let me go back to vs
213:18 - code here and let me just temporarily
213:20 - but in a way that I'm not going to like
213:22 - ultimately let me create another
213:23 - variable called houses set it equal to
213:26 - Gryffindor corresponding to Hermione's
213:29 - house Gryffindor corresponding to
213:31 - Harry's house and Gryffindor
213:33 - corresponding to Ron's house and let's
213:35 - add Draco in there so we now have four
213:36 - instead of three students just so we
213:38 - have a little variety and he was in uh
213:41 - Slytherin so now we have two lists and
213:45 - we could just agree amongst ourselves
213:47 - that whoever is first in the students
213:50 - variable lives in the first value in
213:54 - houses whoever is second in students
213:56 - lives in the second house there's our
213:58 - third Institute students lives in the
214:00 - third house we could do that but
214:02 - honestly that is going to break down
214:03 - quickly when we have a lot of students
214:06 - when we have a lot of houses and what if
214:07 - we want to keep track of more things
214:09 - than that what if we want to keep track
214:10 - of every student's house and the
214:12 - Patronus this uh this image that they
214:14 - conjure up magically well then we need a
214:17 - third list like this is just going to
214:18 - get messy quickly if we're just on the
214:21 - honor System using multiple lists where
214:23 - everything lines up logically it doesn't
214:26 - end up well when your code gets more
214:28 - complicated but I do want to implement
214:30 - this idea I want to associate something
214:32 - with something a student with a house a
214:34 - student with a house a student with a
214:36 - house and so forth so how can I go about
214:38 - doing this well let me go back to my
214:40 - code here and let me propose that we do
214:43 - this using a python dictionary and this
214:46 - is the last of the new syntax really
214:47 - that we'll see here's the new syntax
214:50 - instead of using square brackets we're
214:52 - going to use curly braces for
214:54 - dictionaries as well we've seen curly
214:56 - braces in the context of f strings
214:59 - completely unrelated sometimes you run
215:01 - out of keys on the keyboard and the
215:02 - authors of a language need to start
215:04 - reusing symbols in different ways that's
215:06 - what's about to happen we're using curly
215:08 - braces in a different way now so let me
215:10 - create a variable called students and
215:12 - let me go ahead and set it equal to open
215:15 - curly brace and close curly brace this
215:17 - is an empty dictionary at the moment and
215:20 - here's how a dictionary works it allows
215:22 - you to associate something with
215:23 - something else and you do that like this
215:25 - Hermione quote unquote
215:28 - colon and then the value thereof what do
215:31 - you want to associate with Hermione well
215:33 - Gryffindor what do I want to associate
215:36 - Harry with well I want to associate him
215:38 - with Gryffindor what do I want to
215:40 - associate Ron with well I want to
215:42 - associate him with Gryffindor well this
215:45 - is actually not gonna this is gonna get
215:47 - very ugly quickly once we add in Draco
215:48 - and Slytherin my code is going to get
215:50 - too long it's going to start wrapping so
215:52 - this is purely aesthetic it is perfectly
215:54 - acceptable in Python and other languages
215:56 - to format your code a little more
215:58 - readily and just add new lines if it
216:00 - makes it more readable and one way of
216:02 - doing this might be as follows I still
216:04 - have my curly brace up here I still have
216:06 - my curly brace down here but notice it's
216:09 - a little more readable now in that I
216:11 - have my keys on the left my somethings
216:13 - and my values on the right my other
216:16 - somethings it's just a little easier to
216:17 - skim top to bottom you could format it
216:19 - differently as well but I'm going to go
216:21 - ahead and add in now uh Draco who lives
216:24 - of course in in Slytherin so now I have
216:27 - each of these keys on the left and
216:31 - values on the right which is really
216:32 - again just a code implementation of this
216:35 - idea a little chart that you might write
216:37 - up with paper pencil when associating
216:39 - something with something else so how do
216:41 - I now use this code in an interesting
216:43 - way the syntax is almost the same if I
216:45 - want to print out the very first student
216:47 - Hermione's house I could do this print
216:50 - out the name of the variable but I need
216:53 - to go inside of the variable I need to
216:55 - index into it and what's neat about
216:58 - dictionaries is that whereas lists
217:01 - have locations that are numeric zero one
217:05 - two Hermione Harry Ron respectively
217:08 - dictionaries allow you to use actual
217:10 - words as your indices so to speak your
217:14 - indexes to get inside of them so if you
217:16 - want to print out Hermione's house the
217:19 - key you care about is quote unquote
217:21 - Hermione and what this syntax here will
217:24 - do notice it's not a number zero or one
217:26 - or two it's literally Hermione's name
217:28 - this is like going to the Chart earlier
217:31 - and saying all right give me uh Hermione
217:34 - is my key Gryffindor is the value that's
217:37 - what we're doing here syntactically
217:38 - we're looking up Hermione and getting
217:40 - the value thereof so if I go back to my
217:42 - code that should print out Gryffindor
217:44 - and if I do this a few times students
217:46 - bracket quote unquote Harry should give
217:48 - me Harry's house print students Open
217:51 - Bracket Ron that should give me Ron's
217:53 - house and then lastly if I do this with
217:55 - students bracket Draco that should give
217:57 - me draco's house now it's a little
217:59 - manual still I bet we can improve this
218:01 - but let me run python on hogwarts.pi and
218:03 - we should see Gryffindor Gryffindor
218:06 - Gryffindor Slytherin which is exactly
218:08 - what we'd expect now all we've done
218:10 - again is we've just now moved from
218:12 - having just a simple list of names to
218:14 - again sort of two Dimensions associating
218:16 - like we would on paper pencil something
218:18 - with something else keys with values
218:20 - respectively allow me if you will even
218:23 - though I realize this is getting a
218:25 - little fancy allow me to escalate things
218:27 - slightly here and transition from
218:30 - looking at just for instance
218:32 - uh that pattern there just hard coding
218:35 - those values there to actually printing
218:37 - these out more dynamically let me go
218:39 - ahead and use our Loop and this question
218:40 - came up earlier as well let me go ahead
218:43 - and say for each student
218:47 - in students go ahead and print out for
218:50 - instance the students variable at well
218:54 - let's just say student first let's keep
218:56 - it simple so this is not going to be
218:58 - that interesting yet but when I run
218:59 - python of hogwarts.pi and hit enter
219:01 - notice
219:03 - what should I say let me take a question
219:05 - here to see what am I going to see when
219:08 - I hit enter now when I'm doing for
219:10 - student in students yeah I think we we
219:13 - will only see Keys perfect so good
219:15 - intuition it could have gone both ways
219:17 - could have been values the houses but
219:19 - when you use a for Loop in Python to
219:21 - iterate over a dictionary by design it
219:24 - iterates over all of the keys so we
219:27 - should see I think Hermione Harry Ron
219:30 - and Draco let me hit enter now enter and
219:33 - indeed you're exactly right we see just
219:35 - the keys but that's not really that
219:37 - useful if what I really care about is
219:39 - who lives where can I print out both
219:41 - well I think I can let me go ahead and
219:43 - do this let me print out not just the
219:46 - student's name the key but let me use
219:49 - the key their name to index into the
219:52 - dictionary right if I know the word in
219:54 - the dictionary let me look up its
219:56 - definition if I know the student's name
219:57 - let me look up their house and the
219:59 - Syntax for this just like a list is
220:02 - students bracket and just like in the
220:05 - past we used I when I was a number we
220:08 - can also with a dictionary use a string
220:11 - so if the student's name is the key then
220:16 - this syntax students Open Bracket
220:19 - student close bracket will go to
220:22 - Hermione's location and get back her
220:24 - house we'll go to Harry's location and
220:26 - get back his house and so forth so if I
220:28 - do python up hogwarts.pi enter now I see
220:32 - Hermione Gryffindor Harry Griffin or Ron
220:34 - Gryffindor Draco Slytherin now it looks
220:36 - like I've given them all new last names
220:38 - but I can clean that up this is just a
220:39 - print thing let's go ahead and change
220:41 - our separator from the default space to
220:43 - maybe a space comma and just using print
220:46 - features now let me run the same program
220:48 - again enter now I've just got some nice
220:50 - pretty commas in there to make clear
220:52 - that Hermione's last name is not in fact
220:54 - Gryffindor but that's just a print
220:56 - detail any questions then on these
220:58 - dictionaries and what I've just done
221:02 - questions on these dictionaries and this
221:05 - looping
221:06 - over them here
221:09 - um I just can't get my head around the
221:11 - uh four student in students does uh if
221:15 - I'm just correct me if I'm right does
221:18 - that mean it Imports the list of
221:21 - students and uses the indexes or in
221:25 - other words Hermione Harry and Ron as
221:29 - the indexes in the actual um the list of
221:33 - students correct so this is just a
221:35 - feature of python when you use a for
221:37 - loop with a dictionary what happens is
221:40 - this if this is the dictionary here with
221:42 - the keys on top and the values on bottom
221:43 - you get to choose what the variable is
221:45 - called I called my variable student just
221:47 - because it makes sense because I want
221:48 - one student at a time and what the for
221:50 - Loop does just like it did with numbers
221:52 - before the zero the one and the two it
221:54 - allows me to for instance set student
221:56 - equal initially to Hermione's name and
221:59 - then the next iteration of the loop the
222:01 - next cycle sets student equal to Harry's
222:04 - name then Ron then Draco it just kind of
222:06 - happens automatically like that is what
222:08 - the python interpreter does for you when
222:10 - it sees a for Loop like that so it's
222:12 - very similar in spirit to iterating with
222:15 - a for Loop over a list but rather than
222:17 - indurate over the numeric location 0 1 2
222:19 - it iterates over the bold-faced keys in
222:23 - this representation here graphically
222:26 - and allow me to give us one other
222:28 - example on Hogwarts before we look at
222:30 - one other familiar uh domain at the risk
222:33 - of things escalating a little bit let me
222:35 - propose that we continue the story with
222:37 - one final Hogwarts example like this
222:40 - what if we have more information about
222:42 - each of our students and this is kind of
222:45 - inevitable right if you're implementing
222:47 - a program that's a database with people
222:49 - or customers or employees or anything
222:51 - else you can imagine having a lot of
222:53 - data about anything you're representing
222:55 - in your program here for the sake of
222:57 - discussion suppose that every student at
222:59 - Hogwarts of course has a name they have
223:02 - already a house but they also have a
223:04 - Patronus for those unfamiliar this is
223:06 - the animal or entity that comes out of
223:08 - the end of their wand when they make a
223:10 - Certain Magical spell the point here
223:12 - being is that we want to associate not
223:14 - just one thing with the student but
223:18 - multiple things as well their name their
223:20 - house and their Patronus in this case
223:23 - well what might code like this look like
223:25 - well let me go back to hogwarts.pi and
223:28 - let me start fresh for just a moment and
223:30 - let me propose that I enhance this with
223:32 - a bit more data and this data is going
223:35 - to look as follows my students variable
223:37 - now
223:38 - I'm going to propose we think of it as a
223:41 - list what if we have a list of
223:43 - dictionaries as follows indeed I want to
223:45 - literally implement this picture here so
223:48 - notice that my previous picture just
223:50 - represented a single dictionary but
223:52 - suppose I wanted to compose a list of
223:55 - dictionaries that is for students so a
223:58 - list of four students and suppose that
224:00 - each of those students is itself a
224:03 - dictionary a collection of key value
224:07 - pairs keys and values something and
224:10 - something else well here's one other way
224:12 - we can do this in code let me go back to
224:15 - vs code here
224:16 - and let me Define a variable called
224:18 - students that is equal to a list and I'm
224:21 - going to preemptively move my cursor
224:23 - onto separate lines because I know this
224:25 - is going to be long and I want to fit
224:27 - all of the elements of this list inside
224:29 - of it I'm now going to create a
224:31 - dictionary one dictionary per student
224:33 - and how do I create a dictionary I just
224:35 - use those curly braces but it's up to me
224:37 - to Define what those keys are and let me
224:40 - propose that 1K this time won't be the
224:42 - student's name explicitly it will
224:44 - literally be the word name and they're
224:46 - going to have the name Hermione this
224:48 - same student is going to have another
224:50 - key called house and the value is going
224:52 - to be Gryffindor and this same student
224:55 - is going to have a third key called
224:56 - Patronus and the value of that is going
224:59 - to be I had to look it up in otter
225:01 - according to the book now I'm going to
225:04 - create a second dictionary inside of
225:06 - this list and again a dictionary it's
225:07 - like literally like the human dictionary
225:09 - of words it's a book that contains keys
225:12 - and values words and definitions what
225:14 - are the three words I'm storing in each
225:16 - of my dictionaries name house and
225:18 - Patronus what are the definitions of
225:20 - those words for Hermione Hermione
225:22 - Gryffindor and Otter respectively for
225:25 - Harry the definitions are going to be
225:27 - different in this new dictionary let me
225:29 - give myself another pair of curly braces
225:31 - and say this name quote unquote colon
225:34 - Harry a house here is again going to be
225:37 - Gryffindor and this one I I knew his
225:40 - Patronus is going to be in this case a
225:43 - stag
225:44 - all right next a third dictionary the
225:46 - name here will be Ron and I'm going to
225:49 - go ahead and do that just like this next
225:51 - I have the house and he too was
225:53 - Gryffindor lastly how to look this one
225:55 - up Ron's Patronus was a Jack Russell
226:00 - Terrier lastly
226:03 - is Draco in a third in a fourth
226:06 - dictionary now so another pair of curly
226:07 - braces the name of the student is of
226:09 - course Draco the house of this student
226:12 - is Slytherin and Draco interestingly
226:16 - enough at least according to the
226:18 - internet has no Patronus was never
226:20 - revealed in the books or the movies so
226:22 - it turns out this is actually a
226:24 - wonderful teachable moment there is a
226:26 - special key word in Python that is
226:28 - literally none
226:30 - n-o-n-e with the first letter
226:32 - capitalized this represents officially
226:35 - the absence of a value so I could a
226:38 - little sloppily do something like quote
226:40 - unquote but does that mean I didn't get
226:41 - around to typing it or not it's a little
226:44 - clear semantically to say literally none
226:46 - a special keyword in Python to make
226:49 - clear that I know uh Draco has no
226:52 - Patronus it's not just an oversight on
226:54 - my part
226:55 - now that I have this what do I have in
226:58 - the computer's memory I have a list how
227:00 - do I know it's a list because I see a
227:02 - square bracket at the beginning and
227:04 - another square bracket at the end that's
227:06 - just my visual clue okay I don't know
227:08 - necessarily what else is going on here
227:10 - but there's a list of something what is
227:13 - in that list well here too the syntax is
227:16 - our clue because this line 2 starts with
227:18 - a curly brace and ends with a curly
227:20 - brace I just know that is a dictionary a
227:24 - collection of key value pairs now this
227:26 - all fit on my screen perfectly so I
227:28 - didn't bother moving all of the key
227:30 - value pairs onto new lines it would have
227:31 - made it really tall so I kept it all
227:33 - together here this time but how many
227:36 - keys does this first dictionary have put
227:39 - another way in Hermione's physical
227:40 - dictionary how many words are in that
227:42 - dictionary three the words are name
227:44 - house and Patronus what are the three
227:47 - definitions or values of those words in
227:49 - Hermione's dictionary Hermione
227:51 - Gryffindor and Otter respectively and
227:54 - the same story goes for Harry
227:56 - then for Ron then for Draco I have by
228:01 - Design chosen to give them dictionaries
228:04 - that have all the same Keys all the same
228:06 - names but they all have unique values
228:10 - and that's my design That's My
228:11 - Prerogative as a programmer so why is
228:14 - this useful at the end of the day now I
228:16 - have access to a whole collection of
228:18 - interesting data about all of these
228:20 - students and I can still do a loop I can
228:23 - say for student and students
228:25 - that's going to allow me to iterate over
228:27 - this list of students and let me go
228:29 - ahead and print out just one thing at a
228:31 - time let me print out the current
228:32 - Student's name so as complicated as the
228:35 - dictionary is this should be pretty
228:37 - comfortable for student and students is
228:39 - just going to iterate over every student
228:41 - in the list one two three four total the
228:43 - next line is just going to print out the
228:46 - value of the name key it's like opening
228:48 - a physical dictionary looking up the
228:50 - word name and giving us Hermione Harry
228:52 - Ron and Draco respectively from each
228:55 - dictionary so if I run this version of
228:57 - Hogwarts and hit enter there I get all
229:00 - three of their names but what if I want
229:01 - more information than that I want both
229:03 - their names and their houses well just
229:06 - add to Prince arguments student Open
229:08 - Bracket House close bracket all right
229:12 - let's go ahead and run this python of
229:14 - hogwarts.pi and hit enter so I now see
229:17 - Hermione Gryffindor Harry Gryffindor and
229:19 - so forth well we can aesthetically clean
229:20 - this up a little bit by adding a
229:22 - separator with print like a comma and a
229:24 - space just so that when I run this again
229:26 - I now see some commas separating these
229:28 - values but recall that students have not
229:30 - just a name not just a house but also
229:32 - that Patronus so if we want to print out
229:34 - that too we now have the syntax via
229:38 - which to go into that same dictionary
229:40 - for each student and output their
229:42 - Patronus as well as their house and
229:44 - their name so if I run this program one
229:46 - final time now I see all of the data in
229:50 - this here dictionary so this is a lot to
229:52 - absorb all at once I'm sure it's the
229:55 - last of our new data types on top of
229:57 - lists we have these dictionaries but
229:58 - again a dictionary at the end of the day
230:00 - is just a collection of values similar
230:03 - to these values here that allow you to
230:06 - associate keys with values and the first
230:08 - version of this program Associated
230:10 - literally the students names with their
230:12 - houses but then I realized in my next
230:14 - version wait a minute what if every
230:16 - student has not just a name and a house
230:18 - but a Patronus let's actually
230:20 - standardize the names of our keys to be
230:23 - name house and Patronus and then the
230:25 - values of those keys can actually be the
230:28 - data like Hermione Gryffindor otter and
230:30 - so forth questions now on these
230:33 - dictionaries and iteration thereof
230:36 - I just was wondering if the suppose the
230:39 - dictionary is very huge and if I want to
230:43 - look up for a specific student so how do
230:46 - I know uh where to look that student
230:49 - from like can we sort it out in
230:51 - alphabetical order or numeric order or
230:54 - anything like that in short answer yes
230:56 - one of the features of python is that it
230:58 - makes these dictionaries very highly
231:00 - performant for you that is even if
231:02 - they're very large as they will be in
231:05 - future weeks when we manipulate more
231:06 - data python will find the data you care
231:09 - about quickly for you and in fact that
231:12 - is a feature of the language that is a
231:14 - feature of a dictionary to get you the
231:16 - data quickly and there are functions
231:18 - that you can use you can sort the data
231:19 - you can sift through it you can do very
231:21 - performant operations as we eventually
231:24 - will
231:24 - allow me then to propose as we wrap up
231:28 - these Loops that we solve just a few
231:30 - final problems that will perhaps evoke
231:32 - fond memories of yesteryear at least for
231:34 - me wherein one of my favorite games
231:36 - growing up was this one here on the
231:38 - original Nintendo and this is a
231:39 - two-dimensional world where the
231:41 - characters move up down and right not so
231:44 - much to the left in jumping over
231:46 - pyramids and obstructions like these and
231:48 - allow me to propose that we use this
231:49 - just for inspiration not to do something
231:51 - that's quite as colorful or graphical as
231:53 - this but just to focus on for instance
231:55 - this barrier in the middle of the world
231:58 - here that Mario or Luigi had to jump
232:00 - over and so this here seems to be like
232:03 - three bricks stepped on top of one
232:05 - another and we won't do things quite
232:06 - graphically but let's just Implement a
232:08 - very simple python-based version of this
232:10 - textually using maybe just hashes for
232:13 - bricks because there's a pattern here
232:15 - one on top of the other and I bet we can
232:17 - solve this in any number of ways well
232:19 - let me switch back over to vs code here
232:21 - and let me propose that we create a
232:24 - program called Mario o.pi using code in
232:26 - the terminal window and then up here let
232:29 - me start by implementing that same
232:30 - picture as simply as I can printing out
232:33 - just literally the hash and then the
232:35 - hash and then a third final hash this is
232:38 - going to be a very textual approximation
232:40 - of it but I think if I run python
232:42 - mario.pi I've got a very simple version
232:45 - of that same column of bricks so to
232:48 - speak but you can imagine that certainly
232:50 - in a game where maybe these columns get
232:53 - higher or lower it would be nice to
232:55 - write code that's actually a little more
232:57 - Dynamic than that and doesn't just use
232:59 - print print which is literally copy and
233:01 - paste it would seem so let me at least
233:04 - adopt some of today's Lessons Learned
233:06 - and instead do something like this for
233:08 - underscore in range of three let's now
233:11 - print out just one of these at a time
233:13 - but the fact that I've now used a three
233:15 - to range means if I want to change it to
233:17 - something bigger or smaller I change it
233:19 - in one place not in three or more places
233:22 - and this code two of course if I got it
233:24 - right is is just going to print out the
233:27 - exact same thing so we're iterating here
233:29 - but let's see if we can't now integrate
233:31 - our discussion of writing functions of
233:33 - our own to begin writing something a
233:36 - little more Dynamic and solving more
233:37 - complicated problems ultimately one of
233:39 - the nice things about functions is that
233:41 - they allow us to not just write code
233:43 - that we can use and reuse they allow us
233:45 - to create abstractions if you will an
233:48 - abstraction is a simplification of a
233:50 - potentially more complicated idea and
233:52 - we've seen this a few times over the
233:54 - course of the weeks for instance we had
233:56 - a function called hello which granted
233:58 - didn't do all that much you just printed
234:00 - hello but it allowed me to think about
234:02 - the function as exactly what it does not
234:04 - generically printing something but
234:06 - literally saying hello I've been able to
234:08 - get a number using something similar by
234:11 - defining my own function like get number
234:13 - well let me go ahead and for instance
234:15 - assume for the moment that I've had the
234:17 - forethought to in my function main use a
234:21 - function called print column that seems
234:23 - as good a name as any to use a function
234:26 - that prints a column of bricks well how
234:29 - can I go about now implementing this
234:31 - abstraction this simple idea print
234:33 - column with actual code well we've seen
234:36 - before with def we can do just that let
234:37 - me Define a function called print column
234:39 - let me accept as its input generically
234:42 - speaking a parameter called height I
234:44 - could call it n or H but I'll be a
234:46 - little more explicit now with Heights
234:48 - just so I remind myself what it's doing
234:50 - and now I think I can just borrow some
234:52 - of that same code from before for
234:54 - underscore in range of height go ahead
234:58 - and print out a single hash and then at
235:01 - the end of this whole program let's just
235:03 - call Main so I've kind of complicated
235:05 - the code it doesn't do anything more
235:07 - just yet but it's setting me up for
235:10 - solving what I think are going to be
235:11 - more sophisticated problems if I run
235:13 - python of mario.pi we're back where we
235:15 - began but I now have a function an
235:18 - abstraction print column that's going to
235:21 - allow me to think about printing some
235:24 - chunk of the world of Mario at a time
235:26 - and I can do this in different ways too
235:28 - notice that if I really want I could do
235:31 - something like this I could re-implement
235:33 - now print column in different ways
235:35 - especially if I'm using print column all
235:37 - over my code or maybe still a colleague
235:40 - of mine a friend someone else on the
235:42 - Internet is using my print column
235:43 - function what's also nice about
235:46 - functions you've written is you can
235:48 - change the underlying implementation
235:49 - details of them but so long as you don't
235:52 - change the name of the function or its
235:54 - parameters or what it returns if
235:56 - anything no one else knows the
235:58 - difference you can change the internal
236:00 - implementation as much as you want if
236:02 - you want to improve it or make fixes
236:04 - over time so for instance another way we
236:06 - could Implement print column recall
236:08 - would be something like this a bit
236:09 - clever with one hash and then a new line
236:12 - and then maybe we could do
236:13 - multiplication of strings and then end
236:15 - this line with quote unquote again it's
236:18 - okay if you're not comfortable with this
236:19 - syntax this was a more clever approach
236:21 - we saw in the past but if I run python
236:24 - of miro.pi here I'll still see a column
236:27 - of three but what's important here is
236:28 - that Main does not need to know that the
236:32 - underlying implementation of print
236:34 - column has changed well let's transition
236:38 - to a different dimension if you will and
236:40 - rather than print out just these
236:41 - vertical bricks let's fast forward in
236:43 - the game to this part of the world here
236:45 - at some part Mario encounters these
236:47 - bricks in the sky that if he jumps up
236:49 - underneath they become coins and so he
236:51 - he gains to his score but let's go ahead
236:53 - and focus only on those coins and let me
236:55 - propose that we print out oh just these
236:58 - four question marks here and let me go
237:00 - back to vs code here and let me propose
237:02 - that within vs code here just like
237:04 - before we try to abstract this away so
237:06 - let me go ahead and get rid of this
237:08 - version because we're now going
237:09 - horizontal instead of vertical with our
237:11 - output and let me just say well print
237:15 - row four times let me just abstract away
237:18 - the problem at hand I don't know yet how
237:20 - I'm going to print those four question
237:21 - marks but let's call it print row four
237:24 - and I'll assume I'll now solve this
237:26 - problem let's now go down that rabbit
237:28 - hole of solving the problem Define a
237:30 - function called print row it's going to
237:33 - take a width instead of a height because
237:35 - it's horizontal instead of vertical and
237:37 - how can I do this well now we have an
237:40 - opportunity to do string multiplication
237:41 - even more elegantly I can say quote
237:44 - unquote question mark times with and
237:47 - this is a very pretty pythonic way of
237:50 - printing what could otherwise be a loop
237:51 - and that's fine but this is going to go
237:53 - ahead and print those question marks for
237:55 - me let's do python of mario.pi enter and
237:58 - now I've got four question marks it's
238:00 - not nearly as pretty as the more
238:01 - graphical version but it is at least a
238:06 - building block toward having now a
238:08 - reusable function like print row
238:11 - am I doing all this like why are we over
238:13 - engineering the solution to these
238:15 - problems by having print column and
238:17 - print row well it's a useful problem
238:19 - solving technique as soon as your world
238:22 - does not look one-dimensional like this
238:24 - or with the column version but what
238:26 - about this later in Super Mario Brothers
238:29 - does Mario have to jump down into this
238:31 - world where there's a lot of these
238:32 - underworld barriers and this one here
238:35 - for instance looks like a square it's
238:36 - two-dimensional there's a height and a
238:38 - width to it and that is to say there's a
238:41 - bunch of different ways we could
238:42 - implement this thing if maybe for
238:44 - discussion it's like a three by three
238:46 - grid a three by three square of sorts
238:49 - well how can we go about solving this
238:52 - here problem well let me propose we come
238:54 - back to vs code and let me propose that
238:56 - we think about this in a couple of
238:58 - different ways I could do this hmm like
239:02 - this if I if I know where I'm going you
239:05 - know maybe I'm a seasoned programmer let
239:07 - me go ahead and do this let me print out
239:09 - a square the width and the height of
239:11 - which is three that's an abstraction I'm
239:13 - just taking for granted for a moment
239:14 - that there is already a function called
239:16 - print Square that's going to be with 3
239:18 - and height 3 as well
239:20 - someone's got to implement this and at
239:22 - the moment there's only me at the
239:23 - keyboard so let's go ahead and Implement
239:25 - that square let me go ahead and Define a
239:27 - function called print square that takes
239:29 - in a specific size both for height and
239:32 - for width and here's where we have an
239:35 - opportunity to use some of those loops
239:36 - and we can use those Loops in a way we
239:38 - haven't yet if I want to print out all
239:41 - of these rows but also all of these
239:44 - columns I now have to think not just
239:46 - cyclically like a loop allows but I need
239:48 - to think two-dimensionally and if you're
239:50 - familiar with like an old school
239:52 - typewriter or even a printer nowadays It
239:54 - generally prints from top to bottom so
239:57 - even if you have multiple columns you
239:59 - print out one line at a time and while
240:02 - you're on that line the printer or the
240:04 - typewriter prints from left to right and
240:06 - that's kind of the mental model to have
240:07 - with your black and white terminal
240:09 - window all of the output for every
240:11 - example thus far starts at the top and
240:14 - goes down to the bottom from top to
240:16 - bottom left to right so we have to
240:18 - generate our output our Square in that
240:21 - same way so let me propose that we do
240:23 - this let me propose that we know we need
240:26 - to iterate this many times three or more
240:28 - generally size so let me do this for I
240:30 - in the range of size
240:32 - what do I need to do three times Well I
240:36 - want to print out what one two three
240:39 - rows of bricks but within each row of
240:42 - bricks what do I want to print one two
240:45 - three bricks specifically so if we go
240:48 - back to our diagram here and I stipulate
240:50 - that it's indeed meant to be a three by
240:52 - three Square
240:54 - three wide and three tall what do I want
240:57 - to do to print the first row I want to
240:59 - print brick brick brick brick brick what
241:03 - do I want to print on the second row
241:05 - brick brick brick and the third row
241:06 - brick brick brick so I'm doing three
241:09 - things three times there's a lot of
241:12 - printing that must happen so let me go
241:14 - back to my code here and let me propose
241:16 - now that we think of this outer loop
241:19 - that I've just started as representing
241:22 - each of our rows for I in range of size
241:26 - is going to ensure no matter what I do
241:28 - next that I can print out one two three
241:32 - rows or more generally size where size
241:35 - could be three but it could be smaller
241:37 - or larger
241:38 - what do I want to do on each of the rows
241:40 - well just like an old school typewriter
241:42 - or printer on each row I want to print
241:45 - out brick brick brick brick brick brick
241:47 - brick brick brick well that sounds like
241:49 - a cycle some kind of loop so maybe I can
241:52 - have inside of one Loop another loop I
241:55 - don't want to use I again because I
241:56 - don't want to use the same variable and
241:58 - mess up my counting so I'm going to by
242:00 - convention use J very common to use I
242:03 - and then J maybe K but after that you
242:05 - shouldn't keep nesting inside of each
242:07 - other let me go ahead and say for J in
242:09 - range of size 2 because it's a square
242:11 - and then each of these rows let me print
242:14 - out a single hash but no new line
242:18 - but after each row let me print only a
242:22 - new line
242:24 - so there's a lot going on here
242:25 - especially if you've never touched
242:27 - python let alone Loops but notice what
242:30 - I've done here too and I'll add some
242:32 - comments for clarity for each row in
242:37 - square
242:38 - for each
242:40 - brick in row
242:44 - print brick and here is where comments
242:47 - and more generally pseudocode can really
242:50 - help explain to yourself and to others
242:52 - what your lines of code are doing on
242:54 - line eight I'm iterating from I equals
242:57 - zero on up to size so zero one two on
243:00 - line 11 I'm doing the exact same thing
243:02 - but using J from 0 1 2 but that's good
243:05 - because I represents now each of my rows
243:08 - and while I'm on each of those rows
243:10 - inside of this outer loop I'm going to
243:13 - do brick brick brick one two three one
243:15 - two three one two three but I don't want
243:17 - my cursor to keep moving to the next
243:19 - line while I'm on a row so I'm just
243:22 - overriding that line ending but let me
243:25 - ask a question of the group now why on
243:27 - line 16 do I have a print here all by
243:31 - itself
243:33 - why do I have a print all by itself
243:36 - notice that it's below the inner loop
243:40 - but inside of the outer loop so to speak
243:45 - what is that loop on line 16 doing
243:48 - ultimately
243:49 - every time you finish a line you have to
243:53 - add a new line and at the end of it so
243:57 - print it prints a new line perfect I
244:01 - don't want a new line after every brick
244:03 - I only want to do that at the end of the
244:05 - row and that's why my comments now are
244:07 - perhaps enlightening notice that this
244:10 - Loop here is just iterating for each
244:13 - brick in the row once I'm done with that
244:16 - inner loop so to speak once I'm done
244:18 - with these highlighted lines here to
244:20 - Evelyn's point I need to print out one
244:22 - blank new line and we've not done this
244:24 - before but when you call print with no
244:25 - arguments all you get is that automatic
244:28 - line ending the backslash n where the
244:30 - cursor moves to the next line so if I
244:33 - now roll go back to my terminal window
244:35 - and run mario.pi I think I should get a
244:38 - three by three square and it doesn't
244:40 - quite look like a square on my screen
244:42 - because these hashes are a little taller
244:43 - than they are wide but it is in fact
244:45 - three by three but let me propose as
244:48 - we've always done here how we might
244:49 - tighten up this code further just for
244:52 - clarity's sake let me get rid of my
244:54 - comments for a moment just so we can see
244:56 - how many lines of code we have total and
244:59 - let me propose that we maybe do this let
245:02 - me propose that you know what this inner
245:04 - loop especially if you're having trouble
245:06 - wrapping your mind around one Loop
245:08 - inside of another loop you don't
245:10 - strictly need it what if we do this
245:11 - trick again what if we print out inside
245:14 - of the outer and only Loop each of those
245:17 - hashes times the number of times we want
245:20 - them right we draw inspiration from an
245:22 - earlier approach and we run python now
245:24 - of mario.pi same result but now print
245:28 - square is really nice and compact it has
245:31 - one explicit Loop and it's still
245:33 - printing out using string multiplication
245:35 - all of the hashes at once on that row if
245:39 - you like abstraction and you'd like to
245:41 - wrap your mind more around what the code
245:43 - is doing well let's do this if you're
245:45 - not quite clear on what's going on let's
245:47 - propose that you implement a function
245:48 - called print row oh passing in size and
245:51 - let me propose that this print row
245:53 - function it simply taken that width and
245:57 - print out the individual hash times that
246:01 - many times in other words here's an
246:03 - opportunity for abstraction whereby well
246:07 - what does it mean to print a row well
246:08 - when you're implementing print Square I
246:10 - don't really care what it means to print
246:12 - a row I just need to know that someone's
246:14 - taking care of printing the row you can
246:17 - kind of pass the buck to another
246:18 - function altogether and how does print
246:21 - row work well it could use a for Loop it
246:23 - could use this string multiplication
246:25 - trick this is a way to take a larger
246:27 - program and this is probably the most
246:29 - complicated one we've looked at thus far
246:31 - and to decompose it into these smaller
246:34 - components that once assembled achieve
246:37 - your final idea
246:39 - seeing no questions that's the end of
246:42 - our look at Loops in Python this ability
246:44 - to do things cyclically again and again
246:46 - and when we combine those with
246:47 - conditionals this ability to ask and
246:49 - answer questions and combine them with
246:51 - our functions and variables we really
246:52 - now have most of the building blocks we
246:54 - need to solve much larger much more
246:56 - interesting much more personal questions
246:58 - so in the weeks to come we'll start to
247:00 - see exactly what could go wrong though
247:02 - when we do so but we'll introduce you to
247:04 - all the more tools by which you can
247:06 - troubleshoot those same problems
247:14 - [Music]
247:25 - [Music]
247:27 - thank you
247:33 - all right this is cs50's Introduction to
247:37 - programming with python my name is David
247:39 - Malin and this is our week on exceptions
247:41 - exceptions in python as well as in other
247:43 - programming languages refer to problems
247:46 - in your code indeed when something is
247:48 - exceptional in your program it actually
247:50 - doesn't mean it's a good thing it means
247:52 - something has gone wrong that ideally
247:54 - you will somehow solve so what are some
247:56 - of the things that can go wrong so I'm
247:57 - going to go ahead and open up vs code on
247:59 - my computer here and in the terminal
248:01 - window I'm going to go ahead and run
248:02 - code of hello.pi that's going to of
248:05 - course open up a brand new tab for me
248:07 - hello.pi in which I can write my code
248:09 - and let me go ahead and write some very
248:10 - simple code just to say hello to the
248:12 - world let's go ahead and say print quote
248:15 - hello comma world and then let me go
248:19 - ahead and I'm forgetting to close that
248:22 - quote so a mistake that you yourself
248:23 - might have already made or might surely
248:25 - in the future make and it's a little
248:27 - subtle because you might not necessarily
248:28 - notice that you've just missed that one
248:30 - character well let me go ahead and
248:32 - somewhat optimistically go down to my my
248:34 - terminal window now and run python of
248:36 - hello.pi and hit enter and that's the
248:39 - first of my errors my gosh I've only
248:40 - written one line of code and I seem to
248:42 - have more lines of errors on the screen
248:44 - but the Salient point is this bottom
248:46 - most thing here notice where it says
248:48 - syntax error syntax error is a problem
248:50 - with the code that you have typed your
248:52 - syntax just like English and other human
248:54 - languages have syntax associated with
248:56 - them so does my code and it's not quite
248:58 - correct something is awry I didn't
249:00 - follow the instructions properly and it
249:02 - does elaborate for me unterminated
249:05 - string literal now that's a bit Arcane
249:07 - that is a bit of a confusing error
249:09 - message but unterminated would generally
249:11 - mean that I started something but didn't
249:13 - stop it I didn't terminate it string of
249:15 - course is a sequence of text like we
249:17 - discussed before or stir in Python and
249:20 - literal generally refers to something
249:21 - that you literally typed it's not a
249:23 - variable it's something like quote
249:25 - unquote or just quote hello world so the
249:28 - fix here of course is going to be to go
249:31 - ahead and terminate that string and
249:33 - actually close close the quote and if I
249:35 - now go back down into my terminal window
249:37 - and rerun python of hello.pi now I'm
249:40 - saying hello to the world so the catch
249:42 - with syntax errors here is that syntax
249:45 - errors are entirely on you to solve a
249:47 - syntax error is a problem that you've
249:49 - got to go back into your code and fix
249:50 - from the get-go you can't just kind of
249:53 - hope that it's going to resolve itself
249:54 - or expect that other parts of your code
249:57 - will catch it for you syntax errors just
249:59 - must be fixed but there's a lot of other
250:01 - types of errors in Python that might be
250:03 - described as runtime errors that happen
250:06 - while your code is running and it's
250:08 - really up to you to write some
250:10 - additional code defensively to detect
250:12 - when those errors happen because you
250:14 - don't necessarily know for instance what
250:16 - input humans are going to type into your
250:18 - program and so you better be ready
250:19 - defensively to accommodate things that
250:22 - they type or even mistype so for
250:24 - instance let's go back over here to vs
250:26 - code and let me propose that we take a
250:29 - look at a new file altogether I'm going
250:31 - to close hello.pi and I'm going to write
250:33 - code of say number dot Pi so let's play
250:36 - around with some numbers in Python and
250:39 - the first thing I'm going to go ahead
250:40 - here and do with number.pi after opening
250:43 - this new tab is I think I'm going to go
250:45 - ahead and print type up a relatively
250:47 - simple program that maybe prompts the
250:49 - user for an integer like X and then just
250:51 - prints out what x is so we're going to
250:53 - start super simple but again in starting
250:55 - simple we'll be able to really see where
250:57 - I've done something wrong well here we
250:59 - go I'm going to go ahead and say a
251:01 - variable called X is going to get
251:02 - assigned the value of the return value
251:06 - of input quote unquote what's X question
251:09 - mark and I'm going to include a space to
251:11 - move the cursor over a little bit and
251:13 - then ultimately I'm going to go ahead
251:14 - and oh wait a minute if I'm wanting to
251:16 - get an INT from the user recall that I
251:19 - need to do something proactively I need
251:20 - to actually convert that input to an
251:23 - integer using the int function in Python
251:26 - so now I'm passing the return value of
251:27 - input as the argument to int and that
251:31 - will store in X ultimately an integer
251:32 - not a string that looks like an integer
251:35 - all right let me go ahead now and just
251:36 - quite simply print out what this is I'm
251:38 - going to go ahead and print out uh quote
251:40 - unquote X is X but I don't want to
251:43 - literally say x is X I want to plug in
251:45 - the value of x so maybe the easiest way
251:47 - to do that is to surround it with curly
251:49 - braces and then if I'm using these curly
251:51 - braces and I want python to interpolate
251:54 - the value of that variable that is
251:56 - substitute what x actually is in between
251:58 - those curly braces recall that I need to
252:00 - use a format string or an F string by
252:02 - prefixing this whole thing with an F now
252:05 - that I've done that let's go ahead and
252:06 - see what happens I'm going to go ahead
252:08 - in my terminal window and run python of
252:10 - number dot Pi I hit enter and so far so
252:13 - good all is well I'm being prompted for
252:15 - X let me go ahead and type in a number
252:17 - like 50. all right that seems to work
252:19 - program seems to be correct
252:22 - or is it
252:24 - what could go wrong in this program even
252:27 - though nothing did just go wrong but if
252:30 - I run it and run it and run it again
252:32 - during the running of my program what
252:34 - could still go wrong especially if I'm
252:37 - not the human interacting with it but
252:39 - some other Human Instead and he
252:41 - volunteers here for this one
252:43 - what could go wrong and in what way is
252:46 - this program not really correct
252:49 - even though at first glance it seems so
252:52 - but uh what is an interface
252:55 - we got in a in a integrated IDE
253:00 - we can't code in an interpreter so I'm
253:03 - not calling an integer I'm still having
253:05 - trouble hearing you but what I think I
253:07 - heard is that if the what the user types
253:09 - in is not in fact an integer I can't
253:10 - just blindly convert it to an INT if I'm
253:14 - not putting too many words into your
253:15 - mouth I think what I should perhaps do
253:17 - here is be a little defensive and let me
253:21 - see if I can't simulate exactly the
253:23 - problem that could go wrong here let me
253:25 - go ahead and run again python of number
253:27 - dot Pi let me try another number and in
253:29 - fact when testing your code generally
253:31 - it's a good idea to test Corner cases
253:33 - maybe numbers that aren't quite as plain
253:35 - as 50 or 49 or 51 let's choose some
253:39 - numbers that might be a little more
253:40 - interesting if only mathematically like
253:42 - zero all right zero seems to work my
253:44 - code still prints out that X is zero
253:46 - what might be another Corner case to
253:47 - consider well let me go ahead and try a
253:49 - negative number that 2 is pretty
253:51 - different in spirit from 50 negative one
253:53 - okay that works too well let me try it
253:55 - one more time I've tried positive
253:57 - numbers negative numbers zero let me try
253:59 - something like a cat so literally cat
254:02 - typing in a string that doesn't even
254:04 - look like a number and yet let's see now
254:07 - what happens when I hit enter
254:08 - all right we'll see now we've got
254:10 - another kind of error it's not a syntax
254:12 - error because I didn't make a
254:14 - typographical mistake I didn't forget
254:15 - some piece of syntax I actually now have
254:19 - a error with one of my values and it's
254:21 - in a value I didn't even anticipate the
254:23 - human me in this case typed it in long
254:25 - after I wrote the code so what does this
254:28 - refer to a value error well let's see
254:30 - what the explanation is invalid literal
254:32 - for INT with base 10 quote unquote cat
254:35 - now this two is a bit of a mouthful and
254:37 - unfortunately in Python in a lot of
254:39 - programming languages the error messages
254:40 - are written for pretty comfortable
254:42 - programmers and of course when you're
254:44 - learning programming for the first time
254:45 - you might not be so comfortable with the
254:47 - programming language let alone the error
254:49 - messages but let's see if we can't glean
254:51 - some insight so invalid literal well
254:54 - again a literal is just something that's
254:55 - been typed in it would seem for INT what
254:58 - is int exactly well int is the function
255:01 - I'm using to convert the user's input to
255:04 - a corresponding integer base 10 that
255:06 - refers to the decimal system which is
255:08 - this the default that that Python's
255:09 - using and it looks like at the end of
255:11 - the day what python really doesn't like
255:13 - is that I passed Cat quote unquote to
255:16 - the int function so how do I go about
255:18 - actually fixing this problem well I
255:21 - could just add instructions in my
255:23 - program maybe I could add a line of
255:25 - print telling the user more explicitly
255:26 - be sure to type in integer or please
255:29 - don't type cat please don't type strings
255:31 - of course the user might still not
255:33 - oblige they might not be reading the
255:34 - instructions so that too is probably not
255:36 - an effective strategy what we really
255:38 - want to do is write our code with error
255:40 - handling in mind we want to write lines
255:42 - of code that not only accomplish the
255:43 - problems we care about but that also
255:45 - handle errors that might unexpectedly
255:48 - happen and in general when programming
255:50 - programming defensively assume that the
255:52 - users aren't going to be paying
255:54 - attention or Worse they're malicious
255:55 - they're trying to crash your program so
255:58 - we want to handle as many errors as we
256:00 - can now how do we go about doing that in
256:02 - Python well it turns out whether you
256:03 - want to catch a value error or other
256:06 - types of errors as well though not
256:08 - syntax error python actually has this
256:10 - keyword called try and it's sort of
256:12 - aptly named if you want to try to do
256:14 - something in Python you can literally
256:16 - use this keyword and you can check
256:18 - whether or not something exceptional
256:21 - something erroneous has happened so
256:23 - using both try and this other keyword
256:25 - except can I go and try to do something
256:28 - except if something goes wrong I can do
256:31 - something else instead so let's consider
256:33 - how can I go about trying to convert the
256:36 - user's input to an INT except if
256:38 - something goes wrong well let me go back
256:39 - to my code here and let me propose that
256:42 - I now modify this example as follows let
256:45 - me go ahead and above my first line of
256:47 - code I literally write try and a colon
256:49 - telling python try to do the following
256:51 - I'm going to go ahead and indent my
256:53 - existing lines of codes here by the same
256:55 - number of spaces four in this case and
256:58 - then I'm going to add one more new line
256:59 - down here that's literally says accept
257:01 - value error and notice it's important
257:04 - that I've capitalized the V and I've
257:06 - capitalized the E these symbols are case
257:08 - sensitive and this is now an opportunity
257:11 - after this colon to tell python what I
257:14 - want to do in exceptional cases when the
257:17 - number or the input from the user is not
257:20 - in fact a number and I'm going to say
257:21 - something plain like print quote unquote
257:23 - X is not an integer I'm at least going
257:26 - to tell the user roughly what the
257:28 - problem actually is so notice another
257:30 - detail the indentation is important
257:32 - because I have try on line one and I've
257:34 - been dented lines two and three those
257:37 - are the two lines of code that I'm
257:38 - trying except if I see a value error
257:40 - line five because it's indented is what
257:43 - is going to get executed in cases of
257:46 - those errors let me go ahead now back to
257:48 - my terminal window and run python of
257:50 - hello of python of number dot Pi enter
257:54 - and let's go ahead and type in 50 again
257:56 - still seems to work and of course I'm
257:58 - trying and succeeding let me go ahead
258:00 - and try once more this time though with
258:02 - the word cat or really anything that's
258:04 - not a decimal number and now you'll see
258:07 - much more cleanly at X is not an integer
258:09 - I'm not seeing some scary error message
258:11 - that I have a user and I'm going to have
258:13 - no idea how to handle now you the
258:15 - programmer have anticipated that
258:16 - something exceptional can happen and
258:18 - you've gone about actually handling the
258:20 - error for the user giving them an
258:23 - appropriate error message instead let me
258:25 - pause here and see are there any
258:27 - questions now on what we've just done by
258:30 - introducing try and accept to handle
258:33 - this value error
258:35 - is value ever the only type of ever you
258:37 - can get or the other types is value
258:40 - error the only thing you can catch there
258:41 - are other errors as well and we'll see a
258:43 - few of them today and there's many many
258:44 - more honestly that if you continue
258:46 - programming and programming in Python
258:47 - you're going to see a lot of them over
258:49 - the the weeks the months the years to
258:51 - come but the technique for handling them
258:53 - is going to be largely the same other
258:55 - questions on try accept or these
258:58 - exceptions more generally uh yes sir
259:01 - actually do use the accept block you
259:04 - need to know the type of error right
259:05 - like here you knew it was a value Adder
259:07 - 40 what if you can't anticipate this
259:09 - particular type of theater a really good
259:12 - question so I'm being very good about
259:14 - catching so to speak the very error that
259:18 - I know might happen I don't know when it
259:20 - might happen because it's going to
259:21 - depend on the user but I know what kind
259:22 - of error will happen from the int
259:24 - function there is a way in Python where
259:27 - you can say except if anything goes
259:29 - wrong and you can literally omit value
259:31 - error and just catch everything the
259:33 - problem with that is that it's sometimes
259:35 - times hides other bugs in your code
259:37 - because you don't necessarily know
259:39 - what's going wrong and if you don't
259:40 - necessarily know what's going wrong how
259:42 - can you possibly handle it correctly so
259:44 - bad practice and it put another way it's
259:46 - lazy to do that to just say catch
259:48 - everything and I'll deal with it here so
259:50 - a much better practice would be to
259:52 - figure out what kind of Errors could
259:54 - happen and include mention of them
259:56 - explicitly as I've done now with that
259:59 - said if you read Python's official
260:00 - documentation is you'll eventually
260:02 - invariably do it is not great about
260:04 - telling you proactively what kinds of
260:07 - Errors can be raised in this way so it's
260:11 - a bit of contradictory advice you should
260:13 - do it this way but it's not always
260:15 - obvious what you should be checking for
260:17 - but you get better at it with practice
260:19 - and some of the times the documentation
260:20 - does spell out what could go wrong let
260:23 - me turn our attention now back to this
260:24 - and point out that even though this is
260:26 - better code it is more correct in the
260:29 - sense that I'm not just leaving it to
260:31 - the user to see some really ugly default
260:33 - python error message that most people
260:35 - are going to have no idea what to do
260:36 - with I'm at least handling it more
260:38 - elegantly and I'm printing out X is not
260:41 - an integer so it's at least more
260:42 - instructive but this isn't necessarily
260:44 - the best way to implement this code y
260:46 - well here too I'm actually still being a
260:48 - little lazy so notice that I'm trying to
260:51 - do not one line of code but two lines of
260:53 - code and this isn't a huge deal because
260:56 - we're only talking about two lines of
260:57 - code but in the interest of preaching
261:00 - best practices you should really only be
261:02 - trying to do the one or very few lines
261:06 - of code that can actually raise an
261:08 - exception that can actually fail in some
261:11 - way I am pretty sure that calling print
261:14 - here is not going to raise a value error
261:16 - whether X is an INT or a string or a
261:19 - float or anything else the format string
261:22 - feature of python is going to handle
261:23 - printing it just fine so really what I'm
261:26 - going to do is this I'm going to move
261:28 - this line three down to the bottom of my
261:31 - code I no longer need to indent it I'm
261:33 - just going to execute it at the bottom
261:34 - of my file L here
261:36 - unfortunately by doing this I've done a
261:39 - good thing by now only trying to do the
261:41 - minimal amount of work necessary that
261:43 - might raise the exception of value error
261:46 - but I fear I've introduced a new mistake
261:48 - well let's see what is now incorrect let
261:51 - me go ahead and again run python of
261:53 - number.pi enter let me go ahead and do
261:55 - it correctly with 50 and all seems to be
261:58 - well but again let's try those Corner
261:59 - cases the zeros the negative numbers or
262:01 - in this case the cat let me go ahead and
262:03 - type in cat again enter now I have a
262:07 - name error so now it's yet another type
262:09 - of error in my code that I've introduced
262:11 - here and what is this name error mean
262:13 - well just as a value error refers to
262:15 - that the value of some variable the
262:17 - value that someone has typed in is
262:18 - incorrect name error tends to refer to
262:21 - your code like you're doing something
262:23 - with the name of a variable that you
262:25 - shouldn't and why might that be well let
262:27 - me turn our attention back to the code
262:29 - here and consider what is it complaining
262:32 - about well the name error is what I see
262:34 - down here and it's telling me name quote
262:36 - unquote X is not defined and notice if I
262:39 - look further here it is mentioning line
262:41 - six so I know the problem is with my
262:44 - code on line six and that worked a
262:47 - moment ago and I'm defining X on line
262:51 - two but let me ask the group here why
262:54 - does X not in fact exist on line six why
262:59 - is it not defined even though I'm pretty
263:01 - sure I was intending to Define it on
263:04 - line two
263:05 - maybe the scope of the variable is
263:08 - between the try block so good
263:11 - terminology scope refers to the portion
263:14 - of code in which a variable exists that
263:16 - too though isn't quite right in Python
263:18 - that would be true in CC plus plus and
263:20 - Java where indentation or curly braces
263:22 - tend to define the scope of a variable
263:25 - but again here in general and this
263:27 - worked a moment ago X exists once it's
263:30 - defined on line two because remember I
263:32 - printed out X is 50 a little bit ago
263:34 - let's try one more
263:36 - hypothesis here one more hand Y is X
263:41 - somehow still not defined
263:43 - um yeah so is it because it's local
263:45 - variable meaning that like it doesn't
263:47 - Define outside of scope is like what
263:50 - people have mentioned it's it's asked it
263:53 - prompts the input in try right but
263:55 - outside of it is undefined so still good
263:58 - instincts and good terminology too
263:59 - there's this notion of local variables
264:01 - which tend to exist inside of functions
264:03 - for instance Global variables which can
264:05 - tend to exist in entire files in this
264:07 - case too though that's not quite the
264:09 - case What's Happening Here boils down to
264:12 - order of operations let me come back to
264:13 - the code here and recall that anytime
264:15 - we've discussed the assignment operator
264:17 - the single equal sign that copies a
264:19 - value from the right to the left but
264:21 - consider for a moment at what point
264:23 - something is going wrong well the input
264:25 - function is probably working just fine
264:27 - because we've used that a lot now to get
264:29 - users input it always returns a string
264:32 - or a stir in Python but what could be
264:35 - going wrong well if I'm passing that
264:37 - string to the int function as its
264:41 - argument it's probably the int function
264:44 - that's airing and indeed if you think
264:46 - back earlier when we had the value error
264:47 - it was in fact the int function that did
264:49 - not lie quote unquote cat as input so
264:52 - this is all to say that this portion of
264:55 - my code highlighted now to the right of
264:57 - the equal sign that's the code that's
264:59 - creating a problem that's the code that
265:01 - was creating a value error and in this
265:04 - case we're catching the value error but
265:07 - because the value error is happening on
265:09 - the right of the equal sign there's no
265:12 - value being copied to the left the error
265:14 - is interrupting that whole process so
265:16 - even though we see x equals dot dot on
265:19 - line two the portion of that line to the
265:22 - left of the equal sign isn't getting
265:23 - evaluated ultimately because the value
265:26 - error is happening too soon and so when
265:28 - we finally get down to line six even
265:31 - though it looked like I was defining on
265:33 - line two and I would have defined X
265:34 - online 2 if all had gone well we didn't
265:36 - get to the part where the value is
265:38 - copied from right to left because the
265:39 - value error happened first so this code
265:42 - is just incorrect now so how do I go
265:45 - about solving something like this well
265:47 - it turns out that there's another
265:49 - feature of the try and accept syntax
265:52 - that python supports which is that it
265:54 - also supports the keyword else now we've
265:56 - seen else before if you think back to
265:58 - our discussion of conditionals we saw if
266:00 - we saw L if we saw else which was kind
266:04 - of this catch-all what you should do in
266:06 - the event that nothing else is relevant
266:08 - that's kind of the same intuition here
266:10 - for the try accept feature of python
266:12 - what you can do is this you can try to
266:16 - do the following as I've done except if
266:18 - this goes wrong but if nothing goes
266:20 - wrong else go ahead and do this so this
266:24 - is one way I can solve this same problem
266:26 - now no matter what now python is going
266:29 - to try to execute line two if something
266:31 - goes wrong it's going to execute slides
266:33 - three and four to handle that value
266:35 - error however if you try and this code
266:39 - succeeds then there is no exception to
266:42 - handle so you're then going to execute
266:44 - this line here so it's a little
266:46 - confusing perhaps in that we're now
266:47 - using else both for conditionals if L if
266:50 - L if L if else and we're also using else
266:53 - with these try accept blocks but that's
266:56 - okay that's part of the language that's
266:57 - one of the features so now if I rerun
267:00 - this code in my terminal window python
267:02 - of number dot Pi let's do something
267:04 - correct like 50 I see that X is 50. so
267:09 - line one is executed we're trying to do
267:11 - the following line two is executed
267:13 - because the conversion happened and
267:14 - successfully and the number 50 gets
267:16 - copied from right to left the exception
267:19 - does not happen so we ignore lines three
267:21 - and four we jump immediately to line
267:22 - five and six which prints out the result
267:25 - by contrast though let's do this one
267:28 - last time python of number dot Pi let's
267:30 - type in cat or again any other word and
267:32 - hit enter now we don't see what x is
267:35 - rather we see quote unquote X is not an
267:38 - integer which is what's being handled in
267:41 - my accept Clause all right let me pause
267:43 - here because that's a lot of new syntax
267:45 - and see here if there's any questions on
267:48 - try on accept on else name error or
267:52 - value error can you please repeat try
267:55 - function repeat the name error what's
267:57 - the problem with the name error yes yes
267:59 - yeah so let's let's just rewind a couple
268:01 - of lines here before I fix this problem
268:04 - by now getting rid of the else a moment
268:06 - ago we had code that looks like this
268:09 - whereby I was getting a name error
268:11 - python of number dot Pi enter typing in
268:14 - cat at that looked like this where name
268:16 - X is not defined and the problem was on
268:19 - line six according to this output in
268:21 - Python well let's think about this now
268:23 - deductively let's try a different
268:24 - approach on line six I'm seeing an error
268:27 - that name X is not defined okay Python's
268:29 - already telling me X does not exist at
268:31 - that point so how could that possibly be
268:33 - well where should X be defined well
268:36 - presumably X is defined on line two up
268:39 - here so what could go wrong well if the
268:42 - user has inputted something that doesn't
268:44 - look like a number like the word cat
268:46 - passing cat the return value of input as
268:50 - the argument to int to convert the word
268:54 - to an INT makes no sense you can't
268:56 - convert a cat c-a-t to an integer at all
268:59 - so the int function is raising a value
269:03 - error at that point and the error is
269:06 - being handled with this code here but
269:09 - notice this line 6 is not indented it's
269:12 - left aligned with the rest of my code
269:14 - which means no matter what line six is
269:17 - going to execute it's going to execute
269:19 - whether I typed in 50 or I typed in cat
269:22 - but if I typed in cat again X never gets
269:24 - a value so it's not defined here on line
269:27 - six so when I introduce finally the else
269:30 - statement that makes sure that these
269:32 - things are mutually exclusive I only
269:34 - execute the else if I tried and
269:37 - succeeded up above
269:40 - well let me propose that we refine this
269:43 - just a little bit further as well and
269:45 - consider how we might improve this
269:47 - example a little bit more it's a little
269:50 - it's a little unfriendly of me to be
269:53 - rejecting the user's input after they
269:56 - fail to provide an integer and just
269:57 - quitting the program really right it'd
269:59 - be more user friendly if I just prompt
270:01 - or reprompt the user again and again and
270:04 - in the chat if you could what's the
270:07 - feature of python that you can use if
270:09 - you want to do something again and again
270:11 - and again until such time as the user
270:13 - cooperates and gives you what you're
270:15 - looking for like a number so yeah loop
270:18 - loop loop so a loop is something that
270:20 - happens again and again and again and
270:22 - maybe we can use that same mechanism a
270:24 - loop in order to prompt the user for x
270:27 - and if they don't give us a number
270:28 - prompt them again and if they don't
270:30 - prompt them again and again and again we
270:32 - don't need to just quit out of the
270:33 - program so quickly so let me propose
270:35 - this let me propose here that I improve
270:38 - this code by deliberately doing this let
270:41 - me induce a infinite loop at the very
270:44 - top of my code with while true recall
270:47 - that the while keyword induces a loop a
270:49 - cycle that behaves like this and it asks
270:51 - a question a Boolean expression that
270:53 - needs to evaluate either to true or
270:54 - false well if I want this thing to Loop
270:56 - Forever at least initially we'll just
270:59 - say while true because true is true so
271:01 - this has the effect of doing something
271:03 - no matter what forever unless we break
271:05 - out of it early now I'm going to go
271:07 - ahead and do this I'm going to go ahead
271:09 - and move my try accept code indented
271:13 - underneath this Loop so that I'm trying
271:15 - to get an X if I have a value error
271:18 - instead I print that X is not an integer
271:21 - but this time what do I want to do if
271:24 - the user does try and succeed in giving
271:27 - me a number well I can do this I can
271:30 - just break out of my code here and down
271:33 - here now I can use that same line of
271:35 - code from before an F string that says X
271:37 - is and then in curly braces X again
271:41 - so what's going on here I think this
271:43 - code now because I've added the loop is
271:46 - going to have the effect of trying at
271:48 - least once maybe a second time maybe a
271:50 - third time maybe 500 times until the
271:53 - user finally gives me what I want which
271:55 - is an integer and once they do once
271:58 - there's no value error happening then I
272:00 - break out of the loop and line 9
272:02 - executes as I would hope so let me go
272:05 - ahead and try executing this version
272:06 - python of number dot Pi enter what's X
272:09 - let me go ahead and type in the easy
272:11 - thing first 50. X is 50. what just
272:14 - happened in terms of the control flow of
272:16 - this program the flow of my logic well I
272:19 - first found myself on line one inside of
272:21 - a loop hopefully I'll get out of this
272:22 - Loop what did I then do on lines two and
272:25 - three I tried to get input from the user
272:28 - and convert it to an INT well I was a
272:30 - nice guy this time and I typed in 50
272:31 - which looks like and is a number so the
272:33 - int function converted it just fine and
272:35 - stored it from right to left in X except
272:38 - value error there is no value error
272:40 - because if I typed in a number there's
272:42 - nothing exceptional happening this is a
272:44 - boring good execution of my program so
272:47 - what happens I break out of the loop so
272:50 - again the else Clause is associated with
272:52 - the try not with the accept and once I'm
272:55 - out of the loop of course I'm just
272:56 - printing out what x is well let's try
272:58 - the other scenario that might happen
273:00 - python of number.pi enter what's X let's
273:03 - try cat or any other word enter
273:06 - ah this is now a new feature I'm being
273:10 - informed what I did wrong X is not an
273:12 - integer so I'm getting some useful user
273:14 - feedback but notice again I'm prompted
273:16 - what's X well let me try typing in dog X
273:20 - is not an integer what's X let me try
273:22 - bird enter X is not an integer what's X
273:25 - and suffice it to say this will happen
273:27 - now forever if I'm in an infinite Loop
273:30 - until I try and succeed at which point I
273:33 - break out so let's try again 50 enter
273:35 - now I'm out of the loop and I'm printing
273:37 - out what x actually is
273:40 - all right let me pause here and see if
273:42 - there are any questions the logic is
273:45 - almost the same but what is different
273:46 - now is I'm in a loop and I'm using the
273:49 - keyword break in Python to deliberately
273:51 - break out of the loop when I'm ready to
273:54 - once the user has cooperated we really
273:57 - need to break can't we just print
274:00 - or what keeps us from just printing a
274:04 - good question so let me try that
274:07 - well let's see what happens if I do that
274:09 - let me move this print line at the end
274:11 - into my Loop here thereby shortening the
274:14 - program and in general that's been a
274:15 - good thing python of number dot Pi enter
274:18 - let me go ahead and type in 50. okay X
274:21 - is 50. what's x uh okay maybe it's 49 x
274:24 - is 49. uh okay maybe 48. unfortunately I
274:28 - think you're you're laughing you see it
274:29 - I never break out of the loop which
274:31 - maybe that's a feature maybe you want
274:32 - this to be your program but I didn't I'd
274:34 - eventually like this game to stop so I
274:36 - need to break out in that way but I can
274:38 - do it a little differently and let me
274:40 - propose that we modify this a little bit
274:43 - but first any other questions on this
274:45 - syntax here let me rewind to
274:48 - the prior version
274:51 - hi uh can I use break our except
274:56 - else for example in another uh print
275:00 - print in the else you can use prints
275:03 - together with break or something like
275:04 - this you so you can use break inside of
275:07 - Loops to break out of loops and you can
275:09 - use it inside of a conditional like an
275:12 - if an L if or an else you can do it
275:14 - inside of a try except else statement
275:16 - two anytime you're in a loop that you
275:18 - want to break out of you can use this
275:20 - keyword break I'm using it in the
275:22 - context of exceptions but it's not
275:23 - restricted to that and let me show you
275:25 - too it doesn't even have to be in the
275:26 - else if I wanted to I could actually do
275:29 - this I could get rid of my else
275:32 - and I could go back to line three add
275:34 - another line that's indented line four
275:36 - and break out here now why is this
275:40 - logically okay well consider what I'm
275:43 - now trying to do I'm trying to execute
275:46 - line three and converting the user's
275:48 - input to an INT and I'm trying to store
275:50 - the result from right to left in X if
275:53 - something goes wrong the code we've
275:55 - already seen is immediately gonna jump
275:57 - to line five and then six to handle the
276:00 - exception but if nothing goes wrong my
276:03 - code presumably should just keep on
276:05 - executing line by line so I could
276:08 - technically logically put the break here
276:10 - and watch what happens when I run this
276:11 - version python of number dot Pi 50 enter
276:15 - it worked I broke out of the loop now
276:18 - which way is better honestly I think it
276:21 - could go either way at this point this
276:22 - program's so relatively short that even
276:25 - though I'm trying to do two things now
276:27 - one of which the break is not going to
276:29 - fail like you either break or you don't
276:31 - there's no p piece of data from the user
276:33 - that's going to influence that we don't
276:34 - strictly need to have those two lines of
276:37 - code there but it's only two lines so I
276:38 - think it's okay and if you recall our
276:40 - discussion in the past not just of
276:41 - correctness does the code work as it
276:43 - should but design I think you could
276:45 - argue it either way if you prefer the
276:47 - readability of this and the fact that
276:49 - you don't have an else that's fine if
276:51 - though you prefer to minimize just how
276:53 - many lines of code you're trying to
276:55 - execute in case something goes wrong the
276:57 - else is a reasonable approach too well
277:00 - allow me to propose too now that we
277:02 - refine this further I think we're at the
277:03 - point where it's pretty darn correct but
277:06 - suppose now that I find myself today and
277:09 - tomorrow trying to get numbers from the
277:12 - user quite a bit it would be nice as
277:13 - we've seen to maybe just invent my own
277:15 - function get int to get an integer from
277:18 - the user both today and tomorrow and
277:19 - Beyond and heck maybe I can even share
277:21 - that function with other people if they
277:23 - want to write programs they get integers
277:25 - from users so how might I go about doing
277:27 - this well let me go ahead and propose
277:29 - that we do this let me get rid of the
277:30 - print line but keep most of my Loop here
277:32 - let me Define a function called get int
277:35 - that takes no arguments for now and I'm
277:38 - going to go ahead and indent all of the
277:39 - code I already wrote underneath get int
277:41 - so now I have a function called get int
277:44 - that tries to do the following try to
277:48 - get an in from the user if something
277:49 - goes wrong and there's a value error
277:51 - yell at them with X is not an integer
277:53 - else break but it's not just breaking
277:56 - that I want to do here now that I'm in a
277:58 - function recall our discussion of return
278:01 - values if you're inventing your own
278:03 - function whose purpose in life isn't
278:05 - just to print something on the screen
278:06 - like a side effect but is to hand back a
278:09 - value to hand you back a value like on
278:12 - that same Post-It note from our
278:13 - discussion of functions well you need to
278:15 - return X explicitly how do I now use
278:18 - this function well as soon as we start
278:20 - making our own functions it tends to be
278:22 - convenient to Define our own main
278:23 - function as well that's the main part of
278:25 - our program and I'm going to keep this
278:26 - simple I'm now going to say x equals get
278:29 - int and then on the next line I'm going
278:31 - to do that print from before quote
278:33 - unquote X is in curly braces X and at
278:37 - the very bottom of my program recall I'm
278:39 - going to call Main so that no matter
278:40 - what I'm invoking my main function after
278:43 - everything's been defined well let's see
278:45 - how this works let me go ahead and run
278:46 - python
278:48 - of number.pi enter let's type in 50 and
278:52 - it seems to work as before let's go
278:54 - ahead and run it again typing in cat c a
278:56 - t this time X is not an integer and I'm
278:58 - being prompted dog and I'm being
279:00 - prompted bird and I'm being prompted
279:02 - fine fine 50 that's an INT and so it is
279:06 - printed so what's worth noting here well
279:09 - I'm manifesting a couple of good
279:10 - properties here one I've kind of
279:12 - abstracted away this notion of getting
279:14 - an integer and even though I just
279:16 - artificially hit enter a whole bunch of
279:18 - times just to hide that function for now
279:20 - it needs to be there but we don't need
279:21 - to see it at this point notice that now
279:23 - this entire program really boils down to
279:25 - just these three lines of code now why
279:28 - because I've abstracted away that whole
279:30 - process of getting an INT from the user
279:32 - into this new function of my own called
279:34 - get int but can I improve upon this well
279:36 - let me go ahead and undo all of those
279:38 - blank lines and pull this up just so we
279:40 - can see more on the screen at once can I
279:43 - tighten up my implementation of get int
279:45 - it is correct I claim this is correct
279:47 - it's handling errors and it's returning
279:49 - X but I don't strictly speaking need to
279:51 - write the code as long what else could I
279:54 - do well let me propose that if all
279:56 - you're doing on this line 13 is breaking
279:58 - and then immediately after that per the
280:01 - indentation you're executing return X on
280:03 - line 14. why are you wasting everyone's
280:06 - time once you know you're ready to
280:07 - return the value you could just return X
280:10 - and so in my else I could break out and
280:13 - return a value so here too return is
280:16 - used to return values from functions
280:18 - break is used to break out of Loops but
280:22 - it turns out that return is sort of
280:24 - stronger than break it will not only
280:26 - break you out of a loop it will also
280:28 - return a value for you so it's doing two
280:31 - things for once if you will
280:33 - but can I make this even more compact if
280:38 - if my goal is to just tighten the code
280:41 - up even though it's already correct can
280:42 - anyone think of a further refinement
280:44 - whether you've programmed in Python
280:46 - before or not can I shorten this
280:49 - implementation further just a little bit
280:51 - if only to decrease the probability that
280:53 - I've made a mistake by having fewer
280:55 - lines and just make it a little easier
280:56 - to read because it's shorter
280:59 - any suggestions for tightening up my
281:01 - implementation of get int you can just
281:04 - return the value on the drive function
281:05 - uh when you're trying uh you take the
281:10 - input X and then return X good we can
281:13 - just return x a little higher up and let
281:15 - me correct folks as we go it's not a try
281:17 - function it would be a try statement
281:19 - technically a function typically has a
281:21 - parenthesis and another one in this case
281:22 - it's just a statement so but we can do
281:24 - exactly that I don't technically need
281:26 - the else if I really want I could do
281:29 - this right after line nine I could
281:31 - return X here or recall our discussion
281:34 - of defining variables unnecessarily
281:36 - sometimes like why Define a variable
281:38 - here if you're immediately going to use
281:40 - it here and then never again so we could
281:42 - avoid a new line here and I could avoid
281:45 - even defining X explicitly I could just
281:48 - say something like this I could return
281:50 - int input quote unquote what's X I can
281:53 - do it all at once now which is better I
281:56 - don't know I mean again this is where
281:58 - reasonable people might disagree I'd
282:00 - argue that on the one hand we're
282:02 - tightening up the code we're using fewer
282:04 - lines it's easier to read lower
282:06 - probability that I've made a mistake on
282:08 - the other hand it's a little more
282:09 - complicated to understand perhaps it's a
282:12 - little less obvious where I'm returning
282:13 - from so I think arguments can be made
282:15 - either way at the end of the day what's
282:17 - important is that you've done this
282:18 - consciously you've made a decision to do
282:20 - it this way or this way and you can
282:22 - justify it in your mind not that your
282:24 - answer is it worked so I left it alone
282:26 - like have a good reason come up with a
282:28 - good reason and that will come with
282:30 - experience and practice well let me
282:32 - propose to you that we make one other
282:34 - refinement here suppose that you're
282:37 - finding your programs to be a little
282:38 - noisy and it's a little obnoxious that
282:40 - you keep telling the user X is not an
282:42 - integer X is not an integer X is not an
282:44 - integer what if you want to make things
282:45 - a little gentler and just prompt the
282:49 - user again with the same words what's x
282:51 - what is X what's X again and again well
282:54 - you can do that as well and it turns out
282:56 - that if you want to handle an exception
282:59 - in Python but you want to pass on doing
283:02 - anything with it so you want to catch it
283:04 - but you essentially want to ignore it
283:06 - you don't want to print anything you
283:08 - don't want to quit the program you just
283:10 - want to silently ignore it like if
283:12 - you're talking in a room full of people
283:13 - and you're it's your turn to talk and
283:15 - you're just like pass they're still
283:17 - calling on you but you're not doing or
283:19 - saying anything more well we can add
283:21 - this keyword to our code here let me go
283:23 - back to my program here and instead of
283:26 - printing out again and again X is not an
283:28 - integer I could just do this I could
283:30 - pass on handling the error further I'm
283:33 - still catching it so the user is not
283:35 - going to see a scary message even
283:36 - mentioning value error my code is
283:38 - catching it but I'm passing on saying
283:41 - anything about it I'm going to stay in
283:43 - the loop I'm going to stay in the loop
283:44 - and keep prompting and reprompting the
283:46 - user so now the effect looks a little
283:47 - something like this python of number dot
283:50 - Pi let's type in cat
283:52 - what's X again let's type in dog what's
283:54 - X again type in bird so it's just a
283:57 - little maybe more user friendly and that
283:59 - you're just reminding the user what you
284:00 - want maybe it's worse maybe it would be
284:02 - helpful to tell the user why you're
284:04 - prompting them again and again it's not
284:06 - obvious so it could go both ways but
284:08 - again it's just another mechanism now
284:10 - for handling these errors we use the
284:13 - accept keyword to catch a specific error
284:15 - but we don't have to handle it more than
284:17 - that we can just pass on doing something
284:19 - further let me pause here and see if
284:21 - there's any questions now on try except
284:24 - else or pass
284:27 - okay yeah no I was just kind of curious
284:30 - I guess about uh the idea of when you
284:32 - were indenting with uh the get in
284:35 - function for example
284:37 - um because I'm noticing you know
284:38 - obviously going through it with the
284:40 - whole logic and breakdown of the entire
284:41 - uh the entire function you know while
284:43 - true do this but I'm just kind of
284:45 - curious on the library with the
284:46 - indentations for the uh code more yeah
284:49 - so the indentation is deliberate
284:51 - logically some languages don't require
284:53 - as rigorous indentation you can use
284:55 - curly braces or other symbology to make
284:58 - clear what is associated with what in
285:00 - general anytime you indent something in
285:02 - Python on this line so rather anytime
285:05 - you write a code a line of code in
285:07 - Python that's here and the lines below
285:09 - it are somehow indented that means that
285:11 - those lines are somehow associated with
285:13 - that first line and presumably those
285:15 - indented lines should only be executed
285:18 - if the first line told the uh told the
285:22 - computer to do so so concretely what
285:24 - does this mean on line six here we're
285:26 - defining a function called get in that
285:28 - takes no arguments colon everything
285:31 - that's indented by at least four spaces
285:34 - Hereafter is part of that function why
285:36 - that's just the design of the Python
285:39 - language frankly I think the designers
285:40 - got tired of seeing really ugly code in
285:42 - languages like C and C plus and Java
285:45 - that don't necessarily enforce
285:48 - indentation to this extent so now it's
285:51 - baked into the language and my
285:53 - chronology might be a little off there
285:54 - but there's been many languages that are
285:56 - looser than python when it comes to
285:57 - indentation the indentation is
286:00 - Meaningful on line seven two notice that
286:02 - because the while true is indented by
286:04 - four spaces that just means it's part of
286:06 - the get-in function but notice below the
286:08 - while true statement there's eight
286:10 - there's twelve there's eight there's 12
286:12 - spaces here and I'm just quickly
286:14 - counting the dots that means that all of
286:16 - the lines I've just highlighted are
286:17 - inside of that while loop while true
286:20 - means to execute lines 8 through 11
286:22 - potentially again and again and again
286:24 - and now lastly on line eight
286:27 - because we have tried and indented below
286:30 - it is line nine that just means that
286:32 - what you should try is what's on my nine
286:34 - and similarly on line 10 below it we
286:37 - have indented line 11 you should only
286:39 - pass when there is an exception of a
286:42 - value error so the indentation just
286:45 - means what is associated with what and
286:47 - once you get comfortable with that
286:48 - you'll see that it helps the indentation
286:51 - alone helps explain the logic of your
286:53 - program and it has a wonderful side
286:55 - effect that for yourself the next
286:57 - morning for your colleagues your family
286:58 - your friends your teachers your code is
287:01 - much more readable as a result it's not
287:03 - one big mess of a blob of text other
287:06 - questions now on try except else or pass
287:09 - yeah thanks
287:11 - um two question uh question one
287:14 - um uh once you say pass can the caller
287:18 - still
287:19 - um learn anything about this error
287:22 - um through a system variable or whatever
287:24 - and question two problem set zero
287:27 - referenced some string Methods including
287:30 - is numeric is it any different to
287:35 - um go via istomeric here a good question
287:38 - so on the first question if I'm handling
287:40 - the error in this way the caller is not
287:41 - going to know anything about it that's
287:43 - the point of my handling it so that main
287:45 - or other callers don't know that
287:47 - anything technically went wrong on the
287:49 - second question is numeric is another
287:51 - function that you can call that can look
287:53 - at a string and determine is this in
287:55 - fact a number I could use a mechanism
287:57 - like that I could use a conditional if
288:00 - this looks like a number then pass it to
288:03 - the int function and go ahead and
288:04 - convert it to an integer that's totally
288:06 - fine I would generally say that the
288:09 - pythonic way of doing things is often
288:12 - for better for worse to try things hope
288:15 - they work but if they don't handle the
288:17 - exception so other languages are more in
288:20 - favor of checking if if if if L if else
288:23 - in all of these conditionals python
288:26 - tends to be a little more of the mindset
288:28 - eh try it but just make sure you're
288:30 - handling the error so this would be the
288:32 - pythonic way of doing it your way though
288:34 - checking with the conditional is it a
288:35 - number first is totally reasonable too
288:37 - if you want to go that way well let me
288:40 - propose some final refinements to this
288:42 - program that really just kind of tighten
288:44 - things up one additional step to improve
288:47 - the implementation of this get in
288:49 - function let me propose that we not hard
288:52 - code so to speak that is type manually X
288:54 - all over the place let's make this
288:56 - function get into a little more reusable
288:58 - right now notice that I'm just kind of
289:01 - using the honor System that well main is
289:04 - defining a variable called X and get int
289:07 - is asking for a variable called X but it
289:10 - would be nice if the caller main doesn't
289:13 - have to know what the call Lee is naming
289:15 - its variables and vice versa so caller
289:17 - to call a function means to use it the
289:20 - caller is the function that's using it
289:21 - the call E is just the function being
289:23 - called it would be nice if I'm not just
289:26 - hoping that X is the same in both places
289:28 - so let me propose this let me propose
289:31 - that we actually add
289:33 - a parameter to get int like this what's
289:37 - X that is to say if Maine wants to use
289:40 - the get in function well then main
289:42 - should probably tell the get in function
289:44 - what prompt to show the user just like
289:46 - the input function recall that comes
289:48 - with python it's up to you to pass in a
289:51 - prompt that the user then sees when the
289:53 - human is asked for input so how do I
289:56 - make this work here I can go down to my
289:58 - definition of get int and I can say all
290:00 - right get into is going to take a
290:02 - parameter now called prompt I could call
290:04 - it anything I want but prompt in English
290:06 - is pretty self-explanatory it means what
290:08 - do you want the message the user will
290:09 - see and now down here when I actually
290:11 - use input I don't have to presumptuously
290:14 - say what's X because what if the program
290:16 - the caller wants to ask for y or Z or
290:19 - some other variable I can just pass to
290:22 - input whatever prompt the caller has
290:25 - provided so now I'm making more reusable
290:27 - code it still works just the same I
290:30 - haven't changed the functionality per se
290:31 - but now it's a little more dynamic
290:33 - because now get int doesn't have to know
290:36 - or care what variables being asked for
290:38 - what's being asked for it just needs to
290:40 - know what prompt it should show to the
290:42 - user so if I now run this program down
290:45 - here again prompt number dot Pi enter
290:47 - what's x 50 still seems to work let's
290:50 - run it again let's type in cat it still
290:52 - seems to work and if I type in cat dog
290:54 - bird or anything else it will keep
290:56 - prompting me with that same prompt
290:58 - making this code therefore all the more
291:00 - usable now it turns out too you can even
291:03 - raise exceptions yourself using Python's
291:06 - raise keyword but more on that another
291:08 - time so in the coming days the coming
291:10 - weeks the coming months as you write
291:12 - more code in Python you'll see that
291:14 - errors are inevitable sometimes there's
291:16 - syntax errors which you gotta just fix
291:18 - if you even want to run your program at
291:20 - all but they could be name errors for
291:22 - instance variables that you meant to
291:23 - Define but somehow didn't value errors
291:25 - where maybe the user didn't cooperate
291:27 - and provided you with something that you
291:29 - weren't expecting or a whole list of
291:31 - other possible errors or except options
291:34 - but now hopefully you know how you can
291:35 - handle these errors and respond to them
291:37 - in any way you like this then was our
291:40 - look at exceptions and we'll see you
291:41 - next time
291:49 - [Music]
292:01 - foreign
292:04 - [Music]
292:10 - this is cs50's Introduction to
292:12 - programming with python my name is David
292:14 - Malin and this is our week on libraries
292:16 - so libraries are generally files of code
292:20 - that other people have written that you
292:21 - can use in your own programs or a
292:24 - libraries code that you've written that
292:25 - you can use in your own program but
292:27 - maybe not just this program but another
292:28 - and another as well so python supports
292:31 - exactly this idea this ability to share
292:34 - code with others share code across your
292:36 - own projects and it does so by way of
292:38 - what it calls module a module in Python
292:40 - is just a library that typically has one
292:43 - or more functions or other features
292:45 - built into it generally the purpose of a
292:48 - library or a module specifically is to
292:50 - encourage reusability of code if you
292:52 - find yourself using the same types of
292:54 - functions again and again the same
292:56 - functionality if you find yourself
292:58 - copying and pasting from an old project
293:00 - into your new project odds are there's
293:03 - an opportunity there to factor out that
293:05 - code that you keep copying and pasting
293:07 - that you keep reusing and put it in into
293:09 - a library that you can then load into
293:12 - your programs moving forward so as to
293:14 - not just copy and paste it and have all
293:16 - these different copies all over so what
293:18 - are some of the modules or libraries
293:20 - that python comes with well python comes
293:22 - with a random Library literally which is
293:24 - to say that when you install the python
293:26 - interpreter on your Mac or PC or
293:29 - somewhere in the cloud not only do you
293:30 - get python you get a whole bunch of
293:32 - modules as well now these modules
293:34 - provide you with functions that you
293:36 - don't have access to just by default
293:37 - like you do print and input print and
293:40 - input and other such functions just work
293:42 - in Python but sometimes functions are
293:45 - tucked away in these modules so you have
293:47 - to be more deliberate about loading them
293:49 - into the computer's memory so somewhere
293:52 - on the computer's hard drive once you've
293:53 - installed python there is also it turns
293:55 - out a file probably called random dot Pi
293:58 - that someone else wrote probably long
294:01 - ago but that you have access to and in
294:03 - that random dot Pi file there's probably
294:05 - one or more functions that you yourself
294:06 - can use in order to do things things
294:09 - randomly that is to say how could you
294:12 - flip a coin in a program in Python how
294:14 - could you pick a a random number between
294:16 - 1 and 10 in Python well you need a bit
294:19 - of Randomness and while you could figure
294:21 - out mathematically how to write
294:23 - functions like that yourself it's a lot
294:25 - easier to stand on the shoulders of
294:27 - others who've already solved that
294:28 - problem for you so you can focus on the
294:30 - problem that you yourself want to solve
294:33 - so for documentation on most any python
294:36 - module you go to the official python
294:37 - docs and you go to a URL like this where
294:40 - the documentation for that specific
294:41 - module lives and within the
294:43 - documentation you'll see a list of the
294:45 - functions or other functionality that
294:47 - some module provides but how do you go
294:49 - about loading a module into your own
294:52 - program so that you can use the
294:54 - functions in that module well we need a
294:56 - new keyword in Python and namely it's
294:58 - import the import keyword in Python
295:01 - allows you to import the contents of the
295:05 - functions from some module in Python
295:08 - well how might I go about using this in
295:11 - practice well let me propose that there
295:13 - exists in that random module this
295:15 - function among others so I have copied
295:17 - and pasted from the documentation this
295:20 - summary of a function called choice now
295:23 - the function exists in the random module
295:26 - so to speak not a random module the
295:29 - random module and so generally the
295:31 - documentation describes it fully like
295:33 - this random.choice is how you would
295:36 - technically call this function though
295:37 - we'll see alternatives to that in
295:39 - parentheses there is a parameter called
295:42 - seq for sequence and sequence generally
295:45 - means a list or something that is list
295:47 - like if you have a list of numbers or
295:49 - strings or anything else and the
295:50 - documentation elaborates well how can I
295:53 - go about using this function to solve
295:54 - perhaps a familiar problem well let me
295:56 - go ahead and open up vs code here and
295:58 - let me propose that we Implement a
296:00 - program that simulates flipping a coin a
296:03 - coin that in the US heads heads or tails
296:06 - the idea of which is to pick a decision
296:09 - with 50 50 probability 50 probability of
296:12 - heads 50 probability of Tails or you can
296:15 - use some other mechanism like that well
296:17 - let me go ahead and open a program with
296:19 - code called generate dot Pi because I
296:21 - want to start generating a whole bunch
296:23 - of random information the first of which
296:25 - is just going to be a coin toss now how
296:27 - do I go about using that function well I
296:29 - first have to import the random Library
296:31 - so literally the first or among the
296:33 - first lines of my file should be import
296:35 - random and that just gives me access to
296:38 - all of the functions in that specific
296:40 - module now suppose I want to flip a coin
296:44 - well I can do random dot Choice per the
296:47 - documentation a moment ago and that
296:49 - again takes a sequence what's a sequence
296:51 - it's a list or something that's list
296:52 - like and we know about lists we've used
296:54 - lists to iterate over numbers we've used
296:56 - lists to iterate over students at
296:58 - Hogwarts let's go ahead now and let's
297:00 - iterate over just a list of two sides of
297:02 - a coin heads quote unquote or tails now
297:06 - I could call these anything I want these
297:08 - are my strings I just just want to
297:09 - simulate a tossing a coin so I'm just
297:11 - going to say in all lower case heads and
297:13 - tails but notice the syntax I have heads
297:16 - and tails and double quotes that's
297:17 - because they're strings I could also use
297:19 - single quotes so long as I'm consistent
297:21 - there's a comma between them which means
297:22 - the list has two elements there's square
297:25 - brackets to the right and the left which
297:27 - indicates that this is indeed a list
297:29 - that's the syntax recall for defining a
297:31 - list in Python and then lastly there's
297:33 - something more familiar there's the
297:35 - parentheses outside of those square
297:37 - brackets but those are just the
297:38 - parentheses that belong to the choice
297:40 - function and specify where its parameter
297:42 - gets passed in but again unlike past
297:45 - functions I have to specify what module
297:49 - this function is in at least for now and
297:51 - so I do random dot choice to call the
297:53 - specific function all right well it's
297:55 - one thing to flip a coin picking between
297:57 - those with 50 probability and that's
297:59 - what random.choice does it takes in a
298:02 - list and it returns to one of those
298:04 - values randomly with equal probability
298:06 - because I've passed in two items I've
298:08 - got a 50 50 chance if I passed in three
298:10 - items it'd be a 33 chance for each of
298:13 - those items and so forth python does the
298:15 - math for you but I want to store the
298:17 - value of this in a variable so let's
298:18 - Define a variable called coin equals
298:20 - whatever the return value is so this is
298:23 - indeed like flipping a coin I'm going to
298:25 - store in a variable called coin whatever
298:27 - that value is heads or tails and now
298:29 - just so I can see what's going on let's
298:31 - go ahead and print out the value of that
298:33 - string coin all right let me go ahead
298:35 - now and run this program in my terminal
298:37 - window python of generate dot Pi enter
298:40 - and it looks like the first coin toss
298:42 - was the heads let's go ahead and run it
298:45 - again
298:45 - and it looks like it was heads again
298:47 - maybe you want to chime into the chat
298:49 - here if I run it a third time what's it
298:50 - going to be this time if you want to
298:52 - type your thoughts in the chat
298:55 - you might think there's a bug here but
298:57 - this is probability in action if I go
299:00 - ahead and hit enter a third time there
299:02 - it's actually now tails and again tails
299:04 - and again tails and again tails and
299:06 - again tails and again heads now if we
299:09 - did this an infinite number of times it
299:11 - would indeed work out to be 50 50. if we
299:13 - only do it a few times it might not work
299:15 - out as cleanly but that's how
299:17 - probabilities indeed work all right so
299:19 - I've got that now working could I have
299:21 - implemented this in a different way well
299:23 - let me show you an alternative to
299:24 - actually using the import keyword alone
299:27 - and let me introduce the keyword from in
299:30 - Python so from is a keyword in Python
299:33 - that you can use when importing
299:34 - functions from a module but it allows
299:37 - you to be a little more specific than
299:39 - import alone so if I go back to my code
299:41 - here it's worth noting that what
299:43 - technically I'm doing here by importing
299:45 - random is I'm technically importing
299:48 - everything that's in that module so not
299:50 - just the function called random.choice
299:53 - but a few other functions as well help
299:55 - so instead of using this line of code at
299:57 - the top of my file import random which
299:59 - will technically give me access to all
300:01 - of the contents they're in a downside of
300:03 - that is that I have to type in
300:05 - random.choice random.this random.that
300:08 - because all of the functions I'm calling
300:10 - have to be associated with the scope of
300:12 - that module well suppose that I just
300:14 - want to call the function as its name
300:16 - choice I can do that as well let me
300:18 - replace this first line here with from
300:20 - random import choice and what this does
300:24 - effectively is it loads the function's
300:26 - name Choice into my current namespace
300:29 - into the scope of the file I'm working
300:31 - in what that means is that I now no
300:34 - longer have to specify Which choice
300:36 - function I mean I can just say choice
300:38 - and so it loads it into the local
300:40 - namespace that is into my local
300:42 - vocabulary if you will so I can just now
300:45 - say choice this might be advantageous in
300:48 - what cases do you think when might you
300:51 - want to import the name of the function
300:53 - explicitly like this this as opposed to
300:56 - just saying random.choice random.choice
300:59 - throughout your code when calling a
301:00 - function
301:01 - any instincts here for this alternative
301:04 - import using from
301:07 - um hello I'm Muhammad from Egypt and
301:09 - maybe if we have a variable that its
301:12 - name is basically like choice if I have
301:15 - a variable called the choice so I need
301:16 - to differentiate which trays I choose so
301:19 - I'm gonna choose random dotted Choice
301:21 - yeah really good instincts by using the
301:24 - first approach by just importing random
301:25 - you're making sure that all of its
301:27 - contents are associated with are scoped
301:30 - to the random module so that you can
301:33 - have your own choice function you can
301:34 - have your own choice variable you can
301:36 - use the same names as all of the
301:39 - functions or variables that are stored
301:40 - inside of that file without them
301:42 - colliding so to speak and this is a good
301:44 - thing in older languages it was the case
301:46 - that if you imported someone's Library
301:48 - you better hope that you're not using
301:50 - the same functions or variables as they
301:52 - are because you might in fact have some
301:54 - kind of conflict Python and certain
301:56 - other languages allow you to scope the
301:58 - names of those functions and variables
301:59 - to the file or the module that they come
302:01 - from so that's a good thing but honestly
302:04 - this is such a short program or
302:06 - equivalently maybe I'm using the choice
302:08 - function in so many places calling
302:11 - random.choice random.choice
302:13 - random.choice it's just making my code
302:14 - longer and longer and longer marginally
302:17 - so but it's just getting ugly and
302:19 - annoying I can simply import choice and
302:22 - now tighten up my code a little bit so
302:23 - as with so many decisions in the past
302:25 - there's not necessarily one right
302:27 - approach or another it depends but I
302:29 - think for those very reasons sometimes
302:31 - it's better to do what we did the first
302:32 - time which is only import the module so
302:35 - as to retain the scope they're in well
302:38 - let me propose that we transition to
302:40 - another function that comes with
302:41 - Python's random module and that's this
302:43 - here from the documentation Rand int
302:46 - it's a bit hard to say but it implies
302:48 - get back a random int and if you read
302:50 - the documentation it's a random end
302:51 - that's between A and B inclusive so if
302:55 - you were to pass in one for a and ten
302:57 - for B you would get back a number
302:59 - between 1 and 10 inclusive include
303:01 - including the one and including the 10
303:03 - potentially each with a ten percent
303:05 - probability so how might I go about
303:07 - using a program like this well let me
303:09 - come back to my generate.pi file and why
303:12 - don't we go ahead and try generating a
303:13 - random number between one and ten you
303:15 - might do this frequently in the real
303:16 - world when you just want someone to pick
303:17 - a random number you tell them as much in
303:19 - the human response let's get the
303:20 - computer to do the same here let me go
303:22 - ahead and delete my two lines of code at
303:24 - the bottom but keep my import random and
303:27 - let's go ahead and Define a variable
303:28 - this time called number set it equal to
303:30 - the return value of
303:32 - random.randint and now pass in a a value
303:35 - of 1 and B a value of 10 and now let's
303:39 - go ahead and print the number I'm going
303:41 - to go ahead in my terminal window and
303:42 - run python of generate.pi and hit enter
303:45 - four
303:46 - a python of generate.pi and hit enter
303:49 - eight again nine again seven again ten
303:55 - again two again and we can do this all
303:57 - day long and if we add all of those up
303:59 - they should end up being with ten
304:01 - percent probability each now how might
304:04 - you use this information well maybe
304:05 - we're playing a guessing game or maybe
304:06 - we're trying to randomize the behavior
304:09 - of some character in the game you can
304:11 - imagine using very simple building
304:13 - blocks like this just kind of spicing up
304:15 - your program by getting it to do things
304:17 - a little less predictably because you're
304:19 - choosing these values seemingly randomly
304:22 - and you're deferring to python to
304:23 - actually do the generation of these
304:25 - numbers uh using its own algorithms and
304:27 - its own math well what more could we do
304:29 - here let me propose that we introduce
304:31 - another function that comes from this
304:32 - random Library yet another that you
304:34 - yourself have don't don't have to
304:35 - implement Shuffle if you read the
304:38 - documentation for Shuffle in the same
304:39 - random module you'll see that it takes
304:42 - in a list for instance of values and
304:44 - just shuffles them up it randomizes them
304:46 - like a a deck of cards here you might
304:48 - shuffle them so as to put them into
304:50 - seemingly random order well how do I use
304:52 - this based on this function's name well
304:54 - let me propose that we go back to vs
304:56 - code here and let me go ahead and this
304:58 - time do the following because I need to
305:00 - shuffle something like a deck of cards
305:03 - let me go ahead and not just import
305:04 - random but let me give myself a variable
305:06 - called cards that's going to be of type
305:08 - list and just so I have something to
305:10 - shuffle I don't need all 52 cards in a
305:12 - typical deck I'm just going to shuffle
305:14 - three cards a jack a queen and a king I
305:17 - could call those strings anything I want
305:19 - but I just wanted a list of some values
305:21 - so as to shuffle them up that is
305:22 - randomize the order they're in well how
305:25 - does this now work if you read the
305:26 - documentation for random.shuffle you'll
305:28 - see that it shuffles the argument in
305:32 - place that is unlike many of the
305:34 - functions we've seen it doesn't return
305:35 - to a value that contains the shuffled
305:38 - cards in this case it actually shuffles
305:40 - the list it's given itself so what this
305:43 - means for my code is that I need to do
305:45 - something like this random dot Shuffle
305:47 - and pass in the variable containing
305:50 - those cards and then on a final line
305:53 - here how might I go about printing the
305:56 - cards well I could do this and I could
305:58 - say print cards but if I do that I'm
306:00 - actually going to see python Syntax for
306:02 - lists and it's just going to format in
306:04 - its own way using commas and the like I
306:06 - want to print these cards out one at a
306:08 - time just because I think it'll look a
306:09 - little better so we can use some of our
306:11 - syntax from loops and say something like
306:13 - this for card in cards go ahead and
306:17 - print out the current card so what's now
306:19 - Happening Here line three I'm defining a
306:22 - list of three cards in this order Jack
306:24 - queen king I'm then shuffling those same
306:28 - cards on line four and then on line five
306:30 - I'm using a for Loop for each of the
306:32 - cards in that list printed out one at a
306:36 - time and because I'm using print one
306:38 - line at a time well let's see the
306:39 - results down here in my terminal window
306:41 - I'm going to run python of generate.pi
306:43 - and hit enter queen king Jack seemingly
306:46 - shot because that's not the order I
306:48 - defined earlier let's do it again
306:50 - queen king Jack okay that happens to be
306:54 - the same but let's see this could just
306:56 - be bad chance there we go Jack queen
306:58 - king doesn't look like it's shuffled but
307:01 - at least we're getting back different
307:02 - orderings now again jack queen king hmm
307:06 - not so good Jack queen king not so good
307:09 - this is someone you probably want to
307:10 - play against with cards Queen Jack King
307:12 - there we go but of course we only have
307:14 - three cards here so there's not that
307:16 - many permutations we might see and if we
307:18 - do this over time we will see all of
307:19 - them but if we had of course 13 or 52
307:22 - cards we'd see a lot more permutations
307:24 - instead so we have now these three ways
307:27 - to Generate random information one is
307:29 - simple coin toss if you want to start
307:30 - some kind of athletic event one pick a
307:33 - number between one and ten if you want
307:34 - to decide something based on that and
307:36 - now using Shuffle we can even take in a
307:38 - list of things and shuffle them about so
307:40 - that we get some kind of random Behavior
307:43 - let me pause here and see if there's any
307:45 - questions yet on random on modules or
307:49 - any of these three functions yeah uh can
307:53 - we increase or decrease the probability
307:55 - uh of course
307:58 - if you want to for example there is
308:01 - three there is a 33 percent chance of
308:03 - probability so is there any chance to
308:06 - increase or decrease the probability can
308:08 - you set these probabilities not using
308:10 - these same functions uh can you set the
308:12 - probabilities but you can absolutely
308:14 - Implement some of your own functions or
308:16 - use more sophisticated functions that do
308:18 - exist in this library and others to
308:20 - exercise more control these are meant to
308:22 - be very user-friendly and simple
308:23 - functions certainly the ones we looked
308:25 - at that give you equal probability for
308:27 - all of those but absolutely you could
308:29 - skew things though hopefully if you're
308:30 - implementing a gambling game or the like
308:32 - you're not actually making some cards
308:34 - more probable than others allow me to
308:37 - turn back now to our implementation here
308:39 - of this Randomness and consider how we
308:41 - might leverage other types of
308:42 - functionality that aren't necessarily in
308:44 - this specific Library here well it turns
308:47 - out that python also comes with a
308:49 - statistics library and this contains all
308:51 - sorts of functions for doing things more
308:52 - statistical in nature namely calculating
308:55 - means or medians or modes or other
308:58 - aspects of a data set that you might
309:00 - want to analyze so how might we use the
309:03 - statistics module in Python well we
309:05 - might first just take a look at its
309:06 - documentation like any other module in
309:08 - Python and we'll see within that library
309:09 - that there's a whole bunch of functions
309:11 - and one of those functions is one that's
309:13 - quite simple it's average a function
309:15 - that allows you to calculate the average
309:17 - of some numbers that you've passed in
309:19 - let me go ahead and envious code in my
309:21 - terminal window open up a new file
309:23 - called average dot pi and at the top of
309:25 - this file I'm going to import a
309:27 - different Library this time namely the
309:29 - statistics module in Python and now I'm
309:32 - going to go ahead and call a function
309:33 - that I know comes in that module namely
309:36 - mean for the average of some values and
309:38 - I'm going to call statistics dot mean
309:40 - and I'm going to pass into this function
309:43 - mean a list of some values and let's
309:45 - suppose that I'm quickly trying to
309:47 - calculate what my current grade average
309:49 - is in school and I did really well on my
309:51 - first test and I got a hundred percent
309:52 - and on my second I did well but not as
309:55 - well and I got a 90. and ironically I'm
309:57 - not very good with math so I'd like to
309:59 - figure out what my average now is
310:00 - between those two tests so let me go
310:02 - ahead now and in this list type in the
310:04 - number 100 comma 90 thereby passing in a
310:07 - list of two values two ants 190 and ins
310:11 - outside of those are the parentheses
310:12 - because of course this is now the
310:14 - argument I'm passing to the function
310:15 - called mean and this function mean is in
310:18 - the module called statistics well it's
310:21 - not that interesting to just calculate
310:22 - the mean if I don't actually see what it
310:24 - is so let me additionally pass the
310:26 - return value of that mean function to
310:28 - the print function as usual let me now
310:31 - in my terminal window in vs code Type in
310:33 - Python of average dot pi and hit enter
310:35 - and voila as you might expect my average
310:37 - is 95 percent so the difference here is
310:40 - that I'm just using a different module
310:42 - that still comes with python but I need
310:43 - to import it instead of for instance the
310:46 - random module instead and this time I
310:48 - know from the documentation that there
310:49 - exists a function called mean well it
310:52 - turns out there's even more
310:54 - functionality that comes with python and
310:56 - that comes with other modules and Python
310:59 - and there's this feature generally known
311:00 - as command line arguments this is a
311:02 - feature not just of python but of
311:04 - languages more generally that allow you
311:06 - to provide input not when prompted
311:08 - inside of a program as happens whenever
311:11 - we call the python function input but
311:14 - rather there's this feature command line
311:16 - arguments of programs that allows you to
311:18 - provide arguments that is input to the
311:20 - program of just when you're executing it
311:23 - at the command line so up until now for
311:25 - instance recall that we've generally run
311:26 - python of something.pi for instance
311:29 - pythonofhello.pi and I've never once
311:31 - really executed any words or phrases
311:34 - after the name of the file but I could
311:37 - in fact when you're running programs in
311:40 - a command-like environment like we are
311:42 - you can provide any number of words or
311:45 - numbers or phrases after the command
311:47 - that you're typing and all of those will
311:49 - somehow be passed in as inputs to the
311:52 - program itself you don't have to prompt
311:54 - the user for one thing at a time by
311:57 - manually calling that input function so
311:59 - what does this mean in real terms well
312:01 - let me go ahead back into vs code here
312:03 - and let me propose that we consider how
312:06 - we might leverage a certain module I'm
312:09 - going to go ahead and create a file
312:10 - called
312:12 - name.pi and I'd like to use a new module
312:15 - this time that's going to give me access
312:16 - to
312:18 - values that have been typed at that
312:20 - command line but what's this module
312:21 - going to be well this one's going to be
312:23 - called CIS and CIS short for system
312:25 - contains a whole lot of functionality
312:27 - that's specific to the system itself and
312:30 - the commands that you and I are typing
312:31 - the documentation for this module is
312:33 - that this URL here and it lists all of
312:36 - the various functions and variables and
312:38 - the like that come with that module but
312:40 - we're going to focus on something a
312:41 - little more specific namely this thing
312:43 - here it turns out in the sys module in
312:46 - Python there is a variable that just
312:49 - magically exists for you called ARG V it
312:52 - stands for argument Vector which is a
312:54 - fancy way of describing the list of all
312:57 - of the words that the human typed in at
312:59 - their prompt before they hit enter all
313:02 - of those are seemingly magically
313:04 - provided to you via python in a variable
313:07 - called sys.org V this variable is a list
313:11 - which means that the first element is
313:13 - going to be the first word that you type
313:14 - the second element is going to be the
313:15 - second word that you typed in so forth
313:17 - and by way of this list then can you
313:19 - figure out what words did the human
313:21 - actually type at the prompt and maybe
313:23 - use that to influence the behavior of
313:25 - your own program so what does this mean
313:27 - now in real terms well in this new tab
313:29 - called name.pi let me go ahead and
313:31 - import CIS within that sys module is
313:34 - going to give me access to sys.org V but
313:37 - how might I want to use it well let's do
313:39 - this instead of writing a hello world
313:41 - program that all of these times has just
313:44 - looked for the return value of input to
313:47 - figure out what the user wants me to
313:49 - print let's go ahead and just expect the
313:51 - user to tell us when they run the Python
313:53 - program itself what their name is and
313:55 - suppose this time I'd like to generate a
313:57 - whole bunch of name tags initially just
313:59 - one and in the US here it's very common
314:01 - to wear a sticker on your lapel that
314:03 - says hello my name is David so I want to
314:05 - print out some text that resembles that
314:07 - the idea being maybe I could enhance
314:08 - this program someday to even send that
314:10 - text straight to the printer and
314:12 - dynamically generate those name tags
314:14 - well let me go ahead now and do this let
314:15 - me go ahead and print out as always
314:17 - hello but I'll say a little something
314:19 - more this time to make things more
314:20 - interesting hello my name is quote
314:23 - unquote and then after that I normally
314:26 - have been in the habit of calling input
314:28 - storing the return value in a variable
314:31 - and passing in the name of that variable
314:33 - here but I'm going to instead jump right
314:35 - to this
314:36 - sys.rv bracket one and that's it I'm
314:40 - going to have a program here that says
314:42 - hello my name is followed by whatever is
314:45 - in sys.rv bracket one and notice cis.org
314:49 - V again is a list and recall from our
314:51 - discussion of loops and in turn lists we
314:53 - use this square bracket notation to get
314:55 - at the various elements inside of a list
314:58 - all right let me go down now into my
314:59 - terminal window and run python of name
315:01 - dot Pi but this time rather than just
315:04 - hit enter and wait for the program to
315:06 - prompt me for my name let me proactively
315:08 - just tell this program what my name is
315:10 - at the so-called command line here we go
315:12 - David separated with a space from the
315:15 - name of the file so that now when I
315:17 - execute python name.pi David I see on
315:20 - the screen voila hello my name is David
315:23 - So based on this demonstration alone I
315:26 - think we can infer exactly what's going
315:28 - on in sys.rv even though it sounds
315:30 - certainly at first glance uh rather
315:32 - complicated here let's look up at
315:35 - sis.orgby I'm going to bracket one here
315:38 - so clearly
315:40 - sys.orgv bracket one is storing
315:44 - d-a-v-i-d but it's one in the past when
315:47 - we looked at Loops recall that we said
315:49 - that they were zero indexed that is the
315:52 - first element is zero the next element
315:53 - is one this next element is two and so
315:56 - forth and yet here I am treating it as
315:59 - though my name is at the start of the
316:00 - list one well let me ask this question
316:03 - what is probably
316:05 - insist.org V of zero
316:08 - what is probably insist.org V of zero
316:12 - the very first element actually in that
316:15 - list oh yeah I think uh it's like in C
316:20 - uh the name of program indeed it's
316:24 - indeed like in C in other languages the
316:25 - name of the program well if we consider
316:28 - what it was I typed I certainly typed
316:30 - python because that's the name of my
316:32 - interpreter and we don't really need to
316:33 - know that because we're using python
316:35 - itself but after that I did type two
316:37 - things I typed name dot pi as I've done
316:39 - so many times anytime I want python to
316:41 - interpret a program I've written and it
316:43 - turns out by convention what python does
316:45 - is it stores in sys.orgv the name of the
316:49 - file that you're executing or
316:51 - interpreting followed by any number of
316:54 - other words that you type so all this
316:56 - time we could have been accessing the
316:58 - name of the program which frankly isn't
316:59 - all that interesting but we can also now
317:01 - access words that are typed after that
317:04 - prompt as well but of course if I don't
317:07 - type anything in what might happen here
317:10 - this might be naive of me to assume that
317:12 - there's always going to be something at
317:14 - location one in sys.org V let me go
317:16 - ahead and try this python name dot pi
317:19 - and no I'm not giving you my name
317:20 - because at this point I might not even
317:22 - know that you want my name to be typed
317:24 - so let me hit enter now and uh oh we see
317:27 - now an error a so-called exception in
317:29 - Python this one's a new one this one's
317:31 - an index error that elaborates list
317:34 - index out of range and turns out this is
317:37 - actually one of the most common mistakes
317:39 - in programming whether using a list in
317:41 - python or arrays or vectors in other
317:43 - languages is to try to access some
317:46 - element that does not exist you try to
317:48 - go too far to the left or you try to go
317:49 - too far to the right in this in this
317:52 - object that is just a list of some
317:55 - values so of course the mistake here is
317:58 - that I'm assuming there's going to be
317:59 - something at location one when really
318:01 - it's location zero that's the only one
318:04 - that has a value but fixing this is not
318:06 - going to amount to doing bracket zero
318:08 - because now if I go ahead and rerun this
318:10 - program with no other words after name
318:13 - dot Pi it says hello my name is name.pi
318:16 - which is fine if we're making a name tag
318:17 - for the program but that's not of course
318:19 - what my goal here is instead so if the
318:22 - fix is not just to change the one to a
318:24 - zero how else might I handle this error
318:28 - how else might I handle this error this
318:32 - index error that happens if the user
318:33 - just doesn't remember to or doesn't know
318:36 - to type their actual name at the prompt
318:38 - we could always put an exception into
318:41 - the program saying if there is
318:45 - um if there's nothing at location one
318:47 - we just come out to say okay we haven't
318:50 - got a parameter or something but if
318:52 - there is you continue along with the
318:54 - program
318:55 - perfect so if I might simplify we can
318:57 - try to execute this line of code except
318:59 - if there's an error we'll deal with it
319:01 - in some other way now ideally and once
319:03 - I'm a strong enough programmer I would
319:05 - have anticipated this and written the
319:07 - following code from the get-go but when
319:09 - you're learning it's certainly
319:10 - reasonable to see an error oh I didn't
319:11 - realize I should detect that and then go
319:13 - back and improve your code but of course
319:15 - if you read the documentation you
319:17 - ingrain some of the Lessons Learned From
319:18 - the Past you'll get into the habit of
319:20 - trying and checking for some of these
319:22 - exceptions yourself so let me solve this
319:24 - in one possible way as you proposed here
319:26 - let's try to handle this exception as
319:28 - follows let me go ahead now and instead
319:30 - of just blindly calling this print line
319:32 - let me try to print out hello my name is
319:35 - such and such except if there is an
319:38 - issue specifically an index error then
319:41 - what do I want to go ahead and do I'm
319:43 - going to say something like too few
319:45 - arguments I could be more explanatory
319:48 - than that but for now I'm just going to
319:49 - explain to the user that they gave me
319:51 - too few arguments too few words at the
319:53 - prompt so now it's still not going to
319:56 - work in quite the way I want I'm still
319:58 - not going to be able to generate their
319:59 - name tag but at least they're not going
320:00 - to see some cryptic error message and
320:02 - think that they themselves broke the
320:04 - program let me go ahead now and run
320:06 - python of name.pi enter and too few
320:08 - arguments okay let me go ahead now and
320:10 - do python of name.pi and type in my name
320:13 - David and now we're back in business and
320:15 - I see that my name is on the screen too
320:18 - but strictly speaking I don't have to
320:21 - try to do this I could actually be a
320:23 - little more defensive in writing this
320:26 - code and maybe I could check whether or
320:28 - not the user has indeed provided a name
320:31 - or multiple names at the prompt so as to
320:33 - give them more refined error messages as
320:36 - well so how might I do this well let me
320:38 - go and undo the exception handling I've
320:40 - added and why do I instead more modestly
320:43 - try to do this let me go ahead and
320:45 - introduce a conditional here if the
320:48 - length of cis.org V is less than 2 or
320:53 - equivalently equal to just 1 value but
320:56 - I'll just stick with less than two for
320:57 - now then go ahead and print out two few
321:01 - arguments so I want ultimately two
321:03 - arguments I want the name of the program
321:05 - at location zero and I want the name of
321:08 - the human at location one so that's a
321:10 - total of two arguments so if I have
321:11 - fewer than two arguments let's tell the
321:13 - user with this print line L if the
321:16 - length of sys dot ARG V is say greater
321:19 - than two like they typed in too many
321:21 - words at the prompt well let's tell them
321:22 - print quote unquote too many arguments
321:25 - else if they did get it right and they
321:28 - gave me exactly two arguments else let's
321:31 - go ahead and print what I actually care
321:33 - about all right let me go down to my
321:34 - terminal window here and run python of
321:36 - name.pi and voila
321:38 - a completely different type of error
321:40 - this one a syntax error which we've seen
321:42 - in the past now a syntax error recall is
321:45 - mayakopa like I messed up here and I
321:47 - wrote invalid syntax and so no amount of
321:50 - conditionals or exception handling is
321:52 - really going to catch this one I need to
321:54 - go back and just get my program to work
321:55 - because it's not running at all well let
321:57 - me go up here and see line four is the
322:00 - issue and it indeed it looks like I have
322:03 - an unterminated string here I need to go
322:06 - ahead and now add this double quote so
322:08 - let me go ahead now when with that red
322:09 - herring gone let me rerun python of
322:11 - name.pi and hit enter and now we see too
322:14 - few arguments okay maybe it wants my
322:16 - full name let me go ahead now and run
322:18 - python of name.pi David Malin typing in
322:21 - both words after the name of the file
322:23 - and hit enter and now of course it's too
322:25 - many arguments fine now I'll oblige and
322:28 - do python of name.pi and just David and
322:30 - there we have it my name tag printed on
322:33 - the screen so strictly speaking we don't
322:34 - have to handle exceptions if we can be a
322:37 - little smarter about it and just check
322:38 - for the things that we're worried about
322:40 - especially if we want to give the user
322:42 - more refined advice we don't want to
322:44 - just tell them no something went wrong
322:45 - or we don't want to pass we want to tell
322:47 - them no that's too few or no that's too
322:50 - many we have conditionals in our
322:52 - vocabulary already via which we can now
322:55 - Express that well let me pause here and
322:57 - see if there's any questions now on how
322:59 - we handled the error before with the
323:01 - index error or how now we're just
323:03 - proactively avoiding all index errors
323:06 - all together by just checking first is
323:09 - it too few is it too many or is it
323:11 - exactly what we want oh yeah thank you
323:14 - um so I was wondering you you touched
323:16 - upon kind of using your full name
323:18 - um could we could we then
323:21 - um is there a way going forwards that
323:24 - perhaps we uh have people that want
323:26 - their full names and want their just
323:28 - their first name that we separate that
323:30 - into like oh this person has full name
323:33 - this person has just the one name
323:36 - absolutely and allow me to uh allow me
323:39 - to propose we come back to that support
323:41 - for multiple names but indeed we could
323:43 - do that and I should know too though we
323:46 - can support full names right now if I do
323:49 - this instead of typing in David space
323:51 - Malin which is problematic because again
323:53 - by definition of how ARG V Works each
323:56 - word ends up in a specific location in
323:58 - the list but if I add quotes single
324:01 - quotes or double quotes at the command
324:03 - line now python will view this as two
324:05 - total things the name of the file and
324:08 - this full name and now when I hit enter
324:09 - I don't see the quotes the whole thing
324:11 - is passed in as my full name and if I
324:13 - want to adapt this further for multiple
324:15 - people we'll be able to do that as well
324:17 - other questions now on this version with
324:20 - if elif else or on accept before
324:24 - I want to ask you uh can we use multiple
324:28 - else in statement can you use multiple
324:30 - else's statements no else is the last
324:32 - catch-all statement that you can have
324:34 - you can have multiple l if statements in
324:37 - the middle but not multiple else's
324:41 - all right all right well let's turn our
324:44 - attention back now to this code and see
324:46 - if we can't refine it a bit more by
324:47 - adding in some additional functionality
324:49 - that we get with modules like the sys
324:51 - module one of the things I don't love
324:53 - about this version of the code even
324:55 - though arguably it is now correct is
324:58 - that the essence of my program which is
325:00 - just to print out the name tag is kind
325:02 - of relegated to this else clause and
325:05 - that's fine logically it's correct but
325:08 - generally speaking there's something
325:09 - nice about keeping all of your error
325:12 - handling separate from the code that you
325:15 - really care about having all of these
325:17 - ifs El lifts perhaps at the top of your
325:19 - code that are checking to make sure that
325:21 - all of the data is as expected but then
325:23 - it would be nice if only for design sake
325:26 - not to sort of hide in this else
325:28 - statement the actual code that you care
325:30 - about I would prefer for instance to do
325:32 - something logically like this I could
325:34 - check for errors up top and then down
325:38 - here print the name tags it would be
325:40 - nice if there those are sort of distinct
325:42 - blocks of code all of which are here
325:44 - left aligned but there's a problem with
325:46 - what I've just done here logically what
325:49 - bug did I just introduce by getting rid
325:52 - of the else
325:53 - and introducing line 10 on its own with
325:56 - no indentation outside of the
325:58 - conditional
325:59 - what bug have I just introduced what
326:02 - mistake to be clear
326:05 - um name error ironically it's a name
326:07 - error but not a name error exception
326:10 - it's an error with my name but
326:13 - I think you're Frozen for me it's going
326:16 - to raise an exception because even
326:18 - though I'm checking the length of
326:19 - sys.org V up top and even though I'm
326:22 - checking it again for being greater than
326:24 - two not just less than two but greater
326:26 - I'm still then blindly and incorrectly
326:28 - assuming it's now going to exist so just
326:30 - to be clear if I run python of name.pi
326:33 - and I don't type any arguments I've got
326:36 - too few I think I'm going to see that I
326:38 - have too few but I'm also going to see
326:40 - that same exception at the very top of
326:43 - my terminal Windows output there's my
326:44 - error message too few arguments but
326:46 - again on line 10 I blindly proceed to
326:48 - still index into my list at location one
326:52 - which does not exist so it turns out
326:54 - there's a better way to handle errors
326:56 - like this especially if you're writing a
326:57 - program in Python that's just meant to
327:00 - run briefly and then exit anyway but
327:03 - maybe we could start to exit prematurely
327:05 - if the program itself just can't proceed
327:08 - if the user has not given us the data we
327:10 - want perhaps we should just exit the
327:12 - program earlier than we might otherwise
327:15 - so let me go ahead and do this let me go
327:17 - ahead and remove my comments so as to
327:19 - focus only on the code here and let me
327:21 - propose that instead of just printing
327:24 - quote unquote too few arguments I'm
327:27 - going to use one other function that
327:28 - comes with the sys module I'm going to
327:30 - go ahead and call Sis dot exit and as
327:33 - the name suggests it's going to do
327:35 - exactly that with the system's help it's
327:37 - going to exit my program then and there
327:40 - on line four why is that okay well if
327:43 - you gave me too few arguments I have
327:44 - nothing more to say to you the user I
327:46 - might as well exit a bit prematurely and
327:49 - I can do this as well on line six let's
327:50 - go ahead and not just print that but
327:52 - sys.exit quote unquote too many
327:54 - arguments print out that message and
327:56 - just exit right there now I can trust
327:59 - that by the time I get to line eight
328:01 - every error condition has been checked
328:04 - for and so it's safe for me to assume
328:06 - that there is in fact an item at
328:09 - location one in sys.org V so let me go
328:12 - ahead now and run this python of name.pi
328:16 - enter too few arguments but I'm back at
328:19 - my prompt nothing more has happened let
328:21 - me run it again python of name.pi David
328:24 - Malin with no quotes enter too many
328:26 - arguments is now printed here finally
328:28 - python of name dot Pi just David enter
328:31 - hello my name is David so we have then
328:35 - insists two forms of functionality now
328:37 - we have access to this variable sys.orgv
328:39 - this argument Vector that gives me all
328:41 - of the words that were typed at the
328:43 - prompt including the program's own file
328:45 - name and it turns out if we read further
328:47 - in the documentation there's an exit
328:49 - function that can take different types
328:51 - of inputs but if I pass out a string
328:53 - like this it will indeed print that
328:55 - string for me and then exit from my
328:57 - program then and there questions now on
329:01 - exiting from programs like this
329:03 - to be clear all of this time once python
329:06 - gets to the bottom of your file it's
329:08 - going to exit anyway so I'm using
329:09 - sys.exit now just to make sure that I
329:12 - exit earlier than otherwise
329:14 - um my question is about the CIS that are
329:17 - are V so is that capable of accepting or
329:22 - taking multiple elements at once let's
329:25 - say for example uh python name that by
329:29 - David Malin I'm a male uh 20 years old
329:33 - and if let's say I only want to access
329:36 - your name which is at the first index
329:39 - and then you're you're your age is
329:42 - brought say at the sixth index can I say
329:45 - sys dot RV one
329:48 - and another one for six to access what I
329:51 - just want is that possible for assist RB
329:55 - uh short answer yes I think if I
329:58 - understand your question correctly
329:59 - whereby you're proposing to have many
330:01 - words at the end of the command and you
330:03 - want to access those individual words
330:04 - absolutely at some point it gets a
330:07 - little fragile I would say if you're
330:09 - typing so many words at the prompt that
330:12 - the order really matters and so it turns
330:15 - out there's a lot of programs and
330:16 - there's functionality in Python that can
330:17 - allow you to provide those values like
330:20 - name or age or any number of other
330:22 - fields in any order you want but pass in
330:26 - a bit more information textually that
330:28 - tells the program how you want to use it
330:30 - so in short what you're describing is
330:32 - possible and let me do a small
330:34 - incarnation of it as follows let me
330:37 - propose that we go back to my code here
330:39 - and let's propose that we actually now
330:41 - want to support multiple values at the
330:43 - prompt so there's going to be no such
330:45 - thing as too many arguments suppose that
330:47 - I want to generate name tag tags not
330:49 - just for David but for David for Carter
330:51 - for wrong Shin for others in the group
330:53 - who all want their name tags as well so
330:55 - I'm going to go ahead and do this I'm
330:57 - going to get rid of my L if condition
330:58 - because I don't want to limit the
331:00 - maximum number of words that are typed
331:02 - at the prompt anymore I instead want to
331:04 - iterate over every
331:06 - name at the prompt so I'm going to say
331:09 - this for ARG in sis.org V go ahead and
331:14 - print out this time ARG so what am I
331:18 - doing here well even though the syntax
331:20 - is a little different the idea is the
331:22 - same as before when we've had Loops I'm
331:24 - using a for Loop to iterate over a list
331:26 - the list in question here is sys.org V
331:30 - ARG is a variable that I'm creating on
331:33 - the Fly the for Loop is going to make
331:34 - sure that the first time through this
331:36 - Loop ARG is set to the first word on the
331:38 - command line the second time through the
331:40 - loop Python's going to make sure that
331:41 - ARG is now set to the second thing on
331:43 - the command line and so forth that's
331:44 - just how a for Loop works it updates the
331:46 - variable for us I don't have to call it
331:48 - Arc I could call it name so long as I
331:50 - change it to name in both places but ARG
331:52 - is reasonable if I'm iterating over
331:54 - arguments more generally if I now run
331:57 - this program though unfortunately
331:59 - there's a little bit of a bug even if I
332:02 - type in David and Carter and wrong shin
332:06 - I'm not going to get just three name
332:09 - tags
332:10 - in your mind does anyone see the bug I'm
332:13 - about to trip over it's not a huge deal
332:16 - if I've got enough name tags to go
332:18 - around but I'm going to be wasting one
332:21 - because this is going to print not three
332:22 - but four name tags whereby the first
332:25 - contains the name of the program itself
332:27 - maybe not a big deal maybe that's the
332:29 - sticker we don't bother handing out but
332:30 - it's wasteful and it does look wrong so
332:33 - how could we get access to not all four
332:36 - elements of argv but just a slice of ARG
332:39 - V and this is actually a technical term
332:41 - in Python in some other languages to
332:43 - take a slice of a list means to take a
332:46 - subset of it maybe from the beginning
332:48 - maybe the middle maybe the end but a
332:50 - slice is a subset of a data structure
332:53 - like a list well how do I actually do
332:55 - this in code well in Python it's
332:57 - actually very easy to take a slice of a
332:59 - list that is a subset thereof you can
333:01 - simply do this at the end of the list
333:04 - name sys.org V in this case you can use
333:06 - square brackets and then in those square
333:08 - brackets you can specify the start and
333:11 - the end of the list that you want to
333:14 - retain I want to start at element one
333:16 - not zero I want to start at element one
333:19 - and I want to just go to the end so I'm
333:21 - actually going to Omit a second number
333:23 - altogether it's not necessary to have a
333:25 - second number but I do need that colon
333:27 - because this is going to give me a slice
333:29 - of the list it's going to give me a
333:31 - slice of the list that starts at
333:32 - location one not zero and the colon and
333:35 - then a blank just means it's going to
333:37 - give me everything else so this is
333:38 - equivalently going to slice off the
333:40 - first element of the list and give me a
333:42 - new list that contains just those three
333:44 - human names not the name of the file
333:46 - itself let me try running this again I'm
333:49 - going to run python of name.pi David
333:51 - Carter wrong Shin this time hopefully
333:54 - I'm going to get three and only three
333:56 - name tags hitting enter and indeed I've
333:59 - done now just this so again using some
334:01 - relatively simple syntax in Python we
334:03 - can use square brackets not just to go
334:05 - to specific elements like bracket zero
334:07 - or bracket one we can also get subsets
334:10 - of the slices of the list by doing
334:12 - bracket something colon Something where
334:15 - each of those some things is a number
334:17 - the beginning or the end and they're
334:18 - optional depending on whether you want
334:20 - all of them or just some
334:22 - any questions now on this version which
334:25 - adds the loop and these slices with that
334:28 - new syntax
334:30 - can we slice starting from the end of
334:33 - the argument argument Vector you can you
334:36 - can slice something from the end of the
334:38 - argument vector and this might uh this
334:40 - might blow one's mind a little bit let
334:42 - me go ahead and do this uh let's see let
334:46 - me go ahead and do negative one at the
334:48 - end using a negative number here and
334:50 - running the same command we've just
334:52 - uninvited wrong Shin from receiving a
334:54 - name tag here so if you use a negative
334:56 - number it has the effect of counting to
334:58 - the uh in the other direction from the
335:01 - end of the list a good question there
335:03 - other questions now on slices on looping
335:06 - over sys.org V
335:09 - hype so I remember very early on uh when
335:12 - we were talking about only having two
335:14 - decimal places in uh in an float value
335:17 - um
335:18 - does this is is that in the same vein
335:21 - like um because we use the the colon
335:24 - point to f
335:26 - uh so that's is that the same thing then
335:28 - uh why would the F be included then in
335:32 - the point 2 f as opposed to here when
335:35 - you just have the numbers
335:37 - a really good question and it's just the
335:39 - short answer is that context matters so
335:41 - there's only so many keyboard keys on
335:44 - our keyboard and so we sometimes use the
335:46 - same symbols for different things so
335:48 - what you're alluding to is the format
335:50 - code in in fstring for actually
335:52 - formatting a number using a colon using
335:55 - a period using a number using the letter
335:57 - F and so forth and that is very specific
335:59 - to the F string feature of python this
336:02 - case has nothing to do with any of that
336:04 - syntax per se this is just using a colon
336:07 - in a different context to solve this
336:09 - problem to implement a slice the authors
336:11 - of python could have chosen another
336:12 - symbol but honestly looking down at my
336:14 - keyboard here we don't have that many to
336:16 - choose from that are easy to type so
336:18 - sometimes they have different meanings a
336:19 - good question as well allow me to
336:22 - propose now that we take things further
336:24 - and move away from using only those
336:27 - modules those libraries that python
336:29 - comes with to talk about more generally
336:31 - packages that exist one of the reasons
336:33 - that python is so popular and Powerful
336:36 - these days is that there's a lot of
336:38 - third-party libraries out there as well
336:40 - otherwise known as packages strictly
336:42 - speaking python itself has a term of art
336:46 - called a package which is a module
336:49 - essentially that's implemented in a
336:51 - folder not just a file but a folder but
336:53 - more generally a package is a
336:56 - third-party library that you that I can
336:58 - install on our own Mac or PC or our
337:01 - Cloud Server and gain access to even
337:03 - more functionality that other people
337:05 - have implemented for us now one of the
337:08 - locations you can get all of these
337:09 - packages is called the Pi Pi websites
337:12 - the python package index which lives at
337:15 - this URL here and this is a website that
337:18 - is searchable via the command line as
337:19 - well as via the web that allows you to
337:22 - download and install all sorts of
337:24 - packages even cs50 has some of its own
337:26 - packages in services like these now
337:29 - there's a fun one out there that's a
337:30 - throwback to a command that's been
337:31 - around for years in command line
337:33 - environments called cow set cow say is a
337:36 - package in Python on that allows you to
337:38 - have a cow say something on your screen
337:41 - if curious to read up on it its own
337:43 - documentation is on pipi.org
337:45 - specifically at this URL here but how do
337:48 - you actually get the package into your
337:50 - system well technically you could figure
337:52 - out how to download the file and maybe
337:55 - unzip it and put it into the right
337:56 - location on your Mac or PC but nowadays
337:59 - a lot of languages python among them has
338:01 - what's called its own package manager
338:03 - this one here called pip which is just
338:05 - one so pip is a program that generally
338:09 - comes with python itself nowadays that
338:11 - allows you to install packages onto your
338:13 - own Macs or PCS or Cloud environment by
338:16 - just running a command and then voila
338:18 - you have access to a whole new library
338:20 - in Python that didn't come with python
338:23 - itself but now it's available on your
338:25 - system for you let's go back to vs code
338:28 - here and in my terminal window I'm going
338:30 - to go ahead and type pip install cow say
338:33 - now what's going on here pip is the
338:35 - command the package manager and I want
338:37 - you to install what package the package
338:39 - called cow say I'm going to go ahead and
338:41 - hit enter here and after a little bit of
338:43 - output it has successfully installed cow
338:45 - say now what does that mean that means I
338:48 - can now go about importing this into my
338:50 - own code well let's go ahead and see
338:52 - what this means let me go ahead and
338:53 - create a new file with code called say
338:55 - dot Pi because I want something to be
338:57 - said on the screen and in my new tab
339:00 - here I'm going to go ahead and import
339:01 - cow say which presumably is now
339:04 - installed I'm now going to import sys as
339:07 - well because I'd like to use some
339:08 - command line arguments in this program
339:10 - just so that I can run it quickly and
339:12 - without using the input function I can
339:14 - get the user's name immediately from The
339:16 - Prompt and let me go ahead and do this
339:18 - I'm going to do a bit of error checking
339:19 - proactively this time and rather than
339:21 - use less than or greater than I'm this
339:23 - time going to say if the length of
339:25 - sys.org V does equal to so if the human
339:29 - is provided just the name of the program
339:31 - and their own first name we're good to
339:34 - go I'm going to do the following I'm
339:36 - going to call a function called cow in
339:40 - the package called Cow Say and I'm going
339:42 - to pass in a string hello comma and then
339:46 - as in the past I'm going to pass in just
339:48 - one string because according to its
339:50 - documentation it's not like print I
339:51 - can't pass in comma this comma that I
339:53 - can only pass in one string so I'm going
339:55 - to concatenate the contents of CIS dot
339:57 - ARG V bracket one so long as then I type
340:02 - in my name David after the name of this
340:04 - program it should end up in sys.org V1
340:07 - in which case this line five of codes
340:09 - should concatenate hello with my name
340:11 - with a space in between and apparently a
340:14 - cow is going to say it so let's see what
340:16 - happens here let me go ahead and clear
340:19 - my screen and increase the size of my
340:21 - terminal window let me go ahead and run
340:23 - python of say dot pi and type my name
340:25 - David and enter there is the program
340:29 - called cow say it literally has a cow
340:31 - say something on the screen and this is
340:33 - a throwback to a program from yesteryear
340:35 - that tended to come with a lot of
340:37 - systems this is otherwise known as ASCII
340:40 - art it's a textual way using just keys
340:42 - on your keyboard to print pictures of
340:44 - sorts on the screen now we can really go
340:47 - down the rabbit hole here and there's
340:48 - questionable academic value of doing so
340:50 - so I'll do so just once turns out the
340:52 - cow say package comes with other
340:54 - functions as well one of those functions
340:56 - for instance is T-Rex and if I now
340:59 - increase the size of my terminal window
341:01 - we'll perhaps see where we're going with
341:02 - this let me now run again python of
341:04 - say.pi this time let me not provide my
341:07 - name just to see if it's broken it's
341:09 - still okay because we have that if
341:10 - condition if the length of sys.org V
341:14 - equals equals two and only if it equals
341:16 - equals two do we do anything that's why
341:18 - we're not seeing anything here let me go
341:20 - ahead and cooperate now say dot Pi space
341:23 - David and it's no longer a cow but
341:26 - if I zoom out on my screen a T-Rex why
341:30 - just because these are the things you
341:32 - can do once you know how to program you
341:33 - can even package them up and make them
341:35 - freely available to others as open
341:36 - source software for us it's
341:39 - demonstrative of a feature more
341:41 - generally here namely being able to
341:43 - install these third-party packages and
341:44 - how you might do so in Python now I'll
341:47 - leave this up on the screen for a moment
341:48 - and see if there's any questions about
341:50 - cows or Tyrannosaurus Rexes or packages
341:53 - more generally
341:56 - I'm really qualified to speak to just
341:58 - one of those
341:59 - hi um I've got two questions it's a bit
342:03 - earlier than what it's supposed to be um
342:06 - so my first question is
342:08 - the packages that you're calling
342:12 - um to uh use in the program are they the
342:17 - same as
342:20 - um let's say because if I'm doing Java
342:23 - um the same as calling a class or Java
342:27 - file in order to use its functions
342:31 - and my second question is what's the
342:34 - actual purpose of using command line
342:37 - arguments as you've used because it's
342:40 - not really the best way to
342:44 - as you say be user friendly where as in
342:48 - let's say the person who's
342:51 - using the program doesn't know what it
342:54 - what they want what the program's asking
342:57 - them really good questions the first
342:59 - question about the comparison with Java
343:01 - python packages are similar to Java
343:03 - packages where you have something dot
343:05 - something dot something at the top of
343:07 - your program that gives you access to a
343:08 - class or something else python itself
343:10 - supports classes more on those down the
343:12 - road and you can do very similar things
343:15 - in python as you can do with Java but
343:17 - the analog really is python packages to
343:20 - Java packages here as for command line
343:22 - arguments you ask a good question why do
343:25 - we use them especially if they're a
343:26 - little yes user friendly they're a
343:28 - little less user friendly to people who
343:31 - aren't in this Zoom to be honest you and
343:33 - I as we learn more and more about
343:34 - programming and more about command line
343:36 - arguments I dare say will become more
343:38 - comfortable with and tend to prefer the
343:41 - ability to customize commands using
343:43 - these command line arguments why
343:44 - productivity it tends to make you faster
343:46 - because you get into the habit of
343:48 - knowing exactly how you can configure
343:49 - your software without having to manually
343:52 - answer questions and case in point all
343:54 - of this time have we been running python
343:57 - of something dot Pi you could imagine
343:59 - not doing that you can imagine typing
344:01 - only python hitting enter and then
344:04 - you're prompted for the name of the file
344:05 - you want to run so you type in
344:06 - something.pi and then it runs not a big
344:09 - deal but I I would argue that over time
344:11 - you're going to get a little tired of
344:12 - that tedium and you would much prefer to
344:14 - just automate the command again and
344:16 - again and again especially with little
344:17 - conveniences like being able to hit up
344:19 - and down in your keyboard history so as
344:22 - to rerun those same commands automation
344:24 - is Big too if you emerge from a class
344:26 - like this and start using python to
344:28 - automate processes at work or for
344:30 - personal projects or the like the
344:32 - ability to specify all of your inputs on
344:34 - the one line just means you can get work
344:35 - done more quickly so hands down
344:38 - absolutely using command line arguments
344:40 - is a more Arcane feature of systems that
344:43 - most of us are no longer as familiar
344:45 - with because of Windows and Mac OS and
344:48 - other operating systems that have
344:49 - buttons and gui's and menus but the more
344:51 - comfortable yet you get with programming
344:53 - I dare say the more you will tend to
344:55 - prefer these capabilities because they
344:57 - allow you to do things more quickly
345:00 - with that said allow me to propose that
345:02 - we take a turn toward yet another
345:05 - package that's particularly popular and
345:08 - just as easy to install all toward an
345:10 - end of using apis now apis are not
345:13 - something that's python specific more
345:15 - generally an API is an application
345:17 - programming interface and it can refer
345:20 - to python files and functions but often
345:23 - apis really refer to third-party
345:25 - services that you and I can write code
345:27 - that talk to many apis but not all live
345:31 - on the internet these days so that so
345:33 - long as you have a browser or so long as
345:35 - you have some experience with Python
345:37 - Programming or programming in any
345:39 - language you can write code that in
345:41 - effect pretends to be a browser connects
345:44 - to that third-party API on a server and
345:47 - download some data that you can then
345:49 - incorporate into your own program now
345:51 - how do you do this well python has a
345:53 - very popular package that you can
345:55 - install via pip called requests the
345:58 - requests Library allows you to make make
346:00 - web requests internet requests using
346:03 - python code essentially as though you
346:06 - were a browser yourself you can automate
346:09 - therefore the retrieval of URLs that
346:11 - start with HTTP or https the
346:14 - documentation for this library is a URL
346:16 - like this but it too can be installed at
346:17 - the command line and even though it's
346:19 - third party it's one of the most popular
346:21 - and commonly used packages out there in
346:23 - Python and this too is one of the
346:25 - reasons again that python is so popular
346:27 - there's just so many solutions to
346:29 - problems that you and I have or are
346:31 - invariably going to have when we write
346:33 - projects of our own there's just a
346:35 - really vibrant ecosystem a really
346:37 - Vibrant Community of Open Source
346:39 - software that's that easy for us to
346:41 - install let me go back to my terminal
346:43 - window now and run pip install requests
346:46 - in order to install this package on my
346:48 - own system and after some lines of
346:49 - output I'll see that it's successfully
346:51 - installed now let's go ahead and create
346:53 - a new file here for instance
346:55 - itunes.pi it turns out that Apple has
346:58 - its own API for their tune service the
347:01 - software that provides you with the
347:02 - ability to download and search for music
347:03 - and songs and other information as well
347:05 - and it turns out that let me go back
347:07 - over to my computer here and open up a
347:09 - browser like Chrome and let me go ahead
347:11 - and visit this URL here https colon
347:14 - slash
347:15 - itunes.apple.com search question mark
347:19 - entity equal song Ampersand limit equals
347:22 - one Ampersand term equals Weezer now I
347:25 - constructed this URL manually by reading
347:28 - the documentation for Apple's API
347:30 - application programming interface for
347:32 - iTunes and what they told me is that if
347:34 - I want to search for information about
347:36 - songs in their database I should specify
347:39 - entity equals song so that it's songs
347:41 - and not albums or artists or something
347:42 - like that if I just want to get back
347:44 - information on one song I'm going to
347:46 - provide limit equals one and if the band
347:48 - I want to search for the artist is
347:50 - Weezer I should specify term equals
347:52 - Weezer so with this if I go ahead and
347:55 - hit enter and visit this URL I actually
347:57 - end up with a text file and my downloads
347:59 - folder on my Mac if I go ahead and open
348:01 - that text file that my browser just
348:03 - downloaded we'll see all of this text
348:04 - here which at first glance might look a
348:06 - bit cryptic but it actually follows a
348:08 - pattern notice this curly brace at the
348:10 - start and notice this closed curly brace
348:12 - at the end notice this open square
348:14 - bracket here and notice this closed
348:17 - square bracket here and in between those
348:19 - pieces of syntax are a whole bunch of
348:21 - strings and values in fact a whole bunch
348:24 - of key value pairs what we're looking at
348:26 - here is a standard text format known as
348:28 - Json JavaScript object notation which
348:31 - yes is technically related to yet
348:32 - another programming language called
348:34 - JavaScript but Json itself is typically
348:37 - used nowadays as a language agnostic
348:40 - format for exchanging data between
348:42 - computers by language agnostic I mean
348:44 - you don't have to use JavaScript you can
348:46 - use python or any other language to read
348:48 - Json or write it as well and it's a
348:51 - completely text based format which means
348:53 - that if I visit that URL with my browser
348:55 - what gets downloaded is just a bunch of
348:57 - text but that text is formatted in a
349:00 - standard way using curly braces and
349:02 - square brackets using quotes and some
349:05 - colons that ultimately contains all of
349:07 - the information in Apple's database on
349:09 - Weezer's song at least the first one
349:11 - because I limited it to one in their
349:14 - database and that's an API an
349:15 - application programming interface a
349:17 - mechanism whereby I can access data on
349:20 - someone else's server and somehow
349:21 - integrate it into my own program now of
349:25 - course my browser Chrome is not
349:26 - something I wrote I should actually
349:28 - write some python code that perhaps
349:30 - pretends to be a browser to grab the
349:32 - same data so let's do that let me go
349:34 - back to vs code here and let me write a
349:36 - program with code itunes.pi and we're
349:39 - going to write some code via which I can
349:41 - then use the iTunes API and in turn
349:45 - python to get information about any band
349:47 - that I might want I'm going to go here
349:49 - and import first the requests Library
349:52 - which I installed earlier in order to
349:54 - make those HTTP requests I'm going to go
349:57 - ahead and import the sys Library via
349:59 - which I'll have the ability to use
350:01 - command line arguments like
350:02 - specification of the band that I want to
350:04 - search for if not Weezer and then down
350:06 - here I'm going to go ahead and insert
350:08 - some error checking to say if the length
350:11 - of cis.orgv does not equal 2 so if the
350:16 - user does not provide me with the name
350:17 - of the file they want to run and the
350:19 - name of a band and that's it you know
350:22 - what let's just go ahead and exit for
350:24 - now I could provide a more explanatory
350:26 - message but for now I'm going to keep
350:27 - things simple and just exit the program
350:29 - prematurely so that I can trust
350:31 - Hereafter that sys.rv has what I want
350:34 - and now I have the opportunity to use
350:37 - the requests library to write some
350:39 - python code that effectively is
350:41 - pretending to be a web browser so as to
350:44 - connect to that same https URL on
350:47 - Apple's own server so now that I've
350:49 - guaranteed that the user has typed in
350:51 - not just the name of the file but also
350:53 - the name of a band at the prompt giving
350:55 - me a length of two for sys.rv let's go
350:58 - ahead and execute requests.get which is
351:01 - a function inside of the requests
351:03 - package that will literally get some
351:05 - response from a server and the URL that
351:07 - I want to get is exactly the same as
351:09 - before https colon slash
351:12 - itunes.apple.com search question mark
351:15 - entity equals song Ampersand limit
351:17 - equals one Ampersand term equals
351:20 - previously Weezer but let's make this
351:22 - program a little interactive and
351:24 - actually allow the human to specify at
351:27 - the command line what artist they'd like
351:29 - to search for so I'm going to go ahead
351:30 - and close my quote early and just append
351:33 - using the concatenation operator as in
351:36 - the past
351:37 - sis.orgv bracket one and now it'd
351:40 - actually be nice to store the response
351:42 - from the server in a variable so I'm
351:44 - going to go ahead and say response
351:46 - equals and to store all of the response
351:48 - that comes back from the server in a
351:50 - variable called response down here now
351:52 - I'd like to just understand what the
351:54 - server is returning to me to make sure I
351:56 - know how next to proceed so this isn't
351:58 - going to be very pretty yet but I'm
351:59 - going to go ahead and print out
352:01 - response.json which ensures that the
352:04 - data I'm getting back is formatted on my
352:06 - screen as exactly that Json the same
352:08 - text format as we saw on my screen it's
352:11 - not a useful program yet I'm really just
352:13 - learning along the way but let me go
352:15 - ahead now and increase the size of my
352:17 - terminal window and run python of
352:19 - itunes.pi and type in the name of a band
352:21 - like Weezer and hit enter
352:24 - and what we see on the screen formatted
352:26 - almost the same as before is exactly
352:29 - that same text but what you'll see here
352:31 - is that this has been standardized now
352:33 - as a python dictionary what indeed
352:36 - Apple's returning is technically a Json
352:39 - response JavaScript object notation but
352:41 - python the requests library is
352:43 - converting it to a python dictionary
352:46 - which happens to use wonderfully
352:48 - coincidentally almost the same syntax it
352:50 - uses curly braces to represent the
352:52 - dictionary here and a closed curly brace
352:54 - to represent the end of it here for any
352:56 - lists therein it uses a square bracket
352:59 - here and a closed square bracket down
353:01 - here it uses quotes single quotes in
353:04 - this case or equivalently double quotes
353:05 - to represent the keys in that dictionary
353:08 - and after a colon it stores the value of
353:11 - that key and so you'll see that indeed
353:13 - we have a result count key whose value
353:16 - is one but then a more interesting
353:18 - results key called results whose value
353:21 - is this entire list of data now honestly
353:25 - this is such a big blob of text that
353:27 - it's going to take me forever to wrap my
353:28 - mind around what I'm seeing so let me
353:30 - propose temporarily we use another
353:32 - library in Python that will allow me to
353:35 - format my data a little more cleanly it
353:37 - turns out that python also comes with a
353:40 - special Library uh called Json that
353:42 - allows you to manipulate Json data and
353:45 - even just printy print it that is
353:46 - formatted in a way that's going to be
353:48 - way easier for you and I to understand
353:49 - so let me go back to my code here let me
353:53 - shrink my terminal window and let me
353:55 - propose that just temporarily again we
353:57 - do this let me import this additional
354:00 - Library Json which comes with python so
354:02 - I don't need to install it manually with
354:03 - Pip and let me go ahead now and not just
354:06 - print out response.json which was that
354:09 - Big Blob of hard to understand text let
354:11 - me go ahead and use one other function
354:13 - here called Json dot dump s for dump
354:17 - string and pass to that function that
354:20 - response.json return value so again I'm
354:23 - just introducing an another function who
354:25 - I claim it has a purpose in life of
354:27 - pretty printing nicely formatting on the
354:30 - screen the exact same information and I
354:32 - know this from the documentation having
354:33 - done this before but I'd like things to
354:35 - be nicely indented and according to the
354:37 - documentation if I pass in a named
354:39 - parameter of indent equals 2 that's
354:42 - going to indent everything at least two
354:44 - spaces I could do four or something else
354:46 - but it's going to be enough to help me
354:48 - wrap my mind around what the data is I'm
354:50 - getting back because again I'm just
354:52 - learning along with you so let me
354:54 - increase the size of my terminal window
354:55 - again let me run python of itunes.pi and
354:58 - again let's search for Weezer and hit
354:59 - enter and now notice it's still a little
355:03 - bit cryptic because there's a lot going
355:04 - on here but my gosh I can totally read
355:07 - this more easily now notice now that I
355:10 - still see the first curly brace which
355:12 - means hey this is a dictionary in Python
355:14 - a collection of keys and values the
355:17 - first key is called result count it
355:19 - happens to be displayed in double quotes
355:20 - now but that's just an issue of
355:22 - formatting it could be double or single
355:23 - so as long as we're consistent the value
355:26 - of that key is one why well I told the
355:29 - URL to only limit the responses to one
355:31 - Weezer song so I've gotten a result set
355:33 - of one if I increase that limit I could
355:35 - probably get more then the interesting
355:37 - part of this response is really the data
355:39 - itself notice in the results key here
355:42 - there's a really big value the value is
355:46 - a python list as implied
355:49 - by this square bracket what does this
355:51 - list contain well I know from skimming
355:54 - it earlier that this contains one
355:56 - dictionary and that's why we see another
355:58 - curly brace here
356:00 - so again if this gets a little more
356:03 - complicated keep in mind that a
356:04 - dictionary is just a collection of key
356:07 - value Pairs and python uses curly braces
356:09 - to indicate as much it is perfectly
356:12 - reasonable for a dictionary to be inside
356:15 - of another dictionary if the value of
356:17 - some key itself is another dictionary so
356:20 - this is a common Paradigm and even
356:21 - though it might seem a bit cryptic it's
356:24 - just something that allows us to
356:25 - associate more keys with more values now
356:28 - most of this information I probably
356:29 - don't care about for instance according
356:31 - to Apple the unique identifier for
356:33 - Weezer is apparently 115
356:36 - 234. that might be useful if I'm making
356:39 - my own database and I want this to be
356:40 - searchable but for today's purposes all
356:43 - I care about is the name of the track
356:44 - otherwise called track name as key and
356:48 - the first song and only song because we
356:50 - limited it to one that we got back from
356:52 - iTunes here is the song that you might
356:54 - know by Weezer called say it ain't so
356:57 - so now I have a bit of a clue if my goal
357:00 - here is to implement a program called
357:03 - itunes.pi that doesn't just dump the
357:05 - response from the server which is
357:06 - admittedly very cryptic but to print out
357:09 - all of the songs that iTunes has for the
357:12 - band called Weezer maybe I can iterate
357:15 - over this somehow so let me backtrack
357:16 - here's the key called track name it is
357:20 - inside of a dictionary that is the value
357:23 - of results here
357:25 - so how can I go about getting this well
357:27 - let me go ahead and try this let me go
357:29 - ahead and Shrink my terminal window back
357:31 - down and let me propose now for one
357:34 - final flourish we don't just lazily
357:36 - print out the contents of that response
357:38 - because that's not interesting or pretty
357:39 - for anyone let's do this let me go ahead
357:42 - and create a new variable just for the
357:44 - sake of discussion called o for object
357:46 - and I'm going to go ahead and call O
357:49 - equals response dot Json just a store
357:52 - that Json response specifically in a
357:55 - variable called o but I could name it
357:57 - anything I want and now I'm going to do
357:59 - this
358:00 - for each result in that object's key
358:05 - called results go ahead and print out
358:08 - that result track name and notice I have
358:12 - used exactly the same capitalization
358:14 - track name has a capital N results is
358:17 - all lower case and let me rewind before
358:19 - we run the actual program in line eight
358:21 - we are making an HTTP request using
358:24 - python to the server just like you and I
358:25 - as humans type URLs into a browser and
358:28 - hit enter this is the python equivalent
358:30 - thereof I am then on line 10 just
358:33 - grabbing from that variable that
358:34 - contains the server's response the Json
358:37 - object that I care about the thing
358:39 - between those curly braces at the very
358:42 - top and the bottom but because we've
358:44 - poked around and because I read the
358:46 - documentation earlier I know that that
358:48 - object has a key called results and that
358:51 - results key again is a list now at the
358:54 - moment that list contains only one song
358:56 - Say It Ain't So because I limited my
358:58 - response to one but even so my Loop will
359:01 - work it's just going to iterate once and
359:02 - each time through that loop it's going
359:04 - to print the current results track name
359:07 - if I want to make this even more
359:08 - interesting let me change this limit now
359:10 - from 1 to 50 so I'll at least get back
359:12 - 50 track names instead let me go ahead
359:15 - now and increase the size of my terminal
359:17 - once more and go ahead now and run
359:19 - python of itunes.pi searching again for
359:22 - a band like Weezer and here we go
359:25 - and voila there are 50 songs that iTunes
359:29 - has for Weezer and if we scroll back up
359:31 - to the top here we'll see that the very
359:34 - first one there is indeed Say It Ain't
359:36 - So but now we got undone The Sweater
359:38 - Song Buddy Holly apparently another
359:40 - rendition of Say It Ain't So perhaps
359:42 - from another album another Buddy Holly
359:43 - undone my name is Jonas and so forth
359:47 - questions now on this program which
359:49 - integrates python with a real world
359:52 - third-party API
359:55 - yeah hi uh can we use break instead of
359:58 - system.exist exit good question but no
360:01 - break again is used to break out of
360:04 - things like Loops like we saw earlier
360:06 - sys.exit is used to break out of the
360:09 - whole program itself use break for Loops
360:11 - for now and use sys.exit to terminate
360:13 - the whole program good question
360:16 - other questions now on this program are
360:17 - others from where we bring the name of
360:21 - the key results
360:22 - from where do we get the name of the key
360:24 - uh results itself can we change the
360:27 - results name you cannot you so we could
360:29 - in our program so the keys that come
360:31 - back in that Json response to be clear
360:33 - come from itunes.apple.com some engineer
360:36 - some team of Engineers decided for us
360:39 - what all of those keys would be called
360:41 - including track name results result
360:43 - count and everything else you and I can
360:46 - absolutely store those same values in
360:48 - variables just like I'm doing here with
360:49 - o just like I'm doing here with result
360:51 - you can rename those keys anything you
360:53 - want using python variables but the Json
360:56 - response is coming from that third-party
360:59 - server
361:00 - other questions uh yes sir I have a
361:03 - question related to to Cow Say package
361:06 - so like uh yes so sort of what sort of
361:10 - uh ASCII Graphics uh is it capable of
361:13 - outputting the cow say package um I
361:16 - would refer you to the URL in the slides
361:18 - earlier uh if only because it's more
361:20 - thorough they have not just cows but
361:22 - Tyrannosaurus Rexes and several other
361:24 - animals as well I should emphasize that
361:26 - this is not a package I suspect you will
361:28 - use much in the real world it's really
361:29 - just meant to be representative of the
361:31 - types of packages you can install but
361:33 - allow me to refer to the documentation
361:35 - for what more is there but ASCII art uh
361:38 - is the all we had before there were
361:40 - emojis let alone gifs and jpegs and
361:42 - pings but it's what is immortalized in
361:45 - cow say well allow me to transition us
361:47 - back now to one final capability of
361:50 - python which is that you yourselves have
361:53 - the ability to make your own libraries
361:55 - up until now we've been writing all of
361:58 - our functions in our one file hello pi
362:01 - and everything since and now that we've
362:03 - introduced modules in Python like like
362:06 - random and statistics we can import
362:08 - those that come with python but that's
362:10 - other people's code as well and we've
362:12 - now used Pip this package manager to
362:14 - install third-party packages as well in
362:16 - the system and using other people's code
362:18 - still but to come full circle what if
362:20 - you yourself find yourself implementing
362:23 - the same kinds of functions again and
362:25 - again or you find yourself opening up
362:27 - old programs copying and pasting code
362:29 - you wrote into new programs because you
362:31 - have the same problem yet again a good
362:33 - practice would be to somehow bundle up
362:36 - that code you keep reusing and make your
362:39 - own python module or package you can
362:41 - keep it local on your own Mac or PC or
362:43 - Cloud Server or you can go through the
362:46 - steps of actually bundling it up making
362:47 - it free and open source and putting it
362:49 - on something like Pi Pi for others to
362:52 - use as well okay I'm going to go ahead
362:54 - and run code of sayings.pi to create a
362:56 - brand new file called sayings.pi which
362:58 - is going to be my own sayings module I'm
363:01 - going to define a couple of simple
363:02 - functions in there I'm going to define a
363:04 - hello function that's going to take a
363:05 - name parameter is input and that
363:08 - function is simply going to print out an
363:10 - F string that contains hello comma and
363:13 - then in curly braces whatever that
363:14 - person's name actually is then I'm going
363:17 - to go ahead and Define one other
363:18 - function a goodbye function that has def
363:21 - goodbye also takes a name as its input
363:24 - and then that prints out by contrast an
363:26 - F string that says goodbye comma and
363:29 - then in curly braces name and now just
363:32 - for good measure just so I can be sure
363:33 - that these functions are working as
363:35 - expected I'm going to go ahead and
363:36 - Define a main function in here too just
363:38 - for the purposes of testing and I'm
363:40 - going to go ahead and Define a main
363:41 - function that simply does a couple of
363:44 - tests for instance it calls uh hello of
363:48 - quote unquote worlds shall we say and
363:51 - then it's going to call goodbye of quote
363:53 - unquote world as well and hopefully what
363:55 - I'll see on the screen then is hello
363:56 - world and goodbye world when I run this
363:58 - program of course as always I need to
364:00 - explicitly tell python to call that
364:02 - function so I'm going to call Main at
364:04 - the very bottom of this file all right
364:05 - let's try it out python of sayings.pi
364:08 - enter and indeed I see Hello World and
364:11 - goodbye world and so I think it's
364:12 - reasonable for me to assume that these
364:14 - functions albeit simple are pretty
364:16 - correct at this point but now suppose
364:18 - that I want to use these functions as
364:20 - though I've indeed created my own
364:22 - Library my own python module that makes
364:25 - available a hello function for me or
364:27 - anyone else who wants to use it or a
364:28 - goodbye function as well well let me go
364:31 - ahead and open up again say dot Pi but
364:33 - start fresh and rather than have the cow
364:35 - say anything let me go ahead and have my
364:38 - own Library do the talking so I'm going
364:41 - to go ahead and as before import CIS so
364:43 - that I have access to command line
364:45 - arguments and from my own module called
364:48 - sayings I'm going to import hello so
364:50 - because I created a file called
364:52 - sayings.pi I can say from sayings and
364:56 - it's inferred by python that I mean
364:57 - sayings.pi at least in this current
364:59 - directory but I specifically am going to
365:01 - import just one of the functions for now
365:03 - namely hello and now I can do something
365:05 - like this if if the user obliges by
365:07 - giving me two command line arguments
365:09 - which I can check by just checking the
365:11 - length of sys.r V I'm going to then go
365:14 - ahead and call this new hello function
365:16 - passing is its input assist.org V
365:19 - bracket 1 which should hopefully be the
365:21 - person's name which I'm going to expect
365:22 - them to type at the prompt so here we go
365:24 - I'm going to go down to my terminal
365:26 - window run python of say dot pi and my
365:29 - own name because I want my own name to
365:31 - end up in the command line arguments and
365:32 - therefore be part of the hello so when I
365:35 - hit enter in just a moment I should
365:36 - hopefully see hello comma David so here
365:39 - we go enter
365:41 - and huh I see Hello World Goodbye World
365:44 - and then I see hello David so why is
365:48 - this happening well it turns out even
365:50 - though I've done everything according to
365:52 - our own past practice it's not really
365:55 - the right way to go about calling Maine
365:58 - after all if I'm blindly calling Maine
366:00 - here at the bottom of my file that means
366:02 - whenever this file is loaded by python
366:04 - Maine is going to get called and
366:06 - unfortunately that's true even if I'm
366:08 - importing this file or just a function
366:11 - from this file as I am here in my say
366:13 - dot Pi program this is to say on line
366:15 - three here when I say from sayings
366:17 - import hello this effectively tells
366:19 - python to go find that module sayings.pi
366:22 - read it from top to bottom left to right
366:24 - and then import specifically the hello
366:26 - function unfortunately by the time
366:28 - python has read the file from top to
366:30 - bottom left to right that last line of
366:32 - code recall is to call main main gets
366:35 - called No Matter What so really the
366:37 - right way to go about using a main
366:40 - function which does solve that problem
366:42 - of ensuring that we can order our
366:43 - functions however we want and all the
366:45 - functions will be defined at the time
366:47 - they're invoked I shouldn't be
366:49 - unconditionally calling main at the
366:51 - bottom of this or really any of my
366:52 - programs I should instead use this
366:54 - technique I should say if underscore
366:57 - underscore name underscore underscore
366:59 - equals equals quote unquote underscore
367:02 - underscore main underscore underscore
367:04 - close quote then and only then should
367:07 - you actually call Main well it turns out
367:10 - that this variable is a special symbol
367:12 - in Python underscore underscore name
367:14 - underscore underscore and notice that vs
367:16 - code because of its font isn't quite
367:18 - showing those two underscores but
367:19 - they're indeed there to the left and the
367:21 - right this is a special variable whose
367:23 - value is automatically set by python to
367:25 - be quote unquote main when you run a
367:28 - file from the command line as by running
367:31 - python of sayings.pi so Watch What
367:34 - Happens now with this additional
367:36 - conditional in sayings.pi if I run
367:38 - python of sayings.pi it's still works as
367:41 - before because name will be
367:45 - automatically set to underscore
367:47 - underscore main underscore underscore
367:49 - when I run this file using python of
367:52 - sayings.pi but notice this name is not
367:55 - going to be set to quote unquote main
367:57 - it's going to be set to something else
367:58 - technically the name of the module when
368:00 - I instead import the file like I do here
368:04 - so this highlighted line of code even
368:06 - though it will cause python to go find
368:08 - sayings.pi read it from top to bottom
368:10 - left to right it's going to ignore the
368:12 - call to main this time because it's
368:13 - wrapped in that conditional in this case
368:15 - when I'm importing a file and not
368:18 - running it directly at the command line
368:19 - main will not get called by definition
368:22 - of that name's value so let me go ahead
368:24 - and try this instead of running python
368:26 - of sayings.pi which is the module which
368:29 - contains that conditional main let me go
368:31 - ahead here on run python of say dot Pi
368:34 - which is the program here before me that
368:37 - Imports hello from sayings but because
368:40 - of that conditional it's not going to
368:41 - say it hello to anyone else except
368:44 - me in this case all right we're here at
368:47 - the end of our week it's only
368:48 - appropriate I think to import something
368:50 - other than hello why don't I go ahead
368:52 - and import not hello but goodbye from
368:54 - here let me go ahead and call goodbye
368:57 - instead of hello and this time when I
368:58 - run python of say.pi I'm not going to
369:00 - type my own name allow me if I may to
369:02 - type in the whole world so that our
369:04 - final sentiment today is goodbye World
369:07 - indeed that's it for this week we will
369:09 - see you next time
369:17 - [Music]
369:25 - thank you
369:29 - foreign
369:32 - [Music]
369:38 - this is cs50's Introduction to
369:40 - programming with python my name is David
369:42 - Malin and this is our week on unit tests
369:45 - up until now we've been writing a lot of
369:47 - code and you might have been testing
369:48 - your code by running your program and
369:50 - passing in some sample inputs and
369:52 - running it again and passing in some
369:53 - sample inputs or you might have been
369:55 - waiting for us to test your code instead
369:57 - but it's actually much better practice
369:59 - to get into the habits sooner rather
370:01 - than later of testing your own code
370:03 - using Code of your own in fact whether
370:06 - you're writing a personal project or
370:07 - working in industry it's very common
370:09 - nowadays to not only write code to solve
370:10 - the problems that you want to solve but
370:12 - also to write a little extra code to
370:15 - test the code that you wrote and that's
370:17 - what we're going to focus on today
370:18 - writing our own tests so as to be all
370:20 - the more confident all the more certain
370:22 - that the problems we have been trying to
370:24 - solve are in fact solved correctly so
370:26 - let's rewind a few weeks now to a
370:29 - program we wrote a while back namely to
370:31 - to calculate uh numbers and specifically
370:34 - we left off with this calculator on
370:37 - trying to compute the power of a number
370:39 - like x squared or where X might be two
370:42 - or three or some other number as well
370:44 - well let me go ahead and resurrect that
370:46 - file by going into my terminal window
370:48 - here and running again code of
370:50 - calculator dot pi and let me go ahead
370:53 - and pick up where we left off way back
370:55 - when by defining a main function here
370:57 - and then in my main function I did
370:59 - something like this I said x equals int
371:01 - of input and I asked the user what's X
371:04 - question mark and then I immediately
371:07 - went ahead and printed out something
371:08 - like x squared is and then I passed in
371:12 - as a second argument to print the result
371:14 - of calling a function called Square
371:16 - passing in that value X now of course I
371:19 - haven't yet implemented the square
371:21 - function so let's define that as well
371:23 - let me go down a couple of lines and
371:24 - Define square and it takes an argument
371:27 - recall a parameter that at the time I
371:29 - called n for number so I'll do that
371:31 - again so I could technically choose any
371:33 - name for this variable and I recall did
371:35 - this I returned n times n and there were
371:39 - multiple ways to do this the squaring a
371:41 - number is multiplying it by itself so I
371:43 - could also use other syntax here but
371:45 - this is what we ultimately settled on
371:46 - and then recall that I ultimately called
371:49 - Main in order to kick off the process of
371:51 - running this program so just as a test
371:53 - manually let me go ahead and run python
371:55 - of calculator.pi and hit enter what's X
371:58 - let's start with two all right x squared
372:01 - is four I think that's correct so let's
372:03 - run it again just for good measure
372:04 - python of calculator.pi let's type in 3
372:07 - for X this time x squared is nine and I
372:10 - think that's correct and I might be
372:12 - feeling pretty good at this point and I
372:13 - go off and submit my code to a course or
372:16 - I post it on the internet for others to
372:17 - use but I haven't really methodically
372:19 - tested this code and it's not
372:21 - necessarily the case that it works
372:23 - entirely in fact I haven't really
372:24 - considered a number of corner cases I
372:26 - went with some pretty obvious numbers
372:28 - like two and three but what about zero
372:31 - what about negative numbers what about
372:32 - any number of other infinite numbers
372:34 - well we're not going to test an infinite
372:35 - number of inputs to this because the
372:37 - program would never halt but we should
372:39 - test some representative inputs
372:41 - ultimately but before we do that let's
372:43 - get into the habit of making sure that
372:45 - Maine isn't always called let's adopt
372:47 - this habit again of doing if underscore
372:49 - underscore name underscore underscore
372:51 - equals equals quote unquote underscore
372:54 - underscore main underscore underscore
372:57 - only then should we execute Main and I'm
372:59 - doing this now proactively because I
373:01 - want to make sure that when I import my
373:05 - Square function perhaps from another
373:07 - library from another file treating it as
373:09 - though it's a library I want to make
373:10 - sure that main is not just automatically
373:12 - called itself now what do I want to do
373:16 - from here now that I've modified this
373:18 - program as follows well let's go ahead
373:20 - and write a completely different program
373:22 - whose sole purpose in life is to now
373:23 - test this program so I've got my actual
373:26 - calculator and calculator.pi I've
373:29 - readied myself to call Main
373:31 - conditionally so that I can safely
373:33 - import one or more things from this file
373:35 - in another file well what should I that
373:37 - other file being well by convention I'm
373:39 - going to create a file that's called
373:40 - test underscore and then because the
373:42 - thing I'm testing is this calculator
373:44 - itself let's call this file test
373:46 - calculator dot Pi that's going to give
373:49 - me a new tab in which I can write a
373:51 - brand new program whose purpose in life
373:52 - is now specifically to test that program
373:54 - but really that program specific
373:56 - functionality built into that program is
373:58 - the square function let's focus on
374:01 - testing that function all right so how
374:03 - do I access that function in this
374:05 - program well recall that I can import a
374:07 - function from another file as though
374:09 - it's a library of my own a so-called
374:11 - module so I'm going to do this from
374:13 - calculator import Square
374:16 - I could go ahead and just import Square
374:18 - itself but then I would have to prefix
374:21 - my use of square recall by saying
374:23 - calculator dot everywhere and it's just
374:25 - a little cleaner to just import the one
374:26 - function and now let me go ahead and do
374:29 - this let me go ahead and Define a
374:31 - function called test Square this two is
374:34 - a convention if you want to test a
374:35 - function called Square your function for
374:38 - testing should be called test underscore
374:40 - square or alternatively you could do
374:42 - Square underscore test but I'll adopt
374:44 - this convention here now what kind of
374:46 - tests can we do well I don't dislike the
374:48 - test I ran earlier testing x equals 2
374:51 - and x equals 3 but every time I want to
374:54 - test my program previously I would have
374:55 - to do that manually and that's going to
374:57 - get tedious it's not going to be easy
374:58 - for someone else to test it and if I'm
375:00 - actually working in the real world it
375:01 - would be nice if I could automatically
375:03 - have my program tested again and again
375:04 - by having some automated process run mic
375:07 - own code so let's do that and take the
375:09 - human ultimately out of the equation so
375:11 - how might I go about testing the square
375:13 - function that I've now imported per line
375:16 - one well in my test Square function why
375:18 - do I do this if the result of calling
375:21 - square of 2 does not equal 4 why don't
375:25 - we go ahead and print an error message
375:26 - because I know that in the real world 2
375:28 - squared should equal 4 so if square of 2
375:32 - does not equal 4 there's a bug in my
375:34 - program there's a bug in my function
375:36 - I've made a mistake so let me go ahead
375:37 - and print something like that so I or
375:39 - someone else knows 2 squared was not 4
375:42 - for instance so I could print out
375:44 - anything here what should I maybe next
375:46 - test well let's do more than one test
375:47 - let's say if the square of 3 does not
375:50 - equal 3 squared 9 then let's go ahead
375:53 - and print out that 3 squared was not 9.
375:56 - so I haven't done any more testing than
375:58 - I did earlier but I've baked those two
376:01 - tests x equals two and x equals 3 into
376:04 - my own code here so I can now run those
376:07 - tests automatically if you will now it's
376:09 - not enough to just Define a function
376:12 - called test Square I actually if I want
376:14 - to run this function need to call it
376:15 - somehow in our convention for doing that
376:17 - is the same as always in this function
376:19 - here in this file too let me Define Main
376:21 - and Main sole purpose in life is going
376:23 - to be to test square and now at the
376:27 - bottom of this file as before let me go
376:29 - ahead and adopt my Convention of if
376:30 - underscore underscore name underscore
376:32 - underscore equals equals quote unquote
376:34 - underscore underscore main underscore
376:36 - underscore then go ahead and call Main
376:39 - so a lot of this is just boilerplate
376:41 - like we've seen this before defining a
376:42 - main function and calling a function to
376:44 - kick off some process now adding the
376:46 - conditional at the bottom of the file to
376:47 - make sure I'm only conditionally calling
376:49 - main just in case I import anything from
376:51 - this file elsewhere so let's see let's
376:54 - go ahead and test my code now let me go
376:56 - ahead and run test calculator with
376:59 - python and hit enter and nothing outputs
377:03 - nothing outputs but I think it's okay I
377:06 - think no output is good because look at
377:08 - my test Square function I'm not printing
377:11 - anything if all seems well so let's
377:14 - let's demonstrate as much by going back
377:15 - to my calculator and let me break it let
377:17 - me introduce a bug maybe I didn't even
377:19 - get it right the first time maybe my
377:21 - code originally looked like this I
377:22 - wasn't thinking I forgot my squares and
377:25 - so I thought that the square of a number
377:27 - is n plus n instead of n times n so a
377:30 - reasonable mistake to make perhaps
377:31 - arithmetically let me now go back to my
377:34 - test calculator which I'm not going to
377:35 - change but I am going to rerun it python
377:37 - of testcalculator.pi I'm going to cross
377:40 - my fingers here but for naught I'm going
377:42 - to see immediately that 3 squared was
377:45 - not 9. now what is it well let's see
377:49 - when your tests fail how can we put our
377:51 - finger on what's wrong well it's a
377:53 - little interesting that I completely
377:54 - broke my Square function and yet only
377:57 - one of these tests is failing it looks
377:59 - like this test lines nine and ten is
378:02 - fine because I'm not seeing that output
378:04 - but of course these two lines this test
378:07 - is failing because 3 squared is not 9
378:10 - when I'm using plus so just to be clear
378:12 - here why is my function only partially
378:16 - broken
378:17 - just to be clear why am I seeing only
378:19 - one error instead of two even though the
378:22 - square function is now mathematically
378:24 - broken because two plus two is four yeah
378:27 - I mean it's as simple as that I just got
378:28 - lucky that two plus two is the same
378:30 - thing as two times two so this is one of
378:32 - those Corner cases and this is why it's
378:34 - good to be in the habit of not just
378:35 - testing one thing but test several and
378:37 - make sure you're covering your bases so
378:38 - to speak so I got lucky here and that
378:40 - explains why I'm seeing only one error
378:43 - even though the function itself is
378:44 - flawed but let me propose that there's
378:46 - another way we could do this because
378:47 - honestly if I extrapolate from this
378:50 - simple example running not just two
378:52 - tests but three or four or ten or Twenty
378:56 - tests you can imagine that my God the
378:58 - code is going to get so much more
379:00 - complicated than the function itself I
379:01 - mean already look in calculator.pi the
379:04 - function in question is two lines long
379:06 - and yet in test calculator the fun code
379:09 - in question is five lines long like I've
379:12 - written more code to test my code than I
379:14 - actually wrote original code so the
379:16 - fewer lines of code code we can write
379:18 - when testing code I think the more
379:20 - likely you and I are to do it because
379:22 - it's going to be literally a little less
379:23 - work and just fewer opportunities for
379:25 - mistakes so what's another approach I
379:27 - can take here well it turns out in
379:29 - Python there is another keyword that we
379:32 - haven't yet used which is this here
379:33 - assert assert is a keyword in Python and
379:37 - some other languages as well that allow
379:39 - you to do exactly that as in English to
379:41 - assert that something is true to sort of
379:43 - boldly claim that something is true and
379:45 - if it is nothing's going to happen no
379:48 - errors are going to appear on the screen
379:49 - but if you assert something in Python
379:51 - and it is not true that is the thing
379:54 - you're insert asserting a Boolean
379:56 - expression is false you're actually
379:58 - going to see some kind of error on the
380:00 - screen so let's go ahead and try this
380:03 - new keyword as follows let me go back to
380:05 - my code here and just to make it a
380:07 - little simpler let me propose that I I
380:09 - use this new keyword as follows let me
380:12 - simply assert that the square of 2
380:15 - should equal 4. or so I've changed my
380:18 - logic instead of checking for not equals
380:20 - I'm now asserting very loudly that it
380:23 - should equal four and then on one
380:25 - additional line let me do the other test
380:27 - assert that the square of 3 equals
380:30 - equals nine and that's it no if no
380:33 - indented print I'm just going to assert
380:35 - more simply these two things that I want
380:38 - to be true well let me go ahead now with
380:41 - calculator.pi still broken I'm still
380:43 - using plus accidentally instead of
380:46 - multiplication let me go ahead now and
380:48 - run python of test calculator dot Pi
380:51 - crossing my fingers is always but it's
380:53 - not going to go well this time a whole
380:55 - lot of Errors seem to appear on the
380:57 - screen and if I scroll up here for this
380:59 - traceback we'll see that the thing that
381:01 - failed was this line here assert square
381:04 - of 3 equals equals nine now
381:06 - unfortunately when you're using the
381:08 - assert keyword it's not terribly user
381:10 - friendly it shows you the files and the
381:12 - line numbers involved but it does show
381:14 - you the specific line of code that
381:15 - failed the assertion that fail so to
381:17 - speak it's now kind of up to you and me
381:19 - to infer from this well wait a minute
381:22 - why is the square of 3 not equal to nine
381:24 - so it's not super user friendly but
381:26 - honestly it was like half as much code
381:27 - for me to write it's just two lines
381:29 - instead of those previous four but
381:30 - notice this little Remnant down here
381:32 - this was an assertion error and we have
381:35 - seen errors before we've seen errors
381:38 - before when we've made other mistakes in
381:40 - our code and in the past what was our
381:42 - solution
381:43 - for catching those errors
381:47 - how do we catch errors that seem to
381:50 - resemble this even though we've not seen
381:51 - this one before
381:53 - um
381:54 - yeah in Python we can use the try and
381:56 - accept keywords to try to do something
381:58 - optimistically except if something goes
382:01 - wrong do something else instead so this
382:03 - is a step forward in that I can at least
382:05 - catch this error but it's going to be
382:07 - perhaps a step backward in that I'm
382:09 - going to end up writing I'll admit in
382:10 - advance a little more code uh instead so
382:13 - let me go ahead and try this let me go
382:14 - back into my code here and instead of
382:17 - just asserting blindly let me go ahead
382:19 - as cholo proposed and try to do this
382:22 - first assertion except if there is an
382:25 - assertion error like we saw a moment ago
382:28 - then go ahead and print out something
382:30 - more user-friendly that explains what
382:32 - actually failed 2 squared is uh was not
382:36 - four and let me go ahead similarly and
382:39 - try to assert that the square of 3
382:41 - equals nine except if there's an
382:43 - assertion error there in which case I'm
382:46 - going to print out more user are
382:47 - friendly 3 squared was not 9. so I've
382:51 - taken a step forward but also a step
382:53 - back because now I have more code but I
382:55 - have at least introduced assertions and
382:57 - exceptions in a manner consistent with
382:59 - how we've seen in the past when
383:00 - something goes wrong you actually see an
383:02 - exception raised well let me go ahead
383:04 - and run this version of the program now
383:05 - instead python of testcalculator.pi
383:08 - crossing my fingers all right it still
383:12 - failed because I'm seeing output but
383:13 - we're back to at least user friendly
383:15 - output so that's at least progress in
383:18 - some way here but it's again more code
383:21 - than might have been ideal and in fact
383:22 - if we continue this further what if we
383:24 - actually want to add additional test
383:26 - cases here as well well it seems like we
383:29 - might end up writing way more code than
383:31 - would be ideal for instance where I'm
383:33 - testing two and three now I should
383:35 - probably test some negative numbers as
383:37 - well so why don't I go ahead and add in
383:39 - for instance let me go ahead and copy
383:40 - and paste this let me try to assert that
383:43 - the square of negative 2 equals equals 4
383:46 - which should be the case mathematically
383:48 - and if not let me go ahead and change
383:50 - this to say negative 2 squared was not 4
383:52 - and you know what let me go ahead and
383:54 - copy paste this again test another
383:56 - negative number just for good measure
383:57 - Let's test the square of negative 3
383:59 - which should equal 9 but if it doesn't
384:02 - let's go ahead and say that negative 3
384:05 - squared was not 9 and just to think
384:07 - aloud here what might be another good
384:09 - value to test I've tried two I've tried
384:11 - three I've tried negative two I've tried
384:13 - negative three I can't try in infinite
384:14 - numbers but there's at least something
384:16 - that's a little different in between
384:17 - those values let's try zero zero is an
384:19 - interest in case two just in case
384:21 - something might be wrong and Y zero I'm
384:23 - just going with instincts here right
384:25 - odds are positive numbers are generally
384:27 - going to behave the same negative
384:29 - numbers might generally behave the same
384:30 - zero might be a little anomalous there's
384:32 - no uh science to it necessarily but
384:35 - rather considering for yourself based on
384:36 - your own experience like what are the
384:38 - potential Corner cases based on the
384:40 - function you're trying to test I'm
384:41 - trying to test something mathematical so
384:43 - I want to test representative values so
384:45 - let me go ahead and paste in one more
384:46 - try except block let's assert that the
384:49 - square of zero should equal zero and if
384:52 - not I'll say something explanatory like
384:54 - zero squared was not zero now if I go
384:57 - ahead and run this python of test
385:00 - calculator dot pi and hit enter now I
385:03 - see multiple errors and this is
385:04 - interesting it's a bit of a clue because
385:06 - notice that sum but not all of these
385:09 - assertions are failing the one for two
385:12 - squared is apparently okay as we noted
385:14 - earlier recall that 2 squared happens to
385:18 - be 2 plus 2 so that bug doesn't really
385:20 - throw off our test but it's a good thing
385:21 - we tested for three it's a good thing we
385:23 - tested for negative two and negative
385:24 - three because all of those tests caught
385:26 - this error the zero test did not notice
385:28 - because 0 squared is of course zero but
385:31 - zero plus zero is zero so we're getting
385:33 - lucky or unlucky there depending on how
385:36 - you you view the glass is half full or
385:37 - half empty here we at least by way of
385:40 - having multiple tests caught this
385:42 - mistake somehow so it would be nice
385:45 - though if we weren't writing so much
385:48 - darn code here right because notice what
385:50 - I've done I have try accept try except I
385:53 - have all of these assertions I have a
385:55 - main function I have this if conditional
385:57 - at the bottom of my file I mean honestly
385:59 - who's going to want to write 31 lines of
386:01 - code now just to test a two-line
386:04 - function right no one's going to write
386:06 - test code like this if we're all writing
386:08 - so much more code to do the actual
386:10 - testing so people have solved this
386:13 - problem if you are in the habit of
386:14 - testing your code a lot or wanting to if
386:16 - I'm in the habit of wanting to test my
386:17 - code a lot if everyone else in the real
386:19 - world is in this habit of wanting to
386:20 - test their code why don't we create
386:22 - tools that make it a little easier to do
386:24 - so and in fact there is a mechanism for
386:27 - doing this whereby we can use a tool
386:29 - that's popularly called Pi test so Pi
386:32 - test is a third party program that you
386:34 - can download and install that will
386:36 - automate the testing of your code so
386:38 - long as you write the tests but what's
386:40 - nice about this library and others like
386:42 - it is that it adopts some conventions so
386:45 - that you don't have to write as many
386:46 - lines of code code yourself manually
386:48 - they do some of that automatically for
386:51 - you now this is a third party Library
386:52 - there's other libraries for unit tests
386:55 - so to speak that is testing units of
386:57 - your code some of them come with python
386:59 - itself we're proposing that we look at
387:01 - Pi test today because it's actually a
387:03 - little simpler than the unit testing
387:04 - Frameworks they come with python itself
387:06 - and what do we mean by unit testing unit
387:08 - testing is just a formal way of
387:09 - describing testing individual units of
387:13 - your program what are those individual
387:14 - units they're typically functions so
387:16 - unit tests are typically tests for
387:18 - functions that you have written now what
387:21 - does this mean in practice here well let
387:23 - me go back to my vs code here and let me
387:26 - propose that we simplify my test
387:29 - calculator significantly I'm going to go
387:31 - ahead and delete all of these tests
387:33 - which were
387:34 - which were accumulating to like 31 lines
387:37 - of code and let's see if we can distill
387:39 - the tests to their Essence using pi test
387:41 - from my same calculator program let me
387:44 - still import Square so I do still need
387:46 - that line of code so that I can test
387:48 - that specific function now I'm going to
387:50 - go ahead and Define a function just like
387:51 - I did before as follows I'm going to
387:53 - define a function called test Square
387:55 - Again by convention test underscore and
387:57 - the name of the function you want to
387:59 - test though it doesn't have to be that
388:01 - way and now I'm going to go ahead and
388:02 - make a few assertions I'm going to
388:04 - assert that the square of 2 should equal
388:06 - 4. I'm going to assert that the square
388:08 - of 3 should equal 9. I'm going to assert
388:11 - that the square of negative 2 should
388:14 - equal 4 and I'm going to insert that the
388:17 - square of negative 3 should equal 9 and
388:19 - lastly for now I'm going to assert that
388:22 - the square of 0 should equal 0. so I'm
388:25 - still using the assert keyword as I
388:27 - introduced earlier and even though it
388:29 - was a little tedious to type those I
388:30 - mean it's only eight lines of code now
388:32 - and they're so easy to type it's not try
388:34 - and accept in all of this wouldn't it be
388:37 - nice if something else someone else
388:39 - handled the try the accept the printing
388:43 - all of the standardization of actually
388:45 - running these tests and that that's
388:47 - where indeed Pi test comes into play per
388:50 - the documentation for pi test which can
388:52 - itself be installed with Pip install Pi
388:54 - test which we've used to install other
388:56 - libraries in the past you can look at
388:58 - the documentation here for all of its
389:00 - formal usage but fortunately Pi test is
389:03 - pretty user friendly as testing
389:04 - Frameworks go and it actually allows us
389:06 - to Dive Right In by just running Pi test
389:08 - on the code that we've written so if I
389:10 - go back to vs code here and look at my
389:12 - test calculator.pi which notice has no
389:15 - main function anymore it has no
389:17 - conditional it has no tries it has no
389:19 - accepts it has no prints it just has my
389:21 - few assertions Pi test and other
389:24 - libraries like it are going to automate
389:26 - the process of running these tests for
389:27 - me and informing me on the screen
389:31 - whether or not any of those tests failed
389:33 - so let me go ahead and do this I'm going
389:36 - to go ahead and increase the size of my
389:37 - terminal window for a moment just so we
389:38 - can see more on the screen and I'm going
389:40 - to run not python as I've been doing I'm
389:42 - going to run Pi test which again is this
389:45 - third party tool for running tests in
389:48 - your code I'm going to run Pi test of
389:50 - test underscore calculator so that same
389:52 - file I'm going to cross my fingers as
389:54 - always and hit enter and we'll see that
389:57 - ah something has failed now admittedly
390:00 - even though I do think you'll find that
390:02 - Pi test is relatively simple to use its
390:05 - output at least at first glance is not
390:07 - necessarily super user friendly so what
390:09 - are we seeing here well notice at the
390:11 - very top of my window is the command
390:13 - that I ran after my prompt right below
390:15 - that is a single F in red which means
390:18 - fail so not very encouraging I tried
390:21 - really hard here but fail is my grade on
390:23 - this program but let's see exactly what
390:25 - happened well if I look at this excerpt
390:27 - here under failures you'll see that test
390:29 - square is the function that failed all
390:31 - right that makes sense because that's
390:32 - the only one I wrote and you'll see here
390:34 - somewhat uh Arcane output describing
390:37 - what the error was so what you're seeing
390:39 - here is the first line of output equals
390:41 - equals four which is fine there's no red
390:43 - error message below that so that one's
390:45 - okay but this line of code here insert
390:47 - that square of 3 equals equals nine Pi
390:50 - test did not like that assertion because
390:52 - it didn't end up being true in fact per
390:55 - the red e at the start of this line
390:57 - You'll see that I'm effectively trying
391:00 - to assert that 6 equals equals nine now
391:04 - where did the six come from okay wait a
391:05 - minute if my test involves this notice
391:08 - that where 6 equals square of three this
391:10 - is saying that because I've called
391:12 - Square passing in a value of 3 it turns
391:15 - out its return value is 6 and of course
391:18 - mathematically 6 does not equal equal
391:20 - nine so that's why this is failing now
391:23 - Pi test is not as user friendly as
391:26 - telling you exactly why the bug is there
391:29 - or how to fix it this is really just a
391:31 - clue to you what must be wrong what
391:33 - you're seeing here is a clue that the
391:35 - first test passed because there's no red
391:37 - error below that line of code but this
391:39 - test failed somehow or other your Square
391:43 - function is returning six when passed in
391:46 - three instead of nine so at this point
391:49 - you sort of put your detective hat on
391:50 - you go back to your actual code and you
391:52 - think about in calculator.pi how in the
391:55 - world is line seven of my square
391:57 - function returning 6 instead of nine and
392:01 - at this point odds are the light bulb
392:03 - would go off above your head proverbly
392:04 - and you would see oh I'm using addition
392:06 - instead of multiplication but what pi
392:09 - test has done for us is automate the
392:11 - process of at least pointing out that
392:13 - error for us and if I now go in and fix
392:15 - this let me go ahead and the light bulb
392:17 - has gone off I change the plus to a uh
392:20 - to a multiply now I'm going to go ahead
392:22 - and after clearing my screen I'm going
392:24 - to run not python but Pi test of test
392:27 - calculator dot Pi crossing my fingers
392:29 - again and now it's green and I see just
392:32 - a DOT which indicates that my one and
392:33 - only test passed I'm good a hundred
392:36 - percent success with my test now after
392:39 - fixing that bug all right let me pause
392:40 - here and see if there's any questions so
392:44 - my question is what if a user instead of
392:47 - because we are taking input from the
392:49 - user what if the user is somewhat
392:51 - malicious and types in a string instead
392:55 - of an integer or maybe he types in a
392:57 - float or some other data type yeah so
393:00 - what if the user like we've seen in past
393:02 - examples types in cat instead of a
393:04 - number when we're expecting an integer
393:06 - how do we test for something like that
393:08 - at the moment I'm admittedly not testing
393:10 - user input if I go back to my code here
393:13 - notice that my calculator function of
393:15 - course has the square function that we
393:17 - keep testing and retesting but notice
393:19 - that all of the user input is currently
393:21 - relegated to my main function and
393:24 - admittedly as of now I am not testing my
393:26 - main function so there could be one of
393:28 - those bugs and in fact there would be
393:30 - because if the user types in a string
393:32 - like cap instead of an integer like two
393:35 - or three then line two recall would
393:37 - actually raise a value error exception
393:40 - so we've seen that before so when it
393:42 - comes to testing your code this is
393:44 - actually a good reason for having
393:46 - multiple functions in your program
393:48 - rather than putting all of your logic in
393:50 - just the file itself rather than putting
393:52 - all of the logic in just main it's
393:54 - actually really good really helpful
393:56 - practice to break your ideas up into
393:58 - smaller bite-sized functions that
394:00 - themselves are testable and what do I
394:02 - mean here square is perfectly testable
394:05 - why because it takes as input a
394:08 - parameter called n and it returns as
394:11 - output in integer which is going to be
394:13 - the square thereof hopefully it has a
394:15 - well-defined input and a well-defined
394:17 - output it is therefore completely within
394:19 - your control in your test program to
394:21 - pass in those values now I will say if
394:24 - you want to test whether
394:27 - Square behaves properly when passed
394:29 - something like a string like quote
394:31 - unquote cat we could absolutely do
394:33 - something like this assert that the
394:35 - square of uh quote unquote cat it's not
394:38 - going to equal something you can
394:39 - actually using different syntax assert
394:42 - that a specific exception will be raised
394:44 - so if we were actually going to go back
394:46 - into our Square function improve it and
394:48 - deliberately raise an exception we could
394:50 - test for that too but for now I'm
394:52 - deliberately only testing the square
394:54 - function I'm not testing for specific
394:56 - user input but that's another problem to
394:58 - be solved other questions now
395:01 - on unit tests
395:04 - to test uh code for
395:07 - the seats cs50 check so check 50 is
395:11 - similar in spirit check 50 is a tool
395:13 - that we cs50 wrote that is essentially
395:15 - doing something like Pi test for the
395:18 - evaluation of students code it is
395:20 - similar in spirit but think of check 50
395:23 - as being an alternative to Pi test if
395:25 - you will but it works a little bit
395:27 - differently but same idea Pi test and
395:30 - unit testing more generally is a
395:31 - technique that is independent of cs50
395:33 - and is something that you can and should
395:35 - be doing on your own code both in or
395:37 - outside of this class how about one
395:39 - other question here on
395:41 - on um on our uh unit tests my question
395:45 - is instead of writing four times like s
395:48 - square of 2 is equal to 4 instead of
395:51 - that can be read if is it I is equals to
395:54 - in square brackets the numbers we want
395:56 - instead of writing four lines a really
395:59 - good question absolutely right now if I
396:01 - go back to test calculator.pi it's
396:03 - indeed pretty manual I mean it took me a
396:05 - while to say and to type out those
396:07 - several lines and you can imagine
396:08 - writing some kind of loop to just assert
396:11 - in a loop that this equals that that
396:13 - this equals that and so forth using a
396:15 - list or using maybe a list or a
396:17 - dictionary or some structure like that
396:18 - so yes you can absolutely automate some
396:21 - of these tests by not just doing the
396:22 - same thing again and again you can still
396:23 - use all of the syntax of python to do
396:25 - loops but generally speaking your tests
396:28 - should be pretty simple and in fact let
396:30 - me propose that we improve upon even
396:33 - this design further because at the
396:35 - moment what's not really ideal when I
396:39 - run all of this uh when I run all of
396:41 - these tests when my function is buggy is
396:44 - notice the output that I got let me
396:45 - reintroduce that same bug by changing my
396:47 - multiplication back to addition let me
396:50 - increase the size of my terminal window
396:52 - again and let me run Pi test again of
396:54 - test calculator.pi so this is the
396:57 - version of my code now that has the bug
396:59 - again so I'm going to see that big
397:01 - massive failure where this failure has
397:04 - been displayed to me but this is not as
397:07 - helpful as it could be right because I
397:09 - have all of those other tests in my code
397:11 - recall that I had what one two three
397:13 - four five separate tests and I'm only
397:15 - seeing the output of the first now why
397:17 - is that well if we go back to my code
397:19 - here you'll see that the first assertion
397:22 - that's failing namely this one here that
397:24 - assert of square of 3 equals equals nine
397:26 - the other tests aren't even getting run
397:28 - and that's not a big deal in the sense
397:31 - that my code is buggy so one or more of
397:33 - them are probably going to fail anyway
397:34 - but wouldn't it be nice to know which of
397:37 - them are going to fail and and in fact
397:38 - it's ideal to run as many tests all at
397:40 - once as possible to give you as many
397:42 - Clues as possible to finding your bug so
397:44 - let me propose that we improve the
397:46 - design of my testing code now still
397:49 - using pi test as follows instead of
397:51 - having one big function called test
397:54 - square that tests the entire function
397:56 - itself with so many different inputs
397:58 - let's break down my tests into different
398:00 - categories and here too there's no one
398:03 - right way to do this but my mind is
398:05 - thinking that I should maybe test
398:07 - positive numbers separately test
398:09 - negative numbers separately and test
398:10 - zero separately I could think of other
398:12 - ways I could test even numbers I could
398:14 - test odd numbers or maybe some other
398:16 - pattern altogether but separating this
398:18 - big test into multiple tests is probably
398:21 - going to yield more clues for me when
398:22 - something goes wrong so let me do this
398:24 - let me go ahead and rename this function
398:26 - to test positive initially and let me
398:29 - include in that function only those
398:31 - first two tests let me then create
398:33 - another function here called test
398:35 - negative and in this function and let me
398:38 - test only negative 2 and negative 3.
398:41 - then down here let me do one more depth
398:43 - of test zero and I'll just run one test
398:46 - in there so I have the same assertions
398:49 - the same five but I've now divided them
398:51 - up among three separate functions what's
398:53 - nice about Pi test and other unit
398:55 - testing Frameworks is that all three of
398:58 - these test functions will be run
399:00 - automatically even if one of them fails
399:01 - the others will be attempted that means
399:04 - that if one or two or three of them fail
399:07 - I'll have one or two or three Clues now
399:09 - for helping me find that mistake so let
399:12 - me go ahead and again increase the size
399:13 - of my terminal window just so we can see
399:15 - more on the screen my calculator still
399:17 - has the bug using addition instead of
399:19 - multiplication let me go ahead and run
399:21 - not python but again Pi test of
399:24 - testcalculator.pi crossing my fingers as
399:26 - always and now oh my God there's even
399:28 - more errors on the screen but this in
399:30 - itself is more helpful let's work
399:32 - through them from top to bottom so under
399:34 - failures here in all caps which I know
399:36 - is not very encouraging to see failure
399:38 - or when you're just trying to solve a
399:39 - problem but that's what these Frameworks
399:41 - do under failures the first function
399:43 - that failed is test positive but here
399:45 - too we see the same clue as before the
399:48 - first one two the square of two equals
399:50 - equals four that one's fine it's not
399:52 - erring with any red errors but the next
399:54 - one is failing so I know that square is
399:56 - broken when I pass in three all right
399:58 - what about down here it looks like
400:00 - unfortunately my test negative function
400:01 - is failing too why well when I pass in
400:04 - oh this is interesting here now negative
400:07 - 2 doesn't even work so I got lucky with
400:09 - positive two but negative 2 isn't
400:11 - working so that's a bit of a clue but in
400:13 - total only two tests failed so notice at
400:17 - the very bottom this summary two failed
400:19 - and one passed what's the other one what
400:22 - was the third one test zero so test zero
400:24 - is passing these two are failing and so
400:27 - that kind of leads me logically
400:29 - mathematically if you will to the source
400:31 - of the bug and just to be clear too if
400:33 - you have a lot of tests this little one
400:34 - line output is helpful even though also
400:36 - a bit discouraging fail fail and Dot
400:39 - means pass so there are the three tests
400:41 - just depicted graphically a little bit
400:43 - differently well let me rewind now and
400:46 - go back into
400:47 - calculator.pi let's fix that bug because
400:50 - let's suppose that I've deduced okay I'm
400:52 - using addition I should have been using
400:54 - multiplication all this time let me now
400:56 - after fixing the bug yet again let me go
400:58 - back to my big terminal let me run Pi
401:00 - test of test calculator.pi hitting enter
401:03 - crossing my fingers now and dot dot dot
401:05 - means all is well a hundred percent of
401:07 - my tests passed all three of them
401:09 - so now I'm good it doesn't necessarily
401:12 - mean that my code is 100 correct but it
401:16 - does mean that it has passed 100 of my
401:18 - current tests and so it would probably
401:20 - behoove us to think a little harder
401:22 - about maybe we should test bigger
401:24 - numbers maybe we should test even
401:26 - smaller numbers maybe we should test
401:27 - strings or something else the onus is
401:30 - ultimately on you to decide what you're
401:31 - going to test but in the real world
401:33 - you're going to be very unhappy with
401:35 - yourself or someone else maybe your boss
401:37 - is going to be very unhappy with you if
401:39 - you did not catch a bug in your code
401:41 - which you could have caught had you just
401:43 - written a test to try that kind of input
401:45 - all right let me pause again and see if
401:47 - there's any questions now on unit
401:49 - testings with pi test
401:52 - um so if you wanted to test like someone
401:54 - suggested before user input as well as
401:57 - testing your function do you do that
401:59 - within the same file or do you make
402:01 - separate files for different types of
402:03 - tests really good question you could
402:05 - absolutely make separate files to test
402:07 - different types of things or if you
402:09 - don't have that many you you can keep
402:10 - them all in the same file at the moment
402:12 - I've been storing all of my tests in one
402:14 - file for convenience and there's not
402:15 - terribly many of them but we'll take a
402:17 - look in a bit an example that allows me
402:19 - to put them into a folder and even run
402:21 - Pi test on a whole folder of tests as
402:24 - well so that's possible other questions
402:25 - on unit testing so I've got two
402:28 - questions
402:29 - um so a couple while ago you just used
402:32 - an exception called Assassin
402:36 - um I'm not sure what was oh yeah
402:37 - assertion error
402:39 - um what exactly does that particular
402:42 - error catch and my second question is
402:45 - does the assert keyword
402:49 - um stand out to the compiler and exactly
402:52 - tell them to set this particular
402:55 - um line of code indeed the assert
402:58 - keyword we're seeing and the assertion
403:00 - error we saw earlier are intertwined so
403:03 - when you use assert and the assertion
403:05 - fails because whatever Boolean
403:07 - expression you're using is not true it's
403:09 - false an assertion error by definition
403:11 - of python will be raised so those two
403:14 - work in conjunction those errors those
403:17 - assertion errors are still being raised
403:19 - by my code here when any of these lines
403:21 - of code fail however Pi test this
403:24 - third-party library is handling the
403:26 - process of catching those exceptions
403:28 - automatically for me so as to give me
403:31 - this standard output so we started
403:33 - today's Story by really implementing
403:34 - unit testing myself I wrote all of the
403:36 - code myself I wrote main I did my
403:38 - conditional I did try and accept
403:39 - honestly it's going to get incredibly
403:41 - painful to write tests long term if you
403:43 - and I have to write that much code every
403:45 - time especially when our function is
403:46 - this small so Pi test and you unit
403:48 - testing Frameworks like it just automate
403:51 - so much of that essentially Pi test ads
403:53 - the try the accept the if the prints for
403:56 - you so you can just focus on the essence
403:59 - of the tests which really are these
404:00 - inputs and outputs how about time for
404:03 - one other question here on unit testing
404:05 - as well
404:06 - so uh when we enter
404:09 - -6 or minus five uh the square or square
404:13 - square root of that number comes up but
404:16 - when we put a 6.6 or 5.6 something like
404:19 - that integer then uh
404:22 - yeah
404:23 - light shows the error so what's
404:26 - happening there so uh if I'm
404:28 - deliberately testing integers right now
404:30 - in large part because I only want pow to
404:32 - operate on integers and that might be
404:33 - conveyed in Python's documentation or my
404:35 - own documentation for that function if
404:37 - you were to pass in something else like
404:39 - a float it turns out that floating Point
404:41 - values in Python and other languages are
404:44 - actually very hard if not impossible to
404:46 - represent 100 precisely and so if you
404:49 - are trying to compare it against some
404:51 - other value they might be slight
404:53 - rounding errors as a result I'm just
404:55 - inferring from what you've described but
404:57 - I'm very deliberately now testing this
404:59 - function with only the inputs that I
405:01 - would expect it might indeed throw other
405:03 - errors if other inputs are passed all
405:06 - right allow me to propose that we
405:07 - consider what should happen if Square
405:09 - isn't actually past a number for
405:12 - instance if I go back to calculator.pi
405:14 - and suppose that I or perhaps someone
405:16 - else using my Square function simply
405:18 - forgets to convert the return value of
405:20 - input from a stir to an INT as by
405:22 - modifying line two here well now
405:25 - something's definitely going to go wrong
405:26 - if I type in a stir instead of what
405:29 - appears to be an INT for instance if I
405:31 - clear my terminal here run python of
405:33 - calculator.pi and hit enter let's type
405:36 - in cat as our value for x and of course
405:39 - this raises Now a type error why can't
405:41 - multiply sequence by non-int of type
405:43 - stir what does that mean well you can't
405:45 - do cat times cat because indeed square
405:48 - is expecting that n will be some number
405:50 - but that doesn't necessarily mean that
405:51 - square itself is buggy but this does
405:53 - mean that if I expect a type error to be
405:56 - raised let's test for that too so that I
405:58 - know the behavior indeed works as
406:00 - expected so let me go back to
406:02 - testcalculator.pi and let me go and add
406:05 - a fourth test down here how about Define
406:07 - test underscore and I'll call this test
406:10 - stir because I'm going to specifically
406:12 - and deliberately pass in a stir for
406:13 - testing and I want to in spirit assert
406:16 - that passing in something like cat to
406:19 - square will raise a type error but we
406:22 - don't use the assert keyword word for
406:23 - that rather we need this let me go to
406:25 - the top of this file and let me
406:27 - additionally import the pi test Library
406:29 - itself because it turns out there's a
406:31 - function in that Library called raises
406:34 - that allows me to express that I expect
406:36 - an exception to be raised and I can
406:39 - express that as follows with pi test dot
406:42 - raises and then in parentheses I can
406:44 - pass in the type of exception I expect
406:46 - which is going to be a type error in
406:48 - this case and now when do I expect that
406:51 - type error to be raised whenever I do
406:53 - something like calling square and
406:54 - passing in not a number but something
406:56 - like cat so now if I go back to my
406:59 - terminal window run Pi test of test
407:01 - calculator dot Pi this time having four
407:04 - tests I should see that all four now are
407:07 - successful
407:08 - all right let's now consider how we
407:10 - could test code that doesn't just expect
407:12 - numbers as input but actually strings
407:15 - and let me rewind Us in time here in vs
407:17 - code to that very first program we wrote
407:20 - a few different versions of in hello.pi
407:22 - that ultimately looked a little
407:24 - something like this I had a main
407:25 - function that prompted the user for the
407:28 - value of a variable by asking them
407:30 - what's your name question mark and then
407:32 - we went ahead and did something like
407:34 - hello open paren name passing that
407:37 - user's name into a function called hello
407:39 - now that function hello recall
407:41 - ultimately looked like this we defined
407:44 - hello as taking a parameter called two
407:46 - the default value of which was world and
407:49 - that function very simply printed hello
407:52 - followed by a comma and then whatever
407:55 - the name that had been passed in and
407:57 - then we ultimately called main but for
407:59 - now onward I'm going to always add this
408:01 - if conditional if name equals equals
408:04 - underscore underscore main then and only
408:06 - then do I want to call Main so that's
408:08 - essential actually what this program
408:09 - looked like in its last Incarnation how
408:12 - do we go about testing it well here
408:14 - again too I'm not going to test the
408:15 - user's input per se in Maine I'm going
408:17 - to focus really on the module the module
408:20 - of code here that's of Interest which is
408:22 - the hello function itself how can I go
408:24 - about testing the hello function well
408:27 - unfortunately even if I start by doing
408:30 - something like code of test Hello dot Pi
408:32 - let me go about and start writing a test
408:35 - program I could import from my hello
408:37 - program a function called hello so a bit
408:40 - strange to see from Hello import hello
408:42 - but notice that on this line here I'm
408:44 - importing from the module that is the
408:46 - file called hello.pi the function Call
408:49 - To Low and how do I go about testing
408:52 - this well if I have a function like
408:55 - Define
408:56 - test argument like this well let me see
409:00 - this
409:01 - so if I were to find a function like
409:03 - Define test hello what could I do well I
409:07 - could call hello with quote-unquote say
409:10 - uh
409:12 - uh David and then check if it equals
409:15 - what hello comma David
409:18 - so with this work this approach here if
409:21 - I've written a test called test hello
409:23 - that calls hello with an argument of
409:25 - David and then tests its return value
409:27 - just like we've done for our calculator
409:29 - would this work as written
409:33 - and let me go back to in just a moment
409:35 - the version of hello that we're testing
409:37 - so you can see that function hello
409:38 - here's the test
409:40 - here is the actual code
409:43 - would this test now work
409:46 - any thoughts uh I think the problem is
409:48 - that in the first version in Hello dot
409:50 - Pi you're using the toe argument that
409:54 - you first declared when you declare the
409:56 - function instead of using the name
409:59 - okay I that is actually uh not a bug
410:03 - here so let me stipulate that in
410:05 - hello.pi this code actually does work as
410:08 - intended and let me go ahead and test it
410:09 - manually just to demonstrate as much let
410:11 - me run python of hello.pi typing in as
410:14 - my name d-a-v-i-d and I see in fact that
410:17 - it says hello David if though I were to
410:19 - change this program and get rid of the
410:22 - name argument get rid of the name
410:24 - variable and just call hello again
410:26 - running python of hello.pi this time I'm
410:29 - not even prompted because I got rid of
410:30 - my input call but it does pre-behave as
410:32 - I expect it does say hello world so let
410:35 - me stipulate that this code in its
410:37 - current form is actually correct but my
410:41 - test is not going to work as I'd hoped
410:43 - and there's a subtle difference between
410:45 - hello versus My Pal function that
410:48 - explain versus my there's a subtle
410:50 - difference between my hello function and
410:52 - my Square function that explains why
410:55 - might this test not work as intended
410:58 - because it's not returning a value yeah
411:01 - exactly recall our discussion early on
411:03 - about functions functions can either
411:05 - return a value like my Square function
411:07 - hands you back the square of some value
411:09 - or they can have side effects sort of
411:11 - visual artifacts that might happen on
411:13 - the screen like printing something out
411:15 - on the screen and by definition that's
411:17 - how Print Works notice that hello it is
411:20 - short but it's implemented ultimately
411:21 - using the print function which does not
411:23 - return a value as I'm using it here it
411:25 - instead has this side effect of printing
411:27 - something onto the screen so it is not
411:29 - correct in my test function to check if
411:32 - the return value of hello equals equals
411:36 - hello David because again hello is not
411:38 - returning anything it's printing
411:40 - something with that side effect but
411:41 - notice literally it has no return
411:44 - keyword unlike my Square function which
411:47 - did so here's an opportunity too to
411:49 - perhaps change how I go about
411:52 - implementing my actual functions it
411:54 - turns out that as your programs get more
411:56 - and more sophisticated more and more
411:58 - complicated it tends to be best practice
412:00 - not not to have side effects if you can
412:03 - avoid it especially if you want your
412:04 - code to be testable and in fact I'm
412:07 - going to propose that we change my hello
412:09 - program to now work as follows let me go
412:11 - ahead and change this function to not
412:14 - print hello and then that name let me go
412:17 - ahead and literally return maybe an F
412:19 - string which will clean this up a little
412:21 - bit hello comma 2 close quote at the end
412:25 - so my syntax here is just the familiar F
412:27 - string or format string it's going to
412:29 - return hello world or hello David or
412:31 - hello whoever's name is passed in is
412:33 - that argument but I'm returning it now
412:36 - I'm not printing it out so what needs to
412:39 - change up here well I could do something
412:42 - like this I could say something like
412:44 - output equals hello and then print
412:47 - output in my main function or I can
412:50 - simplify that because I don't really
412:51 - need that variable I could instead just
412:53 - do this I could still call hello but I
412:56 - could immediately print out the result
412:57 - and this version of my hello program now
413:00 - is actually more testable why because
413:03 - these assert statements that we're using
413:05 - and we've seen thus far for our tests
413:07 - are really designed to test
413:10 - arguments into functions and return
413:12 - values there from not testing side
413:15 - effects so if you're doing equals equals
413:17 - you're looking for a return value
413:18 - something that's handed back from the
413:20 - function so that's fine if I modify the
413:22 - design of my program now not to just
413:24 - print hello but to return the string the
413:27 - sentence the phrase that I want to
413:30 - construct I can leave it to the caller
413:32 - that is the function who's using this
413:34 - hello function to handle the actual
413:36 - printing now what does this mean in my
413:38 - code well it means now if my hello.pi
413:41 - looks like this and hello is indeed
413:43 - returning a value in my test to low
413:45 - function I can test it exactly like this
413:48 - so let me go ahead and run Pi test of
413:51 - test hello.pi crossing my fingers as
413:53 - always and voila one passed so I passed
413:56 - this test because apparently the return
413:57 - value of hello does indeed equal hello
414:00 - comma David well let's test the other
414:02 - scenario what if I Pat call hello
414:05 - without any arguments let's assert that
414:08 - calling hello with nothing in those
414:09 - parentheses similarly equals hello comma
414:12 - but world the default value let me now
414:14 - go ahead and run Pi test of test Hello
414:17 - dot pi and that too passes entirely but
414:21 - there too suppose that I had made some
414:22 - mistakes suppose that there were a bug
414:24 - in my code it might not be best practice
414:26 - to combine multiple tests in this one
414:28 - function so let's make it more clear
414:30 - what might pass or fail let's call the
414:32 - first function test the default to this
414:35 - function and let's only include this
414:37 - first line of code and then let's go
414:38 - ahead and Define another function like
414:40 - test argument to test this other line of
414:43 - code here so now I have two different
414:45 - tests Each of which is testing something
414:47 - a little fundamentally different so now
414:49 - when I run my code it's still not broken
414:51 - if I run Pi test of test hello.pi enter
414:55 - I've now passed two tests and that's
414:57 - just as good as before but if I did have
415:00 - a bug having two tests instead of one
415:02 - would indeed give me perhaps a bit more
415:04 - of a hint as to what's wrong
415:07 - questions now on this testing of return
415:10 - values when these return values are now
415:12 - strings instead of integers and why
415:14 - we've done this so my question is about
415:17 - function inside the function
415:20 - can we test that too
415:22 - or recursion we we haven't seen
415:27 - if you have if you have a recursive
415:29 - function which we've not discussed in
415:31 - this class yes you can absolutely test
415:33 - those two uh by simply calling them
415:36 - exactly in this way recursion does not
415:37 - affect this process all right how about
415:39 - one more question here on unit test
415:40 - before we look at one final example when
415:43 - testing our uh arguments like uh can we
415:48 - use something like a Loops or inside of
415:52 - assets or for the values absolutely you
415:56 - can absolutely use a loop to test
415:57 - multiple values in this case for in I
416:00 - could do something like this I could say
416:02 - for name in The Following list of
416:05 - Hermione
416:07 - uh say Harry
416:09 - and Ron
416:11 - I could then within this Loop assert
416:13 - that hello of that given name equals
416:16 - equals say the format string of hello
416:20 - comma name and then run all of these
416:23 - here at once by running again Pi test of
416:27 - test hello.pi it's still going to be
416:29 - just one test within that function but
416:31 - if there's something interesting about
416:33 - those several strings that makes it
416:34 - compelling to test all of them you can
416:36 - absolutely automate the tests in that
416:37 - way with that said each of your tests
416:40 - should ideally be pretty simple and
416:42 - pretty small why because you don't want
416:44 - to write so much code so much
416:46 - complicated code that your tests might
416:48 - be flawed what we don't want to have to
416:50 - do is write tests for our tests and test
416:52 - for our tests for our test because it
416:54 - would never end so keeping tests nice
416:55 - and simple is really the goal so that a
416:58 - reasonable human yourself included can
416:59 - eyeball them and just claim yeah that is
417:02 - correct we don't need tests for our
417:04 - tests all right how about one other
417:06 - feature suppose that we don't have just
417:07 - one test but many different tests
417:09 - instead and we want to start to organize
417:11 - those tests into multiple files and even
417:13 - a folder well Pi test and other
417:14 - Frameworks support that Paradigm as well
417:16 - in fact let me go ahead and test
417:18 - hello.pi using a folder of tests with
417:22 - technically just one test but it'll be
417:23 - representative of having even more in
417:25 - that folder I'm going to go ahead and
417:26 - create a new folder called test using
417:29 - make dir at my command line and then
417:31 - within that file I'm within that and
417:34 - then within that folder I'm going to go
417:35 - ahead and create a file called test
417:37 - Hello dot Pi within this file meanwhile
417:40 - I'm going to test the same things I'm
417:42 - going to go ahead and from Hello import
417:43 - hello
417:45 - and I'm going to go ahead and Define a
417:47 - function like test default that simply
417:50 - tests the scenario where hello with no
417:52 - arguments returns hello comma world and
417:55 - I'm going to have that other function
417:56 - where I test that an argument is passed
417:59 - and in this case I'll choose an argument
418:00 - like asserting that hello quote unquote
418:03 - David equals indeed hello comma not
418:06 - world but David So in this case I've
418:09 - just recreated the same test as earlier
418:10 - but they're in a file now in a folder
418:13 - called test well Pi test allows me to
418:15 - run these here too but to do so I
418:18 - actually need to create one other file
418:20 - within my test directory I need to
418:23 - create a file called underscore
418:25 - underscore init underscore underscore
418:27 - dot Pi which has the effect even if this
418:30 - file is empty of telling python to treat
418:33 - that folder as not just a module but a
418:37 - package so to speak a package is a
418:39 - python module or multiple modules that
418:42 - are organized inside of a folder and
418:44 - this file under underscore underscore in
418:46 - it underscore underscore Pi is just a
418:48 - visual indicator to python that indeed
418:50 - it should treat that folder as a package
418:52 - if I had more code in this folder I
418:54 - could do even more things with this file
418:55 - but for now it's just a clue that it's
418:57 - indeed meant to be a package and not
418:59 - just a module or file alone what I can
419:02 - now do in closing is run Pi test not
419:05 - even on that specific file but on a
419:07 - whole folder of tests so if I run Pi
419:10 - test of test where the test is the name
419:13 - of that folder Pi test will
419:15 - automatically search through that folder
419:16 - looking for all possible tests granted
419:18 - there's just those two in this one file
419:20 - but when I run it now with enter I'll
419:23 - still pass those tests I'll still get a
419:25 - hundred percent and I now have a
419:27 - mechanism ultimately for testing my own
419:29 - code so whether you're writing functions
419:31 - that return integers or something else
419:32 - functions that have side effects that
419:34 - could be Rewritten as functions that
419:36 - return values you now have a mechanism
419:37 - to not just wait for one someone like us
419:40 - to test your code and not just test your
419:42 - code manually again and again which
419:43 - might get tedious and you might make
419:45 - Mistakes by not including some possible
419:47 - inputs we now have an automated
419:48 - mechanism for testing one's own code
419:51 - that's going to be even more powerful
419:52 - when you start collaborating with others
419:54 - so that you can write tests that ensure
419:56 - that if they make a change to the same
419:58 - code they haven't broken the code that
420:01 - you've written alright that's it for
420:02 - this week we'll see you next time
420:11 - [Music]
420:24 - thank you
420:26 - [Music]
420:32 - all right this is cs50's Introduction to
420:35 - programming with python my name is David
420:37 - Malin and this is our week on file IO
420:39 - input and output of files so up until
420:42 - now most every program we've written
420:43 - just stores all the information that it
420:45 - collects in memory that is in variables
420:48 - or inside of the program itself a
420:50 - downside of which is that as soon as the
420:51 - program exits anything you typed in
420:53 - anything that you did with that program
420:55 - is lost now with files of course on your
420:58 - Mac or PC you can hang on to information
421:00 - long term and file i o within the
421:02 - context of programming is all about
421:04 - writing code that can read from that is
421:06 - load information from or write to that
421:09 - is save information to files themselves
421:11 - so let's see if we can't transition them
421:13 - from only using memory and variables and
421:16 - the like to actually writing code that
421:18 - saves some files for us and therefore
421:19 - data persistently well to do this let me
421:22 - propose that we first consider a
421:24 - familiar data structure a familiar type
421:26 - of variable that we've seen before that
421:28 - of a list and using lists we've been
421:30 - able to store more than one piece of
421:32 - information in the past using one
421:34 - variable we typically store one value
421:35 - but if that variable is a list we can
421:38 - store multiple values unfortunately
421:39 - lists are stored in the computer's
421:41 - memory and so once your program exits
421:43 - even the contents of those disappear but
421:45 - let's at least give ourselves a starting
421:47 - point so I'm over here in vs code and
421:49 - I'm going to go ahead and create a
421:51 - simple program using Code of names dot
421:54 - Pi a program that just collects people's
421:56 - names students names if you will and I'm
421:58 - going to do it super simply initially in
422:00 - a manner consistent with what we've done
422:02 - in the past to get user input and print
422:04 - it back out I'm going to say something
422:05 - like this name equals input quote
422:08 - unquote what's your name thereby storing
422:11 - in a variable called name the return
422:14 - value of input as always and as always
422:16 - I'm going to go ahead and very simply
422:18 - print out a nice F string that says
422:20 - hello comma and then in curly brace's
422:22 - name to print out hello David hello
422:24 - world however it happens to be using the
422:26 - program let me go ahead and run this
422:28 - just to remind myself what I should
422:29 - expect and if I run python of names.pi
422:31 - and hit enter type in my name like David
422:34 - of course I now see hello comma David so
422:37 - suppose though that we wanted to add
422:38 - support not just for one name but
422:40 - multiple names maybe three names for the
422:42 - sake of discussion so that we can begin
422:43 - to accumulate some amount of information
422:46 - in the program such that it's really
422:49 - going to be a downside if we keep
422:50 - throwing it away once the program exits
422:53 - well let me go back into names.pi up
422:55 - here at top let me proactively give
422:58 - myself a variable this time called names
423:00 - plural and set it equal to an empty list
423:02 - recall that the square bracket notation
423:04 - especially if nothing's inside of it
423:06 - just means give me an empty list that we
423:08 - can add things to over time well what do
423:11 - we want to add to it well let's add
423:12 - three names each from the user and let
423:14 - me say something like this for
423:16 - underscore in range of three let me go
423:19 - ahead and prompt the user with the input
423:22 - function and getting their name in this
423:24 - variable and then using list syntax I
423:27 - can say names dot append name to that
423:31 - list and now I have in that list that
423:35 - given name one two three of them other
423:37 - points to note is I could use a variable
423:39 - here like I which is conventional but if
423:41 - I'm not actually using I explicitly on
423:44 - any subsequent lines I might as well
423:45 - just use underscore which is a pythonic
423:47 - convention and actually if I want to
423:49 - clean this up a little bit right now
423:51 - notice that my name variable doesn't
423:53 - really need to exist because I'm
423:55 - assigning it a value and then
423:56 - immediately appending it well I could
423:58 - tighten this up further by just getting
424:00 - rid of that variable altogether and just
424:03 - appending immediately the return value
424:05 - of input I think we could go both ways
424:08 - in terms of design here on the one hand
424:09 - it's a pretty short line and it's
424:11 - readable on the other hand if I were to
424:12 - eventually change this phrase to be not
424:14 - what's your name but something longer we
424:16 - might want to break it out again into
424:18 - two lines but for now I think it's
424:19 - pretty readable now later in the program
424:22 - let's just go ahead and print out those
424:23 - same names but let's sort them
424:25 - alphabetically so that it makes sense to
424:28 - be gathering them all together then
424:30 - sorting them and printing them so how
424:32 - can I do that well in Python the
424:33 - simplest way to sort a list in a loop is
424:35 - probably to do something like this for
424:38 - name in names but wait let's sort the
424:41 - names first recall that there's a
424:43 - function called sorted which will return
424:45 - a sorted version of that list now let's
424:47 - go ahead and print out an F string that
424:50 - says again hello bracket name close
424:54 - quotes all right let me go ahead and run
424:56 - this so python of names dot pi and let
424:59 - me go ahead and type in a few names this
425:01 - time how about Hermione
425:03 - how about Harry how about Ron and notice
425:06 - that they're not quite in alphabetical
425:08 - order but when I hit enter and that Loop
425:11 - kicks in it's going to print out hello
425:13 - Harry hello Hermione hello Ron in sorted
425:16 - order
425:17 - but of course now if I run this program
425:19 - again all of the names are lost and if
425:22 - this is a bigger program than this that
425:24 - might actually be pretty painful to have
425:25 - to re-input the same information again
425:27 - and again and again wouldn't it be nice
425:29 - like most any program today on a phone
425:31 - or a laptop or desktop or Cloud to be
425:33 - able to save this information somehow
425:36 - instead and that's where file i o comes
425:39 - in and that's where Files come in they
425:41 - are a way of storing information
425:42 - persistently on your own phone or Mac or
425:45 - PC or some Cloud servers disk so that
425:48 - they're there when you come back and run
425:50 - the program again so how can we go about
425:52 - saving all three of these names on in a
425:56 - file as opposed to having to type them
425:58 - again and again let me go ahead and
426:00 - simplify this file and again give myself
426:02 - just a single variable called name and
426:04 - set the return value of input equal to
426:08 - that variable so what's your name as
426:10 - before quote unquote and now let me go
426:13 - ahead and let me do something more with
426:15 - this value instead of just adding it to
426:17 - a list or printing it immediately out
426:19 - let's save the value of the person's
426:21 - name that's just been typed in to a file
426:23 - well how do we go about doing that well
426:25 - in Python there's this function called
426:26 - open whose purpose in life is to do just
426:28 - that to open a file but to open it up
426:31 - programmatically so that you the
426:33 - programmer can actually read information
426:35 - from it or write information to it so
426:38 - open is like the programmer's equivalent
426:39 - of like double clicking on an icon on
426:41 - your Mac or PC but it's a programmer's
426:44 - technique because it's going to allow
426:45 - you to specify exactly what you want to
426:47 - read from or write to that file formally
426:50 - its documentation is here and you'll see
426:53 - that its usage is relatively
426:54 - straightforward it minimally just
426:56 - requires the name of the file that we
426:57 - want to open and optionally how we want
427:00 - to open it so let me go back to vs code
427:02 - here and let me propose now that I do
427:04 - this I'm going to go ahead and call this
427:06 - function called open passing in an
427:08 - argument for names.txt which is the name
427:11 - of the file I would like to store all of
427:13 - these names in I could call it anything
427:15 - I want but because it's going to be just
427:17 - text it's conventional to call it
427:19 - something.txt but I'm also going to tell
427:21 - the open function that I plan to write
427:24 - to this file so as a second argument to
427:26 - open I'm going to put literally quote
427:28 - unquote W for right and that's going to
427:31 - tell open to open the file in a way
427:33 - that's going to allow me to change the
427:34 - contents and better yet if it doesn't
427:36 - even exist yet it's going to create the
427:38 - file for me now open returns what's
427:41 - called a file handle a special value
427:43 - that allows me to access that file
427:45 - subsequently so I'm going to go ahead
427:47 - and sign it equal to a variable like
427:48 - file and now I'm going to go ahead and
427:51 - quite simply write this person's name to
427:54 - that file so I'm going to literally type
427:56 - file which is the variable a linking to
428:00 - that file dot write which is a function
428:02 - otherwise known as a method that comes
428:04 - with open files that allows me to write
428:06 - that name to the file and then lastly
428:09 - I'm going to quite simply going to go
428:11 - ahead and say file Dot close which will
428:12 - close and effectively save the file so
428:15 - these three lines of code here are
428:17 - essentially the programmers equivalent
428:18 - to like double clicking an icon on your
428:20 - Mac or PC making some changes in
428:22 - Microsoft's word or some other program
428:23 - and going to file save we're doing that
428:25 - all in code with just these three lines
428:28 - here well let's see now how this works
428:31 - let me go ahead now and run python of
428:33 - names.pi
428:36 - and enter let's type in a name I'll type
428:39 - in Hermione
428:41 - enter all right where did she end up
428:44 - well let me go ahead now and type code
428:46 - of names.txt which is a file that
428:49 - happens now to exist because I opened it
428:52 - in right mode and if I open this in a
428:54 - tab we'll see there's Hermione well
428:57 - let's go ahead and run names.pi once
428:59 - more I'm going to go ahead and run
429:01 - python of names.pi enter and this time
429:04 - I'll type in Harry let me go ahead and
429:06 - run it one more time and this time I'll
429:08 - type in Ron and now let me go up to
429:11 - names.text where hopefully I'll see all
429:14 - three of them here
429:15 - but no I've just actually seen Ron
429:19 - What might explain what happened to
429:22 - Hermione and Harry even though I'm
429:24 - pretty sure I ran the program three
429:26 - times and I definitely wrote the code
429:27 - that writes their name to that file
429:31 - what's going on here do you think I
429:34 - think because we're not appending them
429:35 - we should append the names since we are
429:38 - writing directly it is erasing the old
429:41 - content and it is replacing with the
429:43 - last uh
429:46 - set of characters that we mentioned
429:48 - exactly unfortunately quote-unquote W is
429:50 - a little dangerous not only will it
429:52 - create the file for you it will also
429:54 - recreate the file for you every time you
429:56 - open the file in that mode so if you
429:58 - open the file once and write Hermione
430:00 - that worked just fine as we saw but if
430:02 - you do it again for Harry if you do it
430:03 - again for Ron the code is working but
430:05 - each time it's opening the file and
430:07 - recreating it with brand new contents so
430:09 - we had one version with Hermione one
430:11 - version with Harry and one final version
430:13 - with Ron but ideally I think we probably
430:15 - want to be appending as Vishal says each
430:18 - of those names to the file not just
430:19 - clobbering that is overwriting the file
430:22 - each time so how can I do this it's
430:24 - actually a relatively easy fix let me go
430:26 - ahead and do this as follows I'm going
430:28 - to first remove the old version of
430:29 - names.txt and now I'm going to change my
430:32 - code to do this I'm going to change the
430:34 - W quote unquote to just a quote unquote
430:37 - a for append which means to add to the
430:40 - bottom to the bottom to the bottom again
430:41 - and again now let me go ahead and rerun
430:43 - python of names.pi and enter I'll again
430:47 - start from scratch with Hermione because
430:49 - I'm creating the file new notice that if
430:52 - I now do code of names.txt enter we do
430:57 - see that Hermione is back so we've after
430:59 - removing the file it did get recreated
431:01 - even though I'm using append which is
431:03 - good but now let's see what happens when
431:05 - I go back to my terminal and this time I
431:08 - run python of names.pi again this time
431:10 - typing in Harry and let me run it one
431:13 - more time this time typing in Ron so
431:15 - hopefully this time in that second tab
431:17 - names.text I should now see all three of
431:19 - them but but but
431:21 - this doesn't look ideal what have I
431:25 - clearly done wrong
431:28 - something tells me even though all three
431:30 - names are there it's not going to be
431:31 - easy to read those back unless you know
431:33 - where each name ends and begins
431:36 - [Music]
431:40 - the English format is not correctly it's
431:44 - concatenating then it is it's it can
431:47 - it's well it appears to be concatenating
431:50 - but technically speaking it's just
431:52 - appending to the file first Hermione
431:54 - then Harry then Ron it has the effect of
431:56 - combining them back to back but it's not
431:58 - concatenating per se it really is just
432:00 - appending let's go to another hand here
432:02 - what really have I done wrong or
432:05 - equivalently how might I fix
432:08 - it would be nice if there were some kind
432:10 - of gaps between each of the names so we
432:12 - could read them more cleanly Hello uh we
432:16 - should add a new line before we write
432:19 - your name good we want to add a new line
432:22 - ourselves so whereas print by default
432:24 - recall always outputs automatically a
432:26 - line ending of backslash n unless we
432:28 - override it with the named parameter
432:30 - called end write does not do that right
432:33 - takes you literally and if you say right
432:35 - Hermione that's it you're getting the H
432:37 - through the E if you say right Harry you
432:39 - get the H through the uh y you don't get
432:41 - any extra new lines automatically so if
432:44 - you want to have a new line at the end
432:46 - of each of these names we've got to do
432:48 - that manually so let me again close
432:50 - names.txt and let me remove the current
432:52 - file and let me go back up to my code
432:55 - here and I can fix this in any number of
432:56 - ways but I'm just going to go ahead and
432:58 - do this I'm going to write out an F
433:00 - string that contains name and backslash
433:03 - n at the end we could do this in
433:04 - different ways we could manually print
433:06 - just the new line or some other
433:07 - technique week but I'm going to go ahead
433:09 - and use my f strings as I'm in the habit
433:11 - of doing and just print to the name and
433:12 - the new line all at once I'm going to go
433:15 - ahead now and down to my terminal window
433:16 - run python of names dot Pi again enter
433:19 - we'll type in Hermione I'm going to run
433:21 - it again type in Harry I'm going to type
433:23 - it again and this time Ron now I'm going
433:26 - to run code of names.txt and open that
433:29 - file and now it looks like the file is a
433:32 - bit cleaner indeed I have each of the
433:34 - name on its own line as well as a line
433:36 - ending which ensures that we can
433:39 - separate one from the other now if I
433:41 - were you know writing code I bet I could
433:44 - parse that is read the previous file by
433:46 - looking at differences between lowercase
433:48 - and uppercase letters but that's going
433:49 - to get messy quickly generally speaking
433:51 - when storing data long term in a file
433:53 - you should probably do it somehow
433:55 - cleanly like doing one name at a time
433:57 - well let's now go back and I'll propose
434:00 - that this code is now working correctly
434:01 - but we can design it a little bit better
434:03 - it turns out that it's all too easy when
434:05 - writing code to sometimes forget to
434:07 - close files and sometimes this isn't
434:10 - necessarily a big deal but sometimes it
434:11 - can create problems files could get
434:13 - corrupted or accidentally deleted or the
434:15 - liked depending on what happens in your
434:16 - code so it turns out that you don't
434:18 - strictly need to call close on the file
434:21 - yourself if you take another approach
434:23 - instead more pythonic when manipulating
434:27 - files is to do this to introduce this
434:30 - other keyword called quite simply with
434:33 - that allows you to specify that in this
434:35 - context I want you to open and
434:38 - automatically close some file so how do
434:40 - we use with it simply looks like this
434:43 - let me go back to my code here I've
434:45 - gotten rid of the close line and I'm now
434:47 - just going to say this instead instead
434:49 - of saying file equals open I'm going to
434:51 - say with open then the same arguments as
434:55 - before and somewhat curiously I'm going
434:57 - to put the variable at the end of the
434:58 - line why that's just the way this is
435:01 - done you say with you call the function
435:03 - in question and then you say as and
435:05 - specify the name of the variable that
435:07 - should be assigned find the return value
435:09 - of open then I'm going to go ahead and
435:11 - indent the line underneath so that the
435:13 - line of code that's writing the name is
435:15 - now in the context of this with
435:18 - statement which just ensures that
435:20 - automatically if I had more code in this
435:22 - file down below no longer indented the
435:25 - file would be automatically closed as
435:27 - soon as line 4 is done executing so it
435:29 - doesn't change what has just happened
435:31 - but it does automate the process of at
435:33 - least closing things for us just to
435:34 - ensure I don't forget and so that
435:36 - something doesn't go wrong
435:38 - but suppose now that I wanted to read
435:41 - these names from the file all I've done
435:43 - thus far is write code that writes names
435:45 - to the file but let's assume now that we
435:47 - have all of these names in the file and
435:49 - heck let's go ahead and add one more let
435:51 - me go ahead and run this one more time
435:52 - python of names.pi and let's add in
435:55 - Draco to the mix so now that we have all
435:58 - four of these names here how might we
436:00 - want to read them back well let me
436:02 - propose that we go into names.pi now or
436:04 - we could create another program
436:05 - altogether but I'm going to keep reusing
436:07 - the same name just to keep us focused on
436:09 - this and now I'm going to write code
436:11 - that reads an existing file with
436:14 - Hermione Harry Ron and Draco together
436:17 - and how do I do this well it's similar
436:19 - in spirit I'm going to start this time
436:21 - with with open and then the first
436:24 - argument is going to be the name of the
436:25 - file that I want to open as before and
436:27 - I'm going to open it this time in read
436:29 - mode quote on quote R and to read a file
436:31 - just means to load it not to save it and
436:35 - I'm going to name the return value file
436:37 - and now I'm going to do this yes and
436:39 - there's a number of ways I can do this
436:40 - but one way to read all of the lines
436:42 - from the file at once would be this let
436:44 - me declare a variable called lines let
436:46 - me access that file and call a function
436:49 - or a method that comes with it called
436:51 - read lines so if you read the
436:52 - documentation on file i o and python
436:55 - you'll see that open files come with a
436:57 - special method whose purpose in life is
436:59 - to read all the lines from the file and
437:01 - return them to me as a list so what this
437:04 - line 2 is doing is it's reading all of
437:06 - the lines from that file storing them in
437:08 - a variable called lines now suppose I
437:11 - want to iterate over all of those lines
437:13 - and print out each of those names for
437:15 - line in lines this is just a standard
437:18 - for Loop in Python lines as a list line
437:21 - is the variable that will be
437:22 - automatically be set to each of those
437:24 - lines let me go ahead and print out
437:26 - something like oh hello
437:28 - comma and then I'll print out the line
437:31 - itself
437:32 - alright so let me go to my terminal
437:34 - window run python of names.pi now I have
437:38 - not deleted names.txt so it still
437:40 - contains all four of those names and hit
437:42 - enter and okay it's not bad but it's a
437:46 - little ugly here
437:48 - what's going on when I ran names.pi it's
437:51 - saying hello to Hermione to Harry to Ron
437:53 - to Draco but there's these gaps now
437:55 - between the lines
437:57 - what's explains that symptom if if
438:00 - nothing else it just looks ugly it
438:02 - happens because in the text file we have
438:05 - new line symbols uh in between those
438:08 - names and the print always adds another
438:11 - new line at the end so you you use the
438:14 - same symbol twice perfect and here's a
438:17 - good example of a bug a mistake in a
438:19 - program but if you just think about
438:20 - those first principles like how do each
438:23 - of the lines of code work that I'm using
438:25 - you should be able to reason exactly as
438:27 - we're fall did there to say that all
438:28 - right well one of those new lines is
438:29 - coming from the file after each name and
438:32 - then of course print all of these Weeks
438:33 - Later is still giving us for free that
438:35 - extra new line so there's a couple of
438:37 - possible solutions I could certainly do
438:40 - this which we've done in the past and
438:41 - pass in a named argument to print like
438:43 - end equals quote unquote and that's fine
438:46 - I would argue a little better than that
438:48 - might actually be to do this to strip
438:50 - off of the end of the line the actual
438:53 - new line itself so that print is
438:55 - handling the printing of everything the
438:57 - person's name game as well as the new
438:58 - line but you're just stripping off what
439:01 - is really just an implementation detail
439:03 - in the file we chose to use new lines in
439:05 - my text file to separate one name from
439:08 - another so arguably it should be a
439:10 - little cleaner in terms of design to
439:12 - strip that off and then let print print
439:14 - out what is really just now a name but
439:16 - that's ultimately a design decision the
439:18 - effect is going to be exactly the same
439:21 - well if I'm going to open this file and
439:24 - read all the lines and then iterate over
439:27 - all of those lines and print them each
439:28 - out I could actually combine this into
439:30 - one thing because right now I'm doing
439:32 - twice as much work I'm reading all of
439:34 - the lines then I'm iterating over all of
439:36 - the lines just to print out each of them
439:39 - well in Python with files you can
439:41 - actually do this I'm going to erase
439:42 - almost all of these lines now keeping
439:45 - only the with statement at top and
439:47 - inside of this with statement I'm going
439:49 - to say this for line in file go ahead
439:53 - and print out quote unquote hello comma
439:56 - and then line Dot R strip so I'm going
439:58 - to take the approach of stripping off
440:00 - the end of the line but notice how
440:02 - elegant this is so to speak I've opened
440:05 - the file in line one and if I want to
440:07 - iterate over every line in the file I
440:09 - don't have to very explicitly load all
440:11 - read all the lines then iterate over all
440:13 - of the lines I can combine this into one
440:15 - thought it in Python you can simply say
440:17 - for line and file and that's going to
440:19 - have the effect of giving you a for Loop
440:21 - that iterates over every line in the
440:23 - file one at a time and on each iteration
440:25 - updating the value of this variable line
440:27 - to be Hermione then Harry then Ron then
440:31 - Draco so this again is one of the
440:33 - appealing aspects of python is that it
440:35 - reads rather like English for line and
440:37 - file print this it's a little more
440:40 - compact when written this way well what
440:43 - if though
440:44 - I don't want quite this Behavior because
440:46 - notice now if I run python of names.pi
440:48 - it's correct I'm seeing each of the
440:50 - names and each of the hellos and there's
440:52 - no Extra Spaces in between but just to
440:55 - be difficult I'd really like us to be
440:58 - sorting these hellos really I'd like to
441:00 - see Draco first then Harry then Hermione
441:03 - then Ron no matter what order they
441:05 - appear in the file so I could go in of
441:07 - course to the file and manually change
441:09 - the file but if that file is changing
441:10 - over time based on who is typing their
441:12 - name into the program that's not really
441:14 - a good solution in code I should be able
441:16 - to load the file no matter what it looks
441:17 - like and just sort it all at once now
441:20 - here is a reason to not do what I've
441:23 - just done I can't iterate over each line
441:26 - in the file and print it out but sort
441:29 - everything in advance right logically if
441:31 - I'm looking at each line one at a time
441:33 - and printing it out it's too late to
441:36 - sort I really need to read all of the
441:38 - lines first without printing them sort
441:40 - them then print them so we have to take
441:42 - a step back in order to add now now this
441:44 - new feature so how can I do this well
441:46 - let me combine some ideas from before
441:48 - let me go ahead and start fresh with
441:51 - this let me give myself a list called
441:53 - names and assign it an empty list just
441:55 - so I have a variable in which to
441:57 - accumulate all of these lines and now
441:59 - let me open the file with open quote
442:02 - unquote names.txt and it turns out I can
442:04 - tighten this up a little bit it turns
442:06 - out if you're opening a file to read it
442:08 - you don't need to specify quote unquote
442:10 - r that is the implicit default so you
442:12 - can tighten things up by just saying
442:14 - open names.text and you'll be able to
442:16 - read the file but not write it I'm going
442:18 - to give myself a variable called file as
442:20 - before I am going to iterate over the
442:22 - file in the same way for line in file
442:25 - but instead of printing each line I'm
442:27 - going to do this I'm going to take my
442:30 - names list and append to it and this is
442:33 - appending to a list in memory not
442:35 - appending to the file itself I'm going
442:38 - to go ahead and append the current line
442:39 - but I'm going to strip off the new line
442:42 - at the end so that all I'm adding to
442:43 - this list is each of the students names
442:46 - now I can use that familiar technique
442:49 - from before let me go outside of this
442:51 - with statement because now I've read the
442:53 - entire file presumably so by the time
442:55 - I'm done with lines four and five again
442:57 - and again and again for each line in the
442:59 - file I'm done with the file it can close
443:01 - I now have all of the students names in
443:03 - this list variable let me do this for
443:06 - name in not just names but the sorted
443:10 - names using our python function sorted
443:13 - which does just that and do print quote
443:15 - unquote with an F string hello comma and
443:18 - now I'll plug in bracket name
443:21 - so now what have I done I'm creating a
443:24 - list at the beginning just so I have a
443:25 - place to gather my data I then on lines
443:28 - three through five iterate over the file
443:30 - from top to bottom reading in each line
443:32 - one at a time stripping off the new line
443:34 - and adding just the student's name to
443:35 - this list and the reason I'm doing that
443:37 - is so that on line seven I can sort all
443:40 - of those names now that they're all in
443:42 - memory and print them in order I need to
443:45 - load them all into memory before I can
443:47 - sort them otherwise I'd be printing them
443:49 - out prematurely and Draco would end up
443:51 - last instead of first so let me go ahead
443:53 - in my terminal window and run python of
443:55 - names.pi now and hit enter and there we
443:58 - go the same list of four hellos but now
444:01 - they're sorted and this is a very common
444:03 - technique when dealing with files and
444:05 - information more generally if you want
444:07 - to change that data in some way like
444:09 - sorting it creating some kind of
444:11 - variable at the top of your program like
444:13 - a list adding or appending information
444:15 - to it just to collect it in one place
444:17 - and then do something interesting with
444:19 - that collection that list is exactly
444:22 - what I've done here now I should note
444:24 - that if we just want to sort the file we
444:26 - can actually do this even more simply in
444:28 - Python particularly by not bothering
444:30 - with this names list nor the second for
444:32 - Loop and let me go ahead and instead
444:34 - just do more simply this let me go ahead
444:36 - and tell python that we want the file
444:38 - itself to be sorted using that same
444:40 - sorted function but this time on the
444:42 - file itself and then inside of that for
444:44 - Loop let's just go ahead and print right
444:46 - away our hello comma followed by the
444:48 - line itself but still stripping off of
444:50 - the end of it any white space therein if
444:53 - we go ahead and run this same program
444:55 - now with pythonupnames.pi and hit enter
444:57 - we get the same result but of course
444:59 - it's a lot more compact but for the sake
445:01 - of discussion let's assume that we do
445:04 - actually want to potentially make some
445:06 - changes to the data as we iterate over
445:07 - it so let me undo those changes leave
445:09 - things as is where by now we'll continue
445:11 - to accumulate all of the names first
445:13 - into a list maybe do something to them
445:15 - maybe forcing them to uppercase or
445:16 - lowercase or the like and then sort and
445:19 - print out each item
445:20 - let me pause and see if there's any
445:22 - questions now on file IO reading or
445:24 - writing or now accumulating all of these
445:28 - values in some list hi is there a way to
445:31 - sort the files but instead if you want
445:34 - it from alphabetically from A to Z is
445:37 - there a way to reverse it from Zeta air
445:39 - is there like a little extension that
445:41 - you can add to the end to do that or
445:42 - would you have to create a new function
445:44 - if you wanted to reverse the contents of
445:47 - the file yeah so if you instead of
445:49 - sorting them from a to z in ascending
445:51 - order if you're one of them in
445:53 - descending order
445:54 - is there an extension for the there is
445:57 - indeed and as always the documentation
445:59 - is your friend so if the goal is to sort
446:01 - them not in alphabetical order which is
446:03 - the default but maybe reverse
446:04 - alphabetical order you can take a look
446:06 - for instance at the formal python
446:07 - documentation there and what you'll see
446:09 - is this summary you'll see that the
446:11 - sorted function takes a first argument
446:13 - generally known as an iterable and
446:15 - something that's iterable means that you
446:17 - can iterate over it that is you can Loop
446:19 - over it one thing at a time what the
446:21 - rest of this line here means is that you
446:23 - can specify a key like how you want to
446:25 - sort it but more on that later but this
446:27 - last named parameter here is reverse and
446:29 - by default per the documentation it's
446:31 - false it will not be reversed by default
446:34 - but if we change that to true I bet we
446:36 - can do that so let me go back to vs code
446:38 - here and do just that let me go ahead
446:40 - and pass in a second argument to sorted
446:42 - in addition to this iterable which is my
446:45 - names list iterable again in the sense
446:47 - that it can be looped over and let me
446:50 - pass in Reverse equals true thereby
446:53 - overriding the default of false let me
446:55 - now run python of names Dot pie and now
446:57 - Ron's at the top and draco's at the
447:00 - bottom so there too whenever you have a
447:02 - question like that moving forward
447:03 - consider what does the documentation say
447:05 - and see if there's a germ of an idea
447:07 - there because odds are if you have some
447:09 - problem odds are some programmer before
447:10 - you have had the same question other
447:13 - thoughts
447:14 - uh can we limit
447:16 - um
447:17 - and the second question can we find
447:21 - specific claim at least really good
447:24 - question can we limit the number of the
447:25 - names in the file and can we find a
447:27 - specific one we absolutely could if we
447:30 - were to write code we could for instance
447:32 - open the file first count how many lines
447:35 - are already there and then if there's
447:37 - too many already we could just exit with
447:40 - sys.exit or some other message to
447:42 - indicate to the user that sorry the
447:43 - class is full as for finding someone
447:46 - specifically absolutely you could
447:48 - imagine opening the file iterating over
447:50 - it with a for loop again and again and
447:52 - then adding a conditional like if the
447:54 - current line equals equals Harry then we
447:58 - found the chosen run and you can print
447:59 - something like that so you can
448:00 - absolutely combine these ideas with
448:02 - previous ideas like conditionals to ask
448:04 - those same questions how about one other
448:06 - question on file IO uh so I just thought
448:10 - about
448:12 - this function like uh read all lines and
448:16 - it looks like it's uh like separate all
448:21 - the lines by this special character a
448:24 - backslash n but it looks like we don't
448:27 - need it a character and we we always
448:30 - trip it and it looks like some bad
448:34 - design of function why why wouldn't we
448:38 - just strip it inside this function a
448:41 - really good question so we are in my
448:44 - examples thus far using R strip to
448:46 - reverse uh to strip from the end of the
448:49 - line all of this white space you might
448:51 - not want to do that in this case I am
448:53 - stripping it away because I know that
448:55 - each of those lines isn't some generic
448:57 - line of text each line really represents
448:59 - a name that I have put there myself I'm
449:02 - using the new line just to separate one
449:04 - value from another in other scenarios
449:06 - you might very well want to keep that
449:08 - line ending because it's a very long
449:10 - series of text or a paragraph or
449:12 - something like that where you want to
449:13 - keep it distinct from the others but
449:15 - it's just a convention we have to use
449:17 - something presumably probably to
449:19 - separate one chunk of text from another
449:21 - there are other functions in Python that
449:24 - will in fact handle the removal of that
449:26 - white space for you read lines though
449:28 - does literally that though it reads all
449:30 - of the lines as is well allow me to turn
449:33 - our attention back to where we left off
449:35 - here which is just names to propose that
449:38 - with names.text we have an ability it
449:40 - seems to store each of these names
449:42 - pretty straightforwardly but what if we
449:44 - wanted to keep track of other
449:45 - information as well suppose that we
449:48 - wanted to store information including a
449:50 - student's uh name and their house at
449:54 - Hogwarts be it Gryffindor or Slytherin
449:56 - or something else well where do we go
449:58 - about putting that you know Hermione
450:00 - lives in Gryffindor so we could do
450:02 - something like this in our text file
450:03 - Harry lives in Gryffindor so we could do
450:06 - that Ron lives in Gryffindor so we could
450:08 - do that and Draco lives in Slytherin so
450:10 - we could do that but I worry here
450:13 - but I worry now that we're mixing apples
450:15 - and oranges so to speak like some lines
450:17 - or names some lines are houses so this
450:20 - probably isn't the best design if only
450:22 - because it's confusing or it's ambiguous
450:24 - so maybe what we could do is Adopt A
450:26 - convention and indeed this is in fact
450:27 - what a lot of programmers do they change
450:30 - this file not to be names.text but
450:33 - instead let me create a new file called
450:34 - names.csv CSV stands for comma separated
450:38 - values and it's a very common convention
450:40 - to store multiple pieces of information
450:42 - that are related in the same file and so
450:45 - to do this I'm going to separate each of
450:47 - these types of data not with another new
450:49 - line but simply with a comma I'm going
450:52 - to keep each student on their own line
450:53 - but I'm going to separate the
450:55 - information about each student using a
450:57 - comma instead and so now we sort of have
451:00 - a two-dimensional file if you will row
451:02 - by row we have our students but if you
451:04 - think of these commas as representing a
451:06 - column even though it's not perfectly
451:08 - straight because of the lengths of these
451:09 - names it's a little it's a little Jagged
451:12 - you can think of these commas as
451:13 - representing a column and it turns out
451:16 - these CSV files are very commonly used
451:18 - when you use something like Microsoft
451:20 - Excel Apple numbers or Google
451:22 - spreadsheets and you want to export the
451:24 - data to share with someone else as a CSV
451:26 - file or conversely if you want to import
451:29 - a CSV file into your preferred
451:32 - spreadsheet software like Excel or
451:34 - numbers or Google spreadsheets you can
451:36 - do that as well so CSV is a very common
451:38 - very simple text format that just
451:40 - separates values with commas and
451:43 - different types of values ultimately
451:44 - with new lines as well let me go ahead
451:47 - and run code of students.csv to create a
451:50 - brand new file that's initially empty
451:51 - and we'll add to it those same names but
451:54 - also some other information as well so
451:56 - if I now have this new file students.csv
451:59 - inside of which is one column of name so
452:01 - to speak and one column of houses how do
452:04 - I go about changing my code to read not
452:06 - just those names but also those names
452:08 - and houses so that they're not all on
452:09 - one line we somehow have access to both
452:12 - type of value separate lay well let me
452:14 - go ahead and create a new program here
452:16 - called
452:17 - students.pi and in this program let's go
452:20 - about reading not a text file per se but
452:22 - a specific type of text file a CSV a
452:25 - comma separated values file and to do
452:27 - this I'm going to use similar code as
452:28 - before I'm going to say with open quote
452:31 - unquote
452:33 - students.csv I'm not going to bother
452:35 - specifying quote unquote R because again
452:36 - that's the default but I'm going to give
452:38 - myself a variable name of file and then
452:41 - in this file I'm going to go ahead and
452:42 - do this for line in file as before and
452:46 - now I have to be a bit clever here let
452:48 - me go back to students.csv looking at
452:51 - this file and it seems that on my loop
452:54 - on each iteration I'm going to get
452:55 - access to the whole line of text I'm not
452:58 - going to automatically get access to
453:00 - just Hermione or just Gryffindor recall
453:03 - that the loop is going to give me each
453:04 - full line of text so logically what
453:07 - would you propose that we do inside of a
453:10 - for Loop that's reading a whole line of
453:12 - text at once but we now want to get
453:13 - access to the individual values like
453:16 - Hermione and Gryffindor Harry and
453:18 - Gryffindor how do we go about taking one
453:20 - line of text and gaining access to those
453:22 - individual values do you think just
453:24 - instinctively even if you're not sure
453:26 - what the name of the functions would be
453:28 - you can access access it as you would
453:30 - and if you were using a dictionary like
453:32 - using a key and value
453:33 - so ideally we would access it using it a
453:35 - key in value but at this point in the
453:37 - story all we have is this
453:39 - loose Loop is giving me one line of text
453:42 - that is the time I'm the programmer now
453:43 - I have to solve this there is no
453:45 - dictionary yet in question how about
453:47 - another suggestion here
453:49 - um so you can somehow split the two
453:51 - words based on the comma yeah even if
453:54 - you're not quite sure what function is
453:56 - going to do this intuitively you want to
453:57 - take this whole line of text Hermione
453:59 - comma Gryffindor Harry comma Gryffindor
454:01 - and so forth and split that line into
454:04 - two pieces if you will and it turns out
454:06 - wonderfully the function we'll use is
454:07 - actually called split that can split on
454:10 - any characters but you can tell it what
454:12 - character to use so I'm going to go back
454:14 - into students.pi and inside of this Loop
454:17 - I'm going to go ahead and do this I'm
454:18 - going to take the current line I'm going
454:20 - to remove the white space at the end as
454:22 - always using R strip here and then
454:24 - whatever the result of that is I'm going
454:26 - to now call split and quote unquote
454:29 - comma so the split function or method
454:33 - comes with strings stirs in Python any
454:36 - stir has this method built in and if you
454:39 - pass in an argument like a comma what
454:42 - this strip split function will do is
454:44 - split that current string into one two
454:46 - three maybe more pieces by looking for
454:49 - that character again and again
454:51 - ultimately strip uh ultimately split is
454:55 - going to return to us a list of all of
454:57 - the individual parts to the left and to
454:59 - the right of those commas so I can give
455:01 - myself a variable called row here and
455:03 - this is a common Paradigm when you know
455:05 - you're iterating over a file
455:06 - specifically a CSV it's common to think
455:09 - of each line of it as being a row and
455:13 - each of the values they're in separated
455:15 - by commas as columns so to speak so I'm
455:18 - going to deliberately name my variable
455:19 - row just to be consistent with that
455:21 - convention and now what do I want to
455:24 - print well I'm going to go ahead and say
455:25 - this print how about the following in F
455:30 - string that starts with curly braces
455:33 - well how do I get access to the first
455:35 - thing in that row well the row is going
455:37 - to have how many parts two because if
455:40 - I'm splitting on commas and there's one
455:41 - comma per line that's going to give me a
455:44 - left part and a right part like Hermione
455:45 - and Gryffindor Harry and Gryffindor
455:48 - when I have a list like row how do I get
455:51 - access to individual values well I can
455:53 - do this I can say Row Bracket zero and
455:57 - that's going to go to the first element
455:59 - of the list which should hopefully be
456:00 - the student's name then after that I'm
456:03 - going to say is in and I'm going to have
456:05 - another curly brace here for Row Bracket
456:08 - one and then I'm going to close my whole
456:10 - quote so it looks a little cryptic at
456:12 - first glance but most of this is just F
456:14 - string syntax with curly braces to plug
456:16 - in values and what values am I plugging
456:18 - in well row again is a list and it has
456:21 - two elements presumably Hermione in one
456:23 - and Gryffindor and the other and so
456:25 - forth so bracket zero is the first
456:28 - element because remember we start
456:30 - indexing at zero in Python and one is
456:33 - going to be the second element so let me
456:35 - go ahead and run this now and see what
456:37 - happens python of uh
456:41 - students.pi enter and we see Hermione is
456:45 - in Gryffindor Harry's and Gryffindor Ron
456:46 - is in Gryffindor and Draco is in
456:48 - Slytherin so we have now implemented our
456:51 - own code from scratch that actually
456:54 - parses that is reads and interprets a
456:57 - CSV file ultimately here
457:00 - now let me pause to see if there's any
457:01 - questions but we'll make this even
457:03 - easier to read in just a moment
457:06 - any questions on what we've just done
457:08 - here by splitting by comma so my
457:10 - question is uh can we edit any line of
457:14 - code anytime we want or uh the only
457:17 - option that we have is to append uh the
457:20 - lines or let's say if we want to let's
457:23 - say change headies uh house to let's say
457:27 - Slytherin or some other house yeah a
457:30 - really good question what if you want to
457:32 - in Python change a line in the file and
457:35 - not just a pen to the end you would have
457:38 - to implement that logic yourself so for
457:40 - instance you could imagine now opening
457:42 - the file and reading all of the contents
457:44 - in then maybe iterating over each of
457:47 - those lines and as soon as you see that
457:49 - the current name equals equals Harry you
457:51 - could maybe change his house to
457:53 - Slytherin and then it would be up to you
457:55 - though to write all of those changes
457:58 - back to the file so in that case you
458:00 - might want to in simplest form read the
458:02 - file once and let it close then open it
458:04 - again but open for writing and change
458:06 - the whole file it's not really possible
458:09 - or easy to go in and change just part of
458:11 - the file though you can do it it's
458:13 - easier to actually read the whole file
458:15 - make your changes in memory then write
458:17 - the whole file out but for larger files
458:19 - where that might be quite slow you can
458:21 - be more clever than that well let me
458:24 - propose now that we clean this up a
458:26 - little bit because I actually think this
458:27 - is a little cryptic to read Row Bracket
458:29 - zero Row Bracket one it's it's not that
458:31 - well written at the moment I would say
458:34 - but it turns out that when you have a
458:37 - variable that's a list like row you
458:39 - don't have to throw all of those
458:40 - variables into a list you can actually
458:43 - unpack that whole sequence at once that
458:46 - is to say if you know that a function
458:47 - like split returns a list but you know
458:50 - in advance that it's going to return two
458:52 - values in a list the first and the
458:55 - second you don't have to throw them all
458:57 - into a variable that itself is a list
458:58 - you can actually unpack them
459:00 - simultaneously into two variables doing
459:03 - name comma house so this is a nice
459:05 - python technique to not only create but
459:07 - assign
459:08 - automatically in parallel two variables
459:12 - at once rather than just one so this
459:14 - will have the effect of putting the name
459:16 - in the left Hermione and it will have
459:18 - the effect of putting Gryffindor the
459:19 - house in the right variable and we now
459:21 - no longer have a row we can now make our
459:24 - code a little more readable by now
459:25 - literally just saying name down here and
459:27 - for instance house down here so just a
459:29 - little more readable even though
459:30 - functionally the code now is exactly the
459:34 - same
459:35 - all right so this now works and I'll
459:38 - confirm as much by just running it once
459:39 - more python of students.pi enter and we
459:42 - see that the text is as intended but
459:45 - suppose for the sake of discussion that
459:46 - I'd like to sort this list of output I'd
459:50 - like to say hello again to Draco first
459:52 - then hello to Harry then Hermione then
459:54 - Ron how can I go about doing this well
459:57 - let's take some inspiration from the
459:58 - previous example where we're only
460:00 - dealing with names and instead do it
460:03 - with these full phrases so and so is
460:06 - in-house well let me go ahead and do
460:07 - this I'm going to go ahead and start
460:09 - scratch and give myself a list called
460:11 - students equal to an empty list
460:14 - initially and then with open
460:16 - students.csv as file I'm going to go
460:20 - ahead and say this for line in file and
460:24 - then below this I'm going to do exactly
460:25 - as before name comma house equals the
460:27 - current line stripping off the white
460:29 - space at the end splitting it on a comma
460:32 - so that's exact same as before but this
460:34 - time before I go about uh printing the
460:38 - sentence I'm going to store it
460:40 - temporarily in a list so that I can
460:42 - accumulate all of these sentences and
460:44 - then sort them later so let me go ahead
460:46 - and do this students which is my list
460:48 - dot append let me append the actual
460:51 - sentence I want to show on the screen so
460:53 - another F string so name is in house
460:56 - just as before but notice I'm not
460:58 - printing that sentence I'm appending it
461:00 - to my list not a file but to my list why
461:04 - am I doing this well just because as
461:06 - before I want to do this for student in
461:08 - the sorted students I want to go ahead
461:11 - and print out students like this well
461:15 - let me go ahead and run python of
461:17 - students.pi and hit enter now and I
461:19 - think we'll see indeed Draco is now
461:21 - first Harry a second Hermione is third
461:23 - and Ron is fourth but this is arguably a
461:27 - little sloppy right it seems a little
461:30 - hackish that I'm constructing these
461:32 - sentences and even though I'm
461:33 - technically want to sort by name I'm
461:36 - technically sorting by these whole
461:38 - English sentences so it's not wrong it's
461:40 - achieving the intended result but it's
461:43 - not really well designed because I'm
461:45 - just kind of getting lucky that English
461:46 - is reading from left to right and
461:48 - therefore when I print this out it's
461:49 - sorting properly it would be better
461:51 - really to come up with a technique for
461:53 - sorting by the students names not by
461:56 - some English sentence that I've
461:58 - constructed here on line six
462:00 - so to achieve this I'm going to need to
462:02 - make my life more complicated for a
462:04 - moment and I'm going to need to collect
462:07 - information about each student before I
462:10 - bother assembling that sentence so let
462:12 - me propose that we do this let me go
462:14 - ahead and undo these last few lines of
462:16 - code so that we currently have two
462:19 - variables name and house Each of which
462:21 - has name in the student's house
462:23 - respectively and we still have our
462:24 - Global variable students but let me do
462:27 - this recall that python supports
462:29 - dictionaries and dictionaries are just
462:31 - collections of keys and values so you
462:33 - can associate something with something
462:35 - else like a name with Hermione like a
462:37 - house with Gryffindor that really is a
462:40 - dictionary so let me do this let me
462:42 - temporarily create a dictionary that
462:45 - stores this Association of name with
462:47 - house let me go ahead and do this let me
462:49 - say that the student here is going to be
462:52 - represented initially by an empty
462:53 - dictionary and just like you could
462:55 - create an empty list with square
462:56 - brackets you can create an empty
462:57 - dictionary with curly braces so give me
462:59 - an empty diction that will soon have two
463:02 - keys name and house how do I do that
463:05 - well I could do it this way student Open
463:07 - Bracket name
463:09 - equals the student's name that we got
463:12 - from the line student bracket house
463:14 - equals the house that we got from the
463:17 - line and now I'm going to append to the
463:20 - students list plural
463:22 - that particular student now why have I
463:25 - done this I've admittedly made my code
463:27 - more complicated it's more lines of code
463:29 - but I've now collected all of the
463:31 - information I have about students while
463:34 - still keeping track what's a name what's
463:36 - a house the list meanwhile has all of
463:39 - the students names and houses together
463:40 - now why have I done this well let me for
463:43 - the moment just do something simple let
463:45 - me do for students in students and let
463:48 - me very Simply Now say print the
463:50 - following fstring the current student
463:53 - with this name
463:55 - uh is in
463:57 - this current students house and now
464:01 - notice one detail inside of this F
464:03 - string I'm using my curly braces as
464:05 - always
464:06 - I'm using inside of those curly braces
464:08 - the name of a variable as always but
464:11 - then I'm using not bracket zero or one
464:13 - because these are dictionaries now not
464:15 - list but why am I using single quotes to
464:19 - surround house and to surround name
464:23 - why single quotes inside of this
464:26 - F string
464:29 - to access those
464:31 - Keys yes uh because you have double
464:35 - quotes
464:36 - in that in that line 12 and so you have
464:39 - to tell python to differentiate exactly
464:42 - because I'm already using double quotes
464:43 - outside of the F string if I want to put
464:46 - quotes around any strings on the inside
464:48 - which I do need to do for dictionaries
464:50 - because recall when you index into a
464:52 - dictionary you don't use numbers like
464:54 - lists 0 1 2 onward you instead use
464:57 - strings which need to be quoted but if
464:59 - you're already using double quotes it's
465:01 - easiest to then use single quotes on the
465:02 - inside so python doesn't get confused
465:04 - about what lines up with what so at the
465:07 - moment when I run this program it's
465:09 - going to print out those hellos but
465:11 - they're not yet sorted in fact what I
465:14 - now have is a list of dictionaries and
465:18 - nothing is yet sorted but let me tighten
465:20 - up the code too to point out that it
465:21 - doesn't need to be quite as verbose if
465:24 - you're in the habit of creating an empty
465:25 - dictionary like this on line six and
465:27 - then immediately putting in two keys
465:29 - name and house each with two values name
465:32 - and house respectively you can actually
465:33 - do this all at once so let me show you a
465:35 - slightly different syntax I can do this
465:38 - give me a variable called student and
465:40 - let me use curly braces on the right
465:42 - hand side here but instead of leaving
465:43 - them empty let's just Define those keys
465:46 - and those values now quote unquote name
465:48 - will be name and quote unquote house
465:51 - will be house this achieves the exact
465:54 - same effect in one line instead of three
465:56 - it creates a new non-empty dictionary
465:59 - containing a name key the value of which
466:01 - is the student's name and a house key
466:03 - the value of which is the student's
466:05 - house nothing else needs to change that
466:07 - will still just work so that if I again
466:09 - run python of students.pi I'm still
466:11 - seeing those greetings but they're still
466:13 - not quite actually sorted well what
466:16 - might I go about doing here in order to
466:19 - what could I do to improve upon this
466:21 - further
466:22 - well we need some mechanism now of
466:25 - sorting those students but unfortunately
466:28 - you can't do this we can't sort all of
466:32 - the students now because those students
466:34 - are not names like they were before they
466:36 - aren't sentences like they were before
466:38 - each of the students is a dictionary and
466:40 - it's not obvious how you would sort a
466:42 - dictionary inside of a list so ideally
466:46 - what do we want to do if at the moment
466:48 - we hit line 9 we have a list of all of
466:51 - these students and inside of that list
466:53 - is one dictionary per student and each
466:56 - of those dictionaries has two keys name
466:58 - and house wouldn't it be nice if there
467:00 - were ran code to tell python sort this
467:03 - list by looking at this key in each
467:06 - dictionary because that would give this
467:08 - the ability to sort either by name or
467:10 - even by house or even by any other field
467:13 - that we add to that file so it turns out
467:16 - we can do this we can tell the sorted
467:18 - function not just to reverse things or
467:20 - not it takes another position National
467:23 - it takes another named parameter called
467:26 - key where you can specify what key
467:28 - should be used in order to sort some
467:31 - list of dictionaries and I'm going to
467:33 - propose that we do this I'm going to
467:35 - first Define a function temporarily for
467:37 - now called get name and this functions
467:40 - purpose in life given a student is to
467:43 - quite simply return the student's name
467:45 - from that particular dictionary so if
467:48 - student is a dictionary this is going to
467:50 - return literally the student's name and
467:52 - that's it that's the sole purpose of
467:54 - this function in life what do I now want
467:56 - to do well now that I have a function
467:58 - that given a student will return to me
468:01 - the student's name I can do this I can
468:03 - change sorted to say use a key that's
468:06 - equal to whatever the return value of
468:09 - get name is and this now is a feature of
468:12 - python python allows you to pass
468:15 - functions as arguments in two other
468:18 - functions so get name is a function
468:21 - sorted is a function and I'm passing in
468:24 - get name to sort it as the value of that
468:28 - key parameter now why am I doing that
468:31 - well if you think of the get name
468:33 - function as just a bunch a block of code
468:35 - that will get the name of a student
468:37 - that's handy because that's the
468:39 - capability that sorted needs when given
468:41 - a list of students Each of which is a
468:42 - dictionary sorted needs to know how do I
468:45 - get the name of the student in order to
468:46 - do alphabetical sorting for you the
468:48 - authors of python didn't know that we
468:49 - were going to be creating students here
468:51 - in this class so they couldn't have
468:52 - anticipated writing code in advance that
468:55 - specifically sorts on a field called
468:56 - student let alone called name let alone
468:59 - house so what did they do they instead
469:03 - built into the sorted function this
469:05 - named parameter key that allows us all
469:08 - these years later to tell their function
469:10 - sorted how to sort this list of
469:12 - dictionaries so now watch what happens
469:15 - if I run python of students.pi and hit
469:18 - enter I now have a sorted list of output
469:21 - why because because now that list of
469:23 - dictionaries has all been sorted by the
469:26 - student's name I can further do this if
469:29 - as before we want to reverse the whole
469:31 - thing by saying reverse equals true we
469:33 - can do that too let me rerun python of
469:35 - students.pi and hit enter now it's
469:36 - reverse now it's Ron then Hermione Harry
469:39 - and Draco but we can do something
469:40 - different as well what if I want to sort
469:43 - for instance by house name reversed I
469:46 - could do this I could change this
469:48 - function from get name to get house I
469:50 - could change the implementation up here
469:52 - to be get house and I can return not the
469:54 - student's name but the student's house
469:56 - and so now notice if I run python of
470:00 - students.pi enter notice now it is
470:03 - sorted by house in reverse order
470:06 - Slytherin is first and then Gryffindor
470:09 - if I get rid of the reverse but keep the
470:12 - get house and rerun this program now
470:14 - it's sorted by house gryffindor's first
470:17 - and Slytherin is last and the upside now
470:20 - of this is because I'm using this list
470:22 - of dictionaries and keeping the students
470:24 - data together until the last minute when
470:27 - I'm finally do doing the printing I now
470:29 - have full control over the information
470:30 - itself and I can sort by this or that I
470:33 - don't have to construct construct those
470:34 - sentences in advance like I rather
470:36 - hackishly did the first time
470:38 - all right that was a lot let me pause
470:40 - here to see if there are questions so
470:43 - when when we're starting the files do we
470:46 - every time should we use the loops or
470:51 - like uh like a dictionary or or any kind
470:54 - of list can be sort by just sorting not
470:59 - uh looping or
471:01 - any kind of stuff a good question and
471:04 - the short answer with python alone
471:06 - you're the programmer you need to do the
471:08 - Sorting with libraries and other
471:11 - techniques absolutely you can do more of
471:13 - this automatically because someone else
471:15 - has written that code what we're doing
471:17 - at the moment is doing everything from
471:18 - scratch ourselves but absolutely with
471:20 - other functions or libraries some of
471:22 - this could be made uh more uh easily
471:24 - done some of this could be made uh
471:26 - easier other questions
471:29 - on this technique here it's equal to the
471:32 - return value of the function uh can it
471:35 - be equal to uh just uh a variable or a
471:42 - value it well yes it should equal a
471:45 - value so I'm speci and I should clarify
471:47 - actually since this was not obvious
471:49 - so when you pass in a function like get
471:52 - name or get house to the sorted function
471:55 - as the value of key that function is
471:58 - automatically called by the get by the
472:01 - sorted function for you on each of the
472:04 - dictionaries in the list and it uses the
472:07 - return value of get name or get house to
472:09 - decide what strings to actually use to
472:12 - compare in order to decide which is
472:15 - alphabetically correct so this function
472:17 - which you pass just by name you do not
472:19 - pass in parentheses at the end is called
472:22 - by the sorted function in order to
472:24 - figure out for you how to compare these
472:27 - same values how can we use nested
472:31 - dictionaries I have read about the
472:35 - nested dictionaries what is the
472:36 - difference between nested dictionaries
472:38 - and the dictionary inside a list I think
472:42 - it is sure
472:43 - um uh so we are using a list of
472:46 - dictionaries why because each of those
472:48 - dictionaries represents a student and a
472:49 - student has a name and a house and we
472:51 - want to I claim maintain that
472:53 - Association and it's a list of students
472:55 - because we've got multiple students four
472:57 - in this case you could create us a
472:59 - structure that is a dictionary of
473:01 - dictionaries but I would argue it just
473:03 - doesn't solve a problem I don't need a
473:04 - dictionary of dictionary I need a list
473:06 - of key value pairs right now that's all
473:09 - so let me propose if we go back to
473:11 - students.pi here and we revert back to
473:14 - the approach where we have get name as
473:16 - the function both used and defined here
473:19 - and that function Returns the student's
473:21 - name what happens to be clear is that
473:24 - the sorted function will use the value
473:27 - of key get name in this case calling
473:30 - that function on every dictionary in the
473:32 - list that it's supposed to sort and that
473:35 - function get name Returns the string
473:38 - that sorted will actually use to decide
473:40 - whether things go in this order left
473:41 - right or in this order right left it
473:44 - alphabetizes things based on that return
473:46 - value so notice that I'm not calling the
473:49 - function get name here with parentheses
473:51 - I'm passing in an only by its name so
473:53 - that the sorted function can call that
473:56 - get name function for me now it turns
473:58 - out as always if you're defining
474:00 - something be it a variable or in this
474:02 - case a function and then immediately
474:04 - using it but never once again needing
474:07 - the name of that function like get name
474:09 - we can actually tighten this code up
474:11 - further I can actually do this I can get
474:14 - rid of the get name function altogether
474:16 - just like I could get rid of a variable
474:18 - that isn't strictly necessary and
474:20 - instead of passing key the name of a
474:23 - function I can actually Pass Key what's
474:25 - called an a Lambda function which is an
474:28 - anonymous function a function that just
474:30 - has no name why because you don't need
474:32 - to give it a name if you're only going
474:33 - to call it in one place and the syntax
474:35 - for this in Python is a little weird but
474:37 - if I do key equals literally the word
474:40 - Lambda then something like student which
474:43 - is the name of the parameter I expect
474:45 - this function to take and then I don't
474:47 - even type the return key i instead just
474:49 - say student bracket name so what am I
474:53 - doing here with my code this code here
474:56 - that I've highlighted is equivalent to
474:58 - the get name function I implemented a
475:00 - moment ago the syntax is admittedly a
475:03 - little different I don't use def I
475:04 - didn't even give it a name like get name
475:06 - i instead I'm using this other keyword
475:08 - in pi python called Lambda which says
475:11 - Hey python here comes a function but it
475:13 - has no name it's Anonymous that function
475:15 - takes a parameter I could call it
475:18 - anything I want I'm calling it student
475:19 - why because this function that's passed
475:22 - in as key is called on every one of the
475:26 - students in that list every one of the
475:28 - dictionaries in that list what do I want
475:30 - this Anonymous function to return well
475:32 - given a student I want to index into
475:35 - that dictionary and access their name so
475:37 - that the string Hermione and Harry and
475:39 - Ron and Draco is ultimately returned and
475:42 - that's what the sorted function uses to
475:44 - decide how to sort these bigger
475:47 - dictionaries that have other Keys like
475:49 - house as well so if I now go back to my
475:52 - terminal window and run python of
475:54 - students.pi it still seems to work the
475:56 - same but it's arguably a little better
475:58 - design because I didn't waste lines of
476:00 - Code by defining some other function
476:02 - calling it in one and only one place
476:04 - I've done it all sort of in one breath
476:06 - if you will
476:08 - all right let me pause here to see if
476:09 - there's any questions specifically about
476:11 - Lambda or Anonymous functions and this
476:15 - tightening up of the code
476:17 - and I have a question like whether we
476:19 - could Define Lambda twice
476:22 - can you you can use Lambda twice you can
476:24 - create as many Anonymous functions as
476:26 - you'd like and you generally use them in
476:29 - context like this where you want to pass
476:30 - to some other function a function that
476:33 - itself does not need a name so you can
476:35 - absolutely use it in more than one place
476:37 - I just have only one use case for it how
476:40 - about one other question on Lambda or
476:41 - Anonymous functions specifically what
476:44 - what if our Lambda would take more than
476:48 - one line for example if sure if your
476:52 - Lambda function takes multiple
476:53 - parameters that is fine you can simply
476:55 - specify commas followed by the names of
476:59 - those parameters maybe X and Y or so
477:01 - forth after the name student so here too
477:03 - Lambda looks a little different from
477:05 - Death in that you don't have parentheses
477:07 - you don't have the keyword def you don't
477:09 - have a function name but ultimately they
477:11 - achieve that same effect they create a
477:12 - function anonymously and allow you to
477:15 - pass it in for instance as some value
477:17 - here so let's now change students.csv to
477:21 - contain not students houses at Hogwarts
477:23 - but their homes where they grew up so
477:25 - Draco for instance grew up in Malfoy
477:27 - Manor Ron grew up in the borough Harry
477:31 - grew up in number four
477:35 - privet drive and according to the
477:38 - internet no one knows where Hermione
477:40 - grew up the movies apparently took
477:41 - certain liberties with where she grew up
477:43 - so for this purpose we're actually going
477:44 - to remove Hermione because it is unknown
477:46 - exactly where she was born so we still
477:48 - have some three students but if anyone
477:51 - can spot the potential problem now
477:54 - how might this be a bad thing well let's
477:57 - go and try and run our own code here let
477:59 - me go back to students.pi here and let
478:01 - me propose that I just changed my
478:03 - semantics because I'm now not thinking
478:04 - about Hogwarts houses but the students
478:06 - own home so I'm just going to change
478:08 - some variables I'm going to change this
478:10 - house to a home this house to a home as
478:13 - well as this one here I'm still going to
478:15 - sort the students by name but I'm going
478:17 - to say that they're not in a house but
478:19 - rather from a home so I've just changed
478:22 - the names of my variables in my grammar
478:24 - in English here ultimately to print out
478:26 - that for instance Harry is from number
478:28 - four privet drive and so forth but let's
478:31 - see what happens here when I run python
478:33 - of this version of students.pi having
478:35 - changed students.csv to contain those
478:39 - homes and not houses enter
478:42 - huh our first value error like the
478:45 - program just doesn't work What might
478:48 - explain this value error the explanation
478:51 - of which rather cryptically is too many
478:54 - values to unpack and the line in
478:56 - question is this one involving split how
479:00 - did all of a sudden after all of these
479:02 - successful runs of this program did line
479:05 - five suddenly now break in the line
479:08 - instruments.csv you have three values
479:11 - there's a line that you have three
479:12 - valleys and incidents yeah I spent a lot
479:16 - of time trying to figure out where every
479:18 - student should be from so that we could
479:20 - create this problem for us and
479:22 - wonderfully like the first sentence of
479:23 - the book is number four privet drive and
479:26 - so the fact that that address has a
479:28 - comma in it is problematic why because
479:31 - you and I decided some time ago to just
479:33 - standardize on commas CSV comma
479:35 - separated values to denote the uh
479:40 - we standardized on commas in order to
479:42 - delineate one value from another and if
479:45 - we have commas grammatically in the
479:48 - student's home we're clearly confusing
479:50 - it as this special symbol and the split
479:52 - function is now for just Harry trying to
479:55 - split it into three values not just two
479:58 - and that's why there's too many values
480:00 - to unpack because we're only trying to
480:02 - assign two variables name and house now
480:05 - what could we do here well we could just
480:07 - change our approach for instance like
480:09 - one Paradigm that is not uncommon is to
480:11 - use something a little more
480:14 - a little less common like a vertical bar
480:17 - so I could go in and change all of my
480:19 - commas to Vertical bars that too could
480:21 - eventually come back to bite Us in that
480:23 - if my file eventually has vertical bar
480:25 - somewhere it might still break so maybe
480:27 - that's not the best approach I could
480:29 - maybe do something like this I could
480:30 - escape the data as I've done in the past
480:33 - and maybe I could put quotes around any
480:36 - English string that itself contains a
480:39 - comma and that's fine I could do that
480:41 - but then my code students.pi is going to
480:44 - have to change too because I can't just
480:46 - naively split on a comma Now I'm going
480:49 - to have to be smarter about it I'm going
480:51 - to have to take into account split only
480:53 - on the commas that are not inside of
480:55 - quotes and oh it's getting complicated
480:57 - fast and at this point you need to take
481:00 - a step back and consider you know what
481:01 - if we're having this problem odds are
481:03 - many other people before us have had the
481:06 - same problem it is incredibly common to
481:08 - store data in files it is incredibly
481:10 - common to use CSV files specifically and
481:13 - so you know what why don't we see if
481:16 - there's a library in Python that exists
481:18 - to read and or write CSV files rather
481:22 - than reinvent a wheel so to speak let's
481:24 - see if we can write better code by
481:26 - standing on the shoulders of others who
481:27 - have come before us programmers passed
481:29 - and actually use their code to do the
481:31 - reading and writing of csvs so we can
481:34 - focus on the part of our problem that
481:36 - you and I care about so let's propose
481:38 - that we go back to our code here and see
481:41 - how we might use the CSV Library indeed
481:43 - within python there is a module called
481:46 - CSV the documentation for it is at this
481:49 - URL here in Python's official
481:51 - documentation but there's a few
481:52 - functions that are pretty readily
481:54 - accessible if we just Dive Right In and
481:57 - let me propose that we do this let me go
481:59 - back to my code here and instead of
482:02 - Reinventing this wheel and reading the
482:04 - file line by line and splitting on
482:06 - commas and dealing now with quotes and
482:08 - privet drives and so forth let's do this
482:11 - instead at the start of my program
482:13 - let me go up and import the CSV module
482:17 - let's use this library that someone else
482:19 - has written that's dealing with all of
482:21 - these Corner cases if you will I'm still
482:23 - going to give myself a list initially
482:25 - empty in which to store all these
482:27 - students but I'm going to change my
482:29 - Approach here now just a little bit when
482:31 - I open this file with with let me go in
482:35 - here and change this a little bit I'm
482:37 - going to go in here now and say this
482:40 - uh reader equals CSV dot reader passing
482:44 - in file as input so it turns out if you
482:47 - read the documentation for the CSV
482:48 - module it comes with a function called
482:51 - reader whose purpose in life is to read
482:53 - a CSV file for you and figure out where
482:56 - are the commas where are the quotes
482:58 - where are all the the potential Corner
483:00 - cases and just deal with them for you
483:02 - you can override certain defaults or
483:04 - assumptions in case you're using not a
483:06 - comma but a pipe or something else but
483:07 - by default I think it's just going to
483:09 - work now how do I iterate over a reader
483:12 - and not the raw file itself it's almost
483:14 - the same the library allows you still to
483:16 - do this for each row in the reader so
483:20 - you're not iterating over the file
483:22 - directly now you're iterating over the
483:24 - reader which is again going to handle
483:26 - all of the parsing of commas and new
483:28 - lines and more for each row in the
483:30 - reader what am I going to do well at the
483:33 - moment I'm going to do this I'm going to
483:34 - append to my students list the following
483:37 - dictionary a dictionary that has a name
483:40 - whose value is the current Row's First
483:43 - Column and whose house or rather home
483:46 - now is the Rose second column now it's
483:49 - worth noting that the reader for each
483:52 - line in the file indeed returns to me a
483:54 - row but it returns to me a row that's a
483:56 - list which is to say that the first
483:58 - element of that list is going to be the
484:00 - student's name as before the second
484:02 - element of that list is going to be the
484:04 - student's home as now before but if I
484:08 - want to access each of those elements
484:09 - remember that lists are zero indexed we
484:11 - start counting at zero and then one
484:13 - rather than one and then two so if I
484:15 - want to get at the student's name I use
484:16 - Row Bracket zero and if I want to get at
484:18 - the student's home I use Row Bracket one
484:20 - but in my for Loop we can do that same
484:23 - unpacking as before if I know this CSV
484:25 - is only going to have two columns I
484:28 - could even do this for name home in
484:32 - reader and now I don't need to use list
484:34 - notation I can unpack things all at once
484:36 - and say name here and home here the rest
484:40 - of my code can stay exactly the same
484:42 - because what am I doing now on line 8
484:44 - I'm still constructing the same
484:46 - dictionary as before albeit for homes
484:48 - instead of houses and I'm grabbing those
484:50 - values now not from the file itself and
484:52 - my use of split but the reader and again
484:54 - what the reader is going to do is figure
484:56 - out where are those commas where are the
484:58 - quotes and just solve that problem for
485:00 - you so let me go now down to my terminal
485:02 - window and run python of students.pi and
485:05 - hit enter and now we see successfully
485:07 - sorted no less that Draco is from
485:10 - malform Manor Harry is from number four
485:12 - comma privet drive and Ron is from the
485:16 - borough
485:17 - questions now on this technique of using
485:20 - CSV reader from that CSV module which
485:24 - again is just getting us out of the
485:26 - business of reading each line ourself
485:28 - and reading each of those commas and
485:30 - splitting so my questions related to
485:32 - Something in the past
485:34 - um I recognize that you are reading a
485:37 - file every time you well you we're we're
485:41 - assuming that we have the CSV file to
485:43 - hand already in this case
485:46 - um is it possible to make a file
485:49 - readable and writable so in in case if
485:54 - you want you could you could write some
485:57 - stuff to the file but then at the same
486:00 - time you could have another function
486:01 - that reads through the phone that's
486:03 - changes to it as you go along a really
486:06 - good question and the short answer is
486:07 - yes however historically the mental
486:10 - model for a file is that of a cassette
486:12 - tape years ago not really in use anymore
486:14 - but cassette tapes are sequential
486:16 - whereby they start at the beginning and
486:18 - if you want to get to the end you kind
486:19 - of have to unwind the tape to get to
486:21 - that point the closest analog nowadays
486:23 - would be something like Netflix or any
486:25 - streaming service where there's a
486:26 - scrubber that you have to go left to
486:28 - right you can't just jump there or jump
486:30 - there you don't have Random Access so
486:32 - the problem with files if you want to
486:33 - read and write them you or some Library
486:35 - needs to keep track of where you are in
486:37 - the file so that if you're reading from
486:39 - the top and then you write at the bottom
486:41 - and you want to start reading again you
486:42 - seek back to the beginning so it's not
486:45 - something we'll do here in class it's
486:46 - more involved but it's absolutely doable
486:48 - for our purposes we'll generally
486:50 - recommend read the file and then if you
486:52 - want to change it write it back out
486:53 - rather than trying to make more
486:55 - piecemeal changes which is good if
486:57 - though the file is massive and it would
486:59 - just be very expensive time wise to
487:01 - change the whole thing other questions
487:03 - on this CSV reader
487:06 - is possible to write a paragraph in that
487:11 - file
487:12 - absolutely right now I'm writing very
487:14 - small strings just names or houses as I
487:17 - did before but you can absolutely write
487:18 - as much text as you want
487:21 - indeed
487:22 - other questions on CSV reader
487:26 - choose
487:28 - himself IP like input key will be a name
487:33 - or home so short answer yes we could
487:36 - absolutely write a program that prompts
487:38 - the user for a name and a home a name
487:41 - and a home and we could write out those
487:42 - values and in a moment we'll see how you
487:44 - can write to a CSV file for now I'm
487:47 - assuming as the programmer who created
487:50 - students.csv that I know what the
487:52 - columns are going to be and therefore
487:54 - I'm naming my variables accordingly
487:55 - however this is a good segue to one
487:58 - final feature of reading csvs which is
488:00 - that you don't have to rely on either
488:02 - getting a row as a list and using
488:05 - bracket zero or bracket one and you
488:07 - don't have to unpack things manually in
488:09 - this way we could actually be smarter
488:11 - and start storing the names of these
488:13 - columns in the CSV file itself and in
488:16 - fact if any of you have ever opened a
488:18 - spreadsheet file before be it in Excel
488:20 - Apple Numbers Google spreadsheets or the
488:22 - like all odds are you've noticed that
488:24 - the first row very frequently is a
488:26 - little different it actually is bold
488:28 - face sometimes or it actually contains
488:30 - the names of those columns the names of
488:32 - those attributes below and we can do
488:34 - this here and students.csv I don't have
488:37 - to just keep assuming that the student's
488:39 - name is first and that the student's
488:41 - home is second I can explicitly bake
488:43 - that information into the file just to
488:46 - reduce the probability of mistakes down
488:48 - the road I can literally use the first
488:50 - row of this file and say name comma home
488:53 - so notice that
488:55 - name is not literally someone's name and
488:58 - home is not literally someone's home it
488:59 - is literally the words name and home
489:02 - separated by a comma and if I now go
489:05 - back into students.pi and don't use CSV
489:08 - reader but instead I use a dictionary
489:11 - reader I can actually treat my CSV file
489:14 - even more flexibly not just for this but
489:16 - for other examples too let me do this
489:18 - instead of using a CSV reader let me use
489:21 - a CSV dict reader which will now iterate
489:25 - over the file top to bottom loading in
489:28 - each line of text not as a list of
489:30 - columns but as a dictionary of columns
489:33 - what's nice about this is that it's
489:35 - going to give me automatic access now to
489:37 - those columns names I'm going to revert
489:40 - to just saying for Row in reader and now
489:43 - I'm going to append a name and a home
489:45 - but how am I going to get access to the
489:47 - current rows name and the current rows
489:51 - home well earlier I used bracket zero
489:54 - for the first and bracket one for the
489:55 - second when I was using a reader a
489:58 - reader returns lists addict reader or
490:01 - dictionary reader returns dictionaries
490:03 - one at a time and so if I want to access
490:07 - the current Row's name I can say row
490:09 - quote unquote name I can say here for
490:11 - home row quote unquote home and I now
490:14 - have access to those same values the
490:16 - only change I had to make to be clear
490:18 - was in my CSV file I had to include on
490:21 - the very first row little hints as to
490:23 - what these columns are and if I now run
490:26 - this code I think it should behave
490:27 - pretty much the same python of
490:29 - students.pi and indeed we get the same
490:31 - sentences but now my code is more robust
490:35 - against changes in this data if I were
490:37 - to open the CSV file in Excel or Google
490:40 - spreadsheets or apple numbers and for
490:42 - whatever reason change the columns
490:44 - around maybe this is a file that you're
490:46 - sharing with someone else and just
490:47 - because they decide to sort things
490:49 - differently left to right by moving the
490:51 - columns around
490:52 - previously my code would have broken
490:54 - because I was assuming that name is
490:56 - always first and home is always second
490:58 - but if I did this be it manually in one
491:02 - of those programs or here home comma
491:04 - name and suppose I reversed all of this
491:06 - the home comes first followed by Harry
491:08 - the borough then by Ron and then lastly
491:12 - Malfoy Manor then Draco notice that my
491:16 - file is now completely flipped the First
491:18 - Column is now the second and the
491:19 - second's the first but I took care to
491:21 - update the header of that file the first
491:24 - row notice my python code I'm not going
491:27 - to touch it at all I'm going to rerun
491:29 - python of students.pi and hit enter and
491:32 - it still just works and this too is an
491:35 - example of like coding defensively like
491:37 - what if someone changes your CSV file
491:39 - your data file ideally that won't happen
491:40 - but even if it does now because I'm
491:43 - using a dictionary reader that's going
491:45 - to infer from that first row for me what
491:48 - the columns are called my code just
491:50 - keeps working and so it keeps getting if
491:52 - you will better and better
491:55 - any questions now on this approach yeah
491:58 - what is the importance of new line CSV
492:01 - file what's the importance of the new
492:02 - line in the CSV file it's partly a
492:05 - convention in the world of text files we
492:07 - humans have just been for decades in the
492:08 - habit of storing
492:10 - um data line by line it's visually
492:12 - convenient it's just easy to extract
492:15 - from the file because you just look for
492:17 - the new lines so the new line just
492:19 - separates some data from some other data
492:22 - we could use any other symbol on the
492:24 - keyboard but it's just common to hit
492:26 - enter to just move the data to the next
492:28 - line just a convention
492:30 - other questions it seems to be working
492:32 - fine if you just have name and home I'm
492:35 - wondering what will happen if you want
492:37 - to put in more data
492:40 - um
492:41 - say you wanted to add a house to both
492:45 - the name and the home
492:47 - sure if you wanted to add the house back
492:49 - so if I go in here and add house last
492:51 - and I go here and say Gryffindor for
492:54 - Harry Gryffindor for Ron and Slytherin
492:58 - for Draco now I have three columns
493:01 - effectively if you will home on the left
493:03 - name in the middle house on the right
493:05 - each separated by commas with weird
493:07 - things like number four comma privet
493:09 - Drive still quoted notice if I go back
493:11 - to students.pi and I don't change the
493:13 - code at all and runs python of
493:16 - students.pi it still just works and this
493:18 - is what's so powerful about a dictionary
493:20 - reader it can change over time it can
493:23 - have more and more columns your existing
493:25 - code is not going to break your code
493:28 - would break would be much more fragile
493:30 - so to speak if you were making
493:31 - assumptions like the first column's
493:33 - always going to be named the second
493:34 - column is always going to be house
493:35 - things will break fast if those
493:38 - assumptions break down
493:39 - so not a problem in this case
493:42 - well let me propose that besides reading
493:44 - csvs let's at least take a peek at how
493:46 - we might write a csv2 if you're writing
493:49 - a program in which you want to store not
493:50 - just students names but maybe their
493:52 - homes as well in a file how can we keep
493:54 - adding to this file let me go ahead and
493:57 - delete the contents of students.csv and
494:00 - just re-add a single simple row name
494:02 - comma home so as to anticipate inserting
494:05 - more names and homes into this file and
494:08 - then let me go to students.pi and let me
494:10 - just start fresh so as to write out data
494:12 - this time I'm still going to go ahead
494:13 - and import CSV I'm going to go ahead now
494:16 - and prompt the user for their name so
494:19 - input quote unquote what's your name
494:21 - question mark and I'm going to go ahead
494:23 - and prompt the user for their home so
494:25 - home equals input quote unquote where's
494:28 - your home question mark now I'm going to
494:32 - go ahead and open the file but this time
494:33 - for writing instead of reading as
494:35 - follows with open quote unquote
494:38 - students.csv I'm going to open it in
494:41 - append mode so that I keep adding more
494:43 - and more students and homes to the file
494:45 - rather than just overwriting the entire
494:47 - file itself and I'm going to use a
494:48 - variable name of file I'm then going to
494:51 - go ahead and give myself a variable
494:52 - called writer and I'm going to set it
494:54 - equal to the return value of another
494:56 - function in the CSV module called CSV
494:59 - dot writer and that writer function
495:02 - takes as its sole argument the file
495:05 - variable there now I'm going to go ahead
495:08 - and just do this I'm going to say writer
495:09 - dot right row and I'm going to pass into
495:12 - right Row the line that I want to write
495:15 - to the file specifically as a list so
495:17 - I'm going to give this a list of name
495:20 - comma home which of course are the
495:22 - contents of those variables now I'm
495:23 - going to go ahead and save the file I'm
495:25 - going to go ahead and rerun python of
495:27 - students.pi hit enter and what's your
495:30 - name well let me go ahead and type in
495:31 - Harry as my name and number four
495:36 - comma privet Drive enter now notice that
495:40 - input itself did have a comma and so if
495:42 - I go to my CSV file now notice that it's
495:45 - automatically been quoted for me so that
495:47 - subsequent reads from this file don't
495:49 - confuse that comma with the actual comma
495:51 - between Harry and his home well let me
495:53 - go ahead and run it a couple of more
495:55 - times let me go ahead and rerun python
495:57 - of students.pi let me go ahead and input
495:59 - this time Ron and his home as the
496:01 - borough let's go back to students.csv to
496:04 - see what it looks like now we see Ron
496:06 - comma the burrow has been added
496:08 - automatically to the file and let's do
496:10 - one more python of students.pi enter
496:13 - let's go ahead and give draco's name and
496:15 - his home which would be Malfoy Manor
496:18 - enter and if we go back to students.csv
496:21 - now we see that Draco is in the file
496:22 - itself and the library took care of not
496:24 - only writing each of those rows per the
496:26 - function's name it also handled the
496:28 - escaping so to speak of any strings that
496:31 - themselves contain a comma like Harry's
496:33 - own home well it turns out there's yet
496:35 - another way we we could implement this
496:37 - same program without having to worry
496:39 - about precisely that order again and
496:41 - again and just passing in a list it
496:43 - turns out if we're keeping track of
496:45 - what's the name and what's the home we
496:47 - could use something like a dictionary to
496:48 - associate those keys with those values
496:50 - so let me go ahead and back up and
496:52 - remove these students from the file
496:53 - leaving only the header row again name
496:56 - comma home and let me go over to
496:57 - students.pi and this time instead of
496:59 - using CSV writer I'm going to go ahead
497:02 - and use
497:03 - csv.dictriter which is a dictionary
497:05 - writer that's going to open the file in
497:07 - much the same way but rather than write
497:09 - a row as this list of name comma home
497:12 - what I'm now going to do is follows I'm
497:15 - going to first output an actual
497:18 - dictionary the first key of which is
497:20 - Name colon and then the value thereof is
497:22 - going to be the name that was typed in
497:24 - and I'm going to pass in a key of Home
497:26 - quote unquote the value of which of
497:27 - course is the home that was typed in but
497:29 - with dict writer I do need to give it a
497:32 - hint as to the order in which those
497:34 - columns are when writing it out so that
497:37 - subsequently they could be red even if
497:39 - those orderings change let me go ahead
497:41 - and pass in field names which is a
497:43 - second argument to dictwriter equals and
497:46 - then a list of the actual columns that I
497:48 - know are in this file which of course
497:50 - are name comma home those times in
497:53 - quotes because that's indeed the string
497:55 - names of the columns so to speak that I
497:57 - intend to write to in that file all
498:00 - right now let me go ahead and go to my
498:01 - terminal window run python of
498:03 - students.pi this time I'll type in
498:06 - Harry's name again I'll again type in
498:08 - number four comma privet Drive
498:11 - enter let's now go back to students.csv
498:14 - and voila parries back in the file and
498:16 - it's properly escaped or quoted I'm sure
498:19 - then if we do this again with Ron and
498:21 - the burrow and let's go ahead and run it
498:23 - one third time with Draco and Malfoy
498:26 - Manor enter let's go back to
498:29 - students.csv and Via this dictionary
498:31 - writer we now have all three of those
498:33 - students as well so whereas with CSV
498:36 - writer the onus is on us to pass in a
498:39 - list of all of the values we want to put
498:42 - from left to right with a dictionary
498:44 - writer technically they could be in any
498:46 - order in the dictionary in fact I could
498:48 - just have correctly done this passing in
498:51 - home followed by name but it's a
498:53 - dictionary and so the ordering in this
498:55 - case does not matter so long as the key
498:57 - is there and the value is there and
498:58 - because I have passed in field names as
499:00 - the second argument to dict writer it
499:03 - ensures that the library knows exactly
499:05 - which column contains name or home
499:08 - respectively
499:10 - are there any questions now on
499:12 - dictionary reading dictionary writing or
499:14 - csvs more generally
499:17 - India and your specifics suppressive
499:20 - fake situation for me to use a single
499:22 - quotation or double quotation because
499:24 - after the print we use a single
499:27 - quotation to represent the key of the
499:30 - dictionary but after the
499:33 - reading or writing we use the double
499:36 - quotation
499:37 - it's a good question in Python you can
499:40 - generally use double quotes or you can
499:42 - use single quotes and it doesn't matter
499:44 - you should just be self-consistent so
499:46 - that stylistically your code looks the
499:48 - same all throughout sometimes though it
499:51 - is necessary to alternate if you're
499:53 - already using double quotes as I was
499:55 - earlier for a long F string but inside
499:57 - that F string I was interpolating the
500:00 - values of some variables using curly
500:01 - braces and those variables were
500:04 - dictionaries and in order to index into
500:07 - a dictionary you use square brackets and
500:09 - then quotes but if you're already using
500:11 - double quotes out here you should
500:13 - generally use single quotes here or vice
500:16 - versa but otherwise I'm in the habit of
500:18 - using double quotes everywhere others
500:20 - are in the habit of using single quotes
500:21 - everywhere it only matters sometimes if
500:24 - one might be confused for the other
500:27 - other questions on dictionary writing or
500:30 - reading uh yeah my question is can we
500:34 - use multiple CSV files in any program
500:38 - absolutely you can use as many CSV files
500:40 - as you want and it's just one of the
500:42 - formats that you can use to save data
500:44 - other questions on csvs or file IO
500:47 - thanks for taking my question uh so when
500:51 - you're reading from the file the um you
500:53 - had the um uh as a as a dictionary you
500:57 - had the fields called
500:59 - um couldn't you just call it when you're
501:00 - reading could couldn't you just call the
501:01 - row in the previous version of the of
501:03 - the students uh dot Pi file
501:07 - um when you're reading the uh when
501:10 - you're reading each row you are
501:11 - splitting out the um the fields by name
501:17 - yeah so when you're appending to the uh
501:19 - to the students list can you just call
501:21 - the uh for row and reader
501:23 - students.append row rather than
501:26 - uh rather than naming each of the fields
501:29 - oh very clever uh short answer yes in so
501:33 - far as dict reader returns one
501:36 - dictionary at a time when you Loop over
501:39 - it row is already going to be a
501:41 - dictionary so yes you could actually get
501:44 - away with doing this and the effect
501:45 - would really be the same in this case
501:48 - good observation how about one more
501:50 - question on csvs
501:53 - yeah when reading in csvs from my past
501:57 - work with data a lot of things can go
502:00 - wrong I don't know if it's a fair
502:01 - question that you can answer in a few
502:03 - sentences but are there any best
502:05 - practices to double check that sort of
502:09 - no mistakes occurred
502:11 - it's a really good question and I would
502:13 - say in general if you're using code to
502:16 - generate the csvs and to read the csvs
502:19 - and you're using a good Library
502:21 - theoretically nothing should go wrong it
502:23 - should be 100 correct if the libraries
502:26 - are 100 correct uh you and I tend to be
502:29 - the problem like when you let a human
502:31 - touch the CSV or when Excel or apple
502:33 - numbers or some other tools involved
502:35 - that might not be aligned with your
502:37 - code's expectations things then yes can
502:39 - break the goal really sometimes honestly
502:42 - the solution is manual fixes you go in
502:44 - and fix the CSV or you have a lot of
502:47 - error checking or you have a lot of try
502:49 - except just to tolerate mistakes in the
502:51 - data but generally I would say if you're
502:53 - using CSV or any file format internally
502:55 - to a program to both read and write it
502:58 - you shouldn't have concerns there you
503:00 - and I the humans are the problem uh
503:02 - generally speaking and not the
503:03 - programmers the users of those files
503:05 - instead all right allow me to propose
503:07 - that we leave csvs behind but to note
503:10 - that they're not the only file format
503:11 - you you can use in order to read or
503:14 - write data in fact they're a popular
503:15 - format as is just raw text files.txt
503:18 - files but you can store data really any
503:20 - way that you want we've just picked csvs
503:22 - because it's representative of how you
503:24 - might read and write from a file and do
503:26 - so in a structured way where you can
503:28 - somehow have multiple Keys multiple
503:30 - values all in the same file without
503:33 - having to resort to what would be
503:34 - otherwise known as a binary file so a
503:37 - binary file is a file that's really just
503:39 - zeros and ones and they can be laid out
503:41 - in any pattern you might want
503:43 - particularly if you want to store not
503:45 - textual information but maybe graphical
503:47 - or audio or video information as well so
503:50 - it turns out that python is really good
503:52 - when it comes to having libraries for
503:54 - really everything and in fact there's a
503:56 - popular Library called pillow that
503:58 - allows you to navigate image files as
504:02 - well and to perform operations on image
504:04 - files you can apply filters a lot
504:06 - Instagram you can animate them as well
504:09 - and so what I thought we'd do is leave
504:11 - behind behind text files for now and
504:13 - Tackle one more demonstration this time
504:15 - focusing on this particular library and
504:19 - image files instead so let me propose
504:21 - that we go over here to vs code and
504:23 - create a program ultimately that creates
504:26 - an animated gif these things are
504:27 - everywhere nowadays in the form of memes
504:29 - and animations and stickers and the like
504:31 - in an animated gif is really just an
504:33 - image file that has multiple images
504:36 - inside of it and your computer or your
504:39 - phone shows you those images one after
504:41 - another sometimes on an endless loop
504:43 - again and again and so long as there's
504:46 - enough images it creates the illusion of
504:48 - Animation because your mind and mind
504:50 - kind of fills in the gaps visually and
504:52 - just assumes that if something is moving
504:54 - even though you're only seeing one frame
504:56 - per second or some sequence thereof it
504:58 - looks like an animation so it's like a
505:00 - simplistic version of a video file well
505:03 - let me propose that we start with maybe
505:05 - a couple of uh costumes from another
505:08 - popular programming language and let me
505:10 - go ahead and open up my first cost team
505:12 - here number one so suppose here that
505:14 - this is a costume or really just a
505:15 - static image here
505:17 - costume1.jif and it's just a static
505:19 - picture of a cat no movement at all let
505:22 - me go ahead now and open up a second one
505:24 - costume2.jif that looks a little bit
505:27 - different notice and I'll go back and
505:29 - forth this cat's legs are a little bit
505:31 - aligned differently so that this was
505:33 - version one and this was version two now
505:37 - these cats come from a programming
505:38 - language from MIT called scratch that
505:40 - allows you very graphically to animate
505:42 - all this and more but we'll use just
505:44 - these two static images costume one and
505:48 - costume two to create our own animated
505:50 - gif that after this you could text to a
505:52 - friend or message them much like any
505:55 - meme online well let me propose that we
505:57 - create this animated gif not by just
506:00 - using some off-the-shelf program that we
506:01 - downloaded but by writing our own code
506:03 - let me go ahead and run code of
506:05 - costumes.pi and create our very own
506:08 - program that's going to take as input to
506:10 - or even more image file files and then
506:13 - generate an animated gif from them by
506:15 - essentially creating this animated gif
506:17 - by toggling back and forth endlessly
506:20 - between those two images well how am I
506:22 - going to do this well let's assume that
506:24 - this will be a program called
506:25 - costumes.pi that expects uh two command
506:28 - line arguments the names of the files
506:30 - the individual costumes that we want to
506:32 - animate back and forth so to do that I'm
506:34 - going to import sys so that we
506:36 - ultimately have access to sys.org V I'm
506:38 - then from this pillow Library going to
506:40 - import support for images specifically
506:42 - so from pil import image capital i as
506:46 - per the library's documentation now I'm
506:49 - going to give myself an empty list
506:50 - called images just so I have a list in
506:52 - which to store one or two or or more of
506:54 - these images and now let me do this
506:57 - for each argument in sis.org V I'm going
507:02 - to go ahead and create a new image
507:03 - variable set it equal to this image
507:07 - dot open function passing in ARG now
507:11 - what is this doing I proposing that
507:13 - eventually I want to be able to run
507:15 - python of costumes.pi and then as
507:17 - command line arguments specify
507:18 - costume1.jif space costume two dot shift
507:21 - so I want to take in those file names
507:23 - from the command line as my arguments so
507:26 - what am I doing here well I'm iterating
507:28 - over sys.org V all of the words in my
507:31 - command line arguments I'm creating a
507:33 - variable called image and I'm passing to
507:35 - this function image.open from the pillow
507:37 - library that specific argument and that
507:40 - library is essentially going to open
507:42 - that image in a way that gives me a lot
507:44 - of functionality for manipulating it
507:46 - like animating now I'm going to go ahead
507:48 - and
507:49 - append to my images list
507:53 - that particular image and that's it so
507:56 - this Loop's purpose in life is just to
507:58 - iterate over the command line arguments
507:59 - and open those images using this Library
508:02 - the last line is pretty straightforward
508:04 - I'm going to say this I'm going to grab
508:06 - the first of those images which is going
508:08 - to be in my list at location zero and
508:11 - I'm going to save it to disk that is I'm
508:13 - going to save this file now in the past
508:16 - when we use csvs or text files I had to
508:18 - do the file opening I had to do the file
508:20 - writing maybe even the closing I don't
508:23 - need to do that with this Library the
508:24 - pillow library takes care of the opening
508:26 - the closing and the saving for me by
508:29 - just calling save I'm going to call this
508:31 - save function and just to leave space
508:32 - because I have a number of arguments to
508:34 - pass I'm going to move to another line
508:36 - so it fits I'm going to pass in the name
508:38 - of the file that I want to create
508:41 - costume.jif that will be the name of my
508:43 - animated gif I'm going to tell this
508:45 - library to save all of the frames that I
508:49 - passed to it so the First costume the
508:51 - second costume and even more if I gave
508:52 - them I'm I'm going to then append to
508:55 - this first image the image is zero the
508:59 - following images
509:00 - equals this list of images and this is a
509:03 - bit clever but I'm going to do this I
509:05 - want to append the next image there
509:07 - images one and now I want to specify a
509:10 - duration of 200 milliseconds for each of
509:12 - these frames and I want this to Loop
509:15 - forever and if you specify Loop equals
509:17 - zero that is time 0 it means it's just
509:20 - not going to Loop a finite number of
509:22 - times but an infinite number of times
509:24 - instead and I need to do one other thing
509:27 - recall that sys.org V contains not just
509:31 - the words I typed after my program's
509:33 - name but what else does sys.org v
509:36 - contain if you think back to our
509:38 - discussion of command line arguments
509:40 - what else is insist.org V besides the
509:44 - words I'm about to type like costume
509:46 - 1.jif and costume two yeah so we'll
509:50 - actually get in that their original name
509:52 - of the program we want to run the
509:54 - costume set python indeed we'll get the
509:56 - original name of the program costumes.pi
509:58 - in this case which is not a gif
510:00 - obviously so remember that using slices
510:02 - in Python we can do this if sys.orgby is
510:05 - a list and we want to get a slice of
510:08 - that list everything after the first
510:09 - element we can do one colon which says
510:12 - start it location one not zero and take
510:16 - a slice all the way to the end so give
510:17 - me everything except the first thing in
510:20 - that list which to McKenzie's point is
510:21 - the name of the program
510:23 - now if I haven't made any mistakes let's
510:26 - see what happens I'm going to run python
510:28 - of costumes.pi and now I'm going to
510:30 - specify the two images that I want to
510:32 - animate so costume one dot GIF and
510:35 - costume2.gif
510:37 - what is the code now going to do well to
510:39 - recap we're using the sys library to
510:42 - access those command line arguments
510:43 - we're using the pillow library to treat
510:45 - those files as images and with all the
510:48 - functionality that comes with that
510:49 - Library I'm using this images list just
510:51 - to accumulate all of these images one at
510:53 - a time from the command line and in line
510:56 - seven through nine I'm just using a loop
510:58 - to iterate over all of them and just add
511:00 - them to this list after opening them
511:02 - with the library and the last step which
511:05 - is really just one line of code broken
511:06 - onto three so that it all fits I'm going
511:09 - to save the first image but I'm asking
511:11 - the library to append this other image
511:14 - to it as well not bracket zero but
511:16 - bracket one and if I had more I could
511:17 - express those as well I want to save all
511:20 - of these files together I want to pause
511:22 - 200 milliseconds a fifth of a second in
511:25 - between each frame and I want it to Loop
511:27 - infinitely many times so now if I cross
511:31 - my fingers as always hit enter
511:34 - nothing bad happened and that's almost
511:36 - always a good thing let me now run code
511:39 - of costumes dot Jif to open up in vs
511:44 - code the final image and what I think I
511:46 - should see is a very happy cat and
511:50 - indeed so now we've seen not only that
511:52 - we can read and write files be it
511:54 - textually we can read and now write
511:56 - files that are binary zeros and ones
511:58 - we've just scratched the surface this is
512:00 - using the library called pillow But
512:02 - ultimately this is going to give us the
512:04 - ability to read and write files however
512:05 - we want so we've now seen that via file
512:08 - i o we can manipulate not just textual
512:10 - files be it txt files or csvs but even
512:12 - binary files as well in this case they
512:15 - happen to be images but if we dived in
512:16 - deeper we could find explore audio and
512:18 - video and so much more all by way of
512:21 - these simple Primitives this ability
512:22 - somehow to read and write files that's
512:26 - it for now we'll see you next time
512:35 - [Music]
512:47 - [Music]
512:49 - thank you
512:56 - all right this is cs50's Introduction to
512:59 - programming with python my name is David
513:01 - Malin and this is our week on regular
513:03 - Expressions so a regular expression
513:05 - otherwise known as a regex is really
513:08 - just a pattern and indeed it's quite
513:10 - common in programming to want to use
513:11 - patterns to match on some kind of data
513:14 - often user input for instance if the
513:16 - user types in an email address whether
513:18 - to your program or a website or an app
513:20 - on your phone you might ideally want to
513:22 - be able to validate that they did indeed
513:23 - type in an email address and not
513:25 - something completely different so using
513:27 - regular Expressions we're going to have
513:28 - the Newfound capability to Define
513:30 - patterns in our code to compare them
513:33 - against data that we're receiving from
513:34 - someone else whether it's just a
513:36 - validated or heck even if we want to
513:38 - clean up a whole lot of data that itself
513:39 - might be messy because it too came from
513:42 - us humans before though we use these
513:44 - regular Expressions let me propose that
513:47 - we solve a few problems using just some
513:50 - simpler syntax and see what kind of
513:52 - limitations we run up against let me
513:54 - propose that I open up VSCO code here
513:56 - and let me create a file called
513:58 - validate.pi the goal at hand being to
514:00 - validate how about just that a user's
514:02 - email address they've come to your app
514:03 - they've come to your website they type
514:05 - in their email address and we want to
514:06 - say yes or no this email address looks
514:09 - valid all right let me go ahead and type
514:11 - code of validate.pi to create a new tab
514:15 - here and then within this tab let me go
514:17 - ahead and start writing some code how
514:20 - about that keeps things simple initially
514:21 - first let me go ahead and prompt the
514:23 - user for their email address and I'll
514:25 - store the return value of input in a
514:28 - variable called email asking them what's
514:30 - your email question mark I'm going to go
514:33 - ahead and preemptively at least clean up
514:35 - the user's input a little bit by
514:36 - minimally just calling strip at the end
514:39 - of my call to input because recall that
514:42 - input returns a string or a stir stirs
514:45 - come with some built-in methods or
514:47 - functions one of which is strip which
514:49 - has the effect of stripping off any
514:50 - leading white space to the left or any
514:52 - trailing white space to the right so
514:54 - that's just going to go ahead and at
514:55 - least least avoid the human having
514:57 - accidentally typed in a space character
514:59 - we're going to throw it away just in
515:01 - case now I'm going to do something
515:02 - simple
515:03 - for a user's input to be an email
515:06 - address I think we can all agree that
515:08 - it's got to minimally have an at sign
515:10 - somewhere in it so let's start simple if
515:12 - the user has typed in something with an
515:14 - at sign let's very generously just say
515:16 - Okay valid it looks like an email
515:18 - address and if we're missing that at
515:20 - sign let's say invalid because clearly
515:22 - it's not an email address it's not going
515:24 - to be the best version of my code yet
515:25 - but we'll start simple so I'm going to
515:27 - ask the question if there is an at
515:29 - symbol in the user's email address go
515:33 - ahead and print out for instance quote
515:34 - unquote valid else if there's not now
515:36 - I'm pretty confident that the email
515:38 - address is in fact invalid now what is
515:41 - this code doing well if at sign in email
515:44 - is a pythonic way of asking is this
515:47 - string quote unquote at in this other
515:50 - string email no matter where it is at
515:53 - the beginning the middle of the end it's
515:54 - going to automatically search through
515:56 - the entire string for you automatically
515:57 - I could do this more verbosely and I
515:59 - could use a for Loop or a while loop and
516:01 - look get every character in The user's
516:03 - email address looking to see if it's an
516:05 - at sign but this is one of the things
516:07 - that's nice about python you can do more
516:09 - with less so just by saying if at quote
516:12 - unquote in email we're achieving that
516:14 - same result we're going to get back true
516:15 - if it's somewhere in there thus valid or
516:18 - false if it is not well let me go ahead
516:20 - now and run this program in my terminal
516:22 - window with python of validate.pi and
516:25 - I'm going to go ahead and give it my
516:26 - email address mailon harvard.edu enter
516:29 - and indeed it's valid looks valid is
516:31 - valid but of course this program's
516:34 - technically broken it's buggy what would
516:37 - be an example input if someone might
516:39 - like to volunteer and answer here that
516:41 - would be considered valid but you and I
516:43 - know it really isn't valid yeah thank
516:45 - you well please just you can type just
516:47 - to science science and visit and still
516:51 - be able to still be violated according
516:53 - to your program but the same exactly
516:56 - we've set a very low bar here in fact if
516:59 - I go ahead and rerun Python and
517:00 - validate.pi and I'll just type been one
517:02 - at sign that's it no username no domain
517:05 - name this doesn't really look like an
517:06 - email address but unfortunately my code
517:08 - thinks it in fact is because it's
517:10 - obviously just looking for an at sign
517:12 - alone well how could we improve this
517:14 - well minimally an email address I I
517:16 - think tends to have though this is not
517:18 - actually a requirement tends to have an
517:20 - at sign and a single dot at least maybe
517:22 - somewhere in the domain name so mailing
517:24 - at harvard.edu so let's check for that
517:27 - dot as well again strictly speaking
517:29 - doesn't even have to be that case but
517:31 - I'm going for my own email address at
517:32 - least for now as our test case so let me
517:34 - go ahead and change my code now and say
517:36 - not only if at is an email but also uh
517:40 - dot is in email as well so I'm asking
517:43 - now two questions I have two Boolean
517:45 - Expressions if at an email and I'm
517:48 - ending them together logically this is a
517:51 - logical and so to speak so if it's the
517:53 - case that at is an email and Dot is an
517:55 - email okay now I'm going to go ahead and
517:57 - say valid all right this would still
517:59 - seem to work for my email address let me
518:01 - go ahead and run python validate.pi
518:03 - Malin harvard.edu enter and that of
518:07 - course is valid as expected but here too
518:09 - we can be a little adversarial and type
518:11 - in something nonsensical like at Dot and
518:13 - unfortunately that too is going to be
518:15 - mistaken as valid even though there's
518:17 - still no username domain name or
518:19 - anything like that so I think we need to
518:21 - be a little more methodical here in fact
518:24 - notice that if I do this like this the
518:28 - at sign can be anywhere and the dot can
518:30 - be anywhere but if I'm assuming the user
518:32 - is going to have a traditional domain
518:34 - name like harvard.edu or gmail.com I
518:37 - really want to look for the dot in the
518:39 - domain name only not necessarily just
518:42 - the username so let me go ahead and do
518:44 - this let me go ahead and introduce a bit
518:46 - more logic here and instead do this let
518:50 - me go ahead and do email dot split of
518:54 - quote unquote at sign so email again is
518:56 - a string or a stir stirs come with
518:59 - methods not just strip but also another
519:01 - one called split that is the name
519:03 - implies we'll split one stir into
519:05 - multiple ones if you give it a character
519:07 - or more to split on so this oh is
519:11 - hopefully going to return to me two
519:12 - parts from a traditional email address
519:14 - the username and the domain name and it
519:17 - turns out I can unpack that sequence of
519:19 - responses by doing this username comma
519:22 - domain equals this I could store it in a
519:25 - list or some other structure but if I
519:27 - already know in advance what kinds of
519:29 - values I'm expecting a username and
519:31 - hopefully a domain I'm going to go ahead
519:32 - and do it like this instead and just
519:34 - Define two variables at once on one line
519:36 - of code and now I'm going to be a little
519:38 - more precise if username uh uh if
519:42 - username then I'm going to go ahead and
519:45 - say print valid else I'm going to go
519:48 - ahead and say print invalid now this
519:51 - isn't good enough but I'm at least
519:52 - checking for the presence of a username
519:54 - now and you might not have seen this
519:55 - before but if you simply ask a question
519:57 - like if username and username is a
520:00 - string well username if username is
520:02 - going to give me a true answer if
520:04 - username is anything except none or
520:07 - quote unquote nothing so there's a
520:09 - truthy value here whereby if username
520:12 - has at least one character that's going
520:14 - to be considered true but if username
520:16 - has no characters it's going to be
520:18 - considered a false value effectively but
520:21 - this isn't good enough I don't want to
520:22 - just check for username I want to also
520:24 - check that it's the case that dot is in
520:27 - the domain name as well so notice here
520:30 - there's a bid of potential confusion
520:32 - with the English language here I seem to
520:34 - be saying if username and Dot in domain
520:37 - as though I'm asking the question if the
520:39 - username and the dot are in the domain
520:42 - but that's not what this means these are
520:44 - two separate Boolean Expressions if
520:46 - username and separately
520:49 - if dot in domain and if I parenthesize
520:52 - this we could make that even more clear
520:54 - by putting parentheses there parentheses
520:56 - here so just to be clear it's really two
520:58 - Boolean Expressions that we're ending
521:00 - together not one longer english-like
521:02 - sentence now if I go ahead and run this
521:04 - python of uh validate.pi enter I'll do
521:07 - my own email address again mailing
521:09 - harbor.edu and that's valid and it looks
521:12 - like I could tolerate something like
521:15 - this if I do mail-in at just say Harvard
521:18 - I think at the moment this is going to
521:20 - be invalid now maybe the top level
521:22 - domain Harvard exists but at the moment
521:24 - it looks like we're looking for
521:26 - something more we're looking for a top
521:27 - level domain too like dot edu so for now
521:30 - we'll just consider this to be invalid
521:33 - but it's not just that we want to do
521:36 - it's not just that we want to check for
521:38 - the presence of a username and the
521:39 - presence of a dot let's be more specific
521:41 - let's start to now narrow the scope of
521:43 - this program not just to be about
521:44 - generic emails more generally but about
521:46 - edu addresses so specifically for
521:48 - someone in a U.S University for instance
521:50 - whose email address tends to end with
521:52 - DOT edu I can be a little more precise
521:55 - and you might recall this function
521:56 - already instead of just saying is there
521:58 - a dots somewhere in domain let me
522:01 - instead say and the domain ends with
522:04 - quote
522:05 - unquote.edu so now we're being even more
522:07 - precise we want there to be minimally a
522:09 - username that's not empty it's not just
522:11 - quote unquote nothing and we want the
522:14 - domain name to actually end with DOT edu
522:17 - let me go ahead and run Python and
522:18 - validate.pi and just to make sure I
522:20 - haven't made things even worse let me at
522:22 - least test my own email address which
522:24 - does seem to be valid now it seems that
522:26 - I minimally need to provide a username
522:28 - because we definitely do have that check
522:29 - in place so I'm going to go ahead and
522:31 - say Malin and now I'm going to go ahead
522:33 - and say at and it looks like I could be
522:36 - a little malicious here just say
522:38 - mailen.edu as though minimally meeting
522:40 - the requirements of this of this pattern
522:43 - and that of course is considered valid
522:45 - but I'm pretty sure there's no one at
522:48 - mailen.edu we need to have some domain
522:50 - name in there so we're still not being
522:52 - quite as generous now we could
522:53 - absolutely continue to iterate on this
522:56 - program and we could add some more
522:57 - Boolean Expressions we could maybe use
522:59 - some other python methods for checking
523:01 - more precisely is there something to the
523:02 - left of the dot to the right of the dot
523:04 - we could use split multiple times but
523:06 - honestly this just escalates quickly
523:08 - like you end up having to write a lot of
523:10 - code just to express something that's
523:12 - relatively simple in spirit just format
523:15 - this like an email address so how can we
523:18 - go about improving this well it turns
523:20 - out in Python there's a library for
523:23 - regular Expressions it's called
523:24 - succinctly re and in the re Library you
523:27 - have a lot of capabilities to Define and
523:30 - check for and even replace patterns
523:33 - again a regular expression is a pattern
523:35 - and this Library the re library in
523:37 - Python is going to let us to Define some
523:39 - of these patterns like a pattern for an
523:40 - email address and then use some built-in
523:42 - functions to actually validate a user's
523:45 - input against that pattern or even use
523:46 - these patterns to change the user's
523:48 - input or extract partial information
523:50 - there from we'll see examples of all
523:52 - this and more so what can and should I
523:55 - do with this Library well first and
523:56 - foremost it comes with a lot of
523:58 - functionality here is the URL for
523:59 - instance to the official documentation
524:01 - and let me propose that we focus on
524:03 - using one of the most versatile
524:04 - functions in the library library namely
524:07 - this search
524:08 - re.search is the name of the function in
524:11 - the re module that allows you to pass in
524:13 - a few arguments the first is going to be
524:15 - a pattern that you want to search for in
524:18 - for instance a string that came from a
524:20 - user the string argument here is going
524:22 - to be the actual string that you want to
524:24 - search for that pattern and then there's
524:25 - a third argument optionally that's a
524:27 - whole bunch of flags a flag in general
524:29 - is like a a parameter you can pass in to
524:32 - modify the behavior of the function but
524:33 - initially we're not even going to use
524:35 - this we're just going to pass in a cup
524:36 - couple of arguments instead so let me go
524:39 - ahead and employ this re Library this
524:42 - regular expression library and just
524:45 - improve on this design incrementally so
524:47 - we're not going to solve this problem
524:48 - all at once but we'll take some
524:50 - incremental steps I'm going to go back
524:52 - to vs code here and I'm going to go
524:54 - ahead now and get rid of most of this
524:56 - code but I'm going to go into the top of
524:58 - my file in first and fall import this re
525:01 - Library so import re gives me access to
525:03 - that function and more now after I've
525:05 - gotten the user's input in the same way
525:07 - as before stripping off any leading or
525:09 - trailing white space I'm just going to
525:11 - use this function super trivially for
525:13 - now even though this isn't really a big
525:15 - step forward I'm going to say if re dot
525:18 - search
525:19 - contains quote-unquote at in the email
525:22 - address then let's go ahead and print
525:24 - valid else let's go ahead and print
525:26 - invalid at the moment this is really no
525:29 - better than my very first version where
525:31 - I was just asking python if at sign in
525:34 - the email address but now I'm at least
525:37 - beginning to use this Library by using
525:39 - its own re.search function which for now
525:41 - you can assume returns a True Value
525:44 - effectively if indeed the at sign is an
525:47 - email just to make sure that this
525:49 - version does work as I expect let me go
525:51 - ahead and run Python A validate.pi and
525:53 - enter I'll type in my actual email
525:55 - address and we're back in business but
525:58 - of course this is not great because if I
526:00 - similarly run this version of the
526:02 - program and just type in an at sign not
526:04 - an email address and yet my code of
526:06 - course thinks it is valid so how can I
526:08 - do better than this well we need a bit
526:10 - more vocabulary in the realm of regular
526:13 - expressions in order to be able to
526:16 - express ourselves a little more
526:17 - precisely really the pattern I want to
526:20 - ultimately Define is going to be
526:21 - something like I want there to be
526:23 - something to the left then an at sign
526:25 - then something to the right and that
526:27 - something to the right should end with
526:29 - DOT edu but should also have something
526:31 - before the dot edu like Harvard or Yale
526:33 - or any other school in the U.S as well
526:36 - well how can I go about doing this well
526:38 - it turns out that in the world of
526:40 - regular Expressions whether in python or
526:43 - a lot of other languages as well there
526:45 - are certain symbols that you can use to
526:46 - define patterns at the moment I've just
526:49 - used literal raw text if I go back to my
526:51 - code here this technically qualifies as
526:54 - a regular expression I've passed in a
526:57 - quoted string inside of which is an at
526:59 - sign now that's not a very interesting
527:01 - pattern it's just an at sign but it
527:03 - turns out that once you have access to
527:05 - regular expressions or a library that
527:07 - offers that feature you can more
527:09 - powerfully express yourself as follows
527:11 - let me reveal that the pattern that you
527:14 - passed re.search can take a whole bunch
527:16 - of special symbols and here's just some
527:18 - of them in the examples we're about to
527:20 - see in the patterns we're about to
527:22 - Define here are the special symbols you
527:25 - can use a single period a DOT to just
527:27 - represent any character except a new
527:29 - line a blank line so that is to say if I
527:32 - don't really care what letters of the
527:33 - alphabet are in the user's username I
527:35 - just want there to be one or more
527:37 - characters uh in the user's name dot
527:39 - allows me to express a through z
527:41 - uppercase and lowercase and a bunch of
527:43 - other letters as well star is going to
527:47 - mean in single asterisk zero or more
527:49 - repetitions so if I say something star
527:52 - that means that I'm willing to accept
527:54 - either zero repetitions that is nothing
527:56 - at all or more repetitions one or two or
528:00 - three or three hundred if you see a plus
528:02 - in my patterns that's going to mean one
528:04 - or more repetitions that is to say
528:06 - there's got to be at least one character
528:08 - there one symbol and then there's
528:09 - optionally more after that and then you
528:12 - can say zero or one repetition you can
528:15 - use a single question mark after a
528:17 - symbol and that will say I want 0 of
528:19 - this character or one but that's all
528:22 - I'll expect and then lastly there's
528:24 - going to be a way to specify a specific
528:25 - number of symbols if you use these curly
528:28 - braces and a number represented here
528:30 - symbolically as M you can specify that
528:32 - you want M repetitions be it one or two
528:34 - or three or three hundred you can
528:35 - specify the number of repetitions
528:37 - yourself and if you want a range of
528:39 - repetitions like you want this few
528:41 - characters or this many characters you
528:43 - can use curly braces and two numbers
528:45 - inside called here M and N which would
528:47 - be a range of M through n repetitions
528:50 - now what does all of this mean well let
528:52 - me go back to vs code here and let me
528:54 - propose that we iterate on this solution
528:56 - further it's not sufficient to just
528:58 - check for the at sign we know that
529:00 - already we minimally want something to
529:02 - the left and to the right so how can I
529:04 - represent that I don't really care what
529:06 - the user's username is or what letters
529:08 - of the alphabet are in it be it Malin or
529:10 - anyone else's so what I'm going to do to
529:13 - the left of this equal sign is I'm going
529:14 - to use a single period the dot that
529:17 - again indicates any character except for
529:20 - a new line but I don't just want a
529:22 - single character otherwise the person's
529:24 - username could only be a at such and
529:27 - such or B at such and such I want it to
529:30 - be multiple such characters so I'm going
529:32 - to initially use a star so dot star
529:34 - means give me something to the left and
529:36 - I'm going to do another one dot star
529:38 - something to the right now this isn't
529:40 - perfect but it's at least a step forward
529:42 - because now what I'm going to go ahead
529:43 - and do is this I'm going to rerun python
529:45 - to validate.pi I'm going to keep testing
529:47 - my own email address just to make sure I
529:49 - haven't made things worse and that's now
529:50 - okay I'm now going to go ahead and type
529:53 - in some other input like how about just
529:56 - Malin at with no domain name whatsoever
530:00 - and you would think this is going to be
530:01 - invalid but but but
530:04 - it's still considered valid but why is
530:07 - that if I go back to this chart why is
530:10 - Malin at with no domain now considered
530:14 - valid
530:15 - what's my mistake here
530:17 - by having used dot star at dot Star as
530:20 - my regular expression or regex because
530:22 - you're using the star instead of the
530:25 - plus sign exactly the star again means
530:28 - zero or more repetitions so re.search is
530:31 - perfectly happy to accept nothing after
530:33 - the equal after the at sign because that
530:35 - would be zero repetitions so I think I
530:37 - minimally need to evolve this and go
530:39 - back to my code here and let me go ahead
530:41 - and change this from dot star to dot
530:44 - plus and let me change the ending from
530:46 - dot star to dot plus so that now when I
530:49 - run my code here let me go ahead and run
530:51 - python validate.pi I'm going to test my
530:54 - email address as always still working
530:56 - now let me go ahead and type in that
530:58 - same thing from before that was
530:59 - accidentally considered valid now I hit
531:02 - enter finally it's invalid so now we're
531:05 - making some progress on being a little
531:07 - more precise as to what it is we're
531:09 - doing now I'll note here like with
531:11 - almost everything in programming python
531:13 - included there's often multiple ways to
531:15 - solve the same problem and does anyone
531:18 - see away in my code here that I can make
531:22 - a slight tweak if I forgot that the plus
531:25 - operator exists and go back to using a
531:28 - star if I allowed you only to use dots
531:31 - and only Stars could you recreate the
531:34 - notion of plus yes
531:36 - um use another Dot dot dot start yeah
531:39 - because if a DOT means any character
531:41 - we'll just use a DOT and then when you
531:42 - want to say or more use another Dot and
531:45 - then the star so equivalent to dot plus
531:47 - would have been dot dot star because the
531:50 - first dot means any character and the
531:53 - second pair of characters dot star means
531:55 - zero or more other characters and to be
531:57 - clear it does not have to be the same
531:58 - character just by doing Dot or dot star
532:01 - does not mean your whole username needs
532:03 - to be a or a A or AAA or AAA it can vary
532:07 - with each symbol it just means zero or
532:11 - more of any character back to back so I
532:14 - could do this on both the left and the
532:15 - right which one is better you know it
532:17 - depends I think uh an argument could be
532:19 - made that this is even more clear
532:21 - because it's obvious now that there's a
532:22 - DOT which means any character and then
532:24 - there's the dot star but if you're in
532:26 - the habit of doing this frequently one
532:28 - of the reasons things like the plus
532:29 - exist is just to consolidate your code
532:32 - into something a little more succinct
532:33 - and if you're familiar with seeing the
532:35 - plus now maybe this is more readable to
532:37 - you so again just like with python more
532:39 - generally you're going to often see
532:40 - different ways to express the same
532:42 - patterns and reasonable people might
532:43 - agree or disagree as to which way is
532:45 - better than another well let me propose
532:48 - to you that we can think about both of
532:50 - these models a little more graphically
532:52 - if this looks a little cryptic to you
532:53 - let me go ahead and Rewind to the
532:55 - previous incarnation of this regular
532:57 - expression which was just a single dot
533:00 - star this regular expression dot star at
533:03 - dot star means what again it means zero
533:05 - or more characters followed by a literal
533:07 - at sign followed by zero or more other
533:09 - characters now when you pass this
533:11 - pattern in as an argument to re.search
533:13 - it's going to read it from left to right
533:15 - and then use it to try to match against
533:18 - the input email in this case that the
533:21 - user typed in now how is the computer
533:23 - how is re.search going to keep track of
533:26 - whether or not the user's email matches
533:28 - this pattern well it turns out that it's
533:30 - going to be using a machine of sorts
533:32 - implemented in software known as a
533:34 - finite State machine or more formally a
533:36 - non-deterministic finite automaton and
533:39 - the way it works if we depict this
533:40 - graphically is as follows the re.search
533:43 - function starts over here in a so-called
533:46 - start State that's the sort of condition
533:47 - in which it begins and then it's going
533:49 - to read the user's email address from
533:51 - left to right and it's going to decide
533:53 - whether or not to stay in this first
533:55 - state or transition to the next state so
533:58 - for instance in this first state as the
534:00 - user is reading my email address mailin
534:02 - harvard.edu it's going to follow this
534:05 - curved edge up and around to itself a
534:07 - reflexive Edge and it's labeled dot
534:09 - because dot again just means any
534:11 - character so as the function is reading
534:13 - my email address mailing at harvard.edu
534:15 - from left to right it's going to follow
534:18 - these transitions as follows m
534:21 - a l a n and then it's hopefully going to
534:26 - follow this transition to the second
534:28 - state because there's a literal at sign
534:30 - both in this machine as well as in my
534:32 - email address then it's going to try to
534:34 - read the rest of my address h a r v a r
534:39 - d dot e d u and that's it and then the
534:43 - computer is going to check did it end up
534:45 - in a an accept state a final State
534:48 - that's actually depicted here
534:49 - pictorially a little differently with
534:51 - double circles one inside of the other
534:53 - and that just means that if the computer
534:55 - finds itself in that second accept state
534:58 - after having read all of the user's
535:00 - input it is indeed a valid email address
535:03 - if by some chance the machine somehow
535:05 - ended up stuck in that first date which
535:07 - does not have double circles and it is
535:09 - therefore not an accept state the
535:10 - computer would conclude this is an
535:12 - invalid email address instead by
535:15 - contrast if we go back to my other
535:17 - version of the code where I instead had
535:19 - dot Plus on both the left and the the
535:21 - right recall that ari.search is going to
535:23 - use one of these State machines in order
535:25 - to decide from left to right whether or
535:27 - not to accept the user's input like
535:29 - Malin harvard.edu can we get from the
535:32 - start state so to speak to an accept
535:34 - state to decide Yep this was in fact
535:36 - meeting the pattern well let's propose
535:39 - that this non-deterministic finite
535:41 - automaton looked like this instead we're
535:43 - going to start as before in the leftmost
535:45 - start State and we're going to
535:47 - necessarily consume one character per
535:49 - this first Edge which is labeled with
535:51 - the dot to indicate that we can consume
535:52 - any one character like the m in Malin
535:55 - harvard.edu then we can spend some time
535:57 - consuming more characters before the at
535:59 - sign so the a l a n then we can consume
536:04 - the at sign then we can consume at least
536:06 - one more character because recall that
536:08 - the regex has dot plus this time and
536:11 - then we can consume even more characters
536:13 - if we want so if we first consume the H
536:16 - in harvard.edu that then leaves the a r
536:19 - v a r d and then dot e d u and now here
536:26 - too we're at the end of the story but
536:28 - we're in an accept state because that
536:30 - circle at the end has two circles total
536:33 - which means that if the computer if this
536:35 - function finds itself in that accept
536:37 - state after reading the entirety of the
536:39 - user's input it is to in fact a valid
536:42 - email address if by contrast we had
536:45 - gotten stuck in one of those other
536:46 - states unable to follow a transition one
536:49 - of those edges and therefore unable to
536:51 - make progress in the user's input from
536:53 - left to right then we would have to
536:55 - conclude that that email address is in
536:57 - fact invalid well how can we go upon
536:59 - improving this code further let me
537:01 - propose now that we check not only for
537:03 - our username and also something after
537:05 - the username like a domain name but
537:07 - minimally required that the string ends
537:09 - with DOT edu as well well I think I
537:12 - could do this fairly straightforward not
537:14 - only do I want there to be something
537:15 - after the at sign like the domain like
537:17 - Harvard I want the whole thing to end
537:19 - with DOT EDU
537:21 - but there's a little bit of danger here
537:24 - what have I done wrong by implementing
537:27 - my regular expression now in this way by
537:29 - using dot Plus at dot plus dot edu what
537:34 - could go wrong with this version
537:37 - uh the dot is in a DOT means something
537:40 - else in this context where it means
537:42 - three or multiplications of a character
537:44 - which is rightly interpreted differently
537:46 - exactly even though I mean for it to
537:49 - mean literally.edu a period and then dot
537:51 - edu unfortunately in the world of
537:53 - regular Expressions dot means any
537:55 - character which means that this string
537:57 - could technically end in a e d u or b e
538:01 - d u or c e d u and so forth but that's
538:04 - not in fact that I want so any instincts
538:07 - now as to how I could fix this problem
538:09 - and let me demonstrate the problem more
538:11 - clearly let me go ahead and run this
538:13 - code here let me go ahead and type in
538:15 - Malin harvard.edu and as always this
538:18 - does in fact work but Watch What Happens
538:20 - here let me go ahead and do Malin at
538:22 - Harvard and then mailing at Harvard
538:25 - question mark edu enter that too is
538:29 - valid so I could put any character there
538:31 - and it's still going to be accepted but
538:33 - I don't want question mark edu I want
538:35 - dot edu literally any instinct thinks
538:37 - then for how we can solve this problem
538:39 - here how can I get this new function
538:42 - re.search and a regular expression more
538:44 - generally to literally mean a dot might
538:47 - you think you can use the Escape
538:49 - character the backslash indeed the
538:52 - so-called Escape character which we've
538:53 - seen before outside of the context of
538:55 - regular Expressions when we talked about
538:56 - new lines backslash n was a way of
538:59 - telling the computer I want a new line
539:01 - but without actually literally hitting
539:03 - enter and moving the cursor yourself and
539:05 - you don't want a literal n on the screen
539:06 - so backslash n was a way to escape and
539:09 - and convey that you want a new line it
539:11 - turns out regular Expressions use a
539:13 - similar technique to solve this problem
539:14 - here in fact let me go into my regular
539:17 - expression and before that final dot let
539:19 - me put a single backslash in the world
539:21 - of regular Expressions this is a
539:23 - so-called special sequence and it
539:25 - indicates per this backslash and a
539:27 - single dot that I literally want to
539:29 - match on a DOT it's not that I want to
539:31 - match on any character and then edu I
539:34 - want to match on a DOT or a period EDU
539:37 - but we don't want python to misinterpret
539:40 - this backslash is beginning a an escape
539:42 - sequence something special like
539:44 - backslash n which even though we as the
539:46 - programmer might type two characters
539:47 - backslash in it really is interpreted by
539:49 - python as a single new line we don't
539:52 - want any kind of misinterpretation like
539:54 - that here so it turns out there's one
539:56 - other thing we should do for regular
539:57 - expressions like this that have a
539:59 - backslash used in this way I want to
540:01 - specify to python that I want this
540:03 - string this regular expression and
540:05 - double quotes to be treated as a raw
540:07 - string literally putting an r at the
540:09 - beginning of the string to indicate to
540:11 - python that you should not try to
540:12 - interpret any backslashes in the usual
540:15 - way I want to literally pass the
540:16 - backslash and the dot and the edu into
540:19 - this particular function search in this
540:21 - case so it's similar in spirits using
540:23 - that F at the beginning of a format
540:25 - string which of course tells python to
540:27 - format the string in a certain way
540:28 - plugging in variables that might be
540:30 - between curly braces but in this case r
540:33 - indicates a raw string that I want
540:35 - passed in exactly as is now it's only
540:38 - strictly necessary if you are in fact
540:40 - using backslashes to indicate that you
540:42 - want some special sequence like
540:43 - backslash dot but in general it's
540:45 - probably a good habit to get into to
540:47 - just use raw strings for all of your
540:49 - regular Expressions so that if you
540:50 - eventually go back in make a change make
540:52 - an addition you don't accidentally
540:54 - introduce a backslash and then forget
540:56 - that that might have some special or
540:58 - misinterpreted meaning well let me go
541:00 - ahead and try this new regular
541:01 - expression I'll clear my terminal window
541:03 - run python or validate
541:06 - run python of validate.pi and then I'll
541:09 - type in my email address correctly
541:10 - mailing harvard.edu and that's
541:13 - fortunately still valid Let Me Clear My
541:15 - screen and run it one more time
541:17 - pythonvalidate.pi and this time let's
541:19 - mistype it as Malin at Harvard question
541:22 - mark edu whereby there's obviously not a
541:25 - DOT there but there is some other Single
541:27 - Character that last time was
541:28 - misinterpreted as valid but this time
541:31 - now that I've improved my regular
541:33 - expression it's discovered as indeed
541:35 - invalid any questions now on this
541:39 - technique for matching something to the
541:42 - left of the at sign something to the
541:43 - right and now ending with DOT edu
541:46 - explicitly
541:47 - um what happens
541:50 - a good question and you kind of called
541:52 - me out here well when in doubt let's try
541:54 - let me go ahead and do
541:57 - pythonvalidate.pi mailin at at
542:00 - harvard.edu which also is incorrect
542:03 - unfortunately my code thinks it's valid
542:05 - so another problem to solve but a
542:08 - shortcoming for now other questions on
542:11 - these regular Expressions thus far can
542:13 - you use uh curly brackets M instead of
542:17 - backslash can you use curly brackets
542:19 - instead of backslash not in this case if
542:21 - you want a literal dot backslash dot is
542:24 - the way to do it literally how about one
542:26 - other question on regular expressions
542:28 - is this the same thing that Google forms
542:31 - uses in order to categorize data in
542:34 - let's say some if you've got multiple
542:36 - people sending in requests about some
542:40 - feedback
542:41 - do they categorize the data that they
542:43 - get using this particular regular
542:45 - expression things indeed if you've ever
542:47 - used Google forms to not just submit it
542:49 - but to create a Google form one of the
542:52 - menu options is for response validation
542:54 - in English at least and what that allows
542:56 - you to do is specify that the user has
542:58 - to input an email address or a URL or a
543:01 - string of some length but there's an
543:03 - even more powerful feature that some of
543:05 - you may not have ever noticed and indeed
543:07 - if you'd like to open up Google forms
543:09 - create a new form temporarily and poke
543:11 - around you will actually see in English
543:13 - at least quote-unquote regular
543:15 - expression mentioned as one of the
543:17 - mechanisms you can use to validate your
543:19 - user's input into your Google form so in
543:21 - fact after today you can start avoiding
543:24 - the specific drop downs of like email
543:26 - address or URL or the like and you can
543:28 - express your own patterns precisely as
543:31 - well regular Expressions can even be
543:33 - used in vs code itself if you go and
543:35 - find or do a find and replace in vs code
543:38 - you can of course just type in words
543:40 - like you could into my Microsoft Word or
543:42 - Google Docs you can also type if you
543:44 - check the right box regular expressions
543:46 - and start searching for patterns not
543:49 - literally specific values well let me
543:52 - propose that we now enhance this
543:54 - implementation further by introducing a
543:57 - few other symbols because right now with
543:59 - my code I keep saying that I want my
544:01 - email address to end with DOT edu and
544:04 - start with a username but I'm being a
544:06 - little too generous this does in fact
544:08 - work as expected for my own email
544:10 - address Malin harvard.edu but what if I
544:13 - type in a sentence like my email address
544:16 - is
544:18 - mailenharvard.edu and suppose I've typed
544:20 - that into the program or I've typed that
544:22 - into a Google form is this going to be
544:25 - considered valid or invalid
544:29 - well let's consider it's got the at sign
544:32 - so we're good there it's got one or more
544:35 - characters to the left of the at sign
544:37 - it's got one or more characters to the
544:39 - right of the at sign it's got a
544:42 - literal.edu somewhere in there to the
544:45 - right of the at sign and granted there's
544:47 - more stuff to the right there's
544:48 - literally this period at the end of my
544:50 - English sentence but that's okay because
544:52 - at the moment my regular expression is
544:54 - not so precise as to say the pattern
544:57 - must start with the username and end
544:59 - with the dot edu technically it's left
545:02 - unsaid what more can be to the left and
545:04 - what more can be to the right so when I
545:06 - hit enter now you'll see that that whole
545:08 - sentence in English is valid and that's
545:11 - obviously not what you want in fact
545:12 - consider the case of using Google forms
545:14 - or Office 365 to collect data from users
545:17 - if you don't validate your input your
545:19 - users might very well type in a full
545:21 - sentence or something else with a
545:23 - typographical error not an actual email
545:25 - so if you're just trying to copy all of
545:27 - the results that have been typed into
545:28 - your form so you can paste them into
545:30 - Gmail or some email program it's going
545:32 - to break because you're going to
545:33 - accidentally pay something like a whole
545:35 - English sentence into the program
545:36 - instead of just an email address which
545:39 - is what your mailer expects so how can I
545:41 - be more precise well let me propose we
545:43 - introduce a few more symbols as well it
545:45 - turns out in the context of a regular
545:47 - expression one of these patterns you can
545:49 - use the carrot symbol the little
545:52 - triangular Mark to represent that you
545:54 - want this pattern to match the start of
545:57 - the string specifically not anywhere but
545:59 - the start of the user string by contrast
546:02 - you can use a dollar sign in your
546:04 - regular expression to say that you want
546:06 - to match the end of the string or
546:08 - technically just before the new line at
546:09 - the end of the string but for all
546:11 - intents and purposes think of carrot as
546:13 - meaning start of the string and dollar
546:15 - sign is meaning end of the string it is
546:18 - a weird thing that one is a carrot and
546:20 - one is a dollar sign these are not
546:21 - really things that I think of as
546:23 - opposites like a parenthesis or
546:24 - something like that but those are the
546:26 - symbols the World shows many years ago
546:28 - so let me go back to vs code now and let
546:30 - me add this feature to my code here let
546:33 - me specify that yes I do want to search
546:35 - for this pattern but I want the user's
546:38 - input to start with this pattern and end
546:40 - with this pattern so even though it's
546:42 - going to start looking even more cryptic
546:44 - I put a carrot symbol here at the
546:46 - beginning and I put a dollar sign here
546:48 - at the end that does not mean I want the
546:50 - user to type a carrot symbol or a dollar
546:52 - sign this is special symbology that
546:54 - indicates to re.search that it should
546:57 - only look for now an exact match against
547:00 - this pattern so if I now go back to my
547:02 - terminal window and I'll leave the
547:04 - previous result on the screen let me
547:06 - type the exact same thing my email
547:08 - address is mailing harbor.edu enter
547:11 - sorry a period and now I'm going to go
547:13 - ahead and hit enter now that's
547:16 - considered invalid but let me clear the
547:18 - screen and just to make sure I didn't
547:20 - break things let me type in just my
547:22 - email address and that too is valid any
547:25 - questions now on this version of my
547:28 - regular expression which note goes
547:30 - further to specify even more precisely
547:33 - that I want it to match at the start and
547:36 - the end
547:37 - any questions on this one here
547:40 - okay you have slash and Dot edu and then
547:44 - the dollar sign but that is like uh one
547:48 - of the regular expression right
547:50 - it normally is but this backslash that I
547:53 - deliberately put before this period here
547:56 - is an escape character it is a way of
547:59 - telling our e.search that I don't want
548:01 - any character there I literally want a
548:04 - period there and it's the only way you
548:06 - can distinguish one from the other if I
548:08 - got rid of that slash this would mean
548:10 - that the email address just has to end
548:12 - with any character then an e then a d
548:15 - then a u i don't want that I want
548:17 - literally a period Then the E then the D
548:20 - then the U this is actually common
548:22 - convention in programming and technology
548:25 - in general if you and I decide on a
548:26 - convention whereby we're using some
548:28 - character on the keyboard to mean
548:30 - something special invariably we create a
548:32 - future problem for ourselves when we
548:34 - want to literally use that same
548:36 - character and so the solution in general
548:38 - to that problem is to somehow escape the
548:40 - character so that it's clear to the
548:42 - computer that it's not that special
548:43 - symbol it's literally the symbol it sees
548:46 - so we don't even know that we don't need
548:48 - another another slash before the dollar
548:51 - sign
548:52 - no uh because in this case dollar sign
548:56 - means something special per this chart
548:58 - here dollar sign by itself does not mean
549:00 - US dollars or currency it literally
549:03 - means match the end of the string if
549:05 - however I wanted the user to literally
549:08 - type in a dollar sign at the end of
549:10 - their input the solution would be the
549:12 - same I would put a backslash before the
549:14 - dollar sign which means my email address
549:16 - would have to be something like mailing
549:18 - harvard.edu dollar sign which is
549:21 - obviously not correct too so backslashes
549:24 - just allow you to tell the computer to
549:26 - not treat those symbols specially likes
549:28 - meaning something special but to treat
549:31 - them literally instead how about one
549:33 - other question here on regular
549:35 - expressions
549:38 - to make it one plus then you said one
549:41 - was to make it one with nothing sure
549:44 - rewind in time I think what you're
549:46 - referring to is one of our earlier
549:48 - versions that initially looked like this
549:50 - which just meant Zero or more characters
549:52 - than an at sign then zero or more other
549:55 - characters we then evolved that to be
549:58 - this dot Plus on both sides which means
550:01 - one or more characters on the left than
550:03 - an at sign then one or more characters
550:05 - on the right and if I'm interpreting
550:07 - your question correctly one of the
550:09 - points I made earlier was that if you
550:10 - didn't use Plus or forgot that it exists
550:13 - you could equivalently achieve the exact
550:15 - same result with two dots and a star
550:18 - because the first dot means any
550:19 - character it's got to be there the
550:22 - second dot star means zero or more other
550:25 - characters and same on the right so it's
550:27 - just another way of expressing the same
550:29 - idea one or more can be represented like
550:32 - this with dot dot star or you can just
550:35 - use the handier syntax of dot plus which
550:37 - means the same thing all right so I dare
550:39 - say there's still some problems with the
550:41 - regular expression in this current form
550:42 - because even though now we're starting
550:44 - to look for the username at the
550:46 - beginning of the string from the user
550:47 - and we're looking for the dot edu
550:49 - literally at the end of the string from
550:51 - the user those dots are a little too
550:54 - encompassing right now I am allowed to
550:56 - type in more than the single at sign y
550:58 - because at is a character and Dot means
551:01 - any character so honestly I can have as
551:03 - many at signs as this thing at the
551:05 - moment as I want for instance if I run
551:07 - Python and validate.pi mailing at
551:09 - harvard.edu still works as expected but
551:12 - if I also run python to validate.pi and
551:15 - incorrectly do Malin at harvard.edu to
551:18 - you that should be invalid but it's
551:21 - considered valid instead so I think we
551:23 - need to be a little more restrictive
551:25 - when it comes to that dot and we can't
551:28 - just say oh any old character there is
551:30 - fine we need to be more specific well it
551:33 - turns out that regular Expressions also
551:35 - support this syntax you can use square
551:38 - brackets inside of your pattern and
551:41 - inside of those square brackets
551:43 - include one or more characters that you
551:46 - want to look for specifically
551:48 - alternatively you can inside of those
551:51 - square brackets put a carrot symbol
551:53 - which unfortunately in this context
551:55 - means something completely different
551:56 - from match the start of the string but
551:59 - this would be the complement operator
552:01 - inside of these square brackets which
552:02 - means you cannot match any of these
552:05 - characters so things are about to look
552:07 - even more cryptic now but that's why
552:09 - we're focusing on regular Expressions on
552:11 - their own here if I don't want to allow
552:14 - any character which is what a DOT is let
552:18 - me go ahead and I could just say well I
552:20 - only want to support a or B's or C's or
552:24 - D's or E's or F's or G's I could type in
552:26 - the whole alphabet here plus some
552:28 - numbers to actually include all of the
552:30 - letters that I do want to allow but
552:32 - honestly a little simpler would be this
552:34 - I could use a carrot symbol and then an
552:37 - at sign which has the effect of saying
552:40 - this is the set of characters that has
552:43 - everything except an at sign and I can
552:46 - do the same thing over here instead of a
552:48 - DOT to the right of the at sign I can do
552:51 - Open Bracket
552:53 - carrot at sign and I admit things are
552:56 - starting to escalate quickly here but
552:58 - let's start from the left and go to the
553:00 - right this carrot outside of the square
553:03 - brackets at the very start of my string
553:04 - as before means match from the start of
553:07 - the string and let's Jump Ahead the
553:09 - dollar sign all the way at the end of
553:10 - the regular expression means match at
553:12 - the end of the string so if we can
553:14 - mentally take those off as
553:16 - straightforward let's now focus on
553:18 - everything else in the middle well to
553:20 - the left here we have new syntax a
553:22 - square bracket another carrot an at sign
553:26 - and a closed square bracket and then a
553:29 - plus the plus means the same thing as
553:31 - always it means one or more of the
553:33 - things to the left what is the thing to
553:36 - the left well this is the new send text
553:38 - inside of square brackets here I have a
553:40 - carrot symbol and then an at sign that
553:43 - just means any character except an at
553:46 - sign it's a weird syntax but this is how
553:48 - we can express that simple idea any
553:51 - character on the keyboard except except
553:53 - for an at sign and heck even other
553:56 - characters that aren't physically on
553:57 - your keyboard but that nonetheless exist
553:59 - then we have a literal at sign then we
554:02 - have another one of these same things
554:03 - square bracket carrot at close bracket
554:06 - which means any character except an at
554:08 - sign then one or more of those things
554:10 - followed by literally a period e d u so
554:15 - now let me go ahead and do this again
554:17 - let me rerun python to validate.pi and
554:20 - test my own email address to make sure
554:21 - I've not made things worse and we're
554:23 - good now let me go ahead and clear my
554:25 - screen and run Python and validate.pi
554:27 - again and do Malin at at
554:29 - harvard.edu crossing my fingers this
554:32 - time and finally this now is invalid why
554:35 - I'm allowing myself to have one at sign
554:38 - in the middle of the user's input but
554:41 - everything to the left per this new
554:42 - syntax cannot be an at sign it can be
554:45 - anything but one or more times and
554:48 - everything to the right of the at sign
554:50 - can be anything but in at sign one or
554:52 - more time is followed by lastly a
554:55 - literal.edu so again the new syntax is
554:58 - quite simply this square brackets allow
555:01 - you to specify a set of characters that
555:03 - you literally type out at your keyboard
555:04 - a b c d e f or the complement the
555:07 - opposite the carrot symbol which means
555:09 - not and then the one or more symbols you
555:12 - want to exclude
555:14 - questions now on this syntax here so
555:17 - right after add sign can we use the
555:19 - curly brackets M uh one so that we can
555:22 - only have one repetition of the ad
555:24 - symbol absolutely so we could do this
555:26 - let me go ahead and pull up vs code and
555:28 - let me delete the current form of a
555:30 - regular expression and go back to where
555:32 - we began which was just dot star at and
555:34 - Dot star I could absolutely do something
555:37 - like this and require that I want at
555:39 - least one of any character here and then
555:42 - I could do something more to have any
555:44 - more as well so the curly brace syntax
555:47 - which we saw on the slide earlier but
555:48 - didn't yet use absolutely can be used to
555:50 - specify a specific number of characters
555:52 - but honestly this is more verbose than
555:55 - is necessary the best solution arguably
555:57 - or the simplest at least ultimately is
556:00 - just to say dot plus but there too
556:01 - another example of how you can solve the
556:03 - same problem multiple ways let me go
556:06 - back to where the regular expression
556:07 - just was and take other questions as
556:10 - well questions on the sets of characters
556:12 - or complementing
556:15 - that's set
556:16 - so can you use that same syntax to say
556:19 - that you don't want a certain character
556:21 - throughout the whole string you could
556:24 - it's going to be uh you could absolutely
556:27 - use the same character to exclude
556:29 - um
556:30 - you could absolutely use this syntax to
556:32 - exclude a certain character from the
556:34 - entire string but it would be a little
556:36 - harder right now because we're still
556:37 - requiring.edu at the end but yes
556:39 - absolutely
556:42 - other questions what happens if the user
556:46 - inputs.edu in the beginning of the thing
556:49 - a good question what happens if the user
556:51 - types in edu at the beginning of the
556:53 - screen well let me go back to vs code
556:55 - here and let's try to solve this in two
556:57 - different ways first let's look at the
556:58 - regular expression and see if we can
557:00 - infer if that's going to be tolerated
557:02 - well according to the current cryptic
557:05 - regular expression I'm saying that you
557:07 - can have any character except the at
557:10 - sign so that would work I could have the
557:12 - dot for the dot edu but then I have to
557:15 - have an at sign so that wouldn't really
557:18 - work because if I'm just typing in edu
557:20 - we're not going to pass that constraint
557:22 - so now let me try this in by running the
557:25 - program let me type in just
557:26 - literally.edu that doesn't work but but
557:29 - but I could do this dot
557:33 - edu.edu that too is invalid but let me
557:36 - do this dot edu at
557:40 - something.edu that that passes so it's
557:43 - starting to get a little weird now maybe
557:45 - it's valid maybe it's not but I think
557:47 - we'll eventually be more precise too
557:49 - about one more question on this regular
557:52 - expression
557:53 - and these complementing of sets can we
557:55 - use uh another domain name
557:58 - the string input can you use another
558:00 - domain name absolutely I'm using my own
558:02 - just for the sake of demonstration but
558:04 - you could absolutely use any domain or
558:06 - top level domain and I'm using dot edu
558:09 - which is very U.S Centric but this would
558:10 - absolutely work exactly the same for any
558:13 - top level domain all right let me go and
558:16 - head now and propose that we improve
558:18 - this regular expression further because
558:20 - if I pull it up again in vs code here
558:22 - you'll see that I'm being a little too
558:24 - tolerant still it turns out that there
558:27 - are certain requirements for someone's
558:29 - username and domain name in an email
558:31 - address there is an official standard in
558:33 - the world for what an email address can
558:35 - be and what characters can be in it and
558:38 - this is way too accommodating of all the
558:40 - characters in the world except for the
558:42 - at symbol so let's actually narrow the
558:45 - definition of what we're going to
558:46 - tolerate in usernames and companies like
558:48 - Gmail could certainly do this as well
558:50 - suppose that it's not just that I want
558:53 - to exclude at science suppose that I
558:55 - only want to allow for say characters
558:57 - that normally appear in words like
558:59 - letters of the alphabet A through Z be
559:02 - it uppercase or lowercase maybe some
559:04 - numbers and heck maybe even an
559:05 - underscore could be allowed too well we
559:07 - can use this same square bracket syntax
559:10 - to specify a set of characters as
559:12 - follows I could do a b c d e f g h i j
559:16 - oh my God this is going to take forever
559:18 - I'm gonna have to type out all 26
559:19 - letters of the alphabet both lowercase
559:22 - and uppercase so let me stop doing that
559:24 - there's a better way already if you want
559:26 - to specify Within These square brackets
559:28 - a range of letters you can actually just
559:31 - do a hyphen if you literally do a hyphen
559:34 - Z in these square brackets the computer
559:37 - is going to know you mean a through z
559:39 - you do not need to type 26 letters of
559:41 - the alphabet if you want to include
559:43 - uppercase letters as well you just do
559:45 - the same no spaces no commas you
559:47 - literally just keep typing a through
559:49 - capital Z so I have little a hyphen
559:53 - little Z big a hyphen big Z no spaces no
559:57 - commas no separators you just keep
559:59 - specifying those ranges if I
560:01 - additionally want numbers I could do 0 1
560:03 - 2 3 4 no you don't need to type in all
560:06 - 10 decimal digits you can just say 0
560:08 - through 9 using a hyphen as well and if
560:11 - you now want to support underscores as
560:13 - well which is pretty common in usernames
560:15 - for email addresses you can literally
560:16 - just type in underscore at the at the
560:19 - end notice that all of these characters
560:22 - are inside of square brackets which just
560:25 - again means here is a set of characters
560:27 - that I want to allow I have not used a
560:31 - carrot symbol at the beginning of this
560:33 - whole thing because I don't want to
560:34 - complement it complement it with an E
560:37 - not complement it with an i I want don't
560:39 - want to complement it by making it the
560:41 - opposite I literally want to accept only
560:44 - these characters I'm going to go ahead
560:46 - and do the same thing on the right if I
560:48 - want to require that the domain name
560:50 - similarly come from this set of
560:52 - characters which admittedly is a little
560:54 - too narrow but it's familiar for now so
560:56 - we'll keep it simple I'm going to go
560:57 - ahead and paste that exact same set of
560:59 - characters over there to the right and
561:03 - so now it's much more restrictive now
561:06 - I'm going to go ahead and run
561:07 - pythonvalidate.pi I'm going to test my
561:09 - own email address and we're still good
561:11 - I'm going to clear my screen and run it
561:13 - once more this time trying to break it
561:16 - let me go ahead and do something like
561:18 - how about David underscore Malin
561:22 - harvard.edu enter but that too is going
561:25 - to be valid but if I do something
561:27 - completely wrong again like Malin at at
561:31 - harvard.edu that's still going to be
561:34 - invalid why because my regular
561:36 - expression currently only allows for a
561:38 - single at in the middle because
561:40 - everything to the left must be alpha
561:42 - numeric alphabetical or numeric or an
561:45 - underscore the same thing to the right
561:47 - followed by the dot edu now honestly
561:51 - this is a regular expression that you
561:53 - might be in the habit of typing in the
561:54 - real world as in as cryptic as this
561:56 - might look this is the world of reg
561:58 - regular Expressions so you'll get more
562:00 - comfortable with this syntax over time
562:02 - but thankfully some of these patterns
562:04 - are so common that there are built-in
562:07 - shortcuts for representing some of the
562:09 - same information that is to say you
562:11 - don't have to constantly type out all of
562:14 - the symbols that you want to include
562:15 - because odds are some other programmer
562:16 - has had the same problem so built into
562:19 - regular Expressions themselves are some
562:21 - additional patterns you can use and in
562:23 - fact I can go ahead and get rid of this
562:26 - entire set a through z lowercase A
562:28 - through Z uppercase zero through nine
562:30 - and an underscore and just replace it
562:33 - with a single backslash W backslash W in
562:36 - this case represents a word character
562:39 - which is commonly known as a alpha
562:41 - numeric symbol or the underscore as well
562:45 - I'm going to do the same thing over here
562:47 - I'm going to highlight the entire set of
562:49 - square brackets delete it and replace it
562:51 - with a single backslash W and now I feel
562:54 - like we're making progress because even
562:56 - though it's cryptic and what if it
562:57 - looked way cryptic a little bit ago
563:00 - um
563:01 - and even though it would have looked
563:02 - even more cryptic a little bit ago now
563:04 - it's at least starting to read a little
563:06 - more friendly this carrot on the left
563:08 - means start matching at the beginning of
563:10 - the string backslash w means any word
563:13 - character the plus means one or more at
563:16 - symbol literally then another word
563:18 - character one or more then a literal dot
563:21 - then literally edu and then match at the
563:24 - very end of the string and that's it so
563:26 - there's more of these two and we won't
563:27 - use them all here but here is a partial
563:30 - list of the patterns you can use within
563:33 - a regular expression one you have
563:35 - backslash D for any decimal digit
563:37 - decimal digit meaning zero through nine
563:40 - commonly done here too is if you want to
563:42 - do the opposite of that the complement
563:45 - so to speak you can do backslash capital
563:47 - D which is anything that's not a decimal
563:51 - digit so it might be letters and
563:53 - punctuation and other symbols as well
563:55 - meanwhile backslash s means white space
563:58 - characters like a single hit of the
564:00 - space or maybe hitting tab on the
564:01 - keyboard that's white space backslash
564:04 - capital S is the opposite or complement
564:06 - of that anything that's not a white
564:09 - space character backslash W we've seen a
564:11 - word character as well as numbers and
564:14 - the underscore and if you want the
564:16 - complement or opposite of that you can
564:18 - use backslash capital W to give you
564:20 - everything but a word character again
564:23 - these are just common patterns that so
564:25 - many people were presumably using in
564:26 - yesteryear that it's now baked into the
564:28 - regular expression syntax so that you
564:31 - can more succinctly express your same
564:33 - ideas
564:34 - any questions then on this approach here
564:37 - where we're now using backslash w
564:40 - to represent my word character
564:43 - uh so I don't want to ask about uh was
564:46 - the uh actually the previous approach
564:47 - like the square bracket approach could
564:49 - we accept like uh lists in there yes
564:52 - we'll see this before long but suppose
564:54 - you wanted to tolerate not just.edu but
564:57 - maybe dot edu or.com you could do this
565:00 - you could introduce parentheses and then
565:02 - you can or those together I could say
565:05 - Com or edu I could also add in something
565:08 - like in the US or gov or net or anything
565:12 - else or org or the like and each of the
565:15 - vertical bars here means something
565:16 - special it means or and the parentheses
565:19 - simply group things together formally
565:21 - you have this syntax here A or B A or
565:25 - vertical Bar B means a has to match or B
565:27 - has to match where A and B can be any
565:29 - other patterns you want in parentheses
565:32 - you can group those things together so
565:33 - just like math you can combine ideas
565:36 - into one phrase and do this thing or the
565:38 - other and there's other syntax as well
565:40 - that we'll soon see other questions on
565:43 - these regular expressions and this
565:44 - syntax here
565:46 - but if we put spaces in the expression
565:48 - sure so if you want spaces in there you
565:51 - can't use backslash W alone because that
565:54 - is only a word character which is
565:56 - alphabetical numerical or the underscore
565:58 - but you could do this you could go back
566:01 - to this approach whereby you use square
566:03 - brackets and you could say A through Z
566:05 - or a through z or zero through nine or
566:09 - underscore or I'm going to hit the space
566:11 - bar a single space you can put a literal
566:13 - space inside of the square brackets
566:15 - which will allow you then to detect a
566:17 - space alternatively I could still use
566:20 - backslash W but I could combine it as
566:22 - follows I could say give me a backslash
566:24 - W or a backslash s because recall that
566:27 - backslash s is white space so it's even
566:29 - more than a single space it could be a
566:31 - tab but by putting those things in
566:33 - parentheses now you can match either the
566:35 - thing on the left or the thing on the
566:37 - right one or more times how about one
566:39 - other question on these regular
566:41 - expressions
566:44 - perfect so I was going to ask um does
566:46 - the backslash W
566:48 - um include a DOT uh because no no it
566:53 - only includes letters numbers uh and
566:55 - underscore that is it
566:57 - and I was wondering you gave an example
566:59 - at the beginning that had uh spaces like
567:02 - this is my email so and so
567:05 - um I don't think our current version uh
567:07 - even quite quite a long while ago
567:09 - stopped accepting it was that because of
567:11 - the carrot uh or
567:14 - because of something no the reason I was
567:17 - handling spaces in other English words
567:19 - when I typed out my email address as
567:21 - mailing at harvard.edu was because we
567:24 - were using initially dot star or dot
567:26 - plus which is any character uh and even
567:30 - after that we said anything except the
567:32 - at sign which includes spaces only once
567:35 - I started using square brackets and a
567:38 - through z and zero through nine and
567:40 - underscore did we finally get to the
567:42 - point where we would reject white space
567:44 - and in fact I can run this here let me
567:47 - go into the current version of my code
567:49 - in vs code which is using again the
567:51 - backslash W's for word characters let me
567:53 - run pythonvalidate.pi and incorrectly
567:56 - type in something like my email address
567:58 - is
568:00 - mailenharvard.edu period which has
568:02 - spaces to the left of my username and
568:05 - that is now invalid because space is not
568:07 - a word character your go Notes too that
568:10 - technically I'm not allowing dots and
568:12 - some of you might be thinking wait a
568:13 - minute my gmail address has a dot in it
568:15 - that's something we're going to still
568:17 - have to fix a backslash W is not the
568:20 - end-all here it's just allowing us to
568:22 - express our previous solution a little
568:24 - more succinctly now one thing we're
568:27 - still not handling quite properly is
568:29 - uppercase versus lowercase the backslash
568:31 - W technically does handle lowercase
568:33 - letters and uppercase because it's the
568:35 - exact same thing as that set from before
568:37 - which had a little a through little Z
568:40 - and big a through big Z but watch this
568:43 - let me go ahead in my current form run
568:45 - pythonvalidate.pi and just because my
568:47 - caps lock key is down mailin at
568:50 - harvard.edu shouting my email address
568:52 - it's going to be okay in terms of the
568:54 - mailing it's going to be okay in terms
568:57 - of the Harvard because those are
568:58 - matching the backslash W which does
569:01 - include lowercase and uppercase but I'm
569:04 - about to see invalid why why is mailing
569:08 - at harvard.edu invalid
569:11 - when it's in all caps here even though
569:14 - I'm using backslash W yeah so you are
569:18 - asking for the domain.edu in lowercase
569:21 - and you're typing it in uppercase
569:23 - exactly I'm typing in my email address
569:26 - in all uppercase but I'm looking for
569:28 - literally.edu and as I see you with
569:30 - airpods and so many of you with
569:32 - headphones I apologize for yelling into
569:33 - my microphone just now to make this
569:35 - point but let's see if we can't fix that
569:37 - well if my pattern on line five is
569:41 - expecting it to be lowercase there's
569:44 - actually a few ways I can solve this one
569:46 - would be something we've seen before I
569:48 - could just force the user's input to all
569:50 - lower case and I could put onto the end
569:52 - of my first line dot lower and actually
569:54 - force it all to lowercase alternatively
569:57 - I could do that a little later instead
569:59 - of passing an email I could pass in the
570:01 - lowercase version of email because email
570:03 - addresses should in fact be case
570:05 - insensitive so that would work too but
570:07 - there's another mechanism here which is
570:08 - worth seeing it turns out that that
570:11 - function before
570:12 - called re.search supports recall a third
570:16 - argument as well these so-called flags
570:18 - and flags are configuration options
570:20 - typically to a function that allow you
570:22 - to configure it a little differently and
570:24 - how might I go about configuring this
570:26 - call to re.search a little bit
570:28 - differently insofar as I'm currently
570:31 - only passing into arguments well it
570:33 - turns out that some of the flags you can
570:35 - pass into this function are these it
570:38 - turns out that the regular expression
570:39 - library in Python AKA re comes with a
570:43 - few built-in variables so to speak
570:45 - things that you can think of as
570:47 - constants that have meaning to re.search
570:51 - and they do so as follows if you pass in
570:54 - as a flag re.ignore case what re.search
570:57 - is going to do is ignore the case of the
570:59 - user's input it can be uppercase
571:01 - lowercase a combination thereof the case
571:03 - is going to be ignored it will be
571:04 - treated case insensitively and you can
571:06 - do other things too that we won't do
571:08 - here but if you want to handle the
571:10 - user's input that maybe spans multiple
571:11 - lines maybe they didn't just type in an
571:13 - email address but an entire paragraph of
571:16 - text and you want to match different
571:17 - lines of that text that is multiple
571:19 - lines another flag is for re dot
571:22 - multi-line for just that or re.all
571:24 - whereby you can you can configure the
571:27 - dot to rep to recognize not just any
571:30 - character except new lines but any
571:32 - character plus new lines as well but for
571:35 - now let me go ahead and just make use of
571:36 - this first one let me pass in a third
571:38 - argument to re.search which is r e dot
571:42 - uh ignore case let me now rerun the
571:46 - program without clearing my screen
571:48 - pythonvalidate.pi let me type in again
571:50 - in all caps effectively shouting mailing
571:53 - harvard.edu enter and now it's
571:56 - considered valid because I'm telling
571:58 - re.search specifically to ignore the
572:00 - case of the input and that to here is
572:02 - fine and why might I do this approach
572:04 - rather than call Dot lower in one of
572:06 - those other locations if I don't
572:08 - actually want to change the user's input
572:09 - for whatever reason I can still treat it
572:12 - cases sensitively without actually
572:14 - changing the value of that variable
572:16 - itself
572:17 - are any final questions now on this
572:20 - validation of email addresses
572:23 - so the pattern is a string right
572:27 - uh can we use an F string you can you
572:30 - guess you can use an F string so that
572:32 - you could plug in for instance the value
572:34 - of a variable and pass it into the
572:36 - function other questions on this
572:37 - backstage W character could we take it
572:40 - as an input from the user technically
572:42 - yes that's not a problem we're trying to
572:44 - solve right now we want the user to
572:46 - provide literal input like their email
572:47 - address not necessarily a regular
572:49 - expression but you could imagine
572:51 - building software that asks the user
572:53 - especially if they're more advanced
572:55 - users to type in a regular expression
572:56 - for some reason to validate something
572:58 - else against that and in fact that's
573:00 - what Google's doing if you play around
573:02 - with Google forms and create a form with
573:04 - response validation and select regular
573:06 - expression Google lets you and I type in
573:09 - our own regular Expressions would be a
573:11 - perf which would be a perfect example of
573:13 - that all right well let me propose that
573:15 - we try to solve one other problem here
573:17 - whereby if I go into the same version as
573:21 - before which is now ignoring case but I
573:23 - type in one of my other email addresses
573:25 - let me go ahead and run python
573:27 - validate.pi and this time let me type in
573:29 - not mailing at harvard.edu which I use
573:31 - primarily but another email address of
573:33 - mine mailing at
573:35 - cs50.harvard.edu which forwards to the
573:37 - same let me go ahead and hit enter now
573:39 - and huh invalid even though I'm pretty
573:43 - sure that is in fact my email address
573:45 - well let's put our finger on the reason
573:46 - why why at the moment is malinet
573:51 - cs50.harvard.edu being considered
573:53 - invalid even though I'm pretty sure I
573:57 - send and receive email from that address
573:58 - too
574:02 - why might that be because there is a DOT
574:05 - that has come after the ad symbol
574:10 - exactly there's a DOT after my cs50 and
574:14 - I'm not expecting any dots there I'm
574:16 - expecting only again word characters
574:18 - which is a through z 0 through 9 and
574:21 - underscore so I'm gonna have to retool
574:23 - here but how could I go about doing this
574:25 - well it turns out theoretically there
574:28 - could be other email addresses even
574:29 - though they'd be getting a little
574:30 - excessively long for instance mailing at
574:34 - something.cs50.harbor.edu which is not
574:36 - technically exist but it could you can
574:38 - have of course multiple dots in a domain
574:40 - name like we see here wouldn't it be
574:42 - nice if we could handle that as well
574:44 - well let me propose that we modified my
574:47 - regular expression as follows it turns
574:49 - out that you can group ideas together
574:51 - and you can not only ask whether or not
574:54 - this pattern matches or this one using
574:57 - syntax like a vertical Bar B which means
575:00 - either A or B you can also group things
575:03 - together and then apply some other
575:05 - operator to them as well in fact let me
575:07 - go back to vs code here and let me
575:09 - propose that if I want to tolerate a
575:12 - subdomain like cs50 that may or may not
575:15 - be there let me go ahead and change it
575:18 - as follows I could naively do this if I
575:20 - want to support sub domains I could say
575:22 - well let's allow for other word
575:24 - characters plus and then a literal Dot
575:27 - and notice I'll highlight in blue here
575:29 - what I've just added everything else is
575:31 - the same but I'm now adding room for
575:34 - another sequence of one or more word
575:36 - characters and then a literal dot so
575:40 - this now I think if I rerun
575:43 - pythonvalidate.pi will work for malinet
575:46 - cs50.harvard.edu enter
575:48 - unfortunately does anyone see where this
575:50 - is going let me rerun pythonvalidate.pi
575:53 - and type in as I keep doing Mainland
575:55 - harvard.edu which up until now has kept
575:57 - working despite all of my changes but
575:59 - now oh finally I've broken my own email
576:03 - address
576:04 - so logically what's the solution here
576:07 - well there's a bunch of ways we could
576:09 - solve this I could maybe start using two
576:11 - regular expressions and support your
576:13 - email addresses of the form username at
576:16 - domain.tld or username at
576:21 - subdomain.domain.tld where TLD just
576:23 - means top level domain like edu or I
576:26 - could maybe just modify this one because
576:27 - I'd prefer not to have like two uh
576:30 - regular expressions or one that's twice
576:31 - as big why don't I just specify to
576:34 - re.search that part of this pattern is
576:37 - optional what was the symbol we saw
576:40 - earlier that allows you to specify that
576:43 - the thing before it is technically
576:45 - optional
576:47 - we are using the Stray bar as a
576:51 - optional make the option the argument
576:53 - optional so we could we could use a
576:56 - vertical bar and some parentheses and
576:58 - say either there's something here or
577:00 - there's nothing we could do that in
577:02 - parentheses but I think there's actually
577:03 - an even easier way way actually is a
577:07 - question mark indeed question mark think
577:09 - back to this summary here of our first
577:12 - set of symbols whereby we had not just
577:15 - Dot and star and plus but also a
577:17 - question mark which means literally zero
577:19 - or one repetitions which effectively
577:21 - means optional it's either there one or
577:24 - it's not zero now how can I translate to
577:28 - that to this code here well let me go
577:30 - ahead and Surround this part of my
577:32 - pattern with parentheses which doesn't
577:35 - mean I want literally a parenthesis in
577:37 - the user's input I just want to group
577:39 - these characters together and in fact
577:42 - this now will still work I've only added
577:44 - parentheses around the new part for the
577:46 - subdomain let me run Python and
577:47 - validate.pi let me run Malin at
577:50 - cs50.harbor.edu enter that's still valid
577:52 - but to be clear if I rerun it again for
577:55 - mailing at harvard.edu that is still
577:57 - invalid but not if I go in here and say
578:01 - after the parentheses which now is one
578:04 - logical you unit it's one big group of
578:07 - ideas together I add a single question
578:09 - mark there this will now tell our
578:12 - e.search that that whole thing in
578:15 - parentheses can either be there once or
578:18 - be there not at all zero times so what
578:21 - does this translate into when I run it
578:23 - well let me go ahead and rerun it with
578:25 - Malin at
578:26 - cs50.harbor.edu so that the subdomain's
578:29 - there that works as before let me clear
578:32 - my screen and run it again
578:33 - pythonvalidate.pi with Malin harvard.edu
578:36 - which used to work then broke is are we
578:39 - back in business now we are that's now
578:41 - valid again
578:43 - questions now on this approach where
578:46 - we've used not just the question mark
578:48 - But the parentheses as well okay yeah
578:51 - you said he works for zero or one
578:53 - repetition what if you have more
578:55 - what if you have more that's okay that's
578:58 - where you could do star star is zero or
579:02 - more which gives you all the flexibility
579:04 - in the world
579:05 - yeah so I was just asking that uh with
579:09 - question mark there's only one
579:10 - repetition allowed it means zero or one
579:14 - repetition so it's either not there or
579:15 - it is there
579:17 - and so that's why this pattern now if I
579:20 - go back to my code even though again it
579:22 - admittedly looks cryptic let me
579:24 - highlight everything after the at sign
579:26 - and before the dollar sign this now
579:28 - represents a domain name like
579:31 - harvard.edu or a sub domain within the
579:35 - domain name why well this part to the
579:37 - right is the same as always backslash W
579:40 - plus means something like Harvard or
579:42 - Yale
579:43 - backslash.edu means literally.edu so the
579:47 - new part is this in parentheses I have
579:49 - another set of backslash W plus
579:52 - backslash dot now but it's all in
579:55 - parentheses I'm now having a question
579:57 - mark right after that which means that
579:59 - whole thing in parentheses either can be
580:02 - there or it can't be there it's either
580:04 - of those that are acceptable so a
580:07 - question mark effectively makes
580:08 - something optional it would not be
580:10 - correct to remove the parentheses
580:12 - because what would this mean if I remove
580:14 - the parentheses that would mean that
580:16 - only this dot is optional which isn't
580:20 - really what we want to express I want
580:22 - the sub domain like cs50 and the
580:25 - additional dot to be what's there or not
580:27 - there how about one other question on
580:30 - regex is here can they use this for the
580:32 - usernames absolutely we still have other
580:35 - problems right we're not solving all of
580:36 - the problems today just yet but
580:38 - absolutely right now we are not letting
580:41 - you have a period in your username and
580:43 - again some of you with Gmail accounts or
580:45 - other accounts you probably have not
580:46 - just underscores numbers and letters you
580:48 - might have periods too well we could fix
580:50 - that not using question mark here per se
580:53 - but now that we have these parentheses
580:55 - at our disposal what I could do is this
580:58 - I could use parentheses to surround the
581:01 - backslash W to say any word character
581:03 - which is the same thing again as a
581:05 - letter or a number or an underscore but
581:07 - I could also or in using a vertical bar
581:10 - something else like a literal dot now a
581:14 - literal dot needs to be escaped
581:15 - otherwise it represents any character
581:17 - which would be a regression a step back
581:19 - but now notice what I've done in
581:21 - parentheses I'm telling re.search that
581:25 - those first few characters in your email
581:27 - address that is your username has to be
581:29 - a word character Like A through Z
581:32 - uppercase or lowercase or zero through
581:34 - nine or an underscore or a literal dot
581:37 - we could do this differently too I could
581:39 - get rid of the parentheses and the or
581:41 - and I could just use a set of characters
581:43 - I could again manually say a through z a
581:47 - through z 0 through 9 underscore and
581:51 - then I could do a literal dot with a
581:53 - backslash period and now I technically
581:55 - don't even need the upper case because
581:57 - I'm already telling the computer to
581:58 - ignore case I can just pick one or the
582:00 - other which one is better is really up
582:02 - to you whichever one you think is more
582:04 - readable would generally be the better
582:06 - design
582:07 - all right let me propose that I rewind
582:09 - this in time to where we left off
582:12 - which was here
582:14 - and let me propose that there are indeed
582:16 - still limitations of this solution not
582:19 - just with the username not just with the
582:21 - domain name we're still being a little
582:22 - too restrictive so would you like to see
582:25 - the official regular expression that at
582:27 - least browsers use nowadays whenever you
582:29 - type in an email address to a web form
582:31 - and the web form the browser tells you
582:33 - yes or no your email address is
582:35 - syntactically valid
582:37 - ready ready
582:39 - here is and this isn't even officially
582:43 - the right regular expression it's a
582:45 - simplified version that browsers use
582:47 - because it catches most mistakes but not
582:49 - all here we go
582:51 - this is the regular expression for a
582:54 - valid email address at least as browsers
582:57 - nowadays Implement them now it's crazy
583:00 - cryptic at first glance but note and
583:03 - it's wrapping onto many lines but it's
583:05 - just one pattern but just notice the now
583:08 - familiar symbols there is the carrot
583:11 - symbol at the very top there is the
583:13 - dollar sign at the very end there is a
583:15 - square bracket over here and then some
583:17 - of these ranges plus other characters
583:19 - turns out you don't normally see these
583:21 - characters in email addresses it looks
583:23 - like you're swearing at someone in their
583:25 - username but they're valid characters
583:27 - they're valid officially that doesn't
583:28 - mean that Gmail is going to allow you to
583:30 - put dollar signs and other punctuation
583:33 - in your username but officially some
583:35 - servers might allow that so if you
583:37 - really want to validate a user's email
583:39 - address you would actually come up with
583:41 - or copy paste something like this but
583:44 - honestly this looks so cryptic and if
583:46 - you were to type it out manually you are
583:48 - so likely to make a mistake what's the
583:51 - better our solution here instead this is
583:53 - where purse past week's libraries are
583:56 - your friend surely someone else on the
583:58 - internet a programmer more experienced
584:00 - than you even has come up with code that
584:03 - validates email addresses properly using
584:06 - this regular expression or even
584:07 - something more sophisticated than that
584:09 - so generally if the problem at hand is
584:11 - to validate input that is pretty
584:13 - conventional an email address a URL
584:15 - something where there's an official
584:17 - definition that's independent of you
584:19 - yourself find a popular library that
584:22 - you're comfortable using and use it in
584:25 - your code to validate email addresses
584:26 - this is not a wheel necessarily that you
584:29 - yourself should invent we've used email
584:31 - addresses though to iteratively start
584:33 - from something simple too simple and
584:35 - build on top of that so you could
584:37 - certainly imagine using regular
584:39 - expression still to validate things that
584:40 - aren't email addresses but there are
584:42 - data that are important to you so we at
584:45 - least now have these building blocks now
584:47 - besides the regular Expressions
584:48 - themselves it turns out there's other
584:50 - functions and python re library for
584:53 - regular Expressions among them is this
584:54 - function here re dot match which is
584:56 - actually very similar to re.search
584:58 - except you don't have to specify the
585:00 - carrot symbol at the very beginning of
585:02 - your regex if you want to match from the
585:04 - start of a string re dot match by Design
585:06 - will automatically start matching from
585:09 - the start of the string for you similar
585:10 - in spirit is re.full match which does
585:13 - the same thing but not only matches at
585:15 - the start of the string but the end of
585:16 - the string so that you two don't need to
585:18 - type in the carrot symbol or the dollar
585:20 - sign as well but let's go ahead and
585:23 - transition back now to some action code
585:25 - whereby we solve a different problem in
585:26 - spirit rather than just validate the
585:29 - user's input and make sure it looks the
585:30 - way we want let's just assume that the
585:32 - users are not going to type in data
585:34 - exactly as we want and so we're going to
585:36 - have to clean up their input this
585:38 - happens so often when you're using like
585:40 - a Google form or Office 365 form or
585:42 - anything else to collect user input no
585:45 - matter what your form question says your
585:47 - users are not necessarily going to
585:49 - follow those directions they might go
585:50 - ahead and type in something that's a
585:52 - little differently formatted than you
585:54 - might like now you could certainly go
585:56 - through the results and download a CSV
585:58 - or open the Google spreadsheet or
586:00 - equivalent in Excel and just clean up
586:02 - all the data manually but if you've got
586:04 - lots of submissions dozens hundreds
586:06 - thousands of rows in your data set doing
586:09 - things manually might not be very fun it
586:11 - might be much more effective to write
586:12 - code as in Python that can allow you to
586:15 - clean up that data and any future data
586:18 - as well so let me propose that we go
586:21 - ahead here and close validate.pi and
586:23 - let's go ahead and create a new program
586:25 - altogether called format.pi the goal of
586:28 - which is to reformat the user's input in
586:30 - the format we expect I'm going to go
586:32 - ahead and run code of format dot pi and
586:35 - let's suppose that the data we're going
586:37 - to reformat is the user's name so not
586:39 - email address but name this time and
586:42 - we're going to hope that they type in
586:43 - their name properly like David Malin but
586:46 - some users might be in the habit for
586:48 - whatever reason of typing their name
586:49 - backwards if you will with a comma such
586:51 - as mailen comma David instead now it's
586:55 - fine because both are clearly as
586:58 - readable to the human but if you want to
587:00 - standardize how those names are stored
587:02 - in your system perhaps a database or CSV
587:05 - file or something else it would be nice
587:06 - to at least standardize or canonicalize
587:08 - the format in which you're storing your
587:10 - data so that if you print out the user's
587:12 - name it's always the same format David
587:14 - Malin and there's no commas or
587:16 - backwardsness to it so let's go ahead
587:19 - and do something familiar let's go ahead
587:21 - and give myself a variable called name
587:22 - and set it equal to the return value of
587:24 - input asking the user as we've done many
587:26 - times what's your name question mark I'm
587:29 - going to go ahead and proactively at
587:30 - least clean up some messiness as we keep
587:32 - doing here by just stripping off any
587:34 - leading or trailing white space just in
587:36 - case the user accidentally hits the
587:37 - space bar we don't want that ultimately
587:39 - in our data set and now let me go ahead
587:42 - and do this as we've done before let me
587:44 - just go ahead quickly and print out just
587:46 - to make sure I'm off to the right start
587:47 - hello and then in curly brace's name so
587:50 - making an F string to format hello comma
587:53 - name now let me go ahead and clear my
587:55 - screen and run python of format.pi let
587:58 - me behave and type in my name as I
587:59 - normally would David spacemailin enter
588:01 - and I think the output looks pretty good
588:03 - it looks as expected grammatically let
588:06 - me now go ahead though and play this
588:08 - game again but this time maybe because
588:10 - I'm not thinking or I'm just in the
588:11 - habit of doing last name comma first I
588:13 - do Malin comma David and hit enter
588:16 - alright well this now is is is weird
588:19 - even though the program is just spitting
588:21 - out exactly what I typed in arguably
588:23 - this is not close to correct at least
588:25 - grammatically it should really say hello
588:27 - David Malin now maybe I could have some
588:30 - if conditions and I could just reject
588:31 - the user's input if they type a comma or
588:34 - get their names backwards somehow but
588:36 - that's going to be too little too late
588:38 - if the user has already submitted a form
588:39 - online and I already have the data and
588:42 - now I need to go in and clean it up and
588:44 - it's not going to be fun to go through
588:46 - manually in Google spreadsheets or apple
588:47 - numbers or Microsoft Excel and manually
588:50 - fix a lot of people's names to get rid
588:52 - of the commas and move the first name
588:54 - before the last as is conventional in
588:56 - the U.S so let's do this it could be a
588:59 - little fragile but let's let's start to
589:01 - express ourselves a little
589:02 - programmatically here and ask this
589:04 - if there is a comma in the person's name
589:08 - which is pythonic I'm just asking the
589:10 - question is this shorter string in this
589:12 - longer string then let me go ahead and
589:14 - do this let me go ahead and grab that
589:16 - name in the variable
589:18 - split on not just the comma but the
589:21 - space after assuming the human typed
589:24 - into space after their name and let me
589:25 - go ahead and store the result of that
589:27 - splitting of malen comma David into two
589:30 - variables let's do last comma first
589:32 - again unpacking the sequence of values
589:34 - that comes back now let me go ahead and
589:37 - reformat the name so I'm going to
589:39 - forcibly change the user's name to be as
589:41 - I expect so name is actually going to be
589:43 - this format string first name then last
589:47 - name both in curly braces but formatted
589:50 - together with a single space so that I'm
589:52 - overriding the user's input and updating
589:55 - my name variable accordingly for the
589:57 - moment to be clear this program is
589:59 - interactive like the users like me are
590:01 - typing their name into the program but
590:03 - imagine the data already is in a CSV
590:06 - file it came in from some process like a
590:07 - Google form or something else online you
590:10 - could imagine writing code similar to
590:11 - this but that maybe goes and reads that
590:14 - file into memory first maybe it's a CSV
590:16 - via CSV reader or addict reader and then
590:19 - iterating over each of those names but
590:21 - we'll keep it simple and just do one
590:22 - name at a time but now what's kind of
590:24 - interesting here is if I go back to my
590:26 - terminal window and clear it and run
590:28 - python of format.pi and hit enter I'm
590:30 - going to type in David space mailing as
590:32 - before and I think we're still good but
590:35 - I'm also going to go ahead and do this
590:36 - python of format.pi malen comma David
590:40 - with a space in between crossing my
590:43 - fingers and hit enter and voila that now
590:46 - has been fixed such a simple thing to be
590:49 - sure but it is so commonly necessary to
590:52 - clean up users input here we see at
590:55 - least one way to do so pretty easily now
590:58 - to be fair there's some problems here
591:00 - and in fact can someone imagine a
591:02 - scenario in which this code really
591:04 - doesn't fix the user's input what could
591:07 - still go wrong even with this fix in my
591:10 - code
591:11 - any thoughts if they attack the in their
591:14 - name comma and then sign them oh and
591:17 - then something else yeah so let me let
591:19 - me try this for instance
591:20 - um let me go ahead and run a program and
591:22 - uh I am the only David Malin that I know
591:25 - but suppose I were uh uh let's say
591:28 - junior like this and it's common in
591:30 - English at least to sometimes put a
591:32 - comma there you don't necessarily need
591:33 - the comma but I'm one of those people
591:34 - who uses a comma that's now really
591:37 - really broken so I've broken some
591:39 - assumption there and so that could
591:41 - certainly go wrong here what else well
591:43 - let me go ahead and run this again and
591:44 - if I did mail-in comma David no space
591:47 - because I'm being a little sloppy I'm
591:49 - not paying attention which is going to
591:50 - happen when you have lots of users
591:52 - ultimately well this really broke now
591:54 - notice I have a value error an actual
591:57 - exception why well because split is
592:00 - supposed to be splitting the string into
592:02 - two strings by looking for the comma and
592:05 - a space but if there is no comma in
592:07 - space it can't split it into two things
592:09 - and the fact that I have two variables
592:12 - on the left but I'm only getting back
592:14 - one thing on the right means that I
592:17 - can't do this code quite as this so it's
592:19 - fragile to be sure but wouldn't it be
592:21 - nice if we could at least improve it for
592:23 - instance we now know some regular
592:24 - expression syntax what if I at least
592:26 - wanted to make this base optional well I
592:29 - could use my newfound regular expression
592:31 - syntax and put a question mark question
592:33 - mark means zero or one of the things to
592:36 - the left what's the thing to the left
592:38 - it's literally a space I don't even need
592:40 - parentheses if there's just one thing
592:42 - there so that would be the start of a
592:44 - pattern that says I must have a comma
592:46 - and then I may or may not have a space
592:48 - zero or one space is thereafter
592:51 - unfortunately the version of split
592:53 - that's built into the stir variable as
592:58 - in this case doesn't support regular
592:59 - Expressions if we want our regular
593:01 - Expressions we need to go use that
593:03 - Library here so let me go ahead and do
593:05 - this let me go in and leave this code AS
593:07 - is but go up to the top now and import
593:10 - re to import the library for regular
593:12 - expressions and now let me go ahead and
593:15 - start changing my Approach here I'm
593:18 - going to go ahead and do this I'm going
593:19 - to use the same function called re dot
593:22 - search and I'm going to search for a
593:25 - pattern that I think will be la last
593:27 - comma first so let me use my newfound
593:29 - regular expression syntax and represent
593:32 - a pattern for something like Malin comma
593:35 - space David how can I do this well
593:37 - inside of my quotes for re.search I'm
593:40 - going to have something so dot plus
593:43 - sorry I'm going to have something so dot
593:46 - plus then I'm going to have a comma then
593:48 - I'm going to have a space then I'm going
593:50 - to have something dot plus now I'm going
593:53 - to preemptively refine this a little bit
593:54 - I want this whole pattern to start
593:56 - matching at the beginning of the user's
593:58 - input so I'm going to add the carrot
594:00 - right away and I want the end of the
594:02 - user's input to be matched as well so
594:04 - that I'm literally expecting any
594:06 - character one or more times then a comma
594:09 - then a space than any other character
594:10 - one or more times and then that is it
594:14 - and I'm going to pass in the name
594:16 - variable as before now when we've used
594:19 - re.search in the past we really used it
594:23 - just to answer a question does the
594:25 - user's input match the following pattern
594:28 - or not true or false effectively but
594:31 - re.search is actually more powerful than
594:34 - that you can actually get back more
594:36 - information and you can do this you can
594:39 - specify a variable and then an
594:40 - assignment operator and get back more
594:43 - precise answers to what has been found
594:45 - when searched for but what is it you
594:48 - want to get back well it turns out
594:50 - there's this other feature of regular
594:52 - Expressions which allow you to use
594:54 - parentheses not just to group things
594:56 - together but to capture them it turns
594:59 - out when you specify parentheses in a
595:02 - regular expression unbeknownst to us up
595:04 - until now everything in the parentheses
595:07 - will be returned to you as a return
595:10 - value from the re.search function it's
595:13 - going to allow you to extract specific
595:16 - amounts of information from the user's
595:18 - own input you can reverse this process
595:20 - too by using the non-capturing version
595:23 - as well you can use parentheses and then
595:25 - literally a question mark and a colon
595:27 - and then some other stuff and that will
595:28 - say don't bother capturing this I just
595:30 - want to group things but for now we're
595:32 - going to use just the parentheses
595:33 - themselves so how am I going to do this
595:35 - well if I want to get back the user's
595:38 - last name and first name I think what I
595:41 - want to capture is the dot plus here
595:45 - and the dot plus here
595:48 - so I've deliberately surrounded in
595:50 - parentheses the dot plus both to the
595:52 - left and the right of the comma not
595:54 - because I'm grouping them together per
595:56 - se I'm not adding a question mark I'm
595:58 - not adding up another Plus or Star I'm
596:00 - using parentheses now for capturing
596:03 - purposes why well I'm going to do this
596:06 - next I'm going to still ask a Boolean
596:08 - question like if there are matches then
596:11 - do this so if matches is not effectively
596:14 - false like none
596:16 - I do expect I've gotten back some
596:19 - matches and watch what I can do now I
596:21 - can do last comma first equals whatever
596:25 - matches in and get back all of the
596:27 - groups of matches then go ahead and
596:29 - update name just like before with a
596:31 - format string and do first and then last
596:34 - in curly braces as well and then at the
596:36 - very bottom just like before print out
596:38 - for instance hello
596:40 - comma name so the new code now is
596:44 - everything highlighted here I'm using re
596:47 - search to search for whether the user
596:50 - typed their name in last comma first
596:52 - format but I am more powerfully using
596:56 - re.search to capture some of the user's
596:58 - input what's going to get captured
597:00 - anything I surrounded in parentheses
597:02 - will be returned to me as return values
597:06 - how do you get at those return values
597:08 - you ask the variable to which you assign
597:10 - them for all of the groups all of the
597:12 - groups of parentheses that were captured
597:16 - so let me go ahead and do this let me go
597:18 - ahead now and run python of format.pi
597:20 - enter and I'm going to type my name as
597:23 - usual in this case nothing happens with
597:27 - this if condition why because I did not
597:30 - type a comma and so this search does not
597:34 - find a comma so there are no matches so
597:36 - we immediately just print out hello name
597:38 - nothing interesting or new there but if
597:41 - I now go ahead and clear my screen and
597:43 - run Python A format.pi and do mail-in
597:45 - comma space David enter we've
597:49 - reformatted my name well how did this
597:51 - work let me be a little more explicit
597:53 - now it turns out I don't have to just
597:55 - say matches.groups I can get specific
597:57 - groups back that I want so let me change
598:00 - my code a little bit more let me go
598:02 - ahead now
598:03 - and just say this let's update name uh
598:08 - well actually let's do this let's say
598:10 - that the last name is going to be in the
598:13 - matches but specifically group one the
598:16 - first name is going to be in the matches
598:18 - but specifically group two y one and two
598:20 - because this is the first set of
598:22 - parentheses to the left of the comma
598:24 - this is the second set of parentheses to
598:26 - the right of the comma and based on the
598:28 - input this would be the user's last name
598:30 - in this scenario Malin this would be the
598:32 - user's first name David in this scenario
598:35 - that's why I'm using group one for the
598:38 - last name and group two for the first
598:41 - name and now I'm going to go ahead and
598:42 - say name equals uh fstring again first
598:47 - and then last
598:50 - done and let me we're finding this one
598:53 - last step before we take questions I
598:55 - don't really need these variables if I'm
598:57 - immediately using them let's just go
598:58 - ahead and tighten this up further as
599:00 - we've done in the past for design sake
599:01 - if I want to make the name the
599:03 - concatenation of the person's first name
599:05 - and last name let's just do this matches
599:07 - dot group 2 first plus a space plus
599:12 - matches dot group one so it's just up to
599:16 - me to know from left to right this is
599:18 - group one this is group two so group one
599:20 - is last group two is first so if I want
599:23 - to flip them around and update the value
599:25 - of name I can explicitly get group two
599:28 - first concatenate using plus a single
599:31 - space and then concatenate on group one
599:35 - all right that was a lot let me pause to
599:38 - see if there are questions the key
599:40 - difference here is we're still using
599:41 - re.search the exact same way but now I'm
599:44 - using its return value not just to
599:46 - answer a question true or false but to
599:49 - actually get back specific matches
599:50 - anything I captured so to speak with
599:54 - parentheses why is it here we're using
599:56 - one and two instead of zero and one
599:58 - really good question capturing the first
600:00 - a good observation in almost every other
600:02 - context we've started counting at zero
600:05 - and one instead of one and two it turns
600:07 - out there's something else in location
600:09 - zero when it comes back from re.search
600:11 - related to the string itself so
600:13 - according to the documentation of this
600:15 - function only one is the first set of
600:18 - parentheses and two is the second set
600:20 - and onward from there just a different
600:23 - convention here other questions uh what
600:25 - if we write nothing like five space
600:29 - government white space how we check
600:33 - um true or Foundation before I answer
600:36 - directly let me just run this and make
600:38 - sure I've not broken anything further
600:39 - let me run python to format.pi let me
600:41 - type in David spacemailin the right way
600:43 - let me run it once more let me type it
600:45 - mail and comma David the wrong way that
600:47 - we're fixing and we're still good but I
600:50 - think it will still break let me run it
600:51 - a third time with Malin comma David with
600:54 - no space and now it's still broken why
600:58 - because I'm still looking for comma
601:01 - space now how can I fix that one way I
601:04 - could do that is to add a question mark
601:06 - here which again is zero or more of the
601:08 - thing before so if I have a space and
601:10 - then a question mark literally no need
601:12 - for any parentheses then I can literally
601:15 - tolerate both Malin comma space David or
601:19 - Malin comma David so let's try again
601:21 - before this did not work let's do Malin
601:23 - comma David with no space now it does
601:27 - actually work so we can tolerate
601:28 - different amounts of white space if I am
601:31 - a little more precise with my formula
601:33 - let me go ahead and try once more let me
601:35 - very weirdly but possibly hit the space
601:37 - bar a few too many times so now they're
601:39 - really separated this again is not going
601:43 - to work quite right because it's going
601:45 - to consume all of that white space so
601:47 - now I might want to strip left and right
601:49 - any of the leading white space on the
601:51 - result or what I could do here is say
601:54 - this instead of zero or a one I could
601:58 - use a star here so space star and now if
602:02 - I run this once more with Malin comma
602:04 - space space David enter now we've
602:06 - cleaned up things further so you can
602:08 - imagine depending on how messy the data
602:10 - is that you're cleaning up your regular
602:12 - Expressions might need to get more and
602:14 - more sophisticated it really depends on
602:16 - just how many problems we want to solve
602:18 - at once well allow me to propose that we
602:21 - Forge ahead further just to clean this
602:23 - up even more so using a feature that's
602:25 - actually relatively new to python itself
602:28 - it is very common when using regular
602:30 - Expressions to do exactly what I've done
602:32 - here to call a function like re.search
602:35 - with capturing parentheses inside such
602:38 - that you get back a return value that
602:40 - I'm calling matches you could call it
602:41 - something else but I'm calling it by
602:42 - default matches and then notice on the
602:45 - next line I'm saying if matches wouldn't
602:47 - it be nice if I could just tighten
602:49 - things up further and do these all on
602:51 - the same line well you can sort of let
602:55 - me go ahead and do this let me get rid
602:57 - of this if and let me just try to say
602:59 - something like this if matches equals re
603:02 - search and then colon so combining my if
603:06 - condition into just one line instead of
603:09 - those two in C or C plus plus or Java
603:13 - you would actually do something like
603:15 - this surrounding the whole thing with
603:16 - parentheses sometimes double sets to
603:18 - suppress any warnings if you want to do
603:20 - two things at once if you want to not
603:23 - only assign the return value of
603:26 - re.search to a variable called matches
603:28 - but you want to subsequently ask a
603:31 - Boolean question is this effectively
603:34 - true or false that's what I was doing a
603:36 - moment ago let me undo this a moment ago
603:38 - I was getting back the return value and
603:40 - assigning it to matches and then I was
603:42 - asking the question well it turns out
603:44 - this need to have two lines of code
603:47 - presumably rubbed people wrong for too
603:49 - long in Python and so you can now
603:51 - combine these two kinds of lines into
603:53 - one but you need a new operator you
603:56 - cannot just say if matches equals re
603:59 - search and then encoding at the end you
604:02 - instead need to do this you need to do
604:05 - colon equals if and only if you want to
604:09 - assign something from right to left and
604:11 - you want to ask an if or an L if
604:14 - question on the same line This is
604:17 - affectionately known as you can see here
604:18 - as the walrus operator and it's new to
604:21 - python in recent years and it both
604:24 - allows you to assign a value as I'm
604:26 - doing from right to left and ask a
604:30 - Boolean question about it like I'm doing
604:32 - with the if or equivalently L if does
604:35 - anyone know why this is called The
604:36 - Walrus operator
604:38 - if you kind of look at it like this
604:41 - perhaps if you're familiar with walruses
604:43 - it kinda sort of looks like a walrus so
604:46 - a minor detail but a relatively new
604:47 - feature of python that honestly you'll
604:49 - probably continue to see online and in
604:51 - source code and in textbooks and so
604:53 - forth increasingly so now that it does
604:55 - exist it does not change the logic at
604:57 - all if I run python a format that's pi
604:59 - and type Malin comma space David it
605:01 - still fixes things but it's tightened up
605:03 - my code just a bit more all right let's
605:06 - go ahead and look at one final problem
605:08 - to solve that of extracting information
605:11 - now as well so at this point we've now
605:13 - validated the user's input by checking
605:15 - whether or not it meets a certain
605:17 - pattern we've cleaned up the user's
605:19 - input by checking against a pattern
605:21 - whether it matches or not and if it does
605:23 - match we kind of reorganize some of the
605:25 - user's information so we can clean up
605:27 - their input and standardize the format
605:29 - in which we're storing or printing it in
605:30 - this case let's do one final example
605:32 - where we're very specifically extracting
605:35 - information in order to answer some
605:37 - question so let me propose this let me
605:40 - go ahead and close format.pi and create
605:42 - a new file called twitter.pi the goal of
605:45 - which is to prompt users for the URL of
605:48 - their Twitter profile and extract from
605:51 - it infer from that URL what is the
605:54 - user's username now why might you want
605:56 - to do this well one you might want users
605:58 - to be able to just very easily copy and
605:59 - paste the URL from their own Twitter
606:01 - profile into your form into your app so
606:04 - that you can figure out what their
606:06 - username is or you might have a form
606:10 - that asks the user for their Twitter
606:11 - username and because people aren't
606:13 - necessarily paying very close attention
606:15 - some people type their username some
606:17 - people type their whole URL or something
606:20 - else altogether it would be nice now
606:22 - that you're a programmer to just be more
606:24 - tolerant of different types of input and
606:26 - just take on the burden of
606:27 - canonicalizing standardizing the data
606:29 - but being flexible with the users it's
606:32 - arguably a better user experience if you
606:34 - just let me copy paste or type in what I
606:36 - want you clean it up you're the
606:38 - programmer not me nuns for a better
606:40 - experience perhaps well let me go ahead
606:42 - and do this with twitter.pi let me first
606:45 - go ahead and prompt the user here for a
606:48 - value for a variable that I'll call URL
606:50 - and just ask them to input the URL of
606:52 - their Twitter profile I'm going to go
606:54 - ahead and strip off any leading or
606:55 - trailing white space just in case users
606:57 - accidentally hit the space bar that's
606:58 - like literally the least I can do quite
607:01 - easily but now let's go ahead and do
607:03 - this suppose that the user's address is
607:07 - the following let me print out what they
607:10 - type in and let me clear my screen and
607:11 - run python of twitter.pi I'm going to go
607:14 - ahead and type in for instance https
607:15 - colon slash slash twitter.com David J
607:19 - malen which happens to be my own Twitter
607:21 - username for now we're just going to
607:23 - print it back onto the screen just to
607:25 - make sure I've not messed up yet okay so
607:27 - I've printed back out the exact same URL
607:29 - but the goal at hand is to extract the
607:32 - username only now let me just ask
607:34 - perhaps a straightforward question
607:36 - logically what do I need to do to get at
607:40 - the user's username well uh we just
607:43 - ignore what's before the username and
607:46 - then just extract the username perfect
607:48 - yeah I mean it is as simple as that if
607:50 - you know the usernames at the end well
607:52 - let's just somehow ignore everything to
607:54 - the beginning well what's at the
607:55 - beginning well it's a URL so we're
607:57 - probably going to need to ignore an
607:58 - https a colon slash a twitter.com and a
608:03 - slash so we just want to throw all of
608:05 - that away why because if it's a URL We
608:07 - Know by how Twitter works that the
608:09 - username comes at the end so let's use
608:11 - that very simple idea to get at the
608:14 - information we want well I'm going to
608:15 - try this a few different ways let me go
608:17 - back into my program here and instead of
608:18 - just printing it out which was just to
608:20 - see what's going on let me do this let
608:22 - me create a new variable called username
608:24 - and let me call URL dot replace it turns
608:29 - out that if URL is a string or a stir in
608:32 - Python it again comes with multiple
608:34 - methods like strip uh and split and
608:38 - others as well one of which is called
608:40 - replace and replace will do just that
608:42 - you pass it two arguments the first of
608:44 - which is what do you want to replace the
608:46 - second argument is what do you want to
608:48 - replace it with so if I want to get rid
608:50 - of as Ivan proposed really just
608:52 - everything before the username that is
608:53 - the Twitter URL or the beginning thereof
608:56 - let's just say this go ahead and replace
608:58 - https colon slash slash twitter.com
609:02 - close quote that's what I want to
609:05 - replace and comma second argument what
609:07 - do you want to replace it with nothing
609:09 - so I'm literally going to pass in quote
609:11 - unquote to effectively do a find and
609:13 - replace that's what the replace method
609:15 - does just like you can do it in
609:16 - Microsoft Word or Google Docs this is
609:18 - the programmer's way of doing find and
609:20 - replace now let me go ahead and print
609:23 - out just the username so I'll use an F
609:25 - string like this I'll say username colon
609:28 - and then in curly braces username just
609:30 - to format it nicely all right let me go
609:32 - ahead and clear my screen and run python
609:34 - of twitter.pi enter URL here we go https
609:37 - colon slash slash twitter.com
609:39 - [Music]
609:41 - David J Malin enter okay now we've made
609:45 - some progress done for the day right
609:49 - well what is sub-optimal about this can
609:51 - anyone critique or find fault with my
609:55 - program it is working now but it's a
609:58 - little fragile I bet we could contrive
610:01 - some scenarios where I think it works
610:02 - but it doesn't well like it's a few
610:04 - ideas actually well first of all uh if
610:07 - the if we don't specify https it's all
610:11 - broken secondly if we have sliced at the
610:14 - end it also will be broken if we if we
610:17 - have like a question mark or something
610:19 - after question mark it also won't work
610:21 - so let us know oh my God I mean here we
610:24 - are I was pretending to think I was done
610:26 - but my God like Alex gave us a whole
610:28 - laundry list of like problems and just
610:30 - to recap then what if it's not https
610:32 - it's HTTP slightly less secure but I
610:35 - should still be able to tolerate that
610:36 - programmatically uh what if the protocol
610:38 - is not there what if the user just type
610:39 - twitter.com David J Malin it would be
610:42 - nice to tolerate that rather than show
610:44 - an error and make me type in the
610:45 - protocol why it's not good user
610:47 - experience what if it had a slash at the
610:50 - end of the username or a question mark
610:51 - If you think about URLs you've seen on
610:53 - the web there's very commonly more
610:55 - information especially if it's been
610:57 - shared on social media there might be
610:58 - HTTP parameters so to speak just stuff
611:01 - there that we don't want there could be
611:02 - a
611:03 - www.twitter.com which I'm also not
611:05 - expecting but does work if you go to
611:07 - that URL too so there's just so many
611:10 - things that can go wrong and even if I
611:12 - come back to my contrived example as
611:14 - earlier what if I run this program and
611:16 - say this my username is https colon
611:20 - slash twitter.com David J Malin enter
611:25 - well that too just just didn't really
611:28 - work it got rid of the you actually okay
611:32 - actually that kind of worked but the
611:35 - goal here is to actually get the user's
611:36 - username not an English sentence
611:38 - describing the user's username so I
611:40 - would argue that even though I just
611:42 - accidentally created perfectly correct
611:43 - English grammar I did not extract the
611:46 - Twitter username correctly I don't want
611:48 - words like my username is as part of my
611:51 - input so how can we go about improving
611:53 - this and maybe chipping away at some of
611:55 - those problems one by one well let me
611:56 - clear my screen here let me come back up
611:58 - to my code and let me not just replace
612:01 - it but let me do something else instead
612:03 - I'm going to go ahead and instead of
612:05 - using replace I'm going to use another
612:06 - function called remove prefix a prefix
612:09 - is a string or a substring that comes at
612:12 - the start of another so if I remove
612:14 - prefix I don't need a second argument
612:16 - for this function I just need one what
612:18 - prefix do you want to remove so this
612:20 - will at least now fix the problem I just
612:23 - described of typing in like a whole
612:25 - sentence where the URL is there but it's
612:27 - not the beginning it's only at the end
612:29 - so here this still is not correct but we
612:32 - don't create this weird looking output
612:34 - that just removes the URL part of the
612:36 - input my username is https colon slash
612:40 - twitter.com David J malen a moment ago
612:44 - it did remove the URL and left only the
612:47 - David J Malin this is not perfect still
612:49 - but at least now it does not weirdly
612:52 - remove the URL and then leave the
612:54 - English it's just leaving it alone so
612:56 - maybe I could handle this better but at
612:58 - least it's removing it from the part of
613:00 - the string I might anticipate
613:02 - well what else could we do here well it
613:04 - turns out that like regular Expressions
613:06 - just let us express patterns much more
613:09 - precisely we could spend all day using a
613:11 - whole bunch of different python
613:12 - functions like remove prefix or remove
613:14 - and strip and others and kind of make
613:17 - our way to the right solution but a
613:19 - regular expression just allows you to
613:21 - more succinctly if admittedly more
613:23 - cryptically Express these kinds of
613:25 - patterns and goals and we've seen from
613:27 - parentheses which can be used not just
613:29 - to group symbols together as sets but to
613:32 - capture information as well we have a
613:35 - very powerful tool now in our toolkit so
613:38 - let me do this let me go ahead and start
613:41 - fresh here and import the re Library as
613:44 - before at the very top of my program I'm
613:46 - still going to get the user's URL via
613:48 - the same line of code but I'm now going
613:50 - to use another function as well it turns
613:53 - out that there's not just re.search or
613:55 - rd.match or re.full match there's also
613:58 - re.sub in the regular expression Library
614:01 - where sub here means substitute and it
614:04 - takes more arguments but they're fairly
614:06 - straightforward the first argument to
614:08 - re.sub is the pattern the regular
614:10 - expression that you want to look for
614:12 - then you have a replacement string what
614:15 - do you want to replace that pattern with
614:16 - and where do you want to do all that
614:19 - well you pass in the string that you
614:21 - want to do the substitution on then
614:23 - there's some other arguments that I'll
614:25 - wave my hands up for now among them are
614:26 - those same flags and also account like
614:28 - how many times do you want to do find
614:30 - and replace do you want it to do all do
614:32 - you want to do it just one or so forth
614:34 - you can have further control there too
614:35 - just like you would in Google Docs or
614:37 - Microsoft Word well let me go back to my
614:39 - code here and let me do this I'm going
614:42 - to go ahead and call re not search but
614:44 - re.sub for substitute I'm going to pass
614:47 - in the following regular expression
614:50 - https colon slash slash twitter.com
614:55 - and then I'm going to close my quote and
614:57 - now what do I want to replace that with
614:59 - well like before with the simple stir
615:02 - Place function I want to replace it with
615:04 - nothing just get rid of it all together
615:05 - but what string do I want to pass in to
615:08 - do this to the URL from the user and now
615:12 - let me go ahead and assign the return
615:14 - value of re sub to a variable called
615:17 - username so re Subs purpose in life is
615:19 - again to substitute some value for some
615:22 - regular expression some number of times
615:24 - it essentially is find and replace using
615:27 - regular expressions and it returns to
615:29 - you the resulting string once you've
615:31 - done all those substitutions so now the
615:33 - very last line of my code can be the
615:35 - same as before print and I'll use an F
615:37 - string username colon and then in curly
615:40 - braces username so I can print out
615:42 - literally just that
615:44 - all right let's try this and see what
615:45 - happens I'll clear my terminal window
615:47 - run python of twitter.pi and here we go
615:49 - https colon slash slash twitter.com
615:53 - David J Malin cross my fingers and hit
615:57 - enter okay now we're in business but it
616:01 - is still a little fragile and so let me
616:03 - ask the group
616:04 - what problem should I now further chip
616:07 - away at they've been said before but
616:09 - let's be clear what's one or more
616:10 - problems that still remain the protocols
616:13 - and the uh
616:15 - domain prefix is Paul good the protocol
616:18 - so HTTP versus https maybe the subdomain
616:21 - www should it be there or not and
616:24 - there's a few other mistakes here too
616:26 - let me actually stay with the group what
616:27 - are some other shortcomings of this
616:29 - current solution
616:31 - um if we use a phrase like you do before
616:35 - we are going to have the same problem
616:36 - because it's not taking account in the
616:40 - first part of the the text example good
616:43 - I might still allow for like some words
616:45 - uh some English to the left of the URL
616:48 - because I didn't use like my carrot
616:49 - symbol so I'll fix that and any final
616:51 - observations on shortcomings here
616:53 - uh well it could be a HTTP or there
616:57 - could be like less than two slashes okay
616:59 - so it could be HTTP and I think that was
617:00 - mentioned too in terms of protocol
617:02 - they're
617:03 - slashes that I'm not I'm not gonna worry
617:06 - about if the user gives me one slash
617:08 - instead of two that's really user error
617:10 - and I could be tolerant of it but you
617:12 - know what at that point I'm okay yelling
617:14 - at them with an error message saying
617:16 - please fix your input otherwise we could
617:18 - be here all day long trying to handle
617:19 - all possible typos for now I think in
617:22 - the interest of usability or user
617:24 - experience ux let's at least be tolerant
617:27 - of all possible valid inputs or
617:29 - reasonable inputs if you will so let me
617:31 - go here and let me start chipping away
617:33 - at these here what are some problems we
617:34 - can solve well let me propose that we
617:38 - first address the issue of matching from
617:40 - the beginning of the string so let me
617:42 - add the carrot to the beginning and let
617:44 - me add not a dollar sign at the end
617:47 - though right because I don't want to
617:48 - match all the way to the end because I
617:49 - want to tolerate a username there so I
617:52 - think we just want the carrot symbol
617:54 - there there's a subtle bug that no one
617:57 - yet mentioned and let me just kind of
617:59 - highlight it and see if it jumps out at
618:02 - you now it's a little subtle here on my
618:04 - screen I've highlighted in blue a final
618:08 - bug here maybe some Smiles on the screen
618:11 - yeah can we take one hand here why am I
618:14 - highlighting the dot in twitter.com even
618:17 - though it definitely should be there so
618:20 - the dog without a backslash meaning any
618:22 - character is of a new one yeah exactly
618:25 - it's not it means any character so I
618:27 - could type in something like Twitter uh
618:30 - question mark Com or Twitter anything
618:32 - com and that would actually be tolerated
618:35 - it's not really that bad because why
618:37 - would the user do that but if I want to
618:40 - be correct and I want to be able to test
618:41 - my own code properly I should really get
618:44 - this detail right so that's an easy fix
618:46 - too but it's a common mistake anytime
618:48 - you're writing regular Expressions that
618:50 - happen to involve special symbols like
618:52 - dots in a URL or domain name a dollar
618:55 - sign in something involving currency
618:57 - remember you might indeed Need to Escape
618:59 - it we with a backslash like this here
619:02 - all right let me ask the group about the
619:04 - protocol specifically https is a good
619:07 - thing in the world it means secure there
619:10 - is encryption being used so generally
619:12 - you like to see https but you still see
619:14 - people typing or copy pasting HTTP what
619:18 - would be the simplest fix here to
619:21 - tolerate as has been proposed both HTTP
619:24 - and https I'm going to propose that I
619:27 - could do this I could do HTTP vertical
619:30 - bar or https which again Means A or B
619:34 - but I think I can be smarter than that I
619:36 - can keep my code a little more succinct
619:38 - any recommendations here for tolerating
619:42 - HTTP or https
619:45 - we could try to put in question mark
619:47 - behind the S perfect just use a question
619:50 - mark right both of those would be viable
619:52 - Solutions if you want to be super
619:53 - explicit in your code fine use
619:55 - parentheses and say HTTP or https so
619:59 - that you the reader your boss your
620:00 - teacher just know exactly what you're
620:02 - doing but you know if you keep taking
620:05 - the more verbose approach all the time
620:06 - it might actually become less readable
620:08 - certainly once your regular Expressions
620:10 - get this big instead of this big so
620:12 - let's save space where we can and I
620:14 - would argue that this is pretty
620:15 - reasonable so long as you're in the
620:17 - habits of reading regular expressions
620:19 - and know that question mark does not
620:21 - mean a literal question mark but it
620:22 - means zero or one of the thing before I
620:25 - think we've effectively made the S
620:27 - optional here now what else can I do
620:30 - well suppose we want to tolerate the www
620:33 - dot which may or may not be there but it
620:36 - will work if you go to a browser I could
620:38 - do this www dot uh wait I want a
620:42 - backslash there so I don't repeat the
620:44 - same mistake as before but this is no
620:46 - good either because I want to tolerate
620:48 - www being there or not being there and
620:51 - now I've just required that it be there
620:53 - but I think I can take the same approach
620:56 - any recommendations how do I make the
620:58 - www dot optional just to hammer this
621:00 - home
621:01 - we can like group uh make a square and
621:06 - question mark perfect so question mark
621:09 - is the short answer again but we have to
621:11 - be a little smarter this time as Maria's
621:13 - noted we need parentheses now because if
621:15 - I just put a question mark after the dot
621:17 - that just means the dot is optional and
621:20 - that's wrong because we don't want the
621:21 - user to type in
621:23 - www.twitt ER we want the dot to be there
621:27 - or just not at all with no www so we
621:30 - need to group this whole thing together
621:31 - put a parenthesis there and then a
621:34 - parenthesis not after the third W after
621:36 - the dot so that that whole thing is
621:39 - either there or it's not there and what
621:42 - else could we still do here you know
621:44 - there's going to be one other thing we
621:46 - should tolerate and it's been said
621:47 - before and I'll pluck this one off what
621:48 - about the protocol like what if the user
621:51 - just doesn't type or doesn't copy paste
621:53 - the HTTP colon slash or an https colon
621:57 - slash slash right honestly you and I are
621:59 - not in the habit generally of even
622:01 - typing the protocol anymore nowadays you
622:04 - just let the browser figure it out for
622:05 - you and automatically add it instead so
622:09 - this one's going to look like more of a
622:10 - mouthful but if I want this whole thing
622:12 - here in blue to be optional it's
622:15 - actually the same solution as Maria
622:17 - offered a moment ago I'm going to go
622:19 - ahead and put a parenthesis over here
622:21 - and a parenthesis after the two slashes
622:23 - and then a question mark so as to make
622:27 - that whole thing optional as well and
622:29 - this is okay it's totally fine to make
622:31 - this whole thing optional or inside of
622:35 - it this little thing just the S optional
622:37 - as well so long as I'm applying the same
622:39 - principles again and again either on a
622:41 - small scale or a bigger scale it's
622:43 - totally fine to Nest one of these inside
622:46 - of the other
622:48 - questions now on any of these
622:51 - refinements
622:52 - to this parsing this analyzing of
622:55 - Twitter what if we put a vertical bar
622:58 - besides this www dot what if we use a
623:02 - vertical bar there so we could do
623:04 - something like that too we could do
623:06 - something like this uh instead of the
623:09 - question mark I could do www dot or
623:12 - nothing and just leave that in the
623:14 - parentheses that too would be fine I
623:17 - personally tend not to like that because
623:18 - it's a little less obvious to me wait a
623:20 - minute is that deliberate or did I
623:22 - forget to finish my fault by putting
623:23 - something after the vertical bar but
623:25 - that too would be allowed there as well
623:28 - if that's what you mean other questions
623:30 - on where we left things here where we
623:32 - made the protocol optional too
623:35 - um
623:38 - inside we have another product that says
623:41 - to deal with each other if you have
623:43 - parentheses inside of parentheses that
623:46 - too is totally fine and indeed that
623:48 - should be one of the reassuring lessons
623:51 - today as complicated it is each of these
623:53 - regular Expressions has admittedly
623:55 - gotten I'm just applying the exact same
623:57 - principles in the exact same syntax
623:59 - again and again so it's totally fine to
624:02 - have parentheses inside of parentheses
624:03 - if they're each solving different
624:05 - problems and in fact the lesson I would
624:07 - really emphasize the most today is that
624:09 - you will not be happy if you try to
624:12 - write out a whole complicated regular
624:15 - expression all at once like if you're
624:17 - anything like me you will fail and you
624:19 - will have trouble finding the mistake
624:21 - because my God look at these things they
624:23 - are even to me all these years later
624:24 - cryptic the better way I would argue
624:27 - whether you're new to programming or as
624:29 - old to it as I am is to just take these
624:32 - baby steps these incremental steps where
624:34 - you do something simple you make sure it
624:36 - works you add one more feature make sure
624:38 - it works add one more feature make sure
624:40 - it works and hopefully by the end
624:42 - because you've done each of those steps
624:43 - one at a time the whole thing will make
624:46 - sense to you but you'll also have gotten
624:48 - each of those steps correct
624:50 - um at each turn so please do avoid the
624:54 - inclination to try to come up with long
624:57 - sophisticated regular Expressions all at
624:58 - once because it's just not a good use of
625:00 - a time if you then stare at it trying to
625:02 - find a mistake that you could have
625:04 - caught if you did things more
625:05 - incrementally instead all right there
625:07 - Still Remains arguably at least one
625:09 - problem with this solution in that even
625:11 - though I'm calling re.sub to substitute
625:14 - the URL with nothing quote unquote I
625:17 - then on my final line of code line six
625:19 - I'm just blindly assuming that it all
625:21 - worked and I'm going to go ahead and
625:22 - print out the username but what if the
625:25 - user if I clear my screen here and run
625:26 - python of twitter.pi doesn't even type a
625:29 - Twitter URL what if they do something
625:30 - like https colon
625:33 - www.google.com like completely
625:35 - unrelatedly for whatever reason enter
625:38 - that is not their Twitter username so we
625:41 - need to have some conditional logic I
625:43 - would argue so that for this program's
625:45 - sake we're only printing out or in a
625:48 - back-end system we're only saving into
625:50 - our database or a CSV file the use
625:52 - username if we actually matched the
625:55 - proper pattern so rather than use re.sub
625:58 - which is useful for cleaning up data as
626:01 - we've done here to get rid of something
626:03 - we don't want there why don't we go back
626:05 - to re.search where we began today and
626:09 - use it to solve the same problem but in
626:11 - a way that's conditional whereby I can
626:13 - confidently say yes or no at the end of
626:15 - my program here's the username or here
626:18 - it is not so let me go ahead now and
626:20 - I'll clear my terminal window here I'm
626:22 - going to keep most of the I'm going to
626:24 - keep the first two lines the same where
626:26 - I import re and I get the URL from the
626:28 - user but this time let's do this let's
626:31 - this time search for using re.search
626:34 - instead of re.sub the following I'm
626:36 - going to start matching at the beginning
626:37 - of the URL of the string https question
626:41 - mark to make the S optional colon slash
626:44 - slash then I'm going to make my www
626:48 - optional by putting that in question
626:50 - marks there then a Twitter com with a
626:53 - literal dot there so I'll stay ahead of
626:55 - that issue too then a slash and then
626:58 - well this is where David J Malin is
627:01 - supposed to go how do I detect this well
627:03 - I think I'll just tolerate anything at
627:05 - the end of the URL here all right dollar
627:08 - sign at the very end close quote for the
627:11 - moment I'm going to stipulate that we're
627:12 - not going to worry about question marks
627:14 - at the end or hashes like for fragment
627:16 - IDs and URLs we're going to assume for
627:18 - Simplicity now that the URL just ends
627:20 - with the username alone now what am I
627:23 - going to do well I want to search for
627:24 - this URL specifically and I'm going to
627:26 - ignore K so re.ignorecase
627:29 - applying that same lesson learned from
627:31 - before
627:33 - re.search recall will return to you the
627:36 - matches you've captured well what do I
627:38 - want to capture well I want to capture
627:40 - everything to the right of the
627:42 - twitter.com URL here so let me surround
627:45 - what should be the user's username with
627:48 - parentheses not for making them optional
627:50 - but to say capture this of characters
627:53 - now ari.search recall returns an answer
627:56 - matches will be my variable name again
627:58 - but I could call it anything I want and
628:00 - then I can do this if matches now I know
628:04 - I can do this let's print out the format
628:06 - string username colon and then uh what
628:11 - do I want to print out well I think I
628:12 - want to print out matches dot group one
628:15 - for my matched username
628:17 - all right so what am I doing just to
628:19 - recap line one I'm importing the library
628:21 - line two I'm getting the URL from the
628:23 - user so nothing new there line five I'm
628:27 - searching the user's URL as indicated
628:30 - here is the second argument for this
628:32 - regular expression this pattern I have
628:35 - surrounded the dot plus with parentheses
628:39 - so that they are captured ultimately so
628:42 - I can't extract in this final scenario
628:44 - the user's username if I indeed got a
628:47 - match and matches is non none it is
628:51 - actually containing some match then and
628:53 - only then print out username in this way
628:56 - let me try this now if I run python of
628:58 - twitter.pi and type in HTTPS colon
629:01 - www.google.com now nothing gets printed
629:05 - so I've at least solved the mistake we
629:07 - just saw where I was just assuming that
629:09 - my code worked now I'm making sure that
629:11 - I have searched for and found the
629:14 - Twitter URL prefix all right well let's
629:16 - run this for real now python of
629:18 - twitter.pi https colon slash slash
629:21 - twitter.com
629:22 - davidjmalen but note I could use HTTP I
629:26 - could use www I'm just going to go ahead
629:28 - here and hit enter
629:30 - huh none
629:33 - what has gone wrong
629:37 - this one's a bit more subtle
629:39 - but why does matches dot group one
629:43 - contain nothing wait a minute let me
629:45 - maybe I maybe I did this wrong maybe
629:47 - maybe do we need the www let me run it
629:50 - again so here we go https colon slash
629:52 - let's add it
629:53 - www.twitter.com David J malen all right
629:57 - enter ho ho ho ho
630:00 - what is going on we have to save group I
630:05 - have to say group two well wait all
630:07 - right because we had the the sub domain
630:09 - was optional and to make it optional I
630:12 - needed to use parentheses here and so I
630:15 - then said zero or one okay so that means
630:17 - that actually I'm unintentionally but by
630:21 - Design capturing the www dot or none of
630:24 - it if it wasn't there before but I have
630:27 - a second match over here because I have
630:28 - a second set of parentheses so I think
630:30 - yep let me change matches group one to
630:32 - matches group two and lets you run this
630:34 - python of twitter.pi https colon slash
630:37 - www.twitter let's do this uh twitter.com
630:41 - David J Malin
630:43 - enter and now we've got access to the
630:47 - username let me go ahead and tighten it
630:49 - up a little bit further uh if you like
630:51 - our new friend
630:53 - it's hard not to like if we like our old
630:55 - friend The Walrus uh operator let's go
630:57 - ahead and add this just to tighten
630:59 - things up let me go back to BS code here
631:01 - and let me get rid of the unnecessary
631:02 - condition there and combine it up here
631:04 - if matches equals that but let's change
631:07 - the single assignment operator to the
631:09 - Wallace operator now I've tightened
631:10 - things up further but I bet I bet I bet
631:13 - there might be another solution here and
631:16 - indeed it turns out that we can come
631:19 - back to this final set of syntax recall
631:23 - that when we introduced these
631:24 - parentheses we did it so that we could
631:25 - do a or b for instance with the vertical
631:28 - bar though you can even combine more
631:29 - than just one bar we use the group to
631:32 - combine ideas like the www dot and then
631:35 - there's this admittedly weird syntax at
631:37 - the bottom here up until now not used
631:40 - there is a non-capturing version of
631:43 - parentheses if you want to use
631:44 - parentheses logically because you need
631:46 - to but you don't want to bother
631:48 - capturing the result and this would
631:50 - arguably be a better solution here
631:52 - because yes if I go back to vs code I do
631:55 - need to surround the www dot with
631:58 - parentheses at least as I've written my
632:00 - regex here because I wanted to put the
632:02 - question mark after it but I don't need
632:04 - the www dot coming back in fact let's
632:07 - only extract the data we care about just
632:09 - so there's no confusion down the road
632:11 - for me or my colleagues or my teachers
632:13 - so what could I do well the syntax per
632:17 - this slide is to use a question mark and
632:19 - a colon immediately after the open
632:22 - parenthesis it looks weird admittedly
632:24 - those of you who have prior programming
632:26 - experience might recognize the syntax
632:28 - from ternary operators doing an if else
632:30 - all in one line a question mark colon at
632:34 - the beginning of that parenthetical
632:36 - means yes I'm using parentheses to group
632:39 - these things together but no you do not
632:41 - need to capture them instead so I can
632:44 - change my code back now to matches.group
632:46 - one I'll clear my screen here run python
632:49 - of twitter.pi I'll again run here https
632:52 - colon
632:53 - twitter.com
632:55 - davidjmalen with or without the www and
632:59 - now I indeed get back that username
633:02 - any questions then
633:04 - on these final
633:06 - techniques
633:09 - so first of all could we move the carrot
633:12 - right at the beginning of Twitter and
633:14 - then just start reading from there and
633:16 - then get rid of everything else before
633:18 - that the kind of WWE
633:20 - uh issues that we had and then my second
633:23 - question is how would we
633:25 - um use kind of I guess it either a list
633:28 - or a dictionary to to sort the.com kind
633:32 - of thing if because we have core UK and
633:35 - that kind of sorry how would we bring
633:37 - that into uh the re function a good
633:40 - question but no if I move the carrot
633:43 - before twitter.com and throw away the
633:45 - protocol and the www then the user is
633:48 - going to have to type in literally
633:50 - twitter.com
633:51 - username they can't even type in that
633:54 - other stuff so that would be a
633:55 - regression a step back as for the.com
633:58 - and the dot org and Dot edu and so forth
634:01 - the short answer is there's many
634:02 - different solutions here if I wanted to
634:04 - be stringent about.com and suppose that
634:07 - Twitter probably owns multiple domain
634:09 - names even though they tend to use just
634:11 - this one suppose they have something
634:14 - like dot org as well you could use more
634:16 - parentheses here and do something like
634:17 - this Com or org I'd probably want to go
634:20 - and add a question mark colon to make it
634:23 - non-capturing because I don't care which
634:25 - it is I just want to tolerate both
634:27 - alternatively we could capture that we
634:30 - could do something like this where we do
634:32 - dot plus so as to actually capture that
634:35 - and then we could do something like this
634:37 - if matches dot group one now equals
634:42 - equals com then we could support this so
634:45 - you could imagine factoring out the
634:47 - logic just by extracting the top level
634:49 - domain or TLD and then just using python
634:52 - code maybe a list maybe a dictionary to
634:54 - validate elsewhere outside of the regex
634:56 - if it's in fact what you expect for now
634:59 - though we kept things simple we focused
635:01 - only on the.com in this case let's make
635:04 - one final change to this program so that
635:05 - we're being a little more specific with
635:07 - the definition of a Twitter username it
635:09 - turns out that we're being a little too
635:11 - generous over here whereby we're
635:12 - accepting one or more of any character I
635:15 - checked the documentation for Twitter
635:16 - and Twitter only supports letters of the
635:19 - alphabet A through Z numbers zero
635:22 - through nine or underscore so not just
635:24 - dot which is literally anything so let
635:27 - me go ahead and be more precise here at
635:29 - the end of my string let me go ahead and
635:31 - say this set of symbols in square
635:34 - brackets I'm going to go ahead and say A
635:36 - through Z 0 through 9 and an underscore
635:40 - because again those are the only valid
635:41 - symbols I don't need to bother with an
635:43 - uppercase a or a lowercase C because
635:44 - we're using re. ignore case over here
635:47 - but I want to make sure now that I
635:49 - tolerate not only one or more of these
635:52 - symbols here but also maybe some other
635:54 - stuff at the end of the URL I'm now
635:56 - going to be okay with there being a
635:58 - slash or a question mark or a hash at
636:00 - the end of the URL all of which are
636:02 - valid symbols in a URL but I know from
636:04 - the Twitter's documentation are not part
636:07 - of the username all right now I'm going
636:09 - to go ahead and run python of twitter.pi
636:11 - one final time typing in HTTPS colon
636:14 - slash slash twitter.com David J malen
636:18 - maybe with maybe without a trailing
636:20 - slash but hold hopefully with my biggest
636:21 - fingers crossed here I'm going to go
636:23 - ahead now and hit enter and thankfully
636:26 - my username is indeed David J Malin so
636:28 - what more is there in the world of
636:30 - regular expressions and this own Library
636:32 - not just re.search and also re.sub
636:34 - there's other functions too there's
636:36 - re.split via which you can split a
636:39 - string not using a specific character or
636:41 - characters like a comma and a space but
636:43 - multiple characters as well and there's
636:46 - even functions like re.find all which
636:48 - can allow you to search for multiple
636:51 - copies of the same pattern in different
636:52 - places in a string so you can perhaps
636:54 - and manipulate more than just one so at
636:57 - the end of the day now you've really
636:58 - learned a whole other language like that
637:01 - of regular expressions and we've used
637:03 - them in Python but these regular
637:04 - Expressions actually exist in so many
637:06 - languages too among them JavaScript and
637:09 - Java and Ruby and more so with this new
637:12 - language even though it's admittedly
637:13 - cryptic when you use it for the first
637:15 - time you have this newfound ability to
637:17 - express these patterns that again you
637:19 - can use to validate data to clean up
637:21 - data or even extract data and from any
637:24 - data set you might have in mind that's
637:26 - it for this week we will see you next
637:28 - time
637:35 - [Music]
637:47 - foreign
637:50 - [Music]
637:56 - this is cs50's Introduction to
637:58 - programming with python my name is David
638:00 - Malin and this is our week on object
638:02 - oriented programming or oop it turns out
638:05 - that in the world of programming there's
638:06 - different paradigms of programming
638:08 - languages there's different ways of
638:10 - solving problems with code and it's a
638:12 - little hard to see this at first if
638:13 - you've only learned one language but
638:15 - over time if and when you learn other
638:17 - languages besides python you'll start to
638:19 - notice certain patterns and certain
638:21 - capabilities of some languages but not
638:23 - another thus far within the world of
638:25 - python you and I have largely been
638:27 - writing code that's procedural in nature
638:29 - whereby we're writing procedures we're
638:31 - writing functions and we're sort of
638:33 - doing things top to bottom everything is
638:35 - step by step by step as you would expect
638:37 - in general from an algorithm but along
638:39 - the way we've actually dabbled in
638:41 - another Paradigm known as functional
638:43 - programming with python whereby we've
638:45 - been able to pass functions around we
638:47 - even had an anonymous function some
638:49 - weeks ago and that's evidence of
638:52 - features of a functional programming
638:54 - language even though we've just
638:54 - scratched this surface thereof today we
638:57 - focus on another Paradigm and this one
638:59 - in more detail namely object oriented
639:01 - programming and now while some of you
639:03 - might have prior programming experience
639:04 - and have learned languages like Java
639:06 - which are by Design fundamentally object
639:08 - oriented python indeed allows you a bit
639:11 - of flexibility when it comes to how you
639:13 - solve problems with code but it turns
639:15 - out oop object-oriented programming is a
639:18 - pretty compelling solution to problems
639:20 - that you invariably encounter as your
639:22 - programs get longer larger and more
639:25 - complicated so indeed oop for our
639:27 - purposes is going to be a solution to a
639:29 - problem that builds on so many of the
639:31 - lessons passed so let's go ahead and do
639:33 - this let's start by writing a program
639:35 - very procedurally by opening up vs code
639:38 - here I'm going to go ahead and create a
639:40 - program called student.pi and in this
639:43 - program I want to do something
639:44 - relatively simple initially as we might
639:47 - have done some weeks ago now where I
639:49 - just ask a user for their name and maybe
639:52 - in the context of the Harry Potter
639:53 - Universe their house and just print out
639:56 - where that student is from and let's
639:58 - gradually enhance this program by adding
640:00 - more and more features to it and see if
640:02 - we don't stumble upon problems that up
640:05 - until now we might not have had very
640:06 - elegant well-designed solutions to but
640:08 - if we introduce explicitly
640:10 - object-oriented programming as a
640:12 - programming technique I bet we can clean
640:14 - up our code and set the stage for
640:16 - writing even more sophisticated programs
640:18 - longer programs down the line so in
640:20 - student.pi let me go ahead and do a name
640:22 - variable setting it equal to the return
640:25 - value of input and just prompt the user
640:27 - for their name like this and then let me
640:29 - go ahead and do the same for a house
640:31 - variable and prompt the user for their
640:33 - house using input like this and let's do
640:35 - something super simple now let's just go
640:37 - ahead and print out an F string that
640:40 - says something like name from house just
640:43 - so that I can confirm that the contents
640:45 - of these variables are indeed as I
640:46 - expect I'm not going to do any error
640:48 - checking or trimming or anything like
640:49 - that for now I'm really just going to
640:50 - spit back out whatever the user just
640:52 - typed in all right let me go ahead and
640:54 - run python of student and Dot Pi let's
640:56 - use our go to like Harry as in Harry
640:59 - Potter from Gryffindor and when I hit
641:01 - enter now let's see if I see that Harry
641:03 - from Gryffindor is indeed the case all
641:06 - right so I think we have a working
641:07 - program at this point but let's now
641:09 - introduce some of those Lessons Learned
641:11 - way back from week zero where we started
641:12 - writing our own functions not
641:14 - necessarily because it solves the
641:16 - problem more correctly I dare say this
641:18 - is correct as is but it begins to give
641:21 - us building blocks that we can extend so
641:23 - as to solve more complicated programs so
641:26 - let me go back up to student.pi and
641:28 - let's go ahead now and do this let's put
641:30 - the entire logic I just wrote inside of
641:32 - our typical method called Main and let
641:34 - me indent those three lines so that at
641:36 - least they're now combined into one main
641:38 - method but instead of using input on
641:41 - line two and input on line three why
641:44 - don't we go ahead and assume for the
641:45 - moment that we've got some function
641:46 - called get name in the world and let's
641:49 - go ahead and assume we've got another
641:50 - function like get house in the world
641:52 - that don't take parameters but their
641:54 - purpose in life is by by their names
641:55 - going to be to get the user's name and
641:58 - to get their users house respectively
642:00 - and then I'm going to print out the
642:01 - exact same F string as before I of
642:04 - course need to implement these functions
642:05 - now so let me go lower in my file and
642:07 - Define a function called get underscore
642:09 - name nothing in these parentheses
642:11 - because it's not going to take a
642:12 - parameter and I'm going to go ahead and
642:14 - do something like name equals input
642:16 - quote unquote name just like before and
642:18 - then I'm going to go ahead and return
642:19 - name so it's a super simple function but
642:22 - it's a an abstraction I now have a
642:24 - function called get name whose
642:26 - implementation details I don't have to
642:27 - care about anymore I just know that the
642:29 - function exists and I can tighten this
642:31 - up in fact I don't really need a name
642:33 - variable on line eight if I'm
642:34 - immediately going to return that same
642:36 - name variable on line 9. so let me just
642:38 - tighten this up a little bit even though
642:40 - it doesn't change the functionality and
642:41 - just immediately return the return value
642:43 - of the inputs function call here let's
642:47 - do something very similar now for get
642:50 - house which will similarly take no
642:51 - arguments I'm going to go ahead and
642:53 - return the return value of input this
642:55 - time prompting the user for their house
642:57 - and they need one final detail at the
642:59 - very bottom let's continue our habit of
643:01 - doing if the name of this file equals
643:04 - equals quote unquote main then let's go
643:07 - ahead and actually call Main and recall
643:09 - that we have that in place so that if
643:11 - this eventually becomes part of a module
643:12 - a library of sorts I don't accidentally
643:15 - call Main blindly I only do it if I mean
643:18 - to run main from the command line on
643:21 - this file all right so if I didn't make
643:23 - any mistakes here let me go ahead and in
643:25 - my terminal window again run python of
643:27 - student.pi enter let's type in Harry
643:30 - enter let's type in Gryffindor enter and
643:33 - we're set Harry from Gryffindor seems to
643:36 - still be working so we haven't really
643:38 - solved the problem anymore correctly but
643:41 - I've laid the foundation to maybe now do
643:43 - some more interesting things because
643:45 - I've had these building blocks in place
643:47 - all right but let me propose that we
643:50 - could be doing this a little bit
643:52 - differently get name get house is fine
643:54 - but at the end of the day I'm really
643:56 - trying to get a student from the user I
643:58 - want their name and their house not just
644:00 - one or the other so maybe it would be a
644:03 - little cleaner still to define a
644:05 - function called get student and let get
644:08 - student do all of this work for us now
644:10 - theoretically get student could call get
644:13 - name and could call get house but
644:15 - because these functions are so short I
644:16 - think I'm okay with justifying one
644:19 - function called get student that
644:20 - similarly won't take any arguments but
644:22 - it's going to do two things it's going
644:24 - to get this Student's name by prompting
644:26 - them with input as before and it's going
644:28 - to get the student's house by also
644:29 - prompting them as before and then
644:32 - now hmm I want to return the student but
644:36 - I think I might have painted myself into
644:37 - a corner here because I now have two
644:40 - variables name and house and yet up
644:42 - until now we've pretty much returned one
644:44 - or the other we've returned one value so
644:47 - any suggestions for how we can perhaps
644:49 - solve this problem that I just created
644:51 - for myself whereby I want to return
644:53 - really a student but I currently have a
644:57 - name variable and a house variable I
645:00 - minimally like to return both of those I
645:02 - believe that we can return a dictionary
645:04 - include the name and the house yeah so
645:07 - we absolutely could return a dictionary
645:09 - addict object in Python whereby maybe
645:11 - one key is name one key is house and the
645:14 - values thereof are exactly the values of
645:16 - these variables so we could totally do
645:17 - that uh I worry that that might be
645:19 - getting a little complicated I wonder if
645:21 - there's a simpler way instead any other
645:24 - instincts even if you're not sure it
645:25 - would work written both name and house
645:28 - return both name and house I I like the
645:30 - sound of that it sounds simple I don't
645:32 - have to figure around what a dictionary
645:33 - is going to look like and in fact this
645:35 - too would be a valid approach even if
645:37 - you've not seen this before it turns out
645:39 - in Python that you can kind of return
645:41 - multiple values but that's a bit of a
645:44 - white lie or we could take Muhammad's
645:46 - approach of actually returning a
645:47 - dictionary and putting multiple Keys
645:49 - therein so here again we have yet
645:50 - another example of how you can solve the
645:52 - same problem in at least two ways and I
645:54 - dare say we're about to see even more so
645:57 - one way you could solve this problem
645:58 - whereby you want to return multiple
646:01 - values would be to do something like
646:04 - this I could go ahead and literally
646:06 - return not just name but I could put a
646:09 - comma and also return house this is not
646:11 - necessarily something you can do in
646:12 - other languages if you have programs in
646:14 - other languages before it depends on the
646:16 - language but it looks like thanks to
646:19 - this comma maybe I can in fact return
646:21 - two values is actually proposed well if
646:24 - I'm returning two values in this way on
646:26 - line 10 how do I get both values at the
646:29 - same time well there's a couple of ways
646:30 - let me go up to my main function I know
646:34 - minimally I'm going to have to change
646:35 - the get name and get house to get
646:37 - student but what am I going to store the
646:39 - return value in I think I could actually
646:42 - do this and we have seen this technique
646:44 - before where you can unpack so to speak
646:47 - sequences of values that are coming back
646:49 - and indeed consider this to be exactly
646:51 - that name comma house is some kind of
646:53 - sequence that I'm returning of values
646:55 - name comma house so if I want to unpack
646:57 - those and store the return values in two
646:59 - separate variables I can in fact use the
647:02 - commas on the left hand side of my
647:04 - assignment operator the equal sign to do
647:06 - just that now to be clear I don't need
647:08 - to call these variables name and house
647:11 - here I could simplify this and use just
647:13 - n here and H here and then I could
647:15 - return just n and H but I would argue
647:19 - that's not very clear to the reader as
647:22 - to what's going on so I think in this
647:24 - case even though it's a coincidence that
647:25 - I've used the same variable names in get
647:27 - student and get Main and in Maine it's a
647:30 - little more readable to someone like me
647:31 - so I'm going to leave it as is
647:33 - well let's go ahead and see now if this
647:35 - works let me clear my screen down here
647:37 - and run python of student.pi enter let's
647:39 - again type in Harry let's again type in
647:41 - Gryffindor enter and voila we still see
647:44 - that Harry is from Gryffindor but what
647:47 - are we actually doing here what are we
647:49 - actually doing by returning this value
647:51 - well it turns out that what we've just
647:54 - done is used a tuple a tuple is another
647:57 - type of data in Python that's a
648:00 - collection of values X comma y or X
648:02 - comma y comma Z it's similar in spirit
648:05 - to a list in that sense but it's
648:07 - immutable it's not mutable now what does
648:09 - that mean a list as we've seen it before
648:11 - is a data structure in Python that you
648:13 - can change the values of you can go into
648:15 - bracket zero for the first location and
648:18 - change the value there you can go to
648:19 - bracket one bracket two bracket three
648:21 - and actually change the values in lists
648:23 - but if you have no intention of changing
648:25 - the values of variables and you want to
648:27 - return effectively multiple values you
648:29 - don't have to even return it as a list
648:31 - you can return it as a tuple and instead
648:33 - just by using a comma and it turns out
648:36 - we can make explicit that here's the
648:38 - white lie I'm not actually returning two
648:41 - values per se whenever you use a comma
648:43 - in this way on line 9 you're actually
648:45 - returning one value which is a tuple
648:49 - inside of that Tuple now are two values
648:51 - so it's similar in spirit to returning
648:53 - one list with two things here I'm
648:55 - returning one Tuple with two things and
648:58 - the mere fact that I've used a comma and
649:00 - nothing else tells python that I indeed
649:02 - want to return a tuple but there's more
649:03 - explicit syntax that we can use instead
649:05 - I can actually more verbosely put
649:07 - explicit parentheses around the values
649:11 - of this Tuple just to make more clear to
649:13 - me to the reader that this isn't two
649:15 - values per se this is one value with two
649:17 - things inside of it and what I can
649:19 - actually do then too is I don't have to
649:20 - unpack this up here so to speak I can
649:23 - actually go up here and maybe give a
649:24 - more apt name like student and I can
649:27 - name the value or rather name the
649:29 - variable in which I'm storing the return
649:31 - value of get student as quote unquote
649:33 - student so maybe this is a little better
649:36 - design now because I'm sort of
649:37 - abstracting away what a student is it's
649:40 - implemented at the moment as a tuple
649:42 - with two values but at least now I have
649:44 - a variable called what I mean a student
649:47 - but there's going to be a catch on line
649:49 - three I still want to print out that
649:51 - Student's name and their house but I
649:53 - don't have a name variable anymore and I
649:55 - don't have a house and I also don't have
649:57 - a dictionary as was proposed earlier so
649:59 - I can't even go at those keys by name
650:03 - but what a tuple is it's very similar in
650:05 - spirit to a list but it is indeed just
650:07 - immutable and what I mean by that is I
650:10 - can still index into it numerically by
650:12 - saying student square bracket zero for
650:16 - the item in the first location in that
650:18 - Tuple and then over here instead of
650:19 - house I can say student bracket one
650:21 - student bracket one is going to give me
650:23 - the second location in that Tuple let me
650:26 - go ahead and clear my terminal window
650:27 - again run python of student.pi let's
650:30 - type in Harry let's type in Gryffindor
650:32 - enter and we still have some working
650:35 - code let me pause here now and see if
650:38 - there are any questions on this
650:40 - technique of returning a tuple and
650:43 - indexing into it in this way I guess
650:46 - that's like a actual use case where you
650:49 - would use a tuple versus you know a list
650:52 - or something else that's similar it's a
650:54 - really good question when would you use
650:55 - a tuple versus a list when you want to
650:57 - program defensively or in general when
651:00 - you know that the values in this
651:01 - variable shouldn't change so why would
651:03 - you use a data type that allows them to
651:05 - be changed it just invites mistakes bugs
651:08 - down the line either by you or
651:10 - colleagues who are interacting with your
651:12 - code so Tuple is just another way where
651:14 - you can increase the probability of
651:16 - correctness by just not letting anyone
651:18 - yourself included change the contents
651:20 - they're in so it's just another tool in
651:23 - your toolkit but let's make clear then
651:25 - what I mean by immutable again I claim
651:27 - that immutable means that you cannot
651:29 - change the value well let's go ahead and
651:31 - try to do this let me go ahead ahead and
651:33 - run this program once more as is
651:35 - pythonofstudent.pi let me go ahead and
651:38 - type in for instance how about padma's
651:43 - name and I'm going to go ahead and say
651:44 - that Padma is in Gryffindor as in the
651:46 - movies and we see Padma from Gryffindor
651:48 - but technically I went down this rabbit
651:50 - hole and looking at Harry Potter more
651:52 - closely technically in the books Padma I
651:55 - believe was from Ravenclaw so this is
651:57 - actually a mistake or an inconsistency
651:58 - between the movies and the books let's
652:00 - see if we can't fix this inconsistency
652:02 - in our code so how about we do this if
652:05 - the student's name that's inputted
652:07 - equals Padma why don't we override
652:09 - whatever the uh whatever the house is
652:11 - and change it to be properly Gryffindor
652:14 - let me go ahead and do if students now
652:18 - if I want to get at padma's name I'm
652:19 - going to have to do student bracket zero
652:21 - I have to know what location the name is
652:23 - in in this Tuple but if that in value
652:26 - equals equals Padma let's go ahead with
652:28 - this if statement and make a change
652:30 - let's change the students for uh at one
652:33 - value so the second value if we're zero
652:35 - indexing let's change it to be another
652:37 - house in the World of Harry Potter
652:38 - called Ravenclaw so I'm just fixing
652:42 - maybe the user's input they watch the
652:43 - movie so they type in Padma Gryffindor
652:45 - but in the books it was Padma from
652:48 - Ravenclaw all right let me go ahead and
652:50 - go down to my terminal window clear my
652:52 - terminal and do python of student.pi
652:55 - enter I'm going to do Harry as well as
652:57 - Gryffindor just to demonstrate that that
652:59 - is still working as intended Let Me
653:01 - Clear My screen again though and run
653:03 - python of student.pi on Padma and I'll
653:06 - put her2 in Gryffindor as in the movies
653:07 - and hit enter and now I just see a big
653:10 - mess of errors on the screen some kind
653:13 - of exception has been thrown and indeed
653:15 - a type error has happened I'm using a
653:17 - data type wherein there's an error and
653:19 - what is that error well Tuple object
653:22 - does not support item assignment it's a
653:25 - little arcanely Express that is that's
653:27 - not really very user friendly but if you
653:29 - think about what those words mean Tuple
653:31 - object does not support item assign so
653:33 - assignment is copying from right to left
653:35 - so somehow that's invalid and here is a
653:37 - manifestation of the immutability of
653:41 - tuples you cannot change location 0 or 1
653:44 - or anything inside that is a feature
653:46 - that is the design of a tuple so if I
653:50 - want to override that I think I'm going
653:51 - to have to use a different type of data
653:53 - that we've used before namely a list and
653:55 - that's fine if you want to enable
653:57 - yourself and colleagues using your code
654:00 - to change the contents of that container
654:02 - well we can go ahead and return not a
654:05 - tuple using explicit parentheses or no
654:07 - parentheses just the comma but I can use
654:10 - square brackets and if I'm using square
654:12 - brackets on the left and the right this
654:14 - is indeed explicitly a list same idea
654:17 - but it's mutable that is to say you can
654:19 - change the contents of a list so making
654:22 - no other changes just returning a list
654:24 - with square brackets instead of a tuple
654:27 - with parentheses or just the comma let
654:29 - me go ahead now and run python of
654:31 - student.pi enter let me type in Harry
654:34 - and Gryffindor again that's still
654:36 - working good to see let me run this once
654:39 - more and type in Padma and Gryffindor as
654:42 - in the movies but no now we've corrected
654:45 - it to be Padma from Ravenclaw as in the
654:47 - books instead
654:49 - any questions now on tuples versus lists
654:53 - or this idea of immutability versus
654:55 - mutability
654:57 - it can be used a nested tackle in Python
655:01 - like a nested list
655:03 - absolutely you can have not only nested
655:06 - lists in Python where one of the
655:07 - elements in a list could be another list
655:09 - so you have some square brackets out
655:11 - here you might have some other square
655:12 - brackets inside you can absolutely do
655:14 - the same with a tuple as well there's no
655:17 - constraint on the types of values you
655:18 - can put in there we've not had occasion
655:20 - to do that in this case I'm just
655:22 - returning a simple uh simple Tuple with
655:25 - two elements but yes you could
655:26 - absolutely do that too other questions
655:28 - on tuples versus lists okay for example
655:32 - um when I see this websocket um is it
655:35 - many use for the list oh a really good
655:38 - question uh sort of so when you create a
655:42 - value like a list you use square
655:43 - brackets and that would indeed be a
655:45 - visual indicator that this is definitely
655:46 - a list uh if you instead see parentheses
655:49 - that's a visual indicator when creating
655:51 - a value that it's definitely a tuple
655:53 - however somewhat confusingly both lists
655:57 - and tuples use square brackets when you
656:00 - access the contents of them when you
656:02 - index into them at location zero or
656:04 - location one you always use square
656:07 - brackets so that's the distinction there
656:09 - good question allow me to propose now if
656:12 - I made that we solve this problem yet
656:13 - another way and let's see if we're
656:15 - either making things better or for worse
656:17 - than us recall that dictionaries or dict
656:20 - objects also exist in python and a
656:22 - dictionary is this collection of keys
656:24 - and values and the upside in particular
656:26 - of a dictionary is that they have better
656:28 - semantics right you don't just have to
656:29 - assume that a name is always going to be
656:31 - at location zero house is always going
656:33 - to be at location one I mean that's the
656:35 - kind of thing especially if you had
656:36 - three four or more values eventually you
656:39 - or someone is going to get confused and
656:41 - forget what the order is and you're
656:43 - going to write buggy code so a
656:45 - dictionary is a little more powerful in
656:47 - that you can semantically associate Keys
656:49 - like little descriptions with the values
656:51 - those keys and those values respectively
656:54 - so let me go ahead and do this and we
656:55 - can do this in a few different ways but
656:57 - let me propose that we focus on get
656:59 - student here and let's go ahead and do
657:01 - this let me go ahead and delete the
657:05 - implementation of get student as is let
657:08 - me create a student variable and
657:09 - initialize it to an empty dictionary and
657:11 - I can do that with just two curly braces
657:14 - here and then let me go ahead and set
657:16 - two keys inside of that dictionary
657:18 - inside of the student there will be
657:20 - quote unquote a name key and the value
657:22 - of that is going to be whatever the
657:24 - return value of input is when I prompt
657:26 - the user for their name and then the
657:28 - house key inside of that same student
657:30 - dictionary is going to be the return
657:32 - value of whatever the user types in for
657:34 - their house and lastly I'm going to go
657:36 - ahead and in return students so now I am
657:40 - literally returning one thing still but
657:43 - this time it's a dict rather than a
657:45 - tuple rather than a list but there's
657:47 - still two things in it technically four
657:49 - things if you count the keys and the
657:51 - values but there's two key value pairs
657:53 - now my code up here is going to have to
657:55 - change a little bit and let's simplify
657:57 - this and remove for instance now the the
657:59 - Padma if statement just to focus on
658:01 - what's changing at hand and let me go
658:03 - ahead now and leave line two alone I'm
658:06 - still going to have a student variable
658:07 - that gets assigned the return value of
658:09 - get student but what I want to do here
658:12 - now is actually access the keys inside
658:16 - of that dictionary not by numeric index
658:19 - which was for tuples and lists zero and
658:21 - one but by way of the keys now normally
658:25 - I might be in the habit as I personally
658:26 - am of using double quotes quote unquote
658:29 - name inside of there and quote unquote
658:31 - house instead of there but before I even
658:34 - run this code and show you a mistake see
658:37 - an error on the screen does anyone want
658:39 - to call out what I have done wrong here
658:42 - this is just an F string I just want to
658:45 - print out the value of the name key the
658:47 - value of the house key in this
658:48 - dictionary
658:50 - button
658:52 - your your audio is a little garbled for
658:55 - us but I think I heard double quotes and
658:57 - single quotes so I'm going to assume
658:58 - that indeed you've identified precisely
659:00 - the issue I'm just going to confuse
659:02 - python right now even though this is an
659:04 - F string inside of Double quotes
659:06 - prefixed with an F I can't actually use
659:08 - my double quotes inside my double quotes
659:10 - because that's going to potentially
659:11 - confuse python indeed if I run this
659:13 - program now python of student.pi and hit
659:16 - enter I get a syntax error so the
659:18 - program didn't even run fully it just
659:20 - couldn't be understood because it got
659:21 - confused by those double quotes So the
659:24 - simplest fix here would indeed just be
659:26 - to use not double quotes but single
659:28 - quotes around the keys or conversely
659:31 - flip the double quotes on the outside to
659:33 - single quotes then use double quotes on
659:34 - the inside you just want to be
659:36 - consistent so it's subtle detail but
659:38 - again this is now specific to dictionary
659:40 - syntax this isn't fundamental to how
659:43 - we're solving this current problem at
659:45 - hand all right well let's go ahead and
659:47 - try this let me go ahead now and run
659:48 - python of student.pi let's go ahead and
659:50 - type in Harry let's type in Gryffindor
659:52 - and hopefully Harry is back from
659:54 - Gryffindor no syntax errors no other
659:57 - errors I think I'm back in business here
659:59 - and what I do like to be clear about
660:01 - using a dictionary is that it's allowing
660:04 - me just better semantics again I don't
660:06 - have to remember memorize document that
660:09 - zero is name one is house instead name
660:13 - is name and house is house it's just a
660:15 - little clear a little more expressive so
660:17 - that's generally a good thing especially
660:19 - if we stored more data about students
660:21 - than just their name in their house if
660:23 - you had three Fields four five ten
660:25 - different fields no one's going to want
660:27 - to remember or be able to remember
660:28 - forever which is zero which is one which
660:31 - is two and so forth better to introduce
660:33 - names like name and house in this case
660:36 - but but let me tighten this up further
660:38 - and indeed I'm typically in the habit of
660:40 - not introducing variables unnecessarily
660:42 - unless they make the code more readable
660:43 - and an alternative way to format the
660:46 - same code would be this strictly
660:48 - speaking I don't need to create an empty
660:50 - dictionary then add one key to it then
660:53 - add a second key to it and then return
660:55 - that dictionary I can actually
660:57 - consolidate this all into one statement
661:00 - if you will let me go ahead and do this
661:02 - let me go ahead and say name equals
661:05 - inputs return value house equals inputs
661:09 - return value and then instead of
661:10 - returning any variable name student
661:12 - which I'm going to propose doesn't need
661:13 - to exist anymore let me just create and
661:16 - return the dictionary all at once let me
661:18 - do quote unquote name in lowercase here
661:20 - and then the variable it's storing the
661:23 - user's name then quote unquote house as
661:25 - my second key the value of which is
661:27 - going to be house the variable now is
661:29 - this better maybe maybe not maybe the
661:31 - first way was a little more readable and
661:32 - that's totally fine to create variables
661:35 - if they improve the readability of of
661:37 - your code but just know that you can
661:39 - also create and return a dictionary on
661:41 - the fly like this so to speak all in one
661:43 - line and I think it's arguably pretty
661:45 - reasonable in this case why it's just
661:47 - pretty short I probably wouldn't do this
661:48 - if it got longer and longer and longer I
661:50 - might minimally then start moving my key
661:52 - value pairs to separate lines but this
661:55 - would just be a slightly more compact
661:57 - way of doing this as well but let me
661:59 - propose we do one more change let's go
662:01 - ahead and introduce that same special
662:03 - casing of Padma to fix her house from
662:06 - Gryffindor for instance to Ravenclaw how
662:08 - do we do this with dictionaries well
662:10 - dictionaries like lists are mutable you
662:13 - can change what is in them just like you
662:16 - can lists how do you do that it's just a
662:18 - little different syntactically so let's
662:20 - go back into Main and do this fix if the
662:22 - student variable has a name key that
662:26 - equals equals Padma then indented go
662:30 - ahead and change the value of the house
662:33 - key inside of that student dictionary to
662:37 - be quote unquote Ravenclaw instead so
662:40 - very similar in spirit to what we did
662:42 - with a list but instead of using
662:44 - location 0 and 1 we're much more clearly
662:47 - explicitly semantically using quote
662:49 - unquote name and quote unquote house
662:51 - because you index into lists and topples
662:54 - using numbers but you index into
662:56 - dictionaries using strings as I've done
662:59 - here all right let me go ahead and run
663:00 - python of student dot Pi we'll again do
663:03 - Harry from Gryffindor and I think all is
663:06 - well let me run it one more time this
663:08 - time with Padma who in the movies is
663:10 - from Gryffindor but should really be
663:12 - from Ravenclaw
663:14 - are any questions then on this
663:16 - progression from tuples to lists to
663:20 - dictionaries we haven't necessarily
663:22 - introduced anything new other than those
663:23 - tuples which have been available to us
663:27 - all this time but the goal at the moment
663:29 - is just to demonstrate this distinction
663:31 - among these different data types and how
663:33 - they each work a little bit differently
663:35 - so what if a combination of lists is
663:38 - there in a tuple so is the list like we
663:42 - can change the list because Tuple are
663:45 - immutable but listen correct you can
663:49 - change the contents of lists and you can
663:51 - put most anything you want in them other
663:52 - lists or strings as I've done integers
663:55 - or anything else tuples you can do the
663:57 - exact same thing but you cannot change
663:59 - them once you've created them a
664:01 - dictionary is more like a list in that
664:03 - it is mutable you can change it but the
664:06 - way you index into a dictionary is by
664:09 - way of these Keys these strings as we
664:11 - keep saying rather than by numbers those
664:14 - numeric indices
664:16 - all right well let me propose that there
664:19 - is yet another way of solving this
664:21 - problem and indeed I would argue that
664:24 - there's now an opportunity to hand even
664:25 - though this program isn't particularly
664:27 - complicated all I'm doing is collecting
664:29 - a name from the user and a house from
664:33 - the user you could imagine wanting
664:34 - longer term to collect even more
664:36 - information like the students Patronus
664:38 - or magical spell or a whole bunch of
664:40 - other information that might belong in a
664:42 - student and right now we're just kind of
664:44 - using these very general purpose data
664:47 - types in Python a tuple to combine some
664:49 - values together a list to do the same
664:51 - but let us change it later a dictionary
664:53 - which is more powerful because it's a
664:56 - little more structured it does have keys
664:58 - and it has values not just values but
665:00 - you know what this we wouldn't have to
665:02 - be having this conversation if the
665:04 - authors of python had just given us a
665:06 - data type called student right wouldn't
665:09 - it have been nice if there were just a
665:11 - type of variable I could create in my
665:12 - code called student then we wouldn't
665:14 - have to figure out well do we use a
665:16 - tuple or list or a dictionary but that's
665:19 - pretty reasonable right you can imagine
665:20 - just us how slippery of a slope that is
665:23 - so to speak if the creators of a
665:25 - language had to anticipate all the
665:27 - possible types of data that programmers
665:29 - like you and me want to store in your
665:31 - programs so they just gave us these
665:33 - general purpose tools but they gave us
665:35 - another general purpose tool that's
665:37 - going to allow us to create our own data
665:40 - types as well and actually give them
665:42 - names and that terminology is a class A
665:46 - Class is kind of like a blueprint for
665:49 - pieces of data object so to speak a
665:52 - class is kind of like a mold that you
665:54 - can define and give a name and when you
665:56 - use that mold or you use that blueprint
665:58 - you get types of data that are designed
666:01 - exactly as you want so in short classes
666:04 - allow you to invent your own data types
666:07 - in Python and give them a name and this
666:09 - is a primary feature of object oriented
666:12 - programming to be able to create your
666:14 - own objects in this way and in the case
666:16 - of python in classes even give them some
666:19 - custom names so what does this mean in
666:21 - real terms well let me go ahead and come
666:23 - back to vs code here and let me propose
666:25 - that we introduce a little bit of new
666:27 - syntax I'm going to go ahead and clear
666:29 - my terminal window first I'm going to go
666:31 - to the top of my file and I'm just going
666:33 - to start a thought but not finish it yet
666:35 - I'm going to use this new keyword for
666:38 - classes called literally class so indeed
666:41 - the new keyword we're going to have here
666:43 - and if I go back to our slides here this
666:45 - would be the official URL where you can
666:47 - read up more on this particular feature
666:48 - of python in the official tutorial class
666:51 - is a new keyword we can use now this is
666:54 - coincidentally related to students
666:56 - because students take classes but it has
666:58 - nothing to do with the fact that we're
666:59 - dealing with students class is a general
667:01 - purpose term in a lot of languages
667:03 - python among them that allow you to
667:05 - Define these custom containers with
667:07 - custom names for pieces of data so let's
667:10 - go back to vs code let's use this new
667:12 - keyword and let me propose that we
667:14 - create a class called students and by
667:16 - convention I'm going to use a capital S
667:18 - here and I'm going to go ahead and with
667:20 - a colon get to later the implementation
667:23 - of this class so I'm just going to use
667:24 - dot dot dot which is a valid placeholder
667:27 - for now that just indicates to me that
667:28 - I'm going to come back to implementing
667:30 - this later but as of now it does in fact
667:32 - exist I now have a student class defined
667:37 - for me that I can now use in my code
667:39 - here how am I going to use it well first
667:42 - of all let me go down to get student and
667:45 - let me change this code to no longer use
667:47 - a dictionary but to use this class I'm
667:50 - going to do this I'm going to give
667:51 - myself a variable called student as I've
667:53 - done before but I'm going to set it
667:55 - equal to Capital student open
667:58 - parenthesis close parenthesis so I'm
668:01 - going to do what appears to be calling a
668:03 - function and that function student with
668:05 - a capital S notice matches the name that
668:08 - I gave this class at the top of my file
668:10 - all right what do I next want to do I'm
668:13 - going to go ahead and give this student
668:14 - a name now if I were still using a
668:16 - dictionary I would say student quote
668:19 - unquote name using square brackets but
668:22 - this is not a dictionary it turns out
668:24 - classes have what for now we'll call
668:26 - attributes properties of sorts that
668:28 - allow you to specify values inside of
668:31 - them in the Syntax for that happens to
668:32 - be a DOT we've seen dots before we've
668:35 - used it in the context of modules and
668:37 - libraries more generally this is another
668:38 - similar in spirit use of a DOT that
668:40 - allows you to get at something inside of
668:42 - something else so student dot name is
668:46 - going to be the syntax I use for giving
668:47 - this student a name and that name is
668:50 - going to be whatever the return value of
668:52 - name is and then I'm going to go ahead
668:54 - and say student dot house to give
668:56 - another attribute called house and give
668:59 - that the return value of input here
669:01 - prompting the user for house and then as
669:03 - before I'm just going to return student
669:05 - but now what's really powerful about
669:08 - class and object-oriented programming
669:10 - more generally is that I've created this
669:13 - custom data type called literally
669:15 - student capital S I've stored one such
669:17 - student in a variable like I can always
669:19 - do in a variable called student
669:21 - lowercase s but I could call it anything
669:23 - I want it just makes sense to call it
669:25 - student as well but lowercase for
669:27 - clarity and then I'm returning that
669:29 - variable and because of my syntax in
669:31 - lines 14 and 15 that has the result of
669:34 - putting inside of that class a name
669:38 - attribute and a house attribute I just
669:41 - need to make one more change up here I'm
669:43 - going to go ahead and remove our Padma
669:45 - code just so we can focus only on what's
669:46 - new rather than fixing her house and I'm
669:49 - going to go in here and change the
669:51 - syntax that previously was for
669:52 - dictionaries again dictionaries use
669:55 - square brackets and then strings in
669:58 - quotes either single quotes or double
670:00 - quotes depending on the context here
670:02 - though I'm going to change this to be
670:03 - student dot name and over here I'm going
670:06 - to change it to be student dot house and
670:09 - that's just going to be my new syntax
670:11 - for getting the contents of what appears
670:12 - to be a class called student let me go
670:15 - ahead and rerun python of student.i
670:18 - enter let's type in Harry's name as
670:20 - before let's put him in Gryffindor
670:22 - crossing our fingers as we often do and
670:24 - Harry is indeed from Gryffindor
670:28 - what though have I done let's introduce
670:30 - one other bit of terminology here it
670:33 - turns out that I can create a class
670:35 - using that class keyword but anytime you
670:38 - use a class you're creating what are
670:40 - called objects and here is the word
670:42 - objects as in object oriented
670:44 - programming or oop let me go back to my
670:47 - code here and even though I haven't
670:48 - really implemented much of it at all I
670:50 - literally just left it with a dot dot
670:52 - dot that's enough code lines one and two
670:54 - to just invent a new data type called
670:57 - student capital s that may or may not
670:59 - have some future functionality as well
671:01 - that's enough to create a class what
671:03 - though am I doing on line 11 on line 11
671:06 - what I'm technically doing is creating
671:09 - an object of that class so this too is
671:12 - another term of R you create objects
671:15 - from classes so if we go back to that
671:17 - metaphor that a class is like a
671:19 - blueprint for a house or a class is like
671:21 - a mold an object is when you use that
671:24 - blueprint to build a specific house or
671:27 - something that comes out of plaster the
671:29 - mold when you actually use that mole to
671:31 - create such an object so a class is
671:34 - again the definition of a new data type
671:36 - the object is the Incarnation of or
671:39 - technically instantiation of and another
671:42 - term for objects would actually be an
671:44 - instance you have instances of classes
671:47 - as well so that's a lot of vocabulary
671:49 - but at the end of the day it just boils
671:50 - down to this you can Define your own
671:52 - class which is really your own data type
671:54 - you can then store attributes inside of
671:56 - it using this dot notation here and then
671:58 - you can access those same attributes
672:00 - using Code like this here and now I have
672:03 - a proper student data type and I don't
672:06 - have to kind of hack something together
672:08 - using a tuple or a list or even a
672:10 - dictionary I now have a proper data type
672:12 - called student that the authors of
672:14 - python didn't give me I gave myself
672:17 - any questions now on classes this new
672:21 - keyword class or this idea of these
672:23 - objects or instances thereof is the
672:25 - class object mutable or immutable a good
672:31 - question and we've clearly laid the
672:32 - stage for having that conversation about
672:34 - every data type now we will see that
672:36 - they are mutable but you can make them
672:38 - immutable so you can get the best of
672:41 - both worlds Now by writing some actual
672:43 - code and we'll write more code than the
672:45 - dot dot dot in just a bit other
672:46 - questions on classes or these objects
672:49 - thereof then what would be the
672:51 - properties of those classes uh so at the
672:54 - moment the properties of or the
672:55 - attributes of as I've been calling them
672:57 - thus far would just be name and house it
673:00 - turns out that there may very well be
673:01 - other attributes built into classes that
673:04 - we may see before long but for now the
673:06 - only two attributes that I care about
673:07 - are the ones that I myself created
673:09 - namely name and house or again what I
673:13 - would call attributes and in a little
673:14 - bit we're going to start calling those
673:16 - same attributes more technically
673:17 - instance variables name and house as I
673:21 - presented them here in vs code are
673:22 - really just variables called name and
673:25 - called house inside of an object whose
673:29 - type is student all right so what more
673:32 - can we do with these classes well again
673:34 - on line 11 is where we're instantiating
673:37 - an object of the student class and
673:40 - assigning it to a student variable we're
673:43 - then adding attributes name and house
673:45 - respectively on lines 12 and 13
673:47 - currently both of those have values that
673:49 - are technically strings or stirs because
673:51 - that's what the return value of input is
673:52 - but those attributes values could
673:54 - actually be any data type we're just
673:56 - keeping things simple and focusing on
673:57 - defining students in terms of two
673:59 - strings name and house and then on line
674:01 - 14 we're returning that variable we're
674:04 - returning that object to main so that we
674:06 - can actually print out who is from what
674:09 - house well let's go ahead and add a bit
674:10 - more functionality here because right
674:12 - now on lines 12 and 13 this is a little
674:15 - manual and it's a little reckless of me
674:18 - to just be putting anything I want
674:19 - inside of this student object it turns
674:22 - out with classes unlike with
674:24 - dictionaries we can actually standardize
674:26 - all the more what those attributes can
674:29 - be and how what kinds of values you can
674:31 - set them to so let me go ahead and do
674:33 - this let me propose that it would
674:35 - actually be really nice if instead of
674:38 - doing this here let me go ahead and
674:40 - simplify my code as follows let me go
674:42 - ahead and give myself a local variable
674:44 - called name and set it equal to the
674:46 - return value of input like we've done
674:48 - many times now already let me give
674:50 - myself one other variable for now called
674:51 - house and set it equal to the return
674:53 - value of input as well prompting the
674:55 - user for their house and now instead of
674:58 - creating a student object from my
675:01 - student class and then manually putting
675:04 - the name attribute inside of it and the
675:06 - house attribute inside of it let me
675:09 - actually do something more powerful let
675:11 - me do this let me call that student
675:14 - function which is identical to the class
675:16 - name just by finding a class you get a
675:19 - function whose name is identical to the
675:22 - class name with the capital letter
675:23 - included but instead of just doing open
675:25 - parenthesis close parenthesis let me
675:28 - pass in the name that I want to fill
675:30 - this this object with and the house that
675:33 - I want to put in that object as well and
675:35 - now let me set the return value as
675:37 - before to be student equals like this so
675:41 - what have I done that's different
675:42 - fundamentally I'm still getting user
675:44 - input in the same way I'm using input on
675:46 - line 11 and input on line 12 and I just
675:48 - so happen to be storing those return
675:50 - values in local variables but now now
675:53 - we're setting the stage for the more
675:54 - powerful features of classes and object
675:57 - oriented programming more generally
675:58 - notice that I'm deliberately passing to
676:01 - this capital S student function name
676:04 - comma house I'm passing in arguments to
676:07 - the function now the student class is
676:09 - not going to know what to do with those
676:11 - yet but now I'm sort of standardizing
676:13 - how I'm passing data into this student
676:16 - class and ultimately it's going to give
676:17 - me an opportunity to error check those
676:20 - inputs to make sure that the name is
676:21 - valid that it has a value and it's not
676:23 - just the user hitting enter it's going
676:25 - to allow me to ensure that it's a valid
676:27 - house that it's Gryffindor or Hufflepuff
676:29 - or Ravenclaw or Slytherin or not just
676:31 - hitting enter or some random value that
676:33 - the user types in because I'm passing
676:35 - name and house to the student class this
676:39 - particular function I'm going to have
676:40 - more control over the correctness of my
676:42 - data so let's now go up to the student
676:45 - class which up until now I left is just
676:47 - dot dot dot it turns out that in the
676:49 - context of classes there are a number of
676:52 - not just uh attributes or instance
676:55 - variables that you can put inside but
676:57 - also methods classes come with certain
677:01 - methods or functions inside of them that
677:04 - you can Define and they just behave in a
677:06 - special way by nature of how python
677:08 - works these functions allow you to
677:11 - determine behavior in a standard way
677:14 - they are indeed special methods in that
677:16 - sense now what do I mean by this well
677:18 - let me go back to vs code here and let
677:20 - me propose that I start to define a
677:23 - standard function called underscore
677:26 - underscore or Dunder as it's abbreviated
677:29 - in it underscore underscore and then I'm
677:32 - going to go ahead and do open
677:33 - parenthesis and then I'm going to put in
677:36 - here literally the word self more on
677:39 - that in just a moment but now inside of
677:41 - this function I'm going to have an
677:42 - opportunity Unity to customize this
677:46 - classes objects that is to say this
677:50 - underscore underscore init method or
677:52 - Dunder init method is specifically known
677:55 - as an instance method and it's called
677:57 - exactly this this is designed by the
677:59 - authors of python and if you want to
678:01 - initialize the contents of an object
678:05 - from a class you define this method and
678:07 - we'll see what it's about to do here let
678:09 - me go back to vs code and let me do
678:11 - something like this
678:13 - self.name equals name and self.house
678:18 - equals house but I don't want to just
678:21 - init this object very generically I want
678:23 - this method called init to take in not
678:26 - just self but name comma house as well
678:29 - now what in the world is going on
678:31 - because there's a lot of weird syntax
678:33 - here there's this Dunder init method a
678:35 - double underscore init double underscore
678:37 - there's all of a sudden this parameter
678:39 - called self and then there's this new
678:41 - syntax self.name and self.house now
678:44 - you're seeing really a manifestation of
678:46 - object oriented programming it's not all
678:49 - that different fundamentally from what
678:50 - we've been doing for weeks with
678:51 - dictionaries by adding keys to
678:54 - dictionaries but in this case we're
678:56 - adding variables to objects AKA instance
679:00 - variables to objects now what's going on
679:02 - let's do this in Reverse let's go back
679:04 - to the line of code we wrote earlier on
679:07 - line 15 I am treating the name of this
679:09 - class student with a capital S as a
679:13 - function and I am passing in two values
679:16 - name and house what I've highlighted
679:18 - here on the screen on line 15 is
679:20 - generally known as a Constructor call
679:22 - this is a line of code that is going to
679:25 - construct a student object for me using
679:29 - synonyms it is going to instantiate a
679:32 - student object for me and again how is
679:36 - it going to create that object it's
679:37 - going to use the student class as a
679:39 - template as a mold of sorts so that
679:41 - every student is structured the same
679:43 - every student is going to have a name
679:45 - every student's going to have a house
679:46 - but because I can pass in arguments to
679:50 - this student function capital S I'm
679:53 - going to be able to customize the
679:55 - contents of that object so if you think
679:59 - about the real world if you've ever been
680:00 - on a street or a neighborhood where all
680:02 - of the houses kind of look the same but
680:05 - there might be painted differently they
680:07 - might be decorated a little bit
680:08 - differently on the outside all of those
680:10 - houses might have been built using the
680:12 - exact same blueprint sort of a mold if
680:15 - you will but then you can specialize
680:17 - exactly the finer points of those houses
680:19 - by painting the outside a different
680:21 - color or planting different trees you
680:23 - can style them differently similar in
680:26 - spirit here we have a student blueprint
680:29 - that's always going to have now a name
680:31 - and a house but it's up to you and me to
680:33 - pass in any name in any house that we
680:35 - want now where is this function the fact
680:38 - that I'm calling student capital S and
680:40 - then a parenthesis and a closed
680:41 - parenthesis with arguments inside side
680:43 - suggests that there's a function
680:44 - somewhere in the world that has been
680:46 - defined with death that's going to be
680:48 - called well as you might have guessed by
680:50 - now the function that will always be
680:53 - called by definition of how python
680:55 - classes work is a function called double
680:59 - underscore init double underscore why
681:02 - it's a crazy name but it's what the
681:04 - authors of python chose to just
681:06 - implement the initialization of an
681:09 - object in Python now the only weird
681:12 - thing especially weird thing I will
681:13 - admit is this it would be way clear to
681:16 - me too if the only two parameters for in
681:20 - it were just name comma house right
681:22 - that's how we've defined every function
681:24 - thus far in the class you just specify
681:26 - the parameters that you want the
681:28 - function to accept and indeed that lines
681:30 - up with what I'm doing on line 15. I am
681:32 - only passing in two things to the
681:35 - student function but it turns out that
681:38 - the authors of python need to give us a
681:40 - little bit of help here because suppose
681:42 - that you pass in name and house to this
681:45 - init method and a method is just a
681:47 - function inside of a class what are you
681:50 - going to do with the name and the house
681:51 - like literally where are you going to
681:53 - put them if you want to remember the
681:55 - name in the house for this student
681:58 - you've got to be able to store those
681:59 - values somewhere and how do you store
682:02 - them in the current object that has just
682:04 - been instantiated well the authors of
682:07 - python decided that the convention is
682:09 - going to be that this init method also
682:12 - semi-secretely takes a third argument
682:15 - that has to come first by convention
682:17 - it's called self but you could call it
682:18 - technically anything you want but the
682:20 - convention is to always call itself and
682:22 - self as its name implies gives you
682:24 - access to the current object that was
682:27 - just created what does that mean again
682:30 - now on line 14 now that it's moved down
682:32 - a little bit this line here is a
682:35 - Constructor it constructs a student
682:37 - object but there's nothing in that
682:39 - object initially there's no name there's
682:40 - no house but the object is exists in the
682:43 - computer's memory it's up to now you to
682:46 - store the name and the house inside of
682:47 - that object how do you do that well
682:49 - python will just automatically call this
682:52 - init method for you and it's going to
682:54 - automatically pass in a reference to a
682:57 - an argument that represents the current
683:00 - object that it just constructed in
683:03 - memory for you and it's up to you to
683:05 - populate it with values and what this
683:07 - means is that inside of your init method
683:09 - you can literally do self.name to create
683:12 - a new attribute AKA an instance variable
683:15 - inside of that otherwise empty object
683:18 - and put this name inside of it it allows
683:20 - you to do self.house and store that
683:23 - value of house now you could call these
683:24 - things anything you want they could be n
683:26 - they could be H as before but that's
683:28 - really not very self uh explanatory much
683:32 - better to do this kind of convention
683:34 - self.name equals name self.house equals
683:37 - house and this is like installing into
683:40 - the otherwise empty object the value
683:43 - name and house and storing them in
683:45 - really identically named instance
683:47 - variables in the object and again an
683:50 - object is just an instance of a class
683:52 - now I know that was a lot of vocabulary
683:54 - that's a lot of weird syntax so any
683:57 - questions on this init method whose
683:59 - purpose in life again is to initialize
684:01 - an otherwise empty object when you first
684:04 - create it and what is the difference
684:06 - between the init method and default
684:08 - Constructor a good question so in other
684:11 - languages if you program before for
684:13 - instance Java there are expunctions that
684:16 - are explicitly called Constructors that
684:18 - indeed construct an object they
684:19 - initialize it with values python
684:22 - technically calls this init method the
684:23 - initialization method it initializes the
684:26 - value it's on line 14 line 15 now of my
684:30 - code if I scroll back down that I'm
684:32 - technically constructing the object it
684:34 - turns out there's another special method
684:36 - in Python that we won't talk about in
684:38 - detail today called underscore
684:40 - underscore new underscore underscore
684:42 - that actually handles the process of
684:44 - creating an empty object in memory for
684:46 - us but generally speaking you the
684:49 - programmer don't need to manipulate the
684:51 - new function it just works for you
684:52 - instead you define your own init method
684:55 - here an init function inside of your
684:57 - class and that method initializes the
685:00 - contents of the object so there's
685:02 - technically a distinction between
685:03 - constructing the object with new and
685:05 - initializing it within it but in the
685:07 - world of python you pretty much only
685:09 - worry about the init method python
685:11 - generally does the other part for you a
685:14 - good question others uh what about if
685:16 - you want to store more than one name or
685:19 - more than one house a good question if
685:21 - you want to store more than one name or
685:23 - more than one house you can do this in
685:25 - different ways you could create other
685:26 - attributes technically called instance
685:29 - variables like self.name one self dot
685:32 - name two but we've seen in the past that
685:34 - that is not a very good design just to
685:36 - have multiple variables to store
685:38 - multiple things maybe instead you have
685:40 - an instance variable called
685:42 - self.names plural and you set it equal
685:45 - to a list of names or a list of houses
685:47 - now in this case I don't think that
685:49 - really solves a problem because I'm
685:50 - trying to implement a student sing
685:52 - regular so it doesn't really make sense
685:54 - to have multiple first names maybe a
685:56 - nickname maybe a last name so we could
685:58 - add those two but I don't think we need
685:59 - multiple names per se and in this case
686:01 - multiple houses but absolutely you could
686:04 - do that using some of our familiar
686:05 - building blocks like lists other
686:07 - questions how are classes or objects
686:10 - represented in memory how are classes
686:12 - and objects represented in memory so the
686:14 - class is technically just code it is the
686:17 - code on the top of my file lines one
686:19 - through four that defines that blueprint
686:21 - that template if you will objects are
686:25 - stored in the computer's memory by
686:26 - taking up some number of bytes so you're
686:28 - probably familiar with bytes or
686:29 - kilobytes or megabytes there's some
686:31 - chunk of bytes probably all in the same
686:33 - location in the computer's memory or Ram
686:36 - where those Vari where those objects are
686:39 - stored but that's what python the
686:41 - program handles for you python The
686:43 - Interpreter figures out where in the
686:45 - computer's memory to put it you and I
686:47 - the programmers get to think and solve
686:48 - problems at this level python The
686:50 - Interpreter handles those lower level
686:52 - details for you how about one final
686:54 - question on classes and objects now my
686:57 - question is if we can see do the same
687:00 - thing with the dictionary so I have to
687:02 - use classes good question if you can do
687:05 - the same things as you can with
687:06 - dictionaries why should you use classes
687:07 - because we are just scratching the
687:09 - surface now of what you can do with
687:10 - classes allow me to go back now to my
687:13 - keyboard and show you more of what you
687:15 - can do with classes but in short you can
687:17 - do much more with classes you can ensure
687:20 - the correctness of your data much more
687:22 - with classes you can error check things
687:24 - and generally you can design more
687:26 - complicated software more effectively
687:29 - and we'll continue to see today features
687:31 - of python and object-oriented
687:33 - programming more generally that allows
687:34 - us to do just that so let me propose in
687:38 - fact that first let's just tighten up
687:40 - this current implementation which again
687:42 - has us with an init method that just
687:45 - declares two instance variables
687:46 - self.name and self.house which again
687:48 - just creates those variables inside of
687:51 - the otherwise empty object and assigns
687:53 - them values name and house respectively
687:55 - let me go ahead and just do one little
687:57 - thing here I don't really need the
687:58 - student variable let me just tighten
688:00 - this up so that each time we improve or
688:02 - change the code we're focusing really on
688:04 - just the minimal changes alone so I've
688:07 - not fundamentally done anything
688:08 - different I just got rid of the variable
688:10 - name and I'm just returning the return
688:12 - value of this student function that's
688:15 - constructing my new object for me so I'm
688:17 - just tightening things up as we've done
688:18 - many times in the past well what if
688:21 - something goes wrong when in creating
688:24 - this student for instance what if the
688:26 - user does not give us a name and they
688:28 - just hit enter when prompted for name
688:30 - like I don't want to put in my
688:31 - computer's memory a sort of bogus
688:34 - student object that has no name right
688:36 - I'd ideally like to check for errors
688:38 - before I even create it so I don't
688:40 - create a nameless student it would just
688:41 - be weird and probably a bug to have an
688:44 - object that has no name similarly I
688:46 - don't want the user to be able to type
688:47 - in something random as their house at
688:50 - least in the World of Harry Potter
688:52 - there's really only four houses at
688:54 - Hogwarts at least or there's again
688:56 - Gryffindor and Hufflepuff and Ravenclaw
688:58 - and Slytherin a list of four valid
689:00 - houses it would be nice if I somehow
689:03 - validated that the user's input is
689:05 - indeed in that list now I could do all
689:09 - of that validation in my get student
689:10 - function I could check is the name empty
689:13 - if so don't create the student object is
689:16 - the house one of those four houses if
689:18 - not don't create the student object but
689:21 - that would be rather decoupled from the
689:23 - student itself right get student
689:25 - currently exists as just my own function
689:27 - in my student.pi file but classes and
689:31 - really object-oriented programming more
689:33 - generally encourages you to encapsulate
689:36 - inside of a class all functionality
689:39 - related to that class so if you want to
689:42 - validate that a name exists if you want
689:44 - to validate that a house is correct that
689:47 - belongs just fundamentally in the class
689:50 - called student itself not in some random
689:52 - function that you wrote elsewhere again
689:54 - this is just methodology because again
689:56 - if we think about writing code that gets
689:59 - longer and longer more and more
690:00 - complicated it should make just
690:02 - intuitive sense that if you keep all the
690:03 - house and all the Stu all of the name
690:06 - and all of the house related code in the
690:08 - student it's just better organization
690:10 - right keep all of the related code
690:11 - together and that's probably going to
690:13 - set you up for more success and indeed
690:15 - that's part of this methodology of
690:17 - object oriented programming let me go
690:19 - ahead now and change my students classes
690:23 - init method to do this
690:25 - if the name is blank so if not name and
690:29 - we've seen this kind of syntax before if
690:31 - you say in Python pythonically if not
690:33 - name that's like doing something like
690:35 - this if name equals equals quote unquote
690:38 - but I can do this a little more
690:40 - elegantly just say if not name would be
690:42 - the more pythonic way to do it well I
690:45 - want to return an error like I might
690:47 - want to do something like this print
690:49 - missing name but this is not good enough
690:51 - it does not suffice to just print out
690:54 - missing name and then let the rest of
690:56 - the code go through all right well what
690:58 - could I do instead in the past we've
691:00 - seen another technique I could do
691:01 - sys.exit and I could say something like
691:03 - missing name and I could go up here and
691:05 - I could import CIS but this is a really
691:07 - obnoxious solution to the problem just
691:10 - because you or maybe a colleague messed
691:12 - up and called a function with an invalid
691:15 - name you're going to quit my whole
691:16 - program like that's really really
691:19 - extreme of a response and you probably
691:22 - don't want to do that if your program's
691:23 - in the middle of running you might want
691:25 - to clean clean some stuff up you might
691:26 - want to save files you don't want to
691:28 - just exit a program sometimes in some
691:30 - arbitrary line just because input was
691:32 - invalid so I don't think we want to do
691:34 - that either but we do now have a
691:36 - mechanism
691:37 - for signaling errors unfortunately I
691:40 - can't do something like this I could try
691:41 - returning none and say uh-uh this
691:44 - student does not exist I'm going to hand
691:45 - you back none instead but it's too late
691:48 - if we scroll back down to where I'm
691:50 - creating the student it's on line 17 now
691:53 - where I've highlighted this code the
691:55 - student has already been created there
691:57 - is an object somewhere in the computer's
691:59 - memory that's structured as a student it
692:02 - just doesn't have any values inside of
692:04 - it but it's too late therefore to return
692:06 - none that ship has sailed the object
692:09 - exists you can't just suddenly say no no
692:11 - there is no object there is an object
692:13 - it's up to you to Signal an error and
692:15 - how do you signal an error well we've
692:17 - actually seen this before but we haven't
692:19 - had occasion to create our own errors it
692:21 - turns out in Python there's another
692:23 - keyword related to exceptions that
692:27 - python itself uses to raise all of those
692:29 - exceptions we've talked about in the
692:31 - past when you've caught things like
692:32 - value errors or other such exceptions
692:36 - that come with python well it turns out
692:38 - you the programmer can raise that is
692:41 - create your own exceptions when
692:43 - something just really goes wrong not
692:44 - wrong enough that you want to quit and
692:46 - exit the whole program but enough that
692:48 - you need to somehow alert the programmer
692:50 - that there has been an error something
692:52 - exceptional in a very bad way something
692:55 - exceptional has happened and let them
692:57 - try to catch that exception as needed so
693:01 - let me go back to vs code here and
693:03 - propose that if the user passes in an
693:06 - invalid name it's just empty so there's
693:08 - not a name well what I really want to do
693:10 - is this I want to raise a value error
693:14 - and we've seen the value errors before
693:16 - we've created value errors accidentally
693:19 - before and generally you and I have
693:20 - tried to catch them if they happen well
693:23 - the flip side of this feature of
693:25 - exceptions in a language like python is
693:27 - that you the programmer can also raise
693:29 - exceptions when something exceptional
693:31 - happens and you can even be more precise
693:33 - you don't have to raise a generic value
693:35 - error and let the programmer figure out
693:36 - what went wrong long you can treat value
693:39 - error and all exceptions in Python like
693:41 - functions and actually pass to them an
693:44 - explanatory message like quote unquote
693:46 - missing name so that at least the
693:48 - programmer when they encounter this
693:49 - error knows oh I messed up I didn't make
693:52 - sure that the user has a name and now
693:55 - what do you want to do instead well now
693:57 - if you're the programmer you could do
693:59 - something like this you could try to
694:02 - create a student except if there's a
694:05 - value error then you could handle it in
694:08 - some way and I'm going to wave my hand
694:10 - with a dot dot dot at how you would
694:11 - handle it but you would handle it using
694:13 - try and accept just like we have in the
694:15 - past and that would allow you the
694:17 - programmer to try to create the student
694:19 - but if something goes wrong okay okay
694:21 - I'll handle it nonetheless so what's new
694:24 - here again is this raise keyword that
694:27 - just lets you and I actually raise our
694:30 - own exceptions to Signal these errors
694:32 - well let me go back to my code here and
694:34 - I'm just going to go ahead and not
694:35 - bother trying or catching the this error
694:38 - for now we'll just focus on raising it
694:40 - and assume that from our week on
694:41 - exceptions you could add try and accept
694:43 - as needed in places let me go back to
694:46 - the code here and propose that something
694:48 - else could go wrong with house right if
694:50 - there is a name we're good but if we're
694:52 - given a house but it's invalid we should
694:54 - probably raise an exception for that too
694:56 - so what if we do this if house is not in
695:00 - the list containing Gryffindor quote
695:02 - unquote uh Hufflepuff quote unquote uh
695:06 - let's see Ravenclaw quote unquote or
695:09 - Slytherin quote unquote then with my
695:12 - colon let's raise another type of value
695:14 - error but rather than raise a generic
695:16 - value error let's pass in an argument
695:18 - quote unquote invalid house
695:21 - and so here we now see a capability that
695:24 - we can do with classes that we can't
695:26 - with dictionaries if you add an
695:29 - attribute to a dictionary a key to a
695:31 - dictionary it's going in no matter what
695:33 - even if the name is empty even if the
695:36 - house is a completely random string of
695:37 - text that's not one of these four houses
695:39 - it's going into that dictionary but with
695:41 - the class and by way of this init method
695:44 - you and I can now control exactly what's
695:47 - going to be installed if you will inside
695:49 - of this object you have a little more
695:51 - control now over correctness and so now
695:55 - let me go ahead and scroll back down to
695:57 - my terminal window and clear it let me
695:59 - run python of student.pi let me type in
696:01 - something like Harry let me type in
696:03 - Gryffindor enter and we see that indeed
696:06 - Harry is from Gryffindor what if I made
696:08 - a mistake though what if I ran python of
696:10 - student.pi and type Terry as the name
696:12 - but I this time typed in number four
696:14 - privet Drive which is where he grew up
696:16 - instead of his proper Hogwarts house let
696:19 - me hit enter now and now you see a value
696:22 - error but this isn't one that python
696:24 - generated for us per se I raise this
696:27 - error and therefore if I went in and
696:29 - wrote more code in my get student
696:31 - function I could also catch this error
696:33 - with our usual try except syntax so all
696:36 - we have now is not just classes in our
696:38 - toolkit but even more Powers when it
696:41 - comes to exceptions and not just
696:43 - catching them ourselves but raising them
696:45 - ourselves too
696:47 - any questions now on
696:50 - this use of classes and in it and now
696:52 - this ability to raise exceptions when
696:54 - something goes wrong inside of the
696:56 - initialization so what if
696:59 - the user has a middle name
697:01 - name middle name and last name how would
697:03 - you fix that a good question if you
697:05 - wanted the user to if you wanted the
697:07 - student to have a first name middle name
697:09 - and last name we could do this in a
697:11 - bunch of different ways the simplest
697:13 - though if Let Me Clear My screen here
697:15 - and let me just temporarily do this let
697:18 - me propose that the init method taking a
697:20 - first argument a middle argument and a
697:23 - last argument and then what I think I
697:25 - would do down here is ultimately have
697:27 - first equals first and then I would do
697:30 - the same thing for middle and last so
697:33 - middle and middle and then last and last
697:37 - and then what I would have to do here
697:39 - is when I actually ask the user for
697:42 - their name I might need to really go all
697:44 - out I might need to ask them first for
697:46 - their first name and store that in a
697:48 - variable called First and therefore pass
697:49 - in first I might similarly need to ask
697:52 - them for their middle name and store
697:54 - that in a variable and then pass in a
697:56 - second argument middle and then lastly
697:58 - if you will let me go ahead and create a
698:00 - third variable called last get the input
698:02 - for their last name and pass that in as
698:05 - well I could instead just use one input
698:08 - and just ask him for their whole name so
698:10 - type in David Malin enter or David J
698:13 - Malin all three of them and maybe I
698:15 - could use Python split function maybe a
698:18 - regular expression to tease it apart
698:19 - that's probably going to be messy
698:21 - because there's going to be people who
698:22 - don't have just two or three names they
698:24 - might have four or five so maybe
698:25 - sometimes it's better to have multiple
698:27 - prompts but that's not a problem because
698:29 - with a class we have the expressiveness
698:31 - to take in more arguments if we want we
698:34 - could even take a list if we wanted but
698:36 - I think we'd probably want to have even
698:37 - more error checking then not just for
698:39 - name but for first and then maybe for
698:42 - middle and then maybe for last so it
698:44 - just is more and more code though there
698:46 - would be ways to perhaps consolidate
698:48 - that too let me undo all of that and see
698:50 - if there are other questions now on
698:52 - classes
698:53 - I assume this is classes or something I
698:56 - might do at the beginning of a project
698:57 - can I just put them in a different file
698:59 - and import them into my project or or my
699:03 - main code as needed absolutely a really
699:05 - good question you could imagine wanting
699:06 - to use this student class not just in
699:08 - student.pi but in other files or other
699:11 - projects of yours and absolutely you can
699:13 - create your own library of classes by
699:16 - putting the student class in your own
699:18 - module or package per our discussion in
699:20 - the past about libraries more generally
699:22 - and absolutely you can do that and later
699:24 - today what we see that we've actually
699:26 - been using classes you and I before in
699:28 - third party libraries so you too can
699:30 - absolutely do the same how about one
699:32 - more question on classes
699:35 - can you have optional variables in
699:37 - classes and two can you have your own
699:39 - error names like let's be egotistical
699:42 - and say I want to raise Eric error short
699:45 - answer yes so you can uh these init
699:48 - functions are just like python functions
699:51 - more generally even though they're
699:52 - special and that they're going to get
699:53 - called automatically by python for you
699:55 - but if you wanted to make house optional
699:57 - you could do something like this you
699:58 - could give it a default value in the
700:00 - init functions uh signature so to speak
700:04 - and that first line of code on line two
700:05 - and that would allow me to not have to
700:07 - pass in-house in this case I'm going to
700:09 - continue to always pass a name and house
700:11 - but you could make things optional and
700:13 - yes your second question if you wanted
700:15 - to have your own error message like an
700:17 - Eric error you could actually create
700:19 - your own Eric error exception and we'll
700:23 - see in a little bit that there's
700:24 - actually a whole Suite of exceptions
700:26 - that exist and you too can invent those
700:28 - as well
700:29 - let me propose though that we now
700:32 - introduce one other aspect of this
700:34 - whereby we try printing out what a
700:37 - student looks like at the moment if I
700:39 - scroll back down to my main function I'm
700:40 - still printing the student's name and
700:42 - house very manually I'm going inside of
700:44 - the object doing student.name and I'm
700:46 - going inside of the object again and
700:48 - getting student.house just to see where
700:50 - the student is from but wouldn't it be
700:53 - nice if I could just print the student
700:55 - like I've been printing for weeks any
700:57 - int or float or stir or any other data
701:00 - type well let's see what happens if I
701:02 - just try printing the student instead of
701:04 - manually going inside and trying to
701:06 - create that sentence myself well in my
701:08 - terminal window let me go ahead and run
701:09 - python of student.pi again let me type
701:12 - in Harry let me type in Gryffindor and
701:14 - voila Harry whoa okay main student
701:17 - object at ox102
701:20 - 733e80 well what is going on well if you
701:24 - were to run the same code you might
701:25 - actually see something different on your
701:27 - computer in terms of that number but
701:29 - what you're really really seeing is the
701:31 - underlying representation as a string of
701:34 - this specific object in particular
701:36 - you're seeing where in the computer's
701:37 - memory it is this number ox102 733 e80
701:41 - refers to essentially a specific
701:43 - location in the computer's memory or Ram
701:46 - that's not really that interesting for
701:48 - me or you or generally speaking
701:50 - programmers but it's just the default
701:52 - way of describing via print what this
701:55 - thing is but I can override this as well
701:59 - it turns out that there are other
702:01 - special methods in Python when it comes
702:04 - to classes not just underscore
702:05 - underscore init underscore underscore
702:08 - But continuing that same pattern
702:09 - underscore underscore stir underscore
702:13 - underscore so this too is a special
702:15 - method that if you define it inside of
702:17 - your class python will just
702:20 - automatically call this function for you
702:22 - anytime some other function wants to see
702:26 - your object as a string print wants to
702:29 - see your your object as a string but by
702:32 - default if you don't have this method
702:33 - defined in your class it's going to
702:35 - print out that very ugly esoteric
702:37 - Incarnation thereof where it says
702:38 - main.student object at Ox dot dot dot
702:42 - well how can I then Define my own stir
702:44 - function well here back in vs code let
702:47 - me propose that I go in and Define not
702:49 - just underscore underscore in it but let
702:53 - me Define a second function in this
702:54 - class here as follows def underscore
702:57 - underscore stir underscore underscore
702:59 - they're r d two even though the font in
703:01 - vs code is putting the two underscores
703:03 - so close it just looks like a longer
703:05 - underscore there are indeed two there on
703:07 - the left and the right just like for
703:08 - init this one only takes one argument
703:12 - that by convention is always called self
703:14 - so that you have access to it and then
703:16 - indented below that after a colon I'm
703:19 - going to go ahead and create a format
703:21 - string and return it so let me go ahead
703:23 - and return how about something generic
703:26 - first like a student so I'm not going to
703:28 - bother even trying to figure out what
703:31 - this Student's name or house is I'm just
703:32 - going to always return a student let me
703:35 - go back now to my earlier code which has
703:37 - print student on line 16. Let Me Clear
703:41 - My terminal window and rerun python of
703:43 - student.pi enter type in Harry type in
703:46 - Gryffindor last time I saw that very
703:48 - cryptic output this time I see more
703:50 - generically a student you know more
703:53 - readable but not very enlightening which
703:55 - student is this well notice that the uh
703:59 - double underscore stir method takes in
704:02 - this self-argument by default it's just
704:05 - the way the python authors designed this
704:07 - method it will always be passed a
704:10 - reference to the current student object
704:13 - what do I mean by that when this line of
704:15 - code on line six is called print because
704:18 - it's hoping it's going to get a string
704:20 - is going to trigger the underscore
704:22 - underscore stir underscore underscore
704:24 - method to be called and python for you
704:27 - automatically is going to pass into that
704:29 - method a reference to the object that's
704:32 - trying to be printed so that you the
704:35 - programmer can do something like this
704:36 - here's an F string with double quotes as
704:39 - usual I'm going to use some curly braces
704:41 - and say print out self.name from
704:44 - self.house so there's nothing new in
704:47 - what I've just done it's just an F
704:50 - string and F on the beginning two double
704:52 - quotes a couple of pairs of curly braces
704:54 - but because automatically this stir
704:57 - method gets passed self so to speak a
705:00 - reference to the current object I can go
705:03 - inside of that object and grab the name
705:04 - I can go inside that object again and
705:06 - grab the house so now when I go back to
705:09 - my terminal window previously it just
705:11 - printed out a student but now if I run
705:13 - python of student.pi enter type in Harry
705:16 - type in Gryffindor and one more time hit
705:19 - enter Harry is again from Gryffindor but
705:22 - if I run this yet again let's for
705:24 - instance do Draco is from Slytherin
705:28 - enter dracos from Slytherin now it's
705:30 - customized to the specific object that
705:33 - we're trying to print
705:36 - questions on this function here
705:39 - this Dunder stir method is there
705:44 - anything else that the under underscore
705:46 - underscore stir method can do
705:48 - um the other question is what's the
705:49 - difference between stir and wrapper a
705:51 - good question so there are many other
705:53 - methods that come with python classes
705:56 - that start with underscore underscore
705:57 - we're just scratching the surface and
705:59 - we'll pretty much Focus primarily on
706:00 - these but yes there are many others and
706:02 - we'll see at least one other in just a
706:04 - little bit there is an among the others
706:06 - is indeed one called uh repper which is
706:09 - a representation of the Python object
706:11 - generally speaking the underscore
706:13 - underscore repr underscore underscore
706:15 - method is meant for developers eyes it
706:17 - typically has more information than
706:19 - Harry from Gryffindor it would also say
706:21 - what type of object it is like a student
706:24 - capital S whereas underscore underscore
706:26 - stir underscore underscore is generally
706:28 - meant for users uh the users of the
706:30 - program and it's meant to be even more
706:32 - user friendly but both of those can be
706:34 - overridden as you see fit well let me
706:36 - propose now that we pick up where we've
706:38 - left off on student and just add even
706:40 - more functionality but not just these
706:42 - special methods like double underscore
706:45 - in it and double underscore stir like
706:46 - let's create our own methods because
706:48 - therein lies the real power and
706:50 - flexibility of classes if you and I as
706:52 - the programmers can invent new
706:54 - functionality that's specific to
706:56 - students for instance uh students at
706:58 - Hogwarts over the time in in school
707:00 - learn how to cast a certain type of
707:02 - spell so when they say expecto patronum
707:05 - something comes out of their wand that
707:07 - typically resembles an animal or
707:08 - something like that it's a special spell
707:10 - that they have to practice and practice
707:11 - so let's see if we can't store not just
707:14 - a student's name and their house but
707:16 - also their Patronus what actually they
707:18 - conjure when using this spell well let
707:21 - me go ahead and clear my terminal window
707:22 - and in the top of my code here in the
707:25 - init method of student let me go ahead
707:28 - and start expecting a third argument in
707:31 - addition to self which automatically
707:32 - gets passed in called Patronus and I'm
707:35 - not going to worry uh for now on
707:37 - validating the Patronus from an official
707:39 - list of valid patronuses or patroni I'm
707:42 - instead going to go ahead and just
707:43 - blindly assign it to self.patronus
707:46 - equals Patronus and we're going to let
707:48 - the user type whatever they want for now
707:50 - but I could certainly add more error
707:52 - checking if I wanted to limit the
707:54 - patronuses to a specific list of them
707:56 - here let me go ahead now and prompt the
707:59 - user for this Patronus as by in my get
708:02 - student method get student function
708:04 - defining a variable called Patronus or
708:06 - anything else prompting the user for
708:08 - input for their Patronus and now I'm
708:10 - going to go ahead and pass in that third
708:12 - variable here so again similar in spirit
708:15 - to just adding more and more attributes
708:17 - to the class I'm going to pass in all
708:19 - three of these values instead of just
708:21 - two I'm not going to do anything
708:22 - interesting with that value yet but just
708:24 - to make sure I haven't made things worse
708:26 - by breaking my code let me run python of
708:28 - student.pi I'll type in Harry I'll type
708:31 - in Gryffindor and it turns out his
708:33 - Patronus was a stag and hit enter I
708:35 - haven't seen what his Patronus is in my
708:37 - output because I didn't change my stir
708:39 - method yet but at least I don't have any
708:41 - syntax error so at least I've not made
708:43 - anything worse but suppose now I want to
708:47 - have functionality not just for
708:48 - initializing a student and printing out
708:50 - a student if my class is really meant to
708:53 - be a student what I can do is not just
708:56 - remember information about data about
708:58 - students what's powerful about classes
709:01 - unlike dictionaries alone is that
709:03 - classes can have not just variables or
709:07 - instance variables so to speak those
709:08 - attributes we keep creating they can
709:10 - also have functions built in AKA methods
709:14 - when a function is inside of a class
709:16 - it's called a method but it's still just
709:18 - a function at this point we've seen two
709:21 - functions already two methods called a
709:23 - double underscore in it and double
709:25 - underscore stir but those are special
709:27 - methods in that they just work if you
709:30 - define them python calls them
709:31 - automatically for you but what if you
709:34 - wanted to create more functionality for
709:36 - a student so that your class really
709:38 - represents this real world or maybe
709:40 - fantasy world notion of a student where
709:43 - students not only have names and houses
709:44 - and patronuses they also have
709:47 - functionality they have actions they can
709:49 - perform like casting a charm a spell
709:53 - magically could we Implement therefore a
709:56 - function called charm that actually uses
709:59 - their magical knowledge well let's go
710:02 - ahead and Define our very own function
710:04 - as follows Let Me Clear My terminal
710:06 - window scroll back up to my student
710:08 - class and instead of creating yet
710:11 - another function that's special with
710:13 - double underscores I'm going to invent
710:15 - my own function or method inside of this
710:18 - class I want to give Harry and Hermione
710:21 - and all of the other students the
710:23 - ability to cast charms so I'm going to
710:25 - define a function that I can completely
710:27 - on my own called Charmed I could call
710:29 - this function anything I want but
710:31 - because it's a method inside of a class
710:33 - the convention is that it's always going
710:35 - to take at least one argument called
710:37 - self by convention so that you you have
710:40 - access to the current object even if you
710:43 - don't plan to use it per se all right
710:45 - let me go ahead and propose that we
710:46 - Implement charm in such a way that the
710:49 - method returns an emoji that's
710:51 - appropriate for each student's Patronus
710:54 - all right how to implement this well
710:56 - inside of the charm method let's go
710:58 - ahead and match on
710:59 - self.patronus which is the instance
711:01 - variable containing a string that
711:03 - represents each student's Patronus and
711:05 - in the case that it matches a stag for
711:08 - instance for Harry let's go ahead and
711:10 - return maybe the closest Emoji this
711:12 - horse here
711:13 - how about in the case of an otter well
711:16 - in that case let's go ahead and return
711:18 - oh maybe the closest match to the otter
711:22 - which might be this Emoji here and let's
711:25 - see in the case of a for for Ron rather
711:28 - than Hermione a Jack Russell Terrier
711:31 - let's go ahead and return how about
711:34 - don't have as many options here why
711:36 - don't we go ahead and return the cutest
711:38 - available dog in that case and in the
711:41 - case of
711:43 - no Patronus recognized as my cover
711:46 - someone like Draco let's go ahead and
711:48 - use a default case using the underscores
711:50 - as in the past and let's go ahead and
711:52 - return for this oh what should happen if
711:54 - someone doesn't have a Patronus why
711:56 - don't we just see a magical wand that
711:58 - seems to fizzle out as in this case all
712:01 - right well now rather than just print
712:02 - the student let's go about printing
712:04 - their actual Patronus so I'm going to go
712:05 - down to my main function here I'm going
712:08 - to still get a student using the get
712:09 - student function but rather than print
712:12 - student let's go ahead and declare
712:13 - expecto patronum printing out just that
712:17 - as pure text and now let's go ahead and
712:20 - print out not the student but rather the
712:22 - return value of their own charm Method
712:25 - All right so let me go back down to my
712:27 - terminal window and run python of
712:29 - student.pi and enter name let's start
712:32 - with Harry he lives in Gryffindor
712:35 - Patronus is a stag and let's see expecto
712:38 - patronum and of course we see the Stag
712:41 - Emoji what about someone Mike Draco who
712:44 - at least in the books doesn't have a
712:46 - known Patronus well let's go ahead and
712:48 - clear my terminal window rerun python of
712:50 - student.pi and this time let's type in
712:52 - Draco for name Slytherin for house and
712:56 - Patronus is unknown so I'm just going to
712:58 - go ahead and hit enter and now expecto
713:00 - patronum and just kind of sizzles
713:03 - instead questions now on what I've done
713:07 - by implementing this charm method
713:11 - can be like call a method outside the
713:14 - function absolutely and we're seeing
713:16 - that already if I scroll back down to my
713:18 - main function which is outside of the
713:21 - class because it's all the way down in
713:22 - the file it's all left aligned just like
713:24 - the class notice on line 28 I'm calling
713:28 - student.charm and I'm accessing a method
713:31 - that's inside of the student object even
713:34 - though my main function is outside of
713:36 - the class
713:37 - and what's different between our init
713:40 - function or method and our stir method
713:44 - that we've seen before those are called
713:46 - automatically when you try to create a
713:48 - student or when you try to print a
713:50 - student for the first time we're now
713:52 - seeing a method that I invented inside
713:54 - of the student class that I can call
713:56 - anywhere I want and if I'm calling it
713:58 - outside of the class like I am here I
714:00 - just use the name of the variable
714:02 - containing that student object and I
714:04 - just dot charm just like I could access
714:06 - the individual attributes or in instance
714:09 - variables inside of that object as well
714:12 - other questions on classes and this new
714:16 - method charm you know parentheses you uh
714:20 - you put yourself supposed to be like a
714:22 - initializer but like in the top part you
714:25 - didn't you didn't um Define it the same
714:28 - way would you have to put the class on
714:30 - why you didn't put the class right there
714:32 - so notice the indentation here so on
714:34 - line one I've of course said class
714:36 - student colon and then everything below
714:38 - that is indented at the moment that
714:40 - means that my init method my stir method
714:43 - and this new Char method are all inside
714:45 - of part of that class
714:47 - by convention then each of these methods
714:50 - inside of a class should expect that
714:53 - python will automatically pass in at
714:55 - least one argument to every method in a
714:57 - class and that argument will always be a
715:00 - reference to the current object the
715:03 - hairy object or the Draco object that is
715:06 - currently trying to cast a charm or be
715:08 - printed so whenever you create a method
715:11 - inside of a class you should always have
715:13 - it take at least one argument called
715:15 - self and then zero or more other
715:17 - arguments that are entirely up to you in
715:20 - it for instance takes three more name
715:22 - house Patronus stir takes zero more
715:24 - charm takes zero more but the convention
715:27 - is to always call that default argument
715:29 - self and python just automatically gives
715:32 - you access to the current object
715:35 - other questions how about one more on
715:38 - classes and charms so I just wanted to
715:41 - ask that you have put the emojis in
715:43 - double quotes So does it take the Emojis
715:47 - as the form of strings or something else
715:49 - yes if uh unfamiliar an emoji is just a
715:52 - character it's part of a mapping of
715:55 - numbers to letters known as Unicode and
715:58 - so whenever you see these emoji on the
716:00 - screen like the horse or the otter or
716:03 - the dog here specifically that's really
716:05 - just like a key from your keyboard you
716:07 - and I on Max and PCs can't typically
716:08 - type it because you see English
716:10 - characters or some other human language
716:12 - but Emoji are increasingly available uh
716:15 - via menus and drop down and in my case
716:18 - copy paste on Macs and PCs and Android
716:20 - devices and iPhones they are just
716:22 - characters even though they look like
716:23 - pictures you can think of it like a
716:25 - graphical font almost so they're just
716:27 - text and indeed if you put them between
716:29 - double quotes or single quotes you can
716:31 - print Emoji just like you can any other
716:33 - human character as well
716:35 - well let me propose now that we remove
716:39 - this Patronus code just to simplify our
716:42 - world and focus on some of the other
716:44 - core capabilities of classes so at the
716:46 - risk of disappointing I'm going to get
716:48 - rid of all of these beautiful emoji and
716:50 - charms and I'm going to go ahead and
716:52 - stop asking the user now for their
716:54 - Patronus and I'm going to stop passing
716:56 - it into in it here and I'm going to stop
716:58 - uh doing this here and I'm going to
717:01 - instead just go ahead and restore our
717:04 - use of print student here and I'm going
717:07 - to go ahead and get rid of Patronus down
717:09 - here so it's essentially undo all of the
717:11 - fun charms we just created so we're now
717:14 - back at the point in the story where we
717:17 - have a student class with only two
717:20 - methods in it and stir the first of
717:23 - those takes of course self as the first
717:24 - argument as it always will plus two more
717:27 - now name and house no more Patronus
717:29 - we're validating name up here we're
717:31 - validating house down here and then
717:33 - we're assigning name and house
717:34 - respectively to two in distance
717:36 - variables called name and house also but
717:38 - we used self to get access to the
717:41 - current object to store those values
717:43 - they're in we then still have our stir
717:45 - method here which takes one argument by
717:47 - default self and that's it and that
717:49 - function is going to be called
717:50 - automatically anytime you want to
717:53 - convert a student object to a string
717:55 - just like print might want to do here so
717:58 - let me go ahead and just make sure I
717:59 - haven't broken anything let me run
718:01 - python of student.pi I'll type in Harry
718:03 - I'll type in Gryffindor enter okay we're
718:06 - back in business gone are the charms and
718:08 - patronuses but at least I'm back to a
718:10 - situation where I have names and houses
718:12 - but it turns out at the moment our use
718:16 - of classes is not very robust even
718:19 - though we have this mechanism very
718:22 - cleverly if I may in our init method of
718:25 - making sure that we're validating name
718:27 - and house making sure that name is not
718:29 - blank and making sure that house is a
718:32 - valid house among those four Hogwarts
718:34 - houses
718:35 - it turns out that classes will still let
718:38 - me get at those attributes those
718:40 - so-called instance variables using dot
718:42 - notation anyway let me scroll down then
718:44 - and try to do this a little
718:46 - adversarially suppose that on line 16 I
718:49 - go ahead and call get students which
718:51 - exists as before and then I store the
718:54 - return value in a student variable again
718:56 - on line 16. that will ensure that get
719:00 - student gets called which calls input
719:02 - and input and then it calls the student
719:05 - Constructor which invokes automatically
719:07 - this init method so by way of how we've
719:09 - laid out my code we're going to ensure
719:12 - that name is not blank and house is
719:14 - definitely one of those four values my
719:16 - error correction or error checking is in
719:18 - place
719:19 - but if I'm a little adversarial I can
719:22 - still circumvent it suppose that fine
719:24 - I'm gonna you're gonna require me to
719:27 - type in Harry and Gryffindor I'm going
719:28 - to go ahead and type in student dot
719:30 - house equals quote unquote number four
719:33 - privet drive and you're not going to be
719:35 - able to stop me why well it turns out
719:38 - with classes and objects thereof you and
719:40 - I can still access those instance
719:42 - variables using this familiar dot
719:44 - notation that's how we began the story
719:46 - of classes just setting these attributes
719:48 - ourselves but you can also read these
719:50 - attributes themselves and change them
719:52 - later if you want and this will
719:54 - effectively circumvent the if condition
719:57 - and the other if condition in our init
719:59 - method because that is only called when
720:02 - you first create the student object
720:04 - there's nothing stopping me at the
720:06 - moment from just changing the house or
720:10 - the name after so if I now clear my
720:13 - terminal window and run python of
720:14 - student.pi I'll still type in Harry and
720:17 - Gryffindor to meet my requirements that
720:19 - the house be one of those four but when
720:21 - it's printed notice I've still
720:23 - overridden it so it seems that while
720:26 - classes do allow us a little more
720:27 - control over the data we're storing it
720:30 - doesn't necessarily prevent the user be
720:33 - it rather the programmer be it myself or
720:35 - maybe a colleague from still kind of
720:37 - messing things up so here too in the
720:40 - spirit of programming a little more
720:42 - defensively allow me to introduce
720:44 - another feature of python as well namely
720:47 - properties
720:49 - so a property is really just an
720:51 - attribute that has even more defense
720:54 - mechanisms put into place a little more
720:56 - functionality implemented by you to
720:59 - prevent programmers like me and you for
721:02 - messing things up like these attributes
721:03 - so again a property is going to be an
721:06 - attribute that you and I just have more
721:07 - control over how we just write a little
721:10 - more code using some python conventions
721:12 - and how we're going to do that is going
721:15 - to use in just a moment a feature a
721:17 - keyword known as app property which is
721:19 - technically a function property is a
721:21 - function in Python but we're about to
721:23 - see some new at syntax that allows you
721:26 - to decorate functions and this too is a
721:28 - term of Art in the world of python you
721:30 - can have decorators which are functions
721:33 - that modify the behavior of other
721:35 - functions if you will and we'll leave it
721:37 - at that without going too much into the
721:39 - weeds and we'll see by example how you
721:41 - can use these decorators specifically to
721:43 - define properties so let me go back to
721:45 - vs code here and let me propose that I
721:48 - do this I'm going to go ahead and create
721:52 - how about a property called house as
721:56 - follows inside of my student class I'm
722:01 - going to go ahead and below my init
722:03 - method and below my stir method I'm
722:05 - going to go ahead and Define a function
722:07 - called house that takes as it always
722:10 - must one argument at least called self
722:13 - and what I'm going to do now is return
722:15 - self dot house so I'm just going to
722:19 - define a method called House whose sole
722:21 - purpose in life is to return the value
722:25 - of house but I'm going to Define one
722:27 - other method curiously also call it
722:30 - house but that's going to take into as
722:32 - arguments two values self as always and
722:36 - also a value called house and I'm going
722:39 - to now do this I'm going to say sell uh
722:42 - rather I'm going to do self dot house
722:45 - equals house now what have I done well
722:48 - let me just temporarily add some
722:49 - comments here in a moment we're going to
722:51 - start referring to this generally as a
722:53 - getter and down here I'm going to refer
722:55 - to this as a Setter and this is
722:57 - terminology you frequently see in the
722:58 - world of java if some of you have
723:00 - programmed in Java before but as the
723:02 - names imply a getter is a function for a
723:05 - class that gets some attribute a Setter
723:09 - is a function in some class that sets
723:12 - some value and now even though we're not
723:14 - done and there's a bit of a mistake in
723:16 - the code I've already written
723:18 - intuitively what we're going to do is
723:20 - this we're trying to prevent programmers
723:22 - myself included from circumventing my
723:25 - error checking that I put into place for
723:27 - name and house how can I do that well we
723:30 - don't have that many building blocks in
723:31 - programming we've had things like
723:33 - variables for data and we have functions
723:35 - for actions well why don't we do this
723:37 - why don't we somehow require that in
723:41 - order to access an attribute you go
723:43 - through some function and let's require
723:45 - that in order to set some attribute you
723:47 - go through some function and
723:50 - conventionally those functions are
723:52 - called a getter function and a Setter
723:54 - function and why are we using functions
723:57 - or in this case methods inside of a
723:59 - class well once you have functions those
724:01 - are just actions or verbs that you and I
724:03 - can create ourselves we can put any
724:05 - error correction I want in these
724:07 - functions because it's code that's going
724:09 - to get executed top to bottom so how can
724:12 - I now prevent the user from setting the
724:16 - house to an invalid value let me borrow
724:19 - some logic from before rather than
724:21 - blindly do this just set self.house
724:24 - equal to the house value that's passed
724:27 - in let's add our error checking there so
724:29 - if house is not in the following list of
724:33 - Gryffindor or Hufflepuff
724:36 - or Slither or
724:39 - Ravenclaw or Slytherin just as before
724:43 - let's go ahead and raise a value error
724:45 - just to signify that uh something has
724:47 - gone wrong I'll be more explicit I'll
724:49 - include a message like invalid house
724:51 - quote unquote otherwise I'm going to
724:55 - proceed on now line 21 to set self.house
724:58 - to house so I've just copied if you will
725:00 - or retyped my error checking inside of
725:03 - this so-called Setter function now why
725:06 - have I done that well to be clear
725:07 - whenever the user or the programmer
725:10 - writes code like this student dot house
725:13 - equals what's about to happen magically
725:17 - is python will not just let the
725:19 - programmer access student.house directly
725:21 - that attribute that instance variable
725:24 - AKA self.house it's instead going to
725:27 - magically automatically call this Setter
725:30 - function for me how does python know to
725:32 - do that well if it sees that on the left
725:35 - hand side there is self.house where
725:38 - house is the name of the getter or
725:42 - Setter and then it sees an equal sign
725:44 - indicating assignment that's just enough
725:47 - of a visual clue to say wait a minute
725:49 - I'm not going to let you access that
725:51 - attribute directly I'm going to use the
725:53 - setter instead why because the equal
725:55 - sign means I'm trying to set I'm trying
725:57 - to assign a value from right to left
725:59 - into that attribute so what python is
726:02 - going to do automatically is call this
726:04 - function for me and that's amazing
726:05 - because now I can execute code an
726:08 - algorithm to check do I want to let the
726:11 - user the programmer set that attribute
726:13 - to that value if not I'm going to raise
726:16 - a value error and you're just not going
726:17 - to be able to do it if so fine I'll go
726:20 - ahead and set it for you but in order to
726:23 - do this we need a little more syntax and
726:25 - I'm going to get rid of my comment and
726:26 - I'm going to use that decorator I need
726:28 - to tell python to treat this method as a
726:31 - getter and then the Syntax for the
726:33 - setter is a little different you now say
726:35 - house dot Setter I wish one was getter
726:38 - and the other was Setter that's not the
726:41 - way they designed it when you want to
726:43 - define a getter you just say at property
726:45 - above the function and you name the
726:48 - function exactly like you would like the
726:51 - property to be called quote unquote
726:52 - house
726:53 - once you do that you can now use a new
726:56 - decorator that sort of automatically
726:58 - created for you called at house because
727:00 - I called it house and then you literally
727:02 - say at house.setter and this whole line
727:05 - on line 17 is a clue to python that here
727:09 - comes a function whose name is identical
727:11 - but notice that it takes two arguments
727:14 - both self so you have access to the
727:15 - contents of the object and house which
727:17 - is just going to be a stir that comes
727:19 - from the programmer from like the human
727:21 - input return value so that you can set
727:24 - that value as well
727:26 - but there's one fix I need to make now
727:29 - here everything else I think is still
727:32 - good however watch this I no longer need
727:35 - this error check here why because if I
727:40 - scroll back down to my code here I
727:42 - claimed a moment ago that code like this
727:45 - with
727:46 - uh student.house equals is going to
727:49 - automatically get python to call my
727:51 - Setter for me guess what even up here in
727:55 - my init method calling self.house equals
727:58 - is also going to call my Setter method
728:01 - which is amazing because now I can keep
728:04 - all of my error checking in one place in
728:08 - the setter and it will now get called
728:10 - either when I create the object for the
728:13 - first time because of init or even if
728:16 - the you the programmer tries to
728:18 - circumvent that init method and change
728:20 - the value of this attribute my Setter
728:23 - will also get called my Setter will get
728:25 - called anytime I access dot house
728:28 - but there's one fix I need to make
728:31 - unfortunately I have collided names
728:35 - right now if we go up here on line five
728:39 - this is an instance variable it's a
728:41 - string inside of myself inside of the
728:44 - current student object called name and
728:46 - this is another instance variable
728:48 - called House unfortunately if I have an
728:51 - instance variable called name and house
728:53 - I cannot also have functions called
728:57 - house they're going to collide you got
728:59 - to decide do you want the variable to be
729:01 - called house or do you want the function
729:03 - to be called House unfortunately you
729:05 - can't have both because now Python's
729:07 - going to confuse one for the other so
729:09 - the conventional fix for this is to do
729:11 - this to have the setter not store the
729:15 - value that's passed in in self.house but
729:18 - to use an almost identical name but to
729:20 - use a little indicator that you means
729:22 - you know you're doing this correctly you
729:24 - typically by convention put an
729:26 - underscore in front of the instance
729:28 - variable's name and when you return it
729:31 - up here you similarly put an underscore
729:33 - so now technically my instance variable
729:37 - is called underscore house but my
729:40 - property which is a fancier attribute if
729:44 - you will is called house alone
729:47 - huge amount of syntax I know but it's a
729:50 - very powerful feature and again this is
729:52 - why you can graduate from dictionaries
729:54 - alone and have so much more
729:56 - functionality at your disposal let me go
729:59 - ahead and clear my terminal window and
730:00 - run python of student.pi enter name all
730:03 - right let's go ahead and type in Harry
730:05 - let's go ahead and type in Gryffindor
730:07 - crossing my fingers as always and now
730:09 - look invalid house this is a good thing
730:13 - why because notice in my main function
730:16 - I'm still trying maliciously if you will
730:19 - to change Harry's house to not be one of
730:23 - the four valid ones I'm trying to change
730:24 - it to his childhood home of number four
730:26 - privet drive but because python knows
730:29 - that wait a minute you're trying to
730:31 - assign that is set of value and that
730:34 - value AKA house is now defined as a
730:37 - property you're going to have to go
730:39 - through the setter function instead to
730:41 - even let you change that value and
730:44 - because I have this raise value error if
730:47 - the house is not as intended you're not
730:50 - going to be allowed to change it to an
730:51 - invalid value so I'm protecting the data
730:53 - on the way in through the init method
730:55 - and I'm even defending the data if you
730:58 - try to override it there so I think the
731:00 - only solution for me the programmer is
731:02 - don't try to break my own code let me
731:04 - remove that line because it's just not
731:06 - going to work let me run python of
731:08 - student.pi and again type in Harry type
731:10 - in Gryffindor enter and Harry is indeed
731:13 - from Gryffindor if I did something
731:14 - incorrect like Harry from number four
731:18 - privet Drive enter we're again going to
731:22 - see the value error because my code just
731:24 - doesn't let that value in Via manual
731:27 - input now or via that adversarial change
731:31 - all right that was a lot but any
731:33 - question on
731:34 - properties
731:37 - uh while we are using Getters and
731:39 - Setters it's just for the purpose so
731:41 - that we can find our
731:43 - um that function that method that
731:45 - function in in our code the reason that
731:48 - I'm going through the trouble of
731:49 - defining this getter or Setter is
731:51 - because I want to make sure that
731:53 - programmers cannot do things like this
731:56 - if I'm going through the trouble of
731:57 - validating the attributes for these
732:00 - student objects I don't want you to be
732:02 - able to go in there and just change them
732:04 - at will I want to have some control over
732:06 - that object so that you can just trust
732:08 - that it's going to be correct as
732:09 - designed so using a getter and Setter
732:12 - really just enables python to
732:14 - automatically detect when you're trying
732:16 - to manually set a value the equal sign
732:19 - and the dot as I've highlighted here is
732:21 - enough of a clue to python to realize
732:23 - wait a minute you're trying to set a
732:24 - value let me see if this class has a
732:26 - Setter defined and if so I'm going to
732:28 - call that and I'm not just going to
732:30 - blindly assign the value from right to
732:32 - left so it's just giving me more control
732:35 - other questions on properties when we
732:38 - use a Getters we just have just one
732:41 - argument and if we use Setters is always
732:44 - going to be two arguments it's not
732:46 - normal
732:47 - correct it's always going to be one
732:49 - argument self for the getter two
732:52 - arguments for the setter self and
732:54 - something else and the intuition for
732:56 - that is if you're getting a value you
732:58 - don't need to pass anything else in
732:59 - because you already know the object it's
733:01 - called student in this case so you're
733:03 - just going to get the value of that
733:04 - property but if you want to set the
733:07 - property to something else you got to
733:09 - pass in that argument you've got to pass
733:11 - in the value to which you want to set it
733:12 - so it's always zero or one however you
733:15 - see it as one or two because again any
733:18 - function inside of a class AKA a method
733:21 - is going to be automatically passed self
733:23 - so that you have access to that current
733:26 - object in memory how about one other
733:28 - question on properties why didn't we use
733:32 - the same underscore house in init method
733:35 - a good question so even though I'm using
733:37 - the underscore house here in my Setter
733:39 - and the underscore house here in my
733:41 - getter I deliberately did not use it up
733:44 - here the reason for that is that by
733:47 - using self.house and this equal sign
733:50 - that's the same pattern that I want
733:52 - python to recognize I want python to
733:54 - automatically call the setter even when
733:57 - I'm passing in the house via the init
733:59 - method if I were to change this to do
734:01 - this that would circumvent the setter
734:04 - and now there's no error checking in in
734:06 - it whatsoever so it's such a fine line
734:09 - the only thing standing between us and
734:11 - error checking or no error checking is
734:13 - the presence or absence of this
734:15 - underscore but that's typically the
734:17 - convention by not using the underscore
734:19 - there make sure that even that
734:21 - assignment goes through the setter so
734:23 - that honestly I don't have to copy paste
734:24 - the same error checking in two places I
734:26 - can put it just in this Setter so it's
734:28 - better design and that's why I manually
734:30 - retyped it at first but then I deleted
734:32 - it from init well allow me to propose
734:35 - that we make one other change to this
734:37 - file might as well go ahead and Define a
734:39 - property for name as well and let me go
734:42 - ahead and do this maybe above the house
734:43 - property just to keep things in the same
734:46 - order as I defined them earlier let me
734:48 - give myself another property this one's
734:50 - going to be called name it's going to
734:52 - take one argument called self as always
734:54 - and this one very similarly is just
734:56 - going to return self dot underscore name
734:58 - so I'm going to anticipate that I'm
735:00 - going to have to rename name also so
735:02 - that I don't have that same Collision as
735:04 - before but now let me go ahead and
735:06 - Define another setter this one for name
735:09 - so the convention is at name dot Setter
735:12 - y name because the property I just
735:15 - created is called name so the getter and
735:18 - Setter sort of work in conjunction in
735:20 - that in this way if you will let me go
735:22 - down under at name Setter and Define
735:24 - another function also called name but
735:26 - the key thing here is that it's not not
735:28 - identical it's not the exact same
735:30 - function name and the exact same number
735:32 - of arguments the setter again takes a
735:34 - second argument and I can call it
735:36 - anything I want but I'm going to call it
735:37 - name because that's what's being passed
735:39 - in and I'm going to air put my error
735:41 - checking here if not name just like we
735:43 - used to do let's go ahead and raise a
735:45 - value error and let's put an explanatory
735:48 - message like uh Missing name quote
735:50 - unquote otherwise let's go ahead and
735:53 - update self dot underscore name to equal
735:57 - name and I don't have to change in it
736:00 - except to get rid of this duplicate
736:02 - error checking now because again if I
736:05 - use self.name equals here and self.house
736:09 - equals here with no underscore both of
736:12 - those assignments are going to go
736:13 - through my two Setter functions now
736:16 - before we run this let me go ahead and
736:17 - remove this adversarial code which we
736:19 - know won't work because we're catching
736:21 - it let me go back down to my terminal
736:23 - window and run python of student.pi
736:25 - enter let's type in Harry let's type in
736:27 - Gryffindor and that seems to work let's
736:30 - try though again to run python of
736:31 - student.pi with Harry from number four
736:34 - privet drive this will not work a value
736:37 - error with invalid house because that's
736:40 - not one of the four Hogwarts houses and
736:42 - now for good measure let's run it one
736:43 - more time and let's not even give it a
736:45 - name let's just hit enter when prompted
736:47 - I can type anything for the house I'll
736:49 - go ahead and still give it Gryffindor
736:50 - enter now we get another value error but
736:53 - this one is for missing name
736:55 - so we seem now to have all the more of a
736:58 - defense mechanism in place to ensure
737:00 - that name is as we expect it's got to
737:02 - have some value that's not blank and
737:04 - houses as we expect it's got to have one
737:06 - of those four values
737:07 - but at the risk of bursting everyone's
737:10 - bubble and making you wonder why did we
737:12 - just go through all of that
737:15 - unfortunately python really focuses on
737:18 - conventions not hard constraints and by
737:22 - that I mean this if I go back into my
737:24 - main function after I've gotten a
737:26 - student on line 30 and I try to
737:29 - adversarially do something like this
737:31 - student.house equals quote unquote
737:33 - number four privet drive we know this
737:36 - won't work because my Setter for house
737:39 - is going to catch this watch again
737:40 - python of student.pi uh let's type in
737:44 - Harry let's type in Gryffindor which
737:46 - will at least pass our check that's
737:48 - induced by init but line 31 is going to
737:52 - trigger the same Setter to be called and
737:55 - we're going to raise a value error
737:56 - saying invalid house
737:58 - unfortunately and if some of you are
738:01 - already thinking a little adversarily
738:03 - tragically look what you can do you can
738:05 - change dot house to be dot underscore
738:08 - house why will the instance variable is
738:10 - now called underscore house the property
738:14 - is called house no underscore but the
738:16 - underlying attribute implemented as an
738:18 - instance variable is still called
738:21 - underscore house and tragically python
738:25 - of student.pi let's type in Harry let's
738:28 - type in Gryffindor which is correct but
738:30 - Watch What Happens now oh my God we
738:33 - slipped through
738:35 - so what was the point of all of this
738:37 - emphasis from me on doing things the
738:39 - right way the pythonic way by having
738:41 - this getter and Setter well unlike
738:44 - languages like Java that just prevent
738:46 - you from doing things like this python
738:49 - itself allows you to specify that
738:50 - certain instance variables can be public
738:52 - and accessible to anyone's code or
738:54 - protected or private which means that no
738:57 - one else should be able to change these
738:59 - values in the world of python it's just
739:02 - the honor System it's not baked into the
739:04 - language itself that there's a notion of
739:06 - visibility public or private or even
739:07 - somewhere in between protected instead
739:09 - you're on the honor System and the
739:11 - convention generally is if a instance
739:14 - variable starts with an underscore
739:16 - please don't touch it like just don't
739:19 - like that's on you if you touch that
739:21 - variable and break things the underscore
739:23 - is meant to signify a convention that
739:25 - this is meant to be private but it
739:27 - really just means please don't touch
739:28 - this sometimes if there's two
739:29 - underscores which you can use too that's
739:31 - an even greater effort by programmers to
739:33 - say really don't touch this but but
739:35 - technically speaking there's nothing
739:36 - stopping you or me from circumventing
739:39 - all of these mechanisms these properties
739:41 - these Getters and Setters were
739:43 - ultimately just on the honor System not
739:45 - to do so when we see instance variables
739:47 - prefixed with one or perhaps even two
739:50 - underscores all right so this is a lot
739:52 - all at once this introduction to object
739:54 - oriented programming but it might come
739:57 - as quite a surprise that even though we
739:59 - might have identified oop by name in
740:02 - weeks past we've all been using classes
740:06 - and objects for weeks now in this class
740:08 - in fact if you think back on one of the
740:10 - very first things we did in this class
740:11 - we used integers and just got integers
740:13 - from the user but if you haven't already
740:16 - if you go and dig into the documentation
740:19 - for integers which again lives at this
740:21 - URL here you would actually find that
740:24 - int itself is and has been for weeks a
740:28 - class and in fact this is the signature
740:31 - of the Constructor call for an INT
740:33 - whereby you pass in X like a number
740:36 - quote unquote 50 or quote unquote
740:38 - something else you pass in optionally
740:40 - the base 10 for decimal 2 for binary or
740:43 - anything else and that int function will
740:46 - actually return to you all this time an
740:49 - object of type int that is to say int is
740:54 - a class it is a template a blueprint for
740:56 - creating integers in memory and anytime
740:59 - you and I have converted a string for
741:00 - instance to an INT you and I have been
741:03 - creating an object of type int that was
741:06 - calling apparently the underscore
741:08 - underscore in it underscore underscore
741:10 - method that someone else the authors of
741:12 - python wrote to give us back that proper
741:14 - integer besides that if you can believe
741:17 - it stirs strings in Python have been
741:19 - classes since the first week of this
741:21 - class as well if you look up the
741:23 - documentation for a stir which lives at
741:25 - a similar URL there you will find that
741:28 - when you instantiate that is create a
741:30 - stirrer it takes optionally a parameter
741:34 - called object here the default value of
741:36 - which is just quote unquote which allows
741:38 - you to create an effect an empty string
741:40 - a blank string if you will but any time
741:42 - you and I have created stirs or even
741:44 - used explicitly this stir function you
741:46 - are getting back an object of type stir
741:50 - anytime you and I have forced a string
741:52 - to lowercase per the documentation using
741:55 - syntax like this you and I have been
741:58 - taking an object of type stir and
742:01 - forcing it all to lower case by calling
742:03 - a method called Lower a method that the
742:07 - authors of pyekathon built into the stir
742:10 - class but it's been there from the
742:12 - get-go so this notion of methods is not
742:14 - even new today you and I've been doing
742:15 - it for this long if you've ever called
742:17 - strip to remove the leading in the
742:19 - trailing white space from a string in
742:21 - Python you are calling another method
742:23 - that came with python written by the
742:25 - authors of python and even though we
742:27 - didn't call it a class at the time a
742:29 - stir all this time has been a class and
742:33 - instances of strings are themselves
742:35 - objects and those objects come therefore
742:38 - with these functions built in AKA
742:40 - methods that allow us to do things like
742:42 - force to lower case and strip white
742:44 - space from the beginning and end let's
742:46 - do another list anytime you've created a
742:49 - list either either syntactically with
742:52 - square brackets or literally with list
742:54 - open parenthesis close parenthesis which
742:56 - is also possible you have been using a
742:58 - class if you go to the documentation for
743:00 - list at this similar URL here or more
743:03 - specifically the tutorial on lists here
743:06 - in Python you will see that a list is
743:09 - and has been since the early weeks of
743:11 - this class A Class itself and that clist
743:15 - class takes as part of its uh
743:18 - initialization and optional iterable
743:20 - something that can be iterated over like
743:22 - one comma two comma three or some list
743:24 - of values and you can then get back a
743:27 - list containing those same iterable
743:29 - values if you've ever appended something
743:32 - to a list in this class as I have myself
743:34 - in the past you've been using a method
743:36 - call depend that comes with the list
743:39 - class that per the X here takes an
743:41 - argument that allows you to append
743:42 - something to the current list AKA self
743:46 - in the context of that method we can do
743:48 - this all day long if you've used a
743:50 - dictionary or a dict in Python I've
743:52 - actually all this time been calling them
743:54 -  objects and that's for a reason
743:57 - dict itself is a class in Python if you
743:59 - pull up its official documentation here
744:01 - and you'll see that it is defined indeed
744:04 - as itself a class and that class comes
744:07 - with methods as well and so anytime
744:08 - we've manipulated dictionaries we've
744:10 - been in underneath the hood using all of
744:13 - those same methods and in fact we can
744:15 - see this if we're really curious let me
744:17 - go back over here to vs code and let me
744:20 - go ahead and create a new file that very
744:22 - simply does something like play around
744:24 - with data types and let me go ahead and
744:26 - create a new file for instance called
744:28 - say type dot Pi just so that I can poke
744:31 - around inside of some values and type
744:34 - dot Pi I'm just going to go ahead and do
744:36 - this I'm going to print out whatever the
744:39 - type is of say the number 50. and this
744:41 - is a function you've not necessarily
744:43 - seen me use already and it's not one you
744:45 - would frequently use in your own code
744:47 - there are other ways to detect if you
744:49 - need to what the type is of a variable
744:51 - but in this case type of 50 is just
744:55 - going to tell me and then print out what
744:57 - the data type is of that value now
744:59 - hopefully all of us could guess that 50
745:00 - is indeed going to be an integer that is
745:02 - an INT but we can see it in this way and
745:05 - this too is what's powerful about
745:06 - knowing a bit of programming if you want
745:07 - to know the answer to a question just
745:09 - try it out like I am here so let me go
745:11 - ahead and run python of type.pi enter
745:13 - and there it is when you print out the
745:16 - type of the number 50 you'll see on the
745:19 - screen in this cryptic syntax class
745:22 - quote unquote int this is not something
745:24 - that you probably want to show to the
745:25 - user but if you yourself just want to
745:27 - poke around and see what's going on or
745:29 - maybe use that information somehow it's
745:32 - certainly at your disposal to use with
745:34 - this type function for that let's change
745:36 - it around a little bit instead of
745:38 - passing is the argument to type 50 as an
745:40 - INT let's type something also familiar
745:42 - like hello comma World in double or
745:45 - single quotes let me go back to my
745:47 - terminal window clear the screen and run
745:48 - python of type.pi again and now voila
745:51 - there it is all this time a stir is also
745:54 - a class we can do this a few more times
745:57 - for instance let's go ahead and change
745:58 - hello world to just an empty list open
746:02 - square bracket close square bracket and
746:04 - this is starting to look a little
746:05 - cryptic but again notice what I'm doing
746:07 - in square brackets is an empty list
746:09 - we've done that before that is the sole
746:12 - argument to this new type function and
746:15 - that's just being passed to the print
746:16 - function so that the return value of
746:19 - type is the argument to print so if I
746:21 - now run this code python of type.pi
746:24 - there it is a list is a class 2. you
746:27 - might recall that I said that you can
746:29 - also create an empty list by literally
746:31 - doing list open parenthesis close
746:33 - parenthesis this is a bit of an
746:35 - inconsistency as we can now identify
746:37 - that int and stir and Now list they're
746:41 - technically all lower case and I went to
746:43 - Great Lengths of creating my student
746:45 - class to have that capital S and that's
746:48 - a convention because int and stir and
746:51 - list and others come with python they
746:54 - decided to make their built-in data
746:57 - types even though their classes all
746:58 - lowercase but the convention the
747:00 - recommendation in the python Community
747:02 - when creating your classes is D2
747:04 - capitalize the first letter as I did in
747:06 - something like student capital S but
747:09 - list open parenthesis close parenthesis
747:11 - is identical to really just two empty
747:14 - square brackets if I clear my screen and
747:16 - run type.pi again you see the exact same
747:18 - thing the class is called list let's do
747:21 - one more let me change the list to B
747:23 - naught square brackets but curly braces
747:25 - we've done this before anytime I've done
747:27 - two curly braces with nothing in between
747:29 - this of course is an empty dictionary or
747:32 - a dict object in Python well we can see
747:35 - that now let me clear my screen run
747:36 - python of type.pi enter and there it is
747:39 - class dict it's been there this whole
747:41 - time we just didn't call it a class
747:43 - until today I can similarly do this one
747:46 - explicitly instead of two curly braces
747:48 - let's write out with two
747:50 - parentheses now we have a lot of
747:52 - parentheses again like with list but
747:54 - this is just making even more clear that
747:56 - the type of addict object is indeed the
747:59 - class dict itself
748:01 - so this is to say that is new as a lot
748:04 - of today's idea and syntax might be
748:05 - you've actually been using it perhaps
748:07 - unbeknownst to you for weeks now we now
748:10 - just have terminology to describe what
748:12 - it is we've been doing all this time and
748:14 - you now have the expressiveness with
748:16 - some practice to create your own classes
748:19 - inside of which are your own instance
748:21 - variables perhaps wrapped with those
748:22 - properties and your own instance methods
748:26 - but it turns out there's other types of
748:28 - methods in the world thus far I've been
748:31 - deliberate in calling all of our
748:33 - variables instance variables and all of
748:35 - our methods instance methods it turns
748:39 - out there's other types of variables and
748:42 - methods out there and one of those is
748:44 - called class methods it turns out that
748:47 - sometimes it's not really necessary or
748:50 - sensible to associate a function with
748:53 - objects of a class but rather with the
748:56 - class itself
748:57 - an instance or an object of a class is a
749:00 - very specific Incarnation thereof again
749:03 - on that neighborhood that has a lot of
749:04 - identical looking buildings but they're
749:06 - all a little bit different because of
749:08 - different paints and such sometimes you
749:10 - might have functionality related to each
749:13 - of those houses that isn't distinct or
749:15 - unique for any of the houses it's
749:17 - functionality that's going to be exactly
749:19 - the same no matter the house in question
749:21 - same in the world of object-oriented
749:24 - programming sometimes you want some
749:25 - functionality some action to be
749:27 - associated with the class itself no
749:30 - matter what the specific objects own
749:32 - values or instance variables are and for
749:35 - that we have a keyword called at class
749:38 - method this is another decorator really
749:40 - another function that you can use to
749:43 - specify that this method is not by
749:46 - default implicitly an instance method
749:48 - that has access to self the object
749:51 - itself this is a class method that's not
749:53 - going to have access to self but it does
749:55 - know what class it's inside so what do I
749:57 - mean mean by this well let me go back to
749:59 - vs code here and let me propose that we
750:01 - create a new file this time implementing
750:04 - the notion of a the Sorting Hat from the
750:06 - World of Harry Potter as well to stay on
750:08 - theme I'm going to go ahead and run code
750:10 - of hat.pi and in hat.pi let's implement
750:13 - the notion of this Sorting Hat if
750:15 - unfamiliar in the books and in the films
750:17 - there is literally a pointy hat that
750:20 - when a student put it on their head that
750:22 - Sorting Hat so to speak decides what
750:25 - house the student is in whether it's
750:26 - Gryffindor or something else so let's
750:28 - Implement encode this notion of a
750:30 - Sorting Hat such that when we pass to
750:33 - the Sorting Hat the name of a student
750:35 - like quote unquote Harry this Sorting
750:37 - Hat implemented in code will tell us
750:39 - what house that student should be in all
750:42 - right well let's go ahead and do this in
750:45 - hat.pi first let's go ahead and define a
750:48 - class called hat and then let's get back
750:51 - to implementing it itself and I find
750:53 - this to be a helpful technique not just
750:54 - with teaching but when writing code like
750:56 - I know I want a hack class I don't
750:58 - necessarily know what I want it to do
751:00 - yet so I'm going to create this sort of
751:01 - placeholder dot dot dot so I'll come
751:03 - back to that let's now try to use this
751:06 - class as though it existed and from
751:08 - there I perhaps can realize exactly what
751:11 - functionality that class needs to have
751:12 - to support my use case let me go ahead
751:15 - and create a variable called hat in all
751:16 - lower case and instantiate a hat object
751:20 - so no matter what the Hat class ends up
751:23 - looking like this is the common syntax
751:25 - for instantiating an object of a certain
751:28 - class in the past we saw student all
751:31 - lower case equals Capital student open
751:34 - parenthesis close parenthesis and then
751:36 - eventually we added in things like name
751:37 - and house for now let's assume that the
751:40 - hat is much simpler than a student and
751:42 - it only has sorting capabilities so I'm
751:44 - not going to even pass any arguments
751:46 - there too indeed let me assume that the
751:49 - Sorting Hat has one Function One method
751:53 - inside of it called sort and so if I do
751:55 - hat dot sort quote unquote Harry let's
751:59 - propose that that prints out what house
752:02 - that student should be in so that's it
752:05 - I'm going to encapsulate that is tuck
752:08 - away inside of a hat class all of this
752:10 - requisite functionality and I'm going to
752:13 - print out onto the screen what hat uh
752:15 - what house Harry belongs in all right
752:18 - now I think I need to get into the weeds
752:19 - of actually initializing this class well
752:23 - let me go ahead and do this if I don't
752:25 - care to parameterize hat I just want to
752:29 - for instance sort values let's go ahead
752:32 - and Define this function sort first so
752:35 - let's define sort as taking a first
752:37 - argument self which is always going to
752:39 - be the case when defining an instance
752:41 - method as before but the source method
752:43 - clearly takes one argument from the
752:45 - programmer me namely the student's name
752:48 - and again we've seen this dichotomy
752:50 - before even though I'm trying to pass in
752:52 - one argument when I Define the method
752:55 - it's got to take that many arguments
752:57 - plus one more self which is always going
752:59 - to be automatically passed in by python
753:01 - first all right what do I want to do
753:03 - well let's go ahead and do something
753:05 - like this print quote unquote or rather
753:09 - print this name how about quote unquote
753:12 - is in quote unquote some house I'm going
753:15 - to again use some placeholder code for
753:17 - myself because I'm not quite sure how to
753:19 - finish implementing this Sorting Hat but
753:21 - I think that's enough to just test where
753:23 - my code is at now let me go ahead and
753:25 - run python of hat.pi and hit enter and
753:29 - it looks like indeed Harry is in some
753:30 - house we're not done yet because it's
753:32 - clearly not doing anything interesting
753:34 - but it at least is running correctly
753:37 - with no errors
753:38 - well let's go ahead now and decide where
753:42 - uh what house Harry should actually be
753:44 - in by introducing a bit of Randomness
753:46 - and choosing a house randomly well I can
753:49 - do this in a few ways let me go ahead
753:50 - and do this I need to have a list of
753:53 - houses somewhere so where can I put that
753:55 - I could solve this problem in different
753:57 - ways let me propose that I do this let
753:59 - me Define a method called init as I've
754:01 - done before that takes in self but no
754:03 - other arguments and whenever the Sorting
754:05 - Hat is instantiated let's do this let's
754:07 - create a houses instance variable plural
754:11 - that equals this list Gryffindor comma
754:14 - Hufflepuff comma Ravenclaw comma
754:19 - Slytherin so the exact same list that
754:21 - we've used before and I'm storing it in
754:23 - an instance variable inside of this
754:25 - class I'm not taking any arguments
754:28 - Beyond self to in it but I just need
754:30 - this list of values somewhere for
754:32 - instance so what can I do here well let
754:35 - me go ahead and replace some house with
754:38 - the actual house well what could I do
754:40 - here well I want to put a house there
754:42 - well let's go ahead and create a
754:43 - variable called house and if you think
754:45 - back to our discussion of libraries in
754:48 - the random module there is a function
754:50 - called choice that if you pass in a list
754:53 - of choices like self.houses that will
754:57 - pick a random house out of those four
754:59 - and then on line seven I can pass it in
755:01 - if I want to tighten this up let me just
755:03 - go ahead and highlight that code get rid
755:05 - of the variable it's technically
755:06 - unnecessary and because the line of code
755:08 - is still pretty short I'm okay with just
755:10 - putting it all in one line but I could
755:12 - certainly use the variable like I did a
755:14 - moment ago so what have I done in my
755:17 - init function I have defined a
755:21 - initialization of the object that stores
755:24 - in self.houses the list of four houses
755:26 - and then in sort I'm accessing that same
755:29 - list but I'm randomly choosing the set
755:32 - of houses there now why have I done it
755:34 - in this way this too is General
755:35 - convention anytime you have a list of
755:38 - things that who knows maybe will change
755:40 - over time places like Harvard have
755:42 - constructed new houses over the years so
755:44 - you might have to change the list of
755:45 - available houses it didn't happen in
755:47 - seven books or eight films of Harry
755:49 - Potter but you could imagine maybe
755:51 - Hogwarts eventually has a fifth house so
755:53 - there's generally some value in putting
755:55 - list of constants toward the top of your
755:58 - file toward the top of the class so it's
756:00 - just obvious what the list of values is
756:02 - you don't want to necessarily tuck it
756:04 - away in some function like sort
756:06 - especially if you might want to use that
756:08 - function in sorry especially if you want
756:10 - to use that list in multiple functions
756:12 - not just sort but if I kept adding to
756:14 - this class you might want to use that
756:16 - same list of houses in multiple
756:17 - functions so let's keep it in the object
756:20 - Itself by storing it in self.houses all
756:24 - right well we're about to change the
756:25 - course of history here perhaps let me do
756:27 - python of hat.pi and I think we're about
756:29 - to assign Harry to one of those four
756:31 - houses randomly
756:33 - huh name error name random is not
756:37 - defined well wait a minute where did I
756:39 - go wrong here
756:41 - thinking back to our class on libraries
756:43 - why did my code break and not tell me
756:46 - where Harry is to be you do not import
756:49 - the random Library exactly if the random
756:53 - library or module is something I want to
756:55 - use I need to tell python that at the
756:57 - top of my file so let me go up here and
756:59 - do import random and then below that let
757:03 - me go ahead and clear my terminal window
757:04 - and try again python of hat.pi crossing
757:07 - my fingers seeing where Harry is going
757:10 - to end up and okay Harry as of now is
757:13 - officially in Hufflepuff despite
757:15 - everything you've read or seen well
757:17 - let's run this again let me clear my
757:19 - window and run python of hat.pi and now
757:21 - he's in Ravenclaw that's consistent with
757:23 - using random let's clear that and run it
757:25 - again he's still in Ravenclaw but that
757:27 - could happen even though there's four
757:29 - choices let's do it again Hufflepuff
757:31 - back in Hufflepuff we can't seem to get
757:33 - the right answer so to speak now he's in
757:35 - Gryffindor albeit randomly so we seem to
757:38 - have a program that based on these
757:39 - limited tests seems to indeed be
757:41 - assigning Harry to a house randomly now
757:44 - I'm somewhat lazily just letting sort
757:46 - print out this value I could do
757:48 - something else like return a string and
757:51 - then let me on line 13 do the printing
757:54 - for me but for now I think we have an
757:56 - example of a class called hat that
758:00 - nonetheless applies some of our lessons
758:01 - learned thus far today where I've
758:03 - created a class because a Sorting Hat is
758:05 - frankly well I was about to say real
758:07 - world entity but really a fantasy world
758:10 - entity and indeed that's a perhaps
758:12 - common heuristic or mental model to have
758:14 - when should you use a class to represent
758:17 - something in your code very often when
758:20 - you're trying to represent some real
758:22 - world entity or fantasy world entity
758:25 - like a student which is something in the
758:27 - real world like a Sorting Hat which okay
758:30 - doesn't exist but hats certainly do so
758:32 - quite reasonable to have a class for hat
758:35 - and that's not always the case that
758:36 - classes represent real world entities
758:39 - but indeed we've seen thus far that int
758:42 - and stir and list and dict these are all
758:45 - structures that you might have in the
758:47 - real world we have integers and strings
758:49 - of text and other things so it rather
758:51 - makes sense to represent even those
758:52 - things more technically using a class as
758:55 - well you could use just a dictionary to
758:57 - represent a student or a hat but again
758:59 - with classes come all this and even more
759:02 - functionality
759:03 - but I honestly am not using classes in
759:07 - really the the right way here why well
759:10 - in the World of Harry Potter there
759:12 - really is only to my knowledge one
759:14 - Sorting Hat and yet here I have gone and
759:17 - implemented a class called hat and again
759:20 - a class is like a blueprint a template a
759:23 - mold that allows you to create one or
759:26 - more objects thereof now most of my
759:28 - programs thus far have been pretty
759:29 - simple and I've just created one student
759:31 - but certainly if I spent more time and
759:33 - wrote more code you could imagine
759:34 - writing one program that has a list of
759:37 - students many more students than just
759:39 - the one we keep demonstrating yet it
759:42 - would be a little weird it's a little
759:44 - inconsistent with the real or the
759:45 - Fantasy World of Harry Potter to
759:47 - instantiate one two three or more
759:50 - sorting hats there really is just one
759:52 - really one Singleton if you will which
759:54 - is a term of Art in a lot of context of
759:56 - programming so let me propose that we
759:58 - actually improve the design of the
760:00 - Sorting Hat so that we don't have to
760:02 - instantiate a sorting hat because right
760:05 - now this is kind of allowing me to do
760:07 - something like hat one equals hat hat
760:09 - two equals hat hat three equals and so
760:12 - forth I don't really need that
760:13 - capability I really just need to
760:15 - represent the Sorting Hat with a class
760:17 - but I don't really need to instantiate
760:20 - it why because it already exists I need
760:21 - just one so it turns out in Python that
760:25 - up until now we've been using as I keep
760:27 - calling them instance methods writing
760:29 - functions inside of classes that are
760:31 - automatically passed a reference to self
760:33 - the current object but sometimes you
760:36 - just don't need that sometimes it
760:38 - suffices you just know what the class is
760:39 - and assume that there might not even be
760:41 - any objects of that class so in this
760:44 - sense you can use a class really as a
760:47 - container for data and or functionality
760:49 - that is just somehow conceptually
760:52 - related things related to a Sorting Hat
760:55 - and there's this other decorator or
760:57 - function called class method that allows
760:59 - us to do just this so let me go back to
761:01 - my code here and let me propose that if
761:04 - I'm not going to instantiate multiple
761:07 - houses I don't really need this init
761:09 - method because that's really meant to
761:11 - initialize specific objects from that
761:13 - blueprint that template that mold so let
761:16 - me get rid of this but if I get rid of
761:18 - this I no longer have access to self but
761:21 - that's okay because it turns out in
761:23 - addition to their existing class methods
761:26 - there are also what we might call class
761:28 - variables and class variables exist
761:31 - within the class itself and there's just
761:34 - one copy of that variable for all of the
761:37 - objects thereof they all share if you
761:40 - will the same variable be it an INT or
761:42 - stir or in this case a list so what I've
761:45 - done here is Define inside of my hat
761:48 - class in a class variable called houses
761:52 - I don't say self because self is no
761:55 - longer relevant self refers to specific
761:57 - objects I want a variable inside of this
762:00 - class AKA a class variable that equals
762:03 - that list because because it's inside of
762:05 - this hat now class I can use that list
762:08 - in any of my functions I've only got one
762:10 - now called sort but if I had more it
762:13 - would be accessible to all of those
762:14 - methods as well and with sort it also
762:17 - doesn't really make sense to sort within
762:20 - a specific sorting hack because again
762:21 - there's I only want there to be one so I
762:23 - can actually specify that this is a
762:25 - class method by saying at class method
762:28 - and I don't pass in self anymore I
762:31 - actually by convention pass in the a
762:34 - reference to the class itself it's
762:36 - typically written as clsy well if you
762:39 - wrote
762:40 - c-l-a-s-s that would actually conflict
762:42 - with the keyword class that we keep
762:44 - using up here so the world realized that
762:47 - oops we can't reuse that same phrase
762:49 - here so let's just call this class this
762:52 - is useful in some contexts including
762:54 - this one why well notice what I can now
762:56 - do I can now change self to be just
762:59 - class why because houses now not an
763:02 - instance variable accessible via
763:04 - self-dot houses it is now a class
763:06 - variable accessible by a class dot
763:09 - houses or technically
763:11 - cls.houses in this case but now the
763:14 - final flourish is this now I don't have
763:17 - to instantiate any hat objects as I used
763:20 - to on here line 13. I can just use
763:23 - functionality that comes with this class
763:25 - so I'm going to delete that line
763:26 - altogether I'm going to capitalize the
763:29 - Hat on this new line 13 and just say hat
763:33 - dot sort quote unquote Harry
763:36 - so what have I done I've not bothered
763:38 - instantiating an object of type hat I am
763:42 - just accessing a class method inside of
763:45 - the Hat class that you know what is just
763:47 - gonna work this is how class methods
763:49 - work you use the name of the class
763:50 - capital letter and all dot method name
763:53 - passing in any arguments you want python
763:56 - is going to automatically pass in some
763:58 - variable via which you can refer to that
764:01 - class in that function that you've
764:03 - implemented inside of that class so that
764:05 - I can do something like this it's not
764:07 - that I want a variable called houses
764:09 - locally in this function I want the
764:11 - variable called houses that's associated
764:13 - with this current class
764:15 - so I can still access this same list
764:18 - that I defined on line six and now if I
764:21 - go back down here to my terminal and run
764:23 - python of hat.pi enter
764:25 - Harry is still in Hufflepuff once more
764:27 - Harry is still in Hufflepuff once more
764:29 - Harry is back in Gryffindor at least
764:32 - randomly
764:34 - questions now on these class variables
764:37 - or these class methods which are in
764:40 - contrast with instance variables and
764:43 - instance methods and the one thing at
764:45 - least that's a little strange here is
764:47 - that even though there's a decorator
764:48 - called at class method there is not one
764:51 - called at instance method a method is
764:55 - just automatically a so-called instant
764:57 - method when you define it without any
764:59 - decorator can you have a class he said
765:02 - another class
765:03 - you can you can Define one class inside
765:05 - of another generally speaking this isn't
765:08 - done but there are cases where it can be
765:10 - helpful especially for larger more
765:12 - sophisticated programs so yes it is
765:14 - possible good other questions the
765:17 - question was about the cell dot houses
765:20 - when you when we remove it we uh and we
765:23 - pass the data the variable is created
765:27 - itself why we remove the salt
765:30 - so in the previous examples both of the
765:33 - Hat demonstration and also all of the
765:35 - student demonstrations we were uh
765:38 - creating a student object by calling
765:40 - student capital S open parenthesis close
765:43 - parenthesis with eventually name and a
765:45 - house passed in and then we were using
765:47 - the done uh the Double underscore init
765:49 - method to initialize the self.name and
765:52 - the self.house instance variables
765:55 - therein to those respective values in
765:58 - this latest version of the Sorting Hat I
766:01 - haven't bothered with self anywhere only
766:03 - because conceptually I don't need or
766:06 - want there to be multiple hats in the
766:08 - world I'm just using the class as kind
766:10 - of a container to bundle up this list of
766:13 - houses this sorting functionality maybe
766:15 - eventually I'll add more functionality
766:17 - to it but that's it and so sometimes you
766:20 - can use object-oriented programming in
766:22 - this somewhat different way when you
766:23 - want there to be functionality but it's
766:25 - not specific to any one specific hat
766:28 - it's specific to the Sorting Hat itself
766:32 - how about one other question now on
766:34 - these class variables or methods just
766:37 - another way of using object-oriented
766:39 - programming but to solve somewhat
766:40 - different problem well what's the
766:42 - difference between the class hat and I
766:45 - don't know like a function of head a
766:48 - good question so why are we using a
766:50 - class at all and not just having a file
766:52 - called hat.pi with a variable called
766:54 - houses and a function called sort like
766:57 - why are we adding this complexity in
766:59 - this particular case we don't
767:00 - necessarily need to I could absolutely
767:03 - go in here I could get rid of the class
767:05 - I could undo this indentation I could
767:09 - get rid of this decorator and I could
767:11 - get rid of hat Dot and I could just do
767:14 - this and additionally let's see let's
767:15 - get rid of class here let's get rid of
767:18 - class Here and Now run python of hat.pi
767:21 - enter and it still works put Harry in
767:23 - the wrong house but that's what we have
767:25 - what happens randomly that's fine too
767:27 - what we're introducing today by way of
767:29 - object oriented programming is just a
767:31 - different way of modeling the world it's
767:33 - not really compelling with an example
767:35 - like this frankly that's relatively
767:37 - simple it's not very complex there's not
767:39 - much functionality honestly the version
767:41 - that we just typed up these 10 lines
767:42 - this is fine this solves this problem
767:44 - but as our code gets longer as we start
767:47 - collaborating with other people as the
767:49 - problems we're trying to solve with
767:50 - could get more sophisticated you're
767:51 - going to find that your code gets messy
767:54 - quickly and you're going to find that
767:56 - you have a huge number of functions for
767:58 - instance in one file and some of them
768:00 - are related to each other but some of
768:02 - them are not well at that point wouldn't
768:04 - it be nice to just organize them a
768:05 - little differently and in the World of
768:07 - Harry Potter let's have a class for
768:09 - student let's have a class for Professor
768:10 - let's have a class for the Sorting Hat
768:12 - let's have a class for something else
768:14 - and so once your world gets much more
768:16 - complicated than some of the
768:17 - demonstrations we do here in class when
768:20 - we want to focus on individual ideas
768:21 - object oriented programming is just a
768:24 - way of encapsulating related data that
768:27 - is variables related functionality that
768:29 - is methods inside of things that have
768:31 - names these things are called classes so
768:34 - it's just another way to solve problems
768:36 - and when we focused on libraries a
768:38 - couple of weeks back that too was
768:39 - another solution to the same problem you
768:42 - could Define your own modules or
768:43 - packages put some of your data and or
768:45 - functionality in there and that's fine
768:47 - too and sometimes which one you should
768:49 - use overlaps if you're familiar with
768:51 - Venn diagrams the overlapping region
768:54 - might mean that you could use a class
768:56 - you could use a module or a package you
768:58 - could just use a single local file over
769:00 - time you'll develop an instinct and
769:02 - maybe even a personal preference for
769:04 - which tool to use
769:07 - all right let me propose now that we
769:09 - apply this same idea of a class method
769:11 - to clean up one other thing as well let
769:13 - me close hat.pi and reopen student.pi as
769:17 - we left it earlier and let me go ahead
769:19 - and simplify it just a little bit I'm
769:22 - going to go ahead and get rid of the
769:24 - properties on up because there's
769:26 - anything wrong with them but just
769:27 - because I want us to focus on some of
769:29 - the key ideas when we began with this
769:31 - program so I'm going to go ahead and
769:33 - keep main as well I'm not going to
769:35 - adversarially try to change Harry's
769:37 - address there I'm going to instead go
769:39 - ahead though and just print the student
769:41 - but this is the thing I want to focus on
769:43 - here
769:44 - this in our previous student examples
769:47 - was kind of a missed opportunity to
769:49 - clean up my code well what do I mean by
769:52 - that well up here at the top of this
769:54 - file even though I've simplified it by
769:55 - getting rid of the properties and all of
769:57 - that error checking because I want to
769:58 - focus on the essence of this class now
770:00 - just the student's name and the house
770:02 - and the printing thereof this is by
770:05 - nature of classes and object oriented
770:07 - programming theoretically all of my
770:09 - student specific functionality that is
770:13 - to say if I have functionality and data
770:15 - related to a student you the programmer
770:17 - my colleague would assume that it's all
770:20 - bundled up encapsulated so to speak
770:22 - inside of the student class and yet if
770:24 - you scroll down further what is this
770:26 - like there's a function called get
770:28 - student that just exists elsewhere in
770:30 - this file that prompts the user for a
770:32 - name prompts the user for a house
770:34 - creates the student object and then
770:35 - returns it like that's not wrong like it
770:38 - works and we saw many many times it kept
770:41 - working but this is a little weird right
770:43 - because why well if this is a function
770:45 - that helps you get a student helps you
770:48 - get the name of a student and the house
770:50 - of a student why isn't that
770:52 - functionality in the class itself after
770:54 - all as my code gets more and more
770:55 - complicated and does more things I'm
770:57 - going to be looking at the student class
770:58 - for all student related functionality
771:00 - I'm not going to be scrolling down
771:02 - expecting that oh maybe there's some
771:03 - other student functionality just kind of
771:05 - randomly later in this file so it's not
771:08 - wrong but this is again evidence of
771:10 - maybe bad design not so much with this
771:13 - small program but this is an example
771:16 - again of code smell like something
771:17 - smells a little off here like this is
771:19 - probably going to get us in trouble by
771:21 - separating related functionality so
771:23 - again it's a design principle not a
771:26 - correctness concern but class methods
771:28 - allow us to address this too let me go
771:31 - ahead and do this I'm going to delete
771:33 - get student altogether leaving only main
771:36 - as my other function here and inside of
771:39 - my student class I'm going to do this
771:41 - I'm going to define a function even more
771:44 - simply called get and by nature of how
771:47 - class methods work it's going to take in
771:48 - the name of the class itself or a
771:51 - reference there too as an argument and
771:53 - I'm going to move the functionality from
771:54 - get student into the student class and
771:56 - I'm going to do this name equals input
771:58 - quote unquote name house equals input
772:02 - quote unquote house and then what this
772:06 - function is going to do is return a new
772:09 - student object by calling class which
772:13 - again is just an automatically passed in
772:15 - reference to the class itself passing in
772:19 - name and house and I will admit this
772:22 - syntax seems a little strange that now
772:24 - I'm calling CLS and I'm passing in these
772:27 - arguments but let me do one final fix
772:28 - here let me go to the top of this
772:30 - function and more explicitly say this is
772:32 - a class method this solves a potential
772:35 - chicken in the egg problem so to speak
772:37 - whereby one needs to come before the
772:39 - other potentially so what am I doing
772:41 - here inside of my student class I now
772:44 - have a function called get it is I shall
772:48 - claim a class method what does that mean
772:49 - it just means I can call this method
772:52 - without instantiating a student object
772:56 - first therein lies the potential Chicken
772:59 - and the Egg problem and if unfamiliar
773:01 - that's an expression meaning well did
773:03 - the world have chickens first that laid
773:04 - eggs or was there an egg that then
773:07 - yielded the chickens but how did the egg
773:09 - get there it's this sort of weird
773:10 - circular problem and that's what we're
773:12 - facing here it would be weird if you had
773:15 - to create a student object in order to
773:18 - call get in order to get another student
773:21 - object like that sounds messy let's just
773:24 - get a student via a class method that by
773:28 - definition does not require you to
773:30 - create a student object first just like
773:32 - the Hat in its final form we use the Hat
773:35 - class to just say hat Capital H dot sort
773:38 - we didn't need to create a hat first we
773:40 - just used the class itself
773:42 - so what am I going to do here now let me
773:45 - go down to Main and instead of saying
773:47 - get student notice what I can now do
773:49 - student dot get and everything else can
773:53 - stay the same all I've done now is I've
773:56 - migrated all of my logic from get
773:58 - student which was this own Standalone
774:00 - function but clearly related to students
774:03 - by name I've moved the same code really
774:06 - to inside of the student class in a more
774:10 - simply named function called get but I
774:12 - could still call it get student if I
774:14 - want it just sees a little redundant to
774:16 - call it get student in a student class
774:17 - so I'm simplifying so I have a method
774:20 - called get but I'm calling it a class
774:22 - method to avoid that chicken in the egg
774:24 - problem I want to be able to call get
774:27 - without having a student object in my
774:30 - universe already and the Syntax for that
774:33 - is at class method the convention is to
774:36 - give this method at least one argument
774:38 - by convention called CLS for class which
774:40 - is just going to be a reference to the
774:42 - class itself mines 11 and 12 are
774:44 - identical to what they've always been
774:46 - and get student the only new syntax here
774:49 - is this but this again is one of the
774:51 - features of object oriented programming
774:52 - you can now instantiate
774:56 - a student object by just using CLS
774:59 - that's passed in I technically could use
775:02 - student capital S but it turns out I'm
775:04 - doing what's more conventional because
775:06 - this will both solve and avoid problems
775:08 - down the line with more complicated code
775:10 - this line here on line 13 just means
775:12 - create an object of the current class
775:14 - what class is that well whatever CLS is
775:16 - well that by definition of how it all
775:18 - works is going to be student and I want
775:21 - you to initialize it as always with name
775:23 - and house so now scrolling down my code
775:27 - is this and this is just nice to read
775:30 - you did perhaps have to acquire a taste
775:32 - for this and I sound a little odd saying
775:34 - this is nice to read but indeed
775:36 - student.get just tells me what's going
775:38 - on I'm gonna get a student I don't need
775:40 - a separate function written by me called
775:42 - get student in the file itself the get
775:45 - functionality is built into the class
775:47 - all my student related code now is
775:49 - together so let me go down to my
775:51 - terminal window and run python of
775:52 - student.pi enter let's type in Harry
775:54 - let's type in Gryffindor and we're back
775:57 - to where we began but but but
775:59 - everything related to students now is in
776:02 - this here class the only other thing in
776:04 - the file is Main and this conditional
776:07 - that we always use to avoid accidentally
776:09 - executing main when we're making a
776:11 - module or a package or the like so again
776:14 - a solution to a problem not a big one in
776:17 - the case of a relatively small program
776:19 - but one that you will eventually
776:20 - encounter as your programs get longer
776:22 - and longer with more and more entities
776:25 - to represent
776:27 - questions now on this use of a class
776:30 - method does the does the class have to
776:33 - be defined before the main function in
776:35 - terms of the order of the of the program
776:37 - a really good question so when in doubt
776:39 - let's try this so let's try to change
776:41 - the order let's move main to the top
776:42 - which I've often encouraged so let's go
776:45 - ahead and above the class do this and
776:47 - notice now that technically line two is
776:50 - mentioning student which does not exist
776:52 - until line six and Below let me go ahead
776:55 - and clear my terminal run python of
776:56 - student.pi so far so good Harry
776:59 - Gryffindor okay uh and indeed Harry's
777:02 - from Gryffindor the reason Michael it
777:04 - does not matter in this case is because
777:06 - we're not actually calling main until
777:09 - the very end and just as in the past
777:11 - that means that python has a chance to
777:12 - read everything top to bottom left to
777:14 - right so everything exists I would say
777:16 - generally classes are defined at the top
777:19 - of the file however it would be even
777:21 - maybe cleaner to move the classes
777:24 - definition to its own file and then
777:26 - import it so essentially to make
777:28 - reusable code by putting it into your
777:30 - own module or package so that not just
777:32 - this program but many others can use
777:34 - that definition of student as well other
777:36 - questions now
777:38 - on classes class methods or the like I
777:40 - wanted to ask is there a way to like
777:44 - declare all the all the possible all the
777:48 - possible attributes of the class because
777:50 - it looks so inconsistent
777:54 - um well so my takeaway there is this is
777:56 - Python's approach to these principles
777:58 - different languages like Java just take
777:59 - a different approach but have very
778:01 - similar features the syntax just tends
778:03 - to vary and this is how the python
778:05 - Community chose to implement this idea
778:07 - the right mental model ultimately is
778:10 - that these instance variables instant
778:12 - methods belong to or operate on specific
778:16 - objects a specific student a specific
778:20 - hat class variables and class methods
778:23 - operate on the entire class itself or in
778:26 - turn all objects of that class which
778:29 - we've not seen in a demonstration of but
778:31 - it's sort of a higher level concept so
778:33 - it turns out besides these class methods
778:35 - which are distinct from those instance
778:37 - methods which to be fair do not have
778:39 - their own decorator they just are by
778:41 - default instance method there's yet
778:42 - other types of methods you can have in
778:44 - classes in Python they tend to be called
778:46 - Static methods and they too come with
778:48 - another decorator called at static
778:50 - method which is a rabbit hole we won't
778:52 - go down but realize that there is yet
778:54 - other functionality that you can
778:55 - leverage with an object-oriented
778:57 - programming but what we thought we'd do
778:58 - is focus really on some final core
779:01 - features that you see not just in Python
779:03 - but other languages as well and perhaps
779:05 - one of the most compelling features of
779:07 - object-oriented programming that we
779:09 - haven't yet used explicitly though it
779:11 - turns out we've seen implicitly over the
779:13 - past weeks is this notion of inheritance
779:16 - it turns out via object-oriented
779:18 - programming there's actually an
779:20 - opportunity to design your classes in a
779:23 - hierarchical fashion whereby you can
779:25 - have one class inherit from or borrow
779:29 - attributes that is methods or variables
779:32 - from another class if they all have
779:34 - those in common so what do I mean by
779:37 - this here what let me propose that we
779:40 - Implement over in vs code here a brand
779:43 - new file called wizard.pi let me go
779:45 - ahead and run code of wizard.pi
779:48 - and then let's start as before defining
779:51 - a class called student and let's go
779:54 - ahead and first Define the underscore
779:55 - underscore init method which of course
779:58 - is minimally going to take an argument
779:59 - traditionally called self and in this
780:01 - case let's also have it take as before a
780:03 - name and a house and then in this init
780:05 - method let's go ahead and assign the
780:07 - instance variables self.name equals name
780:11 - and self.house equals house let's assume
780:14 - that there's some other functionality in
780:16 - this class as well dot dot dot but let's
780:18 - move on now to implementing the notion
780:20 - of a professor in The Wizarding World as
780:22 - well so for this class let's call it
780:25 - professor
780:27 - and a professor let's say is also going
780:30 - to have its own initialization method so
780:32 - underscore underscore in it it's going
780:34 - to take self as always as the first
780:35 - argument a professor also has a name so
780:38 - we'll pass that in second two and even
780:40 - though some professors are heads of
780:42 - houses let's assume that a professor is
780:44 - really identified by their name and
780:45 - their subject area the class that they
780:48 - teach so we'll call this third argument
780:50 - subject now as before let's go ahead and
780:52 - assign self.name equals name and let's
780:55 - assign self.subject equals subject here
780:58 - and as before let's assume that there's
781:00 - some more functionality associated with
781:02 - professors as well well what do you
781:04 - notice already here in my definitions of
781:07 - students and professors
781:10 - typically we're a bit reluctant to allow
781:12 - for any redundancy in our code and here
781:15 - I feel like my init method is taking a
781:17 - name for students my init method is also
781:20 - taking a name for a professor and I have
781:22 - these identical lines of code like
781:23 - self.name equals name and this is only
781:26 - going to get exacerbated if I now go and
781:28 - add some error checking so for instance
781:29 - How about if uh if not name we should
781:33 - probably be in the habit of raising
781:34 - something like a value error in an
781:36 - explanatory message like missing name
781:39 - and you know what if a professor is
781:41 - missing their name I should probably
781:42 - copy paste that code down here and
781:44 - that's where the red flag should be
781:46 - going off whereby as soon as you start
781:47 - copy pasting code there's probably a
781:50 - better way so that we can write the code
781:52 - once and perhaps reuse it in some way
781:54 - and here too object oriented programming
781:56 - offers a solution it turns out that
781:59 - object-oriented programming in Python
782:01 - also supports inheritance whereby you
782:04 - can Define multiple classes that somehow
782:06 - relate to one another they don't need to
782:08 - exist sort of in parallel in this way
782:10 - there could actually be some hierarchy
782:12 - between them so for instance in The
782:14 - Wizarding World we could argue that both
782:16 - a student and a professor are at the end
782:18 - of the day Wizards so maybe what we
782:20 - should really Define is a third class
782:22 - for instance called wizard that has any
782:24 - of the common attributes for students
782:28 - and professors alike and for now we've
782:29 - kept it relatively simple the only thing
782:31 - they have in common is a name and a name
782:33 - in student and Professor respectively so
782:35 - why don't we minimally factor that out
782:37 - first all right so let me go ahead here
782:39 - and just to keep things organized at the
782:41 - top of my file let's define a third
782:43 - class called Wizard and a wizard will
782:46 - have its own initialization method So
782:48 - Def underscore underscore init
782:50 - underscore underscore and self as always
782:52 - and a wizard let's say for now is only
782:54 - going to be initialized with their name
782:57 - in this way and now I'm going to go
783:00 - ahead and do some of that error checking
783:01 - so if not name we'll raise a value error
783:04 - in the Wizard class otherwise we'll go
783:06 - ahead and do self.name equals name and
783:09 - heck Dot got maybe some other
783:11 - functionality as well but not a subject
783:13 - which is specific to professors and not
783:15 - a house which I've claimed is specific
783:17 - to students now I think we can begin to
783:20 - maybe remove some of the redundancies in
783:22 - our other classes here so for instance
783:24 - down with student why don't I go ahead
783:27 - and remove this error checking here and
783:30 - remove this error this assignment of
783:32 - self.name equals name because I'm
783:34 - already doing that in Wizard and
783:36 - similarly down here at Professor why
783:38 - don't I do the same let's get rid of the
783:39 - error checking let's get rid of
783:41 - self.name equals name because again I'm
783:43 - doing that already up there for Wizard
783:45 - as well but at the moment even though
783:47 - they're all in the same file I haven't
783:49 - told python that a student is a wizard
783:51 - and a professor is a wizard so I really
783:54 - need to link these two together and the
783:56 - way you can prescribe inheritance
783:58 - whereby one class should inherit from
784:01 - another or conversely one class should
784:03 - descend for another from another we can
784:05 - do this I can say class student but
784:08 - before the colon I can go in and say in
784:10 - parentheses a student inherits from or
784:13 - is a subclass of wizard which conversely
784:16 - is the superclass of the student class
784:19 - so this just means that when I Define a
784:21 - student class go ahead and inherit all
784:23 - of the characteristics of a wizard as
784:26 - well and I'm going to do the same thing
784:27 - for her for a professor so parenthesis
784:30 - wizard after the class name professor
784:33 - and that's going to give me access to
784:34 - some of that same functionality but
784:37 - because my student class and my
784:39 - professor class still have their same
784:41 - init methods those are the methods that
784:43 - are going to get called whenever I
784:44 - create a student in code or I create a
784:46 - professor in code I need to somehow
784:49 - explicitly say that I also want to use
784:51 - the functionality in the Wizard classes
784:53 - init method and the way to do this in
784:56 - Python is is as follows let me go into
784:58 - my init method for student and let me
785:00 - call Super with no arguments which is a
785:03 - reference to the super class of this
785:05 - class so if this class is student the
785:07 - super class that is the parent class is
785:09 - is Wizard so super open paren close
785:12 - paren will have the effect of accessing
785:15 - the super class and then I'm going to go
785:18 - ahead and explicitly call its init
785:20 - method and I'm going to pass to the
785:22 - Wizards init method the name that the
785:25 - students init method was passed and I'm
785:28 - going to go ahead and do the same down
785:30 - here in Wizard this is one line of copy
785:32 - paste but I think I'm okay with it here
785:34 - because it's still allowing me to do all
785:36 - of the name assignment and the error
785:37 - checking up in the Wizard class instead
785:39 - I think we're okay now by just calling
785:42 - super dot init for both student and
785:45 - Professor alike now admittedly this
785:47 - syntax is definitely out there the fact
785:50 - that we're calling super in parentheses
785:51 - and dots and underscore underscore on
785:53 - the left and the right of in it here but
785:55 - it's just a combination of these two
785:57 - ideas super open parenthesis close
785:59 - parenthesis is a way of programmatically
786:01 - accessing a current classes parent class
786:04 - or super class and underscore underscore
786:06 - in it of course is just referring to now
786:08 - that class is owned in this
786:09 - specialization method now per the dot
786:12 - dots there could be a lot more going on
786:13 - in these classes but what's nice now is
786:16 - that wizard as a class is taking care of
786:19 - all of the assignment of a Wizard's name
786:21 - whether that wizard is a student or a
786:22 - professor and it's even doing some error
786:24 - checking to make sure they're in the
786:26 - name was actually passed in meanwhile
786:28 - student is inheriting all of that
786:31 - functionality and using it by calling
786:33 - the super class's own init method but
786:35 - it's additionally taking the house
786:37 - that's presumably passed into the
786:38 - student Constructor function and
786:40 - assigning it to its own instance
786:42 - variable self.house and similarly
786:44 - Professor are restoring in self.subject
786:47 - the subject that was passed into there
786:49 - that one as well now how might we use
786:52 - these classes well we'll continue to
786:54 - wave our hands with a little bit of
786:55 - detail here but if at the bottom of this
786:57 - file or any other file that Imports this
786:59 - one I could now write code like this I
787:02 - could create a student variable and
787:03 - assign it the return value of the
787:05 - student Constructor call and maybe that
787:06 - student is named Harry and that students
787:09 - house for instance might be Gryffindor
787:12 - and meanwhile I might do something like
787:15 - this professor equals professor over
787:17 - here and notice the lowercase s on the
787:19 - left capital S on the right same for
787:21 - Professor on the left lower case and
787:23 - uppercase on the right respectively
787:25 - Professor quote unquote Severus and how
787:28 - about defense against the dark arts will
787:32 - be his subject and meanwhile if we want
787:34 - more generically just a wizard who at
787:37 - the moment is neither student nor
787:39 - Professor teaching classes actively we
787:41 - could even do that we could do wizard
787:43 - equals Wizard and capital W on the right
787:46 - hand side of the equal sign because it's
787:47 - the name of the class and someone like
787:49 - Albus passing in only albus's name not a
787:53 - house not a subject because in this case
787:56 - he's known only as a wizard meanwhile
787:59 - with each of these calls this line of
788:01 - code here will ensure that the init
788:03 - method for the wizard class is called
788:04 - this line of code here will ensure that
788:07 - the init method of the student class and
788:09 - in turn the in method of the superclass
788:11 - wizard is called and then lastly on this
788:13 - final line of code will this syntax
788:15 - ensure that the init method of the
788:18 - professor class is called which in turn
788:19 - calls the init method of the superclass
788:22 - as well any questions now on this idea
788:25 - of inheritance which is a key feature of
788:28 - a lot of object oriented programming
788:31 - languages
788:32 - um so is there any situation where
788:35 - because uh from what I've seen so far A
788:37 - lot of times there's like a lot of
788:38 - nesting if you do super does it go one
788:41 - up is there any situation where you know
788:43 - it's nested in another class as well
788:46 - um above wizard let's say a really good
788:48 - question if you were to have a super
788:50 - super class so your hierarchy is even
788:52 - taller than the two levels of uh
788:55 - hierarchy that we currently have
788:56 - absolutely but what's nice about object
788:58 - oriented Pro what's nice about
789:00 - inheritance as the name implies is just
789:02 - as you might have inherited certain
789:04 - traits as a human from your grandfather
789:06 - and grandmother or your great
789:08 - grandfather or great-grandmother some of
789:10 - those properties can actually trickle
789:13 - down to you so to speak in the context
789:14 - of code as well so when you descend from
789:18 - another class that is when you subclass
789:21 - a super class or a super super class you
789:24 - actually do inherit all of the
789:26 - functionality not just from one level
789:27 - above you but from two or three so you
789:30 - can indeed access some of that
789:31 - functionality as well and you can even
789:33 - override it if you want some of these
789:35 - classes to behave a little bit
789:36 - differently than others other questions
789:39 - on inheritance so it's kind of similar
789:42 - to the last one but can you have like
789:43 - two parents on the same level a really
789:46 - good question so there are ways to
789:49 - implement uh um descendants from
789:52 - multiple parents and there's different
789:53 - ways to do this not just in Python but
789:55 - other languages we've kept things simple
789:57 - here though by having a single
789:59 - inheritance path a good question how
790:01 - about one more question on inheritance
790:03 - can we have multiple arguments in super
790:07 - dot double underscore in it yes but in
790:11 - this case I'm only passing a name on
790:13 - line 18 and I'm only passing in name on
790:16 - line 10 why because on line two when I
790:18 - defined the init method for the wizard
790:20 - class I only expect a single argument
790:23 - but I could absolutely have under common
790:25 - functionality like I could add in a
790:27 - Patronus if both students and professors
790:29 - have patronuses that can come out of
790:30 - their wands I could have two arguments
790:32 - instead we've been using this feature of
790:35 - object-oriented programming now for
790:37 - quite some time in the form of
790:38 - exceptions indeed if you look at the
790:41 - official documentation for exceptions in
790:43 - Python you'll see that there's not even
790:44 - the ones we've seen in class like value
790:46 - error and others there's any number of
790:48 - others as well but they are all
790:51 - themselves hierarchical in nature this
790:53 - is just a subset of the available
790:55 - exceptions that come built into Python
790:57 - and you can actually as a programmer
790:59 - create your own exceptions as well but
791:01 - as this chart here captures
791:03 - hierarchically all exceptions we've seen
791:06 - thus far actually descend from or
791:09 - inherit from
791:10 - um super classes already so for instance
791:12 - at the bottom of this list here is value
791:14 - error which we've seen quite a bit and
791:16 - if you follow the line straight up on
791:18 - this ASCII rendition of this chart
791:20 - you'll see that value error has a parent
791:22 - class or super class called exception
791:24 - and the exception class meanwhile has a
791:27 - parent class called base exception why
791:29 - did the authors of python do this well
791:31 - it turns out that whether you have a
791:33 - value error or a key error or an
791:36 - assertion error or any number of others
791:38 - there's a lot of functionality common to
791:41 - all of those types of errors that you
791:43 - want all that you want a programmer to
791:46 - be able to use and so it turns out that
791:49 - the authors of python decided you know
791:51 - what let's not have a dozen or more
791:53 - different classes that all just have
791:55 - copy pasted similar functionality let's
791:58 - create this hierarchy so that even
792:00 - though the exceptions toward the bottom
792:02 - of this list are very precise they at
792:04 - least inherit that is borrow some very
792:06 - common functionality up above so it
792:08 - turns out that when you use the try and
792:10 - the accept keyword in Python generally
792:13 - speaking we've tried to catch very
792:15 - specific exceptions like value error but
792:17 - technically you could capture the parent
792:19 - or even the grandparent exception for a
792:22 - given exception especially if you're not
792:24 - necessarily sure which one is going to
792:25 - get raised or better yet there could be
792:28 - many exceptions that get raised but you
792:30 - want to handle them all the same and you
792:32 - don't want to necessarily enumerate them
792:33 - in parentheses separated by commas you
792:36 - want to say you want to handle all
792:37 - exceptions of a certain super class in
792:40 - much the same way so this has been
792:42 - latent this whole time anytime we've
792:43 - seen or used or caught or now raised
792:46 - exceptions and built into python is this
792:48 - hierarchy and if you were to invent your
792:49 - own exception generally you wouldn't
792:51 - want to start from scratch you would
792:53 - want to descend from that is subclass
792:55 - one of these existing exceptions and add
792:58 - your own twist on it your own
792:59 - functionality as well
793:01 - well there's one final feature of
793:03 - object-oriented programming that we'd
793:05 - like to share with you today and that it
793:07 - will perhaps be quite the eye opener is
793:09 - what you can really do now that you have
793:11 - classes at your disposal and this too
793:14 - surprise has been a feature you and I
793:16 - have been taking for granted for weeks
793:18 - now this has just worked but it's been
793:20 - implemented in a way that you can now
793:21 - leverage yourself it turns out that
793:24 - python in some other languages too
793:25 - support this notion of operator
793:28 - overloading whereby you can take very
793:30 - common symbols like plus or minus or
793:34 - other such syntax on the on the keyboard
793:36 - and you can Implement your own
793:38 - interpretation thereof plus does not
793:41 - have to equal addition and minus does
793:44 - not have to equal subtraction in fact
793:46 - you and I have already seen another
793:48 - context in which plus means something
793:50 - else
793:51 - plus has not always in Python meant
793:54 - addition per se what else has python
793:58 - used Plus for concatenation for
794:00 - concatenation for joining two strings
794:02 - for adding to a list can you use plus as
794:05 - well so plus has actually been funny
794:07 - enough overloaded by the authors of
794:10 - python for us and so we can use the same
794:12 - symbol in much the same way as addition
794:14 - but with different data types to solve
794:16 - slightly different problems well let me
794:18 - propose that we go back over to vs code
794:20 - here and let me go ahead and create a
794:22 - new Final file called Vault dot Pi so
794:25 - code of vault.pi and let me propose that
794:28 - we implement the idea of a vault at
794:30 - Gringotts keeping on theme wherein
794:33 - there's a bank in the World of Harry
794:34 - Potter and within this Bank families and
794:37 - individuals have vaults containing all
794:39 - sorts of money in The Wizarding World
794:41 - and the type of money that exists in the
794:43 - World of Harry Potter are coins called
794:45 - galleons and sickles and Canucks and
794:48 - those are in descending order of value
794:49 - and so inside of a vault might be a
794:51 - whole bunch of coins gold silver and
794:53 - bronze essentially each in those
794:55 - denominations tucked away so how can I
794:57 - go about implementing first of all the
795:00 - idea of a vault so that I can store for
795:02 - instance for Harry Potter how much uh
795:04 - coinage is in his family's Vault or for
795:07 - one reason the same let me go ahead and
795:09 - vault.pi and first create a class called
795:12 - Vault essentially meant to represent a
795:14 - bank vault perfect another real world or
795:17 - fantasy world entity that I want to
795:19 - represent with code I could use a tuple
795:21 - or a list or a dictionary but again I'm
795:23 - going to get a lot more functionality
795:24 - with classes and we'll see one final
795:27 - flourish with operators inside of this
795:30 - Vault class let's go ahead and do this
795:31 - let me Define my init method taking its
795:34 - first argument of self and let me Define
795:36 - three arguments to this when you create
795:39 - a vault in my code here I want to be
795:42 - able to initialize it with some number
795:43 - of galleons some number of sickles and
795:45 - some number of Canucks I want the user
795:47 - the programmer to be able to pass in one
795:49 - or more of those values ideally but they
795:51 - can be optional so I'll give them
795:52 - defaults so let's go ahead and Define a
795:54 - parameter called galleons whose default
795:56 - value will be zero sickles whose default
795:58 - value will also be zero and Canucks
796:00 - whose default value will be zero as well
796:02 - so the programmer can pass in one or two
796:05 - or three or heck even none of those and
796:07 - they'll all have some implied defaults
796:09 - how do I want to remember those values
796:12 - that are passed in well let me do this
796:14 - self.gallians equals galleons and
796:18 - self.sicles equals sickles and self dot
796:21 - canuts equals Canucks and so I could add
796:25 - some error checking especially if you
796:27 - don't pass in a number I could turn
796:28 - these into properties to do even more
796:30 - validation but let's keep it simple and
796:31 - as always Focus only on the new ideas so
796:34 - I'm just going to trust that these
796:35 - values were passed in and I'm going to
796:36 - immediately assign them to these
796:38 - instance variables what now do I want to
796:40 - do well let's come up with a way of
796:43 - printing out what is in someone's vaults
796:46 - ultimately but first let's do this let's
796:48 - create a vault for The Potters by
796:51 - creating by assignment a new Vault and
796:53 - let's say that the Potters have 100
796:55 - galleons 50 sickles and 24 Canucks all
796:58 - right and that's in that Vault and let's
796:59 - print out for instance Potter all right
797:01 - let's run this code and see how it works
797:03 - now let me go ahead and run python a
797:05 - vault.pi enter
797:07 - okay seems to work no syntax errors or
797:10 - anything else but this is not very
797:12 - enlightening how do I fix this thinking
797:15 - back to what we've done before you have
797:18 - to use the underscore underscore stir
797:20 - exactly I need to use one of those
797:23 - special methods that comes with classes
797:25 - and Define for myself how I want a vault
797:27 - to be printed as a string so let me go
797:30 - ahead and do that let me Define the stir
797:32 - method taking in self as its sole
797:34 - arguments here and let's just return a
797:36 - very simple string that just reveals
797:38 - what's in the vault so I'm going to
797:40 - return a formatted F string inside of
797:43 - which is self.gallians and then the word
797:46 - Galleon so I know which those are then
797:49 - let's do self.sicles and let's output
797:51 - the word sickles and then lastly let's
797:53 - output self.nuts and then Canucks here
797:56 - so I know in this string just how many
797:58 - of each of those coins I have in this
798:01 - particular family's Vault all right let
798:04 - me go ahead and run python of vault.pi
798:06 - changing nothing else except the stir
798:08 - method and now we see indeed that Harry
798:11 - has 100 galleons 50 sickles and 25
798:13 - Canucks all right well let's do one
798:15 - thing more here below that let's go
798:17 - ahead and Define a Weasley variable and
798:20 - Ron never seemed to have quite as much
798:21 - money in the vault as did Harry so let's
798:23 - say that the Weasley Vault will have 25
798:26 - 50 and 100 so I'll just reverse the
798:28 - order of those denominations rather than
798:30 - Harry's hundred 5025 and now let me go
798:33 - ahead and print Weasley like this
798:35 - and let's go ahead and clear my terminal
798:38 - window run python of vault.pi this time
798:40 - that stir method will be invoked twice
798:42 - once for each of those Vault objects and
798:45 - we'll see indeed that the first one for
798:47 - Harry's got 150 and 25 respectively
798:49 - versus runs 25 50 and 100 respectively
798:53 - but now let's do something interesting
798:55 - suppose that you wanted to combine the
798:58 - contents of two vaults be it Harry's and
799:00 - rods or any other two people how would
799:02 - you go about doing this in code well if
799:05 - I wanted to combine the vaults for
799:07 - someone I could do this well I could do
799:09 - galleons equals let's do Potter dot
799:13 - galleons plus Weasley dot galleons that
799:17 - gives me a variable called galleons that
799:19 - has the sum of Harry and Ron's galleons
799:21 - let's next do sickles equals Potter dot
799:25 - sickles plus Weasley dot sickles
799:28 - and then lastly let's do Canucks equals
799:31 - Potter dot canutz plus Weasley dot
799:34 - Canucks I've got three variables what
799:36 - can I now do with these values well
799:37 - let's create a third a new Vault uh
799:40 - total will be the name of this variable
799:41 - equals a new Vault capital V notice and
799:44 - now let's pass in those three new
799:46 - variables galleons sickles and canuts
799:49 - and that's it and let's print out this
799:52 - total Vault so we should now see three
799:53 - vaults one for Harry for Ron and the
799:56 - combination the addition of the two let
799:58 - me go ahead and rerun python of vault.pi
800:00 - and there we have it uh what was 150 25
800:03 - and 25 50 and 100 combined through
800:07 - addition now is 125 100
800:10 - 125. so pretty straightforward using
800:12 - techniques from weeks ago where we're
800:14 - just declaring a few new variables and
800:16 - doing some addition
800:17 - but wouldn't it be cool if I could do
800:20 - something like this wouldn't it be cool
800:22 - if I could just somehow not manually
800:24 - create my own Vault and do all of this
800:26 - annoying math up here what if I could
800:28 - just do Potter plus Weasley and get rid
800:31 - of all of this logic here like wouldn't
800:33 - it be nice if I overload the operator no
800:37 - we know as plus just like stir does just
800:40 - like list does to allow me to add two
800:43 - volts together on the left and the right
800:46 - well it turns out in Python and through
800:49 - operator overlading there is a way to do
800:52 - just this if you consult the
800:54 - documentation there are there's this and
800:56 - so many other special methods that come
800:58 - with classes the third one we'll see
801:00 - here is this one here underscore
801:03 - underscore add underscore underscore and
801:06 - you'll see that it very generically is
801:08 - described in the documentation is
801:09 - working for any object be it a vault or
801:11 - stir or a list or something else by
801:14 - convention it's going to take a first
801:15 - argument called self and then it's going
801:16 - to take some other argument by
801:18 - convention called other
801:20 - self in effect is going to be referring
801:22 - to whatever object is on the left of a
801:24 - plus sign other is going to be referring
801:26 - to whatever's on the right hand side of
801:28 - a plus sign thereby giving us a way of
801:30 - describing encode the operand on the
801:33 - left and the operand on the right of the
801:35 - operator Plus in between that is to say
801:39 - if I go back to vs code here what I'm
801:41 - trying to do is Implement support for
801:44 - this well let me try without writing any
801:46 - other code just yet python a vault.pi
801:49 - enter type error unsupported operand
801:53 - types for Vault and Vault that is to say
801:57 - python at this moment does not know what
801:59 - it means to add two vaults together
802:01 - right you and I might have an instinct
802:03 - probably want to combine the galleons
802:05 - and the sickles and the Canucks
802:07 - respectively python doesn't know that it
802:09 - just knows that you have a new class
802:10 - called Vault but let's teach python to
802:12 - do this let me clear my terminal window
802:14 - let me scroll back up to the class
802:16 - itself where at the moment I only have
802:19 - two special methods in knit and stir but
802:21 - let's add this third all right let me go
802:23 - into the class here and Define
802:25 - underscore underscore add underscore
802:27 - underscore and then specify its first
802:29 - parameter as self as before and then a
802:32 - second parameter for this particular
802:33 - method called by convention other now as
802:36 - always I could name those parameters
802:37 - anything I want but I'm going to stick
802:38 - with convention Here and Now inside of
802:40 - this method am I going to have to now
802:42 - add together the contents of two vaults
802:45 - well what two volts well if we scroll
802:46 - down to our goal at hand the goal of
802:48 - course is to add this Vault plus this
802:50 - other Vault Potter plus Weasley
802:52 - respectively well it turns out in Python
802:54 - that when you do overload an operator
802:56 - like Plus what's going to happen
802:58 - automatically as soon as python sees
803:00 - that is it's going to call that
803:01 - underscore underscore ad underscore
803:03 - underscore method and it's going to pass
803:05 - into it two arguments whatever the
803:07 - operand is on the left Potter in this
803:10 - case and whatever the operand is on the
803:12 - right Weasley in this case and those
803:14 - values are going to get passed in as
803:16 - self and other respectively what that
803:19 - means is that we can access their are
803:20 - contents up here in our implementation
803:22 - of that as follows let me go ahead and
803:24 - Define a local variable called galleons
803:26 - and set that equal to for instance the
803:28 - sum of self.gallians whatever's in
803:31 - Potter's vault in this case plus
803:33 - whatever is in Weasley's vault in this
803:35 - case which would be other dot galleons
803:37 - let me do the same for sickles self dot
803:40 - sickles plus other dot sickles and let
803:43 - me lastly do that for canutz so
803:45 - self.canuts plus other dot canuts but at
803:49 - the end of the day I'm going to need to
803:50 - return a brand new bigger Vault that
803:53 - contains all of those contents together
803:54 - and if we ultimately want to assign that
803:57 - bigger Vault to a variable like total
803:59 - here on the left we'd better indeed
804:01 - return a value from this add method so
804:04 - I'm going to go ahead and give myself a
804:05 - brand new vault as by returning Capital
804:08 - vault which of course is going to call
804:10 - My Vault function into which I can now
804:12 - pass some of those initialization
804:14 - arguments well how many Galleon signals
804:16 - and Canucks do I want this brand new
804:17 - Vault to contain well I want it to
804:19 - contain this many galleons this many
804:22 - sickles and this many knots so
804:24 - ultimately what we're doing in this
804:26 - implementation of add is adding together
804:28 - those Galleon sickles and Canucks
804:29 - passing them to the Vault function so
804:32 - that we get a brand new bigger Vault and
804:34 - return that all together
804:36 - so now I've defined this new special
804:38 - method called add that should now just
804:41 - make Plus work for two vaults all right
804:45 - let's see let me run down to my terminal
804:47 - window python of vault.pi and hit enter
804:49 - and voila and now we've implemented an
804:53 - overloaded operator plus to do what you
804:55 - and I as humans would hope would be the
804:57 - case when you add two vaults together
804:59 - but I've now written the code more
805:01 - specifically to teach python what it
805:04 - means concretely to add two vaults
805:07 - together and it's with very similar
805:08 - coding effect underneath the hood that
805:10 - python is doing this for two strings to
805:12 - concatenate them together to joining two
805:14 - lists into a new list with lists and so
805:17 - many other classes as well
805:19 - any questions now on operator
805:22 - overloading or this example here how
805:25 - would you go about creating a function
805:27 - for adding a student and a vault for two
805:33 - two separate classes how would that be
805:35 - possible
805:36 - let me see what happens here I don't
805:38 - know offhand let's do this let's create
805:40 - a stir and see what happens if I add
805:41 - Potter plus a stirrer
805:43 - stir up yeah okay so it would work I'm
805:45 - just figuring this out as I go here Eric
805:47 - so just to be clear what I did was I
805:49 - just changed Weasley to stir just to see
805:51 - what would happen when I add a vault
805:53 - plus a stir and it will work
805:56 - theoretically why because so long as the
805:59 - type of value on the left has an add
806:02 - method implemented other can be any type
806:06 - that you want you just have to decide in
806:08 - code what it's going to mean
806:10 - conceptually to add a vault plus a
806:12 - string which in this case probably
806:13 - doesn't make any sense at all but it's
806:15 - possible it's going to be the operand on
806:17 - the left and I'm inferring that I did
806:19 - not know the answer a moment ago I'm
806:21 - inferring that because what I got was an
806:23 - attribute error here on line 11 because
806:26 - python did not like this other dot
806:28 - galleons didn't work but I could make it
806:31 - work by figuring something out really
806:33 - good question didn't know that one
806:34 - myself other questions on operator
806:37 - overloading can you define new operators
806:40 - in Python I don't think so there is a
806:43 - very long but precise list of operators
806:46 - that you can overload I do not believe
806:48 - you can assign arbitrary characters to
806:51 - be operators in Python uh let me defer
806:54 - to Carter in the chat to revoke okay I'm
806:55 - seeing two of my colleagues are saying
806:57 - no not possible so I'm gonna go with my
806:59 - first instinct no otherwise that'd be
807:01 - kind of cool you could make Emoji do
807:02 - whatever you want to how about one final
807:04 - question on operator overloading is that
807:07 - the only operation you can do uh is this
807:10 - as far as like can you do a subtraction
807:12 - as well you can you can do so many
807:15 - others let me um if Carter you don't
807:17 - mind pulling up this URL here so this
807:20 - link here special method names in
807:21 - today's slides you'll see a long list of
807:24 - all of The Operators that you can
807:25 - overload you can do less than equals
807:27 - then plus equals minus equals pretty
807:30 - much any symbol you've seen me type on
807:31 - the screen can be overloaded in the
807:33 - context of classes
807:36 - so even though today we focused entirely
807:38 - on object-oriented programming this is a
807:40 - technique that we've been using really
807:41 - since the first week of the class
807:43 - because indeed those ins those stirs
807:45 - those floats those lists those
807:47 - dictionaries and so much more were
807:49 - already underneath the hood this whole
807:50 - time classes and objects thereof but you
807:53 - now as a programmer have the ability to
807:55 - create your own classes with your own
807:57 - instance or class variables with your
807:58 - own instance or class methods with your
808:00 - own properties and even with your own
808:03 - custom behavior for operators so
808:05 - ultimately you can absolutely continue
808:07 - using those simple tuples or lists or
808:10 - those dictionaries or other structures
808:12 - as well but object-oriented programming
808:14 - and with it classes and now these
808:15 - objects is just another tool in your
808:17 - toolkit and dare say as your code gets
808:19 - more sophisticated and your problems get
808:21 - bigger you'll find that being able to
808:23 - model these real world or even fantasy
808:25 - world entities with classes and related
808:28 - data and functionality will ultimately
808:30 - just allow you to Define code that's not
808:32 - just correct but ever well designed as
808:34 - well this one was cs50
808:47 - [Music]
808:59 - foreign
809:02 - [Music]
809:08 - this is cs50's Introduction to
809:11 - programming with python my name is David
809:13 - Malin and over these past many weeks
809:15 - have we focused on functions and
809:17 - variables early on then conditionals and
809:19 - loops and exceptions a bit of libraries
809:22 - unit tests file Lao regular Expressions
809:24 - object oriented programming and really
809:27 - Etc and indeed that's where we focus
809:28 - today is on all the more that you can do
809:31 - with python and programming more
809:32 - generally Beyond some of those
809:34 - fundamental concepts as well in fact if
809:36 - you start to flip through the
809:38 - documentation for python in all of its
809:40 - form all of which is as always
809:41 - accessible at docs.python.org you'll see
809:44 - additional documentation on Python's own
809:45 - tutorial in library it's reference it's
809:48 - how to and among all of those various
809:50 - documents as well as others more online
809:53 - you'll see that there's some tidbits
809:55 - that we didn't quite touch on and indeed
809:57 - even though we themed these past several
809:59 - weeks of round fairly broad topics that
810:01 - are rather essential for doing typical
810:03 - types of problems in Python it turns out
810:06 - there's quite a number of other feature
810:07 - as well that we didn't necessarily touch
810:09 - on that didn't necessarily fit within
810:11 - any of those overarching Concepts or
810:14 - might have been a little too much too
810:15 - soon if we did them too early on in the
810:17 - course and so in today our final lecture
810:19 - will be Focus really on all the more
810:21 - that you can do with python and
810:23 - hopefully wet your appetite for teaching
810:25 - yourself all the more too for instance
810:27 - among Python's various data types
810:29 - there's this other one that we haven't
810:30 - had occasion to yet use namely a set in
810:33 - mathematics a set is typically a
810:35 - collection of values wherein there are
810:36 - no duplicates so it's not quite a list
810:38 - it's a bit more special than that in
810:40 - that somehow any duplicates are
810:42 - eliminated for you well it turns out
810:44 - within python this is an actual data
810:47 - type that you yourself can use in your
810:49 - code and via the documentation here
810:52 - might you be able to glean that it's a
810:53 - useful problem if you want to somehow
810:55 - automatically filter out duplicates so
810:57 - let me go ahead and go over to vs code
810:59 - here and let me go ahead and show you a
811:02 - file that I created a bit of in advance
811:04 - whereby we have a file here called
811:06 - houses dot pi and then how Moses dot Pi
811:08 - I already went ahead and whipped up a
811:10 - big uh list of students inside of which
811:13 - is a number of dictionaries Each of
811:15 - which represents a student's name and
811:17 - house respectively now this is a pretty
811:20 - sizable dictionary and so it lends
811:21 - itself to iteration over the same and
811:23 - suppose that the goal here was quite
811:25 - simply to figure out well what are the
811:27 - unique houses at Hogwarts in the World
811:29 - of Harry Potter it would be nice perhaps
811:31 - to not have to know these kinds of
811:33 - details or look them up online here we
811:35 - have a set of students albeit not
811:36 - exhaustive with all of the houses but
811:38 - among these students here what are the
811:40 - unique houses in which they live well I
811:43 - could certainly as a human just eyeball
811:44 - this and tell you that it's well
811:45 - Gryffindor Slytherin Ravenclaw but how
811:48 - could we go about doing it
811:49 - programmatically for these students as
811:50 - well well let's take one approach first
811:52 - here let me go into houses.pi and let me
811:55 - propose that we first how about create
811:57 - an empty list called houses in which I'm
812:01 - going to accumulate each of the houses
812:03 - uniquely so every time I iterate through
812:06 - this list of of dictionaries I'm only
812:09 - going to add a house to this list if I
812:11 - haven't seen it before so how do I
812:13 - express that well let me iterate over
812:15 - all of the students with for students in
812:17 - students as we've done in the past and
812:19 - let me ask you a question now so if the
812:22 - current students house and notice that
812:25 - I'm indexing into the current student
812:27 - because I know they are a dictionary or
812:29 - dict object and if that student's house
812:32 - is not in my House's list then indented
812:37 - am I going to say houses dot append
812:40 - because again houses is a list and I'm
812:42 - going to append that particular house to
812:45 - the list then at the very bottom here
812:47 - let me go ahead and do something
812:48 - somewhat interesting here and say for
812:50 - each of the houses that I've accumulated
812:52 - in I could just say houses but if I just
812:56 - say houses what was the point of
812:57 - accumulating them all all at once I
812:59 - could just do this whole thing in a loop
813:00 - let's at least go about and sort those
813:02 - houses with sorted which is going to
813:04 - sort the strings alphabetically and
813:06 - let's go ahead there in and print each
813:08 - of the houses let me go ahead now in my
813:10 - terminal window and run python of
813:12 - houses.pi and hit enter and there we
813:14 - have it Gryffindor Ravenclaw Slytherin
813:16 - in alphabetical order even though in the
813:19 - list of dictionaries up here technically
813:21 - the order in which we saw these with was
813:23 - Gryffindor Gryffindor Gryffindor
813:25 - Slytherin Ravenclaw so indeed my code
813:28 - seems to have sorted them properly so
813:30 - this is perfectly fine and it's one way
813:32 - of solving this problem but it turns out
813:35 - we could use more that's built into the
813:38 - language python to solve this problem
813:40 - ourselves here I'm rather Reinventing a
813:42 - wheel really the notion of a set wherein
813:44 - duplicates are eliminated for me so let
813:46 - me go ahead and clear my terminal window
813:48 - and perhaps change the type of object
813:50 - I'm using here instead of a list which
813:52 - could also be written like this to
813:54 - create an empty list let me go ahead and
813:56 - create an empty set whereby I call a
813:59 - function called set that's going to
814:00 - return to me some object in Python that
814:02 - represents this notion of a set wherein
814:04 - duplicates are automatically eliminated
814:06 - and now I can type tighten up my code
814:08 - because I don't have to use this if
814:10 - condition myself I think I can just do
814:12 - something like this inside of my Loop
814:14 - let me do houses dot add so it's not
814:17 - append for a set it's a pen for a list
814:19 - but it's add to a set per the
814:21 - documentation then let me go ahead and
814:24 - add this current student's house and now
814:26 - I think the rest of my code can be the
814:28 - same I'm just now trusting per the
814:30 - documentation for set in Python that
814:33 - it's going to filter out duplicates for
814:34 - me and I can just blindly add add add
814:37 - all of these houses to the set and any
814:39 - duplicates already there will be gone
814:41 - python of houses dot pi and enter and
814:44 - voila we're back in business with just
814:46 - those three there as well let me pause
814:49 - here to see if there's any questions now
814:50 - on this use of set which is just another
814:53 - data type that's available to you in
814:55 - other class in the world of python that
814:57 - you can reach for when solving some
814:59 - problem like this how can we locate an
815:02 - item in a set for example find Griffin
815:05 - door in that set how do you find an item
815:07 - in in a set you can use very similar
815:09 - syntax as we've done for a list before
815:11 - you can use syntax like if Gryffindor in
815:16 - houses then and you can answer a
815:19 - question along those lines so you can
815:21 - use in and not in and similar functions
815:24 - as well other questions on set okay what
815:26 - happens if you have a similar house name
815:29 - let's say instead of Slytherin it is
815:32 - maybe an O instead of an eye will the
815:34 - for Loop look throughout each of those
815:38 - um letters in the house name uh it would
815:41 - compare the strings so if Slytherin
815:44 - appears more than once but is slightly
815:46 - misspelled or miscapitalized if I heard
815:48 - you right those would appear to be
815:50 - distinct string so you would get both
815:53 - versions of Slytherin in the result
815:55 - however we've seen in the past how we
815:57 - can clean up users data if indeed it
815:59 - might be messy we could force everything
816:00 - to uppercase or everything to lower case
816:02 - or we could use capitalize the function
816:05 - built into stirs or title case that
816:07 - would handle some of the cleanup for us
816:09 - in this case because the data is not
816:11 - coming from humans using the input
816:12 - function I wrote the code in advance
816:14 - it's safer to assume that I got the
816:17 - houses right but that's absolutely a
816:18 - risk if it's coming from users allow me
816:21 - to turn our attention back to some of
816:23 - the other features here that we can
816:24 - leverage in Python if we dig further
816:26 - into the documentation and read up more
816:28 - on its features well in some language
816:30 - there's this notion of global variables
816:32 - whereby you can define a variable that's
816:35 - either local to a function as we've seen
816:37 - many times or if you put a variable
816:40 - outside of all of your functions perhaps
816:42 - near the top of your file that would
816:44 - generally be considered a global
816:46 - variable or in the world of python it
816:48 - might be specific to the module but for
816:50 - all intents and purposes it's going to
816:52 - behave for a given program as though it
816:54 - is global however it turns out that if
816:56 - you do this when solving some problem
816:58 - down the line whereby you have multiple
817:00 - functions and you do have one or more
817:01 - variables that are outside of those
817:03 - functions you might not be able to
817:06 - change those variables as easily as you
817:09 - might think so indeed let me go back to
817:11 - vs code here and in just a moment I'm
817:13 - going to go ahead and create a new file
817:15 - how about called Bank dot Pi let's go
817:18 - ahead and implement the notion of a bank
817:20 - wherein we can store things like money
817:23 - in various forms and let me go ahead and
817:26 - do this let me go ahead and Implement a
817:27 - very simple bank that simply keeps track
817:29 - of my total balance the number of
817:31 - dollars or cents or whatever I might be
817:33 - storing in this bank and I'm going to
817:34 - give myself a variable called balance at
817:36 - the top which is an integer a set to
817:39 - zero now let me go ahead and Define a
817:41 - main function as we often do and inside
817:43 - of my main function let me go ahead and
817:45 - print out quote unquote balance and then
817:47 - print out the value of balance itself
817:49 - passing to print as we've often done
817:51 - more than one argument so that they get
817:54 - separated by a single white space And
817:56 - now since I have a main function really
817:58 - setting the stage for doing more
818:00 - interesting things soon let me go ahead
818:02 - and do our usual if the name of this
818:04 - file equals equals underscore underscore
818:06 - main then go ahead and call Main so this
818:09 - is a terribly short program but it's
818:12 - perhaps representative of how you might
818:13 - solve some future problem in Python
818:15 - whereby you have a main function that's
818:17 - going to eventually do some interesting
818:19 - stuff and at the top of your file you
818:21 - have one or more variables that are just
818:23 - useful to keep there because then you
818:24 - know where they are and perhaps not just
818:26 - main but other functions can access them
818:28 - as well so let's see when I run this
818:31 - program python of bank.pi I would hope
818:34 - based on my own intuition thus far then
818:36 - I'm going to see that my current balance
818:37 - is zero that is to say even though the
818:40 - balance variable is defined on line one
818:43 - hopefully I can still print it on line
818:45 - five inside of main even though balance
818:48 - was not defined in my main function here
818:51 - we go hitting enter and voila balance
818:54 - zero so it does seem to work even if you
818:56 - declare a variable in Python outside of
818:58 - your functions it appears that you can
819:00 - access it you can read the value of that
819:03 - variable even inside of a function like
819:06 - main well let's get a little more
819:08 - adventurous now because this program
819:09 - really isn't solving anyone's problems
819:11 - let's go ahead and Implement more of a
819:13 - bank like the ability to deposit money
819:15 - into the bank and to withdraw money
819:16 - money from the bank thereby giving me
819:18 - some more functions that might very well
819:20 - need to access that same variable Let Me
819:22 - Clear My terminal window here and let me
819:24 - go ahead and pretend for the moment that
819:26 - I have the ability to deposit say 100 or
819:30 - 100 coins whatever the unit of currency
819:32 - is here and then maybe I want to
819:34 - withdraw straight away 50 of those same
819:37 - dollars or coins and now let me go ahead
819:39 - and just print out at the bottom of main
819:41 - what my new balance should be so that in
819:44 - an Ideal World once I've deposited 100
819:46 - then withdrawn 50 after starting at zero
819:50 - I'd like to think that my new balance on
819:52 - line 8 should indeed be 50. all right
819:55 - but I haven't implemented these
819:57 - functions yet so let's do that as we've
819:58 - done in the past down here I'm going to
820:00 - go ahead and Define another function
820:01 - deposit I'm going to say that it takes
820:03 - an argument called n for a number of
820:06 - coins or dollars or the like and I'm
820:08 - just going to do this I'm going to go
820:09 - ahead and say balance plus equals n
820:12 - thereby changing the value of N I could
820:14 - do it more verbally balance equals
820:16 - balance plus n but I'm going to use the
820:18 - shorter hand notation here instead and
820:21 - now let's Implement withdraw so Define a
820:23 - function called withdraw it too is going
820:25 - to take a variable in argument n for
820:27 - number of dollars or coins and now I'm
820:29 - going to go ahead and subtract from
820:31 - balance using minus equals n as well and
820:35 - I'm still going to call Main if the name
820:37 - of this file is main so what have I done
820:40 - I've just added not just one but three
820:42 - functions total all of which apparently
820:45 - need to access balance by printing it
820:48 - incrementing it or decrementing it as
820:51 - we've seen here all right let me go
820:53 - ahead and focus on these three functions
820:55 - here let me go back to my terminal
820:56 - window and run python of bank.pi and hit
820:59 - enter
821:00 - and wow seems like we've introduced some
821:03 - number of problems here and what are
821:05 - these problems well Unbound local error
821:09 - is perhaps the first time we've seen
821:11 - this one here local variable balance
821:14 - referenced before assignment and that's
821:17 - a bit misleading definitely confusing
821:19 - right because I absolutely assigned
821:21 - balance of value on the top of my code
821:24 - and indeed if I scroll back up nothing
821:26 - has changed or been lost up there it's
821:28 - definitely been assigned to value and
821:30 - now online uh 12 it would seem that when
821:33 - deposit is called I'm just trying to
821:34 - access that variable again so
821:37 - intuitively what might explain this
821:40 - error message Unbound local error what
821:43 - is python telling us there that python
821:45 - can or can't do when it comes to these
821:48 - so-called Global variables that are at
821:50 - the top of my file so if you want to
821:54 - change this variable you should write an
821:58 - Insight Dev function name in and the
822:02 - global variable unchangeable yeah so if
822:06 - you want to change the value it might
822:08 - need to be local to the function if you
822:10 - are trying to change a global variable
822:12 - though in a function it clearly does not
822:15 - work so it's okay to read a global
822:17 - variable read meaning access it and
822:19 - print it and so forth but apparently you
822:21 - can't write to a global variable in the
822:23 - same way from within one of these
822:25 - functions all right well maybe the fixes
822:27 - to do this let me clear my terminal
822:28 - window in that error and maybe I could
822:30 - just do this let's get rid of the global
822:32 - variable and let's go ahead and put it
822:33 - for instance inside of main might this
822:37 - now work well let me try this now python
822:40 - of bank.pi enter
822:42 - that alone did not solve it I still have
822:45 - an Unbound local error this time though
822:48 - it's for a different reason it turns out
822:51 - now that balance on line
822:54 - two is by definition a local variable a
822:57 - local variable is one that exists in the
822:59 - context of a function at least in this
823:00 - case a global variable is the opposite
823:03 - one that does not for instance at the
823:04 - top of my file so here is another
823:07 - distinction in Python if you declare a
823:09 - variable in a function like main just as
823:12 - I've done on line two with balance it is
823:14 - indeed local to that function deposit
823:16 - and withdraw do not have access to that
823:19 - same variable why because it's local to
823:21 - Main and so you would think now we're
823:23 - kind of stuck in this vicious cycle well
823:25 - maybe the solution then is to move
823:27 - balance globally so all three functions
823:30 - can access it but clearly where we began
823:32 - as Elena noted we can't therefore change
823:34 - it so it turns out the solution to this
823:36 - problem in Python is ironically exactly
823:39 - this keyword here it's a little
823:41 - different as you might have seen if
823:42 - you've programmed before in other
823:43 - languages but there's indeed a keyword
823:45 - in Python called Global that allows you
823:48 - to tell a function that hey this is not
823:50 - a variable that's local to you I mean it
823:52 - to be a global variable that I want you
823:54 - to edit so if I go back to vs code here
823:57 - clearing my terminal window to get rid
823:58 - of that error let me go ahead and undo
824:00 - the change I just made and put balance
824:02 - back at the top of my file but this time
824:05 - what I'm going to do is I'm going to
824:07 - inform my two functions that need to
824:10 - change the value of balance that it is
824:13 - indeed Global by typing Global balance
824:16 - again here as well as here Global
824:19 - balance I still leave the same lines of
824:22 - code now on lines 13 and 18 that
824:24 - increment and decrement balance but this
824:26 - now use of keyword Global is a little
824:29 - bit of a clue to python that oh okay
824:31 - it's not a local variable this is not a
824:33 - bug that you've introduced you mean for
824:35 - me to edit this variable up above so now
824:38 - let me go ahead in my terminal window
824:39 - and run python of bank.pi I'm hoping to
824:42 - see that my balance is zero plus a
824:44 - hundred minus 50 is
824:46 - 50. and indeed it now is it starts off
824:49 - at zero per my first print statement on
824:51 - line five but it ends up at 50 total at
824:55 - below that on line eight let me pause
824:57 - here to see if now there's any questions
824:59 - on these Global or local variables what
825:02 - happens when you declare a variable
825:05 - globally and as in the same variable
825:08 - globally and in a function a good
825:10 - question you're always thinking about
825:12 - the so-called Corner cases so if you
825:14 - declare a variable both globally like at
825:16 - the top of your file and then an
825:18 - identically named variable inside of a
825:20 - function
825:21 - same name the latter Will Shadow so to
825:25 - speak the former that is you'll be able
825:26 - to use the latter that is the local
825:29 - variable but it will have no effect on
825:31 - the global variable temporarily python
825:34 - will only know that the local variable
825:36 - exists so in general the rule of thumb
825:38 - is just don't do that not only might it
825:41 - create bugs in your code because you
825:42 - don't quite change what you intend to
825:44 - change it's also perhaps uh non-obvious
825:47 - to other readers as well other questions
825:49 - on globals or locals okay what if we
825:52 - decide some unbalanced as an argument
825:54 - inside the main function yeah another
825:56 - good Instinct but in this case that also
825:58 - is not going to solve the problem
826:00 - because if you pass in a variable like
826:03 - balance to each of the functions and
826:05 - then change it within that function it's
826:08 - only going to be changing in effect a
826:09 - local copy thereof it's not going to be
826:11 - changing what's outside of those
826:13 - functions so I think we actually need a
826:16 - better way altogether and in fact allow
826:18 - me to transition to perhaps a
826:19 - modification of this same program
826:21 - program recall that we looked most
826:23 - recently at this notion of
826:25 - object-oriented programming whereby you
826:27 - can model real world entities for
826:29 - instance a bank and you can model and
826:32 - encapsulate information about that real
826:35 - world entity for instance like someone's
826:37 - account balance so let me propose that
826:39 - we actually do this let me start from
826:41 - scratch with bank.pi get rid of the
826:43 - global variable altogether and actually
826:45 - use some object-oriented code let me
826:48 - define a class called account to
826:50 - represent someone's bank account and
826:52 - then let me go ahead and initialize with
826:55 - my init method which again takes by
826:58 - convention at least one argument called
827:00 - self let me go ahead and initialize the
827:02 - every person's bank account to some
827:05 - value like zero now how can I do that
827:07 - well I'm going to go ahead and do
827:09 - self.balance equals zero thereby giving
827:12 - me an instance variable called balance
827:14 - initialized for this account to zero but
827:17 - I'm going to proactively remember how we
827:19 - also introduce this notion of properties
827:21 - which might otherwise collide with the
827:23 - names of my instance variables so just
827:25 - by convention I'm going to do this I'm
827:26 - going to rename this instance variable
827:28 - proactively to underscore balance to
827:31 - effectively indicate that it's private
827:33 - even though that's not enforced by
827:34 - python it's just a visual clue to myself
827:36 - that this is something that really I
827:39 - should not or other code should not
827:41 - touch just functions in this class now
827:44 - let me go ahead and do this let me go
827:45 - ahead and Define an actual function
827:47 - called balance that really is going to
827:49 - be a property whose purpose in life is
827:51 - just to return self dot balance and I'm
827:55 - going to go explicitly and say this is
827:56 - indeed a property of this class now let
828:00 - me go ahead and re-implement those other
828:01 - two functions deposit and withdraw but
828:03 - in the confines of this class so I'm
828:06 - going to say Define
828:07 - deposit it's going to take in an
828:10 - argument self as always but an
828:11 - additional One n a number of dollars or
828:14 - coins to deposit and how do I now
828:16 - manipulate this well I'm going to do
828:17 - self dot underscore balance plus equals
828:21 - n and now down here I'm going to do def
828:23 - withdraw self and just like for deposit
828:27 - but here I'm going to do self.balance
828:29 - minus equals n and now if I go down
828:32 - below this class I'm going to go ahead
828:34 - and Define myself a main function just
828:36 - so I can try this now out I'm going to
828:38 - go ahead and create an account object by
828:41 - calling the account Constructor that is
828:44 - the name of the class with two
828:45 - parentheses if I'm not passing in any
828:47 - arguments to init I'm going to go ahead
828:49 - now and print out as before the balance
828:51 - of my account but to do that I'm going
828:53 - to access the property of that account
828:55 - like this and I'm going to go ahead now
828:57 - and say deposit another hundred dollars
828:59 - or coins with deposit 100 and I'm going
829:03 - to go ahead like before and also now
829:05 - immediately withdraw for whatever reason
829:07 - 50 of the same and now I'm going to
829:09 - print One Last Time balance followed by
829:12 - account.balance again accessing that
829:14 - property and for this whole thing to
829:16 - work of course I need one of these if
829:18 - name equals equals underscore main then
829:21 - go ahead and call Main now before I run
829:24 - this you'll see that it rather escalated
829:25 - quickly I had a very simple goal at hand
829:27 - to implement the notion of a bank and I
829:29 - was able to implement that perfectly
829:32 - fine ultimately by declaring balance to
829:34 - be Global but then to tell each of my
829:36 - functions that it is indeed Global but
829:39 - that's not really the best form of
829:41 - encapsulation we have at our disposal
829:43 - now right per our focus on
829:44 - object-oriented programming if we're
829:46 - trying to implement some real world
829:47 - entity like an account at a bank that's
829:50 - what classes allow us to do and it
829:52 - allows us to solve that same problem
829:53 - perhaps a little more cleanly certainly
829:55 - if we're going to accumulate more and
829:57 - more functions or methods over time so
829:59 - if I didn't make any mistakes here if I
830:01 - run python of bank.pi and hit enter now
830:04 - you'll see that it just works just fine
830:07 - because in the world of classes in
830:09 - Python the so-called instance variables
830:12 - are by definition accessible to all of
830:15 - the methods in that class because we're
830:18 - accessing them all by way of that
830:20 - special per diameter self
830:23 - so which way to do it for a reasonably
830:25 - small script wherein you are simply
830:27 - trying to implement a script that has
830:29 - some Global uh information like an
830:32 - account balance that you then need to
830:33 - manipulate elsewhere the global keyword
830:35 - is a solution to that problem but
830:37 - generally speaking in many languages
830:39 - python to some extent among them using
830:41 - Global variables tends to be frowned
830:43 - upon only because things can get messy
830:46 - quickly and it can become less obvious
830:48 - quickly exactly where your information
830:50 - is stored if some of it's up here some
830:53 - of it's in your function so generally
830:55 - the rule of thumb is to use Global
830:57 - variables sparingly though technically
830:59 - speaking in Python these Global
831:01 - variables are technically local to our
831:04 - module if we were indeed implementing a
831:06 - library and not just a program so in
831:08 - short try to use Global variables
831:10 - sparingly but when you do there is a
831:12 - solution to these same problems
831:13 - questions now on globals or our
831:17 - re-implementation of the same idea but
831:19 - using
831:20 - full-fledged object oriented programming
831:23 - uh I just would like to ask uh what this
831:27 - property does what this property does so
831:29 - if I go back to vs code here you'll see
831:31 - that this was a Technique we looked at
831:33 - in our lecture on object-oriented
831:35 - programming whereby a property is a
831:38 - instance variable that's somehow
831:40 - protected it allows me to control how it
831:43 - can be read and written so in this case
831:46 - I only have what's called generally a
831:48 - Setter and sorry in this case I only
831:50 - have what's generally called a getter
831:52 - and there's no mention of the word
831:53 - getter here this is just what app
831:55 - property means that function balance
831:57 - will allow me recall to use syntax like
832:00 - this where I can pretend as though
832:02 - balance is indeed with no underscore an
832:05 - instance variable but I can now prevent
832:07 - code like mine in main from trying to
832:10 - change balance because I do not have a
832:12 - Setter I would not be able to do
832:14 - something like account balance equals a
832:16 - thousand to just give myself a thousand
832:17 - dollars or coins because I have not
832:19 - defined a Setter so again per our focus
832:21 - on object oriented programming these
832:23 - properties just allow me some finer
832:25 - grain can control some languages allow
832:28 - you to Define variables that are so to
832:30 - speak constant that is once you have set
832:32 - a value to them you cannot change the
832:35 - value of that variable and that tends to
832:37 - be a good thing because it allows you to
832:38 - program defensively just in case you
832:41 - accidentally or someone else
832:42 - accidentally tries to modify the value
832:44 - of that variable if you have declared it
832:46 - in some language as a constant it cannot
832:49 - be changed or usually cannot be changed
832:52 - without great effort unfortunately in
832:54 - Python we're again on the sort of honor
832:56 - System here where we have conventions to
832:58 - indicate that something should be
832:59 - treated as though it's constant but
833:01 - that's not actually enforced by the
833:03 - language so for instance let me go back
833:04 - here to vs code and let me create a new
833:06 - file for instance called meows.pi and
833:09 - let's see if we can't implement the
833:10 - notion of a cat meowing on the screen so
833:12 - I'll do code of meows dot pi and in
833:15 - meows.pi let me go ahead for instance
833:18 - and Implement a very simple program that
833:20 - just has a cat meowing three times so
833:22 - how about this for I in the range of 3
833:25 - go go ahead and print out quote unquote
833:28 - meow all right well we've seen in the
833:30 - past how we can clean this up a little
833:32 - bit for instance if I'm not actually
833:33 - using I I might as well pythonically
833:35 - just change the name of that variable to
833:37 - underscore even though that has no
833:39 - functional effect here but here we have
833:41 - this three sort of randomly hard-coded
833:44 - that is typed explicitly into my code
833:46 - and it's totally not a big deal when
833:48 - your code is only two lines but imagine
833:51 - that this is a much bigger program with
833:53 - dozens or even hundreds of lines and
833:55 - imagine that one of those lines just as
833:56 - a three in there somewhere like you're
833:59 - never going to find that three very
834:00 - easily and it's going to be very easily
834:02 - overlooked by you or colleagues or
834:03 - others that you've hard-coded some magic
834:06 - value like a three right there in your
834:08 - code so it tends to be best practice not
834:11 - just in Python but other languages as
834:12 - well anytime you have what is
834:14 - essentially a constant like a number
834:16 - three that shouldn't ever change is to
834:18 - at least let it Bubble Up surface it to
834:20 - the top of your code so that it's just
834:22 - obvious what your code's constant values
834:25 - are and so by that I mean this at the
834:27 - top of this file it would probably be a
834:29 - little clearer to colleagues and frankly
834:31 - me tomorrow after I've forgotten what I
834:33 - did today to Define a variable like
834:35 - meows and set it equal to three and then
834:38 - instead of hard coding three here or
834:40 - even lower in a much bigger program let
834:42 - me just go ahead and pass in that
834:44 - variable's value to my Loop so that now
834:47 - it's just kind of obvious to me that
834:48 - meows is apparently the number of times
834:50 - to meow and if I ever want to change it
834:52 - the only code I have to change is at the
834:54 - very top of my file I don't need to go
834:56 - fishing around or figure out what's
834:57 - going to break what do I need to change
834:59 - I just know that I can change these
835:01 - constants up at the top the problem
835:03 - though with python is that python
835:06 - doesn't actually make variables constant
835:08 - it's indeed a convention in Python and
835:10 - some other languages to at least
835:12 - capitalize your variables when you want
835:14 - to indicate to the world that you should
835:16 - not touch this it is constant but there
835:19 - is literally nothing in my code
835:20 - preventing me from saying you know what
835:22 - today I feel like four meows instead
835:24 - like that would work work in other
835:27 - languages though there's typically a
835:28 - keyword or some other mechanism
835:30 - syntactically that would allow you to
835:32 - prevent line three currently from
835:35 - executing so that when you try to run
835:37 - your code you would actually get an
835:38 - error message explicitly saying you
835:40 - cannot do that so python again is a bit
835:42 - more on the honor System when it comes
835:44 - to these conventions instead now it
835:47 - turns out there's other types of
835:48 - constants quote unquote that python
835:51 - typically manifests and in fact let me
835:52 - go ahead and change this around a little
835:54 - bit let me delete this version of meows
835:56 - and let me introduce again a class from
835:58 - our discussion of object oriented
836:00 - programming like a class representing a
836:02 - cat another real world entity recall
836:05 - that within classes you can have not
836:07 - just instance variables but class
836:09 - variables that is variables inside of
836:11 - the class that aren't inside of self per
836:14 - se but they're accessible to all the
836:15 - methods inside of that class here too
836:18 - there's a convention but not enforced by
836:20 - python of having class constants whereby
836:23 - inside of the class you might want to
836:25 - have a variable people that should
836:27 - should not be changed but you just want
836:30 - to indicate that visually by
836:31 - capitalizing its name so for instance if
836:33 - the default number of meows for a cat is
836:36 - meant to be three I can literally inside
836:38 - of my class but outside of any of my
836:40 - defined methods just create a class
836:43 - variable all capitalized with that same
836:45 - value and then if I want to create a
836:47 - method like meow for instance which as
836:50 - an instance method might take in self as
836:53 - we know and then I might have my Loop
836:54 - here for underscore in the range of and
836:57 - now I need to access this the convention
836:58 - would be to say cat dot meows to make
837:01 - clear that I want the meows variable
837:03 - that's associated with the class called
837:05 - cat then I'm going to go ahead and print
837:08 - out one of these meows and now at the
837:10 - bottom of my code outside of the class
837:12 - let me go ahead and do something like
837:13 - this let me instantiate a cat using the
837:16 - cat Constructor notice this is important
837:18 - per our discussion of oop the class is
837:21 - capitalized by convention but the
837:23 - variable over here is is lower case and
837:25 - I could call it just C or anything else
837:27 - but I kind of like the symmetry of
837:29 - calling it little cat here and big cat
837:31 - so to speak over here and now if I want
837:33 - this particular cat to meow that default
837:36 - number of three times I can just do cat
837:38 - dot meow like this and that method meow
837:41 - is going to per line five access that
837:44 - class constant but again it's constant
837:47 - only in the fact and only in the sense
837:49 - that you should not touch that not that
837:51 - it's actually going to be enforced by
837:54 - the language
837:55 - all right let me go ahead then and run
837:56 - this with python of meows.pi and there
837:59 - it is three of our meows meow meow it
838:02 - turns out that python is a dynamically
838:05 - typed language that is to say it's not
838:07 - strongly typed whereby when you want an
838:09 - INT you have to tell the program that
838:11 - you are using an INT you don't have to
838:13 - tell the program that you are using a
838:15 - stir or a float or a set or anything
838:17 - else generally speaking to date you and
838:20 - I when we're creating variables we just
838:21 - give a variable a name we frequently
838:23 - assign it using an equal sign some other
838:26 - value and honestly python just kind of
838:28 - dynamically figures out what type of
838:30 - variable it is if it's quote unquote
838:33 - hello world the variable is going to be
838:35 - a stir if it's 50 the integer the
838:38 - variable is going to be an INT now in
838:40 - other languages including C and C plus
838:42 - plus and Java and others it's sometimes
838:45 - necessary for the programmer to specify
838:47 - what types of variables you want
838:50 - something to be the upside of that is
838:53 - that it helps you detect bugs more
838:55 - readily because if you did intend for a
838:57 - variable to store a string or an integer
838:59 - but you accidentally store an integer or
839:02 - a string the opposite or something else
839:04 - altogether your language can detect that
839:07 - kind of mistake for you when you go for
839:09 - instance to run the program it can say
839:10 - no you've made a mistake and you can fix
839:13 - that before your actual users detect as
839:15 - much in Python 2 here it's again more of
839:18 - a friendly environment where you can
839:20 - provide hints to python itself as to
839:23 - what type a variable should be but the
839:25 - language itself does not strongly
839:27 - enforce these rather you can use a tool
839:30 - that will tell you whether or not you're
839:33 - using a variable correctly but it's
839:35 - typically a tool you would run as the
839:36 - programmer before you actually release
839:39 - your code to the world or if you have
839:40 - some kind of automated process you can
839:42 - run this kind of tool just like you
839:44 - could reformat or link your code with
839:46 - some other program before you actually
839:48 - release it to the world so how might we
839:51 - go about using these so-called typins
839:53 - well they're documented in the usual
839:54 - place in Python's own documentation and
839:57 - it turns out there's a program that's
839:58 - pretty popular for checking whether or
840:00 - not your code is adhering to your own
840:03 - type pins and that program here is
840:05 - called My Pie and it's just one of
840:06 - several but this one's particularly
840:08 - popular and can be easily installed in
840:10 - the usual way with Pip install my pie
840:13 - and its own documentation is that this
840:15 - URL here but we'll use it quite simply
840:17 - to check whether or not our variables
840:19 - are indeed using the right types so how
840:22 - can we go about doing this all right let
840:24 - me go back here to vs code clear my
840:26 - terminal window and in fact erase
840:28 - meows.pi as it currently was and let's
840:30 - Implement a different version of meows
840:32 - that quite simply has a function called
840:34 - meow that does the actual meowing on the
840:36 - screen and then I'm just going to go
840:37 - ahead and call that function down toward
840:39 - the bottom I'm not going to bother with
840:40 - a main function just for Simplicity so
840:42 - that we can focus as always only on
840:44 - what's new so here we are defining a
840:46 - function called meow it's going to take
840:49 - a number of times to meow for instance n
840:52 - for number and inside of this function
840:54 - I'm going to to do my usual for
840:56 - underscore in the range of n Go ahead
840:59 - and print quote unquote meow So based on
841:01 - our earlier code I think this is correct
841:03 - I've not bothered defining the variable
841:05 - as I am instead using the underscore
841:07 - because I'm not using it anywhere but I
841:09 - think I now have a working function
841:10 - whose purpose in life is to meow zero or
841:13 - one or two or three or more times well
841:15 - let's use this function again not
841:17 - bothering with main I'm just going to
841:18 - keep my function at the very top because
841:20 - there's only one and I'm going to write
841:21 - my code here on line six so I'm going to
841:24 - give myself I'm going to ask the user
841:26 - for a number and I'm going to go ahead
841:28 - and prompt them in the usual way for
841:30 - that number of times to meow and now I'm
841:33 - going to go ahead and call meow on that
841:36 - number now some of you might see what
841:38 - I've already done wrong but perhaps I
841:40 - myself don't so let me go into my
841:42 - terminal window and run python of
841:44 - meows.pi the goal being to prompt me
841:46 - this seems to be working I'm going to
841:48 - type in three and I would expect now the
841:51 - meow function to print out meow three
841:54 - times and to sure
841:55 - but no there's some kind of type error
841:58 - here stir object cannot be interpreted
842:01 - as an integer why might that be
842:05 - why might that be
842:07 - because the input function retains a
842:10 - string instead of an integer exactly the
842:13 - input function returns a string or a
842:15 - stir not an end so in the past of course
842:18 - our solution to this problem has just
842:19 - been to convert the string to an INT by
842:22 - using the int function but now let me
842:24 - start programming more defensively so
842:26 - that honestly I don't even find myself
842:28 - in this situation at all let me go ahead
842:31 - and do this let me add what's called a
842:33 - type hint to my function that explicitly
842:36 - specifies for meow what type of variable
842:39 - should be passed in I'm going to go
842:41 - ahead now and change the very first line
842:43 - of my code and my function to specify
842:45 - that n colon should be an INT and this
842:49 - is a type hint the fact that I've added
842:51 - a colon of space and the word int is not
842:54 - creating another int or anything like
842:56 - that it's just a hint an annotation so
842:59 - to speak to python that this variable on
843:02 - the left called n should be an INT now
843:06 - unfortunately a python itself doesn't
843:09 - care because again these type hints are
843:10 - not enforced by the language and that's
843:12 - by Design the language itself in the
843:14 - community prefers that python B
843:16 - dynamically typed not so strongly typed
843:18 - as to require these things to be true
843:20 - but if I run meows.pi type in three
843:23 - again the same error is there but let me
843:26 - go about trying this my Pi program an
843:29 - example of a program that understands
843:31 - type hints and if I run it proactively
843:34 - myself can find bugs like this in my
843:37 - code before I or worse a user actually
843:40 - runs and encounter something cryptic
843:42 - like this type error here let me clear
843:44 - my terminal window and this time run my
843:46 - Pi space meows dot Pi so I'm going to
843:49 - run my Pi on my program but I'm not
843:52 - running python itself when I hit enter
843:55 - we'll see this
843:57 - all right we see now that my pie found
843:59 - apparently an error on line seven error
844:02 - argument one to meow has incompatible
844:05 - type stir expected end so it's still an
844:08 - error message but my Pi is not a program
844:10 - that my users would use this is a
844:12 - program that you and I as programmers
844:14 - would use and because we have run this
844:16 - code now before we for instance released
844:19 - this program to the world I can now see
844:21 - even before the code is called or run oh
844:23 - I seem to be mu using my argument to
844:26 - meow wrong I had better fix this somehow
844:29 - well I can actually go about in hint
844:32 - adding type hints even to my own
844:34 - variables here so as to catch this
844:36 - another way too if I know on line six
844:39 - that I'm creating already a variable
844:40 - called number and I know already that
844:42 - I'm assigned it equal to the return
844:45 - value of input I could give my Pi in
844:48 - tools like it another hint and say you
844:50 - know what this variable called number
844:52 - should also be an INT that is to say if
844:55 - I now start getting into the habit of
844:57 - annotating all of my variables and
845:00 - arguments to functions maybe my pie can
845:03 - actually help me find things quite
845:05 - quickly as well before I get to the
845:06 - point of running python itself let's go
845:08 - ahead and try this again mypie of
845:11 - meows.pi and hit enter and this time
845:13 - notice that my pie actually found the
845:16 - mistake a little more quickly notice
845:18 - this time it found on line six that
845:21 - error incompatible types and assignment
845:23 - expression has Type stir variable has
845:26 - Type int so before I even got to the
845:28 - point of calling meow line six via this
845:31 - type in when used and analyzed by my Pi
845:34 - has helped me find a wait a minute I
845:36 - shouldn't be assigning the return value
845:38 - of input to my variable called number in
845:41 - the first place why my Pie has just
845:43 - pointed out to me that one returns a
845:44 - stirrer I'm expecting an INT let me fix
845:47 - this now instead alright so let me clear
845:49 - my terminal window and now let me do
845:51 - what most of you were probably thinking
845:52 - I should have done in the first place
845:53 - after all of these weeks but now let me
845:55 - go ahead and convert the return value of
845:58 - input to an integer for today's purposes
846:00 - I'm not going to try to catch any
846:02 - exceptions or the like we're just going
846:04 - to assume that the user types this in
846:05 - properly and now let me go ahead and run
846:08 - my Pi of meows.pi having not only added
846:12 - two types to my argument to my function
846:15 - to my variable down here on line six and
846:18 - I've also now fixed the problem itself
846:20 - let me go ahead and run my pi and
846:22 - success no issues found in one source
846:25 - file now it's more reasonable for me to
846:28 - go and run something like python of
846:29 - meows and just trust that when I type in
846:31 - 3 at least I'm not going to get a type
846:34 - error that is I didn't mess up as a
846:37 - programmer with respect to the types of
846:39 - my variables why because when I wrote
846:41 - the code in the first place I provided
846:43 - these annotations these hints that
846:45 - inform tools like my Pi that my
846:47 - intention had better line up with what
846:49 - the actual code does let me pause here
846:52 - and see if there's now any questions on
846:54 - tight pins or my pie is is it common or
846:58 - how common is it for those to be used or
847:01 - is it just that it's more used in more
847:02 - complex code
847:04 - um where it's more difficult to ensure
847:07 - that you're actually using the correct
847:11 - type in the way that you're using
847:12 - variables it's a good question and it's
847:14 - rather a matter of opinion python was
847:16 - designed to be a little more versatile
847:19 - and flexible when it comes to some of
847:20 - these details partly for writability to
847:23 - make it easier and faster to write code
847:25 - partly for performance so that the
847:27 - program like python doesn't have to
847:28 - bother checking these kinds of details
847:29 - we can just get right into the code the
847:31 - reality though is that uh strong type
847:34 - checks do tend to be a good thing for
847:37 - the correctness of your code why because
847:38 - programs like my Pi can find before your
847:41 - code is even run if there's already
847:43 - known to be an error and it tends to be
847:46 - good for defensive programming so the
847:49 - the situation essentially is that within
847:52 - the python ecosystem you can annotate
847:55 - your types in this way you can use tools
847:57 - tools to use those tight pins but today
847:59 - to python itself does not enforce or
848:01 - expect to enforce these conventions and
848:04 - larger code bases and professional code
848:07 - bases Commercial Code bases probably
848:09 - depending on the product project manager
848:11 - or depending on the engineering team
848:13 - they may very well want themselves to be
848:14 - using type hints why if it just
848:16 - decreases the probability of bugs in
848:19 - fact let me propose now that I imagine a
848:22 - situation where instead of expecting
848:25 - that meow prints meow meow meow some
848:28 - number of times suppose that I
848:30 - accidentally assumed that the meow
848:32 - function just returns meow some number
848:34 - of times we saw for instance when
848:36 - focusing on unit tests that it tends to
848:38 - be a good thing to have functions that
848:40 - return values be it an INT or a string
848:42 - rather than just having some side effect
848:44 - like printing things out themselves so
848:46 - perhaps I'm still in that mindset and
848:48 - I've just assumed mistakenly for the
848:50 - moment that meow returns a value like
848:53 - meow or meow meow or meow meow meow a
848:56 - big string of some number of meows
848:57 - rather than just printing it itself as
848:59 - it clearly does at the moment on line
849:01 - three and therefore suppose that I
849:04 - accidentally did something like this
849:05 - rather than just getting the number and
849:08 - passing it to meow suppose I did this
849:10 - suppose I declared a number of of a new
849:14 - variable called meows the type of which
849:16 - I think should be stir and suppose again
849:19 - I assume accidentally that meow returns
849:22 - to me a string of those meows so that I
849:25 - myself can then print them later this
849:27 - would be a little more conducive
849:28 - arguably to testing my meow function why
849:31 - because I could expect that it's
849:33 - returning meow or meow meow or meow meow
849:36 - meow separated by new lines returning a
849:38 - stir that I could then assert equals
849:40 - what I expect it to be in something like
849:43 - a unit test I'm not going to bother
849:44 - writing any unit tests now but let's
849:46 - just suppose that's the mindset I'm now
849:48 - in and so on line seven I'm assuming
849:51 - that I want to assign the return value
849:53 - of meow to a new variable called meows
849:56 - which I've annotated with this type hint
849:58 - as being a stir just so we can see
850:01 - another variable this one's not an INT
850:03 - but a stir instead well let me go ahead
850:05 - and run this code now python of meows.pi
850:09 - enter typing in three and you'll see a
850:12 - curious bug meow meow meow none
850:15 - but why is that well it turns out at the
850:18 - moment my meow function only has a side
850:20 - effect it just prints out meow some
850:22 - number of times it doesn't explicitly
850:24 - return a value as it would if there were
850:26 - literally the return keyword there by
850:29 - default then when a function in Python
850:31 - does not explicitly return a value it's
850:33 - implicit return value is effect none and
850:36 - so what we're seeing here is this on
850:38 - line eight because I'm assigning the
850:42 - return value of meow which is none to my
850:46 - meows variable line three is what's
850:50 - still printing meow meow meow and line
850:53 - eight is what's now incorrectly printing
850:55 - none because I accidentally thought that
850:58 - meow returns a value but it doesn't so
851:00 - it's about return value is effectively
851:02 - none so I'm printing very weirdly the
851:05 - word none at the bottom so how could I
851:07 - go about catching this kind of mistake
851:09 - too like I might make this mistake but
851:11 - maybe with less frequency if I'm in the
851:13 - habit of annotating my code we with this
851:16 - new feature called type hints what you
851:19 - can do here is this let me clear my
851:21 - terminal window to get rid of that
851:22 - artifact and up here let me additionally
851:25 - specify with some funny looking syntax
851:27 - that my meow function actually by Design
851:31 - returns none so you literally use this
851:34 - arrow notation in Python when hinting
851:37 - what the return value of a function is
851:40 - you would do this after the parentheses
851:43 - a space a hyphen a greater than symbol
851:46 - like an arrow and then another space and
851:48 - then the type of the return value for
851:50 - now it's indeed gonna excuse me return
851:53 - none but now at least I can catch it
851:56 - like this if I now run not python but my
851:58 - Pi on my code which would be a habit I'm
852:01 - now getting into if using type hints
852:03 - check that I'm using all of my types
852:04 - correctly before I even run my program
852:06 - we'll see that now my Pi has found on
852:09 - line seven that meow quote unquote does
852:12 - not return a value and my pie knows that
852:15 - because I have proactively annotated my
852:17 - meow function as having none as its
852:20 - return value so now my Pi can detect
852:23 - that I should now realize oh wait a
852:25 - minute I'm being foolish here my meow
852:28 - clearly does not return a value I should
852:30 - not be treating it like it does on line
852:32 - seven let me go about actually fixing
852:35 - this now so how do I go about fixing
852:37 - this well let's practice what we
852:39 - preached in our focus on unit test
852:40 - having a function like meow not have
852:42 - side effects like printing itself but
852:44 - let's have it return the actual string
852:46 - and I can actually do this kind of
852:48 - cleanly let me uh clear my error message
852:50 - in my terminal window here let me get
852:52 - rid of the loop here let me say this
852:55 - time that okay fine meow is going to
852:57 - return a value an actual stir or string
853:00 - so I've changed none to stir and now I
853:03 - can implement this in any number of ways
853:04 - maybe even using a loop but recall that
853:06 - we have this syntax in Python which will
853:08 - I think solve this problem for us if I
853:11 - want to return a string of n meows what
853:15 - I can actually do recall is this return
853:17 - quote unquote meow backslash n times
853:21 - that number n so it's kind of a clever
853:24 - one-liner avoids the need for a for Loop
853:27 - or something more involved than that to
853:28 - just say multiply meow backslash n
853:31 - against itself three times essential or
853:34 - end times in this case in general so
853:36 - that I get back a big string of zero
853:38 - meows One Two Three or many more Mouse
853:41 - instead I think now my code on line six
853:44 - is actually correct now I've changed
853:46 - meow to behave the way I was pretending
853:48 - to assume it always worked so I'm
853:51 - storing in meows plural of variable
853:54 - that's of type stir because now meow
853:57 - does have a return value of typester
854:00 - itself per this type hint as well all
854:04 - right let me go ahead now and print
854:06 - meows but because each of my meows comes
854:09 - with a trailing new line the backslash
854:11 - and I'm going to proactively fix what
854:13 - would be a minor aesthetic bug and I'm
854:15 - just going to avoid outputting an extra
854:16 - new line at the end of those three so if
854:19 - I run python of meows.pi now type in
854:22 - three there's my meow meow meow and now
854:26 - no mention of none
854:29 - questions now on type hints and these
854:32 - annotations in my pie and using them to
854:36 - defensively write code that just
854:38 - decreases hopefully the probability of
854:39 - your own bugs
854:41 - [Music]
854:50 - while the program don't take it as a
854:53 - strange why does the program not take it
854:55 - as a as strange
854:57 - so so recall that um early on in the
855:00 - class we looked at plus as a
855:02 - concatenation operator that allows you
855:04 - to join a string on the left and the
855:05 - right multiplication is also an
855:08 - overloaded operator for Strings whereby
855:11 - if you have a string on the left and an
855:13 - INT on the right it will multiply the
855:16 - string so to speak by concatenating or
855:18 - joining that many meows all together so
855:22 - this is a feature of object oriented
855:24 - programming an OB an operator
855:26 - overloading as we saw it uh in the past
855:28 - other questions on tight Pence or my pie
855:33 - can we not Typecast this data type uh
855:36 - the you know of this variable number no
855:39 - you still and let me correct the
855:40 - terminology it wouldn't be called type
855:42 - casting in this context because it's not
855:44 - like C or C plus plus where there's an
855:46 - equivalence between these types you're
855:47 - technically converting on line five a
855:50 - stir to an INT you do still have to do
855:53 - this because my Pi for instance would
855:55 - yell at you if you were trying to assign
855:57 - a stir on the right to an INT on the
855:59 - left you must still use the int function
856:02 - int itself is still a function it's not
856:04 - a type hint but the word int is being
856:07 - used in another way now in these type
856:09 - pins so this imp is still a function
856:12 - call as it always has been this syntax
856:15 - on the left is another use of the
856:16 - keyword int but in the form of these
856:18 - type hints so you still have to do the
856:20 - conversion yourself
856:23 - all right let me propose that we
856:25 - transition to another feature of python
856:27 - that's worth knowing especially since
856:29 - it's one that you'll see in the wild
856:31 - when you see code or libraries that
856:32 - other folks have written namely
856:34 - something known as a doc string or
856:36 - document strings it turns out in the
856:38 - world of python there is a standardized
856:40 - way per another pep python enhancement
856:42 - proposal this one 257 that essentially
856:46 - standardizes how you should document
856:48 - your functions among other aspects of
856:51 - your code and so for instance let me go
856:53 - back to my meows.pi file here and let me
856:57 - propose that we now start documenting
856:59 - this code too so that I know what the
857:01 - meow function does and in fact the
857:03 - standard way of doing this using doc
857:06 - string notation would be as follows to
857:09 - comment this function not above it as
857:11 - you might be in the habit of doing with
857:13 - code in general but actually inside of
857:15 - it but instead of commenting it like
857:17 - this with the usual hash comment sign
857:19 - like meow n times it turns out that when
857:22 - you're formally docking when you're
857:25 - formally documenting a function like
857:27 - meow in this case you don't use regular
857:30 - inline comments so to speak you use this
857:33 - syntax instead you use triple quotation
857:36 - marks either double or single then you
857:39 - write out your comment meow and times
857:41 - and then you write the same again at the
857:44 - end so either three double quotes at the
857:46 - start in the end or three single quotes
857:48 - at the start in the end and python has
857:50 - built into it certain tools and certain
857:52 - assumptions that if it detects that
857:55 - there is a comment using this doc string
857:58 - format triple quotes on the left and the
858:00 - right it will assume that that's indeed
858:02 - the documentation for that function and
858:04 - it turns out in the python python
858:05 - ecosystem there's a lot of tools that
858:07 - you can then use to analyze your code
858:10 - automatically extract all of these
858:13 - document strings for you and even
858:15 - generate web pages or PDFs of
858:17 - documentation for your own functions so
858:20 - there's these conventions via which if
858:22 - you adhere to them you can start
858:24 - documenting your code as for other
858:26 - people by generating automatically the
858:28 - documentation from your own code without
858:31 - writing something up from scratch
858:32 - manually now it turns out if your
858:35 - function does take arguments and perhaps
858:38 - does a bit more there are multiple
858:39 - conventions for how you can document for
858:42 - the human programmers that might be
858:43 - using your function whether it's you or
858:45 - a colleague or someone else on the
858:47 - internet to actually use these doc
858:49 - strings to standardize the information
858:51 - they're in so you might see this instead
858:54 - using the same triple quotes above and
858:57 - below now you might see your one
858:59 - sentence one sentence explanation of the
859:01 - function meows meow end times sometimes
859:06 - depending on the style and use it might
859:08 - actually still be on the first line but
859:09 - with a blank line below it but I'll keep
859:11 - everything uniformly indented and this
859:14 - is a convention used by some popular
859:16 - python documentation tools as well you
859:18 - would say syntax like this param n colon
859:22 - and then adjust description of what n is
859:24 - number of times to meow then colon Type
859:27 - n colon int which just indicates that
859:30 - the type of n is an integer then if this
859:34 - function could actually raise an
859:36 - exception you can document that too and
859:38 - actually it's not really well it's
859:41 - arguably my mistake here if n comes in
859:43 - as an argument and is not in fact an INT
859:46 - maybe it's a float or a string or
859:48 - something else the multiplication sign
859:50 - here is not going to work it's not going
859:52 - to multiply the string it's going to
859:54 - trigger what I know from experience to
859:55 - be a type error so I'm going to go ahead
859:57 - and proactively say in my own
859:59 - documentation that this function
860:01 - technically if you use it wrong could
860:03 - raise a type error even though I'm
860:05 - hinting up here with this annotation
860:07 - that you should pass in an INT again
860:10 - python doesn't enforce that so if you
860:11 - pass in a float this might in fact raise
860:13 - this function a type error and so that
860:16 - might happen if n is not an INT and then
860:20 - lastly I might say for clarity's sake
860:22 - for other programmers this function
860:24 - returns a string of n meows one per line
860:28 - and the return type of that value our
860:31 - type is going to be stir now all of this
860:34 - syntax here as I've used it is not
860:36 - python per se this is a convention known
860:39 - as restructured text which is a form of
860:41 - markdown like language that's used for
860:43 - documentation for websites for blogs and
860:45 - even more but it's one of the popular
860:48 - conventions within the world of python
860:50 - to document your own functions so this
860:53 - does not have anything to do
860:54 - fundamentally with type hints type hints
860:57 - are a feature of python what I'm doing
861:00 - here is just adhering to a third-party
861:03 - Convention of putting in between a
861:06 - Python doc string from the start to the
861:09 - end a certain standard format so that
861:11 - these third-party tools can analyze my
861:14 - code for me top to bottom left to right
861:15 - and ideally generate documentation for
861:19 - me it can generate a PDF a web page or
861:21 - something else so that I or my
861:23 - colleagues don't need to not just only
861:25 - write code but also manually create
861:27 - documentation for our code we can keep
861:29 - everything together and use tools to
861:31 - generate the same for us
861:34 - any questions now on these doc strings
861:38 - which again are a Convention of
861:40 - documenting your own code often
861:43 - following some standard syntax yeah so
861:46 - when you say like you would document it
861:48 - and put it in a PDF is the purpose of
861:51 - doing this to kind of like publish it
861:53 - and share your function so other users
861:55 - can use it absolutely in the past when
861:58 - we have installed some third-party
861:59 - libraries for instance cow say a few
862:01 - weeks back recall that I showed you what
862:04 - functions it had but if you read the
862:05 - documentation you might actually see
862:07 - that it was documented for us by the
862:10 - author of that program now I don't
862:11 - believe they were using this particular
862:13 - syntax but it was definitely useful for
862:15 - you and me to be able to read some web
862:17 - page or PDF telling us how to use the
862:19 - library rather than wasting time reading
862:21 - through someone else's code and trying
862:23 - to infer what functions exist and how to
862:25 - use them it just tends to be much more
862:27 - developer friendly to have proper
862:29 - documentation for our own code or
862:31 - libraries as well other questions yeah
862:35 - um when with Doc strings when you when
862:37 - it's used to generate like a PDF or
862:39 - whatever does it does it include uh any
862:41 - of the code so if you're referencing in
862:43 - the in your in your comment uh if you're
862:46 - referencing the code in the comment
862:48 - itself might not make sense without
862:49 - seeing the code because it does do these
862:52 - include include it short answer you can
862:55 - do that not in the convention I'm using
862:57 - here but there's actually a clever way
862:58 - to write in your doc strings sample
863:03 - inputs to your functions and Sample
863:05 - outputs for your functions and if you
863:07 - use a different tool that we've not
863:09 - discussed that tool will run your code
863:11 - using those sample inputs it will check
863:14 - that your outputs match your sample
863:16 - outputs and if not the program will yell
863:18 - at you saying you've got a bug somewhere
863:19 - so this is just another way where you
863:22 - can use doc strings to not only document
863:24 - but even catch errors in your code
863:27 - this has been a lot and there's a bit
863:29 - more to go why don't we go ahead here
863:31 - and take a five minute break and when we
863:32 - resume we'll take a look at yet another
863:34 - feature of python yet another library to
863:36 - write code faster all right suppose we
863:39 - want to modify this meows program to
863:41 - actually take its input not from the
863:43 - input function in the blinking prompt
863:44 - but from the command line recall in our
863:46 - discussion of libraries that you could
863:48 - use something like sys.org V to get at
863:50 - command line arguments that a human has
863:52 - provided when you're running your
863:53 - program so why don't we whip up a
863:55 - version of meow that uses command line
863:57 - arguments instead of again input so I'm
863:59 - going to go ahead and delete what we've
864:01 - done here thus far and let me propose
864:02 - that we import CIS as we've done in the
864:05 - past and let's do this how about if the
864:09 - user does not type any command line
864:11 - arguments then my program will just meow
864:13 - once just so that it does something
864:14 - visually interesting otherwise let's
864:17 - also give the user an option to specify
864:20 - how many times I want the cat to meow so
864:23 - let's start simple let's first of all go
864:25 - ahead and do this if the length of
864:29 - sis.org V equals equals one that is the
864:32 - user only typed the name of the program
864:34 - and nothing else after the uh in their
864:37 - command then let's go ahead and just
864:39 - print out one meow like this uh else for
864:43 - now let's go ahead and print out
864:45 - something like this else go ahead and
864:47 - print out let's say usage for the
864:49 - program which will be usage of meows dot
864:52 - Pi just so that the user knows that the
864:54 - program itself is called meows.pi all
864:56 - right now let me go down to my terminal
864:57 - window and start to type python of
864:59 - meows.pi and at this point notice that
865:02 - the length of sys.org V Should indeed be
865:04 - one why well python the name doesn't end
865:07 - up in sys.rv at all ever but meows.pi
865:10 - the name of the file does and it's going
865:13 - to go in sys.org v0 but that's only one
865:16 - element so the length of this thing is
865:17 - one there's nothing more to the right so
865:19 - when I hit enter now we should see
865:21 - indeed one meow if I don't cooperate
865:24 - suppose I do something like meows three
865:26 - enter then I'm going to they see a
865:28 - reminder that this is how you use the
865:30 - program and this is a common convention
865:32 - to literally print out the word usage a
865:34 - colon then the name of the program and
865:36 - maybe some explanation of how to use it
865:38 - so I'm keeping it very simple but let's
865:40 - be a little fancier what if I really
865:42 - wanted the user to type in maybe not
865:44 - three but something more sophisticated
865:46 - and in fact when controlling programs
865:50 - from the command line it's very common
865:52 - to provide what are often called
865:54 - switches or Flags whereby you pass in
865:56 - something like dash n which semantically
866:00 - means this number of times then often a
866:03 - space and then something like the number
866:04 - three this still allows me to do other
866:07 - things at the command line if I want but
866:09 - the fact that I've standardized on how
866:11 - I'm providing command line arguments to
866:12 - this program with Dash N3 is just a more
866:16 - reliable way now of my program knowing
866:18 - what does the three mean it's a little
866:20 - less obvious if I just do meows.pi Space
866:23 - 3 well what does the three mean at least
866:25 - with syntax like Dash N3 especially if
866:28 - you've read the documentation for this
866:29 - program ultimately oh Dash N means
866:32 - number of times got it it's a way of
866:34 - passing in two additional arguments but
866:36 - that have some relationship between them
866:37 - so how do I modify my program to
866:40 - understand Dash N3 well if I'm using CIS
866:44 - like this I could do this L if the
866:47 - length of cis.org V equals this time 3
866:51 - because notice there's one two three
866:55 - things at my prompt so sys.org V 0 1 and
866:59 - 2 three things total separated by spaces
867:01 - if it equals three and let's be safe and
867:05 - sis.org V bracket one equals equals dash
867:10 - n then let's go ahead and do this let's
867:13 - go ahead and convert uh sis dot org V of
867:18 - 2
867:19 - to an integer and assign it to a
867:22 - variable for instance called n and then
867:25 - let's go ahead and do this for
867:27 - underscore in the range of n let's go
867:30 - ahead and print out some of these meows
867:32 - now there's still an opportunity maybe
867:33 - to consolidate my print lines with meow
867:35 - but for now I'm going to keep these
867:36 - ideas separate so I'm going to handle
867:38 - the default case with no arguments up
867:41 - here as before and now more
867:42 - interestingly I'm going to do this to be
867:45 - clear I'm going to check if the user
867:46 - gave me three command line arguments the
867:48 - name of the program dash n and a number
867:51 - if indeed the second thing they gave me
867:54 - in sys.org V of 1 equals equals dash n
867:58 - then I'm going to assume that the next
868:01 - thing sys.org V of 2 is going to be an
868:04 - integer and I'll convert it to such and
868:06 - store it in this variable n and now just
868:09 - using a loop I'm going to print out meow
868:11 - that many times alright so it's kind of
868:13 - a combination of our earlier focus on
868:15 - Loops our earlier focus on command line
868:17 - arguments just creating a program that
868:19 - allow me to claim is representative of
868:21 - how a lot of command line programs work
868:23 - even though we've typically not used
868:25 - many like this but it's very common to
868:27 - configure a program one you're about to
868:29 - run into the command line with something
868:31 - like these command line arguments like
868:33 - dash n or Dash something else now I'm
868:35 - going to go ahead and hit enter
868:37 - and I think I should see indeed three
868:40 - meows by contrast if I do two at the end
868:44 - I should see two meows if I do one I
868:47 - should see one meow and frankly if I
868:50 - just omit this all together I should see
868:52 - one meow as well because that was my
868:54 - default case earlier
868:56 - and now let me allow us to uh assume
869:00 - that this program eventually gets more
869:02 - complicated right let's imagine a world
869:03 - where I don't want to support just dash
869:06 - n maybe I want to support Dash a and
869:08 - dash B and dash C and Dash D and a whole
869:11 - lot of others or heck at that point I
869:13 - should maybe give them words so maybe
869:14 - it's a dash dash number it's indeed a
869:17 - convention uh in Computing typically to
869:19 - use single dashes with a single letter
869:22 - like n but use double dashes if you're
869:25 - actually using a whole word like number
869:26 - so the command line argument might be
869:28 - dash n or maybe it's dash dash number
869:31 - but you can imagine just how complicated
869:33 - the code gets if now you want to support
869:35 - Dash N Dash a dash b c and so forth
869:38 - you're gonna have to be checking all
869:40 - over the place and what if they come in
869:41 - a different order you're going to have
869:42 - to check is dash n first or is it second
869:45 - or is it third or is its fourth I mean
869:47 - this just becomes very painful very
869:49 - quickly just to do something relatively
869:51 - simple like allow the user to pass
869:53 - command line arguments into your program
869:55 - well this this is why as always there
869:58 - exists libraries and another library
870:00 - that comes with python that's probably
870:02 - worth knowing something about is this
870:04 - one here called ARG parse in fact with a
870:07 - lot of the tools I myself or cs50s team
870:09 - writes in Python we very frequently use
870:12 - ARG parse whenever they are more
870:14 - complicated than a lot of our class
870:15 - demos and a little more similar to this
870:18 - one where we want to allow the user to
870:20 - pass in configuration options at the
870:22 - command line and by supporting things
870:24 - like dash n or Dash a or Dash b or Dash
870:27 - C ARG parse is a library that per its
870:29 - documentation just handles all of this
870:32 - parsing so to speak this analysis of
870:34 - command line Arguments for you
870:36 - automatically so you can focus on
870:38 - writing the interesting parts of your
870:39 - program not the command line arguments
870:42 - part so how might we use this well let
870:44 - me go back to vs code here let me clear
870:46 - my terminal window and let me propose
870:48 - that I rewrite this using not CIS but
870:51 - actually using ARG parse and I'm going
870:52 - to start a little simple and then build
870:54 - back up so let me throw all of this away
870:55 - for now now and instead import ARG parse
870:59 - ARG parse stands for argument parser to
871:02 - parse something means to read it kind of
871:04 - pick it apart to analyze it so this is
871:06 - indeed going to do just that for me now
871:08 - let me go ahead and do this and for this
871:10 - Library it's helpful to know a little
871:12 - object oriented programming like we all
871:13 - now do I'm going to create a variable
871:15 - called parser that could call it
871:17 - anything I want I'm going to set it
871:18 - equal to the return value of ARG parse
871:21 - dot
871:22 - argument parser with a capital A and a
871:25 - capital P A Constructor for a class
871:28 - called argument parser that comes with
871:30 - python itself within this Library here
871:33 - now I'm going to configure this argument
871:36 - parser to know about the specific
871:38 - command line arguments that I myself
871:40 - want to support in my program so I'm
871:42 - going to do this
871:43 - parser.add underscore argument so that's
871:46 - apparently a method in the parser object
871:48 - I'm going to add an argument of dash n
871:51 - Easy enough now I'm going to go ahead
871:53 - and actually parse the command line
871:55 - arguments I'm going to do args or I
871:57 - could call the variable anything I want
871:58 - parser dot parse args and by default
872:02 - parse arcs is going to automatically
872:05 - look at sys.org V for me I don't need to
872:08 - import sys myself I can leave the
872:10 - argument parser its code to import sys
872:13 - look at sys.orgv and figure out where
872:15 - dash n or anything else actually is and
872:18 - what's nice now because this line of
872:20 - code here results in the parser having
872:23 - parsed all of the command line arguments
872:26 - I now have this object in this variable
872:28 - called args inside of which are all of
872:31 - the values of those command line
872:32 - arguments no matter what order they
872:35 - appeared in not such a big deal when
872:36 - I've only got one because it's only
872:38 - going to go in one place at the end but
872:40 - if I've got dash n a dash b c you could
872:42 - imagine them being in all different
872:44 - orders they definitely don't have to be
872:45 - alphabetical the user should be able to
872:47 - type them in any order they want that's
872:49 - better for usability ARG parser is going
872:51 - to figure all of that out for me and all
872:54 - I have to do now is this if I want to
872:55 - iterate over that many numbers of
872:59 - arguments and that many mouths rather I
873:01 - can do this for underscore in the range
873:04 - of the int conversion of args.n so dot
873:09 - is the syntax we kept using to access
873:10 - things like properties inside of an
873:13 - object and that's what args is it's the
873:15 - object returned by the parse arcs
873:17 - function for me I'm going to go ahead
873:19 - now and print out quote unquote meow
873:21 - this many times so it's not super simple
873:24 - like these are three new lines of code I
873:27 - need to write and rather understand but
873:29 - it's already a little simpler and more
873:31 - compact than my if and my L if and my
873:33 - ORS and my ands and all of that Boolean
873:36 - logic it's handling a lot of this for me
873:38 - so if I didn't make any mistakes let me
873:40 - run python now of meows.pi enter and I
873:43 - did make a mistake here I did make a
873:46 - mistake what's what's wrong here now
873:49 - what's wrong well I definitely didn't
873:51 - run it the way I intend so dash n three
873:54 - enter so it does work but if I don't
873:57 - cooperate this actually seems to be a
874:00 - worst version if I don't pass in dash n
874:02 - in a number it just errors with a type
874:04 - error it must be a string none is what
874:06 - came back so there's clearly an error
874:08 - here but the library is more flexible I
874:11 - can actually provide some documentation
874:13 - on how to use this thing so how do I
874:15 - know how to use this well typically it's
874:18 - conventional in Python and in a lot of
874:20 - programming environments to run a
874:22 - program with a special argument Dash H
874:25 - or dash dash help and almost always I
874:29 - will claim you'll then see some kind of
874:30 - usage information indeed that's what I'm
874:32 - looking at now I just ran python of
874:35 - meows.pi space Dash H I'll do it again
874:37 - let me clear my screen and this time do
874:39 - dash dash help in English enter and I
874:42 - see the same thing it's not very useful
874:44 - at the moment it just shows me what the
874:47 - usage is up here and this is kind of
874:49 - interesting this is a standard syntax
874:51 - and Community Computing and we've kind
874:52 - of seen it in Python's documentation
874:54 - before this just means that the
874:56 - program's name is of course meows.pi
874:58 - square brackets as almost always in
875:01 - documentation means it's optional so I
875:04 - don't have to type Dash H but I can I
875:07 - don't have to type dash n and another
875:09 - value but I can and then down here is
875:12 - some explanation of these options and
875:14 - more reversely showing me that I can
875:16 - also do dash dash help and not just Dash
875:18 - H but this is so generic this has
875:20 - nothing to do with my program this is
875:21 - not going to help my users when I
875:23 - actually release this software for the
875:24 - world so let me go ahead and improve it
875:26 - let me add a description to my argument
875:28 - parser that the humans will see meow
875:31 - like a cat quote unquote is going to be
875:34 - the value of this named parameter called
875:35 - description and let me also add a help
875:38 - parameter to my dash n argument that
875:41 - just explains what Dash N means number
875:43 - of times to meow quote unquote I'm not
875:47 - going to change anything else but I am
875:48 - going to go back to my terminal window
875:50 - and run python of meow I'm going to run
875:53 - python of meows.pi Dash H or
875:55 - equivalently dash dash help and now
875:58 - notice that this is a little more user
876:01 - friendly if I scroll up we still see the
876:03 - same usage but there's a quick sentence
876:05 - in English of explanation that this
876:06 - program meows like a cat and if I look
876:08 - at the options now oh that's what N
876:12 - means it's the number of times to meow
876:14 - and this Capital end a metal variable if
876:17 - you will is just indicating to me that I
876:19 - need to type a number by convention
876:21 - after the lowercase dash n
876:24 - so it would be nice though all that said
876:27 - if my program still didn't just break
876:29 - when I run it without any command line
876:31 - arguments right ideally my program would
876:33 - handle this just like my manual version
876:35 - did when I used sys.orgv myself so we
876:39 - just need to add a little more
876:40 - functionality to this library and if I
876:43 - read the documentation I'll see that add
876:45 - argument takes yet another named
876:47 - argument if you want you can specify a
876:50 - default value for dash n for instance
876:52 - one and I'll do that there and you can
876:55 - further specify that it's got to be an
876:57 - INT and what this will additionally
876:59 - allow me to do is if I tell Arc parser
877:01 - to make sure that the value of dash n is
877:04 - an INT I don't need to do the conversion
877:06 - manually I can just trust down on line
877:08 - seven that when I access the property
877:10 - called n inside of my args object it's
877:14 - going to be automatically an INT for me
877:16 - and again this is the value of a library
877:18 - it let it do all of the work for you so
877:20 - you can get back to focusing on the
877:22 - interesting project at hand whatever
877:24 - problem it is you're trying to solve
877:26 - like in this case granted not that
877:27 - interesting but meowing like a cat let
877:30 - me go ahead now and run python of
877:32 - meows.pi and hit enter this time
877:34 - no arguments and now it meows why
877:37 - because I specified that if I don't as a
877:41 - user specify dash n it's going to have a
877:43 - default value of 1 apparently and I
877:45 - don't have to convert that value from a
877:47 - stir to an end because I told our parser
877:50 - please just make this an INT for me
877:53 - any questions now on artparse or really
877:57 - this principle of just Outsourcing the
878:00 - commodity stuff the stuff that
878:02 - everyone's program eventually needs to
878:04 - do so that you can focus on the juicy
878:06 - part yourself what does that and contain
878:09 - what does args.n contain it contains the
878:12 - integer that the human typed after a
878:15 - space after dash n
878:19 - a good question other questions
878:22 - yeah did uh uh the the when you specify
878:25 - the type
878:26 - um for the argument
878:28 - uh what happens if does that basically
878:30 - handle the exception if if the user
878:32 - inputs a string in this case a really
878:34 - good question suppose that the human
878:36 - does not type a number and therefore not
878:38 - an in well let's see what happens so
878:39 - python of meows.pi dash n dog it's where
878:44 - dog is obviously not a number enter and
878:46 - voila we see an automatically generated
878:49 - error message little cryptic admittedly
878:51 - but I'm seeing a reminder of what the
878:53 - usage is and a minor explanation of what
878:56 - is invalid about this and again this is
878:58 - what allows you this is what allows me
879:00 - to like focus on writing the actual code
879:02 - we care about and just letting the
879:03 - library automate some of this stuff for
879:05 - us all right well allow me to propose
879:08 - now that we take a look at one other
879:09 - feature of python that we've seen before
879:11 - but it turns out we can use it even more
879:14 - powerfully as our programs become more
879:16 - sophisticated and the problems we're
879:18 - trying to solve themselves become more
879:20 - involved let me go ahead and re turn to
879:23 - vs code closing out meows.pi and
879:26 - creating a new file for instance called
879:27 - unpack dot Pi so code of unpack dot pi
879:31 - and let me just remind us like what we
879:32 - mean by unpacking because this is
879:34 - actually a feature of python that we've
879:35 - seen before for instance suppose that I
879:37 - write a program that prompts the user
879:39 - for their name like David space Malin
879:41 - wouldn't it be nice if we could record a
879:43 - sort of split the user's name into two
879:46 - separate variables and when we've done
879:47 - this in the past we've done it in a few
879:49 - different ways but one of them involved
879:50 - unpacking a single value uh that comes
879:54 - back from that like a list or some other
879:56 - data structure and putting it
879:58 - immediately into two variables so let's
879:59 - do this here let me go ahead and call
880:02 - the input function asking someone what's
880:05 - your name question mark then let me go
880:08 - ahead and just split a little naively on
880:11 - a single space so I'm assuming that the
880:12 - only users at the moment are people like
880:14 - me David space Malin no middle names no
880:17 - multiple names it's just one and two
880:19 - which itself could be buggy for other
880:21 - users but for now I'm keeping it simple
880:22 - just to remind us that I can now unpack
880:25 - that return value with something like
880:27 - first underscore last equals the return
880:30 - value of input and now I can go ahead
880:32 - and do something like this like printing
880:33 - out with an F string hello comma and
880:36 - then curly braces first if I just want
880:38 - to greet myself or any other user is
880:40 - hello David without the last name and
880:43 - frankly if I'm not using the last name
880:44 - recall that a python convention is just
880:46 - to name it underscore to make clear that
880:48 - you know you're not using that value but
880:50 - it does need to be there because you're
880:52 - unpacking two values at once so if I run
880:55 - this it won't be all that unfamiliar I'm
880:57 - just going to run now python of
880:58 - unpack.pi I'll type in David Malin which
881:00 - has a single space and there we have it
881:02 - hello comma David well it turns out that
881:06 - there's other ways to unpack values and
881:09 - there's other features that python
881:10 - offers especially when it comes to
881:12 - defining and using functions and this is
881:15 - slightly more intermediate functionality
881:17 - if you will that's useful because you
881:19 - can start to write even more elegant and
881:21 - Powerful code once you get comfortable
881:22 - with syntax like this so let me go ahead
881:25 - and propose that we not just play with
881:27 - Hello uh uh hello names anymore but
881:30 - instead do something maybe involving
881:32 - some coinage again so maybe not dollars
881:35 - and cents but maybe again as in the past
881:37 - some galleons and sickles and Canucks
881:39 - with among which there's a mathematical
881:40 - relationship as to how many of those in
881:42 - the Wizarding World equal each other and
881:45 - let me go ahead and do this let me
881:46 - Define a simple function called total
881:48 - that just tells me the total value of
881:51 - someone's vault in Gringotts The
881:52 - Wizarding Bank based on how many
881:54 - galleons sickles and Canucks that they
881:56 - have which again are currencies from The
881:58 - Wizarding World as opposed to our actual
882:00 - human world so this total function might
882:02 - take a variable like galleons and
882:04 - sickles and Canucks like this and then
882:07 - it's going to return the formula which I
882:08 - admittedly had to look up myself and it
882:10 - turns out that the formula for
882:12 - converting galleons and sickles to
882:15 - canuts would be this galleons times 17
882:18 - plus sickles then times all of that by
882:22 - 29 and then add in the individual
882:24 - Canucks not sure in what detail this
882:27 - came up in the books or movies but here
882:29 - we have it the official formula all
882:31 - right now let's go ahead and do this let
882:33 - me go ahead and call the total function
882:35 - with just some sample inputs suppose
882:37 - that someone like Harry has a hundred
882:39 - galleons 50 sickles and 25 canuts let me
882:43 - go ahead and print that out on the
882:44 - screen all right well if total returns
882:46 - an integer which I think this arithmetic
882:48 - expression will do let me go ahead and
882:50 - store rather pass the return value of
882:53 - total to print and then just for clarity
882:56 - let me write Canucks at the end so I
882:58 - know that the unit of measure here is
882:59 - indeed canutz in total all right now let
883:02 - me go ahead in my terminal window and
883:04 - run python of unpack.pi and hit enter
883:06 - and it turns out mathematically that if
883:09 - I got my math correct a hundred galleons
883:12 - plus 50 sickles plus uh 25 cannuts
883:16 - equals in total 50
883:18 - 775 Canucks just avoiding having to use
883:21 - our own human currency here but I'm not
883:23 - doing anything along the lines of
883:25 - unpacking at least just yet let me
883:28 - propose now that I do this just for the
883:30 - sake of discussion let me propose that I
883:32 - leave the total function as is but let
883:35 - me go ahead and just store all of my
883:37 - coins in a list so coins in order from
883:39 - left to right
883:40 - 150 25 it just because for whatever
883:44 - purposes in this story I have all of my
883:46 - coinage in a list in this order kind of
883:49 - a purse or wallet of sorts well how can
883:52 - I pass this in well I'm not going to
883:54 - hard code the same values twice just for
883:56 - the sake of discussion how could I pass
883:58 - in the individual elements of a list to
884:01 - my total function well of course I could
884:03 - treat this list as I always do using
884:06 - numeric indices by doing coins bracket
884:08 - zero coins bracket one coins bracket two
884:11 - so this is old school stuff with lists
884:13 - if I've got a list called coins and
884:15 - there's three elements the indices or
884:17 - indexes of those elements are 0 1 and 2
884:20 - respectively from left to right so all
884:22 - I'm doing here now is passing in the
884:25 - first element from that list as galleons
884:28 - the second element of that list as
884:30 - sickles and the third element of this
884:32 - list as Mike nuts and that lines up with
884:36 - of course the signature of this function
884:37 - which as total expects that I've passed
884:40 - in those three things in that order left
884:42 - to right all right let me go ahead and
884:44 - run just make sure I haven't broken
884:45 - anything unpack.pi and hit enter and the
884:48 - math still checks out
884:50 - but this is getting a little verbose a
884:53 - little verbose and wouldn't it be nice
884:55 - if I could just pass the list of coins
884:57 - to this total function wouldn't it be
885:00 - nice if I could just say something like
885:01 - this coins
885:04 - but let me pause and ask the group why
885:06 - would this not actually work as is
885:12 - it technically is passing in all three
885:14 - but why would I get some kind of error
885:17 - when I run this Eric uh because you are
885:19 - passing a list to galleons yeah I'm
885:23 - passing a list to galleons and nothing
885:25 - for sickles and Canucks and notice those
885:27 - don't have default values there's no
885:29 - equal signs on that first line of code
885:31 - which means Python's not going to know
885:33 - what value should be assumed there so it
885:35 - just seems like it's not going to work
885:37 - plus it's the wrong type as Eric notes
885:39 - it's a list and it's not an integer as
885:42 - it was before so let's actually run this
885:44 - incorrect version python of unpacked.pi
885:47 - enter type error and that is probably
885:49 - what you might expect like I'm messing
885:51 - up with the types here and I re I'm
885:53 - required to pass in two positional
885:55 - arguments sickles and Canucks that were
885:57 - not even passed so I've definitely aired
885:59 - here but it certainly seems unfortunate
886:01 - if the only solution to this is to do
886:03 - what I previously did which is index
886:05 - into the first element index into the
886:07 - second element index into the third like
886:08 - you can imagine with bigger fancier
886:10 - functions that take even more argument
886:12 - it's this is going to get very verbose
886:14 - and honestly very vulnerable potentially
886:16 - to just mistakes typos on my part but
886:19 - here too is where you can do what's
886:21 - known again as unpacking a value in
886:24 - Python right now a list is kind of
886:27 - packed with multiple values my current
886:29 - list has these three values 150 and 25
886:32 - respectively but they're all packed up
886:34 - in this one list wouldn't it be nice if
886:36 - I could unpack that list just like I
886:39 - previously unpacked the return value of
886:42 - the stir classes split function into
886:44 - multiple things too and indeed I can do
886:47 - just that python actually allows me to
886:50 - pass in not coins but
886:52 - Star Coins so if you use a single
886:55 - asterisk at the beginning of your
886:57 - variable that will unpack it and it will
887:00 - take one sequence in this case coins of
887:03 - size 3 and explode it if you will unpack
887:06 - it into three individual arguments no
887:09 - commas are needed python just handles
887:11 - this for you but the effect of passing
887:14 - in Star Coins is to pass in the
887:17 - individual members of that list which in
887:20 - this case are going to be 150 and 25
887:22 - respectively which is perfect because
887:24 - now it's going to line up with galleons
887:26 - sickles Canucks respectively so now when
887:28 - I run python of unpack.pi we're back in
887:33 - business and the math checks out but
887:35 - I've kind of cleaned up my code by just
887:36 - introducing this new symbol which we've
887:38 - used of course in other contexts for
887:40 - multiplication and the like but now it's
887:42 - also used for unpacking in this way
887:45 - questions on what we've just done it's a
887:49 - single operator but it's already quite
887:52 - powerful because it allows us to take a
887:54 - data structure and unpack it and pass it
887:56 - in individually
887:58 - does that work for um uh
888:01 - tuples sets dicks dictionaries
888:05 - as well tuples yes
888:09 - sets I don't know wrong Shin I don't
888:13 - know if order is preserved
888:15 - no oh is that no it does not or you know
888:18 - you're checking
888:20 - order's not preserved so it wouldn't
888:22 - work with set
888:24 - does not work with set does not work
888:26 - with set
888:27 - sorry I'm verbally Googling here just to
888:29 - save us some keystrokes so it would work
888:31 - for
888:32 - enumerations that where order is indeed
888:34 - preserved and we'll see another example
888:36 - in a moment where it actually can be
888:37 - used in a different way for dictionaries
888:39 - which nowadays do preserve order
888:41 - other questions on unpacking in this way
888:44 - yes hi hello how can you use unpacking
888:48 - to get the value uh for example 10 plus
888:50 - 50 plus 25 uh instead of a for Loop and
888:55 - then result plus short answer no if you
888:58 - want the individual values you should be
889:00 - just indexing in this case into those
889:02 - specific locations
889:04 - um this is returning multiple values the
889:07 - equivalent of a comma separated list so
889:10 - you would use the earlier approach if
889:11 - you cared about the individual locations
889:13 - how about one other question on
889:15 - unpacking what if we have declared we we
889:19 - declare some default values and if you
889:22 - use these asterisk points will it work
889:25 - right or will it
889:27 - skip it good question if I heard you
889:30 - right what if for instance the list has
889:32 - four values like this here and you're
889:34 - still unpacking it when it's only three
889:36 - that's expected well let's try it python
889:39 - of unpack dot Pi enter another type
889:42 - error this time it takes three
889:44 - positional arguments before we're given
889:46 - so the onus is on us as the programmer
889:48 - not to do that in this case so
889:50 - potentially fragile but avoidable if I'm
889:53 - controlling the contents of this list in
889:55 - fact let me propose now that we take a
889:57 - look at another variant of this whereby
889:59 - we use not just positional uh arguments
890:02 - whereby we trust that the first is
890:04 - galleons the second is sickles the third
890:06 - is knuts suppose that we actually passed
890:08 - in the names as we're allowed to do in
890:09 - Python and then technically we could
890:11 - pass them in in any order and python
890:13 - would figure it out using named
890:14 - parameters instead well how might I do
890:16 - this well it's going to be a bit of a
890:18 - regression at first so let me get rid of
890:19 - this list here
890:21 - let me change this now to just manually
890:23 - pass in the values I care about galleons
890:26 - I want to still equal 100 sickles I want
890:29 - to equal 50 and Canucks I want to equal
890:32 - 25. so this is old school parameter
890:35 - pressing it's no longer positional I'm
890:37 - explicitly specifying the names of these
890:39 - arguments but that's just going to work
890:42 - because that's exactly what the names of
890:44 - these parameters are in my total
890:46 - function as before let's make sure I
890:48 - nonetheless did not break anything let's
890:49 - run python of uh of unpack.pi enter and
890:54 - there we have it still 50 775 Canucks
890:57 - well once you start giving things names
891:01 - and values names and values that
891:05 - probably should bring to mind one of our
891:07 - most versatile data structures in Python
891:11 - and even other languages that of a
891:13 - dictionary remember that a dictionary is
891:14 - just a collection of key value pairs
891:17 - names and their respective values so
891:19 - this kind of opens up an opportunity
891:21 - what if if I did this what if I actually
891:23 - had for some reason in my program on a
891:26 - variable as before called coins but
891:28 - instead of making it a list of three
891:30 - values like before what if it's a proper
891:32 - dictionary so what if it's galleons
891:34 - quote unquote colon 100 for 100 of those
891:37 - sickles quote unquote and 50 of those
891:40 - and knuts quote unquote 25 of those each
891:43 - of those separated by uh colons and let
891:47 - me fix my square brackets to this time
891:49 - be curly braces which recall is the
891:52 - symbol we use for dictionaries or dict
891:54 - objects in Python so now I have a
891:57 - dictionary called coins not a list it's
891:59 - a collection of keys and values three
892:02 - keys galleons sickles canuts and three
892:04 - values 150 25 respectively if I were to
892:09 - now pass these individual values into my
892:12 - total function I could do it as always
892:15 - with my dictionary so I'm doing it old
892:17 - school now coins is the name of my
892:19 - dictionary I index into it not with
892:21 - numbers like with lists but with words
892:23 - so galleons strings like this coins
892:27 - quote unquote sickles in square brackets
892:29 - there and then lastly coins square
892:31 - brackets quote unquote Canucks so it's
892:33 - getting it's verbose again like this is
892:35 - not maybe the best road to go down but
892:37 - we'll backpedal in a moment this is just
892:39 - how if you happen to have all of your
892:42 - coins stored in a dictionary you could
892:44 - pass the Galleon sickles and canuts into
892:46 - your function respectively let's make
892:49 - sure I didn't break anything let's rerun
892:50 - python of unpack.pi and we're still good
892:53 - now how could we get to a situation like
892:56 - this well as always imagine this
892:57 - program's a little longer than this one
893:00 - here and somehow you're using a
893:02 - dictionary maybe just to keep track of
893:04 - someone's purse or wallet like how many
893:06 - coins of each type that they have and as
893:08 - such it's perfectly reasonable to use a
893:10 - dictionary but then you want to print
893:12 - out the total and darn it if that total
893:14 - function does not expect a dictionary so
893:17 - you cannot just do something nice and
893:19 - simple like pass in coin for reasons we
893:22 - saw earlier that would be a type error
893:23 - total expects three arguments three
893:25 - integers you can't just pass in a
893:28 - dictionary but if that's the data
893:29 - structure you're using to store the
893:31 - person's purse or wallet well it's kind
893:34 - of unfortunate that we have this clash
893:36 - between these data types well here's
893:39 - what we can do we can't pass in coins
893:41 - because watch if I try doing that and
893:43 - run python of unpack.pi we're getting
893:45 - another type error missing two required
893:48 - positional arguments sickles and Canucks
893:50 - I have to pass in three things but
893:53 - wonderfully python allows you to unpack
893:56 - dictionaries as well for a dictionary
893:59 - you don't use a single asterisk you use
894:01 - two and what this syntax has the effect
894:05 - of doing is passing in three values with
894:09 - names it has the effect of passing in
894:11 - galleons equals 100 comma sickles equals
894:16 - 50 comma Canucks equals 25 and so it has
894:20 - the similar effect to the list unpacking
894:23 - but that just passed in the values 150
894:26 - 25 separated by commas in effect when
894:29 - unpacking a dictionary it passes in the
894:31 - keys and the values separated
894:34 - conceptually with equal signs just like
894:37 - our function expects so if I now run
894:40 - python of unpack.pi again we're still
894:42 - good but we've tightened our code up
894:44 - again and now I'm giving myself yet
894:46 - another option I can either store a
894:48 - Wizard's Purser or uh wallets in there
894:52 - in a list as we did earlier or I can
894:55 - store it a little more versus with even
894:57 - more specificity using a dictionary
894:59 - instead and so to be clear let me rewind
895:02 - star star coins is the same thing if I
895:05 - rewind a little bit to our first example
895:08 - of named arguments is equivalent to what
895:11 - I've highlighted here when you unpack a
895:13 - dictionary it passes in all of the keys
895:16 - and all of the values much like the
895:19 - syntax here but let me tighten it up and
895:22 - go to where we left off questions now on
895:25 - unpacking can we have a in this
895:27 - dictionary can we have instead of having
895:29 - a constant name value pair can we have a
895:33 - variable number of you know name value
895:36 - pairs short answer yes you can have more
895:39 - than three key value pairs as I have
895:41 - here but it's not going to work
895:43 - unpacking it if the total function is
895:45 - expecting only three so if I were to add
895:48 - something here like let me introduce
895:50 - pennies to The Wizarding World and
895:52 - suppose I have one penny for instance
895:54 - and now I run this same code python of
895:58 - uh unpack.pi we're back to a type error
896:01 - again whereby I got an unexpected
896:03 - keyword argument pennies because that is
896:05 - not expected by the total function we
896:08 - will see in just a moment wonderfully a
896:10 - solution though to that but for now it
896:12 - does not work
896:13 - other questions on unpacking with
896:15 - dictionaries or lists in list English
896:18 - values we get the same number of
896:20 - arguments and we declared a default
896:22 - value in the function now if you use
896:25 - this as trick will it overwrite that
896:27 - value or will it skip it skip the
896:30 - default value a good question if you if
896:32 - we did have default values up here for
896:35 - instance equals zero equals zero equals
896:38 - zero the upside of that recall from our
896:41 - discussion of arguments to functions a
896:43 - while back is that now you don't have to
896:45 - pass in all of those values they will
896:47 - default to those zeros therefore you
896:50 - could pass in fewer than three values
896:52 - either using a list or a dictionary
896:53 - that's unpacked in this scenario I
896:56 - deliberately did not do that because I
896:57 - wanted us to encounter this specific
896:59 - error in this case but you could
897:01 - absolutely go back and add those
897:03 - defaults
897:05 - so it turns out that this single
897:07 - asterisk or this double asterisk is not
897:09 - only used in the context of unpacking
897:11 - that same syntax is actually used as a
897:13 - visual indicator in Python when a
897:15 - function itself might very well take a
897:18 - variable number of arguments that is to
897:21 - say a function can be very attic which
897:23 - means that it doesn't necessarily have
897:25 - to take say three arguments specifically
897:27 - even if they do or don't have default
897:29 - values it can take maybe zero or one or
897:32 - two or three and it turns out the Syntax
897:35 - for implementing the same idea is quite
897:37 - similar in spirit in fact let me go back
897:39 - to vs code here and let me propose that
897:41 - we start over with this code and get rid
897:43 - of our notion of galleons and sickles
897:45 - and Canucks and do something just a
897:46 - little more generic just so that we've
897:48 - seen the Syntax for this suppose that I
897:51 - Define a function as follows Define a
897:53 - function let's call it f and that
897:56 - function is not going to take a specific
897:58 - number of arguments but a variable one
898:00 - and so I'm going to go ahead and use
898:01 - this syntax here star args which
898:04 - indicates that that this function is
898:06 - indeed very attic it takes some variable
898:08 - number of positional arguments
898:10 - positional in the sense that they go
898:12 - typically from left to right but I don't
898:14 - know how many just yet I want to support
898:16 - suppose that I additionally want to
898:18 - support some number of keyword arguments
898:20 - that is named parameters that can be
898:23 - called optionally and individually by
898:25 - their own name well the convention
898:27 - syntactically here would be to use two
898:28 - stars and then kwrs I could call args or
898:32 - KW args anything else that I want but a
898:34 - convention you'll frequently see in
898:36 - Python's own documentation is that when
898:38 - you have placeholders like this for some
898:40 - number of arguments and some number of
898:42 - keyword arguments the world tends to use
898:44 - args and Key kwrgs Well inside of this
898:48 - function let's do something super simple
898:49 - just for now let me go ahead and print
898:51 - out literally quote unquote positional
898:54 - just to indicate to myself while
898:56 - wrapping my mind around what's going on
898:58 - here what the positional arguments are
899:00 - and let me quite simply print out those
899:02 - args this is not something you would
899:04 - typically do you you don't typically
899:05 - just take in these arguments and print
899:07 - them no matter how many there are I'm
899:08 - just doing this diagnostically for now
899:10 - to show you how this syntax works now
899:13 - let me go ahead at the bottom of my file
899:15 - and I won't bother with a main function
899:16 - this time so we can focus only on this
899:18 - function f let me go ahead and just call
899:20 - F with three arguments I'll use the same
899:22 - arguments as before but I didn't bother
899:24 - giving them names just yet like galleons
899:26 - and sickles and Canucks and the like so
899:29 - what do I have
899:30 - a program that no matter what calls this
899:32 - function f but it first defines F at the
899:35 - top of the file is taking some number of
899:37 - positional arguments some number of
899:39 - named arguments and for the moment I'm
899:41 - just printing out the positional ones
899:43 - let me go ahead and in my terminal
899:45 - window run python of unpack.pi and hit
899:47 - enter and you'll see that the positional
899:50 - arguments passed in are apparently this
899:53 - a sequence
899:54 - 150 25 but notice this if I clear my
899:58 - terminal window there and pass in
900:00 - something else like five a fourth
900:01 - argument previously if I try to change
900:05 - the number of arguments I'm passing in
900:07 - to my total function which was only
900:09 - defined as taking three I would have
900:11 - gotten a type error some visual
900:13 - indication that no you can't pass in
900:15 - more or fewer arguments than is actually
900:17 - in the function's definition but now
900:20 - watch if I run python of unpack.pi this
900:22 - time passing in 150 25 and 5 a fourth
900:26 - argument all four of those went through
900:29 - just fine I can get rid of all of those
900:31 - but one for instance now rerun my
900:34 - program after clearing my screen and now
900:36 - I'll see just one argument here and even
900:38 - though there's a comma and nothing after
900:40 - it this is actually the syntax when
900:42 - seeing a tuple in effect whereby The
900:45 - Comma just indicates this is indeed a
900:46 - list but there's only one element
900:48 - therein well let's get a little more
900:50 - curious too let me go ahead and Rewind
900:52 - here to where we started with just those
900:55 - three values and this time let me go
900:57 - ahead and print out my named argument so
900:59 - to speak which is an args but KW args
901:02 - again the positional arcs in this syntax
901:04 - come first the named arguments KW arcs
901:07 - come second that's what python
901:09 - prescribes so now let me go ahead and
901:12 - not pass in just these numbers let me go
901:14 - ahead and pass in actually named
901:16 - arguments so let me do something now
901:18 - more specifically like galleons equals
901:20 - 100 and sickles equals 50 and nuts
901:23 - equals 25. I'm not going to bother doing
901:25 - any math with total I just want to poke
901:27 - around right now at this functionality
901:29 - of having a variable number of arguments
901:31 - and what's neat now is if I run python
901:34 - of unpack.pi and hit enter no problem
901:37 - what kwrx is is automatically a
901:42 - dictionary that contains all of the
901:44 - named arguments that were passed to my
901:46 - function which is to say when designing
901:48 - your own functions if you want to
901:50 - support more than one argument maybe
901:53 - more than two or three or four maybe a
901:55 - variable number of arguments indeed you
901:57 - can support both a variable number of
902:00 - positional arguments that are just value
902:01 - comma value comma value or any number of
902:05 - named arguments where you actually put
902:06 - the name of the parameter equals the
902:08 - value and then maybe a comma and some
902:11 - more of the same
902:12 - so now it turns out we have seen this
902:16 - before in some of the functions we've
902:19 - used to date we didn't necessarily see
902:21 - it called args or necessarily see it
902:24 - called KW args but we have seen at least
902:26 - one example of this in the wild recall
902:29 - our old friend print which we've been
902:31 - using now for weeks and when we first
902:33 - looked at the documentation for print
902:35 - way back when it looked a little
902:37 - something like this the first argument
902:39 - to print was objects and I waved my hand
902:42 - at the time at the asterisk that was at
902:44 - the start of that variable name but then
902:46 - we had sep for separator the default
902:48 - value of which was a space we had n the
902:50 - default value of which was a new line
902:52 - and then some other named arguments that
902:54 - we waved our hands at then and I'll
902:55 - again do now but what you can now
902:58 - perhaps infer from our emphasis on these
903:01 - asterisks today the single stars or the
903:03 - double stars is the you know what this
903:05 - is the convention in Python's
903:07 - documentation to indicate that print
903:10 - takes a variable number of arguments so
903:14 - if we were to look at the actual
903:16 - implementation of the print function
903:17 - implemented by Python's own authors it
903:20 - might very well look something like this
903:21 - def print and then the first argument
903:24 - would be star objects thereby indicating
903:26 - that print takes a variable number of
903:28 - arguments the next one of which might be
903:30 - sep equals quote unquote either using
903:32 - double quotes or as in the documentation
903:34 - single quotes two the next one of which
903:36 - might be n the default value of which is
903:38 - a new line and then some of those other
903:40 - named arguments that we've not looked at
903:41 - as well and then maybe inside of the
903:44 - print function implemented by the
903:45 - authors of python maybe there's a for
903:47 - Loop like for object in objects that
903:50 - allows them to iterate over each of
903:52 - those variable number of objects and
903:55 - print each of them and this is why apply
903:57 - in programs past you and I have been
903:59 - able to do just print open parenthesis
904:01 - close parenthesis with nothing inside or
904:04 - you and I have been able to print out
904:05 - something like Hello World a single
904:07 - string inside of those parentheses or
904:09 - you and I have been able to do a single
904:11 - string hello and then another string
904:13 - quote unquote World thereby passing in
904:15 - two arguments or even more so we've long
904:18 - had this ability to use variatic ARC
904:21 - functions whereby you can pass in a
904:23 - variable number of arguments what you
904:25 - now have via this args and KW Arc syntax
904:29 - but again they do not need to be called
904:31 - that is the ability using that star or
904:34 - two stars to implement those kinds of
904:36 - functions yourself
904:38 - my own F function a moment ago did not
904:41 - do anything all that interesting but it
904:43 - hints at how you could if in the future
904:45 - you have a use case for taking zero or
904:47 - one or more of either type of arguments
904:50 - any questions now
904:53 - on these types of arguments
904:56 - what will happen if you print quarks and
904:58 - the argument is
905:00 - like a lift
905:02 - ah so what would happen if you print the
905:03 - argument like it's a list so I think we
905:05 - saw that if I roll back in my history
905:07 - here
905:08 - to when I had that F function which I
905:11 - called f just to be very generic just so
905:12 - we could play around with the syntax
905:14 - this is what I had here so this is a um
905:18 - I passed in 100 comma 50 comma 25 that
905:22 - gets automatically stored in args and
905:25 - when I run it you can actually see that
905:27 - sequence of values by running python of
905:29 - unpack.pi there is that sequence all in
905:32 - the form of one single variable I'm
905:34 - printing it just for Diagnostic purposes
905:36 - this is not really a useful or pretty
905:38 - program but it hints at how we can
905:40 - access that whole sequence of values
905:43 - other questions
905:45 - on this approach here can we pass KW
905:49 - args from one function to another
905:51 - function absolutely you can pass either
905:53 - of those to another function which you
905:55 - might want to do if you want to wrap
905:57 - another function provide some additional
905:59 - functionality but still pass in all of
906:02 - the supported arguments to the
906:04 - underlying function as well
906:05 - [Music]
906:08 - how about this next it turns out that a
906:11 - few other tools we can add to your tool
906:13 - kit relate to the types of programming
906:16 - models that python supports we started
906:18 - out quite some time ago focusing really
906:20 - on procedural programming in Python
906:22 - whereby we wrote code top to bottom left
906:24 - to right defining some functions or if
906:26 - you will procedures along the way
906:28 - defining variables and having side
906:30 - effects and assigning values as needed
906:32 - but we then eventually introduced or
906:34 - really revealed that python is also very
906:36 - much object oriented and a lot of those
906:39 - variables a lot of those types that
906:41 - we're using all that time were in fact
906:43 - objects objects that were came from
906:45 - certain classes and those classes were
906:48 - templates of sorts blueprints via which
906:50 - you could encapsulate both data and
906:52 - functionality therein what we also saw
906:54 - along the way some hints of a third
906:55 - Paradigm of programming that python also
906:58 - to some extended supports which is known
907:00 - as functional programming whereby
907:02 - functions are ever more powerful in that
907:05 - they tend not to have side effects no
907:07 - printing or changing of State globally
907:09 - but rather they're completely
907:11 - self-contained and might take as inputs
907:13 - and return values and that's generally a
907:16 - paradigm we saw when we started sorting
907:18 - things particularly with functions like
907:20 - our sort function or Lambda function
907:22 - when we passed in the function we wanted
907:24 - to use to sort a list way back when well
907:27 - it turns out python has other
907:29 - functionality that is reminiscent of
907:31 - functional programming and indeed is a
907:33 - powerful way to solve problems a little
907:35 - more differently still let me propose
907:37 - this let me propose that I whip up a new
907:40 - program here in vs code by closing our
907:43 - unpacked up high and this time creating
907:44 - another program called yell suppose the
907:47 - goal at hand is to implement some
907:48 - program that allows the user to pass in
907:50 - input and then it yells the response by
907:52 - forcing everything to uppercase my
907:54 - apologies to those with with headphones
907:56 - there I'll I'll modulate so let me go
907:58 - ahead and run code of yell dot pi and
908:00 - within yell.pi let's go ahead and
908:02 - Implement a program that really does
908:05 - just that let's go ahead and Define a
908:07 - main function up here and let's assume
908:09 - for the moment that this yell function
908:11 - already exists and yells something like
908:13 - this is cs50 properly capitalized not in
908:16 - all caps now let's go ahead and
908:18 - implement this yell function with def
908:20 - yell that's going to take for now a
908:22 - single uh word or phrase and let's go
908:26 - ahead and I'll call it phrase here and
908:28 - I'm going to go ahead and just print out
908:30 - the phrase Dot Upper so phrase Dot Upper
908:34 - is going to force the whole thing to
908:35 - uppercase and as usual down here if the
908:37 - name of this file equals equals quote
908:39 - unquote main then let's go ahead as
908:42 - always and call Main so let's just run
908:44 - this but for the most part it should be
908:46 - fairly straightforward when I run python
908:47 - of yell dot Pi this is cs50 is yelled on
908:52 - the screen all right that's nice but
908:53 - it's not great that yell only expects a
908:56 - single uh is expects a single phrase
909:00 - wouldn't it be nice like print if I
909:02 - could pass in one phrase or two or three
909:04 - or really multiple words more generally
909:06 - but as individual words themselves so
909:09 - let me retool this a little bit and
909:11 - change yell to take in not a phrase but
909:13 - how about something like a list of words
909:16 - so that ultimately I can call Yell like
909:18 - this uh quotes unquote this inside of a
909:22 - list quote unquote this inside of a list
909:25 - and quote unquote cs50 inside of a list
909:27 - I'm not going to bother with type hints
909:29 - or annotations for now but I'll just
909:31 - assume that Yale has been defined now as
909:33 - taking a list of words as defined here
909:35 - but now I want to force them all to
909:37 - lowercase so I don't quite want to do
909:39 - something as simple as this like for
909:41 - word in words I could for instance print
909:45 - that given word and maybe end the line
909:47 - with nothing right now but I think if I
909:50 - do this python of yell dot Pi no that's
909:53 - that's not right I haven't forced
909:54 - anything to uppercase so let's fix this
909:57 - well let's go ahead and do the following
909:59 - let me go ahead and accumulate the
910:02 - uppercase words as follows let me create
910:04 - a variable called uppercased and
910:06 - initialize it to an empty list using
910:07 - square brackets or or more verbose list
910:10 - syntax and now let me go ahead and
910:12 - iterate over each of those words in
910:14 - Words
910:15 - and for each of them let's go into our
910:18 - upper cased list a pen to it the current
910:22 - words uppercase version so this is a way
910:25 - of creating a new list called uppercased
910:28 - that is just appending appending
910:30 - appending to that list each of the
910:32 - current words in the loop but uppercased
910:34 - instead and now just let me go ahead and
910:37 - print out the uppercase list this isn't
910:40 - quite right let's see what happens here
910:41 - python of yell dot Pi okay it's not
910:46 - quite right because I don't think I want
910:48 - those quotes or those square brackets
910:50 - what am I seeing I'm actually printing a
910:52 - list but but but here's where some of
910:55 - our unpacking syntax now can be useful I
910:57 - don't have to change my approach to this
910:58 - problem I can just unpack uppercase by
911:01 - adding a single star and now let me go
911:04 - ahead and rerun python of yell dot pi
911:06 - and now it's actually just English
911:08 - there's no remnants of python syntax
911:10 - like the quotes and the commas and the
911:12 - square brackets I've now unpacked this
911:15 - is C ps50 as three separate arguments to
911:18 - print so already now this unpacking
911:20 - technique would seem to be useful well
911:22 - it's a little unfortunate that I now
911:25 - need to call Yell though with a list of
911:28 - values in this way this is just not the
911:30 - norm or at least it's not nearly as user
911:32 - friendly as something like the print
911:34 - function where I can pass in zero or one
911:36 - or two or three or any number of
911:38 - arguments why are you making me for your
911:40 - yell function pass in only a list well
911:42 - we can do better let's adopt some of the
911:44 - new conventions we've learned and let's
911:46 - go ahead and get rid of the list by
911:48 - removing the square brackets and let's
911:49 - just pass Yale three arguments now I
911:52 - don't want to do something like change
911:54 - the definition of words to take in like
911:56 - word one word two or like that's not
911:59 - going to scale and it's not going to
912:00 - handle different number of words but we
912:02 - have a technique now we can say star
912:05 - args which will allow the yell function
912:07 - to accept any number of arguments and
912:10 - just for specificity let's not call it
912:12 - generically arcs let's name it something
912:13 - a little more self-explanatory like star
912:16 - words this just means I have a variable
912:18 - number of words being passed in now I
912:21 - think I've made a marginal Improvement
912:23 - let me run this again python of yell dot
912:25 - Pi this is cs50 is in all caps but it's
912:29 - just a little better right because now I
912:31 - can treat yell just like I've long
912:33 - treated print pass in as many things as
912:36 - you want and print will deal with it now
912:38 - my yell function is just as powerful it
912:40 - would seem and better still it also
912:42 - forces everything to uppercase well it
912:45 - turns out python comes with this
912:46 - function called map whose purpose in
912:48 - life is to allow you to map that is
912:51 - apply some function to every element of
912:54 - some sequence like a list so for
912:57 - instance if we want to force to
912:58 - uppercase each of the words this is cs50
913:03 - in the list of words that's been passed
913:06 - in well we essentially want to map the
913:09 - uppercase function to each of those
913:11 - values so using map and python can I do
913:13 - just that let me go back here to vs code
913:15 - vote and let me propose now that I
913:18 - re-implement this as follows I get rid
913:20 - of all three of these lines here getting
913:23 - rid of that Loop in particular let me
913:26 - still declare a variable called
913:28 - uppercased but let me set it equal to
913:30 - the return value of this new function
913:33 - called map map takes two arguments here
913:36 - in this case the name of a function that
913:39 - I want to map onto a sequence of values
913:42 - well what function do I want to apply to
913:45 - every word that's been passed in well it
913:48 - turns out thanks to my knowledge now of
913:49 - object oriented programming I know that
913:51 - in the stir class there is a function
913:54 - called upper we've usually called it by
913:57 - using the name of a string variable Dot
914:00 - Upper open paren close paren but if you
914:02 - read the documentation for the stir
914:05 - class you'll see that the function is
914:07 - described indeed as stir Dot Upper I'm
914:09 - not using parentheses open and close at
914:12 - the end of stir Dot Upper because I
914:14 - don't want to call it now well I want to
914:16 - pass this function to the map function
914:19 - so that map can somehow add those
914:22 - parentheses so to speak and call it on
914:24 - every one of these words
914:26 - and this is what map does quite
914:29 - powerfully and is an instance indeed of
914:31 - functional programming whereby I'm
914:32 - passing to this map function another
914:35 - function not calling it I'm just passing
914:37 - it in by a reference of sorts and what
914:40 - map is going to do for me is iterate
914:42 - over each of those words call stir Dot
914:45 - Upper on each of those words and return
914:48 - to me a brand new list containing all of
914:51 - those results together in one list it
914:54 - completely obviates the need for me to
914:56 - do this more manually using that list
914:58 - I'm still going to print the whole thing
915:00 - using star uppercase so that if I get
915:02 - back a three a list of three uppercase
915:04 - words I'm gonna unpack them and print
915:07 - them all out so let's run this again
915:09 - python of yell dot Pi enter and voila
915:14 - it's still working but the code now is
915:17 - even more tight even tighter than before
915:20 - so it turns out there's another way we
915:22 - can solve this problem in a way that's
915:23 - even more pythonic or at least quite
915:26 - common and that that's using a feature
915:27 - known as a list comprehension and it's a
915:30 - big phrase if you will but it refers to
915:33 - the ability in Python for you to very
915:35 - easily construct a list on the fly
915:37 - without using a loop without calling a
915:39 - pen and a pen but to do everything in
915:41 - one dare say elegant one-liner so how
915:44 - can I go about using this notion of a of
915:47 - a list comprehension well let me go
915:50 - ahead and do this in yell.pi and vs code
915:53 - here let me go ahead and change my
915:55 - Approach as follows instead of using map
915:57 - which is perfectly fine and correct in
915:59 - this way let me just show you this other
916:01 - way as well a list comprehension is the
916:04 - opportunity to create a list like this
916:06 - using square brackets like this but
916:08 - inside of those square brackets to write
916:10 - a python expression that in effect is
916:13 - going to dynamically generate a brand
916:15 - new list for you using some logic you've
916:19 - written and the approach I might take
916:21 - here is this if I want to store in this
916:23 - list the uppercase version of every word
916:27 - in that words list I can do this word
916:31 - Dot Upper
916:33 - for word in words now this is a mouthful
916:38 - but I dare say python programmers love
916:41 - this capability of being able to Define
916:43 - on the fly a list inside of which is any
916:46 - number of values that you would
916:48 - ordinarily at least as we've done it
916:50 - construct with a loop and again calling
916:52 - append and a pen and append but that
916:54 - usually takes two three four or more
916:56 - lines this list comprehension that I've
916:59 - highlighted here is now an alternative
917:01 - way to create the exact same thing a
917:04 - list inside of which are a whole bunch
917:06 - of uppercased words which words for each
917:09 - word in the words list that was passed
917:13 - into yell is what ends up in this list
917:17 - questions on this syntax here it
917:20 - definitely takes a little bit of getting
917:21 - used to because you've got like this
917:23 - value on the left this function call
917:25 - here you've got this Loop inside of the
917:28 - square brackets but if you become
917:30 - accustomed to reading the code in this
917:32 - way from left to right this means give
917:34 - me the uppercase version of the word for
917:36 - each word in my words list
917:38 - questions here on list comprehensions uh
917:42 - can you do conditionals also like if
917:44 - else or uh combine if L if else indeed
917:50 - you can and let me come back to that
917:51 - where we'll see an opportunity to do
917:52 - things conditionally but for now I'm
917:54 - just uppercasing every word in the list
917:56 - a good question other questions yeah
917:59 - um is this is this functional
918:01 - programming or I mean this particular
918:04 - thing
918:05 - you're using words Dot Upper for word in
918:08 - words not necessarily this is more of a
918:10 - feature of python I would say yeah map
918:13 - was uh one uh very specific incarnation
918:16 - of there of our use of Lambda and
918:17 - passing it in as a key attribute to the
918:20 - sort function sorted function a while
918:21 - back was an example and we're about to
918:23 - see uh one other so we can even use
918:26 - these list comprehensions to filter
918:28 - values in or out of our resulting list
918:30 - so in fact in vs code here let me close
918:32 - l.pi and close my terminal window and
918:35 - let me create a new program here whose
918:36 - purpose in life maybe is to take a a
918:38 - same list of students as before with a
918:41 - shorter version thereof and just filter
918:44 - out all of the students in Gryffindor so
918:46 - let me go ahead and create a file called
918:48 - gryffindors.pi I'm going to go ahead and
918:50 - copy paste from before really my list of
918:53 - students at least Hermione Harry Ron and
918:56 - Draco from the start here just so that I
918:58 - can focus on uh one student who happens
919:01 - not to be from Slytherin and what I'm
919:03 - going to do here now if I want to filter
919:05 - out only the Gryffindor students let me
919:07 - go ahead and do this let me create
919:09 - another variable called gryffindors
919:11 - which is going to equal the following
919:13 - lists and this is going to be a bit of a
919:16 - longer line so I'm going to proactively
919:17 - move my square brackets onto two
919:19 - separate lines and I'm going to create
919:21 - now a list comprehension I want to do
919:24 - this I want this new list called
919:25 - gryffindors to contain every student's
919:28 - name for each student in the students
919:32 - list but but but if the student's house
919:37 - equals equals quote unquote Gryffindor
919:40 - so this is nearly identical in spirit to
919:43 - what I just did earlier to create a list
919:46 - comprehension out of each of the words
919:47 - passed to my yell function but here I'm
919:50 - doing so conditionally and so I'm
919:52 - borrowing inspiration from our focus on
919:53 - Loops borrowing some information
919:55 - inspiration from our focus on uh
919:57 - conditionals combining that into this
920:00 - same square bracket notation so that
920:02 - what gryffindors ultimately is is zero
920:05 - or more students names and the names
920:08 - that are included are the result of
920:10 - iterating over each of those students
920:12 - and only including in the final result
920:15 - the students whose house happens to be
920:18 - Gryffindor so when I go ahead and run
920:20 - this with python of gryffindors.pi and
920:22 - hit enter you'll see huh nothing
920:25 - actually happened here well that's
920:26 - because I didn't finish the program let
920:28 - me go ahead and actually finish the
920:29 - program with this how about for each
920:31 - Gryffindor in gryffindor's plural and
920:35 - better yet so that it's sensible that I
920:37 - did all of this work in advance let me
920:38 - go ahead and sort all of those names
920:40 - with our familiar sorted function let's
920:43 - go ahead now and print out each of these
920:46 - gryffindors so now notice if familiar
920:49 - with the books in the movies you'll know
920:50 - that only three of these four students
920:52 - are actually in Gryffindor and if I run
920:53 - python of gryffindor.pi there we see
920:56 - Harry Hermione and Ron butt now in
920:59 - sorted order as well so that's just one
921:02 - way we can solve this same problem using
921:04 - not just a list comprehension but a list
921:05 - comprehension that has this conditional
921:08 - therein but there's yet other ways to
921:10 - solve this same problem too and we come
921:12 - back to some functional features of
921:13 - python in addition to functions like Map
921:16 - There's also this one called filter that
921:18 - can be used to achieve the same effect
921:19 - but with a more functional approach if
921:22 - you will let me go back to vs code here
921:24 - and with the same example let me do this
921:27 - let me leave the original list up above
921:29 - as before including Draco who's not in
921:32 - fact from Gryffindor and let me
921:34 - temporarily Define a function called is
921:36 - Gryffindor that takes in as uh value
921:39 - something like a student s and then
921:42 - let's do this let's go ahead and say if
921:44 - s quote unquote house equals equals
921:47 - Gryffindor then go ahead and return true
921:52 - otherwise go ahead and return false now
921:56 - we've seen before conditionals like this
921:58 - that are a bit unnecessarily verbose I
922:00 - don't need to have a conditional if I'm
922:02 - already asking a Boolean question up
922:04 - here so I can actually tighten this up
922:06 - as we've done in the past and just
922:08 - return does the student's house equal
922:11 - equal Gryffindor either it does and it's
922:13 - true or it doesn't and it's false I
922:15 - don't need to explicitly return true or
922:16 - false I can just return the value of
922:19 - that Boolean let's go ahead now and do
922:21 - this I'm going to create as before a
922:23 - variable called gryffindors a list for
922:25 - all of my Gryffindor students that
922:28 - equals to this time the result of
922:30 - calling filter filter takes at least two
922:33 - arguments here one of which is the name
922:35 - of a function to call is Gryffindor and
922:39 - I'm going to apply that function to each
922:41 - of the elements of this sequence here so
922:44 - similar in spirit to map I'm passing in
922:47 - a function that's going to be applied to
922:49 - each of the elements in the sequence but
922:51 - map which turns one value for each
922:54 - element in the sequence that's how we
922:55 - forced all of the words to uppercase but
922:57 - if I want to conditionally include a
923:01 - student in my resulting gryffindor's
923:03 - list I can use filter instead filter
923:06 - expects its first function to be not
923:08 - something like stir Dot Upper but a
923:10 - function that returns true or false tell
923:12 - me whether or not I should include or
923:15 - not include the current student from the
923:18 - final list and the question being asked
923:20 - is do they live in Gryffindor we're
923:22 - checking the dictionary's house key for
923:24 - that answer and so ultimately I think
923:27 - we'll be left with something quite
923:28 - similar for Gryffindor
923:31 - in the sorted ver let's do for
923:34 - Gryffindor in gryffindors let's go ahead
923:36 - then and print out the current students
923:38 - Gryffindor name it's not going to be
923:40 - sorted just yet but when I run this
923:42 - version here python of gryffindors.pi
923:45 - and hit enter we're back in business
923:46 - it's unsorted but we have Hermione Harry
923:49 - and Ron but not Draco and if you recall
923:52 - from a few weeks back if we want to sort
923:54 - even a list of dictionaries we can still
923:56 - do that too I can call sorted on
923:59 - gryffindors plural and I can pass in a
924:02 - key and that key can have a Anonymous
924:04 - function AKA a Lambda function that
924:07 - takes in a student as input call it s
924:09 - and then Returns the value s quote
924:12 - unquote name if my goal is to sort by
924:14 - indeed uh students own names if I go
924:17 - ahead now and run
924:19 - pythonofgriffendors.pi I see the same
924:21 - list of students but this time it's
924:23 - sorted so here we've seen two approaches
924:25 - to this particular problem of Gryffindor
924:27 - students whereby we can either use
924:29 - something like a list comprehension and
924:31 - in inside of that list comprehension do
924:33 - a bit of filtration including an if
924:36 - conditional as I did or we can take a
924:38 - more functional approach by just using
924:40 - this filter function passing into it the
924:43 - function that I want to make these
924:45 - decisions for me and then include only
924:48 - those for whom true is returned any
924:51 - questions on either of these two
924:52 - approaches uh yeah I just had a question
924:56 - that if we write the code like in the
924:58 - previous version where everything is
925:00 - stuffed into one like once the if we
925:02 - check for the style of the code then
925:05 - want it
925:06 - don't have a problem with it because
925:09 - it's less readable so with a formatter
925:11 - like black have a problem with the style
925:13 - of some of this code the previous one
925:15 - where the everything was stopped into
925:17 - one line oh a good question would
925:20 - something like black have a problem with
925:22 - this code well let me rewind to that
925:23 - version which was using the somewhat
925:25 - longer uh list comprehension which looks
925:29 - like if we go far enough back
925:32 - give me a few more undo's which looked
925:34 - like this ultimately let me go ahead and
925:37 - run black on gryffindors.pi and you'll
925:39 - see that I actually it reformatted ever
925:42 - so slightly but I proactively fix this
925:44 - myself had I done this and done it on
925:46 - just one line but I knew that black
925:48 - might not like that it would have fixed
925:50 - it for me so I just proactively fixed it
925:52 - before writing the code myself how about
925:55 - time for one other question on
925:57 - gryffindors.pi and this approach of
925:59 - using a list comprehension or filter
926:01 - yeah when when using filter instead of
926:05 - calling the function is Griffin there
926:08 - can you use it right there inside filter
926:13 - can you use the function is Gryffindor
926:15 - so you don't want to call it like this
926:18 - because you don't want to call it then
926:19 - you want filter to call the function for
926:21 - you if that's what you mean so I pass it
926:24 - in only by its name instead
926:27 - no I mean if you can write the return as
926:33 - is SQL script in the inside yes indeed
926:37 - in fact so recall that we indeed use
926:39 - these Lambda functions way back when
926:41 - when we wanted to pass in a quick and
926:43 - dirty function anonymously to allow
926:46 - sorted to filter by a different key of a
926:48 - dictionary we can do that here I can
926:50 - actually take the essence of this is
926:52 - Gryffindor function I can change the
926:55 - name of this function in my filter call
926:56 - to be another Lambda function passing in
926:59 - an argument like s and returning exactly
927:03 - that I can now delete my is Gryffindor
927:05 - function all together and now when I run
927:08 - python of gryffindors.pi I still get the
927:11 - same answer and I've not bothered
927:13 - defining a function only to then use it
927:15 - in one and only one place
927:18 - well let me propose too that we equip
927:20 - you with one other tool for your toolkit
927:22 - namely dictionary comprehensions as well
927:25 - and admittedly the syntax is starting to
927:28 - get even weirder but as you get more
927:30 - comfortable with all of these Primitives
927:31 - and others these are just tools that you
927:33 - can optionally but perhaps powerfully
927:35 - use to solve future problems down the
927:37 - road and with a dictionary comprehension
927:39 - we have the ability to create on the fly
927:41 - a dictionary with keys and some values
927:44 - without having to do it sort of old
927:46 - school by come creating an empty
927:47 - dictionary and creating a for Loop and
927:49 - iterating over that Loop and inserting
927:51 - more and more keys and values into the
927:53 - dictionary we can rather do it all at
927:55 - once so in fact let me go back to vs
927:57 - code here and let me propose now that I
928:00 - do this let me go ahead and initially do
928:04 - it the old-fashioned way here as follows
928:07 - let me go ahead and simplify and get rid
928:08 - of the houses all together so that we
928:10 - can focus for now just on a list of
928:13 - students names I'm going to go ahead and
928:15 - run students I'm going to go ahead and
928:17 - write students e equals quote unquote
928:19 - terminal quote unquote Harry and we'll
928:22 - keep it even shorter this time quote
928:23 - unquote Ron only those three students in
928:25 - Gryffindor I'm going to now proactively
928:27 - as we've done in the past give myself an
928:29 - empty list so that I have something to
928:31 - accumulate some answers to this problem
928:33 - in and now I'm going to do something
928:35 - like this for student and students so I
928:37 - can iterate over each of them let's go
928:39 - ahead and with the gryffindors list
928:41 - append to it the name of the student so
928:46 - quote unquote name and then student
928:47 - which is indeed their name from that
928:49 - list and now let's go ahead and just put
928:51 - these students all in Gryffindor I know
928:53 - these three students are in Gryffindor
928:54 - so suppose that the problem at hand is
928:56 - that I want to build up a list of
928:59 - dictionaries that only contains the
929:01 - Gryffindor students so it's sort of a
929:03 - step back from the previous version
929:04 - where I already had the names and the
929:06 - houses for now just assume that the
929:08 - problem is I have all of their names but
929:10 - I don't yet have the student
929:12 - dictionaries themselves so I'm
929:13 - rebuilding that same structure that I
929:16 - previously took for granted now now
929:18 - let's go ahead and just for the sake of
929:20 - discussion just print out these
929:21 - gryffindors so we can see what we've
929:23 - built if I run python of gryffindors.pi
929:26 - in my prompt I see a bit of a cryptic
929:28 - syntax but again look for our little
929:30 - hints I've got a square bracket at the
929:33 - end and a square bracket at the
929:34 - beginning and that indicates as always
929:36 - this is a list I then I have a whole
929:38 - bunch of curly braces with a whole bunch
929:41 - of quoted keys they happen to be single
929:43 - quotes by convention when using print on
929:45 - a dictionary but that's just a visual
929:48 - indicator that that is my key and the
929:50 - first value thereof is Hermione second
929:52 - key is a house this value thereof is
929:54 - Gryffindor then there's a comma which
929:57 - separates one object from the
929:59 - next and if we look past Harry and
930:00 - Gryffindor there's a second comma which
930:03 - separates Harry and Gryffindor from Ron
930:05 - and Gryffindor as well so in short here
930:07 - is some code whereby I fairly manually
930:09 - built up with a for Loop in an otherwise
930:12 - initially empty list the same data
930:15 - structure as before minus Draco just for
930:18 - Gryffindor students but here's where
930:21 - again with dictionary comprehensions or
930:23 - really list comprehensions first can we
930:25 - do this a little more succinctly Let Me
930:27 - Clear My terminal window let's get rid
930:30 - of this initially empty list and this
930:33 - for Loop that appends appends appends to
930:35 - it and let's just do this a gryffindor's
930:37 - variable will equal the following list
930:40 - comprehension inside of that list I want
930:44 - a dictionary structured with someone's
930:46 - name and their name so someone's house
930:49 - and only for now Gryffindor and that's
930:51 - it but I want one of these
930:54 - objects here in these curly braces for
930:58 - each student in students
931:02 - so here too inside of my list
931:04 - comprehension with my square brackets I
931:07 - want an object as indicate I want a
931:10 - dictionary as indicated by the curly
931:12 - braces I want each of those dictionaries
931:14 - to have two keys name and house
931:17 - respectively the values thereof are the
931:19 - student's name from earlier here and
931:22 - Gryffindor only which students do I want
931:25 - to create those dict objects from well
931:27 - for student and students so again on the
931:30 - left I have what I want in the final
931:31 - list and on the right I have a loop and
931:33 - this time no conditional I want all of
931:35 - these students in Gryffindor as their
931:37 - house now let's print this again python
931:40 - of gryffindors.pi and hit enter and now
931:43 - we have the exact same output so instead
931:45 - of three lines it's just one it's a
931:48 - little more cryptic to read at first
931:50 - glance but once familiar with list
931:51 - comprehensions and this sort of syntax
931:53 - it's just another way of solving that
931:55 - same problem what if I want to change
931:57 - this and simplify what if I don't want a
931:59 - list of dictionaries which I now have
932:02 - again per the square brackets I have a
932:04 - list of three objects here what
932:06 - if I just want one bigger dictionary
932:09 - inside of which is a key like Hermione
932:12 - colon Gryffindor Harry colon Gryffindor
932:15 - Ron colon Gryffindor I don't need a list
932:18 - I don't need separate objects per
932:20 - student I just want instead one big
932:22 - dictionary where the keys are the
932:24 - students names and the values of their
932:26 - house and I'm assuming for now no one's
932:28 - going to have the same first name in
932:30 - this world well I can do this let me get
932:33 - rid of this here and not create a list
932:36 - comprehension but again this thing known
932:38 - as a dictionary comprehension and the
932:40 - visual indicator or difference here is
932:42 - that instead of being square brackets on
932:44 - the very outside this time it's going to
932:47 - be curly braces instead so inside of
932:49 - these curly braces what do I want every
932:51 - key to be I want every key to be the
932:54 - student's name I want every value for
932:56 - now to be Gryffindor and I want to do
932:58 - this for each student in students and
933:02 - now things are getting really
933:03 - interesting and this is another
933:05 - manifestation of python in some views
933:07 - being very readable from left to right
933:09 - absolutely takes practice and comfort
933:11 - but this is creating a variable called
933:14 - Gryffindor which is going to be a
933:16 - dictionary per these curly braces every
933:19 - key is going to be the name of some
933:21 - student every value is going to be
933:22 - Gryffindor what names of what students
933:24 - well this dictionary comprehension will
933:27 - be constructed from the list of students
933:31 - one at a time so when I print this now
933:33 - the syntax will look a little different
933:35 - because it's not a list of dictionary
933:37 - objects it's just one bigger dictionary
933:39 - object itself but now printing
933:41 - gryffindors gives me Hermione colon
933:43 - Gryffindor Harry colon Gryffindor and
933:46 - Ron colon Gryffindor as well
933:49 - any questions now on what we've called
933:51 - dictionary comprehensions as well
933:55 - [Music]
933:58 - any questions on here
934:02 - no well let's introduce one other
934:04 - function from Python's toolkit followed
934:07 - by one final feature and flourish and
934:09 - then you're off on your way well let's
934:12 - go ahead and think back to this recall
934:15 - some time ago that we had just a simple
934:17 - list of students as we have here
934:19 - Hermione Harry and Ron and for instance
934:22 - way back when we wanted to print out for
934:25 - instance their ranking from one to two
934:27 - to three unfortunately when you do
934:29 - something like this for student and
934:31 - students you can print out the student's
934:33 - name quite easily of course if I do
934:35 - python of gryffindors.pi I get Hermione
934:38 - Harry Ron in that same order but I don't
934:40 - see any numerical rank I see no number
934:42 - one two or three so I could maybe do
934:45 - this with maybe a different type of for
934:48 - Loop instead of this why don't I try
934:50 - this so maybe I could do 4 I in the
934:54 - range of the length of the students list
934:57 - and we've done something like this
934:58 - before and then I could print out I and
935:01 - I could print out the student's name by
935:03 - indexing into that list at location I
935:06 - well what does this look like if I run
935:08 - python of gryffindors.pi it's close but
935:11 - you know these aren't programmers they
935:13 - don't necessarily think of themselves as
935:15 - zero index Termini probably wants to be
935:17 - first not zero so how can we fix this
935:19 - well just a little bit of arithmetic I
935:21 - could print out I plus 1 of course and
935:23 - then the student's name so if I clear my
935:25 - terminal window and run python of
935:27 - gryffindors.pi once more now we have
935:30 - this enumeration one two three of each
935:32 - of these students but it turns out that
935:34 - python actually has had all this time
935:36 - another built-in function that you might
935:38 - Now find useful that is namely enumerate
935:41 - and enumerate allows you to solve this
935:43 - kind of problem much more simply by
935:45 - iterating over some sequence but finding
935:48 - out not each value one at a time but
935:52 - both the value one at a time and the
935:55 - index thereof it gives you back two
935:57 - answers at once so if I go back to vs
936:00 - code here now and take this approach I
936:02 - don't need to do this this complicated
936:04 - range and length and then I all over the
936:07 - place I can more succinctly do this I
936:09 - can say for I comma student in the
936:13 - enumerate
936:14 - return value passing in students so this
936:18 - gives me back an enumeration if you will
936:19 - and now I can go about printing I plus 1
936:22 - as before and I can print out the
936:24 - student so I don't need to index into
936:26 - the list with bracket I notation I don't
936:28 - need to call range I don't need to call
936:30 - length again enumerate takes a sequence
936:32 - of values like these students and it
936:34 - allows me to get back the current index
936:36 - 0 1 2 and the current value Hermione
936:40 - Harry Ron respectively so now just
936:43 - tighten things up further and indeed
936:44 - that's been our theme here can we solve
936:46 - the same problems as we've been solving
936:48 - for weeks but tighten things up using
936:50 - just more of this toolkit
936:53 - allow us to equip you with one final
936:55 - tool for your toolkit namely this
936:57 - ability to generate values in Python
936:59 - from functions this is not a problem
937:01 - that we've necessarily encountered
937:02 - before but it turns out if you're
937:04 - writing a function that reads or
937:05 - generates lots of data your function
937:07 - your program your computer might very
937:09 - well run out of memory and your program
937:11 - might not be able to run any further but
937:14 - it turns out there's a solution to this
937:16 - problem that's something you might have
937:18 - in your back pocket particularly if
937:19 - after this course you start crunching
937:21 - quite a few numbers and analyzing all
937:23 - the more data in fact let's go back to
937:25 - vs code here and let's go ahead and
937:27 - create a program that's perhaps timely
937:28 - at this time of day particularly
937:30 - depending on your time zone you might be
937:32 - feeling all the more sleepy but here in
937:34 - the US it's quite common to be lull to
937:36 - sleep when you're struggling otherwise
937:38 - by counting sheep in your head and
937:40 - typically as depicted in cartoons you
937:42 - might see in your mind's eye one sheep
937:44 - jumping over a fence and then two and
937:45 - then three sheep and then four and then
937:47 - eventually you presumably get so bored
937:49 - counting these sheep you actually do
937:50 - fall asleep so in vs code here let's
937:52 - create a a program called sleep.pi that
937:56 - allows me to print out some number of
937:58 - sheep as though I'm counting them in my
938:00 - mind's eye and Via this program let's do
938:03 - this let's prompt the user for a
938:05 - variable n setting it equal to the
938:07 - integer conversion of the return value
938:09 - of input asking the user what's n for
938:11 - how many sheep do they want to try
938:13 - counting and then let's do a familiar
938:14 - for Loop here and we'll start counting
938:16 - from zero as always so we'll first have
938:18 - zero sheep then one sheep then two sheep
938:20 - and so on for I in the range of that
938:22 - value n Go ahead and print out and I'll
938:25 - paste here an emoji representing a sheep
938:27 - times I so the first iteration I'll see
938:29 - Zero sheep the second iteration I'll see
938:31 - one and then two and then however many
938:33 - specified by n ultimately minus one all
938:37 - right let's go down into my terminal
938:38 - window here and run python of sleep.pi
938:40 - and I should see indeed after typing in
938:42 - say 3 for my value of n zero sheep then
938:45 - one sheep then two sheep and so forth
938:47 - and if I make my terminal window even
938:49 - bigger here we can of course do many
938:50 - more than this typing in for instance 10
938:52 - and you'll see that we get more and more
938:54 - sheep as time passes presumably becoming
938:57 - all the more tedious to Envision in my
938:58 - mind's eye so let's now go ahead and
939:01 - practice what we've been preaching when
939:03 - it comes to the design of this program
939:04 - and see if and when we actually run into
939:07 - a problem let me go ahead here now and
939:10 - put all of this in a main function by
939:12 - defining main up here as always let me
939:14 - go ahead and indent all of this code
939:16 - here and then let me just do this
939:17 - conditionally as always if the name of
939:19 - this file equals equals quote unquote
939:21 - main let's go ahead and call Main let's
939:24 - make sure I didn't break anything just
939:25 - yet even though functionally this should
939:27 - be nearly the same and if I type in
939:29 - three I still have zero then one then
939:32 - two sheep on the screen but we've been
939:34 - in the habit of course of creating
939:36 - helper functions for ourselves that is
939:38 - factoring our code in a way that allows
939:40 - us to abstract away certain
939:42 - functionality like generating some
939:44 - number of sheep into separate functions
939:46 - so that one they're indeed abstracted
939:48 - and we no longer have to think about how
939:50 - they're implemented and we can even
939:51 - reuse them in projects as in libraries
939:53 - but we've also been in the habit too of
939:55 - now testing those functions as with unit
939:58 - tests so I probably shouldn't keep all
940:00 - of my logic anyway in man and let's
940:01 - Factor some of this out wouldn't it be
940:04 - nice if I could for instance just call a
940:07 - sheep function as by taking this line of
940:11 - code here and instead of just printing
940:13 - it here let's print out the return value
940:15 - of a new function called Sheep that
940:17 - tells the function how many sheep to
940:19 - print I in this case let's go down as
940:22 - always and create another function here
940:23 - called Sheep the Sheep function now will
940:26 - take a parameter n that specifies how
940:28 - many sheep do you want to return and so
940:30 - that we can test this as with a unit
940:32 - test so we won't do that here let me go
940:34 - ahead and not print the number of sheep
940:36 - as via a side effect but let me go ahead
940:38 - and return one of those sheep times n so
940:42 - that the user gets back a whole string
940:44 - of sheep that's the appropriate number
940:46 - to print so here too functionally I
940:48 - don't think we've changed anything too
940:50 - fundamentally python of sleep.pi typing
940:52 - three still gives us zero then one and
940:55 - then two sheep but now we at least have
940:57 - a framework for focusing on the
941:01 - implementation of this sheep function
941:03 - but it's a little inelegant now that
941:06 - it's still up to the main function to do
941:09 - this iteration we've seen in the past
941:11 - way back in week zero wouldn't it be
941:13 - nice to define a function that actually
941:15 - handles the process of returning the
941:17 - entire string that we want rather than
941:19 - just one row of sheep at a time well I
941:22 - think we can do this why don't I go
941:24 - ahead and change sheep as follows let me
941:26 - go ahead here and first create a flock
941:30 - of sheep that's initially empty using an
941:32 - empty list then for I in the range of n
941:37 - let's go ahead and append that flock for
941:40 - instance one sheep times I so that I
941:42 - keep adding to this list zero sheep then
941:45 - one sheep then two sheep then three and
941:47 - so forth and then ultimately I'm going
941:48 - to return the whole flock of sheep at
941:50 - once so this is going to return the
941:52 - equivalent of all of those strings of
941:54 - sheep so that eh main can handle the
941:57 - printing thereof so back up here in
941:59 - Maine let's do this how about for each
942:01 - sheep I'll call it s since sheep is both
942:03 - singular and plural for s in sheep of n
942:06 - which again returns to me a list of all
942:09 - of the sheep the whole flock let's just
942:11 - print out each sheep S one at a time all
942:15 - right so so far so good here I think let
942:17 - me go ahead and run python of sleep.pi
942:19 - and hit enter what's N3 and that still
942:22 - seems to work just fine but let me get a
942:25 - little uh creative here and see not just
942:29 - three sheep on my screen but maybe 10
942:31 - rows of sheep and that too seems to work
942:33 - fine let me get a little more
942:35 - adventurous and type in maybe a hundred
942:37 - sheep and it's starting to look ugly to
942:39 - be fair but they're all printing out
942:41 - pretty fast let me go ahead and try
942:43 - again with maybe 1 000 sheep on the
942:46 - screen and they flew by pretty fast it's
942:48 - still pretty messy but they're all there
942:50 - we could count them all up how about not
942:52 - just a thousand but ten thousand sheep
942:55 - well that too seems okay it's taking
942:57 - like 10 times as long and that's why you
942:59 - see this flickering on the screen all of
943:01 - the sheep are still printing but but but
943:03 - it's a lot of data being printed if I
943:06 - hang in there a little longer
943:09 - hopefully we'll see all 10 000 sheep
943:14 - coming to pass
943:16 - this is here in the video where we'll we
943:18 - will speed up time
943:20 - a real online oh my God this is a lot of
943:23 - sheep
943:24 - there we go okay and now all of my sheep
943:26 - have been printed so it seems to be
943:29 - working just fine well let me just be
943:31 - even more adventurous and okay let me
943:33 - try my luck let me try like uh how about
943:35 - one million sheep this time and hit
943:38 - enter
943:40 - huh
943:43 - something's no longer working
943:46 - while we wait for a spoiler here does
943:50 - anyone have any intuition for why my
943:52 - program suddenly stopped printing sheep
943:56 - what is going wrong in this version
943:59 - wherein I'm generating this really big
944:02 - flock of sheep we might have run out of
944:04 - memory or computation power yeah so
944:07 - maybe we're actually pushing the limits
944:09 - of my Mac my PCS my cloud servers memory
944:12 - or CPU the brains of the computer's
944:14 - capabilities because it's just trying to
944:18 - generate massive massive massive lists
944:21 - of sheep one million of those rows of
944:23 - sheep Each of which has a huge number of
944:25 - sheep and it seems that my computer here
944:27 - is honestly just really struggling and
944:30 - this is really unfortunate now because
944:32 - it would seem that even though this
944:34 - program clearly works pretty well for a
944:36 - thousand sheep 10 000 sheep once you
944:38 - cross some threshold it just stops
944:41 - working all together or it just takes
944:43 - way too long for the program to be
944:45 - useful anymore but this seems a little
944:47 - silly right because theoretically I
944:50 - should absolutely be able to print all
944:52 - of these same sheep if I just printed
944:54 - one right away then print two right away
944:57 - then print three then four then five it
944:59 - seems that the essence of this problem
945:01 - if I go back to my code is that per my
945:04 - best practices that I'm trying to
945:07 - practice what I'm preaching it seems
945:09 - that the fundamental problem is that
945:10 - I've modularized my code by creating
945:13 - this helper function called Sheep whose
945:15 - purpose in life is to do all of the
945:17 - generation of sheep and then return all
945:19 - of them at once
945:21 - wouldn't it be better and I can actually
945:23 - hear my fan turning on now even just
945:25 - trying to generate these sheep wouldn't
945:27 - it be better then to just print the
945:29 - Sheep one two three four at a time well
945:32 - we could do that but that's really a
945:34 - step backwards that rather contradicts
945:36 - all of the Lessons Learned of the past
945:37 - few weeks where generally not putting
945:40 - everything in Maine is a good thing
945:41 - generally having an additional function
945:43 - that you can then test separately with
945:45 - unit tests is a good thing do we really
945:47 - need to give up all of those best
945:49 - practices just to print out some sheep
945:51 - and and here fall asleep well it turns
945:54 - out there's a solution to this problem
945:56 - and namely in the form of these
945:58 - generators in Python you can define a
946:01 - function as a generator whereby it can
946:03 - still generate a massive amount of data
946:06 - for your users but you can have it
946:09 - return just a little bit of that data at
946:12 - a time and you yourself can implement
946:13 - the code in almost the same way but you
946:16 - don't have to worry about too much
946:18 - getting returned all at once these two
946:20 - like all features of a python are
946:22 - documented in the official documentation
946:24 - they're in but what you'll find
946:25 - ultimately that it all boils down to
946:28 - this keyword here yield up until now
946:31 - when we've been banking functions we
946:34 - have been defining functions that return
946:36 - values if at all using the keyword
946:39 - return and indeed if we go back to our
946:41 - code here that's exactly what I've been
946:43 - waiting for I've been waiting to return
946:45 - the whole flock at once unfortunately if
946:47 - you wait too long and here we have it my
946:50 - program was quote unquote killed that is
946:52 - to say my computer got so fed up with
946:55 - how much memory and CPU it was trying to
946:57 - use it just said nope you're not going
946:59 - to run it all and that's unfortunate now
947:01 - my program no longer works for large
947:04 - numbers of sleeps sheeps which is not
947:06 - good if I'm really having trouble
947:07 - falling asleep some night so how can I
947:10 - use yield to solve this problem instead
947:13 - well let me do this instead of building
947:16 - up this massive list of sheep in this
947:19 - big list called flock let's just do this
947:21 - instead let me go ahead and simplify
947:24 - this whole function as follows whereby I
947:27 - iterate for I in the range of N and then
947:31 - on each iteration in the past I might
947:34 - have been inclined to use return and
947:36 - return something like one sheep times I
947:38 - but this won't work here right because
947:41 - if you want a million sheep and you
947:43 - start a for Loop saying for I in the
947:46 - range of a million you're going to
947:48 - return accidentally zero sheep right
947:50 - away and then this function is
947:51 - essentially useless you shouldn't return
947:53 - a value in the middle of a loop like
947:55 - this because you're not going to get to
947:57 - any of these subsequent iterations of
947:58 - the loop it's going to iterate once and
948:00 - boom you return but thanks to this other
948:03 - keyword in Python called yield you can
948:06 - tell python to effectively return just
948:10 - one value at a time from this Loop so if
948:13 - I go back to the this version of my code
948:14 - here and I say not return but yield this
948:18 - is like saying return one value at a
948:22 - time return one value at a time return
948:25 - one value at a time the for Loop will
948:27 - keep working and I will keep counting
948:30 - from zero to one to two all the way up
948:32 - toward one million but each time the
948:35 - function is just going to hand you back
948:37 - a little piece of data it's going to
948:38 - generate so to speak just a little bit
948:41 - of that data not all of the data at once
948:43 - and that's good because my computer has
948:45 - a decent amount of ram certainly enough
948:47 - to fit one row of sheep it just doesn't
948:49 - have enough memory to fit Apparently one
948:52 - million rows of so many sheep so now if
948:55 - I go to my terminal window and run
948:57 - python of sleep.pi and hit enter what's
949:00 - in 3 would still work zero then one and
949:03 - then two let me go ahead and increase
949:05 - the size of this here and run python of
949:07 - sleep.pi let's try one million as before
949:10 - and hit enter and now I immediately see
949:14 - results I don't think we'll wait for all
949:16 - of these sheep to be printed because
949:17 - then we will literally all be asleep but
949:20 - what you'll notice happening now is the
949:22 - program is not hanging so to speak it's
949:25 - not waiting and waiting and thinking and
949:26 - thinking and trying to generate the
949:28 - entire flock at once it's just
949:29 - generating one row of sheep at a time
949:32 - and it's flickering on the screen
949:33 - because there's so many of them and
949:35 - that's all thanks to yield it's
949:36 - generating a little bit of data at a
949:38 - time not all at once
949:41 - any questions now on this feature called
949:46 - generators
949:50 - any questions at all to add one more
949:52 - piece of terminology to the mix just so
949:54 - you've heard it this same feature of the
949:56 - same feature here is returning what will
949:59 - technically Now call an iterator yield
950:02 - is returning an iterator that allows
950:04 - your own code your own for Loop in main
950:06 - to iterate over these generated values
950:09 - one at a time how how does this yield
950:15 - actually works under under the hood I
950:18 - mean is it is it using
950:21 - multi-trading you can think of the
950:24 - implementation as being asynchronous in
950:26 - this sense whereby the function is uh
950:29 - returning a value immediately and then
950:32 - subsequently giving you back another one
950:34 - as well underneath the hood what's
950:36 - really happening is the generator is
950:37 - just retaining state for you it does not
950:40 - going to run the entire loop from top to
950:42 - bottom and then return a value it's
950:44 - going to do one iteration and yield a
950:46 - result and the python for you is going
950:49 - to suspect spend the function if you
950:51 - will but remember on what iteration it
950:53 - was so the next time you iterate over it
950:55 - as it's going to happen again and again
950:57 - in this for Loop in main you get back
950:59 - another value again and again so yield
951:02 - returns indeed this thing called an
951:03 - iterator and that iterator can be
951:05 - stepped over as in a loop one element at
951:08 - a time but the language python handles
951:10 - all of that for you so that you don't
951:12 - need to do all of the underlying uh
951:14 - Plumbing yourself
951:16 - how about time for one other question on
951:18 - these generators and iterators as our
951:21 - sheep continue to fly by pulling in
951:24 - every iteration the program will return
951:26 - the memory to the system
951:28 - so the program will not crack correct on
951:31 - each iteration it's only returning the
951:33 - one string of sheep that's appropriate
951:35 - for the current value of I it is not
951:37 - trying to return all million rows of the
951:40 - same and therefore it uses really one
951:42 - millionth the amount of memory although
951:44 - that's a bit of an oversimplification
951:47 - all right as these sheep continue to fly
951:50 - across the screen let me now uh go ahead
951:53 - and interrupt this as you might have had
951:55 - to in the past with infinite Loops in
951:56 - your own code even though this is an
951:58 - infinite it's just really long Ctrl c
952:00 - will interrupt with your keyboard that
952:02 - program giving me back control of my
952:04 - computer well here we are at the end of
952:08 - cs50's introduction to programming with
952:10 - python and if today in particular of all
952:13 - days felt like a real escalation real
952:15 - quickly realize that these are really
952:17 - these are just additional perhaps
952:19 - optional Tools in your toolkit that you
952:22 - can add to all of the past Lessons
952:24 - Learned so that as you exit from this
952:25 - course and Tackle other courses or
952:27 - projects of your own you have all the
952:29 - more of a mental model and all the more
952:30 - of a toolbox with which to solve those
952:32 - same problems if we think back now just
952:34 - a few weeks ago it was probably in our
952:37 - focus on functions and variables that
952:39 - you first started struggling but now in
952:40 - retrospect if you look back at those
952:42 - problems and those same problem sets
952:44 - odds are those same problems would come
952:46 - all too easily to you now can
952:47 - additionals was the next step in the
952:49 - class wherein we gave you the ability to
952:51 - ask questions and get answers and
952:53 - therefore do things conditionally in
952:54 - your code we came full circle today and
952:56 - you can see that you can now use those
952:57 - same kinds of conditionals now to do
953:00 - fancier things with list comprehensions
953:01 - and dictionary comprehensions and the
953:03 - like Loops of course have been
953:05 - omnipresent now for weeks including
953:07 - today as we built up those same
953:08 - structures and of course something can
953:10 - go wrong and exceptions and exception
953:12 - handling was our mechanism for not only
953:14 - catching errors in code but also raising
953:17 - your own exception so that if you're
953:18 - laying the foundation to write code for
953:20 - other people as in the form of libraries
953:22 - you can do that too libraries of course
953:24 - are things you can not only use but now
953:26 - write on your own be it a small module
953:28 - or whole package of code that you want
953:30 - to share with others around the world
953:31 - and even better can you write tests for
953:34 - your own code for your libraries for
953:36 - others code as well so that ultimately
953:38 - you can be all the more confident that
953:39 - not only your code is correct today but
953:41 - if you make a change to your code
953:43 - tomorrow you haven't broken anything at
953:45 - least according to your tests if they
953:47 - continue to to pass file i o though
953:49 - meanwhile was a way of now storing data
953:51 - not just in the computer's memory like
953:53 - all of these sheep but actually storing
953:55 - things persistently longer term to disk
953:57 - being in a CSV or something more like a
954:00 - binary file like an image with regular
954:02 - Expressions you then had the ability to
954:04 - express patterns and actually validate
954:06 - data or extract data from information
954:08 - all the more of a useful technique
954:10 - nowadays when so much of the world is
954:12 - trying to analyze and process data at
954:14 - scale some of which might in fact be
954:16 - quite messy from the get-go and then of
954:19 - course most recently object oriented
954:21 - programming an opportunity to solve the
954:23 - same kinds of problems but with a
954:25 - slightly different perspective a way to
954:27 - encapsulate and to represent real world
954:29 - entities this time in code and today of
954:32 - course Etc with so many other tools that
954:34 - you can add that didn't necessarily fall
954:36 - under any of those earlier umbrellas but
954:39 - are useful functions and data types and
954:41 - techniques just to have again in your
954:43 - back pocket as yet other mechanisms for
954:45 - solving problems as well not just
954:48 - putting everyone to sleep but I thought
954:50 - another way to end might be a little
954:52 - more vocally to try writing one final
954:54 - program together this one using a
954:56 - library we've seen in the past as well
954:58 - as one other I've taken the liberty of
955:00 - installing a text to speech library on
955:03 - my computer here and I'm going to go
955:05 - ahead perhaps and open a new file here
955:06 - called uh say dot Pi in vs code and I'm
955:11 - going to go ahead here and first import
955:12 - our own friend import cow say I'm going
955:16 - to import this new library here import
955:19 - Pi ttsx3 the python text-to-speech
955:22 - library and now per its documentation
955:25 - which I read in advance I'm going to go
955:27 - ahead and create a variable for myself
955:29 - here engine equals
955:31 - pyttsx3. init to initialize that library
955:34 - for text to speech I'm going to then ask
955:37 - the user well what do I want to hear
955:39 - spoken and I might do something like
955:41 - this a variable called this equals the
955:43 - return value of input what's this shall
955:45 - be my simple question and I'm going to
955:47 - keep it this time as a string we've seen
955:49 - how to use cow say we can do cow say dot
955:52 - Cal of this turns out this new library
955:54 - can allow me to use its own engine to
955:56 - say this as well but then ultimately I'm
955:59 - going to have to run the engine dot run
956:01 - and wait just in case it's a long phrase
956:04 - or sentence to be said but that's it in
956:07 - just eight lines of code not only am I
956:09 - apparently going to have a cal appear on
956:11 - the screen to close us out now but also
956:14 - some synthesized text ultimately then we
956:17 - hope with this course that you not only
956:19 - Learn Python that you've not only
956:20 - learned programming but you've really
956:21 - learned how to solve problems and
956:23 - ultimately how to teach yourself new
956:25 - languages funny enough I myself only
956:27 - learned python just a few years ago and
956:29 - even though I certainly went through
956:30 - some formal documentation and resources
956:32 - online I mostly learned what I know now
956:35 - and even what I had to learn again for
956:37 - today by just asking lots of questions
956:39 - be it a Google or friends who are more
956:41 - versed in this language than I and so
956:44 - having that instinct having that
956:45 - vocabulary Vari which to ask questions
956:47 - of others to search for answers to
956:49 - questions you absolutely now have enough
956:51 - of a foundation in Python and
956:52 - programming to go off and stand on your
956:54 - own so you can certainly and you're
956:56 - welcome and encouraged to go on and take
956:58 - other courses in Python and programming
957:00 - specifically but better still as quickly
957:02 - as you can is to find some project
957:04 - that's personally of interest that uses
957:06 - python or some other language because at
957:08 - least from my own experience I tend to
957:10 - learn best and I hope you might too by
957:12 - actually applying these skills not to
957:14 - problems in the classroom but really
957:16 - truly to problems in the real world
957:18 - allow me with all that said to look at
957:21 - my full screen terminal window here run
957:23 - pythonofsay.pi
957:25 - crossing my fingers one final time in
957:28 - hopes that I've not made any mistakes or
957:30 - bugs and here we go python of say.pi
957:33 - prompting me what's this how about we
957:35 - end on this note here
957:37 - [Music]
957:39 - this was cs50