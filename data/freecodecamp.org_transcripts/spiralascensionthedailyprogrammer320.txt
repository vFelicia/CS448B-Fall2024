00:00 - Hey freeCodeCamp and welcome to another The Daily Programmer webseries video and in this video
00:05 - We're going to talk about a problem called spiral ascension
00:07 - which is number 320. So let's go ahead and look at the problem and read it on the subreddit alright.
00:11 - So this is the problem that we're going to be solving in this video. It's challenge number 320 it's called spiral ascension and
00:19 - I'll go ahead and just read it off, it says the user enters a number. Make a spiral that begins with 1 and starts from
00:24 - the top left going towards the right and ends with a square of that number.
00:28 - So some examples they give you is a 5 and if you see here you have a 2d a grid or 2D array
00:35 - where you have it going from 1 to 5 on the top row
00:39 - and it just clockwise keeps counting up until you reach the last number which is n times n 25 and
00:47 - then again another challenge and input is 4 where you just print out this grid down here.
00:53 - So that's basically the problem that we're trying to solve it's super straightforward given one number
00:57 - print out a grid that's n by n
00:59 - which follows us like fashion, right?
01:01 - So the hard part is trying to mimic that or how do you kind of simulate that in the computer. So again
01:07 - let's go ahead and define this problem on the whiteboard before we break it down with my solution
01:11 - Ok so in this problem, you're given an n and using that n you're supposed to build up an n by n
01:18 - matrix or grid. In this case we'll just say n is equal to 3.
01:23 - So if n is provided and it's 3 we need to build a 3 by 3 grid and
01:29 - then the goal is to print out a matrix with spirals in this fashion.
01:39 - So if you notice that the center number is just n squared
01:44 - and your goal is to print out starting at one
01:48 - going in a clockwise manner until you reach the center.
01:51 - All right, so now that we understand the problem that we're trying to solve let's try to work it out
01:54 - where n is equal to 3.
01:57 - So a few takeaways is; if n is equal to 3 we know that we're going to keep putting values until we reach
02:04 - the final value of n squared which is 9 right.
02:07 - So we know that in our code we could just do some type of loop and loop until our variable, so for instance, x is
02:16 - created a nine because nine is the last element we're going to place. So that's one takeaway that we can kind of get from this
02:20 - problem
02:21 - Another takeaway is we need to start in the top left corner
02:24 - so if we were to represent
02:26 - the rows and the columns as integers we know that the top left corner is going to be zero zero
02:31 - so we can go ahead and just place the first value, which is 1, in that top left corner.
02:36 - Now the next part that you kind of have to realize is you need to set some type of direction so each iteration
02:43 - we're going to be moving in a certain direction either to the right, down, left or up.
02:50 - So in this case, we're going to represent that with a positive or negative 1 and using the variables d row or d column.
02:57 - So for example if d row is equal to 1 that means we need to move in a down direction
03:04 - or
03:05 - if d row is 0 that means we don't move up or down and
03:10 - instead if d column
03:11 - was set to 1 that means we need to move in the positive right direction, so
03:15 - d row and d column are the variables we're going to use that kind of
03:18 - figure out the direction in which we're going to move and then also when we get to certain spots
03:22 - we're going to move the direction in a clockwise manner.
03:27 - And if finally row and column is the particular
03:30 - spot in the matrix that we're at that current iteration.
03:33 - So working through this let's go ahead and we put the first value of 1 in the row 0 column 0
03:38 - And then we need to check to see if the direction we're about to move has an element or slot that we can move to
03:46 - so if we do row
03:49 - plus d row which is 0 and then column plus d column which makes column equal to 1,
03:55 - we say is there an element here
03:58 - like is this out of bounds or have we already put something there? And if so we need to go ahead and change direction.
04:05 - But in this case none of that is true
04:06 - there is a blank slot there so we can move in that direction. So we can just go ahead and
04:13 - increment the value of x to 2
04:16 - and place that 2
04:19 - in whatever row and column
04:21 - element that we're at that current part of the iteration. Alright, so now we just do that again, right?
04:26 - We check if we were to add d column to column and d row to row,
04:30 - would that put us in bounds and in fact it would give us an element that hasn't been seen yet?
04:36 - So we can go ahead and do that same operation
04:39 - where we increment x.
04:41 - We increment
04:44 - column by adding d column to it. So now, we're at 0,2 and we can put a 3 there
04:52 - Now for this third iteration or the next iteration, if we were to move
04:58 - to 0,3
05:00 - we'd be out of bounds right. So we know that we need to move in a 90 degree clockwise fashion to go down now.
05:09 - So one thing to take away is to kind of switch directions,
05:13 - we can just swap the values of d row and d column right because we need to go down positive 1
05:19 - which means that d row will just become whatever d column is
05:22 - and
05:24 - then d column will just become whatever d row was and
05:28 - we can negate it and
05:31 - I'll go over that in a second when we get down to going left.
05:36 - So again, we do the same process where we add a
05:39 - d row to row which gives us a
05:42 - 1 here
05:44 - we go ahead and increment x
05:47 - we're at 1,2
05:49 - place the value
05:51 - increment x
05:54 - we're at 2,2
05:56 - again and place the value and
05:58 - then if we were to move in the same direction one more time
06:00 - we'd go out of bounds which means we need to do that same operation where we switch these. So d row becomes 0
06:06 - which would become the value of whatever d column was
06:09 - d column is going to be equal to what d row was which is 1 but then negate it which allows us to go left.
06:17 - So then in this case when we add d column to column
06:21 - this will become 1
06:24 - which puts us at 6, same process, this becomes 0
06:30 - this becomes 7
06:34 - and again if we're to move in the negative d direction we go out of bounds, so we need to swap these again
06:42 - so zero becomes negative 1,
06:45 - negative 1 will come 0 which if you look at this that means that we're going to be going up again.
06:53 - We can increment the 7 here to an 8 add d row to row to make this a 1 instead of 2
07:04 - and now we check if the next element we're going to go to is already existing.
07:10 - We again just do the whole swapping mechanism, so this will become
07:14 - positive 1
07:17 - this will become a zero
07:19 - increment this to a 9 and
07:22 - add d column to column
07:25 - so we're left with 1,1 and we built up our grid.
07:31 - And this same process will work for bigger and bigger grids as
07:35 - long as you just keep checking if you're about to go out of bounds or if you're about to go to a slot
07:38 - that already has a value. We just go ahead and swap d row and d column and negate d column add
07:43 - it to row and column, place the value and then increment x by 1.
07:48 - Alright, so that's the solution on the whiteboard let's go ahead and implement this in Javascript.
07:52 - All right so start off, let's go ahead and create a function called create grid
07:56 - which is going to take one parameter called n which is going to be how big are n by n ascension grid should be.
08:03 - And I'll go ahead and say const grid is equal to an empty array, and then return that down here
08:08 - and this will be the array or grid that we're trying to build up. And then down here
08:12 - I'll go ahead and console.log create grid of 5 so we can kind of work towards a solution using n of 5.
08:21 - So the first step is we need to create a n by n blank grid or array
08:26 - which, I found this little implementation on Stack overflow which can be used for building up a n by n grid.
08:35 - And all this is doing is creating a grid that's n and then for each element inside there, putting another array
08:40 - which is length of n.
08:42 - So now that we have a blank
08:45 - 2x2 or n by n grid we can go ahead start declaring those variables like we used on the whiteboard example.
08:53 - So starting off I can say
08:54 - let number is equal to 1 which is going to be the first number that we start off and it's also the x that we used
09:00 - on the whiteboard.
09:01 - We can say let row is equal to 0 let column is equal to 0 which are going to be used for
09:07 - representing the exact element location that we're at in the grid.
09:11 - We can say let d row is equal to 0 and let d column is equal to 1
09:16 - which is going to be the initial direction which will be in the right direction or going from left to right
09:20 - that we need to traverse the grid in.
09:23 - So we've declared all of our kind of starting initial variables that we're going to use for the iteration
09:28 - the next step is we need to loop x amount of times until
09:33 - we reached n times n as our final number, so if you remember we need to go until number is
09:40 - less than or equal to n times n.
09:44 - So in the 3x3 example this will go until we reached 10, or one more than 9
09:51 - So that should make sense as to you know the while loop we're doing and why we have to loop to n times n.
09:57 - The next step is
09:59 - we need to place our current number inside the grid at the current location that we're at. So if we say grid of row
10:06 - column is equal to number
10:07 - that will place a 1 in the top left spot.
10:10 - And then we need to again increment number by 1 so I'll go ahead say number plus plus here
10:18 - and
10:19 - like we talked about after we place a number
10:22 - we need to check if the next location we're going to is out of bounds so I can say if
10:27 - column plus d column is equal to n. Which means are we going out of bounds on the right side of the grid?
10:33 - I can say if row plus d row
10:35 - is equal to n. Meaning are we about to go out of bounds on the bottom of the grid?
10:40 - So I can say if column plus d column is equal to negative 1
10:44 - that's checking if we're about to go out of bounds on the left side of the grid
10:48 - and then finally we can say if we've already seen the location that we're about to go to
10:53 - so grid of row plus d row and then column of
10:59 - column plus d column. If that's already defined
11:02 - this is where we need to do our whole swapping logic or you know turn by 90 degrees clockwise.
11:09 - So to do that what we can do is just declare a temp value and set it equal to d row
11:14 - we can set d column equal to d row.
11:19 - Actually, sorry set d column equal to the temp of d row and then d row is going to be equal to d column.
11:27 - So the exact logic that we did over there, we just set the row equal to d column
11:32 - we set d column equal to d row negated, but we need to use this kind of temp variable to keep track of it
11:38 - because we're going to overwrite it on line 17, so we need to bring in another constant called temp so we don't overwrite.
11:46 - And then lastly we just need to increment
11:49 - row by the direction of the row that we're trying to go
11:52 - so row plus equals d row which will increment our row in the correct direction and
11:58 - then same thing with column we can just say column plus equals d column which will increment column in the correct direction.
12:06 - So that basically wraps up
12:09 - implementing the solution that we did on the white board in Javascript. You see here at the bottom of the console log
12:13 - it's printing out the correct row where it's all spiralling in a clockwise fashion from 1 to n times n
12:20 - so if you notice it ends at 25
12:23 - and the n that we started with was 5 so 5 times 5 is 25.
12:29 - Yeah, so hopefully this one wasn't too hard if you have your own solution
12:32 - or you have any questions feel free to place something in the comment section below.
12:36 - Just a heads up the next one
12:38 - I'm going to talk about is called
12:39 - talking clock and that is number 321 and I'll put a link to it in the bottom of the description of this video.
12:45 - So if you want to work on that now, and then in a couple days, I'm going to post my solution to that problem.
12:53 - So just a heads up
12:54 - and again be sure to like and subscribe to freeCodeCamp and this video if you thought this is a good tutorial
13:00 - Alright stay tuned for the next video. Thanks for watching.