00:00 - yeah
00:03 - [Music]
00:09 - everyone thanks so much for coming out
00:11 - today my name is Wes vos I come all the
00:14 - way from Canada I did actually grow up
00:16 - learning French so if you want to try to
00:19 - talk to me in some french-canadian I
00:21 - might be able to understand here today
00:23 - I'm going to talk to you about a sink
00:25 - await and the reason why I want to talk
00:27 - to you about yes thank you somebody
00:29 - laughed at that joke can we just take a
00:32 - second to appreciate my hilarious joke
00:34 - thank you thank you I want to talk to
00:37 - you about a sink away today because flow
00:38 - control in JavaScript it's really hard
00:41 - so how many of you show of hands how
00:43 - many of you are using promises in your
00:45 - code date today right now okay cool
00:47 - quite a bit I'm gonna go go quick review
00:49 - through promises just because this is
00:50 - the foundation of a sink away promises
00:53 - in JavaScript are sort of like an IOU
00:55 - for something that's going to happen at
00:57 - some point in the future so this could
01:01 - be an ajax call returning data this
01:04 - could be accessing a user's web cam once
01:06 - they hit the allow button on the little
01:09 - pop-up that shows it could be resizing
01:11 - an image the point is that all of these
01:13 - things take time and with promises we
01:16 - simply kick off the process and then we
01:18 - move along with our lives we only come
01:20 - back to that thing when we need to to
01:24 - deal with the data so but why do we do
01:26 - it this way in JavaScript and that's
01:28 - because JavaScript JavaScript waits for
01:31 - nobody
01:31 - it's simply everything in JavaScript is
01:35 - a synchronous meaning that we kick off
01:37 - the process and we come back to it when
01:40 - we have to deal with the data or deal
01:42 - with the response so let's relate this
01:43 - to real life something that maybe you
01:45 - did this morning which you you want to
01:47 - make coffee you want to drink your
01:48 - coffee you want to cook your breakfast
01:50 - and you want to eat breakfast would it
01:52 - make sense to finish making coffee
01:54 - before you can even start cooking your
01:56 - breakfast would it make sense to make
02:00 - the coffee drink the coffee and then
02:02 - once you're done then you can go ahead
02:04 - and and start making your breakfast no
02:06 - that doesn't make sense we want to
02:08 - really just kick off the process of
02:10 - making coffee and then come back to it
02:12 - and deal with the result accordingly so
02:16 - how we sort of dealt with this in the
02:18 - past
02:19 - is something called Christmas tree
02:20 - callback Al and we would write code that
02:22 - looks like this we've all written
02:24 - terrible terrible code that may probably
02:25 - got a little bit more it looks like a
02:27 - Christmas tree if you go on the side
02:29 - what's really cool about that is the
02:31 - promises allow us to start writing code
02:33 - like this where we can run our functions
02:35 - make coffee make breakfast and they
02:36 - return a promise not the data a promise
02:39 - that the data will come at some point in
02:41 - time and then we can use dot then to
02:43 - listen for the data actually coming back
02:46 - we can take it one step further and sort
02:48 - of wrap it in a mega promise by saying
02:51 - promise dot all and that will allow us
02:53 - to wait until both of those things are
02:55 - done until we go forward and deal with
02:58 - the result in this case eat our
02:59 - breakfast and drink our coffee another
03:01 - example let's say we were building a
03:03 - little animation library where we want
03:05 - to do one thing after another well
03:07 - rather than doing the callback hell on
03:09 - the table what we can do is kick off
03:12 - move to which will return a promise and
03:14 - then we can chain our dot vens whereby
03:17 - returning a promise from each subsequent
03:20 - one so this is really exciting because a
03:23 - lot of the new browser api's are being
03:25 - built on promises so we've got fetch or
03:28 - you can fetch your data then that will
03:30 - come back we convert it into JSON and
03:32 - then finally deal with that data at the
03:33 - end of the day we can use a library
03:35 - called Axios which is really exciting
03:37 - where it has some it's like kind of like
03:39 - fetch but it has some really good
03:40 - built-in defaults where we don't have to
03:42 - have that second and then chained
03:44 - although on the one there's many many
03:47 - more browser api's payment requests
03:49 - dealing with credit card data in the
03:51 - browser getusermedia getting access to
03:53 - the web cam web animation api all of
03:55 - these things are being built on standard
03:58 - promises it's really easy to make your
04:00 - own with promises as well so here we
04:02 - have a function called sleep where it
04:04 - takes in the amount and the way I
04:05 - promise works is immediately you return
04:07 - a promise and then what you do inside of
04:10 - that promise is you either resolve it
04:12 - when things went well or you reject it
04:14 - when things didn't go well so in this
04:16 - case after 500 milliseconds we're going
04:18 - to resolve it with some data or if it's
04:21 - less than 300 milliseconds I'm going to
04:23 - reject it because that's too fast and
04:25 - what that will allow us to do is a
04:27 - little bit something like this where we
04:28 - can write our code and then we can chain
04:31 - and then then on it and by returning a
04:34 - new promise from each one we're allowed
04:35 - to keep going and chaining that code
04:38 - along the way look at it promises are
04:41 - really really great but the then I'm not
04:47 - happy with it right it's still kind of
04:49 - callback II and any code that needs to
04:52 - come after the final promise it all
04:56 - still needs to go into that final dot
04:59 - then it can't just be top level in your
05:01 - current function this is where a sync
05:03 - awake comes in is sort of saves the day
05:06 - a sync oh wait is still based on
05:08 - promises but it's just a really nice new
05:11 - syntax for working with it so we looked
05:13 - at this example earlier we went from
05:14 - callback to promise based well what we
05:17 - can do now if you look at the bottom
05:19 - here is we can simply make a function by
05:21 - tagging with a sync and then inside of
05:23 - that we simply put the awake keyword in
05:26 - front of each of those functions and
05:27 - that will simply sort of pause the
05:30 - function from running it will wait until
05:32 - that promise resolves until it moves on
05:34 - to the next line of code no thenns no
05:37 - callbacks needed so let's break it down
05:41 - javascript is almost entirely a
05:43 - synchronous non-blocking we talked about
05:44 - that is great that we can create these
05:48 - experiences without having to lock up
05:50 - the browser whenever we do anything but
05:52 - it's hard to read it's sort of hard to
05:54 - author this code so if we look at PHP if
05:56 - we're not using any threads or anything
05:58 - we wanted to go ahead and fetch two
06:00 - things from github what we would do is
06:02 - we would fetch the first one and when
06:04 - that comes back we would fetch the
06:05 - second one and then when that comes back
06:07 - we have both pieces of data and we can
06:09 - go ahead and use them reads really nice
06:11 - top to bottom
06:12 - not so great because why am I waiting
06:14 - for Wes to come back before I go off and
06:17 - fetch the Scott in JavaScript what we
06:20 - can do is we can put both of those
06:21 - promises into variables and then wait
06:24 - until both of them come back they can
06:26 - both fire off one after another and then
06:29 - we can wait for both of them come back
06:30 - and then we can use the data by creating
06:33 - some HTML and displaying it on the page
06:35 - so the PHP is kind of easier to read but
06:41 - the JavaScript is more performant
06:43 - because we're not like waiting on
06:44 - unnecessary things to finish but I'm not
06:47 - really happy with either so a sink away
06:50 - gives us synchronous looking code
06:52 - without the downside to actually writing
06:54 - synchronous code so how does it work
06:57 - first thing we need to do is mark our
06:59 - function as a sink so you still keep
07:01 - your regular promise functions nothing
07:03 - changes with your functions that we
07:05 - return a promise what we do now is we
07:08 - create an a sync function by writing the
07:10 - word a sink in front of it then when
07:12 - you're inside of an a sync function you
07:14 - simply just await things inside of it so
07:17 - you can either just await the sleep
07:19 - function and that will just wait until
07:21 - it the promise resolves or if you care
07:23 - about what's coming back from that
07:25 - promise maybe it's some data from an API
07:27 - then we can store that in a variable so
07:31 - really it's it's the best of both worlds
07:32 - let's take a look at another example
07:34 - here so in this case I'm sticking it
07:38 - into a variable and that's another way
07:39 - that we can write it and here I'm doing
07:42 - the PHP thing where I await Axios yet
07:44 - and then when that comes back I'm going
07:47 - to await the second Axio second that's
07:50 - kind of slow we don't want to do that
07:51 - right so what we can do is we can simply
07:55 - await promise dot all and by passing
07:58 - promise that all our other two promises
08:00 - we sort of make one big mega promise
08:03 - that we can await for both of them to
08:05 - finish so one takes one second one takes
08:07 - two seconds it's going to wait the full
08:08 - two seconds before we go on to the next
08:10 - line of code now that's great but if
08:15 - you've ever seen any examples online the
08:17 - error handling starts to ugly it up so
08:20 - let's look at a couple options that we
08:22 - can use for actually working with error
08:24 - handling first option for error handling
08:27 - is just don't write bad code and you
08:30 - don't have to handle errors I'm joking
08:33 - guys don't actually do that you always
08:35 - have to handle your actual errors really
08:38 - the first option is and this is probably
08:39 - likely what you have seen online if
08:41 - you're looking at any examples it's use
08:43 - a try/catch so just wrap everything in a
08:46 - try-catch and you're gonna be nice and
08:48 - safe and the way that that looks is you
08:50 - have your sync function you give
08:52 - yourself a try write all your code
08:54 - inside the try and then if anything
08:56 - happens inside of that try
08:58 - you catch the error in your catch and
09:00 - you deal with it accordingly second or
09:04 - third option is a higher-order function
09:06 - where which is kind of cool because you
09:09 - can chain a dot catch on a sinc
09:12 - functions so this is a little bit more
09:14 - complicated you might have to come back
09:15 - to these slides and look at it but let's
09:17 - walk through an example so I've got a
09:19 - function Yolo
09:20 - where I don't care about error handling
09:23 - in this function I'm gonna assume
09:24 - everything works great then I'm going to
09:27 - await something that maybe gives me a
09:29 - 404 and is going to break because no
09:32 - data came back this could be a syntax
09:33 - error this could be any error that Axios
09:36 - might throw you then this is where it
09:39 - gets a little bit hairy so stay with me
09:40 - will you create a high order function
09:43 - called handle error that takes as an
09:46 - argument the actual function and then
09:48 - from that you return a new function so
09:52 - you basically just return the same
09:53 - function but with a catch tagged on to
09:56 - the end and the catch that's tagged on
09:59 - to the end that's where you actually
10:00 - handle your error if you're a hotshot
10:04 - and you're using es6 for absolutely
10:07 - everything you can do it in one line and
10:09 - then tweet about how cool you are
10:11 - but I still don't understand exactly how
10:15 - all of that works so the way it actually
10:17 - works right we created our one function
10:20 - that had no error handling and then we
10:21 - created this weird high order function
10:22 - that takes in the function and returns a
10:24 - new one then what you do is you just
10:26 - pass your unsafe function to handle
10:29 - error and that will sort of create the
10:32 - new function that still does the same
10:34 - thing but it's now a little bit safer
10:36 - and able to actually handle any errors
10:38 - that might happen inside of that
10:40 - function and this is I've myself I find
10:43 - this extremely handy in note and Express
10:45 - how many of you write Express Apps hands
10:48 - up okay probably about half of you so
10:50 - let's say we've got an orders page and
10:53 - when you hit the orders page we want to
10:55 - find the how are the orders for the user
10:57 - right so if there were no orders let's
11:01 - let's throw an error but this could be
11:02 - any type of error syntax or whatever now
11:05 - normally in Express you need to call
11:08 - next and pass the error too next right
11:12 - but and then what would happen is that
11:14 - route would not render it would pass it
11:17 - along your middleware line and then at
11:19 - the bottom of your middleware Express
11:21 - would render out an error page with the
11:24 - subsequent error code and error message
11:27 - but that's good but it doesn't really
11:30 - cover errors that we throw you have to
11:32 - explicitly call next for that to work
11:35 - it doesn't handle unexpected errors or
11:38 - syntax errors or database connection
11:40 - errors or anything else that has
11:41 - happened along the line of your
11:43 - middleware so what we need to do here is
11:46 - we need to catch all of our errors and
11:48 - pass them along to the next function we
11:51 - want to pass any error and pass it along
11:53 - to the next function so this is where
11:55 - our higher-order function comes in so
11:57 - I'm going to create another one of those
11:59 - weird functions that takes in the
12:01 - function and returns a new one but in
12:03 - this case I'm just going to return the
12:06 - regular request response next function
12:08 - and chain a dot catch onto the end and
12:12 - the dot catch all it does is calls next
12:15 - with the with the error that gets put
12:17 - along to it again if you're a hotshot
12:19 - there's an error there's one there you
12:21 - can do in an arrow function now this is
12:23 - how we implement it we've got our catch
12:25 - errors function then we write all of our
12:27 - routes or all of our controller
12:29 - functions without any error handling in
12:31 - it and then you can take your controller
12:34 - get orders and pass it to catch errors
12:37 - and that's really really nice because
12:39 - you can write all of your routes without
12:41 - having to worry about specifically
12:44 - handling the error in the exact same way
12:46 - and then you can just wrap each of your
12:48 - routes in this catch errors function the
12:53 - fourth option is handle the error when
12:55 - you call it so sometimes you do want to
12:57 - handle the error when you call it
12:59 - because you say oh this is a special
13:01 - case if there's an error here I need to
13:03 - handle it in a different way so it's
13:06 - pretty simple you make your a sync
13:07 - function called load data and maybe an
13:09 - error happens and that when you call it
13:11 - you can just chain a dot catch on to the
13:14 - end and then deal with the error however
13:16 - it is that you'd like to do that fifth
13:20 - option this is really important if
13:21 - you're writing node node will soon exit
13:24 - the process
13:25 - if your promise is rejected meaning that
13:29 - if you have any code that doesn't handle
13:32 - an error on a promise the entire process
13:34 - will exit and then that could mean your
13:36 - app actually goes down so pretty simple
13:39 - you just listen for the unhandled
13:41 - rejection event and then when that
13:45 - happens you can deal with it accordingly
13:47 - probably send it off to some sort of
13:50 - error handling service so that you can
13:51 - log it and deal with it in your in your
13:54 - code so I'm really really excited about
13:57 - a sync oh wait
13:59 - I was excited about promises but now
14:00 - that a single wait has come around it's
14:03 - it's been a while since something
14:04 - fundamentally changed the way that I
14:06 - owed my JavaScript and I code my flow
14:09 - control I was using a cinco cinco de ask
14:11 - the library for a long long time which
14:14 - still has a lot of really good use cases
14:15 - but a lot of my regular flow control has
14:18 - moved over to using a sync away so
14:21 - here's a couple tips for starting today
14:23 - first write your api is in promises so i
14:27 - know that we can't go and change all of
14:30 - our existing code that is likely
14:32 - callback based or maybe you used another
14:34 - promise library but you can write your
14:37 - new api's in promises and you can
14:40 - resolve and reject from them use a sink
14:43 - a wait for flow control as we've shown
14:44 - you today convert older api's with
14:48 - promise a PHY so there's a bunch of
14:50 - different libraries out there and node
14:52 - even now ships with something on the U
14:54 - tillage which will allow you to take any
14:57 - standard call back based function where
14:59 - the error comes first in the callback
15:01 - comes second you can just convert that
15:03 - to return a promise
15:05 - rather than having a call back and
15:08 - that's really nice because if you're
15:10 - dealing with any older API where you're
15:11 - doing less a library that's called back
15:13 - base you can still use it with a sink oh
15:15 - wait finally choose an error handling
15:18 - strategy take a look at the ones that
15:20 - I've explained here you'll probably need
15:22 - one or two of them for your actual
15:24 - application and and implement them into
15:27 - your actual application so I want to
15:30 - encourage you give a sink a wait a shot
15:32 - I'm really excited about it I think
15:33 - that's really going to change that the
15:35 - way that you build your application
15:36 - thank you so much
15:38 - [Applause]
15:44 - [Music]
15:45 - [Applause]
15:47 - [Music]