00:00 - in my previous video on binary search
00:02 - trees I covered all the basic concepts
00:05 - so definitely check that one out if you
00:06 - haven't seen it yet in this video I'm
00:09 - going to talk about finding the tree
00:11 - height and tree traversal height in a
00:14 - tree represents the distance from the
00:16 - root node to Any Given Leaf node so if
00:19 - you look at this example over here the
00:20 - root node is nine that's height zero but
00:23 - if you see four and 17 here that's
00:25 - height one 36 and
00:28 - 22 height two
00:30 - 5 7 and 20 are height three so it's the
00:34 - distance from the root node to the leaf
00:36 - nodes they're kind of like layers of a
00:38 - cake and that's how you're going to
00:39 - count them different paths in a highly
00:42 - branched tree structure may have
00:43 - different heights but for a given tree
00:46 - there will be a minimum height and a
00:48 - maximum height and if the tree is
00:50 - balanced these values will differ at
00:52 - most by one so before I show you the
00:56 - code to implement those things I'm going
00:57 - to show you the use of the code we're
00:59 - going to go all the way down to the
01:01 - bottom where we create a new binary
01:04 - search tree and then we add all these
01:07 - values which the those values there are
01:09 - the same values as in the picture over
01:11 - here we're going to find the Min height
01:13 - we're going to find the max height and
01:14 - we're going to check if it's balanced
01:16 - let's just comment out these now so it's
01:18 - showing the Min height is one in the
01:19 - console the max height is three and it's
01:22 - not balanced the Min height is the
01:25 - distance from the root node to the first
01:28 - Leaf node with without two
01:31 - children so if you look on here 17 is a
01:35 - root node without two children it has a
01:37 - right child but it doesn't have a left
01:39 - child so the minimum height you start at
01:42 - at the root node which is zero and then
01:44 - you count to the next level which is one
01:47 - so the Min height is one now the max
01:50 - height is just the distance from the
01:53 - root node to whatever the the most
01:55 - bottom node is so 5 7 and 20 are all at
01:58 - the max height so 0 1 2 3 so the max
02:04 - side is three now this tree is not
02:07 - balanced because remember if a tree is
02:09 - balanced the values between the Min
02:11 - height and the max height will be at
02:13 - differ at most by one you can see that
02:16 - there's a missing number here the reason
02:18 - why this tree is not balanced is because
02:20 - there's no number here to the left of
02:23 - 17 but if I uncomment out this code here
02:28 - we're going to add 10 now 10 if you see
02:31 - when it's being added it's going to add
02:34 - to the left of 17 because it's more than
02:36 - 9 but it's less than 17 so the 10 will
02:39 - fill this spot right here and then we're
02:41 - going to find the Min height the max
02:42 - height and then check if it's balanced
02:44 - again okay so now the Min height is two
02:49 - and the max height is three the Min
02:51 - height is going to be either this three
02:53 - or the 10 that we just added it's not
02:55 - showing up in the picture but just
02:56 - imagine there's a 10 right here so we
02:58 - have zero one and then the Min height is
03:02 - this level right here because this is
03:04 - the first level that there are no
03:07 - without two children if you imagine
03:09 - there's a 10 right here so that's two
03:12 - and then three is down here right now is
03:15 - balanced is true the difference between
03:18 - the Min height and Max height is at most
03:21 - one so it's going to have to be either
03:22 - zero or one to be balanced when a tree
03:26 - is balanced then searching through it is
03:29 - much more efficient we're not going to
03:31 - cover this in this video but there are
03:33 - ways that you can make a tree
03:35 - automatically balance itself when you
03:37 - add new items and when you delete items
03:39 - this creates greater efficiency when
03:41 - searching the tree okay now we're going
03:43 - to look at these last lines I have
03:45 - commented out here this these are ways
03:48 - to Traverse the tree tree traversal
03:51 - methods can be used to explore tree data
03:53 - structures and basically find all the
03:56 - values in the tree in depth first search
03:59 - a given sub trees explored as deeply as
04:01 - possible before the search continues on
04:04 - another subtree uh when I show you an
04:06 - example it will that will make more
04:08 - sense but there's basically three ways
04:09 - that this can be done there's in order
04:12 - traversal pre-order traversal postorder
04:14 - traversal and this last one I'm going to
04:17 - talk about later this level order
04:19 - traversal so let me run this and then
04:22 - I'm going to explain it so here you look
04:24 - at the bottom of the console and you can
04:26 - see what we what we've logged
04:28 - here for in order traversal you're going
04:31 - to begin the search at the leftmost node
04:34 - and end at the rightmost node so you can
04:36 - see this this just has all the numbers
04:38 - in order 3 4 5 6 7 9 10 17 20 22 those
04:43 - are just all these numbers in order
04:44 - you're going to begin at the leftmost
04:46 - node and you're going to add all the
04:48 - numbers in order now pre-order traversal
04:51 - you're going to explore the root nodes
04:54 - before the leaves so let's look at this
04:57 - I'm going to read off these numbers down
04:59 - here and I'm going to show up on the
05:02 - picture where they are in the picture so
05:04 - we're looking at the root nodes first in
05:06 - the list nine is first that's a root
05:08 - node then four that's a root node then
05:11 - three and the next new is going to be
05:13 - six and then five and then seven then 17
05:18 - and then 10 which we don't have on this
05:20 - picture then 22 then 20 so the pre-order
05:23 - focuses on the root nodes first and then
05:25 - adds the nodes below that the post order
05:27 - explores the leaf nodes before for the
05:29 - roots so look at this one the first node
05:33 - on the list is three cuz it's a leaf all
05:35 - the way down and then we have five CU
05:38 - that's a leaf note then we have seven
05:40 - and then we're going to go to Six we're
05:42 - not going to hop over to 20 over here
05:44 - because that's on a completely different
05:45 - branch of the tree you have to finish
05:47 - all the leaf nodes on one branch before
05:49 - you go to the next Branch so after six
05:51 - is four now is where we jump over the
05:53 - the leaf nodes on the next branch and we
05:55 - use 10 which again is not on the picture
05:58 - then 20 then 22 then 17 then 9 this
06:02 - level order is called a Breet first
06:04 - search this explores all the nodes in a
06:06 - given level within a tree before
06:08 - continuing on to the next level first
06:11 - it's going to do level zero which is
06:13 - nine if you see these numbers down here
06:15 - and the next is next is going to show
06:17 - four and
06:19 - 17 then 3 6 22 then 5
06:23 - 720 so let's go over the code so first
06:27 - we're going to go over the code for the
06:28 - man height and the F maxide and the is
06:31 - balanced so the is balanced is pretty
06:34 - simple because you just call these
06:36 - functions that I haven't talked about
06:37 - yet but you're going to call find Min
06:39 - height and see if that's less than or
06:42 - equal to find Max height minus one so
06:46 - this is going since this is a a
06:49 - conditional statement it's going to
06:50 - return true or false so as an example if
06:54 - you remember before we added the 10 we
06:57 - had the Min height of one and the max
06:59 - height of three if this Max height is 3
07:03 - 3 - 1 is 2 so is 1 less than or equal to
07:07 - 2 no false so we know that the tree is
07:10 - not balanced we have false right here
07:12 - but then we run it again down here and
07:15 - the max height is three and the Min
07:18 - height is two if we do 3 Min - 1 that's
07:21 - going to be two so now we have is 2 less
07:25 - than or equal to 2 yes so we're going to
07:28 - return true true so that's how we're
07:30 - going to find out if it's balanced now
07:32 - let's look at find Min height this is
07:34 - going to be a recursive function you can
07:37 - pass in a node but if you don't pass in
07:38 - a node it's going to set the node to the
07:40 - root node here and then it's going to
07:42 - check if the node is null and return
07:44 - negative 1 if you haven't added anything
07:46 - to the binary search tree it's going to
07:48 - return Nega -1 for the height we're
07:50 - going to set the left and right to
07:52 - calling the find men height on node.
07:55 - left and find men height node. right so
07:58 - this is where the function becomes
07:59 - recursive eventually one of these two is
08:02 - going to be NE -1 because the left or
08:05 - right node is going to be null so here
08:09 - we are going to add one to the left if
08:12 - left is less than right and we're going
08:14 - to add one to the right else so if right
08:17 - is less than left and for five find Max
08:21 - height it's it's the opposite so instead
08:23 - of having the less than here we have the
08:25 - more than here so here we're going to
08:27 - return left plus one as if left is more
08:29 - than right else return right + one feel
08:33 - free to check the code in the
08:34 - description to play around with this
08:37 - yourself the in order pre-order and
08:39 - postorder there's a lot of similarities
08:41 - to the code so let's look at the in
08:43 - order traversal first um the only thing
08:46 - that's going to be different in each of
08:48 - these uh in order pre-order and
08:50 - postorder are these three lines and the
08:53 - only thing that's going to be different
08:54 - in those three lines is the order of the
08:56 - lines so for all of them we're going to
08:59 - check if the root is null and return
09:01 - null this just to check if there's even
09:03 - a binary search Tre that exists or if
09:05 - there's any values in it so if we find
09:07 - out that there is a binary search tree
09:10 - we're going to do these things we're
09:11 - going to create a new array of the
09:13 - result and we're going to add each value
09:15 - in the the in the tree onto the result
09:18 - so we're going to create this function
09:21 - Traverse in order function and you can
09:23 - see down here we're going to call that
09:25 - function and pass in the root node and
09:27 - then after the function has been run
09:29 - you're going to return the result so
09:31 - inside this function it's going to be
09:34 - recursive and remember these three lines
09:36 - are the only thing different between in
09:38 - order pre-order and post order it's
09:40 - going to change the order that we check
09:43 - things so in order we are going to first
09:47 - do this line so this right here is short
09:51 - circuit evaluation whenever JavaScript
09:54 - evaluates the and operator like this if
09:58 - the first thing is true it will also run
10:02 - the second command if the first thing is
10:05 - not true it will not run the second
10:08 - command check my video on shortcircuit
10:10 - evaluation to find out more about that
10:13 - so if no do left is true that means if
10:17 - no do left exists then we are going to
10:21 - run the TR Traverse in order function on
10:24 - node. left and that just calls the same
10:27 - function again and passes in no left
10:30 - then we're going to push node. data so
10:33 - we're going to push the value in that
10:35 - node onto the result array and then we
10:39 - are going to check if node. write exists
10:42 - if it does we are going to call the
10:45 - Traverse in order function on node.
10:47 - write and if we look down here like
10:50 - remember I said that just these three
10:51 - lines are different so in pre-order it's
10:53 - going to push first and then it's going
10:56 - to call the function on node. left and
10:59 - then it's going to call the function on
11:00 - node. right in post order it's going to
11:04 - call the function on node. left then
11:06 - call the function on node. right and
11:08 - then push the data so just the order
11:10 - that we call these commands is going to
11:13 - change the order of how we get the
11:16 - result when traversing the tree again
11:18 - you can check that code and play around
11:20 - with until you can figure out exactly
11:22 - how it works I'm going to go down to the
11:24 - level order function in this method we
11:27 - start by adding the root node to que
11:30 - then we begin a loop where we DQ the
11:32 - first item in the queue add it to a new
11:35 - array and then inspect both its til
11:37 - subtrees if its children are not null
11:40 - they are each in cued this process
11:43 - continues until the queue is empty we
11:45 - are creating a result array that we are
11:47 - eventually going to return now here's
11:50 - just the the Q array this is just a
11:53 - temporary array that we're using that
11:55 - we're eventually going to put things off
11:57 - that array onto our result if this. root
11:59 - is not null if there actually is a
12:01 - binary search tree we're going to push
12:04 - the root node onto Q This is a y Loop so
12:07 - it's going to continue going through
12:09 - this until we've actually added all the
12:12 - all the elements from the tree so while
12:15 - Q is q. length is more than zero we're
12:17 - going to keep doing these things so
12:19 - first we're going to let node equals q.
12:21 - shift now shift just takes off the first
12:25 - element in the array and returns that
12:27 - element so we're g to put the root node
12:30 - into node because it started out as the
12:33 - root node and now Q is not going to have
12:35 - that root node on it anymore and we're
12:38 - going to push node. data onto that
12:41 - result so we just pushed nine onto the
12:44 - result and if you remember um nine is
12:47 - the first thing in the the level order
12:49 - result now if no do left does not equal
12:52 - null we are going to push node. left
12:54 - onto the Q and if node. right does not
12:56 - equal null we're going to push node.
12:58 - right on to the the queue and then then
13:01 - we're going to go back through the while
13:03 - loop we're going to take off the first
13:05 - node and put into node which remember is
13:07 - going to be no do left that we push on
13:09 - here and we are going to push that value
13:12 - to the result so we're going to push
13:13 - four to the result and now we're going
13:16 - to push node. left and we're going to
13:19 - push node. right so in the Q we're now
13:21 - going to have three and six but when we
13:23 - go back through the while loop and we
13:26 - shift off an Element even though we
13:28 - added three and six in the last
13:30 - iteration of the loop the node that
13:32 - we're shifting off is going to be 17
13:35 - because shift is going to take the first
13:37 - item of the array off and three and six
13:40 - are at the end of the array so then it's
13:43 - going to get that value and so on it's
13:45 - going to keep going through this until
13:47 - it's gotten every value from the tree
13:50 - okay and this concludes my video about
13:53 - height and traversing trees thanks for
13:55 - watching my name is Bo KS don't forget
13:58 - to subscribe and remember use your code
14:00 - for good