00:00 - this Linux course covers a wide range of
00:02 - essential Linux topics from beginner to
00:04 - Advanced the course also includes
00:06 - interactive labs to provide hands-on
00:09 - experience with the skills you'll learn
00:11 - Linux specialist Aaron Locker created
00:13 - this course in this course Aaron teaches
00:15 - you the basics of the Linux operating
00:17 - system including how to log into a host
00:19 - through a local remote console how to
00:22 - read and use system documentation how to
00:24 - work with files and directories how to
00:26 - create and manage hard and soft Sim
00:28 - links lists set and change file
00:30 - permissions he search fil with grep how
00:33 - to analyze text with regular expression
00:36 - how to manage user accounts and how to
00:38 - manage resources also and then how to
00:40 - manage user access privileges as well as
00:42 - access to the root account which is kind
00:44 - of the primary account of the system
00:46 - this course is about 2 hours of video
00:48 - and 2 hours of Hands-On lab time by the
00:51 - end of this course you should aim to get
00:53 - a high level understanding of Linux and
00:55 - not just the theory but also the
00:57 - experience with the Hands-On practice
00:59 - now each concept taught in this video is
01:02 - followed by a Hands-On lab our labs open
01:05 - right up in your browser and it comes
01:07 - absolutely free with this course so
01:09 - there's no need to spend any time on
01:11 - setting up your own environments you go
01:13 - from watching a video to practicing it
01:15 - in less than 30 seconds the labs are
01:18 - challenge based and so each lab is
01:20 - specifically designed to help you
01:21 - practice the concepts that you just saw
01:23 - in the video so here's how I recommend
01:25 - that you take this course set aside 4
01:28 - hours of time for this entire video and
01:30 - course turn off the notifications on
01:32 - your mobile phone turn off any desktop
01:35 - notifications like slack email Discord
01:37 - or any other distractions and just get
01:39 - into that focus zone make sure you are
01:42 - ready to block out a few hours of your
01:43 - time and aim to stick to the curriculum
01:46 - in labs in order to finish the
01:48 - course so before we begin head over to
01:51 - this link to download the deck with
01:54 - notes used in this course and to access
01:56 - the labs that come free with this course
01:59 - go to code. Wiki so k o DWI
02:03 - Ki SL Linux
02:06 - dlabs or scan the QR code that you see
02:09 - on the screen once you are on the page
02:12 - click on the button to enroll for free
02:15 - the first topic has the deck with the
02:17 - resources that you can download and this
02:19 - is Handy to keep while you're working on
02:21 - the labs so that you can use it for
02:23 - reference the remaining topics are the
02:26 - labs so select a topic and click the
02:29 - start button and that's going to load
02:30 - the lab in your browser but you don't
02:33 - have to start them now we'll let you
02:35 - know when to access which Labs so enroll
02:38 - in the labs download the deck and then
02:41 - come back here to continue the
02:44 - course hello and welcome to code Cloud's
02:47 - Linux tutorial I'm aarin lockart and
02:50 - I'll be your instructor for this
02:53 - course as for stack overflows insights
02:56 - the most common and the most loved
02:57 - platform used for development work
02:59 - happen Happ s to be
03:01 - Linux here's what you'll learn in this
03:04 - course log into local and remote
03:06 - graphical and text mode consoles read
03:08 - and use system documentation create
03:12 - delete copy and move files and
03:14 - directories create manage hard links and
03:17 - soft links list set and change standard
03:20 - file permissions use pagers in the bi
03:23 - editor search files using grep analyze
03:27 - text using basic regular expressions and
03:30 - extended regular Expressions create
03:33 - delete and modify user accounts local
03:35 - groups and group memberships configure
03:38 - user resource limits manage user
03:40 - Privileges and how to manage access to
03:42 - the root
03:45 - account this is primarily a Hands-On
03:47 - course with interactive videos and Labs
03:50 - that will help you learn
03:53 - Linux our crisp and concise lectures
03:56 - simplify complex Concepts using
03:58 - illustrations and animations other
04:00 - concepts are explained by demonstration
04:02 - videos these will be live demonstrations
04:05 - where I will walk you through a task or
04:07 - a concept with a video
04:10 - example and of course you have access to
04:13 - Labs where you can get Hands-On practice
04:15 - on everything we teach since you'll be
04:17 - learning to perform tasks a system
04:19 - administrator would normally perform
04:21 - you'll need to get practice so it's
04:22 - important that you spend time working
04:24 - with the labs for the course our
04:26 - Hands-On labs open right in your browser
04:29 - so you won't need to set anything up for
04:30 - yourself to practice each lab will have
04:33 - a series of questions or exercises and a
04:35 - terminal for you to perform the
04:37 - necessary tasks there are also hints and
04:40 - Solutions in case you get stuck but
04:42 - always try to work out the solutions for
04:44 - yourself you'll get instant feedback
04:47 - from the lab system when you check your
04:48 - answer and you can work with the lab as
04:51 - many times as you want for each set of
04:53 - lessons until you're comfortable with
04:55 - performing the tasks before moving on to
04:57 - the next set of lessons well I'm excited
05:01 - to get
05:05 - started in this lecture we'll talk about
05:07 - how to log into a Linux system locally
05:09 - and remotely in both graphical and text
05:12 - mode consoles this will be a very
05:15 - practical course we'll take a look at
05:17 - why we need to do certain things then
05:19 - we'll explain how to do those things
05:22 - we'll experiment with a few commands at
05:23 - the beginning of each lesson then we'll
05:25 - explain the theory behind those commands
05:28 - this should make the course more fun
05:30 - engaging and easier to
05:33 - understand so let's Dive Right In and
05:36 - start with some simple Concepts we're
05:38 - all used to logging into apps or
05:39 - websites by providing a username and
05:41 - password logging into a Linux system is
05:44 - pretty much the same so there's not much
05:46 - mystery here we'll look at four ways to
05:48 - log in logging into a local Linux system
05:51 - using the local text mode console
05:54 - logging into a local Linux system using
05:56 - the graphical mode console logging into
05:59 - a remote Linux system using a text mode
06:01 - login and logging into a remote Linux
06:04 - system using a graphical mode
06:07 - login you'll often hear terms like
06:09 - console virtual terminal and terminal
06:12 - emulator it may be hard to understand
06:15 - why they're called this way nowadays a
06:18 - console is just a screen where your
06:20 - operating system displays some text and
06:22 - where it allows you to log in or type
06:24 - commands and a terminal emulator is
06:27 - nothing more than a graphical app that
06:29 - runs in a window and does a similar
06:31 - thing shows you text output and allows
06:34 - you to type commands these terms come
06:36 - from the old days of
06:38 - computing computers were incredibly
06:41 - expensive so a building may have had a
06:43 - single one available for the entire
06:45 - building but multiple people could
06:47 - connect to it and do their work by using
06:50 - physical devices that allow them to type
06:52 - text and commands and also display on a
06:54 - screen what was currently happening
06:57 - those devices were consoles or ter teral
07:00 - so instead of buying 25 super expensive
07:02 - computers you could have just one but 25
07:05 - people could use it even at the same
07:07 - time nowadays consoles and terminals in
07:11 - lenux are usually things that exist in
07:13 - software rather than hardware for
07:15 - example when you see Linux Boot and a
07:17 - bunch of text appears on the screen
07:19 - telling you what's happening as the
07:21 - operating system is loading that's the
07:25 - console after a Linux machine has booted
07:28 - if you press control alt F2 on the
07:31 - keyboard you'll see a virtual terminal
07:33 - in this case
07:36 - bt2 if you have Linux installed on your
07:38 - desktop with a graphical user interface
07:41 - when you want to type commands you open
07:43 - a terminal
07:45 - emulator let's move back to logins in
07:48 - practice most often you'll log into
07:50 - remote Linux systems but let's start
07:52 - with some less common
07:55 - scenarios local is just a tech word for
07:58 - something that is in front of you or
08:00 - something you can physically access a
08:03 - computer on your desk is a local a
08:06 - server running on Google cloud is remote
08:09 - usually when Linux is installed on
08:11 - servers it's installed without a gooey
08:14 - uh no graphical user interface
08:15 - components there's no mouse pointer no
08:18 - buttons no windows no menus nothing of
08:22 - that sort just text but you might
08:25 - sometimes run across servers that
08:26 - include this goey logging in is super
08:29 - easy as it's all in your face you'll see
08:31 - a list of users you can choose from and
08:34 - you can then type your users password
08:37 - and don't forget to log out when you
08:39 - finished your
08:41 - work if the device has the typical
08:44 - server oriented Linux OS installed
08:46 - without any guey components logging in
08:48 - locally is also easy you'll usually see
08:51 - something like this on your screen
08:53 - there's no list of users this time but
08:55 - you can just type your username and then
08:57 - your password and no note that you won't
09:00 - see your password as you type when your
09:02 - work is done you should type exit to log
09:08 - out again most Linux operating systems
09:10 - running on servers will have no gooey
09:12 - components installed but you'll
09:15 - sometimes run into exceptions connecting
09:17 - to a remote server that has a graphical
09:19 - user interface is slightly more tricky
09:22 - first of all there's no standard set in
09:24 - stone whoever configured that server
09:27 - chose their preferred way of dealing
09:28 - with these remote graphical logins they
09:31 - could have chosen to install a BNC
09:33 - Solution that's virtual network
09:35 - computing in this case you'd need to
09:38 - download the proper VNC client also
09:40 - called a VNC viewer to connect to it
09:43 - this might be tight VNC or real VNC or
09:47 - something else entirely it all depends
09:49 - on the VNC server running on the remote
09:51 - system and which VNC clients your local
09:54 - operating system
09:56 - supports if the administrator of that
09:58 - server wanted to let Windows users
10:00 - connect easily it might mean that they
10:02 - use a solution allowing for RDP
10:04 - connections or remote desktop protocol
10:07 - this means that you could just click on
10:09 - Windows start button and type remote
10:11 - desktop connection open that app and
10:14 - then enter the username and password
10:15 - you've been provided whatever it might
10:18 - be connecting to a remote graphical
10:20 - console is pretty easy it all boils down
10:23 - to downloading the application that lets
10:25 - you do that entering the remote systems
10:27 - IP address followed by a username and a
10:31 - password initiating a text based remote
10:34 - connection to a Linux system is pretty
10:36 - standard that's because almost every
10:38 - Linux server uses the same tool that
10:40 - allows for remote logins the open SSH
10:43 - Damon that's a program that runs in the
10:45 - background on the server all the time
10:48 - SSH comes from secure shell until SSH
10:52 - something called tet was the standard
10:55 - tnet was highly insecure as it did not
10:57 - encrypt communication between you and
10:59 - the server you were connecting to this
11:02 - meant that anyone on the same network
11:04 - with you could steal your Linux user
11:06 - password and see everything you did on
11:07 - that server during your tnet session the
11:11 - SSH protocol uses strong encryption to
11:14 - avoid this and the op SSH Damon is built
11:17 - very carefully to avoid security bugs as
11:20 - much as possible long story short op SSH
11:24 - is used by millions of servers and has
11:26 - stood the test of time proving to be
11:28 - very hard to have
11:30 - for these reasons everybody happily uses
11:32 - it and trusts that it can do a pretty
11:34 - good job at only letting authorized
11:36 - people log into their operating systems
11:38 - while keeping bad people
11:40 - out in case you're following Along on
11:43 - your virtual machine log in locally
11:46 - directly from the virtual machine window
11:48 - and then enter this command that's IP
11:51 - space a you'll see which IP your machine
11:54 - uses I've outlined the information we're
11:57 - looking for in yellow we'll use this IP
12:00 - in our case 1
12:05 - 192.168.0.1 to simulate a situation
12:08 - where we have a server in a remote
12:10 - location now to recap we have an SSH
12:14 - Damon program running on the server this
12:17 - listens for any incoming connections to
12:20 - be able to connect to this remote SSH
12:22 - Damon we'll need something called an SSH
12:25 - client yet another program this client
12:28 - will run on our current laptop or
12:30 - desktop
12:32 - computer Mac OS systems and Linux based
12:35 - operating systems such as Ubuntu already
12:38 - have an SSH client pre-installed if
12:40 - you're on Mac OS or Linux open a
12:43 - terminal emulator
12:44 - window in the past if you were running
12:47 - Windows you needed to install an SSH
12:49 - client like putty on the latest Windows
12:52 - 10 this is no longer necessary as an SSH
12:56 - client is also pre-installed if you're
12:58 - on window Windows click the start menu
13:00 - and type CMD to open up command
13:05 - prompt to connect to a remote Linux
13:07 - system through SSH type
13:11 - SSH space the username you would like to
13:14 - use on the remote Linux system an at
13:17 - symbol and then the IP address of the
13:20 - machine here we have Aaron at1
13:26 - 192.168.0.1 of course replace eron with
13:30 - the actual username you created inside
13:32 - your Linux OS running in the virtual
13:34 - machine and do the same with the IP
13:36 - address from here on we'll stay inside
13:39 - this ss8 session to go through all the
13:41 - exercises in the upcoming
13:47 - lessons here we're going to demonstrate
13:50 - a graphical login for a local machine
13:53 - we're going to demonstrate a remote
13:55 - login using RDP on a remote machine
13:58 - graph L and we'll also demonstrate a
14:01 - text mode login via SSH so to get
14:04 - started we have a Centos svm here
14:07 - already booted up uh so we have the
14:09 - graphical package installed and we'll
14:12 - select our username it's going to be a
14:14 - pretty familiar process the same one
14:16 - that you use at home or on your work
14:19 - computer you'll provide your username
14:22 - after selecting that you'll provide your
14:23 - password and click sign
14:25 - in after a moment it'll load the default
14:29 - operating environment which for C OS is
14:32 - going to be
14:33 - gnome so we can go ahead and log out of
14:37 - that particular
14:39 - session next up I've configured another
14:43 - BM to accept Windows remote desktop
14:47 - connections so you open your remote
14:49 - desktop tool provide the IP address
14:51 - which we already have filled in here and
14:53 - click
14:55 - connect that loads a little bit
14:57 - different uh log in screen it's already
15:00 - pre-populated the username because I've
15:02 - used this before that username is
15:04 - student so we'll provide the password
15:08 - Here click okay that's going to load a
15:12 - remote graphical session using that
15:15 - Windows remote desktop tool you can see
15:17 - the IP address of the machine at the top
15:20 - and while we're here going to go over to
15:22 - activities and select the gnome terminal
15:26 - to open a b a terminal emulator
15:29 - and here we can see that we are student
15:31 - at LF cs- Centos S2 this the host name
15:36 - so here we'll type SSH we're going to do
15:40 - Aaron at
15:46 - 192.168.0.1 which is the IP address for
15:49 - the first client that we logged into
15:51 - using the local login it's going to
15:54 - prompt us for the password which as
15:56 - you'll recall from the lecture video is
15:58 - not going to show anything when we type
16:01 - go ahead and hit enter and now we can
16:02 - see our last login and we'll see that we
16:05 - are Aon at lfcs dentos which was the
16:09 - first host you can go ahead and exit to
16:13 - end your SSH session now you see that
16:17 - we're back as student at lfcs dentos S2
16:21 - we can type exit to close the terminal
16:25 - emulator and then we'll go over and log
16:28 - out
16:34 - there will be many commands we will use
16:36 - in Linux and each command has a lot of
16:39 - command line switches how are we
16:41 - supposed to remember them all as we use
16:43 - a command repeatedly we'll learn
16:45 - everything about it and memorize what
16:47 - each option does but in the beginning we
16:49 - might forget about these options after
16:51 - just one or two uses that's why Linux
16:54 - gives you multiple ways to access help
16:56 - manuals and documentation right at the
16:59 - command
17:00 - line let's say you want to see that long
17:03 - listing format with ls to get a good
17:05 - look at file permissions but you forgot
17:08 - what the correct option was was it- P
17:11 - for permissions we can get a quick
17:13 - reminder with
17:15 - ls-- help this will show us a lot of
17:18 - output but if we scroll up we'll find
17:21 - what we're looking for the DL flag in
17:24 - this case you can see how command line
17:26 - options are sorted alphabetically and
17:28 - described with short text that's why the
17:31 - d-el option per commands will very often
17:34 - be helpful when we forget about these
17:36 - options and we will as there are so many
17:39 - of them preach
17:41 - command d-el will usually show a
17:44 - condensed form of help with very short
17:46 - explanations for LS that's okay as it's
17:49 - a very simple command other commands
17:52 - however are very complex and we need to
17:55 - read longer explanations to understand
17:57 - what they do and how we use them so
18:00 - let's take Journal CTL as an example
18:02 - it's a command that lets us read system
18:04 - logs Journal CTL d-el will show us this
18:10 - notice that this opens in a slightly
18:12 - different way you can take a look at the
18:14 - bottom left corner and you'll see lines
18:16 - 1 through
18:17 - 27 this opened in what Linux calls a
18:21 - pager it's simply a text viewer of sorts
18:24 - that lets us scroll up and down with our
18:26 - arrow keys or page up and page down and
18:29 - to exit this help page we press
18:33 - Q all important commands in Linux have
18:36 - their own manuals or Man pages to access
18:39 - a command's manual enter man followed by
18:42 - the name of the command in our case we'd
18:44 - use man journal
18:46 - CTL so now we get a short description of
18:49 - what the command does in the name
18:51 - section a general Syntax for the command
18:55 - in the synopsis section a detailed
18:58 - description of the command how it works
19:00 - and so on in the description section it
19:02 - could be a detailed description of
19:04 - command line options in the option
19:05 - section and some manual pages even have
19:08 - some examples near the end of the
19:11 - manual sometimes you'll have two manual
19:14 - pages with the same name an example is
19:17 - print app print app is a command but
19:19 - print app is also a function that can be
19:21 - used by programmers manual pages can
19:24 - fall into one of these categories or
19:27 - sections and we can see these by looking
19:29 - at the man page for man Itself by typing
19:32 - man man if you want to read the man page
19:36 - about printf the command you tell man
19:39 - that you want to consult print F from
19:40 - section one like this man one print F if
19:45 - you want to read about print F the
19:47 - function you tell man that you want to
19:49 - look at section three Man 3 print F it's
19:53 - useful to know that during online exams
19:55 - the Linux foundation will let you use
19:57 - man and
19:59 - --el try to use help if you forgot a
20:02 - command line option as that gives you
20:04 - the fastest results diving deep into a
20:07 - manual page will eat up more time but
20:10 - this is all well and good when we know
20:12 - what command we want to explore but what
20:14 - if we can't even remember the name of
20:16 - the command that we need to
20:18 - use imagine you forgot the name of the
20:21 - command that lets you create a new
20:22 - directory how would you search for it
20:25 - opoo is a command that lets you search
20:28 - through Man pages it looks at the short
20:30 - descriptions of each man page and tries
20:33 - to see if it matches the text we entered
20:36 - for example with this line we can search
20:38 - for all Man pages that have the word
20:41 - director in their short
20:43 - descriptions we'll use director and not
20:46 - directory director will match commands
20:49 - that contain the word directory but also
20:51 - ones that contain directories so we keep
20:54 - it more generic this
20:56 - way the first time we run oper propo
20:58 - director we'll get an error that's
21:01 - because opopo relies on a database a
21:04 - program must refresh it
21:06 - periodically since we just started this
21:08 - virtual machine the database hasn't been
21:10 - created yet we can create it manually
21:13 - with sudu man
21:15 - DB on servers that have already run for
21:18 - days there should be no need to do this
21:20 - as it will be done
21:22 - automatically now the opero command
21:24 - should
21:25 - work if we scroll up we can see the ENT
21:28 - that we're looking for which is MK
21:34 - deer but those are a lot of entries it
21:36 - makes it hard to spot what we're looking
21:38 - for you see opero doesn't just list
21:42 - commands it also lists some other things
21:44 - we don't need currently we see stuff
21:47 - like the two in
21:49 - parenthesis that signals that the entry
21:52 - is in section two of the manual pages
21:54 - that's system calls provided by the
21:56 - Linux Kel
21:58 - is to Advan for our purposes commands
22:01 - will be found in sections 1 and 8 and we
22:05 - can tell opao to only filter out results
22:07 - that lead to commands from these
22:10 - sections we do this by using the- S
22:13 - option followed by a list of the
22:15 - sections we need such as oo-
22:19 - s1a 8 director and we can spot what
22:23 - we're looking for more
22:25 - easily so notice how mk's descript
22:28 - contains the word
22:30 - directories if we'd used the word
22:32 - directory in our Opera post search this
22:35 - command wouldn't have appeared since
22:37 - directory wouldn't have matched
22:39 - directories this is something to keep in
22:41 - mind when you want to make your searches
22:43 - as open as possible and match more
22:47 - stuff another thing that'll save you a
22:50 - lot of time is autoc completion for
22:52 - example type system C and then press tap
22:57 - that'll give you system C
22:59 - TL although this is not technically
23:01 - system documentation it can still be
23:03 - helpful many commands have suggestions
23:06 - on what you can type next for example
23:08 - try this type system CTL add a space
23:12 - after the command but don't press enter
23:14 - and now press tab
23:16 - twice you'll get a huge list of
23:19 - suggestions this can help you figure out
23:21 - what your options for that command are
23:23 - although you should not always rely on
23:25 - it it's not necessary that absolutely
23:27 - all options are included in this
23:29 - suggestion
23:30 - list let's do a little more add to that
23:34 - list
23:35 - dasde and then press tab you'll see that
23:39 - indenes will get added to the end and
23:41 - you get system CTL list-
23:45 - dependencies this is tab autoc
23:47 - completion and many commands support it
23:50 - when you press tab once if your command
23:52 - interpreter can figure out what you want
23:54 - to do it will automatically fill in the
23:56 - letters if there are many Auto complete
23:58 - options and it can't figure out which
24:00 - one you want press tab again and it will
24:02 - show the list of suggestions we observed
24:04 - earlier these will be huge Time Savers
24:07 - in the long run and they might even help
24:09 - you in the exam to shave off a few
24:11 - seconds here and there which might add
24:13 - up and let you explore an extra question
24:15 - or
24:17 - two tab suggestions and autoc
24:19 - completions also work profile names or
24:22 - directory names for example try typing
24:26 - LSU and then hitting tab that'll give
24:29 - you SL USR
24:32 - slash now if you do it again so press
24:35 - Tab 2 more times you can see the
24:39 - directories available in SL USR SL
24:42 - without even needing to explore this
24:43 - directory with ls beforehand and if we
24:46 - had a long file name like WordPress
24:49 - archive. tgz we might be able to just
24:52 - type w press Tab and that long name will
24:55 - be autocom completed so here's a
24:57 - recommendation
24:59 - while manuals and d-el pages are super
25:02 - helpful the first few times you use them
25:05 - it might be hard to figure out how to do
25:07 - something with that info alone we
25:09 - recommend you take a command you know
25:11 - nothing about and try to figure out with
25:13 - just man and d-el how to do something
25:16 - with it this practice will help you
25:18 - develop the ability to quickly look for
25:20 - help when you're taking the lfcs exam
25:23 - there will be questions about theory
25:25 - that you either don't know about or you
25:27 - just forgot if you know how to quickly
25:29 - figure out the answer with a man page or
25:32 - d-el you'll be able to pass the exam
25:34 - much more
25:36 - easily it's time to gain hands-on
25:39 - experience with the code Cloud labs this
25:42 - course is designed for you to have a
25:44 - seamless experience from start to finish
25:46 - and that's why we have Labs after each
25:49 - concept that will help you gain hands-on
25:51 - experience on exactly what you learned
25:54 - up until that moment so to begin with
25:56 - we're going to work on an exist
25:58 - Linux host that's already set up and
26:01 - this will help you get familiarized with
26:03 - the Linux operating system the Linux
26:04 - command line interface and it will get
26:06 - your hands dirty to borrow a phrase at
26:09 - the end of this course we'll share
26:11 - instructions on setting up your own
26:13 - local environment for you to continue
26:15 - your studies we do not want you to be
26:17 - distracted with any issues that might
26:19 - come up when you try to build your own
26:21 - Linux system or Linux cluster so my
26:24 - recommendation is to aim to complete
26:25 - this course only using the labs that we
26:28 - provide in the browser and go from start
26:31 - to finish without any Interruption if
26:33 - this is a 2-hour course then you should
26:35 - aim to complete it in 2 or 4 hours at
26:37 - the maximum so head over to the labs
26:40 - using the links given below and come
26:42 - back here once you are
26:53 - done now we'll look at how to create
26:55 - delete copy and move B files and
26:58 - directories and lenux before we dive
27:01 - into this lesson we need to understand a
27:03 - few basic things what is a file system
27:06 - tree what is an absolute path and what
27:09 - is a relative
27:12 - path to list files and directories in
27:15 - your current or working directory we use
27:17 - the ls command in Linux using LS in your
27:20 - home directory might look like
27:23 - this LS comes from list
27:28 - on Linux files and directories can have
27:30 - a name that begins with a DOT an example
27:33 - would be the SSH directory these won't
27:37 - be displayed by a simple LS command they
27:39 - are in a way hidden to list all files
27:43 - and directories even the ones beginning
27:45 - with a DOT use ls- a the- a flag comes
27:50 - from the word
27:53 - all of course to list files and
27:55 - directories from a different location we
27:57 - just type the directory path at the end
27:59 - of Ls like
28:01 - lsbar log or ls-
28:04 - lbar log to list files and directories
28:08 - in a different format called a long
28:09 - listing format that's going to show us
28:11 - more details for each entry like the
28:14 - permissions for a file or directory what
28:17 - user or group owns each entry and when
28:20 - it was last
28:22 - modified we can combine the- a and- l
28:26 - command line options like this either by
28:28 - writing ls-
28:30 - A-L or
28:34 - ls- this will display entries in the
28:36 - long listing format and also so show us
28:39 - the pseudo hidden files and directories
28:41 - which have a name beginning with a dot
28:43 - it doesn't matter which order you put
28:45 - the plags and you don't have to put a
28:46 - dash in front of each of them however
28:49 - the last form is preferred as it's
28:51 - faster to
28:53 - write there's also a command line option
28:56 - DH that show sizes in human readable
28:59 - format like bytes kilobytes megabytes
29:02 - and so on and this has to be combined
29:05 - with the dasl option if we wanted to use
29:08 - all three options we could use ls-
29:12 - a and there we can see all of our
29:14 - previous information but also the human
29:18 - readable sizes like bytes kilobytes and
29:24 - megabytes Linux organizes files and
29:26 - directories in what it calls the file
29:28 - system
29:29 - tree why is it called a file system tree
29:32 - that's because like a tree we'd see in
29:34 - nature this also has a root branches and
29:38 - leaves except linux's file system tree
29:40 - is inverted the root is at the top and
29:43 - its branches and leaves grow
29:46 - downward the root directory is Slash and
29:50 - this is the top level directory there
29:51 - can be no other directories above it
29:54 - under slash there are a few
29:55 - subdirectories like home bar Etsy and so
29:59 - on these subdirectories may also contain
30:02 - other subdirectories themselves to
30:05 - access a file or directory on our
30:06 - command line we must specify its file
30:08 - path or directory path this path can be
30:11 - written in two different
30:15 - ways the easiest to understand is the
30:17 - absolute path slome Aron do/ invoice.
30:23 - PDF is an example of such a path
30:26 - absolute paths always start out with the
30:28 - root directory represented by slash then
30:31 - we specify the subdirectories we want to
30:33 - descend into in this case first home
30:37 - then Aaron then documents and we can see
30:41 - the subdirectory names are represented
30:43 - by a slash finally we get to the file we
30:46 - want to access which is invoice.
30:49 - PDF an absolute path can end with the
30:52 - name of a file but also with the name of
30:54 - a directory if we'd want to refer to the
30:57 - document directory we could specify a
31:00 - path like slome Aon
31:05 - doents to understand a relative path we
31:09 - must first explore what the current
31:10 - directory means this is also called The
31:13 - Working directory to see our current or
31:16 - working directory we can type
31:18 - PWD and that stands for print working
31:22 - directory when we're working at the
31:24 - command line we're always inside of a
31:26 - directory for example example if we log
31:28 - in as a user Aaron on some server our
31:31 - starting directory might be slome Aon
31:35 - and every user starts in its home
31:37 - directory so Jane might have it atome
31:41 - Jane and root the super user or
31:43 - administrator has it at
31:48 - /root to change our current directory we
31:51 - use the CD command and CD stands for
31:54 - change directory so if we entered CD SLB
31:58 - bar/ log that would change our current
32:01 - directory to/
32:03 - barlog and here we used an absolute path
32:07 - but we can also change directories in
32:08 - another way uh for example using cd. dot
32:13 - which would take us one directory up so
32:16 - if we were to CD first into slome eron
32:20 - running cd. dot would take us into slome
32:25 - which becomes the new current directory
32:28 - dot dot always refers to the Parent
32:30 - Directory of our current directory so
32:33 - this was a pretty simple example of
32:36 - using a relative path so let's dive a
32:38 - little
32:44 - deeper let's imagine our current
32:46 - directory is slome
32:48 - Saron with relative paths we can refer
32:51 - to other places in one of three main
32:53 - ways the first is locations under our
32:56 - current directory so for example
32:59 - documents invoice. PDF since we're
33:03 - inhome Erin typing a path like documents
33:07 - invoice. PDF is like typing slome
33:11 - aandd invoice. PDF our relative path
33:15 - gets added to the current directory and
33:17 - we get our PDF
33:19 - file we can also refer to locations in
33:21 - our current directory so typing invoice.
33:25 - PDF will'll access the file at/ homes
33:27 - /ar invoice.
33:30 - PDF we can also refer to locations that
33:32 - are above our current directory typing
33:37 - do.in PDF points to the file atome
33:41 - invoice.
33:42 - PDF since we used do slash we basically
33:46 - said go One Directory up and we can use
33:50 - dot dot multiple
33:52 - times
33:54 - do. invoice. PDF points to the file at/
33:58 - invoice. PDF the first dot dot moved the
34:02 - relative path to home and the next moved
34:05 - it to
34:09 - slash so a few extra tips if you're in
34:12 - SLB barlog currently and you want to
34:15 - move to slash you could run the command
34:18 - CD slash and it will take you to the
34:20 - root
34:22 - directory you can return to your
34:24 - previous working directory with the cd-
34:26 - or CD minus minus command that would
34:29 - take you back to /b
34:31 - barlog so if you're in the SLB barlog
34:34 - directory and you want to return to your
34:36 - home directory which in our case is
34:39 - slome Aaron you'd just use CD by
34:43 - itself CD without any options or paths
34:46 - after it will always take you back to
34:48 - your home
34:51 - directory so let's assume we're in our
34:54 - home directory and we want to create a
34:55 - new file to do this we use Touch for
34:59 - example to create a file named receipt.
35:02 - PDF we would type touch receipt. PDF and
35:07 - this will create it inside the current
35:09 - directory to create it at another
35:11 - location we could use Touch slome Jan
35:15 - re.pdf
35:17 - and since we're inhome Aron we could
35:20 - also use the relative path to create the
35:22 - file inhome Jane by typing touch do
35:26 - dojan SL re.pdf
35:29 - both commands would work the same
35:32 - because all the commands will discuss
35:34 - except both absolute and relative paths
35:37 - so we won't mention these alternatives
35:38 - for each one just know that after the
35:41 - command you can use any kind of path you
35:46 - want to create a new directory use
35:49 - mkd for example mkd receipts mkd comes
35:56 - from make
36:00 - directory to copy a file we use the CP
36:03 - command which is short for copy CP is
36:07 - followed by the path to the file we want
36:09 - to copy which is our source and then the
36:11 - path to the destination where we want to
36:14 - copy it to copy receipt. PDF to the
36:17 - receipts directory we'd use CP receipt.
36:21 - PDF receipts
36:23 - slash notice how we terminated the path
36:26 - to the to the receipts Direct
36:28 - with a slash to make it receipt
36:31 - slash without the slash it would have
36:33 - worked too but it's good practice to end
36:35 - your directories with a slash this way
36:38 - you'll form a healthy habit and get a
36:40 - visual indicator that tells you when
36:42 - receipts without a slash might be a file
36:45 - and receipts with a slash might be a
36:48 - directory to copy receipt. PDF to the
36:51 - receipts directory but also choose a new
36:54 - name for it we could use CPR receipt.
36:58 - PDF receipts receip copy.pdf
37:05 - to copy a directory and all its contents
37:09 - to another directory run the CP command
37:11 - as before but with the dasr option the-
37:15 - R is a command line option they're also
37:18 - called command line flags and that tells
37:20 - CP to copy recursively and that means to
37:23 - copy the directory itself but also
37:26 - descend into the directory and copy
37:28 - everything else it contains like files
37:30 - other subdirectories it may have and so
37:32 - on so for example say I have a lot of
37:36 - directories subdirectories and files
37:38 - under the receipts directory I'd like to
37:41 - back up all the contents into a backup
37:43 - directory named backup of receipts to do
37:47 - this we'd run the command cp-r receipts
37:50 - SL backup of receipts slash this copies
37:54 - all subdirectories and files from the
37:56 - receipts folder into the backup of
37:59 - receipts
38:02 - folder the name you choose for your
38:04 - clone directory must not exist at your
38:07 - destination so for example if we already
38:11 - had a directory at slome aandb backup of
38:17 - receipts then this will just move
38:19 - receipts there and it would end up at
38:23 - documents SLB backup of receipts SL
38:26 - receipts
38:30 - slash so we saw that the copy operation
38:33 - copies a file from one place to another
38:36 - resulting in two copies of the files the
38:40 - original one and the one in the new
38:44 - location but what if we want to move a
38:47 - file from one location to another so
38:49 - that the file is not present in the
38:51 - original location and is only present in
38:54 - the new location
38:57 - for this use the MV command MV stands
39:02 - for
39:03 - move run the command MV receipt. PDF
39:08 - receipt slash to move the file from
39:10 - receipt. PDF to the receipts
39:13 - folder the file is moved and there is
39:16 - only one copy of the file
39:19 - available to rename a file we can use MB
39:23 - re.pdf old receipt. PDF
39:28 - to rename a directory we can use the new
39:31 - name as the destination such as MV
39:34 - receipts SL old receipts slash notice
39:38 - here that you don't need to use the dasr
39:41 - recursive flag when you use MV MV takes
39:45 - care of all of that
39:48 - itself to delete a file we use the RM
39:52 - command RM comes from remove to delete
39:56 - the file
39:57 - invoice. PDF we can use RM invoice. PDF
40:04 - to delete a directory like the invoices
40:06 - directory we' use rm- R invoices slash
40:11 - to make it recursive so once again the-
40:14 - R option makes it recursive deleting the
40:17 - directory along with its subdirectories
40:19 - and files so whenever you copy or delete
40:22 - directories remember to always add the-
40:25 - R option
40:32 - in this lecture we'll look at how Linux
40:34 - manages hard
40:37 - links to understand hard links and soft
40:40 - links we must first learn some very
40:42 - basic things about file systems so let's
40:45 - imagine a Linux computer is shared
40:47 - between two users Aaron and Jane Aaron
40:50 - logs in with his own username and
40:52 - password and Jane logs in with her own
40:54 - username and password this lets them use
40:56 - the same computer but have different
40:58 - desktops different program settings and
41:01 - so on so Aaron takes a picture of the
41:03 - family dog and saves it tohome aonp
41:08 - picturesfamily dog.jpg let's simulate a
41:11 - file like
41:14 - this with this we created a file at
41:18 - picturesfamily dog.jpg and stored the
41:21 - text picture of Milo the dog
41:24 - inside there's a command on Linux that
41:26 - lets see some interesting things about
41:28 - files and directories that's the stat
41:32 - command so here we'll notice an iode
41:36 - number well what is this file systems
41:40 - like xfs ext4 and others keep track of
41:43 - data with the help of iodes our picture
41:46 - might have blocks of data scattered all
41:50 - over the disc but the I node remembers
41:53 - where all the pieces are stored it also
41:55 - keeps track of metadata things like
41:58 - permissions when the data was last
41:59 - modified or last accessed and so on
42:03 - would it be pretty inconvenient to tell
42:04 - your computer hey show me inode 529
42:09 - 46177 so we work with files instead the
42:12 - one called familycore dog.jpg in this
42:15 - case the file points to the iode and the
42:19 - iode points to all the blocks of data
42:21 - that we require and finally we're going
42:23 - to get to what interests us here
42:31 - we notice this in the output of our stat
42:33 - command there's already one link to our
42:36 - iode yes there is when we create a file
42:40 - something like this happens we tell
42:42 - Linux hey save this data under this file
42:45 - name familycore dog.jpg and Linux says
42:50 - okay we'll group all this files data
42:52 - under inode 529
42:55 - 46177 data blocks and iode are created
42:57 - will hardlink the file family dog.jpg to
43:02 - inode 529
43:05 - 46177 so now when we want to read the
43:07 - file we say hey Linux give me the data
43:10 - for familycore dog.jpg and Linux says
43:14 - okay let me see where that inode links
43:16 - to here's all the data you requested for
43:19 - inode 529
43:23 - 46177 so the number shown as links in
43:27 - the output of the stat command is the
43:29 - number of hard links to this iode from
43:32 - files or file names it's pretty easy to
43:35 - understand but why would we need more
43:37 - than one hard link for this
43:41 - data well Jane has her own Bolder of
43:44 - pictures at slome janp pictures how
43:48 - could eron share this picture with Jane
43:51 - the easy answer is just copy slome aonp
43:55 - picturesfamily
43:57 - dog.jpg
43:59 - tohome janp
44:01 - picturesfamily dog.jpg no problem right
44:06 - but now imagine we must do this for
44:08 - 5,000 pictures we would have to store 20
44:11 - gigs of data twice so why use 40 gigs of
44:15 - data when we could just use 20 how can
44:18 - we do
44:19 - that so instead of copying slome aonp
44:24 - picturesfamily dog.jpg
44:27 - to /home janp
44:29 - picturesfamily dog.jpg we could hardlink
44:33 - it tohome janp
44:36 - picturesfamily dog.jpg and the syntax of
44:40 - the command to do that is like this Ln
44:44 - path to the Target path to the link file
44:47 - the target file is the file you want to
44:49 - link with and the link file is simply
44:52 - the name of this new hard link we create
44:55 - technically the hard link created at the
44:57 - destination is a file like any other the
44:59 - only special thing about it is that
45:01 - instead of pointing to a new I Noe it
45:04 - points to the same I node as the target
45:06 - file in our imaginary scenario we'd use
45:09 - a command like
45:11 - lenhome aonp
45:14 - picturesfamily dog.jpg
45:17 - slome janp
45:19 - picturesfamily dog.jpg
45:21 - now our pictures only stored once but
45:24 - the same data can be accessed different
45:27 - locations through different file names
45:30 - and if we were to run the stat command
45:31 - now we'd see the links are now two as
45:35 - the I node now has two hard links
45:38 - pointing to it and another beautiful
45:41 - thing about hard links is this say Aaron
45:44 - and Jane share the same 5,000 pictures
45:46 - through hard links and maybe Aaron
45:48 - decides to delete his hardlink ofhome
45:52 - aonp
45:53 - picturesfamily dog.jpg
45:57 - what will happen to Jane's picture
45:59 - nothing she'll still have access to that
46:02 - data but why because the iode still has
46:06 - one hard link to
46:08 - it before it had two now it has one but
46:13 - if Jane also decides to delete her hard
46:16 - link to the picture atome janp
46:19 - picturesfamily dog.jpg the I node will
46:23 - have zero links to it and when there are
46:25 - zero links the data itself will be
46:27 - erased from the dis the beauty of this
46:30 - approach is that people that share hard
46:32 - links can freely delete what they want
46:35 - without having a negative impact on
46:37 - other users that still need that data
46:40 - but once everyone deletes their hard
46:42 - links to that data the data itself will
46:44 - be erased so data is intelligently
46:46 - removed only when everyone involved
46:48 - decides they don't need it
46:52 - anymore there are some limitations for
46:55 - hard links and lenux
46:57 - you can only hard link to files and not
47:00 - to
47:02 - directories you can also only hard link
47:05 - to files on the same file system if you
47:08 - had an external drive mounted at/ mntb
47:12 - backups for example you would not be
47:14 - able to hard link a file from your
47:16 - ssdh homeerin uh to some other file on
47:20 - SL mn/ backups since that's a different
47:23 - file system there are some other things
47:26 - to take into consideration when you hard
47:28 - link first make sure that you have the
47:31 - proper permissions to create the link
47:34 - file at the destination in our case we
47:37 - need write permissions atome janp
47:40 - pictures and second when you hardlink a
47:43 - file make sure that all users involved
47:46 - have the required permissions to access
47:48 - that file for Aaron and Jane this might
47:51 - mean that we might have to add both
47:53 - their usernames to the same group for
47:55 - example family
47:57 - then we'd use a command to let the group
47:59 - called family read and write to this
48:01 - file you only need to change permissions
48:03 - on one of the hard links and that's
48:06 - because you're actually changing
48:07 - permissions stored by the iode so once
48:10 - you change permissions at slome SARP
48:14 - picturesfamily dog.jpg
48:17 - slome janp
48:19 - picturesfamily dog.jpg and all other
48:23 - hard links will show the same new sets
48:25 - of permissions
48:31 - let's look now at how Linux manages soft
48:35 - links you know how when you install a
48:38 - program on Windows you might get a
48:40 - shortcut on your desktop you doubleclick
48:43 - on that shortcut and the application
48:45 - gets launched the application is
48:47 - obviously not installed on your desktop
48:49 - it may have its file stored in the
48:53 - cprogram filmcool app directory
48:57 - and when you double click on the
48:58 - shortcut this only points to an
49:00 - executable file at cprogram filey
49:05 - application. exe so the double click on
49:09 - that shortcut basically redirects you to
49:11 - the file see and/ programfiles mycool
49:15 - application. exe which then gets
49:19 - executed soft links in Linux are very
49:22 - similar a hard link pointed to an iode
49:26 - but a soft link is nothing more than a
49:28 - file that points to a path instead it's
49:31 - almost like a text file with a path to a
49:33 - file or directory
49:35 - inside the syntax of the command to
49:37 - create a soft link which is also known
49:39 - as a symbolic link is the same as before
49:43 - but we add the- s or-- symbolic option
49:47 - so it look something like this ln- s
49:51 - path to the Target file followed by the
49:53 - path to the link file where the path to
49:56 - the Target is the file or directory that
49:58 - our soft link is going to point to and
50:00 - the path to the link file is where our
50:03 - soft link will actually be
50:05 - created so for example to create a
50:08 - symbolic link that points to the slome
50:11 - ainp
50:13 - picturesfamily dog.jpg file we can run
50:16 - the following command Ln dsome a/p
50:21 - picturesfamily dog.jpg
50:24 - familycore doog short cut.jpg
50:29 - now if we list the files and directories
50:32 - in Long listing format with the ls- L
50:35 - command we'll see output like this and
50:38 - the L at the beginning shows us that
50:41 - this is a soft link and ls- L even
50:45 - displays the path that the soft link
50:46 - points
50:47 - to if this path is long LSL might not
50:51 - show the entire path an alternative
50:54 - command to see the path stored in a soft
50:56 - soft link is readlink uh followed by the
50:59 - path to the soft link so in our case
51:02 - that would be readlink familycore dogor
51:06 - shortcut.
51:08 - jpg you may also notice that all the
51:11 - permission bits are WX read write and
51:14 - execute seem to be enabled for this file
51:17 - and that's because the permissions of a
51:19 - soft link do not matter if you were to
51:22 - try to write to a file like FST tabore
51:26 - shortcut and this would be denied
51:29 - because the permissions of the
51:30 - destination file apply and/ Etc FS tab
51:34 - does not allow regular users to write
51:37 - here so in our first command we used an
51:40 - absolute
51:42 - path uh that was slome aonp
51:46 - picturesfamily dog.jpg
51:48 - we ever changed the directory name Aaron
51:51 - in the future to something else this
51:53 - soft link will break you can see broke
51:56 - links highlighted in red in the output
51:59 - of the ls- L
52:01 - command uh to tackle this you could
52:03 - create a soft link with a relative
52:06 - path uh say for example you were in the
52:09 - home directory of Aaron you could create
52:10 - a soft link using the relative path of
52:13 - the familycore dog file instead of
52:15 - specifying the complete path so that way
52:18 - when someone tries to read relative
52:21 - uncore picture uncore shortcut they
52:24 - would get directed to pictures slamily
52:27 - dog.jpg relative to the directory where
52:31 - the soft link
52:34 - is since soft links are nothing more
52:36 - than paths pointing to a file you can
52:38 - also soft link to directory so something
52:41 - like ln- s pictures slash followed by a
52:44 - shortcut to the directory would be valid
52:47 - and you can also soft link to files or
52:49 - directories on a different file system
52:51 - which differs from the way that Linux
52:53 - handles hard links so head over to the
52:55 - labs using the links given below and
52:58 - come back here once you are
53:03 - done we'll now discuss how to list set
53:07 - and change standard file permissions in
53:10 - lenux to understand how file and
53:13 - directory permissions work on lenux we
53:15 - must first look at file and directory
53:17 - owners if we Type ls- L we'll see
53:20 - something like this any file or
53:23 - directory is owned by a user in this
53:26 - case we see that the file familycore
53:28 - dog.jpg is owned by the user called
53:31 - Aaron only the owner of a file or
53:33 - directory can change permissions in this
53:36 - case Aon The Only Exception is the root
53:39 - user that's the super user or
53:41 - administrator account which can change
53:43 - permissions of any file or
53:46 - directory in the second field we see
53:48 - that this file also has a group
53:50 - associated with it and that's the family
53:52 - group we'll see later what the role of
53:55 - groups are
53:57 - to change the group of a file or
53:58 - directory we use the chgrp command and
54:02 - that stands for change group and its
54:05 - syntax is chgrp followed by the group
54:09 - name followed by the file or directory
54:12 - name so for example to change this
54:15 - file's group to wheel we'd use
54:18 - chgrp wheel familycore dog.jpg
54:23 - if we do another ls- l we can see that
54:27 - the group has now changed to
54:29 - wheel we can only change to groups that
54:32 - our user is a part of and to see which
54:34 - groups our current user belongs to we
54:36 - can use the groups
54:38 - command so this means we could change
54:40 - the group of our file to Aaron wheel or
54:45 - family there's also a command to change
54:48 - the user owner of a file or directory
54:51 - and that's CH WN or Chow that stands for
54:55 - chain
54:57 - owner and its syntax is CH followed by
55:01 - the user that we'd like to change it to
55:04 - and the file or directory's name so for
55:07 - example to change ownership of this file
55:09 - to Jane we'd use CH Jane family dog.jpg
55:14 - but only the root user can change the
55:17 - user owner so we'd have to use the sudu
55:20 - command to temporarily get root
55:22 - privileges and that's why here we have
55:23 - sudu CH Jane family dog.jpg
55:28 - so with another ls- L we can see the
55:31 - user has now changed to Jane we can
55:34 - change both the user owner and the group
55:37 - with a different syntax of chow it be
55:39 - Chow user colon group follow by the name
55:42 - of the file or directory and again since
55:44 - only root can change user ownership
55:47 - we're going to set the user back to
55:49 - Aaron and the group to family to RT all
55:51 - of our changes by using sudu Chow Aaron
55:55 - colon family family dog.jpg and one last
56:00 - ls- L will show us that the owner is
56:02 - aing again and the group is
56:07 - family our ls- L command also shows us
56:11 - the permissions of all files and
56:13 - directories in our current
56:15 - directory the first character on that
56:18 - line shows us what type of an entry this
56:21 - is so whether it's a file a special file
56:24 - a directory and so on so for example
56:27 - we'd see D for a directory L for a soft
56:30 - link or dash for a regular file and
56:33 - here's a table that shows the different
56:35 - identifiers and what they stand
56:37 - for we'll learn about some of these file
56:40 - types later in this
56:44 - course the next nine characters show us
56:47 - permissions so the first three are
56:49 - permissions for the user that owns the
56:51 - file the next three are permissions for
56:54 - the group that the file F belongs to and
56:58 - the last three are permissions for other
57:00 - users that's any user that is not Aaron
57:02 - or not part of the family group in the
57:04 - example we've been working with so let's
57:08 - see what RW and x mean in two different
57:12 - context because they act in a certain
57:15 - way for files and have a slightly
57:17 - different behavior for
57:18 - directories so here for a file R means
57:22 - that the user group or other users can
57:25 - read the content of this file a dash
57:28 - means they cannot read it w means the
57:32 - user group or other users can write to
57:35 - this file to modify its contents and X
57:38 - means the user group or other users can
57:41 - execute this file some files can be
57:44 - programs or shell scripts list of
57:46 - instructions we can execute so to be
57:49 - able to run this programmer shell script
57:51 - we must have the X permission a dash
57:54 - permission here means the programmer
57:55 - shell script cannot be
57:59 - executed for directories we must think a
58:02 - little differently unlike a file that
58:04 - may contain text to be read executed and
58:08 - modified directories do not have such
58:11 - contents their contents are the files
58:13 - and subdirectories they hold so read
58:16 - write and execute refers to these files
58:19 - and subdirectories they have
58:21 - inside so R means the user group or
58:25 - other users can read the contents of
58:27 - this directory we need an R permission
58:29 - to be able to run a command like LS
58:32 - pictures SL and view what files and
58:35 - subdirectories we have in the directory
58:37 - w means the user group or other users
58:40 - can write to this directory we need W to
58:44 - be able to create or delete entries in
58:46 - that directory like adding or deleting
58:48 - files or subdirectories as when we use
58:50 - the MK deer
58:51 - command and X means we can execute into
58:55 - this directory
58:56 - we need X to be able to do CD pictures
58:59 - and enter into the pictures
59:02 - directory when directories are meant to
59:04 - be accessible you'll normally find both
59:06 - the r and the X permissions
59:09 - enabled whenever you're on a Linux
59:11 - system you're logged in as a particular
59:14 - user we've changed permissions in an
59:16 - interesting way to make this easier to
59:20 - understand so look at the permissions
59:23 - for the familycore dog. JP G file it's
59:28 - set
59:29 - to- r-- RW
59:35 - d--- uh that's uh read only for the
59:39 - owner read right for the group and no
59:42 - permissions for
59:44 - others we see that the current owner of
59:47 - the file is Aaron and we know Aaron is
59:50 - part of the family group can Aaron write
59:53 - to this file considering the fact that
59:55 - the OWN owner has readon
59:58 - permissions it might seem that he should
60:00 - be able to do that as he's part of the
60:02 - family group and that group has read
60:04 - write permissions but if we try to add a
60:07 - line of text this file it fails and why
60:10 - is that because permissions are
60:13 - evaluated in a linear fashion from left
60:16 - to right with these permissions in mind
60:19 - let's see how the operating system
60:20 - decides if you're allowed to do
60:22 - something it goes through a logic like
60:24 - this who's trying to access the
60:28 - file well that's Aaron and who owns this
60:33 - file Aaron is the owner and owner
60:37 - permissions
60:40 - apply Aaron can read the file but cannot
60:43 - write to it so write permission is
60:47 - denied it does not evaluate the
60:49 - permissions of the group because it
60:51 - already matched you to the first set of
60:53 - permissions the ones for the owner of
60:54 - the file
60:56 - if you're logged in as a different user
60:58 - for example Jane the logic would be more
61:00 - like this so who's trying to access the
61:03 - file Jane and who owns the file Aaron
61:09 - okay owner permissions do not
61:12 - apply uh moving on to group permissions
61:15 - is Jane in the family group yes she is
61:19 - okay so group permissions apply Jane has
61:23 - read write permissions
61:26 - so she can read and write to the
61:29 - file if the user trying to access the
61:32 - file is not the owner and is also not in
61:35 - the family group the last three
61:37 - permissions would apply the permissions
61:38 - for other users so now that we have a
61:41 - basic understanding of permissions let's
61:43 - move on to how we can change them to
61:45 - suit our
61:49 - needs to change permissions we use the
61:52 - chod command and the basic syntax of the
61:56 - chod command is chod followed by the
61:59 - list of permissions that we want to
62:01 - change and then the name of the file or
62:03 - directory we're changing permissions for
62:05 - we can specify these permissions in many
62:07 - ways so let's start out with some simple
62:10 - examples we saw that our owner Aaron
62:14 - cannot write to this file so let's fix
62:17 - that to specify what permissions we want
62:20 - to add on top of the existing ones we
62:23 - use this syntax to add permissions for
62:27 - the user or owner it's U plus a list of
62:30 - permissions so some examples would be U
62:32 - plus w u + RW or U plus
62:37 - rwx to add permissions for the group it
62:39 - would be G plus the list of permissions
62:42 - and to add permissions for other users
62:44 - it would be o plus a list of permissions
62:48 - in our case we want to add the right
62:50 - permission for our user owner of the
62:52 - file so here we would use chod u+
62:58 - wamore dog.jpg
63:01 - now the old r-- becomes our w- with the
63:05 - newly added W permission so we fixed our
63:08 - problem and Aaron can write to this
63:13 - file to remove permissions for the user
63:16 - owner we would use U followed by a list
63:19 - of permission so some examples would be
63:22 - u-w or u- RW or U
63:27 - dwx to remove permissions for the group
63:29 - it would be
63:31 - g-list of permissions and to remove
63:34 - permissions for other users be o- the
63:37 - list of permissions so at this point we
63:40 - have the permission r- dash for other
63:43 - users that means anyone on this system
63:46 - can read our familycore dog.jpg
63:49 - file if we want only the user owner and
63:51 - group to be able to read it but hide it
63:54 - from everyone else we can remove this R
63:56 - permission with chod o-r family dog.jpg
64:02 - now only Aon or the family group can
64:05 - read this file and no one
64:12 - else with plus and minus we saw that we
64:14 - can add permissions on top of the
64:16 - pre-existing ones or remove some of them
64:19 - from preexisting ones so if a file has
64:22 - rwx and we remove X we end up with RW DH
64:26 - if another file has r-x and we remove X
64:30 - we end up with
64:31 - r-- if we only care about removing the
64:34 - execute permission and we don't care
64:36 - what the other permissions are this is
64:38 - perfect but sometimes we'll have a
64:40 - different requirement we want to make
64:42 - sure that permissions are set exactly to
64:45 - certain values and we can do this with
64:47 - the equals sign and just like before
64:50 - this is done with the format U equals
64:52 - followed by a list of permissions or g
64:54 - equals followed by the list or o equals
64:57 - followed by the list an example we want
65:01 - to make sure that the group can only
65:03 - read this file but not write to it or
65:06 - execute it to do that we can run chod
65:10 - gals R familycore dog.jpg
65:15 - we can see that before group permissions
65:18 - were
65:19 - rw- we didn't tell chod to actually
65:21 - remove the w permissions but by saying g
65:24 - equals r we told it to make the group
65:26 - permissions exactly R d-h This only
65:30 - affects the group permissions and not
65:32 - the user or other
65:34 - permissions if we'd want to let the
65:37 - group read and write but not execute we
65:39 - could use chod g equals
65:43 - rwam dog.jpg
65:46 - we can see that whatever letter is
65:48 - missing will make chod disable
65:50 - permissions for that thing no X here
65:53 - means no execute permission will be
65:55 - present on the file which leads us to
65:58 - the next thing what if we omit all of
66:00 - the letters no r no W no X just chod g
66:06 - equals family dog.jpg
66:10 - this is like saying make group
66:13 - permissions all
66:16 - empty another command that does the same
66:19 - thing would be chod g- rwx
66:26 - undor dog.jpg
66:28 - and that's going to do the same thing
66:31 - but following a bit different logic that
66:33 - will remove all the permissions from the
66:35 - group r w and
66:41 - X so we saw how to add permissions with
66:44 - plus remove with minus and set exactly
66:47 - to with equals we can group all of these
66:51 - specifications in one single command by
66:54 - separating our permissions for the user
66:56 - group and others with a comma for
66:59 - example let's consider this
67:02 - scenario we want the user to be able to
67:06 - read and write to the file and don't
67:08 - care if execute permission is on or off
67:12 - we want the group to only be able to
67:14 - read exactly this permission and we want
67:18 - others to have no permissions at all our
67:20 - Command could be chod u+ RW comma G
67:25 - equal R comma o equals family dog.jpg
67:34 - or let's say we want the user to only be
67:38 - able to read and write but we want to
67:40 - remove the WR permissions for the group
67:43 - and leave all other group permissions as
67:45 - they were and we don't care about
67:47 - permissions that apply to other users we
67:50 - could use chod = RW comma g-w to family
67:57 - dog.jpg
68:03 - chod supports another way to set and
68:06 - modify permissions and that's through
68:08 - octal values first let's look at another
68:11 - command that shows us permissions and
68:13 - that's the stat command so we could do
68:15 - stat familycore dog.jpg
68:19 - and here's the list of permissions
68:21 - displayed by stat we can see that rw-
68:25 - r d d-- d has an octal value of
68:31 - 640 you can ignore the first 0o because
68:34 - that's for special permissions like set
68:36 - uid set GID and the sticky bit if we
68:40 - break this down 640 means the user owner
68:44 - permissions are six the group
68:46 - permissions are four and the other
68:49 - permissions are zero but how are these
68:52 - calculated
68:55 - let's take a closer look at this
68:57 - permission we have r w for user R for
69:01 - group and none set for others each
69:04 - permission is represented in binary if
69:08 - it's set the binary is set to one or
69:11 - else it's set to
69:13 - zero in this case the first part is 1 1
69:17 - 0 the second part is 1 0 0 and the third
69:21 - part is zero converting this binary to
69:24 - decimal would give give us six for the
69:26 - first part four for the second part and
69:31 - 0o for the third part here's a quick
69:34 - binary table for your
69:36 - reference let's take another example
69:40 - this time rwx r-x and
69:44 - r-x so the binary format would be
69:48 - 111 1 1 1 1 the decimal of which is 75
69:56 - five in the last example it's read write
69:59 - and execute for all so it's one for all
70:03 - of the bits so the decimal value is
70:10 - 777 if you find binary difficult another
70:13 - approach would be to use the octal table
70:16 - and it's much simpler for each
70:18 - permission assign an octal value for
70:21 - example four for read two for right and
70:25 - one for execute then whichever
70:27 - permission is set consider the
70:29 - respective value for that and for the
70:31 - permission bit not set consider it to be
70:34 - zero once done add up the numbers within
70:37 - each
70:39 - group so you would get 4 + 2 = 6 4 + 0 +
70:45 - 0 is 4 and the last group is
70:50 - 0o let's look at using the same approach
70:53 - for the other examples as well
70:56 - so
70:57 - rwx r-x and
71:00 - r-x gives us 7 5
71:05 - five and full permissions give us 7
71:16 - 77 once we identify the number we want
71:19 - to set it to we can use the same in the
71:22 - chod command as well instead of
71:24 - specifying the permissions for each
71:26 - group we could just provide a number
71:28 - like this chod 640 familycore dog.jpg
71:35 - so head over to the labs using the links
71:38 - given below and come back here once you
71:40 - are done in this demo we'll be showing
71:43 - off pagers and the Vim text editor
71:47 - pagers are programs that allow you to
71:49 - open multiple pages of text and navigate
71:52 - through them while on the terminal and
71:54 - the two pages Fe that we'll be looking
71:56 - at are called less and more the first
71:59 - one we'll look at is less it's a bit
72:02 - more feature Rich than more and to
72:05 - access it you first type its
72:08 - name followed by the name of the file
72:10 - that you want to open in this case I'm
72:12 - going to use the log file for the dnf
72:15 - package manager because that has enough
72:18 - information in it to really show off our
72:20 - pages so that's located at this location
72:28 - we press enter so now we've opened in
72:30 - the pager and one of the ways you can
72:31 - tell that you're in a pager because
72:33 - other programs might open them for you
72:36 - is that in the bottom left corner you'll
72:38 - see the name of the file
72:40 - highlighted there so with the last pager
72:44 - you can use the arrow keys up and down
72:47 - to move up and down in the
72:52 - file and you can also have things like
72:55 - search functions so for example to
72:57 - search for text you press the slash key
73:01 - you'll see that down in the bottom left
73:02 - hand corner followed by the term you'd
73:05 - like to search for I'll search for debug
73:07 - since I know that appears several times
73:09 - in this file so you'll see on the first
73:11 - line here it's been highlighted where it
73:15 - occurs and to get to the next instance
73:18 - on a line where it would occur you would
73:19 - press the in
73:22 - key that will continue to move to each
73:25 - new instance of debug but you'll notice
73:28 - that it's skipping some of them and
73:30 - that's because the case is
73:32 - sensitive uh so to make it case
73:35 - insensitive you need to pass the dash me
73:39 - Dash I option to ignore
73:43 - case and that will start getting all of
73:46 - the instances of debug and to move
73:50 - backward through previous results you
73:53 - would hold the shift key and press press
73:55 - n so a capital N will move upward
73:59 - through the previous
74:01 - results and lastly For Less in order to
74:05 - exit the pager you press Q to
74:09 - quit it's a brief overview of the L
74:12 - pager more does not have as many
74:15 - features but you do access it the same
74:22 - way and you'll see you'll know you're in
74:24 - more because it will let you know down
74:25 - at the bottom it will say more and show
74:28 - you a percentage and for more you move
74:32 - through things by pressing the space bar
74:35 - and that moves a page at a
74:38 - time and to get out of more you press
74:42 - the q
74:44 - key so that is it for pagers Let Me
74:47 - Clear My screen for you now we'll move
74:50 - on to the Vim text editor that is VI
74:53 - improved
74:56 - when you open it you open it with
74:58 - BM it'll give you this nice little
75:00 - greeting screen with your blank file and
75:02 - a couple of things that you can do shows
75:05 - you a few of the commands that you can
75:07 - have them is mode sensitive so it has
75:12 - different modes to be in and different
75:14 - keys and functions are available
75:16 - depending on the mode that you are
75:19 - in uh in order to write text into a file
75:24 - you need to press the I key that's for
75:27 - insert you'll notice down at the bottom
75:29 - left hand corner it now says insert and
75:32 - you can start typing
75:41 - text all right so we have this as our
75:43 - text for our Vim demo I'll give a couple
75:46 - of blank lines here all right so some
75:49 - things that you can do with Vim uh you
75:52 - press escape to go back to its default
75:55 - mode and you can't typee anything in the
75:58 - default
76:01 - mode so for Vim uh to
76:05 - search you can use the slash key just
76:08 - like you did in Les when you're in the
76:11 - default
76:12 - mode so I'll search for this and it
76:15 - doesn't find that because it is case
76:18 - sensitive so I can search for one that
76:20 - we can find so it'll highlight all
76:23 - instances of is if I type Ty is if you
76:26 - want it to be case
76:28 - insensitive you can do this followed by
76:33 - an escape character so that's a slash
76:34 - going the other way and then the letter
76:36 - c lowercase letter C think of C for case
76:40 - so that'll make it case
76:43 - insensitive
76:46 - okay the next thing we would want to
76:48 - look at uh in the default mode you can
76:51 - go to a particular line number
76:55 - by typing a colon followed by the line
76:58 - number so I've got about three lines in
77:01 - here so to go to line three we'll take
77:04 - our cursor to line
77:05 - three I type two you can see we've gone
77:08 - back up to two and of course one will
77:11 - take us back to the original line
77:14 - number right and to uh copy a line of
77:19 - text an entire line of text when you're
77:21 - in command mode you hit the Y y key two
77:27 - times Okay so we've copied
77:30 - it and then to paste that line of text
77:35 - you can use the P key in command mode so
77:39 - it'll paste it wherever you have
77:41 - it you can also cut a line of text by
77:45 - using the D key two times so DD we cut
77:49 - it and you can also paste things that
77:51 - you have cut with the P key so if you
77:55 - need to replace a line go to a
77:57 - particular line and replace it uh when
77:59 - you're working with a file those are
78:01 - some useful Vim commands now probably
78:05 - the most complicated thing about Vim the
78:07 - first time you open it is how do you get
78:10 - out of it a lot of people have trouble
78:12 - with that it's not really that hard if
78:15 - you have made changes to a file and you
78:18 - want to save them you hit the colon key
78:23 - and you type when first to save changes
78:26 - you would type w for
78:29 - write we haven't given it a file name so
78:31 - it has nothing to write
78:33 - to but to quit and write changes new
78:37 - colon
78:40 - WQ of course it's not going to let me do
78:42 - that because I did not give it a file
78:43 - name so in order to quit without making
78:47 - changes or saving changes that's
78:48 - important if you get yourself in a
78:50 - situation like this where you did not
78:51 - provide a file name then you would do en
78:55 - Q for quit and then exclamation mark as
78:59 - if you're saying you know I told you to
79:01 - quit and being emphatic about it and
79:04 - that will allow you to quit the Vim text
79:06 - editor without making any changes if we
79:09 - were to have provided a file name when
79:11 - we started we can do bimm test
79:15 - file it's already a file that we have
79:18 - created here so I'll just go ahead and
79:20 - make some changes to
79:22 - it it's not really important what what's
79:24 - in this
79:29 - file right and then we would do WQ write
79:33 - and quit and that would let
79:35 - us exit the pile we can actually see
79:39 - that that went into our file by using
79:42 - our cat command we see our new changes
79:44 - down at the bottom so that is a brief
79:47 - overview of the functions of less more
79:50 - and
79:53 - BM let's look at searching text using GP
79:56 - and
79:57 - Linux let's look at some basic ways to
80:00 - search for text at times you may have a
80:03 - large text file that contains a lot of
80:05 - data and you might want to find specific
80:07 - information within it for example lines
80:10 - containing some particular
80:14 - text one important Linux command that
80:16 - lets you search through text files is
80:18 - grap so let's see how it works the
80:21 - general syntax we will use with GP is
80:24 - grap
80:25 - followed by the search options then the
80:27 - search pattern file and then the file we
80:31 - can emit command line options but we
80:33 - should specify a search pattern and a
80:35 - file we want to search through for
80:37 - example to search through the SLC os-
80:41 - relase file and find all lines that
80:43 - contain the text sent OS we'd use this
80:48 - command uh search is case sensitive so
80:52 - this command would show show us
80:55 - different lines that would have this
80:57 - word with all the letters in
81:00 - lowercase if we want to make the search
81:02 - case insensitive to find both Cent OS
81:06 - with the capital letters and C OS
81:09 - lowercase or even C OS in all capital
81:11 - letters or any such variation we can use
81:14 - the - I command line option - I stands
81:19 - for ignore case
81:25 - instead of searching through a specific
81:27 - file we can also search for all files
81:29 - that exist under a directory and its
81:32 - subdirectories to do this we add the
81:35 - dasr option and instead of specifying a
81:38 - path to a file we specify the path to a
81:41 - directory R stands for
81:46 - recursive we can group recursive search
81:49 - with the ignore case
81:51 - option using- IR
81:57 - our regular user cannot read most of
81:59 - these files so we get permission denied
82:01 - errors if we want to search through
82:03 - system files that only the administrator
82:06 - account can access we have to use sudu
82:09 - along with our GP command so sudu gr-ir
82:13 - cnos
82:15 - SLC would give us the following
82:20 - output we can also invert search results
82:24 - uh for for example we can search for
82:26 - lines that don't contain the text Centos
82:28 - by adding the- V option that's for
82:32 - invert
82:36 - match now consider this
82:39 - command this matches both red hat and
82:43 - red but what if we're only interested in
82:46 - matching the word red and not a bigger
82:49 - word that just contains the text readed
82:51 - within it we can use the- option to
82:55 - match only
82:59 - words and finally notice how GP displays
83:03 - the entire line that has
83:06 - matched this is useful as it shows us
83:08 - some context showing us where these
83:10 - matched characters or words have been
83:12 - found but sometimes we'll only want to
83:15 - extract the results themselves not
83:17 - caring about the rest of the line we can
83:20 - tell grep to do this by passing the- o
83:23 - or only matching option to
83:29 - grab let's look at analyzing text using
83:33 - basic regular expressions and Linux in
83:35 - our previous commands we used simple
83:37 - search patterns looking for some
83:39 - specific pieces of text like
83:42 - cnos but what if we need more complex
83:45 - search
83:47 - conditions so imagine we have some
83:50 - documentation scattered in hundreds of
83:52 - files and we need to extract all IP
83:55 - addresses mentioned in these documents
83:58 - and that would require more advanced
83:59 - search instructions an IP has a form
84:02 - like
84:04 - 20312
84:06 - 3.5 but we can't just make a search
84:08 - pattern look for numbers with a DOT
84:10 - between them as this would also match
84:12 - numbers like
84:15 - 1.2 which are not IP
84:19 - addresses so in math we can say
84:22 - something like X is an integer
84:25 - and X is bigger than
84:28 - three and that X is smaller than
84:31 - 8 and this would mean that X is either
84:35 - four 5 6 or S regular Expressions work
84:40 - in a similar way we specify some
84:43 - conditions tie all of them together and
84:45 - our search pattern only matches what
84:47 - perfectly fits within those conditions
84:50 - so let's start out with some super
84:52 - simple examples and then build up to
84:54 - slightly more advanced
84:57 - Expressions so all regular expressions
85:00 - are built with the help of operators
85:02 - like the carrot dollar sign period
85:06 - asterisk plus sign braces the question
85:10 - mark the vertical pipe brackets
85:13 - parentheses and brackets with carrot so
85:17 - let's see what each one of them
85:21 - does so here's a file with the set of
85:23 - names and we need to find names that
85:26 - start with
85:28 - s when we do a grep for Sam we get names
85:32 - that start with Sam but also names that
85:35 - have Sam anywhere in them and that's not
85:38 - what we want we just want the words that
85:41 - start with Sam and not those that have
85:44 - Sam in them so that's where we use the
85:48 - line begins with
85:50 - operator so this is usually the
85:53 - alternate character on the number six
85:55 - key on most keyboards and using this
85:58 - operator within the search string only
86:00 - Returns the lines that start with the
86:02 - given search term and not all lines that
86:04 - contain this
86:06 - term and just to show another example we
86:09 - could look for lines that start exactly
86:11 - with these four letters P a SS like
86:17 - this in the same example as before we
86:21 - would like to only get the names that
86:23 - end with with Sam so for this uh we
86:27 - would use the line ends with operator
86:30 - which is a dollar sign and we place this
86:32 - operator at the end of the search term
86:34 - to indicate interest to display only
86:37 - lines that end with a search term so in
86:40 - this case it would list the name
86:45 - basan so here are some other examples uh
86:48 - say we need to list lines that end with
86:51 - the number seven using a simple grip
86:54 - with the number seven lists multiple
86:56 - lines that contain this
86:58 - number and we can tell our regex to look
87:01 - for a line that ends with seven with an
87:04 - expression like
87:06 - this that gives us a pretty clean result
87:09 - so just like with the carrot with the
87:11 - dollar sign we can look for lines that
87:13 - end with the sequence of characters uh
87:16 - to look for all lines that end with the
87:18 - text male do something like this so
87:22 - please take note of how the operators
87:24 - are placed
87:26 - differently if you mix up their location
87:29 - you won't get any results which can lead
87:31 - to confusion about why your reg X is not
87:34 - working so to easily remember their
87:36 - locations uh think like this the line
87:39 - begins with operator should be placed at
87:41 - the beginning of my search pattern and
87:44 - the line ends with operator the dollar
87:47 - sign should go at the end of the
87:51 - pattern so anywhere you add a period in
87:55 - your expression it will match any
87:58 - character in that spot so for example uh
88:02 - C.T would match cat Cut sit caught and
88:07 - even c1t or C pound sign T but it won't
88:12 - match CT there must be exactly one
88:15 - random character between C and T and
88:19 - with C period period T there have to be
88:23 - two characters so an
88:26 - example would look like this and we can
88:28 - see that even execute is a match because
88:31 - that sequence fits inside of that
88:36 - word so if we'd only want to match the
88:38 - whole word with this and not parts of
88:41 - words we can use greps dasw option you
88:45 - can think of DW as
88:48 - word and that would match only full
88:51 - instan of that and not partial word
88:53 - matches or word that contain
88:56 - it and this brings us to an interesting
88:59 - problem this period has a special
89:02 - meaning in regular Expressions but what
89:05 - if we need to search for an actual
89:07 - period in our text well this won't work
89:11 - as this reg X will basically match each
89:14 - character one by
89:18 - one so the solution however is simple uh
89:21 - we look for a regular period by escaping
89:25 - the character so escaping is how we tell
89:27 - our regular expression hey don't
89:29 - consider this period a mat match any one
89:32 - character operator instead interpret it
89:35 - as a regular period so to escape some
89:38 - special character we just add a backs
89:40 - slash before it so instead of a period
89:42 - we would write backs slash period so our
89:44 - GP command to search for a regular
89:47 - period to end a sentence let's say would
89:49 - look like
89:51 - this so let's say that we we have an
89:54 - expression like L asterisk so this is
89:59 - going to match several things it'll
90:01 - match L but it's also going to match
90:04 - l
90:06 - l
90:08 - l and so on no matter how many T's are
90:11 - at the end so another way of saying this
90:13 - is that the asterisk allows the previous
90:16 - element the T in this case to be either
90:19 - omitted entirely to appear once or to
90:23 - appear
90:24 - multiple times so in a GP command we
90:27 - could use it like
90:29 - this and we can see instances such as
90:32 - file where it does not have the T
90:35 - appearing at all and we can see
90:37 - instances say letter where it appears
90:40 - more than
90:42 - once so the asterisk operator can be
90:45 - paired up with other operators so for
90:47 - example to look for something for say
90:50 - sequences that begin with a forward
90:52 - slash uh have have zero or more
90:55 - characters in between and end with
90:57 - another forward slash we could use a
91:00 - pattern like this and since the period
91:03 - matches only any one character and
91:06 - asteris says previous element can exist
91:09 - 0o one two or many more times we
91:12 - basically allow any sequence of
91:13 - characters to exist between the forward
91:18 - slashes let's say we want to find all
91:21 - sequences of characters where zero
91:23 - appears one or more times so we might be
91:26 - tempted to use an expression like this
91:30 - but as we can see this also matches
91:31 - lines that contain no zeros at all and
91:34 - why is that that's because the asterisk
91:37 - lets the previous character exist one
91:39 - more times but also zero times it
91:43 - basically allows that element to be
91:44 - optional in our search so we need
91:46 - another operator that forces the element
91:49 - to exist at least one time or many more
91:52 - and the Plus sign does
91:55 - this so let's explore this a little
91:59 - more 0 plus would match strings like 0 0
92:06 - 0 0 0 0 and so on so we might think that
92:11 - we could write this in grep and find
92:14 - what we're looking
92:16 - for but this doesn't look like the
92:18 - result we want our plus works like a
92:21 - literal plus sign instead of an operator
92:23 - why is this that's because by default GP
92:27 - uses basic regular Expressions the
92:29 - manual page for GP has this to say in
92:32 - basic regular Expressions The Meta
92:34 - characters question mark plus bracket
92:37 - vertical pipe parenthesis lose their
92:40 - special meaning instead use the backs
92:43 - slashed versions or escaped
92:47 - versions that means to use plus as an
92:49 - operator here we have to add the
92:51 - backslash before it to make it back SL
92:54 - plus so our Command becomes
92:57 - this but this can be confusing pretty
93:00 - fast we uh saw already that we use
93:03 - something like back SL period to turn
93:05 - the period operator into a regular
93:07 - period and now we're using uh the back
93:12 - slash to turn a regular plus into the
93:14 - plus operator so it' be hard to keep
93:17 - track of what to backslash and what not
93:19 - to so we can go the easier route and use
93:22 - extended regx and dead which doesn't
93:24 - require us to backslash anything and we
93:28 - can use the extended regex uh by adding
93:31 - the- capital E option to GP or even
93:36 - easier we can use the command eegp and
93:39 - we're going to look at GP and with a
93:42 - dash capital E and EGP in our next video
93:45 - so we can make it a habit to always use
93:47 - EGP instead of GP to avoid mistakes
93:50 - where we forget to back slash one of our
93:52 - regex operators
93:56 - now let's build on our previous video on
93:59 - basic regular expressions and take a
94:01 - look at extended regular Expressions
94:03 - that we can use in
94:05 - lenux so we ended the last video talking
94:08 - about using the back slash character or
94:11 - to turn the period operator into a
94:12 - regular period so we also talked about
94:16 - using the back slash to turn a regular
94:18 - plus sign into the plus operator so we
94:23 - mentioned that we would use the- e
94:25 - option for grap or the even easier e
94:28 - grap let's take a look at
94:31 - those using the dash capital E option so
94:35 - that we don't have to use the back slash
94:37 - Escape character we would have our Zer
94:41 - plus with plus as an operator look like
94:44 - this or the equivalent EGP command would
94:48 - look like
94:49 - this so it is a good habit to develop to
94:52 - always use grap just in case you want to
94:57 - avoid those backs slash characters and
94:59 - any mistakes that might come along with
95:02 - them right so let's look at some more
95:06 - types of regex operators uh say we want
95:09 - to find all strings that contain at
95:12 - least three zeros so we do this with
95:15 - brackets brackets say that the previous
95:17 - element can exist or the contained
95:19 - element I guess we could say can could
95:21 - exist this many times
95:24 - so this would give you one where it
95:26 - matches three zeros at
95:30 - least so to find all strings that
95:32 - contain a one followed by at most three
95:36 - zeros we'd have an expression that looks
95:38 - like
95:40 - this so note that this will also match
95:42 - ones followed by no zeros it's matching
95:46 - at
95:50 - most and to find all strings that
95:52 - contain exactly three
95:54 - zeros we have construction that looks
95:57 - like
95:57 - this so the brackets are the previous
96:00 - element can exist this many
96:05 - times so a question mark will let the
96:08 - previous element exists precisely zero
96:11 - or one times it basically makes it
96:13 - optional it can exist once or not at all
96:17 - so let's say we're trying to find all
96:19 - text that says disabled or disable so
96:22 - this means that the last D is optional
96:25 - so we can write an expression like this
96:28 - with disabled question mark to use in GP
96:32 - and I want you to note that this also
96:34 - matches the word disables and this is a
96:37 - case where the letter D did not come at
96:39 - the end and disable still
96:45 - matches right so we may have an
96:47 - expression like zero and then our
96:51 - bracket so we have a minimum value a
96:53 - comma and a maximum value that's going
96:55 - to be used to find and match uh zero
96:58 - must exist at least the minimum number
97:00 - of times and at most the maximum number
97:02 - of times so to find all strings that
97:05 - contain three four or five zeros you
97:08 - would write an expression which looks
97:09 - like
97:10 - this and that way we can give a range of
97:14 - how many Zer we would like to
97:18 - find so if we want to match enabled or
97:22 - disabled we could use the vertical pipe
97:25 - which is what we use to symbolize or
97:27 - construct a graph expression that looks
97:29 - like this basically matches what it
97:31 - finds on its left side or its right
97:36 - side and we could combine this with a
97:39 - previous trick where we made the last
97:42 - letter D optional using the question
97:43 - mark to also find variations like enable
97:47 - or enabled or disable or disabled and
97:51 - that graphic expression would look like
97:53 - this
97:58 - so a range is specified in the form of
98:03 - for example A to Z so this will match
98:06 - any one lowercase letter uh from a b CDE
98:11 - e all the way to Z uh we could do it
98:14 - numerically Express a numeric range 0
98:16 - through 9 will match any one digit from
98:18 - 0 to
98:20 - 9 and sets are specified in a form like
98:24 - this so this particular set would match
98:27 - any one character with an a b z 9 five
98:32 - or four so say to find all strings that
98:35 - contain the text cat or cut we could use
98:39 - a regular expression that looks like
98:42 - this and that would leave either the a
98:45 - or the U inside the brackets to match
98:48 - cat or
98:51 - cut so with ranges and set so we can
98:54 - make our searches both wide and specific
98:57 - even at the same time so for example
99:00 - let's ask ourselves how would we find
99:02 - all special device files which have
99:04 - names like SLB sba1 or similar well we
99:10 - could think like this uh find all
99:12 - strings that contain SL Dev slash
99:15 - followed by any random characters so we
99:18 - might be tempted to write an expression
99:21 - like this with dot for a random
99:24 - character and an
99:25 - asterisk this kind of matches some weird
99:28 - stuff because dot asterisk is really
99:30 - greedy it matches way too many things
99:33 - after it captures what we're looking for
99:35 - so we can make our search wide enough to
99:37 - catch all/ Deb devices but specific
99:40 - enough to only capture the parts we need
99:43 - and we're going to do that using
99:46 - ranges so we can say after SL slash
99:50 - match any number that's going to be the
99:52 - asterisk of lower case characters from A
99:54 - to Z we could use an expression which
99:57 - looks like
99:58 - this so that's looks a little bit better
100:02 - but we can see that some things are
100:04 - still missed uh
100:07 - sltw is matched but instead of the
100:09 - entire
100:10 - sltw Zer so how can we catch the digits
100:14 - at the end
100:17 - too well that's pretty easy we specify
100:21 - that a digit from 0 to 9 should exist
100:24 - there and we'd craft a grab expression
100:26 - like
100:27 - this but now we run into another problem
100:30 - only things that have a digit at the end
100:32 - are matched with this new regex we'll
100:35 - only find SL de sda1 for example but
100:39 - notd
100:41 - SDA going to need to do a little more
100:45 - work that's a pretty easy fix uh we can
100:48 - just make the digit at the end optional
100:50 - with a question mark so we could craft a
100:53 - regular expression like this and that's
100:55 - starting to look much better
101:00 - now so let's talk about sub expressions
101:04 - in math we could see an expression like
101:07 - this 1 + 2 * 3 and we know that that's 1
101:11 - + 6 so that equals 7 that's because
101:13 - first multiplication will be done and
101:15 - then addition but what if we first want
101:18 - to add one and two and then multiply by
101:20 - three we'd write it this way in
101:22 - parentheses
101:24 - and that way we know that this would
101:25 - evaluate to 3 * 3 which would be 9 so in
101:29 - regular Expressions we can do a very
101:31 - similar thing so let's take a look at
101:32 - the last expression that we had
101:35 - used so if we were to scroll up in the
101:38 - output we'll see that we still don't
101:40 - match everything we need
101:43 - perfectly uh we have for example SL Deb
101:46 - tty0 P0 the P0 is left out so why is
101:50 - that that's because our expression
101:53 - apparate findd matches any number of a
101:56 - toz characters and then a digit at the
101:58 - end so that's it that's where the match
102:01 - ends so in/ de tty0
102:05 - P0 after this first zero uh is hit our
102:09 - reg X is happy with a partial result so
102:12 - how could we correct
102:15 - this so we could tell it that after SL
102:19 - de we have some letters and a digit at
102:21 - the end but after that the same thing
102:23 - can repeat 0 1 2 3 or many more times so
102:28 - there can be other sequences of letters
102:30 - followed by a digit so this wayd tty0
102:34 - would first match and then p 0 would be
102:36 - added uh to this match by that
102:39 - repetition so we would basically want to
102:42 - say that this is part of this regular
102:45 - expression and it should look for this
102:47 - pattern existing 0 1 2 3 or however many
102:51 - more times so it can match things like
102:53 - our TTY y0 p 0 so what makes regx look
102:59 - for an expression like TTY y0 p 0 and
103:03 - what makes it look for something to
103:04 - exist zero or more times so that's going
103:07 - to be the
103:09 - asterisk but if we add the asterisk to
103:13 - the
103:14 - end uh that's not going to be good the
103:17 - asterisk would apply to the previous
103:19 - element only and again
103:24 - uh that's going to we want it to apply
103:25 - to our whole construct so this is an
103:28 - easy solution we just wrap the entire
103:31 - construct in parentheses and this way
103:34 - the asteris will apply to the entire sub
103:36 - expression wrapped in the parenthesis
103:38 - instead of the last element only end up
103:40 - looking like
103:42 - this so now we're going to get a match
103:45 - for our full expression SL de tty0
103:50 - P0 and but if we scroll up in our
103:53 - results list we're going to find some
103:54 - things that still don't quite work for
103:58 - instance /b/ TTY s0 with the s0 not
104:03 - matching because we didn't include
104:05 - uppercase letters in the regular
104:09 - expression so we could tell our
104:11 - expression to look for lowercase letters
104:13 - or uppercase with the vertical pipe
104:17 - operator okay but writing it like this
104:20 - would be a mistake that's because the
104:23 - asterisk would only apply to the
104:26 - uppercase A to Z range and we need it to
104:30 - apply to the entire expression for
104:32 - lowercase and uppercase letters so once
104:35 - again we can wrap our expression in
104:38 - parenthesis depi this we end up with a
104:40 - little bit more complex but more precise
104:42 - expression that looks like this and we
104:44 - can see that now our TTY s0 matches and
104:50 - if we go on we could look back and find
104:52 - other things things that don't match
104:54 - like this/ Deb term
104:56 - SLA uh because our regex stops when it
104:59 - encounters the next slash and so on so
105:02 - uh this is the kind of logic and
105:03 - fine-tuning we would go through when
105:05 - fixing our regular expressions or making
105:07 - them laser focused on what we need to
105:11 - find so imagine we want to search for
105:14 - links to website addresses that don't
105:16 - use encryption this means that we would
105:18 - want to search for HTTP strings but
105:21 - exclude HT GPS so we saw how sets are in
105:25 - the form of say ABC 23 and ranges take
105:30 - the form of a through
105:33 - z so if we add a carrot in here we can
105:38 - negate them we can tell regex the
105:41 - elements in this set range should not
105:44 - exist in this position so we're going to
105:46 - use carrot with brackets so to look for
105:49 - HTTP links uh we could have a reg that
105:53 - makes sure HTTP is not followed by the
105:56 - letter
105:57 - s look like this and our reg X would
106:00 - function this
106:03 - way so in this case we used a set with
106:07 - only one character but we can use
106:09 - multiple if we want for example we could
106:11 - tell our pattern after a slash there
106:13 - should not be any lowercase letter we
106:16 - use a set that looks like this so keep
106:19 - in mind that for any pattern you're
106:21 - trying to match there are multiple Reg X
106:23 - Solutions you may find to get this right
106:25 - you should practice until you feel
106:27 - comfortable with regular expressions and
106:29 - it's worth noting that regx is not
106:31 - limited to GP you can use regular
106:33 - expressions in a lot of programs that
106:35 - deal with search patterns so for example
106:38 - the said utility also supports regular
106:40 - expressions and you can find additional
106:43 - uh resources for regular Expressions at
106:46 - this address that's reg
106:49 - xr.com so head over to the labs using
106:52 - the links given below and come back here
106:55 - once you are
106:59 - done now let's look at how to create
107:02 - delete and modify local user accounts in
107:05 - Linux each person that needs to log in
107:08 - our Linux server should have their own
107:10 - separate user account this allows them
107:12 - to have personal files and directories
107:14 - protected by proper permissions they
107:17 - also get to choose their own settings
107:19 - for whatever tools they use and it also
107:22 - helps us as a administrators we can
107:24 - limit the Privileges of each user to
107:26 - only what they require to do their job
107:29 - this can sometimes reduce or prevent the
107:31 - damage when someone accidentally writes
107:33 - the wrong command and it can help with
107:36 - the overall security of the
107:38 - system it'll be up to us to manage these
107:41 - user accounts which are sometimes simply
107:44 - called users so let's Dive Right In and
107:47 - see how we create a new user on a Linux
107:49 - system the command that lets us add a
107:52 - new user is intuitively called user ad
107:55 - and the simplest form we can use looks
107:57 - like this where John can be replaced
108:00 - with whatever username we want to choose
108:02 - for this specific account so after we
108:05 - run this command the following things
108:06 - would happen a new user called John is
108:10 - added to the system and a new group also
108:13 - called JN is automatically created the
108:16 - group John will be set to be the primary
108:19 - group of the user
108:20 - John a home directory is created with
108:23 - this account at /home joh and this is
108:26 - where JN can store his personal files
108:28 - and subdirectories plus his program
108:31 - settings their default shell will be set
108:34 - to be the program found at /bin/bash
108:38 - whenever John logs in this is the
108:41 - application he'll be dropped into
108:43 - effectively his entire login session
108:45 - will run inside this app and all the
108:48 - files from Etsy skll will be copied to
108:52 - the user home directory slome joh and
108:55 - you can explore it with
108:58 - ls- ety scale if you're curious to see
109:02 - what's inside we'll see why this
109:04 - so-called skeleton directory is useful
109:06 - in one of the next
109:08 - lessons and also we need to note that
109:10 - the count will never expire uh we'll see
109:14 - what this means later in this lesson all
109:17 - of these things happen because the
109:18 - operating system is configured to take
109:20 - some default actions for each new newly
109:22 - created account we can explore these
109:25 - defaults with the following
109:29 - commands a long form and a short form
109:32 - note the capital D for the short
109:34 - form other defaults related to account
109:37 - creation can be seen by exploring this
109:41 - file the comments explain what each
109:43 - setting
109:46 - does okay at this point we have an
109:49 - account for John but how does he log in
109:52 - his account has no password right now to
109:55 - set a password for him we can use this
109:58 - command and if later we want to delete
110:02 - an account such as John's account we can
110:04 - use the user Dell command note however
110:08 - that this will only delete the John user
110:11 - account and also the group with the same
110:14 - name JN might get Auto removed but
110:17 - John's home directory atome joh will
110:21 - remain and that's normal because his
110:24 - personal files might still be needed but
110:26 - if we're certain that those files aren't
110:28 - necessary anymore we can make the user
110:30 - Dell command also remove the user's home
110:33 - directory and his or her mail spool
110:36 - using this command and of course its
110:39 - equivalent short
110:41 - form now coming back to our user ad
110:44 - command if we're not happy with the
110:46 - defaults we could choose a different
110:47 - shell and a home directory with a
110:49 - command like this
110:53 - or its short form on the second
110:58 - line of course if we only want to choose
111:00 - a different shell but keep the default
111:02 - location for the home directory we can
111:05 - just pass this
111:10 - option these Account Details such as
111:12 - usernames user IDs group IDs preferred
111:16 - shells home directories Etc are stored
111:18 - in the file at Etsy password and we can
111:22 - see them if we type cat aty password so
111:26 - we'll see a line that looks like this
111:28 - the first number 1001 is the ID number
111:31 - associated with J's username the next
111:34 - 101 is the numeric ID of its primary
111:37 - group also called John in this case then
111:40 - we can see the home directory and the
111:43 - preferred login
111:44 - shell user ad will automatically select
111:47 - a proper numeric ID from the available
111:50 - IDs and it'll be incrementally done uh
111:53 - just by adding one to the last one so
111:55 - for the first user the ID will be 1,000
111:58 - for the next one it'll be 1,1 and so on
112:02 - if we want to manually select a
112:04 - different ID we can use a command like
112:07 - this where it's equivalent short
112:09 - form the user Smith will have the
112:13 - numeric ID 1100 but also the group
112:16 - called Smith will get a numeric ID of
112:20 - 1100 if we want to see what user name
112:22 - and group owns files or directories we
112:25 - can do so with the usual ls- l in this
112:28 - case we'll use the home group or home
112:31 - folder rather uh but if we want to see
112:34 - the numeric IDs of the user and group
112:37 - owners we can add the dash in for
112:40 - numeric option and they'll be shown to
112:44 - us it might also be useful sometimes to
112:47 - find out more about the users we're
112:49 - currently logged in as we can see the
112:52 - username were logged in as plus groups
112:55 - were're members of alongside their
112:57 - respective IDs with the ID
113:00 - command to print out just the username
113:04 - you can type who am
113:05 - I up until now we've created user
113:08 - accounts but there's another type we can
113:11 - create called system accounts to create
113:13 - a system account called
113:16 - cisac we just add the system option to
113:20 - user ad
113:23 - the numeric IDs of system accounts are
113:25 - also numbers smaller than 1,000 so we
113:29 - might see an ID like 976 or 978 for our
113:34 - CIS ACC account so why would we create
113:38 - these user accounts are intended for
113:40 - people and system accounts are intended
113:43 - for programs so there will be no home
113:45 - directory created since it's not needed
113:48 - and usually Damons use system accounts
113:50 - we might see something like a database
113:52 - program running under a system account
113:55 - now let's remove these users and their
113:57 - personal files if you're following along
114:00 - these will be the commands that you
114:01 - would use to get rid of John and Smith
114:04 - and if we ever forget the options for
114:06 - the user ad command we can get a quick
114:08 - reminder by using the help
114:12 - option now let's say we create the user
114:15 - John
114:16 - again but later we decide that we want
114:19 - to change some details for this account
114:22 - the command user mod or user modify
114:25 - that's what it stands for is used for
114:27 - this purpose so for example if we want
114:29 - to change John's home directory we could
114:32 - use user
114:33 - mod with these options the first line is
114:36 - the long version and the second line
114:38 - that appeared is the short
114:40 - version the move home option ensures
114:43 - that the old directory will be moved or
114:46 - renamed so that JN can still access his
114:48 - old files in our case slome joh was
114:51 - renamed to home/ other
114:54 - directory to change the username from
114:56 - John to Jane we could
114:59 - use either of these commands the long
115:01 - form or the short
115:03 - form and to change a user's login shell
115:07 - we could use either of
115:12 - these an often used option with user mod
115:16 - is lock or the equivalent short option
115:19 - with a capital
115:21 - l this effectively disables the account
115:24 - but without deleting it the user will
115:26 - not be able to log in with his or her
115:28 - password anymore however they might
115:31 - still be able to log in with an SSH key
115:33 - if such a login method has been
115:35 - previously set
115:37 - up to cancel this and unlock the account
115:41 - we can use the unlock option or its
115:44 - equivalent short form with a capital
115:46 - u uh we can set a date at which a user's
115:49 - account expires and to do that we'd use
115:52 - a command looks something like
115:55 - this after expiration they won't be able
115:58 - to log in and need to contact a system
116:00 - administrator to reenable their account
116:03 - if we want to immediately set an account
116:05 - as expired we can just choose a date
116:07 - that is in the
116:10 - past and the date format works like this
116:13 - it's year month and then day so to
116:17 - remove the expiration date just specify
116:19 - an empty date you'll use two quotes with
116:23 - nothing
116:25 - inside we can also set an expiration
116:28 - date on the password so please keep in
116:30 - mind that this is not the same as
116:32 - account expiration account expiration
116:34 - completely disables user logins password
116:37 - expiration forces the user to change
116:39 - their password the next time they log in
116:42 - they can still use the account we want
116:44 - to immediately set the password has
116:46 - expired we can use this command and chh
116:51 - change stands for change age so we would
116:54 - just set the last day to zero for Jane's
116:57 - account next time Jane logs in she'll
117:00 - have to change her
117:02 - password if we want to cancel this we
117:04 - can unexpire the
117:06 - password by passing
117:11 - ne1 and if we want to make sure that a
117:14 - user changes their password once every
117:16 - 30 days we could use the max days option
117:20 - and pass the parameter for 30
117:25 - so if we want to make sure their
117:26 - password never
117:28 - expires we can set max days
117:33 - toga1 and to see when the account
117:35 - password expires we can use the list
117:38 - option to see that
117:41 - information in case you follow along
117:43 - with this exercise you want to delete
117:45 - the user called Jane and the group
117:47 - called John and you can do so with these
117:49 - commands
117:52 - way if you haven't done so already don't
117:55 - forget to subscribe to our
118:00 - Channel now let's explore how to create
118:03 - delete and modify local groups and group
118:06 - memberships in
118:07 - Linux each user can belong to one or
118:10 - more groups and why are these useful
118:12 - well here are a few examples we have a
118:15 - directory full of files that our
118:17 - developers need to work on so they all
118:19 - need read and write permissions we'd
118:21 - have to allow three user accounts to
118:23 - edit these files John Jack and Jane An
118:27 - Elegant solution to this problem is to
118:30 - create a new group called developers
118:32 - then we add our three users to the
118:34 - developers group and finally we make the
118:36 - developers group the owner of those
118:38 - files and we change permissions so that
118:41 - the developers group can read and write
118:43 - to them now John being part of the
118:46 - developers group can easily edit those
118:48 - files and if we want to temporarily deny
118:50 - John access we just remove him from the
118:52 - developers group or if a new member
118:55 - joins our team we can just add their
118:57 - user account to the developers group and
118:59 - boom they have read and write access to
119:02 - those files we can see how this makes
119:04 - things easier to understand from an
119:06 - administrator's perspective it's like
119:08 - assigning roles to user accounts or like
119:10 - user accounts have a label is a
119:12 - developer or is not a developer all of
119:15 - this by simply deciding if they will be
119:18 - part of the developers group or not a
119:20 - part of that group
119:23 - and speaking of roles for user accounts
119:25 - groups can have other special effects
119:28 - for example being part of some group can
119:30 - grant special privileges on the system
119:32 - two common examples one is the users in
119:35 - the wheel or pseudo group who are
119:36 - allowed to do pretty much anything on
119:38 - the system they can run any program with
119:41 - root privileges with root being the most
119:43 - powerful user account in Linux another
119:45 - would be users in the docker group who
119:48 - can manage Docker containers
119:54 - we said that a user can belong to
119:55 - multiple groups but one of these groups
119:57 - is special one of them is the primary
120:00 - group while all of the others are
120:02 - secondary or supplementary groups the
120:05 - primary group is also called a login
120:07 - group that's because as soon as the user
120:09 - logs in this becomes his or her main
120:11 - group but it's hard to understand with
120:14 - Theory alone so let's see what so
120:16 - special about this primary group here
120:18 - are two practical examples when a user
120:21 - laun is a program it is said that it
120:23 - runs under that user account and group
120:26 - otherwise said the program runs with the
120:28 - same privileges that the user account
120:30 - and its primary group have and here's
120:33 - another perhaps more visible example
120:36 - when a user creates a file this file
120:38 - will automatically be owned by the user
120:40 - account and their primary or login
120:45 - group if you want to follow along with
120:47 - this exercise you'll need a user called
120:49 - John beforehand you can create one using
120:52 - the user ad command and it's easy enough
120:55 - to create a new group called developers
120:58 - with a command like this using group AD
121:01 - but how do we add our user John to this
121:04 - group the easiest way to add a user to a
121:07 - group is with the help of the G password
121:08 - command this name comes from the words
121:11 - group password but don't let the name
121:13 - fool you nowadays group passwords are
121:16 - almost never used in practice so the
121:18 - main use case for the G password utility
121:21 - is to add or remove users from certain
121:23 - groups and to add users we can use this
121:26 - G password command or its equivalent
121:29 - short form
121:30 - command and if we want to confirm that
121:32 - this has worked we can see the groups
121:34 - that John belongs to using the groups
121:36 - command so in this output the first
121:39 - group after the colon is the primary or
121:42 - login group and anything else that
121:45 - follows that are the secondary or
121:47 - supplementary groups and if we want to
121:50 - remove a user from a group we can use
121:53 - the delete option or the corresponding
121:55 - /d short
121:58 - option on rare occasions we might want
122:01 - to change the user's primary or login
122:04 - Group which is the group that was
122:05 - automatically created with the user
122:07 - account and has the same name as the
122:09 - user and we can do that with a command
122:12 - like this using user- lowercase G and a
122:16 - user can be part of multiple groups uh
122:18 - secondary groups are created separately
122:20 - from user accounts and a user can only
122:22 - have one primary group we have many
122:24 - secondary groups so while we're working
122:26 - with user mod it's important not to
122:28 - confuse this lowercase G with the
122:30 - capital G as the capital G option
122:33 - changes the secondary groups and not the
122:35 - primary one so to avoid this mistake we
122:38 - can make a habit to use the equivalent
122:40 - long option
122:42 - d-g instead of- lowercase
122:45 - G so now if we take a look at John's
122:50 - groups he's only a member of for the
122:52 - developer group that shows that it's his
122:54 - primary group has changed also like you
122:56 - to note a difference here G password
123:00 - first expects the username and then the
123:02 - group but user mod has a reverse order
123:04 - of group name and then the
123:07 - username and if you find yourself
123:10 - needing help and a refresher on this you
123:12 - can always use G password d-el to take a
123:15 - look at these options and that will show
123:19 - the corresponding syntax showing that
123:21 - the username name must come first when
123:22 - using G
123:25 - password now to rename the group called
123:28 - developers to programmers we could use a
123:30 - group mod command like this give it the
123:33 - new name
123:35 - option or we could use the equivalent
123:38 - short form command which is- in if we
123:41 - want to delete a group we have the group
123:43 - Dell
123:45 - command and if we try to run that we're
123:47 - going to see an error if it's someone's
123:50 - primary group say group cannot remove
123:52 - the primary group of user JN for example
123:56 - so to fix this we can change J's primary
123:59 - group back to the John group with this
124:02 - user mod command and now we can finally
124:04 - delete the programmer group so if a user
124:08 - is part of a secondary group and we want
124:10 - to delete it the command will work
124:12 - without any issues there's no need to
124:14 - First remove the user from that group
124:16 - before deleting it so head over to the
124:19 - labs using the links given below and
124:21 - come back here once you are
124:28 - done now let's look at managing user
124:31 - resource limits and
124:33 - Linux when we have a lot of users
124:36 - logging into the system we may want to
124:38 - impose limits on what resources they can
124:41 - use this way we can ensure that user a
124:44 - does not use 80% of the CPU leaving very
124:47 - little topair for the others to set such
124:50 - a limit we can edit this
124:53 - file we can see as we look through it
124:56 - that it's a Well documented file uh we
124:58 - want to move down until we see this so
125:02 - we can see that the Syntax for setting a
125:05 - limit is domain type item and then value
125:11 - so let's break this down into easy to
125:13 - understand Parts first the
125:16 - domain what we what can we specify here
125:19 - usually it's one of these three things
125:22 - one is the username uh in this case we
125:25 - can just simply type the name of the
125:26 - user such as
125:28 - Trinity uh we can use a group name to
125:31 - set a limit for everyone in the
125:33 - developers group we just add an at
125:36 - symbol in front of its name so we'd
125:38 - write at developers to get such a group
125:42 - limit and the next thing that we can use
125:44 - is an asteris which will match
125:47 - everything uh setting a limit for
125:49 - asteris basically says set this limit
125:51 - for every user on the system so it's a
125:55 - way to set a default limit why default
125:59 - because this limit will only apply to
126:01 - every user that is not mentioned in this
126:03 - list a user limit overrides an asterisk
126:07 - limit so for example uh one asterisk
126:11 - limit can specify that everyone can only
126:13 - launch 10 processes but then another
126:15 - limit for the user Trinity says she can
126:17 - launch 20
126:19 - processes in this case the Li for
126:21 - everyone will be 10 that's the default
126:24 - but for Trinity it will be set at
126:29 - 20 next is the type which can be three
126:33 - different values hard soft and
126:38 - dash a hard limit cannot be overridden
126:42 - by a regular user if a hard limit says
126:45 - they can only run 30 processes they
126:48 - cannot go above that so it's basically
126:50 - the top the max maximum value for a
126:52 - resource someone can use so to set a
126:55 - hard limit just specify it there in the
126:58 - second
126:59 - field a soft limit on the other hand is
127:03 - different instead of a max value this is
127:06 - more like the startup limit the initial
127:08 - value for the limit when the user logs
127:11 - in if a user has a soft limit of 10
127:14 - maximum processes and a hard limit of 20
127:17 - the following happens when they log in
127:20 - the limit will be set to 10 process
127:21 - processes but if the user has some
127:24 - temporary need to increase this they can
127:26 - raise it to 11 12 15 or even 20
127:30 - processes this way they can get a slight
127:33 - increase when absolutely required so
127:35 - they can manually raise it to anything
127:37 - they require but never above the hard
127:39 - limit and last we have the dash sign
127:43 - this specifies that this is both a hard
127:45 - limit and a soft limit with this we're
127:48 - saying our triny should be able to run
127:51 - 20 processes at the most when she logs
127:54 - in she should be able to use up to her
127:56 - entire allocation without needing to
127:59 - manually raise her
128:02 - limit next up is the item value this
128:06 - decides what this limmit is for we can
128:10 - have things such as inoc and inoc sets
128:14 - the maximum number of processes that can
128:17 - be open in a user session we could have
128:20 - IDE is which sets the maximum file size
128:24 - that can be created in this user session
128:26 - the size is in kilobytes so 1024 here
128:30 - means the maximum file size is 1,24
128:33 - kilobytes which is exactly 1
128:35 - Megabyte we can also use CPU and CPU
128:39 - sets the limit for CPU time this is
128:42 - specified in minutes so when a process
128:45 - uses 100% of a CPU core for 1 second it
128:48 - will use up 1 second of its allocated
128:51 - time
128:52 - if it uses 50% of one core for 1 second
128:55 - it will use up 0.5 seconds of its
128:59 - allocation even if a process was open 3
129:02 - hours ago it might have only used 2
129:04 - seconds of CPU time if you want to see
129:07 - more stuff that can be limited just
129:09 - consult the user manual for this
129:12 - limits.on file using the man
129:17 - command Let's test our knowledge and add
129:20 - a limit for our user called Trinity to
129:22 - ensure that she can open a maximum
129:24 - number of three processes so first we'd
129:27 - find this line in the file and to do
129:29 - that we would add a line that looks like
129:32 - this we want to make sure there's no
129:35 - pound sign or hash sign number sign uh
129:38 - whatever you would like to call that
129:40 - comment sign at the beginning of this
129:42 - line the Vim editor might automatically
129:45 - add it when you press enter to add a new
129:47 - line here so make sure to delete the
129:50 - proceeding sign otherwise the line would
129:53 - be commented and have no effect now
129:56 - let's save our file and exit to log in
130:00 - as Trinity we can enter this
130:03 - command I instructs sudu to do a real
130:06 - login and you specifies the user we want
130:09 - to log in as so at this moment only one
130:13 - process is permanently running in her
130:14 - session The Bash shell so we should be
130:17 - able to run two more processes let's
130:19 - launch PS and pipe the the output to the
130:22 - less
130:24 - pager we can see it works and now it got
130:27 - us to running three processes the
130:29 - maximum limit now what would happen if
130:32 - we tried to launch the fourth process so
130:35 - let's press Q to quit the L pager and
130:37 - then try the
130:41 - following this would try to launch three
130:43 - new processes LS GP and less plus bash
130:48 - already running which would total four
130:50 - processes and we'll see this failing as
130:52 - expected we cannot run more than three
130:57 - processes so let's type log out to exit
131:00 - from Trinity session so if we want to
131:03 - see the limits for our current session
131:06 - we can type UL limit d a we have small
131:10 - hints between parentheses for example we
131:13 - can
131:13 - see-u displayed for Max user processes
131:18 - this means that we could type UL li-
131:21 - th000 to set our limit to 5,000
131:24 - processes by default a user can only
131:27 - lower his limits not raise them the
131:30 - exception is when there are hard and
131:32 - soft limits in that case the user can
131:35 - raise his or her limit all the way up to
131:36 - the hard value but only once after the
131:40 - limit is raised with a U liit command
131:42 - the next command can only lower it it
131:45 - cannot be raised the second time even if
131:47 - the hard limit would allow it
131:54 - now let's examine how to manage user
131:56 - privileges in
131:59 - lenux every time we had to make some
132:01 - important changes to the system we used
132:04 - Pudu in our commands that's because only
132:07 - the root user also called super user can
132:10 - make changes to important areas of the
132:12 - operating system whenever we put sudu in
132:15 - front of a command that command runs as
132:17 - if the root user executed it so how come
132:21 - our user is allowed to use
132:23 - sudu if we type the groups command we'll
132:27 - see our user is part of the wheel group
132:29 - whoever is part of this group is
132:31 - automatically allowed to use
132:33 - sudu this means that the easiest way to
132:36 - give another user sudu privileges is to
132:38 - add them to the wheel group to add our
132:41 - user Trinity to the wheel group use a
132:44 - command like this and that's it now this
132:48 - user can get administrator privileges
132:50 - whenever they want
132:51 - but this gives them power to do anything
132:54 - they want on our system what if we want
132:56 - a more fine-tuned control then we could
132:59 - take a different
133:01 - approach there's a special file at Etsy
133:05 - PSE sudoers that defines who can use
133:08 - sudu and under what conditions what
133:10 - commands they can run and so on but we
133:14 - should not edit this file directly we
133:17 - use a utility called
133:19 - vudo this utility can check if our edits
133:22 - are correct to help us avoid mistakes in
133:24 - the file so first let's remove Trinity
133:27 - from the wheel group to make sure she
133:29 - can't use Pudu anymore and instead
133:31 - Define a different Pudu policy for her
133:33 - later we can remove her with this
133:37 - command and then to start editing the
133:40 - Etsy sudoers file we use sudu
133:44 - Vu and this opens in the Vim editor the
133:48 - file is Thoroughly commented but we're
133:50 - not interested in the first few parts so
133:53 - let's navigate to the end and we'll
133:55 - notice this
133:57 - line now we see why any user added to
134:00 - the wheel group can run any command with
134:03 - Pudu so let's break down this line into
134:06 - four different parts and analyze what
134:08 - they
134:09 - do the first is the user or group here
134:13 - we Define who this policy is
134:15 - for the second is the host here we could
134:19 - specify that these rules only apply if
134:21 - our server's host name or IP address has
134:24 - a specific value not useful for our
134:27 - purposes so we'll just type all for this
134:30 - host
134:31 - field the third is the run as field here
134:36 - we could type a list of usernames
134:39 - normally sudu uh LS would run the ls
134:43 - command as root because that's what sudu
134:46 - does it runs the command after it as a
134:48 - different user but sudu can also also be
134:51 - used so that Aaron can run commands as
134:53 - Jane or vice versa we'll see more about
134:56 - this later so if we list Aaron comma
134:59 - Jane in this run as field then sudu can
135:03 - only be used to run commands as the user
135:05 - Aaron or Jane but not root and finally
135:08 - the fourth field is the list of commands
135:10 - that can be executed with Pudu so we
135:13 - could say the Syntax for policy defined
135:16 - in the sudo file looks like this
135:22 - now let's go through some examples to
135:24 - define a policy for our Trinity user and
135:27 - let her run any sudu command we would
135:29 - need to add a line that looks like
135:32 - this to specify a policy for all users
135:36 - in the developers group we would add a
135:38 - line like
135:40 - this we mentioned sudu lets us run
135:43 - commands as root but also as non-root
135:46 - regular users so for example to run the
135:49 - ls home Trinity command as the user
135:52 - called Trinity we could write this as a
135:56 - command after the dasu we specify the
135:59 - username we want to run as so if this
136:03 - third field is all then this policy
136:07 - allows someone to run sudu commands as
136:09 - any user but if we'd want to have
136:13 - Trinity to only be able to run sudu
136:16 - commands as the users Aaron or John we
136:18 - could write a line like this
136:22 - also uh note that this is wrapped in
136:24 - parenthesis which hints to us that the
136:27 - field is optional so a line like this is
136:31 - also
136:31 - valid and we mentioned that in the
136:34 - fourth field we can specify a list of
136:36 - commands with our previous entries the
136:39 - user or group granted Pudu privileges
136:42 - could execute any command but we could
136:45 - limit them like
136:47 - this now Trinity could only run commands
136:51 - such as sudu LS or sudu stat
136:55 - bin only LS and Stat commands would work
136:58 - if trity tries a command like this she
137:02 - would get an
137:04 - error and since we specify the Third
137:06 - Field as
137:08 - optional this line could also be written
137:11 - to look like
137:13 - this we know that the first time we run
137:15 - a Pudu command in a session it asks for
137:18 - our current user's password and our Pudu
137:21 - file we see a hint above how we could
137:23 - get rid of this
137:24 - requirement so we could use the example
137:27 - in the comments which looks like this
137:30 - and figure out how to apply this for our
137:32 - user Trinity if we want her to be able
137:34 - to run pseudo commands without providing
137:37 - her password we could write this line in
137:39 - the sudoers
137:40 - file so head over to the labs using the
137:43 - links given below and come back here
137:45 - once you are
137:49 - done now let's examine how to manage
137:52 - access to the root account in
137:55 - Linux we already saw one method to
137:58 - temporarily become root whenever needed
138:00 - when we run a command such as this using
138:03 - Pudu it's basically the same as if the
138:06 - root user would have executed that
138:08 - command but what if we want to log in as
138:11 - root for a user with pseudo access we
138:14 - can enter this command or its equivalent
138:17 - short form command and that's it we're
138:20 - logged in as root to exit from root
138:23 - session we'll type log
138:25 - out if the user does not have Pudu
138:28 - privileges but knows Roots password they
138:31 - can use
138:34 - su- or
138:35 - s-l or the long form with-- login all of
138:40 - these commands do the same thing they
138:42 - log you in as
138:44 - root some systems might have the root
138:47 - account locked this does not mean that
138:49 - we can't use the root user it just means
138:52 - that we can't do a regular login with a
138:54 - password when root is locked we can
138:57 - still use sudu login to login as root
139:01 - but we can't use su- as that would ask
139:05 - us for roots password which is currently
139:08 - locked if we want to allow people to log
139:10 - in as root with a password we have two
139:13 - options if root and never had a password
139:16 - set we could just choose a new password
139:18 - for it
139:20 - or if root had a password set in the
139:23 - past but then the account was locked for
139:26 - some reason we can unlock
139:29 - it using either long or short form of
139:32 - the password unlock command and after
139:36 - using one of those steps then we can use
139:38 - su- and type the password for root to
139:41 - log in of course we could find ourselves
139:44 - in the reverse scenario imagine this
139:47 - currently people can log in as root we f
139:50 - figure that this is a bit insecure and
139:53 - so we can lock password based logins to
139:55 - the root account with the lock function
139:59 - of the password command either the long
140:02 - or the short version would do the same
140:04 - thing so other logins might still be
140:07 - possible if they were previously set up
140:09 - for example if an administrator has set
140:11 - up logins via an SSH private key they'll
140:15 - still be able to log in even if the root
140:17 - account is locked make sure to only lock
140:19 - root if your user can use sudu commands
140:23 - with no root login and no sudu you'll
140:25 - find yourself in the situation of not
140:27 - being able to become root at all but
140:29 - effectively locking yourself out not
140:32 - able to change important system settings
140:35 - anymore so here we are at the end of
140:38 - this Linux crash course I hope you
140:40 - enjoyed the material and gained
140:42 - experience to the labs we've covered the
140:44 - basics of Linux but there's a lot more
140:47 - there's more to learn about networking
140:49 - service configur configuration storage
140:51 - management troubleshooting monitoring
140:54 - Process Management and so much more like
140:57 - virtualization for example all of these
140:59 - are covered in the Linux learning path
141:02 - so this covers three certification
141:03 - courses the Linux Foundation certified
141:05 - systems administrator the lpic-1 series
141:10 - and the red hat certified systems
141:12 - administrator course don't forget to
141:14 - subscribe to our Channel as we release
141:16 - new videos about Cloud native and
141:18 - kubernetes all of the time until next
141:21 - time goodbye