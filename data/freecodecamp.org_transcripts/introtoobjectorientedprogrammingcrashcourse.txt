00:00 - hello everyone
00:02 - welcome to an introduction to object
00:04 - oriented programming
00:06 - in this course
00:08 - we will be getting into what
00:09 - object-oriented programming means
00:12 - as well as going over its four main
00:14 - principles
00:16 - this course will assume that you have
00:18 - some knowledge of programming before
00:19 - hopping in
00:21 - if that's not the case
00:23 - i would suggest checking out our
00:24 - introduction to programming video which
00:27 - will be linked in the description
00:29 - that video will give you information on
00:31 - the basics of programming that are
00:33 - necessary to be able to understand more
00:36 - advanced topics such as those covered in
00:38 - this video
00:39 - for this lecture
00:41 - we will be exploring object oriented
00:43 - programming in a manner that will be
00:45 - applicable for its use in any
00:47 - programming language in which it is
00:48 - supported
00:51 - examples will be used to explain the
00:52 - concept being discussed
00:54 - however they will be explained well
00:56 - enough that specific knowledge of the
00:58 - language being used in the example will
01:00 - not be necessary
01:02 - with that being said let's get into it
01:05 - in this first section
01:07 - we will be going over what object
01:09 - oriented programming actually is
01:12 - in order to understand what
01:14 - object-oriented programming is
01:16 - it's best to first understand what
01:18 - objects are
01:19 - and in order to do that
01:21 - it's best to first understand what
01:23 - primitive data types are
01:24 - so let's start there
01:26 - primitive data types are exactly what
01:28 - they sound like
01:30 - variables that store single simple
01:32 - values
01:34 - examples of such primitive types are the
01:36 - byte
01:37 - int
01:38 - float
01:39 - double boolean and char
01:42 - these primitive types only act to store
01:45 - a single piece of data of a certain kind
01:48 - and for a while when programming was
01:50 - still developing this was just fine many
01:54 - programs being written at the time
01:56 - weren't complex by today's standards
01:58 - thus programmers could get away with
02:00 - only using these primitive types
02:03 - however
02:04 - as programs became larger and more
02:06 - complex primitive data types weren't
02:09 - really cutting it anymore
02:11 - programmers began to want to group
02:13 - variables of similar type together
02:15 - why would this be useful
02:17 - well to serve as an example let's
02:19 - imagine you are trying to program a
02:20 - chess game when programming a knight
02:23 - into the game there are plenty of
02:25 - variables that you will need in order
02:27 - for the piece to work how it should
02:29 - for example
02:30 - you would need a position variable to
02:32 - keep track of where the knight is
02:35 - additionally
02:36 - you would need a boolean to represent
02:38 - whether the piece has been captured or
02:40 - not
02:41 - because if it has
02:42 - you would not want it to show up
02:44 - nor should you be able to move with it
02:47 - you may also need a variable to
02:49 - represent which color the knight is
02:51 - so that the game can treat it correctly
02:54 - these are just a few of the variables
02:55 - that you would need for one piece
02:57 - and you would need one of each of these
02:59 - variables for each piece on the board
03:02 - each of which would contain different
03:03 - data
03:04 - clearly it would be easiest if you could
03:07 - group all of the variables related to
03:09 - say one of your knights together
03:12 - so that you may deal with them as one
03:14 - entity
03:15 - additionally
03:17 - you may want to group your two knights
03:18 - together as they behave similarly
03:21 - you then may want to group the pieces of
03:23 - each side together as they would be
03:25 - treated differently in reference to each
03:27 - other
03:28 - in essence grouping related variables
03:31 - together is almost necessary when it
03:33 - comes to complex programs
03:36 - this is where the struct or structure
03:39 - came in
03:40 - in c
03:42 - the structure is similar to an array
03:44 - if you don't know what an array is i'd
03:46 - suggest you check out either our
03:48 - introduction to programming course for
03:50 - an overview
03:51 - or our data structure series for a more
03:53 - in-depth look at both arrays and many
03:55 - other data structures
03:58 - both arrays and structures allow the
04:00 - programmer to store several pieces of
04:02 - data together
04:04 - however structures vary from arrays in
04:06 - that structures allow the programmer to
04:08 - store data of different types together
04:11 - for instance whereas an array would
04:13 - allow you to store only ins or only
04:15 - strings
04:16 - using a structure you could store ins
04:19 - and strings together along with other
04:21 - data types
04:23 - a structure can even store other
04:24 - structures within it
04:26 - a structure can be very useful in the
04:28 - earlier chess example because you could
04:30 - store all of the useful pieces of data
04:32 - related to the knight in one structure
04:34 - that represents that knight
04:37 - you could then store your knight
04:38 - structures together in one structure
04:40 - that represents all of the knights and
04:42 - so on
04:44 - the structure allowed such grouping to
04:46 - take place beyond what arrays were
04:48 - capable of
04:49 - the structure is in many ways the
04:52 - precursor to the object which of course
04:55 - object oriented programming is oriented
04:57 - around
04:59 - the main issue with using a structure in
05:01 - this way
05:02 - and an issue that objects would come to
05:03 - remedy
05:04 - was that you could not define functions
05:06 - within a structure you could only
05:07 - reference them
05:09 - when object-oriented programming came
05:11 - along
05:12 - objects allowed you to store data of all
05:14 - kinds together and additionally define
05:17 - and store functions
05:19 - now before we go much further i should
05:22 - get into exactly what objects are
05:24 - objects are instances of a class
05:27 - and a class is basically a template for
05:29 - an object
05:31 - this may seem like a circular way of
05:33 - looking at these concepts but allow me
05:34 - to explain
05:36 - let's say i define a night class
05:39 - in this class i would define and store
05:41 - data that is common of all knights
05:44 - this would be mainly the way that
05:46 - knights are able to move
05:48 - thus in this class i would define a
05:51 - function that uses the knight's current
05:52 - position to return squares that the
05:54 - knight can move to
05:56 - i may also define a position variable
05:59 - as well as a color variable but i would
06:02 - not initialize them
06:04 - when it comes to specific things such as
06:06 - variables that each object under the
06:08 - class
06:09 - in this case each night would have
06:11 - different data for it's best to define
06:13 - them when i create the object rather
06:16 - than in the class itself
06:18 - for instance each of the four knights
06:20 - that begin in a game of chess start on
06:22 - different squares than one another
06:25 - initializing the position variable in
06:27 - the night class would imply that you
06:29 - want each knight object created from
06:31 - this class to begin with the same
06:32 - position which you do not
06:35 - however
06:36 - each of the knights would behave the
06:38 - same in terms of the squares it could
06:40 - move to based on their position
06:42 - and thus it is best to define a move
06:44 - function in the class rather than
06:46 - repeating the same function definition
06:48 - in each object that i create
06:52 - when creating a night object you
06:54 - initialize its attributes or its
06:56 - variables
06:57 - and its methods or its functions to
07:00 - contain information specific to that
07:02 - night
07:03 - whereas the night class represents any
07:05 - given night
07:07 - a night object represents one night in
07:09 - particular
07:11 - essentially object-oriented programming
07:13 - is the best tool us programmers have
07:16 - right now to create complex programs by
07:18 - grouping together related data and
07:20 - functions
07:21 - throughout the course of this video we
07:23 - are going to be getting into detail into
07:25 - how all of this works using the four
07:27 - main principles of object-oriented
07:29 - programming those being encapsulation
07:33 - abstraction
07:34 - inheritance and polymorphism
07:38 - this next section is going to be
07:40 - focusing on the first of the four main
07:42 - principles of object-oriented
07:44 - programming
07:45 - encapsulation
07:47 - encapsulation refers to bundling data
07:50 - along with methods that can operate on
07:52 - that data within a class
07:55 - essentially it is the idea of hiding
07:57 - data within a class that anything
07:59 - outside that class cannot directly
08:01 - interact with
08:03 - that is not to say that they are unable
08:05 - to interact with the separate object's
08:06 - attributes at all however
08:08 - instead
08:10 - members of other classes looking to
08:11 - interact with the attributes of an
08:13 - object should only be able to do so
08:16 - through that class's methods
08:19 - in practice
08:20 - one way this tends to work is by
08:22 - creating getting and setting methods
08:25 - these methods act to either get
08:27 - information from an object or set
08:29 - attributes to different values
08:32 - for instance
08:33 - think back to the chess example from the
08:35 - previous section
08:37 - if i was moving one piece and i wanted
08:39 - to determine whether it was able to
08:40 - capture another piece
08:42 - i would need to define a dot get method
08:45 - associated with each piece that returns
08:47 - the piece's color in this case piece dot
08:50 - get color
08:51 - this way
08:52 - i could check the color of any piece
08:54 - from anywhere in my code without having
08:57 - to access the internal attributes of
08:59 - said pieces
09:00 - this allows us to retrieve the
09:02 - information from where it is defined
09:06 - additionally
09:07 - this makes it easiest to keep track of
09:09 - attributes that depend on one another
09:13 - for example
09:14 - if i was programming a game
09:16 - i may have two different attributes for
09:18 - the player's health
09:20 - maxhealth and current health
09:23 - when the character levels up
09:25 - i may have their max health increase as
09:27 - well
09:29 - when this happens
09:31 - i would want the current health to be
09:32 - set to the maximum health
09:35 - instead of changing both of these values
09:36 - directly
09:38 - i can define the set max health method
09:40 - such that the current health is also set
09:43 - to the maximum health once the maximum
09:45 - health has increased
09:47 - furthermore
09:48 - these setting methods allow values to be
09:51 - validated
09:52 - for instance
09:53 - if current health is not able to exceed
09:56 - maximum health
09:57 - then i would have the set current health
09:59 - method check if current health would be
10:02 - greater to maximum health before making
10:04 - the change
10:07 - finally you may want some values to be
10:10 - read only from outside a class
10:12 - which means you would only define a
10:14 - getter method and not a center method
10:17 - for another example
10:19 - let's look back at chess
10:21 - when dealing with a piece's position
10:24 - you would want to keep track of its rank
10:26 - or its row
10:27 - and its file or its column
10:30 - when the piece moves you may think it
10:32 - would be okay to just set piece.rank and
10:35 - piece.file to new values
10:38 - however
10:39 - as discussed above
10:41 - this is not the best way to handle it
10:44 - it would be better to define a ps.move
10:46 - function that takes the intended new
10:48 - position and checks if that is indeed a
10:51 - valid move
10:52 - the piece would not be able to move if
10:54 - say the new location is off the board
10:57 - a piece of the same color is already on
10:59 - that square
11:00 - or making such a move would put the king
11:02 - of the same color in check
11:05 - additionally
11:06 - other methods may be called from this
11:08 - move method for instance one that
11:10 - captures an enemy piece if it was on
11:12 - that square
11:13 - or one that puts the enemy king in check
11:16 - were the pieces attributes just to be
11:18 - directly changed
11:20 - you could end up in a strange situation
11:22 - where illegal moves are played and
11:24 - pieces occupy the same square
11:27 - essentially
11:28 - getter methods allowing validation can
11:31 - be very useful
11:33 - encapsulation is useful for a variety of
11:36 - reasons
11:37 - as we just went over it is best to not
11:40 - allow anything external to directly edit
11:43 - an object's attributes
11:45 - this is especially true when working on
11:48 - large and complex programs where you may
11:51 - want individual pieces of the program to
11:53 - work well without requiring them to rely
11:56 - on every other section of the code
11:59 - in this way
12:00 - preventing each piece of your code from
12:02 - referencing and requiring knowledge of
12:05 - the inner workings of each other section
12:06 - of code is very important to keep your
12:09 - program from becoming completely
12:11 - entangled in itself
12:13 - this is an idea we will touch upon in
12:15 - future sections to come
12:17 - but for now it's best to understand that
12:19 - information hiding that is keeping one
12:21 - class from being able to directly access
12:23 - the data of another class
12:26 - is important to keep control of your
12:27 - program and reducing its overall
12:29 - complexity
12:31 - overall
12:32 - encapsulation is a vital component of
12:34 - object-oriented programming that allows
12:36 - the programmer to maintain control of
12:38 - their data
12:39 - and to keep their program from ending up
12:41 - in any unwanted states
12:48 - in this next section we are going to be
12:50 - discussing the next of the four main
12:52 - principles of object-oriented
12:53 - programming abstraction
12:56 - abstraction refers to the idea of only
12:58 - showing essential details and hiding
13:00 - everything else
13:02 - this idea is present in everyday life
13:05 - when you drive your car there are some
13:07 - things you need to understand about
13:09 - you need to understand how the steering
13:11 - wheel steers the car and how the gas and
13:14 - brake pedals work
13:15 - you also need to know how much gas your
13:17 - car has and that it needs gas to work
13:20 - these are necessary details for you to
13:22 - be able to drive the car properly
13:25 - however the exact way that the car works
13:27 - internally isn't something that most
13:29 - people need to concern themselves with
13:31 - how the gas reacts in the engine and how
13:33 - that translates into the car moving
13:35 - forward really isn't important while you
13:37 - are driving your car
13:38 - all that matters is that you know it
13:40 - will work this way
13:42 - whoever built the car had to worry about
13:44 - how exactly the car would work so that
13:46 - you don't have to
13:47 - this idea extends to object-oriented
13:50 - programming
13:51 - the classes you create should act like
13:53 - your car
13:55 - users of your classes should not worry
13:57 - about the exact inner details of said
13:59 - classes
14:00 - this idea is similar to that of
14:02 - encapsulation that we discussed in the
14:04 - previous section
14:06 - earlier we mentioned how you should not
14:08 - have classes directly interact with the
14:10 - data stored within other classes
14:12 - rather have them use the classes methods
14:14 - to access their data
14:16 - this idea is especially important when
14:18 - you want to work on your program
14:19 - incrementally where you focus on one
14:21 - class at a time
14:23 - and ensure that it works
14:24 - this is a very useful approach as it can
14:26 - be difficult for you to focus in the big
14:28 - picture while programming and splitting
14:30 - up your project into smaller chunks can
14:32 - make it much more manageable
14:35 - furthermore
14:36 - programs nowadays are vast and complex
14:38 - to the point where multiple programmers
14:40 - tend to work on one project
14:43 - in this case
14:44 - it's best if the section that you are
14:46 - working on is able to function without
14:48 - knowledge of the inner workings of your
14:49 - colleague section
14:51 - to achieve this it's best to think of
14:53 - your program in terms of interface and
14:56 - implementation the interface refers to
14:59 - the ways that sections of code are able
15:01 - to communicate with one another
15:03 - this is typically done through methods
15:05 - that each class is able to access
15:08 - the exact implementation of these
15:10 - methods or how the methods are coded
15:13 - should be hidden within the class and
15:15 - not accessible from the outside
15:17 - think of this like the car
15:19 - the other classes are able to turn the
15:21 - wheel and push the gas
15:23 - and they know what the outcome should be
15:25 - without caring about exactly how this
15:27 - gets done
15:29 - let's return to the chess example that
15:31 - we've been using throughout the video
15:34 - let's say that you are working on making
15:35 - the night work as it should and a fellow
15:37 - programmer is working in the king class
15:41 - in order to effectively work together
15:43 - you need to agree on an interface with
15:46 - which these pieces are able to
15:47 - communicate
15:49 - in this case
15:50 - say that you are working on making the
15:52 - knight unable to move if your king is in
15:54 - check
15:55 - as the programmer of the night class
15:58 - you make the knight use the king's
16:00 - getter method that will let the knight
16:02 - know whether or not the king is in check
16:05 - if it is
16:06 - then you make it so the knight is not
16:08 - able to move unless it is able to put
16:10 - the king out of check
16:12 - as you program the night class you
16:14 - should not be concerned with how the
16:16 - king is determining whether or not it is
16:18 - in check
16:19 - the king's method that tells the knight
16:21 - whether or not it is in check is part of
16:22 - the interface
16:24 - but how exactly it does that is part of
16:26 - the implementation
16:28 - this manner of only allowing the classes
16:31 - to interact through a predetermined
16:33 - interface
16:34 - prevents different pieces of the program
16:36 - from becoming completely coupled
16:38 - together
16:39 - if the night class has to look into the
16:42 - king class in order to make a
16:43 - determination
16:45 - then it is reliant on the king class
16:46 - being set up in a certain way in order
16:49 - to function
16:51 - if the king clash is changed or
16:53 - reorganized or its data is renamed
16:56 - then the night class would no longer
16:58 - work and it too would have to be changed
17:01 - assuming the rest of the program was
17:03 - coded in this way
17:04 - then many other classes would also have
17:07 - to be modified
17:09 - creating a set interface through which
17:11 - classes can interact with one another
17:13 - ensures that each individual piece can
17:16 - be changed without creating a ripple
17:18 - effect that causes the entire program to
17:20 - have the change in response
17:23 - overall it's best to keep in mind
17:26 - abstraction when writing object oriented
17:28 - code
17:29 - as it allows the program to be worked on
17:31 - incrementally and prevents it from
17:33 - becoming completely entangled in itself
17:35 - and very complex
17:38 - determine specific points of contact
17:39 - that can act as the interface between
17:41 - classes
17:42 - and only worry about the implementation
17:44 - behind it when working on that section
17:51 - this next section will be tackling
17:53 - inheritance
17:54 - the third of the main principles of
17:56 - object oriented programming
17:59 - inheritance is the principle that allows
18:01 - you to derive classes from other classes
18:04 - classes can inherit certain methods and
18:07 - attributes from another class
18:10 - we will get into exactly what this means
18:12 - in a moment but first let's look at an
18:14 - example
18:16 - let's say you are programming a game
18:19 - in this game the player has access to
18:21 - weapons to fight their enemies
18:24 - to begin you may establish a weapons
18:26 - class this class would contain many of
18:29 - the pertinent attributes and methods
18:31 - common to weapons
18:33 - for instance an attribute that
18:35 - represents the damage that the weapon
18:36 - deals
18:37 - and a method that deals damage to an
18:39 - opponent when called
18:41 - you then would want some more classes to
18:43 - represent specific weapons such as a
18:46 - sword or a club
18:48 - these classes would act differently from
18:50 - one another as swords and clubs have
18:52 - certain different attributes such as a
18:54 - sword being made for cutting
18:56 - whereas a club is blunt
18:58 - these differences would be represented
19:01 - in different values for their attributes
19:03 - as well as possibly different attributes
19:05 - altogether
19:07 - however
19:08 - they do share much of the same behavior
19:10 - as they are both members of the weapons
19:12 - class
19:14 - in this case
19:15 - the weapon class would be the superclass
19:18 - and the sword and club classes that
19:20 - extend the weapon class would be
19:22 - subclasses in relation to it
19:25 - many of the attributes and methods
19:27 - associated with the weapon class would
19:30 - also be present in its subclasses
19:33 - any given sword or club would also want
19:36 - access to the methods that allow them to
19:38 - deal damage
19:39 - as well as the attributes that detail
19:41 - how much and what type of damage they
19:43 - deal
19:45 - the class hierarchy does not tend to be
19:47 - so small however
19:49 - as in most cases there are many more
19:51 - layers than just one superclass and a
19:53 - couple of subclasses
19:56 - the weapon class may be a subclass to a
19:58 - broader items class
20:00 - which could contain many other
20:01 - subclasses with subclasses of their own
20:04 - additionally you may include a wider
20:07 - variety of weapons than just swords and
20:09 - clubs
20:10 - as well as multiple types of swords that
20:13 - would require different behaviors and
20:15 - thus their own subclasses
20:18 - when you are writing object-oriented
20:20 - code
20:21 - many of the classes you create will fit
20:24 - somewhere in the broader class hierarchy
20:26 - which acts as a web of classes with
20:28 - different relationships to one another
20:31 - the next important topic to cover in
20:34 - terms of inheritance is the access
20:36 - modifiers that change which classes
20:38 - access which attributes methods or even
20:41 - classes as a whole
20:43 - there are three main access modifiers
20:46 - that we will be discussing
20:48 - public
20:49 - private
20:50 - and protected
20:52 - let's begin with the public modifier
20:55 - public is probably the most simple of
20:57 - the modifiers
20:59 - a public member or class can be accessed
21:02 - from anywhere
21:03 - this includes any superclasses
21:06 - subclasses or anywhere else in the
21:08 - program
21:09 - this is very useful when you need to
21:12 - have access from a wide variety of
21:14 - places in your program
21:16 - to better understand this modifier and
21:19 - those to come
21:20 - look to the example class hierarchy on
21:22 - screen that represents different foods
21:25 - for each example the member in question
21:28 - will be defined in the fruit class
21:30 - green classes have access and red
21:32 - classes do not
21:34 - as you can see
21:36 - a public member being defined in this
21:38 - class or anywhere else can be accessed
21:40 - from anywhere in your program
21:44 - next we have the private modifier
21:48 - private members can only be accessed
21:50 - from within the same class that the
21:52 - member is defined
21:54 - this is best to use if you do not need
21:57 - this information accessed from anywhere
21:59 - else in the program
22:01 - additionally
22:02 - this allows you to create other private
22:05 - members of the same name in separate
22:07 - classes which will not conflict with one
22:09 - another due to their private access
22:11 - modifier
22:13 - as you can see on the example class
22:15 - hierarchy
22:17 - a private member defined in the fruit
22:19 - class
22:20 - can only be accessed inside the fruit
22:22 - class
22:24 - we then have the protected modifier
22:27 - a protected variable can be accessed
22:29 - from within the class it is defined
22:31 - as well as any subclasses of that class
22:34 - essentially
22:36 - protected variables are private to the
22:38 - class hierarchy that they are defined in
22:41 - this can be seen in the example class
22:43 - hierarchy right now
22:49 - in this final section we will be
22:51 - covering the final of the four main
22:53 - principles
22:55 - polymorphism
22:56 - polymorphism describes methods that are
22:59 - able to take on many forms
23:02 - there are two types of polymorphism
23:05 - the first one is what is called dynamic
23:07 - polymorphism
23:09 - dynamic polymorphism occurs during run
23:12 - time when the program is being executed
23:16 - this describes when a method signature
23:18 - is present in both a subclass and a
23:20 - superclass
23:22 - the methods share the same parameters
23:25 - but have separate implementation
23:27 - in this case
23:28 - the subclasses implementation of the
23:30 - method overrides the superclasses
23:34 - let's go over an example
23:36 - let's say you are writing a program to
23:38 - represent many different types of cars
23:40 - in a class hierarchy
23:43 - at the top of the hierarchy you may have
23:45 - the generic car class
23:48 - you then may create a sports car class
23:51 - as a subclass of the car class
23:54 - you then may create a dot drive method
23:56 - in both of the classes
23:58 - in each of the classes the dot drive
24:01 - function will take a double representing
24:03 - the number of miles you would like the
24:04 - car to drive
24:06 - and the car's gas attribute will be
24:08 - decreased by the pertinent amount
24:11 - in the car class
24:12 - the dot drive function may cause the
24:15 - car's gas to decrease by 0.04 gallons
24:19 - per mile
24:20 - whereas the sports car class
24:23 - may instead have its gas decreased by
24:25 - 0.02 gallons per mile it drives
24:29 - if you create an instance of a sports
24:31 - car called my sports car
24:33 - the sports car implementation of the dot
24:35 - drive method will override the generic
24:38 - car version of the dot drive method
24:41 - therefore
24:42 - my sportscar.drive will decrease my
24:45 - sports car's gas attribute
24:47 - by 0.02 gallons per mile
24:51 - however
24:52 - were you to create an instance of the
24:54 - car class called my car
24:57 - my car.drive would instead decrease my
25:00 - car's gas
25:01 - by 0.04 gallons per mile
25:05 - this is an example of dynamic
25:07 - polymorphism as the implementation of a
25:10 - method signature can change depending on
25:12 - which level in the class hierarchy that
25:15 - it is called
25:17 - this works this way because the form of
25:19 - the method that is called is decided
25:22 - dynamically as the program is run
25:25 - this idea can be extended across the
25:27 - class hierarchy in more layers than just
25:30 - two
25:31 - you could add more subclasses
25:33 - representing different types of sports
25:35 - cars with their own.drive methods with
25:38 - different implementations
25:40 - and creating an instance of each of
25:42 - these subclasses
25:43 - would use their own implementation of
25:45 - the dot drive method one call
25:48 - the main benefit of dynamic polymorphism
25:52 - is that it allows you to write methods
25:54 - in the superclass without having to
25:56 - include ifs and outshifts to account for
25:59 - exactly which subclass is being used
26:02 - when the method is called
26:04 - the second type of polymorphism is
26:07 - static polymorphism
26:09 - static polymorphism occurs during
26:11 - compile time
26:13 - rather than run time
26:16 - this refers to when multiple methods
26:18 - with the same name
26:19 - are defined in the same class
26:22 - in this case the methods are
26:24 - differentiated by their arguments
26:27 - either they take a different number of
26:29 - parameters
26:30 - they take parameters of different types
26:33 - or they take parameters in a different
26:35 - order than one
26:36 - another this is known as method
26:39 - overloading
26:41 - despite the names of the methods being
26:42 - the same they have different method
26:45 - signatures
26:46 - due to their differences in the
26:47 - parameters that they accept
26:50 - to better understand this let's go back
26:52 - to the car example
26:55 - let's say that you are working within
26:57 - the car class
26:59 - in this class you are looking to create
27:01 - three different drive methods
27:04 - the first drive methods argument accepts
27:07 - one integer and one string as parameters
27:10 - say speed and destination
27:13 - for clarity
27:14 - we will refer to this one as drive
27:16 - method one
27:18 - however keep in mind that its method
27:20 - name is just drive
27:23 - for drive method 2
27:25 - we will set its argument to accept two
27:27 - integers
27:28 - for instance distance and speed
27:31 - finally in drive method 3
27:34 - we will have it accept a string first
27:36 - for destination
27:38 - and then an integer for speed
27:41 - this differs from drive method 1
27:44 - in that drive method 1's parameters are
27:46 - in reverse order compared to drive
27:48 - method threes
27:51 - in each of these three example methods
27:53 - the method signature is different
27:55 - despite the methods having the same name
27:58 - therefore the computer is able to tell
28:00 - the methods apart when the program is
28:02 - being compiled
28:04 - for example
28:06 - where i to call mycar.drive45
28:10 - work
28:10 - drive method 1 would be called
28:13 - as the argument given indicates that
28:15 - this is the method i would like to call
28:18 - furthermore my car.drive 1560
28:23 - would call drive method 2
28:25 - and my call.drive school 30 would call
28:28 - drive method three
28:30 - when implementing method overloading the
28:32 - different methods tend to have separate
28:34 - but similar effects
28:37 - despite drive method one and drive
28:39 - method three taking the same parameters
28:41 - it is likely that their implementation
28:43 - would be different and thus would
28:45 - achieve separate effects
28:46 - otherwise there would be no reason to
28:48 - have both methods
28:50 - keep in mind that method overloading can
28:52 - cause trouble if you do not keep
28:54 - straight which of the methods
28:56 - implementations you would like to
28:57 - execute
28:58 - and what form of the argument is
29:00 - required to do so
29:02 - normally if you call a method with too
29:04 - many parameters or parameters of the
29:07 - incorrect type
29:08 - then the program will throw an error and
29:10 - you will be able to fix the issue
29:13 - however
29:14 - if you mistake the methods argument in
29:16 - such a way that one of the other methods
29:19 - with the same name is called instead
29:21 - then you may not even be aware that you
29:23 - made a
29:24 - mistake overall
29:27 - polymorphism simply allows methods to
29:29 - take on many different forms
29:31 - it can be very useful in that it allows
29:34 - methods of the same name to exist both
29:36 - in the same class
29:38 - and in different classes
29:40 - however you must be careful to ensure
29:42 - that you are calling the correct form of
29:44 - the method that you want
29:46 - so your program can function as intended
29:50 - that does it for polymorphism
29:52 - and with the end of polymorphism the
29:54 - final of the four main principles
29:57 - comes the end of this video on an
29:58 - introduction to object oriented
30:00 - programming
30:02 - if you enjoyed consider liking and
30:04 - subscribing to null pointer exception
30:07 - and check out some of our other videos
30:09 - in which we cover a variety of other
30:11 - topics that you may find helpful
30:13 - thanks for watching