00:00 - foreign
00:28 - well hey everybody uh glad to be back
00:30 - today um hope everybody has had a good
00:35 - uh
00:36 - week off hope hope everybody had a
00:38 - chance to go back and
00:40 - relook at some stuff and
00:42 - uh well i'm glad you guys see me um but
00:46 - yeah i was able to get a lot done uh
00:49 - sorry for uh
00:51 - uh being gone um super excited to get
00:53 - back to it so all right today
00:56 - we are mainly going to be looking at
00:59 - recursion
01:00 - going to be really understanding how to
01:02 - interact with the command line
01:03 - you also may know it as
01:06 - the dos prompt which is basically what i
01:08 - grew up calling it the command line i
01:10 - remember the first time i heard that i
01:12 - was like what is the command line uh and
01:15 - then actually somebody on twitter
01:18 - hit me up uh for dictionaries and i was
01:20 - like absolutely we could do dictionaries
01:22 - because i was uh kind of wondering if
01:25 - those two were going to round out
01:27 - our time but if you're new here thanks
01:29 - for joining us i'm sam
01:31 - uh
01:33 - from python basics and um i am
01:37 - partnering with free code camp and doing
01:39 - an entire series on
01:42 - uh the building blocks of python so all
01:45 - right let's just go ahead
01:47 - and get into it so glad everybody's here
01:50 - there are four
01:52 - four previous videos
01:54 - um and i believe beau
01:56 - has made a playlist so
01:58 - after we get down here don't don't go
02:00 - and jump over there but after we get
02:01 - done here you can go and check those out
02:04 - and then also there's a link to my
02:06 - channel
02:07 - and every single topic that we have done
02:09 - here there has been a micro video on
02:11 - that so that is
02:14 - that is our intro so all right
02:16 - recursion
02:19 - what that is is
02:20 - basically it is when a program
02:23 - or a function calls itself
02:26 - until completion and a perfect a perfect
02:31 - example of a recursive function
02:34 - is uh some sort of countdown
02:37 - or in math factorial so let's just go
02:40 - ahead and get into it as everybody know
02:43 - uh what factorial is
02:46 - has anybody ever seen
02:48 - that
02:50 - so
02:51 - factorial so we're gonna just go through
02:54 - everything so basically the math of
02:57 - factorial
02:59 - is if we were gonna do three factorial
03:01 - in math
03:02 - it would be three times two times one so
03:07 - three factorial is six
03:09 - and as you could only imagine how
03:11 - quickly this goes up so if we were to do
03:14 - six factorial
03:18 - well i appreciate that
03:20 - uh six factorial so six times five times
03:23 - four times three times two times one you
03:27 - could leave off the one now there's also
03:30 - one important thing about factorial it
03:32 - took me a while to really kind of wrap
03:34 - my head around this and understand
03:37 - what what why and how
03:39 - so
03:41 - one factorial
03:43 - is
03:44 - is one
03:46 - zero factorial
03:47 - is also one because you still have one
03:50 - set
03:51 - that's basically when i had somebody
03:53 - explain it and then i think i read the
03:55 - same thing a couple times so even zero
03:57 - factorial was one so that is important
04:00 - when we're going to be starting to build
04:03 - our
04:04 - uh function out
04:05 - so let's go ahead and get to it so
04:09 - before we get
04:11 - to our recursive function i will
04:14 - actually want us to build a factorial
04:16 - function
04:18 - so let's let's just
04:20 - do this
04:22 - all right
04:24 - and that went the wrong way
04:26 - but i hope everybody has had a good week
04:28 - i see we have
04:30 - uh
04:31 - some of our mainstays back in chat so
04:34 - that is awesome glad to have you guys
04:36 - here
04:41 - i do not have a video
04:44 - um
04:45 - on factorial i didn't want to get too
04:47 - much into that math but i'm sure you
04:50 - could go and search um what is it math
04:54 - oh
04:55 - oh i'm trying to think matt
04:57 - mathfax.org i i think is one of those
05:01 - things one of the places
05:05 - oh you can't post links okay yes the uh
05:09 - bo is out he's usually at master control
05:12 - uh watching this so he is on vacation so
05:15 - i am i am in complete autopilot here so
05:18 - when i hit the stream button it came up
05:20 - and then so we're gonna be up until i
05:23 - hit uh in the stream so uh hope all goes
05:26 - well
05:28 - hope uh my internet hangs in there it's
05:30 - some bad wet bad weather around here but
05:33 - all right um
05:38 - yes
05:39 - oh yeah actually i saw the other day
05:41 - that uh bo and then put up a nine al
05:45 - nine hour algebra uh video that is crazy
05:49 - there's i
05:50 - these two hour live streams uh take it
05:53 - out of me
05:54 - so um
05:56 - and just fyi i'm not feeling that hot
05:59 - this morning so uh i think i can make it
06:02 - all two hours but just if we cut it a
06:04 - little short i want you guys
06:07 - to know so all right
06:08 - our factorial and so we need to figure
06:11 - out a way to count down
06:13 - track and go forward and then i want to
06:16 - show you guys this then we need to plan
06:19 - for
06:20 - if it's negative so all right we're
06:23 - going to have our total
06:25 - we've got to have some sort of count
06:27 - now when we're using multiplication what
06:29 - happens
06:31 - so we need to plan for this
06:33 - so if we multiply something so we're not
06:35 - counting at zero
06:37 - where our total needs to start at one so
06:39 - when we multiply anything by one
06:42 - we get that that we get that uh product
06:45 - almost said sum almost broke broke the
06:49 - biggest
06:52 - okay so somebody does have yes so good
06:55 - um
06:56 - i'm pretty good at math
06:58 - not super super awesome
07:00 - no i i only
07:02 - what you'll begin to notice is it i will
07:05 - only speak to
07:07 - uh what i feel extremely confident and
07:10 - that's why and i've done these basic
07:12 - uh tutorials
07:14 - for now coming up on five years so but
07:17 - again when i that's why my channel only
07:20 - only focuses on uh python
07:24 - we've touched on some outskirts of stuff
07:27 - but
07:27 - that i i try to stay in my lane as much
07:30 - as possible to uh
07:32 - keep my
07:35 - keep me out of trouble all right so
07:38 - we're going to be doing something over
07:39 - and over and over and over again until a
07:42 - certain condition is met not a certain
07:44 - number of times
07:45 - yes certain number of times but
07:48 - that that amount will change every time
07:51 - so
07:52 - i could go and have it loop through take
07:54 - the len
07:56 - but do a range function on lin
07:59 - that gets a little dicey when we have
08:00 - this awesome tool while
08:02 - so while
08:05 - while x
08:06 - is greater than 0
08:10 - then
08:11 - we're going to increment up right
08:14 - and then also we're going to touch on uh
08:17 - we're going to actually build this into
08:20 - um
08:22 - how to find the odds of a powerball and
08:25 - a little bit with comma placement and a
08:27 - little bit of
08:28 - f string
08:29 - and uh
08:31 - i like this lesson because it has a lot
08:33 - of stuff in it so all right um i will
08:35 - try to stay on task so now we're going
08:37 - to learn how that we can increment up by
08:41 - multiplication so then
08:44 - we're going to go up
08:46 - and then we need to we're going to
08:48 - multiply up multiplication increment and
08:51 - then we're also then going to then
08:53 - decrement so check this out
08:56 - because
08:57 - as we go we're crossing each other so if
09:00 - x was 5
09:02 - then we want to multiply
09:05 - we take our total
09:08 - so then we start there
09:10 - our total is one oops
09:13 - total equals one
09:15 - then i'm gonna multiply
09:17 - increment that up by five right so then
09:20 - my total is five
09:22 - let me make sure we don't have any good
09:23 - questions
09:30 - okay
09:32 - all right so now then then
09:35 - x was five
09:37 - so then i need a way to then track this
09:40 - so i'm going to decrement
09:43 - x by one so then x is four
09:46 - then i'm gonna go
09:48 - in
09:49 - increment up multiplication
09:51 - by x
09:53 - so now
09:55 - tote is 20
09:56 - but then i need to come down one more
09:59 - here so does this make sense so as we're
10:01 - going through
10:03 - now this is a little bit more labored
10:05 - but i want you to wrap your head around
10:07 - what is going on because
10:10 - recursion can get a little bit more
10:11 - dicey
10:13 - and i really want you guys to see and
10:15 - understand this because as this goes
10:18 - through
10:19 - it it can be very overwhelming has
10:22 - everybody even heard of recursion
10:24 - i just uh
10:26 - jan you're always awesome and very
10:29 - interactive
10:30 - have you heard of recursion
10:36 - still trying to figure out how long the
10:37 - delay is in chat
10:39 - i know
10:40 - okay cool
10:41 - all right so awesome uh this isn't this
10:43 - isn't too foreign
10:45 - but factorial is an awesome
10:48 - way
10:49 - for recursion all right
10:51 - so now also there is one big distinction
10:54 - that we need to also make sure we
10:56 - understand
10:58 - because right now if i were to print
11:00 - oops
11:01 - then when i get done
11:04 - i print total or tote
11:09 - and call
11:12 - what was i doing
11:17 - so then i have a list
11:21 - let's get rid of
11:24 - these we'll test those in a minute
11:27 - for
11:28 - test
11:30 - and tests
11:32 - wow
11:35 - print
11:38 - fact
11:42 - don't know why i've got text on my mind
11:44 - today
11:48 - so all right
11:51 - all right so now i have
11:57 - a little bit of a problem and i did this
11:59 - wrapping this around to show you
12:03 - something
12:05 - because with recursion
12:08 - i can't use print
12:10 - i'm going to need to use return
12:13 - sometimes the this can be
12:18 - okay so
12:20 - and and that's absolutely fine i
12:22 - remember the first time i
12:25 - ran across it i think i was
12:27 - i was in high school doing uh algebra
12:30 - maybe and i heard about it but all right
12:34 - so this is an example
12:37 - of returning none
12:40 - and when you use recursion
12:42 - it you cannot use
12:45 - print
12:46 - because you're going to be creating
12:47 - something and then using it again
12:51 - so
12:51 - let's get
12:53 - that part down
12:55 - now also this isn't very perfect
12:58 - because and i just wanted to show you
13:00 - this
13:02 - and also check out what that's 8
13:07 - 12 18 and then 100. so that is how big
13:12 - 100 factorial
13:14 - is and how quickly python is able to to
13:16 - do it i remember one of the first things
13:18 - uh well not the first thing but i think
13:23 - java begins to have a problem after uh
13:26 - 13 factorial if i if i recall just the
13:29 - way that its building blocks are
13:32 - so just one of those things how uh
13:34 - python stands out
13:36 - all right
13:37 - so that is a very
13:40 - makeshift
13:42 - very
13:43 - bare bones
13:45 - beginner
13:46 - um
13:49 - beginner
13:51 - how to do factorial so now we're going
13:53 - to now we're going to clean this up
13:55 - quite a bit
13:57 - let's do this
13:59 - comment that out
14:00 - any questions of how factorial
14:03 - works at all
14:05 - so all right
14:06 - now we are going to build our factorial
14:09 - recursively with recursion
14:12 - and
14:13 - i remember
14:14 - because i think i did a function and i
14:16 - was uh
14:18 - had a run time error and i inadvertently
14:20 - was calling it on itself and i think it
14:23 - was a hello function when i was first
14:25 - starting so i accidentally
14:28 - uh did it or did a uh
14:30 - recursion
14:32 - and it just hung up hung up hung up hung
14:34 - up hung up and then in this instance you
14:38 - will literally be putting the function
14:40 - inside the function so
14:42 - let's just go ahead and let's move this
14:44 - down
14:45 - so now we're just going to keep this
14:47 - clean and we're going to use our
14:50 - same
14:53 - wow
14:56 - fact x
15:04 - i think in this one i use m so
15:07 - all right so now
15:10 - we need to handle we're going to be
15:13 - really really accurate here
15:15 - so
15:17 - when i said factorial 0 is 1
15:20 - we need to handle this so
15:23 - if
15:24 - in
15:28 - less than negative one
15:39 - oops i'm sorry greater
15:42 - greater than negative 1
15:44 - then
15:47 - we're going to do our two conditions of
15:50 - if it's 0 or if it's greater than 0
15:52 - there but we're gonna
15:55 - handle this first
16:00 - negative
16:02 - all right
16:03 - so now we have a nested condition so
16:05 - this is how i want you to think about it
16:07 - think about your number line
16:09 - so it can handle
16:10 - a factorial can be
16:13 - zero
16:15 - through positive cannot be
16:18 - uh
16:20 - oops
16:23 - yes greater than negative one
16:26 - then we're gonna do then we're gonna
16:27 - check if it's zero return one then
16:29 - everything else
16:31 - follow through
16:33 - sorry like i said a little out of it not
16:35 - feeling that great today so now let's
16:37 - handle if n equals zero then we're going
16:40 - to return one
16:42 - and
16:43 - just to remind you
16:45 - in python whenever
16:47 - the
16:49 - return is hit
16:51 - it comes completely out just jumps ends
16:54 - ends everything it becomes dead code
16:56 - after return
16:58 - that was uh one of the little
17:00 - nitty-gritty things that i finally ran
17:02 - into so everything dead you don't ever
17:05 - need a break whenever you hit return
17:07 - maybe you can just throw in a return if
17:09 - you want to
17:10 - and
17:11 - it just kills everything and everything
17:13 - after the return is called dead code all
17:15 - right i don't know why i have this pin
17:17 - here
17:19 - okay
17:20 - so
17:21 - now let's get into it
17:23 - and i'm going to
17:25 - lay this out
17:28 - so else
17:32 - return
17:34 - and i knew i spelled it wrong because it
17:35 - didn't go orange
17:37 - or yellow i call that orange all right
17:40 - so n
17:42 - times and it's literally this
17:44 - simple but we're going to talk about it
17:49 - n
17:50 - minus 1
17:51 - going forward
17:53 - so all right
17:54 - here we go
17:57 - let's get over here
17:59 - let's make sure i have this sized right
18:01 - okay good
18:03 - let's get here to make sure
18:05 - anybody got any questions so far
18:12 - that's a good way to say it so
18:14 - all right
18:16 - so if you want output
18:20 - print prints things to the screen
18:22 - but it returns none it does not create
18:25 - anything
18:26 - so
18:27 - most of the time
18:29 - you're going to be creating a variable
18:32 - and wanting to use it later so you can
18:34 - literally take a function
18:36 - pass an information assign that to a
18:38 - variable
18:40 - and you have created you've created that
18:42 - information print just puts it out to
18:44 - the screen
18:51 - print prints out anything you want it to
18:53 - print so when i go when i'm gonna go and
18:56 - run this
18:58 - like when i was up here and i wrapped i
19:01 - did this to kind of foreshadow
19:03 - i wrapped
19:04 - um
19:07 - where was it
19:08 - i wrapped my
19:12 - right here i wrapped that with print
19:15 - and that's when it returned none
19:17 - okay
19:18 - so now i'm gonna leave this here
19:22 - and nothing's going to happen
19:25 - it's returning and creating
19:27 - actually i may show you well i don't
19:29 - want to get too far into the woods off
19:30 - this
19:31 - um
19:32 - maybe
19:33 - next week we can just do things on print
19:36 - and return for a good
19:38 - good solid section but yes this is what
19:41 - the takeaway here is
19:43 - return creates something
19:45 - and then you can take that and assign it
19:48 - to whatever you want if you just wanted
19:49 - to print it out to the screen great but
19:52 - if more than likely you want to then
19:55 - link those things together and you could
19:57 - take a function
20:03 - yep that's exactly it because it
20:06 - returned
20:07 - it it returned something so you needed
20:10 - to go and link that information and
20:12 - assign it to a variable
20:13 - and then there's going to be times where
20:15 - it's going to say in place return none
20:18 - you cannot assign that to a new variable
20:21 - there's documentation on
20:23 - uh
20:25 - is it sort
20:27 - believe it's i think i believe it's a
20:29 - list sort
20:31 - yes you'd need to make a cop that's why
20:33 - you sorted
20:34 - go back and look at the documentation on
20:37 - that that's why it says return none in
20:39 - place you cannot assign a new variable
20:42 - so that's why these distinctions are
20:44 - very very very important at the
20:46 - beginning of your python journey is to
20:48 - understand the difference because you
20:50 - will get hung up on things
20:53 - so all right
20:56 - yep that is exactly it
21:02 - and that's why i love this so much so
21:04 - all right
21:05 - so basically this is what i want you to
21:07 - think about
21:10 - so it's going to be going
21:14 - in or five
21:19 - five times
21:21 - then
21:23 - this is how this is
21:25 - so then it's gonna go parentheses
21:28 - then 5
21:31 - minus
21:34 - 1
21:37 - then it's going to go again
21:41 - then times
21:43 - five
21:45 - minus two
21:49 - and as this goes through it's going to
21:51 - be
21:57 - and then there
21:59 - then it will wrap again
22:12 - then it wraps
22:14 - these two
22:17 - there we go
22:20 - then five minus three
22:24 - then it wraps those around
22:28 - so it goes down and down and down i
22:31 - think this goes right there
22:33 - there
22:34 - but you're starting to get the idea so
22:36 - this
22:37 - nests and nests and nests until it gets
22:40 - down to
22:41 - so then that
22:43 - is another factorial inside of that then
22:46 - it's a factorial inside of that then a
22:48 - factorial inside of that then a
22:50 - factorial inside of that until it
22:52 - exterminates down
22:54 - to there so let's get rid of this
23:00 - so now
23:02 - now let's run this
23:04 - all right we have our tests right here
23:06 - right and then let's do zero
23:09 - and negative two
23:11 - let's add those back
23:13 - now
23:14 - why is this going to fail
23:20 - i gave a hint why does this fail
23:23 - okay that's not too big of a delay
23:27 - all right i made a passing comment
23:29 - anybody remember
23:37 - because
23:40 - it returns
23:44 - does not
23:48 - i did not have a print so now this is
23:52 - also why
23:53 - recursion a recursive function
23:57 - needs to be returning needs to be
23:59 - creating because then this
24:01 - this will not work
24:03 - or you have to get extremely over
24:05 - complicated but we're making our
24:06 - progress here so then i have my negative
24:09 - i have my
24:11 - uh
24:13 - 1 of course equals 1
24:15 - then my 0 equals one because it is still
24:18 - a set of zero so it is one set
24:22 - equaling one
24:24 - and then i have my
24:26 - uh
24:27 - my catch right here
24:29 - else return negative all right
24:33 - so now
24:35 - now let's jump into something that i do
24:38 - like the math on
24:39 - and it shows so i know you there are a
24:43 - lot
24:44 - a lot of us a lot of individuals on
24:46 - today that are outside of the country
24:50 - outside of the united states
24:51 - does anybody know
24:53 - uh how the united states does our
24:55 - lottery um with the little with the
24:58 - little bouncy balls and they go in and
25:00 - then they pick pick a pick a bouncy ball
25:03 - and how the odds work on that
25:05 - has has anybody seen that because i
25:08 - don't know how much to go into it
25:09 - because now
25:12 - now we're going to spin off and we're
25:13 - going to use
25:15 - a factorial
25:17 - to
25:20 - then
25:21 - figure out the odds
25:23 - of
25:25 - winning a combination of numbers
25:28 - anybody
25:30 - anybody ever heard of
25:32 - heard of uh heard of that
25:35 - all right the stream looks good
25:38 - alright well cool
25:39 - well we will
25:41 - we will get into it so all right let's
25:43 - see we don't need these anymore
25:45 - so the way that the odds the way that
25:48 - the odds work for this
25:50 - uh
25:52 - lottery
25:54 - powerball and here's what was genius
25:58 - about the lottery officials of what they
26:00 - did
26:02 - so when i was growing up
26:04 - there were
26:06 - have no idea okay
26:08 - so basically it's a big tub
26:12 - and
26:13 - 50-something balls go
26:15 - go into this and they each have a number
26:17 - on it and they bounce around and people
26:20 - buy tickets and they wager
26:23 - each ticket is worth i think two dollars
26:25 - now
26:26 - and they can either let the computer
26:29 - pick six random numbers
26:31 - or you can go in and pick six random
26:34 - numbers and people tend to
26:36 - have a methodology they wage they they
26:38 - pick the same numbers it's birthdays
26:41 - it's street names
26:43 - but
26:44 - when you have 50 balls bouncing around
26:46 - and you have to pick them now you do not
26:48 - have to pick them in order just anything
26:50 - because then if you had to pick them in
26:52 - order
26:53 - i actually don't i think i saw the math
26:55 - on that but all right to give you an
26:57 - idea of how the math on this works
27:00 - is if you have 50
27:03 - 50 balls to pick from
27:06 - then
27:08 - then you have
27:10 - and you pick
27:11 - six of them so here's the math on this
27:14 - it's 50 factorial
27:17 - let's let me make sure i have this right
27:22 - then
27:26 - it's 50 factorial
27:29 - times
27:34 - oh shoot i have it here but it's uh 50
27:37 - factorial 49 factorial 48 factorial 47
27:41 - factorial 46
27:43 - 45
27:45 - yes
27:46 - so that is the how exponential
27:49 - this is
27:51 - and you go through
27:54 - oh cool uh
27:56 - free code camp has a new supporter
27:58 - that's awesome well thank you
28:00 - very much so now we're going to take
28:03 - this new tool that we have and we're
28:05 - going to
28:08 - yes
28:09 - yes it is
28:11 - absolutely now it's not as complicated
28:14 - as having to have it in order which
28:16 - i don't
28:17 - uh like i said math we can tiptoe out of
28:20 - math pretty quickly i'm i'm good
28:23 - right up until the beginnings of
28:25 - calculus but i digress here now here was
28:28 - the genius part of what lottery
28:30 - officials did
28:32 - they added a powerball
28:35 - a whole
28:36 - whole only section and what they did
28:39 - is they removed a number you only had to
28:42 - pick five numbers then a powerball and
28:45 - everybody actually thinks
28:47 - that
28:49 - that is easier and it's actually harder
28:52 - so
28:52 - it was
28:53 - 50 factorial 49 factorial
28:57 - 48
28:59 - that's 47.
29:03 - now here's where it gets weird so 47
29:06 - that's 46
29:08 - 45.
29:10 - so that was the old way one two three
29:14 - four five six
29:15 - so
29:16 - see how that number's smaller so when
29:18 - they removed this
29:21 - and then they gave a whole other bin of
29:23 - 50 more numbers
29:25 - so it actually goes back to
29:29 - 50 factorial i think what it is so they
29:32 - actually made the odds more challenging
29:35 - but everybody who is
29:37 - gambling and buying these lottery
29:38 - tickets
29:39 - they think they only have to pick
29:42 - five numbers and this other one is
29:44 - easier it was genius when i first had a
29:46 - math teacher assign it to me so now
29:49 - we're going to use our python
29:52 - knowledge
29:53 - to actually calculate and build a
29:56 - function
29:57 - of how in the world to calculate
30:01 - the powerball odds
30:03 - and it's actually quite interesting
30:06 - so let me
30:09 - get the right one
30:11 - oh and we got and if i can hang in there
30:13 - we got some very cool stuff
30:15 - with
30:17 - the
30:19 - oh where did it go
30:24 - i thought i had it right here
30:26 - sorry guys
30:31 - all right
30:36 - let's bring this over here
30:41 - all right
30:45 - did i really not save it
30:48 - all right well here's here's the math
30:51 - that i
30:53 - pulled out
30:56 - so this is this is what the math is
30:59 - because then you pick one and you go
31:01 - forward and the
31:03 - this is
31:06 - this is it right here and we're going to
31:07 - be putting this into a function
31:10 - and then we're going to learn some other
31:12 - cool stuff
31:13 - that i don't think we have gone over yet
31:29 - okay i did have it i had it on another
31:32 - screen
31:33 - i should have put this all in one place
31:35 - all right so now what we're going to do
31:37 - is we're going to build a function and
31:38 - we're actually going to use uh some
31:41 - i think somebody's got a couple comments
31:47 - all right
31:48 - observe
31:57 - so we're gonna use a default argument
31:59 - we're going to do a
32:01 - we need to have a loop
32:03 - a while loop
32:06 - so let's get in here
32:08 - def
32:09 - odds
32:13 - almost pick
32:15 - and power so if if it's going to have
32:18 - power or not
32:20 - all right has anybody ever seen
32:24 - this before what i'm doing right here
32:27 - everybody understand this anybody
32:31 - because it this is super important and
32:33 - we're just going to go over it because
32:34 - if one of you if you have not seen my
32:36 - video from yesterday on my channel
32:40 - if you have the question somebody else
32:42 - has the question so i i'm usually pretty
32:45 - thorough
32:46 - uh yeah d uh it's a default argument
32:51 - so optional argument default argument
32:54 - so
32:55 - it is
32:56 - you have to
32:58 - pass these two you do not have to pass
33:02 - in power it is already set for you on
33:04 - false
33:06 - all right
33:08 - so the way we're doing this is and we're
33:11 - going to use a
33:14 - inter
33:16 - number of
33:19 - regular
33:21 - balls
33:22 - number
33:25 - of balls
33:28 - picked
33:31 - yep
33:32 - and
33:33 - if
33:37 - if they are
33:40 - using a
33:42 - powerball so basically you
33:45 - will be
33:47 - asked
33:49 - for
33:50 - the number
33:52 - of
33:53 - powerballs
33:55 - so basically
33:56 - this function is for anybody
34:01 - who could because there are different
34:03 - lotteries in each state then there are
34:05 - some that have states that share
34:08 - so
34:09 - you could take this function
34:11 - and apply this to any lottery and then
34:14 - you could understand the odds that
34:16 - you're dealing with and you could figure
34:17 - out if you're into gambling you can
34:19 - figure out which ones have the better
34:21 - odds
34:22 - so all right
34:24 - now i'm going to show you something
34:26 - uh who remembers us looking at the math
34:28 - module anybody remember us looking at
34:30 - the math module
34:31 - because
34:33 - i like um
34:34 - i had a couple of tv teachers and they
34:36 - explained it look
34:37 - i will show you how to use the shortcut
34:39 - way but i need you to prove that you can
34:42 - understand
34:44 - where it's coming from so the math
34:46 - module actually has a factorial built in
34:49 - for us so i also wanted to show you
34:51 - recursion but there's a tool already out
34:54 - there most everything
34:56 - that i'm showing you
34:58 - there's always a tool out there but if
35:00 - you start using something you don't
35:02 - understand how it works especially under
35:04 - the hood of all kinds of things you can
35:06 - get into trouble
35:08 - uh with you might be like somebody was
35:10 - just getting something to return or they
35:12 - thought they were getting something to
35:14 - return and they weren't it was only
35:15 - printing out to the screen so if you
35:17 - don't understand
35:18 - under the hood and how it works you can
35:21 - you can get into a little bit of dusty
35:22 - things
35:27 - so all right
35:28 - let's peek inside our math
35:32 - our math uh module
35:34 - so der on math
35:37 - helps if i close this out
35:40 - all right
35:41 - and it's factorial
35:44 - they're right there
35:46 - so we're going to do a shortcut
35:48 - from
35:50 - math
35:52 - import
35:54 - factor fact
36:01 - all right does everybody understand this
36:03 - alias and this import line right here
36:07 - so this is a shortcut because right now
36:10 - this is my main level math and if i
36:14 - wanted to get to factorial i would need
36:16 - to use math dot
36:18 - factorial then pass in
36:22 - 3
36:23 - and i get 6 to come out
36:26 - but
36:28 - now
36:29 - if i were to if i were to do this
36:32 - from
36:33 - math
36:36 - import
36:38 - factorial then i only have to type in
36:41 - fact
36:42 - oriole
36:44 - 3
36:46 - but then if i alias this
36:50 - now all i have to do
36:52 - is
36:54 - type in three and i get it so
36:57 - that is that so if you are
36:59 - lazy and don't like to type a lot and
37:02 - you will come up with a fast way to do
37:04 - it you and i can be friends okay
37:07 - so here we are
37:09 - okay
37:10 - now there's a couple more things
37:13 - that i need to show you which are very
37:16 - very good
37:18 - so our result
37:20 - is
37:21 - going to be
37:22 - like i said we're just going to do this
37:24 - return
37:27 - and here's our math
37:29 - so it's
37:32 - balls
37:34 - uh
37:38 - two
37:39 - two parentheses
37:42 - then
37:43 - division
37:46 - and you wanna get all these parentheses
37:47 - so you can make sure you have order of
37:49 - operation
37:51 - order of operation pemdas
37:54 - i remember i don't think i actually
37:56 - committed pemdas to memory until i
37:58 - started teaching python and i was
38:00 - volunteering at my kids
38:03 - schools because they
38:05 - uh one of my kids very nice math
38:08 - teachers
38:09 - asked for some help
38:11 - and i actually got a python lesson out
38:14 - of it
38:15 - so
38:16 - that's kind of an example so all right
38:19 - pemdas parentheses exponent
38:22 - multiplication division adding and
38:24 - subtracting so those are the order of
38:27 - operations that's the rank
38:29 - that the rank and importance and the
38:31 - order you need to do first
38:34 - parentheses
38:35 - trump exponents exponents trump
38:38 - uh
38:40 - multiplication and division and then
38:42 - then you do
38:44 - adding and subtracting but you do
38:46 - parentheses
38:47 - that is what you do first then you do
38:49 - those other variations they go in order
38:53 - and
38:54 - uh order of importance
38:56 - and uh set set rules and python oops
39:00 - sorry guys that was probably really loud
39:05 - those are the rules and python is built
39:08 - upon those rules so very important that
39:10 - we know them now now we need to
39:14 - handle so that's our output but we need
39:17 - to handle a couple things here
39:19 - so this right here so no matter what
39:24 - we're either going to be multiplying
39:25 - this by one
39:40 - i'm sorry to hear that jan
39:42 - is anybody else having any any other
39:44 - buffering issues
39:46 - uh or is that um
39:49 - because i it looks like the stream is
39:51 - good on
39:53 - my
39:54 - part uh is anybody else having any
39:58 - issues
40:01 - okay good
40:02 - because like i said i had to
40:04 - reboot my
40:06 - my router before i got started today
40:08 - because my upload was atrocious
40:11 - so i'm trying to make sure you guys
40:13 - don't have any issues
40:14 - okay
40:15 - so now we need to handle some things and
40:18 - one of the first things we need to
40:19 - handle has is this
40:23 - has anybody
40:25 - ever seen
40:26 - uh
40:27 - the the value for bullion
40:31 - so
40:32 - that's what it is but has anybody ever
40:34 - seen a value
40:37 - anybody ever seen this
40:54 - anybody ever seen that
40:55 - where
40:57 - true act true and false actually have a
40:59 - value to them
41:03 - so
41:04 - i remember when i saw that and i thought
41:07 - that was the coolest thing so we're
41:09 - actually going to take this technique
41:12 - and we're going to utilize it
41:14 - right here
41:16 - so
41:18 - this i remember when i
41:21 - saw this and was going through it and
41:22 - somebody did an example and i was like
41:24 - i know how i can do this and it's going
41:26 - to be so cool so all right
41:31 - first
41:32 - if
41:35 - if the power
41:36 - is
41:38 - if there is no powerball
41:40 - we're just gonna multiply this by one
41:42 - and go on about our day so there is no
41:44 - powerball
41:46 - so
41:49 - so here's
41:50 - here's the balls
41:52 - did i close this out
41:55 - let's see
41:57 - got one
42:01 - something about that didn't feel like it
42:03 - got the right number
42:11 - one one two one two
42:13 - one one two
42:15 - okay
42:18 - there we go okay
42:19 - then
42:23 - so now
42:24 - we need to set this
42:29 - p underscore ball
42:32 - to 1.
42:33 - so that was that was the way that i do
42:36 - this so we can have this just on one
42:38 - nice little
42:39 - condition
42:41 - so if this is false this is just set to
42:44 - one
42:45 - going about your day
42:47 - so now watch this
42:50 - then
42:52 - if power
42:59 - if power
43:01 - then take input
43:03 - powerball
43:04 - equals int
43:06 - input
43:09 - enter
43:12 - number
43:13 - of
43:16 - power
43:17 - balls
43:22 - close this one close that out
43:25 - close that out
43:26 - so what i'm doing let's see
43:30 - so what i'm doing here
43:32 - you could say
43:34 - does power
43:35 - equal
43:37 - true
43:38 - but i don't need to be that
43:42 - this is very passive
43:44 - so if i turn this true
43:48 - this is true
43:50 - and then it moves on
43:52 - so right now it's false so when you have
43:55 - this
43:56 - you could literally
43:58 - have this go through
43:59 - and make this
44:01 - i could i could make this
44:04 - a
44:05 - p
44:07 - ball
44:08 - right
44:10 - so it's already
44:12 - going through and set this so i wanted
44:15 - to get your guys's mind to wrap around
44:17 - this
44:19 - so if
44:20 - power
44:21 - so i could i could play i could play
44:24 - into this
44:25 - where
44:26 - power
44:28 - could go back and forth
44:29 - and then if
44:32 - we go on so i just wanted to show you
44:34 - that because i remember the first time i
44:35 - saw this so
44:37 - if this is false i don't have to say if
44:40 - if power is true do this
44:42 - i literally just come here and go
44:46 - this is false
44:47 - just come down here and multiply that
44:49 - and i have this
44:52 - just b1 and move on about our day
44:55 - so now this returns so i need to do
44:59 - print
45:02 - odds
45:04 - and i'm going to pass
45:07 - okay good you can't see that alert
45:10 - um
45:12 - i'm going to pass in would i say 50
45:15 - which would say what example do i use
45:24 - oh and then we need to do our formatting
45:25 - because where our eyes are used to
45:27 - seeing
45:30 - parentheses i'm sorry commas
45:34 - so
45:35 - 69 balls
45:37 - six
45:39 - and
45:40 - let's just close that out right now
45:44 - so let's run this
45:47 - spelling is a problem
45:51 - so let's see
45:57 - so
45:58 - 719 million 264
46:03 - 832 to 1 are the odds of winning
46:08 - the lottery
46:10 - with
46:11 - 69 balls and six choices
46:15 - so now
46:17 - now let's change this up and go
46:21 - true
46:22 - so now
46:24 - enter number of powerballs 26.
46:28 - so now
46:34 - it has gone
46:36 - it is even worse
46:37 - so now we need to
46:40 - all right i clicked off
46:43 - so now we need to
46:45 - oh very cool we got an uh we have
46:47 - another uh supporter so that's very
46:49 - awesome well thank you guys
46:51 - all right
46:53 - so now i want to show you how to add a
46:55 - comma
46:56 - into python's output
47:06 - oh that's supposed to be six
47:08 - not that
47:11 - there we go
47:12 - because
47:13 - now it goes
47:16 - see now it's a billion
47:19 - see how that one little tweak of adding
47:21 - a fresh
47:23 - batch of batch of numbers
47:25 - goes in so now it's over a billion to
47:27 - one
47:29 - all right but i have to go through and
47:31 - highlight or i do you may not have to
47:33 - you may be able to see that so first i'm
47:35 - going to show you
47:37 - how to do this with old string format
47:40 - and then we'll jump into
47:45 - wow
47:46 - f string all right
47:48 - so now uh
47:52 - so boom
48:04 - it can be i was showing
48:06 - that you could go and make and assign
48:12 - oh okay the powerballs are
48:15 - are their own little set of numbers and
48:18 - it was to kind of trick people into
48:21 - realizing that they had a brand new set
48:23 - of numbers to go in so it was you have
48:26 - this one container where five balls are
48:29 - picked out of then you had this
48:31 - auxiliary container and you had an
48:34 - additional brand new batch
48:36 - of numbers to pick from that started
48:38 - back over and it actually increased
48:41 - the probability because
48:45 - they are more there's there's more
48:47 - numbers everybody
48:49 - thinks that it was going to be easier
48:51 - because it was a its own small container
48:54 - but it was actually just
48:56 - adding another set of numbers to have a
48:58 - larger
49:00 - factorial problem to it so that's why
49:04 - this little this little trick that they
49:07 - did
49:09 - made it worse but
49:13 - somebody who's not
49:14 - as in depth and again
49:16 - we're heading we're probability and
49:18 - statistics we're heading quickly out of
49:21 - my element but i i was able to really
49:23 - wrap my head around this this math
49:25 - problem and it was one of the basic ones
49:28 - that i really got a lot out of with uh
49:31 - probability
49:38 - uh the last number needed to win
49:41 - a lottery must be the last number chosen
49:43 - by the player
49:45 - i don't know exactly if i understand
49:47 - that but um
49:48 - no it the the powerball idea
49:52 - was to add uh
49:55 - add a
49:56 - larger probability to it but it actually
49:59 - people thought it was
50:01 - easier to pick because then they only
50:02 - had to pick five numbers out of the main
50:04 - container which with another one so all
50:06 - right let's let's learn how to use a
50:12 - let's see
50:14 - yeah dot format
50:16 - let's bring this in
50:20 - and there we go sorry i'm going to show
50:22 - you this
50:24 - the format way
50:25 - and then i'm going to show you
50:28 - actually let's get rid of this so we
50:29 - don't
50:31 - there
50:32 - so the way that python has this
50:36 - let's see where to go
50:40 - it's literally this simple
50:43 - all right
50:44 - so python understands that this i'm
50:47 - wanting to
50:49 - place a comma in our standard grouping
50:52 - of numbers
50:55 - all right
51:01 - oh yes yes yeah okay yes i that then
51:04 - that will be yes the pow the powerball
51:06 - is chosen last
51:08 - and it's kind of for
51:10 - a more exhilarating
51:12 - choice yes the power the powerball is
51:16 - chosen last and it's you usually a red
51:19 - a a red number but again i don't i don't
51:22 - play the lottery there are people who
51:23 - could there's all over here in the
51:26 - states there are
51:28 - uh we like to gamble a lot we i i don't
51:31 - partake in it i don't judge anybody who
51:33 - does but
51:34 - there are all kinds of uh
51:37 - gambling and lottery and things like
51:39 - that but all right this right here will
51:41 - print
51:43 - everything into a nice
51:45 - comma setup so now i didn't have to go
51:48 - through and do this
51:51 - now
51:52 - this is how
51:54 - the f string works
51:56 - and i like to show you actually we'll
51:58 - leave this here we'll copy it that's
52:00 - what we'll do
52:03 - and yes i don't like copying
52:06 - and it's literally just like this
52:09 - oops
52:13 - and we place this just in front of it
52:15 - and then get rid of everything else
52:18 - so let's go over
52:23 - all right
52:24 - so now with f string
52:28 - it is still this setup and you just
52:30 - that's the what you want to have happen
52:34 - to this output
52:39 - so there we go so that is an f string
52:41 - format for adding a comma to numbers and
52:44 - this is a string format layout so there
52:47 - we go
52:49 - i don't know i thought this was absurdly
52:52 - cool of how simple and clean and clear
52:55 - in python it is to just add commas to uh
52:58 - numbers with placement so all right any
53:01 - questions about that before we move into
53:03 - the command line
53:06 - who knows what command line is or dos
53:08 - prompt or
53:10 - terminal i think in apple uh terminal
53:17 - so i'm going to show you two ways to get
53:18 - to it
53:20 - the easy way the same way
53:23 - or the more challenging way so uh
53:34 - python just understands this that this
53:37 - is uh inside this inside the formatting
53:40 - rules
53:41 - it understand
53:44 - well
53:46 - that is you would have to do that
53:48 - manually
53:49 - so with in
53:52 - in uh i can't remember if i've done that
53:58 - so what we do oh i do actually have a
54:00 - video and i need to find it somewhere
54:03 - uh how to format um
54:07 - a telephone number so that has three
54:11 - three and four i'll have to find that
54:14 - but that's a hyphen
54:17 - but python understands because it's
54:19 - consistent with numbers that you're
54:22 - going to have and it understands exactly
54:23 - what this means
54:25 - it's a it's a basically it's a setting
54:28 - so
54:30 - um
54:30 - we we would have to use that i can't
54:32 - remember we're using regular expression
54:35 - but you know what this is why i love
54:37 - this interactive you guys are
54:40 - so smart let me make let me make some
54:42 - notes for next week
54:44 - so we're gonna do telephone
54:46 - and i think i have one for social
54:48 - security numbers too
54:50 - i think
54:51 - so telephone
54:55 - and
54:56 - social security number
54:59 - social security number
55:01 - all right
55:02 - uh and actually somebody told me asked
55:06 - me a question about our social security
55:08 - numbers because i think they were from
55:10 - new zealand and their numbers are
55:12 - actually in batches
55:14 - and uh to know when you were born
55:17 - here in the united states our social
55:20 - security number is built on geography
55:23 - so the first ones are
55:25 - uh
55:28 - what state you are in
55:30 - and then
55:32 - and then then the group and then it
55:34 - recycles so we have
55:37 - uh
55:39 - and then just like our area code we have
55:41 - three digits for the area code the
55:43 - exchange and then four numbers so you
55:46 - can get the idea of how
55:49 - big and complicated
55:51 - how big and complicated these numbers
55:53 - can get
55:54 - over and over and over again so each
55:57 - each area code can have a certain number
55:59 - of
56:00 - prefixes and then every prefix can have
56:03 - ten thousand
56:04 - combinations because they're
56:06 - uh
56:07 - numbers of
56:09 - four
56:10 - so ten times ten times ten times ten
56:13 - ten thousand
56:15 - that's what is so cool because like i
56:17 - remember that i got really easy so when
56:20 - you have a three digit number
56:24 - number of choices times number of
56:26 - choices times number of choices
56:28 - one thousand
56:30 - or
56:31 - just
56:32 - when you do that because you have
56:34 - zero zero zero and nine nine nine
56:38 - okay all right so command line
56:40 - uh
56:41 - go down to
56:42 - your search
56:46 - bar type in cmd and you get your command
56:49 - prompt
56:50 - you can't see that
56:52 - sorry i got this sized up just like this
56:55 - and you type in
56:57 - cmd
56:58 - and you get your command prompt
57:01 - or for our example
57:04 - or what we're going to be doing
57:06 - is pull up your python file
57:10 - your folder where you have all of your
57:12 - python and typically it's going to be in
57:14 - your app
57:16 - uh
57:17 - app data local programs python then
57:20 - whichever variation
57:22 - of
57:23 - python you have let's get out of that so
57:26 - right now all of this is in my
57:29 - python38-32
57:30 - and then literally you just go to the
57:33 - search bar
57:34 - type in command line i remember the
57:37 - first time i saw this i thought it was
57:38 - so awesome
57:40 - you literally go
57:42 - to the directory
57:45 - that you're in and that's vital
57:47 - to what we're about to start doing
57:50 - so we need to do a couple of things
57:54 - we need to understand
57:56 - how python interacts with the command
57:59 - line before we can really do anything
58:04 - all right cool i'm hanging in there we
58:05 - got an hour in
58:06 - i think we're doing pretty good
58:08 - are you guys you guys hanging in there
58:10 - you guys are doing
58:11 - pretty good so if you're new here it's
58:13 - top of the hour so if you're getting
58:14 - getting all set up i'm sam
58:17 - uh with python basics
58:20 - and i live stream on free code camp on
58:24 - tuesdays
58:25 - uh for two hours and we go through
58:29 - uh it's a
58:30 - very large very vast very try to be as
58:33 - in-depth as possible about the basics of
58:36 - python programming and
58:39 - down in the description below is a link
58:41 - to
58:42 - my channel which has every single thing
58:44 - that we cover on here i'm literally just
58:48 - re-going
58:49 - through
58:51 - all the videos i've done before i
58:52 - started a live stream on my channel
58:56 - to have a longer format and then free
58:59 - code can't reached out to me and i
59:01 - thought it was an awesome idea to just
59:03 - help more people i love python i've been
59:06 - studying it for a while now and i've
59:08 - been teaching it for about five years
59:11 - and i just think it's phenomenal so all
59:12 - right right now
59:14 - we are on we are in
59:17 - the command prompt
59:18 - and i have
59:21 - so when you type in python
59:24 - now because i'm in that folder i get it
59:27 - now i also have my path set up
59:30 - and if you're not sure how to do that
59:32 - i guess what i have a video for that on
59:34 - my channel uh we can maybe look into it
59:37 - if you have a great deal of problems but
59:39 - literally now i am running i am in
59:42 - python
59:44 - just
59:45 - just like this oops didn't need to do
59:47 - that
59:48 - so let's come up let's come up here and
59:50 - i want to show you
59:53 - okay i promise i will stop doing that at
59:55 - some point but literally 8.1 this is the
59:58 - exact version this is the shell that i'm
60:00 - running
60:01 - right here
60:03 - all right so
60:05 - we need to learn how
60:07 - python
60:08 - and your computer are going to interact
60:11 - so we're going to learn about
60:13 - the cis module
60:15 - now i'm going to show you this this is
60:17 - the only module you can't touch
60:21 - python says no we're not going to let
60:24 - you get to cis
60:28 - and but
60:30 - the os
60:31 - brings in cis and this is as close as
60:34 - you can get but you can also bring in
60:37 - sis
60:40 - all right so bleh
60:44 - so the way that we interact
60:46 - with the command line let me go through
60:49 - i think i got some pretty cool notes and
60:50 - i want to make sure i go through this
60:52 - so the way that this is
60:55 - is i'm going to look at
60:58 - help
60:59 - on sis.org
61:02 - v
61:05 - if no argument is given
61:08 - built
61:09 - mutable sequence a list
61:13 - built in a list so now let's i forget
61:15 - how many times i got to go through this
61:18 - all right so then i'm going to back out
61:19 - of here
61:22 - i forget that okay uh quit
61:26 - cls
61:27 - all right
61:29 - if i lost anybody yet
61:31 - is everybody good still
61:34 - so now what i'm going to do
61:37 - is
61:41 - copying
61:42 - close this out
61:49 - so here's my here's my file
61:54 - so
61:56 - import
61:58 - sys
62:00 - print sys dot
62:02 - arg v does anybody recognize arg
62:06 - v args
62:08 - arguments and then
62:10 - argv
62:12 - variables so now if i run this
62:16 - i want to show you what comes what comes
62:18 - out so
62:21 - now i could do
62:23 - i need to save this
62:24 - and i knew i didn't save it if i shown
62:27 - everybody this
62:29 - let me let me do this
62:34 - my asterisk right up here
62:36 - i know this isn't saved because i have
62:38 - an asterisk
62:40 - i love
62:41 - working with young people and i ask them
62:43 - if they
62:44 - press f5 and they say yes
62:46 - and they say it's not working and i can
62:48 - walk up
62:49 - see here's here's the trick this is why
62:51 - you're so lucky to have me i have
62:54 - screwed up every single way possible
62:56 - so
62:57 - i know where all the pitfalls are that's
63:00 - my that's what my superpower is
63:02 - uh
63:03 - i'm not that smart i'm slow
63:05 - but
63:06 - my superpower is i can mess something up
63:09 - and then i learn from it so all right i
63:11 - did not save that so what i'm doing
63:13 - right here is now i gotta go free
63:17 - code
63:19 - camp so i'm calling the file
63:21 - free
63:22 - codecamp.py
63:24 - how are you
63:28 - uh
63:31 - oh i completely forgot that all right
63:37 - doesn't like the spaces so we're gonna
63:38 - use our temp we're gonna steal
63:50 - import system want to get into that
63:54 - print
63:56 - i was using my temp file today so
63:58 - print arg
64:02 - arg v
64:05 - and then control
64:07 - sleep error transition and then we're
64:09 - going to go
64:11 - temp
64:12 - underscore
64:14 - one
64:16 - all right
64:17 - so python
64:19 - temp underscore one dot py
64:22 - how
64:24 - are
64:25 - u
64:26 - so what this does is it returns
64:31 - it returns
64:32 - a list right here so sys.org v
64:37 - takes in everything splits it but
64:40 - completely ignores python so i also i
64:43 - love this example because
64:46 - since we're already here in the
64:47 - interpreter or we're in the file and
64:49 - python understands
64:51 - that this is a
64:53 - our computer understands that this is a
64:56 - dot py file
64:58 - so i can just run
65:00 - this
65:02 - and
65:03 - this prints out i want to draw your
65:05 - attention to this this is a list
65:07 - but this is the absolute path
65:11 - i think we've talked about absolute and
65:12 - relative
65:14 - this is relative because i'm in right
65:16 - here so i want to show you right
65:21 - i'm sitting
65:23 - right
65:24 - there
65:26 - and then i'm relative
65:28 - to this
65:30 - path
65:31 - directory subdirectory path directory
65:33 - subdirectory all
65:37 - all the same
65:38 - so
65:39 - this is going to spit out
65:42 - all of the arguments
65:43 - excluding this because this understands
65:46 - this is the program we're going to use
65:48 - so this is a list this is important to
65:51 - what we're about to do
65:53 - so we're going to take a condition
65:55 - and understand what we have
65:58 - and then move forward
66:03 - so
66:05 - what we're going to do
66:06 - we don't need this anymore
66:08 - so i'm going to comment that out because
66:10 - we know not to delete anything
66:13 - so it's a list so
66:16 - if
66:18 - lynn of
66:20 - sys.org v
66:25 - greater than
66:26 - one
66:28 - print
66:32 - uh
66:34 - hello
66:40 - sis dot our
66:42 - v
66:44 - one
66:51 - else
66:52 - print
66:58 - a standard awesome hello world
67:05 - bam
67:08 - all right
67:11 - so let's go through
67:13 - didn't mean to do that see how many
67:15 - times i hit f
67:16 - um
67:19 - so temp
67:21 - py
67:22 - all right so let's go through this
67:25 - so
67:27 - on this input
67:29 - python takes it takes all of it right
67:32 - excluding if we pass in python it knows
67:35 - it goes hey you want that you want that
67:37 - program
67:39 - go on from there
67:40 - all right
67:41 - and then everything thereafter
67:45 - put this in a list
67:47 - just set it off the side put it into a
67:48 - list if you want to deal deal with it
67:51 - great if you don't i still have it
67:55 - so
67:56 - what i'm saying is i'm telling python
68:00 - hey if this list
68:03 - is greater than one
68:05 - i want you to then
68:07 - do this
68:08 - and we're going to print out hello
68:12 - and index the list
68:15 - at index 1
68:18 - place that here and hello so now if i
68:21 - were to do this
68:24 - i get hello sam
68:27 - so if it's greater than 1
68:29 - come to the list
68:31 - index 1 so then also
68:38 - print
68:40 - just so we can see
68:43 - uh
68:44 - print
68:49 - actually we just want to do
68:51 - sys.rt
68:57 - save
69:02 - so just so you can start to wrap your
69:04 - head around this
69:14 - i'd we can look at that i know there's i
69:17 - know it's in here
69:19 - [Music]
69:22 - i know i've had it with numpy
69:25 - i don't know with math i don't know if
69:27 - the math module i don't know if you guys
69:29 - see in chat uh if it's looking for
69:32 - trigonometry i can't remember
69:34 - if math has it but i know numpy has it
69:38 - all right so i just wanted to do this
69:40 - and print this out
69:43 - okay it is because i know
69:46 - oh okay don't know numpy
69:49 - numpy is one of the really big building
69:51 - blocks of
69:53 - it was the beginnings of it then people
69:56 - came along and added to that so all
69:58 - right let's get through this and then
70:00 - we'll chat and actually we may be
70:02 - wrapping this up
70:04 - i'm really not feeling that great so all
70:05 - right
70:07 - let's uh let's at least finish this out
70:09 - and we'll see if it passes or not
70:12 - okay
70:13 - so we had our standard um
70:17 - where we took in
70:18 - our
70:19 - our list our arguments from the command
70:22 - line our sys.org v right our list
70:26 - right up here anything
70:28 - typed on the prompt
70:31 - excluding our program to run
70:33 - so it takes that turns us into the
70:35 - absolute path
70:37 - then any other things split on the white
70:39 - spaces all right
70:41 - so
70:42 - i took i gave it the file
70:45 - and i gave it another
70:47 - bit of information and argument
70:49 - if it was longer than one
70:52 - so this has len of two
70:55 - this is index zero this is index one so
70:59 - i've had this print out so now
71:02 - now let's do this with more than one
71:05 - and then maybe we'll talk about numpy in
71:07 - a few minutes i'm going to try to make
71:09 - it to 10 30 and then if this
71:12 - passes we'll we'll move on all right
71:16 - so there we go
71:17 - all right
71:20 - so now i want to take in
71:24 - two
71:26 - let's see
71:30 - if
71:31 - of
71:32 - if
71:34 - when
71:36 - cis.org v
71:44 - equals two
71:49 - print
71:50 - so we'll do this in a minute we'll go
71:52 - over this real slow
71:55 - print
71:56 - f
72:06 - hello
72:10 - sis.org
72:13 - argv
72:15 - then our slice
72:18 - close that out
72:20 - then lf
72:23 - blend.sys
72:30 - v
72:31 - equals
72:32 - three
72:34 - print
72:40 - hello
72:42 - did i close this out nope
72:52 - v
72:54 - then
72:55 - one
72:56 - close close
73:00 - i hear
73:02 - you are
73:13 - close close
73:15 - close
73:16 - close
73:18 - else
73:20 - print
73:24 - hello
73:26 - world
73:28 - all right
73:30 - save
73:32 - so here we go
73:33 - this
73:34 - hello world
73:36 - sam
73:38 - and then 43.
73:41 - so let's go let's go through this
73:57 - oops
74:08 - i'm so out of it today i'm sorry guys
74:14 - not gonna be allowed back all right
74:16 - so let's go through this really really
74:17 - slow
74:19 - so there's my
74:22 - there's my list of
74:26 - one two three one two three
74:30 - then
74:33 - one two
74:36 - one
74:37 - so
74:38 - because
74:39 - i passed in just one argument
74:44 - this scenario i just get hello world
74:47 - just pass in the file name
74:49 - then i pass in
74:50 - my
74:52 - file name and my name
74:54 - equals two do this
74:58 - file name
75:00 - name
75:01 - age
75:05 - three arguments
75:06 - do this indexing with name
75:10 - and then age
75:12 - all right
75:25 - uh well
75:26 - okay
75:27 - this is very fluid and you guys are here
75:30 - to to learn python so
75:32 - let's take a minute
75:34 - and just peek at
75:37 - math
75:40 - jan did you say that uh
75:44 - uh
75:45 - it does have
75:46 - some
75:47 - i guess i can't remember
75:50 - yeah okay
75:52 - um
75:53 - because the question
75:56 - now are you referring so yeah it has uh
75:59 - sine cosine tangent
76:01 - are those
76:04 - are they and then even degrees
76:09 - do you see that have you run have you
76:11 - run dur on math
76:13 - and then you run help
76:16 - on math dot
76:18 - cosine
76:21 - and return the cosine and it's measured
76:23 - in radians okay
76:26 - okay i thought i can get away with
76:29 - using
76:30 - yeah
76:32 - oh a note
76:34 - numbai is
76:36 - actually more for
76:38 - matrices and things like that really
76:40 - high-end math
76:42 - uh but i knew i knew it had some and
76:46 - uh law
76:48 - uh yeah you should be able to and i mean
76:51 - it's got uh i knew it had pie and power
76:53 - so here we need to
76:55 - while we're tiptoeing around this i want
76:57 - to show you this so we got help let's do
76:59 - help on math
77:02 - 301 lines
77:03 - so the only problem with a couple of
77:06 - these i do not
77:08 - like
77:09 - and i don't complain about document kit
77:12 - documentation very much
77:14 - but there
77:15 - are some times where
77:17 - all right
77:19 - so we need we need to talk about this
77:24 - and this is a better one
77:27 - so you see these right here and you
77:30 - think all of these are
77:35 - all of these are methods
77:37 - summer attributes okay
77:39 - so method you have to call with the
77:41 - parentheses
77:43 - i can't even tell if i'm in focus okay
77:45 - you need to call with the parentheses
77:47 - and call them now these right down here
77:50 - are attributes
77:52 - so you do not you just call them okay
77:57 - all right these have value
78:00 - all right so you do not need to have
78:02 - and you typically have them when they're
78:04 - down here in the data
78:06 - so these these how you did these are how
78:08 - you differentiate attributes and methods
78:11 - i don't know if i've actually explicitly
78:12 - said that
78:14 - it took me forever to realize that i was
78:16 - like why why when why how do you know to
78:18 - not use the dot or the or not to use the
78:21 - parentheses and when to use the
78:22 - parentheses
78:24 - they are typically
78:28 - right down here so all right let's see
78:30 - where i am
78:31 - with notes to get us this close to
78:34 - uh
78:36 - 12 does did does uh the command uh to
78:39 - the sysdark v
78:41 - does all this make sense before we move
78:43 - on
78:45 - all right
78:47 - well very cool all right let's just go
78:48 - ahead and get into it so actually we had
78:51 - a
78:52 - somebody on twitter reached out to me
78:54 - last night i was putting out there that
78:57 - was going to be back today
78:59 - and got
79:00 - quite a few
79:02 - response likes and retweets and thought
79:04 - it was very cool i think beau even uh
79:08 - retweeted and liked
79:10 - um
79:11 - uh the tweet so i thought that was very
79:13 - cool
79:13 - and uh also for those of you who are
79:16 - here and have gone over to my channel i
79:18 - just want to tell you guys thank you
79:20 - very much because uh i've passed
79:23 - 3500 subscribers and that is very
79:26 - humbling for me so all right
79:28 - i just want to tell you guys thank you i
79:29 - love this love doing it so much and um
79:32 - just for you guys to hang out with me
79:35 - and
79:36 - choose to spend your time
79:38 - learning from me is extremely humbling
79:40 - so all right
79:42 - dictionaries
79:44 - they are absolutely
79:47 - awesome
79:51 - jan you are very welcome i appreciate
79:53 - all the time and support uh you're
79:56 - always here you're very very vocal and i
79:58 - really appreciate that because that
79:59 - keeps me
80:00 - on task and knowing that i'm going in
80:03 - the right direction
80:05 - so all right
80:06 - what is a dictionary do you guys
80:09 - uh just give me a feeler
80:12 - uh it's a
80:13 - it's another type of container
80:17 - with python
80:19 - and
80:20 - so variables are variables um and where
80:24 - where things become powerful is the type
80:26 - of container with which they
80:29 - stay
80:30 - are contained in and in a dictionary
80:35 - are the curly brackets
80:37 - square brackets are lists curly brackets
80:39 - are dictionaries
80:41 - so type
80:44 - d
80:46 - dictionary
80:48 - and then we run
80:50 - uh
80:51 - help
80:53 - on dictionary 121 lines
80:57 - you're good
80:59 - all right
81:00 - aha
81:02 - you can iterate through it
81:04 - and this is where it becomes
81:07 - very very powerful
81:11 - key value
81:12 - so now
81:14 - and there's also one thing that is very
81:17 - awesome about uh
81:19 - dictionaries
81:21 - you can have so
81:23 - one one of the three rules in python is
81:27 - a
81:30 - variable cannot be a number
81:32 - excuse me
81:34 - can't start with a number so it can't
81:35 - just be a soul number it can it can end
81:37 - with a number it can't contain a number
81:39 - but it can't just be a number or start
81:41 - with a number
81:43 - so
81:44 - but a key can and the way that you
81:47 - these are associated
81:50 - is
81:51 - so if i were to
81:54 - uh
81:57 - d equals
81:59 - 1
82:02 - sam
82:03 - so now
82:05 - d
82:06 - the key 1
82:08 - is associated with sam so this is a
82:10 - perfect example
82:13 - of
82:14 - let's say you have a situation and
82:15 - you're going to be counting things and
82:16 - you have no idea
82:18 - none whatsoever
82:20 - how many of
82:22 - whatever you're counting people
82:24 - like you you're you you're gonna have
82:27 - people come coming to a game
82:29 - you have no idea how many people are
82:30 - gonna show up a dictionary is one of
82:32 - those tools
82:34 - that you have this container and you
82:36 - just go through
82:38 - and you increment and count and go up
82:41 - from there
82:42 - and then have any information associated
82:45 - with it so before we get too far into it
82:49 - let's just do some simple
82:51 - things
82:53 - and then we will
82:58 - there we go all right
83:03 - all right dictionaries
83:10 - all right
83:11 - so
83:14 - i want to look at
83:17 - this
83:19 - and then the other so i showed you
83:24 - this
83:27 - okay that's one way d
83:30 - then
83:32 - t
83:34 - t
83:35 - so type
83:38 - d is a dictionary type t
83:41 - it's also a dictionary so you have two
83:43 - you have two ways and we're gonna
83:45 - there's a little bit of foreshadowing of
83:48 - how we can get through to this
83:52 - so all right
83:54 - i already showed you this so one and
83:56 - then now also
83:59 - i want to show you another way so d
84:04 - now this that can i bet actually i know
84:07 - exactly where you were coming from this
84:09 - is where it gets a little odd is that
84:11 - the key
84:12 - is wrapped in a bracket
84:14 - so i bet that's where you got that from
84:17 - and that is a little confusing so the
84:19 - main list excuse me
84:22 - the main dictionary is wrapped in curly
84:24 - brackets but to get to a key
84:27 - to get out the value
84:30 - you do need to use brackets so i bet
84:32 - that's exactly what you were doing
84:35 - sorry uh what was my main example
84:41 - that i don't want that anymore we're
84:43 - done with that
84:45 - so we have
84:47 - sam
84:49 - oh my goodness i'm just going through
84:51 - these
84:53 - notes
84:55 - oops
85:13 - there we go
85:16 - so
85:21 - i just saw that the last time or the
85:24 - original
85:26 - lesson on this was
85:27 - two years ago because i was 41 when i
85:29 - did this because that's what my age was
85:31 - then so all right
85:32 - so here's my key
85:36 - now i want to show you this
85:38 - so then you call this like this
85:44 - close this out
85:46 - so my key i'm passing in this key
85:50 - to this dictionary and get this value
85:53 - all right
85:57 - now let me show you this
86:00 - so this is a way you kind of add one and
86:02 - then here's
86:03 - just creating
86:05 - fruit
86:06 - equals bracket
86:09 - banana
86:12 - close that out so you get your colon
86:16 - then i have three of these
86:18 - comma
86:20 - apples
86:22 - i have one of these
86:25 - and grapes
86:29 - close that out i got two grapes
86:34 - all right so then i call fruit
86:43 - so then i get
86:45 - my key a value and the whole dictionary
86:48 - just like that
86:51 - now i want to show you this
86:54 - for i in
86:57 - fruit
87:00 - print
87:02 - i you only get out the key
87:06 - all right
87:08 - when you're looking at it so lynn
87:10 - of fruit
87:12 - how many keys are there
87:16 - okay now you can literally
87:20 - because if you've messed around with
87:22 - json at all so that's just pulling
87:24 - information out uh off web
87:27 - uh
87:27 - web pages you're doing inquiry so to
87:30 - understand how a dictionary works
87:32 - you need to understand and the example
87:34 - we're about to do
87:36 - is
87:38 - putting a dictionary inside a dictionary
87:40 - i believe
87:42 - and i want to show you this so but
87:45 - i also want to show you how to pull
87:47 - everything out
87:48 - so we're going to run dir not fur
87:51 - dir
87:55 - i should not have got out of bed today
87:56 - sorry everybody uh dur on
87:59 - fruit
88:02 - let's see
88:03 - i got keys
88:05 - i got
88:08 - i got
88:10 - items
88:11 - i got values
88:13 - okay so
88:14 - all right let's
88:16 - let's see let's see what keys
88:19 - does
88:20 - so we got fruit
88:23 - dot keys
88:26 - all right so i got banana apples
88:30 - grapes
88:31 - okay fruit
88:33 - fruit
88:34 - dot values
88:36 - let's see what these are
88:38 - aha
88:39 - so three one two
88:42 - all right
88:42 - what does items do
88:47 - food dot items
88:51 - oh wait a second
88:54 - all right so this is
88:57 - this is kind of cool
88:58 - this is kind of cool so now okay okay
89:01 - okay i got
89:02 - four
89:05 - for i in
89:07 - ryan fruit
89:13 - i got
89:17 - i just got
89:19 - the keys
89:21 - but if i do help
89:23 - okay okay okay so
89:25 - i'm going to get this help on
89:28 - items let's add a fruit
89:35 - items
89:37 - all right i get items
89:40 - uh what do i want to show you i'm going
89:42 - to show you
89:46 - this is what i want to show you right
89:48 - here
89:49 - so
89:49 - it's actually in the documentation
89:54 - just like
89:55 - this so now when you get items here
90:03 - so our items comes out
90:06 - how did items come out
90:10 - huh so i get a tuple
90:12 - so this is kind of like unpacking
90:18 - so now i need to unpack this
90:21 - so key
90:24 - value
90:26 - and dot
90:27 - items
90:32 - sorry i thought somebody was here so i
90:34 - unpacked this
90:37 - so key
90:39 - value
90:41 - so now when i run this
90:45 - all right
90:48 - i can tweak this a little bit more
90:55 - uh
90:58 - i
91:00 - have
91:04 - v
91:09 - three
91:14 - so what am i doing
91:24 - okay
91:26 - so you can swap these around so i know
91:28 - in my key value pair i'm going to get
91:30 - the key first then the value
91:33 - key first then the value i have to
91:35 - unpack that and assign it so
91:37 - if you're anything like me i got it i
91:38 - got to unpack it put it the way that i'm
91:40 - going to see it and then i literally
91:42 - then can just come through here
91:44 - and place it wherever i want to
91:48 - all right
91:53 - let's see
91:54 - so all right guys
91:57 - like i was saying
91:58 - i think we can pick up here
92:00 - i
92:02 - i'm not feeling that hot we got 90
92:04 - minutes in
92:06 - so um i think that is a great stopping
92:08 - point uh sorry everybody for cutting
92:10 - this short and i'll extend my
92:15 - my apologies to to bow in them
92:20 - but
92:21 - so super glad to be back please i love
92:24 - all the feedback i think we got so we're
92:26 - gonna do more
92:27 - with uh
92:30 - yes
92:33 - absolutely
92:34 - um so glad to have so many people here
92:38 - um well i i appreciate that i i thought
92:42 - i would get going and get okay but um
92:44 - just um
92:46 - nope
92:47 - but we'll be back
92:49 - next week uh absolutely love the
92:52 - um hit me up on twitter or uh
92:56 - with ideas because or go to my my
93:00 - channel
93:01 - um
93:02 - and see the things that we did you can
93:03 - go to the playlist of the first 100 or
93:06 - 200 because we have not even made it out
93:08 - of the first 100 videos
93:10 - from my channel so the idea of these
93:12 - live streams is going back over those so
93:15 - then you're able to go back and search
93:17 - for micro videos on all of these topics
93:20 - now there is some things in here that we
93:22 - have that i have not expanded upon
93:25 - but um
93:29 - well
93:30 - i'm glad you guys are getting out of it
93:32 - uh something and i'm very humbled that
93:35 - you guys come and spend uh
93:37 - all this time uh with me so um
93:41 - you guys have a great week great
93:44 - rest of your day and we got some things
93:47 - brewing so that we can we can uh always
93:51 - be in contact there's a there's some
93:53 - folks
93:54 - helping me out but as always guys i
93:57 - greatly appreciate you guys watching
93:58 - hope you got something out of it and i
94:00 - will see you guys next week bye guys