00:00 - in this tutorial we're going to build a
00:02 - chat app using react redux redux socket
00:07 - and websockets
00:09 - this is actually based on a tutorial by
00:12 - flavio copes and i'm going to link to
00:14 - that article in the description
00:16 - so in this basic chat room program
00:20 - every user that connects to the server
00:21 - is registered upon connection and they
00:24 - get a username and then they can write
00:26 - messages that are broadcast to every
00:29 - connected client
00:30 - this is going to be a distributed
00:32 - application built using a node.js server
00:36 - and a browser client written in react
00:40 - and then we're going to use redux to
00:42 - manage to manage the data and then
00:45 - manage the side effects using redux saga
00:48 - so it's good to have some experience
00:50 - with react
00:51 - and redux but you don't
00:54 - need to
00:55 - if if you need a refresher on react or
00:57 - if you've never used react before you
00:59 - should check out my my my introduction
01:02 - to react video
01:03 - so check the link in the description for
01:05 - that we're also going to handle the
01:08 - client server communication using
01:10 - websockets also you can see the entire
01:14 - source code
01:15 - on github in the link in the description
01:18 - so first we're just going to install
01:19 - create react app so i'm just going to
01:21 - npm install
01:24 - g create
01:27 - react
01:29 - app
01:34 - okay after that we get that installed
01:36 - we're just going to use the create react
01:39 - app quick starter so create react app
01:43 - chat
01:47 - okay now that's installed let me just
01:49 - clear my screen i'm going to cd into the
01:52 - app folder which is this chat so it's cd
01:56 - chat
01:57 - and then i'm going to do yarn
01:59 - start
02:03 - so over my web browser we can see on the
02:05 - local host
02:07 - we have the basic welcome to react
02:09 - screen
02:11 - so we have created our our basic
02:13 - template
02:15 - so our quick starter has worked once we
02:18 - finish our app we're going to have the
02:20 - basic layout where we're gonna have a
02:21 - users list on the side we have the
02:23 - message list up here and then at the
02:24 - bottom we're gonna have the the new
02:26 - message box
02:28 - to do this we're gonna create a static
02:30 - version of the chat using plain html and
02:33 - css
02:34 - so the code for that is pretty simple
02:36 - i'm in sublime text right now and you
02:39 - can see all the files on the side that
02:41 - were created with my create react app
02:43 - starter
02:45 - okay i'm going to start with the css i'm
02:46 - just going to go to the source directory
02:48 - and then this app.css file this was all
02:52 - just
02:53 - put here by default so i'm going to
02:55 - change this
02:57 - just for this section i'm just going to
02:58 - paste in the code
03:00 - all the rest i'm actually going to type
03:02 - on this tutorial but this is not really
03:03 - focused on css i do have a link to this
03:07 - exact css in the description of the
03:09 - video so you can go and grab that and
03:11 - then be able to paste it in
03:13 - so i'm going to save that and then i'm
03:14 - going to go into app js here
03:17 - so here's the default stuff but we're
03:19 - going to change this a little bit
03:21 - specifically everything in this return
03:24 - we are going to change
03:26 - i'm going to have an aside
03:31 - id equal sidebar
03:37 - and it's just going to have the users
03:39 - over in that sidebar
03:47 - and then we're going to have a section
03:49 - with an id of main
03:55 - let's get this here
03:59 - and inside that section
04:01 - we're going to have another section
04:04 - with an id of messages list
04:08 - it's just going to say messages list
04:16 - and then one more section i'm just going
04:18 - to duplicate that line
04:20 - and this is going to be called the new
04:22 - message section
04:32 - and then we just have to end this other
04:34 - section
04:37 - oh one more thing we do need to change
04:39 - this default up here so this is going to
04:42 - be id equals container
04:48 - that will work with our css a little
04:50 - better
04:53 - okay
04:54 - now back in our website i did zoom in on
04:56 - this website 300 so everything was a
04:58 - little bigger but you can see we have a
05:00 - user section a messages list section and
05:03 - then the new message section
05:05 - so this is what the basic layout of our
05:07 - app is going to look like okay we're
05:10 - going to use redux to manage the state
05:13 - of our app
05:15 - so that's how we're going to manage all
05:17 - the data in our app so we're first going
05:19 - to have to install redux so let's do
05:22 - yarn add redux
05:26 - react redux
05:32 - okay now that redux is installed we're
05:35 - just going to translate this basic html
05:38 - layout we added and just prepare it to
05:40 - fill in the components we'll create
05:42 - later
05:43 - so right up here i'm going to import
05:46 - some things i'm going to import
05:49 - sidebar
05:50 - now this is something that we haven't
05:52 - created yet i'm going to
05:54 - create it import it from
05:57 - containers
06:00 - slash sidebar
06:01 - and we'll create that in a little bit
06:03 - here
06:04 - i'm going to duplicate those two lines
06:07 - and
06:08 - now a sidebar will become messages list
06:14 - so i
06:16 - see i'm double clicking the word to
06:17 - select it and then i just do command d
06:19 - to select the next occurrence and then i
06:22 - can edit both at the same time
06:25 - by the way to duplicate a line i just
06:27 - said shift command d to duplicate
06:30 - and now i'm going to change this stuff
06:32 - down here instead of having this aside
06:35 - we're actually going to have the the
06:37 - sidebar container so i'm just going to
06:40 - put sidebar
06:44 - and then we still have the section id
06:46 - main
06:47 - but for this section
06:49 - it's now going to become
06:51 - messages list
06:57 - and then this section
07:00 - is going to become the add message
07:05 - now these three components are all going
07:07 - to have a presentational component which
07:09 - manages the user interface and a
07:11 - container component which manages its
07:14 - behavior and the data that the
07:16 - presentational component will show
07:18 - so let's go over to this index.js file
07:22 - and in this file we are going to
07:24 - initialize redux and then we are going
07:26 - to import the chat reducer and then
07:28 - create the store
07:29 - now reducers are just part of redux
07:32 - so this was all this code that was
07:35 - already created by the create react app
07:37 - we're just going to import a few more
07:40 - things
07:41 - we're going to import
07:44 - the provider
07:50 - from
07:51 - react redux
07:55 - and then we're going to import
07:58 - the create store
08:02 - from
08:04 - redux
08:06 - now the create store
08:08 - is where we're where we're going to
08:10 - store all the data for the app
08:13 - the only other thing we're going to
08:15 - import
08:16 - is chat
08:18 - from
08:20 - reducers
08:23 - and then i'm just going to create a
08:24 - const here const store
08:27 - equals create store
08:30 - and like i said that's going to be
08:33 - our our data that we're going to be
08:34 - using we're going to it's going to use
08:35 - this be stored all the data for app and
08:38 - we're going to import see we're going to
08:40 - pass in our reducer which we're still
08:42 - going to create this this chat reducer
08:45 - we still have to create
08:47 - but that's what is going to be able to
08:50 - really get in all the our all of our
08:52 - data into our our store it's just part
08:56 - of redux
08:58 - and then
08:59 - down here where it's rendering something
09:01 - we're going to mix things change things
09:03 - up a little bit
09:04 - okay i'm going to add a
09:06 - provider
09:10 - i'm going to use the provider and
09:12 - set what the store is it's going to
09:13 - equal store
09:16 - and then we have the app inside it
09:24 - and then provider
09:30 - now we're going to create the actions
09:33 - in redux whenever you're going to change
09:36 - the state you do it through an action
09:38 - because the the store the overall state
09:42 - for our application is read only we're
09:45 - never going to write directly to the
09:47 - state and when we're going to do all
09:48 - through an action so we're going to
09:51 - create a new folder in here i'm going to
09:53 - go to new folder
09:55 - and this is going to be called actions
09:59 - and inside this folder i'm going to do a
10:01 - new file
10:03 - index.js
10:05 - we are going to first import
10:09 - star as types from
10:16 - constants
10:18 - action types now this is another file
10:21 - we're so we're going to have to create
10:23 - we're going to bring in the types from
10:26 - this other file that we're going to
10:27 - create in just a second so i'm going to
10:29 - let next
10:30 - message id equal
10:34 - zero
10:36 - and const
10:37 - next
10:40 - user id
10:41 - equals zero so i'm just gonna set up
10:43 - some data we're gonna use in here and
10:45 - here's the first action we can do
10:48 - const add
10:50 - message
10:52 - equals
10:55 - message
10:58 - author so if we're going to add a
11:01 - message we're going to call this action
11:02 - add message and we're going to pass in
11:04 - the message and the author or who the
11:07 - message is from
11:09 - so we're going to send the message it's
11:10 - going to have a type
11:12 - of types dot add
11:16 - message actually let's go just go and
11:18 - create the types right now so that was
11:20 - in this file constant slash action types
11:23 - so i'm going to create a new directory
11:25 - here
11:26 - new folder constants
11:30 - and in constants i'm gonna have a new
11:32 - file called
11:34 - action types
11:37 - dot js sometimes you can do constants in
11:40 - the same file but when you're gonna have
11:42 - a bigger application it's gonna be
11:43 - better to break things up into different
11:45 - files so i'm just gonna do export const
11:50 - add
11:52 - message
11:55 - and this is going to be pretty basic
11:57 - it's just going to be add
12:01 - so the constant add message is just the
12:03 - string add message
12:05 - so i'm going to do do command shift
12:07 - duplicate
12:08 - and we're going to duplicate that four
12:10 - times
12:11 - and uh command d select the next
12:14 - occurrence
12:15 - message
12:18 - received
12:22 - i before e
12:25 - except after c okay so now we're going
12:28 - to do this add user
12:32 - and
12:36 - users list
12:43 - actually for a small app like this we
12:46 - don't even really need to have constants
12:48 - like this
12:49 - we could actually put this as a string
12:52 - right here instead of
12:53 - going to this constant
12:55 - but it's just good practice because when
12:57 - you get to a bigger app you're going to
12:59 - want to use constants like this just in
13:01 - case you want to change things later it
13:03 - makes things a lot easier to change okay
13:05 - let's continue adding our message so
13:07 - when you add a message it's going to
13:08 - have the type which is add message
13:11 - that's the type of the action we're
13:12 - going to have the id
13:14 - which is next
13:16 - message id
13:17 - plus plus so you can see up there that
13:19 - it starts at zero and then for each i'd
13:23 - for each message this gets added it will
13:24 - just increment the the message id
13:27 - and then we're going to include the
13:29 - message which is what was passed into
13:32 - this action and the author which was
13:34 - also passed into the action
13:37 - and now we're going to create another
13:39 - action export
13:41 - const we're only going to have four
13:43 - actions there's gonna be add message add
13:45 - user message received and populate users
13:48 - list
13:48 - so this one is going to be add
13:51 - user
13:52 - and i'm going to
13:54 - just pass in a name
14:00 - and the type is going to be types.add
14:06 - user
14:08 - and then the id
14:10 - that's why we we started the user id at
14:12 - the top is zero so this is just going to
14:14 - be
14:15 - next user id
14:18 - increment
14:19 - and then obviously we need the name that
14:21 - was passed into this action because
14:23 - that's going to be the user's name
14:26 - and the next action
14:28 - is going to be
14:30 - message
14:32 - received
14:35 - and so we're going to pass in the
14:37 - message
14:38 - and the author
14:45 - now it's going to be
14:47 - type
14:48 - types
14:50 - dot
14:53 - message
14:54 - received
14:56 - and then we're still the id is going to
14:58 - be just like the add message where it's
15:00 - going to be
15:03 - next message id
15:05 - plus plus now the reason why there's a
15:08 - oh oops this was supposed to be lower
15:09 - case the reason why we have the add
15:12 - message
15:13 - and the message received
15:15 - that the and they both have the same
15:17 - type of id the difference is add message
15:20 - is when
15:22 - the the current user like you are adding
15:24 - a message messages received is when the
15:27 - other user in the chat program is adding
15:30 - a message so you're receiving a message
15:32 - from someone else is message received
15:34 - but the message id is still going to
15:36 - increment both ways
15:38 - okay i was looking how the the colors uh
15:41 - like this wasn't green up here i think i
15:43 - need this um
15:44 - carrot here oh there we go
15:46 - so i need that more than sign to make
15:48 - this into an arrow up there
15:50 - okay back to here we're gonna pass in
15:52 - the message
15:53 - and the author
15:57 - and one more action
15:59 - export const
16:02 - populate
16:04 - users list
16:06 - equals users
16:10 - and the type
16:12 - is going to be types.users
16:14 - [Music]
16:18 - list
16:20 - and then we're going to pass in the
16:21 - users
16:27 - well those are our four actions you can
16:28 - add a new message a new user can be
16:30 - added to the chat a new message can be
16:33 - sent and the server will send updates
16:36 - the users list when a person joins or
16:38 - quits the chat
16:40 - now these are the actions but the
16:41 - actions don't actually change the state
16:44 - so this right here is showing that when
16:47 - you add a user it's basically creating
16:50 - almost this json object here but that's
16:54 - not actually
16:55 - changing anything that's what the
16:57 - reducers are for so the reducers take
17:01 - care of creating a new state when an
17:03 - action is dispatched
17:05 - so in particular when a message is added
17:08 - by us we're going to add it to the local
17:10 - list of messages
17:11 - when we receive a message from the
17:14 - server we add it to our list of messages
17:16 - when we add a user we put it in the
17:19 - users list and when we get an updated
17:21 - users list from the server we refresh
17:24 - so let's start creating those reducers
17:26 - that are actually going to change the
17:27 - state of our app so let me save that
17:29 - file
17:30 - and i'm going to create a new directory
17:32 - so in the source file i'm going to go to
17:34 - new folder
17:35 - and it's going to be called reducers
17:40 - and in here
17:41 - a new file
17:43 - and the first one is index.js
17:47 - uh let me just
17:48 - let's see let me make sure everything's
17:50 - saved i'm gonna close some of this stuff
17:52 - for now
17:54 - okay so i'm in the
17:56 - reducers index.js
17:58 - and we could put all of our reducers
18:00 - into one file
18:02 - but since we have
18:04 - both messages and users we are going to
18:08 - create this one file we're actually
18:10 - going to break it up into two files the
18:12 - messages reducer and then the the user's
18:15 - reducer and then
18:17 - this file index.js is going to combine
18:20 - the messages and user's reducer into one
18:22 - reducer
18:23 - so it will make more sense as as we go
18:25 - here but we're going to do combine
18:29 - reducers
18:33 - from
18:36 - redux
18:38 - and then we're going to import
18:40 - messages
18:42 - from
18:44 - messages
18:47 - and we're going to import users
18:51 - from
18:53 - users
18:54 - and then these messages and users are
18:56 - something we still have to create those
18:58 - but first we're just going to finish off
19:00 - this file
19:01 - cons chat
19:04 - equals
19:05 - combine reducers
19:08 - now and you can see about the combined
19:10 - reducers just comes from redux and we're
19:12 - going to pass in messages
19:14 - and
19:16 - and users so this is just combining two
19:18 - reducers into one reducer and we're
19:21 - going to export
19:22 - default chat
19:25 - oh i spoke export wrong there we go
19:28 - and save that so we're done with that
19:30 - file and i'm going to create another
19:32 - file in the reducers directory this
19:34 - one's going to be called
19:36 - messages
19:38 - dot js
19:40 - the reducer is what actually changes the
19:43 - the state
19:44 - of your application
19:46 - so this is going to change the state of
19:49 - the messages in our application so first
19:51 - we're going to const messages
19:55 - equals
19:56 - state
20:01 - in a reducer you always pass in this the
20:05 - current state
20:06 - and an action and you return the new
20:10 - state
20:11 - so when we call messages you always pass
20:13 - in the state and the action and if there
20:16 - is no state it's going to be set to
20:19 - an empty array but if there already is a
20:22 - state it will pass in whatever the state
20:24 - of the messages are if there are already
20:26 - messages you'll just pass in the current
20:28 - list of messages and the action
20:30 - and it's going to return a new state so
20:35 - let's
20:37 - figure out what we're going to do now so
20:38 - we have switch
20:41 - we're going to create a switch statement
20:42 - to figure out which which type of action
20:45 - is happening so we have action dot type
20:49 - so that's the action that was passed in
20:53 - and uh just to kind of make this more
20:55 - clear let's go back to our
20:58 - uh our action file
21:01 - so
21:02 - so this is an action that could be
21:05 - passed into our our reducer you can see
21:08 - there's a type an id a message and an
21:11 - author so we're passing in that action
21:15 - and so
21:16 - uh is
21:18 - the when the action right here is the
21:20 - action we passed in so the action.type
21:24 - for instance would be
21:25 - type dot add message that would be an
21:27 - example of one of the the types so let's
21:30 - finish this switch statement so if
21:33 - under the case of add
21:37 - message
21:39 - so if we pass in the type of the action
21:42 - of add message
21:44 - we are going to do something but
21:46 - actually we're going to do the same
21:48 - thing whether the case is add message or
21:51 - if the case is message
21:54 - uh received
21:56 - so we're just going to put two case
21:57 - statements
21:58 - together
21:59 - and we are going to return
22:03 - state dot concat
22:06 - so state.concat basically means we're
22:08 - going to take the current state and
22:10 - we're going to add this on to the end so
22:13 - we are going to
22:15 - let's see
22:17 - here we go yeah we're going to add a new
22:19 - message met the message is action dot
22:22 - message
22:23 - that's what we pass in with our action
22:25 - the author
22:28 - is going to be action.author
22:31 - and the id
22:32 - is going to be action
22:34 - dot id
22:36 - and
22:37 - change things change the indentation a
22:39 - little bit
22:41 - okay so now we're going to go back to to
22:43 - the default
22:44 - so the default is
22:46 - the default just means
22:48 - if
22:49 - wait a second if it's typing this first
22:51 - okay so
22:53 - we have these two cases if those cases
22:56 - we're going to add a message and return
22:58 - the state with the new message which is
23:00 - just the state with adding this new
23:02 - message on it
23:04 - if the action is not add message or
23:06 - message received
23:08 - we're just going to return the state
23:11 - with the state that was already there so
23:13 - so we're not going to change the state
23:14 - at all we're just going to return the
23:16 - current state
23:20 - and then down here we're just going to
23:22 - put export default
23:24 - messages
23:26 - and we're going to actually i'm just
23:28 - going to do some refactoring here see
23:30 - how i use the string
23:31 - we did make this this those constants
23:34 - over here these action type constants so
23:38 - i'm going to change this to use those
23:39 - action type constants
23:41 - so let's see i'm going to
23:44 - import
23:46 - star
23:47 - as
23:49 - types
23:51 - from
23:56 - constants
23:58 - action types
24:01 - and then
24:03 - here i'm going to just change this to
24:06 - types dot add message
24:08 - with without the quotation marks
24:10 - um types dot
24:13 - message received
24:14 - okay looks good i'm going to copy this
24:17 - top line so i'm going to use this in the
24:19 - next file i'm going to create i'm going
24:20 - to go to a new file and this time it's
24:22 - going to be
24:24 - users.js
24:27 - and in this file like i said i'm going
24:28 - to start with this importing the types
24:31 - because we're going to use those again
24:32 - and this is going to be pretty similar
24:34 - to the last file
24:35 - users equal
24:37 - we always pass in our state
24:40 - which if there isn't a state at all yet
24:42 - it'll become an empty array
24:45 - and we're going to pass in our action
24:48 - and then we're going to do something
24:49 - with that
24:51 - so again we're going to do a switch
24:52 - statement
24:54 - to find out what action was passed in
24:57 - action dot type
25:02 - now this time the different cases will
25:04 - not be exactly the same so if the case
25:06 - is
25:07 - types dot add
25:11 - user
25:13 - we're just going to return
25:17 - state.concat this is going to be pretty
25:19 - similar to the the
25:20 - messages one we're going to concat
25:25 - a new user onto here name
25:30 - action dot name
25:32 - and the id is going to equal action
25:35 - dot id
25:39 - now we're going to get the case
25:42 - of types dot
25:45 - users
25:46 - list
25:48 - and then we're just going to
25:50 - return
25:52 - action dot users
25:54 - basically instead of just adding a user
25:56 - to the list
25:57 - when we call the action users list that
25:59 - means we're getting in a
26:00 - entirely new users list so we're just
26:03 - going to return the so the state of the
26:05 - users just becomes the entire users list
26:08 - that was just passed in instead of
26:10 - adding one user onto the current users
26:12 - list
26:13 - and then
26:15 - the default
26:18 - is going to be
26:20 - return the default is always the same
26:21 - it's always return state
26:23 - if you didn't pass in users add user or
26:26 - users list then we're just going to
26:27 - return the state
26:30 - and then go down here
26:31 - export
26:34 - default
26:37 - users
26:38 - and we're done with that file if we go
26:40 - back into our original app.js file and
26:43 - then remember we import the sidebar
26:45 - messages add message these containers
26:49 - now it's actually time to create those
26:51 - containers
26:53 - now if we go back into our original
26:54 - app.js file
26:56 - we can see the components we're using a
26:58 - sidebar
26:59 - messages list add message
27:01 - now we're actually going to create those
27:03 - components
27:05 - so let's start with the add message
27:06 - components first i'm going to create
27:10 - the folder called containers because you
27:12 - can see we put them all into a folder
27:14 - called containers
27:16 - and in here a new file
27:19 - called add
27:21 - add message
27:23 - dot js
27:25 - so this is going to be a functional
27:27 - component that's pretty simple it's
27:29 - going to create an input field into the
27:32 - new message section of the page and when
27:34 - the enter is when the enter key is
27:36 - pressed we're going to dispatch the add
27:38 - message action passing the value of the
27:41 - input field so let's start that we're
27:43 - going to import react
27:47 - from
27:48 - react
27:51 - import
27:52 - prop types
27:55 - from prop
27:58 - types
28:01 - const add
28:03 - message
28:06 - equals
28:08 - props
28:14 - and we're gonna
28:15 - let input we're gonna create this input
28:17 - variable here
28:19 - and we're gonna just return the actual
28:21 - component here
28:25 - section
28:26 - id
28:28 - it's gonna equal new message
28:33 - and input
28:35 - on key press
28:38 - so if someone press the key into the
28:41 - input field
28:43 - we're going to do something here if e
28:46 - dot key
28:48 - equals equals equals
28:50 - enter
28:53 - so anytime you press the enter key we're
28:55 - going to props
28:56 - dot dispatch
29:01 - here we're going to dispatch an action
29:05 - and
29:06 - we're going to pass in the value of the
29:09 - the input field and then we are going to
29:13 - pass in the the user's name so the value
29:16 - is the the message that's being sent and
29:19 - then we want to know the user of the who
29:22 - is sending that message for now we're
29:24 - just going to set it as me
29:26 - me is sending the message and then we're
29:28 - going to set the the value
29:31 - to an empty string so
29:33 - that's the the value of the input field
29:36 - so it was whatever you typed in and now
29:38 - it's just going to be nothing because
29:39 - you've sent the message
29:41 - to make this props that dispatch work
29:43 - i'm going to go down to the bottom here
29:45 - and put add
29:48 - message dot prop types
29:52 - equals dispatch
29:57 - prop types dot
30:00 - font dot is required
30:03 - okay
30:04 - now we're going to go up here
30:05 - and we're going to add some more
30:07 - information to the input field here
30:10 - the type of this input field
30:13 - is going to be text
30:16 - and
30:18 - for the reference
30:22 - input equals node
30:25 - and then i'm just going to in this
30:27 - section here
30:32 - and i'm going to move this parenthesis
30:34 - to there
30:36 - and the last thing
30:38 - is export
30:40 - default add message
30:43 - so next up is going to be the message
30:45 - component which is going to render a
30:47 - single chat message by using the author
30:50 - message format so what i'm going to do
30:53 - is just
30:54 - duplicate this this add message
31:00 - and this is just going to be called
31:03 - message
31:06 - and i'm just going to change some of
31:07 - this stuff so
31:08 - instead of add messages message
31:11 - we're going to return something
31:13 - different here
31:15 - let's see
31:17 - we're not going to have the input
31:20 - we're going to pass in
31:23 - two things
31:24 - a message
31:26 - and the author okay i'm going to take
31:28 - out this whole section here
31:30 - and put parentheses
31:32 - and inside the message we're just gonna
31:35 - have a p tag
31:38 - and we're gonna
31:40 - have the author
31:44 - and the message
31:50 - from the message.prop types
31:55 - we're going to have message
32:00 - is a string
32:03 - author
32:07 - is also a string
32:12 - and then export default
32:15 - message
32:18 - okay i'm going to save that file so this
32:20 - message is going to be rendered by the
32:22 - message list component which iterates
32:25 - over the list of messages so instead of
32:27 - duplicating i'm just going to copy this
32:29 - beginning that i'm going to kind of
32:30 - reuse in my next file new file and this
32:33 - is going to be called messages list
32:36 - also in my containers folder dot js
32:39 - and put in the beginning thing here this
32:42 - is going to be called const messages
32:44 - list
32:46 - and
32:47 - and here it's we're just going to
32:49 - have the messages
32:59 - and we're going to have a section of id
33:02 - it's going to equal messages
33:06 - list
33:09 - and then this is just going to be an
33:11 - unordered list
33:12 - inside
33:15 - is
33:18 - messages.map
33:21 - and for each
33:22 - message in the messages list
33:26 - we're going to do the message
33:31 - the key
33:32 - is going to equal
33:35 - message.id
33:39 - dot dot message
33:43 - and then i'm just gonna end the
33:45 - unordered list tag
33:49 - and in the section tag
33:55 - and then i'm gonna
33:57 - declare the prop types here
34:06 - messages
34:08 - prop types dot array
34:12 - of
34:14 - so
34:16 - let's see what's gonna be in the
34:17 - messages we're gonna do
34:19 - prop type dot shape
34:25 - id
34:27 - prop types dot number dot is
34:32 - required and
34:34 - message
34:37 - prop
34:38 - types dot string dot is required
34:42 - and let's get a comma here
34:46 - duplicate
34:49 - author so we're gonna have an id a
34:52 - message and an author
34:54 - for for each message
34:56 - and just add another is required here
35:00 - and
35:03 - another is required
35:05 - final thing is just exporting this
35:12 - okay now we finish the messages list so
35:15 - we're going to create the sidebar
35:16 - component which instead of iterating
35:19 - over the messages is going to iterate
35:20 - over each user so i'm just going to do a
35:22 - new file
35:24 - and
35:26 - let's try that again new file and i'm
35:28 - going to do sidebar.js
35:33 - and just like from the messages list
35:35 - where um some of these things start the
35:36 - same so i'm just going to copy this
35:37 - first few lines we're going to import
35:39 - react and prop types instead of cons
35:42 - message list is going to be const
35:44 - sidebar
35:46 - and instead of messages we're going to
35:48 - put users
35:50 - we're going to have this aside here
35:53 - and with id equal sidebar
35:58 - and class name
36:00 - which is the same as class is going to
36:02 - equal sidebar
36:06 - then we're actually just going to make
36:07 - an unordered list of all the users so
36:10 - let's do
36:12 - users.map
36:14 - we're going to pass in
36:16 - or for each user i mean
36:18 - we're going to
36:21 - do a list item li the key is going to
36:24 - equal the user.id
36:28 - and then we're going to have
36:31 - user.name
36:33 - so it's going to show each user's name
36:35 - so that's the end of the list item
36:39 - and then
36:40 - that's also the end of the under list
36:44 - and that's the end of the aside
36:48 - now uh let's see we need a final
36:50 - parenthesis to end that
36:53 - and then we just need to
36:54 - set up what our prop types are so
36:56 - sidebar dot
36:58 - prop types
37:00 - equals
37:02 - the the users
37:04 - which is prop types dot array of
37:10 - new
37:11 - prop types
37:13 - dot shape so we're going to define the
37:15 - shape of this property
37:18 - we have the id
37:20 - which is just prop
37:22 - types dot it's gonna be a number
37:25 - is required
37:28 - and then i'm just gonna um
37:31 - copy this line and this is going to be
37:33 - name is prop types dot
37:37 - string
37:38 - is required
37:40 - and
37:41 - this whole thing is going to be dot is
37:42 - required
37:44 - and also this whoops what i do here i'm
37:47 - going to put that to the next line
37:49 - dot is required
37:51 - and then we just have to export
37:54 - the default
37:57 - sidebar
38:00 - okay we just finished that one
38:01 - now we're gonna make our containers and
38:04 - actually we already have this containers
38:06 - folder is because i
38:08 - lay i actually misnamed this this was
38:10 - actually supposed to be the components
38:12 - folder so i'm going to rename this
38:15 - containers folder components
38:18 - and now i'm going to make a new folder
38:21 - that's containers so containers
38:24 - basically we're going to generate the
38:26 - container components for the for the
38:28 - presentational components so in this
38:30 - components directory which i just
38:31 - renamed these are the presentational
38:34 - components and we have to make the
38:36 - container components and then we're
38:38 - going to use the connect function from
38:41 - react redux so this is something that we
38:43 - do for redux
38:45 - so i'm going to create a new file here
38:48 - and this is just going to be add message
38:52 - dot js so all the names are going to be
38:54 - the same from the the container for from
38:56 - these other components like we have this
38:58 - add message here now it's add message
39:00 - here and it's going to be a pretty
39:02 - simple file first we're just going to
39:04 - import
39:05 - connect and this will help us connect
39:07 - them together from react
39:10 - redux
39:12 - and then i'm going to import
39:16 - the add message component
39:18 - which is the one that we created
39:21 - from
39:22 - and i just have to put where it's
39:24 - located components
39:27 - slash add message
39:30 - and then
39:32 - i'm going to import one of our actions
39:35 - the
39:36 - add
39:38 - message
39:39 - the add message action from our action
39:43 - folder
39:43 - actions
39:45 - now we're going to const map
39:48 - dispatch
39:52 - to props
39:55 - it's going to equal
39:56 - dispatch
39:58 - and
40:01 - and here
40:02 - we're just going to find what dispatch
40:04 - is going to be dispatch
40:07 - we're going to pass in the message and
40:09 - the author
40:11 - and
40:13 - dispatch
40:15 - so this this dispatch right here is
40:18 - actually right from redux so message
40:25 - message
40:26 - and the author
40:28 - and i'm going to
40:30 - fix this here now i just have to export
40:33 - that
40:34 - const add message and here's where we
40:37 - use the connect
40:38 - so
40:40 - connect
40:43 - and we're going to pass in
40:46 - this empty object here
40:48 - oh a comma here map dispatch to props
40:53 - and
40:54 - message component
40:56 - so this is basically going to connect to
40:59 - the add message component so i'm just
41:01 - going to save that
41:02 - and i'm just going to
41:05 - re
41:06 - duplicate this
41:08 - but this time it's going to be called
41:09 - messages list we have to do this for for
41:12 - each of our components that we created
41:14 - so in messages list we're going to have
41:16 - connect we're going to have
41:19 - this time we're going to have messages
41:21 - component so i'm going to change this to
41:23 - messages component
41:27 - and
41:29 - oh actually it's
41:30 - message
41:32 - messages list component
41:35 - and then for instead of add message it's
41:37 - going to be messages list
41:39 - so messages
41:42 - list
41:43 - and we don't have to import this action
41:45 - because we are not going to do the
41:46 - action before we use this add messages
41:49 - action but we're not going to do that
41:50 - actually we're going to actually get rid
41:52 - of this whole thing here we don't need
41:54 - any of that so
41:56 - const
41:58 - instead of add message it's going to be
42:00 - messages list
42:03 - equals
42:04 - connect and here you know i'm just going
42:07 - to start this from scratch here so
42:10 - connect
42:12 - state
42:14 - i'm going to pass in the state
42:18 - and it's going to be messages
42:22 - state dot messages
42:24 - and this here
42:27 - then the messages list component
42:30 - and then one more this one's gonna this
42:33 - for the the sidebar sidebar components
42:35 - be very similar to this so again i'm
42:38 - going to well let me save this
42:40 - and then i'm going to duplicate
42:43 - this is going to be sidebar
42:47 - and then here it's just going to be
42:50 - sidebar component
42:51 - now
42:52 - i just did command d to select both and
42:55 - i'm going to put sidebar component
42:59 - and then just change this to the word
43:01 - sidebar
43:03 - and we change this to the word sidebar
43:06 - it could have done this all at once
43:07 - sidebar
43:09 - and here
43:11 - it's just going to be
43:12 - um
43:14 - instead of messages it's going to be
43:16 - users and see i just did this both these
43:18 - at once users and users
43:20 - and we're done with that one so i'm
43:22 - going to save that
43:23 - and at this point we've done enough to
43:26 - actually do some tests here
43:28 - so let me go back to my browser
43:32 - and fail to compile you know maybe i
43:34 - should have been checking this all along
43:35 - we're gonna there's probably a few
43:36 - things that i've
43:38 - had a mistake on it looks like i'm
43:40 - missing a closing tag let's wait what
43:43 - file that was on sidebar.js
43:45 - so let's go over here
43:47 - and
43:49 - i need a closing tag there
43:53 - now i'm just going to restart my server
43:55 - here
43:57 - and
43:58 - let's see what happens
44:00 - okay
44:02 - messages.js line 13 so let's try that in
44:04 - that reducer so let me go back to
44:07 - let's see the reducers messages.js
44:11 - line 13. i may not need this one
44:15 - okay can't resolve constant slash action
44:19 - types
44:20 - let's see let's go back to that users.js
44:25 - constant slash action types
44:29 - okay i see what i did wrong i um
44:32 - this this folder is spelled wrong so
44:36 - let's uh rename this
44:39 - uh
44:40 - constants
44:41 - done
44:42 - and let's now let's see what's we got
44:44 - going here
44:48 - okay we're gonna restart the server
44:49 - again
44:52 - okay can't resolve containers slash edge
44:56 - and message
44:58 - app.js container slash add message so
45:01 - let's see what's wrong there
45:04 - okay we have app.js
45:08 - containers
45:10 - slash add message
45:12 - let's go to containers
45:15 - slash add message
45:17 - and
45:21 - oh okay
45:22 - here's the problem
45:24 - we have the containers in the wrong spot
45:27 - so this should actually be in the source
45:29 - folder so i'm going to
45:31 - move this
45:33 - and it's just me chat slash
45:35 - src slash containers
45:38 - and now let's see what happens i'll save
45:41 - that
45:43 - and
45:45 - it's compiling
45:46 - okay we have another problem next user
45:48 - id is read only
45:51 - so let's see what we have to do
45:53 - um go with index.js
45:58 - that wasn't it uh oh actions index.js so
46:01 - let's go here
46:03 - oh this is gonna be a const this should
46:04 - be a let
46:06 - so let's save that
46:10 - and now let's see what happens
46:14 - let's see unexpected token
46:16 - oh i forgot the end thing again i think
46:19 - they copy and paste it so components add
46:21 - messages
46:22 - um right here
46:25 - finish that
46:26 - let's just check all these while i'm
46:27 - here
46:28 - um
46:30 - all those seem right so let's go see if
46:32 - it compiled
46:34 - okay unexpected token add message
46:39 - okay components add message line 17
46:44 - okay my problem here they didn't have an
46:46 - equal sign so let's save that
46:48 - and compile again
46:51 - okay let's see components add message
46:53 - line 20
46:55 - components at message line 20 right here
46:59 - oh i didn't i didn't close my input
47:01 - above there so let's do close the input
47:07 - okay expert message received and
47:09 - prototype was not found in constant
47:11 - action types
47:13 - let's see actions.index
47:16 - um
47:17 - this is this be e i
47:19 - let's see what happens now
47:23 - message list does not contain export
47:25 - name messages list
47:29 - let's see containers
47:32 - messages list
47:34 - okay the problem is i have a s here when
47:37 - there shouldn't be an s let's save that
47:41 - okay this is another one where there's a
47:42 - singular plural issue so let's see
47:45 - container slash messages list
47:48 - okay containers
47:51 - messages list oh again this should be
47:54 - singular
47:56 - and let's see if that works
47:59 - messages is not defined
48:02 - messages list line eight
48:05 - let's see
48:06 - components messages list
48:09 - messages is not defined
48:13 - i think we have to import
48:18 - import
48:19 - messages
48:21 - from
48:24 - message
48:25 - and i'm going to do import
48:27 - message
48:33 - let's see if that works
48:36 - okay can't resolve component slash
48:38 - sidebars
48:40 - containers
48:43 - you know i'm having part time with these
48:44 - uh plural things so um
48:49 - this should just be
48:51 - sidebar
48:54 - now let's check that
48:57 - oh spelled users wrong oh i'm in the
48:59 - wrong one
49:01 - line seven
49:03 - users
49:05 - compiled with warnings that means they
49:07 - actually compile and it's actually
49:09 - looking how it should look so let me put
49:11 - something in the bottom here hello
49:14 - and it appears hi
49:16 - so i put a message in there and it's
49:18 - going to show it above here
49:20 - so now you can see every time it says me
49:24 - serial is good
49:27 - so right now we only have one user me
49:28 - and it appears right up here from the
49:30 - messages
49:32 - so that's good we're getting somewhere
49:34 - now we have to add ourselves in the user
49:35 - list you can see there's no user on the
49:37 - side here and it should show the list of
49:39 - users
49:40 - since we're not actually talking into
49:42 - anyone yet we should at least see me in
49:45 - the sidebar
49:46 - later on we'll add additional people
49:48 - that join the chat we already have the
49:50 - add user redux action so it's a matter
49:53 - of calling in our index.js file after
49:55 - initializing the store
49:57 - so we already have the the add user
50:00 - redux action if you go into the actions
50:02 - you can see the add user here so it's a
50:05 - matter of calling in our index.js file
50:07 - after initializing the store
50:09 - so we're going to go over to
50:11 - index.js here
50:13 - and after we initialize the store here
50:17 - we're going to do store
50:19 - store
50:21 - dot dispatch
50:24 - and we'll dispatch the add user
50:28 - action
50:30 - and
50:31 - just going to add the user me
50:33 - and this is just how we are going to
50:34 - register ourselves as present in the
50:37 - chat and since we use this add user here
50:40 - i'm going to have to import that so
50:42 - import
50:44 - add user
50:47 - from
50:48 - and we're just going to import it from
50:50 - actions
50:53 - and i really should have paid attention
50:54 - to these warnings before
50:56 - expected to return a value in the arrow
50:58 - function and expect an assignment
51:00 - function call
51:02 - except so
51:03 - i think the problem here is that this
51:06 - should be a parenthesis instead of a
51:08 - bracket so let's change this to a
51:11 - bracket a parenthesis here
51:14 - and save that
51:18 - now let's see if this works good less
51:21 - warnings logo is defined but never used
51:23 - i'm not going to worry about that
51:25 - and now it just showed me there so
51:27 - that's the the user there
51:30 - hey
51:32 - do you want a
51:35 - marshmallow
51:37 - it's
51:38 - probably spelled wrong that's okay
51:39 - because in chat
51:41 - you can spell things wrong
51:43 - okay so let's go back over we just have
51:45 - a few more things to finish up
51:48 - okay i'm going to just close some of
51:49 - these files here um
51:51 - we're about to get started on the server
51:54 - side part a chat that is local and that
51:57 - does not communicate with the network
51:59 - is just not not super interesting so we
52:01 - need to be able to be able to talk with
52:03 - other people through a server so we're
52:06 - going to create a centralized server
52:07 - where users will log into and then they
52:10 - can lock they can talk to each other
52:12 - so
52:13 - we're going to go back to um at the chat
52:17 - folder up here and i'm going to create a
52:19 - new
52:20 - a new folder so this should be
52:22 - this is just me called server
52:26 - and it should be at the same level as
52:28 - the src folder
52:30 - so inside server
52:32 - i'm going to create a file
52:34 - and this file is called app.js
52:38 - so we're going to use the the native
52:42 - websocket object in the browser which is
52:45 - pretty widely supported and use the ws
52:47 - websocket library on the node.js server
52:51 - so so here's the server we're gonna do a
52:53 - const
52:54 - websocket
52:58 - equals require
53:01 - so that's the the ws websocket library
53:06 - we're going to create the the web
53:09 - the websocket server
53:10 - new
53:16 - websocket.server
53:18 - and then we just have to put in the port
53:19 - here
53:21 - we're going to use port
53:22 - 89.89
53:25 - so that's the port we're going to
53:26 - connect to and we also want to keep a
53:29 - list of users on the server so we're
53:31 - just going to initialize the variable
53:33 - users empty as an empty array
53:40 - and we're going to finish creating the
53:41 - the server here we're gonna const
53:43 - broadcast
53:45 - uh data
53:47 - and we're gonna pass it so passing the
53:49 - data and the web server
54:03 - so for each client that's uh
54:06 - attached to the web server
54:37 - so if the the client is in if the
54:40 - client's ready state is is in the
54:42 - websocket that open
54:44 - and the client does not equal the
54:46 - websocket
54:49 - we're just going to do client
54:51 - dot send
54:53 - and send the data
54:54 - json dot stringify
54:59 - data okay let's go down here now here's
55:02 - where we the web server is going to send
55:04 - different things depending on what's
55:06 - going on
55:08 - so
55:09 - on connection
55:14 - pass in the websocket
55:19 - the index
55:30 - so the the websocket servers received
55:33 - some data and it's
55:35 - received a message
55:37 - so we're going to
55:39 - parse
55:41 - the the message into our data variable
55:43 - dot parse
55:48 - and then we're going to switch statement
55:50 - because depending on what the data
55:51 - actually is we're going to do something
55:53 - different
55:54 - so data dot type
55:58 - if the the data message is showing add
56:01 - user
56:06 - then
56:08 - index.users.
56:09 - [Music]
56:11 - wait index
56:14 - index equals user
56:16 - dot length
56:22 - and
56:23 - users.push we're going to actually just
56:26 - push the user onto here
56:28 - and the name is going to equal name or
56:32 - data dot name
56:34 - and the id
56:36 - is index
56:38 - plus one
56:41 - then ws.send
56:45 - we just send the user the user list here
56:48 - so json.stringify
56:52 - type
56:55 - users
56:56 - list
56:58 - and then we're going to send users
57:01 - so the list of users
57:03 - now for the next case
57:05 - which is oh wait we forgot one thing i
57:08 - go up here
57:10 - and broadcast
57:14 - type
57:18 - users
57:23 - type is users list
57:26 - and then users
57:29 - so to send it we have to
57:31 - do the ws that send this and then we
57:33 - also have to broadcast it
57:36 - and
57:36 - let's see
57:38 - and then also
57:40 - the the websocket
57:43 - and then break it
57:45 - so now we can go back to this case case
57:48 - add message
57:52 - this time we're just going to broadcast
58:00 - with
58:01 - type
58:05 - add message
58:09 - and then the message
58:12 - data.message
58:16 - and the author
58:19 - data.author
58:23 - and then also we have to pass in the
58:25 - websocket instance
58:27 - so then we break
58:32 - and the default
58:34 - is just going to be to break
58:38 - because there's only two things that the
58:39 - server does adds user and adds a message
58:42 - now up here we just showed what happens
58:45 - when there's a connection to the
58:47 - websocket server but now we have to show
58:50 - what happens when when things close
58:53 - so
58:55 - let's go down here
58:58 - so ws.on
59:02 - close
59:11 - users
59:13 - dot splice
59:16 - index
59:17 - one
59:19 - broadcast
59:21 - so when it says users.splice index one
59:24 - that's just removing that current user
59:27 - from the users list
59:29 - so if someone closes their browser it's
59:32 - just going to remove their their
59:34 - username from the users list
59:37 - so i put users
59:39 - list
59:42 - users
59:43 - and ws
59:45 - and
59:46 - and that's it that's it for this file so
59:47 - i'm just going to save that file
59:49 - so basically in this file as soon as the
59:51 - client connects we're going to start
59:54 - listening for the add users and the add
59:57 - message
59:58 - events
59:59 - so as soon as a client connects we start
60:02 - listening for the add user and then the
60:05 - add message event
60:07 - and when the client connects establishes
60:09 - a connection to the server
60:11 - it will send the add user event with the
60:15 - name
60:16 - and then see we just add it to the
60:18 - server side
60:20 - so here we're just going to add it to
60:22 - the server side list of users
60:24 - and then issue a broadcast to all the
60:28 - connected clients
60:30 - so when we add a message
60:32 - when that when the add message event is
60:34 - sent to the server we broadcast it to
60:37 - all the connected clients so everyone
60:40 - connected to the server will get that
60:41 - message
60:42 - and then on the connection close
60:45 - we remove the user's name from the list
60:48 - and broadcast the new users list so
60:50 - that's that's what i was saying here and
60:52 - then it broadcasts a new users list to
60:54 - everyone so they know that there's no
60:55 - use that user is not on the list anymore
60:58 - and so on the client side we now need to
61:01 - initialize the websocket object
61:04 - and send an ad user event when we
61:06 - connect to the client we're also going
61:08 - to have to set up where the client is
61:10 - going to listen for the add user and add
61:12 - message events
61:13 - from that are broadcast
61:15 - to the the client uh and just one more
61:17 - thing you can see we use the the strings
61:21 - here
61:22 - instead of the the constants it's
61:24 - because the server can't actually read
61:27 - this constants anything from the
61:29 - constants folder because the client and
61:31 - the server are completely separated so
61:33 - in the in the src folder that's the the
61:36 - client side i'm gonna create a new
61:39 - folder just called sockets
61:45 - and then inside that folder
61:48 - i'm going to create a new file
61:50 - called index.js
61:53 - so this will have our our sockets
61:56 - information obviously so first i'm just
61:58 - going to import
62:00 - the action types
62:02 - so it types
62:04 - from
62:08 - constance
62:10 - slash action types
62:13 - and then i'm going to import the
62:15 - the actions we're just going to import
62:17 - the exact actions we need so it's going
62:20 - to be
62:22 - add user
62:25 - message
62:26 - received
62:29 - populate
62:31 - users list
62:33 - and that's going to be from
62:37 - actions
62:39 - and then const
62:41 - set setup socket
62:46 - now put dispatch
62:53 - and username
62:54 - see passing in dispatch will allow us to
62:57 - dispatch events
62:59 - and
63:01 - now we're going to create a const
63:04 - the socket this is going to
63:06 - be their new websocket
63:09 - web socket
63:12 - we're going to set as
63:16 - localhost
63:18 - 89.89
63:20 - which obviously this would be different
63:21 - depending on if you're running it
63:23 - locally or on an actual uh web server
63:27 - so now socket dot on open
63:33 - okay
63:34 - once we open the websocket connection
63:37 - let's we are going to
63:39 - [Music]
63:40 - send some information
63:43 - as soon as you you
63:45 - get on the server we're going to send
63:47 - you the username so socket dot
63:51 - send
63:56 - json.string
64:14 - so as soon as you connect
64:16 - you broadcast your username and then the
64:19 - server will receive that username and
64:21 - then send out to all the people that are
64:23 - connected to the server that there's
64:25 - been a new user added to the the chat
64:27 - room basically and socket dot on message
64:35 - okay and when we send a message we're
64:37 - gonna pass in an event object
64:40 - and now we have to be able to send this
64:42 - message to the server so first we're
64:44 - going to do const data
64:46 - equals json.parse
64:53 - and we're going to get the event.data
64:56 - and now a switch statement to figure out
64:58 - what where what the data actually is so
65:01 - data.type
65:05 - if the case
65:07 - is types.add
65:10 - message
65:15 - we're going to dispatch
65:20 - message received
65:24 - so on message is when we're
65:26 - we're receiving a message from the
65:29 - server so if that message is so if we're
65:32 - getting a message we're going to
65:33 - dispatch the message received and
65:36 - we're gonna do data.message
65:40 - data.author
65:42 - so we're getting this information right
65:44 - from the server the message and the
65:46 - author and we're dispatching this action
65:48 - so then we're gonna break
65:51 - and case
65:52 - types dot
65:54 - add user
65:56 - put that over there
65:58 - dispatch
66:02 - add user
66:05 - data dot name
66:07 - so we're receiving this new user from
66:09 - the server and we're just adding that
66:11 - user to our local a copy of the user
66:15 - and
66:16 - break
66:18 - and the last thing we can receive
66:21 - types dot users list
66:24 - so if we're getting a whole list of
66:26 - users
66:30 - dispatch
66:33 - populate users list
66:36 - and data
66:38 - dot users
66:43 - so all this information is coming
66:44 - directly from the server
66:47 - and
66:48 - our default is that we're going to break
66:50 - we're not going to do anything if we
66:51 - don't get one of those types
66:53 - which really should never happen so now
66:56 - we're going to return
66:58 - socket
67:00 - and finally
67:02 - export
67:03 - default
67:05 - setup socket
67:06 - and then i just have to go over to the
67:08 - main index file index.js
67:11 - and i'm going to import
67:13 - this setup sockets from from there
67:16 - so
67:17 - import
67:20 - setup
67:22 - socket
67:26 - from sockets
67:29 - and now we need to introduce a way to
67:32 - handle side effects into our code and to
67:35 - handle creating a websocket event when
67:37 - the user types a message so it can be
67:39 - broadcast to all the connected clients
67:42 - so to perform this operation in a clean
67:44 - way we're going to make use of redux
67:47 - saga which is a library that provides a
67:49 - good way to handle side effects and
67:50 - redux react
67:52 - so the reason why this is a side effect
67:55 - is because whenever you're getting an
67:57 - information from the server
68:00 - you're not sure exactly what's going to
68:02 - happen there could be an error you could
68:04 - get the the right information
68:07 - you could the server
68:08 - if you're not actually creating the
68:10 - server you may not know for sure what
68:11 - the server it like if it changed or
68:13 - something so
68:15 - in redux you always want things to
68:17 - happen right away but with redux saga it
68:21 - allows things to happen more
68:23 - asynchronously and
68:26 - account for
68:27 - for side effects that could happen where
68:30 - where your your function
68:32 - is changing something outside of the
68:34 - function
68:35 - so normally in redux every function
68:38 - your functions should be pure functions
68:40 - that don't change anything outside the
68:41 - function but if you're dealing with a
68:43 - server
68:45 - just by the very nature you're going to
68:46 - be dealing with something outside of
68:48 - your function so that's why it's good to
68:50 - use redux saga which can handle these
68:52 - side effects
68:53 - so we're actually going to have to
68:55 - install it so let me go over to my my
68:58 - console
69:00 - oh before i actually install maybe i
69:02 - should deal with some of these errors
69:03 - here so let's see unexpected token
69:07 - oh i forgot the word as
69:10 - import
69:11 - star
69:12 - as types
69:16 - actions that not contain user export
69:18 - name populate users list
69:21 - let's look at the actions here
69:26 - oh
69:27 - spelled this wrong so populate users
69:31 - list
69:35 - suck is defined but never use okay we
69:38 - are we are going to use that in a second
69:41 - so now we've dealt with all the errors
69:43 - i'm going to go to
69:45 - this other tab here clear that screen
69:48 - okay yarn add redux
69:52 - saga
69:57 - okay now we just have to initialize that
69:59 - so let's go back to our index.js
70:03 - let's let's move some of these around
70:05 - it's not important but
70:07 - um generally we're going to put the
70:09 - things
70:10 - that
70:11 - that don't start with a
70:14 - period first so see how
70:17 - the word react there's no period in
70:18 - front of it
70:20 - these aren't these are coming from
70:21 - libraries they're not from a local file
70:25 - but all these come from since it starts
70:27 - with appearing that means it's coming
70:28 - from a local file so i'm going to
70:30 - separate it like that
70:32 - put this together and then we're going
70:35 - to
70:36 - import
70:37 - create
70:38 - saga
70:39 - middleware
70:43 - from redux
70:45 - saga
70:46 - and then down here we're going to import
70:49 - something that we haven't created quite
70:51 - yet
70:52 - import
70:53 - handle
70:55 - new
70:56 - message
70:58 - from
71:00 - sagas we're going to create that soon
71:03 - and another thing we're going to create
71:04 - soon i'll just add it now is import
71:07 - username
71:09 - [Music]
71:10 - from utils slash name
71:16 - it's going to be how we're going to
71:17 - create the username for for the the user
71:20 - and now i'm going to create a new const
71:23 - which is just called saga
71:26 - middleware
71:28 - equals create saga middleware so
71:32 - we'll call that function now it says con
71:34 - store we're going to change this up a
71:36 - little bit so create store
71:39 - and said chat
71:41 - we're now going to call reducers
71:44 - or we're going to pass in reducers
71:47 - and that's actually going to come right
71:49 - from here instead of import chat we're
71:50 - going to change this in a second here
71:52 - but i'm going to call this reducers
71:57 - and so now we're going to pass in
71:59 - reducers here
72:01 - and then also apply middleware
72:08 - saga
72:09 - middleware
72:10 - comma okay now i'm going to
72:13 - get rid of the store.dispatch user add
72:15 - user me because now we're going to
72:17 - create a user in a different way through
72:19 - through the the sockets the start web
72:21 - sockets
72:22 - so here i'm going to do a const
72:26 - equal socket
72:31 - or i mean can't socket
72:36 - equals
72:38 - setup socket
72:40 - store.dispatch
72:43 - username
72:44 - so now i'm going to send over the
72:47 - username
72:49 - we're going to do something with the
72:50 - saga middleware sagal middleware.run
72:55 - handle new message
72:59 - socket username
73:01 - and at the very bottom after we register
73:04 - the service worker
73:07 - from redux
73:09 - i should do apply middleware
73:13 - so redux saga is a redux middleware
73:17 - so we need to initialize it during the
73:20 - store creation
73:22 - so that's why we have the apply
73:23 - middleware here
73:25 - and then the saga middleware and once
73:27 - we've initialized the redux saga
73:31 - middleware so then we're going to create
73:33 - the socket with the
73:35 - with setup socket by pi and passing the
73:37 - dispatch function the username
73:40 - and then we're going to run the
73:41 - middleware
73:42 - and pass
73:44 - the the handle new message function
73:47 - from the sagas and then the socket which
73:50 - has our dispatch function our username
73:52 - and then the username so after we
73:54 - initialize the the middleware with that
73:57 - apply apply middleware in the store
73:59 - creation
74:00 - we are going to initialize the socket
74:03 - so we can reference it inside the saga
74:07 - and then we just run the middleware and
74:10 - we have to pass in
74:11 - the
74:12 - the handle new message
74:14 - saga and then
74:16 - the
74:17 - socket which has the dispatch and the
74:19 - dispatch function of the username
74:21 - or before the user was called me but we
74:24 - want to actually have different names
74:26 - and not just me for all the users just
74:28 - for this example chat app we're just
74:31 - going to use a dynamic username
74:33 - generator
74:34 - we could make it so a user has to type
74:36 - in their username and that's just going
74:38 - to be a little more complicated than
74:39 - what we want to do for the app right now
74:41 - if you want to do that add that
74:43 - functionality on your own you can but
74:45 - we're just going to create this dynamic
74:47 - username generator using chance.js so
74:51 - let's
74:52 - create this file this utils.name so in
74:55 - the source i'm going to create a new
74:57 - folder called utils
74:59 - and then in utils i'm going to create a
75:02 - new file called name.js
75:07 - and i'm going to import chance
75:11 - from chance
75:13 - and const chance
75:17 - equals new chance
75:21 - export
75:23 - default
75:25 - chance dot first
75:29 - and i should have already installed this
75:30 - so we actually have to do an npm install
75:32 - for chance
75:34 - so let's
75:35 - go back to
75:36 - [Music]
75:37 - here npm install chance
75:46 - okay we got that installed the chance is
75:48 - just a random
75:50 - a random generator it can
75:53 - generate random strings numbers uh for
75:55 - instance this chance that first is just
75:58 - the a random first name chance that last
76:01 - would be random last name you could do
76:03 - chance.phone to get a random phone
76:05 - number
76:07 - so we're just going to create a random
76:08 - name for for this example
76:11 - so now let's we'll create the sagas so
76:14 - do a new folder in the src folder
76:17 - called sagas
76:20 - and then inside sagas new file
76:24 - index.js and then i'm going to import
76:30 - take every
76:32 - this is something directly from redux
76:35 - saga
76:36 - from
76:37 - redux saga slash effects
76:41 - i'm going to import
76:44 - star
76:45 - as types from
76:48 - these are just our constants
76:51 - slash
76:52 - action types
76:59 - so we're going to define our saga which
77:01 - is going to be a handle new message
77:04 - if you remember we already use this in
77:05 - our other file if we go back to our we
77:08 - use our handle new message here with the
77:10 - saga middleware so we're going to define
77:12 - that here
77:14 - so this is going to equal
77:16 - function
77:19 - now this function star
77:21 - is a generator function
77:24 - which
77:25 - basically means that whenever you run
77:26 - the function it could return something
77:28 - slightly different it's going to
77:30 - generate something new so that's what
77:32 - we're going to use that's for this saga
77:35 - handle new message
77:38 - params
77:45 - yield
77:47 - every time you
77:48 - a generator function
77:50 - you always have yield and it's going to
77:52 - yield this could do the next yield every
77:55 - time so i'm going to take every
78:07 - action
78:14 - action.author
78:17 - equals params.username
78:20 - and
78:32 - so so we're handling a new message
78:36 - from the server basically it can do this
78:38 - asynchronously and it can it can add the
78:41 - message
78:42 - with the author
78:44 - and the action
78:46 - so this saga
78:48 - is basically taking all the actions of
78:51 - type
78:52 - add message take every action of type
78:55 - add message and when this action occurs
78:59 - we're going to send a message
79:01 - to
79:02 - the websocket
79:04 - so here we're sending a message to the
79:06 - websocket
79:07 - and when this occurs
79:09 - we send a message to the websocket
79:11 - passing in the action and some details
79:15 - and so the the chat message sent by our
79:18 - user can be dispatched to all connected
79:20 - clients by the server
79:22 - okay and there are some things we don't
79:25 - need up here we don't need this import
79:27 - add user from actions we're not going to
79:30 - use that anymore
79:32 - and i have a spelling error so this
79:35 - handle new message there should be an e
79:37 - in here
79:41 - let me just restart the server
79:47 - okay let me try npm install again
79:54 - okay now let's try running the server
79:55 - again
80:01 - okay sockets does not contain export
80:03 - names set up socket
80:06 - let's just try taking these squirrelly
80:08 - squarely braces off around here
80:13 - okay export default imported as handle
80:15 - new message was not found in sagas
80:20 - okay
80:22 - so i'm in sagas i'm in
80:24 - index where it's just handling message
80:26 - i'm just going to say export
80:28 - default
80:32 - handle new message
80:36 - okay module not found can't resolve util
80:39 - slash name
80:41 - going back in this file and you know i
80:44 - probably need a slash here so let's try
80:46 - that
80:49 - okay
80:50 - um
80:51 - we don't we're not
80:53 - going to use a logo so what's this line
80:55 - expect an assignment or function call
80:56 - and instead saw an expression
81:00 - let's see index line six let's see what
81:02 - that is
81:08 - you'll take every
81:10 - okay let's try taking out this comma
81:12 - here
81:15 - okay it's compiled with warnings so
81:19 - let's see but
81:21 - maybe i should just take out that logo
81:22 - just to
81:23 - stop getting that warning so that was in
81:26 - app.js
81:29 - and i'm just gonna delete this line here
81:35 - okay compiled successfully
81:38 - as you know this app has a front end and
81:40 - back end so we're going to have to be
81:42 - running the backend server at the same
81:45 - time that we're running the front end so
81:47 - let's finish up setting up our server so
81:49 - we can get that to run
81:50 - first we just have to make the file uh
81:53 - runnable so we should do the sudo chmod
81:56 - zero seven seven seven dot server slash
81:59 - app.js so we can add the ability to run
82:01 - the server
82:03 - and also if you remember the server uses
82:05 - the ws library
82:08 - so
82:09 - i already did this i'm not going to do
82:10 - this again but you're going to have to
82:11 - put in npm install
82:14 - save
82:15 - ws
82:16 - to install that that that web websocket
82:19 - library okay now we just have to change
82:22 - directories into our server directory
82:24 - and we're going to run the server by
82:26 - just putting node app.js
82:30 - and looks like we do have an error
82:33 - so let's go back over to our our server
82:36 - file the app.js in the server directory
82:44 - and down here i just need to add a comma
82:47 - here
82:49 - and then also i've spelled client wrong
82:52 - uh you're probably getting kind of tired
82:53 - of my spelling errors so we have to fix
82:56 - this again i know i've have quite a few
82:58 - that you're probably noticing as i'm
82:59 - doing it
83:00 - so let's just run the server again
83:02 - nodeapp.js
83:04 - and it's working
83:06 - so let's try refreshing this and
83:10 - we have another mistake
83:12 - so given the action users list so let's
83:15 - go back over here
83:17 - again this is kind of another spelling
83:19 - error we have to add s to this this
83:21 - should be plural users
83:24 - okay let's run this again
83:28 - and the server is running there's no air
83:29 - so we know that it's actually working
83:31 - let's make sure our front end is still
83:33 - running correctly so in one tab in the
83:36 - terminal i have the server running and
83:38 - in the other tab in the terminal i have
83:40 - the the front end of the of it running
83:43 - so you need both of those running for
83:45 - this to work
83:46 - and let's test this out again
83:50 - and it's working it's adding my randomly
83:52 - generated name to the the users list and
83:56 - i'm going to try putting in a message
83:58 - hello
84:00 - yep so whenever i put in a message it
84:02 - lists me as the name but in the users
84:04 - list my name is clayton
84:07 - so let's try getting some more users
84:09 - here so i have another
84:10 - tab and i have a third tab and see as
84:12 - soon as i go into the website you can
84:14 - see the new users added to the list so
84:17 - now i have three users under three
84:19 - different tabs of three different
84:21 - windows
84:22 - hi everyone
84:24 - you can see it shows up on every tab
84:31 - hi clayton
84:35 - so now you can see how the chat app
84:37 - works we have we have all the features
84:40 - implemented
84:41 - i hope you learned a lot and thanks for
84:43 - watching
84:44 - my name is beau carnes don't forget to
84:47 - subscribe and remember use your code for
84:49 - good