00:04 - cool um so um so welcome
00:08 - um
00:09 - so
00:10 - sounds like a lot of folks like we're
00:11 - looking at my profile ahead of time but
00:13 - let me just introduce myself a little
00:14 - bit um i'm you know been in la for
00:18 - um about 12 years now doing a number of
00:21 - different startups um
00:22 - you know
00:23 - right now i'm a cto of retina ai we're
00:27 - doing artificial intelligence for
00:28 - another one of those buzzwords for
00:30 - marketing analytics um but our web app
00:32 - is written in vue um i've been a long
00:35 - time you know web developer uh like
00:37 - leading various engineering teams but
00:39 - switching between a number of different
00:40 - languages and frameworks like going way
00:43 - back um i wrote things in cgi scripts um
00:47 - not sure people even know what that is
00:49 - anymore um you know it's all server side
00:51 - generated uh websites that was uh way
00:54 - back in the day um did things with java
00:57 - um php was a big proponent of that um
01:00 - definitely a lot of server-side things
01:02 - um
01:03 - so uh
01:06 - let's say
01:07 - uh about maybe eight years ago or like
01:09 - you know 2010 2011 or so um
01:12 - javascript really started um you know
01:15 - coming back right it used to be this
01:17 - thing that like you know always broke so
01:19 - like you want to write as little of your
01:20 - code in it as possible because all the
01:22 - browsers were were doing things like a
01:24 - little crazy but then jquery came out
01:26 - and then finally like everything could
01:28 - actually be written in javascript um and
01:31 - so
01:32 - um
01:33 - i who here has written things in jquery
01:36 - oh wow okay so you're all battle scarred
01:39 - all right
01:41 - um
01:42 - i mean it was great for the time i mean
01:44 - otherwise you wouldn't have been able to
01:46 - do things like um in javascript so you
01:48 - could change things on the page without
01:50 - like a full page refresh you know server
01:52 - side so you wanted to change this one
01:54 - thing over there you could just go and
01:56 - select that element and go ahead and
01:57 - change it um you could actually build in
01:59 - nice user validation things uh where
02:02 - based on what people were doing you know
02:04 - they were able to immediately see some
02:05 - sort of like um you know were they doing
02:07 - it right you have to get to the end of
02:09 - the form and then hit submit and then
02:11 - figure out that oh no i need to fill out
02:12 - all uh uh all over again so anyway so jk
02:16 - was great one of the things i built on
02:17 - top of jquery and this was unfortunately
02:19 - proprietary um was a framework on top of
02:22 - jquery that i think did it right
02:25 - um there's a lot of things where people
02:26 - are doing wrong with jquery where you
02:28 - try to select into the dom
02:30 - and try to like store your state in the
02:33 - dom
02:34 - and do all sorts of wonky things like
02:36 - that
02:37 - non-unidirectional flow um but
02:39 - definitely having a controlled event
02:41 - loop uh having um things be declarative
02:44 - within the html itself writing html and
02:47 - html
02:48 - that that's what this framework did it
02:50 - was specifically for lead generation you
02:52 - would end up with a single page app that
02:54 - would like show you one page you get
02:55 - validated put some inputs show you
02:57 - another page that sort of thing
02:59 - anyways um
03:01 - that was great and then i discovered
03:02 - angular angular is um like wow like i
03:05 - don't need to build this thing myself
03:06 - right it's actually a single page app
03:08 - that can actually manipulate all this
03:10 - stuff angular has been um
03:12 - you know a great uh
03:14 - uh
03:15 - great time saver great productivity
03:17 - thing i think for a lot of the folks in
03:19 - the room i saw who raised their hands
03:21 - about it earlier you know it
03:23 - had a steep learning curve
03:25 - and there's definitely some abstractions
03:27 - that people are it's easy to get wrong
03:30 - but um you know a really powerful
03:32 - language
03:33 - then came long react right uh sort of
03:36 - jumped on board with that as well um
03:38 - getting it so you get some performance
03:40 - actually um you know we had like some
03:42 - large uh pages that had lots of reports
03:44 - and lots of information on it and they
03:46 - get pretty slow so again some past
03:48 - companies so react actually helped to
03:51 - inject a lot of performance on there
03:52 - make it a lot simpler to do that
03:54 - application
03:56 - and
03:57 - in the same space kind of what started
04:00 - doing things in a node on the back end
04:02 - to try to get the same that we were
04:03 - doing the front end in the back um doing
04:06 - much in python current companies doing a
04:08 - lot of things in r
04:09 - i do a whole bunch of different
04:10 - languages i feel like you should use the
04:11 - right one for the right tool
04:13 - and we can geek out later if people
04:15 - really want to about
04:17 - different different types of ones that
04:18 - are doing different things
04:20 - i'm also a big fan of a type script as
04:22 - well
04:23 - in in the right context it can bring a
04:26 - lot of
04:27 - a lot of efficiencies to how you're
04:29 - coding um but anyways
04:31 - then it's covered vue um a little more
04:34 - than a year ago um and uh you know it's
04:36 - kind of like looking at it with some of
04:38 - my previous company as something we
04:39 - might switch to and then end up founding
04:41 - my current company
04:42 - and kind of like jumped whole hog into
04:44 - the whole thing and uh it's been really
04:47 - great ever since
04:50 - cool so uh what is view uh well so like
04:53 - why why why is zelda's hype right so
04:55 - it's actually been getting um
04:58 - a lot of popularity um you'd see
05:00 - actually that
05:01 - um it's just sort of neck and neck with
05:03 - uh react these days in terms of github
05:06 - stars um
05:07 - angular sort of forked itself for
05:10 - whatever they did so like their things
05:12 - got distributed but um it's actually it
05:15 - got really popular in 2017 uh the
05:17 - beginning of the year there uh that's
05:19 - when like things really took off 2016 is
05:21 - when the laravel community picked it up
05:23 - as their their dedicated front end
05:26 - um
05:27 - but vue um it was created not out of one
05:30 - of the big tech companies um evan yu who
05:33 - created vue was a former googler but he
05:36 - wasn't at google when he was doing it
05:39 - the idea is that rather than say
05:41 - facebook's you know doing react or
05:43 - google during angular
05:45 - it started from the beginning as a
05:46 - community effort and even though it's
05:48 - gotten corporate sponsorship since then
05:50 - um you know so alibaba and baidu are
05:54 - actually paying you know uh some of the
05:55 - new's a salary in order to come have
05:57 - them kind of work on that it's been
05:59 - adopted by
06:00 - like adobe and ibm you know various
06:02 - larger tech companies
06:05 - so
06:06 - what is view
06:08 - well it's a view oh obviously done we're
06:10 - done all right
06:12 - uh it's a view layer uh and so it fits
06:15 - in the same space where react does right
06:18 - um
06:19 - and where angular
06:21 - 2 and above is trying to be although
06:24 - it's wiring a bunch of things in
06:26 - addition to that um and so the idea is
06:29 - that um it's about
06:31 - everything that you do that's
06:32 - interacting with what people are seeing
06:35 - on their screen right how it appears
06:37 - there in a nice unidirectional flow you
06:40 - start from just one place and you
06:41 - control everything that's going on the
06:42 - screen
06:45 - you you have a nice standard way of
06:47 - handling user interactions you know
06:49 - different events they might do click
06:50 - events you know touch screen events all
06:52 - that sort of thing
06:55 - and
06:56 - so
06:57 - starting after react vue was also able
07:00 - to take advantage of a lot of the
07:02 - lessons learned from react so um
07:07 - so we got things like uh
07:09 - the virtual dom
07:12 - yes so the virtual dom is what makes
07:14 - these single page apps a lot faster than
07:17 - they used to be for all folks in the
07:18 - room who were jquery developers um
07:21 - imagine you you had a whole list of like
07:23 - a
07:24 - 500 items and then all of a sudden i
07:26 - don't know you wanted to change the
07:28 - color of all of them or something
07:30 - you might need to go and select each one
07:32 - of them and change the color on all on
07:33 - all of it you have to figure out
07:35 - you know how to do that or you might end
07:37 - up destroying all the elements and then
07:38 - recreating them all over again
07:41 - the
07:43 - the browser doesn't like that sort of
07:44 - thing it's kind of heavyweight to change
07:46 - things and create and destroy all sorts
07:48 - of dom elements especially select them
07:50 - all the time
07:51 - so a virtual dom helps to
07:54 - make the lot faster by maintaining a
07:56 - model of what is there and it only
07:58 - changes what it needs to do to get where
08:00 - it's going to go
08:01 - this is definitely what came out of
08:03 - react and view just jumped
08:04 - wholeheartedly into that it also did it
08:06 - in a
08:07 - universal app style so the idea is that
08:12 - you're able to do server-side rendering
08:13 - of your html just as you do in the
08:16 - browser so um it's sort of what everyone
08:19 - assumes these days
08:21 - in their you know angular
08:23 - 4 or 5 or their react 16 or whatnot but
08:27 - um you know it definitely was an
08:29 - innovation at the time and it's helped
08:31 - people to do um
08:33 - you know build workflows where say your
08:35 - html is generated via um
08:38 - via node code um like taking in some
08:40 - state generating that and outputting it
08:43 - as a template you can even send it
08:45 - completely non-web related we generated
08:47 - like some emails using um you know uh
08:50 - node in the past for some other
08:51 - companies so just
08:53 - no no no browsers involved
08:55 - so it helps with testing it helps with
08:58 - um of course universal apps a universal
09:01 - app being something where you write your
09:03 - pages and they render sometimes on the
09:05 - server so that what gets shipped to the
09:07 - user is html
09:08 - and that renders as fast as possible or
09:11 - things which are rendered
09:13 - within the browser so that the um
09:17 - the users has as fast and as responsible
09:19 - and experience as possible
09:21 - cool so um
09:24 - where so that's how it gets fast i
09:26 - mentioned the simple uh one-way data
09:28 - flow would be something where you're
09:29 - trying to control something on a on a
09:30 - website um
09:32 - and you're trying to specify uh let's
09:35 - see these list of list of items on on
09:38 - the website right uh and then you
09:40 - you have some reason to change you
09:42 - reorder them you want to sort them in
09:44 - some different order for example or you
09:46 - want to add an element in the middle
09:48 - right
09:49 - what you could definitely do is get rid
09:51 - of all of them just regenerate it all
09:52 - from your data but that would be
09:54 - expensive uh so what you'd rather do is
09:56 - you'd rather go through
09:58 - the view layer and say like here's my
10:00 - data i just mutated my data and view
10:02 - will just take care of making it look
10:04 - the way it's supposed to look
10:05 - so
10:06 - was that
10:08 - you guys have all dealt with this sort
10:09 - of thing before i think some of you all
10:11 - right um html like templates this is the
10:14 - thing that really everyone who's coming
10:16 - from react really loves about vue at
10:19 - least the ones who
10:21 - maybe were always a little bit
10:23 - uncomfortable with jsx files
10:25 - i i've never
10:27 - really never sat well with me to write
10:30 - your html in javascript
10:32 - in javascript and not and have to do
10:35 - things like um not have your four you
10:37 - know in a
10:41 - label like label for something or
10:43 - whether
10:44 - not actually refer to that because well
10:46 - four's a key word in javascript so you
10:48 - can't do that
10:49 - um it always seems wrong to mix one
10:51 - language with the other language being
10:53 - someone who has like
10:55 - learned a number of different languages
10:56 - i'd like html to be html
10:59 - javascript to be javascript that sort of
11:01 - thing um it's just a clear way of
11:03 - thinking about it so
11:05 - um i've been blabbing for a little bit
11:07 - let's talk let's look at some code here
11:10 - so
11:11 - this is an example of a view app what
11:14 - it's doing here is it's making this
11:15 - thing on the bottom here where you can
11:17 - start changing that and you can save it
11:20 - and do that sort of thing
11:21 - so um
11:23 - this is just on jsfiddle do note this is
11:25 - on an earlier version of you but it kind
11:27 - of deconstructs it a bit so i think it
11:29 - makes it a little bit easier for people
11:30 - to see
11:31 - um
11:32 - and it wasn't me it was this this guy um
11:36 - anyways so let's let's talk about what's
11:38 - what you're seeing here so um
11:41 - in uh
11:44 - in the view uh component here so this is
11:46 - the uh this is a
11:48 - a view template uh and mentioned it
11:50 - looks just like html uh what makes this
11:53 - magic here is this uh this id the app id
11:56 - here that's the reference that in this
11:58 - case view one is is hooking into and
12:01 - it's hooking into the element and thus
12:03 - everything inside of that div is now
12:05 - controlled by view
12:07 - the
12:09 - the other thing we're doing here is
12:10 - we're defining a new uh
12:12 - new component uh within view and so a
12:15 - component is um you know the html and
12:19 - the javascript that makes it do its
12:21 - thing all together
12:23 - and so that's what's going on here this
12:24 - is the template id item edit
12:27 - and this is just one of these little
12:29 - lines here
12:30 - the idea is it has some sort of list
12:32 - item that is displaying you see in the
12:34 - span
12:38 - oh yeah
12:39 - um
12:40 - and uh the the actual part which is uh
12:44 - being displayed is the item.name right
12:46 - so each item is being output there one
12:48 - can do nice little filters as well um
12:51 - sort of like you know my filter or
12:53 - whatnot at that point in order to
12:55 - transform it
12:57 - um
12:59 - okay
13:00 - so and what you're seeing here is you're
13:01 - seeing um sorry this is a older older
13:04 - view syntax here
13:05 - well v show can do a v if vl sort of
13:09 - thing but the idea is you're
13:12 - only showing this particular span
13:15 - if
13:16 - that
13:18 - property uh in addit is not true right
13:21 - and the other one if it is true then
13:23 - you're gonna show an edit screen so
13:25 - that's this is in edit this is true
13:28 - and then now it's uh
13:30 - it's false
13:32 - cool so um you know that's the idea of
13:35 - it being unidirectional uh the idea is
13:37 - that the templates are just listening to
13:39 - some state and you're just changing the
13:40 - state you're not looking at all the
13:42 - things that are listening to it um so
13:44 - you can generate additional items that
13:46 - we're looking for in edit and whatever
13:48 - was modifying in edit didn't have to
13:50 - worry about that
13:52 - great so now we have here
13:54 - we're getting to the actual click
13:55 - handler
13:57 - and so that's what's actually showing is
13:58 - either the save or edit
14:00 - link that we're doing
14:01 - so um
14:03 - the idea is that it's uh okay so this is
14:06 - connecting into the
14:08 - uh click handler in javascript the at
14:11 - click
14:12 - you guys
14:13 - see that
14:14 - oh there we go
14:18 - cool awesome
14:21 - uh all coding should be done in the dark
14:23 - i guess is that
14:25 - just too buggy all right
14:27 - cool uh so and what it's doing here is
14:30 - the uh so it's preventing the default
14:32 - thing that you'd normally do with a link
14:33 - normally when there's a link it would
14:34 - try to navigate um but it's disabling it
14:37 - here um
14:39 - and the idea is calling this toggle
14:41 - handler and so
14:43 - in our view component
14:45 - we have a toggle method and what that's
14:47 - doing is it's just um well toggling the
14:50 - inedit state
14:51 - so that's exactly what's going on here
14:53 - whenever i click one of these
14:55 - it's toggling each one of them notice
14:56 - that each one of them has its own
14:57 - separate state
14:59 - um
15:00 - that's actually being what's being
15:01 - defined here in the data attribute these
15:03 - are the data for that component
15:06 - and it's just a single boolean which
15:08 - starts off false
15:09 - so view components all right so um view
15:12 - components are
15:14 - a nice view innovation
15:16 - uh
15:17 - where they do exactly you know every web
15:20 - developer knows those three things html
15:22 - css and javascript
15:24 - so why not like put it all together and
15:27 - make it
15:28 - uh something that's part of your view
15:31 - framework because they all affect it in
15:32 - different ways right
15:35 - so
15:36 - the idea in view is that you can combine
15:39 - all of them into a single dot view file
15:42 - uh that might get some folks who have
15:44 - been maybe used to having their css be
15:47 - all separate
15:49 - in a separate file
15:50 - feel a little nervous because you start
15:52 - learning about like you're repeating
15:53 - yourself right but actually what you're
15:55 - doing is repeating that component all
15:56 - over the place and it can maintain its
15:58 - own styles however it wants to um in the
16:01 - react community and now with uh some
16:04 - later angular things they've been
16:05 - adopting up components as well um some
16:08 - of the things that's happening with vue
16:10 - is they're
16:12 - hooking this up with the web component
16:14 - standard uh so that then when one can
16:16 - take a standard web component and bring
16:18 - it in as a view component and vice versa
16:21 - uh it's not quite that smooth yet um but
16:24 - it's headed there um
16:27 - so
16:28 - great
16:29 - so
16:30 - what you can also do with a view
16:31 - component is uh you'll be leveraging
16:33 - those preprocessors so um in the time
16:37 - between when react and angular were
16:39 - first made like this whole ecosystem of
16:42 - pre-processors has sprung up starting
16:44 - with say gulp right um we're getting
16:47 - well
16:47 - even older there were some other things
16:49 - but goals when it got easy
16:51 - and then webpack now there's like roll
16:54 - up and other sort of preprocessors the
16:56 - idea is you're not
16:58 - writing in the code which is executing
17:00 - in the browser anymore and so you can be
17:03 - a lot freer to
17:05 - have your code be structured the way
17:07 - that you want to think about it and
17:09 - that's why there's no such thing as like
17:11 - running a dot view file just straight
17:13 - loading the browser right it's just it's
17:14 - a source it's not actually the
17:16 - executable code
17:17 - so we do lose a little bit of that um
17:20 - but there's a nice set of like debuggers
17:22 - and tools for for stepping through
17:24 - things uh that it doesn't tend to be a
17:26 - problem
17:27 - um react and angular by the way these
17:29 - days do the same thing and all modern
17:31 - sort of web development runs through
17:33 - some sort of preprocessor uh that's how
17:35 - you have type script and whole new
17:36 - languages that are created or people are
17:38 - writing in es6 even though the browsers
17:40 - don't support it or some of the browsers
17:42 - don't support it
17:43 - so
17:44 - um cool so
17:47 - we were just looking a little bit at the
17:49 - html templates there's a whole lot of
17:50 - other directives that it has um the
17:52 - things that were there v show and and
17:54 - whatnot those are actually um what vue
17:58 - calls directives and that's very
18:00 - analogous to an angular directive the
18:02 - idea that's an extra little bit of
18:04 - control that you're attaching on to the
18:06 - different elements that you're doing you
18:07 - attach different things onto it
18:09 - in different ways
18:11 - and what you end up getting is you end
18:13 - up getting like super powered html you
18:16 - start with html and you add this extra
18:18 - little things on it and all of a sudden
18:20 - it does more
18:21 - right just like we're showing that
18:22 - example a little bit oh like you can add
18:26 - that at click.prevent and all of a
18:28 - sudden you're hooking into the the click
18:29 - handler you could add a little more code
18:31 - there as well if you really wanted to
18:33 - get a little more elaborate
18:36 - certainly as a best practice you
18:37 - shouldn't be writing all your javascript
18:39 - in your html all over again because then
18:42 - you're kind of breaking things all over
18:43 - again
18:44 - but it's very easy and very powerful to
18:47 - to do
18:48 - and to superpower your html using these
18:51 - view templates so um
18:54 - great
18:55 - i will mention that because vue has
18:57 - decoupled it if people want to
19:00 - they don't have to use view templates to
19:02 - use view
19:04 - so if you're already hooking up your
19:05 - whole application to be view and then
19:07 - you bring on your react
19:08 - developer who's just
19:10 - gung-ho about jsx and has to write jsx
19:14 - they can write jsx and it can run in vue
19:17 - they can write a render function and it
19:18 - can run in view
19:20 - you could write
19:21 - pug
19:22 - formerly you know jade and and run it
19:24 - and view um
19:26 - so the idea is that via the power of
19:28 - these preprocessors and the fact that
19:30 - it's hooked in pretty deeply with them
19:32 - um you know anything that has a
19:34 - preprocessor in webpack you can run in a
19:36 - view component
19:38 - that's on the html side on the css side
19:41 - the same thing happens so you can run
19:44 - your css
19:45 - and you just call it a style you know
19:47 - tag and you put your your css in there
19:49 - and you're good to go
19:51 - but um
19:52 - people have been getting a lot more
19:53 - mileage off of css pre-processors these
19:56 - days um you know especially if you're
19:58 - going to do like nested things you're
20:00 - going to do a transform or you want to
20:01 - find some sort of variables like that
20:04 - set uh like the main colors of your site
20:07 - or how you want to set up your padding
20:09 - and your spacing and your grid system
20:11 - and all that magic
20:13 - that map that happens because you're
20:14 - using a css preprocessor you can do that
20:16 - in view in fact you can use it a little
20:18 - bit here and a little bit there and you
20:20 - can use your css here and you can use a
20:21 - post css there and then oh you happen to
20:23 - hook into this library that's using less
20:25 - so you can hook into your less there
20:28 - mix and match because it's all hooked in
20:30 - to these preprocessors
20:33 - um
20:34 - one thing that
20:36 - vue does that is new on the css side is
20:39 - uh using component scoped
20:42 - styles
20:43 - and so the idea there
20:45 - is that in your single view file
20:48 - you can actu where you have your html
20:50 - and you have your css all in the same
20:52 - file if you add the scoped keyword onto
20:54 - your style
20:56 - view will make sure that that style only
20:58 - applies to the elements in that
20:59 - particular component so then you don't
21:01 - have to have really really really long
21:03 - names just to um like re-select the
21:06 - thing you're looking at again
21:09 - this is like like bem and whatnot like
21:12 - i'm a fan of those as far as like
21:14 - clarity but um imagine you didn't have
21:17 - component scoped css you just had your
21:19 - css file and then you had a whole web
21:21 - app over here in order for this style to
21:24 - refer to this element it has to have
21:26 - sort of a globally unique name and
21:28 - there's all sort of like you know rigor
21:30 - model has to happen in order to do that
21:32 - why not just put them together in the
21:33 - same file and you just say scoped and
21:36 - that style applies that that element and
21:38 - you're done
21:39 - so
21:40 - um
21:41 - it does some magic by adding on some
21:44 - extra like pseudo ids and things like
21:46 - that to make that happen um but it's uh
21:49 - it's pretty nice when it does work
21:50 - there as far as you can make use of it
21:53 - very easily and it mostly just kind of
21:54 - gets out of your way
21:56 - one thing just to if you are using a
21:58 - component scope styles uh that's a
22:00 - little bit of a gotcha is uh it can
22:03 - become a performance issue if you're
22:04 - attaching it to just the type of element
22:07 - like all your anchor tags or all your li
22:10 - elements or something you should attach
22:12 - it to
22:13 - classes and not to elements
22:16 - that
22:17 - it works better in the browser that way
22:19 - just due to the way that browsers run
22:20 - css
22:22 - lastly
22:24 - so the last bit is of course the
22:26 - javascript
22:27 - um
22:28 - because you're running it through a
22:29 - preprocessor anyways in order to combine
22:32 - your javascript html and your css you
22:34 - can basically do
22:35 - all the javascript things
22:37 - so you can run es7 you can run
22:39 - typescript
22:41 - one of the the big advances that's been
22:43 - happening in vue
22:45 - like in the latest versions is they've
22:47 - been adding
22:48 - typescript types so the idea is that
22:51 - native
22:52 - view
22:53 - components and view code
22:55 - will actually have type strip types so
22:58 - you get the auto completion and the
22:59 - validation and all the power of
23:01 - typescript as you're writing your view
23:03 - code
23:04 - and
23:05 - just like in the html and the css you
23:08 - can mix and match
23:10 - right you can write this one component
23:11 - and it can be in typescript and this
23:13 - other one can be an h6 the other one can
23:15 - mean is five i wouldn't recommend you do
23:17 - that but if you really want to you can
23:19 - do that
23:22 - all right uh other things here so um
23:26 - the batteries are all included so
23:30 - because vue
23:31 - sits in the same place uh that react did
23:35 - just at the view layer
23:37 - it's taken all the different battle
23:39 - scars that react learned and just
23:41 - basically copied them just
23:42 - wholeheartedly just copied it copied it
23:45 - so basically if you can do something in
23:46 - react you can do it in view
23:48 - uh
23:49 - and so uh one of the big things that
23:51 - came out of reactive of course was of
23:53 - course the the flux related libraries
23:55 - for maintaining state right uh imagine
23:58 - you have a whole tree of different
23:59 - elements that are going down and you're
24:01 - trying to have one
24:03 - element on like the you know right side
24:06 - of the page here um or left side of the
24:08 - page for you
24:10 - alter something that's going over here
24:13 - well you might have to mainta store it
24:15 - at the top and kind of like have both of
24:17 - them pass it all the way down through
24:18 - the dom hierarchy and that can get
24:20 - pretty clunky
24:22 - so um one of the things that a flux sort
24:24 - of thing can do is instead of trying to
24:27 - um pass everything properties you can
24:29 - have sort of a globally shared state um
24:32 - and the idea is a single way of
24:34 - transforming it a single source of truth
24:37 - a single place of reading from truth um
24:39 - as to what is going on in your app um
24:43 - and so
24:45 - there what happened in the react world
24:47 - was that after they came out with that
24:48 - flux then people were like well we like
24:51 - that but it has some rough edges so he
24:52 - redid it with redux and then other folks
24:55 - kind of started there's like
24:57 - dozens of them now as far as different
24:59 - like flux clones and different spins on
25:01 - it or whatnot
25:02 - um
25:04 - it's been nice that in vue there's
25:06 - basically one that everyone uses because
25:08 - it's the officially endorsed one vuex
25:12 - and so it's really powerful and that
25:13 - takes a lot of the same features that
25:15 - you've gotten out of redux
25:17 - you can for example name space your
25:18 - different states um you can um
25:22 - you know attach your different uh
25:25 - getters and setters and be able to make
25:28 - things like fully modular
25:29 - it also hooks into debugging tools
25:32 - so there's also official
25:34 - view x
25:35 - view
25:36 - dev tools and those will hook into
25:39 - the the view x data stores so you can
25:41 - see them you can see it how it's
25:42 - changing
25:43 - and i'll show you that to you in a
25:44 - little bit here
25:48 - so
25:49 - great that's your store
25:51 - and you have a view you have another
25:54 - important thing which is like what
25:55 - controls all of that what actually
25:57 - executes all that code and figure out
25:59 - what uh what components to load and all
26:01 - that sort of thing that's your router
26:02 - right so um
26:04 - the the router goes from the url or
26:07 - basically external state of the world
26:09 - and figures out like what what you
26:10 - should be doing at that point um and so
26:13 - there's an official loader
26:15 - router for for view and that's the view
26:17 - router great
26:19 - everyone just uses that it's really
26:20 - powerful it does all the things that you
26:22 - would get um you know
26:24 - out of the react world
26:26 - and just does it one way and you don't
26:28 - need to worry about it being reinvented
26:30 - every three months or something
26:33 - it's just the one way that they're doing
26:34 - it in view
26:37 - in addition
26:38 - uh there's a whole ecosystem of other
26:41 - packages
26:42 - so um
26:44 - i was mentioning a little bit ago that
26:46 - there's um the site awesome view
26:48 - um
26:50 - if i was going to do this
26:52 - basically um
26:55 - here
26:56 - yeah so
26:57 - you uh you want to do your data table
27:00 - like pick how you want to do your data
27:02 - tables you want to do your notifications
27:04 - you do how you want to do your
27:05 - notifications you want to do progress
27:07 - loaders great take your pick pick your
27:10 - poison um basically anytime somebody was
27:13 - doing something in react they tended to
27:15 - be like oh well let's just do this in
27:16 - view too and it's easy to do that
27:19 - because again they sit at the same layer
27:22 - and they're able to do it but what
27:23 - you're getting out of all of these is
27:25 - you're getting all the simplicity and
27:26 - the build things that that view does as
27:28 - well
27:30 - so
27:31 - yeah i mean you want to do your icon
27:33 - sets
27:35 - whatever you want to do
27:38 - your validation models your
27:41 - basically whatever the heck
27:43 - we're using some things for graphing for
27:45 - example we're using high charts it's a
27:47 - nice view high charts plugin
27:49 - that's great
27:50 - you want to do graphql great you do view
27:53 - graphql and there is there's it's all
27:55 - hooked up and loading
27:57 - you know all the things that people are
27:59 - doing
28:00 - in the react world um and and they just
28:02 - come right on over to to view so all
28:05 - right i think folks get the idea there
28:08 - uh it's like um
28:11 - so um
28:13 - let's see
28:15 - cool um
28:17 - editor support actually here i'm going
28:19 - to mention that too so um
28:21 - i actually use adam
28:24 - but um
28:25 - there
28:26 - but other people use others things
28:30 - so
28:31 - all the modern and well supported
28:34 - editors have uh have view support as
28:37 - well
28:37 - um
28:39 - even uh even old emacs users
28:43 - anyways um
28:46 - um
28:48 - all right
28:48 - so uh yeah the the idea is i mean the
28:52 - power of open source of course right um
28:54 - and so you get all the syntax
28:55 - highlighting um you'll get auto complete
28:58 - all the goodness you get out of an ide
29:01 - um nicely supported in view
29:03 - so um great
29:11 - uh huh
29:12 - all right
29:14 - so um some of my favorite pack
29:16 - my favorite packages before diving to
29:18 - code here um
29:19 - is uh
29:20 - nuts.js um and i've been uh it's one of
29:24 - the
29:24 - even though it was a little hairy when i
29:28 - started using it i
29:30 - jumped in early and been
29:32 - getting a lot of mileage out of next
29:34 - next is a view clone of a react
29:37 - framework called next
29:40 - because you know it was react so they
29:42 - stole it made it into view
29:43 - and what it does is um it handles all
29:47 - the the webpack stuff
29:49 - that uh for you which can otherwise get
29:51 - a little bit hairy
29:53 - when you're doing
29:55 - something that has to be compiled the
29:57 - way that vue does
29:59 - and so
30:00 - you get all these sensible defaults it
30:03 - just sort of works out of the box but
30:04 - you can also go and modify things if you
30:06 - really want your webpack build to work
30:08 - this way and you prefer this minifier
30:10 - and not that one and you really want
30:12 - tree shaking or whatever the heck you
30:15 - can do it that way
30:17 - you also get all those things that
30:18 - everybody's been loving in the
30:21 - react world like hot module reloading
30:23 - you you edit your code you hit save and
30:26 - then bam your your page is loaded and
30:28 - showing that as well
30:31 - you get server side rendering
30:33 - and universal apps so if you're writing
30:36 - a page that's actually performance
30:38 - sensitive um you can actually have your
30:42 - what's first served be the html
30:45 - and that's actually rendering the actual
30:47 - content
30:48 - to let the browser go and do its thing
30:50 - load images all that sort of thing um
30:52 - and then afterwards it can uh
30:54 - asynchronously load all the javascript
30:56 - so that any subsequent page transitions
30:58 - are just single page transitions so it
31:00 - doesn't have to go back to the server in
31:02 - order to just navigate to another page
31:04 - um
31:06 - some of the recent things they've been
31:07 - adding uh is a static site generator um
31:11 - i think everyone who has a blog or a you
31:14 - know instead of using wordpress which is
31:16 - hacked every other second you should
31:17 - write a static site
31:19 - and have it just serve html
31:22 - and javascript and css
31:24 - and and not be hackable in that sense
31:27 - anyways
31:28 - um
31:29 - and
31:31 - so the idea is you can write your your
31:32 - pages as a view app and then you just
31:34 - tell nuxt generate and it will output
31:37 - static files you just like send those up
31:39 - or hook it into a ci cd pipeline or
31:42 - whatever whatever you want to do and it
31:44 - will go ahead and and load that quickly
31:47 - i'll show you guys
31:48 - an example in a bit last thing about
31:50 - nuxt
31:52 - is
31:54 - the
31:55 - what it does as part of making it
31:57 - simpler
31:59 - is it handles a lot of the routing for
32:00 - you
32:02 - i really like this style where
32:05 - really there's like
32:07 - two maps that you're kind of doing as
32:08 - you're writing a web app like
32:11 - two like tree structures you're doing
32:13 - one of them is the url structure of your
32:15 - site hopefully you have a sensible url
32:17 - structure such that somebody could
32:19 - actually bookmark your pages you're not
32:20 - just single page apping at all so that
32:23 - like they're like deep in your your app
32:25 - and hit bookmark and then they go back
32:26 - to it and they just end up on the front
32:28 - page again right
32:30 - so
32:31 - if you have some sort of structure to
32:33 - urls you're also doing things to your
32:35 - your components and how you handle the
32:36 - routing and you know ideally these two
32:39 - sort of like go the same way well
32:42 - nux just makes that simpler the idea is
32:45 - you place
32:46 - a file in a folder and you have the
32:48 - folder called i don't know
32:51 - blogs blog posts right and you have your
32:53 - file within it might be underscore id
32:56 - dot view and the idea is that then that
32:58 - will generate a url that can be blog
33:01 - slash five slash ten slash whatever it
33:03 - is and it can be dynamically
33:05 - routed
33:06 - based on the url to that particular view
33:09 - page and just just all works
33:12 - um i'll show that to you in just one
33:14 - second as i
33:15 - um actually yeah let me do that now all
33:17 - right
33:18 - so
33:20 - let's start here this is a
33:22 - the way that nuxt works is um just like
33:25 - how
33:26 - some of the highly opinionated web
33:28 - frameworks are have been working is that
33:30 - certain directories have certain
33:32 - meanings and you just always use those
33:34 - directories for their meanings and
33:37 - thus if you're picking up one project
33:38 - and going another project it's pretty
33:40 - easy to tell that well your pages are in
33:41 - the pages folder and that's where the
33:43 - pages are rather than in source
33:46 - modules
33:48 - i don't know whatever something yeah
33:50 - um so uh yeah putting your source and
33:54 - dist because that's wonderful anyways um
33:57 - okay so here we have a um
34:00 - a view app you see the top here this is
34:03 - a template this is the html as you can
34:06 - tell this uh this is
34:09 - what is this this is the css no it's not
34:10 - the css um this is the javascript part
34:13 - and it's in a script tag that's really
34:15 - nice and then um no there's no there's
34:18 - no css part to this but if there was
34:20 - um
34:22 - you just put that in the style tag
34:24 - and and you're off and running um okay
34:26 - great so
34:28 - um
34:29 - the idea here is that um just by putting
34:32 - things in these different folders it's
34:35 - automatically setting up the euro url
34:37 - routes for that
34:38 - so let's do that
34:46 - so it is uh it's running webpack and
34:48 - like next is actually compiling it and
34:50 - running it and now running a little bit
34:52 - of a local server in order to host this
34:54 - page um
34:56 - but uh kind of handled that all for me
34:57 - and this is the the page loading in dev
35:00 - mode right now
35:01 - so
35:03 - great here's the page
35:05 - um and uh if uh let's see
35:09 - if we're looking at this
35:10 - what's actually happening
35:12 - is oh interesting okay we can't make
35:15 - that go away
35:17 - all right
35:18 - great so what's what's loading with all
35:19 - of this right um
35:22 - is uh here let me navigate to another
35:24 - page so i go to the
35:26 - about page and you notice that what
35:28 - happened was it didn't actually have to
35:30 - go back to the server to do a whole page
35:33 - refresh this is a single page transition
35:36 - so um
35:37 - it's a faster experience for your users
35:39 - it's all happening just within the
35:40 - browser
35:41 - um
35:43 - great um
35:45 - let's see some of the other things you
35:46 - can do here which i don't remember if
35:49 - the
35:51 - oh yeah great so
35:54 - here you can see the state and you can
35:56 - be
35:57 - incrementing it and all of that's
35:58 - hooking into the the view debugger here
36:01 - um
36:02 - we'll go into the code in just a little
36:04 - bit here but um you can see that that's
36:06 - uh it's going ahead and changing that
36:08 - and you get like time travel here so you
36:10 - can even go back and see um
36:13 - you know if you kind of undo some of
36:14 - these like what was going on and it kind
36:17 - of goes back it's a nice nice fun little
36:20 - dev tool
36:21 - for view
36:22 - um
36:24 - alrighty so let's get back into the the
36:26 - app app itself here
36:28 - so um
36:30 - you're just looking at it but let's
36:32 - maybe try that that handle handle
36:33 - increment part because it's kind of more
36:35 - interesting when you're doing something
36:36 - in the app right um
36:39 - that is calling this method here handle
36:41 - increment and what it's doing is it's
36:43 - editing the ux store and telling it to
36:46 - increment the counter
36:48 - and then the vux store
36:51 - and nux style is in well the store
36:53 - because where else should stores be but
36:55 - in the store folder
36:57 - and the store still stores all of your
36:59 - global state uh in this case it starts
37:01 - off the counter at one um
37:04 - and the idea is there's an increment
37:06 - counter there and that's basically the
37:08 - main thing there
37:09 - the other thing that this store is using
37:11 - is it's holding
37:13 - some other information here that's
37:14 - another part of the app we can get into
37:16 - that
37:18 - but
37:19 - yeah this is this is ux is all you kind
37:20 - of really need to do yeah
37:24 - that one
37:27 - okay this one all right awesome they
37:29 - have a nice picture i was just trying to
37:30 - get to the picture
37:31 - all right um
37:33 - so
37:33 - uh
37:34 - normally when you just have a simple
37:36 - sort of like app thing right you have
37:38 - your actions just mutate the state in
37:39 - one way uh and that changes the view
37:42 - um but you might want to get a little
37:44 - more complicated because your syncopage
37:46 - app doesn't just like take inputs from
37:48 - the user you might get it from the
37:49 - backend database you want to plug in a
37:51 - debugger that sort of thing the idea
37:53 - though is that there's just a single way
37:54 - that this is all flowing you know
37:56 - directional flow
37:57 - you don't go from your
37:59 - actions back directly to edit the
38:01 - components you rely on the actions to go
38:03 - all the way through to the state and the
38:04 - state to then change the components
38:06 - themselves that sort of thing uh jquery
38:09 - world you would have some little jquery
38:11 - method that goes and directly edits
38:13 - things
38:14 - don't do that um
38:16 - so uh you can then you can hook your dev
38:18 - tools as i mentioned like the the view
38:20 - debugger into all those mutations and
38:22 - see all the different changes that occur
38:24 - to your state uh you can also see your
38:26 - state at that point
38:27 - um yeah that's the the basic idea of ux
38:30 - it's the this is like the flux diagram
38:32 - as well right
38:35 - cool
38:36 - um
38:38 - alrighty so
38:40 - let's see other things about the uh
38:43 - oh yeah so here this is all you really
38:45 - need to do um so let's see your
38:48 - jsla.view
38:49 - so i'm just going to make a new page
38:50 - here
38:51 - great so call it a template
38:54 - and uh
38:55 - div
38:56 - and
38:57 - hello
38:58 - [Music]
38:59 - great
39:00 - and then i can go back to my app
39:04 - which was oh i just killed it sorry
39:07 - it's not happy with me
39:10 - uh what was i doing
39:12 - was that writing some code on something
39:13 - well let me read the error message
39:16 - jsla you
39:18 - oh that
39:20 - there okay
39:22 - now it's recompiling that and it's happy
39:25 - should be happy
39:27 - great let's go to that
39:29 - go to jsla
39:31 - and there great we have a webpage
39:33 - awesome that was really fast and all it
39:35 - says is hello
39:37 - but the idea is that
39:39 - in order to add something new to the
39:40 - route or what not it's just as easy to
39:42 - that as that
39:44 - you can then um generate other things
39:46 - like as i mentioned like blogs
39:49 - and call this say
39:53 - id dot
39:55 - view and the fact that there's an
39:56 - underscore there
39:59 - let's see
40:09 - okay um great means that
40:13 - okay
40:14 - no errors great so what i could do is go
40:16 - to
40:17 - blogs and something
40:20 - and all of a sudden great it's routing
40:22 - to that
40:23 - in the uh
40:25 - in the actual javascript part we would
40:26 - get past the the params here which is
40:29 - actually the
40:30 - the
40:31 - the id value um and be able to then
40:34 - maybe do a database uh you know request
40:36 - and whatnot and actually load the proper
40:38 - blog at that point
40:40 - um yeah
40:41 - or questions
40:42 - yes how is that signified it's just the
40:44 - fact that there's an underscore
40:47 - yep yep yep just because there's an
40:49 - underscore there
40:51 - yeah
40:53 - yeah but uh anyways uh yeah so if you're
40:56 - starting off on and writing view um it's
40:59 - uh
41:01 - they're still
41:02 - adding to it but one of the things
41:03 - that's actually been really great about
41:05 - vue is that um and this just comes some
41:08 - in part just from the way of thinking of
41:10 - its original you know creator is
41:12 - everything is really well documented
41:14 - um so if you have a question or
41:16 - something
41:18 - you can actually go to the view website
41:20 - and
41:21 - you know nine times out of ten your
41:22 - answer your questions is right there
41:24 - nicely documented with examples and and
41:26 - all that so um
41:29 - yeah uh that's been something just from
41:31 - the get go that makes it really easy to
41:33 - adopt view
41:36 - cool um
41:37 - let's see how we're doing on the time
41:40 - here oh i'm playing relief all right
41:42 - so um
41:44 - let's see that that was next um i
41:47 - mentioned beautify is um
41:52 - some of the things that we're using here
41:53 - it's a nice uh you know front-end
41:56 - framework
41:57 - again comes with sort of like batteries
41:59 - included for all sorts of components
42:02 - that you might want
42:04 - in order to put on your site and have it
42:06 - all be material design friendly
42:08 - since you're writing a bit of an
42:09 - enterprise app it makes it easy to kind
42:11 - of like just implement things and get it
42:12 - done
42:14 - beautify is one of the more popular
42:16 - material design frameworks on on view so
42:19 - uh if you were to do that way you could
42:20 - also write your bootstrap where you
42:22 - write your whatever you want to do um
42:24 - you know on top of you
42:27 - um
42:28 - yeah but i i've been using this one and
42:30 - and you know it works quite nicely um
42:32 - also like nuxt it's all post 1.0 so
42:35 - there at least a promising stability on
42:37 - that
42:40 - um
42:41 - okay great
42:42 - uh this one uh i made this and uh i'm
42:46 - actually kind of a fan of it um
42:48 - just as an aside
42:50 - i mentioned i do lots of other things
42:52 - besides web dev uh devops being one of
42:54 - them and um as much as i love linux um i
42:58 - don't necessarily love ssh into lots of
43:01 - servers and doing servery things all the
43:02 - time when i'm just trying to write my
43:03 - web app so uh serverless has been a
43:07 - great um
43:08 - trend that's been going on in the
43:10 - industry in the past two years or so
43:12 - where you just write your code and your
43:14 - code runs in the cloud and the cloud
43:16 - takes care of it and does all the things
43:17 - it needs to do to make that happen for
43:19 - example on a website if you have your
43:21 - website running via serverless and you
43:23 - all of a sudden have much higher spikes
43:24 - and load it just starts running more of
43:26 - your functions because your website's
43:28 - just the function
43:29 - to say how it should render the page
43:31 - and then it will scale down down to zero
43:33 - if you have no traffic and they're not
43:35 - charging you for that anyways so you
43:36 - have high availability you have a high
43:39 - scale ability
43:40 - um and you have
43:42 - much much more efficient cost than just
43:43 - like running a bunch of servers just
43:45 - sitting there idle all the time so one
43:47 - of the things that i did was kind of
43:48 - like hook it all together
43:51 - so i have a serverless running express
43:54 - inside of uh adabus lambda and express
43:57 - is running next and then next is running
44:00 - whatever the view stuff that we want to
44:01 - do at that point um
44:04 - and so i have a universal app i have
44:06 - something that like has a nice
44:08 - local dev experience because nux does
44:10 - that for you um you just saw that a
44:11 - little bit ago where like all of a
44:13 - sudden you get the hot reloading and you
44:15 - get um like dev tools hooking you into
44:17 - it and all that sort of stuff um
44:20 - and when i hit deploy it goes into the
44:22 - cloud and there's no like linux patching
44:25 - to do and that sort of thing it's just
44:26 - it's just running
44:28 - um
44:28 - so uh
44:30 - there were some tricky bits and
44:32 - i figured out some tricky bits and
44:34 - that's why i made the package
44:36 - uh i'll get that sorry guys can you read
44:39 - that yeah so on the left here this is
44:41 - the next folder structure with pages and
44:43 - and whatnot at that point um
44:46 - oh actually
44:54 - yeah
44:55 - i mean this is the the template uh this
44:57 - is a view cli template um where it gets
45:00 - substituted but what
45:06 - um
45:07 - but uh the idea is definitely because
45:10 - nuxt is a universal app some of it runs
45:12 - on the server uh and some of it runs on
45:14 - the client so you need to make sure
45:15 - you're running libraries that support
45:17 - that
45:19 - so for example you're going to make an
45:20 - http request you might not have a window
45:23 - object on node so how do you you know
45:26 - do all of that
45:27 - you might use a library like axios is
45:29 - the most most common one it's actually
45:31 - been bundled into the latest versions of
45:33 - next um actually
45:35 - it makes you make uh http calls to other
45:38 - like the backend or whatnot and do so
45:40 - easily um let me just
45:43 - actually
45:44 - oh yeah here i'm actually plugging into
45:46 - axios at this point
45:48 - and then having axios
45:50 - go ahead and make a get request to its
45:52 - back end
45:54 - and then it's returning that as data so
45:58 - um
45:59 - i didn't go over previously in a view
46:01 - component how you handle like an
46:03 - asynchronous request or handle like data
46:05 - that's not coming literally from the
46:06 - page at that moment um there's really
46:09 - there's another way we can do it where
46:11 - there's a
46:14 - bit of a state of the page that's
46:16 - happening here it's the message value
46:17 - here
46:18 - and
46:19 - next is looking for the async data and
46:22 - it's waiting for the async data to come
46:23 - back before it starts playing the page
46:25 - to you
46:26 - and it will then do is then populate the
46:29 - message with whatever came back from the
46:30 - back end and the message is then being
46:32 - showed in that component
46:36 - so
46:37 - because we're using axios this same code
46:40 - will sometimes execute in the back end
46:42 - and sometimes execute in the front end
46:45 - and
46:46 - the page doesn't care or know the
46:47 - difference
46:49 - there is a difference in the perfect
46:50 - pocket though as to why you would
46:54 - sometimes you need to store secrets like
46:56 - you know your database password or
46:58 - something right and you don't
46:59 - necessarily want to put that in the
47:00 - front end uh so you need a back end that
47:02 - just is just back end and and so um
47:06 - so that's what this is uh this is what's
47:08 - actually
47:09 - a um an express router that's actually
47:12 - just handling that particular route and
47:14 - outputting that that one picture output
47:16 - and it could have for example pulled
47:18 - that out of the database in order to
47:19 - return it or whatever you wanted to do
47:21 - using using node um
47:24 - it's getting a little bit far afield
47:26 - from our view world a little bit but
47:28 - something that um i'm using a variant of
47:31 - this like in production in our stuff and
47:33 - it's working well um
47:35 - there again were some gotchas so making
47:37 - the framework help to take workarounds
47:39 - in the gotchas
47:40 - cool
47:42 - um
47:43 - [Music]
47:45 - awesome
47:46 - so there's that
47:48 - um
47:49 - other things was you know when you can
47:51 - build it into a ci cd
47:53 - pipeline
47:54 - uh it you just have the next build
47:56 - itself in its pre-compiled form and then
47:58 - you tell serverless to go and deploy it
48:00 - into the cloud and then you know we can
48:02 - run tests in between and whatever you
48:04 - want to do
48:05 - and just have it all automated
48:08 - and because it's all handled in this
48:10 - case by amazon amazon you can hook in
48:12 - very easily to things like cloudfront so
48:15 - you get ddos protection
48:18 - or like you know edge sort of like
48:20 - caching and uh faster page loads um ssl
48:24 - you know uh resolution uh you can put
48:26 - their their web application firewall in
48:28 - front of it if you really want to get
48:30 - paranoid about blocking traffic from
48:32 - here or not there and and that sort of
48:33 - thing
48:34 - anyways you can write enterprise apps
48:36 - using this stuff it's cool all right
48:39 - uh
48:40 - last bit here
48:42 - cool
48:43 - so i mentioned uh there's a official
48:45 - view site with a style guide um awesome
48:49 - view is basically if you
48:51 - saw something interesting here it's
48:53 - probably linked to from awesomeview
48:54 - because
48:56 - that's the name
48:59 - and
49:00 - the some other things that it links to
49:02 - but i just want to mention is the end of
49:03 - this month uh viewconf us uh the first
49:05 - one in the us is uh is being held in new
49:08 - orleans um there's been some view
49:11 - conferences um in the past but they were
49:13 - held in like
49:15 - norwegian countries and other places i
49:18 - will mention actually that view is
49:19 - actually very international um
49:22 - because uh it started off with strong
49:24 - chinese connections because again avenue
49:26 - its uh creator is bilingual
49:29 - so he was able to speak and write in
49:31 - chinese um so that's why you would get
49:34 - you know alibaba and baidu sort of
49:36 - buying on but it's been picking up in um
49:38 - some like european countries quite a bit
49:40 - uh if you do a nice little like google
49:42 - trend search map you see it popping up
49:44 - all over the world
49:46 - unlike where the us were tends to be
49:48 - bigger on let's say react or something
49:50 - like that so
49:53 - cool
49:54 - and yes i am the organizer for the la
49:57 - view js meetup so um what i did when i
50:00 - was jumping into things is like well i
50:02 - want to talk to other view developers
50:04 - and i didn't know too many of them so i
50:05 - was looking for a meetup didn't find one
50:07 - so i made one uh and so i've been
50:09 - running that about a year now
50:11 - and we meet
50:13 - um alternately
50:14 - we meet every month and alternate
50:16 - between
50:17 - on the west side and in downtown l.a i
50:20 - have a co-organizer who runs a
50:23 - space out of la and she she'll help to
50:25 - organize that one
50:28 - and yeah you can find us on meetup.com
50:30 - so that's the last bits and that's me so
50:33 - thanks guys
50:35 - [Applause]
50:40 - i'm vj thanks for coming to the meetup
50:42 - today i'm the organizer for javascript
50:43 - la i wanted to just personally thank you
50:45 - for watching this video if you found it
50:47 - useful i'd love for you to subscribe to
50:49 - our channel we're slowly but surely
50:51 - making lots of little video content for
50:54 - you guys to enjoy and soak up especially
50:56 - if you want to get better at programming
50:58 - i'd love for you to be on our slack
50:59 - channel too over 800 users the link is
51:02 - right here js join
51:04 - jsjo.in if you forget it's really simple
51:07 - if you have questions for this meetup or
51:09 - you know questions you didn't get to ask
51:11 - or because you couldn't make it
51:13 - we'd love to have you just posted on our
51:15 - slack group so if you're a newbie don't
51:17 - worry it's a good place to go there's a
51:19 - lot of great engineers all connected
51:21 - around l.a and orange county so i hope
51:23 - to see you there