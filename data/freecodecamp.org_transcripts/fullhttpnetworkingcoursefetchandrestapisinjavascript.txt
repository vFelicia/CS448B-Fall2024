00:00 - Master the HTTP networking protocol in this hands-on course.
00:04 - HTTP is the backbone of the modern web.
00:08 - And this course is a deep dive into all the fundamentals you'll need to know to master web networking.
00:14 - Lane Wagner created this course.
00:16 - Lane is a senior backend engineer and is the creator of Boot.dev, where he has published many interactive courses.
00:25 - Hey, Free Code Campers.
00:26 - Welcome to my latest course on web networking.
00:28 - And specifically the HTTP protocol.
00:31 - In this course, we'll be doing over 80 coding exercises.
00:34 - And at the end, we're going to build a web crawler in JavaScript from scratch.
00:38 - I believe in learning by doing, so we'll really be doubling down on that here.
00:42 - There are actually two ways you can follow along with this course.
00:45 - The first option is to write code on your local machine while you follow along with this video.
00:49 - The second option is to head over to Boot.dev, where I published the interactive version of this course.
00:54 - In fact, I'll actually be teaching this video course by doing the interactive version of the course on camera and explaining each step in detail.
01:03 - There's also a link in the description below to all of the raw code samples in a GitHub repository.
01:08 - It's totally up to you how you want to take this course.
01:10 - I have provided the link to the interactive version below if that's how you want to do it.
01:15 - Just so you know, this course is part of a larger backend career path over on Boot.dev,
01:21 - which is designed to take students from zero to hireable as a backend developer.
01:26 - Just so you know, all of the code we're going to write in this course will be JavaScript.
01:30 - And while I'll be explaining every exercise, I will assume that you have a basic understanding of JavaScript and ES6 syntax.
01:38 - If you don't, that's okay. I'll provide some beginner level resources for JavaScript in the description below.
01:44 - I love getting feedback about all my courses.
01:46 - So if you do have feedback, one of the easiest ways to get in touch with me is on Twitter at wagslane.
01:50 - I'd love to know what you think.
01:52 - Also, if you find that you like the way that I'm explaining these coding concepts,
01:56 - feel free to subscribe to my YouTube channel.
01:58 - It's at Boot.dev.
02:00 - If you get stuck or have questions during the course, I'm going to recommend three different places.
02:05 - The first is the Free Code Camp Forum.
02:07 - The second is the Free Code Camp Discord.
02:09 - And the third is the Boot.dev Discord, where we have a channel dedicated to this course.
02:14 - Again, those links will be in the description below.
02:17 - Before we jump right into the first lesson, I want to take just a second to explain how you can get the most out of this course.
02:23 - I've designed this course to be hands-on and project-based.
02:26 - Tutorial hell is a term you might be familiar with,
02:29 - but it's basically the idea that it's easy to slip into a passive mode when you're consuming educational content.
02:36 - The way to get the maximum value out of this course will be to watch my explanation of the concepts and coding challenges,
02:42 - but then to write the code yourself on your own machine or on Boot.dev.
02:46 - If you're never pausing this video, you probably aren't learning very effectively.
02:50 - I'd encourage you to pause this video before every solution I give so that you have a chance to solve each challenge yourself.
02:57 - Once we finish all of the lessons and challenges, we're going to go build a web crawler in JavaScript from scratch.
03:05 - And we're doing that because it's really important to use what you learn so you don't forget it all.
03:10 - Do not binge watch this video from start to finish.
03:13 - This course is designed to take several days or weeks when done properly.
03:18 - It's really hard to learn a concept after just one explanation.
03:22 - So don't be afraid to rewind the video and re-watch the explanation of a concept that you might still be a little fuzzy on.
03:27 - My name is Layne Wagner.
03:29 - I'm the author of this course and I'll be your instructor every step of the way.
03:33 - Let's talk about HETE, Hyper Text Transfer Protocol.
03:40 - Before we jump into the nitty-gritty details of the protocol and how it works, it's important to understand why we should care.
03:47 - Let's talk about image sharing.
03:51 - So you've got your camera phone and you take a couple of pictures.
03:58 - Now, it's important to remember that 20 years ago, right, in the 90s and early 2000s,
04:04 - it wasn't easy to share digital photos with a friend or family member.
04:09 - It was easy to take photos.
04:11 - We've had digital cameras for a long time, right, but it wasn't easy to share them.
04:17 - These days, if you use an app like Instagram, right, you take your photos and then I on my phone
04:24 - can fairly seamlessly download your photos over the Internet onto my phone.
04:31 - And it's really important to understand that this is really the secret to Instagram success.
04:36 - They made photo sharing really, really easy and they did it just using the Internet.
04:43 - So you may be wondering what the heck does this have to do with HTTP?
04:45 - Well, HTTP is the protocol that was almost certainly used to download those images.
04:53 - HTTP is the most popular protocol for communicating online.
04:58 - You've probably noticed that every time you go to a website, you see that HTTP colon slash slash section of the URL, right?
05:07 - That's because every time you visit a website online, you're using the HTTP protocol to do it.
05:14 - So I've used this word protocol protocol a couple of times and you may be wondering what the heck is a protocol.
05:22 - Sounds like a really complex, really complex thing.
05:25 - It's actually not.
05:26 - Protocols are very simple.
05:28 - Let's jump right into what we mean when we say protocol.
05:33 - Let's imagine that I write a note to you just on a piece of paper that says raise.
05:40 - Raise your hand.
05:45 - I write this down on a piece of paper and I hand it to you.
05:50 - And when you get the piece of paper, you read it and you raise your hand.
05:55 - So the question is, upon reading the piece of paper, how did you know that I wanted you to raise your hand, right?
06:01 - You saw these you saw these symbols on the piece of paper and somehow you were able to understand the hand should be raised.
06:09 - Well, it's because we have a protocol for communicating over text, right?
06:14 - We've decided that these symbols that look like this are A-I-S-E that they form a word, right?
06:23 - And that word means to lift something up and hand.
06:27 - We've decided that these symbols H-A-N-D mean, you know, this thing at the end of my arm.
06:33 - And it's just a set of rules that me as the person communicating and you as the person I'm communicating to have agreed upon.
06:42 - And now that we've agreed upon that set of rules, we can communicate, right?
06:45 - Over this, in this case, the medium of a piece of paper.
06:49 - A protocol on the Internet works in the same way.
06:52 - We decide upon a set of rules, right?
06:56 - And then two computers can both follow those rules and communicate with each other.
07:01 - In the case of computers, instead of sending plain text, right?
07:05 - R-A-I-S-E, we would send kind of strings of ones and zeros.
07:10 - But the idea is the same.
07:11 - This is just information that's sent between two computers over a network and the protocol, right?
07:17 - Hypertext transfer protocol.
07:20 - The protocol is what tells the computers how to parse this information as something useful.
07:28 - Because we have this protocol, this way of parsing the ones and zeros as useful information,
07:37 - I am able to send you a photo over the Internet, right?
07:41 - Again, it's just a bunch of ones and zeros that represent something.
07:44 - But because you and I agree on this protocol or this language,
07:48 - I can send you the image of, for example, your niece's birthday party, right?
07:53 - And your phone is able to parse all that information and display an image.
07:58 - But that's what makes HTTP so powerful.
08:01 - All right, let's jump into the first coding lesson.
08:05 - I'm here on boot.dev. I'm in the Learn HTTP course.
08:07 - This is exercise number one.
08:10 - So it's important to understand that in this course, we'll be interacting with a live API.
08:15 - We'll be writing JavaScript code kind of on the front end
08:19 - that makes requests to the backend server via HTTP.
08:24 - And that server is a Fantasy Quest server.
08:28 - Fantasy Quest is a made-up game.
08:30 - So while this is a real API, we'll be interacting with a server for essentially a fake video game.
08:36 - Give us some context to all these assignments and coding challenges that we'll be completing.
08:42 - Okay, so the assignment says, I wrote the getItemData function for you.
08:46 - It retrieves items from Fantasy Quest servers via HTTP.
08:51 - Okay, so it looks like we have this getItemData function.
08:53 - Looks like it's grabbing some data from this URL.
08:57 - We don't really need to know how the internals work yet,
09:00 - but that's what the function does.
09:01 - And it says, I also wrote a logItems function for you, so logItems.
09:07 - Call it with the items variable.
09:09 - We're getting back from the getItemData call as a parameter.
09:13 - Okay, cool.
09:13 - So up here, where we were supposed to do our work,
09:16 - looks like we're getting the items from the server.
09:19 - And then here, we just need to log those items to the console.
09:23 - Let's go ahead and run that and see what happens.
09:27 - Cool, looks like we got some items.
09:29 - Those look like items to me.
09:32 - Go ahead and submit that.
09:34 - Awesome.
09:35 - So moving along.
09:37 - All right, HTTP requests and responses.
09:40 - So at the heart of HTTP is a simple request-response system.
09:44 - The requesting computer, also known as the client,
09:47 - here we have our client, asks another computer,
09:50 - in this case the server, for some information.
09:53 - So when we make an HTTP request, right,
09:55 - we, acting as the client, make a request to a server.
09:59 - The server processes that request
10:02 - and sends some information back to us in a response.
10:05 - That's the entire HTTP life cycle.
10:09 - It's all based on request-response.
10:11 - It's very synchronous in that way, right?
10:13 - I send a request, then I have to sit and wait
10:17 - till a response comes back, right?
10:20 - And then those words, client and server,
10:23 - it's important to just understand that when we say client,
10:26 - we just mean the computer sending the request.
10:28 - When we say server, we mean the computer
10:30 - that's responding to the request.
10:33 - And that's really all it means.
10:35 - There's not like a special type of computer.
10:37 - It's really just who's doing the sending
10:40 - and who's doing the receiving in any given communication.
10:44 - So we'll talk a little more about the specifics
10:47 - of requests and responses later.
10:49 - For now, it's important to think of it
10:51 - as a simple question-and-answer system.
10:52 - So we're asking questions to the server
10:54 - and we're getting answers, right?
10:56 - In the last assignment, we made a request
10:58 - to the FantasyQuest server for a list
11:01 - of all the items in the game,
11:03 - and we got back a list of items in the game, right?
11:06 - So which comes first, HTTP response or HTTP request?
11:09 - It's going to be the request.
11:11 - So we've talked about how HTTP is very widely used
11:15 - for internet communication.
11:17 - In fact, it powers websites, right?
11:19 - So if we scroll down to this diagram here,
11:22 - the client, which can be your computer,
11:24 - it can be your phone, makes a request to a server.
11:27 - Server responds with a website, right?
11:30 - So this is what happens every time you load your browser
11:32 - and you type in the name of a website, right?
11:34 - boot.dev, precodecamp.org, youtube.com, it doesn't matter.
11:39 - When you enter that URL into your browser,
11:42 - you're making an HTTP request to a server
11:45 - and that server is responding with the data
11:49 - that makes up their website, right?
11:51 - The images, the text, the HTML, the CSS,
11:54 - all of that comes back via an HTTP response.
11:59 - So the question is, website data is requested
12:01 - via which internet communication protocol?
12:04 - And that's going to be HTTP.
12:08 - So looking at this error, unexpected token,
12:12 - doc type is not valid JSON.
12:14 - So we're going to get to JSON later,
12:16 - but basically stands for JavaScript Object Notation
12:18 - and it's one of the most common ways
12:20 - to kind of get raw data from a URL, right?
12:23 - In this case, we're trying to get some item data
12:26 - from this URL, but we're getting back some HTML.
12:30 - That's a problem.
12:33 - According to the assignment, it says,
12:35 - that's because we are not getting a proper HTTP response.
12:37 - After all, we aren't making a request to a valid URL.
12:41 - Why not? Let's see.
12:42 - So get data here, takes the URL as inputs.
12:45 - Okay, up here, we're not,
12:47 - there's no URL getting passed into the get data function,
12:50 - right? It takes one parameter.
12:51 - We're not supplying a URL.
12:53 - So fix the code so that the get data function
12:55 - requests the item URL.
12:57 - Okay, so let's pass that in there.
12:59 - And try that.
13:03 - Awesome, that looks like item data to me.
13:07 - Okay, so we've made some HTTP requests
13:09 - to a couple of different URLs now,
13:11 - but it's really important to understand
13:13 - that URLs are not specific to HTTP.
13:17 - If they were, we wouldn't need to prefix
13:18 - so many URLs with that HTTP colon slash slash.
13:22 - The purpose of the prefix is to tell the,
13:25 - especially the computer that's making the request,
13:27 - which protocol to use, right?
13:29 - We want to use HTTP to make this request.
13:32 - So that's why we are prefixing the URL
13:35 - with that HTTP colon slash slash.
13:38 - Like I said, there's plenty of others,
13:39 - things like HTTPS, Mail2, PSQL.
13:43 - There's a lot of them, but the question here is,
13:45 - HTTP is the only protocol that uses URLs that is false.
13:49 - Let's talk about clients,
13:52 - clients and servers.
13:55 - I mean, the context of HTTP web applications, right?
13:59 - And as a general rule, it's important to understand
14:01 - that generally speaking,
14:03 - clients exist on the front end of an application
14:07 - and servers exist on the backend of an application.
14:13 - The front end of an application is what the user sees.
14:18 - So it's typically a mobile app or a website, right?
14:21 - It's the thing that the user is directly interacting with.
14:25 - The backend is essentially everything else.
14:27 - And in order to demonstrate that,
14:29 - let's take a look at the example of YouTube.
14:31 - So when you want to watch a YouTube video,
14:34 - you load up an app on your phone.
14:36 - It's probably written in Swift or Objective-C or React Native.
14:40 - But the point is it exists locally on your phone
14:43 - and it contains all of the code that is required
14:47 - to kind of render that visual YouTube interface.
14:52 - So that app and your phone, we can consider the front end.
14:57 - Again, because it's that visual interface
14:59 - that you're interacting with directly as the user.
15:02 - However, as you probably know,
15:04 - your phone does not locally store
15:07 - every YouTube video on the planet
15:09 - and it doesn't have every comment stored locally, right?
15:13 - So when you load a video,
15:15 - your phone actually needs to make an HTTP request
15:19 - to YouTube's backend.
15:22 - And again, remember just that by definition,
15:24 - the backend is basically everything that's not on the front end,
15:29 - which is just the stuff on your phone.
15:31 - Okay, so there is a computer on YouTube's backend, right?
15:36 - Probably in some data center somewhere
15:38 - that's going to serve or handle that HTTP request.
15:42 - So now that we have this kind of a computer making a request
15:47 - and a computer processing the request,
15:49 - we have the ability to say who the client is
15:52 - and who the server is.
15:54 - So in this case, your phone is the client
15:59 - because it's the one sending the HTTP request here, right?
16:05 - And the backend computer, the one in the data center,
16:08 - is acting as the server.
16:12 - Cool, now we're starting to see
16:14 - how the client makes requests to the server.
16:16 - What gets a little interesting is let's pretend that this server,
16:20 - all it has is video data locally.
16:25 - But the client actually asked for videos and comments.
16:29 - So what needs to happen now is there's probably some other server
16:35 - within, again, YouTube's backend.
16:40 - And that server has comments on it, right?
16:44 - It stores the comments locally on this server.
16:51 - So what can happen now is this first server
16:55 - that's trying to process this HTTP request, right?
16:58 - That asked for videos and comments.
17:02 - Well, it can sort the video, but it needs to grab some comments.
17:04 - So it's going to send its own HTTP request over to this other server.
17:09 - Say, hey, I need the comments for this video, right?
17:12 - Now, in this interaction, right,
17:14 - if we just look at this interaction over here on the right,
17:18 - in this case, this first computer is actually now acting as a client
17:24 - because it's sending an HTTP request.
17:27 - And this server over here is acting as a server, okay?
17:34 - So this is an important example of when a computer is acting
17:37 - as both a server and a client, and that's totally okay.
17:40 - Okay, so this computer over here grabs the comments that were asked for
17:43 - and it sends them back in an HTTP response.
17:49 - This first server, this server now has all the data it needs
17:52 - to respond to the client,
17:54 - and it can send a response back to the client.
18:00 - Hopefully, this has done a little bit to explain
18:03 - how clients and servers interact with each other
18:05 - and how really, at the end of the day,
18:07 - the word client and the word server only matter
18:10 - within the context of a single HTTP request.
18:13 - If a computer is sending an HTTP request,
18:16 - we consider it the client.
18:18 - If a computer is responding to an HTTP request,
18:21 - we consider it a server.
18:23 - And that's really all that client and server mean.
18:25 - So now we've got a quiz about clients and servers.
18:29 - It looks like the question is,
18:30 - does the example code run on a client or a server?
18:33 - And here's the example code written in JavaScript.
18:37 - And it looks like there's a URL here
18:42 - and a request is being made to that URL.
18:45 - So this has to be a client, right?
18:47 - Because a server doesn't need a URL to make a request to.
18:51 - Server serves the response.
18:52 - This is definitely a client.
18:53 - Okay, another client-server question.
18:55 - This one is, the computer responding to requests at the URL,
18:59 - https, api.boot.dev is a, well,
19:04 - if it's responding to requests, it must be a server.
19:06 - So we're finally ready to start talking about the Fetch API.
19:09 - We've already used it in a couple
19:11 - of the other coding challenges,
19:13 - but we haven't really explained what it is.
19:15 - In a nutshell, the Fetch API is a set of built-in functions
19:19 - and tools that we can use when we're writing JavaScript code
19:22 - in order to make HTTP requests.
19:25 - So an HTTP request has a lot going on with it.
19:28 - There's the URL that we have to send the request to.
19:30 - There's a body, there's some headers.
19:33 - And at the end of the day, it would be a big nightmare
19:35 - if every time we had to write an HTTP request,
19:37 - we needed to write all of that logic from scratch.
19:40 - So the browser, in this case, provides that functionality
19:43 - through a built-in function called Fetch.
19:47 - And that's what we'll be using to make our HTTP requests
19:49 - in this course.
19:50 - Okay, let's look at how we can actually use
19:52 - the Fetch API in code.
19:55 - It all starts with this Fetch function.
19:57 - Now, this is not a function that we've defined in our code.
20:00 - It's a function that's made available to us by the browser.
20:03 - It's a built-in function.
20:05 - The way it works is it takes two inputs.
20:07 - It takes a URL, which is the URL that we want to make a request to,
20:11 - and a settings object.
20:12 - We'll talk more about the different ways
20:14 - we can configure an HTTP request in just a minute.
20:18 - After that, we actually do have to use this await keyword
20:22 - in front of the function call, in front of the fetch call.
20:25 - And that's because when we make a fetch call,
20:27 - we're quite literally sending bits of data,
20:29 - sometimes halfway across the world.
20:31 - So we need our code to pause and wait for that response to come back.
20:36 - It's going to take a while.
20:38 - And the await keyword allows us to do that.
20:40 - We'll go way more in depth about asynchronous programming
20:44 - and kind of what's going on under the hood here.
20:47 - But for now, just know that when you make a fetch request,
20:50 - you do need to await it.
20:51 - What we get back from all of that is the response object.
20:54 - The response object has a bunch of stuff in it
20:57 - that, again, we're going to get to.
20:59 - But for now, we just want kind of the meat of the response.
21:02 - We want the data, right?
21:04 - So we know that this server, in this case,
21:06 - the fantasy quest server that we're working with,
21:09 - responds with JSON data,
21:11 - which stands for JavaScript Object Notation.
21:15 - It's basically data that looks like this,
21:17 - kind of these brackets and colons and property value, right?
21:22 - Key value pairs.
21:24 - It is a JavaScript object, but in text form.
21:28 - So this.json method allows us to take that response body,
21:33 - which again is just text that looks like a JavaScript object,
21:37 - and parse it into an actual JavaScript object in our code
21:41 - so that we can work with it.
21:42 - And again, that method call, that.json method call,
21:45 - that needs to be awaited as well
21:47 - because it's an asynchronous operation.
21:50 - Once we're done with all of that,
21:52 - we have some response data.
21:55 - And that is a JavaScript object.
21:56 - Again, it's just a JavaScript object with key value pairs, right?
22:00 - Things like, you know, armor, five, name, lane.
22:05 - It's just very simple,
22:07 - simply structured JSON data that comes back from the server.
22:11 - So let's get to the assignment,
22:13 - is to fix the bug in the code.
22:15 - The problem is that we aren't waiting for the response
22:18 - to physically come back across the internet connection
22:20 - before continuing with our code.
22:21 - Okay, let's take a look.
22:23 - So it looks like down here, there's a get settings function.
22:27 - Looks like this is setting up the settings
22:29 - for the fetch request.
22:30 - This is a URL that we're gonna be making the fetch request to.
22:34 - It looks like there's some other authentication stuff,
22:36 - some logging.
22:37 - But really, at the end of the day,
22:38 - what we're interested in is this part here.
22:41 - So we're looking for a bug that we need to fix.
22:45 - And again, according to the assignment,
22:47 - it's because we're not waiting
22:49 - for the response to physically come back.
22:51 - So what happens if I just run the code right now?
22:54 - Type error, response.json is not a function.
22:58 - Well, that makes sense to me
22:59 - because this response object here is going to be garbage
23:03 - if we're not waiting for the fetch request to complete.
23:08 - Right, so we're trying to call this.json method
23:11 - on essentially a garbage object.
23:14 - So let's go ahead and await that fetch request.
23:19 - And there we go, we get all of our item data
23:21 - as we would expect.
23:23 - So we've already talked a lot about clients and servers
23:25 - and how clients make requests to servers.
23:29 - Well, this question is,
23:31 - the front end of a website is A
23:35 - and the options are client and server.
23:36 - Well, the front end of a website
23:40 - can't really be a server.
23:41 - I mean, there are certain scenarios
23:43 - in which we could consider it a server,
23:45 - like very specific and rare scenarios.
23:48 - But generally speaking,
23:50 - the front end of a website is going to be a client
23:52 - because it's going to be making requests out to the backend.
23:56 - Okay, this question, a mobile phone is often used as an,
24:01 - and then the answers are HTTP server or HTTP client.
24:04 - Now, again, a phone could be a server.
24:08 - Like there are scenarios in which a phone could respond
24:12 - to an HTTP request, right?
24:14 - A phone is a computer.
24:15 - We could run some server software on it,
24:17 - but that would be very, very strange.
24:19 - Most of the time your phone,
24:21 - when you open it up and use an app on it,
24:23 - it's going to be making HTTP requests out
24:25 - to some backend server.
24:27 - So most often a mobile phone is an HTTP client.
24:33 - So let's talk just a little bit more about web servers.
24:36 - So most applications that you've probably written up
24:40 - until this point kind of start,
24:43 - do a bunch of stuff and then stop, right?
24:47 - Terminate when they're done doing what it is
24:48 - they're supposed to do.
24:50 - Servers are interesting in that they don't stop running,
24:53 - generally speaking, right?
24:54 - You turn on the server and then it just sits there
24:57 - on a computer listening for incoming HTTP requests.
25:02 - As they come in, it handles them, right?
25:04 - It sends responses, but it's just kind of always on.
25:08 - And again, this is important to understand
25:10 - because it's very likely that there's a lot of applications
25:13 - you've written up to this point that don't act that way, right?
25:15 - You run the code, the code exits.
25:18 - You run the code, the code exits, not with servers, right?
25:20 - With a server, you start up the server.
25:22 - And then in order to test your server code,
25:24 - you would actually need to send HTTP requests to it, right?
25:28 - Make sure that it behaves as you would expect
25:30 - given certain HTTP inputs.
25:33 - And then you'd actually need to probably manually
25:35 - stop your server from running
25:36 - because they're not designed to shut down automatically.
25:39 - So the question is,
25:41 - good web servers are listening for requests
25:44 - only when a client is active,
25:46 - only during business hours, or always?
25:48 - And the answer is always.
25:54 - Another question about servers here.
25:56 - So the question is, a server is the blank of an application
26:00 - and the options are backend and frontend.
26:03 - Well, a server isn't interacted with visually, right?
26:07 - So it can't be a frontend.
26:09 - So I'm gonna go with backend on this one.
26:11 - Okay, another question about servers.
26:13 - This time, it's actually a statement.
26:15 - It says, any computer can be a server,
26:18 - but the best servers are special made for serving data.
26:22 - Before I answer this question,
26:23 - I wanna just explain a little bit
26:25 - about kind of how the modern internet works.
26:28 - So generally speaking, new kind of web companies
26:32 - are spinning up their servers in data centers.
26:35 - Data centers owned by companies like Google Cloud Platform,
26:39 - Amazon Web Services, Azure.
26:41 - And the computers in those data centers
26:44 - are hyper optimized to be servers.
26:47 - They're optimized for server side workloads.
26:50 - That said, it's important to understand
26:52 - that realistically you can run server software
26:55 - on pretty much any computer, right?
26:58 - In fact, when we're developing our backend applications,
27:01 - even if we will eventually deploy them in a data center,
27:03 - we're generally developing them on our local machines.
27:07 - On just our work laptops.
27:11 - So the servers work perfectly fine on laptops,
27:13 - but it is important to understand
27:15 - that when the hardware is optimized for server workloads,
27:19 - you'll get more bang for your buck.
27:22 - So the answer here is going to be true.
27:26 - Any computer can be a server,
27:28 - but the best servers are made for serving data.
27:30 - Let's talk about web addresses.
27:32 - So I'm over here on my computer.
27:36 - And I want to communicate with, let's say,
27:40 - some server over here, right?
27:42 - Maybe I want to make a request to that server.
27:44 - Maybe I want to browse a website that's hosted there.
27:47 - Point is, I want to communicate with it.
27:49 - Trouble is, the internet is made up of much more
27:53 - than just my computer and the server, right?
27:55 - We have all these other devices
27:57 - that are connected to the internet.
27:58 - We have tons of other servers
28:00 - that are connected to the internet.
28:01 - So how can I tell the routing mechanisms of the internet
28:09 - that I want to communicate directly with that server?
28:15 - Well, that's where web addresses come in.
28:18 - And more specifically, what we call IP addresses
28:24 - or internet protocol addresses.
28:26 - So what does an IP address look like?
28:29 - Well, it looks something like this.
28:31 - 8.13.156.7, OK?
28:37 - There's four sections separated by periods.
28:42 - And each section can be between 0 and 255.
28:47 - Four numbers, each number is one byte of information.
28:52 - This 8.13.156.7, this is just an example, right?
28:57 - It is a valid IP address,
28:59 - but I don't know if there's anything connected
29:01 - to this IP address.
29:03 - So just keep that in mind.
29:04 - There's many, many possible valid IP addresses.
29:08 - The only rule is that each section
29:10 - has a number between 0 and 255.
29:12 - So whenever you order a package online,
29:15 - you have a unique address for your home.
29:18 - And that's how the e-commerce store, say Amazon,
29:22 - knows how to send the package directly to your door
29:25 - and doesn't get mixed up anywhere else, right?
29:28 - IP addresses work the same way.
29:30 - Every device connected to the internet
29:32 - has its own unique IP address.
29:36 - So in this example from before,
29:37 - where I'm trying to communicate with the server,
29:39 - all I need to know is its unique IP address.
29:43 - And if I know that, I can communicate with it.
29:46 - It is important to understand that this format here,
29:49 - these four numbers separated by periods,
29:51 - this is just one format of an IP address.
29:55 - And it's actually the more popular format.
29:57 - It's called IPv4.
29:59 - But there is a newer format that's being used
30:02 - called IPv6 or IP version 6.
30:06 - And it looks similar,
30:09 - but there's actually way more possible IPv6 addresses
30:14 - than IPv4 address.
30:15 - And in IPv6, each section is separated by a colon,
30:21 - colon rather than a period.
30:24 - We can tell them apart, right?
30:26 - And there's actually one, two, three, four, five,
30:29 - six, seven, eight sections in an IPv6 address.
30:35 - And each section actually has more information in it.
30:38 - So the point is there's way more IPv6 addresses,
30:43 - way more possible IPv6 addresses out there
30:46 - than IPv4 addresses.
30:48 - And that's really important
30:49 - because we're actually running out of IPv4 addresses.
30:53 - There's really not that many combinations of numbers here.
30:57 - And so we're running into a problem
30:59 - where so many people and so many devices are online,
31:02 - and we're running short on these IPv4 addresses.
31:06 - So IPv6 has kind of given us more options.
31:11 - The same principle applies, right?
31:13 - The addresses are unique and uniquely identify
31:16 - machines on the internet,
31:17 - but we just have more kind of available to us.
31:21 - So as you're looking at IP addresses,
31:25 - just know that you'll see them in both formats.
31:28 - So it seems like IP addresses are very useful, right?
31:32 - Just like how if I were to give you my physical address,
31:35 - you could send me a package from anywhere in the world.
31:37 - If I were to give you my IP address,
31:39 - you could contact me over the internet
31:42 - from anywhere in the world.
31:44 - But this is where things start to get problematic, right?
31:47 - If I want to contact Amazon's servers, right?
31:51 - Say I just want to navigate to amazon.com.
31:53 - I want their servers to give me a web page.
31:55 - It's not very helpful if I need to know their IP address, right?
32:01 - I don't have amazon.com's server's IP address memorized.
32:07 - No one does, right?
32:09 - So that's where DNS comes into play.
32:15 - DNS stands for Domain Name System.
32:18 - And one of its main purposes is to map human readable, right?
32:23 - Easily read names like amazon.com to IP addresses.
32:30 - Okay, so now when I want to go to amazon.com,
32:33 - I can type into my computer amazon.com,
32:37 - and the domain name system is responsible for looking up
32:41 - the IP address that's associated with amazon.com
32:46 - and giving it back to me so that I can make that request
32:49 - to the server that I'm looking to get to, right?
32:51 - So this whole system of essentially going out,
32:55 - using IP addresses to talk to computers, that is used.
32:58 - It's just the second step.
33:00 - The first step that our computers kind of do
33:04 - under the hood automatically for us
33:06 - is to resolve a domain name to an IP address.
33:11 - And this has the side benefit of,
33:13 - if amazon wants to change out their IP address,
33:17 - or maybe their IP address kind of just changes
33:19 - because their internet service provider swaps it out on them,
33:23 - they can update this mapping, right?
33:28 - They can update the IP address under the hood
33:30 - without needing to change their domain name.
33:33 - So all the users can still just navigate to amazon.com,
33:37 - but now they're actually going to maybe a different server
33:39 - or a different IP address under the hood.
33:42 - So just to recap, there's essentially two steps
33:45 - every time we want to send an HTTP request
33:48 - to the server on a given domain name.
33:52 - The first step is to resolve DNS.
33:59 - What that means is we're taking the domain name, right,
34:01 - say google.com, and resolving it into an IP address.
34:06 - So we're obtaining an IP address.
34:09 - Step number two is to use the obtained IP address
34:14 - to actually make that request across the internet.
34:18 - Okay, let's talk about how a domain name relates to a URL.
34:21 - So here we've got a full URL.
34:23 - This is actually a webpage on Wikipedia about miniature pigs.
34:27 - And the interesting part is that actually this en.wikipedia.org
34:32 - is the only part of the URL that makes up the domain name,
34:35 - or it is the domain name.
34:36 - The rest of the URL is important,
34:38 - but it's not related to the domain name,
34:40 - and it's not the part that we need
34:43 - in order to look up the IP address of the domain name.
34:46 - All we need is the domain name
34:48 - to look up the associated IP address.
34:51 - Cool.
34:52 - So in this assignment,
34:53 - we're going to be working with the Cloudflare API.
34:56 - So Cloudflare is a tech company.
34:57 - They have this public API, cloudflare-dns.com,
35:02 - that we can use to look up the IP address
35:05 - if we give it a domain.
35:06 - So here you can see we're passing in a domain as a variable,
35:10 - and we'll get to all of this syntax later.
35:13 - Just know that we're essentially calling the Cloudflare API,
35:16 - giving it a domain name,
35:18 - and we're expecting to get back a response
35:21 - with an IP address in it.
35:23 - So the assignment says on line nine,
35:25 - the function fetch IP address
35:28 - is simply logging the entire object
35:30 - we receive from Cloudflare to the console.
35:33 - Run the code to see the structure of the object.
35:34 - So let's go ahead and run that.
35:37 - Okay, so this is the object
35:39 - that's coming back from Cloudflare,
35:41 - again, as a JavaScript object.
35:44 - Our job is to dig into this object
35:48 - to get at the IP address,
35:51 - which just kind of looking through this,
35:53 - there's the IP address, right?
35:55 - It's those four numbers with the dots in between.
36:01 - And then it says,
36:02 - update the code to return just the IP address
36:05 - and remove the logging.
36:06 - Okay, so we don't need to log this,
36:09 - but we do need to return...
36:14 - See, it's going to be resp object.
36:16 - The key that we are interested in,
36:18 - looks like it's going to be...
36:21 - Tell you what, let's do this.
36:22 - Let's go over to...
36:24 - We've never used this site before.
36:27 - Super useful, it's called JSON lint.
36:30 - I'll blow it up just a little bit so you can see.
36:34 - It lints the JSON object,
36:36 - so we can kind of see
36:38 - the structure of the response a little better.
36:40 - Okay, so if this is our top level object, right, resp object,
36:43 - then we want the answer key.
36:45 - So we're going to do resp object dot answer.
36:49 - And then that is an array.
36:53 - So we want the first item in the array,
36:55 - which is going to be this whole object.
36:58 - It's going to be zero, index zero.
37:02 - And then we want that IP address.
37:03 - It's going to be the data key.
37:05 - So, dot data.
37:09 - And let's just run that and see what happens.
37:12 - Found IP address for domain, api.boot.dev.
37:16 - And that's the IP address.
37:18 - Okay, perfect, so it looks like it's working.
37:21 - I do want to just really quickly point out
37:24 - that this is a little dangerous.
37:26 - If we wanted to make our code a little more robust,
37:28 - we could do some checking here to make sure
37:30 - that these fields and the length of this array
37:35 - actually exist so we don't get some sort of runtime error.
37:40 - Cool, let's go ahead and submit this.
37:43 - Great, so to recap, a domain name is just one part of a URL.
37:48 - And it's specifically the part that we use
37:50 - to look up the IP address of a server.
37:53 - And then, of course, we can use that IP address
37:55 - to go contact that web server,
37:57 - maybe to see a web page
37:59 - that is being hosted by that server, for example.
38:02 - So, let's run through an example
38:04 - of how you might deploy your own website to the internet
38:08 - using IP addresses and domain names.
38:10 - So, step number zero, which actually isn't written down here,
38:14 - it's kind of assumed, is that you need a web server software
38:19 - and you need a website that you want to serve,
38:21 - which is basically a collection of HTML and CSS files.
38:24 - Assuming you have that, which, again,
38:26 - is kind of out of the scope of this course,
38:28 - so I'm going to just kind of wave my hands
38:30 - and say you should have that.
38:32 - Assuming you have that, then the next step
38:35 - is to take that software and deploy it on a machine.
38:40 - Typically, what you would do today
38:42 - is deploy it on some cloud platform, right?
38:45 - Something like a Netlify or a GCP or an Azure or an AWS.
38:50 - And when you do that, you will get an IP address
38:54 - of the machine that you deployed to.
38:56 - Again, these large kind of cloud providers
38:58 - would give you the IP address of the machine.
39:00 - It's just say, hey, here's the IP address
39:02 - where we just deployed your code, okay?
39:06 - Once you have that IP address,
39:07 - then you would need to go buy a domain name.
39:10 - Again, you go find a provider of domain names.
39:13 - They're called registrars,
39:16 - something like Amazon, Google, Namecheap.
39:20 - You go buy your domain name,
39:21 - and then, again, using their software,
39:24 - you tell them what your IP address is.
39:27 - So, you know, say you buy xyz.com.
39:30 - You go and you say, hey, I just bought xyz.com.
39:33 - Here's the IP address I want it to point to,
39:37 - and then they go and update the domain name system for you.
39:41 - That's just kind of a high-level overview
39:43 - of how you would go about actually deploying a website
39:45 - to the internet.
39:46 - With all that in mind,
39:48 - the question for this quiz is,
39:50 - which is a human-readable label
39:51 - that converts to an IP address?
39:54 - That would be a domain name.
39:56 - Question here is, why don't we require users
39:58 - to type in IP addresses directly to browse the web?
40:02 - I'll pause for a second if you want to take a look.
40:06 - The tongue-in-cheek thing here is,
40:08 - I absolutely hate when websites auto-play
40:13 - any sort of audio, music, videos, whatever it is.
40:16 - Drives me crazy.
40:17 - I think it's a terrible user experience.
40:20 - So I think the same thing applies to requiring users
40:24 - to type in the IP addresses of websites.
40:27 - It would just be a terrible user experience.
40:29 - It's much easier to remember domain names
40:30 - like boot.dev and amazon.com.
40:32 - So using IP addresses directly while possible,
40:36 - just awful, awful user experience.
40:40 - Okay, so we got another assignment here.
40:42 - Looks like what we'll be doing
40:44 - is parsing a URL string into a URL object.
40:49 - So JavaScript has this built-in API, the URL API,
40:55 - that's really useful for parsing a URL string,
40:58 - like this https://example.com slash example path,
41:03 - and breaking it down into a JavaScript object,
41:07 - which will then essentially have all the parsed sections,
41:09 - so we'll be able to extract things like the domain
41:12 - or the host name or the scheme or whatever.
41:15 - It handles all that parsing logic for us.
41:18 - The assignment is completely get domain name
41:22 - from URL functions, that's this one up here.
41:25 - Given a full URL string,
41:28 - it should return the domain or host name.
41:31 - Okay, so let's take a look at a couple things.
41:34 - So let's just log.
41:36 - Let's just start by logging out
41:38 - the URL that's being given to get domain name from URL,
41:41 - just to take a look at what it looks like.
41:44 - Okay, so that's the URL coming in.
41:47 - And then because we didn't return anything,
41:49 - the test suite is saying the domain name
41:51 - for the URL is undefined, right,
41:53 - because we didn't return anything.
41:55 - So let's use this syntax.
41:59 - And I'm just going to pull up the docs as well.
42:03 - This is the MDN docs for the built-in JavaScript URL API.
42:09 - Looks like we can use this syntax, new URL,
42:12 - and then pass in the URL, so let's go ahead and do that.
42:14 - Do const, const URL object equals new URL.
42:22 - Give it the URL string.
42:24 - Now we should have a URL object here.
42:28 - Now that object should have,
42:31 - let's take a look at the docs again,
42:34 - some properties on it. Yeah, okay.
42:36 - So we've got the hash, the host, the host name, a link, password.
42:40 - So these are all kind of different sections of the URL.
42:43 - We care about the host name.
42:45 - That's what our sort of our assignment said it wants.
42:48 - So we will just need to return URL object dot host name.
42:55 - And looking at this URL that's being passed in,
42:58 - I would expect the host name just to be boot dot dev.
43:02 - That's just the domain name part.
43:04 - Let's run that.
43:06 - And we get the domain name for HTTPS boot dot dev learn learn Python is boot dot dev.
43:13 - That looks right to me. I'm going to go ahead and submit that.
43:16 - We've talked a little bit about DNS.
43:18 - Let's go into just a bit more detail.
43:20 - So DNS or the domain name system is essentially a giant phone book for the internet.
43:26 - Back in the day, if you used a phone book,
43:28 - you could look up your friends by their name and find their phone number.
43:32 - With DNS, we can look up a website by its domain name and find its IP address.
43:37 - Very, very similar system.
43:40 - Question is, how does DNS work under the hood?
43:43 - Well, there's this organization called ICANN, I-C-A-N-N.
43:48 - And it stands for the Internet Corporation for Assigned Names and Numbers,
43:53 - which, as you can probably tell, is a very poignant, very accurate name.
43:59 - ICANN manages the domain name system for the entire internet.
44:04 - And whenever your computer has a domain name that it wants to find the IP address of,
44:10 - it contacts one of ICANN's root name servers.
44:15 - And then from there, it's able to resolve the IP address.
44:19 - And if you're wondering how it knows where to find the root name servers,
44:22 - that's typically built into your computer's networking configuration.
44:27 - So once your computer contacts ICANN,
44:30 - ICANN is able to look up that IP address from their distributed DNS system.
44:35 - It's a very large, large system, right?
44:37 - If you think of DNS as just a phone book,
44:39 - ICANN is basically the publisher of the phone book.
44:42 - They control what goes into the phone book.
44:45 - And in case you're concerned about the inherent power here,
44:49 - it is a not-for-profit organization.
44:51 - So it's not your typical tech company.
44:54 - Okay, the question for this quiz is, DNS is a or an,
44:59 - and the options are IP address, programming language,
45:04 - system that converts domain names to IP addresses, or domain name.
45:08 - I'm going to go with the system that converts domain names to IP addresses.
45:13 - The next question is, what does ICANN do?
45:16 - The options are keep the DNS system up and running or control what you say online.
45:20 - They keep the DNS system up and running.
45:23 - Let's talk about subdomains.
45:25 - So if we look at this kind of root domain here, you'll see there's two parts.
45:30 - There's.dev, which is the TLD or top-level domain.
45:34 - So it could be.dev like we have.
45:36 - It could also be.com,.org,.net, right?
45:39 - There's quite a few different options.
45:41 - And then boot is the domain name.
45:44 - A subdomain actually prefixes a domain name.
45:48 - So for example, our API is hosted separately.
45:52 - So boot.dev hosts our website, what we are on right now, the learning platform.
45:58 - But api.boot.dev actually hosts our API,
46:01 - which is what the website kind of uses to go fetch data,
46:05 - update user records and passwords, all that kind of stuff.
46:09 - The api.boot.dev is essentially our backend.
46:13 - We also have a blog.boot.dev,
46:16 - which is just a separate website that hosts our blog.
46:18 - So subdomains can be used to basically break up the resources hosted on a domain name
46:27 - without having to actually go buy new domain names.
46:30 - We paid for boot.dev, and now we own all of the subdomains
46:36 - that can be prefixed under boot.dev.
46:40 - So let's take a look at the assignment.
46:42 - It says, I've updated the get item data function.
46:46 - That's this function here from before.
46:48 - Now it accepts just a domain as input.
46:52 - It's more convenient this way because it means if the API we're using ever changes its domain,
46:57 - we only need to update one variable.
46:59 - OK, so let's see what the heck we're talking about here.
47:03 - So we've got this get item data function, and it's making a request out to this URL.
47:08 - And it looks like what's happened is we've made the domain portion of the URL a variable,
47:13 - so it can actually be swapped out fairly easily.
47:16 - And that get item data function takes the domain as an input.
47:22 - OK, so the problem is there's a bug.
47:25 - The API is not hosted on boot.dev.
47:27 - It's hosted on the API subdomain. Fix the bug.
47:30 - OK, so when we run the code as it is, we get unexpected token.
47:35 - Doctype is not valid JSON.
47:37 - This looks to me like what's happening is HTTPS colon slash slash boot.dev is hosting a website,
47:46 - right, which starts with this HTML tag here.
47:50 - It's not valid JSON.
47:52 - And what we're looking for here is a JSON object or JavaScript object to come back from the API.
48:00 - So we need to actually hit the API instead.
48:04 - And when we run that, it looks like we're we're properly getting back our item data.
48:11 - So we've already talked about URLs, but we haven't really talked about URIs.
48:16 - You might hear or see URIs.
48:19 - And frankly, sometimes it can be confusing because URI sometimes looks like URL with a lowercase L,
48:24 - but it's actually an I.
48:25 - Anyways, let's let's get into it.
48:27 - So URI stands for Uniform Resource Identifier, and it's essentially a superset of URLs.
48:35 - So if we come down and look at this this Venn diagram, you've got URIs like all possible URIs.
48:42 - And within URIs, a subcategory is URLs.
48:47 - OK, so URL is just type of a URI.
48:50 - Another common type of URI is a URN.
48:54 - And URNs and URIs, they can refer to other things that aren't necessarily accessible via the Internet,
49:01 - things like ISBN numbers of books.
49:04 - So generally speaking, when we're working with the Internet, we're working with URLs.
49:09 - But it's just good to be aware of URIs.
49:12 - You will see them around.
49:14 - And sometimes, for example, you'll be asked to provide a URI.
49:19 - And really, you're just providing a URL again because a URL is a valid URI.
49:24 - OK, enough about that.
49:25 - So the question, all URLs are URIs.
49:28 - That is true.
49:30 - Next question is, all URIs are URLs.
49:34 - That is not true, right?
49:36 - If we scroll back down, take a look at this.
49:38 - All URLs are, in fact, URIs.
49:40 - Not all URIs are URIs.
49:44 - So if you use exercises back, we wrote some code that extracted the host name from a URL string.
49:49 - And now we're going to look at kind of all the different sections of a URL.
49:54 - So take a look at this giant URL here.
49:58 - The reason this URL is so large is I've gone ahead and added every possible section.
50:04 - This is like kind of the most sections a URL can have because every section is present.
50:09 - Typically, sections are optional, so you won't always see kind of all of this information.
50:15 - Let's go over each section and talk about what it means.
50:18 - So the first section is the protocol.
50:20 - It's right here, right?
50:21 - HTTP colon, in this case.
50:23 - Could be a different protocol.
50:24 - We might use something like Postgres for a database connection.
50:28 - But because this URL is accessible via an HTTP call, it's prefixed with the HTTP protocol.
50:37 - Cool.
50:38 - Next up, we got the username and the password.
50:40 - So test user, and then a colon, and then test pass.
50:44 - So the colon is the separator.
50:46 - These are the two different sections for username and password.
50:49 - Again, these are optional.
50:51 - You won't always see usernames and passwords in URLs.
50:55 - I find that I use them a lot, again, to kind of access resources in code.
51:01 - So to do things like, you know, get access to a database or a piece of infrastructure,
51:07 - you'll very rarely see usernames and passwords in a URL when you're just browsing the internet.
51:15 - We typically use usernames and passwords on a website, kind of in the site, via form submission,
51:23 - not in the URL itself.
51:25 - That would be kind of strange user experience to type it in up there at the top.
51:30 - So that's what those are.
51:32 - Next, we have the hostname.
51:33 - We've already talked about that.
51:35 - This at symbol, you only need the at symbol if you've included a username and password.
51:39 - So it's kind of an optional delimiter there that separates the username and password from the hostname.
51:46 - The port.
51:47 - This is the port that we'll be using to access the information on the server.
51:52 - Now, a port is not necessarily optional in the sense that we're always using a port to make an HTTP request.
52:01 - However, there are defaults.
52:03 - So for the HTTP protocol, 80, just 80, not 8080 like we have here, would be the default.
52:11 - So if you don't specify a port, the request will by default use port 80.
52:16 - And then HTTPS, which is what you use for a secure HTTP call, defaults to port 443.
52:23 - Again, when you're browsing the internet in your browser, you don't normally have the port
52:27 - because pretty much every website online uses the default ports.
52:31 - But if you need to specify a port, this is where you would do it.
52:34 - And it's a prefix there with a colon.
52:38 - Next comes the path.
52:40 - It comes after a slash.
52:42 - Very often in websites, the path is used to kind of, you know, show different web pages.
52:48 - So depending on the path in the URL, you'll navigate to a different page.
52:54 - And then pages can kind of be nested, right?
52:56 - So you can have multiple slashes in there with multiple, you know, sections of the path.
53:02 - In this case, we just have the one section of the path.
53:06 - Next is the search, which I don't love that name here.
53:12 - You'll also hear it called the kind of the query parameters.
53:17 - But basically, it starts with a question mark.
53:20 - And then it's a set of key value pairs.
53:23 - So here we have the key is test search and the value is test value.
53:28 - And then we could have kind of more parameters after the question mark.
53:36 - We'll get to that later in the course.
53:38 - Just know that this section of the URL is called the search or the query parameters.
53:44 - And again, we'll talk about the details later.
53:47 - And then the last section is called the hash or the fragment.
53:51 - And very often in websites, the fragment is used to kind of link to a specific section on a page.
53:58 - But again, it could be used for other things outside of the context of websites.
54:04 - OK, so that was a lot of information.
54:06 - You don't need to memorize that.
54:09 - I just wanted to give you a high level overview.
54:11 - We will be talking about each section kind of in more detail as necessary throughout the rest of the course.
54:17 - So let's get to the assignment.
54:19 - We'll be using the URL API again.
54:21 - So if you remember over here on the MDN docs, we're going to be using this kind of built in function in JavaScript to split apart a URL.
54:29 - And we're tasked with splitting and printing all the different sections.
54:36 - So, again, using this example URL, we actually want to be printing this kind of breakdown.
54:43 - Let's go ahead and start.
54:45 - It looks like the print URL parts function was already partially written for us.
54:50 - A URL string is coming in as a parameter and we're kind of breaking that down into a URL object.
54:56 - Now, our task is to actually print out these messages.
55:01 - So it looks like these are what the properties on the URL objects are.
55:06 - So let's go ahead and print do console dot log URL object dot protocol and see what happens.
55:15 - OK, so that gives us HTTP.
55:17 - I'm guessing dot username will give me username dragon slayer.
55:21 - Yeah, great.
55:22 - So we should be able to use this URL object to print everything we need to.
55:27 - I'm going to go ahead and use some string literals to do this.
55:30 - So on the first line, it looks like we want to be printing protocol and then we want this to be dynamic.
55:37 - So we're going to use a JavaScript template literal to interpolate URL object dot protocol in there.
55:47 - So I'll just run that.
55:49 - And we should get this first line, protocol colon and then the protocol itself, which is HTTP colon.
55:56 - Well, now we can just do this for the rest of the sections.
56:01 - Eight, nine, eight.
56:05 - OK, cool.
56:08 - Username, password, post name, court, path name, search.
56:29 - And run that and see if it looks reasonable.
56:33 - So the URL that in actuality we're splitting up is this one right here.
56:41 - And it's looking pretty good.
56:45 - I think we've got all the sections there.
56:47 - I'm going to go ahead and submit that.
56:49 - Let's go into just a little bit more detail about these eight sections or eight parts of a URL.
56:55 - I'm going to scroll down so you can see this image just a little bit better.
56:59 - Starting with the protocol, the protocol is required.
57:02 - You cannot not have a protocol.
57:04 - The computer needs to know how to take your message and transmit it in code.
57:12 - At the very beginning of this course, we talked about how HTTP is kind of like a language that computers use to speak to one another over a network.
57:20 - And so when we go out to fetch a resource using a URL, we need to know what language, what protocol to use to do that.
57:31 - So not optional.
57:33 - Usenames and passwords are absolutely optional, right?
57:36 - If a resource doesn't need a username and password, it's considered public and doesn't require credentials to get access to.
57:47 - A domain is required, which makes sense, right?
57:52 - There's no way for us to reach out to another server and get information unless we can use that domain name, resolve it into an IP address, and then make a request across a network.
58:02 - So definitely need a domain.
58:05 - The default port for protocol is used if we didn't provide one.
58:08 - So again, HTTP, its default port is 80.
58:13 - HTTPS, its default port is 443.
58:15 - Every protocol has default ports.
58:18 - And so you'll only need to specify a port if for some reason you're deviating from the defaults.
58:23 - This is used a lot in kind of local web development.
58:26 - When you're building websites on your own machine and you want to kind of access the test version of the site in the browser, you might just use different ports so that you can access many different test sites on your own machine, right?
58:41 - Without having to get domain names for every single one of them.
58:45 - So access to the path is optional in that you don't need to put it, but one is always there.
58:52 - The default is just the root kind of slash.
58:55 - A query is absolutely optional and a fragment is completely optional.
59:00 - And then again, I just want to stress you don't need to memorize every section of a URL.
59:05 - This is one of those things where it's useful to be familiar with all of the concepts from a high level and you'll get more familiar with them over time as you have more and more experience as developer.
59:15 - But it's also something that's fairly easily Googleable, right?
59:19 - When you have questions about a specific URL, maybe you're a bit confused.
59:23 - It's something that's fairly easy to look up.
59:27 - So the question is the eight pieces of a URL are always present and that is false.
59:33 - There are some that are optional.
59:35 - The next question is HTTP colon slash slash fantasy quest dot app is a valid URL.
59:43 - That looks valid to me because we have the protocol.
59:46 - We have the domain.
59:47 - Those are the only two sections that are completely required.
59:52 - So I'm going to say true.
59:54 - Next HTTP colon slash slash username colon password is a valid URL.
60:03 - Problem here is that we are missing a domain.
60:06 - All right. We've got a username and password with no domain.
60:08 - So that's invalid.
60:11 - I want to point out just a couple more interesting things about the protocol section of a URL or a URI.
60:18 - So first, as we've already talked about, HTTP is not the only scheme.
60:21 - So HTTP, FTP, mail to HTTPS.
60:25 - These are all valid schemes or protocols that can be used.
60:30 - And not all the schemes are kind of postfixed or end in that slash slash.
60:36 - So HTTP colon slash slash.
60:38 - The slash slash section is there because HTTP as a protocol has an authority component.
60:43 - It has that username colon password section of the URI.
60:48 - Mail to, for example, does not. And so that's why the protocol, which is mail to colon, does not end in a slash slash.
60:55 - With that in mind, let's move on to the assignment.
60:58 - So we're back to working on fantasy quest in the fantasy quest game menu.
61:02 - We show users the email addresses of their friends.
61:06 - We want the email addresses to be clickable hyperlinks.
61:09 - So I don't know if you've ever come into this or come across this online,
61:12 - but you may see email addresses in your browser that you're able to click and it will automatically open your email client.
61:18 - And that's because your computer understands the mail to URI
61:23 - and knows that that means to open an email client with a draft email ready to go,
61:29 - kind of to send to the email address address in that URI.
61:33 - So we've been tasked with completing the get mail to link for email function.
61:39 - It should return a mail to hyperlink for the given email.
61:42 - OK, so this seems like it should be pretty straightforward.
61:44 - We're going to want to return and I'm going to use a JavaScript template literal and do mail to colon.
61:52 - That's the protocol. Right.
61:55 - And then that just is followed by the email address.
61:57 - So mail to colon and the email itself.
62:04 - Go ahead and run that, see what it looks like. The mail to link for Slayer at F quest dot app is mail to colon Slayer at F quest dot app.
62:12 - That looks pretty good. I'm going to go ahead and submit that.
62:16 - Let's talk about ports.
62:18 - So let's say I have my web server over here, my server.
62:25 - And let's say I'm hosting a website.
62:29 - So I've got some piece of software that's hosting my website.
62:33 - Brought here like this.
62:36 - And I've got some customers that want to access my website.
62:41 - They'll be over here and they're sending HTTP requests.
62:47 - To my server so they can get access to my website.
62:51 - And that works just fine.
62:53 - The trouble is, what if I want to host multiple pieces of software on the same physical machine?
63:03 - Right. So let's say, for example, that in addition to my website, I also want to host a database.
63:11 - Maybe for my own purposes. Right.
63:13 - And it's not even public. Maybe it's just something that I use personally.
63:16 - But I want to be able to access it, say, from my home computer.
63:20 - This is me. I want to be able to get access to the database.
63:23 - The trouble is, now, how can my machine, my computer, know when a request comes in to my IP address?
63:32 - Right. To my computer.
63:34 - Whether the incoming request should be handled by my web server or by my database.
63:39 - That's where ports come in.
63:41 - Okay. So ports are virtual little hubs managed by the operating system.
63:48 - That allow us to segment incoming requests and incoming data streams.
63:53 - So now, if I have one host for my database.
63:58 - Sorry, one port for my database.
64:00 - And one port for my web server.
64:02 - And I can direct all my web traffic at that port for my web server.
64:07 - Let's just say that's port 80.
64:09 - And I can access my database on port, say, five, four, two.
64:16 - Those are pretty common ports for those use cases.
64:20 - So with ports, I can now actually run many different instances of different kinds of software.
64:28 - And network with them all at the same time.
64:31 - When I'm developing on my own machine, maybe I'm building a few different websites.
64:34 - I can actually run all of those websites connected to different ports at the same time.
64:40 - You can't bind two pieces of software to the same port.
64:45 - Again, for the reason we talked about at the beginning, right?
64:48 - The operating system wouldn't know which piece of software should handle which incoming network request.
64:54 - But we can run many pieces of software all bound to different ports.
64:58 - And your operating system actually allows for over 65,000 different ports at the same time.
65:06 - So there's not too much of a risk of running out of ports.
65:11 - So there are a ton of different ports that we can use when we are networking.
65:15 - And when we are navigating the web, we can optionally kind of type in the port, the URL, or we cannot.
65:23 - And if we don't, a default port will be used.
65:27 - So the question is, if a port is not present in a URL, the default is used based on the blank.
65:33 - The answers are domain, username, protocol, or domain name service.
65:37 - And the answer here is protocol.
65:40 - The default for the HTTP protocol is port 80, and the default for the HTTPS protocol is 443.
65:49 - The next question is a true-false question.
65:51 - And it says, only ports 80 and 443 can be used for HTTP and HTTPS traffic.
65:57 - That is false, right?
65:59 - Those are the defaults, but other ports could still be used optionally.
66:07 - I installed caddy on Mac by just typing brew install caddy.
66:13 - But if you're on a different operating system, head over to caddyserver.com.
66:18 - Just Google caddy, and I'm sure you'll find it.
66:20 - And you can find instructions for how to install it on your own machine.
66:24 - Once you have it installed, you're going to need to be on your command line in the same directory that has all these files we just created.
66:34 - I'm going to run the test directory here on my command line, and I'll run caddy file-server.
66:41 - Now, by default, the server is going to bind to port 80, which is the default HTTP port.
66:47 - And it's going to use localhost, which is just the domain of my own computer, right?
66:53 - So I'm connecting to my own computer on port 80.
66:58 - So when I go to localhost port 80 in my browser, which again is the default, so I don't really need to type port 80, I should get this rendered view of index.html.
67:10 - So you might be wondering how did caddy know to serve index.html, right?
67:16 - Why didn't it serve name.txt?
67:18 - Well, traditional file servers will typically route the path of a directory, which in this case would just be the root, which is slash, to a file called index.html in that directory, just by convention.
67:32 - For example, if I wanted to get name.txt, if I just wanted to get that text file, I could actually just go directly to name.txt, and I'd get that file.
67:43 - Caddy is taking the path slash name.txt and mapping it to slash name.txt on my file system.
67:52 - Hopefully that makes sense.
67:54 - Similarly, if I wanted to see this blog page, I could go to slash blog.
68:00 - And again, because blog is a directory, caddy is automatically redirecting that request from blog to blog index.html.
68:14 - If I were to type index.html, I'd get the same thing.
68:19 - So at this point, you may be thinking, well, that's great.
68:22 - So a URL path is just the same thing as a file system path once you've hooked up a web server.
68:27 - It's not exactly true. By convention, many static file servers just use the path to the file on your disk as the path in the URL.
68:40 - But it doesn't have to work that way.
68:42 - At the end of the day, the server software, in this case Caddy, can do whatever it wants.
68:48 - We could completely change how we parse the path of a URL and what we want to respond with.
68:55 - Many frameworks, back-end web frameworks, work this way.
69:00 - If you write a server in Go or in Django, there will often be a lot of custom logic that determines how different paths in a URL are handled
69:10 - and what files and data will be responded with when certain paths are accessed.
69:15 - So while it's common for a URL path to map directly to a file on a file system when we're talking about websites,
69:22 - when we're talking about web APIs, that's rarely the case.
69:26 - So in this assignment, what we're doing is getting some data about locations in the FantasyQuest video game.
69:34 - And up until this point, we've really only got, I think, like item data and user data.
69:40 - So now we need to update our path to get locations data instead.
69:45 - Essentially, the API is parsing the path and determining, based on the path, what kind of information we want about the game
69:52 - so that our front-end code can then, you know, maybe render the locations on a map or something like that.
70:00 - Cool. So this code is making a get request, a fetch request, right, to this URL.
70:08 - And the problem is right now we're reaching out to the user's endpoints, the user's path, and we're supposed to use the locations path.
70:19 - So really quickly, let's just take a look at what this code is actually doing.
70:25 - It looks like after making the request response, we're going to log the locations.
70:31 - And the log locations function is really just iterating over those locations and logging out a message where it's expecting a name field and a recommended level.
70:40 - This would be the name of the location and the level your character should probably be if you're going to complete quests in that location, for example.
70:50 - Let's go ahead and run it right now, hitting the user's endpoint and see what happens.
70:55 - It looks like we're getting undefined for location.name and location.recommendedLevel,
71:01 - which makes a lot of sense because we're probably not even getting location data back, right?
71:05 - We're getting user data. So let's go ahead and hit the locations.
71:10 - I believe it was called locations endpoint instead.
71:15 - Awesome. And now we are getting what looks to be correct data.
71:20 - I'm going to go ahead and submit that.
71:23 - Let's talk about query parameters.
71:25 - So while the path of an HTTP request typically changes something big,
71:30 - like the web page that you're looking at or the entire resource that you're requesting from the server, right?
71:37 - User data versus location data. A query parameter typically changes something very small about the request.
71:44 - Maybe some metadata, maybe a filtering option, something like that.
71:49 - At the end of the day, the server can do whatever it wants with the path or the query parameters,
71:53 - but kind of by convention, the query parameters tends to be smaller changes to the request.
72:01 - Maybe something like the options are changing, right?
72:04 - So, for example, we could look at how Google uses query parameters.
72:08 - So if you go to google.com, in fact, let's just go ahead and do that in the browser.
72:14 - Go to google.com, we are on the search page, right?
72:19 - If we search for hello world, we'll get a page with many different search results for the hello world query.
72:31 - And if we look in the URL up here at the top,
72:35 - we can actually see that that first query parameter is q equals hello plus world.
72:44 - So Google is actually taking our search and using it in the URL of this results page as the query parameter, right?
72:54 - So we could actually navigate directly to the hello world query by copying just that section of the URL, right?
73:01 - With the q equals hello plus world, and we'd go directly to those search results.
73:07 - So again, we're kind of on the same page.
73:09 - We're still on the Google home page where we can search for things,
73:14 - but they're using the query parameter to specify what term is being searched for.
73:20 - So let's break down this URL that we were just on, right?
73:26 - HTTPS, it's the protocol, www.google.com, the domain, slash search.
73:34 - It's the path, right?
73:36 - And Google is kind of using slash search as the results page and then using the query parameter,
73:44 - which is this question mark q equals hello plus world to specify which term is being searched for.
73:52 - If you think about it, this makes a lot of sense.
73:54 - There's an infinite number of things we could search for on Google.
73:58 - So using a path might not make a ton of sense, right?
74:01 - We don't really have a separate or new page for every possible search query, right?
74:08 - So they have one page, the search page, and they just change the query parameter based on the term that's being searched for.
74:17 - So this syntax, the question mark, separates the rest of the URL from the query parameters.
74:29 - And then we have key value pairs.
74:31 - So in this case, the key is q, the value is hello world.
74:35 - There could be more key value pairs after the q equals hello world, and they would be separated by ampersands.
74:44 - So an ampersand is the, if you look at your keyboard, it's the shift, shift version of seven, right?
74:50 - Hold shift, press seven, you get an ampersand.
74:52 - So we could do q equals hello plus world ampersand, maybe filter equals seven or something, right?
74:58 - We could just do key value pairs in the rest of the URL.
75:02 - We'll get to that more in detail later.
75:06 - So the question is, query parameters are required in a URL.
75:10 - That is false.
75:12 - Okay, so this next question is in a website, query parameters rarely change blank.
75:18 - The answers are which page is served, marketing and analytics information, or the contents of the page.
75:24 - So we talked about how query parameters typically don't change something big like the resource that's being requested or the web page itself.
75:32 - They typically change something smaller like options or contents, right?
75:37 - So for the example of Google, the page didn't change, we were still on the results page when we changed the query parameter.
75:45 - But the search term that we were looking for results for did change when the query parameter changed.
75:53 - So it's definitely not contents of the page, right?
75:56 - Additionally, marketing and analytics information, I think we can rule that out.
76:00 - Query parameters are very often used to do like affiliate link tracking, commission tracking, that sort of thing.
76:06 - Which page is served though, that rarely changes when the query parameters changes.
76:12 - Usually the page is dependent upon the path component.
76:15 - So I'm going to go with which page is served.
76:19 - Let's talk about synchronous and asynchronous code.
76:23 - To start, let's jump right into synchronous code.
76:26 - So these three console log statements are a great example of synchronous code, right?
76:32 - Synchronous code is simple.
76:34 - It's what we usually work with and we do it for good reason.
76:37 - It's simple and predictable, right?
76:39 - If I were to run this code here, I'd be printing first, I print first.
76:44 - Next, I would log, I print second.
76:46 - And next, I would log, I print third, right?
76:49 - We call this synchronous code because it's just happening in the order that each kind of line of code is called.
76:56 - There's no fuzzy timings or anything happening.
76:59 - It's very predictable, very straightforward.
77:02 - The other kind of processing we could do is asynchronous processing.
77:06 - Asynchronous processing is a little bit more complex, which is why we only use it when we need to.
77:12 - But in a nutshell, asynchronous processing allows us to do multiple things at the same time.
77:19 - So for example, if we need to render something in the browser,
77:23 - but at the same time we want to go fetch some data from a remote server by an HTTP call,
77:29 - we can do that asynchronously so that the browser can do its work
77:33 - while we're also waiting on a server to send us back some information.
77:39 - Let's head over to the JavaScript Playground to see what that looks like.
77:44 - Okay, let's write some simple code.
77:46 - We're going to use the same example from before.
77:48 - In fact, I'm going to go ahead and copy paste the example we had before.
77:53 - So if we run this, we just see I print first, second, and I print third.
77:57 - Again, this is very simple and kind of what we would expect.
78:01 - Now let's do something a little more interesting.
78:03 - We're going to use the setTimeout function.
78:05 - This is a built-in JavaScript.
78:08 - What it takes as the first parameter is a callback, which is just a function.
78:13 - So it takes a function as input.
78:15 - And then the second input is how long it should wait to execute that function.
78:22 - And it takes it in milliseconds.
78:24 - So in fact, let's go ahead and define that.
78:26 - We're going to use our waitTime to wait time milliseconds.
78:32 - Let's just wait 100 milliseconds.
78:38 - So we're going to wait 100 milliseconds to call the callback function.
78:42 - Now we need to define what the callback function actually is.
78:46 - Let's go ahead and do that.
78:48 - We're going to use our const callback, a little anonymous here.
78:58 - Sorry, fat arrow function.
79:00 - And inside that function, we'll just log I print second.
79:06 - So what do we expect to happen here?
79:09 - Well, first, we expect to log I print first.
79:14 - Then we expect to wait 100 milliseconds and log I print second.
79:22 - And then log I print third, right?
79:24 - Something like that.
79:25 - See if that works.
79:26 - In fact, I'm going to move this up.
79:28 - And this is just a function definition.
79:31 - Go ahead and run that.
79:34 - OK, interestingly enough, we didn't even get the I print second message at all.
79:39 - It didn't even print.
79:41 - And the reason for that is this last function call, the console.log statement that prints I print third,
79:51 - when that exits, our whole program exits.
79:55 - So there was no time to wait 100 milliseconds to call I print second.
80:02 - So let's go ahead and wait.
80:07 - Let's make sure our program doesn't exit too quickly.
80:09 - So this function here, I've just named it sleep.
80:14 - And we won't get into the details of this right now.
80:18 - We'll get into promises very shortly.
80:21 - But in a nutshell, this is going to allow me to do this await call here where I can await, sleep,
80:28 - and I can sleep for that amount of time, plus a few extra milliseconds.
80:33 - So now, in theory, this line here will stop our program from exiting for 105 milliseconds.
80:40 - OK, so now we can see what's really happening.
80:43 - OK, cool.
80:44 - So it printed first, third, and then second, right?
80:47 - Again, because this one was waiting.
80:49 - So let's update the logs.
80:51 - Let's just say this one prints second.
80:54 - And this one will say I print after that many wait time milliseconds, milliseconds.
81:07 - Now this should be more accurate.
81:10 - Cool. So we got I print first, I print second, and I print after 100 milliseconds.
81:15 - Again, because we're waiting, right?
81:18 - We're telling the JavaScript runtime, hey, I'm going to do some other stuff for a minute.
81:24 - In 100 milliseconds, can you please execute this other code?
81:29 - So we're doing that asynchronously.
81:32 - We are simultaneously printing, I print second, and telling the JavaScript engine, hey,
81:38 - queue up this other operation that will happen in the future.
81:42 - Let's see what happens if I just increase this to a full second.
81:46 - 1000 milliseconds is a full second.
81:48 - We should be able to see it pop up there, OK?
81:52 - Hopefully that helps you understand just a little bit about how set timeout works, right?
82:01 - And how asynchronous programming works from a high level.
82:05 - So to tie that back into this diagram, the first example that we used, right?
82:10 - The I print first, I print second, I print third.
82:12 - That's an example of synchronous programming.
82:15 - If you look here in the diagram, you'll see that although we have maybe two processes,
82:20 - only one thing is happening at a time, right?
82:23 - Only one console.log statement is being printed at a time.
82:26 - They're being printed in order.
82:28 - It's very simple.
82:29 - Asynchronous programming, on the other hand, is where we can have one process doing some work
82:35 - and the other process is doing work at the same time.
82:39 - So how does this tie into our FantasyQuest server?
82:44 - Well, we have our code running in the browser in JavaScript, right?
82:48 - That's process A.
82:50 - And we have some execution logic, some program running on the server.
82:57 - That's process B.
82:59 - And with asynchronous programming, we can ensure that both processes are running at the same time
83:05 - and we're able to kind of sync them up as we need to.
83:08 - So as far as the assignment goes for this exercise,
83:12 - what we're told is to help us visualize how asynchronous code executes,
83:16 - let's practice with an example from the game.
83:18 - Keep in mind that we probably wouldn't use setTimeout in this way,
83:23 - but I think it's important for us to practice this anyways,
83:28 - even though it's not really a realistic example.
83:30 - We'll get to more realistic examples in a minute,
83:32 - just so that we can really get a feel for how the setTimeout function works.
83:38 - So the assignment says, update the waiting durations so that the text is printed in the following order.
83:45 - So again, if you remember, setTimeout is a function that takes a function as input
83:51 - and waits a certain number of milliseconds before starting that function, right?
83:56 - So setTimeout is kind of called and asynchronously,
84:00 - it will go spawn that function in the future after some number of milliseconds.
84:05 - Okay, cool. So we want to print in the following order,
84:08 - first firing up the forge, then smelting iron bars,
84:11 - then combining materials, then shaping iron, and then iron longsword complete.
84:18 - And it looks like up here we have some waiting durations.
84:22 - We are not supposed to change anything below this line.
84:26 - So all we can do is change these durations.
84:28 - So firing up the forge, that should happen first, right?
84:32 - Because it's the only thing not being kind of deferred for later.
84:37 - So the next thing we want to print is smelting iron bars.
84:40 - So let's go ahead and set that to, well, it looks like down here we are waiting for 2.5 seconds total.
84:48 - So we need to keep this all within two seconds, right?
84:53 - Let's wait 500 milliseconds for the, what is it, smelting iron bars.
84:59 - So smelting iron bars wait, so let's wait 500 milliseconds on that.
85:03 - And then combining materials, so let's wait a full second on this one.
85:11 - Next we've got shaping iron, so we can wait 1.5 seconds, or 1500 milliseconds.
85:18 - And then we've got iron longsword complete.
85:22 - So we can do a full two seconds on that one.
85:26 - Cool, so just by changing the amount of time we're waiting for each log statement, we should get them in the right order.
85:32 - Let's go ahead and run that.
85:38 - I'm going to check to make sure we did it right. That looks good to me.
85:46 - So as we mentioned before, async code, we really should only use it if we need it.
85:52 - But sometimes we really do need it.
85:54 - Essentially every time we make an HTTP request over the network, we need to do that asynchronously.
86:01 - Because if we didn't, the device that we were making the request from would need to just freeze up and wait for that request to come back.
86:10 - So we have to asynchronously wait for the request to come back.
86:14 - I mean, think about it. The server that you're communicating with is probably in another state or another country, right?
86:20 - So it may take, you know, whatever the ping of your internet connection to that data center is, it's going to take that amount of time, which again can be, you know, 200 milliseconds.
86:29 - It could be a full second. We can't really be sure.
86:32 - So we need asynchronous code so that we can keep doing things in the meantime, right?
86:39 - OK, so the question for this quiz is sync is better than async.
86:44 - And that's a tricky one.
86:46 - I'm going to go with false because in some cases we need async.
86:55 - Async is better than sync. I'm just going to say false again, right?
86:58 - It depends on the situation. We prefer synchronous code when possible, but sometimes you just can't get away from it.
87:06 - Another quiz, async code should blank.
87:09 - Answers are always be used, only be used for performance reasons, never be used, only be used on fast computers.
87:18 - Generally speaking, it should only be used for performance reasons, right?
87:21 - If we need to use asynchronous code to speed up a process, that's a great reason to use asynchronous code.
87:28 - Great. Now we can finally talk about promises.
87:31 - So setTimeout is a built in function to JavaScript that does some asynchronous stuff behind the scenes.
87:37 - But promises are kind of the most modern way to write asynchronous code in JavaScript.
87:43 - And the best way to think about a promise in JavaScript is like a promise in the real world.
87:48 - For example, if I were to promise to you that I'm going to explain how promises work, there's only two potential outcomes for that promise.
87:56 - Either I keep my promise and I teach you, or I don't keep my promise.
88:02 - Those are the two options. And just like those two options in the real world, with JavaScript, a promise can either be accepted or rejected.
88:11 - So in JavaScript, there's actually an object called the promise object.
88:15 - I can head over to the docs on MDN. Again, this is built into the JavaScript language.
88:20 - And a promise object basically just has three states, right?
88:24 - We talked about fulfilled, which means the promise was essentially kept.
88:28 - Rejected, meaning the promise was not kept or the operation failed.
88:33 - Or pending, right? We're still waiting on the outcome of the promise or on the operation to finish.
88:43 - So here's the syntax for how we can declare a new promise or create a new promise in JavaScript.
88:49 - Use the new keyword to create a new instance of the promise.
88:53 - Then we use the promise constructor. It takes as input, as its parameter, a function.
88:59 - This function here. The function has its first parameter, a resolve function, and the second parameter, a reject function.
89:08 - And then basically in the body of the promise, we're going to call resolve when we've successfully finished the operation we care about.
89:19 - Or we'll call reject if for some reason something went wrong with the operation.
89:25 - So in this example here, we've got a promise. When it starts, it will wait 1000 milliseconds.
89:32 - And then randomly, it looks like there is a 50% chance here that the promise will resolve with the string resolved or reject with the string rejected.
89:46 - Okay, so really all this promise says is in one second from now, I have a 50% chance of resolving the 50% chance of rejecting all we're really seeing here.
89:59 - Okay, using the promise. So that's how we declared the promise. Now we want to actually use it.
90:04 - Now that we've created a promise, how do we use it? The promise object has two callback functions that you can attach to it.
90:12 - One is the dot then the other is the dot catch. Okay, so dot then the function that is passed into dot then runs after the promise is successfully completed right once the promise is fulfilled.
90:28 - So it would run.
90:31 - If this line executes right if this resolve line execute.
90:37 - The dot catch function will run if the promise rejects.
90:44 - In this case.
90:47 - And then here in this example, we're basically just saying okay so wait for the promise to finish.
90:52 - So again, in the case of our example, wait the 1000 milliseconds, and then if it was successful, print the promise finally blank and it's going to use that string it's going to use that parameter that was passed into the resolve function so it would print the promise finally resolved.
91:10 - Or in the case of something going wrong, it would print the promise finally rejected.
91:17 - Right.
91:19 - Cool. Do that down here.
91:22 - Okay, hopefully that all made sense but if it didn't that's okay this was just an explanation it will all make more sense once we write some code.
91:31 - So, the assignment says, complete the apply damage function so that's this function here that takes two parameters so it takes damage and current HP or current hit points as inputs.
91:44 - And it says it should return a promise after one second, because in fantasy quest dealing damage with an attack takes some time.
91:52 - Okay, if the damage inflicted would reduce the players HP to zero or less the promise will reject with this string.
92:00 - Otherwise, the promise will resolve with this string.
92:04 - Okay, cool.
92:06 - So, we are creating a new promise that part looks good.
92:10 - We've got our resolve and reject callbacks here.
92:14 - We have set timeout called one second so that looks correct right we're going to wait 1000 milliseconds before doing whatever is in the body of this set timeout.
92:26 - So, we need to do some calculations, if the damage inflicted would reduce the players HP to zero or less. So, if damage is greater than grant HP Oh zero or less so greater than or equal to.
92:44 - If that's the case.
92:47 - The promise will reject with the string that okay so that.
92:52 - And then we're going to eat the string.
92:57 - Cool, reject the player suffers.
93:01 - Damage points of damage as.
93:05 - Fallen unconscious okay that looks good to me.
93:08 - Otherwise, we're going to resolve the promise with the string.
93:15 - The player suffers blank points of damage and has some amount of hit point.
93:28 - Okay, so we actually need to calculate new HP, new HP const new HP.
93:35 - Bulls going to be the current HP minus the damage right. In fact, now we can simplify this and we can just say if new HP is less than or equal to zero.
93:49 - And then over here, we can say, new HP that looks good damage points of damage. Okay, cool.
93:58 - Let's go ahead and run that.
94:05 - See what happened so applying 27 damage to a player with 50 HP.
94:10 - Apply damage resolved with the player suffers 27 points damage and has 23 hit points remaining that math looks good to me.
94:16 - And again, you can see how it's it's going over time right it's it's using that full second to apply the damage and again this makes sense in the context of a video game.
94:26 - Right. Sometimes, when a character attacks, there's like a second long animation right maybe a fireball has to fly across the screen or a sword has to actually be swung, there's an element of time to these programs.
94:40 - That's where asynchronous or at least time based programming can be really useful.
94:47 - I'm going to go ahead and submit that.
94:53 - So let's talk a little bit more about why promises are useful in the real world. So promises are the cleanest, but not necessarily the only way to write asynchronous code in JavaScript.
95:04 - In fact, the fetch function so you if you if you remember some of the code snippets that I said we get to later earlier in the course that fetch function actually returns a promise.
95:14 - And that's how we're able to do all that asynchronous kind of HTTP programming that we've been doing earlier and that we'll do more of in a couple chapters from now.
95:24 - So, when do we use promises and when do we use asynchronous code well the most common time especially in front end development is whenever we're doing IO or input output.
95:37 - So that's basically whenever we're making a network request right whenever we want to interact with a remote server, another machine will be doing asynchronous programming.
95:46 - Sometimes I owed isn't even just over a network sometimes we need to go to the hard disk of a computer right to the file system and read a file.
95:55 - Very often, especially in JavaScript that is done asynchronously again so that the rest of the program doesn't have to sit around and wait for your for your program to physically go grab that data from the hard drive of the machine.
96:09 - So, yeah, common examples of IO include HTTP requests reading files from hard drives or interacting with Bluetooth devices.
96:16 - Right. It's almost like it's not a perfect analogy but when you're interacting with like the real physical world and not just within the software of your own program, it's likely you'll need to do something asynchronously to keep everything running smoothly.
96:31 - So the question is, promises are the only way to write async JavaScript, and then the answers are true and false.
96:39 - Promises are not the only way to write async JavaScript, there are ways.
96:46 - Remember promises are just the most popular way, or the cleanest way. I found that it can be really useful as a developer to have kind of a ballpark idea of how long certain kinds of IO operations will take.
97:00 - And as you can imagine that's really useful when you're working with HTTP requests, for example, we'll start with the most basic type of kind of IO operation.
97:10 - In fact, it's so basic that we often don't even think about it as IO, and it's getting data out of RAM.
97:18 - So in your code, whenever you create a variable, there's a good chance that the data inside that variable, right, something as simple as name equals lane, right, the string lane, that string will very likely be stored in RAM in your computer.
97:33 - And whenever you want to access that variable, your computer, your CPU actually has to go fetch that data from your RAM. And that usually happens on the order of nanoseconds. It's very, very fast.
97:48 - In fact, it's practically imperceptible to humans, right, it's so fast. And so for all intents and purposes, we can just do it synchronously, we can synchronously, you know, update variables, create variables, delete variables, all that kind of stuff, without worrying about doing any of these operations asynchronously.
98:10 - Cool. So that's really, really fast.
98:13 - Next, we have disk. So this would be like going to the file system, right, and reading in, say, a text file, maybe doing some analysis on it.
98:24 - For example, programs that have to read in configuration data might have to fetch some data from disk. Fetching data from disk takes on the order of like one millisecond.
98:35 - One thousandth of a second. In fact, it's often much faster than this, especially if you're using in a solid state drive. But it's slow enough that in some cases, it can be problematic to do it synchronously, especially if you're doing a lot of reading from disk or you're reading large amounts of data from disk.
98:53 - It can be useful to do it asynchronously so the rest of your program can continue kind of functioning as normal.
98:59 - For example, imagine you're using VS code, your text editor, and you need to load a very large file from disk. Well, it would really suck if your entire VS code completely froze until the file was loaded.
99:12 - So very often these sorts of things are done asynchronously. So I'm just going to put async or sync.
99:23 - Not great. Cool.
99:26 - And then kind of the last category that I think is important to have top of mind is the network.
99:33 - So this would be things like HTTP requests. And obviously it's going to be much slower if you're making the HTTP request, you know, to a computer in another building, even slower if it's a computer in another state, even slower if it's a computer across the world.
99:48 - So it's going to change a little bit. But generally speaking, if you're working on the internet with a fairly robust backend server that's maybe in a data center somewhere near you, we're talking about something like 100 milliseconds to maybe 2000 milliseconds, which is two seconds.
100:08 - And because this is quite slow, it's definitely noticeable by humans, right? We typically work over the network asynchronously.
100:18 - Because it's really inefficient to have our programs pausing for seconds at a time, just waiting for bits to be sent halfway across the world and to come back.
100:30 - Hopefully this gives you a decent breakdown idea how some of these IO timings will fit into your applications.
100:36 - Next question is, which would be considered IO or input output?
100:42 - JavaScript programming language and HTTP request are really slow algorithm or a function that adds two numbers together.
100:48 - Well, the JavaScript programming language doesn't even make sense. So I'm going to ignore that.
100:52 - A slow algorithm, not necessarily, right? Like most algorithms will just run again in your program, right on your CPU. You don't necessarily need to fetch data in order to make that happen.
101:06 - Same with a function that adds two numbers together. That sounds like a pure function that doesn't need to request any data from the outside world. So it's going to be an HTTP request.
101:19 - So we've already interacted with promises in their most raw form. That is, we've used the dot then and the dot catch methods to provide callbacks that are executed once the promise either resolves or rejects.
101:32 - Well, the await keyword is actually a kind of a newer syntax for interacting with promises that just it looks a little different.
101:41 - And I would argue that in most cases, you should prefer the await keyword over the dot then syntax, just because it's easier to work with and a little easier to read.
101:49 - So let's take a look at the difference.
101:52 - So here we have a promise, right, that, you know, at some point in the future is either going to resolve or reject.
101:59 - With the dot then syntax, we are passing in that callback function, which takes as input the results of the promise.
102:07 - In this case is just a message. With await, instead of a callback function, we just use the await keyword and provided the promise.
102:17 - And then what happens is this expression does not evaluate until the promise resolves.
102:25 - So our code is actually going to block at this point, it's going to sit and wait until the promise resolves, at which point it would, you know, save the value, the return value, right, the resolved value of the promise.
102:36 - Into that message variable, and we could go ahead and log it to the screen.
102:40 - This doesn't mean that the entire JavaScript engine or JavaScript program is going to stop and wait.
102:46 - It just means that this specific part of your code, right, this specific function is going to wait.
102:54 - So this allows us to write asynchronous code so that it looks like it's synchronous, which, again, just makes it so much easier to work with.
103:02 - So let's jump into the assignment. It says similar to before, the apply damage function takes a damage value and the player's current HP as inputs and returns a promise.
103:14 - On line one, call apply damage with inputs, damages 25, current HP is 50, then await the returned promise and save the resolved value and a variable called message so that it can be logged to the console.
103:27 - OK, so that was that was long. Let's let's take a look at the code. So here we have the apply damage function.
103:33 - It's responsible for creating the promise. So this is really very similar to that function we wrote in the last assignment.
103:40 - But now we are going to be interacting with the promise. So what we need to do is call apply damage.
103:48 - We need to provide damage as 25, current HP is 50, right. I'm just getting this from the assignment description over here.
103:58 - Now, because a promise is returned, right, return new promise, we need to await the results. So we need to await that promise.
104:07 - So this will evaluate to a promise, right, just like up here. And then we need to await that promise.
104:15 - And it says the return promise, save the resolved value in a variable called message. OK, so const message.
104:22 - Cool. And then down here, that message should be logged to the console. Let's take a look at that.
104:30 - 50 HP suffers 25 points of damage and has 25 HP remaining. I'm just going to test it really quick. What happens if we bump this up to 70?
104:39 - 70 HP, 25, 45. That looks great to me. So I'm going to change that back to what the assignment asked for and submit it.
104:49 - So if the await keyword replaces the dot then syntax, the async keyword effectively replaces the new promise syntax.
105:00 - It's a way to create a promise, basically. And the way it works is if you specify that a function is asynchronous,
105:09 - it will automatically return a new promise and the resolved value will just be whatever value was returned from the promise.
105:17 - So let's take a look at that in code. So here we have the traditional way of doing it with the new promise syntax.
105:24 - We create a function and then we return a new promise. And that, you know, resolves some value at some point.
105:32 - Well, with async, all we have to do is put that async keyword in front of the function keyword.
105:39 - And now this function get promise for user data will automatically return a new promise.
105:45 - And the value that that promise resolves to is just whatever is returned from the function.
105:53 - Additionally, the await keyword can be used within asynchronous functions.
105:58 - In fact, it can only be used within asynchronous functions.
106:02 - So async and await allow us to do, you know, tons of different asynchronous operations while writing very clean code
106:11 - that frankly looks synchronous or at least allows us to think about the code in a more synchronous way.
106:18 - So let's get down to the assignment. It says, as it turns out, the await keyword can only be used within async functions like we just mentioned.
106:26 - It says, go ahead and try to run the code. You'll get an error. Expand this a little bit so we can see.
106:33 - We'll run the code and we get a syntax error that says await is only valid in async functions and the top level bodies of modules.
106:41 - So if we look at the code itself, it looks like awaits being called here. That should be OK because the top level body of the module.
106:48 - And then await is also called here, which is inside a function that is not asynchronous. And that is the problem.
106:56 - So what's going on? This function is supposed to be fetching some data over the network, right?
107:02 - Making an HTTP call. And then it looks like it's parsing that response data as a JavaScript object.
107:08 - And both of these operations are asynchronous. But the function itself is not. That's why we're getting this error.
107:17 - So let's go ahead and mark that as an async function, which just means it's going to wrap the entire function in a promise.
107:23 - And when the promise resolves, it will resolve with that response data.
107:30 - Cool. So that looks like it worked. We got all the item data coming back. Go ahead and submit that.
107:36 - So we've used this word callback function a few times. And all we mean by that is a function that we hand to another function to be executed at a certain point in time.
107:47 - So it might be, for example, a function that is called when a button is clicked. It could be a callback function.
107:53 - Or if we look here in the example of set timeout, the callback function is the function that we give to set timeout to be executed later.
108:04 - So the promise API in its original form was more callback based, right?
108:09 - We have this dot then syntax or dot catch syntax that took a function as input to be executed once the promise successfully completed.
108:20 - Async and await these newer keywords kind of do away with that callback syntax.
108:25 - And in my opinion and the opinion of many others, it's just much easier to read this way.
108:31 - Let's take a look at this example. So here we have some code using dot then. And here we have some code using await.
108:40 - So here the dot then functions have been chained one after the other. Right.
108:45 - First, we're going to fetch the user. Once that happens, we'll fetch the user's location. So that happens.
108:51 - We'll fetch the server. Right. And then we're able to finally log that data.
108:56 - So three nested dot then callbacks. Right. And then down here, we're using the await keyword.
109:03 - This looks a lot more like kind of traditional synchronous programming that we're used to. Right.
109:07 - First, we'll fetch the user and we'll wait for that operation to complete. Now we have a user object.
109:12 - Then we fetch that user's location. Wait for it. Then fetch the server for the location. Wait for it.
109:19 - Then we're finally able to log result.
109:22 - Again, both of these approaches are valid. And there are certainly cases in which it might make sense to use dot then over await.
109:30 - But generally speaking, I, I prefer to use the async and the await syntax.
109:36 - So the question is blank is generally cleaner syntax async await new promise or it doesn't matter.
109:43 - Use what you feel like. I would say generally speaking, async and await is cleaner.
109:48 - Now we need to talk about error handling in JavaScript.
109:52 - So this is really, really important when it comes to working with HTTP or networks in general.
109:58 - A lot of things can go wrong on networks.
110:00 - For example, if you're running some JavaScript code on your computer and all of a sudden you lose Internet connection,
110:05 - there's not necessarily anything wrong with your code. Right.
110:08 - There's no bug, but there's no way you're going to be able to fetch data from a remote server.
110:12 - You don't have an Internet connection.
110:14 - So error handling allows us to detect that something's wrong and handle it gracefully.
110:20 - So let's take a look at this example.
110:22 - Here we have a car object and we expect a speed property to be defined on that car object.
110:29 - But when we run this code, if the car object has not yet been defined, we'll get this reference error, right?
110:35 - Reference error, car is not defined.
110:37 - Now, for the sake of this example, let's imagine that we don't have control over this car object.
110:43 - Maybe it's coming to us from an external library.
110:46 - Well, what we can do is we can wrap it in a try block.
110:50 - Now, anything within the try block, if it produces an error, we can catch that error and handle it gracefully.
111:00 - In other words, as code within the try block is executing, if at any point an error is thrown,
111:07 - the try block will stop and we'll jump down to that catch block where we can handle the error.
111:13 - So moving down to the assignment so we can see this in action says the code is failing to execute.
111:19 - It is throwing an error that isn't being handled gracefully.
111:23 - As a result, the entire program is crashing.
111:26 - Properly handle the error in the code by wrapping all of the function calls within a try catch block.
111:31 - The catch block should log any errors to the console.
111:33 - Okay, so if I run it in its current state, we're getting an error that says parameter is not a number.
111:37 - So it looks like we have a print character stats function that takes a number as input.
111:42 - And if the number that's passed in or rather I should say if the data passed in is not a number,
111:50 - which is what this function here does, says is not a number, then this error is thrown.
111:57 - Parameter is not a number.
112:00 - Otherwise, we'll log to the console, your character is whatever level.
112:04 - So this call, right, number two, this isn't a number, this is a string.
112:09 - But according to the assignment, we are essentially writing a test suite here.
112:13 - So we want to make sure that our function is properly catching not a number values and throwing an error.
112:21 - So rather than just erroring out, we should be handling it.
112:25 - Go ahead and write a try block, you'll dump all of these in here.
112:36 - Catch block with an error.
112:40 - So this error value, this is going to be whatever was thrown.
112:44 - So in this case, it's possible that a string is thrown.
112:47 - So we're expecting this to be a string.
112:50 - And our assignment just says the catch block should log any errors to the console.
112:53 - So we can just do console.log.
112:57 - Okay.
112:58 - So remember, the try block will just keep executing code, you know, one line after the other,
113:04 - just like normal, until something bad happens.
113:06 - When something bad happens, it will jump right down to the catch block.
113:09 - So I would expect because we were told to wrap all of the function calls within a single try catch block,
113:15 - that we actually don't want this line to execute at all, right, in this test suite.
113:21 - We're making sure that this bad call to print character stats properly, essentially stops execution.
113:29 - Let's go ahead and run that.
113:31 - So your character is level four, and then parameter is not a number.
113:34 - That looks good to me.
113:37 - Let's talk about the difference between bugs, bugs and errors in code.
113:48 - So bugs and errors are not the same.
113:51 - When I first started writing code, I was kind of fuzzy on this whole idea.
113:54 - And to be honest, I think for a long time, I assumed they were just kind of the same thing.
113:59 - In reality, bugs are bad, as you probably know.
114:06 - The interesting thing is that errors are not always bad, not always bad.
114:15 - Okay, as we've defined them, bugs are kind of unexpected things that are happening in our code.
114:22 - So we want our code to do something, right, hopefully something useful.
114:27 - And if it's not doing that thing, then we say we have a bug in our code.
114:32 - So bugs are things that are unexpected.
114:38 - To give an example, let's say that we had a function that we had a function in our code that adds two numbers,
114:44 - something like add, and it takes x and y as inputs, and it produces some result.
114:50 - We'll just call it z.
114:53 - If we called add with two and three, and we got the result of seven, we would say we have a bug, right?
115:05 - We expected the add function when given two and three to produce a five, but we are getting a seven instead.
115:12 - That's a bug. It's something that's unexpected in our code.
115:16 - An error, on the other hand, is very often expected, expected.
115:23 - And our job as programmers is to handle that error gracefully.
115:29 - So the way we approach fixing bugs and errors is quite different, right?
115:34 - When we have a bug, really, the only thing we can do is go fix the code, right?
115:39 - We actually have to go fix our application.
115:42 - Now, to be fair, there are certain circumstances where fixing a bug might be too expensive or maybe the bug is there,
115:48 - but it's actually not affecting many of the users, so we can kind of ignore it for now.
115:51 - That's more of a business and cost decision, right?
115:55 - In a perfect world with unlimited resources, of course, we would always fix all bugs.
116:00 - But the point that I'm trying to get across is when there's a bug, really, all you can do is fix the code.
116:08 - Errors, on the other hand, sometimes are unavoidable.
116:12 - You can't actually fix the code to remove errors.
116:17 - So, for example, an error that you might get in your code is there is no internet, no internet connection.
116:29 - So if you're writing a web app that needs to communicate over the internet to get its job done
116:34 - and the user's computer has been disconnected from the internet, there's really nothing in your code that you can do to fix that, right?
116:42 - You can't magically bring back an internet connection.
116:46 - So all you can really do is handle that error gracefully, right?
116:50 - Maybe by showing a message to the user.
116:53 - Another common error might be something like the remote, the remote server.
117:00 - Server is down.
117:03 - So you're writing some code on one machine that, again, maybe reaches out over a network to a server or a database.
117:11 - And while you have internet connection, maybe that server is offline.
117:14 - So that's another common type of error that crops up that, again, nothing's wrong with your code,
117:19 - but it's something that you need to be able to handle and maybe display to the user, something like that.
117:25 - Another common error would be user input.
117:29 - Bad user input, right?
117:32 - So maybe you're writing an application that requires users to have passwords over 12 characters, right?
117:38 - When a user puts in a 10-character password, we might consider that an error.
117:44 - Again, it doesn't mean there's anything wrong with our code, but we need to handle that error and maybe display some message to the user.
117:50 - One final note on the distinction between bugs and errors is that bugs have to be fixed in code.
117:58 - Errors have to be handled in code, right?
118:02 - So we expect errors. We must handle them.
118:04 - If we don't handle our errors properly, they may result in bugs.
118:10 - So like we just talked about, bugs and errors are not the same, right?
118:14 - Debugging is the process by which we remove bugs from the code, right?
118:20 - And then error handling is how we handle errors in our code.
118:24 - They're two very different and distinct things.
118:27 - Try-catch blocks are not a debugging tool.
118:30 - They're not ways to find bugs in our code, right?
118:33 - They're a way to handle errors at runtime, things like the internet connection being down.
118:38 - The whole takeaway from this is do not try to use try-catch for debugging and do not try to use a debugger to introduce error handling in your application.
118:48 - Understand those are two very different things.
118:51 - Okay, so the question that goes along with this is the presence of which of the following indicates that the developer has something to fix.
118:59 - Bugs, errors.
119:02 - Well, errors are always going to be present.
119:06 - Unless you have the most simple app, right, that doesn't do anything with a network or anything with user input, there will always be some sort of error handling.
119:14 - So I'm going to go with bugs.
119:17 - Next question is you should use error handling techniques to fix bugs.
119:22 - No, you should use a debugger or debugging techniques, right?
119:27 - Log statements, print statements, things like that to find bugs and remove them from your code.
119:33 - Error handling is to handle errors at runtime.
119:37 - So that's going to be false.
119:39 - This next question is a debugger is required to debug a program and the answers are false and true.
119:46 - This is something I want to talk about for just a second.
119:49 - So.
119:51 - Debuggers are optional.
119:53 - Debuggers are tools that we can use to help us debug our code.
119:57 - Some people like them.
119:59 - Some people don't.
120:00 - Some people use them for certain things or not for other things.
120:03 - If you've ever used a debugger, you'll know what I'm talking about.
120:06 - But basically a debugger is something that allows you to kind of step through your code one line at a time.
120:12 - So instead of running your entire program at once, you run it in debug mode, which allows you to kind of step through the program.
120:19 - Just one line of execution at a time.
120:21 - So you can see like what's going wrong.
120:24 - Where a more primitive form of debugging is to just add, you know, console dot log statements or print statements.
120:31 - So you can see what data is present in your application at which points.
120:37 - How you debug is up to you.
120:39 - Some people like debuggers.
120:41 - Some people don't.
120:42 - To be honest, I think it depends a lot on the kind of code you're working on as to whether you should use a debugger or not.
120:49 - But at the end of the day, they are not they're not required.
120:53 - So I'm going to go with false on this one.
120:56 - So now that we've talked a little bit about error handling, we can talk about how async and await that other syntax for working with promises makes error handling a little nicer.
121:08 - So let's take a look at how it works in the non async await world and just kind of the raw promise usage world.
121:16 - The way it works is if everything goes well with a promise, then the dot then handler resolves the promise, right?
121:23 - We get some value, in this case, a user object that we can then, you know, do something with.
121:28 - If something goes wrong in the promise.
121:30 - So, again, let's just assume an HTTP call, something goes wrong, Internet connections down, servers down, then instead of the dot then handler firing the dot catch handler fires instead.
121:42 - OK.
121:43 - And this is the syntax for that.
121:45 - With async await, we can use kind of normal JavaScript error handling.
121:50 - We can use try catch blocks.
121:52 - So one of the great things about using async await is we get kind of this just more traditional JavaScript feel, right?
122:01 - Look and feel or style to our app.
122:03 - So the way this works is when we are awaiting a promise, if that promise rejects, right?
122:11 - In other words, if something goes wrong in that promise, then the error is thrown so we can just catch it in a catch block.
122:21 - OK.
122:22 - So, again, rejecting promises results in essentially thrown errors.
122:27 - And if we throw within an async function, that's essentially the same thing as rejecting the promise.
122:36 - So, again, it kind of just remaps everything into normal JavaScript, which is why I really, really like the syntax.
122:45 - So let's see what that looks like in action.
122:47 - The assignment says we're trying to fetch the worldwide leaderboard from the fantasy quest server.
122:53 - So we're writing the game code, right?
122:55 - We're interacting with the fantasy quest server.
122:58 - Unfortunately, we're getting an error.
123:00 - The good news is there's actually nothing wrong with our code.
123:03 - The reason we're getting an error is because the server is down.
123:07 - So as good software engineers, instead of just allowing the error to kind of bubble up and explode, right, which in essence terminates the program,
123:16 - unhandled JavaScript errors can just kill execution.
123:21 - We need to actually just handle that error and display a message to our users through the console.
123:27 - So our task is to wrap this within a try catch block.
123:33 - So we'll do try.
123:34 - And again, the reason we can do this is because this asynchronous function is awaited.
123:41 - So any errors thrown within can be caught in just a normal try catch block.
123:57 - The assignment says wrap the network call within a try catch block.
124:00 - Within the catch block, log the text.
124:02 - OK, let's do console.log.
124:11 - Our servers are down, but we will be up and running soon.
124:13 - Cool.
124:14 - In this case, we don't even need the specific error.
124:16 - We're just going to kind of give our users a canned response.
124:22 - On that note, this console.log, in case this wasn't clear before, will not happen if something goes wrong here.
124:30 - If something goes wrong on line two, we're going to jump immediately down into the catch block.
124:34 - So we will only log the leaderboard data if the server properly responds with the leaderboard.
124:42 - Go ahead and run that.
124:44 - Great.
124:45 - And this looks good because this is supposedly the URL of a server and it is supposedly down.
124:51 - So everything seems to be working as intended.
124:53 - Submit it.
124:55 - It's time to work with some HTTP headers.
124:59 - So headers allow clients and servers to pass additional information about an HTTP request.
125:05 - So up to this point, all we've really cared about is the actual body of an HTTP request.
125:12 - And the body of the HTTP request is typically used to transport the information itself.
125:20 - I'm sorry, I don't know a better way to say it.
125:23 - We'll get into some examples that will really help.
125:25 - But metadata, which is what headers are typically used for, is like data about the data.
125:32 - So for example, let's say that the body of an HTTP request maybe contains item data in a video game, right?
125:39 - Things like iron sword, bronze sword, wooden arrow, whatever.
125:44 - The headers might contain things about that data.
125:48 - For example, the type of client the person sending the request to the server is on.
125:54 - So for example, maybe Google Chrome, right?
125:56 - Or the operating system or the user's preferred language.
126:01 - This is kind of data about the data, right?
126:04 - It's not the information we really care about, which would be included in the body.
126:09 - It's additional information that the server can use to figure certain things out.
126:15 - Again, things like location are very often transmitted in headers.
126:20 - Maybe you have a website that changes the currency for the pricing page based on the location of the user.
126:27 - Headers would often be used to communicate that location.
126:32 - Let's jump into the assignment to really see kind of what the heck's going on.
126:36 - So the assignment says complete the log content type function.
126:40 - It takes a response object as input and should log out the content type header to the console.
126:45 - Okay, so we're taking a responses input.
126:47 - We're supposed to log something to the console to a response object, right?
126:52 - This is just what comes back from a fetch call.
126:54 - So it is the entire HTTP response object, right?
126:57 - As exposed to us kind of through the fetch API.
127:01 - Cool. So how do we get headers?
127:05 - Well, let's take a look.
127:06 - Here it says we can access the headers object through the request.headers and response.headers property.
127:13 - So in this case, we don't care about the request.
127:16 - That's already sent for us down here.
127:17 - We care about the response.
127:19 - We're logging the content type of the response.
127:21 - So response dot lowercase headers that this object holds all of the headers, right?
127:30 - And then it's telling us we should use this dot get method.
127:33 - So this is a method, again, exposed to us through the headers API, which means it's a built in function, right?
127:40 - To the browser.
127:44 - And this method, method of the headers interface returns a byte string of all the values of a header within a headers object with a given name.
127:52 - The requested header doesn't exist.
127:54 - We'll get null.
127:55 - OK, cool. So let's test that.
127:56 - Let's just do dot get garbage header.
128:03 - OK, so I don't expect that to return anything interesting.
128:06 - Let's just all this header about and let's go ahead and log it out to the console.
128:18 - So in theory, we'll get a null, right?
128:20 - Because I don't expect that this this key in the headers object actually has an associated value.
128:28 - OK, great. So that was null.
128:30 - So if we want to get the content type of the response now, content type.
128:35 - Oh, content type is actually a really common header in HTTP requests.
128:42 - And its whole purpose is to tell kind of the computer on the other end what type of data is being sent in the body.
128:50 - We can send JSON data, right, which is basically a string that looks like a JavaScript object.
128:55 - We can send HTML data, right, to be rendered in a browser.
128:59 - We can send CSS.
129:01 - We could send plain text, all sorts of kinds of data we could send or formats of data we can send.
129:07 - The content type header is designed to kind of communicate that here's some data and here's the type of data it is.
129:16 - So if we log the content type, I would expect probably that this is JSON data.
129:23 - Yeah, so we get the application slash JSON header in very, very common header value when you're just working with data.
129:33 - So I'm going to go ahead and run that. I think we got it right.
129:38 - Let's talk about browser dev tools.
129:40 - So I'm here in Google Chrome, but this will work in pretty much any popular browser.
129:47 - It just might be a little different.
129:50 - If I right click anywhere on the page and click inspect, my dev tools will pop up and I'm going to head over to the network tab.
129:56 - That's what's most interesting to us.
129:58 - The network tab records all network activity that's being done by the browser.
130:02 - Here we don't have any network activity, but if I reload the page, then we should see all these requests fire off.
130:10 - These are all the requests that are required basically to run the boot dev software.
130:18 - So there's tons of stuff in here.
130:20 - We've got JavaScript that we're loading.
130:23 - We've got, let's see, fetch requests.
130:26 - This is actually the JavaScript that's running on the boot dev website in the browser that's making additional HTTP requests from the browser back to kind of the boot dev server.
130:38 - So we got some of those.
130:39 - We've got, let's see, got an HTML document here.
130:42 - And if we actually click on that request, we can see the response headers and sure enough, the content type header is text HTML.
130:51 - So now that we've taken a peek, that's what we were supposed to do.
130:56 - I just kind of skipped reading and showed you.
130:59 - But the question is, you can use the developer tools to view responses to your clients' requests.
131:05 - And that is definitely true.
131:09 - So the next question is about how long do most of the network requests take?
131:14 - Keep in mind, this is the time it takes your browser to reach boot dev servers over the Internet.
131:20 - OK, so we're going to pull up the network tab again.
131:27 - Refresh the page.
131:31 - And if we look at these fetch requests, we can see how long they took in milliseconds right over here on the right.
131:40 - And it looks like most of them are taking, you know, somewhere between 50 and 500 milliseconds.
131:49 - It just depends, right? Some of them are much faster, right?
131:52 - 50 milliseconds here. Some of them are taking a little bit longer.
131:55 - I think we had one that even maybe took a full second.
132:01 - There it is. One whole second there on that one.
132:05 - But I would say kind of on average around 100 milliseconds.
132:08 - So let's see what the answers are.
132:10 - 5,000 milliseconds, that's much longer than they were taking.
132:16 - 100 seconds is way longer. None of them were as fast as two milliseconds.
132:20 - So I'm going to go with about 100 milliseconds.
132:23 - So we've talked about how headers are often metadata or data about the data.
132:29 - Another very common use case for headers is authentication, right?
132:34 - So take the boot dev website as an example on boot dev.
132:38 - Yes, we, you know, we write code, we submit assignments, but we also keep track of our progress, right?
132:44 - So we have achievements. We've got gems that we unlock levels and experience.
132:49 - A lot of that information is private, right?
132:53 - You can't necessarily, as a different boot dev user, see how many gems that I have.
132:59 - That information is kind of private to me.
133:02 - So whenever I make a request to the boot dev server, essentially asking how many gems do I have,
133:09 - I need to be able to prove to the server that I am who I say I am.
133:13 - And that's often done in headers.
133:15 - In fact, on the boot dev website, it is done with headers.
133:19 - Headers are a convenient mechanism for this because we don't need to kind of muddy up
133:23 - the actual request body itself with authentication information, right?
133:28 - The request itself can just be about gems. How many gems do I have?
133:31 - I get kind of a number back, right?
133:34 - All of the authentication information, that additional metadata can exist strictly within the headers.
133:40 - So let's jump into the assignment to kind of see an example of this.
133:44 - So because we don't want any of our users to accidentally overwrite another user's saved data,
133:49 - our back end team has required that we use the X API key header,
133:53 - which means that X API key is the key in the header, right?
133:56 - And then we would set a value for all requests to the fantasy quest servers.
134:01 - By using different values, we are telling the server that we are a different person.
134:05 - OK, so there's some headers being sent to the fantasy quest server.
134:09 - And what we're reading here is basically if we change the value in that X API key header,
134:15 - we're telling the server we are now a different person.
134:17 - If we use the same API key header, then the server is going to treat us as the same person.
134:24 - So some code has been written for us. Let's take a look at what it's doing.
134:29 - So here at the top, it looks like a new API key is being generated.
134:32 - So that's what we're going to include in the header, right, for authentication purposes.
134:38 - It looks like we are getting location data here, which is just a fetch, a fetch call to the server.
134:47 - So that's where we're getting kind of a single locations information.
134:51 - And that matches up with what's being talked about in the assignment.
134:54 - So it says, number one, get a location object from the game server.
134:57 - So that's happening right here, right?
134:59 - And we're using this API key to do it.
135:02 - Number two, log that object to the console.
135:04 - That's happening here just so that we can see the location.
135:08 - Next, updates the object and sends those changes back to the server.
135:12 - So put location. So that's this function here, which is defined down here.
135:19 - So it looks like this, this HTTP method is going to update the location on the server.
135:25 - And then number four, gets the location object again and logs to the console to display the changes.
135:33 - OK, so it looks like we're getting a location, making a change to it, putting it back, and then getting it again, essentially to make sure that it changed.
135:43 - Let's go ahead and run the code and see what we get.
135:48 - So got old location, Heartfin Marsh recommended level one, location updated, got new location Heartfin Marsh recommended level one.
135:57 - OK, yeah, so it's not changing, right?
136:01 - That's the problem. We go ahead and read the assignment.
136:03 - It says run the code in its current state to see the return values.
136:06 - You'll notice that the two objects that are logged to the console are the same.
136:09 - So because the X API key we're using is different, the update is not being applied to the same user account.
136:17 - OK, so we need to figure out why that's happening.
136:20 - So this new location data, it looks like this is what should be being updated on the server.
136:25 - So we should be getting a new name, Bloodstone Swamp, and a new recommended level of 10.
136:34 - So the problem is new generated API key.
136:39 - It looks like we're using the same API key to get the data in the first place and put it back.
136:45 - But we just need to use that same API key to get it the third time.
136:52 - And if we look at why that's important, let's go look at the get location response.
136:56 - We can see here that the API key variable that's being passed in is being added to the headers as a value.
137:06 - OK, cool. So this is now this is looking good.
137:09 - We've we've deleted that new API key and we'll just use that same original API key all the way through.
137:16 - Go ahead and run that. Cool. Now we have the updated one.
137:22 - I'm going to go ahead and submit that.
137:25 - OK, now we'll be practicing with the network tab just a little bit more.
137:29 - And by the way, if you do a lot of work on the Web, I recommend just poking around in the DevTools.
137:35 - Anyways, there's so much useful stuff in here.
137:39 - Again, in this course, we're really just going to be focusing on the network tab, but the DevTools are just they're just fantastic.
137:46 - OK, so I'm going to go ahead and refresh the page.
137:48 - The assignment said to open your DevTools, navigate to the network tab and refresh the page.
137:54 - Poke around through the request that you see.
137:56 - Notice that you can select a request and see its request and response headers.
137:59 - OK, so we're really just supposed to kind of poke around.
138:02 - And the question, so we're really looking to get out of this is question is header values are always numbers.
138:08 - And is that true or false? So let's take a look.
138:13 - Here's a fetch request. Let's take a look at it.
138:18 - Here's some headers, right? These are the headers in the request.
138:21 - These are the headers in the response. So again, that's just important to understand.
138:23 - We can send headers as the clients to the server, but the server can also send headers back in the response.
138:29 - And I mean, if you look at this, right, we've got status code of 200.
138:33 - We've got access control, allow headers, star.
138:38 - So clearly they are not all just numbers. We've we've definitely got strings in here.
138:44 - So I'm going to go with false on that one.
138:49 - All right, we've got another another practice with the DevTools.
138:55 - Wants us to take a look at some headers.
138:58 - I think I remember the answer to this one. So it says the status code header on the request have blank values.
139:03 - Let's just let's just open it up again and take a look.
139:10 - So here's the status codes, right, which are kind of you can think of status codes as a part from headers.
139:16 - But if you open them in the DevTools, you'll see they're also in the headers.
139:21 - So the status code is 200. So it's definitely a numeric value.
139:25 - One interesting thing to note, even though the answer here I believe is is going to be numeric in code when we're working with headers,
139:34 - we typically parse them as strings because that's what they are at the end of the day.
139:38 - That's how they're encoded.
139:41 - That said, you can obviously encode a number as a string.
139:45 - I'm just pointing this out because you may need to cast headers from strings to numbers if you want to deal with them as numbers.
139:53 - So anyhow, you go with numeric on that.
139:57 - OK, again, with the DevTools, this time the question is, what is one of the values you see in the response headers for the content type key?
140:04 - You might have to look at several requests.
140:06 - So we've seen the content type key before.
140:09 - We know that it deals with the kind of data like what kind of data is being sent in a response.
140:16 - So let's pull up a few examples.
140:20 - OK, so here we've got a fetch request.
140:24 - This one's content type is application JSON.
140:28 - Let's look at just a couple more.
140:34 - This is an image and its content type is image JPEG with one of these.
140:40 - OK, perfect. There's application JSON.
140:43 - Get post options, put delete.
140:44 - This wouldn't be a content type, right? Those are HTTP methods, which is something we'll get to soon.
140:50 - 921, that looks like it could almost be a status code, but it's actually too high.
140:55 - Status codes don't go over 599 or so.
141:02 - So application JSON it is.
141:05 - So it's finally time to talk about JSON or JavaScript Object Notation.
141:11 - So JSON is a standard for representing structured data on the web.
141:14 - So in the last assignment, or I should say in the entire last chapter, we were looking at how different network requests send different kinds of information in the request body.
141:25 - For example, sometimes it's image data, right?
141:28 - Just literally an image like as a JPEG or PNG.
141:31 - Sometimes it's an HTML document, right?
141:34 - And sometimes it's kind of more raw data.
141:37 - When we've been working with the boot dev API and we've been getting item data, right?
141:42 - Things like names of weapons, names of locations, their damage.
141:46 - We've been using JSON in order to transmit that data over the network.
141:51 - So let's take a look at some actual JSON data.
141:55 - Here is a JSON object that represents kind of a list of movies.
142:01 - So at the top level, there is a key called movies and its value is an array.
142:08 - And inside that array, we have some objects.
142:11 - So each object, it looks like, is intended to represent one single movie.
142:15 - We've got some information about each movie, right?
142:17 - It's ID, it's genre, it's title, director.
142:22 - So JSON data can really be structured in many different ways, right?
142:28 - We could have another key in here.
142:30 - We have movies in one array and we could have actors in another array under a different key.
142:35 - But the important point is that it's a very flexible way to kind of send structured data as plain text.
142:43 - So as developers, it's really simple to work with.
142:46 - We can take that plain text and parse it into our program and work with that data as just variables, right, within our program.
142:55 - So because JSON is plain text, if we're to bring that network response directly into our code and parse the response body,
143:06 - we would really just be looking at binary data that represents text.
143:10 - That's not super useful to us in our JavaScript code, right?
143:14 - It would be much more useful to have a JavaScript object, right?
143:17 - Because then we can use kind of dot notation and array indexing to actually get into that response
143:23 - and get to the data that we actually care about.
143:27 - Luckily, the fetch API makes it really, really easy to do this.
143:31 - So whenever we make a fetch request, we are getting a promise back, right?
143:37 - So we have to await it. Once that promise is resolved, we get a response object.
143:41 - That response object has a dot JSON method that we can call.
143:48 - That dot JSON method is responsible for parsing kind of the textual JSON into an actual JavaScript object that we can use.
143:58 - And that method is asynchronous, so we also need to await it.
144:02 - So again, what's happening here is we're making a fetch request to a server.
144:07 - We're getting a response. And then we're parsing that response.
144:11 - Well, we're parsing that response's body, right, into an actual JavaScript object.
144:17 - Now that's just a JavaScript object, right?
144:19 - We can treat it like any other variable in code.
144:23 - And that's really the way we're going to want to work with it.
144:27 - OK, let's take a look at the assignment.
144:29 - So it says our getLocations function is almost done.
144:32 - We just need to parse the response data as JSON and return it.
144:36 - So we need to parse that JSON data into a JavaScript object and return the JavaScript object.
144:44 - Let's take a look at this code.
144:46 - So getLocations is clearly just a fetch call.
144:49 - That's the response, right, that we're supposed to parse into JSON and return.
144:53 - I'm curious what it's being used for.
144:55 - So if we scroll down, getLocations returns here.
145:01 - Supposedly, again, this is supposed to be the JavaScript object.
145:04 - We're going to log, got some locations from the server.
145:07 - And then we're going to iterate over the location.
145:09 - So this is interesting.
145:10 - Actually, this response is not an object at the top level.
145:13 - It's an array at the top level.
145:15 - And then we're going to iterate over that array and kind of log each location in turn.
145:19 - Let me show you what I mean by that.
145:21 - So here we have some valid JSON data.
145:25 - Let's head over to JSONLint.
145:26 - This is one of my favorite websites for parsing JSON data.
145:29 - If I validate it, I'm getting some ads.
145:33 - Hold on.
145:34 - If I validate it, valid JSON, right?
145:36 - Again, this is an object at the top level.
145:38 - Here's something that's interesting.
145:39 - Instead of having movies as a key in the object, we could also put this array at the top level.
145:49 - Validate that.
145:50 - It's also valid JSON, OK?
145:53 - So in this case, we have an array at the top level, and then there are objects within.
145:59 - Both are valid.
146:01 - And in this case, it looks like this is the structure that we'll be working with in the assignment.
146:06 - We're just working with an array at the top level, and then within the array, we have location objects.
146:12 - Let me show you that one more time.
146:14 - So here is the JavaScript object coming back.
146:16 - It's actually an array.
146:18 - We iterate over it and log out each location in turn.
146:23 - If I run it now, I'm guessing it just totally breaks.
146:25 - Yeah, locations is not iterable.
146:27 - That's because we never actually returned anything.
146:30 - So let's go ahead and fix the code.
146:33 - So we should be doing something similar to this, right?
146:35 - We want to take this response.
146:39 - All the dot JSON method on it.
146:41 - So that should give us a promise.
146:42 - If we await the promise, we'll get a JavaScript object, and then we just need to return that.
146:47 - Run that.
146:50 - Awesome.
146:51 - That looks good to me.
146:52 - I'm going to go ahead and submit it.
146:56 - So a couple more notes here about JSON.
146:58 - So again, JSON is just a string.
147:01 - So when we parse it into our code, that's the time when we're converting it into kind of an in-memory object.
147:09 - And it's important to note that it's not only used in JavaScript.
147:12 - JSON is so ubiquitous because it's used across programming language, right?
147:17 - Every programming language is comfortable working in JSON.
147:21 - For example, in JavaScript, we parse JSON into either JavaScript objects or arrays.
147:26 - In Python, for example, we parse JSON into either arrays or they're called lists in Python or dictionaries.
147:35 - And in Go, we parse JSON data into slices or maps or structs.
147:42 - It's all kind of the same idea, right?
147:44 - Key value pairs and arrays.
147:49 - Cool.
147:49 - So some common use cases of JSON data are obviously HTTP requests and response bodies.
147:55 - But JSON at the end of the day is just a structured text format.
147:59 - So you'll often also see JSON files, right, that are actually saved on your file system,
148:05 - used as kind of configuration files that can be read from disk and parsed that way.
148:10 - There are also some popular NoSQL databases that kind of use JSON as their API that you interface with,
148:17 - things like MongoDB, Elasticsearch, and Firestore.
148:21 - And then as a final note, I pronounce JSON, right, J-S-O-N, J-S-A-N,
148:27 - Leviosa, but some people do pronounce it Jason, and they're wrong.
148:33 - I'm just kidding.
148:34 - People pronounce it however they want, but I do say JSON.
148:38 - Okay, cool.
148:39 - The question here is, JSON can only be used by JavaScript programs.
148:42 - That is absolutely false.
148:44 - Okay, next question is, in JSON, different fields in an object are separated by a,
148:49 - and we've got period, semicolon, comma, and colon.
148:53 - So here's some, here's some valid JSON, I hope.
148:57 - Valid JSON, yep.
148:59 - You'll see it's commas that separate the fields.
149:03 - So make is a field, year is a field, and we're using commas to separate them.
149:08 - Okay, next one is, JSON is a database programming language,
149:12 - format for communicating and storing data, or plugin for JavaScript.
149:17 - All of these are false except for the format, format for communicating and storing data.
149:23 - So in the last coding assignment, we parsed JSON data, right, using that dot JSON method.
149:29 - But JSON is also very useful for sending data.
149:34 - So we can send data to a server using JSON.
149:38 - So there's two kind of methods that are really important to understand.
149:42 - There's JSON dot parse and JSON dot stringify.
149:45 - Both built in to kind of the browser API or, you know, pretty much any JavaScript runtime.
149:53 - And JSON dot stringify is the one that's particularly useful for sending data, right?
149:59 - Because we can build a JavaScript object in our code,
150:02 - and then we can call JSON dot stringify to get the string form of the JSON data,
150:06 - which is what we want to actually send in an HTTP request.
150:10 - So let's jump down into the assignment.
150:13 - Assignment says we need to keep track of when players discover new locations.
150:17 - However, there's a bug in the update location by ID function.
150:21 - Yes, that's this function here.
150:23 - It looks like the location's discovered property is not getting saved properly by the server.
150:28 - Okay, so location object as a discovered property.
150:34 - Let's expand this and take a look at the code.
150:37 - You find, hmm, let's run the code actually.
150:46 - Okay, cool. So the bandit camp location, which was fetched by the server, looks like this.
150:54 - Got discovered, false, ID, some big long ID string, a name, and recommended level.
151:02 - Okay, so it's saying the discovered property isn't getting saved properly.
151:07 - So after discovering the bandit camp, we fetched again from the server and it's still false.
151:13 - Okay, I'm understanding what's wrong now.
151:15 - So if we look at the code, we're getting a location, we're updating its discovered property,
151:21 - we're updating the location by sending a fetch request, and then we're getting the location again.
151:27 - And the problem is that this should now be true once we've run that update location by ID function.
151:36 - Okay, so location is just a JavaScript object with a discovered property that is a Boolean,
151:41 - and we're setting it to true.
151:43 - Problem is up here, that location object is somehow not making it to the server properly.
151:51 - So we need to stringify it, right? Because the body section of the fetch call takes a string, not a JavaScript object.
152:02 - And the reason for that is the body of an HTTP request does not always need to be a JavaScript object.
152:10 - It doesn't need to be a JSON object, right? It could be something else.
152:13 - So we can't rely on the fetch API to stringify the object for us, right?
152:22 - Because we could be sending HTML here, we could be sending plain text.
152:25 - So we need to be responsible for stringifying it.
152:29 - Let's see if that works. Discovered true. Right there. Looks good.
152:35 - I'm going to go ahead and submit that.
152:38 - So if JSON dot stringify takes a JavaScript object and converts it into the stringify JSON form, JSON dot parse does the opposite.
152:48 - It takes as input a string that is meant to be structured as a JSON object and returns the associated JavaScript object so we can use it in our code.
153:00 - So let's take a look at this code example here.
153:03 - We've got this JSON string. Again, this is just a string that looks like a JavaScript object.
153:09 - The JSON string. And we call JSON dot parse on it and we get back the object and now we can use the dot operator to access fields of that object.
153:19 - So let's jump down to the assignment.
153:21 - It says it's common for developers to write local tests using mock or fake data that looks like real data.
153:28 - So you're working with some server and you expect it to give you some data response, maybe some JavaScript object.
153:36 - And rather than testing with the server directly, you can kind of just build the string representation of what you expect to get back from the server and test with that.
153:47 - And then once everything's working, you can kind of plug in the server to the rest of your code.
153:53 - But sometimes mocking out the data makes testing a little bit easier, especially if there's certain conditions under which the server would return a certain response.
154:02 - And so rather than meet those conditions while you're testing, you can kind of just mock that data response and make sure that your code handles that data in the way that you expect.
154:13 - So moving on with the assignment, it says let's ensure that the JSON format that the back end fantasy quest developers provided to us is valid JSON.
154:23 - It would be a shame to write a bunch of code just to find out that the back end has given us the wrong format.
154:28 - Right. Really suck to just do all the work and then just have to go back to the back end developers and tell them they have a bug and then have to wait on them again.
154:36 - So the assignment says complete the parse location function, use a try catch block to safely call JSON dot parse on the location string provided.
154:45 - Keep in mind that JSON dot parse throws an error if it is given a string that isn't a valid JSON.
154:51 - If we give it garbage, it's going to throw an error and we need to capture that.
154:54 - If you could parse the string successfully, use the print location object function to print the parsed object.
154:59 - If an error was thrown log invalid JSON strings.
155:02 - OK, cool. So let's first let's just get that error so that we know what's going on.
155:08 - So let's do JSON dot parse and let's just pass in some garbage garbage data.
155:15 - Just a just a one word string is not valid JSON.
155:18 - So let's go ahead and on that syntax error unexpected token D data is not valid JSON.
155:25 - OK, cool. That's doing what we'd expect.
155:28 - So now we throw this into a try catch block.
155:36 - This in the try section because it's the dangerous code.
155:40 - And then we're supposed to log invalid JSON string if there's a problem.
155:47 - So let's not log invalid JSON strings.
155:52 - Now I'm going to run that, see what happens. Invalid JSON string, invalid JSON string.
155:55 - OK, so we're always getting invalid JSON string for these two calls to parse location.
156:01 - And that's OK, because we hard coded this.
156:03 - OK, so now we need to pass in the actual location data.
156:12 - At this location information, which is stringified.
156:16 - So something like this or something like this.
156:20 - And let's save that as JavaScript object.
156:23 - So this would be location object.
156:28 - And then we're supposed to, if you can parse this string successfully, use the print location object function.
156:36 - Print location object.
156:39 - Pass the location. Cool.
156:41 - So if this parse goes well, we'll print out the location.
156:44 - Otherwise, we'll log invalid JSON string. I'm going to go ahead and run that.
156:50 - So it looks like the first call to parse location was invalid JSON.
156:55 - The second one parsed properly.
156:58 - If we go down and look.
157:00 - Yeah, this one's invalid because it's missing.
157:03 - It's missing a closing bracket there.
157:05 - That makes sense. I'm going to go ahead and submit that.
157:10 - It would be a shame to go into so much detail about JSON without bringing up any alternative formats.
157:15 - So XML is essentially a JSON alternative. And you know, my perception of it is that XML seems to be used a lot more kind of before JSON took over.
157:26 - I would argue JSON is used in more modern applications.
157:31 - You might see more XML used, at least for kind of HTTP requests in more legacy code.
157:37 - That said, there's nothing wrong with XML. You can still use it.
157:41 - But at the end of the day, XML and JSON, when it comes to sending data in HTTP requests, serve a very similar purpose.
157:49 - They allow us to structure data in a textual or kind of text format.
157:55 - So let's take a look at what the syntax looks like, because at the end of the day, it's really just a difference in syntax.
158:01 - So this data in XML would look like this in JSON.
158:06 - So instead of these kind of root tags, we just have brackets in JSON. And then instead of opening and closing tags for each field,
158:15 - we have a single key that corresponds to a value.
158:21 - So at the end of the day, I would argue JSON is more popular these days.
158:26 - And that's why we're going to spend most of this course working with JSON.
158:29 - But it is important to understand that XML is out there and that you may encounter it.
158:33 - One of the reasons I think that so many developers prefer JSON for, again, networking or HTTP work is it's a little easier to read and write and work with.
158:43 - For example, writing this field, all I have to do is type genre colon action.
158:49 - I don't have to do open tag genre, you know, then write action and then close tag genre.
158:55 - I'm not writing genre twice, I guess is my point. Cool.
158:59 - So now that we know a little bit about XML, the question is XML and blank serve similar purposes.
159:06 - The answer is going to be based on the next question is XML is blank verbose than JSON.
159:14 - So more verbose or less verbose verbose just means like lengthy.
159:19 - Like how much do you have to type and read in order to get the same message across?
159:23 - And I mean, if we just look here, I would argue that XML is more verbose.
159:27 - Right. Like we brought up before, we have to type each the name of each field twice.
159:32 - So I'm going to go with XML is more verbose.
159:35 - So JSON and XML both accomplish very similar things. The question is, which should you use?
159:40 - Right. Both JSON and XML are are used to send network requests, right?
159:47 - Like HTTP requests transfer data from one system to another.
159:50 - They're also used as configuration files.
159:52 - Maybe you need to configure some settings in a project repository you're working on
159:57 - or a dependency management system that you're using or just a piece of software
160:00 - that upon startup kind of reads in some configuration data.
160:03 - Very often, JSON and XML are used for those use cases.
160:09 - Sometimes you're going to be forced to use one or the other.
160:12 - Right. If you're working with a server that expects JSON, congratulations, you're using JSON.
160:17 - If you're working with a server that expects XML, you're using XML.
160:20 - Right. That said, if you have the choice, maybe you're helping design an API before it's built.
160:26 - Maybe you're the back end developer or maybe you're configuring a project
160:30 - and you just have optionality for how to structure your configuration files.
160:34 - I would argue that you should generally prefer JSON.
160:37 - It's lighter weight, right, because it's less verbose.
160:40 - So it actually lacks less kind of bytes of data in the file itself.
160:47 - But there's also this kind of readability component to it.
160:51 - So I would argue JSON is just a little easier to read and write.
160:55 - So the question is, which should you prefer to use?
160:57 - And I would say you should prefer JSON.
161:01 - The next question is, which can be used to send data from the browser to a web server?
161:05 - JSON, XML, both or neither? The answer is definitely both.
161:10 - Every time we send an HTTP request, we have to specify an HTTP method.
161:15 - It's not optional. And up until this point in the course, we've been using a few different HTTP methods.
161:20 - In fact, you've probably noticed them and maybe even thought like, what the heck is this thing?
161:24 - I think we've used get requests, maybe even post and put requests.
161:29 - But we haven't explained what they do yet.
161:32 - And in this chapter, we're really going to dive into HTTP methods.
161:36 - So let's take a look at some of the most common methods.
161:38 - Just really quick. This is on the MDN documentation.
161:43 - We've got get, add, post, put, delete.
161:46 - Those five are the most common.
161:48 - I would argue you could kind of exclude head from that category.
161:51 - Actually, maybe get, post, put and delete are the most common.
161:54 - And then there's some other less common ones like connect options, trace and patch.
161:59 - Cool. In this exercise, we're going to be diving into the get method.
162:03 - So the get method does kind of what it sounds like it does.
162:06 - It gets stuff.
162:09 - Specifically, it gets representations or copies of stuff from a server.
162:14 - So for example, if you want to get some information about a user,
162:17 - say a user is logged into your website and they want to see their profile photo, right?
162:23 - They might do a get request to the server to get a copy of their profile photo so they can look at it.
162:29 - Because get is all about getting information, getting copies of information
162:34 - so that it can be displayed visually in a browser or in a mobile app or whatever.
162:39 - It's considered safe because it doesn't actually change any of the information on the server, right?
162:45 - Updating something or creating something or deleting something, right?
162:48 - Like, I don't know, changing a profile photo, swapping out a password, that kind of stuff.
162:53 - Those are considered a little more dangerous because data is changing.
162:58 - Get methods can be called multiple times and nothing changes.
163:01 - So they're very safe to use.
163:04 - Let's talk about how to make get requests using the fetch API.
163:07 - So we've already used the fetch API pretty extensively.
163:10 - Here's the syntax down here.
163:12 - We have the fetch function that again is built into the browser.
163:15 - It returns a promise. So we're going to have to await our fetch calls.
163:19 - The first parameter is a URL.
163:21 - And the second parameter is an options object.
163:24 - So the URL is just the URL we are making our request to.
163:28 - The options object, however, has a few other interesting things.
163:31 - So the first is the method, right?
163:33 - We're making a get request.
163:34 - So we have to specify the get string in the method.
163:38 - The mode, we're not going to go into a ton of detail about this.
163:42 - It is browser specific.
163:44 - Essentially, cores is a mode that we need to use in the browser so that the browser doesn't kill our request for security purposes.
163:52 - That's for cross origin resource sharing.
163:55 - And essentially by setting this mode, we're going to allow the browser to make our HTTP request.
164:02 - Then we have this headers object, which is just these kind of string to string key value pairs, right?
164:10 - In this case, we are setting this header that specifies that we are on a Mac OS client.
164:16 - But again, these headers could be any key value pairs.
164:20 - And then what we are not including, what we are not including in this fetch call is the body.
164:25 - We have done that in the past.
164:28 - When we are sending get requests, we typically do not include a body because we are saying we want a resource, right?
164:36 - So when we want to update something or we want to create something, we're usually sending data.
164:41 - So we need to include a body.
164:43 - But when we were just asking for data, we often don't need to include a body.
164:48 - So that's why we don't have it here.
164:50 - So on to the assignment.
164:52 - We need to write a reusable function that retrieves all of the fantasy quest users from the fantasy quest server.
164:58 - So we'll be completing the get users function.
165:00 - It should number one, call fetch using the URL parameter.
165:04 - All right, so let's do we'll need to await a fetch call.
165:07 - All right.
165:08 - Which first parameter is the URL we want to make the request to.
165:14 - Next, we'll need an options object.
165:17 - So use the get methods method.
165:21 - Yet.
165:23 - We'll need to use the cores mode.
165:29 - We need a header.
165:32 - In this case, it's the X API key header.
165:37 - This is the this is the header that the server expects to authenticate us so we can prove who we are.
165:44 - You can think of an API key is kind of like a special password.
165:47 - And so you could imagine, I mean, we're getting all the users on the server.
165:51 - This is something that would probably be behind some form of authentication on a production server.
165:59 - Typically, only admins would be allowed to get all of the user data for an entire for an entire server.
166:05 - Cool.
166:06 - And then we can just use the API key provided to function.
166:11 - And then return the resulting JSON data from the response.
166:14 - OK, so this returns a response object.
166:19 - Then we'll need to await.
166:23 - Based on method, we're basically saying we expect this response.
166:28 - You have JSON data in the body, and we're going to parse that into a JavaScript object and return the JavaScript object.
166:36 - OK, let's go ahead and run this and see what we get.
166:44 - Character name, class warrior, level 14 username.
166:48 - OK, that all looks pretty good.
166:50 - Let's take a look at the code just to see what the heck's going on over here.
166:55 - So first, a new API key was generated.
166:58 - We are hitting this user's endpoints on the boot dev server.
167:04 - You're getting users and then we're logging the users.
167:07 - And that log user function is just going to iterate over all the users that we get and kind of log out some information.
167:13 - So this this is all looking good to me.
167:14 - I'm going to go ahead and submit that code.
167:18 - Let's talk about CRUD.
167:22 - So CRUD is an acronym.
167:25 - Stands for create, read, update and delete.
167:30 - Create.
167:31 - I'll do these. Let me do these in different colors.
167:34 - Create.
167:36 - Read.
167:40 - Update.
167:49 - So when we're dealing with a web server, pretty much every action we take,
167:55 - nearly every action we take when interacting with a server is one of these actions.
168:01 - We either want to create some new resource on the server, right?
168:04 - Create a new user account, create a new weapon in a video game, right?
168:09 - Create a new tweet.
168:11 - We want to read something, right?
168:14 - Read a tweet, read a list of tweets, see which of our friends are online.
168:19 - We want to update something, right?
168:21 - Maybe update a password or we want to delete something, delete an account, et cetera.
168:25 - Like I said, almost all actions fall into one of these four buckets, right?
168:31 - Create, read, update, delete.
168:34 - As it happens, these actions map very simply to the HTTP methods.
168:41 - So create is a post HTTP method.
168:47 - Read, this is the one we've already covered, is a get.
168:54 - Update is going to be a put.
169:00 - And I'll just like special mention, sometimes it's a patch,
169:06 - but I would underscore it's usually a put.
169:11 - And then delete is the easiest one because it's delete HTTP method.
169:22 - Okay, so when people talk about CRUD servers,
169:25 - they're talking about a web server that allows the users of the API
169:28 - to create, read, update, and delete resources.
169:31 - And then typically, they will use these HTTP methods to do it.
169:36 - Now, I want to point out, this is a convention.
169:40 - This is a convention, this mapping, right?
169:45 - Technically, there's no reason a server can't use get requests to create resources.
169:52 - There's nothing stopping the server from being designed that way.
169:56 - However, the convention in HTTP, specifically kind of RESTful servers,
170:03 - which is something we'll get into later,
170:05 - is to map kind of the create, read, update, and delete to these specific methods.
170:12 - And it's just so that it makes it easier on us, right?
170:15 - We get used to doing things this way.
170:17 - And then when we're working with APIs, which every API is different and complicated,
170:22 - because we're using something familiar, it makes it easier to interact with.
170:26 - So again, this is a mapping that you don't necessarily need to memorize it now,
170:30 - but it's something that you definitely will get really familiar with over time
170:34 - as you work with more and more servers, and it will become second nature.
170:37 - Okay, so now we've got a question that goes along with all of that,
170:40 - create, read, update, delete, kind of mapping to HTTP method stuff.
170:45 - So the question is, HTTP methods map to CRUD actions by convention, automatically, or always?
170:53 - The answer is by convention.
170:55 - Next question is, to update a user account, I would probably use a blank request.
171:01 - The answer is going to be put.
171:03 - So an HTTP post request sends data to a server typically to create some new resource on the server.
171:11 - And the way that differs from a get request we can see down here.
171:15 - Well, there's actually a couple things. So first of all, the method is post, one should be fairly obvious.
171:20 - But additionally, we need to send a content type header.
171:24 - Not every server is going to require it.
171:27 - But it's definitely best practice to always inform the entity on the other side of a fetch or an HTTP request,
171:36 - the kind of data that we're sending in the body, right, so they don't try to parse it the wrong way.
171:41 - So in this case, we're going to be sending JSON data.
171:43 - So we should specify in the headers that we are sending JSON data.
171:48 - And then finally is the inclusion of a body.
171:51 - So when we were getting data from a server, we didn't need to send any data in the body.
171:57 - We could leave it empty. Right.
171:58 - But now that we are actually sending some information to the server so that that information can be saved on the server,
172:05 - we need to specify that in the body.
172:06 - It's also important to point out that those requests are not safe in the same way that get requests are.
172:12 - Get requests are very safe inherently, right.
172:15 - Nothing's changing on the server.
172:17 - Typically, we're just asking for kind of copies of information that's stored there.
172:23 - Post requests are altering the state of the server in some form or another.
172:27 - There are strategies that servers can use to kind of deduplicate.
172:32 - Say you were to accidentally send the same post request twice to create a new user.
172:37 - Smarter servers can can kind of deduplicate that and make sure only one entity is created.
172:42 - But that's not always the case.
172:44 - So it's just important to keep in mind that because post requests are kind of mutating data on the server,
172:50 - they're changing something that's stored there.
172:54 - You do need to just be a little more careful with them.
172:56 - So let's jump down to the assignment where it says we need to save newly created characters on the fantasy quest server.
173:04 - So we'll be using the get users function that we already wrote.
173:08 - And we'll be using that function to verify that our create user function is working.
173:14 - So if we look at the test suite, it looks like we'll be getting all of the users,
173:22 - creating a new user, and then getting all of the users again.
173:27 - So we can see that the one that we created exists after we create it.
173:32 - Make sure it works.
173:34 - OK, cool. So take URL and data as parameters.
173:37 - We got those there. We also have an API key.
173:40 - Calling fetch. So let's save the results of fetch in a response.
173:44 - And then we need to await the fetch call.
173:49 - We'll be making the fetch request to the URL that we're given.
173:52 - And then we need to specify the options.
173:54 - So the first option is going to be the method, which in this case is a post request because we're creating a user.
174:00 - Next, we need to set that cores mode, just like we did last time.
174:05 - And then for headers, we're actually going to have two.
174:09 - The first will be this content type header.
174:13 - Server knows we're sending JSON data.
174:15 - And then the second will be that authentication header, the API key header.
174:22 - This will be the API key that we're given.
174:27 - Finally, we need to actually send the data itself.
174:30 - Now, here we have this parameter called data.
174:34 - Let's go take a look.
174:36 - We scroll down to where create user is being called.
174:43 - The user to create is what's passed in there.
174:47 - And user to create is just this JavaScript.
174:50 - OK, cool. So we just need to stringify that.
174:55 - Body.
174:56 - JSON.string.
174:58 - Stringify data.
175:01 - OK, let's run that.
175:04 - Get.
175:09 - Cool. So retrieving user data, we got all of these characters or characters.
175:16 - And then we created creation response body undefined.
175:21 - Probably not good.
175:23 - What did we screw up?
175:26 - Response. Oh, let's finish reading the instructions maybe.
175:31 - OK, include the body field, pass the data, return the responses JSON body.
175:35 - OK, so we need to return response.JSON.
175:40 - And don't forget, we need to await this because the.JSON returns a promise.
175:46 - Await that.
175:47 - All right, let's run it again.
175:51 - OK, so there's our users creating new character.
175:54 - Here's the response body.
175:55 - OK, so this is the new character that we created.
175:58 - Name is Grendel.
176:00 - We scroll down. OK, cool.
176:01 - Grendel is in this list, but he's not in the first list.
176:04 - That makes sense, right?
176:05 - We got all the users. He wasn't there.
176:07 - We created Grendel and we got all the users again.
176:10 - He was there. So this is looking like it works to me.
176:12 - I'm going to go ahead and submit that.
176:15 - Let's talk about status codes.
176:19 - HTTP status codes.
176:23 - So status codes are basically one additional thing that we need to check
176:28 - to ensure that an HTTP request went the way that we hope it did, right?
176:32 - That everything went well.
176:34 - The first thing that we typically check, right, is if an error was produced.
176:39 - And we've already talked about errors.
176:41 - Status codes are kind of the second level, the second layer that we need to pass
176:49 - in order to make sure that, again, the request kind of went off without a hitch.
176:54 - Let's diagram the lifecycle of a fetch request so that we can see kind of how status codes
177:00 - and errors differ and when you might get one versus the other.
177:06 - So over here, I'm going to draw the client.
177:09 - And on this side, I'll have the server.
177:11 - You're probably super familiar with this diagram I'm going to draw by now.
177:16 - This will be the HTTP request going out.
177:21 - And this will be the HTTP response back.
177:26 - Okay.
177:29 - If something goes wrong in this area, it will produce, most likely produce an error.
177:40 - So for example, if we don't give a valid domain name to the fetch API, we might get an error.
177:47 - Or if the internet connection is down, so we're not able to complete the request,
177:51 - then we would probably get an error from the fetch API.
177:55 - Okay. If something goes wrong on the server.
178:00 - So this means our request successfully made it to the server.
178:03 - And now the server is processing the request.
178:06 - If something goes wrong during the process of the request, then that results in a status code.
178:13 - And we will still get a valid HTTP response back.
178:17 - The status code is contained in in the response.
178:22 - Okay.
178:23 - So if something goes wrong on the server and the server detects it,
178:26 - it will let us know in the HTTP response via a status code.
178:31 - So this might be something like, hey, you don't have permission to access that resource.
178:35 - That you're requesting, right?
178:38 - Or one of our backend services is down.
178:41 - We're not able to process that request.
178:42 - Those are the kinds of things that you'll see in status codes.
178:46 - So another one of the big differences between status codes and errors are that errors only occur if something goes wrong.
178:52 - Whereas every HTTP response has a status code.
178:56 - We just need to check what the status code is to see if something actually went wrong.
179:01 - So the codes are broken up into kind of different error levels by by number.
179:07 - So status codes are between 100 and 599.
179:12 - And basically 100 level codes are informational responses.
179:16 - Frankly, they're very rare.
179:18 - You won't see these very often.
179:20 - 200 level codes are hopefully what you see the most often.
179:23 - And they're success codes.
179:25 - So 200 is the famous.
179:27 - Everything's OK.
179:28 - You'll see 200 quite often.
179:31 - 300 are redirection messages.
179:34 - So they're basically telling the client, hey, the server moved.
179:37 - You need to redirect your quest to somewhere else.
179:39 - If you've ever been to a link, like if you ever visited a link that doesn't actually end up taking you to the URL in your browser that you visually saw, you likely were redirected through a 300 level status code.
179:53 - And then 400 are client errors.
179:55 - So it's basically the server telling the client, hey, you're not authenticated.
179:59 - You don't have permissions.
180:00 - You formatted something improperly.
180:03 - And then 500 level errors are server errors.
180:06 - So it's actually the server saying, hey, something messed up on our end.
180:09 - Maybe our database is down or something like that.
180:12 - So let's take a look here at some of the more common status codes that you'll see.
180:16 - So 200 is just OK.
180:18 - Right. This is by far the most common code and basically just means your request worked.
180:22 - Right. You can move on.
180:24 - 201 is just a little bit more specific.
180:26 - So it's saying everything went well, but specifically you created something.
180:30 - Right. So 201 is often the response to a post request when a resource is created on the server.
180:36 - 301 moved permanently.
180:38 - So this means, hey, the server that handled this type of request used to live here.
180:44 - Now it lives somewhere else.
180:46 - You should go there to deal with it.
180:48 - So, for example, browser redirects use 301s all the time.
180:52 - If a web page moves to a new domain, typically 301 redirects are set up so that all the new traffic can move to that.
181:00 - All the traffic can be redirected to that new location.
181:04 - 400 is just kind of a general bad request.
181:08 - Again, it's like a catch all.
181:09 - It's just like you did something wrong in your request.
181:12 - You know, figure it out.
181:14 - And a lot of times when kind of error status codes like 400 and 500 level status codes are sent back in an HTTP response,
181:23 - it's very often that the body of that response will contain more information about what went wrong.
181:28 - So we would typically check the status code, see that it's a four or five hundred,
181:32 - and then maybe read out the HTTP response body to see what specifically happened.
181:39 - Maybe log that to the console or to some logging system for us to check on later.
181:46 - 403 is one that comes up quite a lot.
181:48 - It's just unauthorized.
181:49 - Maybe you forgot to include an API key.
181:51 - Maybe using the wrong API key.
181:53 - Maybe you don't have a session token, something like that.
181:56 - 404, you've probably encountered this on the web.
181:58 - It just means not found.
181:59 - Maybe you tried to navigate to a web page on a domain that doesn't exist.
182:04 - You could get a not found error.
182:06 - And then 500 is by far the most common 500 level code.
182:10 - It just means internal server error.
182:13 - Very often this is like a bug on the server or maybe the database is down or something like that.
182:21 - I don't think you need to memorize all the status codes.
182:23 - In fact, there's a link here to all the status codes, and there's there's quite a lot of them.
182:29 - You don't need to memorize them.
182:33 - What I would recommend is just knowing the basics, which are basically 200 level is good.
182:38 - 400 is client error.
182:40 - 500 is server error.
182:42 - And that's going to be kind of really all you need to know to get going as a web developer.
182:49 - So the question for this exercise is a successful response returns a blank status code.
182:57 - And that is going to be a 200 level status code.
183:01 - Okay, same topic, different question.
183:03 - The purpose of status codes is to blank to alter the method of the request to inform the client about whether or not the request was successful.
183:11 - Do not need to send a response body or to speed up the request.
183:14 - It's going to be number two to inform the clients about whether or not the request was.
183:21 - Okay, let's take a look at what checking a status code actually looks like in code.
183:27 - So the dot status property on a response object gives us the code.
183:31 - Okay, so we've got our response object from the fetch call.
183:34 - This is the property that has the status code update to get user code function to return the status code of the response.
183:42 - Okay, so we're making a call to that get user endpoint, and we want this to return a status code.
183:49 - So if I just run this without making any changes, I'm getting ID invalid, status code undefined, ID, some ID, and then status code undefined.
184:00 - If we instead return on status, run it again, invalid ID, status code 404, good ID, status code 200.
184:18 - Okay, cool. So when we pass in the test suite and invalid ID, we're getting back a 404.
184:25 - That makes a lot of sense.
184:26 - We're not able to find the user with the invalid ID.
184:31 - And then on the other hand, when we pass a valid ID, we get we get back 200.
184:36 - Let me go ahead and submit that.
184:38 - Let's talk about HTTP put, right?
184:41 - This is the method that is most commonly associated with updating a resource.
184:44 - It is worth mentioning, however, though, that it can sometimes be used to create a new resource that does happen.
184:49 - I would argue it's it's a little less common.
184:51 - Sometimes you'll see an endpoint where you are able to give it data via a put request.
184:56 - And the action on the server is to create it if it doesn't exist or to update it if it does exist.
185:02 - That would typically be done with a put request.
185:05 - So the main difference between post and put is that post is almost always just creating.
185:10 - Whereas put is like update or create or just update.
185:16 - Another big difference is that put is meant to be idempotent or idempotent.
185:22 - I don't know how to pronounce that.
185:24 - But basically what it means is you should be able to send a put request multiple times without creating multiple resources.
185:32 - Effectively, the you send the put request the first time and it makes an update.
185:36 - If you send the identical put request, nothing happens.
185:38 - It's a no op or a no operation.
185:41 - So put requests should be safer, generally speaking, than post requests.
185:45 - And the reason they're able to be idempotent, again, generally speaking, is because you'll often be including the ID of the resource that you're updating.
185:54 - Whereas with a post request, you'll often be kind of relying on the server to generate new IDs.
186:00 - So that makes sense. If you make multiple post requests, you're generating new IDs for new resources.
186:05 - Whereas if you're making put requests, you're always using that same ID.
186:08 - So you just be updating fields you already updated.
186:11 - Let's jump down to the assignment to see what this actually looks like in code.
186:15 - OK, it says you will now use the knowledge you have gained thus far to update a fantasy quest character using a put request and retrieve that character using a get request.
186:24 - OK, so we're going to update the user and then get the user by its ID.
186:29 - So if you remember kind of before we were doing a get users request where we were kind of getting all the users, now we're going to be getting a specific user by its ID and updating it by its ID as well.
186:40 - OK, complete the update user and get user by ID functions.
186:43 - They should update and retrieve individual user resources respectively.
186:46 - They should also return a promise that resolves to the JSON response body of their respective fetch requests.
186:52 - OK, so we're returning JavaScript objects that we're able to parse from some JSON.
186:57 - We've included the full URL creation logic for you in both functions.
187:02 - We'll be talking more about URL building in the next chapter.
187:04 - OK, cool. So these are the URLs we'll be making the requests to.
187:11 - We need to just make the requests.
187:13 - So go ahead and do that.
187:15 - Const response equals await fetch, right?
187:19 - We've done this a couple times now.
187:21 - We're going to use that full URL.
187:23 - And this time our method and the options object will be put.
187:28 - We still need mode scores, headers.
187:35 - In this case, we will be sending a request body.
187:38 - So we do need to specify that content, content type header, the application slash JSON.
187:49 - And then we need a body.
187:53 - And that's going to be JSON dot stringify data.
187:58 - OK, so let's take a look at what all this means so far.
188:02 - So we're building a URL based on kind of the base URL and the ID of the resource we want to update.
188:12 - So hopefully that makes sense.
188:13 - We have the URL path and essentially the last section on the path is going to be the ID of the resource we want to update.
188:22 - And if you look down here in the get by ID, it's the same thing.
188:26 - We're essentially just adding that last section, which is the ID of the resource.
188:30 - And that's how the server knows which user we want to update.
188:34 - And then in the body of the request, we're just sending the new fields.
188:38 - So let's go look and expand this, let's go look at the code that actually uses this.
188:44 - So here's our base URL, right?
188:46 - It's kind of the server URL.
188:48 - And we're hitting that user's endpoint.
188:51 - So again, here it's going to be users and then kind of slash the ID again.
189:01 - OK, so down here, base URL user ID generated key.
189:06 - That's the get. Where is the update? Update has this user data in here.
189:12 - OK, cool. So what's happening is first we get the user and we log it out.
189:17 - Next, we're going to change some of the user data.
189:21 - So we're changing the character name.
189:23 - We're changing the level, the class, whether PVP was enabled, et cetera.
189:27 - And then we're calling the update user function and passing in that new data that's now been modified.
189:33 - And then we'll get the user again just to make sure that it worked.
189:36 - OK, so all that makes sense.
189:39 - What was I supposed to return again?
189:42 - Return a promise that resolves to the center spot.
189:44 - OK, so return resp.
189:49 - All right, cool.
189:53 - To get request, I'm going to do a sin here and copy.
189:58 - Look very similar. Let's swap out the things that are specific to the get request.
190:06 - So first of all, there is no body in a get request, right?
190:10 - We don't need to inform the server of anything.
190:13 - You swap that out to a get.
190:15 - And we also don't need these headers.
190:19 - Oh, we forgot our API key. That reminds me.
190:23 - Almost forgot the X API X dash API dash key.
190:33 - Close.
190:38 - And here we do not need a content type because we are not sending a body of data.
190:45 - Cool. Let's go ahead and run that code.
190:50 - So user UID character name.
190:54 - Third.
190:56 - Updating user with ID.
190:59 - F8 too, so that would be the Lithria.
191:02 - And then we got the user and now its name is Delby are warrior level seven.
191:08 - OK, cool.
191:10 - I want to pause here and just make sure you understand what's happening.
191:12 - So we we got the user with this ID.
191:17 - And we logged their kind of their metadata, right?
191:21 - Name, class, level, all that stuff.
191:25 - Then we updated the user.
191:27 - Again, that's happening in code.
191:30 - Right here.
191:34 - And then after the update, we get that same user, right?
191:37 - Notice the same ID.
191:39 - But all the fields have changed.
191:42 - Well, so that seems to have worked.
191:44 - I'm going to go ahead and submit it.
191:46 - So we've offhandedly mentioned the patch method a couple of times.
191:50 - And I want to just kind of clear up any confusion.
191:53 - So HTTP put is by far the most common HTTP method for updating resources.
191:59 - However, patch is another one that is sometimes used.
192:03 - And here's the difference.
192:05 - The intended difference for these two HTTP methods was that put would swap out entire resources or update entire resources.
192:15 - Whereas patch would just update partial sections of a resource.
192:20 - So here's an example with the users that we just updated.
192:23 - We essentially put an ID in the URL path to indicate which user we wanted to update.
192:30 - And then we sent an entire user object, right?
192:33 - And we said this is the new user object with all the properties update the whole thing.
192:38 - Right. So that's kind of the intended use case of a put a patch would have looked something like.
192:43 - Well, we still include that ID in the URL.
192:46 - But now instead of an entire user object, maybe we just have a name field.
192:50 - And we say we just want to swap out the name or we just want to update the name.
192:54 - Right. So that would be what patch was intended for.
192:57 - Now, in practice, you won't see patch used very often.
193:01 - Typically, servers just use put for all sorts of updates, whether it's partial or full.
193:08 - Whether or not that's a good idea.
193:11 - I don't know. I don't really have a strong opinion on it.
193:13 - I'm OK with, you know, back end developers doing it however they want.
193:17 - Like with everything, when you're making HTTP requests to a server,
193:22 - you really just at the end of the day need to read the documentation
193:25 - to figure out whether you should be sending a put or a patch.
193:28 - Right. By convention, it's probably going to be one of those.
193:31 - And more likely than not, it will be a put.
193:33 - So the question is blank is more popular than blank.
193:36 - And the answer is put is more popular than patch.
193:40 - OK. Talking about patch still.
193:42 - The question is, put typically updates blank while patch updates blank.
193:47 - And the answers are, you know, the swapped forms of partial resource and entire resource.
193:53 - The answer is that put typically updates entire resources while patch is intended for partial.
194:00 - Let's talk about HTTP delete.
194:02 - It is the most obvious of the HTTP methods.
194:06 - Right. It does what you think. It deletes resources.
194:09 - Let me expand this so we can see what the heck is going on here.
194:12 - So here's an example of an HTTP delete using the Fetch API.
194:16 - Basically, in this case, we have the URL of the API, right,
194:22 - which technically for us spans all the way out to here.
194:26 - This is the API that's specific to the Learn HTTP course.
194:30 - And the first section of the path is telling us what resource we are working with.
194:35 - So locations resources.
194:37 - And then this next section is what's the ID of the resource that we're working with.
194:42 - So it's going to be this big long ID here.
194:44 - And then when we make a fetch request or an HTTP request to that URL
194:52 - and use the delete method, we're telling the server, hey, I want to delete that exact resource.
194:58 - So jumping down to the assignment, it says users need to be able to delete their player accounts.
195:02 - Complete the delete user function. Send a delete request to the given full URL.
195:07 - You'll need to set the method, mode, and headers like before, set the X API key.
195:12 - Cool. This all makes sense. All of it.
195:16 - So const resp equals await fetch URL.
195:22 - So again, the ID of the, in this case, user that we're deleting is going into the path.
195:31 - Options object will be using the delete method.
195:38 - Specifying cores always because we're working within a browser.
195:43 - And then we're going to need some headers because we need to pass that API key, right?
195:50 - We need permission to delete thing.
195:59 - Cool. And that should be all we need, right?
196:01 - No body on most delete requests.
196:05 - The thing we're deleting is in the path.
196:08 - So the server already knows what we are deleting.
196:11 - OK, so let's look down at the test suite now and see what is expected to happen.
196:18 - So it looks like first all of the users will be retrieved and logged out to the console.
196:23 - And then we'll delete one user and then we'll get them all again.
196:26 - Cool. That makes sense.
196:30 - OK, logging user records.
196:32 - So we got a whole ton of user records and then we deleted the one with ID 0194.
196:38 - Where is that? 0194. OK, great. Convenient.
196:42 - That's the first one. Looks like it's my user record.
196:46 - OK, cool. So after it's deleted, it should no longer be here.
196:50 - And indeed, it looks like it is no longer there.
196:53 - And now the first one is the Allen record.
196:59 - Awesome. I'm going to go ahead and submit that.
197:02 - So we briefly talked about URL paths in the URIs chapter quite a few chapters ago.
197:08 - And now we're going to dive quite a bit deeper into URL paths and how they relate to kind of modern web servers.
197:17 - So if you remember, we talked about how traditional file servers will very often map the file path on the server to the URL path that's used to make kind of HTTP requests into that server.
197:32 - So, for example, if this were the URL test domain dot com slash root slash next on a traditional file server, then the path to that next file would be slash root slash next from wherever the file server is running.
197:47 - When we're working with web applications as opposed to just websites that might use traditional file servers, paths in our HTTP requests are often treated very differently or they're used for very different things.
198:02 - In fact, let's break that down now.
198:06 - So I'm going to grab this example endpoint.
198:11 - From the fantasy quest server that we've been interacting with so far. And let's just look at this big we have this big long path here and I just want to kind of explain how I've designed the boot dev API.
198:21 - So you can understand that again, it's not a traditional file server. So it's got a little bit more.
198:28 - It's just got a little bit more to it.
198:30 - So the first section of the URL obviously is just the server. It's our domain API dot boot dot dev.
198:37 - The first section of the path is the version of the API that's being interacted with.
198:44 - So if I ever made big breaking changes to this API, I could just increment this from v1 to v2.
198:51 - Right. And then everyone that's using the v1 endpoints would still be able to use them under the v1 path.
198:57 - And anyone who wants to upgrade to the new version to API could start using the v2 path.
199:01 - That's a pretty common convention when designing APIs.
199:06 - This next section is just essentially to separate kind of the APIs for my students to work with from the APIs that kind of power the website.
199:18 - So these this courses rest API, this is the rest APIs for my courses that students interact with directly.
199:25 - And it kind of separates the rest of the API that I'm using internally to power the website.
199:30 - The next section is, you know, which course are we interacting with? And obviously we're in the Learn HTTP course.
199:36 - So that's what that section means. And then the final section is just the resource we're working with.
199:42 - So here we're working with locations, but this might also be users or I don't know, weapons or something like that.
199:51 - So let's jump down to the assignment. Our goal is to fix the get resources function.
199:58 - It's supposed to take as input a path. Let me expand this so we can actually see.
200:09 - See the whole thing. It takes as input a path and makes a get request to kind of the base URL plus that path and then returns the kind of the JavaScript object that was retrieved from that path.
200:23 - So if we look here, basically we're making a get request to the locations endpoint, and then we'll be logging out all those locations.
200:30 - Then we'll do the same for the items and users endpoints.
200:35 - Again, the interesting thing about this function as to ones that we've built in the past is that it's a little more flexible.
200:40 - The user of the function can kind of pass in a dynamic path. We'll be making making that request.
200:48 - So it looks like all we need to do really is append the path to the URL because this variable full URL is currently what's being used in the fetch request.
201:00 - So if I just ran it in its current state, yeah, we're getting an error because we're just making a request to the root domain and that that part of the server is not designed to return any sort of JSON response.
201:12 - So let's make an update here and let's append the path and the path to the base URL.
201:23 - And that should work. That should be all we need to do. Take a look at the response data.
201:28 - Okay, cool. So now we get all of this location data, right?
201:32 - Heartfin Marsh, Iron Deep, Lakewood. And next, we get all this item data, healing potion, light leather, padded leather.
201:43 - And then finally, it looks like we're getting all the user data. Rundorf, Varus. Cool.
201:50 - Looks like it's all working. I'm going to go ahead and submit that code.
201:55 - So you've heard me toss around the term RESTful so far in this course, probably. But I haven't really explained what it is yet.
202:02 - REST is an acronym, stands for Representational State Transfer.
202:06 - But all it really is is a set of standards and conventions for building better APIs. At least that's the promise, right?
202:15 - So again, the whole goal of a RESTful API is to adhere to certain rules so that a client, right, us in this case, that's interacting with the API, kind of knows what to expect and has a really good developer experience working with that API.
202:32 - So what are the rules and conventions that RESTful servers adhere to that kind of separate them from other kinds of servers, other kinds of APIs?
202:42 - Well, the first is that one of the kind of core tenets of a RESTful API is that the two pieces, the client and the server, are kind of separate and agnostic, right?
202:54 - So the client can be written in any programming language. The server can be written in a different programming, right?
203:01 - There's kind of a minimalist set of things that the two need to agree on, things like, you know, what names are we going to use for resources? Are we going to use JSON or the encoding scheme?
203:13 - But everything else can be completely separate and distinct. Another key tenet of RESTful APIs is statelessness.
203:22 - So the server will have its state and the client will have its state. But in a good RESTful server, you won't have kind of persistent state that deals with the connection between the two.
203:33 - Let me give an example. So on the server, let's just say it's the FantasyQuest server and we have 100 registered players in the game.
203:43 - Well, then one player deletes their account. Now there's 99. So the server is inherently stateful, right? It has state, it's keeping track of state, and that's totally okay.
203:53 - There's really no way to get around that. What's interesting about REST is that the client and the server shouldn't be keeping track of, like, past interactions that they've had.
204:05 - So, for example, if the client says, give me the first 10 users, and it gets 10 user records, and then it makes the same requests, the same request, excuse me,
204:16 - the server shouldn't remember that it already gave that client 10 users and give them the next 10 users. It shouldn't do that.
204:24 - What should have to happen is the client specifically asks for the next 10 users. So now it's a separate request.
204:31 - And basically what that means is the server doesn't have to keep track of any state. It doesn't have to remember, hey, this client already asked me for some stuff.
204:39 - I'm going to change the way I respond. It's just a very clean way to write an API that kind of puts some responsibility on the client to ask for things in, like, new and different ways when it needs new and different information.
204:54 - Another key component of RESTful servers that really sets them apart from other types of servers is that the path is used to designate the resource that's being interacted with.
205:05 - So whenever you're working with a RESTful server, you should be able to hit, say, the slash locations endpoint, if there is a locations resource available on the server,
205:15 - and be able to create, read, update and delete that resource in a predictable way, right, just by by making requests to that path with the appropriate HTTP method.
205:26 - So the question is a true false statement. And it says RESTful servers communicate the state of resources. They don't expose access to arbitrary server commands.
205:37 - So this is true, right? REST is all about state transfer, just transferring the state from the client to the server, from the server to the client, right?
205:47 - Both are staying in sync with each other by making requests back and forth. Arbitrary commands are not allowed.
205:57 - Next question, does a backend server need to adhere to RESTful standards? The answers are no, but it's a common convention designed to create better API's. Yes, otherwise the requests will fail.
206:08 - Yes, if it doesn't, it's an insecure server. And no, it's generally a bad idea.
206:13 - Well, the answer is definitely one of the no answers, right? REST is just an option. A server or an API doesn't need to use it.
206:23 - So that narrows it down to it's generally a bad idea. And it's a common convention designed to create better API's. Well, it's not generally a bad idea.
206:30 - REST is very popular and it's popular for a reason. I wouldn't go so far as to say REST is better or REST should always be used.
206:39 - There are other popular conventions, things like GraphQL, for example, if you've ever heard of that, completely ignore all of the RESTful conventions and do things a completely different way.
206:49 - But I will say it's this top one. It's a common convention and it is designed to help create better API's.
206:58 - Next question, the blank part of a URL path typically denotes the resource.
207:05 - Scroll down to paths section. The answers are first, last or middle. And the answer is going to be last, right?
207:14 - Last section of the path typically denotes the name of the resource.
207:20 - So we already talked about query parameters a little bit in the chapter on URLs, right?
207:25 - You'll recognize this example where Q equals boot.dev is a query parameter, right?
207:32 - The query parameters in the URL come after the question mark and their key value pairs. So here the key is Q and the value is boot.dev.
207:41 - In RESTful servers, query parameters are very often used in get requests to kind of change the way that data is sent back to us from the server.
207:51 - Essentially, we're asking for the data in a slightly different format.
207:55 - So let's jump into the assignment to kind of see what that looks like.
207:59 - It says the backend team building FantasyQuest server has added support for query parameters. The server offers a sort parameter that can be optionally added by appending this sort equals field name to the end of the URL,
208:12 - where field name is the property of the resource we want to sort the kind of response records by.
208:20 - Our goal is to create a leaderboard and we want to sort user records by their level. So we want everyone on the leaderboard to be sorted by their level, highest level at the top.
208:31 - Update the get users functions full URL with a query parameter that will sort the user records by level.
208:37 - OK, so we've got this get users function and now we need to add some sorting.
208:41 - Let's go ahead and run the code in its current state just to see what we get.
208:48 - OK, so we got all these users and it looks like they're kind of out of order when you're looking at their level, right?
208:55 - We got 14 and one and six and eight.
208:58 - And yeah, if we look down here, it looks like get users is just being called and then we're iterating over all of the users.
209:05 - So we want this user's object to be sorted by level.
209:11 - So if this is the full URL, in fact, I want to just I just want to log it out really quick to see what it looks like.
209:24 - This is the full URL here.
209:26 - We just need to add sort the field name.
209:33 - The field name we're interested in is level.
209:39 - I'll remove my little debugging statement there.
209:41 - Let's run that again.
209:44 - Cool.
209:45 - Now everything looks like this.
209:47 - It's sorted.
209:48 - And this is this is important that the server is doing the sorting for us.
209:52 - We're just telling the server with this query parameter, hey, could you sort those before you give them back to me?
209:58 - Which is really important because sometimes we can sort on the client, but sometimes we can't write.
210:04 - Right. Imagine in the case of Google, right, when we ask for a response to a query and you know how it sometimes says three million responses,
210:13 - we'd never be able to sort that many responses on our machine.
210:17 - So we rely on the server to do it for us.
210:20 - Anyhow, this is looking good to me.
210:22 - So I'm going to go ahead and submit it.
210:25 - So you may be wondering, well, how am I supposed to know what resources are supported, what query parameters are supported,
210:31 - what HTTP methods are supported by a given server that I'm working with?
210:36 - Well, at the end of the day, there's there is no way to know unless you have some documentation.
210:41 - So when you go out to work with a specific API, right, let's say you're integrating with the Stripe API because you need to do some payments on a website.
210:50 - Right.
210:51 - Well, there's really no way to know what the Stripe API allows for unless you get access to the documentation that says,
210:57 - here are the URL paths with the associated resources.
211:01 - Here's the HTTP methods you're allowed to use.
211:03 - Here's the request and response bodies that you can expect.
211:06 - Right. All of that will exist within the documentation.
211:10 - If a server doesn't have support or a feature that you need, right, say the sorting feature that we just interacted with on the fantasy quest server,
211:19 - the only option is to either contact the maintainers of that server side code, right, the back end developers and ask them to implement it.
211:28 - Or if you are a back end or full stack developer yourself, obviously you can go change the code and update the documentation on your own.
211:35 - But it's important to understand that as a client, you don't get to make the rules.
211:39 - Right. At the end of the day, the server supports the functionality that it supports.
211:43 - And you're kind of stuck with that, again, unless you're able to lobby or make changes yourself.
211:49 - So the question is, when working with a back end server, you will need to access blank.
211:55 - The server code, the server's API documentation, the server's private keys.
212:01 - So this is assuming when we say working with a back end server, we are writing client side code that works with a back end server.
212:08 - We don't need the code. Right.
212:10 - We're just interacting with the back end through an API.
212:13 - We don't need the server's private keys, but we do need the server's API documentation if we're going to be able to interact with that API.
212:21 - The next question is, what should you do if the documentation isn't clear about how to use the API?
212:27 - Number one, contact the back end developers and ask for better docs or clarification.
212:32 - Number two, keep trying random requests until you find something that works.
212:35 - Or three, try to hack your way into the server.
212:38 - Well, the answer on this one is definitely the first. Right.
212:41 - Just contact the back end developers and ask for clarification.
212:44 - As I've mentioned earlier, it's possible to have multiple query parameters.
212:48 - So a couple of exercises ago, we sorted users by their level with one query parameter. Right.
212:55 - But we could also add another key value pair that does something entirely different.
212:59 - And the syntax for that is the question mark separates the query parameters, right, plural, from the rest of the URL.
213:06 - But ampersands separate individual key value pairs from one another.
213:12 - So to practice with multiple query parameters, let's jump down into the assignment.
213:16 - It says our game designer wants us to build a treasure chest.
213:20 - We don't want to award players with too many items, though.
213:22 - So we'll be adding a limit equals X query parameter where X is the number of records we want to limit to.
213:29 - And then we'll also sort the items using a sort query parameter.
213:34 - So the assignment is to complete the loot treasure function.
213:37 - It should add two query parameters to the URL passed to get items.
213:41 - OK, so this is the base URL.
213:44 - And we're using the get items function.
213:47 - We just need to alter this URL to add those query parameters.
213:52 - So sort and limit will be sorting by the quality property and set the limit based on the rarity passed into loot treasure.
213:59 - Oh, interesting. OK.
214:00 - So rarity is a string, common, rare or legendary.
214:07 - And then sort is just based on the property. OK.
214:11 - So let's jump into this. It should be something like this.
214:14 - Let limit. Let's default to one. No, let's default to zero.
214:23 - We default to default to null. I guess that makes sense.
214:26 - And we'll do if rarity equals common.
214:36 - Getting my parentheses.
214:40 - Then limit will be one. Else.
214:51 - Rarity is rare.
214:54 - Then the limit will be three.
214:56 - If the rarity is legendary.
215:00 - Then we'll set the limit equal to five.
215:04 - OK. And just to go above and beyond here, what I'm going to say is.
215:11 - If. Limit. Null.
215:17 - I'm going to throw a little air.
215:21 - Bad rarity provided.
215:26 - I'll just prevent kind of weirdness from happening.
215:29 - We're expecting the rarity to be one of these three.
215:34 - OK, so now we've got our limit. It's a number.
215:36 - And the sort is always going to be based on quality. OK, cool.
215:40 - So we should be able to just add these now.
215:42 - So we'll start our query parameters with quality.
215:46 - Equals. Oh, excuse me. Sort equals quality.
215:49 - And then another query parameter.
215:53 - Will be limits.
215:55 - Equals.
215:57 - Interpolate that limit parameter in.
216:02 - We run that code.
216:07 - So looting common treasure chest acquired a light leather.
216:11 - The name of the item with quality score one being a rare treasure chest.
216:16 - Three items here, they're sorted, you'll notice.
216:20 - Legendary treasure chest, five items. So this looks right to me, right?
216:25 - We're getting the right number and they are sorted.
216:28 - So I'm going to go ahead and submit that code.
216:33 - So you may have been wondering, isn't this an HTTP course?
216:36 - Why is every request in the course kind of prefixed with HTTPS instead of HTTP?
216:43 - Well, the reason is HTTPS is essentially the exact same thing as HTTP
216:47 - with one added component, and that is security.
216:51 - The most important security feature of HTTPS is encryption.
216:55 - It keeps the information that we are sending in our request
216:59 - and the information coming back in the response secure and encrypted
217:03 - so that only us as the sender and the server as the receiver
217:07 - are able to decrypt and process that information.
217:10 - When we send HTTP requests over the internet,
217:13 - they don't go directly from our computer to the server that we are communicating with.
217:18 - There are intermediaries, for example, your internet service provider, right?
217:23 - Or if you're working on public Wi-Fi, like within a coffee shop,
217:26 - then whoever owns that Wi-Fi or that router would be able to
217:30 - intercept your network traffic and process it.
217:34 - So if you're using plain HTTP, the data that you're transmitting is never safe
217:40 - in the process of being transmitted.
217:42 - Anyone in the middle can look at everything you're sending.
217:46 - Take the example of an e-commerce website.
217:48 - If you're entering in a credit card in your browser and sending it off to some server
217:52 - through a normal HTTP request,
217:55 - every intermediary now has access to your credit card information.
218:00 - That's why good e-commerce sites use HTTPS and should never use anything less secure.
218:06 - So let's hop down to the assignment.
218:09 - The assignment says the fantasy quest server only allows encrypted requests.
218:13 - This is very common.
218:15 - The entire boot dev API is all encrypted with HTTPS.
218:18 - We don't allow anything over HTTP.
218:21 - The assignment says there's a bug in the code that's causing the request to be blocked.
218:24 - Fix the bug.
218:25 - So if we send the request as it is, we get type error failed to fetch.
218:30 - And that's just because the server's rejecting this plain HTTP connection.
218:35 - So we have to send our request over HTTPS.
218:41 - Awesome. I'm going to go ahead and submit that.
218:44 - Let's talk about HTTPS and specifically its encryption.
218:54 - So how it keeps our data safe on the Internet.
218:59 - Start with a little diagram, one that you're probably very familiar with.
219:03 - So over here, we'll draw the client.
219:07 - And over here, the server.
219:12 - The problem that HTTPS solves is when we send an HTTP request across the Internet,
219:18 - there are potentially intermediaries here in the middle.
219:22 - Draw them in.
219:26 - For example, maybe this is the public Wi-Fi that you're using.
219:30 - It's the controller of that router and see your Internet traffic.
219:35 - Another one might be your ISP.
219:39 - Another one might be the cloud provider of the server.
219:44 - There's potentially many different entities that your Internet traffic is passing through on the way from your computer to the server.
219:55 - So in order to stop these different entities from being able to see all of the information that we are communicating privately with the server,
220:02 - we want to encrypt it. What that means is we need to encrypt.
220:07 - We need to encrypt over here on the client before sending the data.
220:11 - And then we want the server to be able to decrypt the data once it receives that encrypted packet of information.
220:20 - So how does that work? Well, we're not going to go into the math behind the cryptography.
220:25 - If you're curious about that, you can check out my Learn Cryptography course on boot dev.
220:30 - But from a very high level, there are essentially two keys.
220:36 - Two keys. Actually, I'm going to do them in different colors.
220:41 - This blue one is the public key. Public.
220:45 - And we'll do the private key. Red.
220:51 - Public and private.
220:55 - Now, the public key is used for encrypting.
221:00 - It's used for encrypting information.
221:04 - The private key is used for decrypting.
221:11 - It's important to understand that the public key can encrypt information, but it cannot decrypt it.
221:17 - That's solely the responsibility of the private key.
221:20 - The private key stays on the server, while the public key can actually be given to the client.
221:29 - Now, this would be good enough, right? Using the public key, the client can encrypt some information and send it to the server.
221:36 - Unfortunately, there's another direction that we forgot about.
221:40 - We also need to be able to send private responses from the server back to the client.
221:46 - HTTP is a request response flow.
221:50 - So actually, instead of using this public key to encrypt and send the request,
221:58 - this asymmetric cryptography, which is what public-private key cryptography is called, is actually used to negotiate a third key.
222:10 - So we actually generate this third key.
222:15 - This is a symmetric encryption key.
222:24 - What this key does is it allows both parties using this single key to encrypt and decrypt messages.
222:33 - So once both the client and the server have this key, they can share messages back and forth and encrypt and decrypt both of them.
222:42 - This public-private key section is only used so that the client can communicate to the server privately and figure out what this key is going to be.
222:53 - This key is effectively generated on a per-request basis.
222:58 - Let's review the order in which all of this happens just to make sure it's crystal clear.
223:04 - The very first thing that happens is that the server generates public and private key.
223:15 - This only needs to happen once for the server.
223:18 - It's done when the server is very first configured for HTTPS.
223:22 - If the server doesn't have a public-private key pair, it's not going to be HTTPS enabled.
223:27 - It's not ready for HTTPS traffic.
223:30 - So this only needs to happen once per server.
223:35 - Then when an individual request is going to start, the client contacts the server and says, hey, I want to send you a secure request.
223:52 - At that point, the server sends the public key to the client.
224:03 - So this blue public key is getting sent over to the client.
224:08 - Next, the client encrypts...
224:13 - Well, actually, let's write it a slightly different way.
224:16 - Let's say the client and the server negotiate a symmetric key.
224:25 - So from a very high level, the way that this works is the client has the public key.
224:31 - So it's able to send encrypted messages to the server.
224:34 - But remember, the server cannot yet send encrypted messages back to the client.
224:39 - So the client generates a secret token, sends it to the server, and then both parties using that secret token are able to generate the same symmetric key.
224:51 - So again, public key comes from server to client.
224:55 - Client generates a secret token.
224:58 - The client sends that secret token encrypted with the public key to the server.
225:04 - The server decrypts it using the private key.
225:06 - And then both parties are able to generate the same symmetric key so that they can both use that key for encryption and decryption.
225:16 - So once that symmetric key has been negotiated, now the client sends an encrypted HTTP request.
225:33 - Then the server is able to decrypt the request.
225:45 - And the server sends an encrypted response.
225:52 - And finally, client is able to decrypt the response.
226:00 - And that's the whole lifecycle.
226:02 - So this exercise talks about all of that HTTPS stuff that we just went over on the blackboard.
226:08 - I will point out really quick before we answer this question that SSL and TLS, they're the kind of the security pieces of HTTPS.
226:17 - So you could think of HTTPS as SSL or TLS tacked on to HTTP in order to add security features.
226:26 - So the question is, HTTPS is essentially the same as HTTP with some additional security.
226:31 - And the answers are true or false.
226:33 - This one's going to be true.
226:35 - Basically the same as HTTP, we've just added some security.
226:38 - I want to cover two more key points when it comes to HTTPS.
226:42 - So we've talked about how HTTPS encrypts what it is that we are saying when we communicate online.
226:49 - So that people snooping in on our internet traffic can't read the content of our messages.
226:54 - And it does that very well.
226:56 - One thing that it does not do is protect your identity or the identity of who you are communicating with.
227:03 - So if someone is snooping in on your network traffic, even though you're using HTTPS, they will be able to see the website that you're browsing on.
227:11 - Right.
227:12 - So if you're on boot dev, for example, and you're using public Wi-Fi, whoever controls that public Wi-Fi will still be able to see that you're browsing boot dev.
227:21 - That being said, HTTPS does ensure that you're talking to who you think you're talking to.
227:28 - So if you're connected to boot dev over an HTTPS connection, then you can be sure that you're actually talking to boot dev and not some malicious hacker that's just pretending to be boot dev.
227:42 - That's enabled through digital signature technology, which is, again, something you can look up.
227:47 - It's kind of out of the scope of the course.
227:49 - It's just important to know that HTTPS does give you that assurity if you're using it.
227:56 - So the question is, HTTPS ensures that you know who you are communicating with.
228:01 - And as we just discussed, the answer is true.
228:05 - Next question is also a true false statement.
228:07 - It says HTTPS protects your identity online.
228:11 - And as we just talked about, it does encrypt our messages, but it doesn't really protect who we're communicating with or who we are.
228:20 - So the answer is going to be false on this one.
228:24 - Congratulations, we finished all of the coding exercises and challenges in the course.
228:30 - Now we're going to be building a project from scratch.
228:33 - This project is going to be a command line application that runs on our local machines using Node.js.
228:39 - The purpose of the application is to crawl a website and produce a report of the internal linking structure of the website.
228:47 - Basically, which pages link to which other pages on the site.
228:51 - This is a tool that would traditionally be used by kind of web marketers or SEO search engine optimization experts.
228:59 - So I'm here on my personal GitHub account.
229:02 - And I usually start by just creating a new repository for whatever project I'm starting.
229:07 - So here I'm going to go ahead and call it web crawler web crawler HTTP.
229:18 - Project for the learn HTTP course.
229:24 - I'm going to go ahead and make it private.
229:26 - You can keep it public if you want, whatever you want.
229:29 - I'm going to automatically initialize it with a read me dot MD file.
229:33 - And that should be all I need to go ahead and create that repo.
229:38 - I am working on Mac OS, but everything we do should work just fine on Linux and Windows.
229:44 - You may just need to install things slightly differently.
229:46 - I'm also working in VS code, my editor of choice.
229:49 - But again, whatever editor you prefer will be totally fine.
229:53 - I'm going to go ahead and clone down that repo that we just created on GitHub.
229:58 - Now that we've cloned the project down locally, I'm going to go ahead and install NVM or the node version.
230:06 - If you just Google NVM, you should be able to find the GitHub page where you can download the or where you can find the installation script that I'm about to use.
230:15 - But I'll also include a link below in the description GitHub page.
230:21 - So I'm going to run that install scripts.
230:24 - And I already have it installed, so it doesn't even do anything.
230:27 - But just so you know, that's what you would run to install NVM.
230:31 - Once it's installed, we'll add a dot NVM RC file to the root of our repository.
230:37 - And inside, we're going to add the version of node that we want to be using, which in this case is going to be 18.7.0.
230:50 - You can use a newer node version than this, probably, but I wouldn't I wouldn't recommend going much older than 18.
230:59 - Once we have that NVM RC file created, we can do a NVM install.
231:07 - And that's going to download node version 18.7.0 if we don't yet have it.
231:14 - And then once we have it installed, we can do NVM use, and that will switch the current version of node that we're using in our shell.
231:23 - And then just to check, we can do node dash dash version to make sure that we're on the right version of node.
231:28 - Next, let's run a little program just to make sure everything's working properly.
231:32 - I'm going to create a main.js file, and we'll just have it log Hello World to the console.
231:40 - And then from the command line, we should be able to just run node main.js.
231:45 - So this starts the node interpreter and passes in main.js as the entry point.
231:50 - And it logs Hello World. So we're good to go.
231:53 - So running a node kind of manually from the command line, like node and then the name of a file, it works just fine.
232:00 - But because we're going to be installing a test suite and packages, we're actually going to use NPM to manage all of that kind of environment and ecosystem.
232:10 - So in order to get that going, we just run NPM in it.
232:16 - And it's going to take us through kind of a little interactive setup. And I'm just going to press enter a bunch of times to use all the defaults.
232:24 - And it will create a little package JSON file.
232:29 - And with a bunch of kind of default values, the only thing we need to change at this point is we need to add a new script.
232:36 - And I'll just call it start that runs node main.js for us.
232:42 - So now instead of manually typing node main.js into the command line, we will type NPM start.
232:50 - And that's just going to call this little script here.
232:54 - Again, the purpose of this is now that we're using a package JSON file, when we pull in dependencies and run our code through NPM, the dependencies will be available to our code.
233:09 - Similarly, we'll be using NPM to run our tests. So it's just nice and convenient to have everything in the dark command.
233:20 - Cool. And it worked, right? It logs out current version of node and then runs the program.
233:25 - Next, let's go ahead and install Jest. So we're going to be doing some test driven development as we build out this project.
233:32 - And in order to do so we need a test suite. So we're going to install Jest a fairly popular testing runtime.
233:39 - And we can do that by typing NPM, install dash dash save dash dev Jest.
233:47 - And that should update our package dot JSON file with a new dev dependency,
233:53 - as well as install the code in the node modules folder and create a package lock dot JSON file, which just keeps track of all the dependencies in our project.
234:03 - So there it is. That looks good. Like I said, the package lock dot JSON is an auto generated thing.
234:09 - You can just leave it same with node modules. But we do need to ignore.
234:15 - So let me create a new file called git dot git ignore. We do need to ignore this node module folders or this node modules folder.
234:26 - And the reason for that is the node modules folder contains all of the dependencies for our project.
234:34 - And it's actually quite a lot. Jest has a lot of dependencies.
234:39 - And so we don't want to commit that code to our repository. We just want the code that's kind of unique to our application.
234:47 - So we'll keep track of our dependencies in the package dot JSON, which is committed to our source control.
234:53 - But we are not going to commit the node modules any time we pull down this repository fresh.
234:59 - It won't have the node modules. So a developer will just need to type npm install in order to install all the dependencies listed here in the package dot JSON.
235:10 - And then they'll get their own copy of that node modules folder.
235:13 - So now that we have just added as a dependency, let's add a script that actually runs it.
235:18 - If we were to run npm, let me clear this out. If we were to run npm test right now, all we'd get is this error no test specified.
235:27 - That's because here in the test script, all we're doing is echoing error no test specified.
235:33 - So let's swap this out for Jest. And now if we run npm test, we get something a little different.
235:44 - It says no tests found exiting with code one. OK, so we're properly calling Jest now. We just need to add some tests.
235:51 - Before we get to adding some tests, let's go ahead and commit what we have to Git so we don't lose it.
235:58 - So I'm going to do a Git add dot. This adds everything in the working directory to kind of the Git staging area, ignoring everything that's ignored.
236:08 - So you can see node modules is in gray. That's because we added it to the Git ignore there.
236:13 - Then we'll do a commit where we say added Jest and then see and created a main.js file.
236:26 - And then we can push that up to Git.
236:30 - The first function that we write tests for is going to be called normalize URLs.
236:34 - And I'm going to create a file called crawl.js to write that function in.
236:40 - So usually when you're doing test driven development, there's kind of three steps.
236:45 - The first step is to stub out the function that you want to test. The second step is to write the tests for the function.
236:52 - And then the third step is to go back and actually implement kind of the meat of the function.
236:57 - So first, let's stub out the functions. It'll be function normalize URL.
237:04 - And as input, it's going to take a URL string, so a string representing a URL, and it's going to return a string.
237:10 - For now, I'll just return a URL string.
237:15 - Again, this is kind of a stub function. It doesn't really do anything interesting yet, but it allows us to see, you know, what's going in and what's coming out.
237:24 - Next, let's go write the test file. So it's going to be crawl dot test dot JS.
237:31 - And the way Jest works is that it just automatically looks for files in your package or in your folder project directory that end in dot test dot JS.
237:43 - So it is important that we name it with that suffix.
237:49 - Let's hop back over to the crawl dot JS file, and we'll run where we'll add a module dot exports.
237:58 - And this will make the normalize URL function available to other JavaScript files that want to import it.
238:06 - So now we can hop back over to crawl dot test dot JS, and we can import that function and be const normalize URL equals require and then the path to that file, which is crawl dot JS.
238:21 - That imports that. And then we also need to import two more functions, this time from Jest.
238:27 - They'll be the test and the expect functions.
238:32 - And so we can require.
238:36 - Jest.
238:39 - I think it's at Jest.
238:42 - Cool.
238:43 - Let's write our first test. So the way testing works with Jest is there's kind of this top level test function and it takes as its first input the name of the test.
238:52 - So I'm going to call it for now, just normalize URL.
238:59 - That is the name of our function, right? I'm not crazy. Okay. Normalize URL.
239:03 - The second input is a function.
239:05 - Let's go ahead and write an empty function.
239:09 - Within the function, we can use this expect function to do a test.
239:15 - Let's start by specifying what's the input to the normalize normalize URL function.
239:22 - For now, I'm going to just call it input and we'll just use an empty string.
239:29 - Next, I'm going to run the function and get some output. So const output equals.
239:38 - Normalize URL and give it the input.
239:41 - And actually, I'm going to change the name of output to expected.
239:46 - Just to be a little bit more clear. Sorry, not expected. I'm crazy to actual.
239:50 - This is the actual output of our normalize URL function.
239:55 - Next, I'm going to specify the expected output. So expected. What do I expect to come out of the function?
240:01 - And again, for now, I'm just going to use an empty string.
240:06 - Finally, we can use the expect function. So expect.
240:13 - Give it the actual the actual results of the normalize URL function.
240:21 - And then use the dot to equal method and give it the expected.
240:28 - So this line basically says, I'm expecting the actual output of normalize URL to equal the expected output that I've specified.
240:39 - If they do equal each other, just will log it as a past test, right? Test is good.
240:45 - If they don't equal each other, then just is going to say the test failed.
240:49 - Let's go ahead and run that and see what that looks like.
240:54 - So again, because we have specified here as a script, I can just run NPM test.
241:02 - And the test passed, right, which actually makes sense because we specify the input as an empty string and the expected as an empty string.
241:09 - And right now all our function is doing is returning the string that was given.
241:13 - So let's see if we can get it to break really quickly.
241:17 - Something else.
241:21 - I'm changing the expected value and running NPM test again.
241:25 - And now we get a failed test, which makes sense, right?
241:29 - We expected the string something else and we received empty string.
241:34 - So now let's talk about what the normalize URL function is actually supposed to accomplish.
241:39 - Sometimes on the Internet, there are different URLs that all points to effectively the same page.
241:46 - Let me give you an example.
241:48 - So something like HTTPS colon slash slash boot dot dev.
241:53 - This this string.
241:55 - It points to the boot to have home page.
241:58 - Effectively, this URL also points to the boot to have home page.
242:05 - They're really the same page, right?
242:07 - One has HTTPS specified, one has HTTP, but it's really the same web page, right?
242:13 - Similarly, if we capitalize the B again, it's a different string, same page.
242:18 - So what we are trying to do with the normalize URL function is find.
242:23 - Well, it's to take a URL as input and normalize it so that the output will be the same or all other inputs that are the same page.
242:32 - Right. So basically, if all these strings are put into the normalize URL function, we want the same thing to come out the other end.
242:40 - So, for example, this might normalize to boot dot dev.
242:46 - This also normalizes to dev and this normalizes to boot dot dev.
242:53 - Right. We want to normalize different strings to the same strings if they represent the same web page.
243:00 - So let's erase all of that.
243:03 - And let's build an actual test suite.
243:06 - So given the input, let's say HTTPS colon slash slash blog dot boot dot dev.
243:11 - I want to do a couple of things.
243:13 - The first thing I want to do is strip the protocol.
243:17 - OK, I don't care about the protocol.
243:19 - In fact, let me add a path here.
243:21 - Let's say slash.
243:25 - Let's just call it path.
243:27 - This part of the URL, the domain and the path effectively make up the page.
243:37 - Right. Query parameters, protocols, all that other crap.
243:41 - We don't really care about when it comes to what page does this URL represent.
243:47 - So given this input, I expect the output to just be blog dot boot dot dev slash path.
243:58 - Protocol is gone.
244:00 - I'm going to call this test normalize URL strip protocol.
244:06 - OK. And now if I were to run NPM test, I fail.
244:10 - Right. Because I have not gone and fixed my code up to actually do that.
244:14 - So let's go ahead and do that now. Top over to crawl dot JS.
244:19 - The way I'm going to implement this function is to use the built in URL constructor.
244:25 - We actually used it in the course.
244:27 - So I'll do const URL object equals new URL and pass it the URL string.
244:36 - So this will give me a URL object that has a few properties on it that are interesting.
244:41 - The first is the host name.
244:45 - So let's do return a new string template, template literal.
244:52 - And the first part of the string will be URL object dot host name.
244:58 - And the second part will be URL object path name.
245:05 - So we are parsing the URL string into a URL object and then saying,
245:09 - all I care about is the host name and the path name.
245:12 - And I'm just going to kind of shove them together and return all that as a string.
245:17 - Let's see if that works.
245:21 - We're good to go.
245:22 - The next thing I want to make sure that the normalize URL function handles is trailing slashes.
245:28 - So let me add a new test suite here for a new test to my test suite.
245:35 - And what I'm going to do is add a trailing slash on the URL slash right there.
245:41 - It's pretty common on the Internet to have URLs that end in slashes as well as URLs that don't.
245:48 - But generally speaking, we expect a page with or without the slash to both kind of go to the same place, right?
245:57 - Go to the same Web page.
245:59 - So what we're going to do is just trim trailing slashes in the normalize URL function.
246:06 - So if we're given a trailing slash, we'll just take it off.
246:09 - That way, again, everything comes out to kind of one string that identifies a given Web page.
246:17 - OK, so if we just run our test now with this new test, we're failing, right?
246:21 - Because we don't have any logic that strips that last slash off.
246:26 - So let's go ahead and add that.
246:29 - The first thing we can do is write a little test.
246:32 - We can say if URL object.
246:36 - Oh, excuse me, URL object.
246:39 - So let's grab the.
246:42 - We'll call this the post path.
246:46 - And we can say if post path dot length is greater than zero.
246:53 - So if there's at least something there and.
246:59 - Post path dot slice.
247:03 - Oh, negative one.
247:05 - So this this dot slice method on a JavaScript string, this will return just the last character of of the string.
247:16 - So given that there's at least one character, we're just going to go grab the last character and check.
247:22 - Does it equal a slash?
247:25 - If the string has a slash, then we want to return everything up to the slash.
247:32 - So we'll do return.
247:35 - Post path dot slice.
247:38 - And this returns a subset of the host path string from zero to the last index.
247:45 - So this is everything except the last character.
247:49 - Right. Slice at negative one is just the last character slice from zero to negative one is everything except the last character.
247:58 - Otherwise, if it doesn't end in a slash, we can just return this path.
248:05 - Cool.
248:06 - That seems right. Let's let's give that a run.
248:11 - Cool.
248:12 - We got it.
248:13 - So now that we're stripping trailing slashes and we're stripping the protocol, let's add just a couple more tests.
248:20 - Make sure that we are doing a few more things that are important in terms of normalizing these URLs.
248:25 - The first is capitals.
248:28 - Capitals.
248:30 - Oh, also, this is this is bad.
248:33 - We should rename this test.
248:34 - So this first test, sorry, strip protocol is good on this first one, because that's what we're doing.
248:39 - This one, we should say strip trailing slash.
248:44 - And this one, let's do capitals.
248:45 - So blog.boot.dev slash path.
248:50 - Remove that trailing slash.
248:52 - This this should not remain capitalized.
248:57 - Capitals in a URL don't matter.
249:00 - They should be case insensitive.
249:02 - So we expect to normalize it down to lowercase.
249:07 - Go ahead and run that and make sure it works.
249:10 - It does already work, which is awesome.
249:12 - I mean, you'll notice that we don't really have any logic that deals with lower casing a string.
249:17 - But the URL constructor is actually doing it for us because it knows that URLs are case insensitive.
249:23 - That's great.
249:24 - We made sure that that works.
249:26 - Let's add one more.
249:29 - Let's just make sure that another another protocol is also stripped properly.
249:33 - We'll just do the HTTP protocol and omit the S. Make sure that that works as well.
249:39 - Again, I'd expect that same output.
249:41 - I'm going to remove those capitals, though, just so we don't get confused what this test is about and change this name to be a strip HTTP.
249:51 - Cool.
249:54 - Yep, still good to go.
249:55 - Now that we've got that function tested and working, I'm going to go ahead and commit that source control as well.
250:03 - Well, normalize URLs, normalize URL.
250:07 - Sorry, it's singular.
250:08 - And push that up.
250:13 - Next, we're going to be adding another function called get URLs from HTML.
250:18 - And in order to write that function, we're going to need a new dependency.
250:21 - That dependency is JS DOM.
250:24 - So the interesting thing about this dependency, NPM install JS DOM, is that it's not a dev dependencies.
250:31 - You notice we're not doing the dash dash save dev when we install it.
250:36 - Maybe go ahead and run that.
250:38 - And it should add it to our package JSON.
250:40 - This time, again, not as a dev dependency, but as a normal dependency.
250:45 - And the differentiation here is that dev dependencies are just intended to be used by the developer.
250:50 - Whereas dependencies are intended to be used by the application when it's running in production.
250:56 - So we're actually going to be using JS DOM in our production code, crawl.js, rather than just our test suite.
251:05 - Which is where Jest is used.
251:07 - So let's stub out the get URLs from HTML function.
251:10 - We'll just add it right here above.
251:13 - Above normalize URL to get URLs from ML.
251:18 - I'm going to take two inputs.
251:20 - The first will be an HTML body.
251:23 - Just a string representing some HTML.
251:26 - And the second input will be the base URL.
251:30 - Again, another string.
251:32 - The base URL represents the URL of the website that we are crawling.
251:37 - So HTML body, HTML of the page, base URL, the URL of the website that we are in the process of crawling.
251:45 - And then it just returns a string.
251:48 - Excuse me, it doesn't return a string.
251:50 - It returns an array of strings representing URLs.
251:54 - So we'll do URLs equals empty array.
251:57 - And then for now, we'll just return that empty array.
251:59 - Again, we're just stubbing out the function so that we can go write some tests for it.
252:04 - Let's not forget to export the get URLs from HTML function down in the module that exports.
252:09 - And then over here in crawl.test.js, we can import it.
252:14 - Cool.
252:16 - And now let's add some more tests.
252:20 - The first test for this function, let's name it properly.
252:25 - Call it get URLs from HTML.
252:28 - Let's just stub everything out.
252:30 - So the first input, because there's actually two inputs to this function, right, is some HTML.
252:37 - So let's write some very simple HTML.
252:42 - Have an opening HTML tag.
252:45 - Do an open body tag.
252:48 - Add a link.
252:51 - We'll have the link just go to the blog.
253:01 - The anchor text of the link, we can just do boot.blog.
253:13 - Okay.
253:14 - Little snippet of HTML.
253:15 - Again, this is just a string.
253:16 - In JavaScript, when you use backticks, it allows you to do kind of a multi-line string.
253:21 - So this will be the first input.
253:23 - We'll just call it input HTML body.
253:27 - Then we need one more input, right, because our function takes two arguments.
253:31 - So we'll do const input base URL.
253:36 - And in this case, the base URL will just be that blog.boot.
253:44 - Cool.
253:45 - Now we need to call the function that we're trying to test, which is get URLs from HTML,
253:49 - and pass it in its inputs.
253:52 - So input HTML body and input base URL.
254:00 - Now we need to specify our expected value.
254:03 - So the purpose of the get URLs from HTML function is to grab all of the URLs or links embedded
254:11 - within an HTML page.
254:12 - So when we visit a web page, and there's tons of clickable links, we want to grab all of
254:17 - those clickable links out of the document and kind of return them in an array of strings.
254:24 - So taking a look at this HTML document, there's one link in here, right, and it's this link
254:31 - to blog.boot.dev.
254:32 - So we want this link to come back here in the in the return array.
254:43 - Okay.
254:45 - Now if you're not familiar with HTML, that's okay.
254:48 - It really isn't too complex.
254:50 - Let me explain what this is.
254:53 - So HTML is just a markup language that the browser uses to structure a web page.
254:59 - And this top level HTML tag is just saying, hey, this is some HTML.
255:03 - That's not too interesting.
255:04 - The body tag essentially says, hey, this is what you're going to see on the screen.
255:09 - And then a tags are links, where anything within the href property, right, in this case,
255:16 - log.boot.dev is is what we're going to link to.
255:20 - So when you click the link, that's where you're going to go.
255:22 - And then the text within the a tag is the kind of word you see that's clickable.
255:30 - So this would render to boot.dev blog as you know, that underlined clickable text.
255:35 - And if you click it, it would take you to the boot dev blog.
255:39 - So now that our test is written, let's go ahead and run the test.
255:43 - And I would expect it to fail, right?
255:46 - Yep, it's failing, because we're just getting back that empty array.
255:50 - And we are saying we expect an array with this with this value inside it.
255:55 - Cool.
255:56 - Let's go actually write the code so that we can pass the test.
256:00 - We'll be using the JS DOM package, right, the one that we already installed.
256:04 - And so I'll import it over here, JS DOM.
256:09 - The way I know how to structure the syntax is because I went and read the JS DOM docs,
256:13 - which again, I'll link to in the description below.
256:16 - But that's what I'll be consulting on the side over here.
256:19 - The JS DOM equals and then we'll just require.
256:23 - Why are the JS DOM package?
256:29 - So the way JS DOM works is it basically gives us a way in node to access DOM APIs or document object model APIs.
256:39 - So what that looks like is we create this little DOM object by calling new JS DOM and passing it some HTML.
256:50 - Give it this HTML body.
256:52 - So it's taking that HTML as a string and it's creating a document object model,
256:57 - basically an in-memory object that represents that HTML tree structure.
257:04 - So now we can just use DOM.window.document.get.
257:12 - No, no, query selector all.
257:15 - That's the one we want.
257:17 - And we pass in the name of the tag that we are interested in.
257:21 - So this will return some link elements, elements.
257:28 - OK, so this this syntax window document query selector all.
257:32 - This is the kind of syntax you would use in the browser to work with the document object model or the DOM.
257:38 - Again, this package JS DOM is allowing us to do that in node so we can write a command line script that interacts with with the DOM and crawls web pages.
257:48 - The reason we're passing in a here is because what we want is a list of all the a tags in the HTML.
257:55 - So this gives us a nice little array.
257:58 - So now let's loop over loop over that array so we can do const link element of link elements.
258:06 - And for now, let's just log these out to see what they look like.
258:10 - So a link element is an object that has a property and the property we're interested in is the href property.
258:18 - And that corresponds to the link text.
258:22 - So href, this should just be a string.
258:26 - Let's just log those out and see if we're on the right track by rerunning our tests.
258:35 - They failed again, which we expected.
258:37 - That's fine.
258:38 - Up here at the top, it does any console logs from the code itself.
258:43 - And yeah, it looks like it's logging out that that link text is exactly what we want.
258:50 - Now that we know that's working, let's just go ahead and append that to URLs.
258:54 - So URLs dot push that link text.
259:00 - Cool.
259:01 - So we should be iterating through all of the links in the HTML and appending them to that array and returning them.
259:07 - Let's see if that fixed our tests.
259:12 - Awesome.
259:13 - We're all green, all passing.
259:15 - Let's add another test case.
259:18 - As it turns out, we don't just want to pull out absolute URLs, but we also want to pull out relative URLs.
259:25 - So let's rename this because in this test, we are testing absolute URLs.
259:30 - And let's make a new test.
259:37 - Hard to work with VS code so zoomed in.
259:41 - And we'll make a new test where we test relative URLs.
259:45 - OK, so a relative URL is a URL that does not include the protocol and the domain.
259:52 - It just includes a path.
259:54 - So in this case, let's just call it path.
259:58 - And just to show you what I mean, I'll update this test to contain a path.
260:07 - It'll look like this.
260:10 - Now, down here, this relative URL is the same as this absolute URL up here, because the way the browser works is it looks at what domain you are on when you are viewing a page and all of the links in the page.
260:24 - If they are relative, which means they start with a slash, it will assume that they are kind of attached to the same domain.
260:33 - So if this is a relative URL slash path, and this is the base URL, then the actual URL when you click the link would be the same.
260:43 - It would be blog.boot.dev slash path.
260:48 - We don't want to bring this out.
260:52 - We don't want to extract it from the get URLs from HTML function as a relative URL.
260:56 - Instead, we want to kind of combine it into a full absolute URL so we can actually make requests to it later.
261:04 - So hopefully that makes some amount of sense.
261:07 - Basically, at the end of the day, what it means is if this relative URL is in the HTML, and this is the base URL, we want to pull it out as a full as a full URL looks like this.
261:22 - Okay, go ahead and run that test.
261:28 - And expect it to fail.
261:30 - Because, yep, we're pulling it out as relative URL and we want it as the full absolute.
261:35 - Let's go ahead and write some logic that satisfies that test.
261:41 - So the first thing I think we should do is kind of break down the logic tree based on whether we're working with absolute or relative URLs.
261:50 - So we can write a little test by saying if link element dot href dot slice from zero to one slash.
262:05 - So if the first character in the string is a slash, then this is a relative URL.
262:15 - Otherwise, we're working with an absolute.
262:23 - Now we know our logic works for absolute URLs.
262:25 - We can just throw that in there.
262:28 - For relative URLs, we need to do something just a little bit different.
262:32 - And we're going to want to push URLs dot push.
262:37 - The base URL appended to the relative URL.
262:45 - So we get an absolute URL.
262:47 - So we could do something like this.
262:49 - Base URL.
262:52 - Evaluate that properly.
262:54 - And link element dot href.
263:00 - So now we're concatenating them together.
263:05 - What happens when we run that?
263:11 - We passed. Next, let's add a test that pulls out multiple, multiple links.
263:19 - So I'm just going to copy this.
263:22 - In fact, let's have it do both a relative and an absolute URL.
263:28 - So we'll grab that full absolute URL here and we'll do, let's just call them path one and path two.
263:38 - And then we would expect to get back path one and path two.
263:50 - Take a look at that. Make sure I'm just going to say the blog path one and boot path two.
264:00 - Take a look at that. Yeah, that looks right.
264:03 - And I don't think we'll need to change our code to pass this test.
264:07 - Hopefully this just works.
264:10 - Yep, we're good to go.
264:11 - One last test for this function is that I want to make sure that if we're given a bad URL,
264:17 - that we don't include it in the extracted URLs, right?
264:22 - That come back from the get URLs from HTML function.
264:25 - So let's write an invalid URL here.
264:28 - Let's just say invalid, right?
264:33 - Invalid URL.
264:35 - Now, this is invalid because this isn't a relative URL.
264:38 - It doesn't start with a slash and it doesn't start with a protocol either.
264:41 - So it's not an absolute URL.
264:43 - So if this were rendered in a browser, this would just be a broken link and invalid.
264:51 - So what do we expect to happen?
264:52 - Well, given these inputs, I expect our function to not extract the not extract any any URLs.
265:01 - Let's go ahead and run the test and see if it works in its current state.
265:08 - Oh, we are failing, failing that test.
265:12 - Looks like we expected an empty array and we did get back that invalid string in the array.
265:20 - Let's go fix our code.
265:23 - One way we can test for URL validity is just to use that same URL constructor that we used in normalize URL.
265:30 - Go ahead and do that.
265:33 - So a const URL string.
265:38 - This same thing.
265:41 - Actually, let's do URL object.
265:43 - Let's just parse it directly into URL object.
265:50 - Now, if the URL constructor is given an invalid URL, so if this string is not a valid URL, this will throw an error.
265:59 - Okay, so it doesn't throw an error, we should be safe to push the URL objects href href property, which is just the stringified link.
266:14 - Right.
266:16 - However, if it does throw, throw an error, we need to be able to catch that.
266:20 - So let's do try.
266:23 - Throw all this in the try block and then catch error.
266:29 - And if we get an error, we'll just log it out.
266:31 - So we'll do console dot log.
266:35 - Error with relative URL.
266:40 - It will be error dot message.
266:42 - And the reason there's a dot message property here is because this is an error object rather than just a string.
266:48 - So that's how we access the error message.
266:53 - Cool.
266:54 - And then we're going to do a similar thing for the absolute URL.
266:57 - That of course, we don't need to parse it this way.
267:02 - Cool.
267:07 - This should work, right?
267:09 - If the URL constructor throws an error, we'll catch it.
267:12 - I should probably fix that copy pasta absolute URL.
267:17 - And let's go ahead and rerun the tests.
267:24 - Awesome.
267:25 - Looks like we pass now.
267:26 - And if I scroll up, yep, there's a console log there saying error with absolute URL, invalid URL.
267:33 - Now that we've got that all working and tested, let's go ahead and commit it.
267:39 - It was the get URLs from HTML function and tests.
267:46 - And I'll push that up.
267:49 - Let's get back to the actual application.
267:52 - So, so far, we've been writing these helper functions in the crawl.js file.
268:00 - And we've written some tests to make sure they're working.
268:02 - But our actual program still just prints hello world.
268:06 - So let's update that a bit.
268:08 - For now, what I think we should do is write a main function.
268:12 - So this will be the entry point to the application.
268:15 - And all it should do at this point is process command line arguments.
268:21 - So at the end of the day, our script is going to take as input a website and crawl that website.
268:27 - So we need to be able to take that input from the command line.
268:31 - And in Node, this is pretty easy.
268:33 - There's an object at the global level called process.
268:40 - And argv is a property that we can use to grab the command line arguments.
268:47 - So within the main function, let's go ahead and check to make sure that the command line arguments have been passed in properly.
268:58 - So if process, oops, process.argv.length is less than three.
269:12 - And we'll say no website provided.
269:23 - And if everything goes well, we'll just print console.log, starting, crawl.
269:30 - All right, let's test that really quick just to make sure it's doing what we think it is.
269:34 - So when I run npm start, what I'm expecting to happen, by the way, I should probably also like exit here or something.
269:44 - OK, cool. That same process object has a process.exit.
269:50 - And then we can pass it an error code. Yep.
269:55 - OK, so one is a pretty standard error code when things go wrong.
270:00 - So if we have not been given enough command line input, we'll log this and error.
270:07 - So let's just run that. See, yep, no website provided and it error.
270:12 - And then let's see what happens if I do provide. Let's just give it the name of my personal blog.
270:19 - Starting crawl. OK, perfect.
270:22 - So you might be wondering, why are you checking for length three? Wouldn't it be like one or something?
270:27 - Well, let's print out each entry so that you can see what's actually in that argv.
270:36 - So let's say arg of process.argv, console.log.
270:48 - OK, so what are the arguments?
270:52 - Interestingly enough, when I give it one command line argument, the length of this array process.argv is actually three.
271:00 - The first argument is the interpreter. It's kind of strange, right?
271:06 - It makes sense if you've done some more, I don't know, low level programming.
271:13 - But basically the first argument to any program is always the name of the program.
271:18 - That's just kind of how these operating systems work.
271:21 - So node is technically the name of our program because node is what's running and interpreting our code because we're using an interpreted programming language.
271:31 - The second argument to our program is the name of our code or the entry point file.
271:38 - In our case, main.js. So this is just that full path to main.js.
271:44 - And then the third argument finally is the one that we are actually passing in to our program.
271:49 - Let's fix up this typo, provided.
271:53 - And let's make our checking just a little bit more robust.
271:57 - So if it's less than three, we're going to say no website provided.
272:00 - But I also don't want people thinking that they can pass in, you know, a second website, right?
272:05 - Boot.dev or something like that. That's that's not going to do anything different.
272:08 - So we should probably add another check and say if it's greater than three or more than the standard amounts of arguments are provided, we'll say.
272:23 - Too many command line hargs and we'll exit.
272:29 - So by now, we should know that we have exactly three command line arguments. So the base URL that we'll be crawling is going to be process.argv at index two.
272:43 - Right. And now let's update this log statement to kind of echo that back.
272:49 - Say starting crawl of base URL.
272:55 - Cool. Make sure that works.
273:01 - Oh, yeah, I should probably provide a website.
273:09 - Starting crawl of Wagslane.dev. Perfect. Let's start actually crawling some web pages.
273:14 - So now we're going to get to the HTTP part of this of this project.
273:20 - Let's hop over to the crawl.js file, and we're going to create a new function called crawl page.
273:26 - And as input, it'll take a current URL.
273:30 - And to start, let's just log that we're crawling the page. So console.log actively crawling.
273:41 - Current URL.
273:46 - Cool. Next, let's make a fetch request to that URL.
273:51 - This is going to be a get request because we're hoping to get back some HTML.
273:56 - So const resp equals wait.
274:02 - We should probably await the promise, but we're using the fetch API.
274:05 - And then we don't even need to specify options kind of by default.
274:09 - Fetch does get requests. So we can just fetch that current URL.
274:14 - You'll see this red squiggly here. That's because this actually needs to be an async function.
274:17 - So it returns a promise. Oops. Async function.
274:24 - What do we do with the resp object? Well, for now, let's
274:30 - To start, let's just
274:34 - Let's just log out the response body.
274:37 - So this might be new to you. You'll remember that when we were working with the JavaScript,
274:45 - the JSON APIs, right in the course, we were often using dot JSON.
274:49 - And that's because we expected the response body to be formatted as JSON.
274:53 - Well, now we're expecting the response body to be formatted as HTML.
274:58 - So we're going to just parse it as text again, because we already wrote get URLs from HTML,
275:05 - which takes HTML as a string, as text, as input.
275:10 - So we can just kind of grab it as text.
275:14 - Cool. Let's run this. Actually, we're going to need to hook it up, right?
275:19 - We need to hook it up to main. So let's import
275:24 - Const crawl page equals require.
275:29 - And it's going to be
275:33 - Crawl.js.
275:41 - Here we can just crawl page and give it that base URL.
275:47 - OK, so let's rerun our application and see if we make that get request properly.
275:53 - And again, this is just my blog. It's a little website with about 20 pages on it.
275:59 - It's not huge. You can use my blog to test. I don't care.
276:04 - Or you can use a different website.
276:08 - If you are going to use my site, please don't DDoS it.
276:13 - I really appreciate that. But anyways, let's get going.
276:19 - Crawl page is not a function. I'm a big idiot. I didn't export this.
276:29 - Try again.
276:32 - Let's see. Starting crawl, actively crawling.
276:39 - OK. Is that what we expect? Did we log anything?
276:45 - I saw log res.text. Ah, yes, probably await that.
276:51 - This dot text method returns a promise. So let's await the promise and log it out.
276:58 - Awesome. OK, now we're getting some HTML.
277:01 - So this is all the HTML on the home page of my blog.
277:05 - Just a big fat dump of HTML data.
277:10 - So we have a problem. If a user types in bad input.
277:15 - So let's do npm start and then HTTP garbage URL.
277:20 - Just an invalid URL.
277:23 - At the moment, our code just kind of panics and dumps out the stack trace.
277:29 - We don't want that for a couple of reasons.
277:31 - The first is this isn't a very good user experience.
277:33 - We probably should give just a prettier error message and exit cleanly.
277:38 - When there's bad user input, but also as we crawl pages,
277:43 - because we're going to be crawling multiple pages with our website or with our with our tool,
277:49 - we don't want to encounter one bad link and have the whole process just kind of vomit and exit.
277:56 - We want to be able to handle that and keep moving and keep crawling more pages,
278:01 - even if there is an invalid link somewhere on a website.
278:05 - So let's add some try catch handling here.
278:09 - That will be step number one.
278:11 - This fetch call can error.
278:13 - So let's throw it within a try block and then we'll catch the error and log it out.
278:20 - Console dot log.
278:22 - Error in fetch.
278:31 - Page. All right, you are.
278:37 - Cool. And let's try running that.
278:42 - Well, much better. We don't get a huge stack trace.
278:44 - We just we just log out.
278:46 - I got a little message here.
278:48 - So you may have noticed this little warning here.
278:52 - That's because fetch historically was only available in the browser environment.
278:56 - And we're running JavaScript's now on the command line using node.
279:00 - Recently, node did add support for the fetch API for this fetch call as a built in.
279:07 - But it's still considered experimental.
279:09 - They could rip it back out.
279:11 - I think that's unlikely.
279:13 - I think it's likely here to stay if for whatever reason they did rip it out.
279:17 - We could always install node fetch, which is a package that does essentially the same thing.
279:23 - But in order to ignore this warning, because I'm aware of the fact that it's experimental
279:28 - and I don't want it telling me that every time I run my program, I'm going to come in here
279:33 - and pass the no warnings flag into the node interpreter.
279:37 - And so now if we run it.
279:40 - We don't get that warning.
279:42 - So we've checked for an error in the fetch call.
279:46 - But now I want to check for some more things because there are some other things that could go wrong.
279:53 - The first thing is the status code, right?
279:56 - We need to check and ensure that the status code of this fetch request is a 200 level code.
280:03 - If it's anything over, well, I guess 300 would be OK as well.
280:08 - We're OK with a redirect.
280:10 - But we shouldn't be in the 400s or above, right?
280:14 - The 400 level, 500 level error codes.
280:16 - So I'm going to write a little if statement here that says if resp.status is greater than 399.
280:25 - That would mean, again, 400 client error, 500 server error.
280:29 - Then let's log an error and say.
280:34 - Error in fetch with status code.
280:43 - Status code on page.
280:51 - That current URL.
280:53 - And if that if that happens, then we'll just return.
281:00 - We'll just stop crawling this page, right?
281:02 - If this page is broken, we're just done.
281:04 - We can just return from this function.
281:09 - Well, let's go ahead and make sure that is working.
281:13 - So if I if I crawl a valid URL like Waxlane.dev, we get the HTML. That's that's all still good.
281:23 - Now let's try a URL that doesn't exist.
281:28 - So I would expect this to result in a 404.
281:30 - So I'm just going to type in like a garbage path.
281:36 - Cool. Error in fetch with status code 404 on page garbage path.
281:42 - That seems to be working.
281:46 - One last thing I want to check just to be really sure that everything in this function is going off without a hitch is that we are actually getting HTML back.
281:57 - So when we parse the response body, right, does it actually contain text that represents valid HTML?
282:04 - And the way I'm going to do that is just by parsing the headers.
282:08 - So we can do this const content content type equals rest dot headers dot yet.
282:17 - And we'll grab that content.
282:21 - And then we could say if content type got my parentheses, content type does not equal text HTML, then we'll want to throw a similar log and say.
282:46 - On HTML fonts.
282:54 - Do not need to know response content type.
283:00 - Content type there.
283:03 - Content type on page. OK, cool.
283:07 - How do we test this one?
283:09 - So we want a valid URL that doesn't have an HTML response.
283:13 - My site map. Let's use my site map. So my site map is not HTML.
283:17 - It is XML. So if I do site map dot XML here, we should trigger this.
283:28 - Awesome. Non HTML response content type application XML on page.
283:35 - OK, and then let's just make sure that we didn't break another normal flow of things.
283:43 - Text HTML char set, you see a fate. OK, so what we should probably do then is maybe do an includes here. So rather than saying the content type is text HTML, because that header can have additional information like the the character set of the response.
284:07 - So it is valid HTML, but it's also giving us kind of an encoding type.
284:12 - So I'm going to change this to dot includes HTML.
284:18 - Now, as long as that string is in the header will be good to go.
284:25 - Run that.
284:28 - What did I do wrong now? Content type dot includes text HTML.
284:34 - Oh, it does not include text HTML, making all sorts of embarrassing mistakes.
284:42 - Cool. There we go. And just to be super sure, let's make sure that I didn't break that.
284:50 - OK, perfect. Now that we're grabbing HTML with some basic kind of error handling, let's go ahead and commit this.
285:03 - All page.
285:07 - Let's just say crawl single page with error.
285:14 - And we can push that up.
285:16 - Now it's time to update the crawl page function so that it can crawl an entire website rather than rather than just a single page.
285:24 - So instead of just accepting a current URL, it's going to have three arguments. There's going to be a base, oops, a base URL, a current URL, and a pages object.
285:37 - So the base URL is going to be essentially the starting point, right? The home page of the website.
285:43 - Typically, the current URL will be the page that we are actively crawling.
285:48 - And then the pages object is going to be an object that keeps track of all the pages we've crawled so far.
285:55 - First, we need to make sure that the current URL is actually on the same domain as the base URL.
286:01 - We don't want to crawl the entire Internet here. Whenever we encounter a link that links out to an external site, we basically just want to ignore it.
286:09 - So we can do that by using the new URL constructor, right? So we could say base URL object.
286:19 - Make that a const equals new URL, base URL.
286:26 - Do that with the current URL as well.
286:33 - And say if base URL, base URL object dot hostname.
286:43 - It's not equal.
286:46 - Current URL object dot hostname.
286:52 - Then we can just return, turn early.
286:55 - And actually, what this function returns isn't nothing anymore. It returns the pages object.
287:02 - That's going to be how we keep track as we call crawl page multiple times.
287:06 - It's going to be how we keep track of all the pages that we've already crawled.
287:10 - So we can return early and just return that same pages object that we received as input.
287:15 - Because, again, if these hostnames are different, we're going to skip this page.
287:21 - Next, we need to see if we've already crawled this page.
287:24 - So let's grab a normalized version of the current URL. So const normalized.
287:32 - Current URL.
287:35 - And we can just use that normalized URL function.
287:39 - Let me expand this so we can see more code.
287:43 - So we just call normalize URL and give it the current URL.
287:48 - So the way we can check if we've already crawled this page is if the normalized current URL exists within the pages object.
287:56 - The pages object is essentially just a map of URLs, normalized URLs, right?
288:03 - So we don't get duplicates to the number of times that we've seen that URL or that we've crawled that URL.
288:10 - So what we can say is if pages at normalized URL greater than zero,
288:22 - then we can just increment pages at normalized current URL plus plus and return pages.
288:32 - So we're basically just saying if I've already seen this page, I'm going to increment the count, right?
288:39 - The number of times I've seen this page.
288:41 - And this is so that when we actually go generating a report,
288:44 - we can tell the user how many times a certain page is linked to on the site.
288:51 - So if we already have an entry, we increment it and return.
288:54 - Assuming we've made it this far, we do not yet have an entry for the normalized current URL.
289:01 - So let's create it and we'll initialize the count to one, right?
289:05 - So this is the first time we've seen this URL or that we're crawling this URL.
289:09 - Next, I'm going to move this log statement down where the crawling actually happens.
289:17 - If any of this happens, right?
289:20 - If we're seeing an external link or if we're processing a link that we've already processed,
289:26 - I don't want to be logging this crawling message over and over and over again.
289:30 - I only want to log it when I'm crawling a new page.
289:33 - So after logging which page we are crawling,
289:37 - we'll go ahead and fetch the page just like we were before.
289:40 - But instead of logging out the HTML, that's something we definitely don't want to do,
289:44 - let's save it in a variable.
289:46 - response.html body response.text.
289:51 - And the next step will be to extract all of the links from the HTML
289:56 - so that we have more pages to go crawl.
289:58 - Luckily, we already wrote and tested that function.
290:01 - So we can do next URLs equals get URLs from HTML
290:08 - and we'll pass in the HTML body and the base URL.
290:12 - And let's say that's a const.
290:15 - Cool, now we can iterate over the next URL.
290:18 - So const for const next URL of next URLs.
290:28 - Now we're going to recursively crawl these pages.
290:32 - So if you're not familiar with recursive functions,
290:35 - our recursive function is just a function that calls itself.
290:38 - So we crawl the root page and then we find all the links in that page
290:43 - and then we crawl those pages and those may have links
290:46 - and we'll continue to crawl all of the pages on the website
290:49 - until basically these base cases are completely satisfied.
290:55 - Either we're just hitting links that are external to the site
290:59 - so we're not going to crawl those
291:01 - or we're just hitting links that we've already crawled.
291:04 - So we should just exhaustively crawl the entire website.
291:08 - So we're getting a new pages object
291:11 - because remember now this function returns a pages object.
291:16 - So pages equals await crawl page
291:22 - and we need to pass in the same base URL.
291:27 - But now rather than passing in the current URL,
291:30 - we'll pass in the next URL as the next current URL
291:35 - and then the current value of the pages object.
291:37 - So we're getting back a new updated pages object.
291:42 - We're giving it the old one.
291:45 - And then when we're done with that,
291:48 - so once we've crawled every page, then we can just at the end
291:52 - return the pages object, right?
291:58 - That makes sense to me.
292:00 - Let's go update main.js so that it actually works the way we'd expect.
292:04 - So now the crawl page function takes three arguments.
292:08 - To start, it will take the base URL twice, right?
292:12 - We'll pass in base URL not only as the base URL
292:15 - but also as the current URL because it's our starting point.
292:18 - And we'll start with an empty object for the pages object
292:22 - because we haven't crawled anything yet.
292:24 - That object will get filled in as we recursively crawl more and more pages.
292:29 - And then let's save the results in a pages object.
292:34 - And for now, let's just log those out.
292:38 - So for const page of pages, we'll just log out the entire page object.
292:49 - Cool. Let's go ahead and run this and see where it gets us.
292:53 - So I'm going to, again, just crawl my blog.
292:59 - See what happens.
293:03 - And we already screwed up. What do we got?
293:05 - For const page of pages.
293:11 - Pages is not iterable.
293:13 - That makes sense. This was, for some reason in my head,
293:16 - I thought this was an array. It is an object.
293:19 - So we need to do object.entries.
293:26 - That will allow us to iterate over the entries in the object.
293:30 - Okay. Let's go ahead and run that code again.
293:37 - Cool. Another issue here.
293:39 - See, you cannot read properties of undefined after hitting this XML page.
293:44 - Oh, you know what? We've got a return in here.
293:49 - Remember that we always want to return the pages object.
293:52 - So even when there's an issue, we still want to return the current pages object.
293:57 - We're relying on that.
293:59 - Okay. Let's fix that and try again.
294:12 - Cool. So it looks like it's crawling. That's good.
294:16 - We crawled a bunch of pages.
294:19 - We didn't see anything on the other side here.
294:24 - So when we iterated over this at the end, oh, you know what?
294:29 - RollPage returns a promise. Let's not forget to await that.
294:33 - And the main function also needs to be asynchronous.
294:41 - Okay. Let's try that.
294:47 - There we go.
294:49 - Now we're seeing some results.
294:52 - Okay. So we crawled through all the pages on the site.
294:55 - That's great. We even handled the site map.
294:59 - And this is what we got out the other side.
295:01 - So we have this giant list of all of the pages and how many times they are linked to.
295:11 - That's great. This is the data that we need now to do the last step,
295:15 - which is building a report of all this information.
295:19 - And before I forget, let's go ahead and commit all of this to Git.
295:24 - Don't lose our work.
295:26 - So crawl, page, recursive.
295:34 - Let's convert this kind of nasty just dump of JavaScript objects and arrays into a nice report.
295:42 - To do that, create two new files, report.js and report.test.js.
295:49 - That'll be one function we write that I think is worth writing some unit tests for.
295:55 - So the function that we'll be writing a unit test for is called sortPages.
295:58 - So function sortPages.
296:01 - As input, it takes that pages object and it's going to return an array.
296:05 - So for now, I'm just going to stub this out, have it return an empty array.
296:10 - Let's hop over to the test and let's grab a test.
296:16 - Give us somewhere to start.
296:18 - Instead of testing stuff in crawl.js, we'll be testing within report.js.
296:22 - And the function we care to test is called sortPages.
296:29 - So sortPages.
296:32 - All right. The input is a pages object.
296:35 - So let's build kind of a manual pages object.
296:37 - So it could be something like https://wagslane.dev.
296:46 - And remember, each URL maps to how many times that URL shows up as a link on the website.
296:52 - So let's just do three.
296:54 - So it's a very simple pages object.
296:57 - And then we'll call sortPages.
297:01 - And the expected in this case be an array.
297:07 - And it will be an array of, I believe we want it to be an array of essentially tuples,
297:16 - which are basically just an array of arrays where the first index in the array is the URL
297:24 - and the second index in the array is the number.
297:27 - So in this case, the expected would look something like this.
297:38 - And then the whole point of sortPages is it actually sorts the output array,
297:42 - putting the kind of highest count URLs at the top, lowest count at the bottom or first and then last.
297:49 - So let's add another entry here.
297:58 - Make this one a smaller count.
298:01 - So that should show up next in the array, right?
298:06 - We want highest to lowest.
298:08 - Should come after.
298:11 - OK, so hopefully that makes sense.
298:13 - Taking this object as input, we're converting it to an array and we're sorting the array.
298:20 - First index is the URL.
298:22 - Second index is the count.
298:25 - OK, that looks pretty good.
298:28 - Now, we haven't actually fixed up our function yet.
298:32 - So I'm expecting this test to fail.
298:36 - NPM run test.
298:40 - Cool.
298:42 - One test is failing, right?
298:44 - This is what we expected and we got.
298:48 - Should have got an empty array.
298:52 - Am I reading this wrong?
298:58 - Actual sortPages input.
299:07 - SortPages is not a function. OK, so I forgot to export, of course.
299:12 - Module.exports sortPages.
299:18 - Now we can actually import it and use it to make sure that works.
299:27 - OK, now we're failing for the right reason.
299:29 - We have unexpected.
299:31 - OK, cool.
299:32 - Now let's go ahead and write the let's write the sortPages function.
299:36 - So the first step is just to convert this into an array.
299:39 - So pages array equals object dot entries ages.
299:50 - Now, it's important to understand the way this function works is it will take the pages object and convert it into that structure that we're expecting.
299:57 - Right. And array of arrays where the first index is the key in the object and the second index is the value.
300:09 - So this gives us the structure we want, but now we need to sort it.
300:13 - So we can do pages array dot sort.
300:18 - JavaScript has a built in sorting function, but we need to tell it how we want to sort how we want it to sort all these entries.
300:26 - So A and B represent two individual entries in the pages array.
300:35 - Right. So two individual arrays and the value that we want to sort on.
300:41 - So A hits is A at one and B hits equals B at one.
300:50 - Remember, because index one has the count that we want to sort by. Right. Index zero has the URL.
300:59 - OK. And then what this compare function returns is a number.
301:06 - And because we want to sort from greatest to largest, we'll want to return B at one minus A at one.
301:17 - Essentially, the way the sort function works is whether it's given a kind of positive or a negative return value is how it sorts all of the individual of the individual entries in the array.
301:32 - I'd encourage you to go take a look at the documentation on the sort function if you're a little fuzzy on how that's working.
301:38 - But if we wanted to sort the other way, we could swap this. Right.
301:42 - B minus B. But because we want to go greatest to least, we'll do B minus A. Cool.
301:48 - And then we just return the pages array.
301:52 - Let's see where that gets us.
301:57 - Awesome. We passed that test.
302:00 - Let's go ahead and write another test just to be sure that the sort is working. Right.
302:06 - So we're only really sorting two pages here, two sort pages, two pages.
302:12 - Let's do something a little bigger.
302:15 - Let's do like five pages.
302:18 - And I want them all out of order in the input object.
302:28 - One, two, three, four.
302:36 - And let's just go way out of order here.
302:44 - All right.
302:46 - One, three, two, two.
302:51 - That's super out of order. Right.
302:53 - And what do we expect from this? Well, we expect nine to be at the top.
302:59 - Copy pastas of these.
303:02 - So path four.
303:07 - Nine hits at the top.
303:10 - Next, we'd have path two.
303:15 - Five hits.
303:18 - Next, we would have three hits and then path three.
303:25 - Two hits. And finally.
303:29 - OK. Let's make sure that test passes as well.
303:34 - Cool. We're good to go. So now that we have sort pages working, let's write one more function
303:40 - that will format the entire pages object as kind of that beautiful report in the console.
303:47 - So this one we're just going to call print report.
303:50 - Takes pages as input.
303:53 - And the first thing we're going to do is kind of separate.
303:57 - If you remember, our program, as it crawls, kind of writes some stuff to the console.
304:02 - So I think we really want to separate all of that text from the report itself.
304:07 - So I'm going to go ahead and log a bunch of equal signs to the console.
304:14 - And then something like.
304:19 - Report.
304:21 - Maybe another one of these.
304:24 - OK, then I'm going to get the sorted pages of cons sorted ages.
304:30 - Ages packed in the pages object.
304:34 - Cool.
304:35 - Then we could iterate over all of the sorted pages.
304:37 - So for honest. Or the page of assorted ages.
304:47 - And remember, each sorted page is an array so we can get the URL is sorted page at zero.
304:56 - Right. And honest.
304:59 - It's is sorted page at one.
305:04 - So the page URL and how many times it appeared in the site.
305:10 - How many times it was linked to.
305:12 - Right.
305:14 - Then we can log an entry and say something like.
305:22 - How should we reformat this?
305:25 - Found links to page URL.
305:40 - That.
305:42 - And then let's end the report.
305:45 - Similar kind of output.
305:49 - Cool.
305:50 - I think that'll look good.
305:52 - Now we can hop back over.
305:55 - Well, let's not forget to export this.
306:00 - Now we can hop back over to main.js.
306:02 - Let's import. Print report.
306:12 - And now, instead of this, this nonsense, we can just call report pages.
306:20 - Cool. After all that, let's go ahead and run it again.
306:22 - So NPM run start.
306:29 - Start up from the root of my blog.
306:33 - Right.
306:34 - Crawling. Awesome.
306:36 - Okay. So actively crawling all the different pages.
306:39 - That's great.
306:40 - Report starts.
306:42 - Sixty one links to the home page.
306:44 - Sixty links to tag.
306:45 - So it makes sense that these have lots of links because they're kind of in the menu of the site.
306:51 - So essentially every page links to those pages.
306:54 - And then these are links that are actually found kind of within the body text of the individual posts.
307:00 - If you've gotten this far, great.
307:02 - You've got a working web crawler.
307:03 - I'd encourage you to update and enhance your web crawler.
307:07 - Test it on different sites.
307:08 - See if there's any edge cases in the code that maybe we're not handling.
307:13 - And this will make a great kind of base project for you to build on top of and add to your portfolio.
307:20 - Of course, don't forget to commit your code.
307:25 - Print. Oops. Print report.
307:30 - Finished.
307:34 - Push it up to either GitHub or GitLab or wherever you store your code.
307:40 - Again, I'd encourage you to extend this project if you want to make it part of your portfolio that you're showing off to employers and that sort of thing.
307:49 - There's plenty of things that could be improved here, right?
307:52 - Maybe instead of logging the report to the console, maybe you create an Excel spreadsheet CSV format.
307:59 - But at the end of the day, the more personal you can make it and the more functionality you add to it, the more impressive it will look on your portfolio.
308:07 - We've written a lot of code.
308:08 - Good job making it through the entire course and the entire project.
308:12 - This course is actually just one small part of a larger back end development career path.
308:18 - If you are curious about building back end applications in Python, JavaScript and Go, then definitely go check out the rest of my courses over on boot.dev.
308:27 - If you want to stay up to date with all of the content I'm publishing, then there are three places I'd recommend you go check out.
308:32 - The first is follow me on Twitter at Wags Lane.
308:35 - The second is go subscribe to my YouTube channel, which is boot.dev.
308:39 - And then finally, I have a personal blog over on wagslane.dev and I'll include links to all of those down in the description below.