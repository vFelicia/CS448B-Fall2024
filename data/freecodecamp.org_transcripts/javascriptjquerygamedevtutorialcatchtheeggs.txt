00:01 - in today's tutorial we'll see how to
00:04 - build the cast x game using only html
00:08 - css and jquery
00:11 - i'm arshad
00:12 - and before we begin the tutorial let's
00:16 - see a demo and the final version of the
00:19 - game
00:21 - so this is a game
00:25 - we have
00:28 - some x falling down and we have a basket
00:31 - and that moves with
00:33 - the mouse
00:35 - okay we'll have to catch the x to update
00:37 - the score and
00:40 - we'll have
00:41 - 20 lives
00:45 - when each egg falls
00:48 - we will lose one life
00:51 - and the speed of the eggs will increase
00:54 - after a certain interval
00:56 - okay so
01:00 - that's it this is really simple game
01:04 - so let's
01:06 - see what we have here
01:09 - we have a container this one
01:12 - and we have a place to see the score
01:17 - live
01:18 - and help
01:19 - a help texture
01:21 - yes
01:22 - and we have three hands
01:24 - one branch
01:27 - 3x
01:29 - a basket and a floor
01:32 - and of course the reset button
01:35 - okay
01:36 - now let's see the files that we are
01:39 - going to work with
01:42 - we have an index.html file style.css
01:46 - script.js file a function.js file
01:50 - and a
01:51 - variable.js file
01:54 - i have already done the index.html and
01:56 - the style.css file
02:00 - so that i won't be
02:02 - redoing it but i'll explain it
02:07 - okay
02:09 - let's see what we have in the index.html
02:11 - file
02:12 - but before that let's go and open
02:20 - this in the browser
02:27 - okay let's close the other one
02:29 - okay
02:32 - we have a very basic html template
02:35 - with a head and a body
02:37 - in the head there is a title
02:40 - and a link to the style.css file
02:44 - and in the body we have a container
02:49 - and inside the container
02:51 - we have so many divs
02:53 - the first one is the score help div
02:56 - which consists of the score and the life
03:00 - and we have the branch div
03:03 - and we have three divs with the same
03:06 - class hen
03:07 - and different ids and one hen two and
03:11 - hand three
03:12 - and we then we have three other divs
03:16 - with the same class egg these are for
03:18 - the eggs
03:19 - and but with different ids egg one egg
03:22 - two and x three we also have we also
03:24 - have a data attribute here that doubles
03:26 - i one two and three
03:29 - uh i'll explain this later okay and we
03:33 - have three similar divs with the same
03:35 - class bullseye
03:37 - and with
03:38 - different ids we'll say one two and
03:40 - three
03:41 - okay
03:45 - next we have the basket div
03:48 - inside that we are showing the score
03:53 - and then we have the floor and the reset
03:55 - button
03:56 - and before ending the body we have
03:59 - included jquery.min.js
04:01 - and the collision detection.js file
04:04 - i think you know you all know about
04:07 - jquery we are using jquery scripting to
04:10 - script the game
04:11 - and the collision detection is
04:13 - uh
04:15 - it's a simple function that returns
04:18 - when passed to divs it will detect
04:22 - whether the divs have collided or not
04:25 - that's very simple
04:28 - okay
04:30 - okay our scripting will
04:34 - uh
04:35 - be in script.js function.js and the
04:37 - variable.js file
04:39 - as
04:41 - as you can see i've already
04:44 - declared all the variables that
04:47 - are required for the game i'll explain
04:50 - it later after i explain css
04:53 - now let's go to css
04:55 - let's see what
04:56 - we have here the html and body
05:00 - nothing
05:02 - like just width height margin and phone
05:04 - family and for the container
05:07 - that's this red bordered div
05:13 - the container has height
05:14 - with a margin left to
05:17 - to
05:18 - make it at the center of the div
05:21 - a margin left of 5 percent and position
05:24 - is relative
05:25 - and border overflow and background color
05:28 - simple css
05:30 - and next we have the score help div
05:33 - which
05:34 - uh has a text array in sender font size
05:36 - and background color then we have the
05:38 - branch
05:40 - whose position is absolute
05:43 - which has a height of two percent and
05:46 - width background and top
05:48 - then we have the common class hen for
05:50 - all those hands
05:52 - its position is also absolute
05:55 - and height width top and a background
05:58 - image we are using a background image
06:00 - for the hand all those three hands
06:02 - and background size is covered and
06:04 - background repeat as no repeat to
06:06 - position it correctly
06:07 - and then is it index of hundred
06:10 - and
06:11 - to style each of them to position each
06:13 - of them at three different places
06:16 - like this one here another one here and
06:19 - the third one here
06:21 - for that
06:23 - we have hen one left as 20 percent
06:27 - and two forty percent and three and
06:29 - sixty percent
06:31 - and we have the common class egg
06:34 - it's like the hand
06:37 - position absolute top and the background
06:40 - color board radius and
06:41 - that's it
06:43 - that's pure html there is no
06:45 - you know images for that and to start it
06:49 - separately egg one is positioned
06:53 - left calculate twenty percent
06:56 - twenty percent is the left of the hen
06:59 - okay so now the left of the egg is at
07:02 - the left of the hand but what we want is
07:05 - to position the egg
07:07 - the x position the x center position
07:09 - should be at the center of the hand so
07:11 - the calculation would be like 20 plus 8
07:14 - divided by 2
07:15 - this eight percent is the width of the
07:17 - hand and minus this is the width of the
07:20 - egg so that its position center will be
07:24 - at the center of the hand
07:26 - likewise egg two
07:28 - with forty 40 and x3 with 60 calculation
07:32 - now we have the bullseye
07:35 - which
07:36 - uh display will be none this is the
07:38 - common class of those table size
07:40 - and this bottom
07:42 - height with background we are using an
07:45 - image here
07:47 - okay and background size background
07:49 - current and z index 11.
07:51 - and now to style it separately to
07:53 - position it
07:55 - left is
07:56 - almost the same as x 20 40 and 60.
08:03 - next we have the floor
08:05 - which is this one
08:10 - it's position is absolute height with
08:12 - background color bottom and z index
08:15 - nothing much and then we have the basket
08:18 - which height width
08:20 - position bottom and the background we
08:23 - are using any png file here
08:26 - of a basket
08:28 - okay
08:30 - and the background repeat and background
08:32 - size texture and sender and z index now
08:35 - the score one which is the score that is
08:37 - displayed inside the basket
08:39 - it's a position color font size top and
08:41 - left that's it
08:44 - you can play with this if you want you
08:46 - know next we have at last we have the
08:48 - reset button whose border position
08:50 - height with background color and
08:52 - everything else and the restart button
08:55 - is hidden
08:56 - when the game starts so its display is
08:58 - set to none
09:01 - okay
09:04 - so
09:05 - that's all about the css and
09:08 - html let's see it here you can see it
09:11 - here
09:13 - yes everything
09:15 - is looking fine
09:21 - like i said before the variable.js file
09:24 - i have already declared some variables
09:27 - to use
09:28 - in our script
09:29 - this are just
09:32 - variables this basket i have selected
09:34 - the basket object container container
09:36 - object hen the common class hen x common
09:40 - glass egg
09:41 - egg one two and three restart score span
09:44 - score one life span floor
09:47 - basket height
09:49 - container height egg height x initial
09:51 - position before the game starts that
09:53 - will be the pass in defect.css stop okay
09:56 - score
09:57 - live speed max speed counter
10:00 - score updated things like that and the
10:03 - basket top it we don't have the basket
10:05 - stop
10:06 - css stop so we calculate it by using
10:11 - container height minus basket height you
10:13 - know that gives basket stop container
10:16 - height minus
10:17 - basket's height that will give
10:20 - the basket stop
10:22 - okay
10:24 - sorry
10:27 - okay using the life variable we are
10:30 - setting the life spans
10:32 - text as life which is zero or sorry
10:36 - it's five it's set to five already okay
10:41 - now before we do anything let's go and
10:43 - include the script.js the variables.js
10:46 - file here
10:51 - variables.js okay fine let's see the
10:54 - life gets updated yes life is getting
10:56 - updated
11:02 - so let's start the scripting
11:04 - before that let's include script.js also
11:16 - script.js is included
11:20 - so everything we are going to write will
11:23 - be in send the document to ready
11:24 - function so
11:26 - dollar function
11:34 - let's uh
11:36 - the game will be our function
11:41 - this will be
11:44 - executed repeatedly
11:47 - that's how the animation works so in
11:49 - order to do that we'll have to
11:52 - use a javascript's default method called
11:54 - the request animation frame
11:57 - and inside that will pass the function
12:00 - which
12:01 - here is the game
12:03 - now we don't have anything in here just
12:06 - console log
12:10 - one two three
12:14 - in order to
12:15 - uh
12:18 - execute this
12:20 - repeatedly we'll have to call this
12:22 - inside
12:24 - the function again
12:27 - so let's see whether it's working or not
12:30 - console
12:31 - yes one two three is getting
12:36 - printing repeatedly
12:40 - so let's go there and
12:44 - remove this
12:46 - this one main thing the request
12:48 - animation frame
12:50 - it returns an id
12:53 - which can be used later to stop the
12:55 - animation
12:57 - let's assign it to a variable called
13:00 - anime id
13:02 - you know we'll have to update it here
13:03 - also
13:05 - okay
13:07 - i'll show you
13:08 - the use of cancel animation frame the
13:11 - cancel animation frame if we pass the
13:13 - anim id there
13:16 - first let's comment this and see open
13:19 - the console
13:20 - and see how many times it gets executed
13:26 - i hope
13:30 - request animation frame of the game the
13:32 - game sorry if you don't have the
13:33 - console.log here
13:36 - console.log one two three
13:40 - okay
13:40 - it's getting executed like
13:42 - repeatedly so if we uncomment this
13:45 - cancel animation frame
13:46 - anima id
13:48 - it gets executed once and then it stops
13:52 - when
13:53 - the code
13:55 - read this
13:57 - code
13:59 - it will stop the execution of the this
14:02 - animation the game okay
14:04 - so
14:06 - let's leave that
14:09 - okay
14:11 - see first we want to
14:14 - move the egg first let's concentrate on
14:17 - egg one
14:19 - instead of doing everything
14:22 - so how are we going to move the egg down
14:25 - this is the egg one
14:27 - now its top is 18
14:30 - so it doesn't matter whether it's in
14:32 - percentage or pixels
14:34 - if we increase the top
14:38 - see all the x coming down
14:43 - so
14:43 - that's how we bring the x down
14:46 - so let's write that first
14:51 - let's make the function egg down
14:54 - of
14:57 - first let we have already selected egg
14:59 - one
15:00 - in the variable.js here
15:04 - so
15:05 - first let's play with egg one
15:09 - egg down
15:11 - let's go and define this function
15:13 - in the functions.js file
15:16 - function egg down
15:20 - let's change this variable to egg
15:22 - okay
15:24 - so in order to increase the
15:26 - top of the
15:28 - egg we'll have to
15:32 - we'll have to get the current top so
15:35 - like egg
15:36 - current position it's a variable
15:38 - is pass end off
15:43 - will have to use passing because
15:45 - otherwise the
15:46 - x css stops px will come
15:49 - with each
15:50 - see egg dot
15:52 - css top that's x current position
15:56 - so
15:58 - here using x dot css top we are getting
16:01 - the x css stop now we'll have to set the
16:04 - x css stop
16:06 - so egg
16:08 - dot css
16:11 - top
16:13 - is
16:14 - egg current position
16:17 - plus say
16:19 - 2 pixels
16:21 - let's see what happens
16:23 - nothing is happening it's good
16:25 - oh i think i forgot to
16:28 - include the function.js file in the
16:30 - script yes
16:31 - that's true
16:37 - function stretches
16:40 - functions to test
16:42 - okay egg one is coming down
16:46 - and it's going out of the container
16:49 - and that's not what we want
16:52 - before uh
16:54 - setting the egg to its initial portion
16:56 - let's move the basket
17:00 - how are we going to do that we
17:03 - let's
17:04 - before everything
17:06 - document
17:08 - dot
17:09 - on
17:11 - mouse
17:12 - sorry
17:16 - mouse move
17:19 - function and let's catch an event there
17:27 - basket we have selected already dot css
17:32 - left
17:35 - e dot page
17:37 - x
17:39 - so whenever the mouse moves
17:42 - this will
17:43 - set the basket css left as the mouse is
17:47 - exposition
17:49 - let's see whether it works or not
17:51 - yes
17:52 - it's working perfectly
17:58 - so that's working now we'll have to
18:04 - bring the eggs to its initial position
18:06 - when it hits the floor
18:08 - okay let's do that first
18:19 - okay let's do it over here
18:22 - if
18:24 - check
18:25 - egg
18:27 - hits
18:29 - floor
18:31 - of which heck
18:33 - say egg 1
18:38 - let's write this function
18:40 - first define this function over here
18:44 - function
18:45 - egg hits the floor
18:49 - how are we going to do that we have the
18:51 - egg and we have the floor
18:53 - and we have the collision detection
18:55 - function so it's
18:57 - really easy
18:58 - if
19:00 - collision
19:02 - of egg
19:05 - that we have passed
19:06 - and the floor that we have selected in
19:09 - the variable.js
19:11 - return
19:12 - true
19:15 - else
19:17 - return
19:18 - false
19:20 - that's how we'll
19:22 - check whether the egg hits the floor or
19:25 - not
19:26 - script.js fell if check against the
19:29 - floor if it's true
19:30 - let's uh
19:31 - set the x position to its initial
19:34 - position that's
19:35 - that was uh somewhere like behind the
19:39 - hen
19:41 - and we have the x initial position here
19:43 - it's already declared so
19:45 - let's write a function set
19:48 - egg
19:49 - to
19:50 - initial position
19:58 - and we check the egg one
20:00 - okay
20:01 - let's define this function
20:05 - function.js
20:08 - function setting to initial position
20:10 - changes to x one egg one two egg
20:13 - so how are we going to do that
20:15 - same that we did here egg dot css stop
20:19 - let's copy this paste here instead of a
20:22 - current position say egg initial
20:24 - position
20:27 - okay this will set
20:29 - the egg.css top to its x initial
20:32 - position let's see whether it works or
20:34 - not
20:35 - egg is going to hit the floor yes
20:40 - the loop continues now
20:43 - there's one more thing remaining with
20:45 - the floor and the egg
20:47 - when egg hits the floor we'll have to
20:49 - show the bullseye
20:51 - let's see how we can do that
20:55 - see he
20:57 - this is the place where we are checking
20:59 - whether the egg hits the floor or not
21:01 - so let's do it here
21:04 - if collision of a coma floor
21:06 - say
21:07 - both sides show
21:09 - bulls
21:10 - eye
21:12 - of what egg this egg
21:16 - that would be egg 1 that's passed from
21:18 - the script.js file
21:19 - let's define this function
21:21 - [Applause]
21:24 - showable psi
21:30 - so now we'll have to
21:33 - identify which bullseye to show
21:35 - so you know what to do that that's why i
21:38 - told you at the beginning of the game i
21:40 - will explain about this data attribute
21:43 - you know when this object is passed when
21:46 - egg 1 is passed
21:48 - it will have access to this data
21:50 - attribute and this is set to 1 so that
21:52 - it will be easy
21:54 - for us to
21:56 - understand which bullseye to show
21:59 - see it here in action
22:01 - say bullseye num okay
22:04 - is
22:05 - egg dot
22:07 - attribute
22:17 - if
22:19 - one hits the floor
22:21 - now the x that attribute uh will be one
22:25 - if it's two it's two and if it's three
22:27 - it's free okay
22:30 - we have the bullseye num here now
22:33 - let's show the bullseye
22:35 - hash
22:53 - show
22:55 - so this will show if it's egg one this
22:58 - will show bullseye num will return one
23:00 - and this hash bullseye plus bullseye
23:02 - numb will
23:05 - get select the object
23:07 - will say one with id bullseye one and it
23:10 - will show it
23:11 - now let's see
23:14 - the egg is coming down it's going to hit
23:16 - the floor
23:19 - nothing's happening let's see
23:22 - showable side of egg
23:24 - egg dot
23:26 - attra
23:31 - okay
23:38 - okay it's date double sigh the
23:40 - attributes name is data double side
23:43 - okay that's why it's not working i
23:48 - guess sorry
23:54 - see if x
23:56 - is coming down it's a floor yeah both
23:58 - sides shown now we want the bullseye to
24:01 - disappear
24:03 - so if we
24:05 - hide the here
24:07 - itself
24:10 - say hide
24:17 - we won't be able to see it because
24:20 - immediately after it is shown it will be
24:22 - hidden so
24:24 - let's
24:25 - do something else
24:26 - let's call hide
24:29 - bullseye function from here
24:32 - and pass the bullseye num
24:35 - here
24:37 - okay
24:38 - and let's
24:40 - hide bullseye function and this uh
24:44 - possible num
24:47 - paste this here bullseye
24:49 - bullseyenum.height
24:51 - no
24:52 - not like that let's
24:54 - put this in a set timeout function so
24:56 - that it will execute after some time
25:04 - say 800 milliseconds
25:15 - let's see what's whether it's working or
25:17 - not
25:19 - hits the floor so the bullseye yeah
25:21 - we'll say it's gone now the second time
25:23 - once i came and it's gone yeah that's
25:25 - what we want
25:35 - now
25:37 - next thing we want to check
25:39 - and
25:40 - return the position of the
25:45 - um
25:47 - no
25:48 - before that let's uh reduce the score
25:50 - when they reduce the life
25:53 - when the egg hits the floor let's do
25:54 - that first
25:55 - okay so
25:57 - this one where
25:58 - if egg hits the flow show bullseye and
26:03 - decrement
26:05 - life
26:07 - okay
26:14 - function decrement life
26:18 - we already have the life variable set so
26:21 - life minus minus
26:23 - and let's show
26:25 - in the life span
26:30 - life
26:34 - and there's one more
26:37 - thing that's the life
26:40 - this uh
26:42 - the
26:43 - no
26:44 - life is only
26:46 - yeah lifespan or text life see that
26:51 - here we have the life yeah it's
26:54 - decrementing that's done
26:57 - now
27:06 - okay
27:07 - now let's uh write the chord for
27:10 - catching the egg which means egg hits
27:13 - the basket
27:15 - so
27:16 - in script.js
27:18 - so
27:18 - if check it hits the floor and
27:21 - say why is this okay
27:25 - let's write it here or or
27:28 - check
27:31 - egg
27:32 - heads
27:36 - basket
27:37 - of egg one
27:39 - yeah
27:41 - okay
27:44 - in both these situations we'll have to
27:46 - set the egg to initial position
27:49 - okay so check it gets a basket
27:55 - function
27:56 - check it hits the basket
28:02 - so in order to do that check whether
28:04 - if
28:06 - collision of
28:08 - egg coma
28:10 - basket
28:12 - we can
28:14 - return to
28:16 - else
28:17 - return false
28:24 - yes
28:25 - when it hits the basket it's going to
28:27 - the its initial position
28:31 - let's update the score also
28:34 - when it hits a basket
28:35 - yes
28:37 - it doesn't show let's
28:40 - update score
28:46 - let's write the function
28:50 - function update score
28:52 - which will update the score we already
28:54 - have the score
28:55 - let's
28:57 - and
28:58 - let's update in the
29:01 - score
29:02 - span
29:04 - dot
29:04 - text
29:06 - score
29:09 - then there's one more place inside the
29:11 - basket that's i think it's score one
29:14 - yeah
29:15 - score one dot text
29:17 - all these variables are inside the
29:19 - videos.js file okay
29:23 - score yeah
29:26 - let's see when it hits the basket
29:27 - whether the score gets updated or not
29:30 - see the score is changing
29:33 - okay now that's done
29:36 - but we have a problem here
29:38 - this is a successful catch
29:41 - but there is one more successful catch
29:43 - if the egg hits the side of the basket
29:45 - also the score increases that's not what
29:48 - we want right
29:50 - so we'll have to
29:52 - add one more condition
29:55 - during the egg hitting the basket the
29:57 - collision of egg and the basket we'll
29:59 - have to check one more condition
30:01 - that is the x top
30:04 - is still
30:06 - less than the basket stop
30:08 - so that
30:10 - we can see that egg is still
30:12 - just above
30:14 - the basket
30:16 - it's already collided but x top is still
30:20 - above the basket so let's add that
30:22 - condition over here
30:26 - okay
30:28 - okay all these will come inside that
30:31 - if
30:33 - we don't have the x stop
30:37 - underscore top
30:39 - at top is
30:42 - percent of
30:44 - egg dot css
30:48 - top
30:50 - yes
30:51 - save
30:52 - and
30:53 - i think all we already have the basket
30:55 - stop
30:56 - here yeah container height minus basket
30:59 - height yes that's static
31:02 - so if
31:03 - egg top
31:07 - is
31:08 - less than
31:10 - basket top
31:17 - okay
31:19 - when the egg collides with the basket
31:22 - make sure the x top is still less than
31:25 - basket stop because when the x
31:29 - top is greater than basket which means
31:31 - it already
31:33 - this situation like the egg
31:35 - had already passed
31:37 - the basket okay we don't want that so
31:41 - that's why we are checking x top is
31:42 - still less than the basket top when the
31:45 - collision happens then update score and
31:47 - return true just
31:49 - check that
31:53 - okay
31:55 - that's not updating this code
31:57 - okay now
31:58 - if you do this yes now that's after the
32:01 - score and that's a
32:03 - that's a catch
32:05 - yes
32:06 - okay now let's
32:09 - i think everything is done for
32:11 - catching the egg operating the score
32:14 - if the
32:15 - egg hits the floor showing bullseye and
32:20 - what oh yeah decrementing the life but
32:23 - then here is a problem it's getting
32:27 - like it's decrementing
32:28 - more to in order to stop that let's go
32:31 - to the script.js
32:33 - this is getting called every time so we
32:35 - don't want that to happen so
32:38 - we'll have if life is greater than zero
32:42 - then do this
32:45 - else
32:48 - say else
32:50 - this is
32:52 - a new
32:54 - stop the game
32:56 - and let's pause the anime id
32:59 - or we'll get the animated there
33:06 - see stop the game
33:10 - go to function.js
33:14 - function stop the game
33:21 - you all know that cancel animation frame
33:23 - is the thing that we are
33:26 - animal id let's see with the
33:29 - five
33:30 - so four
33:35 - three
33:36 - two we'll have to wait
33:39 - two and one
33:42 - if it hits zero
33:46 - yeah
33:47 - the game stopped so that's what we want
33:50 - now let's
33:52 - do the same for all the x
33:56 - but before that
33:58 - let's uh write a small condition here
34:00 - see if this condition
34:02 - then say static to initial position
34:05 - and
34:06 - let's write an else condition here else
34:10 - egg down
34:14 - it's just pretty simple right
34:16 - if okay it's the floor or or it gets a
34:19 - basket then set it to initial position
34:21 - that time we don't want that to come
34:22 - down this is javascript so it won't wait
34:25 - for the if this else is not there it
34:27 - won't wait for the
34:28 - this um
34:30 - execution to happen and it will process
34:33 - this
34:34 - so the egg will come down even if it's
34:36 - the floor or the basket we don't want
34:38 - that if egg hits the floor and or the
34:41 - egg hits a basket we will have to set
34:44 - the egg to its initial position or else
34:47 - we'll have to
34:48 - make the x come down that's it
34:51 - now
34:55 - let's do copy paste this for
34:58 - all those x the x2 and x3
35:01 - see x
35:02 - 2
35:04 - copy
35:06 - paste paste and paste
35:09 - and this will be x3
35:12 - copy
35:15 - paste paste and paste yes
35:18 - okay
35:23 - actually here i'm not using a completely
35:25 - using the visual studio codes all
35:27 - features here okay
35:29 - that's why i'm pasting coping and
35:31 - pasting every time okay
35:33 - now see all the eggs are coming down
35:37 - yes it's it's floor
35:39 - yeah game got over we still got one
35:41 - minus one but it's fine it's okay we can
35:44 - write a conditioner when the score is
35:47 - getting updated if it's
35:49 - not less than zero updated
35:52 - okay now let's see whether the score
35:53 - works or not
35:55 - if i cast the egg yeah
35:57 - it's working fine
36:00 - yeah three four
36:02 - and five yeah
36:04 - so that's one more thing to do because
36:07 - now the
36:08 - eggs are falling
36:11 - it's slow you know throughout the game
36:13 - the same speed
36:14 - okay let's change that
36:17 - we have the egg down function
36:19 - in here
36:21 - we are using a
36:22 - static variable like an integer too
36:25 - we don't want that we can choose the
36:27 - speed over here
36:29 - script.js no variable.js we have already
36:34 - declared this the changes to speed
36:37 - and let's change the speed
36:39 - when
36:40 - some condition is satisfied let's say
36:43 - when the score
36:46 - is a multiple of 10 like 10 if it's 10
36:49 - will increase the speed by one and if
36:51 - it's 20 will increase the speed by one
36:53 - and like that the speed increases
36:56 - so where are we
36:57 - increasing the speed score it's here
37:00 - yeah
37:02 - after increasing if let's check whether
37:04 - if
37:05 - score
37:06 - percent
37:07 - 10
37:08 - is 0
37:11 - then
37:13 - speed
37:17 - plus plus
37:18 - so in order to test this let's change
37:21 - this to two
37:26 - one
37:27 - and get that egg
37:29 - two see the
37:31 - speed increase four yeah increase
37:34 - seven increase yeah that's we
37:37 - have only given life
37:39 - to five okay so this changes to ten
37:43 - so that increase and
37:47 - one important thing
37:49 - should be a maximum speed
37:52 - otherwise we won't be able to
37:57 - we won't be able to uh
38:00 - see whether the egg is has collided with
38:03 - the floor or basket
38:06 - okay so
38:09 - let's do that
38:11 - and and
38:13 - score is
38:15 - less than or equals
38:19 - max core
38:21 - max
38:22 - no no it's not score
38:24 - it's speed
38:27 - speed is less than max speed
38:29 - so there's a maximum speed for the x if
38:31 - it's
38:34 - more than that we won't be able to this
38:37 - is just a
38:38 - div and collision so
38:40 - if it moves
38:42 - with
38:43 - more speed the
38:46 - function will not be able to
38:49 - check in that moment whether it has
38:51 - corroded or not
38:52 - okay that's the issue here we
38:56 - so we're dynamically changing the speed
38:59 - we
39:00 - are again we are updating the score
39:03 - we're decrementing the life
39:05 - everything now let's when the game is
39:08 - over let's show the reset button that's
39:11 - very easy
39:13 - restart dot
39:15 - slide down let's give an animation
39:18 - slide down
39:23 - okay the next fall
39:27 - okay it came down but nothing happens
39:29 - when we click that
39:31 - let's
39:33 - restart
39:36 - dot
39:37 - click
39:39 - function
39:43 - just reload the location
39:53 - okay
39:55 - yes
39:58 - yeah
39:59 - yeah restart is working fine
40:02 - so
40:04 - that's it
40:09 - isn't that simple
40:11 - that's what i said it's very simple
40:14 - um
40:14 - you can play with that you can play with
40:17 - the life you can increase the life you
40:19 - can change the way the score is
40:21 - or life is reduced or the score is
40:24 - increased and the speed is increased so
40:27 - feel free to play with that i'll update
40:30 - the
40:30 - code in github and provide the
40:32 - description provide the link in the
40:34 - description so if you like this game and
40:37 - if you
40:38 - write like my tutorials please feel free
40:41 - to like the video share the video and
40:44 - subscribe to my channel
40:47 - so
40:48 - until next time
40:49 - bye