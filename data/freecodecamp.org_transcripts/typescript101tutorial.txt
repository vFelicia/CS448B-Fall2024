00:00 - what we're gonna be going over today is
00:01 - typescript what is it how to get started
00:04 - we're gonna be even talking about the TS
00:06 - link config and setup and we're gonna be
00:09 - talking about the major parts of
00:10 - typescript so that you know what to
00:12 - expect in what it all contains so what
00:15 - is typescript and why should we use it
00:18 - superset of JavaScript it was built by
00:21 - Microsoft I so it's being maintained by
00:25 - Microsoft it's an open source project
00:27 - more or less so you have a lot of the
00:29 - community contributing it to it it's one
00:31 - of Microsoft's open source items that
00:34 - they they tend they they now are going
00:36 - in open source direction which is pretty
00:37 - cool at the end of the day what you get
00:41 - back is regular JavaScript one of the
00:44 - benefits to writing typescript as it
00:48 - tends to be less error-prone we're
00:50 - trying to apply static types to a
00:52 - dynamically typed language and that
00:54 - eliminates amer while yeah the concise
00:57 - it's adding a little bit more
00:58 - development time now he could argue that
01:03 - development time is made up because it
01:05 - lends code to be more readable and thus
01:08 - more maintainable as time and time goes
01:13 - on we have seen as developers so what
01:16 - are we going to be covering well we're
01:17 - going to showcase how to get started how
01:19 - to assign types on variables how to
01:22 - assign return types on functions we're
01:24 - going to be talking about classes a
01:25 - little bit although this is more that's
01:27 - more of an es6 item we're gonna be
01:30 - talking about string enums and number in
01:32 - ohms we're also going to be talking
01:34 - about interfaces intersection types
01:36 - briefly about access modifiers and then
01:40 - we're going to be talking about how to
01:41 - set up TS lint so that if you are doing
01:43 - typescript any want your code to to be
01:47 - more readable and maintainable how you
01:49 - can make sure that it's even better in
01:51 - adhering to the latest standards so
01:53 - that's what we're gonna be diving into
01:54 - let's go ahead and jump right in
01:57 - [Music]
02:03 - all right so to get started in
02:05 - typescript first thing you're gonna want
02:07 - to have as a node installed if you don't
02:09 - already you can use the current or the
02:12 - latest it doesn't really matter whatever
02:14 - works best for you it's all gonna work
02:16 - and then from there well I'll be using
02:19 - the Visual Studio code text editor you
02:21 - can use whichever one you want but often
02:24 - times people ask me what text editor I
02:25 - prefer what I use this is what I use for
02:27 - quite a few reasons I like the
02:29 - extensions I think it's very clean then
02:31 - intellisense is great in it and they
02:33 - also have a debugging tool though I
02:34 - don't use it very often so to get
02:36 - started with typescript the first thing
02:38 - that you need to do now that you have
02:39 - known install just go ahead and run this
02:41 - command I'll be using git bash if you
02:45 - have another terminal you can use that
02:48 - as well it doesn't really matter so
02:50 - we're gonna install typescript globally
02:52 - that's what this G is that's basically
02:54 - just gonna mean that we're gonna have
02:55 - access to the typescript commands moving
02:59 - forward in our application this will
03:01 - take just a second and let's go ahead
03:03 - and open up our text adder and get
03:05 - started alright so now that we have a
03:09 - project open let's go ahead and create a
03:11 - new file here to create a typescript
03:13 - file all you have to do is instead of
03:15 - creating an javascript file with the Jas
03:16 - file extension we're going to be using
03:18 - ATS in this case we're just gonna call
03:20 - it example that TS now we have access to
03:25 - typescript essentially now with Ariel
03:27 - compiler or not that that's a whole
03:28 - nother story but let's talk about you
03:31 - know how we might use typescript for
03:34 - instance in a very basic way in
03:38 - JavaScript when we were potentially
03:40 - create an array like so we'll call this
03:43 - example we would then go and set this
03:45 - array and we could have maybe some
03:48 - numbers in it now the JavaScript itself
03:53 - is gonna say hey I see this is an array
03:57 - no big deal but you see now when we
03:59 - hover over this it actually is
04:00 - inheriting a type here of a number array
04:04 - an array of numbers right now this is
04:07 - called implicit typing where
04:10 - when we're instantiating an object it's
04:11 - going to look at it and if it can
04:14 - inherit its type
04:15 - there's also explicit typing where you
04:17 - can say look I just want to actually
04:19 - tell it exactly that this is going to be
04:23 - a number array or perhaps it is going to
04:26 - be an array of several things including
04:29 - bullying's right so true and you'll
04:33 - start to see right now the power of type
04:35 - scripts were hey this is supposed to be
04:36 - a number array we have instantiated the
04:38 - type of saying look cannot you can get
04:42 - this air here saying look you're trying
04:43 - to do something to a number array that
04:46 - isn't a number and one way that we can
04:49 - modify this is to add a or property as
04:53 - well as a use any and we'll talk about
04:56 - what that is right now okay so sometimes
04:59 - because of the nature of JavaScript when
05:01 - we're dealing with dying a dynamically
05:03 - typed language we're trying to make it a
05:05 - little bit more static and start
05:07 - assigning types is we'll have a race
05:10 - where we may not have all the same data
05:12 - type so one way that we can handle that
05:14 - and this is with input and output we can
05:18 - use the or operator in our case here
05:20 - it's just a single pipe like so and then
05:23 - we'd say number or boolean array right
05:27 - now what this does here is to say hey we
05:31 - are expecting an array it could be
05:33 - number values it could be boolean values
05:35 - either one but it couldn't be for
05:37 - instance a string value right we're
05:39 - throwing in something like that that's
05:40 - not going to break it because those
05:41 - types don't exist in this array now
05:44 - let's go ahead and just get rid of this
05:46 - and there's this any property I want to
05:49 - talk about as well where any
05:51 - essentially is the way of doing the
05:56 - old-school JavaScript to a degree right
05:57 - so all we're saying here is that this is
05:59 - an array the values and it could be
06:01 - anything we can also go ahead and assign
06:04 - any directly and say look this may
06:07 - change this may not be good this may be
06:09 - a down the road you know if this was a
06:12 - let this may actually go and become a
06:15 - string and that would be okay in our
06:17 - instance because we have said that is of
06:19 - type any now if we said this was an in
06:22 - ear
06:23 - ray we'd get an air here and say look
06:25 - this is not assignable you can't make a
06:27 - array a string it just doesn't make
06:30 - sense a week we don't want that and
06:32 - that's the power of types to give you an
06:34 - idea of hey how to prevent things like
06:36 - that it's also going to stop you from
06:39 - doing sort of crazy things if you're
06:41 - caught up in the moment where you're
06:43 - like hey I want to do an example dot map
06:45 - then you return an array and you can do
06:47 - some stuff right but if you try to call
06:52 - map let's say let's say we actually
06:54 - typed this all out element blah blah
06:57 - blah right and we write here we return
07:01 - you know element +1 or something right
07:06 - and let's say this was a number array
07:08 - right now that would work and we'll go
07:09 - ahead and get rid of that boolean so we
07:11 - could get a new value here so the x2 and
07:17 - we instead say you know what I want to
07:19 - change this year to a string I'm gonna
07:22 - say this is a string and I set this
07:23 - equal to an empty string you're gonna
07:25 - catch this air here where it say hey say
07:29 - right right there is no map map does not
07:31 - exist on type string it only exists on
07:33 - type object so what happens here is we
07:36 - don't have to wait for our code to run
07:37 - and compile and then you know hopefully
07:39 - this function fires off and then we get
07:41 - a console.log air our Visual Studio code
07:44 - and the intellisense and typescript is
07:47 - intelligent enough to tell you hey we
07:49 - have an error let's look at what
07:51 - happened here in regards to our types
07:53 - and be able to fix it so that we don't
07:56 - have to have those errors go into the
07:57 - code now so far we've talked about
07:59 - assigning types to variables but you can
08:01 - also assign types to functions as well
08:04 - right so let's say we have a function
08:06 - called
08:07 - add and it has a number one and a number
08:12 - and what we want to do is return num1
08:17 - plus num2 so not only can we assign it
08:21 - on variables assigned types on various
08:23 - it's going to zoom this in a little bit
08:26 - we can also go ahead and assign it on
08:29 - parameters where we are expecting a
08:30 - number here and we are expecting a
08:33 - string here
08:34 - for instance maybe we're gonna move it
08:36 - to you know a number or a string so we
08:39 - now can assign that but not only that we
08:42 - can say in this function we expect it to
08:45 - return a number throwing a colon on here
08:48 - as well so now this function is a lot
08:51 - more detailed it gives you a better idea
08:53 - of it's more descriptive in terms of
08:56 - what this function is actually supposed
08:58 - to do and sort of the type metadata here
09:01 - if you wanna look at that way and we
09:02 - have some checks in here so where if we
09:05 - say hey let's return as a string it's
09:07 - gonna say you know hold up hold up Dylan
09:10 - this type number is not assignable
09:13 - string because this isn't working here
09:14 - so maybe you'd go in and you'd say you
09:17 - know what let me couldn't I need this as
09:19 - a number thanks for reminding me and now
09:21 - I'm gonna convert it to a string so you
09:23 - have that additional detail to a
09:26 - function as well checks dry cleaner more
09:29 - descriptive code that's easier to read
09:30 - and maintain are one of the great things
09:33 - about typescript is everything that
09:34 - we've talked about is optional in
09:37 - typescript it's just another way of
09:38 - types are optional now you can write in
09:42 - the TS linen and well showcase TS lint
09:44 - in a little bit later how we might be
09:46 - able to make it not optional if you
09:49 - wanted to but by default
09:51 - typescript is optional which means
09:53 - everything we're doing you don't have to
09:54 - do it's additional and I think you
09:56 - should because it's shown to be better
09:59 - code in terms of less airs going in
10:01 - production but what you need to remember
10:03 - is typescript is just a superset of
10:05 - JavaScript it's just JavaScript
10:07 - to the next level essentially and so say
10:11 - we wanted to compile this down and
10:14 - that's what would happen typically
10:15 - you'll be working with like web pack and
10:17 - a production environment and it would
10:18 - just take your type script files and
10:20 - compile them the JavaScript when it does
10:22 - your build that goes out and is actually
10:23 - being used in production and so in our
10:26 - case you know our production application
10:29 - is just our example here so how might we
10:31 - manually do this so that we could see
10:33 - hey I actually want to see that it is
10:35 - just JavaScript that's happening here
10:37 - and nothing nothing crazy we're just
10:40 - assigning some additional data to Djoser
10:42 - well we can use this TS c command which
10:45 - you'll have if you finish installing
10:48 - it types is the typescript package we
10:51 - did earlier and then you name the file
10:53 - right so in our example here we would do
10:56 - example we're already in this folder
10:59 - using our terminal here dot TS and
11:04 - you'll see a second later we now have
11:06 - this example J's file notice how there's
11:09 - no types
11:10 - notice how nothing has really changed
11:11 - except the fact that we removed our
11:13 - types from this and it has compiled it
11:16 - to something that the browser your
11:19 - browser knows and can work with so keep
11:22 - that in mind is what we're writing in
11:24 - typescript is we're adding additional
11:25 - things to provide context for
11:27 - development purposes to write cleaner
11:30 - and better code but at the end of the
11:32 - day javascript itself is a static ly
11:35 - typed language that doesn't fully
11:38 - understand a lot of the more
11:40 - complexities when it comes to types and
11:42 - object-oriented programming so you can
11:44 - see this is as to me Tucker is very
11:48 - readable but even more readable when it
11:50 - compiles just down to JavaScript so
11:52 - let's say for whatever reason you don't
11:54 - want to create a paid typescript file
11:56 - and you're not ready to make it so you
11:58 - just want to do maybe some type checking
12:00 - in your code what we could do here is we
12:04 - can use this slash slash and go ahead
12:07 - and throw at TS - check you'll notice
12:10 - there's some other ones there's ignore
12:12 - that essentially lets you ignore type
12:14 - checking on that there is I don't even
12:17 - what no check does I don't ignore that
12:20 - but TS check here and this will say hey
12:22 - let me just do a check to see if there's
12:24 - any errors in your code right here so
12:28 - let's say that we wanted to we had a
12:31 - number for instance or we said hey let y
12:36 - equal 5 and then normally you'd say yeah
12:39 - let's go ahead and map that and that's
12:43 - what we want to do we want to map
12:44 - something and then
12:46 - I have an element's here don't want to
12:48 - return true or something like that and
12:51 - it's a a does not max on type number the
12:54 - only reason that shows up is because we
12:57 - have our at TS check here to say hey
13:00 - treat this javascript file as a type for
13:02 - a file so that we can at least make some
13:05 - checks that go along with it it's not
13:07 - going to add more to the readability of
13:08 - the code which is equally important but
13:11 - is the very least is gonna say hey are
13:14 - there any clear heirs and to in this
13:17 - moment guys if you're writing JavaScript
13:18 - I would encourage you to have this on
13:20 - here so that you can sort of you know
13:22 - see hover over this and say look map
13:25 - does not exist on type number you're
13:26 - like oh let me let it click in a little
13:29 - bit why that is and you might you might
13:31 - pick up a few things that way so that's
13:33 - TS check which i think is really
13:34 - important so emails are something that's
13:37 - new to JavaScript and we're let's say we
13:40 - wanted to store a set of data that
13:43 - reference something and like we'd want
13:46 - it to be the same throughout the
13:47 - application one way that we might be
13:50 - able to do that is with a number or a
13:51 - string enum we're gonna go ahead and
13:54 - create a a new file here and we're just
13:57 - gonna call this example dot enum dot TS
14:03 - and we're going to export here a enum
14:08 - and this that we're gonna what are we
14:11 - gonna call this we'll call these art
14:13 - numbs you know and what's gonna have in
14:19 - here is let's go ahead and call this
14:21 - number one and you'll notice that by
14:23 - typically when you're dealing with enums
14:25 - it's going to be an all capped enum name
14:27 - as well as all cap properties and so
14:30 - we'll call this number one and then
14:32 - we'll call this num too and what this is
14:38 - going to be able to do if we go ahead
14:40 - and import this into our type script
14:43 - file here and this is what we call this
14:47 - our nomes enum import known genome from
14:54 - example you know now we'll have access
14:57 - to it right so what this is gonna do is
14:59 - say look whenever we have our whenever
15:01 - we instantiate numsy namnam you know
15:04 - num1 this is essentially going to be
15:06 - equal to one and this one is essentially
15:09 - going to be equal to two excuse me I
15:12 - went off the trail there this is
15:14 - actually zero on one because we never
15:15 - start anything at one and two I was like
15:17 - that's weird why did I say that but
15:19 - you'll see here that this is essentially
15:21 - zero and one now we are studying the
15:23 - values here
15:23 - but even if we delete these values like
15:25 - so our number enum here will still have
15:29 - those values and so we can now assign an
15:31 - enum as a type as well so let's go ahead
15:34 - and say we want this to be a nums enum
15:37 - and we want this to be a nums enum as
15:40 - well and what we want to do here is just
15:45 - add those two numbers so what we could
15:47 - do is let's say we want to call this
15:49 - function add and we're gonna pass in
15:52 - nums enum dot num1 and num2
15:56 - num2 and now we're getting those values
16:00 - from the enum and if we actually tried
16:02 - to just pass in a number here which
16:04 - passed in three I'm surprised that
16:08 - actually worked because we should be
16:10 - passing in just an own genome but it
16:12 - gives you an idea that we should have
16:14 - that I think if we had a TS lint this
16:16 - would be a little bit more strict I
16:17 - think it's being lenient because it's a
16:19 - number type but what we would get after
16:21 - we compiled this right so let's go ahead
16:23 - and we already talked about how to
16:24 - compile with the TSC command and it's
16:27 - gonna build it let's go to our example
16:29 - Jess you also notice that it oh I think
16:31 - it's doing that for all of our folders
16:33 - in the area but you'll see here this is
16:36 - a lot more complicated JavaScript but
16:38 - for us to get a similar item of what
16:41 - we've got in our example enum TS right
16:44 - here which is a very readable
16:45 - much easier thing to understand this is
16:47 - actually what we would have had to do to
16:49 - be able to use it which is kind of crazy
16:51 - right because I don't know what that's
16:55 - doing at first glance that's that's
16:57 - craziness but here it's a little bit
17:00 - more intuitive right granted
17:04 - so part of typescript is actually taking
17:06 - new JavaScript and compiling it to older
17:09 - versions for so that even though it's
17:12 - less readable it is more functional it's
17:15 - not gonna break on bootleg browsers like
17:16 - Internet Explorer so here you'll see
17:19 - we'll add these numbers together and if
17:21 - we're to go ahead and run a quota for
17:25 - instance on this type share file I'm
17:29 - gonna save and everything and we consul
17:32 - blog I don't - out a little bit it
17:37 - console.log the return of this add
17:39 - statement you'll see that we get 1
17:42 - because this is 0 and this is 1 and it's
17:45 - getting those values from our genome now
17:47 - if we were to change these values and
17:49 - here or there it would reflect it
17:50 - because we're importing this but that's
17:52 - how we would create a a number he know
17:55 - now you can also create string enums
17:58 - these are a newer addition to typescript
18:00 - one reason you might have this is let's
18:02 - say that you have a drop-down that's
18:04 - never gonna change but you want the
18:06 - values to be all in one location and you
18:09 - want them to the users gonna select them
18:12 - and maybe at one day you'll edit them
18:14 - and you're using various files you could
18:15 - use an enum for that I've done it with
18:18 - like country codes and things like that
18:19 - and currency codes and where I wanted to
18:22 - keep a list of it so you could all you
18:24 - have to do here is now set this to a
18:26 - value this could be like hello and this
18:30 - could be a goodbye
18:31 - and now you've created an enum that's
18:33 - gonna break our code right because well
18:36 - in our example TS with that s files link
18:39 - apology but we now have a string enum
18:42 - that we can reference as well you can
18:44 - also define local types as well now
18:47 - there's sort of global types you can
18:49 - define define and those are more so
18:50 - called interfaces and we'll showcase
18:52 - that in a little bit let's say we wanted
18:55 - to define a type that we're going to
18:57 - only use in this file could use it at
18:59 - the type command and we'll just say
19:00 - we'll call it num num example and this
19:06 - is going to be equal to an object with a
19:08 - property and the scene being numb one of
19:11 - type number and this will be numb two of
19:14 - type number
19:16 - now we're not assigning values here
19:17 - we're defining a type so this is the key
19:21 - and this is the type of the key there is
19:23 - no value we are creating a type here
19:26 - with this type keyword and now instead
19:28 - of using our enums like we were using
19:30 - before perhaps we wanted to modify this
19:33 - to only take in one value and that value
19:36 - would be we have changes to the nomes
19:39 - right wanted to reflect what our code is
19:41 - here where our value would be our num
19:44 - example and now when we try and target
19:48 - this value here and we say nums you'll
19:51 - see then we hit this dot the num1
19:53 - property and the num2 property type
19:56 - exists because we've defined it in our
19:58 - num example type so we can do num num 1
20:01 - and num stop num two and then of course
20:04 - we have to go ahead and if we want to
20:07 - throw a value in here we have to throw a
20:08 - value in here that makes sense right we
20:10 - have num1 and then maybe that's 1 and
20:13 - you'll notice we're still getting here
20:15 - because we don't have all the values in
20:17 - here to showcase that but now that we do
20:20 - and it matches this type everything's
20:23 - hunky-dory and we're good to go so
20:25 - that's how we would define a type now as
20:28 - I mentioned this type here is good only
20:30 - in this local file now a better way of
20:33 - defining a type and sometimes in the TS
20:35 - lint and the standard seems to be to get
20:38 - away from defining types and more so
20:39 - defined interfaces so we would do it
20:42 - like so we'll say num example dot
20:45 - interface dot TS now this is just a file
20:49 - naming convention that I typically
20:51 - follow but we want to export a interface
20:56 - usually interfaces are denoted with an I
20:59 - in the name of the class too to let
21:03 - everyone know that it is a interface
21:05 - it's not required but we're gonna go
21:08 - ahead and go with it numbs example so
21:13 - now that we have that we could go ahead
21:15 - and pass an object here which is num1
21:17 - and that's a number and then num2 and
21:21 - that's a number and you're saying a
21:24 - gentleness is very similar to what we
21:26 - were doing just a moment ago with the
21:28 - type and that is true however
21:30 - types are declared within the file and
21:32 - this this ABS a little bit of a
21:34 - readability issue as well as we want to
21:36 - keep our code dry we don't want to
21:38 - repeat ourselves so if there's ever an
21:39 - instance in which we would need to use
21:41 - this this interface again this
21:43 - essentially this type here we can whilst
21:47 - we can't reuse types so that's one way
21:50 - one one main difference between
21:52 - interfaces and types really types
21:54 - there's essentially being deprecated at
21:57 - this point in time so I would say stick
21:59 - with interfaces if you're looking to do
22:00 - that so there's also well access
22:03 - modifiers which are an object or
22:05 - anything that's new to JavaScript as
22:07 - well because we don't really have them
22:09 - and they aren't really real in the sense
22:13 - of like hey this is a development access
22:15 - modifier it doesn't really matter once
22:17 - it all compiles down but it's equally as
22:19 - important and eventually they may come
22:22 - to exists as static types will
22:25 - eventually come to exist in JavaScript
22:27 - in one way or the other so let's say we
22:29 - have a class here and we'll call this
22:31 - example dot class TS classes are
22:34 - something that got added into es6 and we
22:37 - have a great way of creating classes in
22:39 - in typescript as well so it's very
22:42 - similar export class so that we can use
22:44 - it if we wanted to right and our class
22:46 - will just call this example class and
22:49 - we're gonna create some properties by
22:51 - default if we don't assign anything we
22:53 - say hey what do we want property let's
22:55 - say this is a person instead of an
22:57 - example we'll call this our person class
22:59 - and what might a person property be I
23:02 - might have something like a first name
23:04 - and that might be a string and then we
23:10 - might have something like a last name
23:11 - that might be a string and then we might
23:13 - have something like an age and that will
23:15 - be a boolean so we've defined our class
23:18 - here which looks very similar to
23:20 - interface at this point in time because
23:22 - we haven't added all the items that a a
23:25 - class essentially allows us and by
23:29 - default these are what are called public
23:30 - properties what public means and you
23:33 - could put them on here and typically I'd
23:34 - like to I like to be more descriptive
23:37 - with my code some people will say I'd
23:38 - rather just look at the code and be able
23:40 - to see that that's what it does but
23:42 - these are public properties that mean
23:44 - that the user when they're clicking on a
23:47 - page can access it and that other parts
23:50 - of the application can access it there's
23:53 - also things called private properties
23:55 - private properties and let's say age
23:58 - will say bank account all right yeah
24:00 - what nobody wants to share that and this
24:02 - will be a number this is something that
24:04 - within your application you can use but
24:07 - the user who would be consuming the
24:09 - application the client wouldn't be able
24:10 - to call this function that's really hit
24:13 - at the end of the day and so these are
24:15 - usually functions that other functions
24:18 - are going to call to hide some of your
24:19 - code and properties for that matter
24:22 - there's also protected as well which
24:26 - essentially means that it's going to be
24:28 - inherited from another another class in
24:31 - this case we don't that's the only way
24:33 - you can access to it I won't worry too
24:35 - much about that but there is another
24:37 - great one which I called read which is
24:39 - read-only so in our case first name and
24:43 - last name once we set a first name and a
24:47 - last name is not likely it's going to
24:49 - change right so we want to have the
24:52 - read-only access modifier meaning that
24:54 - once it's set you can't reset this
24:58 - elsewhere you can't update this
24:59 - elsewhere in the code because this is a
25:02 - read-only property it can only be read
25:04 - it can never be written to so those are
25:06 - some some t eslint access modifiers and
25:09 - of course if you're not familiar with
25:10 - you you know constructors you can pass
25:13 - in data and set these properties and
25:15 - your TS link class as well so you would
25:19 - do something like oh well this stuff
25:22 - first name is equal to data first name
25:26 - and then you could create public or you
25:30 - know public example public functions or
25:35 - you could create private functions as
25:37 - well as you know protected so these are
25:42 - how you might use them on functions as
25:44 - well so I want to talk about decorators
25:46 - a little bit these are an experimental
25:48 - part of JavaScript they eventually may
25:50 - make their way into it they're currently
25:53 - in typescript in angular they're used
25:56 - pretty extensively and I
25:58 - just wanted to give an example we're not
25:59 - going to talk about how creating a
26:00 - decorator and all that sort of stuff
26:02 - because it gets a little academic when
26:04 - we go into it and honestly I haven't
26:06 - found any use cases in my own personal
26:08 - like vanilla JavaScript where I need to
26:10 - create a decorator but they are used in
26:12 - angular so I think it's worth mentioning
26:13 - so a decorator is usually denoted by
26:16 - this @ symbol and then this a word in
26:20 - our case it's the component decorator
26:22 - and this what the point of this is is it
26:25 - will normally go before your classes and
26:28 - it adds some metadata that maybe your
26:32 - class is going to need to be able to
26:35 - perform and use and stuff that's not
26:39 - going to change you know in our case it
26:42 - adds a selector it adds a place where
26:44 - this is going to load in the view and
26:47 - then add some CSS files that are gonna
26:50 - be with it so you can make a decorator
26:51 - do about just store about any data they
26:55 - connect and do things but I wanted to
26:58 - bring it up we're not gonna create it
26:59 - again but I think it's worth just
27:00 - mentioning all right let's talk a little
27:02 - bit about intersection types just a
27:04 - little bit more of an advanced thing and
27:05 - I honestly have never used a look again
27:07 - hey there's a video where we're trying
27:09 - to learn so let's add some stuff in here
27:11 - do use so let's say that we had we
27:14 - imported our interface that we created
27:16 - earlier I'm going to go ahead and import
27:20 - with all this items example from
27:28 - not slash another example that interface
27:30 - so what we can do here is we can
27:33 - actually merge items together merge
27:35 - types together and one thing to be
27:39 - careful of is if you are overriding
27:41 - property values which is why it's
27:44 - usually frowned upon when you're doing
27:46 - this but in our example we have a number
27:50 - one and number two property so let's go
27:51 - ahead and close that close that jump
27:54 - back in here and let's change this to
27:56 - number three and number four so we don't
27:58 - have any any issues here but what we can
28:02 - do is let's define a value here and we
28:06 - can actually create a new type where we
28:09 - say this type and we'll call this
28:13 - intersection type intersection is equal
28:16 - to the items example and the num example
28:25 - type that we defined as well and what
28:28 - this is essentially going to do is give
28:29 - it get combine those two together and
28:33 - allow us to have those values so when we
28:36 - go ahead and we type intersection here
28:39 - it's in Section I guess what it's going
28:42 - to expect is that we have num 3 and this
28:45 - is you know throw number in and number 4
28:48 - and we throw a number in as well so you
28:51 - can combine types as well although there
28:54 - found a reason and do it something you
28:56 - can do just be careful I guess is my
28:59 - word of caution
29:00 - now hopefully by now you've kind of seen
29:02 - the power of typescript and we're gonna
29:05 - take it one step further we've covered
29:07 - everything I wanted to cover about
29:08 - typescript thus far but another thing
29:11 - that I wanted to talk about is setting
29:12 - up TS Lynne if you've never used a
29:14 - linting tool before what it basically is
29:16 - like Jaya Jaya slant as well is a way to
29:20 - say hey I want my code to stick to a
29:22 - standard format and so that there's a
29:25 - space here this would be a linting error
29:27 - that's dirty code in that there's no
29:29 - semi clone here that would be in lint in
29:31 - there it's dirty code and make sure that
29:33 - I'm writing code like a developer should
29:36 - is really the point of a TS lint array
29:39 - linting option we're gonna go
29:41 - and get you started so that you can
29:43 - start writing code that when employers
29:46 - look at they can see that is of a
29:47 - professional nature
29:49 - now again I'm using Visual Studio so
29:51 - where you can get started to search for
29:53 - TS lint here you'll see it has four
29:55 - point seven million downloads it's
29:56 - probably one of the most used eye items
29:58 - there is so just go ahead and install
29:59 - that in the visual studio code to get
30:02 - going here and we'll talk a little and
30:04 - we're gonna have to reload and we'll
30:06 - talk a little bit about what this is
30:07 - gonna do for us at the end of the day
30:09 - okay after you have the extension
30:12 - installed what we're gonna do is we're
30:13 - in your CTS Lane - - and NIT command to
30:18 - install okay now that we have the TS Lin
30:22 - extension install we actually need to
30:23 - install the TS Lane NPM package globally
30:27 - so we're just gonna do NPM install - gee
30:32 - remember how we did - I served in this
30:34 - case it's gonna be Tia slow so once that
30:36 - stone installing should just be a second
30:39 - here we are now going to go ahead and
30:43 - create a TS lint file using TS lint - -
30:47 - and knit and you'll see here we jump
30:51 - back to here we have this TS link json
30:53 - now what this is basically going to give
30:55 - us is it's going to have some default
30:58 - rules and a bunch of other things that
31:01 - we can override just set what rules we
31:03 - find important when it comes to our
31:05 - linting you'll see already when we jump
31:07 - into some of our files we already have
31:10 - airs here and it'll tell you when you
31:12 - hover over it trailing whitespace in
31:14 - this case it means that we have actually
31:16 - spaced out manually so spaces here that
31:19 - the compiler are saying need to exist
31:21 - and that we don't need that so let's
31:23 - delete that and then you'll see here
31:24 - what is this this block is empty there
31:27 - should be no empty blocks of code right
31:29 - that shouldn't be a thing so it's
31:32 - telling us like hey put code here or get
31:34 - rid of it same thing here we can have
31:36 - that and we could absolve this by
31:38 - putting a comment if we need it an empty
31:40 - block or there's ways to disable TS lint
31:43 - so you also see like we have a white
31:45 - space right here this is not clean code
31:48 - to have these spaces now there's a lot
31:49 - of TS lint rolls and you can override
31:52 - them and in some cases you'll see here
31:54 - like an
31:56 - all files should end with a a extra line
32:00 - at the end there's some compiler uses
32:02 - for that but that's the convention but
32:05 - you can you can hover over this and
32:07 - they'll tell you so there's a couple
32:09 - things that you can do you can do /t
32:11 - eslint : disable and this will disable
32:15 - all the TS late
32:17 - tracking while you're developing from
32:20 - that line down in this folder so again
32:23 - you can go and set some custom rules for
32:27 - your TS lint they're going to have the
32:28 - recommended ones and that's what I
32:30 - recommend if you're using typescript you
32:33 - should probably be using and unless
32:35 - you're working in a production
32:37 - environment that has a different
32:38 - standard for whatever reason what the
32:41 - language itself recommends it's
32:43 - Microsoft maintains TS lint it's
32:45 - Microsoft who makes typescript so that's
32:47 - my personal opinion but if you did want
32:50 - to set rules or override rules for your
32:52 - TS slin this is the the page where you
32:55 - can go and get all of it and you can see
32:57 - there are a ton of rules of what you can
33:00 - modify here and every new iteration of
33:05 - typescript has additional rules as they
33:08 - are getting stricter or modifying some
33:10 - things and and going from there so keep
33:12 - that in mind when you are working with
33:15 - typescript that TS lint and if you were
33:17 - saying look down I didn't sell me on top
33:19 - security I don't know how I couldn't but
33:21 - you didn't sell me on the importance of
33:23 - it but if you're just like I'm sticking
33:26 - with JavaScript fine that's completely
33:28 - fine you should probably be doing
33:30 - linting in your javascript and you can
33:32 - get ajs lint or Annie s lint package you
33:36 - can see here is lint has 7.1 million
33:38 - downloads and it's being used quite
33:40 - often as well and it works similarly
33:42 - it's just a little bit of setup so I do
33:44 - encourage you to do that but as always
33:46 - guys I hope you enjoyed this video I
33:48 - hope you found it helpful instructional
33:50 - and I hope by the end of it you can get
33:52 - up and get going with typescript I've
33:53 - actually been loving it for the last
33:55 - eight nine months I've been working in
33:57 - it and I plan to continue working