00:00 - while and do while loops are very
00:03 - similar they both allow you to repeat
00:06 - code the while loop i have an example of
00:09 - that right here the while loop creates a
00:11 - loop that executes
00:12 - a specified statement as long as the
00:15 - test condition evaluates to true
00:18 - and the condition is evaluated before
00:20 - executing the statement so
00:22 - while n is less than five while this is
00:25 - true it's going to run all these
00:27 - statements in in the curly braces and
00:31 - in the statements it's going to add one
00:34 - to n and it's going to console.log in
00:37 - equals n
00:38 - so
00:40 - the important thing to know about while
00:42 - and do while loops is that it's not
00:44 - automatically going to increment your
00:47 - counter like like what happens in a for
00:49 - loop so you have to make sure you do
00:51 - that right inside the loop
00:53 - the do while loop is extremely similar
00:56 - except this is going to create a loop
00:59 - that executes until
01:01 - this test condition
01:03 - evaluates to false so the condition is
01:06 - evaluated after executing the statement
01:09 - resulting in this these statements these
01:11 - are going to run at least one time
01:14 - so it's going to do
01:16 - this stuff right here
01:19 - while
01:20 - i is less than five and then when i not
01:23 - less than five anymore it will stop
01:25 - so one of the key differences is that
01:29 - this
01:30 - is always going to run at least once
01:33 - it's always going to do this whole thing
01:34 - here and then see if i is less than 5
01:38 - and then if that is we'll stop
01:40 - here it's going to check if n is less
01:43 - than 5 at the beginning and if it is
01:45 - it's going to run this code in here so
01:47 - let me run that now so you can see what
01:49 - happens
01:50 - so you can see n equals 1 2 three four
01:53 - five i equals one two three four five
01:56 - now that looks exactly the same but now
01:59 - if i
02:00 - change this in to five so it's going to
02:02 - start at five
02:04 - um it's going to be while n is less than
02:06 - five oh n is already not less than five
02:08 - so it's not going to run this but here
02:10 - it's going to run this whole thing and
02:13 - then it's going to check if i is less
02:14 - than five and it's going to stop so
02:16 - let's see that
02:18 - see it just says i equals six which is
02:21 - we wouldn't even have i equal 6 last
02:22 - time but remember i is going to start at
02:24 - 5 it's going to increment go up 1 and
02:27 - then a console that's it's 6 and then
02:30 - we're going to stop because i is
02:32 - not less than 5. so while i is less than
02:35 - five well i is not less than five so
02:37 - it's going to stop so let's change this
02:39 - back to zero
02:41 - and i'll just show you a few more quick
02:42 - things you can also use break and
02:45 - continue
02:46 - so if you use continue
02:49 - if n
02:51 - equals three
02:55 - okay we have in if in equals equals
02:58 - three then continue
03:00 - the continue command means to not run
03:03 - any code after that command and just go
03:05 - to the next iteration of the loop so if
03:09 - you have continued it's going to skip
03:10 - anything below the continuous going to
03:12 - skip this it's just going to go back to
03:13 - the top and do another check
03:16 - if n is less than five and then it's
03:18 - going to increment in again so let's see
03:20 - that
03:22 - okay look right here n equals one equals
03:25 - two n does not equal three and equals
03:26 - four and equals five because it skipped
03:29 - and equals three if you use break here
03:33 - break is going to just jump out of the
03:35 - loop completely so it's not going to run
03:37 - any more iterations of the loop so let's
03:39 - see that
03:41 - okay right here with n equals 1 n equals
03:43 - 2 we don't have n equals 3 we don't have
03:45 - n equals four we don't have an equals
03:46 - five but it's broken out of the loop
03:48 - now here's a pro tip if you accidentally
03:51 - make a loop that goes forever and in
03:53 - your code and then you run the code your
03:55 - browser could freeze up
03:57 - this is called an infinite loop and it
04:00 - could crash your browser if you're using
04:02 - chrome the solution is to click window
04:05 - in the top bar and then go to the task
04:07 - manager and then end process and other
04:10 - browsers have a similar thing
04:12 - and then if you're using codepen like
04:14 - i'm doing
04:15 - the default setting is that the
04:16 - javascript runs automatically as soon as
04:19 - you go to the page and this could cause
04:21 - your browser to freeze up again if it
04:23 - runs the same infinite loop again
04:26 - so if you know your code is an infinite
04:27 - loop add the following to the end of the
04:30 - web address bar the question mark turn
04:32 - underscore off underscore js equals true
04:34 - and then if you add that to the end of
04:35 - the address bar it's not going to run
04:39 - automatically you may have to instead of
04:42 - putting a question mark here you may
04:44 - have to put an and sign
04:46 - if you already have a question mark in
04:48 - your address bar well that's while and
04:50 - do while loops thanks for watching my
04:53 - name is beau carnes don't forget to
04:54 - subscribe and remember use your code for
04:56 - good