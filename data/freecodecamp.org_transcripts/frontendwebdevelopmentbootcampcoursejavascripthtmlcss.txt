00:00 - in this massive course you will go from
00:02 - having no coding experience to having
00:04 - the essential skills of a front-end
00:06 - developer you will learn various
00:07 - front-end technologies and build a few
00:10 - projects along the way zach golwitzer
00:12 - teaches this course
00:13 - zack is an experienced software engineer
00:15 - and full stack developer hey everyone my
00:17 - name is zach and today in this 20 plus
00:20 - hour course i'm going to take you
00:22 - through the core foundations of
00:24 - front-end web development
00:26 - now before i get into what that actually
00:29 - entails i wanted to spend a minute to
00:32 - thank free codecamp for having me on the
00:34 - channel it's always a privilege to share
00:37 - my content with such a broad audience
00:40 - reach so many different people and i
00:43 - genuinely hope that you find this course
00:45 - helpful
00:46 - if you do be sure to give them a big
00:48 - thumbs up and a subscribe they're an
00:51 - awesome channel contributed to a lot of
00:53 - my early learnings as a web developer so
00:56 - without further ado let's get into it
00:59 - the first thing that i wanted to start
01:01 - off with is some background context
01:04 - because a lot of the content within this
01:06 - course was obviously not filmed all at
01:09 - once it's quite long
01:11 - it's something that i worked on over the
01:13 - course of a year
01:14 - pieced it together lesson by lesson
01:17 - and a lot of the content is on my
01:19 - youtube channel
01:20 - just separated out into different videos
01:23 - i wanted to compile it all together
01:26 - as it does follow a very logical
01:28 - sequence from start to end
01:30 - and it's perfect for the complete
01:33 - beginner
01:34 - so this should take you from never
01:36 - having written a single line of code in
01:38 - your life to having at least a solid
01:42 - grasp of what coding languages are
01:45 - particularly javascript and what is web
01:48 - development particularly front-end web
01:50 - development you should be able to build
01:52 - basic web pages and understand basic
01:56 - fundamentals of coding after this course
01:59 - is complete while this course is mainly
02:01 - geared for the complete beginner some of
02:03 - the later chapters of it where we get
02:05 - into css flexbox and stuff like that
02:08 - could actually be more intermediate
02:10 - level and be useful to anyone so be sure
02:12 - to look through the chapters below and
02:15 - you can skip around to what interests
02:16 - you so
02:18 - basically the structure here is the
02:20 - three main tenets of front-end web
02:22 - development and those would be html css
02:25 - and javascript now oftentimes you'll see
02:28 - tutorials kind of start with html and
02:30 - css and then move into the more
02:32 - complicated more challenging javascript
02:34 - i've actually reversed that a little bit
02:37 - we will be starting with javascript
02:39 - which is going to be the biggest section
02:41 - and i think it's useful to do that
02:43 - because number one if you're going to be
02:45 - a front-end web developer you have to
02:47 - know all three anyways
02:48 - and also i think there's a lot of
02:50 - concepts
02:51 - uh that you'll pick up learning a
02:53 - general programming language like
02:54 - javascript that will kind of help you
02:57 - catch on to the html and css and bring
02:59 - it full picture for you
03:01 - my goal with this course is to be the
03:03 - course that i needed when i was starting
03:06 - out and what i'm really trying to do
03:08 - here is connect all of these concepts
03:10 - together
03:11 - html css and javascript are not
03:14 - born in isolation they all work together
03:17 - to build a web page and i'll talk about
03:19 - this analogy a little bit later but you
03:22 - can think of these three core tenants of
03:24 - front-end web development just like you
03:26 - would building a house so when you build
03:28 - a house you've got the you know the
03:30 - framework the structure which is the
03:32 - concrete foundation all of the two by
03:34 - fours that go up and the roof that would
03:37 - be your html
03:39 - then you get in there you put some
03:40 - wiring in there you put some plumbing
03:42 - all the other stuff that would be your
03:44 - javascript which makes it actually
03:46 - functional and then finally you put the
03:49 - finish on you put you know the roof
03:51 - tiles you put paint on the outside the
03:53 - inside you just make it look good and
03:55 - that will be the css if you walk away
03:58 - with anything from this course i want
04:00 - you to understand most importantly the
04:02 - relationships between these three and
04:05 - have a pretty firm grasp of each of them
04:08 - in isolation as well the last thing
04:10 - before i actually get started is to let
04:12 - you know that in the video description
04:15 - there's going to be a link and that link
04:17 - is going to lead you to a page that
04:19 - gives you all the resources that you
04:21 - need for this course we'll have some
04:23 - time stamps some chapters
04:26 - so you can navigate around the course
04:28 - and then i will leave code snippets
04:30 - solutions to any of the challenges and
04:33 - even some additional resources and next
04:35 - steps for certain topics if you want to
04:38 - take them a little bit further so that's
04:40 - it without further ado let's jump into
04:43 - front end web development foundations
04:50 - i want to start here with a quick win i
04:52 - want you to see the power of code and
04:55 - see what we can do with it very early on
04:57 - so that you can kind of have that
04:59 - confidence to know that you don't have
05:01 - to go through you know download a bunch
05:03 - of crazy things onto your computer and
05:06 - and write a bunch of crazy lines of code
05:08 - in a terminal to actually do something
05:11 - cool since we're going to be jumping
05:12 - into code here in the first lesson
05:15 - before you know anything about it you're
05:17 - going to be confused and that is very
05:19 - okay don't worry about that i promise
05:21 - we'll go back through everything that we
05:23 - talked about in this video and couple
05:25 - videos from now you will probably be
05:28 - able to actually do what we're going to
05:30 - do in this video so if you're a fan of
05:33 - the netflix series stranger things you
05:36 - might remember in the first season the
05:37 - kids were talking to their professor
05:39 - about this thing called the upside down
05:42 - and basically what the professor was
05:43 - talking about was a lot of physics
05:45 - concepts and stuff like that but
05:47 - basically he was talking about this
05:49 - tightrope where there's a human on the
05:51 - tightrope and then a flea on the
05:53 - tightrope and the flea can actually go
05:55 - around this tightrope and see all
05:57 - different sides of it but the human
05:59 - cannot
06:00 - and that's ultimately what we're going
06:01 - to be doing throughout this series we're
06:03 - going to be looking at something that
06:05 - you've spent a lot of time with already
06:08 - and actually go to the other side of it
06:10 - and understand what's going on behind
06:12 - the scenes and the first thing that
06:14 - we're going to touch on is something
06:15 - called browser developer tools now you
06:18 - might have seen
06:19 - something like this before this is
06:21 - called a web browser and you probably
06:23 - use it every day of your life
06:26 - but have you ever right clicked and
06:28 - clicked inspect element
06:31 - and gone into this
06:32 - tool on the right
06:34 - where there's all these different you
06:36 - know applications that you can go
06:38 - through to see what's going on on this
06:41 - web page as a full stack web developer
06:43 - or more particularly a front-end
06:46 - developer which is kind of a subset of
06:48 - full stack development you're going to
06:50 - be using these developer tools a ton
06:54 - and you're going to get very used to
06:55 - them in this video i actually want to
06:57 - walk you through the most common parts
07:00 - of these developer tools and actually
07:02 - write some code within them to give you
07:05 - an idea of what this is all about the
07:07 - first thing i want you to do though is
07:09 - download the firefox web browser so just
07:12 - type in firefox download go to the
07:13 - download and get that onto your computer
07:17 - i want to be working with the same tool
07:19 - across the board although you have
07:21 - developer tools within any other browser
07:23 - whether that be edge or chrome
07:26 - or firefox you have these developer
07:28 - tools there but i want to make sure that
07:30 - you're looking at the same thing that
07:31 - i'm looking at and firefox is actually a
07:34 - great web browser for
07:37 - developers because it has some really
07:39 - advanced developer tools and in my
07:41 - opinion has probably some of the best
07:43 - developer tools of any browser so get
07:45 - that downloaded and then once you have
07:48 - it downloaded go to google.com
07:50 - and take a look at this pane on the
07:53 - right and if you don't remember i just
07:55 - right clicked anywhere on the page and i
07:58 - clicked inspect element now the first
08:00 - thing we're going to talk about here is
08:02 - the
08:03 - inspector now the inspector is probably
08:06 - the portion of developer tools that you
08:09 - will become most familiar with
08:11 - and the reason is it allows you to
08:13 - basically as you might expect to inspect
08:17 - the page that you're looking at or the
08:18 - web page so as i'm scrolling over these
08:22 - different lines of html code you'll see
08:25 - that different parts of the web page are
08:27 - actually highlighted and i can click
08:29 - down and drop this down and get more
08:31 - specific at what i'm selecting
08:33 - so i can basically see what's going on
08:36 - in this web page and then if i go to the
08:38 - bottom here these are all these stylings
08:40 - or the css styles that go along with the
08:43 - html
08:44 - again don't worry about this we're going
08:45 - to get into these you know languages
08:48 - later into the course but for now i just
08:50 - want to show you the landscape and to
08:52 - really show you what's going on let me
08:54 - open up
08:55 - another tab here go to google.com slash
08:59 - images and let's just type in dog
09:02 - let's grab any dog here i like this one
09:05 - here and we want to open this in a new
09:08 - tab so let's say copy link location now
09:12 - we come back here to the page and let's
09:14 - click this button up here this is kind
09:16 - of our selector
09:17 - for different elements of the page and
09:20 - let's click on this image here you can
09:22 - see at the top there well i can't show
09:24 - you but there's an img or image html tag
09:27 - let's click that and then let's go into
09:30 - this source attribute and paste in that
09:33 - link that we just
09:35 - grabbed of the dog photo
09:37 - once we press enter you'll see that our
09:39 - web page has actually updated and we can
09:42 - close the developer tools and google.com
09:45 - just got a makeover
09:47 - now this is not permanent changes
09:50 - obviously this would not be permanent
09:52 - changes but we can uh right click
09:54 - inspect element again let's click on the
09:57 - image
09:58 - and let's make this a little bit uh
10:01 - smaller so let's put a width of a
10:03 - hundred and now you can see
10:06 - that the dog is a little bit more styled
10:09 - on google's home page but as i said this
10:11 - is not permanent these developer tools
10:14 - are great because they allow you to make
10:16 - very
10:17 - temporary changes to your web page so
10:20 - you might have the code that you're
10:21 - writing you know on the back end and in
10:23 - your terminal or your code editor and
10:26 - those are the live changes but you can
10:29 - come here to just make little changes
10:31 - like you saw how the picture was too big
10:34 - so i went in and changed it to a
10:36 - different dimension and i can kind of
10:38 - test out these different changes
10:40 - and the power of this is just it allows
10:42 - you to do things in real time but the
10:45 - second that we click refresh on the page
10:47 - you're going to see that it goes back to
10:49 - the original web page
10:51 - so you are the only one seeing these
10:53 - changes within the inspect utility
10:56 - nobody else sees them and the changes
10:58 - are not permanent like i said we're
11:00 - going to be spending a ton of time here
11:02 - so don't worry if none of this really
11:04 - made sense
11:05 - but as you can see we're clicking
11:07 - through we can click on different
11:08 - elements so let's maybe click this
11:10 - little icon down here and you'll see how
11:12 - powerful this is once we get into this
11:14 - stuff in the bottom right where we can
11:16 - see the box model and we can actually
11:20 - look at the document object model or the
11:22 - dom we're going to get into all of these
11:24 - things but the next thing i want to show
11:26 - you is this thing called the console now
11:29 - the console is probably the second
11:31 - most popular tool within developer tools
11:34 - or at least in this series we're going
11:35 - to be using the console quite a lot and
11:38 - what the console is it's actually called
11:40 - a reple and that stands for
11:43 - read evaluate print and loop now you
11:46 - don't really need to know that what i
11:48 - want you to remember about this console
11:50 - is two things number one it allows you
11:53 - to write javascript and number two it
11:56 - allows you to actually modify the
11:58 - document object model or the dom and
12:00 - we're going to talk about that a little
12:02 - bit later in the series but these are
12:04 - the two main things that the console
12:06 - allows us to do and to show you i'm
12:08 - going to just give you a short example
12:10 - of how we can use the console to make
12:12 - some of the changes that we are also
12:14 - making here in the inspector so if you
12:17 - remember we kind of changed the image
12:19 - within the inspector we can also do that
12:22 - within the console so let's grab a
12:24 - different dog picture here just for fun
12:27 - grab this uh this one here like this and
12:30 - copy the image location and all that's
12:32 - doing is just copying
12:34 - the actual
12:36 - file that we're looking at from here we
12:38 - can go back to our our page
12:40 - and what we want to do is actually
12:42 - select the image tag on this page so all
12:45 - we have to do is say document.query
12:48 - selector and then type in img and you
12:52 - can see that when i do this this little
12:54 - element here that we were editing
12:56 - earlier is highlighted and down here
12:59 - it's actually printing out what we're
13:00 - going to get
13:01 - when we press enter so when we press
13:04 - enter we get this image but we actually
13:06 - have to save that in a variable real
13:08 - quick so let's say
13:11 - our image and again don't worry about
13:13 - what's going on here we'll talk about
13:15 - all of this later
13:16 - but we'll say document.query selector
13:20 - img
13:22 - we'll save that so now our image is
13:24 - actually representing this element on
13:26 - the page
13:27 - and then we can say our image dot set
13:30 - attribute and what i want to set is the
13:32 - source and i want to set that equal to
13:35 - the link that we just copied from that
13:38 - dog photo and when i press enter it's
13:40 - actually going to change this on the
13:42 - page
13:43 - and i can also resize this just like we
13:46 - did earlier so our image dot set
13:48 - attribute
13:49 - or actually no it's not set attribute
13:51 - it's style
13:53 - dot
13:54 - width
13:55 - equals let's say 100
13:58 - i'm sorry it's actually not it is an
14:00 - attribute so let's set the attribute
14:02 - sorry i'm doing this in real time here
14:05 - so let's go with width and we'll go for
14:07 - 100 here
14:09 - and you can see that it goes down
14:11 - resizes accordingly so this is just a
14:14 - short example of how we can use the
14:16 - console to actually edit
14:18 - the document object model or we can just
14:20 - think of it as the web page for now not
14:23 - only that but we can also write pure
14:25 - vanilla javascript within this repel or
14:27 - this console
14:29 - and to show you that i've actually
14:31 - already showed you that because i saved
14:33 - our
14:34 - element in
14:36 - a variable a javascript variable but we
14:38 - could also write a function so we could
14:40 - write a function that says
14:41 - change image or something like that and
14:44 - it takes a url
14:46 - and then it's going to actually change
14:48 - the image so let's go ahead and make
14:50 - that function
14:51 - and what that's going to do is going to
14:53 - say document
14:55 - dot query selector img
14:59 - dot set attribute
15:01 - and we're going to say source and then
15:03 - we're going to pass in the url
15:05 - once again don't worry about what i'm
15:06 - doing here this is just examples
15:09 - and then i'm going to say enter down and
15:12 - that's our function so now i can execute
15:15 - this function and i can paste in that
15:17 - url
15:18 - and click enter and i guess it's already
15:21 - there so it's not going to change but if
15:22 - we went over to a different dog picture
15:26 - and run this function
15:30 - you'll see that it changes the image in
15:33 - the browser so we can write javascript
15:35 - we can modify the webpage all that stuff
15:38 - within the console we're actually going
15:40 - to be learning a lot of the initial
15:41 - concepts of javascript here in the
15:44 - console because it is so easy to set up
15:47 - and get going all you have to do
15:49 - is as we showed you just right click
15:52 - inspect element click on the console and
15:55 - boom you're ready to write javascript so
15:57 - it's a great place to start so that we
15:58 - don't have to set up all this elaborate
16:00 - stuff just to write basic javascript
16:03 - there are a couple of other features
16:04 - within developer tools that i want to
16:06 - show you here but they're less important
16:08 - than the first two that we looked at so
16:10 - the inspector and the console
16:12 - now just to remind you right click
16:14 - inspect element
16:16 - and from here i want to go up to the
16:18 - network tab so this network tab is
16:21 - something that you will be using a lot
16:23 - later on and if we refresh the page
16:26 - you're going to see that there's some
16:28 - activity here and what the what's
16:30 - happening here in this network tab is
16:33 - you're actually seeing all the resources
16:35 - that are being transferred to and from
16:37 - over the network to this web page so
16:40 - google's backend servers are actually
16:42 - require sending resources to the front
16:45 - end and you're actually seeing all these
16:48 - resources displayed in the browser so an
16:50 - example of that would be this google
16:53 - image right here and if we click on the
16:55 - images part you can see that the
16:57 - december holidays
16:59 - in the response is actually the image
17:01 - that we're looking at here
17:03 - and if you wanted to see other things
17:04 - about this such as the timings how long
17:07 - it took to load
17:09 - you know you can look at the http
17:11 - headers all that kind of stuff this will
17:14 - be very useful for us as we get into
17:17 - more the back end development where
17:18 - we're talking about api request
17:21 - and you know http and all that kind of
17:23 - stuff so we'll come back to this we'll
17:26 - spend some time here a lot later in the
17:28 - series but i wanted to expose you to it
17:31 - initially so you can see that this is
17:33 - something that we will be using now
17:35 - another thing we will be using if you
17:37 - click this little arrow over here is
17:39 - storage
17:40 - and storage is useful for a couple of
17:43 - things storage is going to be useful for
17:46 - tracking user behavior on a site so
17:49 - not to to play the blame game here but
17:52 - when we talk about facebook and all the
17:54 - cookies that facebook puts on uh your
17:57 - web browser on your mobile phone all
17:58 - that kind of stuff this is where this is
18:01 - being stored so you can see google is
18:03 - storing these cookies about us
18:06 - as the user and although these probably
18:09 - won't mean a whole lot to us as people
18:12 - using the site these have specific ids
18:16 - and
18:17 - all sorts of identifiers that
18:20 - allow google to know things about the
18:22 - user this is also great for
18:24 - authentication this is how we're going
18:26 - to actually log in and register
18:29 - people to our app and when we build our
18:32 - backend dashboard for editing our blog
18:35 - for our personal website we're going to
18:36 - need authentication because we don't
18:38 - want just anyone coming and editing our
18:41 - blog so this storage tab is what we're
18:44 - going to use to actually do that
18:46 - and while it's a very advanced topic
18:48 - that comes later down the road i also
18:49 - wanted to show it to you everything else
18:51 - that you see here whether it be the
18:53 - inspector console debugger network style
18:56 - editor all this kind of stuff
18:59 - everything else is not quite important
19:01 - enough for us to cover here so i'm just
19:02 - going to leave it there for now you
19:04 - probably won't even use anything outside
19:07 - of what i talked about for at least
19:08 - several months or even years or maybe
19:11 - even ever as a web developer all right
19:13 - so i think i've covered
19:15 - mostly what these developer tools are
19:17 - about just to review
19:19 - right-click anywhere on a web page
19:21 - inspect element and you'll get to these
19:23 - developer tools
19:25 - now
19:25 - the last thing i want to do in this
19:27 - video is actually show you what coding
19:28 - is all about and
19:30 - have you write your first javascript
19:33 - program well you probably will not
19:35 - understand the concepts behind the code
19:37 - we're about to write i want to get you
19:39 - in the habit of actually writing code
19:41 - and you know get you
19:43 - feeling comfortable in this console that
19:45 - we talked about earlier so open up a web
19:48 - browser hopefully the firefox browser
19:50 - you just downloaded put this video on
19:52 - the side open up the console so right
19:55 - click inspect go to the console
19:58 - you can even type clear with
20:00 - two little parentheses to clear the
20:02 - console
20:03 - and we are ready to get started now the
20:06 - goal of this program is going to be
20:09 - every time we click on google's web page
20:11 - so when i click it i'm actually clicking
20:13 - right now
20:14 - um i want the background of the page to
20:17 - actually change color and i want that
20:19 - color to be a random color we can do
20:21 - this with javascript code and i'm going
20:24 - to walk you through line by line how
20:26 - we're doing it and kind of explain
20:28 - what each line does just to give you a
20:31 - feeler again don't worry about how
20:33 - everything's working we're going to go
20:35 - into the details of the javascript
20:37 - language in future videos the first
20:39 - thing we have to do is save the body
20:43 - html tag in a variable so when i say
20:46 - body html tag
20:48 - every web page that you're going to go
20:50 - to has this thing called the body
20:53 - and this represents kind of the
20:55 - container
20:56 - for the entire web page aside from of
20:58 - course the topmost
21:01 - container which is called html so we
21:04 - want to select this body and this is
21:06 - what we want to actually change the
21:08 - background for so we can actually do
21:10 - this manually and we can come down here
21:13 - and right now you see on the body the
21:15 - background is
21:16 - hashtag fff which is just the hex code
21:20 - for the color white now we can type in
21:22 - green
21:23 - and you can see that the background
21:25 - actually changes in our web browser now
21:28 - what i want to do is do this in vanilla
21:30 - javascript and do it every time we click
21:33 - the screen so in order to do that the
21:35 - first thing that we
21:37 - have to accomplish is saving that body
21:39 - tag so let's type clear to get a clean
21:42 - space
21:43 - and then let's type in a variable
21:45 - so here's our javascript variable we
21:48 - want to set that equal
21:50 - to document.queryselector
21:53 - and then we want to get the body tag
21:55 - so when we press enter that's going to
21:57 - be the html body you can actually print
22:00 - that out and see that we have
22:01 - successfully retrieved that and stored
22:03 - it in that variable
22:05 - from here we actually need to create a
22:08 - function now this function
22:10 - we're going to save in a variable and i
22:13 - know this is getting a little bit
22:15 - confusing at this point but bear with me
22:17 - and type along as i'm doing this
22:20 - so we're going to go through this
22:23 - function and we're going to assign
22:26 - something called an array
22:28 - so this array is going to contain
22:30 - various colors of our choice so you can
22:32 - put as many as you want in here
22:34 - separated by commas i'm just going to
22:36 - put in a couple random colors here that
22:38 - i've saved so
22:40 - 2942 these are just hex codes so you can
22:43 - actually go
22:45 - hex codes something like that
22:49 - you can go to google and you can see all
22:50 - the different hex codes here there's
22:52 - various tools that you can use for this
22:55 - but anyways we're going to save these as
22:57 - a comma separated array
22:59 - and let's go add a few more
23:04 - and then you can also
23:06 - a valid css value would be something
23:08 - like red blue or green so we can also
23:10 - type in red
23:12 - blue
23:14 - green
23:17 - yellow
23:19 - orange
23:21 - maybe even
23:22 - purple
23:24 - alright so we have saved this colors
23:27 - array now the next thing that we have to
23:29 - do
23:30 - is get a random index from this array
23:33 - and when i say index each of these
23:36 - values are at a certain index within
23:39 - this array and we'll talk more about
23:40 - this later again but this one would be
23:43 - the zeroth index this would be the first
23:45 - index the second third so on and so
23:48 - forth to get this random index we have
23:50 - to actually use a built-in javascript
23:52 - library called the math library
23:55 - and we need a random random index
23:57 - between 0 and let's see
24:00 - 1 2 3 4 5 six seven eight
24:04 - uh there's eight items within this array
24:06 - so we want a index between zero and
24:10 - seven because uh arrays are zero index
24:13 - they don't start at one
24:15 - so we'll get a random index here
24:19 - that'll be equal to math.floor
24:23 - and we're going to pass in math.random
24:25 - please don't worry about what's going on
24:27 - here this is just an example
24:30 - and this will give us our random index
24:32 - and i actually pressed enter a little
24:34 - bit too early so
24:36 - we actually have to rewrite this
24:38 - function
24:39 - okay i've kind of returned to where i
24:41 - was before i pressed enter and screwed
24:43 - this all up
24:44 - but basically we're getting a random
24:46 - number between zero and seven and the
24:48 - way that we do that is actually get the
24:50 - length of the array by typing
24:52 - colors.length
24:54 - so let's not make that mistake again
24:56 - let's enter down a couple times
24:58 - and now we have to actually grab the
25:00 - random color and save that in a variable
25:03 - so we'll grab the random color
25:05 - that'll be equal to colors and then
25:08 - we'll insert our random index that we
25:10 - have generated
25:12 - then we are going to actually style the
25:15 - body so all we have to do is grab this
25:18 - uh variable that we saved up here called
25:20 - html body
25:23 - and then we want to go to the
25:25 - style and then background
25:28 - color not clip
25:30 - background color and then we want to set
25:32 - that equal to our random color here
25:35 - so that's going to actually do what we
25:37 - showed earlier and change the background
25:39 - color
25:40 - and then the last thing i want to do is
25:42 - just print to the console
25:44 - a confirmation that this worked so we'll
25:46 - do something like this we'll say
25:49 - the user clicked
25:52 - and set the color to
25:54 - and then we'll concatenate this string
25:56 - in here and say random color
26:00 - okay our function is done hopefully it
26:04 - works here
26:05 - and the way that we see if it works is
26:08 - by running it or executing it so we'll
26:10 - do random click function
26:12 - and it looks like the user has clicked
26:15 - and changed the color
26:17 - now to finish this program off the last
26:20 - thing we have to do is set an event
26:21 - listener on the html body element
26:25 - now this is a little bit advanced but
26:27 - it's kind of a cool feature
26:29 - of you know javascript and all that kind
26:31 - of stuff so all we have to do is go to
26:34 - html body and say on click so it's
26:37 - saying
26:38 - when the user clicks i want to execute
26:42 - this random click function all right so
26:46 - once i press enter now we have wired it
26:48 - up so that every time we click it's
26:51 - going to change the the color so i'm
26:53 - going to click a couple times
26:58 - since it's random we might get a couple
27:00 - duplicates here but then we can even
27:02 - close this and keep clicking and
27:04 - get all sorts of different results here
27:07 - so it's actually a pretty cool program
27:09 - that we just wrote and you can see you
27:11 - know even you who have never written a
27:13 - line of code before were able to kind of
27:16 - follow along and type what i was typing
27:18 - and write your first little program in
27:21 - other words you just did something that
27:23 - almost everyone in the world does not
27:25 - know how to do and will never know how
27:26 - to do your brain is probably in utter
27:28 - confusion right now but don't worry in
27:31 - the next couple videos we're going to
27:32 - actually be deep diving
27:35 - into this javascript programming
27:36 - language and we're going to be learning
27:38 - how i wrote this program what are all
27:40 - these different symbols that we're
27:42 - typing into the console and all that
27:43 - kind of good stuff so don't worry if
27:45 - you're completely confused this video
27:47 - was mainly to give you an introduction
27:49 - to the developer tools that you can have
27:51 - within any browser we're using firefox
27:55 - but it just gives you that introduction
27:56 - and also just some exposure
27:59 - and some comfort levels actually writing
28:02 - real javascript code and that's it for
28:04 - this first video be sure to hit the
28:06 - subscribe button and also that little
28:08 - bell so you're notified when new videos
28:10 - are posted to this series and thanks for
28:13 - watching
28:18 - today we're going to be talking about
28:20 - what is javascript and why do we use it
28:23 - let's see what wikipedia has to say
28:25 - because we know that's going to be
28:27 - simple javascript often abbreviated as
28:30 - js is a programming language that
28:31 - conforms and i think i'm going to stop
28:33 - right there because this is not a useful
28:35 - definition especially for most people
28:37 - watching this
28:38 - what you can remember javascript as is
28:41 - just a programming language and more
28:43 - specifically it's a programming language
28:45 - that is made for the web you have other
28:47 - languages like c plus plus python php
28:51 - ruby
28:52 - c sharp all these different languages
28:54 - and they all kind of have their unique
28:57 - characteristics and javascript's unique
28:59 - characteristic is that unlike these
29:02 - other languages that cannot run in a web
29:04 - browser javascript can't this has been
29:07 - the case for quite some time but
29:09 - recently as you can see the 1.0 version
29:12 - of webassembly
29:14 - has been released in four different
29:15 - browsers which does let you write all
29:18 - these other programming languages to run
29:20 - within the browser but for now just
29:22 - think of javascript as the programming
29:24 - language of the web because it's the
29:27 - easiest to write in the browser and even
29:30 - with web assembly there's a lot of
29:31 - complicated steps to get all of that set
29:34 - up so you say javascript is the
29:36 - programming language of the web but is
29:38 - that all it can do well the answer is no
29:40 - but if you asked that question 20 years
29:42 - ago you might have been laughed at
29:44 - since that time though javascript has
29:47 - gained a lot of traction in development
29:49 - communities and was the most used
29:51 - language in the stack overflow developer
29:53 - survey of 2020
29:55 - and to name a few things that you can do
29:57 - with javascript let's pull this up here
30:00 - you can create web applications so
30:02 - there's lots of front end frameworks
30:04 - like angular here you've also got react
30:06 - i think this is the most popular one at
30:08 - the moment
30:10 - you can do back-end
30:12 - pieces of your web application or
30:13 - back-end servers with things like nest
30:15 - js
30:16 - you can also create desktop applications
30:20 - if i pull up my visual studio code which
30:23 - is a code editor this is actually a
30:25 - desktop application that was built using
30:28 - this tool called a framework called
30:30 - electron so you can build desktop
30:32 - applications for various operating
30:34 - systems
30:35 - you can also create mobile apps with
30:37 - react native and native script and then
30:40 - finally you can do ai and machine
30:43 - learning data science projects with
30:45 - tensorflow.js and a couple other
30:47 - libraries so to say that javascript is
30:49 - not a powerful language is a bit of a
30:52 - miss here because javascript has many
30:54 - different applications
30:56 - the next question that you might ask is
30:58 - can javascript get you a job and the
31:01 - answer to that is a resounding yes but
31:03 - javascript alone is not going to do it
31:06 - you have to actually learn frameworks
31:08 - such as the ones that i've gone through
31:10 - here angular react nest gis electron
31:13 - react native all of these frameworks
31:16 - that are built around javascript are
31:18 - what you get hired for
31:21 - and speaking of frameworks what is a
31:23 - javascript framework or any framework
31:26 - for that matter well the way that i
31:28 - think about it is the framework is
31:30 - something on top of a programming
31:32 - language so it's an abstraction on top
31:35 - of javascript that enables a developer
31:38 - to do something more efficiently in less
31:40 - time facebook is created largely with a
31:44 - framework a front-end framework called
31:46 - react and this is a very popular
31:47 - framework we just went over it
31:50 - and facebook could definitely have been
31:52 - built without a framework it could be
31:54 - built in just javascript
31:56 - html and css
31:58 - but the reason that it wasn't is because
32:01 - the developers there decided hey this is
32:03 - getting really repetitive and we have
32:06 - certain things that we do over and over
32:08 - and over again that we want to kind of
32:10 - automate and therefore react was born
32:13 - react is something that the developers
32:16 - at facebook kind of created in order to
32:18 - make their jobs easier and more
32:21 - efficient we can use a little bit of a
32:23 - construction analogy to think about
32:25 - frameworks if you're trying to build
32:27 - some commercial real estate building are
32:29 - you going to use a shovel and a ladder
32:32 - to create this whole entire building and
32:34 - you know drive all the materials back
32:36 - and forth and pick up trucks the answer
32:38 - is no you're going to get huge trucks
32:41 - you're going to get bulldozers you're
32:42 - going to get cranes you're going to get
32:44 - all sorts of
32:46 - big materials in order to build this
32:48 - huge building and it's the same thing
32:51 - with building web apps or honestly
32:53 - anything that you would build with code
32:55 - if you're trying to do it with just a
32:57 - language like javascript and you're
32:59 - you're not using some of the popular
33:01 - frameworks that have been built on top
33:03 - of that you're basically showing up to a
33:06 - construction site with a shovel and a
33:08 - pickup truck so you don't want to do
33:10 - that in order to be employable you need
33:12 - to understand how to use these different
33:15 - frameworks like angular or react or even
33:18 - a framework like electron which is
33:20 - enables you to write desktop
33:22 - applications like visual studio code all
33:24 - right i think that's enough on
33:25 - frameworks for now could do a whole
33:27 - video on it let's go to the next
33:28 - question which is is javascript the same
33:31 - as java or at least similar and the
33:34 - answer to that is no if you search
33:36 - enough on the internet you'll probably
33:37 - stumble upon
33:39 - the analogy of a car versus a carpet
33:42 - they both have car within the word but
33:45 - they're nothing alike
33:46 - and that's kind of the story with
33:48 - javascript and java now java was
33:51 - actually the inspiration for javascript
33:53 - way back in the day and javascript was
33:56 - meant to be a companion to java so they
33:59 - do have some similarity but when you're
34:01 - writing each of the languages they could
34:03 - not be more different the next question
34:06 - is javascript better than python or
34:08 - honestly insert any language there the
34:11 - answer to that is always going to be it
34:13 - depends and the reason that i say that
34:16 - is because
34:17 - all these different languages that
34:18 - you're choosing between have different
34:20 - unique use cases and while they can all
34:23 - kind of do the same thing they all are
34:25 - programming languages
34:27 - some of them are better for certain
34:29 - types of industries than others so if
34:32 - you're asking me to build
34:34 - an app like facebook
34:36 - i'm probably going to go with javascript
34:38 - and use some javascript frameworks
34:40 - because that's what those are made for
34:42 - they're made for creating apps like
34:44 - facebook but if you wanted me to do some
34:47 - machine learning
34:48 - and do you know build out the computer
34:51 - that sits in a tesla i'm probably not
34:54 - going to use javascript i'm probably
34:55 - going to use python because python has a
34:58 - much
34:59 - more mature ecosystem around this topic
35:02 - of machine learning ai data science all
35:04 - that kind of stuff so when you're asking
35:06 - whether you should go with javascript or
35:08 - another language it really depends on
35:10 - what kind of industry you're getting in
35:12 - what you're trying to build all that
35:13 - kind of stuff if you're trying to build
35:15 - a web app like facebook javascript is
35:17 - great if you're trying to do some
35:19 - machine learning python is great if
35:21 - you're trying to create an extremely
35:24 - efficient uh we'll say banking
35:26 - application or something like that a
35:29 - language like c plus which is much
35:31 - faster in execution than a javascript
35:34 - would be a good choice there's no right
35:36 - answer here but there are
35:38 - different ecosystems around each of
35:40 - these languages and you'll kind of
35:42 - notice as you study them that certain
35:44 - types of developers kind of gravitate
35:46 - towards different languages
35:48 - another question that you might have is
35:50 - html and css required to work with
35:53 - javascript and the answer to that is yes
35:56 - and no it kind of depends on where
35:58 - you're actually running that javascript
36:01 - now let's start with the front end
36:02 - because this is a little bit easier to
36:04 - explain and then we'll move on to the
36:06 - back end if you don't know the
36:07 - difference between those i actually made
36:09 - a video on the difference between
36:11 - front-end and back-end development
36:12 - anyways let's go over to my browser here
36:15 - on the left side of my screen i have an
36:17 - html file that is actually open in
36:20 - notepad here on the right not doing any
36:23 - fancy editors here just want to get a
36:25 - few points across so let's create a
36:27 - basic html document here i know i
36:30 - haven't actually gone through how this
36:32 - all works yet but we will get there i
36:34 - promise at some point here
36:41 - in the body of the html i'm just going
36:43 - to create a button that says click me
36:46 - so when we refresh the page we should
36:48 - see
36:49 - all of this reflected on our web page
36:51 - and you see that we have a very unstyled
36:54 - button which is just click me so this is
36:57 - a
36:58 - example of a web page this is no
37:00 - different than you know the home page of
37:02 - facebook
37:04 - except for the fact that it is not
37:06 - including both css and javascript so
37:09 - this is html alone now if we add css to
37:13 - the picture we're actually going to be
37:15 - able to style this now we can add some
37:18 - styles to this button so let's do that
37:20 - right now we'll add a background color
37:23 - of
37:24 - transparent
37:26 - and then i want to say
37:29 - the border is going to be 1 pixel
37:33 - solid navy
37:35 - then i want to add some padding to it so
37:37 - we'll say 20px
37:39 - we want the font size to be 1.4 rem just
37:42 - somewhere in that range
37:44 - and let's go ahead and close that
37:46 - bracket off save it and refresh the page
37:49 - you can see that we have a much better
37:51 - style button here we can also add some
37:53 - hover styles to it so
37:55 - let's go down here and say button
37:58 - hover and now i want the background
38:01 - color to be navy and i want the
38:06 - let's see the border
38:08 - to be none
38:10 - i want the color of the text to be white
38:12 - so that it stands out on that navy
38:14 - background
38:15 - save this refresh and you can see that
38:18 - we have a styled button
38:20 - that changes styles when we hover over
38:22 - it so this is the power of css but if i
38:26 - click this button
38:28 - if i click this button it's not going to
38:29 - do anything does nothing it's just a
38:32 - static element on the page and while it
38:34 - looks like it's changing looks like it's
38:36 - doing something that's only being done
38:38 - with css in html now in many web
38:42 - applications you have various buttons
38:44 - and forms that users can click on in
38:47 - order to do things within the app so i'm
38:49 - sure you've been to
38:51 - a login page before where you enter your
38:54 - email and your password and you press
38:56 - login well that is actually being
38:59 - triggered by javascript and while you do
39:02 - need the html and preferably css if you
39:05 - want a web app that people are going to
39:08 - visually like
39:09 - you need javascript to actually react to
39:13 - different
39:14 - interactions on the page by the user if
39:17 - you just have html and css your login
39:20 - form is going to not do anything and
39:22 - you're going to have a useless app to
39:24 - kind of give you an idea what i mean
39:26 - obviously this is not realistic but
39:28 - i added some javascript to this html
39:31 - document that also has css
39:34 - and you can now see that every time i
39:37 - click on this button it's going to add
39:40 - an element to the page
39:42 - so i'll click it and you can see that
39:44 - i'm adding a p tag
39:46 - with the text clicked the button every
39:49 - time i click it
39:50 - and this is just to demonstrate how once
39:52 - you add javascript to your html in css
39:56 - you can actually interact with the page
39:58 - rather than just looking at a static
40:00 - website well in this case all i did was
40:03 - add some stupid text to the page you can
40:05 - see that how every time we click the
40:07 - button we can fire an event and maybe
40:10 - send in the login credentials to our
40:12 - backend server authenticate get the
40:15 - response back and then redirect that
40:17 - user to a different page of our site
40:20 - when we're working with javascript on
40:21 - the front end or in the browser html and
40:25 - css are pretty much required for
40:27 - javascript to run now yes it could run
40:30 - without them but it would be completely
40:32 - useless you'd just be running it in the
40:33 - console like we did in the previous
40:35 - lesson so it has to have something to
40:38 - actually interact with now on the back
40:41 - end since javascript is both a front-end
40:43 - and back-end language
40:45 - we can actually run javascript without
40:47 - any html in css and it can be extremely
40:50 - useful when we're working with
40:52 - javascript in the browser html and css
40:55 - are required to make this javascript do
40:58 - anything useful because ultimately the
41:00 - javascript in the browser is all about
41:03 - taking those html elements and modifying
41:07 - them and interacting with back end data
41:10 - all that kind of stuff so html and css
41:13 - are required in the front end on the
41:14 - back end if we're using the node.js
41:17 - runtime which is the way that we can run
41:20 - backend javascript we don't need html in
41:23 - css let's write a simple node.js program
41:26 - to demonstrate that we don't need html
41:29 - and css in order to do that once again
41:32 - we have not covered this in this series
41:34 - yet so bear with me
41:36 - but we need to create a
41:38 - sample.js file and then we'll open this
41:41 - up with vim
41:43 - which is going to allow us to edit this
41:46 - so once we have this again haven't
41:48 - covered this either
41:50 - but we can make a
41:51 - do math function something like that
41:54 - where we can enter in two values and get
41:57 - some you know result so let's do a
42:00 - multiplication problem so we'll just
42:03 - we'll say return
42:05 - x
42:06 - times y
42:08 - and close the braces and then in order
42:11 - to actually run this program we are
42:13 - going to actually store it in a result
42:16 - variable so do math and we'll say 5 and
42:21 - 80 something like that big enough where
42:23 - we can't necessarily do it in our head
42:26 - we'll do like 87 or something
42:28 - and so it's going to store that in the
42:29 - result
42:30 - and then we want to print the result to
42:32 - the console so from there we can save
42:35 - and quit and then we can clear the
42:37 - console and run this sample
42:40 - dot js program and you'll see that it
42:43 - did that multiplication for us so
42:45 - obviously this is very useless and you
42:48 - wouldn't ever do such a simple function
42:51 - but think about back when we were
42:52 - working on the front end and when we
42:54 - clicked that button
42:55 - so let's say that it was a register form
42:58 - you add your email and your password you
43:00 - click the button the javascript in the
43:03 - front end is going to say okay the
43:05 - button was clicked i need to do
43:07 - something and so what it's going to do
43:09 - is grab all that data the email and
43:10 - password it's going to send it over to
43:13 - your backend server and your backend
43:15 - server is going to run the node.js
43:18 - you know version of javascript and it's
43:20 - going to say okay i got an email and a
43:22 - password let me look up this email in
43:25 - the database
43:26 - hash the password and compare the hashed
43:29 - password to the one within the database
43:31 - and then i'm going to send some data
43:33 - back to the front end in order to tell
43:35 - it whether the user has successfully
43:37 - authenticated so you can see how these
43:40 - different
43:41 - sides of javascript work in different
43:43 - ways but the point is no you don't need
43:46 - html and css on the back end but yes you
43:49 - need it on the front end and the last
43:51 - question that i'm going to cover is what
43:53 - is the difference between something like
43:55 - es5 or es6 and javascript well there's
43:59 - actually an organization called
44:02 - ecma international not even sure if i
44:04 - said that right
44:06 - but this is just a standards
44:07 - organization and in order to really
44:10 - visualize this i want to go into a quick
44:12 - example of something that's not related
44:14 - to javascript well not entirely
44:17 - and that is the iso 8601 date standard
44:22 - so we're going to go through this
44:23 - example and then i think everything else
44:25 - is going to make a little bit more sense
44:27 - so if i open up the console like we did
44:30 - in the first lesson of this series
44:32 - and i run let me save
44:35 - a date into a date variable
44:38 - and then i want to print this date
44:41 - as an iso string
44:43 - and you can see that i have this
44:45 - uniquely formatted date and it looks
44:48 - very standardized and that's because it
44:50 - is and it's actually standardized by
44:52 - this you know
44:54 - organization called iso which is i think
44:57 - the international standards organization
44:59 - and there's actually organizations like
45:01 - this across the world for various you
45:03 - know different standardized things and
45:06 - the same thing applies for javascript
45:08 - and that is where ekma international
45:11 - and the ecmascript specification or in
45:15 - other words you might hear this as es5
45:17 - or es6 all different versions of this
45:20 - spec
45:21 - this is where these have originated
45:23 - and so javascript is actually an
45:26 - implementation of this specification
45:30 - and the reason this is so important is
45:32 - because of browser compatibility among
45:34 - other things so if you go to this mdn
45:38 - web docs article you can see a grid of
45:41 - all the javascript apis that are
45:44 - supported within different browsers and
45:47 - the reason that this ecma standards is
45:50 - so important is because the
45:52 - specification just needs to be updated
45:55 - and maintained in one place and then all
45:58 - of the different browser developers
46:00 - you've got different teams for each of
46:01 - these different browsers they can look
46:03 - at that specification and implement
46:05 - their browser knowing that all of these
46:08 - specifications are not going to just
46:10 - randomly change when you know say
46:12 - someone working on the javascript
46:15 - language decides that they want you know
46:17 - a new api feature so just remember
46:20 - javascript is an implementation of the
46:23 - es6 or es5 or
46:26 - whatever version you're working with
46:28 - it's an implementation of that
46:30 - specification all right i think that
46:32 - does it for this first rapid fire uh q a
46:35 - session that was not very rapid fire
46:38 - whatsoever but this last part of the
46:40 - video is totally optional it's for the
46:42 - people who really want to
46:45 - learn the ins and outs of web
46:47 - development and want to continue on
46:49 - with this series here and what we're
46:52 - going to be talking about in the last
46:53 - part of the video is just the question
46:56 - of
46:56 - what is a programming language so we
46:59 - talked about how javascript is a
47:00 - programming language and it's kind of
47:02 - unique because it can run on the backend
47:04 - and the front end and a browser
47:06 - but we didn't really cover what is a
47:09 - programming language and i think that
47:11 - this is a very important question to ask
47:14 - because if you're going to be writing a
47:16 - lot of code you probably should
47:18 - understand what's happening behind the
47:20 - scenes at least at a high level so for
47:22 - this last part what we're going to call
47:24 - a programming language is a group of
47:28 - tokens or symbols that when combined
47:31 - together in a very very specific way
47:34 - can be translated by something called a
47:37 - compiler into machine code or ones and
47:40 - zeros that all computers know how to run
47:43 - you can think about it like this
47:45 - um let's let's take a spoken language
47:49 - something that i don't know which is
47:50 - pretty much every language except for
47:52 - english
47:53 - but we'll call it i don't know something
47:55 - like portuguese if you started speaking
47:57 - portuguese to me
47:59 - my brain would not be able to comprehend
48:01 - what those words and symbols and
48:03 - expressions
48:05 - actually mean semantically although i
48:07 - can't understand portuguese
48:09 - what i can understand is the body
48:11 - language of someone speaking it so if
48:14 - you've got someone speaking portuguese
48:16 - and they have a very you know sad
48:18 - demeanor to them i can understand
48:20 - generally that what they're saying is
48:23 - not a happy thing
48:24 - and it's the same thing with computers
48:27 - well a computer cannot understand
48:30 - javascript it cannot understand python
48:32 - it cannot understand c plus it can't
48:35 - understand any of these languages but if
48:38 - we use something called a compiler
48:40 - which is just another program more code
48:43 - that actually
48:45 - reads other code and compiles it down
48:48 - into ones and zeros that a computer can
48:51 - actually understand so it's taking a
48:53 - language and it's compiling it down into
48:56 - ones and zeros or we can think of them
48:58 - as body language because
49:00 - all computers understand ones and zeros
49:03 - now this is where it gets really complex
49:05 - and i'm not going to actually dive into
49:07 - it during this video
49:09 - once we start talking about compilers
49:12 - then we have to get into the topic of
49:14 - operating system theory
49:16 - and which you know what is our target
49:19 - runtime that we're dealing with like
49:21 - where are we actually executing these
49:23 - ones and zeros because each computer is
49:26 - going to have a slightly different cpu
49:28 - slightly different alu or
49:31 - arithmetic logical unit all of these
49:34 - things matter when we're compiling code
49:36 - down and for each different language and
49:39 - kind of each different operating system
49:41 - you have to have slightly different
49:43 - compilers
49:44 - and other tools that i'm not mentioning
49:46 - here in order to do that now if you're
49:49 - someone who really wants to understand
49:51 - this in a great level of detail
49:54 - something that was very important to me
49:56 - then i recommend reading this book right
49:59 - here which is the elements of computing
50:01 - systems and you'll see within this book
50:04 - you know i'll see if i can show like a
50:06 - little page here but we actually get
50:09 - into things like the arithmetic logical
50:11 - unit and how these ones and zeros are
50:13 - actually
50:15 - translated into commands for the
50:17 - computer
50:18 - now i will say if you're going to read
50:20 - that book i will warn you right now it's
50:22 - going to take you months and it's very
50:24 - difficult to get through
50:27 - that said i came out of it learning in a
50:29 - ton and i was really happy with what i
50:32 - learned from that book but if you're
50:33 - trying to get a job quickly you're
50:35 - trying to become employable as fast as
50:37 - possible do not read that book it's
50:40 - going to take you too long it's going to
50:41 - distract you from
50:42 - actually writing web applications now if
50:45 - you're someone who wants to understand
50:47 - this stuff but doesn't have time to
50:49 - build a computer from scratch which is
50:51 - what you'll do in that book
50:53 - i recommend a book called code by
50:55 - charles petzl and this is going to give
50:57 - you all that information it's going to
50:59 - teach you the ones and zeros compiling
51:01 - all that kind of stuff but it's going to
51:03 - do it a little bit quicker and you're
51:04 - not going to be quite as hands-on with
51:06 - it and the final question of this video
51:09 - is where does javascript actually run
51:13 - and the answer to that is very similar
51:15 - to the question that i asked earlier
51:18 - which is
51:19 - is html and css required to run
51:21 - javascript and i said well it depends
51:23 - whether you're running it in the front
51:24 - end or the back end and what we're
51:27 - asking here is where does javascript run
51:30 - and this is where we get into the topic
51:32 - of something called a run time and a
51:34 - runtime is basically
51:36 - uh an environment where code is run and
51:39 - it gets into those topics that we just
51:42 - talked about with compilers and how do
51:44 - we target different platforms and
51:46 - compile down to ones and zeros
51:48 - and there's actually two run times for
51:51 - javascript and that would be the node.js
51:53 - runtime and then the browser runtime
51:56 - and
51:57 - believe it or not the
51:59 - browser runtime within google chrome
52:02 - uses something called the v8 engine and
52:04 - this is going to actually do all of that
52:07 - compilation that i was talking about
52:09 - and it's going to get into a bunch of
52:11 - other stuff some optimization
52:14 - using the just in time compilation
52:16 - method all that kind of stuff it's going
52:18 - to basically take your javascript code
52:21 - and convert it to something the computer
52:23 - can read
52:24 - and node.js which is kind of the backend
52:27 - version of javascript or the runtime
52:29 - that we're going to use for our backend
52:32 - javascript servers and stuff like that
52:34 - that also uses the v8 engine which is
52:37 - similar to chrome so you can kind of
52:39 - guess that the creators of node.js and
52:43 - the creators of the v8 engine that runs
52:46 - in chrome and node.js to kind of become
52:48 - good friends here over the last couple
52:50 - years
52:51 - but this is not the only way that we can
52:53 - run javascript you know you have node.js
52:56 - which is probably which is the most
52:58 - popular way to run
53:00 - javascript on the back end and google
53:03 - chrome which is one of the most popular
53:05 - browsers but in this course we're using
53:07 - firefox as our web browser because i
53:10 - think the developer tools are a little
53:12 - bit better there and with firefox we're
53:14 - not actually using the v8 engine in
53:16 - order to compile the javascript down
53:19 - we're using something called
53:20 - spidermonkey which is the original
53:24 - engine for javascript that was built
53:26 - within the netscape browser
53:28 - way back in the day and as a side note
53:30 - if you really want an interesting
53:32 - podcast to listen to
53:33 - look up browser wars i think it's by the
53:36 - podcast called business wars and it's a
53:39 - really cool story about netscape and how
53:41 - all this all these browsers gained
53:43 - market share really worth checking out
53:46 - in my opinion so in summary javascript
53:48 - can be run on the back end or the front
53:50 - end and if it's run on the back end in
53:53 - node.js it's being compiled down using
53:56 - the v8 engine if it's running on the
53:58 - front within google chrome it's also
54:00 - using the v8 if it's running in firefox
54:03 - it's using spider monkey if it's running
54:05 - in safari it's using some other
54:08 - compilation method and that i can't
54:10 - think of off the top of my head
54:12 - but ultimately these are all different
54:14 - run times and you do have to be aware of
54:17 - you know where you're running your
54:18 - javascript code because it's going to
54:20 - run differently there are things that
54:23 - you cannot run within the node.js
54:25 - runtime if i tried to let's say open up
54:29 - the node.js runtime here all i have to
54:32 - do is click
54:33 - type node and it'll bring me into the
54:35 - the console if i tried to say
54:37 - document.query
54:40 - selector and then grab the body
54:42 - tag of the html and i press enter it's
54:46 - going to say uncaught reference error
54:48 - document is not defined and that is
54:50 - because in the node.js runtime the
54:53 - document object model does not exist
54:56 - like it does in the browser so you have
54:58 - to be aware of these different runtimes
55:00 - and understand that certain types of
55:02 - code can run
55:04 - in the different run times it's all
55:06 - javascript but you kind of get what i'm
55:08 - saying here and at this point per usual
55:11 - i've uh droned on way too long longer
55:14 - than i ever thought that i would but you
55:16 - have reached the end of the second
55:18 - lesson of my full stack web developer
55:21 - roadmap series
55:22 - and while we haven't written any
55:24 - javascript yet well i guess we did in
55:26 - the first lesson but we haven't actually
55:28 - learned javascript yet we do have a lot
55:31 - of context around it now which was the
55:33 - purpose of this video i really wanted to
55:36 - put this video together in order to give
55:38 - you that context so that when we start
55:40 - getting into the details you know
55:42 - variables and data structures and
55:45 - functions and loops all that kind of
55:47 - stuff you have a little bit of a
55:48 - background to understand it from if you
55:51 - liked this video please give it a thumbs
55:53 - up and subscribe to the channel if you
55:55 - want to follow along with this series
55:57 - and series in the future
55:59 - and with that hope you enjoyed the video
56:01 - and i'll see you in the next lesson
56:04 - [Music]
56:09 - in this video we're going to be talking
56:10 - about javascript variables and data
56:13 - types and be sure to stick around till
56:15 - the end of the video because i have some
56:16 - challenges and some practice questions
56:18 - that you can use to apply the skills
56:21 - that you learned in this video before we
56:23 - start talking about variables and data
56:25 - types i just want to mention that as we
56:27 - go through this series i'm not going to
56:30 - be covering everything that there is to
56:32 - know about the javascript programming
56:34 - language there are a lot of different
56:36 - features within javascript a lot of
56:38 - built-in
56:39 - functions and
56:41 - you know syntax shortcuts and all sorts
56:44 - of things like that that you can do but
56:47 - they're not absolutely necessary for you
56:49 - to write javascript code for example let
56:52 - me create a basic array here so we'll
56:55 - say
56:56 - my array and then we'll put some numbers
56:59 - in it and this is actually what this
57:01 - video is all about so don't worry if you
57:03 - don't understand this quite yet
57:06 - but javascript has some built-in methods
57:08 - that we can use on this array
57:11 - so we could say myarray.push
57:14 - and then we can add a number to the end
57:16 - of this array so just return the length
57:19 - of our new array and if we print it out
57:21 - you can see that there's the number 50
57:23 - at the end of it now that is an example
57:26 - of a very useful and commonly used
57:28 - built-in javascript
57:30 - prototype method that we're going to be
57:32 - covering in this series but there are
57:34 - other methods and there are a lot of
57:37 - them that we will not so for example we
57:40 - can say
57:41 - myarray.reverse
57:43 - now this one's pretty simple all it does
57:45 - is it reverses the order of the items
57:48 - within that array as you can see
57:50 - but this is not critical for you to
57:53 - learn to write good javascript code and
57:55 - be a web developer so i'm going to
57:58 - selectively exclude things like that and
58:01 - try to focus in on the most important
58:03 - things of javascript
58:05 - likewise there are also some very
58:07 - complex topics that we can discuss
58:09 - around
58:10 - the internals of javascript and how it
58:13 - works behind the scenes and how
58:15 - prototypes work and why it's technically
58:17 - not a class-based language and all these
58:20 - things are important for you to
58:22 - understand later down the road but when
58:25 - trying to get you from you know xero to
58:27 - deploying your first full stack web
58:29 - application they're not
58:31 - completely essential per se and believe
58:34 - it or not a lot of web developers that
58:36 - work full-time jobs and are employed
58:38 - getting paid lots of money
58:40 - don't fully understand the internals of
58:42 - javascript and that's why this series
58:45 - called you don't know javascript written
58:47 - by kyle simpson or his github username
58:50 - is getify
58:52 - and he's written this wonderful series
58:55 - or book series on javascript and how it
58:58 - works and you can go to each of the
59:00 - series on github and actually read all
59:03 - about
59:04 - you know how javascript works under the
59:06 - hood and he has a tremendous
59:08 - understanding of this language and
59:10 - explains it in great detail but i would
59:13 - say that you would use this as a
59:15 - reference and personally i think it's
59:17 - geared towards someone who has written
59:20 - javascript for some amount of time and
59:22 - it's something that i reference back to
59:24 - even now after writing javascript for
59:26 - about four plus years it's still a great
59:30 - resource to look back on so just know as
59:32 - we go through this series i'm not going
59:34 - to be covering absolutely everything and
59:37 - if you have questions be sure to just
59:39 - google it or go to this you don't know
59:41 - javascript series and
59:43 - pick the section you want to learn about
59:44 - and kind of read a little bit more about
59:46 - it and finally if i can get through this
59:48 - long intro we'll finally get to
59:50 - variables and data types but i want to
59:52 - show you one thing real quick
59:53 - and that is the console.log statement so
59:57 - when we're working within the javascript
59:59 - console in our firefox dev tools you can
60:02 - print a variable
60:04 - by using the console.log statement and
60:07 - this is built into javascript you can
60:09 - use it on the front end in the
60:11 - javascript console or the end and the
60:13 - node.js console
60:15 - and we can print something like
60:18 - hello world we've done this already once
60:20 - in a previous video but this is how
60:23 - we're printing we print different
60:24 - variables so if i just say my first
60:28 - variable
60:29 - and set it equal to 20 and then
60:31 - console.log
60:33 - that first variable
60:36 - you'll see that it prints it to the
60:37 - console that's going to be used heavily
60:40 - within this series so i want you to be
60:42 - familiar with it the next thing is the
60:44 - concept of comments so if you put two
60:47 - forward slashes before your code and
60:50 - then you write something this is
60:51 - obviously invalid javascript and you
60:54 - press enter it's not going to throw an
60:56 - error on you well if you type it like
60:58 - this it's going to say that there's a
61:00 - reference error because we haven't
61:02 - commented it out
61:04 - there's another way to write comments
61:06 - let me clear the screen here
61:08 - and you can put a forward slash and then
61:11 - a star
61:12 - and then you can enter down
61:13 - write whatever comments you want and
61:15 - then you just have to close it out by a
61:18 - star and then a forward slash and when
61:20 - we press enter it's not going to yell at
61:22 - us with any sort of error because we
61:24 - have written a comment so i just want
61:26 - wanted to basically introduce those
61:28 - concepts the console.log the single line
61:31 - comment and the multi-line comment
61:33 - you're going to see them a lot and
61:34 - they're very useful for
61:36 - you know marking up your code and
61:38 - remembering things about the code that
61:40 - you've written
61:41 - a big congrats if you're still watching
61:43 - this video it means that you are
61:44 - dedicated to learning how to code and
61:46 - for that reason let's jump into
61:49 - variables and data types in javascript
61:52 - so when i think of a variable in
61:54 - javascript i just think of a data
61:57 - container
61:58 - and a good analogy for this is the
62:00 - amazon warehouse so they've got these
62:03 - big vertical yellow
62:05 - stacks of containers with different
62:07 - products in them and then on the bottom
62:09 - they have little robots that kind of
62:10 - drive these containers around according
62:13 - to when the item
62:14 - items in the containers are meant to be
62:16 - shipped
62:18 - and i like to think of this as an
62:19 - analogy because javascript variables are
62:22 - very similar
62:24 - in that amazon warehouse each container
62:27 - is registered
62:28 - and all the robots know exactly where to
62:31 - find the container and the products that
62:34 - are within that container same thing
62:36 - goes for javascript variables your
62:39 - computer knows exactly where to find all
62:42 - of these javascript variables that you
62:45 - declare and assign values to and it's
62:47 - able to retrieve them instantly so you
62:50 - can think of javascript variables as you
62:53 - know you write them and then they are
62:55 - basically like little amazon products
62:58 - that get put into these containers and
63:00 - put in the back of the warehouse but the
63:02 - computer at all times knows exactly
63:05 - where to go in that warehouse to find
63:08 - the values of these variables in
63:10 - computer language we wouldn't really
63:11 - call it a warehouse we would just call
63:13 - it memory but it's a good analogy to go
63:16 - by and i think it'll help you remember
63:18 - what variables are all about just like
63:20 - amazon's containers can have various
63:23 - types of products stored within them so
63:26 - can javascript variables and we can look
63:28 - at this here we're going to just go
63:30 - through a couple examples of variables
63:33 - the first one will be we'll say your
63:35 - first
63:36 - variable
63:37 - and we'll say learning to code
63:40 - gives you super powers or something like
63:44 - that
63:44 - so that would be one example of a
63:46 - variable and that is actually a string
63:48 - variable we'll go into that a little bit
63:50 - later
63:51 - now you can have your second variable
63:54 - which will be equal to a number this
63:56 - time so equal to 10
63:58 - and finally we'll say your third
64:01 - variable and that'll be equal to
64:04 - an object and we'll say
64:06 - that this object has a property that
64:09 - says something like hello world
64:12 - and this is also a valid variable and to
64:15 - print these variables once again we can
64:17 - use this console.log statement and we
64:20 - can print your first variable something
64:23 - like that and you can see that it prints
64:25 - it out to the console so these are just
64:27 - examples of writing variables and now i
64:30 - want to go into each component of these
64:32 - statements so as you can see we have
64:35 - this keyword called const we have a
64:37 - little space here then we have what
64:39 - seems to be our variable's name
64:42 - then we have this equal sign
64:44 - then we have some sort of data and a
64:46 - semicolon at the end these are all
64:49 - really critical parts to writing
64:52 - javascript variables because when the
64:54 - compiler goes to basically interpret
64:57 - um the code that you have written it
65:00 - reads it in a specific order and it
65:02 - looks at every single
65:04 - what we call token within the code so
65:07 - for example if i tried to define
65:10 - a new variable
65:12 - and this time i'll just say
65:14 - another hello world
65:16 - something like that this would be valid
65:18 - but if we took out just even this single
65:21 - little quotation and pressed enter it's
65:23 - going to give us a syntax error and
65:26 - you're going to get a lot of these
65:27 - syntax errors when you first start out
65:29 - because
65:30 - they basically say hey you haven't
65:31 - written this javascript program
65:33 - correctly you've missed a specific token
65:37 - within your code
65:38 - now a lot of times you don't have to
65:40 - actually worry about these syntax errors
65:42 - what i have pulled up here is visual
65:44 - studio code which is a code editor we're
65:46 - going to work with a little bit later in
65:48 - the series we're not there yet but what
65:51 - i want to show you is that if we tried
65:53 - to say new variable and then we define
65:57 - hello world with a semicolon at the end
66:00 - it's going to look fine but if we go
66:03 - over here and delete this little uh
66:05 - quotation you're going to see that
66:07 - visual studio code picks up on the fact
66:10 - that there's an error in this syntax so
66:13 - a lot of the times when you're writing
66:14 - code we're not going to see it you know
66:16 - here in the console which is what we're
66:18 - using right now but once we get into
66:20 - code editors it's going to point these
66:22 - things out and you don't really have to
66:23 - worry too much about getting everything
66:26 - right
66:27 - as you're writing your code the next
66:28 - thing we have to talk about with
66:30 - javascript variables is the concept of
66:33 - declaration and assignment
66:36 - to properly use a variable you have to
66:38 - do that
66:40 - sequence of steps in order so you first
66:42 - have to declare the variable then you
66:44 - have to assign a value to it now if we
66:47 - typed in
66:48 - you know something like new variable and
66:50 - i'm going to actually refresh the page
66:51 - so we clear out all of the
66:54 - variables that we had already written
66:57 - so if i say
66:58 - new variable something like that
67:02 - and we say hello world
67:05 - that is going to not only declare but
67:07 - also assign this variable at the same
67:10 - time so in many cases we're doing it
67:13 - simultaneously
67:14 - but we can also break it out into
67:16 - individual steps and we can do that by
67:19 - using the let keyword and we'll say
67:22 - let
67:23 - another variable equal
67:26 - we'll say 20 this time
67:28 - or actually no we need to just put a
67:30 - semicolon at the other end of it
67:32 - and by doing that we have actually
67:34 - declared the variable and now we have to
67:37 - assign a value to it and we don't have
67:40 - to put the let keyword at the beginning
67:42 - we just assign a value
67:44 - and we can print this to the console by
67:46 - saying another variable
67:50 - and you can see that it equals 20. so in
67:53 - the second example i declared it then i
67:56 - assigned it and it's important to
67:58 - understand this concept you don't
68:00 - necessarily have to
68:01 - you know think about this while you're
68:03 - coding but i wanted to point this out
68:05 - and it brings up another good point
68:07 - about this const versus let versus var
68:10 - keywords at the beginning of your
68:12 - variable expressions let me go ahead and
68:14 - write the same
68:16 - variable per se in three different ways
68:19 - so first we can say variable one equals
68:23 - and that's using the const keyword then
68:26 - we can say let variable
68:29 - we'll say 2 this time
68:31 - equals 10 that's valid and then we can
68:34 - say var
68:36 - variable 3.
68:38 - can't type here equals 10. and you can
68:41 - see that all three of these ways of
68:43 - writing a javascript variable are valid
68:46 - so you might ask the question well how
68:47 - do we decide between const let and var
68:51 - you need one of them at least to
68:54 - create a variable if we just tried to
68:56 - say
68:56 - um you know
68:58 - random
69:00 - random keyword and then variable
69:04 - 4 equals 10 it's going to give us an
69:06 - error because random is not an assigned
69:09 - keyword such as constellat or var let's
69:12 - go ahead and start with var and that is
69:14 - the only keyword that i would recommend
69:17 - against using it's kind of a legacy
69:19 - keyword within javascript
69:22 - it's something that existed in the old
69:24 - versions and standards of javascript and
69:26 - nowadays we have the constant let
69:29 - keywords which will pretty much cover
69:32 - every situation that we need to now the
69:34 - reason var is not used anymore is
69:37 - because it can be
69:39 - redeclared so if we say
69:42 - var
69:44 - my variable equals 10 and then we say
69:47 - var
69:48 - my variable
69:50 - equals
69:52 - i'm sorry i can't type today equals 20.
69:55 - it's going to actually update the value
69:58 - of that variable
69:59 - without yelling at you at all but if you
70:02 - use a keyword like const so we'll say
70:06 - another
70:07 - variable equals 10
70:09 - and then we say const
70:12 - another variable
70:13 - equals 20 it's going to say that there's
70:16 - a syntax error and it's going to yell at
70:18 - us for re-declaring a constant variable
70:21 - with the var keyword being able to
70:23 - re-declare a variable seems convenient
70:25 - and it actually is when we're working
70:27 - within the console but when you're
70:29 - actually writing code it can be kind of
70:31 - dangerous and you can have some unwanted
70:33 - side effects
70:34 - by being able to redeclare a variable
70:37 - the next keyword i want to talk about is
70:39 - let and let is something that you will
70:42 - use whenever you expect to reassign a
70:45 - variable at some point in your code so
70:48 - we just kind of talked about
70:49 - re-declaring a variable and that's very
70:51 - different from reassigning a variable so
70:54 - if you remember you first declare the
70:56 - variable which is basically saying
70:59 - go back to our amazon analogy where
71:01 - we're talking about you know the
71:02 - containers and the robots have to
71:05 - remember where those containers are in
71:06 - the warehouse well your computer has to
71:10 - first register or declare these
71:12 - variables and then once it's declared it
71:15 - kind of allocates some memory space
71:18 - on the hard drive or something like that
71:20 - or in ram to basically remember where to
71:23 - retrieve that variable from so that's
71:25 - the declaration step and then the
71:27 - assignment step is where we take an
71:29 - actual value and we say okay put put
71:32 - this value in this variable and so the
71:34 - computer will go find that variable that
71:36 - was declared into memory and assign your
71:39 - new value to that you know little memory
71:42 - slot so we will always use let when we
71:45 - expect to reassign a variable so let me
71:47 - show you what this
71:48 - basically looks like so let's say that
71:50 - we have a counter and we start that
71:53 - counter at zero
71:55 - and then we want to actually increase
71:58 - the value of that counter so we can say
72:00 - counter equals counter plus one
72:03 - and we can also say counter plus plus
72:06 - that will do the same thing as the
72:08 - previous line that i just wrote so now
72:10 - we should have it equal to
72:13 - 2
72:14 - and you can see that it is now equal to
72:17 - 2 and you can see that we are
72:19 - reassigning the value of this variable
72:21 - multiple times now if we tried to
72:25 - let me refresh the page real quick so
72:27 - that we can use this variable again
72:30 - and if we tried to say counter equals 0
72:33 - with the const keyword and then we tried
72:36 - to say plus plus it's going to say that
72:38 - we have a type error because we can't
72:41 - assign or reassign a value to a constant
72:45 - variable
72:46 - so that's when you want to use constants
72:49 - is basically when you expect the value
72:51 - to never change
72:52 - so a good example of that is say we have
72:54 - a program that calculates some sort of
72:57 - i don't know income statement you want
72:59 - to put in a tax rate for this individual
73:02 - so you might program in something like a
73:05 - tax rate and that will be equal to
73:08 - 0.08 for eight percent
73:11 - and you press enter and now this
73:13 - constant variable is never going to
73:16 - change your tax rate's never going to
73:18 - change and that is the best use case for
73:20 - a constant variable so just remember you
73:23 - use let when you expect the value to be
73:25 - reassigned to a variable and you use
73:27 - const when you
73:29 - expect the variable to never change
73:32 - values
73:33 - now the the concept of a constant is
73:37 - pretty universal in programming and it
73:39 - spans across many languages
73:41 - oftentimes you'll see constants written
73:44 - something like this so we'll say tax
73:46 - rate equals
73:48 - 0.8 percent
73:50 - and you can see that the variable has
73:52 - been written in all caps and separated
73:54 - by an underscore
73:56 - now you'll see this very often
73:59 - but this is just a semantic difference
74:02 - and it's functionally the same as what
74:03 - we had written before and that actually
74:06 - leads us into our next discussion which
74:08 - is about variable naming conventions i'm
74:11 - going to paste a couple different
74:13 - versions of variables in here
74:15 - and we'll press enter and you can see
74:17 - that all of these are actually valid in
74:20 - javascript they're all written slightly
74:22 - differently
74:23 - but they're functionally kind of the
74:25 - same
74:26 - so these are all saying your first
74:28 - variable but javascript recognizes them
74:31 - as different variables that's why we're
74:33 - allowed to declare all of these at once
74:36 - and they all functionally operate the
74:39 - same but there are a couple of these
74:41 - that are more preferable in the
74:43 - javascript programming language than
74:45 - others
74:46 - so for example the first variable that
74:49 - we have here
74:50 - is written in something called camel
74:52 - case and that is basically where the
74:55 - first letter of your variable
74:58 - is lowercase and then each successive
75:01 - word or
75:02 - logical separated word within your
75:05 - variable is going to be capitalized
75:08 - so this is called camelcase and then
75:10 - there's another version down here which
75:13 - is called pascal case
75:15 - which is basically where it's the same
75:17 - thing as camelcase except the first
75:19 - letter is capitalized the second
75:22 - variable here where we have underscores
75:24 - in between lowercase letters is called
75:26 - snake case
75:28 - then you have this one right here that
75:30 - we just talked about which is called
75:32 - constant case
75:33 - and then finally you just have a totally
75:36 - lowercase
75:37 - variable
75:38 - and these are all different semantic
75:40 - styles that you can put on a javascript
75:43 - variable or any programming language
75:45 - variable
75:46 - and oftentimes these indicate to other
75:49 - programmers something about your code
75:52 - i'll talk about what these mean in just
75:53 - a second but first i want to talk about
75:55 - what makes these valid
75:57 - so
75:58 - you can really think of a variable in
76:00 - javascript
76:01 - kind of like a twitter hashtag so if you
76:04 - were to write a twitter hashtag and
76:06 - we'll say the full stack
76:09 - roadmap which is the one that we have
76:11 - for this series this would be a valid
76:13 - twitter hashtag because it's all one
76:16 - word
76:16 - now if i
76:18 - put a space here at the end then
76:20 - twitter's only going to recognize that
76:22 - first part or full stack and then it's
76:24 - going to treat roadmap as just normal
76:26 - text and that's exactly how javascript
76:29 - works with variables if we tried to
76:31 - define this as a variable so let's say
76:34 - const full stack roadmap
76:37 - equals 10
76:38 - it's going to give us a syntax error
76:40 - because we have a space in between
76:42 - these two words to have a valid
76:44 - javascript variable you have to put
76:46 - everything in one word and use one of
76:48 - these conventions up here at the top now
76:52 - there's also a few things you can't do
76:53 - so we we cannot do something like this
76:56 - where we say full stack
76:58 - equals 10 you can't have these little
77:00 - quotes here this is not going to work
77:03 - and then you also cannot start
77:06 - a variable with a number so you can see
77:08 - that i put 1 at the beginning of this
77:11 - variable it's going to throw an error
77:13 - but if i put full stack 1 at the end so
77:17 - now we have our number at the end of the
77:19 - variable that works just fine so these
77:22 - are just some of the things to watch out
77:24 - for it's fairly intuitive and you'll get
77:27 - the hang of this
77:28 - really quickly and if you don't get the
77:30 - hang of it the javascript debugger is
77:32 - going to yell at you and it's basically
77:33 - going to give you a bunch of syntax
77:34 - errors all right so now that you know
77:36 - how to validly declare and assign a
77:39 - variable
77:40 - let's talk about something called a
77:42 - style guide and this goes back to the
77:45 - concept that we see up here where we
77:47 - have all these different semantic ways
77:49 - to write a variable they all work but
77:52 - some of them are more preferable than
77:54 - others depending on what language you're
77:55 - writing in and what you're trying to do
77:57 - with the individual variable that you're
77:59 - declaring if you type in javascript
78:02 - style guide into google you'll find a
78:04 - couple different style guides by
78:06 - different companies so this is google's
78:09 - javascript style guide and here would be
78:11 - airbnb's javascript style guide so
78:14 - basically what these are are
78:16 - specifications for the employees of
78:18 - these different companies that says here
78:21 - is how we want you to write your
78:23 - javascript for our company and what this
78:26 - might entail is different naming
78:28 - conventions different
78:30 - use cases of different javascript
78:32 - features
78:34 - all that kind of stuff there's a
78:35 - plethora of things that you'll find
78:37 - within these style guides but the one i
78:39 - want to look at is naming conventions so
78:42 - we can find this within
78:44 - each of the style guides kind of have to
78:46 - look for it here real quick so here is
78:50 - naming for google so we have the naming
78:52 - style guide for google and airbnb
78:55 - and you'll see that
78:57 - each of them recommend camel case so we
79:00 - can see
79:02 - package names need to be lower camel
79:05 - case
79:06 - class names are upper camel case let's
79:09 - go down to
79:11 - normal variables so non-constant field
79:14 - names should be lower camelcase
79:17 - local variables lower camelcase you kind
79:20 - of get the point they're all pointing
79:22 - towards this lower camel case
79:24 - convention and if we go to airbnb you'll
79:27 - see here that it says use camel case
79:29 - when naming objects functions and
79:31 - instances
79:32 - this is a bad example this would be a
79:35 - good example
79:36 - so you'll see within these two different
79:38 - companies they're both recommending
79:40 - camelcase and that's actually a
79:42 - recommendation across all of the
79:44 - javascript community so you'll see a lot
79:46 - of javascript code written in this camel
79:48 - case as we saw here with our first
79:51 - variable and this is what i would
79:53 - recommend you do as you're starting to
79:55 - learn how to write javascript the last
79:57 - thing i want to talk about with naming
79:59 - conventions for variables
80:02 - is what we're actually naming them so
80:04 - you'll see here that these are very
80:06 - descriptive um this is clearly
80:09 - indicating to the programmer that you're
80:11 - practicing you're writing your first
80:12 - variable but there's also going to be
80:14 - programs where you're going to have
80:17 - multiple variables within a single
80:19 - function or a class
80:21 - and you need to identify between these
80:23 - different variables so tell me would
80:25 - this be an appropriate way to name a
80:28 - variable if we just said q equals 20
80:31 - well the answer is no because how are
80:33 - you going to ever know what that q is
80:35 - supposed to represent maybe it
80:37 - represents a counter in a for loop uh
80:40 - maybe it represents
80:42 - i don't know
80:43 - the
80:44 - the tax rate on something you know
80:46 - whatever it means you need to
80:48 - name your variable accordingly so if
80:51 - this 20 represents a 20 tax rate or
80:54 - something like that we need to call it
80:57 - tax rate
80:58 - for
80:59 - net income or something like that where
81:02 - you're clearly specifying what this
81:05 - value represents
81:07 - now there's also the the case where you
81:09 - can get too complex with this and write
81:11 - out a variable that's way too long and
81:14 - in that case it gets hard to write that
81:16 - code because you're constantly having to
81:19 - type this super long variable and it
81:21 - takes you longer so you want to find
81:23 - that middle ground where you're not
81:25 - being so vague where it's just saying
81:27 - the the variable's name is q and you're
81:30 - not so specific that you can't you know
81:32 - write your variable within 10 seconds
81:35 - the next thing we have to talk about is
81:37 - the left side of the variable
81:39 - expression and the right side of the
81:42 - variable expression so let's write our
81:44 - first variable
81:48 - javascript
81:49 - gives you
81:50 - super powers
81:53 - something like that we'll press enter
81:55 - and let's take a look at this
81:57 - so on the left side when i say the left
81:59 - side i'm talking about everything
82:02 - left
82:02 - of this little equal sign in the middle
82:05 - and when i say the right side i'm
82:06 - talking everything right of this little
82:08 - equal sign in the middle so it's very
82:10 - important to make a distinction between
82:12 - the left and the right because
82:14 - depending on what you're putting on each
82:16 - side you're going to get different
82:18 - behaviors the left side of the equal
82:20 - sign is always going to include two
82:22 - things it's going to include either
82:25 - const or let and you could use var but i
82:28 - don't recommend it and then it's going
82:30 - to have a single space right here and
82:33 - then it's going to have your properly
82:35 - constructed
82:36 - variable name and then i
82:39 - always use another space this is just
82:42 - good
82:43 - code formatting after that and then an
82:45 - equal sign and everything left of the
82:47 - equal sign is considered the target or
82:50 - that container that you're trying to put
82:52 - some sort of data or value
82:55 - into so this is where you're storing
82:57 - your container now on the right side of
83:00 - the equal sign you have the actual value
83:03 - that you're assigning so the right side
83:05 - could be one of many different things
83:07 - and this is where we get into the
83:09 - concept of data types
83:11 - in this case we have a string on the
83:14 - right side of our equal sign
83:16 - and then followed by a semicolon that's
83:19 - to indicate the end of the
83:21 - variable expression so i want to touch
83:24 - on that real quick let's say that we had
83:27 - one variable
83:29 - equals 20
83:30 - and then const
83:33 - second
83:34 - variable
83:35 - equals
83:36 - 30. this would be a valid expression we
83:40 - wrote them on the same line but we ended
83:43 - each statement with this semicolon now
83:45 - if we were to pull this up again all i
83:48 - did was press the up arrow key to get my
83:51 - last statement in the console that's a
83:53 - quick shortcut for you
83:55 - and if we were to take out this
83:57 - semicolon here
83:59 - and let's go ahead and
84:01 - i don't know rename these variables so
84:02 - that we can actually experiment around
84:04 - with them
84:05 - so one and second and then press enter
84:08 - it's going to yell at us because we
84:10 - don't have a semicolon at the end of our
84:13 - first variable declaration and that's
84:15 - why that semicolon is so important it
84:17 - kind of indicates the end of an
84:19 - expression just for an example here's a
84:22 - bunch of code that i wrote that is
84:24 - demonstrating that we can have multiple
84:27 - different things on the right side of
84:29 - our expression so you can see in each
84:31 - line we have our basic variable
84:33 - declarations but on the right side we
84:36 - have anything from a number to another
84:39 - variable to a string to an object to an
84:42 - immediately invoked function to a
84:45 - combination sorry it keeps disappearing
84:47 - a combination or addition of variables
84:51 - and if we were to console.log
84:54 - variable
84:55 - 6 here you're going to see hello my name
84:58 - is zach and basically what that's doing
85:00 - is it's taking the value derived from
85:02 - variable 5 which is returning us
85:05 - this hello my name is and then it's
85:08 - adding to variable 3 which is zach so
85:11 - you can see how we have a lot of
85:13 - different options on the right side and
85:15 - this is always going to equal the value
85:18 - which could
85:19 - come from a function or a specific data
85:22 - type it can come from a lot of things
85:24 - and that is assigned to the target
85:26 - container on the left side of the equal
85:27 - sign all right let's go a little bit
85:29 - simpler here again i'm going to paste in
85:31 - three variables the first one we have is
85:34 - a number the second is a string and the
85:37 - third is a boolean so let's talk about
85:39 - these different data types a little bit
85:42 - there are a couple different data types
85:44 - in javascript and the three most common
85:47 - are sitting on the screen right now
85:49 - these are kind of the prim primitive
85:51 - data types now you might notice that as
85:54 - we have declared and assigned these
85:56 - variables we didn't really mention what
85:58 - data type we are specifying here and in
86:01 - a lot of languages such as c or c plus
86:05 - plus or java they actually require you
86:08 - to specify what type of data you are
86:10 - assigning to this variable
86:12 - another example of that would be
86:14 - typescript which is actually a superset
86:16 - of javascript that we might talk about a
86:19 - little bit later in the series but
86:21 - basically it's a it's a language that
86:24 - compiles down or it's actually
86:27 - transpiled down to javascript and it
86:30 - allows for type uh checking or static
86:33 - typing
86:34 - so this is how you would declare a
86:37 - variable within typescript so we would
86:40 - say the variable 1 equals a number and
86:43 - that is equal to 10. so in this
86:45 - declaration and assignment we are saying
86:48 - okay we have this variable one this is a
86:51 - number and here's the value which is a
86:53 - number assigned to it and this is what
86:56 - we would call a statically typed
86:58 - language and when we say statically
87:00 - typed all we mean by that is the fact
87:03 - that you are
87:04 - before you run your code telling the
87:06 - compiler what types of data to expect
87:10 - now javascript is what we would call a
87:12 - dynamically typed language and you can
87:14 - see this above where
87:16 - this variable 1 the compiler is going to
87:19 - have no clue what type of variable this
87:22 - is until it actually evaluates
87:25 - the assignment value that you've given
87:27 - it and figures out what type it is and
87:29 - you can actually see the type of each
87:32 - variable so if we typed in variable 1
87:35 - using this built-in type of function
87:38 - we can also say variable 2 and variable
87:41 - 3 to see the different types of the
87:44 - variables so you might say well if
87:46 - javascript is dynamically typed
87:49 - and we don't really need to specify the
87:52 - data type that we're assigning to the
87:53 - variable then why should we even care
87:56 - well that is exactly the reason you
87:58 - should care because if you're writing
87:59 - code like this and you're assigning all
88:02 - sorts of different values to
88:04 - these variables it's really important
88:06 - that you always recognize what types of
88:09 - values you're assigning to your
88:11 - variables so that you know you don't try
88:13 - to do something like this where you say
88:15 - variable 1
88:18 - plus variable
88:20 - 2
88:22 - and then it will say 10 some value so
88:25 - clearly something happened here you
88:27 - tried to
88:28 - add a number in a string together
88:31 - but javascript has magically coerced the
88:35 - first variable which is a number into a
88:38 - string and it has combined those or
88:41 - concatenated those strings together into
88:43 - a single string
88:45 - so without understanding the different
88:47 - data types that you're assigning to your
88:49 - variables
88:50 - things like this are going to get very
88:52 - confusing and you might try to add
88:53 - things together or combine variables
88:56 - together and you don't know why they're
88:58 - combining in the way that they are this
89:00 - right here is actually called implicit
89:03 - coercion of a variable type we're not
89:06 - going to talk about this quite yet but
89:07 - basically what's happening is it's
89:09 - taking variable 1 which is of type
89:12 - number and variable 2 which is of type
89:15 - string and it's saying i want to coerce
89:18 - this number into a string and then
89:21 - combine the values together so you can
89:24 - have a variable such as
89:26 - number 1
89:28 - will equal to will be equal to 10 as a
89:31 - string
89:32 - and then we can say number
89:34 - 2
89:35 - equals
89:37 - 20 as a number and if we said the type
89:40 - of number one it's going to give us a
89:42 - string and the type of number two is
89:46 - going to be a number but what we can
89:47 - actually do is explicitly rather than
89:51 - implicitly coerce these two
89:53 - variables together so if we implicitly
89:56 - do it and say number one plus number two
90:00 - it's going to give us 10 20 because it
90:02 - is basically coerced this number of 20
90:06 - into a string and concatenated together
90:09 - with this
90:10 - first string which is 10. but if i
90:12 - wanted to add these two together as
90:14 - numbers all i have to do is use the
90:16 - built-in math function
90:18 - to
90:19 - or not math i'm sorry
90:21 - number function to
90:23 - put the number 1
90:25 - which is a string into a number and then
90:28 - i can add that to number 2 which is
90:30 - already a number and now it's going to
90:32 - give me the correct answer
90:35 - which is 30 and that is the addition of
90:37 - those two numbers so you can see that if
90:40 - you're not paying attention to the types
90:42 - of data that you're working with you
90:44 - might have unexpected results as we saw
90:47 - right here when we added a string and a
90:49 - number together all right so now that
90:51 - we've talked about the importance of
90:53 - data types let's go through each of them
90:55 - and just get an overview of what they
90:57 - look like
90:58 - so let's clear this out
91:00 - so the first one we're going to do is a
91:02 - string value
91:03 - and there are actually two ways that you
91:05 - can declare a string value you can first
91:08 - say
91:09 - something like hello world with these
91:11 - single quotations and that would be
91:14 - valid you can also say another string
91:18 - value and specify with double quotations
91:22 - hello world and that's going to work
91:24 - just the same there's no better you know
91:27 - way to do this but i would say just like
91:30 - we use lower camel case for
91:33 - writing javascript variables the
91:35 - convention within the industry is
91:37 - generally going to converge on these
91:40 - single quotes and a lot of
91:43 - code linters which actually
91:47 - a code linter is something that will
91:48 - take a big style guide like the ones we
91:51 - looked at before and it'll actually
91:53 - write these rules into code and then
91:55 - while you're typing your code within a
91:57 - code editor like visual studio code it
92:00 - will take all those rules and it will
92:02 - apply it to the code that you're writing
92:04 - as you're writing it
92:06 - so a lot of these code linters are going
92:08 - to specify that they want your code
92:10 - written with these single quotes rather
92:13 - than the double quotes
92:14 - that you can also write a string as
92:17 - moving on to numbers these are a little
92:19 - bit easier all you have to say
92:22 - let's say number values are variable all
92:25 - you have to do is specify a number and
92:28 - there's nothing nothing to it here now
92:30 - the one thing that you might mess up on
92:32 - at some point let's just make this a
92:34 - different variable you might try to add
92:36 - a comma in there to specify a larger
92:39 - number and when you press enter here
92:41 - it's going to give you a syntax error
92:43 - because this is not a valid way to write
92:45 - a number you always have to just write
92:47 - the number as one big number there's no
92:50 - commas or anything that you can put in
92:52 - it booleans are also pretty simple so if
92:56 - we want to write a boolean
92:58 - boolean value
93:00 - is going to either be equal to true or
93:03 - it's going to be equal to false so
93:05 - that's pretty simple there's only two
93:07 - possible values that you can put in
93:08 - there
93:09 - that's booleans now the next one is
93:12 - arrays and this is where we start to get
93:14 - into a little bit more complex data
93:16 - types
93:17 - so let me clear the screen to work on
93:20 - this real quick
93:21 - and if we wanted to say
93:23 - first array
93:25 - and then we want to put in some numbers
93:27 - here
93:28 - we can do that
93:30 - and you can see that an array is
93:32 - specified by these opening enclosing
93:35 - brackets and then values here that are
93:38 - separated by commas
93:40 - so you can think of an array and i know
93:42 - computer science
93:44 - people would yell at me for saying this
93:46 - but you can think of this array as just
93:48 - basically a list
93:50 - and this list is separated by commas and
93:53 - within this list you can actually put
93:56 - any data type that you want so we have
93:59 - numbers in this first array but we could
94:01 - also put in a variety of data types so
94:05 - we can put in a number
94:07 - a string here we can put in an object
94:11 - we're going to get to that in
94:13 - a second
94:16 - and we can also put in another array so
94:19 - we just put in another array within this
94:21 - array so these are all valid things you
94:24 - can put in an array and you can kind of
94:25 - mix them together you probably won't do
94:28 - this very often where you're mixing data
94:30 - types but just wanted to
94:32 - say that you can do that and that's part
94:34 - of javascript's dynamically typed
94:37 - language feature now the important thing
94:39 - to understand about arrays is that
94:41 - they're indexed and when we say index
94:44 - each of these values separated by commas
94:47 - are
94:48 - uh identified by a single index and
94:51 - these indexes start at zero so they
94:54 - don't start at one as you would think so
94:56 - in this first array you might say oh
94:58 - this value 10 is represented by the
95:01 - index of 1. well no that's not the case
95:03 - this is represented by the index of 0
95:06 - and then you just count up in order so
95:09 - 10 would be represented by 0
95:12 - 20 would be represented by 1 30 by 2 and
95:15 - 40 by 3. and we can retrieve these
95:18 - values from the array
95:20 - by saying first array so you type out
95:23 - your array variable and then you use
95:26 - brackets just like you
95:28 - did to write them but this time you pass
95:31 - in the index so if we wanted to grab
95:33 - this value of 10 from the first array we
95:37 - just type in the zeroth index
95:39 - and press enter and it's going to give
95:42 - us that value from the array now we can
95:44 - also retrieve
95:46 - these other values so say from the
95:47 - second array let's say that we wanted to
95:50 - get this last value which is actually
95:53 - another array we could say console.log
95:57 - second array
95:59 - and then we can use brackets and we'll
96:01 - count this is zero this is one this is
96:04 - two and then this would be the third
96:07 - so we can say three
96:09 - and that's going to give us this array
96:11 - we can even tack on another set of
96:13 - brackets and we'll say we want the third
96:16 - or the actually the second value
96:19 - i'm sorry i'm misspeaking totally here
96:21 - we want the fourth value from this array
96:24 - by using the index of three and then
96:26 - let's say we want the zeroth value or
96:28 - this value of one from the the array
96:31 - that we've grabbed there and now you can
96:33 - see that we can grab
96:35 - values from nested arrays so that's the
96:38 - important thing to know about arrays you
96:39 - have to pay attention to the indexes and
96:41 - then you use bracket notation to
96:44 - retrieve those values from their
96:46 - respective indexes
96:48 - the next thing we'll talk about is
96:50 - objects and in javascript these are very
96:53 - important you might even hear the phrase
96:55 - that everything is an object in
96:57 - javascript
96:58 - and that that is true i don't want to
97:00 - get into the subtleties of it today but
97:03 - it is very important nonetheless to
97:05 - learn how these objects work in
97:07 - javascript because you're going to be
97:09 - using them in every single program that
97:12 - you ever write to understand objects
97:14 - just think of them as a complex
97:16 - container so going back to that amazon
97:19 - analogy where you have those carts of
97:22 - different containers and then within the
97:25 - containers
97:26 - let's say that you have other containers
97:29 - that have the amazon products so let's
97:31 - say that you have some sort of jewelry
97:33 - product
97:35 - that is sold on amazon you might have a
97:36 - big container and then you might have 30
97:39 - different little containers within that
97:40 - big container
97:42 - and then within each of those
97:44 - 30 little containers you have
97:46 - different pieces of jewelry so that is
97:49 - kind of what a javascript object is all
97:52 - about
97:53 - you can make it infinitely complex
97:55 - infinitely nested
97:57 - there's just so much you can do with it
97:59 - so let's jump in and see what a basic
98:01 - object looks like
98:03 - so we'll say
98:05 - object variable
98:07 - and then this is indicated by these
98:09 - little curly braces
98:12 - this is what you enclose an object in
98:15 - and then within an object you have to
98:17 - give it properties so these properties
98:20 - are written just like a javascript
98:22 - variable and you can kind of think of
98:24 - them as variables contained within the
98:27 - object so we might say prop 1 and then
98:31 - you use a little colon to say okay that
98:34 - variable i want to assign the following
98:37 - value to so we'll say we want to assign
98:40 - uh the number 20.
98:42 - and then to create another property you
98:44 - have to put a comma
98:46 - after the first property so it's sort of
98:50 - kind of like an array where you have
98:53 - a bunch of different values separated by
98:55 - commas but in this case you kind of have
98:58 - to think of it as a key value pair so
99:01 - this is the key which would be the prop
99:03 - 1 or the variable and then this is the
99:06 - value right here on the other side of
99:08 - the colon if you want to say prop 2 and
99:10 - then we want to set that to 50 you can
99:12 - do so like that then you put your
99:14 - semicolon at the end press enter and now
99:17 - we have the object variable with prop 1
99:20 - and prop 2. now to access these
99:23 - properties within the object we use
99:25 - something called dot notation so unlike
99:28 - the array where we would say object
99:30 - variable and then you put little
99:33 - brackets and say
99:35 - 0 or something like that we can't do
99:37 - that that's not going to work but if we
99:39 - said object variable dot
99:42 - prop 1
99:43 - like that then we're going to get the
99:44 - value of 20. so we access the properties
99:48 - using dot notation and this can be
99:50 - infinitely nested so let's construct an
99:53 - object right here
99:55 - we'll say it's a nested object and it'll
99:57 - be equal to
100:01 - we'll say layer 1
100:03 - and then layer 2
100:05 - and we're just making a bunch of objects
100:08 - nested within each other and then we'll
100:11 - say target value will be 20. and so this
100:15 - target value is simply a property
100:18 - nested within
100:20 - several other properties within this
100:22 - object
100:23 - so we'll press enter and then to get
100:25 - that value you just say nested object
100:28 - dot layer 1 dot layer 2 dot layer 3
100:32 - and then dot target value and you get
100:34 - the value of 20. so you can see how this
100:37 - dot notation allows you to basically
100:39 - grab the
100:41 - values of the properties off of
100:44 - the object and notice how when i'm using
100:47 - this dot notation
100:49 - i'm specifying the property so we could
100:51 - also do this um so we're going back to
100:55 - our object variable right up here
100:57 - so we can also like i said you can't use
100:59 - this zero here but what you can do
101:02 - is you can use this bracket notation you
101:06 - just have to define the property that
101:08 - you want to grab
101:10 - in that bracket notation so that's
101:12 - another way to retrieve a value from an
101:15 - object
101:16 - i prefer the dot notation usually but in
101:19 - some cases you might need this because
101:22 - maybe you know the name of the property
101:24 - so you know the name of the property is
101:26 - property one so instead of explicitly
101:29 - writing this
101:31 - property as a string you might store it
101:32 - in another variable and then pass
101:35 - the property value variable into your
101:38 - object
101:39 - i don't want to get too far into that
101:40 - because that's going down a little bit
101:42 - of a rabbit hole but you may need both
101:44 - of these in certain situations
101:47 - the last thing we'll talk about is
101:48 - functions and we're not really going to
101:50 - talk about them much
101:51 - but i did want to say that functions are
101:54 - valid
101:55 - things that you can assign to a variable
101:58 - and this goes back to the concept of
102:00 - everything is an object in javascript so
102:03 - let me just show you a brief example
102:06 - we'll say
102:07 - function container
102:10 - variable just to be descriptive here
102:12 - and then we can write a function like
102:15 - this
102:16 - and this function will maybe return the
102:20 - value of 20. so we are storing that
102:24 - function in this variable and then we
102:26 - can actually uh call this function like
102:30 - this and get the value of 20 that was
102:32 - returned from it but we haven't learned
102:34 - how functions work return values all
102:36 - that stuff so don't worry about this i
102:38 - just wanted to show you that this is a
102:41 - variable and we can actually assign a
102:44 - function
102:45 - to that variable so that's a valid thing
102:47 - to put on the right side of that equal
102:49 - side all right if you're still here huge
102:52 - congrats you're probably one of very few
102:55 - people that
102:56 - have the patience to sit through a video
102:59 - of mine
103:00 - that goes into sometimes excruciating
103:02 - detail about things
103:04 - but thank you for watching i just want
103:06 - to go through a quick summary of what we
103:09 - learned here and then offer you some
103:10 - exercises that you can
103:13 - use to actually practice the concepts we
103:16 - learned in this video so just to
103:18 - summarize when using variables we first
103:21 - have to declare it and then we have to
103:22 - assign it a value
103:24 - and these are often done in the same
103:27 - line of code the same step
103:30 - when we are using the different keywords
103:32 - so let const and var
103:35 - we probably never want to use var but
103:38 - when we use let it's because we want to
103:41 - reassign the value of a variable and
103:43 - when we use const it's because we expect
103:46 - the value of this variable to not change
103:48 - within the program
103:50 - next up the left side of the equal sign
103:53 - represents the variable that will hold
103:55 - the value that you're assigning so it's
103:57 - kind of the target for that data
104:01 - the right side represents the actual
104:03 - value
104:04 - there are many ways to write a
104:06 - javascript variable but camelcase is the
104:08 - preferred way you'll see this most often
104:11 - in the javascript community
104:13 - and then there are five main types of
104:15 - variables you have strings numbers
104:18 - booleans arrays in objects
104:20 - and those functions that we just talked
104:23 - about kind of fall into that object data
104:25 - type
104:26 - so the final thing is that a semicolon
104:29 - represents the end of a javascript
104:30 - expression you always put that at the
104:32 - end except if you're using an object in
104:35 - which case you can enter down onto
104:37 - multiple lines and you actually have to
104:40 - use commas to separate those different
104:43 - object properties that's it for the
104:45 - summary now let's move on to the
104:47 - challenges and practice for this video
104:49 - so like i said you're not going to be
104:51 - able to just watch these videos and
104:53 - learn how to code you have to actually
104:54 - apply them
104:56 - and at the end of each video i want to
104:58 - at least give you a few challenges to
105:00 - work through to apply your knowledge
105:02 - so i'm going to just put these
105:04 - challenges on the screen here for a few
105:06 - seconds
105:07 - and you can go ahead and work through
105:09 - them in the console within the firefox
105:11 - dev tools that we talked about in the
105:13 - previous
105:14 - lesson and how to use that and the
105:16 - answers are going to be on my github
105:18 - account and i'll link to those in the
105:20 - description so that you can see if you
105:22 - got them right all right on to the
105:24 - challenges for today good luck and i
105:26 - will see you in the next video
105:49 - [Music]
105:59 - today we're going to be talking about
106:00 - javascript operators and be sure to
106:02 - stick around till the end because i have
106:05 - a handful of challenges for you to try
106:08 - out and solve on your own to practice
106:11 - the skills that you learn in this video
106:13 - before we talk about javascript
106:15 - operators i want to do a little review
106:18 - of what we talked about in the previous
106:20 - video which was javascript variables and
106:22 - data types because they're going to
106:24 - actually come into play during this
106:26 - video so if we right click anywhere in
106:29 - our firefox web browser and click
106:31 - inspect element
106:33 - let me make this a little bit larger for
106:35 - us so that we can see
106:37 - and then you go to the console you're
106:40 - going to
106:41 - get into a repl or i think that stands
106:44 - for read evaluate print and loop which
106:46 - basically allows you to execute
106:48 - javascript without setting anything up
106:51 - so we're going to be using this to
106:53 - code in this lesson but also to review
106:55 - what we did last time so last time we
106:57 - talked about javascript variables
107:00 - and the way that you declare and assign
107:02 - a variable is one of three ways we can
107:05 - say
107:07 - const and then a space and then the
107:09 - variable name we're just going to call
107:10 - it a here
107:12 - and then you give it some sort of value
107:14 - this is a valid way to define a variable
107:16 - we can also do it with let a equals 20
107:20 - and we could or not we can't use a
107:23 - actually because we already declared
107:24 - this up here with the const so we need
107:27 - to do something like b
107:29 - and then we can also use var but i don't
107:32 - recommend using this because it's kind
107:33 - of an outdated legacy feature of
107:36 - javascript but nevertheless it still
107:38 - works we can still declare and assign a
107:40 - variable that way
107:42 - now we also talked about how
107:44 - you cannot reassign
107:46 - something that you
107:48 - assigned as cons so if you wanted to say
107:51 - value will not change
107:54 - as the variable name and you set that
107:57 - equal to 20 and then you try to say
107:59 - value will not change equals 30 it's
108:02 - going to give you an error because you
108:04 - assigned it with const but if you say
108:07 - instead of const you say let and then
108:09 - value will change
108:11 - equals 20. then you can come down here
108:13 - and say value will change equals 30 and
108:16 - it lets you do that so that's the
108:18 - difference between const and let again
108:20 - we don't use var because it's kind of a
108:22 - legacy
108:23 - keyword in javascript now we also talked
108:26 - about the different data types that you
108:28 - can use so i'll just use the const
108:29 - keyword for our variables here we'll say
108:32 - my string equals hello world so we can
108:36 - define a string value which is
108:38 - represented by these little
108:40 - quotations the single quotations
108:43 - and declare that as a variable now we
108:46 - can also again i just press the up arrow
108:48 - on my keyboard to get that last command
108:50 - that we typed and we can kind of circle
108:52 - through all of the commands that
108:54 - i have typed along the way
108:57 - but anyways we can declare a string so
109:00 - we'll say the second string
109:02 - this is basically just a different
109:04 - variable and we can use double quotes to
109:07 - do the same thing so these are
109:08 - functionally equivalent some style
109:10 - guides would recommend that you use
109:13 - single quotes others would recommend
109:14 - double quotes it doesn't really matter
109:16 - you just got to pick one
109:17 - so that's how you define a string and if
109:20 - we wanted to define a number so
109:23 - my number we just give it a number
109:25 - that's pretty easy we also have booleans
109:28 - which are going to either be true or
109:30 - they're going to be false so that's
109:32 - pretty easy there's only two answers
109:34 - that you can possibly have there and
109:35 - then finally we have arrays and objects
109:38 - let me clear some space here
109:40 - so we'll start with my array
109:42 - and we can fill that with pretty much
109:44 - anything so we can do some numbers right
109:46 - here so that'll be our first array and
109:48 - then maybe we can say our second array
109:50 - will be
109:52 - something like string one
109:54 - and string two
109:56 - and if you remember we can access the
109:58 - properties from these arrays by using
110:00 - bracket notation so we just look for the
110:02 - index
110:04 - this would be the zeroth index the first
110:06 - index the second and the third so we use
110:09 - that here to identify
110:11 - different objects or different
110:13 - values within that array and then
110:15 - finally we have objects which are going
110:18 - to be a little bit more complex and
110:19 - they're kind of the the cornerstone of
110:21 - javascript
110:23 - but we can say
110:24 - property1
110:26 - equals some value and then so that's a
110:28 - string value and we can access that by
110:31 - just saying using dot notation so we
110:34 - just say myobject dot and then property
110:37 - one and that's going to give us some
110:40 - value we can also with objects use
110:43 - bracket notation
110:44 - and if we pass in the string version of
110:47 - that property it will still give us some
110:50 - value so that's just a quick review of
110:53 - how javascript variables work and all
110:56 - the different data types now we're going
110:57 - to take these concepts and extend them a
111:00 - little bit further in talking about
111:02 - javascript operators so the first thing
111:04 - we got to basically resolve is what is
111:07 - an operator well an operator is
111:09 - something that exists in all coding
111:11 - languages not just javascript the one
111:13 - we're working in you'll see these
111:15 - operators in anything from javascript
111:18 - python
111:19 - you know java c c plus plus all of these
111:22 - different languages have this concept of
111:24 - operators and there's not a really great
111:27 - way to explain it without just jumping
111:29 - in but basically how i'd summarize it is
111:32 - an operator is something that allows you
111:34 - to
111:35 - either compare two values or more than
111:37 - two values
111:39 - you can modify values modify variables
111:42 - you know combine them together it just
111:44 - allows you some more flexibility in kind
111:47 - of to test the
111:49 - different equalities of different
111:51 - variables so i know that's a kind of a
111:53 - tough explanation but let's just jump in
111:55 - you'll see what i mean now there are
111:57 - four main types of operators we're
112:00 - looking at arithmetic assignment
112:02 - comparison and logical operators you'll
112:06 - see how these kind of fit in in just a
112:07 - second when we jump into them we'll
112:09 - start with some of the easiest ones
112:11 - which would be arithmetic operators so
112:13 - this would be plus
112:15 - minus or addition subtraction
112:17 - multiplication
112:19 - and division so you can see how this
112:21 - works it's pretty easy
112:23 - we can have a series of numbers and and
112:25 - remember we're using a javascript
112:28 - console which basically
112:30 - reads the value of a javascript
112:32 - expression and then prints it back to us
112:35 - once we start writing code in files
112:38 - later in the series we're not going to
112:39 - be able to
112:41 - like let's just say some random
112:44 - variable here equals 20
112:47 - and you can see that all we have to do
112:49 - is type in some random variable and
112:51 - press enter and it's going to evaluate
112:53 - what the
112:55 - variable actually has stored in it we
112:57 - don't actually have to use this
112:59 - console.log statement that we have been
113:02 - looking at in prior videos you know you
113:04 - definitely can and it's going to print
113:06 - 20 but you don't have to you can just
113:08 - type it the variable so this is going to
113:11 - be very useful when looking at these
113:12 - operators here so in any javascript
113:15 - console you can just take numbers like
113:17 - this so we'll say 20
113:19 - plus 50
113:21 - and that will equal 70 and it shows how
113:23 - it evaluates those and this plus sign in
113:26 - the middle is considered a javascript
113:29 - operator so you can already start to see
113:30 - what these
113:32 - operators actually represent you can
113:34 - also do something like 50
113:36 - minus 20 i'm trying to space it out here
113:39 - for us but
113:40 - we can say 50 minus 20 equals 30. and we
113:43 - can also do some division so 20 divided
113:46 - by 2 is 10
113:48 - as well as multiplication
113:50 - 2 times 2 is going to be equal to 4. so
113:54 - these are all what we call operators
113:56 - this plus operator the subtraction
113:59 - operator division and multiplication and
114:02 - these are the most basic arithmetic
114:04 - operators at this point you might be
114:06 - wondering well what are we doing here
114:08 - i've never seen this
114:09 - syntax written before
114:11 - well this is not actually valid
114:13 - javascript code
114:15 - it works here in the console but if you
114:17 - try to write it in a file it's not going
114:19 - to work out so well
114:20 - generally you're going to be doing these
114:23 - operations and assigning the value to an
114:26 - actual variable
114:27 - so let's say that we want to
114:29 - do a result variable
114:31 - and we want to say 20 plus 50
114:35 - divided by 2 or something like that and
114:38 - we save that and now we print out the
114:39 - result and it's going to be 45 because
114:41 - we did 20 plus 50
114:43 - is going to be 70 divided by 2 is 45 and
114:47 - then it stores it within this result
114:49 - variable so what we call the right side
114:52 - here and this is going back to the prior
114:54 - lesson we talked a little bit about the
114:56 - left side of the equal sign and the
114:58 - right side of the equal sign
115:00 - so this equal sign right here so we've
115:02 - got left and then right
115:04 - everything on the right side is what
115:06 - we're going to be calling a javascript
115:08 - expression and so we're using all these
115:11 - different values along with the
115:13 - operators to create some sort of
115:16 - expression that is going to be evaluated
115:18 - in full and then once it's evaluated
115:21 - it's going to take that single value
115:23 - that it
115:24 - came up with and assign it to the
115:25 - variable on the left side of that equal
115:28 - sign there are actually a couple more
115:30 - arithmetic operators as well so we can
115:33 - use something called a modulus operator
115:36 - so let's do a hundred and then a little
115:38 - percent sign and then we'll say 50 and
115:41 - that's going to equal zero and basically
115:44 - what this is doing is doing a division
115:46 - problem so 100 divided by 50 and then
115:49 - it's figuring out what is the remainder
115:51 - of that division problem in this case 50
115:54 - is a factor of 100 it goes into 100 two
115:57 - times with no remainders so we're going
116:00 - to get zero but what if we said a
116:02 - hundred
116:03 - modulus i don't know 77 well
116:07 - we're going to get 23 because 77 goes
116:11 - into 100 one time with a remainder of
116:14 - 23. so this may not seem very useful to
116:17 - you right now but i promise you there's
116:19 - going to be times when you're coding
116:20 - where this modulus operator will come in
116:23 - handy moving on we also have the
116:25 - exponent operator so if we wanted to say
116:28 - i don't know eight
116:30 - to the power of two so generally you
116:33 - would see it written like this
116:35 - well this is not actually what the
116:38 - exponent operator looks like we would
116:40 - have to put in 2 stars here
116:42 - and we'll say 8 to the power of 2 is
116:45 - going to equal 64. 8 times 8 is 64. and
116:48 - that's how we use the exponentiation
116:51 - operator so that's two little stars you
116:53 - can remember that where the
116:55 - multiplication is going to be
116:57 - 1 star so 8 times 2 is 16 and then if we
117:01 - do 8 double star 2 that's 8 to the power
117:04 - of 2. so that's the exponent operator
117:07 - and then finally there's a couple
117:09 - operators that are not going to kind of
117:11 - fit into this
117:13 - this schema that we've been looking at
117:15 - so far it's going to be a little bit
117:16 - confusing but i'll try to explain it
117:19 - best i can
117:20 - one of those is going to be the
117:22 - increment operator and then the next
117:23 - will be the decrement operator so let's
117:26 - say that we have a variable i'm going to
117:29 - intentionally mess this one up so let's
117:31 - say that we have a starting
117:33 - number and that will be equal to
117:36 - zero now notice what we used here we
117:39 - used the const
117:41 - keyword here so we cannot reassign this
117:44 - value
117:45 - so the operator that we're trying to use
117:47 - here is called the increment operator
117:50 - and the way that it works is you take a
117:51 - variable or some value and you put two
117:54 - plus signs at the end and when we press
117:57 - enter you're going to see that it's
117:58 - invalid because we have a const
118:01 - declaration or a value that cannot
118:03 - change now if we wanted to declare this
118:06 - with the let operator
118:09 - so we'll say start number this is a
118:11 - different
118:12 - uh actually let's just clear the whole
118:14 - screen so that we're we're very clear on
118:16 - what we're doing here
118:18 - so we'll say let
118:20 - starting
118:21 - number
118:22 - equal zero
118:24 - now this value can be reassigned so all
118:26 - we have to do is say starting number
118:28 - plus plus
118:29 - and when we press enter it's going to
118:32 - say zero but the actual value of the
118:35 - starting number variable is actually
118:37 - equal to 1 and we can see that by
118:39 - printing it out once more and if we do
118:42 - this increment operator again
118:45 - and then we print out starting number
118:47 - again we're going to get 2. so you can
118:49 - see how it's adding 1 to the variable
118:52 - and this is actually equivalent to
118:54 - saying
118:55 - starting number equals starting number
118:58 - plus 1. so you take the previous value
119:00 - and you add 1. so if we press enter now
119:03 - you're going to see that the starting
119:04 - number is equal to 3. now we can also do
119:07 - this with a decrement operator so we can
119:09 - say starting number
119:11 - actually let me clear the screen real
119:13 - quick we'll say starting number which is
119:15 - currently at three and put two little
119:17 - minus signs at the end and it's going to
119:20 - now equal two and we can do it again
119:24 - a couple minuses and now it's equal to
119:26 - one so you might say well why is this
119:29 - useful
119:30 - in many cases when you're going through
119:32 - loops which we're going to talk about in
119:34 - a future video this is going to come in
119:36 - handy so we just made it through the
119:38 - arithmetic operators but now we can move
119:41 - on to something called an assignment
119:43 - operator and believe it or not we've
119:45 - actually already covered this so when we
119:48 - write a variable
119:49 - my variable equals 20
119:52 - we're actually using an
119:54 - operator already so this equal sign that
119:57 - we've talked about so much is actually
119:59 - an assignment operator
120:02 - and believe it or not this is the only
120:04 - assignment operator that you're ever
120:05 - going to need although this is all
120:07 - you'll ever need um pretty much forever
120:10 - i want to show you some of the other
120:12 - assignment operators that we can use
120:14 - just so that you know that they're out
120:16 - there but once again these are not
120:18 - required and quite honestly i don't even
120:20 - use these a lot of programmers that have
120:22 - been coding for 20 30 years will never
120:25 - use these so they're just this is just
120:27 - for educational purposes
120:29 - honestly i would recommend just writing
120:32 - your code out long form i'm going to
120:34 - show you what i mean in just a second
120:35 - let's say that we had a value we'll
120:38 - assign a variable equal to 10. notice
120:41 - how we use this let keyword so we can
120:44 - reassign this variable and what if we
120:46 - wanted to add 5 to it well this would be
120:48 - pretty simple all we would have to do is
120:50 - say x equals and then we want to take
120:53 - the previous value of x which is
120:55 - currently equal to 10
120:58 - and we add using the addition operator
121:02 - 5. so that's the end of our expression
121:05 - press enter and now x is equal to 15.
121:09 - well there's actually a shorter way to
121:11 - write this and all we have to do is use
121:14 - a different assignment operator so the
121:16 - way that we would do this let's start
121:18 - over i'm going to refresh the page
121:22 - clear out all this nonsense up here and
121:25 - let's say that we have our variable
121:27 - again equal to 10 well we can also write
121:30 - it like this we'll say plus equal
121:33 - 5 and when i press enter this is
121:36 - actually going to reassign that variable
121:39 - of x from 10
121:41 - to 15. so add 5 to it
121:43 - and you can see that if we print out x
121:45 - it's now equal to 15. so you can see
121:48 - this little operator here the plus and
121:50 - then the equal sign this is an
121:52 - assignment operator
121:54 - which works the same as just our normal
121:56 - equal sign but instead it's going to
121:58 - take whatever's on the right side of it
122:01 - and it's going to add it to the variable
122:03 - on the left side we also have this for
122:06 - every different operation so we have the
122:09 - plus equals so let's let's just start
122:11 - with x we'll use this as an example here
122:14 - again
122:15 - so we'll say plus equals 5 this should
122:17 - turn it into 20.
122:19 - we also have
122:21 - x
122:22 - minus equal to 5 which should bring it
122:24 - back down to 15.
122:26 - we have
122:28 - x
122:29 - divided by equals and then we'll say 3
122:32 - so that should equal 5
122:34 - and then finally we have x multiply
122:37 - equals
122:39 - we'll say 2 and that's going to equal
122:41 - 10. so you can see how we have several
122:44 - different assignment operators that are
122:47 - just shortcuts for us to do something
122:49 - that we could already do
122:51 - writing it out long hand and what i want
122:53 - to say about this like i said
122:55 - you don't need these operators all you
122:58 - really need is this one right here and
123:00 - that's the equal sign
123:01 - and the reason being is
123:03 - sure you could save a few characters of
123:06 - code but it's just a lot more clear if
123:08 - we wanted to take
123:10 - our value so let's get x this is
123:12 - currently equal to 10.
123:14 - it's much more clear in my opinion if we
123:16 - just say x equals x plus five
123:20 - rather than saying x plus or equal to
123:23 - five and it just eliminates the need to
123:26 - memorize a bunch of stuff
123:28 - you really just don't need these and i
123:30 - would recommend just not worrying about
123:32 - them so just to do a little recap we
123:34 - have our arithmetic operators so let me
123:37 - just write this out in a comment
123:40 - so we have our arithmetic operators and
123:42 - this is going to be plus
123:44 - minus
123:46 - multiply
123:47 - divide
123:48 - modulus
123:50 - increment
123:51 - decrement and i believe that covers all
123:54 - of it
123:55 - i apologize if i missed one here but
123:57 - these are all arithmetic operators and
123:59 - they allow us to basically
124:01 - modify
124:02 - different variables
124:04 - we also have assignment operators so
124:07 - assignment
124:09 - operators
124:10 - and this is going to be the equal sign
124:13 - that we're very familiar with
124:15 - the plus equals minus equals
124:18 - multiply equals and divide equals these
124:22 - are all valid assignment operators but
124:24 - once again i just recommend learning
124:26 - this one and being done with it now the
124:28 - next sort of operators that we can talk
124:30 - about are comparison operators and in my
124:33 - opinion these are the hardest to
124:35 - understand because
124:36 - it introduces a concept that we haven't
124:39 - really looked at a lot yet let's go
124:41 - ahead and start with a basic example
124:44 - so let's assign a result variable and
124:48 - we'll assign it equal to the following
124:50 - javascript expression
124:52 - and when we
124:54 - print out this result variable it's
124:56 - going to equal true
124:57 - and if you can just kind of logically
124:59 - think through this
125:00 - not to be confused with logical
125:02 - operators
125:04 - but if we can just think through this 20
125:06 - is greater than 18 this is actually the
125:09 - greater than operator we're going to
125:10 - talk about all of these in a second
125:13 - but you can basically figure this out
125:15 - intuitively
125:16 - this is bigger than this so the result
125:19 - should be true right
125:21 - well let's bring in something a little
125:22 - bit more complicated so
125:24 - let's say something like
125:26 - i don't know
125:28 - constant result
125:29 - 2 is going to be equal to
125:32 - 20
125:34 - equal sign three times and then 20.
125:37 - so in this case it's a little bit harder
125:39 - to understand what we're doing here
125:41 - we've got an equal sign here and then we
125:43 - have three more over here and this has
125:46 - probably got you thinking like well
125:47 - what's going on here the answer to this
125:50 - expression is going to be true and that
125:52 - is because 20 does equal 20
125:55 - but we have to understand what's going
125:58 - on here on the right side of the equal
125:59 - sign before we can really think through
126:01 - this
126:02 - so to really understand this we have to
126:04 - get super super clear when we're talking
126:07 - about the left side of the equal sign in
126:10 - the right side of the equal sign we
126:12 - talked about this in the last lesson but
126:14 - we're going to go into this even deeper
126:15 - now
126:16 - so if we look at this second expression
126:19 - that we did
126:20 - this is the assignment operator and we
126:23 - have to be clear what we're looking at
126:25 - here so the left side is going to be the
126:27 - variable that we're assigning the right
126:30 - side over here too so this right side as
126:34 - i talked about a little bit earlier is
126:36 - going to evaluate to some value some
126:39 - single value and this is what we call a
126:42 - javascript expression and in this case
126:45 - we're using a special operator
126:48 - which is the triple equal sign and this
126:50 - triple equal sign behaves in a certain
126:52 - way that basically says well
126:55 - is the left side of it and the right
126:57 - side of it or maybe this a little bit
126:59 - confusing is 20 equal to 20 in both
127:03 - value and type so we talked about data
127:06 - types before and this is where that all
127:09 - comes into play
127:10 - so as we go through these make sure that
127:12 - you're being clear about what you're
127:14 - looking at so the left side versus the
127:16 - right side these equal signs over here
127:19 - are not doing the same thing as this
127:21 - equal sign right here think of this as
127:23 - kind of like the master equal sign that
127:26 - kind of determines
127:27 - everything about this whole javascript
127:29 - statement and then any other equal sign
127:32 - that you see are actually going to be
127:34 - operators that are doing some sort of
127:36 - comparison when we're talking about
127:38 - comparison operators in javascript there
127:41 - are four main comparison operators that
127:43 - have to do with equality so we have the
127:47 - triple equal sign
127:49 - we have the double equal sign
127:51 - we have the
127:52 - not equal sign with two right there and
127:56 - then we have the not equals with one so
127:58 - you can think of these two so this this
128:01 - one right here and this one right here
128:03 - these are kind of opposites while the
128:06 - double equals and the single exclamation
128:09 - and single equals are kind of
128:11 - functionally opposite now what do they
128:14 - actually do well to find out we need to
128:16 - start playing around with a few values
128:18 - so once again just like we could do 20
128:21 - plus 20 and get 40 we can also evaluate
128:25 - different expressions using these
128:27 - comparison operators so if we said 20
128:31 - double equals 20 that's going to
128:33 - evaluate to true we could also say 20
128:37 - triple equals 20 is going to evaluate to
128:40 - true so what's the difference between
128:42 - the two well the difference is it has to
128:45 - do with the data type that we're working
128:47 - with so if you remember from the last
128:49 - lesson
128:50 - 20 written like this is going to be very
128:53 - different from the 20 written like this
128:56 - in the first case we're looking at a
128:58 - number in the second case we're looking
129:00 - at a string and you can see that the
129:03 - expression evaluates to true but we're
129:05 - not quite there yet so let's say
129:08 - we want a number value and that'll be
129:10 - equal to that 20
129:12 - and then we also want a string
129:15 - value which is going to be equal to i
129:18 - don't know we'll say 50. but notice how
129:21 - we have these single quotations we could
129:23 - also have done
129:25 - double quotations here
129:27 - doesn't really matter it's just another
129:29 - way to write it and so now we have a
129:31 - number value and a string value and if
129:33 - we use the type of operator this is
129:35 - actually one that will
129:37 - we've we've already used a little bit
129:39 - but this is actually an operator itself
129:42 - and then we put the number value it's
129:43 - going to evaluate to number and we can
129:46 - also put in the string value and that
129:49 - will be a string so we know that this
129:51 - number variable in the string variable
129:54 - are of number and string types but we
129:57 - can try to compare them
129:59 - with each other using the double equals
130:02 - and triple equals equality so i kind of
130:04 - messed up here i meant to say that this
130:07 - string value should be equal to 20. so
130:09 - let me just go ahead and redo this once
130:12 - more
130:17 - so we'll say string value equals
130:20 - 20
130:22 - and then we'll say number value equals
130:25 - 20 and we're back to where we started
130:27 - here and now what we can do is we can
130:29 - say string value double equals
130:32 - number value and this is going to be
130:35 - equal and it's going to return a value
130:37 - of true which is a boolean
130:40 - and the reason being is because while
130:42 - these are not the same data type
130:45 - they are the same value so if we were to
130:48 - convert
130:50 - this string value into a number so we
130:52 - can use the built-in javascript number
130:54 - function
130:55 - and pass in the string value
130:57 - we're going to get 20 which is a valid
131:00 - javascript number and what's happening
131:03 - here
131:04 - when we compare the string value
131:06 - to the number value using the double
131:09 - equal sign what it's doing is it's first
131:12 - converting them to the same data type so
131:15 - it might convert the string value to a
131:17 - number and then compare it to the number
131:19 - value so it's comparing apples to apples
131:22 - and then it checks whether the actual
131:24 - values are going to be equal to each
131:26 - other in this case they're both equal to
131:28 - 20 so we have a resultant
131:31 - expression
131:33 - of true now if we tried to do this with
131:36 - triple equals so string value triple
131:39 - equals number value
131:41 - we're going to get false because this
131:43 - time if we do triple equals it's not
131:46 - going to convert the types to match each
131:49 - other so basically what it's saying is
131:52 - um well yeah the numbers the actual
131:55 - values are the same but the data types
131:57 - are not so therefore this expression
132:00 - evaluates to false so when we're looking
132:03 - at these different the double equals and
132:05 - the triple equals the double equals does
132:08 - not care about the data type well the
132:10 - triple equals does care about the data
132:12 - type
132:13 - and in almost all cases i would
132:15 - recommend using triple equals because
132:17 - we're just being a lot more explicit
132:19 - about what we're writing in our code
132:21 - that way well you can see that string
132:23 - value does
132:25 - resolve the true when we compare it with
132:27 - the double equal sign
132:29 - this is only because it is implicitly
132:31 - coercing the data type
132:34 - of these values now if we did it with
132:38 - the triple equal sign it's obviously
132:40 - false because they're different values
132:42 - but like i said we could do the number
132:45 - string value so this is explicitly not
132:49 - implicitly like javascript does with the
132:51 - double equals but we are explicitly
132:54 - coercing this string into a number and
132:58 - then we can triple equals compare it to
133:01 - this number value
133:02 - and it's going to equal true like i
133:04 - mentioned these comparison operators are
133:06 - probably the most difficult of all the
133:08 - operators to kind of grasp your head
133:10 - around
133:12 - nevertheless hopefully this makes sense
133:14 - when we're talking about double equals
133:16 - versus triple equals and then
133:18 - furthermore
133:19 - if we were to set a
133:22 - result variable equal to the value of
133:25 - string value triple
133:27 - or double equals
133:28 - number value which we know equals true
133:31 - right here then what's going to happen
133:34 - even though we have these equal signs on
133:36 - the right side remember right side
133:38 - versus left side we have these this
133:40 - expression this entire expression on the
133:43 - right side of this equal sign
133:45 - and therefore what javascript is doing
133:47 - is it's saying okay first let me look at
133:49 - this is this expression let me evaluate
133:52 - it and see what it results in
133:55 - in this case it results in true so now i
133:58 - have a true value on the right and now i
134:00 - want to assign this into the result
134:02 - variable so we press enter and we're
134:04 - going to get the value of true in that
134:07 - result variable now moving on to the
134:10 - not equals or this little exclamation
134:13 - point with the double equals or the
134:16 - exclamation with a single equal sign
134:19 - these are basically the opposite of what
134:21 - we were doing with the double
134:23 - and triple equal signs so let's try this
134:26 - once more we'll say
134:28 - we want a number value of 20
134:31 - and then we want a string value of also
134:35 - 20 but this is in string form
134:38 - so these are not going to be equal if we
134:41 - use the triple equal sign
134:43 - because that cares about the value and
134:46 - the type
134:47 - but it will be equal if we use the
134:49 - double equal sign now if we just plop in
134:52 - this exclamation part point it's going
134:54 - to reverse everything so if we do the
134:57 - exclamation point with a single equal
135:00 - sign and then we say string value that's
135:03 - basically saying um is the number value
135:07 - not equal to the string value and in
135:09 - this case it is equal to the string
135:12 - value because we're using only one equal
135:15 - sign
135:15 - so the answer is false i know that's a
135:17 - little bit tough to wrap your head
135:19 - around but if you think about it long
135:21 - enough it'll make sense
135:22 - now if we plop in this double equal sign
135:25 - and put in the string value
135:27 - this is going to evaluate to true
135:29 - because remember if we have the uh
135:32 - in in the case of let's say hold on one
135:35 - second
135:36 - triple equals this is going to carry
135:38 - care about the value and the type so
135:41 - it's the same deal with this
135:43 - exclamation point in the double equals
135:45 - so basically it's saying the number
135:46 - value is not equal to the string value
135:49 - because the types are not equal
135:51 - and it evaluates to true because no
135:54 - they're actually not equal to each other
135:56 - so just try to reverse it in your head
135:58 - don't think about this too much
136:01 - when the time comes you'll figure out
136:02 - how to use these but i just wanted to
136:05 - briefly go over them and show you that
136:07 - they're just the exact opposite of
136:09 - double and triple equals
136:10 - now with these equality operators it
136:13 - gets a little bit tricky when dealing
136:15 - with different data types so
136:17 - thus far we've only compared numbers and
136:20 - strings so if we said 20 triple equals
136:24 - 20 that equals true because it's
136:26 - a number
136:28 - in comparison to a number and they're of
136:30 - the same type we can also say 20 double
136:33 - equals 20 because you know that's kind
136:36 - of saying the same thing it doesn't care
136:38 - about the types the types are the same
136:40 - doesn't care but the values are the same
136:42 - so it equals true we can also compare
136:45 - strings so we can say hello world
136:48 - and that is going to be triple equals to
136:52 - hello world and that's going to equal
136:54 - true and we're also able to remove one
136:57 - of those equal signs and it's going to
136:59 - give us the same answer because
137:01 - the values are the same the types are
137:03 - the same it doesn't really matter there
137:05 - so we can use it with numbers and
137:07 - strings we can also do booleans so if we
137:10 - said true
137:11 - triple equals true that's going to give
137:13 - us true now i know that's a little bit
137:15 - of a
137:17 - tongue twister there but we're saying
137:19 - that the value of true which is a
137:21 - boolean
137:22 - is equal to another value of true so
137:25 - that expression evaluates to a truthy
137:29 - value and it prints true so i've said
137:32 - true about 50 times the last 30 seconds
137:35 - so let me stop doing that
137:37 - but basically we can do strings numbers
137:40 - and booleans with our equality operators
137:43 - now if we try to do arrays and objects
137:46 - the game changes a little bit so let's
137:49 - say that we have an object which is
137:52 - equal to
137:53 - we'll say
137:54 - property1 some value
137:57 - and then we'll we'll go down
138:00 - actually i needed to hold shift down
138:02 - while i did that so let me redo this
138:05 - real quick
138:06 - so starting over we have my object and
138:09 - this will be equal to
138:11 - property
138:13 - 1
138:14 - which is equal to some string value and
138:16 - then we have we'll say property 2
138:20 - is going to be equal to a number
138:22 - and there's our object we also will
138:24 - define my array
138:26 - and this will be equal to one two three
138:29 - four five
138:31 - just a bunch of numbers in there
138:33 - and all we have to say to prove this out
138:36 - is
138:37 - is my array
138:39 - equal to my
138:41 - array and the value here is going to be
138:43 - equal to true because you're comparing
138:45 - the same variable with itself but let's
138:48 - say that we created another array and
138:51 - this time it's going to equal the same
138:54 - exact thing so i'm going to put in the
138:56 - same exact numbers it's going to look
138:58 - exactly the same
138:59 - we'll press enter and now if we compare
139:01 - my array triple equals another array
139:05 - it's going to equal false
139:07 - so in the first case when we were
139:08 - comparing the same variable with itself
139:11 - it equals true which makes sense
139:14 - but why does this not equal
139:17 - each other why does my array not equal
139:19 - another array they look exactly the same
139:22 - and this is one of the quirky parts of
139:23 - javascript you'll hear that a lot but
139:26 - i'm not going to get into why these are
139:28 - not equal
139:29 - and actually how to compare two
139:31 - different arrays
139:33 - using javascript it's just too complex
139:35 - for what we're talking about but just
139:37 - know you cannot compare everything and
139:40 - the same goes for objects so if we said
139:42 - my object triple equals my object it's
139:45 - going to equal true because we're
139:46 - comparing the same exact object but if
139:49 - we say another object and we make that
139:52 - equal to the same exact one so property
139:55 - 1
139:56 - is going to be equal to some value
140:00 - and then property 2
140:02 - is going to be equal to 20. so this is
140:04 - the same exact object that we had
140:07 - up top but this time if we say my object
140:10 - triple equals another
140:12 - object
140:13 - we're going to get false and you might
140:15 - be wondering well maybe this is just
140:17 - because we're using triple equals well
140:19 - that's not the case even if we used my
140:22 - array
140:23 - double equals another array it's still
140:26 - going to be false and if we use my
140:28 - object double equals another object it
140:31 - will also be false so you cannot compare
140:34 - with these comparison operators arrays
140:37 - and objects you actually have to use a
140:39 - different library in a lot of cases and
140:42 - a lot of developers turn to a library
140:44 - called lodash
140:46 - so if we
140:47 - just type in lowdash into the browser
140:50 - you'll see that this is a utility
140:52 - library
140:53 - that basically provides you with a bunch
140:56 - of different methods that you can use to
140:59 - do a bunch of common javascript
141:01 - operations that would otherwise take you
141:04 - writing a good amount of code to do but
141:06 - again this is way too complex for what
141:08 - we're doing right now so we're going to
141:09 - go back and keep going with our
141:11 - discussion on operators so we've gotten
141:14 - through the bulk of these comparison
141:16 - operators the hardest ones are done now
141:18 - we just have to talk about numeric
141:20 - comparison operators and these will not
141:23 - come as a surprise we have the greater
141:25 - than less than greater or equal to and
141:28 - less than or equal to operators
141:31 - and you can see how these work
141:33 - 40 is greater than 20 that's true
141:36 - 20 is less than 40. that's also true 20
141:40 - is less than or equal to 20. that is
141:43 - true and 20 is greater than or equal to
141:46 - 20.
141:47 - so you can see how these
141:49 - all work they're pretty common and if
141:52 - you took any sort of math class you'll
141:53 - know exactly how these work now the
141:55 - final operator that falls into this
141:58 - comparison operator category is
142:00 - something called the ternary operator
142:03 - and that is spelled let's see if i can
142:05 - spell this ternary is what i'm saying
142:08 - here and this ternary operator is going
142:11 - to look like this so we'll say we want
142:14 - to assign a result variable and we want
142:17 - to assign this equal to the following
142:19 - expression so we'll say 20 triple equals
142:22 - 20.
142:24 - we'll add a little question mark and
142:26 - then we'll say
142:27 - values match
142:30 - and then we'll add a colon and we'll say
142:33 - values do not match and we'll press
142:36 - enter and you're going to see that the
142:38 - result is values match so this is a very
142:42 - confusing expression to look at at first
142:45 - glance but you will get used to this
142:47 - this is something that a lot of
142:48 - programmers really like some of them do
142:51 - not like it because they think it makes
142:53 - it more complicated
142:55 - we haven't talked about conditionals yet
142:58 - but i think you'll be able to understand
142:59 - this a little bit so i'm going to try to
143:02 - explain it real quick
143:03 - this this expression right up here
143:06 - is going to be functionally equivalent
143:08 - to the following expression so we'll say
143:11 - if
143:12 - 20
143:14 - triple equals 20
143:15 - then we'll say
143:18 - return
143:19 - or actually no we need to
143:21 - redo this real quick we need to first
143:23 - say
143:24 - or declare a variable so we'll say
143:26 - result variable
143:28 - and we don't need to assign a value to
143:30 - it yet we'll say if 20 triple equals 20
143:35 - then we want to assign the result
143:37 - variable
143:38 - equal to values match
143:42 - and if it does not equal so else that
143:45 - our result variable is going to be equal
143:48 - to values do not match
143:52 - if i can spell right
143:54 - okay so when we press enter it's going
143:56 - to say that it evaluated two values
143:59 - matched just like it showed up here when
144:02 - we printed the result if we type out
144:04 - result variable you can see that it has
144:06 - been assigned that value so i wanted to
144:09 - show you this even though we haven't
144:10 - gone through the if else statements yet
144:12 - the conditionals
144:14 - but i think it's fairly intuitive to
144:16 - understand we're saying if this
144:19 - expression evaluates to true then i want
144:21 - to assign the variable to what is after
144:24 - this question mark or the values match
144:27 - otherwise this else statement
144:30 - which is going to be substituted by the
144:33 - colon we want to assign it to values do
144:35 - not match so in other words this
144:37 - question mark is kind of like the if
144:40 - part and this colon is kind of like the
144:42 - else part and this uh everything left of
144:46 - the question mark is going to be the
144:48 - expression that we're actually
144:49 - evaluating
144:51 - and remember this is where it gets you
144:53 - know this is where it's kind of
144:54 - confusing when you're first starting out
144:56 - remember we have to keep the right side
144:58 - and the left side separate in our head
145:01 - so we're looking at this equal sign
145:04 - what is to the left side of the equal
145:05 - sign well that is the result variable
145:08 - now what is to the right side of the
145:10 - equal sign well that's everything here
145:13 - so this entire expression is to the
145:15 - right side and when javascript looks at
145:18 - this
145:19 - the first thing it does is it says
145:21 - what's on the right side and furthermore
145:24 - how do i evaluate that and then it uses
145:26 - the rules of this ternary operator to
145:29 - say okay first i want to look at 20
145:32 - triple equals 20. what does that resolve
145:34 - to well that resolves to true for
145:37 - reasons we discussed before
145:39 - and therefore i'm going to grab this
145:41 - value right here now if it would have
145:44 - resolved to false then it would say okay
145:46 - i don't want this i actually want
145:49 - this one over here and then once it's
145:51 - found that answer
145:53 - it's done all of this work on the right
145:55 - side it's come to a single answer which
145:58 - is the value values match now it's going
146:01 - to assign that to the result variable so
146:04 - you have to be very clear with yourself
146:06 - whether we're talking about the right
146:08 - side which could be a really long
146:10 - expression or the left side which is the
146:12 - target variable that we're assigning the
146:15 - end result of the right side too we are
146:17 - finally done with the comparison
146:19 - operators i know this took up most of
146:21 - the video but they are very important
146:23 - and you'll see
146:24 - why once you start writing a good amount
146:26 - of code you're going to use them a ton
146:28 - now the last type of operator is what we
146:30 - call a logical operator and there's only
146:33 - three of them we have this
146:35 - double and sign
146:37 - we have the double pipe sign
146:40 - and then we have the exclamation point
146:43 - now the exclamation point is kind of the
146:45 - same as what we talked about earlier
146:47 - with this exclamation equals but it's
146:50 - kind of going to function in a different
146:52 - way
146:52 - using it as a logical operator we'll
146:55 - start with the and sign and basically
146:57 - all this is doing is it's saying it's
146:59 - looking at two different expressions so
147:01 - 20
147:02 - triple equals 20 and then we put the and
147:05 - sign
147:06 - and now we can say 10
147:08 - triple equals 10 and what it's saying is
147:12 - okay on the left side we have this
147:14 - expression 20 equals 20 which evaluates
147:18 - to true
147:19 - and then in order for the entire
147:21 - expression so this whole line in order
147:24 - for this to be true both sides have to
147:26 - evaluate to true so in this case we get
147:29 - true but we could also say 12 and in
147:32 - this case it's going to be false because
147:34 - the left side does equal true but in
147:36 - order for the entire expression to be
147:38 - true both sides have to be true and you
147:41 - can see on the right side these are not
147:43 - equal so we get false now the or
147:46 - operator if we did the same example
147:50 - and we said 20 triple equals 20 and then
147:53 - we use these double pipes this is
147:54 - basically or
147:56 - and now we can say 10 triple equals 12
148:00 - and it's going to be equal to true
148:02 - because it's saying this entire
148:04 - expression is going to be equal to true
148:07 - if one of them is equal to true so in
148:11 - this case the right side is equal to
148:13 - true and that's all that we need for
148:15 - this to work now if we tried to write
148:17 - this expression where both sides are
148:20 - actually false
148:21 - i actually did that wrong there we only
148:23 - have one pipe in there somehow so we'll
148:26 - say 20 triple equals 18
148:29 - double pipes 10 triple equals 12. both
148:32 - of these are false so it's going to be
148:34 - false now the last one that we're
148:37 - talking about let me clear the screen is
148:39 - going to be this exclamation point what
148:41 - the exclamation point does is basically
148:44 - reverses everything so generally we're
148:46 - going to be talking about a boolean
148:48 - value here so let's say that we have an
148:50 - expression 20 triple equals 20 which
148:54 - evaluates to true obviously if we put
148:57 - some parentheses around this and then we
149:00 - it still equals true but then we put an
149:02 - exclamation at the beginning of that
149:04 - statement it's going to reverse it to
149:07 - false now it's important to note you
149:09 - cannot put this at the end that's not
149:11 - valid you have to put it at the
149:13 - beginning of the expression that you're
149:15 - trying to reverse
149:17 - so that's what this exclamation point
149:19 - does and it's a little bit different
149:21 - than if we were to put in the
149:23 - exclamation and then the double equals
149:27 - that does a slightly different thing as
149:28 - we talked about earlier in the video so
149:31 - just to show you a practical example of
149:33 - how you might use one of these
149:35 - this is a pretty common one that i've
149:37 - seen and i've used in my apps and we're
149:39 - not going to actually be writing the
149:41 - code that i would write in an app but
149:42 - you'll kind of get the point so we'll
149:44 - have a variable that says is user
149:47 - logged in
149:49 - and we'll set it equal to true so our
149:52 - user is going to be logged in in this
149:54 - case and then we'll say does user have
149:58 - permission
149:59 - and we'll say false on this one so
150:03 - it might be a pretty common thing to see
150:05 - if we were to
150:07 - uh check both of these values to see
150:09 - whether a user can perform a specific
150:12 - action in an app so what we might do is
150:14 - we'll say
150:16 - can user
150:19 - perform
150:20 - action
150:21 - and then we'll set that equal to is user
150:24 - logged in
150:25 - and
150:26 - does user have permissions
150:28 - and in this case if we were to evaluate
150:31 - this expression on the right side of
150:32 - this equal sign
150:34 - that is user logged in as true but this
150:36 - does have permissions is false so this
150:39 - entire expression resolves to false
150:42 - so in many cases in our apps we might
150:44 - say if can user perform
150:48 - action or something like that then we
150:50 - can allow them to perform the action so
150:52 - that's just a practical example of how
150:55 - we might use these operators in the real
150:57 - world in the final part of this video
151:00 - before we get to the actual challenges
151:02 - that i'm going to give you
151:03 - is going to be
151:04 - combining all of these operators and
151:07 - this is where this concept of an
151:09 - expression really comes to life so i'm
151:12 - going to put a pretty complex expression
151:15 - on the screen here and we're going to
151:16 - walk through how it's actually working
151:19 - so we'll say result is equal to
151:23 - exclamation point we're going to put a
151:25 - couple parentheses here
151:28 - say 40 divided by 20
151:30 - equals 2
151:32 - and
151:33 - then we'll say
151:35 - something like
151:36 - i don't know true
151:39 - and then we'll say on the right side
151:41 - try to make this clear we'll say or and
151:45 - then put another parenthesis
151:47 - yes triple equals to no
151:50 - and when we evaluate this expression
151:52 - we're going to see that it equals false
151:54 - and this is actually a totally valid
151:57 - javascript expression
151:59 - although it's very confusing to look at
152:01 - but if we take this step by step i think
152:04 - you'll understand how we can combine all
152:06 - these operators into a single expression
152:09 - now i will say before we get into this
152:11 - you generally are not going to be
152:13 - writing something this complex if you're
152:15 - writing something that is this confusing
152:17 - to read then you could probably break it
152:20 - out into several steps
152:22 - and it's not a sign of intelligence when
152:25 - you're trying to make it so complicated
152:27 - like this you want to be as simple as
152:29 - possible and in many cases
152:31 - you're going to write more lines of code
152:34 - in order to
152:35 - improve readability of your code so this
152:38 - code is not readable this is something
152:39 - that would take someone you know let's
152:41 - say that i wrote this code and you had
152:44 - to go review this code this is going to
152:46 - take you you know at least 20 seconds to
152:49 - figure out what it's doing
152:50 - and in most cases we want it so that you
152:53 - can see exactly what the code is doing
152:55 - as quickly as possible nevertheless we
152:57 - can see how this evaluates by breaking
153:00 - it out into different steps so i'm going
153:02 - to just store each step in a variable
153:05 - and then we'll kind of work our way down
153:07 - to understanding the entire expression
153:10 - so if you remember we're talking about
153:12 - the right side versus the left side
153:14 - left side is the variable right side is
153:16 - the entire expression so we'll say step
153:20 - one
153:21 - is going to be equal to 40 divided by
153:24 - 20. so we'll start right here
153:26 - so we'll save that into step one now the
153:29 - second step is we take this 40 divided
153:31 - by 20 and use the equality operator to
153:35 - set it equal to 2. so we'll say step 2
153:38 - is going to be equal to
153:40 - step 1
153:41 - triple equals 2
153:44 - okay so now we can check this at this
153:46 - point we're equal to true right now and
153:49 - the next step is going to be taking this
153:51 - entire expression that we just
153:54 - basically combined into step two
153:57 - and adding the and sign and putting it
154:00 - to true so we're going to say
154:03 - const step 3
154:05 - is going to be equal to step 2
154:08 - double and
154:10 - true
154:11 - and you can guess that since we already
154:13 - had it equal to true right here
154:15 - and we're doing another boolean value of
154:18 - true it's going to equal true so step 3
154:21 - is actually equal to true true right now
154:24 - and you can see that right there
154:26 - and now we want to combine this with
154:29 - we've we've already done this entire
154:31 - expression here so maybe we want to
154:34 - store
154:35 - this in a variable so we'll say step
154:38 - 4 is going to be
154:40 - equal to
154:43 - yes
154:44 - triple equals no which is obviously
154:47 - going to be equal to false
154:49 - so that's our step four so now let's
154:51 - take our step three right here in our
154:55 - step four and combine them
154:57 - using these double pipes so we'll say
155:00 - step five
155:01 - is equal to
155:03 - step
155:04 - three
155:05 - double pipes and then step
155:08 - four
155:09 - and that's going to be equal
155:10 - to let's see step five will be equal to
155:13 - true i'll try to scroll up here so we've
155:16 - got this one
155:18 - um this one and this entire expression
155:21 - evaluated so the last thing we need to
155:23 - do is just add the
155:26 - exclamation point at the beginning of
155:28 - everything so all we have to do here is
155:31 - say step
155:32 - 6 is going to be equal to not
155:36 - step
155:36 - 5
155:38 - and step six is going to be equal to
155:40 - false and if you see up here the total
155:43 - result of this entire expression is
155:46 - equal to false and all these steps that
155:48 - we did down here were just intermediary
155:51 - steps that we used to kind of break out
155:54 - this entire expression and figure out
155:56 - what the result variable was ultimately
155:59 - assigned so in summary an expression on
156:02 - the right side of the equal sign can be
156:04 - as complex as you want it to be
156:07 - and furthermore it can actually be
156:09 - something other than just what we've
156:11 - been working with
156:12 - we've been just looking at
156:15 - simple variables like numbers and
156:17 - strings and
156:18 - simple comparisons but it can be much
156:21 - more complex than that
156:23 - so you could even have something like
156:25 - a function evaluating to a specific
156:28 - variable so let me refresh the page and
156:31 - we're going to set result equal to a
156:33 - function and we haven't covered this yet
156:35 - but i just want to demonstrate
156:37 - what i'm talking about here so in this
156:39 - case we're going to return 20 from that
156:42 - function
156:43 - so what's happening here is again we
156:45 - have to be very conscious of the left
156:48 - side versus the right side so left side
156:51 - is going to be our result variable and
156:53 - right side is going to be the entire
156:55 - function
156:56 - so in this case we're going to set
156:59 - the right side equal to a function that
157:02 - returns a value of 20.
157:05 - now this is not going to automatically
157:07 - execute itself so we have to actually
157:10 - assign it using something called an
157:12 - immediately invoked function
157:15 - and once we do that we're going to
157:17 - actually be assigning that result
157:19 - variable on the left
157:20 - equal to whatever this function here
157:23 - returns when it is evaluated so you can
157:26 - see a result is equal to 20 and this
157:29 - kind of just demonstrates for us how the
157:31 - right side of this equal sign can be
157:33 - infinitely complex and that's why it's
157:35 - so important to understand
157:38 - that an expression should be solved in
157:40 - individual steps
157:42 - that's how the computer looks at it and
157:43 - that's how i would recommend you to look
157:45 - at it
157:46 - when you're trying to figure out what
157:48 - it's going to set that variable to
157:50 - like i've been saying throughout this
157:52 - series
157:53 - watching these videos alone is not going
157:55 - to do it for you you have to actually
157:57 - practice so let's jump into some of the
158:00 - challenges that i've put together for
158:01 - this video
158:02 - and i'll say that as we get better
158:05 - writing code and as we go through all of
158:07 - the different parts of javascript not
158:09 - just variables and operators but you
158:11 - know getting into loops and functions
158:13 - and conditionals and basically learning
158:15 - how to write code we're going to
158:17 - actually migrate ourselves over to a
158:19 - site called code wars
158:21 - so if you go over to
158:23 - codewars.com
158:27 - you're going to see this is actually a
158:29 - pretty popular site for
158:32 - doing different programming challenges
158:34 - and i'm going to actually start
158:36 - recommending challenges from this code
158:38 - wars site and we can basically work on
158:40 - them out of a profile and you know you
158:42 - can kind of go through these challenges
158:44 - on your own but for now we're not quite
158:46 - advanced enough to look at that so i'm
158:48 - going to pop up a few challenges on your
158:51 - screen and then i'm going to walk you
158:53 - through each of them and how we go about
158:55 - solving them if you want to get the most
158:57 - out of this i recommend trying them on
158:59 - your own first so pause the video for
159:01 - each of them and try to work them out in
159:03 - your browser
159:05 - or your dev tools console and then once
159:07 - you've figured them out i'll kind of go
159:09 - through the explanation
159:19 - all right so this is the first challenge
159:22 - and the question is why does this code
159:24 - not work
159:25 - and the answer is going to be because of
159:28 - the const declaration that we've made at
159:31 - the beginning of the code
159:33 - so if you remember when using const we
159:35 - cannot reassign the value so if we say
159:38 - const number variable equals 0 and then
159:42 - we try to reassign this using our
159:46 - increment operator it's going to give us
159:48 - an error but if we go ahead and change
159:50 - that to let instead of const so we'll
159:54 - say let number variable
159:56 - equals zero and then we can say number
159:59 - variable plus plus
160:00 - number variable plus plus and then do it
160:03 - one more time
160:05 - we're going to be able to do that and
160:06 - then in the end if we cancel that log
160:09 - number variable it's going to be equal
160:11 - to three
160:12 - so that is the solution to the first
160:14 - challenge challenge number two so this
160:16 - one is a little bit of a trick question
160:20 - these are not going to evaluate to the
160:22 - same value i think you could probably
160:24 - figure that out but the second part of
160:26 - this question is
160:28 - which one of these would you recommend
160:30 - and the answer to that i would not
160:32 - recommend either of these blocks of code
160:34 - so the first one is going to
160:36 - evaluate to false because we're using
160:39 - triple equals well the second one is
160:41 - going to to evaluate to true because
160:44 - we're using double equals but in this
160:46 - case the problem is not either block of
160:48 - code but
160:50 - the variables that we're declaring so
160:52 - this is how i would actually write this
160:54 - rather than what we have in both of
160:56 - those code blocks
160:58 - so we'll say first number equals 20
161:00 - we'll say the second number
161:03 - also equals 20 and instead of the string
161:06 - value let's just put a number in there
161:08 - that's the real solution right there and
161:10 - then from there we can define our result
161:12 - which will be equal to
161:14 - first number triple equals second number
161:18 - because we always want to favor triple
161:20 - equals be explicit
161:22 - when we can
161:23 - and then now we can print out the result
161:25 - which is going to be equal to true so
161:27 - that's how i'd solve that problem
161:29 - challenge number three now this one is a
161:31 - little bit trickier but i think you
161:33 - probably could have gotten it
161:35 - let's refresh this screen real quick
161:38 - now the question was what does the
161:41 - expression five resolve two and the
161:44 - answer to that is that expression five
161:46 - let me make sure i get this right here
161:49 - answer five is going to resolve to false
161:52 - and this is why it's going to do that so
161:54 - let's just walk through each of the
161:56 - lines and see what they resolve to so we
161:59 - have a hundred
162:01 - we'll save them in the variables so
162:03 - expression one
162:04 - is a hundred
162:06 - modulus
162:07 - fifty and if you remember
162:09 - hundred divided by fifty is 2 with no
162:12 - remainder so we should get 0 for this so
162:15 - expression 1 should be equal to 0 you'll
162:18 - see that here
162:19 - now expression
162:21 - 2
162:22 - is going to be equal to 100 divided by
162:24 - 50 which does equal two
162:26 - so that's going to be equal to two
162:29 - then expression three
162:32 - is going to be equal to expression one
162:35 - is less than expression two and in this
162:38 - case expression 1 was equal to 0 and
162:41 - expression 2 should be equal to 2. so
162:44 - this expression right here should
162:46 - evaluate to true so let's press enter on
162:50 - that and see if that's the case
162:52 - we'll say expression 3 that equals true
162:55 - as we would expect
162:57 - now expression 4
162:59 - is going to be equal to expression 3
163:03 - we'll use the and symbol and we'll say
163:06 - 300
163:07 - plus 5
163:10 - triple equals
163:12 - 305
163:13 - so this is a little bit trickier how we
163:15 - look at this using the order of
163:17 - operations is we first look at this one
163:20 - on the right
163:21 - so we'll say 300 plus 5 what does that
163:24 - equal
163:25 - that equals 305 and then so we replace
163:28 - this basically
163:30 - and say 305
163:32 - is triple equals to 305 which is going
163:35 - to be equal to true so then we kind of
163:37 - replace that with true and expression 3
163:40 - is true so they're both true and
163:42 - expression 4 is going to result in true
163:49 - and then finally we're just going to
163:50 - reverse that so expression
163:52 - 5 is going to be equal to
163:55 - exclamation or the reverse of expression
163:58 - 4 so it's going to flip this true to
164:01 - false and we're going to get false for
164:03 - the final answer
164:05 - and if you tried to solve
164:07 - the problem of getting this all into one
164:09 - expression i'm going to just copy this
164:11 - into the console and just show you how
164:13 - it works
164:15 - you can see that we get false just like
164:16 - we just looked at
164:18 - and this is how i would combine this
164:20 - into a single expression remember the
164:22 - order of operations matters here
164:24 - moving on to challenge number four this
164:26 - is actually a slight review of last time
164:29 - combined with the concepts that we
164:31 - learned in this video
164:33 - so we're looking at an object and an
164:36 - array so we'll say my object i'm just
164:38 - going to write this out so that we have
164:40 - something to work with
164:42 - and we'll say prop 1
164:43 - is equal to first value
164:46 - and then prop 2
164:50 - is going to be equal to 20. so there's
164:52 - your object and then your array so my
164:55 - array here is going to be equal to 40
164:58 - 50 and 2.
165:00 - now if you remember from last time the
165:02 - way that we access properties from
165:04 - objects and arrays is with dot notation
165:07 - and
165:08 - bracket notation respectively so if we
165:11 - wanted to say get this value of 20 from
165:13 - this object all we would do is say my
165:16 - object dot prop 2.
165:19 - you could also use the bracket notation
165:21 - with a string
165:23 - for prop 2 and that will give you 20.
165:25 - but i would always prefer using this dot
165:27 - notation so we'll just get it this way
165:30 - all right so if we wanted to get one of
165:32 - the values from this array say we wanted
165:34 - to get 50 we would have to use bracket
165:36 - notation and if you remember an array is
165:39 - zero indexed so this is index 0 this is
165:43 - index 1 and this is index 2. so if we
165:46 - wanted to get that 50 all we would say
165:48 - is my array bracket and then we want to
165:51 - pass in 1 because the index of 50 is 1
165:55 - and that will give us that value of 50.
165:58 - so knowing that this problem gets pretty
166:01 - easy so we said in our results array
166:04 - we are saying myobject dot prop 2
166:08 - triple equals and then my array
166:12 - 0
166:13 - divided by my array
166:16 - 2.
166:17 - so if you remember
166:19 - we'll store that in the result variable
166:20 - for now but you just have to basically
166:23 - break this down into different pieces so
166:25 - what is
166:26 - myobject.prop2 well that equals 20. now
166:29 - what is my array
166:31 - with the index of 0 well that is going
166:33 - to be equal to 40. and then what is my
166:36 - array with the index of 2
166:38 - that is going to be equal to
166:41 - 2
166:42 - if i can type it out here
166:44 - so we got 2. so basically what this
166:46 - expression is is it's saying
166:49 - 20
166:50 - triple equals
166:52 - 40 divided by 2.
166:54 - and if we look at that expression that's
166:56 - going to resolve to true because 40
166:58 - divided by 2 is 20 set equal to 20 is
167:02 - true so if you break it down into pieces
167:04 - it's not all that hard now challenge 5
167:06 - is a little bit of a tough one but we're
167:08 - going to use the same method that we did
167:10 - in challenge 4 to solve it so i'm going
167:13 - to actually just copy in the object in
167:16 - the array or basically just all the code
167:18 - here so we'll copy this in
167:21 - we'll resolve it and let's
167:24 - open this up and we need to print the
167:25 - result which is going to be true
167:27 - now we have to walk through each step of
167:30 - this one by one to really understand it
167:32 - so the first thing that we have to
167:34 - remember is how to access different
167:36 - properties so if we wanted to access the
167:39 - quantity of nested object 1 all we would
167:42 - have to do is my object dot nested
167:45 - object
167:47 - quantity and that's going to give us a
167:49 - value of 5 down here if we were to
167:51 - evaluate that expression now the only
167:53 - tricky part here is this line right here
167:57 - we're actually putting
167:58 - the array
168:00 - or we're assigning each of these nested
168:02 - objects
168:03 - as the values of this array
168:06 - so to access this nested object number
168:10 - two we could do one of two things we
168:13 - could say myobject dot nested object
168:17 - 2 and then we might say the price which
168:20 - is going to give us 150. now since we
168:22 - put this into our array here we can also
168:25 - access it access it like this
168:28 - so we can say my array and then we would
168:31 - say
168:32 - we want the nested object number two
168:34 - which is the
168:36 - index one so this is index zero this is
168:38 - index one
168:40 - so we're gonna grab index one and you
168:42 - can see it's really nice in the console
168:44 - you'll see exactly what that evaluates
168:46 - to
168:47 - and then from there we can use dot
168:48 - notation to get the different
168:51 - attributes from it so the price which is
168:54 - 150.
168:55 - so knowing this it's pretty easy to
168:57 - evaluate this expression so if we looked
168:59 - at my array 0
169:02 - dot price which is the first part of our
169:05 - little expression this is going to
169:07 - evaluate to 100.
169:10 - then we can say my array
169:14 - 0
169:15 - dot quantity which is going to be 5
169:18 - and then in the second part of this
169:21 - expression we have the second object in
169:24 - the array and we're just getting the
169:25 - price and the quantity so really what
169:27 - this result variable is saying is it's
169:30 - saying we want to look at a hundred
169:33 - times five
169:35 - and compare that we'll say that's
169:37 - greater than and then we'll say 150
169:42 - times 2
169:43 - and what this evaluates to is true
169:45 - because 100 times 5 is 500 which is
169:48 - greater than 150 times 2 which is going
169:51 - to be 300 so that's going to give you
169:54 - the result variable and you can see how
169:55 - if you just break it down into little
169:57 - steps you'll be able to figure out what
169:59 - the expression equals and you can
170:01 - actually
170:02 - access
170:04 - nested objects and array properties
170:07 - by mixing them together
170:14 - in today's video like i said we're
170:16 - talking about functions conditionals and
170:18 - loops and in the previous videos in
170:21 - lessons three and four we talked about
170:24 - javascript variables how do we declare
170:27 - and assign a variable and then also
170:30 - javascript expressions which includes
170:33 - all of the different operators whether
170:34 - those be arithmetic operators assignment
170:37 - operators
170:39 - logical operators etc that's what we're
170:42 - going to do in this video we're going to
170:43 - cover a lot of ground here
170:45 - and then we're going to supplement it
170:47 - with a ton of practice problems so i'm
170:49 - making a video
170:50 - where we're going to have 25 javascript
170:53 - challenges and i'm going to walk you
170:54 - through them and kind of explain how i'm
170:57 - going about solving them what i'm
170:59 - thinking about
171:00 - and we're going to use the topics that
171:02 - we covered within this video and the
171:04 - previous lessons to kind of solve these
171:08 - problems and we'll fill in a lot of the
171:10 - gaps that are not covered in the main
171:12 - content all right let's jump into
171:14 - conditionals in javascript so we've
171:16 - actually covered this already
171:19 - just briefly in previous lessons we
171:21 - haven't talked about how it works though
171:23 - so let me show you a basic conditional
171:25 - statement
171:26 - we're going to say if some string so
171:28 - we're talking about a string data type
171:31 - is triple equals to so we're comparing
171:33 - value and data type
171:36 - another string
171:37 - so these are obviously not going to be
171:39 - equal because although the
171:41 - data type is the same the value is not
171:45 - if that is the case we're going to
171:47 - console.log
171:48 - the strings
171:50 - are equal
171:52 - and then if it's not we're going to say
171:54 - else and we're going to console.log
171:57 - the strings are not equal
172:00 - all right so that is our basic
172:02 - conditional statement when i press enter
172:04 - you're going to see that the strings are
172:05 - not equal so it basically went into the
172:09 - second code path that's what we kind of
172:11 - call it is the the different paths that
172:13 - the code can take
172:14 - so we're saying if this is equal then i
172:17 - want to execute the code within
172:19 - these two brackets
172:21 - otherwise so else we're going to execute
172:24 - the code between these two brackets so
172:27 - there's a couple things i want to point
172:29 - out here just to connect the dots for
172:30 - the previous lesson that we talked about
172:33 - so let's just get the basic structure of
172:36 - an if then statement we have if
172:39 - and then else
172:41 - and this is basically what we're looking
172:42 - at and obviously there's indentation uh
172:46 - line breaks all that kind of stuff
172:47 - that's just formatting but this is the
172:49 - basic structure so in this parentheses
172:52 - we have a
172:54 - javascript expression
172:56 - and then we have some brackets that
172:58 - contains the code for the truthy uh code
173:02 - path so if that expression evaluates to
173:05 - true and then we have a brackets where
173:08 - we can put our code for the falsey path
173:11 - so if the expression is false and we've
173:14 - previously covered expressions in
173:16 - javascript
173:18 - in terms of variables so we might have
173:20 - said something like
173:22 - i don't know say 20 triple equals 20
173:26 - and
173:27 - 50 triple equals 50. so obviously both
173:30 - of these
173:32 - are
173:32 - going to evaluate to true and then you
173:34 - combine it with the and operator and the
173:37 - whole expression evaluates to true and
173:40 - then we assign that true value to
173:43 - the variable right here now that's all
173:45 - we've looked at
173:47 - in prior videos but you can actually
173:49 - take this expression which is right of
173:51 - the equal sign
173:52 - and you can drop it into
173:55 - this uh parentheses for the conditional
173:58 - statement so just a different way to use
174:01 - an expression you'll see it a lot and
174:02 - it's
174:03 - something that i think is worth pointing
174:05 - out i'm going to drop a couple of
174:07 - different ways that we can write
174:08 - conditionals on the screen so it's a lot
174:11 - of code we're going to walk through each
174:12 - of these
174:14 - so let's open this up so i've declared a
174:16 - couple of variables up top so we have a
174:19 - number two number variables 20 and 10
174:22 - and then a javascript expression which
174:24 - is basically saying is the first number
174:26 - greater than the second number which is
174:28 - going to result in true
174:30 - and then we've put these in some
174:32 - different conditionals so the most basic
174:35 - one that we can do
174:36 - is going to be a basic if statement so
174:39 - you don't even need to have an else
174:41 - statement
174:42 - at the end of this you can just use if
174:45 - and this is actually really useful you
174:47 - know you'll see as you start coding when
174:49 - this comes into play so we're saying if
174:51 - this javascript expression
174:53 - is equal to true
174:55 - that's what we mean by just putting it
174:57 - in there so
174:58 - usually you're you know kind of getting
175:00 - used to seeing like an equal sign put in
175:02 - an expression well if we're uh looking
175:05 - at a boolean all we have to do is drop
175:07 - it in the parentheses and it's going to
175:08 - going to evaluate
175:10 - to either true or false
175:12 - so since this does equal the true we
175:16 - would expect that this console.log
175:18 - statement will be reached and it'll
175:20 - print this expression is true and if you
175:23 - come down the first
175:24 - console log has been printed right here
175:27 - now moving on to the next one we have an
175:29 - if else statement i'm going to skip over
175:31 - this because we just covered it
175:33 - basically if js expression is true
175:36 - console.log this otherwise this
175:39 - and then finally we can
175:41 - include other conditions so not only can
175:44 - we do an if else statement we can also
175:47 - add some other
175:49 - code paths for our code to to go down
175:52 - so if this is equal to true
175:55 - we want to console.log the expression is
175:58 - true
175:59 - else if the first number is greater than
176:02 - zero so
176:04 - basically what we're saying here is let
176:06 - me sorry i closed that out there
176:09 - but if the js expression is false we're
176:12 - going to skip this first
176:14 - block of code and then we're going to go
176:16 - to the next condition so we know if we
176:19 - get to the next condition
176:21 - that first one is going to be false so
176:23 - we know js expression is false and then
176:25 - we're checking if the first number is
176:28 - greater than zero if that is the case
176:30 - then we're going to say the expression
176:32 - is false and the first number is greater
176:34 - than zero
176:35 - but if it is false so if the expression
176:38 - is false and the first number is
176:41 - less than or equal to zero we're going
176:44 - to fall into the else statement which is
176:47 - basically a catch-all for any other
176:49 - condition that we might have
176:51 - so the expression is false and first
176:53 - number zero or less so
176:57 - in this case obviously the variable is
176:59 - true so we uh go down this first code
177:02 - path and you see this expression is true
177:04 - down here
177:05 - or i guess this yeah the expression is
177:08 - true
177:08 - and then finally the last one that we
177:10 - have is just a formatting uh difference
177:14 - so we have an if statement but we've put
177:16 - it all on one line and this is just to
177:18 - demonstrate that we don't have to format
177:21 - it
177:22 - you know all pretty like we did up here
177:25 - although it helps for code readability
177:28 - and in other languages such as python
177:31 - the indentation and formatting actually
177:34 - does matter for running your code but in
177:35 - javascript it doesn't it's more of just
177:38 - a readability thing the last type of
177:41 - conditional that you might see is called
177:43 - a switch case statement and this is
177:46 - equivalent
177:48 - in many ways to the if else if else if
177:51 - else if else
177:53 - type conditional so if you have a lot of
177:56 - conditions that you're testing then a
177:58 - switch case statement might be
178:00 - appropriate for you so let me paste um
178:03 - some code on the screen again
178:06 - and we're going to execute this
178:08 - the output is the color is blue and
178:10 - we'll see exactly why in a second
178:13 - so first i put an array up here and i
178:16 - put the indexes or indices on top so the
178:20 - first one is an index of zero one two
178:22 - three four
178:24 - and then
178:25 - we have to get a random index so this is
178:28 - just uh some code that i wrote you don't
178:30 - have to understand this but
178:33 - we're basically going to get a random
178:35 - number between 0 and 4 and assign it to
178:37 - this random index variable so just think
178:40 - of this random index variable as
178:42 - carrying any value between 0 and 4 which
178:45 - happens to correspond with the indexes
178:48 - of the colors array
178:50 - then we're going to grab a random color
178:53 - from the array
178:54 - so
178:55 - remember we can get
178:58 - something from an array by passing in
179:00 - the index value using bracket notation
179:04 - and since random index here
179:06 - carries one of those values we can pass
179:09 - that in to the colors array so this the
179:12 - right side expression is going to
179:14 - evaluate to
179:16 - one of these colors but we don't know
179:18 - which one because we have a random index
179:20 - being generated
179:22 - then
179:23 - we come down here and we can write some
179:25 - basic conditionals so if the random
179:27 - color so again this is going to be
179:30 - one of the array values if it's orange
179:33 - we're going to say the color is orange
179:35 - and then you can kind of look down here
179:36 - and just see it's doing the same thing
179:38 - for all of the different conditions
179:40 - if we get to the last else statement
179:42 - there was no color found but that's
179:43 - never going to happen because we
179:46 - know that we have an index between 0 and
179:49 - 4.
179:49 - in this case the color turned out to be
179:51 - blue but it was a random color random
179:54 - choice we didn't know that as the
179:55 - developer before it happened
179:57 - now the reason that i bring this up is
180:00 - because this if else if statement
180:03 - where we have a lot of else ifs in here
180:06 - it gets very confusing and it's tough to
180:08 - read sometimes so this is why we might
180:11 - want something like a switch case
180:13 - statement and i'll show you the same
180:15 - code written in the switch case format
180:18 - oh and by the way if you're tired of
180:20 - getting
180:21 - into this browser console
180:23 - remember you just right click inspect
180:25 - element to get here
180:27 - i promise you we're going to get to an
180:28 - actual code editor soon but i just want
180:30 - to keep this
180:32 - focused on javascript we're not getting
180:33 - into setting up a local development
180:36 - environment yet
180:37 - so anyways here is that switch case
180:39 - statement
180:41 - same thing up here same colors array
180:43 - same random index same random color
180:46 - obviously since it's random it might not
180:48 - be blue which i think is the one we last
180:50 - saw so let's press enter
180:53 - it did turn out to be blue
180:55 - might have been a coincidence there but
180:57 - basically what we're doing is
180:59 - everything's the same up here but we
181:01 - come down to the switch statement and
181:03 - what we're saying is that we have a
181:05 - switch statement and we put the
181:06 - expression that we're evaluating in the
181:09 - parentheses so similar to the if then or
181:12 - uh or the if else statement
181:15 - we can put in that condition into the
181:18 - parentheses and then we come into these
181:20 - little
181:21 - brackets which is going to contain a
181:24 - bunch of cases so if the case is orange
181:28 - or in other words if the random color
181:30 - variable evaluates to the value of
181:33 - orange then we're going to hit this code
181:36 - right here
181:37 - and when we hit this code sorry about
181:39 - that when we hit this code the color is
181:41 - orange it's going to print that to the
181:44 - console and then this break statement is
181:46 - a special statement that we can write to
181:49 - basically say okay i found the correct
181:52 - case now stop executing the code
181:54 - entirely so if we were to get the random
181:57 - color orange it's going to print it to
181:59 - the console and then it's going to break
182:01 - and then basically all of the rest of
182:03 - this code down here will never be
182:06 - reached because we broke out of that
182:08 - statement so that's what it's doing it's
182:10 - basically just going
182:12 - down the the different cases it's saying
182:15 - okay what is random color equal does it
182:17 - equal orange no okay does it equal green
182:20 - no does it equal yellow no purple no and
182:23 - then we finally get to blue which it
182:25 - does equal and so it's going to console
182:28 - log that and then break out of the
182:31 - switch case statement now there's this
182:33 - last condition down here which is called
182:35 - default and this is basically the
182:38 - catch-all this is the else statement
182:41 - in our conditional
182:43 - and it's saying if random color does not
182:45 - evaluate to any of these cases
182:48 - let's go to the default value which
182:50 - we're just going to say no color is
182:52 - found
182:53 - so that is the basic switch case
182:55 - statement let me write this let me
182:57 - refresh
182:58 - and i'm going to write this in a little
183:00 - bit simpler format so we have switch
183:03 - and then here we have case
183:06 - are the different cases and then the
183:08 - break statements so this is obviously
183:10 - not valid but we have a switch
183:12 - then we put our condition in here which
183:15 - can be any javascript expression and
183:17 - then between the brackets we put all the
183:19 - different cases
183:21 - so
183:22 - switch state or switch case statements
183:24 - how often are you going to use them well
183:26 - in my
183:27 - experience i haven't used them a ton
183:30 - usually an if statement or an if else
183:32 - statement
183:33 - is going to be sufficient and oftentimes
183:36 - if you start using too many
183:38 - switch case statements there's that's
183:40 - kind of an indication that you may not
183:42 - be writing the most efficient code but
183:45 - that's to worry about later uh right now
183:47 - i just want you to kind of be aware of
183:49 - this understand how it works and uh just
183:52 - be familiar when you look it up and try
183:53 - to use it for the first time all right
183:55 - continuing on lesson five so
183:58 - conditionals functions and loops we're
184:01 - going to talk about loops right now and
184:04 - looping in javascript is a very
184:07 - effective concept and you will use it
184:10 - all the time so you really have to
184:12 - understand this
184:13 - um there's not a whole lot to it but i
184:16 - think the hardest thing is understanding
184:19 - why we need loops in the first place as
184:22 - we go through coding challenges
184:24 - a little bit later and you do more
184:26 - coding challenges just in general
184:28 - you're going to use loops a lot but it's
184:31 - generally just to solve some sort of
184:33 - challenge so you often will wonder to
184:35 - yourself well why do we actually need
184:38 - this in the real world and the reason
184:41 - at least in my opinion the reason we
184:43 - have loops
184:44 - or the most common use case of a loop
184:47 - is to iterate or loop over a set of
184:51 - resources
184:52 - so when we're talking about something
184:54 - called a resource
184:56 - that's basically saying that we have a
184:59 - bunch of
185:00 - pieces of data that are very similar to
185:03 - each other so often stored in a database
185:06 - and that might include something like
185:09 - if you have a blog it might be a blog
185:11 - post
185:13 - i'm trying to think of of another thing
185:14 - if you're running an app you have a
185:16 - bunch of users and there's a lot of
185:18 - different concepts that you can
185:20 - replicate but basically resources is a
185:24 - list of similar types of data and when
185:28 - we have those it's more efficient to
185:30 - actually loop over those than to
185:32 - manually print them out so again if we
185:35 - have an array
185:36 - something like this so i'll just say
185:38 - array
185:40 - and then we have 20 40
185:42 - 60 something like this we can go ahead
185:45 - and print to the console using this
185:47 - bracket notation so array of 0 and then
185:50 - array index 1 in array index 2.
185:54 - so that's how we can manually print
185:57 - each value of the array but when you
185:59 - have a thousand uh different blog posts
186:02 - that you want to render onto a web page
186:06 - it's not going to be efficient enough
186:08 - for you to just go into your code and
186:11 - start typing out each and every index
186:13 - not only that but once we add new blog
186:16 - posts to our
186:18 - database we're going to have to go in
186:20 - and change the code which is going to be
186:22 - extremely cumbersome it's not
186:24 - recommended you you just you won't get
186:27 - away with that in software engineering
186:29 - you have to do things more efficiently
186:30 - and that is when loops come in to
186:32 - demonstrate this let's take a look at uh
186:35 - maybe a sample
186:36 - array of blog posts
186:38 - so this is not something that you have
186:40 - seen before in my tutorial videos
186:43 - because we've been writing arrays on a
186:45 - single line
186:47 - but arrays just like you know
186:48 - conditionals and anything else in
186:50 - javascript can be indented and broken
186:52 - onto different lines this is all just a
186:55 - formatting
186:56 - thing so basically what we're doing here
186:59 - is we have three different objects so
187:01 - here's one object then we have another
187:04 - object and a third and you can see these
187:08 - objects are very similar looking in each
187:11 - of them we have a title property an
187:13 - author property
187:15 - publish date and content now obviously
187:18 - the values of these properties is going
187:20 - to be a little bit different for each of
187:23 - the objects but you can see that you
187:26 - know you can already start to infer that
187:28 - if we're looping over this array of blog
187:30 - posts we can use the fact that they have
187:33 - similar properties and let me just show
187:36 - you something really quickly that we
187:38 - could do using a loop now i'm not going
187:40 - to explain how the loop works yet but
187:42 - just to show you what i'm talking about
187:44 - so let me collapse this
187:46 - so we have some room here and i'm going
187:48 - to paste in this line of code
187:51 - this is what we call a loop and there
187:53 - are several ways to write a loop but
187:55 - again i'm not going to cover that quite
187:56 - yet
187:57 - but what you can see
187:59 - is that instead of hard coding the index
188:02 - the indices that we are passing in
188:05 - to our blog post array so in other words
188:08 - we want to retrieve a certain
188:11 - blog post
188:12 - object from that array we would need an
188:14 - index to do that instead of hard coding
188:17 - it we're using this variable called i so
188:20 - all i'm doing with the first four
188:22 - variables here is i'm grabbing a
188:25 - specific object from this array so i'm
188:28 - only grabbing one of them and then i'm
188:30 - taking all of the properties and
188:32 - grabbing the value of those properties
188:34 - and assigning it to each variable then
188:36 - i'm printing the variables below so when
188:39 - i press enter you're going to see it
188:41 - loops through all of our blog posts
188:44 - pretty much instantaneously or at least
188:45 - it seems like it to our human brain
188:48 - and it's going to loop through and it's
188:50 - going to print
188:51 - each of the values for each of the blog
188:53 - post so this is our first one
188:56 - what is javascript it's by me december
188:59 - 20th 2020 and some post content here and
189:02 - you can see that that is the first
189:04 - object in that array and then we go to
189:06 - how do arrays work and then how long
189:08 - does it take to learn coding so you can
189:11 - see that here and then finally here at
189:13 - the bottom so we have looped through
189:16 - every blog post in that array now let me
189:18 - talk about how these arrays actually
189:20 - work we're going to go into a little bit
189:23 - simpler examples so that you can really
189:25 - isolate these concepts in your head so
189:27 - let me write a basic loop in javascript
189:31 - so we're going to let i equal 0
189:33 - we're going to go until i is
189:36 - equal to 100 that's just an arbitrary
189:39 - number that we're coming up with you can
189:41 - obviously pass a variable in place of
189:43 - this like we did with that first example
189:46 - and then we're going to increment the
189:48 - value of i so remember this from the
189:50 - last
189:52 - lesson this is basically the same thing
189:54 - i'm going to come out here just for a
189:56 - second that's the same thing as saying i
189:58 - equals i plus one
190:01 - so basically saying if i is zero then
190:03 - we're going to increment it by one
190:05 - and then we're going to put some
190:08 - brackets here and press enter and so
190:10 - everything within these brackets here is
190:13 - going to be considered one iteration of
190:16 - this loop so the code within these
190:18 - brackets is going to be executed as many
190:21 - times as we do this loop
190:24 - in this case we've set the uh stop
190:26 - condition at 100. so let's walk through
190:30 - each of these and kind of connect the
190:32 - dots between the previous lessons that
190:34 - we've talked about in this series and i
190:36 - think you're going to really understand
190:37 - this so the first thing that we see here
190:40 - is we declare this for loop using the
190:42 - four keyword
190:44 - so this is similar to how we have an if
190:46 - statement so we say if and then we put
190:48 - parentheses in some brackets now we're
190:51 - just saying 4.
190:52 - now in the parentheses is going to be
190:54 - the loop conditions the first one is
190:57 - going to be the variable that we're
190:58 - looping over so let i equals zero and
191:01 - notice this semicolon to end that
191:03 - statement
191:05 - we're just starting i at a value of zero
191:09 - and the reason that we start it at a
191:10 - value of zero is because arrays start at
191:14 - an index of zero so it makes sense that
191:17 - if we're looping through our array
191:19 - we want to start at the first value in
191:21 - that array which has an index of 0. you
191:23 - might also ask why do we choose i what
191:26 - is i well i is just a variable we could
191:29 - put in anything that we want we could
191:31 - say my
191:33 - iterator or something like that and then
191:36 - all we have to do is replace each
191:38 - occurrence of that with our new variable
191:41 - so we can choose whatever variable name
191:44 - we want and if you see this entire
191:46 - expression this is very similar to or
191:49 - it's the exact same thing that we use to
191:51 - declare a variable in javascript now the
191:54 - one thing you'll notice is that we're
191:55 - using the let keyword and that is really
191:58 - important it's important because this
192:01 - iterator variable so i'm going to flip
192:03 - this back to i really quickly because
192:05 - this is kind of like an industry
192:07 - standard
192:08 - a lot of developers will just use this
192:11 - as a convention
192:12 - when looping so we're going to use the
192:15 - let keyword because i is going to be
192:18 - reassigned throughout the loop
192:21 - as you can see at the end we talked
192:23 - about this is going to add 1 to i after
192:26 - each iteration of the loop
192:28 - so that's basically the same thing as
192:30 - reassigning it and if you remember from
192:32 - the previous lesson when we try to use
192:34 - this increment operator on a variable
192:37 - that was declared with the const keyword
192:39 - it doesn't work it throws an error so
192:41 - that's why we need the let keyword in
192:43 - here and then finally we have this uh
192:46 - code in the middle which is probably the
192:48 - most difficult to understand this is the
192:51 - stop condition so basically what we're
192:53 - saying here is we want to go through
192:55 - this loop we want to do as many loops
192:58 - until i
193:00 - equals a value of 100 so each time we go
193:04 - through the loop it's going to increment
193:05 - by one so basically
193:08 - since we're starting at zero and we're
193:10 - saying less than we're going to go
193:12 - through a hundred iterations of this
193:14 - loop so all i'm going to do here is just
193:17 - demonstrate this i want to console.log
193:20 - the value of i and you're going to see
193:22 - when i press enter it's just going to go
193:25 - 0 to 99. so we press enter and we got 99
193:30 - here at the bottom and we started at
193:32 - zero so that's a hundred iterations
193:34 - remember starting at zero ending at 99
193:37 - and the significance of this is you know
193:40 - we printed console.log we just printed a
193:43 - number here but you can do all sorts of
193:45 - things
193:46 - like we
193:47 - saw with the blog post array you can
193:48 - loop through the blog post array and
193:51 - assign values and all that kind of stuff
193:53 - to finish this topic off let's just go
193:55 - through a super simple example
193:57 - so let's make an array
194:00 - we'll call an
194:01 - arr for array
194:03 - and then we're going to put in
194:06 - a couple different values here so
194:08 - i'm just going to put some random
194:10 - strings in here
194:12 - these are string values nothing of
194:14 - significance
194:16 - you know just put whatever we want
194:18 - and then let's put in some numbers
194:23 - and then a couple more strings
194:27 - and what we're going to do here is
194:29 - combine our
194:31 - knowledge of conditionals that we looked
194:33 - at in the previous video
194:35 - and
194:36 - looping to do an example so let's write
194:39 - our loop here so we'll say i equals 0
194:42 - and then we want to go until
194:45 - the array is complete
194:47 - so you'll use this quite often where
194:50 - you're going to look at the array you're
194:51 - looping over
194:52 - and you're going to grab the length of
194:55 - the array
194:56 - because that basically means we're going
194:59 - to loop until there's nothing left to
195:01 - loop through
195:02 - so that's a very common thing that
195:04 - you'll see within arrays and then of
195:07 - course our increment
195:09 - operator and then we'll jump into our
195:12 - loop and then in this case we want to
195:14 - set a conditional so we're going to say
195:17 - if the type of
195:20 - array
195:22 - and then we'll pass in i so remember
195:24 - this i is going to be incrementing
195:27 - each loop of the
195:29 - or each iteration of this loop so it
195:32 - starts at 0 and then it goes 1 2 3 4 5
195:35 - all the way up to the length of this
195:37 - array
195:38 - so when we pass in i we're basically
195:41 - saying okay i want to grab
195:43 - whatever's in this array at the index
195:46 - that i is current currently at so it'll
195:50 - start with 0 and we'll grab this first
195:52 - value then it'll go to 1 and we'll grab
195:54 - this value so on and so forth so we're
195:57 - seeing the type of
195:59 - the array value so basically this is
196:02 - equivalent
196:03 - for the first iteration of this array if
196:06 - we copy this down here
196:08 - the first iteration is basically going
196:10 - to be saying type of this value and of
196:14 - course this is going to return string as
196:16 - we've seen in prior videos while the
196:18 - numbers are going to return the type of
196:20 - number so let's bring this back to what
196:23 - we had previously so we grab the array
196:26 - variable and we pass in i
196:28 - and what we're going to say is if the
196:30 - type of the array and i actually didn't
196:33 - even put a condition in here if it
196:36 - equals number so that's what it will
196:38 - return if we have one of these numbers
196:41 - then i want to console.log
196:44 - the array at that index so basically
196:47 - what this loop is going to do is it's
196:50 - going to loop through that an entire
196:52 - array and it's going to look at the
196:54 - value see if it's a number and if it is
196:56 - it's going to print it to the console in
196:58 - other words we're going to skip all
196:59 - those gibberish strings that we put in
197:01 - there so let's press enter
197:03 - and you can see that we have only the
197:05 - numbers printing so this is just a super
197:08 - simple example that demonstrates how we
197:11 - can use an array to quickly iterate over
197:14 - or use a loop sorry to iterate over an
197:17 - array
197:18 - in this part of lesson five we're
197:20 - talking about functions and we finally
197:22 - get to do something
197:24 - fun with javascript in the previous
197:26 - videos previous lessons we've been
197:28 - talking about the
197:29 - rather mundane parts of javascript
197:31 - things that you can't really do much
197:33 - with
197:34 - but when we combine all of those
197:36 - concepts with functions we have
197:39 - limitless possibilities that we can
197:41 - have with javascript of course there's
197:43 - other things but like i said in this
197:46 - video series i'm taking you through the
197:48 - most important parts we're not going
197:50 - into the super fine details
197:52 - yet we're going to do that through
197:54 - practice problems and through real world
197:57 - practice we're going to fill in those
197:58 - gaps there so again we're talking about
198:00 - functions in this video and the first
198:03 - way that i want to start this out is by
198:05 - writing out a basic function
198:07 - so here is how we write a function in
198:10 - javascript
198:12 - we're going to say my function so if you
198:14 - notice this is kind of similar to what
198:16 - we've been doing with the if statements
198:19 - the conditionals and the loops we have
198:21 - some sort of keyword at the beginning
198:24 - then we have so well this is different
198:26 - we have a name of the function
198:28 - and then we have a parentheses so it's
198:30 - kind of similar syntax and then we have
198:32 - these uh brackets here where our code
198:35 - will go so with the function we have to
198:38 - give it a name here and in the
198:40 - parentheses we don't actually have to
198:42 - put anything in there we'll talk about
198:43 - that in just a second
198:45 - let's go ahead and print something
198:48 - hello world this is my first
198:52 - function
198:53 - we're going to end that statement with
198:54 - the semicolon and press enter
198:57 - and what you'll notice
198:58 - is that it doesn't do anything and this
199:00 - is different from what we've talked
199:02 - about with some of the previous concepts
199:05 - where everything happens at once so
199:08 - remember if we you know declare a
199:10 - variable
199:11 - set it equal to 20 something like that
199:14 - when we press enter the variable is
199:16 - declared and it's assigned at the same
199:19 - time
199:20 - and with functions what's happening is
199:22 - we break out those steps into two steps
199:26 - so up here what we've done is we've
199:28 - declared the function
199:30 - but what we haven't done is called this
199:32 - function or what we call invoked this
199:34 - function those are kind of synonymous
199:36 - terms
199:37 - in order to do that we just grab the
199:39 - name of the function
199:40 - which as you can see similar to this
199:42 - variable
199:44 - this my function uh word right here this
199:47 - is just a variable that the computer
199:49 - remembers so since the computer
199:52 - remembers it since we already declared
199:53 - it it's going to uh recognize it when we
199:57 - type it out so if we said type of
200:00 - my function it's going to give us
200:02 - function because it remembers what that
200:04 - is
200:04 - and to execute this so i'm kind of using
200:08 - all these different words to execute a
200:10 - function to call a function and to
200:12 - invoke a function for our purposes they
200:15 - are all the same thing
200:17 - so anyways
200:18 - we call the function using these two
200:21 - parentheses right here and a semicolon
200:23 - and when we press enter it's going to
200:26 - say hello world this is my first
200:28 - function because it ran the code within
200:30 - the function
200:31 - so just to review with functions you
200:34 - first have to declare it and then you
200:36 - have to call invoke or execute it all
200:39 - the same kind of terminology
200:41 - now there is one way that we can
200:44 - declare
200:45 - and call the function in the same step
200:49 - and although you're not going to use
200:50 - these all that often i do want to show
200:53 - you them just so that you have an
200:55 - awareness of them
200:56 - and what these are called is
200:58 - an immediately invoked function so let's
201:01 - say that we write
201:03 - another function so another function
201:05 - here
201:06 - and we enter down we say console.log
201:10 - hello
201:11 - now if we press enter this is going to
201:13 - just declare it but all we have to do is
201:16 - wrap this entire function in some
201:18 - parentheses
201:20 - and then put our parentheses that we use
201:23 - to call it at the end
201:26 - semicolon and you're going to get this
201:28 - function to declare and execute
201:31 - at the same time obviously the computer
201:34 - does it in different steps but for our
201:36 - purposes it's happening all at once
201:38 - this is what we call an immediately
201:40 - invoked function
201:42 - and like i said you're not going to use
201:44 - this a ton but just be aware of it you
201:46 - might see it pop up in some stack
201:48 - overflow answers or you might even use
201:50 - it at some point so we got a basic
201:52 - function but it's not useful like what
201:54 - are you going to do with the function
201:55 - that we just wrote
201:57 - obviously there's more to it and the
201:59 - thing that i want to introduce next is
202:01 - the concept of parameters and arguments
202:05 - and what i would say with these two
202:07 - terms is they're kind of
202:08 - two sides of the same coin and once you
202:11 - get into more advanced programming
202:13 - programmers are probably going to be
202:15 - using these parameters and arguments
202:18 - terms interchangeably because like i
202:21 - said they're two sides of the same coin
202:23 - but for our purposes
202:25 - we're going to distinguish between these
202:28 - so let's write a function we'll say my
202:29 - function again
202:31 - and it will enter down onto a new line
202:34 - now what i want to do to add into this
202:37 - parentheses
202:38 - is going to be something called a
202:40 - parameter now these parameters are
202:43 - basically saying uh to the computer hey
202:46 - computer um i'm going to pass in
202:50 - uh some sort of values into this
202:52 - function so be ready for them so
202:54 - basically what i'm going to say to this
202:56 - function
202:57 - is hey i'm going to pass in
202:59 - some number
203:00 - and then i'm going to pass in some
203:02 - string value now obviously with
203:04 - javascript it's a dynamically typed
203:06 - language so you don't have to say like
203:10 - some number or some string this is just
203:12 - an example maybe we could even say
203:14 - something like param 1 and param 2. so
203:18 - let's just go with that these are
203:20 - arbitrary names that we have and then
203:22 - what i want to do is console.log
203:25 - param1
203:27 - and then we'll go on to a new line up i
203:30 - accidentally messed that up let me go
203:32 - ahead and try this once more
203:35 - oh we really messed up here okay
203:38 - one second let's refresh the browser
203:42 - clear it out
203:44 - and then we need to enter to a new line
203:46 - and console.log param two
203:50 - all right so
203:51 - what we're doing here is we're taking
203:54 - the value of param one in the value of
203:57 - param2 which in this case within the
204:00 - function these are variables these are
204:02 - variables that we can retrieve the value
204:04 - from and print out
204:06 - so we're going to declare that function
204:09 - well as you can see it's a little bit
204:12 - later in the day here so i had to take a
204:13 - break but getting back to what we were
204:16 - talking about with these parameters so
204:18 - the question is
204:19 - what are they equal to what is param1
204:22 - and pram 2 equal to well the answer to
204:25 - that is we don't know yet and we don't
204:27 - know because we haven't assigned them as
204:29 - what we call arguments
204:31 - so we know that this is a declared
204:34 - function but we still have to call or
204:36 - invoke it
204:37 - and to do that you know how to do that
204:39 - you just put in the little parentheses
204:42 - at the end and you'd press enter now if
204:44 - we just press enter right now
204:46 - it's going to return undefined because
204:48 - we didn't pass in any parameters so when
204:52 - this code tries to execute and it tries
204:54 - to reference these parameter variables
204:57 - there's no value to grab because we
204:59 - never gave it a value
205:01 - so to answer the question of what they
205:03 - represent well they represent the
205:05 - arguments that you pass into the
205:06 - function
205:07 - so if we have this function we can pass
205:10 - in say a number and then
205:13 - some string of some sort
205:16 - and now these are what we call the
205:18 - arguments now like i said arguments and
205:21 - parameters are kind of the you know two
205:23 - sides of the same coin but in this case
205:26 - whatever we pass in the values we pass
205:29 - in are called the arguments and then the
205:32 - initial
205:33 - variables that we were declaring would
205:35 - be the parameters
205:37 - so 20 is going to correspond to param 1
205:41 - and then some string is going to
205:43 - correspond to param 2. so we should get
205:46 - 20 and then some string printed out when
205:49 - we run this function
205:50 - don't worry about this little undefined
205:52 - here that's just kind of part of the
205:53 - console we got our 20 and some string
205:56 - printed in order according to the
205:58 - function that we wrote so that's just a
206:00 - basic overview of arguments and
206:02 - parameters now the next thing that we're
206:05 - going to talk about is a brief
206:07 - introduction to scopes in javascript
206:10 - so
206:11 - when i say scope what i'm generally
206:13 - referring to is where these variables
206:17 - are available in the code so in other
206:20 - words
206:21 - we noticed that param1 and param2 were
206:24 - used within this function
206:26 - but if we were to just try to print
206:29 - param1 into the console it's not going
206:32 - to work and the reason is param1 is not
206:35 - available in the global scope it's only
206:38 - available in the function scope which is
206:41 - any code that's written between
206:44 - these two little brackets right here
206:46 - so
206:47 - we pass in these values but these are
206:49 - only available to the function it's not
206:51 - available to the rest of the code that
206:53 - you're writing in the file or the
206:55 - console that you know you're writing the
206:57 - code in so that's just a basic
206:59 - introduction to scopes there's a lot to
207:02 - this topic and as i said we're not
207:04 - trying to cover every last detail of
207:06 - javascript
207:08 - that's something that i think you'll
207:09 - have to fill in kind of outside of this
207:12 - tutorial and as we do practice problems
207:15 - and get into some more like real world
207:17 - examples you'll start to understand
207:19 - these scopes and i'll try to you know
207:21 - point them out
207:22 - as we go through like i said the you
207:25 - don't know javascript series is a great
207:27 - way to get a super deep dive into things
207:31 - topics like the topic of scopes but
207:33 - beware it's very complicated and there
207:36 - will be a lot of confusion if you kind
207:38 - of go down that route up until this time
207:40 - i've shown you how to write a function
207:42 - as we see on the screen right now but
207:45 - there is actually another way to write a
207:47 - function and let me show you how that's
207:50 - done so let's go ahead and clear this
207:53 - this
207:54 - console
207:56 - and we'll create a function just like we
207:59 - are used to creating so
208:01 - no parameters going in there just a
208:03 - basic function and we'll console.log
208:06 - something
208:08 - all right so that's our basic function
208:10 - now another way that we could write this
208:13 - is by assigning it to a variable so in
208:16 - this case the my function
208:18 - variable is already defined and it
208:20 - represents a function so we can't use
208:22 - that in our variable declaration
208:24 - but we can say something like another
208:27 - function
208:28 - and then we want to set that equal to
208:30 - a function
208:32 - so this is just a normal variable and
208:34 - all we have to do is say function
208:37 - define it and we'll
208:39 - console.log
208:41 - another thing
208:43 - all right
208:44 - so we set that equal to another function
208:46 - and if we say type of another function
208:50 - it's going to give us the type of
208:52 - function now i'm saying this word a lot
208:54 - so i gotta slow down here but
208:56 - anyways if we wanted to invoke this
208:59 - function or call it
209:00 - it works the same way that we were using
209:03 - it before so just like we call my
209:06 - function
209:07 - just like this and it prints out
209:09 - something
209:10 - we can invoke another function the same
209:12 - exact way even though it is a variable
209:15 - now there are a few little
209:18 - subtle differences between these two
209:21 - ways of writing functions and like i
209:24 - said it gets into some details that
209:26 - we're not quite ready for and i'm just
209:28 - going to leave out for now
209:29 - it's not and these details are not
209:31 - essential for you to write good code and
209:34 - get it up and running they're more like
209:36 - edge cases where your code doesn't work
209:39 - and you can't figure out why well it's
209:41 - because of this subtle nuance so i
209:43 - wouldn't worry about it too much
209:45 - all right so we've got these two
209:46 - different ways the main difference that
209:48 - i want you to recognize is the fact that
209:51 - this function right here does not have a
209:53 - name
209:54 - this is what we call an anonymous
209:56 - function and the reason we can use an
209:59 - anonymous function is because we are
210:00 - assigning it to a variable so we're
210:02 - giving it a name
210:04 - now up here we just do it all at once we
210:06 - just give it a name and we're done so if
210:09 - you tried to write a function
210:12 - without a name so something like this
210:17 - you're not going to get it to work
210:19 - because this is an anonymous function
210:21 - and you need to declare some sort of
210:23 - name and you see the syntax error it
210:25 - says function statement requires a name
210:27 - so that is not valid because it's
210:29 - anonymous you have to assign it to a
210:31 - variable now there is another way to
210:33 - write functions and this is a little bit
210:36 - tricky but i'd like to cover it because
210:39 - you're going to be using this next type
210:41 - of writing a function a ton so as of
210:45 - 2015 when the es6 standard came out so
210:48 - if you remember back from i think lesson
210:50 - 2 we talked about ecmascript standard
210:53 - and
210:54 - how
210:55 - there's a standards body that basically
210:56 - defines the spec for the javascript
210:59 - language well they upgraded that spec in
211:02 - 2015 with es6
211:04 - and they came out with something called
211:06 - a arrow function
211:08 - so that arrow function looks like this
211:11 - so we'll say
211:13 - arrow function
211:15 - equals and then we'll put some
211:16 - parentheses
211:18 - we'll put an arrow
211:20 - and then write it just like normal
211:23 - so we'll say i am
211:25 - an arrow function
211:28 - all right so we press enter and like our
211:31 - other functions we can call it or invoke
211:33 - it the same way so we just press arrow
211:36 - function with the two parentheses at the
211:38 - end and boom it executes
211:41 - so it's functionally equivalent in a way
211:45 - again there's some subtle nuances that
211:47 - we're not going to get into but this
211:49 - arrow function is mainly here so it
211:52 - improves readability
211:54 - and another benefit that it has is it
211:58 - really helps out with the scopes of your
212:02 - you know your code and specifically the
212:05 - this keyword which we'll get into much
212:07 - later but
212:09 - it does improve on that that's why they
212:10 - came out with it in the first place
212:13 - so this is a very um
212:15 - different way of writing a function but
212:17 - here's the basic syntax you just have
212:20 - this little parentheses which is
212:22 - basically here's where you put the
212:24 - parameters
212:25 - then you have this arrow that's why they
212:27 - call it an arrow function so an equal
212:29 - sign and then a right caret
212:31 - or greater than sign and then you have
212:33 - these two brackets just like you would
212:35 - any function
212:36 - once again you cannot just use this
212:38 - alone this is kind of similar to that
212:41 - anonymous function we looked at and you
212:43 - can't just define a function like this
212:45 - and you know this this won't work
212:48 - because it doesn't have a name so you
212:51 - don't have a name specified
212:53 - it didn't throw an error like the
212:55 - previous one but you have no way of
212:58 - referencing back to this you don't know
212:59 - how to actually call it because there's
213:01 - no name for it
213:02 - so you have to assign these anonymous
213:05 - functions and arrow functions to some
213:08 - sort of variable these arrow functions
213:11 - or anonymous functions can also be used
213:13 - in something called a callback but again
213:15 - that's going to be a little bit later
213:16 - down the road all right from now on i'm
213:18 - going to be focusing a lot on these
213:20 - arrow functions i'm going to be writing
213:22 - them for the most part now obviously if
213:25 - you're defining a function on its own
213:27 - you have to write it you know with the
213:29 - normal syntax so you have to write it
213:31 - with the name
213:32 - and then the parentheses just like this
213:35 - but for a lot of cases we can just
213:37 - assign it to a variable and i'd like to
213:39 - get you practicing the arrow functions
213:41 - because you're going to use them so much
213:43 - so the next thing that we're going to
213:44 - talk about here is the concept of return
213:47 - values in functions
213:49 - so far we haven't returned anything from
213:51 - our functions and if we're writing these
213:54 - so let's say my function
213:56 - save it to a variable
213:58 - and use the arrow function syntax
214:01 - and then we just console.log
214:03 - something all right very simple my
214:06 - function does not actually return
214:08 - anything so if we were to assign
214:12 - a result variable to it so we're going
214:14 - to say my function and then we're going
214:16 - to call it so remember this is just
214:18 - executing the function we defined above
214:21 - and then it's assigning the result to
214:23 - that function to the result variable so
214:26 - we press enter and this is just the
214:28 - console.log that was executed as part of
214:31 - the function but if we type out result
214:33 - it's going to give us undefined and the
214:35 - reason is because our function didn't
214:37 - return anything so if we want our
214:40 - function to produce a value we have to
214:43 - put a return statement in there all
214:45 - right so let's go ahead and do that
214:48 - return
214:49 - function that's what i'm going to name
214:51 - it here that's just the variable
214:53 - we'll use the arrow
214:54 - syntax enter down and this time we're
214:58 - going to return a value of 20 and we
215:00 - also could have returned you know some
215:03 - string or we also could have returned a
215:05 - variable so if we wanted to you know
215:07 - make a variable called a and that equals
215:10 - 20.
215:11 - oh i accidentally
215:13 - hit enter there but if we wanted to we
215:15 - could come down here and return a now
215:18 - it's going to bug out on me because i've
215:20 - already declared it like right here on
215:22 - accident so let's let's refresh the page
215:24 - real quick so that we can get back into
215:26 - this
215:27 - so
215:28 - um
215:29 - we'll just say my function this time
215:32 - we've got the fat arrow function
215:34 - enter down we'll define a variable set
215:37 - it to 20
215:38 - and then we will return
215:41 - that variable now we could also return
215:43 - like
215:44 - some sort of expression so what if we
215:47 - wanted to return a is greater than 30
215:49 - which it's not obviously so this would
215:52 - return false so let's just see you know
215:54 - how these different return types affect
215:57 - the function we're just going to return
215:59 - a which will be 20 and now we want to
216:01 - set that equal to a result variable so
216:04 - we'll get my function we're going to
216:06 - execute it and then assign the result to
216:09 - that result variable and now when we
216:11 - print out the result it's going to equal
216:13 - 20 because it took the result value of
216:15 - the function and assigned it to that
216:16 - variable
216:17 - like i said you can
216:19 - do expressions here so if we wanted to
216:21 - define another function
216:23 - we'll just put 2 at the end so it's
216:25 - unique and then we want to say
216:28 - a is less than
216:31 - 30 which it is this will return true i'm
216:34 - just going to put a comment there and
216:35 - therefore we would expect that this
216:37 - whole function is going to
216:39 - evaluate this last expression here and
216:42 - then return it so let's press enter and
216:45 - then we'll say result 2 is equal to my
216:49 - function 2
216:51 - and then if we get the value it's going
216:53 - to be true so you can see that there's a
216:56 - lot of different things that we can
216:57 - return from a function
216:59 - heck we could even return a function
217:01 - from a function but that's getting into
217:03 - way too much detail and it's not
217:05 - necessary for what we're trying to do so
217:07 - i'm going to skip that hopefully this
217:09 - gives you a brief overview of return
217:11 - values now the last thing that we have
217:14 - to talk about is what happens after the
217:16 - return value so let's say that we had
217:20 - i'm going to go ahead and clear the
217:21 - screen
217:22 - we'll say
217:24 - improper
217:26 - return function
217:29 - and then we're going to set that equal
217:30 - to
217:31 - our arrow function
217:33 - and we're going to return 20. or no
217:36 - let's go ahead and set a variable um i
217:39 - messed this up again it's kind of tough
217:41 - working in the console but we will
217:42 - eventually get to a code editor which is
217:44 - going to be a lot easier on us so let's
217:47 - say my function
217:49 - do this one more time
217:52 - and in this case
217:54 - let's define a variable so we'll say let
217:58 - my number
218:01 - equal 20
218:03 - and then we're going to return
218:06 - my number now let's enter down onto the
218:08 - next line and then we'll say my number
218:11 - equals 50. all right so we're going to
218:14 - press enter
218:15 - and it's going to give us an error it
218:17 - says unreachable code after the return
218:19 - statement you won't get this from all
218:22 - like this is just in the console you may
218:24 - not get this error anywhere else
218:26 - but this is giving us a hint that we've
218:28 - done something wrong here but it is
218:30 - still valid so basically what we're
218:33 - saying here
218:34 - is we're going to run the function
218:36 - it's going to return 20 and that's
218:38 - because we've returned the value before
218:41 - we reassigned it so this is valid code
218:44 - to write but it's useless because this
218:46 - last line right here is never going to
218:48 - be reached no matter what happens it's
218:51 - always going to return beforehand and
218:53 - you'll never return a value of 50. so
218:56 - just know that for the return values
218:57 - whatever happens after it doesn't matter
219:00 - and you pretty much will never have
219:02 - a return value before the end of your
219:04 - function
219:05 - so let's say that we have a global
219:07 - variable
219:09 - we'll just say something like
219:12 - mynumber equals 20. all right so we're
219:15 - going to set that in the global scope
219:17 - again scopes are going to get important
219:19 - here soon so just kind of keep that in
219:22 - the back of your head
219:23 - now we're going to define a function so
219:25 - we're going to say
219:27 - let's go ahead and use let because in
219:29 - case i screw up again and we have to
219:31 - reassign it so we're going to go ahead
219:33 - and say
219:35 - my function
219:38 - and we're going to set that equal to an
219:40 - arrow function
219:42 - now we're going to say if
219:44 - my number so
219:47 - this kind of seems like going against
219:49 - what i told you earlier about scopes so
219:52 - if there's a parameter that has a
219:54 - function scope it cannot be accessed at
219:57 - the global level but if you have a
219:59 - global variable
220:00 - you can access it from within a function
220:03 - so it goes one way but not the other
220:06 - when it when it comes to scopes so since
220:09 - this isn't a it's in technically a
220:11 - higher scope than the function has it
220:15 - the function can actually
220:16 - recognize what this variable is equal to
220:19 - so we're going to say if my number and
220:22 - then we're going to enter down
220:24 - and actually
220:26 - i need an expression here if my number
220:28 - is we'll say
220:30 - less than 15
220:33 - then i want to return
220:35 - returned
220:36 - the function
220:38 - early all right
220:40 - and then we're going to enter down and
220:42 - then we're going to return
220:44 - 40. these are all random numbers i'm
220:46 - making up here but it's just trying to
220:49 - show you that
220:50 - if you have a condition where you know
220:53 - if the number is less than 15 which it
220:55 - is not in this case
220:57 - you can actually return multiple things
221:00 - from the same function so
221:02 - my number is not less than 15 so we're
221:05 - going to actually skip this return
221:07 - function in return 40. but if we change
221:10 - that so let's say
221:12 - we change that to less than 50 and 20 is
221:16 - left less than 50. so we're going to
221:18 - actually return this function early and
221:20 - we'll never reach the second return
221:22 - statement so let's go ahead and enter
221:24 - that down and execute it and you'll see
221:27 - that we get that return to the function
221:29 - early
221:30 - output so you can have multiple return
221:33 - statements within a function just you
221:36 - can't have like two of them on the same
221:38 - line so if i were to recreate this
221:39 - function
221:41 - and maybe have
221:42 - you know like a return statement of 50
221:45 - and then return 40 right after it both
221:48 - of these code paths are going to be
221:49 - reached so this doesn't make any sense
221:52 - you only want to return one value so
221:54 - that's just an overview of return values
221:56 - we're going to get a lot more into this
221:58 - as we start writing some more realistic
222:00 - code just wanted to give you a brief
222:02 - overview
222:03 - the last thing that i want to do prior
222:05 - to getting into the 25 practice
222:08 - exercises or coding challenges
222:10 - i have for you i want to talk a little
222:12 - bit about objects and functions together
222:16 - so this is a little bit of a confusing
222:18 - topic but it's going to hopefully help
222:21 - you understand
222:22 - when we start talking about the built-in
222:24 - functions of javascript we're going to
222:26 - talk about that in a few minutes
222:28 - hopefully this will help you understand
222:29 - that better so let's go ahead and define
222:32 - a function we're going to call it my
222:33 - function again
222:35 - and then let's i don't know
222:38 - return a value of 20 from it so this is
222:41 - a very simple function
222:43 - we'll go ahead and execute it just to
222:44 - demonstrate it returns 20. now what if i
222:47 - wanted to set this equal to
222:50 - another variable i can actually do that
222:53 - even though it's already called my
222:54 - function
222:56 - so i can say
222:57 - um
222:58 - you know alias you know an alias is just
223:01 - another name for something so we'll say
223:03 - alias variable equals my function all
223:07 - right so if we press enter now alias
223:10 - variable is exactly equal to this
223:13 - function declaration that we made
223:15 - above so if we wanted to execute that as
223:19 - alias variable
223:21 - we're going to get the same answer of
223:23 - 20. so we can assign it to different
223:25 - variables which means that we can also
223:28 - assign it to
223:29 - object properties
223:31 - so let's go ahead and clear the well i
223:34 - guess we don't need to clear the screen
223:36 - let's go ahead and create an object so
223:37 - we'll say my object
223:40 - and then we'll set that equal to prop 1
223:42 - we'll just give it some random value
223:44 - just to have something there
223:46 - and then we'll say prop 2
223:48 - is going to be equal to my function
223:51 - all right so we have declared my object
223:54 - in prop 2 just a random
223:57 - property name that i've given it is
223:59 - going to be exactly equal to the
224:01 - function declaration just like we made
224:04 - this alias variable equal to the
224:06 - function declaration so what does this
224:08 - mean well we can actually execute the
224:11 - function by accessing a value of or by
224:15 - accessing a property of the object so if
224:18 - we
224:19 - come down here and let's just
224:22 - go ahead and say my object
224:24 - and then we need to get a property from
224:26 - the object so let's go ahead and get
224:28 - property2 and you'll see in the
224:30 - autocomplete down here it's pretty much
224:33 - telling us that that is equal to my
224:34 - function now if we wanted to execute it
224:37 - we can still put those little
224:38 - parentheses at the end and it's going to
224:41 - execute and give us the same answer so
224:44 - what we did here was we grabbed an
224:46 - object we grabbed a property off of that
224:48 - object using the dot notation and then
224:51 - once we had that we just threw those
224:53 - little parentheses at the end and
224:55 - executed it so i just wanted to get you
224:58 - familiar with this because what we're
225:00 - about to talk about is the built-in
225:02 - functions of javascript
225:04 - so javascript has a bunch of built-in
225:07 - functions and objects and all sorts of
225:10 - other stuff that we can use without
225:12 - having to write any code
225:14 - and if you go to there's there's several
225:16 - resources that you can use to see these
225:19 - i'm on tutorials point which has a good
225:21 - list of them but they're they're all
225:22 - over documented pretty much everywhere
225:25 - and within javascript there are
225:27 - different data types as we have talked
225:30 - about so you have strings you have
225:32 - booleans you have numbers and all of
225:34 - these different data types will actually
225:37 - have some built-in functions that you
225:39 - can call on top of them
225:41 - so if we go here and just look at some
225:44 - of the different methods so
225:46 - method is another
225:48 - i guess synonym for function we can call
225:51 - like it's not completely synonymous but
225:54 - if you have like an object and then you
225:56 - have
225:56 - a function attached to that object as we
225:59 - just showed that's called an object
226:02 - method so it's kind of the same thing
226:04 - and you can see that we have number
226:06 - methods we have boolean methods and we
226:09 - have string methods and we have array
226:11 - methods probably down here somewhere so
226:13 - array methods
226:15 - and depending on the variable type that
226:17 - you're working with you can use all of
226:19 - these to modify your your variables and
226:22 - just take a bunch of shortcuts with your
226:24 - code so let me go ahead and show you a
226:26 - few of these
226:28 - just to give you an idea of how they
226:30 - work because when we go into the coding
226:32 - challenges
226:34 - throughout this course we're going to be
226:35 - using these uh as much as we can now the
226:38 - first thing i'll say here is don't try
226:41 - to memorize these these are not to be
226:43 - memorized there is documentation for a
226:45 - reason so that you can google it and
226:47 - look it up when you need it you'll pick
226:49 - up on a few of them over time but for
226:51 - the most part i only have a few of these
226:54 - actually committed to memory
226:56 - all right so let's go ahead and try out
226:58 - a few string methods so let's say that
227:00 - we wanted to
227:02 - i don't know use this replace method we
227:05 - go back to the console let's clear
227:06 - everything out
227:09 - and let's define ourself a string so
227:11 - we'll say my string
227:13 - equals um zac
227:16 - and then we're going to use the replace
227:19 - um
227:20 - method so maybe i spelled my name wrong
227:22 - that's how you spell my name but what if
227:24 - there's a k at the end so i might want
227:26 - to replace it so i can say my string dot
227:29 - replace
227:30 - and then i'm going to replace the h
227:32 - with a k
227:34 - and when we press enter it's going to
227:37 - return zach with a k and now my string
227:41 - is actually going to still be equal to
227:43 - the original because it didn't replace
227:45 - the value it just returned a new value
227:48 - so it doesn't alter the original value
227:51 - here it just returns a new one so if we
227:53 - wanted to
227:54 - say
227:55 - new name we can just say
227:58 - my string dot replace
228:01 - h
228:03 - and k
228:04 - and then we set that uh equal to new
228:06 - name and now now my new name
228:09 - is going to be spelled differently now
228:11 - something that i want you to notice
228:13 - when we're looking at this is that we're
228:15 - using the same notation here that we
228:18 - used earlier when we accessed that
228:21 - property of the object and executed it
228:23 - as a function now this works a little
228:26 - bit differently than that but you can
228:27 - kind of think of it that way so maybe
228:29 - the my string is considered your object
228:32 - and then you use dot notation to get a
228:34 - property off of that object called
228:37 - replace which happens to be a function
228:40 - that takes two parameters
228:42 - and the first parameter it takes is the
228:44 - letter or string that you want to find
228:48 - within your string so i want to find the
228:51 - letter h
228:52 - within my string and then i want to
228:55 - replace it with the
228:57 - string k just a letter
229:00 - so my string will be replaced so
229:03 - these are the parameters and if you were
229:05 - to look at the replace method and you go
229:08 - ahead and click on it it gives you a
229:10 - description of this and we're going to
229:11 - learn how to you know read through
229:13 - documentation a little bit later but
229:16 - anyways you can go down here and just
229:18 - see what kind of
229:20 - parameters are required for this so
229:23 - here's the syntax and it gives you
229:26 - the parameters that you want to search
229:28 - for then the parameters you want to
229:30 - replace it with a couple examples some
229:32 - output all that stuff so that's how i've
229:35 - you know figured out how to use that
229:36 - again we're going to go through it quite
229:38 - a bit as we go through the coding
229:39 - challenges
229:41 - i'll just go through a couple more
229:42 - examples just to get you comfortable
229:44 - with what's going on here so let's go
229:46 - ahead and use my string
229:48 - once again
229:49 - and this time i want to use the string
229:52 - method called
229:53 - to uppercase and you can see what that
229:55 - does is it returns us the uppercase
229:58 - version of our variable now i know we
230:00 - got a lot of different versions going on
230:02 - here so let's go ahead and clear that
230:04 - out and reprint my string so that is
230:07 - what my string variable is equal to
230:09 - right now
230:10 - we can also chain the methods together
230:13 - so this is a little bit of an odd
230:15 - concept
230:16 - to someone starting out but you'll see
230:18 - how this actually works um once we get
230:21 - into the challenges so let me just do a
230:24 - simple example here we have my string
230:27 - equal to zach but let's go ahead and say
230:30 - uh we want a new string or something so
230:32 - let's call it um
230:35 - i don't know
230:36 - let's make a new one we'll just call it
230:38 - str for string and this one we're going
230:40 - to say hello world in there
230:43 - so that that's the string right there
230:44 - and what we want to do is first make it
230:47 - uppercase so we'll say to uppercase
230:50 - and we'll execute that you know method
230:53 - that sits on the string
230:54 - object
230:56 - and that's going to
230:57 - output us hello world as it's kind of
230:59 - telling us here
231:01 - now we can put another dot there and we
231:03 - can chain these methods on top of each
231:05 - other so i'm going to use another method
231:08 - called split
231:09 - and what split does is it's going to
231:12 - take whatever delimiter that you put
231:15 - as a as a parameter or not a parameter
231:18 - as an argument
231:20 - so if we put in a space right here it's
231:23 - going to look at the string and it's
231:25 - going to say there's one space in there
231:26 - so i want to split hello and world apart
231:30 - from each other
231:31 - and then what it does there as you can
231:33 - see down here is it actually changes the
231:35 - data type from a string to an array
231:38 - where the first uh part of that array is
231:41 - the first the hello and the second is
231:44 - world so let's set this equal to a
231:46 - variable we'll just say
231:48 - a result variable is what we want and
231:51 - our result variable is now an array and
231:54 - from there we can actually do array
231:56 - methods so let's go ahead and go back to
231:59 - the documentation here and let's scroll
232:02 - down to some of our array methods that
232:04 - we can use
232:05 - so what would be a good one to use so
232:08 - we'll use the index of method so this
232:10 - just basically gives us the index of a
232:13 - value so we'll say result
232:15 - dot index of and then i want to search
232:18 - for the word world
232:21 - and when we press enter it's going to
232:22 - return us 1 because this is an index of
232:26 - 0 and this is an index of 1 and that
232:29 - matches the string that we are searching
232:31 - for that we passed in as an argument to
232:34 - this function now of course you don't
232:36 - have to do this by chaining them
232:38 - together you can do it in separate steps
232:40 - so in the case of above we made this to
232:44 - uppercase and then we split it into an
232:47 - array in a single step but if it gets
232:50 - too complex for you and you just want to
232:52 - stick to the basics you can do this in
232:55 - different steps so we'll say
232:57 - first let's see what string is equal to
232:59 - it's still equal to hello world because
233:02 - we you know while we did this right here
233:05 - we didn't modify the original variable
233:07 - we just assigned it to a new one
233:09 - so string still represents hello world
233:13 - and in this case
233:15 - we'll say step one variable we want to
233:17 - take that and we want to make it
233:20 - uppercase alright so we'll make it
233:22 - uppercase and then maybe just type it
233:24 - out to make sure that it worked
233:26 - now we're going to do step two
233:30 - right here where we say
233:32 - step one so we want to grab whatever
233:34 - values in step one
233:36 - and then we want to split that based on
233:39 - a space
233:40 - alright so we set that to step two
233:43 - and then step two we can print out and
233:46 - we see that it's an array and then we
233:48 - come to
233:49 - say step three and we'll say step two
233:52 - whatever value is in that variable and
233:55 - then we'll say
233:56 - index of like we did above and then
233:59 - we'll search for the word world and
234:01 - we'll set that to step three and we get
234:04 - an index of one so you can see we can
234:06 - split these out into different steps but
234:09 - i just wanted you to know that as you
234:11 - see some different syntax when you're
234:12 - reading through code this is a valid way
234:15 - to use these built-in methods in
234:17 - javascript
234:18 - all right
234:19 - there's a lot here there's a lot going
234:22 - on in this video and
234:24 - i would never expect you to take it all
234:27 - in at once and process it and understand
234:29 - every last bit of it and that is why
234:31 - we're going to use
234:33 - a bunch of practice exercises or coding
234:36 - challenges
234:37 - to brush up on these skills and really
234:39 - cement some of the concepts
234:41 - we've talked about variables we've
234:43 - talked about operators we've talked
234:45 - about conditionals so if else if else or
234:49 - else if doing a tongue twister there
234:51 - we've talked about loops and we've
234:53 - talked about functions so there's a lot
234:55 - going on here and to combine it all
234:58 - together and actually write code
235:01 - i think it's useful to go through some
235:02 - exercises
235:08 - in this video we're going to go through
235:10 - 25 maybe a few more we'll see how it
235:13 - goes but we're going to go through some
235:15 - coding challenges and these are going to
235:16 - be at the very beginner level so like
235:20 - very beginner level of coding and what i
235:22 - want to do with this is walk you through
235:24 - my own thought process
235:26 - and help you understand how i'm thinking
235:28 - about this and how you should use the
235:31 - previous lessons that we have gone
235:33 - through so lesson uh three and four
235:36 - where we talk about the basics of
235:37 - javascript i want to apply those to
235:40 - actual coding challenges like i've said
235:43 - throughout this series i'm not taking
235:45 - you extremely deep into the javascript
235:48 - programming language
235:50 - there are other people who have done
235:51 - that
235:52 - and
235:53 - i think at this point when you're just
235:55 - trying to get off the ground
235:57 - digging into complex topics like you
236:00 - know hoisting and
236:02 - advanced scopes and stuff like that it's
236:04 - not necessary for when you're just
236:06 - starting and you can fill in the blanks
236:08 - as you go later on and partially why i'm
236:11 - making this video with these challenges
236:13 - is to help you do that so if i haven't
236:16 - talked about it in the previous lessons
236:18 - hopefully we'll kind of fill in the
236:19 - blanks here with these challenges and to
236:21 - do so we're going to do this on a site
236:23 - called code wars
236:25 - and if you go here
236:28 - pull up the screen
236:29 - this is going to be the collection that
236:32 - i've put together so there's 25
236:34 - exercises here
236:35 - that i put into a collection we'll see
236:37 - how it goes i might add a few more um if
236:40 - we blow through these but basically just
236:43 - go to hit the link in the description
236:46 - to find this
236:48 - uh series of questions and then get to
236:51 - this page right here create a profile go
236:54 - ahead and follow me too
236:56 - let's see what my
236:57 - profile is
236:58 - zachgall just look me up follow me i'll
237:01 - follow you back so that we can do this
237:03 - together
237:04 - and then once you get to the collection
237:07 - again link in the description you'll go
237:09 - to this uh top left corner and click
237:12 - train now
237:13 - and when we click this it's gonna drop
237:15 - us in to each of the problems uh that i
237:19 - have basically chosen for this video
237:22 - and i just want to give you a quick tour
237:24 - of code wars if you've never been on
237:25 - here before
237:27 - i actually just started using it for
237:29 - this purpose just to go through some
237:31 - practice exercises
237:33 - but basically on the left side here we
237:35 - have the instructions so it's going to
237:37 - tell us the instructions this code does
237:39 - not execute properly figure out why
237:42 - basically fix it
237:44 - you can see the output here this is when
237:46 - we actually run our test so if we run
237:49 - our test obviously it's going to fail
237:52 - and this is where we see the output and
237:54 - then over here is where we write our
237:56 - solution so we can write valid
237:57 - javascript code over in this
238:00 - terminal over here and then finally at
238:02 - the bottom this is the the
238:05 - sample test that we can look at so
238:07 - um obviously this is a little bit more
238:09 - advanced than we're um probably
238:12 - accustomed to at this point if you're
238:13 - watching this video
238:15 - but this is going to basically be a
238:17 - bunch of code that actually tests the
238:20 - code that you write so it takes the
238:22 - inputs that
238:24 - or it takes a set of inputs it puts
238:26 - those inputs through the code that
238:28 - you've written and then it
238:30 - gets the outputs and checks to see
238:32 - whether
238:33 - that matches the expected output so
238:36 - that's just a brief tour
238:38 - just a few other things you'll notice
238:39 - that we're writing in the javascript
238:41 - language
238:42 - that's what this video is about uh node
238:45 - is going to be the runtime so node.js is
238:48 - kind of the back end version of
238:50 - javascript but you know just like we've
238:53 - been working on in this series we can
238:55 - you know this is the browser dev tools
238:57 - console
238:58 - and this would be you know the same code
239:01 - that we're writing here so
239:03 - nothing new here and then finally this
239:05 - vim versus emacs thing if you click
239:08 - either of these it's going to actually
239:09 - drop you or it it's going to create this
239:12 - editor right here
239:13 - into like say a vim editor i have a
239:16 - video on this if you want to check out
239:18 - the vim
239:19 - code editor or text editor but don't
239:22 - click this for now that's a whole
239:24 - different uh ball game that we would get
239:26 - into if we started using those so keep
239:29 - those unchecked
239:30 - all right so from this point we're gonna
239:33 - go through the
239:34 - the exercises i'm gonna walk you through
239:36 - how i'm thinking about them the first
239:38 - one is rather simple if you've been
239:40 - following along with this roadmap series
239:43 - you'll know exactly what we need to do
239:44 - here it's saying this doesn't execute
239:46 - how do we fix it well right now if we
239:49 - you know ran it and did the output we
239:51 - ran it earlier it says it expected
239:54 - undefined to equal 1. so basically
239:57 - that's saying that
239:59 - we haven't returned anything from this
240:00 - function and therefore we just need to
240:02 - add a return statement right here
240:05 - and then we can test it and it should
240:07 - pass
240:08 - so we pass it go ahead and click attempt
240:11 - at the bottom right corner it passed all
240:13 - of our tests so we'll submit it
240:20 - all right once you submit a solution and
240:22 - you did it correctly it's going to show
240:24 - you other people's solutions to the same
240:26 - problem and this can be useful but also
240:29 - detrimental so listen up here
240:32 - the way that this can be useful is by
240:34 - scrolling down and you know just seeing
240:36 - the possibilities because you can
240:38 - solve every one of these problems in
240:41 - many different ways and so sometimes
240:43 - it's fun to see how other people have
240:45 - solved them and it also can open your
240:47 - eyes to different types of thinking that
240:50 - you you know wouldn't have thought about
240:52 - so
240:52 - it is good in that way it's not good
240:56 - because sometimes
240:58 - people will solve these in very clever
241:01 - ways and when i say clever that does not
241:04 - mean the best way now i'm not a
241:06 - competitive programmer
241:08 - i don't claim to be i don't really have
241:10 - any plans on becoming one
241:12 - but when you get into the world of
241:14 - competitive programming it's all about
241:16 - optimizing your solution writing the
241:18 - least amount of code or the fastest code
241:20 - um that kind of thing
241:22 - and i'm not that i just want to write
241:25 - some code that helps you understand the
241:27 - solution and help you read the code in
241:30 - the simplest way possible and some of
241:32 - these solutions down here for example
241:35 - this one right here this is unnecessary
241:38 - um there has you know nobody said that
241:40 - you have to check and validate all of
241:43 - the argument inputs so in this case a
241:47 - and b are the inputs to our function
241:51 - and what this person has done is
241:52 - basically checked to make sure that you
241:55 - know the
241:56 - the inputs are not some you know invalid
241:59 - input it makes sure that they're a
242:01 - number and this is totally unnecessary
242:04 - for this solution it never told us that
242:06 - we have to check that
242:07 - and this is just overly complicated in
242:10 - my opinion you'll see that there's
242:13 - a lot of votes for the clever and in
242:15 - many cases when you see a lot of votes
242:17 - for the clever solution it's probably
242:19 - not geared towards the beginner it's
242:21 - probably not what we want to focus on
242:23 - right now at least
242:25 - now i will point out one that's
242:27 - a little bit useful for us and that's
242:31 - down here so this would be our solution
242:33 - that's what we came up with we just
242:35 - added a return statement and called it a
242:37 - day
242:38 - now there's another way to do this that
242:40 - is actually it's it's very clever but
242:42 - it's also something that we talked about
242:44 - in a previous lesson so that i think as
242:47 - the previous video we actually might
242:49 - have mentioned this at one point but
242:51 - basically if you have an arrow function
242:54 - which is what
242:56 - we don't have an arrow function in the
242:58 - original solution we just have this you
243:00 - know standard function a named function
243:03 - but we could set
243:05 - this function equal to a variable called
243:07 - multiply and then we set it equal to
243:10 - an arrow function and with an arrow
243:12 - function
243:13 - if
243:15 - you put it all on one line you don't
243:17 - actually have to put a return statement
243:19 - in there so this is a nice
243:22 - nice thing to look at because it gives
243:24 - you kind of opens up your world to
243:25 - understanding oh i can write it like
243:27 - this as well
243:29 - all right so enough on this we're not
243:31 - going to spend this much time on every
243:33 - challenge but i wanted to walk through
243:35 - uh how you think about these solutions
243:37 - here
243:38 - all right so if you were if you clicked
243:40 - that button so let me actually go back
243:43 - to make sure that we're clear on this
243:45 - we'll go to collections go to the lesson
243:47 - five practice challenges
243:50 - and if you just click on one of these
243:51 - challenges it's going to take you to
243:53 - that challenge but when you click next
243:55 - it's not going to keep you within the
243:56 - collection so make sure that you've
243:58 - clicked this train now button so that
244:01 - when you solve the problem and click
244:03 - next it takes you to the next one
244:06 - in the
244:08 - collection so i guess we got to solve
244:09 - this one again real quick so we'll
244:12 - attempt it with that solution we passed
244:14 - it let's submit it
244:16 - all right and now we can pre press next
244:19 - uh next kata or kata i don't actually
244:22 - know how to say that i'm sure there's a
244:24 - reference to that that i'm not getting
244:26 - be sure to leave that in the comments if
244:28 - you do know what it means anyways this
244:31 - is the next
244:32 - problem that we have so let's go ahead
244:34 - and actually is this yeah
244:37 - this is it so let's train again i guess
244:40 - i've already opened this at one point
244:42 - um yeah when i was putting the
244:44 - collection together so
244:45 - the function is not returning the
244:47 - correct values can you figure out why so
244:50 - this is going to actually get us into
244:52 - the switch case statement that we talked
244:54 - about um just in the previous couple
244:57 - videos
244:58 - and if you remember with the switch case
245:00 - statement this is basically like saying
245:02 - if and then else if and then a bunch of
245:05 - else ifs to test a specific condition if
245:08 - you remember from the switch case
245:10 - statement syntax
245:13 - we are missing something right here that
245:15 - is causing our solution to be wrong
245:18 - and i think what's gonna happen
245:21 - if we execute this we're gonna get
245:23 - neptune
245:24 - uh every time so let's let's see if
245:26 - that's the case
245:28 - yeah so we got neptune every single time
245:31 - and the reason that's happening
245:34 - is we don't have any break statements
245:36 - here
245:36 - so in other words we're getting the id
245:40 - um passed in correctly so that's passed
245:42 - in as an argument id is the parameter
245:46 - that we're defining within the function
245:49 - and then what it's doing is it's looking
245:51 - at that id so that's in the switch
245:53 - statement and it's saying what does the
245:56 - id equal and then once it figures that
245:58 - out it goes to all the cases and so it
246:01 - says does the id equal one
246:03 - okay if it does we'll set the name equal
246:06 - to
246:07 - mercury and then we'll return the name
246:09 - down here
246:10 - but the problem is since there's no
246:12 - break statement it's always going to hit
246:15 - the last case
246:17 - so let's say that the id
246:19 - um you know we go down to the test and
246:21 - they're passing in two as an argument
246:24 - and we're expecting that that will
246:26 - return venus
246:27 - so if we you know pass in an id of two
246:32 - it's going to get passed in and then
246:33 - we're going to look at case one and say
246:36 - okay id does not equal one so let's go
246:39 - to the next one all right id does equal
246:41 - 2 so let's set the name equal to venus
246:44 - but instead of breaking and coming down
246:47 - to the return statement and returning
246:49 - that answer
246:50 - it doesn't do anything it's just going
246:52 - to keep going down all of the cases so
246:54 - it's going to say does case equal 3 does
246:57 - case equal 4 does case equal 5 so on and
247:00 - so forth until it hits the last one so
247:02 - we need to add some break statements in
247:04 - here and all we have to do is just put
247:06 - in
247:07 - break with a semicolon
247:10 - and we'll do that for all of these lines
247:15 - all right so we've got our break
247:17 - statement let's test this once more
247:20 - and this time we're passing it so that's
247:22 - all we needed to do we just this was
247:25 - purely a syntax error and it's something
247:29 - that you would have had to kind of look
247:31 - up the documentation for a switch case
247:34 - statement or watch my previous lesson to
247:36 - figure out so let's go ahead and attempt
247:38 - it we know it's going to pass and we'll
247:40 - submit it
247:42 - all right let's see what everyone else
247:43 - was doing
247:45 - there's some clever solutions here
247:47 - obviously this one is very clever but i
247:51 - would not recommend doing this at our
247:53 - skill level right now
247:55 - so looks like we did it did it okay in
247:58 - this case this person has opted to use a
248:01 - return statement which is valid but a
248:04 - break statement works just as well so
248:07 - you can see that this was the i guess
248:09 - the top solution most common and that's
248:12 - kind of what we
248:13 - used there the one thing i'll point out
248:15 - is i put a break statement after neptune
248:17 - but that wasn't really necessary since
248:19 - it's the last one
248:20 - all right we'll go to the next
248:23 - challenge
248:24 - this is reversing a string so let's go
248:27 - ahead and train on this
248:29 - so basically all we're doing is taking
248:31 - this string and reversing it
248:33 - and i know how to solve this solution
248:36 - with just a single line but i don't
248:39 - actually know exactly how to do that i
248:42 - can take a guess so let me try
248:44 - and just return string dot reverse
248:47 - and see if that works
248:51 - okay so reverse is not a function as i
248:53 - kind of suspected so
248:56 - in javascript as we talked about in the
248:58 - previous video there's a bunch of
249:00 - built-in functions
249:02 - that come with javascript and you can
249:04 - look these up so we'll just say
249:06 - javascript built-in
249:08 - functions
249:10 - and then we'll we'll go to tutorials
249:11 - point i like this one it's pretty simple
249:14 - and then if we go to the string methods
249:16 - that's where we want to go because what
249:19 - we're trying to do is reverse a string
249:21 - so any time that you're trying to modify
249:25 - a certain
249:26 - data type you can first look to those
249:29 - built-in methods so you don't have to do
249:31 - something manually so in this case we're
249:33 - working with a string and we need to
249:35 - reverse it so let's go ahead and see
249:38 - what we can do
249:40 - using the string methods
249:43 - and it turns out if we're just looking
249:45 - through these different string methods
249:46 - there's nothing that says reverse here
249:49 - um i had actually for some reason
249:51 - thought that we did have a reverse
249:53 - method
249:54 - don't know how that slipped my mind but
249:57 - we don't so we have to think of another
249:59 - solution now realistically if we were
250:02 - solving this problem
250:04 - um you know in the real world where we
250:06 - had to write some code that reversed the
250:08 - string what i'm going to do is this i'm
250:11 - opening up google
250:13 - and then i'm going to type in how to
250:14 - reverse a string
250:16 - javascript
250:18 - all right and usually there's going to
250:20 - be a stack overflow post
250:23 - because stack overflows where you
250:24 - basically get the answer to anything
250:26 - when you're coding
250:27 - and what's going to happen
250:29 - is we're going to find a solution here
250:32 - so i wasn't that far off we actually do
250:35 - have a reverse method but this is not
250:37 - going to be entirely apparent
250:40 - to you if you're like a complete
250:41 - beginner but what we're doing in this
250:43 - solution here is we're actually
250:45 - converting this to an array first
250:48 - so let's go back this is all i need to
250:51 - see for now
250:53 - let's go back to our documentation and
250:55 - take a look at the array methods
250:58 - so if we have a data type
251:00 - of an array
251:02 - we can actually reverse it so
251:04 - uh looks like there's a reverse method
251:07 - right here and i'm going to go ahead and
251:09 - go to the dev console
251:12 - just right click anywhere on the screen
251:15 - let's just show you how to do that right
251:17 - click inspect element if you've been
251:18 - watching the series this is not news to
251:20 - you and now we can type away with any
251:22 - javascript so let's see how we can do
251:24 - this with an array we'll just set an
251:27 - array
251:28 - equal to
251:30 - 1 2
251:32 - 3
251:33 - and if we want to reverse this array we
251:35 - can just say array dot reverse
251:38 - and it's going to reverse the values in
251:40 - the array so basically what this stack
251:42 - overflow solution is telling us
251:45 - is that we first need to
251:47 - convert the string into an array by
251:50 - letter and then we need to reverse it
251:53 - and then we need to join it back into a
251:54 - string so this is a you know one step
251:58 - solution where we can basically do it
252:00 - all in one step we talked about chaining
252:03 - these built-in methods in just the prior
252:05 - video but i want to break this out into
252:08 - individual steps
252:10 - just for clarity so let's go ahead and
252:12 - do that right now
252:14 - the first thing we want to do is split
252:16 - the string into an array so basically
252:19 - it's going to take every character in
252:21 - the string and it's going to make each
252:23 - character
252:24 - a value of that array so again let's
252:27 - come back to our console
252:29 - let's say that we have a string and
252:31 - that's equal to hello
252:33 - all right
252:34 - and then we want to say string dot
252:37 - what were we using here we're using
252:39 - split and we're going to just split it
252:42 - with
252:43 - an empty character so
252:45 - if i can get back here so we'll say
252:47 - string.split
252:49 - and
252:50 - we'll put in just an empty character and
252:54 - that's going to give us an array where
252:55 - we have each
252:57 - letter being separated in the array all
252:59 - right so now that we have the array we
253:01 - can split or we can reverse it so
253:05 - let's just go back and do that here so
253:07 - the first thing we have to do is
253:10 - put it into array so string dot split
253:14 - and then we just need to pass in an
253:17 - empty character
253:18 - and then from there we can reverse it so
253:20 - as we saw so we'll say we'll save it
253:23 - into a reversed variable so we'll say
253:26 - array dot reverse
253:28 - alright so that's going to assign it
253:30 - there and then often times when i'm
253:32 - solving a problem like this i'm going to
253:34 - write some code and then actually test
253:36 - it out before i move on so let me go
253:39 - ahead and console.log the reversed value
253:43 - and then we'll click test which is
253:45 - obviously going to fail
253:46 - but what we do see
253:48 - is that we get some output so you'll see
253:52 - that we
253:53 - logged this to the console and this to
253:56 - the console which basically tells us
253:58 - that we have our like our reversed
254:00 - variable is an array and that array is
254:03 - reversed from the original string
254:06 - so the last thing we need to do since we
254:07 - have it in the form of an array data
254:09 - type is we need to take that reversed
254:12 - array and just combine it together into
254:14 - a string and to do that i think
254:17 - all we have to do is
254:20 - join it so if we do string dot split
254:24 - and then we say join
254:26 - it's going to join it by a comma so
254:30 - we actually will have to replace those
254:32 - commas let's see how the stack overflow
254:35 - solution did it
254:37 - okay let's see
254:40 - and we have to when we join it we have
254:42 - to also enter that empty string right
254:44 - there so that's just a little tricky
254:47 - part to this so let's go back to our
254:49 - problem
254:50 - and then we'll say final answer
254:54 - equals the reversed array so this is an
254:57 - array and then we join it by that empty
254:59 - character
255:01 - and then we go ahead and return
255:04 - the final answer
255:06 - and let's go ahead and test that
255:10 - you can see that we passed all the tests
255:12 - so let's attempt it i think we'll be
255:14 - fine here
255:15 - and we solved it so that's just how we
255:18 - take it out into different steps
255:20 - of course we could have solved this by
255:24 - just saying
255:25 - we want to do string dot split
255:29 - dot reverse
255:31 - join
255:33 - and this
255:34 - we can delete all these uh intermediate
255:37 - variables right here we can test this
255:40 - and it's gonna pass everything let's go
255:42 - ahead and attempt it
255:44 - and submit it so like i said there's a
255:46 - couple different ways to solve it but um
255:49 - you might be asking at this point well
255:50 - you're cheating like you went on stack
255:52 - overflow and figured this out that way
255:55 - and
255:56 - well yes if i was doing a programming
255:58 - competition um i would be cheating and
256:01 - that's you know that's why i'm not a
256:03 - competitive programmer i'd never want to
256:05 - be because
256:06 - google is you know your best friend when
256:08 - you're a programmer
256:10 - and it is not cheating to google
256:12 - something so um we'll try to do
256:15 - more of these on our own for the
256:17 - remainder of the video but for now i
256:19 - just really wanted to beat that into
256:21 - your head that it is okay to go to
256:23 - google and search something like that
256:25 - and that's how pretty much everyone that
256:27 - operates in a real world environment is
256:30 - going to do so
256:32 - just a tidbit of knowledge there
256:34 - take it for what it is
256:36 - all right so we'll go to the next
256:38 - challenge
256:40 - see what we got here
256:44 - okay even or odd let's see what we are
256:47 - trying to solve
256:49 - so it says create a function or write a
256:50 - script in shell that's not something
256:53 - that we're going to do
256:54 - that takes an integer as an argument and
256:56 - returns even
256:57 - so
256:58 - notice that they're asking for a string
257:01 - a capitalized string that says even
257:04 - for even numbers or uh capitalized odd
257:07 - for odd numbers
257:09 - all right so let's see what we can do
257:11 - here
257:15 - the first thing i'm thinking about is
257:17 - maybe a modulus operator but i don't
257:19 - even think that we
257:20 - [Music]
257:22 - need to do that or do we
257:31 - yeah that is correct so a modulus
257:34 - operator
257:35 - if we were to divide
257:37 - something
257:40 - by two right okay
257:42 - i don't know what i was thinking here so
257:44 - just divide it by two right so
257:46 - um let's let's go over to our little
257:48 - playground here and refresh
257:51 - just so that we can test a few things
257:53 - out so if we got 20 divided by 2
257:56 - that comes out to an even number if we
257:58 - have 21 which is odd divided by 2
258:02 - we have a decimal
258:04 - now
258:05 - we would have to complete some
258:07 - additional steps
258:09 - to actually figure out which one's a
258:11 - decimal which one's a whole number so i
258:14 - kind of like the idea of the modulus
258:16 - operator
258:17 - because if we do 20 instead of divided
258:20 - by 2
258:21 - but modulus 2 it's going to give us 0
258:25 - but 21
258:27 - modulus 2
258:28 - is going to give us 1. so basically
258:32 - every time we have an even number
258:35 - doing modulus 2 is going to return 0
258:37 - because there's zero remainder if we do
258:41 - that division operation so in previous
258:43 - lessons we talked about this modulus
258:46 - operator
258:47 - in my video video about operators and
258:50 - basically what it's doing is it's doing
258:51 - a division problem and it's returning
258:54 - what the remainder of that division
258:56 - problem is so as we know going back to
258:58 - basic math if you divide something and
259:01 - there's no and there it goes into it
259:04 - evenly there's going to be a remainder
259:06 - of 0 which we're going to see for any
259:08 - even number so if we do 40 modulus 2
259:11 - that's 0 if we do
259:13 - 2 modulus 2 that's 0. so that's
259:16 - basically how we're going to solve this
259:19 - and we could do some intermediate steps
259:21 - but we can actually just return the
259:22 - solution
259:24 - actually no we do have to do some
259:26 - intermediate steps so if we need a
259:29 - conditional in here we want to say if
259:32 - the number so we're grabbing that from
259:35 - the parameter
259:37 - and then you know the test cases are
259:39 - going to pass in different arguments and
259:42 - then this parameter called number just
259:44 - think of it as as a variable available
259:47 - to this function
259:49 - is going to
259:50 - be different per the test case so
259:53 - replace that number with whatever
259:54 - argument you have
259:56 - and then what we want to do is write an
259:58 - expression that says the number modulus
260:01 - 2
260:02 - all right so we want to say if that
260:04 - is equal to so we'll use triple equals
260:07 - to check both
260:09 - the value and the data type to be the
260:11 - same
260:12 - and we want to set that equal to 0.
260:15 - so if the number modulus 2 equals 0 then
260:18 - we know that it is an even number so
260:21 - we'll drop down into our if statement
260:23 - and we'll return what we need to return
260:27 - based on the instructions over here
260:29 - called even
260:30 - all right and then we'll put an else
260:32 - statement so we know that if it's not
260:34 - even it is odd so we're going to just
260:37 - return
260:40 - in that case
260:41 - and let's test this out
260:45 - all right we passed all our tests let's
260:47 - go ahead and attempt it
260:49 - and we passed all of our tests so let's
260:52 - submit this answer and see what everyone
260:54 - else
260:55 - did to answer this
260:57 - i'm sure there's some more clever
260:59 - solution than what i came up with
261:01 - all right so this is just using the
261:03 - ternary operator
261:05 - we talked about this very briefly in the
261:07 - operators video but it's basically just
261:10 - a shorthand
261:12 - clever way to write an if-else statement
261:15 - and we could have used this but i just
261:17 - don't want to confuse anyone
261:18 - unnecessarily
261:20 - this looks to be our solution
261:23 - um
261:24 - actually there's not not much variance
261:26 - here so these are just abbreviated ways
261:28 - abbreviated ways to write
261:30 - our function they're just using the
261:32 - arrow functions rather than
261:34 - our classic function here so
261:37 - um we did pretty good on that one let's
261:39 - go to the next challenge
261:44 - all right we're counting sheep in this
261:46 - challenge
261:48 - see what we got here
261:51 - okay we are returning the number or the
261:53 - count
261:54 - of the vowels in the given string
261:57 - we will consider a e i o u as vowels for
262:01 - this uh
262:02 - problem
262:03 - but y is not going to be in there okay
262:05 - so that's good to know the input string
262:08 - will only consist of lowercase letters
262:10 - and or spaces
262:12 - all right so this is another point that
262:14 - i really want to bring up um if you're
262:16 - you know just starting out you're a
262:17 - beginner
262:18 - and you're solving problems this is kind
262:20 - of how an interview question might be
262:22 - laid out
262:24 - where the last part is going to tell you
262:26 - something about the input so obviously
262:29 - the the functions that we have been
262:31 - writing here
262:32 - they're being executed by something and
262:35 - that's something are the automated test
262:39 - these are this is a sample test down
262:41 - here but
262:42 - there's code that's going to run when we
262:44 - actually click this test button
262:46 - this site is going to execute our
262:49 - function with a bunch of different
262:51 - parameters to make sure that we
262:54 - implemented it correctly you know you
262:55 - don't want to just test it with one set
262:57 - of parameters you want to put in a bunch
262:59 - of different things
263:00 - and with that we could have an infinite
263:02 - number of things passed into this
263:04 - function as arguments
263:06 - and oftentimes in
263:09 - more complex problems and
263:11 - harder challenges they're going to
263:13 - challenge you to handle all of the
263:15 - different edge cases that might come up
263:18 - and when i say edge cases you know it
263:20 - might be something like okay what
263:22 - happens if i
263:23 - pass in
263:25 - an undefined value as my argument or
263:28 - what happens if i pass in
263:30 - um you know a number instead of a string
263:33 - into this as an argument well all these
263:36 - things need to be handled by your code
263:39 - so this last sentence here is it doesn't
263:41 - seem
263:42 - very useful and you might even ask like
263:44 - why is it here but this is telling you
263:47 - something about the input it's basically
263:49 - saying to us as the programmer it's
263:51 - saying
263:52 - hey this is only going to give you
263:54 - lowercase letters and or spaces
263:57 - and that's basically saying in other
263:59 - words we're not going to pass in numbers
264:02 - we're not going to pass in undefined
264:04 - values null values boolean values you
264:07 - know all you need to worry about are you
264:10 - know single lowercase letters and spaces
264:13 - all right so that is very useful
264:14 - information it's going to save us a lot
264:16 - of time when we're solving this problem
264:19 - all right so
264:20 - it says enter your magic here spelled
264:23 - incorrectly
264:25 - at least in english i don't know how
264:27 - spell it in other languages anyways
264:30 - let's see what we got here so we have a
264:33 - starting point now one thing i'm going
264:35 - to fix here
264:36 - they're using the var
264:39 - keyword and in the lessons i've
264:41 - basically told you we're not using this
264:44 - and i also stand by that so let's go
264:47 - ahead
264:48 - and set that equal to let
264:51 - because it looks like we're going to
264:52 - have to reassign this at some point
264:55 - all right so this is actually a fairly
264:58 - easy solution
265:00 - once you've been programming for a
265:01 - little bit
265:02 - how i see us solving this is first let's
265:05 - put in our input into an array
265:08 - of some sort
265:10 - and then i want to loop over that array
265:12 - and check if it's a vowel all right so
265:16 - let's go ahead and do that there's
265:18 - actually a lot of ways that you can
265:19 - solve this but let's just stay
265:21 - consistent with what we did in the
265:22 - previous one so
265:25 - we'll take
265:26 - we'll we'll convert this to an array by
265:28 - saying string
265:30 - dot
265:31 - split and then we want to pass in that
265:33 - empty character so if you remember what
265:35 - that does is it takes every letter of
265:37 - the string and it puts it out it expands
265:40 - it out into an array
265:42 - so going back to this tab
265:44 - we'll just say you know
265:47 - let's look at an array
265:49 - and then or no we'll look at a string
265:52 - so the string will be hello
265:55 - and then we can just say string dot
265:57 - split
265:59 - and then that's what it's basically
266:01 - going to do here so it's going to split
266:03 - it into an array and then from an array
266:05 - we know that we can write a loop so this
266:08 - is kind of the previous couple videos
266:10 - that we've been talking about loops
266:12 - so we're going to loop over every single
266:15 - value in that array so to do that we're
266:17 - going to say let i equal 0 this is just
266:20 - the syntax we use for
266:22 - looping and then we want to go for the
266:25 - length so
266:27 - the array that we just created has a
266:29 - certain length has a certain amount of
266:31 - characters
266:32 - but we don't know that beforehand so
266:34 - we're just going to pass in
266:36 - a ray dot length and then we're going to
266:38 - increment i
266:40 - using the increment operator
266:43 - all right so we're going through this
266:44 - array and now we're just going to write
266:46 - a
266:47 - simple if statement
266:49 - so we'll just say if
266:52 - let's say we'll grab from the array
266:55 - each of the indexes so remember i is
266:57 - going to increment it's going to go from
266:59 - 0 to 1 to 2 to 3 to 4 and all the way
267:03 - until it reaches the end of that array
267:06 - which has the individual letters
267:09 - of this you know input argument so we're
267:12 - going to grab that like basically this
267:15 - array um or arr bracket i is going to
267:18 - represent a single letter of that array
267:22 - so we're going to ask whether that
267:24 - equals um any of the vowels so there's
267:28 - there's actually some really short ways
267:29 - that you can write this but i'm going to
267:31 - go ahead and do this the clunky
267:34 - you know really drawn out way just
267:35 - because it's the most clear for a
267:37 - beginner
267:38 - so we'll say if the array or actually we
267:41 - can use a switch a switch statement
267:44 - um as we saw in a previous challenge so
267:48 - the the thing that we want to evaluate
267:50 - is that single letter
267:51 - and then we're going to come down here
267:53 - and we're going to say
267:54 - case does it equal a
267:56 - all right if it equals a then i want to
267:59 - take this val's count variable and
268:02 - increment it by
268:04 - 1. so that's what we're doing there and
268:06 - then we will break out of the statement
268:08 - remember that's very important all right
268:10 - so we're going to do this for all of the
268:12 - different vowels and we're just going to
268:14 - paste this code
268:16 - below here
268:18 - and it's going to get all messed up with
268:19 - formatting so let's see
268:26 - and like i said there is a much quicker
268:29 - solution
268:30 - and i'm sure that we'll see someone that
268:32 - used it
268:33 - but this is you know in the scope of
268:35 - what we've talked about already so i
268:38 - just want to stay consistent with what
268:39 - we've talked about you know not throw
268:41 - any huge curveballs here
268:43 - all right so we're getting to our last
268:45 - one
268:46 - let's pass that in we actually don't
268:48 - need a break statement for this last one
268:50 - here
268:52 - and so basically what what's going to
268:54 - happen here is we're going to loop
268:55 - through this array so basically we're
268:58 - going to look at every single letter in
269:00 - the array from that original string
269:03 - and we're going to ask does it equal a
269:06 - if it does we're going to increment the
269:08 - values count does it equal e increment
269:10 - the values count and if it doesn't equal
269:13 - any of those the val's count variable is
269:15 - going to stay where it is so at the end
269:18 - of this loop we're going to have a total
269:21 - count
269:22 - and then we just return it at the bottom
269:24 - so let's go ahead and run the test on
269:26 - this and see what we get
269:29 - you can see we passed one of the tests
269:30 - so let's go ahead and attempt it
269:32 - and we passed all five of them so we
269:35 - obviously got this correct so let's
269:37 - submit it
269:38 - guess it didn't submit so let's try that
269:40 - again
269:41 - sometimes this is a little bit slow it
269:43 - has to actually run a bunch of tests so
269:46 - all right so let's see what we got here
269:48 - the first answer very clever um
269:51 - this this gets into regular expressions
269:54 - which we haven't even
269:55 - come close to touching on and i don't
269:57 - want to so we'll skip that um this right
270:00 - here
270:01 - looks um a little bit similar to what we
270:04 - did
270:05 - so this is actually a double loop so
270:07 - we're actually looping through two
270:09 - different arrays i really don't want to
270:11 - get into that either because that that
270:14 - will make anyone's braden spin to be
270:16 - honest
270:18 - got some more regular expressions
270:21 - see
270:23 - i'm just looking for the one that i was
270:24 - thinking of that would be
270:26 - a lot okay there it is
270:28 - so we looped through this array and what
270:32 - we could have done is just checked
270:34 - instead of writing out this switch case
270:36 - statement um all we would had to do is
270:39 - put the vowels in an array and then we
270:42 - would have to you know take that array
270:44 - and use the includes method and then
270:47 - loop through all the letters and check
270:49 - if that letter
270:51 - was included in that val's array so
270:53 - that's what i was thinking of just a
270:55 - little bit easier way to do it looks
270:57 - like this person kind of solved it like
270:59 - us but like i said there's a ton of ways
271:01 - to solve each of these challenges
271:04 - you know we can solve them however we
271:05 - want
271:06 - so let's go to the next one
271:08 - looks like jenny's secret message i
271:12 - wonder what jenny's secret message is
271:14 - so let's train on this i gotta take a
271:17 - little break here
271:19 - solving all these these challenges tired
271:22 - all
271:22 - right here we go so jenny's secret
271:25 - message jenny has written a function
271:28 - that returns a greeting for a user
271:29 - however she's in love with johnny and
271:32 - would like to greet him slightly
271:33 - different
271:35 - that's romantic all right she added a
271:37 - special case to her function but she
271:40 - made a mistake
271:42 - so let's look at the function it looks
271:44 - like we're just trying to edit some code
271:46 - here
271:47 - all right the first thing i'm going to
271:48 - do here is just run the test see what
271:50 - we're getting kind of gives us some
271:53 - clues
271:54 - all right so now let's look at the code
271:57 - let's see what what's happening here is
271:59 - that we have a single parameter called
272:01 - name so that's basically saying all
272:03 - right this function expects a single
272:06 - argument to be passed through it when
272:08 - it's executed and that is called name
272:11 - then we're going to use that name to
272:13 - figure out if we're dealing with johnny
272:16 - if we're not dealing with johnny then we
272:18 - don't want to add you know
272:21 - any specialized message we just want to
272:23 - say hello to that name so up here this
272:27 - is how we would do that we're just
272:28 - concatenating a bunch of strings
272:30 - together
272:32 - so we're saying we have a hello string
272:34 - and then we're adding the name that is
272:37 - passed in and then an exclamation point
272:39 - so this is basically
272:42 - what we want to return for everyone
272:46 - except
272:48 - johnny all right so that's what we want
272:50 - to return there let's space it out a
272:52 - little bit and then if the name is
272:54 - johnny we want to return hello my love
272:58 - all we have to do here i think is
273:00 - reverse these so what's happening right
273:02 - now is we're going through this function
273:05 - and it never even gets to this if
273:07 - statement because we're already
273:09 - returning something so basically every
273:12 - time we run this function it's returning
273:14 - hello you know name with an exclamation
273:17 - point at the top it never checks to see
273:20 - if johnny is the name because that's
273:23 - like this code block down here just
273:25 - never gets reached so all we have to do
273:27 - is cut that from there and put that at
273:31 - the top
273:32 - so if the name
273:33 - equals johnny return hello my love so
273:36 - let's go ahead and test that
273:38 - and it's going to pass now something
273:40 - that you might
273:41 - be wondering about right here if you've
273:43 - been watching the videos
273:45 - is this if statement so
273:47 - normally we write an if statement with
273:49 - these brackets and then we would put the
273:52 - return right in there and that's how i
273:54 - prefer to see it but
273:56 - javascript has a bunch of little quirks
273:58 - and if you have a simple if statement
274:00 - like that we're just where you're just
274:02 - returning a single line you don't
274:04 - actually have to add the brackets that's
274:06 - just a syntactical thing this is totally
274:09 - fine if we run the test again
274:11 - it's going to pass
274:12 - and let's go ahead and attempt it so we
274:15 - passed the test let's go ahead and
274:17 - submit
274:18 - just going through a couple of the
274:20 - possible answers again this is another
274:23 - ternary or no it's not
274:25 - yeah this is using a ternary operator so
274:28 - it's basically enclosing that ternary
274:30 - operator within parentheses
274:33 - and then it's putting it in the middle
274:34 - of that string concatenation that we're
274:36 - doing so
274:38 - very clever but it's not something that
274:40 - we need to do totally unnecessary and
274:43 - it's honestly not
274:44 - not quite as readable as what we have
274:46 - done
274:48 - all the other ones these are uh rather
274:50 - simple this is a nice one this is a good
274:53 - solution if the name is johnny we return
274:55 - this else we return something else
274:57 - we kind of did something similar we just
274:59 - didn't add the else statement
275:01 - all right let's go to the next problem
275:06 - the next problem is n divisible by x and
275:10 - y let's see what we got here
275:13 - okay so we got quite a bit of
275:15 - quite a few examples create a function
275:18 - that checks if number n is divisible by
275:21 - two numbers x and y
275:24 - all inputs are positive non-zero digits
275:27 - so again this last sentence is useful
275:29 - because it's telling us hey we're not
275:32 - going to throw any you know crazy
275:34 - arguments through this function you
275:36 - don't have to worry about handling you
275:38 - know different types of data
275:41 - you know you don't have to worry about
275:43 - a string being passed into this data in
275:46 - that case you might have to convert it
275:48 - or just throw an error but in this case
275:51 - all inputs are positive non-zero digits
275:54 - so it's going to be from 1 to
275:56 - infinity basically
275:58 - all right so here are some of the
275:59 - examples we might as well use these
276:02 - so n equals 3 x equals 1 y equals 3.
276:06 - this is true because 3 is divisible by 1
276:09 - and 3.
276:10 - all right n equals 12 x equals 2 y
276:13 - equals 6. true because 12 is divisible
276:15 - by 2 and 6. all right so it's basically
276:18 - you know looking at all these numbers
276:20 - trying to figure out if they're
276:21 - divisible by each other all right
276:23 - immediately i'm kind of thinking about
276:26 - that modulus operator again because
276:29 - anytime we look at something that says
276:31 - is it divisible by
276:33 - that comes in handy so and then also the
276:36 - other thing that i'm thinking about
276:38 - initially
276:39 - is that it's saying checks if number n
276:41 - is divisible by both of these numbers so
276:44 - this and is capitalized which tells me
276:48 - that we're probably going to be using
276:50 - this and operator at some point so just
276:53 - keeping that in mind as we solve it
276:56 - again all inputs are positive non-zero
276:59 - so basically what we're going to do is
277:02 - we're going to do two different math
277:03 - problems so we'll say result one
277:06 - is going to do is going to be equal to n
277:09 - divided by x
277:11 - and then result
277:12 - two is going to be n divided by y all
277:16 - right so we're just running both of the
277:18 - math problems and we're getting it into
277:21 - a result variable
277:22 - and then from here all we have to do
277:25 - is basically
277:27 - divide let's see so let's let's go ahead
277:30 - and console.log out these results
277:33 - just so that we can see some output that
277:35 - we're receiving
277:39 - so we will test it obviously everything
277:43 - failed
277:44 - but you can see what we were getting
277:46 - here so we're getting some decimals as
277:47 - we might expect if it doesn't go into it
277:50 - evenly now a good way to check whether a
277:54 - number is a whole number or a decimal is
277:56 - using that modulus operator
277:59 - and if you
278:00 - think about it if we divide a number by
278:02 - one
278:03 - it's going to always go into itself
278:06 - right unless it is a decimal so if we
278:09 - were to let's go over to our playground
278:11 - here
278:12 - if we
278:14 - divide this by 1 it's going to give us
278:16 - 20.
278:17 - 19 divided by 1 is 19. but 2.5 divided
278:22 - by 1 is 2.5 so it's
278:26 - not a whole number it's a decimal number
278:29 - and because of that the modulus operator
278:32 - is not going to return 0. so if we did
278:35 - 20
278:36 - modulus 1
278:38 - that's 0.
278:39 - 19
278:40 - modulus 1 is 0. but 2.5
278:44 - modulus 1 is 0.5 so any whole number is
278:49 - going to
278:50 - if we do modulus 1 is going to return us
278:52 - with 0. so we can use that in our
278:55 - solution here
278:56 - so we'll say
278:58 - if
279:00 - result 1
279:01 - modulus 1
279:03 - equals
279:05 - and then this is where that and
279:07 - statement comes in
279:08 - and
279:10 - result two
279:12 - modulus one
279:13 - equals zero then we know that we have
279:17 - a correct answer so let's see what it
279:19 - wants us to return again
279:21 - it says
279:23 - checks if it's divisible okay
279:27 - okay so we're returning true or false
279:30 - so in this case we're going to just
279:32 - return
279:34 - true
279:35 - and then if that's not true then we
279:38 - return false so if the if the first
279:41 - result the first division problem
279:43 - and the second division problem if both
279:45 - of those are not
279:47 - equal to zero when we use the modulus
279:49 - operator then
279:50 - we return false down here so let's test
279:52 - it see what we get
279:54 - looks like we passed
279:56 - that's great let's attempt it
279:58 - and you can see that we passed all the
280:00 - tests
280:02 - let's see what everyone else was doing
280:04 - here for this
280:06 - i'm going to guess that a lot of people
280:08 - solved it this way
280:11 - but of course there's always these
280:12 - clever folks out here that are just
280:14 - solving it in one line
280:17 - this one
280:18 - this is interesting right here
280:21 - i'm not going to go into it you know
280:23 - these are these are not totally
280:25 - relevant to us we solved it in a very
280:27 - straightforward way wasn't clever but it
280:30 - was very straightforward and that's all
280:31 - we're asking for here so feel free to
280:33 - look through these
280:35 - let's go on to the next challenge
280:38 - at this point i'm going to try to solve
280:40 - these a little bit quicker
280:42 - just so that we can blow through the
280:43 - rest of the video i'll point things out
280:45 - as we go of course but
280:47 - um i've kind of
280:49 - you know parked on a lot of the most
280:51 - important things like how to how to look
280:54 - at a test how to think about it how to
280:55 - google all that kind of stuff so we'll
280:57 - kind of we'll try to speed through these
280:59 - a little bit faster
281:01 - alright so this one is return negative
281:03 - in the simplest assignment you are given
281:06 - a number and have to make it or in this
281:08 - simple assignment you are given a number
281:10 - and have to make it negative
281:12 - but maybe the number is already negative
281:15 - all right so it's kind of implying to us
281:17 - that we have to check whether the number
281:20 - is negative first and then we have to
281:22 - apply some sort of operation on it
281:24 - so immediately we know that if we
281:26 - multiply
281:27 - something by a negative one then it
281:30 - turns it you know the opposite sign that
281:33 - it was
281:34 - so if we
281:35 - all we have to do is say if
281:37 - the number is less than zero we know
281:41 - that it's negative
281:42 - so we're just going to return
281:44 - the number because it's already negative
281:47 - otherwise
281:48 - if it's not less than zero then we're
281:50 - going to return the number
281:52 - multiplied by negative one
281:55 - and that should be the solution right
281:57 - there
281:59 - we passed i think this is going to work
282:01 - it's a pretty simple straightforward
282:03 - answer
282:04 - so again if you have caught on to this
282:07 - when we're using the if-else statements
282:10 - that's an opportunity to use a ternary
282:12 - operator and you're going to see that in
282:15 - some of these solutions so here is the
282:18 - ternary operator at work it's basically
282:21 - the same exact thing that we did has a
282:24 - little bit of a different thing so if
282:26 - you can just put a negative at the
282:28 - beginning
282:29 - of your variable to flip the sign of it
282:32 - that's just a shortcut in javascript
282:35 - but then
282:36 - there's another solution this is
282:37 - actually interesting
282:39 - if you use the built-in
282:41 - math function called the absolute method
282:44 - that's going to turn any number to a
282:47 - positive value
282:49 - so if we just turn everything that we
282:52 - get to a positive value and then reverse
282:55 - that to a negative we're always going to
282:56 - get a negative value so that that is a
282:58 - clever solution and
283:00 - honestly i think that's the best
283:02 - solution if you just thought of using
283:04 - this
283:05 - but of course if you're a beginner
283:07 - you're not going to think of using the
283:09 - math.absolute method because you
283:12 - probably don't know about it but again
283:14 - you can look up these javascript
283:15 - built-in functions and i'm sure that it
283:18 - this one might not show you yeah so we
283:21 - have the math methods down here and you
283:23 - could
283:24 - once again i'm on tutorials point i just
283:26 - searched for javascript built-in
283:28 - functions but we have these math methods
283:31 - and the first one is the absolute method
283:33 - so it returns the absolute value of a
283:35 - number and if you knew that you could
283:37 - think of it and just use that for our
283:40 - solution
283:41 - so anyways like i said we're not going
283:43 - for the most optimized solution we're
283:45 - going for the most straightforward and
283:47 - clear solution for a beginner
283:50 - all right so we're finding the smallest
283:52 - integer in the array for this one
283:55 - all right
283:56 - given an array of integers your solution
283:59 - should find the smallest integer
284:02 - all right so this looks like a perfect
284:05 - opportunity to write a loop
284:08 - and you can see in our solution here
284:10 - this is actually getting us into the
284:13 - concept of classes which we
284:15 - we have not talked about one bit so far
284:18 - but basically
284:19 - um each class is going to have you know
284:21 - several different instance methods
284:24 - um and then the find smallest int
284:27 - is actually an instance method so
284:30 - i'm not sure if we we might be able to
284:32 - edit this let me see
284:37 - well as you can see in the test it's
284:39 - instantiating this new class so we can't
284:42 - really do anything about it but i'm just
284:43 - telling you don't worry about the class
284:45 - right now
284:46 - all we have to do is um implement this
284:48 - method and we should be good so within
284:51 - this method we're going to get some
284:53 - arguments this is actually what we would
284:56 - call this would be params
284:58 - because that's what the params are what
285:00 - we define within the function
285:02 - declaration and the arguments or what we
285:04 - pass through it but again in those
285:07 - previous lessons i told you that
285:09 - arguments and parameters are two sides
285:11 - to the same coin and in this case that's
285:14 - been demonstrated there
285:15 - we're using args and params
285:17 - interchangeably
285:19 - all right so we'll just change it to
285:20 - params to say stay consistent here and
285:23 - then from here we're going to go ahead
285:25 - and loop through this array
285:27 - so the params that we're going to
285:28 - receive
285:30 - is an array of integers
285:32 - all right so and then it says at the
285:34 - bottom you can assume for the purpose of
285:36 - this challenge that the supplied array
285:38 - will not be empty so we don't have to
285:41 - handle the case where it's empty but it
285:43 - doesn't say anything well actually yeah
285:45 - it does we're going to get an array of
285:46 - integers so we're good
285:48 - so let's go ahead and
285:51 - assume that the params is an array so i
285:54 - actually want to name this something
285:57 - even more descriptive
285:59 - so we'll call this array of numbers just
286:03 - so that we can remember what we're doing
286:05 - and now we're going to make a for loop
286:09 - so basic for loop here
286:11 - and
286:12 - let's go ahead and go until we get to
286:14 - the end
286:16 - of this so we're going to grab the
286:17 - length of that array of numbers
286:22 - and then for each number in the array
286:25 - we're going to check if it is the
286:27 - smallest integer
286:29 - so to do this we actually have to
286:31 - declare
286:32 - a
286:32 - variable here that's going to keep track
286:35 - of the smallest integer as we loop
286:37 - through the array so let's just call
286:39 - this
286:39 - the smallest number and we're just going
286:43 - to declare it because we have not
286:46 - looped through any of the numbers yet
286:48 - so or actually yeah let's go ahead and
286:50 - declare it the smallest number that we
286:52 - can possibly get
286:55 - it's an array of integers and we might
286:57 - get negative numbers
286:59 - so let's just go ahead and initialize
287:01 - this at zero so just for comparison
287:03 - purposes you'll see what i mean in a
287:05 - second
287:06 - so as we loop through this array
287:08 - the way that we're going to get
287:10 - an individual number from the array is
287:12 - by using this syntax here so we're going
287:14 - to grab the array itself and then we're
287:17 - going to pass in the index which should
287:19 - be i which is going 0 1 2 3 all the way
287:23 - till the length of the array so that's
287:25 - going to represent our number and just
287:27 - for clarity i'm going to go ahead and
287:29 - say that so
287:31 - we'll just say individual number
287:34 - equals that so that's what we're going
287:36 - to do for each loop we're going to
287:39 - declare and assign a variable for that
287:42 - then we're going to check and we're
287:43 - going to say
287:44 - if the smallest
287:46 - number
287:47 - is greater than the individual number
287:51 - you also could have said if the
287:53 - individual number is obviously less than
287:56 - the smallest number either way works
287:59 - then we're going to
288:01 - set it to a new value so if the smallest
288:03 - number is greater than the individual
288:05 - number so the end of it well maybe we
288:07 - should name this something more
288:08 - descriptive so
288:10 - individual number uh
288:13 - array
288:15 - we'll just say array number that's a
288:17 - little bit more descriptive
288:22 - i'm sorry this is this is not right even
288:24 - at all i just need to take a little
288:26 - break here from talking
288:28 - so what we want to do is we want to say
288:30 - if
288:31 - the array number that we're looking at
288:34 - you know in this iteration
288:36 - if this is less than the existing
288:39 - smallest number
288:41 - then what we want to do is we want to
288:42 - set the smallest number
288:44 - equal to that array number so it takes
288:47 - its place as the new smallest number
288:50 - and basically what's going to happen is
288:52 - as we loop through the array
288:54 - it's going to check each number and if
288:56 - it's not smaller then it's just going to
288:58 - skip it and it's going to go to the next
289:00 - iteration of the array so we really can
289:03 - come down to the bottom of this and
289:05 - return from this function the smallest
289:08 - number after we've looped through all
289:10 - the numbers in the array
289:11 - let's go ahead and test this
289:14 - looks like we've failed some so
289:16 - i think this is because we didn't handle
289:19 - negative numbers let's see
289:22 - oh actually this is just a mistake on my
289:25 - part so i initialize this at zero
289:28 - but this is a problem if we have
289:30 - positive numbers because
289:32 - if we have an array that are you know
289:34 - full of positive numbers so let's say
289:37 - that we had an array that looked like
289:39 - this we had 2
289:41 - we had 5 and we had 6.
289:43 - it's going to loop through all three of
289:45 - these numbers and it's going to compare
289:47 - it to our already smallest number of 0
289:50 - and none of these are smaller so the
289:52 - smallest number at the end is going to
289:54 - return 0.
289:56 - so we need to actually
289:58 - not declare this
290:00 - we're going to actually just
290:02 - declare it and not assign it and then
290:05 - the first thing we're going to do at the
290:07 - very first iteration of the loop we're
290:10 - going to
290:11 - set the smallest number equal to that
290:13 - first number so we're just going to say
290:16 - if i equals 0 which basically means
290:20 - we're at the very first iteration of our
290:22 - loop
290:23 - we want to set the smallest number
290:26 - equal to
290:27 - the array
290:29 - of numbers
290:31 - and then we want to grab that index of i
290:34 - and actually we can we can actually put
290:36 - this below so
290:38 - let's get the number that we're talking
290:40 - about first
290:43 - and then we can replace this now
290:47 - with array number
290:49 - okay
290:50 - so just to review what what i just
290:52 - changed here
290:53 - what we're doing is we're saying we're
290:55 - going to initialize this or declare this
290:57 - variable it's not going to have a value
290:59 - yet so we have to assign it a value on
291:01 - the first iteration of our array so
291:05 - you know the first value of the array
291:06 - basically and we know that that's always
291:08 - going to be when i is equal to zero
291:11 - so first let's get the number that we
291:14 - are looking at in this specific
291:16 - iteration we'll assign it to the array
291:19 - number variable
291:20 - and then we're going to ask is this the
291:22 - first iteration of the array if it is i
291:25 - want to set the smallest number variable
291:28 - equal to
291:30 - the first number in the array so now we
291:32 - have something to compare against and in
291:34 - the same iteration so still on the first
291:37 - iteration of this array we're going to
291:39 - compare the array number to the smallest
291:41 - number they're going to be equal so
291:43 - we're not going to get there it'll go
291:45 - through and now it should work a little
291:47 - bit better for us
291:49 - and now we have an infinite loop because
291:52 - i'm just getting scatterbrained here
291:55 - and i actually set i
291:57 - equal to one when i was looking at this
292:00 - conditional
292:01 - and that is a big no-no because what's
292:03 - happening is now we're going through
292:05 - this for loop in each iteration of the
292:08 - loop we're resetting i to zero and
292:11 - therefore we have an infinite loop and
292:13 - that is actually something that you'll
292:15 - stumble upon a lot and
292:17 - infinite loops are not fun so
292:19 - make sure you don't make that mistake
292:21 - let's replace this with triple equals
292:24 - which is going to actually do a equality
292:26 - comparison
292:28 - we should be better off this time so we
292:30 - passed all of them
292:32 - let's attempt it
292:34 - and we passed the test at this point
292:36 - i'll probably take a break because i'm
292:38 - getting a little bit a little bit fuzzy
292:40 - in the brain here so let's submit this
292:42 - and let's just look at what other people
292:44 - did obviously there's a better solution
292:46 - in all cases
292:48 - but i don't think any of these are at
292:50 - the level that we're at right now
292:52 - at this point i just can't even think
292:54 - anymore so i'm going to take a break
292:56 - and we'll come back and finish the rest
292:58 - of the problems
292:59 - the next challenge is grasshopper
293:02 - summation so we'll see what that's all
293:04 - about
293:06 - it says write a program that finds the
293:08 - summation the sum of every number from
293:10 - one to
293:12 - the variable called number
293:14 - or num the number will always be a
293:16 - positive integer greater than zero
293:18 - remember pay attention to this right
293:19 - here we don't have to worry about
293:21 - negative numbers in this case
293:23 - let's just look at an example because i
293:26 - i want to go through that first so
293:28 - if the number is 8 it's just saying go
293:31 - from 1 to 8
293:33 - and add everything together in
293:34 - succession so
293:36 - the first thing that we'll notice here
293:38 - is that it's only adding one so not it's
293:41 - not only adding one but
293:43 - the number that we're adding only
293:45 - increases by one so it looks very
293:47 - similar to a for loop
293:50 - so we can probably write a for loop so
293:52 - let's go ahead and template that out so
293:54 - we'll let i equal
293:56 - 0 to start we might have to change that
293:59 - actually
294:01 - and then we'll say i is less than num
294:04 - um
294:05 - yeah i is less than num because we want
294:08 - to go through as many iterations
294:10 - um as we need to get to
294:13 - num
294:14 - or the the value that's passed in and
294:16 - then we'll say i plus plus
294:19 - so
294:20 - we start at the value of zero and if we
294:23 - add zero to something that you know adds
294:26 - zero so that doesn't matter so we're
294:27 - fine doing that
294:29 - and then it wants to go until
294:33 - i is less than the number so in this
294:35 - case
294:36 - we may have to actually start this at i
294:40 - equals 1 and then we say i is less than
294:43 - or equal to number
294:45 - so let's go ahead and do that let's
294:47 - start it at 1 and then go up to the
294:50 - number
294:50 - and for starters i just want to print
294:53 - this out to the console and see what we
294:55 - get so i want to print out i each time
294:58 - in the loop and since it's not a very
295:00 - good you know place to do that
295:03 - i'm just going to go over here to
295:05 - my dev tools console
295:08 - and we're going to paste that in there
295:10 - and of course num is not defined because
295:13 - uh we don't have that in passed as a
295:16 - argument or anything to the function so
295:19 - let's just put a random number let's put
295:21 - 10 in there and press enter
295:24 - and what we're going to see is that it
295:26 - counts 1 2 3 4 all the way to 10
295:29 - which since we started it at 1 we get to
295:32 - 10 but if we were to start this at
295:36 - 0 like we normally do for
295:38 - a loop
295:40 - and then we take away this equal sign
295:42 - it's going to go from 0 to 9 and if we
295:44 - add all these numbers
295:46 - it's not going to add up to the right
295:48 - sum so it's very important that we start
295:49 - it at an iteration of 1 and then we go
295:52 - all the way up to 10. so we put that
295:54 - little equal sign we also could have you
295:56 - know deleted that and gone up to less
295:58 - than 11. but you kind of get the point
296:01 - just be conscious of that
296:03 - now all we have to do is
296:05 - make a variable called the sum
296:09 - and we'll
296:10 - initialize that at zero because we start
296:13 - at a sum of zero
296:15 - and then all we have to do
296:18 - is say sum equals sum
296:21 - plus i
296:23 - so when i starts at one so we're saying
296:25 - zero plus one then i increments to two
296:28 - our sum is going to be stored at one
296:31 - so we do one plus two and then we go i
296:34 - equals 3 so our current sum is going to
296:37 - be
296:38 - 3 because we had 1 plus 2 so then 3 plus
296:41 - 3 is 6. so on and so forth
296:44 - so that's going to give us our sum
296:46 - another way we could write this if you
296:47 - were paying attention during the
296:50 - previous video where we went through the
296:52 - mathematical operators you can just do
296:54 - plus equals and then you can say i
296:58 - so what this is going to do is it's
297:00 - going to take some and it's going to say
297:02 - what is the value of the variable called
297:04 - sum
297:05 - and then once it finds that value it
297:07 - says take that value and add the value
297:10 - of i to it so this is an abbreviated
297:13 - version of doing that but again i'm
297:16 - going for readability here so i'm just
297:17 - going to say sum
297:19 - equals sum plus i that's the most clear
297:21 - way that we could probably write that
297:24 - so then we get to the bottom we've gone
297:25 - through all of our iterations so the sum
297:28 - variable should equal
297:30 - the sum of all of those different
297:33 - i values so now we just return the sum
297:36 - let's see what we get
297:39 - we pass both test cases i think we've
297:41 - got it
297:43 - all right so we passed all 105 test
297:45 - cases
297:46 - i'm not sure why anyone would want to
297:48 - write 105 test cases for this but
297:51 - nevertheless
297:52 - let's submit our answer
297:55 - all right let me just check to see where
297:58 - we are within this
298:01 - series we'll go to collections
298:07 - alright so we are on
298:11 - get the mean of an array so let's see
298:13 - where we are here
298:20 - all right so we're right here we've one
298:21 - two three four five six seven eight left
298:25 - all right not bad
298:27 - let's go ahead and train on this so get
298:29 - the mean of an array
298:31 - all right
298:32 - the instructions say it's the academic
298:35 - year's end fateful moment of the school
298:36 - report i'll remember that the averages
298:39 - must be calculated all the students come
298:41 - to you and treat you to calculate their
298:43 - average for them
298:45 - easy you just need to write a script
298:47 - alright when they say a script that's
298:49 - basically just saying you need to write
298:50 - some code
298:52 - return the average of the given array
298:53 - rounded down to its nearest integer
298:57 - the array will never be empty so you're
299:00 - always going to get a number in this
299:02 - array
299:03 - and it says round it down
299:06 - and what i'm going to think about
299:08 - immediately is we're going to use one of
299:10 - those utility functions or the built-in
299:12 - javascript functions
299:14 - so how do we round a number down
299:17 - let's go to the built-in functions we're
299:18 - already looking at the math methods
299:21 - and we can see that if we look at the
299:24 - floor
299:25 - method or function
299:27 - it says it returns the largest integer
299:30 - less than or equal to a number so
299:33 - basically rounds it down so math.floor
299:36 - is going to round our numbers down and
299:38 - if we go to the console here
299:41 - let's go ahead and clear this because we
299:42 - got so much stuff going on
299:44 - and if we say math.floor
299:48 - and then pass in a number 20.5
299:52 - it's going to give us 20. so it just
299:54 - rounded it down so that's basically the
299:56 - round down function we're going to use
299:58 - that in our practice or our challenge
300:00 - here
300:02 - this is kind of a useless comment
300:07 - once again this marks marks right here i
300:10 - don't like the name that they've given
300:11 - this so i'm going to rename it because
300:14 - we can name our parameters anything that
300:16 - we want
300:17 - so i'm going to say
300:19 - score array so we're going to have all
300:21 - the test scores or whatever scores we're
300:24 - doing here
300:25 - now within that array
300:27 - let's see
300:28 - what do we have to do again
300:30 - we have to get the average okay
300:33 - so what is the average
300:34 - the average is going to be the sum
300:37 - of all the numbers
300:40 - divided by the count of all the numbers
300:43 - all right so that's your average formula
300:45 - pretty simple there
300:47 - so to get the count that's the easy part
300:50 - we'll just say the score array
300:54 - dot length so that's going to give us
300:56 - how many numbers are in this array
300:59 - and then for the sum
301:01 - unfortunately this is something i know
301:03 - from
301:04 - just writing code there is no
301:07 - sum function of an array like built into
301:09 - javascript so if you were to go to
301:11 - google
301:13 - let's go to google and search
301:15 - how to sum
301:16 - values in array
301:19 - javascript
301:22 - and let's go to stack overflow
301:25 - you can use this
301:27 - method called reduce and then you can
301:29 - actually use an arrow function
301:32 - but this is rather complicated and it's
301:35 - not really at the level that we're
301:36 - trying to be at right now right now
301:38 - we're just trying to do it in the most
301:40 - straightforward way possible and this
301:42 - kind of comes later when you're more
301:43 - experienced writing javascript code so
301:46 - in our case we can do it a little bit
301:48 - easier with a for loop
301:50 - so all we have to do is write ourselves
301:53 - a loop
301:55 - start it at index of zero we want to go
301:59 - until we've hit all the numbers in the
302:00 - array
302:02 - so
302:03 - we can actually in this case we've
302:05 - already gotten the length of the array
302:07 - so all we have to pass in here is the
302:09 - variable count that we stored that in so
302:12 - that's a way to simplify your code
302:15 - and then finally let's break down here
302:18 - all right so we're going to loop through
302:20 - each of these
302:21 - and what we want to do is add them all
302:24 - together so kind of similar to the last
302:26 - problem we did but in this case
302:28 - we want to assign
302:31 - so we don't want to count
302:33 - we don't want to say the same variable
302:35 - so we'll say the sum equals 0 right now
302:38 - and for each iteration we're just going
302:41 - to say sum equals the existing sum
302:43 - amount so it starts at zero
302:45 - and then each time we iterate through
302:47 - the array to the score array
302:50 - we're going to grab that individual
302:51 - number that we're looking at and add it
302:53 - to the existing sum
302:55 - so now we get down here to the bottom we
302:57 - have the count and we have the sum
303:00 - so let's go ahead and just return the
303:03 - average which is going to be the sum
303:05 - divided by the count
303:07 - let's see what this results in
303:10 - all right so we passed two of them
303:12 - but we failed one of them and the reason
303:15 - is because we forgot to round down
303:18 - i forgot that requirement so all we need
303:20 - to do is surround this with the
303:23 - math.floor function
303:26 - and that should return the right answer
303:28 - i could have broken this out onto the
303:31 - another line just for simplicity so
303:33 - we'll say the average is the sum divided
303:35 - by the count
303:37 - and then we can say rounded
303:40 - down
303:42 - equals math.floor
303:44 - and then pass in the average so take the
303:46 - variable we just assigned here
303:49 - and then we just want to return the
303:51 - rounded
303:53 - down variable and that should give us
303:55 - the same answer hopefully we get this
303:57 - right this time and we did
303:59 - let's attempt it we should be able to
304:01 - get this
304:02 - awesome
304:03 - so that's just how we would solve that
304:05 - problem so as you can see just to take a
304:08 - slight break and and review what we're
304:10 - doing here
304:11 - a big part of solving these problems is
304:13 - um obviously getting the instructions
304:16 - right and understanding what type of
304:18 - input we're going to be receiving into
304:20 - this function
304:22 - the second part
304:23 - with these easier
304:25 - these easier challenges we're going to
304:27 - do a lot of
304:29 - looping through arrays and stuff like
304:31 - that and that is actually really
304:33 - consistent with the real world when
304:35 - we're writing code and building apps
304:38 - we're going to be doing you know stuff
304:39 - like this quite a bit we're not going to
304:41 - be solving useless problems like this
304:43 - but we're going to be looping through
304:45 - arrays a lot and setting counter
304:47 - variables and some variables all that
304:48 - kind of stuff
304:50 - so this is actually going to be testing
304:52 - us on on very useful skills that you're
304:54 - going to use in the future
304:56 - all right so if you remember from that
304:58 - stack overflow question they're talking
305:00 - about reducing it
305:02 - to get the average and you can see that
305:04 - that's exactly what the the top solution
305:07 - or
305:08 - i guess the the best practice solution
305:10 - is doing
305:11 - it's it's basically using marks.reduce
305:14 - so this is going to get us the average
305:16 - then we're going to divide it by the
305:18 - length and then we're going to put it to
305:20 - the floor so basically round it down so
305:23 - that's that's what i was talking about
305:24 - with this stack overflow solution
305:27 - honestly if you ask me it's kind of
305:28 - weird that the array
305:30 - arrays don't have an average method
305:32 - seems like a very common one to have but
305:35 - nevertheless we don't so
305:40 - all right so this challenge looks like
305:42 - we have a picture to look at
305:45 - let's let's do some rock paper scissors
305:47 - okay so it says let's play you have to
305:49 - return which player won
305:51 - in case of a draw return draw
305:54 - okay and this is just a reminder of how
305:58 - rock paper scissors works i think most
306:00 - people would know that
306:02 - immediately when i look at this i'm not
306:05 - a huge fan of this so we're naming the
306:08 - variable that we're storing this arrow
306:10 - function in as rps or rock paper
306:13 - scissors
306:14 - um
306:15 - i'm going to just rename this because
306:19 - we need to have
306:21 - meaningful variables here so we're going
306:23 - to name it rock paper scissors spelled
306:25 - out
306:26 - and then p1 and p2 again these are not
306:29 - very
306:31 - descriptive
306:32 - so
306:33 - let's replace those parameters with
306:36 - something that makes more sense so
306:39 - player one
306:42 - and player two alright so now we've got
306:44 - this written out i like this a little
306:46 - bit better now let's go through our
306:48 - different cases so
306:50 - first thing you might want to do is
306:51 - write some pseudo code so pseudocode is
306:54 - basically
306:55 - um you know just writing out like
306:57 - logically how this should work and maybe
307:00 - this isn't even considered pseudocode
307:02 - but let's write out all of the different
307:04 - scenarios that we can have so
307:07 - we'll say rock is r
307:09 - paper
307:11 - is p
307:12 - and
307:14 - scissors is s
307:16 - all right so for
307:18 - player one
307:21 - over here and then player two
307:27 - and then the result so let's go ahead
307:29 - and write these out
307:31 - we have player one we'll do rock and
307:33 - then since there's three different
307:35 - possibilities we're going to have just a
307:37 - matrix of possibilities so we'll go rock
307:39 - rock rock
307:41 - paper paper paper
307:43 - scissors scissors scissors okay so
307:46 - that's all the possible
307:48 - plays that player one can do and then
307:50 - obviously
307:51 - we will go through with player two over
307:54 - here
307:55 - and we'll alternate so we'll go rock
308:00 - paper
308:03 - scissors
308:04 - and then again we'll go rock
308:21 - okay so in this comment we've written
308:23 - out all of the different possibilities
308:26 - and who's going to win in each case so
308:28 - you can see that there's three draws
308:31 - three times where player two wins and
308:33 - then three times where player one is
308:35 - going to win as we might expect
308:38 - so how can we convey this
308:41 - what we're seeing right here in code and
308:44 - to answer that
308:45 - there's there's a couple methods that
308:47 - you can go about doing it but once again
308:49 - i'm going to try to go with the simplest
308:51 - most straightforward and easy to read
308:53 - method
308:54 - so seeing this written out like this
308:56 - where we have all these different
308:58 - scenarios
309:00 - i think that we can say that we're gonna
309:01 - go with player one and just have three
309:04 - if statements so
309:06 - if player one chooses rock if player one
309:09 - chooses paper or scissors
309:11 - so we'll just put out those if
309:13 - statements real quick so we'll say if
309:15 - player one equals rock
309:19 - and then we're gonna copy that down
309:23 - okay so we got rock paper scissors so
309:25 - these are the three scenarios for player
309:27 - one and then for player two
309:30 - um we're obviously alternating between
309:32 - these so let's say
309:34 - player one plays rock
309:37 - so
309:38 - we could probably put a switch statement
309:41 - in here but i don't know if we need to
309:43 - so we'll just say if player two
309:47 - equals
309:48 - rock
309:50 - then that's going to be a draw so we're
309:52 - going to return draw
309:55 - then we'll say if player 2
309:59 - equals paper
310:01 - then that is going to be return
310:05 - player 2
310:06 - 1.
310:10 - and then finally if player 2 equals
310:14 - scissors
310:16 - then in this case
310:18 - return
310:19 - player 1
310:21 - one
310:22 - okay so now we can basically just copy
310:24 - these same three
310:26 - down into each of these
310:32 - and this is going to work so
310:34 - this one's complete so let's just fill
310:36 - out the rest of the results so player
310:38 - one uh chooses paper player two chooses
310:41 - rock it's going to be player
310:44 - one
310:47 - so if we're going paper against paper
310:49 - it's going to be a draw
310:53 - and then player 2 for that last one
310:56 - all right and then scissors versus rock
310:58 - so we're going to say player
311:02 - 2
311:03 - one
311:06 - this one will be player one and then
311:08 - this one will be a draw
311:12 - let's go ahead and test this
311:16 - looks like we failed um
311:19 - and it's complaining that rps is not
311:21 - defined and that's just because i
311:24 - changed the name of the function at the
311:26 - beginning of this
311:27 - which i guess i can't do after all but i
311:30 - would not prefer to see it like this it
311:32 - should be more descriptive
311:34 - so let's go ahead and test that
311:36 - and it looks like all of them pass so we
311:38 - fulfilled all of our different scenarios
311:40 - that we wrote out for ourselves
311:43 - but i can guarantee you that there is a
311:45 - more efficient solution because
311:47 - in many cases we have like overlapping
311:50 - scenarios but
311:51 - if you're just thinking about this
311:52 - logically and you want the the easiest
311:55 - thing to read that you know even a
311:57 - beginner could go through and understand
311:59 - what it's doing
312:00 - this solution works okay so let's
312:03 - attempt it we passed our test and let's
312:06 - see how someone who is going to optimize
312:09 - it a little bit more would have solved
312:11 - this problem
312:15 - okay so here's the first one
312:18 - so it's saying if p1 is equal to p2 then
312:21 - we return a draw so that eliminates
312:24 - three of our scenarios that we had to
312:26 - write out in separate if statements so
312:28 - that's already reducing our amount of
312:30 - code by a lot
312:32 - then what they're going to do is they're
312:33 - going to put
312:34 - the rules within
312:38 - an object which is actually
312:40 - quite interesting
312:42 - so they're basically saying that for one
312:44 - player here is the rules so
312:47 - rock is always going to beat scissors
312:49 - paper is always going to beat rock and
312:51 - scissors is always going to beat paper
312:53 - so that's very interesting how they're
312:54 - doing that and then
312:57 - they're saying if p2 so player 2
313:00 - is equal to the rules
313:03 - so it's grabbing
313:05 - whatever player 1 responded with
313:08 - and then it's going to grab the value of
313:10 - that and compare it to what player 2
313:13 - responded with yeah so this is a very
313:16 - very smart solution very efficient
313:19 - but at this point after solving
313:21 - however many we've solved here 20 or so
313:24 - my brain's a little shot and we're going
313:26 - with the simple answer here now this is
313:29 - something a little bit closer to what we
313:31 - might have been able to do
313:33 - so we could have combined the conditions
313:35 - into expressions so rather than
313:38 - separating it out into a bunch of if
313:40 - statements
313:41 - we could have combined them together
313:43 - this is how we kind of started doing it
313:45 - so obviously there's a lot of solutions
313:47 - to this problem
313:49 - all right this next one looks relatively
313:51 - straightforward oh it says it's pretty
313:53 - straightforward so your goal is to
313:55 - create a function that removes the first
313:57 - and last characters of a string
313:59 - you're given one parameter the original
314:01 - string you don't have to worry with
314:03 - strings with less than two characters
314:05 - okay so this is a going to be a great
314:09 - time to use one of these built-in
314:11 - functions so let's go to the string
314:13 - methods and see what we have available
314:15 - to us
314:16 - in string so this is what we're looking
314:18 - at
314:20 - so
314:20 - we could use this character at
314:23 - because we could specify the end of the
314:26 - string in the beginning of the string
314:27 - with zero and then you know we could
314:30 - find the length of the string to find
314:32 - the last character that seems a little
314:35 - bit indirect though
314:37 - let's see
314:38 - we can also return a substring this is
314:42 - actually going to be
314:43 - the most direct route here so a
314:46 - substring is going to return the
314:47 - characters in a string beginning at the
314:49 - specified location
314:51 - through the specified number of
314:53 - characters
314:54 - okay so i'll show you how we're going to
314:56 - use this
314:57 - but first let's kind of get an idea of
314:59 - how it works so if we have a string and
315:03 - that string is hello
315:05 - what we can do is say
315:07 - string.substring
315:09 - and maybe i want to start at the very
315:11 - beginning which is going to have an
315:13 - index of 0. now we haven't really talked
315:15 - about this we've always talked about
315:16 - arrays having indexes
315:19 - but strings also do as well you can
315:21 - think of each individual character
315:24 - within the string as being a separate
315:27 - index so h is going to be an index of 0
315:30 - e 1 l 2 so on and so forth
315:34 - so if we're starting at index of 0 that
315:37 - means we're starting at h
315:39 - and then the next
315:41 - argument that we get to pass in
315:43 - according to the instructions
315:45 - that we looked at here i kind of know
315:47 - how to use this already but you could
315:49 - click on here and it's going to say
315:52 - we're going to pass in what we want to
315:53 - start with and then the length that we
315:56 - want to grab so let's go ahead and grab
316:00 - two characters from this string so we
316:03 - start at h and then we grab two full
316:06 - characters starting there and we get he
316:08 - so if we would omit this we're just
316:11 - going to start at 0 or start at the
316:13 - beginning and get all of the characters
316:15 - but if we replace this with 1
316:18 - we're going to get all the characters
316:20 - except for that first one so we're
316:22 - actually
316:23 - partially
316:25 - to our solution
316:26 - we've got the first character removed
316:28 - now we have to figure out how to remove
316:30 - the last character
316:31 - and to do that we have to figure out how
316:34 - long the string is in total
316:36 - and to find out how long the string is i
316:39 - believe there might be
316:40 - i think there's a method for that or a
316:43 - function
316:44 - so there should be yeah string.length so
316:47 - let's try that out
316:49 - let's get rid of this
316:51 - and we'll say string.length
316:53 - is equal to 5. so if we know the length
316:55 - of the string and we know that the
316:57 - string starts at an index of 0 we then
317:00 - know where our sub string is so all we
317:03 - have to do is say
317:05 - string.substring
317:06 - we want to start at index of 1 because
317:09 - that omits the first character of our
317:12 - string
317:13 - and then we want to end or not end we
317:16 - want to grab how many different letters
317:18 - well we want to grab
317:20 - let's see the string dot length
317:22 - minus
317:24 - uh
317:24 - what would it be 2
317:27 - yeah it would be 2 because we've removed
317:29 - the first letter and we want to remove
317:31 - the last letter so
317:33 - we want to grab
317:34 - just the total length of the string
317:36 - minus two okay so that is our solution
317:39 - right there let's just go ahead over to
317:41 - our problem and write it out
317:43 - so this is pretty easy we just return
317:46 - string dot substring or maybe we can
317:48 - break this out so that it's you know
317:50 - clear as day for you uh length of string
317:55 - is going to be equal to string dot
317:57 - length
317:58 - and notice how i have not added these
318:00 - parentheses at the end that is just the
318:02 - nature of this function and i just know
318:05 - this by experience but you'd figure it
318:07 - out uh probably by googling it or at
318:09 - some point after you try doing this so
318:12 - let's say we tried to do this as we
318:15 - would think this makes logical sense but
318:17 - it's going to say string.length is not a
318:19 - function
318:20 - now
318:21 - go ahead and copy this just copy this
318:24 - and paste it into google
318:27 - and you're going to get
318:28 - stack overflow answer that tells you how
318:31 - to do this and it says oh you have to
318:33 - use just dot length and you don't have
318:36 - to add those parentheses so that's how
318:38 - you might figure that out on your own
318:41 - but i happen to know that that is how we
318:43 - write it so string that length
318:45 - and then we need to get the sub string
318:48 - so we'll just return that straight away
318:51 - string.substring
318:52 - we want to start at the first character
318:54 - or actually the second character and
318:56 - then we want to get the length
318:59 - of string
319:00 - minus two characters
319:02 - okay so let's see what we get
319:05 - pass the test as we expected
319:09 - okay let's submit it
319:12 - now as you can see there's a maybe even
319:14 - simpler way to do this so we can use the
319:17 - slice method
319:18 - um
319:19 - if we go to the built-in functions if we
319:21 - would have looked so we'd grab the
319:24 - substring method but there is a slice
319:26 - method
319:27 - which is right above it so extracts a
319:29 - section of a string and returns a new
319:31 - string well in this case i was just not
319:34 - being smart i overlooked that and didn't
319:37 - realize but if you just read through
319:38 - these this would obviously be a better
319:41 - selection than substring but it does
319:43 - give us the idea that you can solve this
319:46 - in multiple different ways
319:48 - and i'm sure that at some point yep down
319:50 - here someone solved it the way that we
319:52 - solved it
319:53 - in this case they're doing string dot
319:55 - length minus one
319:57 - which is very interesting
320:00 - oh so this is actually not the same so
320:02 - substring
320:04 - is different than the one that we used
320:06 - as you can see we have the one that we
320:08 - used and then substring so these are two
320:11 - different methods they work kind of
320:12 - similar
320:14 - a little bit different so that's why
320:15 - that one works that way but
320:18 - you can see that
320:19 - this person used exactly what we did
320:22 - so multiple ways to solve a problem
320:24 - let's see if we can blow through the
320:26 - last couple of these
320:28 - so let's go to sum of positive you get
320:31 - an array of numbers return the sum of
320:33 - all of the positive ones
320:36 - okay
320:40 - so we're going to loop through this
320:48 - we're going to grab every
320:51 - number from that array
320:53 - and then we're going to say if
320:55 - the individual number that we have
320:57 - grabbed
320:59 - is greater than
321:01 - or no yeah we'll say greater
321:04 - or equal to zero
321:06 - um
321:08 - i guess we don't even need that we just
321:09 - say greater than zero
321:11 - then we want to sum it but we need to
321:13 - have a sum variable so let's initialize
321:16 - a sum variable
321:17 - and set it equal to zero and then we'll
321:20 - say if it's a positive number we're
321:22 - going to say sum equals sum plus the
321:26 - number that we're using there
321:28 - and then at the bottom we just return
321:30 - the sum variable
321:31 - and we should get the correct answer
321:35 - past it all this is pretty similar to a
321:36 - previous question that we did
321:39 - in this video so we'll submit this
321:45 - as you can see this is a well commented
321:48 - solution that is kind of the same thing
321:50 - that we just did so
321:51 - we didn't do too bad now obviously you
321:53 - can use a simpler method so reduce
321:56 - similar to how you'd find the average
321:59 - of an array
322:00 - but once again this is this is pretty
322:03 - complex like you're
322:04 - using a pretty complex um
322:07 - function
322:08 - on an array
322:10 - and you're using a ternary operator
322:12 - within here so that's you know that is
322:14 - optimized to the max
322:20 - so we got some basic mathematical
322:22 - operations let's go ahead and go here it
322:25 - says your task is to create a function
322:27 - that does four basic math operations
322:30 - it should take three
322:32 - oper arguments so we want the operation
322:35 - which is going to tell us are we adding
322:37 - subtracting multiplying or dividing and
322:39 - then the two values we're doing so this
322:41 - is this rather simple
322:43 - this person has formatted this function
322:45 - a little differently
322:47 - than we're used to this is just a
322:49 - different way to format it i'm just
322:50 - going to bring it back to how we're used
322:52 - to seeing it doesn't really matter
322:54 - okay so the basic operation so the first
322:57 - thing we want to do is write a switch
322:59 - statement
323:00 - you're probably getting used to this at
323:02 - this point
323:02 - and for the switch statement we want to
323:05 - pass in the operation
323:06 - so it's going to evaluate that and see
323:09 - what the operation is and in the case
323:11 - that the operation is a plus
323:14 - we'll do something add a break statement
323:17 - and then we'll fill in the rest of these
323:19 - with
323:21 - case statements
323:36 - and then i believe all we have to do is
323:38 - just fill these in so we can return
323:41 - from here or we could set it equal to
323:46 - you know a variable so since we added
323:48 - the break statements
323:50 - let's go ahead and just
323:51 - initialize a variable we'll call it
323:54 - result
323:55 - and we're going to say the result is
323:58 - equal to value 1
324:00 - plus value 2.
324:02 - we can copy this same line down
324:08 - and then at the end we can return the
324:10 - result whatever we get
324:12 - so let's indent these correctly doesn't
324:15 - really matter just for readability and
324:17 - then we'll just change the sign here so
324:19 - we can put a minus sign here we can put
324:23 - multiplication sign here and a division
324:26 - sign here
324:27 - all right let's go ahead and attempt it
324:31 - all right that worked
324:34 - i have a feeling that someone solved
324:36 - this in one line
324:40 - we'll see this is how we did it
324:43 - yep right here so this
324:46 - this is very
324:48 - simplified but let me explain what this
324:51 - is doing so
324:52 - if we type in eval
324:55 - let's look at
324:57 - javascript eval
325:00 - and we're going to learn about this a
325:02 - little bit so what this does the eval
325:04 - function evaluates or executes an
325:07 - argument
325:08 - so if we have three uh arguments passed
325:12 - in we have the operation we have the
325:14 - first number and the second number and
325:16 - it's always going to be the same
325:18 - um for each one so each one we're just
325:21 - substituting this operation
325:24 - well you might think oh hey let's or
325:27 - let's go ahead and train again on this
325:29 - one so that i can show you exactly what
325:30 - i'm talking about so let's go up here
325:34 - and in this case we might just say
325:36 - return
325:37 - the op or the value 1 and then the
325:40 - operation
325:42 - and then value 2. now this is going to
325:45 - obviously not work that's not valid
325:48 - javascript right here
325:49 - and all we're trying to do is we're
325:51 - trying to turn this operation into a
325:54 - javascript operator and all we have to
325:56 - do to make that happen
325:59 - is surround it in this eval statement
326:02 - right here
326:03 - and basically what it's going to do i
326:05 - believe you separate it by comma
326:07 - separated values
326:09 - or no you put it in one big string
326:11 - so let's go ahead and create our
326:14 - string
326:15 - so our operation
326:19 - string is going to equal
326:21 - value 1 plus
326:23 - operation plus value 2.
326:27 - and in this case some of these are going
326:28 - to be numbers so we
326:31 - yep that should work because value 1 is
326:33 - a string so everything else is going to
326:34 - be
326:36 - coerced into a string so that should
326:38 - work so operation
326:40 - plus value one value two
326:44 - and then i want to just console.log that
326:46 - so that we can see what it represents
326:48 - here
326:49 - so we'll console log that and comment
326:52 - out this return value for just a second
326:55 - so let's test that
326:57 - and you're going to see that the console
326:59 - log is giving us the following
327:02 - operations here and if you
327:05 - you know look at these these look like
327:07 - you know valid math operations but right
327:10 - now we just have them as a string but
327:12 - once we enclose it in
327:15 - the eval
327:17 - function
327:18 - so we say eval and then we pass in our
327:21 - operation string
327:22 - it's going to evaluate that string so in
327:25 - other words it's going to evaluate the
327:27 - string of four plus seven
327:30 - and then we can just return the result
327:34 - and this should work the same as our
327:36 - much longer code that we wrote
327:38 - so let's let's go back and
327:41 - just see what that one person wrote
327:43 - there
327:44 - they just you know abbreviated
327:46 - everything but did the same exact thing
327:48 - so
327:49 - just another way to solve it more
327:51 - efficient
327:52 - next up we have a string repeat
327:56 - write a function called repeat string
327:59 - which repeats the given string
328:02 - source exactly count number of times
328:05 - okay so this is what we're going to get
328:07 - they're going to pass in
328:08 - we want to repeat it six times or five
328:11 - times and here's the string that we want
328:13 - to repeat
328:14 - this is another classic example of where
328:17 - you can use
328:18 - a loop so we'll just set a loop equal to
328:24 - just the basic syntax
328:27 - we want to go until i is less than the i
328:31 - is less than n so
328:32 - let me replace these
328:34 - number of
328:36 - repeats
328:38 - and then the string that we want to
328:39 - repeat so
328:41 - number of repeats
328:48 - so we're looping through this and
328:50 - let's go ahead and
328:52 - make a starter string
328:56 - and we'll just set that equal to just an
328:58 - empty string here
329:00 - now all we're going to do is concatenate
329:02 - strings as many times as this loop goes
329:05 - so we'll just say starter
329:07 - string equals whatever exists in that
329:10 - starter string plus
329:12 - the
329:13 - string value
329:15 - and this should return the correct
329:18 - answer for us
329:26 - it works
329:28 - pretty consistent with what we've done
329:30 - in previous problems with the loop and
329:32 - then we have a
329:34 - variable up here that stores
329:37 - some sort of value that we later return
329:40 - after we've modified it several times
329:42 - with
329:43 - values in a loop
329:47 - and of course there's a an easier
329:49 - solution so you can see down here that
329:52 - we can just use the repeat function i
329:54 - didn't actually know this was a function
329:58 - but if you go to the
329:59 - string methods
330:01 - there should be some sort of repeat
330:05 - so let's see
330:07 - i'm not seeing it right now
330:10 - what are they doing here
330:16 - so that is a string method
330:21 - did i miss it
330:33 - let's search for it on the page
330:38 - don't see it here this might be a new
330:40 - method
330:54 - okay so maybe maybe use w3schools that's
330:57 - more updated
330:58 - that must have been a recently added
331:00 - method of some sort
331:08 - yeah it looks like this came out in es6
331:11 - which is the newest version of
331:13 - javascript uh spec so that's probably
331:16 - why it's not on the other
331:18 - site there
331:19 - interesting so you can use a repeat
331:21 - string to
331:22 - repeat a string number of times very
331:25 - interesting okay go to the next problem
331:30 - convert a string to an array this should
331:31 - be very easy because we've already done
331:34 - it
331:35 - at least i think
331:36 - we've done so many problems at this
331:38 - point
331:40 - i think all we have to do is say string
331:43 - dot
331:45 - split
331:46 - and then we split it with
331:49 - an empty character
331:53 - oh that's not how we do it okay
331:56 - we don't
331:58 - want to split it like that so let's see
332:07 - oh okay so we want to split it by spaces
332:11 - so there's a space in between these
332:13 - words
332:14 - so all we have to do is
332:16 - press the spacebar in between these
332:18 - quotes
332:18 - and it adds a space in here that we want
332:21 - to split it by
332:22 - and this one does pass
332:34 - you can see that pretty much everyone
332:35 - solved it the exact same way here
332:46 - be getting to the end of these problems
332:47 - here congrats if you are still around
332:49 - and
332:50 - solving these problems with me
332:52 - i would presume that
332:54 - very few people would be
333:00 - so remove string spaces
333:05 - so remove the spaces from the string
333:06 - then return the resultant string now
333:09 - this one feels like there is some sort
333:11 - of built-in method that we can use since
333:14 - we
333:15 - didn't find the newer methods on
333:17 - tutorials point let's go to
333:20 - w3schools
333:22 - i'm thinking something called trim yeah
333:25 - like trim might do this
333:27 - says remove white space from both sides
333:29 - of a string
333:31 - i think that's what we're looking for
333:32 - here
333:33 - so let's go ahead and return
333:36 - x which should be a string like i don't
333:38 - know why they're calling it x here just
333:41 - call it a string
333:42 - so string dot
333:44 - trim
333:45 - see what that does
333:49 - this is not going to work
333:51 - looks like there's some numbers
333:53 - put in
333:54 - here and it looks like
333:59 - the trim method is only going to do this
334:01 - at the end of the string so let's try
334:03 - this out in our
334:05 - dev console
334:10 - let's do a test string
334:12 - uh string that has spaces between
334:20 - oh i'm just blanking out completely i
334:22 - got to name this variable
334:24 - so string equals that
334:27 - sorry about that i'm kind of losing it
334:28 - here all right so if we use string.trim
334:33 - it looks like what's happening is it's
334:36 - only removing the spaces at the end kind
334:38 - of as this
334:40 - tells us so i wonder if there's another
334:42 - method
334:44 - i don't know if there is
334:51 - so what we're going to do is we're just
334:53 - going to combine the methods together so
334:55 - first
334:56 - maybe we put this into a an array
334:59 - so we'll say string.split and we want to
335:02 - split it by a space
335:04 - so now that we have everything split out
335:07 - now we want to go through each of these
335:10 - in the array
335:13 - and
335:14 - we want to remove the white spaces
335:16 - around them
335:17 - so let's let's go ahead and write this
335:19 - code out and see what we get
335:23 - so we'll turn it into an array so we'll
335:25 - split it by
335:26 - spaces
335:28 - and then we're going to loop through
335:29 - this array
335:35 - as we've been doing
335:38 - and for each item in the array we're
335:40 - going to
335:42 - remove the spaces around it and we're
335:44 - not actually going to build a new array
335:47 - so this is going to introduce the push
335:49 - method so
335:51 - we'll say new array.push
335:53 - and what that's going to do is add an
335:56 - element to the end of the array so right
335:58 - now it is an empty array and we can push
336:02 - items into the array and what we want to
336:04 - push
336:05 - is going to be the trimmed version of
336:08 - each string that we have or each
336:11 - different array item which just happens
336:13 - to be the subsets of that original
336:15 - string so in this case
336:17 - we'll say trimmed string just breaking
336:20 - this out for clarity
336:22 - is going to be
336:24 - equal to
336:25 - the
336:26 - [Music]
336:27 - what are we looking at so the
336:28 - array at index i
336:32 - dot trim so now we know that this string
336:34 - is trimmed together there are no spaces
336:37 - anywhere and now we're going to push
336:39 - this
336:40 - into the array so at this point let's go
336:44 - ahead and console.log that new array
336:46 - that we're getting
336:49 - so let's test that
336:51 - and you're going to see that we have an
336:53 - array in every case that's going to have
336:56 - you know the characters with no spaces
336:58 - around it and in this case it's just an
337:00 - empty string that's not even a space or
337:02 - anything so if we combine that it's not
337:05 - going to add any spaces of any kind
337:08 - at this point we can use
337:10 - a method called join
337:12 - so all we have to do is
337:15 - um
337:16 - our final string is going to be equal to
337:19 - our new array.join
337:21 - and we want to join it by that empty
337:23 - character there
337:24 - and at this point we can return the
337:27 - final string and i think that that
337:29 - should solve the problem
337:31 - all right so we passed it looks good
337:35 - okay i think we're closing in on the end
337:37 - here
337:39 - beginner lost without a map
337:41 - given an array of integers return a new
337:43 - array with each value doubled
337:45 - okay so there's actually um it says for
337:48 - the beginner try to use the map method
337:50 - and this is basically just saying um to
337:54 - you as the beginner like hey you could
337:56 - solve this in you know an easier way but
337:59 - go ahead and try to use the map method
338:01 - so we'll we'll do that we might as well
338:03 - so we're going to get
338:05 - some array i'm just going to
338:07 - rename that so that it's not
338:09 - undescriptive
338:10 - and then we're going to go and look at
338:12 - the map method
338:14 - and this actually belongs to
338:16 - arrays so we go to javascript arrays
338:19 - and then we go down to the array methods
338:21 - or functions and you're going to see
338:23 - this one called map down here
338:26 - and what this map
338:27 - function is going to do is it's going to
338:30 - take the original value in the array and
338:33 - it's going to apply a transformation to
338:35 - it and that transformation is just
338:38 - basically going to
338:40 - return a brand new array where every
338:43 - unit of that array has been transformed
338:45 - so previously we have been going through
338:48 - these for loops and storing things in
338:51 - variables and in creating new variables
338:54 - and stuff like that but we could always
338:56 - use this map method
338:58 - so let's go ahead and try it so we're
339:00 - going to return
339:01 - the array
339:03 - dot map and then in this case we
339:05 - actually have to pass in an arrow
339:07 - function
339:08 - so this this is what we call like a a
339:10 - callback function we'll get into this
339:13 - a little bit later
339:14 - but we're going to have a callback
339:16 - function so this right here let's just
339:19 - break it out you know into a separate
339:22 - space so you can see what we're doing
339:26 - so all we're doing is writing an
339:28 - anonymous function or a arrow function
339:31 - and then within that arrow function
339:33 - we're going to break down into the new
339:35 - line and we're going to return a value
339:38 - so this is a very weird
339:40 - um setup here so i'm actually going to
339:42 - um
339:44 - i'm going to go ahead and
339:46 - remove this so i'm going to say our
339:48 - result array is equal to whatever this
339:52 - map function returns and then we're
339:54 - going to return the result later so that
339:56 - we don't have that weird syntax
339:58 - so basically whatever we return from
340:00 - this map method or this this function
340:04 - that's actually embedded within the map
340:06 - method
340:07 - whatever we return is going to be the
340:08 - transformation
340:10 - and then whatever we pass into it so
340:13 - we can just provide a parameter so
340:16 - array item is going to be
340:19 - what's going to be passed in there into
340:21 - there as an argument so we're going to
340:23 - just say array item multiplied by 2
340:26 - which is what they want us to do with
340:27 - each value so this is going to return us
340:31 - an array with the values doubled in it
340:33 - and we return the result
340:36 - we passed
340:37 - i would suggest reading up on that
340:39 - method trying it out a little bit
340:42 - but just realized that what we've done
340:44 - here is we've put a function
340:46 - within
340:48 - this other function that takes that
340:50 - function as an argument so
340:52 - um to to summarize this we've basically
340:55 - passed in a function
340:57 - as an argument to another function and
340:59 - then that function actually executes our
341:02 - function that we passed in so it's it's
341:04 - a bit of a tongue twister but you will
341:06 - understand this with due time and i
341:08 - would definitely put this on your radar
341:10 - as something that's very useful in
341:12 - javascript
341:14 - at this point i'm doubting myself for
341:16 - picking 25
341:18 - problems this is exhausting but
341:21 - again congrats if you're still around
341:23 - let's keep going
341:26 - all right is he going to survive a hero
341:28 - is on his way to the castle to complete
341:30 - his mission however he's been told that
341:32 - the castle is surrounded with a couple
341:33 - of powerful dragons each dragon takes
341:35 - two bullets to be defeated our hero has
341:37 - no idea how many bullets he should carry
341:40 - assuming he's going to grab a specific
341:42 - given
341:43 - number of bullets and move forward to
341:45 - fight another specific given number of
341:47 - dragons
341:48 - will he survive
341:50 - return true if yes false otherwise
341:55 - okay
341:58 - so basically what this is saying to us
342:01 - is that we don't know how many bullets
342:03 - are coming and we don't know how many
342:05 - dragons are coming either but we still
342:08 - have to figure out if this hero is going
342:11 - to defeat the dragon
342:13 - so let's see how we do that the rule is
342:15 - this each dragon takes two bullets to be
342:18 - defeated okay
342:21 - so basically what we could say is if the
342:23 - bullets is
342:25 - double or more than the amount of
342:27 - dragons then we return true
342:29 - so we'll basically just say in in this
342:31 - case let's go ahead and use the ternary
342:34 - operator i know it's late in the video
342:36 - brain's probably fried at this point but
342:38 - let's use the ternary operator we'll
342:40 - store it in a result variable
342:43 - so we'll say if
342:44 - the
342:46 - bullets
342:47 - divided by dragons
342:50 - is greater or equal to two
342:53 - then
342:54 - we're going to return true
342:56 - otherwise we'll return false
342:58 - and then we can just return the result
343:01 - but we don't even need to do that we can
343:03 - just return that ternary operator
343:07 - so let's go to the beginning
343:11 - and hit return so basically what it's
343:13 - doing is it's looking at this expression
343:16 - and it's
343:17 - evaluating whether that expression is
343:20 - true or false
343:22 - and then if it's true we return true if
343:25 - it's false we return false so there's
343:28 - actually some duplication going on here
343:30 - we don't even need this ternary operator
343:32 - in the first place all we have to do is
343:35 - return that expression because if this
343:38 - uh evaluates to true then the hero
343:41 - defeats the dragon if not then we return
343:44 - false so we should be able to just do
343:45 - this
343:48 - we passed it and it works so that's how
343:50 - you would
343:50 - solve this in the most simple way
343:52 - possible and honestly it's just a math
343:54 - problem plus a javascript expression
343:57 - with some operators
344:00 - array plus an array so let's train again
344:03 - i'm new to coding and now i want to get
344:05 - the sum of two arrays actually the sum
344:07 - of all their elements i'll appreciate
344:09 - for your help
344:10 - huh it looks like this person
344:12 - was not writing a challenge they were
344:15 - asking a question okay
344:17 - p.s each array includes only integer
344:19 - numbers output is a number two
344:23 - maybe they weren't asking a question
344:25 - very very weird wording for this
344:30 - okay so this is not going to work let's
344:31 - go ahead and test it as it's written
344:34 - you can't just add an array together
344:37 - but what you can do is you can loop
344:39 - through each
344:41 - value of the array and this is actually
344:43 - a perfect
344:44 - time to talk about embedded for loops
344:49 - let's go ahead and do that
344:50 - first we're going to write our outer for
344:52 - loop which is just what we've been
344:54 - writing all this time
344:57 - so we're going to say
344:58 - until i is less than array.1 or
345:01 - array1.length
345:03 - i plus plus
345:05 - and then we go into it okay
345:07 - but we also want to grab
345:10 - the values of array two so basically
345:12 - what we're trying to do here
345:14 - let's say that we have an array of one
345:16 - two three
345:17 - and an array of two
345:20 - three
345:21 - 4. our resultant array
345:23 - should be
345:25 - 3
345:26 - 5
345:27 - 7 because we added
345:29 - we added the number at index 0 for both
345:32 - arrays then we added the number at index
345:34 - 1 for both arrays and then we put it
345:37 - into a new one so that's what we're
345:39 - going for i'm going to leave this down
345:40 - here for a second just for our reference
345:43 - but in this first loop all we're able to
345:46 - get is
345:48 - actually we don't we don't need an
345:49 - embedded for loop
345:51 - i don't know what i was thinking there
345:53 - all we have to do is this we just have
345:55 - to say
345:56 - um
345:57 - array 1 value is going to be equal to
346:00 - array 1
346:02 - i
346:02 - and then we can come down and say array
346:05 - 2 value
346:06 - is array 2i
346:08 - all right and then we want to
346:11 - say added value something like that so
346:14 - we'll say array 1 value plus
346:17 - array 2 value
346:19 - that gives us the sum and now we want to
346:21 - start building
346:23 - a new array so new array equals
346:27 - something empty
346:28 - and like we did in a previous
346:31 - problem we can use the
346:33 - push method to
346:35 - push a new value to that array so
346:38 - we'll just say the added value here
346:41 - and now when we get done with this for
346:43 - loop right here we should have this new
346:46 - array populated with our new value
346:48 - which should be this resultant summed
346:50 - array
346:52 - so let's return
346:54 - the new array
346:56 - and see how it goes
346:59 - looks like we failed in in a lot of
347:02 - cases
347:03 - okay let's see why
347:07 - oh
347:09 - so i misinterpreted this question
347:11 - entirely
347:13 - we want to actually
347:16 - give a single number okay
347:19 - so i'm new to okay blah blah
347:22 - so we got two arrays we want to sum all
347:24 - of their elements
347:26 - okay so we don't need a new array
347:29 - we just need a sum variable which is
347:31 - going to start at zero
347:33 - so the added value we can keep that
347:36 - then we can just say the sum equals the
347:38 - sum plus the added value
347:42 - and then return
347:44 - the sum at the end
347:47 - this time we passed it okay just misread
347:50 - the question and honestly i i don't know
347:52 - if this was the best question to choose
347:58 - i think this is our last uh
348:01 - easy question
348:03 - coming up
348:05 - maybe so
348:06 - alright so this one has some nice clear
348:08 - instructions that's nice so the
348:10 - introduction the first century spans
348:11 - from year
348:13 - one up to and including the year 100 the
348:15 - second from year 101
348:17 - up to and including the year 200.
348:20 - the task is given a year return the
348:23 - century it is in
348:25 - so
348:26 - the century of 1705 returns the 18th
348:30 - century okay
348:32 - i mean this is just
348:33 - pretty basic so
348:35 - let's go ahead and solve it
348:39 - now it looks like the catch here is
348:41 - going to be
348:42 - these two examples so 1900 is going to
348:46 - be the 19th century
348:48 - while
348:48 - 1601 is going to be the 17th so
348:52 - like it says if it's
348:54 - you know one greater than the even year
348:57 - then we go up a century okay
348:59 - i believe we can use some sort of
349:01 - modulus operator here
349:04 - let me try
349:05 - um so let's let's say that we have a
349:07 - century of 1901.
349:10 - um
349:11 - let's go ahead and do modulus we'll just
349:14 - start with 100.
349:16 - okay so a hundred goes into 1901
349:21 - uh
349:22 - well it would be
349:24 - what 19 times with a remainder of 1.
349:28 - but if we had 1900
349:31 - modulus 100 we get zero
349:35 - okay so that's interesting so what we
349:37 - could do is we say if
349:39 - the century we have
349:42 - modulus 100 returns a zero then we want
349:45 - to just grab the first two letters
349:48 - or first two digits of that number and
349:51 - return it
349:52 - so
349:53 - in this case 1900 we just want to return
349:56 - 19 i believe
349:59 - right so we just want to return 19. so
350:02 - let's just say that this is this may be
350:04 - a bad solution but let's try it so
350:07 - if the year
350:09 - modulus 100
350:13 - equals
350:14 - zero then that means it's an even
350:18 - even century so we're going to just say
350:21 - we want to return the first two digits
350:23 - and to do that
350:25 - we can
350:26 - let's go ahead and look at some of the
350:28 - the number values
350:40 - okay so pretty much what we're gonna
350:41 - have to do is we're gonna have to
350:42 - convert it to a string grab the first
350:45 - two
350:46 - you know digits or characters and then
350:48 - convert it back to a number
350:50 - this may be an indirect way to do it but
350:52 - we'll try it anyway so we'll say year
350:55 - to string then i'm going to chain
350:59 - chain something on here and i want to
351:00 - grab the
351:01 - sub string in this case i want to start
351:04 - at 0 and grab 2 characters
351:07 - and then i want to turn this entire
351:09 - thing into a number so we'll just cast
351:11 - it into a number
351:13 - this way
351:14 - and let's go ahead and test that to see
351:16 - if we solved a couple of these
351:18 - excellent so we solved the ones where
351:20 - it's an even
351:22 - now if it's not then we know that it's
351:24 - not an even year
351:26 - so it's always going to be one greater
351:30 - so 1705 returns 18. so again we can grab
351:34 - that substring
351:36 - so we're going to grab first two
351:39 - digits it's going to be equal to the
351:41 - year
351:42 - two string
351:45 - substring
351:47 - zero two so that gives us the first two
351:49 - digits
351:50 - and we wanna keep that as a number
351:52 - and since we're repeating ourselves here
351:55 - let's go ahead and put this at the top
351:56 - of our code
351:58 - and just get that from the very
351:59 - beginning and now we can take this
352:02 - expression here
352:03 - and replace
352:05 - it in here so all we have to say is
352:08 - first two digits so now that works the
352:11 - same we're turning that into a number
352:13 - but down here what we want to first do
352:16 - is we want to return a number of course
352:21 - well it's already okay never mind
352:25 - so this is going to give us a string we
352:27 - need to return a number so
352:28 - um the first thing we need to do is turn
352:31 - that into a number
352:32 - by saying first
352:34 - two digits and then we want to add since
352:38 - this is a number then we want to add one
352:40 - so i think this may work actually
352:47 - okay so the problem here is the test for
352:50 - year 89.
352:51 - since we're doing modulus 100
352:54 - of course this is not going to work
352:57 - if it's less than 100.
353:05 - so in this one edge case we could just
353:07 - put this at the top
353:09 - at the very top and say
353:11 - if the year is less than 100
353:15 - we just return 1.
353:17 - so that takes care of that case and we
353:19 - test it
353:20 - should pass all of them we'll see if it
353:22 - passes all the tests
353:24 - okay so clearly that was not that was a
353:26 - quick fix solution it didn't actually
353:28 - solve
353:29 - our greater problems so let's dig in to
353:31 - see
353:32 - what we're dealing with here obviously
353:35 - there are larger numbers at stake and
353:37 - much smaller numbers at stake
353:39 - so our
353:41 - attempt at using modulus 100 is not
353:44 - going to work very well
353:48 - so i believe our solution may be close
353:51 - i'm actually going to go ahead and
353:54 - see if there's something in the
353:56 - discussion down here so you can always
353:57 - look at the comments and suggestions
354:00 - to see what other people are thinking
354:02 - about
354:04 - we'll see
354:07 - okay these are very useless
354:20 - okay so this is not really helping us
354:22 - that much
354:33 - at this point my brain's so fried we're
354:35 - gonna go ahead and search this on google
354:37 - stack overflow
354:39 - uh we'll just
354:40 - say century
354:43 - from year
354:45 - javascript
354:47 - stack overflow
354:48 - just curious to see how other people
354:51 - solve this
355:01 - okay so
355:03 - it looks like what they're doing here is
355:05 - using the
355:06 - math.ceiling function
355:09 - let's see what this
355:11 - is
355:24 - okay so here's the the ceiling function
355:26 - it returns x rounded upwards to the
355:28 - nearest integer
355:31 - so we'll go back and
355:33 - attempt this again and see all those
355:35 - different
355:36 - test cases so let's just grab one of
355:38 - them here
355:39 - so 400 390
355:42 - and let's see what math.ceiling
355:46 - returns for that
355:50 - oh and we have to divide it by a hundred
355:52 - so
355:54 - let's do that again
355:56 - so
355:57 - 4004
355:59 - which is what we're trying to get at
356:01 - because
356:02 - we round this up
356:05 - to the nearest hundred
356:07 - okay so that's basically the answer then
356:09 - um couldn't think of that on my own here
356:12 - today
356:13 - so
356:14 - let's go ahead and try that um
356:16 - instead of all this stuff let's just
356:18 - return it math.ceiling
356:21 - is year
356:22 - over a hundred and this may not
356:25 - may not get the cases where it's an even
356:28 - or maybe it does let's attempt it
356:31 - all right there you go so that's that's
356:33 - very clever but um
356:35 - i guess in this case when i was trying
356:37 - to solve it here
356:39 - um i did not
356:41 - go through the scenario in my head where
356:43 - the years would be you know greater than
356:46 - say
356:47 - 1720 or 1930.
356:50 - like i didn't think about what if we
356:52 - have like year 20 000
356:55 - something like that so in this case
356:57 - it's a little bit of the instructions
356:59 - like they didn't
357:01 - you know say a whole lot about
357:03 - what the input was going to be they
357:05 - didn't say that we're going to you know
357:06 - go up to a huge
357:08 - input like they ended up doing so that's
357:11 - partially the instructions and then it's
357:13 - partially you know i should have thought
357:15 - of all the edge cases and should have
357:17 - thought of the fact that the number
357:19 - could be greater than four digits like
357:21 - this so
357:22 - we solved the problem with
357:25 - a specific set of input but not all of
357:28 - the possible input and that's just
357:30 - that's very common when you're solving
357:32 - coding challenges you always have to
357:33 - think of the edge cases so while i
357:35 - didn't get this the first time it's
357:37 - definitely a good learning opportunity
357:40 - just to see
357:41 - you know how it is when you're trying to
357:43 - solve coding challenges
357:45 - all right for this one we're converting
357:47 - cat years and dog years in human years
357:50 - so
357:52 - we're only going to get whole numbers
357:55 - and we're only going to get human years
357:57 - one or greater
358:01 - okay so 15 cat years for the first year
358:04 - nine cat years for the second year and
358:06 - four
358:07 - for each year after that
358:10 - 15 dog years for the first year nine for
358:13 - the second and five after that so notice
358:16 - we have some similarities in the first
358:18 - two they both
358:20 - go up by
358:21 - 15 and nine in the first two years
358:25 - okay so what are we getting here what's
358:27 - the input
358:29 - um i have a cat and a dog i got them at
358:31 - the same time as getting a puppy
358:33 - that was human years ago so we're going
358:35 - to get a number passed in here
358:39 - return their respective ages now okay
358:43 - so the easiest one
358:46 - is going to be
358:48 - human years
358:50 - plus
358:51 - or no we just say
358:53 - human years in there so that should be
358:55 - the answer to the first part of the
358:57 - array the second two are a little bit
358:59 - harder so we have to get the dogs and
359:01 - the cats
359:03 - all right so the first thing that we
359:04 - want to do
359:08 - let's see
359:09 - let's say human years is one well in
359:12 - that case we're going to return
359:14 - 15 for both of them
359:16 - so
359:20 - let's make a variable here
359:26 - and then we'll say if
359:28 - human years equals 1
359:32 - we want to return
359:34 - this right here so we're going to say
359:36 - human years
359:37 - and then we're going to say the cat's
359:39 - age
359:40 - is going to be
359:41 - what
359:43 - 15
359:45 - and the dog's age
359:47 - will be 15.
359:49 - if the human years are equal to two
359:54 - let's see
359:56 - we're going to add 9 to that so we're
359:58 - going to return something very similar
360:00 - but this k this time we're going to
360:02 - return 24 here
360:07 - all right and then the remainder we're
360:09 - going to say
360:11 - in the first two years we get to 24 for
360:14 - both the dog and the cat but then they
360:16 - increment by different amounts
360:18 - so how do we solve this
360:24 - okay so so let's say
360:27 - cat
360:28 - excess years
360:31 - is going to be equal to
360:35 - human years
360:36 - minus two
360:40 - or we'll just say
360:41 - we can just say excess years and use
360:43 - this for both
360:44 - so we're basically trying to find
360:46 - you know how many years above the first
360:49 - two years
360:50 - are we looking at here
360:52 - and then from there we can probably just
360:54 - multiply it by
360:56 - whatever this multiple is so
360:59 - we'll say
361:01 - extra
361:02 - dog or no we'll start with
361:04 - cat extra cat years
361:07 - equals excess years times
361:11 - what four
361:12 - and then for the dog years we're gonna
361:14 - do five so we're just going to make a
361:16 - new variable and say extra dog years
361:20 - so then
361:21 - we just return at the bottom here if we
361:23 - have not hit either of these
361:26 - logical statements
361:28 - because if we return from here
361:30 - everything's done we don't reach any of
361:32 - the code below but if we have not
361:34 - reached either these code paths we're
361:36 - going to reach this
361:38 - and we're going to always return human
361:40 - years just as the number of years but
361:42 - then we're going to say
361:44 - we know that we've got at least two
361:46 - years if we reach this code so we'll say
361:48 - 24 plus the extra
361:51 - cat years
361:53 - and then we'll say
361:55 - 24 plus extra dog years
361:59 - let's see if this gets it right
362:03 - awesome we got it right so that's how i
362:05 - would solve that problem let's see
362:08 - how
362:09 - other people would solve it
362:11 - okay so this is interesting it's a
362:13 - similar concept we asked if it was the
362:16 - uh year one or year two and then we
362:18 - basically just
362:20 - did the same thing just in less code so
362:23 - i feel pretty good about that
362:25 - we did pretty good on that one so
362:27 - especially
362:29 - not being able to think i've been going
362:31 - at this for a while now
362:33 - all right i think we have like two more
362:35 - in total i'm gonna make it to the end
362:39 - our football team finished the
362:40 - championship the result of each match
362:42 - looks like x colon y results of all the
362:46 - matches are recorded in the collection
362:48 - all right write a function that takes
362:50 - such collection and counts the points of
362:52 - our team in the championship
362:55 - the rules for counting points if x is
362:58 - greater than y three points if x is less
363:00 - than y zero points if they're equal one
363:03 - point
363:05 - there are 10 matches total
363:08 - and x is going to be between 0 and 4
363:11 - or not between it's going to be
363:12 - inclusive of 0 2 4
363:15 - and then y is going to be 0 2 4.
363:18 - okay
363:22 - so this games let's just make this more
363:24 - specific that's going to be a games
363:26 - array
363:30 - we'll initialize by saying
363:32 - let total points equal zero
363:35 - and we're going to set up a for loop
363:50 - all right so we're going to go through
363:51 - each and we expect each value to equal
363:54 - something like this
363:56 - so
363:58 - we'll just say value
364:00 - and that's going to be games array
364:03 - with the index of i which starts at 0.
364:06 - so just for reference i'm going to say
364:08 - sample value in a comment
364:11 - and this will be
364:13 - 3 colon 1.
364:15 - all right so the first thing i
364:18 - gonna think about doing since 3 and 1
364:20 - are used for calculating this
364:23 - i'm going to split them
364:24 - so we're going to say parts
364:27 - are going to be equal to value
364:29 - dot split
364:30 - and we're going to split it by a
364:32 - delimiter of a colon
364:34 - so now let's console.log
364:36 - the parts of this array and we're just
364:38 - going to see what that looks like
364:41 - so these are the values that we're
364:44 - getting in each iteration of the for
364:46 - loop
364:47 - so we're getting you know one and one
364:49 - two and two three and three so on and so
364:51 - forth and now what we're gonna do is
364:53 - we're gonna say all of these different
364:55 - scenarios so we're going to say if
364:59 - parts 0 so the first one
365:02 - if the first value
365:04 - so x
365:06 - yeah so x and y so the first one is x
365:10 - so if parts 0 which is going to be x we
365:13 - might as well break this out into a
365:14 - descriptive variable
365:18 - so there's your x
365:20 - and there's your y
365:23 - the first and second value of that array
365:26 - and we're going to say if x
365:28 - is greater than y we're just following
365:30 - the rules over here basically
365:33 - we're going to do something
365:39 - and if x is
365:43 - we'll say else if x
365:46 - equals y
365:48 - and then finally else which is just
365:50 - basically going to be that last
365:51 - condition which means x is less than y
365:57 - okay so let's just put it in there we'll
365:59 - say total points
366:01 - equals total points
366:03 - plus
366:04 - and in this case it's going to be three
366:09 - then down here let's just use a shortcut
366:12 - because we can so we'll do plus equal
366:14 - this is just an operator that does the
366:16 - same thing
366:17 - as here except just in a shorter way so
366:20 - we'll do plus
366:21 - equal and then in this case it's a tie
366:24 - so it's one point
366:25 - and then otherwise it's zero points
366:28 - so in this case we actually don't even
366:31 - need this last block because it's adding
366:34 - zero which doesn't even matter
366:36 - let's return the total points here
366:43 - all right we passed it
366:47 - awesome
366:49 - even going through the explanation there
366:51 - i will assume that you're pausing the
366:53 - video to do that
366:58 - oh that's an interesting solution right
367:00 - there
367:02 - i'm not going to get into that though
367:07 - okay
367:10 - at this point i believe this is the last
367:12 - question
367:16 - no we
367:17 - finished it
367:19 - looks like we've finished all of them i
367:21 - i don't know i think we skipped
367:24 - this last one the val count no we did
367:25 - that at the beginning anyways if you
367:28 - enjoyed this video give it a like
367:30 - subscribe to the channel uh please i'm
367:33 - very tired right now from going through
367:35 - all these challenges together with you
367:37 - be sure to follow me on code wars and
367:40 - i'll follow you back
367:41 - and stick around for the next video in
367:44 - this lesson series
367:46 - see you later
367:48 - [Music]
367:54 - now in the last couple of videos we have
367:56 - talked about
367:58 - the basics of javascript essentially so
368:00 - we started with some variables and we
368:02 - went through you know functions and
368:03 - loops and operators
368:05 - conditionals all that good stuff
368:07 - so at this point we're ready to jump
368:10 - into some of the built-in
368:12 - functions in objects within javascript
368:14 - which is going to save us a ton of time
368:17 - when we're actually writing our code
368:19 - because it basically uh it's a bunch of
368:22 - shortcuts essentially and also just kind
368:25 - of the basis of the javascript language
368:27 - here's what we're going to cover in this
368:29 - video and the next couple of videos but
368:32 - all encompassed within lesson six of the
368:34 - series so we're going to learn how to
368:37 - read documentation that's a really
368:38 - important thing as a developer
368:41 - we're going to do a quick start kind of
368:43 - an overview of callback functions
368:45 - they're a little bit confusing but we'll
368:47 - get through them and then we'll talk
368:49 - about primitive values versus
368:51 - object values within javascript
368:54 - talk about dates regular expressions
368:57 - string methods array methods
369:00 - um the math library error types and then
369:03 - a couple data types that we have not
369:06 - actually covered yet that would be not a
369:08 - number n a n
369:10 - and then also null and undefined values
369:13 - so we've got a pretty pretty big laundry
369:16 - list of things to cover uh in this
369:18 - lesson it's gonna take a little bit of
369:20 - time but i promise you when we get to
369:22 - the end you're going to have a much
369:24 - bigger overview of what the javascript
369:26 - language is all about now the one thing
369:28 - that i'll say as we go into this lesson
369:31 - is this is probably going to be the last
369:32 - one where we're just focusing solely on
369:35 - javascript
369:36 - we have to get through a lot of
369:38 - different things so we have to cover
369:39 - html and css and then a couple different
369:42 - other things before we're actually
369:44 - writing our web apps so this will be the
369:46 - last kind of lesson that we're talking
369:47 - about javascript alone now there are
369:50 - other things in javascript that we will
369:52 - not cover quite yet so that would be
369:54 - like the async await and promises
369:57 - and classes object-oriented programming
370:00 - you know it all kind of goes together
370:02 - and those are some more advanced
370:03 - javascript topics that i'm going to pick
370:05 - up later down the road when we've
370:07 - actually written
370:08 - some sort of substantial web app so hold
370:11 - tight on that i'm not going to cover it
370:13 - yet but we are going to get through the
370:14 - basics here and then we'll start getting
370:16 - into actually building that web app of
370:18 - ours the first thing that i want to do
370:20 - is actually go through how do we read
370:22 - documentation and we can start at the
370:25 - mozilla
370:27 - web docs which is called mdn
370:30 - for short and we've looked at this
370:31 - previously
370:32 - in the code challenges from the last
370:34 - lesson lesson five but we didn't
370:36 - actually go into depth on how to read
370:38 - this documentation and i think it's
370:40 - really important
370:42 - to do so so you get to the home page of
370:45 - the mdn web docs you go to technologies
370:48 - and you'll find javascript
370:50 - now javascript is documented in a
370:53 - variety of places this just happens to
370:55 - be
370:57 - what most people consider the official
370:59 - javascript documentation so once we're
371:02 - on the javascript homepage you can see
371:05 - on the left you've got this navigation
371:07 - bar
371:08 - there's some tutorials that you don't
371:10 - need to go to because this is a tutorial
371:12 - about javascript but then what we're
371:15 - interested is the references so when we
371:17 - talk about references that's generally
371:19 - going to be a big part of any sort of
371:22 - documentation that you're looking at
371:24 - generally with documentation you're
371:25 - going to have some sort of quick start
371:27 - guide just to get you started with
371:29 - whatever library or framework that
371:32 - you're reading the documentation for
371:34 - then you're going to have some sort of
371:35 - tutorial usually
371:37 - and then finally you're going to have an
371:39 - api reference
371:41 - sometimes they just call it a reference
371:43 - like they do here sometimes they call it
371:45 - the api sometimes they call it the api
371:47 - reference
371:48 - whatever the case it's all kind of
371:51 - centered around okay here's the core of
371:54 - of this library or language or framework
371:57 - and this is where you need to go to
371:58 - learn more about using it so that's what
372:01 - we're interested
372:02 - in for javascript and particularly
372:06 - right now since this video is all about
372:08 - the built-in objects and functions
372:10 - we can go to this built-in objects drop
372:13 - down in here you'll scroll down and
372:15 - you'll see a variety of different
372:18 - types of objects and
372:20 - these objects have
372:22 - things called instance methods
372:24 - it kind of gets into object oriented
372:26 - programming and i don't want to go there
372:28 - but that's why i'm saying
372:30 - objects and functions
372:32 - now it's going to say objects here but
372:33 - the functions are kind of
372:35 - what we call a method on
372:38 - top of these objects that that you can
372:40 - call from the object so
372:42 - um you can scroll down and see a bunch
372:43 - of different ones
372:45 - most of these are going to be irrelevant
372:47 - to you as the complete beginner and
372:49 - quite honestly they're going to be
372:50 - irrelevant to you um even as you get
372:53 - better so
372:54 - the point of this video is to point out
372:56 - the
372:57 - most important ones the ones that you're
372:59 - going to be
373:00 - that you're going to need to get the
373:02 - most familiar with
373:03 - and we'll go through them in more detail
373:06 - but i just wanted to give you an
373:08 - overview of this
373:09 - and then as you click through
373:11 - a specific object so let's say we go to
373:14 - string
373:15 - which as you'll learn in a little bit a
373:18 - little bit later in maybe the next video
373:20 - or something a string is actually an
373:23 - object in javascript like everything
373:25 - else so it's a little bit confusing but
373:27 - you'll get the point in a little bit
373:29 - now once we're on the string
373:32 - documentation page or reference it's
373:35 - going to give you an overview of
373:36 - everything and this is kind of the main
373:38 - home page for this string object now in
373:41 - javascript everything kind of behaves as
373:44 - an object and it has these things called
373:47 - methods on it which are the functions
373:49 - i'm talking about when i say method you
373:52 - can just think of it as a function
373:54 - that is you know attached to that object
373:57 - so as we scroll down here on the left
374:00 - you're going to see this thing says dot
374:03 - prototype dot whatever method we're
374:05 - talking about now the prototype part
374:08 - that's a complexity of the javascript
374:10 - language that we have not covered and we
374:12 - will not cover in this series
374:14 - that's a little bit uh
374:16 - above our pay grade and we don't need to
374:18 - get into that to actually start writing
374:20 - the code once again i've said this in
374:22 - previous lessons if you want to
374:24 - understand the prototype chain and all
374:26 - of these complex things about javascript
374:29 - um of course after you've kind of
374:31 - mastered the basics you can go to the
374:33 - you don't know javascript series
374:36 - it's completely free so
374:38 - you don't know javascript
374:42 - and it's actually hosted on github
374:45 - i think his name is kyle simpson
374:47 - i would go to the first edition branch
374:50 - here and then you can scroll down and
374:52 - just see all of the different books that
374:54 - he's written on javascript
374:56 - it's a really good guide that's going to
374:58 - take you through the nuances of this
375:00 - language anyways coming back to here so
375:03 - we have the object at the
375:04 - beginning.prototype
375:06 - and then the method so let's click on
375:08 - one of these methods and see how we
375:10 - actually read the spec or the reference
375:13 - for each method
375:15 - i think a good one
375:16 - to start with
375:18 - let's see which one do we want
375:20 - so we want to start with the pop method
375:24 - this is a really easy one to
375:27 - get used to and this is not part of the
375:29 - string spec so we need to go to arrays
375:33 - actually so let's go to javascript and
375:35 - then we'll go to built-in objects and
375:37 - click array
375:38 - now same thing you have all these
375:40 - methods here and we're going to go down
375:42 - here to the pop method
375:45 - now when we get to the pop method
375:47 - reference you're going to see a little
375:49 - summary and then an example this is the
375:52 - case for all of these different methods
375:54 - usually you should be able to figure out
375:56 - or get the gist of what this does and
375:58 - how to use it from just the starting
376:00 - section but it's really important to
376:03 - start developing the skill of learning
376:05 - how to read documentation and oftentimes
376:07 - it can be a little bit confusing
376:10 - especially since each
376:12 - language and site and framework and
376:15 - library it depends on how they've
376:17 - written their documentation it might
376:19 - look a little bit different
376:20 - so anyways the pop method removes the
376:22 - last element from an array and returns
376:24 - that element
376:26 - this method changes the length of the
376:28 - array
376:29 - all right so we know it is mutating or
376:31 - changing
376:32 - the existing array that we're working on
376:35 - now if we come down to the syntax
376:37 - section this is what i want to focus on
376:40 - in this video because if you are a more
376:43 - experienced developer you should be able
376:45 - to
376:46 - kind of figure out all of the nuances of
376:49 - a specific method or function
376:51 - from this syntax section
376:54 - now when we look at the pop method
376:56 - it just gives us this basic little
376:58 - syntax
377:00 - and you can see that there's nothing in
377:01 - this parentheses
377:03 - nothing that you pass in and then when
377:05 - you come down to the return value it
377:07 - says the return value is the removed
377:09 - element from the array and then it says
377:12 - undefined if the array is empty so it
377:15 - tells you here's what the normal return
377:17 - value is and then if you by chance pass
377:20 - in an empty array which you probably
377:22 - won't unless you're looping through it
377:24 - or something
377:26 - then it returns undefined so this is a
377:28 - really basic one and just by looking at
377:31 - this you can see how it works and we can
377:33 - come over to our console
377:35 - we can create some sort of array here
377:38 - so we'll just put a couple numbers in
377:40 - here
377:40 - now if we print the array it's one two
377:43 - three and then array.pop
377:45 - it's going to return the length of the
377:47 - array so 3 is the length of
377:51 - the array but now
377:52 - if we print the array we only have two
377:55 - elements in it because it removed the
377:57 - last one
377:58 - now this is a really simple one but the
378:01 - next one that we want to look at is
378:03 - going to be the join method and that's
378:06 - because it's going to add in a little
378:07 - bit harder documentation for us to read
378:11 - now before i do that though let me go
378:14 - back to the pop method so we got this
378:16 - overview section the syntax the
378:18 - description just gives you some more
378:20 - context around it and then you have some
378:22 - examples now as we get to the
378:24 - specifications this is going to actually
378:26 - take you to the specific link within the
378:29 - ecmascript
378:31 - spec and we talked about that in i think
378:33 - lesson two when we talked about what is
378:35 - javascript
378:36 - but this spec is going to we might as
378:39 - well click it and just see where it
378:41 - takes us
378:42 - so it should take us to the pop method
378:44 - you can see up here
378:46 - and this is the spec for you know the
378:48 - javascript language so just takes you
378:50 - there it's not something that you'll be
378:52 - probably clicking on all that often and
378:55 - then finally you come down here to
378:57 - browser compatibility
378:58 - and you'll see all the different
379:00 - browsers and then you'll also see a run
379:03 - time over here so node.js is not a
379:06 - browser but it's a runtime that runs
379:08 - javascript so it shows you the
379:10 - compatibility for this method within all
379:13 - the different browsers in this case
379:15 - the pop method is one of the oldest
379:18 - array methods in javascript so it's
379:19 - supported by all the browsers but as
379:21 - you'll see
379:22 - with some other methods that we look at
379:25 - it's not supported in all the different
379:27 - browsers and oftentimes it's internet
379:30 - explorer that doesn't support it so
379:32 - not a big deal
379:34 - all right so anyways let's go back to
379:37 - let's see not the pop method we wanted
379:39 - the join method
379:41 - which is going to be
379:42 - somewhere here all right
379:45 - so looking at the join method this is
379:46 - going to be a little bit more complex
379:48 - i'm going to kind of skip over this
379:51 - first section just to get an overview it
379:53 - says it creates and returns a new string
379:56 - by concatenating or joining all of the
379:59 - elements in an array all right so that's
380:01 - the basics now coming down down to the
380:04 - syntax where we're trying to focus on
380:07 - you'll see that this
380:09 - this code block here has a little bit
380:12 - more complex
380:13 - syntax going on so it says array.join
380:16 - and then in here we have this uh word
380:19 - called separator and we have these
380:21 - little brackets around it
380:24 - now what these brackets mean within the
380:26 - javascript or the mdn documentation it
380:30 - means that they are optional so the
380:32 - separator this is just a description
380:35 - like
380:36 - that word is arbitrary so it says
380:38 - separator just to give you an idea of
380:41 - what type of parameter
380:43 - it takes as i guess an argument so
380:46 - remember we talked about parameters and
380:48 - arguments two sides of the same coin
380:50 - parameters are what we define when we
380:53 - declare a function arguments are what we
380:55 - pass in to that function when we
380:57 - actually invoke it call it um you know
381:00 - whatever you want to say there so
381:03 - this in this case we have separator
381:06 - and we can read more about this here so
381:08 - the separator specifies a string to
381:11 - separate each pair of adjacent elements
381:13 - of the array
381:14 - the separator is converted to a string
381:16 - if necessary if omitted the array
381:19 - elements are separated with a comma
381:21 - if separator is an empty string all the
381:24 - elements are joined without any
381:25 - characters in between them so if you are
381:28 - following along with the 25 practice
381:30 - problems from the prior lesson we used
381:33 - this method a couple of times and we
381:35 - actually had to use that empty string to
381:38 - join all the elements together with
381:40 - nothing between them
381:42 - so this is where we would have found
381:43 - that now of course it's optional so if
381:45 - you don't pass anything in there it says
381:48 - if omitted the array elements are
381:50 - separated by a column so it's optional
381:52 - and then we come down to the return
381:54 - value and it says a string with all
381:56 - array elements joined if the array
381:59 - length is zero an empty string is
382:01 - returned so we can go ahead and test
382:04 - that too so let's go into our console we
382:07 - have an array here
382:10 - let's let's actually create a new one so
382:12 - let me clear the screen
382:15 - and we'll say
382:17 - string array
382:21 - and then we'll say hello world all right
382:24 - so what if we wanted to combine those
382:25 - together now we'd use the join method so
382:28 - we can say stringarray.join
382:30 - now as we see it right here we omit all
382:33 - of the arguments
382:35 - it just joins it with this little comma
382:37 - down here now if we go back and look at
382:40 - what else we can do so
382:42 - if the separator is an empty string it
382:44 - joins it without anything between them
382:46 - so let's put in an empty string here
382:50 - and you can see that it
382:52 - joins those together into one string
382:53 - with nothing between them now we can add
382:56 - a space here
382:57 - and press enter and this is probably
382:59 - closest to what we would want if we were
383:01 - doing this
383:02 - so that's just how you would read this
383:04 - now the last one i'm going to look at
383:06 - for reading documentation is a little
383:08 - bit
383:08 - trickier and we're going to have to kind
383:11 - of use these concepts we just talked
383:13 - about to get through it
383:15 - the example that we're going to do is
383:17 - the array.includes method
383:19 - so let's click on that wherever it is
383:23 - now this includes method determines
383:25 - whether an array includes a certain
383:26 - value among its entries returning true
383:29 - or false as appropriate now we're going
383:31 - to cover this a little bit later
383:33 - in this lesson
383:34 - so i'm not going to go too deep into it
383:37 - but let's go ahead and look at the
383:38 - documentation here
383:40 - it says this is the code block that
383:43 - we're looking at
383:44 - and you'll notice that we have a value
383:46 - to find and then we have the brackets
383:50 - here
383:50 - and the from index so breaking this down
383:53 - from how we understand it there are no
383:55 - brackets around the value to find which
383:58 - tells us that there is that is a
384:00 - required parameter you really can't run
384:02 - this method effectively without that
384:05 - required parameter
384:06 - now it has this comma here which
384:09 - basically means okay we're going to the
384:10 - next parameter that this function will
384:13 - take
384:14 - and then it's surrounded by these
384:17 - brackets at the beginning and end which
384:20 - means that the second parameter is going
384:22 - to be optional now if we look down into
384:24 - the parameters description value to find
384:27 - is the value that we're searching for
384:29 - and it says it is case sensitive so
384:31 - that's nice to know and then the
384:33 - optional parameter is the from index and
384:36 - it's basically saying
384:37 - you can start looking within this array
384:40 - at a certain index so you know if the
384:43 - value to find is earlier than that index
384:46 - you specify it's not going to include it
384:49 - so that's just how we would read the
384:50 - syntax of this and again we're going to
384:52 - go through this a little bit later in
384:53 - the lesson so i'm not going to do an
384:55 - example right now
384:57 - and just to point out what i was talking
384:58 - about earlier if you scroll down so
385:00 - includes is actually a little bit of a
385:02 - new method i believe
385:05 - i could be wrong on that but i thought
385:07 - that it was offered only in the latest
385:10 - spec of javascript
385:13 - so if you scroll down to the browser
385:15 - compatibility you'll see that internet
385:17 - explorer has no support for this method
385:19 - so if you're developing an application
385:22 - for that has to run effectively in
385:25 - internet explorer
385:27 - probably the only case that's going to
385:29 - happen is if you work for like a really
385:31 - large company
385:32 - and that company kind of has legacy
385:35 - systems and applications that still run
385:38 - an internet explorer you don't want to
385:40 - be using this includes method because it
385:42 - might screw up your application so
385:44 - that's just what i was talking about
385:45 - earlier
385:50 - in the next part of this lesson
385:52 - 6 here we're going to be talking about
385:54 - callback functions
385:56 - when i first started i was really
385:58 - confused about these and i honestly
385:59 - think that it's just because i never
386:02 - stumbled upon a good explanation
386:04 - something that really broke it out into
386:06 - the pieces that i could understand so
386:08 - hopefully in this video
386:10 - i can do that for you and prevent you
386:12 - from suffering from that confusion for
386:14 - several months like i did
386:16 - now the reason we're talking about this
386:18 - is because the built-in functions that
386:20 - we'll see later in this lesson are going
386:23 - to use callbacks or callback functions
386:26 - heavily and if you don't understand them
386:28 - you're not going to be able to use those
386:30 - built-in methods
386:31 - so with callback functions they're not
386:34 - any different from the functions we were
386:35 - writing in the previous lesson
386:38 - use you know use the same syntax so you
386:40 - can use the regular function syntax you
386:42 - can use uh anonymous functions or arrow
386:45 - functions it's all the same it's just a
386:48 - different way of using functions and
386:51 - it's just a little bit different way of
386:52 - thinking in general
386:54 - to start us off i'm going to paste in
386:56 - some code that we're going to actually
386:58 - understand by the end of this little
387:00 - lesson
387:01 - so this would be an example of using a
387:03 - callback function go ahead and pause the
387:05 - video just so that you can take a look
387:07 - at it and get yourself acquainted so
387:09 - i'll press enter here and you can also
387:12 - simplify that code that we just looked
387:14 - at
387:15 - into this right here so it does the same
387:17 - exact thing
387:18 - you can see the answer is the same and i
387:21 - would just pause the video and just look
387:22 - at those two code blocks just for a few
387:24 - seconds to just get your mindset
387:26 - around what we're doing here now the
387:28 - entire reason that i'm walking you
387:30 - through callbacks here is because
387:32 - oftentimes you're going to see
387:35 - code that looks like the second option
387:37 - here which is simplified yes and it's
387:40 - how i would write it but it definitely
387:43 - does not display the concepts that
387:45 - you're supposed to be understanding very
387:47 - well so in this section i'm going to be
387:49 - writing code that i normally would not
387:51 - write
387:52 - just because it's a little bit longer
387:54 - form and more broken out than i would
387:57 - write it you know if i was developing an
387:58 - application but hopefully you know that
388:01 - longer form of the code is going to
388:04 - clear up some of these concepts for you
388:06 - and really help you understand what
388:08 - callbacks are all about so let's take a
388:10 - look at each of these code blocks
388:13 - let me clear the screen and just get us
388:15 - the
388:17 - main code block and i have some comments
388:19 - pasted in here
388:21 - so let me clear the screen
388:23 - and we'll paste this in here maybe space
388:25 - it out a little bit so that we have
388:28 - some room to work with
388:30 - all right
388:31 - and if we look at this code here
388:34 - there's a couple things going on the
388:36 - first thing is we have two different
388:38 - functions here
388:40 - the main function right here and then
388:42 - the callback function so oftentimes
388:45 - you'll see the callback function kind of
388:47 - just
388:48 - embedded within that main function
388:51 - but in this case like i said i'm
388:52 - breaking it out for clarity
388:55 - so this main function it takes three
388:57 - arguments the first argument is going to
388:59 - be some number i just called it random
389:01 - number it's arbitrary
389:03 - um and then should call so this is going
389:06 - to be a boolean value uh
389:08 - value which is basically going to
389:10 - ask whether we should go into the
389:12 - callback and then
389:14 - the callback itself so walking through
389:16 - this code let's first look at result so
389:19 - the result variable is going to be set
389:22 - equal to the random number now what is
389:24 - random number now of course random
389:27 - number is a parameter to this function
389:30 - and therefore whatever we pass in as the
389:33 - argument
389:34 - to the function is going to be the value
389:36 - of random number so if we go to the
389:38 - bottom where we actually invoke or call
389:41 - this main function
389:42 - you'll see that the random number is
389:44 - going to be 20 right here so in this
389:47 - case random number equals 20 and
389:49 - therefore the result variable also
389:52 - equals 20
389:53 - because we're assigning it now if we
389:55 - come down to this next part there's some
389:58 - comments here that's not affecting the
389:59 - code at all we just have a simple if
390:01 - statement so we say if should call so if
390:04 - you remember we can pass a boolean value
390:08 - alone we don't have to put any equal
390:09 - signs or anything
390:11 - and we can place that within a
390:13 - conditional
390:14 - to evaluate it so if should call is true
390:18 - then we're going to reach the code
390:21 - within this uh this conditional block if
390:24 - it's false then we just skip this
390:26 - conditional block and we return the
390:28 - result so basically if should call is
390:31 - false then we're going to skip this and
390:33 - the result is currently equal to 20 and
390:36 - then we return the result so the return
390:39 - of this main function is going to equal
390:41 - 20. but of course it returns 40 as we
390:44 - see down here so therefore
390:47 - the should call is true as we see here
390:50 - in the invocation of the function now
390:53 - the last part is the tricky part that's
390:55 - the callback now the first thing i want
390:57 - to point out here is that callback this
391:00 - name that i've given it is entirely
391:03 - arbitrary you'll see this very often you
391:06 - might see
391:07 - either this as callback or you might see
391:10 - the letters c and b for callback and
391:14 - that's probably a convention that you're
391:16 - going to come across but it doesn't have
391:17 - to be that way you can call that
391:19 - whatever you want
391:20 - it's just a normal
391:22 - parameter but in this case instead of
391:25 - passing in a number or a boolean like we
391:28 - did for the first two
391:29 - parameters we're actually passing in
391:31 - another function
391:32 - so
391:33 - basically what we're doing is we're
391:35 - passing in a function to another
391:37 - function and we're asking that you know
391:39 - parent function to execute
391:42 - the function that we passed in
391:44 - in this case my callback is what we've
391:47 - passed in you can see in the arguments
391:49 - down here at the bottom
391:51 - so we've passed in my callback which has
391:54 - just been declared hasn't been executed
391:56 - yet and so callback right here is going
391:59 - to equal
392:00 - the declaration
392:02 - of this function called mycallback so if
392:05 - you know how to
392:07 - run this if we wanted to run mycallback
392:10 - all we have to do
392:11 - is put these parentheses at the end and
392:14 - pass in some sort of number and you can
392:16 - see if we execute this we get 40 which
392:18 - is the same answer of course that would
392:20 - be the more direct way to do this but
392:22 - this is a contrived example that's
392:24 - hopefully going to explain callbacks to
392:26 - you
392:27 - all right so we've got this value called
392:29 - callback and that is equal to a function
392:33 - uh a function data type that has not
392:35 - been invoked yet so just a declaration
392:38 - and
392:39 - we can basically call this just like
392:41 - this but in this case the callback is
392:44 - actually the function that we want to
392:46 - call so we're doing that sorry about
392:48 - that we're doing that in this line right
392:51 - here so if should call that is true so
392:54 - we get down to this code right here and
392:56 - what we're doing is we're taking that
392:58 - function that's been passed in and we
393:00 - are executing it with the random number
393:03 - parameter which happens to equal 20. so
393:06 - we're basically doing what we did down
393:08 - here but within the main function we're
393:11 - letting our code actually execute the
393:13 - function so we're setting that equal to
393:16 - result which returns 40 and then we're
393:18 - going to return result at the bottom so
393:21 - that's going to return 40 and that's how
393:22 - we've gotten to our answer now like i
393:24 - showed you um with that second example a
393:27 - little bit ago
393:28 - it's a little bit more abbreviated way
393:30 - to do this and you do not have to write
393:33 - a separate function called mycallback in
393:36 - order to you know basically run a
393:38 - callback function so what we could have
393:40 - done in the first case this is how we
393:43 - executed main function
393:45 - we passed in 20 we passed in true and
393:48 - then we passed in a predefined function
393:50 - that we had already written up here but
393:53 - we could abbreviate this so let me
393:55 - collapse this main part and what we can
393:57 - do is say main function and we know that
394:00 - we have to pass in a random number so in
394:02 - this case we'll stay consistent we'll
394:04 - pass in a value of 20. we want the
394:07 - callback to actually be called within
394:09 - the function so we need to pass in true
394:12 - as the should call argument and then we
394:15 - need to pass in the function so in the
394:16 - first case we just put in my callback
394:19 - and it worked but we also could do it
394:21 - like this so we could write a
394:24 - anonymous function
394:25 - and this function is going to take a
394:28 - number so that's just the parameter that
394:30 - we're defining and we know that if we go
394:33 - up to the main function here it's going
394:35 - to pass in this random number as the
394:37 - argument so that's what number or num is
394:40 - going to represent
394:42 - and then we have to break it down here
394:44 - and then we have to return the num times
394:48 - 2 which is going to ultimately return us
394:50 - 40 and that's another way that we could
394:53 - write that callback there's other
394:55 - simpler ways so we can also do it like
394:57 - this so let's do main
394:59 - function
395:00 - pass in 20 true and then in this case
395:04 - let's just put in an arrow function so
395:06 - we have num
395:07 - and then we use our arrow function
395:09 - syntax and then we return the num
395:13 - times 2 and once again we get 40. so
395:15 - just another way to pass that in and we
395:17 - can even simplify this a little bit more
395:20 - so we can pass in the same parameters we
395:22 - don't actually need these parentheses
395:24 - here because it's a single argument
395:28 - so we'll take num and then
395:30 - we also don't need to break down onto
395:32 - the second line we can actually just
395:34 - take num times two and that's going to
395:37 - return it the same way and now we've
395:40 - gotten our answer of 40 once again so as
395:43 - you can see that's how we get from the
395:45 - most you know contrived simple elaborate
395:48 - example to the code that you're probably
395:51 - going to be seeing in a lot of examples
395:53 - this is what a lot of people use because
395:56 - it's just a much simpler quicker way to
395:58 - write a callback function so hopefully
396:00 - this section
396:02 - i know it's a little bit confusing but
396:04 - re-watch it again if you are not totally
396:06 - clear on this because we're going to be
396:08 - going into the built-in functions that
396:10 - use these callbacks very heavily and
396:12 - it's going to be important that you
396:13 - understand how they're working so you
396:15 - might understand callbacks now but why
396:18 - do we actually need them they seem
396:20 - overly complicated don't they
396:22 - well the reason we need them is in my
396:24 - opinion um this is just based from on
396:27 - experience and just observation the two
396:29 - things that it enables is reusability
396:33 - and asynchronous programming now i'll
396:35 - talk about each of these we're not going
396:37 - to go too much into asynchronous
396:39 - programming in this video for reasons
396:41 - i'm about to explain but let's start
396:43 - with the reusability thing and that is
396:46 - going to be crucial to really connecting
396:49 - the dots when we get into some of those
396:51 - more advanced array built-in methods
396:53 - that we're talking about later in the
396:54 - lesson to really understand the
396:56 - reusability thing we're going to look at
396:59 - a common array method that's called map
397:02 - so we're going to look at this a little
397:04 - bit later in the video too but i really
397:06 - want to show this as a lesson of why we
397:09 - need callback functions
397:11 - so what this map method does if we look
397:13 - at the documentation is it creates a new
397:15 - array populated with the results of
397:17 - calling a provided function on every
397:20 - element in the calling array so it's
397:22 - basically doing a transformation and
397:25 - you're
397:26 - able to define the function that has all
397:29 - that logic to figure out what it's doing
397:31 - to each element in the array let's take
397:33 - a look at a very simple example
397:36 - now this isn't going to make total sense
397:38 - but it will kind of connect the dots
397:40 - from what we just did with that original
397:43 - callback example
397:44 - so what i'm doing is constructing an
397:46 - array very simple one at that and then
397:49 - i'm going to define my custom
397:52 - map
397:53 - operation and we'll just say callback so
397:55 - we want to be very specific with what
397:57 - this function represents to us
398:00 - and then the parameter is going to be
398:02 - the item
398:03 - from the array that we're mapping over
398:06 - and what we're actually doing here is
398:08 - we're kind of iterating over the array
398:10 - so when we get each element of the array
398:14 - which is going to be passed in as an
398:15 - argument
398:17 - into this function
398:18 - we want to return
398:20 - a value and that value is going to be
398:22 - the transformed value that will kind of
398:25 - occupy the new array that we have
398:28 - so we're going to take the item from
398:29 - array and we're going to multiply it by
398:32 - 2. so we're basically going to take this
398:34 - entire array up here and
398:36 - for each element we're going to multiply
398:38 - it by two
398:39 - so we've got that function defined so
398:41 - far it's not really doing anything but
398:43 - if we take my array
398:45 - and then we actually we need to set this
398:48 - equal to a new array
398:50 - because that the map method is going to
398:52 - actually return the modified array it's
398:55 - not going to
398:57 - modify the original array
399:00 - so we're going to take myarray.map
399:03 - so we're just calling the function
399:04 - that's built into
399:06 - our array
399:08 - and what it requires is going to be a
399:11 - callback function and in this case we've
399:13 - already defined that so we're going to
399:14 - pass in my custom map operation
399:18 - callback
399:19 - and then we're going to execute it
399:22 - now if we look at the new array
399:24 - you're going to see that every element
399:26 - has been doubled and what it's done is
399:29 - it's looped through it's started at two
399:31 - then it's taken that value of two
399:32 - multiplied it by two to get four so on
399:35 - and so forth so you can see how
399:38 - we've kind of iterated over the array
399:40 - and applied some sort of transformation
399:42 - defined by our callback function
399:45 - now here is where we really understand
399:48 - this concept of reusability
399:51 - so in this case
399:52 - sure it works we're multiplying
399:54 - something by two but it doesn't really
399:56 - convey to us why this callback is so
399:58 - useful
399:59 - now when the creators of the javascript
400:02 - programming language introduced this map
400:04 - array what they wanted was to enable the
400:07 - developer to use this same method for a
400:11 - variety of use cases so what if we had
400:14 - an array that was full of strings so let
400:16 - me copy in a new array here
400:19 - i need to name it something different so
400:22 - we'll just say string array
400:24 - and this is going to have a bunch of
400:27 - strings in it and you might say okay
400:29 - well i need to find a different built-in
400:31 - method to
400:32 - map over this and do some sort of
400:34 - transformation well because we have a
400:37 - callback as one of the parameters of
400:39 - this predefined function
400:41 - we have a lot of flexibility and instead
400:44 - of looking for a new method we can just
400:46 - redefine our custom map operation now in
400:50 - this case i'm not going to do it long
400:52 - hand like we've been doing i'm going to
400:53 - show you the shortcut so we'll say not
400:56 - my array but the string array which we
400:58 - just defined
401:00 - we're going to call the map method on it
401:02 - and then we're going to pass in a
401:04 - callback function so let me template
401:06 - that out
401:07 - i'm going to have an arrow function
401:09 - right here
401:10 - and what i'm going to pass in is going
401:12 - to be the item from the array so we'll
401:15 - just say item from array we don't need
401:17 - any parentheses around that because it's
401:19 - a single argument
401:21 - and now the transformation that we're
401:23 - trying to do so if we do this on one
401:25 - line whatever is right of this arrow is
401:28 - going to be returned from that function
401:30 - so all we have to do is transform it in
401:33 - some different way so maybe we wanted to
401:36 - construct just the first letter of each
401:39 - of these words so maybe we wanted a new
401:41 - array that has the letter h w m n i and
401:45 - z
401:46 - all we have to do is maybe return
401:49 - the item from the array and actually
401:53 - what i'm going to do here is pass in
401:56 - no i don't need to i'm just going to
401:58 - take item from array and then i'm going
402:01 - to get it give it the zero index because
402:03 - you can access the first letter of any
402:05 - string by using the zero index second
402:08 - letter by one third by two so on and so
402:10 - forth so you can see that we've returned
402:13 - the first letter of each of these
402:15 - elements in the array and we did this
402:17 - for an array of strings by just
402:19 - redefining that callback function so
402:21 - that's the value of these callback
402:23 - functions it enables us to
402:25 - reuse the same function over and over
402:27 - again so in this case the built-in map
402:30 - function and kind of modify it for
402:33 - whatever needs that we have and we can
402:35 - do something way more complex than just
402:37 - multiplying by two we can have
402:40 - conditional logic in here we can say you
402:42 - know if the number is prime then we want
402:45 - to multiply it by 2.
402:46 - if it's not prime then we just want to
402:48 - return the number itself you know you
402:50 - can do all sorts of different things
402:52 - with this as complex as you want it
402:55 - all right so i think you probably
402:57 - understand why we
402:58 - why callbacks enable reusability why
403:01 - they're important you know how they work
403:04 - all that kind of stuff now let's move on
403:06 - to the asynchronous topic so i told you
403:08 - that
403:10 - callbacks enable asynchronous
403:12 - programming and what that gets us into
403:16 - is a whole other topic that i'm only
403:17 - going to briefly touch on here
403:19 - so when i say asynchronous all i'm
403:22 - talking about is code that does not run
403:25 - um
403:26 - immediately so with the code that we've
403:28 - run here on this screen
403:30 - you'll probably notice that when we
403:32 - press enter it executes immediately it's
403:35 - it pretty much seems instantaneous to
403:37 - our human brain
403:38 - now there are times when we're writing
403:41 - code that it might even take up to two
403:44 - three or four seconds for a piece of
403:46 - code to execute and a good example of
403:48 - that is let's say
403:50 - our application database that stores all
403:53 - of our data is you know on a in a
403:56 - different continent from where the user
404:00 - is actually
404:01 - uh clicking so maybe i host my database
404:04 - here in the united states but someone
404:06 - from
404:07 - i don't know italy or something is
404:09 - visiting my web app
404:11 - and has to access
404:13 - uh the web app from their browser in
404:15 - italy and so it's going to send off a
404:18 - request to my server
404:20 - and then to the database and that
404:22 - request to get all of the
404:25 - information for that web app and perform
404:27 - different functions is going to take a
404:30 - certain amount of time and it's not
404:32 - instantaneous so we have to handle that
404:34 - with our programming and you might just
404:37 - say well okay let's just wait until it's
404:39 - done and then execute the next line of
404:41 - code well in that case with a web app
404:44 - you're going to have multiple
404:45 - asynchronous operations going at the
404:47 - same time so you're going to have
404:49 - multiple calls to a web server that are
404:52 - going to take you know half a second
404:54 - one and a half seconds maybe even a
404:56 - little bit more and if you added all of
404:58 - those together and you just did it in
405:00 - order your web app is going to take 30
405:03 - seconds to load and in that case
405:05 - nobody's going to use it so we have to
405:07 - run all this code kind of at the same
405:10 - time and for that reason we have
405:13 - asynchronous programming which basically
405:15 - allows us to
405:17 - run some code and then run other code
405:20 - while that previous code is still
405:22 - running
405:23 - now i know this kind of gets in the
405:24 - topic of like threads
405:26 - execution threads on a computer it's not
405:29 - really what we're talking about here and
405:31 - i really don't want to get into all of
405:33 - the details of this but as we go through
405:36 - this series we're going to be talking
405:37 - about
405:38 - asynchronous callbacks promises and the
405:41 - newer
405:42 - es6 async in a weight
405:45 - so these are all different ways that we
405:47 - can write asynchronous javascript code
405:50 - you'll see how it comes into play a
405:51 - little bit later in the series
405:55 - if you've been following along with this
405:57 - series you might have heard me say that
405:59 - everything in javascript is an object
406:01 - but i haven't really explained myself on
406:03 - that one and since we're talking about
406:06 - all the built-in objects within
406:08 - javascript in this lesson i really want
406:10 - to give an overview of this concept of
406:13 - primitives versus the actual objects
406:16 - themselves i'm going to put some code on
406:18 - the screen that will hopefully give you
406:20 - a little bit of an introduction and some
406:22 - things to think about here
406:24 - so when we run this code
406:26 - you can see that we've defined two
406:28 - different strings and we have compared
406:31 - these strings with each other
406:33 - so in the first case we've got this
406:35 - weird syntax here where we're actually
406:38 - using this thing called a new
406:40 - it's actually the new operator we're
406:41 - going to talk about in a second
406:43 - and then we are defining our string with
406:46 - this uppercase string which looks like
406:49 - some sort of object or something and if
406:51 - you go to the javascript docs so or
406:54 - documentation so let's go to javascript
406:57 - built-in objects and then you go down to
407:00 - string right here that is the same
407:03 - syntax the string that we use to define
407:06 - this
407:07 - string right here so string one is
407:10 - actually an object now string2
407:13 - is what we call a primitive now this is
407:16 - because we didn't you know
407:18 - instantiate it with
407:20 - the object syntax and you can see if we
407:22 - compare the equality of these two the
407:25 - triple equals which compares both value
407:27 - and type is going to return false
407:30 - because in the first case we're looking
407:31 - at an object in the second case we're
407:33 - looking at a string primitive
407:36 - and if we use the double equals they're
407:38 - of course true because they are the same
407:40 - value they're just not the same type so
407:43 - at this point you probably probably have
407:45 - a lot of confusion in your head
407:47 - you're probably thinking a couple things
407:48 - well you're telling me that string one
407:51 - is not actually a string
407:53 - and the answer is yes it's it is not a
407:56 - string it is actually an object and then
407:58 - furthermore you're saying that this
408:01 - string down here so string two
408:03 - that is a string
408:05 - but how would we execute any of these
408:07 - built-in methods on something that's not
408:10 - an object so there's a couple floating
408:12 - questions here and to understand them
408:14 - you have to know a little bit of the
408:17 - behind the scenes stuff that's going on
408:19 - with the javascript programming language
408:21 - let's start off by asking the question
408:23 - what is a primitive now a primitive this
408:26 - is not a topic that is specific to
408:29 - javascript we talk about primitive data
408:31 - types across varying languages so you
408:35 - know python java c plus plus they all
408:37 - have their
408:38 - primitives but in javascript a primitive
408:42 - there are six different primitives that
408:43 - we can look at and we can go to the
408:46 - documentation here
408:48 - for primitive and it will maybe show us
408:51 - all of the different
408:52 - um primitives that we have so
408:55 - maybe it doesn't actually
408:56 - i thought that it did but anyways the
408:59 - six that we have are a string a number a
409:01 - big int boolean undefined and symbol
409:05 - some of these we haven't talked about
409:06 - but that's totally fine we don't need to
409:08 - talk about it yet
409:10 - but what you can think about uh when
409:12 - we're talking about primitives is that
409:13 - it is the simplest form of something
409:16 - so if a coding language had a periodic
409:20 - table of elements then the primitives
409:23 - would be those elements of the periodic
409:25 - table so that's kind of how i would
409:27 - think about it and those primitives can
409:30 - actually be used to build up other
409:32 - things
409:33 - now as you would expect a primitive data
409:36 - type does not have any sort of methods
409:39 - or functions that you can call
409:41 - on them
409:42 - so it doesn't make any sense if we were
409:45 - to come here in the console and let's
409:47 - define
409:48 - a string here so we've got some string
409:51 - and now i'm going to put a dot at the
409:53 - end of it just like i was calling a
409:55 - function or a method on an object
409:58 - and if i were to take this some string
410:01 - and say to uppercase
410:04 - so that is actually a built-in function
410:06 - on strings so if you go down to
410:08 - um the bottom here
410:10 - you can see that two uppercase is a
410:13 - built-in
410:14 - method on the string object but if we're
410:17 - saying that this is a string primitive
410:19 - then it shouldn't be able to work right
410:22 - well wrong it does work and that is
410:25 - because behind the scenes when we have a
410:27 - primitive value like this where we
410:30 - define it with those little quotes or
410:31 - the double quotes even it actually wraps
410:34 - it in that string object so what we did
410:37 - up here
410:38 - right here this is actually happening
410:41 - behind the scenes when you call
410:43 - a specific built-in method on a
410:46 - primitive
410:48 - data type within javascript
410:50 - now this is kind of interesting and all
410:52 - but what do you actually do with it well
410:54 - the answer to that is not really
410:56 - anything this is more of something that
410:58 - you should be aware of it's just good to
411:00 - know type of information so that you're
411:03 - not wondering in your head well what is
411:04 - going on here you know we're talking
411:07 - about strings but if we go to the
411:08 - documentation it sure looks like this is
411:11 - some sort of object here so it just
411:14 - clears that up for us and if you go to
411:17 - the string built-in object and scroll
411:19 - down
411:20 - a little bit we have this section called
411:22 - string primitives and string objects
411:25 - which kind of explains the same thing
411:27 - that i just talked about so feel free to
411:29 - read that and really dig in if you want
411:31 - to understand this a little bit better
411:33 - so the takeaway here is that you should
411:36 - not be using this syntax up here with
411:39 - the string constructor
411:41 - this is not the way that you write
411:43 - strings i taught you the correct way to
411:45 - write strings in the previous videos
411:46 - this is just for clarification now if
411:49 - you go to the actual documentation
411:51 - you'll see in this section on string
411:53 - primitives and objects
411:55 - down here it says for these reasons the
411:57 - code may break when it encounters string
412:00 - objects when it expects a primitive
412:02 - instead so the documentation even
412:05 - recommends to not define them like this
412:07 - because javascript takes care of it for
412:10 - you
412:10 - but anyways that's just some information
412:13 - around here now the next thing that i
412:14 - want to talk about is that keyword that
412:17 - we looked at because this is also a
412:19 - little bit confusing and as we go into
412:21 - the next couple sections of this lesson
412:23 - it's going to be important to understand
412:25 - and that is this new keyword which is
412:28 - actually considered an operator although
412:30 - we didn't talk about it when we
412:32 - covered operators in a previous lesson
412:35 - in the next section of this lesson we're
412:37 - going to be talking about javascript
412:38 - dates which you actually have to use
412:41 - that new operator for to actually create
412:44 - so if we wanted to create a date here
412:47 - what we have to say is new and then we
412:49 - pass in the date object with these
412:52 - parentheses at the end and this is what
412:54 - we call constructing
412:56 - a instance of that date object so you
412:59 - can kind of think of this
413:02 - in terms of
413:04 - like you have this template that you're
413:06 - working with
413:07 - so
413:08 - the date object would be the template
413:10 - and then you're going to actually take a
413:12 - copy of that template and store it in a
413:15 - new variable
413:17 - that has all of those attributes of the
413:19 - template it does everything that that
413:21 - template has kind of predefined it to do
413:24 - now this is kind of an object oriented
413:26 - programming
413:27 - discussion i don't want to get too far
413:29 - into it but just know that this new
413:32 - operator is a special keyword in
413:34 - javascript and that's what it's doing
413:37 - so if you actually look into
413:40 - the new keyword it's going to do a
413:43 - couple things so it creates a blank
413:44 - object and then it links that blank
413:47 - object to the parent so when i talk
413:49 - about template and an instance of that
413:52 - template that's what i'm kind of
413:53 - referring to
413:54 - so there are additional steps that get
413:56 - into the prototype chain again i'm not
413:58 - going to talk about
414:00 - that because it's another complexity
414:01 - that we don't need to visit right now
414:06 - in the previous parts of this lesson
414:08 - we've talked about a lot of the
414:09 - essential concepts that we're going to
414:11 - be using
414:12 - when we're talking about these built-in
414:14 - javascript objects and the first one
414:16 - we're going to be talking about is
414:17 - javascript dates
414:19 - now these javascript dates are a little
414:22 - bit confusing and i'll be honest i think
414:25 - a lot of developers even more
414:27 - experienced ones have a little bit of
414:29 - trouble with certain types of dates in
414:32 - javascript and the reason is because
414:35 - writing javascript dates is not really
414:39 - all about coding skill you also have to
414:41 - understand how time zones work
414:44 - and all of that stuff when you're
414:45 - actually getting into
414:47 - implementing the date objects and stuff
414:49 - like that now i've written a post on
414:51 - this so
414:53 - i'm on my site here so i'll just scroll
414:54 - down
414:55 - at some point here i talked about
414:57 - javascript dates so right here and
415:00 - with this date post i really go into
415:03 - detail about all of the different
415:06 - time zones and how we use dates and all
415:08 - the different nuances of it so i'd check
415:10 - that out if this is not enough detail
415:13 - for you but here we're going to actually
415:15 - go into the basics of writing dates and
415:18 - how we do that i showed it briefly in
415:21 - the last part of this lesson
415:23 - but all we have to do
415:25 - is define a variable and then assign a
415:27 - new date object or kind of a copy of
415:30 - that template which is date
415:32 - and we're going to assign it
415:34 - and now if we print out to the screen
415:37 - it's going to show us a
415:39 - date object here and it's going to be
415:41 - the current time because we passed in no
415:43 - parameters or no arguments to that
415:46 - date constructor now here's where dates
415:48 - get a little bit confusing
415:50 - what we have defined here
415:53 - the value that is stored within this
415:55 - date object actually represents the
415:58 - number of milliseconds that have elapsed
416:00 - since midnight on january 1st 1970
416:05 - utc time zone that's a lot to handle in
416:09 - one sentence here
416:11 - and you might be asking why january 1st
416:13 - 1970 well the answer is not so simple
416:17 - and again i would read this post that i
416:19 - wrote to really get a background on that
416:21 - but basically it's an arbitrary date and
416:24 - time that we are basing all of our
416:26 - future dates off of and what i mean when
416:29 - i say the
416:30 - value that we're storing within this
416:32 - date is equal to the number of
416:34 - milliseconds because right here it sure
416:36 - doesn't look like milliseconds that
416:38 - we're printing
416:39 - but if you said now which represents the
416:42 - date that we just defined
416:44 - and then you say value of
416:46 - it's going to print the number of
416:48 - milliseconds since january 1st 1970 and
416:52 - that is the in the
416:54 - coordinated universal time zone so if
416:57 - you converted this to years and then
416:59 - days you would get exactly to this with
417:02 - dates there are a variety of things that
417:05 - you can pass into that constructor as an
417:07 - argument to define a date and what i'm
417:10 - going to do is just paste a bunch of
417:11 - code onto the screen because we don't
417:13 - need to go through writing all of it you
417:15 - can pause the video look through this
417:17 - for a second i'm going to walk through
417:19 - it but again read that post if you want
417:22 - a ton of information about dates so the
417:25 - first example we're passing in
417:27 - the the year the month the day and then
417:30 - the time or i guess hour minute second
417:33 - millisecond whatever
417:34 - and we're passing that in as comma
417:37 - separated
417:38 - arguments to the date constructor
417:40 - we can also pass in just a string in a
417:43 - variety of different formats as you can
417:45 - see in this code
417:47 - right here
417:49 - and then going down we can
417:51 - input a number of milliseconds so we can
417:54 - just give it the the value itself or we
417:57 - can pass it in as iso 8601 format
418:01 - again that post talks all about it and
418:04 - then finally you can do time zones down
418:06 - here you can pass in time zones
418:08 - this last part the date.now
418:11 - that's kind of an interesting thing that
418:13 - we can talk about here so
418:15 - you know we're used to creating a date
418:17 - by saying new date but you can also
418:19 - create a date with a static method
418:22 - that's what this is called here and you
418:24 - just say date.now represents the same
418:26 - thing as new date obviously not anymore
418:30 - because time has elapsed but it's just
418:32 - giving you the primitive value of that
418:35 - date now we're here in this video to
418:36 - talk about some of the instance methods
418:39 - that we can use on a date object the
418:42 - built-in method so let's define a date
418:45 - so that'll be equal to now or maybe
418:47 - maybe instead we'll just say
418:50 - my date because now is sometimes not
418:52 - descriptive because the second you press
418:55 - enter it's not now any longer so that's
418:58 - a little bit confusing so let's create a
419:00 - date here
419:01 - and that's going to represent pretty
419:04 - much
419:05 - you know right now
419:07 - minus a few seconds and from this date
419:10 - we can use a couple different methods so
419:12 - one of them will be the tostring method
419:14 - and that's going to print what we've
419:16 - used here in the console but of course
419:18 - this is a rebel so it kind of read
419:20 - evaluate print loop all that kind of
419:22 - good stuff so we can use this tostring
419:24 - method to print out the
419:26 - string of the date and this is actually
419:28 - going to print the value of that date
419:31 - which is stored in the unit the
419:33 - coordinated universal time or utc and
419:35 - it's going to convert it to our local
419:37 - time zone which is the time zone that
419:39 - our computer has stored on it so that's
419:42 - actually stored in some file on our
419:44 - computer i'm not going to go into that
419:46 - but
419:47 - anyways
419:49 - here we go for the next method so we
419:51 - have my date and then we can use the to
419:54 - iso string
419:55 - so
419:56 - the iso string is a specific format and
419:58 - let's scroll down in my post here
420:00 - because we've got it up anyways and i
420:03 - think i have a little screenshot of the
420:06 - utc time or not utc but iso 8601
420:11 - and let's expand this just a little bit
420:14 - and you can see this is going to be the
420:16 - format that we're using for the iso 8601
420:19 - standard pause the video look at this if
420:21 - you're uh curious
420:23 - all right so let's bring this back
420:26 - and well not clear the screen and then
420:29 - my date
420:31 - get date is going to give us the actual
420:34 - day of the month so today is the 16th of
420:38 - january so we get 16.
420:40 - we can also use my date dot
420:44 - get month which is a little bit unique
420:47 - because this is going to return the 0
420:50 - or it's going to return the month of the
420:52 - year but it's going to use 0 indexing so
420:55 - instead of january being equal to one
420:58 - january is equal to zero which is what
421:00 - we're seeing here since this is being
421:03 - filmed in uh january
421:05 - so we'll go to my date dot get full year
421:08 - and that's gonna return 2021. um so
421:12 - those are some of the the basic methods
421:14 - that you can use on a javascript date
421:16 - and honestly these are probably the most
421:18 - common ones you won't be looking
421:21 - at anything else for the most part but
421:24 - you can go to the docs javascript
421:27 - documentation so again javascript
421:29 - built-in objects then you can go down to
421:32 - date
421:32 - and then you can see all of the
421:34 - different methods that we're using here
421:37 - something to point out
421:38 - you'll see this a couple times within
421:40 - the documentation
421:42 - if you look at the
421:45 - date.getyear method it has this little
421:47 - thumbs down icon which basically means
421:49 - that it's deprecated and a deprecated
421:52 - method is something that is no longer
421:54 - going to be supported so you don't want
421:56 - to use those now if you click on the get
421:59 - year method you'll notice that in our
422:01 - example we got we use the get full year
422:04 - method and the reason is because it says
422:07 - the get year method returns the year the
422:09 - specified date blah blah blah
422:12 - and it says it is no longer used and has
422:14 - been replaced by the get full year
422:16 - method so that's how i knew to go to
422:18 - that git full year method as a
422:19 - replacement
422:23 - so in the previous section we talked
422:24 - about javascript dates and now we're
422:26 - talking about the built-in object called
422:29 - regular expression and this is not just
422:32 - a built-in javascript object this is an
422:35 - an entire topic
422:37 - like i almost think of this as um
422:39 - another language that you're kind of
422:41 - trying to learn in programming it's
422:44 - obviously not turing complete or
422:45 - anything but regular expressions are
422:48 - basically a way to pattern match within
422:51 - strings
422:52 - and you might be asking well why would
422:55 - we want to do that
422:56 - and to show you why let me just open up
422:59 - a web application we'll just go to
423:03 - you need a budget
423:05 - and this is a budgeting app that i use
423:07 - and really like
423:09 - but if you go to the login page
423:12 - log in right here
423:13 - and you type in your email address but
423:16 - you type it in incorrectly it's going to
423:18 - say please enter a valid email address
423:22 - and you might be asking well
423:24 - how does it know what is an invalid
423:26 - email address
423:28 - it you know you may go through a bunch
423:30 - of different
423:31 - you know types of emails like a big long
423:33 - list of emails that's probably not going
423:36 - to be efficient of course but what we
423:38 - can do is we can use regular expressions
423:41 - to pattern match and basically say okay
423:43 - i expect to see
423:46 - these certain characters and then an at
423:48 - symbol because every email address has
423:50 - an at symbol and then some sort of valid
423:54 - domain or whatever for that email
423:56 - address so we can pattern match and
423:58 - that's why regular expressions are so
424:01 - powerful you can validate emails and you
424:03 - can also do a whole host of other things
424:06 - it's great for validation but it's not
424:08 - only for validation now as we're going
424:10 - through this just keep this in mind
424:13 - this is a very loaded topic as i said
424:15 - and you don't need to fully understand
424:18 - how to write these regular expressions
424:20 - it's really not a high priority thing
424:22 - for you right now if you're trying to
424:23 - learn how to code because you can get
424:25 - away without regular expressions
424:28 - while writing web apps they're just very
424:30 - nice to have they can really speed up
424:32 - your workflow uh down the road and you
424:34 - need to be at least exposed to them so
424:37 - all i ask here in this video is you
424:38 - understand what they are what they do
424:41 - and just how to read them in general
424:43 - just kind of understanding the symbols
424:45 - and be able to piece together what a
424:47 - regular expression is doing i wouldn't
424:50 - worry about
424:51 - learning and mastering how to write them
424:53 - so if we go to the javascript
424:54 - documentation
424:56 - let's see here we'll go to technologies
424:59 - javascript as we've been doing i'm just
425:01 - kind of reiterating this then you go to
425:04 - built-in objects and then we can go down
425:06 - to
425:07 - the regular expression object which is
425:10 - going to
425:11 - be reg exp
425:14 - and it says it's an object used for
425:16 - matching text with a pattern so as i
425:19 - said pattern matching now let's go ahead
425:22 - and write a basic regular expression
425:25 - i'll show you how to do this here so
425:27 - we'll say email validator regular
425:30 - expression and this will be
425:32 - kind of similar to what we just looked
425:34 - at where it's validating whether the
425:37 - email address
425:38 - is correct now this implementation that
425:41 - i'm about to write is by no means
425:45 - exhaustive and it's definitely going to
425:46 - miss a couple cases and i guarantee you
425:49 - you know ynab or you need a budget is
425:52 - using a much more complex expression
425:54 - than the one that i'm about to show you
425:56 - here
425:57 - so
425:58 - anyways let's go through this and
426:01 - just get an idea of what we're dealing
426:03 - with so let's say that our user input
426:06 - this is what we type into the form so
426:08 - you know i go here i type into the form
426:10 - i type something that's what this user
426:13 - input variable is going to represent
426:16 - and i might put in something like
426:17 - invalid email at g
426:20 - and obviously this is not a valid email
426:23 - so we should reject this by using this
426:26 - regular expression so we'll say a new
426:29 - variable we'll say it's is valid and
426:32 - then what we have to do is we take our
426:35 - email validator regular expression from
426:37 - up here
426:38 - and we can use one of the built-in
426:40 - methods on it so if you come down to the
426:42 - left
426:43 - you can see all the different built-in
426:46 - methods and one of these
426:48 - if we go down to
426:51 - methods are we even on the right one
426:53 - here okay we're on regular expression
426:56 - okay i was just missing it completely so
426:59 - here are the methods
427:01 - these are pretty
427:02 - confusing to look at but the two that
427:04 - we're looking at here is going to be
427:05 - exec and test
427:08 - so we can use test to just see if
427:10 - something is valid so we're going to go
427:12 - ahead and do that we're going to use the
427:14 - test and then we're going to pass in our
427:16 - user input so we're saying take this
427:19 - regular expression or this pattern that
427:21 - we've defined
427:22 - and map it up against this string that
427:25 - we have defined and if you press enter
427:27 - it's going to
427:29 - and then show what the value is it's
427:30 - going to be false because this is an
427:32 - invalid email and that expression up
427:35 - there that regular expression did not
427:37 - match it now if we look at this regular
427:39 - expression there's all these characters
427:40 - which probably look like complete
427:42 - gibberish to you but i'll quickly walk
427:45 - you through what this is doing and then
427:46 - we'll go back to the basics and really
427:48 - understand it
427:50 - so this first character just says i want
427:52 - to start at the beginning of the line
427:54 - this period represents all characters
427:57 - and then this plus sign that comes
428:00 - directly after after the period says i
428:02 - want to match any character one or more
428:05 - times then we have the at symbol which
428:07 - is just looking for the at symbol and
428:10 - then we have this period again so we
428:12 - want um
428:14 - any character
428:15 - one or more times and then we use this
428:17 - slash to basically escape and actually
428:20 - look for a period so if you have
428:22 - gmail.com
428:24 - we need that period and in order for
428:26 - this special character to be escaped we
428:29 - have to use this uh backslash or right
428:31 - here
428:32 - and then we use another period for any
428:34 - characters one or more times and finally
428:37 - the end of the line with the dollar sign
428:40 - so i know that's super confusing i would
428:42 - never expect you to follow along with
428:44 - what i just said but just to give you a
428:46 - taste of what we're dealing with here
428:47 - all right so let's go kind of to the
428:49 - very basics here with
428:51 - regular expressions i like to think of
428:53 - it in two pieces
428:55 - so you have the identifiers and then you
428:58 - have the quantifiers
429:00 - and the identifiers can be one of a ton
429:04 - of different things it can be special
429:06 - characters or just the characters or
429:08 - phrases that you're trying to match
429:10 - these identifiers are what you're
429:11 - actually trying to pattern match within
429:14 - the string so if we created a regular
429:17 - expression we'll say new
429:19 - regular expression and then we're going
429:21 - to pass in the letter g
429:23 - and now i'm going to pass in a couple of
429:26 - strings here so
429:28 - we'll say string 1 and string 2
429:30 - and you'll see that if we're trying to
429:32 - match the letter g
429:34 - it only occurs in the second string
429:37 - right here so if we were to say the
429:40 - regular expression dot test and then
429:43 - pass in string one we're going to get
429:44 - false but if we test it against string
429:47 - two it's going to give us a value of
429:50 - true because it did in fact match the g
429:53 - in the middle of the string but in this
429:55 - case our regular expression is just
429:57 - taking a single character and looking
429:59 - for it which is probably not what you're
430:01 - going to be doing you're probably going
430:02 - to get a little bit more complex than
430:03 - that so maybe you test for an entire
430:06 - word so let's type another one so we'll
430:09 - say regex or
430:11 - regex2 some people would say regex some
430:14 - regex regular expressions whatever
430:17 - but anyways we're going to say
430:19 - this one is going to be equal to
430:22 - an entire word so in both strings we
430:25 - have the word favorite so now if we test
430:28 - the second
430:29 - regular expression
430:31 - up against both of the strings it's
430:33 - going to return true so no matter which
430:35 - string we put in there it's going to
430:36 - return true there
430:38 - as you can see so we can also match a
430:40 - full word
430:42 - in addition to just a single character
430:44 - but the interesting thing about regular
430:45 - expressions um or i guess maybe not
430:48 - interesting but important thing is that
430:49 - it's case sensitive so if i were to make
430:53 - another regular expression let me go
430:55 - ahead and just clear the screen for a
430:56 - second so we get some more room
430:59 - and let's say our regular expression is
431:01 - going to be equal to
431:04 - um
431:05 - favorite with capital letters at the
431:08 - beginning and the end and we of course
431:11 - need to bring in our strings again
431:13 - because we refresh the page
431:15 - but this count this time if we map up
431:17 - the regular expression and test it
431:20 - against string one we're going to get
431:21 - false because there are no capital
431:25 - there's no word in there called favorite
431:28 - that has a capital f and a capital e
431:30 - so you'll see string two also returns
431:33 - false so this is case sensitive you have
431:36 - to pay attention to the uppercase and
431:38 - lowercase letters now you don't have to
431:41 - just use single letters or single words
431:44 - or phrases you can use special
431:46 - characters and that's really where the
431:47 - power
431:48 - of a regular expression comes in so
431:50 - there are a
431:52 - multitude of special characters that we
431:54 - can use but i'm gonna put on the screen
431:57 - a couple of the really popular or common
432:00 - ones
432:01 - so the first one is going to be
432:04 - anything that we put in two brackets
432:07 - and another thing that i want to share
432:09 - here is that you don't have to write a
432:11 - regular expression like we did up here
432:14 - this is one way to do it just like we
432:16 - saw with the strings you can
432:18 - modify or create a string in two
432:20 - different ways
432:21 - now the more common way that we're going
432:23 - to be creating a regular expression is
432:25 - you put two forward slashes and then you
432:28 - put in your regular expression here so
432:31 - in this case i could put in g
432:33 - and that's going to be our regular
432:35 - expression that we wrote first we could
432:37 - also put in favorite and that's going to
432:40 - be a regular expression and as we saw
432:42 - you can actually execute methods on
432:45 - you know a literal
432:47 - like this so we can test
432:49 - string one against this but if we go
432:51 - back and lower case these letters
432:55 - now it's going to return true so this
432:57 - will be good for me to
432:59 - show this syntax so we can quickly loop
433:01 - through a bunch of different patterns
433:03 - here
433:04 - so we're just going to change the
433:05 - regular expression here and we're
433:07 - comparing it against string one
433:10 - the first thing you can do in a regular
433:11 - expression is a character group and all
433:14 - you do is have these two brackets and
433:16 - then whatever you define in that
433:18 - character group is going to apply to the
433:20 - regular expression
433:22 - so what we could say is a to z
433:26 - uppercase
433:27 - and what that is doing is matching all
433:29 - uppercase letters now in our string
433:32 - string 1 there are no uppercase letters
433:34 - so we return false because it doesn't
433:36 - match but we can also pass in
433:39 - uh a to z where we have all lowercase
433:42 - letters which obviously does uh does
433:44 - match at least one of these letters
433:47 - moving on we can also have
433:49 - 0 through 9
433:51 - which is going to match all numbers
433:53 - within a string now there's no numbers
433:55 - here so it's not going to match returns
433:57 - false
433:58 - and then you can combine these together
434:00 - so you can match all uppercase letters
434:03 - all lowercase letters
434:05 - all numbers and then you could even
434:06 - match spaces in here so if we added a
434:09 - space here we could match uh spaces and
434:12 - this is going to return true because
434:14 - we're matching the spaces the lowercase
434:16 - letters so on and so forth
434:18 - so that's what we're using with these
434:20 - brackets
434:21 - you have a lot of different options
434:24 - within those brackets now we talked
434:26 - about earlier that this period when used
434:28 - in the context of a regular expression
434:31 - represents any character
434:33 - whatsoever now this is going to return
434:36 - true
434:37 - because it represents any character
434:39 - now the next one we'll look at is
434:42 - backslash d and this is going to match
434:45 - all numbers this is equivalent
434:48 - to saying brackets 0 through 9. so it's
434:51 - completely equivalent just a different
434:53 - way to write it in this case there's no
434:55 - numbers so it returns false we also have
434:59 - backslash s which will match any white
435:01 - space characters there's spaces between
435:04 - the words in these strings so it does
435:07 - match
435:08 - then we also have
435:10 - backslash w which matches all letters
435:13 - and numbers so alphanumeric so these are
435:15 - just some shortcuts that you can use as
435:18 - i said when i was interpreting that
435:20 - email validator this little carrot
435:23 - represents the beginning of a string so
435:26 - if we put in the caret and then we put
435:28 - in an f it's going to return false
435:31 - because the first
435:32 - letter of the string word testing it
435:34 - again so string 1 is actually m
435:37 - now if we put in m it's going to return
435:40 - true
435:41 - but we could put in the f returns false
435:43 - because we're starting at the beginning
435:44 - of the line but if we take that out it
435:46 - then returns true because we're no
435:48 - longer constrained to the beginning of
435:51 - the line now what we could do also is
435:54 - the end of the line which is a dollar
435:56 - sign
435:57 - so
435:58 - f is not the last letter of this string
436:01 - it's actually
436:02 - k so that's how we would make that
436:04 - return true
436:06 - and then finally we have these uh little
436:08 - groups that we can make so if you put
436:10 - parentheses here and then you can say um
436:14 - you could say code
436:16 - or
436:17 - uh stake or something like that and
436:20 - that's going to match either code the
436:23 - word code or the word stake and in this
436:26 - case we're looking at string one
436:28 - stake is in there so it's going to match
436:30 - so those are just some of the different
436:32 - ways that we can write the identifiers
436:35 - and you can see how flexible this is and
436:37 - how creative you can get to match
436:39 - different um patterns within a string or
436:42 - like a line of text
436:45 - now the next thing in the the second
436:47 - piece of this equation is going to be
436:49 - quantifiers
436:51 - now so far we have been
436:53 - using this test method to basically show
436:57 - whether or not we have matched a certain
436:59 - character in the string
437:01 - but if we
437:02 - let's rewrite this here so
437:05 - let's say that we want to match
437:07 - um all lowercase letters which returns
437:10 - true that's all that's telling us is
437:12 - that in string one
437:14 - we have at least one lowercase character
437:17 - now if we come over here and change this
437:20 - test method to exec
437:22 - it's going to do a little bit different
437:25 - operation and you can read about this
437:27 - here in exec
437:28 - it shows you kind of what it returns the
437:31 - different values of this array that it
437:33 - returns but basically what this is
437:35 - telling us here is that all that it
437:37 - matched when we wrote this regular
437:39 - expression is the letter m because it
437:41 - started at the beginning of the string
437:43 - it matched that one lowercase character
437:45 - and it said okay that's all i need to
437:47 - match
437:48 - now if we want to match more than just
437:50 - one character we want to match a section
437:53 - of a string then we have to actually
437:56 - tell it that and the way we do that is
437:58 - through quantifiers so there are a
438:00 - couple different quantifiers and i'll
438:02 - try to roll through
438:03 - all of them and explain all of them just
438:05 - really quickly as this again is just an
438:08 - overview
438:09 - so the first one
438:11 - is a star
438:12 - and the way that this works is you put
438:15 - your
438:16 - identifier
438:18 - at the beginning and then you follow
438:20 - that by a star
438:21 - or another quantifier that you're trying
438:24 - to use and so what this is saying is
438:26 - that i expect or i'm trying to match uh
438:29 - any lowercase letter
438:31 - and the star is saying i want to match
438:34 - any lowercase
438:35 - letter 0 or more times
438:38 - so in this case it's you know since
438:40 - we're matching 0 or more of the
438:42 - preceding character it's pretty much
438:44 - going to return something every time now
438:47 - we can change this to a plus sign
438:50 - which is going to
438:52 - match one or more of the preceding
438:54 - character
438:55 - and then we can put a question mark to
438:58 - represent either zero or one
439:02 - quantity of that previous character and
439:04 - in this case you see that the
439:07 - matched value is going to be only the
439:09 - first letter because we're looking for 0
439:11 - or 1.
439:13 - now we can be explicit about this so we
439:15 - can say
439:16 - we want to match a certain amount of
439:19 - characters but before we do that i want
439:22 - to add a little space
439:24 - within this
439:26 - identifier because right now we're only
439:29 - matching
439:30 - this first word here so if we add a
439:33 - space in here now it's going to start
439:35 - matching the entire uh sentence or
439:38 - string
439:39 - so if we put in the plus sign you can
439:41 - see my favorite food is steak so it
439:43 - matches the entire string because
439:44 - they're all lowercase letters
439:46 - now if we wanted to be specific we
439:48 - wanted to match a certain amount all
439:51 - we'd have to do is these little brackets
439:53 - as a quantifier and then we can pass in
439:56 - a specific number so let's say that we
439:58 - wanted to match say five characters
440:01 - well it's going to get the first five
440:02 - characters so m y space that counts f a
440:06 - and that's going to match the first five
440:08 - characters now we can also do a range so
440:12 - we can say
440:13 - we want to match between two and six of
440:17 - the preceding character
440:19 - that we're looking at so it's just going
440:21 - to match 6 because that's the upper
440:24 - bound
440:25 - but you can match like a range of
440:27 - characters so these are all the
440:29 - different quantifiers
440:31 - and you can use these to take the
440:34 - pattern that you're matching and tell it
440:36 - how much of that pattern you want to
440:38 - match
440:39 - now before we go into kind of a final
440:41 - example to just tile the concepts
440:43 - together i want to show you one other
440:45 - thing
440:46 - and that is going to be in the
440:49 - documentation there is this thing called
440:52 - a flag
440:53 - so if you define a regular expression so
440:55 - we'll say our reg x is going to be equal
440:58 - to you know a new regular expression but
441:01 - we could also write it with these two
441:03 - slashes you can also pass in a flag and
441:07 - that goes at the end of these two
441:09 - slashes
441:10 - and here are all the possible flags
441:13 - in this case we might want to do a
441:15 - global search so it will search for the
441:17 - pattern
441:18 - even if it occurs multiple times and if
441:20 - you wanted to use that all you would
441:22 - have to do is write your regular
441:24 - expression here so we might say we want
441:26 - to match
441:27 - all lowercase letters
441:29 - one or more times and then at the end we
441:32 - put a g which represents that flag
441:35 - so that's just a
441:37 - a slight nuance to this and you'll see
441:39 - this so just be able to recognize it
441:42 - anyways let's move into a basic example
441:45 - where we can just apply those concepts
441:47 - of the identifiers and then the
441:48 - quantifiers and then we'll wrap it up
441:51 - for this uh section on regular
441:53 - expressions
441:54 - so we're going to write
441:56 - first a string so here's the string that
441:59 - we're going to uh want to match so we'll
442:01 - say
442:02 - hello world
442:04 - um
442:05 - and then let's put in
442:06 - a couple
442:08 - numbers
442:09 - 2021
442:11 - and then
442:12 - let's put in a couple spaces here
442:16 - and we'll put in i don't know
442:18 - we'll put an at symbol in here as well
442:22 - and then
442:23 - more of a string at the end and our goal
442:27 - is to basically write a regular
442:28 - expression that is going to match this
442:30 - entire string
442:32 - so we can do it in a multitude of ways
442:35 - but i'll just
442:37 - go with the most obvious ways that i can
442:39 - think of so we'll write our regular
442:41 - expression
442:42 - and we're going to use this syntax here
442:44 - so the first thing that we'll notice is
442:46 - that we have some lowercase letters
442:48 - to start
442:49 - so
442:51 - we can use the
442:53 - brackets here so this is again not the
442:55 - most simple way to do this but this will
442:59 - hit home all these concepts for you so
443:01 - we'll say that we want to match
443:03 - lowercase letters and spaces so let's
443:06 - add in that space right there and we
443:08 - want to match that
443:10 - one or more times
443:11 - and then um actually i'm going to
443:15 - um do this in real time so that we can
443:17 - see what's happening so instead of
443:20 - putting it in a variable we'll do it how
443:22 - we did it before so we're going to look
443:23 - at
443:25 - all lowercase letters and then add a
443:28 - space
443:29 - and then i'm going to
443:31 - execute that against the string so we
443:34 - can kind of begin to see what we're
443:36 - matching here
443:37 - so we're looking for
443:39 - all lowercase letters one or more times
443:41 - so we got the hello world then we're
443:44 - looking for a comma we can just put the
443:46 - comma in as it is
443:49 - then we're looking for some spaces and
443:52 - numbers so why don't we pass in 0 to 9
443:55 - and then another space and we want to
443:57 - match that one or more times
444:00 - and then we want to match the at symbol
444:03 - and then we want to match uh lowercase
444:06 - letters so
444:07 - again a to z
444:09 - and then we need a space in there
444:12 - and then we say one or more times and
444:14 - then for good measure this is not
444:16 - necessary but we can just put this
444:18 - little
444:19 - upwards carrot to indicate the beginning
444:21 - of the string and a dollar sign to
444:23 - indicate the end of the string
444:25 - you can see here that we have matched
444:27 - this entire string now of course we can
444:29 - do this a lot simpler all we need to do
444:32 - is put a period in there and a plus sign
444:35 - which matches any character
444:37 - one or more times and there we match the
444:39 - whole string but hopefully this was just
444:42 - a brief overview of a very basic
444:44 - explanation of regular expressions
444:47 - it's a built-in object within javascript
444:49 - like we talked about that you're going
444:51 - to stumble upon
444:52 - and eventually it may come in handy for
444:55 - you but most importantly just have an
444:57 - understanding of what they are what they
445:00 - do and how to read them
445:04 - so we've covered a lot in this lesson
445:05 - but we're finally making it to the
445:08 - string built-in object in javascript
445:11 - so again let's come to the beginning so
445:13 - technologies javascript
445:16 - built-in objects and then you go down to
445:18 - string
445:20 - right here so we kind of talked about
445:22 - the string object versus primitives got
445:24 - an overview of this but what we didn't
445:26 - do
445:27 - is talk about some of the methods that
445:29 - we can use on this string
445:31 - and what i want to do as i've been doing
445:33 - in this lesson
445:35 - all along is basically give you the most
445:38 - important methods the ones that i've
445:40 - used a lot myself that other developers
445:42 - use commonly and just give you a brief
445:45 - overview of them so that they're kind of
445:47 - in your memory bank and you have them
445:48 - for recall
445:50 - later when you have to use them in your
445:52 - code or maybe some code challenges or
445:54 - interviews or whatever so
445:57 - we're looking at strings and you can see
445:59 - there are a lot of different string
446:01 - methods that we can
446:04 - use
446:05 - and again this little downwards thumb
446:07 - means that it's a deprecated method so
446:10 - don't go trying to use
446:12 - any of those
446:14 - but again there's a lot of them here and
446:16 - i want to point out some of the most
446:18 - important ones so what we're going to be
446:20 - looking at
446:21 - let's go ahead and refresh this
446:25 - oh i don't know what i've done here
446:27 - okay there we go
446:29 - we'll clear the screen
446:31 - and what we're going to be looking at is
446:32 - the replace all method we're going to
446:34 - look at the two uppercase method
446:38 - the substring method the trim method and
446:40 - the match method so that's what we're
446:42 - going to be covering here and again just
446:44 - basic examples of each as we go through
446:47 - these i'm going to show you the
446:48 - documentation first because i really
446:50 - want you to get used to
446:53 - reading it and understanding how it's
446:55 - working so let's go to the replace all
446:57 - method
446:58 - it says
446:59 - this method returns a new string with
447:02 - with all matches of a pattern replaced
447:04 - by replacement
447:06 - the pattern can be a string or a regular
447:09 - expression so we just learned about that
447:12 - and the replacement can be a string or a
447:14 - function to be called
447:15 - for each match now we're not going to
447:17 - get into that function piece that's a
447:19 - little bit complicated but if we look at
447:22 - the syntax here you'll see some new
447:24 - symbols here so this little pipe
447:27 - means that there are multiple types of
447:30 - parameters that you can pass in
447:33 - or not multiple types of parameters
447:35 - because obviously there are multiple
447:37 - parameters but
447:38 - for this single parameter there's
447:40 - multiple types of data that you can pass
447:43 - in
447:44 - so in this case it's saying either a
447:45 - regular expression
447:47 - or just a string to match and then the
447:50 - second parameter so we have the comma
447:52 - here to say okay we're on a new
447:53 - parameter
447:55 - a new sub string so just a regular
447:57 - string or a function that will return
448:00 - basically whatever we want to replace it
448:03 - with
448:04 - so come down here to the parameters you
448:05 - can read a little bit more about that
448:07 - but we don't need to because i'm going
448:09 - to show you how to use it
448:10 - so let's go ahead and define a string
448:13 - really quickly so
448:15 - we'll say my dog jumped on the bed
448:18 - my dog is a
448:21 - bad dog all right and you'll notice that
448:23 - i have some weird capitalization in here
448:25 - which is going to be what we're
448:27 - replacing
448:28 - so we want to say we want a new string
448:31 - and then for the string we want to
448:33 - replace all so this is different from
448:35 - the replace method because
448:38 - obviously we're replacing all
448:40 - occurrences of the match rather than
448:41 - just the first and that's why i use this
448:44 - one
448:45 - more frequently because in most cases i
448:47 - want to replace all rather than just the
448:49 - first match
448:50 - so in this case we could just say we
448:53 - want to replace the word dog with cat
448:56 - and that's going to assign the new
448:58 - string
448:59 - to our variable and you're going to see
449:01 - my cat jumped on the bed my dog is a bad
449:03 - cat which obviously makes no sense
449:05 - whatsoever because we missed one and
449:08 - that's because this is case sensitive
449:10 - but what we can do is write a regular
449:13 - expression and we just learned about
449:14 - that so we might as well do it
449:16 - all right so we're going to say
449:19 - correct string
449:22 - equals my string dot replace all and
449:26 - then in this case we're going to pass in
449:27 - a regular expression and then we're
449:29 - going to replace that with uh lowercase
449:32 - cat so all occurrences of the the word
449:36 - dog uppercase and lowercase are going to
449:38 - be replaced with this right here so in
449:41 - this regular expression we're going to
449:43 - put a character group
449:44 - and we're going to say we want either an
449:46 - uppercase d or a lowercase d
449:49 - and then we want to match exactly so
449:52 - we're going to put these little brackets
449:54 - and put a 1 in there so we're going to
449:56 - match exactly one
449:58 - of these characters either uppercase or
450:00 - lowercase and then we're just going to
450:02 - pass in
450:03 - og because it's always going to end in
450:06 - og in the lower case form
450:09 - so then we're going to finally pass in
450:12 - let's see we need to pass in the global
450:14 - flag because we want to
450:16 - replace or find all instance of
450:19 - instances of that
450:21 - so let's go ahead and press enter and
450:23 - see what we got
450:26 - so the correct string it looks like we
450:28 - have cat in all of these instances so we
450:31 - replaced it correctly again this g at
450:33 - the end is just the global flag
450:36 - and
450:37 - there's a bunch of different flags that
450:39 - you can bring into a regular expression
450:40 - but this just means
450:42 - match all occurrences not just the first
450:45 - the next method we're looking at is the
450:47 - two uppercase method this is a pretty
450:49 - easy one
450:50 - let's go to the documentation take a
450:53 - look
450:54 - it says two upper case returns the
450:56 - calling string value converted to
450:58 - uppercase
451:00 - and the value will be converted to a
451:02 - string if it isn't one all right so very
451:05 - simple um
451:06 - very simple function here
451:08 - and we can pretty much figure out what
451:10 - it does by just experimenting around so
451:13 - we'll say
451:14 - that we want my string to be equal to
451:18 - some string
451:19 - and then all we do
451:21 - oh it's saying i redeclared my string so
451:24 - i need to refresh the browser
451:26 - because i already did that so
451:28 - my string equals some string and then we
451:32 - say my string dot 2
451:35 - upper case
451:36 - and you'll see that it capitalizes every
451:38 - single character within that string so
451:40 - it's very straightforward
451:42 - you'll see where this comes in handy in
451:44 - just a second so the next one we're
451:46 - looking at is the substring method i use
451:48 - this quite a bit
451:49 - if we go to the documentation you're
451:51 - going to see
451:52 - that there are actually two methods and
451:54 - if you have been following along with
451:56 - this tutorial in the prior video the 25
452:00 - challenges
452:01 - i actually used the wrong method here so
452:04 - you can see that we have the two methods
452:06 - we have the substring and then we have
452:08 - sub str
452:09 - and this sub sdr has the little
452:12 - downwards thumb which means don't use it
452:15 - it's deprecated and of course i used it
452:17 - in the previous video so
452:19 - apologize for that but we're going to be
452:20 - using the non-deprecated method and it
452:23 - says it returns the part of the string
452:25 - between the start and end end
452:27 - indices
452:29 - so if we go down to the
452:31 - function signature
452:32 - you can see that there's one required
452:35 - parameter it's not surrounded by those
452:36 - brackets and then one
452:39 - optional parameter and these represent
452:41 - the index of the first character that we
452:44 - want to include in the return string and
452:46 - then the last character if we
452:49 - want that otherwise it's just going to
452:50 - take everything
452:52 - after that first character
452:54 - so let's go ahead and give this a try
452:57 - um we'll use the same string here so
452:59 - we'll say my string
453:00 - dot substring and let's say that we want
453:02 - to get um
453:05 - everything
453:06 - starting at
453:08 - i don't know the letter m so if you
453:10 - think about this the s has an index of
453:13 - zero
453:14 - the o has an index of one m will be
453:18 - two e three the space will be four
453:22 - and the second s will be five so maybe
453:25 - we'll start it at five so we just get
453:27 - the second word
453:28 - and then if we don't pass in the second
453:31 - parameter it just goes to the end of the
453:32 - string which is kind of what we want but
453:35 - you could also
453:36 - pass in something like 7 and it kind of
453:38 - cuts it off there so that's kind of how
453:40 - the substring method works
453:42 - now i want to provide you with some
453:45 - common ways that we might use all these
453:47 - methods
453:48 - and one of the common ways that i've
453:50 - found to use the substring method
453:53 - is if you want to maybe capitalize the
453:55 - first
453:56 - word of a sentence so let's say that we
453:58 - wanted to take my string which is some
454:02 - string with all lower case and we just
454:04 - wanted to capitalize this s
454:06 - and combine that into the full stream so
454:09 - basically what we're looking for is this
454:12 - right here
454:13 - now if we wanted to convert that here's
454:16 - what we would do we would say
454:18 - let's just assign it to a result
454:19 - variable
454:20 - so we will say my string
454:23 - and then we want to grab the
454:25 - first letter of the entire string which
454:28 - is going to be that s
454:30 - now we're going to use that to uppercase
454:32 - method that we saw in the previous
454:36 - method right there and what that's going
454:38 - to do is it's going to grab that s and
454:40 - then it's going to capitalize it
454:42 - so all we're getting right now is a
454:44 - single letter so we can use the plus
454:46 - sign we can concatenate
454:49 - two strings together
454:50 - so now we have to get the remainder of
454:53 - the string right here
454:55 - and the way that we do that is using the
454:56 - substring method
454:58 - so we'll say my string
455:01 - and then we want to use the substring
455:02 - method and we want to start at an index
455:05 - of one because we've already got the
455:07 - first uh the zeroth index of s so we
455:10 - want to start the sub string at one all
455:13 - right and then we can go to the end of
455:16 - the string so all we would have to do is
455:19 - basically just leave it like that and
455:20 - we're done but if you i don't know maybe
455:23 - have a good reason to do this you could
455:25 - also grab
455:27 - my string
455:29 - dot length to get the very last
455:31 - character in the string as our bounds of
455:34 - that substring so if you press enter and
455:36 - then you type out result you can see
455:38 - that we have capitalized uh this string
455:41 - or sentence if it was longer so that's
455:44 - just a common use case of the substring
455:46 - method combined with the two upper case
455:48 - method and you can start to see how when
455:51 - we combine them together it makes our
455:52 - job a lot easier
455:54 - the next method we're talking about is
455:56 - the trim method and this may not seem
455:59 - all that useful when we first start
456:01 - looking at it but i will
456:03 - show you why we might use this in the
456:04 - real world so the trim method removes
456:07 - white space from both ends of a string
456:09 - notice it says both ends it doesn't
456:11 - remove white space from in the middle of
456:13 - the string
456:15 - white space in this context is all white
456:17 - space characters space tab no break
456:19 - space etc
456:22 - and all the line terminator characters
456:24 - so
456:25 - a carriage return here but we don't need
456:27 - to worry about that
456:29 - and the call signature the function
456:31 - signature is very simple you just call
456:34 - it on the string and it removes the
456:35 - white space
456:36 - so again you might say well this is not
456:38 - very useful but what if we got some
456:41 - external data that looked like this
456:44 - so this might be some data that you
456:45 - retrieved from an external database or
456:48 - something and you have no control over
456:50 - how you receive it
456:52 - and in this case we have some spaces um
456:56 - in these strings so how would we go
456:58 - about removing those in returning an
457:01 - object that has uh kind of a cleaned up
457:04 - piece of data well we can do that using
457:08 - a loop and the trim method
457:11 - so let's just write a loop a for loop so
457:14 - we did this a lot in the challenges the
457:17 - code challenges from the last lesson
457:19 - and then we
457:20 - also learned it in the last lesson so
457:24 - you should be familiar with this
457:26 - so we're going to write the loop
457:28 - i plus plus
457:31 - now we're going to loop through each
457:32 - piece of data and what i'm going to do
457:34 - is actually break this out so i'm going
457:37 - to say the current title is going to be
457:39 - equal to external data
457:44 - then we're going to grab the index that
457:46 - we're on dot title
457:48 - and then we're going to go down and
457:50 - we're going to grab the current
457:53 - author
457:54 - equals external
457:56 - data i
457:58 - dot author
458:00 - now we're coming down here and this is
458:02 - where we're going to
458:04 - reassign the values of these properties
458:07 - to the trimmed version of them
458:09 - so we're just going to say the external
458:12 - data i
458:14 - dot
458:15 - title
458:16 - is going to be equal to the current
458:18 - title dot trim
458:20 - so it's going to trim the white space
458:22 - and assign it back to that property
458:25 - then we'll do the same thing for the
458:26 - author so external data
458:29 - dot author equals the current author
458:32 - that we're iterating over
458:34 - dot trim
458:35 - and there is our for loop so if we print
458:38 - out external data we look at the array
458:41 - here you're going to see that all of
458:43 - these values have been trimmed of the
458:45 - white space
458:46 - so that's just
458:48 - a way that i've used it in the past
458:50 - something that has come in handy for me
458:52 - so i just wanted to show you that method
458:54 - for that reason
458:56 - now the final method that we're going to
458:58 - look at the built-in method on a string
459:00 - object is the match method now this is
459:03 - going to be very familiar to you because
459:04 - we learned about regular expressions
459:06 - already so i'm going to actually bring
459:08 - in something that we've already looked
459:10 - at here so let's write a regular
459:12 - expression and we'll just say
459:15 - we want to match uh any lowercase
459:17 - characters in a quantity of one or more
459:21 - and that's going to be our regular
459:22 - expression and then our string is going
459:25 - to just be a bunch of gibberish write
459:28 - this correctly a bunch of gibberish and
459:30 - then maybe some numbers in here and then
459:32 - some more
459:33 - gibberish letters all right so there's
459:36 - our string
459:37 - and there are actually two ways that we
459:39 - can test this the first way is something
459:42 - we've already seen where we just run the
459:44 - exec method on the string and of course
459:47 - since we're matching lowercase letters
459:49 - in a quantity of one or more it's going
459:51 - to grab all of these until it gets to
459:53 - the numbers and then it no longer
459:55 - matches
459:56 - so that's one way we could do it
459:58 - but we can also do it in reverse like it
460:02 - does the same exact thing except we're
460:04 - doing it from the string method so all
460:06 - we have to do is say string.match
460:09 - and then we pass in the regular
460:10 - expression and it's going to show us
460:13 - kind of the same thing
460:14 - now this is going to be exactly the same
460:18 - as long as you are not using the global
460:20 - flag so if we were to put in um
460:24 - let's say you know if we defined the
460:27 - regular expression
460:29 - and we put in a to z
460:31 - you know one or more and then we put
460:32 - this global flag in there that would be
460:34 - when these two methods
460:36 - do not behave identical but for our
460:39 - intents and purposes you can use either
460:42 - one it really doesn't matter just pick
460:44 - one and go with it
460:47 - to this point in this lesson we've
460:49 - talked about dates regular expressions
460:51 - and built-in string methods but we
460:53 - haven't talked about arrays and this is
460:55 - where
460:56 - it gets really fun now i will say that
460:59 - this list of methods that we're going to
461:02 - be going through you can actually see
461:03 - them on the screen
461:05 - all these different methods here
461:07 - so we have the push pop shift and on
461:09 - shift those are kind of grouped together
461:11 - we have slice splice
461:13 - these are actually different we have
461:15 - find index and index of they're kind of
461:17 - grouped together map for each includes
461:20 - filter and reduce and i chose these
461:23 - because these are the ones that you're
461:24 - going to be using
461:26 - most of the time and these represent
461:28 - kind of the bulk um you know if we can
461:30 - kind of go with that whole 80 20 rule
461:32 - this is this is the 80 20 rule of array
461:35 - methods and it's obviously not
461:38 - exhaustive
461:39 - and i'm not going to go into every last
461:41 - detail of each method but i hope that
461:44 - this can basically walk you through the
461:46 - basics of each so that when you have to
461:48 - use them it's not a complete shock you
461:50 - kind of know what's available to you
461:53 - which is kind of half the battle
461:54 - sometimes just remember these are not to
461:56 - memorize don't try to memorize these
461:59 - like any built-in method you can always
462:01 - look them up and as i've been going
462:03 - through in this video you know how to
462:05 - read the documentation now and i'll
462:07 - continue doing that for each of these
462:09 - array methods so that you can just get
462:10 - better and better at um you know
462:13 - acquainting yourself with
462:15 - the different
462:16 - syntax of this documentation so let's
462:19 - get started we'll start with the push
462:21 - pop
462:22 - shift and unshift methods and we're not
462:24 - going to really go through all of these
462:26 - in the documentation because they're so
462:28 - similar but let's go to javascript again
462:31 - built-in objects and we're going to the
462:33 - array object which has instance methods
462:35 - that we're going to be looking at here
462:38 - all right
462:39 - so we will start with pop we've actually
462:41 - already looked at this when we talked
462:43 - about reading documentation this is
462:45 - going to remove the last element from an
462:47 - array
462:48 - now we also have
462:50 - shift
462:51 - right here this is going to remove the
462:54 - first element of the array
462:56 - then you have the method that we're
462:58 - going to be using the most out of all of
463:00 - these
463:01 - which is the push method this just takes
463:04 - an element
463:05 - and
463:05 - or an element or more than one element
463:08 - and adds it to the end of the existing
463:10 - array and then finally the unshift
463:14 - method
463:16 - down here somewhere
463:17 - this is going to add an element or
463:19 - elements at the beginning of the array
463:22 - again i think the push method is
463:23 - probably going to be the most widely
463:26 - used but let's just go ahead and see
463:28 - what we're dealing with here
463:30 - so we'll make an array
463:32 - we'll add three elements in there
463:34 - and
463:36 - maybe
463:38 - let's go ahead and put a gap in there so
463:40 - we'll skip four and we'll put in
463:42 - five and six or something like that all
463:45 - right so there's our array so what if we
463:47 - wanted to
463:48 - um basically add the four in there so
463:51 - basically all we have to do is array.pop
463:54 - that's going to take off the six and it
463:57 - returns six not because the value is six
463:59 - but because there are
464:01 - um six elements or maybe maybe it did it
464:04 - does return the element that they that
464:07 - it removed from the array i'm sorry
464:08 - about that all right anyways we will go
464:11 - and do that again
464:13 - because we need to remove one more so
464:16 - now our array looks like this we just
464:18 - have one two three and now we can push 4
464:22 - 5 and 6 to the end and we are back to
464:25 - what we started with but this time it
464:27 - has all of the
464:29 - numbers in order
464:31 - so of course we can add the zero at the
464:34 - beginning so we just say array dot
464:36 - unshift put a zero in there and now our
464:39 - array has zero through six so you can
464:41 - kind of get an idea of how this works
464:44 - and there's not a whole lot to it all
464:46 - right let's move on to the slice method
464:49 - now this one is going to come in handy
464:52 - when you need to make a copy of an array
464:54 - and this is not going to be apparent why
464:56 - this is useful right now but once you
464:58 - start getting into
465:00 - front-end programming where you're
465:02 - writing code in either angular or react
465:05 - or
465:06 - view js or something like that there's
465:09 - this concept that we call state which
465:12 - basically
465:13 - um
465:14 - it's how the data flows through the
465:17 - front end of your application and when a
465:19 - user updates their profile or whatever
465:22 - and that data update affects another
465:24 - part of the application
465:26 - the state is what makes those changes
465:30 - propagated across the entire application
465:32 - and when we're dealing with state we
465:34 - often a deal
465:35 - are dealing with immutable objects
465:38 - things that cannot be changed
465:40 - so making a copy of the data that you're
465:44 - putting into state is going to be
465:46 - extremely useful and to do that you can
465:48 - use this slice method so let's look at
465:50 - it
465:51 - in the documentation we'll go to slice
465:55 - it says it returns a shallow copy of a
465:57 - portion of an array when it says shallow
465:59 - here that just means that you have like
466:01 - if you have nested objects or arrays
466:04 - it's not going to
466:05 - pick up on those it only gets like the
466:07 - first layer or whatever um you'll need a
466:10 - more advanced method to do like a deep
466:12 - copy of an object and i'll talk about
466:15 - that a little bit
466:17 - later in this lesson so basically what
466:19 - it's doing is it's taking two optional
466:21 - parameters
466:23 - so if we
466:24 - don't supply any sort of parameters at
466:27 - all
466:28 - then it's just going to let's see what
466:30 - it says so if we don't put any
466:33 - parameters at all it's just going to
466:34 - create a copy of the entire thing
466:37 - otherwise it will create a copy of a
466:39 - specific part of an array so let's see
466:42 - how this works we have an array already
466:45 - right here but
466:47 - let's say that we wanted to take out 2
466:50 - 3 and 4 or something like that so we've
466:53 - already got an array on the screen and
466:55 - let's say that we wanted to make a copy
466:58 - of the entire thing so we can say copy
467:01 - of the array is going to be array.slice
467:04 - we don't need to pass in any parameters
467:06 - because we just want the entire thing
467:08 - and now the copy of the array is going
467:10 - to be a perfect copy
467:12 - now if you were to compare these so copy
467:15 - of the array
467:17 - versus the array they're not going to be
467:18 - equal so i say that loosely but that is
467:21 - a concept that we talked about when we
467:23 - looked at the javascript operators in a
467:25 - previous lesson
467:27 - all right so if we wanted to grab like a
467:29 - specific part of this array so another
467:32 - copy
467:33 - and we want to grab
467:35 - everything starting at 3 until the end
467:38 - of the array you might say slice and
467:40 - then you want to give it an index of
467:43 - not 0 not 1 not 2 but you want to start
467:46 - at 3 so you want to give it an index of
467:48 - 3
467:49 - and now another copy is going to be
467:51 - equal to three four five six
467:53 - so that's just a
467:55 - quick overview of the slice method the
467:58 - next method that we're dealing with is
468:00 - called splice and it is not to be
468:02 - confused with slice so if we go to the
468:06 - documentation
468:07 - click on splice it will say that this
468:10 - method changes the contents of an array
468:12 - by removing or replacing
468:14 - existing elements and or adding new
468:16 - elements in place
468:18 - so in other words this is useful if
468:20 - unshift and push those two methods we
468:23 - learned about are not sufficient you
468:25 - want to actually replace something in
468:27 - the middle of the array rather than just
468:28 - the beginning or the end now i want to
468:30 - look at the function signature on this
468:32 - one because it's kind of interesting
468:34 - so it's there's a lot going on but the
468:37 - only required parameter is the start
468:40 - which is the index at which you want to
468:42 - start changing the array
468:44 - then
468:45 - the comma here it says we're going to a
468:47 - new parameter we want the delete count
468:50 - so it's basically saying we want to
468:52 - start at a specific index and now we
468:56 - need to specify how many items of that
468:58 - array are we going to delete starting at
469:01 - that index now if we don't provide this
469:03 - because it is entirely optional
469:06 - it says if this is omitted or if its
469:08 - value is equal to or larger than the
469:11 - array.length minus the start we don't
469:14 - need to get into that then all the
469:16 - elements from start to the end of the
469:17 - array will be deleted so let's say that
469:20 - we you know specified the start as index
469:24 - of one then it's going to basically
469:27 - delete everything except for that first
469:29 - element
469:30 - so
469:31 - the next part that we have are these
469:34 - interesting brackets where we just have
469:36 - item one item two and then the dot dot
469:38 - dot this is basically saying that you
469:41 - can have an infinite number of
469:43 - parameters
469:44 - that you can replace
469:46 - and it looks like if we come down here
469:48 - to item one two
469:50 - dot dot dot it says the elements to add
469:52 - to the array beginning from start if you
469:54 - do not specify any elements splice will
469:56 - only remove elements from the array so
469:59 - this kind of changes the behavior of the
470:02 - entire method we go from removing
470:04 - elements to adding elements to the array
470:07 - so you can see how reading the
470:08 - documentation can be very helpful
470:11 - in our case we're just going to go
470:12 - through a basic example so we'll say
470:14 - that our array is going to be equal to 1
470:17 - 2
470:18 - 3
470:19 - and then we'll put in some string that
470:21 - doesn't belong there 4 5 6.
470:24 - all right so what if we wanted to well
470:27 - hold on
470:28 - i cleared the screen but did not refresh
470:31 - and i tried to redeclare that array
470:34 - variable so let's try again so one two
470:36 - three
470:39 - four five six
470:42 - and what if we wanted to remove that
470:44 - string from there so all we'd have to do
470:46 - is array dot splice
470:48 - and then we want to specify that we want
470:50 - to start at the index of three so this
470:52 - is 0
470:54 - 1
470:55 - 2
470:55 - and then 3 so we want to start at the
470:58 - index of 3 we want to remove
471:01 - a single element so we just want to put
471:03 - in a 1 right there
471:05 - and then at the end we can put in
471:08 - um let's say what we want to replace it
471:11 - with so in this case we want to remove
471:14 - this string and replace it with
471:16 - something so maybe something in between
471:18 - we'll put 3.5 or something
471:20 - all right so it returns the
471:23 - item that was removed and now our new
471:25 - array
471:26 - has the replacement value in there
471:29 - so at this point i think it's a good
471:31 - time to just briefly mention um the fact
471:35 - that we are mutating this array right
471:37 - here
471:38 - now when we looked at string methods
471:40 - none of those methods actually
471:43 - modified the existing string and that is
471:46 - because an array is not a primitive
471:49 - value now a string is a primitive value
471:52 - and for that reason it is immutable and
471:54 - you cannot change it now an array is
471:58 - mutable so that means that these methods
472:00 - that we're using are actually editing
472:02 - the array itself and
472:05 - you don't have to basically create
472:07 - copies
472:08 - you could if you use the slice method
472:10 - though
472:11 - all right so the next one that we're
472:13 - dealing with
472:15 - is going to be the find index and index
472:17 - of method so here's the find index
472:20 - it returns the index of the first
472:23 - element so only one that status
472:25 - satisfies the provided testing function
472:29 - all right so this is where we start
472:30 - getting into the callback functions that
472:32 - i talked about so if you don't
472:34 - understand callback functions be sure to
472:36 - go to that prior part of the lesson here
472:39 - and really
472:40 - wrap your head around those because from
472:42 - here moving forward we're going to be
472:44 - dealing with them in pretty much every
472:46 - array method
472:47 - anyways it says if there's no match so
472:51 - if your testing function does not match
472:53 - an element
472:54 - you're going to get a value of negative
472:56 - 1. so we know that if this
472:58 - method returns us negative 1 then what
473:01 - we're trying to match does not exist in
473:03 - the array otherwise we get the index
473:05 - to grab it from now this is kind of
473:08 - similar so the find index is kind of
473:10 - similar to the index of method so if we
473:12 - come down here and grab the index of
473:14 - method
473:15 - it's just going to return
473:18 - the first index where the given element
473:20 - is found there's no such thing as this
473:22 - you know callback function that matches
473:24 - or anything we're just searching for a
473:27 - specific string
473:29 - and again this will return negative 1 if
473:31 - that is not present now this is a little
473:34 - bit less powerful and like i said
473:37 - callback functions enable reusability in
473:40 - this case we just search for a raw
473:42 - string
473:43 - with the find index we can specify an
473:46 - entire testing function so in this case
473:49 - if you can grasp your head around these
473:51 - callback functions the find index is
473:53 - going to be a little bit more powerful
473:54 - for you so let's see if we can come up
473:57 - with a good example for this we'll use
474:00 - what we got for the index of method so
474:02 - again array is equal to this right here
474:05 - and we could just say array
474:07 - index of and maybe we want to look for
474:10 - that value of 3.5
474:12 - and it's going to give us an index of 3.
474:15 - so what we could do here is we could
474:17 - basically say okay i want to get that
474:21 - value here so we can say array then we
474:23 - can use the bracket notation we
474:25 - obviously have to pass in an index
474:28 - and then we can find this index it's
474:30 - kind of
474:31 - circular here but i'm just trying to
474:33 - show you how this might be used
474:35 - and then we pass in there and now we can
474:38 - actually get the value so previously we
474:41 - just looked at for the index right here
474:43 - but now we're actually getting the value
474:45 - returned because we used that index and
474:48 - grabbed it from the array
474:49 - all right so that's how you use index of
474:52 - now let's talk about how you might use
474:54 - the find index method for a little bit
474:56 - more powerful search
474:58 - now what if you had a more complex array
475:01 - um like this
475:02 - this is obviously got a lot more to it
475:04 - it's got objects that have two
475:06 - properties first name and last name now
475:09 - if you tried to use the
475:11 - index of method so more complex array
475:14 - and then you used index of and then you
475:16 - started putting an object in here and
475:18 - typing out first name
475:21 - equals bob so on and so forth you're not
475:23 - going to get a match it will never match
475:25 - because you can't do that kind of
475:27 - equality comparison
475:29 - so all we have to do is use the find
475:32 - index so this is going to return us the
475:34 - index of the first match that we have
475:37 - identified within this array so let's
475:39 - say that we want to identify
475:42 - any
475:43 - or we want to identify the first item in
475:45 - this array where the last name
475:49 - does not equal smith
475:51 - so that's obviously the last
475:53 - value and that would be the zero one to
475:56 - third index so we expect an index of
475:59 - three to be returned
476:01 - and what this expects is an argument if
476:03 - we go to the find index again
476:06 - you'll see that we
476:08 - need to return a call back and that
476:11 - callback is going to have a couple of
476:14 - arguments that we can use here so let's
476:17 - look at this real quick
476:19 - the callback has an element so that's
476:21 - the current element being processed in
476:23 - the array that's not new to us
476:26 - we have the index of the array we don't
476:28 - probably don't need that and then we
476:29 - have the original
476:31 - array that we're looking at and we
476:33 - probably don't need that as well
476:35 - and then finally we have
476:37 - another argument after the callback and
476:39 - it says optional object to use as this
476:42 - when executing the callback we haven't
476:43 - talked about
476:45 - this keyword yet so we're not going to
476:47 - worry about that
476:48 - all right so we need to pass in a
476:50 - callback
476:51 - let's go ahead and populate that
476:54 - with the array item and that's all we're
476:57 - going to use here we could have passed
476:59 - in the index and the original array but
477:01 - we don't need to and then in this case
477:03 - since we're searching for anything that
477:06 - does not equal smith we can just say
477:08 - where array item dot last name does not
477:12 - equal
477:14 - smith
477:16 - all right so what this is going to do is
477:17 - return us a value of 3 which is the
477:20 - index of the first element that is not
477:22 - smith which happens to be this last
477:26 - object down here john doe so you can see
477:28 - how powerful this is as compared to the
477:31 - index of method
477:32 - there's a lot more things you can do
477:34 - with it but as i said this is just an
477:36 - overview of each method
477:38 - the next method we're looking at is the
477:40 - map method now we've already looked at
477:42 - this in the documentation a little bit
477:44 - earlier in this lesson
477:46 - let's look at it once more
477:48 - this was the method we kind of used to
477:49 - prove out the reusability thing
477:52 - but basically if we look at the
477:54 - parameters that we can put in here it
477:56 - says that we have a callback function
477:59 - and then similar to the um
478:02 - the previous method we just looked at we
478:03 - have
478:04 - the this arg which we haven't covered
478:07 - anything about that so we're not going
478:08 - to get into it so basically if you
478:10 - remember this is just a transformation
478:12 - function and it's going to loop through
478:13 - an array and
478:15 - perform a transformation
478:17 - according to your callback function on
478:19 - each element in the array
478:21 - so let's consider this array right here
478:24 - where we have blog posts from a database
478:26 - and in this case all of them are
478:28 - uncategorized so what if we wanted to
478:31 - return a new array but in the new array
478:34 - the category is going to be set to
478:37 - something like web development
478:39 - well all we'd have to do is use the map
478:42 - method now of course you could you know
478:44 - type it out and say blog post from
478:47 - database
478:49 - and then
478:50 - goes at 0 and then type in the
478:53 - category and set it equal to something
478:55 - but that's going to get really clunky
478:56 - and slow
478:57 - so what we need to do is say blog post
479:00 - from database
479:02 - dot map
479:03 - now this is where we pass in our map
479:05 - function so we're going to pass in the
479:07 - array
479:08 - item
479:10 - so as we go through each item the first
479:12 - thing that we need to do is we need to
479:14 - modify that actual property and then we
479:17 - need to return
479:19 - the item in full so we'll say array item
479:22 - dot category
479:24 - equals
479:26 - web development all right so there we
479:28 - have modified this individual array
479:30 - items category property
479:33 - and now we're going to return the array
479:35 - item which has been modified all right
479:38 - so we'll press enter and now you can see
479:40 - this map function returns the following
479:42 - array and in this case we now have the
479:45 - category updated for all of these
479:47 - properties
479:49 - so this would be a really useful
479:50 - function to do
479:52 - in the real world and i've actually used
479:54 - something very similar to this example
479:57 - in some of my apps so it's
479:59 - super realistic and super helpful it
480:02 - will save you a lot of time next up in
480:04 - our lineup is the for each method and
480:07 - until this point we've been looking at
480:09 - arrays
480:10 - and looping through arrays in one
480:13 - specific way so this is how we've been
480:15 - doing it
480:16 - if we have an array that has a couple
480:18 - values in it now we write our for loop
480:22 - so we initialize i to 0
480:24 - we go until i is
480:27 - less than the array.length
480:29 - and then we increment i
480:32 - then we drop down into the for loop and
480:35 - we're going to do something here so
480:36 - maybe we're just going to
480:38 - print the
480:40 - element of the array that we're at so
480:42 - there you go prints it and we can do all
480:45 - sorts of stuff within that code block
480:47 - now there's another way to write a for
480:49 - loop that we haven't talked about yet
480:51 - and that is the for each
480:53 - method on an array so here's how we
480:57 - would do that
480:58 - we would
480:59 - say array.4 each
481:02 - and now what's going to happen is we
481:03 - have a callback function that gives us
481:06 - the array item
481:08 - and then we drop down into the function
481:10 - and we can once again console.log the
481:13 - array item
481:14 - all right so that's just a simple way to
481:16 - replicate that array up there you can
481:19 - also get the index so if we looked at
481:21 - the documentation
481:23 - of the for each method it's going to say
481:26 - here's our callback that we're looking
481:28 - at and it's going to pass us the current
481:31 - value and it's going to pass us the
481:33 - index in the original array so again
481:35 - this is this signature right here the
481:38 - the function signature is going to be
481:40 - very similar if not the same for pretty
481:42 - much all
481:43 - of these more advanced array methods
481:46 - so in this case if we wanted to take
481:48 - this uh for loop so let's clear the
481:50 - screen once more here's our array that
481:53 - we're looking at and if we wanted to do
481:55 - the for loop we use four each
481:58 - we want the
481:59 - array item
482:01 - and then we can grab the index
482:03 - so in this case we have two things to
482:05 - work with and we'll console.log
482:08 - say the array item
482:12 - and then we will enter down in
482:13 - console.log the index and you can see
482:16 - that we are printing
482:18 - the value of one
482:20 - which has a zero index the value of two
482:23 - which has a one index and the value of
482:26 - three
482:27 - which has number two index so this is
482:30 - really useful um a little bit quicker
482:33 - than our other
482:34 - for loop now there are a couple
482:36 - differences but nothing that we need to
482:38 - talk about right now you'll find those
482:40 - out as you start programming and i'll
482:42 - try to point them out within this series
482:44 - if we stumble upon them the next method
482:47 - that we're talking about is the includes
482:49 - method so this is going to help you find
482:52 - a single element
482:54 - and determine whether it exists within
482:56 - an array
482:57 - so there are multiple ways to do this
483:00 - and i'll show you a couple different
483:01 - ways
483:03 - and kind of prove out why the includes
483:04 - method might be the best in a lot of
483:07 - cases so let's say that you have the
483:08 - following array you have my colors you
483:10 - want to figure out whether
483:12 - the color orange exists within this
483:15 - array using some code now there are a
483:18 - couple ways that you can do this but one
483:20 - way that we can use is what we're
483:23 - basically
483:24 - accustomed to seeing and we're going to
483:27 - initialize this variable right here
483:30 - we'll say that it's false
483:31 - and then if when we're looping through
483:33 - this array if any of the colors equals
483:36 - orange then we set that variable to true
483:39 - and now we can figure out if orange
483:41 - exists which should be true so that's
483:43 - one way to do it but there is a simpler
483:46 - way to do it with the for each method so
483:48 - we could say
483:50 - something like this so we've already got
483:52 - the orange exist
483:54 - variable and all we'd have to do is loop
483:56 - through it that way set it to true and
483:58 - we can say orange
484:00 - exist and that is going to be equal to
484:02 - true
484:03 - now there is a even simpler way and it's
484:06 - using the includes method so all we
484:08 - would have to say is my colors
484:11 - that includes and then type orange and
484:14 - it's going to tell us true that does
484:16 - exist in the array
484:18 - so as you can see
484:19 - it's a lot easier to use a method like
484:22 - this than go through all of those for
484:24 - loops and you know store the value in a
484:26 - variable and stuff like that now just to
484:28 - connect the dots here and show you that
484:30 - there's a variety of ways to solve
484:32 - problems within
484:34 - coding
484:35 - you could have also used the index of
484:37 - method so if we would have said my
484:39 - colors and then you say index of
484:43 - and then you type orange
484:45 - and you return that it's going to give
484:46 - you an index of 3. so basically
484:50 - all you would have to say is that
484:52 - statement right there and you say if
484:54 - that does not equal negative 1
484:57 - then our
484:59 - item exists with the in the array
485:01 - because if it returns negative 1 then it
485:03 - didn't find it and we know that it
485:05 - doesn't exist so that's just another way
485:07 - to solve it and hopefully you've seen
485:10 - that there are in this case there are
485:12 - four different ways that i went through
485:13 - something like that of
485:15 - checking whether something exists in an
485:17 - array the next method that we're going
485:19 - to use is filter and this is probably
485:21 - the most
485:23 - frequented method for me
485:25 - this is the one that i use the most
485:27 - probably i don't know for sure but
485:30 - this one and map are probably the two
485:32 - that i would use the most within my code
485:34 - now the filter method does exactly what
485:37 - you think it would do it filters out
485:39 - different results so let's say that you
485:42 - go on amazon and you go to your orders
485:45 - page it might look something like this
485:47 - you know this is fictitious it's not
485:50 - actually what their data model is going
485:51 - to look like
485:53 - but you can see that maybe we have some
485:55 - different properties on our orders array
485:58 - and this is going to represent all of
486:00 - the orders but you know when you go on
486:02 - amazon you can click on buttons and
486:04 - filter those orders by date
486:07 - by whether they're open open whether
486:09 - they're cancelled or whether they're
486:11 - digital and we can do this with the
486:13 - filter method which is basically going
486:15 - to return us an array that has been
486:18 - filtered based on a callback function
486:20 - that we provide to it
486:21 - so with this array you can see that we
486:23 - have this is digital property so we
486:26 - could find all of the
486:27 - digital products
486:29 - we could save that to an array by saying
486:31 - digital orders and then we'll set that
486:34 - equal to all orders
486:36 - dot filter and now this is where we pass
486:38 - in our callback function which again
486:40 - receives the array item
486:42 - and then we will pass that in to our
486:45 - function and return
486:47 - anything that
486:49 - is
486:50 - digital so we'll say array item dot is
486:53 - digital which is a boolean so if it's
486:55 - true
486:56 - then we're going to return a true value
486:58 - and it's going to be included in our
487:00 - resultant array
487:02 - so now our digital orders if we print
487:04 - that out you'll see that we have two of
487:06 - them and it says is digital true so we
487:09 - know that we match those correctly now
487:11 - there's a couple other filters that we
487:13 - could do we could paste in this and say
487:15 - okay we want all of the digital and
487:18 - cancelled orders so we're returning a
487:21 - condition where it says we want to check
487:23 - if it is digital
487:25 - and
487:26 - it is canceled so in this case we can
487:28 - print this array
487:31 - digital cancelled
487:32 - orders
487:33 - and we only have one of those
487:36 - where you can see is digital is true and
487:38 - is cancelled is also true so this is a
487:41 - super useful method and it's often used
487:44 - on the front end where you're like i
487:46 - said on your orders page on amazon and
487:48 - you click the button and it might
487:50 - execute
487:52 - this filter method and just show the
487:54 - user whatever is filtered so this is
487:56 - really useful i use it all the time
487:59 - on the front end and you can even use it
488:01 - on the back end a little bit as well
488:03 - now i saved the hardest for last
488:05 - of course because i didn't anticipate
488:09 - the fact that i'd be talking
488:11 - for such a long period of time but we're
488:13 - going to go ahead and try this anyways
488:15 - this is the reduce method so if we look
488:18 - at the reduce method
488:20 - within the
488:22 - documentation it's going to give us a
488:25 - very interesting
488:27 - callback function so instead of the
488:29 - array item and then the index and then
488:31 - the original array that we get passed
488:34 - into our callback
488:35 - it's going to give us some interesting
488:38 - parameters so it gives us the
488:39 - accumulator it gives us the current
488:42 - value
488:43 - and then it gives us some optional
488:45 - parameters here index and then the
488:46 - original array and then finally we pass
488:49 - in
488:50 - in addition to the callback an initial
488:53 - value that we want to initialize this
488:55 - accumulator to so i'm not going to go
488:58 - through all of these i'm going to put
489:00 - this into terms that i think we can all
489:02 - kind of recognize
489:04 - so let's go ahead and paste this in
489:06 - and this is the code that you're
489:08 - probably used to seeing so if we wanted
489:11 - to
489:11 - find the sum of this array so we wanted
489:14 - to add all of these numbers together
489:16 - this is how we would do it and this is
489:18 - how we did it in the 25 coding
489:21 - challenges that we
489:22 - practiced for the previous lesson
489:25 - so in this case we initialize a sum
489:27 - variable to equal zero so we start the
489:30 - count at zero then we loop through our
489:33 - array and for each element in the array
489:36 - we add it to the sum using the plus
489:38 - minus or plus equals operator and then
489:41 - at the end we console log the sum which
489:43 - is going to equal
489:44 - 99
489:46 - because that's the sum of all of these
489:48 - values in the array
489:49 - now what i want to point out is the fact
489:52 - that this sum variable
489:54 - is essentially accumulating values so
489:58 - it's basically called our accumulator so
490:01 - if we go back to the documentation
490:03 - it shows that the first argument of this
490:06 - callback is the accumulator so you can
490:08 - think of this as our sum variable that
490:10 - we just wrote right here so what i'm
490:13 - going to do is right below here i'm
490:15 - going to rewrite all this code but using
490:18 - the reduce method
490:19 - so the first thing i'll do is write our
490:22 - reducer
490:23 - callback function and what this callback
490:25 - function is going to do is it's going to
490:28 - accumulate the value so if you look at
490:31 - the documentation
490:33 - it's going to first take this
490:35 - accumulator parameter which is basically
490:38 - going to act as this sum variable right
490:41 - here so up top we defined it like
490:44 - outside of the for loop but here we can
490:46 - just pass it in as a parameter to the
490:48 - callback and then we have an array item
490:51 - so that's going to be another parameter
490:54 - and we have others but we don't need
490:56 - them so let's go ahead and just use this
490:59 - and now what we're going to do is we're
491:00 - going to return a value so we always
491:02 - return a value from the callback for
491:05 - each array item
491:06 - and in this case this sum variable is
491:09 - going to be
491:10 - accumulated over the course of looping
491:14 - over this array so the reduce method
491:16 - automatically takes care of that and
491:18 - make sure that that accumulates a value
491:21 - so all we have to do is say sum plus or
491:24 - equal array item and what this is going
491:27 - to do is exactly the same thing that
491:29 - we're doing up here
491:30 - but we're adding the array item and
491:32 - we're doing it all within a callback
491:34 - function
491:35 - so let's define that
491:37 - and now we can say that we want our
491:39 - result to be equal to array.reduce
491:43 - so we're
491:44 - using the reduce method and we need to
491:46 - pass in our reducer callback and then we
491:50 - need to pass in one more thing
491:52 - so if you go over to the syntax you'll
491:55 - see that we have the callback which is
491:57 - encompassed uh in the highlight right
491:59 - here but then you'll see after that
492:02 - highlight we have a comma and then
492:03 - another
492:05 - parameter called initial value and if
492:07 - you come down and read about the initial
492:09 - value it's basically saying
492:11 - that this will represent the starting
492:13 - value of this sum variable that gets
492:17 - passed in for every iteration
492:19 - so we want to start that at 0 just like
492:22 - we started the sum up here at 0. and
492:25 - when we press enter and print the result
492:27 - we're going to get 99 which has done the
492:29 - same thing as our code above so while it
492:32 - looks very confusing
492:34 - it is very confusing
492:36 - you can kind of anchor yourself to this
492:38 - more uh simplistic code that we've
492:41 - already written and already understand
492:43 - so that is the reduce method and the
492:45 - last thing i want to show you about it
492:47 - is how you can use this to basically
492:50 - get the average of numbers in an array
492:54 - so we went through some practice
492:56 - problems
492:57 - in the 25
492:58 - practice problem video previous to this
493:00 - lesson
493:01 - and we had to calculate an average of an
493:04 - array i believe
493:06 - and of course there is no average method
493:08 - on the array object i'm not sure why
493:11 - doesn't make a whole lot of sense to me
493:13 - but you can use this reduce method to
493:15 - actually calculate your own average of
493:18 - the array in just a single line here's
493:20 - how you're going to do that all right so
493:22 - we're going to say array.reduce
493:25 - and then we're going to of course pass
493:27 - in the sum and then the array item so
493:29 - we're writing the same thing that we
493:31 - have written
493:32 - already we're just going to do this in
493:34 - one line so we're going to take the sum
493:36 - plus or equal the array item all right
493:38 - so what this should give us right here
493:41 - is going to be equal to
493:43 - of course after we pass in our initial
493:46 - value that's going to give us the sum of
493:48 - the array and then all you have to do is
493:50 - divide that total
493:52 - by the array.the length and now you have
493:56 - retrieved the average of this array so
493:59 - that's just a way that this can be
494:01 - really useful and you might take a
494:03 - second to look at this code and see what
494:05 - it's doing because it's a little bit
494:06 - confusing
494:08 - as a one-liner like this but anyways
494:10 - that's just a really practical example
494:12 - something that i've used before in uh
494:14 - writing actual code all right so that is
494:16 - the end of the
494:18 - most common built-in array methods
494:21 - now you might be wondering well what
494:23 - happens if i find an operation
494:26 - that doesn't have a method
494:29 - already built for it and the answer to
494:31 - that is you probably will be using some
494:34 - sort of external library to do that and
494:37 - the most common one
494:39 - for us javascript developers is going to
494:41 - be the lowdash library
494:44 - so if you type in lodash and you click
494:46 - here this is a modern javascript utility
494:50 - library delivering modularity
494:52 - performance and extras
494:54 - if you go to the documentation you'll
494:56 - see on the left that at the top we have
494:59 - our array data type and you'll see that
495:01 - we have a bunch of different methods
495:04 - that we can do all sorts of really
495:06 - interesting things with
495:08 - so
495:09 - we have a limited set of built-in
495:12 - javascript objects but the developers of
495:14 - lodash have taken it a step further
495:17 - and basically
495:19 - created some additional methods so if
495:21 - you remember something that was tough
495:23 - for us is comparing the equality of two
495:26 - objects
495:27 - so if we go in here and create
495:30 - two objects so we'll say object one
495:33 - and we'll set that equal to prop one and
495:36 - some value all right and then we have
495:39 - object 2
495:40 - and then we want to just set that
495:42 - perfectly equal to this
495:44 - all right so we put that in there and
495:46 - now if we try to compare them
495:48 - it's going to say false and that's going
495:50 - to stay false even if we use double
495:52 - equals and that's because we can't
495:55 - compare the equality of two objects and
495:58 - if you wanted to write a function that
496:00 - actually compares the equality of two
496:02 - objects it's going to take you hundreds
496:04 - of lines of code but if you use the
496:07 - lowdash library you can actually look at
496:11 - something
496:12 - let's go down here
496:14 - a little bit
496:16 - and we have this method called is equal
496:19 - and this is equal
496:21 - can actually take two objects as you see
496:23 - here so these are basically the example
496:25 - we just came up with
496:27 - and it checks if they're equal and it
496:29 - returns true and behind the scenes this
496:31 - library is running hundreds of lines of
496:33 - code to make this comparison and you can
496:37 - see how we can extend our functionality
496:39 - by using external libraries
496:43 - so let's go ahead and look if we go to
496:46 - the documentation on mdn go to
496:48 - javascript go to built-in objects and go
496:51 - down to the math object
496:54 - you're going to see that there's a lot
496:56 - of built-in math functions and as a
496:58 - developer you might be saying well hey
497:00 - i'm not writing a bunch of finance
497:01 - applications i probably don't need this
497:04 - well i'll show you in just a few seconds
497:06 - why it might be useful for you
497:08 - all right so if we go down here
497:10 - this is a little bit different than
497:11 - we're used to seeing so if we come into
497:13 - the console
497:15 - and talk about like dates or something
497:17 - we know that we can make a date by
497:19 - saying new date all right so that's the
497:22 - syntax that we're used to it's called
497:23 - the constructor syntax because we are
497:26 - constructing a
497:28 - i guess copy of this
497:31 - date template or the object i mean these
497:33 - are all terms that i'm kind of using in
497:35 - quotations because they're not
497:38 - perfectly true but you kind of get the
497:39 - point
497:40 - all right so this is the
497:42 - way of constructing an object now with
497:45 - the math library you'll see that all of
497:47 - the methods we're just taking the actual
497:49 - object we're so we're saying math and
497:52 - then we're just executing the method
497:54 - against it so instead of saying let's
497:57 - say my date equals new date
498:01 - and then we say my date dot get
498:04 - date or something like that we are
498:07 - first constructing the object and then
498:09 - using a method on it and this is how
498:11 - we've done it with all of these so you
498:13 - might say well why don't we say
498:16 - math equals
498:18 - new math
498:20 - and you press enter and it's going to
498:21 - say math is not a constructor well this
498:23 - gets us into
498:25 - the concept of object-oriented
498:27 - programming
498:28 - the math library actually has rather
498:30 - than instance methods so
498:33 - with the previous ones with the date
498:35 - object and the string in the array
498:37 - we have to first construct the actual
498:41 - object and then we
498:42 - call methods on top of that object which
498:45 - are called instance because we have an
498:48 - instance of that object and we call
498:49 - methods on top of it now with the math
498:52 - library we're just using static methods
498:55 - so we just call it directly from the
498:57 - object and it's pretty simple so let's
499:00 - just go through a couple of quick ones
499:02 - that you might
499:04 - you know find useful so
499:07 - let's see what my list shows right here
499:11 - so let's clear the screen
499:14 - and here are some of the common ones so
499:16 - we have math.pi
499:18 - that's going to give you the value of pi
499:20 - we have math.e so this is i think
499:23 - euler's constant or something like that
499:25 - that might be something that you use
499:27 - um and then we start getting into the
499:29 - methods so we have the absolute method
499:31 - and we can actually um pass in a
499:34 - negative number and get a positive or
499:36 - absolute value of that
499:38 - we also have the
499:40 - math.ceiling method which is going to
499:43 - round up to the nearest integer so let's
499:45 - say that we pass in math.pi
499:48 - we're going to round 3.14 up to the
499:50 - nearest integer of 4.
499:52 - likewise we have the floor method so we
499:54 - take math.pi again and it rounds it down
499:57 - to 3. and then finally we have the
500:00 - math.round method
500:02 - and again if we put in math.pi it's
500:04 - going to round it to 3 because
500:06 - 3.14 is closer to 3 than it is 2 4.
500:10 - all right so those are some quick
500:12 - methods that you can use you can also
500:14 - use the min and the max
500:16 - method so if we had
500:18 - min you can pass in a couple numbers and
500:21 - this is going to give you the smallest
500:22 - number and then of course max will do
500:24 - the opposite so same numbers but we get
500:27 - the highest number
500:29 - all right and then the final one is
500:31 - math.random
500:33 - so this is going to give you a random
500:35 - number a random decimal between 0 and 1.
500:39 - now this has implications that you
500:41 - probably don't understand but we've
500:43 - actually used this to get a random index
500:46 - of an array for previous videos
500:49 - and i'll show you exactly how we can do
500:51 - that alright so
500:53 - let's decompose this in two steps
500:56 - so first let's get a random number and
500:59 - set that equal to math.random
501:01 - all right so this is going to equal
501:03 - something between 0 and 1. let's just
501:06 - see what it equals right now all right
501:08 - so it equals 0.97
501:10 - all right so we know that if we multiply
501:14 - something between 0 and 1 by another
501:16 - number it's going to give us a whole
501:19 - number between 0 and whatever number
501:22 - we're multiplying it by
501:24 - so if we multiply random
501:27 - number
501:29 - times five we're going to get a number
501:32 - between
501:33 - zero and five
501:35 - so we can use that to say that we want a
501:38 - larger number we'll just call it that
501:41 - and we'll say that will be equal to
501:43 - random number um times a
501:46 - you know we'll say a hundred so now we
501:48 - get zero to a hundred
501:50 - and then finally this is going to be a
501:52 - decimal when we look at it but if we
501:55 - wanted to bring this down to a whole
501:58 - number we just say math.floor and then
502:01 - pass in the larger number and now we
502:03 - have 97.
502:04 - all right so we can combine this with
502:06 - our knowledge of
502:08 - the length of an array to get
502:11 - um a range of random numbers that are
502:14 - within the bounds of an array so let's
502:17 - just define an array real quick and
502:19 - we'll just say
502:21 - some
502:23 - values
502:25 - blah
502:27 - blah all right so we got four values in
502:30 - there
502:31 - the length of this array is four so
502:33 - here's how we get a random index of our
502:36 - array we'll say random index and we'll
502:38 - be setting that equal to
502:41 - all right so we will say math.floor
502:43 - because we know we need a whole number
502:45 - now we want to pass in math.random so a
502:48 - number between 0 and 1 and then we want
502:51 - to multiply that by the array dot length
502:54 - so that we can get from 0 to the length
502:56 - of the array which is always going to
502:57 - give us a valid index
503:00 - all right so we will set that equal
503:02 - press enter and now we can just take our
503:04 - array and pass in our random
503:07 - index and it's going to give us a random
503:09 - value of that array
503:13 - next up we have to talk about air types
503:16 - within javascript and we're going to
503:17 - combine that with some of the data types
503:20 - that we haven't quite talked about
503:22 - up to this point
503:23 - all right so
503:24 - error handling in javascript is
503:27 - something that a beginner is not going
503:29 - to
503:30 - find the value in most likely i know i
503:33 - didn't when i first started out i could
503:35 - not understand why we need to handle
503:37 - errors within our code
503:39 - but there are some really important
503:42 - implications to this so if you have an
503:45 - external library that you're calling or
503:48 - maybe you're fetching data from an
503:50 - external database
503:52 - or something like that you don't know
503:55 - what the behavior of that external code
503:57 - is going to be
503:59 - so it could give you an error or for
504:02 - that matter let's say that you're
504:03 - building an app that's similar to say
504:05 - instagram and your user who
504:08 - maybe is got some spotty internet at the
504:11 - time
504:12 - is about to press post on their
504:14 - instagram photo and as they're pressing
504:17 - post their internet goes out
504:19 - alright so clearly the code that's going
504:22 - to be run is going to fail
504:24 - and what we want to do is handle that
504:26 - correctly so when you try to post and
504:29 - you got no internet you're probably
504:31 - going to see a message on the screen
504:33 - that says something like no internet
504:35 - please try again when you're connected
504:37 - now that is proper error handling
504:39 - because we have detected that something
504:42 - went wrong and given the user a
504:43 - meaningful message
504:45 - for that now if we didn't handle errors
504:48 - and we just you know ran our code and
504:50 - just
504:51 - you know threw caution to the wind and
504:52 - said hope it works well in that case
504:55 - when that user posts the photo and the
504:57 - internet goes out the whole instagram
504:59 - app is going to crash
505:00 - so we obviously don't want that to
505:02 - happen that's a terrible user experience
505:05 - and that is the value of error handling
505:07 - now in javascript there are three main
505:10 - types of errors there are actually more
505:12 - so if we
505:14 - go to the
505:16 - documentation
505:17 - javascript
505:19 - built-in objects and then we go to air
505:23 - now this is going to be what we call the
505:26 - base class this is the like you know
505:28 - parent air type and within this air type
505:31 - there are several
505:33 - subtypes of errors that we might see
505:36 - now there are three of them that i
505:37 - consider the most common and you'll
505:39 - probably see the most often and those
505:41 - are the ones that we're going to talk
505:42 - about here in this video so the three
505:45 - we're going to talk about are going to
505:47 - be the reference error the syntax error
505:50 - and the type air
505:51 - and i'm just going to walk you through a
505:53 - couple situations where you might
505:54 - encounter these and just explain like
505:57 - what they are and then finally we're
505:58 - going to talk about how to actually
506:00 - handle an error in javascript so the
506:02 - first one is going to be a reference
506:04 - error so let's click on that
506:06 - and this reference error it says
506:08 - is going to represent an error where
506:10 - there is a non-existent variable that is
506:13 - trying to be referenced basically
506:15 - all right so a good example of that is
506:18 - if we
506:19 - don't have a variable defined but we try
506:22 - to maybe print it to the screen or use
506:24 - it
506:25 - so
506:25 - let's just define
506:27 - some variable
506:28 - we'll set it equal to 20 and when we try
506:31 - to reference that
506:33 - by just typing it into the repple
506:36 - or the console it's going to give us a
506:38 - value but if we were to type in
506:41 - another
506:42 - variable
506:43 - and press enter we're going to say it's
506:45 - an uncaught uncaught reference error
506:48 - because another variable is not defined
506:51 - so when we think of referencing we're
506:53 - basically trying to find a reference in
506:56 - the computer's memory of that variable
506:58 - and if we haven't declared it yet then
507:00 - it obviously doesn't exist and we have a
507:02 - reference or a lookup error so that's
507:05 - the basics of a reference error
507:07 - now a syntax error is the next one so
507:10 - let's look at that
507:12 - we'll go back to the main error page
507:14 - go to syntaxair this is where you're
507:16 - writing invalid javascript so this one's
507:19 - not very hard to replicate
507:21 - all you have to do is write invalid
507:23 - javascript so
507:25 - let's say that we
507:26 - write an object
507:28 - and we set it equal to this right here
507:30 - so we'll say prop1
507:33 - some value
507:34 - and put a semicolon at the end
507:37 - enter down
507:39 - and another value and put another
507:42 - semicolon semicolon at the end and it's
507:44 - going to give us a syntax error because
507:46 - these semicolons right here don't need
507:49 - to be there those those should be commas
507:51 - not semicolons so we wrote invalid
507:54 - javascript and we got a syntax error
507:56 - because of it so this one's pretty easy
507:58 - now the last one the type error this one
508:01 - is a little bit more confusing so let's
508:03 - look at it real quick go back to the
508:06 - main documentation go to type air
508:08 - now it's going to say a type error
508:10 - represents an error when the operation
508:12 - could not be performed
508:14 - because you're doing it on you know a
508:17 - variable or a data type that doesn't
508:19 - have that operation
508:20 - so something that you might think is
508:23 - going to throw this kind of air is i
508:26 - don't know adding two objects together
508:29 - so let's say that we have
508:31 - object one and we're gonna set that
508:33 - equal to
508:35 - uh i don't know say 20 here
508:38 - and then we'll come down and do another
508:40 - object
508:46 - this is just totally arbitrary i'm just
508:48 - making some examples now what if we said
508:51 - object one plus object two
508:54 - you would think that instead of
508:56 - returning this string with like
508:58 - meaningless object
509:00 - notation we would actually get a
509:03 - type error because we're trying to do
509:05 - something
509:06 - that can't be done we can't add two
509:09 - objects together like this they're not
509:11 - uh integers or
509:13 - or numbers when you're going to get a
509:14 - type error is when you're trying to
509:17 - pretty much call a method
509:18 - on the wrong data type so let's say that
509:21 - you have a number all right so we'll set
509:24 - that equal to 20 and on that number
509:27 - you're going to say to uppercase
509:30 - now we know from earlier in this video
509:32 - that two uppercase is a method attached
509:34 - to the string object not the number
509:36 - object so in this case we get a type
509:38 - error because it's not a function
509:41 - now this might also happen
509:44 - we have these objects up here and our
509:47 - property on the object is not a function
509:49 - but if we tried to call it like we call
509:52 - a function it's going to give us a type
509:54 - error because prop 1 is not a function
509:57 - so that's what a type error is all about
509:59 - now the last thing that we have to talk
510:02 - about is actual error handling and as we
510:05 - talked about it's important because you
510:07 - want to give a user
510:09 - the correct message when they you know
510:12 - run into an air and you also don't want
510:14 - your application to completely crash
510:16 - every time an air happens because it
510:18 - happens all the time with code
510:21 - so to do this we use something called a
510:23 - try catch block
510:24 - so the first part we put
510:27 - the word try and then we put these two
510:29 - brackets so we enter down in whatever
510:32 - code goes in these brackets is going to
510:34 - be
510:35 - checked for errors
510:37 - and if there's an error then it's going
510:39 - to throw that error and send it to the
510:43 - catch block so let's write some code
510:45 - that actually throws an error so let's
510:47 - say that same example of we have a
510:50 - number
510:51 - and then we try to
510:53 - make that number uppercase which is
510:55 - obviously invalid so we know that's
510:57 - going to throw an error but because it's
511:00 - within this try block
511:02 - we're going to pass that air it's going
511:04 - to be thrown
511:05 - and then this air is going to be
511:08 - populated with that new air object so
511:11 - this could be anything we could make it
511:13 - e we could make it air or er or we could
511:16 - make it air it doesn't matter it's just
511:18 - a parameter like we've seen before
511:20 - so let's enter down into the catch block
511:23 - and now we can actually check to see
511:24 - what this error is now i'm not going to
511:27 - just console log it because then you
511:28 - might get confused like okay what
511:30 - happened so let's go ahead and
511:33 - actually
511:35 - first let's let's just cheat real quick
511:38 - i'm going to put a var here so that we
511:40 - can use this code block again
511:43 - so let's press enter and you'll see that
511:45 - nothing no errors were thrown here and
511:47 - the reason is we had some invalid code
511:50 - but it got caught here and then we
511:52 - didn't run any code in the catch block
511:54 - so if we try this again no pun intended
511:57 - here
511:58 - we can actually print some details about
512:01 - this error so let's console.log
512:04 - something
512:05 - where we say air
512:07 - is an instance of we'll say type error
512:10 - and in this case it is a type error
512:12 - because we're trying to call a method
512:14 - that doesn't exist on this data type and
512:16 - this instance of operator is basically
512:19 - going to look at whatever is to the left
512:20 - of it which is that newly populated
512:23 - error object and it's going to say is
512:25 - this an instance of or kind of like a
512:28 - copy of the template that we call type
512:31 - error
512:32 - now that's going to hopefully return
512:34 - true
512:35 - if it does what we expected and then an
512:38 - error actually has a name
512:40 - attached to it or a message
512:42 - so we can say air dot message and print
512:45 - out whatever that error message is so
512:47 - you can see that if you looked at the
512:50 - instance properties we have dot message
512:53 - so that's how i knew how to access that
512:56 - alright so we press enter and now we get
512:58 - the value of true because
513:01 - this
513:02 - evaluates to true and then this sentence
513:04 - right here is going to be the error
513:06 - message so you can see that we have
513:09 - handled an error what we call gracefully
513:12 - we have not crashed our application and
513:14 - this is going to come in handy when
513:16 - we're using external libraries that we
513:19 - don't know how they're going to behave
513:21 - and finally kind of going along with
513:23 - these air objects we didn't talk about
513:25 - those much we also have three more data
513:29 - types that we have not touched on
513:31 - so let's clear the screen and look at
513:33 - what we're talking about the first one
513:35 - is going to be n a n for not a number so
513:39 - that's actually a data type
513:40 - then we have undefined
513:43 - or actually let's go with null we'll
513:45 - talk talk about null first
513:47 - and then we have undefined and you can
513:50 - see if we go to the documentation
513:53 - we go to the main
513:54 - javascript documentation with the
513:56 - built-in objects
513:58 - you will see that we have
514:00 - not a number right here so you can see a
514:03 - little bit about that
514:05 - you can also see if we
514:08 - look at the built-in objects that we
514:10 - have undefined somewhere
514:13 - so here's undefined and then finally we
514:15 - have null value right here all right so
514:19 - these are all you know built-in objects
514:22 - and in
514:23 - like when we're looking at this the null
514:25 - and undefined i believe are primitives
514:28 - so let me just check that make sure i'm
514:31 - talking about that correctly
514:33 - so yes the the undefined and null are
514:35 - going to be primitives
514:37 - as we talked about a little bit earlier
514:39 - so let's start with the least common one
514:42 - which is going to be not a number so
514:44 - this is kind of something that
514:47 - it it's not really used all that often
514:49 - you probably won't even see it all that
514:51 - often it's just nice to know about
514:53 - because you may get this response um at
514:56 - some point so basically not a number is
515:00 - meaning exactly what you would think it
515:02 - would mean it's saying that something is
515:04 - not a number so if we had a string
515:08 - and we set that equal to some string and
515:11 - then we tried to coerce we've done this
515:14 - before if you surround a
515:17 - number or like a string value so let's
515:20 - say that we had
515:22 - this number constructor or whatever and
515:24 - then we pass in a string but that string
515:27 - is equal to a number value this is going
515:30 - to work fine but if we tried to pass in
515:33 - my string you're going to get not a
515:35 - number because you can't possibly
515:37 - convert a string like that into a number
515:40 - so that's where you might get not a
515:42 - number you also might get it if you're
515:44 - trying to
515:45 - you know add
515:47 - uh that string with a number that
515:50 - doesn't work either
515:51 - and then you also will get it if you say
515:53 - my string multiplied by 2
515:56 - divided by 2
515:58 - or minus 2. you're going to get not a
516:00 - number in all of those cases again
516:03 - you're not going to see this very often
516:04 - so i'm just going to move on from here
516:07 - the next one is going to be null
516:09 - so unlike not a number you're going to
516:12 - encounter null values pretty much all
516:14 - the time and what this represents how i
516:17 - think of it is going to be the
516:19 - intentional absence of a value or a
516:21 - placeholder that you put in to a
516:23 - variable
516:24 - so if you were to
516:27 - define a variable so we'll say let
516:30 - play or no not placeholder we'll just
516:32 - say let my number
516:34 - and then we'll set it equal to null
516:37 - it says we're redeclaring it because
516:40 - we've already defined my numbers so
516:42 - we'll just say num
516:43 - equals null
516:46 - and we've redeclared this so i've been
516:48 - typing into this console
516:50 - too much and using the same variables
516:52 - variables so let's go ahead and refresh
516:54 - the whole page
516:55 - all right so this should work better
516:57 - we'll say num
516:59 - does not equal 20 it'll equal null so
517:01 - this is a placeholder value
517:04 - and this evaluates to a falsy value so
517:07 - if we say
517:09 - um num
517:11 - triple equals false
517:13 - then it's going to say false because
517:16 - it's not perfectly equal to a boolean
517:18 - but we say if num
517:21 - and then we get into a conditional block
517:24 - well console.log this
517:27 - will not be reached because this will
517:30 - evaluate to false
517:32 - so
517:33 - this block
517:35 - will be reached and when we press enter
517:37 - you'll see this will be reached because
517:40 - we said if num and num equals null so
517:43 - it's a falsy value so this does not get
517:45 - reached so that's just something
517:48 - nice to know as you're using
517:50 - conditionals and then finally we're
517:52 - talking about undefined which is very
517:54 - similar to null
517:56 - but instead of being an intentional
517:59 - assignment of value so kind of a
518:00 - placeholder this is when you just
518:03 - declare a variable so let's say we
518:07 - declare a variable called myvar
518:10 - and we don't assign it to a value now
518:13 - you've probably been seeing this
518:15 - undefined happen within the console but
518:17 - that's not actually
518:19 - representative of what we're talking
518:21 - about here so if you were to type
518:24 - console.log
518:27 - myvar you're going to get undefined and
518:29 - you're going to get it twice because it
518:31 - always prints undefined within the
518:32 - browser console but this actually does
518:35 - equal undefined and if you were to pull
518:37 - up
518:38 - this conditional statement again
518:40 - and you put in my var it's still going
518:43 - to print this else statement because you
518:45 - didn't reach
518:46 - this because this evaluates to a false
518:48 - value all right so that's it for this
518:50 - lesson number six it was a very long one
518:53 - obviously split up into multiple videos
518:56 - but if you made it here congrats
518:58 - and i look forward to talking about some
519:01 - more complex subjects we're going to try
519:03 - to get a little bit away from javascript
519:06 - but in the meantime i do have some
519:08 - practice problems for you and you can
519:11 - continue on to practice some of the
519:12 - things that we have learned within this
519:15 - lesson
519:17 - we've done practice problems in previous
519:20 - lessons we did 25 of them that took over
519:23 - two hours to do
519:25 - and you can check out this video to go
519:26 - to those those will be a little bit
519:28 - easier for you but now in the previous
519:31 - lesson or lesson six
519:33 - um i guess it's this lesson we went
519:35 - through a lot of the built-in objects
519:37 - and then the associated functions
519:40 - for those objects within javascript so
519:42 - we have a much broader understanding of
519:45 - what's available to us and therefore
519:47 - will be a lot better at solving these
519:49 - challenges so i'm going to walk through
519:51 - each of them i recommend that you try
519:53 - them out first on your own and then you
519:54 - can go through my solution we'll kind of
519:56 - look at some community members solutions
519:59 - as well now in the previous code
520:02 - challenge video where i did 25 of them i
520:04 - didn't zoom in so i made sure to
520:06 - have a nice big screen that you can see
520:09 - that was a little bit annoying to
520:11 - actually edit that video so
520:13 - hopefully this will work out better but
520:15 - anyways go to the link in the
520:16 - description to get to the collection
520:18 - we're going to be working on so this is
520:20 - my profile on code wars um and if you go
520:23 - to my profile or no this is my profile
520:26 - if you go to my profile here you can
520:28 - come down and you can see the
520:29 - collections
520:30 - and you can see that for lesson five we
520:32 - did 25
520:34 - problems and then for lesson six we have
520:36 - some challenges
520:38 - and once you get here
520:40 - you can click on the train now button
520:42 - which is going to take you into all of
520:44 - these
520:45 - problems that i've laid out for you here
520:47 - on the right and there's 10 of them
520:49 - so we'll go ahead and click train now
520:51 - which is going to basically put us in
520:53 - this list and keep us there when we
520:55 - press you know next kata or whatever
520:59 - that's called i think it's something
521:01 - that has to do with jiu jitsu i
521:03 - didn't know in the previous video but i
521:04 - think i learned since then
521:07 - again leave it in the comments if you
521:08 - know totally what it means
521:10 - anyways let's get started with our first
521:12 - code challenge which is going to be list
521:15 - filtering now if you remember from the
521:17 - previous uh couple of videos we went
521:20 - through the built-in methods and one of
521:21 - those was the filter
521:23 - method on an array so in this case i
521:26 - would guess that we're probably going to
521:28 - be using that to solve this problem
521:30 - now i haven't seen any of these um or
521:33 - i've seen them i picked them but i
521:34 - haven't tried to solve any of these so
521:36 - we're going to be going in real time
521:39 - but i think the filter method's probably
521:41 - going to be what we want here so it says
521:44 - in this kata you will create a function
521:46 - that takes a list of non-negative
521:48 - integers and strings and returns a new
521:50 - list with the strings filtered out
521:52 - so this is a perfect
521:54 - use of our filter method
521:56 - we'll go here and
521:58 - as we always do let's change our
522:01 - parameter name so it's more descriptive
522:04 - so we'll call this
522:07 - so
522:07 - num
522:08 - list or even better num array
522:12 - and what we have to do is basically
522:14 - return
522:16 - num array and then we want to add the
522:18 - filter method on the end of that and the
522:20 - filter method as you might remember is
522:22 - going to basically take a callback
522:25 - function and whatever that callback
522:27 - function returns
522:29 - if it returns true on the individual
522:31 - element that we're looping through then
522:33 - it's going to keep that in the array if
522:36 - it returns false then it's going to
522:37 - throw it out and not include it in the
522:40 - resultant array so just for the sake of
522:43 - clarity i'm going to actually break this
522:44 - out into a separate function
522:46 - and then we'll refactor it so that it's
522:48 - a little bit
522:49 - more concise so we'll say our callback
522:53 - function
522:54 - is going to take an array item so that's
522:57 - how all of these
522:59 - methods on the arrays work they pass in
523:01 - the array item
523:03 - to the callback
523:04 - and then we're going to return a
523:05 - condition so in this case we want to
523:08 - look
523:09 - and see if we have a non-negative
523:12 - integer so any negative number or string
523:16 - is something that we need to filter out
523:19 - so we'll say
523:22 - first off if
523:24 - the type of array item
523:29 - which is going to return us with the
523:31 - type of the the variable if that is not
523:33 - equal to
523:35 - a number which we actually have to put
523:38 - in quotes
523:39 - so let's go to our our little
523:41 - playground here
523:43 - and if we have
523:44 - a number something like this and we say
523:48 - type of 20 it's going to give us number
523:50 - in quotes and then if we put in some
523:53 - sort of string it's going to give us
523:54 - string so we're using that
523:56 - knowledge and we're saying if the array
523:58 - item does not equal number
524:00 - then we want to filter it out and then
524:03 - we also want to add a condition
524:07 - we can say if it's not a number or with
524:10 - these two pipes
524:11 - or if the array item is negative
524:14 - so how do we figure out if a number is
524:17 - negative well we could just multiply it
524:20 - by negative 1 and if that turns out to
524:22 - be positive
524:23 - that's the case but we could also do
524:26 - something else
524:28 - so in our callback function we need to
524:30 - return either true or false which will
524:33 - determine whether this individual array
524:35 - item that we're looping over
524:37 - will be
524:38 - returned in that final array
524:41 - so in this case we have two conditions
524:42 - so we'll put this in a comment we'll say
524:44 - our first condition is that it is
524:47 - it is a number our second condition is
524:51 - it is positive so all we have to say is
524:54 - if the array item is greater or equal to
524:59 - zero
525:00 - um and the type of
525:04 - the array item is equal to
525:07 - number
525:08 - then we want to return true
525:11 - otherwise we return
525:14 - false here and exclude it so this little
525:17 - type of operator we've looked at it
525:18 - before a couple of times
525:21 - just to show you what i'm talking about
525:23 - i have up here if we say type of
525:26 - string
525:27 - or put a string in there it's going to
525:28 - return the value of string but if we put
525:31 - in
525:32 - say a number it's going to give us
525:34 - number so that's what i'm doing here i'm
525:35 - saying if the type of the item
525:38 - is equal to number then we want to keep
525:40 - it all right so there's our callback
525:42 - function this should work
525:44 - and all we would have to do is say
525:46 - return
525:47 - num array
525:49 - dot filter and then we pass in our
525:52 - callback function
525:54 - and let's see if that works when we test
525:57 - it
525:58 - so it does work but there's a couple
526:00 - ways we can refactor this
526:02 - the first way is that we don't need this
526:04 - conditional all we have to do really
526:08 - is return this expression right here
526:11 - which if this expression evaluates to
526:13 - true we want to keep it
526:15 - and if it evaluates to false we want to
526:17 - throw it away so if we just return the
526:20 - expression it should work just the same
526:22 - now another way we can refactor this is
526:24 - by taking this entire callback function
526:26 - and simplifying it so instead of passing
526:29 - it in as a declaration or whatever we
526:32 - can just define it right here so we can
526:35 - say array item and then use an arrow
526:37 - function to actually return this so
526:40 - let's break down onto the new line
526:42 - and we will return this expression right
526:45 - here and then we can get rid of this
526:47 - second function
526:49 - test it again and we should pass it now
526:52 - the last thing that we can do we don't
526:54 - even need these little brackets here um
526:57 - we can get rid of those and get rid of
527:00 - the return statement because if we put
527:01 - it all on one line it should work just
527:04 - fine so let's go ahead and test that
527:06 - looks like we got some sort of syntax
527:08 - error
527:09 - uh yeah we have this little semicolon at
527:11 - the end which is not valid so let's go
527:13 - ahead and test it now
527:15 - and we're passing it so that's how you
527:17 - might take this and refactor it to work
527:20 - correctly let's attempt the solution
527:23 - and we passed them all so we solved this
527:25 - one
527:26 - just okay so we'll submit it and see
527:28 - what other people have
527:30 - used to solve this
527:32 - solution
527:34 - all right let's go down here and
527:36 - um let's see this one did something very
527:40 - similar to us
527:41 - looks like they're
527:42 - saying
527:44 - if this is equal to number so i don't
527:46 - know if they
527:48 - accounted for negative numbers but maybe
527:50 - there's something about this that does
527:53 - um down here let's see
527:55 - well maybe i misread this actually so
527:58 - i wonder what the instructions were
528:00 - maybe go back and and see i guess maybe
528:02 - we didn't need to look for non-negative
528:05 - numbers
528:07 - i don't know all right let's move on
528:09 - it's not super important you can go back
528:11 - and kind of look at that on your own
528:14 - all right our next challenge is
528:16 - array.diff so probably getting the
528:19 - difference of an array of some sort so
528:21 - let's go into the instructions
528:24 - it says your goal in this kata is to
528:26 - implement a difference function which
528:28 - subtracts one list from another and
528:30 - returns the result it should remove all
528:33 - values from list a which are present in
528:35 - list b okay so looking at this
528:38 - we see that 1 is in both of these arrays
528:41 - so it's going to remove that and leave
528:43 - us with an array of 2.
528:46 - in this one
528:47 - we have two present in both arrays so
528:50 - we're going to remove that two and we're
528:52 - left with one and three which gives us
528:54 - our result so that's basically how this
528:56 - is working
528:58 - and hopefully we can use one of our
529:00 - built-in methods to solve this
529:03 - so just a fun fact if you go to the
529:05 - lodash library
529:07 - um this is something i talked about in a
529:09 - prior lesson or not a prior lesson in
529:12 - this lesson in a prior video
529:14 - you can go to the documentation and
529:16 - there's actually a method here
529:19 - so
529:20 - we can go to the intersection
529:23 - the intersection method is going to find
529:25 - what is alike within the arrays but
529:27 - we're trying to find the difference so
529:30 - we can go to the difference method right
529:32 - here so ultimately our challenge is to
529:35 - implement this method which we can use
529:38 - in lowdash
529:39 - it's very just kind of an interesting
529:41 - thing to know and if you start using the
529:43 - lowdash
529:44 - library like we might do kind of later
529:46 - in this series it will come in handy for
529:48 - this reason
529:49 - so what we're trying to do is find the
529:51 - difference
529:52 - and i think the way that we can do this
529:54 - is by using the array.includes method
529:58 - let me pull up the mdn documentation
530:02 - so we'll go to the web docs go to
530:04 - javascript
530:06 - go to built-in objects click array and
530:08 - now we can go down to the
530:11 - includes method which we talked about in
530:13 - a prior video
530:15 - in this lesson so this is basically
530:17 - going to figure out if something is
530:20 - included
530:21 - in another array or if a value is
530:24 - included in another array so if we were
530:26 - to loop through one of these arrays and
530:28 - then ask is each value included in the
530:31 - other and if so just remove it
530:33 - then that might help us solve this
530:35 - problem
530:36 - the first thing i want to do is check
530:38 - for the edge cases so if you see in the
530:41 - test down here there's a couple times
530:43 - where the first array might be uh
530:45 - nothing or the second array is nothing
530:47 - and in those cases we just have to
530:49 - return whatever is in the other array
530:53 - so let's say that if
530:55 - a dot length
530:58 - is equal to 0
531:00 - then we want to return
531:03 - b so we want to return the other array
531:05 - and then we'll say if b dot length
531:08 - is 0
531:10 - then we want to return a
531:12 - and let's go ahead and test that to see
531:14 - if we got a couple of them right
531:16 - and you see that we passed one of the
531:18 - tests because it
531:21 - passed in as an argument in empty array
531:24 - so now we have to actually solve the
531:25 - question of how do we get that
531:28 - intersection and figure out
531:30 - what is actually different between the
531:32 - two arrays
531:33 - so i'm just going to open this up here
531:35 - to full screen and then maybe we can put
531:37 - in an example just that we're
531:40 - anchored to something so let's put in
531:43 - something like three five six six
531:47 - 5 and 2
531:50 - and then the second array will be
531:51 - something like
531:53 - 3 and 6. so we know that we want to have
531:56 - in the final array we want 5
531:59 - 5 and two
532:01 - so let's see that how we can actually
532:03 - solve that so what i think we should do
532:06 - is loop through this
532:07 - one of the arrays so we'll say a dot
532:10 - four each and then we have to pass in
532:12 - our callback function which will do
532:14 - something on each iteration so we'll say
532:16 - array item and then we also probably
532:19 - want to grab the array index and i'll
532:21 - show you why in just a second
532:23 - so let's drop down into our function
532:25 - here
532:26 - and this needs to be
532:29 - stored in a result we could also just
532:31 - return it but we'll store that in a
532:33 - result and then we'll return the result
532:35 - at the end of the function so
532:37 - every time we iterate through this we're
532:39 - going to actually
532:42 - use each item check if it exists in the
532:45 - other array and if it does exist we're
532:47 - going to remove that item from both of
532:49 - the arrays
532:50 - in each iteration of the loop
532:53 - in order to do that we need something
532:54 - that removes
532:55 - an item at a specific index of an array
532:59 - so let's go on to the documentation and
533:03 - just refresh ourselves on this method
533:06 - called splice
533:07 - now this is something we talked about in
533:09 - a prior video of this lesson but this is
533:11 - going to change the contents of an array
533:13 - by removing or replacing existing
533:16 - elements
533:17 - so we can remove
533:19 - an element at a start index
533:22 - and then we can
533:24 - that's kind of how we're going to solve
533:26 - this so
533:27 - we'll say that if
533:29 - the array item
533:31 - or actually let's say
533:33 - we're iterating through array called a
533:37 - so if b
533:38 - so the other array includes the array
533:42 - item
533:43 - if that includes the array item then we
533:45 - want to remove it so i'm going to put
533:48 - some comments here
533:52 - we have found this element in
533:56 - uh both arrays
533:58 - so we know that we need to remove that
534:00 - so how do we do that well we have to
534:03 - probably get a new array for each of
534:05 - these
534:06 - and then now we're going to be working
534:08 - with that as that uh you know most
534:11 - recent array so let's make a variable up
534:14 - here for
534:15 - we'll say current
534:17 - array
534:19 - um
534:20 - a
534:22 - and we'll just set that equal to i don't
534:25 - know we'll put a placeholder in there
534:26 - called null
534:28 - and then we'll say let current array
534:30 - b
534:31 - equal null so that will be the
534:33 - placeholder that we're going to assign
534:35 - these if we have mutated the array
534:39 - so now what we want to do is create two
534:42 - separate arrays so we'll say
534:44 - new a
534:46 - and then we'll come down here i'm not
534:48 - done with this yet but we'll say new b
534:50 - so we're going to grab two arrays that
534:52 - have these values removed from them and
534:54 - the way that we do that is basically by
534:56 - saying
534:57 - a dot filter so we're going to use the
534:59 - filter method
535:01 - and then i'm just going to
535:03 - pass in
535:04 - the name of the item as item because we
535:06 - don't want to conflict
535:08 - with this right here that we've used in
535:10 - kind of the parent callback that we're
535:12 - using
535:13 - and then let's go ahead and return this
535:16 - so long as this item that we're looping
535:18 - through does not equal the array item
535:20 - that we want to remove
535:22 - so as long as item
535:24 - does not equal
535:26 - array item we want to
535:28 - put that into the new array and we can
535:30 - actually use the same
535:32 - syntax down here
535:34 - we just need to replace a with b so this
535:37 - will be the new array
535:39 - for each of them and all we have to do
535:42 - here is replace this with our
535:44 - placeholder so current
535:46 - array a and i'm actually going to just
535:49 - call this
535:50 - new a
535:52 - just for simplicity
535:54 - and then new b
535:57 - and we'll change that here so new a
536:01 - and new b
536:02 - and so now each time we basically what
536:05 - we're doing so far here is we're looping
536:07 - through every element within the a array
536:11 - and then we're going to
536:13 - basically create a new array for both of
536:16 - them with the only the elements that
536:19 - have not been matched across both of
536:21 - them so let's see what this is returning
536:23 - i'll exit out of here let's just test it
536:28 - looks like we've got something going on
536:30 - here so let's go ahead and print what
536:32 - the result is before we actually
536:36 - return it so let's print the result and
536:38 - see what we're getting so a big mistake
536:40 - that i made that i just realized is that
536:42 - i'm actually
536:44 - modifying the original arrays and we
536:47 - don't want to do that because that's
536:48 - basically saying okay we're looping
536:50 - through both of the or through this
536:51 - array but within the loop we're actually
536:54 - modifying it at the same time
536:56 - and we definitely do not want to do that
536:58 - so let's open up the code block once
537:00 - more
537:01 - and now what we need to do is we need to
537:03 - get a copy of each of them so
537:07 - we'll say a copy is going to be equal to
537:10 - a dot slice
537:12 - which is just going to create a copy of
537:14 - that array and then b copy is b dot
537:17 - slice
537:18 - so that's just going to give us two
537:19 - copies of the array and now what we're
537:22 - going to say is instead of a dot filter
537:25 - and b dot filter we're going to do the a
537:27 - copy
537:28 - and the b
537:29 - copy and that's how we're going to
537:32 - sort through these let's go ahead and
537:34 - test that and see if it gets
537:36 - us an answer here so
537:38 - looks like we're getting undefined for
537:40 - our result and i wonder why that's
537:43 - happening so let's see oh that's because
537:46 - okay i'm just not thinking here so we're
537:48 - not going to assign the for loop to a
537:51 - value because it doesn't return
537:53 - an array it just loops through it
537:55 - doesn't really return anything so
537:58 - returning the result is going to not
538:00 - work
538:00 - so what we need to do
538:02 - is just return
538:05 - either one of these i believe
538:07 - so let's see what happens if we console
538:09 - log
538:10 - new a
538:12 - and then maybe return it
538:15 - okay so we're passing more of them now
538:18 - let's see
538:19 - it looks like this sample test it says
538:21 - if a is an empty array
538:24 - then we want to return an empty array so
538:26 - i think i messed that up here
538:28 - okay so here we have the first one empty
538:31 - so we want the result to be empty so if
538:34 - a dot length equals 0 then we just want
538:37 - to return an empty array rather than the
538:40 - b array so let's test that
538:43 - looks like we passed all of them let's
538:44 - go ahead and attempt it i'm not sure if
538:46 - this is going to pass it looks like we
538:49 - got some
538:50 - problems if we have negative numbers
538:52 - maybe
538:54 - let's see what we're dealing with here
538:56 - okay i think something that i'm doing
538:58 - wrong here is i'm taking a copy of the
539:01 - original array each time
539:03 - but we probably want to take a copy of
539:07 - the
539:09 - new array that we've created so each
539:11 - time it loops through it's going to
539:12 - remove
539:13 - you know one of the elements but if we
539:15 - keep
539:16 - making a copy of the original array
539:18 - we're going to keep adding back those
539:20 - ones that we removed already so
539:23 - let's go ahead
539:25 - and instead of making a copy here i'll
539:27 - expand this out
539:29 - we'll make a copy of new a
539:32 - and new b so this should represent
539:36 - the
539:37 - updated array so how this is working i
539:39 - just want to take a second to explain
539:40 - this
539:41 - let's say that we have
539:43 - the following
539:45 - example so we have one two
539:48 - two and three
539:49 - and then maybe we have
539:51 - two
539:52 - and three or something like that so
539:54 - what's going to happen is we start with
539:56 - array a and we're going to loop through
539:59 - it with this for each loop so we're
540:01 - saying okay we're going down into our
540:03 - code
540:04 - new a is going to be equal to null
540:08 - to start and we're going to be
540:11 - taking a copy of that which is going to
540:13 - give us
540:14 - null
540:15 - and then we're going to say if
540:17 - b includes the array item so in this
540:19 - case the array item is going to be 1 so
540:21 - we're saying if this array b
540:24 - includes the value of one
540:26 - then we're going to drop into this code
540:28 - right here
540:29 - and if that's the case then we're going
540:31 - to take new a
540:34 - and we're going to filter it
540:37 - and set it equal to
540:39 - or we're going to filter the copy and
540:41 - set it equal to new a so we probably
540:43 - need to initialize this
540:46 - to be equal to the original array so
540:50 - we'll say
540:51 - we'll start it with a
540:52 - and then we'll start it with b there so
540:55 - now we're starting with the original
540:56 - array and each time we get down into the
540:59 - loop we're going to take a copy of
541:01 - whatever has been updated and each time
541:04 - in the loop we're going to check okay is
541:06 - one included in this second array yes it
541:09 - is so now let's set new a which was the
541:12 - original array at the beginning but now
541:14 - we're going to filter out
541:17 - this item that we found in both of them
541:19 - so now as we go
541:21 - through the second time it's going to be
541:23 - removing elements so in the first
541:25 - iteration of this loop 1 is not found
541:28 - here so we don't do anything
541:30 - the second time that we come around we
541:32 - look at 2
541:33 - and we see that 2 is included in both of
541:36 - these arrays so we are going to drop
541:38 - down into this if statement and we're
541:40 - going to reassign these
541:43 - placeholder arrays
541:45 - with our filtered array that does not
541:47 - include the 2 anymore so it's going to
541:49 - just have 1 and 3 and then 2 and 3. and
541:53 - then finally we get to the last one
541:55 - after a couple iterations we see it's in
541:57 - both we remove that and then we assign
541:59 - it to new a and new b so let's see if
542:02 - this works a little bit better
542:04 - looks like we passed the easy ones
542:07 - and then we passed all of them so
542:09 - this was a tough question like if you
542:11 - look at the difficulty of it 6 kyu
542:15 - and i
542:16 - once once again have not gone through
542:18 - this beforehand like i don't know i
542:21 - didn't know how to solve this problem
542:22 - before i looked at it so
542:24 - um hopefully that gives you a good idea
542:27 - of how thinking through this works like
542:29 - it takes a lot of iterations it's not
542:31 - something where i'm just like all right
542:33 - we're going in and solving it i know
542:35 - exactly how to do it you have to try
542:36 - some things you have to test it you know
542:38 - you realize oh i didn't account for this
542:40 - didn't account for that and eventually
542:42 - you will get to the answer so this was a
542:45 - really tough one i would definitely not
542:46 - call this a beginner
542:48 - javascript problem but hopefully you can
542:50 - see in our big solution here how we have
542:53 - used
542:55 - a bunch of different methods so we use
542:57 - slice we used filter we used includes
543:00 - and we used four each we used all of
543:03 - these in the same problem and that's how
543:05 - these built-in methods of javascript can
543:08 - really come in handy
543:10 - and it looks like after solving that
543:12 - since it was a tougher problem looks
543:14 - like i have leveled up here
543:16 - i started this code wars thing
543:18 - uh to make these videos so that's why
543:20 - i'm not
543:22 - a little bit higher up
543:24 - all right enough notifications here
543:26 - let's go to the next problem
543:30 - looks like we have another tough one 6
543:33 - kyu
543:35 - so let's see if we can solve this a
543:37 - little bit quicker than the first one
543:39 - that we did here
543:41 - okay so let's look at some of the
543:43 - potential inputs
543:45 - and at the bottom it says note all the
543:46 - hashes are pre-validated and will only
543:48 - contain uppercase and lowercase letters
543:52 - a little dash and looks like a period so
543:56 - that's all that we would expect to see
543:59 - um and then looking at the examples you
544:02 - see we have a list of objects where each
544:04 - object has a property called name
544:07 - and as we scroll over okay that's all
544:10 - that we're working with there
544:12 - so in this case bart lisa and maggie so
544:15 - it looks like we have to put a comma
544:17 - after the first one
544:19 - probably a comma after the second one if
544:22 - there's more than three but in this case
544:24 - there's three so you put the and instead
544:26 - of the comma
544:28 - okay
544:29 - and then in this case where there is
544:31 - nothing in the array so it's empty we
544:33 - just return an empty string so that's a
544:35 - really easy one to start with
544:38 - i'm going to actually zoom out this is a
544:40 - little bit zoomed in i wanted people to
544:42 - be able to see everything but
544:45 - in this case we're running out of space
544:47 - so
544:48 - let's go if the names dot length
544:52 - equals zero
544:54 - then we want to return
544:55 - an empty string and if we test this we
544:58 - should pass to pass at least one of them
545:01 - for that empty array
545:03 - so we did that we got that test case
545:06 - covered
545:07 - now we have to actually go through each
545:09 - of these so let's see how that how we
545:11 - can do that we'll probably be iterating
545:13 - through the array with a for each loop
545:16 - but let's see
545:18 - okay let's try that so we'll say
545:20 - names.for each
545:22 - and then we can say name will be the
545:25 - argument that we're dealing with
545:27 - let's put some parentheses in here
545:29 - because we're actually going to need
545:31 - need the array index which is the second
545:34 - argument of the for each callback
545:37 - and again if you wanted to see that if
545:39 - you wanted to actually figure this out
545:40 - on your own if you go to the for each
545:42 - method so i go to technologies
545:46 - javascript built-in objects
545:49 - array and then i go to the
545:52 - for each method and then you can read
545:54 - all the syntax and it says the callback
545:57 - is going to have these parameters right
545:59 - here so it first passes in the current
546:01 - value then the index of the array that
546:03 - we're looping through and then the
546:05 - original array so that's how i knew to
546:07 - add in the name and then the array index
546:10 - and you could have just called this the
546:12 - array item to be a little bit more clear
546:15 - so let's break this down onto a new line
546:18 - all right so we're looping through and
546:20 - that's not going to return anything so
546:22 - we'll probably need to store this in
546:26 - our final string which will be equal to
546:29 - nothing to start all right so we'll loop
546:32 - through
546:33 - um and actually
546:35 - if this array has a length of 0 then
546:38 - this for each loop is not going to do
546:40 - anything so we probably could just
546:42 - return
546:43 - the final string
546:44 - and instead of having this if statement
546:46 - up there we'll just have this so let's
546:48 - test that make sure it works
546:50 - with that empty array which it does
546:53 - all right
546:54 - so back to here we're basically going to
546:56 - be grabbing the name property so we'll
546:59 - say name is going to be equal to the
547:01 - arrayitem.name
547:03 - because we know that the array item is
547:05 - going to be an object like right here
547:07 - and it has a property called name
547:10 - alright so we have our name
547:13 - and we just want to add that to the
547:15 - final string
547:16 - so let's see
547:18 - we need to first check
547:20 - if the array index
547:23 - does not equal
547:25 - the
547:26 - total names array dot length so base so
547:30 - basically what we're saying is that if
547:32 - we're not on the last index of the array
547:35 - then we want to do something
547:37 - so if we're not on the last index of the
547:39 - array we want to take our final string
547:42 - and we want to add
547:43 - the current array item
547:46 - name which is stored in the name
547:48 - variable that we put right here
547:50 - so that's going to just add the names
547:52 - and then of course we need the comma
547:55 - so we want to add the name
547:58 - so let's just remove this equal sign
548:01 - and then
548:03 - we'll say final string equals
548:06 - final string
548:07 - plus name
548:09 - and then plus a
548:11 - comma and then a space
548:13 - all right so that's going to basically
548:15 - reassign that final string and add the
548:18 - names with the commas
548:20 - so let's uh console.log
548:23 - the final string as we have it it's
548:25 - definitely not going to be right but
548:26 - we'll see what we're getting
548:30 - okay so we have bart comma lisa comma
548:33 - maggie comma homer comma and marge comma
548:36 - all right so that's kind of what we're
548:38 - expecting here but now we have to add in
548:41 - the and symbol and you can see in the
548:43 - last one right here we've
548:46 - put in a comma so let's see what this
548:49 - one actually was
548:51 - passing in as a test
548:54 - okay so one mistake that i made if the
548:56 - array index is not equal to the
548:57 - names.length remember the
549:00 - length of the array is going to be
549:03 - literally how many elements are in the
549:05 - array but the array is zero indexed so
549:08 - we'll actually never reach
549:10 - the
549:11 - index that is equal to the length of the
549:13 - array so we have to
549:15 - say the names.length minus 1. and if we
549:18 - test this we should not see
549:21 - this output here we should basically
549:23 - skip that one
549:25 - so you see that we skipped marge this
549:27 - time so that is actually correct
549:30 - now
549:32 - we'll put an else condition in here so
549:34 - otherwise if it is kind of the last
549:37 - element of the array
549:39 - so in here we'll put the final string
549:41 - will be equal to final string
549:44 - plus the
549:45 - and symbol
549:47 - and then plus the
549:49 - name itself
549:51 - all right so i don't think this is going
549:52 - to work perfectly but let's test it
549:55 - yeah so we're seeing and marge without a
549:58 - space here so all we need to do is add a
550:01 - space in there and test it
550:04 - alright so this looks a lot closer to
550:06 - what we're
550:07 - expecting
550:09 - so what we're missing here why it's
550:11 - failing
550:12 - is because we still have this comma here
550:14 - and when we have the and symbol we don't
550:16 - want the comma at the end
550:19 - so basically
550:20 - um
550:21 - this condition is not going to be
550:24 - correct
550:25 - so we want to actually identify two
550:28 - different situations we want to identify
550:30 - when we are on the second to last and
550:32 - then
550:33 - when we're on the last one so instead of
550:36 - saying not equal to
550:38 - let's say
550:39 - equal to so if the index that we're
550:43 - working with
550:44 - let's go ahead and expand this a little
550:46 - bit so the index that we're working with
550:48 - is equal to the last one
550:52 - that's when we're actually going to
550:53 - paste in this right here
550:56 - so we want to put and name
550:59 - okay
551:00 - otherwise so else if the array index
551:06 - equals names.length minus two so the i
551:10 - guess third to last
551:12 - we want to say the final string will be
551:15 - equal to final string
551:17 - plus the name but we don't want
551:20 - any of the commas going on here
551:22 - and then otherwise we just want to
551:24 - return the final string will be equal to
551:28 - uh final string
551:30 - plus
551:32 - the name plus a comma and a space
551:36 - so let's try this out and see what we're
551:38 - getting as output
551:42 - you can see that we're getting a lot
551:43 - closer so we have everything correct
551:45 - except we need a space right before the
551:47 - and symbol
551:48 - so let's just add that real quick here's
551:50 - where we're doing and let's just put a
551:52 - space there
551:54 - and test it again
551:56 - and now you can see that we're passing
551:58 - most of the test cases
552:00 - now we have one down here
552:03 - it says wrong output for a single name
552:06 - so if we have a single name
552:09 - we probably need to just return the name
552:12 - itself okay so we can just cover that in
552:14 - a separate test case
552:16 - so we can say if the names dot
552:20 - length is equal to one
552:26 - we're going to just return
552:28 - the
552:29 - names
552:33 - zero dot name
552:35 - so that should cover when we have a
552:37 - single name
552:39 - so we passed all of them let's attempt
552:41 - it
552:42 - and we passed all of them so this was
552:44 - another really tough one um probably not
552:47 - a beginner problem necessarily but
552:50 - hopefully again you see how we're
552:52 - iterating through this and and trying
552:54 - out different things until we get to the
552:56 - final solution
552:58 - all right so let's submit this one and
552:59 - go to the next
553:02 - as you can see someone solved it with
553:03 - the reduce method which we learned about
553:06 - in the prior
553:08 - video of this lesson
553:10 - but i didn't think of that so
553:13 - that's a that's a useful one and
553:15 - basically anytime that we're using like
553:18 - an accumulator so in this case we
553:20 - had the variable called final string so
553:23 - go back in the video to see that
553:25 - if you have a accumulator variable
553:28 - followed by a for loop that modifies
553:30 - that that's always a good use case for
553:33 - the reduce method i didn't think about
553:35 - it in this
553:36 - particular scenario but that's that's
553:38 - always a good use case
553:40 - this one's very interesting i'm not
553:42 - going to go through all these but be
553:44 - sure to look at them because people come
553:46 - up with some very clever solutions all
553:49 - right so let's look at this one this
553:51 - again is a pretty tough one so i guess
553:54 - we're getting all the tough ones in a
553:55 - row and then it's going to get a little
553:57 - bit easier here
553:59 - so in this problem it's basically
554:01 - the name is take a 10 minute walk and
554:03 - it's saying you live in this city blah
554:05 - blah blah where the roads are laid out
554:07 - in a perfect grid
554:08 - and you arrive 10 minutes early to an
554:10 - appointment you want to go take a walk
554:13 - you've got an app that generates a
554:14 - little route and you can go either north
554:16 - south east or west
554:18 - and each unit is going to be a single
554:21 - block all right so we need to figure out
554:25 - if a given array of directions is going
554:29 - to
554:29 - put us back at our original destination
554:32 - and it's going to take exactly 10
554:34 - minutes and it says that
554:36 - each block is going to take you one
554:38 - minute so you
554:40 - takes you one minute to traverse one
554:42 - city block
554:43 - so we're basically returning true if it
554:45 - does false otherwise
554:47 - and then it says note you'll always
554:49 - receive a valid array containing a
554:50 - random assortment of directional letters
554:53 - and you're not going to receive anything
554:55 - other than north south east or west
554:58 - so in this case i think i have an idea
555:00 - of how we might solve this
555:02 - just initially
555:03 - so
555:04 - let's open this up and say the first
555:07 - condition
555:08 - we know that if there's not exactly 10
555:11 - elements in the array
555:13 - it's going to take us more or less than
555:15 - 10 minutes so we'll say if
555:17 - walk.length does not equal 10
555:21 - we're going to return false all right so
555:24 - if it doesn't equal 10 we're returning
555:26 - false and not going to the rest of the
555:28 - code if it does equal 10 then we'll go
555:30 - into the rest of the code and see if it
555:32 - gets us back in 10 minutes to our
555:34 - original destination now in this case i
555:37 - think what we're going to do is
555:40 - initiate or initialize
555:42 - four different variables
555:44 - so we'll say
555:46 - north offset
555:48 - equals zero
555:50 - uh west offset equals zero and we're
555:54 - going to do this for all of the
555:55 - directions so
555:58 - east offset
556:00 - and
556:02 - south offset
556:05 - all right so now we're going to loop
556:07 - through the array so we're going to use
556:08 - the for each method and we're going to
556:11 - pass in instead of array item let's
556:14 - start learning how to actually
556:16 - name our parameters to be a little bit
556:19 - more descriptive so we'll say
556:21 - direction which will represent the
556:24 - direction that we're going to receive
556:26 - and then we'll go down into the for loop
556:28 - and for each direction we're going to
556:30 - set
556:32 - our variables
556:33 - offsets
556:35 - so
556:35 - we'll use a switch case statement so
556:38 - we're going to put in the direction in
556:40 - the switch statement and then we're
556:41 - going to say case if it equals n then
556:44 - it's going to be north
556:46 - alright so we're going to put a break
556:48 - statement in there
556:50 - if it is west
556:53 - all right and then we'll just put the
556:54 - cases for all of the other ones
556:58 - we don't need that last break statement
557:00 - because it'll get there no matter what
557:02 - okay so we're going through all the
557:04 - different cases and in each one we're
557:06 - going to
557:07 - change the offset so if it is north
557:10 - we're going to say the north offset is
557:12 - going to be plus or equal 10
557:15 - all right so that's just going to say
557:17 - or not 10
557:19 - we'll just say 1. so we've gone
557:22 - north one block if the case is north and
557:25 - we're going to do that for all of these
557:27 - different cases so we'll say
557:29 - west offset will be plus or equal one
557:35 - and then
557:36 - let's see east offset plus or equal one
557:41 - and then in the last case we will say
557:43 - south offset plus or equal one
557:49 - so if we reach our destination like if
557:52 - we get put back to our destination then
557:55 - i think the sum of all of the offsets
557:58 - should net to
558:00 - zero
558:01 - or not not the sum you have to
558:04 - subtract them so
558:06 - the north offset will
558:08 - offset the south one and then west and
558:10 - then east so basically if
558:13 - north minus south equals zero and west
558:17 - minus east
558:18 - equals zero then we know that we have
558:20 - returned to the original destination so
558:23 - if we go down to the
558:24 - for loop here we'll say
558:27 - if
558:28 - north offset minus
558:31 - south offset equals zero and
558:35 - west offset minus east offset
558:39 - equals zero
558:40 - then we will return
558:42 - true
558:43 - otherwise we return false now in all
558:47 - these cases you're going to start
558:48 - catching on that
558:50 - when we just return true in a
558:52 - conditional
558:53 - oftentimes we can just return the
558:55 - expression itself so let's copy that
558:58 - and instead of this complicated block
559:01 - let's just return the expression itself
559:04 - all right so let's break out of here and
559:06 - test it and see what happens
559:08 - and we passed all of them so my
559:10 - assumption was correct you just
559:12 - calculate the offsets they should net to
559:14 - zero if you subtract them and if the you
559:17 - know left and right offset is zero and
559:19 - the top and bottom offset is zero then
559:21 - you've returned to your office or your
559:24 - appointment
559:25 - so let's attempt it see if we covered
559:26 - all the cases and we did so awesome
559:29 - let's submit it
559:31 - now this one i think was a little easier
559:33 - than the last two that we did but still
559:36 - required a little bit of thinking and
559:38 - i'm sure someone solved it in a much
559:39 - more efficient way so
559:41 - when it loads we'll see
559:44 - all right so the first solution here
559:47 - pretty much the same thing that we
559:50 - did so we did pretty good on this one
559:53 - all right once again we have a 6 kyu
559:57 - so might be a little bit tough but let's
559:59 - jump in and see
560:01 - it says write a function called
560:02 - persistence right here
560:05 - that takes in a positive parameter num
560:08 - and returns its multiplicative
560:10 - persistence which is the number of times
560:12 - you must multiply the digits in num
560:14 - until you reach
560:15 - a single digit
560:16 - so i don't understand this fully at
560:19 - first but let's look at the examples
560:21 - alright so if we pass in 39
560:25 - it says we do 3 times 9 which is going
560:27 - to be 27 right here and then you do 2
560:31 - times 7
560:32 - will equal 14 and then 1 times 4 will
560:35 - equal 4 which is a single digit
560:39 - okay
560:40 - now does it always do positive numbers
560:45 - okay it says positive parameter okay so
560:47 - we know it's going to be a positive
560:49 - number
560:50 - so we know how to identify whether the
560:53 - solution is a single digit we basically
560:56 - say
560:57 - you know if it is less than 10 it's a
560:59 - single digit okay
561:02 - so we're probably going to go in some
561:04 - sort of loop here to iterate over each
561:07 - new solution
561:10 - and we might actually use something
561:12 - called recursion
561:13 - i'm not sure about that yet but we'll
561:15 - see
561:16 - so let's see if this works so we'll say
561:20 - um how do we get the individual pieces
561:22 - of this number though so let's go
561:25 - i can't actually remember if you can do
561:27 - this but let's take a number like 299
561:31 - and see if we can access individual
561:33 - pieces of it
561:35 - looks like you cannot so
561:37 - we have to figure out how to get the
561:39 - first
561:41 - digit of each of the numbers
561:43 - so in this case i probably should know
561:45 - this but i don't and in the real world
561:48 - this is what i would do i would just
561:49 - open up a new tab
561:51 - and say find
561:53 - or maybe not find we'll say
561:56 - get first digit of a number
561:59 - in javascript
562:03 - so this will work get the second digit
562:04 - of a number
562:08 - okay so looks like we're turning it into
562:10 - a string grabbing the first digit and
562:12 - then converting it to a number
562:14 - okay so let's put a num
562:16 - equal to 299 and then say num
562:19 - to string okay it gives us 299 and then
562:23 - we can grab the first
562:25 - piece of that and then we will convert
562:28 - that to a number now there's a quick way
562:30 - to do this
562:31 - you could just put it wrap it around
562:34 - with this number object and it'll turn
562:36 - it back to a number
562:37 - or what you can do this is a shortcut
562:39 - you can just put a plus sign at the
562:41 - beginning and it automatically coerces
562:44 - it into a number so this is the pattern
562:46 - that we're going to use we're going to
562:48 - grab each of the
562:51 - digits of that number and then we can
562:54 - see
562:55 - you know multiply them together
562:56 - basically
562:59 - so the thing i'm curious about is
563:01 - whether
563:02 - we have okay so if we have three digits
563:04 - here
563:05 - we have to multiply all three of them
563:07 - okay so that's good to know
563:09 - so it could be up to maybe you know four
563:12 - or five or six digits so we have to do
563:14 - you know this times that times that
563:15 - times that so that's something we have
563:18 - to take into account here
563:19 - now if it's already a one digit number
563:22 - it says to return zero so
563:25 - let's just say that first we'll say if
563:27 - num is less than 10
563:29 - which means it's a one digit number
563:31 - we're going to return zero and if we
563:34 - test that we should get at least one of
563:35 - these correct
563:37 - so if if it passes in a one digit number
563:40 - we got that correct
563:42 - okay so the next part let's see
563:46 - so what i think we should do here
563:49 - is we should convert the number to a
563:52 - string and then maybe
563:54 - instead of doing what i was showing you
563:56 - over here converting it back to a number
563:58 - maybe what we can do is take the string
564:00 - and put it into an array
564:02 - so let's go ahead and do that
564:06 - string version is going to be
564:08 - num dot 2 string
564:11 - and then from the string what we know we
564:13 - can do is actually convert that to an
564:16 - array so we'll say array version
564:20 - is going to be equal to the string
564:22 - version
564:23 - and then
564:24 - let's see i actually can't remember
564:26 - exactly what we used there so let's go
564:28 - to the documentation
564:31 - and go to the string methods is what
564:33 - we're looking for
564:34 - the reason we're looking for a string
564:35 - method is because we're trying to
564:37 - convert this string here
564:39 - into an array
564:41 - so let's go to built-in objects
564:46 - string down here
564:49 - and then let's look through the methods
564:50 - i know that there's a way that you can
564:52 - turn this into an array
564:56 - okay so it should be the split method
565:01 - yep that's what we need i don't know why
565:02 - i couldn't think of that but
565:05 - if we take a
565:07 - string so let me just use an example so
565:10 - you remember we can actually write a
565:11 - string literal
565:12 - so
565:14 - some string
565:16 - example and then we can take that
565:18 - literal string and chain a method on top
565:21 - of it
565:22 - because it wraps it in the actual string
565:25 - object that has methods automatically
565:28 - so what we can do is say split and then
565:31 - if we just pass in a empty string it's
565:34 - going to split it by each of the
565:37 - values here and that's exactly what we
565:39 - want to do
565:40 - so
565:41 - let's go ahead and see how that would
565:42 - work so if we say num
565:44 - dot to string so we first convert it to
565:47 - a string and then we say dot split
565:50 - and we pass in an empty string it's
565:52 - going to give us each of those
565:55 - numbers
565:56 - in string form all right and then from
565:59 - here we can basically convert those to
566:01 - numbers and multiply them together
566:05 - a good way that we can do that is by
566:06 - using the reduce method so
566:09 - if we chain on one more thing here we
566:11 - can say reduce and then we can say the
566:14 - the
566:14 - [Music]
566:16 - accumulator which is going to be
566:18 - accumulating that multiplication
566:21 - operation
566:22 - but we have to pass in a callback
566:24 - function so we'll put the accumulator
566:27 - and then the actual array item or the
566:30 - number so maybe we'll just pass in num
566:34 - for number and then now what we want to
566:36 - do is accumulate so
566:38 - multiply equal so it's going to take a q
566:41 - like whatever that's equal to now
566:44 - and it'll multiply that by the new
566:46 - number and store that in the same
566:48 - variable called acc for accumulator
566:51 - so we'll just do that multiplied by a
566:53 - number
566:54 - and we get the answer of 162.
566:59 - all right so that's our that's our
567:01 - solution here so if we do 2
567:04 - times 9 times 9 we get 162 which is our
567:09 - answer here so this is basically what
567:11 - we're going to do
567:12 - and we can do it in one step like we've
567:15 - done here but we can also see it a
567:16 - little bit more clearly if i break it
567:18 - out into steps
567:20 - so let's go ahead and do that we've
567:21 - already converted it to a string
567:23 - now we want it to be in an array so
567:26 - we'll say split by an empty string
567:30 - and then finally we want to get the
567:34 - multiplication
567:35 - [Music]
567:37 - value
567:39 - is going to be equal to
567:40 - arrayversion.reduce
567:42 - and then we of course have our
567:44 - accumulator and our number
567:47 - and then what we want to return from
567:48 - that callback function is the
567:50 - accumulator multiplied
567:52 - not added sorry
567:54 - multiplied by that number okay
567:57 - so that's our callback function
567:59 - multiplication value should get the
568:00 - multiplication of all of them and then
568:02 - we'll say if
568:04 - multiplication
568:06 - value is less than 10
568:09 - then we want to return true so
568:12 - you can already see where this one is
568:14 - going we can just return multiplication
568:18 - value is less than 10. so if it is less
568:20 - then we return true otherwise we return
568:23 - false
568:24 - now the problem with this
568:27 - is we have to figure out how many times
568:30 - um we have to iterate through this
568:33 - before we get something that is less
568:35 - than 10. so we're not quite done with
568:37 - the solution yet
568:40 - so this i believe is where the recursion
568:42 - comes in and recursion in
568:45 - coding languages is
568:47 - probably the hardest concept that you
568:50 - could
568:51 - learn so this one don't beat yourself up
568:54 - if you don't understand what this is
568:55 - doing fully
568:57 - um this is something that took me a long
568:59 - long couple hours early on in my journey
569:02 - to fully understand like how it worked
569:05 - so don't beat yourself up but i'm going
569:07 - to show you how i'm going to do this and
569:09 - hopefully it will actually work so i'm
569:10 - not talking a bunch of nonsense here
569:13 - all right so for this solution i had to
569:15 - turn off the camera
569:17 - i didn't realize that we'd be dealing
569:19 - with recursion here until i looked at
569:21 - this problem
569:22 - but a trick that you can use for
569:25 - recursion and just to kind of explain
569:27 - this code just at a high level and again
569:29 - you don't need to understand
569:31 - exactly how it's working because
569:33 - recursion is a very tough subject but
569:35 - basically what we're doing is we you
569:37 - know go through this code which i
569:39 - explained a little bit earlier and this
569:41 - is going to give us our multiplication
569:43 - value
569:44 - and then
569:46 - for recursion where we're you know
569:48 - calling the function multiple times on
569:50 - itself
569:51 - you need a stop condition okay so the
569:54 - stop condition is
569:56 - when multiplication value is not
569:59 - greater or equal to 10. so basically in
570:02 - this
570:03 - else return
570:04 - and what we're doing here when we say
570:07 - return 1 plus the
570:10 - persistence what it's doing is
570:13 - it's this is just a trick of recursion
570:15 - and if you read up on
570:17 - how recursive functions work in
570:18 - javascript you'll see this notation
570:21 - right here
570:22 - but basically what we're doing is we
570:23 - know that
570:25 - if the stop condition is met then we
570:27 - return the value of one
570:29 - otherwise we're going to keep calling
570:32 - the persistence function until we reach
570:34 - that so if we add 1 to the return value
570:37 - of each iteration or recursion then
570:40 - we're going to accumulate a total value
570:43 - of how many times we went through this
570:45 - so again this is a little bit confusing
570:47 - it was really confusing to me i had to
570:49 - brush up on recursion a little bit to
570:51 - solve this problem but basically this is
570:54 - i think the best solution that you're
570:55 - going to find for this problem so let's
570:57 - go ahead and attempt it we passed all of
571:01 - them so let's see how other people
571:03 - solved it maybe there's a way to do this
571:04 - without recursion
571:06 - but nevertheless this is probably the
571:09 - most efficient solution
571:12 - okay so actually the first solution
571:14 - might be more simple than
571:16 - um what we used here
571:19 - so this doesn't use any sort of
571:21 - recursion at all this is simply
571:24 - using the reduce method kind of as we
571:27 - had used so we we did this exact thing
571:30 - but it's looping through while the the
571:33 - num num counter is greater than one so
571:38 - and then it uses this times variable to
571:40 - kind of collect the number of times that
571:43 - we've gone through this
571:45 - this one right here
571:47 - this is
571:48 - like this is as concise
571:50 - of a solution as you could possibly get
571:53 - this is basically what we did
571:55 - it's a little bit syntactically
571:57 - compressed so you have a lot of little
572:00 - javascript tricks going in here but you
572:02 - can see the where we do one plus the
572:05 - persistence function so we're recursing
572:08 - over it so that would be the most clever
572:11 - solution as you can see here
572:13 - but once again recursion is a very tough
572:15 - subject i wouldn't expect
572:17 - any beginner that's watching this to
572:19 - really understand how to do that but of
572:21 - course you could have solved it this way
572:23 - which didn't require recursion like i
572:25 - used
572:26 - okay so we're on a 7 kyu
572:30 - problem which should be a little bit
572:31 - easier so let's see if that's the case
572:34 - it says atm machines allow 4 or 6 digit
572:37 - pin codes and pin codes cannot contain
572:39 - anything but exactly four digits or
572:41 - exactly six digits if the function is
572:44 - past a valid pin string return true else
572:46 - return false
572:48 - so this one looks pretty easy we're
572:49 - going to be using regular expressions
572:51 - here
572:52 - so this is exactly four digits
572:56 - this is four digits but it's
572:57 - alphanumeric so there's a letter in here
573:00 - so it's not valid
573:01 - so this one should be pretty easy we can
573:03 - go over here to actually look
573:06 - at these
573:08 - regular expressions a little bit
573:10 - so let's say that we have a string
573:12 - and the string is
573:15 - four digits here
573:17 - and then we want to
573:19 - match that against a regular expression
573:21 - of some sort so if we want to do that
573:24 - we're looking for numbers between 0 or 9
573:27 - and we want
573:28 - either 4
573:30 - or 6 so the way we can do that is we can
573:33 - basically i think
573:35 - i think we can just wrap this in a
573:37 - parenthesis
573:40 - and then repeat it with an or
573:44 - and then instead of 4 we pass in 6 here
573:47 - so let's see if that works if we add in
573:49 - one more it should not match it but if
573:52 - we add in two more it should
573:55 - um no so that's not working we could
573:57 - just separate this into multiple regular
574:00 - expressions because i can't remember
574:01 - exactly how to do this
574:03 - for both of them
574:04 - so in this case we're looking for any
574:07 - number so this will exclude letters
574:09 - automatically
574:11 - in a quantity of exactly four
574:14 - and we could be even more specific by
574:16 - saying the start of the line and
574:19 - end of the line with the dollar sign
574:21 - and basically if we're matching this
574:23 - then we're good so if we come up with
574:26 - anything here now if we put in
574:28 - uh five of them we're going to get an
574:30 - answer of null so we know that if we get
574:33 - an answer of null then it's not correct
574:36 - so let's go ahead and just write two
574:37 - regular expressions so we'll say
574:40 - four digits
574:42 - regular expression is going to be equal
574:44 - to
574:45 - what we just wrote here so let's just
574:47 - paste that in
574:50 - and then we can come down here and say
574:54 - six digits regular expression and just
574:57 - change this right here to a six so we're
574:59 - either matching all numbers uh in a
575:02 - quantity of four or all numbers
575:04 - in a quantity of six
575:06 - so we can basically return you know if
575:08 - both of these are null that means that
575:10 - we didn't match either of them so the
575:12 - answer is false but if either of them
575:15 - are true so they have a you know they're
575:18 - not null then we can return true so
575:21 - let's say we want to return
575:24 - um
575:27 - four digits
575:29 - right regex
575:31 - um and we have we actually have to match
575:33 - this up against the pin code so let's do
575:35 - that real quick
575:36 - so we'll say result one
575:41 - equals and then if you remember you can
575:43 - take the string pin number
575:46 - um i'm not sure if it is a string
575:50 - okay so it's passed a string value so
575:52 - we're good so we'll say uh pin dot match
575:55 - and then we'll pass in the four digits
575:57 - regular expression
575:59 - and then we might want to look for
576:01 - result number two
576:03 - and pass in the
576:04 - six six digits regular expression
576:08 - so here's what we can say we can say
576:11 - return
576:13 - result one dot length is greater than
576:16 - zero
576:18 - or no because if it's null then
576:21 - we don't have an array that we can check
576:23 - that on
576:24 - so basically we can say
576:26 - if
576:27 - result 1
576:29 - equals null
576:30 - and result 2 equals null
576:34 - then we want to return false
576:37 - otherwise we want to return true because
576:40 - we matched one of them so null values
576:45 - default to falsy values so we can
576:48 - actually remove this and say
576:52 - if
576:54 - not result
576:58 - and not result 2.
577:07 - and you can see that it passed
577:09 - now we can simplify this even further
577:11 - so if we say
577:13 - let's see
577:15 - if we just return this expression
577:19 - can't spell so if we're saying
577:21 - if
577:22 - both of these are equal to null then we
577:25 - return false so let's see if that works
577:27 - it may actually be the opposite
577:29 - yeah so it's it's going to be the
577:30 - opposite let's see
577:33 - so all we have to do is reverse this by
577:35 - wrapping it in
577:37 - parentheses kind of reversing the result
577:41 - and this time it should pass so
577:44 - this is a decent solution but i
577:46 - guarantee you there's going to be
577:48 - solutions that are a little simpler than
577:50 - this where we don't have two different
577:52 - regular expressions there's definitely
577:54 - going to be a solution where we have a
577:56 - single regular expression that checks
577:58 - for both of them and i'll point that out
578:00 - when we get there
578:01 - okay so this one would be the best one
578:04 - the backslash d represents the digits so
578:08 - that's the same thing as our brackets
578:10 - and then zero to nine and you can see
578:12 - that it's doing the same thing that i
578:14 - was kind of trying to do i must have
578:16 - just messed up part of the syntax there
578:19 - but it's just testing against this
578:21 - regular expression so
578:23 - um that's basically
578:25 - um the best solution and this is the one
578:27 - i'd recommend using if you had the time
578:30 - to actually figure out how to write the
578:32 - regular expression that covers both
578:33 - cases
578:35 - now this is another regular expression
578:37 - this one should be even easier
578:40 - because it's 8 kyu so it says your task
578:42 - is simply to count the total number of
578:44 - lowercase letters in a string
578:47 - okay so let's take one of these
578:49 - complicated ones here and just take it
578:51 - into our
578:52 - little sandbox that we've been using
578:55 - so i'll paste that into the string
578:57 - and we'll start over with our regular
579:00 - expression
579:01 - so in this case we're counting the
579:03 - number of results that we have so we
579:05 - probably want to pass in the global flag
579:08 - to our regular expression so put that at
579:10 - the end
579:10 - and then we want to look for a through z
579:14 - lowercase letters
579:15 - and
579:16 - that's basically going to give us our
579:19 - answer i believe
579:20 - so if we just pass in a through z and
579:22 - then we pass in this global so if we
579:24 - take this off it's just going to match
579:26 - the first lowercase letter but if we put
579:28 - it back on it will give us all of them
579:31 - so that's pretty much all we're having
579:33 - to do here and then we just need to
579:35 - count the length of the array so let's
579:38 - do that
579:40 - we will just say return
579:42 - string.match and then we'll pass in
579:46 - lowercase a to lowercase z
579:49 - we'll pass in the global option and then
579:51 - we'll return the length of that array
579:56 - looks like we failed one of them
579:59 - so
580:00 - cannot read property length of null so
580:03 - in this case there's probably
580:06 - no array that we're getting right so if
580:08 - there's nothing
580:09 - if there's no lowercase letters we're
580:11 - not going to get a valid array and you
580:12 - can see that here if we were to take out
580:15 - all of these lowercase letters you're
580:18 - going to get a value of null
580:20 - so we need to handle that instead of
580:22 - just tacking on the length we have to
580:25 - first check whether it is a truthy value
580:28 - so let's see how we can do this kind of
580:30 - simply
580:32 - so we can use a ternary operator to do
580:34 - this
580:35 - so if we if we um
580:38 - basically say if this is a valid
580:42 - expression so as long as this does not
580:44 - equal null then we're going to get put
580:47 - into
580:48 - this part of the ternary operator so
580:51 - let's go ahead and save the result
580:53 - so the result is going to be equal to
580:56 - our regular expression
580:58 - evaluation
581:00 - and then we're going to say if the
581:01 - result
581:02 - is a truthy value then we're going to
581:05 - return result.length and otherwise we're
581:08 - going to return
581:10 - false or something like that let's see
581:12 - what it says in the instructions
581:16 - okay so if there's nothing we want to
581:18 - return zero so sorry about that it
581:20 - shouldn't be false it should be zero
581:24 - all right so we passed it this time
581:25 - let's just clean that up and attempt it
581:29 - cool
581:30 - so this one was rather simple a little
581:32 - bit easier than our previous regular
581:34 - expression and again as i said in the
581:36 - lesson you don't need to necessarily
581:38 - know like all of the details about
581:40 - writing regular expressions it's just
581:42 - good to be able to read them and that's
581:44 - why i wanted to go through this as an
581:46 - example
581:47 - so the next one we're doing is going to
581:49 - look at some basic dates and this one is
581:52 - asking is the date equal to today
581:55 - so it says write a simple function that
581:56 - takes a parameter as a date object
581:59 - or
582:00 - takes as a parameter a date object and
582:02 - returns a boolean value representing
582:04 - whether the date is today or not okay so
582:07 - this last part is basically just telling
582:09 - us like hey there is um going to be you
582:12 - know the 10th of january and the 10th of
582:15 - february so you can't just look at
582:17 - the day of the month which um we will
582:20 - look at but not exclusively
582:22 - so
582:23 - let's just make a bunch of variables
582:25 - here so our
582:29 - check day
582:31 - so this will be the date that we're
582:32 - passed we can just use the get date
582:35 - method that's going to give us the day
582:37 - of the month
582:39 - all right so check month is going to be
582:41 - date dot get month i believe
582:45 - we can go to the date methods so if we
582:47 - go to
582:49 - the mdn documentation go to built in
582:52 - objects and go to date
582:54 - you'll see that we have the get month
582:56 - method
582:58 - the get full year method and the get
583:00 - date method now you might say get day
583:04 - but this is the day of the week not the
583:06 - day of the month so we need get date
583:08 - instead
583:09 - so this will be day
583:11 - or this will be month of year
583:14 - and then
583:15 - this is zero indexed so that's important
583:18 - to remember so january is going to be
583:20 - zero
583:21 - and then
583:22 - the check year is going to be the date
583:25 - dot get full year
583:28 - all right and then
583:29 - our
583:30 - date today is going to be very similar
583:33 - so let's just copy all this code down
583:36 - here
583:41 - and we'll say today
583:43 - instead of check
583:48 - and then we'll replace all this with
583:51 - um
583:52 - the actual current date so
583:54 - today is going to be equal to a new date
583:57 - that's how we initialize it and then we
584:00 - can pass this in here in
584:02 - place of the date
584:07 - so then we just return
584:11 - check day
584:14 - equals
584:15 - today day
584:16 - and all the other ones match so let's
584:19 - just write that out
584:29 - all right so it's a little bit of a long
584:31 - expression but it should work
584:33 - all right so we passed it
584:41 - now the quickest way to do this
584:43 - it looks like
584:45 - is this solution so what are they doing
584:47 - here so they're creating a new date
584:49 - converting it to a date string
584:52 - and checking if that is equal to the
584:54 - date that was supplied
584:56 - to date string
584:59 - i actually didn't know that you could do
585:00 - that because this will give you
585:02 - different times
585:05 - but i guess it matches if you have
585:08 - uh different times of the day so let's
585:10 - just try that real quick in our
585:14 - console just to see if it's true so
585:17 - we'll set a to a date and then we'll set
585:20 - b to a date
585:22 - and then see if b equals a which is
585:25 - false so if you go
585:27 - obviously those are not going to be
585:29 - equal because the value of the date is
585:31 - milliseconds since whatever january 1st
585:33 - 1970 at midnight
585:36 - but if we convert it to string so
585:38 - tostring
585:41 - and then try it with b.2 string
585:46 - that's going to give you a false value
585:48 - too so i'm not sure what's going on here
585:51 - oh to a date string okay
585:54 - that's what that's where we went wrong
585:56 - we're using two date string
585:58 - so that should work now
586:01 - okay so that equals true so let's take a
586:03 - look at that
586:04 - method on our documentation so it says
586:07 - two
586:09 - string which is not some not one of them
586:12 - that we covered in our lessons which is
586:13 - why we didn't use it here
586:15 - but it says this returns the date
586:17 - portion of the date object
586:20 - so that's basically going to strip off
586:22 - the time
586:24 - and check if it's the same day so that's
586:25 - a good solution didn't think of that but
586:27 - that's a lot more concise that than what
586:29 - we did
586:30 - this is what we did we just checked it
586:33 - up against
586:34 - all the different methods that we had
586:37 - covered in our lessons
586:39 - all right so let's go to the
586:42 - next
586:43 - challenge
586:45 - and this is alternate capitalization
586:49 - given a string capitalize the letters
586:51 - that occupy even indexes and odd indexes
586:53 - separately and return as shown below
586:55 - index 0 will be considered even
587:00 - okay so we're going to return basically
587:02 - two strings for each
587:04 - argument here
587:08 - the input's always going to be lowercase
587:10 - with no spaces okay
587:13 - okay to solve this we first need to get
587:15 - this into an array so we need string to
587:17 - be into an array and then we'll
587:20 - capitalize them separately and then
587:22 - we'll combine them back into a string
587:24 - and assign them to different array
587:26 - values
587:27 - so how that's going to look
587:29 - let's see
587:31 - we will say array is equal to string dot
587:34 - split
587:36 - and we're going to split it by an empty
587:38 - string which will just separate all of
587:41 - the characters by a comma
587:43 - all right so if we just did that and
587:44 - console.logged it
587:46 - here's what we're going to get
587:50 - here's our string right here so we've
587:51 - got all of each letter
587:53 - broken out and we know that we have to
587:55 - take this array and we need to
587:57 - capitalize it in two different ways
588:00 - so we'll just say
588:02 - array one is going to be
588:04 - string.split and then we will also have
588:07 - array two
588:08 - and then we're going to loop through
588:10 - these arrays so array one dot four each
588:15 - and we'll say for each item then we also
588:18 - probably want the index
588:20 - because we got to figure out if it's
588:21 - even or odd
588:23 - and then we'll say array 2 but let's not
588:25 - do that quite yet we'll just figure this
588:27 - one out first
588:29 - so for array 1 we want to check
588:32 - if the index is we'll say even so this
588:36 - will be
588:37 - even
588:40 - capitalization can't spell here
588:44 - all right so if it's even that would
588:46 - include zeros
588:48 - so how do we find out if a number is
588:50 - even well we could use the modulus 2
588:52 - operator so if we came to our
588:56 - little playground here
588:57 - in the console
589:03 - and we said okay 0 modulus 2 is going to
589:06 - be 0.
589:07 - 1 modulus 2 is going to be 1.
589:11 - 2 modulus 2 will be 0 and 3 modulus 2
589:15 - will be 1. so basically anything modulus
589:18 - 2 that returns us with 0 is going to be
589:20 - even
589:21 - everything else is going to be odd so
589:24 - that's all we have to do here we'll say
589:26 - if the index
589:29 - modulus 2
589:30 - equals 0 then it's even
589:33 - and for that case we'll say array 1 at
589:36 - the index that we're looking at
589:39 - and then we want to set that to
589:41 - uppercase
589:43 - okay so we've got array 1 completed and
589:46 - let's go ahead and console.log that and
589:48 - see if we did it correctly
589:51 - and we didn't do this correctly i don't
589:52 - know what i was actually thinking here
589:54 - we already have the array item
589:57 - so
589:57 - we just need to take the item and make
590:00 - it uppercase i think
590:03 - okay so we have a problem here we're
590:05 - trying to modify the actual item which
590:08 - is not going to modify the original
590:10 - array
590:11 - i just realized that so if you go to the
590:13 - array methods
590:15 - and go to javascript built-in objects
590:18 - and go to array
590:20 - you're going to see if we look at the
590:23 - for each method which is right here
590:27 - the callback function takes the current
590:29 - value the index and the array
590:31 - so we want to actually grab this third
590:34 - parameter and modify it within our
590:38 - problem here so we'll pass in the item
590:40 - index and then the original
590:42 - array and in this case we'll take the
590:46 - original array
590:48 - we'll pass in the index of that and then
590:50 - we'll set that equal to the item.2 upper
590:53 - case
590:55 - so i believe this one should work now
590:58 - we'll see
590:59 - and you'll see that we did capitalize
591:01 - the first so that's even lower case on
591:04 - the second upper case on the third
591:07 - so that should be working
591:10 - and i believe
591:11 - we did that right but let's check one
591:13 - time
591:15 - so capulet capitalize the letters that
591:17 - occupy even indexes index 0 will be
591:20 - considered even ok so we did that
591:23 - correctly so array 1 is done and then we
591:26 - can basically just do this again for
591:30 - odd capitalization
591:32 - change this to array two
591:34 - and then instead of saying when it's
591:36 - equal to zero we'll say when it's not
591:38 - equal to zero
591:40 - and then we just need to return
591:44 - a final array and we pass an array 1 and
591:47 - array 2
591:48 - and i think that should get us to an
591:51 - answer
591:52 - maybe we did this in the wrong order
591:55 - let's see
592:01 - oh i'm sorry i'm not doing this
592:03 - correctly so our arrays are
592:06 - um
592:07 - split out into individual letters so we
592:09 - have to convert those back to strings so
592:12 - let me do that real quick
592:14 - um array one string is going to be array
592:17 - one
592:18 - um and then join by
592:21 - an empty string which will
592:23 - actually
592:25 - yeah i believe by an empty string which
592:27 - will join them all together and then we
592:29 - can do the same thing for array
592:32 - 2 string
592:34 - pass in array 2
592:36 - and then we will return those like this
592:43 - and see what we get
592:46 - all right so we passed them this time
592:48 - let's just open this up and review what
592:49 - we did
592:51 - so as you see we're going to first take
592:54 - these
592:55 - strings and turn them into an array so
592:58 - if we go back here if we have some sort
593:00 - of string and then we say split and we
593:03 - use a empty character it's going to put
593:05 - it all into an array
593:07 - then we go and we loop through that
593:09 - existing array with the for each method
593:12 - and we know that the callback function
593:14 - that we're using is going to pass the
593:16 - item that we're looking at
593:17 - the index of that item and then the
593:19 - original array that we can actually
593:21 - modify within that loop and that's we
593:25 - knew this because we looked at the
593:26 - documentation here
593:28 - otherwise
593:29 - you probably would have to do just a
593:31 - regular for loop which acts a little bit
593:33 - different than a four each
593:36 - so anyways we're going through and we're
593:38 - asking if the index is
593:40 - modulus 2 equals 0 which indicates it's
593:43 - an even number and when it
593:46 - equals an even number we take our
593:48 - original array we pass in the index into
593:52 - the brackets to grab the item and we set
593:54 - that equal to
593:56 - the item itself in uppercase form and
593:59 - then for the odd capitalization we just
594:02 - basically do the opposite
594:04 - if modulus 2 does not equal 0 then we
594:07 - want to make it uppercase then finally
594:09 - we join those back together so um if we
594:12 - go to this array here so we split them
594:15 - into an array and then if we add join
594:18 - with an empty character it just joins
594:19 - them back together to the original
594:21 - string but we've obviously capitalized a
594:24 - few of them in the middle so we join
594:26 - them back together and then we just
594:28 - place them in a new array and return
594:30 - that array and that should give us the
594:32 - answer
594:35 - okay i think this is getting to the end
594:37 - one of our last ones here if not the
594:39 - last one
594:41 - it says given a number return the
594:42 - maximum number that could be formed from
594:44 - the digits of the number given only
594:46 - natural numbers pass to the function
594:48 - numbers contain digits 0 through 9
594:50 - inclusive
594:52 - digit duplications could occur so also
594:54 - consider it when forming the largest
594:57 - okay
594:58 - so that's a good hint for us to remember
595:01 - here's an example so
595:03 - three goes first two goes second and one
595:05 - goes third that makes sense that's the
595:07 - maximum number that we could form
595:10 - okay
595:12 - so basically we have to take our number
595:14 - and we have to order it from greatest to
595:17 - least
595:18 - so i think a good way to do that is we
595:21 - might have to convert it into an array
595:24 - possibly
595:27 - so basically what this is asking us to
595:29 - do if we think about it
595:32 - you know all these numbers are going to
595:33 - be in
595:35 - the
595:36 - descending order so you have the largest
595:38 - one first and so basically what this is
595:40 - asking us to do is sort an array because
595:43 - we know that we can take this number
595:45 - convert it to a string and then separate
595:48 - that out into an array and if we can
595:50 - just sort that array then
595:52 - we got the answer
595:54 - but the sort method does not do it
595:56 - correctly when we have numbers here so
595:58 - let's just type it in to google
596:01 - this is just an algorithm so sort
596:04 - array
596:05 - numerically
596:07 - in javascript and we'll see what the
596:09 - answers are
596:10 - so it says how to sort an array of
596:11 - integers correctly
596:16 - and let's see
596:18 - okay so we can just use the sort
596:20 - function we actually can use it we have
596:22 - to pass in
596:24 - a callback um that will compare the two
596:27 - numbers so
596:28 - um let's see
596:31 - the sort method takes a compare function
596:34 - okay so i was just reading this
596:35 - incorrectly so we can take a call back
596:37 - and look at the compare function and
596:40 - return the greatest number so let's go
596:42 - ahead and do that uh just practice real
596:45 - quick
596:46 - so let's say that we have an array of
596:48 - numbers so 2
596:50 - 6 3 1
596:52 - and we want to sort that
596:54 - so we will pass in our single num
596:57 - and then we want to say let's see
597:04 - what does it pass into this callback so
597:07 - let's look the first element and the
597:08 - second element is what it's going to
597:10 - pass in there
597:12 - so if we go to our
597:13 - little playground here it's not just one
597:15 - number but we'll have
597:18 - the first and second element
597:21 - and so if the
597:23 - second element is greater than the first
597:27 - then we'll return true i believe so
597:30 - let's see how it did it in this stack
597:32 - overflow answer it says return a minus b
597:35 - so
597:36 - actually it's the other way around so if
597:38 - a is greater than b
597:40 - we return
597:42 - that as true and then that's going to
597:44 - actually sort our array for us
597:46 - so let's test that out real quick
597:48 - we just want to return first minus
597:51 - second
597:52 - and now we have it sorted in ascending
597:55 - order i wonder if we take it second
597:58 - minus first
598:02 - okay so that's going to do it in
598:04 - descending order so we want to do second
598:06 - minus first for our problem here
598:09 - all right so the first thing we need to
598:10 - do is get this into a string
598:13 - so
598:14 - we're just going to try to do this all
598:15 - in one line because
598:17 - it'll help us kind of visualize chaining
598:19 - the methods together
598:21 - so we're going to return
598:22 - n
598:24 - to string
598:26 - okay so that converts it to a string
598:28 - and then we want to split it into an
598:31 - array
598:33 - now we've got it into an array of
598:35 - numbers here
598:37 - and then we want to sort it and pass in
598:40 - the first number
598:44 - first number and second number and then
598:47 - we want to return
598:48 - second minus first
598:51 - okay and then that's going to give us
598:53 - a sorted array of numbers
598:55 - so maybe we won't do this um
598:58 - let's just store this in a result
599:02 - for now and then console.log that result
599:08 - and see what we have so far
599:11 - so we'll test that
599:12 - and you'll see that it prints the
599:14 - console a descending order of that array
599:18 - now we know that we can take an array of
599:20 - numbers and we can actually
599:24 - just combine those together with join
599:27 - so maybe that's all we need to do we
599:29 - just
599:30 - at the end here so hold on one second
599:34 - let's return this again
599:37 - or no let's not do that let's keep it in
599:39 - the result and then at the end here i'm
599:41 - going to
599:42 - break out
599:44 - for a second and we can actually
599:46 - put these down onto
599:47 - separate lines
599:50 - so we'll say dot split
599:55 - dot sort
599:56 - and then
599:57 - the last thing that we want to do is
599:59 - we've got it in the descending
600:02 - array so then we can join it back
600:04 - together as a string
600:06 - and that's going to give us one big
600:08 - number
600:09 - and then we need to just convert that to
600:11 - a number and all we have to do is add a
600:13 - plus sign at the beginning to do that
600:16 - so now let's see what our result equals
600:21 - looks like we're getting the correct
600:23 - number here
600:24 - so all we have to do is return this
600:26 - result now so we don't even need to
600:28 - store it in a variable we can just
600:30 - return it and let's see how it works
600:34 - looks like we passed everything and
600:36 - again this is just some indentation it
600:38 - doesn't really matter how you do this
600:41 - we're just chaining all these methods
600:43 - together and you could certainly have
600:44 - broken that out into separate steps
600:47 - so let's attempt it looks like we passed
600:49 - everything and see what
600:51 - others use to solve this problem
600:56 - okay so this person
600:58 - did not pass in a sort callback they
601:01 - just
601:02 - passed in no
601:05 - no function whatsoever and that's going
601:07 - to default to ascending order as you saw
601:10 - up here so it says
601:14 - the default sort order is ascending so
601:17 - here they're going to split it into an
601:19 - array then they're going to sort it to
601:21 - ascending then they're going to use the
601:24 - reverse array method to make it
601:26 - descending and then they're going to
601:28 - join it together and then wrap it in a
601:30 - number which we did by adding the plus
601:32 - at the beginning
601:33 - of the entire expression so you can see
601:36 - i believe yeah this one right here is
601:38 - the exact solution that we used
601:40 - so pretty good i'm pretty happy with
601:42 - that one
601:43 - and with that i think we are done with
601:45 - these problems
601:47 - hopefully you learned a little bit i
601:48 - know some of these were
601:50 - more complicated and challenging than
601:53 - you would expect for a beginner and
601:55 - certainly when we talked about recursion
601:57 - there for a little bit that's getting a
601:58 - little bit over the pay grade of someone
602:00 - just starting out but it is an important
602:02 - topic to explore and kind of understand
602:06 - it definitely will come up in some sort
602:07 - of coding interview if you're doing
602:09 - those
602:10 - but yeah hopefully you enjoyed this
602:12 - if you
602:14 - care to drop a like on this video i'd
602:15 - really appreciate it subscribe to the
602:17 - channel for future lessons
602:20 - um and hit me up on twitter i'm at zg
602:22 - underscore dev uh tell me what you
602:25 - thought of this video and um how the
602:27 - challenges went for you
602:28 - all right so i will see you in the next
602:30 - lesson i believe that is lesson seven
602:35 - this is an html crash course and i'm
602:38 - really excited to walk you through it
602:40 - and i want to show you exactly what
602:42 - we're going to build over the next
602:44 - couple of videos
602:45 - so here is our ultimate challenge that
602:48 - we're trying to create and what this
602:51 - does is you've got a bunch of buttons
602:52 - here on the right where we can click
602:54 - them
602:55 - and a random meme is going to be shown
602:58 - to the screen or you can have a joke
603:02 - displayed on the screen a quote
603:04 - or a riddle where you're going to get
603:06 - the riddle and then you have to reveal
603:08 - the answer here
603:09 - so this is going to be a really fun
603:12 - project but before we get into it we
603:14 - have to learn a little bit about html
603:17 - now you'll notice that it's styled
603:18 - pretty nicely and this actually has some
603:21 - css in it but we're not going to be
603:23 - covering that in
603:25 - this lesson number seven of the series
603:28 - in the prior lessons of this series
603:30 - we've been talking a lot about
603:31 - javascript and basically how to program
603:34 - in general now we're going to jump into
603:37 - html and then in the next
603:39 - lesson series we're going to jump into
603:42 - css and we're ultimately going to
603:44 - complete our introduction to front-end
603:47 - web development before we dive into the
603:50 - details of html i want to start with a
603:53 - little bit of an analogy that will help
603:55 - us
603:56 - kind of going forward in this crash
603:58 - course and then also the css one in the
604:01 - next lesson
604:03 - so that analogy is building a house if
604:06 - you are building a house you basically
604:07 - have three steps first you have to build
604:10 - the structure so that would be the wood
604:12 - the concrete the brick the roofing all
604:15 - that kind of stuff
604:16 - then you have to set up the function of
604:19 - the house so that would be the plumbing
604:20 - the electric the water lines all of that
604:23 - kind of stuff has to go into the house
604:25 - to make it functional and then finally
604:27 - the third step is to make it look good
604:30 - you obviously don't want to build a
604:32 - house that doesn't look good you want to
604:34 - paint it correctly and you want to do
604:36 - some landscaping around it put some
604:38 - siding on it
604:40 - all of that stuff is very important for
604:42 - the market value of the house so if our
604:45 - house was a website
604:47 - the structure would be the html now
604:50 - the function
604:52 - the electric the plumbing all that kind
604:53 - of stuff would be the javascript and
604:56 - then the styling so the the paint and
604:58 - the landscaping that would be the css
605:01 - now you could live in your house with
605:03 - just the structure or the html
605:06 - you wouldn't have any function so you
605:08 - wouldn't have running water you wouldn't
605:10 - have heat or anything that makes a house
605:12 - livable but you certainly could live
605:15 - in that house and you'd have a roof over
605:17 - your head now
605:19 - if you add in the function you could
605:21 - live with just that too so you know add
605:24 - in the electric and the plumbing and now
605:26 - you've got a house that is functioning
605:28 - but one that is not worth that much if
605:30 - you went to try and sell it because you
605:32 - haven't painted it you haven't put
605:34 - landscaping around it and you haven't
605:35 - made it look attractive to another buyer
605:38 - so that's where the css comes in that's
605:41 - where the styling comes in so ultimately
605:43 - the goal of this analogy is to say that
605:46 - html is the only true requirement of a
605:48 - web page
605:50 - but if you want it to do anything useful
605:52 - you got to add some javascript and if
605:54 - you want to
605:55 - make it presentable to other people your
605:58 - users you have to add in the css so
606:00 - that's just a nice analogy to remember
606:02 - how everything relates to each other and
606:05 - how html css and javascript play nicely
606:08 - together to create a full user
606:10 - experience on the web while these all
606:12 - work together we're going to be skipping
606:15 - the css part in this lesson so like i
606:18 - said we've learned a lot about
606:19 - javascript in the prior
606:21 - couple of lessons of this full stack
606:24 - roadmap series
606:26 - and now we're going to learn about html
606:28 - so we're basically going to be focusing
606:30 - only on those two how do they interact
606:32 - and just as a hint it's going to be a
606:35 - big conversation about something called
606:37 - the document object model or the dom and
606:41 - that's basically the model that
606:43 - represents the html and allows us to
606:45 - plug our
606:46 - javascript into that html and make it
606:49 - functional but at this point we're
606:50 - getting too detailed we'll get there in
606:53 - a second first we need to understand
606:55 - what is html how does it work and how do
606:57 - we write it the first thing that we have
606:59 - to ask is what is html and it stands for
607:02 - hypertext markup language and despite
607:05 - the last word language it's generally
607:08 - not considered a full-on programming
607:10 - language like something
607:12 - like javascript that we've been working
607:14 - with before
607:15 - it's something that allows you to
607:17 - structure
607:19 - your text and all different components
607:21 - that you're going to put on a web page
607:24 - but it's not a full-on programming
607:26 - language you can't add in a whole lot of
607:28 - logic behind the scenes and make things
607:30 - dynamic without adding in that
607:32 - javascript now there's a ton to talk
607:35 - about with html but similar to how i've
607:38 - been handling other concepts within this
607:40 - series i'm not trying to get into
607:43 - absolutely everything and do a super
607:45 - deep dive into it my goal here is to get
607:47 - you exposed and learning the most
607:50 - essential concepts of html those things
607:53 - that you absolutely have to know to
607:55 - build web applications
607:58 - i think a great place to start is to
608:00 - understand the overall structure of an
608:02 - html document so something you have to
608:04 - understand is that every browser tab
608:07 - that you have open
608:09 - is going to have one and only one html
608:12 - document is what we call it
608:15 - within it so that one document follows a
608:19 - standard you know boilerplate is what we
608:22 - call it structure and that structure is
608:25 - what i'm going to put on the screen
608:26 - right here this is going to be the most
608:28 - basic way to write an html document now
608:32 - everything within those html tags we
608:36 - call these tags
608:37 - um is going to define the whole document
608:39 - and then within that document you have a
608:41 - head tag which has a site title so if
608:44 - you look up into the browser tab
608:48 - you know the the name that you see
608:50 - within that browser tab is defined by
608:52 - that title within the head
608:54 - and then there's other things that go in
608:56 - the head of the html document some
608:58 - things like
609:00 - different style sheets uh meta tags all
609:03 - that kind of stuff that we're not going
609:05 - to get too much in detail with in this
609:07 - lesson
609:08 - now what we're going to be focusing on
609:10 - is everything within that body tag so
609:13 - that's going to represent the bulk of
609:16 - your html document and it's going to
609:18 - represent the stuff that you're actually
609:20 - seeing on that web page
609:22 - well the thing that i have up on the
609:24 - screen right now is going to represent
609:26 - the most basic form of an html document
609:29 - there is a more standard boilerplate
609:32 - that you're probably going to see so i'm
609:34 - going to put that up right now
609:35 - so this boilerplate html document
609:39 - pretty much has everything that you
609:42 - need to learn in html css and javascript
609:46 - i'm not going to go through absolutely
609:48 - everything that you're seeing here but i
609:50 - do want to cover a few things that are
609:52 - very important we're not going to
609:54 - actually get into writing these
609:56 - but if you'll notice you see within the
609:58 - head you see this link tag and you'll
610:01 - see that it
610:03 - references something called a style
610:05 - sheet and then it gives a file that is
610:07 - passed in
610:08 - so this is actually called a css
610:11 - document and that's going to be fed into
610:14 - the html to actually style it if you
610:16 - look further down in this document
610:18 - you're going to see a script tag which
610:21 - represents the javascript that is
610:23 - connected to the html and gives it
610:25 - function now in our case we're going to
610:27 - be working in an environment called
610:29 - codepen so what i've got up on the
610:31 - screen is a basic codepen document i
610:34 - suggest that you create an account it's
610:36 - free and you'll be using it throughout
610:39 - this specific lesson on html
610:42 - so if you look on the left side you see
610:45 - html css and javascript now going back
610:48 - to that boilerplate that i just showed
610:50 - on the screen this is basically a
610:53 - beginner-friendly way to write that so
610:56 - codepen has already taken care of
610:58 - connecting everything up so the css and
611:01 - the javascript are automatically
611:03 - connected to the html
611:05 - and within this html area this is
611:08 - actually going to be what we're filling
611:10 - in to the body so you know how i talked
611:12 - about there's the the whole html
611:14 - document and then you have the head and
611:16 - the body
611:17 - well this represents the body and you
611:20 - can just assume that css and javascript
611:23 - are all connected up and ready to go
611:25 - with this i'm going to be using this
611:27 - codepen
611:28 - playground because it's going to be a
611:30 - very user-friendly way to explain what
611:33 - html is all about later in the series
611:36 - we'll talk about writing our html css
611:38 - and javascript in our own local
611:41 - environment but as we've been doing with
611:43 - the javascript earlier in the series
611:45 - using the browser
611:48 - devtools console this is kind of the
611:50 - same deal we're going to just get into
611:52 - an environment that's easy to use right
611:54 - off the bat like i said html represents
611:56 - hypertext markup language and it only
611:59 - has a few
612:00 - key things that you have to understand
612:02 - about it what we're going to be focusing
612:04 - on a lot in this html crash course are
612:08 - two things so number one we are going to
612:11 - be talking about html tags
612:13 - and number two we're going to be talking
612:15 - about html attributes so what do i mean
612:18 - by those well let's take a look at this
612:21 - code pen
612:22 - and you'll see that we can write a basic
612:25 - html tag
612:27 - by using these little brackets here so
612:30 - this is this happens to be a paragraph
612:32 - tag
612:33 - um represented by p
612:36 - and within it you have this these little
612:39 - brackets here so
612:40 - the
612:41 - the tag itself is enclosed in the
612:44 - brackets
612:45 - and then between it this is where we put
612:47 - some text that we want to display in the
612:50 - browser
612:51 - and you'll see that once it renders we
612:53 - have some text
612:55 - displaying within the code
612:57 - codepen browser
612:59 - alright so the end of this is going to
613:01 - be what we call the closing tag and
613:04 - you'll notice that we have this forward
613:06 - slash before the tag itself so i'm going
613:09 - to put up on the screen a basic diagram
613:12 - that gives you the anatomy of an html
613:15 - element so if we're breaking it down you
613:18 - basically have an opening tag then you
613:20 - have one or more attributes that you
613:23 - have defined for that specific element
613:27 - then you have the content that you put
613:29 - within the element which can be just
613:31 - text or it can be other html elements in
613:34 - certain cases we'll talk about that in a
613:36 - second and then finally you close it off
613:38 - with a closing html tag so you might be
613:42 - wondering you know what is this whole
613:44 - attribute thing about you'll see you
613:46 - know in that diagram that i put up we've
613:48 - got a class attribute which just happens
613:51 - to be one of many attributes that we can
613:54 - define for an html element in this case
613:57 - the attribute we're talking about is a
613:59 - class attribute we're going to talk more
614:01 - about the different types you can use
614:03 - but in this case a class attribute
614:05 - directly relates to kind of identifying
614:08 - the element with css now we're not going
614:10 - to be talking a whole lot about css in
614:12 - this lesson but i do want to show you
614:14 - just the basics
614:16 - of what this attribute is doing
614:18 - so we might say some class
614:22 - defined within this class attribute and
614:24 - then we can come down into the css and
614:27 - define that and then we can maybe give
614:29 - it a different color and now the text up
614:32 - here is going to be red
614:33 - so that's what we're doing with this
614:35 - attribute but that doesn't mean that all
614:38 - attributes relate to css we also can
614:40 - have attributes that are totally
614:43 - unrelated to css so for example
614:46 - if we wanted to add an image tag
614:49 - here and we're going to talk about this
614:51 - a little bit more later so don't worry
614:53 - about the syntax here yet
614:55 - we can define something called a source
614:57 - attribute so this source attribute is
614:59 - going to actually give us
615:02 - the image url that we want to display
615:04 - within that image tag so let me get an
615:07 - image to put in there real quick and
615:08 - i'll show you what i mean all right so
615:10 - i'm going to put a dog image in here
615:11 - just as i normally do so we'll paste
615:14 - that in there and now you should see
615:16 - once it reloads a very large picture
615:18 - here so we're going to use another
615:21 - attribute that i just know from
615:23 - experience about we can put a width
615:26 - property on here and maybe define it to
615:28 - about 300 pixels so that it's much
615:30 - smaller and we can see the image
615:33 - all right so again you should not
615:35 - understand you know the the p tag and
615:37 - the image tag
615:39 - you don't need to understand that quite
615:40 - yet we're going to cover it in a second
615:42 - but what i want to uh demonstrate here
615:45 - is that these attributes can you know
615:47 - serve a lot of different purposes
615:49 - and they're ultimately the same thing
615:52 - like you can think about them just like
615:54 - javascript variables so just like we're
615:57 - defining
615:58 - some sort of you know variable here or
616:01 - attribute and then assigning it some
616:03 - value you can do the same thing in
616:06 - javascript so you could define an
616:08 - attribute and give it some value here
616:11 - and that's the variable the javascript
616:13 - variable that we are so used to working
616:15 - with from the previous lessons so it's
616:18 - kind of a similar concept but these you
616:20 - know what we call variables or
616:22 - attributes here
616:23 - are specific to these html elements that
616:26 - we are creating all right before we get
616:28 - any further into these details that
616:30 - you're not understanding quite yet
616:32 - i want to talk about the difference
616:34 - between an element so an html element
616:37 - and an html tag
616:39 - so when i think of an element i think of
616:42 - it as a complete unit so it not only has
616:45 - an html tag but it also might have some
616:48 - attributes or maybe even some event
616:51 - listeners we're going to talk about that
616:52 - a little bit later too so let me write
616:54 - out a full element real quick just like
616:57 - we saw a second ago
616:59 - so we'll say a paragraph
617:02 - element and then we'll close it off with
617:04 - our closing brackets so i think of this
617:07 - as a complete unit and a full html
617:10 - element and we can also add on some
617:13 - attributes so maybe an id
617:15 - is going to be p1 or something and then
617:17 - we can add a class attribute now it
617:20 - doesn't matter what attributes you're
617:21 - putting here i'm just trying to
617:23 - demonstrate this is a full html element
617:26 - now if we're talking about tags
617:28 - i like to think of those as the actual
617:32 - indicator for what type of element we're
617:35 - creating so in this case we're going to
617:37 - put a p tag
617:40 - indicated by the letter p right here so
617:43 - as we move forward think of the tag as
617:46 - the function or like what the element is
617:49 - supposed to be doing and then the whole
617:52 - element as a general structure of that
617:55 - html the next thing i want to talk about
617:58 - is the types of html tags that we can
618:01 - use
618:01 - so far we just looked at a paragraph tag
618:03 - and an image tag but there are obviously
618:05 - plenty more that we can use within our
618:08 - html documents
618:09 - so the first type of tag at least how i
618:12 - categorize it there's plenty more
618:14 - classifications that you'll find with
618:17 - official documentation but just for our
618:19 - brains to understand it
618:20 - i think we can think about this in terms
618:23 - of normal html elements and self-closing
618:27 - html
618:28 - elements or maybe tags would be a better
618:30 - way to say that
618:31 - so let me paste in a few of them here
618:34 - these are all
618:35 - you know different tags that we can use
618:37 - so the p tag the h1 tag
618:40 - div span and strong
618:43 - and all of these are what we consider
618:45 - kind of normal html tags because they
618:49 - have an opening tag right here and then
618:51 - a closing tag and then you put something
618:54 - in the middle of them to actually create
618:56 - the entire element so these are what we
618:59 - consider normal now there are some other
619:01 - html tags that have some different
619:04 - behaviors where they're actually called
619:06 - self closing and i'm going to paste a
619:08 - few of those within our
619:11 - code pen here
619:12 - so let's get a rid of these
619:15 - and now we're looking at self
619:16 - self-closing tags and this would be
619:19 - image input meta tags these go in the
619:21 - head of the html document
619:24 - link tags this is how we link up the
619:26 - style sheets to our html
619:29 - something that's going on behind the
619:30 - scenes here so these are self-closing
619:33 - which basically means
619:35 - we have everything we need within the
619:37 - single tag and we put this forward slash
619:40 - at the end of it so
619:42 - rather than doing this let me just give
619:45 - you a very specific example here so
619:48 - rather than saying image and then having
619:51 - a closing tag and then putting something
619:53 - between them that's not valid we just
619:56 - have to
619:57 - create one tag right here called image
620:00 - and then put the forward slash at the
620:02 - end of it to close it so
620:04 - these are the two types of tags that
620:06 - we're dealing with you'll start to
620:08 - recognize them as you get more
620:10 - experience writing html
620:12 - i'll be sure to point them out as we go
620:14 - now the reason that i talk about the
620:16 - difference between you know normal and
620:18 - self-closing tags is they have different
620:20 - behaviors
620:22 - so if you wanted to embed some content
620:24 - within a normal element so let's take a
620:27 - div
620:29 - element which i just think of as kind of
620:31 - a general purpose container that we can
620:33 - use in html
620:35 - and i can put some text in here it's
620:38 - going to work just fine as you see on
620:40 - the screen i can also enter down and put
620:44 - in another html element
620:46 - maybe a paragraph tag here and i can
620:49 - embed html within that div tag all right
620:52 - so that's a normal html element that has
620:55 - an opening and closing tag but if we
620:58 - tried to do this with something like an
621:00 - image tag all right so this is a valid
621:02 - way to write
621:04 - an image and we of course need a source
621:07 - attribute so let me see if i can get
621:10 - another image here okay so let me get an
621:12 - actual image in here uh so that this is
621:14 - a valid image tag all right so it's
621:17 - working on the right but what i want to
621:19 - show you is that if you try to put
621:20 - something within this tag so let's come
621:23 - right here and try to put maybe a p
621:25 - element in here
621:27 - and we'll put some text right there
621:29 - you're going to see that this is not
621:31 - going to work
621:32 - all that well so you'll see these weird
621:35 - brackets here at the end and while the
621:37 - overall image is working and you still
621:40 - see some text
621:41 - printed to the screen this is not valid
621:44 - html to write this is
621:46 - you know it'll render but it's not valid
621:48 - so just remember as we write these
621:51 - self-closing html elements you can't put
621:54 - anything within them now a more subtle
621:56 - difference that i want to point out you
621:58 - know within these elements that we call
622:01 - normal or the tags that we call normal
622:04 - so for example a paragraph tag we've got
622:07 - some text that we can put in there now
622:09 - we can also put stuff within this but
622:12 - does it make sense to do so and the
622:14 - answer is probably not so if we have a
622:18 - paragraph tag and we put some text in
622:20 - here
622:21 - and then we also try to put maybe
622:24 - another paragraph
622:25 - tag so we'll put some more text in there
622:28 - this does not make a lot of sense to me
622:30 - and it doesn't make sense in general
622:32 - when you're writing html because
622:34 - in general a tag such as the paragraph
622:37 - tag is not meant to have elements um
622:40 - embedded between it other than just
622:43 - plain text
622:44 - so there are some html elements that
622:47 - have
622:48 - these kind of container functionalities
622:51 - and then there are some elements that
622:53 - just are meant to store text and only
622:55 - text so while we don't want to put you
622:58 - know elements within a paragraph tag
623:02 - if we just change this to a div
623:05 - that's going to be more appropriate so
623:07 - we can put you know as many other
623:09 - elements within a div as we want to
623:11 - because it's kind of structured and
623:14 - meant to do something like that it's
623:15 - kind of meant to be
623:17 - a more of a container type
623:20 - html tag all right so we've gone through
623:23 - some of the nuances of you know what
623:26 - type of html tags you're going to be
623:28 - looking at
623:29 - now in this next section i want to
623:30 - actually walk through some of the most
623:32 - common ones that you'll see and you'll
623:33 - use not only that but i want to show you
623:36 - how to actually inspect your html in the
623:39 - browser
623:40 - and also how do we look these different
623:42 - tags up in our documentation
623:45 - you know if you don't know what
623:46 - something is or you don't know what it's
623:48 - supposed to be used for you can go to
623:50 - the documentation to figure it out like
623:52 - i said there are a ton of html tags
623:56 - that you can use and i'm not going to be
623:58 - covering you know even half of them here
624:01 - that's not the goal the goal here is to
624:02 - get you the most essential ones and help
624:06 - you understand how to find
624:08 - um and use different tags without having
624:10 - prior knowledge of them as we talked
624:12 - about earlier html is not styled it's
624:15 - all about structure so
624:17 - if you look at this page i've got pulled
624:18 - up on the screen you can see a bunch of
624:20 - really ugly
624:22 - web elements
624:24 - and we're going to walk through each of
624:26 - these very briefly just so that you can
624:28 - kind of get the gist of them and i'll
624:30 - show you you know for a couple of them
624:32 - how we actually look them up in the
624:34 - documentation and see what they're for
624:36 - so just as a preview we've got some
624:38 - content elements up here we've got
624:40 - headings paragraph tags
624:42 - then we come down into
624:44 - some more content elements so we have
624:47 - span elements which allow you to kind of
624:50 - custom style this this actually has some
624:52 - css within it
624:54 - which we're not covering but
624:56 - you can see how you can do things with
624:58 - the paragraph tags and make it a little
625:01 - bit more customized using span
625:04 - and em and strong elements and then we
625:07 - can also use uh images and links so a
625:11 - would be a link
625:12 - image and then buttons here so we got
625:15 - buttons and then we have some list and
625:17 - then finally tables like i said we're
625:19 - not going to be covering that a whole
625:20 - lot but this is just the landscape of
625:24 - most of the elements that you'll be
625:26 - using on a daily basis as a web
625:28 - developer but before we jump into that i
625:31 - want to show you exactly how we inspect
625:33 - these now you'll notice i jumped over to
625:35 - google chrome here
625:37 - i'm using that for a very specific
625:39 - reason that we'll kind of talk about a
625:41 - little bit later in this lesson but it's
625:43 - very similar to firefox all you have to
625:45 - do is right-click and click inspect
625:48 - and then from here
625:49 - if you
625:51 - rearrange this you'll see that the
625:53 - elements panel is where you can actually
625:55 - see the html within this document so if
625:58 - we click down on the body you can see
626:01 - all of these elements and every time we
626:03 - hover over them it will actually you
626:06 - know highlight it in the browser itself
626:09 - alright so you can scroll down and just
626:10 - basically see the source of this html
626:13 - document
626:14 - which is a great way to
626:16 - understand it now i also have this
626:19 - this exact document linked in a codepen
626:22 - pen you can find that in the materials
626:25 - in the description of this video so you
626:26 - can just look through this on your own
626:28 - time if i go through something a little
626:30 - bit too fast here all right the first
626:32 - ones we're going to be talking about the
626:34 - first html tags are heading tags so that
626:38 - is h1 through h6
626:40 - now if we go to the documentation this
626:42 - is i'm going to just go through this
626:44 - exercise with you so that you can get
626:45 - used to
626:47 - doing this but we basically go to mdn we
626:50 - go to technologies and click html
626:53 - and then we can go down to the
626:54 - references and click the html elements
626:57 - from here
626:59 - we can obviously go through and look for
627:01 - all these different tags that we can use
627:03 - and in this case we want the headings so
627:06 - i'll click h1
627:08 - and you can see
627:09 - that it just has one page for h1 through
627:12 - h6 because they're all so similar types
627:15 - of elements
627:16 - when you're on a documentation page it's
627:18 - good to read this first sentence here
627:20 - just glance at the demo but if you come
627:22 - down to usage notes this is where you're
627:24 - going to learn like what is this tag
627:27 - actually for you know as we talked about
627:29 - html is the structure of the web and
627:32 - therefore every
627:34 - tag that we're using has a very specific
627:36 - purpose
627:37 - so this one says heading information can
627:40 - be used by user agents to construct a
627:42 - table of contents for a document
627:44 - automatically
627:45 - alright so basically what that's saying
627:47 - for us
627:48 - is that we can
627:50 - use the h1 through h6 to organize our
627:53 - web pages so let's start with an h1
627:57 - element
627:58 - all right and we can give it a
628:02 - page title all right so that's kind of
628:04 - what h1 is used for when you go onto a
628:07 - web page there's always going to be a
628:08 - title of that you know blog post article
628:12 - or just the page in general and usually
628:14 - it's going to be h1 that's what google
628:17 - searches for with the search engines so
628:19 - a lot of seos will
628:22 - you know recommend that you have this
628:24 - uh
628:25 - semantically laid out so that the h1
628:27 - only occurs once on the page and then
628:29 - you have everything else as h2 or even
628:32 - smaller so we'll make some h2s here this
628:36 - will be a secondary heading
628:38 - and like i said this is going to lay out
628:41 - your document
628:42 - semantically based on the order of
628:44 - importance of your text so i think you
628:46 - probably get the point of this you can
628:48 - do this for you know h3 all the way to
628:51 - h6
628:52 - not all that complicated so we're going
628:54 - to just stop it right here but you kind
628:57 - of get the point play around with this
628:58 - and and
629:00 - basically all i'll say about this is
629:01 - that h1 through h3 is probably the
629:03 - furthest you're going to go you might
629:05 - use an h4 every once in a while but
629:07 - generally those first three are
629:09 - sufficient to build a web page next up
629:11 - we have the paragraph tag which we've
629:13 - already used a little bit
629:14 - so if we come to
629:17 - the mdn documentation
629:19 - and we go back to our well let me just
629:22 - go through the full process so we get
629:24 - used to it so technologies html
629:27 - html elements and then we can scroll
629:29 - down and look for the relevant tag
629:33 - so we'll come all the way down here to
629:34 - the p tag
629:35 - so it says the html p element represents
629:38 - paragraph paragraphs are usually
629:40 - represented in visual media as blocks of
629:42 - text separated from adjacent blocks blah
629:45 - blah blah a bunch of jargon here that we
629:47 - don't really need to read too much about
629:50 - this is basically what you're going to
629:51 - see everywhere on the web so when you
629:53 - read an article blog post most of the
629:56 - text is going to be a paragraph element
629:58 - and it's very simple to write as we saw
630:00 - we can just put some text between the
630:02 - opening and closing tags and you've got
630:04 - yourself a paragraph element now while
630:06 - we're here i want to
630:09 - highlight something kind of important
630:11 - with html and there are actually two
630:13 - things so number one html is not case
630:16 - sensitive so if we wanted to capitalize
630:19 - one of these tags and then have
630:21 - lowercase
630:23 - tags over here on the end it's still
630:25 - going to work just fine because html
630:28 - doesn't care about capitalization
630:30 - now it also does not care about line
630:32 - breaks so if we had a couple elements
630:36 - here
630:37 - let's just make a couple
630:39 - paragraph tags and we put a bunch of
630:42 - spaces in here and we entered it down a
630:44 - bunch
630:45 - let's make some
630:47 - enter down and some more spaces you'll
630:49 - see that the output is going to be the
630:51 - same no matter what and that's because
630:54 - the spaces between the tags doesn't
630:56 - matter whatsoever basically when it's
630:58 - rendered in the web uh or in the browser
631:02 - it's just looking for the opening and
631:04 - closing tag and then it automatically
631:06 - knows how to
631:08 - lay that out on the page so it's not
631:10 - case sensitive and these line breaks and
631:13 - spaces do not matter between these
631:16 - elements all right with that said we're
631:17 - moving on to the next elements and that
631:20 - would be
631:22 - some other content elements that allow
631:23 - you to
631:25 - basically style your paragraphs but i
631:29 - will say that as we talk about semantic
631:32 - html
631:33 - the whole goal of the new html5 standard
631:37 - which is the latest spec similar to when
631:40 - we talked about javascript in previous
631:42 - lessons how there's the ecmascript
631:44 - standard
631:45 - in es6 all that kind of stuff well
631:48 - there's also an html spec that is
631:50 - supposed to be followed and in the
631:52 - latest one the goal is to basically use
631:55 - html for structure and
631:58 - function only so instead of using html
632:02 - to actually style elements you're
632:04 - supposed to use only css to do that that
632:08 - said you will see these tags i'm about
632:10 - to show you uh quite often in old code
632:13 - and people still use them
632:15 - so you need to know what they are and
632:17 - what they do
632:18 - so let's write a paragraph tag right
632:20 - here
632:23 - some text that i want to
632:27 - emphasize and make bold
632:31 - and styled alright so these words are
632:34 - going to be manipulated by other html
632:38 - elements and as i said earlier a p tag
632:41 - is generally not something you want to
632:43 - embed other html elements within so
632:46 - like i said you probably do not want to
632:48 - put another p tag within a p tag and put
632:51 - text in there but there are a couple
632:54 - exceptions and
632:55 - they relate to the
632:58 - strong emphasis and span elements
633:02 - so the first one it's going to we'll
633:04 - look at is going to be span
633:05 - so let's go ahead go back to the
633:07 - documentation
633:10 - go back to this
633:11 - reference
633:16 - and look for the span tag
633:18 - okay so we'll click span
633:20 - and it says this element is a generic
633:23 - inline container for phrasing content
633:26 - which does not inherently
633:28 - represent anything it can be used to
633:30 - group elements for styling purposes or
633:33 - because they share
633:34 - attribute values
633:35 - so on and so forth so basically what
633:37 - that is saying is if you want something
633:41 - an html element that's not going to
633:43 - break down to a new line it's just going
633:45 - to be in line with the rest of the text
633:48 - but you want it to look a little bit
633:49 - different or function a little bit
633:51 - different than the rest of it you might
633:52 - use a span tag
633:54 - so an example of that we'll wrap this
633:57 - last word
633:59 - styled within a span tag
634:01 - alright and as of right now you see that
634:05 - it is red the reason this is red is
634:07 - because behind the scenes i didn't tell
634:09 - you this but i wrote some css that will
634:12 - take any span element and turn it the
634:15 - color red using css so if i open this up
634:18 - you'll see that i
634:20 - said for every span element i want the
634:22 - color to be red
634:23 - now i don't expect you to understand
634:25 - what that css is saying yet we're going
634:27 - to cover that in the next lesson but
634:29 - basically that's the point of a span is
634:31 - you can take a single you know piece of
634:34 - text within a paragraph tag and you can
634:37 - emphasize it in whatever way you want
634:39 - using css
634:41 - similar to a span we also have the
634:43 - strong and em or emphasize
634:47 - tags
634:48 - so let's take a look at those in the
634:50 - documentation
634:52 - let's go to the em tag this is
634:54 - it marks text
634:56 - that has emphasis so basically italics
634:59 - is what it's saying
635:01 - and then if we go to the strong tag
635:03 - down here this indicates that its
635:06 - contents have strong importance
635:07 - seriousness or urgency which is another
635:10 - way of saying bold so like i said this
635:13 - in the new html standard you probably
635:16 - should not use these
635:17 - tags but i'm showing you them because
635:20 - you'll see them often people still use
635:22 - them and they are valid html
635:24 - so if i wanted to emphasize this word
635:27 - or in other words make it italic i can
635:30 - surround it with these
635:32 - with this em tag and you'll see that
635:34 - this one word is now italicized
635:37 - now we can also make a word bold by
635:40 - wrapping it with the strong tag
635:43 - and now this will be a bold word
635:46 - so as you can see we can use these
635:48 - different html elements to actually
635:50 - style our html but again not recommended
635:54 - i would go ahead and use the best
635:55 - practices and style these with css
635:58 - instead and i know you're probably
636:00 - wondering what the heck that means and
636:02 - basically all that means is instead of
636:05 - using the em tag we might put in a span
636:08 - here for the emphasis
636:10 - all right and now that this is
636:13 - um
636:14 - wrapped in a span
636:15 - we can change the css so right now it's
636:18 - just making everything the color red but
636:20 - if we wanted to put an attribute in each
636:23 - of these so we'll put a class and we'll
636:25 - say
636:27 - red
636:28 - color so for for this span it's going to
636:30 - be a red color
636:32 - let me make this a little bit bigger and
636:34 - then for this span we'll put an
636:35 - attribute in there or a class
636:38 - called italics all right and now we can
636:41 - come down in the css
636:43 - let me delete all of this so down here
636:46 - in the css i can basically look at
636:48 - elements that have these specific
636:50 - classes
636:51 - again i'm sorry for getting too much
636:53 - into this but i really want to show you
636:54 - what this what i mean when i say you
636:57 - should style it with css rather than the
637:00 - em and strong tags so what we can do is
637:03 - we can select that class in css and then
637:06 - we can basically say the font style
637:08 - should be italic all right and once we
637:11 - do that you'll see that this word is
637:13 - emphasized with italics again but this
637:16 - time instead of using the em element
637:18 - we're using a span with some css styles
637:22 - now we can also come down and select the
637:25 - red color class and just give it a color
637:28 - equal to red and now you can see that
637:30 - we're back to the original style that we
637:32 - had so again we're not covering css too
637:35 - much in this lesson but i do want to
637:37 - show you how it's working with the html
637:40 - in unison
637:41 - all right so the next elements that we
637:43 - got to talk about
637:45 - i think a big one is going to be the div
637:47 - element now this is going to be one that
637:49 - you use all the time and it's very
637:51 - important and i consider it to be just a
637:54 - general container element but let's look
637:57 - it up in the documentation
637:59 - and there's our div tag all right so
638:02 - this is called an html content division
638:04 - element
638:05 - and it's a generic container for flow
638:08 - content so like i said it's just like a
638:10 - generic container that we can basically
638:12 - separate out pieces of our html
638:16 - and you know the the most important
638:18 - thing about it is we can
638:20 - take each of these individual units that
638:23 - are within a specific div and then we
638:26 - can style it so very similar to that
638:28 - span element where we're taking a
638:30 - individual piece of text and we're
638:32 - making it look different than the others
638:34 - we can also use some css magic along
638:37 - with this html structure to separate out
638:41 - our content so let me show you what i
638:43 - mean by that
638:44 - so let's say that we have
638:46 - two div containers
638:48 - all right and then within these we have
638:51 - some elements
638:54 - in container one all right and we'll
638:56 - just make a bunch of those and then
638:58 - we'll do the same thing for elements
639:00 - within container two
639:03 - so right now on the screen these don't
639:05 - look separated at all you know you
639:07 - basically
639:08 - look at this and say like oh it's all
639:10 - just one big piece together but since we
639:13 - wrapped these within div elements we can
639:16 - actually put some styles on here to
639:19 - separate them out and like i said you're
639:22 - not going to understand how these styles
639:24 - are working quite yet
639:26 - we'll do that in the next lesson but i
639:28 - do want to show you how the div is able
639:31 - to separate out our content so the first
639:34 - one we need to identify by div one just
639:37 - an arbitrary class name that we're
639:39 - giving it and then div two
639:42 - all right so what we're going to do is
639:44 - we're going to make some boxes around
639:46 - these so all we have to do is select
639:49 - both of them and give them a border
639:55 - all right and from here you can see that
639:57 - now we're getting some separation of our
639:59 - html elements and we can even put some
640:01 - margin around there
640:03 - and now it's going to be very apparent
640:05 - that we have two very separate sections
640:08 - of our html document and that is the
640:11 - power of a div and you'll be using these
640:13 - div elements to section out your content
640:16 - all the time the next element we're
640:17 - going to talk about or not element but
640:20 - tag is going to be the a tag which
640:22 - represents a link in html
640:24 - let's take a look in the documentation
640:26 - again just as a recap technologies html
640:30 - html elements and then you can click a
640:33 - so this is actually called the anchor
640:34 - element that's what what a stands for
640:37 - and it says with its href attribute
640:40 - creates a hyperlink to web pages files
640:43 - email addresses locations on the same
640:45 - page where anything else a url can
640:48 - address
640:49 - all right so
640:50 - an anchor tag or link tag is going to
640:53 - require this single attribute called the
640:57 - href attribute now
640:59 - with html
641:01 - tags most of them do not have required
641:05 - attributes but with a couple of them
641:07 - there are some required attributes this
641:09 - happens to be one of them
641:11 - so if we were to come into our html as
641:13 - we have it here and maybe we wanted to
641:17 - make a link around some of these text
641:20 - so what i'm going to do is make an a tag
641:23 - surrounded by this first
641:26 - container one text
641:27 - and right now you'll see that nothing is
641:29 - happening over here when i click it
641:31 - there's nothing there but once i put in
641:33 - that href attribute
641:36 - and i put in a link so we'll say
641:38 - www.google.com
641:41 - now you'll see that we have this link
641:44 - styling and if we click this
641:46 - it should take us to the appropriate
641:48 - link now one weird thing about codepen
641:52 - since it's kind of like an integrated
641:55 - environment that we can write html css
641:57 - and javascript
641:58 - when you have link tags within a code
642:01 - pen you can't click on them and actually
642:03 - go
642:04 - outside of codepen so i've actually
642:06 - pulled up
642:08 - let's let's actually look at the
642:11 - local file that i have so this is what i
642:13 - was showing you how to navigate around
642:15 - the different elements
642:16 - and if we go down to where i have the
642:19 - link example right here so let's go
642:21 - ahead and click this
642:23 - button up here to select a specific
642:26 - element and then i can click on that and
642:28 - it takes me there on the right side and
642:30 - you can see that i have this a or anchor
642:34 - tag
642:35 - with the href
642:37 - attribute right here representing my
642:40 - my personal website
642:42 - all right so when i click this
642:44 - it's going to take me directly to my
642:46 - website and that's how an anchor element
642:48 - is going to work now there's one
642:50 - additional thing that we can add to an
642:52 - anchor element to affect the behavior of
642:55 - the link
642:56 - so if we were to go in here and we can
642:58 - actually edit
642:59 - html directly within the dev tools
643:03 - and if we put
643:04 - a attribute called target
643:07 - and then we give it an underscore blank
643:10 - value so if we were to go to the
643:12 - documentation to see this
643:14 - you'll see that there's a couple
643:15 - attributes available here
643:17 - href being one of them but if you go
643:20 - down you can see there's a target
643:22 - attribute
643:23 - and it gives you the possible values
643:25 - that you can put in there and it says
643:28 - where to display the linked url as a
643:30 - name for a browsing context so basically
643:33 - it's saying where do i need to open this
643:35 - link and if we go to blank it says
643:38 - usually a new tab
643:40 - and that's exactly what's going to
643:41 - happen once i put in this target equals
643:44 - blank and i click this link it's opening
643:47 - a brand new tab rather than taking me to
643:49 - that link within the current tab like i
643:51 - said there's other attributes on an
643:53 - anchor element but those are probably
643:55 - the most common two ones that you'll
643:57 - need and the href attribute is actually
644:00 - required to make it function as a link
644:02 - at all the next one we're covering is
644:04 - the input element and this one is loaded
644:07 - with functionality especially when you
644:09 - start putting it within a form element
644:12 - alright so we're not going to talk a
644:14 - whole lot about this because this comes
644:16 - later in this series and we're going to
644:18 - talk a lot about it in the context of
644:21 - a front-end um web framework like react
644:24 - or angular
644:25 - vue.js
644:27 - but i just want to introduce it to you
644:29 - so
644:30 - we'll go to input tag
644:33 - we got to go back on the documentation
644:37 - it actually has an entire section just
644:39 - for input types and like i said there's
644:42 - a lot going on here there's a lot to do
644:45 - with forms within the web so let's open
644:48 - up the normal html reference and go down
644:50 - and find the input
644:53 - all right so we'll click input
644:55 - and it says it's used to create
644:57 - interactive controls for web-based forms
644:59 - in order to accept data from a user and
645:02 - that's pretty much where we're going to
645:03 - stop because that's all that we need to
645:05 - know for now i'm just going to show you
645:07 - a couple basic
645:08 - attributes that you can use with this
645:10 - and just give you the general concept of
645:12 - what it is
645:13 - so let's go to the
645:15 - page we're working with here
645:17 - and let me just clear out everything and
645:20 - put an input tag now this is going to be
645:23 - a self closing tag we talked about that
645:25 - earlier just like an image tag is
645:27 - and within this input you'll see that we
645:30 - already have something showing up here
645:32 - on the right that we can
645:34 - type some text into so right off the bat
645:37 - it's usable but if we just left it like
645:40 - this and we tried to hook up some
645:41 - javascript to it it'd be very difficult
645:43 - to
645:44 - select it and grab the data that the
645:46 - user's typing in
645:48 - from it
645:49 - so something that we'll often do is give
645:52 - an input a name and this is very
645:54 - important when you put this within a
645:56 - form so it can identify which input
645:59 - it needs to grab data from so we'll just
646:01 - say this will be input 1 and then
646:04 - another thing that you can put another
646:06 - attribute you can put is going to be a
646:08 - placeholder
646:09 - and this placeholder is going to be
646:11 - whatever shows up in kind of a grayed
646:14 - out
646:15 - text to indicate to the user what they
646:17 - need to type so we can say enter email
646:20 - address here
646:22 - and you'll see that this placeholder
646:24 - gets put in there and then once you
646:26 - start typing it goes away so that's a
646:28 - very common element or attribute that
646:31 - you can use for the input tag now you
646:33 - can also put a predefined value in there
646:36 - so instead of a placeholder if we were
646:38 - to put
646:39 - value it's going to replace that
646:41 - placeholder with an actual value so you
646:44 - can see how there's text already in here
646:48 - and if you wanted to change it you'd
646:49 - have to delete it and then type some new
646:51 - text so those are some of the common
646:54 - attributes that you can use for inputs
646:56 - and again i'm not going to cover inputs
646:58 - in very much detail at all right now
647:00 - because we're going to talk about them a
647:01 - lot later in the series next up we're
647:03 - going to be talking about image
647:06 - tags and we've already looked at it a
647:08 - little bit
647:09 - so let's go to
647:11 - our html elements reference and then
647:14 - look for the image tag there it is
647:17 - all right so the image element embeds an
647:20 - image into the document all right and
647:23 - there's going to be a couple common
647:25 - attributes that you'll use for this and
647:27 - there's one that is required
647:29 - so the source attribute is required as
647:32 - you can see in the documentation
647:34 - and then the alt attribute is highly
647:36 - recommended so when we're talking about
647:39 - web accessibility and we're talking
647:41 - about
647:42 - you know how do we know what this image
647:44 - represents if it doesn't render
647:45 - correctly
647:47 - that's going to be what the alt
647:48 - attribute does so i'll show you exactly
647:50 - what what i'm talking about here let's
647:53 - write our image tag which is self
647:55 - closing
647:56 - and then from here we're not going to
647:58 - see anything because we don't have our
647:59 - required source attribute now let's go
648:02 - back to this dog photo
648:04 - we'll put in the source attribute and
648:06 - paste in the link to that photo
648:08 - and it's of course going to be very
648:10 - large here because the image is much
648:12 - larger than our page here
648:14 - but we can also add in an additional
648:17 - attribute
648:18 - and
648:19 - a quick tip with html you can actually
648:21 - enter these down
648:23 - so it doesn't have to you know all be on
648:25 - one line we can separate out the
648:28 - different attributes from the tags so
648:32 - we'll go with source first and then
648:34 - we'll put in another common one which
648:36 - will be with
648:37 - so you can also specify this within css
648:40 - but this would be a quick way to
648:42 - make the width of this image 300 pixels
648:46 - all right so that gives us a more
648:47 - manageable image to work with and then
648:49 - finally we have the alt attribute so
648:52 - we'll say a dog image or something like
648:55 - that to describe what our image is all
648:57 - about
648:58 - and the reason we use this is because if
649:00 - our link is broken so if i just break
649:02 - the link real quick
649:04 - you're going to see when it reloads that
649:06 - it's going to give this little image
649:08 - icon and then whatever we put in the alt
649:11 - attribute it'll say a dog image so if
649:14 - the link ever breaks the user will know
649:16 - like oh this is supposed to be a dog
649:18 - image and i kind of know
649:20 - what the context of this image is and
649:22 - then finally one of my favorite content
649:25 - elements is going to be button alright
649:27 - so this is what we get to click and do
649:29 - fun things with
649:30 - so how we write this is you we just
649:33 - basically write out button it's a normal
649:35 - you know opening and closing tag type of
649:38 - element
649:39 - let's take a look in the documentation
649:41 - real quick
649:45 - go to html elements and we'll find the
649:49 - button element
649:50 - it says it represents clickable button
649:52 - used to submit forms or anywhere in a
649:54 - document for accessible standard button
649:57 - functionality alright so we click
649:59 - buttons all the time when we use web
650:01 - apps and it basically brings our web
650:03 - apps to life it allows the user to know
650:05 - like okay i got to click this to do
650:07 - something
650:08 - so within our button we can give it some
650:11 - text so we might say click me in all
650:13 - caps
650:14 - and you'll see that now we have a button
650:16 - that we can click now it's not going to
650:18 - do anything right off the bat because we
650:21 - haven't hooked up any event listeners or
650:24 - stuff like that to it now there's really
650:26 - not any common attributes that you'll
650:28 - see on a button like this
650:30 - but there is one common thing that
650:33 - you'll have to have for a button for it
650:34 - to really do anything and that is a
650:38 - event listener now we're not quite ready
650:40 - to talk about events
650:43 - within html but i do want to quickly
650:45 - show you what i'm talking about
650:47 - with buttons so if i wanted to do
650:50 - something every time someone clicked on
650:52 - this button
650:53 - i have to assign it an on click event
650:56 - now this is built in this is actually
650:58 - not an attribute
651:00 - this is an event listener so in here it
651:03 - expects a specific function to be called
651:06 - every time we click this button all
651:09 - right so if i go down to the javascript
651:11 - section of this code pen and i define a
651:14 - basic function that says
651:17 - alert me alright so something like this
651:20 - where every time we
651:22 - click the button it's going to bring up
651:24 - an alert in the browser
651:26 - and it's going to say hi alright so very
651:28 - simple
651:29 - and now if we put that into
651:32 - the button right here
651:34 - and we click the button it's going to
651:37 - make an alert pop up and say hi every
651:39 - time we click it
651:40 - all right so that's just the basics of
651:43 - event handling within html and we're
651:46 - going to talk about that in a little bit
651:47 - more detail when we get into the concept
651:49 - of the document object model or the dom
651:52 - the next element i want to talk about is
651:54 - another content element and it's a list
651:57 - so with a list we can basically have
651:59 - bullet points or we can have numbered
652:02 - list all right
652:03 - so if we wanted to have a bullet point
652:06 - list
652:06 - we're going to use some tag called ul
652:09 - alright
652:10 - so
652:11 - what ul stands for is unordered list and
652:14 - if we go to the documentation here we
652:17 - should be able to see that somewhere so
652:19 - let's go down to html elements
652:22 - and find ul
652:26 - all right so there is the ul
652:28 - and it's going to say this represents an
652:30 - unordered list of items typically
652:32 - rendered as a bulleted list
652:35 - all right so that's basically
652:37 - what that stands for and within it we
652:39 - have to put some
652:41 - li
652:42 - tags so you can see if we click li
652:45 - this element is used to represent an
652:47 - item in a list all right so
652:50 - we can put that here so we'll say li and
652:53 - we'll say item one
652:55 - and then we can copy this down a couple
652:58 - of times
653:00 - and give it item two and three and now
653:02 - you can see on the right side we have a
653:04 - bulleted list
653:06 - of content all right and if we wanted to
653:09 - change this to a numbered list all we
653:11 - have to do is change the ul kind of
653:13 - container to an ol container
653:16 - you can see it changed here on the
653:18 - bottom automatically and now you can see
653:20 - that it is numbered and if we go to the
653:22 - documentation
653:24 - we should be able to click on ol to see
653:27 - that this represents an ordered list of
653:29 - items all right so those are the two
653:31 - types of lists and these will be very
653:33 - helpful to us when we're
653:35 - laying out content and often times
653:38 - you'll see these lists
653:39 - corresponding to a loop so if we talked
653:42 - about in javascript earlier how loops
653:44 - work and we can take an array of
653:47 - elements and we can loop through them
653:49 - well it makes sense that we could
653:52 - basically loop through an array of
653:54 - elements and display them in a list like
653:56 - this so just keep that in mind as we
653:58 - move forward in the series and then the
654:00 - last thing i want to cover is tables and
654:03 - i know i said at the beginning we're not
654:05 - going to be talking about this all that
654:06 - often but i want to just glance over it
654:08 - very quickly and i recommend that you
654:11 - look at this on your own if you want
654:12 - more details about it
654:14 - so if we go to the documentation once
654:17 - again we go down to html elements and
654:21 - table alright so we'll click table
654:23 - and it says represents tab tabular data
654:27 - and then it shows you the basic
654:29 - structure of a table you can see that we
654:31 - have the table as the main container and
654:35 - then we have the t head
654:37 - tag will be the header tags
654:40 - and then the t body will be whatever
654:43 - data we're putting within our table
654:45 - within that body we have tr tags which
654:49 - are going to be the rows and then within
654:51 - the tr
654:52 - tags
654:53 - we have table data for which we'll put
654:56 - td tags in there all right so as you can
654:59 - see it's a pretty complex structure and
655:02 - like i said i recommend just using a
655:04 - table generator you can just search for
655:06 - it on google
655:07 - it's much easier than trying to remember
655:09 - this structure now of course you can
655:11 - look it up and just copy in this example
655:13 - and get started that way too
655:15 - anyways let's move on to the next part
655:17 - of our lesson and that's going to be
655:19 - talking about html attributes in a
655:22 - little bit more detail in this next part
655:24 - of the html crash course we're going to
655:25 - be talking about the html attributes now
655:28 - i know it's probably been a little bit
655:30 - confusing so far
655:32 - we've gone through a bunch of different
655:34 - html tags that we can be using we
655:36 - briefly covered attributes and how they
655:38 - work but we didn't really talk about
655:41 - when do you use them how do you know
655:42 - when to use them you know what's fair
655:45 - game here so we're going to start by
655:47 - talking about the difference between a
655:49 - global attribute
655:50 - and an element specific attribute in
655:53 - short a global attribute is something
655:55 - that's available to any html element you
655:58 - know no matter what it is
656:00 - an element specific attribute is an
656:03 - attribute that only does something to
656:05 - elements that it applies to
656:08 - so a good example of this can be the
656:10 - image tag so let's go ahead and look at
656:14 - that on the screen real quick
656:15 - so if we make an image tag and we give
656:18 - it a source property and then we give it
656:20 - a clasp or not property but attribute
656:24 - you can see the difference between a
656:26 - global and an element specific one so
656:30 - again let's go ahead and put the source
656:31 - in there and then let's make the width
656:34 - equal to 300 like we did earlier
656:37 - and what you can see on this
656:39 - image tag
656:41 - and then the total html element that we
656:44 - call an image
656:45 - you can see that we have the source
656:47 - attribute which is specific to this
656:50 - image tag
656:51 - we also have the width attribute which
656:54 - is also specific to the image tag
656:57 - now the class attribute is a global
656:59 - attribute which means it can be used on
657:02 - any element or any tag
657:04 - and to show that let's go ahead and make
657:06 - a paragraph tag below
657:09 - we'll put some text in there
657:11 - and then we'll give it a class
657:16 - all right so we've given it a class here
657:18 - and you can see that
657:20 - it's not doing anything right now but if
657:22 - we were to actually style these two
657:25 - different elements we would use these
657:27 - class values as a way to select them
657:30 - within our css
657:31 - so as i kind of shown you showed you
657:34 - earlier you can actually select these
657:36 - different classes and
657:38 - basically put some styles on here so
657:42 - what if i wanted to put
657:44 - a border on this
657:45 - image we can do it like that we can make
657:47 - that border a little bit larger
657:50 - and you can see how we can style that or
657:52 - we can come down and select the other
657:54 - one so some class value
657:57 - and we can give this text a different
657:59 - color so maybe we'll call it green and
658:02 - so now we can see that the text is green
658:04 - but this is not a css tutorial i just
658:07 - wanted to show you that that is a global
658:09 - attribute that we can use to connect up
658:11 - our html and our css but if i came down
658:14 - here and put something like a width
658:18 - on the p element and i gave it maybe 20
658:22 - px or something like that it's not going
658:24 - to actually do anything because this is
658:26 - not
658:26 - applicable to the paragraph
658:29 - tag and likewise if we put a source on
658:31 - here and then we copied in the
658:34 - image url
658:36 - it's not going to do anything either
658:37 - because this is a paragraph tag it
658:40 - doesn't have a source attribute so it
658:42 - will still render in the browser okay it
658:44 - just won't do anything and that's the
658:46 - difference between a global and an
658:48 - element specific attribute if you wanted
658:50 - to connect the dots with the previous
658:52 - lessons we've gone through you can think
658:55 - of these element specific attributes
658:58 - just like we have javascript methods so
659:01 - if you remember if we have a string like
659:04 - this
659:05 - there are a certain number of methods
659:08 - that are available to this string data
659:10 - type in certain methods that are not so
659:13 - for example if we wanted to
659:16 - call a method like string dot 2 upper
659:19 - case
659:21 - all right something like that that's
659:22 - going to work just fine and i'm actually
659:24 - going to come over to
659:26 - a console that we can use
659:28 - to show this so we got a string all
659:31 - right right here and then if we say
659:33 - string
659:33 - to uppercase
659:35 - it's going to work just fine it's going
659:36 - to make all the letters uppercase but if
659:39 - we said string.reverse
659:41 - it's going to say type error because
659:43 - reverse is a method that's only
659:45 - available to an array
659:47 - data type so we would need an array like
659:50 - this
659:51 - and then use
659:52 - array.reverse to actually use that
659:55 - method and the same thing applies to
659:57 - html attributes there are just certain
660:00 - attributes that only apply to certain
660:03 - tag types
660:04 - all right at this point we have covered
660:07 - quite a lot about html
660:09 - and i want to have you actually go
660:11 - through a practice exercise and a
660:14 - challenge to reinforce some of these
660:16 - concepts
660:17 - so that when we talk about some
660:20 - how we actually connect javascript to
660:22 - the html you're not still trying to
660:24 - figure out like how does html work so
660:27 - i'm going to give you this challenge if
660:29 - we go to my code pen
660:31 - let's see if we can open this up here
660:34 - all right so as you can see um this is
660:36 - the challenge that we're going to be
660:37 - working with and what i've done here is
660:40 - i've put a couple different html
660:42 - elements in your goal
660:44 - is to basically recreate this but put in
660:47 - your own personal details of course and
660:50 - something that you can share maybe on
660:51 - twitter use the 100 days of code
660:54 - maybe hit me up zg underscore dev
660:57 - but anyways we're going to be building
660:59 - something like this but personalized and
661:01 - i've given you a starter template so
661:04 - this will be linked to in the
661:05 - description below
661:07 - so be sure to check that out and you'll
661:09 - just open this
661:11 - starter challenge up and you'll see that
661:14 - within the html i've kind of laid out a
661:17 - basic template for you
661:19 - and it says your code goes here now
661:22 - within
661:23 - codepen
661:24 - it actually this html part as i talked
661:27 - about a little bit earlier
661:28 - represents the body part so really all
661:31 - we have to do is just start typing right
661:34 - here so i'll leave you
661:36 - with that and you can just start typing
661:38 - some html so
661:40 - you can put some text in there and
661:42 - you're gonna see that it automatically
661:44 - shows up on the screen and furthermore
661:46 - it's going to be styled just like the
661:48 - one that i showed you because i've
661:50 - already written some
661:52 - css styles that will basically apply to
661:55 - your html you know no matter how you use
661:58 - it
661:59 - so i recommend that you just browse
662:02 - through these styles but don't worry
662:04 - about how they work just focus on
662:06 - writing the html that is necessary to
662:09 - create something that looks like this so
662:11 - just a few hints as we go through this
662:13 - looks like some sort of heading
662:15 - we've got some paragraphs in here we've
662:18 - got a link we've got a list and then
662:20 - we've got an image down here so that's
662:23 - basically all you need to do so go ahead
662:26 - and try that challenge out and be sure
662:28 - to share your results on twitter i think
662:30 - this is a rather basic challenge
662:32 - not saying it's going to be easy it will
662:34 - not be easy
662:35 - starting out but it's basic enough i'm
662:37 - not going to go through it here on video
662:39 - but if you'd like to go down in the
662:41 - description and i also have linked to
662:43 - this code pen
662:44 - where i've solved it so you can see the
662:47 - code that i wrote and how i wrote it
662:49 - to compare against yourself
662:51 - [Music]
662:53 - the next part of this video we are
662:55 - talking about something called the dom
662:58 - and that stands for document object
663:00 - model and it's very closely related to
663:04 - html which we talked about in the
663:07 - previous part of this lesson
663:09 - now i will say if you have not completed
663:11 - the challenge that i gave
663:13 - in the prior video
663:16 - go ahead and complete that and i would
663:18 - recommend that you have at least a
663:21 - basic understanding of html and kind of
663:23 - understand
663:24 - how to put something together within you
663:26 - know a code pen document or something
663:28 - like that because if you don't have at
663:30 - least a basic level of understanding of
663:32 - html this stuff is not going to make any
663:35 - sense
663:36 - before we get into this i want to show
663:38 - you a little bit about the codepen
663:40 - environment so that we can understand
663:42 - like how do we actually debug
663:45 - javascript within the browser and you
663:48 - know take those concepts we've been
663:49 - looking at in the prior videos where
663:51 - we've you know pretty much right clicked
663:54 - so let's take a look at the screen here
663:56 - if we right click and
663:57 - inspect and then we come to the console
664:00 - then we can write you know basic
664:01 - javascript within the console so we've
664:03 - been working in the console quite a bit
664:05 - but when we go to codepen since it's
664:07 - kind of it's in its own environment we
664:10 - have to do a few things to make sure
664:12 - that that console is working the same so
664:15 - if we come down to the js section of the
664:18 - code pen this is a little bit different
664:20 - than what we've been working with in the
664:22 - console
664:23 - now if we were to just type something
664:25 - like
664:26 - you know console.log
664:28 - hello now this is going to be
664:31 - printed to the console but it's going to
664:32 - do it over and over again every time the
664:34 - page loads
664:36 - because this javascript that we're
664:38 - working with here is directly connected
664:40 - to the html document above so it's not
664:43 - really like a freeform console that we
664:45 - can use to test out different javascript
664:48 - now codepen does have a console down
664:51 - here at the bottom left and if you open
664:53 - it up you'll see that we have that hello
664:55 - that we printed by writing that
664:57 - javascript code but we can also do
665:00 - something like that down here in the
665:01 - console and this is supposed to
665:03 - represent the same type of thing that
665:05 - we've been working with um when we right
665:07 - click and inspect and go to the dev
665:09 - tools console
665:11 - but the problem is this is not a really
665:15 - nice and easy console to work with like
665:17 - if you started to
665:19 - you know define a variable
665:21 - with that's like a string or something
665:23 - and then you type a
665:25 - and you hit enter it's not going to say
665:27 - it's not going to like be defined and
665:29 - that's a problem because we want to be
665:31 - able to experiment around and work with
665:34 - our javascript as we're building it so
665:37 - to solve that problem we're not going to
665:39 - be using the codepen console what we're
665:41 - going to do is right click and inspect
665:44 - within the codepen document so it still
665:47 - opens up this
665:49 - console and i will note i'm in google
665:51 - chrome not firefox this does not work
665:54 - quite as well in firefox unfortunately
665:57 - so i've switched to chrome for that
665:59 - reason and if we go to the console
666:01 - you'll see some of the the hellos that
666:04 - we put there from earlier but if you go
666:07 - to
666:08 - this little drop down here when we first
666:10 - enter the document you might see
666:12 - something like top but in order to get
666:14 - the right context to work in you have to
666:17 - drop this down and scroll down to
666:19 - codepen
666:20 - now we can actually
666:22 - select elements from the codepen
666:24 - document that we've written here
666:26 - and we don't have to um
666:29 - or we're basically going to have some
666:31 - responsiveness with our javascript just
666:33 - to quickly show you this and we're going
666:35 - to cover all of this stuff
666:37 - in a little bit
666:38 - but let me put a basic paragraph tag in
666:42 - our codepen document and you can see it
666:44 - showing up there
666:45 - and if we have this context the
666:48 - javascript context set to top
666:50 - and we try to type
666:51 - document.queryselector
666:53 - then grab all the
666:55 - paragraph tags
666:57 - it's not going to grab us the right ones
666:59 - so this is a paragraph tag but it's not
667:02 - the one that we're looking for here so
667:04 - we have to go down to the right context
667:07 - so select codepen and now when we run
667:09 - this it should give us the correct
667:12 - element that we're looking for so that's
667:14 - just really important if you're trying
667:16 - to follow along with this like code
667:18 - along as i'm doing it just make sure
667:20 - that you're in google chrome you
667:21 - right-click inspect element and make
667:23 - sure that the context is the right one
667:25 - it's under the codepen context alright
667:28 - now we got that covered just want to
667:30 - make sure that you're able to follow
667:31 - along let's jump into what the document
667:34 - object model or the dom is all about
667:37 - now how i would describe the dom is a
667:39 - bridge between html and javascript
667:43 - prior to these lessons we've been going
667:45 - through how to write javascript code
667:47 - we've gone through all the basics of it
667:48 - so you have at least
667:50 - a
667:51 - basic level of understanding of how to
667:53 - write javascript we also just learned
667:56 - about the basics of html which as you
667:58 - saw is a lot easier to learn than
668:00 - javascript
668:01 - now what we're going to do is we're
668:03 - going to take these two concepts and
668:04 - we're going to combine them together to
668:06 - make our
668:08 - html come alive so remember with the
668:11 - house analogy
668:12 - html is the structure
668:14 - css is the styling and javascript is the
668:18 - function so
668:20 - in other words with the house analogy
668:21 - html is the bricks and the concrete in
668:24 - the wood
668:25 - the css is the paint on the house and
668:28 - the javascript is going to be the
668:29 - plumbing and the electric and all that
668:31 - kind of stuff now the first question
668:33 - you're going to ask is why are we
668:35 - looking at the dom in the first place
668:37 - how do we know that this is important
668:39 - well the dom is basically at the root of
668:42 - any front end framework that you're ever
668:44 - going to work in it's the only way that
668:46 - we can connect our javascript to html
668:48 - and while you may not see it directly it
668:51 - may kind of you know be doing a bunch of
668:53 - stuff behind the scenes when you're
668:54 - working with a framework like angular
668:56 - reactor vue.js
668:58 - it's still there it's still using the
669:01 - dom api we're going to talk about that
669:03 - in a second so it's important to know
669:05 - that it exists and know the basics of
669:07 - how it works and what it's trying to
669:09 - accomplish
669:10 - so what is the dom
669:12 - now we know it's the document object
669:13 - model which gives us a little bit of a
669:15 - clue what we're talking about here but
669:18 - it's a little bit more complex than just
669:21 - that now i'll start with what it is not
669:24 - so the dom is not a programming language
669:27 - it's also not natively part of
669:29 - javascript so it only exists within the
669:33 - browser
669:34 - and there's different browser
669:36 - implementations whether you're on
669:38 - firefox or chrome or safari they all
669:40 - have slightly different implementations
669:42 - of the dom for our intents and purposes
669:45 - we don't really care about those
669:46 - differences we just want to know you
669:48 - know what it is and how it works so the
669:50 - best way to think about the dom is an
669:52 - api for an html document now you may not
669:56 - know what an api is but luckily i have
669:58 - done a video on just that so go ahead
670:01 - and watch that if you're unclear of what
670:03 - an api is but just as a you know 10 000
670:06 - foot view what i consider an api and
670:10 - this is my personal definition of it
670:12 - that that makes sense in my head
670:14 - is a software api can be thought of as a
670:16 - user manual that allows developers to do
670:19 - something useful with a third-party
670:21 - software or hardware without knowing the
670:24 - inner workings of that software or
670:26 - hardware so basically the api that we
670:29 - call the dom
670:31 - is going to allow us to manipulate html
670:35 - without knowing you know how is html
670:38 - actually you know manipulated within the
670:40 - browser all we have to know is how to
670:42 - write the html and then how to use the
670:45 - api that we call the dom to manipulate
670:48 - it i know your head's probably spinning
670:49 - at this point so let's jump into a
670:52 - simple example to understand what i'm
670:54 - talking about
670:56 - so what i'm going to do here is paste in
670:58 - some html all right so this is going to
671:01 - be a basic html document i've got an h2
671:05 - tag a paragraph tag and a button
671:08 - now if we click this button and we kind
671:10 - of talked about this a little bit
671:11 - earlier when we click this button
671:14 - it's not going to do anything and the
671:15 - reason is we don't have any javascript
671:18 - connected up to it in order to connect
671:21 - it up
671:22 - all we have to do is first identify the
671:24 - element that we're wanting to make
671:26 - interactive
671:27 - and then once we identify it we need to
671:30 - instruct it to do something via
671:32 - javascript so just as an example we can
671:35 - identify this button using pure
671:37 - javascript and all we have to do is type
671:40 - document.queryselector
671:42 - and then we type in button because
671:45 - that's the tag that we're looking for
671:47 - now of course i need to select the
671:50 - correct context to work in so we want
671:52 - the codepen context
671:54 - and then from here when we press enter
671:56 - we're going to see the button that is
671:58 - within our codepen output all right so
672:01 - that's how we would select that button
672:03 - now from there we can actually store
672:06 - that within a variable so if we were to
672:09 - rewrite that command
672:10 - and then just store it in a basic
672:13 - variable so btn is our variable now we
672:16 - can reuse it and we can do things with
672:18 - it but at this point you probably don't
672:20 - have any clue what all these commands
672:23 - are like what is document here what's
672:24 - query selector
672:26 - all that kind of stuff doesn't make any
672:28 - sense yet because we haven't talked
672:30 - about the dom so to better understand it
672:32 - i want to bring in yet another analogy
672:35 - for us now when we think about an html
672:37 - document just a static html document
672:40 - that we've been working with so far so
672:42 - this one right here on the screen
672:44 - that is kind of the equivalent to a
672:47 - paper map so with a paper map there's
672:49 - only so many things you can do with it
672:52 - you can write on it of course but you're
672:53 - not going to be able to you know click
672:55 - into it and
672:57 - see some more details about it
672:59 - but we can do that with a something like
673:02 - google maps we can click in and go to
673:04 - different places and do a bunch of other
673:07 - uh functions with it
673:09 - so the analogy here is that html alone
673:12 - is like a paper map but when we add the
673:15 - dom
673:16 - api with that html then it becomes
673:19 - something like google maps where we have
673:21 - a lot of interactivity that we can put
673:23 - into it so to really talk about the
673:25 - document object model let's take a look
673:28 - from 10 000 feet
673:30 - all right so we know some things about
673:32 - javascript that are pretty familiar to
673:35 - us so for example
673:37 - this is a string in javascript we know
673:40 - that all right
673:41 - and we also know that this is going to
673:44 - be a number all right but what about
673:46 - that button that we just
673:48 - defined here so we saved it into the
673:51 - button variable
673:53 - so if we look at that variable what type
673:56 - of data is that
673:57 - well we don't actually have a good
674:00 - indication of that
674:01 - all we have to do is say type of button
674:04 - and it's going to say object well
674:06 - clearly there's got to be something more
674:08 - specific than just object
674:10 - and there is when we start using the dom
674:14 - or document object model terminology
674:16 - from the dom's perspective
674:19 - this element right here or this variable
674:21 - right here is considered an element so
674:24 - if we were to come to the document
674:26 - object model
674:28 - documentation here
674:29 - you're going to see
674:30 - all sorts of interfaces and stuff it's
674:33 - it's a pretty complex api that we're not
674:35 - going to even
674:36 - cover half of but if we click in and
674:38 - look at the element this is the most
674:42 - general base class from which all
674:44 - element objects in a document inherit
674:47 - all right so that would be what we are
674:49 - looking at when we have saved that
674:52 - selected element into a variable called
674:54 - btn and once we know that this is of
674:58 - this element type we can come here in
675:00 - the documentation we can see there's all
675:02 - sorts of properties that we can look at
675:05 - and there's all sorts of methods that we
675:07 - can use on this specific variable
675:10 - so we have a lot of functionality
675:12 - available to us but we have to first
675:13 - understand you know the the whole 10 000
675:16 - foot view so what i'm going to do in
675:19 - order for us to understand it better is
675:21 - show you a picture that's going to
675:23 - represent
675:25 - what the dom is really trying to do
675:27 - so at its highest level the dom has two
675:31 - built-in objects that are probably going
675:35 - to be used more than any other
675:37 - objects that you look at so at the top
675:40 - level the very top level you have the
675:43 - window object and what you can think of
675:46 - that as is literally the browser window
675:49 - that we're working in
675:50 - more specifically it's kind of referring
675:52 - to the individual tab browser tab that
675:55 - we're working in but in some cases it
675:57 - can cross over between tabs so you can
676:00 - actually
676:01 - program using that one object you can do
676:04 - all sorts of things within a browser
676:06 - so as a general user of a web browser
676:09 - there are several things that you do
676:11 - every day that you don't realize are
676:13 - programmable
676:14 - so one of those things is scrolling down
676:17 - all right scrolling down or scrolling up
676:19 - every time you scroll you can actually
676:21 - do that programmatically with javascript
676:24 - now another thing you can do is you can
676:26 - resize the browser window so if you were
676:29 - to resize it like this
676:32 - you can actually do that with javascript
676:35 - alright and finally if you refresh the
676:38 - page that's also something you can do
676:40 - with javascript in the way that you do
676:42 - it is by connecting into the dom
676:44 - via that top level object that we call
676:47 - window all right so i'm going to quickly
676:50 - show you how we can programmatically do
676:52 - these things by using that object but
676:55 - first let's take a look at this in
676:58 - the mdn documentation so we'll search
677:00 - for window
677:02 - and
677:03 - here's what we're looking for
677:05 - and it says the window interface
677:06 - represents a window containing a dom
677:09 - document document property points to the
677:11 - dom document loaded in that window so
677:13 - basically it's saying that the windows
677:15 - the browser itself or the tab and then
677:18 - there's an html document represented by
677:21 - the document object within it all right
677:23 - so that picture that i just showed you
677:25 - kind of uh shows that relationship how
677:29 - we have a html document that we are
677:32 - putting in that browser window now from
677:34 - here this window object like i said has
677:37 - all sorts of properties and methods that
677:39 - we can
677:40 - use to do things that we commonly do
677:43 - just by clicking around in the browser
677:45 - on a normal basis so you can see down
677:47 - this left hand side these are all of the
677:49 - different
677:51 - you know things we can do with it so for
677:53 - example we have this alert method so
677:56 - let's go ahead and inspect element so
677:58 - we're in the browser console and if we
678:00 - type window dot alert and then we say i
678:04 - love programming or something like that
678:07 - and press enter it's going to open up an
678:09 - alert window and you can see how we're
678:12 - already starting to program this browser
678:15 - window using that object here's another
678:17 - thing we can do we can open up
678:20 - new tabs so if we say window.open
678:23 - and maybe go to
678:24 - google alright when we press enter it's
678:27 - going to open a new tab and put us at
678:30 - google.com so that's pretty cool
678:33 - let's see another thing that we can do
678:34 - is we can scroll so you have to
678:36 - obviously be on a page that has a scroll
678:38 - bar which this one does
678:41 - and from here we just say window
678:43 - scroll by and then we give it a bunch of
678:46 - options here these are all documented
678:48 - within this method so if you were to
678:51 - um go down to the methods
678:55 - of window let's see if we can find them
678:57 - all right so we found the methods here
678:59 - and let's see if we can find this scroll
679:01 - by
679:02 - method
679:04 - all right so we have scroll by we can
679:06 - click on that and it just tells us okay
679:09 - you can pass in some options here and
679:12 - those options that we're passing in are
679:14 - scroll to options all right and then
679:17 - from here we have the top left and
679:19 - behavior so we're going to define we
679:22 - want to scroll
679:23 - from the top we want to scroll window
679:26 - dot inner height
679:27 - which is going to be a built-in property
679:30 - of that window object which basically
679:32 - says here's how tall this entire html
679:35 - document
679:37 - is all right so from the top we want to
679:39 - scroll down the entire length of the
679:40 - page essentially we're going to the
679:42 - bottom
679:43 - of this page
679:44 - all right and then from the left we want
679:47 - zero we don't want to scroll left and
679:48 - right and the behavior
679:51 - that we want is going to be smooth we
679:53 - don't want to just jolt down the page we
679:55 - want to smoothly scroll all right so
679:58 - when we do this and close out this
680:01 - method and press enter
680:03 - you got to watch the screen now
680:05 - it's going to scroll all the way down to
680:08 - the bottom of this you know page or
680:10 - whatever and i guess it didn't go
680:13 - all the way down because i actually
680:14 - explained that wrong so window.inner
680:16 - height
680:17 - if we look at that
680:19 - inner height is only going to define
680:22 - how large
680:23 - the visible window is so it's not going
680:25 - to
680:26 - define how large the entire document is
680:29 - so obviously this is a much larger
680:31 - document so it's only going to scroll
680:33 - down one entire page and then finally we
680:36 - are able to actually reload the page so
680:39 - we can tap into the
680:41 - window.location property and then that
680:43 - location property has a method called
680:46 - reload and you could have found this in
680:49 - the documentation if you looked hard
680:51 - enough but i don't want to right now
680:53 - just for sake of time so let's press
680:55 - enter
680:56 - and you can see
680:57 - you may not have seen it but it reloaded
680:59 - the entire page
681:01 - programmatically so you can see how that
681:03 - top level window object is basically our
681:06 - control over the browser and the way
681:09 - that this is happening is via the dom
681:12 - api so the dom again is just an api to
681:16 - connect in with our browser in html
681:19 - document now another thing to mention
681:21 - about this is it's a global object which
681:23 - means we don't have to actually specify
681:26 - it every time we use it so
681:28 - i showed you before that we could do
681:30 - window.alert
681:32 - and then type in something to get an
681:34 - alert all right so we can also do this
681:37 - by dropping window like we don't even
681:39 - need that because it's global and we can
681:41 - go ahead and get the same results there
681:44 - alright so that's important to keep in
681:45 - mind with the window object and
681:48 - the document object these are both
681:50 - global so we don't need to specify them
681:53 - before calling their methods or
681:55 - properties so a couple common properties
681:57 - on window we're not going to go through
681:59 - all of the methods and properties for
682:01 - all these objects but this is just such
682:03 - a high level one an important one that i
682:05 - want to
682:06 - so window has a few common properties
682:08 - that you might want to tap into
682:10 - one of those is going to be the inner
682:12 - height and i spelled that wrong so it's
682:14 - not going to give me anything
682:16 - so we've got inner height is going to
682:17 - give us the height in pixels of the
682:21 - space that displays the html so the
682:24 - visible
682:25 - area that's displaying that html now if
682:28 - we said outer height that's going to
682:31 - give us the
682:32 - pixel
682:33 - height of the entire browser window so
682:36 - if you look at this value it's 1040 but
682:39 - if you
682:41 - make this browser window smaller and you
682:43 - say outer height it's going to give us a
682:45 - different value 894 the same thing
682:48 - applies for inner width and outer width
682:51 - so inner width is going to give you the
682:53 - width of this space that's displaying
682:55 - the html so if you resized this
682:58 - you're going to get a different inner
683:00 - width all right so i don't want to spend
683:02 - too much time on the properties but you
683:03 - can kind of get the gist of what that's
683:05 - showing you
683:06 - now another common property that we
683:08 - might look at here with window is going
683:11 - to be
683:12 - local storage all right so this is going
683:15 - to be a big one that will come up as we
683:18 - start getting into more
683:21 - advanced web development concepts and
683:23 - basically what this allows you to do
683:25 - is store data temporarily in the browser
683:29 - so if i were to
683:31 - go to the application here in chrome
683:34 - it's called a little bit different thing
683:36 - in firefox i actually talked about that
683:38 - in like the third lesson of the series
683:41 - but if you click here you can actually
683:42 - see key value data pairs that can be set
683:46 - and retrieved through the local storage
683:48 - object so if we wanted to set an item
683:51 - we'll just say test and then we want to
683:53 - set it equal to 20. we can do that and
683:56 - then we come to application and you can
683:57 - see test
683:59 - has a value of 20 here so it's a great
684:01 - way to store temporary values and that
684:03 - is accessed through the local storage
684:07 - object that sits on the window object
684:09 - all right and then finally i want to
684:11 - talk about the
684:12 - location
684:14 - because this is going to basically
684:16 - represent an object that has details
684:18 - about
684:19 - where you're visiting right now so right
684:21 - now we're on the mdn web docs and if we
684:24 - were to look at the window.location
684:26 - you're going to get all sorts of details
684:28 - about that
684:30 - location we have in the address bar so
684:32 - these are some of the common properties
684:35 - just one more two more that i want to
684:37 - show you here before we move on
684:40 - window has a scroll x property
684:44 - which is going to indicate how much we
684:46 - have scrolled from the left side of the
684:48 - page or i guess right and left
684:50 - horizontal scrolling and then we have
684:53 - window dot scroll y which is going to
684:56 - indicate how much we've scrolled up and
684:58 - down
684:59 - so you see the scroll bar here this is
685:01 - going to change the value of this
685:03 - property every time
685:05 - we scroll a little bit so these are all
685:08 - going to come in handy as we work with
685:11 - the dom later on and we want to you know
685:14 - programmatically do things within this
685:16 - browser window now i've briefly
685:18 - mentioned it before but we can have
685:20 - these things called events happening
685:23 - within the dom now this is going to be a
685:26 - little bit complicated but i want to
685:28 - just show you a basic example of this
685:31 - something that you can do on the top
685:33 - level window object so
685:36 - we can say window
685:38 - on scroll so basically we're saying we
685:40 - want to tap into the on scroll event
685:43 - which basically every time i move that
685:45 - browser scroll bar it's going to fire
685:48 - this event and what i want to do every
685:50 - time i scroll i want to execute a
685:54 - function so right here i'm using an
685:55 - anonymous function
685:57 - and i'm just going to console.log hi
686:00 - alright so something very simple
686:03 - and now we have set an event listener on
686:06 - this the entire window all right so now
686:09 - when i touch the scroll bar we're going
686:12 - to get this printing hi to the console
686:15 - for a lot of different iterations here
686:17 - so
686:18 - that's just a basic event now i just
686:20 - want you to know that that is available
686:23 - and it's something that you can do but
686:24 - we're not going to
686:26 - really dig into the the super nitty
686:28 - gritty details of it in this lesson all
686:30 - right so now that we've talked about the
686:32 - window object which represents the
686:34 - entire you know tab that we have open or
686:36 - i guess the
686:38 - browser that we're working in
686:40 - let's talk about the document object so
686:42 - let's put that back up on the screen
686:44 - that
686:45 - 10 000 foot view of the dom api
686:48 - we've got at the top we've got the
686:50 - window object and then a property of the
686:53 - window object is going to be document
686:56 - and this is where the real fun begins
686:58 - because document is basically a
687:00 - representation of your entire html
687:03 - document that you've written so let's
687:05 - take a look at this i'm going to refresh
687:07 - the browser so we don't have that on
687:09 - scroll
687:11 - event firing every time but we have
687:13 - window at the top and then we have this
687:15 - property called document all right so we
687:17 - press enter on this
687:19 - and you now see that we have this
687:22 - big object that has basically the html
687:25 - document defined within it
687:27 - and while we can expand these different
687:29 - things
687:30 - visually within the console there's
687:32 - actually a lot of things that we can do
687:34 - programmatically using this document
687:36 - object we can add or remove html
687:39 - elements from the existing page we can
687:42 - modify existing html elements and we can
687:45 - even set events on specific html
687:49 - elements we saw how we set an event on
687:51 - the entire window but we could set an
687:53 - event
687:54 - like we talked about earlier in the
687:56 - prior video something like that where we
687:58 - have a button and we want to wait for a
688:00 - click event and we want to fire some
688:02 - sort of function that does something
688:04 - every time that button is clicked so
688:07 - this document
688:08 - object is very powerful and there's a
688:10 - lot of things that we have to cover
688:12 - to understand what it actually does so
688:15 - let me show you a basic example of this
688:17 - we'll go back over to our
688:20 - code pen which we have a basic
688:23 - html document here
688:25 - and i'm going to type document and let's
688:27 - take a look at what we're
688:29 - dealing with so right here we have this
688:32 - top level html wrapper which we talked
688:34 - about is
688:36 - going to happen
688:37 - for every single html document in
688:40 - codepen you know you'll notice over here
688:42 - we don't have that written but codepen
688:45 - is automatically wrapping our html
688:47 - within the html wrapper all right so we
688:51 - expand this down we have a head
688:53 - code pen takes care of this and a body
688:56 - and then from here this is where the
688:58 - actual
688:59 - html
689:01 - and javascript that we're writing is
689:03 - going to be placed so you'll see that we
689:05 - have our h2 element our paragraph
689:08 - element and our button element and then
689:10 - you also see some scripts down here at
689:12 - the bottom
689:13 - and basically these scripts are what are
689:16 - represented here in the javascript so
689:17 - any javascript we type here is connected
689:20 - up to our html document via these script
689:23 - tags
689:24 - so again don't have to understand how
689:26 - that all works we'll get into that in
689:27 - future lessons but
689:29 - i just wanted to show you the anatomy of
689:31 - this document object now if you've been
689:33 - following this series all the way
689:35 - through and you went through the
689:36 - javascript series you know how to write
689:38 - basic javascript and you also know that
689:41 - if we have a javascript object we can
689:43 - access properties of it
689:45 - so let's define a basic object with a
689:47 - property
689:48 - all right something like prop 1 and prop
689:51 - 2.
689:52 - nothing fancy here
689:54 - but if we were to actually let's make a
689:57 - nested object as well
689:59 - we'll say nested
690:02 - right here
690:04 - and then
690:05 - we will
690:06 - end this alright so object.prop2.nested
690:11 - is going to equal our value right here
690:13 - because we use the dot notation to
690:15 - access the different
690:17 - embedded
690:19 - properties and values within this object
690:22 - now you would think that we could do the
690:24 - same thing with the document object but
690:27 - we can't all right so if we
690:30 - try to do the same sort of access let's
690:32 - clear the screen
690:33 - and if we try document
690:36 - and then let's go ahead and look at it
690:38 - one one quick second so we obviously
690:41 - have document now we have html then we
690:43 - have body so if we typed document
690:46 - dot html
690:48 - dot body it's going to say we cannot
690:51 - read the property of body because it's
690:53 - undefined so we clearly cannot just
690:55 - access these different html elements
690:58 - with dot notation we have to use um the
691:02 - document object model api to do so and
691:05 - it's a little bit different it takes a
691:07 - little bit of getting used to but
691:08 - hopefully we can walk through some of
691:10 - the more common ways to use it here in
691:12 - the remainder of this video so i'm going
691:15 - to put on a
691:16 - new html document here with some
691:19 - additional
691:20 - parts to it so that we can really
691:22 - visualize what this dom is all about all
691:25 - right so we can think of the document
691:27 - object model as a tree
691:30 - and furthermore we can think of this
691:31 - tree as
691:33 - kind of like we think about ancestry
691:36 - trees or whatever where you have
691:38 - grandparents and then you have
691:40 - parents and you have
691:42 - children and stuff like that so what
691:44 - you're seeing on the screen right now is
691:46 - this html document that we just created
691:49 - in this code pen
691:51 - represented as the dom tree all right so
691:54 - you can see that we have the document at
691:56 - the top then we go down to html and then
691:59 - from there we have the head in the body
692:01 - and underneath the body specifically we
692:04 - have all of this html that we have
692:07 - written here
692:08 - and within that html we have a lot of
692:10 - siblings but we also have some children
692:13 - so for example
692:15 - let's look at this main div right here
692:17 - for the main body so the main body div
692:21 - is going to be the parent
692:23 - to this h1 tag
692:25 - these two p tags and this ul or
692:28 - unordered list tag all right so that's
692:30 - going to be the parent to these
692:32 - four
692:33 - now if we look at the list items
692:35 - its parent is going to be the unordered
692:37 - list and its grandparent is going to be
692:40 - the main body div so you can see how
692:42 - these relationships start to build and
692:44 - furthermore we have you know the concept
692:47 - of siblings so all of these list items
692:50 - these are all going to be siblings
692:52 - within the document object model
692:54 - and this unordered list the p tags and
692:57 - the h1 they're all siblings so what do
692:59 - we call all of these elements well in
693:02 - the document object model we call them
693:04 - all nodes now this is very different you
693:07 - should not
693:08 - confuse this with node.js we'll talk
693:11 - about that later in the series but
693:12 - that's basically the back end server
693:15 - side version of writing javascript this
693:18 - is a totally different concept all of
693:20 - these elements are considered nodes
693:23 - within the dom tree now of course
693:25 - they're all different so they're all
693:27 - different types of nodes and i'm going
693:30 - to put the
693:31 - image back on the screen that we looked
693:32 - at in
693:34 - the prior part of this lesson when we
693:35 - talked about the basics of html
693:38 - so within this
693:40 - element that we have defined it's a
693:42 - total unit
693:43 - we have different types of nodes here so
693:46 - at the
693:47 - simplest level we have something called
693:49 - an element node and that's going to be
693:52 - represented by the p tag all right and
693:54 - then we have an attribute on that uh
693:58 - html element and we call that an
694:00 - attribute node and then finally we have
694:02 - a text node which is going to be the
694:05 - content that we're putting between the
694:06 - starting and closing paragraph tags now
694:10 - to prove this out to you i'm going to
694:11 - actually take this element and create it
694:14 - in javascript and then insert it into
694:17 - the page that we're looking at right
694:19 - here
694:19 - all right so the first thing we have to
694:21 - do is define each of those three
694:23 - different types of nodes all right so
694:25 - the first one is going to be an element
694:28 - node
694:29 - and let me let me actually zoom out a
694:31 - little bit here so we've got an element
694:33 - node and we have to use the document
694:35 - object
694:36 - and then we use create element and
694:39 - before we do that i keep forgetting we
694:41 - have to change the context
694:44 - to codepen so that we're working with
694:46 - the
694:46 - document that we're seeing over here
694:48 - rather than the whole document
694:50 - all right so sorry about that and what
694:52 - we're going to do is create our element
694:54 - node which is going to be a p tag all
694:56 - right so we're just creating that
694:57 - element we just put on the screen
694:59 - so let's press enter and we have created
695:02 - our first element node and if we look at
695:04 - that it's just going to be an mtp tag
695:08 - there's nothing in it yet all right
695:10 - so now we have to create our text node
695:13 - alright so we're going to type document
695:15 - dot create text node and then here we're
695:18 - going to put in the word content which
695:21 - is the stuff that was between the p tags
695:23 - alright so we press enter and right now
695:26 - this element node is still empty all
695:29 - right so we still have an empty p tag
695:31 - and the reason is we haven't assigned
695:33 - the text node to that element yet
695:35 - before we do that let's create our last
695:37 - node which is going to be an attribute
695:40 - attribute node
695:41 - so we'll create an attribute and we want
695:43 - to call this a class attribute because
695:46 - that's the type of attribute we had on
695:48 - this
695:49 - html element all right so at this point
695:52 - let's look at what we have here so we
695:53 - have
695:54 - element node which is a mtp tag then we
695:58 - have the text node which is going to be
696:01 - content as a string or more specifically
696:04 - a dom string
696:05 - and then finally we have our
696:08 - attribute node which is going to be
696:10 - class equals to empty so basically we
696:14 - haven't assigned a value to this
696:15 - attribute yet but we've initialized it
696:18 - the first thing i want to do is i want
696:19 - to take our text node and i want to put
696:21 - it inside our
696:23 - p tag or element node so all we have to
696:26 - do is say element node dot append child
696:30 - and then we pass in the text node press
696:33 - enter and now when we print out the
696:36 - element node it's going to be a p tag
696:38 - with that content placed between it now
696:40 - we are starting to build out this
696:42 - element the next thing that we have to
696:44 - do is give a value to our attribute so
696:47 - if you saw before we have class equal to
696:50 - an empty string
696:51 - all we have to do to do that is we say
696:53 - attribute
696:55 - node and then we say dot value equals
696:58 - sum class all right so now we have this
697:01 - attribute node
697:03 - if we print that it's going to say class
697:05 - equals sum class so we're getting closer
697:07 - the only thing that we are missing is
697:09 - this attribute is not connected up with
697:12 - our
697:13 - paragraph element so to do that all we
697:16 - have to do is take our element node and
697:18 - we say set attribute and then we pass in
697:21 - the attribute node
697:23 - and it says it failed to execute
697:26 - because there are two
697:29 - oh okay i messed it up so
697:32 - not set attribute we have to set
697:34 - attribute node all right so we press
697:36 - enter there and now the element node
697:39 - is going to be our full html element
697:42 - that we saw in the model before the last
697:44 - thing we have to do is insert it into
697:46 - the document and the way that we do that
697:48 - is we use the document object so we type
697:51 - document and then we use the append
697:55 - child method we haven't talked about
697:56 - this yet but i just want to show how it
697:58 - works
697:59 - and now we just pass in element node and
698:02 - if you look at the bottom of our code
698:04 - pen you're going to see this element
698:06 - inserted into the document
698:09 - and it's going to say it failed to
698:10 - execute
698:12 - because i messed up once again
698:15 - i forgot i need to
698:17 - add one more piece of code in here i
698:19 - need to say document.body so instead of
698:22 - just inserting it at the end of the
698:24 - document which represents the whole html
698:27 - document i need to specify that i want
698:29 - to look at the body specifically so if
698:32 - we go over to elements
698:34 - and we look at the entire well i guess
698:37 - this is not a good example because
698:38 - codepen is adding a bunch of other stuff
698:41 - but basically we need to put in the body
698:43 - element so let's press enter and you can
698:46 - now see that our content has been
698:48 - inserted into our existing html document
698:51 - so you may not have recognized it but
698:53 - we're actually tapping into the dom's
698:55 - api to do everything we just did
698:58 - we created a new html element with
699:01 - javascript alone
699:03 - and you can see that we use things like
699:05 - set
699:06 - set attribute node and append child and
699:10 - we've used create attribute create text
699:13 - node create element these are all
699:15 - methods that are defined within the
699:18 - document object model all right so we
699:20 - are actually using the dom as we speak
699:22 - here now you might ask what's the point
699:25 - of this every time we refresh the page
699:28 - so if we refresh this page
699:30 - reload it
699:32 - we're not going to have those same
699:34 - elements inserted into our document
699:36 - anymore
699:37 - and i'm not sure what i'm doing here
699:40 - okay so html i actually need to copy in
699:44 - some stuff here
699:47 - it's because i didn't save the actual
699:49 - code pen but whatever the case that
699:52 - content at the bottom is going to be
699:54 - temporary and you might ask well what's
699:56 - the point of inserting stuff with
699:58 - javascript and the answer to that is for
700:02 - user experience
700:04 - so
700:04 - when a user creates a calendar event on
700:07 - google calendar you'll see a calendar
700:10 - event pop up immediately on that
700:12 - calendar and that was done via
700:14 - javascript you know tapping into the dom
700:17 - all right another example is a user adds
700:20 - a to do item to their to-do app
700:22 - or a user creates a post on facebook all
700:25 - of these things are using javascript via
700:27 - the dom
700:28 - so the dom's api
700:30 - to insert elements and modify elements
700:33 - that are existing within the html
700:36 - document
700:37 - but they're only temporary and it's
700:38 - because we want a better user experience
700:41 - so we want to immediately change that
700:43 - you know web page and then later we kind
700:46 - of save that to the database and reload
700:48 - it with new data later all right so at
700:50 - this point we have gone through a lot of
700:53 - different angles to think about the dom
700:56 - with but we haven't actually you know
700:58 - buckled down and tried to understand you
701:00 - know how do we actually use the dom here
701:02 - what are some of the methods available
701:04 - to us um
701:06 - what exactly is the dom like you know
701:08 - we've been working with the window
701:10 - object in the document object but
701:12 - there's so much more to it we can also
701:14 - work with individual elements and with
701:17 - each element we can do certain things
701:19 - with that just like we talked about with
701:21 - html and javascript before the purpose
701:24 - of this series is not to make you an
701:26 - expert in any one thing it's to take you
701:28 - from xero to launching your first full
701:31 - stack application and deploying it so
701:34 - we've got to cover a lot of ground so
701:35 - i'm going to walk you through an example
701:38 - of using the dom we're going to cover
701:40 - some of the common uh methods and
701:44 - you know properties that we can use
701:46 - within the dom but we're not going to
701:47 - cover everything and quite frankly most
701:50 - developers don't know everything about
701:52 - the dom it's very complicated and
701:55 - there's a lot of stuff that you will
701:57 - never end up using within your career
702:00 - anyways let's get started let's go ahead
702:02 - and put some new html in our code pen
702:05 - all right and this one says welcome to
702:07 - my html tutorial click the button below
702:09 - to begin
702:11 - and this button what we want to do with
702:13 - this is we want every time we click it
702:16 - we want to add a new paragraph element
702:19 - to the bottom of this page so how do we
702:21 - do that well it's three steps
702:24 - number one we have to find a way to
702:26 - identify
702:28 - the button element so that we can start
702:30 - working with it number two we have to
702:32 - register a click event on this button
702:35 - which is part of the dom it's part of
702:37 - the dom api and then number three we
702:39 - need to write a function that will
702:41 - insert a new paragraph element in the
702:45 - web page every time we click it so let's
702:47 - take a look at our button here we have a
702:50 - global attribute called id every html
702:53 - element
702:54 - is
702:55 - able to have this id attribute
702:58 - and we also have a global attribute
703:00 - called class every html element is
703:03 - eligible to have a class on it
703:06 - so we have multiple ways to identify
703:08 - this button so let me take you through a
703:10 - couple of those ways to better explain
703:13 - some of the methods we have on the dom
703:15 - here's the first way we can do it and
703:17 - this is probably the most generic
703:19 - we can say document.queryselector
703:22 - and then we can just type in button
703:24 - because this is going to be
703:27 - button is going to represent the tag
703:29 - that we're looking for so what this is
703:31 - going to do
703:33 - right now is it's going to look for any
703:35 - button on the entire page here including
703:38 - codepen's you know interface and the
703:41 - reason is we don't have the right
703:42 - context so let's go down to codepen
703:45 - again and try this again so we're going
703:48 - to select button
703:50 - and what this is going to do
703:51 - is it's going to look through the html
703:54 - document that we're working with and
703:56 - it's going to find the first occurrence
703:58 - of a button tag and if it doesn't find
704:01 - it it's just going to return null now
704:03 - the question is how did i know to use
704:05 - this document.queryselector
704:08 - all right the reason i knew that is
704:10 - because if you go to the documentation
704:13 - you go to apis
704:15 - dom
704:16 - then you go down to dom
704:18 - and you find that document object so
704:22 - this is that document object that we
704:24 - talked about it represents the html
704:26 - document itself this has certain
704:29 - properties and it has certain methods
704:31 - that are available for us to use
704:33 - so if we scroll down all the way to the
704:35 - methods you will see a couple of
704:38 - different query methods
704:40 - so we have query command enabled you
704:42 - won't use that much
704:44 - a couple others but you can see query
704:46 - selector it's actually
704:48 - listed twice i'm not sure if that's
704:50 - meant to do
704:51 - not meant to be that way
704:53 - i don't think it is actually but
704:55 - we can go to query selector
704:57 - and this will tell us basically how to
705:00 - use it so we can put in selectors it
705:02 - says
705:03 - a dom string containing one or more
705:05 - selectors to match the string must be
705:07 - valid
705:08 - css selector string so we don't know a
705:10 - whole lot about css quite yet but
705:13 - basically what that means is if we pass
705:16 - in
705:17 - to this query selector if we pass in
705:20 - something with a hashtag at the
705:22 - beginning that represents an id so if
705:25 - you remember we've got this id equal to
705:28 - btn-1
705:30 - so if we put the hashtag and type bt
705:32 - btn-1
705:34 - we should be able to find this element
705:37 - again of course we got to go back to the
705:39 - codepen
705:40 - context it's very annoying
705:43 - that i have to do that but
705:45 - i promise it'll get a little bit easier
705:46 - in the future
705:48 - so we'll go btn-1 and we can find that
705:51 - element that way now we can also use a
705:55 - class selector which is a period right
705:58 - so
705:59 - you can see our class is my-btn
706:02 - so if we do period
706:04 - my-btn we should be able to find the
706:06 - same button that way as well and these
706:09 - are just more specific ways to find a
706:11 - single element within the dom now of
706:14 - course as with anything in programming
706:16 - there's lots of ways to solve the same
706:17 - problem
706:18 - and if we go back to this documentation
706:21 - let's go back to the main document
706:23 - object
706:24 - and if we look at some of the methods
706:26 - here we've got these query selectors
706:28 - which are kind of generic query
706:30 - selectors that i basically it's all i
706:33 - use to find elements within the html
706:36 - document but you can also get an element
706:39 - by id all right so that's another way to
706:42 - locate an element so if we were to
706:45 - replace this so we say get
706:48 - element by id and then this time all we
706:51 - have to do is pass in
706:53 - the id you don't even need a hashtag at
706:55 - the end
706:56 - oh i messed this up here all right let's
706:59 - try that again
707:01 - so get element by id
707:03 - and button one
707:05 - and we should be able to find that
707:07 - button once again by using a different
707:09 - method so as you can see there's many
707:11 - ways to skin a cat here and
707:14 - with the document object model you can
707:16 - get very creative with your code now the
707:18 - reason that
707:19 - selecting it by an id
707:22 - is the most specific way to do it and
707:24 - probably the best way to do this
707:26 - is because you cannot have two elements
707:29 - with the same id
707:30 - so if i tried to copy this button
707:33 - down here
707:34 - and it's got the same exact id as the
707:38 - other button
707:39 - it's going to have a conflict so this is
707:42 - not really valid html it'll still render
707:44 - but it will cause you problems if you're
707:47 - trying to
707:48 - use any sort of front-end framework or
707:50 - even locate things with the dom
707:52 - so what i'm going to do here is paste in
707:55 - all of the different ways we can
707:57 - identify this one button let me get rid
707:59 - of
708:01 - the button here
708:02 - the second one and then it's going to
708:04 - kind of refresh
708:06 - put me back in the wrong context so i'm
708:08 - going to go back and now if i paste in
708:11 - all of these different methods
708:13 - so you can see there's quite a lot of
708:15 - different ways to identify
708:17 - this button but these are all valid ways
708:20 - to do it and this only executed
708:22 - it looks like one of them
708:24 - but if you were to type each of these in
708:26 - individually it's going to locate it
708:28 - each time but obviously there are some
708:30 - that are more specific than others and
708:32 - we always prefer to be as specific as
708:34 - possible when identifying elements
708:36 - within the dom all right so now that we
708:38 - know how to identify this element let's
708:41 - go ahead and write that in our code so
708:43 - so far we haven't used this javascript
708:45 - section
708:46 - quite yet but what i'm going to do is
708:48 - i'm going to say add
708:50 - paragraph
708:52 - and we're going to make a function
708:53 - that's going to be actually called every
708:55 - time we click that button
708:57 - so from here all we have to do is locate
709:00 - the button and assign it to a variable
709:03 - so we're going to use one of those
709:04 - methods i just will choose the query
709:06 - selector and we're going to pass in the
709:09 - id
709:10 - of that button in order to identify it
709:12 - alright so this button variable should
709:15 - represent our button and from here we
709:18 - should be able to do something with it
709:19 - every time it is clicked and i'm
709:21 - actually going to not put this within
709:23 - the function this will just be
709:25 - in the
709:26 - global scope of our
709:28 - javascript document here i'm going to
709:30 - close out this console so that we have
709:32 - some more room to write
709:34 - just for a second all right so now we
709:37 - have this button being identified and
709:40 - then we have a function that's going to
709:41 - add a paragraph
709:42 - all right and the last thing that we
709:44 - have to do is we have to
709:46 - add an event listener so this is how we
709:49 - do that we just say
709:51 - add event listener and then we specify
709:53 - the event that we're trying to listen to
709:55 - and then the function or the callback
709:58 - that we're going to pass in to execute
710:01 - on that event happening now this is the
710:03 - first way to register an event
710:06 - on a specific html element
710:10 - this is one way to do it another way to
710:12 - do it is if we take our element button
710:14 - and then we say on click
710:17 - and then we set it equal to add
710:19 - paragraph then that's going to also
710:22 - register that event on the button and
710:24 - then a third way we can do it is in the
710:27 - html itself and this is what we looked
710:30 - at previously in this tutorial if we
710:32 - come here to the button and we say on
710:34 - click
710:35 - and then we set that equal to add
710:37 - paragraph and then we actually execute
710:40 - it within those parentheses then that's
710:42 - going to register that click event as
710:45 - well so there's three different ways
710:46 - that we can register a click event but
710:49 - in this case i want to do it directly
710:51 - with javascript so we'll go ahead and go
710:53 - with this one this is a pretty simple
710:55 - one
710:56 - but you might be asking like how do we
710:58 - know that that's a event that's valid
711:01 - and the reason we know that is if we go
711:03 - to the event reference within the mdn
711:06 - web docs
711:08 - this is going to give us all of the
711:10 - different events that we have for
711:12 - elements on the web all right so not all
711:15 - of these are going to work with like say
711:17 - a button but
711:18 - a lot of these will
711:20 - just work for various components within
711:22 - a web page
711:25 - so here we have mouse events and you can
711:27 - see the click event
711:28 - and this is going to
711:31 - tell us that the event handler property
711:34 - is the on click which is what we put in
711:37 - right here so you'll get used to on you
711:40 - know you'll basically pick up on all of
711:41 - the common events
711:43 - with due time there's only a few of them
711:46 - that are used on a frequent basis and
711:48 - the on click method is actually one of
711:50 - the most common events that you'll use
711:53 - in web programming so at this point we
711:55 - have our event wired up and this add
711:57 - paragraph function is going to fire
711:59 - every time we
712:01 - click the button so let's say
712:03 - the button is working
712:06 - all right and if we go ahead and open
712:08 - back up that console
712:10 - so right click inspect
712:12 - go to the console
712:14 - and we're in the correct context it
712:16 - looks like
712:17 - and we can just say
712:19 - or click the button and it's going to
712:21 - say the button is working
712:23 - and it's going to do it over and over
712:24 - again every time we click it so the goal
712:27 - here is to insert a new paragraph
712:29 - element every time we click that button
712:31 - right now it's just console logging some
712:33 - a string to the console but we can also
712:36 - construct a new element just like we did
712:39 - before and this time around i'm going to
712:41 - show you a few shortcuts that's going to
712:43 - make it a little bit easier to create
712:44 - this paragraph element now we want to
712:46 - have some random
712:48 - data to be printed to each new paragraph
712:50 - element so i'll just generate a random
712:52 - number
712:53 - we'll say randomnum
712:55 - is going to be equal to math.floor this
712:58 - is a trick that we learned in a previous
713:00 - lesson
713:01 - and we'll just do between 0 and 100.
713:04 - something like that all right and then
713:06 - we're going to
713:08 - say the p
713:09 - content this is what we want to actually
713:11 - add within that paragraph element we're
713:14 - going to combine this with the random
713:16 - number we're just going to say the
713:17 - random
713:19 - number is
713:20 - and then we're going to add via string
713:23 - concatenation
713:24 - that random number all right so now the
713:27 - p content is the random
713:29 - string and let's go ahead and just test
713:31 - that out real quick
713:32 - by printing our random string to the
713:35 - console every time it is clicked alright
713:37 - so we will click me and it's going to
713:40 - say the random number is eight all right
713:43 - so that's done now we need to actually
713:45 - create our paragraph element
713:47 - the way that we do that is going to be
713:50 - we're going to define a new element
713:52 - variable and we're going to use the
713:53 - document.create
713:55 - new element method all right so if we go
713:59 - to the mdn docs
714:01 - and we go to technologies apis
714:04 - dom
714:05 - and then we go down to
714:07 - the
714:08 - document object right here
714:11 - and then we go down to the methods all
714:13 - right so we're going down to the methods
714:15 - here in the documentation
714:17 - and we should see a create
714:19 - element right here
714:21 - so it's not create new element i don't
714:23 - know why i said that here we're just
714:25 - going to do create element
714:27 - and then we need to pass in the type of
714:29 - element that we're looking for so if we
714:31 - look at the create element documentation
714:34 - it's going to say that our tag name is
714:36 - the only required property
714:39 - or parameter of this method so any tag
714:43 - name works in this case we're going to
714:45 - pass in p for that tag name and now we
714:48 - have a new element assigned to a
714:50 - variable
714:51 - the next thing that we'll do is we're
714:53 - just going to instead of creating a new
714:55 - text node like we did in that first
714:57 - example we're just going to take the new
714:59 - element and we're going to use a
715:01 - property called text content which
715:03 - exists on it and we're going to set that
715:05 - equal to
715:06 - the p content variable that we created
715:10 - prior all right so if we go to the
715:14 - documentation here and we go to
715:17 - let's see
715:18 - the element reference so
715:21 - this is going to be
715:22 - of type element and then the text
715:25 - content is going to be part of that so
715:27 - really the fastest way to do this is
715:28 - just type text content
715:31 - and it's going to be part of the node
715:34 - interface so if you remember the dom
715:37 - tree is just constructed of a bunch of
715:40 - nodes
715:41 - and no matter what type of node we're
715:43 - working with it's always going to have
715:45 - the properties and methods of this node
715:48 - interface
715:50 - so you can see in the properties if we
715:52 - scroll down to text content
715:54 - you can see that we can actually set
715:56 - this
715:57 - to new content
715:59 - directly so we'll do that here and now
716:02 - we just need to basically add this to
716:05 - the document
716:07 - at the very end
716:08 - so the way that we do that is we come
716:10 - down here at the bottom we say document
716:12 - dot body dot append
716:15 - child and then we put in the new element
716:18 - which has our random text content
716:21 - we'll get rid of this
716:22 - console.log here
716:24 - all right so here's the whole
716:26 - function that we're dealing with
716:29 - so we have add paragraph we get a random
716:31 - number we generate random content from
716:33 - that number
716:34 - we create a paragraph element we assign
716:37 - the random content as the text content
716:40 - of that element and then we append it to
716:43 - the end of the html body which is
716:46 - basically going to be after this button
716:48 - all alright so let's go ahead and test
716:51 - this out so we press click me and we're
716:54 - going to get a new paragraph element
716:56 - with a random number every time we click
716:59 - it
716:59 - so it's pretty cool
717:01 - like this is where programming starts to
717:04 - get kind of fun is when we actually can
717:06 - start building things that are
717:07 - interactive and we can click buttons and
717:09 - get results so hopefully this brings you
717:12 - a little bit of excitement obviously
717:14 - it's not something useful but we will
717:16 - soon get there in future videos as you
717:19 - can see with some of the examples we've
717:21 - gone through there's really only a few
717:24 - methods and properties that you kind of
717:26 - have to remember with the dom
717:28 - we got the query selectors so how do we
717:30 - identify the element we want and then
717:33 - the methods where we can create new
717:35 - elements and modify both their content
717:39 - their attributes we haven't talked too
717:40 - much about that yet
717:42 - but we can do a bunch of stuff with
717:44 - these elements so the next thing we have
717:46 - to talk about is going to be how do we
717:48 - navigate an html document now i talked
717:51 - about the dom tree and how there's you
717:53 - know siblings and parents grandparents
717:55 - child all that kind of stuff
717:57 - and that's going to come into play here
717:59 - how do we actually navigate through a
718:01 - complex html document to do this i'm
718:04 - going to copy in a predefined html
718:07 - document here that you'll see we've
718:10 - looked at this before
718:11 - and we're going to basically figure out
718:14 - how this dom um all the dom interfaces
718:17 - actually work here when i talk about
718:19 - you know dom nodes and you know elements
718:22 - and how elements kind of inherit from a
718:25 - dom node like what does that all mean
718:28 - and that's going to become more apparent
718:30 - when we work through the navigation of
718:32 - this html document so let's put that
718:35 - diagram back up on the screen where we
718:38 - can see this document right here
718:41 - visualized as a tree
718:43 - and from this
718:44 - this visual you can see that
718:47 - these list items are going to be
718:49 - siblings
718:50 - and they're going to be children of the
718:54 - unordered list
718:55 - so how do we select this unordered list
718:58 - and then get all of the children of it
719:00 - with javascript well this is actually
719:03 - simpler than you might think so
719:05 - we've already been able to identify
719:08 - elements from the dom so we use
719:10 - document.queryselector
719:12 - and then we pass in either a tag
719:15 - or an id or a class name
719:18 - something like that to identify it
719:20 - since we only have one unordered list in
719:23 - this entire document we can just put in
719:26 - ul as the tag name and that's going to
719:29 - when we change the context here
719:32 - and try it again that's going to select
719:34 - this list right here now let's go ahead
719:36 - and assign this to a variable so that we
719:38 - have something to work with
719:40 - so we'll say our list is equal to
719:44 - document.queryselector and then we're
719:46 - grabbing the actual html tag
719:48 - so we press enter now we have a list and
719:51 - that's going to be
719:53 - showing us the html here now obviously
719:56 - this is just a visual representation of
719:58 - the object
720:00 - but if we wanted to figure out you know
720:03 - what is this variable representing you
720:05 - know what does the list variable
720:06 - actually represent we have a way of
720:09 - doing that if you're ever confused what
720:11 - type of variable you're working with you
720:14 - can use this handy property that every
720:16 - node in the dom tree has all right so if
720:20 - we say list dot node type
720:23 - it's going to return us a number all
720:25 - right and we wonder what is that number
720:28 - well if we go to the documentation
720:30 - and we type in
720:32 - node
720:34 - dot node type so if you were to just
720:36 - type in
720:37 - node type you can find this
720:40 - and once you click on it and scroll down
720:41 - to the constants so these type constants
720:44 - this will tell you what type of element
720:46 - you're working with so in this case
720:49 - we got the value of one and that tells
720:52 - us that we're working with an element
720:54 - node and from here we can click element
720:58 - and we can see okay this is the type of
721:01 - node within the dom that we're working
721:03 - with and here are the properties and
721:05 - methods that are available to us
721:07 - so if we were to scroll down and look at
721:10 - the properties of the element
721:12 - we see this property called children all
721:14 - right so if we click on that it's going
721:16 - to say the parent node property children
721:19 - is a read-only property that returns a
721:21 - live html collection
721:23 - which contains all of the child elements
721:25 - of the node upon which it is called
721:28 - all right so let's go back to our
721:30 - document here and we'll say list dot
721:33 - children and you can see that we're
721:35 - getting returned this html collection
721:38 - now from here
721:39 - html collection is of course another
721:41 - thing that we don't understand but we
721:43 - can once again
721:44 - go back to the documentation
721:47 - and click on html collection to see what
721:50 - we're dealing with
721:51 - and from here we can once again go over
721:53 - to the methods and properties
721:56 - and there's this one method called item
721:59 - on the html collection which is going to
722:02 - return us the element at a specific
722:05 - index of that html collection so
722:08 - basically like an array that we've
722:09 - worked with in javascript before but
722:12 - it's not quite an array you can't just
722:15 - come over here and pass in brackets and
722:18 - put in a zero or a one
722:21 - at least i don't think maybe you can
722:24 - um i'm not sure okay maybe you actually
722:27 - can do that but
722:29 - if we put in
722:31 - list.children.item and we select one
722:34 - this is going to select the second item
722:36 - of the list so this is the way that i've
722:39 - always
722:40 - done it in the way that the
722:41 - documentation kind of presents it but it
722:43 - looks like
722:44 - at least in the browser i'm working in
722:46 - the bracket notation works as well
722:49 - from here though
722:51 - we can identify specific elements within
722:54 - our list and then we can set those equal
722:56 - to variables just like we did the list
722:58 - itself so if we come over to the left
723:01 - and we say
723:03 - list item
723:04 - is equal to the second one in the list
723:07 - and we press enter
723:08 - now we have that that entire html
723:11 - element stored in a variable and we can
723:13 - use
723:14 - different properties on it to modify it
723:17 - so if we came over here and we said list
723:19 - item which is representing that second
723:22 - item
723:23 - and we said text content
723:25 - all right this is list item number two
723:27 - but we can set it equal to some
723:30 - new content all right so we did this
723:32 - already but watch what happens in the
723:35 - html document
723:37 - when i press enter it changes the
723:39 - content so this is just kind of showing
723:42 - you how you can you know look at the
723:44 - whole dom tree and you can say okay
723:46 - here's the parent and then i can get
723:48 - children and then i can select one of
723:49 - the child elements of that you know set
723:52 - of children and then from there i have a
723:54 - standalone html element that i can do
723:57 - all sorts of things with i can set event
723:59 - listeners on it i can change the text
724:02 - content and i can do all sorts of other
724:04 - things that are defined by the
724:06 - documentation that i'm working with now
724:08 - once again maybe we don't know what this
724:10 - list item
724:12 - represents what is the node type of it
724:14 - well all we have to do is say node type
724:17 - and we get the answer of 1 once again
724:19 - which means it is an element and from
724:22 - there we just go to the documentation we
724:25 - can just go back up here and just search
724:27 - element
724:28 - and then from here we have all the
724:30 - properties all of the methods all of the
724:32 - event listeners that are available to
724:34 - this
724:35 - specific element that we have stored in
724:37 - a variable all right the next thing i
724:39 - want to do is i want to dig a little bit
724:41 - deeper into this concept of nodes
724:44 - so i've been beating around the bush
724:46 - here a little bit
724:47 - talking about how everything in the dom
724:49 - tree is considered a node but we've also
724:52 - been looking at elements and html
724:54 - collections and stuff like that and it
724:56 - can get very confusing like all of these
724:59 - different interfaces what's going on
725:01 - here like these are all different data
725:03 - types they all have different properties
725:04 - and methods how do i know where to look
725:07 - what has what available to it so on and
725:09 - so forth well before i get into this
725:12 - this is a object-oriented programming
725:14 - concept
725:16 - and that's not something that we've
725:17 - covered yet
725:18 - we may cover it in future videos but
725:21 - this gets into things like classes and
725:24 - inheritance and
725:26 - class methods and static methods and all
725:29 - that kind of stuff
725:30 - and the thing that i want you to
725:33 - recognize right now is that we have all
725:36 - these different interfaces defined by
725:38 - the dom all right so at the very top
725:41 - we have this thing called a node so
725:43 - let's go back to to the node
725:46 - and what i want you to remember is that
725:48 - everything in the dom
725:50 - inherits from this node interface
725:53 - so
725:54 - everything below it so an element um
725:57 - or an html element interface these all
726:00 - inherit up to this node interface which
726:03 - basically means
726:04 - these elements have all of their own
726:06 - properties and methods but they also
726:08 - have access to this you know master node
726:12 - interface as well
726:14 - so if we were to go look at some of the
726:16 - things we have available on this node
726:19 - you can see this append child method
726:22 - that we've been using quite frequently
726:24 - and let's see if we can find a couple
726:26 - other ones um it looks like that might
726:29 - be the only one
726:31 - that we've been using
726:33 - but we also have text content so we've
726:35 - been using that to modify the text
726:38 - within an html element and we have node
726:41 - type we've used that one before
726:44 - let's see what else
726:46 - looks like that's pretty much it but
726:48 - you can see that this node has a bunch
726:50 - of properties and methods that are
726:51 - available to anything below it so in
726:54 - other words if we come back to our
726:57 - document here our html document
727:00 - and we know that we have this unordered
727:03 - list
727:04 - stored in the variable called list all
727:07 - right and we know that list if we say
727:09 - list.nodetype
727:11 - it is of type element which inherits
727:13 - from that you know
727:15 - node interface that basically
727:18 - defines every element
727:20 - from here all we have to do is we say
727:22 - list dot append child
727:24 - and that's going to be a valid method
727:27 - because it's part of the node interface
727:29 - as we just saw
727:30 - and from here we can insert an html
727:34 - element and actually add it to the end
727:36 - of this list but first we have to
727:38 - actually create that element and this
727:40 - will be a good opportunity
727:43 - to show another method that we've
727:45 - already seen but didn't really dig into
727:47 - yet so what i'm going to do here is i'm
727:49 - going to take
727:51 - list
727:52 - dot append
727:55 - child
727:56 - and i'm going to say document dot
727:59 - new
728:00 - or no create
728:02 - element and we're going to make it a
728:04 - list item and this is going to be
728:06 - completely empty no content within it
728:08 - and you can see that we have a new list
728:10 - item showing up at the end of this list
728:14 - and all we have to do now is we say
728:16 - list.children and we select the final
728:19 - element
728:20 - um or no we have to say item and then we
728:23 - select the final element and then we say
728:25 - text content
728:27 - and we can put in
728:28 - some content here and now we have added
728:31 - a new item to the end of the list and
728:33 - modified it so you can see how we can
728:35 - start parsing through and navigating
728:37 - through this hierarchy
728:39 - pretty easily once we get the hang of it
728:42 - now what i want to introduce is
728:43 - something a little bit tricky and this
728:45 - is where we really have to think when
728:47 - we're
728:48 - navigating through the dom because
728:51 - in this html document you can see that
728:54 - we have two p elements that don't have
728:56 - an id and they don't have a class
728:58 - and that basically means we have no way
729:00 - of identifying these in an easy
729:04 - specific way
729:05 - so the first way that we can you know
729:07 - think about identifying
729:10 - one of these elements is by the query
729:12 - selector method and what we're going to
729:14 - try to do here is basically insert
729:16 - another element between these two
729:18 - paragraph tags
729:20 - and if you go to the documentation
729:24 - and you go to the i believe it's the
729:26 - node
729:28 - let's see yeah so the node interface has
729:31 - this method called insert before
729:33 - and what that does is it basically
729:35 - inserts a html node or element that
729:40 - inherits from node
729:42 - before a specific reference element
729:45 - so basically in our case we're going to
729:47 - use this method
729:48 - and we're going to have to figure out
729:50 - how do we identify the second p tag
729:53 - right here
729:54 - now the the way that we would think
729:56 - about doing this is we say document dot
729:58 - query selector
730:00 - and then we grab anything
730:02 - that has a p tag all right and in this
730:04 - case when we press enter we're gonna get
730:06 - the wrong one because the query selector
730:09 - method only gets the first occurrence
730:11 - now what we can do
730:13 - is we can change this to query selector
730:16 - all
730:17 - and what this is going to return us is a
730:19 - node list
730:21 - so unlike an html collection which we
730:24 - got when we looked at the children of
730:26 - that unordered list
730:28 - now we have just a node list which is a
730:31 - slightly different data type if we
730:33 - didn't know what this meant we can just
730:35 - go back to the documentation
730:37 - we can type in node list
730:40 - and let's see what this does all right
730:43 - so node list objects are collection of
730:45 - nodes usually returned by properties
730:47 - such as node.child nodes and methods
730:50 - such as
730:52 - document.queryselectorall which is what
730:53 - we used
730:55 - and let's look at
730:57 - a few more things
730:59 - we have some properties we have the
731:00 - length of it and then we have methods so
731:02 - we have
731:03 - this method called item similar to html
731:06 - collection where we can select something
731:08 - with an index
731:09 - so we can go ahead and do that and we
731:11 - can actually just chain it to the end of
731:13 - this
731:14 - so we'll say item and then maybe we'll
731:16 - pass in item number one
731:18 - and that's going to
731:20 - get the first index so remember it's
731:22 - zero index so the first p element will
731:24 - be zero then the next one will be one
731:27 - so now we have selected the second
731:29 - element and what we want to do is we
731:31 - want to assign that to a variable
731:34 - so we'll say
731:36 - uh p
731:38 - element is equal to that
731:40 - and now we want to use the p element
731:43 - um let's first say
731:46 - node type and we're going to get a type
731:48 - of one which means it's an element type
731:50 - and we know that element is kind of like
731:53 - a
731:54 - child or
731:56 - it inherits from that node type which is
731:59 - the base class
732:00 - so
732:01 - we're getting the node type and so we
732:03 - know that the p element or p
732:06 - lm
732:07 - is going to have this insert
732:09 - before
732:10 - method so let's go ahead and learn how
732:13 - do we use that
732:14 - so if we go back
732:16 - to what we were looking at previously so
732:18 - we've got node.insert before now let's
732:21 - look at the syntax we learned about this
732:23 - in prior lessons how to read this
732:25 - documentation
732:26 - and what we're seeing here is that we
732:28 - have
732:29 - um
732:30 - the parent node right here is going to
732:33 - be the parent of the newly inserted node
732:36 - so we have to ask ourselves what is the
732:38 - parent to the node that we're trying to
732:40 - insert let's go back to our
732:42 - html document
732:44 - and maybe we can even pop up the diagram
732:47 - on the screen and see that what is the
732:50 - parent to an element that we insert
732:53 - between these two paragraph tags in
732:55 - other words what is the parent of one of
732:57 - these paragraph tags well the answer is
732:59 - going to be the main body div alright so
733:03 - we need to pass in
733:04 - a reference to this main body div
733:07 - as that first
733:10 - parent node right here
733:11 - so we know that we have to select that
733:14 - and then we have to put in a new node
733:16 - which is going to represent a new
733:18 - element that we create
733:19 - and then finally a reference node so the
733:22 - reference node as we can see down here
733:24 - is going to be the the node or the
733:27 - element that our new one is going to be
733:30 - inserted before
733:31 - um or
733:33 - we're going to insert it before this
733:34 - element all right so if this is null
733:36 - then the new node is inserted at the end
733:38 - but we don't care about that because
733:40 - it's not so let's go back
733:42 - and the first thing that we need to do
733:44 - is identify that parent so we'll say
733:46 - parent is equal to
733:47 - document.queryselector
733:50 - and then this time since we have a class
733:53 - to select it by we're going to select it
733:55 - with the class notation
733:57 - so we have parent we'll just check that
734:00 - that we're getting the right one
734:02 - and now we just have to say parent dot
734:04 - insert
734:05 - before
734:06 - all right and then we have to make a new
734:09 - node
734:09 - so the new node is going to be a p
734:12 - element so let's go ahead and create
734:14 - that real quick
734:16 - so
734:16 - actually no we
734:19 - yeah we need to create a new element so
734:21 - new
734:23 - p tag is going to be document.create
734:26 - element
734:27 - of type
734:29 - p
734:30 - and then we're going to assign some text
734:32 - content
734:34 - we'll say programmatically added between
734:39 - all right so now we have our new element
734:41 - and finally we're going to take the
734:43 - parent we're going to insert
734:45 - before
734:46 - we're going to pass in the
734:49 - new
734:50 - element that we're putting there and
734:52 - then we're going to
734:54 - reference the element that we want to
734:56 - insert it before so that would be p
735:00 - ln all right so we did that up there
735:02 - before so let's see if this works
735:04 - and you can see that we have program
735:06 - programmatically added this paragraph
735:09 - tag between
735:10 - these two paragraph tags right here
735:12 - so this was a little bit of a tricky
735:15 - example and we kind of ventured out into
735:17 - a method that we
735:19 - definitely had to read the documentation
735:21 - for before we knew how to use it but
735:23 - this just goes to show how we can kind
735:25 - of navigate around the dom by
735:27 - visualizing it as a tree and really
735:30 - understanding what's the parent what's
735:32 - the child what's the sibling and you
735:34 - know what is the interface that i'm
735:36 - working with within the dom all right if
735:38 - you are still watching this video um
735:41 - that's awesome
735:42 - most people are not going to make it
735:44 - through this kind of conversation
735:46 - about the document object model but
735:49 - i will say that if you're at this point
735:51 - you're very confused that is totally
735:53 - okay the purpose of this
735:55 - video in this crash course especially
735:58 - this section about the document object
736:01 - model
736:02 - is not to make you an expert at it the
736:04 - purpose is to expose you to what it is
736:08 - what are some of the things we can do
736:09 - with it and just get you um started and
736:12 - thinking independently of okay if i
736:15 - don't know something how do i go figure
736:17 - it out you know we went through a bunch
736:18 - of examples where i didn't necessarily
736:21 - know how to use these different methods
736:23 - when i didn't know what type of data
736:25 - we're working with but you go to the
736:27 - documentation you search for it and you
736:29 - figure it out
736:30 - so if you're confused that's totally
736:32 - okay keep moving forward we're not going
736:34 - to actually be using the dom all that
736:37 - much throughout the rest of the series
736:39 - but as i said in the beginning
736:41 - it's super important that you understand
736:43 - what it is because it is at the root of
736:46 - every front-end framework that you're
736:48 - going to work with
736:49 - you know if you start working in react
736:52 - you're going to hear something called
736:53 - the virtual dom
736:54 - and if you don't know what the real dom
736:56 - is it's going to be very hard to
736:58 - understand what the virtual dom is and
737:00 - furthermore if you're working with like
737:02 - angular or view vue.js you know these
737:05 - all
737:06 - connect in with this dom api to
737:09 - um basically expose their own api so
737:13 - you're gonna you know have some easier
737:15 - ways of working with this html once we
737:18 - get into
737:19 - front-end frameworks but underneath the
737:21 - surface those frameworks are just
737:23 - connecting in with the same api that we
737:26 - just used in this video so to do a huge
737:29 - recap of html
737:31 - i think of it in two different parts
737:33 - first is going to be the static html and
737:36 - that's going to be just the html like
737:38 - the stuff you see on the page here
737:40 - this is static html and no matter what
737:43 - you do it's not going to change all
737:45 - right now the next part is dynamic html
737:48 - and that is what we see when we start
737:51 - working with the dom and we start
737:52 - manipulating and adding removing
737:55 - changing modifying those kind of things
737:57 - with the existing static html so there
738:00 - are two different parts the first one's
738:02 - pretty simple and i think you probably
738:04 - caught
738:06 - you know how to use it pretty easily but
738:08 - the second one is very
738:10 - confusing and even once you work with
738:13 - this for years it's still going to be
738:14 - something that you're learning over and
738:16 - over and over again
738:17 - and perfecting along the way but what i
738:20 - really want you to take away is that we
738:21 - can model an html document
738:25 - in a predictable way and then we can
738:27 - write a specification called the
738:29 - document object model
738:31 - and allow javascript to connect in with
738:34 - that api to actually modify the static
738:37 - html now the very last thing before we
738:40 - get into our lesson
738:42 - code challenge
738:43 - is going to be semantic html and i'm not
738:47 - going to spend a whole lot of time here
738:49 - but
738:50 - when we first went through it at the
738:51 - beginning of this crash course we were
738:54 - talking about the most simple elements
738:56 - possible so we've got divs we've got
738:58 - paragraph tags images
739:00 - inputs lists all of those kind of things
739:04 - with the new html5 spec
739:06 - the
739:08 - the new thinking on html is that you
739:10 - know consistent with the concept that we
739:13 - want to use it for structure
739:16 - we also want to use it for intent so
739:18 - what do we intend to use these different
739:20 - elements for
739:22 - are we trying to section off a part of
739:24 - the web page are we trying to make a nav
739:27 - bar are we trying to make a footer you
739:29 - know normally you would just put all of
739:31 - this into
739:32 - uh div
739:34 - elements so you can make a header and a
739:37 - nav bar in a you know blog section and a
739:40 - sidebar and a footer you can make all of
739:42 - those things with just divs
739:45 - but in the new html5 spec
739:47 - it's you know you're basically supposed
739:49 - to plug into some of the new tags that
739:52 - they have available
739:54 - and in this case instead of using divs
739:56 - for all of these different um features
739:59 - of your web page you should be using a
740:02 - nav bar um so the nav
740:04 - tag and for your section so like the
740:06 - blog section that should use a section
740:09 - tag as well as the
740:11 - um the sidebar and stuff like that
740:14 - and then you have this tag called main
740:17 - which represents the main content of the
740:19 - page and then you have an article tag
740:22 - which might represent a single blog post
740:25 - and then finally you have a footer tag
740:27 - which obviously represents the footer so
740:29 - all of these give more semantic more
740:32 - meaning to the intent of how you're
740:35 - trying to use your html and it's not
740:38 - super important for you starting out but
740:40 - i want you to understand
740:42 - that it is out there and when you see
740:45 - other people writing html and people
740:47 - that are really paying attention to best
740:49 - practices you'll see those different
740:51 - elements pop up but remember you can
740:54 - always look at the documentation if you
740:56 - ever have a question about a certain
740:58 - type of html tag
741:00 - go to the documentation and type it into
741:02 - the search bar and read about it that's
741:04 - the only way and the best way to learn
741:07 - as you're reading through other people's
741:09 - code all right this has been a pretty
741:12 - long
741:13 - html crash course but unlike some like
741:17 - shorter crash courses i really wanted to
741:20 - walk you through my line of thinking and
741:22 - help you be more independent when
741:24 - thinking about html in the document
741:26 - object model so hopefully this was
741:29 - informative and now i have a challenge
741:31 - for you that's going to really test you
741:34 - this is a tough one but
741:36 - i'll go ahead and solve it with you on
741:38 - video after you've tried it yourself and
741:41 - hopefully by doing so you're going to
741:43 - learn a lot about you know how do we
741:45 - reason through some of these different
741:48 - concepts and how do we take our static
741:50 - html and make it dynamic and bring
741:52 - something to life
741:54 - so what you see on the screen i showed
741:56 - it to you before but this is what we're
741:58 - going to create where we basically have
742:00 - a random generator for memes and jokes
742:05 - and random quotes
742:07 - and then riddles so we can reveal the
742:09 - answer
742:10 - and this will be a really cool project
742:12 - that i think you'll be excited to share
742:14 - with your network and
742:16 - be sure to tag me on twitter with it 100
742:19 - days of code
742:21 - is the hashtag that you want to use
742:23 - but i'm really excited to dive into this
742:25 - so in the next video we're going to be
742:27 - solving it but i i recommend that you
742:29 - first try it on your own and see how far
742:31 - you can get so the link to the code pen
742:34 - starter pack is in the description and
742:37 - what you're going to be working with is
742:39 - basically uh this right here so let me
742:42 - go back to the starter
742:46 - portion all right so we have some code
742:49 - already written for you so i've already
742:51 - put some buttons in here and i've
742:53 - already linked up some of the events
742:56 - that are going to be called and then
742:58 - i've uh made some template functions
743:01 - for you that are going to correspond to
743:03 - those click events
743:05 - and then finally i have all this random
743:07 - data down here so a bunch of random
743:09 - quotes and
743:10 - uh meme urls and stuff like that and
743:13 - then then i have a helper function
743:16 - called get random data where in each of
743:19 - the methods that you're going to
743:20 - implement yourself
743:22 - it's already grabbing a random piece of
743:24 - data that you just need to figure out
743:26 - how to
743:27 - put into the html document and display
743:30 - it in the right spot once again i'm
743:32 - leaving a link into the in the
743:34 - description so you can go through and
743:36 - see like what are the user stories so
743:38 - user stories are basically like what
743:40 - should a user be able to do when they're
743:42 - looking at this application and so i've
743:45 - got those written out i also have a few
743:46 - hints to help you out um just point you
743:49 - in the right direction on this and then
743:51 - once you've tried it watch the next
743:52 - video of this series and we will solve
743:55 - it together
743:58 - welcome to the lesson 7 code challenge
744:01 - and this is going to be basically an
744:03 - html plus javascript challenge where
744:06 - we're going to use the dom
744:08 - to basically loop in our javascript into
744:11 - our html and bring it alive into a
744:13 - dynamic
744:15 - web page that's going to basically
744:16 - generate random memes jokes quotes and
744:19 - riddles
744:20 - so if you haven't seen this before just
744:23 - you can click these buttons on the right
744:25 - and it should generate something random
744:27 - every time we click it
744:29 - and we can do jokes and quotes and
744:32 - riddles and
744:33 - you have to reveal the riddle answer by
744:36 - clicking this button right here
744:38 - so
744:39 - this is going to be a really cool
744:40 - challenge you can obviously see that
744:42 - there are some styles already applied to
744:44 - it and since we haven't covered css yet
744:48 - in this
744:49 - full stack roadmap series
744:51 - that's going to be the next lesson i've
744:53 - done this for you so i've already wired
744:56 - up all the css styles and all you have
744:58 - to do
744:59 - is write the html and the javascript
745:02 - to make this thing come to life so let's
745:05 - go ahead and take a look at some of the
745:07 - user stories so this is from the blog
745:09 - post that i
745:11 - wrote here for this lesson
745:13 - and just as a recap a user story is
745:16 - something that we use quite often in
745:18 - programming to come up with requirements
745:20 - a good example of a common user story is
745:24 - every time a user enters
745:26 - his email
745:28 - and password and clicks login it the
745:31 - user should be you know dropped into
745:34 - their home page within the app you know
745:36 - that's a basic user story that just says
745:38 - okay when the user does this this
745:40 - happens and we have some user stories
745:43 - defined for this code challenge
745:46 - the first one is a user should be able
745:48 - to click buttons on the right side of
745:50 - the screen to generate random memes
745:52 - jokes quotes or riddles so as we saw we
745:55 - can click these buttons and get
745:57 - something random
745:59 - obviously going in the correct location
746:03 - only one piece of content so this is the
746:05 - second one only one piece of content
746:07 - should show at a time
746:08 - so for example if the user clicks show a
746:10 - meme and there's a quote already showing
746:13 - the application should remove the quote
746:14 - and show a random meme
746:16 - so as you see every time i click a new
746:18 - button this content right here is going
746:21 - to disappear and it's going to replace
746:24 - it with nothing and then generate a
746:26 - different type of content so right now
746:29 - we have a riddle if we replace it with a
746:31 - joke
746:32 - that goes away down here and our joke
746:34 - shows up up here so that's another
746:36 - requirement
746:38 - the third one content should be
746:40 - displayed under the appropriate heading
746:43 - so in other words if i click tell me a
746:45 - joke the joke needs to show up under
746:47 - tell me something funny rather than i
746:50 - want to riddle or something like that
746:52 - and then
746:53 - when showing a random riddle the answer
746:55 - should never be revealed
746:57 - before the user explicitly clicks to
746:59 - reveal the answer
747:01 - so when i click riddle
747:03 - you're going to see that i get the
747:05 - riddle but i don't get the answer and i
747:07 - have to click this reveal riddle answer
747:10 - in order to get the answer itself
747:12 - the next one is if a user clicks reveal
747:16 - riddle answer and there is no riddle an
747:18 - alert should show letting them know
747:20 - so in other words
747:22 - there's no riddle populated down here
747:24 - and if i click reveal riddle answer
747:27 - i get an alert up here at the top of the
747:29 - screen saying there's no riddle forward
747:31 - to show an answer for
747:33 - and then likewise if a user clicks
747:35 - reveal riddle answer and the answer is
747:36 - already revealed an alert should let
747:38 - them know that it's already there
747:40 - so let's go to a riddle let's reveal it
747:43 - and then let's click this again
747:45 - and the riddle
747:46 - is going to say or it's going to say the
747:47 - riddle answer is already exposed all
747:50 - right so those are the requirements and
747:52 - of course i gave some hints here
747:54 - the div element within
747:57 - with a unique id or class name can be a
747:59 - great way to establish a container for
748:01 - future content so i'll show you how that
748:03 - works
748:05 - um we also need to use the html element
748:08 - dot hidden property so
748:10 - that has to do with hiding and showing
748:12 - that riddle answer
748:14 - it says there's no perfect solution
748:17 - there's obviously a hundred solutions to
748:19 - this
748:20 - and then we got some startup code
748:22 - all right so here is the starter code
748:25 - that we're working with
748:26 - and we have to basically take this which
748:29 - only has some buttons that don't do
748:30 - anything yet
748:32 - and we have to turn it into this a
748:35 - working
748:36 - content generator so as we solve this
748:38 - i'm going to try to walk you through my
748:41 - thought process a little bit
748:43 - but i'm not going to spend
748:45 - uh in
748:46 - overly detailed amount of time on each
748:49 - of the components like the main purpose
748:51 - of this is to give you the solution um
748:54 - not to basically build an entire app and
748:56 - think through every last detail of it
748:59 - so let's go to our starter and we'll
749:03 - keep this one up so that we have a
749:04 - template to look at of what we're trying
749:06 - to do
749:07 - and then from the starter let's go ahead
749:10 - and get acquainted with what is here
749:11 - already
749:12 - so we'll start in the html section
749:16 - you can see in this html section we have
749:18 - let's zoom out just a little bit
749:21 - we have
749:22 - some instructions so
749:25 - notice how we've used semantic html here
749:27 - so at the end of the previous video we
749:29 - talked about semantic html how html
749:32 - should show intent
749:34 - and what we've done here is we've
749:35 - created a main
749:38 - tag which is going to say here's the
749:40 - main content area
749:42 - and then we have uh one section which is
749:45 - going to be the content this is the
749:47 - empty
749:48 - area right here and then we have another
749:50 - section called sidebar which is where
749:52 - all the actions are
749:54 - okay so that's what we mean by semantic
749:57 - html
749:59 - and it looks like everything has been
750:01 - implemented for us so we have our
750:03 - actions our buttons and our buttons are
750:05 - connected up to click events
750:08 - that are down in the javascript section
750:10 - so our content what we're gonna do is
750:13 - add it right here in the
750:15 - section with a class called content
750:18 - all right so
750:19 - then of course we have css this is just
750:22 - styling the whole web page for us but
750:24 - this is not required since we haven't
750:26 - really talked about how to use css yet
750:29 - so this should just automatically work
750:30 - for us
750:31 - and there's no action required by us uh
750:35 - in that
750:36 - and then finally we have javascript all
750:38 - right so this one's where some of the
750:40 - tricky part is going to come in where
750:42 - we're going to be working with the
750:43 - document object model as you can see we
750:45 - have some templated functions and we
750:48 - have our to-do items
750:50 - so with each of these functions we need
750:52 - to show a random you know piece of
750:54 - content in the correct location and
750:57 - never show more than one at a time so
750:59 - similar to our
751:00 - user stories this is just reiterating
751:03 - that
751:04 - so we have a show meme function which is
751:06 - going to be connected up if we look at
751:09 - our html
751:10 - it's connected up with this show meme
751:13 - button all right so if we were to
751:16 - go down here at the bottom of this
751:18 - function and just console.log
751:21 - is working
751:23 - all right so we've got that connected up
751:26 - and now we just click show meme
751:28 - and if we open up the console so down at
751:31 - the bottom left
751:32 - and we see is working we know that this
751:34 - has been wired up correctly so
751:37 - lucky for us we've got this wired up
751:39 - already no work to be done there all
751:41 - right so we've got a show meme then we
751:44 - have show joke which is um wired up to
751:47 - this button
751:48 - and then that does the same thing for
751:51 - quote and riddle for the next two
751:53 - buttons and then finally the reveal
751:55 - answers function is going to be wired up
751:58 - to this reveal riddle answer button
752:01 - all right and obviously this is styled a
752:03 - little bit differently but it's still a
752:05 - button
752:06 - html tag
752:08 - and then at the bottom
752:10 - you can see a bunch of code that i wrote
752:12 - already for you which is just a bunch of
752:15 - content that we can use for randomly
752:17 - generated content and then it has a
752:19 - couple of helper methods so it has a
752:23 - data object
752:24 - it gets a random number and then it uses
752:27 - those two things
752:29 - in this method right here to get random
752:32 - data so basically what we do is we pass
752:34 - in
752:35 - we have a parameter called type and if
752:37 - we pass in memes we'll get a random meme
752:40 - and if we pass in
752:42 - riddles we'll get a random riddle
752:44 - and you can see that i've already hooked
752:46 - that up
752:47 - to these uh functions that are wired up
752:50 - to the buttons
752:51 - so
752:52 - as you can see we have for the meme one
752:55 - we have already assigned a variable to
752:58 - this random meme url and if we were to
753:01 - just console.log
753:03 - what we're getting here
753:06 - and then we press
753:08 - show a meme
753:09 - um hold on
753:11 - so show a meme let's go to the console
753:14 - and you'll see that we get a link
753:17 - to an image
753:19 - which is going to represent the meme
753:21 - all right so
753:22 - that's the overview of what we're
753:24 - working with all we have to do is write
753:26 - some html and then
753:29 - finish these functions that have already
753:31 - been templated out for us i think the
753:33 - first thing that we'll do is probably
753:35 - the easiest so in our template
753:38 - you can see that we have these
753:40 - headings here so this output looks like
753:43 - an h2 heading
753:46 - and these ones down here look like maybe
753:48 - h3 headings or something like that
753:51 - so let's go ahead and um
753:54 - put those in there so where it says your
753:56 - html code goes here
753:58 - let's make an h2 so all you have to do
754:01 - in codepen it's pretty easy is type the
754:04 - um
754:05 - type the tag that you want to make and
754:07 - then press tab
754:09 - and it creates that element for you
754:11 - so we'll go ahead and type output and
754:14 - see what we get
754:17 - looks like we're getting the correct
754:19 - element there and now we have to go to
754:21 - the headings
754:23 - so we want
754:24 - in the next one we want
754:26 - an h3
754:28 - and we want programmer memes
754:33 - so far so good we're looking okay
754:36 - tell me something funny so this will be
754:38 - jokes so another trick you can use in
754:40 - codepen and also visual studio code once
754:43 - we start working with it
754:44 - um if you go to the end of a line and
754:46 - press ctrl c and then press ctrl v
754:49 - you'll get the same line
754:52 - copied down
754:53 - so let's do that one more time and then
754:56 - replace the text within it so give me
754:58 - some wisdom and i want a riddle
755:02 - actually we need one more
755:04 - so we've got programmer memes
755:06 - oh we missed the tell me something funny
755:08 - so let's do that real quick
755:11 - all right so we've got our output and
755:14 - all of our sections defined now if you
755:16 - remember in the user or in the hints
755:19 - if we go back here and look at the hints
755:21 - it says the div element with a unique id
755:24 - or class name can be a great way
755:26 - to establish a container for future
755:29 - content
755:30 - so what i mean by that
755:32 - is if we go here and we look at these
755:34 - headings we obviously have to insert
755:37 - some sort of html element probably a
755:40 - paragraph tag
755:41 - after each of these now how do we you
755:44 - know how do we know where to put it like
755:47 - how do we select each of these headings
755:50 - and have a container to put it after
755:52 - them well something that i
755:55 - think is smart to do is create a div
755:58 - element
755:59 - which is going to act as that container
756:01 - for all of our future paragraph tags
756:03 - which will have or paragraph or image
756:06 - tags which will have the content itself
756:09 - so let's see what we're going to do here
756:11 - so i think what we want to do is after
756:13 - each of these headings instead of trying
756:16 - to
756:17 - dynamically figure out where to put
756:20 - these different pieces of content let's
756:22 - be explicit about it so let's make a div
756:27 - so we'll type div and we want to give it
756:31 - a class or an id because we want to be
756:33 - able to identify
756:36 - this individual div as the container
756:38 - that we want to put the content in so
756:41 - for this one let's just give it a class
756:43 - and we'll call it
756:45 - meme
756:46 - content all right so we'll enter down
756:50 - and basically what we want to accomplish
756:52 - with the javascript
756:54 - is we want to identify this div and then
756:58 - we want to insert our content within
757:00 - that container that's already sitting
757:02 - there ready
757:03 - and waiting for us now we could
757:05 - programmatically generate a div like
757:07 - this but it just would be a lot of extra
757:10 - work unnecessary work and it would
757:12 - require a lot more code so let's do this
757:14 - with all of the different sections
757:17 - so we'll go down here
757:21 - and now let's just replace these classes
757:23 - because we want unique identifiers for
757:25 - our javascript to basically be able to
757:28 - query so this one will be
757:31 - joke's content or joke content we'll
757:34 - stay consistent here
757:36 - and then quote content
757:38 - and finally
757:40 - riddle
757:41 - content
757:42 - all right so
757:44 - these should be able to be selected by
757:46 - javascript very easily all we would need
757:48 - to do
757:49 - let me save this real quick
757:51 - all we need to do is open up the console
757:54 - let me
757:56 - see if i can get this
758:00 - all right so the console looks like
758:01 - we're in the right javascript context
758:03 - and all we need to do is
758:05 - document.queryselector
758:07 - and then since we have classes here as
758:10 - the attribute we need to use the class
758:12 - selection syntax which is the dot
758:15 - preceding the name of the class
758:17 - so if we wanted to select this container
758:20 - right here called meme content
758:23 - we can just type in dot meme content
758:26 - and we should get that div all right so
758:28 - from there
758:29 - all we have to do if we want to insert
758:31 - something in it is we save it in a
758:33 - variable so we'll maybe say a container
758:38 - and then from there we say container dot
758:40 - append child and then this is where we
758:43 - pass in our generated html element
758:47 - so in this case let's just go ahead and
758:49 - create something
758:50 - for that this is just practice to
758:53 - understand how we're solving this
758:54 - problem we're not actually doing
758:55 - anything yet
758:57 - so we'll say new element is equal to
759:00 - document.createelement
759:02 - and then maybe we want to put in
759:05 - um let's let's go ahead and practice
759:07 - this with the meme container so we need
759:09 - to put in an image
759:10 - so to do that we type in image tag all
759:13 - right so we're going to create that
759:14 - element and then we're going to use
759:16 - something called the set attribute
759:18 - property all right so
759:20 - in order to
759:22 - create an image element we know how to
759:24 - do that so let's go ahead and practice
759:26 - that here
759:27 - if we say image it's going to give us
759:31 - a source attribute and an alt attribute
759:34 - we're going to ignore this alt attribute
759:36 - because it's not like totally necessary
759:38 - and then from here we can pass in a url
759:41 - to an image and that will display it
759:45 - within the browser here so let's just go
759:47 - ahead and go down to our data here and
759:51 - we've got this array of memes so let's
759:54 - just grab one of the urls just to test
759:56 - it for a second
759:57 - and paste that into the source attribute
760:00 - of our image
760:01 - and you can see that our image is
760:04 - coming in there nicely and i've actually
760:06 - written some css if you were to look
760:09 - in the css portion i've actually
760:12 - selected all images here and i've said
760:14 - that the max width is going to be 350
760:17 - pixels so it's already going to come in
760:20 - nicely for you you don't have to worry
760:22 - about doing that
760:23 - so this is basically what we want to
760:25 - insert into that
760:27 - specific programmer memes area and if we
760:30 - wanted to do that we've already got our
760:32 - new image element
760:34 - and all we have to do here is say new
760:36 - element
760:37 - dot set attribute all right so if we
760:40 - were to if we didn't know anything about
760:43 - this this is how we'd figure it out so
760:45 - first we say new element dot
760:47 - uh node type
760:50 - so we talked about this in the prior
760:52 - video looks like we lost the context so
760:55 - we have to go back to the codepen
760:57 - context let's see if that
760:59 - still has this
761:01 - okay we got to redefine this real quick
761:03 - so
761:09 - first let's select the container so we
761:11 - just got to redo this because it lost
761:13 - the context that we were working in so
761:16 - now we have the container which is the
761:17 - meme content
761:19 - and then we have to create the new
761:21 - element
761:22 - alright so we created an image and now
761:24 - we just say new element dot node type
761:27 - and it's going to return us one
761:29 - now in the mdn documentation
761:33 - let's go to the mdn documentation real
761:35 - quick
761:35 - and let's type in node type this is a
761:38 - method we learned about prior in prior
761:41 - videos and you can see in the node
761:43 - constant or the node type constants a
761:45 - value of 1 represents an element so
761:48 - let's click on that element and then we
761:50 - come down and we can see that within the
761:53 - element there are methods and one of
761:55 - those should be
761:57 - if i'm remembering this correctly is set
761:59 - attribute so if we click on set
762:01 - attribute it says that we give it the
762:04 - name of the attribute we're wanting to
762:06 - set and then the value we want to set
762:08 - so in this case if we were trying to
762:12 - set the
762:13 - source attribute of an image
762:15 - we just have to say new element dot set
762:19 - attribute
762:20 - source is the name of the attribute
762:22 - we're setting and then you know maybe
762:24 - we'll paste in that link that we had
762:26 - earlier so that will be the value of the
762:28 - source so we press enter
762:30 - and now what we can do is basically take
762:33 - this new element that we have
762:36 - and we take the container
762:38 - and we append
762:39 - child we use the append child method to
762:41 - pass in that new element
762:43 - and boom we have a new image showing up
762:47 - in that section that we want it to show
762:49 - up in so like i said we haven't actually
762:51 - done anything this is just practicing
762:53 - and figuring out
762:54 - in the live console like okay how do we
762:57 - actually reason through this what
762:58 - methods are we going to use all that
763:00 - kind of stuff
763:01 - now we should be able to go down into
763:03 - the javascript and implement
763:06 - some of these functions to do exactly
763:09 - this
763:09 - all right so let's close this out here
763:11 - we don't need this for for a little bit
763:14 - and then let's let's refresh the page
763:16 - because we want a clean slate here
763:19 - um it looks like
763:21 - actually not sure why this is still
763:23 - there
763:24 - um let's see
763:28 - oh that's right because we had put this
763:30 - in here already okay
763:32 - let's get rid of that we don't want
763:34 - anything to start off we want this to be
763:36 - empty
763:37 - and now let's come down to our templated
763:41 - methods and in this case we want to show
763:44 - a mean
763:45 - right now when we click the button
763:47 - and we open up the console it's going to
763:49 - print a random meme url
763:53 - and we know that this url should be set
763:55 - equal to the source attribute of an
763:58 - image tag or image html element
764:02 - so
764:03 - we also know how to create that so let's
764:05 - go ahead and start writing this method
764:08 - the first thing we need to do is grab
764:10 - the container that we want to put it in
764:12 - so we will say container will be equal
764:15 - to document.queryselector
764:17 - and then we need to pass in meme
764:21 - content all right
764:22 - so we should have the container selected
764:25 - you could obviously test that if you
764:26 - wanted to
764:28 - i think if we just pass it into
764:30 - console.log
764:32 - we should be able to do that
764:36 - and show a meme and we get the correct
764:39 - container so we're doing good so far
764:42 - from here we need to
764:44 - say new image is going to be equal to
764:46 - document.create
764:51 - it's a create element or new element i
764:52 - can't remember
764:54 - okay so it is create element
764:57 - and we want an image element
765:00 - now we just need to set the
765:03 - attribute so we want to set the source
765:05 - attribute and what do we want to set
765:07 - that equal to well we want to set it
765:09 - equal to a url
765:11 - and we happen to have that already so we
765:13 - just drop in the random meme url
765:16 - and that should set the attribute for us
765:19 - and then finally
765:21 - we come down here at the bottom and we
765:23 - say container that append child and we
765:26 - pass in our new image
765:28 - okay
765:29 - so let's go ahead and save our our pen
765:32 - here
765:33 - and when we click this show meme we
765:35 - should get an image populating in the
765:37 - right section
765:39 - and we do all right so
765:41 - if we click it again
765:43 - it should put another image in there
765:45 - after this
765:47 - and it does
765:48 - and then another one
765:51 - and we could keep going with that but
765:53 - obviously the instructions one of the
765:55 - user stories is saying if there's
765:57 - already something there delete it and
765:59 - replace it with the new one
766:01 - so we have to figure out how to do that
766:03 - and a good way to do that is by using an
766:06 - if statement
766:07 - so if we come down to our method here of
766:10 - show meme
766:12 - we need to ask before we
766:14 - insert that into
766:16 - the container we need to say if
766:19 - the
766:21 - if there's an existing image there so
766:23 - how do we do that
766:25 - one way that i can think of
766:27 - is if we take
766:30 - is we'll just say set a variable is
766:33 - image
766:34 - equal to
766:36 - container dot query selector and then
766:39 - we'll look for an image so basically
766:41 - what this is doing is it's saying this
766:44 - container which represents this div
766:46 - right here
766:47 - if we grab that container and within it
766:50 - we look for an image element
766:53 - and if we find something
766:54 - then this value is image is going to
766:57 - represent the actual html element
767:01 - if we don't find anything
767:03 - then it's going to return null so we're
767:05 - going to get nothing
767:07 - so basically
767:08 - what we have to do is we say if
767:11 - is image so if that's a truthy value
767:15 - which should it should be truthy as long
767:17 - as it comes back with an image
767:19 - then we need to clear the contents of
767:21 - this container so a way that we can do
767:24 - that is by using the inner html property
767:27 - and if we go to the mdn documentation
767:30 - i believe this exists on the node
767:34 - interface so let's take a look
767:39 - looks like it's not here so let's search
767:42 - for that so inner
767:44 - html
767:46 - okay so it's on element so on each html
767:49 - element there is this property called
767:52 - inner html and it says the element
767:54 - property
767:55 - inner html gets or sets the html markup
767:59 - contained within the element
768:01 - so a quick trick
768:03 - this is something that i just have
768:05 - learned over time you wouldn't
768:06 - necessarily know it from this
768:07 - documentation
768:08 - is you can pass in an empty string to
768:11 - this property to clear all the html from
768:15 - a specific container
768:17 - so if there's an image already there
768:20 - we're going to say the containers inner
768:23 - html is equal to an empty string
768:26 - okay so basically what we're going to do
768:28 - is every time we click this button
768:31 - we're going to generate a random meme
768:33 - url then we're going to create a new
768:36 - image
768:37 - we're going to check if there's an
768:38 - existing image and if so clear it and
768:40 - then we're going to insert the new image
768:43 - so basically this is a another way of
768:45 - saying let's replace whatever's there
768:48 - so let's try it out
768:49 - so we got our first image here and
768:53 - if we click this again
768:57 - it should replace it
768:59 - excellent
769:00 - so we're replacing it correctly we've
769:02 - got this in the right spot and for the
769:05 - rest of the methods
769:06 - we pretty much should be able to
769:08 - implement the same type of logic
769:12 - and implement it for all the rest of the
769:13 - buttons
769:14 - so let's get rid of this to do because
769:16 - we have done it we have implemented that
769:19 - correctly
769:20 - now one thing i want to do before we
769:24 - get any further
769:25 - is implement this clear all method now
769:28 - the reason i want to do this is because
769:30 - it's basically
769:32 - since we see that we have buttons that
769:34 - kind of do the same thing we don't
769:36 - really need to write this logic right
769:38 - here
769:39 - every single time all we need to do
769:42 - is we need to write one method that
769:44 - looks at all of the containers here
769:47 - and it clears all of the containers
769:49 - before we replace it with new content
769:52 - so in order to do that let's go ahead
769:54 - and take some of this code here
769:57 - so we'll
769:58 - take that out of there and put it in the
770:01 - clear all
770:02 - so let's rename this variable and we'll
770:05 - say
770:06 - meme all right
770:07 - and
770:08 - let's go ahead and grab this container
770:12 - so actually this is not valid code we
770:15 - need to type document.queryselector
770:18 - and we need to grab the meme content
770:20 - container
770:21 - so
770:22 - we'll say meme container is equal to
770:25 - that and this should represent
770:28 - this div right here now we can do the
770:31 - same thing for the other divs so the
770:33 - joke content and the quote content and
770:35 - the riddle content
770:37 - so i'll show you what we're gonna do
770:38 - here like this will make sense in a
770:40 - second so just bear with me
770:42 - so we're going to copy this down four
770:44 - times
770:45 - we're going to say this one will be a
770:48 - joke container
770:50 - this one will be
770:51 - a quote container
770:53 - and this one will be a riddle container
770:55 - and then we of course have to replace
770:57 - this with
770:59 - joke
771:00 - and
771:01 - quote
771:03 - and riddle all right so in this
771:07 - javascript that we just wrote we are
771:09 - basically selecting each of these
771:11 - containers that should have the content
771:14 - that we're putting in
771:16 - and from here all we have to do is set
771:18 - the inner html to an empty string and no
771:21 - matter if there's something there or
771:23 - there's nothing there it doesn't matter
771:25 - we're just going to clear it no matter
771:26 - what
771:27 - so we'll say meme container dot inner
771:30 - html equals an empty string
771:33 - and we'll do that four times over and
771:35 - just replace these variables with the
771:37 - correct one
771:43 - all right so this clear all method is
771:46 - going to look in all of the different
771:47 - sections
771:49 - and it's going to clear them no matter
771:50 - what's there
771:52 - so all we have to do down in this show
771:54 - meme thing is before we append a new
771:57 - image we just have to call the clear all
772:01 - method
772:02 - so that should clear everything out so
772:04 - let's try it out let's show a meme and
772:06 - then click it again and it looks like
772:09 - it's clearing it and putting in the new
772:10 - one and that's going to happen for all
772:13 - of these because we're just going to
772:14 - pass this clear all method into each of
772:17 - these template functions
772:19 - okay so the next one is show a joke all
772:22 - right so we've already got a random joke
772:25 - text but let's go ahead in console.log
772:28 - the random
772:30 - joke text just to see what we're working
772:32 - with
772:34 - so let's click the button make sure it's
772:36 - working and let's open up the console
772:39 - all right it looks like we're getting a
772:41 - string that represents the joke so in
772:44 - this case we want to insert a paragraph
772:46 - element and put this text content in it
772:50 - alright so the this should be rather
772:52 - simple
772:53 - so we'll say new paragraph
772:57 - is equal to
772:59 - document.createelement and we'll put in
773:01 - a p tag
773:02 - and then we say p dot text content is
773:05 - equal to the random joke text so i'm
773:08 - taking the variable here which should be
773:10 - equal to a random joke and i'm assigning
773:13 - it to the new p element that i just
773:15 - created
773:16 - and then finally i need to
773:19 - clear all because i need to clear
773:20 - anything that's there already
773:22 - and then i need to insert it into the
773:25 - container so
773:26 - before we wrote out a different variable
773:29 - that selects the container and then we
773:31 - did it in two steps but we can basically
773:33 - just do this in one step so we can say
773:36 - query selector in this case we want to
773:38 - get the joke content
773:41 - i can't type
773:43 - and then at the end we can just chain on
773:46 - this append child and pass in the new
773:49 - paragraph element
773:51 - let's see if that works by clicking tell
773:53 - me a joke and it's saying p is not
773:56 - defined
773:58 - that's because i for some reason
774:01 - uh just said p instead of new p
774:04 - so that should work better this time
774:07 - all right so we're getting um some
774:09 - content here now this will be the real
774:12 - test if i click show a meme
774:14 - does this content get erased and a meme
774:17 - show up that's what should happen
774:19 - so let's show a meme
774:21 - and we see that in the jokes
774:24 - section there's nothing there which is
774:25 - great so let's tell another joke and you
774:28 - can see that we have a joke but no meme
774:31 - so far everything's working great
774:33 - so let's go to the next method that we
774:35 - need to implement so this will be a
774:37 - quote
774:38 - all right so let's go ahead like we've
774:41 - been doing will console.log the random
774:43 - quote
774:45 - and we'll click the button
774:47 - and you can see in the console we get an
774:50 - object with two keys or two properties
774:53 - we have the author property and the
774:54 - quote property both which are strings
774:57 - so what we want to do here is we want to
775:00 - display a p or a paragraph
775:03 - element
775:04 - and then another paragraph element right
775:06 - below it with the author
775:08 - so let's do that
775:10 - so we'll say
775:12 - the quote itself is going to be
775:14 - document.createelement
775:18 - and that will be a paragraph element
775:21 - and then we'll say the author
775:23 - is going to be
775:25 - document.createelement and that will
775:26 - also be a p element
775:28 - now for the text content the quote will
775:31 - be pretty straightforward we just say
775:34 - quote.textcontent equals the random
775:36 - quote
775:37 - and then we need to actually get the
775:38 - quote property which is the quote itself
775:41 - now for the author
775:43 - text content
775:45 - we need to grab the random quote again
775:48 - and grab the author property but we also
775:51 - want to put that little dash
775:53 - before it so all we have to do is make a
775:56 - string with a dash and a space and then
775:59 - we concatenate that with the
776:01 - um the author name all right so we've
776:04 - got our text content
776:06 - or
776:07 - let's see if we did this right so we got
776:09 - our quote and then our author
776:11 - stored in 2p elements
776:14 - so now all we should have to do
776:16 - is first clear all so we clear
776:18 - everything out and then we come down
776:21 - here and we say document.queryselector
776:25 - we want to grab the quote
776:28 - content container
776:30 - and then we append
776:32 - child and we put in the
776:35 - first we want to put in the quote
776:37 - and then the next thing we want to do
776:40 - is grab the same container and put in
776:42 - the author
776:43 - so let's go ahead and run this
776:46 - looks like we got a random quote working
776:48 - just fine
776:49 - but this is kind of messy i want to
776:51 - refactor this a little bit
776:53 - we'd never want to write the same thing
776:55 - two lines in a row that's just bad
776:57 - practice
776:58 - so what we want to do is we want to
777:00 - store the container like we did before
777:04 - in a variable
777:05 - so let's put this right here
777:09 - so now we have the container in that
777:12 - container variable
777:13 - and now we just have to
777:15 - call
777:16 - container.appendchild for both of these
777:20 - and this should work
777:22 - still
777:23 - awesome so now we can do jokes we can do
777:26 - quotes and we can do memes and they all
777:28 - kind of clear each other out when
777:31 - a new piece of content is generated
777:34 - now the last one is going to be the
777:35 - hardest one and that's because we only
777:38 - want to show the riddle itself but we
777:40 - don't want to show the answer to it
777:43 - until this reveal riddle answer is
777:45 - clicked
777:47 - so let's mark off our to-do's here we
777:50 - are done with the show quote
777:52 - we are done with the show joke
777:55 - and we're done with the clear all method
777:57 - so we're we're doing pretty good here
778:00 - and finally we have to show the riddle
778:01 - so i think what we're going to do is
778:03 - let's first see what we're getting it
778:05 - already shows us i already wrote in a
778:07 - comment that says this is what you
778:09 - should get but let's just verify it
778:12 - always good practice
778:14 - so console.log random riddle and let's
778:17 - click the button
778:18 - we get our random riddle with a answer
778:21 - prop and question prop
778:23 - so
778:24 - let's let's go ahead and
778:27 - um be explicit about this and i'm going
778:29 - to show you
778:30 - a little es6 or the latest spec of
778:33 - javascript i'll show you a trick on how
778:35 - to
778:36 - destructure i believe that's the correct
778:39 - term for it but we're going to
778:40 - destructure properties off of this
778:42 - object so all we have to do is we say
778:45 - const and then we put these little
778:47 - brackets here
778:48 - and then we pass in the properties that
778:50 - we're looking for so we want a question
778:53 - and we want an answer
778:55 - and that will be set equal to the random
778:57 - riddle that we're getting
778:59 - so now we should be able to console.log
779:02 - a variable called question
779:04 - as well as a variable
779:06 - called
779:08 - answer right here so let's see if that
779:10 - is true
779:12 - all right so we got these printing out
779:14 - okay and basically what i did here
779:17 - this right here is the equivalent so let
779:19 - me comment it out
779:21 - for a second
779:22 - what i just wrote there is the es6 or
779:25 - the latest spec of javascript equivalent
779:28 - syntax to doing this
779:31 - so we say
779:32 - question is equal to random
779:35 - riddle dot question
779:39 - and then answer is equal to random
779:42 - riddle dot answer
779:44 - so these two lines of code can be
779:46 - simplified into this single line of code
779:49 - right here by putting these little
779:50 - brackets
779:52 - around there and selecting the property
779:54 - that you want so that's just a little
779:56 - trick
779:57 - thought i'd show you as we're solving
779:58 - this
780:00 - all right so we've got our question
780:02 - we've got our answer now we have to
780:04 - create our paragraph elements so i think
780:08 - we're going to show the
780:09 - question and the answer both in a
780:11 - paragraph element
780:13 - just like we did with the quote but we
780:15 - obviously have to hide the answer up
780:17 - front so how we'll do that is this
780:20 - we'll say the
780:23 - question element will be
780:27 - equal to document.createelement
780:30 - we'll put a paragraph tag in there
780:32 - and then we'll set the
780:34 - text content
780:37 - equal to the question itself
780:39 - and then let's go ahead and take
780:42 - since we're inserting twice let's go
780:44 - ahead and get a single variable for the
780:46 - container
780:48 - so
780:49 - document.queryselector
780:51 - and we'll grab the
780:53 - riddle
780:55 - we need a dot at the beginning to select
780:57 - a class
780:58 - we want the riddle content div so that
781:01 - will be
781:02 - this riddle content div
781:04 - and that should work and now we want to
781:06 - say container.appendchild
781:09 - and we'll put in the question
781:11 - element
781:12 - let's see if that works
781:15 - okay
781:17 - awesome we have this paragraph element
781:19 - um
781:20 - representing the riddle
781:22 - and now what we have to do
781:24 - is we have to insert the answer but we
781:27 - have to make it hidden
781:29 - all right so i think the way that we're
781:31 - going to do this
781:32 - if you remember from the hints
781:34 - it says you may need to use the
781:36 - htmlelement.hidden property
781:39 - so let's take a look at what that is
781:41 - so the html element property hidden is a
781:44 - boolean which is true if the element's
781:45 - hidden otherwise it's false
781:48 - and you can actually set this equal to
781:50 - true or false to navigate between
781:52 - something that shows and something that
781:54 - hides so that's good to know
781:56 - we should be able to use that on any
781:58 - element that we're working with here
782:00 - all right so what we're going to do is
782:02 - we're going to create a
782:04 - similar to this question element let's
782:07 - just copy this down
782:10 - and this time it's going to be
782:12 - the answer
782:14 - so we'll do answer element
782:20 - and then that will be set equal to the
782:22 - answer all right now there's one
782:24 - additional thing that we have to do
782:26 - so we've got this button over here
782:28 - called reveal the riddle answer and
782:30 - that's going to call
782:32 - this function down here called reveal
782:34 - answers
782:35 - now if we're anticipating in the future
782:38 - this is something that you'd probably
782:40 - figure out after you implemented it and
782:42 - you're like oh shoot i realized this now
782:44 - but i've already built this i know how
782:45 - it works
782:46 - so what i'm saying is that in the future
782:49 - we're going to have to click this button
782:51 - and we're going to have to figure out
782:53 - whether there's a riddle answer
782:55 - available and whether that riddle answer
782:57 - is hidden or not hidden
783:00 - so in order to do that in order to make
783:02 - our jobs easier we should probably set
783:04 - an id attribute on this paragraph tag
783:08 - we're calling answer
783:10 - so we've already set the text content
783:13 - so let's let's go ahead and
783:15 - append this to the html so just so that
783:19 - you can see what's going on here
783:22 - so we're appending the answer element so
783:24 - now when we
783:25 - say riddle me we get the riddle and the
783:28 - answer which is obviously not what we
783:30 - want to do
783:31 - but what we can do here
783:33 - is after this we say answer
783:36 - element dot set attribute
783:38 - and what i want to set is an id
783:41 - and then what i want to do with that id
783:43 - is set it to
783:45 - riddle answer all right so what this is
783:48 - basically going to do
783:49 - is down here in the riddle content it's
783:52 - going to create a p tag
783:54 - that has an id
783:57 - equal to riddle
783:59 - answer okay and then the answer to the
784:02 - riddle will be sitting right there
784:04 - so
784:05 - later on when we click the reveal riddle
784:07 - answer button it's just going to say
784:09 - okay go find me
784:11 - a p tag with an id of riddle answer
784:14 - and if that's there
784:16 - then
784:17 - if it's there and it's hidden i want to
784:19 - unhide it if it's not there i want to
784:21 - alert the user that it's not there
784:24 - okay so that's basically what we're
784:26 - doing with that code down here
784:29 - and then of course we need to
784:32 - call the clear all method
784:34 - as we did with all the other functions
784:37 - and then the last thing we need to do is
784:39 - we need to
784:42 - hide this so we need to grab the hidden
784:44 - property and set it to true on this
784:47 - answer element
784:49 - so when i click riddle me we should see
784:51 - just the question and the answer should
784:54 - be hidden
784:55 - so let's click riddle me
784:57 - and we get exactly what we're looking
784:59 - for here
785:00 - so that's good now the last thing we
785:02 - have to do
785:03 - so we have completed this to do i
785:05 - believe
785:06 - let's click let's just test it by
785:08 - clicking out or clicking on some other
785:10 - ones
785:12 - okay looks good so far
785:15 - and now we have to implement this reveal
785:17 - answers so let's go back to our
785:19 - requirements here
785:22 - our user stories say when showing a
785:24 - random riddle the answer should never be
785:25 - revealed until we click that button so
785:28 - we got that
785:30 - if the user clicks reveal and there is
785:32 - no riddle an alert should let the user
785:35 - know that there's no riddle there
785:38 - if it's already there and it's already
785:39 - revealed another alert should be
785:42 - popped up
785:44 - so what we need to do here is we need to
785:46 - first check
785:48 - let's see what do we need to check
785:50 - so what we need to check is if there is
785:54 - a riddle answer
785:56 - or not or not a real answer but a riddle
785:59 - in general
786:00 - so the way that we do that is we first
786:03 - grab the
786:04 - riddle container
786:06 - which will be equal to
786:07 - document.queryselector
786:10 - riddle content
786:12 - okay so that should give us this div
786:15 - right here
786:16 - and then from there
786:18 - we can say
786:19 - the riddle is going to be equal to the
786:21 - riddle container dot query selector
786:24 - and in this case we want to search for a
786:27 - paragraph tag
786:28 - so if there's any paragraph tag sitting
786:31 - within that div we know that there's a
786:33 - riddle there
786:34 - and if we know that there's a riddle
786:35 - there
786:36 - then we know that you know we either
786:39 - need to reveal the riddle answer or we
786:41 - need to alert the user that it's already
786:42 - revealed
786:44 - okay
786:45 - so now we're going to do an if else if
786:48 - statement so we'll say if
786:51 - there is a riddle
786:54 - if there's a riddle revealed and then we
786:56 - actually we have one more step to do
786:59 - so we need to say the answer
787:02 - is equal to
787:04 - document.queryselector
787:07 - and the answer is going to be what we
787:09 - named it above right here so
787:12 - riddleanswer is the id that we're
787:14 - looking for
787:15 - so we just put this hashtag to search
787:17 - for an id rather than a class
787:20 - and we type in riddle
787:22 - answer
787:23 - okay so there's our answer and what
787:25 - we're going to say is if there's a
787:27 - riddle
787:28 - and
787:29 - there is an answer
787:31 - then i want to alert the user
787:33 - there is already
787:37 - an answer
787:38 - revealed
787:39 - actually no because
787:41 - even if there's
787:43 - an answer
787:45 - if there's an revie
787:46 - hidden it's still going to be registered
787:49 - under this variable so
787:51 - let's go ahead and test that out real
787:53 - quick let's comment this code right now
787:56 - and then we'll console.log
787:58 - answer
787:59 - okay so what we would expect
788:01 - is we've already created in this
788:04 - previous method
788:05 - we've created this element
788:07 - with an id called riddle answer but
788:09 - we've hidden it so it's there it's just
788:12 - hidden so what we want to check is when
788:14 - we search for this by its id
788:17 - if it is hidden what value do we get so
788:20 - we're going to console log that answer
788:22 - i'm first going to click riddle me
788:25 - and then i'm going to click reveal
788:27 - answers i'm going to look at the console
788:30 - and you can see that even though it's
788:32 - hidden we still found the element within
788:35 - the dom
788:36 - using this query selector
788:38 - so in other words we have to check
788:40 - whether it's hidden so we gotta
788:42 - print out answer.hidden instead of just
788:45 - answer
788:46 - so let's generate a riddle and then
788:48 - reveal it and we're gonna see that it
788:51 - that the hidden property is set to true
788:54 - so now what we need to do is uncomment
788:56 - this code
789:00 - and we're going to say if riddle and the
789:04 - answer is hidden
789:06 - then we need to reveal it
789:09 - okay so we need to say answer dot hidden
789:12 - equals false
789:14 - all right so that line of code right
789:16 - there
789:17 - should pretty much complete
789:19 - our
789:20 - web page here with the exception of
789:22 - those alerts so let's go ahead and
789:25 - generate a riddle and click reveal the
789:28 - answer and you can see that it reveals
789:30 - the answer right there
789:31 - okay and maybe we even want to come up
789:34 - to this method and instead of just
789:36 - setting the text content to answer we
789:39 - can put
789:40 - the answer
789:41 - is
789:44 - and then the answer so let's try that
789:46 - one
789:47 - it says the answer is an echo so perfect
789:51 - now the last thing that we have to do is
789:53 - handle those other cases so else if
789:56 - so if the riddle
789:58 - is true so if there's a riddle there and
790:00 - the answer is hidden we're going to
790:02 - reveal it
790:04 - if the riddle is there
790:06 - and the answer
790:09 - is not hidden
790:11 - so right here
790:13 - um so we basically this is redundant so
790:15 - if we make it to this else if block that
790:18 - means that the that either the riddle
790:20 - was not there or the answer was not
790:23 - hidden
790:24 - so if we get here and we say if the
790:27 - riddle is there
790:29 - that's all we need to check so if the
790:31 - riddle is there and we're trying to um
790:35 - we're trying to unhide it again then
790:37 - we're going to say alert
790:39 - the answer is already
790:41 - revealed
790:43 - okay so let's see if that works
790:45 - so we'll click the riddle we're going to
790:48 - reveal it and we're going to click the
790:49 - reveal button again
790:51 - and it says the answer is already
790:52 - revealed
790:53 - all right and then the last piece is
790:55 - just the else statement which basically
790:57 - means that we
791:00 - don't have a riddle at all but we're
791:01 - trying to reveal the answer so we'll say
791:04 - there is no
791:06 - riddle to reveal the answer to sorry the
791:10 - video cut out here i do not know exactly
791:12 - where i was at but basically we were
791:14 - just completing the last part here where
791:17 - if you
791:18 - click on the riddle and you reveal the
791:20 - answer it reveals if you reveal it again
791:23 - it's already revealed
791:25 - or if you have a random quote and you
791:26 - try to reveal the riddle answer it's
791:28 - going to say there's no riddle to reveal
791:29 - the answer to
791:31 - so we've pretty much completed this
791:33 - challenge
791:34 - hopefully it was fun for you
791:36 - a quick way that you can share this is
791:39 - click the share button down here and
791:41 - share it on twitter be sure to tag me
791:44 - at zg underscore dev and put in the
791:47 - hashtag
791:49 - hundred days of code
791:51 - that's where you can get support from
791:52 - the tech community the webdev community
791:54 - on twitter
791:56 - and hopefully
791:57 - um we'll see this popping up a couple
791:59 - times i think this is a fun little
792:02 - web page to create with some interactive
792:04 - javascript
792:06 - and if you want to customize it a little
792:08 - bit you can go down to the js section
792:10 - and replace some of these quotes and
792:12 - some of these memes and
792:14 - jokes with your own favorites
792:19 - in this video in subsequent videos we're
792:21 - going to be going through a css crash
792:23 - course so this is all about styling your
792:26 - web pages now before we get into a lot
792:28 - of the details i want to show you
792:30 - exactly what we're going to be able to
792:31 - build by the end of this and we're going
792:33 - to use a tool called front-end mentor
792:36 - because this is basically
792:38 - a bunch of professional looking web
792:40 - designs that have been implemented for
792:43 - us but they have not been coded so what
792:45 - you do is you click on a challenge and
792:48 - you can go in and get the design and
792:49 - then you code up the design and submit
792:52 - it and get feedback on it so the three
792:54 - that i've chosen
792:56 - based on what i want to cover are going
792:58 - to be this little
793:00 - single price grid component this will be
793:02 - the first one that we do right after
793:04 - getting through the crash course
793:06 - and it's a nice little introductory
793:08 - challenge you see that we'll make a
793:10 - desktop version and then a mobile
793:12 - version
793:13 - and then we will move on after we've
793:15 - gone through a couple other tutorials to
793:18 - this
793:19 - testimonials grid section which is going
793:22 - to help us get through
793:23 - the skills of flexbox and css grid which
793:26 - are going to be super important to you
793:28 - as a developer before i get into the
793:30 - topics i just want to say that the
793:32 - prerequisites are basically you got to
793:34 - know how to write html the basics of
793:36 - html is all you need
793:38 - we're also going to be working in the
793:39 - codepen environment so this is just an
793:42 - example right here
793:43 - where we can type out html css and
793:46 - javascript
793:47 - so get yourself comfortable with that
793:49 - and then optionally like i said we're
793:51 - going to be combining all of our skills
793:53 - for some of the code challenges so
793:54 - watching the previous
793:56 - parts of this full stack developer
793:58 - series is going to be important
794:00 - now in this lesson on css i want to go
794:02 - through what we're going to actually
794:04 - learn but more importantly what we're
794:05 - not going to learn i'll be completely
794:07 - honest when i put this together i got a
794:09 - little carried away i thought this was
794:10 - going to be a simple crash course
794:13 - in css but
794:15 - was
794:16 - humbly reminded
794:18 - that css has a lot of things going on
794:20 - there's a whole lot of things that we
794:22 - can cover and i tried to keep it
794:25 - honed in on the most important concepts
794:27 - per how i've been trying to do it with
794:28 - this series but there's just a lot to
794:30 - cover so as you can see on the left
794:33 - we're going to be talking through what
794:34 - is css
794:36 - and the basics of it we're going to be
794:37 - walking through the box model which is
794:39 - basically defining how much space an
794:42 - element is going to take up on your web
794:43 - page
794:44 - that's going to get us into some
794:46 - discussions on block versus inline
794:47 - elements box sizing and layouts
794:50 - and then we're going to cover a bunch of
794:51 - other things and i'm pretty excited to
794:54 - share a four-step system that i use when
794:57 - i create html and css basically take a
795:01 - design and put it into code because
795:03 - thinking through that was really hard
795:04 - for me when i first started and i want
795:06 - to share that with you
795:07 - so that's the main core lessons we also
795:10 - have some supplementary or optional
795:12 - lessons which includes responsive design
795:15 - so what happens when your web page gets
795:18 - put and opened up on a mobile device
795:20 - like an iphone does it look the same is
795:23 - it going to have a pleasant experience
795:25 - for the user
795:27 - in today's age that's required if you
795:29 - want to make a web app so we're going to
795:30 - talk about that in a separate video and
795:32 - then we're also going to have separate
795:34 - videos on flexbox and css grid which is
795:37 - going to allow us to layout our elements
795:40 - a little bit and like i said we have
795:42 - this project right here
795:45 - which gives us a great opportunity to
795:48 - apply those concepts and put this into a
795:50 - nice looking grid now what we're not
795:52 - going to be covering in this crash
795:53 - course is going to be graphic design and
795:56 - wireframing now there's a good reason
795:58 - for that that we're using front-end
796:00 - mentor because they already have
796:02 - professional looking designs built out
796:04 - and implemented for us and i don't want
796:07 - to waste a lot of time on going into
796:09 - design principles that i'm not really an
796:11 - expert at
796:12 - so we're gonna use and leverage existing
796:15 - designs and learn how to turn those into
796:17 - code on a web page don't get me wrong
796:20 - these are super important concepts
796:22 - as a full stack developer you always
796:25 - start with your wireframing and your
796:26 - design and your requirements and all
796:28 - that kind of stuff but that kind of
796:30 - comes later down the road i really want
796:31 - to focus on the core concepts of how do
796:34 - we actually turn things into code we're
796:36 - also not going to cover css
796:38 - preprocessors i'm not going to talk too
796:40 - much about it but basically
796:42 - it's a more convenient way to write css
796:45 - and it basically allows you to write a
796:48 - little bit less code and it gets
796:50 - pre-processed or i guess transpiled down
796:53 - into vanilla css through a bunch of code
796:56 - that does that so
796:58 - sas and less are popular
797:00 - preprocessors and you'll often find them
797:02 - on much larger projects where trying to
797:05 - organize your css is really important
797:08 - but we're not going to be working with
797:09 - that we don't have huge projects going
797:11 - on and it's not essential to our journey
797:14 - what we're also not going to be talking
797:16 - about is css frameworks so the last
797:19 - thing that i want to do in this full
797:20 - stack web developer series is lock you
797:23 - into a path
797:25 - to something that is really popular
797:27 - right now but may not be in two years
797:30 - and that's kind of the deal with css
797:32 - frameworks when i was first learning
797:34 - bootstrap was huge
797:36 - every tutorial was talking about
797:37 - bootstrap and now tailwind is a pretty
797:40 - popular
797:41 - css framework and all these frameworks
797:43 - are doing is taking vanilla css what
797:47 - we're going to be learning
797:48 - and writing some abstractions on top of
797:51 - that and just making it more convenient
797:53 - to you know lay out elements on the page
797:56 - and style them more quickly and
797:58 - efficiently i think it's really
798:00 - important to understand the bare bones
798:02 - basics of writing vanilla css and
798:05 - therefore we're not going to be looking
798:06 - a whole lot at these all right at this
798:08 - point i think we are finally ready to
798:10 - get into the css crash course
798:12 - as always apologies for the long intro
798:14 - but i really want to make sure that
798:16 - we're clear on what we're actually going
798:18 - through in this lesson the very first
798:20 - thing that i want to dive into is the
798:22 - basic syntax of css so we already
798:25 - learned about html and you might
798:27 - actually recognize this html diagram up
798:29 - here from the last lesson now css is
798:33 - relatively simple and all we're trying
798:36 - to do
798:37 - is target a specific html element and
798:40 - apply some sort of style to it or some
798:43 - some sort of layout to it in this
798:45 - example here you can see that we have
798:47 - defined an html element with a class
798:50 - called sum dash class
798:52 - and then down here at the bottom where
798:54 - we look at our css
798:56 - we're using something called a css
798:58 - selector
798:59 - and we're targeting a class
799:03 - of some class so we're basically saying
799:05 - with this rule down here
799:06 - i want to find any html element that has
799:09 - a class of this
799:11 - and then i want to assign this specific
799:14 - css property
799:16 - to that specific html element or
799:19 - elements if there are multiple elements
799:21 - that have the same class now this is
799:23 - just one of many examples that we can go
799:25 - through so in this case we're targeting
799:28 - a specific class we could also target
799:31 - ids or html tags and we can do a bunch
799:35 - of combinations
799:37 - of the three so we're going to be
799:38 - walking through how that works and then
799:40 - we're also going to be talking about
799:41 - these properties down here so similar to
799:44 - what we talked about with javascript
799:46 - when we're looking at
799:48 - javascript objects where we have you
799:50 - know some sort of property and then a
799:52 - value
799:53 - at the other side of that property same
799:55 - thing applies here with css we have a
799:58 - bunch of predefined properties that
800:00 - we're able to use
800:02 - to achieve different types of objectives
800:05 - whether that be
800:06 - laying out you know html elements on a
800:09 - page so do i want to put something side
800:10 - by side with each other or do i want to
800:13 - just style it so do i want to make the
800:14 - background green or do i want to make
800:16 - the text red or something like that we
800:19 - are of course going to get into all of
800:20 - the most common properties and selectors
800:23 - and all that kind of stuff but as with
800:25 - all the other lessons that i've taken
800:27 - you through i want to basically
800:28 - introduce this documentation so this is
800:31 - the mdn web docs we have visited this
800:33 - many times
800:35 - in the prior lessons of this series
800:37 - but now if we go to technologies we can
800:39 - go to css
800:41 - and then we go to the css reference
800:44 - and then we scroll down
800:45 - and you should find this section called
800:47 - index and this is going to list out all
800:50 - of the possible css properties that we
800:53 - can use to achieve these layout and
800:55 - style objectives for html elements so as
800:58 - we go through this if you ever get lost
801:00 - you can always look up these properties
801:02 - that we're using on this documentation
801:05 - page so we've got the basic syntax of
801:08 - css and we'll go into that even a little
801:09 - bit more
801:10 - but what is the actual purpose here like
801:12 - what are we trying to do
801:14 - well there are two things in my head
801:16 - that css is really good for and that is
801:18 - going to be layout and style
801:21 - so how are the elements the html
801:23 - elements laid out on the page are they
801:25 - on top of each other are they next to
801:27 - each other are they in a grid a table
801:29 - all that kind of stuff
801:30 - and then furthermore we can actually
801:32 - apply styles so what color is the text
801:34 - what color is the background do you have
801:36 - a background image what kind of font are
801:38 - you you know working with on the page
801:41 - so what i did was i put together a
801:43 - really basic example of this
801:45 - this is nothing fancy but it just shows
801:48 - you
801:49 - don't worry about the css
801:51 - quite yet here but it basically shows
801:53 - you how we can combine the two so we've
801:55 - got a container on the left and a
801:57 - container on the right and then
801:59 - furthermore we have
802:00 - colored borders and a little bit of
802:02 - colored text within this along with you
802:05 - know some headings and paragraph text so
802:08 - this is kind of the ultimate goal of css
802:11 - we can not only you know do style but we
802:13 - can also do layouts but if you zoom out
802:16 - even further the real goal of css is to
802:19 - target a specific html element or
802:22 - elements
802:23 - and apply some sort of styling to that
802:26 - element or elements there are three
802:29 - primary ways that we can select and
802:31 - style html elements with css we can do
802:34 - it by html tag we can do it by a class
802:37 - which is the the syntax example that we
802:40 - looked at a little bit ago then we can
802:42 - also do it by id
802:44 - so if we look at this on the page here
802:46 - let's go ahead and just make a simple
802:47 - paragraph tag and put some text in there
802:50 - so the first thing we can do is we can
802:53 - just target that specific html tag
802:57 - and give it a different text color and
802:59 - you'll see that this turns red up here
803:02 - we can also add in a class so we can say
803:07 - paragraph
803:08 - you know element or something like that
803:11 - and we can replace this by adding a
803:14 - period before which indicates i want to
803:17 - target a class
803:19 - and then you type in the class that
803:21 - you're trying to target
803:22 - and then you give it some sort of style
803:25 - and again we can see the red text there
803:28 - and then finally we can also have an id
803:30 - on an element so let's just call
803:34 - this one abc or something like that
803:37 - and we can come down here and use a
803:39 - hashtag
803:40 - in the front and that's going to say i
803:42 - want to try to target some sort of id on
803:45 - the page
803:46 - and then you type the id and then once
803:48 - again give it some sort of css property
803:51 - as you can see we've styled this red
803:53 - once again if you've been following
803:54 - along with this series these look
803:56 - familiar to you because we talked about
803:58 - them with javascript already
804:00 - so if we were to come down to the
804:02 - javascript section
804:04 - and you know we go through our basic
804:06 - document
804:07 - dot query selector
804:09 - and then we try to target a specific
804:12 - html element on the page we use the same
804:15 - selector syntax so if we were trying to
804:17 - target this element by its html tag we
804:20 - just drop in the letter p which targets
804:23 - all or targets the first paragraph
804:26 - element that it finds on the page we can
804:28 - also target it by class so once again we
804:31 - put a dot before and then we
804:33 - target the class that we're trying to go
804:35 - after and that's going to find the first
804:37 - html element
804:39 - with that class on it and then finally
804:41 - we can do the same thing with these ids
804:44 - so we can just type in hashtag and then
804:46 - the id and we've selected it with
804:48 - javascript so this is actually a pretty
804:50 - familiar concept if you've been
804:51 - following along with this series and
804:54 - it's relatively easy to kind of grasp
804:57 - and hold on to but what is not so simple
805:00 - is understanding what happens when you
805:02 - have multiple css selectors in a single
805:06 - style sheet
805:07 - and they're all targeting the same
805:09 - element what happens there which css
805:12 - rule takes precedence over the other for
805:14 - example if i put in this css style sheet
805:18 - if i targeted the id right here and gave
805:21 - it a color of green
805:24 - let's see if i can write that correctly
805:25 - and then i also come down and target the
805:28 - class
805:29 - and give it a color of red
805:31 - you have to ask yourself which one's
805:32 - going to apply we're going to cover that
805:35 - here in more detail in just a second but
805:37 - i want to go through a couple other ways
805:40 - that we can actually target html
805:42 - elements
805:43 - when we have some more complex html in
805:46 - our web page aside from selecting html
805:50 - elements with tags classes and ids we
805:53 - also have
805:54 - something called combinators that we can
805:56 - do to parse through all the html and
806:00 - target specific elements and to help us
806:02 - with this i'm bringing back a diagram
806:05 - that we looked at in the prior lesson
806:08 - on the dom or the document object model
806:10 - and what the dom describes is the
806:13 - structure of your web page and how the
806:15 - html is laid out and in this diagram we
806:18 - talked about how there's grandparents
806:20 - and there's parents and there's
806:22 - children children and siblings
806:25 - based on the level that an html element
806:28 - is at in the document
806:30 - so you can see that coming down here
806:32 - we've got you know an h1 a p tag another
806:35 - p tag in an unordered list and all four
806:38 - of these are considered siblings so
806:40 - that's just a quick review and what we
806:42 - can do with this is we can come back to
806:45 - our
806:46 - playground here and actually select
806:49 - different html elements based on these
806:51 - relationships the first combinator that
806:53 - i want to talk about is selecting
806:55 - descendants in html so if we go back to
806:58 - our our visual dom tree you can see that
807:01 - this div right here has several
807:04 - descendants so it has direct children
807:06 - which are these four elements
807:08 - but then it has grandchildren which the
807:11 - children and the grandchildren are all
807:13 - considered descendants of that specific
807:16 - div so what we can do within css is we
807:19 - can target all descendants with a single
807:22 - selector now i'm going to do it the
807:24 - wrong way first so that we can see why
807:26 - this matters in the first place
807:28 - let's say that i wanted to style these
807:31 - list items right here
807:33 - one way that i could do it is i could
807:35 - target the html tag li
807:38 - and then i can give it some sort of
807:40 - style so maybe i want the text color to
807:42 - be green i'm sticking with this color
807:44 - property because we haven't talked about
807:46 - all the css properties yet and it's
807:48 - pretty simple and easy to kind of
807:50 - intuitively understand
807:52 - so with this example i tried to
807:55 - select and style these list items and
807:58 - did so successfully but by targeting it
808:01 - just like this we run into problems if
808:04 - we change the html structure in the
808:06 - future
808:07 - and let's say that we put in some sort
808:09 - of footer so
808:10 - this isn't going to look great but let's
808:12 - go ahead and make a div
808:14 - and then an unordered list and then you
808:16 - know footer link
808:18 - number one
808:20 - and then we'll put three of those in
808:21 - there so
808:23 - number two and number three
808:25 - so this list right here imagine this
808:28 - being down low in the footer and what we
808:31 - would want to do with that is we want to
808:32 - actually make those align horizontally
808:35 - and we probably want to style them with
808:37 - a different text color and we probably
808:39 - want to give them a link
808:40 - and you see what's happening when we
808:42 - just
808:43 - select the li elements all descendants
808:46 - we're actually picking up these footer
808:49 - links right here and we don't want to be
808:52 - so there's a better way to actually
808:54 - target specific types of descendants
808:57 - within a document
808:59 - to allow us to have more specificity
809:02 - with targeting our html elements to make
809:04 - this example a little more clear let's
809:06 - go ahead and add some class
809:08 - attributes here
809:09 - so this will be the
809:11 - we'll call it the main container and
809:13 - then the second div down here
809:16 - is going to be called
809:18 - the footer now this is not semantic html
809:21 - like we talked about previously but
809:23 - it'll do the job here
809:24 - so what we're trying to do is we want to
809:27 - style just these list items so the the
809:30 - ones within the main container div but
809:32 - we don't want to target the ones that
809:34 - are sitting in the footer because those
809:36 - are going to be styled a little bit
809:37 - differently
809:38 - the way that we can do that rather than
809:40 - just targeting the li tag what we can do
809:44 - is we can actually combine selectors so
809:47 - combinators is what we're calling this
809:49 - and i can say i want to target the main
809:51 - container class
809:53 - and then i want to look for any
809:55 - list item that is a descendant of that
809:58 - main container class so the first div
810:01 - that we talked about here on the left
810:03 - that's the only div that has this class
810:06 - and so therefore we're only going to be
810:07 - styling the ones that we're targeting at
810:10 - this point we can also add additional
810:12 - list items to
810:13 - our main container div and it's going to
810:16 - get that style so if we were to come
810:18 - down right after this list
810:20 - make another div
810:22 - another on an ordered list
810:24 - and then put in some text here you're
810:27 - going to see that that will turn green
810:29 - because it still is a descendant of that
810:32 - main container but once again we have
810:34 - our footer links
810:36 - you know avoiding that style because
810:38 - we've been specific in selecting only
810:41 - descendants of that main div now i want
810:43 - to stop for just a second and look at
810:45 - this syntax that we're working with
810:47 - so you can see that we have a class
810:50 - selector with this period right here
810:52 - that determines that and then we have a
810:54 - tag selector
810:56 - separated by a single space so what we
810:59 - call this first one is going to be a
811:01 - pre-selector and then the li is the
811:05 - actual selector so in this css rule that
811:08 - we've defined we're not really targeting
811:11 - the main container we're targeting list
811:13 - items so the one that is furthest to the
811:16 - right is always going to be the html
811:18 - element that we actually want to style
811:20 - if we were just targeting the main
811:22 - container here so if we drop this down
811:24 - into a separate rule
811:26 - and gave a color of blue
811:28 - per se you're going to see that not only
811:31 - list items but everything else there is
811:33 - going to get that style so it's very
811:35 - different saying i want to target this
811:37 - main container class
811:39 - and saying i want to target all of the
811:41 - list items that are descendants of this
811:44 - pre-selector main container class all
811:47 - right i'm going to clear all these
811:48 - styles out and also clear the html that
811:51 - we're working with
811:52 - and let's go ahead and drop in some
811:55 - different html because the second one
811:57 - that we're going to talk about the
811:59 - second css combinator is how to select
812:02 - children of a specific element with the
812:05 - descendant selector which is just a
812:07 - space separating two different selectors
812:10 - we're grabbing everything below a
812:11 - certain html element but with the
812:14 - children selector we're only grabbing
812:16 - the first children so with this div
812:19 - right here that we're calling an id of
812:22 - main
812:23 - we only have three or we have four
812:25 - different children so we have the first
812:28 - three paragraph tags and then we have
812:30 - this div element which are all going to
812:32 - be considered children so if we wanted
812:34 - to style just those elements then we can
812:38 - use a slightly different syntax so
812:40 - remember we're targeting an id right
812:43 - here so instead of using a period
812:45 - we're going to use a hashtag
812:47 - then we're going to pass in that id
812:49 - drop down into our css rule
812:52 - and now what we're going to do is give a
812:54 - color of
812:56 - we'll call it green again now this is
812:58 - just going to target everything because
813:00 - we're just targeting everything in the
813:01 - div but if we added a child selector
813:05 - combinator we can target just those
813:07 - first three paragraph elements and how
813:10 - we do that is we use this little carrot
813:12 - right here
813:13 - and we type in paragraph tag right after
813:17 - that so what this is saying
813:19 - is i want to look at the div with an id
813:22 - of main
813:23 - and then i want to grab all of the
813:26 - children the direct children
813:28 - that are p tags below that so the only
813:31 - three that qualify for that rule are
813:33 - these first three paragraphs and
813:34 - therefore we style them to have a text
813:37 - color of green so we know how to select
813:39 - descendants we know how to select direct
813:41 - children now there's also a css
813:43 - combinator or combinators that we can
813:46 - use to select sibling elements now i
813:49 - will make the disclaimer that i don't
813:51 - use these ever i don't know if i've ever
813:53 - actually used these sibling selectors
813:55 - and the reason being is because whenever
813:58 - you change your html structure it's
814:00 - going to affect the css rules so it's a
814:03 - little bit brittle
814:05 - when you're putting these together but
814:07 - the reason i'm walking you through them
814:08 - is because you may see them in code
814:10 - somewhere and it's just good to know
814:12 - that they exist and how they work to do
814:14 - this i'm going to copy in a little bit
814:16 - different html because we need a
814:18 - different structure to work with
814:20 - and let me zoom out just a little bit so
814:22 - we can see more
814:24 - so within this html you can see that we
814:26 - have another you know main container and
814:29 - then we have paragraph elements and list
814:32 - items uh separated
814:34 - throughout the html i'm going to get rid
814:36 - of this css rule right here and now
814:39 - we're going to select some sibling
814:41 - elements let's say for some odd reason
814:44 - you want to style every paragraph
814:47 - element that directly follows a list
814:50 - group
814:51 - so in this case it would be this first
814:53 - paragraph here and the fourth paragraph
814:56 - here because they directly followed
814:58 - these list groups
814:59 - in order to do that we can use a special
815:02 - css combinator that selects only the
815:05 - first
815:06 - sibling of an element what we call this
815:08 - is the adjacent sibling selector so
815:12 - what we'll do is we will grab
815:14 - let's see how do we do this we need to
815:16 - grab all unordered list so ul is what
815:20 - we're going to target and then what we
815:22 - do is we add a plus sign
815:24 - and then we target all p elements that
815:27 - are going to be adjacent siblings to
815:30 - those unordered lists and from here we
815:33 - can just assign we'll call it blue this
815:35 - time and what you'll see is that only
815:37 - the first paragraph and the fourth
815:39 - paragraph have been targeted now what i
815:42 - was saying just a little bit earlier is
815:44 - that if you change your html structure
815:46 - at all these rules break so if we were
815:49 - to come in here and for you know some
815:52 - reason this is actually pretty common
815:54 - we wanted to maybe wrap
815:56 - this
815:57 - last unordered list in a div so let's
816:00 - copy this in another div
816:02 - and then you're gonna see that our rule
816:05 - that we wrote has broken down so this
816:07 - fourth paragraph here is no longer
816:09 - styled with blue text and that's simply
816:12 - because we changed the structure of that
816:14 - html
816:15 - so that's why i'm not a huge fan of
816:17 - these selectors
816:19 - they're pretty
816:20 - fragile in that sense now the last
816:22 - sibling selector we looked at the
816:24 - adjacent one which just grabs the first
816:27 - sibling next to an element but we can
816:30 - also grab all siblings next to an
816:32 - element so let's say that we wanted to
816:34 - style all of these paragraphs
816:36 - that are direct siblings to an unordered
816:39 - list the way that we do that is we open
816:42 - up our css and instead of a plus sign
816:45 - we're going to use this little tilde
816:48 - sign right here and what that's going to
816:50 - do is it's going to look for unordered
816:52 - list and it's going to look for direct
816:54 - siblings that have a you know a type
816:57 - paragraph and give it this style so once
817:00 - again pretty fragile
817:02 - i don't use these often but they're good
817:04 - to know you know how they work and
817:06 - you might see them in code at some point
817:08 - and hopefully you would fix them and
817:10 - make them a little bit more robust over
817:12 - the last few minutes i've talked about
817:14 - how fragile these selectors are but
817:15 - didn't really offer you a better
817:17 - solution so that's what we're going to
817:19 - do right now
817:20 - if i had a situation where
817:23 - let me go ahead and remove these css
817:25 - rules
817:26 - if i had a situation where i wanted to
817:28 - target
817:29 - this first paragraph in this fourth
817:31 - paragraph what i'm going to do is just
817:33 - give them a class so i'm going to come
817:36 - to the html and on the first paragraph
817:39 - i'm going to say
817:40 - blue text color is going to be my class
817:43 - name and then i'm going to copy that
817:45 - same class
817:46 - down to the fourth paragraph
817:49 - and now i'm just going to select that
817:51 - class with our class selector
817:54 - and then i'm going to give it a color of
817:56 - blue and now we've achieved the same
817:59 - exact result but now if we change the
818:01 - html structure this css rule is not
818:04 - going to break so that would be the
818:06 - preferred method at least in my head of
818:08 - doing that now believe it or not there
818:10 - are other ways to select html elements
818:13 - other than these the main three which is
818:16 - tag class id
818:18 - and then also the combinators
818:20 - we have some other ways to do it so
818:22 - let's say that we had this specific html
818:25 - right here
818:26 - so we have a p element and a div element
818:29 - and they both have the class called
818:31 - regular text let's say for some odd
818:34 - reason we want to style all elements
818:37 - with a class regular text a certain way
818:40 - but we don't want those styles to apply
818:42 - to a div element we only want them to
818:45 - apply to a p element
818:46 - well one way that we could do this is we
818:48 - could come down to our css and write
818:51 - this funky syntax where we actually
818:53 - specify
818:55 - the class that we want to target along
818:58 - with the tags so we're kind of
819:00 - grouping them all together so what this
819:02 - is saying is i want to style only
819:04 - elements that are paragraph elements
819:07 - that also have this
819:09 - class so it's kind of like an and
819:10 - statement
819:12 - and you come down here give it a color
819:14 - of blue we'll say and now we have
819:16 - selected only one of these as opposed to
819:19 - if we just were to select the
819:21 - class and then give it a color blue it's
819:24 - going to apply to both of them so that's
819:27 - a kind of
819:28 - obnoxious way to solve this problem
819:31 - right here it's totally unnecessary but
819:33 - i just want to show you that there are
819:35 - other ways that you can do this and
819:37 - i mainly would say if you're going down
819:39 - that route i would use it on a
819:41 - case-by-case basis you don't need to go
819:43 - out trying to learn all the different
819:45 - ways because in the end the three main
819:48 - ways tag class and id are going to be
819:51 - totally sufficient
819:52 - for writing good web applications by
819:54 - this point hopefully you're at least
819:56 - somewhat comfortable with writing a css
819:59 - rule that targets a specific html
820:02 - element we also kind of talked about how
820:04 - you might target multiple elements i'm
820:06 - going to write out a couple css
820:08 - properties that we have not covered yet
820:10 - so i wouldn't expect you to understand
820:12 - how they work but just try to follow
820:14 - along
820:16 - intuitively for the moment and we'll get
820:17 - into them later
820:19 - so we've got this html right here where
820:21 - we have a div with a class of box one
820:25 - and then another div with a class of box
820:27 - 2.
820:28 - and what we want to do with this is we
820:29 - want to
820:30 - apply some styles that are going to be
820:33 - shared across these boxes and then some
820:35 - styles which are going to be unique this
820:37 - is very similar to the example we looked
820:39 - at a little bit earlier where we have
820:42 - two boxes right here and some of the
820:44 - styles are the same so these are the
820:46 - same sized boxes they both have
820:49 - borders but the borders and some of the
820:52 - text are going to be different between
820:53 - the two
820:54 - so how do we go about you know writing
820:56 - the least amount of code and achieving
820:58 - that same result here is going to be the
821:01 - most inefficient way to do it but it's
821:03 - still going to work okay
821:05 - so what we're going to do is we're going
821:06 - to target box 1 by class and then we'll
821:09 - also come down in target box number 2 by
821:12 - class
821:13 - now at this point we can use some css
821:15 - properties again we haven't learned all
821:17 - of these quite yet
821:18 - but maybe we want to give a border to
821:21 - both of them so i want to give
821:24 - box 1 a green border
821:26 - and then i want to come down and give
821:28 - box 2
821:29 - a blue border
821:31 - so now we have borders around these
821:33 - elements
821:34 - and let's also add some padding to both
821:37 - of them so we'll give them 20 pixels of
821:39 - padding we'll talk about these units a
821:42 - little bit later
821:43 - in this crash course
821:45 - and then finally let's go ahead and
821:46 - write some text in here we've got
821:49 - box box 1 and box 2 and i want to give
821:52 - these different colors so this box will
821:54 - have green text and this one is going to
821:57 - have blue text so far in this example
822:00 - everything's been a little bit different
822:02 - but let's say that we wanted to um make
822:05 - these the same width and height so let's
822:07 - say that we want box one to have a width
822:10 - of 200 pixels
822:13 - and then a height of 200 pixels and then
822:16 - we come down here with box two and we
822:18 - give it a width of 200 again
822:21 - and a height of 200 again
822:24 - so in this case we've got two boxes that
822:26 - have some different properties but some
822:28 - similar properties so one way that we
822:31 - can actually
822:32 - simplify our code a little bit and
822:35 - share some properties is by this special
822:37 - css syntax where we just leave a comma
822:40 - between the two classes that we're
822:42 - trying to select or ids or tags or
822:45 - whatever you're trying to select both at
822:48 - once so what this css rule is doing here
822:51 - um this box one and box two is it's
822:53 - saying i want to select both
822:56 - uh elements with a class of box one and
822:59 - elements with a class of box 2. so what
823:02 - we can do here is we can take these
823:04 - width and height properties
823:06 - and take them out of these individual
823:08 - styles and go ahead and put them
823:11 - right here so we've basically eliminated
823:14 - two whole lines of code and we've
823:16 - followed the dry principle which is do
823:18 - not repeat yourself and that's a pretty
823:20 - important one that you're gonna you know
823:22 - come across as you develop you know
823:24 - bigger and bigger software as with
823:26 - everything in code there's multiple ways
823:28 - to do this so we could write this rule
823:31 - right here where we're targeting two
823:33 - elements at once and applying
823:35 - shared styles now we can also achieve
823:38 - the same exact result by instead of
823:40 - targeting it in our css we can actually
823:43 - give
823:44 - multiple classes to a single element so
823:48 - instead of having just box one and box
823:50 - two
823:51 - maybe we have each of these have their
823:53 - own classes but then they also have a
823:55 - shared class which is called box
823:58 - so instead of coming down into the css
824:01 - and targeting it like this all we have
824:04 - to do is get rid of these and give them
824:06 - that shared class and now we're going to
824:08 - get the same exact result but in a
824:11 - slightly different way
824:13 - now honestly this is probably my
824:14 - preferred way of doing it it just is a
824:16 - little bit more straightforward and
824:18 - simple in my head but both of them are
824:20 - valid ways to you know
824:22 - provide shared styles to your html all
824:25 - right for the most part i think we've
824:26 - covered a lot of the selector stuff with
824:28 - css but while we're here we do have to
824:31 - talk about the
824:33 - pseudo selectors now we're not going to
824:35 - get into a whole lot of detail here
824:37 - because i don't think it's extremely
824:39 - important at this point but i do want to
824:41 - mention it i want to show you
824:43 - probably one of the most common ways of
824:45 - using something called a pseudo selector
824:48 - so let me get rid of all this stuff here
824:50 - and paste in a simple button so you can
824:53 - see that we have a button right now and
824:55 - you know click it it doesn't do anything
824:57 - it's not styled nicely or anything like
825:00 - that
825:00 - but what we can do with this button is
825:02 - we can apply something called i believe
825:04 - it's a pseudo class
825:06 - and that pseudo class will allow us to
825:09 - style this button differently based on
825:11 - different states of the button before we
825:13 - get into this there is a page on the
825:16 - documentation if you just type in
825:19 - pseudo classes to
825:21 - the mdn documentation you can read up on
825:23 - it but let's go ahead and get back to
825:25 - this example and i'll show you exactly
825:27 - what this does
825:28 - so what we're going to do is first
825:30 - target the button so maybe we want to
825:32 - apply a couple styles to this button
825:35 - again we haven't gone through the
825:36 - properties quite yet we're going to get
825:38 - there
825:39 - but let's just say that we want to give
825:40 - a background color of navy and then we
825:43 - want to give
825:46 - we'll say text color of white
825:49 - and you're gonna see that we now have a
825:51 - slightly better looking button not
825:53 - really a really nice looking button so
825:56 - maybe we get rid of the border so that
825:58 - it looks a little bit cleaner and then
826:01 - add some padding in here all things
826:02 - we're going to learn a little bit later
826:04 - in this course so now we've got a button
826:07 - that looks a little bit better
826:09 - not great and what we want to do with
826:10 - this is we want to
826:12 - attach this hover sudo class which
826:16 - basically says i want to target the
826:18 - button html element
826:20 - and when it is in its hover state so
826:23 - basically when i hover my mouse over it
826:26 - i want to apply these styles so the
826:28 - first thing that i want to do is give it
826:30 - a different cursor so when you hover
826:32 - over this you'll see that the cursor
826:35 - stays the same but i want it to be that
826:37 - little clicking cursor
826:39 - so all we need to do is come down and
826:41 - give it the cursor property and say we
826:44 - want it to be the pointer so now if we
826:46 - hover over this you'll see that the
826:48 - cursor changes to that hover pointer
826:50 - another thing we could do is we can
826:52 - change the opacity of this so maybe we
826:55 - want to give the background color uh 80
826:59 - opacity
827:00 - so now we're going to get a different
827:01 - cursor and then it's also going to
827:03 - change color to kind of indicate to the
827:06 - user that they can click this and it'll
827:07 - do something
827:09 - so that is all made possible by this
827:12 - hover sudo class and then if you were to
827:14 - go to the documentation there's all
827:16 - sorts of different pseudo classes
827:18 - that you can use you know here are a
827:20 - couple of these
827:22 - but we're not going to get into a whole
827:23 - lot of detail on that right now now the
827:25 - last thing i want to talk about while
827:27 - we're on the topic of css selectors
827:31 - is kind of differentiate between two
827:33 - that we've already talked about
827:35 - so we've already seen
827:37 - these multiple selectors so let me go
827:39 - back
827:40 - we've got this box example but let me
827:43 - let me bring this back to the multiple
827:45 - selectors where we have box 1 and box 2
827:48 - being selected
827:49 - and let's go ahead and compare this
827:52 - to something like where we go with box
827:54 - one and then we pass in a p tag or
827:57 - something like that now these are they
828:00 - look very similar but they're very
828:02 - different in this case we're saying i
828:04 - want to target box one and box two
828:08 - and then in the second rule we're saying
828:10 - i want to
828:12 - target any p element so the the actual
828:15 - selector that exists as a descendant of
828:18 - the box one class element so they're
828:21 - very different try to keep those
828:22 - separate in your head as we go through
828:24 - this tutorial now that we've covered how
828:26 - to select html elements with css rules
828:29 - let's talk about this whole cascading
828:31 - concept so css stands for cascading
828:34 - style sheets and what that term refers
828:37 - to
828:38 - is the concept of when you've got
828:40 - multiple style sheets which is possible
828:43 - and multiple css rules within those
828:46 - style sheets that all compete against
828:48 - each other to style the same html
828:50 - element
828:51 - it's asking which one is going to win
828:54 - which one's going to take the most
828:55 - precedence and actually style the
828:57 - element before i start writing a bunch
828:59 - of things i want to show you a tool that
829:01 - we've actually looked at before
829:04 - but we
829:05 - have not looked at yet with css so i
829:08 - know i've been working in firefox
829:10 - previously we're in google chrome just
829:11 - because i've got this google slides up
829:13 - here
829:14 - but we can do the same thing we can
829:16 - inspect elements with the dev tools
829:20 - and when we come to the elements tab
829:22 - which is the first one that you're going
829:23 - to see in all browsers
829:25 - you can parse through the html
829:28 - and you know click through and
829:30 - drill down and figure out which html
829:32 - element that you want to look at and
829:34 - then in this right hand pane over here
829:37 - this is where all of the styles that are
829:39 - applying to that element are going to be
829:41 - housed and in many cases you're going to
829:43 - see multiple styles so let's go ahead
829:46 - and just click on one of these here so i
829:49 - don't know it doesn't really matter
829:51 - but what you're going to see on the
829:52 - right side is a bunch of styles and in
829:55 - some cases
829:56 - you're going to see that they're crossed
829:57 - out
829:58 - and what that basically means is that
830:00 - they have been
830:02 - um canceled out by another style sheet
830:05 - or
830:06 - css rule that takes more precedence over
830:09 - the one that was written
830:11 - so that's what you're going to be seeing
830:13 - all the time with your web pages and i
830:15 - want to talk about how we determine
830:17 - which one takes that precedence let's
830:19 - throw some html on the page here one
830:22 - that has plenty of things to select so
830:25 - we have a div with a paragraph element
830:27 - within it and the div has a class the
830:30 - paragraph element has a class and an id
830:33 - so we've got plenty of ways that we can
830:35 - select this html element and we're going
830:38 - to do so so the first one pretty easy
830:41 - let's go ahead and just use a html tag
830:44 - selector and give it the color red
830:47 - now let's come down and select a class
830:51 - so we're going to select
830:52 - the p element by its class and we're
830:55 - going to give it a color of blue
830:58 - so far we've changed what we're looking
831:00 - at here each time that we've
831:01 - written a rule
831:03 - let's come down and be even a little bit
831:05 - more specific so let's
831:07 - select this by its id by putting a
831:10 - hashtag and typing in the id
831:12 - and then this time we're going to style
831:14 - it a color green
831:16 - so in the first case we tried to style
831:18 - it red then we tried to style it blue
831:21 - and then finally green and as you can
831:23 - see within this document this last rule
831:26 - right here is currently winning it's it
831:29 - has the most precedence and we're going
831:31 - to find out exactly why that's the case
831:34 - in just a second but let's keep going
831:36 - there's actually multiple ways that we
831:38 - can you know select this single element
831:40 - and i'm actually going to paste them all
831:42 - in because i don't want to
831:44 - bore you and waste your time by typing
831:46 - them all out but let's go ahead and
831:48 - paste all of the different ways that we
831:50 - can style this same
831:52 - paragraph element it's pretty pretty
831:54 - wild how many different ways that we can
831:56 - do this so we've got the three that we
831:58 - wrote and then we've got all of these
832:00 - different ways that are all targeting
832:03 - that same element
832:04 - and the question is when we look at all
832:06 - of these how do we know which one is
832:09 - going to end up you know winning and
832:11 - which one's going to apply now i'm sure
832:13 - the question that you're asking
832:15 - is why would this ever happen why would
832:17 - you ever write
832:19 - 10 different rules that are going to
832:20 - style the same element
832:22 - well the answer to that is you probably
832:24 - would not but what could happen is you
832:27 - could have external style sheets that
832:29 - are going to come into your project and
832:31 - they're going to have their opinions on
832:33 - how you know certain elements need to be
832:35 - styled and then you've got your own
832:37 - style sheets
832:38 - locally within the project and those
832:40 - have styles so it's pretty common to see
832:44 - multiple style sheets coming into a
832:46 - single web application
832:47 - and it's really important to understand
832:50 - you know which one's going to win so
832:52 - there are two ways that we can determine
832:54 - this or there's two factors in this
832:56 - equation
832:57 - so let's go ahead and just write this
832:59 - out two factors for determining
833:03 - css
833:04 - precedence
833:06 - all right so the first way
833:09 - is going to be or let's go ahead and
833:10 - make a
833:12 - an ordered list because we're just
833:14 - practicing here so the first way is
833:16 - going to be
833:17 - the location of the css rule in the file
833:21 - and the second one is going to be
833:24 - the specificity of it so the specificity
833:28 - of the css rule
833:30 - now we don't really understand either of
833:32 - these quite yet but the first one is
833:34 - pretty simple and the second one you'll
833:36 - catch on because we talked about it so
833:37 - much earlier in this lesson so let's
833:39 - start with the location piece so
833:42 - location of the css rule in the file
833:45 - this is really what we're referring to
833:47 - when we say cascading style sheets
833:50 - so if we came down here to the css and
833:53 - we targeted list items so
833:55 - these two list items right here is what
833:57 - we're targeting and we want to turn them
834:00 - a different color
834:02 - now i'm going to write this rule right
834:04 - here and then i'm going to take the same
834:06 - exact css rule but just change the color
834:10 - to blue
834:11 - and you'll see that it actually changes
834:13 - the color to blue but it's not quite
834:15 - apparent
834:16 - why the bottom one is going to take
834:18 - precedence over the top one well that's
834:21 - just how css works you always read from
834:23 - the top to bottom and basically the way
834:26 - that i think about it is
834:28 - the
834:29 - the css interpreter that's reading
834:31 - through and figuring out what to apply
834:33 - is going to just read from the top and
834:34 - it's going to say okay i want to style
834:37 - all my list items
834:38 - with a text color of green
834:41 - and then it's going to say okay as long
834:42 - as i don't see anything else
834:44 - in the rest of the style sheet or any
834:46 - other style sheet that comes after it
834:48 - then that's going to be the style that i
834:50 - apply
834:51 - but if i do see something which i do
834:53 - here then i'm going to replace that
834:55 - previous style with the most recent one
834:58 - that i saw when i read it from top to
835:00 - bottom so that's what we're talking
835:02 - about when we say cascading style sheets
835:04 - and that's
835:05 - one way that we can determine precedence
835:08 - with css selectors now i know it seems a
835:11 - little weird because when we worked with
835:12 - javascript you definitely cannot declare
835:15 - the same variables and stuff like that
835:17 - so it seems a little odd that we could
835:19 - put the same exact css selector in one
835:23 - css style sheet but this is totally
835:25 - valid that rule does not apply to css
835:28 - like it does javascript it's a totally
835:30 - different type of you know language that
835:32 - we're dealing with here so we know that
835:34 - the last selector in the file is always
835:37 - going to win unless
835:39 - we have a selector that's higher up but
835:42 - has more specificity so that is the
835:45 - second piece of this equation and we're
835:47 - going to break this out
835:49 - real quick to see how it works so let's
835:51 - say that we have these list items right
835:54 - here and let's go ahead and add a class
835:57 - to both both of them so we'll just say
835:59 - list item
836:00 - something very generic here
836:04 - and we know that now that we have the
836:06 - class we can select it in two different
836:08 - ways so the question i have for you is
836:10 - if we try to select this with its tag so
836:13 - just use the li tag to
836:16 - color the text and then we also added a
836:18 - rule that selected it by class
836:21 - which one is going to win over and then
836:23 - furthermore does it matter which order
836:26 - we put them in in the file before i type
836:28 - this in just pause the video and see if
836:30 - you can kind of reason through that
836:32 - for a second
836:33 - all right so let's try this out first
836:36 - we're going to select it by the
836:38 - tag and we're going to give it a color
836:40 - of
836:41 - green
836:42 - then we're going to select it by its
836:44 - class and we're going to give it a color
836:46 - of blue
836:48 - and you're going to see that it changes
836:49 - to blue but we don't quite know yet why
836:53 - this is the case because in the first
836:55 - rule that we talked about we said okay
836:57 - we read top to bottom and we're always
836:59 - going to take the last rule and apply it
837:01 - so that would make sense here because
837:03 - list items the last rule in the file and
837:05 - it's got a color of blue so that's why
837:07 - it's styled that way well that's
837:09 - actually the wrong answer
837:11 - the reason that it's styled blue is
837:13 - because the second rule is more specific
837:16 - than the first
837:17 - so if we were to take this and put it
837:20 - before
837:21 - this other selector
837:23 - we're still going to see blue text
837:25 - because
837:26 - even though this is last in the file
837:27 - this first one is more specific so the
837:30 - question is how do we know what is more
837:32 - specific than another to figure this out
837:35 - we just need a little visual which says
837:38 - that um on a continuum from the left to
837:41 - right so least important to most
837:43 - important or in other words least
837:45 - specific to most specific
837:47 - we have tags then classes and then ids
837:51 - so you might have picked this up by now
837:54 - but if we were to put an id so let's say
837:58 - list item number one
838:00 - and we try to style this um let's go
838:03 - ahead and put at the top of the file to
838:05 - make sure that we rule out this whole
838:07 - you know first to last uh stuff that
838:09 - applies
838:10 - and now we're going to select it by its
838:12 - id and we're going to give it a color of
838:15 - orange
838:16 - in this case you're going to see that
838:17 - this specific one
838:19 - it's not applying to both because you
838:20 - can't assign an id to two different html
838:23 - elements
838:24 - but when we're looking at this first
838:26 - element we're selecting it
838:28 - uh one time right here
838:31 - another time right here and then a third
838:33 - time right here and this top one despite
838:36 - being at the top of the file is going to
838:37 - be the most specific because of this
838:40 - continuum right here and therefore it's
838:42 - going to be the one that wins out and
838:44 - applies the style to that html
838:47 - element if you're following along
838:49 - intently
838:50 - you're probably asking yet another
838:52 - question and that is what about these
838:54 - combinators that we talked about earlier
838:56 - in the video
838:57 - what happens
838:59 - if i get rid of all these css rules
839:02 - and i come in here and let's say that i
839:04 - select it by just its id and i give it a
839:07 - color of green
839:09 - and then i also come in and i say
839:12 - i want to select
839:14 - let's see
839:15 - i want to go ahead and look in all the
839:17 - ordered list
839:19 - and i want to target all the
839:21 - list items that have an id
839:23 - of list item number one
839:26 - so this is going to be the same exact
839:28 - element that we're selecting so it's
839:30 - going to be the first one right here
839:32 - but let's go ahead and see if we can
839:34 - turn this a different color with this
839:36 - selector right here
839:38 - and we can and even if we take this and
839:40 - we put it at the top of the file
839:43 - we're still going to get the same result
839:45 - it's still going to be blue because this
839:47 - rule right here
839:48 - is more specific than this one right
839:50 - here despite the fact that we're using
839:53 - the most specific selector according to
839:55 - this little continuum
839:57 - so as you can see it gets a little bit
839:59 - tricky here when we start using
840:01 - combinators but there is two ways that
840:04 - we can
840:05 - identify pretty reliably which one's
840:08 - going to win out
840:09 - the first one is probably my favorite
840:11 - which is to just try it out and in this
840:13 - case it's really easy we're using
840:15 - codepen
840:16 - and we can just try it out and see what
840:18 - works but that's not going to give you a
840:21 - really good understanding of why it's
840:23 - working that way so there's another
840:25 - method that we can use where we can
840:26 - actually calculate with numbers the
840:29 - level of specificity of a css rule
840:32 - let me lay out the steps here
840:35 - we'll go ahead and practice some html
840:37 - for a second so let's go after this
840:39 - first list item
840:41 - actually the second list item because
840:42 - we're talking about specificity
840:45 - and let's make another ordered list
840:48 - so the first step that we're going to do
840:50 - is we're going to count
840:51 - the number of id selectors in the css
840:56 - rule so that's step number one
840:58 - then we're going to come down we're
841:00 - going to count the number of class
841:02 - selectors
841:04 - and then finally we'll count
841:07 - the number of tag selectors
841:11 - all right so if we're looking at these
841:13 - rules down here
841:14 - let's go ahead and apply this math and
841:16 - we'll first count the number of id
841:18 - selectors in the css rule so both of
841:21 - these
841:22 - have a single id so they have one id now
841:26 - if we go down to the next one count the
841:28 - number of class selectors they both have
841:31 - zero
841:32 - and then finally the number of tag
841:33 - selectors the first one has one but the
841:36 - second one has zero
841:38 - so the way that this is going to work
841:39 - out we can write some
841:41 - css comments right here and i might as
841:43 - well just go right above the actual rule
841:47 - so if we use this little comment syntax
841:49 - which is a forward slash and a star and
841:52 - then a star and a forward slash to close
841:54 - it out
841:55 - and we can count this up so we'll say id
841:58 - selectors
841:59 - this is going to be one
842:01 - we'll say class selectors
842:04 - it's going to be zero and then tag
842:06 - selectors will be one so if we add these
842:09 - together we get a number of 100 and one
842:12 - if we do the same exact
842:14 - little math problem here let's copy it
842:17 - down to this next rule
842:19 - we can say that the id selectors we have
842:21 - one we have zero class selectors and
842:24 - zero tag selectors so our number is
842:26 - going to be 100. so in this case the
842:28 - second rule has a specificity of 100 and
842:32 - this first one has a specificity of 101
842:36 - which means it is one
842:38 - point or whatever you want to call it
842:40 - more specific and therefore it will be
842:41 - the one that applies to this element to
842:44 - really nail this concept i'm going to
842:45 - paste in some code so we don't have to
842:47 - type it all out and i'm just going to
842:48 - walk you through a few more calculations
842:51 - all right so we've got a little bit
842:52 - different html but all it is is a
842:55 - paragraph tag with a bunch of ids and
842:57 - classes to give us
842:58 - flexibility on how we select them so in
843:01 - the css i've written several rules that
843:04 - are going to be at different levels of
843:05 - specificity and let's just walk through
843:08 - how each of them are calculated
843:10 - so our first example we have two classes
843:13 - so
843:14 - we get 0 to 0 and our total is 20.
843:18 - come down here we have two ids so this
843:21 - is going to be
843:22 - uh
843:24 - actually should be oh no we're in the
843:26 - wrong spot here so we've got two ids
843:28 - zero classes and zero tag selectors so
843:31 - our specificity is 200
843:33 - come down to the next one we've got a
843:35 - tag and we've got an id
843:38 - so we have 1 0 1 for 101 and then you
843:42 - get the point we just go down and do the
843:43 - same thing for the rest so the most
843:46 - specific one is the one with two id
843:48 - selectors for a specificity of 200 and
843:52 - you can see that the color orange is
843:53 - what applies to this
843:55 - paragraph element in the web page
843:58 - hopefully at this point it's making
844:00 - sense we know how to select things we
844:02 - know how to determine the
844:04 - order of precedence but there are a few
844:07 - other little gotchas that we need to
844:09 - walk through and one of those is going
844:11 - to be inline styles so if we were to
844:13 - write a paragraph element with some text
844:17 - we can come down to the css and we can
844:19 - style it of course
844:20 - but we also have the option if we give
844:23 - it this style attribute which is just an
844:25 - html attribute as we talked about in a
844:28 - previous lesson
844:29 - we can pass in css style rules into this
844:33 - these little quotations so i can give it
844:36 - a color of blue and then maybe i can
844:38 - give it some padding of 10 pixels
844:41 - and we separate this by these semicolons
844:44 - and we can write as many rules as we
844:45 - want to
844:46 - now the interesting thing about these
844:48 - inline styles is they take precedence
844:51 - over everything else
844:53 - so even if we were to come in here and
844:55 - let's say that we give it an id
844:58 - of you know paragraph or something like
845:01 - that so let's go ahead and select our id
845:04 - and let's give it a text color of orange
845:07 - you would think that because of this css
845:10 - importance diagram that this is going to
845:12 - be the most important rule and the color
845:15 - is going to be orange but obviously it's
845:17 - not it's blue and that's because any
845:19 - inline style is going to take the utmost
845:22 - precedence over all styles
845:24 - now there's one more thing that even
845:26 - makes it a little bit more confusing and
845:28 - that is the important keyword
845:30 - so if we came down into this style right
845:33 - here
845:34 - and we put a space
845:36 - an exclamation mark and we typed
845:39 - important
845:40 - what that's going to do
845:42 - is it's going to override any style from
845:45 - any style sheet and it's basically
845:47 - saying like this rule right here is very
845:50 - important and i don't want to look at
845:51 - any of the precedence rules that we have
845:53 - defined within the css language so even
845:56 - though we've got these inline styles
845:58 - this is still going to apply and even if
846:00 - we came down here and changed this from
846:03 - an id selector to a paragraph selector
846:06 - same deal we're still going to get this
846:08 - orange color because we've defined
846:10 - important on that css property now we
846:12 - can use this important keyword on any
846:15 - property that we want i've been looking
846:17 - at the color property mainly just to
846:19 - stay consistent
846:21 - and avoid confusion before we actually
846:23 - dive into all the different properties
846:24 - but this can be applied to anything else
846:26 - so if you wanted to override the padding
846:29 - style
846:30 - and say 50px or something like that if
846:33 - we put it in just like this not going to
846:35 - change anything but if we put an
846:37 - important at the end you're going to see
846:39 - that this text moves a lot because we've
846:40 - added some padding
846:42 - so that's the whole deal with important
846:44 - but i would recommend that with both of
846:46 - these types of selectors so the the
846:51 - inline selectors and the important
846:53 - selectors
846:55 - use them at a minimum in reality you
846:58 - almost never want to use these inline
847:00 - styles because it just clutters up your
847:02 - html
847:03 - now i've of course used it all the time
847:05 - because it's very quick it's a great way
847:07 - to just quickly put a style on an
847:09 - element
847:11 - and there's actually several css
847:13 - frameworks that
847:14 - do inline css only so you don't even
847:17 - have separate style sheets you just all
847:19 - you write it all in the html document so
847:22 - it's kind of a contentious topic
847:24 - among different camps but in general you
847:27 - probably want to stay away from these
847:29 - inline styles for now
847:31 - just because it's going to clutter up
847:32 - your code
847:33 - likewise with the important style i
847:35 - think this is a more unanimous
847:38 - viewpoint
847:39 - you should not be using this important
847:41 - keyword unless you absolutely have to
847:44 - and the only um example of this that i
847:47 - guess i've experienced that's a really
847:49 - good reason to use this important
847:51 - keyword
847:52 - is if you've got multiple style sheets
847:54 - so maybe you're using a css framework or
847:57 - a ui kit library that's got a bunch of
848:00 - like buttons and modals and stuff like
848:02 - that those are going to have predefined
848:04 - css styles and if you want to override
848:06 - them
848:07 - often you have to use the important
848:09 - keyword otherwise there's no other way
848:11 - to select them with enough specificity
848:14 - to override the existing styles so once
848:16 - again use the important keyword only
848:19 - when you have to
848:20 - pretty good rule of thumb to stick with
848:23 - for the last hour or so or however long
848:25 - i've been talking here we haven't really
848:27 - talked about css properties yet we've
848:29 - been using the color property
848:31 - among a couple others
848:33 - but there's hundreds of them that we can
848:35 - possibly use to
848:37 - both position the elements on the page
848:40 - and style them so remember css is all
848:43 - about layout and style and there's
848:45 - different properties that allow us to do
848:47 - those two different things
848:49 - so to start us off let's just see a
848:51 - super basic example something that you
848:53 - might
848:54 - have to do pretty often and that is
848:57 - let's go ahead and take a a div put some
848:59 - text in it and then style that as a box
849:03 - with specific dimensions maybe a
849:05 - background color and a border or
849:07 - something like that
849:08 - so here's how i'd approach that with css
849:11 - so first you have to make the div then
849:13 - you have to put some text in there so
849:16 - some text
849:18 - and i guess what we want to do is first
849:20 - get that background on there so i'll
849:22 - just select the div since there's only a
849:24 - couple elements here
849:26 - and we'll give it a background color of
849:28 - i don't know we'll call it navy
849:30 - we'll give the text color white
849:33 - we want to give that div a width of say
849:36 - 200 pixels and a height of also 200
849:40 - pixels so we've got us ourselves a
849:43 - square with some text in it but maybe we
849:44 - want to put that text in the middle of
849:46 - that square so we can do that that would
849:48 - be kind of a layout or a positioning
849:51 - type property so one way we could do
849:53 - this pretty straightforward is going to
849:56 - be add a line height and set that equal
849:58 - to 200 pixels which is the same height
850:01 - as the square
850:02 - and then maybe we want to just set the
850:05 - text alignment to center so that's going
850:07 - to bring it to the middle of the square
850:09 - and then we can furthermore put on maybe
850:11 - a box shadow
850:13 - something like that so let's just
850:15 - write something out really quickly and
850:17 - you'll see what happens as we get a
850:19 - little shadow
850:20 - showing
850:21 - on this box and then maybe we could even
850:25 - i don't know we could
850:27 - put a border on it or something so we
850:28 - could say border one pixel solid i don't
850:32 - know something like green it's not gonna
850:34 - look great but you see that we have
850:37 - maybe we can put five pixels instead of
850:39 - one to make it more visible and now you
850:41 - can see that we have a green border on
850:44 - there
850:44 - so this is just a super basic example
850:47 - but you can see how we use some style
850:49 - properties and we use some positioning
850:51 - properties
850:53 - and this is actually not perfectly
850:54 - centered anymore and we'll talk about
850:56 - exactly why that's happening when we get
850:58 - into the concept of the box model but
851:01 - let's get rid of this
851:02 - and ask the question that you're
851:04 - probably wondering and that is how do we
851:07 - know what css properties to actually use
851:10 - i just went through that example really
851:11 - quickly and i had these on the top of my
851:14 - head because i've just been doing it for
851:15 - a while but when i first started i would
851:17 - have no idea how to do what i just did
851:20 - and i have to look up every single
851:21 - property that i was using and
851:23 - furthermore i'd have to look up like if
851:26 - i wanted to do something i'd have to
851:27 - type into google how do i center
851:30 - a paragraph element within a div or
851:32 - something like that so it's really
851:34 - difficult without experience to know
851:36 - what properties to use and when
851:39 - and there's really no great solution to
851:41 - that other than practicing and really
851:44 - you know just applying these concepts
851:46 - that we're learning in this crash course
851:51 - in my opinion the best way to understand
851:53 - the box model better is to just look at
851:55 - it interactively
851:57 - and a great tool to use to do this is
852:00 - the firefox dev tools so we've talked
852:03 - about this in prior lessons
852:06 - but we're coming back here and as you
852:08 - can see i've got this html document here
852:11 - in
852:11 - the browser
852:13 - and then what i've done is i've selected
852:15 - the
852:15 - content element that i've just made a
852:18 - single div
852:19 - and i've put some text in that div
852:23 - and what i've done is i've applied these
852:25 - five
852:26 - uh styles that are pretty directly
852:28 - related to the box model to see how
852:30 - these play out you know
852:33 - on an actual web page so as you can see
852:35 - if we go to the layout section of the
852:37 - dev tools so we're up in inspector we go
852:40 - to layout and then we can scroll down
852:43 - to see the box model
852:45 - and this gives us an incredibly
852:47 - interactive way to see what each of
852:49 - these represent
852:51 - so if you go through and you want to see
852:54 - how you know why does the content and
852:56 - how tall is it
852:58 - you come into these little
853:00 - properties and you can hover over them
853:01 - and you see on the left side of the
853:03 - screen it gives you an outline of
853:05 - exactly what that is applying to
853:08 - furthermore we can see that we've got
853:09 - some padding in here and again it's
853:11 - highlighted up on the screen it gives
853:13 - you a really nice
853:15 - outline of where that padding sits
853:17 - furthermore we've got a border it
853:19 - outlines that really nicely for us and
853:21 - then even some margin on the outside
853:24 - now there are other tools that help you
853:26 - visualize this like in google chrome so
853:29 - if we came back to
853:30 - google chrome you can see that if we're
853:33 - just looking at it i don't know let's go
853:35 - ahead and just select one of these
853:36 - elements here then you can come down to
853:38 - the box model and you can kind of see
853:40 - what's going on but in my opinion it's
853:42 - just not quite as good as firefox so
853:45 - that's why we're working in firefox in
853:46 - the first place but tools aside what
853:49 - actually is the box model well the box
853:52 - model represents
853:54 - these pieces that we're looking at but
853:56 - more specifically you have the content
853:59 - itself which is going to be you know
854:01 - text or just some space that we've
854:03 - defined by a width and a height
854:06 - and then outside of that content we then
854:09 - have some sort of padding or like it
854:11 - doesn't have to be set it could be zero
854:14 - padding but in this case i defined 20
854:16 - pixels of padding
854:19 - and then outside of that we have a
854:20 - border and then outside of that we have
854:23 - a margin and within this box model
854:26 - i mentioned that it tells us how much
854:28 - space an html element represents within
854:31 - the web page and the properties that
854:35 - play into that are going to be the width
854:37 - the height the padding and the border
854:39 - now the margin is a little bit different
854:41 - because while it does take up space
854:44 - it doesn't actually define the space
854:46 - taken up by that individual element it
854:48 - kind of adds like some space around the
854:50 - element um so that if you have two
854:53 - elements and they're squashed together
854:55 - you can just kind of space them out a
854:56 - little bit
854:57 - so those are the components of the box
854:59 - model let's go ahead and dive in with
855:01 - some
855:02 - i actually made a code pen that's going
855:04 - to allow us to interactively play around
855:07 - with this box model so on my screen i've
855:10 - got a code pen that's i've got some
855:12 - javascript written up in here you can
855:14 - drop down these uh select
855:17 - elements and select different css
855:19 - properties to apply to this orange
855:23 - paragraph tag up here and why i created
855:27 - this is because when we're talking about
855:29 - the box model sure we can get into width
855:31 - height
855:32 - padding border margin all that kind of
855:34 - stuff but what's really confusing about
855:36 - the box model in css in general is that
855:39 - based on the
855:41 - values that you're passing to certain
855:44 - properties the rules of the game
855:46 - completely change
855:47 - and to highlight some of those rules
855:50 - i thought it would be helpful to put
855:51 - together this example
855:53 - and just visually walk you through like
855:55 - if we switch a certain css property what
855:58 - is that going to do to our html element
856:01 - that we're targeting the first property
856:02 - that i want to really touch on and dig
856:05 - into is the display pop property so
856:08 - this is a related property to the box
856:11 - model and once again the box model is
856:13 - not just one thing
856:15 - but this is
856:16 - highly related to what we're talking
856:18 - about here and if we scroll down to our
856:21 - documentation i've just gone to mdn
856:24 - technologies
856:25 - css
856:26 - the reference and scroll down to the
856:29 - index
856:30 - and we can find the display property
856:32 - somewhere in here so let's scroll down
856:34 - see if we can find it
856:37 - here's the d
856:38 - section and we'll go ahead and click
856:40 - display
856:41 - so it says this property sets whether an
856:43 - element is treated as a block or inline
856:45 - element in the layout used for its
856:47 - children such as flow layout grid or
856:50 - flex so there is a lot packed into this
856:53 - single property and honestly it's
856:54 - probably the most
856:56 - probably the most
856:58 - complex property that you'll deal with
857:00 - when you're writing css but we're going
857:02 - to dig into each
857:03 - piece of it and you're not going to have
857:05 - to read all this documentation i'm just
857:07 - going to walk you through it
857:09 - so you can see that there's a couple of
857:11 - or there's there's a lot of different
857:13 - things that you can pass to this
857:14 - property
857:16 - but the main ones are going to be block
857:19 - inline
857:20 - inline block
857:21 - flex and grid so if we came back to our
857:25 - box model example
857:27 - if we came down to the display type
857:29 - right here and did the drop down you can
857:31 - see that we have all of these different
857:34 - possible values excluding flex and grid
857:37 - and the reason we're excluding those is
857:39 - because flexbox and css grid are going
857:41 - to be totally separate videos
857:43 - that are going to require a lot more
857:45 - explanation so for now forget about
857:47 - those we're just going to focus on these
857:49 - ones right here
857:50 - so by default whenever you're dealing
857:53 - with most html elements you're going to
857:56 - have a display property
857:58 - of block but at this point doesn't mean
858:00 - anything to us like what does block mean
858:02 - what does inline mean since flexbox and
858:04 - css grid are kind of out of the equation
858:06 - here we're just focusing on block inline
858:10 - and inline block display types
858:13 - and based on what you set your elements
858:16 - they're going to
858:17 - interact with the page and flow through
858:20 - the web page a lot differently so it
858:22 - kind of changes the rules of the game
858:24 - now by default each element is going to
858:27 - have a certain type of display
858:30 - now most elements are going to have a
858:32 - display type of block and you can see in
858:35 - this example
858:36 - that the default display type of a p
858:39 - element is block
858:41 - but if you were to look at another type
858:43 - of element so if you come up to the html
858:46 - that we've got here it's a little bit
858:47 - messy but this span element which is
858:50 - represented by this green text
858:53 - that's actually going to be by default
858:55 - an inline element so the question is how
858:59 - do we know which elements are going to
859:00 - be by default a block and which ones are
859:02 - going to be by default inline and then
859:04 - furthermore what do they actually do
859:07 - what what's the difference between a
859:08 - block and inline element
859:10 - to understand this
859:12 - we've got this example laid out so watch
859:14 - what happens when
859:16 - i switch
859:17 - a block element to an inline element so
859:20 - i'll drop this down i'll say inline and
859:23 - you'll see that that orange
859:25 - div is going to jump up to the line
859:27 - before it and it's going to share that
859:29 - same space with the span element
859:32 - now that's the behavior of an inline
859:35 - html element so what you'll see here is
859:38 - that since a div element has a natural
859:41 - display type of block what it's going to
859:43 - do is occupy a hundred percent of its
859:46 - container space and in this case the
859:48 - container is 100 percent of the body
859:51 - html tag so it's occupying all of that
859:54 - space
859:55 - and furthermore the height if we don't
859:57 - give it a height specify it explicitly
860:00 - it's going to automatically take up the
860:02 - height of the content within it so
860:04 - however large this text is is how
860:07 - big of a height this element's going to
860:09 - occupy the second thing about block
860:12 - elements is that these elements occupy
860:14 - their own space they don't share lines
860:16 - with other elements
860:18 - so as you can see here our div
860:21 - in orange with the orange background
860:24 - occupying all the space and it's also on
860:26 - a different line than this green
860:29 - span element that's right above it
860:31 - and the span element actually has a
860:34 - default value of inline rather than
860:36 - block so
860:37 - different rules up there but since this
860:40 - one is a block then no other element can
860:43 - occupy the same space as it the next
860:45 - thing about a block element is that it
860:47 - respects its width and height properties
860:50 - so that doesn't make a whole lot of
860:51 - sense yet but you will see what i'm
860:53 - talking about in just a second
860:55 - so what i'm going to do is i'm going to
860:56 - drop down the content width and this is
860:58 - just going to apply a 400 pixel width to
861:01 - the orange element so you can see that
861:04 - it no longer takes the entire width of
861:07 - its container because we've explicitly
861:09 - given it a width
861:10 - and then furthermore we can give it a
861:12 - height of 200px or pixels so now it's
861:16 - occupying a space of 400 by 200.
861:19 - so
861:20 - what happens if i were to
861:22 - do the same thing with an inline element
861:24 - let's go ahead and see so i'm going to
861:26 - reset all of the properties so we're
861:28 - going back to the beginning and now what
861:30 - i'm going to do is come down here and
861:32 - set our div to be a display type of
861:35 - inline and you can see when i click that
861:37 - it comes up onto the previous line
861:39 - because inline elements
861:41 - actually can share space they don't
861:43 - break to a new line by default you'll
861:45 - also notice that they don't occupy all
861:48 - of the space they just occupy the size
861:50 - of the content within them so
861:52 - it's just occupying the
861:55 - text that's within this div because
861:57 - we've set it to that display type of
861:58 - inline
862:00 - now the last interesting thing is that
862:02 - unlike a block element that obeys
862:05 - or adheres to its width and height
862:07 - properties
862:08 - the
862:09 - inline element is not going to so even
862:12 - if we set the content width to 400
862:14 - pixels
862:16 - not going to change at all we can also
862:18 - try that with the height set it to 200
862:20 - pixels
862:21 - not going to work so in other words if
862:23 - you set it to inline
862:25 - width and height css properties are not
862:27 - going to work on it so as you can see
862:30 - depending on you know one property's
862:32 - value you have different rules of css
862:35 - which can get pretty confusing sometimes
862:37 - and it's why i'm spending so much time
862:39 - on it here now the last one that we have
862:41 - not talked about is a combination
862:43 - between the two
862:44 - so just to review a block element it's
862:47 - going to take all the space of its
862:48 - container it's going to take a height of
862:51 - the content within it and it's going to
862:54 - break to a new line and respect its
862:56 - width and height properties an inline
862:59 - element is going to just be the width
863:01 - and height of the content within it it's
863:04 - not going to break to a new line and
863:07 - it's also not going to respect the width
863:09 - and height properties if you try to set
863:10 - them now an inline block kind of adopts
863:14 - a couple attributes of both so the the
863:17 - main difference if we were to switch
863:19 - this inline to inline block
863:22 - then the only difference is now it's
863:24 - going to respect its width and height
863:26 - properties
863:27 - right now we don't have those or i guess
863:29 - we do have those set we have tried to
863:31 - set the content with in the content
863:33 - height but because we have an inline
863:35 - element right now
863:37 - it's not respecting that those
863:39 - dimensions but the second we change this
863:41 - to inline block
863:43 - we're going to get those width and
863:44 - height properties back just like we saw
863:46 - with the block
863:47 - but in this case we can still make it
863:49 - inline so although it's broken to a new
863:52 - line here that just happens to be the
863:54 - case
863:54 - because it's too large to fit on that
863:56 - line above
863:58 - so inline block just basically takes all
864:00 - the properties of inline but instead of
864:03 - ignoring width and height it now
864:04 - respects those properties and takes that
864:06 - space up
864:08 - this concept may not seem super
864:09 - important to you right now but i promise
864:11 - you as you go through
864:14 - knowing whether you're dealing with a
864:15 - block element or inline or inline block
864:17 - is going to be super important and then
864:19 - further down the road when we start
864:20 - talking about flexbox and css grid
864:23 - it becomes even more important to
864:25 - understand this kind of stuff
864:27 - let's go ahead and reset everything here
864:29 - and the next thing that we need to talk
864:31 - about are box model variations so to
864:34 - this point we just looked at the firefox
864:37 - dev tools and you can visualize the box
864:39 - model pretty well but there's actually
864:42 - another
864:43 - way of you know conceptualizing this box
864:46 - model and using it just like the display
864:49 - property and all other css properties
864:51 - have their default values
864:53 - the box type down here is going to have
864:57 - a default value of content box so that's
865:00 - what we're seeing right here
865:02 - but we can switch this to be something
865:04 - called border box which is basically
865:06 - going to change
865:08 - how all of those properties so width
865:11 - height
865:12 - padding border and margin it's going to
865:15 - change how those
865:16 - relate to each other within the box
865:18 - model to understand this let's go back
865:20 - to our firefox
865:22 - dev tools
865:23 - and let's go ahead and calculate the
865:25 - total size or space that this particular
865:28 - element is taking up
865:30 - so the way that we would do this is by
865:33 - adding things together because
865:35 - the default box type is content box
865:39 - so basically what we have to do is if if
865:41 - we wanted to find the total height of
865:43 - this element over here we could of
865:45 - course just hover over it and we can see
865:48 - exactly you know what the height is but
865:50 - if we wanted to calculate this
865:52 - we just come down into the box model and
865:54 - we say okay what is the height of the
865:56 - content
865:57 - well the height of the content is going
865:59 - to be a hundred pixels
866:01 - so we say a hundred and then we add on
866:04 - whatever the padding is on both sides so
866:07 - we add the top padding and the bottom
866:09 - padding which on both sides is going to
866:11 - be 20 pixels
866:13 - so we go 20 plus 20 is 40
866:15 - plus the content height of a 100 is 140
866:19 - and then on top of that we add the
866:22 - border dimensions which is going to be 5
866:24 - pixels on the top in the bottom
866:26 - so in total the total height or space
866:30 - and height that this occupies on the web
866:32 - page is going to be 100
866:34 - plus 20 plus 20 plus 5 plus five so that
866:38 - equals i guess 140 150 in total
866:43 - and then the margin the additional 20
866:46 - and 20 or 40 pixels that's not actually
866:49 - going to play into the box model that's
866:51 - kind of separate from it it doesn't
866:53 - actually
866:54 - indicate how the total height of this
866:56 - element so let's go ahead and see if we
866:58 - can hover over this and you'll see that
867:00 - if we hover over the entire element it's
867:03 - showing in pretty small text that the
867:05 - height is 150 just like we calculated so
867:08 - again 100 plus 20 20 5 and 5 is our
867:12 - total height and then likewise we can do
867:13 - that with the width so
867:15 - we grab our content width which is 400
867:18 - we add both of the paddings on the left
867:21 - and the right which is 40 so we got 440
867:24 - and then we add the
867:26 - uh
867:26 - border which is 5 and 5 so we got 440
867:29 - plus 10 is 450 and that's when we hover
867:32 - over it is what the
867:34 - width is going to be
867:36 - so that calculation that we did seems
867:38 - awfully complicated and it kind of is
867:40 - because we're having to add all these
867:42 - different components and
867:44 - consider okay what's the left padding
867:46 - what's the right padding what's the left
867:47 - and right border you know it would be a
867:49 - lot easier if we could just define i
867:52 - want this element to be 400 pixels wide
867:55 - and 200 high and be done with it and
867:57 - then have all the rest of the padding
867:59 - and border and stuff just be within it
868:01 - and that is what the border box
868:04 - value of the box type property allows us
868:06 - to do so all we have to do is come to
868:09 - the styles of the element and then we
868:11 - say box type
868:13 - and we say we want border box
868:16 - now if we apply that
868:19 - it's not going to work because let me
868:21 - see why
868:23 - invalid
868:24 - property name oh i must be blanking on
868:27 - what we're actually using here let me
868:29 - let me
868:30 - see what we're talking about here so
868:33 - box type so i was totally blanking out
868:35 - it's not it's not box type it is box
868:37 - sizing that box type is just what i
868:40 - named it in our code pen but if you say
868:43 - box sizing equals border box you'll see
868:45 - that this changes just a little bit so
868:48 - let me go ahead and uncheck this and
868:50 - watch the content up in the left
868:52 - top left
868:54 - you'll see that something is going on
868:56 - here
868:57 - and it's really hard to tell what that
868:59 - something is when we just have one
869:01 - element on the page but what i've done
869:03 - is put together another code pen that
869:05 - really helps us visualize the difference
869:07 - between
869:08 - the border box and the content box now
869:11 - stick with me here because i know it
869:13 - seems a little bit boring and why would
869:15 - we need to worry about box sizing but
869:17 - when we start making grids and we start
869:20 - you know putting elements within other
869:22 - elements it's going to become really
869:24 - important to know you know how much
869:27 - width do we need to give to children
869:29 - element to fit within the parent
869:31 - container so on and so forth so let's go
869:33 - ahead and dig into that example that i
869:35 - created and you'll see exactly what i
869:37 - mean so as i mentioned when we flip that
869:40 - box sizing from a content box to border
869:44 - box
869:45 - it basically takes the calculation of
869:47 - the space that html is occupying and it
869:50 - changes it so now instead of taking
869:54 - the content height plus the padding plus
869:57 - the border to get our total height
869:59 - we just look at the height property and
870:01 - that is our total height
870:03 - and it's a lot easier to kind of
870:05 - reconcile in our brains
870:07 - and furthermore it makes it a lot easier
870:09 - to put elements within other elements so
870:12 - as you see on the screen here
870:15 - what we're looking at is a couple of
870:18 - divs and i've got a child div and a
870:21 - parent div and what i'm trying to do is
870:23 - i'm trying to fit the child div within
870:26 - the parent
870:27 - and not have it break out of its space
870:30 - and if you see on the right side where
870:32 - we've got the output of this
870:34 - you can see that the content box we've
870:36 - got the parent container which has just
870:38 - a that's just a picture background
870:40 - that's not css
870:42 - um but that's the space that it's
870:44 - occupying and you can see that the child
870:47 - with that border on it because border
870:50 - you know has
870:51 - an impact on the total size of a content
870:54 - box you can see that by adding that
870:56 - border we're breaking out of that parent
870:58 - container and that's really going to be
871:01 - a problem when we're trying to arrange
871:03 - elements on the page
871:04 - so furthermore if we were to add padding
871:07 - to this so
871:09 - basically what this button is going to
871:11 - do when we click it is it's going to
871:12 - take the child element which is the one
871:15 - with the border on it
871:16 - and it's going to add some padding to it
871:19 - so when we click this you'll see that it
871:22 - makes it break out of our parent
871:23 - container even more and that's because
871:26 - when we add padding or a border to
871:30 - something that has a box sizing of
871:32 - content box it's going to add space to
871:35 - that element it's it's always going to
871:37 - be additive now when we come down to a
871:41 - border box type element
871:43 - it's not going to so what's going to
871:45 - happen is the
871:47 - the content width and height is going to
871:49 - be adjusted based on how much border and
871:52 - padding there is so you can see from the
871:54 - start we're already fitting the child
871:57 - element which is
871:58 - got the black border
872:00 - right on top of the parent container
872:02 - and if we add some padding instead of
872:05 - getting larger it's just going to make
872:07 - the content within it a little bit
872:09 - smaller
872:10 - so let's toggle the padding and you'll
872:12 - see that this text right here is going
872:14 - to come inwards a little bit
872:16 - but we're not going to see the the
872:18 - border break out of that parent
872:20 - container
872:21 - so
872:22 - i understand this is a little bit
872:24 - confusing especially if you're just
872:26 - starting out in css but i really wanted
872:28 - to introduce this concept because
872:30 - you will stumble upon this down the road
872:33 - and you'll probably see like i said
872:35 - something like a css reset so let me let
872:38 - me go ahead and grab that code that i'm
872:40 - talking about and show you exactly what
872:41 - i mean
872:42 - oftentimes you'll see in
872:45 - a css
872:46 - style sheet the following thing and this
872:50 - is going to change the stuff over on the
872:51 - right a little bit but that's not the
872:53 - point
872:54 - what you'll see is that on the html
872:56 - element or the root element they're
872:58 - going to change the box sizing to border
873:01 - box so it's going to take the root style
873:04 - and make it you know this nice little
873:06 - handy border box where you know the
873:09 - width is the width and the height is the
873:10 - height and there's no math going on
873:12 - there and then these next couple of
873:14 - rules
873:16 - similar to what we talked about where if
873:17 - you put a comma there it will select
873:19 - multiple you know classes or ids or tags
873:22 - or whatever that's what these are doing
873:24 - and this is a wild card character that's
873:26 - basically saying i want to target every
873:29 - element in this entire document
873:31 - and then what it's doing
873:33 - is it's saying i want to set the box
873:34 - sizing property to inherit which is
873:37 - basically basically going to look up and
873:39 - say okay what is the root element set to
873:41 - whatever that's set to
873:43 - inherit that down to all of the
873:45 - different elements on this web page so
873:48 - in effect what we call this is a css
873:50 - reset and it's going to
873:52 - change the default box sizing to this
873:55 - more
873:56 - easy to understand border box you know
873:59 - box sizing all right i know we've
874:01 - covered a lot we've come a long way in
874:03 - this crash course so far we're not done
874:05 - yet but i want to do a quick little
874:07 - review on a few things
874:09 - so we've learned about how do we select
874:11 - things
874:12 - how do we select html elements we've
874:15 - learned about what takes precedence when
874:17 - we have multiple css rules and we've
874:19 - learned about the box model and what i
874:21 - want to review here is the box model
874:24 - just go through a few things that you
874:26 - should keep on the top of your mind
874:28 - so first off the box model describes how
874:30 - much space an html element occupies
874:34 - the space is heavily influenced by that
874:36 - box sizing property
874:38 - that we just talked about whether that's
874:40 - content box or border box so content box
874:43 - you have to add the content width and
874:45 - height to the padding in the border
874:48 - well with the border box you just take
874:50 - the width and the height and that is the
874:52 - total space that your html element
874:54 - occupies
874:56 - so the space is also or space and layout
875:00 - is also heavily influenced by the
875:02 - display property so whether we have a
875:04 - block element an inline element or an
875:07 - inline block element is going to
875:09 - influence where those elements are
875:11 - sitting on the page so those two
875:13 - properties box sizing and display are
875:15 - going to really play together
875:17 - deciding how our web page is laid out
875:21 - and furthermore that display property
875:23 - has two additional
875:25 - values that we
875:26 - have not talked about but will so
875:28 - flexbox and css grid which is going to
875:30 - allow us to make grids and it's going to
875:32 - allow us to space elements out really
875:34 - well
875:35 - so that's going to be super useful to us
875:37 - in the future and finally the most
875:40 - important components of the box model
875:42 - are height width padding border and
875:44 - margin
875:45 - margin doesn't play into the total space
875:47 - it occupies but it does control the
875:49 - space around it and then finally all
875:52 - other css properties are going to be
875:54 - kind of supplemental to these core
875:56 - concepts so whether we're styling the
875:59 - text color or we're doing a background
876:01 - image or making a different font those
876:04 - are all going to be just kind of
876:06 - supplementary to these core concepts
876:09 - what i would recommend is that you come
876:11 - to this uh
876:12 - little example that i put together
876:15 - it's in the description
876:17 - and just click through all of these
876:19 - uh attributes and or not attributes but
876:22 - css properties and see what happens with
876:25 - different combinations so change the
876:27 - display type to inline and then try to
876:29 - set you know different margins and
876:33 - paddings and stuff like that and you'll
876:35 - see like okay the margin doesn't really
876:37 - do anything when it's in line but the
876:39 - padding does and then if we set this to
876:42 - block and then change the margin then it
876:44 - is going to do something
876:47 - aside from the
876:49 - display property and the box sizing and
876:52 - a couple other things we just talked
876:53 - about there's one other css property
876:56 - that you'll use pretty often and it will
876:58 - affect the flow of the elements on the
877:00 - page
877:01 - and that's going to be the position
877:03 - property so this position property has
877:06 - i think about four or five different
877:09 - possibilities so let's go ahead and
877:10 - write those out
877:12 - we need to make an unordered list and
877:15 - then put some list items in let me get
877:16 - my notes here
877:18 - so we can have a value of static
877:21 - we can have a value of absolute
877:24 - we can have a value of relative
877:30 - and then we can have fixed and the last
877:33 - one is going to be sticky so when i'm
877:36 - talking about this
877:38 - position property all i'm saying is that
877:40 - if we came down
877:41 - and targeted this unordered list
877:44 - and then we gave it a position we can
877:46 - say
877:47 - we want it to be fixed but what does
877:49 - this actually mean well this position
877:52 - property is going to be really handy
877:54 - when we have to
877:55 - lay out things on the page and like make
877:58 - things like nav bars
877:59 - so that's what i'm going to go ahead and
878:01 - show you is an example of how we might
878:03 - make a nav bar
878:04 - and show how that will stay at the top
878:06 - of the page rather than scrolling down
878:08 - when we have content that exceeds the
878:11 - total height of the viewport or the web
878:14 - page that we're looking at a few notes i
878:16 - want to make
878:17 - this first one the static
878:19 - is going to be the default value so if
878:22 - we came down here and defined
878:25 - the position of this unordered list to
878:27 - be static that's kind of redundant
878:29 - because it's already going to be that by
878:31 - default and then the other node i want
878:33 - to make is
878:35 - the sticky property
878:37 - value is going to be a little bit newer
878:39 - it's unsupported in some browsers and
878:41 - i'm not really going to touch on it
878:43 - because we can achieve very similar
878:45 - things with this fixed property
878:48 - all right so those are the possible
878:49 - values let's walk through each of them
878:52 - and see what they actually do for our
878:53 - html
878:55 - so the first thing i want to do is
878:56 - create a nav element so we talked about
878:59 - semantic html in the prior lesson how we
879:02 - want to use what the intent of that
879:04 - element is and if we want to make a nav
879:06 - bar we should use the nav
879:08 - html tag
879:09 - so within that nav we can make some sort
879:12 - of list which would be kind of a list of
879:15 - different links or something
879:17 - but just to keep it simple i'm just
879:18 - going to put in some sort of heading so
879:20 - we'll just put in an h2 element and
879:23 - we'll say
879:24 - this is the nav bar
879:27 - so you're going to see that pop up on
879:28 - the page
879:29 - and it's nothing special at the moment
879:31 - and actually let's go ahead let's make
879:33 - this an h4 just to be a little bit
879:36 - smaller
879:37 - and what we want to do in the css is we
879:39 - want to target that nav element we want
879:42 - to give it a background color of blue
879:44 - we're going to talk about those
879:46 - background styling properties so bear
879:48 - with me
879:49 - here well we don't know about them
879:51 - and then i want to make the height of
879:53 - this equal to we'll call it 60 pixels
879:57 - so you can see we have some sort of nav
879:59 - bar sitting up on the page
880:01 - and i actually don't like this blue
880:03 - let's go ahead and do navy and then
880:05 - change the color of the text
880:08 - to white just to make it look a little
880:10 - bit better and what you'll see is
880:12 - there's some space going on around this
880:15 - we would you know ideally want this to
880:16 - be at the top of the page you know have
880:19 - no white space around it and that's
880:21 - happening for two reasons by default
880:24 - this h4 element is going to have some
880:26 - sort of margin around it it's just a
880:29 - browser default
880:30 - that is set on this element we didn't
880:32 - set it but it's already there
880:34 - likewise codepen has a default that puts
880:38 - some either margin or padding
880:41 - within the body element so anything that
880:43 - we write in this html is going to have a
880:46 - little bit of padding in there so that
880:48 - you know we have this white space so all
880:50 - we have to do is just cancel that out by
880:53 - writing a css rule so we'll start with
880:56 - h4 and we'll just say we want zero
880:58 - margin on there see what that does
881:01 - remove some of the margin
881:02 - and then
881:03 - we want to come down and say on the body
881:06 - we want to have
881:08 - zero margin i don't yeah i guess that's
881:11 - all we needed we just need to zero out
881:13 - the margin and now there's no space
881:15 - around this so
881:16 - looking good there and if we wanted to
881:19 - center this text within the nav bar we
881:22 - can use a little trick um we can use the
881:25 - line height property to basically say
881:27 - okay i want this text to be
881:28 - you know x amount of pixels tall
881:31 - and in this case we know exactly how
881:34 - tall the nav bar is 60 pixels
881:37 - so what we need to do with this h4 is
881:40 - make the line height equal to
881:42 - 60 pixels and now we're going to see
881:44 - that go right in the middle
881:46 - and the last thing we'll do is on the
881:49 - left side of that h4 element let's just
881:51 - put some padding on the left of say 10
881:54 - pixels and that's going to push it out a
881:56 - little bit
881:57 - so i know we haven't talked about a lot
881:59 - of these properties we will in a second
882:01 - but
882:02 - you can see how this is the snav bar is
882:04 - coming together but the problem is right
882:07 - now if we were to scroll down on this
882:09 - page the navbar is going to kind of go
882:12 - away and we don't want that
882:14 - since there's no other elements when i
882:15 - scroll you're not going to see anything
882:17 - so let's go ahead and add
882:20 - a
882:21 - div that has a bunch of boxes in here so
882:24 - we'll say
882:25 - we want to div with a class of box and
882:28 - then let's replicate that several times
882:30 - down
882:31 - and then we'll come down here and style
882:33 - all the
882:35 - classes of box and what we're going to
882:37 - do is we're going to give it a width of
882:39 - 200 pixels and a height of 200 pixels
882:43 - and let's go ahead and give it a
882:45 - background color of
882:48 - i don't know green is fine for now
882:51 - you're going to see just big one big
882:53 - blob because they're all kind of
882:54 - smooshed together
882:56 - but all we have to do is add some margin
882:58 - around it and those are going to be
882:59 - separated out
883:01 - so the reason that i created those is
883:03 - just to give us more than enough content
883:05 - so that we can actually see some
883:07 - scrolling action
883:08 - so now you'll see the scroll bar here on
883:10 - the right because we've got too much
883:12 - content for the visible screen
883:14 - and when we scroll down
883:16 - what happens we're not going to see that
883:18 - nav bar anymore and as you're probably
883:21 - used to with most sites the navbar needs
883:23 - to stay up top
883:24 - and the way that we do that is by using
883:26 - the position property and we can just
883:28 - come into the
883:30 - nav bar right here and we can say that
883:33 - we want the position to be fixed
883:36 - and what that's going to do is a lot of
883:38 - things that we don't expect and it's
883:40 - going to look a little bit intimidating
883:41 - for a second until we figure out exactly
883:44 - what's going on
883:45 - so when we put it to fixed it actually
883:48 - takes that element out of the the flow
883:51 - of the
883:53 - html document so previously we talked
883:56 - about how we have block elements and
883:58 - inline elements and if we change those
884:01 - you know it kind of breaks them out of
884:02 - the flow of the content
884:04 - likewise with the position fixed
884:06 - property now what's going to happen is
884:09 - we have to explicitly set the width of
884:11 - this
884:13 - so let's go ahead and set the width to
884:14 - be 100 of its container
884:17 - and that should span it across the
884:19 - entire
884:20 - web page here another way that we could
884:23 - do that
884:24 - is a property called 100 viewport width
884:28 - so vw
884:29 - and that is actually the same thing if
884:32 - we just came over to let's come over to
884:34 - our devtools in firefox
884:36 - and if you remember we could say window
884:39 - dot inner
884:41 - height and get some sort of value here
884:44 - and this means that the height of the
884:46 - visible window here is 966 pixels
884:50 - we can also get the inner width
884:53 - right here which is
884:55 - 773 and if we were to you know change
884:58 - this right here and run it again it's
885:00 - going to be a different value because
885:02 - the visible
885:03 - width of this
885:04 - viewport changed
885:06 - so
885:06 - these properties we know how to get them
885:08 - in javascript through the dom but we can
885:11 - also get them within css by using either
885:14 - 100 viewport width or 100 viewport
885:17 - height so vh
885:19 - so
885:20 - that is just a really useful
885:22 - thing to know i use it all the time
885:24 - especially when i'm making full page
885:26 - layouts and nav bars and stuff like that
885:28 - now the last thing about a position
885:31 - fixed element is that you have to
885:33 - specify
885:34 - the offset that you have to its parent
885:37 - container
885:38 - now in this case the parent container of
885:40 - our nav is going to be the body element
885:43 - and that's going to be basically this
885:44 - visible screen right here
885:46 - so all we have to do is come down and
885:48 - say from the top i want it to be zero
885:51 - pixels and that's gonna pull it up to
885:53 - the top and then since we have it as a
885:56 - hundred percent or a hundred percent
885:58 - width we don't really need to define
886:00 - this other one but let's go ahead and
886:01 - say
886:02 - we want it to be zero pixels from the
886:04 - left
886:05 - so at this point what we can see is that
886:08 - as we scroll down our nav bar stays at
886:11 - the top and it's considered fixed
886:14 - positioning
886:15 - the last thing that we would probably
886:16 - want to do is address this issue right
886:19 - here
886:20 - our boxes or our main content
886:23 - has now spilled under our fixed nav bar
886:27 - and the reason is because this fixed nav
886:29 - bar doesn't take up any space so unlike
886:32 - a block element or even an inline
886:34 - element that takes up some sort of space
886:37 - to the html document this nav bar
886:40 - occupies zero space whatsoever
886:43 - so
886:44 - to make sure that the main content is
886:46 - below it at all times we have to give a
886:48 - margin on the top of this
886:52 - boxes div class so we come down to the
886:56 - css give it
886:58 - target that class and then we say we
887:00 - want to give the margin top
887:02 - probably should be
887:04 - a little more than 60 pixels so let's
887:06 - just go ahead and say 80 pixels
887:09 - and that should bring all of our boxes
887:11 - down and now it's working just fine
887:13 - so that is the fixed positioning and
887:17 - it's going to be really useful when
887:18 - you're trying to make a nav bar at the
887:20 - top even at the side on the right side
887:23 - or even a footer at the bottom of the
887:24 - page that's a really good use case for
887:26 - this the last couple position uh
887:29 - property values that we can use so
887:32 - absolute and relative positioning
887:35 - again we're not talking about static
887:36 - because that's the default and sticky
887:39 - because that's kind of out of the scope
887:40 - here but when we're talking about
887:43 - a fixed positioning what we just looked
887:45 - at
887:46 - that's going to set the element it's
887:48 - going to remove it from the flow of the
887:50 - document and take up zero space and it's
887:53 - going to be positioned relative to the
887:55 - viewport which is always going to be the
887:58 - edges of the browser window so as you
888:01 - saw we said we want it to be zero pixels
888:04 - from the top so at the very top of the
888:06 - viewport and zero pixels from the left
888:08 - so the very left of the viewport
888:10 - now with
888:12 - relative and absolute positioning it's
888:14 - somewhat similar we're still pulling
888:16 - things out of the flow or at least with
888:18 - absolute positioning we're pulling them
888:20 - out of the flow of the document
888:22 - but we're positioning them relative to
888:24 - other elements
888:26 - so let's play around with relative
888:28 - positioning first
888:30 - so let me target this first box right
888:32 - here and what i want to do is i want to
888:35 - give it another class
888:37 - called
888:39 - rel position just to give it some
888:41 - indication of what it's doing
888:43 - and then within this i want to make
888:45 - another div
888:47 - and i want to say this will be absolute
888:50 - position we're not going to do anything
888:52 - quite yet with that but i'll show you
888:54 - what it does in just a second so let's
888:56 - focus in on this relatively position box
888:59 - which is this first green box that we're
889:01 - targeting
889:02 - we'll come down into our css
889:04 - and all we're going to do is give this
889:06 - relative position class
889:09 - a relative position
889:10 - and what you're going to see here is
889:13 - nothing has happened yet but what
889:15 - happens when we scroll
889:17 - is now this first box goes on top of our
889:20 - nav bar
889:21 - so only the first box though the rest of
889:23 - them go behind it and that is a direct
889:25 - result of setting that relative
889:28 - positioning on the element because what
889:30 - that does like i said with a lot of css
889:33 - properties setting one value will kind
889:36 - of change the rules of the game
889:38 - it's no different here what this does is
889:41 - enables a new property called z index
889:44 - which basically says okay we've got all
889:46 - these elements on the page what is the z
889:48 - index you know three-dimensional rather
889:51 - than two-dimensional so which one sits
889:53 - on top of another
889:54 - and when you put
889:56 - relative positioning or absolute
889:58 - positioning on an element
890:00 - it now has the z index so now what we
890:03 - have to do is define
890:05 - what needs to be on top of another so we
890:07 - need to come up to the nav bar and give
890:10 - it a z index of 1 to put it on top of
890:14 - this
890:15 - element once again so that's something
890:17 - really important to know about the
890:18 - relative positioning
890:20 - but what relative positioning really
890:22 - does is it
890:24 - as you saw it didn't really change the
890:26 - actual position of that box
890:28 - but now what we can do is define these
890:32 - top
890:33 - left right and bottom properties
890:36 - on this element and it will
890:38 - change its position relative to itself
890:41 - so that's kind of a
890:43 - confusing topic but basically the way
890:45 - you can think of it is if that green box
890:48 - is sitting right there right now
890:50 - if we
890:52 - give it a
890:53 - top value and we say
890:55 - 20 pixels
890:57 - it's going to go down 20 pixels
891:02 - and
891:02 - confusingly enough
891:04 - since our i believe our margin was 20
891:07 - pixels exactly it's going to blend it
891:09 - into the other boxes so let's let's go
891:12 - ahead and
891:13 - make this 10
891:14 - so that we see some separation still but
891:16 - it basically takes the original position
891:18 - and if we add the top property it will
891:21 - go 10 pixels below where it was to begin
891:24 - with
891:25 - so it's a little bit confusing but it is
891:27 - a useful
891:29 - type of positioning
891:30 - especially when you have some stubborn
891:32 - elements in your html that you just need
891:34 - to get to move just a little bit but you
891:36 - can't quite do it with
891:38 - normal css properties
891:40 - and finally if you set the rel the
891:43 - position to relative on a parent element
891:46 - then you can set absolute positioning on
891:49 - the element within that parent element
891:52 - so what we can do is we can look at this
891:55 - div that we put within the relatively
891:58 - positioned div
891:59 - and we can take this class
892:01 - and target it with our css so we'll
892:04 - target the absolutely positioned element
892:06 - which is not showing up yet but let's go
892:09 - ahead and give it a width of 20 pixels
892:11 - and a height of 20 pixels
892:14 - and give it a background color of say
892:16 - orange so we're going to have all sorts
892:18 - of nasty colors here on the screen
892:20 - and what you'll see is that by default
892:23 - it's going to sit up there in the top
892:24 - left corner of its parent
892:27 - and that's because we haven't positioned
892:29 - it yet so
892:30 - let's give it the absolute
892:33 - positioning and what that's going to do
892:35 - is now we have those top
892:38 - uh bottom right and left offsets enabled
892:42 - on this specific element but instead of
892:45 - being an offset based on the viewport so
892:48 - with this fixed nav bar
892:50 - whatever we pass to those
892:52 - properties is going to be in relation to
892:54 - the
892:55 - edges of your viewport
892:57 - now we're going to be setting these
893:01 - top right bottom left offsets based on
893:04 - the position of the next highest element
893:07 - that has relative or absolute
893:09 - positioning and if there's nothing above
893:11 - it that has those positionings then it's
893:14 - going to use the html element or the
893:17 - root element so
893:19 - in this case we have something that is
893:21 - relatively positioned as the direct
893:23 - parent which is this green box so if we
893:26 - were to come down to the absolute
893:28 - position and say we want to put it 20
893:30 - pixels from the top
893:32 - it's just moving it down 20 pixels
893:34 - relative to the edges of this parent
893:37 - container
893:38 - and then we can put it
893:40 - i don't know we can say from the right
893:41 - we want it to be 30 pixels so it's going
893:43 - to pull it over to the right and offset
893:46 - it 30 pixels off of that right edge
893:49 - so that's what the absolute positioning
893:51 - does and it has to be used in relation
893:54 - with that relative positioning once
893:56 - again if you don't have an apparent
893:59 - element that is relatively positioned so
894:02 - let's go ahead and
894:04 - remove this
894:07 - position relative
894:08 - and now it completely disappears and you
894:11 - probably are asking yourself where did
894:13 - this just go
894:15 - and the answer is it's i'm thinking it's
894:17 - probably behind the nav bar so let's go
894:19 - ahead and give it a z index of 2 which
894:23 - is greater than the navbar which has an
894:26 - index of 1
894:27 - and now you can see it pop up up here in
894:30 - the nav bar and the reason it's up there
894:32 - is because since we don't have any
894:34 - relatively positioned elements as its
894:37 - parent or you know grandparent it's
894:40 - positioning itself relative to the
894:42 - viewport just like we saw with the fixed
894:44 - positioning
894:45 - so now
894:46 - what we can say if we look at this
894:48 - absolutely positioned element if we
894:51 - change the top to be zero and the right
894:54 - to be
894:55 - also zero it's going to be perfectly up
894:57 - in the top right corner
894:59 - as you can see here in the screen as you
895:01 - can see these position properties can
895:03 - really help you control where the
895:05 - elements sit on the page
895:07 - and they're really powerful layout
895:09 - properties
895:10 - obviously you're not going to be a
895:11 - master of them after just watching this
895:13 - brief tutorial or demo
895:16 - but hopefully it exposed you to what's
895:18 - possible and when you stumble upon it in
895:20 - the future or in the code challenges
895:22 - you'll know exactly what's going on if
895:24 - i'm being honest we've made it through
895:26 - the hardest part of css
895:29 - in the first part of this course the
895:31 - remainder of this video and this crash
895:33 - course is going to be a little bit more
895:36 - fun a little bit more straightforward
895:38 - and you're going to really start to see
895:39 - the magic of css coming into play
895:42 - so in the remainder we're going to talk
895:44 - a little bit about css units so we've
895:47 - looked at them already but
895:49 - pixels
895:50 - em rem units
895:52 - percentages
895:54 - maybe a couple others that actually
895:55 - that's probably it and then we're also
895:57 - going to look at color codes and
895:59 - different color stylings so we've been
896:02 - using the color property to change the
896:04 - text color throughout this tutorial but
896:06 - we're going to get into you know how do
896:08 - we define different colors and you know
896:10 - how do we do color themes and stuff like
896:12 - that
896:13 - and then we'll dig into font properties
896:15 - so how do we change the font that's on
896:17 - the page and different font families and
896:20 - import fonts and stuff like that
896:22 - and then finally we will talk about
896:24 - background properties so how do we make
896:26 - an image as the background of your web
896:28 - page
896:30 - and then at the end i'm going to talk
896:31 - about
896:32 - writing shorthand css so that's going to
896:35 - bring a few things together that
896:37 - you may catch on to as we write it but
896:40 - that'll be pretty interesting and then
896:42 - to cap it off i'm going to give you my
896:44 - kind of four-step system of how i think
896:46 - through
896:48 - putting together html and then styling
896:50 - that with css
896:52 - effectively so it's basically like get
896:54 - the layout first then
896:56 - put the you know styles on and you know
896:59 - iterate over that process
897:01 - before we get into the remainder of the
897:03 - css properties some common ones you'll
897:05 - use we have to talk about measurement
897:08 - units within css
897:10 - so you can see them on the screen here
897:12 - pixels pretty straightforward and common
897:15 - em and rem those are font units uh like
897:18 - measuring how large the font on the
897:20 - screen is and then percentages that's
897:22 - going to really play into some
897:24 - responsive design that we'll talk about
897:26 - in a later video
897:27 - so we'll start with pixels and it's
897:29 - you've probably already looked it up
897:31 - seen me using it it's relatively
897:33 - intuitive but your computer screen is
897:36 - made up of pixels and the higher
897:38 - resolution your computer screen is the
897:40 - more pixels you can cram into it
897:43 - so there's
897:44 - it gets into a pretty complex discussion
897:47 - when you actually start
897:49 - thinking about it too much
897:51 - when you're looking at a web page and
897:53 - trying to calculate how many pixels
897:54 - exist on that web page but if you just
897:57 - look at it as
897:58 - a way to explicitly set the dimensions
898:01 - of html elements it's pretty simple
898:04 - so for example
898:06 - you saw that we made this little orange
898:08 - box in the top right corner we set it
898:10 - equal to a width and height of 20 pixels
898:13 - so that's obviously somewhat small
898:16 - and something that i wondered when i was
898:18 - first starting out is how do i get a
898:19 - good grasp of how many pixels to assign
898:22 - to certain types of
898:24 - elements and it's kind of like riding a
898:26 - bike like as you go through and write
898:29 - more and more css you'll get a feel for
898:33 - what are kind of the average pixel units
898:35 - that you'll be assigning to different
898:36 - types of things so for example i know
898:39 - that whenever i set padding or margin
898:41 - it's usually going to be in the range of
898:43 - 10 to 20 pixels
898:45 - when i set a border radius it's going to
898:47 - be in the range of 4 to 7 pixels and so
898:50 - on and so forth you kind of get a feel
898:52 - for how large
898:53 - um a pixel is after you've written css
898:56 - for a while next up i'm gonna skip down
898:58 - away from those font uh units so talking
899:01 - about em and rem i'm gonna skip those
899:03 - for a second and talk about percentages
899:06 - now percentages are kind of the
899:08 - preferred way in a lot of cases to
899:11 - define the width and height of certain
899:13 - elements on the page because when you go
899:16 - from a desktop to
899:18 - a mobile device you're going to need
899:21 - relative dimensions rather than just
899:24 - saying oh i want this element to be 500
899:27 - pixels so a good example of this let me
899:29 - just take what i've got here on the
899:31 - screen
899:32 - and i'll go ahead and
899:34 - restyle this first box so it's the
899:38 - relatively positioned box
899:40 - i'll leave it how it is and i'm just
899:42 - going to say that i want the width to be
899:45 - 600 pixels
899:46 - and what it's going to do is it's going
899:48 - to be wider now
899:50 - and the problem here is that when i
899:52 - resize this screen and we go to a mobile
899:55 - device
899:56 - it's going to get cut off so as i make
899:59 - this smaller and smaller you're going to
900:01 - see that that box just goes off the
900:03 - screen completely
900:05 - and the problem with that is
900:07 - you know you want to have responsive
900:09 - designs so a better way to do this is to
900:13 - say i want the width to be i don't know
900:16 - we'll call it 80 percent
900:18 - of the container
900:20 - so as we resize this you're going to see
900:22 - that that
900:23 - always stays 80 percent of the container
900:26 - that it's within and that's a great way
900:28 - to write responsive web pages and again
900:31 - we're going to be talking a lot more
900:33 - about that responsive design in a
900:35 - separate video but that's why
900:37 - percentages matter in the first place
900:39 - now something about percentages that can
900:41 - get a little bit confusing is it's all
900:44 - relative to its container
900:46 - so let's go ahead and apply a few
900:48 - concepts we've learned so
900:50 - the question is how do we get this
900:51 - little orange box back in the green box
900:54 - so that we can play around with this
900:56 - well all we have to do is set the
900:58 - position back to relative so this orange
901:00 - box is going to now be relative to the
901:02 - green box so when i uncomment this
901:05 - property right here
901:07 - it's going to put this orange box in the
901:09 - top right corner of the green box so at
901:12 - least i think that's what's going to
901:13 - happen
901:14 - and that's exactly what happened so we
901:16 - now have that there and now what i'm
901:18 - going to do is
901:20 - go ahead and reposition this so instead
901:22 - of
901:23 - being in the top right we're going to
901:25 - put it in the top left
901:27 - so we'll put in the top left and now
901:29 - what we're going to do is give it a
901:31 - width in terms of percentages rather
901:33 - than pixels
901:35 - so what happens if i give it a width of
901:37 - 100
901:38 - well now it spans the entire width of
901:41 - its parent element not the entire web
901:44 - page because it exists within that
901:46 - parent element so it's going to occupy
901:48 - the width of the parent element
901:51 - in other words if we were to set
901:53 - i'm just going to do this to make the
901:55 - math a little bit more simple but let's
901:57 - go ahead and set this green box equal to
902:01 - say 500 pixels
902:03 - so the calculation for this orange
902:07 - element is going to be
902:08 - 500 pixels times 100
902:12 - is equal to 500 pixels
902:14 - and if we were to change this
902:16 - positioning to
902:18 - call it
902:19 - 80
902:20 - now it's going to be 80 of 500 which is
902:23 - i guess
902:24 - 4 400 pixels yeah about 400 pixels is
902:28 - what this is now
902:30 - so you can see it's relative to its
902:32 - container not relative to the entire web
902:34 - page when we define percentages we've
902:37 - talked about pixels and percentages now
902:39 - let's talk about em and rem units
902:42 - so these are
902:43 - specific to font sizes
902:46 - and we haven't really talked about fonts
902:47 - yet but we have looked at text on the
902:50 - screen so why don't i go ahead and put
902:53 - some text within our absolutely
902:55 - positioned div so now we've got some
902:58 - text here
902:59 - and we can change the size of that text
903:01 - using the font size property we'll talk
903:03 - about that a little bit later but if we
903:05 - came down into our absolutely positioned
903:07 - element
903:09 - and we give it a font size
903:12 - we can say it can be 16 pixels which is
903:15 - generally the standard font size of a
903:17 - paragraph element
903:19 - so you won't see it change because
903:20 - that's probably the default that it
903:22 - already is but if we went and changed
903:25 - that to say 18 pixels you'll see that
903:27 - the text gets a little bit larger now
903:30 - when we're talking about em in rem units
903:33 - that's kind of the more preferred way to
903:35 - define text sizes within a web page and
903:38 - the reason being is if you're going
903:40 - around hunting and pecking for you know
903:43 - trying to find all of the different css
903:46 - rules that you've defined font sizes in
903:48 - it gets pretty difficult you want to
903:51 - define it at one level so at the top
903:53 - level of the document and then
903:55 - everything else needs to be relative to
903:57 - that
903:58 - assignment
903:59 - so what you'll generally see with font
904:02 - sizes
904:03 - is you'll see
904:05 - the html element so if we target the
904:08 - root element itself
904:10 - and we give it a font size you'll
904:12 - generally see it be set to about 16
904:14 - pixels
904:16 - from there
904:17 - you will then define elements below that
904:20 - root element in relation to that
904:23 - 16 pixels so if i came down to the
904:26 - absolute positioned element so this text
904:29 - right here and i said that i want the
904:31 - font size to be
904:33 - one
904:34 - rem
904:35 - that means that it's going to be 100
904:38 - of the size of the text in the root
904:41 - element or rem
904:43 - so in this case the root element is html
904:47 - and the font size is 16
904:49 - so if we define it as one rem then that
904:52 - means that we're doing 100
904:54 - of 16 pixels or in other words 16 pixels
904:58 - and if we change this to say 1.2 rem
905:02 - that would be 120
905:05 - of 16 pixels which
905:07 - i don't think i can do that in my head
905:08 - right now so
905:10 - you figure that out with the calculator
905:11 - on your own but basically it makes it
905:13 - larger than the default font size
905:16 - likewise we can also use em units and
905:20 - that basically means relative to its
905:23 - parent element so if we have this
905:25 - relatively positioned element which is
905:27 - the green box right here
905:30 - and we set the font size
905:32 - right here to 16 or no we'll go ahead
905:35 - and say something
905:37 - a lot larger so that we can distinguish
905:39 - this
905:39 - so the relatively positioned element is
905:42 - going to have a font size of 24 pixels
905:44 - and then if we came down and we said we
905:46 - want one e m
905:49 - in the child element it's gonna set it
905:51 - exactly equal to this 24 pixels but if
905:55 - we change this back to rem units now
905:58 - it's going to go back to the 16 pixels
906:00 - because now it's relative to the html
906:02 - declaration which at the top
906:05 - is a font size of 16 pixels
906:07 - so as you can see the benefit of doing
906:10 - this and using these em and rem units is
906:13 - you can define it one time and then
906:16 - everything else is relative to that so
906:18 - let's say that you have your web app and
906:20 - you would originally define it to 14
906:23 - pixels
906:24 - and then you start using the app and
906:26 - your users start complaining oh
906:28 - everything's too small
906:29 - instead of going and changing every css
906:32 - rule all you have to do is go up to the
906:34 - root element
906:35 - change that and then everything else is
906:36 - relative to that so that would be the
906:39 - benefit of using em in rem units
906:41 - speaking of fonts
906:44 - let's go ahead and see how we can set
906:46 - custom fonts on our html
906:49 - so i'm going to get rid of all this
906:51 - because all these colors are driving me
906:54 - nuts
906:55 - they're just so ugly i can't can't deal
906:58 - with them anymore so let's get a clean
907:00 - slate so let's go ahead and put a
907:02 - heading element
907:05 - and
907:08 - some paragraph text
907:12 - and then maybe one more um
907:16 - we'll call this the original style text
907:19 - and what we'll do
907:21 - here is this will be
907:23 - the
907:24 - original id and what we're going to
907:27 - style this as is we'll we'll put these
907:29 - two as a new font style and then we'll
907:32 - keep this one as the original just as a
907:34 - reference point when we're dealing with
907:36 - fonts in my head at least there's about
907:38 - four properties that are highly relevant
907:41 - that you have to know the first font
907:43 - property that we're dealing with is the
907:45 - font
907:46 - family which is going to define what all
907:49 - of the text on your web page in your web
907:51 - app what that's going to inherit
907:54 - and especially if you define it on the
907:55 - body or even the html so the the whole
907:59 - document you can define the font family
908:01 - and that's going to apply to everything
908:02 - within the document
908:04 - unless something is of course
908:05 - overwritten with a font family on a you
908:08 - know more specific element but let's go
908:10 - to the documentation i just searched for
908:12 - the font family property
908:15 - you could also go to technology css
908:18 - reference
908:19 - come down to the index and then
908:22 - somewhere in the f here we can find the
908:25 - font family looks like it might be at
908:27 - the very bottom though
908:31 - okay so here's the font family so that's
908:33 - how you get there
908:34 - and as you can see
908:36 - we are giving two values to this or you
908:39 - don't have to but in most cases you're
908:42 - going to give two values to this the
908:43 - first one
908:44 - is going to be the font family that
908:46 - you're wanting to specify
908:48 - and there's a bunch of built-in font
908:49 - families that you can use
908:52 - let me just see what we can find
908:55 - default font families
908:58 - there's probably a resource
909:02 - i think this is the one i clicked on
909:03 - before so
909:06 - w3.org it looks like this defines a lot
909:09 - of those default families that are
909:10 - available in all your browsers
909:12 - so this first one is going to represent
909:15 - the family and then the second one or
909:18 - the second argument we will call it to
909:20 - this property is going to be the
909:22 - fallback font
909:24 - so there's only a couple of valid
909:26 - fallback fonts and they're literally
909:28 - just like the
909:29 - type of font so everyone knows like a
909:32 - serif and a sans-serif font and then
909:34 - like there's a mono space font which is
909:37 - more like a typewriter type thing
909:39 - so those will be fallbacks for if the
909:41 - browser doesn't support the first one
909:42 - that you define
909:44 - but let's just go ahead and look in at
909:46 - an example in most cases you're just
909:49 - going to put them in quotes that first
909:50 - one because it'll be two words so let's
909:53 - copy this one in that's a good example
909:57 - so we'll put that in there and you'll
909:58 - see how this changes
910:00 - and i can comment it out
910:02 - you'll see it change and then uncomment
910:04 - it and you'll see the change of this
910:06 - font
910:07 - now the question is what happens if we
910:09 - want something more custom what if we
910:11 - want like a really nice looking
910:12 - professional font
910:14 - well there's a couple ways that you can
910:16 - do this in css and a couple of them i'm
910:19 - not going to walk through but the
910:20 - easiest way is to go to google fonts so
910:24 - let's open up
910:26 - google fonts
910:27 - and go here and then from from this page
910:30 - we can search through all different
910:32 - categories of fonts so let's say that we
910:34 - want only serif fonts
910:36 - and then we can go down to
910:38 - oh i guess different languages that
910:40 - they're available in
910:42 - and
910:43 - different font properties so
910:45 - let's scroll down and just pick
910:47 - something um
910:49 - see if i can find one that might be a
910:51 - little bit popular i believe you can
910:53 - sort by
910:54 - trending or most popular
910:56 - so maybe we look at roboto rubato slab
911:01 - all right so that's a good one
911:03 - and from here you just go down to all of
911:06 - these different font weights and styles
911:08 - and you click select this style
911:11 - so in this
911:12 - in pretty much every case you're going
911:14 - to select the regular
911:16 - so we'll click select that style
911:18 - and what you'll notice is that
911:21 - in this link that we're going to use in
911:24 - just a second it looks like it's just
911:27 - pulling in a default link but the second
911:29 - we
911:30 - add in a different weight so let's say
911:33 - that we want the boldest version of this
911:36 - font and we click select style
911:38 - now you're going to see that there's
911:40 - this little parameter in here that
911:42 - defines that we want the weight of 400
911:45 - and 900 and each additional weight that
911:48 - you add is going to add a little bit
911:50 - more
911:51 - size to this import so you have to be
911:54 - careful with that but for the most part
911:56 - grab a couple and you should be good
911:58 - so in this case we have a regular font
912:00 - and we have a very bold font
912:02 - and all we have to do is
912:04 - take this link tag which is a valid html
912:07 - tag that we had talked about earlier and
912:10 - that's actually how you import style
912:11 - sheets to an html document
912:14 - and we'll come back to our
912:16 - codepen playground
912:18 - and come up to
912:20 - settings um
912:22 - i believe html
912:24 - and then in this
912:26 - section here stuff for the head we can
912:28 - just paste in those link tags
912:30 - and now those fonts have been imported
912:33 - into our document and we can access them
912:36 - with css
912:37 - now this is a little bit different than
912:40 - how you would do it if you were writing
912:41 - outside of the code pen environment so
912:44 - just for a second i'm going to comment
912:46 - out all of this html
912:48 - and show you exactly how you would do
912:50 - this
912:51 - on your own so you're going to need an
912:54 - html
912:56 - a body
912:57 - and then of course the head so this is
912:59 - our basic structure of an html document
913:02 - and then you'll of course have a link
913:05 - to your styles.css or something like
913:07 - that
913:08 - so this will be representing your
913:10 - stylesheet
913:12 - not here but in a different document it
913:14 - would
913:15 - and then you can also copy in those link
913:18 - tags that
913:19 - we imported from google fonts
913:22 - so this is how you would basically
913:24 - import a font to a custom html document
913:27 - that's outside of this
913:29 - you know nicely programmed codepen
913:32 - environment
913:33 - so anyways let's get rid of that we
913:35 - don't need that
913:37 - we'll uncomment
913:38 - or
913:39 - not uncomment
913:42 - okay so we're back to
913:44 - the start and now all we have to do is
913:47 - replace these two
913:49 - lines with the imported font if you go
913:52 - back to roboto or roboto slab
913:55 - you're going to see that the css rules
913:58 - to specify this family is right here so
914:00 - we can just copy that
914:02 - come back here and replace this whole
914:05 - line
914:06 - and now you watch the text change to
914:08 - this new font
914:09 - so that's how you would import a custom
914:12 - font it's pretty much how i always do it
914:14 - for a lot of my web pages and apps is
914:17 - use google fonts it's free and very easy
914:19 - to use
914:20 - so that is the first and most important
914:23 - css property when we're dealing with
914:25 - fonts we'll go ahead and give a font
914:27 - size of 16 pixels because we're on the
914:30 - root html element and that is a very
914:32 - standard value to be giving
914:35 - an entire web page
914:37 - now what gets interesting
914:38 - is the font weight property
914:41 - so font weight determines the thickness
914:44 - of that font but the
914:46 - interesting thing about this one is you
914:48 - can only use the weights that you've
914:50 - imported if you're using something like
914:52 - google fonts
914:53 - so if you remember when we were looking
914:55 - at this we only imported a weight of 400
914:59 - and
915:00 - 900 which means if we give
915:03 - the um let's go ahead and target a
915:05 - specific element
915:07 - so in this case
915:08 - uh let's let's say this will be thick
915:11 - font
915:13 - and
915:14 - target that by its id and then give it a
915:17 - font weight of 900
915:20 - and you're going to see that this goes
915:21 - bold because we're specifying it to be
915:23 - 900 but since we only imported that one
915:27 - weight if we change this to say
915:29 - you know 700 it's not going to change
915:32 - anything on the page and the reason is
915:34 - we didn't import it but if we were to
915:37 - change this back down to 400 then it's
915:40 - going to go back to normal because we
915:41 - did import the 400 or regular font size
915:46 - so that's that's how the font weight
915:48 - property is related to those imports
915:50 - that you will do the last thing we'll
915:51 - talk about is line height so let me put
915:53 - in a paragraph tag and here let's go
915:56 - ahead and copy some lorem ipsum font
915:58 - which is basically just generic
916:00 - text that we can use
916:02 - and what you'll see on the page is very
916:04 - normal looking text now if we change the
916:07 - line height so if we target the
916:11 - paragraph elements and give it a line
916:13 - height of
916:14 - call it 30 pixels
916:17 - you're going to see that it spaces this
916:19 - out a little bit more than the original
916:21 - and i believe the default line height is
916:24 - going to be the same as the font size
916:26 - but
916:27 - i could be wrong on that i would have to
916:29 - check
916:30 - but basically let's let's see we can
916:32 - actually check that so we'll go one rem
916:35 - and it looks like no it's not the same
916:38 - as the font size because it definitely
916:40 - got smushed a little bit more
916:42 - but anyways
916:43 - line height is basically going to give
916:44 - you the space between the lines of text
916:47 - when there's multiple lines of text
916:49 - we are getting to the end here we have a
916:51 - couple more topics to cover and one of
916:53 - those is colors
916:55 - so there's not a whole lot to know about
916:57 - colors but i do want to walk through
916:59 - some of the basics
917:01 - so far we've been talking about just
917:04 - basic
917:04 - you know color so if we came into our
917:07 - paragraph
917:08 - element here we give it a color of say
917:11 - red
917:12 - now red is pretty easy to understand
917:14 - it's the color red but that is a
917:16 - built-in css property and i'm wondering
917:20 - if there's a resource that has all of
917:23 - those potential properties so if you go
917:25 - to the mdn documentation
917:28 - go to the color property so the color
917:31 - css property
917:32 - and then i believe there should be
917:35 - some sort of list of all of the possible
917:39 - colors that you can use
917:41 - let's see if we can find it here so it
917:43 - looks like here's a few of the color
917:45 - keywords that you can use
917:49 - this looks like a list i don't know if
917:51 - this is exhaustive
917:52 - of all of the possible ones but it sure
917:54 - looks like it
917:56 - so
917:56 - you can just go to
917:58 - color value is where that is on the
918:00 - documentation but that's what we've been
918:03 - looking at so far and there are also
918:05 - other ways that you can define colors so
918:08 - you can define it as a hex or
918:10 - hexadecimal
918:12 - you can define it as rgb
918:14 - or you can define it as rgba so
918:18 - we'll walk through all of these and i'll
918:19 - show you exactly what they do to help us
918:21 - out a little bit we're going to use this
918:23 - built-in color picker
918:25 - just type in rgb to hex or vice versa
918:27 - and usually comes up on google there's
918:30 - other tools that you can use as well
918:32 - let me zoom in so that we can really see
918:34 - what we're dealing with here
918:35 - and you'll see that in this color picker
918:38 - we can drag to look for different colors
918:40 - we'll just stop here on this green
918:42 - and what you'll see is all these
918:43 - different codes
918:45 - so we could just type in to our css we
918:48 - could just say we want
918:50 - green or we want something like light
918:52 - green those are both valid
918:54 - values but if we wanted to be more
918:56 - specific and go with a color theme we're
918:59 - going to have to use
919:00 - something a little bit more complex
919:02 - and these color codes allow us to get to
919:05 - a very finite amount of detail with our
919:08 - colors
919:09 - and what you need to understand is that
919:11 - each color is built with red green and
919:14 - blue
919:15 - which is defined by this rgb value so
919:18 - the first number
919:20 - is going to be red then green and then
919:22 - blue
919:23 - now these numbers go from 0 to 255
919:27 - i believe that's one byte
919:30 - is how much space that takes up in
919:32 - memory
919:33 - and
919:34 - each different combination of those bite
919:37 - values are going to give you a different
919:39 - color based on the blending of those red
919:41 - green and blue values
919:43 - and if you were to take these three
919:45 - values and convert them to hexadecimal
919:48 - notation which is just a numbering
919:50 - system
919:51 - you get this code right here so
919:54 - the 128 would be represented by 80 in
919:58 - hexadecimal
919:59 - 235 would be represented by e and b
920:03 - in hexadecimal and 52 uh oh just drag
920:07 - something around there 52 will be
920:09 - represented by 34 in hexadecimal so
920:12 - these are the same exact thing just
920:14 - expressed with different notation
920:17 - now there's one other thing that we can
920:18 - do and that is add an rgb a value
920:22 - so let's go ahead and copy
920:25 - this hex code in so we'll copy that into
920:28 - our our color for text color
920:32 - and you'll see that it changed a little
920:33 - bit
920:34 - and that works we can also come back and
920:36 - grab the rgb values and then in our css
920:40 - all we need to do is type rgb put some
920:43 - parentheses and separate those values
920:46 - from 0 to 255 by commas
920:49 - now there's one trick that you can use
920:50 - if you add an a at the end of the rgb
920:54 - you can define one more value within
920:57 - this i guess array or whatever we're
920:59 - calling this
921:01 - and this represents the opacity that
921:03 - we're going to define
921:05 - so if we wanted 100 opacity basically
921:08 - the same color we give it one
921:10 - and that's going to give us the same
921:12 - color but if we wanted 50
921:14 - opacity you give it 0.5 and you can see
921:17 - how this has been kind of grayed out we
921:20 - can actually use our
921:22 - our new skills of absolutely positioning
921:25 - an element
921:26 - let's go ahead and write a div in here
921:29 - and we'll say
921:30 - uh overlay
921:33 - and come down and style this so we'll
921:35 - say overlay
921:37 - is gonna be a width of 200 pixels
921:41 - a height of 200 pixels
921:43 - and then we're going to give it the same
921:46 - exact color right here
921:48 - so and then maybe the p color will just
921:51 - be
921:52 - uh black by default so that we can see
921:54 - it really well and then
921:58 - this overlay is not showing up and why
922:00 - is it not showing up hold on
922:02 - oh that is because we've set the color
922:05 - we need to set the background color to
922:07 - actually get something to show up
922:09 - now this is not over the text yet but
922:11 - all we have to do is say
922:13 - position
922:15 - absolute
922:16 - and then give it 0 from the top
922:20 - and
922:22 - there we go so we've now got this box
922:24 - sitting on top of this text and you can
922:27 - see that we can actually see the text
922:29 - through it because we've given it this
922:31 - 50 opacity value if we flip that to one
922:35 - it's going to disappear because it's 100
922:37 - percent opacity and it's covering all of
922:39 - the text so that's what the rgba
922:43 - css
922:44 - value is able to do with colors now
922:46 - speaking of colors
922:48 - i recommend going to adobe color which
922:51 - is a great place to kind of explore
922:53 - different color themes
922:54 - and it will show you like all the
922:56 - different complementary colors to
922:58 - certain codes
922:59 - you can even go to explore or go to
923:02 - trends
923:03 - and you can look through different color
923:05 - themes that people have put together
923:08 - for different you know niches so graphic
923:10 - design illustration architecture game
923:13 - design and you can go in and click on
923:15 - these palettes and it will give you all
923:17 - the hex codes that you need and you can
923:19 - set those up in your global css values
923:22 - and then your whole web page is going to
923:24 - be themed in a uniform way
923:27 - all right let's get rid of all this
923:28 - stuff because we're ready for the uh
923:31 - i think the last
923:33 - category of css properties that you'll
923:36 - probably need to be aware of and that is
923:38 - background properties
923:40 - so far we have talked about background
923:42 - colors and
923:44 - you've seen me do this with these boxes
923:46 - where i'm just giving them background
923:48 - colors so that we can see them on the
923:50 - screen but you can also do background
923:53 - images and with background images there
923:55 - are a couple of properties just like we
923:57 - talked about before
923:59 - certain properties set to certain values
924:01 - kind of change the rules of the game for
924:03 - the rest of the the page and that is the
924:06 - same deal with background images so i'm
924:09 - going to walk you through
924:10 - a couple use cases with backgrounds and
924:13 - how you might see them you know in in
924:15 - real life when you actually start
924:17 - putting together web pages the first one
924:19 - is simple like i said we've already
924:20 - talked about it and let me just go ahead
924:23 - and make some
924:25 - simple text on the page just just so we
924:27 - have something but what we're going to
924:28 - target is the body element so that's the
924:31 - whole web page
924:33 - and i'm going to give the body element
924:35 - a background color
924:37 - of green
924:39 - and you're going to see on the screen
924:40 - that it turns completely green
924:43 - so that is the easiest property the next
924:46 - thing that you can do
924:47 - rather than just making a solid color
924:50 - background is you can put a background
924:52 - image on your web page
924:54 - it's actually pretty common for like a
924:55 - home page here's my golf website you'll
924:57 - see that there's a background image
924:59 - there
925:00 - and
925:01 - this background image i've actually
925:02 - pulled this out
925:04 - into its own link so that we can use it
925:07 - within the codepen environment so let's
925:09 - copy this link so that we have it ready
925:12 - and now what i'm going to do is
925:15 - put a div up here and we're going to
925:17 - call it the main
925:19 - content
925:21 - and then we're going to put the text in
925:23 - there just that we have something
925:25 - to see
925:27 - and from here we will grab the main
925:29 - content
925:31 - and we're going to say background rather
925:33 - than background color equal to something
925:35 - like blue we're going to say the
925:37 - background image is equal to a url
925:41 - and i guess i copied in the wrong thing
925:43 - here so let me grab that link again
925:47 - and now we have a url so the problem
925:50 - here is it's only taking up this small
925:52 - amount of space and that is because we
925:54 - have not defined the size of this main
925:57 - content
925:58 - so all we need to do is say the width of
926:01 - the content is going to be a hundred
926:05 - percent of the viewport width so again
926:08 - that's the whole visible screen is 100
926:10 - of that width
926:11 - and what you'll see is there's still
926:13 - some gaps here and that's because
926:15 - the code pen environment automatically
926:17 - adds some margin
926:19 - around the body
926:20 - so what we need to do there is reset
926:22 - that so we'll go to the body and give it
926:25 - a margin of zero
926:27 - so that should bring it in line there
926:30 - and then we have this p element which
926:32 - has some sort of margin on it too which
926:36 - is adding this top margin so we'll make
926:38 - the p margin equal to zero as well and
926:42 - now we have this at the top of the
926:43 - screen
926:44 - so if we
926:46 - come down here and give it a height
926:48 - of
926:49 - percent of the view viewport height
926:52 - now we're gonna see this image across
926:54 - the whole page
926:55 - now obviously this image is not showing
926:58 - what it is like this is
927:00 - who knows what this image is and we need
927:02 - to position it a little bit differently
927:04 - so the way that we do that is we'll use
927:06 - a property called background size and
927:09 - we'll go ahead and set that equal to
927:11 - cover
927:12 - so that's going to cover the whole
927:14 - container that we have it as a
927:16 - background for and then we want to make
927:19 - sure that we specify the background
927:22 - repeat to be no repeat
927:25 - just in case a screen size
927:28 - you know is so big that it has to repeat
927:30 - and then finally i think we need to add
927:33 - in
927:34 - the background
927:36 - position which is going to take two
927:38 - values it's gonna say
927:40 - i think you can just say like bottom
927:43 - right or something like that so let's go
927:45 - ahead and look that up
927:47 - if we go to the documentation
927:51 - and type in background position
927:55 - so it says the background position sets
927:57 - the initial position for each background
927:59 - image
928:00 - it's relative to the position layer
928:04 - okay
928:05 - and you can see that there's multiple
928:07 - different
928:08 - values that you can give it you can give
928:10 - it values relative to different parts of
928:13 - the screen or you can just say position
928:15 - it at the top left or center
928:18 - that kind of thing so
928:20 - what i will do is just position it to
928:22 - the right
928:23 - bottom right works but we can just
928:25 - position it to the right because
928:27 - our golfer here is on the right side and
928:29 - we need to pull it over so that you can
928:31 - see
928:32 - him in the background so this is our
928:35 - basic background image and then from
928:38 - here you can put text on the screen so
928:41 - what if we
928:43 - went up here and said
928:45 - on the body we want the color
928:48 - of the text to be white so that we can
928:50 - see it
928:50 - and instead of paragraph text maybe we
928:53 - have like an h1
928:55 - welcome to
928:56 - my site
928:58 - or something like that and then of
929:00 - course we need to remove that margin
929:02 - because it's messing it up
929:05 - and we'll come down here give it
929:08 - some margin on the top which would be 50
929:10 - pixels
929:13 - actually no we don't want to do that we
929:14 - want to do
929:15 - some padding on the top so that it
929:17 - doesn't
929:19 - bring the whole image down
929:21 - and then
929:22 - maybe we'll say on the body
929:24 - that we want the text alignment to be
929:26 - center so that's
929:28 - centered on the screen
929:29 - so we have a welcome message says
929:32 - welcome to my site and you've got a nice
929:34 - background image there's obviously a lot
929:36 - more that you can do here i didn't even
929:38 - scratch the surface on all the different
929:41 - things you have to think about when
929:42 - you're putting together a background
929:44 - image and trying to actually get
929:46 - elements like this
929:48 - piece of text on top of it so that gets
929:51 - a little bit more complicated but
929:52 - hopefully this is just a nice overview
929:55 - of those background properties to see
929:57 - what's possible
929:58 - all right so the last thing i'm going to
930:00 - say about css properties
930:03 - is that there is a short shorthand way
930:05 - to write them in some cases
930:07 - so to this point you've seen me just
930:10 - writing these properties and you know
930:12 - not really explaining okay i'm i'm
930:14 - giving it a margin of zero right here
930:16 - but what does that represent you know is
930:19 - the zero margin gonna be a margin on the
930:21 - left the right top bottom all four of
930:23 - them and the answer is it's gonna be all
930:26 - four of them because this margin
930:28 - property is a shorthand css property
930:32 - and what you can do let me let me go
930:34 - ahead and get us a better example here
930:36 - because this is not a good example
930:39 - so let's make a div
930:41 - and target that div give it a width of
930:44 - 200 pixels
930:46 - a height of 200 pixels and a background
930:49 - color of green just that we have
930:51 - something on the screen
930:53 - and then from here
930:54 - um actually let's let's make a couple of
930:57 - these so that we
930:58 - see two of them
931:00 - and you can see that they're combined
931:02 - together because there's no margin but
931:04 - if we were to put some margin on this
931:07 - we can say the margin is just 20 pixels
931:10 - and be done with it or we could say that
931:13 - the margin top is going to be 20 pixels
931:16 - so that it doesn't space it from the
931:18 - left side of the screen
931:20 - so this margin property when it's
931:22 - defined just on its own
931:25 - is a shorthand property you can give it
931:27 - one value which makes the margin on all
931:30 - sides equal
931:31 - or you can come in here and you can give
931:33 - it four different values so let me make
931:35 - sure i got this right
931:37 - but the first value should be the top
931:39 - margin
931:40 - then you have the
931:42 - looks like the right margin
931:45 - then the bottom margin and finally the
931:48 - left margin so you can define different
931:51 - values for
931:52 - you know top right bottom left
931:55 - instead of writing it all out like this
931:57 - so we could say
931:59 - this this line right here i'll comment
932:01 - it out and that's going to be equivalent
932:04 - to this so we'll say margin top is 20
932:07 - margin right is 5 pixels
932:10 - margin bottom is 10 pixels and margin
932:14 - left
932:15 - is 20 pixels so these four
932:18 - properties combined together is the same
932:21 - exact thing as this one shorthand
932:23 - property
932:24 - so you'll see this very commonly in css
932:26 - where
932:27 - another great example of this is border
932:30 - you could say border is one pixel solid
932:34 - black and you'll see that border pop up
932:37 - or not very well let's make it 5 pixels
932:40 - so you can see it better
932:41 - and this is a shorthand property so what
932:43 - we could have done is comment this out
932:46 - and say
932:47 - border size is 5 pixels
932:51 - the border color is black
932:53 - and then
932:54 - the border i believe style
932:57 - is solid
932:59 - and it looks like i got something wrong
933:01 - here because the size is all messed up
933:03 - but let's let's look it up in the
933:04 - documentation
933:06 - so we'll type in border
933:08 - and it says that it sets the values
933:11 - border width border style and border
933:13 - color so that's what i missed it's not
933:15 - border size it would be
933:18 - border width and now you'll see the same
933:20 - exact result as you saw
933:23 - let's go ahead and
933:25 - comment this out just so that i can
933:26 - prove this out
933:28 - so we'll comment out those three
933:30 - properties and comment this one back in
933:32 - and the shorthand property has the same
933:34 - exact effect so shorthand properties are
933:37 - really quick and easy way to write css
933:40 - you'll kind of get used to them and just
933:41 - wanted to let you know that that was
933:43 - going on because i know it's kind of
933:44 - confusing when you see all these
933:46 - different properties being written
933:48 - and nobody explains oh what we can
933:50 - define the margin right using like three
933:53 - different ways of doing it
933:54 - congratulations if you've made it this
933:56 - far i know it's been probably a couple
933:58 - hours at this point of me talking about
934:01 - css and properties and concepts box
934:04 - models all that kind of stuff
934:06 - but hopefully that was a good
934:08 - introduction for you and at this point
934:10 - we're going to kind of prep ourselves
934:12 - for the html and css challenges that we
934:16 - looked at at the beginning of the video
934:18 - so i'll be walking you through those on
934:20 - video in separate videos not this one
934:23 - but before we get there i want to
934:25 - introduce the four step method that i go
934:28 - through when i'm writing html and css
934:31 - because it was not offered to me when i
934:33 - was first starting out or i didn't find
934:35 - it on my own and i think it would be
934:37 - really helpful to you because it took me
934:39 - a while to figure this out and
934:41 - really get into a good routine so this
934:44 - is a systematic way to write css in html
934:47 - and the first step is to figure out what
934:50 - you want
934:51 - what you want to put on the page and
934:53 - oftentimes that comes in the form of a
934:55 - design
934:57 - now we talked about we're not going to
934:58 - go through wireframing or graphic design
935:01 - in this course we're just going to use
935:03 - we're leveraging
935:04 - existing designs that have already been
935:06 - built but that is a huge huge concept
935:08 - here you never want to go into it where
935:11 - you have no idea how you want to design
935:14 - the visual elements on the page and try
935:16 - to write the code and design it all at
935:18 - the same time it's really confusing and
935:21 - i've done it too many times and i would
935:23 - not recommend it
935:24 - now once you have the design or at least
935:26 - some sort of wireframe that gives you a
935:29 - sense of where you want to put the
935:30 - elements you have to think of step two
935:33 - which is how do i want to arrange those
935:35 - on the page with html now this is a
935:39 - highly intuitive step you're going to
935:41 - get a lot better at this with experience
935:44 - and it's much easier after you've
935:46 - written a couple of apps to understand
935:49 - oh i need to put you know a div
935:51 - container here and then i need three div
935:53 - containers within that main div
935:55 - container and then within each of those
935:57 - containers i probably need some text and
935:59 - then maybe another container so you'll
936:02 - get a lot better at realizing you know
936:04 - how to use divs and different semantic
936:07 - html elements
936:08 - on the page as you go along
936:11 - the third step is how can i use css to
936:14 - achieve that outline or layout
936:17 - and this is where all the stuff we
936:18 - talked about in this crash course come
936:20 - into play if you don't know some of
936:22 - these properties and you know how they
936:25 - work and how they you know
936:27 - disrupt the flow of the elements on the
936:29 - page then you're not going to be able to
936:31 - do this very well
936:33 - so like step number two you'll get a lot
936:35 - better with practice on this one and
936:38 - then finally step four i really think
936:40 - this is probably the easier
936:42 - step of this process and that is how do
936:45 - i want to style these elements so once
936:47 - you've got them laid out on the page
936:49 - styling them is
936:51 - rather trivial you're just putting
936:53 - different colors and some padding maybe
936:55 - some margin that kind of stuff on them
936:58 - maybe some text decoration or
937:00 - you know font sizes that kind of stuff
937:03 - and it's pretty trivial compared to
937:05 - getting the layout correct in the first
937:07 - place
937:08 - so to go through this process i'm going
937:09 - to give you a short example here at the
937:11 - end of this video
937:13 - and then make sure to keep it in mind as
937:15 - we go into the challenge videos and i'll
937:17 - be sure to
937:18 - kind of adhere to this process as we're
937:20 - building those front-end mentor
937:23 - code challenges so here's what we're
937:25 - going to build with this four-step
937:27 - method
937:28 - this is
937:29 - we can think of this as the design so
937:31 - let me go ahead and change the view so
937:33 - that it's
937:34 - very clear
937:35 - so we're going to go to full page view
937:37 - and you'll see the design that we're
937:39 - trying to make it's nothing fancy but
937:42 - just looking at that visual design
937:45 - how can we lay that out in html
937:48 - so we have to decide you know looking at
937:51 - this do we want some containers built
937:54 - out you know it looks like they're next
937:55 - to each other how do we accomplish that
937:58 - with html
938:00 - so let's go back over to our playground
938:02 - and start writing this out i'm gonna
938:04 - actually put these side by side so that
938:06 - we can see them a little bit better
938:11 - when i look at this design the first
938:13 - thing that i see is two div elements
938:17 - so i'm thinking i'm definitely gonna
938:19 - have two divs
938:20 - and usually when i put something
938:23 - together with html i have a container
938:25 - div so kind of like the overarching
938:28 - parent to all the elements
938:30 - so what i'll do here is start us out
938:32 - with the template we'll say div dot
938:35 - container and press tab
938:37 - to make a div with the class of
938:39 - container
938:40 - and then from here i want to make a div
938:43 - with a class of box 1
938:45 - and then i want to make another div
938:48 - with a class of box 2.
938:50 - so we've seen this before so if you
938:52 - remember you might be able to kind of
938:54 - figure this out but this is the basic
938:56 - structure that i think i want
938:59 - to lay that out and of course there's
939:01 - two pieces of text so in each of these
939:03 - divs i'm going to put some sort of h2
939:06 - we'll call that box one
939:08 - and then we will say we want some text
939:11 - in there
939:12 - and then we can just copy this down into
939:14 - box two
939:22 - as you can see on the screen on the left
939:24 - this looks nothing like the one on the
939:26 - right
939:27 - and the reason i knew to put all these
939:30 - html elements in this fashion
939:33 - is because i have experience doing it
939:35 - and i just know that we have a
939:37 - overarching container
939:39 - each div is going to represent each box
939:41 - and then there's content within each of
939:44 - these divs that we can you know center
939:47 - and style a little bit later so let's go
939:49 - back to our our four-step pop process
939:52 - here
939:53 - we already asked how we want to arrange
939:55 - them
939:56 - that's the design itself so what we're
939:58 - looking at over on the right
940:00 - we said how does this arrangement look
940:02 - in the form of html we already wrote
940:04 - that out it doesn't look anything like
940:06 - it yet but it will and now we have to
940:09 - say how do we use css to imagine that
940:12 - layout that we see on the right so from
940:14 - here we have to take css and get these
940:17 - boxes
940:19 - i need to label this one
940:21 - correctly we need to get these two boxes
940:22 - and put them next to each other
940:24 - now what i'm most comfortable with is
940:26 - flexbox i know we haven't learned it and
940:29 - that's going to be a separate video
940:31 - but i'm going to go ahead and use it
940:32 - here just to give an example
940:34 - and how you use that is you basically
940:36 - take the main container
940:38 - and you display
940:41 - that as a flex item
940:43 - and what that's going to do is it's
940:45 - going to put the boxes right next to
940:46 - each other
940:47 - now what you have to do is for each of
940:50 - the boxes
940:52 - we're going to give it a width
940:55 - or no we're not going to do that we're
940:56 - going to
940:58 - give it a flex basis
941:01 - of 50 percent and we'll give that also
941:05 - to box number two so flex is going to be
941:09 - 50 that's basically going to make them
941:11 - equal to each other
941:12 - and then we need to give them a border
941:15 - so that we can see
941:17 - what is going on and i think it's about
941:19 - two pixels
941:20 - is what the border we're looking for is
941:24 - so we've got the border here on box
941:26 - number one we can copy this down to
941:29 - box number two
941:34 - we want to make that one blue
941:39 - okay and the next thing that we want to
941:41 - do is probably give some margin around
941:43 - it because currently they're right next
941:45 - to each other
941:46 - so we'll give it a margin of say 20
941:48 - pixels
941:50 - and down here we will give it a margin
941:53 - of 20 pixels as well
941:56 - looks a little bit big so let's reduce
941:58 - that to 10 on both of them
942:03 - okay that's looking a little bit better
942:04 - and then with the
942:06 - box one and box two we probably also
942:08 - need to do text align center so that the
942:11 - text is all centered
942:15 - we're going to refactor this in just a
942:16 - second
942:18 - so now we're centered and at this point
942:21 - we're pretty much spot on with our
942:23 - layout
942:24 - so
942:25 - we need to go to the last step which is
942:27 - how should each element be styled we
942:30 - already have a border so that's kind of
942:31 - part of the process but
942:33 - the only thing that we need to do really
942:35 - is give it a color of blue for the text
942:38 - on the right
942:40 - and then give it a color of green for
942:43 - the text on the left
942:44 - and there you go um we have a pretty
942:46 - similar layout i think partially why it
942:49 - doesn't look exactly the same as
942:51 - because it's smaller but maybe we gave
942:53 - this some different dimensions but i'm
942:56 - happy with this we accomplished kind of
942:57 - what we wanted here
942:59 - the only thing that i would do is
943:00 - refactor the css because currently you
943:04 - can see we've set flex equal to 50 on
943:06 - both of these
943:07 - we've also set the text line and the
943:10 - margin
943:12 - so we can combine those into
943:14 - one selector so put a comma there
943:17 - select both boxes
943:19 - and then get all of these common
943:21 - properties that apply to both of them in
943:23 - here
943:24 - so we'll grab the margin
943:27 - and the flex basis
943:33 - and then we go ahead and delete that
943:34 - from these properties or from these
943:37 - selectors
943:43 - and it should look the same now so this
943:45 - is how you would go through that four
943:46 - step process to solve an html and css
943:50 - challenge
943:53 - let's jump in this is what we're going
943:55 - to be building here it's going to be a
943:57 - nice way to practice
943:59 - a lot of those basic css and html skills
944:02 - that we've just learned
944:03 - there's nothing crazy going on here but
944:06 - it will give us that good opportunity it
944:08 - looks like we've got a few different
944:10 - font styles
944:12 - font weights
944:13 - a little bit of color in here and then
944:16 - even a button down here that we can
944:18 - style and maybe add a pseudo
944:21 - class hover effect to so it'll be a
944:23 - great comprehensive introduction to
944:27 - writing html and css
944:29 - this code challenge comes from the
944:31 - frontend mentor website which is a great
944:34 - resource that you can scroll down and
944:36 - see a bunch of professional
944:38 - web designs for different things that
944:40 - will challenge you to use
944:42 - different skills in html css and
944:44 - javascript the one that i picked here is
944:47 - rather simple it's kind of on the the
944:49 - easier side of this
944:51 - but we are going to walk through a
944:53 - couple others so as you see this grid
944:55 - and the crowdfunding product page those
944:57 - two will be coming up in future video
945:00 - challenges for this video i've purposely
945:03 - not looked at this
945:05 - yet and figured out how i'm going to do
945:07 - it so this is completely raw and uncut
945:09 - i really want to just show you my
945:11 - thought process we talked about
945:13 - this four step system for writing html
945:16 - and css in the actual css crash course
945:19 - and i really want to apply this and walk
945:22 - you through my thought process
945:24 - of how i take a design such as this one
945:27 - and think about how do i lay it out how
945:29 - do i style it and what resources am i
945:32 - using to do so i'm not the best at
945:34 - writing html and css in the world far
945:37 - from it there are plenty of people that
945:39 - could come in and critique what i'm
945:40 - about to do
945:42 - in many many ways but my goal here is to
945:44 - show you just a realistic look at how we
945:47 - go about building something like this
945:50 - consistent with what we've been doing
945:52 - in the prior videos we're going to be
945:54 - using the codepen
945:56 - environment so you can start a blank
945:59 - code pen document and just follow along
946:02 - as we go through this challenge i think
946:04 - our first step is going to be going over
946:06 - to the front-end mentor website
946:09 - we don't need this page anymore
946:11 - but if we go ahead and click the visit
946:14 - challenge hub for the single price grid
946:16 - component which i'm going to leave a
946:18 - link in the description to this so that
946:20 - you don't have to go searching for it
946:22 - you'll find
946:24 - some starter files a design file that we
946:27 - don't need this is more on the side of
946:30 - you know if you're using figma or sketch
946:32 - or even photoshop or something like that
946:34 - to mock up the design it might be useful
946:36 - to see what are the components and
946:38 - layers going on there but like i said in
946:40 - the crash course this is not about
946:42 - graphic design or wireframing we're
946:45 - solely trying to take a pre-existing
946:47 - design
946:48 - and turn it into code
946:50 - scrolling down you can see that this is
946:52 - the newbie difficulty level so it should
946:55 - be relatively straightforward to solve
946:58 - almost 10 000 people have tried it and
947:01 - about 2 000 have finished and i fully
947:03 - intend to be
947:05 - in this bottom category as should you
947:08 - and the brief that we're given
947:10 - is pretty simple so it says your
947:12 - challenge is to build out this pricing
947:14 - component
947:15 - getting it looking like the design okay
947:18 - you can use any tools that you'd like
947:21 - we're going to use vanilla html and css
947:24 - we're not bringing in
947:26 - anything additional except maybe a
947:28 - google font or something like that
947:31 - it says your users should be able to
947:33 - and what i want to call out right here
947:35 - is this is called a user story and we've
947:38 - touched on it previously within this
947:41 - crash course when we built the html
947:43 - challenge but a user story is something
947:46 - that you will write down in the
947:47 - requirements gathering phase of building
947:50 - a web page or web app and it's basically
947:52 - saying okay let's come up with a list of
947:54 - things that the user should be able to
947:56 - do if this is implemented correctly so
947:59 - the first requirement is that we should
948:02 - be able to view the optimal layout for
948:04 - the component depending on the device's
948:06 - screen size
948:08 - we have not yet talked about responsive
948:10 - design that's i believe going to be the
948:12 - next video in this series
948:15 - so
948:16 - we may leave this part out i'm not quite
948:18 - sure yet we'll see how long it takes to
948:19 - build the first part but basically what
948:21 - that's saying is as we resize the screen
948:24 - or if we look at it on desktop or our
948:26 - mobile device it should you know look
948:29 - good to the user
948:30 - the second one is you should see a hover
948:32 - state on desktop for the sign up call to
948:35 - action so in other words what they're
948:37 - talking about is this
948:39 - button down here when we hover over it
948:41 - we should see some sort of interactive
948:43 - thing happening whether that be the
948:45 - button gets larger or changes colors
948:48 - opacity
948:49 - something like that so we can get a
948:51 - little bit creative with what we're
948:52 - doing there
948:54 - it says download the starter code go to
948:56 - the readme file this will give you
948:58 - further details the style guide will
949:01 - give you the colors and the fonts that
949:03 - we need to use
949:05 - so i'm going to go ahead and open this
949:07 - up you'll see that we have some folders
949:09 - and some files if we open up the readme
949:12 - it's written in markdown
949:14 - which is kind of hard to read here so
949:16 - what i'm going to do is open all of
949:17 - these files in a tool called visual
949:19 - studio code
949:21 - which is the code editor that we will
949:23 - eventually be using within this series
949:25 - but for now like i said we're going to
949:27 - be using this codepen environment
949:29 - because it's a lot more
949:32 - interactive and you can see the changes
949:34 - happening in real time so let me get
949:36 - that opened and then we'll look at some
949:38 - of these files i've got all the project
949:40 - files open in visual studio code which
949:43 - again you'll get very used to as we go
949:45 - throughout this course
949:47 - but basically we're just using it to see
949:49 - the the files for now and if we open up
949:51 - readme you'll see that it's written in
949:54 - markdown if you don't know what markdown
949:56 - is just go google it real quick to
949:58 - understand it basically takes
950:00 - these little two hashtags for example
950:02 - and this would become an h2 element
950:05 - within html so i've got it open in the
950:08 - preview it's a little bit easier to read
950:09 - than
950:10 - you know the stuff going on over here
950:13 - most of this stuff is not new the one
950:15 - thing that i'll talk about here is
950:18 - down here in the deployment section
950:20 - so they recommend that you use get
950:22 - version control
950:23 - to
950:24 - host this and push it to your repository
950:26 - and deploy it
950:28 - with for sell now we're going to just
950:30 - put this up on github pages and we're
950:32 - not going to actually be using the git
950:34 - utility because we haven't covered that
950:36 - in the series yet
950:37 - but i do want to you know give you a way
950:39 - to see it live on the internet and
950:41 - github pages is a really simple way to
950:43 - do that i'll show you exactly how that
950:46 - works but it will not be the focus of
950:48 - this tutorial the style guide we don't
950:51 - really need to go through this
950:52 - all that much right now but we'll be
950:54 - referring back to it when we have to
950:56 - figure out okay what font are we going
950:57 - to use how large is this card going to
951:00 - be
951:01 - and what colors are we putting in there
951:02 - so this will be a good reference so
951:04 - let's close that out and i think
951:06 - everything else looks like we have
951:07 - design these are just uh preview images
951:10 - to reference
951:11 - and then images we just have a favicon
951:14 - which is going to be kind of up in the
951:16 - browser tab
951:17 - and finally we have this git ignore file
951:20 - which has to do with the get version
951:23 - control utility we're not going to talk
951:24 - about that and then finally in
951:27 - index.html which has some predefined
951:30 - html boilerplate to start with but once
951:33 - again we're going to be using codepen
951:35 - instead of doing that just because it's
951:37 - a little bit more interactive for us all
951:40 - right let's get started uh coding this
951:42 - thing so once again we'll go back to
951:44 - this four-step system for writing html
951:47 - and css
951:48 - and for this
951:50 - i use this four step system on a
951:52 - component by component basis
951:54 - so in our case we're just building this
951:57 - simple card so we can pretty much use it
951:59 - one time through but if we had a much
952:01 - larger project we'd kind of iterate and
952:04 - do this process multiple times
952:06 - so the first thing is how do i want to
952:08 - arrange these html elements on the page
952:11 - that is basically talking about
952:13 - this design right here so how do i want
952:15 - to design it we've already have that
952:17 - done for us so we can go to step two
952:20 - how do i
952:21 - make this arrangement look
952:23 - using html so
952:26 - the way that we can figure that out is
952:29 - primarily by experience just knowing
952:31 - how you can write html that will be
952:34 - turned into something like this
952:36 - but i'm going to walk you through my
952:37 - thought process and just kind of start
952:39 - to give you that experience
952:41 - so just taking a look at this design the
952:43 - first thing that i'm thinking about
952:46 - is how do i
952:47 - lay this out with html so what are the
952:50 - container elements that i need to use
952:52 - and as we talked about a div element is
952:55 - a great you know container type element
952:58 - so what i'm thinking about is there's
953:00 - probably going to be four main
953:02 - containers that we're looking at from a
953:04 - high level
953:05 - the first one is going to be the entire
953:08 - design itself so that will be one div
953:11 - then we'll have something for this white
953:13 - box right here
953:15 - the bottom left box and then the bottom
953:17 - right box so really what we're going to
953:19 - be looking at is something like this and
953:22 - excuse my poor drawing i'm using a mouse
953:25 - so this is kind of tough
953:27 - but if we break it out like this
953:29 - and then we draw something around it
953:34 - this top one is going to be
953:37 - a div
953:38 - and then we'll have another div here
953:41 - and we'll have a div here and a div here
953:44 - so we're going to have four in total and
953:47 - that's going to represent our entire
953:48 - design as we move down to this this
953:51 - bottom left section which will be
953:53 - contained in a div it's going to be a
953:54 - little bit trickier than this top one
953:57 - because of this part right here so you
954:00 - see how we have some text
954:02 - and some more text styled right next to
954:05 - each other horizontally
954:06 - and as we know elements are block
954:09 - elements by default usually so we're
954:11 - going to have to find a way to lay that
954:12 - out so that they're both on the same
954:14 - line
954:15 - and they have two different styles so
954:16 - that'll be interesting to see how we do
954:18 - that and then finally at the bottom
954:20 - we've got a button which we'll spend a
954:21 - little bit of extra time on because we
954:23 - need to have a hover effect on it
954:26 - and then in the bottom right we have a
954:27 - pretty straightforward design
954:29 - where we just have a heading and then it
954:31 - looks like an unstyled list so it's not
954:34 - necessarily paragraph text it looks like
954:37 - this is a list without bullet points so
954:38 - i'll show you exactly how to do that
954:41 - and then finally
954:42 - we have
954:43 - some different colors throughout but
954:45 - that's not really related to this step
954:48 - so we've gone through steps one in steps
954:50 - two so what i'm going to do is actually
954:54 - take step number two and lay this out
954:56 - with html as we just talked about so
954:59 - i've got my design here on the right and
955:01 - my code pen here on the left so
955:04 - let's go ahead and start with this
955:06 - the first thing that i'm going to do is
955:08 - make a main div that we're going to call
955:11 - the container or more descriptively
955:15 - we'll call it the card because this is
955:18 - what we call a pricing card
955:20 - card is just terminology for something
955:22 - that's like all contained within a box
955:25 - then furthermore i said that we're going
955:26 - to have three more divs
955:28 - so let's lay that out and we're going to
955:31 - give i don't know we'll call it an id so
955:34 - maybe let's be more specific with
955:36 - everything here because we're only
955:37 - making one card
955:39 - in a real css project you might want to
955:42 - make a card design and then apply it to
955:45 - one class that you can you know use with
955:47 - multiple elements but for here we can
955:49 - just use ids and be super specific
955:52 - so we have a card
955:54 - then we have the top section
955:58 - and then we'll come down make yet
956:00 - another div
956:01 - this is going to be the bottom left
956:05 - section i'm just being super descriptive
956:07 - here
956:08 - and then furthermore
956:10 - we're going to have a bottom right
956:13 - section
956:15 - so let me expand this so that we can
956:17 - really see what we're dealing with
956:19 - it's not going to show anything on the
956:20 - screen yet because we haven't put
956:22 - anything in these divs
956:24 - but one thing that i just noticed that
956:26 - we probably should be doing
956:28 - is this bottom right section here we
956:32 - probably should wrap that in another div
956:34 - just because they're horizontally next
956:37 - to each other so really what we can
956:39 - visualize this as is we've got one
956:41 - section up here
956:42 - and then we have one section down here
956:45 - and then within that we have
956:47 - two more sections like that so over here
956:50 - in our html we're going to wrap
956:55 - these two in a div so let me take the
956:57 - bottom two sections
956:59 - and put those in a div as well and make
957:01 - sure that we have some good indentation
957:04 - so that we can see exactly what's going
957:06 - on
957:06 - pretty easily
957:08 - let's give this one an id so we'll just
957:10 - say bottom
957:12 - section
957:13 - so if you look at this on the right my
957:16 - extremely messy design we have this top
957:19 - section which is this big box
957:21 - and then at the bottom we have the
957:23 - bottom section which is the big box
957:25 - surrounding these two little boxes and
957:27 - then the two boxes down here are
957:30 - represented by the bottom left section
957:31 - in the bottom right section and then
957:34 - everything is encompassed this is
957:36 - getting extremely messy
957:38 - with a card right here
957:40 - all right so let me go ahead and disable
957:42 - this that we don't have all that drawing
957:44 - there but you can kind of see how this
957:45 - layout is going to map over to this
957:47 - design at this point let's put something
957:50 - in here so that we can start seeing this
957:52 - come to life
957:53 - at the moment we have an empty web page
957:56 - because we've got a bunch of div
957:57 - elements or containers that we've laid
957:59 - out
958:00 - but there's nothing in them
958:02 - so what goes in these sections
958:05 - let's start with the top section so
958:07 - right here contain contained within this
958:09 - single div
958:11 - and what we're going to put in there is
958:13 - it looks like a heading so that looks to
958:15 - me
958:16 - somewhat like
958:17 - we'll call it an h2 heading and it says
958:21 - join our
958:22 - community so that will be our first
958:25 - heading right there and of course this
958:27 - is not going to look anything like the
958:29 - card at the beginning we're going to use
958:31 - css styles to make this a lot prettier
958:34 - in just a second
958:36 - we'll come down here and this looks like
958:38 - maybe an h4 heading that says
958:42 - 30
958:43 - day
958:44 - hassle free
958:46 - money back guarantee
958:49 - all right so that is the second part and
958:52 - then the third part is going to be some
958:53 - paragraph text
958:55 - so gain access to our full library
958:59 - and i'm going to stop talking so we can
959:01 - speed through this
959:05 - all right so we've got our top section
959:08 - already created
959:09 - and once again it looks nothing like the
959:12 - top section over here but we will get
959:14 - there in due time now we'll come down to
959:17 - these other sections here so we need to
959:19 - finish the bottom left section which
959:21 - we're going to put in this div right
959:23 - here
959:24 - and then the bottom right will be going
959:26 - in this div so with the bottom left
959:28 - section
959:29 - it looks like we have an h4 tag so
959:33 - similar to how we use for the 30 day
959:35 - hassle free
959:37 - money back guarantee
959:38 - we'll go ahead and use that same one for
959:40 - the monthly subscription because it
959:42 - looks close we can always change it
959:44 - later
959:47 - so we'll put in monthly subscription
959:49 - and then like i said once we get down to
959:52 - this little
959:53 - area so if we circle these
959:56 - two pieces right here
959:58 - this is going to be what i think
960:00 - as another container div so let's go
960:03 - ahead and make another div and then
960:06 - within that div
960:07 - we want to have we'll say
960:10 - um
960:12 - i guess we can just make another div
960:13 - that says
960:15 - 29
960:17 - and then
960:18 - one more div that is going to say per
960:20 - month
960:21 - so this is going to
960:23 - this total container is going to wrap
960:27 - that pricing component and then we're
960:29 - going to take these two divs right here
960:31 - and make them go horizontal to each
960:33 - other
960:34 - as you can see they're you know block
960:36 - elements so they're breaking to new
960:38 - lines but
960:39 - you'll see how this comes in handy in
960:42 - a little bit so let's go to the next
960:44 - part
960:45 - get rid of these lines here
960:47 - and you can see that after the pricing
960:50 - it gives us a small
960:52 - text down here so we'll we'll put a
960:54 - paragraph and we'll say full access for
960:57 - less than one dollar a day
961:01 - and then finally at the very bottom
961:04 - let's space this out once more we're
961:06 - going to need a button that says
961:08 - sign up
961:10 - and you'll see that this button comes on
961:11 - the page here
961:13 - and then finally this is where it gets a
961:14 - little bit confusing since we haven't
961:16 - added any css yet
961:18 - but this container on the far right is
961:22 - going to be next to the container that
961:24 - we just created but for the time being
961:26 - since everything is a block element by
961:28 - default it's going to go right under
961:30 - here so let me go ahead and write this
961:33 - out it looks like we're using the same
961:35 - kind of header here so we'll stick with
961:37 - the h4
961:39 - and say why us
961:41 - and then down here as i said you could
961:44 - interpret this as paragraph text you can
961:47 - make a bunch of
961:49 - paragraph text that breaks to new lines
961:51 - or we could just make a list and then
961:53 - take the bullet points out later with
961:55 - css
961:56 - so that's what i'm going to do i'm going
961:58 - to make an unordered list and then each
962:01 - list item is going to be what we're
962:03 - seeing on each line
962:12 - okay we've got it all written out we've
962:14 - got all the text and elements that we're
962:17 - probably going to need for this entire
962:20 - card but as you can see this looks
962:23 - nothing like the card that we have on
962:25 - the right and believe it or not we're
962:27 - going to use just vanilla css
962:30 - to take this ugly looking thing and turn
962:32 - it into the card that we see on the
962:34 - right
962:35 - so in reality if i was building this
962:38 - myself and i wanted to do it as quick as
962:40 - possible
962:41 - um what i would do is probably not lay
962:44 - it out like this where i've got all of
962:46 - the text on the page at once
962:48 - i would probably do it in pieces but i
962:51 - wanted to lay this out to just show you
962:54 - how we can visualize a
962:56 - design
962:58 - of course you need a little bit of
962:59 - experience to do this but
963:01 - we can visualize a design and turn it
963:03 - into html elements and we can take what
963:07 - looks like nothing special and turn it
963:09 - into
963:10 - this card on the right but let me go
963:12 - ahead and walk you through what i would
963:14 - do in real life so i've basically
963:17 - created a clone of this
963:19 - and what we're going to do here is we're
963:21 - going to delete all that text that we
963:23 - just put in here so we'll get right back
963:26 - to
963:27 - where we started and as you can see we
963:29 - have just the layout that we had created
963:32 - earlier where we have the whole card we
963:34 - have the top section bottom section and
963:36 - then the sub sections within those
963:39 - and realistically what i would do first
963:42 - off just to get everything laid out on
963:44 - the page correctly is start giving
963:47 - some dimensions and some borders on this
963:50 - so that we can visualize it and then i
963:53 - would put in the actual
963:55 - text elements so let's go ahead and do
963:58 - that real quick and you'll see exactly
964:00 - what i mean so if we were to come back
964:01 - to this four-step process
964:04 - this step number two can involve some
964:06 - css
964:07 - as i'm about to show you so we'll open
964:09 - up the css
964:11 - pane
964:12 - and what we want to first do is target
964:14 - the overall card
964:16 - so
964:16 - to do that with an id you use that
964:19 - hashtag and then supply the id
964:22 - and now what i'm going to do is just
964:24 - give it some sort of width and height
964:26 - and also tack on a border so that we can
964:29 - see it on the page
964:30 - so let's go ahead and give it a width of
964:33 - 200 pixels and a height of 200 pixels
964:37 - and then a border will be one pixel
964:40 - solid red
964:42 - so now you're starting to see and i'm
964:44 - gonna actually make this three pixels so
964:45 - we can see it better
964:47 - you'll see just a basic container on the
964:50 - page now the next thing i want to do is
964:53 - go see what the specifications for the
964:55 - size of this main card is because this
964:59 - outer container we are calling card
965:01 - should be the total dimensions
965:03 - so if we go back to visual studio code
965:07 - and see our specifications so we're in
965:09 - the style guide right now
965:11 - it says that the designs were created to
965:13 - the following widths
965:15 - so like i said we're not going to be
965:17 - getting into responsive design in this
965:20 - tutorial
965:21 - so if you were to look at the desktop
965:23 - design it looks like this and that's
965:25 - what we're creating
965:27 - but there's also a mobile design which
965:29 - you can see has a slightly different
965:31 - layout
965:32 - and in real life what we would be doing
965:34 - is we'd be designing on desktop to look
965:36 - like that and then when we resized the
965:38 - page so
965:39 - as we you know resize the page in our
965:42 - codepen environment we would expect this
965:44 - design to change
965:46 - but for this one we're staying simple
965:48 - since we haven't learned about
965:49 - responsive design yet and we're just
965:50 - creating this one right here
965:53 - so the specification for that desktop is
965:56 - going to be 1440 pixels but if we came
965:59 - to codepen and we gave it a width of say
966:03 - 1440 pixels it's going to go completely
966:06 - off the page so we're going to take a
966:08 - little bit of liberty here
966:09 - and make our own design based on the
966:12 - size of our code pen
966:14 - editor which i'm guessing is going to be
966:16 - around we'll call it 700 pixels maybe
966:20 - um that's a pretty good size we're
966:23 - probably going to want to give ourselves
966:24 - some some width here to work with so
966:27 - let's make it 600 pixels which is going
966:30 - to give us all of this space right here
966:33 - and then for the height we're just going
966:34 - to eyeball it because they haven't
966:36 - specified exactly what that height
966:38 - should be
966:39 - so let's look at the desktop design
966:41 - again
966:43 - you can generally grasp the aspect ratio
966:46 - here and you can tell that we're off by
966:48 - a little bit so let's maybe throw this
966:50 - up to
966:51 - 350 pixels
966:54 - and that looks like generally the aspect
966:57 - ratio that we're dealing with right here
966:58 - so nothing nothing perfect but it's
967:01 - going to get us close now the next step
967:04 - since we have our main container laid
967:06 - out and we just see it visibly
967:08 - we're going to do the same thing with
967:10 - each of the sections so you can see that
967:12 - we have our top section which we can
967:14 - come down into our css and target
967:18 - and for this section we're going to give
967:20 - it a width
967:22 - of 100 percent because we want it to be
967:25 - filling up the entire space of its main
967:28 - container
967:29 - and then we're going to give it a height
967:32 - if i can spell that right
967:34 - we'll give it a height of 50 percent
967:36 - because
967:38 - well maybe not 50 it looks like the top
967:40 - section
967:42 - is call it
967:43 - 40 and the bottom section is about 60 so
967:48 - maybe we'll go in that range where we
967:50 - give it a height of 40 percent the width
967:52 - of a hundred
967:53 - and of course we can't see anything yet
967:55 - because we haven't given it a background
967:56 - or a border so let's throw in a
968:00 - 2 pixel
968:01 - solid green border so you'll see that
968:03 - pop up
968:04 - in the top section here and that that
968:06 - looks pretty good so far
968:09 - now there's one problem that we're
968:11 - seeing already that i want to fix right
968:13 - off the bat before we get any further
968:15 - and that is this
968:17 - box sizing so as you can see when we put
968:20 - the border on this inner container
968:23 - you're seeing that it's kind of breaking
968:24 - out of the parent container on the right
968:27 - side here
968:28 - and the reason that's happening is
968:30 - because our box sizing is set to the
968:33 - default content box so what we're going
968:36 - to do is a basic css reset that's going
968:39 - to make every element on the page abide
968:42 - by
968:43 - the border box box sizing and we talked
968:46 - about that in the first of three lessons
968:49 - in our css crash course
968:51 - before so go back and review that if you
968:54 - have to to apply the border box box
968:57 - sizing to every element in this html
969:00 - document
969:01 - we'll just come to the top of our css
969:03 - file and paste in a predefined html or
969:07 - css reset so we're saying on the total
969:10 - document we want the box sizing to be
969:12 - border box
969:13 - which will as you see it will make this
969:16 - box go within its container and then the
969:20 - second rule is just basically going to
969:21 - say i want to grab every other element
969:24 - and apply
969:25 - or inherit that you know root level box
969:28 - sizing so by just adding these two rules
969:31 - you can see that our boxes are fitting
969:33 - nicely within each other if we comment
969:36 - them out it's going to be breaking out
969:38 - of the box again if we comment them back
969:41 - it goes
969:42 - or it should update i'm not sure why
969:44 - it's not updating let's uh refresh the
969:46 - page
969:48 - there we go so it is within the box
969:51 - with that fixed we can go to the bottom
969:53 - section
969:54 - um so let's let's go back to our design
969:56 - here for a second we've got our top
969:58 - section bordered out now we have this
970:01 - overall bottom section so
970:04 - we will write a css rule to target the
970:07 - bottom section div
970:09 - which is right here so you can see the
970:11 - bottom section which has the two sub
970:13 - sections within it so let's come down
970:16 - here
970:16 - and
970:17 - just paste in these properties because
970:20 - that's all we need
970:21 - but it's obviously going to be the wrong
970:24 - heights and widths for now so
970:26 - we do want a 100 width we want it taking
970:29 - up all of that but the height that we
970:31 - want is going to be 60 rather than 40.
970:34 - because as you see with 40 it doesn't
970:35 - take up the full
970:37 - uh height of the entire container but
970:40 - now that we've made it to 60
970:42 - and then we'll turn this to call it blue
970:45 - you'll see that we now have a
970:48 - outer container in red
970:50 - our top container in green and our
970:52 - bottom container in blue
970:54 - now the last thing that we have to do to
970:56 - get this layout um perfect is going to
970:59 - be adding these two
971:01 - containers in the bottom section that
971:03 - will be side by side
971:05 - i'm going to add them one at a time
971:06 - because it's going to require us to do
971:08 - something a little bit tricky
971:10 - because they go next to each other so
971:13 - let's target the
971:15 - bottom left section first so we'll copy
971:18 - in this id
971:20 - into our css put that hashtag in front
971:23 - to target it
971:24 - and here we're going to copy in the same
971:27 - properties again
971:29 - just to get our border
971:32 - now this is going to be incorrect at the
971:34 - moment because we're giving it a width
971:35 - of 100
971:37 - but really what we want is a width of 50
971:41 - percent because we want that to take up
971:43 - the
971:44 - first half and then the height that we
971:46 - want is going to be 100 percent
971:50 - now i'm using these percentages because
971:53 - we have these already broken out within
971:55 - their containers
971:57 - so let's put a different color on here
971:59 - um maybe we'll put on
972:02 - what's contrasting to blue we'll say
972:04 - orange
972:05 - so that we can see that pretty nicely
972:07 - within that container
972:09 - and the reason that this works is
972:11 - because the width
972:13 - the width of 50 percent is going to be
972:15 - relative to its parent container
972:17 - so if we look and ask ourselves okay
972:20 - what is the parent container of this
972:22 - bottom left section well that's going to
972:25 - be the bottom section and the bottom
972:27 - section is outlined in blue right here
972:30 - so rather than saying 50
972:33 - width of the entire document we're just
972:35 - saying 50 width of the bottom section
972:38 - which is already outlined for us and you
972:40 - can see
972:42 - that it's occupying perfectly 50 percent
972:44 - of that
972:45 - now if we did the same thing with the
972:49 - bottom right section so let's change
972:51 - this id
972:52 - to the bottom right section and then i'm
972:55 - running out of colors here but maybe
972:57 - we'll just give it a 2 pixel solid black
973:00 - border now we're running into problems
973:02 - here because now that we have
973:05 - a bottom right section it's breaking
973:08 - down onto a new line because all of
973:10 - these divs are by default block elements
973:13 - and they occupy their own line so in
973:15 - order for this to work
973:17 - we actually have to make both of these
973:21 - you know subsections
973:23 - inline block elements so we don't want
973:26 - to make them inline because inline
973:28 - elements don't respect the height and
973:29 - width properties which we want them to
973:32 - respect but we do want them to be up on
973:35 - the same line so what we're going to do
973:37 - is come to both of them and say display
973:41 - inline block
973:43 - and then once again
973:46 - display
973:47 - inline block now at this point you're
973:49 - probably wondering
973:51 - why are these boxes not lining up next
973:53 - to each other we've given one of them
973:55 - fifty percent with the other one 50 with
973:58 - and we've turned them
973:59 - into inline blocks which basically means
974:02 - that they both can sit on the same line
974:04 - unlike a block element
974:06 - now the reason that this is happening is
974:08 - probably going to make you pretty mad um
974:10 - because it made me mad when i found it
974:12 - out for the first time and a lot of
974:14 - other people
974:15 - and it's kind of just a quirky thing
974:17 - about css so when you make an inline
974:20 - block
974:21 - that respects the white space within the
974:23 - document and believe it or not if you
974:26 - come up to this html
974:28 - where we have the bottom left section in
974:30 - the bottom right section
974:32 - there's actually some white space
974:34 - between these two elements so
974:37 - this this space right here is considered
974:40 - white space for inline block elements
974:43 - so if we were to just backspace and
974:46 - bring this right next to each other
974:48 - it's going to bring this box up within
974:50 - that container and it's going to fit
974:52 - perfectly
974:53 - now
974:54 - i know what you're thinking
974:56 - like i said this is kind of infuriating
974:58 - that this is the reason that that was
975:01 - doing that and that's kind of you know
975:03 - coding in general sometimes you just
975:05 - find things that are completely
975:07 - ridiculous and what i will say is that
975:10 - there is
975:11 - some hope so in the next couple of
975:13 - videos we're going to be talking about
975:15 - css grid in flexbox
975:18 - and both of those will be a much more
975:20 - optimal way to make this layout like
975:24 - we've done here
975:25 - and you won't run into these weird
975:27 - quirky problems that just exist
975:30 - as a part of kind of the older
975:32 - method of writing css
975:35 - all right so just keep that in mind we
975:37 - have taken the divs that were nicely uh
975:40 - laid out in our html above like this and
975:44 - we've just removed the little white
975:45 - space between them and now it's going to
975:48 - work just fine so that's hopefully the
975:51 - only little hack that we're going to
975:52 - have to do throughout this project
975:55 - and like i said it's just it's a little
975:57 - bit frustrating but
975:59 - we have to do it here and until we know
976:02 - css grid and flexbox at least
976:04 - but this would be kind of your old way
976:06 - of lining these things up now the last
976:09 - thing that we have to do here because
976:11 - we've got our layout so if we come back
976:14 - to
976:15 - visual studio code
976:16 - you can see that we've got our top
976:18 - section bottom left and bottom right
976:20 - section all outlined with these ugly
976:23 - colors and and whatnot and at this point
976:26 - we can start putting html elements
976:28 - within them so let me go ahead and grab
976:32 - some of the text that we created over
976:34 - here just in this ugly
976:36 - space
976:37 - and i'm just going to copy the exact
976:39 - html
976:41 - and put it into each of the sections
976:43 - that it belongs in
976:45 - so we're going to see some html go up
976:47 - here and of course it's not going to not
976:50 - going to fully fit at the beginning
976:52 - we will fix that i promise
976:55 - and then let's come down here grab this
976:58 - put this in the bottom
977:00 - left section
977:05 - and you'll see that we have some
977:07 - some spacing that we're going to have to
977:10 - address here and that is partially due
977:12 - to the
977:13 - the default margin that is given
977:16 - that is being given to h2 and h4
977:19 - elements and paragraph elements
977:22 - and then finally the bottom right
977:24 - section will copy that
977:26 - and paste it into the bottom right
977:29 - section
977:30 - okay so we've got all of our elements in
977:33 - here and now we have to fix a few things
977:37 - one of those things is the default
977:39 - margin that we're getting on these
977:41 - elements so i'm going to actually
977:42 - inspect the whole page
977:44 - it's going to look very weird for a
977:46 - second
977:47 - but if we hover over
977:49 - some of these elements you'll see that
977:51 - we have this orange
977:53 - margin on top and on bottom of those h4
977:56 - elements and that is because it's just a
977:59 - browser default it's something that just
978:01 - it you know happens by default and if we
978:03 - go over to this page you can see that
978:06 - all of our text is is spaced out pretty
978:08 - nicely and that is because of those
978:10 - browser defaults but obviously over here
978:13 - we don't want them to be in effect
978:16 - because we want our
978:18 - document to have no spacing around we
978:20 - want to add our own spacing so all we
978:22 - have to do
978:23 - is come up to the top and to our html
978:27 - or sorry css reset where we're just you
978:30 - know resetting default properties i'm
978:32 - just going to grab the h2 element and
978:35 - the h4 element that we have as well as
978:38 - the paragraph element
978:40 - and give it a margin of zero
978:42 - so hopefully that will fix a few things
978:45 - you can see that we
978:46 - have no spacing around here
978:48 - all right the last problem we're dealing
978:50 - with here it looks like we've got all of
978:52 - our text without default spacing so
978:54 - that's nice
978:56 - and the last thing that we're worrying
978:58 - about is this orange box which is oddly
979:01 - just
979:01 - sitting there floating in space
979:04 - and if you were to right click and
979:06 - inspect this
979:08 - and you start clicking around
979:10 - looking at this
979:11 - there's not going to be any
979:13 - you know obvious reason why this is
979:15 - sitting down here there's no margin or
979:18 - padding or anything going on here
979:20 - so you kind of have to ask yourself what
979:22 - is going on
979:24 - and from experience i just know that
979:26 - when you have an inline block element it
979:28 - follows different rules than a block
979:30 - element and there are different
979:32 - properties that will allow you to modify
979:35 - how those rules are applying to your
979:37 - html
979:39 - now that's kind of similar to all css so
979:42 - when you change display properties and
979:44 - box sizing there's just different rules
979:46 - of the game so if we were to come over
979:49 - to the mdn documentation
979:52 - and type in
979:55 - vertical
979:56 - align
979:57 - this is going to show us a property
979:59 - and it says the vertical line css
980:02 - property sets vertical alignment of an
980:04 - inline
980:05 - inline block or table cell box so this
980:08 - does not apply at all to block elements
980:10 - which is the default type of html
980:13 - element for
980:14 - pretty much everything but what it does
980:17 - is it basically says this is a pretty
980:19 - good visual right here
980:21 - if you have two inline block elements
980:23 - that are sitting right next to each
980:25 - other on the same line they can be
980:27 - aligned
980:28 - at different vertical positions
980:31 - and by default i'm not sure exactly what
980:34 - the default is here
980:36 - probably the baseline or something like
980:39 - that
980:40 - but anyways we want to make sure that
980:41 - this
980:42 - gets the top alignment because if we
980:45 - come back to our
980:46 - challenge here we want these two
980:50 - inline blocks to basically lock up to
980:52 - the top
980:54 - border of their container
980:57 - so if we go into each of the sections
981:00 - and for the bottom left section that's
981:02 - behaving oddly if we type in vertical
981:05 - align and then say top it's going to
981:08 - bring it right back up and snap it to
981:10 - the
981:11 - top edge of its container
981:14 - now the bottom right section just so
981:16 - happens to snap up there naturally
981:19 - but let's go ahead and
981:21 - add the vertical line top for
981:24 - consistency's sake and this will also
981:26 - snap that to the top
981:28 - so at this point it looks like we have a
981:31 - nicely laid out card
981:34 - and although it is pretty ugly we've got
981:36 - everything that we need all of the
981:38 - content in there and we've got the
981:39 - layout that we need so at this point
981:42 - it's all about styling so in our four
981:44 - step process we looked at number one
981:46 - that was just looking at the design in
981:49 - some cases you'd actually do the
981:50 - designing
981:52 - in step two we asked ourselves how do we
981:53 - lay that out with html so we templated
981:56 - everything out
981:57 - now in step three we have to ask how can
982:00 - i use css to achieve the layout that i
982:02 - want and that's exactly what we did here
982:05 - we just used a few basic css properties
982:08 - to put some borders and really visualize
982:11 - the card component that we're trying to
982:13 - create and now finally how should we
982:16 - style each element and this is kind of
982:18 - the fun part where
982:19 - our ugly layout example is going to turn
982:22 - into
982:24 - what we see in this example a nice
982:26 - styled card so i think the first thing
982:28 - that i want to do
982:30 - let me go back to my example here
982:33 - since this is just called layout example
982:35 - let's let's copy all the html here
982:38 - into our original code pen
982:41 - and of course all of the css we'll copy
982:43 - in there too
982:44 - so this should get us back to where
982:47 - we were there and i can go ahead and
982:49 - close this out
982:50 - so we've just got this one example and i
982:52 - think what the next step here is going
982:55 - to be
982:56 - is to get these background colors uh put
982:59 - in there so we're going to start to get
983:01 - something that doesn't look so ugly so
983:03 - just looking at the colors
983:05 - let's just drop these into google
983:08 - because i'm really not sure just they're
983:10 - saying cyan bright yellow light gray
983:14 - in a grayish blue and to be completely
983:16 - honest i don't know what that refers to
983:20 - here
983:21 - it looks like this might be the yellow
983:24 - um not sure where the gray is maybe this
983:26 - text right here
983:28 - let's let's go ahead and type those into
983:29 - google real quick so we'll go rgb
983:35 - and there should be something
983:37 - rgb to hex maybe
983:39 - okay this is what we're looking for just
983:40 - the color picker on google
983:43 - and all we have to do is go back to our
983:45 - style guide
983:46 - and let's see what this cyan color is so
983:49 - we'll we'll paste in these values right
983:51 - here i'm not sure why they're giving us
983:53 - hsl values because that i really haven't
983:57 - used those
983:58 - all that much in web development you
984:00 - usually stick to hex and rgb
984:02 - but they are so let's go ahead and
984:05 - convert those to something a little bit
984:07 - easier to use so we'll grab a hex color
984:10 - here and let me just replace
984:13 - this just so we have a reference
984:15 - and then let's paste in the hsl for this
984:19 - yellow color that we're working with
984:21 - which to me looks more green maybe i'm
984:23 - colorblind who knows
984:26 - go for those hex values at the end here
984:29 - just for reference
984:31 - and then we'll do the same thing for the
984:32 - remainder because i like working in hex
984:35 - and i've never really worked with uh hsl
984:38 - so we'll go
984:39 - back and
984:40 - put these in here
984:42 - now to me when i look at this
984:45 - these bottom bottom left and bottom
984:47 - right boxes they
984:48 - they look like different colors to me
984:50 - this one looks like just a lighter
984:51 - version of the left
984:53 - and in the style guide i'm not so sure
984:56 - that they've given us
984:58 - two of those options so if we came in
985:00 - and looked at the cyan
985:03 - color so let me paste that in here
985:06 - it looks like that would be the bottom
985:08 - left color
985:09 - that we're dealing with or maybe even
985:11 - the bottom right color
985:13 - so what i'm going to do is just drag
985:16 - this that we have different colors maybe
985:18 - i'm missing something here but
985:20 - let me just drag this so that we get a
985:22 - little bit lighter color that we can
985:24 - work with
985:25 - and then i'm going to grab that hex
985:28 - value and paste it into the style guide
985:30 - so
985:31 - we'll put
985:32 - put that in there as darker
985:36 - and then lighter and at this point we
985:39 - can grab these color codes and start
985:41 - using them so we'll grab the darker
985:43 - color
985:45 - and we'll come back to our code pen
985:47 - and just put in a background color
985:49 - property so for the bottom left section
985:52 - we know that we can use the background
985:54 - color property
985:55 - and paste that in there and we should be
985:58 - getting that darker cyan color
986:00 - alright so at this point we can probably
986:02 - remove that border
986:05 - and that looks a little bit nicer for us
986:09 - and i'm also going to remove the bottom
986:11 - section blue border
986:14 - okay so we're looking a little bit
986:16 - better here and now i want to fill in
986:18 - the background color for this right
986:20 - section which
986:22 - as i just got a slightly lighter hex
986:26 - value
986:26 - so we'll go to the bottom right section
986:29 - get rid of the border
986:30 - and replace that with a background color
986:33 - and paste that in
986:35 - and it's looking like it's it's a little
986:37 - bit lighter but
986:39 - compared to the example it's there's
986:42 - more of a contrast here so let's go
986:43 - ahead
986:44 - let's play with that a little bit let's
986:46 - make it even a little bit more
986:48 - light
986:49 - grab that hex value
986:51 - and see what that looks like
986:55 - okay so that's that's a little bit
986:57 - better i like that contrast and you
986:59 - could even come over to adobe color
987:02 - and we'll go to this
987:04 - this
987:05 - adobe color tool and what i could do
987:08 - is i could grab the bottom left section
987:11 - hex code
987:12 - which is the darker cyan
987:15 - throw this in the middle here
987:16 - and then i want some shades of this
987:19 - color so
987:21 - we could grab maybe this shade over here
987:23 - which ensures that it's gonna you know
987:25 - nicely go together
987:27 - and let's put that one in the bottom
987:29 - right section just to get a little bit
987:31 - more complementary uh colors here
987:34 - and then
987:35 - i'll go back here and and replace this
987:37 - just so we have a reference of it
987:40 - okay so we've got these two um the top
987:43 - is going to be white and then at this
987:45 - point i think we can remove all of the
987:46 - borders just so that we don't have those
987:48 - ugly colors going on
987:50 - so let's let's go up here remove the top
987:53 - section green border
987:55 - everything looks good and then the red
987:58 - border around everything
988:01 - and boom we have ourselves a nicer
988:04 - looking layout
988:05 - now as you'll see
988:07 - in the example
988:09 - design
988:11 - it is kind of standing out against the
988:13 - background and you'll also notice that
988:15 - there are some little corners that are
988:18 - rounded so i want to do that just so
988:20 - that we have something as a reference
988:22 - here
988:23 - and i also want to kind of make this
988:26 - come out from the top left corner of the
988:28 - page so all we'd have to do for that is
988:31 - just add some padding to the body
988:34 - so if i go here and just add some
988:36 - padding of 20 pixels to the body you'll
988:38 - see that that comes in a little bit so
988:41 - remove it
988:43 - add it back and you can see our card
988:45 - just shifts inward so that we can kind
988:47 - of visualize it a little bit better
988:50 - and then finally for the card because
988:52 - that is the main container around
988:54 - everything what i'm going to do is add a
988:57 - box
988:58 - shadow and this property is going to
989:02 - take i believe five different arguments
989:04 - and they're all kind of
989:07 - referencing where the shadow is going to
989:08 - go so i can open up a tool
989:11 - called box shadow generator
989:15 - for css
989:16 - and there's a a couple tools here i
989:18 - don't know which one's the best
989:20 - they all should work but as you see this
989:24 - css box has a box shadow around it and
989:28 - you can you know drag these sliders to
989:31 - get different sorts of box shadows
989:33 - applying to this
989:34 - so this is a good visual tool that we
989:36 - can use to to see what we want
989:39 - and in our case we probably want a a
989:41 - much
989:42 - smaller box shadow so let's let's go
989:45 - ahead and
989:46 - actually no we want to stay close to
989:48 - zero
989:50 - so we'll go around four pixels and maybe
989:54 - three pixels or something like that and
989:56 - make the blur radius a little bit
989:58 - smaller
989:59 - and the opacity that we want
990:03 - let's make it down to like
990:04 - 0.2 or around that area maybe a little
990:07 - bit more
990:09 - i think that looks pretty good
990:11 - so the codes that we need it's showing
990:14 - us that we need to paste in all of these
990:17 - these webkit and moz box shadows are
990:19 - just for like other browser support we
990:22 - don't necessarily need them so i'm just
990:24 - going to copy in this rule right here
990:27 - and we'll paste it in to the cart and
990:30 - now you're going to see around the edges
990:31 - we're starting to get a defined
990:34 - edge to our card so let's go back to
990:38 - our design
990:39 - and you can see that we're getting a
990:41 - little bit closer here
990:43 - what i want to do is round the corners
990:44 - now so all we have to do
990:47 - is say on the main card we say we want
990:49 - to border radius of call it five pixels
990:52 - all right so we've got our border radius
990:54 - on here but what you'll notice is that
990:56 - the bottom
990:57 - right corner
990:58 - and the bottom left corner
991:00 - do not have a border radius and you
991:02 - might ask why because we've given
991:04 - a border radius of 5 pixels which should
991:07 - apply all around that
991:09 - container element
991:11 - but the problem
991:12 - is because we have these two inner
991:15 - container elements that are perfect you
991:17 - know squares and they occupy a hundred
991:19 - percent
991:20 - of the space within that main container
991:23 - so as we make a border radius we're
991:26 - actually
991:29 - those inner boxes are actually breaking
991:31 - out of the main container now
991:34 - and what you're seeing there is those
991:36 - those uh child containers there's a
991:39 - couple ways that we could fix this but a
991:41 - cool little trick that you can use and i
991:43 - know this is not necessarily obvious but
991:46 - if you do enough googling you would find
991:48 - this out if you
991:50 - set the overflow property
991:53 - to hidden
991:54 - on the main container element
991:57 - you'll see that those
991:58 - borders go rounded and basically what
992:00 - that's saying is we want to take those
992:02 - perfect square children containers
992:05 - and since those are breaking out of the
992:07 - main container we want to say to the
992:10 - main container css style okay if you
992:12 - have anything that's breaking out of
992:14 - your borders just hide it and so that's
992:17 - what allows those bottom border radiuses
992:20 - to apply so just a cool little trick
992:23 - it's also one of those frustrating
992:25 - things about css where
992:27 - it's doing things that you would not
992:29 - expect and that is literally the name of
992:31 - the game with css
992:33 - is figuring out how to get around the
992:36 - things that you're not expecting to
992:38 - happen
992:38 - okay so we're getting a little bit
992:40 - closer here
992:42 - the next thing that we can do that will
992:43 - just add a really nice touch
992:46 - and make this look a little bit cleaner
992:48 - is some padding i think
992:50 - so let's jump back to our design and you
992:52 - can see that all around the content here
992:56 - so around
992:57 - every bit of content there is this space
993:00 - this nice padding in here
993:03 - and what we could do is we could come in
993:05 - to our code pen
993:07 - and we could just say on the total card
993:09 - we want to add some padding
993:11 - of say 20 pixels
993:13 - but that's going to
993:15 - mess us up a little bit because although
993:17 - it adds nice padding around everything
993:20 - now these are not occupying 100 width
993:23 - and also we want some padding within
993:26 - these sub little containers so what i'm
993:28 - going to do instead of adding it on the
993:30 - total card
993:32 - to get padding like that i'm going to
993:34 - add them on each individual section
993:37 - so we'll call it a padding of about 20
993:40 - pixels that's a pretty standard amount
993:42 - of padding to add
993:44 - and we can just look at this little
993:45 - space between the edge and the text on
993:48 - the top and the left
993:50 - to get an idea of how large that padding
993:52 - is
993:53 - and that looks pretty in line with our
993:56 - design so i'm happy with that and then
993:58 - let's copy that rule down into the other
994:02 - sections so not the bottom section
994:04 - because that represents everything here
994:06 - but i want to do it in the bottom left
994:08 - section so we get that nice padding and
994:11 - then i also want to do it in the bottom
994:14 - right section which will make the
994:16 - padding
994:17 - nice there too so at this point we've
994:19 - gone from a completely ugly layout
994:22 - design to something that actually makes
994:24 - sense visually we obviously have a lot
994:26 - to do with the text styles and colors in
994:30 - that button but we're getting a lot
994:31 - closer let's go ahead and change the
994:34 - text color you can see that everything
994:36 - in the bottom is a text color of white
994:39 - and then the top has varying text colors
994:41 - so we'll start with the top and you can
994:43 - see that the the heading is the same
994:45 - color as the bottom left or at least it
994:47 - appears to be
994:48 - so let me grab that bottom left color
994:52 - and we'll go ahead and apply that to our
994:55 - join our community text block so let me
994:59 - collapse the js here and we'll go up to
995:02 - the join our community and what you
995:04 - could do is you could target everything
995:06 - in the top section that's in h2
995:09 - and since we're not planning on changing
995:10 - the html
995:12 - structure anytime soon i'm pretty happy
995:15 - with that you could also throw an id
995:18 - you know that says title and
995:21 - directly style it
995:23 - but in this case let's go ahead and
995:24 - practice our combinator skills our css
995:27 - combinators to style this
995:30 - so we'll come down here and at this
995:31 - point you'll see the css is getting
995:33 - pretty busy you might want to rearrange
995:35 - it and organize it by section but for
995:38 - now let's just keep going and what we'll
995:40 - do is we'll say the top section is the
995:43 - pre-selector that we want
995:45 - and then we want to grab every h2
995:47 - element which is simply that first title
995:50 - and what we want to do is style it a
995:52 - color of that bottom left so now we're
995:55 - going to get the correct color
995:57 - let's go back to our
996:00 - visual studio code
996:03 - and see what else we have so we have
996:04 - this kind of lime green yellowish color
996:07 - as the next one
996:09 - and that is going to be
996:11 - this hex code the bright yellow
996:14 - so going back to our code pen
996:16 - you can see that this is the only h4
996:19 - that is sitting in our top section
996:21 - so we can grab a similar rule
996:24 - as we just did except this time we're
996:26 - grabbing h4s and giving it a color of
996:29 - yellow
996:30 - so there is our yellow color and then
996:32 - finally
996:34 - we should have some sort of gray color
996:36 - and let me
996:38 - get to our visual studio code
996:41 - this this paragraph text is gray
996:44 - and in the style guide
996:46 - i believe that is the light gray that
996:48 - we're looking for so let's copy that hex
996:50 - code
996:51 - and then make all of the paragraph
996:54 - elements
996:55 - in the top section
996:57 - equal to this light gray color
997:00 - okay so that is that is very light i'm
997:03 - not sure if that's what we were supposed
997:05 - to do
997:08 - it appears pretty pretty good here but
997:10 - it's pretty darn light when we're
997:13 - looking at it here so i'm going to go
997:15 - ahead and make this a little bit
997:17 - stronger of a gray
997:20 - maybe it's the grayish blue actually
997:23 - let's try that instead
997:28 - ah okay so i think that's what they
997:30 - meant
997:31 - for this style
997:35 - yeah i think that's what we're looking
997:37 - for here
997:38 - so the grayish blue looks a little bit
997:40 - better we'll stay with that now we just
997:42 - have to add some
997:44 - some spacing between these so if you
997:46 - remember at the very top of our html
997:49 - we did a reset that said for all h2 h4
997:52 - and p elements
997:53 - we want to
997:55 - add a margin of zero so that removed all
997:57 - the default spacing and now we can do it
997:59 - custom and since we've got all three of
998:02 - these elements selected with these
998:03 - combinators we can just drop into these
998:05 - rules and do so
998:07 - let's take a look at our design it looks
998:10 - like there's a good amount of space
998:12 - just by experience that looks about 15
998:14 - pixels between the top and the next one
998:17 - let's go ahead and try that by adding
998:20 - a
998:21 - margin
998:22 - bottom
998:23 - of 15 pixels
998:26 - and you can see that's a nice little
998:28 - spacing there
998:29 - um
998:31 - what i'm starting to see is that our top
998:34 - section now that we've got this laid out
998:36 - is a little bit small from a height
998:38 - perspective so
998:40 - i think i'm going to adjust our our
998:42 - total dimensions here
998:44 - um previously we had said the bottom
998:47 - section has a height of 60 in the top 40
998:50 - percent i'm going to change that to 45
998:53 - and 55.
998:56 - and you'll see now we have a little bit
998:58 - more realistic uh breakout between the
999:01 - two sections i'm pretty happy with that
999:03 - so
999:04 - the last thing we need to do now that we
999:05 - made that change is add some spacing
999:08 - between this these two text elements and
999:11 - then
999:12 - we've already got some padding at the
999:14 - bottom so we'll go down to our rule of
999:17 - the h4
999:18 - and add a margin on the bottom of 10
999:21 - pixels which seems about right
999:23 - so comparing that up
999:26 - i think we're getting pretty close and
999:28 - and now that i'm looking at it we might
999:30 - actually need a little bit more padding
999:32 - around this
999:33 - uh than we've given it so
999:35 - let's go to
999:36 - the top section wherever we did that and
999:40 - let's increase that padding to say 25
999:43 - pixels
999:45 - that that looks a little bit better
999:47 - for us and then we'll go ahead and
999:49 - update that to 25 pixels in the other
999:51 - two spots that we
999:53 - had added that
999:55 - okay so we're doing pretty good there
999:57 - and it looks like our total card size
1000:01 - is it's starting to break out but i'm
1000:02 - gonna wait on that before i try to
1000:04 - restyle because the text is going to get
1000:07 - a little bit smaller when we set the
1000:09 - font size and change the font style
1000:12 - so the last thing we'll do is come down
1000:14 - and since everything in the bottom it
1000:16 - looks like is a color of white
1000:19 - we can just go to the
1000:21 - selector that we used
1000:23 - for the the entire bottom section so
1000:26 - rather than trying to style the text in
1000:28 - the left
1000:30 - section and the right section we can
1000:32 - just go to the entire bottom section and
1000:34 - give it a color of white
1000:37 - that looks pretty good
1000:39 - i think that should work and then you
1000:40 - can see the button color is not being
1000:43 - styled because that is a separate
1000:45 - element there so what i can do is
1000:48 - actually target
1000:50 - all buttons
1000:51 - because there's only one button on the
1000:53 - entire page
1000:54 - so we'll we'll style the button and
1000:56 - we'll give it a color of white
1000:59 - and that's going to give it a text color
1001:01 - over white we'll make that show up a
1001:02 - little bit better once we
1001:04 - add a background color which looks like
1001:08 - that lime green but i'm going to wait on
1001:09 - that for just a second
1001:12 - the next major change that i want to
1001:14 - make is getting this text to be the
1001:16 - right font family
1001:18 - right now we're just using the browser
1001:20 - default whatever that is i don't
1001:22 - actually know off the top of my head but
1001:25 - we want to make this a different font
1001:27 - completely and if you look at the style
1001:30 - guide
1001:31 - it's going to say the font family that
1001:32 - we're looking at is carla and if we go
1001:35 - to this link
1001:37 - we can see all of the different styles
1001:39 - that we need now the question is what
1001:41 - what font weights and you know styles do
1001:43 - we need
1001:44 - well we can go and look at the spec it
1001:46 - says we need weights of 400 and 700
1001:50 - so let me take the font weight of 400
1001:53 - and select that style
1001:55 - and then the font weight of 700 and
1001:58 - select that as well
1001:59 - we will grab the link tags that we need
1002:03 - we'll go back to our code pen over here
1002:07 - go up to the settings
1002:08 - html
1002:10 - and in the stuff for the head element so
1002:13 - since codepen gives us our own little
1002:14 - environment we don't actually have to
1002:16 - make
1002:17 - the head
1002:18 - element or boilerplate so we can just
1002:20 - paste it here
1002:21 - and by doing this and saving and closing
1002:24 - we now have access to that new font
1002:27 - but it hasn't changed anything because
1002:29 - we have to actually select it within our
1002:31 - document
1002:32 - so up at the root element we want to
1002:35 - give a font family
1002:37 - of
1002:38 - carla and you can see that it changed
1002:41 - our design completely
1002:43 - and it says that the
1002:45 - overall font size is going to be 16
1002:47 - pixels
1002:48 - so let's go ahead and say that the font
1002:51 - size in the root element is going to be
1002:53 - 16 pixels which is just going to apply
1002:56 - to those
1002:58 - paragraph elements as i'm flipping back
1003:00 - and forth between these two designs
1003:02 - looks like we still need a little more
1003:04 - space after this so let me do that real
1003:06 - quick
1003:07 - before i get into
1003:09 - anything else we'll add 20 pixels to
1003:11 - there
1003:12 - okay and then i'm i'm thinking that
1003:14 - we're running out of space vertically
1003:17 - and since we
1003:18 - came up with an arbitrary height
1003:21 - at the beginning
1003:22 - i don't mind changing that because they
1003:24 - didn't specify what the height should be
1003:26 - so let's go ahead and
1003:28 - turn that to 400 to give us some more
1003:30 - space and i think this looks a lot
1003:33 - closer to the card that we're working
1003:35 - with here so just adjusting that gives
1003:37 - us a pretty good look and now we've got
1003:41 - our font family
1003:42 - styled here i think the next thing we
1003:44 - have to do is figure out of that font
1003:47 - family they had us download the font
1003:49 - weight of 400 and 700 which means
1003:52 - that some of these should have a font
1003:54 - weight of 700 or bold so let's look at
1003:57 - our design and see which ones
1004:00 - that would apply to
1004:02 - it looks like to me this 29
1004:05 - uh call out is the only one where the
1004:07 - font weight is you know extra bold so
1004:10 - let's come down and
1004:12 - um
1004:13 - because the default font weight is going
1004:15 - to be 400 or you could also specify it
1004:18 - in the
1004:19 - root so we'll say 400
1004:22 - but that's once again going to be the
1004:24 - default so it's not going to change but
1004:26 - if we came down to our
1004:28 - price right here
1004:30 - we're going to have to actually
1004:32 - uh put some
1004:33 - identifiers on here to enable us uh or
1004:36 - it let us select it with css
1004:39 - so i'm gonna say
1004:41 - price
1004:43 - um price container and then
1004:47 - this will be an id of price
1004:50 - and then this will have an id of
1004:54 - price frequency
1004:57 - or something like that so now we have
1004:58 - ids to basically
1005:01 - select each of these little components
1005:03 - here
1005:04 - and if we come down to our css we need
1005:06 - to set the price to a font weight of
1005:09 - 700. so we'll come down to the bottom
1005:13 - we'll set our price to a font weight of
1005:16 - 700 and you'll see
1005:18 - that this gets a little bit bolder so if
1005:21 - i uncomment it it's not bold if i
1005:24 - comment it back it's going to be bold
1005:26 - and then while we're here just give us a
1005:28 - ballpark uh font size let's go ahead and
1005:31 - say 1.4
1005:33 - rem
1005:34 - which is basically going to be
1005:36 - 140
1005:37 - of the root elements font size which we
1005:40 - know is 16 pixels so do 140 times 16
1005:45 - pixels and that's how many pixels we
1005:47 - just made that font size too
1005:49 - all right looking back we're getting
1005:52 - closer we're not
1005:53 - we're not too far off i think the next
1005:56 - obvious thing that's going on that we're
1005:58 - missing is this button because our
1006:00 - button looks terrible
1006:02 - in comparison so let's go ahead and make
1006:04 - a button that is about the same size
1006:06 - here
1006:07 - and also has that background color we've
1006:10 - already selected the button so that we
1006:12 - could give it
1006:14 - white text but now we can just
1006:17 - go ahead and grab this color code that
1006:20 - we used for the h4
1006:22 - up here
1006:23 - and apply it as the background color
1006:25 - to the button
1006:28 - so we'll give the background color that
1006:30 - light green you can see that there's by
1006:33 - default this border that looks pretty
1006:35 - terrible so we can set the border to be
1006:38 - equal to
1006:40 - none
1006:42 - that makes that look a little bit better
1006:44 - and then there's more spacing
1006:47 - than we have here around this text so
1006:50 - that's a good use for padding
1006:52 - so all we need to do is come in and add
1006:55 - we'll say 10 pixels of padding
1006:58 - that looks roughly correct and then
1007:00 - finally you can see that this has a
1007:03 - border radius so the button has curves
1007:05 - around the edges and it's equal to kind
1007:08 - of the size of that container so
1007:11 - remember we put some padding around the
1007:13 - edges of this container so the new
1007:17 - size that we're going to have is we
1007:19 - should be able to just say a hundred
1007:20 - percent i believe
1007:22 - so let's say the width is going to be a
1007:24 - hundred percent
1007:26 - and yes that's going to get it get us
1007:28 - equal to that parent container
1007:31 - so at this point we just need to add a
1007:33 - border radius of call it 5 pixels
1007:36 - and i think our button is looking pretty
1007:39 - good
1007:40 - so
1007:41 - it looks like we're a little bit wider
1007:43 - than this right here but i'm not too
1007:45 - worried about that we have the
1007:47 - perspective
1007:49 - pretty good and the most important part
1007:50 - is that it's a hundred percent of the
1007:52 - container
1007:53 - so i think at this point we have all of
1007:56 - the colors
1007:58 - in place let's just check that
1008:00 - yes we do so we have all the colors that
1008:02 - we need
1008:04 - and our font family is correct
1008:07 - now
1008:08 - we just need to do two more things we
1008:10 - need to to get the font sizes and font
1008:14 - weights
1008:15 - a little bit better and then we also
1008:17 - need to get everything spaced out in
1008:19 - this
1008:20 - price
1008:21 - and the frequency horizontal to each
1008:23 - other i'm going to go ahead and say that
1008:25 - this top section is completely done
1008:28 - it's not you know perfectly aligned with
1008:31 - this design but it's very close um and
1008:34 - part of this is we're looking at a much
1008:36 - larger version of this so
1008:38 - um we're never going to get it like
1008:39 - exactly perfectly it's just not worth
1008:42 - our time
1008:43 - but down here let's go ahead and start
1008:45 - working on this bottom left box
1008:48 - so
1008:48 - this monthly subscription
1008:51 - that looks okay maybe a little bit heavy
1008:53 - in font but i'm not too worried about it
1008:56 - but there needs to be some space between
1008:59 - it and the price
1009:01 - so let's target this right here and put
1009:04 - a margin at the bottom of it and the way
1009:07 - we can do that is go find in the html
1009:11 - the tag that we want so the bottom left
1009:14 - section
1009:15 - and like we did in the top section we
1009:17 - can just target individual elements
1009:20 - so we'll
1009:21 - target that and then we want to use a
1009:23 - combinator to say
1009:25 - that we want to target the h4
1009:27 - potentially
1009:29 - let's see what we have here so we have
1009:31 - the monthly subscription as an h4 and
1009:33 - that's the only h4 in this entire
1009:35 - section so we're pretty safe
1009:37 - to target it with the combinator and now
1009:40 - we want to give it a margin on the
1009:42 - bottom
1009:43 - of call it 20 pixels
1009:46 - i think that's pretty good
1009:48 - maybe a little much so maybe we'll go
1009:50 - with something like
1009:52 - not 5 but 15 pixels
1009:55 - okay i like that and now the next part
1009:57 - is we're going to take this per month
1009:59 - and drag it up onto the line that the 29
1010:02 - dollars is on
1010:04 - so to do that we once again target the
1010:07 - bottom left section
1010:09 - and
1010:10 - actually no we're not going to target
1010:11 - that we now have the this individual
1010:14 - price container
1010:16 - so that we can work specifically with
1010:18 - this
1010:19 - layout
1010:20 - and what i want to do is grab the price
1010:22 - frequency
1010:24 - right here so we'll target the price
1010:26 - frequency
1010:28 - and i want to display this as an inline
1010:30 - block because i want it to come up on
1010:32 - that line
1010:33 - uh next to the 29 dollars and at the
1010:36 - moment
1010:37 - it's not doing it because the 29 dollars
1010:40 - is not an inline block
1010:41 - so we can target both of those we can
1010:44 - say price frequency
1010:46 - um
1010:48 - and
1010:50 - the actual price to both be inline
1010:52 - blocks and now they're coming
1010:54 - onto the same line and since we have
1010:57 - both of those elements within this div
1011:00 - container the price container we can
1011:02 - just say on the entire
1011:04 - price container
1011:06 - that we want a margin on the bottom of
1011:08 - call it 20 or 10 pixels what you'll see
1011:11 - here is that the per month is kind of
1011:14 - aligned to the bottom of this 29 dollars
1011:17 - in a quick way
1011:19 - to do this you know if we were using
1011:22 - flexbox this would be super easy
1011:25 - but a kind of a quick hack to change
1011:27 - this
1011:28 - is set the position of this element to
1011:30 - relative
1011:31 - which then allows us to
1011:34 - basically if you remember from the first
1011:37 - video of the css crash course
1011:39 - we talked about how relatively
1011:41 - positioned elements
1011:43 - you can set them
1011:45 - basically relative to themselves so if
1011:47 - we give it the top property and then we
1011:50 - want to bring it upwards so we basically
1011:52 - want to do a negative amount of pixels
1011:55 - and we say we want to bring it up maybe
1011:58 - three pixels you'll see that that per
1012:01 - month kind of goes up a little bit so
1012:04 - watch the per month and i'm going to
1012:05 - uncomment or i'm going to comment this
1012:07 - out
1012:08 - it's going to go back to the bottom and
1012:09 - then i'm going to put it back in there
1012:11 - and it goes
1012:12 - up to the middle so i kind of like how
1012:14 - that's sitting and then furthermore on
1012:16 - that price frequency the font size
1012:19 - should be a little bit smaller so we'll
1012:21 - give it 0.8 rem
1012:23 - so that's a little bit closer
1012:26 - and then you'll also see that
1012:28 - it has a little bit more space between
1012:30 - the 29 dollars and it's also a little
1012:32 - bit lighter so it's not quite as
1012:35 - punchy of a white color
1012:37 - so all we would have to do here is maybe
1012:40 - give it a trans or not transparency but
1012:43 - we could give it an opacity of maybe 0.8
1012:48 - and that makes it a little bit lighter
1012:50 - for us maybe even 0.7
1012:53 - okay i like that and then finally a
1012:56 - margin to the left of it of maybe five
1012:59 - pixels
1013:01 - and you can see that spaces it over to
1013:03 - the right so i'm pretty happy with how
1013:05 - we've got that spaced out
1013:07 - that's relatively relatively close in
1013:10 - style and position
1013:12 - and i like the size of the 29 dollars so
1013:15 - i think we're done with that little sub
1013:17 - component of the top of the bottom left
1013:20 - container
1013:22 - next up are full access for less than a
1013:25 - dollar a day
1013:26 - that's a little bit large in my opinion
1013:29 - um
1013:31 - because it looks like this text is even
1013:32 - a little bit smaller than this paragraph
1013:34 - text up here
1013:36 - so we probably want to make this a
1013:37 - little bit smaller in relation to the
1013:39 - paragraph text
1013:41 - the way that we'll do that is this is
1013:43 - the only paragraph element within the
1013:45 - bottom left section
1013:47 - so once again we will
1013:49 - grab the bottom left section and maybe
1013:52 - even just copy this rule right below
1013:54 - here
1013:55 - and target all p elements which will be
1013:58 - a single element and give it a font size
1014:01 - of maybe 0.9 rem units
1014:05 - and that gives us a nice size maybe
1014:07 - we'll make it even a little bit smaller
1014:10 - so 80 of the
1014:12 - the original text size of 16 pixels
1014:15 - and then finally we just have to bring
1014:18 - this button all the way down to the
1014:19 - bottom so
1014:21 - we have a couple ways of doing this but
1014:23 - one of those ways would be
1014:25 - you know taking this p element and just
1014:27 - putting a margin on the bottom of maybe
1014:30 - 40 pixels
1014:32 - and that should bring the button down
1014:35 - now flipping between these two
1014:37 - i'm seeing that uh
1014:40 - this
1014:41 - these text right here is kind of in the
1014:42 - middle of the top in the button
1014:45 - so i'm going to change a few of these
1014:48 - alignments here i think we need a little
1014:49 - bit more margin below the monthly
1014:52 - subscription so let's add maybe 25
1014:55 - pixels instead of 15.
1014:57 - and that gives us a nice little layout
1014:58 - there so it's not perfect
1015:01 - not exactly the same but it is fairly
1015:03 - close and we've gotten all of the
1015:05 - functional
1015:06 - and layouts pretty good here so at this
1015:09 - point i think we're done with the top
1015:11 - we're done with the bottom left
1015:13 - and now we just have the bottom right
1015:15 - which should be relatively simple to do
1015:18 - so the why us piece is already pretty
1015:22 - good i like how that's sitting it's in
1015:24 - alignment with monthly subscription same
1015:26 - size as it so
1015:28 - so that's good
1015:29 - and now we just need to take the bullet
1015:31 - points off of our list item and align
1015:34 - those two uh to the left of each other
1015:37 - so let's see that how we would do this
1015:40 - so to really show you what's going on
1015:42 - here let's open up the
1015:44 - chrome dev tools
1015:46 - and try to just rearrange this so that
1015:48 - we can see everything
1015:50 - it's a little bit weird debugging html
1015:52 - and css in a codepen environment because
1015:55 - you've got all these different windows
1015:57 - open but really what this right side
1016:00 - elements is doing is looking at this
1016:02 - html page so if we were to click this
1016:06 - selector up here and come down and grab
1016:09 - the entire list that we're looking at
1016:12 - you'll immediately see that there is
1016:15 - some sort of you know padding and margin
1016:17 - around this list by default
1016:20 - so the the margin is fine that doesn't
1016:23 - bother me at all
1016:24 - but that green little box on the left
1016:26 - side of all the text is some default
1016:29 - padding that is added to list because
1016:31 - generally you want those lists to kind
1016:33 - of be indented from the main text so
1016:35 - that's what you would want but here we
1016:37 - don't want that so if we go over into
1016:40 - the style right here and we basically
1016:42 - say
1016:43 - padding is equal to zero you're going to
1016:46 - see that everything goes to the left and
1016:48 - it lines up with the text like we want
1016:50 - it
1016:50 - now the last thing is there's bullet
1016:52 - points that we don't want there and you
1016:54 - can actually set the list style property
1016:57 - and set that to none
1016:59 - and by doing that all of the bullet
1017:00 - points go away and so those are the only
1017:03 - two changes that we'll have to make to
1017:05 - get this to work so let me go ahead and
1017:07 - refresh the page so we get this reset
1017:10 - because those changes we made were
1017:12 - actually temporary
1017:13 - and then we'll come down to the very
1017:15 - bottom
1017:16 - and since there's only one list in our
1017:18 - entire html document we'll just target
1017:21 - it by tag
1017:22 - and we'll say the padding is equal to
1017:24 - zero
1017:25 - and the list style is none
1017:28 - so we've removed the
1017:30 - list styling by using this attribute or
1017:34 - property
1017:35 - and remove the padding on the left so
1017:37 - it's all lining up just like our
1017:39 - design here but what we are missing is
1017:41 - this looks a little bit smaller and it
1017:44 - also isn't so
1017:47 - such an intense white color so it looks
1017:49 - like the opacity of it might be a little
1017:52 - bit lower similar to this per month
1017:55 - piece of text
1017:56 - so all we need to do there
1017:58 - is say font size
1018:00 - and we'll bring it down to
1018:03 - what did we say
1018:04 - this one was
1018:07 - 0.8 rem so 80 of the root element size
1018:12 - or 80 times 16 pixels
1018:15 - and then we can bring the opacity down
1018:18 - to 0.8 as well
1018:20 - and i think that looks pretty pretty
1018:22 - good there
1018:23 - it's not exact but it is it's pretty
1018:25 - much in line with uh with everything at
1018:28 - this point i think we're pretty much
1018:30 - done
1018:31 - the only remaining item
1018:34 - that i can think of is this button right
1018:37 - here so the button is currently
1018:40 - not doing anything when we hover over it
1018:43 - and i want to change that especially
1018:45 - because that was part of the
1018:46 - requirements
1018:48 - so here's our button styles
1018:50 - in this block right here
1018:52 - and in order to
1018:54 - style it on hover we need to give it the
1018:56 - pseudo class
1018:58 - of hover
1018:59 - and once we do that this was something
1019:02 - that we talked about and i think the
1019:03 - first lesson of the crash course
1019:06 - and the first thing that we always want
1019:08 - to do on hover is change the cursor to a
1019:10 - pointer so you can see how the cursor
1019:13 - changes as i hover over this button and
1019:16 - that's just to indicate to the user that
1019:18 - hey you can click on this
1019:20 - so from here we also probably want to
1019:23 - change the color when we hover over it
1019:25 - because the cursor is not obvious enough
1019:27 - so we could just take this uh background
1019:30 - color right here that's already on the
1019:32 - button and make it a little bit lighter
1019:34 - or a little bit darker so let's grab
1019:37 - that hex code and bring it into our
1019:39 - color wheel of adobe color
1019:42 - and let's just see if we can find like a
1019:44 - shade of this that would work
1019:47 - i think
1019:48 - something like maybe this one on the
1019:50 - right would be
1019:51 - okay
1019:53 - and if we bring that in
1019:54 - and we change the background color to
1019:57 - the hover state to that little bit
1019:59 - darker color it's going to just have an
1020:01 - effect where it's showing us oh hey you
1020:03 - can click here and it's going to do
1020:05 - something and to make that even more
1020:07 - pronounced there's a property that you
1020:10 - can use called transform and there's
1020:12 - plenty of
1020:13 - values that you can pass here but one of
1020:15 - those is going to be the scale function
1020:18 - and we can just say like 1.1 or
1020:20 - something like that so we can scale it
1020:22 - 110
1020:24 - and you'll see that it you know gets a
1020:26 - little bit larger when we hover over it
1020:28 - and that's that's even a little extreme
1020:30 - maybe we'll just do
1020:32 - 1.02 or 102
1020:35 - and i like that that's a nice little
1020:37 - subtle indication to the user that when
1020:39 - they hover over and click this it will
1020:41 - do something
1020:43 - now right now this button doesn't do
1020:44 - anything but just for fun just to add
1020:46 - something in there we can come up and
1020:48 - use what we've learned in the prior
1020:50 - lessons of this
1020:51 - full stack road map
1020:53 - and come up to the button
1020:55 - and add ourselves an on click listener
1020:58 - and we'll pass the function alert user
1021:02 - which we have not created yet but we'll
1021:04 - come down to the js section and say
1021:07 - alert user
1021:08 - and then we will pass an alert that says
1021:11 - hey
1021:12 - you clicked
1021:13 - the button
1021:15 - so let's finish that one up and now when
1021:18 - we click this button it's going to alert
1021:21 - the user that they clicked it
1021:23 - so obviously not you know useful but
1021:25 - it's a nice little addition to make this
1021:28 - a little bit more interactive
1021:30 - now the final thing that we
1021:32 - could do here is make this mobile
1021:35 - responsive and what i mean by that is if
1021:38 - we drag this right side over
1021:41 - to the left you'll see that it just
1021:42 - disappears
1021:44 - right here and it just flows off of the
1021:46 - page which is a terrible user experience
1021:49 - if you're on mobile
1021:50 - so this would be about the size of a
1021:52 - mobile device
1021:53 - so if your user you know
1021:56 - looked at this
1021:58 - design
1021:59 - this is what they're going to see which
1022:00 - is completely useless to them so what
1022:02 - you would want to do
1022:04 - is make it a mobile design and as you
1022:06 - see
1022:07 - in the front-end mentor challenge it
1022:10 - tells you that you need to design
1022:11 - something like this
1022:13 - now we haven't talked about
1022:15 - mobile and responsive design quite yet
1022:18 - and i'm going to cover that in a
1022:19 - completely separate video i think that
1022:21 - might be the next video after this one
1022:24 - so for now we're going to keep it just
1022:27 - desktop only but in future challenges
1022:30 - future front-end mentor challenges we
1022:32 - will make that
1022:33 - we will make this mobile responsive
1022:36 - now there's one more thing that i want
1022:38 - to do because it's quick it's easy and
1022:40 - it will give you at least a little bit
1022:42 - of a win here in terms of being able to
1022:45 - share this and show it off so
1022:47 - if we come to github let me open up a
1022:51 - new tab
1022:53 - and go to github
1022:54 - if you followed along with this full
1022:56 - stack roadmap
1022:57 - from the very beginning i had asked you
1023:00 - to create a github account because
1023:02 - you're going to need it as a developer
1023:03 - no matter what it's just kind of
1023:05 - expected of you to have a github profile
1023:08 - so if you've already got one great if
1023:10 - not go ahead and create one
1023:13 - and let's go ahead and click create new
1023:16 - repository right here
1023:18 - and we'll say
1023:20 - pricing
1023:21 - card
1023:23 - frontend mentor
1023:26 - challenge is what we're going to name
1023:28 - this repository
1023:30 - and we're going to call it an
1023:31 - implementation
1023:33 - of the
1023:34 - front-end mentor
1023:37 - code challenge
1023:39 - and we're going to make it public
1023:41 - and you don't really need to initialize
1023:43 - any of these but let's go ahead and add
1023:45 - a readme i'll just show you what that is
1023:47 - and you click create repository
1023:50 - so we're going to go through
1023:52 - version control and how to actually get
1023:55 - this within the terminal a little bit
1023:57 - later in the series but for right now
1023:59 - we're just going to use github's
1024:02 - ui or user interface to post our code
1024:06 - and then deploy it to github pages
1024:08 - and what github pages is going to do is
1024:11 - it's going to allow you to host this
1024:13 - challenge you just created on the web
1024:15 - and share it as a url
1024:18 - so here's our initialized repository
1024:20 - every repo or repository is going to
1024:22 - have
1024:23 - a readme or at least it should and this
1024:26 - should give an introduction to
1024:29 - what this repository is all about and
1024:31 - oftentimes when you're building a web
1024:33 - app
1024:34 - the readme will give instructions on how
1024:36 - to run it locally and how to develop it
1024:38 - and you know you get the point
1024:40 - so
1024:41 - within the repository we obviously could
1024:44 - make files on our local computer and
1024:46 - then use version control to push the
1024:47 - files up to this
1024:49 - interface but for right now we're just
1024:51 - going to add a file
1024:53 - and we're going to click create new file
1024:56 - and this one is going to be called
1024:58 - index.html
1025:00 - so this will basically be
1025:03 - all of the html that we just created and
1025:06 - index.html is the default html document
1025:09 - that github pages
1025:11 - is going to look for when it's trying to
1025:13 - serve it on you know the live url
1025:16 - so it needs to be named this and from
1025:18 - here
1025:19 - if you were to go back to our html and
1025:22 - copy it all
1025:24 - and paste it in here we have the body
1025:27 - section implemented but since codepen
1025:30 - already implements the head tag and the
1025:32 - um body tag
1025:34 - that's not going to be here so we need
1025:36 - to add those pieces in order for this to
1025:38 - work
1025:39 - so the first thing that i'm going to do
1025:41 - or actually let's let's come back and
1025:43 - write out that structure so basically
1025:45 - we'll come to the top and we'll say that
1025:47 - we need an html tag
1025:50 - and we'll copy this one and put it at
1025:52 - the very bottom
1025:58 - and then furthermore let me zoom in a
1026:00 - little bit so you can see what i'm
1026:01 - working on
1026:03 - and then after this we will need the
1026:06 - head tag
1026:08 - and we'll just we'll call it
1026:10 - uh my front end or no we'll say
1026:14 - pricing card will be the title which is
1026:16 - going to show up in this little tab when
1026:19 - we're viewing it live
1026:22 - and then we'll close out the head tag
1026:23 - we'll come back to this in just a second
1026:25 - to add those fonts that we put in and
1026:28 - then we've got the body tag which is
1026:30 - going to be closed all the way down here
1026:32 - at the bottom
1026:34 - and then lastly let's just indent
1026:36 - everything
1026:38 - to a proper level and now you can see
1026:40 - that we've wrapped everything together
1026:42 - in this html
1026:44 - the last thing we're going to need to do
1026:46 - here is
1026:47 - link up all of the style sheets and the
1026:50 - fonts so if we go back to our pricing
1026:52 - card go to settings
1026:55 - html we're going to need all of that
1026:57 - stuff that we had in the head
1026:59 - and we're going to put that right after
1027:01 - the title so you can see we have these
1027:04 - two link tags
1027:05 - and then furthermore we're going to have
1027:08 - to link up our css stylesheet that we'll
1027:11 - put in in just a second
1027:13 - so the way that we do that is another
1027:15 - link tag
1027:16 - and
1027:17 - i believe the
1027:20 - href
1027:21 - is going to be
1027:22 - style.css
1027:24 - which we're going to create in just a
1027:25 - second
1027:27 - and this will be a stylesheet
1027:30 - so we'll close that off
1027:31 - and what this means is basically i want
1027:34 - you to pull in
1027:36 - the file called
1027:37 - style.css
1027:39 - in the
1027:40 - directory that is
1027:42 - basically hosting this index.html file
1027:45 - you'll see what that means in just a
1027:47 - second
1027:48 - so for now let's go ahead and commit
1027:50 - this new file
1027:52 - and go down to add another file
1027:56 - and this one is going to be style.css
1027:59 - which is what i just talked about how we
1028:01 - linked up to that within our html
1028:04 - and from here we should be able to just
1028:08 - paste in all of this css
1028:11 - right here that we had created
1028:14 - so nothing nothing else to do here we
1028:16 - can just go ahead and commit that file
1028:19 - and then finally we need to add our
1028:22 - javascript file so
1028:25 - we added just a few lines of javascript
1028:27 - down here
1028:28 - but in order for that to work we need to
1028:30 - actually connect it up to our html
1028:33 - and the way that we're going to do that
1028:34 - is go back to our html file
1028:37 - click edit
1028:39 - and then come down to the bottom of the
1028:41 - body and this is where we need to have
1028:46 - our script tag to do that we just type
1028:48 - out a script tag which is not
1028:50 - self-closing there's actually two pieces
1028:52 - to it
1028:54 - and we need to give it a source
1028:56 - and we're going to say um
1029:00 - let's say just
1029:01 - index.js
1029:03 - is what we're going to call our
1029:04 - javascript
1029:05 - document so
1029:07 - commit those changes i believe that
1029:09 - should work
1029:11 - so long as we go to the main
1029:14 - file here or the main directory and add
1029:16 - that javascript file
1029:18 - so we need to name this index index.js
1029:21 - as we just referred to in our html and
1029:24 - then we should be able to paste in
1029:27 - that function that we created
1029:30 - and commit the file
1029:33 - from here
1029:34 - this is
1029:35 - a complete repository i believe unless i
1029:38 - missed something but we'll find out in a
1029:40 - second
1029:40 - now the only thing that we need to do is
1029:43 - add another branch now this is
1029:46 - a little bit complex we're getting into
1029:48 - version control branching but basically
1029:50 - the rule here within github is if you
1029:53 - make a branch called gh dash pages or
1029:56 - github pages
1029:58 - it's automatically going to look for you
1030:00 - know the index.html file on that
1030:04 - different branch and it's going to
1030:05 - deploy it automatically for you so it
1030:08 - does a lot of the heavy lifting and you
1030:09 - can for now kind of just think of it as
1030:11 - behind the scenes magic but we will
1030:14 - later learn how this all works
1030:16 - so we're going to create a branch called
1030:19 - github pages
1030:21 - and we're going to create it from the
1030:22 - main
1030:24 - branch so it's going to copy all the
1030:25 - files
1030:26 - over
1030:28 - okay so at this point we've got all of
1030:30 - our files in github pages and if i did
1030:33 - everything correctly which
1030:34 - usually does not happen in coding
1030:37 - it should show up
1030:38 - down on this github pages link
1030:41 - so let's see
1030:43 - if we click view deployment
1030:46 - awesome it looks like our card actually
1030:48 - did deploy correctly with the styles
1030:50 - because it's all styled and if we click
1030:52 - sign up hopefully
1030:54 - we'll get the alert
1030:55 - so awesome we have um our deploy link
1030:59 - which you can just copy and paste this
1031:01 - link up here and share it with anyone
1031:03 - and they can see the project that you
1031:05 - just worked on you could also submit
1031:07 - this to front-end mentor if you wanted
1031:09 - to to get feedback on your project
1031:12 - so
1031:13 - awesome we've got something deployed and
1031:15 - shareable
1031:18 - [Music]
1031:41 - as you saw in the intro our goal as web
1031:43 - developers is to avoid our users hurting
1031:46 - their eyes after they look at our web
1031:48 - application on a desktop device a tablet
1031:52 - a mobile device or whatever they're
1031:53 - viewing it on let's take a look at some
1031:55 - of the prerequisites
1031:57 - it's basically just html and css which
1032:00 - we covered
1032:01 - for the most part in the prior lessons
1032:03 - of this series now let's talk about this
1032:05 - for just a second on what we're going to
1032:07 - be covering here because this is a
1032:09 - massive topic that i cannot do
1032:12 - justice to if i'm not defining exactly
1032:15 - what we're going to be learning i'm
1032:16 - going to start on the right side of this
1032:17 - screen
1032:18 - and as i said i am not the best designer
1032:21 - in the world graphic design is generally
1032:24 - a painful experience for myself
1032:26 - i've put together a few decent designs
1032:29 - over the years but nothing that you know
1032:31 - i could call myself a designer in any
1032:34 - form or fashion but the good news is as
1032:36 - a full stack web developer you do not
1032:38 - need to be a great graphic designer for
1032:41 - that reason i'm not going to teach you
1032:43 - the design side of things and as we've
1032:45 - talked about
1032:47 - previously in the series we're going to
1032:48 - be going through and making some of
1032:51 - these challenges with html css and even
1032:54 - javascript so this is frontend mentor
1032:56 - and this is one of the designs that
1032:58 - we're going to create after we learn
1033:00 - about css grid and flexbox over the next
1033:02 - couple videos
1033:04 - and you can see that there's a
1033:06 - responsive design here we're going to
1033:07 - talk more about that in just a second
1033:09 - likewise we have this challenge right
1033:12 - here which is just another looks like
1033:14 - crowdfunding page so this will be a fun
1033:16 - one to do
1033:18 - and what you'll notice here is that as
1033:20 - we're going through our course here
1033:22 - we're leveraging existing designs we're
1033:25 - not trying to do this on our own and
1033:27 - that is the point of this video is to
1033:30 - teach you how to leverage those existing
1033:32 - designs and make sure that
1033:34 - everything is responsive and looks good
1033:36 - on all devices that you might see it on
1033:39 - so here are the lessons that we're going
1033:40 - to learn in this video
1033:42 - first off what is responsive design now
1033:44 - you probably have a general idea of that
1033:47 - but we'll dive a little deeper into it
1033:49 - next we'll be talking about mobile first
1033:51 - versus desktop first designs and
1033:53 - honestly it took me years to figure out
1033:55 - what this actually meant which
1033:58 - looking back is is kind of silly because
1034:00 - it's not that hard but
1034:02 - we're going to talk about that so mobile
1034:04 - first versus desktop first
1034:06 - next up we'll talk about css breakpoints
1034:09 - how they relate to media queries in how
1034:11 - we actually write media queries within
1034:14 - our web apps and then finally i'm going
1034:15 - to leave you with a responsive design
1034:17 - checklist this is not going to be super
1034:19 - detailed just a high level checklist
1034:21 - that you can go through to make sure
1034:22 - you're covering your bases
1034:24 - and a little project what we're going to
1034:26 - do is take our design from a previous
1034:29 - video so it was the previous video i'll
1034:31 - link to it up here where we designed
1034:33 - this pricing card
1034:35 - and what you'll see with this pricing
1034:37 - card is as we resize the screen
1034:40 - it just gets cut off so i'm going to
1034:41 - teach you in the challenge at the end of
1034:43 - the video
1034:44 - how we can take this situation
1034:47 - and turn it into this one where as we
1034:49 - resize it gets close gets close and then
1034:52 - boom it breaks and it looks a lot better
1034:54 - on a mobile device something that your
1034:57 - users will not be angry about let's go
1034:59 - ahead and dive into that question of
1035:01 - what is responsive web design
1035:03 - and the answer to that at least in my
1035:05 - head i like to keep it simple so that we
1035:07 - can remember it
1035:09 - if your users
1035:11 - hurt their eyes looking at your web page
1035:13 - on a desktop device or a mobile device
1035:16 - or a tablet or whatever they're viewing
1035:17 - it on then you have not designed it
1035:20 - responsibly so that is a good little way
1035:22 - to remember what responsive design is
1035:24 - all about now here's the thing it's 2021
1035:27 - and there's a lot of website builders
1035:29 - there's you know squarespace there's wix
1035:31 - wordpress
1035:33 - a bunch of other website builders that
1035:35 - kind of take care of this responsiveness
1035:38 - for you and for that reason most
1035:40 - websites nowadays are responsive and
1035:42 - they look pretty good so i had a hard
1035:44 - time
1035:45 - actually finding a bad example of
1035:47 - responsive web design for that reason i
1035:50 - created one that's not going to be
1035:52 - anything
1035:53 - crazy but let me close out a few tabs
1035:56 - here
1035:56 - and what i created was this you know
1035:59 - very basic example of bad web design but
1036:03 - a few things that you'll notice here is
1036:05 - as i make it larger and larger so this
1036:08 - is a pretty big screen i'm working on
1036:10 - you'll notice a few things so first off
1036:12 - as my eyes read across this text i have
1036:16 - to cover a lot of real estate on the
1036:19 - screen to actually get through one
1036:21 - single line of text
1036:23 - and that's kind of a no-no when it comes
1036:25 - to responsive web design you want that
1036:27 - text to be you know generally less than
1036:30 - we'll call it 700 pixels
1036:32 - um so it needs to be you know in the
1036:34 - middle of the screen and needs to be
1036:36 - narrow enough for your eyes to not have
1036:38 - to basically move great distances to
1036:41 - read it so that's one piece of this
1036:43 - another piece is you see this nav bar up
1036:45 - here we've got a couple links on the
1036:47 - left and a couple on the right and they
1036:49 - are very spaced out to the point where
1036:51 - it's it's almost too spaced out so those
1036:53 - are a couple issues going on with this
1036:56 - on a very wide screen now if we make
1036:59 - this more narrow
1037:01 - you're going to see something that is
1037:03 - just going to hurt your eyes which is
1037:04 - not the point of responsive design
1037:07 - so as we get smaller this could be a
1037:09 - mobile device of some sort you'll see
1037:10 - that we have two columns here and that's
1037:13 - not going to work on a mobile device you
1037:15 - want to have most content to be you know
1037:17 - full width on a mobile
1037:19 - screen and then also you have all of
1037:22 - these links up at the top and the
1037:24 - contact link is almost getting cut off
1037:26 - to the point where you can't even click
1037:28 - it or see it or anything so that's a big
1037:31 - problem if we were viewing this on a
1037:33 - mobile device now what i did was i went
1037:36 - ahead and improved it a little bit so
1037:37 - this is the improved
1037:39 - version of this design
1037:41 - where you'll see on a wide screen
1037:43 - the article text is only a certain width
1037:46 - i think i made it something like 650
1037:48 - pixels wide as a maximum and you can see
1037:51 - that we can skim this text without you
1037:53 - know moving our heads from left to right
1037:56 - and then also you'll see that the navbar
1037:58 - has has been brought in so these links
1038:01 - are not you know at the very edges of
1038:03 - our page
1038:04 - and then as we resize this you're going
1038:06 - to see that
1038:07 - everything changes so
1038:09 - right around here i believe somewhere
1038:13 - right there so you'll see at this break
1038:15 - point
1038:16 - this column goes under the main text
1038:19 - which is going to be a little bit easier
1038:20 - to see
1038:21 - and then also you'll see the
1038:23 - links at the top are going to turn into
1038:25 - a navigation menu that it doesn't do
1038:28 - anything because i didn't want to spend
1038:30 - the time to do that but this would be
1038:31 - like a drop down so that you could see
1038:33 - the links there and then i left the home
1038:36 - link so that you can still navigate that
1038:38 - way so even on a really small device you
1038:41 - can see that you know most of this looks
1038:43 - pretty good now
1038:44 - obviously this is not the most visually
1038:46 - pleasing design in the world
1038:49 - it's not meant to be it's meant to show
1038:51 - you
1038:52 - generally what responsive design is to
1038:54 - get a better grasp of what this is all
1038:56 - about let's take a look at really good
1038:58 - examples of responsive design and i'll
1039:00 - point out a few things that are good
1039:02 - about them the two portfolio sites we're
1039:04 - going to be looking at are
1039:06 - cassie evans this is just a really nice
1039:09 - looking site
1039:10 - and jason lanksdorf i think i said that
1039:13 - right i don't know either of these
1039:14 - people but i have found their portfolio
1039:17 - sites and they're just really visually
1039:19 - pleasing they've done a really good job
1039:20 - at responding to different screen sizes
1039:23 - so as we look at this let's go ahead and
1039:26 - break this this window out so that we
1039:28 - can kind of resize it but let's just
1039:30 - take a look at how these websites react
1039:32 - to different screen sizes
1039:34 - so here is
1039:36 - cassie's website and this is the home
1039:39 - page you'll see that as we resize this
1039:41 - to a more mobile device that big text is
1039:44 - going to get broken out to the main
1039:46 - portion we're going to get rid of that
1039:49 - image right there
1039:50 - so it's a little nicer to see on a
1039:52 - mobile device and then as you scroll
1039:54 - down you'll see everything is kind of
1039:56 - full width if we were to bring this back
1039:58 - to a desktop now it's got a nice little
1040:00 - layout so you kind of get the point this
1040:02 - is just a really nice
1040:04 - example of good responsive design right
1040:07 - here likewise jason's site is pretty
1040:10 - good in this respect so you'll see
1040:12 - there's this picture here on the left on
1040:14 - a desktop device and as we resize
1040:17 - it's going to get put on top the button
1040:19 - gets a little bigger so it's easier to
1040:21 - click on a mobile device
1040:23 - and as we go smaller and smaller you're
1040:24 - going to see that it's really easy to
1040:26 - navigate around if we click the blog
1040:29 - you'll see it's the same thing
1040:31 - on a mobile device it looks really nice
1040:33 - and everything is easy to click
1040:36 - on a desktop it's also really nice and
1040:39 - you can see that it's in the middle of
1040:40 - the screen this was what i was talking
1040:42 - about earlier you don't want your text
1040:44 - to be the full length of a desktop
1040:46 - device because some of them are going to
1040:48 - be huge screens and you'll have to move
1040:50 - your head to read the text in the first
1040:53 - place next up we have to talk about
1040:55 - mobile first versus desktop first web
1040:58 - designs when i was first learning i'll
1040:59 - be honest i could not figure out what
1041:01 - the difference between these were
1041:03 - everyone was talking about it and saying
1041:05 - oh you want to do mobile first mobile
1041:07 - first but i never understood what they
1041:09 - were talking about and it wasn't until i
1041:11 - realized that these concepts of mobile
1041:14 - or desktop first design
1041:16 - has nothing really to do with the design
1041:19 - phase of a project and it has everything
1041:21 - to do with when we start writing our css
1041:24 - so it's really important when you're you
1041:26 - know learning all these concepts to
1041:28 - really separate the design phase from
1041:30 - the coding phase of a project you don't
1041:33 - want to get into the
1041:34 - situation where you're trying to design
1041:36 - something and code it at the exact same
1041:39 - time because after all designing
1041:41 - something is very right brained and
1041:43 - coding something is very left brain so
1041:45 - you're going to get to the point where
1041:47 - you're just in complete confusion if
1041:48 - you're trying to do both at the same
1041:50 - time so my rule for myself at least is
1041:52 - before i write any code whatsoever i
1041:55 - need to have at least a basic visual
1041:58 - representation of what i'm trying to
1042:00 - create but if you're a very mediocre
1042:02 - designer like myself or if you just have
1042:04 - no design skills whatsoever what do you
1042:07 - do you know do we actually try to design
1042:10 - something or do we just hire someone to
1042:12 - do it that's a question that i was
1042:14 - asking when i first started in my
1042:16 - opinion you really have three options
1042:18 - when it comes to you know getting that
1042:20 - first visual representation of your web
1042:22 - page in front of you number one you can
1042:24 - hire a designer and have them design it
1042:27 - for you but in most cases especially if
1042:29 - you're watching this you don't have the
1042:31 - time to go figure out what designer
1042:33 - you want to hire and then furthermore
1042:35 - you know you don't need to pay anyone to
1042:37 - learn how to code so that's kind of out
1042:39 - of the equation that's for later down
1042:41 - the road when you're trying to actually
1042:43 - build a product and sell it and you need
1042:45 - to have a really professional design
1042:47 - build the second option is to browse the
1042:49 - internet for free designs and that's
1042:52 - what we've done with the front end
1042:53 - mentor challenges this is a great way to
1042:56 - kind of outsource that step for free and
1042:59 - what you can see is we've got these
1043:00 - designs that we're going to be creating
1043:02 - already built for us and we don't have
1043:04 - to think about them at all as we scroll
1043:07 - through this you'll see that there are
1043:08 - desktop versions here and then there's
1043:11 - also mobile versions so that you can see
1043:14 - how do we want this to look on both
1043:16 - sides of screen if you're not super
1043:18 - worried about what you know your end
1043:20 - product is going to look like but you
1043:22 - want to still make it mobile responsive
1043:24 - you can put together a wireframe and you
1043:26 - can use a tool such as figma
1043:29 - so this is a really popular place to put
1043:32 - together a wireframe or even a mock-up
1043:34 - which is a complete representation of
1043:37 - what you want to build but usually
1043:38 - pencil and paper is good enough for a
1043:40 - basic wireframe and your goal with a
1043:42 - wireframe is to just get a general idea
1043:45 - of where the elements that you have on
1043:47 - your page should be arranged based on
1043:49 - the size of the screen so i'll put
1043:51 - something up on the screen just a basic
1043:53 - wireframe that i created for we'll just
1043:55 - call it like a blog where you have a
1043:57 - sidebar and you have some regular
1043:59 - content and you can see a desktop
1044:01 - version and a mobile version and this is
1044:04 - entirely sufficient if you're just
1044:06 - trying to get a basic understanding of
1044:08 - what you're creating now like i said if
1044:10 - you're trying to build out a product or
1044:12 - something or if you're a great designer
1044:14 - you can use a tool like figma which is
1044:17 - going to allow you to put on put
1044:19 - together full-on mock-ups and the
1044:21 - difference between say a wireframe and a
1044:24 - mock-up is a wireframe doesn't really
1044:26 - care about you know the colors and the
1044:28 - fonts
1044:30 - all that detail it just cares about kind
1044:32 - of the layout of the elements on the
1044:34 - page now a mock-up is a full-on
1044:37 - representation of what you're trying to
1044:39 - build so a tool like figma or adobe xd
1044:43 - or sketch or a couple other different
1044:46 - good tools for that can allow you to
1044:48 - create full-on mock-ups like the one
1044:50 - that we're looking at here with
1044:51 - front-end mentor so this has not been
1044:53 - coded yet but it's a
1044:55 - perfect visual representation of what we
1044:57 - do want to code you can do that with
1044:59 - those tools so coming back to the
1045:01 - original question what's the difference
1045:03 - between mobile first and desktop first
1045:06 - design you see with all these mock-ups
1045:08 - we have a version of the desktop and
1045:10 - mobile on both so does it really matter
1045:12 - which one you create first well the
1045:15 - answer to that is you're asking the
1045:16 - wrong question now this took me a long
1045:18 - time to realize but mobile first and
1045:21 - desktop first has nothing to do with the
1045:23 - actual design phase it has everything to
1045:25 - do with when you start writing that css
1045:27 - and when you put together your break
1045:30 - points
1045:30 - so in order to understand these better
1045:32 - we have to dive into something called a
1045:35 - media query with css and along with that
1045:38 - concept comes
1045:40 - the concept of breakpoints to better
1045:42 - understand what i mean when i say
1045:44 - breakpoint let's look at a code pen that
1045:46 - i put together to explain it
1045:49 - now if i said i want a breakpoint at 600
1045:53 - pixels
1045:54 - what i mean by that is as the screen
1045:56 - gets smaller or bigger than a width of
1045:59 - 600 pixels i want to have different css
1046:03 - rules for both of those
1046:05 - so in other words if i'm on a mobile
1046:07 - device or a desktop device i want
1046:09 - different css let's do a quick review so
1046:12 - let me come to a page that i'm i'm not
1046:14 - really using here so let me close out a
1046:16 - few of these
1046:18 - this is just the web docs for css we're
1046:20 - going to right click and inspect and
1046:23 - then go to the console and if we were to
1046:25 - type window.enter with
1046:28 - it's going to give us a number and that
1046:30 - number 714
1046:32 - is the visible width of the screen so as
1046:36 - we resize this so we're kind of pulling
1046:38 - it to the left and right and resizing it
1046:41 - we can run this again and you're going
1046:43 - to see we get a different number so now
1046:45 - it's only 356 pixels wide so that's what
1046:48 - we talk about when we say the the
1046:51 - viewport width
1046:53 - so what i've done is i've written
1046:55 - a little bit of javascript here to make
1046:57 - this slightly bigger for us to see
1047:00 - and what i've done here in the bottom is
1047:02 - basically said when it resizes the
1047:05 - screen i want to change the content
1047:08 - of this up here so i've got a span an
1047:10 - html span that has a number in it and
1047:14 - that's going to be populated by the
1047:16 - window.enter with property every time
1047:19 - the screen resizes so in effect you're
1047:22 - going to see as i drag this this number
1047:24 - is going to
1047:26 - update live and also what i've done and
1047:29 - we're going to learn more about what
1047:30 - this is is i've written a break point at
1047:33 - a minimum width of 600 pixels and i've
1047:36 - included some different styles within
1047:38 - that break point so one of those is
1047:40 - going to be the h1 tag is going to have
1047:43 - a color of red
1047:45 - on screens that are bigger than 600
1047:47 - pixels or equal to
1047:49 - and then when it is not so a mobile
1047:52 - device we're going to have a color of
1047:54 - green so you'll see as i resize this we
1047:57 - get closer to 600 so we're about to hit
1048:00 - it and when i hit 600 it turns green so
1048:03 - we'll go back up turns red
1048:05 - back down it turns green so that is the
1048:08 - basics of a css breakpoint now of course
1048:11 - changing the color of some text based on
1048:13 - the screen is not really that useful and
1048:15 - you probably won't see it all that often
1048:17 - but what you will see is css that
1048:20 - affects the layout of your html changing
1048:24 - on different screen sizes
1048:26 - let me go ahead and uncomment um some of
1048:29 - the code here
1048:30 - that i've created
1048:32 - and what i've put in here is a couple of
1048:35 - pictures these are just placeholder
1048:36 - pictures
1048:38 - from the placeholder dot com
1048:40 - and
1048:41 - then we come down into
1048:44 - the css and you can see that when
1048:47 - we have a screen size that's a mobile
1048:49 - screen size so when we say mobile first
1048:52 - it's all these rules at the top
1048:54 - we have a width of 75 percent and as we
1048:57 - come down into this break point of 600
1049:00 - pixels you're going to see that the
1049:02 - image width is going to be auto which
1049:04 - basically means it's going to fill its
1049:05 - container so in effect our break point
1049:08 - at 600 pixels is going to say okay if
1049:11 - it's 600 or greater i want to have
1049:14 - these image images sitting next to each
1049:16 - other otherwise i want to put them a
1049:20 - hundred percent width of its container
1049:21 - and they'll stack on top of each other
1049:24 - so as we resize this we get closer and
1049:26 - closer to 600
1049:28 - it's going to change so watch what
1049:30 - happens when we get below 600
1049:33 - right there you'll see that the images
1049:35 - went to 100 percent width or not 100
1049:38 - percent width 75 percent width and
1049:41 - they're going to stack on top of each
1049:43 - other because they no longer fit next to
1049:45 - each other on the screen
1049:47 - so that's a good example of a basic css
1049:50 - breakpoint and how we can use it to
1049:52 - rearrange the layout of our page
1049:55 - so you have a basic idea of what a
1049:57 - breakpoint is in css
1049:59 - but the question becomes
1050:01 - what break points do i actually use and
1050:04 - there's not really a simple answer to
1050:05 - that let's take a look at this web page
1050:08 - right here this is screen sizes
1050:11 - dot es there that's pretty clever you're
1050:14 - going to see that there are a lot of
1050:16 - different devices that we could possibly
1050:19 - build our web page for
1050:21 - and there's no way that we can go
1050:23 - through all of these there's hundreds
1050:24 - and hundreds of different devices
1050:27 - there's no way that we can optimize for
1050:29 - all of them so we have to do our best at
1050:32 - guessing you know which screens do we
1050:35 - want to set our breakpoints on and
1050:37 - design them a little bit differently in
1050:39 - general mobile devices are going to be
1050:41 - somewhere in the range of 320
1050:44 - to call it 480 pixels wide you'll have
1050:48 - tablets between 600 and 800 pixels you
1050:51 - have you know regular sized laptops
1050:54 - around the you know 1024 to 1440 pixel
1050:58 - range and then bigger desktop devices
1051:01 - are going to have a width of call it
1051:04 - 2500 pixels
1051:06 - so those are just generalizations but as
1051:09 - you can see on the screen there's all
1051:11 - sorts of different numbers
1051:13 - and i don't want to get into the
1051:14 - discussion of
1051:16 - things like pixel density and what is
1051:18 - the difference between the actual width
1051:21 - of a device and the adapted pixel
1051:25 - interpretation for us as web developers
1051:27 - it's a pretty complicated topic if you
1051:30 - can just remember those guidelines that
1051:32 - i just mentioned you should be good so
1051:34 - as you're deciding what breakpoints you
1051:36 - need to use for your
1051:38 - web page or your web app you have to ask
1051:40 - three questions in my opinion so the
1051:42 - first one is going to be
1051:44 - will the web page even be used on a
1051:46 - mobile device and is that your intention
1051:49 - there are plenty of apps that are not
1051:51 - meant to be used on a mobile device so
1051:54 - think about budgeting apps or
1051:56 - you know big spreadsheets things that
1051:58 - just don't look very good on a mobile
1052:00 - device
1052:02 - you probably don't want to waste your
1052:04 - time energy and maybe even money to
1052:06 - create a pleasing mobile experience
1052:10 - you're just going to say to your users
1052:12 - hey this is not meant for a mobile
1052:14 - device you should be using our
1052:15 - application on a desktop another
1052:17 - consideration would be are you offering
1052:20 - a mobile application if you are you know
1052:23 - a good example might be something like
1052:25 - youtube so
1052:27 - the youtube application on a mobile
1052:29 - device is really nice to scroll through
1052:31 - and use but their
1052:33 - web version so if you were to open up
1052:36 - the browser and then type in youtube.com
1052:39 - rather than opening up the mobile app
1052:41 - it'll still be a semi nice experience
1052:44 - but it definitely won't be as great of
1052:46 - an experience as opening the mobile app
1052:49 - so if you're creating something and you
1052:51 - plan on making a mobile application you
1052:53 - may not have to put quite as much time
1052:56 - and thought into how it looks on
1052:58 - different screens
1052:59 - the second question you might ask is is
1053:01 - it actually important to have a
1053:03 - different design for each screen
1053:05 - if you've just got a basic website that
1053:07 - just has text on it and you don't have a
1053:09 - lot of images or anything like that
1053:12 - then it may not be that important to
1053:14 - have a bunch of break points you may be
1053:16 - able to get away with one design for all
1053:19 - devices and it'll work just fine and the
1053:21 - final question you have to ask is are
1053:23 - there standards for this you know why
1053:25 - can't i just use the industry standard
1053:27 - for what everyone is using for break
1053:29 - points
1053:30 - and unfortunately given the fact there
1053:32 - are so many different screen sizes and
1053:34 - screen sizes are constantly changing as
1053:37 - new physical devices are released to the
1053:39 - world there's not really an industry
1053:42 - standard that we can go off of well
1053:44 - there are no industry standards per se
1053:47 - there are these things called css
1053:49 - frameworks and as i talked about in the
1053:51 - prior videos we're not going to be
1053:52 - covering
1053:53 - in depth any one css framework given the
1053:56 - fact that i don't want to lock you into
1053:58 - any one thing i want to teach you the
1054:00 - fundamentals of css rather than trying
1054:03 - to teach you a framework but
1054:05 - having a framework
1054:07 - to piggyback off of when it comes to
1054:09 - break points is a very smart decision at
1054:11 - least in my opinion
1054:13 - these guys that create the frameworks
1054:14 - are thinking about you know break points
1054:17 - all the time they have to incorporate
1054:19 - those break points into their own
1054:21 - frameworks and therefore if it's good
1054:23 - enough for them then it's good enough
1054:25 - for me and hopefully everyone watching
1054:28 - this given the fact that break points
1054:30 - are not an exact science and these guys
1054:33 - think about it a lot more than you know
1054:35 - someone like myself would one of the
1054:37 - most popular frameworks or at least
1054:39 - long-standing css frameworks is
1054:42 - bootstrap
1054:43 - now bootstrap you'll find it in several
1054:45 - tutorials you can kind of read up on it
1054:47 - it's basically you know a css framework
1054:50 - is all about making your job writing css
1054:52 - easier so a lot of times these css
1054:54 - frameworks are going to create grid
1054:56 - systems
1054:58 - in layout systems so that you can just
1055:00 - have predefined classes that you can
1055:02 - pass in
1055:03 - to make your sites mobile responsive and
1055:06 - stuff like that
1055:07 - so with that they have their standard
1055:09 - set of break points and if you scroll
1055:11 - down to
1055:12 - um
1055:13 - on bootstrap's documentation it has a
1055:16 - list of these break points and you can
1055:17 - see
1055:18 - that there are about
1055:20 - five of them so
1055:22 - by default bootstrap is what we call
1055:26 - mobile first and you're going to start
1055:27 - to catch on to what this means
1055:29 - and when i say mobile first it means
1055:32 - that we are first designing our css for
1055:35 - a mobile device
1055:36 - and then what we're saying is anything
1055:38 - greater than
1055:39 - 576 pixels
1055:42 - will have these styles and then anything
1055:45 - greater than 768 will have these
1055:48 - different styles so basically you're
1055:49 - starting with the mobile device you're
1055:51 - writing your css and then you're writing
1055:53 - little blocks of code with these break
1055:55 - points to define oh what happens when we
1055:58 - have a bigger device so that's kind of
1055:59 - what we mean when we say mobile first
1056:02 - so here are the break points got 576 768
1056:05 - 992 1200 and 1400 for small medium large
1056:10 - extra large and xxl
1056:13 - so those are the standards for bootstrap
1056:15 - and they're going to be our standards
1056:17 - but the question is do we have to use
1056:19 - all of them and the answer to that is no
1056:22 - we don't need to use every single
1056:24 - breakpoint here we just need to use
1056:26 - enough breakpoints to make our designs
1056:29 - look suitable on all devices and based
1056:32 - on what you're creating that may be one
1056:35 - or two break points or it may be all of
1056:37 - these break points that you have right
1056:38 - here if we're looking at an example like
1056:40 - this pricing card that we created i'm
1056:43 - not sure really what happened here
1056:46 - but anyways we have this pricing card
1056:48 - and for this we really only need one
1056:50 - break point now if you're incorporating
1056:53 - this into a application you might have a
1056:55 - couple more but really we just have two
1056:58 - states that we have to create we've got
1056:59 - this full on state which can be on
1057:02 - basically tablets and above and then we
1057:05 - have this mobile state where
1057:06 - everything's stacked on top of each
1057:08 - other so in this case we only had to
1057:10 - come down here and write
1057:13 - one single break point so we have the
1057:15 - min width being 576
1057:18 - which i got from right here so anything
1057:21 - greater than a small device or a mobile
1057:23 - device is going to have
1057:25 - x styles all right so we've been in
1057:27 - theory land here this whole video and
1057:30 - we've been talking about the the design
1057:32 - aspects and break points and how do we
1057:34 - choose them but we haven't actually
1057:37 - written any code yet and i want to do
1057:39 - that now i want to show you exactly how
1057:41 - to write a css breakpoint
1057:43 - and how that relates to this thing
1057:45 - called media queries
1057:47 - so i'm going to come to my code pen and
1057:49 - make a new one so that we can just have
1057:51 - a playground to work in
1057:53 - and then
1057:54 - down here in the css this is where we're
1057:56 - going to write our breakpoints but we
1057:57 - first need to have some html so
1058:01 - we'll say responsive web design
1058:05 - example
1058:06 - and from here let's just put in an h1
1058:09 - welcome to the tutorial
1058:13 - all right so we have some html to work
1058:15 - with and now down in the css section we
1058:18 - can write a breakpoint and the basic
1058:20 - syntax of the css breakpoint is this
1058:24 - so what i copied in here is a what we
1058:27 - actually call a media query
1058:29 - and the breakpoint is the number that we
1058:32 - pass in as a minimum width to that media
1058:35 - query
1058:36 - now we have a little bit more to learn
1058:38 - about the syntax because we have to ask
1058:40 - ourselves what does this at media
1058:43 - actually mean
1058:44 - and if we go over to the mdn
1058:47 - documentation
1058:48 - let me close out of here
1058:50 - this is what we've been using so far in
1058:52 - this series and you can come down to
1058:54 - technology css
1058:56 - and then if you come to the css
1058:58 - reference so in the css reference the
1059:00 - first paragraph has all sorts of links
1059:02 - that we can go to
1059:04 - and it says use this reference to browse
1059:07 - alphabetical index of all the properties
1059:09 - pseudo classes pseudo elements data
1059:12 - types
1059:13 - functional notations and at rules
1059:16 - and this last one the at rules is what
1059:18 - we want to click on
1059:20 - so what these are they're css statements
1059:22 - that instruct css how to behave
1059:25 - so that would be fitting into our
1059:28 - categorization of media queries
1059:31 - perfectly so if we scroll down
1059:33 - you'll see down here
1059:35 - in the index these are all the different
1059:38 - at rules or whatever tells the css how
1059:41 - to behave and if we click on media
1059:45 - that's going to take us to the media
1059:46 - query page
1059:48 - so this is an at rule that can be used
1059:50 - to apply part of a style sheet based on
1059:52 - the result of one or more media queries
1059:55 - all right so then we come down to the
1059:57 - syntax and you're going to see some
1059:59 - pretty complicated stuff being written
1060:02 - but this is the basics of a media query
1060:06 - and if we come back to our
1060:08 - example here you'll see the basic syntax
1060:11 - just has at media and then in
1060:13 - parentheses we write whatever rule we
1060:16 - have and then down here this is where
1060:18 - the css is going to go so if we wanted
1060:21 - to specify some css for
1060:24 - our h1 we're going to put it there so
1060:26 - any time the screen is greater than 756
1060:29 - pixels
1060:30 - the text will be red so if we shrink
1060:32 - this it goes back to black
1060:34 - and then we go to red so that's the very
1060:37 - basic syntax but in this rule we're
1060:39 - actually selecting every type of media
1060:42 - device
1060:43 - so if we go back to the documentation
1060:45 - and let me drag this over so we're not
1060:47 - getting so confused with our tabs
1060:50 - but if we come to the media rule
1060:52 - and scroll down to the description
1060:54 - you'll see that there's this concept of
1060:56 - media types
1060:57 - so we have all print screen and speech
1061:01 - and you can actually define within your
1061:03 - media query
1061:05 - which device types you're actually
1061:07 - trying to target
1061:08 - now in our case when we wrote this one
1061:10 - we're just saying we want all devices
1061:13 - now you can also specify in that rule
1061:16 - that you only want to target
1061:18 - certain devices now we're going to be
1061:20 - working with screens
1061:22 - mostly that's like a mobile
1061:24 - like an iphone or android a tablet or a
1061:27 - desktop screen so that's kind of our
1061:30 - forte as web developers but you also
1061:33 - have print and speech which are some
1061:35 - more
1061:36 - specific use cases that you can target
1061:39 - so let's see how we could change our
1061:41 - rule to target those devices
1061:43 - so if we said media all
1061:46 - and
1061:47 - this is going to say that we want to
1061:48 - target all
1061:50 - media types so this is the equivalent
1061:53 - of this those are the same thing but if
1061:56 - we come in here and we say media print
1061:59 - and this is only going to apply to
1062:03 - print as basically like a print preview
1062:05 - view on a screen so as you can see
1062:08 - our rule down here of the color red no
1062:10 - longer applies to this text because
1062:12 - we're only targeting print media devices
1062:15 - likewise we could put in
1062:18 - speech
1062:18 - and that's also not going to work
1062:20 - because this is not a speech media type
1062:23 - but if we put in the word screen it's
1062:26 - going to now apply because this is a
1062:28 - screen
1062:30 - and this rule should apply to it now
1062:32 - with these media rules we can add some
1062:35 - logic in here i'm not going to get too
1062:36 - deep into this but i want to at least
1062:39 - show you what it is
1062:41 - so let's say that we wanted to target
1062:43 - only screens
1062:45 - at a width between 400 and 600 pixels
1062:49 - now we could do that in one media rule
1062:52 - and the way that we would do that is by
1062:54 - writing some logical operators within
1062:56 - css so if you remember with javascript
1062:59 - we came down here into the javascript
1063:01 - section and we just typed in some basic
1063:04 - code
1063:05 - we can use conditionals so we can say we
1063:07 - can create an if statement that says if
1063:11 - my var
1063:13 - is greater than 10
1063:15 - and
1063:16 - my var is less than 100 then we'll do
1063:20 - something
1063:21 - within this code so you can see that
1063:23 - this little and symbol is the logical
1063:26 - operator that we're using now css
1063:28 - actually has logical operators just like
1063:30 - this so we don't need this javascript
1063:33 - code
1063:34 - anymore but we can rearrange this rule
1063:37 - to have those logical operators and
1063:39 - target multiple conditions so let's go
1063:41 - ahead and do that let me get rid of this
1063:43 - comment
1063:44 - the first thing that we're going to do
1063:46 - when we're having these logical
1063:47 - operators we have to put this operator
1063:49 - called only so
1063:52 - only when it's a screen
1063:54 - is when we're going to use this rule and
1063:56 - then we can drop down onto some new
1063:58 - lines just to separate these things out
1064:01 - we'll put our brackets down here
1064:03 - and now we can add another one here so
1064:06 - we can say and
1064:09 - max width
1064:11 - is
1064:12 - something like 800 pixels so let's just
1064:14 - change this we'll go what did i say we
1064:16 - wanted we wanted something between 400
1064:18 - pixels
1064:20 - and 600 pixels
1064:22 - and now what we're saying with this rule
1064:24 - is
1064:25 - so at media so we want an at rule for
1064:28 - css
1064:29 - we only want to target screen media
1064:31 - types which is what we're looking at
1064:33 - here
1064:34 - and we want to target something with a
1064:36 - minimum width of 400 pixels
1064:38 - and we want to target one some something
1064:41 - with a max width of 600 pixels so
1064:43 - basically what we're saying here is only
1064:46 - screens between 400 and 600 pixels
1064:48 - should this h1 css rule apply
1064:52 - so if we make the screen really big
1064:54 - that's not within those bounds but as we
1064:57 - go down and you can down here right at
1065:00 - the bottom you'll see a little pixel
1065:01 - indicator as i scroll but as we get
1065:04 - between 400 and 600 we should see it
1065:06 - turn red and then we go back to black as
1065:08 - it gets smaller than 400
1065:10 - so you can see how we can use css
1065:12 - logical operators with our media queries
1065:15 - to target
1065:16 - different types of conditions now you
1065:18 - can also bring in other css at rules so
1065:22 - if we go back to our
1065:24 - documentation
1065:25 - we'll click back
1065:27 - this is our our at rules page
1065:30 - and you can see we have media queries
1065:32 - but we also have things like import and
1065:35 - supports so if we click on supports this
1065:37 - basically is an app rule that lets you
1065:40 - check to see if a specific css property
1065:43 - is supported in the browser that the
1065:45 - user is using so a good example of this
1065:48 - is flexbox and css grid which we'll
1065:50 - learn about in the next few videos
1065:53 - those are not yet
1065:54 - supported by all browsers now most of
1065:57 - them do but things like internet
1065:59 - explorer i don't think do and maybe a
1066:01 - couple others with css grid
1066:03 - so you can see in this example we can
1066:06 - use this to basically check whether
1066:09 - the display supports display grid
1066:12 - property and then if so we will use that
1066:15 - property within our css so as you can
1066:18 - see media queries and css at rules can
1066:21 - give us a whole lot of power when
1066:23 - designing our pages for different
1066:25 - devices
1066:27 - media types and different browsers so
1066:30 - we're not going to get too far into it
1066:32 - because that's not the point of this
1066:33 - video but i did want to show you the
1066:35 - basics of it just so that you were aware
1066:38 - now at this point i want to take you
1066:40 - through we'll call it the 80 20 guide of
1066:43 - media queries and css breakpoints i'm
1066:46 - going to show you how to take these
1066:48 - standard breakpoints that we have
1066:50 - from the bootstrap framework and
1066:52 - incorporate it into an actual css
1066:55 - document to do that let me put some
1066:57 - images on our page
1066:59 - so we'll say welcome to the tutorial and
1067:01 - then we'll have a bunch of just
1067:04 - placeholder images with on the screen
1067:07 - so what we want to do with these images
1067:09 - is make them responsive based on the
1067:12 - screen size so something that i can
1067:14 - think of is maybe on mobile devices we
1067:16 - want it to be you know 100 percent with
1067:19 - just like we're seeing here where
1067:20 - they're vertically stacked then maybe on
1067:22 - tablet devices we can have two images
1067:25 - per row and then on a desktop device
1067:28 - that is much larger we could have
1067:30 - uh we'll call it four images
1067:32 - in one row across the page as i just
1067:35 - described we want to have three
1067:37 - different states of our web page we want
1067:39 - a mobile display
1067:41 - a tablet display so two images and a
1067:43 - desktop display four images so we have
1067:46 - three states and that requires two css
1067:49 - break points to achieve
1067:51 - now you'll remember bootstrap has you
1067:54 - know five of them
1067:55 - we only need two of these because we're
1067:57 - not making a super complex design and
1068:00 - that is a good demonstration of how you
1068:03 - have to look at you know what your
1068:04 - purpose is and then decide how many
1068:06 - break points you don't want to just
1068:08 - throw in a bunch of break points just to
1068:10 - have them there the first thing we need
1068:12 - to do is put in a basic css reset now we
1068:15 - talked about this in prior videos of
1068:17 - this series so be sure to watch those if
1068:20 - you haven't
1068:21 - but it's just changing the box sizing so
1068:23 - that we can
1068:24 - fit these images reliably
1068:27 - next to each other without any unwanted
1068:29 - behavior
1068:31 - the next thing we'll do is we'll add in
1068:33 - our break point templates
1068:35 - if we go to bootstrap and look at what
1068:37 - we need here i think what we're going to
1068:39 - do is grab this one right here so
1068:42 - i just want to mention here this top one
1068:45 - this is not actually a break point that
1068:47 - we need this is kind of just the default
1068:49 - so as we talked about this is a mobile
1068:51 - first
1068:52 - approach where we want to design the
1068:54 - regular css or the default css to apply
1068:57 - to a mobile screen and then we will
1069:00 - conditionally style any screens that are
1069:02 - larger than a mobile device with these
1069:04 - breakpoints
1069:06 - so we're going to grab the greater than
1069:07 - or equal to 576 so that's basically
1069:10 - saying what happens on anything greater
1069:13 - than a mobile device
1069:14 - and then we also will probably grab the
1069:17 - 992 which is basically saying everything
1069:20 - greater than say a tablet so mobile
1069:24 - tablet and desktop is all we need to
1069:27 - cover so we'll say 576 and 992.
1069:30 - let me just jot this down here so 576
1069:34 - and 992 so i don't forget
1069:37 - and now we can write our media queries
1069:39 - so like i said you can just use this
1069:42 - basic syntax you don't have to put any
1069:44 - of those logical operators in there and
1069:47 - we're going to say min width is 5
1069:50 - 76 pixels and then put some brackets to
1069:53 - break it down
1069:54 - we will copy this
1069:56 - put it right below and change this
1069:58 - number to 992.
1070:01 - we can get rid of the comments here
1070:03 - and we should be set up to have our css
1070:06 - breakpoints now now right now the
1070:08 - pictures on the screen no matter what
1070:10 - size screen we have
1070:11 - are not going to be responsive now
1070:15 - you'll see that they come next to each
1070:16 - other on this larger screen and that is
1070:19 - just because naturally
1070:21 - an image is i believe an inline block
1070:23 - element which means it doesn't have to
1070:25 - have its own line
1070:27 - and these are i believe 500
1070:29 - pixel uh images
1070:32 - yeah we put in 500 pixels for these
1070:34 - images using the placehold placeholder
1070:37 - service and therefore if the screen is
1070:40 - bigger than say a thousand pixels so 500
1070:43 - plus 500 those inline blocks are going
1070:45 - to wrap up onto the line so this is
1070:48 - nothing of css that we've written it's
1070:50 - just the natural flow of html so in our
1070:53 - mobile first approach let's go down to a
1070:56 - mobile device which is going to be
1070:59 - right here
1071:00 - and what we want to do within
1071:03 - this css we'll go right after the css
1071:06 - reset
1071:06 - and what we will do is we'll target all
1071:09 - images on the page
1071:10 - and we'll give them a width of 100
1071:14 - and what that's going to do is it's
1071:15 - going to resize all of the images to be
1071:17 - 100 of the viewport and you'll notice
1071:20 - there's a little bit of padding that's
1071:22 - just natural
1071:23 - a default padding and margin of this
1071:26 - browser in the codepen environment but
1071:28 - we have these as a hundred percent width
1071:31 - now as we resize this you're going to
1071:33 - see that it maintains that 100 width all
1071:36 - the way up to these larger screens and
1071:38 - of course this is a way too large of an
1071:41 - image to have on the screen so we want
1071:43 - to wrap these on you know next to each
1071:45 - other on the lines so what we'll first
1071:47 - do is we'll come into this media query
1071:50 - which is basically going to say anything
1071:52 - greater than a mobile device is what we
1071:54 - want here
1071:55 - so we'll target images and what this is
1071:58 - going to say is if the screen is greater
1072:00 - than 576 pixels we want to override the
1072:04 - original image style
1072:07 - and put it to something else so in this
1072:09 - case we'll give it a width of
1072:12 - we wanted 2
1072:14 - per screen so we'll say 50 percent
1072:17 - and now we should see these wrapping
1072:20 - um
1072:21 - no they're not wrapping let's change it
1072:23 - to 49 percent okay there we go now the
1072:27 - reason we have to do 49 this is not
1072:29 - going to be a problem once we learn
1072:30 - flexbox and css grid but it's just
1072:34 - uh white space and a couple other things
1072:35 - that are causing this so
1072:37 - um don't mind the fact that it's 49 it
1072:40 - should technically be 50. so as as you
1072:43 - see here on a mobile device we have 100
1072:46 - width and they stack on top
1072:49 - then as we
1072:50 - resize to be greater than 576
1072:54 - they will break onto two or two per row
1072:58 - and then now we want to make it four per
1073:01 - once we get above
1073:03 - 992 pixels so right now it's going to
1073:06 - stay as 2 per row no matter how big we
1073:09 - get
1073:10 - but if we come down here and add an
1073:12 - image style and give it a width of
1073:15 - 24 percent
1073:16 - you'll see that as we get larger it's
1073:19 - going to put 4 per row so now we see we
1073:22 - have one per row here
1073:24 - two per on a tablet and four per row on
1073:28 - a desktop device so we've successfully
1073:30 - written a mobile first approach to css
1073:33 - and we've designed for three different
1073:35 - screen sizes now i want to walk through
1073:38 - how the css interpreter is actually
1073:40 - working here because
1073:43 - sure we can write these break points but
1073:45 - we really have to understand what's
1073:46 - going on otherwise we're going to make
1073:48 - a silly mistake that i'm about to show
1073:50 - you
1073:51 - so looking at the css we have to ask
1073:53 - ourselves how do we actually read this
1073:55 - or how would the the browser be
1073:57 - interpreting this
1073:59 - so by default we've got all these images
1074:02 - here and when css is red we'll we'll
1074:05 - first read the css reset we'll make the
1074:07 - border box um different and then as we
1074:10 - come down we'll say okay i have an image
1074:14 - css selector giving it a width of 100
1074:18 - so the css interpreter is going to say
1074:20 - okay great the width of all images is
1074:22 - now 100
1074:24 - now as we come
1074:25 - um further down
1074:27 - you'll see the media queries and it'll
1074:30 - the browser will basically say
1074:32 - so is my total width of the viewport
1074:35 - greater than 576 pixels
1074:38 - let's go ahead and make that true so
1074:41 - now we're at the biggest size and so as
1074:44 - the browser's reading this it says okay
1074:46 - yeah it is bigger than 576. so let's go
1074:49 - ahead and apply this rule so it says all
1074:51 - right now images are not 100 we're going
1074:54 - to replace that with 49
1074:56 - and then it reads even further down and
1074:59 - it sees this next media query and it
1075:01 - asked it it basically asks itself okay
1075:04 - is it greater than 992 pixels the
1075:07 - viewport width of the browser the answer
1075:10 - to that in this case is yes so it's
1075:12 - going to say okay now my images need to
1075:15 - be 24 width and we're going to replace
1075:18 - these previous two rules up here so what
1075:20 - we're doing is we're walking through
1075:22 - that cascading concept of css where it's
1075:25 - read from top to bottom
1075:26 - and the last rule so long as that last
1075:29 - rule has the same specificity
1075:32 - as rules above it is going to be the one
1075:34 - that applies
1075:35 - so where this is important is the order
1075:38 - of the breakpoints that you're adding or
1075:40 - the media queries so if i were to take
1075:43 - this last media query
1075:45 - and place it above
1075:47 - this one things are going to change for
1075:49 - us and that is because of how the css is
1075:52 - read from top to bottom
1075:54 - so in this case what you'll notice is on
1075:56 - a mobile device we look good it's
1075:58 - working fine
1075:59 - but as we go up we're only going to get
1076:03 - two images per row no matter how far or
1076:06 - how wide the screen gets and you might
1076:08 - look at your css and say well why is
1076:10 - that we've defined that anything greater
1076:12 - than 992 should get a width of 24
1076:16 - percent but the way that css is read is
1076:19 - top to bottom and what it's doing here
1076:21 - is it's saying okay first we have this
1076:23 - rule here that sets it to 100
1076:25 - then we're going to ask ourselves is the
1076:27 - screen bigger than 992
1076:30 - the answer is yes so now we're going to
1076:33 - set it to 24
1076:35 - then it reads down once again and it
1076:37 - says is it greater than 576 and the
1076:40 - answer is still yes because this is
1076:42 - inclusive of all screen sizes
1076:44 - so now it's going to replace that image
1076:46 - width with 49
1076:48 - and override the 24 right here so the
1076:52 - lesson here is that your media queries
1076:55 - the order of them is very important and
1076:58 - you're going to need to do two things
1077:00 - so first you need to add your media
1077:02 - queries at the bottom of your css style
1077:05 - sheet and the reason is you've got all
1077:07 - these rules for the default style which
1077:09 - would be the mobile screens and you need
1077:12 - these at the end so that they can
1077:14 - override those styles
1077:16 - and then second if you're going with the
1077:18 - mobile first approach which is basically
1077:20 - using min widths rather than max width
1077:24 - then you need the greatest width to be
1077:27 - at the bottom so you need to go from you
1077:30 - know smallest to greatest otherwise what
1077:32 - we just saw is going to happen and
1077:34 - nothing's going to behave as you'd
1077:36 - expect so at this point i want to
1077:38 - revisit this topic of mobile first and
1077:41 - desktop first design
1077:43 - i've alluded to it over the last couple
1077:46 - of minutes what this actually is but i
1077:48 - think we're ready to fully understand
1077:50 - the difference between the two like i
1077:52 - said earlier it has nothing to do with
1077:54 - the design phase of your project when
1077:56 - you're just getting the graphic design
1077:58 - laid out in your wireframes or your
1078:00 - mock-ups doesn't really matter because
1078:02 - you're going to design multiple screen
1078:04 - size designs no matter what but when we
1078:06 - come to write the css
1078:08 - the difference is going to be whether
1078:10 - we're using media queries with a min
1078:12 - width or we're putting in media queries
1078:15 - with a max width because that's going to
1078:18 - change how we think about our css
1078:20 - entirely in this case we used min with
1078:23 - which is basically the equivalent to
1078:25 - mobile first design because all of the
1078:28 - default styles up here are going to
1078:30 - automatically apply to
1078:33 - screens and since we're using min widths
1078:36 - that's going to apply to mobile devices
1078:38 - now as we go up in size that's when
1078:41 - we're going to start replacing css
1078:44 - properties
1078:45 - according to those bigger screen sizes
1078:47 - so what you see here is mobile first and
1078:49 - now i'm going to reverse it and we're
1078:51 - going to actually do a desktop first
1078:54 - approach which is not what i recommend
1078:56 - but i want to show you the compare and
1078:58 - contrast
1078:59 - so if we wanted to go desktop first
1079:02 - then we would just have to change these
1079:04 - two
1079:05 - to max width all right so let's change
1079:07 - both min widths to max width and you'll
1079:10 - see that everything is working a little
1079:12 - bit differently it's basically the exact
1079:14 - opposite so as we get bigger we go to
1079:17 - that 100 width and as we go smaller we
1079:20 - go into the grid which is obviously not
1079:22 - what we want and the reason is because
1079:24 - we thought of it from a mobile first
1079:26 - perspective when we built it
1079:28 - so basically when you're doing desktop
1079:31 - first all of these default rules are
1079:33 - going to apply to your desktop devices
1079:36 - so anything that is greater than this
1079:39 - the greatest break point that you've
1079:41 - assigned is going to get all of these
1079:43 - default styles
1079:45 - so we're basically starting from the
1079:47 - widest and then as we go down we're
1079:49 - replacing rules so if we wanted to work
1079:52 - this the same as we had before we're
1079:54 - just going to have to change the widths
1079:55 - so all of these rules are for you know
1079:58 - desktop devices so we want to replace
1080:00 - this hundred percent with 24
1080:03 - that should get us back to the point
1080:05 - where we have the four
1080:08 - four pictures per row
1080:10 - now as we come down we're going to
1080:12 - change
1080:13 - the max width of 576 so this is
1080:16 - basically referring to
1080:17 - all mobile devices we want to make this
1080:21 - 100 so that on a mobile device we see
1080:25 - them stacked on top of each other and
1080:27 - it's not working
1080:29 - let me go ahead and refresh the page
1080:31 - to make sure we got this
1080:33 - oh actually this is a good lesson so
1080:36 - when we go from desk or from mobile
1080:39 - first to desktop first the order of the
1080:41 - media queries is going to change so when
1080:44 - we had min widths we said we want the
1080:46 - smallest to largest going from top to
1080:49 - bottom but in this case it's going down
1080:52 - this style sheet and it's saying okay
1080:54 - is the screen less than 576 so let's
1080:56 - make it a mobile
1080:58 - it's saying is it less than 576 the
1081:00 - answer is yes so let's apply an image
1081:02 - width of 100 percent
1081:04 - then it goes down and it reads is the
1081:07 - max width or is it less than 992 in this
1081:10 - case that is also true so it's replacing
1081:13 - the width to 24
1081:15 - so that's why we're still seeing the
1081:17 - grid there so if we wanted to make that
1081:20 - work we need to put for a desktop first
1081:23 - approach we need the largest media
1081:25 - queries first going to the smallest and
1081:28 - now we have our intended behavior of 100
1081:31 - with
1081:32 - on mobile and then we should get
1081:35 - let's go ahead and replace
1081:37 - this last one here
1081:39 - to be 49
1081:42 - and now we should have a correct design
1081:44 - so 100 on mobile
1081:46 - we'll have two images on a tablet
1081:49 - and then we'll have four images on the
1081:51 - desktop
1081:52 - so as you can see
1081:54 - mobile first versus desktop first is all
1081:56 - about how we're writing our media
1081:58 - queries and whether we're using mid
1081:59 - widths or max widths in general you're
1082:02 - going to find that the consensus among
1082:04 - the development community is to use a
1082:07 - mobile first approach and the reason
1082:09 - behind it is as you're getting into more
1082:11 - complex designs
1082:13 - it is just easier to use the natural
1082:16 - flow of html on a mobile device
1082:19 - so no media queries required and then
1082:22 - tweak it as you get larger because in
1082:25 - many cases a desktop first design is
1082:28 - probably not going to look very good on
1082:30 - a mobile device but the
1082:33 - inverse of that so a mobile first design
1082:36 - it will probably look okay on a desktop
1082:38 - device without any modifications so in
1082:41 - summary you're basically going to have
1082:42 - to write less code
1082:44 - in most cases all right so we've covered
1082:46 - the basics now the next question is what
1082:49 - do i actually put within these media
1082:52 - queries
1082:53 - and the answer to that is i can't
1082:55 - possibly teach it within one lesson
1082:57 - you're going to learn you know how to
1082:59 - resize things based on different devices
1083:02 - through experience and time i'm about to
1083:04 - show you a basic example of just that
1083:07 - but first i want to leave you with a
1083:09 - responsive design checklist so let's
1083:11 - jump over here
1083:13 - and go to the checklist so you can just
1083:16 - you know take a screenshot of this write
1083:17 - it down
1083:19 - whatever you want to do but this is what
1083:20 - i go through when i'm looking at my
1083:22 - design and my web page and testing it on
1083:25 - different devices i want to make sure
1083:27 - that i check all of these boxes and if
1083:29 - you can check all these boxes you've
1083:31 - covered 95 percent of what you need to
1083:33 - and the rest is going to be you know
1083:35 - just subtle little changes and highly
1083:37 - dependent on how
1083:39 - many requirements you have for your
1083:41 - project first up we want fluid layouts
1083:43 - this is basically saying you know what
1083:45 - we just looked at where we have you know
1083:48 - single images on a mobile device we have
1083:51 - a row of two images on a tablet in a row
1083:53 - of four images on a desktop so that's
1083:56 - what we mean when we say fluid layouts
1083:58 - we want to make the content you know
1084:01 - just look good in general
1084:03 - now images we want to make sure that we
1084:05 - have the right aspect ratios and we're
1084:07 - not stretching images to be you know too
1084:10 - wide too tall too big on certain devices
1084:14 - we also want to do the same thing with
1084:15 - text we don't want to have huge text on
1084:18 - a mobile device where you only have you
1084:19 - know four or five words per line that's
1084:22 - a really poor user experience
1084:24 - the next thing up is overflow so that's
1084:27 - basically you don't want to have any
1084:28 - text or images or whatever cut off
1084:31 - on the side of the screen so you've
1084:33 - probably seen a mobile design before
1084:35 - where you know half the image is off the
1084:38 - screen you want to avoid that
1084:40 - and then
1084:41 - similar to that we want full width
1084:43 - mobile content so in general this
1084:45 - doesn't apply to everything but in
1084:47 - general everything that you look at is
1084:49 - going to be stacked on top of each other
1084:51 - rather than having columns you never
1084:53 - really want columns on a mobile device
1084:55 - and then finally just general usability
1084:58 - so this is not too hard just get a
1085:00 - friend
1085:01 - someone who will give you honest
1085:02 - feedback have them play around with your
1085:05 - web page on multiple devices
1085:07 - and anyone is going to be able to tell
1085:10 - okay this doesn't feel right this one's
1085:12 - kind of clunky it's hard to use this on
1085:13 - a mobile device you know i'm squinting
1085:16 - on the desktop to see this you should
1085:18 - get pretty good feedback and just using
1085:20 - a common sense approach is usually
1085:22 - pretty good for this all right at this
1085:24 - point we're going to apply these skills
1085:26 - we just learned
1085:28 - and we're going to take this pricing
1085:29 - card challenge where you can see that
1085:31 - everything's getting cut off and it's
1085:33 - not responsive and we're gonna make it
1085:35 - responsive so
1085:37 - the answer to this is actually
1085:39 - relatively simple and we can do it in
1085:42 - one of two approaches so the first way
1085:44 - we could do it is a desktop first
1085:46 - approach which like i said i don't
1085:48 - recommend that as your default way of
1085:50 - approaching css but in this case we did
1085:54 - design this with a desktop first
1085:57 - mindset we didn't really think about
1085:59 - mobile design when we were doing this
1086:01 - and therefore in the css and html that
1086:04 - has been reflected so in this case you
1086:07 - can see that the width of this
1086:09 - card that we've created
1086:11 - we
1086:12 - decided that
1086:13 - as we were creating the card and you can
1086:15 - see it right here so we've assigned a
1086:17 - width of 600 pixels to this
1086:20 - and for that reason i think we can
1086:22 - assign a media query or a break point
1086:26 - around that 600 pixel mark now if we did
1086:29 - it exactly at 600 pixels
1086:31 - then you're going to see a design where
1086:33 - you know we're at 635 pixels here and
1086:37 - looks like about 600
1086:39 - right here and obviously there's
1086:41 - something cut off so you want to put a
1086:42 - little bit of a little bit of wiggle
1086:44 - room there so we might want to write our
1086:46 - media query to be somewhere around 650
1086:49 - pixels
1086:50 - so what we'll do is we'll come down to
1086:52 - the very bottom of the css
1086:54 - as we're supposed to with media queries
1086:57 - we'll write at media
1086:59 - and then we'll say max with because
1087:02 - we're solving this in the desktop first
1087:04 - approach
1087:05 - because this will be the simplest
1087:08 - solution and we'll say 650 pixels
1087:11 - so dropping down into this css rule all
1087:15 - we really have to do is make these
1087:17 - bottom the bottom left and the bottom
1087:19 - right
1087:21 - containers that we created we want to
1087:22 - make them 100 width so that they
1087:25 - naturally stack on top of each other
1087:27 - so i believe all we have to do if i'm
1087:30 - thinking about this correctly
1087:31 - is target those two and give them a 100
1087:35 - width when the screen is less than 650
1087:38 - pixels
1087:39 - so the ids for this would be bottom left
1087:42 - section so let's grab that
1087:44 - throw it in our media query
1087:47 - and paste that in and then we want to
1087:50 - put a comma because we want to also
1087:52 - do the same thing for the bottom right
1087:54 - section
1087:55 - so let's grab that
1087:57 - and put a hashtag to target it
1088:00 - and then we'll make a css rule so right
1088:03 - now in this media query we're saying
1088:05 - anything any screen that's less than 650
1088:08 - pixels i want to target the bottom left
1088:11 - section in the bottom right section by
1088:13 - their ids
1088:14 - and then i want to give them a width of
1088:16 - a hundred percent all right so at this
1088:19 - point our screen is greater than 650 but
1088:22 - as we resize
1088:23 - you'll see that it's done something for
1088:26 - us but now we have to figure out what's
1088:28 - going on here because we've completely
1088:30 - lost the bottom right section it's
1088:32 - pretty much disappeared and the reason
1088:34 - that that is happening is because we've
1088:37 - set explicit heights on this card if you
1088:40 - scroll up to the the top of the css
1088:42 - you'll see that we gave the card a width
1088:44 - of 600 pixels and a height of 400 pixels
1088:47 - and then we also set the overflow to be
1088:50 - hidden
1088:51 - which was what allowed us to make those
1088:53 - rounded corners at the bottom
1088:55 - so what's happening here when i resize
1088:57 - this
1088:58 - and we're basically losing
1089:00 - this right side entirely is because
1089:04 - now when we stack them on top of each
1089:06 - other it's greater than that height of
1089:08 - 400 pixels
1089:10 - and we're hiding that overflow content
1089:12 - so it's not being shown here
1089:14 - so if we were to come down to our media
1089:17 - query
1089:17 - and set the height
1089:20 - to be auto
1089:22 - it's going to change something for us i
1089:24 - believe
1089:26 - no that's not going to change because we
1089:27 - don't want to assign that to the the
1089:29 - sections we want that to be to the main
1089:31 - card
1089:32 - so we need to target
1089:35 - the
1089:35 - card itself
1089:38 - so down in our media query we're going
1089:40 - to target the card
1089:41 - and now we're going to set the height to
1089:43 - be
1089:44 - auto which is going to
1089:46 - take away that explicit height and give
1089:48 - it
1089:49 - its automatic height and you can see
1089:51 - that now we are
1089:53 - resizing correctly but the last problem
1089:56 - is you're going to see it's still cut
1089:58 - off because for this card component we
1090:00 - still do not have an automatic
1090:04 - width so we've only assigned a 100
1090:06 - percent width to the bottom left and
1090:07 - bottom right section
1090:09 - so if we were to assign the width here
1090:11 - to auto or even a hundred percent we
1090:14 - should see that it resizes now
1090:17 - appropriately so i think what we can do
1090:20 - is we can actually take
1090:22 - since we've duplicated this with we can
1090:24 - take this height auto and we can put
1090:27 - this up into this rule and then we can
1090:29 - just include
1090:31 - the the main card within that
1090:33 - and delete these and i think it should
1090:35 - work just fine
1090:37 - so let's resize it
1090:38 - and you can see that it works just fine
1090:41 - and you can see that all we had to do
1090:43 - was add this little block of code to
1090:45 - make it mobily responsive but i don't
1090:48 - want to leave you hanging on this one
1090:50 - i said throughout the whole video we
1090:51 - want to go mobile first mobile first so
1090:54 - i want to stay true to that and show you
1090:56 - how to make this mobile responsive from
1090:59 - a mobile first
1091:00 - perspective or strategy this desktop
1091:03 - first approach worked pretty well
1091:05 - because we originally created this from
1091:07 - that approach but ideally we would have
1091:10 - created the original card from a mobile
1091:12 - first perspective so i'm going to show
1091:13 - you how to convert that
1091:15 - so let's delete our media query that we
1091:17 - just created you'll see that it goes
1091:19 - back to being cut off and not being
1091:21 - mobily responsive
1091:23 - and now what i want to do is create that
1091:25 - mobile first design so instead of a max
1091:28 - width we're going to write a media query
1091:30 - where we have a mid width
1091:32 - which is going to be 576 pixels we'll
1091:35 - just go with that so anything greater
1091:37 - than a mobile device is going to have
1091:39 - um whatever styles we put in here
1091:42 - now the cool thing about you know media
1091:45 - queries and break points is that you
1091:47 - don't have to duplicate all of your css
1091:50 - a lot of styles are going to be applied
1091:53 - similarly across devices so for example
1091:57 - the color of this button in this text in
1092:00 - these backgrounds that's not going to
1092:02 - change based on whether we're on a
1092:04 - mobile or desktop device so we don't
1092:06 - need to rewrite those
1092:08 - likewise our text is going to stay the
1092:10 - same we're going to have the same font
1092:11 - style no matter what so really the only
1092:14 - things that you have to alter
1092:16 - between
1092:18 - break points is going to be layout
1092:19 - related properties so what i want to
1092:22 - start with is the overall card so if you
1092:25 - remember
1092:26 - in the top part of the css we have a
1092:28 - rule for card
1092:30 - and right now we're giving it an
1092:32 - explicit width and an explicit height
1092:35 - now if you remember from a mobile first
1092:38 - perspective
1092:39 - everything that's not within the media
1092:41 - query itself is going to apply to a
1092:43 - mobile device
1092:45 - so naturally when we're on a mobile
1092:47 - device we do not want these explicit
1092:49 - widths and heights so let me go ahead
1092:52 - and comment those out for a second
1092:55 - and what you're going to see is that
1092:57 - we've already done a lot better so the
1092:59 - the overall card
1093:01 - is the right width and height now but
1093:03 - we've got some problems going on within
1093:05 - the bottom left and bottom right
1093:07 - sections now we don't want to get rid of
1093:09 - these widths and heights altogether so
1093:11 - let's go ahead and
1093:13 - take those out of the the main card and
1093:15 - then scroll down to our media query
1093:19 - and we'll target
1093:20 - the card element and paste in those
1093:23 - rules again
1093:24 - so now we want to give it a width of 600
1093:26 - and a height of 400 on any device
1093:29 - greater than a mobile device or 576
1093:31 - pixels
1093:32 - so let's go ahead and resize this
1093:35 - and it should break
1093:37 - somewhere around here so right there you
1093:40 - saw it so that was where our break point
1093:42 - was and you'll see that based on the
1093:45 - explicit width and height we've given it
1093:47 - it's not really fitting correctly so we
1093:49 - can actually change this it should work
1093:51 - just fine so maybe we'll say something
1093:54 - like i don't know 550 pixels
1093:57 - so that gets it fitting on the screen
1093:59 - and then the height can go ahead and
1094:01 - stay at 400 pixels
1094:03 - so now as we have our mobile device it's
1094:05 - somewhat responsive and then as we go to
1094:08 - anything greater than a mobile device
1094:10 - it stays as this card the next thing
1094:13 - that we want to look at is the bottom
1094:15 - left in the bottom right sections
1094:17 - so here are the styles that we have for
1094:19 - those
1094:20 - and you'll see that we've given them
1094:22 - widths of 50
1094:24 - each
1094:25 - so
1094:26 - in this case when we're on a mobile
1094:27 - device we do not want these widths to be
1094:30 - 50 we want them to be 100 percent
1094:33 - so let's go ahead and comment this out
1094:36 - and when we do that it's going to have
1094:37 - the default width of auto which is going
1094:40 - to be 100
1094:41 - so by default it's going to be 100
1094:44 - and if we comment out both of these
1094:46 - i think we should start to see something
1094:48 - that makes a little bit more sense so
1094:50 - you'll see that we have
1094:51 - some auto actually no i said that wrong
1094:54 - we cannot just use it as auto we need
1094:57 - the the text to span 100 width of its
1095:00 - container
1095:01 - so in these styles we need to
1095:04 - i guess
1095:05 - go ahead and set a width of a hundred
1095:07 - percent
1095:08 - so that fixes this section
1095:10 - and then we'll come down here and set a
1095:12 - width of 100 and that should pull this
1095:14 - one to the right
1095:16 - all right so we're looking good there
1095:18 - and i think for the most part we have
1095:20 - our mobile design complete so i think
1095:22 - this is exactly what we want so our
1095:24 - mobile design is complete we just need
1095:26 - to make this desktop design
1095:28 - look a little bit better because as of
1095:30 - right now it obviously is missing an
1095:32 - entire section so really we can just
1095:35 - let's go ahead and delete the width of
1095:36 - 50 percent even the commented out
1095:40 - section here
1095:41 - and then we'll go down to our query at
1095:43 - the bottom that says anything greater
1095:46 - than
1095:47 - a mobile device
1095:48 - and we're going to target the bottom
1095:50 - left section
1095:52 - and the bottom right section
1095:55 - and here we're going to give it a width
1095:57 - of 50 percent just like we had before
1096:00 - and now you'll see that it fits just
1096:02 - perfectly and as we resize it it goes
1096:06 - it resizes perfectly on a mobile device
1096:09 - so that is the difference it's very
1096:11 - subtle especially because our project is
1096:14 - very simple there's not you know
1096:15 - hundreds of styles
1096:17 - but the difference between a mobile
1096:19 - first and a desktop first design
1096:22 - is really important and you really have
1096:24 - to internalize that as a full stack web
1096:26 - developer
1096:29 - in this video i'm going to teach you how
1096:31 - flexbox works we'll start off by going
1096:34 - through what's available to you what it
1096:36 - can actually do and then we'll spend the
1096:38 - rest of the video which will be the the
1096:40 - majority of it diving really deep into
1096:43 - how flexbox works how do we calculate
1096:46 - different things and use all of the
1096:48 - properties my goal for this video is to
1096:50 - be the most in-depth flexbox tutorial on
1096:53 - youtube and the reason i'm making it so
1096:56 - in-depth is because it's important i
1096:58 - think that not only knowing flexbox
1097:00 - allows you to
1097:02 - eliminate a lot of the frustration when
1097:04 - it comes to layouts in css but it'll
1097:06 - also set us up for our next lesson which
1097:09 - is going to be on css grid so let's get
1097:11 - started this is a flexbox crash course
1097:14 - and the prerequisites for it is going to
1097:16 - be a basic understanding of html and css
1097:20 - i've covered all of this in prior
1097:22 - lessons of this series so go check those
1097:24 - out if you're unfamiliar here's what
1097:25 - we're going to be covering in this video
1097:27 - we're going to learn what flexbox is how
1097:30 - can help you out and make your life
1097:31 - easier we're going to go through all the
1097:33 - basic properties of flexbox and we're
1097:34 - going to get pretty detailed in those so
1097:37 - that you really understand what's going
1097:38 - on there and then finally we're going to
1097:41 - look at a front-end mentor project this
1097:43 - testimonial uh grid over here which
1097:46 - we're going to be creating with flexbox
1097:48 - in the next video a few of the things
1097:50 - that we're not going to be covering
1097:52 - shorthand flexbox properties so there's
1097:55 - a couple properties within this css i
1097:58 - guess module or framework or whatever
1098:00 - you want to call it that allow you to
1098:02 - write less css to achieve the same thing
1098:05 - and that's not our goal here we're
1098:07 - trying to learn flexbox you can apply
1098:09 - those much later down the road when
1098:11 - you're more comfortable with flexbox and
1098:13 - we're also not going to be getting very
1098:14 - advanced with this i have written
1098:16 - advanced flexbox properties but we're
1098:18 - pretty much covering all the properties
1098:20 - i guess probably the better way to say
1098:22 - that is we're not going to be going into
1098:23 - advanced flexbox methods and you know
1098:26 - different layouts and all that kind of
1098:28 - stuff my main goal is to get you
1098:29 - understanding how the system works
1098:32 - and get you very comfortable with using
1098:34 - it the obvious starting question is what
1098:36 - is flexbox well if you have been
1098:39 - following along you might have realized
1098:41 - that as we're writing our css there's
1098:43 - really two main components you have
1098:46 - layout related properties and then you
1098:48 - have style related properties so a style
1098:51 - property would be like a color or a font
1098:54 - or something like that it doesn't really
1098:56 - affect how things are laid out on the
1098:58 - page but layout properties do that's how
1099:00 - you create you know grids and you know
1099:03 - nav bars and footers and sidebars all of
1099:06 - that kind of stuff so far we have not
1099:08 - been using flexbox and our job has been
1099:11 - a little bit difficult because we've had
1099:13 - to use
1099:14 - uh you know hacky ways of getting
1099:16 - layouts to work flexbox is going to come
1099:18 - in and really help you out with that
1099:20 - layout side of things
1099:22 - and per the mdn web docs flexbox
1099:25 - is called the css flexible box layout
1099:28 - module and it's a model for displaying
1099:30 - items in a single dimension so either a
1099:33 - row or a column in future videos we're
1099:35 - going to get into css grid which is a
1099:38 - two-dimensional layout module within css
1099:41 - and some you know might say that css
1099:44 - grid is better than flexbox or vice
1099:46 - versa but they really work together and
1099:48 - we're going to cover how those work
1099:50 - together within our css whatever the
1099:52 - case flexbox and then subsequently css
1099:56 - grid which again is a future video these
1099:59 - are kind of the future of css layouts so
1100:02 - in the past like i talked about you had
1100:04 - to use like floats and clear fixes and
1100:06 - inline blocks and specific widths and if
1100:10 - you watched one of the previous videos
1100:11 - we had to almost
1100:13 - you know hack our way to getting items
1100:15 - to fit within a container by removing
1100:18 - white space from our html these are not
1100:20 - good solutions they're not sustainable
1100:23 - and so flexbox along with css grid come
1100:26 - in to provide a better model for doing
1100:28 - layouts but enough talk let me show you
1100:31 - exactly
1100:32 - what we're dealing with here
1100:34 - so what i've got here is some basic html
1100:37 - and i really want you to start
1100:38 - understanding this container child
1100:41 - relationship within html so if we look
1100:44 - at this we can see that we have a div
1100:47 - element with a class of container and
1100:49 - then we have three div elements all
1100:51 - having the same class of item this
1100:53 - relationship is very important the
1100:56 - container is the parent to all three of
1100:59 - these you know children
1101:01 - elements to show you how this
1101:02 - relationship is important
1101:05 - let's put some width and height
1101:07 - dimensions we'll go with 100 pixels for
1101:10 - the width and height of the items within
1101:13 - this container
1101:14 - and we'll give them a background color
1101:17 - of say orange
1101:19 - and then maybe we'll give some margin of
1101:21 - 5 pixels so they're kind of separate a
1101:23 - little bit
1101:24 - so here you can see the three div
1101:26 - elements these are the children elements
1101:28 - to that container
1101:30 - and the reason this parent-child
1101:32 - relationship is so important is because
1101:34 - the second you enable flexbox on a
1101:37 - container all of the child elements
1101:40 - become what we call flex items
1101:42 - so this is really important and first
1101:44 - off let me show you what happens when we
1101:46 - have the normal display property so
1101:49 - right now by default each item here and
1101:52 - the container are all going to be a
1101:54 - display type of block so they're block
1101:57 - elements
1101:58 - and you'll see as i type these in it's
1102:00 - not going to do anything because we're
1102:02 - basically just
1102:04 - explicitly writing in what was already
1102:06 - the default now with block elements as
1102:08 - we talked about in prior css videos of
1102:11 - the series these are going to have
1102:13 - certain characteristics and flex items
1102:16 - and flex containers are also going to
1102:18 - have certain
1102:19 - display characteristics so if we remove
1102:22 - this display block which again these are
1102:24 - just defaults for
1102:26 - div elements
1102:27 - and we come up to the container and we
1102:29 - type display flex you're going to notice
1102:32 - that these items change and the reason
1102:35 - they change is because by adding the
1102:37 - single property on the
1102:39 - container element or the parent
1102:41 - we are basically making a flex container
1102:44 - which holds a bunch of flex items the
1102:46 - container and the items have specific um
1102:50 - characteristics that you know normal
1102:52 - block or inline elements do not have in
1102:54 - just a minute i'm going to explain
1102:56 - exactly why these flex items are going
1102:59 - in a horizontal direction rather than
1103:01 - vertical but for now i really want to
1103:03 - drill home this point about flex
1103:06 - containers and flex items now you might
1103:09 - ask well if i set display flex on this
1103:12 - container and all of these are going to
1103:15 - be flex items
1103:17 - then can i also you know make the flex
1103:19 - item a flex container and the answer is
1103:23 - yes you can actually have an element
1103:25 - be both a flex item and a flex container
1103:28 - at the same time and that's why it's
1103:29 - important to always keep these
1103:31 - relationships clear in your head let me
1103:32 - show you what i mean so if we come down
1103:34 - to the final
1103:36 - div element which currently is just a
1103:38 - flex item and then we put in a few more
1103:41 - divs so let's put in a class of sub item
1103:46 - and then we're going to copy this down
1103:48 - three times and right now this doesn't
1103:50 - have any dimensions but if we copy this
1103:53 - css selector of item down and then we
1103:57 - put in sub item and give it some
1103:59 - different dimensions so we'll give it
1104:01 - something very small like maybe 15
1104:04 - pixels
1104:06 - wide and tall
1104:07 - and then we'll make the background color
1104:10 - blue
1104:11 - and a margin of 1 pixel something like
1104:14 - that and what you'll see is that these
1104:16 - line up within that third container
1104:18 - because they're children of this third
1104:21 - flex item but at the moment these are
1104:24 - not flex items themselves they are block
1104:26 - elements by default this brings up a
1104:28 - very important point so if you look at
1104:31 - our css we have put the display flex
1104:33 - property on this main container
1104:36 - and when we do that it only turns that
1104:39 - container into a flex item and then the
1104:41 - direct children not all descendants but
1104:44 - only the direct children will become the
1104:46 - flex items so in this case all of these
1104:50 - divs are going to be flex items but the
1104:52 - sub items are not going to be flex items
1104:55 - these will be the default block elements
1104:57 - now what i can do is i can come in and
1105:00 - turn this final div into a flex
1105:04 - container which will then subsequently
1105:06 - turn these sub items into flex items as
1105:09 - well just so that i have a unique
1105:11 - selector on here let me turn this into
1105:14 - item three
1105:16 - we'll put another class on there and
1105:18 - then all we have to do is come down here
1105:20 - on item three
1105:22 - and write display flex and what you'll
1105:24 - see is these three blue boxes right here
1105:27 - are going to go in a row just like the
1105:29 - orange boxes are as we go throughout
1105:31 - this tutorial i want you to keep this
1105:33 - clear in your head this exact model that
1105:36 - we just laid out here so let me just
1105:38 - walk you through it one more time at the
1105:40 - top level we have a div called with a
1105:42 - class of container this is a flex
1105:45 - container and the reason it's a flex
1105:47 - container is because we put the display
1105:49 - flex property on it
1105:51 - now all of the items these three items
1105:53 - right here these are flex items and the
1105:56 - reason they're flex items is because
1105:58 - their direct parent is a flex container
1106:02 - now these sub items right here these are
1106:05 - also flex items but it's not because we
1106:08 - have display flex on the main container
1106:10 - it's because we've put display flex
1106:13 - on this third item right here i know
1106:14 - this is confusing right now it's going
1106:16 - to get a lot more clear as we go through
1106:18 - the tutorial but what's happening here
1106:20 - is this third div within the container
1106:24 - is both a flex container
1106:26 - and it's a flex item so it can actually
1106:29 - serve as both types at the same time in
1106:32 - relation to the main container it is a
1106:35 - flex item in relation to these sub items
1106:39 - it is a flex container with that level
1106:41 - of understanding between the container
1106:43 - and flex item and how we can combine
1106:45 - those here are the flex container and
1106:48 - flex item properties that you can use
1106:51 - we're going to go through each of these
1106:53 - but you have to keep them very clear in
1106:55 - your head when you're going through
1106:56 - because you have to first identify am i
1106:59 - dealing with a container or an item and
1107:01 - as you saw in some cases you can be
1107:04 - dealing with both so you can actually
1107:05 - put
1107:06 - a combination of these properties on a
1107:09 - single html element sometimes this gets
1107:11 - a little bit confusing and something
1107:14 - that i had done when i was first
1107:16 - learning flexbox
1107:17 - is i had this cheat sheet that i found
1107:19 - here
1107:20 - it's a really great resource i'll be
1107:22 - sure to link to it in the description
1107:24 - but i just keep this open
1107:26 - whenever i'm working with flexbox
1107:28 - because it's very interactive you can
1107:30 - you know click on different things and
1107:32 - and see how different flex properties
1107:35 - work
1107:36 - and it covers pretty much everything now
1107:38 - as i just mentioned some properties
1107:40 - apply to the container and some to the
1107:42 - items
1107:43 - this resource does not really separate
1107:45 - that out on the left
1107:47 - side right here but for each property
1107:50 - you'll come down and you can see what it
1107:52 - applies to so this one applies to flex
1107:54 - containers
1107:56 - so i'd use this resource keep it open
1107:59 - as you're learning flexbox it's a really
1108:01 - good you know little cheat sheet to have
1108:04 - in addition
1108:05 - as we've been going through in this
1108:07 - course you can always look it up on mdn
1108:09 - web docs so as you can see we're on
1108:12 - flexbox and here's the property
1108:14 - reference for all of the valid
1108:16 - properties that we can use
1108:17 - and you can click on each of them and
1108:20 - kind of get an overview of what
1108:22 - what's available and what i'll point out
1108:24 - is this formal definition down here for
1108:27 - each property is going to tell you what
1108:29 - the initial value is and sometimes
1108:31 - that's important to understand what the
1108:34 - default values you're dealing with are
1108:36 - the reason understanding these default
1108:38 - values is so important is because when
1108:40 - we have
1108:41 - um you know flex items and flex
1108:44 - containers like this
1108:46 - putting this single rule on a container
1108:48 - is going to set a bunch of properties
1108:52 - by default that you're not seeing you
1108:54 - know in front of you in reality when we
1108:56 - put display flex on this container
1108:59 - it's setting all of the properties that
1109:01 - i just pasted in here so it's setting a
1109:03 - flex direction justify content align
1109:06 - content items in flex wrap
1109:08 - and these are all of the default values
1109:11 - so you can see that nothing changed over
1109:13 - here on the left because they were
1109:14 - already applied
1109:16 - by default likewise flex items have
1109:18 - default properties so i can come down to
1109:20 - the item
1109:21 - itself which is going to be a flex item
1109:24 - and paste in all of these properties
1109:26 - right here and the reason nothing
1109:28 - changed on the left again is because
1109:30 - these are the defaults that we you know
1109:33 - that flexbox comes packed with what
1109:35 - we're going to do in this tutorial is
1109:36 - learn how we can modify the default
1109:39 - values on all of these
1109:41 - uh properties right here to get the
1109:43 - intended result that we want the last
1109:45 - thing i want to point out before we jump
1109:47 - into our first property
1109:49 - is just a quick note on shorthand flex
1109:51 - properties
1109:52 - so if we came down to the flex item so
1109:54 - this is targeting one of our flex items
1109:57 - here
1109:58 - and we put in something called flex
1110:01 - and we gave it a value of uh let's see 0
1110:06 - 1 and auto
1110:08 - this right here is what we call a
1110:10 - shorthand flex property
1110:12 - and it is the exact equivalent of
1110:14 - writing flex grow zero
1110:18 - flex
1110:20 - shrink
1110:20 - one
1110:21 - and flex basis of auto so these three
1110:25 - properties written out longhand is the
1110:27 - same thing as this single property
1110:29 - written out shorthand
1110:31 - and for this tutorial like i said we're
1110:33 - not going to be looking at these
1110:35 - shorthand properties because
1110:37 - we have enough to deal with with the
1110:39 - longhand properties just understanding
1110:41 - how they work so just wanted to clarify
1110:44 - that because you might see that in the
1110:45 - flex cheat sheet so if you came down
1110:48 - here
1110:49 - flex flow is a shorthand property i'm
1110:52 - sure flex is somewhere on here
1110:55 - but whatever the case just know that
1110:56 - those exist but we're not going to be
1110:58 - covering them i think at this point i've
1110:59 - covered all of these you know
1111:01 - prerequisite pieces of knowledge to
1111:03 - really jump into flexbox let's go ahead
1111:06 - and get started we're not going to use
1111:08 - this because it's pretty ugly
1111:10 - and i actually put together a little
1111:12 - demo here
1111:13 - so you can check out the javascript for
1111:15 - this it's basically just toggling some
1111:17 - of the values here
1111:19 - and what this demo is meant to
1111:22 - explain explain
1111:23 - is the main tenet of flexbox and that is
1111:27 - the fact that we have one dimensional
1111:30 - one-dimensional model where we can align
1111:34 - items on either the horizontal or
1111:36 - vertical axis as you'll see in the html
1111:39 - we've got some some html up here none of
1111:42 - this is really important what we're
1111:44 - really focused on here is going to be
1111:47 - this piece right here so we've got our
1111:49 - main container which is going to be our
1111:51 - flex container and then each of these
1111:55 - divs are going to be the actual flex
1111:58 - items and i've actually styled these a
1112:00 - little bit just for you know visual
1112:02 - purposes but it's not important to this
1112:04 - tutorial so if we're looking at this
1112:05 - html the way that we create a flex
1112:08 - container
1112:10 - of this div is by selecting it with css
1112:13 - and writing display flex on it so by
1112:16 - default that's going to create a flex
1112:18 - container and then all of the direct
1112:20 - children are going to be
1112:22 - the flex items so all three of these
1112:25 - divs right here
1112:27 - now the next property that we have to
1112:28 - understand and this is a really
1112:30 - important part of flexbox is the flex
1112:32 - direction property and this is by
1112:35 - default going to be set to row what this
1112:37 - property is defining is what we're going
1112:40 - to be using as the main axis and what
1112:43 - we're going to be using as the cross
1112:45 - axis i've written this out
1112:48 - with html and css so you can see that
1112:50 - this is the main axis horizontally and
1112:54 - this is the cross axis vertically but
1112:56 - what happens is if you change this flex
1113:00 - direction property you're going to
1113:02 - change the flow of the items within the
1113:05 - flex container and when you do that
1113:07 - that's also going to change the main and
1113:10 - the cross axis so by default this is set
1113:13 - to row which means everything is going
1113:15 - to go horizontal and the main axis is
1113:18 - going to be horizontal but if we were to
1113:20 - toggle this flex direction which is
1113:22 - going to via javascript change the flex
1113:25 - direction to column
1113:27 - then what's happening is the main axis
1113:30 - is going to be vertical and the cross
1113:32 - axis is going to be horizontal now so
1113:35 - now we're looking vertically well
1113:37 - previously when it was set to row we're
1113:38 - looking horizontally so as we learn new
1113:41 - properties keep two things in mind first
1113:43 - off as we talked about you got to know
1113:46 - which
1113:47 - html element is the flex container and
1113:50 - which are the flex items number two you
1113:52 - have to know which
1113:54 - direction the flex items are going to
1113:56 - flow in so if you've got this property
1113:59 - flex flex direction set to row they're
1114:02 - going to go horizontal and the main axis
1114:04 - is going to be horizontal and if you set
1114:06 - it to column it's going to flow um
1114:09 - vertically and the main axis is going to
1114:11 - be
1114:12 - vertical as you can see in this example
1114:14 - our flex container is
1114:17 - has a certain height and width and the
1114:19 - reason is because we set it down here so
1114:22 - if we find the container that we set it
1114:24 - on we set the width and height to 300
1114:27 - and 200 pixels
1114:29 - now if we comment these out we get rid
1114:31 - of the dimensions on the container
1114:34 - it's going to act similar to a block
1114:36 - element where it kind of spans the width
1114:39 - of its parent container and then the
1114:41 - height is going to be based on the
1114:42 - content of the items within it to keep
1114:45 - things simple we're going to keep this
1114:47 - width and height set on our container
1114:50 - just so that we can have a nice visual
1114:52 - to look at as we explore some of the
1114:54 - different flex properties for the
1114:56 - remainder of the tutorial we're going to
1114:57 - be working here in this workspace
1115:00 - and i want to just kind of derive how i
1115:02 - got here just so you're not confused
1115:04 - with pre-existing styles that i put on
1115:06 - here
1115:07 - so what i have is basically four div
1115:10 - elements
1115:12 - within a main container and as of right
1115:14 - now what i'm showing you there's no flex
1115:16 - box enabled here
1115:18 - except on these items right here but
1115:21 - that's not what we're trying to cover
1115:23 - so these are basic divs and as of right
1115:26 - now they're displaying as block elements
1115:28 - and there's no you know dimensions on
1115:30 - the container so let me kind of derive
1115:32 - how we get to our workspace
1115:34 - first off i'm going to set a width and a
1115:37 - height on our main flex container
1115:40 - and i'm going to put a border on it so
1115:42 - just uncommented those properties out
1115:45 - and what you'll see here is a black
1115:48 - border that is 4 pixels in dimension and
1115:52 - then the width itself is going to be 408
1115:55 - pixels on the whole container the reason
1115:58 - that it's 408 is because if you add the
1116:01 - left border of 4 pixels in the right
1116:03 - border of four pixels
1116:05 - that gets you eight pixels and therefore
1116:08 - what i wanted to do
1116:09 - was basically make the total area within
1116:13 - the container uh 400 pixels exactly so
1116:16 - that we have a better time doing you
1116:18 - know basic calculations so that's why i
1116:21 - made it 408 pixels
1116:23 - now we have to uncomment the display
1116:26 - flex to make these flex items
1116:29 - so now you're seeing that they're
1116:31 - sitting you know on the horizontal axis
1116:33 - and that's actually because of the flex
1116:36 - direction row
1116:37 - default
1116:38 - setting here
1116:39 - and this is how we get to our basic
1116:41 - workspace and then finally i will
1116:43 - uncomment these two lines of html which
1116:46 - are going to be styled somewhere down
1116:48 - here so that we can see the cross in the
1116:51 - main axis
1116:52 - at all times and as we go through the
1116:54 - rest of the tutorial we're always going
1116:56 - to be working with a flex direction of
1116:58 - row so therefore the main axis is always
1117:01 - going to be horizontal and the cross
1117:04 - axis is always going to be vertical
1117:06 - if you want you can switch this and call
1117:09 - it flex direction
1117:11 - column and you can see how all of these
1117:13 - rules that we're about to go through
1117:15 - work out from a vertical axis
1117:17 - perspective the next few properties
1117:19 - we're talking about are alignment
1117:20 - properties which
1117:22 - allow you to align
1117:24 - and space out these flex items within
1117:26 - the container the first one is going to
1117:28 - be justify content so if we come to mdn
1117:32 - here's the formal definition
1117:34 - and we'll come down to the
1117:36 - formal definition here and see that the
1117:38 - initial value is normal if we read about
1117:41 - what normal is
1117:43 - it says the items are packed in their
1117:45 - default position as if no justified
1117:47 - content value was set
1117:49 - so that's kind of what you're seeing
1117:51 - here it's all just kind of by default at
1117:53 - the start of that axis now similarly if
1117:57 - we
1117:58 - set the justify
1118:01 - content property to start
1118:04 - this is going to achieve the same thing
1118:06 - so we're just putting it at the start so
1118:07 - for all intents and purposes you can
1118:09 - think of the default property for
1118:12 - justify content to be start if we wanted
1118:14 - all of the flex items to go to the end
1118:16 - of the main axis rather than the start
1118:19 - we can just type that into this property
1118:21 - so if we replace this with end you'll
1118:24 - see that all of these jump to the right
1118:26 - side
1118:27 - and you'll see that as we're looking on
1118:29 - the main axis that's how we're deciding
1118:32 - where these items are going to go we're
1118:34 - flowing horizontally so the start is the
1118:36 - left side and the end is the right side
1118:39 - we can also change this to
1118:42 - center which is going to put them right
1118:45 - in the middle and then we have some
1118:47 - additional property values that will
1118:49 - actually space the items out a little
1118:51 - bit the first one is going to be
1118:54 - space between so if we type space
1118:57 - between
1118:58 - these are going to be spaced out with
1119:00 - equal amount of white space between them
1119:03 - within the container
1119:04 - we also have a property called space
1119:07 - around
1119:08 - so if we change this to that
1119:10 - you'll see that there is now some space
1119:12 - surrounding each of these items on the
1119:14 - main axis
1119:15 - now what i'll have you notice here is
1119:17 - that the
1119:18 - amount of space between the items so
1119:21 - this little area here and here those are
1119:24 - all going to be equal in dimension
1119:27 - but the edges so to the right of this
1119:29 - fourth element into the left of the
1119:31 - first
1119:32 - that's a little bit smaller than the
1119:33 - space between the elements so that's
1119:36 - kind of the
1119:37 - how we distinguish the space around
1119:40 - property
1119:41 - value with the space evenly property
1119:44 - value
1119:45 - so when i type space evenly you'll see
1119:47 - that these change just a little bit and
1119:49 - now what's happening
1119:51 - is every piece of white space between
1119:53 - the elements are going to be exactly
1119:56 - equal so the justify content property
1119:59 - tells us how the items are spaced out
1120:02 - and aligned on the main axis
1120:04 - let's go ahead and set this back to
1120:08 - start because i want to have the default
1120:10 - values
1120:11 - so that now we can talk about the next
1120:13 - property which is the align items
1120:15 - property let's go ahead and look this up
1120:18 - in mdn
1120:20 - we'll type in align items
1120:24 - and you'll see that this is the property
1120:26 - that we use when we want to align flex
1120:28 - items on the cross axis so remember we
1120:32 - set
1120:33 - this example to a flex direction of row
1120:37 - by default and that means that the main
1120:39 - axis is horizontal and cross is vertical
1120:42 - so the align items always applies to the
1120:44 - cross axis
1120:46 - and is going to decide how these items
1120:49 - are aligned vertically looking at the
1120:51 - mdn docs you'll see that the initial
1120:53 - value is again normal and if we go to
1120:56 - normal wherever that is
1121:00 - i guess it's at the top here
1121:02 - it says the effect of this keyword is
1121:04 - dependent on the layout mode we are in
1121:06 - as you can see in the third bullet point
1121:08 - it says for flex items the keyword
1121:11 - behaves as stretch and if we come down
1121:14 - to
1121:14 - stretch it says the flex items are
1121:16 - stretched such that the cross size of
1121:19 - the item's margin box the same as the
1121:21 - line while respecting width and height
1121:24 - constraints
1121:25 - that's an overly confusing way to say
1121:29 - that by default
1121:31 - the align items
1121:34 - if we set it to normal is going to
1121:37 - stretch the height of these items to the
1121:40 - total height of the flex container
1121:42 - unless you have a specific height set on
1121:45 - those items already so this brings us to
1121:47 - a brief discussion on the width and
1121:50 - height properties of flex items
1121:52 - right now we don't have any width or
1121:55 - height set on either or any of these
1121:57 - flex items right here so they're getting
1122:00 - i guess what you call the defaults and
1122:03 - with flexbox
1122:04 - a flex item is by default going to get
1122:07 - the width
1122:09 - of
1122:10 - its inner content and the height is
1122:12 - going to stretch to be equal to the
1122:14 - total height of the flex container
1122:17 - as you can see the inner content is
1122:19 - going to be the numbers that we've put
1122:21 - in here and i know there's a little
1122:22 - space there but it's still considered
1122:24 - just the inner content and then the
1122:26 - height is of course the height of the
1122:28 - full flex container
1122:30 - now if we come down to flex item number
1122:31 - one
1122:32 - and we give it a width of say 100 pixels
1122:36 - it's no longer going to
1122:38 - have that default width of the content
1122:40 - it's going to respect that width that
1122:43 - we've set on it likewise if we give it a
1122:45 - height of say
1122:47 - 50 pixels
1122:48 - it's going to respect that height as
1122:50 - well
1122:51 - so if you put explicit width and height
1122:54 - properties on your flex items by default
1122:57 - they're going to
1122:58 - get those so long as there's not you
1123:00 - know overflow within the flex container
1123:03 - or you've set different properties that
1123:05 - we're going to talk about in just a bit
1123:07 - just as a quick review
1123:09 - the
1123:09 - items here the flex items do not have
1123:12 - explicit width or height properties and
1123:14 - therefore
1123:15 - the default height that a flex item is
1123:18 - going to get is going to be the total
1123:21 - size of the cross axis so in this case
1123:25 - the main axis is row cross is column so
1123:28 - total height of that column is going to
1123:30 - be the natural height this is no longer
1123:32 - the case when we start putting in
1123:34 - different values for the align items
1123:37 - so once we put in something like flex
1123:40 - start
1123:41 - you're going to see that all of these
1123:42 - items
1123:43 - pull up to the top of the cross axis and
1123:46 - they no longer have that total height of
1123:48 - the cross axis
1123:50 - and what's happening here is they just
1123:52 - have the width and height of the inner
1123:54 - content so if we change that inner
1123:57 - content then it's going to adjust the
1124:00 - size so one way we could do that let's
1124:02 - say that we have this first
1124:05 - flex item we'll come all the way to the
1124:06 - bottom
1124:08 - and i'm going to uncomment this
1124:10 - little rule that i wrote that made the
1124:12 - font size for this first item much
1124:14 - larger and you can see that as we make
1124:16 - the content bigger or smaller the flex
1124:20 - item itself gets bigger or smaller
1124:21 - because we don't have those explicit
1124:23 - width or height properties
1124:25 - now i'm going to leave that there
1124:27 - because it's going to bring up a very
1124:28 - good point
1124:29 - here in a second
1124:31 - so right now we have flex start we can
1124:33 - also
1124:34 - bring these down on the cross axis to
1124:36 - flex end so these are at the end now
1124:39 - and then we can center them with center
1124:42 - and this is actually something that's
1124:44 - really hard to do without flexbox so
1124:46 - really cool uh part of this flexbox
1124:48 - model what you'll see with the center is
1124:51 - that there's like an imaginary
1124:53 - horizontal line going through the middle
1124:55 - of the content in these
1124:58 - flex items
1124:59 - but we also have this property value
1125:02 - called
1125:03 - baseline
1125:04 - and what's going to happen here is we
1125:06 - actually draw that horizontal line
1125:08 - kind of at the at the bottom of each
1125:10 - piece of content within the flex item so
1125:13 - because this first one has much bigger
1125:17 - inner content
1125:18 - our flex
1125:20 - baseline is going to be in a different
1125:22 - spot so they're not going to be
1125:24 - perfectly aligned flush with the top of
1125:26 - that cross axis so far we've learned a
1125:30 - couple of properties
1125:31 - justify content and align items so we
1125:35 - can play around with these let's just do
1125:37 - a few examples so that we can kind of
1125:40 - review and recap so let's go ahead and
1125:42 - say
1125:43 - justify content will be center
1125:45 - and align items will also be center
1125:49 - this is how
1125:50 - you can take content flex items and put
1125:53 - them in the middle of a container and
1125:55 - this was very difficult to do before
1125:58 - flexbox so this is a really cool
1125:59 - advantage of having flexbox
1126:02 - and then we can of course change all of
1126:04 - these so we can put the justify content
1126:06 - to end
1126:08 - and put that there we can also
1126:10 - put align items to
1126:13 - flex end i don't know why you'd want to
1126:15 - do this but you can put in the bottom
1126:16 - right corner of the container
1126:18 - so
1126:19 - very flexible no pun intended of what we
1126:22 - can do here with these alignment
1126:24 - properties let me reset everything
1126:27 - let's just put these back to the
1126:28 - defaults so all you have to do is delete
1126:30 - them and they're back to their defaults
1126:32 - and then we will come down here and
1126:35 - comment out this
1126:37 - last rule that changes the font size of
1126:39 - that first item
1126:40 - so now everything is equal and what i
1126:43 - want to do is actually
1126:45 - make
1126:46 - each of these items a specific width and
1126:48 - height we'll go with 50 pixels by 50
1126:51 - pixels
1126:52 - one way that we can do that since we
1126:55 - have two classes set here and each flex
1126:58 - item has this fi class
1127:00 - we can just target that one class give
1127:03 - it a width of 50 pixels and a height of
1127:05 - 50 pixels
1127:06 - and now we have these perfect little
1127:08 - squares
1127:09 - sitting as our flex items by default if
1127:11 - you don't change any properties flexbox
1127:15 - will respect the flex item width and
1127:18 - height properties so we set those to 50
1127:21 - pixels by 50 pixels and that's what
1127:23 - we're getting right here
1127:25 - and if we came down to the flex
1127:27 - container again and we set that align
1127:29 - items property to say stretch
1127:32 - or something like that you'll see that
1127:34 - they're not actually going to stretch
1127:36 - down to the total height because we have
1127:38 - those explicit properties set already
1127:41 - but the next thing i want to explore is
1127:43 - what happens if you have too many or too
1127:45 - little
1127:46 - flex items within your flex container
1127:49 - in this example if you remember from a
1127:52 - few minutes ago when we talked about the
1127:55 - actually it's at the top here
1127:57 - we set the width of the flex container
1127:59 - to 408 and the height to 200 pixels
1128:02 - because the main axis is horizontal as a
1128:05 - result of the flex direction equal to
1128:07 - row property
1128:09 - the width is really all that we care
1128:11 - about right here because everything is
1128:13 - going in the width kind of direction
1128:16 - so we set this to 408 exactly for the
1128:19 - example i'm about to show you if you've
1128:21 - got a container 408 pixels wide in that
1128:25 - container has a four pixel border on the
1128:27 - left and the right
1128:29 - then the total white space that is
1128:32 - available for these flex items is
1128:34 - exactly 400 pixels
1128:36 - if each of our boxes are 50 pixels in
1128:39 - width
1128:40 - that means that we can fit a total of
1128:42 - eight flex items perfectly within this
1128:45 - container let's go ahead and do that
1128:48 - just to see what i'm talking about so
1128:50 - all we have to do is copy this down four
1128:52 - more times and you should see a bunch of
1128:56 - items pop up here let me just go ahead
1128:58 - and
1128:58 - change the labels so that we can see all
1129:01 - our flex items a little bit better and
1129:03 - now you can see that we have eight items
1129:06 - perfectly fitting within our flex
1129:07 - container but what happens if we take
1129:11 - all of these flex items and we double it
1129:13 - so let's say instead of 8 flex items of
1129:15 - 50 pixels each we have 16 so we double
1129:19 - it what happens then well let me go
1129:21 - ahead and do that real quick
1129:23 - i'll just copy all of these items and
1129:26 - paste them below
1129:28 - and what you're going to see as we
1129:29 - extend this is that these items are
1129:32 - overflowing outside of the flex
1129:34 - container there's a couple weird things
1129:36 - going on as well
1129:38 - if you'll notice it doesn't look like
1129:40 - these items are 50 pixels wide anymore
1129:43 - now of course if you were wondering how
1129:45 - wide these elements are you don't have
1129:47 - to guess you can right click
1129:49 - inspect element and you're dropped into
1129:52 - the firefox dev tools and the reason i'm
1129:54 - in firefox i know i've been switching
1129:56 - back and forth between
1129:57 - chrome and firefox throughout this
1129:59 - series but i'm in firefox because the
1130:02 - devtools have an awesome flexbox
1130:05 - little module here that you can inspect
1130:07 - elements with and really see what's
1130:09 - going on so all we have to do is come up
1130:11 - to this
1130:12 - inspector here we click that so that we
1130:14 - can select items on the page
1130:16 - and let's first start with our overall
1130:18 - flex container
1130:20 - when we click that flex container the
1130:22 - layout tab is going to drop us down into
1130:24 - this section called flex container
1130:27 - if you
1130:28 - collapse that you'll see that there's
1130:29 - also grid in the box model so these are
1130:32 - different you know models that we can
1130:34 - look at but if we look at flex container
1130:37 - and then we toggle this little button
1130:39 - you can see all of the different flex
1130:41 - items outlined for you as well as some
1130:43 - overflow space and other elements of the
1130:45 - flexbox
1130:47 - we'll turn this off for now but we can
1130:49 - also go down to the flex items and you
1130:50 - can see they're being highlighted here
1130:52 - on the left
1130:53 - as i hover over them so you can click
1130:56 - them with this little inspector here so
1130:58 - maybe we click on number eight
1131:01 - and we can look here within the
1131:03 - inspector of everything that's going on
1131:05 - with this individual flex item we're
1131:07 - going to talk more about all of this
1131:09 - stuff
1131:10 - in just a bit we're not quite ready yet
1131:13 - the thing that i want to draw your
1131:14 - attention to is the fact that if we go
1131:16 - down to the box model which we learned
1131:18 - about in previous lessons we know all
1131:20 - about how this works
1131:22 - and you look at the total size of a
1131:25 - single element so we'll click on number
1131:26 - four you'll see that the dimensions are
1131:29 - 33 and a half by 50
1131:31 - which is not what we set them to we set
1131:33 - them to 50 pixels wide and 50 pixels
1131:36 - tall
1131:37 - so the question is why is it shrinking
1131:40 - the width like we didn't tell it to do
1131:42 - that why is that happening furthermore
1131:44 - if these are overflowing outside the
1131:46 - container what do we do about that we
1131:48 - obviously don't want to show this to our
1131:49 - users we don't want our flex items just
1131:51 - going indefinitely off the page and
1131:54 - especially if you're making say a grid
1131:57 - of images where there's hundreds of
1131:59 - images and you're using flexbox to
1132:01 - display them you don't want them going
1132:04 - on a single axis you know indefinitely
1132:07 - to the right or indefinitely down in
1132:09 - this situation you have two options the
1132:11 - first option is kind of the
1132:14 - standard
1132:15 - default way of handling overflow in css
1132:19 - and this does not this is not specific
1132:21 - to flexbox itself you can use this with
1132:24 - any type of css display type
1132:28 - so if i came to the flex container
1132:31 - and i set the overflow property
1132:34 - i can set this to a couple of values but
1132:36 - usually you might want to set it to auto
1132:40 - and if you set it to auto what's going
1132:41 - to happen is these elements are no
1132:43 - longer going to break outside of that
1132:45 - container they're just going to scroll
1132:48 - so you see the scroll bar at the bottom
1132:50 - of our flex container now and we can see
1132:53 - all of our items
1132:54 - they're still shrunk a little bit but we
1132:56 - can see them all without you know
1132:58 - breaking out of the container but like i
1132:59 - said with that grid of images example if
1133:02 - we could imagine that these are images
1133:05 - we don't want our users to have to
1133:06 - scroll
1133:07 - left and right to see all the images we
1133:09 - want them to just wrap down to the next
1133:11 - line and just have like a nice little
1133:13 - grid of images so the second option that
1133:15 - you have here instead of setting the
1133:18 - overflow property which is just a
1133:19 - generic solution
1133:21 - we can set this flex wrap property and
1133:25 - if we set it to wrap you'll see what
1133:27 - happens is these elements go back to
1133:29 - their you know original size of 50 by 50
1133:32 - as we intended and they're going to
1133:35 - perfectly wrap
1133:36 - onto the next line now you see some
1133:38 - white space in here here in the middle
1133:40 - and you might say okay i don't really
1133:42 - want that i want those to be flush to
1133:44 - each other
1133:45 - so naturally what you're going to do is
1133:47 - come down to the flex container you're
1133:49 - going to type in a line items like we
1133:52 - had said earlier and you'll type in flex
1133:55 - start something like that and you won't
1133:58 - see anything happen and the reason is
1134:00 - because
1134:01 - the
1134:02 - rules of the game just changed when we
1134:04 - put in this flex wrap property
1134:06 - i know you're probably getting tired of
1134:08 - hearing me say that but as we go through
1134:11 - css certain properties set to certain
1134:14 - values changed the whole game just like
1134:16 - when we set flexbox to the container you
1134:19 - know it changes the behavior of all the
1134:21 - children elements within it
1134:23 - this flex wrap property changes how we
1134:26 - align items on the cross axis
1134:28 - so instead of align items we now have to
1134:31 - use this property called align content
1134:34 - so if flex wrap is set to anything other
1134:38 - than the default which is going to be no
1134:40 - wrap
1134:41 - you'll see it overflows again if it's
1134:43 - set to anything except for this no wrap
1134:46 - then we're going to use instead of align
1134:49 - items we're going to use align content
1134:51 - which is going to have the same
1134:54 - possible values for the most part as
1134:56 - align items but it's going to tell
1134:59 - flexbox how to arrange this new like
1135:02 - group of wrapped items within the flex
1135:04 - container so now we can set flex start
1135:07 - or we could wrap them at flex end
1135:10 - or even put them right in the center of
1135:13 - everything
1135:14 - so that's how we wrap items to the next
1135:17 - line if they're overflowing at this
1135:19 - point we've actually covered all of the
1135:21 - flex container
1135:23 - properties that we can use just to do a
1135:25 - very quick review i'll get rid of all
1135:27 - this extra stuff here so get rid of
1135:30 - these last eight
1135:32 - flex items and then i'll get rid of
1135:35 - these last two properties here so just
1135:37 - to review we have of course the display
1135:40 - flex which is going to activate flexbox
1135:44 - we have the flex direction which we can
1135:46 - set to either row or column so if we set
1135:49 - it to column it's going to go vertical
1135:52 - if we set it to row it's going to go
1135:54 - horizontal
1135:55 - we have justify content which aligns
1135:59 - flex items on the main axis in this case
1136:02 - the horizontal axis
1136:04 - we can set that to center
1136:06 - which is not going to change anything
1136:08 - because they're
1136:09 - it's as wide as the container itself but
1136:12 - if we just commented out
1136:14 - this last flex item
1136:17 - you'll see how this works it kind of
1136:18 - centers all of the content in the middle
1136:20 - and then we have align
1136:23 - items we can also put center on that to
1136:25 - put those in the middle next up we're
1136:27 - going to talk about how do we
1136:29 - influence the size and alignment of
1136:32 - individual flex items
1136:34 - so if you take a look at what i'm about
1136:36 - to do
1136:38 - i can say something like a line self
1136:40 - and i can say flex
1136:42 - start and you're going to see this first
1136:44 - item
1136:45 - drops out of the flow of the rest of the
1136:47 - flex items and we can do this with each
1136:50 - individual flex item for a lot of
1136:54 - different combinations here speaking of
1136:56 - this alignment let's go ahead and start
1136:58 - with that because i think it's the
1136:59 - easier
1137:00 - part of this discussion
1137:03 - so i will
1137:05 - let me just go ahead and comment out
1137:08 - the last four items here in our
1137:10 - container just so that we have four
1137:13 - and then within our rules here i'm going
1137:17 - to remove these justify content align
1137:19 - items so that everything is
1137:21 - top left default
1137:23 - settings
1137:24 - now if we came down to individual items
1137:26 - which i have css selectors here for on
1137:29 - the right
1137:31 - what we can use is this align self
1137:33 - property which is essentially the same
1137:35 - exact thing as a line items
1137:38 - except it only applies to a single flex
1137:41 - item
1137:42 - so
1137:43 - in this case we've set this to flex
1137:45 - start which is the default so it all
1137:48 - looks normal but if i take this first
1137:51 - flex item so the first box here
1137:53 - and i set this to flex end you'll see
1137:56 - that this drops to the bottom while the
1137:58 - rest stay at the top
1137:59 - and i can do this to flex item number
1138:01 - four so align self flex end and you'll
1138:04 - see this one dropped to the bottom and
1138:06 - then maybe i wanted number three in the
1138:08 - middle so align self
1138:10 - center so this one goes in the middle
1138:13 - you can see how we can individually pick
1138:15 - and choose where our flex items are
1138:17 - going to go and of course our container
1138:19 - level properties still apply so if i
1138:21 - came back up to the container and set
1138:24 - justify
1138:25 - content to center this whole group will
1138:27 - go to the middle
1138:28 - so these work together it's not one or
1138:31 - the other you use them in tandem like i
1138:34 - said the align self property is pretty
1138:36 - straightforward once you know
1138:38 - align items on the main container now
1138:42 - the last part we're going to talk about
1138:44 - is the sizing of flex items and this is
1138:47 - probably the hardest part of flexbox in
1138:50 - my opinion
1138:51 - to understand how all of these work and
1138:53 - what we're dealing with here is the flex
1138:55 - grow
1138:56 - flex shrink and flex basis properties
1138:59 - we're going to start with flex grow and
1139:02 - this is going to apply to
1139:05 - flex items when they don't naturally
1139:07 - fill
1139:08 - the entire main axis
1139:10 - so
1139:11 - in this case the main axis is horizontal
1139:13 - because of the flex direction row
1139:15 - property
1139:16 - and in this case we have 50 pixel wide
1139:20 - flex items and we have four of them so
1139:22 - this should only fill about half of the
1139:24 - total width of the container earlier we
1139:27 - talked about how the total white space
1139:29 - the total width for these flex items in
1139:31 - this container is exactly 400 pixels if
1139:34 - each item is 50 pixels wide
1139:37 - then 50 plus 50 plus 50 plus 50 is going
1139:40 - to be 200 pixels and therefore the
1139:43 - occupied space is going to be 200 pixels
1139:46 - and the unoccupied space is going to be
1139:49 - 200 pixels when there is unoccupied
1139:52 - space or empty space along the main axis
1139:54 - of a flex container
1139:56 - the flex grow property is going to come
1139:59 - into play by default this property on
1140:02 - each and every single item is going to
1140:04 - be set to zero
1140:06 - and what that means is that each item by
1140:09 - default is going to take up
1140:11 - zero percent of the empty space within
1140:14 - the container that is why what we're
1140:16 - looking at here is not stretching out to
1140:18 - fill the container right now is because
1140:21 - all of these items by default are
1140:24 - set to not take up that extra space but
1140:27 - if i come down to the first flex item
1140:30 - and i change that default property to a
1140:32 - one
1140:33 - you're going to see that the first item
1140:35 - fills up all of that remaining space
1140:38 - so it's going to take up the original
1140:40 - width it had of 50 pixels
1140:43 - and then we also know we had an empty
1140:45 - space of 200 pixels
1140:47 - so the total width of this first
1140:49 - item or first flex item now is going to
1140:52 - be 50 plus 200 or 250 pixels now of
1140:55 - course with my tutorials i don't want
1140:57 - you to just take my word for it so let's
1141:00 - go ahead and verify what i just said 50
1141:02 - pixels plus 200 is 250.
1141:06 - so if we click the selector up here
1141:08 - select that element and go down to the
1141:10 - box model
1141:11 - you'll see it's 250 and a half pixels
1141:15 - and the reason it's a half of a pixel
1141:17 - more than what we calculated
1141:20 - i'm not sure that i can fully explain it
1141:22 - with
1141:23 - the utmost confidence but i will attempt
1141:26 - to
1141:27 - so if we set this back to flex grow of 0
1141:30 - and refresh the page because it's being
1141:32 - stubborn
1141:33 - and then if we inspect the element we'll
1141:36 - go to this first element
1141:38 - and what you'll see in the box model is
1141:39 - that the inner content of
1141:42 - this so the number itself
1141:44 - is 28 and a half pixels
1141:47 - so if we hover over this you'll see that
1141:49 - the box gets drawn around that
1141:51 - number
1141:52 - now if we pulled in the same exact html
1141:55 - in css but in google chrome so i'm going
1141:57 - to pull in google chrome right here
1142:00 - and we're going to select this first box
1142:03 - and scroll down to the box model you'll
1142:05 - see that the inner content is 28 not 28
1142:08 - and a half
1142:09 - so
1142:10 - browser differences are of course a big
1142:13 - part of web development but i wouldn't
1142:15 - worry about that extra half that we saw
1142:17 - when we're trying to make the
1142:18 - calculations just make sure that you
1142:21 - have the understanding of how these are
1142:22 - calculated in programming being off by
1142:25 - one is sometimes a catastrophic error
1142:28 - but when we're dealing with uh css
1142:31 - it's not quite as big of a deal so we
1142:34 - will we will stick with this and as we
1142:36 - go throughout you're probably going to
1142:38 - notice that my calculations are going to
1142:40 - be off by just a couple decimals but
1142:42 - just bear with me so let's set this back
1142:44 - to a flex grow of 1. so we have 200
1142:47 - pixels of empty space now we don't
1142:50 - because 200 pixels got allocated
1142:53 - to flex item number one
1142:55 - now if we came down to flex item number
1142:57 - two which by default has a flex
1143:01 - flex
1143:02 - grow value
1143:04 - of zero
1143:06 - and if we set that to one here's what's
1143:09 - going to happen if we came down here to
1143:11 - flex item number two
1143:13 - uh the default value for flex grow is
1143:15 - going to be zero no changes as you see
1143:18 - but if we were to set this to one
1143:20 - you'll see that number 2 element gets
1143:23 - part of that empty space as well so now
1143:26 - 1 and 2 are going to be completely equal
1143:29 - now how do we get to this you know what
1143:31 - kind of calculation is happening here
1143:33 - i'm going to try to draw it out for you
1143:35 - so if we come to right over flex item
1143:37 - number one just make a comment
1143:40 - what we're going to do is take all of
1143:42 - the flex items within the container and
1143:44 - we're going to add up their flex grow
1143:47 - values so by default remember they are
1143:50 - are all set to zero
1143:52 - so
1143:53 - flex item number one has a value of one
1143:56 - as we set it right here let me close
1143:58 - this comment so we can see it correctly
1144:01 - so we have a value of one on flex item
1144:03 - one
1144:04 - a value of one on flex item two and then
1144:08 - by default the last two are set to zero
1144:10 - and zero
1144:12 - so the total of all that is going to
1144:14 - equal two
1144:16 - and what you can think of this as is two
1144:19 - units of empty space
1144:22 - so we'll say two units and you might ask
1144:24 - okay what is what unit are we measuring
1144:27 - this against well if you remember there
1144:30 - is
1144:32 - 200 pixels of empty space
1144:35 - and if we divide that by two allocated
1144:38 - units we get 100 pixels per unit
1144:42 - so each unit that we allocate is going
1144:45 - to be 100 pixels
1144:46 - but if we were to come down to flex item
1144:49 - number three and set a flex grow value
1144:51 - of 1
1144:52 - that changes it because now our total
1144:55 - sum we're going to add a 1 in there
1144:58 - and now we have a total of three units
1145:01 - we still have 200 pixels of empty space
1145:04 - but now we have to divide that by three
1145:06 - units and that should get us to
1145:08 - i'm not sure if i can do that math i
1145:10 - think that's a decimal actually so
1145:13 - 200 divided by 3 is going to be
1145:17 - 66.666
1145:22 - pixels
1145:23 - but if we come down to flex item number
1145:25 - 3 we set a flex grow factor of one
1145:29 - and then flex item number four and set a
1145:31 - flex grow factor of one now everything
1145:35 - changes so we have to update these
1145:37 - values in our sum so now it's one plus
1145:39 - one plus one plus one
1145:41 - so we have four units
1145:43 - and we still have 200 pixels of empty
1145:46 - space to allocate because
1145:48 - if you have four
1145:50 - items each 50 pixels wide that's 200
1145:52 - pixels empty space is 200 pixels in a
1145:55 - 400 pixel container so still have 200
1145:59 - pixels of empty space to allocate over
1146:01 - four total units
1146:03 - so we'll define divide that by four and
1146:06 - that's going to get us to
1146:08 - 50 pixels each per unit so what's
1146:11 - happening here is for each item in this
1146:13 - container we have an original size of 50
1146:15 - pixels
1146:17 - and then we allocate 50 pixels to that
1146:20 - of empty space so they're each going to
1146:22 - be 100 pixels
1146:24 - equal across the board and you can see
1146:27 - that if you click on here it's
1146:29 - 100.133 pixels
1146:32 - forget about the decimals here but
1146:34 - they're all equal so that's how that
1146:36 - works now it doesn't have to be a flex
1146:38 - grow value of one you can also give it
1146:41 - two or three or four it's all just
1146:44 - dependent on how many units you want to
1146:46 - allocate to each
1146:47 - flex item let's say that we gave flex
1146:50 - item number two a value of
1146:53 - we'll say four
1146:55 - or maybe maybe not four let's go with
1146:57 - three so that we have an even number
1146:59 - so now our calculation is one plus three
1147:02 - plus one plus one
1147:04 - is going to be 6 units
1147:07 - 200 pixels of empty space divided by 6
1147:10 - units i'm going to need a calculator for
1147:13 - that one so 200
1147:16 - divided by 6 is 33
1147:21 - pixels per unit so if we are giving
1147:25 - the second flex item three units of
1147:27 - empty space
1147:29 - in each unit of empty space is 33.33
1147:33 - that means that we're giving it an extra
1147:36 - you know
1147:37 - 99.9999 or 100 pixels so we take the
1147:40 - original width of 50 we add about a
1147:43 - hundred so we get 150 pixels wide for
1147:47 - the second item
1147:48 - let's check that see if we're in the
1147:50 - ballpark and you see that it's
1147:52 - 150.25 so that calculation worked
1147:55 - perfectly hopefully that explanation
1147:57 - made a little bit of sense just have to
1147:59 - think about it in allocated space
1148:02 - empty space and you can calculate the
1148:04 - two pieces by getting the total width of
1148:07 - your flex container
1148:09 - and then the total width of the items
1148:11 - within the flex container and then
1148:13 - breaking it out into units based on the
1148:15 - amount of empty space that we need to
1148:17 - allocate back out to the items now the
1148:20 - opposite applies when we have too many
1148:23 - items in our flex container
1148:25 - let me get rid of all these flex grow
1148:28 - values
1148:29 - so that we can get it back to normal
1148:32 - and then let me also uncomment
1148:35 - these
1148:37 - divs right here so that we have eight
1148:40 - total items
1148:42 - we know that that fits perfectly but
1148:44 - what if we put in nine so instead of
1148:46 - eight we have nine which means we've
1148:49 - added an extra one in there which means
1148:52 - that we have 50 pixels of overflow so
1148:55 - remember each one's 50 pixels wide 50
1148:58 - pixels times 8 is going to be 400 pixels
1149:01 - which is equal to the total
1149:03 - available space within our flex
1149:05 - container
1149:06 - so by adding a ninth we are making the
1149:09 - total amount of flex items
1149:11 - 450 pixels wide
1149:13 - versus the 400
1149:16 - available space so we have 50 extra
1149:18 - pixels of overflow similar to how we
1149:21 - allocate
1149:22 - out empty space to flex items we can
1149:25 - also reduce the size of flex items by
1149:28 - the amount of overflow that we have so
1149:31 - if you look at this container you're
1149:33 - going to see that by default they all
1149:35 - fit within the container when we add
1149:38 - that ninth item and the reason is
1149:40 - because all of them actually
1149:43 - shrunk a little bit when we put put that
1149:45 - ninth item in there
1149:47 - the reason that they shrunk is because
1149:49 - by default every flex item is going to
1149:52 - have a flex shrink value of one
1149:56 - so if i put that in for flex item number
1149:58 - one you will not see any change because
1150:00 - that's already the default it's already
1150:02 - shrinking by
1150:04 - one unit
1150:05 - so we know how to calculate those units
1150:08 - you basically take the overflow just
1150:10 - like we took the empty space with the
1150:12 - flex grow
1150:13 - so if we have 50 pixels of overflow
1150:17 - let's let's change this right here to 50
1150:20 - pixels of overflow and then we have to
1150:22 - ask ourselves how many units we're
1150:24 - allocating that across
1150:26 - by default each flex item is going to
1150:28 - have a flex shrink value of one so that
1150:31 - means that each flex item should be
1150:34 - allocated equal overflow
1150:36 - in other words we have to do one plus
1150:39 - one plus one all the way to nine
1150:42 - so we have
1150:44 - nine total units
1150:46 - i'm just going to get rid of this
1150:47 - because you get the point here so we
1150:49 - have nine total units with 50 pixels of
1150:52 - overflow so we divide 50 pixels by nine
1150:55 - and that's going to give us i believe
1150:57 - 5.33 pixels
1150:59 - per unit let me check that real quick
1151:02 - so 50 divided by 9
1151:05 - equals no it's not 5.33 it's 5.55 pixels
1151:10 - per unit in other words we're going to
1151:12 - take the original width of these items
1151:14 - which was 50 pixels and we're going to
1151:16 - subtract off 5.55 pixels from that 50.
1151:20 - so in theory each item should be 44.45
1151:25 - pixels
1151:26 - wide so let's inspect the element we'll
1151:29 - go to any of these here and you're going
1151:31 - to see 44.5 pixels wide
1151:34 - pretty much exactly what we just
1151:35 - calculated
1151:36 - now this is where the the firefox
1151:39 - devtools comes in handy so if you click
1151:41 - on one of these items it's going to pop
1151:44 - up in the layout section
1151:45 - exactly how this shrink operation worked
1151:49 - so
1151:50 - you can see the flexibility has a flex
1151:52 - shrink of one
1151:53 - and that's going to say minus five and a
1151:55 - half pixels which is what we just
1151:57 - calculated so it's going to take the
1151:59 - 28.5 pixels which is the inner content
1152:02 - width
1152:03 - uh subtract off five and a half pixels
1152:06 - to get down to 23 pixels
1152:09 - and then you add back in the natural
1152:11 - padding and border that um is set on
1152:14 - these items to get your total width of
1152:16 - what we calculated as 44 and a half
1152:18 - pixels now this brings up a good point
1152:21 - because if you look at this model right
1152:23 - here
1152:24 - you're going to see that each item has
1152:28 - a minimum content width
1152:30 - so if you try to shrink something too
1152:32 - much
1152:33 - then it's going to make it so that it
1152:36 - will kind of get capped out it won't
1152:38 - shrink past the minimum value of its
1152:40 - content i'll show you exactly how this
1152:42 - works all we have to do is add in a few
1152:44 - more
1152:47 - a few more flex items so let's add one
1152:49 - more for good measure
1152:51 - and what we see here is that they're
1152:53 - clearly breaking out of that container
1152:56 - now just like we saw earlier
1152:58 - when we looked at this and we tried to
1153:00 - wrap them onto the next line
1153:02 - now from the flex shrink perspective
1153:04 - these are breaking out of the container
1153:06 - because
1153:07 - while they have you know calculated the
1153:09 - total overflow space and then allocated
1153:12 - that out
1153:13 - to each of the flex items the total
1153:15 - amount of overflow is going to be
1153:17 - greater than the um
1153:20 - basically it's going to make them shrink
1153:21 - smaller than their minimum values which
1153:23 - is not possible let's see if we can
1153:25 - calculate this just for funds we have 1
1153:27 - through 9 10 11 12 so we have 13 total
1153:31 - flex items which are all supposedly 50
1153:34 - pixels wide
1153:36 - so if you do 13 times
1153:39 - 50
1153:41 - let's see what that is so that's 650
1153:43 - pixels and if you subtract the 400
1153:47 - pixels that the container width is you
1153:50 - get 250 pixels so our overflow that
1153:53 - we're dealing with now is going to be
1153:55 - 250 pixels
1153:57 - and we have 13 units to
1154:00 - allocate it over
1154:02 - so we need to divide that by 13 and what
1154:05 - that's going to give us is
1154:08 - let's see
1154:09 - 19.23
1154:13 - pixels per unit
1154:15 - so we're going to have to subtract we're
1154:17 - going to have to basically say let me
1154:19 - break down onto the next line just so
1154:21 - we're clear we're going to take the
1154:22 - original width
1154:24 - minus
1154:25 - 19.23 pixels
1154:27 - and what that's going to equal
1154:30 - is let me see
1154:32 - 30.
1154:35 - pixels
1154:36 - so theoretically we would just take all
1154:39 - that overflow and subtract it from the
1154:42 - original sizes
1154:44 - to get us to a total width of 30.77
1154:47 - pixels but if we inspect element and we
1154:50 - click on any of these here
1154:52 - you're going to see that this little min
1154:55 - property popped up so it says the
1154:58 - minimum size of this element is going to
1155:00 - be 12 pixels so that the minimum inner
1155:03 - content is 12 pixels and when you add on
1155:06 - the padding and the border of each of
1155:09 - these elements that's going to break you
1155:12 - over
1155:13 - that value that we had calculated here
1155:16 - so it's basically going to be
1155:18 - uh
1155:19 - the the content itself is going to be
1155:21 - too big to shrink that much hopefully i
1155:24 - haven't lost you here um try to lay out
1155:27 - this in a logical manner um and i know
1155:30 - there's a lot of detail it's definitely
1155:32 - not totally necessary but i really think
1155:35 - knowing this kind of stuff and how this
1155:36 - is calculated is is that extra step that
1155:39 - you have to take as a developer to
1155:40 - really
1155:41 - um understand what you're doing and be
1155:43 - able to debug things and understand okay
1155:46 - why is this breaking out of the flex
1155:47 - container why won't this shrink enough
1155:50 - you know those kind of questions let's
1155:52 - do one more um
1155:54 - practice problem here i guess you could
1155:56 - call it so let's go back to nine
1155:58 - elements which are gonna naturally fit
1156:00 - within this
1156:02 - but at the moment they're each being
1156:03 - allocated what was it 5.55
1156:07 - pixels so 50 minus 5.55 to get it shrunk
1156:11 - down to fit
1156:12 - now if we wanted to allocate it only to
1156:15 - certain items we can change the defaults
1156:18 - so
1156:20 - let's go ahead and say that we want the
1156:22 - first three items of this flex container
1156:25 - to keep their 50 pixel width now the way
1156:28 - that we would do that is we'd go to item
1156:31 - 1 and we'd set a flex
1156:33 - shrink value of 0 which is not the
1156:36 - default
1156:37 - and we'll copy that down to two and
1156:40 - three and now you'll see that each of
1156:41 - these get wider and if we inspect them
1156:44 - they're each going to be 50 pixels wide
1156:46 - while the remainder are going to absorb
1156:49 - that overflow space by shrinking so just
1156:52 - a quick review if the total width of the
1156:55 - items the flex items in the flex
1156:57 - container do not equal the total flex
1157:00 - container so if there's not enough items
1157:03 - flex grow is going to be what applies
1157:06 - and that empty space is going to be
1157:08 - allocated based on the flex grow values
1157:11 - if the overflow happens so if there's
1157:13 - more items that can fit in the flex
1157:16 - container then the flex shrink will
1157:18 - apply and based on the flex shrink
1157:21 - values of each item
1157:22 - determines how that overflow space is
1157:25 - going to be allocated out the last
1157:28 - property
1157:29 - with all this sizing that we have to
1157:31 - talk about is flex basis let me get our
1157:34 - container
1157:35 - back to
1157:37 - a spot where we only have four so let me
1157:40 - i'll just comment out those just in case
1157:42 - we need them later
1157:43 - so now we have four items which are
1157:45 - explicitly set to 50 pixels wide each
1157:48 - so we set each of them to 50 pixels wide
1157:51 - 50 pixels tall
1157:53 - now if we wanted to change those
1157:55 - dimensions we can actually do that using
1157:58 - a flex item property let's go to the
1158:00 - first flex item and set the flex basis
1158:04 - to equal 40
1158:07 - what you'll see is that this first item
1158:09 - gets a lot wider and it's not because
1158:12 - it's trying to fill the empty space it's
1158:14 - because it's respecting this flex basis
1158:17 - property
1158:18 - over the width property that we set
1158:20 - earlier
1158:21 - so by default this flex basis is
1158:24 - actually set to auto
1158:26 - and when it's set to auto
1158:28 - what that is basically saying is set to
1158:31 - flexbox is go ahead and look for the
1158:33 - width and height properties
1158:35 - and if you find them
1158:37 - respect those properties as the width
1158:39 - and height of the flex items if you
1158:42 - don't find them go ahead and size the
1158:45 - flex items based on the inner content
1158:47 - and that's the default for flex basis
1158:49 - but you can also assign pixel units and
1158:52 - percentage units to the flex bases to
1158:54 - override the width and height of your
1158:57 - flex items this unlocks a lot of
1158:59 - possibilities and depending on how you
1159:01 - use them with flex grow and flex shrink
1159:04 - you can get a bunch of different
1159:05 - combinations so if i was looking at this
1159:08 - flex box right here i have the four
1159:10 - items each 50 pixels wide and let's say
1159:13 - that i wanted to make them even widths
1159:16 - and span them across the whole container
1159:19 - one way that i could do that is by
1159:20 - coming to each of the flex items and
1159:23 - setting the flex grow to be equal to one
1159:26 - and what that's going to do is equally
1159:29 - allocate the empty space as we just
1159:31 - talked about so that's one way to do it
1159:34 - now we could also backtrack a little bit
1159:36 - and instead of doing that we can set the
1159:38 - flex basis
1159:40 - to 25
1159:42 - on each of the items and that's going to
1159:44 - equally
1159:45 - give width to each of the items and give
1159:47 - you the same exact result now if we come
1159:49 - in and try to set the
1159:51 - you know flex grow property on one of
1159:54 - the items it's not going to change
1159:56 - because the flex basis is going to take
1159:58 - precedence over that but in some cases
1160:01 - maybe you don't set the flex basis
1160:04 - property on all of the items to equal
1160:06 - 100 percent
1160:07 - so in this case we've given each of them
1160:10 - 25 which adds up to 100 so it's going to
1160:12 - fill the whole container but let's say
1160:14 - that we for the first item we give it 10
1160:17 - percent so we're going to be missing 15
1160:20 - percent of the container and let me let
1160:23 - me delete that for a second so
1160:25 - now we just have flex basis properties
1160:28 - and they sum up to what 85
1160:31 - if i'm calculating that correctly so
1160:33 - there's some empty space here on the
1160:35 - right it doesn't fully fill the
1160:37 - container but now if i put on the
1160:40 - flex
1160:41 - grow property
1160:43 - and set it to 1 that first element is
1160:46 - going to take the remaining space and
1160:47 - we're back where we started so
1160:49 - essentially
1160:50 - setting uh flex bases of 25 on the last
1160:53 - three
1160:54 - and 10
1160:55 - plus a flex grow of one is the same as
1160:58 - just doing flex basis of 25 on all of
1161:01 - them
1161:02 - so many ways to get to the same answer
1161:04 - the last thing we'll talk about is the
1161:06 - order of the items along the main axis
1161:08 - in our flex container
1161:10 - so
1161:11 - if you wanted to change
1161:13 - uh swap these out so maybe you wanted to
1161:15 - put number two in number one's place
1161:18 - you could do that all you have to do is
1161:20 - come up to the html and put number two
1161:23 - before number one
1161:25 - and that should just flip them
1161:27 - but if in flexbox you don't even have to
1161:30 - do that you can actually flip those with
1161:32 - css so if i came down to
1161:36 - the css and i looked at flex item number
1161:38 - one and i gave it an order of two
1161:41 - and then i gave flex item two in order
1161:44 - of one
1161:45 - now you're going to see that
1161:47 - these are flipped and hold on i think
1161:50 - the reason that this is not working is
1161:51 - because you have to set them on all
1161:53 - so we'll set the order on three as three
1161:56 - in the order on four as four so the
1162:00 - three and four have their natural order
1162:02 - but then two and one are going to be
1162:04 - flipped
1162:05 - so if you set order on all of the flex
1162:07 - items you can determine
1162:09 - you know the order that they come in
1162:11 - now you might ask why is this useful
1162:13 - well in many cases it's really not
1162:15 - useful you might as well just change the
1162:17 - order of your html and be done with it
1162:19 - but if you are designing responsively
1162:21 - which we talked about in a prior video
1162:24 - i think was just the previous video
1162:27 - as you're resizing your browser you may
1162:29 - want different elements on the page to
1162:31 - go in different orders so say you have a
1162:34 - nav bar at the top you've got main
1162:36 - content a sidebar and a footer
1162:39 - maybe you want to order those
1162:40 - differently
1162:42 - whether you're on a desktop or a mobile
1162:44 - device
1162:45 - and this would be how you would do that
1162:47 - is you'd set a media query so you might
1162:49 - come down and say at media
1162:52 - and we'd say like min width of 600 px or
1162:56 - something like that
1162:57 - and then in here you could probably set
1162:59 - the flex
1163:02 - item number four
1163:05 - to have an order of one
1163:08 - and then we'll say
1163:09 - a flex item 1
1163:12 - will be
1163:13 - in order of
1163:15 - 4 something like that so as we are
1163:18 - getting bigger than 600 px that's how
1163:20 - that's going to
1163:22 - show but as we shrink it you'll see that
1163:24 - those flip so we can resize and order
1163:27 - them differently based on different
1163:28 - screens at this point you've learned
1163:30 - pretty much all of the main properties
1163:32 - of flexbox now of course there's some
1163:34 - shorthand properties that can make your
1163:36 - life easier so instead of
1163:39 - you know setting the flex basis and the
1163:41 - grow and the shrink values
1163:43 - what you can do is
1163:45 - come in and just say flex and then the
1163:47 - first value is going to be the flex grow
1163:50 - so maybe you want to set that to
1163:52 - one and then the second one's flex
1163:54 - shrink you might set that to one and
1163:56 - then the third one is going to be flex
1163:58 - basis which is set to auto
1164:00 - so this is a shorthand way
1164:02 - of writing flex grow flex shrink and
1164:05 - flex basis all in one line
1164:07 - so that's just a shorthand property but
1164:09 - not necessary i wouldn't even recommend
1164:11 - using those until you're very
1164:13 - comfortable with flexbox
1164:15 - well this is actually a brand new day
1164:18 - same hat same hoodie whatever but
1164:20 - i forgot to add the last part to this
1164:23 - video which is actually taking this
1164:26 - previous challenge that we had solved
1164:28 - so
1164:29 - as you're following along with the full
1164:30 - stack roadmap we solved this pricing
1164:33 - card challenge as a part of
1164:36 - the original html and css tutorials and
1164:39 - then also made it responsive in the
1164:42 - prior video on responsive web design
1164:45 - what i want to do to wrap up this video
1164:46 - is take this design and make it with
1164:50 - flexbox instead of how we did it before
1164:53 - so if i'll remind you just for a moment
1164:57 - what we had to do
1164:58 - to get these bottom left and bottom
1165:00 - right sections
1165:02 - sitting next to each other with a 50
1165:04 - width with something a little bit hacky
1165:07 - um if we come up to the html
1165:10 - um you'll see right here
1165:12 - so this line doesn't look you know all
1165:15 - that spectacular but
1165:17 - what you'll see is we've got a closing
1165:19 - div right here that corresponds to the
1165:21 - bottom left section
1165:23 - div
1165:24 - and then the starting div for the bottom
1165:27 - right section is sitting right next to
1165:29 - it which when you're looking at html
1165:32 - that's generally not very good syntax
1165:34 - and that was kind of a hack that we used
1165:36 - to remove the white space
1165:38 - and allow for the fact that we had 50
1165:40 - widths on both of them so if i were to
1165:43 - enter this down
1165:44 - one line just for formatting sake
1165:47 - you'll see that the bottom right uh
1165:50 - piece of the card actually disappears
1165:52 - and that's because it's going underneath
1165:54 - that bottom left card and then we're
1165:56 - hiding the overflow
1165:58 - as you'll see in the css for the main
1166:01 - card so we've got overflow hidden so if
1166:04 - we take that off you'll see it pop up
1166:06 - below here so
1166:09 - that's what's going on and we can solve
1166:11 - this very easily using flexbox and get
1166:14 - rid of all of our hacky solutions that
1166:16 - we had before
1166:18 - now to make this a little bit simpler
1166:20 - for us to see exactly how this is
1166:22 - working
1166:23 - let's go back to our layout example this
1166:26 - is what we had used to originally build
1166:29 - the card so that we could see what we
1166:30 - were dealing with
1166:32 - and we didn't have to confuse ourselves
1166:34 - with all the different styling while
1166:36 - we're just trying to focus on layout
1166:39 - it isn't pretty but
1166:41 - it will work for our layout purposes at
1166:43 - least
1166:44 - and what you'll see is i've come down
1166:46 - and added a media query this is from the
1166:49 - prior video if you haven't watched that
1166:51 - we talk about responsive design and
1166:53 - media queries so basically what we're
1166:55 - saying is in this block we want to apply
1166:59 - certain styles to any
1167:02 - uh device that is greater than 500 or
1167:05 - greater than or equal to 576 pixels
1167:09 - as you'll see when we shrink this it
1167:11 - changes the layout and then when we go
1167:14 - above 576 then these two
1167:18 - style selectors will apply
1167:20 - and you'll see that the width and the
1167:22 - height of the card gets applied and then
1167:25 - the bottom left and bottom right section
1167:28 - are going to get a 50 width each
1167:31 - now with flexbox this is relatively
1167:33 - simple
1167:34 - all we have to do is if we're looking at
1167:36 - this entire card here
1167:38 - it's composed of a top section and a
1167:41 - bottom section with two left and right
1167:44 - sub bottom sections
1167:46 - and what we want to do is on the desktop
1167:49 - device so
1167:50 - this what we're looking at right here
1167:53 - we want to have
1167:54 - those bottom sections in one row and
1167:57 - then when we shrink it to mobile
1167:59 - we want it to come into a column so if
1168:02 - you remember from just a few minutes ago
1168:04 - we talked about the flex direction where
1168:06 - we can take the main axis and change it
1168:09 - based on that flex direction
1168:11 - so what i'm thinking is that for a
1168:13 - desktop device we want flex direction
1168:16 - equal to row so that these two go right
1168:18 - next to each other and then on a mobile
1168:21 - device we want it to be in a column
1168:23 - so the way that we do that since we're
1168:25 - designing mobile first here
1168:27 - is we come up to all the main styles
1168:29 - here and we go to the
1168:33 - bottom section because that's what we
1168:35 - want to turn into a flex container we
1168:38 - don't necessarily want to turn the whole
1168:40 - card into a flex container because the
1168:42 - top the top section is actually fine
1168:44 - and it would be overkill to put a
1168:47 - flexbox container on it but the bottom
1168:50 - section is not so let's go into the
1168:52 - bottom section and type display flex
1168:57 - and what you'll see is i believe nothing
1169:00 - will happen at the moment because we're
1169:02 - in the desktop view but let's go ahead
1169:05 - and go to the mobile view and now we've
1169:07 - got some things messed up because we're
1169:09 - designing mobile first so right now
1169:10 - we're working on the mobile device
1169:12 - so these are still sitting next to each
1169:14 - other and all we have to do to change
1169:16 - that is set the flex direction
1169:19 - to column
1169:21 - and you'll see that they jump right
1169:23 - above each other
1169:25 - that's pretty much it when it comes to
1169:27 - the mobile design of this
1169:30 - let's see if we can find anything that
1169:32 - we can remove now um
1169:35 - i believe we can remove this
1169:38 - vertical line okay we're going to get to
1169:40 - this we'll actually get to this let's
1169:42 - get the design right first and then we
1169:45 - will worry about that so at the moment
1169:47 - we set the flex direction to column and
1169:50 - because of that because we're designing
1169:51 - mobile first
1169:53 - that is also going to apply to the
1169:55 - desktop design unless we change it in
1169:58 - our media query
1169:59 - so let's do that we'll say bottom
1170:02 - section
1170:03 - and we'll give it a flex direction
1170:06 - of row again so the default so now as we
1170:10 - resize
1170:11 - we get a very similar result and we're
1170:14 - actually pretty much done
1170:16 - but we have some redundant styles that
1170:19 - we can actually remove now that we're
1170:21 - using flexbox and this is where
1170:24 - the nice
1170:25 - parts of flexbox come in you don't have
1170:27 - to write as much css so we can remove
1170:30 - the bottom left and bottom right section
1170:32 - widths
1170:34 - and i believe that may
1170:36 - screw us up a bit
1170:39 - after we change a few things hold on
1170:41 - i think we need to change uh let's
1170:43 - remove the display inline block on the
1170:46 - bottom left section
1170:48 - in the bottom right
1170:49 - uh we will remove the 100
1170:52 - width and we'll remove the vertical
1170:55 - align top
1170:58 - so we don't need those anymore but what
1171:00 - you'll notice is now we've got this
1171:01 - screwed up and that is by design that's
1171:04 - not
1171:05 - surprising let's make sure our mobile is
1171:07 - still working so we're good here
1171:10 - mobile's still working but desktop has a
1171:12 - little bit of work
1171:14 - and if you remember the bottom section
1171:16 - is our flex container
1171:18 - which means based on the html here if
1171:21 - we're looking at it the bottom section
1171:24 - has two direct children it has the
1171:26 - bottom left section and the bottom right
1171:28 - section and we can actually enter this
1171:30 - down on to its new line now that we're
1171:32 - using flexbox we don't have to have that
1171:34 - hack
1171:35 - but anyways the bottom left and right
1171:37 - section are the children
1171:39 - so therefore
1171:40 - these two style
1171:43 - selectors are going to be the flex items
1171:46 - in this desktop view
1171:49 - we have the flex direction set to row
1171:52 - which means that those that bottom
1171:54 - section has a main axis that is going
1171:56 - horizontal and if you remember from a
1171:58 - few minutes ago the way that we resize
1172:01 - the flex items along the main axis is
1172:04 - going to be
1172:05 - one of two ways we can use the flex grow
1172:08 - property
1172:09 - or we can use the flex basis
1172:12 - so let's come in here and just try both
1172:14 - of them just so i can show you we'll
1172:16 - start with the flex basis it may be a
1172:18 - little more straightforward
1172:20 - so if you put in 50
1172:22 - on the bottom left section
1172:24 - and then you say flex basis 50 on the
1172:27 - bottom right section
1172:28 - we have completed the card it looks
1172:30 - great and as we resize it it's still
1172:33 - going to work so that's one solution
1172:36 - another solution
1172:38 - is we could come in and we could say
1172:40 - flex grow set that equal to one
1172:43 - and
1172:45 - flex grow
1172:46 - equal to one on the bottom right section
1172:48 - and this should work just fine too
1172:51 - now going directly from flex basis to
1172:53 - flex grow will not really illustrate
1172:55 - that point let's get rid of the flex
1172:57 - grows for just a second so that we can
1173:00 - conceptualize
1173:01 - by default these two
1173:04 - sub containers down here
1173:05 - have a natural width because we haven't
1173:08 - given them we haven't given them an
1173:09 - explicit width so they're going to take
1173:11 - the content with
1173:12 - the content sitting within them as you
1173:15 - can see is
1173:17 - filling the entire width of their
1173:18 - container
1173:19 - now these do not fill up the entire
1173:22 - section we've got this empty space here
1173:24 - on the right
1173:25 - and the flex grow property is what
1173:27 - applies when we have that empty space
1173:30 - and so basically what we're going to do
1173:31 - when we enable the flex grow one
1173:33 - properties
1173:35 - like we talked about is we're going to
1173:36 - split up that space just give it one
1173:39 - unit to the bottom left section in one
1173:41 - unit to the bottom right and therefore
1173:43 - it's going to be
1173:44 - i believe perfectly equal or it actually
1173:47 - may not be perfectly equal it may just
1173:49 - be a coincidence that the content is a
1173:52 - similar width
1173:53 - let me make sure that that's correct
1173:55 - so let's just enable these and we can
1173:58 - check
1173:58 - in the dev tools
1174:00 - so let's inspect
1174:05 - and let's see what we're dealing with so
1174:07 - this one is 263
1174:10 - pixels
1174:11 - wide
1174:12 - this is 276 pixels wide so
1174:16 - glad we looked at this i actually was
1174:18 - not thinking about this correctly
1174:21 - the correct solution here is probably
1174:23 - going to be the flex basis of 50
1174:26 - it just looks like they're equal when we
1174:29 - use the flex grow because they're
1174:31 - similar widths by
1174:33 - default like naturally the content has a
1174:35 - similar width in both sections
1174:38 - but if i close out the dev tools
1174:41 - and let's say i came up here and just
1174:44 - added a bunch of content to one of the
1174:46 - list items in the bottom right
1174:49 - you'll see that now that flex grow is
1174:52 - not working quite as well because we're
1174:55 - not giving them equal widths we're
1174:57 - growing them based on their natural size
1175:00 - so
1175:00 - i stand corrected that is not the
1175:02 - correct way to do it
1175:05 - flex grow at least
1175:07 - i think flex basis is by far the most
1175:09 - reliable way to
1175:11 - split these into equal containers
1175:14 - so we'll go with that and call it a day
1175:16 - i think we have solved this
1175:20 - to my liking so this is the basic layout
1175:23 - and then as we shrink it goes down to
1175:24 - mobile
1175:25 - so as we come over to here
1175:28 - back to our card
1175:29 - and let me
1175:32 - let me bring this guy back up so that we
1175:33 - can see
1175:35 - everything
1175:36 - working okay
1175:37 - so there's our card now we got to turn
1175:39 - this into a flex box and
1175:43 - we'll do exactly what we just did in the
1175:45 - layout example
1175:47 - so if you remember we came down
1175:51 - we didn't need
1175:53 - any of that
1175:54 - we did need a bottom
1175:56 - section
1175:57 - we wanted the flex direction to be row
1176:00 - on a desktop device
1176:03 - and then in the bottom
1176:04 - section we need to display flex
1176:08 - set the flex direction to column
1176:13 - and let's see what we got here
1176:15 - looks good
1176:16 - now we just wanted to remove on the
1176:18 - bottom left and bottom right sections i
1176:21 - know there's a lot more styles here
1176:23 - we don't need this guy
1176:26 - we don't need the vertical lines
1176:28 - we don't need the width
1176:31 - all we have to do is add a flex basis of
1176:34 - 50 percent on each of these
1176:39 - so we're looking good there and i
1176:41 - believe we have solved it
1176:44 - i don't think there's anything that we
1176:46 - did otherwise
1176:47 - now there's just one more thing that i
1176:49 - want to show you with this that we can
1176:51 - use flexbox for as you see this 29 per
1176:54 - month
1176:55 - these are sitting next to each other and
1176:57 - whenever you have horizontal content
1176:59 - it's usually a decent
1177:02 - use case for flexbox
1177:04 - let's look at the html that we
1177:06 - set this up with
1177:08 - so you'll see that we have a price
1177:09 - container
1177:11 - that would be
1177:12 - the overall parent and then that parent
1177:15 - has two children items so
1177:17 - if we turned price container into a flex
1177:20 - container
1177:21 - then the price and the price frequency
1177:23 - would therefore become the flex items
1177:26 - let's find that in our css so here's the
1177:29 - price container we've just set a margin
1177:31 - on it so that's probably going to stay
1177:34 - the same even with the flex container
1177:37 - but then we also have
1177:40 - price and price frequency which looks
1177:42 - like we have styled right above it
1177:45 - so let me let me just
1177:47 - change the order of this because it
1177:48 - makes a little more sense to have the
1177:50 - container on top
1177:52 - and what we're going to do is set
1177:53 - display flex
1177:56 - by default it's going to be
1177:58 - set to row
1177:59 - so
1178:00 - it will put them next to each other
1178:03 - let's get rid of all the styles that we
1178:05 - have within these i don't think that we
1178:08 - need
1178:09 - any of them except for
1178:12 - maybe the font size and the opacity
1178:14 - because those are not layout related
1178:16 - properties
1178:18 - so
1178:19 - here's our starting point and you can
1178:21 - see that by default even after we
1178:23 - removed all those styles
1178:25 - that display flex making that whole
1178:28 - container a flex container is going to
1178:30 - still put them next to each other
1178:33 - now let's just back up and remember
1178:35 - exactly what's going on here
1178:37 - we have
1178:38 - some html where we have a price
1178:40 - container and then we have two items
1178:43 - within it so we have a flex container
1178:45 - and two flex items
1178:46 - by default we've set this to display
1178:49 - flex which makes the main axis on the
1178:51 - horizontal so in a row
1178:54 - and therefore if we want to align
1178:57 - things along the main axis we use
1178:59 - justify content if we want to align them
1179:02 - on the cross axis we use align items
1179:06 - as you can see
1179:07 - the per month is a little bit misaligned
1179:10 - with that 29 dollars
1179:12 - an easy way to fix that is to come on to
1179:16 - the price container
1179:18 - set the align items and set those to
1179:20 - center
1179:21 - you'll see that that perfectly centers
1179:24 - those two right next to each other and
1179:26 - that's a much better solution than what
1179:28 - we did before where we set the position
1179:30 - to relative
1179:31 - and then we set it negative three pixels
1179:34 - to just pull it up a little bit the last
1179:37 - thing we have to do as you'll notice
1179:39 - there's no spacing between these
1179:42 - and there's no
1179:43 - real solution here with the flexbox i
1179:46 - mean we could come in here
1179:49 - and justify content
1179:51 - and say something like space between but
1179:54 - you'll see that that's going to space it
1179:55 - out way too much so that's not really
1179:58 - going to help us
1179:59 - so really the best way to do this is
1180:02 - just come on to the
1180:03 - [Music]
1180:04 - either the price frequency or the price
1180:07 - item and set a margin
1180:09 - so we don't even need this style anymore
1180:12 - since this is already written the price
1180:14 - frequency we can just use this
1180:17 - and all we have to say because this is
1180:19 - the um per month piece all we have to
1180:22 - say is margin left and give it something
1180:25 - like five pixels and that spaces it out
1180:28 - nicely very easy and straightforward so
1180:31 - there you have it that is how we solve
1180:33 - this with
1180:35 - a mobile first fully responsive solution
1180:38 - with flexbox and it shrinks and gets
1180:42 - bigger
1180:43 - and it looks great on all devices
1180:48 - in this video we're going to be building
1180:50 - a testimonials grid and we're going to
1180:52 - be doing it with a mobile first
1180:54 - responsive design
1180:56 - solution and we're also going to be
1180:58 - using flexbox my goal in this video is
1181:01 - to not only solve this
1181:03 - challenge on front-end mentor but also
1181:06 - to apply those skills that we've learned
1181:08 - in previous lessons so that you can
1181:10 - really start to use them in the real
1181:12 - world lastly i'm going to be adding in a
1181:14 - few extra pieces to the puzzle so
1181:17 - throughout this series we have been
1181:19 - using codepen which is just a nice
1181:23 - environment where we have html css and
1181:26 - javascript all in one place all hooked
1181:28 - up and ready to go since this challenge
1181:31 - is relatively straightforward and you'll
1181:33 - see as we walk through it
1181:35 - i want to also add in the concept of a
1181:38 - code editor so we're going to be
1181:40 - downloading and using visual studio code
1181:43 - and then we're also going to be doing a
1181:46 - little bit of version control and i'm
1181:48 - not going to get
1181:50 - super detailed into it uh quite yet but
1181:53 - i'm gonna show you the commands that you
1181:55 - have to run to get your
1181:57 - design pushed up to github and deployed
1182:00 - to the github pages so that you can you
1182:02 - know share a url with others of what you
1182:05 - built but don't worry the only
1182:07 - prerequisites that you really need are
1182:09 - going to be html css and make sure
1182:12 - you've watched my flexbox in responsive
1182:14 - design videos let's get started
1182:17 - if we come up to front end mentor this
1182:19 - is the challenge that we are going to be
1182:21 - creating
1182:22 - and i've already started it so i don't
1182:24 - need to click here so let me go to my
1182:26 - challenges
1182:28 - or i guess profile
1182:30 - my challenges
1182:32 - and then testimonials grid section
1182:36 - so from here you can download the
1182:38 - starter files
1182:40 - so we'll do that
1182:42 - it's going to pop up on another screen
1182:44 - for me so once you've downloaded your
1182:46 - files
1182:47 - make sure that you have visual studio
1182:49 - code downloaded it's just a code editor
1182:52 - and i actually made a whole video on
1182:55 - code editors you can check it out up
1182:56 - here
1182:57 - of which ones i recommend and why
1183:00 - so obviously visual studio code would be
1183:02 - one of those so go ahead and download
1183:04 - that
1183:05 - and once you've downloaded it open up a
1183:08 - brand new window from here you're going
1183:10 - to want to click file
1183:12 - um open a folder and then go find the
1183:16 - testimonial challenge starter pack that
1183:19 - you just downloaded so i've got it
1183:21 - selected
1183:23 - and this is going to open me up into
1183:26 - the workspace as we start looking at the
1183:29 - starter files if you open up index html
1183:33 - which is what we're going to
1183:35 - actually be working on
1183:37 - you can see that there's all sorts of
1183:39 - text already in here
1183:41 - and luckily we have a lot of the
1183:43 - testimonials that we will need
1183:45 - they're not really implemented in
1183:48 - html elements but it's good to just have
1183:50 - this text ready to go now just to relate
1183:52 - this back to what we've been using with
1183:54 - codepen
1183:56 - this index.html
1183:57 - is basically the same as this html box
1184:00 - here in codepen it's just
1184:02 - um on our local computer it's in our
1184:04 - local file system rather than up in the
1184:06 - cloud now your first question is
1184:08 - probably well how do we actually view
1184:11 - this html document in the browser now
1184:14 - remember html and css they are only
1184:16 - displayed in the browser therefore we
1184:18 - need a web browser to look at this
1184:22 - the way that we do that is
1184:24 - you actually have a couple options i'll
1184:26 - show you the most bare bones option
1184:29 - first and then we'll go into what we're
1184:30 - actually going to be using to solve this
1184:33 - challenge to view an html document in
1184:35 - the browser all you have to do is go to
1184:38 - your file explorer i'm on windows but
1184:40 - this works the same on mac or linux
1184:44 - and just go to the folder that you have
1184:46 - it saved in
1184:47 - and then find the
1184:48 - index.html file
1184:51 - you'll notice that it does not say index
1184:53 - dot html as you see over here
1184:56 - and that is because the file type over
1184:59 - here is chrome html document so it
1185:01 - doesn't display it here in the name
1185:04 - if you right click
1185:06 - and go down to open with
1185:09 - you can choose a browser to open it in
1185:11 - so i might just say google chrome
1185:14 - and when we click that it should have
1185:17 - opened it up if i go back to my browser
1185:20 - it should open it up in google chrome
1185:22 - and there's a lot of text here and
1185:24 - that's because we have to actually
1185:26 - implement this design but this is the
1185:28 - html document that we're looking at
1185:31 - and you can see
1185:32 - up in the um
1185:34 - url bar we're actually looking at our
1185:37 - local c drive um now on mac and linux
1185:41 - this is going to look a little bit
1185:42 - different
1185:43 - but it's the same concept it's just the
1185:46 - local path to that file displayed in the
1185:48 - browser now i'm going to point out a few
1185:51 - things here that might be interesting to
1185:53 - you
1185:53 - the first thing you see this little icon
1185:56 - up here in the top left
1185:58 - portion of the tab
1186:01 - this is a little front-end minor logo or
1186:03 - favicon
1186:05 - you might be wondering well how did that
1186:06 - get there
1186:07 - well the way that we put that there is
1186:09 - if we come back to our files
1186:13 - and we look at this link tag right here
1186:17 - this is actually
1186:19 - putting in that favicon up into the
1186:22 - title here's some metadata about it some
1186:25 - sizing but here's the really important
1186:28 - attribute which is the href and what
1186:30 - we've passed in is a relative path we'll
1186:34 - learn a lot more about
1186:35 - absolute and relative paths coming up
1186:38 - when we start working in the terminal a
1186:40 - little bit more
1186:41 - but all this is saying is i want to look
1186:43 - relative to the current directory into
1186:46 - the images folder over here
1186:48 - and then drop that down and grab me the
1186:51 - favicon
1186:52 - 32x32 png
1186:54 - and we can open that up and see the
1186:56 - little icon that we have and that
1186:59 - matches
1187:00 - the icon that we see up in the tab
1187:03 - furthermore in the index.html we've got
1187:06 - the doctype that's important
1187:09 - for just html boilerplate and then i'm
1187:12 - actually going to indent this for us so
1187:14 - we can see it a little bit better we
1187:16 - have the head tag which is pretty
1187:19 - standard for an html document here are
1187:21 - some meta
1187:23 - tags that help with displaying the site
1187:25 - in the browser properly these are just
1187:28 - pretty standard defaults that you might
1187:30 - put in
1187:31 - and then of course the link we just
1187:32 - talked about now the title tag
1187:35 - this is where we actually
1187:38 - name the tab that it's going to open in
1187:41 - so we can change this and just say
1187:44 - instead of front-end mentor we can just
1187:46 - say
1187:47 - testimonial challenge
1187:49 - and when we click save
1187:51 - open the browser up and click refresh
1187:54 - you'll see that it changed to
1187:55 - testimonial challenge right here we have
1187:58 - some styles
1187:59 - we haven't really been looking at this
1188:01 - but
1188:02 - if you come back to our browser and go
1188:04 - to codepen
1188:05 - the css right here there's a couple ways
1188:08 - that you can link that up
1188:09 - you can actually use a
1188:11 - link tag
1188:13 - to link up styles or you can just put
1188:15 - them all in a style html tag right here
1188:20 - now we're not going to do that because
1188:22 - that's not very good practice for a good
1188:24 - amount of css you want to break it out
1188:26 - into a separate file which is what we're
1188:28 - going to do
1188:29 - so we'll delete all of that we don't
1188:31 - need it and then finally we have all of
1188:34 - this text which is basically if we look
1188:37 - at the challenge itself
1188:39 - i wish there's a better way to see this
1188:41 - oh yeah we actually have the design here
1188:44 - so if we go to the desktop design
1188:46 - you'll see that we have all of the text
1188:48 - and all this text is
1188:50 - right here i'm going to cut this out
1188:53 - and then i just want to make a new file
1188:55 - so i just right clicked over here in the
1188:57 - file pane click new file
1189:00 - and we'll just say
1189:03 - placeholder
1189:04 - text
1189:05 - dot txt so we give it the dot txt file
1189:09 - extension it's just a plain text
1189:10 - document
1189:12 - we can paste that in and save it just
1189:14 - that we have it but it doesn't clutter
1189:16 - up our html this last part the
1189:19 - attribution this is just as we look at
1189:22 - it in the browser it's just this little
1189:24 - piece down here
1189:25 - so
1189:26 - you can if you want to you can go ahead
1189:28 - and fill this out and link to whatever
1189:31 - you want to your you know twitter
1189:33 - account your linkedin account your
1189:36 - github account whatever you want to do
1189:38 - i'm going to delete it here i don't
1189:39 - really
1189:40 - want to clutter up anything i want to
1189:42 - just focus on the challenge itself so at
1189:44 - this point we have a basic html boiler
1189:48 - plate and i'll actually show you a
1189:51 - shortcut to get to pretty much exactly
1189:53 - this
1189:55 - with just a few keystrokes let's save
1189:57 - this
1189:58 - i'll right click create a new file and
1190:01 - we're going to call this test.html
1190:04 - because we're just going to be testing a
1190:06 - few things
1190:08 - within this document i'm going to show
1190:09 - you how to use emmett and what emmett is
1190:12 - if we open it up this is built into
1190:15 - visual studio code and what you
1190:18 - basically can do with it is
1190:20 - type shorthand
1190:22 - you know characters in click tab and it
1190:25 - will extend it out into a code snippet
1190:28 - of what you want already so let me just
1190:31 - give you a brief example
1190:33 - if we wanted in this html document you
1190:35 - can see visual studio code has
1190:38 - identified in the bottom right
1190:40 - that this is an html document
1190:42 - so if i type h2
1190:45 - it's going to
1190:46 - pull up this box that says emit
1190:48 - abbreviation
1190:50 - and you can
1190:51 - click it to see what it's going to
1190:53 - abbreviate to
1190:54 - but really all you have to do is click
1190:56 - tab and it's going to extend it out into
1191:00 - the element that you want
1191:02 - and you can just start typing
1191:04 - similarly we can actually get this
1191:07 - entire html boiler plate
1191:09 - in just a few keystrokes so if you type
1191:12 - html
1191:14 - and we have a couple options here and
1191:16 - you can go through and see exactly what
1191:18 - it's going to create so basic html will
1191:21 - just give you the the main tag we we
1191:23 - want something a little better than that
1191:26 - oops i already did it on accident
1191:29 - the html5
1191:31 - let's let's go ahead and see
1191:33 - what html5 gives us
1191:35 - it's going to give us pretty much
1191:36 - everything we want here just like we saw
1191:39 - earlier
1191:40 - and then finally html xml
1191:43 - this is not something that you're
1191:44 - probably going to use very often so if
1191:47 - we just click html5 or scroll to it with
1191:51 - our arrow keys and press tab
1191:53 - it's going to break us out into this
1191:56 - boilerplate which is very similar to
1191:58 - what we were set up with when we
1192:01 - downloaded the starter files for our
1192:03 - front end mentor challenge so that's
1192:05 - just a handy way to create this and then
1192:07 - of course you can change the title
1192:10 - i don't think there's a link tag for the
1192:12 - favicon
1192:13 - setup by default but you've got all the
1192:15 - meta tags that are necessary
1192:18 - and you're all set as we go through this
1192:20 - challenge i'm going to be using those
1192:22 - emmett snippets and i'll try to mention
1192:24 - it as we go along but
1192:26 - just know that that's going on
1192:28 - for now i'll delete the test file we
1192:30 - don't need that any longer and now let
1192:33 - me show you our workflow so what we
1192:36 - could do is just write some html so h2
1192:39 - tab and then sum title that's just basic
1192:43 - html and click save and then we can alt
1192:46 - tab or switch back to the browser
1192:49 - open up the tab that we have it on and
1192:52 - click refresh and you'll see the new
1192:54 - html document
1192:56 - this would be very cumbersome and it's
1192:58 - not a great way to make
1193:01 - everything fast so
1193:03 - what we're going to do is we're going to
1193:04 - split the screens here
1193:06 - and i'm going to put the visual studio
1193:09 - code on the left
1193:10 - and the testimonial challenge on the
1193:13 - right now obviously we don't have a lot
1193:15 - of room here so you can always click
1193:17 - this right here to collapse that
1193:20 - might make this a little bit smaller for
1193:22 - us
1193:22 - and then when we're working with our dev
1193:24 - tools we'll click inspect we're in
1193:26 - chrome right now you can use firefox as
1193:28 - well if you want
1193:30 - since we've got these side by side i'm
1193:32 - going to actually re-dock all of this
1193:34 - stuff to be at the bottom
1193:36 - so i can do that let me remember where i
1193:39 - can do that
1193:41 - let's click
1193:42 - there we go you click these three little
1193:44 - dots and click this dock to bottom
1193:47 - so now
1193:48 - we have a much wider screen to work with
1193:51 - and as you resize this in the top right
1193:53 - corner you can see what screen size you
1193:55 - have
1193:56 - or you can click the toggle device
1193:58 - toolbar and now we can see it more
1194:01 - explicitly
1194:03 - where we can resize the screen up here
1194:05 - so this is probably going to be the
1194:07 - better option for us
1194:09 - and we can change the zoom to let's say
1194:11 - be 75 percent so that we can see it a
1194:14 - little bit better
1194:15 - and let me zoom out just a tiny bit we
1194:19 - don't need the javascript console
1194:20 - because we're not working with
1194:22 - javascript so we can close that drawer
1194:24 - and now all we have is the elements here
1194:27 - on the left so the html and then the
1194:29 - styles on the right or the css
1194:32 - and if we click this select an element
1194:34 - button and we select that h2
1194:37 - we can locate it within the html
1194:39 - document and then see the relevant
1194:41 - styles down here
1194:43 - so that's going to be our workflow and
1194:46 - as we go through this we can you know
1194:48 - just add new elements
1194:51 - some text click save come over here and
1194:54 - click refresh and now you see it's been
1194:56 - added to the document now there's just
1194:58 - one more thing that i want to do and
1195:00 - it's just going to make this whole
1195:02 - workflow just a little bit nicer we're
1195:04 - going to come into the extensions piece
1195:06 - let me just expand this out for us
1195:09 - we'll go to the extensions
1195:11 - tab within visual studio code
1195:14 - and let's type in live server
1195:17 - now live server is a way that we can get
1195:20 - automatic updates every time we click
1195:23 - save on our html and css documents
1195:27 - so let's install this
1195:29 - it's very easy to install
1195:31 - extensions in visual studio code
1195:34 - so you can see it's installed i think
1195:37 - that's all we need to do so this is just
1195:40 - another tab that's been opened up let's
1195:42 - close it we don't need it
1195:44 - we'll close this out
1195:46 - as well
1195:47 - and then all we have to do to get this
1195:50 - live server working is come down to the
1195:52 - bottom right
1195:54 - of our screen and click the go live
1195:56 - and it's going to pop up a security box
1195:59 - you need to allow access and now what
1196:02 - you'll see is that we've got a different
1196:05 - address this is actually
1196:07 - we'll get into this a lot more later in
1196:09 - the series but 127.0.0.1
1196:13 - that's our localhost and then 5501 is
1196:17 - the port that we're serving it on and
1196:20 - we're serving the index.html document
1196:23 - now if we put these next to each other
1196:26 - close this out and add another you know
1196:29 - piece of text so
1196:31 - more text
1196:33 - and once we click save
1196:35 - you'll see that it immediately gets
1196:37 - updated here in the browser
1196:39 - that's going to be incredibly handy for
1196:41 - us we don't have to go back and forth
1196:43 - clicking refresh every time and it's
1196:46 - also really nice because instead of you
1196:48 - know going to your file folder and right
1196:51 - clicking
1196:52 - and opening with a browser you can just
1196:54 - do it directly from visual studio code i
1196:57 - know that was a very long kind of
1196:59 - introduction to get us started working
1197:02 - on this project but
1197:03 - um as i've been trying to do within this
1197:06 - full stack series is just take you
1197:07 - through every single step so we're not
1197:09 - leaving anything out we're going through
1197:11 - absolutely everything
1197:13 - and that's why
1197:14 - i wanted to show you the extensions the
1197:16 - emmett abbreviations the favicons the
1197:20 - meta tags all of these little details
1197:22 - because as i was learning i always
1197:24 - wondered about them and oftentimes
1197:26 - tutorials would just skip right over
1197:27 - them but
1197:28 - we are finally ready to start the actual
1197:31 - challenge and start building that
1197:33 - testimonials grid very first thing i'm
1197:35 - going to do and this is what you should
1197:37 - always do is link up your css document
1197:40 - if i open the file explorer you'll see
1197:42 - that there is no css available to us yet
1197:46 - because we haven't created it
1197:48 - so go ahead and right click create a new
1197:50 - file
1197:51 - call it styles.css
1197:54 - or whatever you want it doesn't really
1197:55 - matter
1197:56 - this is just a convention
1197:58 - once you have styles.css
1198:01 - let's just go ahead and put in a basic
1198:04 - style so
1198:05 - we'll use the wildcard that selects all
1198:08 - elements and we'll give it a color of
1198:09 - red
1198:10 - the reason we do this is just to you
1198:12 - know verify that everything is working
1198:14 - correctly
1198:15 - when we click save you'll notice nothing
1198:17 - happens here and the reason nothing
1198:19 - happens is not because our live server
1198:20 - is not working it's because we haven't
1198:23 - told the index.html document
1198:26 - that we need to grab that stylesheet
1198:29 - so let's use an emmet abbreviation we'll
1198:32 - type link and you can see all sorts of
1198:34 - different links that you can use and if
1198:37 - we go down to css click tab you'll see
1198:40 - that we have a
1198:42 - css link set up for us
1198:45 - and since we are in the same directory
1198:47 - so index.html and styles.css are in the
1198:51 - same directory
1198:52 - we can just use
1198:54 - this exactly so it's saying style.css
1198:58 - and just to stay with convention i i
1199:01 - actually think it should be styled not
1199:03 - styles
1199:04 - let's just rename it to style.css over
1199:07 - here and then save the html document
1199:11 - you'll see that immediately
1199:13 - the text color updated to be read so we
1199:16 - know that our link to our style.css is
1199:19 - working if you put in you know something
1199:22 - like
1199:23 - styles.css and click save not going to
1199:26 - work anymore so that's that's what's
1199:28 - going on there with that link tag and
1199:29 - for those of you who have been following
1199:31 - along with the series if we come to
1199:34 - codepen
1199:35 - what we just did there was we
1199:37 - hooked up the css in the html by default
1199:41 - when you're in codepen you can just type
1199:43 - html and type css and they work together
1199:46 - but when you're not working in codepen
1199:48 - which honestly most of the time as a
1199:50 - developer you won't be
1199:52 - you have to actually come in and link
1199:54 - them up with the link tag
1199:56 - all right so let's get started here on
1199:58 - the layout
1199:59 - we'll close the file pane for just a
1200:01 - second and
1200:02 - if you look at the desktop design you'll
1200:05 - see that we'll have to kind of flip back
1200:06 - and forth or what we can do is we can
1200:09 - split these editors so i believe we can
1200:12 - split down
1200:14 - and now we can close this top one and we
1200:17 - have the index.html at the top
1200:20 - and our desktop design
1200:22 - at the bottom it's kind of small but it
1200:24 - will at least give us
1200:25 - a general feeling for what kind of
1200:28 - layout we need
1200:29 - if you're like me and get kind of
1200:30 - annoyed with all this text flowing off
1200:32 - the screen just click view toggle word
1200:35 - wrap and then everything wraps to our
1200:37 - view i kind of like that so
1200:39 - we'll go with that and to start us off
1200:42 - let's see what we're dealing with here
1200:44 - with the grid so the first step to
1200:47 - solving any html and css challenge
1200:50 - or just building a web app in general
1200:52 - is to get the layout correct and we saw
1200:54 - that in previous lessons and challenges
1200:57 - that we did where we just put a border
1200:59 - on each of our div containers and then
1201:02 - we did the layout and then we filled in
1201:04 - all the content and styles so we're
1201:06 - going to do the exact same thing here
1201:08 - and you'll see it's not going to be all
1201:10 - that complicated now the most obvious
1201:12 - place to start if we make this little
1201:14 - bigger we have one two three four five
1201:16 - containers
1201:17 - and they all have slightly different
1201:19 - styles
1201:20 - it looks like the two white containers
1201:23 - here
1201:24 - may have the exact same style but for
1201:26 - now let's just give them all a unique id
1201:30 - so that we can
1201:31 - select them with css a little bit easier
1201:34 - so to do that
1201:36 - with emit abbreviations you can actually
1201:39 - just type the hashtag and then whatever
1201:43 - id you want to give it i'm just going to
1201:45 - number these so we'll say testimonial
1201:48 - dash 1
1201:49 - and then click tab
1201:51 - and you see what it does is it gives an
1201:53 - id attribute on a div so that's what by
1201:56 - default if you
1201:58 - use the emit abbreviations to put a
1202:00 - hashtag and then type something or if
1202:02 - you put a dot and then type something
1202:04 - and press tab it will give you a class
1202:06 - so that's just a quick shortcut
1202:08 - so we'll go through and we'll do the
1202:10 - same thing here so we'll say
1202:12 - testimonial
1202:14 - dash two
1202:16 - and then another useful thing in visual
1202:18 - studio code if you go to the end of a
1202:20 - line click control c
1202:22 - to copy and then control v it will just
1202:25 - paste them down so there's our five
1202:28 - and then we can come in here and give
1202:30 - this a three a four and a five so we now
1202:33 - have all of the containers that we need
1202:36 - when we click save everything's going to
1202:38 - disappear up here because we just have
1202:40 - empty div containers that's okay for now
1202:44 - the next thing that i'm looking at here
1202:46 - normally i just put a border on
1202:48 - everything and
1202:49 - make a layout but this is already kind
1202:52 - of a grid and we might as well start
1202:54 - filling in the colors as backgrounds so
1202:56 - that we can see what we're dealing with
1202:59 - and then additionally we probably need
1203:01 - to start looking at the mobile design
1203:03 - because we're doing this mobile first
1203:05 - so
1203:06 - i know it's going to clutter the screen
1203:08 - up a little but let's go ahead and open
1203:10 - up the mobile design in the bottom part
1203:12 - here
1203:13 - close this back out
1203:15 - and here you'll just see
1203:17 - that every card is going to be stacked
1203:19 - directly on top of each other
1203:21 - but they're going to look relatively
1203:23 - similar so here's the desktop
1203:26 - here's the mobile
1203:28 - it looks like on the mobile design
1203:31 - the cards themselves for the the grid
1203:34 - items or testimonials
1203:36 - are going to be
1203:37 - the height of the content so
1203:40 - the items with more content are going to
1203:42 - be taller than the ones with less
1203:45 - so probably the best way
1203:48 - to lay this out at the beginning
1203:50 - is to just grab some of this content and
1203:53 - put a background on there and just start
1203:56 - getting the structure of everything so
1203:58 - let me pull this down i know that's
1204:00 - really small but we'll work with it
1204:02 - and here in testimonial number one i'm
1204:06 - just going to put a small amount of
1204:08 - content because i don't want our html
1204:10 - document getting super busy with a bunch
1204:12 - of text yet because that'll kind of
1204:15 - that'll take away from
1204:17 - the concepts we're trying to learn here
1204:19 - so
1204:20 - let's go to the placeholder text
1204:22 - and maybe we'll just grab this
1204:25 - really short line of text
1204:28 - and we'll put that in a paragraph tag so
1204:31 - we'll just copy it there
1204:35 - and click save
1204:37 - we still have red text i don't really
1204:39 - want that so let's replace this
1204:42 - all selector instead of color red we'll
1204:45 - do
1204:46 - box sizing
1204:49 - border box because that's our
1204:52 - basic css reset that we want to do we
1204:54 - want to set all box sizing to border box
1204:58 - so now we got the right text and all of
1205:01 - our box sizing is good let's resize the
1205:04 - screen so that we actually have the
1205:06 - browser on the right mimicking a mobile
1205:08 - device
1205:09 - so this isn't perfect i don't know you
1205:12 - know this is probably not exactly a
1205:14 - mobile device
1205:15 - let's make it even a little bit smaller
1205:17 - it gives us more room to type anyways
1205:20 - but this is close enough and this is
1205:22 - what we're going to
1205:24 - build our mobile design off of
1205:26 - as we talked about in the responsive
1205:28 - design video
1205:29 - 576 pixels is kind of our standard
1205:33 - um mobile device so anything 576 or
1205:36 - below is going to be considered mobile
1205:39 - so that's roughly what we're looking at
1205:41 - here and if you
1205:43 - right click and inspect
1205:45 - and then you click this little icon
1205:47 - right here to get the full screen
1205:51 - you should be able to see
1205:52 - exactly how wide it is so if we just
1205:55 - typed window dot inner with
1205:58 - we're at 584 so if we wanted to hit that
1206:01 - 576 number or a little bit lower it'd be
1206:05 - right about here so we'll keep the
1206:06 - screen size right here for now and then
1206:09 - as we
1206:10 - uh go up to the desktop
1206:12 - design we'll make it a little bit wider
1206:14 - i'm going to copy this same text just so
1206:17 - that we have something
1206:18 - into each of these additional
1206:21 - testimonial
1206:23 - divs
1206:24 - and now we're going to have some text to
1206:26 - work with
1206:27 - and then let's look at these colors here
1206:29 - so how do we know what colors to use
1206:32 - well
1206:33 - we have some starter files and if we go
1206:36 - to the style guide dot md
1206:39 - it's going to give you layouts and then
1206:42 - colors right here so this is where we're
1206:44 - going to find the colors that we need so
1206:46 - if we come down to the colors we see all
1206:48 - of them listed in hsl format
1206:51 - and you can use that in css but i just
1206:53 - it's not my preferred way of doing it
1206:56 - and honestly i haven't seen a whole lot
1206:58 - of developers that use hsl
1207:00 - so what i'm going to do is i'm going to
1207:02 - convert these to hex codes
1207:05 - and that way we can work with what i'm
1207:07 - comfortable with and probably what
1207:09 - you'll see more often just as a reminder
1207:11 - this is how i'm doing it i just typed in
1207:13 - rgb to hex and then you get this
1207:15 - tool that google has and you can just
1207:18 - basically come in here
1207:20 - grab an hsl value
1207:22 - paste it into this box here and then
1207:25 - copy the hex code and replace it here so
1207:28 - that's all i'm doing
1207:29 - alright i've got these all replaced here
1207:31 - so we've got hex values a little bit
1207:34 - more comfortable for most people to be
1207:36 - using
1207:37 - and we've got a couple notes on the text
1207:39 - colors but i think these are mostly
1207:41 - related to the text itself so we'll get
1207:44 - there a little bit later i'm going to
1207:46 - drag the style guide down to this bottom
1207:49 - portion of our
1207:50 - visual studio code screen just so we can
1207:53 - have it as a reference
1207:55 - now it looks like the background of the
1207:57 - entire screen is going to be a light
1208:00 - gray
1208:01 - so we'll start with that if we go to our
1208:03 - style.css
1208:06 - in addition to the box sizing we also
1208:08 - want to set margin 0 and padding 0 on
1208:11 - everything
1208:13 - just so we don't have any unintended
1208:15 - side effects so when we click save
1208:17 - you'll see that everything
1208:19 - gets smooshed together because we just
1208:21 - excluded the margin in padding that's by
1208:23 - default set on a paragraph element in
1208:25 - the browser
1208:27 - and now we'll come down here and we'll
1208:29 - say on the body we want the background
1208:32 - color
1208:33 - to be
1208:35 - i believe the light gray
1208:37 - or the light grayish blue we'll see
1208:39 - which one looks more similar
1208:47 - so there's the light gray that is
1208:48 - definitely too dark
1208:54 - and there is the light grayish blue
1208:56 - which i think
1208:58 - that does match if my eyes are not
1209:01 - playing tricks on me
1209:03 - i think the background here uh matches
1209:05 - pretty well so i think we got that right
1209:08 - so we got the background covered and now
1209:10 - we can start filling out our containers
1209:12 - themselves
1209:13 - so each of them again has an individual
1209:16 - id
1209:18 - let's template those out so testimonial
1209:21 - one
1209:22 - and then we can copy this
1209:27 - 5 times
1209:29 - we may not need all of these but we'll
1209:32 - just have them out here for the start
1209:36 - or actually of course we'll need all of
1209:38 - these they're all different colors so
1209:40 - the first one is this purple
1209:43 - the purple card here so we need to grab
1209:46 - that color from the style guide
1209:49 - i believe the moderate violet is what
1209:51 - we're looking for
1209:53 - so we'll come up to testimonial one
1209:55 - and give it a background
1209:57 - color
1209:58 - of that
1210:00 - and now you'll when we click save you
1210:02 - should see that background color
1210:05 - now the next one that we're looking for
1210:07 - is it looks like kind of a darkish gray
1210:11 - so
1210:13 - very dark grayish blue
1210:15 - i think that's the one that we want so
1210:18 - we'll come to testimonial 2
1210:20 - and do the same thing
1210:24 - and then for the rest of these i don't
1210:26 - want to waste your time i'm just going
1210:28 - to go and kind of guess and check until
1210:30 - i get the background colors correct on
1210:32 - each one of these
1210:34 - pieces to this grid but the one thing i
1210:36 - will say before i speed through this is
1210:39 - the numbering of these so we've got them
1210:41 - numbered one through five but you may be
1210:43 - wondering
1210:44 - which is one and which is five
1210:46 - um four
1210:48 - reasons that you will find out later as
1210:50 - we design this with flexbox
1210:52 - um this top one will be one then two
1210:56 - three
1210:57 - four and then the one on the right is
1210:59 - going to be the fifth one so just know
1211:01 - that as i'm going through and styling
1211:03 - the backgrounds on each of them
1211:11 - alright i've got all the background
1211:13 - colors filled in here
1211:15 - and as you'll see in this mobile design
1211:17 - that we're trying to make there's some
1211:20 - room between the edge of the screen and
1211:22 - these items within
1211:24 - the grid and what we're going to do to
1211:27 - create that is we're going to actually
1211:29 - wrap
1211:30 - all of these items in one big container
1211:34 - and then we're going to set some padding
1211:36 - on that container to bring all of them
1211:38 - inwards a little bit so we'll go to the
1211:40 - index.html to do that
1211:43 - and right now all of these divs are just
1211:45 - sitting within the body
1211:47 - but we're going to say
1211:50 - we want to create a
1211:52 - id
1211:53 - of testimonial
1211:55 - grid
1211:56 - container we'll just be very specific
1211:59 - with it
1212:00 - grab the closing div
1212:02 - down here
1212:03 - and paste it in so now we want to select
1212:06 - this testimonial grid container
1212:09 - and put this in our styles
1212:13 - so
1212:14 - hashtag grab the id
1212:17 - and now we want to set some padding
1212:20 - you can either set it in percentage or
1212:22 - pixels
1212:24 - for this since we're going to be making
1212:26 - it responsive
1212:28 - i'm going to start with a percentage so
1212:30 - usually about two percent works pretty
1212:32 - well
1212:33 - you can see that you get a little bit of
1212:34 - padding there
1212:36 - but of course when we look at the
1212:38 - the mobile design and make this bigger
1212:40 - there's a little more padding on the top
1212:42 - than there is on the sides
1212:44 - so we can actually use
1212:47 - the shorthand padding property
1212:50 - to say we want 2 percent
1212:52 - and then maybe five percent and we'll
1212:55 - save that and actually got that wrong so
1212:58 - the top and bottom is going to be the
1213:00 - first argument and then the left and
1213:02 - right will be the second
1213:03 - let's bump that up to three
1213:05 - see what we got this looks pretty good
1213:08 - so i'll stay with this i'm i'm fairly
1213:10 - satisfied with the spacing that we have
1213:12 - here
1213:14 - something that is really bothering me
1213:15 - right now is the text color on these
1213:17 - darker
1213:18 - backgrounds
1213:20 - so before i
1213:21 - get too mad let's just go ahead and fill
1213:23 - that out so for the first one
1213:26 - we'll need a white
1213:29 - text color so
1213:31 - we'll throw that in there
1213:33 - and then we also will just copy this
1213:35 - down
1213:36 - for
1213:37 - testimonial two
1213:39 - we're good on three
1213:41 - good on five but we'll also need it on
1213:44 - four
1213:44 - and now you'll see that the text is
1213:46 - popping out a little bit better
1213:48 - but it's all crammed together so we need
1213:51 - to space things out just a little bit as
1213:53 - you see in the mobile design there's not
1213:56 - only a little bit of space around the
1213:58 - inner content of each
1214:01 - grid component but there's also some
1214:04 - space between each grid component on a
1214:07 - mobile device like this
1214:08 - a simple way to add the spacing between
1214:11 - them is to just set a margin bottom on
1214:14 - each of these
1214:15 - and this looks roughly around 20 pixels
1214:18 - give or take
1214:20 - so
1214:20 - instead of trying to set that on each of
1214:23 - these let's create a class selector that
1214:25 - grabs all of them
1214:27 - and what we could do is we could come
1214:29 - down here and
1214:30 - grab each of them
1214:32 - one at a time separated by commas but
1214:35 - that's going to get very tedious the
1214:37 - better way to do it is to come to the
1214:39 - html
1214:41 - and instead of trying to grab them all
1214:43 - by ids let's assign a class
1214:46 - to each of the grid items so we'll just
1214:49 - say grid
1214:51 - item
1214:52 - is going to be the class name
1214:54 - and then we can copy that down
1214:56 - into each of these divs and here's a
1214:58 - little shortcut within visual studio
1215:00 - code
1215:01 - if you find the spot that you want to go
1215:03 - in
1215:05 - and you hold down the alt key
1215:07 - it's different on mac but on windows
1215:09 - would be the alt key
1215:11 - and then you click in a different place
1215:13 - you'll see there's two cursors so we'll
1215:15 - click again and now there's three
1215:17 - cursors and then finally four
1215:19 - and what you can do is now we can type
1215:21 - all at once and paste in those class
1215:24 - the those classes that we just created
1215:27 - so there we go we've got class
1215:29 - of grid item in each of these grid items
1215:32 - and now we can come down
1215:34 - and just select that
1215:36 - and set a margin bottom of 20 pixels
1215:40 - so when we click save we've got a nice
1215:43 - amount of spacing between the items
1215:45 - furthermore another similar thing
1215:48 - between all the grid items if we look at
1215:50 - our styles here
1215:52 - is that the padding around the content
1215:55 - is the same on each of them
1215:57 - and it looks like
1216:00 - i'm not exactly sure but it might be
1216:02 - somewhere around 20 pixels as well so
1216:04 - we'll start with that and we can tweak
1216:06 - it as we go
1216:08 - so we'll set padding of 20 pixels click
1216:11 - save and now our boxes are looking a
1216:16 - whole lot better than they did a few
1216:17 - minutes ago
1216:19 - so we are far from done here with the
1216:22 - mobile design
1216:23 - but right around this point once i'm
1216:25 - like happy with the
1216:27 - general layout obviously the text isn't
1216:30 - right in here we're missing pieces but
1216:32 - once i'm
1216:33 - satisfied and it doesn't look like
1216:35 - completely terrible
1216:37 - then that's when i go to the desktop
1216:39 - design and start making it responsive
1216:42 - because i want to get the layout correct
1216:44 - before i start you know adding a bunch
1216:46 - of other things in so what we will do
1216:49 - here is we're going to shrink this
1216:50 - visual studio code window a little bit
1216:53 - close the editor so we have some more
1216:55 - space
1216:56 - and then make this browser window larger
1216:59 - so that we can use the chrome dev tools
1217:03 - and when we bring this down here i'm
1217:05 - going to click this button right here so
1217:06 - we can toggle the device toolbar
1217:09 - and now we have the ability to see this
1217:13 - at different sizes really quickly
1217:15 - without resizing the entire screen
1217:17 - so that'll be helpful as we you know we
1217:20 - can actually see the the width up here
1217:23 - updating live so that'll be really
1217:25 - helpful as we resize on different
1217:27 - devices and design for that
1217:30 - so here's about our mobile design if you
1217:32 - just click this bar
1217:34 - you can get a small mobile device you
1217:36 - can click here for medium and here for a
1217:38 - large mobile device
1217:40 - so here's here's the large mobile device
1217:42 - and the reason it shrunk is because
1217:44 - we're at 40 percent
1217:46 - so let's go to maybe 75 you can see it a
1217:50 - little bit better
1217:51 - and then as we resize this we're getting
1217:54 - into the larger desktop devices
1217:57 - i know i've mentioned um about 576
1218:00 - pixels for the break point we're going
1218:02 - to use
1218:04 - and again that is because
1218:06 - earlier in this course when we talked
1218:07 - about responsive design i just said
1218:10 - let's go ahead and use the bootstrap
1218:13 - css framework breakpoints
1218:15 - they're right here so they go from 576
1218:18 - 768 992
1218:21 - in our case we've got two designs only
1218:24 - so we're only going to need a single
1218:25 - break point for this
1218:27 - now we just have to decide at what point
1218:30 - do we break
1218:31 - so if you just play around with this
1218:33 - design
1218:34 - and you just look at the text
1218:36 - right around so we're at 708 pixels wide
1218:39 - right now and this is getting a little
1218:41 - bit wide for my liking with this mobile
1218:45 - design over here
1218:46 - so i think 576
1218:50 - right about here is going to be just
1218:52 - about the widest we'll go for that
1218:54 - mobile design and that's going to be our
1218:56 - break point then
1218:59 - to set that break point we come over to
1219:01 - our css
1219:02 - we write at media for a media query and
1219:05 - since we're doing mobile
1219:07 - first design we'll set a min width
1219:10 - of
1219:11 - 576 pixels
1219:14 - so now we open the brackets up and any
1219:16 - styles we put here are going to apply to
1219:20 - anything bigger than 576 so all of this
1219:22 - right here and before we get too far
1219:25 - let's go ahead and test it this is
1219:26 - really important as you're coding
1219:28 - whether it's html css javascript or
1219:30 - anything else
1219:31 - do it incrementally don't just write a
1219:33 - bunch of code and then test it out all
1219:35 - at the end
1219:36 - so let's test it out by targeting a p
1219:39 - tag and giving it
1219:40 - a color of red something obnoxious
1219:43 - and we'll click save
1219:46 - right now we're at 444 pixels so
1219:50 - we would not expect this style to apply
1219:52 - but as we go above 576 we would expect
1219:55 - all the text to turn red so
1219:57 - let's see if it does and it does so that
1219:59 - means that our media query is working
1220:02 - great
1220:04 - remember always put these media queries
1220:06 - at the bottom of your css
1220:08 - otherwise they may get overwritten by
1220:10 - other styles so our goal here before we
1220:13 - get any further is once we hit above 576
1220:17 - so when this is turning red and the
1220:19 - reason it's doing that is because i
1220:20 - haven't saved yet
1220:22 - but once we get above here we would
1220:24 - expect this layout to look
1220:27 - like this desktop design over here so
1220:29 - the question is how do we do that and
1220:32 - the way that we're going to solve this
1220:33 - is with flexbox i'm just going to expand
1220:36 - this
1220:37 - vs code so that we can really look at
1220:38 - the design here so as i look at this
1220:41 - just by experience alone
1220:44 - i'm thinking to myself that using
1220:46 - flexbox we're probably going to need to
1220:48 - split
1220:50 - these into sub containers now there's a
1220:52 - lot of different ways that you can do it
1220:54 - as always there's more than one way to
1220:56 - solve the problem but i'm going to
1220:58 - choose the most straightforward and
1221:00 - beginner friendly way of doing this
1221:03 - i'm thinking that there is probably a
1221:05 - way that we could take all four of these
1221:08 - items
1221:09 - on the left side
1221:10 - wrap those in a container and then
1221:13 - control the overflow of the container
1221:16 - with flex wrap and then size them
1221:19 - accordingly but i'm thinking that might
1221:21 - get a little bit complex to try to
1221:23 - implement and by adding just one extra
1221:26 - container we can avoid all of that
1221:29 - so what i'm thinking
1221:31 - is that we split the overall layout into
1221:34 - two containers
1221:36 - so the first container is going to be
1221:38 - all four of these items right here
1221:40 - and the second container will be this
1221:43 - item on the right by doing this we can
1221:46 - take container one on the left
1221:48 - and container two on the right and we
1221:51 - can display
1221:52 - flex and they will go side by side next
1221:55 - to each other but that doesn't solve how
1221:57 - we lay out these items on the left so
1222:00 - what i would want to do
1222:01 - within those containers so so remember
1222:04 - we have one container on the left one on
1222:07 - the right and then the left container we
1222:10 - can further divide into two other
1222:12 - containers so we'll have a top
1222:15 - and a bottom container
1222:17 - and in each of those we will display
1222:19 - flex so that they sit next to each other
1222:22 - and then we can use flex basis to
1222:25 - make the dimensions of each of these
1222:28 - a little bit different i know this is a
1222:30 - little abstract so let me just show you
1222:32 - exactly what i mean so we'll keep that
1222:34 - down here
1222:35 - and this all happens within the html
1222:38 - itself so to take these four items on
1222:41 - the left and wrap them in a container
1222:43 - we just need to find them so here
1222:46 - are the first four and all we have to do
1222:49 - is go at the top of here
1222:51 - and set a container now we have to
1222:53 - decide what to name it so that we can
1222:55 - target it with css naming things is
1222:58 - always difficult i'm not going to over
1223:00 - complicate it here we're just going to
1223:02 - call it main left and make that div
1223:06 - and then
1223:08 - within main left like i said we're going
1223:11 - to have a top part and a bottom part
1223:14 - there's a couple ways i could do this
1223:15 - but once again i'll go very simple and
1223:17 - i'll just say top
1223:19 - and then we'll name the other one bottom
1223:22 - so at this point i've got everything
1223:23 - laid out correctly so we want to grab
1223:26 - items one and two
1223:28 - so this one and this one and put it in
1223:31 - that uh top container right here
1223:34 - so we'll do that
1223:36 - we'll just cut these away here put them
1223:38 - there
1223:39 - and then in the bottom
1223:41 - we will take
1223:43 - items three and four
1223:45 - and put them there
1223:47 - now finally we have
1223:49 - testimonial five and i said we're going
1223:51 - to make a separate container for that
1223:53 - but lucky enough we've already wrapped
1223:55 - our entire grid within the testimonial
1223:58 - grid container
1223:59 - and if you think about this from a
1224:01 - flexbox perspective we always have to
1224:04 - think container and direct children
1224:06 - doesn't matter the
1224:08 - you know grandchildren or
1224:09 - great-grandchildren those don't apply in
1224:11 - flexbox so all we have to know is what
1224:13 - is the parent
1224:14 - and what direct children does that
1224:16 - parent have
1224:18 - this testimonial grid container
1224:20 - has exactly two direct children it has
1224:23 - the main left
1224:25 - and then it has the testimonial five
1224:28 - which is that you know this tall card
1224:31 - here on the right
1224:32 - so now that we've got this laid out
1224:34 - let's save it
1224:36 - and i will now bring this back to the
1224:39 - left side of the screen so we can look
1224:41 - at it again
1224:43 - and you'll see that on the mobile device
1224:45 - you know nothing has changed here we've
1224:47 - put all these containers but since we
1224:49 - haven't selected them with css
1224:51 - there's really no change to the overall
1224:53 - layout quite yet
1224:55 - but now this is where the real magic is
1224:58 - going to happen and what we could do is
1225:00 - um since we're devi
1225:02 - we're now designing for the desktop we
1225:04 - did mobile first with all these styles
1225:07 - now we're doing desktop within the media
1225:09 - query but again remember you don't have
1225:12 - to put everything within that media
1225:14 - query there can be some shared css
1225:17 - properties between mobile and desktop
1225:19 - designs so the first style i'll add
1225:22 - is going to be the testimonial grid
1225:24 - container we want to do work from the
1225:26 - outside in so we'll go to style.css
1225:30 - and we'll put that into our media query
1225:33 - and the only thing we need to do here
1225:35 - for the moment is write display flex
1225:39 - and when we click save you'll see
1225:40 - nothing happens here because we're still
1225:42 - looking at the mobile device but as we
1225:44 - make this larger
1225:46 - now you see that this
1225:49 - the
1225:50 - left the main left container with all
1225:52 - four of those items go left and then the
1225:55 - last item testimonial five will be
1225:58 - pushed off to the right because we've
1225:59 - displayed them on the main axis which is
1226:02 - horizontal now if you look at this
1226:04 - design
1226:05 - obviously this testimonial 5 has much
1226:09 - less width
1226:10 - than the rest so we can set that with
1226:13 - flex
1226:14 - and i suppose it's probably about
1226:18 - 25
1226:19 - it looks like
1226:20 - 20 to 25 percent of the total width so
1226:23 - let's come to our style.css
1226:26 - and on each item
1226:30 - we can set the flex basis so in this
1226:33 - case we're going to want to grab
1226:35 - testimonial 5
1226:37 - and target that with our id selector
1226:41 - and then we'll say the flex basis for
1226:43 - that we'll start with
1226:45 - 20
1226:46 - and see what that looks like
1226:49 - okay that's a little bit small i'm
1226:51 - thinking that we'll need maybe 25
1226:55 - i like that a little bit better and we
1226:56 - can always tweak it as we go
1226:59 - the next thing we have to do is look at
1227:01 - these four items on the left and they
1227:04 - obviously the top two go next to each
1227:06 - other and the bottom two go next to each
1227:08 - other as well
1227:09 - therefore we need to make the top a flex
1227:12 - container in the bottom a flex container
1227:15 - so you'll see the id is top and bottom
1227:19 - so all we need to do
1227:21 - is come over here and say top
1227:24 - display flex
1227:26 - and then
1227:27 - bottom
1227:29 - display
1227:30 - flex
1227:31 - but we have a little bit of a problem
1227:32 - here because
1227:34 - they're not taking up the whole
1227:37 - height of that main container so if we
1227:40 - go to the index.html
1227:42 - we have the main left container
1227:45 - and we want this right testimonial 5 to
1227:48 - be
1227:49 - equal in height to these other
1227:51 - testimonials
1227:53 - to do this we need to also turn the main
1227:56 - left container
1227:57 - into a flex container so
1228:01 - we'll go right here
1228:03 - and display flex
1228:05 - and this is not going to look right for
1228:07 - a second
1228:08 - because when we do that it puts
1228:10 - everything in a row but if we change the
1228:13 - flex direction of the main left to be
1228:16 - column now it's going to go back
1228:19 - and look the same but now we have
1228:21 - control using flexbox of how those are
1228:24 - distributed so if we look at this main
1228:26 - left container which its direct children
1228:29 - are going to be the top and the bottom
1228:32 - which are also flex containers
1228:34 - we can distribute those using the
1228:37 - justify content since we set the flex
1228:40 - direction to column the main axis is
1228:43 - going to be going vertical and therefore
1228:45 - justify content allows us to align on
1228:47 - the main axis
1228:49 - we also have the ability to
1228:51 - say how large we want these using flex
1228:54 - bases so
1228:55 - while top and bottom are flex containers
1228:58 - in relation to their
1229:00 - children html elements
1229:02 - they are flex items in relation to the
1229:05 - main left container
1229:07 - so if we come down and set the flex
1229:09 - basis
1229:11 - to
1229:11 - um
1229:13 - we'll start with 50
1229:16 - on each of them and then i'll show you
1229:17 - why that's not going to work perfectly
1229:19 - so we'll save that
1229:21 - and now you see that we have these
1229:23 - filling up the total height of that main
1229:25 - left container and i was actually wrong
1229:28 - the flex basis of 50 works just fine
1229:31 - because in the mobile version we set the
1229:34 - padding or we set the margin bottom of
1229:36 - 20 pixels so there's already some space
1229:39 - between we'll obviously have to space
1229:41 - out
1229:42 - horizontally but we'll do that in just a
1229:44 - bit now the next question we have to ask
1229:46 - is how do we get these proportions
1229:48 - correct with these
1229:50 - four
1229:51 - containers
1229:52 - to do that we can work directly with the
1229:55 - top and bottom
1229:57 - and we can use the
1229:59 - flex basis of their children items to do
1230:02 - that
1230:03 - so all we have to do is grab
1230:06 - let's see exactly how we need to do this
1230:08 - it looks like these are a complete
1230:10 - mirror of each other so this first one
1230:12 - and the fourth one are about equal
1230:14 - proportion and the second and the third
1230:17 - one are equal proportion
1230:19 - so we know that our percentages are
1230:20 - gonna work pretty much the same
1230:23 - so to do this we're gonna need to grab
1230:26 - testimonial one through four
1230:28 - and put them down in our media query
1230:30 - which is our desktop design
1230:33 - so if we put these at the bottom
1230:35 - remember in our desktop design these are
1230:38 - considered flex items
1230:40 - we can go ahead and get rid of these two
1230:42 - properties because they're already
1230:44 - defined in our mobile version which also
1230:46 - applies to the
1230:48 - desktop as long as we don't override
1230:50 - them so we can get rid of all those
1230:52 - but now we can set a flex basis
1230:55 - so the first one this purple one
1230:58 - looks like it's got about 75 percent of
1231:01 - the width
1231:03 - so we'll go with 75 percent
1231:05 - and then that means testimonial 2 is
1231:07 - going to have a flex basis of 25 because
1231:10 - we want to fill up the whole
1231:12 - width of that container
1231:14 - and testimonial 3 is going to have a
1231:17 - flex basis of also 25
1231:20 - and then a flex basis of 75 percent for
1231:24 - that last one so when we click save you
1231:26 - should see the proportions update uh
1231:29 - pretty nicely here as we compare this
1231:31 - design right here to
1231:33 - our
1231:34 - desktop design
1231:36 - picture
1231:37 - you'll probably notice that it looks a
1231:38 - little bit wider overall and you'll see
1231:41 - that there's more room around the entire
1231:44 - container so
1231:45 - let's just fix that so that we are not
1231:47 - thrown off by these proportions in the
1231:50 - way that we'll do that i believe we can
1231:52 - just add some
1231:54 - we can add a max width
1231:56 - to the entire container so let's look at
1231:59 - our index.html
1232:01 - and our testimonial grid container is
1232:03 - probably what we're going to want to
1232:05 - select
1232:06 - and we've already got that selected in
1232:08 - the media query so on a larger device
1232:12 - maybe we set the max width of let's say
1232:16 - [Music]
1232:18 - looks like this might be like 600 pixels
1232:21 - that's just a rough guess
1232:23 - so that's a little bit narrow so maybe
1232:26 - we'll set the
1232:27 - max width to say
1232:29 - 700 maybe
1232:32 - that looks a little bit better
1232:34 - let's go up to 750.
1232:36 - i think that's kind of in the ballpark
1232:39 - and then to center this we could use
1232:41 - like flexbox but honestly the easier way
1232:45 - is this little trick where you set a
1232:47 - margin
1232:48 - of zero pixels top and bottom and then
1232:50 - left and right you give it auto so it's
1232:53 - gonna automatically give the margin to
1232:55 - center it
1232:56 - so when we click save you'll see it all
1232:58 - goes to the middle and now we're
1233:00 - starting to see a little bit
1233:02 - more proportioned grid here now at this
1233:06 - point i think
1233:08 - this is a little bit small the
1233:10 - proportion we've given to that right one
1233:12 - so let's change the flex basis of
1233:14 - testimonial five to be
1233:18 - maybe something like 35 percent
1233:21 - and then of course we need to set
1233:25 - the left one to be the same
1233:27 - so we need to set the flex basis on the
1233:30 - main left which is all four of these
1233:33 - items together
1233:35 - we'll set this to about 70 percent i
1233:38 - think and then update this testimonial 5
1233:41 - to be 30
1233:44 - and i think that looks just a little bit
1233:45 - better for us
1233:47 - once we add some spacing here it should
1233:50 - look a lot a lot better so to finish
1233:52 - this off here the layout um it looks
1233:55 - like there's some spacing between each
1233:58 - of these items you know horizontally
1234:01 - and there's a few ways that we could do
1234:03 - this
1234:04 - actually i'm now thinking we might even
1234:07 - go like
1234:08 - 35
1234:12 - 65 here
1234:14 - and now we have these ones
1234:16 - which are squished a little bit
1234:18 - so maybe we need to update this
1234:20 - container
1234:21 - give it a bigger max width then we'll
1234:23 - change the 75 25 at this point i'm just
1234:26 - like adjusting things until we get
1234:29 - generally the right fit so let's try
1234:31 - maybe like a 70
1234:34 - 30.
1234:36 - that looks slightly better but i still
1234:38 - think we can go a little bit more so 65
1234:41 - 35
1234:43 - there we go i think this looks
1234:46 - relatively good and then now that we've
1234:48 - adjusted this this looks a little bit
1234:49 - too big so we'll claw this one back to
1234:52 - 70
1234:54 - and 30.
1234:56 - and i think we're looking good here i
1234:58 - think the proportions between
1235:01 - this and our design is relatively good
1235:04 - and then of course this bottom one we
1235:06 - need to match the top so
1235:08 - we'll just come down and do that real
1235:09 - quick
1235:11 - so
1235:12 - 65 35 so this one needs to be updated to
1235:16 - 35
1235:17 - and 65 and now our grid
1235:20 - is looking really good
1235:23 - now to get the spacing horizontally
1235:25 - you'll see that there's these little
1235:27 - gutters here um so
1235:30 - right now we don't have any any spacing
1235:32 - horizontally
1235:33 - we could do this with margin um as we
1235:36 - kind of did vertically with that margin
1235:39 - but i'm going to try to apply our
1235:41 - flexbox skills to make this happen
1235:43 - which is a totally valid way to do it as
1235:46 - well so the first one we have to take
1235:48 - care of is the
1235:51 - main left container which surrounds all
1235:54 - four of these and then testimonial five
1235:56 - here on the right right now we have a
1235:59 - flex basis of thirty percent on this far
1236:02 - right and seventy percent on the main
1236:04 - left container so it's split in two
1236:07 - but if we
1236:09 - reduced those by a couple percentages
1236:12 - and then we aligned them with space
1236:14 - between them we could add that little
1236:16 - vertical gutter in there
1236:18 - so what i'll do is i'll take the main
1236:20 - left container and just bring it down to
1236:22 - say 68
1236:24 - so now we have about two percent
1236:27 - empty space within the container
1236:29 - so let's save that and you'll see
1236:31 - there's no there's no space because it's
1236:33 - kind of added at the end
1236:35 - it's kind of invisible here on the right
1236:38 - but if we come up to the testimonial
1236:40 - grid container
1236:41 - and what we do is we justify content
1236:45 - because remember
1236:46 - the main left with all four of those
1236:48 - items and the testimonial five on the
1236:51 - right
1236:52 - are aligned on a main axis which goes
1236:55 - horizontal because the flex direction is
1236:57 - set to row by default so justify content
1237:00 - allows us to
1237:01 - align those within there and all we have
1237:03 - to say is space between
1237:06 - and when we do that you'll see that
1237:08 - there's a little space added there
1237:10 - because we added some extra empty space
1237:12 - and then we
1237:13 - spaced them out between we can do the
1237:15 - same exact thing with these flex items
1237:19 - here too
1237:20 - so
1237:21 - the top flex container
1237:24 - the flex basis is 50
1237:27 - or actually i'm not doing this right so
1237:30 - the top and bottom are going to be the
1237:32 - flex containers so let's just set the
1237:35 - justify
1237:37 - content on here to be
1237:38 - [Music]
1237:41 - space between
1237:42 - to start off
1237:47 - all right and we'll save that and we
1237:49 - won't see any changes because currently
1237:51 - the flex basis equals a hundred percent
1237:54 - so there's no space to add between
1237:56 - but if we reduce
1237:59 - we'll just reduce testimonial one to
1238:01 - sixty three percent so we have two
1238:03 - percent left over
1238:04 - once again and we'll save it and now we
1238:07 - have that little space of two percent
1238:09 - added in there as well now of course two
1238:12 - percent on a large container versus two
1238:15 - percent on
1238:16 - a much smaller container is going to
1238:18 - equal a different pixel width so as you
1238:21 - see in the design
1238:22 - the little gutter here between this
1238:24 - testimonial five on the right and all
1238:26 - four of these on the left
1238:28 - that vertical gutter is a little bit
1238:30 - wider than the vertical gutters that we
1238:33 - just added to
1238:34 - these containers right here so you see
1238:37 - how to do it with flexbox if you're okay
1238:39 - with that fact then you can just leave
1238:41 - it as we have it
1238:42 - but what i'm going to do just for
1238:44 - demonstration purposes is i'm going to
1238:46 - undo everything that we just did
1238:49 - so we'll set everything back to their
1238:51 - original percentages we'll remove the
1238:53 - justify contents
1238:58 - and save it and now we're back to this
1239:01 - place where we have no space between
1239:03 - and a really simple way that we could do
1239:05 - this is we could just look at all of the
1239:08 - flex items or all of the grid items here
1239:11 - on the left we can just add a margin to
1239:14 - the right of say 20 pixels and it will
1239:17 - be equal across the board so if we look
1239:19 - at our index.html
1239:21 - we have all of these individual items
1239:25 - with a class of grid item
1239:27 - but we don't want to add the margin
1239:29 - right to this last testimonial so one
1239:31 - way that we could do that
1239:32 - is we could look at the main left
1239:34 - container which has these four items and
1239:37 - then we can select all descendants
1239:39 - with a class of grid item so it only
1239:42 - selects those four
1239:44 - so i'll show you what i mean here
1239:46 - um i guess we'll
1239:48 - we'll put this up here right under main
1239:50 - left and we'll say main left is the
1239:54 - parent that we want to look at and then
1239:56 - we want to grab all grid item
1239:59 - descendants of that
1240:01 - and now what we can do let me just show
1240:03 - you what we're selecting first so we'll
1240:05 - set a color of red so that the text
1240:07 - turns red and we'll click save
1240:09 - and now you can see all of these left 4
1240:12 - grid items have red text but we've
1240:14 - excluded the right one with the css
1240:17 - selector
1240:18 - that's exactly what we want
1240:20 - so we'll add a margin to the right of 20
1240:22 - pixels and you're going to see that this
1240:25 - just gets spaced out really nicely
1240:27 - automatically and that is
1240:30 - it's a little little much maybe let's go
1240:31 - with 15 pixels
1240:33 - and that is exactly how we would add
1240:35 - that spacing on the right naturally and
1240:39 - now it's equal between all of them
1240:41 - at this point
1240:43 - the overall structure of our grid
1240:45 - looks very good and now that i'm looking
1240:48 - at it one more time
1240:50 - it seems that this right one is still a
1240:53 - little bit too wide
1240:55 - and i apologize for going back and forth
1240:57 - here
1240:58 - trying to teach and uh
1241:00 - and see how to do this at the same time
1241:03 - so it's a little bit tough
1241:05 - so let's let's bring this back to 25 on
1241:08 - testimonial 5 and 75 on the main left
1241:11 - container
1241:12 - i think this looks
1241:14 - good and i really hope i don't change my
1241:17 - mind on that again
1241:18 - i might but as of right now this looks
1241:22 - very similar
1241:24 - and the cool thing is if we resize this
1241:26 - down to mobile so once we hit 576 pixels
1241:31 - it should break and boom we have our
1241:34 - mobile design so we don't have to update
1241:37 - anything on the mobile side of things we
1241:39 - just made this desktop design and it's
1241:41 - pretty much responsive
1241:43 - now the one thing you'll notice um is as
1241:45 - we shrink it these get shrunk a little
1241:47 - bit so it may not look perfect say on
1241:50 - like a tablet but it should work okay
1241:53 - you could always add an additional
1241:54 - breakpoint
1241:56 - if you wanted to to adjust those flex
1241:59 - basis numbers that it looks better on
1242:01 - tablet but i'm not going to worry about
1242:02 - that here because
1242:04 - i think it would just be distracting
1242:06 - from the main lessons
1242:08 - all right so we have got our layout done
1242:10 - it is responsive and now we should be
1242:13 - able to just go in
1242:15 - and look at this entire design here and
1242:17 - start adding in all these components and
1242:19 - styling them out before we do that
1242:22 - though i'd like to clean up our css a
1242:24 - little bit because
1242:26 - at the moment we are
1242:28 - duplicating a lot of our css rules so
1242:32 - this is what we would call kind of
1242:33 - refactoring so you write the code out
1242:35 - you don't really worry about doing it
1242:36 - perfectly the first time but then you
1242:39 - kind of edit and you you know iterate on
1242:41 - it and make it a little bit cleaner so
1242:44 - what you'll see is we've written this
1242:46 - rule of display flex
1242:49 - several different times so what we can
1242:51 - do is we can take all of these
1242:54 - ids where we're writing that display
1242:57 - flex and put it into one single css rule
1243:01 - some might say this is not worth doing
1243:03 - but i think it is it's nice to
1243:06 - nice to break out our code a little bit
1243:09 - so we want to select our testimonial
1243:11 - grid container and display flex
1243:15 - let me just write the rule first and
1243:17 - then of course we want to select
1243:19 - more than just the testimonial grid so
1243:21 - what else uses flex we have the main
1243:24 - left so we'll copy that in there
1243:30 - so main left
1243:32 - top and bottom
1243:39 - so those are all going to display flex
1243:42 - and now we can get rid of all of those
1243:44 - individual rules on each of them
1243:51 - click save it should look the same
1243:53 - down here we have these four
1243:56 - flex items all set with flex basis
1243:59 - percentages that are very similar so
1244:02 - let's group this together let's take
1244:03 - testimonial three
1244:05 - combine it with that rule and delete all
1244:08 - of this
1244:09 - and we'll take testimonial four
1244:12 - combine it with that rule
1244:14 - and delete this last one
1244:17 - save it should get the same thing top
1244:19 - and bottom now both have a flex basis of
1244:21 - fifty percent and that's the only rule
1244:24 - so we don't need them broken out
1244:25 - separately
1244:27 - we can just bring those together and
1244:29 - delete that rule
1244:32 - click save should be the same and then
1244:34 - i'm going to take all of our flex rules
1244:37 - and just kind of group them together
1244:38 - here
1244:40 - so let me
1244:41 - let me just put those here okay so now
1244:44 - we have all of our css grouped up a
1244:46 - little bit
1244:47 - better and we can start working on
1244:50 - adding the content i'm going to shrink
1244:52 - this screen
1244:53 - and we'll go ahead and close the dev
1244:55 - tools
1244:57 - and we'll just work on this first on the
1244:59 - mobile design so we have some more
1245:02 - screen real estate and then we'll
1245:04 - check it on desktop to make sure
1245:06 - everything is working so we'll open up
1245:08 - our file explorer and index.html
1245:12 - along with our placeholder text because
1245:14 - this is what we're going to actually be
1245:16 - putting in
1245:17 - to all of these containers and i'm just
1245:20 - going to look at the desktop design i
1245:22 - know we're doing mobile over here but
1245:24 - it's just bigger so we can see it better
1245:26 - i'll go through the first one with you
1245:28 - and then the rest of them are going to
1245:30 - be pretty much exactly the same so i'll
1245:32 - let you do those on your own and i'll
1245:34 - just speed through it so with this first
1245:37 - card right here now we have this big
1245:39 - quotation we're going to worry about
1245:40 - that totally last we're not going to
1245:42 - worry about that yet
1245:44 - the content itself it looks like we have
1245:46 - a picture we have a name
1245:48 - we have
1245:49 - this says verified graduate so they're
1245:52 - the status of that person
1245:54 - and then we have the main testimonial
1245:56 - and
1245:58 - the secondary testimonial so just
1246:00 - looking at this immediately we need an
1246:02 - image tag we need a paragraph tag
1246:05 - another paragraph tag looks like maybe
1246:08 - an h4 tag and then another paragraph tag
1246:11 - so let's get the picture first this
1246:13 - first one is daniel clifford so we're
1246:16 - going to need that image
1246:17 - and that's been provided to us if we go
1246:20 - to images folder
1246:22 - you should see
1246:24 - imagedaniel.jpg
1246:25 - so we can finally start to to replace
1246:28 - this so we're on testimonial one right
1246:30 - here
1246:31 - and we're first going to put in an image
1246:33 - so we'll use the emit abbreviation click
1246:35 - tab
1246:36 - and the source that we want is going to
1246:39 - be
1246:40 - the relative path
1246:42 - and then we'll say images and then we
1246:44 - want image dash daniel
1246:47 - and then the alt
1246:49 - attribute this is for accessibility you
1246:51 - should always put this in here so
1246:54 - daniel daniel profile picture just a
1246:58 - description of what that is
1247:02 - click save you'll see this image come in
1247:05 - to our first
1247:07 - grid item we now need to write in his
1247:09 - name and verified graduate so
1247:12 - let's do that we'll just use a p tag so
1247:16 - daniel
1247:17 - clifford
1247:20 - verified graduate
1247:23 - there we go we've got those added in
1247:25 - there
1247:27 - now we have to go find the text so it
1247:29 - says i received a job offer mid-course
1247:34 - okay so there's our daniel so here's our
1247:37 - first piece of text
1247:42 - we'll put that in the p tag right here
1247:52 - so there's that text and then finally
1247:54 - we'll just want one more p tag and
1247:56 - actually no this will not be p tag let's
1247:58 - just set that as an h4
1248:00 - i think that's roughly what we would
1248:02 - want here
1248:06 - that looks okay we can always switch it
1248:07 - later
1248:10 - then finally we have this last
1248:14 - piece of text so this is the longer
1248:15 - testimonial that we'll put in the p tag
1248:18 - right here
1248:20 - all sorts of formatting issues so i'm
1248:22 - just gonna
1248:24 - get this all on one line here it doesn't
1248:26 - really matter but
1248:28 - i'm gonna just do this anyway
1248:30 - okay so we've got our first card done
1248:33 - and like i said you can go through and
1248:35 - figure out how to do the rest of them
1248:36 - it's the same exact pattern for each of
1248:39 - the different
1248:41 - testimonial cards so what i'm going to
1248:43 - do is i'm going to just take this entire
1248:45 - structure
1248:47 - and i'm going to come down and replace
1248:50 - each item with it when we click save
1248:53 - you'll see that it's all looking the
1248:55 - same and then now we can just switch the
1248:57 - individual parts
1248:59 - so the second testimonial if we open up
1249:02 - the desktop design it's going to be
1249:04 - jonathan
1249:05 - so
1249:06 - based on the image names here
1249:08 - we have image jonathan
1249:11 - so we really can just come into the
1249:14 - find the second one here so testimonial
1249:17 - to
1249:18 - replace the link here
1249:21 - click save now we have jonathan in here
1249:23 - and then you just update the rest of the
1249:25 - text so i'm going to speed through this
1249:26 - and i'll see you when i'm done
1249:29 - all right we are done and you can see
1249:31 - that i've got all of the
1249:33 - text and images in here
1249:35 - now it's just a matter of styling these
1249:38 - if you look at the main design
1249:42 - they're all about the same so we have
1249:44 - the image in a circle on the left with
1249:46 - the name and the verified graduate right
1249:49 - under it and then the actual testimonial
1249:52 - below
1249:53 - so it makes no sense to try to target
1249:55 - each of these individually we'll just
1249:57 - set a
1249:58 - common class among all of them and then
1250:01 - style it one time let's start with the
1250:03 - image and the name to the right of the
1250:06 - image
1250:07 - the first thing that we need to do
1250:08 - because how i see this is we've got the
1250:11 - image on the left and then the name and
1250:13 - verified graduate stacked on top of each
1250:15 - other
1250:16 - so
1250:17 - to get those next to each other a great
1250:19 - way to do it is flexbox so the image
1250:22 - will be flex item number one and then
1250:24 - we'll make a container around the name
1250:26 - in the verified graduate which will be
1250:28 - flex item number two
1250:30 - to do that we just come to the html
1250:34 - we'll go to the first one here
1250:37 - and we'll come right above the image and
1250:40 - what should we name this
1250:44 - we'll just call it
1250:46 - a class of header
1250:53 - and then within header we're going to
1250:54 - have the image and then another
1250:56 - container with the other text
1250:59 - so i'm going to call
1251:02 - that container
1251:04 - header text
1251:06 - okay
1251:07 - so now all we have to do is drop in the
1251:10 - image up top
1251:12 - and then these two p tags
1251:17 - in this container down here i'm going to
1251:19 - split our style.css to the right here in
1251:22 - visual studio code so we can see both
1251:25 - and as we look at the header in the
1251:28 - header text we can come down
1251:30 - since this applies to both mobile and
1251:33 - desktop
1251:34 - we'll just write it up in the mobile
1251:35 - first section where it applies to pretty
1251:38 - much any everything
1251:40 - and we'll just put at the bottom
1251:43 - we want to target header
1251:45 - which is going to be display flex
1251:48 - automatically when we click save you're
1251:50 - going to see it jumps on the to the
1251:52 - correct line
1251:53 - and then these are lined up so if you
1251:56 - look at this the picture and the text
1251:58 - they're like on the same horizontal
1252:01 - axis
1252:03 - so the way that we get that to happen is
1252:05 - align items so we're aligning items on
1252:07 - the cross axis
1252:08 - to be center
1252:10 - so now that's going to work
1252:12 - and then of course we need to grab the
1252:14 - image so
1252:16 - from the header container we want to
1252:18 - grab all images
1252:20 - and we want the border radius to be it's
1252:24 - just a trick to make circular pictures
1252:26 - we want that to be 50 percent
1252:29 - so you see now we have a circle
1252:32 - picture
1252:33 - and then we want the margin
1252:36 - right to be let's call it 5 pixels
1252:41 - actually that's not enough so let's do
1252:42 - 10 pixels
1252:44 - now you can see there's a little space
1252:46 - between those
1252:47 - lastly we need some space under this
1252:50 - header container so we'll come back up
1252:53 - to header
1252:54 - set a margin bottom of maybe 20 pixels
1252:57 - and that will space us out from this top
1253:00 - header container to the text under it
1253:03 - now of course this has not applied to
1253:05 - the rest of the testimonials but we will
1253:08 - follow the same exact process
1253:10 - as long as we keep the same class on
1253:12 - them these css styles should apply just
1253:16 - fine so i'm going to speed through this
1253:18 - so you don't have to watch me do it um
1253:20 - completely i'm just going to go and
1253:22 - create this exact structure uh below for
1253:25 - each of them and probably should have
1253:26 - done this the first time around but
1253:28 - whatever we'll we'll get through it okay
1253:31 - so i got that done and that's kind of a
1253:33 - good lesson there you usually want to
1253:35 - finish like one iteration so one card
1253:38 - um get it all correct and then apply the
1253:41 - styles to the rest i didn't do that so i
1253:44 - had to pay for it with some extra time
1253:47 - the next thing i'm going to do is space
1253:49 - out these two pieces of text so the
1253:51 - first one is in h4 the second one is a
1253:53 - paragraph tag
1253:55 - so we can select that with our our
1253:57 - styles pretty easily
1253:59 - all we have to do is look at any
1254:03 - grid item class and select the h4s and
1254:06 - add a margin bottom
1254:08 - so we'll say grid
1254:10 - item
1254:11 - h4
1254:12 - and we'll set a margin bottom of 20
1254:15 - pixels maybe
1254:17 - i think that looks okay
1254:19 - so 20 pixels yeah it looks pretty good
1254:22 - we're getting close to the finish line
1254:24 - here
1254:25 - the next thing you'll notice is there's
1254:26 - rounded corners on each of these cards
1254:28 - that'll be pretty easy to apply
1254:32 - so let's go find our grid item style
1254:34 - which selects all the grid items
1254:37 - and we'll set a border radius of around
1254:40 - 5 pixels maybe
1254:42 - that'll make those rounded corners so
1254:44 - that looks good
1254:46 - there's also a little bit of a drop
1254:48 - shadow on each of these
1254:51 - or at least the white ones but we'll
1254:54 - just go ahead and put it on
1254:55 - each of them just for simplicity
1255:00 - so any grid item is going to get a box
1255:02 - shadow
1255:05 - you can go to a box shadow tool online
1255:08 - this is just the standard that i always
1255:10 - put in there
1255:12 - is a black color with 20 opacity
1255:16 - and then i kind of tweak these
1255:20 - values right here until i get roughly
1255:22 - what i want
1255:23 - so you can see there's a little box
1255:25 - shadow there i might spread this out a
1255:27 - little bit more
1255:28 - it's not exactly what we're looking for
1255:30 - but it is it's pretty close and i'm not
1255:33 - too concerned about getting this
1255:35 - verbatim to the design the next big
1255:38 - piece to this is the font so
1255:41 - in the style guide
1255:43 - if we go here to the style guide it's
1255:45 - going to tell you what font you need to
1255:46 - use
1255:47 - so for typography the body copy is 13
1255:51 - pixels
1255:52 - we haven't set that yet
1255:55 - um actually let's let's do that really
1255:57 - quick so for grid items
1256:00 - you could set this at multiple levels
1256:02 - but for grid items
1256:04 - we'll set the font size to be
1256:07 - 13 pixels
1256:09 - makes it a lot smaller here for us
1256:12 - and then for grid item h4s
1256:15 - we'll set the font size back up so we'll
1256:18 - say maybe 1.2 rem
1256:20 - so that's
1256:21 - the root element is going to be
1256:23 - [Music]
1256:25 - the html which i believe is set default
1256:27 - to 16 pixels
1256:29 - so that will make it a much bigger
1256:32 - text
1256:33 - and i think that looks relatively good
1256:36 - decent proportions there so i'm okay
1256:38 - with that
1256:40 - and now we have to actually change the
1256:42 - font itself
1256:43 - so in the style guide
1256:45 - it says that we need the barlow
1256:47 - semi-condensed font from google fonts
1256:50 - i happen to have this open already let
1256:53 - me expand the screen
1256:55 - and all you have to do is select the
1256:57 - styles that you want
1256:58 - so we will do that and it looks like we
1257:01 - need 500 and 600 font weights
1257:04 - so we will go grab
1257:06 - medium which is 500
1257:09 - and 600 which is semi bold
1257:13 - now it's saying that we just need to put
1257:14 - this link in our html document so we'll
1257:17 - copy that
1257:19 - should be good on this so let me
1257:21 - resize the screen real quick and now all
1257:24 - we need to do with this is put it into
1257:27 - our html
1257:29 - so we put this in the head
1257:31 - and we can put it right by our style
1257:34 - sheet link
1257:37 - so i think usually
1257:39 - you're supposed to put this after your
1257:41 - stylesheet so that this applies i'm not
1257:45 - entirely certain if that is
1257:47 - that matters a ton let's save it
1257:50 - by default it's not going to be using it
1257:52 - because we haven't enabled it
1257:54 - so we'll have to come back to our
1257:56 - styles.css
1257:58 - and in the body
1258:00 - this might be where we put the font
1258:02 - family
1258:03 - and this is where we'll go to the rules
1258:05 - here and we can just paste in the css
1258:08 - rule actually
1258:10 - so we'll be using barlow semicondensed
1258:12 - with a fallback of sans serif
1258:15 - save that and you can see all the font
1258:18 - is is looking a lot closer to our demo
1258:21 - here
1258:22 - you'll notice that these white cards
1258:24 - have a gray text rather than the black
1258:27 - text we're giving it so let's update
1258:29 - that
1258:31 - i believe we have a rule for this
1258:33 - already
1258:34 - so we can actually condense testimonial
1258:36 - five and three
1258:39 - into one because they have the same
1258:42 - styles
1258:45 - and then the font color that we need if
1258:47 - we go to the style guide
1258:51 - is probably this light gray i'm thinking
1258:58 - nope that's a little too light
1259:00 - so we'll try the dark grayish blue
1259:06 - and i think that's a little bit closer
1259:09 - may not be exact but i'm i'm thinking
1259:11 - it's close enough it's it's better than
1259:13 - the black that we had before
1259:16 - now the
1259:18 - smaller text has a little bit less
1259:20 - opacity than the main text
1259:22 - and then we also need to send the set
1259:24 - the font weight so let's look at the
1259:26 - style guide
1259:28 - it says for the typography or
1259:30 - note for the text colors the verified
1259:32 - graduate okay we're not ready for that
1259:34 - yet
1259:35 - review paragraphs inside quotes have the
1259:37 - same color but are 70 percent opacity
1259:41 - so
1259:42 - in our design here we have a couple
1259:46 - different p tags so we have the name
1259:48 - verified graduate and then the
1259:50 - testimonial down here
1259:52 - so if we just
1259:54 - set the
1259:55 - font weight of a p tag and the opacity
1259:59 - of a p tag
1260:00 - for all of them that will
1260:03 - apply to mostly what we want because we
1260:05 - want
1260:06 - this testimonial to have 70 opacity and
1260:09 - probably verified graduate as well
1260:12 - and then we can specifically override
1260:14 - that opacity style to be a hundred
1260:16 - percent for the name uh later so let's
1260:19 - let's go ahead and do that
1260:22 - so we'll see if we have something for
1260:23 - this already
1260:26 - so we have grid item so
1260:28 - we'll just set the
1260:30 - grid item p tags so any
1260:34 - any p tag within the grid item we want
1260:36 - to set the opacity to
1260:38 - 70 percent
1260:41 - and then for the name
1260:43 - let's just add a class so we can use the
1260:45 - alt key to
1260:47 - come into all of the p tags with the
1260:49 - name
1260:50 - just holding down alt
1260:55 - and we can give it a class name
1261:00 - and then we can come down into the name
1261:03 - selector and give it an opacity of 100
1261:06 - maybe not the most effective solution
1261:08 - but it works
1261:09 - and we probably need to select it with
1261:12 - header to be more specific
1261:15 - than our grid item p
1261:17 - because header and name
1261:19 - that's two class selectors is more
1261:21 - specific than grid item
1261:24 - p which is a class and a tag selector so
1261:26 - this one takes precedence and we'll
1261:28 - override it
1261:29 - now i think we just need to
1261:31 - tweak a few things with the text here
1261:33 - not a whole lot we might want to make
1261:36 - the name just slightly larger than that
1261:39 - default
1261:40 - 13 pixels
1261:42 - so we can come to that rule that we just
1261:45 - created
1261:46 - so the name
1261:48 - and we'll say the font size is going to
1261:51 - be
1261:51 - [Music]
1261:54 - 1.1 rem
1261:57 - actually that's going to be way too
1261:58 - large
1261:59 - um
1262:00 - how about one rem so 16 pixels
1262:04 - that looks better if you open this up
1262:06 - you might see a little border around
1262:07 - these pictures too
1262:09 - so while we're here
1262:11 - we can look at the header image and we
1262:13 - can give it a border of one pixel
1262:16 - solid maybe purple i think
1262:19 - some of them are different but let's
1262:21 - just go with purple on all of them
1262:26 - you can see that little
1262:29 - border that we have around there you can
1262:31 - tweak that how you like it lastly
1262:34 - i think the font weights look okay but
1262:36 - they did tell us to import
1262:38 - weights of 500 and 600 so
1262:42 - we should probably explicitly set those
1262:44 - so on the grid grid item h4s will give a
1262:47 - font weight
1262:49 - of 600
1262:52 - looks about the same so not a huge
1262:54 - change
1262:55 - for the most part i think i'm happy with
1262:57 - the design we have
1263:00 - it's not absolutely perfect but it's
1263:02 - pretty close and more importantly we've
1263:04 - gone through a lot of the concepts we've
1263:06 - covered in the previous videos which is
1263:08 - always fun to apply those leave a
1263:10 - comment if i missed anything i think the
1263:12 - only thing remaining is this big quote
1263:14 - up here and there's a couple ways you
1263:17 - could approach this
1263:18 - i do not believe there's any
1263:20 - assets for this like this is not an
1263:22 - image
1263:24 - actually it is so this is an svg
1263:27 - and we could use this svg
1263:31 - i don't want to get too far into
1263:34 - css and svgs it's like a whole other
1263:37 - topic but i'll go ahead and just quickly
1263:39 - put it in and show you how to do it so
1263:41 - what we can do is this background
1263:44 - pattern quotation svg if we click on it
1263:47 - it's just a bunch of numbers
1263:49 - but we can actually put this into an
1263:51 - image i believe
1263:54 - so if we come to our index.html
1263:58 - let me get this css collapsed a little
1264:00 - bit
1264:02 - and it's obviously on the main card the
1264:05 - purple card here so number one
1264:08 - we can pretty much put it wherever
1264:11 - we would like here within this main card
1264:15 - so let's make an image
1264:17 - and then the source is going to be
1264:20 - images and then background pattern
1264:23 - quotation
1264:28 - so now you see that quote is already in
1264:30 - there that's nice now we just need to
1264:33 - absolutely position this because it's in
1264:35 - that weird spot so it's like kind of
1264:38 - randomly up there in the top right
1264:39 - corner
1264:40 - let's give it an id so we'll give it the
1264:43 - quote id
1264:45 - and then we come over to our css
1264:48 - and we will select quote
1264:52 - and we'll say position
1264:54 - absolute and what that is going to do is
1264:56 - position it relative to i believe the
1264:59 - viewport by default
1265:01 - um let's see how that works so from the
1265:03 - right we want it to be 20 pixels roughly
1265:07 - okay yeah so it's relative to the
1265:09 - viewport we want it relative to this
1265:11 - container itself
1265:13 - so to do that we need to set the
1265:16 - testimonial one container
1265:18 - to be position relative and once we do
1265:21 - that that quote will come in correctly
1265:24 - come down to quote it should be probably
1265:26 - more like
1265:27 - 30 pixels from the right and then from
1265:29 - the top
1265:31 - it is pretty much flush with the top so
1265:33 - we'll do zero
1265:35 - you can see that gets us a little bit
1265:37 - closer
1265:38 - um
1265:40 - and as we resize this it's obviously
1265:42 - going to
1265:43 - change that a little bit so maybe from
1265:45 - the right we go like
1265:48 - three percent i'm just going to
1265:49 - experiment around with this until we get
1265:51 - it right
1265:52 - maybe like seven percent
1265:55 - that's closer let's just ramp it up to
1265:58 - 15. okay
1265:59 - i like that i think 15 is pretty good
1266:02 - and
1266:04 - like i said it's flush with the top so
1266:06 - that's good
1266:09 - and then finally
1266:11 - as we resize this i know this doesn't
1266:14 - look amazing we're just kind of in that
1266:17 - middle state where it's like
1266:19 - this is like bigger than a mobile device
1266:21 - but smaller than a tablet so you're
1266:23 - really not going to see this on any
1266:24 - device
1266:25 - for the most part so like here is about
1266:28 - where you're starting you're going to
1266:29 - start seeing it
1266:31 - and
1266:31 - it looks like the quote is like a little
1266:34 - bit above that text and in our actual
1266:38 - design here
1266:39 - it's showing it as behind the text like
1266:42 - overlapping that's partially because of
1266:45 - the spacing that we've given it so i'm
1266:47 - not overly concerned about it but as we
1266:50 - resize it and it does kind of overlap
1266:52 - text we want that to go behind
1266:55 - everything
1266:56 - so to do that we need to go to the
1266:59 - styles
1267:01 - we need to set the
1267:03 - z index
1267:05 - equal to like negative one
1267:08 - actually let's let's set this the index
1267:11 - to one
1267:12 - and then on the
1267:13 - [Music]
1267:14 - testimonial
1267:16 - one we will set the z index
1267:19 - to be
1267:20 - uh zero
1267:22 - so it's above the testimonial card
1267:25 - but then we want it to be below the
1267:27 - testimonial text so we'll set the z
1267:31 - index of the header to three
1267:34 - i think that might get us there maybe
1267:36 - not there we go we just need to set it
1267:38 - to position relative so that the z index
1267:41 - applies
1267:42 - and now
1267:43 - it should be going behind any text and
1267:46 - stuff like that so
1267:48 - should be good there
1267:50 - and i think our design is pretty much
1267:53 - complete so as you can see like we could
1267:55 - spend the next hour or two hours trying
1267:58 - to get this to look exactly like
1268:00 - the example here
1268:02 - just if you're curious i took a second
1268:05 - to try to figure this out fully
1268:07 - exactly how we can get it to look like
1268:09 - this and
1268:10 - didn't come all the way there but i did
1268:12 - get it
1268:13 - somewhat close
1268:15 - so
1268:16 - i put a max width of 1440 according to
1268:19 - the style guide here where it says the
1268:21 - desktop is 1440
1268:23 - and then i set the
1268:24 - testimonial five and main left
1268:27 - containers to eighty and twenty percent
1268:29 - respectively
1268:30 - so
1268:31 - this looks okay i think there's it's not
1268:34 - exact like i said but it's a little bit
1268:36 - closer
1268:38 - let me know in the comments if i missed
1268:39 - anything but as we resize this it should
1268:43 - be responsive we have this like middle
1268:45 - state where it's a little bit weird but
1268:49 - honestly trying to perfect that is just
1268:51 - going to be a lot of tedious tweaks that
1268:53 - you can kind of do on your own if you
1268:55 - want
1268:55 - but the main goal here has been
1268:58 - accomplished on desktop it looks like
1268:59 - this and on mobile it looks like this
1269:02 - where we have everything stacked on top
1269:04 - of each other
1269:05 - so now at this point we're going to take
1269:07 - this local host
1269:09 - that nobody can see
1269:10 - and we're going to deploy this to github
1269:12 - pages so that you can pass it off as a
1269:15 - link and show off your project
1269:17 - so the way that we'll do that let's
1269:19 - close out everything here
1269:21 - so we have a clean workspace
1269:24 - so what we can do is we can open up
1269:25 - source control this is embedded within
1269:28 - uh visual studio code
1269:30 - and what we can do is initialize a
1269:33 - repository and this can be done on the
1269:36 - command line too but i think we should
1269:38 - you know since we haven't learned git
1269:39 - yet
1269:40 - and i don't expect you to understand any
1269:42 - of this quite yet
1269:44 - might as well use the visual interface
1269:46 - so from here it's we initialize the
1269:50 - repository and
1269:53 - it says control enter to commit on
1269:55 - master
1269:56 - so we can write a message just say first
1269:59 - commit and then control enter
1270:03 - we're going to stage all our changes and
1270:05 - commit them directly yes
1270:10 - and i'm i'm actually set up with github
1270:12 - already so it may ask you to go through
1270:14 - some authorization where you have to
1270:16 - sign in to github so go ahead and do
1270:18 - that if you have to
1270:20 - now what we have to do is create a new
1270:23 - repository so on our github so if you
1270:26 - don't have an account sign up for github
1270:28 - you'll need it uh
1270:29 - for the rest of your developer life
1270:32 - click new repository
1270:34 - and we'll just say testimonial
1270:37 - grid
1270:38 - front end manner
1270:41 - challenge solution
1270:43 - very long
1270:44 - repository name you don't need to make
1270:46 - it that long
1270:48 - and we'll just create the repository
1270:51 - make it public
1270:52 - not too worried about
1270:54 - initializing all this stuff
1270:56 - now from here you're just going to copy
1270:58 - the
1270:58 - https link
1271:00 - come back to visual studio code
1271:02 - click these three dots
1271:04 - click remote
1271:06 - add remote
1271:08 - and then
1271:09 - we're going to put in that url
1271:14 - from there we should be good i think
1271:17 - we want to
1271:19 - push it to the main branch so let me see
1271:22 - what we're working with here
1271:26 - yep so we need to push to main
1271:28 - but this is just the name we're giving
1271:30 - it so origin we're just linking up our
1271:32 - code here to the github repository again
1271:35 - you don't need to understand this we're
1271:37 - just trying to get it deployed here so
1271:39 - um now we're going to click push
1271:42 - okay
1271:44 - then let's check it out here we'll
1271:45 - refresh
1271:47 - and you'll see that we have
1271:49 - all of these uh files that we just
1271:51 - created from visual studio code here on
1271:54 - our
1271:54 - repository right now we don't have it
1271:57 - deployed to github pages
1271:59 - the way that we can do that we can do it
1272:00 - here
1272:01 - or we can do it within visual studio
1272:03 - code but quite honestly doing it within
1272:06 - the repository is is relatively
1272:08 - straightforward since we already have
1272:10 - index.html in the main root of the
1272:13 - directory
1272:14 - so we'll go to master
1272:16 - find or create a branch and type github
1272:18 - pages
1272:21 - and it says create branch github pages
1272:23 - from master which is exactly what we
1272:25 - want to do this is master what we're
1272:27 - looking at right now
1272:29 - so we'll create that branch and now
1272:31 - let's go back to our main repository
1272:34 - and i believe it should publish this to
1272:37 - github pages in the next minute or two
1272:40 - it doesn't happen like instantaneously
1272:42 - because
1272:43 - what it's actually doing is
1272:45 - taking our code files and putting them
1272:47 - on github pages which is just another
1272:49 - server and then serving them over our
1272:53 - github url
1272:56 - let's refresh the page
1272:58 - looks like our environments has been set
1273:00 - up now so we can click
1273:01 - on the main repository we can click
1273:03 - github pages
1273:05 - and then view the deployment
1273:07 - and you can see that what we just
1273:09 - created is now live
1273:11 - in this link up here you can copy and
1273:14 - share with someone else
1273:16 - and as we resize it it of course is
1273:18 - going to resize to that mobile
1273:22 - mobilely responsive
1273:24 - width and then desktop responsive all
1273:27 - right that is the end of the front end
1273:30 - web development foundations course
1273:33 - it was a long one
1273:34 - i applaud anyone who got through every
1273:37 - minute of it
1273:39 - hope that you enjoyed it be sure to give
1273:41 - free code camp a like on this video and
1273:44 - subscribe to their channel
1273:45 - once again there is a link in the
1273:47 - description with some additional
1273:49 - resources
1273:51 - for each of the topics that i covered so
1273:53 - that if you want to take it to the next
1273:55 - level you can while this is a long
1273:57 - course 20 plus hours it's only the
1274:00 - beginning if you want to be good at
1274:02 - front end web development or even extend
1274:04 - yourself and get into full stack
1274:06 - development you're going to need to
1274:08 - practice there's going to be a lot more
1274:10 - learning to come but hopefully this
1274:12 - course gets you on the right foot it
1274:14 - gets you started in the right direction
1274:17 - on your career to becoming a web
1274:19 - developer i wish you the best of luck in
1274:21 - your journey
1274:22 - to stay connected with me i'm pretty
1274:25 - active on twitter at zg underscore dev
1274:28 - dev so feel free to connect with me
1274:31 - there i've also got a youtube channel of
1274:34 - my own would really appreciate
1274:36 - you hop over there and check out what
1274:38 - i've got on that channel so long and
1274:40 - happy coding