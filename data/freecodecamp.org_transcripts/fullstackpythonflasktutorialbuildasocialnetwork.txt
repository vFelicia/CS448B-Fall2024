00:00 - guys today we are going to create a
00:02 - social network using flask and python by
00:04 - end of this video you will know how to
00:07 - create a full stack social network
00:08 - including a database server and your
00:11 - front end and yeah so let's get right to
00:13 - it thanks for watching
00:15 - so first thing that you want to do is
00:16 - create your directory for your project
00:19 - so we're going to call the directorynet
00:21 - so let's go ahead and create that now
00:22 - we're going to say open up a terminal or
00:24 - command prompt and say mkdir net okay
00:28 - then we want to go ahead and change into
00:30 - that net
00:32 - and it's going to be an empty folder at
00:33 - this point now what we want to do is say
00:36 - pip install so assuming you have python
00:38 - installed on your computer you're going
00:40 - to have pip which is the python package
00:42 - manager we're going to say pip install
00:44 - virtual env
00:46 - okay so virtual env is a package that
00:49 - will allow us to create an environment
00:51 - where we can keep the specific versions
00:54 - of the python packages that we are using
00:56 - for this project separate from our from
00:59 - the python that is installed on our
01:00 - computer okay we are doing this so we
01:03 - can keep track of those packages and
01:05 - then if anyone wants to reproduce our
01:06 - project they know exactly what packages
01:09 - they need to install so once we have
01:11 - virtual env installed on our computer
01:13 - we're going to say source
01:16 - um oh no actually we're going to say
01:17 - virtual env
01:19 - and then we want to say the name of the
01:21 - python version that we're going to use
01:23 - so we're going to say dash dash python
01:26 - equals
01:28 - python
01:30 - 3.6
01:32 - and then we want to
01:33 - specify the name of our directory so
01:35 - we're going to say my env
01:39 - okay so now that's going to create that
01:40 - virtual environment for us again this is
01:43 - where all our pi python packages that we
01:45 - install are going to be saved to once we
01:48 - activate that so the way we do that
01:50 - again we're still in the same directory
01:52 - we say source my vnv
01:54 - bin
01:55 - activate
02:02 - oh one sec guys
02:06 - oh my env there we go bin and activate
02:09 - okay so now we are inside of our virtual
02:11 - environment now we can install our
02:13 - packages so we are going to need uh one
02:16 - package in particular for this which is
02:18 - flask so flask is a uh is a python web
02:22 - framework that makes it very easy to get
02:24 - a website up and running quickly it
02:26 - allows us to create a basic server as
02:28 - well as render html to the page when our
02:30 - user comes to visit it okay so let's go
02:32 - ahead here and say pip install flask
02:36 - so after our virtual environment has
02:38 - been activated that is going to take
02:40 - that package and bring it into our
02:41 - virtual environment for us to use so now
02:43 - let's go ahead here and
02:45 - now we want to create our database
02:47 - schema okay so now we're gonna dive into
02:50 - we have our our dev environment set up
02:52 - we're gonna dive into how to create the
02:54 - application itself so the first step in
02:56 - doing this is creating the database
02:58 - schema so in our case we are only gonna
03:00 - have one table okay and a table in a
03:03 - database is where you store all
03:05 - information okay generally you may have
03:08 - multiple tables in our case we're just
03:10 - gonna have one which is posts so let's
03:12 - go ahead and create a file and we're
03:13 - gonna call it
03:15 - schema.sql okay so this is where we are
03:18 - going to create the uh or specify the
03:20 - values that are going to be in our
03:22 - database table okay so we're gonna say
03:25 - um
03:26 - in this case here let's go ahead let me
03:29 - open it up here
03:30 - um okay so we're gonna say drop table if
03:34 - exists
03:36 - uh posts all right and then we wanna say
03:39 - create
03:40 - table posts so what this is doing is
03:43 - this is saying if that table exists
03:45 - already in the database go ahead and
03:47 - drop it and then create a new one with
03:49 - the things that we are going to specify
03:51 - in just a minute here now these things
03:53 - we are going to specify our unique
03:55 - values in our database so first thing we
03:57 - want to do is create a unique identifier
04:00 - for every post so we want to say id
04:03 - which is going to be the name of our
04:06 - of our column in our database table
04:08 - where that value is going to go so every
04:10 - database table has columns that make up
04:13 - the values that relate to those entries
04:15 - into the database okay so we want to say
04:17 - id
04:18 - integer and that is going to be the
04:20 - primary key and that is going to auto
04:22 - increment so this is a little bit of
04:24 - lingo here guys this is just sql
04:27 - syntax for creating a primary key that
04:30 - auto increments so what that means is
04:32 - this is the the integer that is going to
04:35 - represent or reference the uh each
04:38 - individual post and as each post is
04:40 - added into our database you can think of
04:42 - it as you define the column values and
04:45 - then each post you add is a new row in
04:47 - your table
04:48 - that is going to be a new entry into
04:50 - your database that corresponds with
04:52 - those column values at the top so we
04:54 - have id integer is a primary key and
04:57 - that's going to auto increment so that
04:58 - means for each new entry into our
05:00 - database that is going to increase by
05:02 - one so now we want to create a name so
05:05 - we're going to say name is going to be
05:07 - text that means it's a text value and
05:09 - it's going to be not null
05:12 - so this is going to be for our entries
05:13 - so now we're thinking for each post that
05:16 - comes into our social network we want to
05:18 - be able to create
05:21 - this we want to be able to post an entry
05:23 - into our database right and in this case
05:25 - we want to know the name of the person
05:27 - that created it and we want to have the
05:29 - content of the post and that's what's
05:30 - going to be put into our database so
05:32 - that is the first value name is text not
05:34 - null next up here we want to grab the
05:37 - content so we're going to say content
05:39 - text not null so what not null is doing
05:43 - is that's saying if they uh if we try to
05:45 - create an entry and that is a content or
05:48 - name is not specified return an error
05:51 - because we want name and content to be
05:52 - specified for every single entry in our
05:55 - database okay so now that we've got that
05:57 - let's go ahead and just add our closing
06:00 - parentheses closing semicolon and write
06:02 - and quit this
06:04 - all right so now we have our schema now
06:07 - we're going to use our schema.sql in
06:09 - order to generate our database file so
06:12 - let's go ahead here and use sqlite3 this
06:15 - is a very light version of a database
06:17 - you might have heard of called mysql and
06:20 - this come built in with python so we're
06:22 - going to say
06:23 - sqlite3
06:25 - and then we want to put database.db
06:27 - specifying the name of the database file
06:30 - it can be anything.db and then we're
06:32 - going to put a little less than sign and
06:35 - then we want to put the schema.sql after
06:37 - that okay and by the way guys if you
06:40 - haven't used autocomplete before in the
06:42 - terminal when you start typing the name
06:43 - of a file and click tab it will go ahead
06:46 - and it'll create the rest of that file
06:48 - name for you so again that's what i'm
06:50 - doing there to quickly generate that so
06:52 - we say sqlite3 database.db less than
06:55 - sign schema.sql and click enter so now
06:58 - when we click ls to see the files here
07:01 - we see that there is a database.db file
07:04 - all right so now we have we created our
07:06 - schema we created our database now we
07:09 - need to create the server which is going
07:12 - to handle the interactions with the
07:14 - database so to give you guys just a
07:16 - general overview of what the structure
07:19 - of a full stack application looks like
07:21 - you have your front end which is the
07:22 - view okay when you come to any website
07:25 - you see on the internet you are seeing
07:26 - the front end of a website that is the
07:28 - view and the information that is being
07:31 - displayed on that most often comes from
07:33 - a database so what is going on in
07:36 - between there that would be the server
07:38 - so we have the view and the server
07:41 - receives requests for information from
07:43 - the user which comes from the view right
07:46 - so the user comes to the view from there
07:48 - they're able to make certain requests to
07:50 - the server for information they want to
07:53 - see then the server goes grabs that
07:55 - information out of the database pulls it
07:57 - back and then sends it to the user which
08:00 - is viewing everything so you can think
08:01 - of it in three parts we have the view we
08:04 - have the server and we have the database
08:06 - right and the server is going to
08:07 - interact is going to be the intermediary
08:09 - in between there pulling information
08:11 - from the database making the changes
08:14 - that we want to make before we send it
08:15 - back to the to the user who is viewing
08:17 - it and then sends that information back
08:19 - to the front end to where the user is
08:22 - viewing it okay so right now we've
08:24 - created that final part that's the
08:26 - that's the database so now let's go
08:28 - ahead here and create that intermediary
08:30 - part which is going to be the server so
08:32 - let's go ahead here and say
08:33 - we're going to open up the server and
08:34 - that is going to be
08:37 - app.py okay so now what we're doing here
08:40 - is we're going and we are opening up
08:42 - this file here this is going to be our
08:44 - server file okay and generally speaking
08:46 - you can name that app.py that is sort of
08:50 - a a good practice okay so let's go ahead
08:53 - here now and install the packages
08:55 - actually let's go again a little ahead
08:57 - of ourselves here so let's install the
08:59 - packages
09:00 - so we're going to say pip install
09:03 - um
09:05 - pip install flask right so that will oh
09:08 - oh we already installed that okay so
09:09 - that's going to bring down that package
09:11 - for us that's again how we're going to
09:12 - make our web framework i'm going to move
09:14 - over out of the terminal for you guys
09:17 - and we're going to open up
09:19 - um
09:20 - and grab net okay so this is
09:25 - this is our file right here and again we
09:27 - have our app.py file which is going to
09:30 - be where we are going to add the
09:32 - information for our server okay so the
09:34 - first thing that we are going to do here
09:36 - is we are going to import flask so we
09:38 - want to say
09:40 - uh from
09:41 - flask import
09:43 - flask
09:44 - let me go ahead and move myself down
09:46 - here
09:48 - import flask render template this is
09:51 - going to be for displaying the html that
09:53 - we want to display on the screen then
09:55 - we're going to say also um
09:58 - let's see what else do we need here
09:59 - flask render template oh we need request
10:02 - in order to grab the information that is
10:04 - going to be the content and the name of
10:06 - the user off the request that's coming
10:08 - in and then we see uh let's see here
10:10 - flask render template request um what
10:14 - else are we going to need we are going
10:15 - to need
10:18 - redirect no i think we're good i think
10:21 - that might be enough okay
10:23 - so now we want to go here go ahead here
10:25 - and we're going to say
10:27 - we want to create our actual server
10:29 - object so we're going to say app equals
10:31 - flask and then we go ahead and we pass
10:33 - name as the parameter here okay so that
10:36 - is going to create our server object and
10:38 - it's called app so now that we have that
10:40 - we want to create the routes okay so
10:43 - when you have a server you have
10:44 - different routes that you can hit these
10:46 - are known as endpoints routes basically
10:48 - synonymous but essentially what they do
10:51 - are they are unique endpoints which tell
10:53 - the server which the server uses to
10:55 - decide what data to send back to the to
10:58 - the view half right to the user the view
11:00 - part of our full stack application so in
11:02 - this case say we wanted to log in a user
11:06 - we would often hit an endpoint called
11:08 - something like login and then that would
11:10 - run the necessary code on the server
11:13 - looking for the necessary information
11:15 - that was sent to the server in order to
11:17 - log in the user
11:19 - so in our case here we just want to be
11:21 - able to see a home page and then be able
11:24 - to create posts and see the posts that
11:27 - have been created so let's go ahead here
11:29 - and let's say
11:31 - at app.route and we're just going to do
11:34 - a backslash so this is just going to be
11:36 - the very home page of our application
11:39 - once we start it up which we will do
11:40 - here in just a second so we're going to
11:42 - say at app.route with just the backslash
11:44 - this could be anything like backslash
11:46 - home backslash login backslash whatever
11:49 - you guys want to put you can specify
11:51 - whatever name that's just going to be
11:52 - your endpoint you have to send the
11:54 - request to in order to receive that
11:56 - response back from the server so now
11:58 - we're going to say
11:59 - we want to say methods right
12:02 - so when you are sending information
12:04 - whether you're sending information or
12:07 - any kind of information on the internet
12:09 - we use things called uh methods so in
12:11 - this case uh the methods are going to be
12:14 - or include post put delete and there's a
12:18 - few other ones as well uh get is is
12:21 - obviously the most common one so when
12:23 - you make a request to see any web page
12:25 - on the internet that's a get request
12:27 - you're saying i want to get this
12:29 - information and they send it back
12:31 - generally that is going to be the web
12:32 - page the initial web page okay
12:35 - beside that we have post which is saying
12:37 - here's some information store in the
12:39 - database uh put which is saying here's
12:42 - some information you probably already
12:44 - have this in the database update what
12:46 - you have okay and then finally delete is
12:50 - here's some information about what we
12:52 - want you to remove from your database
12:54 - okay now all of these methods these put
12:56 - post uh delete um and get these are all
13:00 - known as this is what's known as crud
13:02 - but as another acronym you may have
13:04 - heard of but essentially these are again
13:06 - how you send the data from the um
13:10 - from the front end and these are all
13:12 - user actions so these all these are just
13:14 - acronyms for user actions okay so let's
13:17 - go ahead here and say there's two
13:18 - methods that are allowed for this
13:20 - endpoint
13:21 - that is just going to show our our page
13:23 - with the posts and be able to take in
13:25 - information so we're going to say the
13:27 - methods are get in order to get the page
13:30 - and post okay
13:32 - so when the post is for submitting
13:35 - all right so now that we've got our our
13:38 - app.route here we're going to create a
13:40 - function that's going to execute when we
13:42 - hit this endpoint so we're going to say
13:44 - def
13:44 - index we're just going to call this
13:46 - function index
13:48 - and then we're going to say uh we want
13:50 - to say if
13:51 - request dot method
13:53 - equals get
13:55 - then in this case we're just going to
13:56 - pass okay because if it's a get request
13:59 - we're going to go ahead and return
14:01 - the template that we want our user to
14:03 - see right because they're requesting to
14:05 - see the web page so we're going to say
14:06 - return render template and we're going
14:09 - to create this in just a second but for
14:11 - now it's going to be called index.html
14:14 - okay we're going to create that html
14:16 - file that our user will see when they
14:19 - send an initial get request to our
14:21 - server uh in just a second here so if
14:24 - request.method equals get we want to
14:26 - pass now otherwise here
14:29 - if
14:30 - request.method
14:31 - equals post
14:33 - then we want to go ahead here and we
14:35 - want to grab the content so if it's a
14:38 - post request we are making the
14:40 - assumption that our user has already
14:42 - come to our page and they are now
14:43 - posting information to our
14:46 - web page via some input fields that they
14:49 - see on their end okay so we want to say
14:52 - request dot form dot get and we're going
14:56 - to name our inputs in just a second but
14:58 - we're going to call them name
15:01 - and we're going to say
15:02 - request.form.get and then we're going to
15:04 - call the other one uh
15:06 - name and we'll say
15:08 - post okay just for this is going to be
15:10 - the value of whatever our user is the
15:12 - actual information the uh
15:14 - the text that our user is posting uh
15:17 - this is different from this post okay
15:19 - this is the method itself and then this
15:21 - is just a variable that's going to be
15:23 - part of that data that we receive that
15:26 - is going to contain the text okay
15:28 - so we're gonna have a name
15:32 - name equals that and post equals this
15:36 - and then we're gonna go ahead here and
15:37 - now we're going to create um that post
15:40 - and store it in our database okay so
15:42 - we're going to call a method called
15:44 - create post and we're going to pass in
15:46 - name and post okay so now let's go ahead
15:49 - here and actually create the file that's
15:51 - going to interact with our database okay
15:54 - so we need we created our database and
15:56 - right now we're starting to create our
15:58 - server which is going to handle requests
16:00 - but now we need a way for our server to
16:02 - interact with our database and we're
16:04 - going to create a thin layer that uh of
16:06 - functions that our server is going to
16:08 - use to add things to the database or
16:11 - remove things from the database okay so
16:13 - let's go ahead here and create that file
16:15 - now
16:16 - and we're going to call that file
16:18 - models.py
16:20 - okay
16:21 - so into this file we're going to say
16:23 - import sqlite3
16:25 - okay and then we're going to go ahead
16:26 - here and do some do some path uh some
16:30 - pathing
16:32 - so essentially guys when we get to this
16:34 - um when we get to this file here
16:38 - when we get to this file here this is
16:40 - going to be the thin layer that is going
16:42 - to contain that information that is
16:45 - going to allow our server to interact
16:46 - with the database here and in this case
16:49 - we want to directly know where our
16:51 - database file is so we can open that up
16:53 - and interact with that so we're going to
16:55 - say root equals path dot dur name and
16:58 - we're going to say path dot rel path
17:01 - file
17:03 - so again essentially this is saying get
17:05 - the directory name and then get the
17:08 - direct path to whatever file we pass in
17:11 - as the file for this okay so we're going
17:14 - to say
17:15 - so we're going to use that in just a
17:16 - second you guys will see how that ties
17:18 - in nicely but we're going to go ahead
17:19 - here now and say uh create a function
17:22 - that's going to create a post okay so
17:24 - when that request comes in it's going to
17:26 - call this function with those with the
17:28 - uh with the name and the post data from
17:32 - that request and then it's going to
17:34 - insert that into the database so let's
17:35 - go ahead and say def
17:37 - create post
17:38 - and remember it's going to receive two
17:40 - parameters that is name
17:42 - and content
17:44 - okay and now we want to go ahead
17:46 - and create a
17:48 - connection to our database so we're
17:50 - going to say con equals sql.connect
17:53 - and then we want to say path.join
17:56 - root
17:57 - and then the name of our database file
17:59 - so database.db
18:01 - okay so now we've made a connection to
18:03 - our database now we're going to define a
18:06 - a thing called a cursor
18:08 - so essentially guys in order to
18:10 - efficiently pull data or not not pull
18:13 - data but traverse the database and find
18:15 - the information that we need we're going
18:17 - to use a thing called cursor and what
18:19 - the cursor does is instead of grabbing
18:21 - the whole database it just goes to what
18:23 - we need and makes it much more efficient
18:25 - for us okay so we're gonna say cur
18:28 - equals con dot cursor
18:31 - okay so that's gonna say this is the uh
18:33 - this is the the variable that represents
18:36 - the instrument or object that is going
18:38 - to move over our database and find the
18:40 - information we need so now we're going
18:42 - to say cur
18:44 - dot execute
18:45 - so this is going to execute raw
18:48 - sql syntax for inserting a post into the
18:51 - database so we're going to say insert
18:53 - into posts which is our table
18:55 - name
18:56 - and content so insert into the name and
18:59 - content uh columns are let's roll back
19:03 - insert a row into the name and content
19:06 - columns that is going to contain this
19:08 - data that was passed as a parameter okay
19:11 - so we're going to say insert into name
19:12 - content values
19:15 - question mark question mark
19:19 - and then we want to go ahead here
19:21 - and fill in those values what those are
19:23 - going to be so in this case that is
19:25 - going to be name and content
19:29 - all right so that will execute that sql
19:32 - statement after making a connection to
19:34 - our database inserting in the name of
19:37 - the person who posted and the content of
19:39 - the post next up here we're going to say
19:42 - khan.commit
19:44 - and con.close
19:47 - so that's going to commit that entry to
19:49 - the database finalizing it kind of
19:51 - writing it in stone and then close the
19:53 - connection to the database
19:55 - now we want to create one more method in
19:57 - this file as well which is get posts so
20:00 - we want to say def get posts that's
20:02 - going to be
20:04 - that's actually not going to take any
20:05 - parameters that's just going to pull all
20:07 - the posts that we want out of the
20:09 - database so we can display them on the
20:11 - html template that we allow our user to
20:14 - see so we're going to say def get post
20:16 - and we're going to say con equals sql
20:18 - sql.connect
20:20 - path dot join
20:23 - uh root and database dot db just like
20:27 - above there and then we say cur equals
20:29 - con dot cursor
20:31 - and then we want to execute a little bit
20:34 - different sql this time so we're going
20:36 - to say
20:37 - curve.execute
20:39 - select
20:40 - all which is represented by this little
20:42 - star all from
20:46 - posts
20:47 - which is the name of our table so that's
20:48 - going to pull all the entries out of our
20:51 - table and then we want to go ahead here
20:53 - and say
20:55 - posts equals cur dot fetch all
21:01 - so that will go ahead and store all
21:03 - those uh entries into our database that
21:05 - we pulled out with that last sql
21:07 - statement and store them in the post
21:09 - variable then we want to go ahead and
21:10 - return posts
21:12 - okay
21:15 - all right so that will go ahead and do
21:17 - that that will grab all our posts for us
21:19 - so now we have that file we're able to
21:21 - interact now with our database with that
21:23 - thin layer we have our database written
21:26 - written and now we want to finish out
21:28 - our server here
21:29 - so let's go ahead and uh check this out
21:32 - here
21:34 - and now we're going to go ahead here and
21:36 - create a few final elements okay so this
21:38 - is going to be we have our create post
21:41 - and now we want to go ahead here and
21:43 - just say posts equals get posts right so
21:47 - that is going to go ahead and grab all
21:49 - of the posts using that method we just
21:51 - created in our models.py file here grab
21:54 - all the posts out of the database and
21:56 - return them so that we can display them
21:58 - on the screen so we have post equals get
22:00 - post and then we want to go ahead and
22:02 - return uh well we have our render
22:04 - template right there and then we're
22:05 - going to pass a another parameter and
22:08 - we're going to call it posts equals
22:10 - posts so what this is doing here when we
22:13 - create our template which is what our
22:14 - user is going to see initially and then
22:17 - every time they submit a post we
22:18 - re-render that template updating it to
22:21 - reflect any new posts so in this case we
22:24 - are creating a variable called posts and
22:26 - we are passing in posts so when that
22:28 - template wants to access what those
22:30 - posts are it can do so by referencing
22:33 - this variable that we are passing into
22:35 - it right here you can think of that more
22:37 - or less as a variable okay so we've got
22:40 - that
22:42 - yes so that looks pretty good that
22:44 - should be just about everything that we
22:46 - need here uh oh something else that we
22:48 - do want to do here is say from flask
22:52 - cores import cores okay so this is not
22:55 - always necessary but this these are
22:56 - security precautions that are going to
22:59 - allow uh our server to run properly here
23:02 - uh so essentially we're gonna install
23:04 - this package in just a minute but these
23:06 - are just security precautions to prevent
23:08 - certain things like uh cross-site
23:10 - scripting which could say um essentially
23:13 - that influences our sql could pretend
23:16 - well okay there's a couple different
23:17 - things that can happen there one we
23:19 - could someone could inject new sql code
23:22 - into our application to see every all
23:24 - the contents of our database and we
23:26 - don't want that to happen so that can
23:28 - help do things again protect against
23:29 - that and also cross-site scripting in
23:32 - this case we're not using
23:34 - any javascript specifically so they
23:35 - can't like insert javascript into our
23:38 - code and kind of cheat it in but there's
23:40 - other ways that you can cheat in other
23:42 - code
23:43 - and essentially execute certain things
23:45 - when users are trying to do something
23:47 - else
23:48 - and generally those certain things would
23:49 - be devious things so we're going to go
23:52 - ahead and close
23:53 - close this out now
23:57 - okay
24:00 - all right so that's what we've got now
24:01 - guys let's check out oh yeah we don't
24:03 - need to close it actually so
24:05 - let's check out what we've got we've got
24:06 - our server
24:08 - we have our models.py file which is the
24:11 - thin layer on top of the database to
24:12 - interact with the database we have our
24:14 - database file
24:16 - and then we have our schema and we wrote
24:18 - to generate our database okay so now the
24:21 - final thing we have to do is create the
24:23 - html template that users are going to
24:25 - see when they initially come to the
24:27 - website okay so let's go ahead now and
24:29 - create that um
24:33 - oops
24:34 - okay so let's go ahead and create that
24:36 - now
24:38 - so this file is going to be uh well
24:40 - first we're going to store it in a
24:41 - directory flask always looks in a
24:43 - directory called templates for your
24:46 - templates to display to the user so
24:48 - we're going to create a directory called
24:50 - templates in order to allow flask to
24:52 - find that and then inside this directory
24:54 - we're going to create a file called
24:56 - index.html
24:58 - okay now what this is going to do here
25:01 - is uh we are going to be able to display
25:03 - this to the user and the user is then
25:06 - going to be able to see this html uh and
25:08 - this is where we're going to show the
25:09 - posts and allow the user to submit new
25:12 - posts so we're going to say doctype
25:18 - doctype is html and we want to say html
25:22 - and then we want to put the body of our
25:24 - text so again guys these are just
25:25 - regular old html tags here and in the
25:28 - body here we're going to create a form
25:30 - and we're going to say we're going to
25:31 - say form
25:33 - and then action equals
25:36 - backslash here in between quotes that
25:38 - means it will send whatever method we
25:40 - specify after we submit this form to
25:42 - that endpoint in that case that is this
25:44 - endpoint right here and now we want to
25:46 - say what request so in this case guys we
25:48 - defined it so that if it's a post method
25:51 - then we go ahead and we create these
25:54 - pull this information and then we create
25:56 - the post right we want that to happen so
25:58 - we're going to say uh method
26:02 - equals post
26:03 - and then we want to go ahead here and
26:05 - put that information in our form okay so
26:08 - let's go ahead and say um
26:11 - in here let's put uh input
26:14 - with a placeholder to let the user know
26:16 - what to put in there and that's going to
26:17 - be name
26:19 - and then we're going to say um after
26:21 - that we're going to go ahead here and
26:22 - say name equals uh name
26:26 - okay so this name field is going to
26:28 - specify what the name what so right here
26:32 - remember we're looking for name
26:35 - request.format.getname these values
26:37 - right here that we're pulling are
26:39 - specified in our form by this name field
26:42 - right here okay so we've got that input
26:45 - now we want to create another input
26:47 - and this input is going to be
26:50 - the content of the post
26:52 - so we're gonna say placeholder input
26:56 - placeholder equals
27:01 - equals uh
27:02 - well post content
27:05 - and then we're going to say name equals
27:06 - post
27:08 - okay now finally we have a final input
27:11 - which is going to be our submit button
27:13 - so we're going to say input type equals
27:16 - submit value equals submit
27:20 - all right and then that will complete
27:22 - our form
27:23 - so right here this is the form that is
27:26 - going to be able to submit new posts to
27:28 - our application now we are going to go
27:31 - ahead here and create our um now we want
27:34 - to create our way to show the messages
27:37 - that are in our posts right so remember
27:40 - we are passing this right here post
27:42 - equals posts we want to be able to see
27:44 - all the posts that are pulled out of the
27:46 - database every time we render this
27:48 - template right because we want to see an
27:49 - updated view including all the posts
27:51 - that have been recently submitted every
27:53 - time that we see this template so let's
27:55 - go ahead here and
27:57 - and do that now
27:59 - so we're going to say um we're gonna say
28:03 - let's see
28:05 - we're gonna first create uh some special
28:07 - syntax here for for uh rendering this
28:09 - this python right so this is why this is
28:12 - a special template this is unique to
28:14 - python
28:16 - templating for html specific with flask
28:18 - so we're going to say uh for post in
28:21 - posts so essentially we can write raw
28:24 - python in our html template in order to
28:26 - render things this is pretty cool guys
28:28 - so check this out uh we say four post in
28:30 - post then we want to return a div and
28:33 - we're gonna say in that div we're just
28:35 - gonna have a post
28:37 - post one
28:38 - plus a um
28:40 - colon and post two okay so remember in
28:44 - our database field here in our schema we
28:47 - have our id
28:48 - we have our text and we have our content
28:51 - okay so in this case here when we get
28:54 - all these posts out of the database it
28:56 - is returning a set for us which is going
28:58 - to have those three values so again the
29:00 - first one will be the id at zero index
29:03 - second one will be the name of the first
29:05 - index and third one will be the content
29:07 - at the second index so we want to go
29:09 - ahead and reference that in our
29:11 - index.html file here with that and now
29:14 - these two squiggly backers right here
29:16 - just mean we are we are writing python
29:19 - okay so anytime you're doing like loops
29:22 - or if statements you're going to go
29:23 - ahead and use this and then anytime
29:25 - you're rendering actual python onto the
29:27 - screen you're gonna do that with these
29:29 - two uh two consecutive squiggly brackets
29:32 - with the information between
29:34 - okay so now let's go ahead and close out
29:36 - that div
29:37 - and now we can go ahead here and we will
29:39 - need to end this for statement so again
29:41 - this is specific to
29:44 - flask and python generally speaking
29:46 - python templating uh for html so we want
29:49 - to go ahead and end that loop with the
29:50 - n4 here and now that should just about
29:54 - do it for this here so let's go ahead
29:56 - here and save this template and now we
29:58 - know that we're going to see that
30:00 - template uh when we
30:02 - when we get this here because remember
30:04 - we have return render template
30:06 - index.html it looks inside the templates
30:08 - folder finds that index.html pass in
30:11 - this posts now in that index html we
30:14 - have the form for submitting new posts
30:16 - which when you submit it sends a new
30:18 - post request to this endpoint with that
30:21 - information which is pulled off a new
30:23 - post is created and then oops
30:27 - a new post is created and then we have
30:29 - uh we grab all the posts and return the
30:31 - template again and then in that template
30:34 - we go ahead and we loop over all those
30:36 - posts displaying the name of the person
30:38 - who posted the content of their post and
30:41 - then we end that loop and then we end
30:43 - the that's the end of that template okay
30:46 - so now in order to get our server to run
30:48 - and have anything up and going here
30:50 - we're going to say
30:51 - if
30:52 - name
30:53 - equals main
30:57 - app dot run
30:59 - and we're going to say debug equals true
31:02 - okay so what this is doing is saying if
31:05 - this is the file that is running so this
31:07 - if not if name equals main con syntax is
31:10 - basically saying um if this is fi if
31:12 - this file is the actual file that was
31:14 - selected to run then go ahead and and
31:17 - execute this otherwise it's just a
31:19 - library then don't execute that uh
31:21 - whatever is in that within that if
31:23 - statement block okay so now we've got
31:25 - that app.run dbax equals true
31:28 - so let's go ahead here and now we're
31:30 - gonna see where the errors are because
31:31 - i'm assuming there's there's errors
31:33 - there are almost always errors so let's
31:35 - go ahead here and
31:37 - see what we've got
31:39 - so let's go ahead and activate our
31:41 - virtual environment that has our python
31:43 - packages so we're going to say source my
31:45 - env bin activate
31:48 - virtual environment is activated all
31:49 - right so now we are referencing our our
31:51 - packages that we specifically
31:53 - installed for this application now we're
31:55 - going to say
31:56 - pip
31:57 - install
31:58 - flask
31:59 - cores
32:01 - all right so that will grab that um all
32:03 - right so we got flask cores now i don't
32:05 - think we need any other packages i think
32:07 - those are the only two we used yep
32:10 - okay so that looks good there so now
32:12 - let's go ahead here and try our running
32:15 - our uh server so python app.pi no module
32:18 - name flask all right pip install
32:21 - flask
32:25 - okay so let's try again python app.pi um
32:28 - okay so it looks like for some reason we
32:30 - are not referring to our uh virtual
32:33 - environment here
32:35 - when we try to install that package
32:37 - let's try again here we'll say source my
32:40 - env
32:41 - bin
32:42 - activate pip install flask
32:47 - let's see here python apt up
32:54 - high hmm
33:01 - okay um let's see here so we're gonna
33:03 - try we're gonna try this out we're gonna
33:04 - say um
33:07 - we're gonna say
33:08 - source
33:10 - my env bin activate and then we're going
33:13 - to say
33:14 - which pip okay so it looks like we're
33:16 - using uh the 3.6 we're going to say pip
33:19 - 3 install
33:23 - install flask
33:28 - and we're gonna try python3 app.pi
33:32 - okay there we go so now our server is up
33:34 - and running here let's go ahead and
33:36 - check that out so we're gonna go ahead
33:38 - and
33:40 - put in
33:40 - 127 uh
33:42 - just like that
33:45 - 127.0.0.1 at port 5000 now we are seeing
33:48 - that specified
33:50 - uh right here
33:54 - oh it looks like we have an error okay
33:56 - so get post get posts is not defined
33:59 - okay so we need to import that from our
34:00 - models file here so let's go ahead and
34:02 - say from models import uh create post
34:07 - get posts
34:10 - try again
34:12 - let me move myself out of the way
34:15 - um and let's see here invalid syntax
34:17 - import sqlite3 it looks like we
34:20 - accidentally removed that i
34:22 - put that in there
34:27 - path is not defined
34:29 - um okay from os import path
34:34 - try again
34:37 - there we go okay so now we are up and
34:39 - running here so now let's go ahead here
34:41 - and check this out
34:43 - get post is not defined again here so
34:46 - let's see what the error is
34:48 - um
34:49 - get post is not defined we have our
34:51 - function right here
34:53 - we are importing it
34:55 - get posts
34:56 - and then we are executing it there
35:01 - get myself out of the way here
35:04 - see is something not saved correctly
35:09 - def get post spelling is correct
35:20 - okay guys hang with me we're going to
35:21 - figure it out okay there we go so it
35:23 - looks like something wasn't saved
35:24 - correctly now we have name sql is not
35:26 - defined at sql.connect
35:29 - okay i was wondering how i had so we're
35:31 - going to say import sqlite 3 as sql
35:36 - i don't use sqlite very often so
35:39 - that's my excuse for not knowing that
35:41 - syntax
35:42 - okay so let's go ahead here and say
35:44 - python3 app.pi there we go and now we
35:47 - can pull this up here
35:49 - another error sqliteconnection object
35:51 - has no attribute qser so we're going to
35:54 - go ahead and get rid of
35:56 - that that's what it should be
35:59 - all right ah we don't need that okay
36:02 - now we'll try again
36:06 - expect token end of print statement got
36:08 - post okay so that is in our template so
36:11 - we're getting very close here guys um
36:14 - let's go ahead to our ah we need this
36:16 - other plus right here
36:18 - oh boy okay
36:22 - there we go
36:24 - and we try again
36:31 - there we go okay so now we have our
36:33 - screen here let's go ahead and uh put in
36:36 - an entry and see what happens so i'm
36:38 - going to say name equals john post
36:40 - content is hello
36:42 - submit
36:43 - and again we have a typo in our models
36:45 - file let's go ahead and get rid of that
36:51 - all right
36:52 - and we try again
36:55 - and there we go so john says hello now
36:58 - we can go ahead and here and put um john
37:01 - uh goodbye
37:02 - there we go and our post shows up so now
37:04 - we go ahead and close this out shut down
37:07 - our whole application here
37:10 - and start it up again
37:12 - and we will see those posts are still
37:14 - there because it is pulling from our
37:16 - database file
37:19 - there we go there are posts there's our
37:21 - name our content and there we go again
37:24 - thank you guys very much for watching i
37:25 - hope you guys enjoyed this uh please
37:27 - give me a thumbs up would be great uh
37:29 - please do subscribe if you guys just got
37:31 - here and uh yeah thanks for watching i
37:34 - hope you guys enjoyed have a great night