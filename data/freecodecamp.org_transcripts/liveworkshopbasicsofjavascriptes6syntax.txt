00:00 - but alright and we are live let's see
00:18 - hello free code camp world I don't think
00:21 - there's many of you guys in the comments
00:23 - yet but uh hello we'll give it we'll
00:28 - give you guys a few minutes to get here
00:30 - and then we're gonna get started get
00:32 - under way just to say it some of you
00:35 - guys may not know but um the I'm
00:38 - actually presenting this workshop in
00:40 - front of a classroom of students part of
00:42 - night club we won't work the Computer
00:44 - Science Society so sometimes I'll be
00:46 - talking it out that way and that'll be
00:48 - to the students in the room with me and
00:49 - sometimes I'll be facing the camera and
00:51 - talking to you guys
00:53 - so give you a few more minutes to get in
00:56 - get in here and yeah we'll get underway
00:59 - who in a free code camp has ever used
01:01 - JavaScript before there we go I see if I
01:09 - see a few people saying they have
01:11 - awesome cool so to answer a question
01:18 - just got this will only be covering some
01:21 - es6 the goal of today's workshop is
01:25 - going to be a introduction to variables
01:28 - and data types in JavaScript and then
01:30 - we're gonna work into using some of the
01:33 - fun es6 syntax to really show off some
01:36 - of the cool things you can do with
01:37 - javascript and the JavaScript language
01:39 - and then from there we'll talk a little
01:42 - bit about some next steps some
01:44 - implementation so cool I see a lot of
01:47 - you guys are in here now we're gonna get
01:49 - underway so if everyone can navigate
01:52 - over to code pen dot IO it's the site
01:56 - you see on my screen here we use this
01:59 - last time in our react talk and it's
02:01 - really great website I highly recommend
02:03 - using this for all like learning and
02:05 - even just you're building something it's
02:07 - really fun it updates live for you and
02:09 - it's on what you can check out other
02:11 - people's fun projects as well
02:13 - so to start off we're gonna create a new
02:15 - pen and this time we're gonna do nothing
02:19 - to the config we're gonna write strictly
02:22 - JavaScript and then down in the bottom
02:25 - left corner you should see the console
02:27 - button I want everyone to press the
02:28 - console button for me this is gonna be
02:31 - where a lot of the stuff that's gonna
02:33 - happen is gonna show up so we'll make
02:35 - that nice and big and I'm gonna turn
02:39 - over it here get my notes up and we're
02:44 - gonna get started so I hope many of you
02:49 - at least have a somewhat of an idea
02:51 - about what um you know what JavaScript
02:55 - and what coding in general is you know
02:58 - we deal with data we have data in data
03:01 - out we want to do stuff with that data
03:02 - and the way we do that is by very most
03:06 - basic concept we declare that that data
03:08 - exists so in JavaScript the way we do
03:12 - that it's contrary to Java or C is in
03:16 - JavaScript we're gonna use the VAR
03:18 - keyword that stands for variable then
03:21 - we're gonna give it a name so we're
03:23 - gonna say literally name equals and then
03:26 - unlike most languages where you should
03:28 - be declaring a datatype like a string or
03:31 - an integer or a double we could just put
03:34 - whatever we want to put into this
03:35 - variable here and in this instance we're
03:37 - gonna use a string so you can either use
03:38 - a single character or you can use double
03:41 - quotes and then just type your name I'm
03:43 - gonna take mine another aspect to
03:46 - javascript is semicolons a lot of people
03:48 - are like are semicolons necessary in
03:50 - JavaScript they are not I use them
03:53 - because I write Java a lot as well and
03:56 - it's just really easy for me to when I'm
03:58 - reading my code if I can see a semicolon
04:01 - I know that's the end of a line so
04:02 - you'll see me using that but if you're
04:04 - uncomfortable or you don't feel like
04:05 - typing that extra character you don't
04:07 - have to at all so we're gonna declare a
04:10 - few more variables here I'm gonna say
04:11 - age and then we're gonna go ahead and
04:14 - I'm gonna do something fun we're gonna
04:16 - say favorite bands and my favorite bands
04:19 - I recently got a real friends sweater in
04:22 - the mail it's a lot of
04:25 - really excited to get that then we're
04:27 - gonna add another one
04:28 - it's called movements these bands are
04:30 - really small and then one final one and
04:35 - you guys can fill yours with whatever
04:37 - you want you don't even have to put
04:38 - bands in there you can put your favorite
04:40 - ice cream flavor your favorite cookie
04:41 - type your favorite pizza anything at all
04:44 - and if you notice we have three
04:47 - different data types here you have a
04:49 - string represented in the name you have
04:51 - the age which is an integer and in Java
04:54 - there is no difference between declaring
04:56 - integers and declaring doubles so if we
04:58 - were to say fraction we can go ahead and
05:00 - we can say 2.5 and that would be
05:03 - essentially the same thing as writing a
05:04 - double or a float in Java and then we
05:08 - have a list so what's kind of cool in
05:11 - JavaScript is that lists are a native
05:13 - datatype their collection just like they
05:16 - are in Java or Python or C and in this
05:19 - collection in this list I'm using
05:20 - strings but what's unique to javascript
05:23 - is that you can actually put any type of
05:25 - data you want inside a list with other
05:27 - data types so I can actually go ahead
05:29 - and put in a number here and that is
05:31 - valid it's not very useful but it's very
05:34 - it's it's valid and this will run just
05:36 - fine
05:37 - we're gonna remove that because we're
05:39 - not going to do anything with it next
05:42 - we're gonna go over and what an object
05:44 - is so an object in JavaScript is similar
05:48 - to like a class in Java but a lot more
05:53 - lot basic there are classes in
05:56 - JavaScript but we're not gonna go over
05:58 - those because you could spend a whole
06:00 - hour teaching just classes in JavaScript
06:02 - but an object is declared just the same
06:04 - way as these previous data types were so
06:06 - I'm gonna say me because I'm the data I
06:09 - have above describes Who I am and then
06:12 - we're gonna use curly braces so we're
06:14 - going to form this kind of code block
06:15 - and then we're gonna say name or we're
06:17 - gonna use string name and this is a
06:20 - property then we're gonna use a colon
06:22 - and then the data that that the variable
06:25 - name then we do another one age the
06:30 - agent
06:32 - and then we're gonna say favorite bands
06:37 - put the favorite bands in here and then
06:41 - we're gonna use one more and we're gonna
06:43 - do favorite pizza and if you notice I
06:50 - haven't declared a favorite pizza the
06:52 - variable yet but that's okay because I'm
06:55 - going to go ahead and put the string
06:57 - that describes my favorite pizza right
06:59 - here and I'm just gonna say buffalo
07:02 - chicken you can agree or disagree with
07:06 - me on that one awesome so this is the
07:12 - basics to describing variables in
07:14 - JavaScript so you know there's there's
07:16 - really not a whole lot to it you know
07:18 - you have your list you have an object
07:20 - you have doubles you have integers you
07:24 - have strings and if you are wondering
07:26 - how to like access this data all you do
07:29 - is you know declare in our new line
07:30 - we're gonna use a statement called the
07:32 - console dot log statement and console
07:35 - dot log is gonna let us print something
07:37 - to the console which is this big grey
07:39 - box to the right is so this is since
07:42 - we're just gonna print out the name my
07:43 - name real quick and if you notice it
07:46 - pops up on the side immediately code pen
07:49 - live updates as you type so sometimes
07:51 - the console will get filled and I'm just
07:53 - gonna clear it using the Clear button so
07:55 - you'll see me do that throughout the
07:56 - throughout the talk and we can go ahead
07:59 - and we can change what's in here change
08:00 - it to age you know 18 will appear on the
08:03 - screen and then you can even plug in an
08:06 - array and it'll print out the raw array
08:10 - string with its um with what it's
08:14 - contained with and then let's uh now
08:17 - you're probably wondering great we're
08:19 - storing all this data and the object
08:21 - especially we have this kind of all the
08:24 - data is mashed into one little object
08:26 - how can we access the data in that
08:28 - object we have a couple different
08:30 - methods we can go ahead and we say the
08:32 - object and then we can put a square
08:35 - bracket and then we can put the string
08:37 - of the property name inside that square
08:40 - bracket like name you notice here it is
08:44 - right here
08:45 - here's
08:46 - and then on a new I'm gonna create a new
08:48 - line so you guys can keep that one there
08:50 - for reference we're gonna go ahead and
08:52 - we're gonna write me dot favorite pizza
08:59 - if you notice down here at the bottom of
09:02 - the screen buffalo chicken who was added
09:04 - to the console so here are two different
09:05 - ways to access very access data types on
09:09 - a javascript object so how's it going
09:12 - over in the free code camp side you guys
09:16 - have any questions yet let's say you do
09:22 - a little bit of scroll uh yeah sorry
09:25 - some people are asking if a list is an
09:27 - array and yes it is I'm a array list
09:31 - collection those are all very synonymous
09:33 - words and someone else asked let and yes
09:37 - we should be using light and that's what
09:40 - I was gonna get to next is that there's
09:41 - these two magical words in JavaScript
09:44 - that are used for variable declaration
09:46 - called the Const and the let so we've
09:50 - been using the ver keyword here and
09:52 - you'll and what we can do with there
09:54 - Lavar is you can actually reassign that
09:57 - if you're not if you're using unchecked
09:59 - mode so there's way you can make
10:01 - JavaScript evaluate in something called
10:02 - strict mode and in which case what I'm
10:04 - about to do won't is not allowed but in
10:06 - all intensive purposes what I am going
10:08 - to do is valid in JavaScript you say var
10:11 - read Eclair the name and I'm gonna say
10:14 - my last name and then all of a sudden if
10:16 - I was to go ahead and console dot log my
10:18 - name at the bottom you'll notice at the
10:21 - very bottom of the screen here the new
10:24 - variable declaration for name comes up
10:27 - but let's declare a let variable let
10:30 - operates in much the same way as var
10:33 - where you say let and then the variable
10:35 - the variable name we're gonna go for
10:37 - simple a and you assign it a value 1 and
10:40 - this access is the same way as a
10:42 - variable well you can add it to objects
10:44 - but what's special about let is that
10:46 - it's it's block scoped and what that
10:49 - means is if you were to use this if
10:51 - you're familiar with Java where your
10:53 - wine you have a loop you have a for loop
10:55 - we're gonna have like you know in Java
10:57 - you would use like in
10:58 - I well in JavaScript you would want to
11:01 - use let I equals 0 I is less than you
11:05 - know arbitrary number 5 I plus plus and
11:08 - then we want to you know do something in
11:10 - here I'm not gonna actually do anything
11:11 - you know you can do something in that
11:12 - code block that I variable that you've
11:15 - declared in that for loop is accessible
11:18 - inside here you could call I from inside
11:21 - this for loop but then when you go
11:24 - outside of the for loop that I variable
11:27 - is no longer declared and that has to do
11:30 - with the scope of the variable I don't
11:36 - it's kind of confusing it's also kind of
11:39 - very it's more first in tactical
11:40 - purposes that difference between var and
11:42 - let but just know that that's kind of
11:45 - where it comes from but the third way of
11:48 - declaring datatypes using the Const
11:50 - keyword is the most is the most useful
11:52 - one this is like declaring a final value
11:55 - in Java where when you declare a
11:57 - variable as a constant it cannot change
12:00 - so let's go ahead and let's declare a
12:02 - new one constant and B and we're going
12:03 - to give it you know two very simple and
12:06 - we're gonna print it out to the screen
12:10 - at the bottom you should see two comes
12:12 - up it does and now let's reassigned to
12:15 - so say B equals three and then we're
12:19 - gonna say console dot log and as long as
12:22 - this doesn't fail me now it should not
12:24 - get reassigned and if it does I believe
12:27 - it is crashed because if you notice
12:29 - nothing has reappeared underneath this
12:31 - two and that is because this is invalid
12:33 - if code pen doesn't show errors inside
12:37 - of the console but I can what I'm
12:39 - telling you right now is that this is
12:41 - invalid Rheda Clara a constant is not
12:44 - gonna work in any other sort of if you
12:46 - were to run this in a browser console or
12:49 - if you were to run this through nodejs
12:50 - or some compiler like babel it will
12:53 - throw an error at you and say invalid
12:55 - you can tree declare a constant and it's
13:00 - really again this is a the value of
13:03 - having these different ways of declaring
13:04 - variables is more for program structure
13:07 - so program structure in a sense where if
13:09 - we're writing a very complex
13:11 - there's a lot of developers working on
13:13 - it and we declared variable like the
13:15 - database URL and we don't want that URL
13:18 - to change we would declare it as a
13:20 - constant that way other developers that
13:23 - are using our code will know that that
13:26 - database URL is never gonna change and
13:28 - they can rely on that value never
13:31 - changing because it's declared as a
13:32 - constant
13:33 - now if variable was declared as a let or
13:36 - var then there would be some sort of you
13:39 - know obfuscation where it could get
13:41 - changed where some aspect of the code
13:43 - could change that value probably in some
13:45 - iterator function or the sort and then
13:48 - it would be unreliable to write more
13:50 - code based on that potentially changing
13:53 - data type cool so that's pretty much all
13:57 - I have for the variable declaration and
14:00 - now we're gonna move into some of the
14:01 - fun es6 stuff that we can use with these
14:04 - variables before we dive straight into
14:07 - that though we're gonna go over one
14:09 - concept that's called functions or
14:11 - methods in Java you declare a method by
14:15 - writing the function keyword then the
14:17 - variable then the method name you pass
14:21 - it its parameters inside the parentheses
14:24 - and then you add some squiggly brackets
14:26 - and then inside there you can do
14:28 - whatever you want with the parameters
14:30 - but at the end you should return
14:32 - something in our case we're gonna return
14:34 - a plus B and if we go below here and we
14:38 - call some there we're gonna use a
14:39 - console dot log so we can actually see
14:41 - it and we say sum of one comma two we
14:47 - should see in our console three so magic
14:52 - right I couldn't believe it myself when
14:55 - I first wrote a function in JavaScript
14:56 - it was that easy
14:59 - so yeah that's basic basic function
15:04 - syntax it's very you know very simple
15:06 - but let's uh let's make this a little
15:08 - bit more complicated let's um I'm gonna
15:11 - show you guys a sneak peek into an array
15:14 - method called map so we're first gonna
15:16 - declare a constant we're gonna say
15:19 - scream it
15:21 - it's gonna be our it's gonna be the name
15:23 - of our new array and that array is gonna
15:27 - be the favorite bands dot map so in
15:32 - JavaScript and in the es6 package it
15:35 - sent a ton of new really useful
15:38 - arraignment array methods that let you
15:41 - iterate over the contents of an array
15:43 - without having to use encapsulating for
15:46 - loop so with what that means is you know
15:50 - you pass it this method and then we can
15:52 - create a function and we're gonna say
15:54 - you know like we're just gonna call the
15:56 - function just X because it's simple and
15:58 - then we're gonna or actually we don't
15:59 - need to call it anything that's my
16:01 - mistake just function and then
16:02 - parenthesis and then we're gonna pass it
16:04 - the band parameter use the squiggly
16:08 - brackets and then we will return the
16:11 - band dot to uppercase and what this will
16:18 - do is this map function will loop over
16:21 - the entirety of the favorite bands array
16:24 - and return each value fully upper case
16:27 - inside a new array assigned to the
16:30 - screamin variable so we can go down here
16:34 - and if you and you do console dot log
16:36 - and you put in scream it it should on
16:41 - the side you should see all of the bands
16:44 - in full upper case letters sweet so this
16:51 - is very simple we're using function
16:53 - notation but I want you to kind of like
16:56 - look back at this we got a lot going on
16:58 - here for a pretty simple task you know
16:59 - we have this really long function word
17:01 - that's eight it's eight bits of data
17:03 - right there one byte of data is going
17:05 - for just the keyword function inside our
17:08 - map inside our map method and that
17:10 - function keyword is almost as long as
17:12 - our variable name itself so can we
17:15 - reduce that we can with something called
17:19 - arrow functions arrow functions is
17:21 - something again new to es6 the syntax is
17:24 - gonna look really weird but if you've
17:26 - come from a Java background and you've
17:28 - ever used a lambda expression before
17:29 - it's gonna look similar to that so we're
17:32 - gonna go ahead and run describe a new
17:34 - very well we're call this one constant
17:36 - whisper whisper it we're gonna go again
17:40 - over the favorite bands all right we're
17:44 - gonna map and this time instead of
17:46 - writing the function keyword we're just
17:49 - gonna write parenthesis just like that
17:51 - and we're gonna put the band parameter
17:54 - right in there and then we're going to
17:56 - use equal sign greater than sign looks
18:00 - like an arrow doesn't it hence why it's
18:02 - called an arrow function and then you're
18:04 - gonna use smoothly brackets just like we
18:06 - did in the previous function and we're
18:08 - gonna return the band to lowercase now
18:13 - this method when we print out the result
18:17 - to our to the console we should see the
18:22 - bands all lowercase and if you notice
18:26 - we've decreased the amount of characters
18:28 - we've used in our function and that's
18:31 - not all that this lets us do arrow
18:33 - functions also have a really really fun
18:36 - syntax we can play around with we can
18:38 - actually rewrite this function that we
18:40 - just wrote even more even even simpler
18:43 - so I'm gonna quickly I'm gonna go ahead
18:45 - and I'm gonna come I'm gonna comment
18:48 - that out if you're on a Windows you can
18:51 - do control forward slash while
18:53 - highlighting text and it will comment
18:55 - the whole block on Mac you're gonna use
18:57 - command forward slash so then let's read
19:01 - Eclair the whisper it alright we're
19:06 - gonna say favorite bands again we're
19:09 - gonna do dot map and this time we're not
19:12 - gonna write parentheses we're going to
19:13 - write band just the word band arrow
19:16 - function and then we're gonna write band
19:19 - again and then the two lowercase method
19:24 - look at that one line and we got the
19:27 - same behavior that we did with three
19:30 - lines of code what this is doing what
19:33 - this arrow function syntax is doing is
19:35 - with a single oh that is pretty small
19:38 - I'm sorry guys let me make that a little
19:40 - bit bigger for you with that
19:44 - with this single parameter datatype here
19:48 - what that's letting us do is with we can
19:52 - exclude the parentheses dropping the
19:55 - parentheses means that this error
19:56 - function is going to receive one
19:57 - argument one parameter that parameter is
20:00 - band then the return statement this
20:04 - return statement is going to do one
20:05 - thing and one thing only it's going to
20:07 - return whatever comes after that arrow
20:10 - function that that arrow that arrow key
20:12 - right here so in this instance we're
20:14 - just lower casing the entire string but
20:17 - in a but in another example when I use
20:20 - arrow functions and these array methods
20:23 - in react in the react library I'm
20:26 - writing these complex rendering
20:28 - algorithms that feed in bits of data
20:30 - from a database and then you surrender
20:32 - like 50 different nodes that have very
20:36 - similar structure very similar component
20:38 - structure but change just something as
20:40 - simple as the text and with react all I
20:43 - do is I write an arrow function just
20:45 - like this I loop over my database like
20:48 - the data for my database and I just
20:50 - passed it whatever's changing to my
20:52 - arrow function and my arrow function is
20:53 - just gonna return a piece of react
20:55 - component back to the the application
20:58 - and then all of a sudden I have 50 50
21:02 - nodes generated from one line of code
21:04 - and that's really the magic that goes
21:06 - into using arrow functions and these
21:08 - array methods in ESX cool so let's let's
21:15 - go ahead and go over to another aspect
21:20 - of es6 called default parameters and
21:22 - then once we finish that I'm going to
21:25 - take a quick sip of water and we're
21:27 - gonna do a little bit of questions just
21:28 - to make sure you guys are all caught up
21:30 - so before I declared a function called
21:33 - some this time I'm gonna call a function
21:36 - diff and we're gonna do x and y let's
21:38 - spruce it up we're gonna return the
21:41 - difference of x and y and we're gonna
21:45 - man here I'm gonna do console dot log
21:48 - difference
21:50 - of three notice anything wrong
21:56 - go forth exactly
22:01 - I need a y-value I've only passed one
22:03 - parameter or argument to my DIF function
22:06 - but it's expecting two as a result
22:10 - JavaScript doesn't throw any errors all
22:12 - its gonna do is return n a n which
22:14 - stands for not a number and this is and
22:17 - this is expected this is what JavaScript
22:21 - does it tries to assume that you meant
22:23 - to do this but let's say we did it we
22:27 - never want to receive not a number from
22:29 - our function in fact I will always want
22:31 - to see a number even if that number is
22:32 - wrong I still want to see a number there
22:34 - so we can do is we can go inside our
22:37 - function declaration and we can next to
22:40 - the parameter put an equal sign and then
22:43 - whatever the default value is I'm gonna
22:45 - see the default value is zero now if you
22:47 - notice on the right the three the the n
22:50 - a n was changed to three because three
22:52 - minus zero is three and then if we go
22:56 - ahead and let's see what happens if we
22:58 - pass no arguments the diff function it
23:00 - goes back to returning nine a number and
23:02 - then that a number is because the X is
23:05 - not defined again we're not passing
23:08 - anything in for the x value now but we
23:10 - can go ahead and we can declare
23:11 - something as a default for the X let's
23:14 - use zero again and now if you notice
23:15 - even when we call the diff function and
23:18 - there's nothing passed to it we're still
23:21 - gonna get a number that will keep our
23:22 - application running this is really
23:24 - useful for when you have some sort of
23:26 - useful default data I love to go back to
23:29 - react in react you have all these
23:30 - components I'll have textual user
23:33 - interface components you never want to
23:35 - return some nasty error to your users so
23:38 - instead if you could set a default like
23:40 - for example a string a basic string
23:42 - that's gonna be a lot more better for
23:45 - your user experience than it would be
23:46 - just to you know throw an error and have
23:48 - the whole application crash because you
23:50 - forgot to send a a parameter so cool so
23:54 - I'm gonna take us a quick minute if you
23:57 - guys have any questions I'd be happy to
23:59 - take them at this time
24:01 - no I will check the the free code camp
24:05 - chat real quick let's see okay so
24:12 - someone asked should one start by
24:14 - learning JavaScript syntax and then es6
24:17 - or right away learn es6 syntax so you
24:20 - should definitely learn JavaScript first
24:24 - because even though es6 is javascript
24:28 - when you're writing code that good
24:32 - that's gonna be used on every browser it
24:34 - may not always run the es6 syntax not
24:38 - yet at least
24:39 - so it's best that you learn the basics
24:41 - and all the very generic JavaScript
24:44 - syntax first and then move on to you
24:46 - know sprucing it up with some es6 plus a
24:49 - lot of the es6 things that i'm gonna
24:51 - show you today are quite simple but
24:53 - there's just as much complicated things
24:55 - that come with es6 that even i'm still
24:58 - trying to you know wrap my head around
24:59 - and really fully utilize in my
25:01 - applications all right let's see um
25:06 - another one is the rule for that syntax
25:09 - that you can only do a single statement
25:11 - otherwise you need to use parentheses
25:12 - great question martin yes in the above
25:16 - arrow function the one where we lower
25:19 - case the band if we wanted to write
25:23 - multiple lines here we would have to use
25:25 - either those squiggly lines and a return
25:27 - block or we can wrap this in parenthesis
25:30 - and in those parentheses act as kind of
25:33 - like a mock code block and that code
25:37 - block lets it will return everything
25:40 - inside of the parenthesis so let me fix
25:45 - this up a little bit so what this just
25:47 - did is now we can go ahead and do is now
25:49 - we can actually write multiple lines but
25:51 - we're gonna return everything inside it
25:53 - so this gets a little weird
25:55 - and if kind of again this kind of this
25:57 - is this is in there mainly for react
25:59 - when you're returning a JSX component
26:01 - which is HTML so you know how HTML could
26:04 - have multiple things within it and that
26:06 - nested structure requires multiple lines
26:08 - so in that instance you would use these
26:10 - parentheses to return just
26:13 - JSX component but that multiple line JSX
26:16 - component in our example we're only
26:18 - using one line of code so we're only
26:20 - returning one line of code great so
26:25 - we're gonna move on to another really
26:28 - fun operator called the spread operator
26:30 - and this is gonna replace array
26:33 - concatenation so let's go ahead and
26:39 - let's define another array I'm gonna
26:42 - call this array more bands I like music
26:45 - so I'm gonna go ahead and add a few more
26:47 - in here so here's one and here's another
26:52 - and now I want to make one list that
27:00 - contains my more bands and my favorite
27:03 - bands so let's go ahead and write let
27:06 - all bands equal favorite bands dot
27:14 - concat more bands and if we print that
27:19 - out to the screen we should see an array
27:23 - containing both the three bands that I
27:27 - listed at the beginning of this talk and
27:29 - the two bands I just added to it
27:31 - expected and this uses a you know a
27:35 - traditional JavaScript function called
27:37 - concatenate and it works just like any
27:39 - you know just its concatenation take
27:41 - everything from one thing and you know
27:43 - and everything from another object and
27:45 - you smush it all together but let's say
27:48 - we had a third array let's say even more
27:52 - bands okay
27:53 - and in this one I'm gonna write ACDC oh
27:57 - that's not ac/dc and Green Day we're
28:03 - gonna go ahead and we're gonna
28:04 - concatenate that one now we can go ahead
28:07 - and we can probably we can chain it so
28:09 - we can do concat even more bands and
28:12 - that just kind of looks nasty or we
28:15 - could have you know we could have wrote
28:16 - all bands dot can cat even more bands on
28:21 - the line below it and
28:25 - reassign delete that and then it should
28:30 - yeah so then we can concatenate and then
28:33 - see how even though we read this line we
28:35 - would have to reassign the all bands
28:38 - variable to this new concatenation and
28:41 - look we want to concatenate all three of
28:44 - these lists but right now we're using a
28:47 - the concat statement over and over again
28:49 - and we're read eclair in variables and
28:51 - it's getting messy there's a lot of text
28:53 - let's simplify this let's first of all
28:56 - I'm gonna delete everything here oh
28:57 - please don't go back I'm going to leave
29:00 - everything here and I'm declare a newer
29:03 - write a blank are right inside that
29:06 - array and do three dots so and then
29:10 - after those three dots we're gonna write
29:12 - the name of our array that we want to
29:15 - concatenate favorite bands on the right
29:17 - you should see the three bands pop up
29:20 - sweet then next and do comma three dots
29:24 - again and then more bands if you look
29:28 - over to the right the other array shows
29:30 - up thank you I bet you can imagine what
29:32 - we're gonna do next three dots even more
29:36 - bands and now with some nice whitespace
29:40 - tidying by the way javascript is a non
29:44 - white space dependent code language so
29:48 - you can do whatever the whatever you
29:50 - want with the white space between things
29:52 - javascript doesn't care because it
29:54 - interprets based on keywords not based
29:57 - on white space so with a nice little
29:59 - syntax right like this we can keep
30:02 - listing all of our arrays over and over
30:04 - and over again and in a real world
30:06 - example let's say we had a database with
30:08 - a bunch of different lists of things I
30:10 - don't know shopping carts and we wanted
30:12 - to make a grand shopping cart instead of
30:14 - trying to concatenate every single small
30:18 - array into one big one and returning out
30:20 - to the user we could build this nicely
30:23 - this nice structure here with the spread
30:25 - operator and spread out all the contents
30:28 - into another another array this is also
30:31 - useful for function declaration back up
30:35 - here we had parameters right
30:37 - actually if we had a array of things
30:40 - let's say again a shopping cart we had
30:42 - an array of we had a shopping cart full
30:44 - of items and we had a function that
30:46 - would I don't know make a really like a
30:48 - pretty print function it would print out
30:50 - all the contents in your shopping cart
30:52 - and we wanted to pass every item in that
30:56 - shopping cart to the function as its own
30:58 - parameter not as one big list but that's
31:01 - own parameter we could actually go into
31:04 - the argument defining area of a function
31:08 - and use the same syntax where we spread
31:11 - out all the properties within an array
31:15 - into some other structure like a
31:17 - parameters list or an arguments list or
31:20 - another array and another example react
31:26 - handles state props and state that's if
31:30 - you guys are interested in what I'm
31:31 - talking about there is a video I did two
31:33 - weeks ago around this time about react
31:35 - to JavaScript and we did talk about
31:37 - props and state and maintaining that and
31:39 - let's say we're updating our state but
31:41 - we want to hold on to all the previous
31:43 - state we could actually go ahead and
31:46 - let's say we had some object here right
31:47 - we had like Const state equals something
31:52 - and we're gonna say like list and that
31:54 - list is gonna have the values 1 comma 2
31:57 - in it I'm gonna I'm gonna quickly change
31:59 - this to let because we're gonna re
32:01 - assign this and then we want to update
32:03 - this state with something new so we're
32:05 - gonna stay state equals and we're gonna
32:07 - say the list but then we want to
32:09 - concatenate to that list so instead of
32:12 - writing like list dot can cat and then
32:15 - you know putting our thing in here we
32:17 - could actually go ahead and we do just
32:18 - put another array right like this the
32:21 - spread operator on the previous list or
32:24 - actually have to use state dot list and
32:27 - then comma our new valuables our new our
32:32 - new variables 3 4 and then all of a
32:35 - sudden if we console dot log this state
32:40 - you'll see we have an object with the
32:42 - list one two three four and if we did
32:45 - that if we did the same console dot log
32:47 - statement let me put it here you see we
32:52 - only have one into so you'll notice this
32:54 - spread syntax is really useful for
32:56 - keeping your code clean and keeping it
32:58 - concise and you know letting things
33:00 - maintain itself without the unnecessary
33:02 - need for methods and large chains of of
33:06 - methods so we can delete we can leave
33:08 - that and now we're gonna go into we have
33:13 - two more things to go over today
33:14 - let me check some questions let's see
33:16 - here um free code camp what do you
33:23 - prefer jQuery or react or view I am a
33:27 - react developer not only I've been
33:29 - learning it for about three years now
33:30 - and I have started to contribute to the
33:33 - open source the open source project as
33:35 - well so I like to focus on react even
33:37 - though I am familiar with jQuery let's
33:40 - see all right cool
33:44 - so let's move on to the last two
33:47 - subjects in today's workshop template
33:50 - literals an object property shorthand so
33:54 - we're gonna start with honestly my
33:56 - favorite feature of es6 and it's called
33:58 - template literals it's another way of
34:01 - removing the unnecessary need to
34:03 - concatenate strings so let's start off
34:06 - by declaring the old way we used to
34:07 - concatenate strings Const s equals and
34:10 - we're gonna build a sentence here but
34:11 - say my name is space plus the name
34:16 - variable which we declared all the way
34:18 - back at the top of this function and
34:20 - we're gonna put a period in here because
34:21 - you know we're writing an essay you know
34:22 - we gotta make sure we have proper proper
34:24 - proper sentence structure you know
34:27 - console dot log put s on the right you
34:31 - should see my name is arrow would name
34:33 - is Ethan but that's my last name
34:35 - cool and that's not too bad but what if
34:38 - we want to make a more complex sentence
34:40 - let's say s2 we're gonna say my name is
34:45 - or actually know what to do my name is
34:47 - Ethan plus
34:49 - sorry plus my last name comma and I am
34:56 - my age years old in the console dot log
35:07 - that to the screen you'll see we get the
35:10 - sentence that we want you know my name
35:12 - is Ethan Arrowwood and I'm 18 years old
35:14 - but that was a lot of typing and it's
35:16 - really gross you know what if we want to
35:17 - change the part of the sentence we got
35:19 - to make sure we don't mess up you know
35:21 - the spacing around the words and that
35:22 - you know the name and age variable
35:24 - doesn't get changed so we're gonna use
35:27 - template strings so we're gonna first
35:29 - gonna call a new variable constant t and
35:32 - now there's a little symbol at the top
35:35 - left of your keyboard next to the one
35:37 - and it's a little like it's a little
35:39 - tick mark it's the main it there's also
35:42 - if you hold shift it would be the grave
35:43 - key and it's gonna look like this and
35:46 - this is template strings inside here
35:49 - we're gonna go ahead and we're gonna
35:49 - write the same sentence that we did
35:51 - before we're gonna say my name is and
35:55 - then instead of doing plus my the
35:59 - variable name we're gonna write dollar
36:01 - sign squiggly bracket it'll
36:04 - automatically add another one to the end
36:06 - of it and inside that just put the name
36:08 - variable put your semicolon and then
36:12 - console dot log the T sentence and if
36:16 - you notice we get the same effect as the
36:19 - the sentence structure wrote above and
36:22 - this time the word is embedded directly
36:24 - in here and if you wanted to add more
36:25 - text to the sentence you can without any
36:28 - more concatenation just comma and my
36:32 - fake age is age but I actually am 18 so
36:38 - let's change that let's have some fun
36:41 - with this
36:41 - I want to square my age in JavaScript
36:44 - you weight a square numbers you use two
36:46 - you use the multiplication sign the
36:48 - shift eight and now and you do that
36:50 - twice and you give it a number and if
36:53 - you notice to the right it doubles the
36:56 - age variable right in line in that and
36:59 - what this does what this template letter
37:01 - what these little code blocks are
37:02 - doing is it's letting you embed
37:05 - basically in embed JavaScript inside
37:08 - your sent inside your strings so that
37:11 - again when you're building these
37:13 - beautiful user interfaces you wanna do
37:15 - something like camelcase
37:16 - a piece of text or you want to scream
37:19 - something in uppercase the whole thing
37:21 - but it's not stored as such you can
37:24 - embed that process right into the
37:27 - rendering string and it will do it right
37:30 - there client-side reducing the load on a
37:32 - potential server or anything you know
37:34 - prior to rendering text to the screen
37:37 - and this and it doesn't you know this
37:41 - isn't what this is there there's so much
37:43 - more you can do with this you can you
37:44 - know do another we can do another
37:45 - sentence and we can say my favorite band
37:50 - is you'll get the same template strings
37:53 - in here and we can say we have the all
37:54 - bands array and we can access the first
37:58 - index of that array using square
38:00 - notation zero and then console dot log
38:04 - the second sent the second template
38:06 - shrink to the screen and all of a sudden
38:08 - my favorite band is real friends very
38:10 - true statement and we wrote that all in
38:12 - one line we didn't have to pull off that
38:15 - variable in any sort of the new
38:17 - declaration we just embed it directly in
38:19 - the string without the need of plus
38:21 - signs or any sort of string
38:23 - concatenation methods cool so there any
38:27 - questions on template strings no I will
38:31 - give a quick check to the chat and we'll
38:33 - see alright someone's asking what are
38:37 - the prerequisites for the react
38:39 - framework like how much of JavaScript
38:41 - etc one should need to learn before
38:43 - starting react framework I can elaborate
38:47 - a little bit more on this at the end but
38:49 - the short answer is get down you know
38:53 - the basics and then start you know be
38:55 - comfortable writing some just
38:57 - client-side there you know work through
39:00 - the basic free code camp front-end
39:02 - projects and once you finish those
39:03 - front-end projects and just native
39:06 - JavaScript you were more than ready to
39:08 - dive right into react
39:09 - and what's phenomenal is that the react
39:11 - community has tons of documentation and
39:14 - a lot of tutorials so it's going to be
39:15 - really easy
39:16 - for you to get started in the react
39:17 - framework when you when you're ready and
39:21 - does it have to be single quotes yes yes
39:24 - mine
39:24 - this tick mark is not the same as a a
39:28 - normal quotation mark which is what was
39:32 - kind of the st. which is on the same key
39:34 - as the double quotation mark this is the
39:36 - key all the way up next to the one
39:38 - button so it's that it's a tick notice
39:41 - how they're slightly different and
39:43 - that's what is template strings they use
39:46 - those special tick marks you cannot
39:48 - embed this the dollar signs squiggly
39:51 - bracket inside any other string cool all
39:57 - right we got one more topic to go here
40:00 - and then we are gonna wrap up so let's
40:03 - talk about object property shorthand so
40:07 - like I said at the beginning of this
40:08 - workshop a lot of the things that es6
40:10 - gives us is syntax that lets us simplify
40:14 - how we write code it makes our lives as
40:16 - developers easier so let's declare some
40:20 - variables say Const lecture you wanna
40:23 - say algorithms and then we're gonna say
40:26 - Const capacity equals 20 students or say
40:32 - Const professor because I don't want to
40:35 - give out anyone names I'm gonna say
40:36 - professor arrow would you know someday
40:40 - and then we're gonna say Conte and then
40:43 - we're going to go ahead and we're in
40:44 - declare a classroom in this classroom
40:46 - object traditionally what we wrote to be
40:51 - very beginning we wouldn't have to you
40:53 - know use a string lecture and then we'd
40:56 - have to put the lecture variable here
40:58 - and then we'd go to the next line and
40:59 - write capacity and so on and so forth
41:03 - and that would get to excuse me that
41:05 - would get tedious what we can do instead
41:07 - so we can actually go ahead and delete
41:10 - everything aside from the word lecture
41:13 - don't even don't even wrap it in strings
41:15 - just the word lecture same for capacity
41:20 - and same for professor if we come down
41:24 - here and we print the classroom object
41:27 - you'll notice that all of our variables
41:30 - all of our data that we predefined is
41:33 - input directly into our object and it
41:36 - can be used the same way as any other
41:37 - object is you can reference it you can
41:39 - pull it out you could save things to it
41:40 - and this is just a nice really useful
41:43 - way to to declare objects in a very
41:47 - simple format however let's say you
41:49 - wanted to call you know what say you
41:51 - wanted to be a little bit more strict
41:53 - with your object definition you wanted
41:55 - to call the professor
41:56 - you know property the full string so you
41:59 - know you want to add the rest of the
42:00 - word professor now this is not gonna
42:03 - render anything on the console here
42:04 - because this is actually breaking this
42:06 - is code this is going undefined there is
42:08 - no variable type called professor so in
42:11 - this instance we would still need to use
42:13 - the you know assignment operator colon
42:16 - and then the variable professor or prof
42:19 - PRF and then it happens again so this is
42:24 - just and then what this lets you do is
42:26 - that as your object grows you add more
42:28 - properties let's say building and we say
42:31 - you know Wentworth we can go ahead and
42:35 - we can just you know add that property
42:38 - straight to our object and it just
42:40 - appears and it imports whatever string
42:42 - or any data you pass to it and this is
42:45 - not discriminant to just strings and
42:47 - integers you can actually go ahead and
42:49 - in the instance there are multiple
42:51 - buildings you could you know pass in an
42:53 - array of like of buildings here and you
42:56 - would get a list and it would work the
42:58 - same way so this is just an example and
43:03 - then what this leads to and you're like
43:06 - why is this really that useful well it's
43:09 - it has to do with it's it's all it all
43:14 - goes back to react for me at least where
43:16 - you have these long complex rendering
43:19 - algorithms with a lot of JSX and for
43:21 - those that don't know JSX is HTML
43:23 - written in javascript and you want to
43:27 - embed things you want to pass properties
43:30 - and tons of data to these HTML blocks
43:33 - but you don't want to like write out
43:35 - these super long pieces of code that are
43:37 - impossible to read so instead you will
43:40 - pass it just a basic object with the
43:43 - property that has the same name as the
43:46 - value or data that it's representing and
43:48 - that just keeps cleaner code for you
43:51 - know easier readability and ease or
43:53 - usability down the down the road as a
43:57 - special treat I do have one last thing I
44:01 - just forgot to put it in the description
44:03 - of the livestream and the description
44:05 - for the email blast and this is
44:07 - destructuring
44:08 - I use this a lot in the react workshop
44:12 - two weeks ago and this lets us pull
44:14 - things off of objects so let's quickly
44:17 - create a new object will keep this one
44:19 - simple just a we're gonna say a B C B C
44:25 - D F or whatever C D F and then we go
44:29 - down here and we're gonna say I want to
44:33 - read the values from this object but I
44:36 - don't want to have to declare you know I
44:37 - want have to be like Const a equals X
44:40 - dot a and then you know Const B equals X
44:44 - dot B this is this is valid this is very
44:47 - this is the way you should use what you
44:49 - could do it but there's a different way
44:51 - if your variable name is the same as the
44:56 - property name in the object you can
44:58 - actually simplify this to Const squiggly
45:04 - brackets a comma B equals x then we
45:10 - delete the code above that and then we
45:14 - can go ahead and let's use our template
45:15 - strings you know let's print out the a
45:18 - variable and the B variable and if
45:25 - everything is correct we should see the
45:28 - string on the right unless I did
45:31 - something wrong
45:35 - well so I save hmm well that was
45:46 - supposed to work but it's not so I guess
45:51 - if anyone can tell me what's wrong
45:54 - otherwise that is something I'm not
45:57 - familiar with well I guess that's okay
46:03 - there are ways to diiie structure and I
46:06 - have you I did use them in the react
46:08 - talk it's not working right now and
46:10 - that's my mistake but at this moment I'd
46:14 - like to open the floor to any questions
46:16 - from you guys that's pretty much all I
46:18 - have for you than anyone in the YouTube
46:21 - chat if you guys have any questions I'd
46:23 - love to answer that as well anyone in
46:26 - the room no all right let's see the chat
46:30 - let's see what we got here
46:32 - um how do you put an apostrophe inside a
46:38 - template string good question
46:40 - you can use um you know you can just use
46:43 - an escape character if you had a Const
46:46 - t3 and you had the asterisks and you
46:50 - said like I don't know like Ethan
46:55 - Ethan's like Ethan's item then you could
47:01 - input that character into the string
47:04 - directly like that using a backspace
47:06 - character yes
47:13 - jo W in the chat brings up a good point
47:16 - ES 6 needs transpiling um
47:19 - code pen lets you run ESX directly
47:23 - google chrome lets you run ESX directly
47:26 - and they believe firefox now let's your
47:29 - nes 6 directly and I'm not sure about
47:32 - Internet X I'm the internet explorer for
47:34 - example does not the old not Microsoft
47:37 - edge but Internet Explorer which some
47:39 - people still do use on old operating
47:41 - systems does not let you run es6 code so
47:46 - what you need to do is you need to use
47:47 - something like
47:48 - which we used in the react talk and we
47:51 - transpile it back down to you know yes
47:54 - you know javascript native code so we
47:56 - can actually go to the babel compiler
48:00 - and we can actually you know put some
48:02 - code into it they have their live thing
48:06 - here though their rep Apple though this
48:09 - is from the last one so you see that a
48:10 - little bit of JavaScript here here's an
48:12 - a so here's an example of working
48:15 - destructuring notice how we're pulling
48:17 - the club the club variable off the props
48:20 - object and the props object is being
48:23 - passed to the greeting function so and
48:26 - then also look here's another error
48:28 - function so you can see here in react
48:32 - code me using a lot of the features that
48:35 - I told you guys today and I even have a
48:38 - default parameter inside my
48:40 - destructuring so a lot of this stuff
48:42 - really is combined together but what I
48:45 - wanted to show you is that we can go see
48:46 - we can go consti equals and we can use a
48:50 - actually a let's do this constant equals
48:53 - 1 and then consti 2 equals template
48:57 - string i have 1 or tea cookies and then
49:07 - on the right you should see that in
49:08 - native javascript you're going to have
49:11 - you know variable t equals 1 and then
49:13 - variable t 2 equals I have plus T plus
49:18 - cookies so this is you know what I'm
49:21 - showing you guys you're simplifying the
49:23 - way you need to write code what's up
49:40 - in different blocks yeah so as long so a
49:45 - constant is blocks go everything is you
49:49 - know top-down scoped so if you declare a
49:52 - constant up here unlike the global and
49:54 - then you created a code block and this
49:57 - is actually syntactically valid I didn't
49:59 - know that for a while
50:00 - but this is actually syntactically valid
50:01 - you create a code block on the page and
50:03 - you were to reference the you know
50:05 - console dot log T that's valid or yes
50:09 - you know it'll do it and if you wanted
50:11 - to read a Claire that variable T inside
50:14 - here technically you could but you
50:17 - really shouldn't the reason like I
50:19 - actually I'm sorry this is not allowed
50:22 - if you have the let keyword this would
50:24 - be allowed but why don't you see on the
50:26 - screen right here is not valid this will
50:28 - run an error because the T the constant
50:31 - T on the outside of our block scope is
50:34 - feeding itself into thus the local block
50:38 - scope but if you do the reverse and you
50:41 - had like constant T declared in here and
50:45 - you know I'm just gonna delete this top
50:46 - and we had our local block here and then
50:49 - we had another constant T out here then
50:53 - this doesn't work either in your like
50:57 - but why not it's because JavaScript when
51:00 - it reads a whole file all the constants
51:02 - get lifted to the top of the file and
51:04 - then fed back down so then what you just
51:07 - lets you do if I remember correctly is
51:10 - you're actually able to go ahead and you
51:13 - know write a console dot log statement
51:15 - and you can log a variable before it was
51:18 - the client before it was defined and
51:20 - that's technically valid it's really bad
51:23 - coding but technically it's allowed
51:26 - let's look at some more questions in
51:29 - here alright um cool so yeah I don't
51:34 - think we have anything left in the chat
51:37 - someone quickly asked why do we use
51:40 - bable bable is just a transpiler it lets
51:43 - you take es6 code and put it into native
51:45 - JavaScript use what you would need to
51:47 - use if you're going to deploy your
51:49 - application across
51:50 - multiple browsers but if you're running
51:52 - something inside no js' console or
51:55 - you're writing something inside code pen
51:56 - or you're running something inside of a
51:58 - Google Chrome console you don't need to
52:00 - use Babel because it es6 is valid syntax
52:04 - but with that that is all I have for
52:07 - today guys thank you so much on the free
52:10 - code camp and for joining me I hope you
52:13 - guys had a lot of fun you guys can watch
52:14 - the video you can also reach out to me
52:16 - at my Twitter I'll post that in the chat
52:19 - at any time I'd be happy to take your
52:22 - questions there and you can also find me
52:24 - on github at ethan - Arrowwood and again
52:30 - you guys can reach out to me on github
52:31 - or twitter I'd be happy to teach you
52:34 - some things about open-source talk to
52:35 - you about react or talked about
52:36 - JavaScript so I hope everyone the free
52:39 - code camp end has a wonderful day
52:41 - and yeah thank you for tuning in and
52:47 - thank all you guys for being here in
52:50 - person that was incredible
52:51 - thank you very much oh sweet