00:03 - hey guys and welcome back to lesson I'm
00:06 - Cody my name is Ryan lesson so I have to
00:09 - come clean and apologize that I had not
00:11 - been getting my videos up as frequently
00:13 - as I wanted to since my last video I've
00:16 - actually moved from Dallas to Seattle so
00:19 - if you're in the Seattle area be sure to
00:22 - hit me up alright so the inspiration for
00:25 - my next video comes from one of my
00:26 - subscribers he countered on one of my
00:28 - videos asking me to show him how to
00:30 - build a to-do list with the angler 4
00:34 - framework so you know I could have
00:37 - showed him how to do that with England
00:38 - for framework but you know what I
00:40 - thought I'd make it even more
00:41 - interesting so not only am I going to
00:43 - build with the England for framework but
00:45 - I'm gonna be using Redux as well to
00:47 - manage the state of the application so I
00:50 - thought any further ado let's hop into
00:51 - the boilerplate code and the setup for
00:53 - this application
00:54 - so first up if you haven't already seen
00:58 - my last video I built an angler web pack
01:02 - starter kind of like a skeleton for your
01:04 - project setup if you like to follow
01:06 - along this whole project was built off
01:08 - it so be sure to clone it down and I
01:11 - include the link to the repo in the
01:13 - description below okay so once you have
01:15 - that clone down there's a couple things
01:18 - you need to MPM install so things are
01:21 - this Anglin redux store redux the reves
01:26 - observable and T aside so I'll go into
01:30 - it all these are doing a little bit
01:31 - later and once you have all that we need
01:34 - to also install JSON server which I'll
01:37 - be using for my restful api and to do
01:40 - that you will need to come to the
01:41 - command line and run NPM install JSON
01:44 - server - g4 global ok I'm not gonna run
01:48 - this because again I already ABS
01:49 - installed but if you do not have JSON
01:51 - server installed please be sure to
01:53 - install it globally alright and one last
01:56 - thing is JSON server runs on by default
01:59 - on port 3000 so we real quickly need to
02:02 - go into a web pack dev config and change
02:05 - it from port 4500 to port 3000 awesome
02:09 - so that's all we need for this setup
02:11 - let's hop right into building the
02:13 - application
02:17 - okay guys so first thing let's blew up
02:20 - the application so let's come into our
02:22 - command line and run npm run start
02:26 - alright so while we wait for this to
02:29 - compile and take a quick drink here Oh
02:35 - God look compiling gives you time to
02:38 - think and boom there we go okay so our
02:41 - applications all booted up so as you can
02:43 - see I gave you guys a quick UI
02:46 - representation of how this to business
02:48 - will be built the two's list will
02:51 - consist of what to do with a name
02:52 - property a description completed it
02:54 - created I left some space here to add a
02:57 - delete button alright so for each to do
03:00 - we will be setting up grunt for it and
03:03 - if you haven't heard of crud crud stands
03:05 - for create read update delete so for
03:10 - each to do we will be making you know
03:12 - giving a crud you know functionality so
03:15 - let's get started and with the first
03:16 - letter is c4 create before we hop ahead
03:19 - let's step on the brakes to talk about
03:21 - the JSON server so the JSON server I'm
03:24 - pretty sure you to pass in any JSON
03:26 - object you specified and you basically
03:29 - passed it in like this and it'll
03:31 - basically set up a restful api which is
03:34 - let's create read update delete
03:35 - functionality for each object property
03:39 - here so you can see for this to do is we
03:41 - will have a restful api built for that
03:44 - so it's very cool and very lightweight
03:46 - to use a perfect for this demonstration
03:48 - so after you guys see this we're gonna
03:51 - go and delete this because again we will
03:53 - be creating our to dues from our actual
03:56 - UI over here okay so first things first
03:59 - ice we're going to need to create a form
04:01 - for us to actually create the to do so
04:03 - let's go into our abdominal and let's
04:07 - import the reactive forms module because
04:09 - that's we're gonna be using to create
04:11 - our forms and it's going to imports and
04:14 - it's important awesome alright so next
04:17 - thing we're gonna go into the app
04:19 - component TS i'm gonna quickly scaffold
04:22 - out the form here so I imported a couple
04:26 - things that we're gonna need to set up
04:28 - the reactive forms on model
04:30 - and once you have all of that it's going
04:33 - hero it screw the final on was called to
04:35 - do form and it's going to be form group
04:41 - okay and then let's inject in the form
04:46 - builder the form builder is FB alright
04:52 - and then right here let's do okay just
05:03 - complain that I didn't create it yet
05:05 - let's create right now and I don't like
05:12 - that name and it to do for that's a lot
05:20 - better okay so there we go have our
05:22 - function so within this function within
05:27 - this function we're going to return to
05:31 - do form okay so now let's scaffold out
05:36 - what its gonna look like okay so I'm not
05:42 - gonna bore you with all this typing I'm
05:44 - just gonna quickly go ahead and copy and
05:46 - paste it over okay so here we go oh man
05:54 - spelled it wrong already spell yours
05:56 - okay so there we go we have the mild
05:58 - setups and nos go ahead and create the
06:00 - HTML for it and again I'm not gonna bore
06:02 - you guys with me writing HTML I already
06:05 - have it made so it's gonna quickly
06:06 - uncommon it let's talk about it be sure
06:09 - to set it up on the forum then give each
06:11 - individual input you want to use form
06:14 - control name and would be sure to give
06:16 - the form anything with a foreign control
06:17 - name a name property or it's gonna yell
06:20 - at you and videos at you you're gonna
06:22 - have a bad time
06:24 - alright unless when I least had the
06:26 - disabled to see until it's valid it's
06:29 - not going to be on disabled and if you
06:31 - remember who set required here so as you
06:37 - could see the hot module replacement
06:40 - already beat me to it
06:41 - and here's our for
06:43 - all right so we see if we come in we
06:45 - basically type in there we go once it's
06:49 - valid the add button will be there but
06:51 - as you could might as you might as well
06:54 - could guess the a button does not do
06:55 - anything yet so now let's set up some
06:57 - functionality for it to basically add a
07:00 - you know what to do to this to news list
07:02 - above and for that we'll be using redux
07:05 - so let's dive in
07:10 - okay guys
07:11 - we start setting up read up this talk
07:13 - about a quick history of it Redux was
07:16 - built back in 2014 by the Facebook team
07:19 - they're having problems managing complex
07:21 - state of their applications so when I
07:25 - say complex I mean Redux is actually
07:27 - only supposed to be used for medium to
07:29 - large scale applications of not for
07:32 - to-do list but I will be billing in a
07:34 - very scalable way so if you wanna you
07:37 - know add to this it'll be very easy to
07:39 - scale up front here um a couple things
07:42 - about read up something I got my notes
07:44 - right here I'm not a movie star just yet
07:45 - Cameron brought my lights so read up
07:49 - redox maintaining zap stay in a
07:52 - predictable way and was built by
07:54 - Facebook by blah blah it follows a flux
07:56 - architecture but consists of couple
07:59 - things it consists of a store which
08:01 - contains the state of the app actions
08:03 - that represent something that happened
08:05 - and a reducer and the reducer is just a
08:07 - function that specifies how a state will
08:09 - change after an action happens so
08:13 - basically we will be using a bunch of
08:15 - actions and these actions will change
08:18 - the state for us for our application so
08:22 - Redux also uses pure functions for its
08:26 - pure functions are functions that will
08:31 - return the same thing that has the same
08:33 - input in the same output so you will be
08:35 - sure to have that and there's a couple
08:37 - of reasons why I read US uses pure
08:38 - function is because they're easily
08:40 - testable easy to undo and redo because
08:43 - of course we keep the previous state if
08:45 - you know we're not mutating the previous
08:48 - object and we could use time-travel
08:51 - debugging which I will go into a lot
08:53 - more in depth through this and you will
08:54 - absolutely love it I guarantee it I love
08:57 - it personally okay so let's go ahead and
09:01 - start building out the architecture for
09:03 - that so we're gonna come in here and
09:06 - we're going to be creating our Redux
09:10 - folder so let's go in here do new folder
09:14 - and do Redux okay
09:16 - so within our Redux folder we're gonna
09:18 - have a couple things so we're gonna have
09:20 - that actions folder I just talked about
09:23 - we're also gonna have
09:25 - [Music]
09:26 - middleware which I'll get into later but
09:29 - this is gonna be hard to be making HTTP
09:31 - requests and reducers okay and we're
09:36 - gonna put a new file in which is an it
09:38 - state so for each redux file we're gonna
09:41 - have to give it an its initial state for
09:43 - the whole application and while it might
09:46 - be hard to grasp from talking about once
09:48 - I get the dev tools up and running and
09:50 - show you exactly what it is it will all
09:52 - make sense or hopefully it all makes
09:54 - sense so I'm not going to bore you too
09:57 - much with what I'm gonna be doing here
09:58 - first I'm going to well bore you by me
10:03 - having to type all this I'm gonna make
10:04 - this fast I kind of copy and pasting so
10:06 - we're gonna import combined reducers and
10:10 - reducers again we're gonna build this
10:12 - for scalability and we're gonna go ahead
10:15 - and we're going to well that's all we're
10:17 - gonna do there for now we're gonna go in
10:19 - to reducers I'm gonna create a new file
10:20 - and this file is gonna be called to do
10:23 - reducer TS ah to do okay so we go in
10:33 - there alright so there's a couple of
10:39 - interfaces that I built that which I'm
10:41 - not going to retype so here they are so
10:44 - we're gonna have an an interface for it
10:45 - to do which again will just be the name
10:47 - description completed create and we
10:50 - never I've used a which is gonna be the
10:51 - array of the whole thing and it's gonna
10:53 - have a couple more states of loading and
10:55 - an error all right so I'll get to those
10:58 - in more in depth in a second so let's
11:00 - set up what the thing is gonna look like
11:02 - so this is what our Redux objects gonna
11:05 - look like this gonna manage all of our
11:06 - state it's gonna have loading error and
11:09 - it's gonna have an array of two dudes on
11:11 - it okay so once we have that we're also
11:14 - going to set up our route reducer or in
11:20 - this case it's gonna be a to-do reducer
11:22 - so this to do reducer well take in a
11:28 - state of I to do state and that's going
11:34 - to equal our initial state which we say
11:36 - was to do state
11:38 - and it's gonna has a passionate penny to
11:43 - do state okay all right this is cannot
11:49 - find to do reducer Oh cuz I didn't put
11:52 - function it's silly me
11:54 - okay so we're gonna go in there and so
11:57 - basically we're gonna put a switch
11:59 - statement in here so basically anything
12:01 - that runs through this reduced function
12:02 - is gonna look in this switch statement
12:03 - for an action saying what's the fines I
12:08 - shouldn't search for a turn state okay
12:12 - okay so actions let's go talk about
12:15 - actions so actions basically are gonna
12:18 - be where they're gonna be called so
12:20 - we're gonna be basically passing these
12:22 - actions on this switch statement is
12:24 - going to see the action so for instance
12:27 - if the action was let's say update we're
12:32 - gonna then return an update function
12:36 - that we'll be creating and we're just
12:38 - gonna basically come in here we're going
12:39 - to define an update function so you can
12:44 - see that top is gonna work it's gonna
12:46 - basically you know run a switch
12:48 - statement on the action that we pass up
12:50 - and it's gonna run through this function
12:52 - here and again there's going to be pure
12:53 - functions so we're gonna be returning a
12:55 - new object there okay not mutating the
12:58 - original object alright so as you can
13:03 - see from this example it's also you know
13:06 - kind of hard to understand well it's not
13:10 - hard to understand what I mean to say is
13:12 - this update is very easily changed you
13:14 - know this could be anything and we're
13:16 - gonna run in problems at all that
13:17 - actions on the switch you know we don't
13:20 - want that we don't want users to error
13:21 - that so we're gonna come into actions
13:24 - they're going to create a few actions so
13:27 - we're gonna come here we'll call it to
13:31 - do actions TS okay so to do actions that
13:36 - TS I'm just going to copy and paste
13:41 - these we will
13:47 - be okay and copy and paste this one over
13:56 - as well okay so we will be having so
13:59 - right here two things that we're going
14:01 - to need is again we have to create read
14:03 - update delete here's our read get to
14:05 - dues and here's our create create to
14:07 - dues you know just add delete and update
14:10 - while we're at it okay
14:14 - and where's cut words update that's what
14:19 - Carl update complete why not okay so
14:23 - there it is there's our create read
14:25 - update actions and we're going to keep
14:27 - these so the user can easily change them
14:30 - in a constant that we're going to import
14:32 - them into our reducer so let's go back
14:35 - to our reducer let's go up here and
14:40 - let's import them all in okay so there
14:47 - we go got them all in oh it's to do
14:50 - website - dues yeah oops okay so there
14:53 - we go we have it in there okay so next
14:58 - thing up is let's actually register this
15:00 - with our app module so things need to do
15:03 - is you need a register um your reducer
15:05 - whether you have that module so let's go
15:07 - ahead and do that okay
15:13 - so I'm just gonna copy and paste over
15:15 - these imports right here ah there we go
15:22 - so that tools in section which is that
15:25 - time traveling to bugger off talking
15:26 - about earlier redux we dosed module
15:29 - let's go ahead right in here I was
15:30 - actually important to ng redox module
15:34 - okay and then let's come here and then
15:39 - let's import our initial state from that
15:45 - file we just created there we go oh I
15:52 - think I've read that with export on
15:53 - those sorry about that guys yeah I'd
15:57 - even Creedy I'm getting ahead of myself
15:59 - okay so let's go
16:00 - - are in it state and let's go ahead and
16:06 - let's add a couple of interfaces again I
16:08 - was going to copy and paste these I'll
16:09 - just go over them real quickly for you
16:11 - so first things first that's import what
16:14 - we just created and our to do reducer
16:16 - man that's so good there we go alright
16:21 - and after we do that it's gonna copy and
16:22 - paste some interfaces and we'll go over
16:24 - all them alright so we're going to
16:28 - import the active state that we created
16:30 - to do reducer R to do initial state here
16:32 - and the to do reducer itself here's the
16:35 - initial State interface is going to be
16:37 - what this is the root of our Redux
16:39 - application this is going to be an
16:40 - object that's gonna have it - duze
16:43 - property on it the United State will be
16:46 - to do is is to do state and to do state
16:49 - if you remember it's just this right
16:51 - here and then here we go we're gonna use
16:55 - the combine to make it scalable um this
16:58 - is actually very easy to add multiple
17:01 - reducers to this okay so now that we
17:03 - have all that let's go back to the app
17:04 - that module and now let's register them
17:07 - so I'm going to come into our app that
17:11 - module and then we're gonna come down
17:15 - here to our constructor and we're going
17:21 - to inject a couple things into our
17:23 - instructor excuse me constructor ng
17:28 - redux
17:35 - so we're gonna initialize ng read up
17:39 - with the initial state object which we
17:41 - previously defined we're going to inject
17:47 - the dev tools an extension and we're
17:49 - going and that's it for now actually
17:51 - okay awesome
17:53 - then after that we're going to quickly
17:56 - set it up alright so this is how you do
17:59 - it first of all let's talk if it's set
18:02 - up that time traveling to bugger I'm
18:04 - talking about earlier so here's just a
18:09 - global variable that I defined the
18:11 - webpack define that just tells us if
18:13 - it's production or not in the production
18:15 - environment so I was in the production
18:16 - environment we don't want any enhancers
18:19 - but if it's not in the production
18:20 - environment we wanted to have dev tools
18:24 - dots enhancers okay so this sense of the
18:28 - time traveled to bugger this is actually
18:31 - very important because if you have the
18:34 - Redux dev tools debugger within your
18:38 - application in production and this is
18:40 - running like say Internet Explorer's
18:42 - where I've seen this bug before the
18:43 - whole application will crash so yeah
18:47 - make sure that this is only turned on in
18:49 - development mode okay so once you have
18:51 - that there oh and the reason why that
18:54 - happens is Internet Explorer I'm pretty
18:56 - sure doesn't have the extension for the
18:58 - Redux dev tools other than support it so
19:01 - a good browser for this will be Google
19:03 - Chrome and Firefox which I'll get to in
19:05 - a second all right so once we have all
19:08 - that and that's the not leases let's
19:11 - configure the store all right so it's
19:18 - going to take those reducers that we
19:20 - combined it's going to take the initial
19:22 - State it's gonna then take in middleware
19:26 - here which we don't have any yet but we
19:28 - will be adding and then the enhancers
19:31 - okay and there we go now if I click here
19:38 - you can see that we have read ups
19:41 - installed and last but not least let's
19:43 - talk about that I'm time traveling to
19:45 - bugger um it's called
19:48 - probably Redux dev tools extension I'm
19:50 - pretty sure I'll leave a comment in the
19:53 - description and what exactly this is I
19:55 - want to pick it up this is in Google
19:57 - Chrome and so you could come in here and
19:59 - it's very cool
20:01 - we can look me up an initial State
20:03 - that's the initialize let's click on it
20:05 - and see the state and you could see that
20:07 - we have that to do the object we created
20:09 - earlier and here it is this is where
20:10 - Redux looks like basically just a global
20:12 - object which is separated from our
20:14 - application awesome now that's it for
20:17 - scaffolding it so now let's create that
20:19 - action for creating the to do
20:25 - okay guys so we're gonna be starting
20:27 - with the first two letters of crud um
20:29 - create and read so let's back up and go
20:33 - back to our form alright so on reform
20:37 - our bunny we have a button here that's
20:39 - just not doing anything let's add a
20:41 - click event to it so when we click we're
20:45 - gonna run ad to do all right
20:50 - and yep and then we're going back to F
20:55 - da component that T is when I come in
20:57 - here it's due and this ad to do will be
21:09 - dispatching okay so basically our Redux
21:12 - works is you dispatch an object and it
21:16 - will go through the reducer and it will
21:17 - look for that actions name and then run
21:19 - that action again off that switch name
21:24 - and we have in the reducer so you'll be
21:26 - able to see it a lot better through the
21:27 - Redux tools the readout step tool time
21:30 - so I'm just going to set it up okay so
21:33 - to call it you need that we need a first
21:35 - install import redux so it's going to
21:39 - quickly import a couple things are going
21:41 - to pour redox and the select which I'll
21:43 - be using in a little bit to get certain
21:48 - pieces of the state from the redox
21:49 - object alright and we're also going to
21:52 - import one where they might as well do
21:54 - it now we're gonna put observable for
21:57 - mark oh you already have it silly me
21:59 - okay
22:00 - oh let's import i to do in here because
22:04 - we're probably gonna have to use it that
22:05 - sort to do state we set off alright so
22:08 - in our add to do we're going to basic so
22:13 - that dispatch
22:19 - okay and this match takes an object and
22:22 - the object has a type and the type will
22:25 - be they get to do so that's good to do
22:28 - is well shoot over there just Pennsy
22:32 - inject it let's do it now
22:51 - oh we need to pass the initial state as
22:53 - well sorry so the readings I have that
22:58 - needs to be initialized with the initial
23:00 - state so we're just gonna pass in in
23:02 - this show high initial state so the
23:06 - interface for initial state okay and
23:08 - there we go awesome okay so now let's go
23:13 - back into our add to Do's
23:14 - so we're going to dispatch the get to do
23:17 - but we didn't import the actions yet
23:20 - yeah we're getting ahead of ourselves
23:21 - sorry about that folks we're gonna copy
23:24 - this over yeah copy this over all right
23:31 - and again we don't have this to do
23:34 - action that was to do alright so there
23:37 - we go now we have our get to Do's but
23:41 - again we're not getting to Do's here I
23:42 - apologize folks are actually creating so
23:45 - create to do awesome and we're gonna
23:48 - pass in a payload and the payload base
23:53 - is gonna be the object that we're gonna
23:54 - be passing in and we're just going to
23:55 - basic go tour to do form and if we're to
23:58 - do form gets submitted and because we
24:00 - had that disabled on it and I'll quickly
24:02 - show that disabled to you guys one more
24:03 - time that's disabled until it's valid so
24:06 - again they're not the user is not gonna
24:08 - be submitting the form till it's valid
24:09 - so we're gonna come in here we're gonna
24:11 - do form that value so it's gonna pass in
24:13 - um this form object right here on a
24:16 - model into our form okay there are
24:19 - dispatches create the dues all right so
24:22 - let's go ahead and let's create that
24:24 - function in our reducer for that create
24:26 - two dues so we're gonna go back into our
24:29 - reducer alright then we're gonna do we
24:37 - import if we did okay so we're gonna so
24:40 - case t dot create two dues create two
24:47 - dudes states
24:52 - okay and it's complaining that I don't
24:54 - have the method so are the functions
24:56 - quickly function so state states gonna
25:02 - follow I to do state and I'll show you
25:09 - why we want do that in a second okay so
25:13 - right here we're gonna need to add the T
25:17 - assign operator so it's gonna quickly
25:24 - copy and paste the import over alright
25:26 - you just do this actually okay so there
25:29 - we go we import T aside so T assign
25:31 - basically gives us um typing on the
25:34 - object dot assign method okay so as you
25:39 - can see for a curried - duze methods
25:42 - here we want to return what I was
25:45 - talking about earlier is a pure function
25:46 - an object that doesn't mutate the
25:49 - original state so you do that by object
25:51 - out of sign but the thing is there's no
25:55 - like type structure on it so basically
25:59 - you could do kind of whatever you want
26:00 - in there and you could add properties
26:03 - that don't exist in the to do state so
26:05 - basically what T and sign will be doing
26:06 - is making sure that we can only assign
26:09 - these properties within our I to do
26:13 - state to it alright so after we got that
26:18 - we're going to set it up
26:28 - actually that payload okay so the action
26:31 - I paddled again is that payload I passed
26:33 - in in the dispatch loading which is
26:35 - false which we're not loading anything
26:38 - just yet loading will be true because we
26:40 - will be loading something and then error
26:42 - as no all right and I'll get to all that
26:45 - in a second all wrap everything together
26:47 - okay so there we go so basically right
26:50 - here is this is just an object data sigh
26:52 - returning a new object a cool thing is
26:56 - we don't need to include the whole
26:58 - objects properties again because again
27:00 - we could just get rid of loading and
27:03 - then we just use this like this and I'll
27:04 - work just fine because again you know
27:08 - we're not mutating the original object
27:09 - we're creating brand new okay so now
27:15 - let's talk about middleware and how
27:19 - we'll be using it within our application
27:20 - so basically we'll be using middleware
27:23 - to make those HTTP requests come to our
27:26 - database which is the JSON server to get
27:29 - data from it and so let's go ahead and
27:31 - let's set up that epic middleware okay
27:37 - so yeah I kind of just alluded to it
27:39 - it's actually this pattern is called
27:41 - epic middleware and this is how you do
27:43 - it's in the angular framework it took me
27:45 - forever to figure out how to do this oh
27:46 - man now a lot of documentation out there
27:49 - so hope this could definitely help
27:51 - people struggle less than how much I
27:54 - struggle trying to figure out how to do
27:55 - this okay so we're going to do HTTP
27:59 - epics all right
28:00 - so within this we're going to import a
28:03 - couple of things I'm just gonna copy and
28:05 - paste the moment first let's get a lot
28:07 - of service oh man come on
28:12 - where's my key Bonnie it's there it is
28:14 - okay perfect let's add load of the
28:16 - service let's import a couple other
28:19 - things
28:27 - again it's to do and let's import some
28:32 - of our a xjx operators okay awesome
28:37 - and let's also import no I think it's
28:42 - all for now
28:42 - oh wait now one more thing that's
28:44 - important I to do state okay perfect
28:48 - there we go
28:48 - okay so now that we have all that set up
28:50 - let's change this name to choose HTTP
28:54 - HTTP epochs all right on to the
29:00 - constructor
29:01 - oh the te HTTP service in alright so now
29:14 - it's not the method so the first method
29:15 - we'll be creating is create to do to do
29:20 - okay so the action is um the is the
29:27 - property admitted by the observable from
29:30 - redux
29:45 - let's play function all right so let's
29:49 - return that filter so we're going to
29:52 - filter that for a type and then we're
30:00 - going to do tight equals T dot create to
30:05 - do so we're going to be looking at all
30:07 - our Redux actions and we're going to be
30:12 - checking the type property and we're
30:13 - going to see if it is equal to create
30:16 - two dews and if it's equal to create two
30:17 - dues we will then be we're gonna flatten
30:20 - an exam this is an admitted object by an
30:22 - observable so we're gonna check those
30:24 - and turn those emitted properties into
30:27 - observables themselves flatmap okay and
30:35 - then we're gonna actually perform my
30:37 - HDTV or bus right here on all those
30:39 - things being admitted up so process the
30:44 - MV API URL this was set up by the way
30:47 - back back to vague if you were wondering
30:49 - plus - duze which is that part we have
30:54 - the DB JSON file and we're gonna piss in
30:57 - our dated a payload okay awesome
31:03 - did I over shoot the yeah I did I
31:06 - overshot the parenthesis there sorry
31:08 - about that guys all right so after we do
31:11 - that we're gonna run through a map
31:14 - result okay type equals T dot so once so
31:24 - after this is the result of the function
31:26 - I'm gonna leave this blank just for now
31:28 - and I'll set up the error to run a catch
31:33 - so this is the this is the HTTP request
31:38 - coming back to us
31:47 - okay okay so right here we basically are
31:55 - making requests to our API for the to
32:00 - use to create them we're posting to them
32:02 - and now that we get the data back Oh
32:05 - what's this complaining about okay so
32:15 - once we get the response back we're
32:18 - gonna run that through another redux
32:20 - action so we're going to quickly create
32:22 - the action so we're to create two more
32:24 - actions and our actions on folder so
32:29 - we're going to be creating a create
32:31 - to-do success and we're also going to be
32:38 - creating an error handler for when our
32:40 - HTTP requests error out and that's gonna
32:43 - be called to do error let me just copy
32:45 - and paste that over okay so now that we
32:49 - have both of those let's go back into
32:50 - our HTTP epic middleware and then let's
32:53 - set those functions up so we're gonna be
32:56 - running tight T dot create to-do success
33:01 - so after we get a bag and successful
33:04 - we're gonna be passing this action
33:05 - through them through read out so that
33:08 - I'm gonna send the payload as so to JSON
33:13 - all right awesome and then in here we're
33:16 - gonna be running TWP - duze error there
33:22 - it is perfect all right I'm gonna set
33:25 - the payload as air three yards come on
33:31 - there we go okay perfect okay so there's
33:35 - our first um epic middleware a function
33:36 - set up let's go ahead back into our to
33:38 - do reducer alright so we're gonna have
33:42 - that a couple more cases here let me
33:43 - quickly add them so as you can see
33:46 - there's a lot we need to just to get
33:48 - this one API request set up so again as
33:50 - I talked about in the beginning of the
33:52 - video this is for more medium to large
33:55 - scale applications but again you know I
33:58 - kind of want sure you gotta do
33:59 - this and I'll show you how to make it
34:00 - easily scalable for your near the
34:02 - large-scale applications so I'm going to
34:04 - copy over the case the two cases that we
34:07 - need which would be get to do success
34:14 - and we're gonna also need excuse me it's
34:18 - create to do success I apologize guys
34:20 - I'm going to copy that with over - okay
34:24 - and we're also going to do - duze error
34:27 - alright so there's the two actions and
34:30 - then we have to create those two
34:31 - functions so let's come up here and
34:32 - create those two functions so we're
34:36 - gonna do create to do success there it
34:42 - is alright so basically what we're doing
34:44 - here is once we get all to do stay back
34:47 - from the middleware that will intercept
34:50 - the action coming through the pipeline
34:53 - of redux and then run through each of
34:55 - your requests and past the action up a
34:56 - little bit we're gonna then became
34:58 - captain eating onto our existing state
35:03 - of two dudes again don't get us confused
35:05 - that were actually manipulate excuse me
35:08 - don't get this confused that we're
35:10 - actually of manipulating the original
35:12 - state we're creating a new state we're
35:13 - just adding it on to all the original
35:17 - states in another object
35:19 - sorry about that getting confusing so
35:22 - there is your creature to success
35:24 - function and then we'll come down here
35:25 - and also add a - duze error function
35:28 - alright so this one's pretty simple if
35:31 - there's an error we're just gonna attach
35:33 - the pail of the arrow to the error right
35:34 - there perfect awesome
35:37 - so one last thing we need to do is we
35:39 - need to register these on the App
35:41 - component on the App module so remember
35:45 - I talked about this array here at being
35:47 - middleware well this is where you would
35:49 - set it up so it's a real quickly alright
35:55 - so we come in here
36:01 - we do create middleware create epic
36:05 - middleware this starts to dues ooh
36:12 - item dependency inject it I'm sorry guys
36:14 - let me go ahead and do that right now I
36:16 - apologize
36:17 - so let's come up here happy just do down
36:19 - here so to dues HTTP epochs there we go
36:28 - to do is a TV epic service perfect and
36:32 - now we can do it so this have to do is
36:33 - to dooms HTTP epic service would I oh
36:38 - come on lower case there we go
36:43 - dot create to do perfect alright we got
36:48 - the we got it registered so now I'm
36:51 - going to open up our network tab so we
36:54 - can see the requests I'm also going to
36:56 - open up our dev tools the cool
36:59 - time-traveling alright so yeah it's just
37:04 - a one-time wonder let's see let's see if
37:07 - I got it so we're coming here with Ed
37:10 - and Tom we're in Tom click Add and boom
37:14 - ok so you can see it looks like we
37:17 - didn't get an actual hf xhr request but
37:19 - if we look over here we could see oh our
37:22 - created news thing worked ok so it looks
37:25 - like it worked let's check the state as
37:26 - you can see the tom steak I added on
37:29 - perfect so now let's go ahead and just
37:31 - real quickly figure out what we did
37:32 - wrong how to fix it twins hours later ok
37:39 - guys sorry about that now let's fix what
37:41 - was going on so first time to come in
37:43 - here I'm going to add the provider so to
37:46 - do epic service there we go add the
37:49 - service as a provider and then we're
37:51 - going down here in a dependency inject
37:53 - it to do epics to do epic service
38:01 - awesome and then we're gonna come in
38:03 - here they're gonna register it right
38:05 - here to do epics create to do perfect
38:07 - there we go
38:08 - alright so now we have the epic
38:10 - middleware
38:10 - I'm creating we're gonna fix something I
38:12 - had wrong with the reducer earlier that
38:14 - you don't need to touch this stay right
38:16 - here so I want to get rid of it and then
38:18 - let's put mega into our HTML because I
38:20 - found something else
38:21 - kind of embarrassing as you can see I
38:26 - accidentally added an edgy submit
38:28 - property to run add to new and this
38:29 - click event trying to add to do so this
38:31 - would actually relied twice i'm smears
38:33 - with a quick click about right there on
38:34 - the button alright so let's close it
38:36 - down and if men you're gonna want to run
38:38 - is JSON server - - watch DB JSON and go
38:44 - ahead and run that command and you will
38:45 - see that on locals three thousand or two
38:47 - dudes will be available with restful api
38:50 - all right so it's clear on console and
38:53 - let's make our first request so i'm
38:54 - gonna open up the read up step tools as
38:57 - well as we could see we have our next
38:59 - state up - duze which is again just the
39:01 - initial state up that we defined earlier
39:03 - so let's do Tom Jones click Add and as
39:09 - you can see we have made a network
39:11 - request a post request to the - duze API
39:13 - they came back and we have this error
39:17 - here create - duze the difference is
39:20 - that loading is now true and then we go
39:22 - to create a new success we can see
39:24 - loading is now false and there is our
39:27 - to-do right there awesome perfect
39:30 - alright so there we go we have our
39:34 - create tom enabled so now let's go ahead
39:38 - and get those two do's and display on
39:41 - the page
39:46 - alright guys so actually let's get put
39:48 - that up to do that we just created on
39:50 - the screen so to do that I'm gonna come
39:54 - in here I'm going to add an observable
39:56 - varna create an observable we're gonna
39:59 - be calling it public to do States
40:04 - it's gonna be an observable oh type I to
40:10 - do an array about to do okay awesome to
40:17 - them once we have that we're gonna come
40:18 - down here do this to do state equals
40:23 - okay so we can subscribe to the store
40:29 - the Redux store and we can get the state
40:31 - after the action as you know manipulated
40:34 - it so we give that action a minute to us
40:37 - for that strength through subscribing to
40:39 - the store okay but again if we look at
40:41 - our initial state of the object which is
40:44 - right here problem we don't really need
40:46 - loading or error
40:48 - well Justin just for this demo we're
40:51 - only gonna really focus on two dues that
40:52 - we only want to pass the two dudes down
40:55 - so what we're gonna do is we're gonna
40:59 - basically use this coopera called select
41:02 - and then we're just gonna only get the
41:06 - to do is we're going to dudes dot two
41:08 - dues because remember to dues is that
41:10 - array within the two dues object okay so
41:14 - now that we got that rid go back over to
41:17 - our HTML okay so we comment this out I
41:20 - don't want to waste all this time
41:21 - creating all this so I'm gonna quickly
41:25 - go over it for everyone so basically
41:28 - what I'm doing is I'm using the if-else
41:30 - intent which is new to angular 4 and I'm
41:35 - most using the async pipe so basically
41:36 - the async pipe will set up subscribe and
41:40 - it'll also set up on subscribe to that
41:42 - observable and whenever the observable
41:44 - admit something out up it will then put
41:47 - it as to dues so anytime that to do
41:50 - state amid something up on the async
41:53 - pipe will pipe it to the Tuesday
41:56 - so this will be sure that none of this
41:59 - content will load until something is
42:02 - admitted of through that observable and
42:04 - if nothing is emitted up we go through
42:07 - the Alice which is loading and it's
42:09 - gonna unload up show a loading with the
42:11 - spinner okay awesome so now that we have
42:14 - that let's get it on the page gonna come
42:19 - in here and click and and boom there we
42:24 - go there is our first to do on the page
42:26 - now I didn't fully complete all the
42:29 - functionality for yet so it's going in
42:31 - let's fix the folks analogy for the
42:33 - checkbox real quick because I'm pretty
42:36 - sure yep if we see it's not gonna do
42:37 - anything on it so as you see our
42:40 - checkbox right here we're just gonna add
42:42 - just some properties to it so I'll check
42:45 - for us okay so maybe the name of Fleet
42:55 - and then we're gonna do a true ID is
43:00 - equal to I so I here so we're iterating
43:03 - over all the two dues data because
43:05 - remember that's what's emitted up from
43:07 - the observable that we pipe the basing
43:10 - pipe and we're gonna set the index of I
43:13 - so we're gonna set the attribute ID to
43:15 - the index and then I'm going to come
43:17 - into the label and if you want a label
43:20 - in the future this is how you would do
43:21 - it I'm not gonna add one but I might as
43:23 - well just put it in there in case so I'm
43:25 - in the future wants to do it
43:26 - I hear they use a table right here so
43:29 - that'll match them up perfect
43:30 - alright okay then there's one more thing
43:33 - that we need to do is we need a second
43:35 - check check property so to set the check
43:38 - property we're just going to do extra
43:39 - check we're gonna bind to it and then
43:43 - we're gonna run to do complete so we're
43:48 - gonna put this in a ternary PLDT but
43:51 - this in a ternary operator so if two
43:53 - technically is true where it's gonna
43:55 - pass an empty string and then if not do
43:58 - null and if it's no then this check
44:00 - actually won't even be there so now that
44:02 - we click here we need to create our to
44:04 - do one more time because again we're not
44:07 - getting the two dues
44:09 - surely the only time to do is actually
44:10 - going up there is when we create it so
44:12 - that's why I only see one even though
44:14 - our database probably as multiple to do
44:16 - so there we go we have it created and
44:17 - our check box is working so now let's go
44:20 - to our DVD JSON I'll show you what I
44:22 - mean
44:22 - we have a whole bunch of news on our
44:25 - to-do list in our database for only one
44:27 - showing and that's because we're not
44:29 - getting all the to dues we're just you
44:31 - know posting the new one on there and
44:32 - showing that one only so now let's
44:34 - create the functionality to go and get
44:36 - the to do so we're gonna go back into
44:39 - our app that component that h that TS
44:41 - and we're gonna ng it we're gonna create
44:47 - a dispatch to get all our two news for
44:49 - us
44:49 - I'm just gonna quickly in G readouts
44:54 - dispatch pass and type and the types
44:58 - gonna be TD I get to dues okay so I've
45:02 - got that in there
45:03 - so now let's go into our that big
45:06 - middleware so you see this is definitely
45:07 - tedious I'm just gonna kind of copy and
45:09 - paste this so doesn't take too long to
45:11 - do and we're going to go copy and paste
45:19 - over they get to do right here alright
45:21 - so it gets to do success again yes we
45:24 - have to go and create a get to do
45:25 - success coming here export cons get to
45:34 - dues success dues
45:44 - okay now let's go into our middleware or
45:47 - excuse me our middleware our reducer I
45:50 - already go into our reducer then we're
45:52 - gonna set it up there so let me just
45:55 - quickly copy and paste this over oh we
46:02 - actually need everything so here's the
46:03 - success and we actually don't even have
46:05 - to get so let me the cavea paste that
46:07 - one over as well okay there we go so we
46:11 - have both those they're awesome and now
46:14 - let's create the two functions for them
46:17 - again I'm going to copy and paste it
46:18 - just say a little bit of time
46:22 - so here is our get function right here
46:30 - alright and we don't need action I feel
46:32 - it right there and next up we're gonna
46:36 - do get to do success all right awesome
46:44 - so there we go so now last but not least
46:46 - let's go to our app module and let's add
46:50 - it to middleware create epic middleware
46:57 - this to do epic stats get to do is there
47:02 - we go alright so now let's open up Redux
47:05 - and as you can see it already work well
47:07 - just look to see what happened they get
47:11 - the dues ran and then they get to your
47:14 - success ran and then we have all our two
47:16 - dues in here awesome so there's our two
47:18 - dues perfect okay so next up we're going
47:23 - to be going into updating
47:30 - okay so now we want to update the
47:33 - completed so remember we check the boxes
47:35 - completed and we click refresh the state
47:39 - will be persisted so let's go ahead and
47:41 - do that so first up we're going to have
47:44 - to navigate to the apt I've liked more
47:46 - about HTML then we're going to go into
47:49 - our check box then on the input we're
47:54 - gonna add a click event and so I was
47:59 - gonna run complete to do to do okay
48:04 - there we go and let's go out after I
48:07 - want that TS and then let's create that
48:11 - function complete to do and then wrong
48:16 - we have the to do right here
48:23 - you read of stuff dispatch we're gonna
48:28 - do tight is tea oh you know what I got
48:34 - ahead of myself
48:35 - scrap the Eddie action so let's go into
48:36 - our actions let's add all of them you
48:39 - know what I'm just gonna add all them
48:40 - I'm gonna add the update and I'm going
48:42 - to add the delete ones right now so we
48:44 - could say some 10 so we're going to
48:49 - these to act we actually had these four
48:52 - actions all right we already have delete
48:58 - to do that's good so let's hear it
49:00 - complete to lead
49:02 - sorry I just need an assist that's
49:04 - actually so yeah that was earlier okay
49:06 - awesome got all our actions in perfect
49:09 - now let's go back to our app dr. Vaughn
49:10 - OTS and let's do tight T dot complete to
49:18 - do okay then we need to pass in the
49:20 - payload of the to do sure let's see um
49:26 - yeah we're passing to do so we're
49:30 - passing the pram we had okay so now yes
49:33 - let's do that whole process again it's
49:37 - they're going to come here and I'm gonna
49:38 - quickly copy and paste it okay
49:48 - so there's complete to do is go to our
49:49 - reducer and then let's add those two
49:52 - functions complete to do a complete two
49:55 - to success and you know what I'm gonna
50:05 - add the delete as well because you know
50:08 - what I'm not going to just go back to
50:09 - the whole price let's do it all right
50:10 - now so there's the complete to do
50:15 - complete to do success then now let's
50:17 - add delete to do delete to do success so
50:19 - then I'll add the associated functions
50:23 - for all them so there's four functions I
50:25 - need to add let's go up here let's add
50:29 - the four functions which are your the
50:34 - first two which are complete to do I
50:37 - then complete the new success and then
50:41 - delete to do delete to success all right
50:46 - awesome so we have those there so then
50:50 - let's go back into our epic middleware
50:52 - and then let's just add the function a
50:53 - little bit ahead of time because we
50:54 - don't want to navigate through the whole
50:55 - process again and let's add the delete
50:59 - to do epic middleware okay there we go
51:03 - so one thing the note on this one we're
51:05 - doing something a little bit different
51:06 - the process on TV we have the ID in the
51:10 - query string right here for both the put
51:13 - and the delete request and also we're
51:16 - not running a delete an action of delete
51:20 - to do success some people might want to
51:23 - return the object and use it but again
51:25 - we don't need to use it we just want to
51:26 - once we delete it we want to get the two
51:28 - dudes again
51:28 - so once there to do is talita we're
51:30 - gonna get it ourselves so we're on they
51:32 - get to dues action okay awesome so now
51:35 - let's go into our middleware or excuse
51:37 - me our app that module now let's
51:39 - register both those and I'm just gonna
51:45 - copy and paste those bad boys over
51:48 - alright here we go
51:52 - so there they both are oh you see I
51:54 - called it differently so do that fix
51:57 - okay got both of them over awesome so
52:01 - now
52:01 - let's go back into rehab da component TS
52:03 - and then actually let's just add on the
52:07 - delete functionality while we're at it
52:08 - so on the trashcan I'm just going to
52:10 - quickly set up a click event
52:24 - solely to do to do all right then what's
52:30 - going to our epic 20s and then since we
52:33 - already have it set up this will be very
52:34 - easy to choose this going to be delete
52:37 - to do to do hi to do stop ng redux dot
52:46 - dispatch basically it's gonna be the
52:52 - same as as above but we're just gonna
52:54 - have to change the type to delete okay
52:59 - there we go
53:00 - and awesome alright so we got that all
53:04 - there let's put this over there and
53:07 - let's check the functionality of the
53:08 - whole thing I'm gonna open up so we can
53:09 - see if our network requests are going
53:11 - through correctly alright so let's just
53:14 - create a whole bunch of them there's a
53:17 - pair of a bunch of time times okay so
53:20 - first thing you want to check is if we
53:21 - check the first one you'll see
53:24 - okay so complete to do right here ran
53:27 - and it looks like everything worked out
53:29 - so let's refresh the page and make sure
53:30 - it work oh but first let's check our
53:33 - HTTP request you have to put 200 refresh
53:37 - the page looks how you didn't work
53:43 - that's a bummer
53:45 - let's see why
53:50 - oh you know what I forgot to change it
53:53 - oh uh I was passing the same object into
53:57 - it I have to actually you know change it
53:59 - before I pass into it so let's do that
54:00 - real quick so we need to do equals to do
54:04 - dot complete to do not complete equals
54:08 - bang to do not complete equals bang to
54:12 - do that complete there we go okay so now
54:14 - we're actually changing it you don't any
54:16 - see the network tags we know the request
54:17 - is going through check the first one and
54:20 - then let's refresh the page and is it
54:22 - gonna be still
54:23 - check yes it is awesome so our pull
54:26 - request worked and just to show you will
54:28 - check a couple others not print to
54:31 - refresh there we go
54:34 - this state is being persistent we took
54:36 - out a DV dot JSON we will see that the
54:39 - state has definitely been changed to
54:41 - true for a complete for the first three
54:43 - awesome all right so then last but not
54:45 - least let's check out our delete
54:47 - functionality so it should delete it and
54:50 - then it should run the gif command to
54:53 - get the new observable then new to run
54:57 - the delete that it should run the get to
54:59 - do is to get the new two dudes that are
55:00 - still there on the JSON object and let's
55:02 - just see if our to-do list matches up
55:05 - with our JSON object and yes it does we
55:08 - have to - duze in our DB JSON the two
55:11 - dudes on the page alright so there it is
55:14 - building it to use lists with angular
55:16 - before and redux I hope you guys like
55:20 - that hope you guys learn something oh I
55:22 - really enjoyed making this video and
55:24 - there's a lot more to come
55:25 - you know now that I'm sin of them is
55:26 - gonna be creamy these these uh excuse me
55:29 - now that I'm said I'm just gonna be
55:31 - cranking these videos out so be ready
55:33 - and yes thanks for watching