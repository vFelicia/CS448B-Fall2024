00:00 - hey everyone it's Andrew Brown back
00:02 - again with another Cloud certification
00:04 - course and this time we're looking at
00:05 - the GitHub action certification this
00:08 - certification is going to teach you how
00:10 - to work with cicd pipelines uh
00:12 - specifically github's tool called GitHub
00:14 - actions um to show that you have devop
00:17 - skills and you'll be able to add that
00:19 - certification afterwards uh to your
00:21 - LinkedIn or resume um so you know you
00:24 - can make your way into your cloud or
00:26 - devops career now um I just want to
00:30 - point out that if you want to support
00:31 - more free courses like this one the best
00:33 - way is to purchase the additional uh
00:36 - study materials and practice exams and
00:38 - things that we produce over at exam Pro
00:40 - it greatly helps us um and I just want
00:43 - to point out that this is not my first
00:45 - certification course uh We've made
00:47 - certifications courses for GitHub before
00:50 - itos Azure gcp terraform
00:53 - kubernetes I'm sure a lot more so you're
00:55 - in really good hands um but yeah I'll
00:57 - see you shortly okay ciao
01:00 - [Music]
01:03 - hey everybody it's Andrew Brown and
01:04 - we're at the start of our journey asking
01:06 - the most important questions first which
01:09 - is what is the GitHub action
01:11 - certification and this is a programmatic
01:15 - focused certification so you're expected
01:17 - to know how to program to some degree uh
01:20 - creating cicd uh or build pipelines
01:22 - writing yamel that's basically the code
01:23 - that we're doing here creating custom
01:25 - GitHub actions configuring workflow
01:27 - environments securing securely passing
01:29 - data to workflows and The Unofficial
01:31 - course code for the certification is
01:33 - actions I got that from the GitHub uh
01:36 - website as and I've talked to them
01:38 - saying hey get course codes and they
01:40 - still don't have them um the GitHub
01:42 - actions is probably one of the most
01:44 - popular cicd tools uh this day I can't
01:46 - say for certain if it is the most
01:47 - popular as Jenkins is really hard to
01:50 - Dethrone um but uh it definitely is
01:53 - something that a lot of people are grav
01:55 - gravitating towards just because you
01:56 - already have a GitHub account and it's
01:58 - so easy to use
02:00 - um who's the certification for well
02:02 - consider this certification if you are
02:04 - new to cicd and you want to adopt some
02:08 - cicd tool for your technical projects
02:10 - you are a non devops uh you're not in a
02:12 - devops role but you're trying to get
02:14 - there so you're trying to add devop
02:16 - skills you want practical skills that
02:18 - focus on implementation rather than
02:19 - Theory but really that's this course not
02:21 - necessarily the exam and I'll talk about
02:23 - that when we get to uh the uh breakdown
02:26 - of the exam um so what would be a good
02:29 - road map for you uh I again strongly
02:32 - recommend you take the GitHub
02:33 - foundations before you take this
02:35 - certification but once you do this is a
02:37 - a straight path that you could uh go
02:39 - take um after the foundations if you're
02:43 - looking to become a cloud developer or
02:44 - devops or something like that then this
02:46 - is something that would be useful I want
02:47 - to point out that um these
02:49 - certifications uh do not necessarily
02:51 - test uh programming technically
02:53 - technical diagramming code management or
02:55 - any other technical skills that are
02:57 - required for obtaining the technical
02:58 - roles so you are going to see code on
03:00 - the exam but I'm just going to say that
03:02 - um uh it's extremely lacking so it's
03:05 - more about like the yes you have to know
03:08 - how to uh uh use GitHub actions and its
03:11 - syntax but then they have a lot of
03:13 - business scenario stuff and uh things
03:16 - like that that uh kind of dilute uh
03:19 - demonstrating that you actually have
03:20 - that knowledge again again remember this
03:22 - is multiple choice and multi select so
03:24 - they can't really check your code and
03:25 - make sure you know how to code uh how
03:27 - long should you study to pass this well
03:29 - uh the content for this exam I think or
03:30 - this course that I made is about 3 hours
03:32 - so if you're a beginner um I would think
03:35 - that would take you 12 hours like if you
03:36 - skip the GitHub foundations and you've
03:37 - never used GitHub actions before rid
03:39 - yaml or done devops or anything like
03:42 - that then 12 hours seems like a good
03:45 - amount of time if you're experienced uh
03:47 - you have to go through my content and do
03:48 - the labs um and then you need to do
03:50 - practice exams um and do some additional
03:53 - readings so you're probably looking at
03:55 - four hours so yeah someone with a strong
03:57 - devop background or cic knowledge you're
04:00 - you're not going to have a hard time
04:01 - here I would say average study time
04:03 - around eight hours I would split that
04:05 - time uh between lectures lab 5050 uh
04:08 - with your practice exams okay so once
04:10 - you're done uh the lecture in Labs
04:13 - assume that you're going to put the same
04:14 - amount of time or similar time uh with
04:16 - practice exams afterwards but you know
04:19 - for some people it might be a little bit
04:20 - faster because they can get through the
04:21 - lecture lab content faster by two times
04:24 - skiping some of the content uh
04:26 - recommended study time here is 1 to two
04:27 - hours a day for seven days what does it
04:30 - take to pass exam watch the lecture
04:32 - videos and do the Hands-On Labs
04:35 - especially for this one because um
04:38 - there's a huge section um in the exam
04:41 - guide where they just want you to know
04:42 - how to troubleshoot issues and I don't
04:45 - make separate videos for that I do them
04:46 - in the labs um and so some of my labs
04:49 - seem boring but uh the purpose is to
04:51 - purposely run into troubleshooting
04:53 - issues so that we can uh know how to
04:56 - solve those when we get exam questions
04:58 - on them uh there's also practice exams
05:01 - you absolutely absolutely want to do
05:02 - practice exams and we have a fre set and
05:05 - a bunch of sets here this one in
05:07 - particular because there was a big chunk
05:10 - of content that I could not find in the
05:12 - docs that I could not find uh
05:15 - practically working and we had to create
05:17 - practice exam questions to the best of
05:19 - our ability um and it's the only way
05:21 - that's going to really help you uh get a
05:23 - good score because um for whatever
05:25 - reason there's just internal content
05:28 - that is not dou umented um and it's the
05:31 - only way you're going to pass is really
05:32 - the practice exam so I want to point
05:34 - that out um the content outline has four
05:37 - domains so we have domain one author and
05:40 - maintain workflows domain two consume
05:43 - consume workflows domain three author
05:44 - and maintain actors domain four GitHub
05:47 - actions for the Enterprise um so these
05:49 - are the waiting that uh GitHub provides
05:52 - so in the GitHub foundations I said they
05:53 - didn't have waiting now they have added
05:55 - them as a response to the last one so
05:57 - that is great I just want to point out
05:59 - that in my experience the domain 4 which
06:02 - says 15% I had way more than 15% uh of
06:07 - questions on Enterprise it was more like
06:09 - 35% it really threw me off um so I do
06:12 - not trust this domain breakdown and um
06:15 - you're going to have to dig deep and try
06:17 - to pick up any kind of information you
06:19 - want or can with Enterprise um the other
06:22 - trick is like if you want to learn the
06:24 - Enterprise component you'll have to sign
06:25 - up for an Enterprise account I did not
06:27 - want to do that I'm trying to keep
06:28 - everything in the free here so I don't
06:30 - do that in this course um but if you
06:32 - want to just cover your bases then you
06:34 - might need to go ahead and do that um
06:37 - The Exam Center for uh taking this exam
06:39 - online is going to be with PSI so you
06:41 - can do that in person or online if you
06:44 - can do online do on or sorry not sorry
06:46 - if you can do in person do in person
06:48 - because it's a controlled environment
06:50 - it's so much less stressful and PSI in
06:53 - particular is brutal for their online
06:56 - experience um so there's Pearson View
06:58 - and PSI online and cran um and Pearson
07:01 - view is the better online experience
07:03 - than the two but like PSI I always have
07:05 - problems uh and you need to show up
07:07 - really early and if things aren't
07:09 - working you have to reach out to them
07:11 - because you could just be sitting there
07:13 - and you'll just miss your exam even
07:15 - though you're there uh so just
07:17 - understand that um it's a proctored
07:19 - experience uh meaning that there is
07:20 - somebody watching you to make sure that
07:22 - you're not cheating so uh be prepared
07:24 - for that and make sure you have a nice
07:26 - clean environment for them um the
07:28 - passing grade here is 75% I have a big
07:31 - aspect on that because GitHub officially
07:32 - does not provide you a passing score but
07:35 - unofficially I can tell you that it's
07:37 - 75% uh because I asked them and they
07:39 - they said unofficially
07:41 - 75% uh I think this has to do with the
07:44 - fact that they can't do a perfect score
07:46 - nobody does a perfect score but for
07:47 - whatever reason they just they don't
07:49 - feel comfortable giving a a finite
07:51 - number there even though it is 75% um
07:54 - the number of questions you have in the
07:56 - exam is 75 60 are scored 15 are unscored
07:59 - so you can afford to get 15 uh scored
08:01 - questions wrong there is no penalty uh
08:04 - for wrong questions um and this could
08:07 - have been my experience where I felt
08:09 - like I had 35% Enterprise questions on
08:11 - there but that doesn't explain the
08:13 - missing 5% anyway the format of the
08:15 - questions is multiple choice and
08:16 - multiple answer I'm going tell you right
08:18 - now there was a lot of multiple answer
08:21 - like an abnormal amount of them and it
08:23 - was very frustrating so just be prepared
08:25 - for that um that you're going to have a
08:27 - lot of multiple uh multiple answers
08:30 - um there uh again just more about the
08:33 - unscored questions there are 15
08:34 - questions unscored they do not count
08:36 - towards your final score why do they
08:38 - have these um it's used uh to evaluate
08:41 - the introduction of new questions to
08:42 - determine if the exam is too easy and
08:44 - the pass and score the question
08:45 - difficulty needs to be increased or to
08:47 - discover users who are attempting to
08:49 - cheat the exam or steal dump exam
08:51 - questions if you encounter questions
08:53 - you've never study for that seem really
08:55 - hard keep your cool and remember they
08:57 - may be unscored
08:59 - questions let's talk about the duration
09:01 - of this exam it is 2 hours you get 1.6
09:05 - minutes per question the exam time is
09:07 - 120 Minutes the seat time is 150 minutes
09:10 - SE time refers to the time you should
09:11 - allocate for the exam uh that includes
09:15 - uh the time to review instructions show
09:17 - uh the online Proctor your workspace re
09:19 - accept the NDA complete the exam provide
09:22 - feedback at the end so there you go
09:30 - hey this is Andrew Brown uh we're taking
09:32 - a look at the GitHub uh study guide and
09:36 - so you can get this over at the ghio g.o
09:39 - for certifications when you go to
09:40 - register for your exam you can download
09:42 - this uh it'll also point you to the um
09:45 - Microsoft learn and Linkedin learning um
09:48 - uh LinkedIn learning is paid so you
09:49 - can't just get that you have to like a
09:51 - premium account and if you have a
09:52 - premium account then go utilize that
09:54 - because it'll probably poly fill some of
09:55 - the things that I'm lacking on which is
09:57 - the Enterprise section in my experience
10:00 - my exam was more of domain four Focus
10:02 - which was bizarre because it says it's
10:04 - 15% maybe I it's just a fluke for me and
10:06 - this is the percentage if so my course
10:08 - is fine and you don't need to do any
10:10 - additional work uh but just in case you
10:12 - should probably read a little bit more
10:14 - about the Enterprise features even if
10:15 - you don't make an Enterprise account um
10:18 - I did not like a lot of the questions on
10:20 - this exam because I thought that they
10:21 - were unfair uh so for example um if we
10:24 - go to here we have author maintain
10:26 - workflows one thing we learn about is a
10:29 - configuring workflows to run scheduled
10:30 - events and in that we have to uh
10:33 - configure it using a Chron expression
10:35 - and so I said in the slide I'm like I
10:38 - don't think that they would expect you
10:40 - to know how to interpret a Chron
10:42 - expressing because that seems out of
10:43 - scope but you should know that you can
10:45 - do it and then I got an exam question
10:47 - that said pick the Chon expression I'm
10:50 - not kidding you cck click the Chron
10:52 - expression for this complex thing and
10:53 - I'm like are you kidding me that is not
10:56 - a fair question or um uh there was like
11:00 - another one where they wanted you to
11:01 - know an API action so we learn about um
11:03 - I think it's over here as well we learn
11:05 - about something called repository
11:07 - dispatch and they want you to know uh um
11:11 - a specific API to use that that makes
11:13 - sense but I didn't get that on the exam
11:16 - I got something else like an a like an
11:18 - API uh URL that I had to know for the
11:20 - GitHub CLI that had nothing to do with
11:23 - uh uh the GitHub the the GitHub
11:25 - certification but just whether you could
11:27 - know what the format of of the UR all
11:30 - was and I thought that's really unfair
11:33 - and so I had a lot of those okay um uh
11:36 - so I just want to prepare you that this
11:38 - is a frustrating exam it's not hard but
11:41 - you have to just take your best guess um
11:44 - to to pass it okay uh but yeah I mean I
11:48 - just wanted to show you where that
11:49 - resource was and I just wanted to tell
11:51 - you about some of my concerns about the
11:53 - certification experience and so you
11:55 - don't get too stressed out about it but
11:56 - just do your best to get through the
11:58 - materials but please please do practice
12:00 - exams because they'll make your life a
12:02 - 100 times easier for this one
12:04 - [Music]
12:08 - okay hey this is Andrew Brown and we are
12:10 - at the start of our journey asking the
12:12 - first important question first which is
12:14 - what is GitHub actions so GitHub actions
12:16 - is a cicd pipeline directly integrated
12:19 - with your GitHub repository and GitHub
12:21 - actions allow you to automate running
12:23 - test Suites Building images compiling
12:26 - static sites deploying to code servers
12:28 - and whatever you can think of because
12:30 - it's just compute that is automated so
12:32 - whatever you want to do with it uh
12:33 - you're going to find uh all the
12:36 - workflows that you run under the GitHub
12:37 - actions tab uh GitHub actions has
12:40 - templates which you can use to get
12:42 - started but for this course we are going
12:44 - to be creating our own um GitHub actions
12:47 - in a folder called GitHub forwork flow
12:50 - so on the right hand side is an example
12:53 - of a workflow uh you'll be seeing a lot
12:56 - of these as this course is very heavy
12:58 - with the programmatic side of GitHub
13:00 - actions you can have multiple workflows
13:02 - in a repo triggered by different events
13:05 - um yeah let's keep going here so the
13:07 - idea is that when you run a GitHub
13:09 - action we'll have a history of it in our
13:12 - uh our UI so here we can see multiple
13:14 - runs GitHub has a repo for example
13:17 - workflows you can use to get started so
13:19 - if you go here there is tons in here but
13:21 - to be honest once you learn the basics
13:24 - of GitHub actions you don't really need
13:25 - any of these samples because it's just
13:27 - very straightforward
13:29 - um there are different types of events
13:31 - that can trigger an action to run and
13:33 - we'll notice that on the on event there
13:35 - and so in this case if something was
13:37 - pushed to the repo it would trigger this
13:39 - to run the jobs and then those jobs will
13:41 - run the steps on the specifi compute
13:44 - good AC actions have uh 35 Plus event
13:47 - triggers examples of common triggers
13:49 - would be something like pushes pull
13:51 - requests issues releases schedule events
13:53 - manual triggers but there's a lot more
13:55 - than that um so anyway that is the intro
13:58 - to but we'll get into doing some some uh
14:02 - Hands-On here and then we'll get into
14:03 - the specifics of GitHub actions
14:07 - [Music]
14:10 - okay hey this is Andrew Brown and we are
14:12 - taking a look at GitHub actions and so I
14:15 - figured what we do is just explore the
14:17 - UI and I'll just tell you how you're
14:19 - going to set your stuff up for the rest
14:20 - of um of this project so what you'll
14:24 - need to do is you'll need to go ahead
14:25 - and Fork this repo because we need to
14:28 - run GitHub actions in the repo and I
14:30 - plan to run them all in GitHub example
14:32 - so I want you to go ahead um and do that
14:35 - now I'm not going to Fork it because I
14:37 - don't want to Fork of my Fork um but
14:39 - yeah just go ahead and do that and once
14:41 - you've done that let's continue on here
14:42 - and take a look at some of the settings
14:44 - we have for GitHub actions so the
14:46 - actions will show up under this actions
14:47 - tab and you can see that I've already
14:49 - ran a bunch and I actually have one here
14:51 - from earlier but if we go over to our
14:54 - settings tab uh and we go over here on
14:56 - the left hand side to actions we can
14:58 - look at some settings we have I don't
14:59 - really cover this stuff um much anywhere
15:02 - else so I figured it's a good
15:03 - opportunity just to get it out of the
15:04 - way in the start here you'll notice the
15:06 - first thing is that we have action
15:07 - permissions so we can uh determine um
15:11 - what is allowed for our actions so you
15:13 - can see that we have allow all actions
15:15 - and reusable workflows disable actions
15:17 - if we want to turn it off um allow it uh
15:21 - for all of exam Pro or non- select
15:24 - actions and reusable users so things
15:25 - that are more uh specifically selected
15:28 - so that is inter ing there something
15:30 - that I was surprised is that if you go
15:31 - to the settings tab you don't have an
15:32 - option to turn off actions here you
15:34 - basically just disable them here on the
15:36 - left hand side um then we have our
15:38 - artifact and log retention which we'll
15:40 - come back to later when we look at
15:41 - artifacts but you can see here uh it
15:43 - says 90 days uh for Save then we have
15:46 - Fork pull request workflows from outside
15:48 - collaborators um so whether you want to
15:51 - do these things so just be aware that
15:52 - there are some settings here but let's
15:55 - go back to the actions tab uh and take a
15:57 - look what we can do so right now I have
15:59 - um a workflow set in here this is one
16:01 - we'll be doing in the future but I just
16:03 - want to show you where workflows exist
16:04 - so if you go over to
16:06 - code uh and you go into GitHub folder
16:09 - and into workflows this is where you'll
16:11 - put your workflows and a workflow file
16:13 - can be named whatever you want as long
16:14 - as it's yl or yml because these are yaml
16:18 - files okay and so here's a here's one
16:22 - that sets up a post crass image that
16:23 - allows us to run post crass and you can
16:26 - have as many as you want in here um what
16:29 - I have noticed is that you can have as
16:30 - many as you want but um over here on the
16:32 - left hand side this tab it'll only
16:34 - support so many so you can have I don't
16:36 - know was like 20 or something and then
16:38 - after that they'll be there but it's
16:40 - just hard to select them and see what's
16:42 - going on so uh you don't want to have
16:44 - too many workflows in here and there's
16:46 - not really a reason to have that many
16:47 - workflows but I just want to show you
16:48 - that you can have that many all right if
16:52 - we click into a workflow again we're
16:54 - just watching right now uh we'll do
16:56 - something here in a moment this workflow
16:58 - is disabled because I've uh I've
17:00 - disabled it just so that it doesn't run
17:02 - on push but if we go into here we can
17:04 - see information about it uh and how it
17:07 - ran so if I click into here I can see
17:09 - all the steps it ran through so it set
17:11 - up the job it initialized the container
17:13 - it checked out code all these steps so
17:16 - hopefully that gives you kind of a
17:17 - preview of um what it looks like to
17:21 - create a workflow but let's go ahead and
17:22 - make a new one so your screen might look
17:24 - a little bit different because they
17:26 - might be showing you templates let's go
17:27 - ahead and hit new workflow
17:29 - and so here we have a bunch of uh
17:31 - workflows that we can work
17:33 - with okay and so let's look for one that
17:36 - we could um try
17:39 - out so here we have something like greet
17:43 - users who are first time contributors to
17:45 - a repo so we can click into
17:49 - this and so now we have a template and
17:51 - so they're showing you um a template
17:54 - where and I'll just zoom this up here so
17:56 - we can have a closer look at what's
17:57 - going on
18:00 - but here we have the name of the
18:02 - template and you don't have to have a
18:04 - name but if you do have a name let's go
18:07 - back over here for a moment it will show
18:08 - up here and if you don't have a name
18:10 - there it'll just show the path to this
18:12 - file so it'll just show like do GitHub
18:14 - workflows greetings yaml then we have
18:17 - our on so on is saying um uh like what
18:21 - event will trigger this and so here if
18:23 - we have a pull request Target or an
18:25 - issue is opened then it's going to
18:28 - trigger
18:29 - this to run then we Define our jobs and
18:33 - we're we're calling this the job
18:35 - greeting we can name this whatever we
18:36 - want it's just that's what we call it
18:38 - this is saying it's going to run on
18:39 - Ubuntu uh latest okay so it's running
18:42 - Ubuntu we have some permissions which I
18:44 - don't think I really get into much in
18:46 - the course but uh maybe I'll I'll come
18:47 - back to that later on then down below we
18:49 - have steps and then we have this thing
18:51 - that says actions first interaction
18:52 - version one so the reason GitHub actions
18:54 - is called GitHub actions is because it
18:56 - has this modular component called
18:58 - actions which allows you to Define how
19:00 - these steps work and so what we can do
19:02 - is we can actually take a look of this I
19:04 - think this is a repo if I just type this
19:07 - in like this you'll
19:10 - notice github.com actions first
19:12 - interaction Maps up with this all right
19:15 - so go
19:17 - here and uh yeah it goes to here so we
19:20 - can actually see that this is an
19:22 - external
19:23 - repo um and they describe exactly how
19:25 - it's used and the cool thing is that you
19:27 - can create your own actions in git repos
19:31 - or GitHub repos um and then utilize them
19:33 - so the idea is that this is going to
19:35 - pass stuff into this and run it but
19:39 - anyway let's take a look here so we have
19:40 - uses action with repo
19:43 - token issue message and PR message so
19:46 - with is our inputs it's how we're
19:48 - inputting things into this action and so
19:50 - if we were to go over to here I've never
19:52 - looked at this action before but let's
19:53 - take a look and see if we can make sense
19:54 - of it so in here we have action. yaml
19:58 - and so in here should Define input so
20:00 - notice we'll go back here
20:02 - again repo token issue message PR
20:05 - message and we go here repo token Su
20:09 - message PR message and then down below
20:12 - here it says runs and it says we're
20:14 - going to run a uh using Docker and it's
20:16 - going to run this Docker image so I can
20:19 - go to here and we can click into this
20:22 - Docker file and we can see that it's
20:24 - running um Buster Slim So So node
20:27 - version uh node 20 Buster slim it's
20:30 - going to
20:31 - install um our node packages and it's
20:34 - going to run main JS and then we can go
20:35 - take a look at Main
20:37 - JS which is under lib here I wonder if
20:41 - this is like the compiled version so
20:42 - this is the compiled version so probably
20:44 - go to Source it's probably the same
20:45 - thing so it's typescript to JavaScript
20:47 - and we can take a look at what this
20:48 - thing
20:49 - does so here it runs a function so first
20:52 - of all it Imports core and then GitHub
20:55 - so we can utilize our actions there and
20:58 - then it's bringing in those inputs here
21:00 - as you can see if they're not there it's
21:02 - going to throw an error and then it's
21:04 - using um octokit which is the SDK for
21:08 - GitHub um and the idea is it's going to
21:10 - establish a client and then from there
21:13 - it looks like it's going to try to
21:15 - detect whether somebody has opened a
21:18 - ticket or not it's going to use the SDK
21:20 - to do that so hopefully that gives you
21:22 - kind of an idea of how things uh flow
21:25 - but my my point was is that if if you
21:28 - find this you can almost always look
21:30 - them up and dig dig deeper if you want
21:32 - to know how they exactly work but anyway
21:36 - um let's go ahead and I suppose go and
21:39 - deploy
21:40 - this one other thing I want to point out
21:42 - is that we have the secret stock GitHub
21:43 - token so the idea is that this is going
21:47 - to grab our GitHub token usually you'd
21:49 - set this in your secrets file so I'm not
21:51 - sure if this will work unless we set
21:52 - that let's go ahead and commit the
21:54 - changes and see if it works so I'm going
21:56 - to go ahead and commit that
21:59 - okay now notice that we have greetings.
22:01 - y yml so yaml file if we go over to our
22:04 - actions has it ran and so notice that it
22:07 - hasn't ran now if if this was to be
22:09 - triggered on a push let's go back over
22:11 - here for a moment to the
22:13 - code close out these tabs here for a
22:16 - moment so if we were to go back to here
22:19 - if this was to say on push and we went
22:23 - here it would have been triggered okay
22:24 - but it wasn't so what would cause this
22:27 - to run
22:29 - and if we go back to here we can
22:31 - see it's hard to get back to the code
22:34 - but um we'll go back sorry we'll click
22:37 - here
22:39 - again and it's
22:41 - expecting there we go it's expecting
22:44 - something with issues and so I'm
22:45 - assuming that what it's saying is like
22:47 - if you create an issue or use an issue
22:49 - I'm just guessing but we can go take a
22:51 - look and look up the documentation so
22:52 - we'll say GitHub
22:54 - actions um on
22:57 - events events that trigger workflows and
22:59 - then on the right hand side here we can
23:00 - take a look so we'll type it up here and
23:03 - look at issues says here
23:06 - um so web hook event payload is issues
23:10 - and then we have activity types so
23:11 - there's probably a way that we can
23:12 - narrow it down um I'm not sure if we
23:14 - could just put like a period here and
23:16 - then type the specific uh thing that'd
23:18 - probably be good to know but it seems
23:19 - like if any of these are triggered
23:21 - whether you open edit delete if it's the
23:23 - first time somebody's done something
23:24 - yeah here here it is okay so we can on
23:26 - open types open edit Milestone so we
23:29 - have to assume this is going to trigger
23:31 - for any thing that happens with an issue
23:34 - okay so what I'm going to do is going to
23:35 - go open a new
23:37 - issue and we'll say bug report doesn't
23:40 - matter what it is I want to report a bug
23:46 - I'm going to go down and create a new
23:47 - issue and I'm going to go back to
23:50 - actions and now notice that it's being
23:52 - triggered so we're going to click into
23:53 - this notice that it's queued up okay and
23:56 - if we click into here it's starting
23:58 - stting the
23:59 - job and it moves pretty fast but you can
24:02 - see
24:05 - here that um it's running the operating
24:08 - system 2022 04
24:11 - LTS and then it gets the runner
24:14 - image all right notice it it gets our
24:16 - GitHub
24:17 - token which is interesting because I
24:19 - didn't set a secret so I guess it must
24:21 - just be already
24:22 - accessible and then we are uh it says
24:26 - download action repository so the idea
24:28 - is that these are uh again remember that
24:31 - that GitHub this repo
24:33 - here is a um this GitHub action is a
24:37 - repo and so it's going to
24:40 - download not clone but download this
24:43 - repo um where um uh into this compute
24:48 - and then we're going on to our build
24:50 - steps and so it's doing some build steps
24:51 - so let's just building the docker
24:53 - container and then it's running the
24:55 - interaction action so it's going to run
24:59 - this step here if we go down here so
25:02 - right we're on this
25:04 - step okay and then we see some logging
25:07 - and notice that it's running this doer
25:09 - container so remember that this
25:11 - repo here when we looked into it it's
25:14 - running a Docker file and so it's
25:17 - basically running this Docker container
25:19 - and passing all the stuff to
25:22 - it and it says checking if it's the
25:24 - user's first contribution so if we copy
25:27 - this I bet we could find this in the um
25:29 - typescript
25:31 - codee all right I search for it and so
25:33 - there it is that's what it's logging
25:34 - right
25:36 - there all right it says adding message
25:38 - message will be displayed on the user's
25:40 - first issue issue 13 so again if we
25:43 - search part of
25:45 - this it probably shows up probably not
25:47 - all of like this but we probably just
25:49 - take some of this out
25:51 - here okay not showing anything that's
25:53 - totally
25:54 - fine but anyway uh my point is
25:58 - that's how you can trace through through
26:00 - to it and having programmatic knowledge
26:02 - not just of gamble but coding knowledge
26:04 - is going to make it so much easier to
26:06 - work and understand with GitHub actions
26:08 - especially if something goes wrong all
26:11 - right um but for the most part when we
26:12 - want to create actions I don't really go
26:14 - to new workflows I just create what I
26:16 - what I want but it is nice to go in here
26:18 - you can click into this stuff and see
26:20 - what's going on so I can click in this
26:21 - ruon rails one and uh you know here I
26:24 - can see this one setting up Ruby on
26:25 - Rails and stuff like that and maybe
26:26 - we'll take a look at these later on
26:29 - but for the most part we will end up
26:31 - creating workflows manually um so now
26:35 - the next thing I want to
26:36 - do is I have this workflow but let's say
26:39 - I don't want to use this workflow
26:40 - anymore what we can do is we can go
26:42 - disable it so it doesn't run so if I was
26:45 - let's say I was to open another
26:46 - ticket um I wouldn't want well actually
26:48 - first of all would this even run again
26:50 - because if we were to open another
26:51 - ticket I don't think it would so it'
26:53 - only be the next person but let's just
26:54 - say I did not want it to run again we
26:56 - can go up here to the top right corner
26:57 - and disable the the workflow okay so now
27:00 - that's disabled let's say we don't want
27:02 - these workflows at all in here anymore
27:05 - um we would have to delete them out and
27:07 - then they would just vanish from here so
27:08 - let's go ahead and kind of simulate that
27:10 - so I've gone back to code here and what
27:12 - I'm going to do is press period on my
27:14 - keyboard period and what that's going to
27:17 - do is open this up in
27:20 - github.io name afterwards this is
27:22 - something we do a lot in the GitHub
27:23 - foundations course um this will not cost
27:26 - you anything to run because it is 100%
27:29 - free there is no compute running uh per
27:31 - se there's no um uh server attached to
27:35 - this let's say I'm done with these and I
27:37 - don't want to mess with these anymore
27:39 - I'm just going to take these and I'm
27:40 - going to drag
27:41 - them you just need to delete them but
27:44 - I'm going to drag them into my templates
27:45 - folder because I don't want to really
27:47 - get rid of
27:48 - them um
27:50 - okay and so now they're over here you
27:53 - can see I have a bunch of templates so
27:54 - we're going to have a lot of fun uh
27:56 - working through this I'm going to go
27:57 - ahead and just save these changes so
27:58 - just say move these to save them for
28:05 - later all right if we go back to actions
28:09 - no so it doesn't show them here anymore
28:12 - um I have these previous runs over here
28:13 - we can go in and uh we can delete this
28:17 - workflow
28:18 - run because personally it's a big mess
28:21 - so what I'm going to do here is I'm just
28:22 - going to clean this up so that
28:25 - everything looks really clean here so
28:26 - when I'm working through this just give
28:27 - me I'm going to pause and just delete
28:29 - them all okay all right there we go so
28:30 - I've cleaned everything up and yeah this
28:32 - is probably what it looked like for you
28:33 - when you first came into here and so
28:36 - probably what you would have to do is is
28:37 - click this button here of course
28:39 - probably would helped if I told you that
28:40 - earlier um but yeah
28:43 - so that is the experience um hopefully
28:46 - that gives you a a good start um to what
28:50 - GitHub actions is it's not very hard to
28:53 - use or learn um but we do need to do a
28:56 - lot of iterations here and so that's
28:59 - what we're going to do and look at all
29:00 - the features in particular and you'll
29:02 - find that you'll know how to use GitHub
29:04 - actions really well in a very short
29:06 - amount of time see you
29:08 - [Music]
29:11 - soon let's talk about workflows so a
29:14 - workflow is a configurable automated
29:16 - process that will run one or more jobs
29:18 - and workflows are defined by a yaml file
29:21 - checked in your repository these files
29:23 - are going to be located at GitHub
29:25 - forwork flows I think you know that by
29:27 - doing the lab now but just going to
29:29 - reinforce where this stuff is workflow
29:31 - triggers are events that are cause uh
29:34 - workflows to run so this could be when
29:36 - an event that occurs within your uh
29:38 - workflows repository events that occur
29:40 - outside of GitHub uh and this is
29:42 - generally with the repository dispatch
29:44 - you'll definitely want to remember that
29:45 - one as it will show up in your exams um
29:48 - and then we have schedule times or
29:50 - manual so those are the ones that we're
29:52 - going to be looking at and we'll
29:54 - definitely cover all of them uh a repo
29:56 - can contain multiple workflows as you
29:58 - saw we had like tens and tens of
30:02 - workflows so clearly we can uh have as
30:05 - many workflows as we want uh what one
30:07 - thing I want to point out with workflows
30:09 - is the name property so if you provide a
30:11 - name you don't have to it will show up
30:13 - here on the right hand side is a nice
30:15 - name if you do not provide it then it'll
30:17 - just show up like this so it's whatever
30:19 - you prefer uh to utilize
30:21 - [Music]
30:25 - okay hey this is Andrew Brown and we are
30:27 - taking a look at workflow components and
30:29 - so we're just basically saying what uh
30:32 - goes into a workflow and making sure we
30:34 - understand what all those components are
30:35 - the first are actions these are reusable
30:37 - tasks that perform specific jobs within
30:39 - a workflow we have workflows these are
30:41 - automated processes defined in your repo
30:43 - that coordinates one or more job
30:45 - triggered by events or on a schedule we
30:48 - have jobs these are groups of steps that
30:51 - execute on the same Runner typically
30:53 - running in parallel unless configured
30:55 - otherwise we have steps these are
30:57 - individual task within a job that run
30:59 - commands or actions sequentially we have
31:02 - runs these are instances of workflow
31:04 - execution triggered by events
31:06 - representing the complete run through of
31:07 - a workflow we have Runners these are the
31:09 - servers the host and the environment
31:12 - where the jobs are executed available as
31:14 - GitHub hosted self-hosted options we
31:15 - have the marketplace where you can uh
31:18 - find and share reusable actions uh with
31:20 - your community why do I have such a
31:22 - boring slide in this format because uh
31:24 - the certification asks you to know all
31:26 - these points I'm just trying to get them
31:28 - out of the way as quickly as possible
31:30 - but I do have this little diagram down
31:31 - below so you can see the contextual idea
31:33 - but we have a runner which is your
31:34 - compute uh the jobs which you see within
31:36 - your workflow and understand there is a
31:39 - workflow file here which I'm not showing
31:41 - here but that would be I don't know why
31:43 - I didn't do that should have been right
31:44 - there um and so then in there we have
31:47 - our steps and our actions right and then
31:49 - under our actions um our action steps
31:52 - are are connected together so hopefully
31:53 - all those components make sense it will
31:56 - make sense as we continue to work
31:57 - through
31:58 - um uh the files because workflow files
32:02 - are not that complex and you will
32:04 - understand definitely at the end of the
32:06 - course what all these components are so
32:07 - don't worry about memorizing any of
32:10 - [Music]
32:14 - this let's take a look at how we would
32:16 - trigger a scheduled event and the way it
32:18 - works is that you would use schedule as
32:21 - the event trigger uh and you would
32:23 - provide it a Chron expression to specify
32:26 - when you want that to trigger so here's
32:28 - an example um let me get my pen tool out
32:30 - to make this a little bit more clear so
32:32 - the idea is that we have this on which
32:34 - says what do we want to trigger this
32:36 - workflow on and we're going to uh do
32:39 - this on a schedule and the only option
32:40 - is Kon so Kon is an expression format
32:44 - and so this translates to something
32:46 - particular just so you know I've been
32:48 - using Kon for the entirety of my career
32:51 - I cannot remember KRON syntax because
32:54 - the frequency that you use it is so low
32:56 - so do not feel bad if you don't know how
32:58 - it works but I will definitely be
33:00 - referring to Chron tab. Guru which is a
33:03 - a quick way to um work with cron tabs of
33:06 - course we can use uh llms to help us get
33:09 - a time that we want but anyway the point
33:11 - is is that we have a cron Tab and then
33:13 - down below we have our job and our job's
33:15 - called test schedule and it's going to
33:16 - run an obuntu and if we look at the
33:19 - steps we'll notice we have this first
33:20 - one and this first one says not on a
33:23 - Monday or a Wednesday so it says GitHub
33:25 - which is a context get us the the event
33:28 - and the schedule and if it equals this
33:31 - or or does not equal this which would be
33:33 - this one up here then skip this step on
33:37 - Monday and Wednesday all right and then
33:40 - uh over here this will run every uh
33:42 - every time down below so hopefully that
33:44 - makes sense um but uh yeah again don't
33:48 - stress out about cron Chron logic just
33:50 - understand that it takes a Chron
33:52 - expression and we have a convenience
33:53 - tool okay
33:58 - hey everyone it's Andrew Brown in this
34:00 - lab we want to take a look at how to uh
34:02 - run a schedule event we saw that it's
34:03 - very straightforward but let's make sure
34:04 - we know how to do it I'm going to open
34:06 - this up in
34:10 - github.io on my keyboard before I do
34:12 - that I'm just going to right click and
34:13 - open the actions tab here as I want to
34:15 - quickly toggle between the two here
34:17 - notice I have nothing set up here so it
34:19 - is a clean slate um but what we'll do is
34:22 - wait for this to spin up and so in here
34:24 - I have um that scheduled uh template
34:28 - somewhere here here it is okay and so I
34:30 - just want to show you that if we look up
34:32 - scheduled uh workflows GitHub they have
34:35 - a lot of interesting
34:36 - examples um so mostly when you go to
34:38 - these event triggers you can always just
34:40 - go down here and say okay I want to know
34:42 - scheduled and we can see some options
34:44 - here they kind of explain explain Chron
34:46 - Expressions but let's take a look here
34:49 - at this uh schedule action so it says
34:51 - web hook event payload so there's no
34:52 - payload to pass to it there are no
34:54 - activity types um it's going to have the
34:57 - last Comm in on the default Branch for
34:59 - the Shaw and it only works on the
35:00 - default branch and it's important that
35:02 - you try to read these things because
35:03 - sometimes there are restrictions like
35:05 - this one says will only run on the
35:06 - default branch and things like that so
35:08 - just always take your time to do that
35:10 - now another thing I'd like to check uh
35:12 - is does this show up as a repo so I'm
35:14 - going to go ahead and just type in
35:15 - GitHub and I'm just going to take a
35:17 - guess and type in actions andin schedule
35:19 - because all these should be open source
35:22 - um so it doesn't show up there I'm going
35:23 - to just say actions uh schedule GitHub
35:28 - maybe I got the address wrong
35:31 - here because maybe so I don't the
35:33 - question is are they built in or are
35:35 - they always in a repo so I'm going to go
35:37 - ahead and try this again GitHub
35:41 - actions uh repo let's try this instead
35:44 - okay that is the
35:46 - repo and so I'm just
35:49 - curious does it show up so it doesn't
35:51 - show up anything like that so that's
35:53 - fine so it's probably built in but it
35:55 - would have been nice to know like can we
35:57 - look it up and see how it works but this
35:59 - one doesn't specify well sorry this is
36:01 - an event trigger it's not an action so
36:02 - that makes sense why it's not showing up
36:04 - there okay I got a little bit confused
36:06 - but anyway what we'll do is we'll go
36:07 - ahead and copy this file I'm going to go
36:09 - up here into our uh GitHub folder and
36:12 - I'm not sure why um but I guess our
36:14 - workflow folder vanished so what I'm
36:15 - going to do is create a new folder here
36:17 - called workflows and I'm going to create
36:19 - a dummy file called
36:22 - um trying to remember what we call it
36:24 - for the dummy file there there's
36:26 - actually a particular file that create
36:27 - when you want to oh keep because it
36:30 - keeps deleting that folder or removing
36:31 - it because it's gone but we'll go ahead
36:33 - and paste that in here and so now we
36:35 - have the schedule tab so the question is
36:36 - how does this work uh so this one is set
36:39 - to work on every uh five minutes so if
36:41 - we go over to let's say
36:43 - cron tab guru.com it tells us some stuff
36:47 - here down below so here it says at 405
36:51 - next at uh this time okay so it's
36:54 - telling you the next time it will appear
36:56 - but if I go ahead and just move this
36:57 - here now it says at the minute at 5 and
37:01 - then if I do this and this then I get at
37:05 - every fifth minute so this means it'll
37:07 - repeat every fifth minute how do I know
37:08 - well I don't really know this too well
37:10 - but you know you can always just go over
37:11 - to chat
37:12 - gbt and whatever tool you want to do and
37:15 - say give me a Chron
37:19 - expression that only that occurs every
37:24 - 50
37:25 - minutes only on Sunday and Tuesday and I
37:30 - wonder if it can make it for
37:34 - us there you go so my point is is that
37:37 - you don't have to really memorize Chon
37:39 - Expressions but there is logic behind it
37:42 - so uh that one here is every five
37:44 - minutes so what I'm going to do because
37:46 - I don't want to wait five minutes I'm
37:47 - going to just change this down to like
37:49 - two minutes or one minute we'll do two
37:51 - minutes and I'm going to save this and
37:53 - so we'll commit
37:55 - this all right and all this is going to
37:58 - do is run this every two minutes and
38:00 - then uh Echo out the current uh server
38:02 - time now since this is Ubuntu we we are
38:04 - just running a regular um command and
38:08 - date is something that is available on
38:09 - Ubuntu and that's why we'll print out
38:11 - the date there but we'll go ahead and
38:12 - just say
38:14 - uh add schedule workflow here and just a
38:19 - reminder if you haven't remember to Fork
38:20 - the repo and do this in your own repo
38:24 - Okay so we've committed that and now I'm
38:27 - going to over to the actions tab and so
38:29 - now it notices that the workflow is
38:30 - there notice it because I do not have a
38:32 - name it shows the full name I think we
38:34 - go back here yeah we don't have a name
38:37 - uh there sometimes I have it sometimes I
38:38 - don't but we're waiting for this to
38:40 - trigger so this should just trigger on
38:42 - its own so we're going to wait a few
38:43 - minutes I'm going to pause here and then
38:45 - come back okay all right I've been
38:46 - waiting a while here I don't see
38:48 - anything but let's give it a hard
38:48 - refresh and see if something shows up
38:50 - nothing as of yet this is one that you
38:52 - have to be really patient with because
38:54 - um I just know from experience that uh
38:57 - thought it didn't work and I just waited
38:58 - long enough and then it happened so
39:00 - there could be some time it takes for
39:01 - the server to spin up but generally it's
39:03 - really quick um so yeah again we'll just
39:05 - have patience here um and I'm sure it
39:07 - will appear okay there we go finally
39:09 - triggered it was definitely more than a
39:11 - couple minutes so I was getting a bit
39:13 - worried there but at least it appeared
39:15 - I'm so going to click into here and take
39:16 - a look and you can see it runs extremely
39:19 - quickly so duration 11 seconds um so we
39:22 - can go in here say set up the job so we
39:24 - can see it Echo the current time there
39:27 - it is
39:27 - and there's the job completion now we
39:29 - can wait and see it trigger again I'm
39:32 - not that interested in doing that but
39:33 - what I am going to do is go back here
39:35 - because imagine I want to stop this we
39:37 - can go up to the top right corner and
39:38 - disable the workflow we can
39:40 - programmatically do that as well but for
39:42 - now we're just going to keep it really
39:44 - simple and easy okay so um that covers
39:48 - that and we don't even have to move
39:49 - anything back we'll just leave it alone
39:50 - where it is uh if this becomes a mess
39:52 - then we'll clean it up later okay see
39:54 - you in the next one ciao
39:56 - [Music]
40:00 - let's take a look at triggering a single
40:02 - event versus multiple events so this is
40:04 - a single event where we are pushing on
40:06 - Main I do want to point out that I'm
40:08 - using this like expanded syntax or the
40:09 - most verbose syntax I generally use that
40:12 - because I don't have much luck with the
40:14 - uh more Shand syntax but understand you
40:16 - could have just done like you could have
40:18 - done on uh push here and then it would
40:22 - have worked the same because it would
40:24 - have defaulted to the main branch anyway
40:25 - so understand that that is an option you
40:27 - didn't have to do all of that but I'm
40:29 - going to try to use the expanded syntax
40:31 - as much as I can because I prefer it
40:33 - okay but anyway the point is is that
40:35 - when a push on Main occurs then it will
40:38 - trigger that job uh you can have
40:40 - multiple events so in this case we have
40:42 - Push Pull request and release so what
40:46 - happens when you have multiple events
40:47 - well if you specify multiple events only
40:49 - one of those event needs to occur to
40:51 - trigger your workflow however if
40:54 - multiple trigger events for your
40:55 - workflow occur at the same time m
40:57 - multiple workflow runs will be triggered
41:00 - okay so um hopefully that makes sense
41:03 - the idea is that if you did a push a
41:04 - request and releas you might see three
41:07 - runs
41:08 - [Music]
41:12 - okay hey everyone it's Andrew Brown and
41:14 - in this video we are going to take a
41:15 - look at multiple events so I'm going to
41:17 - press period on my keyboard and that's
41:19 - going to open this up in
41:27 - event one here uh that we can utilize
41:29 - and so what you can see here is we have
41:30 - on push branches Main and Dev pull
41:33 - request branches main so for this to
41:35 - work we're going to need um an
41:37 - additional branch which is what I want
41:39 - to uh do here today so what I'm going to
41:41 - do is go over
41:42 - here oh sorry that's not our repo uh
41:45 - we'll go back to GitHub here and I'm
41:47 - going to go to my repo you got to go to
41:49 - wherever yours is I'm going to see if I
41:50 - have any branches so I already have one
41:52 - existing I view all branches I'm just
41:54 - going to delete mine all right but the
41:56 - idea is that that uh you'll want to
41:58 - create your own so we'll go ahead and
41:59 - we'll make a new one and I'll call this
42:01 - one Dev and I'm making it off a main
42:04 - okay and so now we have that new branch
42:06 - and so what I want to do is I want to
42:08 - test multiple ends like the question is
42:10 - if we do a push uh to Dev will it work
42:14 - if we make a pull request what's going
42:15 - to happen so we just kind of want to
42:16 - observe what's going on here so I'm
42:18 - going to do is copy this template and
42:20 - I'm going to paste it into our workflows
42:25 - directory all right and the question is
42:28 - what's going to happen right away
42:29 - because we're pushing to main is it
42:32 - going to trigger a deploy right away
42:34 - that's what I want to find out so we'll
42:35 - say um
42:38 - multi-event
42:40 - template all right and we'll commit that
42:43 - and I'm going go back over to here and
42:44 - we're going to actions and immediately
42:47 - we can see a run has
42:49 - occurred so we'll click into that and
42:52 - this has happened on push okay so
42:55 - understand that as soon as you have Push
42:57 - main it's going to occur and all this
42:59 - thing does it just says hello world I
43:02 - think there we go okay so now the next
43:04 - question is what happens if we do a pull
43:06 - request let's go ahead and try
43:08 - this um so in order to do this I'm going
43:10 - to need to make some kind of change so
43:13 - I'm going
43:15 - to I'm trying to think here um we'll
43:19 - need to switch
43:21 - branches and do something so I'm going
43:23 - to just go
43:25 - ahead and and close out this tab I'm
43:28 - going to switch over to Dev and I'm
43:31 - going to press
43:36 - period
43:39 - okay and then the next I'm going to do
43:41 - is just make any kind of change so I'm
43:42 - just going to go here and make a space
43:46 - character
43:50 - trigger workflow on dev
43:57 - all
43:59 - right and I'm going to go back to our
44:01 - repo if you click in the the hamburger
44:02 - menu you get back there quickly and
44:04 - we'll go back to our actions and we
44:06 - should expect to see
44:08 - that
44:11 - so I don't see anything
44:15 - yet give this a nice refresh
44:19 - here
44:21 - and what we'll do is we'll check our
44:24 - event so they say multi event
44:27 - we'll go
44:29 - here and I want to look at the code
44:31 - sorry I want to look at the code
44:36 - here and so if there's a push to Dev it
44:39 - should occur right because we have it
44:42 - there so I'm going to do is go back it
44:44 - says found a push 46 seconds ago okay
44:48 - but I don't see a run so the question is
44:50 - did it work is there delay why is it not
44:53 - working um and I don't know so I'm just
44:56 - going to wait wait a few seconds and see
44:58 - what happens maybe it will appear so one
45:00 - thought I had is does the file exist
45:03 - with our change like did we make the
45:05 - branch and then do it or what order did
45:07 - we do it in right so let's go over to
45:10 - our code base and let's go into
45:13 - Dev and let's see what's in
45:16 - here and we go to workflows and we have
45:18 - schedule so no it's not it's not in here
45:21 - so the question is will this template
45:24 - work even though it's not in the de
45:27 - directory and so it doesn't seem like
45:28 - it's going to work unless we merge it in
45:31 - so that's something that we should know
45:34 - because we wanted to work in our Branch
45:35 - I guess we have to have that template in
45:36 - there so what I'm going to do is I'm
45:38 - going to go ahead and make a poll
45:39 - request and I'm going to make a new PLL
45:42 - request and I'm going to go
45:44 - from Main to
45:47 - Dev and there clearly is a change right
45:49 - we've added this here so I'm going to go
45:51 - ahead and create this poll
45:54 - request
45:55 - right and we'll merge the poll request
45:58 - I'll confirm
45:59 - it and what we'll do is we'll go up to
46:02 - actions and we'll see what's happening
46:05 - so notice that it's happening now and
46:07 - this is happening on what so click into
46:10 - this and it's happening on this poll
46:12 - request
46:14 - right so notice we still don't have
46:19 - anything on Deb so now the question is
46:22 - if we make another change here I'm going
46:23 - to go ahead
46:24 - and refresh this
46:29 - okay just in case this is mucked up I'm
46:31 - just going to close this out and reopen
46:32 - it again making sure I'm on
46:35 - dev I'm going to press
46:39 - period And so what I'm going to do is
46:42 - I'm going to make another
46:45 - change
46:47 - trigger
46:50 - event
46:51 - on push of Dev
46:57 - okay and so we'll see inter our actions
46:58 - does it trigger
47:01 - now there we go so just understand that
47:04 - that the template in certain cases will
47:07 - have to be in the branch that you wanted
47:10 - to work on um sometimes what happens
47:13 - when you have multiple events is like I
47:14 - will see two pushes occur when there's
47:16 - only one and I've read that that can be
47:18 - a bug that was resolved but in my
47:21 - experience it sometimes happens so just
47:23 - understand that these workflows can run
47:24 - multiple times so make sure that you're
47:27 - whatever you're running can handle that
47:29 - okay but I say we are done here so what
47:31 - I'm going to do is go over to our
47:34 - code and I'm going to delete the dev
47:36 - Branch just so we don't have that stray
47:38 - Branch causing us any issues here so I'm
47:39 - going to go ahead and delete that which
47:42 - is
47:43 - here okay I think that's deleted yeah
47:46 - and uh we'll go back over uh to actions
47:50 - and I want to disable this multi-event
47:52 - thing so we'll go ahead and disable it
47:55 - all right so now it's disabled and I'll
47:56 - see you in the next one one okay
47:58 - [Music]
48:02 - ciao hey this is Andrew Brown and we are
48:04 - taking a look at manual events so you
48:06 - can trigger a workflow manually via the
48:08 - GitHub UI uh GitHub CLI or git rest API
48:13 - um for the github's UI I didn't
48:15 - necessarily find a way to do that so I'm
48:17 - not 100% certain if that really is the
48:20 - case but the doc suggested that we could
48:23 - um but this is the way that we would do
48:24 - it uh programmatically so we would say
48:26 - uh we would use the uh CI in this case
48:28 - and we do GH workflow run and we'd have
48:31 - the file here and then we could specify
48:33 - Flags which are their inputs and here
48:35 - this is actually specifying a file for
48:37 - input if you want to do that um as you
48:40 - can see there so hopefully uh that is
48:42 - clear um in order for this to work we
48:45 - have to use the workflow dispatch
48:47 - because it will accept inputs if you are
48:49 - utilizing inputs to uh uh there so just
48:52 - going back here for a moment notice we
48:54 - have name greeting and data
48:58 - here we have name greeting and data and
49:01 - you can Define up to 10 inputs for a
49:03 - workflow dispatch event so there you
49:07 - [Music]
49:10 - go hey this is angrew brown in this
49:12 - video we're going to take a look at how
49:14 - to trigger an event manually for this
49:16 - one we are going to need some type of
49:17 - compute as I don't believe that we can
49:20 - trigger uh the event manually via the UI
49:23 - but we will see what we can do okay um
49:26 - just in case we actually can I think
49:28 - when they say triggering manually via
49:30 - the UI it might be from one of the uh
49:31 - predetermined
49:34 - templates but what we'll do here is
49:36 - we'll launch up GitHub Cod spaces it's
49:38 - been a little bit of time since I've
49:39 - used it I usually like using git pod but
49:42 - says this is a GitHub course let's use G
49:44 - GitHub code spaces and so I'm going to
49:46 - go ahead and create one on Main uh there
49:48 - are free tiers for this if you don't
49:49 - want to use this you can use your local
49:51 - machine I just want my life to be easy
49:53 - and I want to have a replicable
49:55 - replicable environment that you can
49:57 - utilize as well so we'll wait for COD
49:59 - spaces to spin up and then we will make
50:01 - sure that we are authenticated I can't
50:02 - remember if it comes pre-installed with
50:04 - the GitHub CLI but we'll find out here
50:06 - in just a moment okay all right so we
50:08 - have our uh code spaces up here I do not
50:12 - like this light theme I can barely see
50:13 - what I'm looking at so I'm just go ahead
50:15 - and change this out um it never seems to
50:17 - persist which is one thing I don't like
50:19 - about get a put Cod spases but than that
50:22 - everything's fine we'll just choose a
50:23 - dark theme does not matter which one and
50:25 - so my question is
50:27 - um do we have
50:31 - here terminal
50:33 - size increase that and I'll go back to
50:36 - command pallet here I you think I by now
50:38 - I know these hot Keys control shift p
50:41 - control shift p no control shift p I'm
50:44 - on a Windows machine with a Mac keyboard
50:46 - in a browser like what could it be uh
50:48 - but we'll go here and try just increase
50:50 - this font size again and again and again
50:54 - so you can just see what's going on here
50:56 - but I want to see if uh the gith hip C
50:58 - is installed it looks like it is um am I
51:01 - logged in I don't know I would think so
51:03 - I can't exactly remember what the test
51:05 - command is let me take a look here and
51:07 - see uh what we could
51:11 - do I really don't remember we say GH
51:15 - issue list maybe that is a command yeah
51:17 - so I'm already logged in so this is
51:18 - perfect if you're not logged in um I
51:21 - believe somewhere in here we have the
51:23 - login
51:24 - instructions somewhere in here
51:28 - I remember seeing
51:31 - it there
51:33 - is somewhere in here let me just find it
51:35 - for you I think it's in the crash course
51:37 - it's
51:40 - uh CLI
51:43 - whoops oh this doesn't use Vim
51:46 - mode yeah here it is so like there's
51:48 - instructions and it's not hard to
51:49 - install but uh again this comes
51:51 - pre-installed so you're going to figure
51:53 - that out yourself again if you're using
51:54 - a local machine but what I want to do is
51:57 - I want to um uh have that installed so
52:00 - that we can trigger uh the workflow so
52:03 - what we'll do is go into GitHub actions
52:05 - and in here we have
52:08 - templates and we should have one for
52:10 - manual there we go let's take a look at
52:13 - it first before we do anything just
52:15 - going to increase the font here so we
52:16 - have workflow
52:18 - dispatch and we have the inputs for name
52:21 - so here's the description and this one
52:23 - is required we have greeting and that is
52:25 - required and then some
52:27 - data now I guess we could do this and
52:30 - have a data file I don't really want to
52:32 - have a data file but if it needs it I
52:34 - guess I should do that so what I'm going
52:36 - to do is make a new file here and I'm
52:37 - going to call this um
52:41 - data.
52:43 - Json and I'll just say in
52:46 - here um
52:49 - hello
52:51 - Mars all right and so that will I
52:55 - suppose be our data file we'll go back
52:57 - here and I just want to make sure
52:59 - everything makes sense and if it
53:00 - references things
53:03 - clearly so I think that is fine I'm not
53:07 - sure what the data file should be I'm
53:09 - just going to take a look at my slides
53:11 - as I don't really remember what we pass
53:13 - into there I guess it's actually just a
53:14 - text
53:15 - file um but in this one in
53:19 - particular it's a base 64 thing so what
53:22 - we'll
53:23 - do is I'm going to change this
53:26 - just say uh my data and I'm going to get
53:30 - some data and we'll take this here for
53:32 - example copy this and we'll B 64 encode
53:34 - it so I think it's
53:36 - um what is it B
53:38 - 64 B 64 en
53:41 - code uh Linux because I can't remember
53:43 - what the command is I'm pretty sure the
53:45 - command is B
53:48 - 64 yeah something like that so I'm going
53:52 - to go here copy this go back I I could
53:54 - barely read that but that says uh this
53:58 - here we'll just say hello Mars in here
54:02 - hello
54:03 - Mars and so that's going to give us this
54:05 - value here I'm going to just copy that
54:07 - if I can
54:08 - copy and then we'll replace this and
54:10 - paste and so now we have our BAS 64 some
54:14 - other things that are going on in here
54:15 - is that
54:18 - um no nothing interesting but this is
54:20 - just using you can see the B 64 commands
54:22 - and things like that so I guess we have
54:24 - our file and and all that stuff is set
54:26 - up so I think we're in good shape let's
54:27 - go ahead and copy
54:29 - this and I will go up
54:35 - to our GitHub actions our GitHub folder
54:39 - here I'm going to go paste that
54:44 - in and you know what just so that you
54:47 - don't necessarily have this I'm going to
54:49 - go ahead and just
54:50 - uh refresh this here for a
54:54 - moment I guess that's fine I ever save
54:56 - this file I don't think so maybe it
54:58 - doesn't matter this one's untracked
55:00 - manual trigger let me go back here for a
55:02 - second so this one
55:05 - here is the same I guess we never Chang
55:08 - anything about this file sorry I thought
55:09 - I changed something about the file and
55:10 - so I I was just trying to make it so
55:12 - that
55:13 - um I wasn't taking out all the the
55:15 - learning out of it here okay but anyway
55:17 - so um that file is there let's go ahead
55:20 - and Commit This so we'll just say uh my
55:24 - or manual workflow
55:28 - I know I spelled it wrong I don't
55:30 - care if it bothers you tough
55:33 - luck and so that should be synced we'll
55:35 - go back over to here we'll give this a
55:36 - refresh and so I'm looking under our
55:39 - actions and I want to see that that is
55:41 - here so it's here notice because it has
55:44 - the name parameter so it says this
55:45 - workflow has a workflow dispatch and oh
55:49 - we can run it so I wasn't 100% certain
55:51 - because I couldn't find it before but I
55:53 - guess it's right here but how would it
55:54 - run this line so say uh
55:58 - hello you I I don't know what it wants
56:00 - there we'll run the workflow and those
56:01 - two ones are
56:04 - required so we'll wait and uh see what
56:11 - happens okay and let's see the contents
56:14 - of the file so notice that there it just
56:18 - says contents of the file because there
56:19 - was no file to be passed along but let's
56:21 - go ahead and now trigger this uh
56:23 - manually so I think I might have um
56:26 - in here have the command so we don't
56:28 - have to look for it here it is and so we
56:30 - have get GitHub workflow run greet
56:33 - yaml um this file is not called greet
56:35 - though it's called schedule or sorry
56:40 - manual and the file is
56:42 - called my
56:46 - data and so I'm going to copy this line
56:50 - here and what I want to do is CD into
56:53 - the correct directory because I'm going
56:54 - to assume that it's relative otherwise
56:56 - it's not going to find the file and so
56:58 - we'll go ahead and paste that in here
56:59 - and hopefully it will
57:01 - work could not create workflow dispatch
57:04 - resource not accessible uh by
57:08 - integration all right so it's not
57:10 - letting us do it this could be a
57:11 - permissions issue so let me go take a
57:13 - look okay yeah so there might be a
57:16 - workflow permission so what we're going
57:17 - to do is go over to here go to
57:20 - settings and on the left hand side we'll
57:22 - go down to actions into General and here
57:25 - says allow all actions and reusable
57:29 - workflows any action or reusable
57:31 - workflow can be used regardless of who
57:33 - authored it or where it's
57:35 - defined um any action or usable workflow
57:38 - defined in the repo uh with exam Pro can
57:40 - be used any action usable workflow that
57:43 - matches the specified criteria so I mean
57:45 - this is fine the actions permissions but
57:47 - then we have workflow permissions so it
57:49 - says choose the default permissions
57:51 - granted to the GitHub token which
57:52 - automatically gets passed we learn about
57:54 - that later on that it already gets
57:55 - passed um uh during during the run but
57:59 - when running workflows in the repository
58:01 - you can specify more granly permissions
58:02 - workflows have read and write
58:04 - permissions okay workflows have read
58:07 - read permissions and repository for
58:09 - Content so it makes me think that maybe
58:12 - we don't have permission so I'm going to
58:14 - go back over to here and what we'll do
58:19 - type in clear and type in uh
58:22 - GH because there probably is a way to
58:25 - add add permission
58:27 - just give me a moment to find out okay I
58:29 - didn't get any answers but I'm going to
58:30 - just assume that we don't have
58:31 - permission to do that let's go back and
58:33 - take a look I'm going to try this again
58:34 - and look at the command because usually
58:36 - the status code will be indicate it says
58:39 - 403 uh resource not accessible by
58:42 - integration uh so 403 I don't that's not
58:46 - not authorized right oh it is forbidden
58:48 - okay so if it is a forbidden one then
58:50 - likely that issues the GitHub token so I
58:53 - want to see if there is a GitHub token
58:54 - here so I'm just going to type in dollar
58:55 - sign G Hub token I'm not worried if you
58:58 - see it because it doesn't really matter
59:00 - um it's going to get replaced every time
59:02 - I think they are shortlived and so what
59:04 - we'll do is we will need to go into our
59:07 - account and I'm looking for that token
59:10 - so we'll go
59:11 - to
59:13 - settings and then somewhere here it's
59:16 - going to have access tokens usually
59:19 - developer
59:20 - settings and so we have personal access
59:22 - tokens so we have fine grin or classic
59:25 - kind of like the classic cuz it's easier
59:26 - to use but we'll use fine grain cuz
59:28 - we're supposed to um we'll generate a
59:30 - new token here and I got to log in so
59:33 - give me a moment to authenticate all
59:35 - right so we'll have to create a token
59:36 - this will be for uh
59:39 - workflows workflow token I want this to
59:43 - expire literally
59:46 - tomorrow whatever the date is we'll say
59:48 - tomorrow uh let's us use
59:54 - workflows and um so yeah public repos
59:57 - read only um I'm going to say for only
59:59 - select repos this will be for the good
60:03 - Hub
60:05 - examples oh I got to switch this over
60:07 - [Music]
60:08 - toam
60:11 - proo uh why can't I switch
60:14 - to my other one here I mean I am the
60:17 - resource owner so that makes
60:19 - sense and I'll try this again so let's
60:21 - say exam
60:24 - proo what the heck
60:27 - [Music]
60:28 - um and I'm trying again trying to get
60:30 - that
60:32 - token
60:34 - H maybe I can't create a token because
60:37 - it's in an or give me a second see I'm
60:39 - not 100% certain but um what I'm going
60:41 - to do is just
60:42 - say but I need more than read only I
60:45 - could say all repos it's not really what
60:47 - I want um and then we'll go to
60:49 - repository permissions and what I'm
60:51 - looking for here is
60:53 - workflows which is down below here so I
60:56 - think because I have this in an
60:57 - organizational count it's making it a
60:59 - little bit harder for me to uh do this
61:01 - um so what I'm going to
61:03 - do um just for this one I really didn't
61:06 - want to do this but I'm just going to
61:07 - Fork this so I'm going to create a
61:11 - fork um yep and we'll do copy the main
61:15 - branch
61:17 - exactly and what I'm going to do here is
61:19 - I'll have to get out of
61:20 - this so I'm just going to close this
61:24 - out and I can get this out out of here
61:26 - and this out of here and so I'm going to
61:28 - try this again so what I'll do is um
61:30 - I'll give this a
61:33 - refresh and I want to open this up in
61:36 - code spaces
61:38 - again now for my last one I want to make
61:40 - sure that other one's still not running
61:42 - so I'm going to go back to my original
61:43 - one
61:45 - here yeah see they're still running I'm
61:48 - just going to go ahead
61:49 - and I can't tell what's what now this
61:52 - one is reimagine sniffle so this is my
61:55 - old one I'm going to go ahead and delete
61:57 - this and we'll wait for this new one to
61:59 - open and while that is
62:01 - going
62:03 - um did I open this in the right
62:06 - repo see now I don't know okay I'm G to
62:08 - close this one out sorry I'm getting
62:10 - confused I'm G to go here and I'm going
62:11 - to stop this one as well delete it and I
62:14 - want to go over to the omen King repo
62:16 - which is my
62:19 - personal and I'm going to try this again
62:20 - I'm going to go ahead and open in code
62:22 - spaces and I'm go back over to here I'm
62:24 - going to go to settings since that repo
62:26 - now exists I create that personal access
62:29 - token uh specifically for this one and
62:32 - I'm going to go with fine grain
62:33 - permissions even though they're not that
62:35 - fun to create and so I'll wait for that
62:37 - to open and while that's open I'm
62:39 - generate this token we'll say uh
62:41 - workspaces
62:43 - token let me run
62:47 - workspaces another thing I'm wondering
62:48 - is that maybe because that's an
62:50 - organizational account that I might not
62:52 - been able to do that where it's in a
62:53 - personal account I might have been able
62:54 - to do that no problem so before I
62:56 - generate this out I will want to trigger
62:58 - this first um so what we'll do is we'll
63:01 - wait for this to to run here and then
63:03 - we'll try to run it okay all right so uh
63:06 - this environment's uh launched up and so
63:08 - what we'll do is go over back to our
63:09 - GitHub actions I'm going to CD into um
63:12 - that
63:15 - directory and uh what I need to do
63:20 - here is I need
63:22 - to uh run this file so go ahead and
63:24 - paste this in allow um and again the
63:28 - workflow here is called
63:31 - manual H this is fine the only thing
63:33 - that's changed is the data file so it's
63:35 - called my
63:37 - data and let's see what
63:40 - happens so says no default repo has been
63:44 - set for this
63:45 - directory okay that's fair enough uh GH
63:48 - repo set
63:53 - default um Omen King there we go I it's
63:57 - confused because there's two different
63:58 - ones but so now we have a 404 because I
64:01 - spelled it wrong and I realize the font
64:03 - is small let me just bump it up so you
64:04 - can see what's going on here
64:08 - um so say manual
64:12 - enter still a
64:14 - 404 oh you know because in this repo I
64:16 - don't think we copied it over here did
64:18 - we no it is right
64:21 - here um m n u a l m n
64:28 - m u m u let's go back um over to here
64:33 - let's go into our actions there's
64:36 - nothing in here so I have to enable it I
64:37 - guess by default maybe that's the reason
64:39 - why I didn't see it for the first time
64:40 - and so we have some in here um so I
64:43 - don't want uh this and this in here so
64:46 - I'm just going to get them out of here
64:49 - as I just don't want them to
64:51 - trigger I'll just uh
64:56 - push those
64:58 - changes okay so push those just so we're
65:00 - only dealing with one
65:05 - here uh yeah syn
65:09 - it push it come on you can do it there
65:12 - we go and we'll refresh this so now we
65:14 - only have the one right so we'll go back
65:17 - and hit up and try this again and so now
65:21 - it says 403 so we're still getting a 403
65:24 - so that makes me think that we need a
65:26 - token so I'm going to make a token to
65:27 - have it expire tomorrow I'm going to
65:29 - select this particular repo now um and
65:31 - we'll
65:33 - say a
65:37 - GitHub
65:39 - examples we'll go to here we'll scroll
65:43 - on down we'll say read and write for
65:46 - workflows um whatever the default is I'd
65:49 - like to know what it is this is what I
65:51 - don't like about this it's like it
65:52 - should just tell
65:54 - us well hold on hold on we have update
65:56 - GitHub workflow files that's actually
65:59 - not what we want to do we want to run
66:00 - this but I'll put it on there anyway
66:02 - because we're doing workflows says
66:03 - workflows workflow run artifact so it's
66:05 - actually this that we want it's this
66:07 - that we want um I mean that's all I
66:11 - really want so I don't know if I need
66:13 - anything else to be honest we'll go
66:14 - count permissions everything else seems
66:16 - fine I'm going to generate this
66:19 - token and so I have this token and we're
66:21 - going to go over to here and I'm going
66:24 - to go and set it let's say
66:26 - um
66:28 - export GitHub uh GitHub
66:32 - token and we'll go and paste it in like
66:36 - this I'm going to make sure it's there
66:38 - so EMV GP
66:40 - GitHub and we can see the token is here
66:43 - 11 11aa yeah looks the same more or less
66:45 - I think 11k on the end yes and so now
66:48 - we'll go ahead and try and run this and
66:50 - see if that fixes our issue and now it
66:52 - runs okay so that's what it needed was
66:53 - needed the permissions and apparently we
66:56 - can see the run from here might as well
66:57 - try
67:00 - it if it will let us grab it enter and
67:04 - so we can see um the run in its current
67:09 - state oh I ran it twice oh boy I'm not
67:12 - even doing what I thought I was doing
67:13 - anymore okay great we'll refresh this so
67:15 - it ran twice which is fine but we can
67:17 - see that it trigger we'll click into
67:19 - this and I'm going to just expand this
67:22 - here and I'm really interested in this
67:24 - one to see if it
67:26 - um converted out the contents of the
67:28 - file and it did not oh no it's right
67:31 - here hello Mars never mind it worked
67:33 - great so this one is great we'll go here
67:34 - to actions and I'm just going to go
67:36 - ahead and tell this to disable even
67:39 - though this would only trigger in a
67:40 - manual event um and so we'll call this
67:43 - one done so I'm going to go ahead and
67:45 - stop this
67:47 - workspace uh we go to code
67:50 - here and I want to go ahead and say stop
67:55 - well we'll just delete it cuz I don't
67:57 - need it
67:58 - anymore and I will see you in the next
68:00 - one okay
68:02 - [Music]
68:05 - ciao hey this is Andrew Brown let's talk
68:07 - about web hook events so many of the
68:09 - listed GitHub workflows triggers uh are
68:11 - from a web hook because if you look at
68:14 - it they uh show this web hook event
68:16 - payload indicating that it is coming uh
68:20 - from the API so basically what's
68:22 - happening is that um particular API
68:24 - calls are triggering these web hooks if
68:26 - that makes sense what is a web hook a
68:28 - web Hook is a public facing URL that can
68:30 - be sent to an HTP request often
68:32 - requiring authorization to trigger
68:34 - events from external sources so most of
68:38 - these web hooks will be triggered within
68:39 - GitHub when users are interacting with
68:41 - GitHub which will in turn trigger API
68:44 - actions users generally don't have to
68:46 - directly call apis or rest apis to
68:48 - trigger the workflows you can but I'm
68:51 - just saying that it's just you're just
68:52 - going about your business and these are
68:54 - getting triggered uh but what we really
68:56 - want to know about are the external web
68:58 - hook events so if we just about web hook
69:00 - events we're probably talking about the
69:01 - external ones and in order to do this we
69:03 - have to use the repository dispatch uh
69:06 - there are some things we need to know so
69:08 - um in particular which is uh it will
69:11 - only trigger workflow run if the
69:13 - workflow file is on the default Branch
69:16 - so notice here we have repository
69:18 - dispatch and the type is set to uh uh to
69:21 - web hook okay um when you make the
69:24 - request to the web hook you must send a
69:27 - post request uh send the accept type to
69:30 - be application vnd I assume that s for
69:32 - vendor. GitHub plus Json provide
69:35 - authorization your with your personal
69:37 - access token uh pass the event type as
69:40 - web hook so here is an example of a curl
69:42 - and so hopefully we can uh emulate this
69:45 - simulate this using a curl and get this
69:47 - to work but there you
69:49 - [Music]
69:52 - go hey this is Andrew Brown in this
69:54 - video I want to um go ahead and
69:57 - Implement web hook events so what we're
69:59 - going to do is open this up in GitHub
70:02 - code spaces I'm going to make sure that
70:04 - I'm in my um I'm trying to decide here
70:07 - because we have the omen King repo
70:09 - because I had to create it to end up
70:10 - using
70:12 - um uh the API so what I'm going to do
70:15 - here just thinking about this I only
70:16 - need a token so I'm going to go over to
70:18 - exam Pro code because it doesn't really
70:19 - matter where I am then uh where I
70:22 - execute that I can use that token
70:23 - anywhere and we probably could have done
70:24 - that for the same for the other one but
70:26 - I'm going to go back to exam Pro C repo
70:27 - you go wherever yours is you're going to
70:29 - not have the same issue as me because
70:30 - you're probably using a personal account
70:31 - I'm going to go ahead and create a new
70:34 - code space all right and I think that I
70:36 - have the code for this already
70:39 - possibly uh most courses I just write
70:41 - this stuff out by hand but uh I was sick
70:43 - so I had all this time to prep
70:46 - everything uh ahead of time so we have
70:48 - something for web hook and I actually
70:50 - didn't run it so I don't know if it
70:51 - works so we're going to experience that
70:53 - together try to get some troubleshooting
70:54 - go here but we'll wait for this Cod
70:56 - space to be ready okay all right so our
70:59 - code space is open I'm going to go ahead
71:00 - and change the theme we're going to
71:03 - change it to dark I'm going to go over
71:05 - to GitHub actions into templates I'm
71:07 - going to go ahead and copy the web hook
71:10 - and we'll see allow we'll bring this
71:12 - over
71:13 - into workflows rightclick
71:17 - paste and I want to get rid of these
71:19 - other three so I don't have any
71:20 - conflicts I'll just delete those out and
71:23 - we'll take a look at what we have for
71:24 - our code here so we have repository
71:27 - dispatch types web hook and then it will
71:30 - uh print out that event so very
71:31 - straightforward we'll go ahead and
71:32 - commit
71:34 - that add web
71:38 - hook and we'll go and deploy that so
71:41 - we'll sync those changes there we go and
71:44 - we'll make our way over to the actions
71:45 - tab we'll make sure that workflow
71:47 - appears and so for us
71:50 - to oh it says ADD web hook why would it
71:54 - trigger if it's not on on the
71:58 - push huh that's
72:02 - interesting I thought it would only
72:04 - happen if we have the web hook in but
72:05 - apparently is still triggering I'm going
72:07 - to try I'm just going to do a test here
72:08 - I'm just curious what would happen if we
72:10 - put a read me in here or like a minor
72:12 - change so I'm just going to do this put
72:14 - a
72:15 - space
72:17 - right does this
72:22 - trigger and we'll give this a refresh
72:28 - uh oh sync the changes
72:33 - okay it triggered again why is it
72:35 - triggering that's really unusual so what
72:37 - I'm going to do is I just want to read
72:38 - up on this maybe it Triggers on push as
72:41 - well and we'll go here to repository
72:44 - Dispatch over here um this event will
72:47 - only trigger a workflow run if the
72:49 - workflow files on the default Branch you
72:51 - can um uh use the G Tye API to trigger
72:54 - an event called repository dispatch but
72:57 - it doesn't really make sense because we
72:58 - never
73:01 - specified well I guess the question is
73:03 - like is it on any web hook because if we
73:05 - say web hook does that mean any kind of
73:07 - web hook will trigger this let me read
73:09 - that for a second okay so here it says
73:11 - by default all repo dispatch activity
73:14 - triggers to a workflow will run oh so
73:19 - then I need a different type of name but
73:22 - I specified web hook
73:25 - so I would have thought that okay well
73:28 - let's make a change then and we'll just
73:30 - change this to whatever we want so we'll
73:31 - just call this
73:34 - Custom Custom web hook and so I'll save
73:37 - that so my question is if I do this
73:41 - custom web hook will this prevent it
73:44 - from triggering because I think that's
73:46 - kind of important to
73:47 - know and we'll give this a refresh here
73:50 - and it still is
73:52 - triggering I don't know if I trust it so
73:54 - I'm going to give it a space
73:58 - here we'll do that
74:00 - again we'll sync the
74:03 - changes and we'll check this
74:06 - again what the heck okay let me read
74:09 - this a bit more then so I would say this
74:12 - is actually very confusing I wouldn't
74:14 - expect this to trigger because it
74:16 - shouldn't but if this is the case I mean
74:19 - the way we could prevent that is by
74:20 - using an if statement so if we look up
74:22 - contexts maybe we can use one of those
74:25 - for
74:25 - GitHub
74:27 - contexts because maybe we can get
74:29 - information about what the name of the
74:31 - um web hook or type is here so I'm just
74:34 - checking here to see if there's a
74:35 - context specifically for um uh the the
74:40 - type that is being triggered so maybe we
74:42 - go into uh GitHub here I'm just going to
74:44 - open this up in a new
74:45 - tab and we have GitHub action so the
74:48 - name of the action currently
74:50 - running
74:53 - um h
74:56 - so there should be some way to do this
74:59 - activity types let me type in types
75:04 - here so I'm not sure exactly how we get
75:06 - that so I'm going to go ahead and ask
75:07 - jgpt how do I get the GitHub actions
75:13 - activity type via a context in GitHub
75:19 - workflows and maybe that will narrow
75:22 - that down for us because I'm not sure
75:24 - exactly which one it is is I don't have
75:26 - them memorized so we have GitHub event
75:28 - name might be the case let's take a look
75:30 - here and see what it gives
75:32 - us so you know maybe that might provide
75:35 - if we go back here oh we actually
75:36 - already have GitHub event name in here
75:38 - okay great so I guess the question is if
75:40 - we go into
75:41 - this and we take a look oh has this been
75:45 - failing oh this has been failing this
75:47 - entire time well that maybe is the
75:49 - reason why it's not working because if
75:50 - it's failing then it maybe this is not
75:52 - even detecting this at all you have
75:55 - error on line 14 I remember this
75:56 - happening to me before and it was like
75:58 - so hard to resolve the no the no problem
76:00 - here so what I'll do that's what's
76:04 - happening oh you know what it
76:06 - is there's a colon missing
76:09 - here okay so I think this probably does
76:12 - work how it's supposed to
76:14 - work I think in like our first video I
76:16 - had that issue or somewhere else and I
76:18 - don't know I had that problem but I must
76:20 - have missed the colon so say uh fix the
76:23 - syntax and so probably wasn't reading
76:25 - this file whatsoever okay so we'll go
76:27 - ahead and sync this and we'll go back
76:29 - and what we're expecting is this not to
76:32 - trigger and so I
76:35 - think yeah it is now not triggering
76:37 - that's what we want to happen okay great
76:39 - so let's go take a look at how we can
76:42 - run this uh so I'm going to go back to
76:46 - our uh readme file and I already have a
76:50 - corl set up so I'm going to go down here
76:52 - and I have to customize it the first
76:55 - thing is the
76:57 - repo so that is exam
77:01 - proo for yours it's going to be
77:03 - different right and then uh this one is
77:07 - GitHub examples assuming I spelled that
77:10 - right I'm using the lower H by accident
77:12 - that's totally fine we will swap that
77:13 - out and so this is what it's supposed to
77:16 - be uh what is missing here is the
77:18 - personal access token we'll go over here
77:21 - we'll generate a new token just for this
77:23 - use case
77:28 - and we'll go down to
77:30 - settings
77:32 - and developer settings and personal
77:35 - access tokens and fine grain access
77:38 - tokens and I apparently have that from
77:40 - last time I'll delete it we'll make a
77:42 - new token say uh web hook
77:46 - custom and this will expire seven days
77:48 - I'm just too tired to do anything about
77:50 - that um and I'm going to choose this
77:53 - repo um
77:55 - the problem is that this is in the exam
77:57 - proo repo that's why we use the other
78:00 - repo because I can't access it this way
78:02 - I can go get a um this token and see if
78:04 - this will work whoa I don't want to
78:06 - delete that that's my uh production one
78:08 - I'm going to go ahead here and generate
78:09 - a new token with the classic I just
78:11 - don't care um and I'm going to see if I
78:14 - can do that with
78:15 - workflows not sure if actions are in
78:17 - here at all think it's just workflows
78:20 - and we'll see if this one
78:21 - works don't care what it's called we'll
78:23 - go down below because I need something
78:25 - that's going to go across account I just
78:27 - need my life to be really easy here
78:29 - today I mean if you want to use the
78:31 - proper one you definitely know how
78:32 - because I showed you um in the last
78:35 - video but I'm going to go ahead and try
78:37 - this and see if that works so we go
78:38 - ahead and copy this and paste this in
78:40 - we'll hit
78:42 - enter and there must be a syntax a here
78:45 - because it's hanging see it's doing that
78:49 - so not sure what it is I'm just going to
78:51 - cancel it out you know what it is I'm
78:52 - missing a double quotation here on the
78:54 - end and we'll try this again I'm really
78:56 - hoping that we don't have to go back to
78:57 - our other
78:58 - repo okay
79:00 - so maybe it worked we'll go back over to
79:03 - here give us a
79:05 - refresh
79:08 - um well this failed a moment ago so I'm
79:11 - not sure if this is related maybe it's
79:12 - still not working there's still a syntax
79:15 - error saying okay so we'll go back to
79:18 - here and on line 16 it has a problem
79:25 - not sure what I don't need to check out
79:26 - the repo so what I'm going to do here is
79:29 - just take these two lines
79:33 - out we'll just say uh try
79:37 - again I only want this I don't want that
79:40 - this has my uh token and I don't want to
79:42 - commit that and so we'll sync this
79:47 - here I don't want to commit
79:50 - that are you not listening to me here
79:53 - today I'm going cut this out I just
79:55 - don't want this to compromise my key
79:58 - we'll discard this change here
80:01 - discard okay CU we always grab it from
80:03 - here um I just want to see what changes
80:06 - it's going to sync please sync the
80:08 - changes thank you um I'm just uh worried
80:10 - that I might have committed my keys I'm
80:12 - just going to double check
80:16 - here oh we changed that back at
80:19 - least
80:21 - and I mean is that
80:24 - do split
80:26 - here what is that what I just
80:29 - pushed oh no try again is the real
80:31 - commit there we
80:33 - go and yeah so that one's more
80:35 - simplified let's go take a look here in
80:37 - actions it's still failing okay great so
80:39 - what is our problem uh line 14 line 14
80:42 - it's always line 14 let's go back over
80:44 - to our repo here and we'll take a look
80:47 - again and it has a problem with this
80:50 - line I cannot tell what's wrong with it
80:52 - but sometimes this happens
80:56 - so I'm just going
80:58 - to take all of that
81:00 - out try oh you know it's not
81:03 - indented one two try again times two and
81:09 - we'll commit that and we'll say yes
81:12 - we'll go back we'll go to
81:17 - actions and I'm hoping that it doesn't
81:20 - show up I'm going to just wait a minute
81:22 - or two here and we'll just make sure
81:24 - that it absolutely isn't triggering okay
81:26 - just give me a moment all right so I
81:28 - don't think it's uh
81:29 - triggering again so that that means
81:31 - maybe there's no syntax problem and so
81:33 - what I'm going to do is go back over to
81:35 - here we just get this out of here and uh
81:39 - did we not commit something
81:41 - here did I
81:44 - what I thought I committed the
81:46 - change all right um make sure we commit
81:51 - this like am I missing something
81:53 - here oh outo it hasn't even gone
81:57 - anywhere come on go go
82:02 - leave oh please tell
82:04 - me oh
82:07 - no no and you know the thing is like I
82:11 - could take this I could bring this over
82:13 - to something like uh
82:14 - yaml linter that's what they say take it
82:17 - over to yaml linter and try it
82:19 - again and it will tell you whether
82:21 - there's a problem
82:23 - now that That's Just Junk um I almost
82:26 - like entered it into some kind of junk
82:28 - site and we say format or validate oh it
82:32 - actually is showing an error
82:36 - oh uh incomplete mapping pair okay well
82:40 - what if I do
82:44 - this what if I do
82:49 - this
82:52 - what what if I do
82:56 - this
82:58 - why okay whatever if it fixes the syntax
83:01 - here that's all I care about but you've
83:02 - seen me do this multiple times having an
83:04 - echo not doing that but it must be
83:07 - having a hard time and it is not copying
83:10 - [Music]
83:13 - copy okay that's a frozen file try this
83:16 - again
83:21 - paste this commit should not
83:25 - trigger a deploy you can see a lot of
83:28 - the struggle with uh GitHub actions is
83:30 - just yaml but that's not a bad thing
83:34 - like it's so fast and
83:37 - responsive and so I'm not seeing it
83:39 - triggered now excellent okay great so
83:41 - now what I want to happen is to take
83:43 - this or just hit up I guess on my
83:44 - keyboard and try it again I want to go
83:49 - back and see if it triggered and it did
83:51 - excellent so I was able to use the
83:53 - classic token
83:55 - um which was a lot easier to work with
83:56 - sorry I know we're not supposed to use
83:58 - it but I did I'm going to go ahead and
84:00 - delete this
84:01 - one and uh go back
84:04 - here so that triggered no problem we'll
84:07 - go take a look at the response to
84:08 - dispatch my other thought that I had was
84:11 - like if we had the GitHub event name and
84:14 - we printed it out it didn't even print
84:16 - it out just printed out GitHub event
84:18 - name oh no it printed out here never
84:20 - mind right here okay great um maybe we
84:22 - could have used an if statement to limit
84:24 - it but apparently it just we had that
84:26 - syntax here but yeah that one was a
84:28 - little bit trickier but I guess we can
84:29 - call that done so what I'll do is go
84:32 - over here and I'll stop my code spaces
84:35 - and I will see you in the next one okay
84:39 - [Music]
84:42 - ciao let's take a look here at
84:44 - conditional keywords for steps so if you
84:46 - have a job you can have an if statement
84:49 - and it is a conditional that can be used
84:51 - to prevent a job from running unless the
84:53 - condition is m so in this example we are
84:56 - using the GitHub
84:58 - context GitHub and we're doing do
85:01 - repository and seeing if the repo equals
85:03 - the same um you always must use the
85:07 - dollar sign double curly expression
85:10 - syntax if you want to reverse the um
85:13 - statement so if you have an exclamation
85:15 - mark you can do that here we have a
85:17 - function which is for Expressions which
85:19 - we'll talk about separately but yeah
85:20 - there you go
85:24 - [Music]
85:26 - hey this is Andrew Brown this video
85:27 - we're going to take a look at
85:28 - conditionals uh so I'm going to hit
85:30 - period on my keyboard here and I'm just
85:32 - going to open this in another tab I
85:34 - meant to keep a tab open so we can make
85:36 - our way over to the actions tab and so
85:40 - what I want to do this time is run a
85:42 - conditional so I think I have one here
85:44 - all right so I'm going to go ahead and
85:45 - copy this one and we'll paste it into
85:47 - our workflows
85:50 - directory and it's very straightforward
85:52 - the idea is that if this repo equals
85:54 - this then say hello world if it's not
85:56 - say goodby Moon so we're going to launch
85:58 - this one even though this does not match
85:59 - our repo name and so we're expecting
86:01 - only goodby moon to execute right so
86:03 - we'll go ahead and say
86:08 - conditional and we will commit that
86:11 - we'll go back over to
86:12 - here and we will see if that run well it
86:15 - will run but the question is what will
86:16 - it run so usually it's pretty darn fast
86:19 - here
86:25 - and we'll expand it and we get good by
86:27 - Moon excellent so let's go ahead and
86:29 - type
86:32 - in exam
86:37 - proo GitHub
86:43 - examples we'll say uh
86:47 - conditional um uh modified
86:56 - and so we'll wait for that to complete
86:58 - all right let's take a look here to
86:59 - conditional uh modified and we'll see
87:01 - Hello World and goodby moon so they both
87:03 - ran as we adjust the name so that is all
87:05 - we wanted to do here I'm going to go
87:07 - ahead and go to this uh example which
87:13 - is example workflow that's a terrible
87:15 - name for this one we'll go ahead and
87:17 - disable that workflow but yeah because
87:19 - it should have been called conditional
87:20 - so we know what it is but uh there you
87:23 - go and I'll see next one okay
87:25 - [Music]
87:29 - ciao let's take a look here at
87:31 - Expressions which are uh basically
87:33 - functions that you can utilize uh within
87:35 - your workflows that are built in um
87:38 - there is other things besides just
87:39 - functions but I think these are the most
87:41 - important so that's what I want to show
87:42 - you the first are basically mostly
87:44 - string functions but we have contains
87:46 - starts with ends with uh format if you
87:48 - want to change the format join if you
87:50 - want to join the string to Json uh from
87:53 - Json hash files so all that stuff is
87:56 - pretty straightforward maybe except for
87:58 - hash files but that just makes a hash of
88:00 - files um and then you have status check
88:02 - functions whether things are successful
88:04 - or not uh so hopefully that is clear and
88:06 - we'll see you in the next one okay
88:09 - [Music]
88:12 - ciao hey this is Andrew Brown in this
88:14 - video we're going to take a look at
88:16 - Expressions so this should be pretty
88:17 - straightforward I'm going to open this
88:19 - up in a new tab I'm going to press
88:20 - period for
88:24 - uh GitHub action so we can see what
88:26 - they're talking about uh so I didn't
88:28 - cover everything there's like literals
88:29 - and operators U that stuff is pretty
88:31 - darn straightforward uh so I was mostly
88:33 - interested in the functions and check
88:35 - fun functions I don't think we talked
88:36 - about object filters as I didn't have
88:39 - much reason to utilize those but if I
88:41 - find that it's on the exam then I might
88:42 - come back and uh mention that but you
88:45 - can see it's pretty straightforward you
88:46 - just have a wild card and some other
88:49 - selectors there but anyway let's go back
88:51 - and take a look at our function so you
88:53 - can see these are all the ones I just
88:54 - pulled it in a list and showed it to you
88:56 - the ones that are kind of interesting
88:57 - are these status check functions uh
88:59 - where you can use them in the if
89:00 - statements and that's where they're
89:01 - going to be mostly valuable because it's
89:03 - whether it's success or cancelled or
89:06 - always or failured so anyway we'll go
89:09 - back over to here and I should have one
89:12 - I've never ran it but uh you can see why
89:14 - there's so much stuff in here but I've
89:15 - never ran it and we're going to
89:16 - experience together whether this thing
89:18 - works so go ahead and paste it um into
89:22 - here and before we do I just want to
89:23 - make make sure yeah those are disabled
89:26 - excellent um you know what I might do is
89:28 - I might just get rid of these other ones
89:30 - here for now we'll just go ahead and
89:31 - delete
89:32 - those and we'll go over to here and add
89:36 - them and we'll just say Express function
89:39 - example and this one here will happen on
89:43 - Main push and I don't know why I have
89:44 - these in here let's take those out cu I
89:46 - only really want them on this
89:48 - one just take that
89:51 - out and we'll give that a go
89:55 - oh didn't add it come on I don't like
89:58 - that because then it's like I might end
90:00 - up having two runs we'll go here we just
90:03 - have one run okay that's fine so we will
90:05 - wait for that to oh it already failed
90:07 - let me get syntax here of course there's
90:09 - a syntax here we'll go to line
90:12 - 25 and I think I kind of learned from
90:14 - last time a mistake so I'm just going to
90:16 - go ahead and copy this go to the yaml
90:20 - lter and let's go to one that is not a
90:22 - um spam spammy one and we'll paste it in
90:25 - here we'll say validate and it does have
90:27 - an issue here on this
90:30 - line on the labels part okay so at least
90:33 - we know there's something wrong with
90:36 - it what did it say which line uh issues
90:42 - label I guess that makes sense why I
90:44 - might have the issues in there but
90:48 - um this one
90:52 - here I guess I should put the issues
90:54 - back in here if we're going to do that
90:56 - but it has an issue with this line
90:59 - [Music]
91:03 - here what doesn't it
91:05 - like let's put the single quotations
91:08 - around it will that correct the
91:10 - issue sometimes it needs
91:18 - that oh still doesn't like it
91:24 - what's the issue now um bad initation of
91:26 - the sequence on line
91:29 - 27 well I wasn't wrapping it though line
91:33 - 27 so I think this one's fine we'll give
91:34 - this a go try this
91:40 - again still doesn't like
91:42 - it line 24 just give me a moment okay
91:46 - you know what I'm not really sure what
91:47 - its problem is but what I'm going to do
91:49 - is I'm just going to
91:50 - remove this issue one it's not like we
91:52 - need to run all of them I mean you have
91:54 - an idea of how this stuff works so we'll
91:57 - do that and I think that was the only
91:58 - one with issues and that's all I wanted
92:00 - that one for anyway so we'll go ahead
92:02 - and we'll just try and fix Expressions
92:06 - here notice like most debugging issues
92:09 - is going to be just yaml files there's
92:11 - something stastically I'm not picking up
92:13 - which is weird because I I know yaml
92:15 - really well um but uh I'm missing
92:17 - something and we still have a problem on
92:19 - line 24 I hate this line 24 nonsense
92:24 - um I'm noticing like like that these are
92:28 - are looking a little bit different so
92:29 - what I'm going to do I'm just going to
92:31 - do
92:32 - this on all of these
92:34 - here and see if that resolves our
92:39 - issue and I'm just going to keep doing
92:43 - this what is its
92:46 - problem there has to be something that's
92:48 - mucking it up and I'm thinking it has to
92:50 - do with the dollar sign double curlies
92:52 - is what I'm thinking
92:55 - so like if I was to
92:57 - take these three
93:00 - here or these four here and dump them on
93:03 - the
93:04 - bottom but these still need to be at the
93:06 - bottom because I want them to happen
93:08 - last right
93:11 - um this is
93:14 - frustrating this is really frustrating I
93:16 - wish we had a better linter um what I'm
93:19 - going to
93:21 - do I really don't have to install a
93:22 - linting tool here though can I let's see
93:25 - there's like uh
93:27 - yaml please tell me there's a yaml one
93:29 - in
93:31 - here this is yaml we'll try
93:36 - that I'm hoping that like maybe it will
93:40 - tell us if there's something wrong there
93:42 - we go now we're getting problems uh
93:44 - nested mappings are not allowed in
93:46 - compact
93:49 - mappings nested mappings okay so it's I
93:53 - think it's getting confused use what in
93:54 - what is happening I'm going to put
93:56 - doubles here I
93:59 - guess and then I'm going to try to put
94:02 - exclam uh like uh back for slashes like
94:05 - that and maybe that will fix our
94:14 - issue oh and then it even has them over
94:16 - here as well
94:26 - okay then we'll do this
94:37 - [Music]
94:45 - one and so I'm hoping that fixes the
94:48 - issue
94:51 - but uh let's see here name here missing
94:56 - property
95:00 - uses why does it need
95:04 - uses all right
95:09 - um oh I guess it should do something you
95:11 - know what we should say like I have to
95:12 - give it a run so just say uh we'll say
95:16 - Echo
95:18 - success or
95:21 - Echo failure
95:26 - uh we don't need a coal in there that
95:27 - makes no sense there we go and so maybe
95:30 - that will fix our
95:33 - issue expression
95:35 - function I'll go ahead and commit that
95:39 - and hopefully hopefully hopefully
95:41 - hopefully no syntax error fingers
95:44 - crossed there we go at ran we'll take a
95:46 - look here and we'll click into it and
95:48 - you can see all of them working so you
95:53 - know contain start with ends with echo
95:56 - or sorry um format whatever whatever
95:58 - pretty straightforward um if you want
96:00 - take a closer R of that but I'm going to
96:02 - call this one done we're going to go
96:04 - ahead over to our actions I'm going to
96:07 - go
96:09 - and disable this for now and I will see
96:12 - you in the next one okay
96:14 - [Music]
96:18 - ciao hey this is Andrew Brown and we are
96:20 - taking a look at Runners so Runners
96:22 - determine the under line compute and Os
96:25 - that the workflow will execute on the
96:27 - runner can be GitHub hosted where GitHub
96:29 - is providing a predefined runtime where
96:33 - they have standard size which comes with
96:36 - Ubuntu uh Windows Mac OS then there's
96:40 - the larger size this is only available
96:42 - for orgs and Enterprises using GitHub
96:44 - teams or GitHub Enterprise Cloud plans
96:47 - which we are not going to touch but I
96:49 - just want you to know that it's there
96:50 - they might even call it premium I don't
96:52 - know there's not cons doesn't see with
96:54 - the naming here but it has more RAM CPU
96:56 - and dis space and it comes with a static
96:58 - IP address and the ability to group
97:00 - Runners and auto scaling to support
97:02 - concurrent workflows then we have
97:04 - selfhosted this is external compute
97:06 - connected to GitHub using the GitHub
97:08 - action selfhosted Runner application you
97:11 - create custom Hardware configurations
97:13 - that meet your needs this is when you'd
97:15 - want that um the way you specify Runners
97:18 - is with the runs on command if you
97:21 - specify an array of strings or or
97:23 - variables your workflow will execute on
97:25 - any Runner that matches all the
97:28 - specified run on values is that
97:30 - confusing yes but apparently it works
97:33 - anyway let's go take a look at the a
97:35 - more direct comparison and I don't know
97:38 - why this one is like that sometimes
97:40 - PowerPoint just does this to me like
97:41 - this weird stuff but let's take a look
97:44 - at this uh comparison of these two all
97:48 - right so we have GitHub hosted Runners
97:49 - and self-hosted
97:51 - Runners and uh I'm stuck on my Eraser so
97:54 - let me just get back I don't want a
97:56 - pointer I just want nothing there we go
97:59 - okay great so let's look at the
98:00 - comparison so between setup and
98:02 - maintenance GitHub hosted Runners no
98:04 - setup required fully managed by GitHub
98:06 - self-hosted Runners requires manual
98:08 - setup maintenance because you are the
98:10 - one setting up the compute uh the cost
98:13 - is free with limits on usage uh charges
98:15 - for extra minutes for self-hosted
98:17 - runners no cost for runners
98:18 - infrastructure cost applies for
98:21 - scalability GitHub hosted Runners on ly
98:23 - scales based on demand selfhosted you
98:26 - manage the scaling CU you manage the
98:29 - compute the environment controls are
98:31 - predefined environments for GitHub
98:33 - Runners uh but they're limited with
98:35 - self-hosted Runners you can do whatever
98:36 - you want because you are running the
98:38 - compute guess what for OS is you have
98:41 - Windows Linux or Mac OS for self-hosted
98:44 - you can pretty much do whatever you want
98:46 - though I think that there's probably
98:48 - some limitations but um cuz I could have
98:50 - swore it was like Hey you have to do
98:51 - this but it's mostly the same thing
98:52 - Windows Linux Mac
98:54 - but I guess the other thing is like when
98:55 - you're using GitHub hosted Runners it's
98:56 - like Linux huntu but what if you want to
98:58 - use a different variant of Linux GitHub
99:01 - hosted Runners for security secure but
99:03 - but runs in a shared environment
99:05 - selfhosted uh it's whatever you're doing
99:08 - because you're the one running it
99:09 - performance fix performance capabilities
99:12 - for self-hosted it's whatever you choose
99:14 - it to be uh GitHub hosted Runners access
99:17 - to for internal resources limited uh
99:20 - unless using self-hosted
99:21 - Services um if it's self hosted it's in
99:24 - your network you can do whatever you
99:25 - want um uh customization is limited in
99:28 - the GitHub environments for GitHub
99:30 - hosted Runners for self hosted you can
99:31 - do whatever you want uses limits there
99:33 - are uh limits and quotas and then again
99:36 - self-hosted anything you want so
99:38 - hopefully that makes it clear
99:38 - self-hosted is do what you want for the
99:41 - most part
99:43 - [Music]
99:46 - okay hey this is Andrew Brown and in
99:48 - this video uh we're going to take a look
99:50 - at gith GitHub uh host Ed Runners so
99:54 - we're going to change it to be something
99:55 - that it normally isn't usually we use a
99:57 - bunto latest every single time um but
99:59 - I'm going to go ahead and press period
100:02 - before I do that I'm going to open up
100:03 - actions tab we'll press period and I'm
100:05 - going to want to copy over um to in here
100:09 - I have a Windows and a Mac one so
100:11 - somewhere in here we
100:14 - have Runner Mac OS Runner Windows cuz
100:17 - those are two that we have yet to do and
100:20 - we'll go ahead and paste them in uh
100:22 - lucky for for you I made sure that these
100:24 - work uh prior but um let's take a look
100:26 - at the Mac OS one so here we're saying
100:28 - Mac OS latest sorry I had a scam caller
100:31 - um so for Mac OS here we can see that we
100:33 - are checking out a repo we are creating
100:35 - a swift file we're installing Swift
100:37 - linter and we run the Swift linter and
100:39 - then we compile Swift Code because Swift
100:42 - is something that you would expect to be
100:44 - on Mac okay for the windows one we have
100:47 - um Windows latest I'm not sure why this
100:51 - is on the poll request we'll take that
100:52 - off of there it doesn't need to be on
100:53 - there not sure how that got there and so
100:55 - here we're installing um via Choco Choco
100:57 - is like Homebrew for for Mac we're
101:00 - installing Powershell if it's not there
101:02 - and then we have a Powershell program no
101:05 - it's actually dot I don't know
101:07 - installing well I guess it's specific to
101:09 - to um to Windows so it makes sense that
101:11 - we would use choco to test something
101:12 - here but anyway here we would um add
101:16 - content uh add content this is a net
101:19 - program that's what I meant to say a net
101:21 - program and then we run it and then over
101:23 - here we are using um poers shell they're
101:25 - running it so all this stuff is very
101:27 - particular the only thing that I'm
101:28 - noticing here that is a bit different is
101:30 - this here the shell command so I don't
101:33 - know if we actually ever cover that if I
101:36 - haven't I'll have to do that in a
101:37 - separate video shell GitHub
101:41 - command I don't know how I missed
101:44 - that but clearly that's changing the
101:46 - shell
101:48 - so oh yeah I think I actually skipped
101:51 - the slide for some reason but anyway um
101:53 - not this in particular but I'm thinking
101:54 - now that I probably missed that I'll
101:56 - have you won't notice it'll be in the
101:57 - course but um here it's changing the
101:59 - shell to be power shell that makes sense
102:01 - anyway so what we'll do is um we'll
102:03 - bring these two over all right so we'll
102:06 - just say runners or Mac OS and windows
102:10 - and hopefully they'll work the first
102:11 - time around and so we'll push that we'll
102:15 - go here so what could running Mac and
102:17 - windows ones be useful for well of
102:19 - course if you developing apps for either
102:20 - of those but like let's say You're
102:22 - Building
102:24 - yeah that's what it is like you're
102:25 - compiling apps uh like it could even be
102:27 - mobile apps I suppose but anyway we will
102:30 - wait for those to run and see what
102:31 - happens okay all right so let's take a
102:33 - look at these runs so we have the
102:35 - windows one and the Mac one actually I
102:37 - can't tell which is which because they
102:38 - look very similar um oh this is the
102:40 - windows this is the Mac okay so we'll go
102:42 - into here and we'll take a
102:45 - look and it's fine it passed great see
102:49 - it compiled it cool and we go into our
102:52 - Windows one
102:56 - and
102:59 - um you can see that it ran okay so
103:02 - everything is good and so that's all we
103:05 - want to do there so we'll just go ahead
103:06 - and disable
103:08 - these and that is our example for
103:11 - running Mac and
103:14 - windows and I will see you in the next
103:16 - one okay
103:18 - [Music]
103:21 - ciao hey this is is Andrew Brown and we
103:24 - are taking a look at self-hosted Runners
103:26 - we did talk about them but we didn't
103:28 - talk about how we'd actually utilize
103:30 - them so selfhosted Runners can be
103:32 - physical virtual in a container on
103:34 - premise in the cloud wherever you want
103:36 - them to be uh you can add self-hosted
103:38 - Runners at various levels in the
103:39 - management hierarchy at the repo level
103:41 - the org level the Enterprise level to
103:44 - set up self-hosted uh you need to add a
103:47 - runner and install the GitHub actions
103:48 - Runner to connect the external compute
103:51 - to the self-hosted runner so here
103:53 - uh when you go and create one they'll
103:55 - give you the steps here to do that and
103:57 - so we'll have to try that out if you
103:59 - want to know more about the runner
104:00 - itself the GitHub actions Runner they
104:02 - got a repo there that's this nice little
104:04 - logo but we'll actually take a look and
104:07 - see if we can make our own self-hosted
104:09 - [Music]
104:13 - Runner hey this is Andrew Browns and in
104:15 - this video we're going to take a look at
104:17 - self-hosted Runners so I'm going to go
104:18 - over to our repo and I feel like we're
104:21 - going to need compute for this one I
104:22 - can't remember if I have a template for
104:24 - this let's go take a look uh before we
104:26 - jump in and so I might have
104:29 - one self host I just want to see what we
104:31 - have in here um it's a very simple
104:34 - script so yeah it's something that we'll
104:36 - utilize um what I'm going to do here is
104:39 - go ahead to code and we will launch up
104:43 - code spaces for this one which opens up
104:46 - in another tab which is
104:48 - nice and we will wait for that to
104:51 - provision as that is going we we'll go
104:53 - here the left hand side and we'll go to
104:56 - Runners uh I think this wasn't here just
104:59 - a second ago so maybe they just added a
105:00 - feature while we've been working we go
105:03 - to self Runner we can add a new
105:06 - Runner and we'll go here I get to it
105:09 - took us over to our settings page here
105:11 - in our org and we'll go and set set new
105:14 - now I assume that this can be done at
105:16 - all levels if you don't see it then
105:17 - maybe it needs to be an or level sorry I
105:19 - don't know anyway the point is is that
105:21 - I'm going to just show you how to create
105:22 - that stuff frer and we have a few
105:24 - options we have Windows Linux and Mac OS
105:26 - I'm going to go with Linux here today
105:28 - and um so the question is can I run it
105:32 - in GitHub codes spaces I'd be really
105:34 - curious to see if that works what we'll
105:36 - do here is we'll just wait a little bit
105:38 - for this to provision and we'll try it
105:40 - out I'm expecting this not to work
105:42 - because we are in a codes spaces
105:44 - environment but uh if that doesn't work
105:46 - I can always try my local machine we'll
105:48 - figure something out okay and actually
105:49 - while we're waiting for that we can go
105:51 - over to the GitHub actions Runner it
105:53 - GitHub actions Runner uh GitHub and
105:57 - maybe we can just read about it a
106:01 - bit Yeah GitHub actions Runner the
106:03 - runner is an application etc etc um I'm
106:06 - just curious about the PRX because I
106:07 - don't think I looked into this so here
106:10 - it's supporting very specific uh
106:11 - distributions so we have a lot of
106:13 - options we have to install the net core
106:16 - Linux dependencies whoa um we need a
106:20 - full list uh dependency so it looks like
106:23 - it's pretty involved so I'm not sure how
106:25 - I'm going to install this in code
106:28 - spaces also it doesn't talk about like
106:31 - any kind of communicational
106:34 - things
106:35 - um the config sh will checknet core
106:40 - three times dependencies during the
106:41 - runtime so what we'll do we'll just try
106:45 - it I'm not saying it all work but we'll
106:47 - try it and we'll see what will happen if
106:49 - we uh go ahead and configure this it's
106:53 - not that important that we get a working
106:55 - um
106:56 - self-hosted Runner it's just more going
106:58 - through the process and learning it okay
107:00 - so if we quit here and it doesn't work
107:02 - that's totally fine so what we'll do is
107:03 - we'll go through each step and we'll see
107:05 - what happens so the first thing is we
107:07 - want to make a
107:08 - directory uh so we'll do
107:11 - that and I'm just going to CD it doesn't
107:13 - matter where we CD I was thinking like
107:15 - in we're in git pod but we're not yeah
107:17 - just to make it not a messl CD back One
107:21 - Directory all right so we ran that
107:25 - line
107:28 - and um I'll copy the next line
107:33 - here and hit
107:35 - enter and we'll go back over to here and
107:37 - I'll grab the next line use the copy
107:40 - button I guess and hit
107:42 - enter I mean see pretty straightforward
107:44 - and we'll copy this one and we'll hit
107:49 - enter is that going to work is that
107:52 - going to entire
107:53 - or is it just really big I guess it's
107:55 - working
107:57 - LS um yeah I guess it's doing something
108:00 - we'll go back here now we'll
108:02 - configure and notice that there's a
108:04 - token here so I'm assuming that's how it
108:05 - knows what to do is because of that
108:09 - token but you know again I'm going to
108:10 - assume that we don't have the PRX on
108:12 - this machine or oh connected to GitHub
108:15 - there we go enter the name of the grp uh
108:17 - runner group to add this to the runner
108:19 - we'll just hit enter to go to the
108:20 - default enter the name of the runner
108:23 - uh we'll call this um Enterprise I guess
108:27 - I don't know the runner will have the
108:30 - following labels as the default add any
108:32 - dictional labels we'll say
108:35 - Enterprise and so we uh enter the the
108:38 - name of the work
108:41 - folder what is the work
108:43 - folder is it where it's going to perform
108:46 - the
108:46 - work uh we'll just hit enter for work I
108:49 - suppose there we go um so that is
108:56 - done
108:57 - okay so we should be able to use it now
109:01 - it just seems like there should be more
109:02 - to it but
109:05 - apparently that's all we had to do if it
109:07 - works that's great if it does it I don't
109:09 - care we we at least saw the the setup
109:11 - for it so we'll go over to our GitHub
109:15 - actions and we will go into our
109:18 - templates and we'll go down below to
109:21 - selfhosted
109:23 - and this looks pretty straightforward uh
109:25 - this is set to selfhosted we'll go ahead
109:27 - and copy now we could probably also put
109:29 - the other label there if we don't want
109:31 - to have self-host and say Enterprise I'm
109:33 - just going to have it as self-hosted
109:34 - we'll keep it simple and then we'll go
109:37 - here and paste this right in here paste
109:40 - paste paste paste paste and we'll go
109:43 - over to here and we'll just say commit
109:46 - selfhosted
109:48 - Runner still I'm not sure how this would
109:51 - work
109:53 - feel like it can't it can't be this easy
109:57 - there's no way it never is this easy but
110:00 - um I guess we'll find
110:03 - out so got to get back to our
110:09 - repo all right and we'll go over to
110:13 - actions and we'll go to commit
110:15 - self-hosted
110:17 - Runner and we'll click into this and
110:20 - this is what usually what happens it'll
110:22 - say waiting for a runner to pick up the
110:23 - job and so I don't see
110:27 - how this could work because none of the
110:30 - ports are
110:32 - open so I think that um if the ports
110:35 - were open and again it doesn't say what
110:37 - ports have to be open so I'll go ahead
110:38 - and say
110:39 - self-hosted networking
110:42 - Runner like how how would it you know
110:45 - what I
110:46 - mean
110:48 - Network yeah so we'll go to
110:50 - communication between self-hosted Runner
110:52 - um the cell phones that run connects to
110:54 - GitHub to receive jobs you must ensure
110:55 - the machine has appropriate network
110:56 - access to at least 70 kilobits uh
110:59 - connection between the cell phon and
111:00 - GitHub has to be open on Port
111:02 - 443 so I don't think this is going to
111:04 - work um but it is interesting to see
111:07 - that and I think we kind of satisfied
111:09 - what it is that we wanted to see you'll
111:11 - notice that it just it will never pick
111:12 - up the runner here so I'm going to go
111:13 - cancel it
111:14 - out feel like it be a lot of work to get
111:16 - this to work on my local machine another
111:18 - thing that we could do is we could go
111:20 - over to uh let's say AWS or anywhere and
111:24 - try it there
111:26 - um we could do that but then we might
111:28 - have to configure a bunch of stuff so I
111:31 - would just say for the scope of this
111:33 - exam I think that we learned what we
111:35 - need to know or certification um and if
111:37 - you really want to go full full on on
111:39 - this you can do that I'm just trying to
111:41 - make your life a bit easier here today
111:42 - but I'll see you in the next one okay
111:45 - [Music]
111:48 - ciao hey this is Andrew Brown and we're
111:51 - taking a look at workflow Cod command so
111:53 - actions can communicate with the runner
111:55 - machine to set in Nars output values
111:57 - used to buy other actions add debug
111:59 - messages to Output logs and other tasks
112:02 - so here is an example where we're using
112:04 - the Run command but what's interesting
112:07 - is the fact that we have this do GitHub
112:09 - uh path which we'll talk about next
112:11 - about these uh special
112:13 - envs um so the idea is that we have the
112:16 - set EnV vars which is if you have this
112:20 - GitHub EnV environment variable you you
112:22 - can add things to it um and then it'll
112:25 - be available in all your other steps we
112:27 - have um adding things to systems path so
112:31 - this will be in the GitHub path we have
112:34 - setting output parameters so here if we
112:36 - need to output something then you'll see
112:38 - it will show up as outputs and we have
112:40 - creating debugging messages so uh there
112:43 - is that uh what else do we have we have
112:46 - uh group log messaging uh we have
112:49 - masking values in logs so notice we at
112:52 - add the mass so if it echoes out the
112:54 - secret it won't show it um stopping and
112:56 - failing action so we can tell it to
112:58 - error out at this step so there you
113:02 - [Music]
113:05 - go hey it's Andrew Brown in this video
113:07 - we're going to take a look at some of
113:08 - the workflow commands that we can
113:09 - utilize I don't know if I have a script
113:11 - for this we'll hit period here and open
113:14 - up the GitHub examples repo I keep
113:16 - working with and uh what we'll do is
113:19 - take a look here and see
113:22 - maybe if I have one I could have one in
113:25 - here I didn't make uh something for
113:27 - everything here um I don't think so
113:29 - that's totally fine because it's our
113:31 - opportunity to finally uh create some
113:33 - scripts by hand so I'm going to go ahead
113:36 - and uh just delete these ones out of
113:38 - here I'm going to make a new workflow
113:41 - script I'm not going to give you this
113:42 - one so that you have to do a little bit
113:43 - work
113:44 - yourself as you should learn how to
113:47 - write this stuff by hand so we'll say
113:50 - name and we'll just say workflow command
113:53 - commands and then from there uh we have
113:56 - is IT
113:57 - jobs and we have our job already forgot
114:00 - what it's supposed to be jobs yeah the
114:03 - name of the job so we'll just say uh my
114:07 - job all right
114:09 - job and then we'll say runs on
114:14 - Ubuntu
114:16 - latest so we'll try a really easy one
114:18 - first and uh what I'm thinking here is
114:20 - that we can have a steps and and this
114:22 - will have a name and we'll just call
114:25 - this a group
114:27 - logging we'll try this one
114:30 - first so here we'll do this if you don't
114:32 - know this uh pipe this is when you want
114:34 - to have a multi-line each line is
114:35 - treated as a new line in yaml that's not
114:37 - specific to get of actions it's just a
114:40 - yaml
114:41 - thing so we'll use this group say my
114:45 - group
114:47 - message and then we'll end the
114:50 - group down below
114:54 - and we'll say msg1
115:00 - msg2 all right so we have um all of
115:03 - those in there it's not runs it's run
115:05 - and so I think that this will work as
115:07 - our initial one so we'll go ahead and
115:08 - try this and just say workflow command
115:11 - oh we actually have to tell it how it's
115:12 - going to do it so we go up here and just
115:14 - say on and uh we'll just put in push
115:18 - here yeah I like to use this expanded
115:21 - format but not always doesn't always
115:22 - matter so we'll go ahead and do
115:25 - this and we'll just say yeah workflow
115:29 - commands
115:32 - example and it looks all good to me and
115:36 - we'll go ahead and commit and push
115:38 - it and I think I can go here yeah open
115:41 - the repo here we'll go over to actions
115:44 - and then we'll see if that
115:48 - executes yep did group logging there we
115:51 - go here's our
115:53 - group cool whatever all right so we'll
115:56 - go back to here and I'm just trying to
115:57 - think of ones that are actually valuable
115:59 - that might come up um I think like set
116:01 - and bars is a really good one to have so
116:02 - what I'll
116:03 - do is um let's we'll have like a like
116:08 - one step here and another step there so
116:10 - this one's fine but we'll go here and
116:12 - just say uh you know step
116:14 - one and then we'll have step
116:18 - two and I'm just going to
116:22 - uh clear this out and clear this out you
116:24 - can always do that like if you always
116:26 - want to have on a new line you can
116:27 - always do it this way I like to do that
116:29 - quite often and we'll just say something
116:31 - like my uh Val
116:37 - hello
116:38 - and the idea is that we will then add
116:41 - that to our the the GitHub EnV so the
116:44 - idea is that this uh value my Val should
116:48 - be now accessible down here um so I
116:51 - would imagine uh we could probably do
116:54 - Echo and then say dollar sign my
116:58 - Val and we'll see what happens here so
117:01 - hopefully that works um but that looks
117:05 - fine to me GitHub EMV all spelled
117:07 - correctly so we'll test in nvar in other
117:14 - steps all right we'll commit that looks
117:18 - good we'll go back over to here and
117:20 - hopefully it works we'll just wait for
117:21 - that to work all right so we'll click
117:24 - into here and we'll go into my job and
117:28 - we'll check step one so we shouldn't
117:29 - really expect to see much here it shows
117:31 - that it ran that file go to step two and
117:33 - it echoes it out so I think that is
117:35 - sufficient uh for run commands obviously
117:38 - there is more than just those ones like
117:40 - GitHub path and output and other things
117:43 - but I think this is uh good enough um
117:46 - and so we'll call this one uh done okay
117:49 - so I'll see you in the next one ciao
117:51 - [Music]
117:56 - we are taking a look here at workflow
117:58 - contexts which are a way to access
118:00 - information about workflow runs
118:02 - variables Runner environments jobs and
118:05 - steps each context uh is an object that
118:08 - contains properties which can be strings
118:10 - or other objects in this example we have
118:13 - a context called secrets and it's giving
118:16 - us access to our uh sensitive uh
118:19 - variables that we want to pass to our
118:22 - workflow let's take a look at all the
118:23 - contexts that we have the first being
118:25 - GitHub this is information about the
118:27 - workflow run we have EnV or environment
118:31 - which is about environment variables
118:33 - that are available we have vars which
118:35 - are uh you can think of them like
118:37 - environment variables but they're
118:38 - variables that we were passing in to our
118:40 - function that might not be necessarily
118:42 - sensitive we have a job which is
118:44 - information about the current running
118:46 - job jobs and this is specifically for
118:49 - reusable jobs or workflows sorry uh
118:52 - information about steps a runner I'm not
118:54 - sure why I have a capital R in there but
118:55 - it's a runner secrets for Secrets
118:58 - strategy for the Matrix execution
119:00 - strategy which we'll talk about in
119:01 - another video and then Matrix which
119:03 - contains the Matrix properties defined
119:05 - in the workflow uh oh and needs and
119:09 - inputs and the difference between needs
119:11 - and inputs I don't know why they don't
119:12 - call this one outputs but needs is
119:14 - outputs and inputs are inputs but there
119:16 - you go
119:18 - [Music]
119:22 - hey this is Andrew Brown in this video
119:23 - we're going to take a look at context so
119:26 - uh what I want to do is just pull up
119:28 - context GitHub so you can see how you
119:29 - would look them up and so here they all
119:32 - are and if we want to know what we can
119:35 - extract out of them let's say uh the
119:37 - GitHub one we can click into it and it
119:39 - will tell us individually about the
119:42 - things that we can grab so what I figure
119:44 - we could do is just create a context and
119:46 - get some information
119:48 - so um I mean that's not really one that
119:51 - I want that's not a really good example
119:52 - but let's go ahead and uh write our own
119:55 - file so we actually haven't been really
119:56 - writing from scratch uh which is really
119:59 - unusual for me I usually almost do
120:00 - everything from scratch uh but uh any
120:03 - templates for for this but I'm going to
120:04 - go ahead into workflow here we'll make a
120:06 - new one we'll call this one
120:08 - context. yaml and in here we'll get set
120:11 - up so the first thing we'll need not
120:13 - that I remember how to do things from
120:15 - scratch we'll say name I'll just call
120:17 - this one uh context examples this will
120:20 - be on push
120:23 - all right and from here we'll say
120:25 - jobs and we'll just say my context
120:29 - doesn't really matter and we'll say runs
120:31 - on and we'll have this run on to
120:33 - buntu latest and then we'll have steps
120:36 - here and then fur this we'll just say my
120:39 - step and then we'll have our run and so
120:42 - the idea is that we need to uh get these
120:45 - contexts so what I'm thinking here is I
120:49 - think it's like
120:50 - Echo and we'll see hello world hello and
120:54 - then I think it's like
120:56 - cures and then it's
120:59 - GitHub
121:01 - dot
121:03 - action so normally like we used an if
121:06 - statement here you can see that it is
121:07 - used up there but I'm just trying to
121:08 - think of like how we would access it
121:11 - down
121:14 - here I'm just trying to think of like
121:15 - can we into interpolation like this give
121:17 - me a moment I'm not sure about that but
121:19 - in our example we have an EnV here and
121:22 - we set it this way so I'm going to try
121:24 - that and see what happens so what we'll
121:26 - do is we'll just say EnV I'll just say
121:29 - my
121:31 - action and then we will try it this
121:36 - way say GitHub
121:38 - doaction and then we' say my
121:42 - action and we'll
121:44 - see if this works before we uh test that
121:46 - let me just double check make sure we
121:48 - got it right there we go so I'm hoping
121:50 - that this might work
121:52 - um so we'll give that a
121:54 - go attempt
121:57 - context
121:59 - workflow and watch it's going to be like
122:01 - syntax error we did something wrong
122:03 - syntax error I'm just always getting
122:04 - syntax errors that's why uh the other
122:06 - thing is like this one appears under the
122:08 - run so I'm going to put this actually
122:10 - here sorry like in this step here so I
122:13 - think this is actually
122:16 - correct and yeah Stage IT yep and we'll
122:20 - do that
122:22 - did it already push it I didn't ask it
122:25 - to push it if it push pushed it it's
122:28 - totally fine but we'll go here I'm going
122:29 - to go to
122:31 - our exam Pro Co examples and we'll go
122:34 - over to
122:36 - actions and there's nothing in here
122:39 - what what you talking about I got two
122:41 - workflows in
122:42 - here examp examples oh
122:46 - sorry
122:49 - GitHub I don't want a new action we'll
122:51 - click here
122:52 - and so it is attempting to run which is
122:55 - good it shouldn't take that long to run
122:57 - so that's not a good sign uh so we'll
122:59 - click into here and we'll take a look
123:00 - and see what HP is
123:04 - happening waiting for a runner to pick
123:06 - up this job and so I think the issue
123:09 - yeah if this happens and it hangs it's
123:12 - because I have a problem with uh with
123:15 - this I I probably made a spelling
123:16 - mistake U buntu that doesn't look right
123:18 - to
123:19 - me looks like o boo new
123:25 - to so we'll go ahead and try this
123:28 - again by the way there are questions in
123:30 - the exam about debugging so that's why I
123:32 - leave this stuff in here and it's just
123:34 - kind of sprinkle through the court
123:35 - that's why I got to do all the labs and
123:37 - so I'll go here and uh because this is
123:39 - failed we'll just cancel this workflow
123:42 - it's never going to finish um and we'll
123:44 - go ahead and say fix the
123:46 - runner and we'll go ahead and commit
123:49 - that all right and we'll go back over to
123:53 - here um so that one was canceled
123:56 - obviously and so hopefully this one will
124:02 - run yeah it
124:05 - completed it says
124:07 - hello underscore uncore
124:11 - run I mean that seems right to
124:13 - me so I might want to pick a different
124:16 - context there GitHub uh GitHub
124:19 - context actions sorry
124:22 - I just want to have confidence that it's
124:24 - 100% right here so we'll go back into
124:30 - GitHub yes it says for the first example
124:32 - the first script you will run will have
124:33 - the name underscore run and the second
124:35 - script will have run
124:37 - to okay so that's probably right
124:42 - um the username of the user so I'll just
124:44 - do one more here just to have 100% uh
124:48 - confidence let's say my actor
124:52 - GitHub
124:53 - actor like that I don't know if it needs
124:56 - spaces in between here we'll just match
124:57 - the syntax we'll just say another
125:00 - attempt at
125:05 - context okay I spell context wrong
125:07 - totally fine they don't care and we'll
125:10 - wait for this to
125:19 - run and looks like it's ran excellent
125:22 - we'll go down to
125:25 - here uh well okay I'm sure this would
125:28 - have worked if I actually had add the
125:30 - echo in there so go down here and just
125:33 - say hold on so we'll go here and just
125:36 - fix this we'll just say
125:41 - action it will say
125:44 - actor my
125:46 - actor like this
125:53 - uh should echo or should print the fars
125:57 - or whatever we want to call that we'll
125:59 - go ahead and do that again we'll make
126:00 - our way back over to here to actions and
126:03 - we will wait for this to
126:10 - work okay and so I'm going to just drop
126:14 - this down
126:15 - here and so we have uh actor run actor
126:19 - it didn't show me the name of the actor
126:22 - oh you know what you have to spell it
126:23 - right for it to work this is frustrating
126:25 - I'm so sorry we'll try this one more
126:27 - time we'll just put some stuff in there
126:30 - and we'll go back to here and maybe this
126:33 - time it will work so it says it's done
126:35 - we'll take a look we'll click into here
126:39 - and yeah it has my username so that is
126:41 - now in great uh condition here so we are
126:44 - in great shape and I will see you in the
126:47 - next one before we do sorry I should uh
126:49 - just go ahead and
126:52 - we can go disable that by the way you
126:53 - can pin I'm not sure if that ever show
126:56 - an the exam but you can pin these
126:57 - workflows anyway see you in the next one
126:59 - okay
127:00 - [Music]
127:03 - ciao hey this is Andrew Brown and we're
127:05 - looking at dependent jobs so a workflow
127:08 - run is made up of one or more jobs which
127:10 - run in parallel by default to run
127:12 - sequentially you can Define dependencies
127:14 - on other jobs using uh the jobs. needs
127:18 - or if so here uh we have an example of
127:21 - us using the needs so it says job two
127:24 - needs job one to complete and then on
127:26 - the other side we have the if with the
127:28 - needs so you use it in combination to
127:30 - say um always uh if always which is not
127:34 - a really good job because that means
127:35 - it's always going to require that always
127:38 - needs job one and job two um so there
127:41 - you
127:42 - [Music]
127:46 - go all right so in this video we'll take
127:48 - a look at dependent job so what we'll do
127:51 - um I'll open this up in a second tab the
127:53 - actions tab we'll hit period And I think
127:54 - I have a template for this one I'm not
127:56 - sure if it's not good we can always
127:58 - rework it but I think there is one here
128:02 - four
128:03 - jobs I don't see one that's totally fine
128:06 - I don't care if we have one or not so
128:07 - we'll go ahead and just make our own so
128:09 - just say new file I'll call this one
128:11 - jobs
128:12 - yaml all right and we'll just say
128:15 - name job dep jobs
128:20 - example all right and so this shouldn't
128:22 - be too complicated uh we want you to say
128:25 - um on and we'll just make this on push
128:27 - as per usual I don't know if I disable
128:31 - the last one I just don't want to have a
128:34 - job on here and this one runs so I'm
128:35 - going to disable this there we go okay
128:39 - so um yeah that one's disabled we'll go
128:41 - back over to here and we now need to
128:42 - Define our job so we have jobs and we
128:46 - have job one and job two so the idea is
128:49 - that um
128:53 - uh job and we'll do them out of order
128:54 - just so that we can see how this if
128:56 - it'll do this in the order that we want
128:58 - so we'll do job two up here and job one
129:00 - down below and then the idea is it will
129:02 - say needs job one to complete and so now
129:05 - we need to uh put something in this so
129:07 - we'll say
129:08 - steps uh this will have
129:10 - steps
129:12 - and do we give steps names no it's just
129:15 - that okay great so we'll go ahead and
129:17 - type in Name colon we'll say uh step one
129:21 - and then over here I'll just say step a
129:23 - and step B step a step
129:26 - B and this will just be run and this
129:28 - will just be
129:30 - Echo
129:31 - hello and this one will be
129:36 - world and so well this one's the first
129:39 - steps I'm going to call this one hello
129:40 - this one
129:44 - world and so that should be okay I'm not
129:47 - sure why it's giving me a problem here
129:50 - runs on oh yes runs on so this would be
129:54 - within the job runs on on to latest and
129:58 - then this one would be down below here
130:00 - so let's go ahead and give that a test
130:03 - so jobs uh workflow
130:07 - example and we will push that we will
130:09 - make our way over to here and hopefully
130:11 - we don't have any issues so we'll wait
130:13 - for that to see if it works there we go
130:16 - and so that one has completed but did it
130:17 - do in the order that we want job one to
130:19 - job two so notice that it's showing uh
130:22 - the relationship between it so that is
130:23 - really cool I like that um so that is
130:26 - nice now the question is if we didn't
130:27 - have that depends so we see this visual
130:30 - with this this pipe in between but if we
130:32 - didn't have that depends what would we
130:33 - see right that's the question so go
130:36 - ahead and do this and try try again
130:39 - without the
130:41 - depends okay and just remember what this
130:43 - looks like job one to job
130:46 - two and then we'll go back to actions
130:48 - here and we'll take a look and see what
130:50 - happens and noce now just kind of group
130:52 - together we'll let it finish and see
130:53 - what happens there we go okay and so
130:56 - yeah uh that's pretty straightforward so
130:58 - you get kind of a visual thing and I
130:59 - suppose that could get pretty complex uh
131:02 - depending on what your setup looks like
131:04 - but I'd say that is good enough for now
131:06 - and um I'm going to go ahead and just
131:09 - disable
131:11 - this and I will see you in the next one
131:14 - okay
131:15 - [Music]
131:18 - ciao hey it's Andrew Brown and we are
131:20 - talking about encrypt secrets so
131:22 - encrypted secrets are variables that
131:23 - allow you to pass sensitive information
131:25 - to your GitHub action workflows secrets
131:27 - are access via the secrets context so
131:30 - that's Secrets do and then whatever you
131:32 - want your secret is and it has a few
131:35 - different levels we have the
131:36 - organizational level the repo level and
131:38 - the environment level what you need to
131:40 - understand is that the lower the level
131:41 - the more it overrides the ones from the
131:43 - top level so if you have a secret called
131:45 - hello at the organization level and one
131:48 - at the environment level called hello
131:49 - the one at the environment level value
131:51 - will overtake secret names can only
131:53 - contain alpha numeric characters
131:55 - underscores no spaces so that example
131:58 - there would be the the case you can't
132:00 - prefix it with GitHub in all caps with
132:02 - an
132:04 - underscore names must start with numbers
132:07 - sorry I felt like a rumble in my office
132:09 - and that's why I paused uh I think there
132:11 - was just a big train that went by anyway
132:13 - sorry about that um H there we go names
132:17 - are case insensitive names must be
132:19 - unique at the level they are created at
132:21 - people don't know I live right beside a
132:23 - train station and my office is in a shed
132:28 - uh behind my house and the idea is that
132:30 - I have multiple layers to avoid from the
132:32 - train but sometimes there's nothing you
132:33 - can do about it uh but anyway so we have
132:36 - passing Secrets as inputs so you can
132:38 - pass Secrets as inputs by using Secrets
132:39 - context so that is an example there um
132:44 - but I mean like the point is is that you
132:46 - know you could interpolate whatever you
132:47 - want there to pass it into a custom
132:49 - action and we'll talk about custom in
132:51 - another video you can pass Secrets as
132:53 - Nars so that is another way that you
132:55 - could uh do that and why would you do um
132:58 - inputs versus Nars it just really
133:00 - depends on uh your use case so maybe you
133:04 - have something that is uh a program
133:07 - you're using and it can only use nbars
133:09 - whereas uh with Secrets it's okay to do
133:12 - that on left hand side because of the
133:15 - the way it works but I just want to
133:16 - point out here we did this in another
133:17 - video but if you want to make that an
133:19 - Nar you'd have to map it like that I
133:21 - think we did that for something earlier
133:24 - but uh hopefully you know what that is
133:26 - talk about how you set a secret so you
133:27 - can use the GitHub CLI so we have GH
133:32 - secret set which is probably how we're
133:33 - going to do it then we have GH secret
133:36 - set for a specific environment or at the
133:38 - or level so depending on how you do a
133:40 - flag it's going to be different the
133:41 - default apparently is repository and you
133:43 - can also specify the repo which we have
133:46 - here you could do that up here as well
133:47 - if you want to uh but there you go
133:53 - [Music]
133:54 - hey this is Andrew Brown and we are
133:56 - taking a look at configuration variables
133:58 - these are variables that allow you uh to
134:00 - store non-sensitive information to your
134:01 - GitHub actions workflow so it's
134:03 - basically the same thing as Secrets
134:04 - except it's for non-sensitive
134:05 - information it uses the vars context so
134:08 - it's going to have very similar
134:09 - structure we have organization level
134:11 - repo level and environment level secrets
134:14 - uh and as per usual lower levels
134:17 - override the higher level ones um I
134:19 - wrote secrets in here but I meant to
134:21 - write in um uh right here vars or
134:25 - configuration variables because it
134:26 - basically has the exact same settings uh
134:29 - what's different is the CLI command so
134:32 - here you can see well it's get variable
134:34 - set I guess it's the same as Secrets
134:36 - you're just supplying the word variable
134:38 - instead of secret um at the time of this
134:41 - it says that this is a preview feature I
134:44 - guess that they might release it out um
134:46 - but I'm putting it in here because it
134:47 - seems like something that would happen
134:49 - in the future um and there there is a
134:51 - lot of content that it's preview but
134:52 - shows up on the exam so I imagine
134:54 - preview means they intend to uh release
134:57 - it so it's in here
134:58 - [Music]
135:02 - okay hey this is Andrew Brown and we are
135:04 - taking a look at default nbars so nvar
135:07 - obviously stands for environment
135:08 - variables these are ones that are going
135:09 - to be set for you uh by GitHub uh that
135:12 - you can
135:13 - access uh within your environments uh in
135:17 - your work workflows so we have CI the
135:20 - GitHub actions the G actors a bunch of
135:23 - these ones a bunch of those ones and you
135:26 - get the idea these are pretty
135:27 - straightforward but I just want to show
135:28 - you how many there are and then we Show
135:30 - an example of how you would go and
135:32 - access those and we already do use some
135:35 - of them in the course so it's pretty
135:36 - straightforward uh what those are
135:39 - [Music]
135:43 - okay hey this is Andrew Brown let's take
135:45 - a look here at setting custom andv bars
135:47 - so you can define environment variables
135:48 - in line with your GitHub actions
135:50 - workflow uh so you can set the workflow
135:52 - level the job level and the step level
135:54 - um when I took the exam they didn't call
135:56 - the top level work level or workflow
135:58 - level even though that's what the docs
135:59 - called it in fact they gave me a multi-
136:01 - select where the three choices for the
136:03 - top level or workl level was top level
136:07 - uh runner level or environment level so
136:10 - I'm just going to tell you that the exam
136:11 - can be really frustrating and so you
136:12 - just have to take your best guess um and
136:15 - even I can't uh figure it out so it's
136:17 - just the nature of uh the way GitHub
136:19 - writes their exams Maybe will improve in
136:21 - the future um notice that if we are
136:24 - using bash uh with Linux we're just
136:26 - calling the environment variables
136:27 - because they're now available so
136:29 - hopefully that is clear um you can also
136:32 - uh use EnV contacts so let's say you had
136:34 - to make an if statement you could access
136:36 - it that way so there you
136:38 - [Music]
136:41 - go hey this is Andrew Brown we are still
136:43 - taking a look here at setting Nars but
136:45 - this time it's with workflow commands so
136:47 - you can dynamically set Nars during the
136:49 - execution of your workflow using GitHub
136:52 - EnV um so the idea is that you will uh
136:56 - pass the values you want I'll just get
136:58 - my pen tool so it's very clear but
137:00 - notice you'll using using Echo you're
137:02 - going to make a string and you're going
137:03 - to set uh the environment variable and
137:07 - this and the uh value you want and then
137:09 - you're going to send it over to here and
137:11 - then you'll be able to access it other
137:12 - places so uh there you
137:15 - [Music]
137:19 - go hey this is Andrew round we are
137:21 - taking a look at the GitHub token secret
137:23 - so at the start of each workflow job
137:26 - GitHub automatically creates a unique
137:27 - GitHub token secret to use in your
137:30 - workflow you can use the GI up token to
137:32 - authenticate uh in the workflow job uh
137:36 - sounds a bit repetitive there but let's
137:37 - take a look here and see what we're
137:38 - talking about so I'm going get my pen
137:39 - tool out so it's very clear um and what
137:42 - I want you to see is that we can say
137:44 - secrets. GitHub token and we can get
137:46 - that GitHub token I also believe that we
137:48 - can do dollar sign GitHub token for uh
137:50 - environment variables and it will show
137:51 - up as well um if not we can just map it
137:55 - over as we are doing here if you notice
137:56 - here we're doing that um when you enable
137:59 - GitHub actions GitHub installs a GitHub
138:01 - app on your repository the GitHub token
138:03 - secret is a GitHub app installation
138:05 - access token so hopefully that is clear
138:08 - you can also use it with the rest API so
138:10 - here's another example and notice we are
138:12 - calling Secrets GitHub token with uh
138:14 - this way of interpolating that um so
138:17 - there you go
138:23 - hey this is Andrew Brown let's take a
138:24 - look at how we'd run a script in a
138:26 - workflow when we're talking about
138:27 - scripts I'm talking about things like
138:28 - bash scripts I suppose if this was a
138:30 - Powershell and we're using Windows we
138:32 - could probably do that as well but I'm
138:34 - going to use the Linux example here but
138:37 - uh notice here that we um have a job
138:39 - we're going to run this on a buntu we
138:41 - have a uh a default over here of um of
138:46 - sending our run to the working directory
138:47 - of scripts so in our repo we have a
138:49 - scripts directory
138:51 - and in there we have Bas scripts and so
138:53 - the idea is that we can just execute
138:55 - them and they'll run and I just want to
138:56 - point that out that you can run bass
138:58 - scripts and that will uh save you time
139:00 - from writing a lot of inline code here
139:03 - so that's about it
139:05 - [Music]
139:08 - okay hey this is Andrew Brown let's take
139:10 - a look at what it looks like to publish
139:13 - a GitHub package using a workflow you so
139:15 - you can use a workflow to build a GitHub
139:18 - package um so all I'm going to do is get
139:20 - my pen tool out here so we can
139:22 - understand what is going on on the exam
139:24 - they might ask you um like what things
139:27 - you have to do in order uh to build a
139:30 - GitHub package they're not going to ask
139:31 - you like what's wrong with this why
139:33 - isn't this working there's no there's
139:35 - like next to no troubleshooting on the
139:36 - exam even though the exam guide asks you
139:39 - asks you a bunch for it but um if we
139:41 - look at this here okay so uh notice that
139:45 - we're going to set in our environment uh
139:47 - a registry uh some sorry environment
139:49 - variables for the registry in the image
139:51 - name so those are two things that we'll
139:52 - set here um and then we have our job so
139:57 - we have a few steps first thing we'll
139:58 - have to do is check out a
139:59 - repository okay and notice that this one
140:02 - it is utilizing Docker and it's using
140:04 - the docker login actions this is
140:06 - something that absolutely absolutely I
140:08 - saw my exam which was they're like which
140:10 - action can you use to check out your
140:13 - repo specifically for GitHub packages
140:16 - and it was this um which seems like a
140:19 - very random thing to remember but that's
140:20 - what it wanted notice we have the width
140:22 - remember width is a way to input things
140:24 - into an action so we're providing the
140:26 - register the username and the
140:29 - password then uh the next step is
140:32 - extracting metadata tags and labels all
140:35 - right and notice we have the docker meta
140:39 - actions um uh action there so make sure
140:42 - you remember that one then down below we
140:45 - want to build and push so we have the
140:47 - docker build and push actions all right
140:51 - so what you want to remember is the
140:52 - order of these things and what the
140:55 - actions are uh I don't like that as an
140:58 - exam question but that is the kind of
140:59 - exam questions they want to test you on
141:01 - so there you
141:03 - [Music]
141:06 - go hey this is Andrew Brown and we're
141:09 - taking a look at how to publish a Docker
141:10 - registry um to Docker registry using a
141:13 - workflow uh and again the reason I'm
141:15 - bringing these up is because on the exam
141:17 - they might ask you the order and the
141:19 - general idea of how they these things
141:21 - work um this one is more just to kind of
141:23 - reinforce the last one which is for um
141:25 - publishing to um get her packages but
141:29 - you'll notice that they are using the uh
141:31 - same uh action this one's Docker login
141:34 - action Docker metadata action uh Docker
141:38 - push action so understand that it's push
141:41 - it's
141:42 - like uh log into Docker uh extract your
141:46 - metadata build and push so you know
141:49 - similar steps hopefully that helps
141:51 - reinforce that
141:53 - [Music]
141:56 - okay hey this is Andrew Brown let's take
141:58 - a look at what it looks like to publish
142:00 - to GitHub container registry using
142:01 - workflow again this might appear on your
142:03 - exam where they're asking the order of
142:05 - steps and what is happening let's take a
142:07 - look at what we have so we have Docker
142:10 - login action so build and publish we
142:13 - have uh the push actions um and then
142:17 - down
142:18 - below uh I guess you can pull it to
142:20 - verify you don't necessarily need to do
142:21 - that but I'm just going showing you the
142:23 - repetition of those things so it should
142:26 - be pretty clear um the steps involved
142:28 - but there you
142:30 - [Music]
142:33 - go let's talk about publishing
142:35 - components as a GitHub release they talk
142:37 - about components they don't make it
142:39 - really clear what they're talking about
142:41 - uh so I had to take my best guess here
142:43 - uh the exams did not uh tell me
142:45 - otherwise let's just take a look at what
142:46 - we have here um so the idea is that we
142:48 - are building a project of some kind of
142:51 - component or code uh we create our
142:53 - release and then we uh update uh uh push
142:56 - our release because we can do releases
142:58 - and usually releases have something to
142:59 - do with components and so I'm thinking
143:01 - that this is what they want you to know
143:02 - is how to actually create um a GitHub
143:05 - release okay so these are the two things
143:08 - and that's pretty
143:10 - [Music]
143:13 - straightforward hey this is Andre Ram
143:15 - we're looking at how you deploy a
143:16 - release to a cloud provider so you can
143:18 - specify um releases out to spefic
143:20 - specific cloud service providers uh with
143:23 - GitHub they have a few they have Amazon
143:25 - uh elastic container service Google's
143:27 - kubernetes engine and then uh quite a
143:30 - few Azure Services which makes sense
143:32 - because GitHub is owned by Microsoft so
143:33 - they're going to have the most synergies
143:34 - for them and this example in particular
143:37 - is showing you uh for a static web app
143:40 - um I don't remember them ever asking on
143:42 - the exam anything about like actually
143:44 - being able to do this and there is a a
143:46 - bunch of variety of ways of doing this
143:48 - so if you did get a question it' be
143:49 - quite unfair cuz you'd have to cover
143:51 - every single uh uh scenario um but it's
143:55 - just worth noting that you can do this
143:57 - and they have direct Integrations for
143:58 - these particular Services um so I just
144:01 - wanted to make that clear
144:03 - [Music]
144:06 - okay hey this is Andrew Brown and we're
144:08 - taking a look at service containers so
144:10 - service containers are Docker containers
144:12 - that provide a simple and portable way
144:14 - for you to host services that you might
144:15 - need to test or operate your
144:17 - applications in a workflow you can
144:19 - configure service containers for each
144:20 - job and workflow GitHub creates a fresh
144:23 - Docker container for each service
144:24 - configure in the workflow and destroys
144:26 - the service container when the job
144:27 - completes steps in a job can communicate
144:29 - with all service containers that are
144:31 - part of the same job however you cannot
144:33 - create and use service containers inside
144:36 - a complicite action if your workflow
144:39 - uses Docker uh container actions job
144:41 - containers service containers and you
144:43 - must use a Linux Runner if you are using
144:45 - GitHub hosted Runners you must use an
144:48 - buntu Runner if you are using a self
144:50 - hosted a runner you must use a Linux
144:52 - machine as your Runner and Docker must
144:54 - be installed you can configure jobs in a
144:56 - workflow to run directly on a runner
144:58 - machine or in the docker container so if
145:00 - you're running jobs in a container using
145:02 - Docker uh with bridge mode uh is what
145:05 - you'll end up utilizing if it's on a
145:06 - runner it'll be host mode they'll never
145:08 - ask ask you this on the exam but it's
145:10 - just practical knowledge understand if
145:12 - it's in host mode you'll have to map the
145:14 - ports so uh let's look at an example of
145:18 - a reddest
145:19 - container uh which is a service and
145:21 - notice that this one we specify the
145:23 - image over here notice the container job
145:27 - specifies um a specific type of
145:30 - container so we have the runner uh or
145:33 - sorry the uh the type of container that
145:34 - it'll run which is node over here this
145:37 - one notice there is no specifi container
145:39 - so this is the key difference between um
145:43 - being able to tell if something is
145:45 - running in a container or on the on the
145:47 - host image because this one has no
145:49 - container um and you're mapping a port
145:51 - and this one you are not mapping a port
145:53 - but you are specifying the
145:56 - container okay uh here is a a more
146:00 - complex example so you can specify
146:01 - credentials for your service containers
146:03 - in case you need to authenticate with an
146:05 - image repo so notice that um under here
146:09 - we are providing our credentials so
146:10 - hopefully that is clear uh when running
146:14 - a post server as service container it is
146:16 - going to look like this um you can tell
146:20 - that it has a container um you know it's
146:23 - pretty darn straightforward if we take a
146:25 - look at what it looks like to connect to
146:27 - a service container um in a additional
146:30 - step here we are running our client JS
146:33 - we're providing the Nars and then over
146:36 - here we have our code so we will
146:37 - definitely run this one as an example so
146:39 - you have practical skills on how to run
146:41 - a service container um but yeah there
146:43 - you
146:44 - [Music]
146:47 - go hey this is Andrew Brown and we are
146:49 - taking a look at rout in workflows to
146:51 - Runners so a self-hosted runner
146:53 - automatically receives certain labels
146:55 - when it's added to GitHub actions what
146:56 - are labels it's these things over here
146:58 - on the right side of the runson and we
147:00 - have default labels uh these will are
147:02 - used to indicate its operating system
147:04 - and Hardware platform so we have
147:05 - selfhosted if we're specifying uh the
147:09 - default label for self-hosted and we
147:11 - have uh the the one specific for
147:14 - operating system like Linux Windows Mac
147:16 - OS we can also have ones that are
147:18 - specifying X8 x64 arm or arm64
147:21 - architecture and you can have custom
147:23 - labels this is where you basically
147:25 - Define whatever you want the label to
147:26 - mean uh and they're going to map to a
147:28 - type of Runner I should point out that
147:30 - these Runners are cumulative so a a
147:33 - self-hosted runner must have all four
147:35 - labels in like that example to process
147:38 - that job so let's talk about Runner
147:41 - groups so these are used to collect sets
147:42 - of Runners and create a security
147:44 - boundary around them Enterprise accounts
147:46 - orgs o owned by Enterprise accounts and
147:48 - orgs using GitHub teams can manage and
147:51 - uh use additional Runner groups and so
147:53 - here's an example of us
147:55 - specifying a group under a runs on so
147:59 - that should be pretty straightforward
148:00 - you can also combine labels and groups
148:02 - together uh to narrow things down a bit
148:04 - further so hopefully uh that makes sense
148:06 - and we'll see you in the next one okay
148:09 - [Music]
148:12 - ciao hey this is Andrew BR and we're
148:14 - taking a look at executing code ql step
148:18 - this appears in the exam guide but I
148:20 - didn't get a question on it but I
148:21 - imagine that they just want you to know
148:22 - that you can execute code ql code ql is
148:25 - something we cover in the GitHub
148:26 - security certification course um which
148:29 - that can perform an analysis but what
148:30 - you want to notice is that there is a
148:33 - action called code ql action analyze and
148:36 - that's going to let you uh work with
148:39 - your code ql you can also we have the
148:41 - initialized action so those are really
148:43 - the two things that they want you to
148:44 - know if they were to ever ask you a
148:47 - question and the fact that you can use
148:49 - code ql step
148:50 - um within workflows
148:53 - [Music]
148:56 - okay hey this is Andre Brown and we are
148:58 - taking a look at caching package and
148:59 - dependency files so to make your
149:01 - workflows faster and more efficient you
149:03 - can create caches for dependencies and
149:05 - other commonly reused files and so
149:08 - workflows run uh often reuse the same
149:11 - outputs and download dependencies from
149:12 - one end to another so wouldn't be
149:13 - awesome we could cash those um so
149:16 - caching package and dependency
149:17 - management will greatly improve your
149:19 - performance and you can um uh package uh
149:23 - or sorry you can cash the following for
149:26 - package managers it says package manages
149:29 - and that's what threw me off it's
149:30 - supposed to say managers here okay
149:33 - managers and so we have for a few we
149:35 - have
149:36 - mpm uh for python for Gradle for ruby
149:40 - gems for for go so here's an example if
149:44 - there was a question they asked on the
149:46 - exam they're asking what is that you
149:48 - would use here so so notice here it says
149:50 - Ruby setups Ruby they're asking you what
149:53 - is the thing that you would use that
149:56 - would um create this uh caching to be
150:00 - performed uh and that's all you really
150:02 - need to know is like set up Ruby setup
150:03 - go setup Java just remember set up
150:05 - hyphen something when they're talking
150:07 - about uh package manager even if we did
150:09 - this it's not that uh easy to observe uh
150:12 - to see that the caching is occurring
150:14 - other than it is performing quickly but
150:16 - uh yeah there you go
150:20 - [Music]
150:22 - hey it's Andrew Brown and let's take a
150:23 - look here at cashing job dependencies
150:25 - and build output so we have this action
150:27 - get my pen tool out here uh called
150:30 - caches or Cache actions cache and the
150:32 - way it works is you provided an
150:34 - ID okay uh and then you can provide it
150:37 - values like the path and the the key you
150:39 - want to have here and then down below
150:41 - notice that we can reference the ID from
150:44 - up here uh and then we can grab the
150:47 - outputs um and then we can check whether
150:50 - there was a cash hit and then the idea
150:52 - is that we are able to then uh grab um
150:56 - uh that that value out later on and so
151:00 - that's a great way if you're going to
151:01 - utilize the same value in more than one
151:02 - place you notice we're using here and
151:04 - there I do want to point out that there
151:05 - is also um individualized action so if
151:08 - you want to use the save and restore
151:10 - action separately you absolutely can do
151:12 - that um as opposed to just using the
151:14 - caches value there but hopefully that is
151:16 - clear how we can uh cash job
151:19 - dependencies and build
151:20 - [Music]
151:24 - outputs hey this is Andrew Brown let's
151:26 - take a look at removing workflow
151:27 - artifacts uh from GitHub so the way you
151:30 - do that is in the UI you can press a
151:33 - button and delete it once you delete an
151:34 - artifact it cannot be restored by
151:36 - default GitHub stores build logs and
151:38 - artifacts for 90 days and the retention
151:39 - period can be customized so that's
151:42 - something that they want you to know I
151:43 - never saw on my exam I never needed to
151:45 - delete an artifact but that is an option
151:47 - there actually I do remember them asking
151:49 - about like ition period so um something
151:52 - like 90 days is something that you'd
151:54 - absolutely want to know they might also
151:55 - ask you something like practical like
151:57 - how what would you do if you ran out of
151:59 - space you just delete the artifacts but
152:01 - there you
152:02 - [Music]
152:05 - go hey this is Andrew Brown and we're
152:07 - taking a look at workflow status badges
152:09 - you can display a status badge in your
152:11 - repo to indicate the status of a
152:12 - workflow and this is what this badge
152:14 - looks like youve probably seen it before
152:16 - um and the way it works is that they
152:17 - have a special URL here uh that you can
152:19 - place in your read me file and then that
152:21 - way you can see it there are some
152:22 - parameters that you can provide like
152:24 - Branch feature event push uh workflow
152:26 - badges in a private repo are not
152:28 - accessible externally so you won't be
152:29 - able to embed them or link them to an
152:32 - external site I never got any questions
152:33 - on this in the exam but it is in the
152:35 - exam guide outline so there you
152:37 - [Music]
152:40 - go hey this is angre brown and we're
152:43 - taking a look at environment protection
152:44 - so you can configure environment with
152:46 - protection rules and reference an
152:47 - environment in your workflow job uh so
152:49 - each job in a workflow can reference a
152:51 - single environment any protection rules
152:53 - configured for environment must pass
152:56 - before a job referencing the environment
152:57 - is set to a runner the job can access
152:59 - the environment Secrets only after the
153:01 - job is set to a runner um and there you
153:04 - [Music]
153:07 - go hey this is Andrew Brown we're taking
153:10 - a look at Job Matrix configuration a
153:12 - matrix strategy lets you use variables
153:14 - in a single job definition to
153:15 - automatically create multiple jobs runs
153:18 - that are based on combination of
153:20 - variables so here's an example of a
153:22 - matrix with versions and Os and they'll
153:24 - produce that amount so basically end up
153:27 - with six job runs so there you
153:29 - [Music]
153:32 - go hey this is Andrew Brown let's
153:34 - compare the difference between disabling
153:35 - versus deleting a workflow so when you
153:37 - disable you temporarily stop it when you
153:40 - delete it it is gone uh disabling you
153:42 - can reverse it deleting you cannot uh
153:45 - when uh when it's disabled the idea here
153:46 - is you might do this when you need to do
153:48 - updates or maintenance um or you don't
153:50 - want the workflow to trigger as often
153:52 - deleting is you just want it gone you
153:54 - can disable uh workflow using the GitHub
153:57 - CLI uh you can only delete uh the the
154:00 - workflow through the UI uh I did get an
154:03 - exam question about like disabling
154:04 - workflows in the particular thing was
154:06 - why would you want to do it and main
154:08 - reasons is is this box here they might
154:11 - word it differently but the idea is that
154:12 - updates or maintenance or you just don't
154:14 - want it to trigger as often but there
154:16 - you go
154:21 - hey this is Andrew Brown we're taking a
154:22 - look at action types for actions so
154:24 - there are three kinds we have Docker
154:26 - container JavaScript and composite
154:28 - actions and depending on what kind
154:29 - you're using is going to limit the types
154:32 - of os's you can use if you're using
154:33 - Docker container you're limited a Linux
154:35 - for the rest it's all the same if you're
154:37 - wondering what the three action types
154:38 - are a Docker container runs your action
154:41 - code in a Docker container uh if it is
154:44 - Javascript it's going to run directly on
154:46 - the runner host OS if it's a composite
154:49 - action this is a combination of multiple
154:51 - workflow steps within one action actions
154:53 - require a metadata file to define the
154:55 - inputs and outputs and the main entry
154:57 - point of Your Action which we'll look at
155:00 - [Music]
155:03 - next hey this is Andrew brand and we're
155:06 - taking a look at inputs and outputs for
155:07 - actions so for inputs this is what we
155:10 - would Define that we'd expect our action
155:11 - to accept and then for outputs this is
155:13 - what we Define what we' expect the our
155:15 - action to uh output back for people to
155:18 - utilize and if you want to specify
155:20 - what kind of action type we're using we
155:22 - use the using command and so you can see
155:25 - here that this one is Javascript because
155:27 - it's using nodejs and the main is main
155:31 - JS it's a Javascript file if this was a
155:33 - Docker file then you'd expect it to
155:35 - accept um it' be using Docker it would
155:38 - AC a Docker file so hopefully that is
155:40 - clear and obviously if it's not any of
155:42 - those two then it's going to be a
155:45 - [Music]
155:48 - composite hey this is Andrew Brown we're
155:50 - taking a look at action version so
155:52 - GitHub
155:53 - recommends uh some strategies that you
155:56 - should apply when you are trying to
155:57 - release an action for public use the
155:59 - general recommendations is patch version
156:01 - to include necessary critical F fixes
156:04 - security patches while still remaining
156:05 - compatible with existing workflows
156:07 - consider releasing a new major version
156:09 - whenever your changes affect
156:10 - compatibility tell your users to specify
156:13 - a major version when using your action
156:16 - uh and only direct them to a more
156:18 - specific version if they encounter
156:19 - issues use um so here's an example of um
156:22 - if you have uh your actions and you are
156:25 - utilizing them with proper uh
156:27 - recommendations and we can specifically
156:29 - talk about tagging recommendations so
156:31 - the idea here is they say to create and
156:32 - validate a release on a release Branch
156:34 - before creating the release tag create a
156:36 - release using semantic versioning move
156:38 - the major version tag to point to the
156:40 - git reference of the current release
156:42 - introduce a new major version tag for
156:46 - changes that will break existing
156:48 - workflows um and major versions can be
156:50 - initially initially released with a beta
156:52 - tag to indicate the status uh for
156:55 - example V2 beta so um the exam did ask
156:59 - me about like best practices not exactly
157:01 - around this but this is something you
157:02 - should know and it was in the exam guide
157:04 - so you could get it as a question
157:06 - understand that exam is going to uh just
157:08 - want to know best practices so anything
157:10 - you can find about best practices read
157:11 - up on as uh it wasn't definitively
157:14 - defined in the docs um and I just had to
157:17 - like read a lot of stuff and then you
157:19 - know take my best guess on some
157:21 - questions because the docs just do not
157:23 - answer that stuff
157:25 - [Music]
157:28 - okay let's talk about how we would
157:30 - structure our um actions whether they
157:33 - are JavaScript or Docker I don't really
157:34 - get into composite but um the reason you
157:36 - need to know these structures is that it
157:37 - might ask you on the exam about key
157:39 - files to make custom actions uh so the
157:42 - idea is that you uh you have a directory
157:44 - structure um the should contain a root
157:46 - directory named after your action or
157:48 - something meaningful
157:49 - um so hopefully that is clear so notice
157:51 - here that your repo is named after your
157:55 - action um and that is one of the
157:57 - components to an action name the other
157:59 - part is obviously the tag as you've been
158:02 - using uh uh
158:04 - these actions you've probably seen that
158:06 - commonly uh there before here on the
158:08 - right hand side is our action uh action.
158:11 - yaml not it has our inputs and our
158:13 - outputs and are run we already talked
158:14 - about those previously so you should
158:16 - have an idea what those are let's talk
158:17 - about essential files so you have to
158:19 - have an action yaml file with the inputs
158:22 - outputs and Main entry uh defined the
158:24 - main entry here would be um here the
158:27 - main okay um in JavaScript you'd have to
158:30 - have an
158:31 - index.js though I imagine you could
158:33 - probably change the name of it but
158:34 - that's what it expected to be you have
158:36 - to have a package.json um and if there
158:39 - was a package Json you would know that
158:41 - this is a custom action I got a a
158:43 - question on my exam saying like how do
158:44 - you know that this action
158:47 - is a c like it's JavaScript action cu it
158:49 - has a package.json in it which is not a
158:51 - really good answer but it's the answer
158:53 - that they probably wanted and you have
158:55 - to have a read me to know how how it
158:56 - works if we're looking at a Docker
158:58 - container looks very similar notice that
159:01 - we have um uh we're specifying the
159:03 - docker file and Docker and we can pass
159:05 - it some arcs notice that it has an entry
159:07 - point sh and it has a Docker file so
159:10 - remember those two things as they asked
159:12 - me that on the exam as well and that
159:14 - will get you another Point okay
159:19 - [Music]
159:20 - hey this is Andrew Brown we're looking
159:21 - at Exit codes for GitHub actions you can
159:23 - use exit codes to set status for an
159:25 - action the first here would be with a
159:27 - bash script the second would be using a
159:29 - Docker file why would you want to set
159:32 - exit codes and the reason why is that um
159:35 - you can then raise your own errors that
159:37 - you want to have so notice here um uh
159:42 - yeah yeah so it says use the exit codes
159:44 - to set the status of an action so the
159:45 - idea is that um let's say we hit a zero
159:49 - or whatever then we can return back an
159:51 - echo uh of that and then provide uh that
159:55 - exit status code um again the point is
159:58 - to use it Pro programmatically in other
160:00 - cases and so that's all I wanted to show
160:01 - you here
160:03 - [Music]
160:06 - okay hey this is Andrew Brown and I have
160:09 - a weird little glitch in my slide this
160:11 - word's showing up it's not supposed to
160:12 - be there yet I can't seem to fix it
160:14 - let's talk about reusable templates uh
160:15 - workflow templates in an Enterprise is
160:17 - an Enterprise feature that allows you to
160:19 - create create reusable templates that
160:20 - other Enterprise members can use um
160:23 - users within uh users with right access
160:25 - to the enterprise. GitHub repo can
160:28 - create workflows with workflow templates
160:30 - uh you need to create a workflow file
160:31 - and metadata file in your git in your
160:33 - public g. GitHub repo within a directory
160:37 - called workflow templates the the
160:39 - workflow yaml file and metadata Json
160:41 - file need to have the same name um so
160:45 - here it's not clicking here we go so uh
160:48 - here's an example of the workflow file
160:50 - and here's an example of the metadata
160:52 - file so you have an idea of the
160:54 - relationship together um I'm not going
160:56 - to do a lab on this because the
160:58 - Enterprise um the Enterprise account
161:00 - requires you get a trial you have to
161:01 - enter credit card stuff like that and
161:02 - the only way you'll be able to do that
161:04 - is to go through that process and I
161:06 - don't think that's really fair um I
161:08 - don't feel that the exam is going to
161:10 - really test you uh deeply on its
161:13 - implementation um so I'm hoping that uh
161:15 - this will be clear I did get questions
161:17 - about reusing templates but the language
161:19 - that use about workflow templates and
161:21 - reasonable templates is uh uh varies um
161:25 - and that makes it hard to know if you if
161:26 - this is what they're talking about so if
161:27 - they're probably talking about reusing
161:29 - something they're probably talking about
161:30 - workflow templates and the key part to
161:33 - know is that they go into that dot
161:35 - GitHub directory all right and they have
161:37 - a meta metad metadata Json file
161:42 - [Music]
161:45 - okay hey this is Andrew Brown and we're
161:48 - taking a look at configuring sell hosted
161:49 - Runners for Enterprise so self-hosted
161:51 - Runners for GitHub Enterprise have
161:53 - additional configuration options that
161:54 - you're going to want to know the first
161:56 - is the proxy server so this allows you
161:58 - to set uh Nars within your environment
162:01 - to tell it to um uh to tell the
162:05 - environment to uh proxy uh to this
162:08 - secure virtual machine or or compute
162:11 - that allows you to then communicate out
162:13 - um and so you can actually provide
162:16 - multiple URLs if you want you can even
162:18 - tell it what not to use using the no
162:20 - proxy all these can be set mixed and
162:22 - matched the other thing is that you're
162:23 - allowed to do IP allow lists um in fact
162:26 - you have to do IP allow lists uh in
162:28 - order for self-hosted runners to
162:30 - communication to work that is absolutely
162:33 - an exam question in fact they might even
162:34 - ask you exactly how to configure it
162:36 - which to me was kind of ridiculous um uh
162:39 - because I couldn't find an easy way to
162:40 - do it because I'd have to make an
162:41 - Enterprise account and then even then
162:43 - it's even harder to even set up
162:46 - self-hosted Runners like I didn't even
162:48 - do in this course because it was just
162:51 - way too much work to do but um I just
162:54 - want you to know that read up a little
162:56 - bit about um how IP allow lists uh
162:59 - configuration works but know for sure
163:02 - that you have to have them configured
163:03 - because that will be an exam question
163:05 - [Music]
163:09 - okay hey this is Andrew Brown in this
163:11 - fall I want to take a look at how we can
163:13 - go ahead and create our own uh GitHub
163:15 - action so I've yet to do this I read all
163:18 - about it and and so I'm going to work
163:19 - with you together and we will
163:21 - troubleshoot through it um I'm very
163:23 - confident that I can get one working uh
163:25 - and they don't look particularly too
163:26 - difficult to do but uh we have our
163:28 - GitHub examples repo we're probably
163:30 - going to need another repo for this what
163:31 - I'm going to do is just go look up
163:32 - GitHub actions Uh custom and we'll just
163:35 - kind of follow through it and then come
163:37 - up with our own action that we might
163:38 - want to create or just work with the one
163:40 - that they have so under here um there's
163:42 - a few different kinds that we create we
163:43 - can create a Docker one or a JavaScript
163:44 - one so maybe we'll do a JavaScript one
163:46 - first because that might be easier to do
163:49 - um and so uh I guess they have an
163:51 - example one that we can utilize before
163:53 - you in download Nos and stuff like that
163:55 - let me just read a little bit ahead and
163:56 - then guide you through it okay all right
163:59 - so the first thing is that they're
164:00 - suggesting that there's a GitHub actions
164:01 - toolkit which is going to speed things
164:03 - up let's open up that repo and take a
164:05 - look at what we have going to scroll on
164:06 - down below provides a set of packages to
164:09 - make creating actions easier so we got
164:11 - the core package the executive package
164:13 - the glob package a lot of interesting
164:15 - packages here um so I mean that is good
164:20 - um and now that I'm thinking about it
164:22 - now that I'm thinking about it I
164:23 - remember it actually asking about
164:26 - whether the core package was an
164:28 - important package uh and the GitHub
164:30 - package was important to to have within
164:33 - your action so look out for that on the
164:36 - exam but yeah you can see these are all
164:38 - individualized uh packages and then down
164:41 - below it says illustrates how do you
164:42 - create a simple hell World action so
164:45 - yeah it looks pretty simple what I'm
164:46 - going to do is I'm going to go ahead and
164:48 - make a new rep
164:51 - and you have to do this as well right so
164:53 - um just going to go up here it'll say
164:56 - make a new repo and this one I'm going
164:58 - to make under my own personal account um
165:01 - and I want this action to be called some
165:05 - like hello Mars or
165:09 - baroon I think it's baroon
165:13 - baroon barsum if you don't know barsum
165:16 - is the word for Mars
165:19 - uh in the John
165:21 - Carter uh sci-fi Books Okay Barum so I'm
165:25 - going to call this Barum and it is
165:26 - available and I suppose I can make this
165:28 - a public repo I'm going to say add this
165:30 - REM me file um and this is going to be
165:32 - JavaScript so I'm just going to type in
165:34 - JavaScript or
165:35 - nodejs
165:37 - JS node there we go node um and I'll
165:42 - choose a license we'll just say apy too
165:44 - I don't care what happens to this repo
165:46 - and so we now have this repo next thing
165:48 - I'm going to do press period to open
165:50 - this up so we have something to work
165:51 - with I remember from uh my research that
165:54 - we need to have an index.js file so
165:56 - let's go ahead and add add
165:59 - that all right I'm just jumping in this
166:02 - uh without reading too much but I'm
166:04 - pretty confident and so they have this a
166:06 - very simple hello world
166:09 - example um
166:13 - sure okay but this is kind of I was
166:16 - expecting is like okay do we need the
166:18 - actions coure in
166:20 - here I'm not
166:21 - sure but
166:25 - uh and then that I guess that would get
166:27 - the input but then how you have to get
166:29 - the input from the core so I'm thinking
166:30 - the first thing we probably to do is
166:31 - import our core that's probably what has
166:33 - to
166:35 - happen Okay and then I would
166:40 - imagine that you
166:42 - would want to get an input like who
166:45 - you're greeting that kind of makes sense
166:46 - to
166:47 - me and you probably want to print that
166:50 - out so in
166:54 - theory this looks like what You' want it
166:57 - to do there's no outputs here maybe
166:58 - there's like a core. getet output so we
167:01 - could probably just go and investigate
167:03 - these individually let's open this one
167:07 - up
167:09 - and yeah let's look for
167:12 - output yeah there's like a set output so
167:14 - we can go
167:15 - here
167:17 - right and
167:20 - I'll just put name keep this simple
167:24 - name and
167:26 - name and then here we'd have
167:29 - name from
167:32 - baroon all right and so maybe that's our
167:34 - output value so I'm going to go here and
167:35 - just say uh const output
167:39 - value and we'll do
167:41 - that um and then here we'll just
167:44 - say
167:45 - greeting and then this would be our open
167:49 - value so in theory that's one of the
167:51 - most simplest ways we can do this we'll
167:53 - also need an action or an action yaml uh
167:56 - and we need to Define our inputs and our
167:59 - outputs and I believe how it
168:02 - runs okay so I'm going to go ahead and
168:05 - go find those references so I just
168:07 - scroll down down here to the metadata
168:08 - file and so yeah it has a description we
168:10 - can just grab this
168:12 - one so it's pretty close to it and we'll
168:15 - just say
168:17 - name say name
168:20 - name say Barum and actually we just take
168:23 - this part out
168:25 - here that way the idea is it's
168:27 - defaulting to that um and then the I
168:30 - guess time could be an output if you
168:32 - wanted to do that I would just say
168:33 - greeting we'll just change it to what we
168:35 - want to be uh how we
168:38 - greeted
168:39 - you okay and then we can see our our
168:42 - runtime is or is using node like we have
168:45 - we have node there right and then we
168:47 - have our main so that is pretty clear we
168:50 - probably should tell people how to use
168:51 - this but we will proceed forward here um
168:54 - and so there's suggesting we installed
168:55 - those two and that's what I thought that
168:56 - would be and again on the exam uh those
168:59 - are two I I noticed that were grouped
169:01 - together and so I I imagine that's what
169:03 - we need so I can't proceed any further
169:05 - here I'm going to have to open this up
169:06 - in GitHub code spaces just say uh
169:08 - initial files all right and we will
169:11 - commit that and then we will go back
169:13 - here to go to the repository and we'll
169:16 - open this up in GitHub code spaces I'll
169:18 - see you back here in just a moment all
169:20 - right so our environment is up I'm going
169:21 - to go ahead and just uh change the theme
169:23 - here all right so my my theme is changed
169:27 - um and we will go into our index JS uh
169:29 - there was a couple things we wanted to
169:30 - install I'm just going to bump this up a
169:31 - little bit um and we'll go back over to
169:34 - here and so we need to do the mpm
169:35 - install actions core um I would imagine
169:38 - that we want to generate out a uh
169:41 - package Json file so we'll go ahead and
169:43 - do that right now and then I'm just
169:44 - going to go ahead and install these it
169:48 - doesn't say this I'm just put in save
169:49 - because we actually want to have it in
169:51 - our package Json and that's usually what
169:52 - you do if you want to add them in there
169:54 - and we'll do a GitHub so we have those
169:56 - two in there I'm going to go to the top
169:58 - here oops I'm going to go to the top
170:00 - here and I want to include uh both the
170:02 - core uh and the GitHub it's kind of
170:05 - driving me crazy so you don't need to do
170:07 - this you shouldn't do this if you are
170:08 - not a Vim user but I'm just going to
170:10 - turn I'm going to install Vim here just
170:12 - so I have Vim key so I can code a little
170:14 - bit faster okay so just give me a second
170:16 - there we go so my cursor is a little bit
170:18 - different looking there I'm noticing
170:20 - here that they're wrapping everything in
170:21 - a try so we probably should do that as
170:23 - well um because then if there's an error
170:27 - uh it has an opportunity to return an
170:35 - error all right and so notice it's using
170:37 - the core set failed and then it does
170:39 - there so I guess that's the case that
170:41 - that I wonder if there be like a set
170:42 - success but I don't think so um and then
170:45 - I imagine the bulk of our code here
170:46 - should go into this one all
170:51 - right looking good
170:55 - um there they also do in
170:58 - here the output time and I guess we
171:00 - could do that I don't think there's
171:01 - anything interesting about that because
171:04 - it's just using regular JavaScript so
171:06 - we'll just ignore that um then they want
171:08 - us to create a read me so I'm going to
171:09 - go ahead and grab theirs as an example
171:12 - and we'll go over here and I'll paste
171:14 - this
171:16 - in all right um and it's pretty much the
171:20 - same except ours is going to be
171:24 - name um and this one is
171:29 - barsum okay I'm assuming what is that
171:31 - like the shaw or something because
171:33 - usually it's a tag and I imagine that
171:35 - here we could provide something
171:37 - else um so I'm not exactly sure what
171:39 - this is I'm sure we'll figure this out
171:40 - in just a
171:43 - moment okay there's nothing that says
171:45 - what that is
171:48 - but I'm assuming that's maybe like uh
171:50 - the shaw or the tag so it goes okay so
171:53 - GitHub downloads each time you run the
171:55 - workflow during Etc that's fine but I
171:57 - guess the question is like do we need to
171:59 - put anything else in here because um I'm
172:02 - not sure if these are just going to work
172:04 - right maybe they will but I thought we'd
172:05 - have to configure something additional
172:07 - so what I'll
172:09 - do is they must have like an example
172:15 - repo it doesn't seem like they do
172:20 - uh no not
172:22 - really so maybe that will just work I
172:25 - just keep expecting there to be
172:26 - something uh something more but um maybe
172:29 - there's
172:33 - not all right let me just read a bit I
172:36 - don't know so there's not really
172:37 - anything interesting there that they're
172:38 - saying so I'm going to go ahead and I'm
172:39 - just going to go and Commit This I'll
172:41 - just say initial version um we did
172:45 - install those packages so that is good
172:47 - um I actually didn't test it to see if
172:49 - this works and so the question is
172:51 - actually how would you test this out
172:53 - because if I try to do this right now
172:56 - and actually that was a question in the
172:57 - exam was like how would you test your
172:58 - JavaScript thing and I thought maybe
172:59 - like within a container um let's see
173:02 - what happens mpm start what would happen
173:04 - here and if we go
173:07 - here uh Missing script start so there is
173:10 - no start script here how would it even
173:12 - know to run that's a good point so I
173:15 - think that's what I should find out next
173:17 - is like how do we actually test this so
173:19 - I did some research and basically people
173:21 - said just mock it out with a mocking
173:23 - library and I'm like that's really how
173:24 - you test it um and then here they're
173:26 - just saying go run it they say yeah just
173:30 - go make it and then run it um and that
173:32 - also seems a little bit silly to me as
173:34 - well but I guess what they're saying is
173:36 - maybe making a private repo and then
173:38 - test it that way so um yeah I would just
173:41 - say that uh I find that a little bit
173:43 - disappointing but I guess that's the way
173:45 - that they would suggest it um but anyway
173:48 - what I'm going to do
173:49 - here is I'm going to go ahead and Commit
173:54 - This let say initial version and it says
173:56 - this to tell us to tag it so I guess
173:58 - I'll do that I'll say get tag uh
174:03 - 0.0.1 because this isn't a proper
174:05 - version and we'll say get push and we'll
174:07 - say get push
174:11 - tags and so now we have a tagged
174:14 - version so now what I want to do is I
174:17 - want to figure out how we can actually
174:18 - run this so I'm going to go to back to
174:19 - GitHub examples I'm going hit period I'm
174:21 - going to see if I can actually reference
174:23 - um that
174:25 - somehow
174:28 - so yeah like now how do we reference it
174:31 - they really don't make this easy um so
174:34 - public actions can be used by workflows
174:36 - in any repo when an action is in a
174:38 - private repo the repo setting determines
174:40 - we can do it so copy the following yaml
174:43 - file into a new. GitHub yaml uh uses the
174:46 - octocat Etc y one so I'm thinking that
174:50 - maybe I just give it my URL and it'll
174:52 - work I'm not sure why that has a v in
174:54 - front of it as that wouldn't be
174:55 - considered semantically correct by the
174:57 - semantic versioning which is they said
174:59 - that that's what they use but maybe not
175:01 - all of them are semantic semantically
175:03 - correct and it's just a recommendation
175:05 - so what we're going to do here I'm just
175:06 - going to take these ones out of here and
175:08 - drag them over to here yeah I don't care
175:12 - uh cancel I don't want to replace that
175:13 - one or I'll just delete them out just
175:16 - delete these and I'm just going to make
175:18 - it a new one here called custom
175:20 - action yaml uh um and then we'll go grab
175:24 - their example
175:25 - code from
175:29 - over where is
175:31 - it here so I'll just grab this
175:34 - one paste it in I'm going to tweak this
175:37 - uh for mine so mine is Omen King and I'm
175:41 - at um
175:43 - Barum and I'm at
175:46 - 01 001 that's what I would expect that
175:49 - that would work we'll say
175:51 - name and I'll just
175:53 - say brown it's weird that we set a
175:56 - default but it's required so I guess it
175:58 - would I don't know get the
176:02 - output we'll just say
176:05 - output uh
176:08 - greeting it says steps hello is that the
176:11 - name of our how would it know that
176:14 - that's the step oh maybe it's based on
176:18 - whatever we named it up in here this ISS
176:20 - uh my
176:22 - job say
176:25 - hello use the output from the hello step
176:28 - oh the ID is right here that's how it
176:30 - knows okay great so let's see if this
176:32 - works if it doesn't that's totally fine
176:34 - we'll figure it out but uh custom action
176:36 - I'm just seeing if it'll pick it up from
176:38 - a public repo that's what I'm
176:40 - curious okay
176:42 - so I don't want to install anything it's
176:44 - totally fine we're going to go to the
176:47 - repo
176:48 - and then we'll go to the actions tab and
176:50 - then we'll see what's
176:52 - happened there we go we have our failur
176:54 - so let's go and take a look what is its
176:58 - problem so this is where I thought I was
177:00 - going to run run into an issue where
177:02 - it's not going to be able to work with
177:03 - that import action because this usually
177:05 - uses a u more advanced syntax
177:09 - so
177:11 - um cannot use import statement outside
177:14 - of module oh were we supposed to
177:16 - modularize this
177:19 - [Music]
177:22 - so I think what I might want to do is
177:23 - just look at example so example custom
177:26 - action JavaScript and then we can maybe
177:28 - reverse engineer one that
177:30 - way oh man they keep bringing me back to
177:34 - here this is no good
177:38 - um maybe there's like the GitHub GitHub
177:42 - Marketplace
177:45 - actions and then we can just find one
177:47 - that's open
177:50 - Source was
177:54 - installed maybe this
177:59 - one how is this action
178:04 - used I just wanted to know like how do
178:06 - you include
178:09 - it it's over
178:12 - here and so I'm just looking for one I
178:16 - think this is a probably do
178:18 - ER Docker one yeah this one build with a
178:21 - Docker so that's not going to help us
178:23 - let's try super
178:26 - linter as an example one so we'll go
178:30 - here
178:32 - and this one's a Docker file I'm
178:35 - guessing lots of people don't like using
178:38 - JavaScript how about this one how about
178:41 - this one how
178:42 - about this one one of these are going to
178:44 - be JavaScript right they can't all be
178:47 - Docker files
178:49 - this one is a Docker one this one
178:55 - is
178:57 - a this one looks like
179:02 - JavaScript this one's JavaScript
179:04 - excellent so what I'm going to do is go
179:06 - into the index JS I'm just
179:12 - curious what the heck I want to be up
179:15 - here index
179:18 - oh you know it's not showing it to me
179:19 - here maybe it gets compiled out so we'll
179:21 - go to the source yeah it's a TS
179:23 - file all right this is uh not helpful
179:28 - because it's a typescript
179:31 - one all right uh let's try this
179:35 - one Docker
179:37 - file let's try this
179:42 - one this one looks like
179:45 - JavaScript but it looks like it's
179:46 - typescript again
179:48 - what is with people's obsession with
179:50 - typescript I just want to import this
179:52 - all right so give me a second I'll
179:54 - figure it out I was just thinking that
179:55 - we could just probably change this to be
179:57 - requires and it would still work also
179:58 - this is supposed to be
180:00 - GitHub uh we don't even use that in
180:02 - there so we just probably take that out
180:04 - but um well in case it wants it but I
180:06 - think we could just do the requires on
180:08 - this so
180:10 - require uh this work actions core I
180:13 - always forget how to do this so
180:18 - and it would be like
180:19 - constant core and then constant
180:27 - GitHub um and maybe be fine with
180:31 - that oh okay I'll fix it then I don't
180:33 - care convert it oh come
180:36 - on what is it what is it that I need to
180:39 - do here let's go back here um cannot use
180:41 - import statement outside of module all
180:43 - right whatever I'm just going to go ask
180:45 - chat
180:46 - GPT it's one of those days
180:50 - what do you want me to do just tell me
180:52 - how to fix it that's probably what it is
180:54 - I need to add type module to my uh
180:56 - package Json because I remember that was
180:57 - something I had to do before in another
180:59 - project I'm going to go over there and
181:00 - see if that makes any difference so
181:03 - we'll try this again type module like
181:07 - that uh why doesn't it like
181:11 - it
181:15 - type module
181:19 - okay and we
181:21 - will minor
181:23 - change I'm going to go ahead and tag
181:27 - this it's fine go push it I'm going to
181:29 - tag this with um
181:32 - 2 and push I'm going to go back over to
181:35 - here I'm going to change this to
181:37 - two try new version and we'll see
181:42 - if this fixes our problem so I'm going
181:44 - to go back over to here to
181:46 - actions and and we'll see if that
181:49 - works all right let's investigate and
181:52 - see what our issue is
181:54 - here uh that's not oh that's not what we
181:59 - wanted okay so I'll go back to wherever
182:01 - this
182:02 - was let's change it back to
182:06 - this what a
182:09 - mess uh we'll just go here change it
182:13 - back we'll commit it here yeah just
182:16 - commit it sync it Sy it push it stop
182:19 - telling me what's wrong with nothing and
182:22 - we'll tag this like that we'll do this
182:24 - we'll go back over to here we'll try
182:26 - this again uh we'll have a new version
182:31 - and we'll see if this one takes effect
182:32 - okay so we'll go back to here and we'll
182:36 - see if this one fails all right so this
182:38 - one failed as well of course uh let's
182:39 - take a look and see what it says
182:40 - probably the same
182:42 - thing
182:43 - right uh cannot find package actions
182:46 - core imported
182:51 - man this is a pain
182:53 - um let's go back over to
182:56 - here I mean they're in our lock
182:59 - files
183:01 - so what else would it want I mean we
183:04 - don't use the GitHub one I don't think I
183:06 - supposed to complain
183:09 - about so I guess I'll go read the docks
183:12 - more all right so here they're saying
183:14 - for us to use this tool um to compile
183:17 - the modules let's go ahead and see what
183:19 - that does so we'll install
183:22 - that and then we'll grab this
183:26 - one our license isn't called license.txt
183:28 - but I don't
183:30 - care and so now we have a node
183:33 - modules and we have a bunch of stuff in
183:35 - here but wouldn't
183:37 - that then bring all that stuff there
183:39 - does that mean that when we look at
183:40 - other actions they include their no
183:42 - modules so I know we were just looking
183:44 - at one may was like super linter
183:48 - okay if we go to this
183:52 - one does it have a node modules in here
183:54 - I don't see it in
183:55 - here is this a Docker file so we got to
183:58 - find another one that has no modules
184:00 - what a pain in the
184:02 - butt I am not enjoying making my own
184:05 - action just because like I feel they
184:07 - could provide a little bit more
184:08 - information that they are so I'm just
184:11 - going to open a few here and we'll see
184:13 - what we can find we'll try this one here
184:16 - this one is looks like JavaScript yeah
184:19 - it's going to go into here for a
184:22 - second this a composite one runs no JS
184:26 - it has a main JS notice there's like a
184:27 - post action here
184:31 - um how would it know to build
184:35 - it like is this in a source
184:38 - directory this what I don't understand
184:40 - is like this one has a source directory
184:42 - there's no index.js in this one so it
184:44 - clearly is compiling it but then I guess
184:47 - there's releases over
184:49 - here so what like what does it want it
184:53 - doesn't tell you I'm going to have to go
184:55 - research this I'll be back all right so
184:56 - I think the problem is is that this
184:58 - creates a distribution
184:59 - directory and um we don't see it because
185:02 - our G ignores is uh excluding it so I'm
185:05 - thinking if we go in here and look for
185:08 - the disc
185:10 - directory maybe that will there we go
185:12 - now we have this directory and there now
185:14 - we have our our
185:16 - single um
185:18 - because they said they would compile
185:19 - into a single file I'm not seeing it in
185:22 - here but it was saying that it
185:26 - did well anyway I don't know but um I
185:29 - definitely know that's what it's
185:30 - suggesting there so try this again try
185:34 - again and uh hopefully that will work
185:38 - it's just frustrating because I watched
185:39 - a bunch of different videos and like
185:41 - they don't cover all these parts or
185:44 - they're using typescript and so there's
185:46 - other things that are uh
185:48 - oh I didn't tag it right I bet they just
185:51 - tagged wrong um oh no we might be fine
185:53 - we'll try this again I'll just do I'll
185:55 - just do0 five here um and we'll do get
185:59 - push get push
186:02 - tags but anyway we'll see if this works
186:05 - I'm always good at figuring things out
186:07 - um but let's go ahead and try this and
186:09 - we'll just try try the newest
186:14 - version we'll Commit This and push this
186:20 - and we'll go back here and we'll see
186:23 - if hopefully we get a different error
186:25 - okay that's what I'm hoping for but I
186:27 - still understand I didn't see that
186:28 - package Json anywhere in there compiled
186:30 - to one so it makes me think this still
186:32 - won't work probably going to say the
186:33 - same thing isn't
186:35 - it couldn't find it okay well let's go
186:37 - back here for a
186:38 - moment and so here it
186:42 - says use the versell
186:45 - command compile your index JS
186:49 - file you'll see a new index.js file with
186:52 - your code and compiled modules you'll
186:55 - also see an accompany license.txt so I'm
186:58 - going to go back over to
187:01 - here I'm going to try this compile thing
187:10 - again I it's not compiling my
187:13 - libraries it doesn't look like it is
187:20 - okay uh you know let me try this again
187:23 - NCC not compiling
187:28 - libraries not compiling node
187:35 - modules like I I don't know what it
187:37 - wants it's not telling me um I don't
187:39 - know if it's because I changed it to the
187:42 - type to
187:43 - be module but I'm pretty sure it is
187:46 - module I'm take this out again and see
187:48 - what happens we'll just take this out
187:49 - like this and we'll try this
187:54 - again no it didn't change anything so I
187:57 - just put that back in there because I
187:58 - know that we probably need that in there
188:00 - to work so I'll go back and take a look
188:03 - at this again uh change the main keyword
188:05 - in your action to be dis uh all right
188:08 - we'll try
188:12 - that what a pain this
188:15 - is uh if you already checked in your no
188:17 - modules directory move
188:20 - it well I didn't because you said to
188:22 - compile it to one changing checking in
188:25 - your no module director can cause
188:26 - problems as an alternative you can use a
188:27 - tool called versel to compile your code
188:30 - and modules into one file used for
188:34 - distribution there whatever uh okay
188:36 - we'll try it
188:40 - again there I'm so excited for for
188:44 - this okay we will tag this again and we
188:48 - will push this again and we will go back
188:51 - over to here and we will check this
188:55 - again and we'll see that it fails and
188:57 - then we'll get upset because it just
188:59 - just never works all right so try this
189:10 - six run it
189:12 - again please please work please work I I
189:17 - don't how that could work there's no no
189:19 - no modules in
189:22 - there okay well whatever it works now uh
189:25 - do we get our output we do so there you
189:29 - go that's how you create a custom action
189:32 - with Java Script uh so hopefully you
189:35 - learned about the inputs the outputs the
189:37 - configuration of it how we could
189:38 - identify files and it seems like a lot
189:41 - of this debugging could have just been I
189:43 - could have redone this video and made it
189:44 - a lot cleaner but I tell on the exam
189:46 - they actually ask you how to debug so um
189:48 - we kind of answered all those things by
189:50 - me uh being frustrated here so that's
189:52 - totally fine um so yeah i' say we're
189:55 - done there and I'll see you in the next
189:56 - one okay ciao