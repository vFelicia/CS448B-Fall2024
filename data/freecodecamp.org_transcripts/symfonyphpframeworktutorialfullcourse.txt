00:01 - hello everyone and welcome to learn
00:04 - Symphony for the fourth course for
00:06 - beginners this video will take you this
00:08 - four course will take you to how you can
00:09 - install Symphony and use it we're gonna
00:11 - explain the different components that
00:13 - makes them carry a framework and how
00:15 - they interact with each cue with each
00:17 - other first let's start by explaining
00:20 - what's a framework and why you should
00:21 - use one a framework is basically a
00:24 - jealous just a set of tools that help
00:26 - you start making an app in a very quick
00:27 - way and without having to deal with
00:30 - every single detail yourself an example
00:32 - will be security if you don't use a
00:33 - framework you will have to make sure
00:35 - that you prevent the smallest risk while
00:37 - writing the necessary code and
00:39 - understanding the everyday understanding
00:41 - the different aspects of that risk but
00:43 - without a framework but with a framework
00:45 - most of the basics you know the basic
00:48 - and well-known threads will be handed
00:50 - out of the box which lets you let you
00:52 - focus on the actual stuff that matters
00:55 - which is writing the actual application
00:57 - code and logic for your application and
00:59 - you don't have to reinvent the wheel and
01:02 - you can use many of the application that
01:04 - does with many of the tools that really
01:07 - does something without you know the need
01:10 - to write it yourself now symphony is a
01:12 - framework but what should I use simply
01:15 - now Symphony is a PHP framework that is
01:16 - made in my intent by since your lives
01:18 - it's been around for more than a decade
01:20 - and it's been used by many large
01:22 - organizations and companies and they
01:25 - still do to this date now why you should
01:28 - use Symphony is up to you but here are
01:30 - some things that I love about Symphony
01:32 - now the first thing which is the most
01:33 - important thing for me is the community
01:35 - that's the most lovable thing about open
01:39 - source in the symphony community it just
01:40 - extremely huge and full of helpful
01:42 - people that would help not not just
01:45 - understand the concepts but sometimes
01:47 - even aid you with your own applications
01:49 - new of your own code
01:51 - Symphony has a slot workspace where you
01:54 - can join and ask other ask or answer
01:56 - questions this the Corps Symphony
01:59 - developers could be found sometimes
02:01 - hanging around there in case you wanted
02:03 - to ask them something specific about the
02:06 - framework or even discuss some some
02:08 - patterns or some code the community
02:10 - itself is extremely up for this
02:13 - second thing which is the thing that I
02:14 - fear the most about open source is no
02:16 - longer maintained and abandoned packages
02:18 - I hate when I start using some tool or a
02:21 - framework and and the developers just
02:23 - decide to move on with their lives and
02:25 - ask no one to take care of that or
02:27 - maintain that package anymore but it's
02:30 - not that's not the case with Symphony
02:32 - it's maintained extensively and gets up
02:34 - to updated frequently and you can even
02:36 - have a have a glimpse or what's coming
02:38 - coming out by going through some of the
02:40 - pull requests on github now if you don't
02:43 - know what github is or a pull request is
02:44 - that's another symphony thing you don't
02:46 - have to worry about that the third thing
02:48 - that I love about which is something
02:50 - specification 24 it has some people used
02:52 - to say that before symphony was used for
02:55 - large applications and not you can not
02:58 - use it for like small applications or
03:00 - even medium application that's not the
03:02 - case anymore taxes infinite for which is
03:04 - just a small framework like like a layer
03:06 - though you know you don't have bundles
03:09 - or modules or whatever big framers
03:11 - called them but you can have them if you
03:13 - want to but symphony fall comes out as a
03:16 - mini framework so you can install it
03:19 - it's it works for small to medium sized
03:21 - frameworks and you can even make it for
03:23 - loud applications can even even have it
03:26 - for large large applications now let me
03:29 - just point you to the slack thing that I
03:32 - was talking about this is the slack if
03:34 - you go to this internal comm if you
03:36 - click on this black icon at the bottom
03:38 - you're gonna get you're gonna be taking
03:39 - two decent
03:40 - work space on the swag and you can just
03:43 - join create your account showing them
03:45 - and you can ask questions or answer
03:47 - questions or whatever you want to do or
03:48 - you texture now enough chitchat let's
03:51 - get to some symphony stuff now the first
03:54 - thing before we get started we're gonna
03:55 - need some stuff we're gonna need so in
03:57 - order to use a web application we need a
03:59 - couple of stuff so symphony is a PHP
04:01 - form up so obviously we're gonna meet
04:03 - the HP we're gonna need an Apache web
04:05 - server a web server I'm gonna use Apache
04:07 - I'm again you can use nginx if you want
04:09 - to we're gonna need a database system
04:13 - we're going to use my sequel in this
04:14 - case and we're going to need composer
04:16 - which is just something to help us
04:18 - install bennet packages and even OnStar
04:20 - Symphony Symphony itself and we're gonna
04:23 - need a text editor or iid I'm gonna use
04:26 - the
04:26 - based on because that's my favorite
04:28 - editor so let's go ahead and get started
04:30 - with installing some stuff now the basic
04:32 - thing which is PHP and a web server in
04:35 - database could be installed at once by
04:37 - using lamp stack now just go to
04:40 - including this I'm gonna go to Google
04:42 - I'm gonna I'm gonna talk about now I'm
04:48 - using Ubuntu so I'm gonna download the
04:50 - correct version for me so this here's
04:53 - what I understood is called this bit
04:55 - miami.com
04:56 - I'm gonna click on that link and right
04:59 - away it's gonna take me to this page
05:01 - right here as you can see our windows
05:03 - mac minutes is gonna amount this page
05:05 - and i'm just gonna click download for
05:08 - limit 64 bits bytes and then no thanks
05:11 - 64 bit not bytes and I'm gonna save the
05:13 - file it's gonna download that but you
05:16 - can see I already downloaded this and I
05:18 - found this just to save some time now
05:21 - after you until you download that what
05:23 - you want to do is it's not gonna work it
05:26 - just double-click on it so what you have
05:28 - to do is you have to component terminal
05:29 - terminal could be found I'm using 0.2 18
05:32 - so I can either click on this icon right
05:35 - here show applications and just start
05:38 - typing you know type here and as you can
05:42 - see I have three terminal and start I
05:44 - have the regular channel which comes
05:46 - built in with the Ubuntu I have
05:48 - Tillich's which which is my favorite and
05:50 - that's what I use and I have extreme so
05:52 - I'm gonna use Tillich's which is what I
05:53 - usually use I'm gonna click on that and
05:56 - I'm using the fish bash just in case you
06:00 - don't hit the same and I have something
06:02 - different but everything should be the
06:03 - same now the first thing you're gonna
06:05 - notice is we installed that so let's
06:06 - open our browser for the browser and I'm
06:10 - gonna get to our downloads and that's
06:11 - what I have my file as you can see right
06:14 - here this is the file that I installed
06:15 - way that I just downloaded which I want
06:17 - to install now what you want to do is
06:20 - you want to change the directory to that
06:22 - part to that folder but what we're gonna
06:24 - do is if you if you type PWD it's gonna
06:28 - give you the current directory that you
06:29 - are in this is harm and this is my
06:31 - username my tech Ellis is gonna give me
06:34 - a list of all the all the folders that I
06:36 - have or the files that I have in this
06:39 - directory and
06:39 - you're gonna notice that I have the
06:41 - Downloads folder which is what I trying
06:42 - to get so what we're gonna do is we're
06:44 - going to do CD downloads and now I'm
06:52 - inside the downloads folder right like
06:54 - LS you're gonna see that I'm gonna get
06:57 - my card which is this one right here now
07:00 - usually it's not gonna be in green I did
07:02 - I ran a command previously before before
07:05 - recording the video so you're not gonna
07:07 - get the same color as this now what you
07:09 - have to do is type smart plastics and
07:12 - the name of that run a profile after
07:15 - that you can click enter you're not
07:17 - gonna get any feedback where or whatever
07:18 - but if you talk to this again this
07:21 - should be green like this you should get
07:24 - the same user now to run this you have
07:26 - to type dot slash and the name of that
07:29 - big mammal um slack now if you just like
07:32 - the first two or three letters and I hit
07:36 - tab it's gonna order complete this for
07:38 - you and you can just you know move on
07:41 - with your life and just hit enter few
07:45 - seconds later you can exceed this set of
07:47 - window you just have to click next and
07:50 - you can uncheck some of the stuff that
07:51 - you don't need like just kind of leave
07:53 - something there right there I don't even
07:55 - know what that does but I'm gonna leave
07:56 - it right there I'm gonna eat next and by
07:59 - default so I can install for me it's
08:01 - gonna give me an error but I'm gonna eat
08:02 - next as you can see it's gonna say the
08:04 - folder is not empty this is not gonna be
08:06 - the case for you if you don't have this
08:08 - installed so what you're gonna get max
08:10 - is just two inputs asking for the
08:13 - password to the database I just entered
08:15 - six zeros and this just clicked
08:17 - installed and it's kind of installed and
08:19 - that's it you don't have to do anything
08:21 - else now after you're done you are done
08:23 - installing this you can I get something
08:27 - like this window right here which is the
08:29 - B manager for your for your lamps well
08:33 - you can see we have three options we
08:35 - have go to application I'm gonna hit
08:37 - that and it's gonna open this folder at
08:40 - this address localhost 8080 now you are
08:43 - not gonna get the same thing as me
08:45 - you're gonna get a welcome message from
08:48 - the Vietnam e application and that's
08:52 - that's not the case for me
08:53 - I removed all the file alcohols that I
08:56 - have right there just so I can you know
08:57 - move on faster and all that so you gotta
09:00 - getta with the message and that is going
09:01 - to confirm that the web server is
09:03 - working if you don't get that then you
09:05 - have something wrong and the web server
09:07 - for you is not work the second thing
09:09 - that you're going to see is we have open
09:10 - PHP my admin now PHP my admin is what we
09:13 - use to manage our database as you can
09:15 - see right away it's gonna ask me it's
09:17 - got a greet you - welcome welcome to PHP
09:19 - myadmin
09:19 - and you're gonna see we have a username
09:21 - and a password now the username is just
09:24 - gonna be route by default the password
09:26 - is whatever you entered when you were
09:27 - installing the application the two
09:29 - inputs that we just you know filled when
09:32 - we were installing the mam style by
09:35 - default I entered six zeros so that's
09:37 - what I'm gonna enter right now I'm gonna
09:39 - enter a big chunky as you can see I'm in
09:42 - the dashboard I have my databases right
09:44 - here as you can see I just installed
09:46 - this I don't have any other databases
09:48 - right away so we're gonna create all
09:50 - around when we get to that part now the
09:54 - last thing so let me just see what else
09:56 - we have here
09:56 - we have open application folder now when
09:59 - you click this you're gonna go to the
10:01 - lamp stack directory where it's
10:04 - installed by default it's installed in
10:06 - the home directory for me and you're
10:08 - gonna see that we have a bunch of
10:09 - folders that we don't need to worry
10:11 - about now the main thing that I want to
10:13 - point out is inside the apache2 htdocs
10:16 - this away your applications will be will
10:19 - be now by default when you open this
10:22 - folder you're going to see a bunch of
10:23 - files those are the files that I was
10:24 - talking about when you open up when you
10:27 - click up we'll go to application you're
10:30 - gonna get a greeting message that
10:31 - greeting message is loaded from this
10:33 - place that I just showed you right here
10:35 - so I just removed everything and we're
10:38 - gonna get started right away
10:39 - actually we are not gonna start right
10:41 - where we need to we still need to
10:43 - install some stuff now we need to
10:44 - install PHP this year library now we
10:47 - install PHP when when we installed the
10:50 - lamp start now this is great and it's
10:52 - gonna run PHP and everything but we need
10:54 - HP to be accessed from the command line
10:56 - and command line is just to be accessed
10:59 - from the terminal because we're gonna
11:00 - use determinar to install some stuff and
11:02 - as I said we gonna use composer now what
11:06 - we gonna do without any
11:07 - say moist in there chitchat let's go
11:10 - ahead and search for something so I'm
11:12 - just gonna close this and this one
11:15 - window and I'm gonna go to Google and
11:20 - I'm just gonna type open to install PHP
11:26 - so let's go to HP's 7.2 okay so let's go
11:31 - and just let's just take whatever length
11:34 - you find so smooth
11:37 - see so this is going to install Apache
11:43 - we don't have to worry about that
11:44 - because we did that already
11:46 - unless we want to you want to actually
11:48 - fetch it from the command line again you
11:50 - have to fill that stuff now what I'm
11:52 - interested in is this part right here so
11:54 - installing PHP 7.2 now what you have to
11:57 - do is just take these commands and
11:59 - install them as you can see this is
12:01 - going to install the HP 7.2 and it's
12:03 - going to install the command line
12:04 - interface and is going to install some
12:06 - stuff with that after that what I want
12:11 - to do is I want to install some commonly
12:13 - used PHP extensions and those extensions
12:16 - are used by composer and by PHP bite the
12:19 - symphony installer and a lot of stuff
12:21 - other stuff so what we have to do is
12:23 - just conspire those now what I'm gonna
12:24 - do is I'm just gonna take this and I'm
12:27 - gonna copy this and I'm gonna go back to
12:29 - my terminal I'm gonna hit shift insert
12:32 - to paste because there's no command
12:34 - there's no control V I'm gonna enter
12:37 - yeah I'm gonna enter my password I'm
12:40 - gonna hit enter and as you can see it's
12:42 - gonna do some stuff it's gonna install
12:44 - some stuff for me so I'm just gonna do Y
12:46 - which is yes I'm gonna enter
13:01 - and if you get a dialog like this just
13:05 - enter and it's gonna continue working
13:17 - and as you can see it is done now let's
13:20 - go ahead and try something if you don't
13:22 - BHP like this if you want to make sure
13:24 - that the HP is installed you can do HP
13:26 - garage that version and it's gonna give
13:28 - you the version of PHP that is installed
13:30 - which is 7.2 117 now that is great let's
13:34 - go ahead and do the second most
13:36 - important thing which is this one now
13:38 - it's not the most important thing but
13:39 - it's important so let's go ahead and
13:42 - copy this one and let's paste it right
13:44 - below that I'm gonna hit enter and as
13:48 - you can see nothing always been spotless
13:49 - it was upgraded because I already
13:51 - installed everything
13:52 - so as you can see I have everything
13:53 - right here but you're gonna get it's
13:55 - gonna install for you're gonna get some
13:57 - messages like this like getting some
13:59 - stuff but it's kind of work for you the
14:02 - same way now we have that installed now
14:04 - what we have to do to do next is install
14:07 - composer now usually what I do is just
14:09 - go to Google and I'm gonna do install
14:12 - composer
14:15 - and I'm just gonna choose whatever link
14:19 - so I'm gonna choose the first one
14:20 - because I know it's works that way
14:22 - because I already made this like many
14:24 - times ago yeah and as you can see you
14:29 - can read through that if you want to but
14:31 - what I'm gonna do is I'm just gonna go
14:32 - ahead and install some stuff now the
14:35 - first thing you want to do is you want
14:36 - to update your packages now we already
14:38 - did that before we install the HP
14:39 - obviously right here but you can just go
14:41 - ahead and did it do it again it's not
14:43 - gonna hurt anyone next what you have to
14:45 - do is you have to unstart the curl
14:47 - utility we call utility is what we're
14:48 - gonna use to get the actual file the
14:52 - actual installer as you can see right
14:54 - here the next thing which is diva now I
14:56 - already have that I'm not gonna run this
14:57 - but if you want to just copy it's not
15:00 - gonna do anything in my case just gonna
15:02 - tell me that it's already installed but
15:04 - you can just go ahead and I'm sorry you
15:06 - don't have that now the next thing which
15:08 - is the most important thing is to
15:09 - download this now we're gonna copy this
15:13 - command we're gonna paste it
15:23 - it's done the last thing which is the
15:26 - most important thing we have to do is we
15:27 - have to copy this command which is gonna
15:29 - make composure accessible globally for
15:31 - us from anywhere on our system so we
15:34 - gonna just copy that command we gonna it
15:36 - are we gonna paste it we're gonna hit to
15:38 - Eternity and it gave something so if you
15:40 - go ahead and try to let's clear the
15:42 - screen go ahead and do a composer you're
15:46 - gonna see we're gonna get a bunch of
15:47 - commands which means composer it's
15:48 - installed and this work now we are
15:51 - almost done with everything right here I
15:54 - I think we can move on I think we can go
15:57 - ahead and install Symphony right now now
16:00 - Symphony has two virgins so you're gonna
16:03 - you're gonna see that we have the
16:05 - website skeleton version so it's just go
16:08 - ahead and let's go to our dog's HT dogs
16:11 - and let's open the terminal right here
16:13 - now we can do two things you can either
16:15 - go ahead go to determine what right here
16:17 - and change the directory using the
16:18 - command line or you can just go to your
16:21 - father I mean this this is specific to
16:24 - Linux you can right click and open in
16:28 - terminal and it's gonna open the
16:29 - terminal with directory and that's great
16:32 - for us so what we need to do next is we
16:34 - need to install Symphony so Symphony is
16:37 - pretty easy to install we're gonna use
16:38 - composer obviously so what we got to do
16:40 - is we're gonna do composer create
16:42 - project and I just spent clear so create
16:47 - project I didn't see I already done some
16:49 - testing in order to install so as I said
16:53 - we have two versions the first important
16:55 - part is Symphony that is not going to
16:57 - change so we're gonna do Symphony
16:59 - you can either install website skeleton
17:01 - like this or you can just install
17:03 - skeleton like this now the main
17:06 - difference between those is that website
17:08 - skeleton will unstart everything that
17:10 - you're gonna need that fuels the
17:12 - template in the you know the templating
17:15 - engine the doctrine start the annotation
17:17 - everything that is related to symphony
17:19 - to make an application work it's going
17:20 - to be installed by default if you use
17:23 - just the skeleton installer you gotta
17:26 - get the core functionality of symphony
17:29 - and anything else you gonna need you
17:31 - will have to install that
17:33 - now this is the fourth course for
17:35 - symphony so what we're going to do is
17:36 - we're gonna install the core
17:37 - functionality of Symphony and we're
17:39 - gonna start moving up from there so I'm
17:42 - just gonna call this as F course which
17:43 - is symphony course and I'm gonna hit
17:45 - enter now this is the name of the folder
17:47 - is going to be created in my htx now
17:51 - htdocs as I said is the place with all
17:53 - the application on my web applications
17:55 - lives so I'm going to enter
18:04 - and as you can see it's done and we have
18:07 - most of the core functionality that we
18:09 - get in need we have something in flex
18:11 - the character container and all that
18:12 - stuff that could stuff that we're going
18:14 - to mean now as you're gonna see all
18:16 - right here at the bottom it says two
18:18 - things run your application you can
18:20 - either go you know create a call so
18:24 - actually this is not what I was so as
18:29 - you can see you can run a web server
18:31 - without even understanding Apache or
18:34 - I'll stop you can obviously need PHP in
18:36 - a database manager but you don't need
18:39 - Apache actually you can just run the
18:41 - built-in server that comes with sent me
18:44 - now that that actual server does not
18:47 - come built and when you install the
18:49 - skeleton you have to install it now this
18:52 - is a good chance to introduce symphony
18:55 - flex now Symphony flex is just a plugin
18:58 - or simply needed to help to install new
19:00 - plugins new components in your
19:02 - application the way that works is that
19:04 - it used something called a recipe if you
19:07 - go to disable to the website called flex
19:09 - dot Symphony Symphony comm you can see
19:12 - all the recipes that already exists in
19:15 - the on the server you can install any
19:18 - one of these that you that you want as
19:21 - you can see we have two types we have
19:22 - the country or country which is the
19:24 - contributions by the community and we
19:26 - have the official ones which are from
19:27 - the symphony developers themselves as
19:30 - you can see we have plenty of packages
19:32 - right here and you can go ahead and
19:36 - filter those by searching for the
19:37 - recipes we can type server as you can
19:39 - see we're gonna get the web server
19:41 - bundle so as I said you can run each
19:44 - application separately and I'll probably
19:46 - that's what I'm gonna do because I don't
19:47 - want to set up a virtual host and let me
19:50 - explain to you what a virtual host it's
19:52 - so we just installed our application as
19:55 - you can see right here so everything is
19:57 - done so what I'm gonna do is I'm gonna
20:00 - try to see if that is running so what
20:03 - I'm gonna do is I'm gonna go to
20:04 - localhost 8080 which is where my server
20:06 - is running I'm gonna hit enter as you
20:09 - can see I'm gonna get this folder which
20:10 - is SF course which is the project that I
20:12 - just created
20:13 - if I click on that I'm gonna get a bunch
20:16 - of folders now
20:17 - is a good chance to introduce you to to
20:20 - start talking about the agitator
20:21 - structure of the followers of symphony
20:24 - I'm gonna start about talking about the
20:27 - most important ones which are the the
20:29 - SRC folder in the config folder now we
20:33 - need one more file folder which is
20:35 - templates but that's for the the new
20:39 - stuff that which is gonna install that's
20:41 - for the few stuff that we're gonna get
20:42 - after we install twig now this is a good
20:45 - chance to start actually talking about
20:46 - MVC which is what symphony uses and
20:49 - Symphony is based on MVC which stands
20:52 - for for model view controller now and we
20:56 - see is just an architecture that
20:57 - separates your application into three
21:00 - separate parts the M stands for model
21:03 - which is and the model is related is
21:05 - everything related to your business
21:07 - logic or your actual code or database
21:10 - entities or repository the V stands for
21:12 - view and it's everything related to what
21:15 - the user will see in simpler words you
21:17 - can say that it stands for everything
21:19 - related to HTML right so let's say
21:22 - anything HTML related will be the view
21:25 - the C stands for the controller in the
21:27 - controller as we will see in second is
21:29 - what helps orchestrate between the model
21:32 - and the view section it's what we will
21:35 - use to interact with the database and
21:37 - send some data to the view and hand the
21:40 - forms and much more so that's MVC now
21:44 - the view in this case is the templates
21:47 - that we don't have what we're gonna get
21:48 - that in a second the SRC is where we're
21:51 - gonna do most of our work so it's RCA
21:54 - where we get away is where we're gonna
21:55 - have our controller where we can have
21:56 - our services we're gonna talk about
21:58 - services in a when we get to those is
22:01 - where we had our entities and where we
22:04 - have our own logic so if we want to
22:06 - create some you know some code we're
22:08 - gonna put it in the SRC folder the the
22:13 - folder that I want to talk about is the
22:15 - config so
22:15 - config is where all the configuration
22:17 - that we gonna add will be living inside
22:20 - this folder so as you can see this would
22:23 - start our PHP you don't have to worry
22:24 - about that bundles or where you want to
22:26 - add some bundles now this you want to
22:28 - have to actually touch or modify this
22:30 - file manual
22:31 - it's gotta be done by Symphony flex
22:33 - whenever you install a new bundle or
22:35 - something that you're going to need is
22:36 - gonna be added automatically by Symphony
22:38 - flex to this file right here we have
22:41 - packages packages that we're gonna have
22:43 - so you don't have this is gonna be
22:45 - overwhelming for you the amount of
22:47 - information that I'm throwing on you
22:49 - right now but just to keep things simple
22:53 - the config folder is where we're gonna
22:57 - do most of our configuration if we need
22:59 - to configure anything the SRC folder is
23:02 - where we're gonna right most cloud code
23:04 - the templates aware of views and HTML
23:07 - files are gonna be living we have one
23:10 - more folder which is the public folder
23:11 - now this is the main entry to our
23:14 - application so if we click if you click
23:16 - on the public folder and you see this
23:19 - then right here this window that I'm
23:21 - seeing right now it means everything is
23:23 - working and you are ready to go and
23:26 - start using Symphony if you don't get
23:27 - this and you'll get some some other
23:29 - error which means that you have done
23:31 - something wrong and it should probably
23:33 - check your installation and go be some
23:35 - stuff with you don't if you get some
23:37 - error that you don't understand now we
23:40 - have our Symphony application running
23:43 - now this is not working on the public
23:46 - just like this so if I so what we're
23:49 - gonna do is we're gonna go ahead and
23:50 - create our first controller and we're
23:53 - gonna try to create our routes out on
23:55 - route and see how that is going to work
23:57 - so what I'm gonna do right now is I'm
23:59 - gonna open up this folder this is of
24:01 - course folder that we just created I'm
24:03 - gonna try to open up this with my editor
24:05 - and we will continue from there
24:34 - all right so I just open it
24:37 - the project with my favorite editor I'm
24:39 - gonna use phpstorm
24:40 - it's gonna help me a lot especially if
24:42 - you are just getting started it's gonna
24:44 - be a lot of help to use phpstorm or an
24:46 - IDE
24:47 - I actually don't recommend using just a
24:50 - text editor or something that does
24:52 - mattify provide any help or any
24:54 - intellisense but that's up to you so you
24:57 - can just just for your own information
24:59 - so this is the HP storm and as you're
25:03 - gonna see inside our controller so we
25:05 - are trying to create own new controller
25:06 - we have nothing now this is where we're
25:09 - gonna start talking about the console so
25:11 - in symphony we have a console that we
25:13 - can use and we can use to to create to
25:16 - generate or symbolism code that we don't
25:19 - want to write ourselves so you want to
25:21 - write a controller what you have to do
25:23 - is you have to create file manually
25:25 - you're gonna have to we had something
25:27 - like the main domain controller on HP
25:35 - I'm gonna hit enter I'm gonna have to do
25:38 - big feet I'm gonna try to give it a name
25:41 - space gonna be app controller and I'm
25:46 - gonna give it so obviously is gonna be a
25:48 - class and the class name is gonna be the
25:50 - main main controller and this class
25:54 - needs to extend the abstract controller
25:58 - so images and this is the beauty of
26:00 - using an IDE as you can see I'm gonna do
26:03 - abstract controller and I'm gonna get
26:04 - some into the sense and some help so I'm
26:06 - gonna hit enter and it's gonna import
26:08 - contains space for me at the bottom as
26:10 - you can see it's gonna use that and I
26:13 - can just go ahead and start writing some
26:15 - stuff so this is how you can create a
26:17 - controller as you can see you have to
26:19 - write all this stuff if you don't have
26:21 - an IDE if you're not you using something
26:23 - that's gonna the pads and into the
26:25 - system it can do automatic and cotton
26:28 - for you now using the console you can
26:31 - just type one line and you're going to
26:33 - be done with this so I'm gonna do both
26:34 - this I'm gonna delete this this file
26:36 - that I just created and I'm gonna go
26:39 - back to the terminal so inside my
26:42 - terminal I can do so
26:44 - first then I am still in there routes
26:46 - where all my projects live what I have
26:48 - to do is I do LS I'm gonna see
26:51 - course now this is not supposed to be
26:53 - here don't worry about that
26:54 - of course is out further where we are
26:56 - working what I do is I get a good CD
26:59 - which means change directory a safe
27:01 - course and I'm gonna hit enter and I am
27:03 - now inside that so let's clear the
27:05 - screen and to be able to access the
27:08 - console what you have to do is you have
27:10 - to do PHP bin slash awesome now bin
27:14 - slash Khalid bin is just the folder and
27:16 - console is the binary that lives inside
27:19 - the bin folder so if you do the HP bin
27:22 - slash console you cannot run this this
27:25 - binary that we have right here if you
27:26 - had enter you're gonna see a bunch of
27:28 - commands now these commands are from the
27:30 - console and are specific to Symphony as
27:33 - you can see we are these are the
27:35 - available commands we have about a list
27:37 - assets cash can take the about land
27:39 - right now these are the basic stuff that
27:41 - comes with Symphony skeleton the minimum
27:43 - version now I want to make a controller
27:47 - so how I'm gonna do that
27:48 - I need a command I'll make now make by
27:51 - default is much included right here so
27:53 - what you have to do is we have to go
27:55 - back to our Symphony recipe server and
27:57 - we're going to search for the mage as
28:00 - you can see we have the as you can see
28:03 - we have the Maker bundle right here and
28:05 - it has these aliases generator make make
28:08 - make redundant now you can use any one
28:10 - of these four right here to install it
28:12 - so what I'm gonna do is I'm gonna go
28:14 - back to my terminal and I'm gonna do
28:16 - composer click wire and now this
28:19 - compulsory part is it's gonna use
28:22 - Symphony flex to install this corn so
28:26 - what I'm gonna do is you know I'm just
28:27 - gonna use the alias make so I'm just
28:30 - gonna copy that I'm gonna place it right
28:32 - here so composer require make wait and
28:34 - start the Baker bundle for me which can
28:36 - I use which I'm gonna use to generate
28:38 - some controllers and other self
28:52 - you
28:56 - all right as you can see it is done and
28:58 - if we go ahead and run the PHP bin slash
29:01 - constant command again you're gonna see
29:04 - that we're gonna get a longer list right
29:06 - now and we're gonna see this make right
29:08 - here which includes a bunch of demands
29:09 - like make off we're gonna get to that in
29:11 - a second not in a second but we'll get
29:13 - to that make command which which can
29:16 - create a command for you so this is a
29:18 - command and you can even use the make
29:20 - man to make command a customized
29:23 - commands with yourself you can create
29:24 - two controllers we go which is what
29:26 - we're gonna use you can made a crud you
29:28 - can make an entity and we're gonna get
29:30 - two instances later you can make a
29:31 - fixture of form and you can see we have
29:34 - a bunch a bunch of other stuff that you
29:36 - can make now that's good let's keep
29:39 - going with our example and we're gonna
29:41 - make a controller so let's go to make a
29:43 - controller and we're gonna kill it call
29:46 - it main controller just like the one we
29:48 - used before
29:49 - so as I'm gonna enter I'm gonna get an
29:52 - error and as you can see this is the
29:54 - beauty of cinnamon flex so the error is
29:57 - self-explanatory it needs something to
29:59 - work this thing that it means is
30:01 - annotation so what I'm gonna do is I'm
30:03 - gonna explore what annotations are in a
30:05 - second so what I'm gonna do is I'm gonna
30:08 - copy those annotations and I'm gonna do
30:10 - so I'm gonna copy composite required
30:13 - annotations and then we're just gonna
30:14 - hit shift insert and I'm going to return
30:17 - key and it's going to install the
30:19 - annotations for me all right as you can
30:21 - see it is done now what we're gonna do
30:23 - is we gonna rerun the command so we're
30:25 - gonna I'm gonna hit the up car to go
30:27 - through the history of my commands
30:29 - I'm gonna hit again and as you can see
30:31 - I'm gonna get my command and to make a
30:33 - controller and I'm gonna hit return key
30:35 - and as you can see it says success so
30:38 - green means success it says that it's
30:40 - created inside the SRC folder inside the
30:43 - controller folder it created something
30:44 - called the main controller HP let's go
30:47 - ahead and see if that is true so I'm
30:49 - gonna go back to my IDE which is
30:50 - phpstorm
30:51 - and indeed we have a fight we have the
30:54 - main controller now let's go ahead and
30:56 - open that file up and as you can see we
30:58 - have something similar to what we had
31:00 - before now the things that we don't have
31:01 - in this route and we have this index
31:04 - function right here as we see now this
31:07 - is what's called an annotation now
31:09 - inside
31:10 - you have three ways to configure your
31:12 - stuff you can either use annotations
31:14 - like this which which looks similar to a
31:16 - comment and you have inside you can
31:19 - think we have examples of the IMO file
31:22 - or example this Yammer file is just
31:24 - another way to say this right here so
31:26 - this is an annotation that says that
31:28 - this route so this is our route we
31:30 - didn't start talking about routes in a
31:32 - second it says slash main and this is
31:36 - the name of the route now you can do the
31:39 - same thing if you don't want to do this
31:40 - if you don't want to use annotations or
31:42 - your own that's kind of it you can get
31:43 - rid of this and you can use this routes
31:46 - about yeah now this is the same thing
31:48 - this is the name of the route that we
31:50 - have so I'm just put that back shows a
31:52 - certain C council so this is the name so
31:56 - we have main if we want to make the same
31:58 - thing we're gonna change this index to
31:59 - main right here so that's the name of
32:02 - the route now this is the path this is
32:04 - what we have right here you can sleep
32:06 - /name we can do some leg slash name
32:09 - right here and the controller is going
32:12 - to point to which action to use in this
32:14 - case it should be it speed index so if
32:17 - we want to want it to use something like
32:19 - this we're gonna have to change this
32:20 - from bank and from default control to
32:23 - main controller and counter calling
32:26 - index which is going to point to that
32:27 - function now I'm gonna keep using and
32:29 - now I'm gonna keep using annotations I'm
32:32 - not gonna use Yammer but just so that
32:33 - you know it exists and you can use you
32:36 - want now how do we as I said this is a
32:39 - route so if I go ahead to my to my
32:42 - browser and I do slash main is going to
32:45 - give me this right here as you can see
32:47 - for now this is returning a JSON that
32:50 - says welcome to your new controller and
32:53 - this is the path where so this is just
32:54 - some data you can have whatever you want
32:56 - so we can go ahead and change this to
32:58 - welcome so as you can see I just changed
33:05 - this now if I go back to my browser and
33:07 - I try to do that so this is my
33:10 - application this is where - running so
33:14 - if I do / main which should take me to
33:17 - there it's gonna give me an error as you
33:19 - can see it says that it's not it's not
33:20 - fun that's because by default we need
33:23 - slash public it's looking for the
33:25 - index.php file now if I do that and I
33:28 - hit enter I'm gonna get the same welcome
33:30 - message as before so what I have to do
33:32 - is I have everything that I need to add
33:33 - to my route needs to be after this so I
33:36 - had to do name like this and as you can
33:39 - see I get welcome three God can answer
33:42 - this way right here which means our
33:44 - controller is working our rat our route
33:46 - is set up and everything is ready to
33:49 - work now as you're going to notice this
33:50 - is ugly as hell so nobody likes to use
33:53 - all this stuff right here now to to fix
33:56 - this you have to to set up a virtual
33:59 - house now I'm not gonna do that
34:01 - I feel like this are outside the scope
34:03 - of symphony it's not a symphony specific
34:05 - thing is kind of it was a webserver
34:08 - thing so just so that you know you can
34:11 - do that and you can set up a virtual
34:14 - house that will take all this stuff away
34:16 - so you can have a pretty URL like for
34:20 - example s of course but dev slash me so
34:24 - this looks like an actual your actual
34:26 - URL not disjoint that we have right so
34:29 - you can do that or if you are using the
34:31 - built-in Symphony server you can
34:33 - actually just do localhost 8080 to the
34:36 - port or you can even run the name you
34:40 - can give it like soon as it comes out
34:41 - there it's just the way we did a second
34:43 - ago and you can do slash name now I'm
34:45 - now as I said I feel like that's outside
34:47 - the scope of the symphony course so what
34:49 - I'm gonna do is I'm just gonna keep it
34:51 - this way or we can just go ahead and use
34:53 - the built-in Symphony server now this
34:56 - this does not bother them so I'm just
34:58 - making use of this now we just created
35:03 - our first route which going to take me
35:06 - to so this is a first route let's say
35:08 - that we want to create our own welcome
35:10 - necessary well if I get rid of main as
35:13 - you can see we're gonna still get this
35:14 - page right here let's say that we want
35:16 - to create our own custom message and
35:18 - I'll call on a home page if you want to
35:21 - say so what I'm gonna do is I'm gonna
35:24 - change this from main to just slash
35:27 - which means be home so this is the road
35:30 - route there actually if you want to cut
35:33 - their battery of other applications
35:37 - I'm gonna change the name of that rug to
35:39 - home and I'm gonna keep the function
35:41 - index and I'm gonna keep these same s
35:42 - actually you know I'm gonna get I'm
35:44 - gonna get rid of that and I'm gonna
35:46 - return any response now what's a
35:49 - response a response is something that
35:52 - every action inside Symphony it needs to
35:54 - reach out I'm talking about the actions
35:56 - and not every single function but this
35:58 - is an action so each action within a
36:00 - controller needs to return a response
36:03 - and that response lives inside symfony
36:06 - components HTTP foundation so don't get
36:09 - this messed up a lot of people import
36:11 - the wrong namespace and they just spent
36:14 - three days trying to debug something
36:15 - that is very simple always pay attention
36:18 - to the namespace that you are important
36:21 - in this case we need HTTP foundation so
36:24 - we're gonna hit enter as you can see I'm
36:26 - using phpstorm so it's going to import
36:28 - that automatically for me and you can
36:32 - just do semicolon at the end now this is
36:36 - empty so if I go ahead and try to
36:38 - refresh this as you can see I'm gonna
36:40 - get an empty page because I did not add
36:42 - anything to this response now what I'm
36:45 - gonna do is I'm gonna just try the
36:46 - string that can chase some HTML so I'm
36:49 - just gonna do something like h1h well
36:58 - and I'm gonna just do Welcome Week that
37:05 - and I'm just gonna go ahead and refresh
37:07 - my page and as you can see I get my
37:10 - message welcome free code camp which
37:12 - mean this is working so our index has
37:14 - changed from just uh you know that
37:17 - regular Symphony working message to this
37:21 - custom control controller action that we
37:23 - just made so we just made our first
37:26 - route now let's go ahead and try to
37:27 - create another function so another
37:30 - action with another route just to get
37:32 - familiar with pista so what we're gonna
37:34 - do is just below this we're going to
37:36 - create another action so let's do public
37:39 - function and you can college whatever
37:42 - thing you want so in this case I'm just
37:44 - gonna call it custom and just gonna be
37:47 - like
37:48 - now this is just a function so if I just
37:52 - try to do something with it it's not
37:53 - gonna work now what I need to do is I
37:55 - need as I said before to set up our
37:57 - route for this because I want this to be
37:59 - accessible from the browser so what I'm
38:01 - gonna do is I'm just gonna do I'm just
38:04 - gonna copy the same route and I'm gonna
38:06 - place it right here and I'm gonna change
38:09 - this from just slash because we have to
38:12 - so I'm gonna change that form / - slash
38:15 - custom let's say that's what we want we
38:17 - want this action called custom now I'm
38:20 - gonna change the name so I'm going to
38:22 - change that to custom as well and we
38:25 - need to return something so if I just
38:27 - leave it like this empty and I try to go
38:29 - to that URL as you can see I'm gonna get
38:32 - an error they control and does not
38:34 - return their response an exception the
38:36 - controller must return something that
38:39 - extends this response object so it's
38:42 - must return a response now let's go
38:45 - ahead and return the response so we're
38:47 - just going to return your response and
38:52 - I'm just gonna do something like yeah
38:56 - let's copy the same thing that we did
38:58 - right here and it's always just give it
39:00 - something like custom page all right so
39:08 - I have that set up I'm gonna go ahead
39:10 - and refresh this page and as you can see
39:12 - I'm gonna get my message custom page so
39:15 - that's it we created to consume we
39:18 - create to the controller we created two
39:20 - routes and we can access them both now
39:22 - let's do something that's let's go ahead
39:25 - and talk some more about routes now
39:27 - we're gonna get to those in a second
39:29 - we're gonna start we're gonna explore
39:30 - them further more but I want to do
39:32 - something let's say that we want to
39:33 - create a page this is welcome to some
39:36 - username that we're gonna enter now we
39:38 - can we're not gonna use a form or
39:39 - something we're just gonna use the URL
39:41 - so now we're gonna change our custom
39:44 - function that we just created right here
39:46 - to do that's proper to do that for us so
39:48 - what we're gonna do is we're gonna
39:49 - change the URL now as I said we want to
39:52 - be able to do something like slash
39:54 - username I'm gonna do like three so I'm
39:58 - just gonna go three like that for camp
40:00 - when I hit enter
40:02 - see it's gonna say that this rug does
40:04 - not exist that's because we have not
40:06 - configured yet so that's what we're
40:08 - gonna try to do now how do we get it to
40:10 - take but something that is going to be
40:13 - dynamically entered right here we gotta
40:15 - go back to our rug to our custom slash
40:17 - and what we have to do is we have to set
40:20 - up some property that is going to be
40:22 - dynamically changed and how to do that
40:24 - we're gonna use the curly braces like
40:25 - this and we're gonna give it whatever
40:27 - name you want so let's say hello name so
40:31 - this name right here is going to be
40:33 - accessed so we're gonna access that and
40:35 - that is going to be the man that we can
40:37 - agree so instead of welcome page we're
40:38 - gonna say it work to that username and
40:42 - how do we get access to that username
40:44 - right here so that's what we're gonna
40:47 - see right now
40:47 - now inside each action we have access to
40:51 - something called the request now the
40:54 - request is where all our do is so
40:57 - basically is a request that comes from
40:59 - the client it includes a lot of stuff
41:01 - like the data that he sent the queries
41:03 - that he sent because is I just like B
41:05 - and a bunch we still probably his time
41:10 - zone and a bunch of other other
41:11 - information that we use now to get
41:14 - access to that request what you have to
41:16 - do is within the parameters that you
41:17 - have for your function or your action we
41:20 - can just use the equals now again you
41:23 - need to pay attention to the name space
41:26 - you don't want to import the wrong name
41:29 - space for the request you want to import
41:31 - the HTTP foundation one don't do the
41:34 - browser kid stuff
41:35 - whatever just do HT import the HTTP
41:38 - foundation namespace pay attention to
41:41 - that it's gonna save you a lot of time
41:42 - and it's gonna avoid some headaches so
41:45 - requests let's give that a name so if
41:48 - you have requests like that and we got
41:51 - access to that now I'm gonna have plates
41:53 - get you dog just to get rid of that line
41:56 - and next we can go ahead so how do we
41:59 - take a look at requests how do we know
42:01 - what the request contains now we then
42:04 - simply we have a function called dump
42:06 - now we use dump too it's similar to var
42:09 - dump but it's actually better it so I'm
42:13 - just gonna show you how it looks like in
42:14 - a second
42:16 - so you can use dump to dump the requests
42:19 - so let's go ahead and do that we're
42:20 - gonna dump the requests and we're gonna
42:22 - see what the requests tanked now if I go
42:24 - ahead and just refresh this page it's
42:26 - not going to work as you can see it's
42:29 - gonna tell me that this custom does not
42:30 - exist that's because this is ugly so I
42:34 - need to enter the name
42:36 - I need this name to be to exist if I
42:40 - want this to be optional so as I said
42:42 - you can see we don't have it right now
42:44 - what I can do is I can add this it's
42:47 - explanation mark which is going to make
42:50 - this optional for me so if I go ahead
42:52 - and just save this and refit page as you
42:55 - can see even if I don't enter any user
42:57 - name is still going to work and as you
43:00 - can see with it's working we still have
43:02 - an error but it's a different error but
43:04 - that is working as you can see we got
43:06 - custom without a user name and it's
43:09 - working now as you can see the error is
43:11 - that we are trying to call a function
43:13 - that does not exist this dump function
43:16 - now to use that we have to go back to
43:18 - our symphony recipe server as I said we
43:20 - are using the minimal version which does
43:22 - not include anything and we have to go
43:24 - and look for you done so I'm gonna type
43:26 - dump and as you can see we got to get
43:28 - these symphony of our thumper so what we
43:29 - have to do is we have to install that
43:31 - let's go back to our terminal and let's
43:33 - do composer require and I'm gonna use
43:36 - this alias right here which is dump and
43:39 - it's just glued down
43:49 - as you can see it's done and if we go
43:53 - ahead and try to do this actually before
43:55 - i refresh the page actually let's just
43:58 - go ahead and refresh this as you can see
44:00 - this is what the request looks like now
44:03 - the dump is nicer because as you can see
44:05 - if enfold you don't have all the
44:06 - information like you don't have a
44:08 - million lines that you have to scroll
44:09 - through you got all the basic stuff that
44:12 - you're going to need request so this is
44:14 - what the requests contents and you can
44:15 - go ahead and fold and unfold whatever
44:17 - you want as you can see we have the
44:19 - server and we have all the information
44:21 - that we possibly mean now well we're
44:25 - just doing that one thing that I flew
44:27 - that I didn't do in the beginning and I
44:30 - feel like somebody it's probably gonna
44:31 - be asking about this I want to use the
44:34 - built-in Symphony just so let's say
44:36 - somebody don't want to install all this
44:39 - stuff so what I'm going to do is I'm
44:40 - going to use the built-in Symphony and
44:42 - I'm going to show you how to use that
44:43 - and even to get rid of all this nasty
44:46 - stuff that we have back to you so I'm
44:48 - gonna go back to Symphony recipe server
44:50 - and I'm gonna look for it served now
44:53 - this is the web server that I'm looking
44:55 - for so what I'm gonna do is I'm gonna go
44:56 - back to my terminal I'm gonna do
44:58 - composer require as you can see it is
45:06 - done downloading and installing the
45:08 - server I don't have to do anything else
45:10 - trying it thanks to Symphony flex now
45:13 - all I have to do is run the server so
45:15 - how do I run that server now what I'm
45:18 - gonna do is we have to so actually you
45:21 - can just go ahead and let's go gage
45:22 - patreon slash console so we're gonna run
45:25 - this from a command so if I do PHP bin
45:28 - squash console you're gonna see that we
45:29 - have a new set of new installed commands
45:34 - which belongs to the server namespace
45:36 - it's called the first one server run
45:38 - which we're gonna use and there's also
45:41 - server start which starts which do does
45:44 - the same thing a server run but it does
45:46 - that in the background so I'm gonna show
45:47 - you the difference in second actually
45:49 - let's do it right now so if I do gauge B
45:51 - bin slash console server run as you can
45:55 - see it's gonna take this terminal and
45:57 - it's gonna keep using it it's gonna post
45:59 - whatever requests that I make
46:01 - like to so this is where my application
46:04 - is living as I mentioned if I go back to
46:08 - as you can see 127 dot 0 dot 0 dot 1
46:11 - it's just me it's just the address for
46:15 - localhost so if I type localhost is
46:17 - going to mean the same thing now the
46:19 - port is the most important thing it's
46:21 - 8,000 so let's go back to our web
46:23 - browser and let's try to do that I'm
46:25 - gonna leave this open right here and I'm
46:28 - gonna do localhost
46:30 - now it says 8080 so I'm gonna change
46:33 - that to 8,000 and I'm gonna hit enter
46:37 - and as you can see I'm gonna get the
46:40 - same thing welcome to 3 welcome free
46:42 - podcast now you're not gonna get the
46:44 - same chunk of as you have right here
46:46 - which is of course public index dot PHP
46:48 - and then you get access to what you want
46:50 - but you can just exit that directly from
46:53 - here now even this can be it could be
46:55 - customized you can make this like of
46:58 - course the div or dot local whatever you
47:00 - want but I'm not gonna bother with that
47:01 - stuff right now so as you can see we get
47:04 - the same thing so I can do just custom
47:06 - right here and I'm gonna get access to
47:07 - the same thing so that's that that's and
47:11 - as you can see looks nice and it works
47:13 - the same way as being server so what I'm
47:15 - gonna do is I'm just gonna get rid of
47:17 - all this because I don't want to work
47:18 - with this anymore and I'm just gonna use
47:21 - the built-in server that I use now now
47:23 - let's go back and see the difference as
47:25 - you can see this is going to to be
47:28 - debugging and give me all the
47:30 - information about what's happening right
47:31 - now and that's for the server run now if
47:36 - I want to stop this all I have to do is
47:38 - hit ctrl C I'm gonna do that ctrl C and
47:41 - it's going to get me out of that now the
47:43 - server is no longer running as you can
47:45 - see right here so we have to do is we
47:48 - have the other option which which is
47:50 - server sparked now service start is
47:53 - going to start the server but it's going
47:55 - just to start it and give you back your
47:57 - turn around it's not going to be
47:58 - outputting this anywhere it's gonna be
48:00 - in your log files for all that Symphony
48:02 - project but it's not going to give you
48:04 - like real time stuff that you can see
48:06 - right today
48:07 - unlike the the server run now to start
48:11 - this server all you have to do is server
48:12 - stuff and
48:13 - that server now what I'm going to do is
48:15 - I like to actually see what's happening
48:17 - on times time so what I'm going to do is
48:20 - within PHP spam I have access to a
48:23 - terminal that's that's built-in within
48:25 - the IDE so if I do all f12 it's gonna
48:30 - give me this terminal right here and
48:32 - right here I can do PHP bin slash
48:34 - console I can just like whatever command
48:36 - I want I'm gonna do it the same thing so
48:39 - server run and it's going to run the
48:41 - server for me right here and I can just
48:43 - close it and open it whenever I want to
48:45 - and that's pretty neat and nice man I
48:48 - didn't take advantage of that so that's
48:50 - what I'm gonna do I'm not gonna use this
48:52 - of the server starts in the background
48:54 - whatever it show just trying to show you
48:57 - what you can do with it so I'm gonna
48:59 - clear everything and we can go back and
49:02 - keep you working on our custom that is
49:05 - going to greet the user so let's go back
49:09 - to our custom function we're gonna
49:12 - refresh this and as you can see we're
49:13 - gonna get the same thing and we're gonna
49:14 - move keep working on that now how do I
49:17 - get to all the parameters that I'm gonna
49:19 - pass after the base now for now I don't
49:23 - have anything but if I take a look at
49:24 - the request I didn't see I had nothing
49:27 - right now
49:28 - and given the attribute so in the
49:30 - attributes so request query whatever I
49:34 - don't have anything in the parameters
49:36 - the attributes I have some things so I
49:39 - have the route which is the custom and I
49:41 - add name so name is what I had to
49:43 - interact with this and it's currently
49:45 - not that's because I allow it to be more
49:47 - when I defined this right here this is
49:52 - the controller that is going to use and
49:54 - this is the route around as you can see
49:56 - we have name again now let's go ahead
49:58 - and try something let's enter something
50:00 - like this let's take a look at the
50:04 - attributes again and the parameters as
50:06 - you can see we have name three code can
50:09 - and the array is gonna be the same thing
50:11 - now the request is still empty the query
50:13 - is still empty everything else is still
50:15 - empty because we are using this around
50:18 - points we are getting that from the
50:20 - attribute now how do we get that from
50:22 - inside our action what you have to do is
50:25 - from the
50:26 - quest we can call the get function and
50:29 - it gets function it takes a key like for
50:32 - example in name so what I'm gonna do is
50:34 - I'm gonna give it the query the
50:35 - parameter name that I have right here so
50:37 - I'm just gonna pass bang and I'm going
50:39 - to refresh this now everything is going
50:41 - to disappear all I'm gonna get is the
50:43 - name that I class right here let's get
50:45 - rid of that and see what's going to
50:46 - happen so it's gonna say that's an
50:48 - undefined opposite that's because that's
50:52 - great because I have slash something
50:54 - which is a magic thing what I have to do
50:56 - is get rid of that slash and I can do
50:58 - just custom and it's gonna give me back
50:59 - mom so let's just all we have to do
51:02 - right now so let's go put it back
51:04 - everyone as you can see I get everyone
51:08 - so I want to concatenate that right in
51:10 - the response let's go ahead and do that
51:12 - so I'm gonna do welcome and let's just
51:14 - do some basic automation right here and
51:18 - we can just do requests I'll actually
51:21 - you know what let's just use this and
51:23 - I'm gonna save that run to called name
51:28 - and let's just do that name right twigs
51:32 - let's go ahead and refresh this and as
51:34 - you can see I get to welcome everyone so
51:36 - if I change this to 1 then I get welcome
51:39 - back that's just a welcome oh and that's
51:47 - pretty much it for this part I feel like
51:50 - this took so long so now what we're
51:52 - gonna do is we're gonna start talking
51:53 - about views so as you can see this is
51:56 - just returning some ugly stuff for us as
51:58 - we turn in just this response HTML and
52:00 - you don't want to do that so how much
52:03 - shimmer can you even fit in this small
52:06 - string right here so what we're gonna do
52:08 - is we're gonna start using fuse and for
52:11 - you the template engine that we're going
52:12 - to use is called twig so this specific
52:14 - Symphony now we cannot just go ahead and
52:18 - start using twig because we have to
52:20 - install it first so let's go ahead and
52:21 - search for twig and as you can see we're
52:23 - gonna get some stuff with bridge bundle
52:25 - lips or this extension extensions and
52:28 - all that so what I'm gonna do what we
52:29 - gonna do is we're gonna go ahead and
52:31 - install the twig bundle which is going
52:33 - to inspire and everything that we're
52:34 - going to need to start working with this
52:36 - so again I'm gonna go back to my
52:38 - terminal
52:39 - I'm gonna do compulsively Park I'm gonna
52:42 - placed template I'm gonna enter and it's
52:45 - going to install with templating engine
52:47 - for me and I don't have to worry about
52:49 - anything else alright as you can see we
52:52 - have twig installed now let's go ahead
52:53 - and see out with music now the first
52:55 - thing you gotta know is after we go back
52:57 - to our application we have a new folder
52:59 - it's called templates now this is what
53:01 - out what I was talking about this is
53:03 - where this is the EM we see this is the
53:06 - V section of that ending see so this is
53:09 - where all the viewers are going to live
53:10 - inside the templates one other thing
53:13 - that you're going to notice inside our
53:14 - packages we have a new apply it's called
53:17 - twig dot Yama so this was much initially
53:19 - here it just added right now even this
53:21 - was not here we just created the way we
53:24 - installed annotations but within twig
53:28 - Tamil you can see that we can get rid of
53:30 - some stuff so this is the default path
53:32 - where it's going to look for the views
53:34 - as you can see it's in slide templates
53:36 - and some stuff some straight variables
53:38 - and all that you don't need to worry
53:40 - about right now now let's go back and
53:42 - close some of these stuff so nobody gets
53:44 - confused we can go ahead and set up our
53:48 - routes for our five now let's go back
53:51 - and do this for both our index dot HTML
53:54 - and our custom index action and the
53:59 - custom action now instead of just
54:02 - returning something like this we turn
54:04 - your response what you can use is to
54:06 - just build return this render now this
54:11 - refers to this render as you can see
54:13 - this render function is not inside our
54:15 - main controller but it lives inside the
54:17 - abstract controller right here so we're
54:20 - gonna use that function as you can see
54:21 - this render takes some stuff the first
54:24 - thing it takes is the place where that
54:27 - template is now I'm gonna show you how
54:30 - that works so if I do something like
54:32 - home slash index dot HTML code twig and
54:38 - I just yeah this is going to look for
54:43 - that if you within these templates now
54:45 - home is just the folder index dot HTML
54:48 - the twig is the extension that you
54:50 - should be use for twig files
54:52 - we don't have this file right now so
54:54 - this home we don't have even that
54:56 - smaller as you can see the only thing we
54:58 - have is baseball HTML or twig now if I
55:01 - just leave it like this and I try to go
55:03 - to that route which is okay I get rid of
55:09 - custom image just try to get to that
55:11 - place as you can see it's gonna tell me
55:13 - that it cannot find the template inside
55:16 - the templates folder now what we have to
55:18 - do at this point is go ahead and create
55:20 - that so what we're gonna do first
55:22 - inside templates we then create the
55:24 - directory which is called home and
55:27 - within that within their home territory
55:30 - we're gonna create our index dot HTML
55:32 - but with some index.html go click file
55:35 - I'm gonna enter and we can have whatever
55:38 - we want right here so I'm gonna just do
55:40 - an h1 h1 h1 and we're gonna go on
55:46 - Twitter like that so let's go ahead and
55:49 - refresh then see what we're getting hit
55:51 - and as you're gonna see we get welcome
55:53 - from twink now it's pretty much the same
55:55 - thing but this is a twit file it's
55:58 - separate you can have whatever you want
55:59 - now we did that from the main controller
56:02 - let's go ahead and do that for the
56:03 - accustomed inmate at the index action
56:06 - let's go ahead and do that for the
56:08 - custom action now we're gonna get rid of
56:10 - get rid of this response that we have
56:12 - right here and we're gonna do return
56:14 - this render and we're gonna render
56:17 - something so we're just gonna use the
56:19 - same although we're gonna do home and
56:21 - we're gonna call this custom code HTML
56:24 - code quick so the same thing like right
56:29 - here
56:29 - so as usual we gonna do custom and we're
56:32 - gonna get an error it's not gonna be
56:34 - able to find the template that's because
56:36 - we haven't created it yet so let's go
56:38 - ahead and do the same thing let's create
56:40 - a new file it's good custom dot HTML
56:44 - built way I'm gonna enter and let's do
56:47 - something like h1 welcome so if you
56:51 - remember correctly in the response we
56:53 - had something like welcome in the
56:55 - username so how do we get access to that
56:57 - username right here so that name that we
56:59 - just enter like here so how do we get
57:03 - access to that as you can see it's just
57:04 - going to give me one
57:05 - well you can just not do name like this
57:08 - it's not going to work because it does
57:10 - not even know what make is so what we
57:12 - have to do is from the controller we
57:15 - have to tell it that we need to pass
57:16 - this name to this view so that this view
57:19 - can be able to use it now how do we do
57:21 - that all you have to do is send
57:23 - everything in the second parameter in
57:26 - the render function I'm gonna put a
57:28 - corner after the name I'm gonna send an
57:31 - array which is gonna be all the data
57:33 - that I'm gonna need and as I said I'm
57:35 - gonna give this name so the first thing
57:38 - is the sock this is just a regular HB
57:40 - array so the key is going to be the name
57:43 - that is going to be used then the actual
57:46 - template here in the actual with you so
57:49 - what we're gonna call it I'm gonna call
57:50 - it name you can call it whatever you
57:52 - want
57:52 - the second thing is the value in this
57:54 - case it's gonna be the name variable so
57:56 - I'm gonna pass that now I'm gonna go
57:58 - back to my custom dot HTML you can
58:00 - measure just do something like this it's
58:02 - not gonna work as you can see it's going
58:04 - to render that you know that as a string
58:07 - now Twitter uses a separate special
58:10 - syntax is gonna use something like
58:12 - Angela of usually as use its use two
58:15 - curly braces and you can put whatever
58:17 - you want within that so everything
58:19 - between that will between it s PHP or
58:21 - twig so in this case what we need to do
58:23 - is you cannot do the name like this
58:26 - that's not gonna work it's gonna tell
58:28 - you that it does not does not know what
58:30 - this character is you have to pass the
58:32 - variable just by using its name so
58:35 - welcome to curly braces and the name of
58:37 - the variable which is name now let's go
58:40 - ahead and see that as you can see it
58:42 - says welcome to free can now basically
58:45 - you're almost done with the controller
58:47 - and user you know how to set up most of
58:49 - this stuff that you basically mean now I
58:54 - want to add some stuff I want to confer
58:56 - I want to add some CSS and some Jas to
58:59 - this so what I'm gonna do is I'm gonna
59:01 - use bootstrap so let's go ahead and get
59:03 - bootstrap I'm gonna get that from some
59:05 - sort of CDN and I'm gonna take whatever
59:08 - I'm gonna need so basically uh for now
59:11 - I'm just going to need the bootstrap
59:12 - don't wind up CSS I just need the CSS
59:14 - stuff so what I'm gonna do is I'm gonna
59:16 - copy so this is the first version so I'm
59:18 - just gonna copy
59:19 - yes and I'm gonna go back and see how I
59:22 - can include the right ear
59:24 - now before I start using bootstrap I
59:26 - want to mention one other thing that you
59:27 - can do with twit which is the mint and
59:29 - what you want to why you want to use
59:30 - something like twig now let's say that
59:32 - you have like a navbar that you want to
59:35 - be that you want to have to be repeated
59:36 - between all the views for example we're
59:39 - gonna have a mouth all that it's going
59:41 - to take us to the home page it's gonna
59:42 - have the logo on it and all that so how
59:45 - do we do with that so basically that is
59:47 - going to be repeated and you don't want
59:48 - to add to copy that Auto good place you
59:51 - don't want to copy that each time you
59:52 - need that it's gonna make it harder for
59:54 - you to change it if you want to update
59:56 - something you gotta go you're gonna have
59:58 - to go through all the million views that
59:59 - you have it's not something recommended
60:01 - to use what you can use is something
60:04 - called a layout so for example this
60:06 - based on HTML twig serves as a layout so
60:09 - we can actually use it as you can see it
60:11 - has a doctype it has the HTML the head
60:14 - and the body and we can actually just
60:16 - include bootstrap right here so let's go
60:19 - ahead and try something like that let's
60:20 - go ahead and add wood strap right before
60:24 - the site sheets so as I said as I said I
60:27 - just copied this CDN but yes of
60:29 - bootstrap and I just included it right
60:32 - here but as you can see this is not
60:34 - going to be used yet if I take a look at
60:36 - the source code right here if I do a new
60:38 - page source as you can see it just says
60:41 - welcome free code camp and it's not even
60:43 - valid HTML it does not have debug type
60:45 - and HTML tags not that so what we have
60:48 - to do is we need some way to tell this
60:52 - to use this but just put this content
60:55 - inside the body
60:57 - now we're gonna notice something called
60:59 - blocks we have blocks right here so the
61:02 - main one I want to focus about right now
61:05 - is the body so how how is this body
61:08 - block working right now so you can
61:11 - define a block like this so this block
61:13 - is going to be filled with something
61:15 - when called in other views now before
61:18 - you can even do that we have to extend
61:20 - this based on HTML but we know that we
61:23 - have a key so how we can do that we can
61:26 - just go to the first line of our
61:28 - application we can do optional curly
61:31 - braces and
61:32 - 2% a percent you know simple and we can
61:37 - do use the extent to see extent and it's
61:42 - going to ask me it's not going to ask me
61:44 - but second thing that I can provide
61:46 - after that is which layout I want to
61:48 - extend so in this case I want to extend
61:50 - the basics of HTML there so what I'm
61:52 - gonna do is I'm gonna do base don't HTML
61:55 - don't wig okay
61:58 - let's go ahead and see what that's going
62:00 - to give us so I'm within the custom
62:01 - location archway I'm going to refresh
62:04 - this and as you can see it's gonna tell
62:07 - me that this view right here is extended
62:11 - and under view but we can not have just
62:14 - tags to be thrown all over the place so
62:16 - this needs to be placed within another
62:19 - plot and how do we specify that blog for
62:22 - example in our case we want to put that
62:24 - within the body of that word layout so
62:27 - we can do something like this we can do
62:29 - the same thing do block body and we can
62:35 - end the block right here and inside that
62:40 - we can put whatever we want to be put in
62:43 - the body of our five so if I do that as
62:48 - you can see it's going to work now we're
62:50 - going to notice that it's changed a
62:51 - little bit that's because if I take a
62:53 - look at the source code so if I do that
62:56 - you're gonna notice that it's extending
62:59 - that basically all the best layout and
63:01 - the best layout is including the
63:04 - bootstrap J's which means we can now use
63:06 - bootstrap in our our files now let's go
63:10 - back to our main as you're going to
63:11 - notice it's still ugly and it does not
63:13 - use and it would struck let's do the
63:15 - same thing let's extend people's
63:17 - gelatine spend the base layout for that
63:20 - so I'm gonna do stems and based on HTML
63:26 - but with and as before we're not allowed
63:30 - to put just all this anyway we want
63:33 - we're gonna have to use a block so let's
63:36 - put that in the blog but and let's end
63:41 - the blog look and we have that welcome
63:45 - quick let's go ahead and refresh this as
63:47 - you can see it welcome front page and we
63:50 - can make all sorts of changes that we
63:51 - want for example let's put this block
63:53 - inside a container so we can do that
64:00 - simple stuff and everything is going to
64:03 - be centered within the container
64:05 - and we can have our as I said let's go
64:08 - ahead and steal some something from the
64:10 - back detection and let's just copy
64:15 - something from that and we can use it
64:17 - you know just to demonstrate this so I'm
64:22 - just gonna steal this and I'm gonna go
64:24 - back to my layout file and I'm gonna fix
64:27 - this along here so if I go ahead and
64:33 - refresh you're gonna see we have enough
64:34 - wire right here now this is a big big
64:36 - big properly but as you can see we have
64:41 - our search we have everything that is
64:43 - going to be able to it now let's change
64:44 - these to an inspector we have lights
64:46 - here I want to have the arm and I want
64:48 - to have some other page so for example
64:51 - for example the arm now should take me
64:53 - to this home that I have watch it so
64:56 - let's go ahead and change that let's
64:57 - change some stuff you can change this to
64:59 - feed now this is where I want to talk
65:07 - about the names that we were specifying
65:09 - for these routes right here so this is
65:11 - where the names are going to be useful
65:13 - so within the within twig if you want to
65:16 - generate a URL that points to some
65:18 - action you want to do that right here so
65:20 - you can have like any any URL that
65:23 - exists in your application if you want
65:25 - to rare to actually generate that route
65:28 - what you have to do is use two curly
65:30 - braces so that's syntax for twig and you
65:33 - can use the path function so if I do
65:36 - path like this and I'll try to give it
65:38 - so the second parameter needs to be the
65:40 - name of that route so in our case the
65:42 - name is home so if I just copy this and
65:46 - I go back to to the path and just paste
65:49 - that in there if I go back as you can
65:50 - see this is before even we
65:52 - right now is just say this hashtag as
65:56 - you can see at the bottom keep your eyes
65:57 - right here I didn't see it suggest a
66:00 - hashtag we don't want to have that we
66:02 - want to have the home page that we want
66:04 - that we have allowed okay so I'm going
66:07 - to refresh this as you can see the name
66:08 - changed and even you are out so you see
66:11 - right here the URL has changed we have
66:13 - local hometown so if I click that we're
66:15 - gonna take me right here let's go back
66:17 - to the custom patients to look at it's
66:19 - working it says welcome something but if
66:22 - I click on that it's gonna take me to
66:24 - welcome from twin so that's how we can
66:26 - generate a URL now how do we generate a
66:28 - URL with parameters now we can just get
66:32 - rid of this home right so we're gonna
66:33 - leave that and link I'm just gonna get
66:36 - rid some I'm gonna generate a link so
66:45 - I'm gonna say create for example now how
66:53 - do we generate a URL with parameters now
66:55 - as before we're gonna use the curly
66:57 - braces we're gonna use the calc function
66:59 - we're gonna give it the name of the
67:00 - function of the action that we want to
67:03 - use in this case it's called
67:04 - custom so let's come to that let's put
67:07 - that in the fat and how do you wanna
67:09 - pass Parana pass parameters is this is
67:12 - by using the second argument of the path
67:14 - function so we gotta use something that
67:17 - looks like an object in JavaScript and
67:19 - the first name the first thing you're
67:21 - gonna pass right there is the parameter
67:23 - name in this case it's called names so
67:26 - let's go ahead and do name like that two
67:30 - common points whatever you want to call
67:32 - them and the second thing is going to be
67:34 - the name or the parameter that you want
67:36 - to that you want to use you can pass
67:38 - something dynamic or in my case I'm just
67:40 - gonna pass the name that I just use
67:42 - right here so I'm just going to do that
67:45 - and I'm gonna refresh and see if this is
67:47 - going to work so as you can see I got
67:49 - rid of everything right here but I have
67:51 - my tweet grants which should take me to
67:53 - the custom slash that URL so if I click
67:56 - that indeed it's work and as you can see
67:59 - that is working properly and perfectly
68:01 - fine now that we are code that we have
68:03 - covered the basic stuff of controllers
68:06 - routes and views what I want to do next
68:08 - is focus on the doctrine or the database
68:11 - related stuff so we're gonna go ahead
68:13 - and start writing some very basic stuff
68:16 - so the first thing we're going to need
68:18 - to do obviously is install doctrine
68:20 - because we don't have that can stop and
68:22 - to do that we're gonna go ahead and head
68:24 - to our Symphony recipe server we're
68:26 - going to search for doctrine and you
68:29 - gotta see you're gonna get a bunch of
68:30 - stuff now this might confuse you a bit
68:32 - because there is no doctrine related
68:34 - stuff directly but we have to do
68:36 - something is but we have to actually
68:39 - search much for doctrine but or and so
68:41 - if I do or and like this it's gonna give
68:44 - me some some packages and the package
68:47 - that I'm looking for exactly is this
68:49 - Anthony RM pack not to install it this
68:52 - is going to install everything related
68:53 - to doctrine you don't have to worry
68:54 - about giving anything else this is going
68:57 - to give me a most of the stuff that
68:58 - you're gonna need so what we got to do
69:00 - is we gonna use the alias doctrine to
69:03 - install this and we're gonna go back to
69:05 - our terminal and we're going to do
69:06 - composer require em abduction
69:11 - yeah let's use our M shorter so we're
69:14 - gonna do our m and we're gonna hit
69:15 - return key analyst let's just leave it
69:19 - install words needs alright so we have
69:22 - some stuff that's been done as you can
69:24 - see it everything is installed it's it's
69:26 - tough and as you can see it's gonna tell
69:29 - you to modify your database you are
69:30 - right and think and they thought
69:31 - environment but we're gonna take a look
69:33 - at this in a second and as it's gonna
69:36 - tell you that you can confirm your DNA
69:37 - so that's where we can configure my
69:39 - sequel or whatever driver we want to use
69:41 - and it created this doctrine Dhamma
69:44 - within our configuration file now let's
69:46 - go ahead and take a look at these files
69:48 - quickly now the first as you can see
69:52 - inside our SRC so let's start from the
69:55 - bottom I'm gonna mix this up so as you
69:58 - gonna notice inside our packages we have
70:00 - a new wild-card doctrine and doctrine
70:03 - migrations so I'm gonna go to doctrine
70:04 - and explain this stuff so the parameters
70:07 - as you can see this you can set this
70:09 - parameter if if you don't have anything
70:12 - set within your within your environment
70:15 - file so we're gonna take a look at the
70:17 - environment while actually just start
70:19 - with it
70:19 - is very simplest one now as you're gonna
70:22 - see it sits you can find the
70:24 - environmental part in your root
70:26 - directory so it's not within any folder
70:28 - you can find the dot env file if you
70:31 - open that up you're gonna find that we
70:32 - have a bunch of stuff so this is
70:34 - Symphony relate to start didn't need to
70:36 - worry about this but this is the
70:38 - doctrine stuff which which matters to us
70:41 - right now as you can see this is the
70:43 - database URL this is the most important
70:45 - part of the configuration and it's this
70:49 - is where you really find that you're
70:49 - going to be using my sequel and it's
70:51 - where you define your username the
70:53 - database password your look your you
70:56 - know your address and your quote and
70:58 - last your database name now we're going
71:01 - to come back to this where we need to
71:03 - configure and create our database let me
71:04 - just explain some of this stuff that you
71:06 - can see it right here
71:07 - now this our amp section we don't even
71:10 - need to worry about that especially that
71:12 - this is for beginners and we don't look
71:16 - at that now as you can see it's gonna
71:18 - say the driver that it's using is my
71:20 - sequel the server version 7.5 5.7 it
71:23 - doesn't matter the charge set is that
71:25 - and the most important thing is the URL
71:28 - as you can see this URL is getting that
71:30 - from the environment twice so this is
71:33 - how you get something from the
71:34 - environment but even a result the
71:36 - database URL in this case it's my sequel
71:40 - so this value is just taken and being
71:43 - copied and being pasted here so that's
71:46 - the most basic stuff that you need to
71:48 - know so if you want change something for
71:49 - your database you want to change it
71:51 - right here for example there the
71:52 - username the password the password the
71:54 - port or the database name these stuff
71:57 - needs to be changed right here now
71:59 - within SRC folder you get a notice that
72:01 - we have doing things created for us we
72:03 - have entity migrations and repository
72:06 - now I'm not gonna be using migrations in
72:08 - this video but it's pretty simple it's
72:11 - if you if you have ever used ever before
72:13 - it's pretty much the same thing and you
72:17 - can just check the documentation if you
72:18 - want to use those I'm just gonna keep
72:20 - stuff pretty simple and I'm gonna be
72:22 - doing what I usually do so entities I'm
72:26 - gonna come back to that well story I'm
72:28 - gonna come back to that
72:29 - migrations as I say I'm not gonna use
72:31 - those so that's it all these are
72:33 - see formal now that's pretty much all we
72:35 - need to know about this stuff now how do
72:37 - we interact with the database now first
72:39 - we need to have a database to interact
72:41 - now we can start by changing the
72:44 - configuration inside the in environment
72:47 - type the first thing we need to do is we
72:50 - need to change the username now the
72:52 - username if you remember is root the
72:55 - password is whatever you set when you
72:57 - install that so my case it's six zeros
73:00 - the port is gonna be pretty much the
73:03 - same I'm not really sure if it's the
73:04 - same or has changed I'm gonna check and
73:06 - last here we have the database name so
73:09 - I'm gonna call this as a course which is
73:11 - simply course and I'm gonna save
73:13 - everything right here now one more thing
73:15 - that's been changed is its ID the HP bin
73:19 - slash console if you take a look you're
73:21 - gonna say that we have a bunch of new
73:23 - functions or commands which belong to
73:26 - the doctrines but let's see if I go up
73:28 - the font is relatively large that's why
73:31 - you are seeing these stuff right here
73:33 - as you can see we have a bunch of
73:35 - commands that's been installed and when
73:37 - we install doctrine RM and then we can
73:41 - make use of peace without first when we
73:43 - gotta take a look at is database v8 now
73:46 - database create is going to create the
73:48 - database for us now let's go ahead and
73:50 - see what what databases we have like now
73:52 - so let me just see how can I find that
73:55 - so I think I can get rid of this is this
73:57 - and that was trap and let's go ahead and
74:02 - do localhost 8080 not this 180 this is
74:08 - our symphony but in server right this is
74:11 - how to access your actual
74:13 - HP my admin server so I'm gonna do PHP
74:17 - my admin like that I'm gonna enter as
74:19 - you can see it's gonna ask me for the
74:21 - password in the username I'm gonna enter
74:23 - those I'm gonna hit the return key as
74:27 - you can see we have our databases right
74:29 - here now as you can see we have
74:31 - information my sequel performance insist
74:33 - now how do we create our database that
74:36 - we just configured right here so I'll do
74:39 - it waits and of course now we can just
74:41 - go ahead and create this mining Lee if
74:42 - you want to nobody's going to know
74:45 - nobody's going to complain about
74:47 - that but I like to take full advantages
74:48 - advantage of Symphony so what I'm going
74:50 - to do is I'm gonna do the HP advanced
74:52 - launch console I'm gonna call doctrine
74:55 - and I'm gonna use data base namespace
74:57 - and create and I'm gonna hit enter as
75:01 - you can see it's gonna tell me that this
75:03 - is not to Allah allowed to connect to
75:06 - this my sister and one way to fix that
75:08 - would be to search all the answer using
75:11 - Google so let's go ahead and do that and
75:21 - as you can see on this page we are you
75:24 - gonna scroll down a little bit and of
75:26 - course we don't have and my secret
75:30 - installed or the see a lion spots are we
75:33 - gonna do it we just gonna copy this
75:34 - command that we have right here and
75:38 - we're gonna run that on our PHP my
75:40 - admin' so I'm gonna go to my sequel this
75:42 - is the database that is causing this I'm
75:44 - gonna go to my sequel right here and I'm
75:48 - gonna paste whenever I copied from the
75:50 - website I'm gonna go and change route to
75:54 - my IP I'm gonna change that to one point
75:56 - seven zero than 0.1 one under identified
76:05 - by six zeros which is my password with
76:08 - grant ouch I'm gonna hit go and see
76:10 - what's gonna happen and it seems like I
76:13 - have some sort of mistake that's because
76:14 - it is on right here I need to change
76:17 - them so I'm gonna go against York I'm
76:21 - getting get so it seems like something
76:23 - something happen I'm gonna go back to my
76:25 - tournament and see what's gonna happen
76:27 - like now so let me just clear this and
76:29 - it's do PHP then slash console function
76:33 - database create and indeed it created
76:36 - the database for us so as you can see
76:38 - symphony you know something he calls
76:41 - database was created let's go ahead and
76:43 - see if that's correct
76:44 - I'm gonna refresh this let me fetch this
76:49 - and indeed as you can see we have our
76:51 - database right here now we need to
76:54 - create some sort of tables so how do we
76:56 - create a structure that we have right
76:58 - here now what I like to do is create
77:00 - from symphony itself now each table
77:03 - right here in your database is
77:05 - represented by on symphony site is
77:08 - represented by something called an
77:10 - entity now an entity is just a regular
77:14 - class that would have some properties
77:16 - now each property now the class itself
77:18 - is going to be a table and each property
77:21 - within the class is going to be a field
77:24 - within our column within your table so
77:26 - let's go ahead and make a very basic one
77:28 - now obviously I'm gonna take advantage
77:30 - of Symphony and I'm gonna use the
77:32 - console what I'm going to do is I'm
77:34 - going to be PHP a pin slash console and
77:36 - I'm gonna use the make command and I'm
77:39 - gonna make an integer I'm gonna junky
77:41 - and it's gonna ask me for the name of
77:44 - the entity that I want to create let's
77:45 - say that I want to create something
77:47 - called post are we gonna have some posts
77:49 - in our in our database and all that so
77:52 - let's create close now it's gonna tell
77:54 - me if you want to add some properties to
77:56 - this one now of course I want to add
77:58 - some stuff I'm gonna add a title I'm
78:00 - gonna add for example a description
78:02 - now before I made any changes after
78:06 - write create the property is gonna ask
78:08 - me for the fields right now in my case
78:10 - it's going to be a string and it's going
78:12 - to be just 255 does not matter and can
78:16 - this field being all in the database I'm
78:18 - gonna tell it that this cannot be null
78:20 - at the moment but I can change that
78:21 - later if I want so I'm gonna hit return
78:24 - key and for now I'm just gonna keep a
78:26 - bit title and that's it I don't want to
78:29 - have anything else so what I'm gonna do
78:30 - is I'm gonna hit the return key to start
78:32 - adding fields and as you can see we have
78:35 - green which means that this entity was
78:36 - created now you're gonna see that this
78:38 - kind of asked you to create migration as
78:40 - I said I don't like use migrations but
78:42 - they are pretty useful if you want to
78:44 - use them for yourself you can check the
78:46 - documentation for anything related to
78:48 - migrations is pretty easy
78:49 - they are pretty easy to use now let's go
78:52 - ahead and see if we have our class now
78:54 - if we have our table of course we don't
78:57 - have anything right now we still have to
78:59 - migrate everything from symfony to our
79:03 - database now before we do that let's
79:05 - take a look at the entity that was
79:07 - created for us and we have oats postdoc
79:10 - HP now as I said this is just a regular
79:13 - class with Santa
79:14 - as you can see its class it was not
79:16 - extended and again and we had this
79:17 - entity which means that this this is the
79:21 - repository for this class now we don't
79:23 - have you don't have to worry about to
79:24 - report story I'm going to explain that
79:26 - we get to it and we have some properties
79:29 - now this is the ID for your class which
79:34 - is as you see it has this are M ID if
79:36 - this annotation ID and it's generated
79:39 - value and it's economy of type integer
79:41 - so this is where all the types are
79:43 - coming from we have our title and now
79:45 - everything needs to have a getter and a
79:47 - setter as you can see we have get idea
79:49 - how to set IV obviously there cuz it's
79:51 - also uncommented and we have get title
79:55 - and we had set what a title which we're
79:57 - gonna use to to set or get in title
80:00 - identity now how do we create this table
80:04 - how do we migrate this to our database
80:07 - we had to go back to our terminal and
80:09 - you can even make a migration if you
80:11 - want to I'm not gonna do that that's
80:13 - what I'm gonna do is I'm gonna be PHP
80:15 - pin slash console and I'm gonna do
80:17 - doctrine and not database but schema so
80:21 - this is something related to the schema
80:22 - that we are dealing with now this is a
80:26 - schema so this is the scheme of our
80:27 - database this is the table that's within
80:30 - our database are we gonna use names a
80:31 - schema and we have updates or create so
80:35 - if you don't have anything you can use
80:36 - create which is going to create the
80:38 - schema for you or if you are making
80:40 - updates while you are working on it you
80:43 - can use the update now you can even use
80:45 - updates if you don't have anything and
80:47 - still going to work if I do update and I
80:49 - just hit enter as you can see it's it's
80:53 - not gonna tell me anything so I gotta
80:55 - tell me that so it's gonna tell me that
80:58 - you shouldn't use this and production
81:00 - environment obviously but it's not going
81:02 - to do anything just kind of asked me to
81:03 - evil force this command or used um
81:06 - sequel to see what's to see whether it's
81:08 - going to be executed now let's go ahead
81:10 - and take a look at the sequel so let's
81:12 - go I'm sequel and as you can see it's
81:15 - just a regular sequel you know like the
81:19 - one you used to write when you were just
81:21 - using sequel HP now to execute this what
81:24 - you have to do is not use for dump
81:26 - sequel but you have to you
81:28 - course let's go ahead that as you can
81:30 - see one quick query was executed and the
81:33 - database schema was updated let's go
81:35 - ahead and take a look at the HP my admin
81:37 - I'm gonna click on the database name as
81:39 - you can see we have our table which is
81:42 - post now this is correct we have a post
81:44 - right here as you can see this is
81:46 - structure this is an ID this is a
81:48 - primary key and we have our title right
81:50 - here now let's go ahead and see how we
81:52 - can interact with this from our
81:54 - controller let's say that we then so
81:59 - let's do something let's let's change
82:01 - our application mint language let's say
82:03 - that inside our inside our custom when
82:08 - we want to see some you know when we go
82:11 - to the page of customer slash name we
82:13 - want to actually persist that user to
82:16 - that name to the database as a post I
82:19 - know it does not make sense so what we
82:21 - gonna do it we had a changes to create
82:22 - post let's go create like that oh you
82:27 - know what it seems like it's about time
82:29 - to create another controller so let's go
82:31 - ahead and create another controller so
82:32 - we get that we get more specs let's go
82:35 - page we have instructs console let's
82:37 - make an adventure we're gonna call this
82:40 - post control it because it's going to be
82:42 - everything or it's related and in this
82:45 - case so we're gonna do post controller
82:47 - as you can see it created that and one
82:49 - one thing you're gonna notice that once
82:51 - we install the twig bundle it's gonna
82:54 - install the it's gonna create the
82:56 - controller and it's going to create the
82:57 - templates relating to that controller
82:59 - because it knows that you are using twig
83:01 - or a templating engine so that's a plus
83:04 - in this case I go to templates we're
83:06 - gonna see that we have post between
83:07 - relates to our post controller let's go
83:10 - ahead and open that up as you can see
83:12 - this is a place where we gonna we were
83:14 - gonna display for example all our posts
83:17 - so what we're going to do is let's go
83:18 - ahead and let's leave this as it is
83:20 - right now let's go ahead and create
83:22 - another action we're gonna call this
83:24 - create in this case we're going to need
83:29 - the request because we need some sort of
83:30 - data that we're gonna use so we're gonna
83:32 - do requests like that and let's take a
83:35 - look at the namespace that we imported
83:37 - we have nothing so I'm gonna do all
83:39 - Spencer and I'm going to import the
83:41 - class
83:41 - foundation now it's not going to do
83:46 - anything obviously because it's empty so
83:49 - the first thing we need to do is we need
83:51 - to purchase an object database now
83:54 - everything ichiro in our database is is
83:58 - an object for example if we want to
84:00 - create a new post in a title what you
84:04 - have to do is you have to create a post
84:06 - so we got to do a new post like this
84:09 - post is this then inside the entity so
84:12 - I'm going to do that
84:14 - and from pose I can use my getters and
84:19 - set it so I'm gonna use set title so I
84:21 - can set a title for my post so I'm gonna
84:23 - do sit tight like this and this is going
84:32 - so nothing is going to happen obviously
84:34 - all right now now of course we still
84:36 - need to return response now in this case
84:43 - we're gonna return a few or something so
84:45 - we're just gonna get to that and we're
84:47 - gonna get to that in a second now this
84:49 - is still not a proper action because we
84:51 - forgot one more thing which is the rug
84:54 - so let's go ahead and set up the routes
84:55 - so obviously my gonna watch everything
84:57 - I'm lazy so I'm just kind of copy this
85:01 - and we're gonna make this slash create
85:05 - now I actually I want to make this
85:07 - slashed post slash create because it
85:09 - makes more sense but one thing that I
85:11 - don't like is me to myself I don't want
85:13 - to have / / / / / / index / / / edit so
85:18 - what you can do is you can set a route
85:20 - or your entire class it's going to be
85:22 - set as a prefix so I'm gonna copy the
85:25 - same route that I have right there
85:27 - before my class not before my action or
85:29 - anything before my class and I'm gonna
85:31 - change that to slash post the name is
85:33 - going to be post dot because I like to
85:36 - separate my name's using that so this
85:38 - right here is no longer slash post / box
85:42 - / post so what I'm gonna do is I'm gonna
85:44 - get rid of it so you know what and show
85:46 - you I know that this looks very abstract
85:49 - to you so I'm gonna do is I'm gonna
85:50 - comment whatever I do right here
85:53 - let me see if this is fine fine so what
85:57 - I'm gonna do is I'm gonna get rid of
85:58 - this rub that we get that in a second
86:01 - there is a command that you can use to
86:03 - be both audio routes so what you're
86:05 - going to do is you do PHP bin slash
86:07 - console and you will be back but I'm
86:10 - gonna hit enter as you can see I'm gonna
86:12 - get all the rights that I have set up
86:13 - right now
86:14 - now you're gonna see that this is post
86:16 - doc post and this is slash this slash
86:19 - post large post that's because we are
86:21 - using this prefix right here so if I
86:25 - change this to lunch something just to
86:28 - see that I'm gonna show you something
86:31 - these one are going to change from slash
86:34 - posts that close to slash four slash
86:36 - something it is going to be posted on
86:38 - something okay as you can see post on
86:41 - something and it's bad for our sample so
86:44 - let's put this I'm gonna call this index
86:47 - for stock index and I'm gonna call this
86:49 - just slash because it's the index within
86:51 - our post right or if you want to call it
86:56 - like in name spit okay so let's go ahead
86:58 - and create our second one so I'm gonna
87:00 - copy this as I said and I'm gonna call
87:03 - this create so let's call this Y and
87:07 - let's give it a name create and we have
87:10 - requests let me just update the dog to
87:12 - get rid of that line and we have our
87:15 - create so let's go ahead and take a look
87:17 - and see what we're gonna get right here
87:18 - so I'm gonna go for router again as you
87:20 - can see we have slash slash cool yeah
87:22 - now this is going to give us all the
87:23 - posts that we have and this is going to
87:26 - allow us to create a new post now is
87:29 - this going to be persistent to the
87:31 - database absolutely not because we have
87:33 - no way to tell it that this needs to be
87:35 - sent to the database so what you know
87:37 - what we need in this case is something
87:39 - called the entity manager and the entity
87:43 - manager is what actually connects and
87:45 - talks to the database so how do we get
87:47 - that which is kind of call this e/m
87:49 - which stands for entity manager are we
87:52 - gonna use this which refers to our class
87:55 - and we're gonna get to get dog training
87:57 - which is a function from this abstract
88:00 - for a controller that you are extended
88:02 - now we are getting doctrine but from
88:04 - duction we need the entity
88:06 - so what we're gonna do we're gonna go
88:07 - get manager like this and right here we
88:10 - have an entity manager so how do we use
88:12 - that to persist now we're gonna use
88:15 - entity manager and from that obviously I
88:18 - said it before we have persist which
88:20 - going to persist and save everything to
88:22 - the database let's go ahead and serve
88:24 - the persist that so we gotta be trying
88:28 - to we are trying to create this row in
88:31 - our database that is going to be called
88:33 - it's going to have a title so one thing
88:37 - that is going to be creative right here
88:38 - is an ID of one and it's like look of
88:41 - this one right here let's go ahead and
88:43 - do that so this should do something and
88:46 - you know what let's do something let's
88:48 - return and your response I'm not gonna
88:50 - be kind of view right now need it no as
88:55 - you can see I imported the wrong
88:56 - namespace and just get rid of this
88:58 - response all right here and import the
89:00 - correct one which is from HTTP
89:02 - foundation and what we want a return is
89:07 - just the post was created and as you can
89:13 - see in a second it's not going to create
89:15 - that post
89:15 - let me just update the bug to each other
89:18 - we turn and let's go back to our
89:21 - application and we need to access that
89:23 - forum post slash create as you can see
89:26 - if it's kind of telling me that the post
89:28 - was created but let's check our database
89:30 - and it's full of lies this money did not
89:34 - create anything that's because after you
89:36 - persist you need to call another
89:38 - function called from the entity manager
89:42 - you need to call the flush now this is
89:46 - just going to construct the insert query
89:48 - it's not going to actually insert it but
89:50 - to persist everything and send all the
89:53 - commands the database you need to call
89:54 - flush which is going to actually execute
89:57 - that query that you just created music
89:59 - says now normally you want to call flush
90:02 - after everything so if you have like
90:03 - multiple commands right here or multiple
90:05 - lines that are going to persist or
90:07 - whatever you want to call flush after
90:09 - that you don't have to come flush up to
90:11 - each one of the purses now let's go back
90:15 - and see if our query is going to work
90:16 - and then a refresh as you can see it's
90:19 - post was created let's go ahead and
90:21 - check it's lying to us and it's not
90:25 - lying it's actually working at it so we
90:27 - have this is going to be our title we
90:28 - have our record right here so how do we
90:31 - actually get this so we just inserted we
90:34 - just made our first interaction with the
90:35 - database how do we actually get this
90:38 - value from the database so we need to
90:40 - have some sort of a way that says so
90:43 - this is just creating I want to have
90:45 - something that that is going to display
90:46 - the first one so we're gonna set up two
90:49 - things we're basically we are basically
90:51 - making a crud right now a crud and let's
90:54 - go ahead and try to do that so let's say
90:56 - for our index action we're going to
90:59 - display all the posts that we have no
91:01 - pagination or whatsoever we're just
91:02 - going to display all the positive yeah
91:05 - how do we do that we're gonna create a
91:08 - variable called post and from post we
91:10 - need to access this so this is where the
91:13 - repository is going to come in handy so
91:16 - our repository is just a way for you to
91:18 - manipulate and access your entity for
91:22 - example if you want to get all the posts
91:24 - that you have you're not gonna go and do
91:25 - for each post in my entity or whatever
91:27 - you're just gonna call it the post
91:28 - repository and you're going to ask it to
91:30 - give me all the values that I have in my
91:33 - entity my post entity and to access that
91:36 - you have two ways you can either please
91:39 - come here and use dependency injection
91:41 - and auto wiring you can do post
91:43 - repository like this and do post
91:45 - repository and we can just go ahead and
91:48 - do post use that value that we just
91:51 - inserted and we find our fine art is
91:54 - going to get you all the values we have
91:56 - some functions like right there we have
91:59 - find which takes the ID if you want to
92:02 - find just one we're gonna use that in
92:04 - the second action that we were just kind
92:05 - of creating this play the post and we
92:07 - have find one by is going to find you
92:10 - one thing one record by something for
92:13 - example you wanna search by the title
92:14 - you can use find one biting title we can
92:17 - search I'm gonna see that in second to
92:19 - get to it and we have fine polish which
92:22 - is going to get all the records that we
92:23 - have in the database and we are fine by
92:25 - which is this similar to find one but
92:28 - it's not going to find in just one if I
92:30 - want to find you by the title or
92:31 - something but it's going to be
92:32 - all the records you have like ten it's
92:34 - going to be 210 find one pi is going to
92:36 - get you only one okay so let's go ahead
92:39 - and use mine on and of course what we
92:43 - want to do is want to update that to get
92:45 - rid of them that's just you don't
92:46 - necessarily need to update the dog it's
92:48 - not necessarily the necessarily the only
92:51 - necessary thing is this route right here
92:53 - so this is necessary this documentation
92:56 - spot is not so how do we know what type
93:00 - of posts that we have right now so let's
93:03 - go ahead and dump this and see what we
93:05 - got sort of stump D posts and let's see
93:10 - that rug so as I said who route is this
93:13 - one that we have right here so slash
93:15 - boats slash nothing so let's go ahead
93:18 - and get rid of create and see what we're
93:20 - gonna get indeed we got a post so this
93:24 - is just coming from the view that were
93:26 - just creating you don't have to worry
93:27 - about it we create to the controller it
93:29 - creating this fancy to your class but we
93:31 - have our post right here as you can see
93:33 - it's an array of boats but since we have
93:35 - only one post it's going to be me just
93:37 - an array of form value so let's go ahead
93:39 - and create another one it's just called
93:41 - the create as you can see a post was
93:43 - created let's go back to my index page
93:45 - as you can see we have two posts so it's
93:47 - going to get us all the posts the post
93:49 - that we have now this is great by how do
93:52 - we display is right here for the user so
93:55 - the user can see in a table or something
93:57 - let's go back to our controller as we
94:00 - see we have that view so what we're
94:02 - gonna do is we're gonna get rid of this
94:04 - and that is a pointer here I'm gonna
94:06 - need the array because I'm gonna pass
94:08 - these posts all right here so what I'm
94:10 - gonna do is I'm gonna give it ki compost
94:12 - and posts like this which is this
94:15 - variable Y - so I can just get rid of
94:17 - this where I can't I don't need it and
94:19 - now this is going to transfer all the
94:22 - posts that I have right here to my view
94:24 - which is inside post / in the
94:26 - exploration and so let's go take a look
94:28 - at that post
94:30 - index dot HTML as you can see we have a
94:32 - bunch of stuff so what I'm gonna do is
94:34 - I'm gonna remove everything so that you
94:35 - don't get confused and we can start from
94:37 - scratch the first thing we're gonna do
94:39 - is we're going to extend the page dot
94:42 - HTML web link so the left card base
94:46 - quick now that we have done that we can
94:49 - go ahead and put everything in our book
94:52 - so we're going to do a blog body and
94:54 - we're gonna end the blog and everything
94:58 - that we're gonna do is going to mean
94:59 - words now one thing that I forget to
95:01 - mention it is that you can even since
95:03 - this is only page fear you can even dump
95:05 - stuff in into it so we can do posts like
95:10 - this and if i refresh this I'm gonna get
95:13 - a dump as you can see right here it's
95:15 - dumping that they advertise that I have
95:18 - now that is not looking good so what we
95:21 - need to do is I'm gonna need to create
95:23 - some sort of a table to display all my
95:25 - values and how I'm gonna do that I'm
95:27 - gonna start using some functions all
95:30 - Twigg
95:31 - so the first one I'm gonna use so you
95:33 - know what let's each one is obviously
95:41 - edge to this post and go what I'm gonna
95:45 - do is I'm gonna use a table to display
95:47 - all the stuff so let's in table and
95:49 - let's give it some boots
95:54 - [Music]
95:59 - we're gonna use to head which is going
96:02 - to give us B head so the first thing I'm
96:07 - gonna do is display the ID even though
96:08 - we don't necessarily need that second
96:12 - now cuz get to be important Scott which
96:15 - is the body first thing we're gonna do
96:17 - is we need to go to our row and we need
96:22 - to be and the first all we're gonna do
96:24 - is we're gonna explain an idea right
96:26 - here now this row is going to be
96:29 - repeated several times so this needs to
96:31 - be within before in true let's go ahead
96:33 - and see how that works so quick
96:45 - and as you can see it as much either for
96:49 - each is just have this for user in usage
96:52 - which looks like a for each and behaves
96:54 - but before Easter let's go ahead and use
96:56 - that see it this is what I'm talking
96:59 - about so let's go ahead and do that so
97:02 - we're gonna use these syntax to to do
97:05 - something we're not clearing it or we
97:06 - are not displaying some value that we
97:08 - are actually writing syntax so we're
97:10 - gonna do for post and post so for each
97:15 - post the inside our post our posts that
97:19 - we send from here we want to display
97:22 - those that we want to end the block
97:25 - obviously we want to end default for for
97:28 - loop so we're gonna go can we have
97:34 - everything ready so how do we display
97:35 - the ID easy post is just an object so
97:39 - what we're going to do is we're going to
97:40 - be post ID and that is going to give us
97:44 - create ID of that post the second thing
97:47 - is the title so let's do post title now
97:50 - let's go ahead and see what we gotta get
97:52 - and this and I'm gonna refresh this and
97:55 - as you can see we have a list of all
97:57 - posts and we have the ID which is one
97:59 - and two and title into this so this is
98:03 - getting me whatever I have in my
98:04 - database now I want to add two things
98:06 - just to make it prettier so I want to
98:08 - have something to so I'm gonna create a
98:12 - link but I'm gonna click or actually
98:14 - let's just make this clicker so whenever
98:15 - I click this it's going to take me to a
98:17 - page that is going to display this post
98:20 - for me so what we're gonna do is we're
98:24 - gonna change this a little bit so we're
98:25 - gonna do is we're gonna add just remove
98:27 - that I'm gonna add a trip link and I'm
98:30 - gonna use just like before the plant
98:32 - function I'm gonna I'm gonna give it the
98:34 - name now we don't have that yet so what
98:37 - we're gonna do is we're gonna jump to
98:39 - our post controller and I'm gonna create
98:41 - a function called display which is going
98:44 - to oldest college show doesn't matter
98:46 - which is going to show the funk to show
98:49 - me the post that I'm asking for
98:51 - Campos showed and this is going to read
98:55 - John so let's do that right now we turn
98:57 - you're probably getting familiar with
98:59 - this by now so we're going to do this
99:02 - renter and we get a regular something
99:04 - we're gonna render something from the
99:05 - post we're gonna render view called
99:08 - another click okay we're gonna need to
99:12 - pass something to that we're gonna need
99:14 - to pass it a post but you are asking for
99:18 - so we're gonna do that post like that
99:20 - and post so let me just put a comma new
99:25 - so I don't forget about that get wait
99:32 - all right so we have that now what we
99:34 - need to do is we need to get post first
99:36 - thing we got to do is we need to set up
99:38 - the route so let's use that got a good
99:41 - route this by now so we're gonna do
99:46 - slash so this is within slash post we're
99:48 - gonna do slash show but we don't know
99:51 - which one we want show so we wanna pass
99:53 - the ID of that claim that you are trying
99:55 - to view so what we're going to do is
99:56 - we're going to use the same syntax as
99:57 - before doing an address and ID as a
99:59 - parameter we're gonna do idea like that
100:02 - and the second thing we need to pass is
100:04 - the name of that action this is going to
100:07 - be show now as I said this is where then
100:11 - everything is protected
100:12 - oh so this is going to be post dot show
100:15 - okay so how do we access this idea right
100:18 - here well I showed you one way which is
100:21 - to use the request but using the request
100:23 - is overkill in this case one thing that
100:25 - you can do is just press the ID like
100:27 - this and it's going to work obviously
100:29 - let me show you that in action so let's
100:32 - do post and you can do post equal so as
100:36 - I said you need the entity manager at
100:38 - this point only in you need the
100:39 - repository so let's take the repository
100:41 - for example post for story and this to
100:45 - post to post and you can do this post
100:50 - post for story and you can use fun
100:53 - because we are passing with the ID so if
100:55 - we pass the ID like this let's go ahead
100:59 - and dump and see what we're gonna get so
101:02 - let's get post that and I'm gonna die it
101:05 - right
101:05 - that because I don't have this view
101:07 - created yet so what we're gonna do is
101:09 - we're gonna jump and see if that is
101:11 - going to work so I'm gonna go show slash
101:15 - the idea now let's not just it this way
101:19 - let's actually go ahead and finish this
101:20 - up so what we're going to do is we're
101:23 - going to go back to our boat slash index
101:26 - dot HTML twig and we need to give it the
101:28 - pen now event is going to be post dot
101:31 - show now we need to pass it a parameter
101:34 - which is the post ID how we do that easy
101:36 - just like before we gonna class
101:38 - something that looks like a JavaScript
101:40 - object we're gonna give it an ID this
101:43 - name needs to be identical to the name
101:45 - that you entered in your route right
101:47 - here so we're gonna do ID and we're
101:51 - gonna give it the post ID how do we
101:52 - wanna get how we gonna get that we have
101:54 - it right here so let's just build post
101:56 - dogs ID and we need to give it the title
102:02 - so it's just cool just to post the title
102:07 - and is all we need to do to be the
102:09 - proper views keys if i refresh this I'm
102:16 - gonna see these are all going to be
102:18 - actual links if I click on this it's
102:21 - gonna take me to show one which is
102:23 - giving me outside now this is not gonna
102:25 - be happy actually these combs we have
102:27 - fun I go back and I click on the second
102:30 - one and I see the ID is 2 so it's two
102:32 - different things now this is great as
102:35 - you can see this using this in our post
102:37 - controller is nice but we can even get
102:40 - rid of this line lightning even get rid
102:43 - of all these words here one thing that
102:45 - you can do is we can use something
102:47 - called the program converter it's pretty
102:50 - simple converter is the name of the
102:52 - thing but you can just go ahead and do
102:54 - something like most folks just like to
102:58 - that if you inject this post right here
103:01 - it's going to get that ID and it's going
103:04 - to look for that post in the post entity
103:06 - and is going to give you that if it
103:08 - cannot find it is going to do going out
103:10 - let's go ahead and see if that is going
103:11 - to work we gotta get in same result as
103:14 - you can see why it's weird it's the item
103:15 - 2 let's go back click the first one it
103:18 - is
103:18 - so that's pretty amazing you can use
103:21 - whatever value you want to search by
103:23 - okay but if this one has to be within
103:26 - the the entity's subsoil one search by
103:29 - losing the title I can do that so we
103:33 - have this stuff ready let's go ahead and
103:35 - create this view that we need yeah
103:37 - so post let's go ahead and create this
103:40 - one this will show from HTML twig and
103:44 - just like before I am going to extend
103:47 - the base layout so stands quick and
103:53 - let's put everything inside it body body
103:56 - so we're gonna do block body and we're
103:59 - gonna end this blog and let's just do
104:04 - something like an h1 and you know just
104:12 - so this proposed title let's go ahead
104:18 - and see let's refresh this as you can
104:20 - see this is going to be a title we have
104:22 - that everything is working fine and as
104:25 - expected
104:26 - now we done we've done some basic
104:28 - interaction with the database we can go
104:31 - ahead and let's actually you know what
104:33 - let's get let's get this database
104:36 - wait so we created something that we
104:38 - don't - it's going to help us create
104:40 - we're still gonna use forms this is not
104:42 - okay we are going to change this to use
104:44 - some forms and we actually can go now
104:48 - and let's create a remove function
104:51 - before we and B so we can do a public
104:54 - function let's call this remove and just
104:59 - like before we need to set our route for
105:01 - this so this is going to be robbed of
105:03 - slash feet so if like that and it's
105:08 - going to need what what is going to the
105:10 - link so we need the ID of people start
105:13 - we are going to believe let's give it a
105:14 - name to it and just like before I'm not
105:18 - gonna pass the ID and look for it
105:19 - finally I'm just gonna inject right here
105:22 - and we made the entity manager to be
105:25 - able to interact with the database and
105:27 - remove this so what we gonna do is we're
105:29 - gonna do the M
105:31 - guilt gotcha and let's get the identity
105:35 - manager to just get manager now we have
105:38 - access to that what we can do is just be
105:40 - entity manager we can call the anymore
105:43 - function and we can give it the object
105:45 - that we want to pasture just like
105:47 - persisting units basically imposed or
105:50 - the object that you are trying to remove
105:52 - to a persist new mode works the same
105:54 - thing Newton you need to pass the beam
105:56 - of the object that you are trying to
105:58 - remove now just like before it's not
106:00 - going to work like yes you need to call
106:02 - flush after that and last thing you need
106:06 - to do is just call so basically after
106:10 - absolutely moving something there is no
106:13 - way to point to redirect the user unless
106:16 - you accept the index page so that's what
106:19 - I'm gonna do right now
106:20 - now redirect in a user in Symphony is
106:23 - simple it's actually the same thing as
106:25 - so basically each action needs to return
106:28 - a response and the redirect in synchrony
106:31 - is a response so let me show you how you
106:32 - can redirect user within the controller
106:34 - all you have to do is return I'm gonna
106:36 - use this redirect which is a function
106:39 - that is coming to from this abstract
106:43 - controller so I'm gonna redirect to
106:45 - something now I need to generate a URL
106:48 - to to be able to go to redirect to that
106:52 - route so we can use another function
106:54 - called this generate URL and this takes
106:58 - the route name so what we're gonna pass
107:00 - is the post both index and the post dot
107:04 - index is the name that we have right
107:06 - here so it's going to redirect this
107:09 - place and we don't have any parameters
107:11 - whatsoever so let's go ahead and see if
107:16 - this is going to work let's go to okay
107:20 - so you know what I think it's pretty
107:22 - much easy to go just to the index to the
107:26 - post index and add or remove link right
107:29 - here so let's go ahead and do that I'm
107:30 - going to add another claim our wife its
107:33 - actions and right here let's remove that
107:37 - so let's create a link that is going to
107:39 - remove that so we are gonna do so I'm
107:42 - doing something a very dangerous
107:44 - to send that via post via get so we
107:49 - don't want to have your access to access
107:51 - your beliefs your delete method actions
107:55 - using get because once you Google starts
107:58 - crawling in your website everything will
107:59 - be both that what you want to do is
108:01 - change the method I'm not going to do
108:03 - that just to save some time that's
108:04 - something that is not necessarily
108:07 - Symphony theme but it's like a web where
108:10 - you know web development pain so let's
108:12 - just go ahead and keep this in so I'm
108:14 - gonna call postcode delete and I want to
108:16 - passively post ID so let's get it that
108:19 - same notation as before post doc ID and
108:22 - let's call this delete this post expect
108:34 - expected name our number that's
108:36 - obviously because I used let's refresh
108:42 - again as you can see we have the delete
108:44 - which is going to remove that at least
108:46 - that smart so if I click on the lid is
108:55 - going to remove this and redirect me
108:57 - back to this same page I'm going to do
108:59 - that as you can see it has removed that
109:01 - now we don't have any feed expect this
109:04 - that it's it's minus one record so what
109:08 - we're going to do is let's actually go
109:09 - ahead and create another one okay you
109:18 - know what we can actually go ahead and
109:20 - do something really nice which is going
109:22 - to copy she's going to be copying this
109:24 - and put it inside the create function so
109:27 - inside out create function I'm gonna
109:29 - instead of returning response I'm gonna
109:32 - just play sports criteria and it's going
109:34 - to do the same thing if I go to create
109:36 - it's going to redirect me right away now
109:39 - I want to display some sort of a message
109:41 - when I delete something and there's
109:43 - something inside symphony called
109:45 - flashed messages so I'm gonna do that
109:48 - for the remove but you can just go ahead
109:49 - and do that like you can call this add
109:53 - flash and add flush is just a function
109:56 - that texture
109:57 - obsession to add a message that is going
109:59 - to be displayed just for one time one
110:02 - single time the first thing is going to
110:04 - be a string which is the type or it can
110:06 - be and there anything I'm gonna do
110:08 - success and I've gotta call this success
110:10 - the second thing is the message that you
110:12 - want to display and I'm gonna call this
110:14 - the post and that's all you have to do
110:22 - to display this message now you need to
110:24 - go to the view I'm gonna go to my post
110:27 - slash index of HTML and I'm gonna have
110:30 - to display this somewhere so what I'm
110:32 - gonna do is I'm gonna go ahead and just
110:35 - symphony inside our view really just to
110:42 - iterate through all the stuff that we
110:44 - have inside talking about so we just
110:50 - kind of caught me this and basically
110:52 - what this is going to do it's going to
110:53 - iterate through all the flesh messages
110:55 - that we have but the name must be
110:57 - identical to this one that we used right
111:00 - here so I used success I need to change
111:02 - this from roadies to success and the
111:05 - message is going to be the same so this
111:07 - is all you have to do right now let's go
111:10 - ahead and see if that is going to work
111:11 - so let's go back to this page and we go
111:14 - we are going try to the needs fourth
111:17 - post
111:18 - let's click delete and as you can see
111:21 - the post was removed if i refresh this
111:23 - as you can see it's not going to work
111:25 - now
111:25 - I was expecting alert alert alert
111:39 - success let's try to remove this and as
111:41 - you can see post was refresh that's not
111:45 - going to be there anymore so that's how
111:47 - you use you use flash messages now as
111:51 - you remember everything is static so
111:53 - when I called create is just going to
111:55 - create something that is hard-coded now
111:57 - I want to be able to add this manually
111:59 - and the way to do that it is we're gonna
112:01 - start using forms and that's usually
112:04 - what you use to insert some data so
112:06 - let's go ahead and start talking about
112:08 - forms so you can have two types of forms
112:11 - in your application you can have forms
112:13 - that that are related to a class
112:15 - directly and you can even have forms
112:17 - that are not not mapped to anything for
112:20 - example like like a login page or
112:23 - something like that so let's go ahead
112:25 - and see in the console and see what we
112:28 - have available for the Met command so
112:30 - we're gonna do the HP pin slash console
112:32 - and we're gonna do make and we're gonna
112:34 - use so let's just do make so there's
112:36 - something if you do make like this it's
112:38 - gonna give you all the available
112:39 - commands within them that namespace so
112:42 - for example you're gonna see that we
112:43 - have make form let's go ahead and use
112:45 - that let's go make form and let's say to
112:48 - return key as you can see it's gonna ask
112:49 - you to install form applying data so
112:52 - let's go ahead and do that so we need
112:53 - the form component and the validation
112:55 - component but let's go ahead and start
112:58 - those just get a copy in place but
113:00 - alright so this is quite embarrassing
113:02 - for Symphony as you can see we have a
113:05 - bug in the latest version and this bug
113:09 - is not something that I didn't discover
113:11 - myself I'm not gonna open issue
113:12 - obviously somebody has already done that
113:15 - now as you can see the solution to this
113:17 - is to add this requirement to our
113:19 - component JSON right so let's go ahead
113:21 - and do it and see if it's going to work
113:22 - and where's my phpstorm
113:26 - so this is not something related to
113:27 - symphony should never get something like
113:29 - that so let's go ahead and do compose
113:31 - about JSON and by the way this is about
113:34 - probably gonna be fixed in like so
113:38 - so in the days ago so it's only been
113:40 - fixed or something I don't know let's go
113:43 - ahead and add that somewhere okay let's
113:49 - add that matter what I'm gonna do is I'm
113:52 - gonna do composer update see what's
113:55 - going to happen alright as you can see
114:00 - that takes a is absolutely working so
114:03 - thanks to this guy thanks to let's see
114:07 - so get more Oh Georgia Mirage close but
114:18 - yes so this is the beauty of the
114:19 - community of Symphony Waits
114:21 - it's working like twenty to twenty four
114:24 - seventy days or no 24/7 they are not
114:27 - even that means but they are working
114:29 - hard to fix every single problem in it
114:32 - was in your club so let's go ahead and
114:34 - move on with our life let's go ahead and
114:35 - refresh this as you can see it is
114:37 - working so what I was doing so just
114:41 - close this yeah so we were talking about
114:45 - forms now let's go back and let's do
114:47 - page P then it means there's console
114:50 - we're gonna deformed it lets to make
114:52 - form and let's click enter as you can
114:55 - see it's gonna ask me to install these
114:57 - stuff let's go ahead and do that once
115:02 - then is done we're gonna go back and
115:04 - we're gonna run the command again so
115:06 - let's go ahead and do make form as you
115:08 - can see it's gonna ask me for for the
115:10 - class that is going to be used so the
115:13 - name that is going to be used for that
115:15 - so one thing that you can do is so let's
115:18 - call this post-op course I'd like that
115:22 - enter and I say see is gonna ask you for
115:25 - the entity or the model class that is
115:28 - going to be a bit used to to bound to
115:30 - this wall so this one will be bound to
115:32 - some class and that class what is going
115:34 - to be is in our case we have posts let's
115:36 - go ahead and enter that post as you can
115:38 - see we have green so let's go ahead and
115:39 - take in slide it's our C form we have a
115:41 - form so let's go ahead and see that as
115:44 - you can see we have a new folder we
115:45 - gonna take a look at the post type and
115:47 - this is what is going to be within that
115:51 - so we have a bunch of stuff now as you
115:54 - can see the most important part at this
115:57 - point is the resolver which sets the
115:59 - defaults to their class which is post
116:02 - class it says that the data class for
116:04 - this is forum in steam post so it's
116:07 - going to be used up now as you can see
116:09 - it's already texted that I have this
116:11 - this title field to column in my entity
116:15 - so it's going to yet to be adding that
116:16 - in my builder so this is how you add
116:18 - fields to your form how do you saw you
116:22 - add inputs to your form you just have to
116:24 - build or add so let's go ahead and see
116:28 - how we can use this let's go back to our
116:30 - post controller and within our create so
116:33 - let's go we'll go back to create
116:35 - function as you can see we need to get
116:38 - rid of this and we need to have a form
116:39 - so how we can create the form is pretty
116:42 - easy now we need some some form so we
116:46 - need an route to display the form so
116:48 - let's go ahead and render form or under
116:52 - view
116:53 - I'm not each other I'm saying at this
116:55 - point let's go do return this random
116:59 - post and so it's and we're gonna need to
117:10 - pass some parameters so first let's go
117:12 - ahead and create the form so I'm gonna
117:14 - get rid of this and I'm gonna do before
117:18 - so I'm gonna do form equals I'm gonna
117:23 - call this and we have two options we
117:25 - have creates form and we have creates
117:28 - form builder now you want to create for
117:30 - create context one one or actually takes
117:34 - two parameters the first one is the form
117:36 - that you know that I want to use in my
117:38 - case is the ball strike which is within
117:41 - app form this namespace I'm going to
117:43 - enter and I'm going to class so I can
117:45 - press the whole qualifying namespace for
117:47 - that quest the second thing is the data
117:50 - or the object that this is going to be
117:53 - bound to so this post object is going to
117:55 - be filled with the data that is going to
117:57 - come from this ball
117:58 - once we submit so you can either pass
118:00 - null if you don't have any or you can
118:02 - use
118:03 - or the object that you have so we have
118:05 - post we're gonna use that now this is
118:08 - going to create a forum for us let's go
118:10 - ahead and pass that forum to you so as
118:13 - usual we gonna do that and we're gonna
118:15 - go form like that now this is not going
118:18 - to work as I manager in second but first
118:20 - let's go ahead and create this view so
118:22 - I'm gonna copy the name I'm gonna go to
118:24 - post create HTML and let's do the usual
118:29 - stuff let's extend it extends being
118:33 - based on HTML twig and let's go ahead
118:37 - and add okay so we have that now let's
118:53 - go ahead and blend it our form so
118:55 - rendering form is pretty easy all you
118:58 - have to do is call this called default
119:00 - function and pass it the name of the
119:02 - form so this is the name of the form
119:04 - that is coming from here let's go ahead
119:07 - and see what this is going to give us so
119:09 - let's go to our browser and let's say to
119:11 - be create or out as you can see we have
119:15 - some sort of an error so I just insert
119:18 - yeah that's because I've made a mistake
119:20 - so I need to get rid of this stuff
119:22 - because we shouldn't be inserting right
119:25 - now because we've done time in there so
119:27 - that's that's way let's go ahead and
119:29 - refresh this as you can see arguments
119:31 - want us to reform renderer and the block
119:33 - must be instance of all this stuff now
119:35 - this error seems vague and abstract you
119:38 - don't understand with this now basically
119:40 - what it means inside this we created a
119:43 - form but we want to create the view for
119:47 - the form so that we can pass it to our
119:48 - fueling users so what you need to do is
119:50 - on this value on this form variable that
119:53 - we have we need to called creates view
119:55 - and that is the going to create a view
119:57 - and that is going to create the form a
120:00 - proper form that is going to use as you
120:02 - can see we have that right here so a
120:05 - couple of things that we need so we have
120:07 - the title we need to submit button that
120:09 - we have two options you can either are
120:11 - the edits on the view right on the view
120:13 - right here or or you can add it on
120:17 - type itself so I like using I like
120:19 - sometimes items in the type of depends
120:21 - so what I'm gonna do is I'm just gonna
120:23 - call something I'm gonna add this one
120:25 - I'm gonna call it safe the first
120:28 - parameter is the name the second one is
120:29 - the type so type in this case is
120:32 - submitted
120:32 - it's like it's just type and the name
120:39 - space is inside symfony components form
120:41 - called type I know you can see but its
120:44 - core type so it's just gone show you
120:48 - that it's right here so it's symfony
120:51 - components for an extension called
120:53 - type submit' so that is the last thing
120:56 - that you wanna pass is some options that
120:58 - you can pass to your see you now it's an
121:01 - array of options now let me just show
121:03 - you what i mean i refresh this as you
121:05 - can see everything is now this is what
121:08 - we're going to do something in twig so
121:12 - into it we want to tell that our entire
121:14 - application is based on bootstrap so i
121:16 - want to whatever you see will form an
121:17 - input or something or a label i want you
121:19 - to use some bootstrap styling on that so
121:22 - it's pretty easy to use that so instead
121:24 - of just having to customize everything
121:26 - in us-born group form controller and
121:28 - everything symphony comes with a
121:30 - predefined thing if I go to my config in
121:34 - my packages in Twigg torciano you can
121:38 - see that I have some options one thing
121:41 - I'm gonna add is form team and I'm gonna
121:43 - ask you to use bootstrap underscore
121:51 - underscore lay out dot HTML to it just
121:59 - this now if I go back and refresh this
122:04 - as you can see big big change this into
122:08 - proper bootstrap and I didn't have to
122:10 - write a single line so that is working
122:12 - perfectly now let's say that I want to
122:13 - apply some some custom class or ID to
122:16 - this field writing so what you can do is
122:18 - you can go to the type so let's go back
122:20 - to the post type and in the third array
122:24 - or third parameter we're gonna pass an
122:26 - array and within the array we're gonna
122:28 - we are
122:28 - we're gonna add a key called attribute
122:30 - and that attribute is the attributes
122:32 - that you usually see on HTML so you just
122:35 - inspect this it's pretty small on re
122:40 - that can't see but as you can see the ID
122:43 - and the class and all that you can
122:45 - change those by using this attribute
122:48 - White's here so you can change those
122:49 - items let's say for example that I want
122:51 - to add a pull right to this class we can
122:54 - add right here so we can do that that's
122:56 - good class and we can do all right so
123:00 - it's kind of overwrite the existing
123:01 - class what I'm going to do is I'm going
123:03 - to be beating MDT and primary and I'm
123:06 - gonna do all right all right let's do
123:10 - that
123:10 - and it says all right
123:21 - it's probably something I've changed and
123:24 - moodstruck for Sun Studios and the
123:26 - recent excellent just sit back
123:41 - yep it has changed it's called float
123:44 - white today so I'm gonna do float right
123:48 - and as you can see it's gonna go and
123:50 - jump to that and dip so that's how you
123:52 - can add custom action goods to your
123:54 - field well let's say so we're gonna
123:57 - enter something I'm gonna do I'm gonna
124:05 - enter nothing is going to happen now
124:07 - this one isn't it's being submitted but
124:10 - we are not handling that so what we're
124:11 - gonna do is we're gonna go back to our
124:13 - controller box controller and we're
124:15 - going to handle this submission of the
124:17 - form now usually how you do that is
124:20 - really easy you want to have two
124:23 - requests right here so you need to have
124:25 - your request we're gonna do form we're
124:27 - gonna call handle requests just step on
124:30 - correctly we're gonna call handle the
124:32 - request which is going to handle a
124:33 - request for us and it's going to get all
124:35 - the specific values that are that I need
124:37 - and what we can do is we can check in
124:40 - form submit it the phone is submitted
124:46 - then I want to do some stuff that stuff
124:48 - would be I want to get the entity
124:50 - manager and I want to persist something
124:51 - too in database okay so fair enough we
124:54 - have that so if the phone is submitted
124:56 - let's see what we have and our post
124:59 - object okay so let's go ahead and add
125:03 - something let's do camp let's enter as
125:07 - you can see I'm gonna get the post with
125:09 - the ID no that's because it has not
125:12 - persisted the database yet but we get
125:14 - these items can now at this point I want
125:18 - to point something out there as you can
125:20 - see this dump is pretty ugly at the top
125:23 - and it's messing with your design one
125:24 - thing you can do is you can install this
125:26 - profiler
125:29 - and as you can see we have this web
125:33 - profile abundant let's go ahead and
125:35 - install that actually is unsolvable that
125:38 - seems pretty here so let's go ahead and
125:40 - do like usual composure require filer
125:43 - which is going to use simple flex to
125:45 - install these this bundle force
125:49 - all right so it's done as you can see
125:51 - and the profiler if I go back to I'm
125:53 - gonna go back to my application let's
125:55 - refresh
125:57 - yeah just resend it doesn't matter
125:59 - as you can see something has changed so
126:01 - we have this profiler bar at the bottom
126:03 - but I'm not really sure why it's much
126:05 - it's not displaying the dump at that
126:15 - plate so I was actually expecting to get
126:23 - this dump at the bottom so is it this
126:24 - one or did I make a mistake that I
126:27 - should I install this one I'm just going
126:29 - to try it or not by the way you can even
126:35 - use rec if you want to extend or
126:37 - required just use that you want to so it
126:40 - says that it's already installed the web
126:42 - profiler bonded so I'm not really sure
126:44 - if that is going to fix it yeah nothing
126:49 - to install or update it seems like we
126:50 - get it just gonna have to do with the
126:52 - ugly design but it usually should show
126:54 - you a bull's eye icon right here
126:56 - if you hover over that you're gonna get
126:58 - all the times that you've got it seems
126:59 - like it's not working right now so let's
127:01 - not bother with that so we have our form
127:05 - we have our post so what we need to do
127:07 - right now is just persist this to the
127:09 - database so let me just change that I do
127:13 - have two jars I'm gonna say and what we
127:19 - need to do right now is just put the
127:21 - code back so as you can see just gonna
127:23 - persist we have our entity manager we're
127:26 - gonna persist and flush them get rid of
127:27 - this message and what we want to do
127:30 - actually persist is we want to return
127:33 - obviously so let's return and that's
127:36 - redirect to somewhere out that route
127:40 - would be let's generate the work first
127:42 - that is going to be closed so if I go
127:51 - ahead and save this
127:52 - then it's safe as you can see it's going
127:54 - to be added free quad-cam and so
127:58 - everything at this point is working now
128:00 - everything is working I
128:02 - that's I think that's pretty much it for
128:05 - forum so this is the basic functionality
128:07 - of fun this is what you you need to know
128:09 - in order to make your first forum and
128:11 - make everything working now I think
128:13 - we're gonna move to so you can add some
128:15 - validation if you want to obviously I
128:16 - haven't spoken about validation yet so I
128:19 - haven't talked about it so you can add
128:20 - some validation inside your entity for
128:22 - example I go to this I can import I
128:25 - search so it's constraints make sure
128:27 - it's going to transfer its friends it's
128:32 - validation as assets this is what
128:34 - sinking it doesn't this is what I do I
128:36 - like this so I can assert but something
128:38 - is going to be of a certain type for
128:42 - example I do assert I can do not blank
128:47 - and not equal to not know and this is
128:50 - going to add some validation and once
128:52 - you have some validation so for example
128:54 - I do not blank if I add this one way to
128:58 - check if the form is valid or not is you
129:00 - can add inside our post controller when
129:03 - we check if the form is submitted you
129:05 - can do and look form to the second form
129:08 - Hispanic but the form is valid that you
129:11 - have then you can go do that it's not
129:13 - valid that you don't you know you can
129:15 - just stop and you can get the form
129:17 - errors but doing this for get errors and
129:21 - it's going to get you all the errors
129:22 - that you have in the database in case
129:24 - you want to display that to the user and
129:26 - we want that this is this field should
129:30 - be of this type and so God so you can
129:34 - play here so I'm just going to get rid
129:35 - of this as we don't like any validation
129:37 - right now but it's you know so that you
129:41 - know that we have validation insulin
129:43 - into now I would like to talk about
129:45 - something important which is security so
129:49 - we're gonna start talking about security
129:50 - before we move on to I want to get back
129:52 - to doctor and talk about some other
129:54 - stuff because that's like the most
129:56 - important thing which is entering
129:57 - database but first I want to talk about
129:59 - security so I want to add two things I
130:02 - want to add a login page
130:03 - and I want to add a registration page
130:05 - where we gonna create a new user with
130:07 - new users and in symphony for that's
130:10 - pretty easy so the first thing is we're
130:13 - gonna create a login page
130:15 - let's go ahead and do that I'm not
130:17 - really sure what I'm looking at the
130:19 - controller but we need to go to our
130:20 - console
130:21 - let's do experience - console and let's
130:25 - go let's just see what commands do we
130:27 - have so if I scroll to the bar to the
130:29 - top actually I'm looking for the Mega
130:31 - Man yeah it's right here you can see
130:33 - that we have make off now make art queer
130:36 - it's a god-awful indicator of of
130:38 - different flavors now I'm not sure even
130:41 - the first flavours means but it means
130:43 - that it's going to create something that
130:45 - is going to help me authenticate my
130:47 - users into the applications now we're
130:49 - going to notice that we have make off
130:51 - before you can make up use make up you
130:54 - will need to have a user entity our user
130:57 - entity is the user if the entity where
130:59 - all universes will be stored now if I
131:02 - just go ahead and try to run that
131:03 - command I'm going to make art you're
131:06 - going to see that it's going to ask me
131:07 - for the exterior components let's go
131:09 - ahead and install that
131:14 - all right so we have that can start
131:16 - let's go ahead and run the same command
131:18 - again PHP this much console make off I'm
131:20 - gonna hit enter as you can see it's
131:22 - gonna it's gonna tell me what style of
131:24 - autumn came to do you want we want to
131:26 - login for all you want something empty
131:28 - that you can customize later so I want
131:29 - to take the easy route and I'm gonna say
131:31 - that I want to login form Authenticator
131:33 - Sonos play:1
131:34 - it's gonna tell me the name of the
131:37 - authenticated close the Authenticator
131:39 - class that you want to hear just enter
131:41 - some them I'm gonna do I'm gonna enter
131:47 - and it's gonna ask me for the controller
131:50 - class so I'm just gonna do security
131:52 - controller and hit enter it's gonna ask
131:54 - me for the user class that you want to
131:56 - authenticate now at this point I have
131:58 - nothing and that's what I mean by to you
132:00 - but you need to have a user entity
132:03 - before we do that so one thing that
132:05 - comes with Symphony is by the way I
132:08 - pressed control see I just stopped
132:10 - everything that I was doing so what I'm
132:12 - gonna do now is gonna do HP dance watch
132:14 - console and I'm gonna do bake and I'm
132:18 - gonna do make user so that is going to
132:21 - help me so I'm not gonna make an entity
132:23 - and call it user so I'm gonna show you
132:24 - the difference when I do make user it's
132:27 - going to ask me for the security class
132:28 - obviously I want to know sir do you want
132:31 - to start using data in the database use
132:33 - induction yes I want to enter the party
132:36 - man there will be unique so in this case
132:38 - I'm just gonna do yeah let's go is your
132:41 - night good night
132:44 - and this up is going to hatch the user
132:47 - password yes it's going to ask that you
132:49 - go start me so it's just with it and as
132:52 - you can see if we have green now a
132:53 - couple of change a couple of things that
132:55 - has changed we have a new entity called
132:57 - user we have user to expend all stories
133:03 - first but we can be to that doctrine we
133:06 - have the entity those are updated
133:08 - because it changed some stuff and we
133:10 - have this configuration spirits about
133:11 - Gamma Phi that change let's go ahead and
133:14 - see what happens if you go back to our
133:17 - config packages you can see that we have
133:20 - security though jammin if I open that
133:21 - file up you can see that some stuff that
133:24 - was there that were added to it father
133:28 - to this while they were not cheering for
133:30 - so we have the encoders encoders as you
133:33 - can see is what is going to be use to
133:35 - hash your password now if I do make
133:37 - entity and call it user and just try you
133:41 - know create entity that way I still have
133:43 - to come back to this file and add all
133:45 - this stuff that I have right here but if
133:47 - I make but if I use make user it's going
133:50 - to add all this stuff is going to
133:51 - interactively ask you for this for this
133:54 - information is going to add it to
133:56 - security that you have applied and you
133:59 - don't even have to to worry about this
134:01 - so we have the encoders as I said this
134:04 - is the algorithm that is going to be
134:05 - used to hash your password into the
134:07 - database if you can use you can use our
134:10 - Guney like this or you can use P crypt
134:12 - if you want to use probably other stuff
134:14 - but I'm not gonna bother with that right
134:15 - now and we have the providers of the
134:17 - proprietors of course for the sake of
134:19 - the beginners course I'm gonna keep it
134:22 - simple if you only provide that that I
134:24 - have right now is the database so you
134:26 - can have an in-memory you can have an
134:28 - LDAP you can have whatever you want but
134:30 - basically I know that most of you are
134:32 - gonna be loading users from your
134:34 - database so we have this provider right
134:37 - here and the entity that is going to be
134:39 - used is the user entity and the property
134:41 - that we're going to use to actually call
134:43 - our to search for that user is the
134:45 - username now we gonna notice that we
134:47 - have firewalls so we have def which is
134:50 - something for the development
134:51 - environment it's gonna allow you to add
134:52 - some JSON that these are firewalls so we
134:56 - have main and as you can see it says
134:58 - anonymous chew which means anyone even
135:00 - is it it is it's not authenticated
135:02 - before because we don't have any
135:04 - authentication right now we're going to
135:05 - be allowed to access this now this is
135:08 - going to change in second as you can see
135:10 - the file structure is going to change
135:11 - now one thing is access control access
135:14 - control is where you want to set up some
135:15 - patterns for your website for example
135:17 - let's say that you have an admin
135:20 - dashboard that you want only the users
135:22 - with world admin to be active to be able
135:24 - to access you can do you can do that
135:26 - right here and the profile is something
135:29 - you know these are just Patton for
135:30 - example if I want to to deny access to
135:35 - my entire application if you are not
135:37 - authorized I can do that by just doing
135:39 - this using whatever comes at
135:41 - this needs to be needs to have a wrong
135:44 - user and an archetypal user you need to
135:47 - authenticate into the application now
135:49 - you don't even need to take a look at
135:51 - the entity of the user because it has
135:53 - some basic stuff like a username the
135:55 - roles that I was just talking about the
135:57 - password and that's it and of course the
135:59 - ID now let's go ahead and make our form
136:03 - so let's go ahead and do PHP then slash
136:06 - console to make I do that and press
136:10 - ENTER as you can see it's gonna ask me
136:12 - for the same stuff I want a lot
136:13 - important Authenticator so I'm gonna
136:15 - press R on the return key the name of
136:18 - the class of the Earth Medicare I'm
136:19 - gonna call it I'm gonna call it customer
136:24 - and the patron the controller class
136:27 - going to be sketchy controllers that's
136:29 - fine with me and as you can see it bits
136:31 - and stuff it created this customized
136:33 - Medicare with an hour security directory
136:35 - that was just created right now it's
136:37 - updated the file security about Yama we
136:39 - have a new controller created and we
136:41 - have a new template HTML twing so finish
136:46 - the redirect to do indeed yeah we're
136:48 - gonna do that in a second so let's go
136:52 - ahead and see what was creates for us so
136:54 - of course let's take a look on the
136:55 - structure as I said the security Dojima
136:58 - file has changed a little bit as you can
137:00 - see the guard that is going to be used
137:01 - right now is this one right here this is
137:04 - the automatic error that is going to be
137:06 - yours is the security custom
137:07 - Authenticator that we're gonna take a
137:08 - look at right now so let's go ahead and
137:11 - see that as you can see we have a new
137:12 - folder within our SRC they have a folder
137:15 - called security if I open that up you're
137:18 - gonna see that we have a bunch a bunch
137:20 - of stuff that you don't need to worry
137:22 - about but this stuff is working now the
137:25 - thing that I was telling that he was
137:26 - telling me to check to do right here is
137:29 - to change this on authentication success
137:32 - so basically what it's telling me to do
137:34 - is after the user the user successfully
137:37 - authenticated where do you want to send
137:39 - it where should I send you users where
137:41 - do I want to redirect for example when
137:42 - are we there in the user to is profile
137:44 - page or to the index page over to this
137:46 - dashboard or whatever so you can do that
137:48 - right here and I really got a problem
137:50 - with that so I'm just gonna leave it
137:52 - like that so let's go ahead and
137:55 - what's wrong was created for us let's
137:57 - new HP okay one more thing that I forgot
137:59 - obviously is the security in shorter and
138:01 - as you can see we have the login around
138:04 - to collect here the action so as you can
138:09 - see I'm not gonna go into details but
138:10 - this is the authentication notice that
138:12 - you can use to get the last
138:14 - authentication error and to get the
138:16 - username of the person that was trying
138:18 - to log in as you can see we pass that
138:20 - same data back to the to the route that
138:23 - was created to the view that was created
138:25 - for us which is security login partition
138:27 - other way and I want to take a look at
138:30 - the route that was created for us or
138:32 - logging so we're gonna do debug button
138:34 - from the console as you can see a latex
138:37 - and just a so as you can see a bunch of
138:41 - stuff was added for us this is specific
138:44 - so the profiler you don't have to worry
138:45 - about that but one thing that you're
138:47 - gonna notice is we have a new and a new
138:50 - route called our plugin with the name of
138:51 - our plug-in which is a super via /
138:54 - logging go ahead and see what that looks
138:55 - like so if I go to slash login as you
139:05 - can see we get a username and a password
139:07 - prompt so it's gonna ask us for that
139:09 - data so whatever I enter right now it's
139:11 - not going to work obviously because we
139:13 - have as you see it's gonna tell me that
139:15 - there was an error when it was trying to
139:18 - go to the database what we have to do
139:19 - and I forget to do is we need to migrate
139:22 - our new user entity to the database
139:24 - let's go ahead and do that absolutely
139:26 - experienced our console trend schema
139:30 - update and we can do dump sequel
139:33 - you're gonna notice that this is we're
139:35 - going to be executed it's going to
139:36 - create this table user let's go ahead
139:38 - and force that and as you can see one
139:41 - career took effect and one query was
139:43 - excluded - let's go back and I'm gonna
139:45 - go back to the page and I'm gonna enter
139:47 - a new set of credentials even though I'm
139:50 - not going to work I'm gonna excite end
139:52 - user name could not be found now as you
139:55 - can see form that's because I have an
139:58 - empty database now
139:59 - well my empty database but an empty user
140:02 - entity use of tables let's take a look
140:04 - this user is pretty much empty now I can
140:08 - go ahead and try to create something
140:10 - manually and all that but I'm gonna take
140:12 - this I'm gonna take advantage of this
140:14 - situation so I can create a register
140:17 - page so what I'm gonna do is I'm gonna
140:19 - create a new controller I'm gonna call
140:22 - it this HP pins much console and I'm
140:26 - gonna do make a controller
140:28 - I'm gonna call this register control
140:31 - actually the registration controller
140:33 - seems better relation controller so it
140:39 - seems like it created that what I'm
140:41 - gonna do is I'm gonna go back to my
140:42 - editor I'm gonna open up registration
140:45 - installer and I'm gonna create that
140:46 - function so I'm just gonna call this
140:49 - seems like it's a registration so I'm
140:52 - just kind of closed resistor at this
140:53 - point and this is going to be richest is
140:57 - not making sense
140:59 - I'm gonna get rid of this controller
141:01 - controller name variable and I'm gonna
141:04 - go ahead and start making a fun now this
141:06 - is what I'm gonna show you how you can
141:07 - make a form for your user
141:10 - losing the inside the controller now I
141:14 - actually don't recommend ever using this
141:16 - but I'm just gonna show you this just
141:18 - for the sake of the video so we can do
141:20 - form equal space create form builder and
141:27 - create form builder takes you know some
141:31 - data or we be taking it can take nothing
141:33 - so in this case I'm gonna what I'm gonna
141:36 - do is I'm gonna add some fields so the
141:40 - first field I'm gonna add is gonna be
141:41 - called username I'm gonna keep this
141:43 - pretty simple the second field I'm gonna
141:45 - add and by the way if you don't enter
141:48 - any type a second parameter type as a
141:51 - which is the type is going to default to
141:53 - a string to an input of type string you
141:58 - know thanks so the second thing we need
142:00 - is the password so I'm gonna do password
142:02 - like yes and I'm gonna go ahead and this
142:05 - is not going to be a password type as
142:07 - you see this is a password of course
142:10 - password type is going to work but we
142:12 - need to values of that so we're net we
142:15 - cannot actually just do password and
142:17 - then repeat password after that what we
142:19 - need to do is we need to use something
142:20 - called
142:24 - [Music]
142:26 - not today so I'm gonna use the rotate it
142:29 - type class and this one takes a couple
142:32 - of options that I actually don't
142:33 - remember so what we need to do is we
142:35 - need to actually go and check the
142:37 - documentation for that let's go ahead
142:39 - and go get that stuff up so it's true so
142:43 - I'm gonna do Symphony repeated pipe and
142:48 - that should be some so as you can see
142:54 - this is the type so we can specify a
142:57 - type which is going to be a password
142:58 - type so let's just copy that let's go
143:01 - back to our editor and let's paste
143:03 - that's right so we have the password
143:06 - type let's not forget to import the
143:07 - namespace I'm gonna import the class and
143:11 - you can yeah this is something that a
143:14 - lot of people behave in asking for so
143:17 - what we're gonna do is we're gonna add
143:18 - required to doesn't matter if you add it
143:20 - or not but we need the first option to
143:23 - have a level of password and the second
143:25 - is to repeat transfer will confirm
143:27 - possible so this is something that I've
143:29 - got a lot of questions about when I made
143:33 - some previous videos about this stuff
143:35 - but it seems like nobody has went to
143:38 - check the documentation so anyways yeah
143:40 - we have that now let's go ahead and send
143:42 - that form to to the actual do now before
143:47 - we do that this is a create form builder
143:49 - so this is form as it now is just a form
143:52 - builder to get the form out of that we
143:54 - need to do get form we need to call the
143:56 - get form after everything so get one at
143:59 - this point this is going to be a form
144:01 - but when you still need to call the
144:03 - create form create view on that we're
144:06 - gonna do form get fuel in order to be
144:10 - able to use that in the index or HTML
144:12 - HTML within our registration so let's go
144:15 - ahead and open that up I'm gonna get rid
144:18 - of actually I'm just gonna get rid of
144:20 - all this stuff let's do like we used to
144:25 - do
144:33 - and that's a walk and at this point I
144:39 - can just go ahead and do form form
144:42 - I've just spoken correctly so let's go
144:44 - the form form like that and let's go
144:46 - ahead and see what we missed
144:48 - so at this point what I'm gonna do I
144:51 - still had to actually you know handle
144:53 - the farm and everything but I just want
144:55 - to see this stuff working so what I'm
144:58 - gonna do is I'm gonna go to my register
145:00 - as you can see I have a username and a
145:02 - password confirm password I still never
145:04 - fun so I'm gonna go ahead and create
145:06 - that I'm gonna add its doors let's cut
145:13 - let's cut bricks this is going to be a
145:18 - submit type and dad and we wanna do we
145:23 - wanna pass some options yeah let's do
145:25 - that just for the sake that says so as I
145:29 - said you can pass some attributes I want
145:31 - to change the class to be an array and I
145:36 - can change the class by doing something
145:38 - like that so BTN BTN primary and I can
145:42 - say okay I want this to be success that
145:53 - we have our resistant button so if we
145:55 - try to do something nothing is going to
145:57 - happen obviously because we still need
146:00 - to handle bugs that's good form and
146:04 - that's hand with a request and we don't
146:06 - have any weaker so let's go ahead and
146:08 - inject that our their search function so
146:10 - is to request I forget to enjoy the name
146:13 - space so HTTP foundation request let's
146:17 - go ahead and press this flags here and
146:20 - as usual we need to handle the form we
146:24 - need to check is submit it so if it's
146:28 - submitted if the font type is the same
146:32 - post then we want to do some stuff stuff
146:35 - like a good is we want to get a so we
146:39 - need to do this get doctrine a skit
146:43 - manager
146:44 - and we want to do entitymanager we want
146:47 - to persist some user that we're gonna
146:49 - create in second so we're gonna go
146:51 - persist and we're gonna create to do
146:54 - second about that so I'm gonna do it
146:57 - flush so what do we want where we are
147:01 - where are we going to get this user from
147:02 - now this is not going to be mapped to
147:05 - any form of class to any entity that we
147:08 - have because nothing have password and
147:10 - and you know I repeat right so we're
147:14 - gonna do is we're gonna actually I want
147:16 - to show you how you can get the data
147:17 - from the request and on the phone so
147:19 - let's go ahead and do user user like
147:24 - that the namespace is entity and that's
147:28 - dump the user so I'm not going to dump
147:30 - the user actually I wanted a before and
147:32 - there's something because you can use to
147:34 - get some data from the form to use is
147:37 - data equals form get there for a spot so
147:45 - dads can see what we have submitted data
147:48 - so as you can see we're gonna enter some
147:51 - user names and passwords and password
147:53 - I'm gonna register as you can see I'm
147:54 - gonna get an array of username and
147:56 - password now the username is not hatched
147:59 - or whatever so simplex is trying to
148:02 - insert yeah so this doesn't matter so
148:06 - what I'm gonna do is I'm gonna take the
148:08 - username and I'm gonna tell you the
148:09 - password but the password needs to be
148:11 - hatched so the password needs to be
148:13 - equipped and report it encoded or
148:15 - created or hatch whatever you want to
148:16 - call it before it's persistent into the
148:18 - database so what we're gonna do is we're
148:20 - gonna call something that is going to
148:24 - help us do that and that then is the
148:26 - password
148:27 - encoder so it's actually user password
148:30 - recovery professor face and passport and
148:35 - cold now by the way this is why you
148:38 - might be wondering why how does this
148:40 - thing work this is called auto warrant
148:42 - and it uses dependency injection it
148:45 - knows that you are asking for this so
148:47 - it's going to inject it to a function so
148:49 - that you can use it so that's a simple
148:51 - thing now as I said we need to actually
148:55 - go ahead and save ink
148:58 - the peso before can send it to the user
149:00 - now how do we do that so we have access
149:02 - to the user name and the password from
149:05 - the data it's just an array as you can
149:07 - see so what I'm gonna do first is I'm
149:09 - gonna do I'm just gonna leave that I'm
149:12 - going to change that to use it so what
149:15 - I'm gonna do is I'm gonna be user and
149:16 - I'm gonna set he gives her name so I'm
149:20 - gonna set the username to the data and
149:22 - then I'm gonna try to use a man combat
149:24 - the second thing is deep password so
149:26 - what I'm gonna do is I'm gonna do set
149:27 - password and as I said I need to encode
149:30 - the peso before I can use it so what I'm
149:32 - gonna do is I'm gonna call the password
149:35 - encode their interface and I'm gonna
149:43 - call the encode password on that and as
149:46 - you can see that takes two functions to
149:49 - function that takes two parameters the
149:51 - first one is the user that you are
149:52 - trying to hash I had that right here so
149:56 - I'm going to pass that the second thing
149:58 - is the plain text plain text password
150:02 - that you are trying to hash or encode so
150:04 - what we're gonna do is we're gonna call
150:05 - data I'm gonna get the password for that
150:08 - and that's pretty much all we need to do
150:12 - to be able to hash the user now I'm
150:14 - going to put one small die I'm not gonna
150:16 - die I'm just gonna you know what let's
150:19 - actually use it's just three there right
150:22 - to the login page without any messages
150:24 - but now that we know how to use that so
150:26 - let's go to this either red and this is
150:29 - going to take us to be and that is going
150:44 - to take us to me page right after we
150:47 - dump right after the new user so let's
150:50 - go ahead and see if that is going to
150:51 - work so I'm gonna go back to the rear so
150:53 - tooth page I'm gonna create a user name
150:55 - with the name pass with a name admin I'm
150:58 - gonna call the I'm gonna and at least
151:03 - you six
151:05 - and I'm gonna enjoy sister so as you can
151:09 - see it's I'm a login page and let's see
151:12 - if we have a UID user so I'm gonna
151:13 - browse it seems like I have a new user I
151:16 - don't have any rods right now that's
151:17 - something that we're gonna I'm gonna
151:19 - discuss in a second but you can see we
151:21 - have some password right here it's it's
151:23 - it's a password but there's not much 6
151:26 - zeros that I entered that's what gets
151:27 - hashed now let's go ahead and try to
151:29 - access to log into our application so
151:32 - I'm gonna do six zeros and I'm gonna hit
151:35 - sign in as you can see I am sonicated
151:37 - anonymously so logged in as anon so I'm
151:41 - gonna excite in and as you can see I
151:43 - need to provide a redirect inside its
151:46 - function now this is not an actual error
151:47 - this is just something that I was
151:49 - talking about that I forget to do like
151:51 - it's asking me to handle this right here
151:53 - so we can do something we can like I
151:56 - don't know you can do whatever you want
151:58 - I'm not gonna bother with this right now
152:00 - you can redirect if you want to so let's
152:01 - see if Murray died right so is the
152:03 - constructor do we have a you are
152:05 - generator interface yeah since that we
152:08 - have that so we can use that but do we
152:11 - have any redirects that would steal it
152:16 - stuck we don't have let's just write
152:18 - that so I'm gonna do return you redirect
152:21 - response now this needs to be with our
152:23 - work response it's just something that
152:25 - in yours for my response so we're gonna
152:28 - use that and we need to generate a URL
152:30 - so for example it seems like we already
152:32 - have that I just see it so let's go
152:34 - ahead and steal this and though where do
152:38 - we want to go index right after we do
152:43 - that so I'm gonna refresh as you can see
152:45 - I'm going to resend and it's going to
152:46 - redirect me to that let's go ahead now
152:48 - and see what we have right here as you
152:50 - can see I'm logged in as an admin I'm no
152:53 - longer nobody I'm an admin you know a
152:56 - user I'm authentic Aidid through this
152:59 - firewall which has the name bang now we
153:01 - have done most of the stuff now one
153:03 - thing that I want to do before we end up
153:05 - with security stuff now I'm not going to
153:06 - talk about obviously I'm not gonna talk
153:08 - about security a lot because that's a
153:10 - fast and a very big topic so what I'm
153:12 - gonna do is I'm gonna keep it really
153:13 - simple we have a login page we have we
153:17 - have a registration page what I wanted
153:18 - is when deny access to some places so
153:21 - what you can do as you can see we don't
153:22 - have anywhere and we can tap a logout
153:25 - URL anywhere so what I want to do it is
153:29 - let's go ahead and I'm going to show you
153:30 - that in the button patients will go in
153:36 - for all right I finally found it is
153:40 - inside this security page on this
153:43 - Anthony talks as you can see logging out
153:45 - is pretty simple
153:45 - all you have to do is put this under the
153:47 - main firewall that you have log out and
153:49 - the path is going to be back so yeah of
153:52 - course you have to create that box so
153:58 - let me just go ahead go back to the
153:59 - security go to M file and under the
154:02 - firewall I'm gonna do this after that
154:06 - I'm gonna put the log out right here and
154:08 - is invitation as you can see it says log
154:12 - out now this name is not exist yet so
154:15 - what I'm gonna do is I'm going to go to
154:16 - security thought security controller and
154:19 - I'm gonna create that right - so I'm
154:21 - gonna do a public function log out and
154:25 - this does not take anything and it give
154:27 - me empty nobody's going to care about
154:30 - that so I'm gonna do that and I'm gonna
154:34 - call this out and it's change this to
154:38 - log out to match the name that we just
154:40 - injured what yeah so if I go back to my
154:43 - tournament and I try to debug the router
154:45 - as you can see I have a logout route
154:47 - right here and what I can do right now
154:49 - is I can go back to my layout for
154:53 - example based on HTML tweak now one
154:55 - thing that you're going to notice them
154:58 - just hate when I start doing this so
155:01 - let's just go and do this first make you
155:04 - float right here right let's try so we
155:11 - gonna generate a URL so this must not
155:13 - have and grantors but we gonna do
155:23 - [Music]
155:26 - without gout let's go ahead and refresh
155:29 - our page and see what we're gonna get as
155:32 - we see we have a logout right here now
155:34 - if I go back to my profiler as you can
155:35 - see it right after I add that log out
155:38 - log out controller or action I'm gonna
155:42 - see that I way like that we have access
155:44 - to that so we can either click on this
155:46 - or that now as you can see I still have
155:50 - access if I go back to post slash index
155:53 - I still have access to this
155:54 - I want to deny access since I don't want
155:56 - the user to be authenticated I want to
155:58 - use it to me plugged in learner to be
156:00 - able to see this page so what we gonna
156:02 - do is we're gonna go back to our
156:03 - security go Tiamo and we're gonna start
156:05 - taking advantage of the access control
156:07 - now what we're gonna do is we need to
156:10 - set up two things that the first thing
156:12 - is the login page so the login page
156:14 - needs to be accessed by people who are
156:16 - not authenticated so what you need to do
156:18 - is roles need to change that to ace or
156:22 - client to gated anonymously right so the
156:29 - login page you don't have to be logged
156:31 - in to be able to log in so there's not
156:34 - making sense so you have to set this
156:36 - before actually set in the wild card now
156:40 - this is the this is very important this
156:42 - will not work that's this will work okay
156:47 - so pay attention to me order of the
156:49 - tuning patterns so let's go ahead and
156:52 - see if that is going to work so I am not
156:54 - logged in as you can see I am anonymous
156:55 - they logged in so I'm gonna refresh this
156:57 - as you can see it's gonna take me to the
157:00 - login page it's gonna ask you to sign in
157:01 - let's go ahead and sign in and as you
157:09 - can see I am NOT authenticated and I can
157:11 - see my page so I can do whatever I want
157:13 - right now and this is going to be a
157:15 - title so it seems like that is almost
157:20 - yeah let's do one more thing so okay so
157:24 - that means
157:28 - so we can do one more thing so within
157:31 - our application let's say that evenly so
157:35 - let's say that the login page as we see
157:38 - the login page has access to this log
157:40 - out now this logout actually makes no
157:42 - sense why do i why can I log out tonight
157:44 - I will be loved up to this let's add
157:47 - inside our basically HTML condition that
157:51 - is going to check if the user is logged
157:53 - in or not before we can actually display
157:55 - it so let's go to our base dot HTML or
157:59 - twig and where's that based on Easter
158:06 - number 20 and they log out we don't want
158:09 - to do this unless we are not logged in
158:11 - so there are a couple of ways that you
158:13 - can check if you're all locked in so
158:14 - let's go back and see some of the stuff
158:16 - in the documentation so as you can see
158:21 - you can check if the user is granted
158:23 - using that so and we have something
158:28 - indoor is granted in the template so for
158:31 - example if you want to check the road of
158:34 - the user so you can do that so just copy
158:36 - that line basically this is going to
158:44 - check if the user is an admin oh if it's
158:47 - a user it's not going to display this
158:48 - but that's not what I want I want to
158:50 - check if the user is logged in so what I
158:52 - can do is check if the user is
158:54 - authenticated but anonymously but fully
158:58 - the user is fully authenticated then I
159:01 - want to display this bug this bug out
159:03 - front let's go ahead and see if that is
159:05 - going to work so on that log then as you
159:08 - see I'm anonymously locked then I have
159:09 - log out so I'm going to refresh as you
159:12 - can see it's gone so let's go ahead and
159:14 - see if it is going to be there when I
159:16 - log in what stance as you can see I have
159:22 - log out and that is working perfectly
159:24 - fine so that is what I want oh that's
159:26 - what I wanted to cover basically for
159:28 - security that now one more thing I'm
159:31 - gonna do before I move on actually not
159:34 - yes so that's basically all I wanted to
159:36 - cover security at this point what we
159:39 - gonna do right now is I want
159:40 - back to doctrine and induction I want to
159:43 - explain some stuff so basically as I
159:45 - said our post has absolutely nothing
159:48 - right now except for a title and nothing
159:51 - else so what I'm gonna do is I'm gonna
159:53 - actually I want to actually change that
159:54 - too so I want each each post to have an
159:58 - image related to it so what we gonna do
160:01 - maybe a category as well so what we're
160:03 - gonna do is I'm gonna show you how you
160:04 - can add an image and then we're gonna
160:06 - discuss how we can actually we're gonna
160:08 - create a relationship so this is
160:11 - something that is quite related to file
160:13 - uploads which is a common topic between
160:15 - everybody wants images because why not
160:18 - so what we're gonna do is we're going to
160:20 - change our stuff a little bit so we're
160:22 - gonna change our entity so what we're
160:24 - going to do is we're going to go and add
160:25 - to our poster page P we're gonna add the
160:28 - image that we are trying to access but
160:30 - we are trying to upload so we need to
160:32 - save that somewhere now in our database
160:34 - we're not gonna save the actual image
160:35 - we're just gonna save the path to the
160:37 - image we want to say that so what we're
160:41 - gonna do is we're gonna call this image
160:43 - like that I'm gonna give it a couple of
160:45 - stuff I want this to be an hour and
160:48 - column is going to be that column is
160:52 - going to be of type string the length is
160:56 - going to be and that's all I need to do
161:02 - now as I said each popteen is together
161:04 - in a setting so what I need to do now is
161:07 - I need to create together since Eric now
161:10 - I can go ahead and create and create
161:12 - them manually but let's say that I just
161:13 - created ten new properties what you want
161:17 - to do is you want to take advantage of
161:18 - the console again so if I do catch creep
161:20 - bin slash console and I do make entity
161:24 - like this link entity if I add the flag
161:27 - regenerate after that it's going to go
161:30 - through all these and try to regenerate
161:32 - anything is you know if anything is
161:36 - missing as you can see it's kinda askew
161:38 - from the namespace to regenerate I want
161:40 - to generate to regenerate all the
161:41 - entities what it's going to do is going
161:44 - to leave the ones that are not touched
161:46 - untouched so it's not gonna touch
161:48 - anything very small support to touch but
161:50 - it's going to update whatever it needs
161:52 - so if I go
161:53 - to post the page we are gonna see the
161:54 - image now has and get in a set and so we
161:58 - have some answers for that now let's go
162:01 - ahead and see how we can actually handle
162:03 - the file upload now before we do that we
162:05 - need to go back to our form
162:06 - so our post form and we need to add
162:08 - something that is going to upload the
162:10 - file for us we need a field where we can
162:12 - select the file that we're trying to
162:13 - upload so we're gonna do is we're gonna
162:15 - add an image and that image is notice
162:20 - how the same name that I have liked here
162:22 - is the same that I have liked here but
162:25 - I'm not gonna use that actually as I
162:28 - said this is going to be a 5-time so
162:30 - fine which is inside the same symfony
162:37 - component form extensions core site and
162:40 - I'm gonna do a class and after that so
162:43 - let me just show you one thing so if I
162:46 - just leave it like like this and I go
162:48 - back slash create
162:53 - it's post / as we see I'm gonna get the
163:01 - image and everything is working fine but
163:03 - if I change the name so let's say that
163:04 - this is one kind of attachment instead
163:09 - of image if I do that you gotta get that
163:11 - these are the attachment model property
163:13 - Martin method get attachment attachment
163:16 - is attachment whatever is inside this so
163:20 - you might you might actually want to be
163:23 - something like this where you have a
163:24 - different name in your phone than the
163:27 - one that you might use in your entity so
163:31 - what you want to do in that case is you
163:33 - want to tell it that this field right
163:34 - here is not related to anything in the
163:37 - database or entity so what you want to
163:39 - do is you wanna pass in the array and we
163:42 - need that you gonna pass back through
163:44 - cause actually I'm not really sure if
163:47 - it's mapped or multiply and I'm gonna
163:50 - try that
163:55 - oh that's and as you can see it is
164:02 - working its map set to false and it's
164:04 - working because this is not going to do
164:06 - persist this attachment here there's not
164:08 - going to be vs. anywhere or led to our
164:10 - entity so we can select a file and do
164:13 - whatever but it's not going to work now
164:20 - that's showing anything so what we need
164:24 - to do right now is we need to go back to
164:25 - our controller in handedly file upload
164:27 - so let's go back to our host controller
164:30 - and within this we have some stuff so
164:32 - let's go in what I want to do is I wanna
164:34 - dump got the form but I want to dump the
164:37 - request I want to check the fly so
164:40 - inside the request we have a files
164:41 - property back or an array that is going
164:44 - to be filled with pies that are sent
164:45 - from the client so that's what I want to
164:48 - take a look at I'm gonna enter something
164:50 - and I'm gonna choose some five I'm gonna
164:54 - hit save and as you can see I'm gonna
164:57 - get a file bag so do not worry about
164:59 - this the image still needs value you
165:01 - know that in second as you can see the
165:04 - file back around to his post
165:06 - this is the form and see within that
165:09 - uniform actually this so within that we
165:13 - have the attachment which is the file
165:15 - that we are looking for so what we're
165:17 - going to do to get access to that is
165:18 - from files we need to do get get what
165:22 - same name that we used absolutely find
165:25 - the post type we need to get the same
165:28 - name that we use right here so we're
165:30 - gonna get attachment and I'm gonna so
165:33 - I'm gonna save that in a five save mr.
165:36 - space type in and what I want to do is I
165:41 - want to check if I have a fight before I
165:43 - uploaded okay
165:45 - now if I have a fight if the user
165:47 - actually sent a file while I run it who
165:48 - the case I want to save that fight
165:50 - somewhere now before you can save that
165:52 - fight we actually need a fine name for
165:54 - that now I cannot just I can just go
165:56 - ahead and use the same file name that
165:58 - the user sent but that is what we gonna
166:00 - cause some problems and conflict it to
166:02 - images have the same at the same name so
166:05 - what I'm gonna do is I'm actually gonna
166:06 - generate a unique file name for each of
166:08 - my five so what I'm gonna do is I'm
166:10 - gonna create this particle this variable
166:12 - called fine name and I'm gonna use chem
166:14 - d5 and I'm gonna combine it with unique
166:16 - ID to generate some some unique fine
166:20 - name for my for my phone I'm gonna
166:22 - concatenate this with something which is
166:24 - the extension so this is going to be the
166:26 - fine name plus the extension so what I'm
166:28 - gonna do is I'm gonna call five and I'm
166:30 - gonna go get so it seems like one thing
166:34 - about datastore is that it can help you
166:36 - if you add the proper types to the five
166:40 - other comments so I can do uploaded five
166:44 - that is going to give me some functions
166:47 - it gets client extension which I'm gonna
166:49 - use to get the line extension now we
166:52 - have a fine name what we need to do next
166:54 - is we need to actually move this file to
166:56 - somewhere so it's not being safe
166:58 - anywhere so what I want to do is I want
167:00 - to save this inside my public folder
167:02 - which is the public which is the folder
167:05 - that is publicly access to anyone that
167:08 - is visiting my site so what I'm gonna do
167:10 - is I'm gonna actually each group it is
167:12 - five I need to know this file somewhere
167:15 - so I'm gonna call the move and the move
167:17 - takes two parameters the fur
167:19 - as you're gonna see is the directory
167:20 - where I want to move the file and the
167:23 - second thing is the fine name
167:24 - so this economy we're gonna do it this
167:26 - is to move the second thing is going to
167:33 - be the file name so we need to give it a
167:36 - fine name
167:38 - Thanks now how do we get a target their
167:41 - target directory now we can just go
167:43 - ahead and hard code this way too if you
167:44 - want to but I'm not really a big fan of
167:47 - that's what I'm gonna do is I'm gonna go
167:48 - back to my config files
167:51 - I'm gonna look for framework or Tiamo
167:53 - and as you can see ya services go teamö
167:59 - we have some parameters that you can be
168:01 - fine you have this local which is Center
168:03 - relates translation which is not
168:05 - something we're gonna cover in this
168:06 - video but we we can create our own so
168:10 - what I'm gonna do is I'm gonna create
168:11 - someone called uploads directory and
168:14 - this can take what everybody you want to
168:18 - give now what I'm gonna do is I'm gonna
168:20 - tell it to give me the project directory
168:23 - that I'm currently can and I want you to
168:25 - concatenate that with public slash
168:28 - uploads and this means that all my files
168:31 - that my uploads are going to be stored
168:33 - in the public folder in the uploads to
168:36 - me that I just mentioned watch here so
168:38 - what I'm gonna do is I'm gonna go back
168:39 - to my post controller and I need some
168:41 - way to get that value and of course
168:44 - there is a way to get that value what
168:46 - I'm gonna do is since I mean inside the
168:48 - controller I can do this kids
168:50 - parameter like just and I can give it
168:55 - the name and the name needs to be the
168:57 - same as the one that I use right here so
168:59 - I'm gonna do that space yeah
169:06 - that's pretty much all we need to do to
169:08 - move the file now we move the file we
169:10 - need to do one more thing we need to
169:11 - actually persist we need to actually set
169:14 - a file name to our database so that
169:16 - would be safe so what we're gonna do is
169:18 - we're gonna do post sit image and we're
169:23 - gonna do final and we have access to
169:25 - that right wait so what we're gonna do
169:28 - next is it seems like this is going to
169:35 - work so you know what the best way to
169:37 - check if this is going to work it is by
169:39 - actually trying it so let's go ahead and
169:40 - get rid of all this done but I have it
169:45 - sounds like I have nothing so listen you
169:47 - just go back right here what I'm gonna
169:50 - do is I'm gonna do post with image and
169:54 - the attachment we gonna select is just
169:57 - some let's let's do this I'm gonna hit
170:00 - save and as you can see it's it's
170:04 - telling me that exception and no so it
170:16 - said that it does not know what an image
170:18 - piece that's because I once again forgot
170:21 - to migrate my changes to the database so
170:23 - let's go to HB bin slash console and
170:26 - that's without trend schema updates
170:29 - forest I'm not going to dump because I
170:31 - know it's going to do as you can see one
170:33 - query was executed so I'm gonna go back
170:35 - what I'm gonna do is I'm gonna hit ctrl
170:37 - R and I'm gonna reset all the data that
170:39 - I just sent and I have the same error so
170:44 - it's a better image cannot you know made
170:47 - a mistake somewhere so just think about
170:49 - this for a second I'm gonna try to move
170:54 - these probably it's not even going into
170:57 - this condition right here so I'm gonna
170:58 - do is I'm gonna do that and I'm gonna
171:00 - just resend again just so it seems like
171:03 - we don't have a file so what I'm gonna
171:05 - do is I'm going to be done
171:07 - yeah that's obviously whatever I messed
171:09 - this up so what I need to do is I
171:11 - actually need to get post and post is an
171:14 - array and I need to get the attached I
171:16 - believe so so let's just go ahead
171:18 - that is going to work so let's go back
171:21 - to connect and let's do the attachment
171:32 - is going to be somewhere in nature save
171:39 - and it did something so it did something
171:43 - we have something let's go ahead and see
171:44 - if the file is uploaded just by in so
171:48 - where's the public folder it seems like
171:50 - it's created a new uploads by artery and
171:52 - within that we have the finder which is
171:54 - ask now it's working properly let's take
171:57 - a look at the database in our post as
172:03 - you can see we have the image file name
172:05 - right here so how do we display that so
172:07 - what we're gonna do is inside here
172:09 - actually not here so when we try to view
172:13 - an image when we shown in when we show
172:15 - up close I want to display the image as
172:17 - well so let's go ahead and do that now
172:20 - we don't need to change anything in our
172:21 - controllers whatsoever what we need to
172:23 - do is we need to go to our templates in
172:25 - the post show because we already have
172:28 - two access to the post what we're gonna
172:29 - do is we're gonna add the image and we
172:31 - want to put SRC right here so if I do
172:34 - just close the image I'm gonna see it's
172:37 - not going to give us anything because if
172:40 - I take a look at this it's gonna give me
172:42 - so I'm sorry for the relatively small
172:46 - text as you can see I have an image but
172:52 - this is not the correct directory that I
172:55 - need I need to get that from the slash
172:57 - uploads slash finally so how to do that
173:01 - we can concatenate right here by doing
173:03 - something like this so we're gonna go up
173:05 - loads slash and I'm gonna use slash why
173:10 - not and I'm gonna concatenate this using
173:13 - the - alright tilt or I think Chris is
173:16 - up tilt just going to concatenate these
173:18 - to it for me so I'm gonna go back and
173:20 - refresh as you can see I'm gonna get my
173:22 - image so this is how we can get image
173:25 - now I want to create a category for each
173:28 - post how do we do that it's very easy
173:30 - what we're gonna do is we're gonna
173:32 - create an entity so we're gonna start
173:34 - talking about relationships right now
173:35 - we're gonna go and cover the most basic
173:38 - relationship that you can imagine and
173:40 - you can actually go ahead and you know
173:43 - you can start experimenting with that if
173:46 - you want to do something more complicate
173:47 - so what we're gonna do as I said we're
173:49 - gonna use categories for each of our
173:51 - popes so we're going to do it is we're
173:52 - gonna do generator MTT it's gonna become
173:54 - category so let's go Pippin /
173:56 - console and make an engine and we're
174:00 - gonna call this category obviously so
174:02 - let's go category and we want to add
174:04 - some prompts which the first one is
174:06 - going to be I don't know it's gonna be
174:08 - name yeah let's just do name and let's
174:11 - just keep it name for now and that's all
174:13 - we're gonna need as you can see we have
174:16 - category dot PHP and we have HP how can
174:20 - we create the relationship between those
174:22 - now each now the relationship that we're
174:26 - gonna create is gonna be called a many
174:28 - to one and a one to many relationship
174:30 - now each one of our posts have one
174:34 - category belongs to one category and
174:36 - categories has many Popes so each
174:38 - category can belong to many pots so
174:40 - let's just add look like the
174:43 - relationship that we're gonna create is
174:45 - obviously we're gonna need to create a
174:47 - private key because we need a property
174:49 - for this we're gonna call this so we we
174:52 - are inside the post of PHP so we're
174:54 - gonna create the category relationship
174:56 - first category and this is where things
174:59 - is changing a little bit so we're not
175:01 - gonna use column like this what we're
175:03 - gonna do gonna do power M and we're
175:05 - gonna do the type of relationship one so
175:08 - we said each each one of our posts has
175:12 - so many posts I have one category in
175:15 - category 1 category has many posts so
175:18 - let's do is can be 1 in 20 to 1 and it
175:24 - takes two main important things the
175:26 - first one is the target target entity
175:28 - the target entity where is the one that
175:31 - we are trying to make the relationship
175:33 - with in our case is the category that
175:38 - the second parameter is gonna be mapped
175:42 - or inversed by now one thing very simple
175:45 - too
175:46 - keep in mind if you like this is
175:50 - inversed by and Matt why you want to
175:53 - invert you want to use inverse Y on the
175:56 - table that is going to be holding the
175:58 - foreign key okay just remember it this
176:00 - way if you cannot make sense of n
176:02 - inverse by is going to be you should use
176:06 - inverse by on the entity that is going
176:08 - to be holding the foreign key now in our
176:11 - case the table that is going to be hard
176:14 - to be holding the foreign key to the
176:16 - category is obviously the post so what
176:17 - we're going to do is we're going to go
176:18 - in first god I just sped inverse quite
176:23 - correctly the inverse by we're gonna do
176:27 - by category now this category that we
176:30 - have right actually not category post
176:33 - get that post
176:35 - so this pole this post that we created
176:37 - right here is gonna be something that we
176:39 - would create it's a property like this
176:41 - are we gonna create in our category of
176:43 - HP so let's go ahead and do that just
176:46 - like the other class we need to create
176:49 - post relationships so we're gonna create
176:52 - a property which is going to which is
176:55 - the relationship between which is going
176:57 - to relate to the post no Chuck Sarah
177:00 - just to our m and we're gonna do one too
177:05 - many so one category belongs to can be
177:08 - on many many just thank you for the
177:11 - target entity would be the post and is
177:15 - going to be mapped by because the
177:17 - foreign key would be on the other term
177:19 - so we gotta do its category we're gonna
177:25 - hit enter and as you can see we need so
177:28 - this this is the basic stuff that you
177:30 - need to generate a basic basic basic
177:33 - relationship when we need to do right
177:35 - now is to generate some post some
177:37 - getters and setters for outpost
177:39 - and for our category properties we just
177:42 - created so you can go ahead and do it by
177:44 - hand if you want to but I'm not gonna
177:46 - bother I'm gonna do
177:47 - ohpa bin slash console I'm gonna use the
177:49 - make command you can make entity make
177:53 - entity and I'm gonna regenerate and as
177:57 - you can
177:58 - is going to generate some stuff so I'm
178:00 - gonna put Center doesn't see it updated
178:02 - welcome eyeglasses brought post and
178:04 - category and type that just created the
178:10 - amount of getters and setters that we
178:13 - just created for category is going to be
178:15 - much different and a lot as you can see
178:17 - it's going to be adding posts to an
178:19 - array and the great collection that we
178:21 - have right here and it's going to be
178:24 - removing that as well from that so
178:26 - that's how you set up a really basic
178:27 - relationship now let's go ahead and see
178:29 - what is going to happen if I just try to
178:31 - create some way to create nothing is
178:35 - changing but I want to have a field
178:37 - writing that is going to allow me to
178:39 - select which category is almost belongs
178:41 - to what we're going to do is we're gonna
178:43 - go back to our for post type and we're
178:48 - gonna add a key like to you so we're
178:50 - gonna add a field not a key it's going
178:53 - to be called now I'm gonna put this as
178:54 - the namespace as I'm gonna use the same
179:02 - name that I used for in my post of the
179:06 - HP which is category so let's go ahead
179:08 - and do that so I'm gonna name this
179:09 - category now this is the part that is
179:13 - going to be different we can have been
179:14 - using an entity type
179:15 - let's show let's see what that looks
179:18 - like so we're going to be using integer
179:19 - please pay attention to the name space
179:30 - and if we do it for a just like this
179:35 - it's not going to work obviously is kind
179:36 - of throw an error it's gonna tell you
179:38 - that we need a class option which is
179:41 - missing so we need to pass the array of
179:45 - options and we need to specify the class
179:47 - and the class in this case would be I
179:49 - want you to vote all the categories that
179:51 - I that you have in my database into this
179:53 - place so what we're gonna do is we're
179:55 - gonna go ahead and go category yes and
179:58 - it's from the entity namespace and we're
180:01 - going to go to class and we're gonna go
180:02 - ahead and refresh
180:04 - as you're gonna see it's it's not going
180:09 - to work obviously because once again and
180:11 - once more I forgot to actually migrate
180:13 - everything to the database so let's go
180:17 - ahead and do that against HP like a
180:20 - nutmeg but doctrine schema updates for
180:22 - us I'm gonna enter as you can see for
180:24 - created queries were executed this time
180:26 - so if i refresh this as you can see I
180:30 - get a list of categories which is empty
180:32 - right now so what I'm gonna do is I'm
180:33 - gonna jump to my database I'm gonna just
180:35 - go ahead and create something so I'm
180:41 - just gonna go ahead and add like two
180:44 - useless queries or categories that we
180:47 - just just for the sake of demonstration
180:48 - insert something it's called this close
180:51 - and death so close they're two things
180:55 - that are related and we have those so
181:00 - what we're gonna do right now let's go
181:01 - ahead and see if this is going to be
181:03 - filled okay so we have an error and
181:06 - that's because like we actually have
181:09 - some data now what what I was trying to
181:12 - do is it was trying to access the list
181:16 - that it was trying to generate it it was
181:19 - generated that it was generating this
181:22 - list right here this drop-down based on
181:24 - the category the category itself is just
181:27 - an object and it does not know how to
181:29 - render an object as text so what we need
181:32 - to do is we need to go to a category two
181:34 - PHP and we need to implement a magic
181:37 - function called two string which is
181:41 - going to be called whenever the actual
181:44 - code does not know how to turn your
181:46 - object into a string and basically what
181:49 - we want to put in this case Israel we
181:51 - just want to return the name of the
181:53 - category so it's what we're gonna do is
181:54 - this and get me to make like that so
181:58 - let's go ahead and refresh and that is
182:00 - going hopefully you come to solve our
182:02 - problem so as you can see if i refresh
182:04 - that i'm gonna get two categories right
182:07 - here now let's go ahead and try to
182:09 - create something that's cool
182:11 - you thanks
182:18 - put some image yeah let's just see what
182:21 - that doesn't matter just close this and
182:23 - let's hit say and as you can see
182:26 - something happened so this is a new
182:28 - category I'm gonna go out as you can see
182:31 - I go back to my post you're gonna notice
182:35 - that I have a categorical one so how do
182:37 - we display the category again let's go
182:39 - back to our show function to display
182:41 - that so I'm gonna go to post show the
182:44 - HTML and that's so we already have
182:47 - access to that so what I'm gonna do is
182:48 - I'm gonna make this p.m. and I'm gonna
182:51 - do post doc category if I do post doc
182:55 - category is coming to work that's
182:58 - because okay this is messed up but this
183:00 - matter this this is the category that we
183:07 - just have and it does know how to render
183:09 - an object into a string because we just
183:11 - implemented that function but we still
183:14 - have access to the entire object for
183:16 - example if I want to get the ID of the
183:18 - category I can do post doc category
183:20 - don't IP that is going to give me the ID
183:23 - of one which which I can use me to
183:26 - generate some URL if I want to or
183:28 - something else so that's probably gonna
183:31 - cover this part of the application which
183:35 - is relationships now one thing that I
183:38 - want to do let's say for example that I
183:39 - want a single query that is going to
183:41 - generate some mention all right but it's
183:44 - going to get me everything that I need
183:46 - for example the title the category on a
183:49 - single object for example in this case
183:53 - as you can see I have to go all stock
183:55 - title I have to go post of category
183:57 - thoughts I need to get the ID what if I
184:00 - want to use something that is going to
184:01 - give me the title in the post ID without
184:05 - having to go through because this could
184:08 - get really messy if you have like really
184:10 - complicated relationships so what we're
184:12 - gonna do in this case is we now go ahead
184:14 - and take a look at the repository so the
184:17 - repository that I was avoiding since the
184:18 - beginning is just something so each
184:20 - entity in your your application has a
184:23 - real poster and within that repository
184:25 - what you can do is you can create custom
184:27 - queries and custom functions that you
184:29 - can use to pair things
184:31 - for example in our case category
184:33 - positive positive positive what I want
184:35 - to do is I want to create a new function
184:37 - now you have access to defined all and
184:40 - all that because we are extending some
184:43 - stuff but you can actually as you can
184:46 - see right here we have the font file on
184:47 - blank file I'll find by but we actually
184:52 - can make our own so let's go ahead and
184:53 - create something we can do a public
184:55 - function and then let's do find by
185:00 - custom just to show you that's fine so
185:06 - fine by something that's called
185:09 - customers right now and this is you know
185:15 - what the skull it's fine but I find most
185:19 - with category and just and I'm gonna
185:26 - pass this an end which is going to be
185:28 - the idea of the post so what I'm gonna
185:30 - do is I'm gonna actually use the query
185:33 - builder in this case now what I'm going
185:35 - to do is I need to create a query bit
185:39 - this creates query builder we need to
185:42 - give it an alias and that alias will be
185:44 - in a string and in my case since I'm
185:47 - using post I'm gonna use P okay what I'm
185:52 - gonna do next is that's it for this what
185:55 - I'm gonna do next is I need to query
185:58 - builder and add just I'm gonna select so
186:03 - what do I want to select I wanna select
186:05 - a couple of stuff first I want to select
186:08 - the title so how do I select the title
186:11 - I'm gonna do P dot right which is going
186:14 - to give me it's like now I'm gonna keep
186:16 - this pretty simple I'm gonna leave it
186:18 - like this and one more thing that I have
186:20 - to do because I have to add a where
186:22 - clause because I want to search the deep
186:25 - I what I'm gonna do obviously is I'm
186:27 - just gonna go ahead and do where like
186:30 - this and it's going to take P dot V and
186:34 - I can just use even P if I want to but
186:38 - I'm gonna see it second and the second
186:44 - parameter
186:45 - what we kind of you know what this needs
186:49 - to match or actually I think we can just
186:51 - do something like this so I think we can
186:53 - just go ahead and do the ID like that
186:57 - and then we can go ahead and set the
187:00 - parameter so maybe we can go sit down
187:02 - sir sit around and we can give it the ID
187:08 - so for example um use an idea right here
187:10 - I can give it the key is my key and the
187:13 - value is ID right there just come to be
187:15 - pass from here now let's return
187:19 - something we're gonna return the query
187:21 - builder but we are not gonna return the
187:22 - creative adorable that's because it's a
187:24 - query with it's not a results or
187:25 - something what we're gonna do is we
187:27 - gonna call it query which is going to
187:29 - get the query first and then from that
187:32 - you want to get result and that's how
187:35 - you get actually results from that and
187:37 - not just one called each one in the
187:39 - query window so let's go ahead and see
187:41 - if this is going to work I'm gonna go
187:44 - back to my show is that's what I'm gonna
187:46 - experiment the most so let's go to our
187:48 - host controller and I will show action
187:51 - I'll show Dad what I'm gonna do is I'm
187:56 - gonna get rid of this and I'm gonna put
187:58 - back my and eat that's because I'm lazy
188:00 - and in all that so what I'm gonna do it
188:02 - is post story and I want to add I want
188:06 - to have access to foster now let's
188:10 - riposte equal the post repository story
188:16 - I want to find fine post with category
188:20 - but so I have access to that function
188:21 - that I just created
188:23 - it's going to ask me for some ID which I
188:25 - have right here I'm just gonna press
188:26 - that that and I think we are ready to
188:31 - dump this post and see what we're gonna
188:33 - get so let's go ahead and refresh this
188:36 - page all right so we have an array as
188:43 - you can see right here title as you can
188:45 - see the data right now is it tightly is
188:48 - in the rain it's no longer post that's
188:50 - because I'm returning some cast now
188:53 - let's go back to our find post and this
188:55 - month as we said we want a category so
188:58 - how do we return
188:59 - the first thing we need to do is we need
189:02 - to add a select now we need access to
189:05 - not just do can you don't category like
189:08 - this I mean it's not going to as you can
189:12 - see it's gonna get an invalid expression
189:14 - what we need to do is we need to join
189:16 - both classes and then you can access
189:18 - that property in how to do that it's
189:20 - pretty easy but you got good it was
189:21 - inner join and from the Peapod category
189:25 - and this is pretty amazing about
189:28 - something I like this Peter category we
189:30 - need to give an alias to the class that
189:32 - we're gonna use it's gonna be so
189:36 - category it's going to be C and this is
189:38 - all we have to do right now so what we
189:40 - can do is just go ahead and do C
189:43 - thoughts category although them because
189:46 - inside the category we have then if I go
189:49 - ahead and research this but you can see
189:52 - I'm gonna get an array of two values
189:53 - first one is going to be new first one
189:56 - is going to be title of the post and
189:58 - then we're gonna get the name of the
190:00 - category right there and we can even get
190:02 - other stuff so for example I can select
190:05 - and I can get the seed of a new to the
190:08 - category deep and I can even get the
190:11 - post or lightly add select we can add
190:20 - Peapod ID and that is going to give me
190:26 - the ID as you see now we have a problem
190:30 - you're gonna notice that we have the
190:31 - title yeah he's just one for the X for
190:34 - both the category I eat in the Box deep
190:37 - and it's going to only get me one
190:39 - because it's gonna get confused as you
190:41 - can see this is the eighth eighth quote
190:43 - so it's giving me just one just
190:45 - accountable for the ID now what you want
190:47 - to do in this case we want to give them
190:49 - some aliases and add select stuff and as
190:53 - in add select what I want to do is I'm
190:56 - gonna give this an alias so this is
190:57 - going to be pass up title I'd be like
191:01 - that and the category is going to be as
191:06 - categoryid so I'm just good cat I think
191:08 - at some place and as you can see all
191:12 - right it's not gonna have any problems
191:14 - the title I this is not because I did it
191:17 - is basically post ID somebody probably
191:20 - was screaming at the screen while I was
191:22 - screaming at something that it's matter
191:25 - so we have titled post aidid and them
191:28 - and the category hit me so that's how
191:30 - you can create a custom query builder
191:32 - and that's what the repository is for
191:34 - now obviously I'm not gonna be using
191:36 - that because it's it's gonna require me
191:39 - to change my view and I don't want to do
191:42 - that because I'm place so what I'm gonna
191:46 - do is I'm just gonna keep everything as
191:48 - Ross and that's how you can use now I
191:52 - want to talk about one more thing before
191:53 - I and this and that is going to be
191:56 - services services are something that
191:58 - you're going to be hearing a lot when
192:01 - you're dealing with center and basically
192:02 - everything in Symphony is a service for
192:05 - example this is a service so if you
192:08 - remember from the password so where's
192:10 - the registration controller as you can
192:16 - see this is a service that we just you
192:18 - to encode the password a service is just
192:21 - some class that you're gonna create and
192:23 - you're gonna call somewhere to have to
192:24 - do something now as I said Symphony is
192:26 - full of services everything inside
192:29 - Symphony is a service and all these
192:31 - services that within saintly lives
192:33 - inside something called in the container
192:36 - and the container is just a big massive
192:39 - object of basket of objects that contain
192:41 - whatever you're gonna need you can
192:43 - actually go ahead and take a look of the
192:45 - all these services that you have inside
192:47 - Symphony by doing constant and do a
192:52 - debug chain if I do that in just hit
192:57 - enter I'm gonna get a very long list of
193:00 - all the available services inside my
193:02 - application as you can see this is
193:04 - extremely extremely long so I'm not even
193:08 - gonna try to go to today just try and I
193:11 - fail I succeeded action so what we gonna
193:14 - do actually is we're just gonna go ahead
193:16 - and try to create our service but why
193:19 - would you try to
193:20 - even create service how how is that even
193:22 - helpful now as you can see in this case
193:24 - this is a really simple example that
193:26 - just creates a post and uploads an image
193:28 - and as you're gonna see it gets pretty
193:31 - messy for example we are not chicken if
193:33 - the chicken but I'm not chicken if the
193:35 - user already has an image we are not
193:39 - trying to remove the old image for
193:42 - example from this to save some space on
193:43 - the server we are just uploading the the
193:47 - actual image so what we're gonna do is
193:49 - we're gonna try to refactor this and
193:51 - we're gonna try to put everything into a
193:52 - service as I said don't like this
193:55 - service the concept confuse you it's
193:57 - just a class as you're gonna see we're
193:59 - gonna create a folder I'm gonna call it
194:01 - service because that's where it's going
194:03 - to cool it was going to contain and I'm
194:06 - gonna go ahead and do create a file and
194:08 - I'm gonna call this file uploader so in
194:12 - my case I just created a service that is
194:13 - going to be caused by upload them and
194:15 - this file uploader is basically it's
194:17 - just going to install upload some files
194:20 - for me now I'm gonna give it a name
194:22 - space it's gotta be app services and the
194:26 - class is just gonna be five o'clock it's
194:30 - not going to extend anything as I said
194:32 - is just a very basic simple class that
194:35 - you can use what we're gonna do is we
194:38 - gonna create so another we're gonna make
194:40 - a function actually creates function
194:42 - we're gonna call it upload file and this
194:46 - file and this upload file is going to
194:48 - get rid of all the junk that we have
194:50 - right here is just going to give me a
194:53 - file name that I'm gonna set right here
194:55 - and I'm gonna be done I'm gonna gain
194:58 - some you know I'm gonna get in some
194:59 - lines about three lines or something so
195:03 - upload file needs to have a file base
195:05 - with an app code so that first you know
195:07 - what let's just take these lines that
195:09 - we're trying to get rid of let's go
195:10 - ahead and paste them here as you can see
195:13 - we have some errors everything is is red
195:17 - the first thing we need to do to pass
195:19 - through this file upload upload file is
195:21 - the file that well we are actually
195:22 - trying to upload that is going to be a
195:24 - type uploaded file so we're gonna call
195:28 - this file which is going to get rid of
195:30 - the two red lines that we have right
195:32 - here
195:33 - the second thing is that you're going to
195:34 - notice is we have this get parameter
195:37 - which is not defined in this class so
195:40 - what we're going to do is we need to
195:42 - inject something in our controller in
195:45 - this class and the way to do that is by
195:48 - using a construct controller and to what
195:51 - we going to need to pass there is
195:53 - probably the container sorry for the
195:55 - wheel cut as I said we need the
195:57 - container right here so what we're gonna
195:59 - do is this get hunter is getting this
196:02 - from the container so what we're gonna
196:03 - do is and this is something that a lot
196:05 - of people are probably gonna be hating
196:06 - me for but I'm gonna include the
196:09 - container interface right here so I'm
196:11 - gonna do trainer and I'm gonna
196:13 - initialize this field because I'm using
196:14 - pitch the storm is coming to initialize
196:16 - this for me now I can just access the
196:19 - container while doing this container and
196:21 - then get actually you know what it's not
196:24 - the attendant arrows alright it seems
196:27 - like it's the right one so I'm gonna go
196:32 - and I'm gonna do container games or
196:37 - something and I'm not really sure if
196:42 - this is going to work what I'm gonna see
196:43 - in a second if this is the correct
196:45 - interface dear correct container that I
196:47 - can check right here as I said he is
196:49 - going to eight that is yeah so we have
196:55 - that now what I want to return from this
196:57 - is the file name that I just generates
197:00 - it right here because I want to I'm
197:01 - gonna be reusing it to save it to the
197:03 - database I'm gonna do we're gonna do a
197:05 - return to file name that now we can go
197:09 - to our post controller and immediately
197:11 - find it how do we get access to that
197:13 - function that we just created we have
197:15 - two things first you can use dependency
197:17 - injection or wiring of course now auto
197:20 - wiring is just something even a notice I
197:23 - just created this class and Symphony is
197:25 - gonna is going to know how to
197:26 - instantiate it I included the container
197:29 - interface in it and is going to know
197:31 - that it's going through me that that it
197:33 - is going to provide that for it let me
197:36 - show you that in action
197:37 - it's pretty amazing it's to file folder
197:41 - like that let's give it a name and let's
197:44 - use it we're just gonna do five closer
197:49 - and we're gonna upload the file now
197:52 - which file be doing an upload is the one
197:55 - that we have right here let's that's
197:56 - that and as I said this upload file
198:01 - function is going to return a file name
198:04 - so we can just reuse that so what we're
198:07 - gonna do is I'm gonna save that
198:08 - somewhere so I'm going to find name like
198:10 - that and as you can see we have we found
198:12 - we add less lines now let's go ahead and
198:16 - see if this is going to actually work or
198:19 - is it's just mess I'm going to try to
198:22 - create a new post I'm gonna give it
198:26 - almost good service and I'm gonna give
198:29 - it an attachment and this image is
198:35 - probably too big I'm not sure if it's
198:36 - going to work and actually it works so
198:39 - let's go to a post with surface as you
198:41 - can see I get the same results by using
198:44 - a surface now as I said this is going
198:47 - symphony is going to know that my my
198:49 - service exists and it's going to use
198:52 - that and it's going to check if this
198:56 - needs anything it's going to inject
198:58 - whatever it needs is going to provide
198:59 - whatever this service needs to that that
199:03 - is auto wiring of course an auto wiring
199:05 - could be configured inside surfaces dot
199:07 - young so this file right here is where
199:10 - the magic happens I didn't see our
199:12 - wiring is set to true and as the Commons
199:14 - is set self-explanatory in says it
199:17 - automatically injects dependencies in
199:19 - your services and the auto compare it
199:21 - automatically restore your services as
199:24 - commands and subscribers now I'm
199:26 - probably gonna end the video right here
199:28 - right after I talk about services but
199:31 - because I feel like all the event stuff
199:34 - and subscribers and all that advanced
199:36 - stuff not for beginners complete
199:38 - beginners but there's plenty of
199:40 - resources that you can check if you want
199:41 - to get more information about that now
199:44 - one more thing that I want to mention
199:46 - about this is if you don't have our
199:48 - wiring it's set to true or false
199:51 - you're gonna have to explicitly
199:53 - configure your
199:54 - now at this point you you are just that
199:58 - you gotta be good if you just sit all
199:59 - the way into - I've been using it and
200:02 - there's no problems with that but
200:05 - sometimes you're gonna need to pass some
200:07 - some some custom stuff to your to your
200:10 - services for example let's say that we
200:13 - have an e bat let's suppose we have a
200:14 - service that sends an email and we want
200:16 - to pass something to that an email that
200:19 - is going to be in the environment part -
200:21 - that how we can do that is pretty simple
200:24 - all you have to do is come right here
200:26 - now this is in the case if we have
200:28 - already set to false it's not the case
200:30 - and one what we're going to do is we're
200:32 - going to do app services and find
200:36 - uploader
200:36 - and we're gonna give it so it can it be
200:39 - either this this is so in our case in
200:45 - our case if I go back to the container
200:48 - and I try to debug so one one thing that
200:51 - you can do is you can just include some
200:52 - some some world in our case we have file
200:58 - uploader so if I do that so if I do
201:01 - people file up it's going to give me the
201:04 - service that I have it's kind of tell me
201:06 - that the service ID is being same as the
201:08 - class that's because I didn't provide
201:10 - anything and the class is this one and
201:12 - it's going to say if it's public it is
201:14 - shared in our shared and also wired and
201:17 - all that so is that you yes that's why
201:19 - Symphony knows how to use it let me go
201:23 - back to my service and try to explicitly
201:25 - use my you know my service so I can give
201:31 - it a name so a service ID I can give it
201:33 - something custom service ID like this I
201:35 - can change this one I want for example
201:37 - to custom now what I need to do I need
201:43 - to give it a class the class yeah it's
201:56 - file uploader is working that's fine and
202:00 - the second thing so this is a class
202:02 - obviously if I go ahead and try to you
202:04 - know search for file upload
202:06 - I'm gonna get
202:07 - it seems like it's not registering this
202:09 - stuff
202:11 - I was actually expecting to get glue
202:19 - just see if I can search or custom file
202:24 - and yes indeed I had that so I have the
202:28 - custom file uploader but I just told
202:30 - them that I just created that doesn't
202:35 - matter so I have access to that and I
202:40 - can even set Ottawa to fault if I want
202:42 - to I'm never gonna do that I'm just
202:44 - trying to show something but if I want
202:46 - to pass some some renters to or
202:49 - arguments to my function what I had to
202:51 - do to my service what I have to do is I
202:52 - have to argument that and I need to pass
202:56 - whatever functions you know whatever it
202:58 - whatever I need or example if you want
203:01 - to pass just a regular string that is
203:02 - going to be taken in the service
203:05 - no one let's go ahead and create a new
203:07 - service I'm gonna straight all this
203:09 - stuff time it's called sin okay class
203:19 - let's go let's give it a name space it's
203:22 - gonna be abscess and the class is going
203:25 - to be obviously this and let's create a
203:31 - new public function and I'm gonna call
203:33 - this patient doesn't matter I'm gonna do
203:42 - it anyways now we're gonna create our
203:45 - controller so and then ensure that our
203:47 - constructor so it's too public
203:51 - and as I said I want to pass the email
203:55 - that it's going to be used right here so
203:57 - I can do that so yeah let's just come to
204:01 - me so I can do that that and let's
204:05 - initialize this value right here not
204:09 - need to do that but what I'm gonna do is
204:12 - I'm gonna run this email and I'm just
204:16 - gonna die right away
204:17 - so how do we pass the email to this as I
204:20 - said this is how
204:22 - to do it so what I'm gonna do is I'm
204:23 - gonna do up services as I said you could
204:27 - either create a custom name or you can
204:29 - just pass the class directly onto it's
204:31 - going to know about it so multiplication
204:36 - and we gonna pass some arguments so
204:40 - arguments like that example like this so
204:48 - let's go email and admin like that and
204:54 - let's go ahead and see so we need to
204:57 - call back somewhere so I'm just gonna
204:59 - call it in by post in trouble I'm just
205:00 - gonna do occasion yeah let's go ahead
205:08 - and refresh this page you all get again
205:11 - we've done
205:14 - that's create I need to go too late and
205:18 - as you can see I successfully passed
205:21 - that that value now a couple of more
205:26 - things let's say that you want you don't
205:28 - want to hard-code this each time one
205:30 - thing you can do is you can create a
205:31 - parameter called for example email admin
205:34 - email and you can have if you want to
205:43 - use this parameter right here by the
205:45 - value by the key which can do it here's
205:48 - the percent symbol and you can do email
205:52 - or whatever so if I do that I'm gonna
205:58 - get the same thing
205:59 - okay that gets it all right so I'm
206:01 - checking the documentation it seems like
206:03 - I don't even need to
206:16 - I'm forgetting about everything
206:17 - something is so big that it not unless
206:22 - you are working that simple myself so
206:24 - the story is go into the solving yeah
206:27 - that's what I need to do I need to fix
206:29 - that now this is how you can pass like a
206:34 - string so I can even have like a you
206:36 - know a regular string show you both ways
206:38 - now let's say that I want to pass some
206:40 - arguments on some other service so let's
206:48 - say that I need the fight uploaders so
206:57 - let's go ahead and see what we can get
207:00 - in this we're going to refresh this page
207:04 - and see it does know my file upload it's
207:09 - gonna know that because I said otherwise
207:11 - it's true and all I need to say right
207:13 - here is in my services Hammond is the
207:16 - man so that's pretty much it that's how
207:19 - that's what I believe is the beginner's
207:22 - guide into symphony for that's what I
207:25 - think you need to get started now
207:27 - there's a lot and plenty of other stuff
207:29 - that you need to be looking at for
207:30 - example the event and you need to learn
207:32 - Ambassador you can create services about
207:35 - that we have listeners we have we have
207:39 - some doctrine we have some custom types
207:41 - that you can create we have custom
207:42 - annotations there's plenty of plenty and
207:45 - plenty of stuff that you can do but
207:47 - that's gonna be it for this thank you
207:48 - guys for watching if you have any
207:50 - questions please don't hesitate to
207:52 - contact me or leave them down below and
207:54 - I will do my best to a needs help so
207:59 - thank you guys for watching all I'll
208:01 - leave you two