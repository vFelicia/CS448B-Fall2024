00:02 - hey everyone i'm cody cyber and welcome
00:03 - to a full stack tutorial on how to build
00:06 - a web application using vue.js for the
00:08 - front end express node.js for the
00:11 - backend and then mysql for the database
00:13 - or sqlite as we do it development
00:15 - locally
00:16 - and before i get started on this
00:18 - tutorial i want to say that this
00:19 - tutorial
00:21 - might be a little bit in the
00:22 - intermediate advanced level but if you
00:25 - are a beginner i'm going to try to
00:27 - talk through everything i do and repeat
00:31 - actions you know often so that you can
00:33 - kind of bake it into your head of how
00:34 - you build a full stack application
00:37 - so hopefully you know first time through
00:39 - if you're a beginner it might be
00:40 - confusing second time through you might
00:41 - pick up on key things third time through
00:44 - everything might make sense to you
00:47 - but without further ado let's go ahead
00:48 - and get started so hit an overview of
00:49 - what vgs is it's a front-end library
00:52 - which is used for building single-page
00:53 - applications and i'm on the vjs website
00:55 - right now so if i go ahead and click on
00:57 - get started here it navigates us to
00:59 - their documentation which i believe is
01:00 - some of the best docs i've read for a
01:02 - library or framework
01:04 - in the past i've worked with angular 1
01:06 - i've worked a little bit with angular 2
01:08 - and i've worked some with react now i
01:10 - want to say i'm an expert in angular 2
01:11 - or react
01:12 - but nor am i an expert in vjs but out of
01:15 - those you know the three hip new
01:16 - frameworks that are out i do think
01:18 - vue.js has the most potential just
01:20 - because the way they have it set up and
01:22 - their docs and it's very easy to pick up
01:25 - and hit the ground running with vue.js
01:27 - so
01:27 - if you like react you know stick with
01:29 - react but i hope you take some
01:32 - some key components away from this
01:33 - tutorial
01:35 - because vue.gs kind of mixes both the
01:37 - best
01:38 - practices from angular 2 and react so
01:40 - you'll see a lot of the same paradigms
01:43 - in vue.js which i think is good for
01:44 - beginner because it allows you to easily
01:46 - transition to other frameworks in the
01:48 - future
01:49 - so
01:51 - for the back end we're going to be using
01:52 - express.js which is a very
01:55 - bare-bones framework that can be used
01:56 - for building restful apis built on top
01:59 - of the node.js runtime environment
02:03 - and there's a couple of other frameworks
02:05 - out there like sales.js
02:07 - js cola js and i haven't
02:09 - used anything other than sales at work
02:11 - um i personally like express because
02:13 - it's super bare bones and if you're
02:15 - trying to start off learning about web
02:17 - applications and how rest api works i
02:20 - think starting with some of those bigger
02:21 - frameworks or libraries is going to
02:23 - leave you a little bit confused there's
02:24 - a lot of like magical generation and
02:27 - hooks and whatnot going on so for this
02:30 - tutorial we're going to start with
02:31 - express and just kind of walk you
02:32 - through how to
02:33 - create a restful api that connects to a
02:35 - mysql database to store certain things
02:39 - so that kind of wraps up the overview
02:40 - let's go ahead and start building out a
02:43 - project and i'll go ahead and talk about
02:45 - what i'm going to be building in this
02:46 - tutorial
02:50 - all right so i'm going to start off
02:51 - showing you a
02:52 - pre-built application which we're going
02:54 - to rebuild and try to work our way
02:56 - towards
02:58 - which i created over my spare time so
02:59 - basically i've created an app called a
03:02 - tab tracker
03:03 - which we can use to track
03:06 - guitar tabs right so there's a couple of
03:07 - other sites out there like ultimate
03:09 - guitar tabs or whatever.com
03:11 - but i wanted to try to replicate that in
03:13 - something that's a little bit more user
03:14 - friendly and easier to use
03:16 - so
03:17 - the app we're going to build in this
03:18 - tutorial is going to look like this we
03:20 - have
03:21 - a main page which if you click browse
03:23 - here it takes you to the songs url
03:26 - and what this page has is if you're
03:28 - logged in already which i am over here
03:30 - i'm already logged in
03:32 - and i'll just go ahead and lock out just
03:33 - to kind of demonstrate that so if you
03:35 - are not logged in the browse tab allows
03:38 - you to search through songs so if i want
03:39 - to type in let's say
03:41 - reliant k for an artist it'll filter
03:44 - search the backend for that artist if i
03:46 - search for a genre it'll show up if i
03:48 - search for like country my other song
03:50 - will show up
03:53 - so basically the functionality is here
03:55 - we have this little panel which allows
03:56 - us to search through songs
03:58 - we have the songs displayed down here if
04:00 - you were to click on let's say one of
04:02 - the names or genres it go ahead it
04:04 - updates our filter here
04:06 - and also updates the url query string
04:09 - now if i were to click
04:10 - view it takes us into the song in which
04:12 - we have a link to a youtube video where
04:14 - we can listen to the song
04:16 - it has again that basic information
04:18 - it has some tabs over here so i can
04:21 - easily go through
04:22 - and you know play through or try to
04:24 - learn the song and guitar and then also
04:25 - on the right we have some lyrics so
04:27 - super straightforward and basic
04:29 - application
04:31 - now if i were to log in
04:33 - go here login has my password and
04:35 - information saved
04:37 - we get a little bit more um
04:38 - functionality so on the left we have our
04:40 - recently viewed so anytime you click
04:41 - view into one of these we're going to
04:44 - keep track of what you viewed before so
04:45 - you can easily just go to songs that you
04:47 - viewed in the past
04:49 - and then also we have a section down
04:50 - here called bookmark song so if i were
04:52 - to go into let's say getting into you
04:55 - and say bookmark
04:56 - it'll bookmark this song for my user
04:58 - accounts now if i were to go back to the
05:00 - browse tab i have that song bookmarked
05:02 - over here and again i can go back and
05:04 - view that
05:05 - um
05:06 - we can also since i am the owner or the
05:08 - one who posted this song i can go in and
05:10 - edit this song so we have our own little
05:12 - edit song panel or view around which we
05:15 - can edit the typical metadata that you
05:17 - have on a song such as the title artist
05:19 - genre album we can
05:21 - put a link to the album image and we can
05:23 - also put a youtube id which is used for
05:26 - displaying that embedded youtube video
05:27 - and then of course on the right we have
05:28 - our lyrics and our intro
05:32 - um and then we have an about page
05:35 - nothing special go back to browse and
05:37 - then lastly we have the ability to add
05:39 - new songs over to click on this plus
05:41 - arrow over here we are given a create
05:44 - song route where we can enter in those
05:46 - same metadata information
05:48 - and you know it'll print out red if you
05:50 - don't have it filled in because these
05:52 - are all required fields and once you
05:54 - have those set up you can click create
05:56 - and it will
05:57 - create the song for you and in this
05:58 - instance we can't because we haven't
06:00 - filled out all the fields
06:01 - so that is an overview of what we're
06:03 - trying to
06:04 - build very very simple it's like a very
06:08 - bare bones web application but it's
06:09 - still enough functionality to i think
06:11 - get you past the stages of being an
06:13 - intermediate or from being a beginner
06:16 - and transitioning into an intermediate
06:17 - developer like we're going to build all
06:19 - this from scratch
06:21 - starting with a bear get repo which i'll
06:23 - actually build in this tutorial so let's
06:25 - go ahead and get started trying to build
06:27 - out this exact same functionality
06:31 - all right so starting off i have my
06:33 - github account right here so i'm going
06:35 - to go ahead go ahead and just click on
06:36 - repositories i want to create a new
06:39 - repository and i'll name this one tab
06:42 - tracker
06:43 - and then this will be public i'll make
06:45 - it mit so anyone can just grab it and do
06:47 - what they want with it and description
06:49 - will say
06:50 - a view
06:52 - vue.js expressjs web application
06:57 - for keeping track
06:59 - of guitar tabs
07:01 - so now if i click create repository
07:03 - github will create that tab tracker
07:05 - project for me and in this instance we
07:07 - can click clone or download i'll go
07:09 - ahead and copy this link
07:11 - and remember that you can change it to
07:13 - https if you don't have
07:15 - ssl set up on your machine
07:18 - i'm not going to cover up how to set
07:20 - that up but if you try to clone it with
07:23 - this ssh and it doesn't work go ahead
07:24 - and switch it to https and try it that
07:26 - way but anyway i'm going to go ahead and
07:28 - copy this link and i'm going to go to my
07:31 - console and say
07:33 - git clone and paste that url and that
07:35 - will go ahead and download that git repo
07:37 - project and put it inside my workspace
07:39 - folder so now i can go ahead and go into
07:41 - our cd which is change directory into
07:45 - tab tracker
07:46 - and right now i have a folder
07:49 - at my workspace location called tab
07:50 - tracker which has absolutely nothing in
07:52 - it except for a license
07:57 - cool
07:58 - so now
07:59 - if we go back we can go ahead and open
08:01 - up our visual studios code editor which
08:04 - i'm going to open up that same folder
08:06 - which we just cloned so i'll go to
08:07 - workspace i'll go to tab tracker
08:16 - so now our visual studios editor is
08:18 - opened up to that project and we can
08:20 - start creating and adding files and
08:22 - folders as
08:24 - needed all right so now at this point we
08:26 - have a blank project folder now we want
08:28 - to set up our client or view
08:31 - js application for the front end so
08:33 - starting off there is a project called
08:35 - view hyphen cli which you can use to
08:37 - kind of build up template project so in
08:40 - this case you want to install it using
08:41 - npm install global view cli so if i were
08:44 - to copy this command and go back to my
08:46 - terminal and run it that will install
08:48 - the view cli client in this case i
08:50 - already have installed so it's not
08:51 - really going to do anything
08:52 - now if you read through the docs it says
08:54 - you can use it by typing view init the
08:57 - template name and then the project name
08:59 - so in this case we can say view init
09:01 - webpack and then the name of your
09:03 - project
09:04 - so i'm going to say view init webpack
09:07 - and the project name is going to be
09:08 - client
09:11 - alrighty so now that view and it is done
09:12 - installing we can actually use it by
09:14 - running view in our command line so if i
09:16 - were to do view list for example that'll
09:18 - tell us all the different
09:19 - templates we can use to build up our
09:21 - view applications so in this case i'll
09:22 - say view and knit webpack because that's
09:25 - one of them that's specified here and
09:27 - that's the one that has like all the
09:28 - goodies that you'll probably need and
09:30 - then i'll do view init webpack and then
09:32 - the name of the folder i want to create
09:34 - which is client that's going to take you
09:36 - through a walk-through which asks you a
09:38 - couple of questions like the name of
09:39 - your project i'll keep it as client
09:41 - project description uh keep it as
09:42 - default author yeah whatever
09:44 - view build runtime and compiler just
09:46 - stick with that view router yes
09:49 - lent your code yes um es lenting is just
09:52 - basically the way to keep your code very
09:53 - consistent so you know
09:55 - make sure you don't have extra
09:56 - semicolons all your spaces are lined up
09:58 - and good um so i'll do standard setup
10:01 - unit tests with karma and mocha sure why
10:03 - not night watch sure why not um and now
10:05 - at this point we have a client folder
10:07 - which you can see here after i did an ls
10:10 - which lists all the
10:11 - files in my directory we see we have a
10:13 - client folder here and if i were to go
10:15 - into the client folder and list out we
10:17 - have now a bunch of different files
10:19 - which are kind of used for running our
10:22 - view application and then a better way
10:23 - to visualize this if i were going to my
10:24 - tab tracker and go to the client folder
10:26 - again we have a bunch of files that are
10:28 - built up from the view init command and
10:31 - a lot of these you don't have to worry
10:32 - about like this is just pre-baked
10:35 - boilerplate
10:36 - project setup which you don't need to
10:38 - worry about
10:40 - you might need to later on as you get
10:41 - more advanced with like setting up with
10:42 - pack and setting up your build and
10:44 - whatnot but
10:47 - for the most part we have a project that
10:48 - is ready to go
10:50 - um
10:51 - but before we can actually do anything
10:52 - we need to install all of our npm
10:55 - dependencies or our node dependencies
10:57 - so if we were to look at this
10:58 - package.json file and if you're not
10:59 - familiar with what this is package.json
11:03 - is a way for the npm project to
11:06 - understand what dependencies your
11:07 - project needs so we have a basically
11:10 - json file which has a list of
11:12 - dependencies and dev dependencies so
11:14 - right now none of these are installed on
11:16 - our machine right so what we need to do
11:18 - first before we can even try to run our
11:20 - front end application is we need to go
11:22 - back to our terminal and go ahead and
11:24 - just run
11:25 - npm install and what that's going to do
11:28 - is it's going to go off to the npm
11:29 - repository and it's going to fetch every
11:32 - single package which is declared in this
11:34 - file
11:35 - it's going to install it locally into a
11:37 - node underscore modules folder inside of
11:39 - this client
11:41 - folder here
11:44 - so basically when we tell our project to
11:45 - run it knows where to find different
11:48 - packages such as you know express our
11:51 - eslint
11:53 - our view view router etc and
11:55 - in the future of this tutorial we're
11:57 - going to go ahead and add more
11:58 - dependencies as our project becomes more
12:00 - complicated
12:02 - so we're going to go ahead and let that
12:03 - run it might take a little bit
12:05 - of time because it's going to download a
12:07 - bunch of dependencies but after it's
12:09 - done you don't have to run this again
12:11 - unless you're trying to update modules
12:13 - or something in the future
12:18 - all right so now that npm install is
12:20 - done running i'm just going to show you
12:22 - what version of node i'm using i'll do
12:23 - node hype and hyphen version and i'm on
12:25 - version 8 2 1 so i recommend that you
12:28 - have the same version of node or be on
12:30 - at least version 8
12:32 - or the latest version
12:33 - just so that you're not running into
12:35 - issues because
12:36 - this will change and download different
12:38 - dependencies and build them up depending
12:40 - on what version you node on so
12:42 - again make sure your
12:43 - node version eight point something at
12:45 - least but at this point
12:47 - all the modules are done installing we
12:49 - should be able to see that node modules
12:51 - folder locally so if i were to ls grep
12:53 - node modules
12:56 - we see that we have a folder called node
12:58 - modules now and just to visualize that
13:00 - inside our vs code editor we have a node
13:04 - modules which has all of those
13:05 - dependencies and their sub dependencies
13:08 - added to that project folder which is
13:09 - pretty big right so all these
13:12 - plus all their sub dependencies and
13:13 - whatnot are inside this folder
13:16 - and that's just you know a little bit of
13:17 - background information it's good to
13:18 - understand how this is being set up but
13:20 - just know that this is where all our
13:22 - dependencies are coming from so when we
13:24 - import stuff in the future know that
13:25 - basically we're just going into these
13:27 - sub projects and downloading and using
13:29 - their source code
13:31 - right so now all the node modules are
13:33 - installed at this point we can actually
13:35 - run npm run dev
13:39 - which is going to start up our vue.js
13:41 - front-end server
13:43 - and the reason we can run
13:44 - npm run dev is because if you look at
13:47 - that package.json file over here
13:50 - we see that we have a script
13:52 - section and then inside that script
13:53 - section we have a line called dev
13:56 - so i could do npm run dev npm run start
13:59 - npm run build or any of these and what
14:02 - that's going to do is going to execute a
14:03 - command behind the scenes called node
14:05 - build dev server which basically builds
14:07 - up our source code
14:09 - and loads up a html web browser and
14:12 - points it to our servers now if i go
14:14 - back to my browser we see that magically
14:16 - we have a chrome browser pointed at our
14:18 - vue.js application and everything is
14:20 - ready to go
14:24 - cool so at this point
14:26 - just to recap we
14:29 - cloned a github repo
14:31 - locally to our machine we used vue cli
14:34 - to kind of build up a boilerplate
14:36 - project which can be used to
14:38 - create a vue.js front-end application
14:40 - and then finally we
14:42 - did an npm install to make sure we have
14:45 - all the dependencies we did npm run dev
14:47 - which went ahead and
14:49 - started our web server in our view js
14:51 - application and now we have a tab which
14:53 - is ready to go
14:55 - to see the view js application running
14:58 - so that might seem like a lot of work
15:00 - but remember it's a one-time thing we
15:02 - don't have to do any of that stuff again
15:03 - other than
15:04 - if you wanted to start up your server
15:06 - like if you shut down your computer and
15:07 - come back the next day you just need to
15:08 - run npm run dev and everything will be
15:10 - ready to go for you
15:13 - so now at this point
15:14 - we've done a lot of work
15:16 - so it's very good to make sure you
15:18 - always commit your changes like a small
15:20 - changes that you can make and very often
15:22 - commit them to your github repo so in
15:24 - this case if i were to do a git status
15:26 - we see that we have a bunch of changes
15:28 - well in this case a subfolder because we
15:30 - just added something so i'll go back
15:32 - it says that we have a client folder
15:34 - added
15:36 - and what we want to do is we actually
15:37 - want to add all the changes that we've
15:39 - done we want to go ahead and make a
15:40 - commit
15:42 - and give it some you know initial
15:43 - message so i said um let's just go ahead
15:45 - and say
15:47 - init the
15:48 - vue.js application using
15:52 - view cli
15:55 - so that's going to go ahead and add or
15:57 - add all of our files to the staging area
15:59 - of our local git repo and it's going to
16:02 - make a commit so we see that all these
16:04 - changes were added to our commit
16:07 - and now lastly we want to go ahead and
16:08 - push those changes to our master branch
16:10 - on the remote origin repo
16:13 - so basically at this point recap we
16:16 - added all the files we made a commit
16:18 - with this specific message
16:20 - and then we push it all to our
16:23 - remote origin repo which is on github so
16:26 - now if i were to go back to my project
16:27 - on github
16:29 - refresh the page we see that client is
16:32 - now there we have all those files inside
16:34 - of our client folder of the branch
16:36 - master
16:37 - and then if i were to go to our recent
16:39 - commits here we have two commits and the
16:41 - last commit we did init the vue.js
16:44 - application using vue cli which if you
16:46 - remember is the exact same
16:48 - message that we put up here
16:52 - now if i were to click into this i can
16:54 - see all the different changes that
16:55 - happened with this commit
16:59 - right a ton of stuff not really useful
17:01 - because there's just so many files make
17:02 - sure your commits are small and make
17:03 - sure you do them often
17:04 - [Music]
17:06 - so again that was a kind of quick
17:08 - overview of how to use git make sure you
17:09 - commit often and make sure your commits
17:11 - are pretty small
17:13 - and then that was also demonstrating how
17:15 - you can see your changes in github
17:19 - so if you're not familiar with git or
17:21 - github or all these things continue
17:23 - watching and i think after some time
17:25 - this will start to click and make sense
17:26 - as you get used to
17:29 - continuously committing to a remote repo
17:32 - but if you feel lost at any point be
17:34 - sure to pause and go read up on some
17:36 - information about git
17:37 - about npm about view about whatever you
17:40 - want
17:41 - but at this point let's go ahead and
17:42 - move on to setting up the backend
17:45 - project or
17:47 - or pretty much setting up the express.js
17:49 - back in rest api
17:51 - okay so what i like to do in my project
17:52 - is we're going to have the client code
17:55 - and the server code separated but in
17:57 - different folders of our git repo so if
17:59 - you see here we have a client folder i
18:01 - want to go ahead and make a server
18:02 - folder
18:03 - which is going to hold all of our server
18:05 - code so the client and the server don't
18:07 - overlap it's a little bit easier to
18:08 - manage and deploy separately and
18:10 - sometimes you make separate git repos in
18:12 - general with your client having a
18:14 - different repo and your server have a
18:15 - different repo but for the sake of this
18:16 - tutorial let's keep it straight forward
18:18 - to have a client in a server fold server
18:20 - folder with a very simple you know
18:22 - divide or separation between the two
18:25 - so i went ahead and made a server folder
18:27 - and if i were to go ahead and
18:29 - go into that i'm going to go ahead and
18:30 - split the tab here and typically i have
18:32 - my client
18:34 - on the left
18:35 - so i can do like npm run dev here to
18:38 - have the clients always running
18:40 - and then on the right i can just go
18:42 - ahead and do
18:44 - cd into the server folder
18:50 - let me just fix that really quick
18:52 - because that auto load in my browser
18:54 - so now that in this case remember the
18:56 - left is just our vue.js application
18:58 - running so we don't need to worry about
18:59 - this left tab anymore
19:01 - the right tab is where we're going to
19:02 - have all of our server code or our
19:04 - express.js code so we have a blank
19:06 - folder here nothing in it and i can
19:08 - visualize that by going to here we see
19:11 - that we have nothing inside the server
19:12 - tab
19:14 - the first step we want to do with
19:15 - initializing a new you know server
19:18 - project is we want to enable it with npm
19:20 - so we need another package.json file
19:22 - which we can create doing npm init dash
19:25 - f for force and basically that's just
19:27 - going to create a patch.json file and
19:29 - put it inside that server folder so now
19:31 - i see i have a package.json file here no
19:34 - big deal we're familiar with this we
19:35 - have the scripts and it has a test
19:39 - and what we want to do
19:42 - is
19:43 - first of all we're going to install
19:45 - something called
19:46 - [Music]
19:49 - nodemon which is something very useful
19:51 - for continuously restarting your server
19:54 - so i'll do npm install hyphen hyphen
19:56 - save nodemon we also want to install
20:00 - um
20:03 - let's go set eslint
20:08 - all right so now that those two packages
20:09 - are done installing what we can do is go
20:11 - back to that servers package.json file
20:13 - i'm going to go ahead and just delete
20:15 - that test and put in two lines i'm going
20:17 - to do a start command
20:19 - close this we have a start script which
20:21 - pretty much is going to run nodeman
20:23 - over some file so
20:26 - right now we don't have an app.js
20:27 - created but we'll do so in a second and
20:29 - it's going to run a linter over our code
20:31 - and then it's going to run our server
20:33 - now this don't i would say don't really
20:35 - worry about this this is kind of
20:37 - getting into the weeds of like
20:39 - your setup
20:41 - but just know that we're just going to
20:42 - add these they're just going to work we
20:44 - need to set it and forget it not worry
20:45 - about any more and then later down on
20:46 - the road you can learn more about npm
20:48 - and how npm scripts and nodemen works
20:50 - and all this other stuff so again we're
20:52 - hitting you with a lot of information at
20:53 - once but i think that's good so that you
20:55 - have exposure to you know how a full
20:58 - stack web application works
21:00 - so at this point let's go ahead and make
21:01 - a new folder here and we're going to
21:03 - call it source and inside that source
21:05 - folder we'll make a new file called
21:06 - app.js
21:09 - and so inside this app.js file we want
21:11 - to define
21:13 - a web application
21:15 - so just to kind of start off i can say
21:17 - console.log hello
21:20 - and now if i were to
21:23 - save that file let me make sure
21:25 - everything looked good
21:27 - okay so we saved the pack to json file
21:29 - we saved the app.js file and if we were
21:31 - to go back to our terminal
21:33 - we should be able to do an npm start
21:36 - command because if you remember in that
21:37 - package.json we have a start script and
21:41 - there's a there's a couple of keywords
21:42 - like start which you don't need to do
21:44 - run like technically i could do
21:47 - npm run start but in this case since
21:49 - it's start which is a special keyword i
21:51 - can just do npm start
21:53 - hopefully this works we might run into
21:55 - an error
21:57 - let's see
21:59 - it says it can't find e s lint
22:05 - that's because i forgot to run and
22:07 - initialize for eslint so let me just go
22:08 - ahead and run that really quick
22:11 - so if i were to go to
22:12 - node modules eslint
22:16 - and then it should be like a bin file
22:25 - uh
22:31 - oops
22:33 - all right so that's kind of a little bit
22:34 - of setup so basically remember we did
22:36 - the npm install we installed eslint so
22:39 - now i basically just want to run the
22:40 - eslint script so that it creates a
22:43 - configuration file for us to use so i'll
22:44 - do
22:45 - node i'll pass it a
22:48 - file that i want to run and then i'll
22:49 - pass a flag called init
22:52 - and when we do this it's going to
22:55 - give us a prompt
22:58 - and i'm just going to say use a popular
23:00 - style guide i'm going to say use a
23:01 - standard style guide which format
23:04 - javascript
23:10 - and so i'll give this a second to finish
23:12 - running
23:16 - all right so now that that's done we
23:17 - should be able to do an npm start which
23:19 - will spin up nodemon it'll run and enter
23:21 - over our code and then it will start our
23:24 - server so in this case eslint ran and it
23:27 - says too many blank lines at the
23:28 - beginning the file max of one is allowed
23:31 - so if i go back to here and just remove
23:33 - those blank lines save it
23:35 - our project should restart it should run
23:37 - the lender over that file and again
23:39 - print out any more errors this is a new
23:41 - line required at the end of the file but
23:42 - not found
23:44 - right
23:45 - so
23:46 - now at this point
23:48 - nodeman should pass eslint and then our
23:51 - app runs and it prints out hello and
23:53 - then our app will finish because that's
23:54 - basically all our app does at this point
23:56 - remember we have a node script that just
23:58 - prints out hello and then it's done
24:02 - okay so let's take a breather a little
24:04 - recap
24:06 - we made a server folder we did npm init
24:09 - force to create that package.json file
24:12 - we installed two dependencies which were
24:15 - nodemon and
24:16 - eslint in fact these are probably dev
24:19 - dependencies so i could just put them
24:20 - down here no biggie
24:23 - and then
24:24 - we created those two scripts we have the
24:26 - start script in the lens script and
24:28 - which start is going to run nodemon
24:31 - over our app.js file this is our main
24:34 - entry point make sure you remember this
24:35 - is a key key information
24:38 - and then we're going to also run lint
24:40 - over that all over all of our javascript
24:42 - files
24:45 - and then of course we we created our
24:47 - app.js file here which just prints out
24:49 - hello so again
24:51 - there's a lot of work just to set up a
24:53 - little project and there are other
24:56 - you know ways to generate an express
24:58 - package on the back end but i decided to
25:01 - take a you know from a scratch approach
25:03 - for the back end just so you have more
25:05 - exposure to npm you know creating files
25:08 - creating projects creating scripts
25:10 - versus the vgs stuff there's a lot of
25:11 - stuff going on with webpack which i
25:13 - don't even want to deal with or teach
25:15 - so i think it's better to use a
25:16 - generator for the front end because
25:17 - there's a lot of stuff the back end you
25:19 - could use a generator or you could get
25:21 - your hands dirty and try to learn how to
25:22 - do it by hand and that's what we're
25:24 - going to do in this case with the
25:25 - express server
25:30 - alrighty so now in this case we can just
25:32 - go ahead and do uh control c to close
25:34 - out of that infinite running nodemon
25:36 - script
25:37 - um again nodemon will just watch our
25:39 - javascript files and then if we save or
25:41 - change any of those files it's going to
25:42 - restart a server and we'll see how
25:44 - useful that is in a second but to start
25:46 - off what we need to do is start
25:47 - installing a couple of those
25:48 - dependencies that we'll need to create
25:50 - an express application
25:54 - so to
25:56 - start off we're going to need an
25:59 - application or a module called express
26:01 - we're going to need one called body
26:02 - parser we're going to need one called
26:03 - cores
26:04 - we're going to need one called morgan
26:06 - which is good for printing out logs
26:08 - and then i think that's good enough to
26:11 - start off with so let's go ahead and
26:13 - install those node dependencies
26:17 - we just installed a couple of
26:18 - dependencies not that big of a deal
26:19 - we've seen that done in the past
26:21 - we add hyphen height and save to make
26:24 - sure it's added to our package json here
26:26 - so now if we go and we have those four
26:27 - dependencies added to our package.json
26:31 - um let's see
26:33 - so at this point we can actually start
26:34 - building up a very basic
26:37 - express js server
26:39 - so if i were to do an npm start again
26:42 - just to get everything you know ready to
26:44 - go and running
26:46 - what we need to do is go back to our
26:47 - app.js file and let's go ahead and start
26:49 - importing some of those uh modules that
26:52 - we just
26:53 - imported are
26:54 - installed right so first we can do a
26:56 - const express is equal to require
26:58 - express
27:00 - we can do a constant body parser
27:02 - is equal to require body hyphen parser
27:05 - and basically we're just requiring those
27:07 - same
27:08 - modules verbatim which you can see here
27:10 - on the right side where we do require
27:13 - and then putting them to some type of
27:14 - environment variable or not environment
27:16 - but but putting them to a constant or
27:18 - variable here and basically what this is
27:20 - doing is it's going to dive into that
27:22 - node modules folder it's going to find
27:24 - the package called express or cores so
27:26 - right here you see this one called cores
27:29 - and it's going to find
27:31 - the main file and just include it here
27:33 - so in this case if i were to look at
27:34 - package.json of course there should be a
27:36 - main one here which is libindex.js
27:40 - and basically what that's going to do
27:43 - is when you acquire cores it's going to
27:44 - go ahead and just grab that
27:47 - cores package
27:50 - of course it closed down it's going to
27:51 - grab this index file and pretty much put
27:53 - whatever it exports into this file
27:56 - so again we're learning more stuff about
27:58 - how modules work in node.js but it's
28:01 - probably super confusing right now but
28:02 - it'll make more sense
28:04 - down the road as we start using it more
28:06 - and so finally let's just finish off
28:07 - with
28:08 - you know declaring or
28:09 - requiring that last package we installed
28:11 - called morgan
28:14 - now at this point we have an app which
28:16 - has these four dependencies included
28:18 - let's build up an express app so i can
28:21 - say
28:22 - const app is equal to express
28:26 - and that's going to build us an express
28:27 - server
28:28 - which again is just a very basic web
28:30 - application that's used for building up
28:32 - rest endpoints or whatever type of
28:33 - endpoints you want
28:35 - and then we want to start enabling some
28:37 - of those packages so that we can easily
28:39 - hit
28:40 - or back in and have logs printed out of
28:42 - course we don't have to really worry
28:44 - i'll think i can talk about that later
28:46 - body parser is for allowing you to
28:47 - process json data very easily
28:51 - um so you can do app dot use first of
28:53 - all i'll say use the body or the log
28:57 - use the log generator called morgan and
28:59 - then this is something that if you look
29:00 - at the morgan docks it says you pass a
29:02 - string of combined to have it print out
29:04 - it logs in a certain way
29:07 - we'll see that in a second app.use
29:09 - bodyparser.json
29:12 - it's saying allow our express app to
29:14 - easily parse any json requests that are
29:16 - sent in
29:18 - and then we'll say app.use course to
29:20 - allow any
29:21 - host or client to access this
29:24 - i'm not going to talk more about cores
29:25 - but
29:27 - pretty much you need cores if you want
29:29 - a server to be hosted on a different
29:31 - domain and you want any clients from
29:33 - around the world to hit your server and
29:34 - it's kind of a security risk to have it
29:36 - enabled so just if you do have an enable
29:38 - make sure you have a good you know
29:40 - security covering your application
29:43 - and finally at this point we can just do
29:45 - app.listen
29:47 - oops
29:49 - and then we can say
29:51 - process.env.port or port 8081 so at this
29:55 - point if i were to save this file
29:59 - and hopefully i don't have anything
30:00 - wrong with the actual code i've been
30:01 - typing
30:03 - but save the file it's going to link my
30:05 - code and it's going to restart my server
30:07 - so the server is running at this point
30:10 - but unfortunately there's no way to hit
30:12 - it because i don't have any endpoints so
30:13 - i'm going to go ahead and just create a
30:14 - very very simple endpoint called get on
30:18 - status
30:21 - and what we want to do
30:23 - is just return something so here is how
30:25 - you define routes in express right so
30:27 - you give it the method that you want to
30:29 - post or you want to use so in
30:32 - typical http request you can do a get
30:34 - request you could do a post request you
30:36 - could do put you could do a patch you
30:39 - need to delete i think there's some
30:40 - others but these are the main five
30:43 - but basically we're doing app dot the
30:45 - name of whatever command so in this case
30:48 - we'll do a git request to a status
30:51 - endpoint
30:54 - i actually do status and then once we
30:56 - get a request on our server with that
30:58 - endpoint what we can do is just send
30:59 - something back so i'll say res.status
31:02 - or
31:02 - res.send go ahead and send back some
31:04 - message objects to say
31:06 - hello world
31:11 - okay so delete all that stuff
31:14 - save this
31:16 - hopefully it works it restarted it seems
31:19 - like it's working so now at this point
31:21 - i'm going to show you we had another
31:23 - tool so if you give me one second
31:26 - actually if i could actually just do
31:27 - this so
31:29 - we have an app running on port 8081
31:31 - right so we should just be able to go on
31:33 - our chrome
31:34 - go to 8081 and do
31:36 - status
31:38 - and we see here we get message hello
31:40 - world back so
31:41 - this
31:42 - shows or demonstrates that we have
31:44 - a server actually running on port 881
31:47 - it's handling an endpoint called slash
31:49 - status when it gets a request it's going
31:52 - to go ahead and send back a json object
31:55 - which has an attribute message and then
31:57 - the string hello world exclamation mark
31:58 - if we go here we just saw that it gets
32:00 - returned to our browser when we hit this
32:02 - get endpoint
32:05 - and by default when you do a request in
32:07 - your chrome browser it's going to do the
32:09 - default of a get request
32:12 - so let me demonstrate another
32:15 - application we can use to kind of test
32:17 - out our backend
32:20 - so i'm going to go ahead and load up
32:23 - an app called postman which you can
32:25 - download from i think the chrome app
32:26 - store
32:30 - give me one second it's loading up right
32:31 - now
32:35 - actually i just i just saw a little bug
32:37 - so it's pretty all combined here it's
32:38 - supposed to be combined so i'm gonna go
32:40 - ahead and change that and save that
32:43 - and just to show that what that does is
32:45 - now if i were to hit this end point we
32:47 - actually get some you know some logs it
32:49 - tells us what
32:50 - device hit us so we got hit by chrome
32:54 - version 60 whatever
32:56 - um it was to the endpoint status
32:59 - it returned to 304 or something and then
33:03 - i think it also tells you how long the
33:04 - endpoint took but anyway that's what
33:05 - this morgan logger is doing just kind of
33:08 - like you know went off on a tangent
33:09 - there but
33:10 - to kind of demonstrate another way to
33:12 - test your back-end api
33:15 - you should download
33:17 - i think there's one called rest clients
33:18 - this one is called postman it's a very
33:21 - useful tool and i think it's invaluable
33:22 - that you actually use it
33:28 - but basically allows you to do different
33:30 - requests so i can say do a get request
33:32 - to that status endpoint
33:34 - so i do this it says hello world i can
33:36 - go ahead and save that to my tab tracker
33:42 - so if i were to save that to tab tracker
33:44 - i can easily just load up my application
33:46 - and then you know grab that endpoint and
33:48 - test it whenever i want but basically
33:49 - you can chose the url you want to test
33:52 - you can choose the different methods
33:53 - that you want to send to it
33:55 - you can define headers you can define
33:57 - bodies so if i would do a post i could
33:59 - define like a json body here or upload a
34:02 - file
34:05 - but yeah this is a very very useful
34:07 - application and i highly suggest you
34:09 - download it because it's very helpful to
34:11 - test out endpoints as you create them
34:14 - and as you debug them
34:16 - so again going back i'll just go ahead
34:17 - and close out of that and we'll come
34:19 - back to this in a little bit as we
34:21 - create more endpoints and stuff gets a
34:22 - little bit more complicated but for now
34:24 - again let's just do a nice little recap
34:28 - so going to the code we created an
34:30 - express application it's running on port
34:32 - 8081 and this is just allows us to
34:35 - overwrite that port if we want to
34:37 - using environment variables which we'll
34:39 - cover probably later on but basically we
34:41 - created a status in point when we hit it
34:43 - it sends back this and i think i already
34:45 - covered that so
34:46 - pretty much wraps up
34:49 - setting up a client using vue.js and
34:51 - then setting up a server which is going
34:53 - to use express.js and both of these are
34:55 - going to get a little bit more
34:56 - complicated um down the road we're going
34:58 - to add a lot more logic a lot more
35:00 - endpoints a lot more
35:01 - files
35:02 - but
35:03 - it's good to know that it's very easy to
35:05 - set up using generators it's also good
35:07 - to know how to set up a project yourself
35:09 - using just you know npm install look
35:11 - through npm and find what packages you
35:13 - want and install them
35:15 - and again now we just did a bunch of
35:17 - work on the server side so let's go
35:18 - ahead and go back and we could add those
35:20 - so git add all
35:23 - git commit
35:28 - actually that was probably a mistake we
35:30 - want to go ahead and do a git ignore
35:33 - file first
35:36 - so that we don't upload every single
35:38 - node module that we just installed
35:44 - so this message i'll say add everything
35:47 - i don't get commit and say setup of the
35:50 - express js server
35:53 - and then i'll go ahead and push that to
35:55 - our back-end or push that to github
35:58 - and again if i were to go to get up here
36:00 - refresh the project we now have a server
36:03 - folder at this location with that same
36:06 - you know app.js that we've built up
36:08 - so i mean
36:10 - hopefully this wasn't too complicated it
36:12 - might have been a lot of information at
36:14 - one time
36:15 - but i think as we continuously add new
36:18 - functionality in the process i'm going
36:20 - to do is add functionality to the front
36:22 - end have it point to the back end and
36:24 - then implement the back end endpoints
36:26 - that we're trying to hit right
36:30 - so we're going to keep on doing that for
36:31 - every single page and every single
36:33 - feature and panel inside the front end
36:35 - so it should end up clicking over time
36:39 - so with that being said let's go ahead
36:41 - and get started building the first
36:44 - piece of functionality for our vue.js
36:46 - application and that's going to be
36:48 - a register page or a register route
36:52 - okay so to start off we want to be able
36:54 - to access
36:56 - or do these type of get requests and
36:58 - post requests against our express js
37:00 - application so one
37:02 - npm module we should install on the
37:04 - client just remember this is in the
37:05 - client folder we want to go ahead and
37:07 - install a package called
37:09 - axios
37:10 - which is a library which can be used for
37:13 - doing those http requests to a backend
37:17 - so while that's installing let's go
37:19 - ahead and move over to our client folder
37:20 - here and what we can do
37:23 - is inside the source folder i'm going to
37:25 - go ahead and create a
37:27 - folder called
37:29 - services
37:31 - and then inside here i'm going to create
37:33 - a
37:35 - file called api.js
37:37 - and what this is going to be used for is
37:39 - basically
37:41 - um
37:42 - setting up some type of
37:44 - connector which can be used to hitting
37:45 - up the backend so i'm going to go ahead
37:46 - and first of all import
37:48 - that axios um
37:49 - [Music]
37:51 - library that we're installing or
37:53 - importing
37:54 - and now we want to have this file
37:57 - give back
38:01 - a connector so if i were to go here and
38:03 - just do um
38:06 - let's see
38:08 - so this is a function and we need to
38:09 - return a connector so what i can say is
38:11 - return axios create
38:13 - and then that's going to take in
38:16 - a couple of things so first of all we
38:17 - need a base url
38:20 - and that's going to point to
38:23 - our back-end api all right so that
38:25 - should make sense we're saying create as
38:26 - an axios object which is going to point
38:29 - to
38:30 - our back-end url of 8081
38:35 - and this api thing can be used for like
38:38 - hitting our different endpoints
38:40 - so now that we've created that
38:42 - we can go ahead and create a new folder
38:45 - or file i mean called authentication
38:48 - service
38:50 - dot js
38:52 - and what this is going to be used for is
38:54 - basically hitting that register endpoint
38:57 - that we haven't yet built but we're
38:58 - going to build in the future so i'll say
38:59 - import api
39:02 - from
39:05 - services
39:06 - api so now we have an api
39:09 - object that's imported from that api
39:12 - file that we created here which is
39:14 - basically just going to be this axios
39:16 - object
39:17 - and now we can actually just
39:21 - export
39:22 - a object that has a couple of methods so
39:24 - in this one i'll just say register
39:32 - credentials
39:33 - so basically what we want to do is have
39:35 - a object which allows us to call a
39:37 - register method which will hit that
39:39 - register endpoint which we haven't yet
39:41 - built yet so if i were to do
39:44 - something like this
39:49 - basically what we're saying is
39:51 - this authenticationservice.js
39:53 - is going to export
39:55 - an object that has a register method to
39:57 - it
39:58 - and then we can call this
40:00 - like so we can say authentication
40:04 - authentication service dot
40:07 - register
40:08 - and then we can pass it let's say email
40:12 - gmail.com
40:14 - and then password can be like one two
40:16 - three four five six
40:18 - so basically this is how we call this
40:20 - method
40:22 - from another
40:24 - file and we'll see this in a little bit
40:26 - when we start building out that register
40:28 - endpoint
40:29 - and then basically what this is doing is
40:30 - we're going to pass that email and
40:32 - password
40:33 - to
40:34 - [Music]
40:35 - this post method of the axios module
40:39 - which is going to do a post request to
40:41 - the register endpoint on our express
40:43 - server
40:44 - and then is going to use those
40:46 - credentials
40:50 - so what we can do here is go to the back
40:52 - end now
40:54 - and if we were to create a endpoint
40:56 - called register instead of using git we
40:58 - say post register
41:01 - and then let's just go ahead and send
41:02 - back
41:03 - a message that says
41:08 - your user was registered
41:11 - have fun
41:18 - so now we can hit this register endpoint
41:21 - with a post request it should return
41:23 - this message to us and then you should
41:24 - see how that kind of links up to what
41:26 - we're doing we're doing a post request
41:28 - to the register endpoint and we're
41:29 - sending in some credentials in fact if
41:31 - we wanted to access those credentials we
41:33 - can go back to our
41:35 - rest service
41:36 - and we can say
41:39 - um
41:42 - we could actually say like
41:44 - hello and then the name of the email so
41:47 - wreck that body of the email
41:54 - close this so we can actually see what's
41:55 - going on
41:57 - so now if we were to send in that email
41:59 - and password payload to this register
42:01 - endpoint
42:03 - it's going to send back a hello your
42:05 - user was registered to have fun and just
42:07 - to visualize that with postman because
42:08 - remember i said it's very useful
42:10 - to use postman if we were to go to this
42:13 - register change this to post
42:15 - change this to
42:16 - json
42:19 - and i'll say email is testing at
42:22 - gmail.com
42:25 - keep forgetting that this needs to be
42:26 - real jason and then password is
42:29 - one two three four five six
42:32 - if i do a send there it returns back
42:34 - from their backend hello testing
42:36 - gmail.com your user was registered to
42:39 - have fun so i'm gonna click i'm gonna go
42:40 - ahead and save this
42:43 - um let's see register a new user
42:47 - so now we have an endpoint called
42:48 - register a new user i'm going to go
42:50 - ahead and delete this one because we're
42:51 - not using that
42:52 - so again this kind of shows you how
42:53 - useful postman is we don't have a ui yet
42:56 - so it's good to make this or use postman
42:58 - to kind of test your endpoints and then
43:00 - once we get the ui we can start hitting
43:01 - those endpoints and see how it actually
43:03 - works
43:08 - all right so again a little recap
43:11 - on our back end we have a register
43:13 - endpoint which takes a post request and
43:15 - it will return a message
43:17 - with the email that we provided in the
43:19 - payload
43:20 - and then a little information you can
43:22 - access the payload using
43:24 - rec.body.email
43:26 - on your express server and then for the
43:28 - front end
43:29 - as a recap we created two files we
43:31 - created api which returns an axios
43:34 - object that points to a certain url
43:38 - and then we created this authentication
43:39 - service which allows us to call a
43:41 - register method on it
43:42 - which will simply post whatever object
43:45 - that we pass into it down here so this
43:46 - is how you call it we say
43:48 - authenticationservice.register we pass
43:50 - it some json object and in this case
43:53 - we're going to pass the email and
43:54 - password to be used later on
43:56 - so let's go ahead and actually start
43:58 - implementing
44:00 - a ui
44:03 - to be to use for um this authentication
44:05 - service
44:06 - because we have like the whole behind
44:08 - the scenes stuff ready to go we have the
44:09 - back and ready to go and we have some
44:11 - methods in our javascript front-end for
44:13 - how you kind of communicate with that
44:15 - back-end
44:16 - okay so i don't kind of like jumping all
44:18 - over the place i'm jumping from the
44:19 - client to the server and back and forth
44:20 - and i think that is a good way to kind
44:22 - of get you exposed to all the different
44:24 - things that happen in full stack
44:25 - development like this is how i kind of
44:26 - work
44:27 - naturally i'm not just
44:29 - um like i like to implement the back and
44:32 - forth sometimes or implement the front
44:33 - end and then integrate them together
44:34 - with a little piece of functionality
44:40 - so
44:41 - to start off what we need to do is
44:43 - inside the ui
44:45 - we want to be able to hit a log or a
44:48 - register endpoint so if i were to try to
44:50 - go to register here it doesn't work
44:51 - because there is no registration
44:53 - endpoint
44:54 - so our first task is we need to build a
44:57 - register endpoint and register component
44:59 - so we can display
45:01 - so to start off go ahead and close out
45:03 - these because we don't need these
45:04 - anymore
45:06 - so if i were to go to our router
45:09 - inside our vue.js basically this is the
45:12 - functionality or the code which
45:14 - designates
45:15 - how do you hit different routes so in
45:17 - the url basically if we hit the path
45:19 - slash it takes us to a hello view or
45:22 - hello component so what we want to do
45:25 - is we want to make a new path
45:28 - if i could click
45:32 - sorry about that so which basically
45:34 - we want to have a register path
45:36 - it's going to be called register and
45:38 - then we want to display a register
45:41 - component
45:42 - so right now we don't have a register
45:44 - component so let's go ahead and just
45:45 - copy that and say register
45:48 - so if i were to save this this will
45:50 - probably
45:51 - fail because we don't actually have a
45:52 - register component declared anywhere so
45:54 - now at this point we can go to the
45:56 - components folder we can say you know
45:58 - just i like the copy and paste existing
46:00 - code so i'll go ahead and just rename
46:01 - this one to
46:04 - register dot view
46:07 - and then inside here
46:10 - we can just
46:11 - make a very basic div
46:14 - get rid of all this jazz we don't need
46:16 - this
46:17 - don't need that
46:20 - let's see
46:22 - technically we don't need data at this
46:24 - point
46:24 - and we don't need any of these styled
46:27 - scripts yet
46:30 - boom so we have a very bare bones vue.js
46:33 - register component which if i were to
46:35 - say
46:36 - let's say i'll say like h1
46:42 - register
46:45 - so now if i say this i go and we have a
46:46 - register page here
46:51 - in fact i'm not sure why this giant
46:53 - views here i think it's because i need
46:54 - to go into the main app file here
46:58 - and again
47:00 - just
47:01 - get rid of that i don't i don't really
47:02 - need that stuff
47:05 - okay
47:06 - so again a cool thing with the view or
47:08 - yeah vue.js the whole like view cli
47:10 - product that we set up anytime you save
47:12 - your file it will refresh and hot reload
47:14 - your different things that change so
47:16 - that's just good to know it makes it
47:18 - super easy to use
47:22 - so
47:23 - now at this point
47:27 - what we want to do is inside of a
47:28 - register component we need to have two
47:30 - different things so we need a
47:33 - let's say an input field
47:37 - and that's going to be a type of text
47:40 - and then i'll say name is email
47:44 - type is actually type should be email
47:45 - right
47:49 - so basically we need a register page
47:51 - which has a email section and it has a
47:53 - password section and maybe a button that
47:55 - says register so what i'm going to do is
47:57 - go ahead and do those three things so
47:59 - i'll say
48:00 - give me an input box
48:02 - which has the placeholder email
48:05 - if i were save this we get an input that
48:07 - says email in it
48:09 - i'm going to go again go ahead and go
48:11 - here we need something called password
48:14 - save that
48:15 - boom we get a password
48:19 - and this is just super super basic html
48:21 - with no styling and i'll go back through
48:23 - and style this with probably material
48:25 - design in a second and then
48:27 - lastly
48:28 - we want a
48:30 - button
48:32 - and that's going to have let's say
48:35 - register
48:39 - all right so we have an input box called
48:41 - email we have a input box for password
48:44 - when you have a register button
48:46 - so at this point what we actually want
48:48 - to do
48:50 - is inside vue.js what you can do is you
48:52 - can bind the html
48:56 - to
48:56 - your controller so basically everything
48:58 - inside the script tag is your controller
49:01 - and you can kind of bind your html using
49:04 - special
49:05 - keywords
49:06 - as attributes which will kind of link
49:09 - things together
49:11 - so i mean they say it's bad practice to
49:13 - kind of use two-way bindings but i don't
49:15 - necessarily think that's true as long as
49:17 - you keep it like based inside your
49:19 - component
49:20 - um and we'll we'll use view x in a
49:22 - little bit and i'll spell that out
49:24 - there's a framework called
49:25 - view x which is kind of like the flux
49:28 - way of doing things react does it very
49:30 - similar with redux
49:32 - and we'll use that later on for a couple
49:33 - of key
49:35 - store related objects but for now what
49:37 - we want to do is just do a v model
49:41 - and set that to email here and do the
49:43 - same thing down here
49:45 - for password
49:51 - and basically what's happening is it's
49:52 - saying when view runs go ahead and grab
49:54 - this input
49:55 - find any type of property or data or
49:57 - something called email and bind it so
50:00 - now down here if i were to say email is
50:02 - equal to a blank string password is
50:04 - equal to a blank string
50:07 - and save that
50:16 - right now it's putting in like autofill
50:18 - settings that's really annoying so i'm
50:19 - just going to go ahead and put
50:20 - abc123 so if i save that we see that
50:23 - those are put into our input box because
50:25 - what's happening behind the scenes is v
50:27 - model is a two-way binding so it's
50:29 - saying
50:30 - set this input value to whatever this is
50:32 - and vice versa if i were to type into
50:34 - this input go ahead and update this down
50:36 - here so what what i can do is kind of
50:38 - demonstrate that
50:40 - is i'm going to go ahead and say watch
50:42 - email
50:44 - and whenever the value of email changes
50:46 - so i'll say
50:48 - console.log email has
50:51 - changed
50:53 - value
50:55 - so now at this point in my console down
50:57 - here whenever this changes
51:00 - it's going to go ahead and print out
51:01 - email has changed
51:03 - and that's just kind of demonstrate how
51:05 - the two-way binding works as i type into
51:07 - this input box my data model is updated
51:09 - and vice versa if my data model is
51:11 - updated so i could do another thing so
51:13 - i'll say mounted
51:15 - and that's basically whenever this view
51:17 - component is mounted onto the page i'm
51:19 - going to
51:20 - run a command
51:22 - so right now i'll just do set timeout
51:25 - of
51:27 - 100 seconds
51:29 - in fact i need to do function because i
51:31 - need to use this
51:32 - so i say this dot
51:34 - email is equal to hello world
51:37 - all right cool so make sure this is a
51:38 - fat arrow basically when the page loads
51:40 - after about two seconds what we're going
51:42 - to do is change email to abc and this
51:45 - will demonstrate what happens with
51:46 - reactivity and how if the data model
51:48 - changes the actual view will change so
51:50 - if i refresh the page you see that it
51:52 - starts with abc and then after two
51:53 - seconds it changes to hello world so
51:55 - again this is a good demonstration of
51:57 - how the two-way binding on v model works
51:59 - for input boxes
52:06 - so basically what we're trying to do
52:08 - here is when we click the register
52:09 - button we want to hit the register
52:10 - endpoint with some data and do something
52:13 - so now what we can do is just go ahead
52:14 - and get rid of all this you know
52:16 - temporary border boilerplate code
52:18 - and we want to add a listener to this so
52:20 - i can say on click
52:22 - we want to say register
52:24 - so basically if anyone clicks this
52:26 - register button it's going to go ahead
52:28 - and call a register method so down here
52:30 - i can say methods
52:32 - i could say click or i could say
52:34 - register
52:35 - you could say i see register button was
52:38 - clicked
52:41 - get rid of all this
52:43 - get rid of all the watch because that
52:44 - was just kind of for demonstration
52:46 - and get rid of mounted
52:48 - and now if i were to save this
52:55 - when we click that register button with
52:56 - some values so let's put some random
52:59 - values and click register we see that it
53:01 - now calls register button was clicked
53:03 - and then we have the username and
53:04 - password
53:05 - so at this point it should make sense as
53:06 - to why we need that what we can do with
53:08 - that so if we can go up here
53:11 - we can simply import
53:13 - that authentication service
53:16 - from if you remember that services
53:19 - authentication service here
53:22 - import that service and then what we
53:24 - could do is just call register on it
53:27 - and say email is equal to this dot email
53:30 - password is equal to this dot password
53:38 - and then i'm going to use await in async
53:41 - here because
53:42 - i think it's much better than using
53:44 - promises these days and i could say
53:46 - response is equal to that so basically
53:48 - what we're going to do is call that
53:49 - endpoint remember there's a register
53:51 - endpoint on our node service
53:52 - we're going to pass it email and
53:54 - password and then we're going to wait
53:55 - until we get a response back and once we
53:57 - get that response we can just go ahead
53:59 - and print out response.data
54:02 - save this file
54:03 - this should refresh and then we click
54:05 - register with that and we get back a
54:07 - message hello see cyber gmail.com your
54:10 - user was registered to have fun
54:12 - and again we can go to our endpoint here
54:15 - node and we see that every time we click
54:17 - that register button
54:19 - it's hitting our node server
54:22 - right i keep doing that a couple times
54:25 - so we're getting our node server
54:26 - requests
54:28 - and we're sending a request to that
54:30 - register endpoint
54:31 - all right so i think this is a good
54:32 - stopping point i think we you know
54:34 - covered setting up an entire project
54:36 - front and back end with vue.js and
54:38 - express.js for the back end and then we
54:40 - also set up how to create a very simple
54:43 - login or registration page
54:46 - using the
54:48 - exos or xiosum
54:50 - library
54:51 - and then also defining that endpoint in
54:53 - our express application
55:00 - so at this point remember after you've
55:02 - made some progress it's very good to go
55:04 - ahead and commit your changes in this
55:06 - case i'm going to go ahead and do it in
55:07 - vs studio so that i'm not you know
55:10 - overwhelming with command line lingo so
55:12 - what we could do here is just go ahead
55:13 - and say add everything
55:21 - so and then a commit message would be
55:23 - setting up
55:24 - the registration page
55:29 - and then go ahead and push those changes
55:30 - to
55:31 - the master branch
55:33 - and again if i go to my github refresh
55:37 - the page i should be able to see that we
55:39 - now have that register endpoint here
55:42 - so all of our code is now on github
55:44 - we're at a good state and i think we can
55:46 - stop this video for today and come back
55:48 - later and start implementing some more
55:49 - stuff alright thanks for watching