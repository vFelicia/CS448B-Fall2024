00:04 - hello and welcome to how to build a
00:06 - beautiful blog i'm zadek and you learned
00:08 - to make this website from scratch and
00:10 - these are interactive scrimba
00:12 - screencasts so you can actually pause me
00:14 - go edit the code make a change that
00:15 - you'd like to see save it and come back
00:17 - to it as you like now if you haven't
00:19 - seen the cosmos definitely just stop
00:21 - what you're doing and go watch that
00:23 - don't worry i'll wait
00:28 - all right so let's go back to our
00:30 - website now one of the cool things is
00:32 - that it's responsive which means that it
00:34 - can respond to some change and in this
00:36 - case it's responding to with as the
00:38 - width changes so can our website and
00:40 - that's what allows us to have a mobile
00:42 - and a desktop version all without having
00:44 - to build two separate websites i don't
00:46 - know that i've seen this before and if
00:48 - you have that's really cool this is a
00:49 - debugger and it allows us to understand
00:52 - our website so we'll use this and some
00:54 - other techniques as we build our site
00:56 - again i'm zadek and if you have any
00:58 - questions or comments even feedback can
01:00 - reach out to me on twitter by clicking
01:02 - my face otherwise you can follow me here
01:04 - and without further ado we are ready to
01:06 - begin
01:11 - welcome back in this screencast we'll
01:13 - cover four quick lessons that are
01:15 - essential for us to get started so the
01:16 - first lesson is to recognize that all
01:18 - websites are are really just trees and
01:21 - to be even more clear than that they're
01:23 - upside down trees so take a look at the
01:25 - following we have a tree with the root
01:27 - at the bottom instead of at the top and
01:29 - it has two children elements or call
01:31 - these branches and these branches are
01:33 - our head and the body the head is where
01:35 - we put our website's style and any
01:37 - metadata about our website whereas our
01:39 - body is where we put the content of our
01:41 - website so really when we write html
01:44 - what we're really doing is adding
01:45 - branches to one of these two different
01:47 - branches so we're adding information to
01:50 - our tree okay now next lesson understand
01:53 - that these branches or what we can call
01:55 - elements or tags in html they can have
01:57 - up to three different appearances now
01:59 - this is a self-closing element it
02:01 - neither has a value nor does the value
02:04 - required to be closed this is how we'll
02:06 - most commonly use html elements now
02:08 - finally elements can have an optional
02:10 - attribute and an attribute can have its
02:12 - own value and going even further than
02:14 - that elements can have multiple
02:16 - attributes and attributes can have
02:18 - multiple values now this is probably how
02:21 - we'd start writing any website the
02:23 - difference from the code that i showed
02:24 - you here is that this would be a modern
02:27 - website as we've added a few necessary
02:29 - tags this element tells the browser that
02:32 - we want to use html5 and we don't want
02:34 - to omit this because by doing so we let
02:36 - the browser decide for us which version
02:39 - of html to use and in most cases you
02:41 - really don't want to let the browser
02:42 - make too many decisions we want to be
02:44 - explicit here so you definitely want to
02:46 - include this now we have inside of our
02:48 - head tag the meta car set and the car
02:51 - set is acting as an attribute whereas
02:53 - the utf-8 is the value and this tells
02:56 - the browser that our text is unicode
02:58 - which allows for all sorts of things
03:00 - including unicode emojis now we have a
03:02 - title element and this titles our
03:04 - website to our browser so if you look at
03:06 - the top of your window you'll probably
03:08 - see titles and this is how we assign a
03:10 - title we have another meta tag and we
03:13 - have multiple attributes
03:15 - this basically just tells the browser
03:17 - how to render our website on mobile
03:18 - devices now last we have a little bit of
03:21 - content and a little bit of style so
03:23 - this is the text hello world and we've
03:26 - wrapped it in a p4 paragraph i'll just
03:28 - show you in the browser
03:30 - will look like this now the reason that
03:32 - the text is not black is because we've
03:34 - used some css to style our paragraph css
03:37 - is a combination of a selector a
03:40 - property and then value what we've done
03:42 - is we've selected the p for paragraph
03:45 - element property color and then the
03:47 - value of green and that's why we have a
03:49 - green text web page okay now the final
03:52 - lesson and we've talked about this in
03:53 - the first screencast is responsive
03:56 - design which is this bit of code here
03:58 - i'll just show you what it is and then
04:00 - i'll explain what it is so as we resize
04:03 - our website you'll note that the color
04:05 - changes and this is possible because of
04:07 - responsive design our website can now
04:09 - respond to some event and in this case
04:12 - it's responding to the event of whether
04:14 - our website's width is at 8.5 inches or
04:18 - less now there are tons of events that
04:20 - you can use for what's called a media
04:21 - query that's what this piece of code is
04:24 - but the point is that this is how we can
04:25 - plug into our website and it makes some
04:28 - changes and to be even more clear take a
04:30 - look at the following what we're
04:31 - actually doing is if this event is true
04:34 - then we are overriding paragraph with
04:36 - the following color so we're overriding
04:38 - css in some circumstance or event and
04:41 - that is the essence of responsive design
04:43 - all right i'll see you in the next
04:44 - screencast
04:50 - welcome back now you'll note that our
04:51 - website now has three extra elements and
04:54 - these are importing css files we don't
04:56 - have to use our style tag for everything
04:58 - we can actually import css files using
05:01 - this syntax so what we're doing is
05:03 - importing a font from google fonts and
05:05 - then i have two local files in the
05:08 - folder styles and then the two files
05:10 - reset and debug css which you'll see
05:12 - over here
05:13 - so i mentioned it before but this
05:16 - aesthetic is our debugger it helps us
05:18 - understand our website but what is a css
05:21 - reset so by default browsers make some
05:23 - decisions for us and it's kind of nice
05:25 - but at the same time it's pretty
05:27 - annoying so what's happening is that
05:29 - browsers set their own properties and
05:31 - this can be really frustrating because
05:33 - we don't really want to assume anything
05:35 - when we start our website we want a
05:37 - blank slate and css resets are one way
05:40 - to do that so what we're doing is
05:41 - telling the body and all of the body's
05:44 - children that's what the asterisk is for
05:46 - all the body's children which in the
05:48 - last screencast would include the
05:50 - paragraph hello world to apply the
05:52 - following properties universally and
05:54 - this makes it much easier for us to
05:56 - start with a clean slate because we
05:58 - don't have to deal with any opinions or
06:00 - properties that are predefined for us
06:02 - now you can find other css resets online
06:05 - i'm just going to create our own for
06:07 - this screencast
06:08 - now here you might be wondering what is
06:11 - root well if you remember it's the root
06:13 - of our tree so it's another way to say
06:15 - html
06:16 - and we are defining a font for our
06:18 - entire website now you might be
06:20 - wondering why do we not need an asterisk
06:22 - here and that's because the font
06:24 - property actually inherits from its
06:26 - parent so by defining just for the root
06:29 - element all of its subsequent children
06:31 - elements will automatically inherit from
06:33 - it this is an example of where we can
06:36 - set it once and it applies everywhere
06:39 - now finally the debugger that you see
06:41 - here i'll show you how we achieve that
06:43 - we are just setting three properties to
06:46 - all of the children of our body and then
06:48 - using a special important value which i
06:50 - know looks ridiculous
06:52 - so that we can apply css no matter what
06:55 - if you remember back our media query
06:57 - allowed us to override css in some
07:00 - circumstance well the important would
07:02 - prohibit that from happening because
07:04 - it's asserting that under no
07:05 - circumstances can these properties and
07:07 - values be overwritten using important in
07:10 - general is often a pretty bad practice
07:12 - but for a debugger it's a perfect use
07:14 - case now if you wanted to disable the
07:17 - debugger you could just as easily
07:19 - misspell it and now it fails to load the
07:22 - file and this is great because we don't
07:24 - need it anymore and if we want to back
07:26 - we can just fix it again
07:29 - or you could just as easily remove the
07:30 - whole line all right in the next
07:32 - screencast we are ready to build our
07:34 - website i'll see you there
07:40 - welcome back now in this screencast
07:42 - we'll make the following design this is
07:44 - our website on a mobile and a desktop
07:46 - device and on the left it's pretty
07:48 - straightforward whereas on the right we
07:50 - have this extra column to the left and
07:52 - the right of our article
07:54 - so let's go ahead and make that now
07:56 - start with an article element
08:00 - and then we'll put the text article
08:02 - inside of it
08:06 - okay here's our website and it looks
08:07 - pretty terrible
08:09 - so let's add some things
08:12 - open up the article element and then
08:14 - we're going to say
08:17 - i want you to be a grid what we need is
08:19 - three columns so we can template three
08:21 - columns by using the property grid
08:23 - template columns
08:27 - and what we've done here is we've
08:28 - defined three columns each column is now
08:31 - occupying a third of the website's width
08:33 - that's what the fr is doing it's a
08:35 - fraction unit so we take whatever the
08:37 - leftover width is and we divide it into
08:40 - thirds
08:41 - now our website doesn't really look like
08:43 - that that's because the article has
08:44 - fallen into the first column and so to
08:47 - fix that we need to tell any of the
08:49 - articles children that i want you to
08:51 - fall between the second and the third
08:53 - column which is from here to here
08:57 - now what's great about css grid is that
08:59 - it's so easy is that it's so easy to
09:01 - make changes
09:02 - take a look at what i mean if i make
09:03 - this 3 over 4 then that would refer to
09:06 - here to here
09:08 - and you'll see that that is now
09:10 - reflected
09:11 - and again if i wanted this to occupy the
09:14 - full width
09:15 - you can just do one over four because
09:17 - this would be one
09:19 - two
09:20 - three
09:21 - and four
09:22 - now what else is cool is that if i
09:24 - wanted this to be instead of a third
09:26 - fifty percent i can just change that to
09:28 - two
09:30 - okay so this looks better but it's still
09:32 - not big enough if we look back here it
09:34 - really needs to be real wide and what we
09:36 - can do is make this a fixed width of 8.5
09:39 - inches
09:41 - okay now if i open this up you'll see
09:44 - that it looks that it looks right
09:46 - and to make this look a bit better we'll
09:48 - add a height
09:52 - so that it occupies the available height
09:54 - now we won't keep this permanently it's
09:56 - just for this screencast now next is if
09:59 - i view this on a mobile device you'll
10:01 - note that we have all this extra space
10:03 - and that's because of the fixed width
10:04 - here
10:05 - so what we need to do is make this
10:07 - responsive we can add min max which now
10:10 - means that this column is responsive
10:12 - it'll go from 8.5 inches down to zero
10:16 - and we don't have any extra space this
10:18 - is really great and you might be
10:19 - wondering what happened to these guys
10:21 - they're just gone and that is that these
10:24 - are the remainder if our website is less
10:26 - than 8.5 inches we don't have room for
10:28 - these and so they're just simply not
10:30 - displayed
10:33 - all right now finally the last thing
10:35 - that we can do is see how the text is
10:38 - centered here well we don't have that in
10:39 - our website but one way we can do this
10:42 - is to add a utility class this is a
10:45 - really fast and nice technique to add
10:47 - some css that may or may not be
10:49 - permanent so
10:50 - right here this would be permanent css
10:53 - we have written it and we have the full
10:55 - intention of keeping it now
10:56 - alternatively we can use a utility class
10:58 - to temporarily to temporarily add some
11:01 - css that will be very easy for us to
11:03 - remove later i'll add an attribute that
11:06 - is a class that we can use to style
11:11 - now this doesn't do anything yet what we
11:13 - need to do is we need to create a class
11:16 - called debug center and then our
11:18 - article's text will update okay so i'll
11:20 - open up debug.css
11:22 - and then here we'll add the following
11:24 - class
11:25 - classes are prefixed with the dot that
11:28 - you see that's how we know that it's not
11:29 - an element like you see here it's an
11:32 - attribute or to be more specific it's a
11:34 - class
11:38 - we're going to use flexbox which is a
11:39 - fast way that we can position elements
11:41 - inside of a box
11:44 - so what we want is to center it
11:45 - horizontally and vertically
11:50 - this is how we center horizontally and
11:52 - then now is vertically
11:56 - all right so we saved that and opening
11:58 - up our site
12:01 - now article is centered because we added
12:04 - the utility class which is an attribute
12:07 - and then we created a corresponding
12:08 - class to add some properties to this
12:11 - element the paragraph
12:13 - and now we can have multiple articles or
12:16 - what would be a blog post by simply
12:18 - copying and duplicating our article
12:25 - now every article occupies our windows
12:28 - height and you can see the next article
12:30 - after it
12:32 - cool all right now we are ready to add
12:34 - some more complexity to our grid and
12:36 - i'll see you in the next screencast
12:42 - welcome back this is our website i've
12:44 - just removed the centering class and
12:46 - you'll note that the text is not really
12:48 - readable at the top left corner so what
12:50 - we can do is add some room so that it
12:52 - can breathe we'll add a padding to the
12:54 - top and the bottom as well as an extra
12:57 - column for the left and the right sides
12:59 - as compared to our previous design
13:01 - okay so what we can do is first i'll add
13:04 - back our class
13:07 - and then now we'll add a padding to the
13:10 - top and the bottom
13:14 - you can see that that is now updated now
13:17 - you might be wondering what is this zero
13:19 - for and if we look at our website our
13:21 - padding is only applied to the top and
13:23 - the bottom there's no padding to the
13:25 - left or the right side we could put a
13:28 - value here and that would reflect the
13:30 - left and the right side of our article
13:32 - but instead we're going to use css grid
13:34 - for this because it's a lot more
13:36 - flexible going forward
13:38 - okay so what we can do is we'll break up
13:40 - this 8.5 inch column into three columns
13:43 - but the left and the right columns will
13:45 - act as the buffer between the left and
13:46 - the right walls of our website
13:52 - what we've done is we've broken up the
13:54 - 8.5 inch column into three but the sum
13:57 - is still 8.5 inches
14:00 - okay look at our website it looks
14:02 - terrible and what happened is is that
14:04 - this line is no longer meaningful we
14:07 - could update this to three over four
14:10 - which would indicate from here to
14:13 - here because
14:15 - one
14:16 - two
14:18 - three
14:20 - four
14:21 - five
14:24 - because these are the actual positions
14:26 - that we would need so three over 4
14:29 - represents the constant column
14:32 - okay but instead because that's kind of
14:34 - annoying it's referred to this position
14:36 - as a value
14:42 - and just like that our website now
14:45 - understands where the start and the end
14:47 - of our content is
14:50 - so this is a much better solution than
14:53 - having to count every time we make a
14:54 - change
14:55 - okay now the next thing is that when we
14:58 - make this a mobile device you'll see
14:59 - that these columns are still too wide
15:02 - and that's because they are fixed now i
15:04 - can't actually use a min max here
15:06 - because css won't understand how to deal
15:09 - with multiple min maxes in this way but
15:11 - instead we can use a media query to deal
15:13 - with
15:24 - this so now if our website is at 8.5 or
15:28 - less inches we'll override the previous
15:31 - articles grid template columns with
15:33 - whatever we put here
15:35 - so instead of a fixed width here what we
15:37 - can use is a percent
15:44 - and now you'll note that that column
15:46 - will resize with our website's width and
15:48 - that's how we achieve the responsive
15:50 - design here
15:52 - okay now this might look a bit weird to
15:54 - you why do we have a min max if we have
15:56 - a media query and we can just fix this
15:58 - real quick instead what we can do is say
16:00 - in this case just be 7.5 inches and then
16:03 - in this case we can say be 90
16:06 - so that's a bit simpler on the eyes
16:09 - let's take a look
16:12 - it's all good all right that's it for
16:14 - this screencast i'll see you in the next
16:16 - one
16:21 - welcome back in this screencast we're
16:23 - going to focus on the content starting
16:24 - with images okay so you'll note that we
16:27 - have multiple with images and what's
16:28 - going on that these images their widths
16:31 - are actually the grids that we've
16:32 - defined
16:34 - okay so i've moved the css into its own
16:37 - file called article.css and we're
16:39 - linking to it here
16:41 - you'll note that we actually have up to
16:43 - four different sizes so the first two
16:46 - look the same on a mobile device but on
16:48 - a desktop device they're actually
16:49 - different widths now there are two more
16:51 - sizes we can accommodate for the first
16:53 - three but the fourth one we actually
16:55 - need to change our grid
16:58 - so all we need to do is add another
17:00 - column to the left and the right of our
17:03 - center column and then make this one
17:05 - smaller
17:10 - okay now
17:11 - our content has stayed the same because
17:13 - we use start and end but we can
17:15 - represent a five inch image and still
17:17 - provide a margin to the left and the
17:19 - right
17:21 - okay the next thing is that we need to
17:23 - update this because this is no longer
17:25 - true so we can just take these
17:27 - proportions and then represent them as
17:29 - percents
17:32 - all right that was super easy
17:34 - now whether we're on a mobile or a
17:36 - desktop device we'll have a consistent
17:38 - grid that is also responsive
17:41 - all right so going to our index you'll
17:42 - note that i've cleaned up the article
17:44 - because we don't need any of the other
17:46 - elements
17:47 - we'll start to add our image so i'll
17:49 - show you in the browser and this
17:52 - and this looks terrible
17:54 - so we have a couple of things to fix
17:56 - first is that we don't want our image to
17:58 - be greater or less than 100
18:00 - of the available width so i can say 100
18:04 - now i don't need to say height because
18:06 - css will just resolve that for us
18:09 - going back to our web now it's starting
18:11 - to look now it's starting to look better
18:13 - so we're ready to add three more images
18:15 - and then give each image its own size
18:28 - now this won't actually do anything yet
18:30 - so now we've defined four classes and it
18:32 - doesn't do anything yet we need to
18:34 - actually add some rules
18:46 - so what we've said is that any article
18:48 - marked with one of these classes for it
18:50 - to then begin on the fourth column and
18:52 - then end before the fifth and so our
18:55 - website now everything is the smallest
18:57 - size image
19:01 - so what just happened is that the image
19:02 - is now rendering at five inches because
19:05 - it's starting at the fourth and before
19:07 - the fifth column
19:09 - now it's really easy for us to add
19:11 - support for multiple width images
19:18 - and just like that
19:22 - we have multiple with images and they're
19:24 - all responsive because because they're
19:26 - following our grid
19:28 - that's really cool and really powerful
19:30 - now the last thing that we want to do is
19:32 - to clean up our css we want to be
19:34 - careful and not use really general rules
19:37 - like this one where anywhere in our
19:39 - website if we have an image it would
19:41 - automatically adopt these properties and
19:43 - that's a bit and that's a
19:45 - and that's a bit too much what we really
19:47 - want is that any image marked with a
19:49 - size class well then it should have a
19:51 - width of 100
19:55 - so what we can do is just that
20:06 - we'll only apply the following property
20:08 - if an image has one of these classes and
20:10 - the reason that we don't need image here
20:12 - is because we'll reuse these classes
20:14 - somewhere else and so this is the right
20:16 - balance of generality and specificity
20:18 - all right that's it for this screencast
20:20 - i'll see you in the next one
20:26 - welcome back in this screencast we'll
20:28 - focus on the text of our website and in
20:30 - the next screencast the text will get a
20:32 - bit more appealing every time
20:34 - so to start i've moved some css from the
20:36 - previous screencast into its own file
20:39 - and then we're linking to it here you'll
20:41 - see me do this a lot in the next
20:43 - screencast and now you'll note that our
20:45 - article now has all these new elements
20:47 - so let's look at our website
20:50 - it's a bit hard to read and that's
20:52 - because we have the debugger turned on
20:54 - it's a bit hard to read so let's turn
20:56 - off the debugger
21:00 - by misspelling the file it no longer
21:02 - loads and inadvertently disables it
21:06 - all right so let's talk about these
21:08 - elements we know what the p is the p is
21:10 - for paragraph and we have em to
21:12 - emphasize in text
21:14 - so looking here this text is italicized
21:18 - now we also have a link here and to link
21:21 - something we use the a element which is
21:23 - for anchor and the attribute href now
21:25 - points to a website
21:27 - so if i click carl sagan it'll actually
21:29 - bring us to his wikipedia page
21:34 - similarly down here i have a strong tag
21:36 - and this will bold in text
21:41 - now i also have multiple headlines and
21:43 - the reason that we use different
21:44 - headlines and not the same one is
21:46 - because when we style our website these
21:48 - headlines will have different styles so
21:50 - it's better if they're different
21:51 - elements
21:53 - so we have an h3 here and here instead
21:55 - of h3 i have time and this is our
21:58 - article's timestamp so we have text to
22:00 - represent when we post the article and
22:03 - we have a datetime attribute to
22:04 - represent the same time but this is in a
22:06 - standard format so it's much easier for
22:08 - machines to read
22:10 - okay and the last thing is that our
22:11 - article has an id and the id allows us
22:15 - to not just link our website but link a
22:17 - part of our website
22:18 - so if i scroll just slightly and i click
22:21 - here it brings us to the article
22:24 - you can see that here
22:26 - this is what the id can do for us it's a
22:29 - way that we can make an article linkable
22:31 - and so here if i click the first line
22:35 - anywhere in the first line
22:37 - it will link to the start of the article
22:40 - this is a really nice feature if you
22:41 - send someone a website and you want to
22:43 - link to some part of the website and not
22:45 - the whole website okay that's really it
22:48 - for our elements now let's just add some
22:50 - visual breaks
22:52 - so we'll say anywhere there's an h2 and
22:55 - a paragraph
22:58 - we margin beneath it
23:01 - and 2.4 rem is an expression that we can
23:03 - use to describe two lines
23:07 - and so we see that here
23:09 - now how do we know this well looking at
23:11 - our reset one line is 1.2 so we just use
23:15 - 2.4 but we need to be careful here
23:17 - because if i said em it would scale
23:19 - proportionally to the font size of our
23:21 - h2 and our paragraph if we always want
23:24 - two line heights to be the same height
23:26 - then it's important that we use rem
23:28 - because 1.2 line heights is now based
23:32 - explicitly on 20 pixels and not whatever
23:35 - the size of the font is so this will
23:37 - give us a consistent break now last is
23:40 - if i turn back the debugger
23:43 - you'll note that we have all this extra
23:44 - room at the bottom and that's because
23:46 - it's combining the padding and the
23:48 - margin so what we really want is to only
23:51 - have a break after a paragraph so long
23:53 - as it's not the last paragraph so we can
23:55 - use some logic here
23:59 - so what this does is we select any
24:01 - paragraph so long as it's not the last
24:03 - one
24:04 - so every paragraph except for this one
24:07 - would get a break
24:09 - and you can see that in our website that
24:11 - that is now reflected all right that's
24:14 - it for this screencast we're ready to
24:15 - move on to the next
24:21 - welcome back now in this screencast
24:23 - we're going to start to style our text
24:25 - so we're going to go from this to this
24:29 - so all we need to do is create a css
24:31 - rule for each of our text elements i'll
24:33 - do that now
24:45 - all right now each of our elements has
24:47 - its own rule so now we'll change their
24:49 - size
24:58 - all right so this is a start now
25:00 - everything is the same size so nothing
25:02 - has changed but the point is that font
25:05 - is a really really powerful property so
25:07 - we can start here and then really add a
25:09 - lot so let's say i want my h1 and my h2
25:11 - to be slightly bigger now if you
25:13 - remember rem is referencing the 20
25:16 - pixels
25:17 - here
25:19 - okay so let's say i want our h1 and our
25:21 - h2 to be bigger so i can make this two
25:24 - rem and we'll make this 1.5
25:32 - okay now you can start to see our
25:34 - website take shape and now i'll
25:36 - introduce you to fault weight
25:40 - so 400 is the default font weight and
25:43 - it's doing nothing now where you saw the
25:45 - bold text before is a font weight of
25:47 - 700. so if a font supports it you can
25:50 - have anywhere from 100 to 900 font
25:53 - weights and if you look here you can see
25:55 - that we've imported a few different font
25:57 - weights
25:58 - so to match this let's make some
26:00 - elements bold
26:01 - so we'll make h1 time and h3 bold
26:12 - oh cool it's looking better now let's
26:15 - look a bit closer at the paragraphs here
26:18 - there's a bit of height between them and
26:20 - it looks good it's nice and readable but
26:22 - if we go back to here it's really
26:24 - compact so we need to open this up a bit
26:30 - now if you remember if we go to our
26:32 - reset we decided that the default line
26:35 - height should be 1.2 which is the same
26:37 - as 20 times 1.2
26:40 - which would be 24 pixels
26:43 - now here
26:44 - the only element that i want to have a
26:46 - slightly bigger height and so 1.5 is a
26:48 - pretty readable line height
26:52 - all right that looks great okay now
26:55 - looking back to here our header and our
26:57 - link has an underline
26:59 - so how can we achieve that
27:01 - well if you remember our header is a
27:02 - link and so is carl sagan so what we can
27:05 - do is tell our anchors to have a box
27:07 - shadow
27:15 - that looks great
27:17 - alright so how do we do that we use the
27:20 - property of box shadow and then i used a
27:22 - special version of it which is the inset
27:24 - version typically a box shadow would be
27:26 - outside this however is an inset box
27:29 - shadow so we have inset here and the
27:31 - numbers represent the x and the y axis
27:34 - so our shadow is just going down we
27:36 - don't need an x axis so that's zero
27:39 - now because we're using an inset shadow
27:41 - we have a negative number where normally
27:44 - you would just have a number like this
27:46 - so this would be a normal shadow
27:49 - it would fall below the text but we want
27:51 - it to be inside the element so we can
27:54 - use inset and then a negative number
27:58 - and here we use em because we want the
28:01 - shadow to be proportional to the font
28:03 - size and so if i use rem here
28:07 - the shadow will always be the same
28:08 - height
28:09 - if i want it to be proportional this is
28:12 - why and where i would use an em
28:16 - and then our shadow for now is just
28:17 - black
28:18 - now what's cool is that our website is
28:20 - responsive so we get this for free but
28:22 - you might want your website to be
28:24 - slightly smaller or maybe even bigger if
28:26 - you're on a mobile device and if you
28:28 - look closely the text on the left is
28:30 - actually slightly smaller it's really
28:32 - easy to do this so let's look back at
28:34 - our reset everything in our website is
28:37 - based in one way or another off of 20
28:39 - pixels
28:40 - so what we can do is write a media query
28:42 - that will change the root's font size
28:49 - so at 8.5 inches we can tell the root
28:53 - that your font size is now instead of 20
28:56 - pixels instead 18.
29:01 - and now the text changes
29:03 - we can even take this a step further and
29:05 - have a second media query
29:09 - but at 5 inches we do 16 pixels
29:16 - that's really cool
29:18 - alright that's it for this screencast
29:19 - i'll see you in the next one
29:25 - welcome back in this screencast we're
29:26 - going to add color to our text so we'll
29:28 - go from here to here
29:30 - okay so all we need to do is add some
29:33 - color and you've seen this before we did
29:34 - this in our debugger but i didn't really
29:36 - explain it then so i will now
29:39 - however there's different formats that
29:40 - you can use to represent colors the
29:43 - format that i like is hsl which is for
29:45 - hue saturation and luminance here i'm
29:48 - using hsl a and the a is for alpha that
29:51 - is if we want to make our color
29:53 - transparent so this is the h
29:55 - s
29:56 - l
29:57 - and a
29:59 - the h is for hue and that's which color
30:01 - we're using so 210 represents a blue 100
30:04 - is for the saturation of a color and 100
30:07 - would be a fully saturated color if we
30:09 - want a grayish blue you could do 50
30:11 - instead
30:12 - now l is for luminance and if we want a
30:15 - white color we would just put 100 if we
30:17 - want black you would put zero percent
30:19 - and if you want to see the color i'd
30:21 - recommend starting with 50 because that
30:24 - would show you what the color looks like
30:26 - and then last is alpha and that just
30:27 - makes it transparent like we said so in
30:30 - our index we're not going to use any
30:31 - alpha instead we'll just use hsl
30:35 - so add a color property to each text
30:37 - element and we know that we're going to
30:39 - use hsl
30:43 - so let's start with black and if you
30:45 - notice the black that we have here
30:47 - there's no actual black here the darkest
30:49 - color that you see is not actually black
30:51 - but dark gray this is a nice technique
30:53 - that we can use because the text will
30:55 - look less harsh so first we'll make it
30:57 - black and then gray
31:02 - alright so this would be black and you
31:04 - can see that here nothing has changed
31:07 - now it's a slightly gray
31:10 - and let's make the link color gray as
31:12 - well
31:18 - that's a start so now looking here you
31:20 - can see that we have we have three
31:21 - colors there's an underline and then the
31:23 - two purples for the time and the h3
31:26 - elements
31:27 - so let's start with the link
31:29 - 55 is a good yellow and we can do 100
31:32 - and let's make this pretty bright
31:35 - all right that is our link let's move on
31:37 - to the time and the h3 let's make them
31:39 - both a purple for now
31:42 - 250 is a nice purple value
31:46 - make it fully saturated and we'll make
31:48 - it pretty bright
31:49 - all right and let's just make the time a
31:51 - bit lighter
31:56 - nice
31:57 - looks great and that's really all there
31:59 - is to colors and if we're on a mobile
32:01 - device you can see that it scales too
32:04 - this is really starting to look great
32:06 - all right that's it for this screencast
32:08 - i'll see you in the next screencast
32:14 - hey welcome back in this screencast
32:16 - we're going to do three things so we'll
32:18 - add back our images put a caption
32:20 - beneath them and then at the bottom
32:21 - we'll put social media buttons
32:23 - okay so let's add an image between our
32:26 - paragraphs
32:28 - now before we give this a size attribute
32:30 - in html5 it's actually recommended that
32:33 - we wrap this in a figure element that's
32:35 - because we want to think generally here
32:37 - if we weren't going to put an image but
32:38 - maybe some other media type it'd be
32:40 - better contained in a figure
32:46 - all right and now instead of giving the
32:48 - image the size we'll give the size to
32:49 - the figure
32:54 - looks terrible well what happened let's
32:57 - look at our css
32:59 - actually i think it'd be better that we
33:01 - renamed this article figure
33:06 - and i'll just update that here
33:09 - all right so the problem is is that this
33:11 - rule is actually too specific and i know
33:14 - that i was hammering on about this
33:15 - earlier but now we need to refactor it
33:18 - so because we've changed the
33:19 - relationship where the images are not
33:21 - standalone they're actually inside of a
33:23 - figure so instead of this let's change
33:25 - the order
33:28 - now anything marked with a size one
33:30 - class with an image will then get this
33:32 - property
33:34 - nice
33:37 - and we can just as easily change the
33:39 - sizes
33:42 - oh i forgot to add forgot some sizes
33:53 - all right and let's take a look
33:57 - we can do three
34:00 - and we can do
34:03 - and we can do four
34:05 - nice all right now we're ready for the
34:07 - figure's caption and there's a
34:09 - convenient element for this that's fig
34:10 - caption
34:16 - and let's give it a paragraph
34:23 - and i'm going to italicize cosmos
34:30 - now obviously we need a break and i
34:33 - thought that we'd get that for free i
34:34 - mean after all we're using a p element
34:37 - right i thought p elements were supposed
34:38 - to get breaks
34:40 - but the problem is is that because we're
34:42 - using this logic we're actually
34:44 - discriminating against this paragraph
34:47 - so because we used last child
34:49 - the last paragraph in the fig caption is
34:52 - this one and that's why there's no break
34:55 - so
34:57 - so we'll just delete it
34:59 - and it's not a problem anymore when we
35:02 - introduce our social media buttons there
35:03 - should be a break between them too so we
35:05 - just don't need that anymore all right
35:07 - going back to our index let's go ahead
35:10 - and center this and make it slightly
35:11 - lighter so in our figure file i'll add a
35:14 - fig caption
35:17 - and if you remember we already know how
35:19 - to center
35:20 - so i'll just copy this
35:23 - and we only care about centering it
35:25 - horizontally we don't care about
35:26 - centering it vertically so we can skip
35:29 - align items
35:35 - it's centered let's just make it a bit
35:36 - lighter
35:44 - now we have a rule just for fig caption
35:46 - paragraphs
35:47 - and let's make it pretty light
35:51 - i'm a bit ocd so i noticed this and
35:53 - maybe you didn't but the image actually
35:55 - has a slight gap beneath it and maybe
35:58 - you wouldn't notice that just by looking
35:59 - at it but
36:01 - this is exactly why we have a debugger
36:06 - you look closer now you can see that
36:08 - there is a gap here
36:10 - where does it come from well by default
36:12 - images can go on the same line as text
36:14 - we don't notice that though because this
36:16 - image is so big there's no space for
36:18 - text so we need to add a reset here we
36:20 - need to change the default behavior
36:28 - okay now it goes all the way up to the
36:30 - image now technically this would fix it
36:33 - but it's not the best way to do it this
36:34 - would be too general of a rule what we
36:36 - can do is say if it's a figure
36:39 - it's child needs to apply this property
36:42 - and the block value specifically means
36:44 - that it blocks it doesn't need to be on
36:46 - the same line as text therefore we don't
36:48 - need a gap above or beneath the text
36:53 - and now it's too close to the image so
36:56 - we'll go back
37:02 - and i'll just quickly add a margin
37:06 - all right the last step are social media
37:08 - buttons and so we'll put them at the
37:10 - bottom
37:12 - and i have the image here that we are
37:14 - importing from here
37:16 - and i'll add empire
37:20 - so like figure i actually want to wrap
37:22 - this in a container now i wouldn't use
37:24 - figure here so instead i can use diff
37:27 - div is just a generic container that you
37:29 - can use if there isn't a semantically
37:31 - meaningful one
37:36 - right let's give it a class
37:39 - and now we can style it
37:43 - because the image is huge all right so
37:47 - we'll make two rules one for the class
37:49 - and one for its contents
37:53 - let's fix the size so we'll do width
37:58 - and height
38:01 - i'm using an svg so i'm going to add
38:03 - height just because i'll get some side
38:05 - effects if i don't
38:09 - looks good these icons would never hug
38:11 - each other so let's give them a padding
38:21 - nice
38:23 - we've centered a few times so it should
38:24 - be pretty familiar
38:30 - we just tell the container that this is
38:32 - a flex box and that i just want to
38:34 - horizontally center it
38:37 - but these they don't do anything so i
38:39 - need to make them links
38:46 - to emulate that i have a link i can just
38:48 - put empty links here because i don't
38:50 - have a link that i would link these to
38:51 - yet
38:54 - and what's cool is we get that nice
38:56 - underline for free if you didn't like
38:57 - that you can make the underline a class
38:59 - and you would apply it where you'd want
39:01 - it rather than just have it apply
39:02 - everywhere
39:03 - all right that's it for this screencast
39:05 - i'll see you in the next one which is
39:07 - also the last one
39:12 - welcome back this is the final
39:14 - screencast and in it we'll learn a very
39:16 - subtle trick to differentiate one
39:18 - article from another we've just been
39:20 - working with one article but
39:21 - realistically we're gonna have multiple
39:23 - articles and we want to make it more
39:24 - clear where an article begins and ends
39:27 - right now there is a slight change from
39:29 - the last screencast i don't know that
39:31 - you can see it i'll go ahead and try to
39:33 - make it more obvious
39:36 - at the top we have a slight of various
39:38 - like gradient and that can help us
39:40 - understand where an article begins and
39:42 - ends let me just demonstrate why we need
39:44 - it
39:45 - oh by the way i've just put the share
39:47 - css into its own file and we don't need
39:50 - a style tag anymore so i just removed
39:52 - that
39:53 - we have multiple articles
39:57 - and to make them unique
40:00 - i'll just make this the cosmos one
40:02 - because we are living in a multiverse
40:05 - and the cosmos ii
40:08 - now technically there's infinite cosmos
40:10 - but we're not going to focus on that
40:12 - all right so here is our website and we
40:15 - scroll we scroll
40:16 - and okay so technically an article is
40:20 - ending and beginning here but i'd argue
40:22 - that it's not clear and it's not visible
40:24 - i mean yeah we know that this is a
40:26 - headline but still it just bleeds into
40:28 - the next one now the tent is only at the
40:30 - top of the article it's not at the
40:32 - bottom so as we reach the bottom of an
40:34 - article it'll become really obvious
40:36 - where the next article begins
40:38 - let's go to our article and i'll just
40:41 - rearrange that
40:43 - okay
40:44 - the way to do this is to add a
40:46 - background
40:53 - okay
40:54 - so too much but the point is that so far
40:57 - our article actually didn't have a
40:59 - background it was just white by default
41:01 - let's go ahead and make it a gradient
41:10 - okay i don't know if this is better or
41:12 - worse what's happening is that our
41:14 - gradient is scaling all the way from the
41:16 - beginning to the end of the article it's
41:19 - definitely not ideal so we can actually
41:22 - add another value
41:26 - and now you can see pretty clearly that
41:28 - an article begins here it ends here and
41:30 - another one begins here but this color
41:33 - is like really really bright so let's go
41:35 - ahead and fix that
41:38 - we can use hsl and we can use 55 again
41:41 - with a 100 saturation and finally we'll
41:44 - use a really really bright luminance
41:48 - nice
41:50 - nice it's really subtle but it's also a
41:52 - really nice hint now if you're like me
41:54 - you want this to be as precise as
41:56 - possible how would we for example say
41:59 - that we want our linear gradient to stop
42:01 - at the bottom
42:02 - of here if we're smart about it we could
42:04 - say oh well that's half an inch plus
42:07 - what was that 40 pixels plus was that 30
42:10 - pixels right we could convert the inches
42:12 - to pixels and then and put it in there
42:14 - and that's one way to do it but i'll
42:15 - show you another
42:21 - so what we so what we can do is add a
42:24 - value right this value indicates where
42:26 - the article should become fully white
42:28 - one inch down well when we shift the
42:30 - yellow an inch down two it becomes a
42:32 - line because there's no area for there
42:34 - to be a gradient it's just a hard line
42:37 - and i gotta admit that that looks pretty
42:38 - cool so how would we get it to here
42:42 - well as long as this value is bigger
42:44 - than this one we're going to get a line
42:46 - instead of a gradient and this will make
42:48 - it pretty easy to line everything up
42:51 - instead of using inches we use rem so
42:54 - that as we resize our gradient will
42:55 - actually resize as well
42:59 - all right that looks good so all we need
43:02 - to do now is put this on the right side
43:06 - and then get rid of this one
43:10 - now it'll naturally fade to the bottom
43:12 - of here
43:18 - everything will resize dynamically based
43:20 - on the root's font size
43:22 - so you've done it you've learned how to
43:23 - make a beautiful block design from
43:25 - scratch so again i hope you really
43:27 - enjoyed this course i had a lot of fun
43:29 - preparing it for you if you had any
43:30 - questions or comments or even feedback
43:32 - from me again just reach out to me on
43:34 - twitter at usernamezadik otherwise i
43:36 - hope you learned a lot i hope you can
43:38 - now create something that you can have
43:40 - before now go now go watch cosmos if you
43:43 - really enjoyed this course i really
43:45 - encourage you to share it with your
43:46 - friends or anyone that you think might
43:48 - benefit from this learning these
43:49 - technologies can be painful and so try
43:52 - to help other people in the same way
43:53 - that this course might have helped you
43:55 - alright see ya