00:00 - this video is part of my clean code and
00:02 - JavaScript Series this video is all
00:04 - about solid solid is an acronym that
00:07 - stands for five basic principles of
00:09 - object-oriented programming and design
00:12 - the s in solid stands for single
00:15 - responsibility principle this principle
00:18 - states that everything should only have
00:19 - one reason to change this will help
00:21 - developers understand the context and
00:23 - responsibility of what they're building
00:26 - and when there is a need for change so
00:28 - here is the bad way to do it in the user
00:31 - settings we have a change settings
00:33 - function and we have a verify
00:35 - credentials function now this is really
00:38 - two different things there's the
00:40 - settings and there's the credentials so
00:42 - this is not just a single responsibility
00:44 - if you go go down here we have the good
00:46 - way to do it the good way to do it we're
00:48 - going to have two different classes
00:50 - we're going to have the user off class
00:52 - and the user settings class and so one
00:55 - of them is responsible for verifying
00:56 - credentials and the other one is
00:58 - responsible for change settings so that
01:02 - repes that shows the single
01:03 - responsibility principle the O in solid
01:07 - stands for the open closed
01:10 - principle now this up here is actually
01:14 - the bad way to do it first let me
01:15 - explain the principle software entities
01:18 - should be open for extension but closed
01:20 - for modification this basically means
01:23 - that if someone wants to extend our
01:25 - module's Behavior they won't need to
01:27 - modify existing code if they don't want
01:28 - to there's an easy rule of thumb if you
01:31 - have to open the Javascript file of your
01:33 - module and make a modification in order
01:35 - to extend it you have failed the open
01:38 - close principle so let's see in this
01:40 - example here we're making an ice cream
01:42 - maker we have the ice cream flavors
01:43 - chocolate and vanilla and then we're
01:45 - creating this ice cream maker with the
01:47 - make ice cream function where you pass
01:49 - in the flavor and it's going to either
01:52 - say a great success you know ice cream
01:54 - or epic fail no ice cream for you
01:56 - depending on if you if the flavor you
01:58 - pass in is in the ice ice cream flavors
02:00 - array so if you pass in chocolate to
02:03 - make ice cream it's going to say great
02:04 - success now you have ice cream uh then
02:06 - if it's not in the array you're going to
02:08 - have epic fail no ice cream for you now
02:10 - the problem with this is that there is
02:11 - no way to add an ice cream flavor
02:14 - without editing the ice cream flavor
02:16 - array so we can easily change that
02:19 - here's the good way to do it we've just
02:20 - added this extra function here which is
02:24 - to add a flavor and it's going to do ice
02:27 - cream flavors that push flavor so you
02:29 - can add maybe strawberry here or
02:31 - something like that and then you can now
02:34 - make ice cream in the strawberry flavor
02:37 - so um and the bad way to do it we would
02:39 - have had to go into the file and
02:41 - actually add the strawberry flavor to
02:43 - the array here uh we don't have to do
02:46 - that we can just use the the method of
02:48 - the function to to change that array so
02:51 - we don't have to modify the existing
02:53 - code to extend the behavior okay the L
02:57 - in solid stands for the Lov substitution
03:01 - principle this means that derived
03:03 - objects or types must be
03:06 - substitutable for their base again this
03:09 - will make more sense with an example
03:11 - this is the bad way to do it we have a
03:13 - class we have a rectangle class and it's
03:16 - going to have a Constructor with the the
03:18 - width and height um where you you're
03:20 - going to be able to besides setting the
03:22 - color and the rendering you're going to
03:24 - set the width to the width that you
03:26 - passed in you're going to set the height
03:28 - to the height that you passed in and you
03:30 - can also get area now we can create a
03:34 - square which is going to extend a
03:36 - rectangle um all squares are rectangles
03:38 - but not all rectangles are squares so
03:41 - here we're only going to add we're going
03:43 - only going to overwrite two functions um
03:46 - which is the set width and set height
03:49 - and see we're going to set width the
03:51 - width and height to the width that you
03:52 - passed in and if you do set height
03:54 - you're going to set the height to the
03:56 - height the width and height are going to
03:57 - be set to the height you passed in the
03:59 - Square Square inherits from the
04:00 - rectangle class according to the listov
04:03 - substitution principle you should be
04:04 - able to substitute the square class for
04:06 - anytime you would normally use the
04:08 - rectangle class and your code should
04:10 - function as expected but you will see in
04:14 - this bad example it doesn't work out
04:16 - that way so if you see this part here um
04:19 - we're going to create these re
04:20 - rectangles to be a new rectangle new
04:22 - rectangle new square and then we're
04:24 - going to render the large rectangles and
04:26 - pass in this rectangle array so it's
04:29 - going to call this function and for each
04:31 - rectangle in that array it's going to
04:33 - set the width of four then it's going to
04:34 - set the height of five and it's going to
04:36 - get the area of that rectangle it would
04:39 - actually return 25 for square because
04:43 - the height we passing was five and it
04:45 - basically just overwrote the width so
04:47 - this would work for rectangles when the
04:49 - width and height are different but it's
04:51 - not going to work for squares so you
04:53 - can't really substitute squares in for
04:55 - rectangles and it behave how you would
04:58 - want it to behave so here's the good way
05:01 - to do it we're going to create a shape
05:03 - class that has the set color and the
05:05 - render that are going to be the same for
05:08 - any any shape then we're going to have
05:09 - the rectangle class which has the
05:12 - Constructor the width and height and
05:14 - it's going to set the width and height
05:16 - and you can get the area by multiplying
05:17 - the width times the height and now if
05:19 - you look at the square class this is
05:21 - going to extend shape it's not even
05:24 - going to extend rectangle it's going to
05:25 - extend the shape class and with in the
05:28 - Constructor we are just going to pass in
05:30 - a length and then you're going to set
05:32 - the length and the area is length time
05:35 - length now up here we have the render
05:37 - large rectangles function but down here
05:40 - we have the render large shapes the
05:42 - rectangle and square both extend from
05:45 - shape and the square did not extend from
05:47 - rectangle so we're going to create the
05:49 - new rectangle by passing in the four and
05:51 - five because if You' see here the
05:53 - rectangle you pass in width and height
05:55 - and the square you're just going to pass
05:58 - in the length so you're going to create
06:00 - them differently pass in form and five
06:02 - for rectangle for new rectangle pass in
06:03 - four and five but for new Square you're
06:05 - just going to pass in five and then
06:07 - you're still going to be able to render
06:09 - large shapes and pass in the the shapes
06:12 - array and shapes at 4 each shape you're
06:15 - going to get the area since the
06:16 - rectangular class for get area is return
06:19 - this. width times this. height and the
06:22 - square has returned this.length time
06:25 - this. length it's going to behave how
06:27 - you expected so you are in able to
06:30 - substitute squares and rectangles and
06:34 - you're going to get what you would
06:35 - expect so this goes along with the
06:37 - listov substitution principle the ion
06:40 - solid stands for interface segregation
06:42 - principle a client should not be forced
06:45 - to depend on interfaces it doesn't use
06:48 - now JavaScript doesn't have interfaces
06:50 - so this principle doesn't apply as
06:52 - strictly as others but a good example to
06:54 - look at that demonstrates this principle
06:56 - in JavaScript is for classes that
06:58 - require large set settings objects not
07:01 - requiring clients to set up huge amounts
07:03 - of options is beneficial because most of
07:05 - the time they won't need all the
07:06 - settings so let's look at the bad way to
07:08 - do it which is right here we're creating
07:11 - a Dom traverser class and we're going to
07:14 - pass in some settings so we're going to
07:17 - um put all the settings into here now if
07:20 - you see here it's going to run the setup
07:21 - function and it's going to get the root
07:24 - node which we're always going to want
07:26 - but the point of this bad example is
07:28 - that you may not always want the
07:30 - animation module so in this bad example
07:34 - you always have to pass in a root node
07:36 - and you always have to pass in the
07:38 - animation module because in the setup
07:41 - it's going to access the animation
07:43 - module. setup but we may not need to
07:46 - animate so in the good way to do it
07:50 - we're going to make passing in the
07:51 - animation module optional so it's pretty
07:55 - similar but we are going to have the
07:57 - root node and when we're creating the
07:59 - Dom traverser we're also going to have
08:01 - options and anything in this options
08:04 - object is optional we're going to set
08:07 - the options to the settings that options
08:09 - that we passed in from here and here
08:12 - we're always going to set the root node
08:14 - to settings that root node and then
08:16 - we're we're going to call the setup
08:17 - options function down here and now here
08:20 - it's if this. options. animate module so
08:24 - if we passed in the animates module then
08:27 - we're going to run the setup for that
08:28 - but if we didn't pass it in we're not
08:30 - going to run the setup so it's optional
08:32 - whether you pass in these options or not
08:35 - and the last part of the solid the d
08:38 - stands for dependency inversion
08:41 - principle now this is another principle
08:44 - best explained by example but let me
08:45 - tell you the definition first this
08:47 - principle states two essential things
08:50 - one highlevel modules should not depend
08:52 - on low-level modules both should depend
08:54 - on abstractions and two abstractions
08:58 - should not depend upon details details
09:00 - should depend on abstractions this is
09:02 - all about handing over control from the
09:04 - function itself to the color of the
09:07 - function so let's look at the the bad
09:10 - way to do this so in the bad way we're
09:12 - going to create this inventory tracker
09:14 - class and it's always going to use the
09:18 - inventory requester class so you have no
09:21 - choice to use the inventory requester
09:23 - class and the good way to do it we are
09:26 - going to be able to choose which
09:28 - inventory request we used so here um
09:32 - when we create this um inventory tracker
09:34 - we're going to create the new inventory
09:36 - tracker which is this and we're going to
09:37 - pass in these uh inventory items here
09:41 - it's going to sign the items to the
09:43 - items and then we're going to set the
09:46 - requestor to a new inventory requestor
09:48 - up here and this inventory requestor is
09:51 - always going to use the HTTP method so
09:55 - when we do inventory tracker. request
09:57 - items it's going to to use the requestor
10:01 - we set up here which is the inventory
10:02 - requestor to request items and it's
10:04 - going to request the items using
10:07 - HTTP now we may not always want to use
10:10 - HTTP so instead of always depending on
10:14 - this inventory requester class we want
10:18 - to give uh give ourselves more options
10:21 - so here's the good way to do it we're
10:23 - still going to have the inventory
10:25 - tractor but instead of just passing in
10:28 - items to the inventory tracker cuz
10:30 - remember up here we only pass in items
10:33 - now we're going to pass in items and
10:36 - we're going to pass in the requestor so
10:39 - remember before the requestor was always
10:42 - the same but now we are going to be able
10:46 - to pass in a different requestor so
10:48 - there's two types of requesters we have
10:51 - um requestor version one and requester
10:53 - version two requestor version one is
10:55 - going to use HTTP requestor version two
10:58 - is going to use we websockets so we can
11:00 - now use the inventory tracker class for
11:03 - both HTTP and websockets we just pass in
11:07 - a different requestor and it's going to
11:08 - set this that requestor to whatever
11:10 - request we passed in and then when we
11:13 - request items um it's going to either
11:16 - use um the HTTP requestor or the
11:18 - websocket requestor to request the items
11:21 - so if you look down here I when we
11:23 - create the inventory tracker we're going
11:24 - to create a new inventory tracker we're
11:26 - going to pass in the items and then we
11:29 - we are going to pass in either the new
11:31 - inventory requester version two which is
11:33 - the websockets one or the version one
11:37 - this is going to allow us to easily
11:38 - substitute the request module and just
11:42 - make it easier to refactor and make it
11:45 - easier to use the inventory tracker
11:47 - class for different purposes well thanks
11:50 - again to Ryan McDermot who wrote the
11:53 - article that inspired this series many
11:55 - of the code examples come from his
11:56 - article check the description of this
11:58 - video for a link to his original article
12:00 - and thank you for watching my name is Bo
12:02 - KS don't forget to subscribe and
12:05 - remember use your code for good