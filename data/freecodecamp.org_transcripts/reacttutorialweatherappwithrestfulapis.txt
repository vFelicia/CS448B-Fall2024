00:04 - what's going on guys hope all we're
00:06 - doing and welcome to a brand new video
00:08 - tutorial this is my
00:10 - new videos are actually on the free cone
00:12 - camp um is that my boot and hopefully
00:15 - you can actually enjoy the tutorial as
00:17 - i'm actually enjoying making this and
00:19 - creating the application we're gonna do
00:20 - today so for this one we're gonna
00:23 - probably do is create a really awesome
00:26 - and cool react weather application so
00:29 - we're gonna just go ahead stop by step
00:31 - by step from scratch start up a project
00:34 - create a react application and create
00:37 - all the different components and stuff
00:38 - like this put them together with the css
00:40 - styles and
00:41 - different things actually to be handled
00:43 - and we are actually gonna go ahead and
00:45 - go through creating a full weather
00:48 - application with restore apis and we're
00:50 - gonna just go ahead and use um some
00:52 - things actually some help from uh apis
00:55 - actually public apis using the restful
00:58 - http apis uh like this api xu so we can
01:02 - get the weather data and the forecast
01:04 - for for probably a couple of days
01:06 - actually and for currents
01:07 - whether data for any city we want for
01:09 - example we want the current city that we
01:11 - are actually in and we can get all of
01:13 - the different data actually if you don't
01:15 - know me it is actually my learning
01:16 - website iphones.com and hopefully you
01:18 - can go ahead and check out the channel
01:19 - and down there so we can have like
01:21 - millions of other tutorials like this
01:23 - really awesome cool tutorials and stuff
01:25 - like that the other one for web
01:27 - development so let's go ahead and try to
01:29 - get started so the final application or
01:32 - the prototype we're going to work on um
01:34 - this is actually the the thing that we
01:36 - try to achieve throughout this
01:38 - tutorial so hopefully you can just go
01:40 - and imagine this in your head i've tried
01:42 - to put a prototype together in here just
01:44 - a quick one using figma so for those of
01:47 - you who doesn't know figma figma is just
01:48 - like a prototyping tool you can just go
01:50 - to figma.com it's a pretty pretty nice
01:53 - to prototype into you can go ahead and
01:54 - just go and use it if even though you're
01:56 - not that much of ux designer or
01:58 - something it simplifies your life as a
02:01 - web developer actually gives you a lot
02:03 - of other cool awesome features that you
02:06 - can use to prototype such an application
02:08 - so actually here we've got the weather
02:10 - uh title we've got the location name
02:12 - it's gonna probably basically just your
02:14 - location name uh like london or
02:16 - something we've got uh
02:18 - you know number of degrees or the actual
02:21 - current uh weather and we've got whether
02:23 - it's sunny or it's dark for example
02:26 - since it's nice it's just gonna show a
02:27 - logo or an image of of like darkness
02:30 - like a moon to show up that we are
02:32 - actually at night otherwise we show a
02:34 - sun so we are pretty much a day and we
02:36 - sell them like even it's sunny or with
02:39 - some clouds or partially cloudy or
02:41 - something there's something specifically
02:43 - for a weather application and the
02:44 - weather forecast and everything we can
02:46 - also have
02:48 - just simply this one uh this little tiny
02:50 - button here that allows you to select uh
02:52 - probably a location we can just go and
02:54 - click that to get a pop-up and we can
02:56 - actually search for a location we set
02:58 - the name of the location and there we go
03:00 - the location's just going to go ahead
03:01 - and change jump or layout up in the
03:03 - background we're gonna try to make all
03:05 - of that from scratch and hopefully you
03:06 - can actually enjoy that and get the
03:08 - experience behind creating uh like a
03:11 - really awesome
03:12 - application using react even though
03:14 - you're actually new you still need to
03:16 - actually follow up the story and try to
03:18 - figure out how things are actually
03:20 - working behind the scenes and in the
03:23 - future part in here the bottom bars what
03:24 - we're gonna probably do is just like you
03:26 - know show the forecast for the couple of
03:28 - next days like the four next days or
03:30 - something like this it's gonna show um
03:32 - what is going on in the next couple of
03:34 - days like sunday monday you got the
03:36 - point actually and uh the celsius
03:38 - degrees we can use thirds or celsius i
03:41 - prefer facilities in this case uh like
03:44 - you know more details about the weather
03:45 - for this particular days like whether
03:47 - it's sunny or cloudy or whatever thing
03:49 - uh you've got pretty much the point of
03:51 - how weather application works
03:53 - so let's go ahead and try to get it
03:55 - started for react application if you are
03:58 - a react developer you probably heard
04:00 - about through used create react app the
04:03 - command line tool that allows you to
04:05 - create quickly and set up uh
04:07 - applications or react projects very very
04:10 - easily without any hassles or problems
04:12 - or that much of configuration so i'm
04:14 - going to use creates um react up so
04:18 - probably you need to open up um
04:21 - a terminal here or you can even use cmd
04:23 - for windows i'm using c mender in here
04:25 - and you create react up i'm gonna put um
04:28 - weather
04:30 - up okay
04:31 - simple as that i just type in this one
04:34 - and it's probably just gonna start
04:36 - creating the for us and it downloads and
04:38 - resolve dependencies like the reacts
04:39 - react scripts and different packages
04:41 - that allows us to do so and there we go
04:43 - the setup and the creation of the
04:45 - project has been successfully done now
04:47 - we can just go ahead and use our
04:48 - favorite editor to
04:49 - uh start working on the application i'm
04:51 - going to use visual studio code it's
04:52 - just you know like very awesome and very
04:55 - good you can use whatever id you pretty
04:56 - much like so i'm going to just go inside
04:58 - of the weather upper folder that has
05:00 - been created for us from the create
05:02 - react absolutely and i'm just going to
05:04 - use a code to open it just type in code
05:06 - dots and it opens this project on a
05:09 - brand new instance of visual zero code
05:12 - so waiting for this just the projects
05:14 - you load and everything and hopefully
05:16 - everything can pretty much work fine so
05:19 - uh first experts do whenever you create
05:21 - a reacts project especially using the
05:23 - query react op cli is actually to test
05:25 - it and try to just go ahead and start
05:28 - run the start script to see actually
05:30 - what is going on behind the scenes so
05:31 - let me just get rid of that i don't
05:33 - really need any more i'm going to open
05:34 - up a new terminal instance of the
05:35 - integrated terminal from visual studio
05:37 - code
05:38 - and um
05:40 - okay now let's try to run the script
05:42 - which is nbm1 star so we can uh you know
05:45 - make sure that the application has been
05:47 - set up and created successfully without
05:49 - any
05:50 - problems or missing dependencies or
05:51 - something so we can stop developing the
05:53 - application without any problems so i
05:56 - actually decided to start the
05:57 - development process of this particular
05:59 - application from the scratch like by
06:02 - creating projects and show you
06:03 - everything going on behind the scenes so
06:05 - probably when people faces ears and
06:07 - doesn't know actually how to go or how
06:09 - to start or something like this so yeah
06:12 - they would have a problem and they would
06:14 - try to fix it by just you know following
06:16 - up from from just the beginning from
06:18 - scratch and just to make you guys uh
06:21 - feel comfortable following it along this
06:23 - one
06:24 - and there we go so the surface actually
06:26 - is starting without any problems npm
06:28 - didn't actually
06:29 - throw up any
06:31 - error or
06:32 - um yeah no exception at all so
06:35 - everything hopefully works pretty much
06:37 - fine
06:38 - if you take a look the application this
06:40 - is actually the main
06:41 - upds file so we can actually use this
06:44 - for um
06:46 - it's the main components that is being
06:48 - rendered
06:50 - so i can wait for a couple of seconds
06:52 - actually to
06:53 - um
06:54 - make this actually running around taking
06:57 - quite some time there we go and there we
06:59 - go we've got the application working in
07:01 - the boilerpan is actually
07:03 - running without any problems or issues
07:05 - so now we've got to simply just go ahead
07:08 - and start working on the application
07:11 - so starting off let's just try to
07:14 - um since our application if you take a
07:15 - look we're gonna i'm gonna use actually
07:17 - the prototype a lot let me just zoom in
07:19 - here so you can clearly see what's going
07:20 - on i'm gonna create first the container
07:24 - or the actual main components that are
07:26 - gonna pass all the prompts to this
07:27 - particular
07:29 - data so
07:31 - in this case i'm going to create i'm
07:33 - going to try i'm going to create a new
07:35 - file and i'm going to use some kind of a
07:37 - flux
07:40 - like flux state management you're
07:42 - probably familiar with this or not it's
07:44 - just like uh a design pattern for reacts
07:48 - applications that allows you to pass
07:50 - data between props very very easily as
07:52 - we know that you can only pass data from
07:55 - a parent to a child not a vice versa
07:58 - thing like passing it from a child to a
08:00 - parent
08:01 - so we actually need some global data to
08:03 - be accessed from the old actual
08:06 - uh components that is being rendered in
08:08 - the hierarchy and on the other hand we
08:10 - can have like a main upstate that holds
08:12 - the upstate actually of all components
08:15 - like the shared upstate between all the
08:16 - different components so any components
08:18 - in the hierarchy any component is being
08:20 - rendered when our application can
08:21 - actually access this data and alter the
08:23 - data and set the states and change all
08:25 - different things so it's a really really
08:27 - important thing to know even though our
08:28 - applications is very basic straight to
08:30 - the point it doesn't really need the
08:32 - flex design pattern but i just want to
08:33 - point you guys there too i'm gonna use
08:35 - it in this one for you actually guys so
08:37 - you can take later on the source code
08:39 - and just develop it take it to the next
08:40 - level add more features to it and make
08:42 - it just a real word weather application
08:44 - so you can easily edit the features
08:46 - without any problems uh whenever you
08:48 - find it's actually already been
08:51 - built on top of this design pattern so
08:54 - i'm going to name this for example um
08:56 - it's going to be the store so
08:57 - why i'm naming it store because it
08:59 - stores the critical
09:01 - uh global upstate so yeah store.js
09:05 - it's going to be a normal component so
09:06 - i'm just going to go ahead and do like
09:08 - import reacts
09:09 - okay from
09:11 - uh well react and i'm gonna do
09:13 - well
09:14 - um yeah it's gonna be a normal reaction
09:16 - but i'm just gonna do export defaults
09:18 - and let's try
09:20 - okay so it's going to be class i'm going
09:23 - to create a class in here i'm going to
09:24 - name a store and it's going to extend
09:26 - doesn't normally react dot components
09:29 - [Music]
09:31 - okay there we go and it's going to be
09:33 - having a constructor or something you
09:34 - can initialize any dna you can pass in
09:36 - props to this contract constructor which
09:38 - is not really that much of a big deal
09:40 - but yeah still worth having
09:43 - in here uh we can have like a mean
09:45 - upstate in here which is like this is
09:47 - going to be it so
09:49 - and i can give you like hints by
09:51 - comments in this like
09:52 - uh mean up state
09:58 - okay and we can have render function and
10:00 - what we want is all of the children
10:02 - that's going to be inside of that is
10:03 - actually
10:04 - or any children that we're going to pass
10:06 - to this one it's going to render it just
10:08 - inside the store we're going to have
10:10 - passed to them the state we have in here
10:12 - whatever data you have in here for
10:14 - example try to put some data like the
10:16 - name or like the application
10:20 - uh name and i'm just gonna put like the
10:22 - application name is gonna be weather up
10:24 - so yeah and here we try to return
10:28 - whatever
10:29 - uh like props dot children think but
10:32 - this doesn't actually how it works what
10:34 - you want is to take the state every
10:36 - single piece of data that is inside of
10:38 - this date or the state blocks we are
10:40 - having is you just need to pass it down
10:43 - into the hierarchy so whatever the child
10:44 - is gonna get it is gonna get it as a
10:47 - props so to do so we're gonna just
10:50 - use the help of props and children
10:53 - alongside react clone element function
10:56 - or the method that allows us to clone uh
10:58 - elements very very easily into
11:00 - components and passing the props down so
11:02 - here i'm gonna like return and it's
11:05 - gonna be a math function it's gonna use
11:07 - react thoughts well
11:10 - um children and for this reaction i'm
11:14 - gonna use the map function so the map
11:16 - function you need to pass it whatever
11:18 - child so we can do
11:20 - uh react children
11:22 - [Music]
11:23 - so we need to access the props i totally
11:25 - forgot about i thought i'm gonna use it
11:26 - actually stateless
11:28 - components and we can actually render
11:30 - that here and um
11:34 - what i wish to use
11:35 - well we've got a we've got a serious
11:37 - issue in here
11:38 - so
11:40 - clearly something is actually going on
11:42 - but
11:44 - and
11:45 - yeah
11:47 - so i think
11:48 - we having let me take a look in this one
11:54 - okay the map components taking actually
11:56 - uh children oh okay so if we need just
11:59 - to pass in the children my bad uh here
12:02 - so this stuff perhaps both children
12:05 - and the next thing it takes a call back
12:07 - with a child
12:08 - and we can use this so yeah
12:12 - i'm totally screwing up these right now
12:14 - so you probably see me typing in really
12:17 - weird air things and just stupid errors
12:19 - uh anyway so here we can use the child
12:22 - we're gonna probably return for each
12:24 - single child going to be passed into
12:25 - this we're going to probably just render
12:26 - one single charge it's going to be the
12:28 - up components that we're going to render
12:29 - inside of this so we're going to return
12:31 - and i'm going to return like um react
12:34 - dot clone elements and this clone
12:36 - elements it takes an actual element
12:38 - which is going to be the child so the
12:39 - child is actually a real word uh react
12:42 - valve element and it takes the second
12:44 - thing you'll clearly see here it takes
12:46 - whatever props you want to pass into
12:47 - this child and it just creates a brand
12:49 - new component with these prompts being
12:52 - passed into so the props you want is for
12:55 - example is actually the states that
12:56 - we're having up there so i can easily
12:59 - need to mutate this state so i'm going
13:01 - to do this dot
13:04 - state and make sure to mutate this using
13:07 - this expand um symbol thing or the the
13:10 - actual expand uh object iterator in here
13:13 - so just to like you know merge an object
13:16 - this is an object with another object
13:18 - and why i'm doing it here just merging
13:20 - the state objects with an empty object
13:22 - so we can create a different object
13:24 - rather than state so here if we try just
13:26 - to pass in the state just going to pass
13:28 - in the reference of the state we don't
13:29 - want that we want to mutate the actual
13:32 - state and pass it down to the child so
13:34 - you can have the same props as we do for
13:37 - the actual state so it's going to be
13:39 - simple as that everything in here is
13:40 - going to have the up name whatever we
13:42 - add in here it's just going to be right
13:43 - over there so yeah it's pretty good the
13:45 - pattern here it's basically not the best
13:48 - thing you can have you can have redox
13:49 - one of flocks fox actually have many
13:52 - different ways to be implemented on so
13:54 - it's just very basic in a very efficient
13:57 - way i actually have and i use a lot of
13:59 - my other projects so hopefully you can
14:01 - actually like it and everything this is
14:03 - just simply the store.js now we can jump
14:06 - back into the up.js um probably on the
14:09 - whole rendering i don't need any of this
14:12 - and they can just get
14:13 - rid of it and what i want since i need
14:16 - the styling so i'm just going to put um
14:19 - another file so i've got in here what is
14:21 - it actually the store inside the src i'm
14:23 - going to put another folder named it
14:25 - says this is going to hold our sas files
14:28 - and for actually working with sas and in
14:30 - node.js so or probably queer react app
14:34 - you've got to go ahead and install node
14:36 - so to do so i'm just going to do this so
14:38 - npm install node
14:40 - sas make sure to do this if you want to
14:42 - use less or something you can use the
14:44 - actual compiler for less but we want to
14:46 - use sas just only for development
14:48 - purposes i'm just going to install this
14:50 - for developing purposes
14:52 - now actually have been installed
14:54 - successfully now we can use sas very
14:55 - easily so i'm just going to do it here
14:58 - create a new file i'm going to name this
15:00 - probably just um up
15:04 - says so it's just going to be the main
15:06 - application style inside of this folder
15:08 - you can you can have a different ways to
15:10 - create that and structure it but yeah
15:11 - you know it's the best thing for me so
15:13 - it's actually better to change this from
15:15 - js to gsx so
15:17 - visual studio code any other id can
15:19 - actually recognize this as a real gsx
15:22 - files and it can actually activate some
15:24 - features just like image and we can use
15:27 - some html features or gsx features in
15:29 - this one or you can easily just go in
15:31 - down here select javascript and search
15:33 - for react javascript and change it but i
15:36 - would like very much to change the name
15:37 - in here and rename it just adding gsx
15:40 - and clearly see the icon changes into
15:42 - recognizing uh gsx or javascript and
15:45 - react and probably gonna get another
15:47 - error so for this we're gonna probably
15:50 - do is just simply go to the index.js and
15:53 - um
15:54 - it doesn't actually recognize any of
15:56 - that it can just add the gsx in here and
15:58 - everything should pretty much work fine
16:01 - or yep and yeah we've got a completely
16:04 - different um awkward situation that is
16:07 - actually happening
16:08 - for this
16:10 - and i still can't quite actually figure
16:11 - out why but yeah
16:13 - so if i try to keep recompile this and
16:16 - be on one start again
16:18 - and yeah we've got a complete difference
16:21 - here which is like react scripts are not
16:23 - defined
16:24 - welcome mr heirs okay so they're just
16:27 - starting up let's try to fix this with
16:29 - npm install
16:31 - um
16:32 - well react script this sometimes happens
16:36 - when you actually configure or recreate
16:38 - react up projects then you actually
16:41 - install some other dependencies as we
16:42 - did just install the node says so it
16:46 - basically i don't know some kind of a
16:48 - really hard bunk it deletes the react
16:50 - script or it removes it from the
16:52 - pack.json so this is a really really bad
16:55 - thing to do
16:56 - um i should actually submit some issue
16:58 - or some other people actually should
16:59 - submit an issue into the
17:01 - uh
17:02 - actually the github issues for the query
17:04 - reacts app and they can
17:06 - let developers fix this as soon as
17:08 - possible because it's very very annoying
17:10 - for developing things in here now
17:12 - actually everything is working pretty
17:13 - much fine after installing the react
17:16 - scripts i don't know it's just a serious
17:18 - bug
17:19 - anyway so just like you know rendering a
17:21 - div in here just for testing purposes
17:23 - and you're pretty much working fine with
17:25 - all your problems as you can clearly see
17:26 - in here we've got the react and let me
17:28 - just open up the dev tools so we can
17:30 - clearly see what's going on behind the
17:32 - scenes now we're gonna probably do just
17:34 - you know put a div in here i'm just
17:36 - gonna put a div um i'm gonna put a class
17:38 - name for a div
17:40 - and um let's try to put the class name
17:43 - i don't know like this is gonna be the
17:45 - the main container then we're going to
17:46 - have just a smaller container inside of
17:49 - it so it's just going to mean it like
17:51 - main container okay
17:53 - and inside of that we're going to have
17:56 - is
17:57 - well another container so i'm just going
17:59 - to put another class name which is going
18:01 - to hold
18:03 - um
18:04 - well let's name this or let me just
18:07 - rename this like up container the
18:09 - problem is actually with renaming so
18:11 - the majority of problems are naming your
18:14 - variables and your classes and your ids
18:16 - and different things so just to have
18:18 - them nicely remembering and stuff like
18:20 - this so i'm gonna name like i don't know
18:23 - what is this
18:24 - name main container okay
18:27 - i'm gonna be just
18:29 - uh
18:30 - main contributor here and we can just go
18:32 - in and play with the sound a little bit
18:34 - so we're gonna have to see a sas style
18:36 - it's gonna be the up container first let
18:38 - me just first put the body
18:40 - and the html so i'm going to start with
18:42 - html and say
18:44 - party i don't know i named it sas okay i
18:47 - shouldn't have done that i should name
18:49 - this as css okay now it should work
18:52 - so bari and it can put 100 percent
18:57 - okay with
18:59 - is gonna be 100
19:01 - height it's going to be the same so 100
19:03 - high as well
19:05 - um
19:06 - well we're just gonna
19:08 - use the
19:09 - uh box sizing so i'm just gonna
19:13 - put box
19:14 - size in
19:16 - to border box this is the best uh box
19:19 - sizing
19:20 - that you can use actually for your
19:21 - application it's the best thing actually
19:23 - for having a smoothie layouts and
19:25 - responsive design so yeah this is
19:28 - basically what we should have done
19:30 - and let's try to get our classes so
19:32 - first i have up container so
19:35 - and inside of it i'm just going to use
19:38 - sas so i'm just going to put inside of
19:39 - him i'm going to have mean
19:41 - container okay
19:43 - and this is going to have like the width
19:44 - of 100
19:46 - percent so 100 okay
19:50 - the problem is actually with typing most
19:52 - of the time so yeah
19:54 - um 100 as well and
19:58 - it's very hard actually to type and talk
20:00 - at the same time so you got a point
20:02 - pretty much i'm going to use a flex
20:04 - display in here just to display things
20:06 - smoothly you can center things or align
20:08 - them in the center so what it wants i
20:10 - want to take this one um yeah that feels
20:13 - soft
20:14 - okay let me just refresh that what i
20:17 - want is actually to have them
20:19 - all in the center in here just the
20:21 - weather application the whole container
20:22 - of the application is going to be in the
20:23 - center and we don't really care about
20:24 - the other uh thing that we have so this
20:27 - is what i mean this is just going to be
20:28 - it and the other one is just like the
20:30 - outside
20:31 - page so we just only care about the
20:33 - inner container of the application in
20:35 - here the weather application
20:37 - it's gonna be the main container i'm
20:39 - gonna have like flex dos
20:41 - okay i'm gonna just do justify content
20:43 - to center
20:46 - and align items to center so we can have
20:49 - a perfectly centered
20:52 - um thing so let me just refresh that
20:54 - really quick hopefully i'm just not
20:57 - including his style anyways let me just
20:58 - go ahead and try to include the sound
21:00 - just by importing it i'm going to import
21:02 - this styles we're just going to says and
21:05 - updates css so update
21:08 - css there we go
21:11 - just saving that recompiling it
21:14 - should now we have them like uh
21:16 - horizontally centered but not vertically
21:18 - and most of the time the problem is
21:19 - actually with vertically centered so
21:21 - i've got the body taking the full height
21:24 - everything's taking the full height but
21:26 - the root is not so what i want is just
21:28 - like to add this the same thing
21:30 - to the id or fruits
21:34 - simple as that
21:35 - now there we go we've got them
21:36 - specifically centered right over here in
21:39 - the center and the container is actually
21:42 - probably just the main continuous
21:44 - actually working fine without any
21:45 - problems and you can put some
21:47 - constraints into it so it can put with
21:49 - and or i can put like minimum width of
21:52 - that it's going to be
21:53 - i don't know
21:54 - 300 pixels or something something like
21:57 - this let me just go ahead and copy the
21:59 - pixels of this this has 993
22:02 - and you know let's just go and try to
22:04 - copy this
22:06 - uh of the main width it's quite large
22:09 - so i'm going to try to put 600 pixels or
22:12 - something like this
22:14 - okay that seems that seems pretty decent
22:16 - it's not really that much of bad and it
22:19 - can put height the highs actually always
22:21 - fix it and it can put about 400 pixels
22:25 - of height
22:26 - and um if you take a look at that
22:29 - i think it's quite a lot
22:32 - so we can actually take this to 300 okay
22:35 - um
22:36 - yeah 300 seems quite decent without any
22:39 - problems it's clearly seen here just the
22:41 - the actual hovering
22:43 - and the outline it shows pretty good so
22:45 - let me just copy this put them right
22:47 - over here and it should be much worse
22:48 - and also i'm gonna put a display of flex
22:52 - into here so we can have this container
22:54 - as well going to be flex designed i'm
22:57 - just going to add a couple of things in
22:58 - here i'm just going to add for example
23:00 - um
23:01 - well let's try to add some borders so we
23:03 - can clearly see i'm just going to add
23:05 - the pixel with a solid and i'm going to
23:07 - add about 2 2
23:09 - or
23:10 - let's try a8 so we can have a decent um
23:14 - okay let's try
23:16 - 999 so we can have a decent grey here
23:20 - and i'm going to add the border radius
23:21 - as well so
23:23 - for a border region i'm going to three
23:25 - pixels and i'm going to say solid
23:30 - so okay i don't know i added solid but
23:32 - i'm going to say four pixels or even
23:34 - three pixels a little bit much better
23:36 - i'm just gonna copy everything in here
23:39 - okay just copying it it's actually a
23:41 - pain
23:42 - um just copy pasting it okay there we go
23:45 - and what he wants in here to design and
23:47 - actually to structure the application
23:49 - you're going to have two different
23:51 - halves the first half is the top half
23:53 - and we have actually the bottom health
23:55 - and this is actually the main container
23:57 - so the main container is going to be
23:58 - flexed like flex
24:00 - box so we're going to use the display
24:02 - flex and you're gonna have to split this
24:04 - into half so we're gonna have up section
24:07 - or the top section and the bottom
24:08 - section both of them so we've got to go
24:10 - ahead and just add those uh exactly the
24:13 - same as we want them so up.js
24:15 - and we can actually go ahead and try to
24:17 - put them
24:18 - right over there so i'm just gonna do
24:20 - uh this is the main container i'm gonna
24:22 - add in here
24:23 - uh dots top
24:27 - uh okay section
24:29 - and we're gonna have another one so it's
24:31 - going to be
24:32 - bottom section there we go
24:35 - and this is going to be actually the top
24:37 - section i'm just going to put top on it
24:38 - so we can easily structure these things
24:40 - and we can put them together without
24:42 - your problems and probably here we're
24:45 - gonna use uh since we want them in rows
24:48 - not columns so we're gonna change this
24:50 - to actually flex display or for flex
24:53 - direction to very say uh simply you see
24:56 - the flex call of the stream main axis
24:58 - has the same orientation
25:01 - so this is actually what it wants with
25:02 - one of them actually actually both
25:04 - columns like this first column and the
25:05 - second column in here so i'm just going
25:07 - to save that and this should hopefully
25:10 - there we go so this first column the
25:11 - second column as we said
25:13 - and we've got the main container in here
25:15 - but it's not taking the full width
25:18 - how to do so i'm going to use the bases
25:20 - or flex
25:21 - main um attribute here to set this i'm
25:24 - going to set 100
25:26 - for both of them but actually it takes
25:28 - them out of control i'm just going to
25:30 - say 50
25:32 - out of the worth so they have the top
25:35 - has the first top and the bottom
25:37 - actually has
25:39 - what's left from it i'm just going to
25:40 - need to copy this from it and it should
25:42 - pretty much work fine so
25:44 - i thought of that it's going to be the
25:46 - main container i'm just going to put
25:47 - both of them so just just top section
25:50 - i'm going to put flex and also the
25:53 - bottom section so
25:56 - and flex right over there so if you try
25:59 - to refresh that there we go we've got
26:01 - both of them this is the top this is the
26:03 - bottom and they have like completely
26:05 - separate paths uh from from actually you
26:07 - know with different things in here
26:08 - without any problems or issues so we've
26:11 - got them covered successfully let's go
26:12 - and try now to work for the top half and
26:16 - try to place some actually data that we
26:18 - can actually later on change and make it
26:20 - dynamic we just need to put for now just
26:22 - a static data so later on we can i don't
26:25 - know hook up or just try to call an api
26:28 - and give the data and make it actually
26:30 - work as a dynamic thing as actually you
26:33 - know changes every single day changes
26:35 - whenever you choose a location it
26:36 - changes it changes over you know when
26:39 - time passes and so on and so forth so we
26:41 - can actually visualize a real world
26:43 - application or weather application but
26:45 - for now we just need to get the data out
26:46 - there just need to structure it and
26:48 - start with the css like to put the data
26:50 - so this is actually what you want
26:51 - whether you're actually designing or
26:53 - creating a react application whether
26:55 - another vanilla javascript application
26:57 - any framework you actually use in
26:58 - angular vue.js so this is actually the
27:01 - steps that i would like recommend for
27:03 - you guys to go through uh for every
27:05 - project for every application either a
27:07 - simple or a huge application of course
27:09 - when you're dealing with a large
27:10 - application you're gonna need to
27:11 - prototype a lot you're gonna put your
27:13 - classes inside of like uml or some some
27:16 - diagrams in order to simplify
27:18 - this kind of things for you and make
27:20 - them easier for you actually to reach
27:22 - and understand the whole complicate
27:24 - complexity for large application but
27:26 - never mind actually just for a simple
27:28 - one just need to prototype like this
27:30 - just get things up um put them
27:32 - statically like text in here so you can
27:34 - easily visualize them and uh you know
27:36 - design your interface first then add the
27:38 - functionality to it
27:40 - so jumping in here uh since we're going
27:42 - to work on the top uh corner of it i'm
27:45 - just going to put that i'm gonna go to
27:47 - inside of the src create another folder
27:49 - i'm gonna name this folder like
27:51 - components so
27:53 - it's gonna hold all the components just
27:55 - the best practice actually when when it
27:56 - comes to react applications is to put
27:59 - your site components your like you know
28:01 - uh small components into a different
28:03 - folder called components then you can
28:05 - actually call them from the main
28:06 - application components i'm going to
28:08 - create the first one um it's going to be
28:10 - top dots
28:13 - gsx so and i'm going to create another
28:15 - one it's going to be the bottom.jsx
28:17 - so you can actually name them whatever
28:19 - uh but just you know naming like this
28:22 - would be pretty good i'm going to import
28:23 - first uh reacts from reacts as we always
28:26 - do so
28:28 - and am going to just export defaults a
28:31 - normal component a stateful component
28:33 - actually not going to work with
28:34 - stateless components in this case i'm
28:36 - going to say
28:37 - top
28:39 - um okay top section
28:42 - the same like this is a little bit much
28:44 - better we're gonna react start
28:46 - components
28:48 - and it's gonna have a constructor as all
28:50 - of them does and takes up props
28:53 - and actually we can we can call super
28:56 - products
28:57 - and we can have a state in
28:59 - an empty object of states and just a
29:01 - render function very simply and this
29:04 - return render function what it does it
29:05 - just like returns another container you
29:07 - can actually use um
29:10 - i don't know you can use it like a div
29:12 - in this case
29:14 - and
29:15 - you can put something like this inside
29:17 - of it
29:18 - just for a quick visualization you can
29:20 - copy all the things in here and put it
29:22 - in the bottom uh without your problem
29:24 - just changing this to bottom section
29:27 - and
29:28 - going here changing it and there we go
29:30 - just you know you've got two separate
29:32 - files two separate sections for you
29:34 - ready to go now jumping back into the
29:36 - up.js and here we actually can import
29:39 - our sections so i'm gonna do imports
29:43 - um
29:44 - okay top section
29:45 - [Music]
29:47 - and from the components folder i'm gonna
29:48 - go inside of components to grab the top
29:51 - and there we go so i'm just gonna go in
29:53 - and render
29:54 - this section inside of here and okay
29:58 - and there we go it does have no props
30:01 - actually so we can easily just render it
30:03 - simply just by calling the components
30:04 - like this and it should be much workers
30:06 - in theory here now we can just move with
30:08 - the developments into the top.jsx
30:10 - instead of putting all the code inside
30:12 - up.js because it's way way much better
30:15 - for
30:16 - um you know a civil application so you
30:18 - can disappear it with our your team
30:20 - people can actually read it in this
30:22 - generation happening behind the scenes
30:23 - well then just putting all the chunk of
30:25 - your code logic and application logics
30:28 - and the ui and you know just mix them
30:31 - all together inside of a file that's
30:32 - gonna be really really painful for a lot
30:34 - of people actually who's gonna read your
30:36 - code so make sure to do so in the right
30:39 - way
30:40 - um here if we take a look on the
30:41 - prototype what he wants is first to get
30:43 - the title up and the title is actually
30:45 - gonna be centered right over here so
30:47 - we're gonna use the display flex and
30:50 - let's go and get this out of the way so
30:52 - i'm just going to create a class in here
30:55 - class name i'm going to name this for
30:56 - example i don't know let's try to
31:00 - top
31:01 - container okay that seems quite decent
31:04 - um inside of the top container we're
31:06 - gonna have and i'm gonna have the top
31:07 - title
31:08 - and we're gonna have actually another
31:10 - stateless component i'm just gonna
31:12 - create it down here just in a second so
31:14 - i'm gonna have this is actually the
31:16 - title i'm to say div da title
31:20 - i'm just going to name it like this
31:22 - for the class name and here i'm going to
31:24 - say
31:25 - this is going to be actually the weather
31:28 - up i just try to name the application
31:30 - actually whether up instead of like
31:32 - weather up like this
31:34 - and it actually means the weather up
31:36 - always so you always actually get your
31:38 - weather or something you can choose
31:39 - another meaningful
31:40 - name for the application of course i'm
31:42 - not that much of a
31:44 - person who actually
31:45 - does the name you know uh selection or
31:48 - something this i'm not good at it at all
31:49 - so yeah hopefully you can just go ahead
31:51 - and figure out a better name for this
31:53 - and let me know why not so
31:55 - um it's gonna be the weather application
31:57 - jumping into the style let me just move
31:59 - this into alongside the top.js in there
32:02 - um here we're gonna have
32:05 - so the title but inside of the top
32:08 - section and we're gonna have actually
32:10 - this this actual container so it's gonna
32:11 - be the top container or we can easily
32:13 - just move it right over here so
32:16 - it's not going to be having any any any
32:18 - bad but the best thing is not to
32:21 - mix the up.css or the uh the main
32:25 - css styles all of them just put them in
32:27 - one single file this is going to be
32:28 - really painful as well so you need for
32:30 - each component to split the sas or the
32:33 - split the style for them and put each
32:36 - style on a separate file for each
32:38 - component and when i talk when for each
32:40 - component is actually when you have big
32:42 - components like components that plays
32:44 - major roles on the development of
32:46 - application when it comes to component
32:47 - for example to a button
32:49 - is actually if you re going to reuse
32:51 - this button across the whole pages of
32:54 - your application a lot of other
32:55 - components gonna depend on this button
32:57 - you're obviously gonna go ahead and do
32:59 - the sound for them uh separately in a
33:01 - separate style sheet file so it's gonna
33:03 - be way much better for you actually guys
33:05 - i'm gonna put here um another one which
33:07 - is gonna be the top style or the best
33:10 - way actually to go with this one
33:12 - is let me just go ahead and show you
33:13 - this i'm going to create another folder
33:15 - i'm going to name this top i'm going to
33:17 - create another one going to name it um
33:19 - bottom
33:20 - so we can just copy this and put this in
33:23 - the top uh it says move okay and any
33:26 - actually visually your code likely tells
33:29 - you to or notifies you if you want to
33:31 - like update the imports to for the
33:33 - moving files i am going to say yes okay
33:36 - i'm going to take the bottom as well
33:37 - move it in here and it's going to ask us
33:39 - again
33:40 - so
33:41 - hopefully it does actually be asking
33:44 - i don't know something is actually wrong
33:45 - with this anyway so i'm just going to
33:47 - rename this into index.js and what i'm
33:50 - doing in here is just going to like
33:51 - whenever you try to access the top
33:54 - just only the top directory in here or
33:56 - the top folder it automatically knows
33:58 - that we want the index.js if you specify
34:00 - another file name obviously just gonna
34:02 - go ahead and import the file name for
34:04 - you simple enough i'm going to change
34:06 - this as well in here
34:08 - i'm just going to put it
34:09 - index.js so now we have like this is the
34:12 - bottom this is the main entry point of
34:13 - it and we can put some style files in
34:16 - here i'm just going to put like style
34:17 - dots scss for this i'm going to create
34:20 - another one in here so it's going to be
34:22 - styled.scss pretty great
34:24 - um here we're going to have the style
34:26 - for the actual top file
34:29 - so let me just move this into it
34:31 - it's actually in the top
34:33 - so we're gonna have the top container
34:36 - it's gonna be the main container inside
34:38 - of it we have a title
34:40 - and the top containers i've said it's
34:41 - gonna be display flex so it's gonna have
34:44 - like a flex display
34:45 - and flex direction is gonna be a column
34:48 - so
34:49 - uh columns actually just you know like
34:51 - um to display them uh vertically in here
34:54 - so yeah instead of horizontally if you
34:56 - want horizontally you can use the row
34:58 - instead of the column you can use also
35:00 - reverse row reverse column and stuff
35:01 - like this uh here i'm going to put for
35:03 - example let me just set the funds family
35:06 - for this one so we can easily change it
35:08 - later on i'm going to say from family
35:11 - i'm going to use the oxygen
35:12 - if it is actually defined for your
35:14 - browser or something i'm going to use as
35:15 - well sinceriff instead of it
35:17 - in case this is not defined we will just
35:20 - you know fall back in into the songs
35:22 - serve
35:23 - fun so i'm going to set a font size
35:26 - so the font size is going to be about 22
35:29 - pixels because it's kind of a title so
35:31 - we want it to show up and the line
35:34 - in here and we're going to have like a
35:35 - color for it so the color is going to be
35:37 - fff for completely white
35:40 - and yeah so
35:42 - this is this is basically what we want
35:43 - here we need to center it since we want
35:45 - this into the actual center
35:47 - so we probably what we want is all the
35:50 - other components actually we want them
35:51 - into the center so we can just take this
35:53 - and put it right over there so
35:56 - we will think more about this select
35:57 - location we can have this button uh let
36:00 - me just
36:01 - move this so we can have this button
36:03 - moved out into right here we don't have
36:06 - to do anything with the other spaces in
36:08 - there
36:09 - um yeah we can we can have that but it
36:12 - depends on you and how you want to
36:13 - layout or style and structure your
36:15 - application so i'm just going to do um
36:19 - okay justify consists i'm going to
36:21 - center it since actually we're using a
36:23 - column so this probably should pretty
36:26 - much work and make sure to include the
36:29 - style file here so we can recognize this
36:31 - really easily so you can just go ahead
36:33 - and do
36:34 - cycle css now it tells us that it
36:36 - couldn't open up anything in here so
36:38 - need to just jump back into the up.jsx
36:42 - and actually you couldn't find that or
36:44 - something so
36:47 - yeah it's pretty bad from
36:50 - there we go just by referencing the
36:51 - index when you actually go ahead and
36:54 - exit the the actual running watch or the
36:56 - server development just you know control
36:58 - c and you can remove this index and you
37:01 - can just go ahead and rerun that because
37:03 - it has a also another bug i found out
37:06 - about that it actually doesn't recognize
37:09 - the index whenever you try to rename the
37:10 - files once it's actually running or
37:12 - something like this so just you know get
37:14 - your head over it try to fix it or
37:16 - something like this now it works without
37:17 - any problems hopefully uh we can jump
37:19 - back into the reacts application
37:22 - um yeah it shows actually nothing for
37:24 - the top container or something it does
37:27 - shows nothing because we have
37:30 - we haven't set any background yet so
37:32 - we're just going to try to grab this
37:33 - background this really nice dark blue
37:36 - background and try to put it right over
37:38 - there
37:38 - so i'm gonna go to the style top i'm
37:41 - gonna say background color
37:45 - okay i'm gonna just paste the color
37:47 - and hopefully now it shows but the
37:50 - height is actually not taking the full
37:52 - space i'm just going to say height to
37:54 - 100
37:55 - as well as the width so
38:02 - and there we go so just control s there
38:04 - we go we've got we've got now uh the
38:06 - weather up actually 22 pixels is quite a
38:08 - lot i'm just going to move it to 20
38:11 - and it's actually centering it i don't
38:13 - want the just of my contents yeah since
38:15 - we are using the column so we need to
38:17 - use the alloying items
38:20 - okay
38:22 - now we should pretty much work there we
38:24 - go we've got the weather up perfectly
38:26 - centered up there and with everything
38:28 - pretty much working fine without any
38:29 - problems or issues or something and
38:32 - everything that's actually working as
38:33 - expected now we can have another
38:36 - component that is going to be placed
38:38 - right down here which is going to play
38:40 - the role of displaying all the data that
38:42 - is about this so all of this data is
38:44 - actually going to be grabbed from the
38:46 - api hook so whenever we call the api and
38:49 - the api i'm going to use is a
38:51 - i don't know api xu or something like
38:53 - this dot com it's pretty good it gives
38:55 - you
38:56 - a really nice
38:58 - you know free trial about about 10 000
39:01 - hits a month or something like this so
39:02 - we can use this and test any career
39:04 - application probably not going to reach
39:06 - out ten thousands a month you can have
39:08 - another
39:09 - apis uh services that provide aps like
39:12 - this for free you might find another
39:14 - better one
39:15 - you know you can just go ahead and just
39:16 - update the application like this and
39:18 - that would be really nice for you so as
39:20 - i've said is going to be all of it just
39:22 - a containing component so we can create
39:23 - another component
39:25 - separately for it and it's going to be
39:27 - um
39:28 - well another stateful components
39:31 - uh for this one so i'm just going to do
39:34 - a class
39:36 - inside of this we can actually have it
39:37 - inside of this or we can create a
39:39 - separately different file the best way
39:41 - is actually to create a separate file
39:43 - because
39:44 - you know you can take it as each file
39:46 - takes one single component unless a file
39:48 - has a stateful component and a status
39:51 - component when it comes to status
39:52 - components it doesn't actually count as
39:55 - a real components you got the point
39:57 - pretty much so here we can create um
40:02 - i don't know so
40:04 - we can we can call this like
40:06 - weather.jsx or something
40:08 - okay that seems quite interesting
40:11 - um
40:12 - okay we can
40:13 - name this reacts from reacts
40:15 - [Music]
40:17 - and i can export defaults
40:22 - i can put a class name it whether
40:26 - okay and extend
40:28 - react stop component
40:31 - uh it's gonna have a constructor and
40:33 - everything and why i'm adding a stateful
40:35 - component instead of a status components
40:36 - because we're going to have a state it's
40:38 - going to be managed by this since we
40:40 - need an api call we need to hit the
40:41 - server and get the dna and feature from
40:43 - from the actual api the restore api so
40:46 - we need to change the state like over
40:47 - time we need to set the stage whether we
40:49 - set it to null since we haven't received
40:51 - or if there's any errors or something
40:53 - uh and we said the actual state update
40:55 - the actual current celsius uh in the
40:58 - weather we update the image and stuff
41:00 - like this so we're gonna see more about
41:02 - this when it comes to real world things
41:04 - when it comes to working with the uh or
41:06 - dealing pretty much with the restore
41:08 - apis
41:09 - and here i'm gonna have the render
41:11 - so just gonna be basically uh rendering
41:14 - a very basic uh scaffolding thing here
41:17 - what we have is actually a container so
41:19 - i'm going to return
41:20 - a div dots
41:23 - weather container
41:25 - okay
41:26 - and for this weather container we're
41:28 - going to have is
41:29 - actually the first is the location name
41:32 - then these two containers one is holding
41:34 - the image the other one is actually
41:35 - holding the currents
41:37 - um i don't know the current weather and
41:40 - just we have another container down here
41:42 - which is going to be sunny or shows the
41:44 - the current um weather
41:46 - uh details so sunny or cloudy or
41:49 - whatever things actually happening
41:51 - so we have in here it's gonna be the
41:53 - weather container it's gonna be flex
41:54 - design or flexbox
41:57 - um let me think about this a second so
41:59 - we can have the best i'm gonna create a
42:01 - div so
42:04 - um basically you can have another
42:07 - container inside of this i'm just gonna
42:08 - name this inner container so we can
42:11 - style them the best way
42:13 - and this container we're gonna have like
42:15 - above this
42:17 - um
42:18 - header
42:20 - and a footer
42:22 - so we can actually style it as this way
42:24 - and inside of this we can have two
42:26 - containers like
42:29 - image
42:31 - or
42:33 - yeah we can just call this image
42:36 - and another one we can we can call this
42:38 - actually
42:38 - [Music]
42:41 - um
42:42 - currents weather okay
42:46 - and there you go you can just put like
42:47 - 10
42:48 - um
42:50 - image here
42:55 - location name so we can actually test
42:56 - with them and we can see what's going on
42:58 - we can put for example sunny
43:02 - and there we go now okay the next step
43:05 - is to take this um components and
43:07 - actually call in the top in here so we
43:09 - can actually
43:10 - write before or right pretty much right
43:13 - after the weather up title we need to
43:15 - render this component and get everything
43:17 - as i've said i just want to put all
43:19 - static information in here that's why i
43:21 - added all the static text in here but
43:22 - later on we can use the um weather api
43:26 - to get all of the dynamic data on our
43:28 - components so just simply import that in
43:31 - here so let me just go ahead and do that
43:32 - really quick and then i'm going to say
43:34 - this is going to be the weather
43:35 - component and we're going to import it
43:36 - from the the file components that we
43:38 - have just created symbols that and now
43:41 - we just need to like render it right
43:43 - down here so i'm going to say weather
43:46 - and there we go okay
43:48 - so ctrl s save that and going back into
43:51 - the react application it's just going to
43:52 - use the hot reload or to reload for you
43:54 - guys in here and there we go you've got
43:56 - location name image here and 10 degrees
43:59 - in here and and then basically says it's
44:01 - sunny or something like this so it's not
44:04 - quite as we expected it to be but it
44:06 - does actually a great job so we're
44:07 - trying now to add some stylings uh the
44:10 - way i actually love to add stylings to
44:12 - my either like react applications or any
44:14 - other css style whether you're creating
44:17 - a normal static website html css website
44:20 - or you're dealing with a react
44:21 - application or any other framework
44:23 - you're using it doesn't actually matter
44:24 - because at the end you are going to deal
44:26 - with with the css so you need like a
44:29 - live preview of your css you can
44:31 - actually just go back in here type in
44:33 - the css save and and let the hellhol
44:36 - reload or you can go back and refresh
44:37 - that it's going to take quite some time
44:39 - for you actually guys to develop the
44:40 - application to see the actual size and
44:42 - since actually designers or who designs
44:45 - web page and web developers actually
44:47 - takes a lot of time to put a web page
44:49 - together they need to do a lot of
44:51 - modification a lot of um resizing things
44:54 - a lot of putting things in here color
44:56 - changing families and font sizes and all
44:58 - different things that makes you feel
45:01 - really uncomfortable while trying to do
45:03 - this so the best way is actually
45:04 - throughout the dev tools use the
45:06 - devtools the power of the dev tools and
45:08 - put some css styles from here so we can
45:10 - he really really helps you out
45:13 - throughout your journey as a web
45:14 - developer and putting css styles
45:15 - together so now i'm gonna probably do
45:18 - just go into the weather app or uh the
45:20 - weather container in here is completely
45:21 - received it's completely empty it
45:23 - doesn't have any style i'm just gonna
45:24 - start with the display i'm gonna put a
45:25 - flex display i'm gonna change the flex
45:27 - direction to a column so i want them
45:30 - like you know uh like you know just in a
45:33 - column way here but it's basically a
45:35 - little bit more complicated than that
45:36 - which is we have in here this is the
45:38 - header and we have like two components
45:40 - then we have the footer so this is
45:42 - actually um we're gonna have like three
45:45 - or one more container so this represents
45:47 - the header the other one represents an
45:49 - inner container and the last one in here
45:51 - the sunny thing represents the future so
45:53 - i've got to go ahead and work around
45:55 - with this because this way it's not
45:57 - going to work so we need to work around
45:58 - the structure and change it a little bit
46:00 - uh since we have added in here so
46:02 - clearly we see the inner container the
46:03 - footer and the header we already did the
46:05 - structure and everything so we need to
46:07 - structure it using the css style and put
46:10 - it actually together
46:11 - in order to actually you know make a
46:13 - difference
46:15 - so
46:15 - um since now we just put it like a
46:18 - display flex in here since the flex
46:21 - container and everything uh now we need
46:23 - to go into the header and i'm gonna say
46:25 - there's also gonna be a display
46:28 - flex but the flex direction is going to
46:30 - be low so it's always going to take the
46:33 - row thinking here
46:34 - um yeah that's basically that it is i'm
46:37 - going to go to the inner container and
46:39 - we add another display flex i'm just
46:40 - going to say flex but this time the flex
46:43 - direction is going to be real as well
46:44 - because
46:45 - we want them to be displayed as well
46:47 - like the image is going to be alongside
46:50 - the degrees or the clcs of the weather
46:52 - so basically this is the image on the
46:54 - right
46:55 - um
46:56 - image on the on the left side and we've
46:58 - got degrees in here on the right side
47:00 - basically this is basically what we want
47:02 - and finally we've got the feature so
47:04 - it's just simply
47:06 - as we did in the other side so i'm just
47:08 - gonna display flex and i can i can just
47:11 - like put flex
47:12 - or justify content to center this out
47:15 - because i need it in center as well as
47:17 - the location name i need this in center
47:19 - so we can just go back to the header and
47:21 - justify content to center it's already
47:24 - being centered because the within is
47:26 - taking the fool of it but you can you
47:28 - can see actually the difference when
47:30 - once the size is actually or the text is
47:31 - getting smaller so yeah it doesn't
47:34 - actually matter for this time now we can
47:36 - just jump back in here um we can go to
47:38 - the style of the weather
47:40 - and that if i added a style anyway so if
47:43 - add like i have a top style i can add or
47:45 - clear another style file but that
47:46 - doesn't really matter because it's not
47:48 - really that big of an application that
47:50 - much of large or something so i can
47:52 - simply just go ahead and try to put a
47:54 - header uh in here or try to create
47:57 - another container since it's inside the
47:59 - weather container here so i'm just gonna
48:01 - add a class i'm gonna say a weather
48:03 - container simply
48:06 - and i'm going to add dots um
48:09 - okay can't quite type i still can't find
48:12 - the type i'm going to add the header add
48:14 - this kind of things into it i'm going to
48:16 - add the inner container
48:20 - i'm gonna add the feature finally
48:22 - so when you just tone back copy both
48:25 - things it's just basically a bunch of
48:27 - display flex and stuff like this it's
48:28 - not really that much a big deal
48:30 - and i've got here the same thing for the
48:32 - future basically so just going to copy
48:35 - that just like centers the text
48:38 - and you can put that there
48:40 - now i should save that and it should
48:41 - pretty much take effects immediately
48:44 - without any problems as clearly see it
48:45 - works
48:47 - without any problems the one thing you
48:48 - just need to add in here just like
48:50 - justify content to
48:53 - center
48:55 - [Music]
48:57 - save that and it should actually take
48:59 - the center
49:01 - uh perfectly without any problems so
49:04 - yeah hopefully now it works
49:07 - so anyway let's just jump into now
49:09 - trying to add a little bit of better
49:11 - style to it because it looks really
49:13 - really ugly so in the header or the
49:15 - whole container i'm just going to change
49:16 - the color of the font to white because
49:19 - we are having a dark background so it's
49:22 - better to change it to a light color
49:24 - this is actually the best way all the
49:26 - best practices you can take it as a web
49:28 - designer
49:29 - and um well this is the color here we've
49:32 - got the location name and what i want is
49:34 - i just to get some a little bit of
49:35 - margin from the top from the actual
49:37 - title i don't want just all of them are
49:39 - stuck together in here on the top so
49:42 - instead of that i'm just gonna say
49:43 - margin
49:44 - let's stop i'm just going to say
49:46 - i don't know about 3am or something
49:49 - that's quite a lot um let's add one
49:52 - okay that seems something decent
49:55 - or 1.2
49:57 - okay that sounds good
49:59 - i can just copy that as well i always
50:02 - love to copy my things because saving
50:03 - changes is really important because you
50:05 - just refresh the page or you do some
50:08 - ugly mistake or stupid thing and all of
50:11 - your css styles in here are gone so make
50:13 - sure just go ahead and save them before
50:15 - you do a stupid mistake or something
50:17 - like this
50:18 - we've got the location name now the
50:20 - location name
50:21 - the image and all the degrees we've got
50:24 - now to go ahead and just grab the image
50:26 - and just display it over there and i
50:28 - need to just take the font size a little
50:30 - bit down because this is looking ugly i
50:32 - don't want it to look like a list so
50:34 - just one size let me just put it for
50:36 - example
50:36 - 18 pixels that's quite a large you're
50:39 - going to put um location name sampling
50:41 - this 30 pixels
50:43 - and i'm going to put for the inner
50:44 - container i'm going to put some
50:47 - well let's just leave it like this for
50:48 - the inner container i'm going to put the
50:50 - down or the feature
50:52 - just or fund size and i'm going to put
50:54 - it i think 30 pixels will do the job
50:58 - perfectly and there we go so we can just
51:00 - put that
51:02 - in here so
51:06 - okay
51:07 - styling can quantitative sometimes so
51:09 - yeah it's probably gonna take the hubble
51:11 - video
51:12 - uh that's why you see me actually doing
51:14 - a lot of it and since i haven't created
51:16 - this like uh project anyway it's the
51:19 - first time creating it with you like a
51:22 - live thing from scratch so i have no
51:24 - idea actually how it looks like or
51:25 - something like this and you actually can
51:28 - have some i don't know examples of how a
51:30 - developer actually works and how you can
51:33 - how you can you know take some tips
51:34 - techniques and how you can absorb things
51:37 - and you know use them
51:39 - for your side and help you guys into the
51:41 - other side i completely
51:44 - think
51:45 - i forget about taking something here
51:47 - which is the margin top i think yeah i
51:50 - just
51:52 - okay let me just uh take this really
51:54 - quick
51:56 - i can't quite stop so
51:58 - i'm gonna see 1.2
52:01 - yeah i'm gonna put the color to white
52:03 - i'm going to use hex in here because
52:05 - it's way much better
52:07 - i can get rid of that anyway here
52:09 - it doesn't really matter
52:11 - so we can refresh but still there's
52:14 - nothing actually taking effect or
52:16 - something
52:17 - uh yeah i'm missing i'm missing it
52:19 - ending here so it's not quite as
52:21 - expected to be weather container you can
52:23 - save that and there we go so location
52:25 - name sunny but um it's taking
52:29 - the margin from here while i shouldn't
52:31 - have put it there okay
52:34 - um good pretty nice actually so i can
52:36 - put some margin as well like margin top
52:38 - and margin bottom i can put about i
52:41 - don't know
52:42 - 8 pixels or something
52:45 - or let's say 10 pixels is quite good and
52:47 - we can put zero pixels from the left and
52:49 - the right
52:50 - and yeah it looks pretty decent let me
52:52 - just try to go ahead and grab this image
52:54 - i've already set up this image in my
52:56 - desktop i have just a messy desktop in
52:58 - here a lot of things that's going on but
53:00 - i can just copy these things i copy this
53:02 - both of these images uh which is going
53:04 - to be used for boston and this just like
53:06 - to shows the sun just for now just for
53:08 - the static thing because they are
53:09 - already out of the api it's going to
53:11 - completely change
53:12 - uh the look and feel of it so yeah it's
53:15 - basically
53:16 - just for now
53:19 - okay let's try now to
53:21 - take a look
53:23 - for this kind of things hopefully
53:25 - it should work pretty much the same so i
53:27 - need to go
53:29 - uh let me see slc uh clearly see they
53:32 - put in the logo inside of here so we can
53:33 - clearly go to the src reveal explorer
53:36 - and try to put something in there i'm
53:37 - just going to put a new folder named it
53:39 - resources inside of resources i'm going
53:41 - to put some
53:43 - like images or something you can name
53:44 - whatever folder you like but i'm just
53:46 - going to you know use this quite good
53:48 - name
53:49 - i've got sun.png and sunnyweather.jpg
53:53 - this is what i need so just refreshing
53:54 - that to make visual studio code aware
53:56 - about the new folder has been created in
53:58 - the in the directory of the working
54:00 - directory and now we can just go ahead
54:02 - and import it and since we need to
54:03 - import inside the weather components so
54:05 - i'm going to do that really quick in
54:06 - there and actually create react up does
54:09 - all the handling behind the scenes of
54:11 - images and stuff so you don't really
54:12 - have to care about how webpack does the
54:14 - bundling thing or how you actually can
54:17 - import an image using webpack gear
54:19 - reacts app has the configuration already
54:21 - so you don't really have to think about
54:23 - it just go ahead and implement it okay
54:27 - now we can um grab that really quick i'm
54:30 - just going to import it as a normal
54:31 - component so you can deal with images as
54:33 - a normal component i'm just going to go
54:35 - back since we are inside where are you
54:38 - beside the top so we can grab um
54:41 - sun image from
54:44 - coming back once okay is that going back
54:47 - we go to resources images and we grab
54:49 - the sun wng now we can create an image
54:52 - container here with this image here i'm
54:54 - going to create an image
54:56 - within src holding up this so it's going
54:59 - to be
55:02 - okay sun image
55:04 - i can just go and get rid of this
55:07 - i can put that and zero's actually gonna
55:10 - go so i'm gonna go in here and there we
55:12 - go we've got the sun but it's not quite
55:14 - centered and everything but i need to go
55:16 - ahead and try to add a little bit of
55:17 - style i'm gonna put it with 100 percent
55:20 - height 100 percenter takes the
55:22 - appearance container this is basically
55:24 - what i want to do
55:25 - so it takes the parent container with
55:27 - and now we can put the width the custom
55:29 - width to this one so for example kind of
55:31 - puts um i don't know
55:33 - 1am in here which is not what it wants
55:36 - okay heights uh
55:42 - three or something that's quite a lot
55:46 - okay seems seems quite good right now
55:49 - it's not really that much of ugly or
55:51 - everything
55:52 - but it looks pretty good everywhere so
55:55 - yeah
55:57 - i don't know but
55:59 - okay let's try to copy that i know
56:01 - uh go into the style inside of the inner
56:03 - container since all of them are inside
56:05 - of the inner container completes image
56:07 - you can put some with inside of it and
56:09 - inside of that we have an image tag or
56:11 - image element so we can refresh that too
56:13 - and that's why i love actually using sas
56:17 - or less and just like a css preprocessor
56:19 - because it helps you a lot to nest
56:21 - attribute or nest tags inside of other
56:23 - tags nest classes inside of ids and
56:26 - containers or children inside of its
56:29 - containers and so on and so forth so it
56:31 - really really helps out during the
56:33 - development of things like this
56:34 - applications so we can go for image and
56:36 - it can put the width
56:38 - a hundred percent
56:40 - and um
56:42 - okay you can put high as well so
56:45 - okay
56:48 - 100
56:49 - there we go so we should do the job
56:51 - perfectly but it's not perfectly
56:52 - centered as we thought it would now we
56:54 - need to fix it in some style in
56:57 - so we have the image and we have the
57:00 - actual weather they shouldn't actually
57:02 - take um
57:03 - the full height or something i'm just
57:05 - going to take
57:06 - telly to feed the contents
57:09 - and there we go and i'm just going to
57:10 - use the display flex so is that i'm
57:13 - going to use flex display to justify it
57:16 - now vertically inside of horizontally
57:18 - i'm just going to say
57:19 - align items
57:23 - and center there we go now it does the
57:25 - work we are perfectly i just need to
57:27 - take the font size a little bit up for
57:29 - this one
57:30 - but everything is actually working
57:32 - pretty much fine without any problems uh
57:35 - this class is actually named cringer
57:40 - and um it's not it's not much for this
57:42 - meant for this one and this one is
57:45 - actually hide to fits the contents
57:49 - basically yeah
57:50 - and um i'm gonna take the font size a
57:52 - little bit so it could be a little bit
57:55 - more obvious 20 pixels is that a good
57:57 - job
57:58 - or it's not so i can 23
58:02 - or even more than that it's 25 okay
58:05 - because this is the main thing you want
58:06 - to show up and uh yeah it's really
58:08 - important to show it up in a really big
58:11 - font size because it really really
58:13 - matters and then just go ahead and try
58:14 - to just copy this one
58:16 - uh yeah just gonna take it and
58:20 - it's out of the weather in here just
58:22 - going to put it right there and just
58:23 - copy paste in it
58:24 - so now we can look a little bit much
58:27 - better like a real world celsius thing
58:29 - and if you take a look it looks pretty
58:32 - much identical to this one
58:34 - uh not a big difference you just need to
58:36 - automate this and it takes the height a
58:38 - little bit of that and take this
58:40 - actually down a little bit so i'm just
58:42 - going to try to fix this same styles
58:44 - um of cuts where is that so let me just
58:47 - use the selection the inspection here uh
58:50 - it's actually a header or it's basically
58:52 - nuts okay
58:54 - where's that let me just grab this
58:56 - really quick
58:58 - it is inside of the title and it can
59:00 - take it
59:01 - down
59:03 - like this and it can add some margin to
59:06 - the top of uh
59:08 - five pixels that quite good okay
59:12 - pretty good nice
59:14 - you can take this um
59:16 - you can go to these style basically you
59:18 - think
59:19 - yep let me just
59:22 - now it looks pretty good there we go now
59:25 - what we need is actually we have we have
59:27 - done this kind of things in here with
59:28 - bit of the sun with that we just need
59:30 - the button in here which is the select
59:32 - location button that shows us some
59:34 - custom location that we can select and
59:36 - manipulate
59:37 - and actually we can select this location
59:39 - later on so we can actually
59:42 - probably just show up some kind of a
59:44 - pop-up whenever we click this button
59:45 - whichever pop-up we tell the user to
59:47 - enter the name inside of like an input
59:50 - tell the user to enter the name of the
59:51 - location he wants to get the information
59:54 - of the weather from then afterwards
59:56 - we're going to use the api that i showed
59:58 - you
59:59 - and we can we can actually send the
60:01 - request we grab the data about this
60:03 - particular city or a particular zip code
60:06 - and we get this data and actually we
60:08 - display it to him like the weather and
60:10 - we show him whether it's actually sunny
60:11 - or whatever other image in here we can
60:13 - automate this kind of things because
60:15 - this api that i'm just i told you about
60:18 - the api xu thing that allows you to
60:20 - actually get the weather it also
60:22 - provides you with images of real-time
60:25 - weather so whether you're actually
60:26 - getting sun it shows you an image of sun
60:28 - or it gives you in the callback in the
60:30 - response an image of sun or actually it
60:33 - gives you an image of knights like a
60:34 - dark moon or something like this so it's
60:36 - pretty identical and pretty good for us
60:38 - actually as a developers so you don't
60:40 - really have to do a lot of things i just
60:42 - like automates a lot of you
60:44 - a lot of things behind the scenes for
60:45 - you so you can care less about images
60:48 - and automation like this
60:50 - and yeah so
60:52 - uh we've got to go ahead and add a
60:54 - button here and it's like actually
60:55 - inside of the top so i'm just gonna do
60:58 - um let's name this a button
61:02 - i'm gonna take class name of
61:04 - a btn
61:08 - vtn
61:10 - okay selects
61:12 - location
61:15 - okay we have you can just have some kind
61:18 - of a style class in here like a common
61:20 - class which gonna name it btn
61:24 - well that would be better if we put in
61:26 - the side of the up.css so it's be
61:28 - available for everything i'm just going
61:30 - to name this.btn in here
61:32 - and
61:34 - yeah and i can put inside of here i can
61:37 - put some customization for this
61:38 - particular class like the btn select
61:40 - location class
61:42 - um which can be actually used for any
61:44 - other thing but it's particularly made
61:46 - for the location so we can just go ahead
61:48 - and put it inside of
61:50 - i don't know so we can we can put it
61:53 - just like the top container
61:55 - and it should be there just like leave
61:56 - it alone here okay pretty good no
61:59 - problems actually
62:02 - uh inside of this button what we're
62:04 - gonna do let me just try to put a button
62:07 - first then we can care about how we can
62:09 - style it or something
62:14 - okay
62:16 - there we go just put the name
62:19 - or the title of the button
62:22 - and yeah it doesn't actually look as we
62:24 - want it to be but
62:25 - it will so with this really nice color
62:29 - we try to make it with with some borders
62:31 - and broader idiots and stuff so
62:34 - it's gonna first i'm gonna put it um
62:38 - i'm gonna change the border to solid and
62:41 - uh put some kind of
62:43 - aaa coloring around there or just try to
62:46 - put two two okay that's that's not good
62:50 - uh ddd
62:51 - okay seems good
62:54 - we can go now to
62:57 - um
62:58 - let me just put some margin around it
63:00 - like the margin from the top and the
63:02 - left so you can put 15 pixels
63:05 - uh it looks pretty decent now
63:08 - and a zero from the left to the right
63:10 - and
63:11 - um
63:12 - you can jump in here
63:14 - you grab the color let me just
63:16 - select this really quick
63:18 - all the text but this one
63:20 - copy the hexadecimal value of the
63:22 - background and it can pull the
63:24 - background color really easily
63:27 - there we go kind of identical you can
63:29 - change the font size
63:31 - to 16 pixels that is quite large
63:35 - um you know seems seems decent to me
63:39 - or we can take it down a little bit much
63:41 - further
63:42 - i don't know what font size it's
63:43 - actually using but it's actually
63:47 - um
63:50 - let me select the text
63:55 - it's using um
63:58 - i don't think it's that available for us
64:00 - but
64:04 - let's try so once family
64:10 - [Music]
64:12 - i think so that is actually available if
64:14 - it's not i'm just gonna fall back to the
64:16 - sensor
64:17 - so you can easily use that
64:20 - and i can add some border radius
64:28 - quite a lot
64:31 - now it actually seems good okay two
64:33 - pixels is pretty decent
64:38 - and uh okay that that's actually pretty
64:41 - good i can change the color a little bit
64:43 - to make it a dark gray so we can put a8
64:45 - around there or a
64:49 - much better thing 5x5
64:53 - there we go
64:54 - wow
64:55 - as i quietly want it to be but
65:00 - okay that's that's pretty decent
65:03 - i try to copy
65:04 - into
65:06 - uh
65:07 - this one i'm gonna put just take them
65:10 - since the bottom i'm gonna take the
65:11 - margin
65:13 - and this and we can just lift the old
65:15 - all of the other ones to customizable
65:17 - things so we can copy that it can put
65:19 - inside of the button here and they can
65:21 - both have merged together without any
65:24 - problems
65:25 - and yeah that is actually working pretty
65:27 - much fine i can just go ahead and remove
65:29 - the outline from from the bottom here
65:31 - i'm going to say
65:33 - this and
65:35 - ouch or
65:39 - um
65:40 - yeah i'm gonna i'm gonna change the
65:42 - focus okay
65:48 - [Music]
65:50 - that should work if you try to press
65:52 - stance or something or try to focus the
65:53 - button in general you're not actually
65:55 - going to get um any outline or something
65:58 - like this that's pretty decent so it
66:00 - works as we expect it to be now we
66:03 - actually need to work a little bit on
66:04 - the bottom side in here so i'm going to
66:08 - bottom and the index.js for the bottom
66:10 - in here and we have just do a couple of
66:12 - things actually for it let's first just
66:14 - try to add the class name
66:16 - so i'm gonna do um bottom
66:19 - dash container it's just gonna be the
66:21 - container and inside of this container
66:23 - can clearly look how is that so if you
66:26 - clearly look in here i'm gonna just use
66:28 - this image in here from from this um
66:30 - process type so i'm just going to put
66:32 - this image in the background i just i've
66:34 - already got this image in my source code
66:36 - just put it there and we probably you
66:38 - probably not so we can just go ahead and
66:39 - later on at a forecast for the couple of
66:42 - next days we just do a very simple
66:44 - forecast because working on is going to
66:45 - take more much much more time it's not
66:47 - that much of complicated since you know
66:50 - the principles and actually the basics
66:52 - of getting restful api is done in here
66:54 - in just one single component which we're
66:56 - going to work on in a couple of minutes
66:57 - of course and getting everything done in
67:00 - here it's going to be just pretty simple
67:01 - just playing around with reacts and when
67:03 - doing single one a couple of times
67:04 - actually using a group and rendering um
67:07 - components couple of times actually just
67:09 - showing the forecast for every single
67:11 - day and you're done so this is pretty
67:14 - much it not that much of complicated or
67:16 - anything else so as i've said let's go
67:18 - and jump into my source code and have
67:20 - already uh put the image inside of as we
67:23 - have seen which is the sunny weather so
67:25 - it's a lovely image you can find
67:27 - may went much better image of course but
67:30 - let's just go and stick with this for
67:31 - now i'm just going to go to the style of
67:34 - the bottom and let's try to add to this
67:35 - so i'm just going to do bottom dash
67:37 - container so we're going to add a couple
67:39 - of styles i'm going to do a background a
67:41 - dash color to it
67:42 - and um or just like the background and
67:45 - we can
67:46 - we can basically put a url for this
67:48 - background
67:50 - uh it's gonna be we have the style
67:52 - inside of this so we need to get out of
67:54 - this
67:55 - and it's inside of components so we need
67:56 - to get out two times so we're just gonna
67:58 - go back once and go back twice and we
68:01 - can um
68:02 - go inside of resources then we grab
68:04 - images
68:05 - sunnyweather.jpg and it pretty much
68:07 - should do the job perfectly without any
68:09 - problems we might do some linear
68:11 - gradients above that but there's still
68:14 - not really that much of um thing let's
68:16 - try to put the width
68:18 - so it's going to be 100
68:21 - okay that's not really what i want uh
68:24 - the height as well is going to be 100
68:26 - and yeah there we go
68:28 - try to save that also make sure to go
68:30 - ahead and import this i'm not importing
68:32 - these style sheets so you're going to do
68:35 - style dots um scss which is referencing
68:39 - a relative path of it
68:41 - just saving this it should do the job i
68:44 - can go back in here um i think we're not
68:47 - seeing any changes anyway
68:49 - so
68:51 - let me just see this
68:52 - the bottom container is is this actually
68:54 - matching it or
68:56 - yep it is but
68:58 - uh it seems a little bit off
69:02 - okay let's check it's the bottom um i
69:06 - added a class of
69:08 - okay
69:11 - it's a top section in the bottom section
69:13 - okay i'm not even importing this either
69:15 - so yeah
69:17 - um go into the app.js and you need to
69:19 - import the top section it didn't do even
69:21 - that so i'm just going to do bottom
69:24 - section from
69:26 - components
69:27 - [Music]
69:29 - forward slash
69:30 - bottom and forward slash index so i'm
69:32 - going to grab the index from there and
69:34 - down
69:35 - most cases in here i can clearly see i'm
69:37 - putting the index i don't know for some
69:39 - reason it's giving me an error because
69:41 - in most cases like 90 90
69:43 - of times you're not required to put the
69:45 - index in here because node.js or i'm
69:48 - your compiler is actually webpack most
69:50 - cases
69:51 - it knows about that it's smart enough to
69:53 - know that you are wanting the index
69:54 - since you only reference the actual path
69:57 - in here the actual folder only without
69:58 - putting the name of a file inside of it
70:00 - it always going to go ahead and look up
70:02 - for a file name by default uh named
70:05 - index.something.js or typescript or
70:07 - something like this but in this case we
70:09 - are required to put it for some reason
70:10 - right now it's just like a really bad
70:12 - buck so it's very annoying you know
70:15 - here i'm going to put the same thing i'm
70:16 - just going to put
70:18 - bottom
70:20 - section and there we go so just simple
70:22 - as that we can now we can jump back in
70:24 - here
70:25 - hopefully we wait for it to compile or
70:27 - not taking quest on time and
70:31 - yeah there we go we've got a really
70:33 - ridiculous uh not centered image or
70:36 - something anyway so
70:38 - i need to work on this image a little
70:40 - bit so we can
70:42 - [Music]
70:44 - i could put this center or i can
70:47 - let's try to figure out something
70:50 - okay um
70:51 - so all these center is actually working
70:53 - for this
70:54 - kind of not really what i want spots
70:58 - um
70:59 - yeah it's it's a little bit annoying
71:01 - because the image is not fitting
71:04 - the right spot in here so yeah i want to
71:07 - just like to resize the whole thing in
71:09 - here it takes the full width and the
71:10 - full height of it so i'm going to add
71:12 - the property of background size so
71:16 - um
71:18 - so this property basically it lets you
71:20 - size the background um on an image
71:23 - program actually on a container however
71:25 - he actually wants as a cover as a
71:26 - content uh basically we want them to
71:29 - cover so it can actually scale and fits
71:31 - the inner width and the height of the
71:33 - container so this is what basically what
71:35 - we want and here we can put center and
71:37 - it can put out for example no repeats so
71:39 - it doesn't actually appear or something
71:40 - just to make sure that it won't repeat
71:42 - it anyway and there we go we've got
71:44 - everything basically working as expected
71:47 - but still not looking as we wanted to be
71:50 - in here and the preview it's a little
71:51 - bit deemed as see conclusion here so
71:53 - we've got some linear
71:55 - um color above this and this is actually
71:57 - the css code of this linear color i'm
72:00 - just going to copy i'm just going to
72:01 - show you what is what does this linear
72:02 - color does so here's the linear color
72:04 - you can um change it a little bit to
72:06 - look a little bit much better for us
72:08 - which i am doing now um to make it
72:12 - look a bit
72:14 - better and um
72:16 - yeah other than that it's just looking a
72:18 - little bit off so
72:20 - i try to look good okay this this seems
72:23 - decent um
72:24 - she's gonna go and copy the code and
72:26 - this is the nicest things about figma it
72:27 - lets you copy the css code right of the
72:29 - box so just you don't really need to go
72:31 - hang through it from the beginning and
72:33 - fix all the stuff and and all things
72:36 - around so just like to bring your
72:37 - ingredients you added that you tell it
72:39 - which degrees and you give it the
72:40 - hexadecimal color and from where it goes
72:42 - like from top to left or right to
72:45 - left and so on and so forth you've got
72:46 - like basic direction in and there we go
72:49 - so you can add this just before we
72:51 - specify the url and we can add um
72:54 - a comma and there we go
72:56 - it's just doing it basically as as we
72:58 - want it to be now pretty good you can
73:00 - even actually find a little bit better
73:02 - and smoother linear uh gradient color in
73:05 - here and much much better image you need
73:07 - to put in the background just you know
73:08 - if you do that make sure you just go put
73:10 - it pull a quest or something that just
73:12 - let me see your preview or your
73:13 - application your version of your
73:15 - application so we can i don't know see
73:16 - what you can actually do it and how
73:18 - productive you are
73:20 - so let's try not to basically copy this
73:22 - and go back in here go to the css style
73:25 - and
73:26 - where's the css let me just copy it just
73:27 - nearby this so we can work flawlessly
73:30 - and i'm just going to paste this one
73:32 - very simple save it and it should pretty
73:34 - much work fine it's clearly seen here
73:36 - nothing has been changed or something
73:38 - let me just get rid of that text it's
73:39 - really annoying i don't want any text or
73:41 - something i'm just going to keep it
73:43 - smooth and nice and empty for now so
73:46 - everything would look
73:48 - basically the ones
73:49 - or however you actually want it to be so
73:52 - looking pretty basic without any
73:53 - problems and stuff
73:55 - and now it's time actually for working
73:57 - with the actual api now what we need is
74:00 - to get the real dynamic data here all of
74:02 - those all of these like sunny tanks then
74:04 - the location name and this image in here
74:07 - all of them actually are static and
74:09 - since we are creating a real world
74:11 - weather application we don't really want
74:13 - to deal with any static things in here
74:15 - we want everything to be dynamic so we
74:17 - can just go ahead and put a request
74:19 - there and uh you know fetch some data
74:21 - from a specific api and we get the the
74:23 - json
74:24 - data from from that for the forecast uh
74:27 - for like the current weather for today's
74:29 - weather basically and for the forecast
74:31 - for example for the next 10 days or
74:33 - something like this you can specify how
74:35 - many days you can get and there's a
74:36 - limit for that of course but the ap
74:38 - we're gonna use is actually called api
74:41 - xu it's it's a really awesome weather
74:43 - api and the reason you choose this over
74:45 - the other is because it gives you like a
74:47 - 10 000 hits per month for free and since
74:50 - we just want them for testing purposes
74:52 - it's not really for
74:54 - commercial things or something like this
74:56 - so it's definitely worth it and you can
74:57 - just go in and try it it's super simple
74:59 - it gives you a really meaningful data
75:01 - that you can use so just go ahead and
75:03 - register that's dislike the website so
75:05 - just go
75:06 - apixeo.com uh you can just go and create
75:08 - your accounts uh basically you need the
75:11 - key phrase let me just go ahead and just
75:13 - give you a quick um
75:15 - overview of this api so this like an
75:17 - interactive api explorer that lets you
75:20 - test the api and see what does the api
75:22 - actually have and
75:24 - what data does it return for you what
75:26 - does it provide and does it you pretty
75:28 - much need it or not it gives you two
75:30 - options xml json of course we're going
75:32 - to use json because xml is just like
75:34 - hell and since we're using javascript
75:37 - json is like
75:39 - the feature for javascript basically you
75:41 - want now nowadays to use json for
75:44 - everything so i know so we want to use
75:46 - https over http for a secure
75:49 - layer and here you just put the value
75:52 - for the query which is basically the
75:54 - city name um that you want to get the
75:56 - forecast for it's like you need to use a
75:58 - city name you can't use a country or
76:00 - something because a city name is is what
76:03 - basically describes a weather forecast
76:05 - and here you can choose a courage
76:07 - weather a forecast whether um like
76:10 - search also complaining in history
76:11 - whether that's like you know
76:13 - already or the history of the weather of
76:15 - the past days past years or something
76:17 - there's there's not really much
76:19 - instruction we want we want a real-time
76:21 - weather application so we can get the
76:23 - forecast weather or the current weather
76:24 - let's just go and try to work with the
76:25 - forecast weather because later on we
76:27 - might add as i've told you the forecast
76:29 - for the couple of next days uh so we can
76:31 - just go in and put the forecast for um
76:33 - the weather of the next days basically
76:35 - so we want to use the forecast weather
76:36 - instead of the current weather here we
76:38 - put the query so which city i'm going to
76:41 - just put london
76:42 - um just use it as an example you can put
76:44 - how many days you want to get there's
76:46 - like up to 10 days of a forecast i'm
76:49 - just basically gonna put for example
76:51 - five it's quite decent and you can just
76:53 - go and show response make sure to put
76:55 - your api key in here in order to be able
76:57 - to test that and it gives you this
76:58 - really awesome uh
77:00 - json structured data in here
77:04 - really really easy with with a really
77:06 - important and crucial information that
77:08 - we need through our application it gives
77:09 - you the name of the city it gives you
77:11 - the region specifically gives you for
77:13 - example the latitude the longitude uh
77:16 - which you might not need it for this
77:17 - application but you definitely need it
77:19 - for other things um that gives you an id
77:22 - so where exactly is like inside of
77:24 - europe and london so a local time and a
77:27 - local time is like
77:29 - what is the current time of getting this
77:30 - weather uh data so you can you can do
77:32 - plenty of things for this uh there's
77:34 - also occurrence objects in here so like
77:37 - the last updated the last update as well
77:40 - uh epoch just like the milliseconds or
77:42 - it's a timestamp a temporary in celsius
77:45 - or temporary infrared so
77:48 - i'm going to basically use celsius in
77:49 - this case like four degrees uh is day so
77:52 - it's like a bullion tells you if
77:55 - this city is currently out today or at
77:57 - night it's basically when it tells you
77:59 - zero so you can take it as a boolean
78:00 - either zero one so it basically at night
78:03 - uh the condition of this is clear and it
78:05 - gives you the icon and the icon i'm
78:07 - talking about is basically the icon that
78:09 - we have used in here so it's like the
78:11 - sign icon either it gives you a sun icon
78:13 - or it gives you something like um
78:15 - a night icon like uh a moon half moon
78:18 - icon cleary scene here it's a half moon
78:21 - icon you can clearly go ahead and use
78:22 - this because as i told you we're gonna
78:24 - make everything image the text and the
78:26 - location name and the sunny text in here
78:29 - uh everything is going to be dynamic so
78:30 - we're going to use this weather api
78:32 - really really awesome
78:34 - and a couple more other things and also
78:36 - we've got an important thing like the
78:37 - forecast and it gives you an array of
78:38 - forecast days signing off from the first
78:40 - day so we're starting from zero uh this
78:42 - is the first day temperature and the
78:44 - condition and everything all the
78:45 - information and you've got basically all
78:48 - the data that you need for the days that
78:49 - you've specified uh like the up the next
78:52 - updates or five days and there we go so
78:55 - you simply just go ahead and try and
78:57 - need to install axios so just do npm
79:00 - install axios it makes you to save it as
79:02 - a dependency so what basically axios is
79:05 - just like a library that allows you to
79:07 - send and receive http requests and
79:09 - receive pretty much uh responses
79:12 - very easily with an awesome apis and it
79:14 - uses promises this is the best parts
79:16 - since it uses promises it gets you out
79:18 - of the old way and promises a great way
79:21 - to deal with async code and all of the
79:23 - callback health things or promises are
79:25 - the um
79:27 - the thing that you should actually take
79:28 - care more about especially now like
79:31 - nowadays you should use promises no
79:33 - callbacks are required and for http
79:35 - requests is actually doing pretty great
79:37 - job with a lot of features and stuff so
79:39 - you should probably just go and do it i
79:41 - already
79:41 - installed that make sure to install it
79:43 - it's really minimal it's not really that
79:44 - much of a big deal uh you can just go
79:47 - and jump the
79:48 - that's and now we need to get the actual
79:50 - api key in here
79:53 - so you can just go ahead and grab this
79:54 - api key uh copy it and we can go ahead
79:57 - and use it but for now let's just go and
79:59 - see how we can work with our application
80:01 - so remember that's we've got the top
80:03 - section and the bottom section and both
80:05 - of them are wanting to access the
80:07 - weather api dna so how we can do this
80:10 - for example some of you might ask or
80:12 - might see like like a proposition
80:15 - they say like you can go ahead inside of
80:17 - the top components in here like the top
80:19 - section and do a request like you send
80:22 - an http request and you receive the data
80:24 - then you actually go ahead and render
80:25 - this particular dns out of the render
80:27 - method pretty basic uh-huh so this is
80:29 - not the case actually what about the
80:31 - bottom section in here so the weather
80:33 - section and the bottom section are
80:34 - completely separate uh
80:37 - siblings they have nothing to do with
80:38 - each other's and they
80:40 - they don't actually know each other so
80:41 - they can exchange it at the end unless
80:43 - we use some kind of a flux or something
80:45 - that we're using but it's not the
80:46 - practical thing you to do because you're
80:48 - gonna hit or request the server twice
80:52 - and since you've got a plan that's
80:54 - you're not needing to request this
80:55 - particular server because you've got a
80:57 - limit like 10 000 hits per month or
80:59 - something and you're actually doing it
81:01 - wrong because you're gonna request it on
81:02 - the top component or the top section
81:04 - then you're gonna move on to the bottom
81:05 - section and do another request which is
81:08 - absolutely
81:09 - uh nonsense you shouldn't actually do
81:11 - this so you only need to go ahead and
81:13 - hit the server only once when you once
81:15 - your application is actually starting
81:17 - because your application is basically
81:18 - about whether up data so you need to do
81:20 - it on the startup of the application
81:22 - then passing this dna as props to both
81:24 - of the components and remember that
81:26 - we've got the up.js in here which is the
81:28 - main render of both of these sections
81:30 - like he renders the top section and it
81:31 - renders the bottom section so we should
81:34 - actually fetch the dns out of the up.js
81:36 - then we take this the other that we have
81:37 - got pass it through
81:39 - down through to
81:40 - the top section in the bottom section
81:42 - they can actually use it throughout the
81:45 - props pretty basic now for fetching any
81:48 - data for using restful apis with react
81:51 - the best way to go through or the best
81:53 - way to
81:54 - set up your request and um receive the
81:56 - response and handle all the data you get
81:58 - is inside of the components did mount
82:01 - method so it's actually the best method
82:04 - that you should choose uh for sending
82:06 - requests there's other methods actually
82:07 - but this is the one because once your
82:09 - component is actually just mounted you
82:11 - you've got access to all of the um inner
82:14 - data and and air references of your
82:17 - pre-wash components and you're not going
82:18 - to get any errors or something like when
82:20 - you put this inside of component did
82:22 - update or something like state conflicts
82:24 - or something like this
82:26 - everything's going to work for you
82:28 - for you and this is the best phase to
82:30 - push the um the data now we've got to
82:32 - access some kind of accounts so i'm just
82:34 - going to set up i'm clearly seeing here
82:36 - it did set up a constructor i think
82:38 - behind the scenes so it's simple just go
82:41 - ahead and
82:42 - set up a constructor as a normal
82:44 - constructor i didn't show that i think
82:45 - in the video but yeah just set up a
82:48 - constructor here put the states
82:51 - um pretty basically in here what we're
82:53 - going to do is just going to put a
82:55 - couple of things i'm just going to say
82:57 - um well let me create a const variable
83:00 - that's going to be an accessor from here
83:02 - i'm going to say
83:04 - whether key equals i'm gonna take my key
83:07 - and put it in here so
83:09 - okay i've got i've got no key let me
83:11 - just copy that
83:13 - and make sure to get your key so you can
83:15 - put it in here as i const because it's
83:17 - not gonna change anyway so we can go
83:19 - ahead and use this and i'm gonna just
83:22 - set up a couple of things since we need
83:24 - this city name so we're gonna add a city
83:26 - name also uh we need like the days of
83:28 - the forecast that we're gonna need to
83:30 - check for we're gonna add this to the
83:32 - state we're gonna say city name
83:35 - going to be something
83:37 - london okay
83:39 - and i'm going to add forecast
83:42 - days it's going to be five days okay
83:45 - that's pretty good you can use up to 10
83:47 - days in here
83:48 - i'm going to just go ahead and use the d
83:50 - structure of the states so we can fetch
83:52 - together out of the states very easily
83:54 - without any headache i'm going to say
83:56 - city name and the forecast days
83:59 - and this thought states okay now we need
84:03 - some um actually this is the weather api
84:05 - and everything now we need to use axios
84:07 - to hit this data so obviously just go
84:10 - ahead and like import that very easily
84:12 - just do import axios from
84:15 - axios
84:18 - and there we go you've got axios
84:19 - available for you and you can go ahead
84:20 - and use it and as i've told you before
84:22 - axios uses a promise based api so it's
84:25 - very easy for you to go through it i'm
84:27 - gonna do a get request since this
84:30 - accepts a great request to this
84:31 - particular api or this particular url
84:34 - i'm gonna just go with here and before
84:36 - doing any requests is we need to set up
84:38 - the url first i'm gonna just copy the
84:40 - url i'm gonna put it between string
84:42 - literals because it's going to allow us
84:44 - to interpolate some variables inside of
84:46 - this and this is really important we
84:47 - need to interplay some variables like
84:49 - the api key since we've got it up there
84:52 - so i'm going to just go ahead and do
84:54 - the
84:56 - weather key and also for the query we're
84:59 - going to intro play the city name
85:02 - [Music]
85:03 - and also the forecast days that's what
85:05 - i've got
85:08 - and there we go so yeah pretty basic
85:12 - now we've got the url
85:14 - basically set up and everything we can
85:16 - just go ahead and take and put the url
85:18 - and as i've told you it's promises so we
85:20 - can use then
85:22 - and catch and it takes a callback
85:26 - so it takes a response and we can do
85:28 - anything with within their response and
85:31 - we can actually go and do a catch
85:33 - so we can catch the air
85:35 - and we can actually check if the air has
85:38 - anything to do with that if it doesn't
85:40 - get you gonna do console.error
85:42 - uh you cannot fetch
85:45 - weather
85:47 - from api
85:49 - and um i can put the air in there so for
85:51 - just very debugging and we can see
85:54 - clearly what is going on behind the
85:56 - scenes so we can just go ahead and
85:57 - castle block the error as well the error
85:58 - objects and if they got the response
86:01 - we're going to do i'm just going to do
86:02 - here just console.log i'm going to put
86:04 - data
86:05 - i'm going to put a response so we can
86:06 - clearly see what is the dna that we are
86:09 - getting back now we're saving this we go
86:11 - back
86:12 - um hopefully here it's going to go in
86:14 - and refresh and once the component is
86:15 - being mounted we're going to go ahead
86:18 - and get the dna back there we go we've
86:20 - got the dna successfully no errors
86:22 - nothing at all and the other objects
86:24 - that axios actually returns for us has a
86:26 - couple of things it has the
86:27 - configuration the global configuration
86:30 - for f4 for axios that you can actually
86:32 - set up and configure we've got the data
86:34 - which is basically the object that we
86:36 - receive from the
86:38 - headed url that we just you know the api
86:40 - that we have just hit and we've got a
86:42 - couple of headers that has been sent
86:44 - back from from the server that we have
86:47 - just from the api
86:49 - and basically the request that we have
86:51 - just sent which is the which has a
86:53 - couple of data actually but and headers
86:55 - and stuff
86:56 - and the status and status that like okay
86:58 - or error or something depends on
87:01 - what actually states you are on with
87:04 - this one but basically what we need is
87:06 - the objects called data which has all of
87:08 - the data so here you see in here we've
87:10 - got the json dna which is current and
87:12 - you can actually deal all of different
87:14 - things in here
87:15 - um that you you can actually access the
87:18 - different data and the forecast and the
87:20 - location and stuff so we can just go
87:23 - ahead and use this and what i like in
87:25 - here using is pipe then inside of that
87:28 - so this returns an object so we can just
87:30 - go ahead and distract this object and
87:32 - move on to another end which means she's
87:33 - going to go and do like a response
87:35 - return
87:36 - data
87:38 - and um inside of this data i'm going to
87:40 - need a couple of things i'm just going
87:42 - to turn the data and the data is going
87:43 - to have current forecast and location
87:45 - objects
87:46 - i'm just gonna return this i'm gonna
87:48 - you know uh pipe another van
87:51 - and this is gonna have the actual idea
87:53 - so
87:55 - this is the best thing all the best part
87:56 - about promises so you can actually pipe
87:59 - and then inside of another then and so
88:01 - on and so forth there we can help you a
88:03 - lot throughout your journey as a web
88:06 - developer and dealing with asynchronous
88:08 - code in general
88:10 - so then in here
88:12 - we've got all the couple of data and
88:13 - stuff like this we can just go ahead and
88:15 - update the state with a couple of things
88:17 - so
88:18 - uh since we need the weather dnf take a
88:20 - look on the top what we've got
88:22 - we've got just a simple title uh the
88:24 - location but this one actually needs a
88:27 - data so we need something to be rendered
88:30 - like the degrees and stuff so let me
88:32 - just go ahead and set up a props for
88:33 - this
88:34 - um the props that we're going to need is
88:36 - actually
88:38 - the data so i'm going to access this
88:40 - let me use a destructor in here i'm
88:42 - going to do a const
88:44 - i'm going to get the data out of it
88:46 - because later on i'm going to pass the
88:47 - dna throughout to the weather.jsx as a
88:50 - props and then we can go ahead and get
88:51 - this data and render it right over here
88:54 - so
88:55 - um just gonna say
88:57 - let me let me see for the api
89:00 - where he's actually naming it so it's
89:02 - naming it temporary
89:04 - c
89:06 - to pretty c
89:08 - and we can get um
89:10 - ease day pretty much
89:14 - it's like a boolean variable shows if it
89:16 - is there or not
89:18 - and
89:18 - um
89:20 - i don't know we can guess
89:21 - basically like the condition
89:25 - well let's go and get text out of it so
89:28 - the text that we need to display right
89:30 - over here instead of the sunny and we
89:32 - can get an icon
89:33 - so
89:35 - i'm just gonna say icon url
89:38 - and there we go i'm going to extract
89:40 - this from these two props
89:42 - and you can use prop types and react
89:44 - prop tops and stuff like this but it's
89:46 - not really that much a big deal in our
89:48 - case so i'm just going to return the
89:50 - temp
89:50 - sir celsius in there i'm gonna replace
89:53 - that with
89:55 - the text that we need to show and the
89:57 - icon and stuff we're gonna i'm gonna
89:58 - talk more about this in a couple of
90:00 - seconds
90:01 - but yeah so this is basically working
90:04 - pretty much fine and yeah this is what
90:07 - basically what we need let's just jump
90:08 - back in here for the top and he it's
90:11 - going to require something because it's
90:12 - going to throw us an error telling us
90:15 - we've got no props or something
90:17 - so
90:18 - and
90:19 - also i need a location name so it's
90:20 - already forgot
90:25 - um
90:26 - i'm gonna say location
90:29 - and i'm gonna
90:30 - put
90:34 - location right over there so instead of
90:36 - the weather in here we've got a couple
90:37 - of things we've got location
90:41 - um
90:43 - we've got as well
90:44 - a temporary
90:46 - see
90:48 - okay there's no comma i don't know is
90:50 - day
90:52 - [Music]
90:54 - um we also got the text and the text or
90:57 - the icon url
90:59 - so
91:00 - both of these
91:05 - needs to be passed as well from from the
91:06 - top in here
91:08 - um so also we need to get them from the
91:10 - props in here so we can go ahead and
91:12 - just pass them through this one
91:14 - and we can probably do i don't know what
91:16 - you did this way but you can just go
91:17 - ahead and put the props like using the
91:19 - spread syntax the esx pressing tax to
91:22 - spread the props all over here just pass
91:24 - it through without carrying and putting
91:25 - every single prop name in here because
91:27 - they're gonna have the same prop names
91:30 - so let me just gonna copy all of that
91:32 - because it's just like uh or pretty much
91:35 - cut it go to the up.jsx and we've got we
91:38 - need this on on the top section and i'm
91:40 - gonna give this from the state because
91:42 - we're gonna save this on the state
91:44 - i'm going to do const
91:45 - [Music]
91:49 - i'm going to get the city name i'm going
91:50 - to get
91:53 - temporary c i'm going to get east day
91:56 - i'm going to get the text and icon url
91:59 - so all of those gonna be saved inside of
92:01 - the state so we can go ahead and access
92:03 - them and here we need to just go ahead
92:04 - and do this operation so we can do this
92:06 - set state and uh we can pass in the data
92:10 - that we want the city name is not going
92:11 - to be changing or anything because it's
92:13 - static for now we can deal with all this
92:16 - uh later i'm just going to put the
92:17 - temporary c
92:19 - um it's going to be data dots
92:21 - let me see this so it's going to return
92:24 - the current so we need to access the
92:25 - currents then we can actually
92:27 - temporarily see so i'm going to do
92:29 - currents.temp
92:34 - um c
92:35 - also we're going to need easeday
92:39 - which pretty much instead of the same
92:41 - thing in here just we need to access the
92:43 - current inside of the data current dot
92:45 - ease but it is like a dash
92:48 - we're using camo casing in here why
92:50 - they're using
92:51 - um
92:52 - like dash keys in here or something so
92:55 - yeah
92:56 - uh this is for the east day we can pass
92:58 - in the water book icon and all the
93:00 - things of the text
93:01 - so data
93:03 - currents dots we've got condition
93:07 - and um inside of condition we've got
93:09 - text
93:10 - and finally we can put the icon url
93:15 - which is going to be dna
93:16 - currents
93:19 - condition
93:21 - okay and icon simply icon
93:26 - okay there we go so i know i'm not
93:28 - getting any pretty fine code but it's
93:31 - not really that much of good
93:36 - got a couple of errors that's why it's
93:37 - not working i need to pass in a couple
93:38 - of things in here i'm going to pass the
93:41 - city name
93:43 - temporaries the
93:45 - east day
93:47 - and texts and finally the icon url so we
93:51 - can easily just
93:53 - pipe them through using the props
93:56 - so we can go ahead and use them from
93:57 - from the next side and here we just set
93:59 - the stage without any problems just
94:01 - simple as that because setting the state
94:03 - is a really important step to do
94:05 - and uh
94:06 - i'm going to put some kind of a variable
94:09 - in here so for example i'm going to put
94:11 - a layouting and it's going to be boolean
94:14 - at first it's going to be true because
94:16 - the application gonna start it's gonna
94:18 - be really yielding inside of the leodin
94:19 - state and i'm gonna check in here
94:22 - so
94:23 - uh if there is actually any lyodine i'm
94:25 - gonna have like a top section in the
94:26 - bottom section
94:28 - um
94:30 - what it can do
94:35 - so
94:36 - let me see this
94:38 - i'm only going to just go ahead and do
94:39 - this inside of the top section
94:42 - uh i'm going to check
94:44 - let me grab this eel
94:47 - uh what did they name this okay leodin
94:49 - let me just add is because always when
94:51 - naming your boolean variables makes them
94:54 - look and feel as a boolean variable like
94:56 - adding an ease or is it or or something
94:59 - like makes it like a boolean variable so
95:02 - like uh when you ask a question easily
95:04 - odin so the answer is pretty much gonna
95:06 - be for example true or false nothing
95:09 - more nothing less so this is what i mean
95:11 - by making it much more booleaner uh
95:14 - thing in here so
95:15 - i'm going to put ease layout in
95:19 - and and
95:20 - so we can actually render that i'm not
95:22 - referencing this anyway you can grab it
95:24 - up there and if it is leodin that's
95:27 - pretty great if it's not i'm gonna add
95:30 - another one
95:31 - um
95:32 - well it's actually vice versa if it's
95:34 - not leodin we can just go ahead and do
95:36 - that if it is leodine it can remove the
95:38 - knot
95:40 - if it is not we yelled in what it can do
95:42 - is
95:43 - um render something like uh
95:48 - whether
95:50 - okay set some text i'm gonna put in h3
95:53 - it's not gonna work
95:54 - let me just
95:58 - the yodine weather
96:01 - you can make it just a little bit much
96:02 - better about ideal deodorants or any
96:04 - other cool style that make it glimsey
96:07 - and
96:08 - smooth and nice but that will do the job
96:10 - for now because we want to test the
96:11 - functionality so you always want to
96:13 - start by testing a functionality and
96:15 - seeing if your application logic inner
96:17 - logic actually works or not
96:19 - so we've got easily odin
96:22 - true and here once we finish the audio
96:25 - like we fetch the dna we need to make
96:26 - this false because it's a really
96:28 - important step is the audio we need to
96:30 - make it to be false so we can actually
96:32 - end the loop of our application that we
96:35 - tell it easily ordered or not
96:37 - we can save here we can go back in here
96:39 - what i can do as i've told you the
96:41 - spread props
96:42 - uh capabilities i'm just going to put a
96:44 - dot dot desktop props
96:47 - and
96:48 - [Music]
96:50 - we can pass this inside of an object in
96:52 - here and es6 is going to do the job for
96:54 - us with the lovely people and stuff like
96:57 - this is going to help us do that so
96:58 - we're just going to spread the syntax
97:00 - because they have the same names that we
97:01 - have passed in so we don't really have
97:03 - to do that much of things and we're
97:04 - going to give the dna finally in here we
97:07 - can just go ahead and render it so we
97:09 - can easily go ahead and check if our
97:10 - application works
97:12 - uh lyodine weather
97:15 - and i think it never goes off so it just
97:18 - like keeps lyore or something i don't
97:20 - know
97:21 - something ridiculous
97:23 - um it's actually really odin but there
97:26 - we go oh my god it's actually working
97:28 - and we've got london
97:30 - uh four degrees even though there's like
97:32 - there's no degrees sign in here and
97:35 - there's like um the sun thing we've got
97:37 - clear location and the text is working
97:40 - pretty much fine but the icon is not as
97:42 - we want it to be so we can go ahead and
97:43 - change it and also we can add the
97:45 - degrees thing so i'm just going to copy
97:47 - this really quick from here
97:48 - i mean i mean this section of the text
97:52 - um we can go to the weather and here we
97:54 - can just um out of this at the end so it
97:56 - looks much more that's we are using
97:59 - celsius and it's actually actually a
98:01 - weather uh degrees
98:04 - okay and here for the src instead of
98:06 - putting the sun image we can put the
98:08 - icon image and it should basically work
98:11 - fine
98:12 - but
98:13 - i don't know let's try this if the
98:15 - weather image is gonna work fine or not
98:18 - and there we go we've got it that's but
98:19 - it's it's a little bit um not as we
98:22 - expected it to be so we can jump into
98:24 - the style of this
98:26 - and
98:26 - you can see this
98:28 - three let me just take this to four to
98:30 - make it look uh much better and there we
98:34 - go it looks much better much clearer
98:37 - and we've got a little half moon thing
98:40 - that's there and it's selling us four
98:42 - degrees if you you can take a look on
98:44 - google and tell him
98:46 - uh
98:46 - london
98:49 - weather
98:50 - and um yeah he's actually failing us
98:54 - we got here
98:56 - four degrees i don't know google is
98:57 - telling us three degrees but it's
98:59 - basically the same thing i think
99:02 - i don't know but yeah our api is
99:04 - actually working we trust in this api
99:06 - and it working i don't expect you to get
99:08 - it 100
99:10 - of time
99:11 - uh fine but that should do a job
99:13 - perfectly without any problems i think
99:15 - so
99:16 - there we go we've got your first api
99:18 - started out before a weather application
99:20 - that's pretty good
99:21 - we've got that thing first now we can
99:24 - take this into the next level and we can
99:26 - create
99:27 - um
99:28 - like the forecasting and show up the
99:31 - days in here we're going to create a
99:33 - couple of seconds actually just going to
99:34 - do this really quick and you can also go
99:37 - through this and select a location so
99:39 - whenever you select a location you can
99:41 - go ahead and reload the whole
99:42 - application and uh reselects everything
99:44 - from scratch and so on and so forth
99:47 - it's going to go ahead and take question
99:48 - time of course
99:50 - but that's going to basically be it
99:53 - in a very simple thing so let's try to
99:54 - go ahead and
99:56 - do it now actually for adding the
99:58 - functional into this button and be able
100:00 - to click and get us some kind of a
100:02 - pop-up like an inline pop-up then we get
100:04 - an inputs then we'll be able to input
100:06 - the city name we click enter then um the
100:09 - the actual application is going to go
100:10 - ahead and change to that particular city
100:12 - that we have just chosen
100:14 - so i'm going to use some kind of library
100:16 - or third-party components or decree for
100:19 - us which called react popper that allows
100:21 - you to easily create pop-ups without a
100:24 - headache or something plus creating a
100:25 - pop-ups is is quite a hard thing to do
100:28 - it takes quite some time and it's not
100:31 - really a bad thing for doing it just uh
100:33 - from scratch on this video so we can
100:34 - just go ahead and use a third-party
100:35 - library
100:36 - basically the best thing to do in this
100:38 - in this case
100:40 - so it does the job basically perfectly
100:42 - in here you can go ahead and just
100:43 - install this react popular thing
100:46 - it's available in github with all of
100:48 - things in here and it uses actually the
100:50 - render prop
100:51 - from react it's like basically an
100:53 - awesome design pattern that you can go
100:55 - ahead and use
100:56 - uh let me just go ahead and do this i'm
100:58 - gonna install reacts
101:00 - [Music]
101:01 - cover and make sure to save it
101:04 - so i just like um full of documentation
101:07 - in here reacts proper and we normally
101:09 - install or you can use run
101:12 - whatever both of them are actually
101:14 - working pretty much fine
101:16 - so it's pretty simple pretty basic
101:18 - uh this is going to do if we jump to the
101:20 - weather application
101:22 - um i think inside of the top yeah there
101:25 - we go we've got the button and
101:28 - you can take a look in here and
101:30 - explaining the definition of this or how
101:32 - actually it works and how this design
101:35 - pattern works you've got a manager in
101:37 - here that manages the both the pop-up
101:39 - and the reference and basically the
101:40 - reference is actually the button that
101:42 - you toggle like you click and you show
101:44 - up the pop-up and you actually
101:46 - uh you know or you hover and you show up
101:48 - the pop-up this is actually the toggle
101:50 - button that we want in our case it's
101:51 - going to be this we click it and we want
101:53 - to show up the problem uh button
101:56 - or the actual pop-up container and we've
101:58 - got in here you're basically going to
102:00 - pass it a function and you're going to
102:01 - pass your props from this reference so
102:04 - the reference is going to pass you will
102:05 - props in here you can use this props in
102:07 - order to be able to render this it's a
102:08 - really awesome design pattern and also
102:11 - you can pass in another function here
102:12 - passing you some kind of a props like
102:14 - having a row props which placement it is
102:17 - you put the placement of course above
102:19 - here and what a style and a reference
102:22 - that you can actually use and you can
102:23 - just go ahead and put them all inside of
102:25 - here and you can this is basically the
102:27 - container of your popper or you pretty
102:29 - much pop up and you can just go in and
102:31 - use it it's pretty basic it's not that
102:33 - much of complicated or anything it's
102:35 - straight to the points so we can go
102:37 - ahead and use this right now i'm gonna
102:39 - go ahead and grab it from
102:42 - uh as they've said in here and i'm just
102:44 - going to copy this i don't want to waste
102:45 - so much of time so we've got the manager
102:47 - the reference and the popper and i need
102:49 - to wrap both of these inside of here i
102:51 - can also just go in and copy all that
102:53 - just like copy pasting it's not really
102:55 - that much of complicated so we've got
102:57 - the reference and we've got both of them
102:59 - we need to go ahead and inside of
103:00 - instead of putting this button i can cut
103:03 - this button and put it in here because
103:04 - this is our toggle button that we want
103:06 - to use
103:07 - and we've got just like a very basic
103:09 - pop-up in here so we can go ahead and
103:11 - test it and see how it works but instead
103:13 - of the right let me just put the
103:14 - placement to the top so we can
103:17 - you know better see this
103:19 - uh we've got the react application
103:22 - i don't know i'm getting
103:24 - um
103:25 - getting two things in here two
103:27 - completely different things like two
103:29 - buttons like i'm rendering them both or
103:31 - something and just might make sure to
103:33 - put the reference in here because this
103:35 - is actually how the design pattern work
103:37 - just with the referencing you're going
103:39 - to allow it to reference then and get
103:41 - the actual exact location
103:44 - uh or the exact position of your target
103:46 - running in here and and this actually
103:48 - can help a lot so yeah
103:50 - um just doing that that can pretty much
103:53 - help a lot but what we need in here is
103:54 - not going to help us anyway so uh as we
103:57 - clearly see the layout is pretty much
103:59 - working we get all of that but the
104:01 - proper elements shows anyway so
104:04 - by default it's visible
104:06 - what we want is only to show it or only
104:09 - make it visible once we click the button
104:11 - so we toggle this like they show up of
104:14 - this popup elements only once we click
104:16 - the button so we need to do like a
104:17 - toggle system so we're going to go ahead
104:19 - and add an all click kill here
104:22 - so once we click it we're going to just
104:23 - do that and i've got above this i'm
104:26 - going to create a private function or
104:28 - private method since we are actually
104:29 - inside of a class context i'm going to
104:32 - name this on
104:34 - select location
104:38 - okay let's let's try to
104:41 - toggle
104:43 - let's try on toggle
104:45 - select
104:46 - location and it's going to take events
104:50 - or basically
104:51 - we're not going to need that much of an
104:53 - event anyway so yeah this basically
104:58 - it's basically where it is
104:59 - um i thought myself i'm actually in
105:01 - typescript that's why i put it private
105:03 - sorry guys
105:04 - i just like i work a lot with time
105:07 - script that's why i did private over
105:09 - there uh but anyway so putting just an
105:11 - on toggle select location method up
105:14 - there and here we want to guess the the
105:16 - reference of that so by default we're
105:18 - going to have is
105:20 - select
105:22 - location
105:24 - open and by default it's going to be
105:26 - full so it's the startup is going to be
105:28 - false and here we're going to do
105:31 - if or we're just going to do the set
105:33 - state and we're going to get the second
105:34 - version so we get a previous state and
105:37 - we can actually set a new state of this
105:38 - of this previous state so we can do like
105:41 - is selects
105:46 - location open and we just toggle it by
105:48 - by just um
105:50 - putting it false to the
105:52 - last stage so select location open and
105:55 - just doing the knots in here we reverse
105:57 - everything since they're just a boolean
105:59 - this is going to do the job for us
106:00 - perfectly and here we're going to go
106:02 - ahead and put this so i'm going to save
106:04 - this dot a selection location
106:07 - or on toggle select location and make
106:09 - sure to bind the current class context
106:11 - by just doing buying this it's a really
106:13 - important thing to do inside of reacts
106:15 - either you can do it inside of the
106:16 - constructor or you can inline do it in
106:18 - here on the event function both of them
106:21 - works so we just like to prefer using it
106:23 - in an online events function and yeah
106:26 - this should do a job perfectly now we
106:27 - need to use this variable so up here i
106:30 - need to go and construct this variable
106:31 - from the stage i'm going to do
106:33 - is select options open equals
106:37 - okay so it's the states
106:40 - there we go and we're not going to allow
106:42 - this to render so i'm going to do is
106:46 - select location
106:48 - location open and so we're just going to
106:51 - do an in operator here so if it's just
106:52 - true it's going to render if it is false
106:55 - it's not going to render anyway and this
106:57 - should do draw firstly for us so we can
106:59 - go back
107:01 - um i think once we click this as clearly
107:04 - we get it once we click again it just
107:06 - like toggles everything so it's like uh
107:08 - now it looks much better as a pop-up we
107:10 - still got a couple of things actually to
107:12 - add like a style you know to show the
107:14 - proper cursor the the hand cursor thing
107:17 - so i'm gonna do this um where's the
107:20 - button actually so or we can do this a
107:22 - little bit on inside of the update css
107:25 - because it's like generic thing for all
107:27 - the buttons i'm gonna do
107:31 - cursor to pointer and yeah you should do
107:34 - the job uh one other thing is i want to
107:37 - fix the pop-up so we need to give it a
107:38 - quick awesome style for this pop-up
107:41 - uh it's really important thing to do
107:44 - so i'm gonna do this really quick i'm
107:46 - gonna do the width about
107:48 - i don't know let's try uh
107:52 - ibm or something like this that's that's
107:57 - okay that seems good okay for the height
108:00 - i'm gonna try five
108:04 - uh that seems decent
108:07 - and i'm gonna do a display of flex
108:12 - um okay that sounds actually good i'm
108:15 - gonna do a border radius
108:19 - of four pixels and i'm going to add
108:21 - finally background color it's going to
108:23 - make make a white background color so it
108:26 - looks stunning as clearly seen here
108:28 - basically i'm going to add some box
108:30 - shadow like i'm gonna zero pixel zero
108:33 - pixel just like center it and it can
108:35 - have three pixels in there
108:37 - uh for the blur and stuff so you can
108:39 - three pixels and you can add for example
108:41 - a big source and it can do rgb
108:44 - r15 15 15. just basically dark gray but
108:48 - with just a little transparency in here
108:51 - and i can actually take this down
108:55 - so
108:56 - yeah it looks much better now
109:00 - way much better
109:04 - so it looks like a real world pop-up so
109:06 - it better than it was and it's basically
109:09 - doing the job perfectly
109:11 - um
109:13 - yeah i think um
109:15 - putting the top and the bottom
109:20 - i can put some kind of top like this so
109:23 - it gets the point perfectly
109:25 - and i can
109:26 - put just like since it's an absolute so
109:29 - you can easily
109:31 - play around with the top and the left
109:33 - positions in here without any problems
109:36 - actually so yeah you can get them
109:38 - do the job for you
109:40 - and yeah so this is basically it let's
109:42 - try now to
109:44 - uh let me just change the font size
109:47 - okay just make it 16
109:51 - pixels or something like this
109:58 - um okay let's just just go ahead with 16
110:01 - pixels no problem with this
110:03 - let me copy that and put it inside of a
110:05 - pop-up since we are inside of the top
110:07 - but the pop-up is actually a generic
110:09 - thing so we can go ahead and put it
110:10 - inside the app.sscss
110:12 - it's like a common thing to have
110:14 - you're gonna do a pop-up dash container
110:18 - and it's gonna be the pop-up container
110:19 - you know that's where i've got
110:21 - then we can just um go back and
110:24 - reference the same style that we have
110:26 - got
110:27 - so where is that inside of the top and
110:32 - i'm gonna put
110:35 - okay this is gonna take class name
110:38 - [Music]
110:39 - and pop-up dash container
110:44 - great
110:46 - jumping back in here
110:48 - okay that's
110:50 - that seems pretty decent actually so
110:52 - yeah it's it's doing the job perfectly
110:54 - um it can take a little bit of
110:57 - the width and the
110:59 - what is that the updos css
111:01 - [Music]
111:03 - can take the top a little bit up like 60
111:05 - or something
111:08 - i should actually do the job or i don't
111:10 - know
111:11 - i think it's being overwritten
111:14 - that's why i'm not getting it right
111:16 - but what i can
111:18 - do is
111:22 - i don't know
111:24 - we'll just keep it for now like this
111:28 - or we can play around with some css
111:31 - styles in here
111:32 - like inline styles so we can actually
111:34 - take that
111:35 - as you can seriously i'm putting the
111:37 - style in here and which doing the job
111:39 - perfectly but
111:41 - i can put another object inside of this
111:44 - and i can put
111:46 - the top
111:49 - or it's not here
111:52 - the top position to
111:56 - like about
111:57 - minus
111:58 - 55 pixels so it goes a little bit to the
112:01 - top
112:04 - and hopefully does that spot
112:10 - yeah
112:11 - i think this is actually
112:13 - okay this is this is not what i want in
112:15 - here uh it's basically not what it wants
112:19 - so i need to put it inside of this style
112:22 - so this is basically the the main style
112:24 - that i should have put inside of it
112:26 - i'm just missing a curly brace and
112:28 - saving that
112:31 - where is this
112:33 - okay
112:38 - and um
112:41 - basically now it works
112:44 - okay so
112:46 - i don't know i don't like this 45
112:51 - it could work now for the 45
112:54 - yeah it does it does a great job okay
112:56 - now the pop-up's actually finished let's
112:57 - just try to now to put inside of it some
113:00 - input things so we can control this
113:02 - pop-up
113:03 - um inside of this
113:05 - nifty text i kind of put
113:08 - a div and
113:11 - this there's gonna be
113:12 - a class name like
113:14 - form
113:18 - container and we're gonna have some kind
113:20 - of a label
113:21 - and label html for
113:25 - location
113:26 - dash name
113:31 - or
113:33 - application name and we can put in input
113:38 - let's type text and we can put an id to
113:40 - this input which is going to be location
113:42 - name
113:43 - [Music]
113:45 - and yeah so placeholder i can play a
113:47 - little bit place order
113:49 - and i can put city name
113:50 - [Music]
113:53 - um all right and we might want to
113:55 - reference another better barn
113:57 - and uh it's gonna it's gonna have the
113:59 - same style of this button let me just go
114:01 - ahead and put it the same style of it
114:03 - i don't want to do a lot of things so
114:09 - and
114:12 - select
114:13 - [Music]
114:19 - take a look on it and select selecting
114:21 - here it's pretty much working fine
114:23 - without any problems hopefully and we're
114:25 - doing actually inputs with with some
114:27 - kind of a placeholder we definitely need
114:29 - to add some sounds to it because it's
114:30 - not going to look this
114:32 - pretty much stunning as we want it to be
114:34 - as labor and everything so we can just
114:36 - go ahead and edit the style just a tiny
114:38 - bit so it looks as we want it to be like
114:40 - for the fonts
114:42 - brush size and for each pixels or
114:44 - something
114:47 - okay that sounds good and also we can go
114:50 - ahead and uh do some
114:52 - [Music]
114:53 - where is the form container we can do
114:55 - some padding for the form container like
114:58 - five pixels or even more than five
115:00 - pixels
115:01 - six pixels okay and for the input as
115:04 - well
115:06 - i'm going to put the width so we can
115:08 - take the full width
115:09 - out of this
115:13 - okay
115:16 - the input is actually
115:20 - i'm gonna add some border
115:25 - we're used to it like four pixels or
115:27 - something
115:29 - okay that that's quite a lot so i'm
115:31 - gonna do also a border
115:34 - one pixel solid rtba
115:41 - 0.2
115:44 - um that that's decent actually it's not
115:47 - the greatest thing the greatest input
115:49 - basically but it should a job perfectly
115:52 - so we'll try to go ahead now and style
115:54 - this and i'm gonna put it
115:58 - okay inside of the app.css and i'm going
116:00 - to just create a form
116:02 - dash container
116:04 - [Music]
116:05 - and it's actually inside the input so
116:07 - i'm going to put in inputs
116:09 - i'm going to put it there
116:11 - i'm going to have a label
116:12 - and also it's going to have a custom
116:14 - style that i've just set for it so it's
116:16 - just a font size
116:18 - just a tiny font size and we've got also
116:21 - some kind of custom styles for the
116:23 - main container which is the form
116:25 - container
116:26 - and um well it's actually doing it and
116:30 - the try not to go
116:31 - into the pop-up container
116:33 - and take this fixed height
116:36 - i should do the job perfectly for now
116:39 - or we can just take it up ourselves
116:43 - like 55 em is is basically perfect
116:46 - uh problems and we can take the width
116:50 - and now it looks much much more stunning
116:53 - than it was looking
116:56 - i don't know what he could advance it's
116:59 - um where's this actually
117:03 - so i think it's kind of a pop-up
117:06 - container they've put it in here
117:09 - yeah i actually did it completely forgot
117:13 - so just pasting this saving it
117:17 - and um
117:19 - there we go we've got we've got that
117:20 - it's pretty decent not really is that
117:22 - much of an awesome things but it should
117:25 - do the job perfectly and since we've got
117:27 - an absolute position so once you change
117:29 - that it actually changes
117:31 - with you but just refresh the
117:33 - application
117:34 - it's going to work so
117:36 - yeah i don't know what i'm getting this
117:38 - but it's ridiculous
117:40 - um i think the problem that i'm doing is
117:44 - if i go to the top is i'm actually
117:46 - overwriting the data which you shouldn't
117:48 - have done but i'm stupid enough to do so
117:51 - yeah your goblet points i should have
117:53 - done that just leave it as it is
117:56 - you can just go ahead and use some css
117:57 - styles to offset this but i'm just going
117:59 - to leave it as it is for now it works
118:01 - pretty much fine with any problems so
118:03 - here we see
118:05 - that's pretty great now we need to add
118:06 - some functionality to it like whenever
118:08 - we click that
118:11 - uh we're gonna change the like we click
118:13 - select it changes the whole thing for
118:15 - this
118:16 - and uh i actually can when i click
118:19 - outside i can't close this it's really
118:21 - annoying thing but you can work a little
118:23 - bit on that so you can you can fix it
118:26 - that's not really a big deal to be taken
118:28 - care of but still
118:30 - a thing to do for your application
118:33 - so now how we can think about whenever
118:34 - we click the select button which is
118:36 - going to be this button we're going to
118:38 - hook up um something so we're going to
118:40 - just like
118:41 - do an event or something like emits and
118:43 - events
118:44 - and it's actually going to
118:46 - take care of doing and refreshing the
118:49 - whole thing and changing the state and
118:51 - actually sending another request to the
118:54 - apis for getting another city and so on
118:56 - and so forth so for basically doing this
118:59 - uh what we can do is use event imager
119:03 - that i've put inside of the flux so
119:04 - remember the first time that we have set
119:07 - up the
119:09 - the store.js and i've told you that it's
119:11 - going to be our flux store so we were
119:14 - actually
119:14 - combining together components so as a
119:17 - child component it's kind of rough and
119:20 - hard
119:21 - from a child component in react
119:23 - ecosystem from a child component talking
119:26 - with appearance components that's in the
119:28 - hierarchy this is actually really
119:30 - ridiculous to do but using a flux like
119:33 - apparent compared to flux or even redux
119:35 - for higher end application of larger
119:38 - projects but for now just flux is doing
119:40 - pretty much job for us great job for our
119:42 - application without any problems
119:43 - actually so we can just send the dnf
119:46 - from the child
119:47 - back to the
119:49 - actual parent component without any
119:51 - problems and we can use for this case uh
119:54 - something called events and events
119:56 - imagers so i can actually go ahead and
119:58 - create something like this so what i'm
120:00 - going to do inside of this store i'm
120:02 - going to go ahead and grab this events
120:06 - i'm going to do events immature from
120:10 - so the event event's actually a modular
120:12 - created for you
120:14 - um by default and it's not for you from
120:16 - node.js so it's like um a pre-built
120:19 - smarter it's a standard module on
120:21 - node.js so once you actually use npm you
120:23 - install the packages you're going to
120:25 - find it by default install for you
120:27 - inside of the node module so you don't
120:28 - really have to install it even though
120:29 - you don't have it you can just go ahead
120:31 - and install it but most of the times 100
120:34 - you're going to find it over there so
120:35 - you don't really need to require install
120:36 - anything
120:37 - and yes this is basically what you
120:39 - should just take be taken care of uh now
120:42 - inside of here inside of the state we
120:44 - can save some kind of an event imager
120:46 - then we can use actually this object so
120:48 - inside of the constructor not the state
120:50 - actually so i'm just inside of the
120:51 - construction i'm going to create an
120:52 - instance of that i'm going to do this
120:55 - dot event image here
120:58 - it's not a couple case because it's just
121:00 - like an object instance so that i'm
121:02 - going to do new of event image i'm just
121:04 - creating a simple instance of this and
121:06 - this actually when you take a look on it
121:08 - you can do event or image or
121:12 - not accessing the actual object so event
121:14 - imagery dots
121:16 - you're going to find a couple of methods
121:17 - like the most important for us is the
121:19 - emit method that allows you to actually
121:21 - emit
121:22 - um an event to the whole registered
121:26 - callbacks and listeners and inside of
121:29 - the on method you actually register your
121:31 - listeners for specific events names and
121:34 - events keys and stuff so we can use this
121:36 - to actually the parents gonna play the
121:38 - role of a listener that listens for
121:40 - specific events to be fired up and from
121:43 - the child components we can just go and
121:44 - fire up these events we can pass him
121:46 - some data that we can actually use in a
121:49 - specific channel
121:50 - or that the parents uh
121:52 - think they're gonna need in our case
121:54 - it's gonna need actually the city name
121:56 - so we can pass him from the child to the
121:58 - parent and he can actually get the dna
122:01 - and refresh the whole things and the
122:02 - states and stuff like this
122:04 - i'm gonna try to grow that and as i've
122:06 - told you whenever i try to render this
122:08 - i'm gonna pass in the events immature
122:10 - all the way down to all the children's
122:12 - so this is gonna be the case thinking
122:13 - here i'm gonna do it right over here so
122:15 - we clone the elements we're to just pass
122:17 - in the states but alongside the states
122:20 - i'm going to do this dots or i'm going
122:22 - to name something event imager and i'm
122:25 - going to pass in the event imager you
122:27 - can just go ahead and pass in only the
122:28 - on and the image events
122:30 - if you really uh perform as flindy don't
122:33 - really pass all the things into the
122:35 - hierarchy of your children but it's okay
122:38 - for now for our application and it's
122:39 - going to help us a lot for performance
122:41 - and stuff so it's not really a big deal
122:43 - to be taken care of
122:45 - now we can just jump since the up.jsx is
122:48 - this next thing is going to be uh
122:50 - rendered so
122:52 - we inside of this dot this dot props
122:55 - so remember it's going to be passed
122:57 - through all the props in here we're
122:58 - going to get something like event imager
123:00 - has the reference of the object that we
123:02 - have created up there
123:03 - and actually we can get that really
123:05 - easily in here
123:06 - um what is this okay
123:09 - so once we get it
123:11 - um
123:12 - let me just think for a second where
123:13 - we're going to use this i'm going to use
123:15 - inside of the top section
123:17 - so here i'm expecting to get from the
123:20 - props inside of the render i'm going to
123:22 - do just to expect that we're going to
123:24 - get is like an event
123:26 - where is that imager
123:29 - and it's going to be this top rops
123:32 - but basically i don't think i'm going to
123:34 - use it in here anyway so just expect
123:36 - this that we have is this way and we can
123:39 - just go in and pass this i'm going to do
123:41 - events immature
123:43 - equals this dot prompt
123:46 - events imager remember that's we have
123:48 - just passed it from there so yeah it's
123:50 - clearly the way that we should do that
123:53 - we're going to get this event image here
123:54 - but we first need to register a callback
123:57 - once we click the select button we're
123:59 - going to get to the data that is inside
124:01 - of this input
124:02 - and how we can do that that's
124:05 - i'm going to talk about this in a second
124:06 - let me just going to first add on click
124:08 - call back inside of this i'm going to
124:10 - name this for example i'm going to do
124:12 - this dot on select
124:15 - city
124:16 - i won't select city okay just keep it
124:18 - like this i'm going to bind this to
124:20 - where okay i'm going to add this
124:23 - boundary to it and uh it's going to be
124:25 - selecting everything
124:27 - hopefully so we can oh and now on select
124:31 - city
124:32 - it's going to take an event and
124:34 - everything don't really care about the
124:35 - events and we actually need to go ahead
124:37 - and do another method on um
124:41 - city name change or on location name
124:46 - change
124:47 - so this can actually update every single
124:49 - time go ahead and update the state and
124:51 - it's going to take events so it's going
124:53 - to be a change event from reacts
124:56 - and every single time we update the
124:57 - inputs this change event is going to be
124:59 - fired up and we can go ahead and update
125:01 - the states with the new value that we've
125:03 - got from the input and i'm going gonna
125:05 - have a change events in here
125:07 - so on
125:09 - uh location and change i'm gonna find
125:12 - the actual this
125:14 - callback
125:16 - okay and as i've told you it's gonna
125:18 - guess basically an event in here
125:21 - as for the change so i'm going to
125:22 - basically just go ahead and do this
125:24 - thoughts
125:25 - set the states
125:29 - city name or
125:31 - let's go ahead and do its location
125:35 - name
125:36 - it's going to be e dot target and i'm
125:39 - just going to fetch the value from the
125:41 - target target is actually representing
125:43 - the actual
125:44 - html and input elements so it's the
125:46 - reference of it and we can just access
125:48 - the value of it the current value of it
125:51 - as the mean time of receiving this
125:53 - particular event and we just go ahead
125:55 - and just
125:56 - do with this dot set state and we save
125:58 - that basically without your problems
126:00 - and now hopefully should work
126:03 - but now we're actually gonna guess the
126:06 - location name
126:07 - like this text is gonna be saved inside
126:09 - of the location name of the state so let
126:12 - me just go ahead and do this reference
126:13 - unit here
126:14 - i'm going to be locationing this dot
126:16 - states
126:18 - and what i'm going to do i'm going to
126:19 - use the events image without it gets
126:21 - from the props i can also go in and
126:23 - reference that so event imager is going
126:25 - to equal this dot props remember that
126:27 - you have just passed this into it i'm
126:29 - going to do events imager dots and here
126:31 - we're going to emit an event remember
126:33 - i'm going to imagine events i'm going to
126:35 - give it a name of
126:38 - or let me just do updates
126:43 - weather
126:44 - so updates whether it basically is i'm
126:47 - gonna hear what's data or type of data
126:49 - you want to pass it through i'm gonna
126:51 - just go ahead and pass um an events
126:54 - or the actual city name that's we have
126:56 - got a location name so remember it's
126:58 - going to be location name and that
127:00 - basically it now up with the hierarchy
127:03 - on the
127:04 - uh the up.jx remember the app.jx is
127:07 - actually the main component that is
127:08 - responsible for fetching the dnm and
127:11 - doing the states and doing all the
127:13 - changes and stuff like this so what we
127:14 - can actually go ahead and do
127:16 - is just go in and do like components dip
127:20 - mounts we register the event listener
127:22 - for this so i'm gonna just right below
127:24 - this i'm going to go ahead and register
127:25 - the events imager uh from this top props
127:28 - so
127:29 - i can i can reference that so event
127:32 - image here is going to include desktop
127:33 - perhaps
127:34 - and
127:35 - down here
127:36 - event imager i'm going to list foreign
127:39 - events for a specific invention name is
127:41 - gonna be
127:42 - uh where is this update weather
127:45 - okay and it's gonna be a callback so
127:47 - here we're gonna guess the actual data
127:49 - that we want which is gonna be just
127:50 - gonna name it data
127:52 - [Music]
127:53 - there's going to be an array so we need
127:55 - to access the first uh step of the data
127:58 - so i'm just going to go ahead and do a
127:59 - console log of the data
128:02 - or location name so to make sure that
128:04 - everything's pretty much working fine
128:06 - and i'm gonna just do data the zeroth
128:09 - value and this should actually return um
128:12 - an object and i'm gonna access okay let
128:14 - me
128:15 - location name so it's basically the api
128:18 - of how the image event imagery works it
128:21 - returns or it gives you in here is
128:22 - inside of this callback it's going to
128:24 - give you an array of all of the data so
128:26 - if you try it in here to pass multiple
128:28 - things you can do it so uh remember the
128:31 - first one is going to be the zero index
128:32 - and the other one is going to be this
128:34 - the first index and so on and so forth
128:36 - so since we only have in one it's still
128:38 - going to be an array anyway but we need
128:40 - to access the first index of it we fetch
128:42 - that and it's going to return objects of
128:44 - all of the anodized inside of that and
128:46 - we can just go ahead and fetch the
128:47 - location name pretty simply but let me
128:49 - just get rid of that so
128:50 - um i'm not pretty sure that's going to
128:53 - be an object anyway but let's just go
128:55 - ahead and see compile that's going to
128:57 - here and we can try to you know take a
129:00 - look on
129:01 - um just give it a quick look um what is
129:05 - this update weather
129:08 - component the amounts
129:10 - let me see this
129:13 - i don't know
129:16 - kind of uh something not working and
129:19 - yeah it can it cannot actually be the
129:22 - property on if undefined
129:24 - um for some reason the component the
129:27 - amount is not actually getting the
129:28 - events immature data from the amp that
129:31 - we are rendering
129:33 - let me take a look on the index.js we're
129:34 - rendering the up okay that's that's a
129:37 - kind of problem i didn't do that i
129:39 - talked about the store we created the
129:40 - store and everything so remember that
129:42 - we've created a store and we meant to
129:44 - use the store like a flux store so we've
129:47 - got to
129:49 - use the store as a wrapper to render the
129:51 - application but we didn't do that anyway
129:53 - so i'm actually full or something but
129:55 - let's try to go ahead and fix our what
129:56 - we did
129:58 - we can just go ahead reference the store
130:00 - we get the store then we can instead of
130:02 - the up in here we need to use the
130:04 - wrapper so it's actually
130:06 - uh to work as we expected it to be
130:09 - so it's gonna be the wrapper of things
130:11 - in here and now hopefully it should work
130:14 - if you're jumping back in here
130:16 - we take a look on the console log
130:19 - we're not getting anything since we
130:21 - haven't done anything yes try to put
130:23 - some city name for example gonna put
130:26 - um i don't know purse or something
130:29 - okay try to click select and there we go
130:32 - we've got the location name there we go
130:34 - this is location name but even though
130:36 - that's we're only getting the p for some
130:38 - reason uh we're not getting purse we're
130:41 - just getting the first character
130:43 - so that's
130:45 - pretty nifty as well
130:47 - let me just check that again
130:50 - just getting p that's really ridiculous
130:57 - i think the problem in here and it's not
130:59 - passing an array or something i don't
131:00 - understand that but
131:02 - the last time i used this it was passing
131:04 - away believe it or not but
131:06 - right now all of a sudden it does
131:07 - decided not to pass in array i'm gonna
131:10 - put a paris again select and there we go
131:12 - i've got paris so just ignore my what i
131:14 - said it it won't pass an array or
131:16 - something i don't know i'm so confused
131:18 - you can just go in and check out the
131:19 - documentation
131:20 - but this is basically how it works now
131:22 - it works we tested it and everything is
131:24 - pretty much working fine we can just go
131:26 - ahead and do the whole process but the
131:28 - whole process is a little bit confusing
131:30 - and it's going to take us quite some
131:32 - time so we can just copy this
131:34 - old code and ugly thing and we can just
131:37 - put it in here and so on and so forth
131:39 - which is not what we want so what we can
131:41 - do instead is actually just uh go ahead
131:44 - and set the state
131:45 - and everything is going to be rendered
131:47 - for us and um the component is going to
131:50 - check but in this case we only put it
131:53 - this like the component bit mount so
131:56 - only when he tries to
131:58 - mount or something it's not going to be
132:01 - like it's clearly see if we can take a
132:02 - look on documentation call immediately
132:04 - after a component is mounted setting
132:06 - state here will trigger a re-rendering
132:08 - only rendering but um nothing completely
132:12 - different so let's try and i would go
132:13 - ahead to set the states enough talking
132:17 - i'm gonna do set
132:18 - state i'm going to change the city name
132:22 - i think it name the city name okay
132:26 - i can put city name
132:27 - and i can put the data so basically what
132:30 - it is
132:31 - try to
132:33 - see if that works once we click we input
132:36 - this new city name and we click select
132:38 - location does it gonna go ahead and
132:40 - change the location name and refresh for
132:42 - that i'm not quite sure let's go ahead
132:44 - and try to test this
132:46 - i'm gonna say pers
132:48 - selects and there we go we've we've got
132:50 - that actually so we've got pears we've
132:52 - got everything updated basically pears
132:54 - as well as actually at night
132:56 - we might want to choose something
132:58 - completely different like california or
132:59 - something so to see the difference
133:02 - um
133:04 - i don't know i don't know how to spell
133:05 - california or something
133:07 - but yeah it's actually updating
133:09 - california but it's not updating
133:11 - something like the
133:13 - celsius or degrees and
133:16 - um it only updating the city name for
133:19 - some reason
133:20 - so yeah as i've told you this is not as
133:22 - we expected it to be so we need to move
133:25 - on this logic from here to a completely
133:28 - different thing so we can just go and
133:29 - create a function for it and once we hit
133:31 - that we can just go ahead and fire up
133:34 - this function so i'm gonna do a function
133:37 - updates
133:39 - weather
133:40 - and this update whether is i'm just
133:43 - going to take that's the whole thing of
133:45 - it
133:47 - i'm going to paste it here
133:49 - i'm just going to copy that as well
133:51 - this is
133:52 - all needed up there
133:54 - so there's city name and everything
133:56 - and i need to call this every single
133:59 - time that we want to update the video so
134:01 - firstly initially by default once we get
134:04 - into the application without receiving
134:06 - any events or something we want to
134:07 - update this so he gets the initial thing
134:10 - i'm going to do
134:12 - updates weather
134:15 - and actually after putting this dot
134:17 - state and we set the city and we set
134:19 - actually the data now we've got to go in
134:21 - and update it so we call this da update
134:24 - whether the the method that you have
134:26 - just created up there so what it does
134:28 - it's just gonna go ahead and grab this
134:29 - url i update it it does the get requests
134:32 - and everything and later on it sets the
134:34 - stage and updates every single thing so
134:36 - this is what probably should do after
134:38 - setting the city name so it takes this
134:40 - new city name from there and update it
134:42 - with this but
134:44 - actually there's one single problem with
134:46 - this architecture we're thinking about
134:48 - remember that reacts when it sets the
134:50 - state everything is going to be
134:51 - asynchronous so when a synchronous code
134:54 - is gets executed you can't actually know
134:56 - if the set state is going to be first or
134:58 - the update whether it's going to be
134:59 - first executed so yeah this is really
135:02 - confusing so you've got to go ahead and
135:03 - use the callback to help you that and
135:05 - likely this top point state or the sense
135:07 - state method gives us that and it
135:09 - provides you with a callback so you can
135:12 - just go ahead and use this
135:14 - what you can do with this callback is
135:15 - actually when the state has been sent
135:18 - and updated successfully you can just go
135:20 - ahead and call this the update weather
135:22 - and this will probably pretty much going
135:24 - to go ahead in here just by cutting the
135:25 - update weather and we're going to go
135:27 - ahead and put this as the second
135:28 - parameter so the set state method takes
135:31 - a second parameter which is a callback
135:33 - that gets executed after um
135:37 - the state has been set successfully so
135:39 - it's a normal combat gonna use weather
135:42 - or rail callback in here and we just
135:44 - like update the weather and once the
135:46 - city name has been updated with the data
135:48 - we can just go ahead and um you know
135:50 - update the weather so the weather can
135:51 - know about the changes have been made to
135:54 - the city name that was really important
135:55 - since we are using it in the update
135:57 - weather method and we're distracting
135:59 - that and we're doing the whole
136:01 - you want old thing we are encoding this
136:02 - data on it it's really important to
136:04 - ensure first that city name has getting
136:07 - updated on the state then later on we
136:09 - can just go ahead and you know get the
136:11 - data and fetch it from the api xu doc
136:14 - dot com or something the api rs4 api
136:17 - then we can just go ahead and update
136:18 - that let me just get rid of that i don't
136:19 - really need it and save so it compiles
136:23 - that
136:24 - um
136:25 - hopefully now
136:26 - if you can take a look um the set state
136:29 - is is actually gonna do the job
136:31 - and um the update whether pretty much
136:34 - will get executed of the state has been
136:36 - successfully set so there will be no
136:38 - problems and uh you can just go and
136:41 - refresh that
136:42 - it loads the weather we wait for it now
136:44 - we first need to try to set the state
136:47 - and for example california we can go in
136:49 - and do select as you clearly see behind
136:51 - the scenes it's changed it changes the
136:53 - icon update updated the degrees think uh
136:57 - also the the city name has been updated
136:59 - and all obviously the text that we have
137:01 - got in there everything has been updated
137:03 - now the actual way that we have thought
137:05 - about has been working actually very
137:07 - fine without any problems you can also
137:09 - use another thing or something by using
137:11 - this but right now i'm thinking is
137:13 - actually when you get this pop-up you
137:14 - click the select button and actually the
137:16 - pop-up gonna be hard automatically so
137:18 - try to add that so we go into the index
137:21 - top uh component or the top section
137:23 - component and i need to actually find
137:25 - the on click method so the pop-up
137:27 - container in here is going to happen is
137:29 - actually hide it once we select the
137:32 - container so when we do that um
137:34 - hopefully we can go ahead and use this
137:36 - so we can press is select options open
137:39 - and we can put this to false so once we
137:40 - click the select button it's just going
137:42 - to go ahead and falls
137:44 - that's that's pretty much we're going to
137:45 - do in here uh just let me just go ahead
137:47 - and select that i can clearly see london
137:50 - and this london thing is going to get
137:51 - its by default because we're having this
137:54 - inside of our state and it's sitting
137:56 - there by default you can go ahead and
137:58 - change that by default or better thing
138:00 - to do is actually you can get the
138:02 - location of the current user this is
138:04 - actually what most of the
138:06 - weather application gonna do and to do
138:08 - this in the browser browsers a little
138:09 - bit tricky so you've got to get the
138:10 - permission for the getting the location
138:12 - and stuff you can go ahead and do it
138:14 - using the javascript api it's not a big
138:15 - deal or something you can find a
138:17 - third-party library saying they're npm
138:19 - and you can go and use it very easily
138:21 - but i think what i'm talking about is
138:23 - getting the weather and i'll try to
138:25 - select it in here as clearly see uh but
138:27 - we've got a box so i think i thought or
138:29 - i put this in um the wrong place yeah i
138:32 - shouldn't put that on select location
138:34 - name change so actually need to find uh
138:38 - select city so there we go this is the
138:40 - method that we want to you know hide the
138:42 - pop-up so we can go ahead and do this
138:44 - dot set state
138:46 - and actually we can put um a selection
138:49 - pop-up open and we can just set it false
138:51 - this is basically what we want once we
138:53 - select the city or to barely say once we
138:56 - push the button we do that and actually
138:58 - we have to emit the events before that
139:00 - so
139:01 - refreshing
139:02 - um just wait for this and i don't know
139:05 - i'm having two instances of this
139:07 - uh now trying again california once we
139:09 - select that there we go the pop-up gonna
139:12 - be automatically hidden for us and this
139:14 - is a really awesome user experience so
139:16 - this is actually what you should be
139:18 - doing care about uh better thing or
139:21 - better user experience you can have like
139:22 - a close button inside of the pop-up and
139:25 - you can just go ahead and let the user
139:26 - exit the pop-up uh you know the time
139:28 - doesn't allow us to do so so you can
139:30 - just go in and ignore this and let me
139:32 - change it to four days because this is
139:34 - gonna use instead of five days it's
139:36 - quite a lot so i'm just gonna go ahead
139:37 - and try to work on the bottom section
139:39 - and try to display
139:40 - up to four days of forecast so from
139:43 - today and the next four days and we can
139:45 - just go ahead and do that so the bottom
139:47 - section we try to add inside of the
139:49 - container like a you know add the ending
139:51 - div or the closing tag of that and we
139:53 - try to add the bottom container but
139:56 - actually here
139:58 - what we first need to do is actually get
140:00 - another component that gets rendered so
140:02 - obviously what you need to do is get the
140:03 - forecast day which is like an array and
140:06 - basically just go ahead and use a map
140:08 - function or it's basically a for loop
140:10 - and loop on each one of them and return
140:12 - that so you can easily render them so
140:13 - i'm going to add a new component i'm
140:15 - gonna name it um you know
140:17 - forecastdate.jsx
140:19 - and this is gonna render a single
140:21 - forecast date and we're gonna have four
140:23 - forecast days gonna be um rendering
140:26 - there clearly see here have an array
140:28 - so i'm going to simply just type in
140:30 - import react
140:31 - from react this is an usual thing for
140:33 - creating a component and we can go in
140:35 - and export a default like uh forecasts
140:39 - um
140:40 - on a day or
140:41 - you can use days or something in this
140:44 - i don't know let's go ahead and just put
140:45 - it like this way
140:47 - non-capillary and we can extend the
140:48 - components simply you're just creating a
140:52 - normal class components so constructure
140:55 - the props
140:56 - and super
140:58 - with props too since we're going to need
141:00 - the props in this case because we're
141:01 - going to pass in the data inside of the
141:03 - props and this data is going to be
141:05 - actually the forecast day day and now so
141:07 - we're going to get that and actually we
141:09 - use the render
141:10 - to return the actual structure of this
141:13 - so if we can take a look i've got in
141:15 - here like a simple container that you
141:17 - know shows the
141:19 - um the forecast date that we can
141:21 - actually copy the css code from figma
141:24 - as you clearly see in here the
141:26 - right side and we can
141:28 - for example display the degrees and show
141:31 - up an image or simply just show up the
141:33 - text in there like for example it's
141:35 - cloudy or sunny or
141:37 - you know something like this or overcast
141:39 - or anything like that
141:40 - so we can jump back in here um let's try
141:44 - now to go ahead and render
141:46 - dev with a class name
141:48 - and for example we're going to put
141:49 - forecast day dash container
141:52 - so
141:53 - um it's going to be actually the
141:54 - container for the for the whole thing
141:56 - that is going to be inside of that we
141:58 - can have another day which is going to
141:59 - be the image so it's going to be the
142:01 - container of the image and we can have
142:03 - another one which is um
142:05 - let's try something like text okay so
142:09 - gonna be image and text and here we're
142:10 - gonna test with an image so simply you
142:12 - can just go in and put an image uh let
142:14 - me just go back in here and try to copy
142:16 - the url for this just for testing
142:18 - purposes as i've told you before you
142:19 - always need to test your you know your
142:22 - code your
142:24 - components that gets rendered in
142:25 - something then you can integrate or
142:27 - invoke
142:28 - them with apis so yeah the apis of the
142:32 - dynamic data comes at the end you can
142:33 - put sunny there
142:35 - now we can jump um i don't know the
142:37 - forecast day container here conjunct
142:39 - with those style.css for the bottom
142:41 - which is actually inside of the bottom
142:43 - you can put an image and
142:46 - this is the image actually the class
142:48 - name and we can have also the text which
142:51 - is also a class name in here the main
142:53 - container for the text we're going to
142:54 - put i'm going to have an image tag since
142:56 - it's going to have an image tag
142:57 - obviously the width is going to be 100
143:00 - relatively going to take the full width
143:02 - and the full height of the main
143:04 - container which is the image container
143:05 - here we can have for example
143:08 - i don't know let's look on
143:09 - um the size of this i just want to make
143:11 - it a little bit smaller than the the top
143:14 - section image that we have got in there
143:16 - so
143:17 - i don't know try it for with about 2 am
143:21 - and heights exactly 2 am
143:23 - i don't know that sounds decent for the
143:25 - text
143:26 - you might want to set the font size
143:29 - okay the trend font size or yeah okay
143:33 - font size
143:36 - about let's try 12 pixels okay
143:40 - that should be decent like 12 pixels and
143:42 - we can save that
143:44 - now we've got to go ahead and use the
143:46 - components and actually render it but
143:48 - before so we've got a first gets the
143:50 - data from the main application what i
143:52 - mean by data is actually gets when we
143:54 - fetch the data from the restful api we
143:57 - are pretty much gonna pass this data uh
144:00 - as a prop to the bottom container then
144:03 - actually on the bottom container we can
144:04 - go ahead and do a for loop as i've told
144:06 - you or a map function and it's actually
144:08 - gonna use a map function because on
144:10 - react when you try to loop an array
144:12 - you've gotta use map functions so we can
144:14 - jump back in here
144:15 - um as we clearly see
144:17 - we need to go into
144:20 - i don't know the app.jsx in here and
144:23 - once we update the weather api we've got
144:25 - to put another data for the forecast day
144:27 - so let me just go and name forecast days
144:30 - it's going to be an array as we have
144:31 - seen in there since we are already
144:33 - getting it away so this is basically it
144:35 - we're going to just save on the state
144:37 - and array so clearly seen here we've got
144:40 - the forecast then the forecast days
144:42 - which is an array
144:43 - um yes we're going to just save that so
144:45 - we've got a first access data forecast
144:49 - and
144:50 - forecast days okay so
144:56 - um yeah that that should be actually
144:58 - it's
144:59 - and we just actually access the objects
145:01 - that we are going to get now on the
145:03 - bottom section we can go ahead and pass
145:04 - in as a prop so we can do forecast days
145:06 - equals this um i don't know we can use
145:09 - the disc this structure let me just put
145:11 - that first and i can copy this and just
145:14 - put in the state in here like we've got
145:15 - this structure
145:17 - um yeah i've got i've got already the uh
145:18 - the stating here i know what i'm doing
145:20 - but
145:21 - so i've got i need to put forecast days
145:26 - or all right i basically need a forecast
145:28 - days with with no capsule d in the
145:31 - middle
145:32 - but
145:33 - yeah i actually think i have some kind
145:35 - of a name convention but okay never mind
145:37 - we're gonna just put that and now what
145:39 - we expecting inside of the bottom
145:41 - section components is actually we're
145:42 - gonna distract this from the from the
145:44 - props so the forecast
145:47 - days and
145:48 - um simply we're gonna do this top
145:50 - prompts
145:53 - so now we can take this and remember
145:55 - we've got an array inside of that
145:58 - let me first just import the new
145:59 - components which is going to be the
146:00 - forecast
146:02 - day components from from the file list
146:04 - we have just created
146:06 - so
146:07 - okay
146:11 - there we go we just import that
146:14 - and simply
146:16 - we've got an array in here inside of
146:18 - array there's a couple of objects each
146:20 - object is going to represent a single
146:22 - day on the forecast so once you request
146:24 - something like um five or something
146:26 - we're expressing for you're gonna get
146:28 - this exact four days inside of the
146:30 - forecast so yeah it's pretty simple uh
146:33 - let me just go ahead and change this
146:34 - because it's a little bit annoying so
146:36 - the name of the convention i'm gonna
146:38 - change it to four and of course i've got
146:40 - like forecast days let me change it to
146:41 - num
146:42 - forecast days so it's a little bit much
146:45 - better for a name a convention because
146:47 - we've got another variable in the states
146:49 - named the same thing like forecast days
146:52 - which is an array we don't really want
146:53 - to put that so you already
146:56 - have to know how to name your variables
146:57 - because that's a really important thing
146:59 - when dealing with an application
147:00 - especially if it's large or a
147:02 - complicated project thing so components
147:04 - nested in china side of each other's
147:07 - uh if you try to look in here
147:09 - so we're going to do just the forecast
147:11 - days in here
147:13 - and
147:14 - so i've got to first wrap this
147:17 - um i can't do that so we've got to go
147:19 - ahead and do like the escape inside of
147:20 - the gsx and here instead of the map
147:23 - function we're going to get um a cool
147:25 - bag that gets cold with the each element
147:28 - out of the array so you can just
147:29 - remember or take this as a for loop even
147:31 - though you can use a for loop inside of
147:33 - a gsx to render things so the only way
147:35 - to render an array and loop on each item
147:38 - and render that each item contacts so
147:41 - you've got to use a map function so this
147:42 - is basically why my functions exist in
147:45 - es6 and they are very powerful a lot of
147:47 - people use them so we can get the dates
147:49 - the index uh now we've got to go in and
147:51 - do
147:52 - it's just like go and return each
147:55 - components or for each
147:58 - object inside of that just return a new
148:00 - component which is going to be the
148:01 - forecast day
148:03 - so remember that it actually takes um a
148:06 - couple of data from the props
148:09 - so i'm going to go ahead and pass it let
148:10 - me just get him uh you know i need to
148:12 - make this dynamic so we can go ahead and
148:14 - use this but for now let's go and try to
148:17 - use this for testing purposes
148:19 - and it should pretty much work fine i
148:21 - just put the key and the key actually
148:23 - going to tell react how to organize
148:25 - things especially use them inside of the
148:27 - map so they all going to be stacked
148:29 - above each other's and the key gonna let
148:31 - react differentiate between them and
148:33 - allow us to optimize the application and
148:35 - the rendering process and now it's
148:37 - actually yielding
148:39 - but i think it's kind of a stock or
148:40 - something i don't know it's taking quite
148:42 - some time to leo the weather
148:45 - and it's stuck on the lyodian weather
148:46 - screen try to fresh that
148:49 - um take a look sneak look on that and
148:52 - there we go we've got actually an error
148:54 - so
148:55 - the error says
148:56 - uh it's actually on the bottom container
148:58 - and we've got canary property map of
149:00 - undefined so for them some reason the
149:02 - forecast days
149:04 - is actually undefined and let me just
149:06 - take a look on that so i think the props
149:09 - now are being passed and defined and
149:10 - everything is is actually
149:12 - working fine here but
149:14 - um yeah i think so let's gonna try to
149:17 - use an end in here so to make sure that
149:20 - only render this only access the map
149:22 - function once the forecast is actually
149:25 - available otherwise don't access it so
149:26 - it's really important to do so
149:28 - on a react application especially when
149:30 - you're using a lyodin
149:32 - um you know screen or something like
149:34 - this the props not going to be layouted
149:36 - or when you actually use the rest for
149:38 - apis this really helps
149:39 - so let's try um i think it's not working
149:42 - it's still stuck some reason and there's
149:45 - actually kind of a really annoying error
149:47 - in here take a look on the ears and as
149:49 - you clearly see
149:50 - so the data from the api cannot be
149:53 - properly forecast they have undefined
149:55 - okay so we've got some kind of an error
149:58 - in our api that we're trying to parse
150:00 - the json data that we are getting from
150:02 - the of our api and i think um i'm
150:05 - feeling looking pretty much fine in here
150:08 - but when we set the data
150:10 - uh the forecast i think i'm missing an e
150:13 - in here so the forecast i'm misspelling
150:15 - a forecast okay that's that's actually
150:17 - pretty great i'm misspelling that and
150:19 - for getting e in the middle so i'm just
150:21 - going to put forecast day here just fix
150:23 - that i'm going to fix that as well the
150:24 - key that we're sending is out of the
150:26 - states
150:27 - uh also we're going to go ahead and then
150:29 - just
150:30 - fix the states fix that on the bottom
150:33 - container
150:34 - and pretty much the bottom section and
150:36 - also we can fix that all over the way on
150:38 - all the components in here
150:40 - um now that should do pretty much the
150:42 - job because it's just like uh you know
150:44 - the syntax error nothing more nothing
150:46 - less
150:47 - and
150:48 - but
150:49 - okay try to refresh that
150:51 - either we get something there we go
150:53 - we've got we've got actually a really
150:55 - awesome thing so it's like sunny sunny
150:57 - sunny
150:58 - but all of them are structured or put it
151:00 - like in a vertical line
151:01 - so it getting the data but not perfectly
151:05 - so yeah it's not perfect as we wanted
151:07 - and also without having a static data in
151:09 - here so it's not really that much what
151:11 - we want uh we need to change this and
151:13 - make it look much better on the
151:16 - side components in here
151:18 - but as i've said
151:20 - it's working pretty much fine as far as
151:22 - you can see in here
151:24 - and we need to structure that and fix
151:26 - the style a little bit so it looks
151:28 - a bit more awesome you can change the
151:31 - background in there
151:33 - like you can you can find a really
151:34 - better background but this is doing the
151:36 - job
151:37 - okay now try to use this and try to fix
151:40 - the style
151:41 - so
151:42 - i'm going to put a display effects for
151:44 - the for the actual container the main
151:45 - container the forecast date container
151:47 - i'm going to use flexbox it's a great
151:49 - way for
151:50 - dealing with your elements i'm going to
151:52 - do flex direction i'm going to keep them
151:55 - actually in row um for a reason i'm
151:58 - gonna put a justify contents in center
152:01 - and uh
152:03 - i'm gonna put also the align as you're
152:04 - gonna like align them vertically and
152:07 - horizontally just align it in center
152:09 - gonna do the job
152:11 - perfectly hopefully for that uh we're
152:14 - actually getting them centered
152:16 - horizontally but not vertically and
152:19 - they're not displayed in a row
152:21 - so for some reason that that's not
152:23 - actually happening as we want it to be
152:26 - so there's clearly some
152:28 - issue in our style and we have to go
152:30 - ahead and fix that
152:32 - so
152:33 - um
152:34 - yeah that's really a little bit
152:37 - annoying
152:39 - let's try to add another inner container
152:41 - so it's going to be working as an inner
152:43 - container that wraps all of the data
152:46 - that we have got in there
152:47 - it's always better to add an inner
152:50 - container inside of your main container
152:52 - which is in this case the bottom
152:53 - container so this inner container can
152:55 - hold the data uh or whatever you're
152:57 - under especially when you're using a map
152:59 - and rendering and rain looping through
153:00 - it so you can put the style in here make
153:02 - it like wraps the whole image and the
153:04 - text and everything we can move all
153:08 - the display flexes out of that and let
153:09 - me just make the width and the full
153:11 - height
153:12 - so from
153:13 - forecast container
153:15 - and pretty much this should do the job
153:17 - perfectly for us
153:19 - for taking the full width and the full
153:20 - height
153:22 - uh also the inner container
153:25 - um i don't know that seems a little bit
153:27 - compromised it's taking the full height
153:29 - actually
153:30 - uh it's actually a lot of height
153:32 - actually taking it but still not
153:35 - displaying as we want it to be so
153:38 - let me just double check that
153:41 - uh the best way is actually to use it in
153:43 - specs and i'm gonna just dive into the
153:45 - hierarchy of the rendering and take a
153:48 - look on our elements try to fix the
153:50 - sales styles
153:52 - it looks like all of them are taking the
153:54 - full width and the full heights for each
153:57 - forecast day in here each forecast
153:59 - container
154:00 - and that is not what we exactly wanted
154:03 - to do
154:04 - um that seems a little bit of a
154:06 - misunderstanding if we try to do in here
154:09 - and also the inner container is actually
154:11 - taking the full width
154:13 - uh for some reason so
154:17 - that seems a little bit annoying
154:21 - okay let's take a look on the style.css
154:25 - and
154:28 - i don't know that that's a little bit
154:29 - weird
154:32 - uh i've got all of that
154:35 - okay that i totally forgot about that so
154:37 - i'm just going to take the inner
154:38 - container and put it up because it
154:39 - doesn't belong it's on the forecast day
154:42 - container so it actually belongs
154:44 - inside the bottom container that that's
154:46 - my bad it's not a shell a child of the
154:49 - forecast a container instead it's a
154:50 - child of the bottom container and it
154:52 - completely misunderstood that
154:55 - now it somehow looks a little bit as we
154:58 - wanted but not exactly
155:00 - there's still a couple of things to do
155:03 - and
155:05 - yeah we actually need to put them in the
155:08 - center but they're not perfectly
155:09 - centered and i think the problem is
155:12 - um let me take a look that's
155:16 - so
155:17 - full width
155:19 - it's out of here
155:22 - um i think the problem is we're just
155:24 - putting the full width and the full
155:25 - height
155:28 - but the forecast containers each one of
155:30 - them is taking the full width and full
155:32 - height let me just try to put
155:34 - none items to censure
155:38 - and um
155:40 - to completely center them
155:43 - i'm not putting display flex there
155:46 - that's clearly annoying when you try to
155:48 - working with the styles so
155:51 - each one of these are taking the full
155:52 - width what i want is actually to center
155:54 - them
155:55 - so that's a little bit off when it comes
155:57 - to dealing with the css styles and
156:00 - rendering data
156:01 - from an array and trying to take care of
156:03 - that
156:04 - uh let's try now to like you know hook
156:06 - up the api and try to push or
156:09 - you know pretty much uh push the props
156:11 - i'm going to name this day i'm going to
156:13 - call it day
156:14 - and i'm just going to pass in the day to
156:16 - the to the actual forecast now we can
156:18 - change from the static test that
156:19 - produced and we could use actually the
156:21 - props from from a dynamic data you've
156:23 - got from the restful api
156:26 - and that should do the job perfectly
156:28 - we're going to get the day
156:29 - and
156:30 - here we also need to change the static
156:33 - image
156:35 - the static icon
156:36 - to let me take a look on that
156:39 - um
156:40 - for temporary we've got an average
156:42 - temporary so we can use this so we can
156:44 - do i don't know date dot
156:47 - um
156:48 - average temporary
156:51 - you can use a max or a minimum temporary
156:53 - but
156:54 - uh okay that's that's
156:57 - pretty decent if you're just going to
156:58 - use an average temporary there's a
156:59 - plenty of data you can go ahead and
157:01 - render but they're just going to make it
157:02 - simple for now you can also go to the
157:04 - condition we can grab the icon so i'm
157:06 - going to access
157:08 - icon and
157:11 - yeah let's try
157:12 - to refresh that
157:14 - okay there's there's actually nothing
157:16 - being displayed on the api like we are
157:19 - getting nothing
157:21 - so let me just double check that
157:25 - it looks a little bit like there is
157:26 - something wrong with this yeah the
157:28 - condition is actually missing
157:30 - and here for the average temperature
157:34 - um
157:38 - yeah we've got an error like
157:40 - day.condition.icon
157:42 - you can now access the property of
157:44 - undefined
157:47 - and i think there's a problem when it
157:49 - comes to props and since we're using
157:51 - leodin
157:52 - but i don't know i think
157:55 - gonna return and know if there's no day
157:59 - and uh
158:01 - if actually the day has been received
158:03 - and undefined it's going to return null
158:05 - so we're not going to render anything
158:07 - because the risk for api hasn't hasn't
158:09 - you know sent a response back to us and
158:11 - hasn't responded anyway with the data
158:13 - that we need so therefore we might use
158:16 - that but
158:18 - uh taking a look inside of this the
158:20 - condition seems fine
158:22 - and
158:23 - uh
158:24 - yeah i think we've got a day unless we
158:27 - were missing actually so we need to
158:28 - access the day property which is the
158:30 - object that holding all this data so we
158:32 - can do this in here like data or
158:34 - we can just go back and here we say day
158:37 - dot day
158:38 - and actually we can pass in the current
158:40 - day so i mean the objects of the day so
158:43 - it has an object of the day and it has
158:44 - all a couple of things like the day
158:46 - uh time and stuff like this and there we
158:48 - go it works pretty much now we get the
158:50 - icon we get
158:51 - the um you know the average temperature
158:54 - just getting like a little bit like a
158:56 - floating point or a double point but
158:58 - that's not really a big deal you can go
158:59 - and change it or you can like you know
159:01 - show
159:02 - both the minimum temperature and maximum
159:04 - temperature
159:05 - and uh let me try to fix or play around
159:08 - with the css style in here so hopefully
159:09 - he can fix
159:11 - that and the width is actually not
159:13 - taking the full width and the full
159:14 - height
159:15 - um let me just try the third 3m or
159:19 - something just give it a custom width
159:20 - and custom height
159:22 - um i'm gonna go ahead
159:25 - okay
159:27 - so it's taking the full with the full
159:29 - heist both of them
159:31 - are being aligned
159:33 - um i don't know some reason it's not
159:35 - working let's try to put display flex
159:38 - just to find content to the center
159:41 - and also align the items to the center
159:43 - there we go now we've got them actually
159:45 - perfectly aligned because they weren't
159:47 - aligned as we want them to be inside of
159:49 - the forecast container and it wasn't
159:51 - actually putting a flex or a display
159:53 - flex that's that's my bad and this is
159:55 - the problem i've got
159:56 - and now we should pretty much do the job
159:59 - perfectly the children try to copy that
160:01 - and let me just you know take this a
160:03 - little bit up
160:04 - uh the actual width of that copy the css
160:08 - styles
160:10 - can go inside of
160:12 - okay the forecast container can just
160:14 - overwrite all the data
160:16 - and
160:17 - now it should work pretty much fine so
160:21 - take a look in here try
160:24 - i don't know let me take a look and and
160:26 - put a color in here fff because the
160:27 - color is not exactly matching as we want
160:30 - it to be since the background is not the
160:32 - best thing for this dark gray color
160:35 - now the white color might look a little
160:36 - bit better but we still need to upgrade
160:39 - or take the width of the height of the
160:40 - image is a little bit up that's quite a
160:42 - lot so can take it 3.2
160:47 - i'm not sure this
160:49 - that's still ridiculously i don't know a
160:51 - lot just three would do the job okay
160:55 - and there we go that seems
160:57 - much much more interesting than it was
161:00 - and it actually displays everything
161:02 - perfectly he gets the forecast and he
161:04 - gets everything
161:06 - uh you know the api is working we can
161:08 - actually pass the props you can add
161:10 - another one which is gonna name it for
161:11 - example muted text
161:13 - and uh this one gonna have actually the
161:15 - text for your for your day for example
161:17 - sunny or cloudy or something like this
161:19 - like the condition of that so you can
161:21 - put the condition dot text inside of
161:24 - this and um
161:26 - i can i can you know make sure that's
161:27 - it's like exactly inside the condition
161:29 - now we can go in here add the class of
161:31 - muted text
161:34 - and we can add i don't know the font
161:36 - size of this it's going to be
161:38 - let's put 12 and see the color is going
161:41 - to be um
161:44 - okay let's try something like a little
161:46 - bit darker than
161:48 - the ffff or something
161:50 - i'm trying to call the color picker and
161:52 - there we go we've got the color picker
161:54 - now
161:55 - and try to figure out something like uh
161:57 - dark gray not completely white spots
162:01 - something that could
162:02 - do the job
162:04 - try this okay let's take a look on the
162:06 - style
162:08 - um yeah we've got we've got the dark
162:11 - gray but it's not looking great as we
162:13 - expect it to be
162:14 - so let's go and try just change it back
162:17 - to the white just completely white ffff
162:20 - okay that does the job perfectly now
162:23 - and let me just take this down to 10
162:26 - pixels
162:27 - and yeah that sounds pretty great so 10
162:29 - pixels does the job perfectly and the
162:31 - style that we've got is actually pretty
162:33 - cool so yeah everything seems to be nice
162:36 - we've got the icons we've got the
162:38 - weather you can just go ahead as i've
162:40 - said you can put the current location
162:42 - and everything gonna be automated for
162:43 - you but if you take a look on the update
162:45 - sas
162:47 - in here let me just take the heights of
162:50 - the application so it looks way much
162:52 - better
162:53 - and there we go now it looks like much
162:55 - much better with the image in the
162:57 - background and
162:58 - um you know the forecast of the days and
163:01 - and the weather the current weather
163:03 - all the information always listed and
163:06 - that's pretty much it for the weather
163:08 - application that was actually very basic
163:09 - thing just want to point you guys to uh
163:11 - creating a new weather application
163:12 - hopefully you actually enjoyed the video
163:14 - tutorial i'm ipa so you can go ahead and
163:16 - check out my channel down in the
163:18 - description you're gonna find the code
163:19 - in the repository and github you can
163:21 - also find the link in description below
163:23 - actually it's i think a computer to
163:25 - freecom cup so hopefully you like this
163:27 - if you like more videos like this let me
163:28 - know in the comments and i'll be very
163:30 - happy to do so and yeah also you can
163:33 - just go ahead and check out the
163:33 - iphones.com with a really awesome source
163:36 - much more stories like that
163:37 - and yeah so thanks for watching this
163:39 - video again hopefully you guys have
163:40 - enjoyed that and see you all hopefully
163:43 - in another video tutorials like this