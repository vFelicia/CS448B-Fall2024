00:00 - in this video i will be covering how to
00:02 - make your code clean in testing
00:04 - concurrency and error handling
00:07 - it's always good to strive for 100 test
00:09 - coverage of your code there are plenty
00:11 - of good testing frameworks for
00:12 - javascript and the following principle
00:14 - applies to all of them you should just
00:16 - use a single concept per test
00:19 - so in this bad example
00:22 - we're using the the assert
00:24 - test framework and this test actually is
00:28 - testing for three different things you
00:30 - can see we're trying trying out three
00:32 - different things in regards to the dates
00:34 - and this uh make moment js great again
00:37 - so this is the bad way to do it the good
00:38 - way to do it is to create three
00:40 - different tests so
00:43 - now we have it handles 30-day months it
00:46 - handles leap years it handles non-leap
00:48 - years before remember we just had it
00:50 - handles date boundaries
00:52 - so you should just use a single concept
00:54 - per test
00:55 - the next thing i want to talk about is
00:57 - concurrency
00:58 - you should use es6 promises not
01:01 - callbacks callbacks aren't clean and
01:03 - they cause a lot of nesting sometimes
01:05 - you need them but in es6 promises are a
01:07 - built-in global type
01:10 - so here you can see we use some
01:12 - callbacks when we're getting the free
01:14 - code camp wikipedia page
01:16 - so we get that page and then we have
01:18 - this callback
01:19 - and then we have to see if there's an
01:22 - error then we're going to write the file
01:24 - and then there's another callback and
01:26 - then we have to check on the error and
01:28 - then there's a lot of nesting here but
01:29 - if we just use promises it's gonna look
01:31 - like this so here you can see that that
01:34 - looks a lot simpler we're still getting
01:36 - that the page
01:37 - but then we're gonna use the dot then
01:40 - notation the dot then function to say
01:42 - what what's going to happen after we get
01:43 - the page which is we're going to write
01:45 - the file
01:46 - and then we're going to use the dot then
01:48 - function again
01:49 - to log the files written and then we can
01:51 - catch all the errors in one place as
01:54 - opposed to having a bunch of places
01:55 - where we catch the errors so promises
01:57 - are cleaner than callbacks however
02:01 - if you're using es8 i know most people
02:04 - at this time are on es6 but an es8 async
02:07 - and await are even cleaner than promises
02:10 - so the bad code
02:12 - in this section is actually the same as
02:14 - the good code in the last section
02:16 - because
02:17 - it is good to use promises but it's even
02:19 - better to use async await if you can
02:23 - so this is how it looks like with
02:25 - promises but with async await
02:29 - it's even simpler all you need is a
02:31 - function that starts with the async
02:33 - keyword and then you can write your
02:34 - logic imperatively without a then chain
02:37 - of functions so we have async and then
02:40 - we can say we're gonna await this
02:42 - and when that's done we're going to
02:44 - await that
02:46 - and then you can just console that log
02:48 - just like we did before and then catch
02:50 - errors down there because this is all in
02:51 - a try catch block the last thing i want
02:53 - to talk about is error handling
02:55 - there's just one main thing to know
02:57 - about for this which is just to not
02:59 - ignore caught errors don't ignore caught
03:02 - errors logging the air to the console
03:04 - with console.log is sometimes not even
03:06 - much better than doing nothing because
03:08 - it can get lost in a sea of things
03:10 - printed through the console a lot of
03:12 - programs have a lot of things logged to
03:13 - the prop console so with just
03:15 - console.log you may not you may miss it
03:17 - also anytime you have a try catch block
03:20 - you need to do something with the error
03:21 - because that means you're you're
03:23 - expecting to possibly have an error
03:25 - so one thing you can do instead of
03:28 - console.log is console.error
03:31 - console.error is better than console.log
03:34 - to log errors because it highlights the
03:36 - error in red and gives a little extra
03:38 - information
03:39 - and these other functions notify user of
03:41 - error and report error to service are
03:44 - not built into javascript this is just
03:46 - showing that you can create functions
03:48 - that do these things and you probably
03:50 - should create functions that do those
03:52 - things if possible and as you can see
03:55 - above you should always make sure you
03:56 - handle errors for rejected promises or
03:59 - the rejected async await functions okay
04:02 - that's all for this video this video is
04:04 - based on ryan mcdermott's excellent
04:05 - article on clean code in javascript
04:08 - check the description for the link my
04:09 - name is beau carnes thanks for watching
04:12 - don't forget to subscribe and remember
04:14 - use your code for good