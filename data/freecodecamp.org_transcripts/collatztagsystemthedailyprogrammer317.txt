00:00 - Hey FreeCodeCamp, welcome to another of the daily programmer webseries video
00:04 - And the problem today we're going to be talking about is number 317 called a collatz tag system
00:08 - This one's pretty straightforward
00:10 - And it shouldn't take too long to cover, so let's go ahead and talk about it on the whiteboard,
00:14 - break it down, and then implement it in Javascript. Alright, so the Collatz tag system is kind of defined like so
00:19 - basically you need to give it some input, for instance: a a a
00:25 - We need to continuously
00:27 - Pop off and append different things onto this queue or list based on these production rules
00:34 - so the algorithm kind of works like so: we need to remove the first two characters,
00:39 - and then we look at the first character and append that to the end, so in this case we remove these two,
00:46 - and we append BC at the end and we continue doing this process until we reach a halt case,
00:53 - in which our q is equal to the length of one. So we should end up
00:57 - stopping this whole simulation when we hit the final input of A. So hopefully that made sense.
01:03 - If not, let's go ahead and walk through a couple of steps and this is going to run for at least like 20 or 30 iterations
01:08 - So I'm not going to go through all them, but again starting off the input
01:13 - AAA
01:14 - We remove the first two characters which leaves us with this one here
01:19 - So we have 'a' and then we append to the end whatever the first character was every move so in this case I have ABC
01:27 - So variation two we're going to remove AB
01:30 - Which leaves us with C
01:33 - and then we're going to look what A should convert to at the end, so again, this is going to be a BC
01:39 - iteration three, we remove CB which leaves us with
01:43 - C
01:45 - and we find what C converts to which is triple a
01:50 - Keep doing that process
01:53 - Where we remove CA
01:55 - C converts to three A's
01:57 - And we continuously do that
02:00 - Until we hit our whole case which will be A so this should be
02:05 - pretty obvious that you need some type of loop where you just keep on looping over
02:09 - your original input while
02:11 - it's greater than or equal to 2, right, because when you reach the string length of one that's when you're done
02:16 - so you're probably need some type of while loop and you need to keep on looping and
02:21 - Doing those two operations where we remove the first two characters,
02:26 - look at what the first character was,
02:29 - and then append to the end of the input
02:32 - based on these production rules.
02:34 - So last time just to make it clear. Let's write it down. We say:
02:38 - Loop
02:40 - while input
02:44 - length
02:46 - Greater than or equal to two
02:51 - remove first two
02:57 - characters
03:02 - Append
03:04 - to input
03:07 - based on
03:10 - first
03:12 - character.
03:14 - And then you just keep on repeating that. So that's pretty easy pseudocode
03:17 - We should be able to map that to Javascript
03:20 - So let's go ahead and go to code panning try to implement this algorithm and see if we can reproduce the Collatz tag system
03:25 - Hi, this is pretty fun to do - it's really short and simple, so let's get to it.
03:28 - The first thing we need to do is the query function, so I'm going to call this function
03:32 - 'function tag system', and it's going to take an input which is going to be or character array or string
03:40 - So I'll just call it 'tape' since I guess the tag system does something on the tape
03:44 - I don't really look into it too much, but if you wanna read the Wikipedia
03:47 - Maybe talk about it in the comments or discussion of the subreddit
03:50 - Maybe you can learn more about it, but I'm just trying to go over the algorithm
03:55 - but anyway, so we have a
03:58 - Function called tag system, which I'm just going to go ahead and return, um..
04:04 - 'steps'. So in this case. I'll say const steps is equal to
04:10 - an empty array
04:11 - and that's going to be a
04:13 - Barrier Bowl or an array where we can keep track of all the steps and print them out in the console.
04:18 - And then down here just to get set up, I'll go ahead and call tag system with
04:24 - Triple-A
04:28 - So at this point,
04:30 - we have a function called tax systems, it's going to create an array of steps and somewhere in the algorithm in the middle
04:35 - we're going to push those steps one by one as we iterate over the different, um, the rules and whatnot
04:42 - So the second thing that's kind of useful to do is
04:47 - let's kind of create a hash map so we can map the production rules of what the first character should be
04:53 - to what it needs to be appended to at the end so we can say const rules is equal to an array or an object
05:01 - where a
05:02 - maps to
05:04 - (I think that one maps to BC)
05:08 - B maps to A and
05:11 - C maps to triple A
05:15 - So now we have our production rules where we can easily just ask it:
05:19 - Okay, if I start with an A what do I need to append? Well, it's going to be a- BC
05:22 - If I ask for a C it's gonna give us 3 a's and we'll see what that's going to do later on
05:28 - So then to our logic that we wrote out those three different steps: the first one is while the tape
05:35 - is still greater than or equal to length of 2
05:38 - alright, so that means we still have more than just a single A we need to continuously do some step.
05:44 - And at this point we can say steps.push the tape
05:48 - So what is the value of the current string, or tape, at this iteration, and we're just going ahead and push that into steps
05:55 - and then
05:58 - The second part of the rule was removing the first two characters so we can do tape.substring of 2
06:06 - to give us everything after the two characters and set tape equal to that
06:15 - so that will set
06:17 - tape equal to itself
06:20 - Cut off the first two characters, but then we also need to append something at the very end, right?
06:25 - Which is where our production rules come in so we can say plus
06:30 - Rules and
06:33 - then we can say
06:35 - tape of
06:36 - index 0,
06:38 - which was the very first character,
06:39 - and then finally we do steps.push and push the final result of the tape and then of course return steps at the end
06:45 - so now I'm going to go ahead and run this code,
06:48 - and we see that it does print out all the steps
06:52 - so it starts with AAA, it goes ABC, CBC, CAAA, AAAAA,
06:57 - and then continuously goes on until it reaches the very last step where it just gets an A.
07:04 - And you can try this with, you know, various different inputs to see what happens, so
07:09 - I'll try it with two ways and see what the output is
07:12 - And it just gives us three steps. I could try it with four A's
07:18 - I'm sure the output's gonna be much longer. So just make this a little bit easier to read
07:22 - let's go ahead and print this out stringified, so I can say JSon.stringify -
07:28 - Stringify - and then pass it the tag systems, pass it 'null', pass it 2,
07:36 - For the indentation level - and then of course give us some colons there,
07:43 - or commas I mean, clear this, go ahead and run this,
07:52 - All right
07:52 - So now I can actually show you since it was going off the screen before,
07:55 - all the different console outputs of all the steps that it takes
07:59 - for it to reach
08:01 - that ending halting character of A.
08:06 - Cool, so that pretty much wraps up the whole problem of how do you solve the Collatz tag system in that subreddit.
08:12 - It's pretty straightforward
08:13 - You know, just keep on looping over the tape, or the string, remove the first two characters and then append to the end
08:21 - whatever the production rules tell you to append,
08:23 - and then just continuously run this until we reach the halting case,
08:27 - which will just be a single character A, and then print out the steps at the end.
08:30 - And that's all we do. So hopefully this tutorial is pretty good, and hopefully this kind of challenged your mind a little bit.
08:35 - Be sure to like this video if you thought I was good and subscribe to freecodecamp below. Alright, thanks for watching.