00:00 - learn how to turn figma designs into
00:02 - code using AI in this course anbo will
00:06 - teach you how to speed up development
00:08 - using looi she will demonstrate how you
00:11 - can easily create and deploy front-end
00:13 - code starting with just the design locco
00:17 - provided a grant to make this course
00:18 - possible hey everyone and welcome to
00:21 - this course in which I'm going to show
00:22 - you how to not only use an AI tool to
00:25 - convert your designs into production
00:27 - ready front end code but also deploy it
00:29 - as a fully functional application that's
00:32 - right this is what the app is going to
00:34 - look like at the end so a Homestay
00:36 - rental app like Airbnb called Local Host
00:39 - it will map out all of our property data
00:41 - as well as deal with authentication or
00:43 - in other words use the signups and
00:46 - signant my name is Ana Kubo and I'm a
00:48 - software developer as well as course
00:49 - creator on free Camp as well as on my
00:52 - own channel and today I will also be
00:54 - your guide this means that you'll be
00:56 - able to turn designs that you have
00:58 - created in figma into code and make
01:00 - tweaks to the code too if you want if
01:03 - you would like to make some tweaks then
01:05 - naturally some coding knowledge will be
01:06 - required but don't worry I will walk you
01:09 - through this step by step and in fact
01:12 - here is an outline of exactly what we
01:14 - will be covering in this course so first
01:16 - off we're going to start with the
01:17 - introduction followed by what exactly is
01:19 - figma then we're going to have a look at
01:21 - the design followed by locy lightning
01:24 - and Loco Ai and that's when we'll start
01:26 - building out our app we're then going to
01:28 - learn how to single app to get Hub as
01:30 - well as create a database and create
01:32 - authentication by building out a backend
01:35 - and finally we're going to deploy our
01:36 - app okay so great I'm excited in this
01:39 - course the app we will be building we'll
01:42 - have react for the front end node.js for
01:44 - the back end mongod DB for our database
01:47 - management and netlify to manually
01:49 - deploy the application so let's go ahead
01:52 - and check out the design
01:55 - first the tool we are going to be using
01:57 - for app design is a tool called figma it
02:00 - has a great reputation as one of the
02:02 - leaders in collaborative web design and
02:04 - allows users to come up with user
02:05 - interface or UI designs as well as user
02:09 - experience or ux designs as a team in
02:12 - real time and as a bonus it has a free
02:15 - tier that we can use so what are we
02:17 - waiting for we are going to first open
02:19 - up a design file all together so we can
02:21 - look at it first okay so here is what
02:25 - figma looks like this is the website on
02:28 - figma decom and I do already have an
02:31 - account so I have already signed up to
02:34 - this and all we're going to do is just
02:37 - get the link in the video description
02:40 - let's go ahead and get it this is what
02:43 - the full link should look like so here
02:45 - it is I've just pasted it and just hit
02:48 - enter okay so this is the design don't
02:51 - worry I'm going to talk you through it
02:53 - in a bit first up however let's open up
02:56 - this design right here this design for a
03:00 - holiday home hosting website in figma so
03:04 - just go ahead and click open in figma
03:07 - and of course it's going to allow you to
03:09 - create an account if you don't have one
03:11 - already but I already do so I'm just
03:13 - going to go ahead and select continue
03:15 - with Google which will give me this
03:17 - popup and I'm just going to select the
03:19 - Google account I want to sign in with in
03:22 - this case it's Ana at cod with anna.com
03:24 - and it should take me into figma so that
03:28 - I can open this up so open in figma once
03:32 - I'm already signed in okay so great this
03:37 - is just the cover for the figma file so
03:41 - don't worry about that what is
03:43 - interesting however is under getting
03:45 - started we can see all the pages that
03:48 - make it up so here is the homepage as
03:52 - you can see here and this allows you to
03:54 - essentially filter through lots and lots
03:57 - of Holiday Homes based on where they are
04:00 - the check-in date the checkout date and
04:03 - the number of guests staying okay so
04:06 - this is what it will look like this is
04:08 - the design file and of course if we
04:10 - click into one of these so for example
04:13 - if we clicked into Brightwood cabins the
04:16 - page or the property Details page should
04:19 - look like this so we have one image
04:22 - that's showing up as large as well as
04:23 - lots of lots of other images that we can
04:26 - click into as well as the title of this
04:29 - property which which is Brightwood
04:30 - cabins the location of the property the
04:32 - amount of reviews left on this property
04:35 - as well as the average rating which
04:37 - seems to be very high it's five stars
04:39 - you also have the ability to like this
04:42 - or not as well as a description of the
04:44 - property as well as of course how much
04:47 - it is to stay here per night as well as
04:49 - some analytics on best time to book of
04:52 - course we also have the option to
04:53 - actually book the property as well as
04:56 - have some information about who this is
04:58 - hosted by
05:00 - about this home here well we have a lot
05:03 - more information about it as well as the
05:05 - immunities that are applicable to this
05:08 - property and of course if we select here
05:11 - we will be able to see more what's great
05:13 - about this is that you also have a map
05:16 - based on the coordinate or the longitude
05:18 - and latitude of the property as well as
05:20 - some weather information about your
05:23 - state what is also cool is that you can
05:26 - see reviews that users have left as well
05:29 - as simp s stays in the Local Host
05:32 - website we will also add a sign up page
05:35 - which allow you to sign up by asking you
05:38 - for an email address a password and a
05:41 - way to confirm the password just to make
05:43 - sure you haven't made any errors or you
05:45 - can sign up with Google Facebook or
05:47 - apple and of course this is the sign up
05:50 - page we also need a way to log in which
05:53 - just requires the email address and the
05:55 - password so wonderful these are the
05:59 - design design files if you haven't used
06:02 - figma before then please go ahead and
06:05 - just familiarize yourself with it a
06:07 - little bit more before moving on okay so
06:12 - it's all very useful if you look in the
06:15 - drop downs here the header is split as a
06:18 - component the hero container and if you
06:20 - keep going into these it will break them
06:22 - down even further wonderful let's move
06:28 - on okay now that we have walked through
06:31 - the design of our app we are going to
06:32 - start using a figma plugin this plugin
06:35 - is called the LOI plugin and allow us to
06:38 - utilize something called locy lightning
06:40 - that will essentially convert this figma
06:42 - design to high quality production ready
06:44 - front end code in just one step Loy
06:48 - lightning is powered by Loco AI that
06:50 - leverages their in-house large design
06:52 - models trained on millions of designs
06:54 - and web apps it is also important to
06:57 - note here that while you might be
06:58 - following along with exactly what I do
07:01 - the AI might have generated something
07:03 - slightly different for you so just keep
07:05 - that in mind while watching this
07:06 - tutorial and let's have a look at the
07:08 - quality of this code that got generated
07:10 - for me
07:13 - now okay so first things first we're
07:15 - just going to sign up to loc. a we're
07:18 - going to try for free so please go ahead
07:21 - and click on this button right here
07:23 - we're just going to sign up to a free
07:26 - version so this free trial can can be
07:29 - extended every 3 weeks so just keep that
07:32 - in mind I'm just going to go ahead and
07:34 - continue sign in with Google so this
07:37 - should bring up this Google popup in
07:41 - which I I'm just going to select my
07:43 - Google account in order to share this
07:46 - information with loc. a and to log in
07:51 - okay so I'm just going to go ahead and
07:53 - continue and great I'm going to choose
07:56 - to have my name as this as a default
07:58 - please put free to use whatever username
08:01 - you wish and hit enter now I'm going to
08:04 - just go ahead and select which one
08:08 - describes me most I'm going to go ahead
08:10 - and select founder and I'm going to go
08:13 - ahead and put full stack developer so
08:15 - just choose the same as we are going to
08:17 - be building a full stack
08:19 - application or choose something that is
08:22 - more suited to you if you want the
08:25 - prompts to kind of be catered to you as
08:28 - well I'm going to go ahead and put
08:30 - startup and we can go ahead and put our
08:33 - company name if we want I'm just going
08:35 - to put code with
08:37 - anna.com and hit next again you're just
08:42 - going to be asked to answer a few
08:44 - questions here and then the design tool
08:47 - that we're going to use today is going
08:48 - to be figma so I'm just going to select
08:50 - that option and select next we can also
08:54 - choose the Frameworks that we want to
08:57 - use and today we are going to be
08:59 - choosing react as that is what we're
09:01 - going to be using for the front end so
09:04 - please go ahead and select the same and
09:06 - just go ahead and click next great so
09:10 - we're all signed up now let's go ahead
09:12 - and get the figma plugin so just go
09:14 - ahead and select that and this should
09:16 - open up in figma now so if you don't
09:20 - have a figma account please go ahead and
09:23 - sign up I'm just going to go ahead and
09:25 - click on this button right here and
09:27 - continue to sign in to my figma account
09:31 - once again just with my Google account
09:34 - okay great I'm going to select
09:37 - continue and wonderful so we are now in
09:41 - figma as you could see by the URL and we
09:44 - are adding the locy lightning plugin to
09:48 - figma so in order to add this plug-in to
09:52 - figma of course we are on figma Doom at
09:55 - the moment I'm just going to choose open
09:57 - in and because we already are signed
10:00 - into figma it should come up with all my
10:03 - figma projects of which one is the Local
10:06 - Host website so I can choose to select
10:10 - that and it will essentially open up my
10:13 - Local Host website once more and then
10:16 - show the plugin so I can choose to
10:19 - select run here and then that will run
10:22 - the localy lightning plug-in on this
10:25 - design so you could have done it that
10:27 - way or if you're also new to figma
10:30 - another way to add plugins is by
10:32 - selecting the plugin from here and then
10:35 - you can manage plugins or for me I
10:38 - already have it here it's Loy lightning
10:40 - as a recent plugin and it should take
10:42 - you to this popup as well great now
10:45 - before clicking let's go we actually
10:47 - need to select the files that we want to
10:50 - convert into code so in order to do this
10:52 - I'm just going to select getting started
10:54 - once more and let's just select all of
10:56 - these okay so all of these four pages
11:00 - and now let's get up the plugin again so
11:03 - this one right here and let's go through
11:05 - the steps so let's go ahead and select
11:08 - let's go and I'm happy to name this
11:11 - project on loc. a localhost website just
11:15 - so it's the same as this figma file and
11:18 - we're going to make a web app I'm going
11:20 - to select react for the framework I'm
11:22 - going to keep this as it is we can
11:24 - change this later so I'm going to choose
11:27 - typescript we're also going to have CSS
11:29 - variables the St is going to be CSS
11:31 - modules units we going to have pixels
11:33 - over REM I'm fine with Pascal case and
11:37 - we are also going to choose material UI
11:39 - however just because this will allow us
11:42 - to have optimal preview and code
11:44 - conversion so let's go ahead and select
11:47 - create so now this is going to convert
11:50 - our designs to code make sure you've
11:52 - selected those four frames and hit let's
11:55 - go so what exactly is happening here
11:58 - well as it's scanning there's a lot of
11:59 - stuff actually happening under the hood
12:02 - there is a responsive design being
12:04 - created and I'm going to show this in a
12:06 - bit as well as locy AI is automatically
12:09 - tagging interactive elements such as
12:11 - inputs and buttons so they can add some
12:14 - functionality to them it's also creating
12:17 - reusable components so just like you
12:19 - would in react and also recommending
12:21 - human readable layers and class names to
12:24 - make your life easier now it's important
12:26 - to remember that AI is never perfect and
12:29 - that can be moments when it doesn't get
12:30 - everything 100% as you would like Loi
12:33 - lining has a feature that lets you
12:34 - review all AI decisions and change them
12:37 - to make some fixes this would include
12:39 - things such as tweaking responsiveness
12:41 - for the header or the scroll and so on
12:44 - and here we go so this is looking great
12:47 - we have the code for our pages so first
12:53 - things first I just want to show you
12:55 - that this code is in fact responsive we
12:58 - of course have the default of what this
13:00 - looks like on a web browser or a smaller
13:04 - web browser in which there's three
13:06 - property showing an even smaller one
13:09 - like this and then we have more so
13:11 - perhaps a tablet like so in which
13:13 - there's only two or a mobile phone in
13:16 - which it looks like this this is looking
13:20 - cool so let's go back to the default
13:23 - that is in fact responsive and if you
13:25 - want to view it in different
13:26 - responsiveness you can be way more
13:28 - specific by Chang changing it here what
13:30 - is also cool is like I mentioned that
13:33 - the inputs so all the input and buttons
13:37 - have may given functionality so by this
13:40 - I mean I can actually select a date and
13:43 - it will be shown here and even the
13:45 - select input has been generated to fit
13:49 - the design of this website so this is
13:52 - looking pretty cool okay and of course
13:56 - if we click into one of these as well
13:58 - that will work and take us to the
14:00 - correct page so that is also amazing
14:04 - that it figured that out great and let's
14:08 - go back to our home page so that's it
14:12 - for the responsiveness and what is also
14:14 - great is the code and it's
14:16 - readability so I think the class names
14:20 - that have been chosen are pretty good I
14:23 - I would have chosen the same so I'm
14:25 - pretty happy with that and of course
14:28 - just like in rea all the components have
14:30 - been split out so we have a lot in here
14:33 - we have the homepage which is composed
14:36 - of these different components such as
14:39 - the header component the hero container
14:42 - the search section header and the
14:44 - listing items onto which data will
14:47 - eventually be mapped out at the moment
14:50 - we don't have any data in here so we've
14:52 - created a reusable component or to be
14:56 - specific the AI has created a reusable
14:59 - component which has been reused many
15:01 - times here with data fed in which we can
15:05 - later map out if we connected to a
15:08 - database okay so that is example of a
15:11 - reusable component in action wonderful
15:16 - of course if you like to see the code
15:17 - and full you do have this button right
15:19 - here where you can focus on it if you
15:22 - would like one thing I also did mention
15:25 - is that we can actually change the
15:26 - settings of this project later on so as
15:29 - you can see I chose to use CSS variables
15:33 - and I chose to use CSS modules but if I
15:36 - just wanted CSS and I wanted JavaScript
15:39 - then that can be applied too and as you
15:42 - will see that's now changed so there you
15:46 - go it's really up to you and whatever
15:48 - you're comfortable with and the best
15:50 - part is that you can change it later on
15:52 - and those changes will be reflected in
15:54 - the code so as you can see here this has
15:57 - also been changed
15:59 - great and the typescript has been
16:02 - removed and we just have JavaScript code
16:05 - right here and the file names have also
16:08 - been changed so we used to have TSX and
16:10 - now we have Js fantastic now this code
16:15 - has been generated because looy has been
16:17 - traded on hundreds and hundreds of
16:19 - designs but you know sometimes maybe
16:21 - something isn't quite like you'd like it
16:24 - don't worry about that because we can
16:26 - change it so on here so just just to the
16:29 - right hand side if you scroll down we
16:31 - can actually review Loco ai's decisions
16:35 - so everything that's happened so the
16:37 - design Optimizer the tagging the
16:39 - responsiveness as well as styling the
16:42 - interactions of the inputs the layer
16:44 - names and the code components and props
16:47 - can all be reviewed so I'm going to show
16:50 - you an example of how to do this now and
16:52 - of course once you learn how to do this
16:54 - you can then apply this to anything you
16:57 - want so I'm just going to actually
16:59 - minimize this code and let's say that we
17:02 - are not happy with how this looks when
17:05 - the screen is 1,60 pixels by
17:10 - 665 so as you will see perhaps you want
17:13 - the images to you know go all the way to
17:16 - the sides not kind of be stuck in the
17:18 - middle so I'm going to show you how to
17:21 - do this now so let's review the
17:24 - responsiveness and then under here in
17:27 - the stay section under
17:29 - homes so let's go ahead and select
17:32 - listing item so this one right here and
17:35 - you can select edit and then all I would
17:37 - do so these are the CSS rules that have
17:39 - already been applied and I can add some
17:42 - Advanced CSS properties and this is
17:44 - really allow me to use my CSS knowledge
17:46 - as a developer I'm going to apply Flex
17:49 - one to this and save and done so now you
17:52 - will see that it is stretching to fit
17:54 - the whole thing and I just need to apply
17:57 - that to all the items here too so let's
18:00 - go ahead and add
18:03 - Flex one save and done and that should
18:07 - now be stretching out evenly and just
18:10 - carry on doing this for all of them as
18:13 - well so that is something you can do
18:17 - that is just a very simple example and
18:20 - you will see how this row is now nicely
18:24 - stretching out to this whole container
18:26 - whereas this row which has not been
18:28 - giving the Flex one CSS property is as
18:32 - it was before I'm just going to quickly
18:34 - apply this to all of these now as well
18:37 - so they all have these same CSS
18:39 - attributes and they all stretch
18:43 - out okay of course there's so many
18:46 - things you can do in here this is just
18:49 - one of the things that can be applied
18:52 - you don't even have to have advanced CSS
18:55 - properties you can play around with
18:57 - stuff that's already
19:00 - there and wonderful so now this is
19:04 - looking so so good I'm happy with this
19:09 - an option to do a bulk update on all
19:11 - these components will be released soon
19:13 - so keep an eye out for that now another
19:16 - thing you can do is review the tagging
19:18 - and I'm going to show you what this
19:19 - means for this I'm actually going to go
19:21 - ahead and head over to the sign up page
19:25 - so this is a sign up page and you can
19:28 - review the tagging you can actually just
19:32 - select one of these right here so maybe
19:35 - the one with the password so let's go
19:38 - ahead and go into the input right here
19:42 - so here is the one for the password and
19:44 - if I edit it I can edit the properties
19:47 - so at the moment the password input it
19:51 - has a type of text but we can be much
19:53 - more specific we can give it the type of
19:56 - password and for those of you who are
19:58 - familiar with the inputter type password
20:00 - it just means that this would be treated
20:02 - as a password input instead of just a
20:05 - normal text input so that is something
20:09 - you can do and there's a lot of other
20:11 - stuff you can select as well such as
20:14 - making this required great so at the
20:18 - moment without this changes the password
20:20 - well if I type you can see it but if we
20:23 - added the type of password then if you
20:26 - save this and type in here it will show
20:28 - up as do
20:29 - because the input with a type of
20:30 - password will have the text show up as
20:33 - dots as opposed to if the input had the
20:35 - type of text great let's go ahead and do
20:39 - the same for confirm password so edit
20:41 - properties scroll down here change the
20:45 - type to password once more and then also
20:48 - make this required let's just go ahead
20:51 - and select done another thing you can do
20:54 - is add your own custom code or just
20:57 - simply notes to a software engineer in
21:00 - order to you know make suggestions about
21:02 - what other code should be added so for
21:05 - this let's go ahead and go back to the
21:07 - homepage say we wanted to essentially
21:10 - make this button show more of these
21:14 - cards so we would need to add some
21:17 - functionality to this right well if I
21:19 - select edit and then select the button I
21:23 - can go ahead and select actions and
21:25 - interactions add an action and and here
21:29 - is where you can write your own code or
21:32 - you can simply add a comment to it so we
21:36 - can go ahead and put please show more
21:41 - list items on click of this button and
21:47 - this note will be added essentially to
21:50 - the onclick action of this button so
21:54 - that is something that we can do or we
21:56 - can select from these pre-made on click
21:59 - actions above and let's click done so
22:02 - now if we go to the code I'm just going
22:05 - to move this up a little bit and of
22:07 - course this is on the homepage if we go
22:10 - down
22:11 - here and find the
22:13 - button so on show more button click and
22:18 - then find that function up here that has
22:21 - been added so let's go and find
22:26 - it you will see on show more button on
22:29 - click that too has been added so that is
22:33 - exactly what we wrote that is a pretty
22:36 - cool way to essentially leave notes for
22:38 - engineers if you're not maybe aware of
22:42 - how to code or where this should go
22:44 - exactly
22:46 - cool okay so let's go back to preview so
22:49 - now let's talk about layer names so if I
22:52 - go ahead and select review you will see
22:55 - what the figma layer name was called as
22:58 - well as the recommended layer name that
22:59 - was generated so I'm quite happy with
23:03 - these of course error Handler is much
23:05 - more clear than frame 98 data combine is
23:08 - much more clear than frame 44 but of
23:11 - course if you want to edit it then you
23:12 - are more than welcome to you can just
23:16 - replace it just like that I'm not going
23:18 - to do it but if you need to do it then
23:20 - that is where you would go okay so under
23:23 - preview and then just select the layer
23:26 - names and then edit the one you want and
23:28 - click done great now one more thing I
23:33 - just want to show you so because we will
23:35 - be hooking this up to a back end and we
23:37 - will be mapping out lots of data onto
23:40 - components such as these reusable
23:41 - components right here we also might want
23:44 - to review what props these reusable
23:48 - components take or any other components
23:50 - in fact so I can go ahead and review
23:53 - this and I can select the listing item
23:56 - for example so you will see here the
23:58 - listing item there's 16 instances of it
24:01 - so these are the listing items once more
24:04 - just as a refresher and it takes 13
24:06 - props so let's go ahead and have a look
24:09 - at this so the first instance of it so
24:12 - this one right here now you might not
24:15 - want to take all these props because I
24:17 - would imagine some of these stay the
24:19 - same so for
24:22 - example here you can see the prop name
24:24 - listing image well that would be unique
24:26 - so that would be a prop fed in the
24:28 - listing title would be unique listing
24:30 - subtitle also unique rating 4.9 and
24:33 - price would be unique also so these
24:35 - you'd want to keep the same but if you
24:37 - didn't want one so for example if the
24:39 - heart icon was fed in well the heart
24:42 - icon is the same on all of these so we
24:44 - would be able to delete that simply by
24:46 - removing the prop however the AI did a
24:49 - really good job here I'm really happy
24:51 - with these props so I don't want to
24:53 - change a thing I'm going to keep this as
24:56 - it is great
24:58 - when it comes to the style props I don't
25:01 - really want to feed these in because I'd
25:03 - want them to all be exactly the same so
25:05 - for example I could just go ahead and
25:08 - delete all of
25:10 - these and go ahead and click save so now
25:14 - only seven props are being added to
25:17 - these components and let's go ahead and
25:19 - click
25:21 - done this is looking
25:24 - good now that we have the UI of our app
25:27 - built let's continue continue making our
25:29 - app an actual usable product in order to
25:32 - build upon the code generated we will
25:34 - need to sync the code to the logi
25:36 - Builder locy Builder is a platform that
25:39 - enables you to modify your code settings
25:41 - create components and bind Data before
25:44 - integrating it into your Ci or CD
25:46 - pipelines as well as a bunch of other
25:48 - stuff that we will be exploring together
25:50 - now okay so I think we've explored the
25:53 - preview which by the way is running on
25:55 - Live code that logy lightning generat
25:58 - ated I think it's now time to have a
26:01 - look at the locy Builder in order to
26:03 - build out this app even more okay so in
26:06 - order to sync to the Builder we're just
26:09 - going to select continue in Builder and
26:11 - make sure that we have all selected
26:15 - frames so select all the frames so there
26:18 - you go and just go ahead and select sync
26:22 - to build so now the syncing is in
26:25 - progress once we have the Builder up I'm
26:27 - going to show you the live sharable
26:29 - prototype feature I'm also going to show
26:32 - you the auto components and props the
26:34 - code configuration and then we're going
26:37 - to sync this code to our GitHub in order
26:40 - to actually run the project and then
26:43 - we'll go back and add State variables
26:45 - and data biding in order to flesh it out
26:47 - further and great let's go ahead and do
26:51 - it so
26:53 - amazing here we are back on locy AI this
26:57 - time and and here we see our code once
27:00 - again if you select on a component such
27:03 - as the header content right here the
27:06 - code will show up for us so as you can
27:09 - see here here all the layers that make
27:11 - up our up or in other words you can see
27:14 - here by the little icons that this
27:17 - essentially is a component and then here
27:20 - we have all the elements that make it up
27:24 - so here we go here's a component here's
27:26 - another one and here is a another one
27:29 - and you can deep dive into as many of
27:31 - these As You Wish what is also great is
27:34 - that if you select on localy components
27:37 - this will make it easy to link up this
27:39 - code to an app like storybook for
27:42 - example which lets you manage all the
27:44 - components in an external Place great
27:48 - and you can see what these components
27:50 - look like once again in a default in a
27:53 - smaller screen and so on and in a Mobile
27:56 - screen as well so as you can see here
27:58 - I've just selected the header or you can
28:00 - just select the footer or you can just
28:03 - select the details card as you can see
28:06 - here
28:08 - wonderful I'm just going to select on
28:10 - homepage again now you can also create
28:14 - components and props I'm just going to
28:16 - go back to all settings to show you
28:18 - where I found this so under settings you
28:20 - will see all of these right here code
28:23 - components and props will allow you to
28:25 - Essen you create your own components
28:27 - ones that have have not been generated
28:29 - by the AI and will also allow you to add
28:32 - your own props as well okay so here you
28:36 - can view the current code components and
28:39 - props so for example here I've selected
28:42 - the header on the home page the head out
28:44 - on the property details and you can see
28:47 - what it looks like on all the pages or
28:49 - once again if you want to create your
28:51 - own just under make your own component
28:54 - you would select create after selecting
28:56 - a layer that you want to work work on so
28:59 - for example say you want to do this in
29:01 - the frame here is the frame you would
29:04 - select create component name the
29:06 - component and so on wonderful I'm just
29:10 - going to go back to all settings one
29:12 - other thing you can do is data binding
29:14 - this will allow you to bind data to UI
29:17 - elements using State variables you can
29:19 - bind directly to layers components props
29:22 - or set up database rendering for
29:24 - repeated components you can also
29:27 - configure your code code in which you
29:28 - configure your framework settings and
29:30 - screen settings before exporting your
29:33 - code and of course we also have the sync
29:35 - export and deploy which allow you to SN
29:37 - to GitHub as we will be doing in a bit
29:40 - as well as deploy to things such as
29:42 - netlify or V out so as you can see here
29:44 - the Loy Builder does offer a lot we can
29:48 - also actually view the Prototype so if I
29:50 - select view prototype this essentially
29:53 - is what it would look like once you have
29:56 - actually deployed it so you you can see
29:58 - it in all its different stages as in its
30:01 - responsive stages just right here and
30:04 - you can of course share it so if I click
30:07 - share prototype you can select which
30:10 - screen to share so I can go ahead and
30:12 - select one homepage is the one I'm going
30:14 - to choose and you can copy the link or
30:17 - you can send the link via email in which
30:20 - you just have to put an email address in
30:22 - here and send that link over so if you
30:24 - copy this URL and just paste it you can
30:27 - see see what this website will look like
30:31 - once it is deployed and Tada so this is
30:35 - looking so so good I'm happy with this
30:42 - wonderful and of course we can click
30:44 - into each one of these to get a preview
30:48 - too I'm just going to close that down
30:50 - for now so now let's go back to editing
30:53 - in Builder so now that we've seen the
30:56 - actual prototype will'll be going live
30:59 - I'm going to also talk to you a little
31:01 - bit about the code components that we
31:03 - saw before so in order to actually
31:05 - change these and edit them once again
31:07 - you would select view here and you can
31:10 - see all your components there's 15
31:12 - existing components on the homepage and
31:16 - of course you can edit them so for
31:18 - example perhaps you don't really like
31:21 - what one of these is called let's go
31:24 - ahead and say that you don't like the
31:26 - name of the frame compon component you
31:28 - think this is too generic just go ahead
31:30 - and select the frame component this will
31:32 - of course highlight the component that
31:34 - you're talking about and you can edit it
31:37 - so you can call it whatever you wish
31:39 - maybe I want to call this the
31:43 - property
31:45 - display okay and you can save it I'm not
31:48 - going to do this now but it's good to
31:50 - know you can now this doesn't have any
31:52 - props but if you wanted to change the
31:54 - props instead so let's go ahead and
31:58 - check this out we know that the listing
32:00 - item has props so let's go ahead and
32:02 - select that and you can of course rename
32:05 - them here once again you would select
32:08 - edit you can rename them you could
32:10 - delete them so you can really do
32:11 - whatever you want you saw us editing
32:14 - this in figma as well so you could do it
32:18 - here too here however you do also have
32:21 - the data type that has been applied
32:23 - which you can either choose to put in or
32:27 - leave it as it is once again it's
32:29 - important to highlight that this will be
32:31 - syn to localy components the same thing
32:33 - that I showed you that is applicable for
32:35 - when working with story books great
32:38 - let's move on so wonderful let's go back
32:41 - to all settings we've viewed code
32:44 - components we've already discussed that
32:45 - you can create new components and pass
32:48 - through props we've talked about binding
32:50 - data and configuring code which once
32:52 - again is just the same as what you had
32:55 - in figma that allows you to change these
32:57 - settings and change whatever you used in
33:00 - your code so at the moment we have
33:02 - JavaScript selected CSS we changen
33:05 - pixels and we have Pascal case for file
33:07 - naming great I'm just going to keep that
33:10 - as it is so wonderful and let's go back
33:14 - to settings so finally let's go ahead
33:17 - and sync this right I'm going to select
33:19 - sync and we're going to sync our project
33:21 - with GitHub of course there are other
33:23 - things you can do you can of course pull
33:25 - this code into vs code so there's a v
33:27 - code extension for this if you want to
33:29 - explore that or you can choose to deploy
33:32 - this code as it is to nfy or Vel so
33:36 - those are two options as well we're not
33:37 - going to be doing that here today from
33:39 - here because we want to actually extend
33:41 - this code and in order to do that we're
33:43 - going to S this project to our github's
33:45 - account so we can add to it as well so
33:48 - let's go ahead and select sync project
33:51 - we're of course going to have to connect
33:52 - to our GitHub account so please go ahead
33:55 - and do the same I'm just going to insult
33:58 - authorize locy AI so click install and
34:00 - authorize and then I'm just going to put
34:02 - in my authentication code and then it's
34:05 - going to redirect me like so so great
34:09 - that connection is now done we're going
34:11 - to create a new repository let's go
34:15 - ahead and call this
34:16 - localy app and then I'm just going to
34:21 - confirm repo and brunch so wonderful of
34:25 - course this is going to take a while to
34:27 - do a it's thing I'm going to push to
34:29 - GitHub we can of course choose to review
34:30 - files or you know select the ones we
34:32 - want and select the ones we don't want
34:34 - but I want all of them so let's go ahead
34:36 - and push that to get up so that is now
34:39 - doing its thing of course this might
34:41 - take a while so just come back when this
34:43 - is done okay and great so that has been
34:46 - done you can of course choose to go to
34:48 - the repository to check it out so once
34:50 - again this is on my GitHub now it's
34:52 - called locy app and here is the code
34:56 - along with the read me so amazing I'm
34:59 - just going to go back here and select
35:01 - done and now let's actually get this
35:04 - code onto our computer so I'm going to
35:05 - get this code I'm going to copy this I'm
35:09 - of course going to get up my terminal so
35:12 - here we are I'm just going to go into a
35:15 - folder where I like to keep all my
35:16 - projects using the CD command on a Mac
35:19 - and I'm just going to clone this so get
35:21 - clone paste that URL and hit enter so
35:25 - now that's moving that repository it's
35:27 - cloning it to be precise onto my
35:29 - computer in a folder called development
35:32 - that lives on my laptop okay so once
35:36 - again we're just going to waiter this to
35:38 - do its thing okay and that is now done
35:41 - so now let's go into locy app so I've
35:44 - just used CD to go into that app and now
35:46 - we need to install all the dependencies
35:49 - using the command npmi so wait for that
35:52 - to do its thing it's just going to
35:53 - install all the dependencies that are in
35:55 - the project and then we're going to
35:57 - start it we're going to make a run on
35:59 - Local Host
36:01 - 3000 so once again we're just waiting
36:03 - for this to do its
36:05 - thing and great so those have all been
36:08 - installed now let's do npm Run start and
36:11 - that should start up our app on Local
36:14 - Host 3000 so this should happen
36:17 - automatically okay there we go and we
36:20 - can see our app and great so this is
36:24 - looking so good I'm just going to open
36:26 - up the code in VSS code and this is what
36:31 - it should look like so you have your
36:34 - components your pages your CSS files and
36:37 - everything in here now we want to be
36:42 - able to add some functionality as we
36:44 - said mainly to buttons like this one so
36:48 - for example if we click here and want to
36:49 - show more so for this we're going to
36:53 - have to extract all the data that's
36:55 - coming into these re usable components
36:58 - so we can essentially map them out and
37:02 - add some more data to this so what I'm
37:05 - going to do is let's just go ahead and
37:07 - make a Json file just for us okay just
37:10 - so we can essentially work with it so
37:12 - I'm just going to create a state object
37:18 - Json file and this is going to be an
37:21 - array of 16 items okay because here we
37:25 - have four * 4 four so
37:29 - 16 and I've actually already gone ahead
37:32 - and done this so what I've done is gone
37:35 - in to the pages the homepage and on each
37:39 - of these I just extracted this data
37:42 - right here okay the listing image the
37:44 - listing title the listing subtitle
37:45 - rating price best on show and so on okay
37:50 - and I've essentially done this so please
37:53 - go ahead and do the same it might take a
37:55 - while you have to do it for all 60 of
37:58 - these okay of which you can only click
38:01 - on the first one for demo purposes at
38:03 - the moment so don't put that on here
38:06 - okay just leave that one out leave out
38:09 - the on click once again to show this if
38:12 - we click on the first one you'll be able
38:14 - to go into details about it as we saw in
38:18 - the preview but this won't work on any
38:21 - of the other ones at the
38:23 - moment okay now let's go back to the
38:26 - Builder I'm going to show you how
38:27 - started buying some data so on the
38:30 - homepage what you want to make sure is
38:32 - you have the parent of all the listing
38:34 - items so here it's called homes you're
38:37 - going to now make a component so make
38:40 - sure that is selected once more go back
38:42 - to settings and create a component make
38:46 - component let's just call this card list
38:51 - and click create and now once this has
38:54 - been created we need to create a state
38:55 - variable make sure the data type is an
38:58 - array let's just call this card State
39:01 - and we're going to have to paste in all
39:03 - of the content of this state object Json
39:06 - into there so just copy it and I'm just
39:09 - going to paste this all in like so
39:11 - however making sure for now that we need
39:13 - to have
39:15 - HTTP Local Host 3000 at the front so
39:20 - just make sure to add Local
39:24 - Host 3000 just like I have and you're
39:28 - going to have to do that to every single
39:30 - one so please just go ahead and take
39:32 - your time in doing this do it this
39:35 - slowly as you don't really want to make
39:38 - any errors so maybe do it a little bit
39:41 - slower than I am but just make sure to
39:43 - have that at the beginning of every
39:45 - single image in here and of course you
39:47 - have to have Local Host 3000 running
39:49 - otherwise those images will not show up
39:53 - so once again that's all I am doing just
39:57 - filling that in and then let's hit save
40:01 - so now let's bind this so all I'm going
40:03 - to do is Select bind data I'm going to
40:05 - add the plus sign I'm just going to
40:07 - select the first item click repeat and
40:10 - the data source is selected and if you
40:12 - just look down here you will see all the
40:16 - props along with their values already
40:19 - populated for me so this is looking good
40:22 - I'm just going to hit save and great so
40:26 - now that has been binded you will see
40:29 - all those images showing up so now all
40:32 - that data has been binded and if you
40:33 - look in here we have actually created
40:35 - another another state so here this piece
40:38 - of code is new the const card State Set
40:40 - Card State use State and we've just
40:42 - passed through that whole array with
40:44 - objects into here so that's the starting
40:46 - state of the app and that's being mapped
40:49 - out now onto the listing item so now
40:52 - that we've done that we can also sync
40:54 - this to GitHub so that the latest
40:56 - changes reflect in our code so all we're
40:58 - going to do is Select sync sync project
41:01 - you can choose an existing Branch or
41:03 - create a new Branch confirm repo and
41:06 - branch and here you'll see the files
41:08 - that have been changed it's the card
41:09 - list and the card list CSS and you can
41:13 - push to go okay great and now let's
41:15 - click done and of course now we need to
41:17 - pull in those changes because this code
41:20 - will be updated as you will see here 1
41:23 - minute ago okay we have obviously
41:26 - updated something in here we know what
41:28 - it is and now let's pull that in so I'm
41:31 - just going to get up my terminal again
41:33 - I'm going to stop this from running I'm
41:34 - going to do get pull so we can pull in
41:37 - those changes and we will see them in
41:40 - here okay so we don't actually need this
41:43 - state object Json file anymore because
41:46 - if we now look in components and look at
41:50 - the new component that has been created
41:53 - so here we have the card list you will
41:56 - see that state so use State along with
42:00 - that array with all the images so all
42:03 - the objects that represent the images in
42:05 - here that is being mapped out onto one
42:09 - listing item great this is looking so so
42:14 - good I'm happy with this so now maybe
42:18 - let's hide the last four and apply the
42:20 - logic for the show more button first off
42:23 - however let's just make sure this is
42:24 - running so do npm Run start in order to
42:27 - start the app okay so that is running
42:30 - and now let's go back to the code now in
42:33 - order to show more items so let's go
42:35 - ahead and find Pages homepage I'm just
42:38 - going to minimize this here's the on
42:41 - show more button and if we click on this
42:44 - button we essentially want to affect
42:46 - something in the card list so let's go
42:49 - ahead and import use state in here and
42:52 - I'm just going to do it super simple
42:53 - okay um
42:56 - const
42:58 - show in or show all set show all and use
43:04 - State well we're going to start off with
43:06 - this being false we're not showing all
43:09 - so make sure that that is done and in
43:13 - here I'm just going to do this very
43:14 - basic if show all is not true then we're
43:20 - going to use set show
43:23 - all to be true
43:27 - okay else we're just going to do set
43:31 - show all to be false uh this is just a
43:35 - super basic example of how to make
43:38 - things Dynamic okay so what we want to
43:40 - do now is send show alsoo pass this
43:44 - through onto the card
43:47 - list so this value is either true or
43:49 - false depending on if we've clicked the
43:51 - button and how many times we clicked
43:53 - that button so now let's go to the card
43:55 - list so go to Def definition I'm just
43:58 - going to pass through show all and I'm
44:01 - going to essentially get the card state
44:04 - so let's go ahead and do
44:07 - this here
44:09 - perhaps const
44:12 - cropped card State
44:16 - equals and if show all is true well
44:20 - we're just going to get the card State
44:23 - and assign it to crop card State
44:25 - otherwise we're going to get the C card
44:27 - State and we're just going to bring back
44:29 - the first 12 items okay so we're going
44:31 - to use slice for this so now we're going
44:35 - to get the cropped card state and
44:37 - instead of the card State we're going to
44:38 - map the cro card state so this is just
44:41 - very basic of course I just want to show
44:43 - you this works um this is on the
44:45 - assumption that we only are ever going
44:47 - to have 16 cards okay so at the moment 1
44:50 - 2 3 4 5 6 7 8 9 10 11 12 so 12 because
44:57 - we essentially chopped four off but if
44:59 - we show more there's 16 now a cool way
45:02 - to take this project further would of
45:03 - course be to you know be like show less
45:06 - where you reverse this but that is
45:08 - something you can do in your own time I
45:10 - just wanted to show you this as a quick
45:12 - demo of how you can essentially add
45:15 - functionality to buttons on your site
45:18 - great now let's get to looking this up
45:21 - to a database and for that we're going
45:23 - to have to build that a node.js
45:25 - backend so let's get back to doing this
45:28 - one thing I'm also going to do is
45:29 - perhaps just hide the show more button
45:33 - you know because if show all is true we
45:36 - don't really want to show it as well
45:38 - okay so I've just wrapped that in there
45:41 - and it just means that that won't be
45:43 - visible once you show them all cool so
45:47 - now let's go back here I'm just going to
45:50 - shut these down and then let's make a
45:52 - node.js back end so all I'm going to do
45:55 - is simply I'm just going going to get up
45:57 - my terminal again and I'm going to maybe
46:01 - let's stop this for now because we're
46:03 - going to have to import some packages so
46:05 - first off we're just going to I'm going
46:08 - to create index JS file on the same
46:10 - level as my package Json so index JS and
46:13 - this is going to be our backend
46:15 - essentially so the things we're going to
46:17 - have to do is Define a port I'm going to
46:19 - Define it as Port 8,000 we're going to
46:21 - need Express so cons
46:24 - Express requir
46:28 - the package
46:32 - express we're also going to need course
46:35 - so require course to get rid of any
46:38 - pesky course messages and then we're
46:41 - going to listen out for changes on here
46:44 - as
46:46 - well so we're going to get Express after
46:49 - we've installed the package it's release
46:51 - all of its wonderfulness into Express
46:53 - I'm going to call it to release it even
46:55 - further and save it
46:57 - under the qust app so now this will have
47:00 - all the methods and properties that come
47:02 - with the Express package so what I'm
47:04 - going to do do app use and then course
47:07 - and then call it like so but also app
47:10 - Listen to listen to out any changes on
47:13 - the port so console log
47:19 - listening to port and then we could just
47:25 - do the port name
47:27 - great so now let's go ahead and install
47:30 - those packages so making sure you are in
47:32 - the app
47:33 - npmi Express and also course I'm also
47:37 - going to use secret variable so EnV is
47:41 - another package that we're going to need
47:43 - and hit enter okay so that is now doing
47:47 - its thing and
47:49 - wonderful so now let's run the back end
47:52 - and the front end so all I'm going to do
47:55 - is go down here this is start the front
47:57 - end so I'm going to change that start
47:59 - script and then let's also do
48:02 - start back end like so and we're going
48:05 - to do no demon to listen out for
48:07 - constant changes on the index JS file so
48:10 - no demon is another package like I said
48:12 - it's going to listen out for constant
48:14 - changes so it's one we're going to have
48:15 - to install mpmi noemon and wait for that
48:19 - to do its thing of course please also
48:21 - make sure that all the packages that
48:23 - I've installed are these versions
48:25 - because if you're watching this in the
48:26 - future and doesn't work it could be down
48:28 - to the package version that you are
48:30 - using so just revert back to these
48:33 - great so now let's start our front end
48:36 - so npm start front end and let's also
48:40 - start our back end so once again I'm
48:43 - going to go back here I'm going to
48:45 - create a new tab and do npm Run
48:50 - start back end this time okay so this
48:53 - will start with backend on local home
48:56 - post
48:57 - 8,000 okay so let's go back here and if
49:00 - you look in the terminal listening to
49:02 - Port 8,000 listening to Port 8,000 this
49:05 - is looking great make sure to pass the
49:08 - port through in here as well as the
49:10 - Callback function so now perhaps let's
49:13 - work on something else I'm going to
49:15 - essentially work on signing up and
49:17 - signing in so once again this is just
49:20 - one feature of this website this would
49:22 - be way too long to finish out everything
49:24 - from the whole website but I just want
49:26 - to give you a taster of working with a
49:29 - database for this project so let's go
49:32 - ahead and find the sign in page so we
49:36 - can navigate to the signup page simply
49:39 - by going to Local Host SL signup page so
49:43 - let's go ahead and work on signing up
49:45 - first before working on signing in okay
49:48 - so I'm just going to head over to mongod
49:50 - DB which is going to be my database of
49:52 - choice and I'm just going to choose to
49:55 - sign in okay and if you haven't signed
49:59 - up already please go ahead and do so now
50:02 - so I'm just going to choose to sign in
50:03 - with Google and great so here is my
50:07 - organization called annus organization
50:10 - and I'm just going to create a project
50:14 - so let's go ahead and select new project
50:16 - here and this project well you can call
50:19 - it whatever you wish I'm going to call
50:21 - it locy database okay so
50:25 - Lo
50:27 - I DB and then I'm just going to go ahead
50:31 - and select next so I'm going to give
50:34 - myself the permission so let's go ahead
50:37 - and create this project great now I'm
50:40 - going to create a deployment so go ahead
50:43 - and select that button and let's select
50:45 - the free version uh I'm going to leave
50:47 - as clust to zero in fact I'm going to
50:49 - leave all of these as they are so just
50:51 - the default settings and I'm going to
50:53 - create a deployment wonderful so let's
50:57 - go ahead and create my database user so
51:00 - that password and username have been
51:04 - saved and we're just going to get rid of
51:06 - my IP address so that anyone can access
51:08 - this so first off we're going to choose
51:11 - a connection way uh we can choose any of
51:16 - these I'm going to choose the driver so
51:18 - let's go ahead and install GB so
51:22 - once again I'm just going to
51:25 - perhaps open a new tab and do npm
51:29 - install mongodb so that it's installed
51:31 - into this project and next we're going
51:34 - to have to have a connection string so
51:36 - just go ahead and copy that because
51:38 - we're going to have to use it okay so
51:41 - let's review those steps there we
51:44 - are let's just change the IP access so
51:48 - I'm just going to delete my IP address
51:51 - from here so that anyone has access to
51:54 - this so I'm going to add an IP address
51:55 - this time and allow access from anywhere
51:58 - and click confirm great so that is now
52:02 - doing its thing and here under database
52:06 - users if you have forgotten your
52:08 - password you can edit here and then edit
52:12 - password and auto regenerate a secret
52:14 - password I'm just going to show you mine
52:17 - copy it and keep it somewhere safe okay
52:19 - and update user wonderful so now let's
52:23 - shut this down for now and continue with
52:25 - this at at the moment I'm done so I'm
52:27 - just going to click done on that and
52:30 - great so that is now done let's go ahead
52:34 - and look at cluster zero so just go
52:37 - ahead and click on cluster zero and at
52:40 - the moment it's just loading all our new
52:41 - data sets to clust to zero in the
52:44 - meantime let's go ahead and connect our
52:46 - data with nodejs and JavaScript so let's
52:49 - go back here okay to the index GS file
52:53 - I'm just going to remove that for now
52:55 - and we're going to to require the
52:59 - client from mongod DB we're also going
53:01 - to do app use while we are here and Pa
53:04 - through Express Json so that we can work
53:07 - with Json being passed from the front
53:09 - end to the back end and so on now we're
53:11 - also going to have to define a urii and
53:14 - that is going to be essentially the URL
53:17 - that we saw
53:19 - here so if you click connect again and
53:22 - click through all of these just copy
53:26 - that one right here again and go back to
53:29 - your code and paste it like so but of
53:31 - course in quotation marks as I have done
53:35 - right here and just put in your
53:37 - password your password can of course be
53:40 - stored on the back end or you could just
53:42 - put this whole URI in a EnV file to keep
53:47 - this secure so perhaps let's do that I'm
53:49 - just going to create a new file EnV file
53:54 - and then we can put you r
53:58 - i let's take all of this right here
54:03 - process
54:04 - EnV URI making sure this SP exactly the
54:08 - same as you did here I'm just going to
54:10 - paste that we don't need it in quote as
54:12 - that is a string already and then just
54:14 - put in your password here so this is my
54:17 - password please go ahead and get your
54:19 - own we are not done yet however cuz
54:21 - we're going to have to put our database
54:23 - name here but we actually need to find
54:25 - out what that is first
54:27 - great so now let's go back here so we've
54:30 - got our UI next we're going to get the
54:33 - client so get the client that we just
54:37 - got from
54:39 - client so let's just get client
54:43 - instead and pass through the URI and we
54:47 - should now be connected we are also
54:49 - going to have to await the client
54:53 - connect just like that now let's go
54:56 - ahead and actually put this in a
54:59 - function right so perhaps let's write
55:01 - our first root let's say that we want to
55:04 - sign up so this is going to be for
55:06 - signing up I'm going to do app post and
55:11 - then we're going to go to sign up like
55:13 - so there's going to be an async function
55:16 - request response just like
55:19 - that and then we're going to essentially
55:24 - get the email and password from the
55:26 - front end so const email password this
55:31 - is going to be from the front end I'm
55:33 - going to touch it to the body of the
55:35 - request we're then going to have to
55:39 - essentially salt the password so
55:43 - consult equals bcrypt so bcrypt is a
55:46 - package we're going to use in order to
55:50 - essentially uh add some salt to our
55:54 - password before we hash it okay so I do
55:57 - have plenty of tutorials where I go into
55:59 - this in a lot more detail so please
56:01 - check out my channel for this for now
56:03 - I'm not going to go into a deep dive
56:05 - onto the bcrypt package because I'm
56:07 - going to assume you already have
56:08 - knowledge on it so hash sync and then
56:12 - we're going to pass through the password
56:14 - along with the sort so let's go ahead
56:17 - and install that package right so let's
56:20 - go ahead and do it NP by bcrypt let's
56:24 - also maybe go ahead and add Json web
56:26 - token while we are
56:31 - here npmi Json web
56:35 - token just like
56:38 - so okay so once we have that hashed
56:41 - password the email we're just going to
56:42 - keep as normal in our database that is
56:44 - fine it's just the password that we are
56:46 - worried about I'm just going to try
56:48 - something and catch any errors so
56:51 - console error the error so we can can
56:56 - read it in our back end so what do we
56:58 - want to do well we want to sign send
57:00 - over this and this to our mongod DB
57:02 - database right so perhaps Also let's
57:06 - just get this in here I'm going to put
57:08 - it up here and we can add a finally
57:12 - statement too so there's our catch
57:15 - statement finally we're going to also
57:18 - await
57:19 - client close and we're going to close
57:22 - that
57:22 - connection for now let's just list our
57:25 - databases as we we said so let's head
57:28 - over to Cluster zero so browse this
57:33 - collection and there's going to be some
57:35 - sample data in here we don't really want
57:38 - this I'm just going to delete it sample
57:41 - mflix drop
57:46 - this okay and let's add our own data so
57:49 - let's just call this
57:52 - localy data The Collection name for this
57:56 - is going to be
57:59 - user and then I'm happy with that so
58:02 - let's go ahead and click
58:05 - create okay so there we go there's users
58:09 - and let's go ahead and insert a document
58:12 - so you could do it this way or you could
58:13 - do it as uh Jason it really is up to you
58:17 - so so far we have an ID let's go ahead
58:20 - and add another field this is going to
58:22 - be
58:24 - email and let's go ahead and for now I'm
58:27 - just going to put in Ana test.com and
58:31 - then let's also put in a hashed password
58:33 - so let's Hash a password okay obviously
58:37 - this is going to be very fake uh let's
58:40 - say my password was password the cost
58:43 - factor is 10 so that's like the
58:46 - salt generate
58:48 - hash okay I'm just going to copy this
58:51 - for now so I'm just going to paste that
58:54 - in the password like so in fact maybe
58:57 - let's put hashed password just so it's
59:00 - really obvious and insert so now that we
59:03 - have something in our database that is
59:05 - good that's kind of the format that
59:07 - we're going to apply to everything else
59:09 - so let's try send this over of course we
59:12 - do need to link this up to the front end
59:14 - so let's find where our form is so sign
59:17 - up page here we go and then let's scroll
59:21 - down here here's the form here's the
59:25 - text field so we're going to have to
59:27 - save this to State we've got the email
59:29 - address so let's go ahead and get the
59:33 - values from
59:35 - these so let's go ahead and add a value
59:38 - here that's is going to be the
59:41 - email and let's find it for the password
59:44 - as
59:46 - well so
59:49 - value
59:51 - password and let's save it to state so
59:54 - use state
59:58 - and here I'm going to save it so
60:01 - const email set
60:05 - email use State and we'll start off with
60:09 - this just being an empty string and
60:10 - let's do the same for the password so
60:13 - password set
60:15 - pass
60:17 - word use
60:20 - State and we'll have it as that we
60:22 - should also probably have the confirm
60:24 - password right confirm pass word set
60:29 - confirm pass word we want to make sure
60:33 - that these match so use State like this
60:39 - uh and then let's find the confirmed
60:41 - password so it's the second one in here
60:45 - confirm password that's
60:48 - right
60:50 - value confirm password and then on
60:54 - change we'll go to
60:59 - do set
61:02 - confirm
61:06 - password and pass through the E Target
61:11 - value pass through the event we're going
61:14 - to do the same for all of these so let's
61:17 - find the on change for the other one so
61:22 - here is the text
61:24 - field set
61:26 - password this time and of course the set
61:29 - email so let's do set email okay and
61:34 - then we only really want to be able to
61:38 - sign up if password and confirm password
61:41 - are the same
61:44 - right so let's find that button that
61:47 - allows us to do this here is a
61:51 - button let's add an onclick to
61:54 - it on
61:57 - click and obviously we're going to maybe
62:00 - write a function to sign up so let's
62:03 - define it up
62:06 - here const sign
62:11 - up just like so but only if
62:17 - password and confirm password match do
62:22 - we do something okay great
62:27 - so make sure this is an async function
62:29 - okay we're also going to eevent default
62:32 - so we don't want the whole page to
62:35 - reload and then what we're going to do
62:37 - is await Fetch and we're going to
62:41 - essentially here we're going to have a
62:45 - URL so whatever the server URL is going
62:48 - to be so I'm going to do process EnV
62:54 - react app
62:57 - server URL and then we're going to have
63:00 - the endpoint which is sign up okay so
63:02 - we're going to await that but also we're
63:04 - going to have to actually send through a
63:07 - bunch of other stuff too so we're going
63:10 - to make an object uh this method is
63:13 - going to be a post method as we saw
63:15 - we're posting information headers we're
63:18 - going to pass through as well we're
63:19 - going to
63:21 - do
63:23 - content type
63:31 - application
63:33 - Json and the body well we know that
63:36 - we're going to pass through a few
63:41 - things we're going to pass them through
63:43 - Json
63:45 - stringify and we're going to pass
63:46 - through the email and the password okay
63:49 - so that's all we're going to send and
63:51 - once that is done its thing let's save
63:54 - this as the response
63:58 - let's get the response just so we can
64:00 - see what is going on let's get it
64:05 - Json let's await
64:07 - this
64:09 - const
64:11 - data because we're going to have to find
64:14 - out if this
64:16 - worked and if it did we're going to set
64:19 - some cookies okay so for now I'm going
64:22 - to just console log out the data on the
64:26 - front end because e needs to be put here
64:29 - so great if we click on the sign up
64:31 - button this should send it to the back
64:33 - end let's just go ahead and add the
64:35 - server app URL as
64:40 - well so for now I'm just going to go
64:43 - with
64:45 - this Local Host
64:47 - 8000 but we will of course change that
64:50 - when we need and great let's go back to
64:53 - the index JS page so how are we going to
64:57 - insert a document
64:59 - now so first off however I'm just going
65:01 - to move these things as well so let's
65:04 - get the client I'm just going to put
65:07 - that in here we can delete this I'm
65:11 - going to cut this
65:13 - out and put this in the try so cons
65:17 - database equals client
65:21 - DB and this is going to be
65:24 - locy
65:27 - data
65:29 - const users it's going to be database
65:34 - collection users because that's what we
65:36 - called it I'm just going to make this
65:39 - the same and then con existing user
65:43 - equals oh wait users find
65:47 - one and then we're going to pass to the
65:51 - email okay so we're looking by the email
65:54 - this is kind of like the unique
65:56 - identifier now if
65:59 - existing user already exists then we
66:02 - want an error right so I'm going to
66:03 - return rest
66:05 - status 409 and
66:09 - send user
66:12 - already
66:15 - exists please log
66:23 - in okay but that's only if that exists
66:26 - otherwise I'm going to sanitize email
66:29 - sanitize the email because we want to
66:31 - make sure that everything is lowercase
66:34 - and I'm going to get the email and just
66:36 - make it to lower case so
66:37 - to
66:39 - lower
66:44 - case great and once we've sanitized the
66:47 - email let's actually put in the data
66:51 - right so cons data equals uh let's get a
66:55 - user ID I'm going to actually generate
66:58 - that using uu ID let's get an email
67:02 - which as just the sanitized email really
67:04 - and let's get the password which is now
67:07 - my hashed password so
67:11 - hashed
67:12 - password here okay and we don't want to
67:16 - save as password do we how do we save it
67:18 - here we Sav it as hash password so let's
67:21 - go ahead and do the
67:24 - same now my user ID well I'm going to
67:27 - install another package for this so
67:30 - npmi U
67:34 - ID okay and now we're just going to get
67:37 - that package const we're going to get
67:41 - version four of it so uu ID
67:46 - V4
67:48 - require package
67:50 - uid okay so now we can actually use this
67:54 - so all I'm going to do is go down here
67:57 - and maybe let's do it up
68:00 - here so just where we salt everything
68:03 - I'm also going to generated user
68:08 - ID call that so we can use this and that
68:11 - will essentially create a unique
68:13 - identifier for us so that is the data
68:16 - that we are essentially going to send
68:19 - over so this time I'm going to do con
68:23 - inserted user equals 08 users insert one
68:30 - and then press through the data okay
68:34 - great one other thing we need to do is
68:36 - make a token so const token equals
68:40 - JWT sign inserted
68:45 - user
68:47 - sanitized
68:49 - email and then
68:51 - expires
68:53 - in six
68:56 - multip by 24 so we gave an expiration
68:59 - time and then we're just going to send
69:01 - this over so res status
69:05 - 2011 Jason we're going to send over the
69:08 - token the user ID which is the
69:12 - generated user ID as well so that's
69:15 - going to be sent over so we can
69:16 - essentially store it and save it as a
69:20 - cookie make sure this spells sanitized
69:23 - email exactly the same here here so we
69:26 - can get a
69:28 - token this should be that they equal by
69:31 - the way not just that they exist so make
69:33 - sure that is the same one thing we also
69:36 - need to do here is just
69:40 - require the EnV package and then add the
69:44 - config like so and of course we need to
69:47 - use the token so cons JWT equals
69:54 - require
69:57 - Jason web token just going to move that
70:00 - up here as well so let's go ahead and
70:03 - require bcrypt con bcrypt equals
70:09 - require
70:11 - bcrypt so cool let's give this a go so
70:17 - let's head over here let's go back to
70:20 - here and let's go with Tony at test
70:27 - let's put the password as
70:29 - password password and sign up okay so
70:32 - that is good and if we check in here I'm
70:35 - just going to refresh amazing Tony is
70:38 - signed up so that is looking really
70:41 - really good I'm happy with this so great
70:46 - we are signing up Tony and if we try to
70:49 - sign up again it says user already
70:52 - exists right so that is something that
70:55 - that comes back to us so let's go ahead
70:58 - and go here so we're sending that over
71:02 - but this is really just going to us so
71:04 - we can just console log this out instead
71:07 - so console log user already exists so
71:10 - that we know that you know a user
71:12 - already exists and we can use it so now
71:16 - let's go back here so of course here we
71:19 - are posting that email and password
71:22 - however that's only if the password
71:25 - equals the confirmed password already so
71:28 - that is looking good and of course if
71:31 - the user already exists then we just get
71:35 - some text for us in the back end I'm not
71:38 - going to work on you know displaying
71:40 - error messages that's outside the scope
71:42 - of what we're doing today however one
71:45 - thing that we have done so let's go
71:48 - ahead and look at this is we want to
71:51 - also save this to the cookies right so
71:57 - we are console logging out that data so
72:00 - what we should be sending
72:03 - is the adjacent of the token and the
72:06 - user ID we can just do red status
72:13 - instead and let's return out of this so
72:17 - let's do Annie at
72:20 - test.com 1 2 3 1 2 3 sign up go check in
72:25 - here an it has been added and of course
72:28 - we get the token back and we get the
72:30 - user ID so let's go ahead and say that
72:32 - as a cookie next so let's go back here
72:35 - instead of console logging the data so
72:37 - this is the data I need to get the data
72:38 - token and the data user ID so let's go
72:41 - ahead and do that I'm just going to do
72:47 - set
72:51 - cookie
72:54 - email
72:57 - data
73:04 - email or
73:07 - token data
73:12 - token and we can also do the user ID if
73:15 - we wish set
73:18 - cookie user
73:20 - ID
73:22 - data user ID
73:27 - okay great and then we're going to
73:30 - reload the window so that we don't see
73:33 - the sign up page anymore so window
73:37 - location reload great now set cookie is
73:42 - done from another package so I'm going
73:44 - to have to install mpm react cookie just
73:48 - like so and now we can use it up here so
73:53 - import use
73:55 - cookies
73:58 - from
74:01 - react
74:03 - cookie so great so that's how you sign
74:07 - up however let's just say that we want
74:10 - to redirect to the login page if we are
74:13 - already signed up however now I'm just
74:16 - going to go head over to the app page
74:18 - where we show all the pages because we
74:21 - only want to show certain pages if the
74:25 - or token exists so let's go ahead and
74:27 - get that or token now and for this we're
74:29 - going to once again
74:32 - import use
74:35 - cookies
74:37 - from
74:40 - react
74:41 - cookies cookie even okay so what do it
74:45 - use cookies react cookie yeah that's
74:47 - right so now I can get the O token from
74:51 - this page essentially so let's go ahead
74:55 - and set those cookies here so const
75:00 - cookies
75:02 - set
75:03 - cookie remove
75:07 - cookie then use
75:11 - cookie null and I'm just going to go
75:14 - ahead and copy this line and put it on
75:18 - the sign up page as well so right here
75:21 - so set cookie of course we're already
75:23 - using in the signup page we're using it
75:25 - to set the O token and now we're going
75:28 - to get the or token so save this and
75:30 - we're going to go into the cookies to
75:33 - get that o token so down
75:38 - here I can just get or Define the or
75:42 - token or token by going into the
75:49 - cookies and getting the
75:53 - or token so however we saved it here
75:57 - that's how we're getting it with DOT
75:58 - notation there so if the or token
76:03 - exists then we want to see the homepage
76:08 - right and only if that exists we also
76:12 - only want to see the property details if
76:14 - we have an or token too so make sure to
76:17 - wrap that like so uh the sign up page we
76:20 - don't need an author token for that and
76:23 - the sign in page page well I guess if
76:27 - the or token exists we don't really want
76:29 - to see the sign up page because we are
76:32 - already signed up so if no or token
76:38 - exists this is the only page that we
76:41 - should be able to
76:43 - see great so now we should be able to
76:47 - see all these pages of
76:49 - course however first let's actually save
76:52 - that all token cuz we weren't doing that
76:54 - before
76:55 - so let's go ahead and do again right
76:57 - let's go ahead and do Danny test.com now
77:02 - password password sign up and this
77:06 - time this should be saved so let's go
77:09 - ahead and go to application and under
77:12 - cookies Local Host you should be able to
77:16 - see the all token and the user ID so
77:18 - there is an or token at the moment this
77:20 - is looking good which means that we can
77:23 - see
77:25 - this however if I deleted this or token
77:28 - so let's go ahead and delete that and
77:30 - delete the user ID we don't see this
77:33 - anymore great so this is looking good
77:37 - now I have saved the all user ID to
77:39 - cookies this is for the future if you
77:42 - want to you know be able to know which
77:44 - user is signed up so keep that there
77:47 - however this might be outside the scope
77:49 - of what we will be doing today but I've
77:51 - left that in here if you need so if you
77:54 - need to identify the user by their user
78:00 - ID for
78:04 - later okay so this is looking great
78:08 - let's do the sign in page so once again
78:12 - I'm just going to wrap this in an
78:16 - off token cuz if one exists we don't
78:19 - really want to see the sign up page at
78:21 - all so great let's work on the sign in
78:25 - page now so I'm just going to do that
78:27 - and here's our signin page so here do we
78:29 - just want to be able to sign in right so
78:31 - let's go back here and let's write
78:34 - another root so just going to delete
78:38 - this for now and let's work on signing
78:45 - in so for this I'm going to do app
78:49 - post and let's do login just like that
78:53 - it's going to be an asyn function I'm
78:55 - going to do request response just like
78:59 - so once again let's go ahead and do
79:02 - const
79:06 - client equals new mon go client I'm
79:10 - going to pass through the
79:12 - URI const email and then let's do
79:16 - password CU that is important so I'm
79:18 - going to get that from the body so Rec
79:23 - body
79:25 - we're going to try something and we're
79:28 - going to catch any
79:30 - errors we're going to
79:33 - console error the
79:35 - [Music]
79:37 - error and then finally we're also going
79:40 - to do something and that is the close
79:41 - the connection so we're going to do
79:43 - await
79:47 - client
79:49 - close okay and what we're going to try
79:52 - well we're going to await the connection
79:55 - so await
79:58 - client
80:01 - connect just like so let's define the
80:05 - database once more so
80:08 - client DB and it is localy data now
80:14 - let's define the collection okay so
80:16 - const user as it is and we're going to
80:18 - go into the datab base I'm going to get
80:23 - the collection of
80:26 - users okay and the user what we're going
80:30 - to Define this we're going to await the
80:31 - users we're going to find one I'm going
80:35 - to do it by email as that is our unique
80:37 - identifier now const correct password
80:41 - we're also going to
80:43 - Define
80:44 - test I'm going to await
80:47 - bcrypt and we're going to compare the
80:50 - passwords we're going to pass through
80:52 - the password that we have from the front
80:54 - and so whatever is being passed to the
80:56 - form and whatever the hashed password is
80:59 - that's attached to our user so let's
81:01 - make sure just spell this exactly the
81:04 - same as we did here hash password is
81:06 - going to compare our password to this
81:07 - hash password so that is something that
81:09 - BCP can do again I have a whole tutorial
81:12 - on this so if you're interested please
81:13 - check it out on my channel now if user
81:16 - exists and the correct password
81:21 - exists then we're going to get another
81:23 - token right so we need another tokens
81:25 - token equals and I'm just going to
81:28 - actually copy it from here so let's copy
81:32 - that like so however this time we're
81:36 - just going to pause through the
81:40 - user and the emo okay because we don't
81:43 - need to sanitize it or anything like
81:44 - that CU it's already been sanitized when
81:46 - it went into our database great and then
81:50 - we're just going to do res
81:53 - status 20 one
81:56 - Json we're going to send over the token
81:59 - the user ID which is the user
82:04 - user ID so just like that I'm going to
82:07 - spell it the same way otherwise if that
82:10 - does not work I'm just going to console
82:12 - log out just so you can see in the back
82:14 - end invalid
82:17 - credentials we're not going to send any
82:19 - error messages or show them on the front
82:21 - end it's outside the scope of this
82:23 - tutorial course cool so now let's get up
82:26 - our sign in page so I'm just going to
82:29 - find it now so that we can
82:32 - essentially write the code for this so
82:35 - once again we're going to need reactor
82:37 - use State because we're going to save
82:38 - the email and password so const email
82:43 - set
82:48 - email use State empty string
82:52 - const password
82:56 - set password make sure that is in
83:00 - Brackets like so use
83:02 - State string and then we're going to
83:06 - find the text field so the value of this
83:09 - is going to view well the
83:13 - email unchange we're also going to
83:16 - change this so pass through e and we're
83:18 - going to
83:21 - do set email pass through the E Target
83:27 - value each time it changes and let's
83:29 - just copy this cuz we're going to do the
83:31 - same for the password now so here it is
83:34 - however we're going to do
83:37 - password set password and then set that
83:42 - Target value
83:44 - great so now let's write the function so
83:47 - const login is going to be my
83:53 - function that we go and it's going to be
83:56 - an async function and this is going to
83:58 - be called when we press the button so
84:01 - let's find that button right so wherever
84:04 - we sign up I'm going to do an
84:08 - onclick so here it
84:11 - is so on
84:16 - click
84:18 - log in so now let's define it right here
84:22 - is my login button
84:24 - and all I'm actually going to do is go
84:26 - back to the sign up
84:30 - page and we're just going to copy all of
84:33 - this so everything that's in sign up
84:36 - okay just like so paste it in here and
84:39 - just change a few things so we don't
84:42 - need to really check if the passwords
84:45 - match because of course there's no
84:48 - checking of passwords in here so just
84:51 - get rid of that we're going to prevent
84:53 - this from reloading we're going to await
84:56 - the response from log in this time we're
85:00 - going to make this a post method we're
85:02 - going to pass through email and password
85:04 - we're going to wait the data and then
85:07 - we're going to of course set the cookies
85:09 - the O token and the user ID as well and
85:12 - then we're going to reload the window so
85:14 - let's check if this works first off
85:16 - however we do need an e here as we are
85:18 - preventing the default one other thing
85:20 - we need to do of course is because we
85:22 - use cookies in here is also so import
85:26 - use cookies so let's go ahead and do
85:28 - that here and then of course we need to
85:32 - get this line of code so for when we
85:35 - actually get the cookies and use the
85:37 - cookies and set the cookies so I'm going
85:39 - to paste that in here as well and great
85:41 - let's give this a go so I'm going to go
85:44 - with let's have a look at here let's go
85:46 - with
85:48 - Annie I'm just going to paste in Annie
85:50 - and our password is 1 2 3 and sign in
85:53 - and great so now we are logged in this
85:56 - is looking good and of course we can't
86:00 - see this because you know we're signed
86:02 - up so perhaps we need to do a redirect
86:05 - so perhaps after this has done let's not
86:09 - reload the window I'm just going to
86:12 - navigate to the dashboard okay so let's
86:17 - try this
86:19 - again just going to delete this delete
86:24 - this let's put Annie a test 1 2 3 and
86:27 - then it should take me to the dashboard
86:30 - great and let's do the same for the
86:32 - signup page too okay so instead of
86:34 - reloading the window we just navigate to
86:37 - the dashboard once we are signed in and
86:39 - of course it would be nice to have a log
86:41 - out function as well where you remove
86:43 - the cookies but again I think this is
86:46 - fine for this tutorial it's just a
86:48 - taster of what you can do some other
86:50 - things that I would recommend doing are
86:52 - of course adding a log out button adding
86:55 - this data to the database itself but
86:58 - implementing the filter feature and
87:01 - there's a bunch more but those are my
87:03 - top great so I'm super happy with this
87:07 - I'm just going to clean this up a bit by
87:09 - searching for any console logs I want to
87:11 - keep that one I'm going to keep that one
87:13 - I'm going to keep that one as those are
87:15 - helpers for us otherwise I think I'm
87:17 - quite happy with this I'm just going to
87:19 - format this code a little bit better so
87:22 - format document just like like so I'm
87:25 - going to format the document for this
87:26 - one too because I'm going to commit this
87:28 - to GitHub okay so format
87:33 - document let's format this
87:39 - to so now I'm just going to go ahead and
87:42 - add a DOT get ignore to which I'm going
87:45 - to add EnV as well so do my EMV file and
87:49 - now let's go ahead and commit every
87:51 - changes so yes I'm going to commit it
87:54 - let's add sign up
87:59 - functionality
88:01 - added I can also
88:04 - put log in to be precise click here save
88:09 - and then we're going to pull and push
88:13 - commits okay
88:16 - great so now you will see that un localy
88:19 - app if you refresh that has been added
88:24 - so now let's go ahead and deploy
88:27 - this so I'm just going to head over to
88:29 - netlify okay please feel free to use
88:32 - whatever you wish and I'm going to go
88:34 - ahead and log in going to choose to log
88:38 - in with GitHub I'm going to authorize
88:41 - netlify and let's add a new site so I'm
88:44 - going to import an existing project I'm
88:46 - going to deploy with GitHub and this is
88:49 - just going to essentially give
88:51 - permission to GitHub so I'm going to
88:53 - authoriz
88:55 - netlify and let's search for it so I'm
88:58 - going to go ahead and search for
89:02 - localy and there we go so now that
89:05 - you've found the repository you can then
89:08 - do the next steps in order to deploy
89:10 - this app with netlify you'll have to
89:13 - deploy the front end here and then you
89:15 - also have to deploy the back end
89:17 - separately too in order to do this you
89:20 - will have to read the netfi
89:22 - documentation this is outside the scope
89:24 - of this tutorial so we will leave you
89:26 - with a documentation here in order to go
89:29 - through the next steps and please check
89:31 - out the support forums if you get stuck