00:00 - right in this full ui5 course
00:03 - uh you will learn everything you need to
00:05 - know to get started with
00:07 - ui5 um this course is perfect for
00:11 - beginners
00:11 - who have a little bit of javascript
00:14 - experience
00:15 - it's great for app guys who want to
00:17 - learn more about the front-end side of
00:19 - things
00:21 - and it's also great as a general
00:23 - refresher for your ui5 skills
00:27 - the course itself will come will
00:30 - eventually wind up with you
00:32 - having a app that looks similar to this
00:36 - and it follows each individual step
00:39 - of the sap ui5 walkthrough
00:43 - from step one all the way through to
00:45 - step 38
00:47 - some will go into more details uh some
00:49 - will
00:50 - go through but in a more general way um
00:53 - and we'll leave that for sort of a
00:54 - a separate video on each topic so for
00:58 - example
00:59 - unit testing we go through briefly but
01:01 - not in a huge amount of detail
01:03 - same thing with accessibility because
01:05 - those sections require
01:07 - their own sort of course but for the
01:10 - most part we go through
01:12 - all of the basics um and
01:15 - the walkthrough itself is something i've
01:17 - been through over a dozen times
01:20 - i jump around and and look at various
01:22 - things just to refresh my mind
01:25 - and i find it incredibly helpful which
01:28 - was the reason for the course
01:30 - so obviously going through the video you
01:32 - can jump around
01:34 - pretty much as much as you want and you
01:37 - can always
01:38 - use this as a reference when you're
01:41 - actually building parts of the
01:42 - application
01:43 - each step in the video is handled by
01:46 - a commit in this ui 5 repository on my
01:50 - github
01:51 - so you can come here and if you
01:54 - want to start from any particular step
01:57 - you can browse the files
01:59 - and you can just simply download the
02:01 - code or open it up in github and
02:04 - continue from there so
02:05 - you're more than welcome to jump around
02:07 - as you go
02:09 - using the commits as a guide for
02:11 - whatever step
02:12 - you happen to be on
02:15 - so i'm going to be running all of these
02:18 - well this example from my local machine
02:22 - using visual studio code so your code
02:25 - will eventually look like this
02:28 - and i'm running this on my local machine
02:33 - so alongside this i'll be using the ui5
02:36 - cli so we'll be doing things like ui5
02:40 - serve which will help us
02:45 - actually serve the app locally
02:48 - and the reason we're using uh uf the ui5
02:51 - cli and
02:52 - node is uh because you will eventually
02:55 - run into
02:56 - a cause issue if you try and do this uh
02:59 - sort of com you know on your local
03:01 - machine as it is um
03:03 - and you will eventually run into this
03:05 - issue and
03:07 - unfortunately being a vulnerability it
03:09 - just it'll be quite hard for you to do a
03:11 - workaround
03:11 - you can work in the sap web ide and
03:14 - configure things like destinations for
03:16 - your remote odata services
03:18 - and get around this that's up to you but
03:20 - if you want to follow this course from
03:22 - start to finish
03:24 - we're going to use your ide of choice
03:26 - like eclipse or visual studio code
03:28 - the ui5 cli and obviously node to run
03:32 - the server
03:33 - so again the cause issue will be linked
03:36 - in the description below so have a look
03:37 - for that because
03:38 - it's tripped up many developers
03:40 - including myself
03:43 - and at one at i think it's step 26 or 27
03:48 - we will create a remote odata service
03:51 - for the first time using northwind
03:53 - this again because of the cause issue um
03:56 - won't work
03:57 - there are workarounds that will be
03:59 - available to you if you want to
04:01 - continue that way but otherwise we will
04:03 - continue
04:04 - from that step using a mock server which
04:07 - is
04:08 - in any case an sap based practice so
04:11 - look out for that as we go that'll be a
04:13 - change there
04:15 - and yeah um i hope it winds up helping
04:19 - you guys
04:20 - um and yeah let's jump
04:24 - let's jump right in
04:28 - so now in the prerequisites section
04:32 - we're going to get our local machine
04:35 - ready to run
04:38 - any code we write using node so
04:41 - we're effectively setting up a node
04:43 - server with the
04:44 - ui5 tooling as well um
04:48 - if you're using sap web ide you could
04:50 - skip the step
04:51 - um but if you're working on your local
04:53 - machine which i'm sure most of you are
04:56 - i'm going to follow along through all
04:57 - the different steps so you know exactly
04:59 - what i did to get going so
05:03 - the first thing oh this is also going to
05:05 - overlap with
05:06 - section one or step one a little bit
05:09 - which is fine because
05:11 - obviously things have changed since they
05:13 - created the walkthrough
05:14 - and we're going to run it in the more
05:16 - sort of
05:17 - modern way i guess so um
05:21 - first step is going to be creating a new
05:24 - folder so we're inside our project
05:26 - folder whatever you've called it
05:28 - and now we're going to create an app
05:30 - folder which
05:31 - by naming convention we're going to call
05:34 - web app
05:35 - we're going to leave this here for now
05:38 - and the next thing is we're going to
05:41 - start with
05:42 - the ui5 cli and make sure that's
05:44 - installed it's already installed for me
05:46 - but i'm going to run through it with you
05:49 - and then
05:50 - we'll go from there so you run
05:53 - npm install
05:58 - globally at ui5
06:02 - cli let that run
06:15 - brilliant and to verify the installation
06:18 - we can run this command
06:19 - which is a ui5
06:23 - help and if it is successful you'll see
06:27 - all your different ui5 commands here
06:29 - that you can use so that's obviously
06:31 - successful for us
06:33 - now we need to enable an existing
06:36 - project
06:37 - so we've already got our project folder
06:40 - and we've got a web app folder in here
06:42 - as well so we are going to
06:45 - enable it to work with the um the node
06:48 - server
06:49 - so um the first thing we need to do is
06:52 - create our package.json file
06:54 - and to do that which would be the same
06:56 - in any other node project
06:57 - you type npm in it yes
07:01 - and that'll just create the package file
07:04 - with everything we need
07:06 - um so all the details are set there then
07:09 - we need to generate
07:10 - a uh ur5.yaml file
07:14 - and that is ui5 in it
07:19 - and there we go so now we have a
07:20 - package.json file
07:22 - um and and obviously the ui5.yamf yaml
07:26 - file
07:26 - briefly this package.json file
07:30 - just holds metadata related to the
07:33 - project
07:35 - this file is used to give information to
07:38 - node or npm
07:39 - and allows it to identify the project as
07:41 - well as handle
07:42 - the project's dependencies the ur5.yaml
07:46 - file on the other hand
07:47 - um is the project's ui5
07:51 - tooling kind of configuration file i
07:54 - guess
07:55 - um so that's that's a sort of in a
07:57 - nutshell what they do and what they're
07:58 - there for
08:00 - [Music]
08:01 - so now that we've done that we need to
08:05 - install the dependencies
08:08 - but before we do that so
08:11 - for example if you just went ahead and
08:13 - typed so uh
08:14 - we're going to use the sap ui 5
08:16 - dependencies because we will work with
08:17 - sp ui5
08:20 - so we're going to pick up an error now
08:22 - when we try this
08:24 - so ui5 use sap ui5
08:28 - and depending on the version you can
08:31 - obviously choose that version
08:32 - here we're going to use the latest
08:34 - version just because
08:36 - most of the stuff we develop on our as
08:39 - in
08:40 - an scp or sap cloud platform so that
08:43 - always runs on the latest
08:46 - latest ui5 version when we eventually do
08:49 - deploy
08:51 - so you'll see it says error message
08:54 - failed to read manifest.json file
08:57 - creating the manifest is also a
09:00 - step further on down the process we're
09:03 - going to be doing that a little bit
09:04 - earlier just so that we can set up
09:08 - our cli and our node server to run
09:12 - our project so you will see this come up
09:15 - in one of the sections obviously coming
09:18 - up
09:20 - so for now we're going to go ahead and
09:23 - go into our web app folder and create
09:25 - that manifest.json file
09:27 - there'll be a lot of data in there that
09:28 - won't make sense if you're fairly new to
09:30 - this
09:31 - don't worry we will cover it in a future
09:33 - section but
09:34 - we just need it there for now to get our
09:36 - local project running
09:38 - so we're going to create a new file call
09:41 - it
09:42 - manifest.json and
09:45 - this will be linked down in the
09:48 - description
09:50 - i'm just pulling the data directly from
09:53 - the sap documentation and you can see
09:56 - there's a lot
09:57 - of stuff here that we're going to go
09:59 - through
10:00 - but for now we're just going to pull it
10:02 - all
10:04 - and add it in here then we just need to
10:07 - make
10:07 - a few changes um
10:11 - so we'll just hide the folder structure
10:13 - for now so
10:14 - um if we just scroll through you'll see
10:18 - we have a
10:18 - few issues here and there
10:23 - so the first one is handle validation
10:24 - we're going to leave that as false for
10:26 - now because
10:28 - that's not part of the scope of this
10:32 - section but we will get to it content
10:34 - densities
10:36 - and run everything as false because we
10:38 - just want a
10:39 - standard layout again we'll get to all
10:42 - of this as we
10:43 - move down the line oh and we just need
10:46 - to add a comma there
10:48 - right so we've got no issues here we
10:51 - should be able to save
10:54 - and that looks good so we can close that
11:02 - so now that we have everything all set
11:05 - up
11:06 - we're gonna go ahead and follow on step
11:09 - one
11:10 - where we're just going to create a hello
11:12 - world or hello ui5
11:15 - html file that we're going to display
11:18 - in the browser here so we're now going
11:21 - to go
11:22 - into the web app folder and we're going
11:25 - to create a new file
11:26 - called index.html
11:29 - and i'm just going to copy across the
11:31 - html
11:33 - code here because the it's pretty
11:36 - straightforward
11:37 - it's very standard html you've got your
11:39 - head section
11:40 - a title your body a div
11:44 - with hello world or we could just say
11:47 - hello ui5
11:51 - um and all that's going to happen is
11:53 - this text is going to be displayed
11:56 - so if we go ahead and save let's just
12:00 - close all of this
12:03 - now that we've gone ahead and saved that
12:05 - we to
12:06 - now run this or start running and
12:09 - testing things
12:11 - we just simply use the ui5 cli
12:14 - and type ui5 serve
12:21 - and that should run it on
12:24 - this um localhost address here
12:28 - so we can go ahead and
12:31 - follow that link
12:35 - and if we type in slash
12:40 - index.html
12:44 - there you are
12:50 - so the next section we are moving on to
12:53 - is
12:54 - bootstrapping and what that means
12:58 - is when you run a sap ui5 application
13:01 - you need to load and initialize things
13:04 - and
13:05 - when you initialize sap ui5 resources
13:08 - it's
13:09 - called bootstrapping and once the
13:12 - bootstrapping is finished
13:14 - in our app we are going to tell it to
13:17 - load a simple javascript alert
13:21 - so we're going to run a script in the
13:24 - index.html file
13:26 - and we're going to pull that we're just
13:28 - going to copy it directly
13:32 - from the documentation and so you've got
13:35 - your id
13:36 - which is pretty straightforward your
13:38 - source so this is going to pull it
13:40 - um from a content delivery network or
13:44 - cdn network
13:46 - online uh wouldn't recommend doing that
13:49 - um if you're running a production app
13:51 - you should obviously have your resources
13:54 - or your your the source of your um
13:58 - sap ui5 libraries and things
14:01 - set so that it doesn't change which
14:04 - obviously it would change here
14:07 - but for now for demo purposes we can
14:09 - call it from this
14:10 - cdn url here ui5 has different themes
14:14 - which you'll see shortly we're just
14:17 - going to choose
14:18 - the belize theme the libraries
14:22 - this is just the probably one of the
14:24 - more standard ones one of many but it's
14:26 - sap.m so it's one of the libraries the
14:29 - compatibility version
14:30 - must be set to edge or sort of the
14:32 - latest um
14:34 - that's what that means uh we need things
14:36 - to run asynchronously so we set that to
14:38 - true the difference between synchronous
14:40 - and asynchronous you can look up online
14:42 - yourself but effectively asynchronous
14:44 - means we can run
14:46 - our when our resources load they don't
14:49 - wait for each other to load so it
14:50 - doesn't load one then the other than the
14:52 - other
14:52 - they all just sort of load as they would
14:55 - load if that makes sense um so that's
14:58 - what asynchronous means
15:00 - then we have to set our
15:04 - on init module so um
15:08 - if you sort of follow this folder
15:11 - structure
15:12 - this folder structure is determined or
15:16 - is sort of masked here
15:19 - in the resource roots and it's telling
15:21 - it that
15:22 - um just for this sort of demo purpose
15:24 - but more or less to understand
15:26 - how the folder structure actually works
15:28 - it's setting it
15:30 - to this home folder which is
15:34 - here web app now in doing that
15:37 - it's saying sap ui demo walkthrough
15:41 - which is put here so it comes to your
15:44 - web app section
15:45 - look at the index
15:48 - file now we're going to create an
15:50 - index.js file because
15:52 - we shouldn't really be running any
15:54 - javascript
15:56 - in the html file itself
16:00 - so that leads us on to
16:03 - the next point where we're going to go
16:06 - ahead
16:06 - and create in our web app folder and
16:09 - index.js file
16:11 - so let's go ahead and do that
16:16 - now in this index.js file
16:20 - we are going to um
16:23 - put all the application logic we're
16:25 - going to use
16:26 - so um again that's to avoid any
16:29 - uh executable javascript code in the
16:32 - html file
16:34 - so to do that we call sap dot
16:37 - ui dot def oops
16:40 - we call sap dot ui dot define
16:46 - and we open and we open
16:50 - that up like that
16:56 - now once we've got that
17:00 - we need to go ahead and create
17:03 - a function
17:07 - and in that function we're not passing
17:09 - anything yet
17:12 - we open up our function call and we call
17:15 - use strict which we'll explain
17:20 - in a in the sections further on but yeah
17:22 - don't worry about that for
17:23 - now
17:27 - then once we've got our samples you are
17:30 - defined section
17:31 - here we're going to call a function
17:34 - and inside that standard javascript
17:37 - function
17:38 - we're going to call our alert so
17:41 - oops alert
17:45 - and we're going to say ui5 is
17:48 - ready to go
17:52 - and we're going to put our braces there
17:57 - and we're going to go ahead and save so
18:01 - we've got our index.html file with our
18:04 - script ready to go
18:06 - we've got all we've got the um we're
18:09 - telling it
18:10 - where to find the index.js file
18:14 - which is here and this has been
18:17 - mapped like that using resource roots
18:21 - in our index.js file we're calling a
18:23 - function
18:24 - and in that function we're just simply
18:26 - going to call a
18:28 - an alert so this isn't even a ui5
18:30 - control it's just a standard javascript
18:33 - a vanilla javascript alert so now if we
18:36 - save that
18:37 - we should be able to refresh
18:42 - know what's gone wrong
18:50 - let's try control f5
18:55 - there we are so um if for whatever
18:57 - reason uh
18:58 - it doesn't load when you refresh it
19:00 - might need a hard refresh so
19:01 - control f5 i think does that are windows
19:03 - i don't know what
19:04 - um i think it's command f5 on a mac but
19:07 - here you go here is your
19:11 - you can refresh it again so the hello
19:13 - ui5
19:15 - which is here is still here but then
19:18 - in our index.js file we start to build
19:21 - a control or a vanilla javascript
19:26 - alert which is what we've done so if we
19:28 - refresh
19:30 - as it runs in the background and loads
19:34 - you get your reload
19:39 - so now what we're going to do is we're
19:42 - going to replace
19:43 - this text with an actual sap ui5
19:47 - specific control and we're going to do
19:50 - that over here
19:52 - where we'll actually add the control
19:55 - and pass it in and we're going to remove
19:58 - this
19:59 - and we're going to actually assign the
20:02 - body an id
20:04 - and add the control here
20:08 - to that particular id
20:11 - so what we're going to do
20:14 - first is remove this
20:20 - then we're going to come to our
20:22 - index.html file
20:23 - and we're going to remove that and in
20:27 - our body tag
20:28 - we're going to call a class
20:32 - called sap ui
20:36 - body which will just give us a bit of
20:38 - sap specific formatting
20:40 - um for this particular body section then
20:44 - it the important thing now is to add an
20:47 - id and we'll call this
20:51 - content
20:55 - and so now that we've given this an id
20:59 - we're going to go and save it
21:03 - and we're going to go and
21:07 - first off
21:10 - we need to pull in our
21:14 - our text control and to do that we need
21:18 - to use the sap namespace so it's
21:20 - sap slash m text
21:25 - and now that we have that here we need
21:28 - to pass it into our constructor here
21:31 - for this javascript object so
21:34 - we just add the text part so we just add
21:38 - the input
21:39 - and then once we're in here all we need
21:42 - to do
21:43 - is create a new object so new
21:48 - text
21:51 - and within that object or within the the
21:54 - text control rather
21:56 - we'll have a whole bunch of attributes
22:00 - and so in this case we're just going to
22:01 - call the text attribute
22:04 - and that text will be what is displayed
22:07 - and we'll call it
22:09 - hello ui5
22:14 - whoops now we've got this
22:19 - this text control here we need to call
22:22 - the place at
22:24 - method to place it at
22:30 - content
22:33 - and that content is going to be in the
22:36 - html file
22:38 - here and so we should see this
22:42 - still appear when we refresh so i'm
22:45 - going to go ahead and
22:46 - save that and just double check this
22:50 - that's all fine so if we press ctrl
22:54 - f5
22:58 - let it load
23:02 - ah
23:06 - so if this happens you just need to
23:09 - rerun
23:10 - your um your server if if something like
23:13 - this happens so
23:14 - again we just call ui5 serve
23:20 - and there we go we're running again so
23:22 - we can go ahead and
23:24 - refresh and there you go and you can see
23:27 - the formatting
23:28 - has changed slightly
23:31 - the font and things has changed a little
23:33 - bit so
23:35 - we now have that text here but we're
23:38 - pulling it through
23:40 - and sap specific text control from the
23:43 - sap
23:45 - m library and we've created that new
23:48 - control in our index.js file
23:50 - and we've placed it at content
23:53 - which is the id of this body tag
24:02 - so now what we're going to do is we are
24:05 - going to create
24:06 - a separate standalone view
24:09 - to place our text control in
24:12 - and sap supports
24:16 - quite a wide range of views and
24:19 - you can write them in xml html and
24:22 - javascript
24:24 - but they recommend xml because um
24:28 - it produces more readable code and
24:31 - it also force you it also forces you to
24:33 - separate your
24:35 - view declaration from the actual
24:38 - controller logic
24:41 - so what we're going to do is we're going
24:43 - to create a separate view folder
24:45 - a separate view file and then we're
24:47 - going to
24:48 - create the view here and we're going to
24:50 - call it
24:51 - in the index.js file
24:55 - so underneath web app we're going to
24:57 - create a new folder called
24:59 - view then we're going to physically
25:01 - create our xml view
25:02 - and we're just going to call it
25:05 - app.view.xml
25:08 - then we're going to open up our tag here
25:15 - and let's just close it while we're here
25:20 - um so now what we want to do is we need
25:23 - to bring in
25:24 - um the text control and also the
25:27 - m the sap mvc assets as well which is
25:32 - fairly standard and i won't go to too
25:34 - much detail on that
25:36 - but effectively what you would do is you
25:38 - would
25:39 - call xml
25:44 - and we want the sap.m
25:47 - library so we're going to pull that in
25:48 - because that's where our text
25:49 - controllers
25:50 - is from
25:53 - and then we're going to call xmlns again
25:59 - with an alias of mvc and aliases will
26:02 - come into play further on
26:04 - down the line and this is going to be
26:08 - sap.edu is a dot core
26:13 - dot mvc so
26:17 - now that we've got this library
26:19 - available to us
26:22 - we can go ahead and add our text control
26:25 - and declare it so
26:26 - all we have to do is call text
26:31 - and call the attribute that we call
26:34 - before text
26:36 - and that's going to equal hello
26:39 - ui5 again for example
26:44 - and we close that and
26:47 - that's our control declared as simple as
26:50 - that
26:51 - so we can go ahead and save that now
26:54 - we need to move on to the index.js file
26:58 - and we're going to ch it's going to
27:00 - change somewhat
27:02 - because we're not pulling the text
27:04 - control directly in here but rather the
27:06 - view
27:07 - we need to call the sap
27:11 - slash ui core
27:14 - slash mvc
27:18 - slash xml
27:21 - view and then we need to change
27:24 - um the importing
27:29 - parameter here to xml view
27:32 - to pull it into our constructor here
27:35 - now what we're going to do is get rid of
27:38 - this
27:39 - text control and we're going to call xml
27:42 - view dot create
27:47 - and open up our tags here and then
27:50 - we're going to assign it the view that
27:52 - we
27:53 - are dealing with so we call view name
27:58 - and that's going to be sap dot
28:02 - ui dot demo dot walkthrough
28:06 - dot view dot app
28:11 - sorry dot um
28:14 - dot app no almost
28:17 - and you remember before how when we
28:19 - reference this
28:21 - it references the web app folder from
28:23 - the index.html file here
28:26 - remember that so that's why that's how
28:30 - we can call or that's how the folder
28:31 - structure works
28:33 - um then we go into our
28:36 - view folder and then finally we call
28:39 - the app view which is um
28:43 - sitting over here
28:47 - and that's it so once we call that
28:51 - we then come back on our promise
28:54 - javascript promise
28:55 - and we say then once we have that
28:59 - we call a function and
29:02 - we're going to call our or pass in our
29:05 - view so we'll just call it
29:07 - overview oops
29:10 - and then open up our function and
29:14 - you guessed it overview dot place
29:18 - at content to place it at
29:21 - content and it
29:24 - is as easy as that
29:30 - we'll go ahead and save that and now it
29:33 - should do exactly the same thing
29:34 - except it should place our brand new
29:39 - separated or modularized
29:42 - text control inside our separate view
29:45 - over here so just make sure everything's
29:48 - saved
29:50 - and if we go here and press ctrl f5
29:57 - no something's gone wrong
29:59 - [Music]
30:00 - what's happened here ah so
30:03 - um because we're passing it in
30:07 - this needs to be in quotations my
30:09 - apologies
30:11 - that's very important so now if we go
30:15 - ahead and save
30:18 - and ctrl f5
30:23 - ah there's the issue
30:26 - it's place at it was missing an e there
30:29 - so if we go ahead and save that
30:33 - and refresh or let's try ctrl
30:37 - f5
30:41 - and there you go hello ui5 again
30:49 - now what we're going to do is we're
30:51 - going to
30:52 - create a button and we're going to
30:55 - create an event
30:57 - um that when that button is clicked
30:59 - we're going to have a pop-up
31:01 - and we're going to do that in a separate
31:04 - controller
31:06 - so what we're going to do is we're going
31:07 - to pull out just like we did with the
31:09 - view
31:10 - we're going to pull out the controller
31:12 - reference it
31:13 - in the view and create a new folder
31:16 - called controller and have our
31:18 - controller available there
31:20 - so there'll be one view and one
31:22 - controller
31:24 - so let's go ahead and jump into our
31:27 - view first
31:31 - and now that we're in here we need to
31:34 - create a
31:35 - reference to that controller so we're
31:38 - going to call it
31:40 - we're going to call the controller
31:44 - name and that's going to come from sap
31:48 - um ui demo
31:52 - walk through
31:57 - and then dot controller for our
31:59 - controller folder
32:01 - and app because we're going to call it
32:04 - app.controller
32:06 - and now that we've got that we're going
32:09 - to
32:10 - remove our text control and we're going
32:13 - to put in a
32:14 - button now we can just call this because
32:16 - this button is also available in the s
32:19 - in the sap.m library so we can call that
32:22 - straight away just like we did with text
32:25 - so we're going to button
32:29 - and we're going to give it the text
32:31 - property so the button will have text
32:33 - inside of it that says
32:35 - say hi for example
32:39 - then we want to call the press event
32:44 - by calling this press and we want to
32:47 - call the method so we're going to create
32:49 - all the
32:50 - function rather oh sorry the on show
32:53 - hello
32:53 - event and we're obviously going to put
32:55 - something
32:57 - in that event to happen i.e the pop-up
33:00 - so we're going to call this on show
33:05 - hello has the event
33:10 - and we can go ahead and save that
33:14 - let's format brilliant
33:17 - now what we're going to do is create the
33:20 - controller
33:21 - so under web app we've got our view
33:24 - and we're going to create a new folder
33:26 - called controller
33:29 - then under controller we are going to
33:31 - create an
33:32 - app dot controller
33:36 - dot js because we're going to write our
33:38 - controller in javascript
33:42 - now that we're in here um
33:46 - we can start with our sap
33:49 - dot ui dot define
33:54 - and once we've opened that up
33:58 - we need to bring in our
34:01 - mvc controller assets
34:04 - so we are going to call sap
34:08 - slash ui slash
34:11 - core slash mvc
34:14 - slash controller
34:19 - now that we have that we're going to
34:22 - call
34:23 - our constructor function and we're going
34:26 - to pass
34:26 - in the controller which is
34:30 - from here and this is the again sap
34:33 - naming convention
34:37 - and now that we have our function we're
34:40 - going to call
34:41 - use strict
34:44 - and as i said before the use strict
34:48 - is a literal expression which was
34:50 - introduced with the
34:51 - ecmascript 5 and
34:54 - a sort of line of items and it basically
34:58 - tells the browser to
35:00 - execute the code in a sort of strict
35:03 - mode
35:04 - and it effectively helps detect
35:07 - potential coding issues
35:09 - um at an early state
35:12 - at development time and um
35:16 - i mean for example it will make sure
35:17 - that variables are declared before
35:19 - they're used etc
35:21 - um and so it's just there to stop sort
35:24 - of basic javascript pitfalls
35:26 - um and so that's its function
35:30 - so now once we've got that we are going
35:33 - to
35:34 - return controller
35:40 - dot extend
35:46 - and once we've got that
35:50 - we are going to close it off
35:59 - and let's just move this out the way
36:03 - and that should be fine
36:07 - so everything we've got here
36:10 - uh is sort of the standard or basic
36:13 - uh controller layout um
36:16 - we're pulling in our controller assets
36:20 - here
36:21 - we're pulling it into our constructor
36:23 - function we're telling it to use
36:25 - strict um so we're keeping our
36:27 - javascript
36:28 - uh fairly strict in this case then we
36:31 - want to
36:32 - return the controller and
36:35 - um once we sort of we're going to return
36:39 - the controller and extend it
36:41 - by adding in the functionality in this
36:44 - next section which
36:45 - is where we're going to put our on show
36:48 - hello
36:49 - our on show hello event
36:53 - so um once we've got that
36:57 - we can go ahead and add our um
37:02 - sap dot eui dot
37:06 - demo dot walk through
37:09 - so we're going to call where this
37:12 - controller is actually located
37:14 - as we did with the view
37:18 - and that's our app controller so now
37:21 - that we've got that we're going to call
37:24 - or we're going to rather
37:27 - implement the logic for our event so
37:29 - we're going to go on
37:31 - show hello
37:35 - and that is that event is going to
37:38 - trigger a function
37:42 - where we are going to show
37:45 - a native or vanilla
37:51 - js alert
37:55 - and just like we did before alert
38:00 - hello there
38:06 - and we can save that so
38:09 - um in our view everything we've got
38:13 - is here we've now got a new button with
38:16 - the text that says hi
38:18 - then when you press that button call
38:21 - this event
38:22 - and this event is kept in the controller
38:25 - which is
38:26 - referenced here here's our controller
38:30 - we've pulled in with the sap naming
38:32 - convention the
38:33 - all the controller bits and pieces that
38:35 - we need passing into the constructor
38:38 - function
38:38 - our controller
38:42 - using a strict javascript and
38:46 - we are going to return
38:49 - our extended controller which is located
38:52 - here
38:53 - and in doing that we are going to just
38:57 - simply we've just simply got one
38:59 - function or one event which
39:02 - has a function that alerts as of another
39:05 - javascript alert that says hello there
39:07 - so we're going to go ahead and save that
39:12 - and save our view as well
39:15 - and if we press ctrl f5
39:19 - and now if we go ahead and
39:22 - press on the button
39:26 - there you go there is your alert
39:30 - and that's all be implemented within the
39:33 - new controller that we've created
39:41 - now we're going to move on to modules
39:44 - and
39:44 - modules are just basically resources in
39:47 - sap
39:48 - so we're going to add a module resource
39:52 - here
39:53 - which will allow us to call the message
39:56 - toast from it from the sap.m library and
40:00 - replace the alert
40:02 - with this message toast so
40:05 - we go ahead and put in a comma
40:08 - and add the new module sap
40:11 - slash m message
40:17 - toast
40:20 - then we need to take this pass it into
40:22 - the constructor
40:25 - like that and we can get rid of
40:29 - this alert and we can call
40:33 - message toast dot show
40:41 - hello there
40:51 - and we can go ahead and save that
40:58 - then we can go and press ctrl f5
41:02 - and if we click our button here's our
41:05 - message toast to the bottom
41:11 - right now what we're going to do is
41:14 - we're going to add
41:15 - an input field control to our app
41:18 - we're going to bind its value to the
41:21 - model
41:22 - and we're going to bind that same value
41:25 - to the description of the input field
41:27 - and we're going to use that
41:28 - using a json model so
41:33 - just like we worked with the modules
41:34 - before we need to add the
41:36 - json model to that same section so
41:39 - in the appcontroller.js
41:43 - we are going to go and add sap
41:47 - slash ui slash
41:50 - model slash json slash
41:53 - json model now that we have that we need
41:57 - to bring it into our constructor
41:58 - function
41:59 - so we just take that
42:03 - and add it in there now
42:06 - what we're going to do is we're going to
42:09 - call
42:09 - or we're going to access the on init
42:12 - event so this is the initialize event
42:15 - that happens right at the beginning
42:16 - which is where we're going to
42:18 - sit and create our local
42:22 - json model so we call the on
42:25 - init event in the controller
42:29 - we pull our function and we open it up
42:36 - oh whoops i put that in the wrong place
42:42 - just pop that down there
42:48 - and we can just pull this up a bit
42:50 - higher
42:51 - there we go don't forget between your
42:54 - functions to
42:55 - put a comma um now that we're in here
42:58 - we are going to
43:01 - set the data model
43:05 - on the view to do that we are going to
43:09 - first create a variable
43:12 - let's call it odata and
43:15 - we're going to set this in json format
43:18 - so we're going to put in a recipient
43:22 - for example and that recipient
43:26 - is going to have a property called name
43:30 - and we're going to just say
43:36 - let's just say ui5 for example
43:41 - now that we have that
43:46 - we've got this odata
43:49 - json object here now
43:53 - um we need to create the json model and
43:56 - then we need to assign it to
43:57 - our xml view so that the xml you can
44:00 - access it
44:01 - so the first thing is to create a model
44:04 - a variable for the model and we'll call
44:06 - it a model again we're using hungarian
44:09 - notation here
44:11 - and we are going to sit with the new
44:14 - json model that we brought in
44:16 - so new json
44:20 - model and
44:23 - placing that odata object we created up
44:26 - here which is in json format
44:29 - then we call this
44:32 - dot get view to get the view
44:35 - itself and then set model
44:41 - model
44:45 - and that's it let's
44:48 - go ahead and format lovely
44:53 - now we're going to go ahead and in our
44:56 - view
44:56 - we're going to create the input control
45:00 - so underneath our button the input also
45:03 - comes
45:04 - from the sap.m library so we can just go
45:07 - ahead and add that
45:13 - and the properties are going to be the
45:15 - input value so the value you'll see
45:17 - in the input itself and now
45:20 - is where it gets interesting we're going
45:22 - to pull it
45:24 - directly from the odata model
45:28 - so we reference the so now we have the
45:30 - odata model ready and attached to our
45:33 - view
45:34 - we call the recipient
45:37 - and inside the recipient was the name
45:40 - property so
45:41 - here's our recipient slash name property
45:46 - and that's it really um
45:50 - so now we've got the value there
45:53 - um we are going to add the description
45:59 - description that's brilliant
46:03 - equals hello
46:09 - and note we're using we're combining the
46:11 - text and also
46:12 - a call from the json model itself
46:16 - and again slash recipient
46:21 - slash name
46:25 - and we also want the value to update in
46:29 - real time
46:30 - and so we call the value
46:33 - live update property
46:37 - set that to true
46:40 - and finally let's give it uh sorry um
46:44 - i don't need to add the commas here
46:48 - and finally let's give it a
46:51 - width of
46:54 - 60 for example
46:59 - lovely so we've got the value um
47:03 - that's going to be in the value section
47:05 - of the input control
47:07 - it's going to say in the description
47:09 - hello recipient name
47:11 - uh the value live update is true so as
47:13 - we update it you'll see in the front end
47:15 - it'll update automatically which will
47:17 - make sense now
47:18 - and we just set the width to 60
47:21 - so we can go ahead and save that
47:25 - and it's important to note that
47:28 - for the live update to work we need to
47:31 - make sure we have set which we already
47:33 - have this compatibility version
47:36 - to edge you can also sit another
47:38 - property called
47:39 - um sep ui binding syntax to complex
47:44 - uh you can do either all but this does
47:47 - um a few other things
47:48 - including setting that complex uh
47:51 - binding as well so
47:52 - we don't have to worry about that now if
47:55 - we go ahead and save
47:56 - our server is still running so if we go
47:59 - to
48:01 - browser and press ctrl f5
48:09 - ah i forgot to close off
48:12 - the input control it's quite important
48:18 - so if we go ahead and ctrl f5 again
48:23 - so now it says hello there still
48:27 - now if we adjust this
48:32 - it should say hello ui5 now it's not
48:35 - doing that so let's have a look at our
48:37 - xml
48:38 - and see where we've gone wrong
48:42 - so hmm
48:53 - ah there was a spelling mistake so
48:56 - um that's very important check your
48:59 - spelling
49:00 - so now if we go ahead and save control
49:03 - f5
49:05 - so there you go you've got hello ui5
49:07 - which is in the description
49:09 - and you've got ui5 in the value
49:12 - over here now if i had to type something
49:15 - like
49:16 - john it changes in real time
49:20 - and there you go
49:25 - now what we're going to do is we're
49:28 - going to add
49:29 - the translatable texts and
49:33 - what that means is we're going to move
49:35 - all of the or
49:36 - some of the texts depending um to
49:39 - a to an i18 file so a separate resource
49:44 - file that we're going to
49:46 - point to in a minute and this way
49:50 - you can keep all of your various texts
49:52 - that you would reuse throughout your
49:54 - application
49:55 - and you can have them in one place where
49:57 - you can then translate them into
49:58 - different languages
50:00 - and yeah that is called
50:02 - internationalization and it's done with
50:04 - an i18n
50:05 - file so sap have got a special resource
50:09 - model that they use or that they
50:11 - let you use and to achieve that and
50:15 - let's go ahead and add it so the first
50:18 - thing we need to do
50:20 - is we need to go into our files
50:23 - and under the web app file or with a
50:26 - folder rather
50:27 - we need to add a new folder called i18n
50:32 - and under there we're going to add our
50:35 - i18n
50:37 - dot properties file
50:42 - and there we go now that we have that
50:45 - um we're going to put in our two texts
50:48 - so
50:50 - we'll call the first one show hello
50:54 - button text so that'll be for our button
50:58 - and that'll be save hello
51:01 - we don't have to worry about um
51:05 - apostrophes and and quotes and things
51:08 - like that here
51:09 - and then we're going to call another
51:12 - item hello message
51:15 - and that's just going to be hello whoops
51:19 - and that is how we add
51:23 - a parameter which we'll use in a second
51:27 - so our i18 properties file is set
51:30 - that's all fine now
51:33 - let's go ahead and pop back into our
51:36 - controller
51:37 - and let's get rid of that for now
51:41 - now we need to bring in our module so
51:44 - just like we did before asap
51:48 - slash ui slash model
51:52 - slash resource because it's a resource
51:55 - model
51:56 - and r-e-s-o-u-r-c-e
51:59 - model there you go and then we need to
52:02 - bring it into our constructor function
52:04 - just after json model
52:07 - and now we can work with that in here so
52:10 - the first thing we need to do is
52:12 - we need to sit and all we need to create
52:14 - and set the model
52:16 - so the first thing we're going to do is
52:19 - underneath our model here
52:23 - we'll go ahead and create the next one
52:24 - so we're doing this all
52:26 - again in the on init event which is the
52:29 - initialization event that happens at the
52:32 - beginning
52:33 - when the app loads so let's put in our
52:36 - comment
52:36 - set 18 in model
52:40 - on view then let's create our variable
52:45 - i 18n model
52:47 - [Music]
52:49 - that's camelcase and that is going to
52:52 - equal
52:53 - new resource model
52:59 - and let's open that up and our
53:02 - properties are going to be
53:04 - bundle name
53:08 - and that's going to be
53:13 - dot ui dot demo
53:16 - dot walk through just like we did before
53:20 - dot i 18 n for the i 18 n
53:24 - folder and the i 18 n
53:27 - file itself
53:32 - then we're going to
53:35 - move on to the supported locales and
53:40 - that is going to be left as an empty
53:43 - object
53:45 - and let's just do that
53:48 - oops
53:53 - square brackets and that's going to be
53:56 - left empty for now
53:57 - we don't really have to worry about that
54:00 - and the fullback locale will also be
54:04 - um kept blank um but i
54:07 - think these are um you need to put these
54:11 - in there they're ex they're uh you just
54:14 - you you have to put them in i can't
54:15 - remember the word but
54:16 - yeah they need to be there um
54:19 - so that's all fine now that we have um
54:24 - our i18n model we need to set it to the
54:27 - view
54:27 - so this dot get view
54:32 - dot set model
54:36 - and it's the i18n model and we're going
54:39 - to give it an alias
54:41 - and we're just going to call it i18n so
54:44 - the second part here is just simply
54:46 - giving it an alias
54:47 - and then that's how we'll refer to it um
54:51 - further down so um we can go ahead and
54:54 - save that
54:55 - now on our on show hello
54:59 - event we are going to
55:02 - read the message and we're going to read
55:06 - the message from our i18n model
55:08 - and we're going to show it so let's
55:11 - put that down and we're just going to
55:15 - put in our comment
55:16 - read message
55:19 - um
55:22 - from i18n model
55:27 - so um let's go ahead and create
55:31 - our bundle resource bundle so our first
55:34 - variable
55:34 - is object bundle
55:39 - and that's going to be this dot get view
55:43 - dot get
55:48 - model and again calling the alias
55:52 - i 18n
55:58 - and get resource bundle
56:02 - get resource bundle
56:08 - which is from our bundle name here which
56:10 - we've specified
56:13 - then we're going to create
56:18 - another variable called s recipient
56:24 - and that's going to be this git view
56:29 - dot get model
56:34 - dot get property
56:40 - and we're going to get our recipient
56:43 - name so recipient
56:48 - name and
56:52 - once we've got that um
56:55 - we can so obviously this recipient name
56:57 - is coming from our
56:59 - original json model up here
57:04 - slash recipient slash name now
57:08 - we're going to create our message so var
57:12 - s m is chip
57:16 - equals o bundle
57:20 - dot get text
57:24 - because we want to get the text from our
57:26 - bundle
57:29 - and we're going to ask it for the hello
57:32 - whoops hello
57:35 - message and i'll show you that now hello
57:37 - message
57:38 - and that comes from
57:40 - [Music]
57:42 - and that comes from the
57:46 - hello message here that's what we're
57:48 - referring to
57:52 - and then we're going to add in
57:57 - the s recipient which we have
58:01 - created here as a variable
58:04 - so we can finish that off
58:07 - and now we're just going to show the
58:10 - message
58:11 - and just like before message toast.show
58:15 - and we call our variable s message
58:23 - and we save and so if we go ahead
58:27 - ctrl f5
58:31 - and then if we click on say hi
58:35 - hello ui5
58:38 - hello coming from here
58:41 - and then if we had to change that to
58:44 - something like hi
58:48 - refresh again it would say
58:51 - hi there you go
58:55 - so um let's just put that back to hello
58:59 - um now what we're going to do is we're
59:02 - going to
59:04 - change our button text to reference
59:07 - the show hello button text and to say
59:10 - hello where it says say hi at the moment
59:13 - so we need to go back to our view
59:16 - and in our button it says say hi
59:20 - what we do is we reference it like
59:24 - this so now we're in the xml view and we
59:26 - reference it as an
59:27 - i 18n
59:31 - show let's rather copy it so we don't
59:33 - make any mistakes
59:35 - show hello button text
59:42 - and so this should now pull from the
59:44 - resource bundle which the
59:45 - view has access to and if we save
59:50 - refresh
59:53 - ah sorry it's not a slash
59:56 - it's a greater than sign my apologies so
59:59 - the greater than sign
60:00 - sits here and if we go ahead and refresh
60:04 - it changes to say hello and there you
60:06 - are
60:11 - so now what we're going to move on to is
60:13 - the component configuration
60:16 - and what that means is we're going to
60:18 - take all of our
60:19 - ui assets and we're going to encapsulate
60:22 - them in
60:24 - a component file that is independent
60:27 - from our index.js file
60:30 - and so we make it independent and
60:32 - reusable
60:34 - and so from now onwards we're going to
60:36 - be accessing all of our resources
60:38 - relative to this component file
60:42 - so we're going to take pretty much
60:46 - all of this data that's on init
60:49 - in the initialize section and we're
60:51 - going to put it to be loaded in the
60:53 - component file
60:55 - so under web app new file
61:01 - component.js
61:04 - and now that we are in the component
61:07 - we are going to open up our sap dot
61:11 - ur oopsie
61:14 - we're going to open up our sap dot ui
61:16 - dot
61:18 - define
61:23 - and now that we've got that we need to
61:25 - pull in our ui component module
61:27 - so that comes from the sap namespace
61:30 - slash
61:31 - ui core slash
61:34 - ui component
61:39 - then um we
61:42 - need to pull in our json model
61:45 - so just like we did before
61:48 - it's sap slash
61:53 - ui slash model or we can actually just
61:57 - copy paste it i think um
62:02 - just to be on the safe side then we also
62:06 - need to add our resource model for our
62:07 - i18n
62:09 - internationalization file we can just go
62:12 - ahead
62:13 - and pull this as well
62:16 - now that we have that we need to open up
62:19 - our constructor function
62:24 - and we need to pull all of these values
62:26 - in
62:28 - so the first one is our ui component
62:32 - oops
62:36 - then we need our json model
62:40 - and finally our resource model
62:47 - then we can go ahead and open up our
62:49 - function
62:52 - making sure to use strict
62:55 - to run that strict javascript check
62:58 - and then once we have that
63:02 - we need to call return
63:05 - ui component
63:09 - and we need to extend it just like we've
63:11 - done in the controller
63:12 - extend and we're going to extend our
63:16 - component file
63:17 - so sap dot ui dot
63:20 - walkthrough dot component
63:23 - because it's in the the component file
63:26 - is not in any folder it's just in the
63:27 - web app folder so we can
63:29 - call it directly from there
63:34 - then
63:39 - we need to add a few parameters
63:42 - so the first one is our metadata
63:49 - and that metadata object is going to
63:52 - hold
63:54 - our root view so we're going to tell it
63:56 - which view to use
63:57 - as our root view
64:00 - root view
64:06 - and our per our attributes
64:09 - our view name
64:13 - but we need to put these in quotes view
64:16 - name
64:19 - and that's going to be the sap dot ui
64:22 - whoops sap dot ui dot
64:26 - demo dot walk through
64:29 - dot view dot app
64:33 - because it's in our view folder and it's
64:36 - the app.view.xml
64:40 - and the rest of the variables will be
64:42 - type
64:46 - the risk the attributes are will be type
64:47 - and it's an xml
64:49 - view
64:52 - we wanted to run asynchronously so ace
64:55 - a s y n c
65:00 - true oops we don't need quotes for
65:02 - booleans
65:03 - true and we're going to give it an id
65:07 - of app so id
65:12 - app now that we have that
65:16 - we can call our let's just save that
65:19 - first
65:20 - so now that we have that metadata
65:24 - in we can go ahead and call our
65:26 - initialization
65:28 - event reference that
65:31 - which is init and we open up our
65:35 - function
65:40 - and in this function we're going to
65:44 - first of all call the
65:50 - function of the parent
65:54 - parent the parent ui component from
65:58 - sap and that is ui
66:01 - component just like we pulled from
66:04 - here ui component
66:13 - dot prototype
66:17 - dot init dot climb
66:21 - and we give it this
66:24 - arguments
66:30 - then we start setting our data models so
66:34 - set data models
66:37 - now i'm going to be lazy and just copy
66:40 - this directly across
66:41 - so our first one
66:45 - is that
66:49 - and then once we have that um we need to
66:53 - set that onto the view so i can pull
66:56 - this
66:56 - as well
67:02 - now once i've got that i can set the i18
67:05 - model
67:06 - so set
67:09 - the set i 18n
67:12 - model and again i'm going to go and copy
67:15 - and paste from our controller just to
67:17 - make sure i've done it properly
67:23 - and i'm going to go ahead and save and
67:26 - so far our component is looking good so
67:29 - we can double check everything is fine
67:31 - and what's the problem at the top here
67:34 - [Music]
67:40 - um
67:44 - uh we just need to
67:47 - get rid of that perfect
67:53 - now let's go and tidy up our app
67:55 - controller
67:57 - so all we need now is to leave this
68:00 - behind
68:00 - because this controller is going to
68:02 - handle the events that happen
68:03 - specifically with the view
68:06 - so we can take away
68:09 - all of this including the
68:12 - um on init event
68:19 - and let's just format that
68:23 - perfect so now all that's left is our on
68:27 - show hello um event call
68:30 - and our function that runs underneath
68:31 - there
68:33 - and now once we've saved that we need to
68:36 - go
68:36 - back into our index.js file
68:44 - and what we're going to do here is we
68:47 - need to create the component container
68:51 - instead of the view um in our index that
68:54 - in the obviously the index.js file
68:57 - and that's going to instantiate the view
68:59 - for us um according to the component
69:02 - configuration so the configuration we've
69:04 - got in our component
69:06 - so let's go ahead and get rid of
69:10 - that let's go ahead
69:13 - and get rid of everything under here
69:19 - perfect so first things first we need to
69:22 - bring in our module
69:23 - and that's going to come from snap ui
69:27 - core component
69:33 - container component container
69:36 - yep then we need to take
69:40 - the component container and pass it into
69:44 - our function and once we've done that
69:49 - we can create a new component container
69:54 - open that up and our attributes will be
69:57 - name and we're going to call it
70:04 - zap.ui.demo.walkthrough
70:08 - and we're going to add our settings
70:12 - and that's going to be
70:16 - we're just going to give it an id in
70:18 - this case
70:20 - so id equals walkthrough which is fine
70:26 - and then we need to tell it we want it
70:28 - to run asynchronously
70:29 - so a s y and c is
70:32 - true as the boolean
70:36 - and finally according to our index.html
70:40 - we need to place
70:43 - at content
70:52 - all right that's a method call so we
70:54 - need to put the dot there
70:56 - place that and so
70:59 - we've done everything we need to do in
71:00 - our index.js file contour
71:03 - calling our new component container that
71:05 - component container is going to then sit
71:07 - um in it's going to be put in the
71:10 - index.html
71:11 - in the body section with id
71:14 - content we've moved all of that logic
71:19 - from our controller into the centralized
71:23 - component.js file where we do things
71:25 - like
71:27 - in the inner function get all of our
71:31 - models and bits and pieces and assign it
71:33 - to the views
71:34 - including our i18 model as well
71:38 - and
71:41 - our controller is now far more tidy and
71:44 - far
71:45 - what it's now going to do is
71:46 - specifically work with the view
71:48 - and anything that happens in the view
71:50 - rather than what's happening in the app
71:53 - sort of to begin with so it's it's
71:55 - separating the doing the separation of
71:57 - concerns here
71:58 - and only handling what happens in the
72:01 - particular view
72:02 - that uses this controller so let's make
72:05 - sure everything is
72:06 - saved and if we ctrl f5 to refresh
72:14 - uh it looks like i have incorrectly
72:16 - entered the view name it's sap.ui.demo
72:20 - dot walk through my apologies uh
72:24 - now if we press ctrl f5 again
72:27 - ah so the issue is
72:31 - me trying to copy paste things across um
72:34 - which
72:34 - can sometimes lead to issues that
72:37 - specific issue
72:38 - is we shouldn't be getting any view here
72:42 - we should just be setting the model
72:45 - directly
72:46 - do apologize for that copy paste when
72:49 - you can
72:50 - um but try and check your work and try
72:52 - and retype it because it
72:54 - stops you making silly mistakes like
72:56 - this
72:57 - so now if we control f5
73:00 - we are working again there we are
73:08 - right now um coming in from the
73:11 - prerequisites
73:12 - and the step one um we're going to talk
73:16 - about the
73:17 - descriptor or rather the manifest.json
73:21 - file
73:22 - so all application specific
73:24 - configuration settings will
73:26 - now further be put in a separate
73:28 - descriptive file
73:29 - called the manifest.json file and what
73:32 - this does is it clearly separates the
73:33 - application coding from the
73:35 - configuration settings
73:37 - and it makes things even more flexible
73:40 - so for example with sap
73:42 - fiori all applications within
73:45 - fiori are realized as components and
73:48 - they come with a descriptor file
73:50 - and this is there so that they can be
73:52 - hosted within the fiori launch pad
73:55 - itself
73:56 - so the fury launch pad acts as a sort of
73:59 - container
74:00 - and instantiates the app without having
74:03 - a
74:03 - local html file for all the
74:05 - bootstrapping stuff
74:07 - and so instead the descriptor file is
74:10 - passed
74:11 - and the component is loaded into the
74:13 - current html page
74:15 - whatever that may be and so this allows
74:18 - several apps to be displayed in the same
74:19 - context
74:21 - and each app can define local settings
74:24 - such as language properties supported
74:26 - devices
74:27 - and pretty much anything else you can
74:28 - think of
74:31 - and we can also use the descriptive file
74:33 - to load additional resources
74:35 - and instantiate models like our i18
74:38 - resource bundle
74:40 - or any model for that matter so
74:44 - we don't have to create one because
74:46 - we've already created it in the
74:47 - beginning
74:49 - and what we're going to do now is just
74:51 - check a few settings
74:53 - so the first one is in the sap.app
74:58 - section
75:00 - the version we've got is 1.1.0 which is
75:04 - fine for now the id
75:08 - is going to be sap.ui.demo
75:13 - dot walkthrough
75:16 - and it's an application um the i18n
75:20 - now has a specific attribute and so
75:23 - that comes from our i 18n folder
75:27 - and it's the i18n dot properties
75:32 - file
75:36 - then we we're just going to give this
75:38 - application version whoops
75:44 - 1.0.20
75:45 - just fine and now
75:49 - the title of the application
75:53 - is going to come from
75:59 - the i18n file which we're going to edit
76:01 - shortly
76:02 - but this is where this is what it's
76:05 - going to be called
76:06 - app title and we can also put a
76:10 - description in
76:13 - description and
76:16 - let's just put our comment for now
76:20 - whoops and inside there we're going to
76:23 - call it app
76:25 - description
76:26 - [Music]
76:28 - and so we've got our version and
76:30 - everything that's fine
76:33 - now we need to go to the sap dot ui
76:36 - section
76:38 - and um you can set things like icons
76:41 - favicons
76:43 - and all sorts of other bits and pieces
76:47 - the important thing for us is device
76:49 - types so
76:51 - if you decide you have a very complex
76:52 - table app you might go
76:54 - i only want it on desktop and i want to
76:56 - say tablet and phone to false
76:59 - but in this case our app is going to be
77:00 - pretty straightforward throughout the
77:02 - whole course so we're going to set these
77:03 - all as true
77:05 - then um we have supported themes which
77:08 - is fine
77:10 - so there are quite a few um attributes
77:12 - here which we're just going to skim past
77:14 - but they obviously do
77:15 - a whole bunch of stuff but it's just out
77:16 - of the scope for this particular course
77:19 - the next section is sap ui5
77:23 - and this is where we are going to
77:27 - determine things like our models and our
77:30 - root view
77:30 - etc etc so we're going to start off
77:34 - with our root view
77:37 - and this is going to be
77:41 - an object and in that object we have the
77:46 - view oh sorry this is in json format so
77:50 - it's
77:50 - everything has to be in quotes so it's
77:52 - view name
77:55 - and it's
78:05 - sap.eui.demo.walkthrough.view.app
78:10 - and um we're gonna do the
78:13 - type of view which is you guessed it xml
78:19 - then we're going to set it to run
78:20 - asynchronously
78:23 - async true
78:27 - and our id
78:30 - is going to be set as app
78:34 - now you'll remember all of these
78:35 - settings because
78:37 - they come from one of our previous files
78:41 - so let's just run through everything and
78:43 - we'll go and tidy up
78:44 - our component and controller in index.js
78:47 - files shortly
78:50 - so we've got our root view then let's go
78:53 - and find
78:54 - dependencies so dependencies
78:57 - our minimum version for ui5
79:01 - we're going to set it as 1.6 but again
79:04 - depending on whichever what project
79:06 - you're working on this
79:08 - can be set to pretty much any version
79:11 - then the libraries we want is
79:16 - in this case just sap dot m
79:22 - and we're not going to worry about
79:23 - minimum version for now so we can just
79:26 - close that up
79:30 - and we don't have to worry about a
79:32 - second library at this point yet so it's
79:34 - just one library that we've got
79:36 - and now finally we can deal with our
79:39 - models
79:40 - first one being i18n
79:44 - and the type is a resource model
79:48 - and now we are going to put in our
79:50 - settings
79:54 - and our settings are going to be
79:58 - in this object
80:02 - bundle name
80:06 - and our bundle name is asap dot
80:10 - eui dot
80:13 - model dot
80:16 - resource model
80:22 - whoops and then we need our supported
80:26 - locales
80:27 - and our fallback locales so
80:32 - supported locales
80:36 - and again this is empty but we need to
80:39 - put it in
80:40 - anyway uh whoops
80:45 - and fallback
80:50 - fullback locale
80:54 - is going to be that for now
81:03 - so put a comma there and we go ahead and
81:06 - save
81:07 - now we've got all these settings put in
81:10 - here
81:11 - we need to go ahead and change a few
81:14 - things in our index.html file
81:22 - and now that we're in here we need to
81:26 - first change our on
81:27 - init call and so this is going to be
81:32 - we're going to change to rather module
81:35 - sap
81:35 - dot ui dot core
81:40 - slash call rather slash
81:43 - component
81:46 - support so now we're giving it support
81:48 - for the component running it through
81:50 - like this
81:52 - then in our body section we need to
81:55 - create a new div
82:02 - and we need to assign that div a set of
82:04 - properties
82:05 - to allow it to be used by the ui5
82:08 - runtime
82:09 - so we're going to add in the first
82:13 - attribute we're going to
82:14 - add in is data
82:19 - sap dot ui
82:22 - dash ui dash component
82:28 - and we're going to call data
82:32 - name and that is going to be our sep
82:36 - dot ui dot demo dot
82:40 - walkthrough
82:43 - and our data id
82:46 - is going to be container
82:54 - and we're going to add in our final
82:56 - attribute
82:57 - data settings
83:01 - and that's going to equal
83:05 - oops what the attribute we're going to
83:09 - use is
83:10 - id and
83:14 - we're going to call it walks through
83:22 - and so we can go ahead and save that
83:27 - now where we referenced
83:31 - our app title and app description and
83:34 - because we're now using i18
83:36 - properties from the manifest we need to
83:38 - go
83:39 - back here and add them so
83:43 - let's add so this for a comment you use
83:47 - the
83:47 - hash and we'll call this is for our
83:51 - hello panel
83:54 - hello let's put capital panel
84:00 - and here is our app descriptor
84:03 - stuff and so let's
84:07 - copy that directly across
84:10 - title app description
84:17 - and app title is going to just be
84:20 - hello ui5 app
84:24 - and whoops app description
84:28 - we'll just say a simple
84:32 - test app to learn ui5
84:36 - and you can do whatever you want
84:40 - right if we go ahead and save that
84:43 - now we need to go to our component file
84:47 - and remember all of this stuff within
84:50 - the metadata
84:52 - now we are going to get rid of it
84:57 - and all we're going to do is reference
85:00 - the manifest
85:06 - and so all of that data is now going to
85:08 - sit and be referenced from the manifest
85:10 - itself
85:13 - and if we go ahead and save there should
85:16 - be no change to our app
85:22 - oh and before i forget we need to make
85:26 - sure we go ahead and delete our index.js
85:29 - file
85:30 - because we no longer need it
85:33 - and we also need to make sure that we
85:35 - remove
85:36 - our i18 model call
85:39 - here because that's
85:43 - already now set in the manifest
85:46 - so if we go and press ctrl f5 again
85:51 - oh show hello button text so
85:58 - uh let's see what's gone wrong
86:03 - so let's go and have a look at the
86:05 - manifest
86:06 - and see what's happened
86:10 - so models 18 in type resource model
86:13 - settings bundle
86:14 - ah that's the problem
86:19 - my apologies i probably copy pasted this
86:21 - incorrectly
86:22 - but in our bundle name we need to
86:25 - reference our actual
86:27 - i18n file so that's sap.ui.demo
86:32 - dot walk through
86:36 - dot i 18 and dot i
86:39 - 18
86:42 - so now if we go ahead and refresh there
86:45 - we are
86:46 - we are back to normal
86:53 - right so now what we're going to do is
86:56 - we're going to add
86:57 - um a page and panel
87:00 - to our view xml file and we're going to
87:03 - put the input
87:04 - inside of it and we're also going to put
87:07 - a few more controls around them so that
87:09 - we aggregated properly and
87:11 - everything looks nice so what we're
87:13 - going to do is we're going to start off
87:15 - with
87:15 - an app control then inside that we're
87:18 - going to have the pages control
87:20 - and you can have we're only going to
87:22 - have one but then you have your
87:23 - page control inside underneath the page
87:26 - control you have your content
87:28 - and inside your content you have your
87:29 - panel with a few properties
87:31 - and then inside of that you have your
87:34 - input
87:35 - so let's start off at the top
87:38 - and we're going to
87:41 - just hit display block
87:44 - to true
87:49 - then once we've done that
87:52 - we're going to add app
87:57 - um and let's just
88:00 - close that off
88:04 - oops
88:10 - then once we've got that we can add our
88:13 - pages
88:17 - and close that off
88:20 - inside here we are going to have page
88:25 - and we're going to give that an
88:27 - attribute of
88:28 - title
88:32 - equals and we're going to add this to
88:35 - our i18n
88:36 - internationalization file and so we
88:40 - reference that with i18n
88:43 - home page
88:46 - title for example that's perfect so we
88:50 - close that off
88:55 - and we close off our page perfect
88:58 - now under page we need to have content
89:07 - and now within the content of the page
89:11 - we're going to open up our panel
89:19 - and it's important to note the
89:23 - spelling here as well these two need to
89:26 - be in
89:26 - capital so just check um
89:29 - your controls as you go along and read
89:31 - the documentation
89:32 - so now within this panel we're going to
89:35 - have
89:36 - header text equals
89:41 - again from the i18n file
89:45 - i 18n
89:49 - hello panel
89:53 - title and
89:56 - once we've got that
90:02 - we now just need to close off our panel
90:07 - oops capital p there panel
90:11 - and then we need to add the content
90:13 - again
90:14 - underneath our panel and again if you
90:17 - read the documentation you'll know
90:18 - exactly
90:19 - what needs to go underneath for example
90:21 - a panel will need to have content etc
90:23 - etc
90:25 - so we add content
90:28 - close it off
90:32 - and we can take our complete input
90:38 - and we can add it straight in there
90:42 - let's do a bit of formatting
90:47 - and there we are so if we go ahead and
90:50 - save
90:52 - and control f5 to refresh
90:58 - there you are so you've got your um
91:03 - oh i see the button is sitting at the
91:07 - top here because it's not
91:08 - in the panel here's our button so
91:11 - let's take our button
91:15 - add it here just before the input
91:21 - watch it's fine then let's refresh again
91:27 - and there you are there's your help
91:30 - hello panel title
91:31 - oh we still need to add um our i18n
91:36 - bits and pieces here so let's go into
91:38 - our i18n properties
91:40 - and if we scroll down
91:46 - we'll add our
91:51 - let's take this one first homepage title
91:56 - and we'll call that uh ui5
92:00 - walkthrough and
92:03 - let's go ahead and grab the hello panel
92:05 - title
92:07 - pop that in equals and we'll just say
92:11 - hello ui5
92:14 - save again refresh
92:20 - oops need to watch my spelling save
92:23 - again
92:24 - control f5 and there you go
92:33 - so now what we're going to do is we are
92:35 - going to
92:36 - deal with the shell control and bring it
92:39 - in as a container
92:42 - so we're going to add a new root element
92:45 - for our um xml control here
92:50 - and what that shell is going to do is
92:52 - it's going to take care of the
92:54 - visual adaption of the application um
92:57 - and it's going to do that in relation to
93:00 - the screen
93:01 - size and you'll start to see a sort of
93:04 - litter box shape so you'll see the
93:06 - borders on either side
93:09 - and especially well this is obviously on
93:11 - desktop screens
93:13 - but for the most part you can add a few
93:15 - more um
93:17 - sort of background details here if you
93:18 - want and this is a sort of introduction
93:21 - into how
93:22 - the fiori shell is involved in the
93:24 - application
93:25 - but for now we're just going to go ahead
93:28 - and add the
93:30 - shell the shell here
93:36 - and we're going to go ahead and
93:40 - close that off
93:43 - and let's format the document
93:47 - so now that our stuff is sitting within
93:51 - the shell control if we press ctrl
93:55 - f5
93:59 - you can't really see it on the screen
94:01 - but if i expand it a little bit
94:06 - there you go now you can see the app
94:09 - itself
94:10 - which would have just been sitting in a
94:11 - single page an app
94:13 - you now have this background sitting
94:16 - here which is kind of where the fiori
94:17 - would sit
94:19 - the fiori shell would sit around
94:26 - so now we're going to deal with
94:29 - margins and paddings and what you'll see
94:33 - here
94:33 - is the panel is sort of glued or stuck
94:37 - to
94:38 - the side here which doesn't necessarily
94:39 - look all that nice
94:41 - so what we're going to do is we're going
94:42 - to use the sap standard
94:45 - classes and we're going to use them
94:49 - to sort of dynamically
94:52 - and sort of you know in a a way that
94:55 - works well with the sap controls
94:57 - themselves
94:58 - and we're going to apply those sort of
95:01 - stylings on top of it
95:03 - so if i switch back to the code
95:07 - we are going to first go and find our
95:12 - panel
95:14 - and we're going to add the class
95:16 - attribute
95:17 - just like we would um anywhere else
95:22 - and we're going to call the sap specific
95:25 - sap
95:26 - ui responsive
95:29 - whoops responsive
95:33 - margin or the sp specific margins
95:37 - and we want the width
95:40 - to be auto
95:45 - perfect now we're going to add some
95:47 - styling to the button itself
95:49 - so if i just get this in line here
95:55 - so now we are going to assign a
95:58 - class uh to the button that again
96:02 - calls the sap ui small margin
96:05 - so again this is just a different type
96:08 - of margin that sp has available so sap
96:12 - ui small
96:16 - margin end and then
96:20 - we are going to go down to
96:24 - under the input
96:28 - if i just get everything
96:31 - down here
96:36 - just so you can see everything a bit
96:40 - more
96:40 - clearly underneath this
96:44 - input we are going to add a text control
96:50 - and in this text control
96:54 - um oh sorry that should be capital t
96:57 - e x t and
97:01 - i'm going to call the text attribute
97:04 - equals and we're just going to say hello
97:09 - uh again um calling from our model just
97:13 - like we did before
97:15 - recipient
97:18 - slash name and we just need to add a
97:22 - slash in front of recipient
97:24 - um so again we're pulling that
97:28 - from our um our model
97:31 - um then we're going to assign this
97:35 - a class as well and we're going to use
97:39 - the
97:39 - sap small margin class
97:43 - so sap u i
97:46 - small margin
97:51 - and we'll just close that off
97:54 - so now if we go ahead and save
97:59 - and refresh
98:05 - hmm what's the issue here let's go back
98:08 - and
98:08 - check the code panel
98:12 - content button on show hello ah here we
98:16 - go
98:17 - apologies
98:20 - that should be at the end they're
98:22 - closing off uh
98:23 - that button um control
98:26 - so let's go back and control f5
98:31 - there you go so now you can see the text
98:34 - is placed here
98:35 - there's some nice padding there and this
98:38 - button is just
98:39 - off here instead of attached directly to
98:42 - it making the
98:43 - use interface user interface much
98:47 - nicer to look at
98:53 - so now we're going to move on to custom
98:56 - css
98:58 - and theme colors but
99:01 - this particular section is something
99:04 - that
99:04 - must be treated with a fair amount of
99:06 - caution i would recommend using the
99:09 - standard sap theming and css that you
99:13 - have available any sort of custom css
99:16 - i think is probably more important if
99:19 - you
99:19 - need something very very specific on
99:21 - your app that needs to be achieved
99:23 - through css
99:25 - sap will not
99:29 - offer to me have it maintained as it
99:31 - runs through so as new versions come
99:32 - through you will need to recheck your
99:34 - css
99:35 - to see that it actually works so
99:38 - we're going to run through this section
99:40 - just to show you how it actually works
99:43 - but it's very important to remember that
99:47 - this needs to be taken with a pinch of
99:48 - salt and
99:50 - try and keep to the sap standard as much
99:53 - as possible from a
99:54 - layout and css point of view so
99:58 - the first thing we're going to do is we
100:00 - need to go to the manifest.json file
100:04 - and we need to look for our sap ui5
100:07 - section
100:08 - and we need to effectively turn on the
100:10 - resource
100:11 - for css so um underneath your resources
100:16 - your css will be here if not you need to
100:19 - add it
100:19 - underneath resources and our uri
100:24 - is going to be
100:25 - [Music]
100:28 - we haven't created the file yet but it's
100:29 - going to sit under
100:33 - the css folder and we're going to call
100:35 - it style.css
100:38 - which is fairly standard we don't have
100:40 - to worry about
100:41 - an id for it so that's the manifest
100:46 - done now
100:49 - we let's go ahead and create
100:52 - our css folder which will be under
100:56 - the web app folder so css
101:00 - under there we're going to create a file
101:02 - called
101:03 - style.css and this is where we're going
101:07 - to put our code but before we do that
101:09 - we need to just like we do a normal css
101:12 - we need to go and label
101:14 - the different classes in our view
101:19 - so if we go ahead and find our view.xml
101:24 - we're going to add some
101:27 - the stylings in three places so the
101:30 - first one is in the app itself
101:33 - so we're going to call this class
101:36 - my app
101:40 - demo wt for walkthrough
101:44 - then we're going to add some styling to
101:45 - the button where we're going to bring it
101:47 - a little bit closer together
101:49 - and so we're going to replace the
101:52 - standard sap
101:53 - margins and we're going to call this my
101:57 - custom button
102:00 - um and then um we're going to add a
102:05 - we're going to add a control um and
102:08 - we're going to
102:09 - it's a formatted text control
102:12 - so um we're going to
102:16 - remove this well actually
102:19 - we can affect we can effectively just
102:20 - edit this it's fine so
102:23 - formatted text and
102:26 - um this needs to be labeled as
102:29 - html text oops
102:34 - html text and that's just going to call
102:37 - our hello recipient name
102:40 - and our class um
102:43 - is going to um we're going to
102:47 - keep the small the sap small margin
102:50 - there
102:52 - but now we're going to add the color the
102:55 - custom color
102:56 - so first we're going to call this the
103:00 - sap
103:00 - or first we're going to call rather the
103:02 - sap theme
103:05 - highlights
103:09 - as color so
103:12 - um let's just pop this on a weight
103:16 - um i need to open this up rather so
103:19 - now we're just chaining our classes here
103:23 - so we've got our class here now we're
103:25 - going to apply the sap
103:27 - theme highlight um and then the as
103:30 - color and from there
103:34 - we're just going to add the custom one
103:36 - where we'll just call it my
103:38 - custom text
103:42 - and we can go ahead and our parentheses
103:44 - there and save
103:46 - now we need to go and add our style
103:49 - our particular styles here so we're
103:52 - going to reference
103:55 - the first thing we're going to do is
103:56 - reference the left to right
104:00 - part of this so you reference that
104:03 - whoops square brackets
104:06 - dir equals ltr
104:14 - and now that we have the left to right
104:17 - section
104:18 - um we need to add the my app
104:23 - demo wt
104:28 - and we're going to add the dot my
104:32 - custom button
104:35 - dot sap m btn
104:42 - and we're going to open that up
104:45 - and now that we're in here we are going
104:47 - to say margin
104:48 - [Music]
104:49 - right and we'll give that a rim of 0.125
104:58 - perfect and we're going to do the exact
105:01 - same thing
105:02 - but for the right to lift for things
105:05 - like arabic languages for example
105:09 - and that's going to be right to left
105:13 - and save that now we're going to
105:16 - reference the
105:18 - um we're going to add for these
105:21 - particular classes we're going to add
105:24 - let me just add them in here demo
105:26 - walkthrough
105:27 - and my custom
105:31 - text and in here we're going to
105:35 - add display
105:38 - inline block for that formatting and we
105:44 - want uh
105:45 - let's just do font weight
105:50 - set that bold
105:53 - perfect so if we go back to our
105:57 - application
106:00 - and control f5
106:04 - hmm all right let's go back and take a
106:07 - look at our
106:08 - code so left to right
106:12 - that's all fine right oh sorry this
106:15 - should be
106:16 - margin left um
106:19 - because this is going to be right to
106:20 - left so the margin will be on the other
106:22 - side
106:23 - um but that won't stop it let's check
106:26 - our manifest
106:29 - css ah
106:32 - that comma shouldn't be there so let's
106:35 - go back and save
106:37 - and control f5
106:41 - there we go so there we've got some bold
106:44 - uh some the font being bold which is
106:46 - perfect
106:48 - that's all fine that's also looking good
106:51 - you can see this has changed a little
106:53 - bit that's got a little bit smaller
106:54 - but it's it's still got a bit of a space
106:56 - there um
106:58 - so yeah that looks good
107:04 - right so in this video we're going to be
107:06 - dealing with nested views
107:09 - and as the app becomes more complicated
107:13 - um we are now going to
107:16 - compartmentalize or move things around a
107:19 - little bit
107:20 - and in this particular case we are going
107:22 - to take the
107:24 - um panel that we created uh which is
107:27 - over here
107:28 - and we're going to put it in a separate
107:30 - view with its own separate controller
107:33 - and then we're going to tidy up the
107:34 - current controller or main controller
107:36 - and
107:38 - we're going to do a reference in this
107:39 - section here
107:41 - so the first thing we're going to do is
107:44 - we are going to create a
107:46 - new view which will be done inside of
107:48 - our view folder
107:50 - and so we are going to call that
107:53 - the hello panel
107:57 - dot view dot xml
108:02 - then we are going to
108:05 - [Music]
108:07 - um open up our
108:11 - xml tag here view
108:16 - and we are going to reference the
108:18 - controller that we will create shortly
108:21 - enter the name equals sap dot
108:25 - ui dot demo dot
108:28 - warp rube
108:31 - dot controller for the controller folder
108:35 - and we'll call the controller hello
108:38 - panel
108:39 - as well then the xml
108:43 - ns tag is that
108:47 - and that's going to be referencing our
108:48 - sap.m library
108:52 - and now we just need the xml ns
108:57 - with the mvc alias and we need to bring
108:59 - in the mvc artifacts
109:03 - so that's sap.eui.com.mvc
109:09 - perfect whoops we can close that off
109:14 - mvc
109:21 - lovely so now that we have that
109:25 - we can go back and grab our
109:29 - full panel here and we can just take the
109:32 - lot of it
109:33 - we can cut it and paste it
109:37 - right in here let's format everything
109:43 - and now that we've formatted it that
109:46 - we go ahead and save so before we create
109:50 - the controller
109:51 - we just need to reference it now that we
109:54 - have taken it out
109:55 - of the view of the main view we're going
109:58 - to nest it in here
109:59 - and we're going to call mvc just like we
110:01 - did above
110:03 - xml
110:07 - view and we're going to give it
110:11 - the we're going to add the attributes so
110:13 - the first one is you name
110:16 - um and that's going to come from zap dot
110:20 - ui dot demo
110:21 - dot walkthrough
110:26 - dot view dot hello
110:30 - panel whoops so again referencing our
110:33 - folder structure
110:34 - view folder and the hello panel file
110:38 - we can close that off
110:42 - so that is fine
110:46 - now let's go ahead and create our new
110:48 - controller
110:51 - and this is going to be called hello
110:55 - panel dot controller dot
110:59 - js
111:02 - and now that we're in here we are going
111:05 - to call sep
111:05 - dot uh whoops
111:09 - sap dot ui dot define
111:15 - and we can get rid of these
111:19 - so we need to call the controller module
111:22 - and also the message toast module
111:24 - because those are the two we're dealing
111:25 - with so
111:27 - say p slash ui
111:30 - core mvc slash
111:34 - controller oops
111:41 - and sap slash
111:44 - ui oh sorry
111:48 - that's sap slash m slash
111:52 - message toast
111:55 - then we need to bring in
111:59 - these two into our constructor
112:07 - lovely and now that we've done that we
112:11 - can go
112:12 - back to our standard app controller
112:15 - and we'll tidy this up in a minute but
112:19 - we can then pull this out
112:26 - and that'll stay as is that's perfect
112:36 - brilliant
112:39 - so we just need to wrap this up
112:43 - in our controller logic so return
112:47 - controller dot extend
112:52 - and we need to extend our sap dot
112:55 - ui.demo
112:56 - dot walk through
112:59 - dot controller and referencing the new
113:04 - controller itself oops hello panel
113:08 - [Music]
113:10 - controller
113:12 - and
113:15 - i'll just shove that back in here
113:20 - so it'll look exactly the same as the
113:22 - other controller
113:24 - to run our formatting
113:27 - lovely so
113:30 - that looks fine
113:37 - all good this one is going to sit
113:43 - fairly empty for now we don't need the
113:45 - message toast module
113:46 - anymore so we've just got our empty
113:50 - controller
113:51 - this is all fine extended
113:55 - and let's go ahead and save
113:58 - save i don't need the component manifest
114:01 - or css
114:03 - i don't need that so let's check that
114:06 - referencing our view
114:08 - and our brand new view here so we've
114:10 - saved everything
114:12 - now if we go ahead and have a look at
114:15 - our code i mean our app output
114:19 - and we press ctrl f5
114:23 - so the panel content is now
114:27 - refactored into its separate view
114:30 - and there are no visual changes from the
114:31 - last step
114:33 - but you can now see we've extended
114:36 - things and made the app a bit more clear
114:38 - to understand
114:43 - so in this section we are going to move
114:46 - on to
114:47 - fragments and we're going to run
114:50 - a dialogue fragment specifically
114:53 - so uh dialogues i mean fragments are
114:56 - a fantastic way to create reusable
114:59 - artifacts that
115:01 - you can use without the need for a
115:04 - controller
115:05 - so a good example would be if you've got
115:08 - a
115:08 - form that needs to be opened at a
115:10 - certain point
115:12 - and you need a read-only version or an
115:13 - editable version
115:15 - you can do that very quickly and easily
115:18 - with fragments
115:19 - and you can design each part of the form
115:22 - to be read-only or editable based on
115:24 - each individual fragment
115:27 - so in this case we are going to create a
115:30 - dialogue just a simple dialog
115:32 - and we're going to call it and call it
115:34 - specifically from
115:36 - our view and we're not going to we're
115:38 - obviously not going to have a separate
115:40 - controller for it but we're going to use
115:41 - our current controller to
115:45 - handle the logic so
115:48 - let's go ahead and find our hello panel
115:52 - view
115:53 - and in there we're going to create a
115:55 - button
115:59 - and that button is going to be used
116:02 - to call this new dialog fragment
116:06 - so we'll add some attributes to it
116:09 - and we'll call this the give it an id of
116:12 - hello
116:13 - dialog button
116:18 - [Music]
116:20 - then we will let's the text will
116:23 - obviously add to our i18n
116:26 - file so we'll reference that in as the
116:30 - i18n greater than symbol
116:34 - and we'll call it the open
116:37 - dialog button text oops
116:43 - so let's go ahead and add that to our
116:45 - i18n file
116:46 - as we go along
116:52 - and let's uh let's call that um
116:58 - say hello
117:01 - with a well let's just say with the
117:03 - dialogue
117:05 - lovely so that's that
117:09 - uh then uh
117:16 - then we need to call the um the press
117:20 - event so if someone presses on this
117:22 - button this is what needs
117:24 - to happen and it's going to be on the
117:27 - we'll call our event on open
117:30 - dialogue and
117:33 - let's add a standard sap class
117:37 - and just say sap ui
117:41 - small margin end to give us a margin at
117:44 - the end point
117:46 - and we can go ahead and close that off
117:51 - so let's just format this perfect so
117:54 - that's a line
117:56 - brilliant so uh let's now go ahead and
118:00 - actually create the fragment so
118:02 - in the view section we are just simply
118:05 - going to add it like we would any other
118:07 - view
118:07 - you can have a separate fragment folder
118:09 - if you want um but
118:10 - in this case we um we won't
118:14 - so this is going to be called the
118:18 - hello dialogue dot fragment
118:23 - dot xml
118:26 - brilliant now in here we open up our
118:29 - fragment
118:31 - with call fragment
118:35 - definition
118:39 - and we call the xml
118:43 - ns and we bring in our sap.m library
118:48 - and we need the um the sept.ui.co
118:52 - library as well so
118:53 - xml ns sap.ui.cor
118:58 - and we'll give this an alias sorry that
119:01 - needs to be an equal sign
119:02 - and this will be an alias of core
119:06 - and that will equal that
119:09 - brilliant and let's just close
119:13 - that off
119:19 - perfect so now that we have that
119:22 - we're going to call the dialog control
119:26 - from the sap.m library and because it
119:28 - doesn't have an alias we could just
119:30 - call it as is so
119:33 - dialog and we're going to give it an id
119:39 - of hello dialog
119:43 - and we'll give it a title
119:45 - [Music]
119:48 - of hello
119:53 - and we'll call the recipient name again
119:56 - from our model so slash recipient
119:59 - slash name and
120:03 - perfect and that's it
120:07 - this is your little reusable fragment
120:10 - defined and obviously you can add a form
120:12 - in here or whatever you want
120:14 - but in this case it's just a dialog
120:17 - so now we need to move on to our
120:20 - controller and we're going to be using
120:23 - our hello panel controller specifically
120:26 - so here we need to add our comma
120:31 - and call our new event which is on
120:36 - open dialogue
120:40 - and we add our function oops
120:45 - function
120:49 - and now we're going to go ahead and
120:53 - call this dia call the fragment but
120:56 - we're going to load it asynchronously
120:58 - so i'll explain as i go first things
121:00 - first
121:01 - is to declare a
121:05 - a view a will to get it um a reference
121:09 - to our view
121:10 - and we just say this dot get view
121:14 - perfect now we're going to create
121:19 - the dialogue lazily
121:23 - um and to do this we're going to say
121:28 - if this dialog exists
121:32 - open it or else create it and open it
121:37 - so if
121:40 - oh sorry so the first part is if the
121:42 - dialog
121:43 - does not exist so if you cannot say
121:47 - the spy id and the dialog id
121:50 - open it's going to go ahead and
121:52 - physically create it if it doesn't exist
121:54 - so
121:55 - if this or not this by
122:00 - id and it's the
122:03 - hello dialog
122:07 - so if um this my id hello dialog
122:11 - does not exist
122:15 - then oops
122:22 - then we're going to load it
122:25 - asynchronously load a synchronous
122:31 - if i spelled that correctly a sync
122:38 - no yes it is right load asynchronous
122:43 - xml fragment
122:48 - and now we're going to call we need to
122:51 - load our module first so
122:52 - now we're calling the fragment module so
122:55 - we need to make sure we add that
123:00 - that comes from the sap slash
123:03 - ui core fragment module
123:08 - and then we need to go ahead and bring
123:10 - it into our constructor function
123:13 - fragment perfect
123:17 - so now we can call the
123:20 - fragment dot load
123:25 - and go ahead and open that up
123:30 - and now we're going to call the
123:33 - i we're going to add the the attributes
123:36 - id and that's going to be the
123:40 - view that will be the id of the view
123:43 - rather
123:44 - dot get id
123:51 - and then name
123:54 - and the name of the dialogue
123:58 - fragment is sap.ui.demo
124:03 - dot walkthrough dot
124:07 - view dot dialog
124:10 - again referencing our home folder
124:13 - the view folder the hello dialog which
124:16 - exists there
124:20 - and then we're going to use a promise so
124:23 - once this has
124:24 - got everything it needs um
124:27 - we then oops
124:32 - call a function
124:36 - and we reference our dialog
124:40 - and add it as an importing parameter
124:44 - to this function so this is referencing
124:47 - the fragment that we just loaded in the
124:50 - promise
124:53 - and we need to do two things we
124:56 - need to connect the dialog
125:00 - to the root view of this component and
125:02 - we do that by calling overview.add
125:04 - dependent and then we go oh dialog open
125:07 - it's as easy as that so just so you can
125:10 - see what we're doing
125:12 - connect dialog to the root
125:15 - view of this component
125:20 - including the models
125:23 - and the life cycle
125:27 - and so we call oh view which is
125:30 - referenced
125:32 - up here so we've now got a reference to
125:34 - our view
125:36 - add dependent
125:41 - dependent sorry
125:44 - and calling the dialog so it's now added
125:47 - as a dependent
125:50 - and then oh dialog
125:53 - dot open
126:00 - and now that we have that um
126:03 - so we've now called the fragment we've
126:06 - then
126:06 - uh so now if the the it doesn't exist
126:09 - this hello dialogue fragment we load the
126:12 - fragment
126:13 - and then after the promise we then add
126:15 - it as a dependent
126:16 - to the view and then we open it
126:19 - if it does exist
126:22 - else so now we're coming back to the top
126:24 - of our if statement
126:28 - else
126:30 - this dot by id
126:35 - hello dialog
126:41 - open so if the dialog does exist
126:44 - just simply open it so it works it works
126:48 - either way
126:50 - so we go ahead and save everything
126:53 - there we save our fragment
126:58 - then let's go ahead and test it
127:04 - ctrl f5
127:09 - so let's um press f12 and see what went
127:13 - wrong
127:15 - so now that we're in the chrome console
127:18 - if you see an error that looks like this
127:21 - with all of your
127:23 - xml code here it's very likely that
127:27 - there's an issue with your xml somewhere
127:29 - some small mistake
127:31 - so let's go back and check
127:35 - our code so
127:40 - um ah okay
127:43 - that shouldn't be there for starters
127:46 - uh and let's check our fragment as well
127:50 - fragment definition chord dialogue
127:56 - i haven't closed off my dialogue
127:58 - properly
128:00 - let's save that so now let's see
128:03 - if that has had any effect
128:06 - there you go so check your xml um
128:10 - for small mistakes but here's our new
128:12 - say hello with dialog button
128:14 - referenced with the i18n file now if we
128:17 - click it
128:20 - there you go this is our little fragment
128:22 - with hello ui5
128:24 - working perfectly
128:29 - so now in this section we are going to
128:33 - create a fragment callback and what that
128:36 - means
128:37 - or in this example when you click this
128:39 - button
128:40 - we want to have a little button here
128:42 - that says close
128:43 - this dialog and to do that we need to
128:46 - connect this fragment to the current
128:48 - controller
128:49 - that we've got so it doesn't have his
128:50 - own controller but it can be connected
128:52 - to our
128:53 - current controller and so you can open
128:56 - it and close it
128:57 - as you as you want so
129:01 - let's go ahead and head back to the code
129:05 - and now that we're here let's go to
129:08 - our hello panel controller and
129:12 - where we've loaded our fragment let's
129:15 - connect it
129:16 - to this controller and by doing that we
129:18 - just call
129:20 - controller this
129:23 - and make sure we have our comma there
129:26 - then we need to create the
129:30 - um the function or the event
129:34 - that says when you click on close close
129:37 - the dialog
129:38 - so let's find
129:41 - the end of this
129:47 - and let's create our on
129:51 - close dialog event
129:55 - and that is a going to call a function
129:58 - with no importing parameters and
130:01 - it's as easy as going this by id
130:06 - hello dialog
130:10 - dot close
130:14 - there we are let's do some formatting
130:17 - perfect now
130:21 - let's go back to our new fragment
130:24 - and in the dialog we are going to
130:28 - so within this dialog you have and
130:32 - obviously you just need to read the
130:33 - documentation to see where i found this
130:35 - but
130:36 - um you can effectively add a button in
130:39 - here so
130:40 - the way you do that is you call
130:43 - begin button oh sorry i just need to
130:46 - close off the dialog
130:49 - dialog
130:52 - so now within the actual dialog itself
130:56 - within the initial attributes that we
130:58 - call
130:59 - i'm going to say begin button
131:06 - and in there i'm going to add my button
131:12 - and that button oops
131:18 - that button is going to have the
131:19 - attributes text
131:22 - equals and we're going to reference our
131:24 - i18n
131:25 - file and we'll call this
131:28 - dialog close
131:32 - button text and let's wrap that up
131:36 - so let's go ahead and add that to our
131:37 - i18n file
131:40 - which is over here
131:44 - and we'll just call that okay for now
131:48 - so that's fine
131:52 - then the next attribute is going to be
131:56 - the event when you press so the press
131:59 - event
132:00 - and that's going to be the on
132:05 - dialog event and that'll be reference
132:08 - now that is referenced in our controller
132:11 - now that we've actually connected the
132:12 - controller
132:14 - so that's fine
132:17 - dialog fragment is fine let's check our
132:20 - controller here
132:21 - that's all good so
132:25 - let's go ahead and check it
132:28 - ctrl f5
132:32 - and if we click on say hello with dialog
132:38 - so let's have a look um let's press f12
132:41 - and have a look aha it looks like
132:44 - another xml issue so let's close this
132:48 - and go back to the code and let's have a
132:51 - look at our dialogue fragment
132:52 - so we've got our dialogue that's
132:55 - all closed with our attributes begin but
132:59 - ah i haven't closed this off
133:02 - so uh let's go ahead and
133:06 - close it off so first thing we need to
133:08 - close off our button
133:11 - and then we need to close off our
133:15 - begin button begin button
133:22 - now that might this sort of thing might
133:24 - seem like a silly mistake
133:26 - um but when you are writing uh massive
133:28 - views and nesting them
133:30 - and calling fragments these um will
133:33 - pop up from time to time so it's very
133:35 - important to
133:37 - double check everything
133:42 - um
133:44 - and that looks good so let's go back and
133:48 - test
133:49 - ctrl f5
133:55 - hmm still seems to be the same issue so
133:58 - we press f12
133:59 - looks like it's still the xml so let's
134:02 - go ahead and check the code again
134:06 - and see dialogue
134:11 - i haven't closed off the top portion of
134:13 - my dialogue
134:14 - again silly mistake
134:18 - there we are so let's go ahead and check
134:20 - for a third time
134:22 - and see if this works refresh
134:26 - click on say hello with dialog
134:30 - so um it looks like we have another
134:33 - issue
134:34 - um so let's take a proper deep dive and
134:36 - see
134:38 - what the problem is
134:42 - um hmm i've made a
134:45 - spelling mistake here this should be
134:48 - close button let's go and change that
134:51 - here as well
134:53 - save and save so
134:56 - dialogue everything begin button button
134:59 - that's closing clock
135:01 - again silly mistake this
135:06 - should be there i'm pretty sure that was
135:09 - the main issue so let's
135:12 - let's go ahead and have a look and
135:14 - refresh it again
135:16 - and see if we click the say hello dialog
135:20 - there you go so again check your xml
135:23 - but here's our dialog fragment and if we
135:26 - click ok
135:27 - it closes it and
135:31 - that's it working great
135:37 - right so now we're going to move on to
135:39 - section 18
135:40 - icons sap ship with
135:43 - quite a wide variety of icons to choose
135:46 - from
135:47 - and in this section we are going to put
135:49 - them in two separate places
135:50 - so you can see how they work so
135:53 - the first one is in the hello panel we
135:56 - are going to add an icon
135:58 - to the button to one of the buttons
136:00 - rather so
136:01 - in your first button your hello dialog
136:03 - button
136:05 - let's go underneath id and just like any
136:09 - other attribute
136:10 - we're going to add icon equals
136:14 - sap icon and this naming convention
136:18 - is found um in the sap icons
136:23 - sort of web page which will be linked in
136:26 - the description
136:27 - sap icon um
136:30 - forward world and we can go ahead and
136:35 - save that then let's go ahead and add an
136:39 - icon
136:40 - to our fragment and we can also adjust
136:44 - the size so
136:47 - let's go ahead and just before the begin
136:51 - button
136:52 - again referencing the documentation when
136:54 - dealing with dialogues and fragments and
136:56 - all of that
136:57 - we would add in a content section
137:01 - and close that off
137:06 - and then under this content section we
137:08 - would call
137:10 - a core oops core
137:14 - icon and now you can see where the alias
137:17 - has come in so
137:18 - this is coming from um the set.ui.co
137:22 - library
137:23 - and we've referenced it here with xmlns
137:26 - but then we've given it an alias of core
137:28 - so when we reference it
137:30 - in the xml itself we have a prefix of
137:33 - core
137:34 - and then we add our icon so now you can
137:36 - do this with all sorts of different
137:37 - libraries
137:38 - as you bring them in like zap.ui.table
137:41 - etc
137:42 - so how do we have that let's add some
137:45 - attributes
137:47 - so source will be
137:51 - sap icon
137:54 - and this one will be the hello world
137:58 - icon now we can tell it
138:01 - the size and we'll give it a size of
138:05 - eight rim and we'll give it
138:09 - a standard sap class
138:12 - and we'll set the margin to sep
138:15 - ui medium
138:19 - margin and let's go ahead and close that
138:23 - off properly
138:26 - so now that we have that let's go ahead
138:28 - and check
138:32 - so we're going to go ahead and refresh
138:35 - and there's our first icon in the button
138:38 - the little world
138:39 - and if we click there's our second icon
138:47 - so in step 19 with the
138:50 - reuse dialogue section we're going to
138:54 - expand our reuse concept
138:55 - and invoke the dialogue at the component
138:58 - level
138:59 - so what that means is if we take a look
139:03 - at our controller here
139:07 - this section where we load up
139:10 - our fragment we want to take it and we
139:13 - want to add it to the component
139:16 - because if we didn't we would have to
139:18 - rewrite this every single time
139:20 - in each of the different controllers if
139:22 - we wanted to reuse this in different
139:24 - parts of the app
139:26 - so by taking this and putting it
139:30 - directly in the component file here
139:34 - we can reuse it wherever we want and
139:36 - only run the code once
139:39 - so let's go ahead and do that
139:43 - the first thing we're going to do is in
139:45 - our component file
139:47 - we are going to reference our
139:50 - um our hello dialog
139:55 - javascript controller which we'll build
139:58 - in a second
139:59 - but let's go ahead and add it
140:02 - as a module at the top so now what we're
140:06 - doing is we're referencing the root
140:08 - folder
140:09 - and we're calling the controller folder
140:13 - itself
140:14 - and inside there will be the hello
140:18 - hello dialog file which then
140:21 - we will bring through into our
140:24 - constructor function
140:25 - here
140:29 - so let's go ahead under the controller
140:32 - and create our new file
140:33 - called hello dialog
140:39 - sorry um we need to
140:42 - create a hello dialogue dot
140:46 - js oops
140:49 - if i could spell hello dialogue dot js
140:54 - there we go that is everything we need
140:57 - there so we'll come
140:58 - back to that in a second let's go ahead
141:01 - and continue with the component
141:04 - um and that'll make a bit more sense now
141:08 - so now that we're in the component we
141:11 - need to create
141:12 - the or call the dialog rather
141:16 - and also add an exit function and exit
141:19 - event handler as well so
141:22 - let's call set dialogue
141:26 - and then it's this underscore
141:30 - for so whenever you use underscore it's
141:31 - a naming convention for
141:33 - private methods in javascript so
141:36 - hello dialog and that's going to equal
141:40 - new hello dialog
141:44 - and we're going to pass it in the get
141:47 - root control
141:48 - so get root control
141:56 - that is fine so
142:00 - um let's just set that so we've set this
142:04 - in the um in the init function so it's
142:08 - going to be called
142:08 - when it initializes then
142:12 - we need to add an exit function an exit
142:14 - event sorry
142:16 - with a function that says
142:20 - this dot
142:24 - private method hello
142:28 - dialogue dot destroy and
142:37 - delete this
142:41 - dot underscore hello dialog to
142:44 - obviously really clear or clean things
142:48 - up
142:50 - so let's just format that
142:54 - lovely um so now that we've got our exit
142:58 - function
143:00 - let's add our open
143:05 - hello dialogue method sorry
143:09 - my spelling is not fantastic
143:14 - so on open hello dialog
143:17 - function
143:21 - and within this we're going to call this
143:25 - private method this dot private method
143:30 - hello
143:33 - hello dialogue dot open
143:40 - brilliant so we've got everything we
143:41 - need set
143:43 - out in our component now what we're
143:46 - going to do
143:47 - is we're going to take all of that logic
143:50 - that we had
143:52 - in the uh where is it here in the
143:55 - jalapeno controller and we're going to
143:58 - expand it
143:59 - and make it reusable in its own
144:01 - javascript file
144:03 - here so um
144:07 - we start off with sap dot ui dot
144:12 - define
144:14 - dot ui dot define
144:17 - and we open that up
144:21 - and we bring in our modules so we've got
144:26 - um
144:28 - the sap
144:32 - slash ui slash
144:35 - base managed object
144:39 - which will make sense in a minute
144:42 - and this is sap slash ui
144:46 - core slash fragment
144:50 - brilliant then we're going to open up
144:53 - our
144:54 - function here
144:57 - and we're going to pass in the r2
145:00 - modules
145:04 - and pass in fragment
145:09 - brilliant so now that we have that in
145:12 - there
145:14 - we can open this up and as always use
145:19 - strict
145:22 - then we are going to just like we did
145:24 - with the controller except this is now a
145:27 - managed object it's return
145:31 - managed object dot extend
145:34 - and we're now going to extend our hello
145:38 - js file
145:41 - and that is referenced at sap dot
145:44 - ui dot walk
145:47 - through dot
145:51 - the controller folder and
145:54 - hello dialog for the hellodialog.js file
145:59 - and once we're in there we can open that
146:03 - up
146:04 - and we can start off with our
146:07 - constructor
146:10 - and that is going to be a
146:13 - function that brings in the view which
146:16 - we which we would have passed
146:17 - in uh and i'll show you that in a minute
146:20 - now but that's a
146:20 - parameter coming in and
146:24 - we reference and we we create we
146:27 - allow this private attribute so this
146:32 - overview is going to equal the
146:35 - view we just brought in which is over
146:38 - here
146:41 - then we're going to specify our exit
146:43 - function our exit event sorry
146:51 - and then this is function
146:56 - and this is going to be delete
147:01 - this underscore overview
147:05 - perfect then
147:10 - the next one is going to be open and
147:13 - this is where we're going to add
147:15 - all the logic from the the
147:18 - previous controller so under open
147:23 - we get function not passing thing in
147:27 - and we're going to create our view
147:29 - variable
147:30 - which is view overview and we're going
147:33 - to pull this from our private
147:36 - private attribute overview
147:44 - oops now just like we did before
147:48 - we're going to create the dialogue
147:51 - lazily
147:55 - and if
147:59 - o view dot
148:02 - by id just like we did before
148:06 - hello dialog
148:10 - so if it's not there this buy id hello
148:13 - dialogue that hello dialog is not there
148:19 - open up our if statement and we create
148:23 - our
148:25 - um fragment controller variable
148:32 - controller fragment controller
148:37 - and we open that up and that's
148:40 - on close dialogue
148:47 - and we pass that function
148:51 - and so it all makes sense in a minute
148:53 - and it's quite a lot to take in as we go
148:54 - but just stay with me
148:57 - and dot by id
149:05 - hello dialogue
149:08 - close
149:14 - great so we've got that there
149:17 - that's our fragment brilliant
149:22 - now we're going to
149:26 - load the xml fragment asynchronously
149:28 - asynchronously just like we did before a
149:31 - synchronous xml
149:34 - frame
149:41 - and again fragment
149:45 - dot load
149:51 - and in here we're going to pass in the
149:53 - id
149:54 - um which is
149:57 - from the just from our view variable
150:02 - dot get id
150:07 - the name is sap
150:11 - dot ui dot demo dot
150:14 - walk through
150:17 - dot view dot
150:21 - hello dialog
150:24 - and that is that again is our folder
150:26 - structure so it's referenced in the view
150:28 - folder
150:28 - in the hello dialog fragment
150:33 - and then we give it the controller
150:37 - we give it a controller rather and that
150:40 - comes from the
150:41 - o just like we typed above the o
150:44 - fragment
150:47 - controller which is
150:50 - over here remember that
150:56 - and once we've got once we've fulfilled
150:59 - that promise
151:00 - then function
151:04 - passing in the dialog
151:07 - the dialog above giving just giving it a
151:09 - name in the param in the
151:10 - importing parameter here
151:17 - and we're going to connect the dialog
151:20 - to the root view
151:24 - of this particular
151:29 - or i'm just going to say of the
151:30 - component because there's only one
151:32 - component
151:33 - of the component
151:37 - models and life cycle
151:42 - lovely and so we call overview
151:46 - dot add dependent
151:54 - dialogue and a
151:57 - dialog dot open
152:03 - now that we have that there
152:06 - we can run our else statement
152:11 - if i put that in the wrong place where's
152:14 - that
152:14 - end
152:19 - uh if i put that if
152:25 - um there we go
152:29 - my apologies else
152:34 - overview dot by id
152:40 - hello dialog
152:45 - open dot open
152:49 - and let's go ahead and save that
152:52 - else else else no we don't need that
152:57 - close that
153:00 - and let's just format our document
153:04 - brilliant so we've got everything we
153:06 - need here
153:07 - um now let's go ahead
153:11 - and reuse it so the first place first
153:14 - thing we're going to do is we're going
153:15 - to put it back
153:16 - um in the hello panel
153:20 - controller where we used it before so
153:22 - the functionality will be the same
153:24 - then we're going to add a little button
153:25 - at the top right which will also reuse
153:28 - it and you can see how easy it is
153:30 - and again there's a lot of code here
153:31 - that i'm going through um
153:33 - if it doesn't make sense just keep
153:35 - re-reading through it rereading through
153:37 - and follow the chain of where things go
153:39 - and it will make sense um so i really
153:41 - encourage you to take the time to really
153:43 - really understand this
153:44 - because if you can get your reuse
153:46 - components all running through the
153:48 - component file
153:50 - you've got yourself a pretty robust
153:52 - maintainable application
153:55 - so let's go ahead and save that and
153:57 - let's go back to our hello panel
153:59 - controller
154:01 - and we are going to get rid of pretty
154:04 - much
154:08 - everything
154:14 - else
154:22 - and all we do so now on open dialogue
154:25 - when that
154:26 - um event is called all we do is
154:29 - this dot get owner component
154:34 - calling the component get owner
154:36 - component
154:38 - open hello dialogue
154:44 - that is literally it so this open hello
154:47 - dialog
154:51 - sits here and that runs through our
154:53 - whole process that we've just spent all
154:55 - this time putting together so we can go
154:58 - ahead and save that
155:00 - now let's go back to our um
155:04 - our application controller which is the
155:06 - controller assigned to the apple kind of
155:08 - just so you've got your shell and then
155:10 - your app which you'll see at the top
155:12 - line
155:15 - let's go to where is it here so before
155:17 - we add it in the controller
155:19 - let's go to our app view
155:22 - and inside our
155:26 - page we have our content section and now
155:28 - we're going to add
155:29 - header content so
155:32 - header content
155:36 - and close that off
155:41 - edit content and in
155:44 - here we're going to add a button
155:49 - and we're going to give that an icon of
155:52 - sap icon
155:56 - hello world
156:00 - and then we're going to call the press
156:03 - event and tell it to call the
156:07 - on open dialogue event which we'll
156:10 - specify in the app
156:12 - controller shortly on open dialogue
156:16 - so let's go ahead and take that name so
156:18 - make sure it's correct
156:20 - and again don't forget to close off your
156:22 - button or any of your controls
156:25 - go ahead and save that um
156:29 - so then let's go back to our app
156:34 - controller
156:39 - and all we're going to do is
156:43 - on this event let's just
156:47 - place that down on open dialog
156:51 - call our function and in that function
156:55 - just like we did in the other controller
156:57 - this dot
156:58 - get owner component
157:03 - getting the component file
157:06 - uh or getting the instance of the
157:07 - component rather i suppose it'd be more
157:09 - correct
157:11 - hello dialog
157:15 - and there you are so this event
157:18 - um is whichever event you have in
157:22 - whichever of your views or controllers
157:23 - or whatever it is
157:24 - all we've done is we've allowed us from
157:27 - anywhere
157:28 - in the app instead of repeating all of
157:30 - that code to just
157:31 - call this to get our fragment and
157:35 - now that we've done that let's go ahead
157:37 - and test it
157:40 - ctrl f5 to refresh
157:44 - so first things first let's see if our
157:46 - button works
157:48 - all right it's not working so let's
157:51 - press f12 and see what's what
157:54 - cannot read property of open in the
157:57 - component so
157:58 - let's go back and check our component
158:02 - and see so open hello dialogue this dot
158:07 - hello dialogue
158:10 - ah spelling mistake again
158:14 - so let's go ahead and save that that
158:16 - should probably work
158:17 - now refresh
158:22 - right that's working
158:25 - no it's not closing when we click the ok
158:28 - button so let's have a look
158:32 - controller
158:37 - hmm
158:41 - controller so let's see there's probably
158:44 - an
158:44 - issue in our fragment perhaps
158:48 - let's see so
158:51 - let's um see i probably typed
158:55 - in the controller at some strange point
158:58 - so let's quickly
159:00 - control law search that aha
159:04 - there's the problem so um
159:07 - i've spelled incorrectly again
159:12 - so if we go ahead and save that
159:18 - and let's close this and refresh
159:23 - and try one more time brilliant so that
159:27 - works
159:28 - lovely let's try our new little button
159:30 - here reusing it
159:33 - there you go
159:39 - now that we have a good structure for
159:40 - our application um
159:42 - let's go ahead and add some data so now
159:45 - in section 20
159:46 - we're going to look at aggregation
159:48 - binding
159:49 - and what that's going to do is we're
159:52 - going to add some json data
159:55 - and we're going to reference it in our
159:58 - view
159:58 - and show a list of invoices
160:02 - it's a as simple as that so let's go
160:05 - ahead and
160:06 - create our data and we're going to do
160:08 - that
160:09 - in our web app directly and we're going
160:12 - to create a
160:13 - file called invoices.json
160:19 - and there's quite a lot of data here so
160:21 - i'm just going to copy it across which
160:23 - you can do the same um directly from
160:27 - um either the github repo or you can do
160:30 - it you can pull it straight from the
160:32 - sap uf5 walkthrough whichever suits you
160:36 - so here we've got some data product name
160:39 - quantity extended price etc etc
160:43 - now what we're going to do is we're
160:44 - going to reference this data
160:46 - in our manifest and create a model there
160:49 - so let's just go ahead and save this we
160:52 - don't need it anymore
160:55 - now if we go and find our manifest.json
160:59 - file
161:00 - and if we look under the sap ui5 section
161:05 - models what we're going to do
161:09 - is we're going to create an invoice
161:14 - model and we're going to
161:20 - tell it what type of model it is and it
161:23 - is a sap dot
161:27 - ui dot model.json.json
161:32 - model whoops
161:35 - json model and
161:38 - the uri or the reference to it in our
161:42 - folder structure
161:43 - or the location in our folder structure
161:44 - is straight in our root web app folder
161:47 - so we just reference invoices
161:51 - dot json which is
161:56 - where is it yet which is you see it's
161:58 - just above invoices.json
162:01 - so we can go ahead and save that
162:05 - now what we're going to do is we're
162:07 - going to
162:08 - create an invoice list view and then
162:11 - we're going to
162:12 - reuse or reference it in our app
162:15 - specific
162:16 - view so let's go ahead
162:20 - and go to our view
162:23 - folder let's just close some of this up
162:27 - underneath our view folder we're going
162:29 - to create a new file called
162:31 - in voice list
162:34 - dot view dot xml
162:39 - then in here just like we've done with
162:41 - all of our others we're going to open up
162:43 - our mvc
162:44 - tag view
162:48 - and we're going to reference xml ns
162:52 - and we're going to bring in our sap.m
162:58 - library and our mvc artifacts as well
163:01 - so xml ns again
163:05 - using the alias and just like before
163:12 - sap.eui.com.mvc
163:14 - lovely so let's just close this off mvc
163:20 - view
163:23 - brilliant so
163:26 - now that we have that we are going to
163:28 - open up a list control
163:33 - and that's going to have some attributes
163:36 - starting off with header text
163:41 - and we're going to pull this again
163:43 - directly from our i18n
163:45 - file following
163:48 - following the naming conventions there
163:51 - and
163:53 - let's call this invoice list
163:57 - title and let's go ahead and
164:02 - um as we go along add it to our i18n
164:05 - file
164:10 - and let's give that a let's just
164:13 - make sure we know what we're referencing
164:15 - here
164:17 - invoice list
164:21 - inv oh i i apologize
164:25 - and this is just going to have a title
164:28 - of in
164:29 - voices brilliant
164:32 - so let's close that
164:35 - and now if we go back um
164:39 - to our attributes let's give this
164:43 - a margin class
164:46 - of sap ui
164:51 - responsive margin
164:54 - which i use quite a lot actually
164:57 - responsive margin yes that's correct
165:02 - we will set the width
165:05 - to auto working in tandem with the
165:09 - responsive stuff here
165:12 - now comes the aggregation binding part
165:15 - and all we do is we call items so the
165:18 - items in your list
165:19 - this could be a different attribute
165:22 - depending on what
165:24 - control you're using this particular
165:26 - control uses
165:28 - items so again read your documentation
165:30 - but
165:31 - the items are going to be from our model
165:35 - and we're going to reference our model
165:40 - invoice slash
165:43 - invoices
165:49 - and so what that's doing is our
165:52 - invoice model which is um
165:55 - available here because we put it
165:58 - together
165:59 - in our manifest.json file
166:03 - and
166:07 - we're calling the invoices
166:10 - um which are over here so the invoices
166:14 - are is the is the um the json
166:18 - object effectively and inside of that is
166:21 - all of these aggregated
166:22 - items which we're then going to display
166:25 - so
166:25 - that's how we reference it there
166:29 - now once we're finished with that
166:32 - let's just close off our list here
166:38 - we now want to decide how we want to
166:39 - display those items
166:42 - and to do that again referencing the
166:44 - documentation
166:46 - we have an items control
166:50 - and let's just close that off
166:55 - and inside the items control we have
166:57 - something called an
166:58 - object list item and so um
167:01 - let's just put it in and i'll explain
167:04 - shortly
167:04 - object list item
167:11 - and we're going to give that a title
167:16 - and that's going to be invoice
167:23 - quantity
167:30 - and oops
167:34 - invoice oh sorry i'm uh
167:39 - referencing that so now we're chaining
167:41 - these two together invoice
167:45 - product name
167:52 - so what we're doing is now that we have
167:54 - our items available
167:56 - we want to display them in the item
167:58 - section
167:59 - as an object list item and the title
168:02 - is going to be a combination of the
168:04 - invoice quantity
168:06 - and the invoice product name so
168:10 - go ahead and save that and that'll make
168:12 - much sense when we actually see
168:15 - when we actually see the output
168:19 - so now that we have this let's go ahead
168:21 - and put it in our
168:22 - app dot our app xml view here
168:27 - so here's the first one we called
168:31 - and you guessed it we're going to call
168:33 - the other one in the exact same way
168:36 - mvc
168:40 - xml view
168:45 - and the view name
168:49 - is going to equal sap dot ui
168:53 - dot demo dot walk through
168:57 - dot view dot invoice list
169:03 - in voice list
169:07 - close that off
169:13 - and now let's go ahead and test it
169:19 - refresh all right
169:23 - it looks like we've run into an issue so
169:25 - let's press f12 to get into the console
169:30 - um nothing particularly clear
169:33 - here so let's go back and check
169:37 - what we've got so
169:41 - let's have a look object list item
169:45 - invoice quan
169:47 - there's a spelling mistake excuse me
169:50 - quantity
169:51 - quant it yep that's correct
169:55 - but i don't think i don't think that was
169:58 - the issue let's check our manifest
170:03 - ah needed to add a comma
170:08 - between the section and the section i
170:11 - apologies
170:13 - so that should fix it let's refresh
170:19 - no looks like we have an issue with our
170:22 - xml
170:23 - in our app view so let's take a look
170:26 - there
170:30 - view name aha
170:33 - quotation mark is in the wrong spot
170:37 - let's save that pretty sure this will
170:41 - work
170:41 - now and there you go so
170:45 - um here's your list of invoices
170:48 - all laid out nice and neatly here this
170:50 - is the
170:51 - quantity and the name with a little x
170:53 - there
170:54 - just as we defined in
170:57 - our view
171:02 - so the next section um we're going to
171:05 - move on to is
171:06 - number 21 and that's data types
171:09 - and here what we're going to do is add
171:11 - on
171:12 - um a currency
171:15 - value and pull it directly from our
171:18 - model
171:19 - and so if you had to look in the
171:23 - json format you'll see that the
171:26 - quantity and price is in this sort of
171:28 - very simple
171:30 - standard format what sap allows you to
171:32 - do is to set
171:33 - um these as currency values um based on
171:36 - locales and and that sort of thing
171:38 - so we're going to go ahead and apply
171:40 - those uh that formatting and those data
171:43 - types
171:44 - on top of the json model values we've
171:47 - got here
171:49 - so the first thing we need to do is we
171:52 - need to find
171:53 - our invoice list view and
171:56 - what we're going to do here is we're
171:57 - going to attach this to a controller
172:00 - which we'll create shortly
172:02 - so we're going to specify the
172:05 - controller name
172:09 - and that will equal sap.ui.demo.walk
172:16 - uh walk through
172:20 - dot controller
172:24 - dot in voice list
172:29 - brilliant so we've referenced that so
172:32 - let's go ahead and
172:34 - just create an empty controller for now
172:39 - um dot js
172:43 - lovely so we'll get back to that in a
172:44 - second
172:47 - now in our object list item
172:52 - where we had our title specified
172:55 - we are now going to add or
172:59 - we're going to include one of the
173:01 - attributes which is specific to the
173:02 - object list item
173:04 - the number and once we're there we're
173:08 - going to add
173:08 - the data type and formatting so
173:14 - we're going to start off with the parts
173:16 - attribute
173:19 - and in here we're going to specify the
173:23 - path
173:25 - to the value that we want to deal with
173:28 - so
173:29 - there's two important points here the
173:30 - first one is we're going to
173:34 - grab the the invoice
173:38 - extended price
173:43 - and then once we've got that
173:46 - we're going to add the currency but in
173:49 - order to do that we need to add a
173:51 - currency model to our um
173:54 - view and to our controller itself so
173:58 - we're going to do that shortly in the
173:59 - controller but just so you know where
174:00 - it's coming from
174:03 - it's not coming from the json model
174:06 - itself
174:07 - the invoice json model rather
174:10 - so it's coming from view
174:15 - currency
174:18 - and that all looks fine
174:21 - then we're going to tell it what type so
174:24 - the data type and again you can check
174:26 - the documentation for what
174:28 - types data types you have we're
174:30 - specifically going to use the currency
174:32 - data type
174:33 - from scepter.guide.model and
174:36 - so whoops
174:40 - let's just specify it like this
174:46 - sap.ui.model.type.com currency
174:50 - and we're going to add some formatting
174:53 - options so
174:54 - format options
174:57 - and we're going to show we're going to
175:00 - tell it not to show the measure
175:02 - which is fine
175:05 - false and
175:09 - um that's all good so
175:12 - we have that there that's right and
175:16 - the number unit
175:19 - is going to be the uh
175:23 - currency symbol itself which comes from
175:27 - whoops to reference this
175:30 - correctly view
175:33 - currency all right
175:36 - so now that we've set the formatting for
175:39 - the
175:40 - number and the number unit
175:43 - which are all attributes of the object
175:45 - list item
175:47 - let's go ahead and jump into our newly
175:50 - created
175:52 - invoicelist.js controller
175:55 - just like all the others sap dot
175:58 - ui dot define
176:03 - and we're gonna pass in the two modules
176:05 - the first one is controller and the
176:07 - other one is json
176:08 - the json model so sap dot
176:12 - uh slash ui slash core slash
176:15 - mvc slash controller
176:22 - and the second one is the sap slash ui
176:26 - slash
176:26 - model slash json slash
176:30 - json model
176:34 - brilliant then we open up our
176:38 - function and we add in
176:42 - the controller oops
176:49 - and the json model
176:55 - and once we're inside here we're going
176:57 - to use
176:58 - strict strict javascript checks
177:03 - and we want to return just like all the
177:06 - other controllers
177:07 - return controller dot extend
177:11 - referencing this particular controller
177:19 - sap.ui.demo.walkthrough.controller for
177:20 - the controller folder
177:23 - and invoice list
177:27 - and now that we have that
177:31 - we can go ahead and add the on init
177:34 - event
177:37 - um we want at that event we want to call
177:40 - a function
177:41 - and in this function we want to create a
177:44 - new json model uh with the currency and
177:48 - the euro
177:49 - for example attached to it and then we
177:51 - want to set it to the model
177:53 - so that um we're able to call it
177:56 - at this point that's why we're creating
178:00 - that's effectively why we're creating it
178:02 - so create a variable called ou
178:06 - model
178:10 - that's going to be a new json model
178:16 - and that has one um
178:20 - value called currency
178:24 - euro because why not
178:29 - you can obviously add any value you want
178:32 - and once we've got our model
178:35 - we're going to say this dot get view dot
178:39 - set model
178:42 - and we're going to say overview model
178:44 - and we're going to give it a simple to
178:46 - an easy to read alias that we'll
178:48 - remember just called view
178:50 - so again setting your model and then
178:53 - giving it an alias so you can refer
178:55 - to it using this alias in your view
178:58 - which we've done
178:59 - here is our alias
179:03 - so let's save that save that
179:08 - perfect now
179:12 - let's go ahead and check
179:16 - ctrl a5
179:20 - all right let's take a look and see what
179:23 - the issue is
179:26 - um failed to load
179:30 - invoice.controller.js from
179:33 - ah it's a naming issue
179:37 - so what i've gone and done
179:40 - is i haven't called this
179:43 - using the correct naming convention it's
179:45 - actually invoicelist
179:47 - dot controller
179:51 - dot js that's very important
179:54 - and while we're here let's just double
179:56 - check our controller is actually
179:58 - um functioning properly so function
180:01 - controller json model
180:03 - return controller dot okay another
180:06 - spelling mistake
180:08 - that's extend except.you ought to demo
180:11 - that walkthrough controller invoice list
180:14 - fine our models there
180:17 - this.getview aha
180:20 - missing the brackets very important
180:24 - so let's go ahead and save that and
180:27 - re-run
180:28 - that should probably fix it let's see if
180:31 - anything else comes up
180:33 - no let's check again what's gone wrong
180:37 - and caught in promise something's gone
180:40 - wrong in the xml
180:43 - so let's check
180:47 - so object list item title aha
180:54 - it's supposed to close off the xml
180:55 - control over there
180:58 - again silly mistakes but they will come
181:01 - up quite often
181:03 - so now let's go ahead and refresh again
181:06 - and there we are it finally works so now
181:08 - we have our
181:10 - 87 10 6.85 and then from the other model
181:14 - we created in the newly created
181:16 - controller which we needed to rename
181:19 - properly with controller init
181:20 - in the name we've added on the euro
181:24 - so there your prices are
181:30 - now we're going to move on to section or
181:33 - step 22
181:35 - expression binding now expression
181:37 - binding is incredibly useful
181:40 - for adding little
181:44 - components of logic to your various
181:47 - attributes in your
181:49 - xml in your ui5 controls
181:52 - to determine whether or not something
181:55 - needs to happen so
181:56 - in this example we're going to take the
181:59 - um
182:00 - we're going to take the object list item
182:03 - and attach an expression that says
182:06 - if the number is the extended price is
182:10 - greater than 50
182:13 - give us a number state of error
182:17 - or give us another state of success
182:19 - depending on the outcome and
182:20 - that attribute error or success will
182:23 - determine whether or not the number
182:24 - state is green or red
182:26 - and consequently whether or not the
182:28 - actual number in the output is green or
182:30 - red
182:31 - so um it's quite straightforward and
182:35 - very useful once you get
182:36 - going and again you can apply this to
182:39 - pretty much any attribute you have
182:44 - obviously within reason so um and again
182:47 - check the documentation on expression
182:48 - binding but once you
182:50 - once you understand it it's fairly
182:51 - straightforward so
182:54 - we are going to open up with an equals
182:57 - dollar sign
183:02 - and the dollar sign is going to be used
183:04 - to reference the
183:06 - invoice extended
183:10 - price item or value
183:14 - then we're going to use shorthand in
183:17 - javascript to say
183:19 - if this value here
183:22 - is greater than 50
183:26 - uh question mark
183:30 - in quotations error so
183:33 - if this evaluates to greater than
183:37 - 50 set this as set the
183:40 - value of number state so if this
183:44 - runs as it is error
183:47 - will basically be the value of number
183:49 - state
183:50 - which is what the attribute would be
183:52 - expecting as one of its
183:54 - possible values
183:57 - or if not
184:00 - if the extended price is less than 50
184:04 - the value of number state must be
184:07 - success
184:08 - and in doing so it will be green
184:12 - so this is specific to this object list
184:14 - item but obviously
184:16 - you could just change these values
184:17 - depending on the control
184:19 - that you're using so
184:22 - if invoice extended price is greater
184:26 - than 50 um evaluate
184:30 - if true error or put the
184:33 - value put the text error in number stage
184:37 - or if it's false put success
184:41 - in number state so if we save and
184:44 - take a look at our code again i mean
184:46 - take a look at our app again
184:48 - refresh
184:52 - okay we've run to a small issue
184:57 - number state ah
185:01 - there's my spelling again something you
185:03 - will probably come up with
185:04 - quite often so we've
185:08 - spelt that correctly hopefully now if we
185:10 - save it
185:12 - and refresh
185:16 - there you go above 50 evaluate to error
185:19 - and error means it needs to be red
185:22 - that's the number state and green if
185:25 - it's
185:26 - um evaluates to false and is less than
185:28 - 50.
185:29 - there you go
185:36 - now what we're going to do is we're
185:38 - going to add something called a custom
185:40 - formatter and a custom formatter is just
185:44 - a javascript file that handles slightly
185:47 - more complex
185:49 - formatting options so what we're going
185:51 - to do is we're going to add
185:53 - underneath each of underneath the euros
185:56 - symbol here we're going to add the
185:59 - invoice status
186:01 - and we're going to format it accordingly
186:04 - so let's go ahead and create
186:08 - our actual new formatter
186:12 - and so what we're going to do is we're
186:14 - going to create
186:15 - a new folder and a web app
186:19 - called model um and normally you would
186:22 - have a model folder
186:24 - but in this case we don't so we're gonna
186:27 - we're just going we're just going ahead
186:29 - and creating it um once you've got your
186:31 - folder
186:32 - you then add a file called
186:36 - formatter.js
186:39 - and uh just like your controllers um
186:42 - when you want to pull in this particular
186:44 - object you
186:46 - oops you open it up with sap dot ui
186:50 - doctor
186:54 - phone
186:57 - and we're just going to run straight
186:59 - into our
187:01 - function
187:06 - and don't forget to use strict
187:13 - and we are going to return we're just
187:15 - going to simply return
187:18 - our logic here and so
187:23 - um the s we're going to obviously um
187:27 - status text we're going to deal with the
187:30 - status text in this particular part of
187:33 - the formatter
187:35 - so we're going to run our function with
187:38 - s status passing in the status
187:41 - um into the formatter itself
187:46 - then um we need to get
187:50 - the resource but so again we're
187:53 - referencing the resource bundle
187:55 - because um this is the um where we're
187:58 - going to reference the actual invoice
188:00 - status and
188:00 - so we can translate it etc etc so
188:04 - resource bundle
188:07 - and that's equals this dot get
188:11 - view dot get
188:15 - model and we're getting our i18n model
188:21 - dot get resource
188:24 - bundle
188:30 - now that we have that whoops i just need
188:33 - to
188:34 - close that off and get rid of this
188:37 - now that we have that we're going to use
188:39 - a javascript switch status
188:45 - oh sorry a javascript switch
188:48 - statement rather for the status
188:52 - and we're going to pass in the status we
188:55 - brought in
188:57 - and we're going to start off with
189:00 - case hey
189:07 - and we're going to return
189:10 - resource bundle dot
189:13 - get text
189:17 - invoice status
189:20 - hey so we're going to pull that back in
189:26 - then we're going to i'm just going to
189:29 - actually i'm going to
189:30 - rather type it out because we're not
189:33 - wanting to make any more mistakes
189:35 - case b
189:38 - return resource bundle dot
189:42 - get text
189:49 - invoice oops
189:52 - invoice status
189:57 - b
190:02 - and case c
190:12 - return resource bundle
190:16 - dot get text
190:20 - invoice status c
190:25 - and closing that off with default
190:32 - return
190:36 - a status
190:39 - brilliant so let's just format that
190:43 - lovely so case a give us back this from
190:46 - the i18n file case b
190:49 - status b kc status c if it doesn't fit
190:52 - any of these
190:53 - just simply return the status
190:56 - so now that that's done we need to go
190:59 - into our
190:59 - invoice list controller so we can
191:03 - get rid of all of this stuff
191:07 - and here's our invoice list controller
191:10 - now we need to bring in our formatter
191:13 - and to do that we reference the
191:16 - model
191:20 - formatter
191:23 - and we just go ahead
191:27 - and add that in there
191:31 - and above the on init function
191:34 - we just simply pop in our formatter
191:39 - and reference the formatter
191:45 - perfect so we've now got the formatter
191:49 - available making the formatter available
191:52 - through our controller to the view
191:55 - now let's go and find our invoice list
191:58 - view
191:58 - so we don't need component hello
192:00 - dialogue
192:02 - with our view invoice list view
192:07 - good stuff and again
192:10 - we're adding this in the object list
192:12 - item
192:15 - and we're adding a control called first
192:18 - status also from the sap.m library
192:23 - and we can close that off
192:30 - status
192:33 - and we're going to add another control
192:36 - of the control within called object
192:41 - status and that's going to have
192:45 - an attribute of text equals
192:50 - and now
192:53 - this is where we add our logic so i'm
192:56 - closing that off just to make sure
192:59 - now here we're going to specify the path
193:06 - and the path is invoice
193:11 - status so that is the
193:15 - uh where's our invoice list
193:18 - view
193:21 - so here's our status this is what we're
193:23 - referring to with a b and c
193:26 - um so that comes out of there
193:31 - and once we have that we
193:34 - obviously call our formatter
193:39 - and that's the formatter and
193:42 - the formatter obviously has
193:45 - the status text and that
193:48 - is what we are going to reference
193:52 - uh where's my view over here so
193:54 - formatter the formatter
193:57 - object itself and the method here or
194:01 - event
194:02 - and we can close that off
194:06 - save so we've got our first status
194:10 - control here with an
194:11 - object status here the text that it's
194:14 - going to show
194:16 - is going to come from the invoice model
194:20 - and specifically the status field
194:23 - and the format we want to use is located
194:26 - here
194:27 - and that's the method we're going to
194:29 - call inside of it
194:31 - and now that we have that
194:34 - let's go ahead and jump into our i18n
194:37 - file
194:39 - and we are going to
194:43 - just go back to the
194:47 - uh with the formatter we're just going
194:50 - to take these
194:54 - and
194:54 - [Music]
194:58 - add b and c
195:01 - equals so invoice status a it's going to
195:05 - equal new
195:06 - invoice status b is going to equal in
195:09 - progress
195:10 - and invoice status c is going to equal
195:13 - done so we should see these
195:18 - in our front end application so let us
195:21 - go
195:21 - and have a look and we go ahead and
195:25 - refresh
195:28 - all right so we've popped another error
195:30 - out
195:31 - let's have a look at the console
195:35 - all right it seems to be an issue in our
195:37 - javascript file
195:39 - so let's go and have a look at that
195:45 - so we've got our first status here
195:46 - that's fine that's all closed or aha
195:50 - so if you look at the object list item
195:53 - it runs all the way through to here but
195:55 - because we're now adding in
195:57 - another separate control
196:00 - we need to
196:04 - close that off like that
196:08 - and we need to wrap it up
196:13 - in a full object list item
196:18 - so instead of the control running all
196:20 - the way to this point
196:23 - because we've now added a separate set
196:25 - of aggregated controls here
196:28 - we have to close it off properly just
196:29 - like we would normally
196:33 - now that should fix things let's have a
196:36 - look control f5
196:39 - all right it looks like we've got
196:41 - another issue so let's check the console
196:45 - and it looks like a spelling mistake
196:50 - so let's go back to the code
196:55 - and have a look here
196:58 - with our formatter
197:04 - there we are let's just double check
197:07 - resource bundle resource bundle
197:09 - that looks fine so let's go back and
197:13 - check
197:14 - ctrl f5
197:17 - there we go working now so there's new
197:21 - in progress in progress and done all of
197:24 - our status is loaded here
197:26 - and run through a separate javascript
197:28 - formatter
197:34 - in the next section section 24 or step
197:37 - 24
197:38 - we are going to look at filtering and
197:41 - we're going to look at an example of
197:43 - filtering
197:44 - uh through a search bar a text search
197:46 - bar
197:47 - and so what we're going to do is we're
197:48 - going to add the search bar
197:50 - inside the um or just above the
197:54 - list of invoices and then we're going to
197:56 - run
197:57 - a event on the search attribute
198:00 - um and in the invoice list controller
198:05 - we're going to add the filter there and
198:08 - apply it
198:09 - so let's go ahead and head
198:13 - back let's just close some of these tabs
198:17 - getting a bit cluttered
198:21 - and let's go ahead and open up our
198:24 - invoice list
198:25 - view
198:30 - and in here we are going to
198:33 - first of all find
198:37 - our list and we need to give it an id
198:42 - and we'll just call it invoice list
198:48 - and now that we have that we are going
198:50 - to add
198:51 - a control called a header toolbar
198:55 - and again from the sap.m library we can
198:58 - just go ahead and add it so it's called
199:01 - header toolbar
199:07 - and let's close that off
199:16 - now that we have our header toolbar we
199:19 - need to add
199:20 - another control underneath it called the
199:23 - toolbar
199:27 - and close that off
199:34 - and within the toolbar we are going to
199:36 - add
199:37 - three controls a title a toolbar spacer
199:42 - and a search field so we'll have our
199:43 - title spacer
199:45 - and the search field on the right hand
199:47 - side so
199:49 - let's go ahead and add our title
199:52 - and give it the text
199:55 - again from the i18n file
199:59 - invoice list title
200:06 - and let's just double check that that is
200:10 - in our i18n
200:12 - file yes there it is there
200:16 - so that is fine
200:20 - we can go ahead and close that off let's
200:23 - add our toolbar
200:26 - spacer
200:29 - perfect just to close that off
200:32 - and now let's add our search field
200:39 - with a width of 50 50
200:42 - should be fine
200:46 - and now we need to
200:49 - uh in the search attribute so or search
200:52 - event rather we need to
200:55 - call our on
200:59 - filter invoices
201:02 - event
201:07 - and let's head on over to
201:11 - our controller which is where this will
201:13 - be triggered
201:14 - so in our invoice list controller
201:20 - we're going to need to bring in two more
201:23 - modules
201:24 - the first one is the sap slash ui
201:28 - model slash filter
201:32 - and also from
201:35 - sap slash ui slash model
201:40 - filter except we're going to bring in
201:43 - the filter operator
201:44 - as well operate all
201:48 - yes then let's bring it into our
201:50 - constructive function
202:03 - perfect and now that we have that
202:07 - uh let's go ahead so here's our on init
202:09 - event
202:12 - and we're going to run uh this on filter
202:16 - invoices
202:17 - event afterwards on
202:21 - filter invoices
202:26 - and that's going to be a function and
202:28 - now we're passing the event so we're
202:30 - going to pull
202:30 - some data from the actual
202:33 - event that is getting triggered
202:37 - and that'll make sense in a minute so
202:41 - we need to first first build the filter
202:43 - array
202:44 - and and what that means is
202:48 - we need to build um a filter based
202:52 - on whatever query has come out of that
202:55 - search bar
202:55 - so whatever person types in the search
202:57 - bar needs to be
202:59 - put into a filter query and then applied
203:01 - to
203:02 - the model itself so we start off with
203:05 - oops start off with a
203:09 - variable called a filter
203:13 - and that's blank
203:17 - then we need to create our query
203:25 - and now we're referencing our event
203:28 - and we're getting a parameter
203:35 - from the query
203:42 - so we're getting the param the parameter
203:45 - the query parameter itself and then we
203:49 - say if
203:51 - yes query so if there is something in
203:53 - the query
203:56 - a filter dot
203:59 - push so standard vanilla javascript push
204:02 - a method here
204:04 - new filter
204:08 - and in this filter so now this is the
204:11 - the sap part
204:13 - the filter we're going to call product
204:17 - name so we're telling it the product
204:18 - name is what we want to filter
204:21 - then the next thing is to say the filter
204:25 - operator
204:29 - dot contains so now
204:33 - the filter operator contains is saying
204:36 - it must contain
204:38 - the values that we've now that whatever
204:41 - they've typed in the
204:43 - search bar itself and we're passing in
204:46 - the
204:52 - query
204:54 - perfect and now
204:57 - we need to do our filter binding
205:03 - so we create our first variable which is
205:05 - the list
205:07 - and we get reference to this by this
205:11 - by i d
205:14 - in voice list
205:21 - then we need to get
205:24 - a reference to the binding itself so
205:26 - whatever is bound to this list
205:28 - i.e the model and so we'll call this o
205:31 - binding
205:32 - equals o list dot get
205:36 - binding items
205:39 - i remember the when we bound the model
205:42 - to this list
205:43 - it was bound in the items section or
205:47 - attribute
205:48 - and so we get a reference to that
205:50 - binding
205:52 - and what we do then is say o binding
205:58 - filter
206:02 - and we pass in the filter
206:06 - and it's as easy as that so um we
206:10 - create our filter over here and we push
206:13 - the query
206:14 - into the filter itself so now this af
206:17 - this a
206:17 - filter has the filter that says the
206:20 - product name
206:21 - must contain whatever is in the search
206:24 - bar
206:25 - we then get our list we get whatever is
206:27 - bound to the list
206:28 - in this case the invoice model and we
206:31 - tell it
206:33 - binding filter according to this filter
206:38 - and if we go ahead and save
206:41 - both of these and refresh
206:47 - we should now be able to type something
206:49 - like
206:52 - pineapple and
206:55 - it filters based on p-i-n-e
206:58 - and if we had to remove that let's try
207:00 - milk
207:02 - and otherwise there you go there's your
207:04 - filtering
207:09 - so now following on from the previous
207:11 - step filtering
207:13 - we're now going to look at sorting and
207:15 - grouping
207:16 - and we're going to do that in
207:20 - the invoice list view itself so we're
207:23 - going to
207:24 - sort it and then eventually group it but
207:26 - we'll sort it first
207:28 - and all you do is you find in the items
207:32 - attribute we add a little bit more logic
207:35 - here
207:36 - to allow it to do that so the first
207:38 - thing is we need to specify the path
207:43 - and that's obviously our
207:47 - model here and the invoices inside that
207:51 - then we need to add a sorter
207:55 - and inside the sorter we reference a
207:58 - path
207:58 - to whichever column we want to sort in
208:01 - this case
208:02 - the product name for example but you can
208:05 - sort by any column
208:08 - and let's just open that up
208:12 - and save that and it's as easy as that
208:16 - so we've got the item path
208:18 - we've got the sorter we're telling it
208:20 - what to sort by product name column
208:23 - and if we go ahead and save
208:28 - refresh our page
208:32 - you can see red c
208:35 - m p s all sorted
208:39 - and to group it we are going to go back
208:42 - to the code
208:44 - and let's change this to
208:49 - shipper name comma
208:54 - group attribute and we set it to true
208:57 - it's as straightforward as that so if we
209:00 - go ahead and save
209:02 - and let's pull up the application
209:05 - refresh
209:07 - there you go sorted
209:12 - and grouped by shipper name
209:18 - right so in this section step 26
209:22 - we're going to look at a configuring a
209:24 - remote odata service
209:26 - um but because we're running on our
209:28 - local machine
209:30 - we are going to configure it and run it
209:32 - to an era called a cause area or
209:34 - cross-origin
209:35 - resource scripting something along those
209:37 - lines
209:39 - and it's just something that comes with
209:41 - local development in ui5
209:44 - and you wouldn't normally run into this
209:46 - issue in something like sap cloud
209:48 - platform because you would configure
209:50 - your
209:50 - remote edit remote odata service in a
209:54 - destination inside cloud platform and
209:56 - then reference that from your app
209:58 - so if you're working in the web ide
210:00 - that's fine you can go ahead and
210:02 - create your destination and connect it
210:03 - if you know how to do that
210:05 - that's out of the scope of this
210:07 - particular course so
210:09 - um we are just simply i'm just simply
210:11 - going to show you how to do it
210:13 - and run through the steps so you can see
210:14 - how it's done
210:16 - and then we're going to move on to step
210:18 - 27 where we'll configure
210:20 - a mock server which is
210:23 - a bit more complicated but it's the best
210:25 - practice and also it's a great way to
210:28 - help you understand help you to
210:31 - understand your back end service better
210:32 - and
210:33 - prepare your app etc without also
210:34 - without putting any
210:37 - additional resources on top of your
210:39 - current live
210:41 - remote service that you might be using
210:44 - so let's go ahead
210:45 - and jump into the code
210:48 - now inside the manifest there are two
210:50 - things we'll need to do
210:51 - first one is set our data source and the
210:54 - second one is
210:55 - create the model using the data source
210:58 - so
210:59 - we're under sap.app and under data
211:02 - sources we're going to call this
211:06 - invoice remote the uri
211:09 - would be whichever url you have for your
211:12 - remote
211:13 - data service in this case we are going
211:15 - to pull the
211:16 - um the northwind
211:19 - service which is in the i'm just going
211:21 - to copy it across from the sap
211:23 - walkthrough
211:24 - which is where you can find it then you
211:26 - would need to add
211:28 - another attribute called
211:31 - type and
211:34 - it is an o data type
211:38 - then under settings
211:43 - we're just going to go ahead and add the
211:45 - oh
211:46 - data version
211:51 - and the version is 2.0
211:55 - and now that we have that um
211:58 - we can then take this data source and
212:00 - build a model on top of it
212:02 - under the sap ui5 section
212:05 - under models where we've got our a i18n
212:08 - model
212:08 - and also our local model which we'll
212:10 - replace and then put back
212:13 - so we can delete that and we just call
212:17 - the data source
212:20 - attribute
212:25 - and it's as straightforward as that
212:29 - so if we save and we go back to our
212:32 - application and refresh
212:34 - obviously it's going to fall over and if
212:37 - we go to the console by pressing f12
212:40 - you can see here is this cause error
212:42 - that i was referring to
212:44 - um so this will come up on your block if
212:46 - you're obviously building this on your
212:47 - local machine
212:50 - so you the um you can on the
212:53 - sap walkthrough step 26 page
212:58 - it gives you ways to overcome this
212:59 - that's out of the scope for this course
213:01 - because
213:02 - at the end of the day we want to run
213:04 - with our mock server
213:05 - and build our app based on that so for
213:09 - now we're going to ignore it please feel
213:10 - free to go ahead and use it if you want
213:12 - otherwise next we're going to move on to
213:15 - creating a mock server
213:20 - right so now what we're going to do is
213:23 - we are going to move on to
213:24 - step 27 where we will configure our mock
213:28 - server
213:29 - and all mock server is is a little bit
213:32 - of javascript
213:33 - and we would run a instead of running
213:36 - our index.html file we would run a mock
213:39 - server.html file
213:41 - with a few minor tweaks and it's just a
213:44 - case of taking
213:46 - for example our invoice json data which
213:49 - we'll actually remove from here in place
213:52 - in a another folder and we'll just
213:55 - reference the same data but in a
213:58 - running actual mock server to
214:01 - to sort of simulate a proper back-end
214:04 - service
214:05 - and so obviously this is sap best best
214:08 - practice and
214:09 - it's highly recommended to do it this
214:11 - way so you can run your
214:12 - stuff locally without touching any data
214:16 - or having to rely on a remote service as
214:18 - well which
214:19 - could be an issue at times so
214:23 - let's go ahead and jump straight in and
214:26 - create
214:27 - our indexed html well our mock server
214:30 - html file
214:31 - to do that um we're going to create a
214:34 - we're going to add to our folder
214:35 - structure
214:36 - and doing so we'll clearly separate
214:39 - the testing logic from everything else
214:43 - and this might look quite complicated as
214:45 - we go along don't worry
214:46 - follow along as best you can get it
214:48 - working and then after that go back and
214:50 - check and see how things work and
214:52 - connect and and how they run through the
214:54 - different steps
214:56 - so just bear with me in terms of the
214:58 - complexity at this point it's very much
215:00 - worth it once you
215:01 - once you get going so under the web app
215:03 - folder we're going to create
215:05 - another folder called test and within
215:08 - test we are going to add our
215:10 - mock server
215:14 - dot html and we are going to find our
215:19 - index.html and we are going to literally
215:21 - just copy
215:23 - all the data across for now
215:27 - then once we have that we can start
215:29 - making our changes and distinguishing it
215:31 - from the
215:32 - the actual index.html file
215:35 - we'll add something like uh sap a ui5
215:39 - walkthrough test page
215:41 - uh then we just need to adjust our
215:44 - folder structure
215:45 - um our root folder structure here and
215:48 - then we just need to change
215:50 - uh the module here to be
215:53 - sap slash ui slash
215:57 - demo slash walk through
216:00 - slash test slash init
216:04 - mock server so this will be our
216:07 - javascript file where we'll
216:09 - um start our process uh which will make
216:13 - sense in a minute
216:14 - so now that that's all done our htr
216:18 - mock server html page is complete
216:21 - now under the same test folder we're
216:24 - going to create another file
216:26 - called you heard it init mock
216:30 - server dot js
216:33 - which is what we're referencing from the
216:34 - html file
216:36 - and in here we are going to call sap ui
216:39 - define
216:42 - and we are going to call um
216:46 - a another module or file from
216:50 - our local servers folder which we're
216:52 - going to create in a second
216:57 - local service mock
217:00 - server and once we're in there we're
217:04 - going to open up our
217:06 - function
217:10 - and we're going to pass this
217:14 - in
217:18 - and now that we're in our function as
217:19 - always we need to use
217:21 - strict for our javascript
217:27 - and now we're going to
217:30 - initialize uh the mox server
217:36 - and we're going to do that by calling
217:38 - mock
217:39 - server up here
217:42 - mock server dot in it
217:48 - and then we are going to in
217:52 - initialize the embedded
217:56 - component on the html
218:02 - page which will make sense in a minute
218:04 - and that we run through
218:06 - just like we did before pulling in our
218:08 - component
218:09 - zap dot ui dot require
218:15 - sap slash ui slash call
218:18 - slash component
218:21 - support so now we want to make sure our
218:25 - component runs
218:26 - properly um
218:29 - then we are going to move on
218:32 - from here now that that is complete
218:35 - underneath web app we're going to create
218:37 - another new folder
218:39 - and create our local service so we
218:41 - create a folder called
218:42 - local service
218:46 - and under there we want to first of all
218:49 - add our mock data which is the
218:51 - json data that we've been using for the
218:54 - invoices
218:55 - so we're going to create another folder
218:57 - called mock
218:59 - data and under here
219:03 - we're going to create a folder i mean a
219:05 - file called invoices
219:07 - dot json and
219:11 - we're going to pull everything from here
219:14 - put it there and that means we can go
219:17 - ahead and delete our invoices.json file
219:19 - there because we're going to be pulling
219:20 - it from here
219:21 - inside of a box server so we can go
219:24 - ahead and save that
219:28 - then underneath local service again we
219:31 - need to
219:32 - create a another file called r
219:36 - metadata dot
219:39 - xml file and this
219:42 - metadata file is it's going to look
219:46 - quite complex and i'm effectively going
219:48 - to just copy it
219:49 - straight across all this is
219:52 - is deciding the skeleton or the shell of
219:55 - your data so
219:56 - um this because we're running a mock
219:59 - server
220:00 - this sort of information is now required
220:03 - to build
220:04 - the um the json model output
220:08 - and so you'll see things like your keys
220:10 - the different property attributes
220:13 - i'm not going to go through too much
220:14 - detail here you can have a look and
220:16 - understand how it works um
220:18 - and it'll eventually make sense but it's
220:22 - effectively just your
220:23 - your skeleton your metadata skeleton so
220:26 - that can sit there and that's all fine
220:29 - now again under local service we're
220:32 - going to create
220:33 - another file called mock
220:37 - server dot js
220:40 - and again this mock server js dot js
220:43 - is what's coming into our initialize
220:46 - javascript section here
220:51 - so now now that we're in our
220:53 - mockserver.js file
220:55 - we can open up our sept.ui.define
221:01 - and we need to bring in uh two modules
221:04 - uh the first one being sap slash ui
221:07 - core slash util slash
221:11 - mock server
221:16 - and the next one is sap slash
221:19 - base slash util
221:24 - slash u r i
221:28 - parameters
221:32 - and then we need to open up our function
221:36 - bring in those two modules here
221:45 - and open up our function and as always
221:49 - use strict
221:54 - perfect and now we want to return
222:00 - and inside our return or what we're
222:02 - going to return rather
222:03 - is our init
222:07 - and we're going to open up our function
222:12 - and now we are going to
222:16 - create our mock server and we're going
222:19 - to create a variable called o
222:21 - mock server
222:24 - and that equals a new mox server
222:30 - and the root
222:34 - uri is going to be the
222:38 - northwind url
222:41 - so this is almost like our pretend url
222:44 - that we're going to call
222:46 - and this is just referencing how we
222:47 - would normally
222:49 - create our service but then obviously we
222:52 - will actually reference
222:53 - our um our mock server data instead so
222:57 - um that's all fine there
223:02 - then we need to create another variable
223:04 - called uri
223:07 - parameters and
223:11 - this is going to be a new uri
223:15 - parameters and we're going to pass in
223:17 - our window
223:18 - dot location
223:23 - href brilliant now we're going to
223:26 - configure the mock server
223:28 - with a slight delay configure
223:32 - mock server with
223:35 - a delay and so we call
223:39 - mock server dot config
223:42 - oops dot config
223:48 - and inside here we call
223:51 - auto respond oops
223:56 - auto respond
224:01 - true and then we call
224:05 - auto respond after
224:09 - autorespond after
224:12 - and we call o uri parameters
224:17 - dot get
224:20 - server delay to actually add our delay
224:23 - in
224:25 - and we put that at 500
224:29 - i think it's milliseconds whatever the
224:31 - case may be
224:33 - then we are going to simulate things
224:37 - so from here we need to collect we need
224:40 - to grab our path rather so if
224:42 - s path
224:46 - our variable s path equals
224:50 - local service
224:54 - so this is the path to our local service
224:57 - folder
224:58 - and then we call o mock
225:02 - server dot simulate
225:08 - and we pass in the
225:12 - s path
225:15 - plus the path to our
225:19 - metadata.xml and then we
225:22 - also give it the s oops the s
225:25 - path plus the pathway to our mock data
225:32 - mock data
225:38 - and then from there we go ahead and
225:41 - start
225:41 - our mock server
225:47 - omar server dot start
225:54 - and that's it we go ahead and save
225:57 - and now we can go ahead and test uh it
226:00 - seems to not be
226:01 - working ah because we're still calling
226:04 - our original
226:05 - index.html file ah no
226:08 - so uh because it's located within the
226:11 - test folder again
226:12 - this is why it's important to separate
226:14 - your test logic from your
226:16 - um your sort of normal app itself
226:20 - is it's here and it's in here so it's
226:23 - quite hard to get to which means you
226:24 - have to purposely go
226:26 - to it and test it and obviously when you
226:29 - run your app normally it's an index.html
226:32 - file so
226:33 - if we click on that
226:36 - here we go it's working so now our
226:39 - localhost structure changes where we
226:42 - follow the test folder and we call the
226:45 - moxserver.html file and it's clearly
226:47 - separated from our
226:48 - index.html file which is
226:51 - best practice so there we are we are now
226:54 - running
226:55 - a mock server
227:01 - right so now we're going to move on to
227:04 - step
227:04 - 28 or section 28 um and that is unit
227:08 - testing
227:09 - with something called cue unit now so
227:12 - far
227:13 - we've added quite a bit of functionality
227:16 - and we probably should have been testing
227:18 - it or creating tests
227:19 - for each bit of functionality as we've
227:21 - gone along we haven't done that
227:23 - um but um
227:26 - that is something that um is best
227:29 - practice
227:29 - in pretty much every production app
227:33 - out there so um we're going to go
227:36 - through it
227:37 - and in this example we are going to go
227:39 - through
227:41 - a q-unit unit test
227:45 - specifically for our
227:48 - statuses so if you look at the
227:53 - statuses here we're just going to run
227:55 - through
227:56 - a quick unit test for them
228:00 - i'm not going to go into too much detail
228:02 - because
228:03 - um there is a whole section dedicated to
228:06 - this
228:07 - and it's a little out of scope for this
228:08 - at this point so i'm
228:10 - literally going to copy and paste the
228:13 - code across and just explain things very
228:14 - briefly
228:16 - but this this is will need its own
228:19 - dedicated section so we're not going to
228:21 - worry about it too much
228:22 - at this point so the first thing we need
228:26 - to do is
228:28 - we need to create a
228:32 - a unit test to physically run through so
228:34 - we're going to create a
228:36 - javascript file so underneath our
228:40 - test folder we're going to create a new
228:43 - folder called
228:44 - unit then under unit we're going to
228:47 - create a new folder called
228:49 - model and in our model folder we're
228:52 - going to create a formatter
228:55 - dot js file which is going to house all
228:58 - of our actual
228:59 - test testing logic as it were
229:03 - so i'm just going to copy this all
229:05 - across
229:08 - and so um there's a few bits and pieces
229:11 - that
229:12 - are quite important but effectively
229:15 - um all that's going to happen is
229:18 - it's going to run the tests based on
229:21 - these parameters and all that it's going
229:25 - to do is return
229:27 - whether these are correct or not as it
229:29 - passes as it receives it back from the
229:31 - resource bundle
229:33 - and where it does that so let's just go
229:35 - ahead and save that
229:37 - where it does that is from a unit test
229:40 - html
229:40 - page which we're going to create now
229:44 - so now that we now we have the logic for
229:47 - our
229:47 - unit test we go back under the unit
229:50 - folder
229:52 - and we create something called a unit
229:54 - tests
229:56 - dot q unit dot html
230:00 - and this html page is going to be the
230:04 - sort of front end of our
230:08 - unit test so we've got a few scripts
230:11 - here
230:13 - that will make sense in a minute but
230:17 - otherwise the html page is
230:18 - fairly standard
230:22 - what is going to make sense now
230:27 - is this so we need to
230:31 - basically create the javascript file for
230:33 - this html
230:34 - and that's going to be also under the
230:37 - unit
230:38 - folder and this is obviously going to be
230:40 - called unittests.quit.js
230:46 - and in here we're actually going to run
230:49 - the call
230:50 - for our full test so um
230:53 - it's going to basically bring in the
230:56 - formatter
230:57 - test here that we've got here and it's
231:00 - it's going to run the key unit test so
231:03 - um
231:04 - again lots of detail here yeah it's it's
231:06 - uh needs to have its own
231:07 - section for running for the test but
231:10 - i'll let you guys read through this in
231:11 - your own time
231:12 - um but for the most part all we would
231:15 - need to do now
231:18 - is go to our app and under test
231:22 - and then we will go under unit
231:25 - and we would run the unit test cue unit
231:28 - html
231:30 - and you'll this is the page that you'll
231:32 - get back so this is the html formatting
231:34 - that you would have seen
231:36 - and here is each of our individual tests
231:40 - returning back um
231:43 - essentially what we were looking for so
231:45 - um again
231:46 - a more detailed section uh will be
231:49 - coming soon but for now this is the
231:51 - sort of basics you have an html page
231:53 - that runs off
231:55 - um that runs this little javascript file
231:59 - which eventually runs the actual unit
232:02 - tests
232:02 - in this file
232:08 - so now we're going to move on to section
232:10 - or step 29
232:12 - integration testing with opa um
232:15 - so just like we did with the q unit
232:17 - testing sap
232:18 - has something called opa-5 which you can
232:22 - use for your integration testing and
232:24 - sort of seeing
232:25 - how things interact in the front end and
232:28 - the example we're going to run through
232:29 - in this section is seeing if our little
232:33 - hello world dialog opens when we click
232:36 - it we know it does but we want the test
232:37 - to run that as well
232:40 - so just like the test before in step 20
232:45 - 28 i'm just going to copy and paste the
232:48 - code
232:49 - and sort of talk you through it purely
232:51 - because these
232:53 - into the integration testing just like
232:54 - unit testing has its own
232:56 - full section to go through um and can
232:58 - get quite detailed so
233:00 - we're not going to get too bogged down
233:01 - with it now because we just want to get
233:02 - our app working
233:03 - once it's working and running and we've
233:05 - been through this
233:07 - we can then go back and work on unit
233:09 - testing and integration testing
233:12 - so
233:15 - we yup so we're going to test
233:18 - the hello world dialogue and to do that
233:22 - we need to go back to our test folder
233:24 - and we need to create a new folder
233:26 - called
233:27 - integration
233:30 - and in the integration folder
233:33 - we need to create something called a
233:35 - navigation journey which will make sense
233:37 - in a minute
233:38 - so navigation
233:42 - journey dot js
233:46 - and i'm just gonna like i said bring the
233:48 - code straight across
233:49 - from the sap walkthrough
233:53 - so all that happens is
233:56 - we have a bunch of boilerplate code up
234:00 - here
234:01 - and we have some actions and these
234:03 - actions
234:05 - are basically going to simulate what
234:07 - happens in this case
234:10 - what happens when we click the dialog
234:12 - button and what should happen
234:16 - so this will make sense now when we call
234:18 - it from the
234:19 - next section so now
234:23 - we need to create a new folder
234:25 - underneath integration
234:28 - called pages and under here
234:32 - we're going to create a new file called
234:33 - app dot js
234:40 - and in this file we are going to
234:46 - copy in the code and all that's
234:49 - happening here
234:50 - is um when we describe our actual
234:53 - actions
234:54 - um it's it's just returning
234:58 - the dialogue effectively returning what
235:02 - happens when you
235:03 - click the dialog button and determining
235:05 - what is
235:07 - a success and there you can see we're
235:09 - asserting again just like we did with
235:11 - the unit tests
235:13 - i mean and then obviously our error
235:14 - messages whether or not the dialogue
235:16 - control
235:16 - was um anything happened in terms of the
235:20 - dialogue control opening or not
235:22 - um so again quite a lot of detail here
235:25 - for a separate section
235:26 - but this is roughly um sort of what it's
235:29 - doing
235:30 - now we need to create our html page and
235:34 - our our backup javascript file so
235:37 - underneath the integration folder again
235:40 - we're going to create an opa
235:42 - tests dot q unit
235:46 - dot html page and again
235:49 - copying across fairly standard
235:54 - html
235:56 - again this is going to bring up a
235:57 - similar page to the
235:59 - unit test before obviously oops
236:04 - obviously designed for the unit test
236:07 - itself
236:08 - and now we need to create one more file
236:11 - underneath integration and that
236:14 - is going to be our opa
236:18 - tests dot q unit.js
236:22 - and in here we're just going to start
236:24 - our unit test
236:26 - which is going to run those other two
236:27 - javascript files
236:29 - and obviously it's going to run that
236:31 - navigation journey
236:34 - which is basically
236:37 - this process and this process is going
236:40 - to run
236:41 - and call stuff from our app.js file here
236:44 - which is going to
236:45 - physically run the actual integration
236:48 - testing and decide what happens when
236:50 - it's
236:50 - what items are returned if it returns or
236:52 - doesn't
236:53 - give us an error message etc so
236:57 - we can go ahead and save all of these
237:03 - oh i've made a spelling mistake my
237:06 - apologies it's opa
237:09 - save that so
237:12 - let's go ahead and run the test
237:16 - so we can hop out of here
237:24 - and instead of a unit test we go under
237:26 - our integration test folder
237:28 - and just like we did before we call our
237:30 - html file
237:35 - and we let it run and the test came back
237:37 - the dialogue opened
237:39 - brilliant test passed
237:44 - so now in section or step 30
237:47 - we are going to look at the debugging
237:50 - tools
237:51 - that sap have have created for ui5
237:55 - specifically and they
237:59 - are pretty fantastic because as far as
238:01 - debugging goes um
238:02 - it can be pretty painful um almost like
238:05 - looking for a needle in a haystack so
238:08 - to have good solid tools to back you up
238:11 - can be really helpful so again in this
238:14 - section it's hard to go into detail
238:15 - because
238:16 - um you can have a million bugs and those
238:19 - bugs can
238:20 - look and feel completely different for
238:23 - different people
238:24 - um it also comes down to your experience
238:27 - with whether you find bugs quickly or
238:29 - not
238:30 - so i'm just going to run through
238:34 - a i'm going to break a simple
238:37 - item you can see it's already broken
238:39 - here
238:41 - but i'm going to go ahead and break it
238:42 - with you so
238:44 - we're going to remove this 10 euros here
238:48 - and we're gonna do it like this
238:52 - so we're just going to change that so
238:54 - it's not extended price
238:56 - it's it's a typical spelling mistake so
239:00 - um now if we go and refresh the app just
239:03 - like it did before
239:05 - the price has gone so this is very
239:08 - common and something that could come up
239:10 - so um to bring up the developer tools
239:13 - in in chrome you would need to install
239:15 - them so you can find them from the
239:16 - uh the chrome um add-on store
239:20 - um and again all of these will be linked
239:22 - in the walkthrough itself
239:24 - um the sap walkthrough under the the
239:26 - step 30 so that's fine
239:28 - i've already got it installed so it's
239:31 - ctrl alt
239:32 - shift s and you get these
239:36 - tools that pop up and there's a whole
239:38 - bunch of stuff here
239:40 - you get technical information you have
239:42 - your control tree
239:44 - um different debugging
239:47 - parameters here a javascript trace if
239:49 - you want to run that
239:52 - you can run performance testing and all
239:53 - sorts of stuff so
239:55 - there's a lot to do here um but i mean
239:58 - if you wanted to use it
240:00 - in this case to fix this issue for
240:02 - example
240:04 - we can look through our control tree and
240:07 - we can come and look
240:08 - for our ob so obviously we're in our xml
240:11 - view
240:12 - and we've found our object list item and
240:15 - you can see
240:16 - we have um obviously a whole
240:19 - stack of information here in this case
240:22 - we would check our bindings to see what
240:24 - the problem is
240:25 - and we can see here's quantity here's
240:29 - product
240:29 - name and then if you look at extended
240:33 - price
240:34 - you can see the absolute path doesn't
240:38 - match
240:39 - product name and quantity for example so
240:42 - if i just
240:43 - oops if i just expand this
240:46 - you can see the absolute path looks like
240:50 - this
240:51 - same for product name here it's invalid
240:54 - because we haven't spelt it correctly so
240:56 - i mean this is something you could
240:58 - quickly scan through to see if you've
241:00 - if uh you know as a quick debugging
241:02 - process so now
241:04 - if we go back to the code
241:09 - and we found it we change it back
241:13 - and we go ahead and refresh
241:18 - there it's fixed and if we refresh
241:23 - okay we'll need to so you'll need to
241:25 - rerun this again
241:26 - ctrl alt shift s
241:30 - and under the control tree back to
241:34 - object list item
241:35 - binding info
241:38 - and you can see the extended price now
241:41 - has its absolute path
241:43 - so very powerful debugging tool from sap
241:47 - that you can use to hopefully help you
241:49 - in your
241:50 - any future debugging
241:55 - right so in this section section 31 or
241:59 - step 21
242:00 - we are going to move on to the
242:02 - beginnings of
242:03 - routing and navigation and what we're
242:06 - going to do in this step
242:07 - is we're going to take our example and
242:10 - we're going to add the functionality
242:12 - that says when we click on an item
242:14 - navigate
242:15 - to a new page um and that comes with
242:18 - a um a bit of config here and there
242:22 - um including creating a new view um
242:26 - which is going to reuse our current
242:28 - controller
242:30 - and we're going to extend some of the
242:31 - logic there as well
242:33 - so um we're now getting into the
242:36 - nitty-gritty of what it means to have
242:39 - a sort of master detail style app
242:42 - but the detail is now sitting in a a new
242:45 - page or a new view so let's go ahead and
242:48 - build it
242:50 - and the first thing we need to do is
242:52 - jump into the code
242:54 - and we need to look for our
242:56 - manifest.json file
242:58 - and in here we need to look for the sap
243:02 - ui5 section and under there
243:05 - we need to find our routing
243:09 - section and if you don't have it you'll
243:11 - need to add it
243:13 - and then here we're going to start with
243:15 - our global config
243:19 - and so we are running with three
243:23 - sections here so i'm just going to lay
243:24 - them out for you so
243:26 - they make sense we've got the
243:30 - global config we've got our roots
243:36 - and then we've got our targets
243:39 - and these will all make sense as we go
243:41 - along
243:43 - so for now let's start off with our
243:46 - global config
243:47 - and the following attributes uh need to
243:49 - be added the first one
243:51 - is we need to call our router class
243:54 - um and that's going to
243:58 - handle all the routing from sap side
244:04 - sap.m.routing.router
244:08 - then we need to tell it that the view
244:09 - type that we're going to be using
244:11 - is xml
244:14 - again sap based practice
244:20 - then we need to specify the view path
244:25 - oops
244:30 - and the view path is going to be sap dot
244:33 - ui dot
244:34 - demo dot walk through
244:37 - dot view that's for our view folder
244:41 - that's what we're specifying there then
244:44 - we need to
244:45 - tell it what control
244:50 - the id of our control um
244:53 - and that's going to be the app so
244:57 - the initial where is it here so this app
245:01 - view and app controller
245:03 - over here is going to be where we're
245:06 - going to control
245:07 - all of the routing but that'll make
245:09 - sense um
245:11 - in a minute and
245:14 - control
245:18 - aggregation
245:22 - and we're going to set that to pages
245:25 - and we want it to run asynchronously
245:29 - so we set that to true
245:33 - perfect now that we've said that
245:38 - we can then move on to defining our
245:42 - roots so within our roots
245:45 - let's just fix this these should be
245:48 - square brackets
245:52 - so within our roots we need to
245:56 - create our to patterns and um
246:00 - what that means is um when we so
246:03 - just add the first pattern here so the
246:06 - pattern
246:06 - is the um this after the slash of your
246:10 - original url
246:12 - um if it's if there's nothing there we
246:14 - wanted to go to our overview page but if
246:16 - there's something there like
246:19 - detail or something like that this is
246:21 - where we're going to
246:23 - specify that so here's obviously
246:26 - blank then we need to give it a name
246:32 - and that's going to be overview
246:39 - and um we need to obviously tell it a
246:42 - target
246:43 - which we'll specify in a minute
246:46 - the target will be the overview page
246:51 - perfect now we're going to go ahead and
246:54 - add the
246:55 - next pattern while we're here and that's
246:58 - going to be
247:02 - pattern detail
247:09 - and the name of that is going to be
247:12 - detail obviously
247:15 - and it's target you guessed it
247:20 - detail
247:24 - and we're going to specify our target
247:26 - below
247:29 - so now under our target section um
247:32 - we're going to add um our
247:36 - overview
247:39 - and inside our overview we're going to
247:41 - give it some attributes
247:43 - and the first one is the view id now
247:46 - we're starting to link it with the views
247:48 - themselves
247:49 - the view id which is overview which we
247:52 - haven't created yet but we will
247:55 - and the view name
248:00 - is of course overview of
248:04 - the view
248:08 - now that we have that we can
248:12 - add the detail target
248:15 - so detail open our object
248:19 - add the view id
248:24 - and it's going to be detailed
248:28 - because we're now dealing with the
248:29 - detail view
248:33 - then we need to add our view name
248:40 - and that's going to be detail just like
248:44 - above
248:45 - brilliant so we've now specified these
248:49 - three sections in our manifest
248:51 - specifying the roots where everything
248:53 - needs to go
248:54 - and each of the targets that these
248:57 - rooting patterns are referring to
249:01 - so now we need to go ahead and
249:05 - create the views based on the
249:09 - urls that we now specify and we need to
249:12 - now
249:12 - initialize the actual router that way
249:14 - that we've got so
249:16 - we can go ahead and save that then again
249:20 - back into our component file and
249:24 - just underneath the set dialog
249:28 - we are going to create
249:31 - the views
249:35 - based on the url or
249:38 - hash and all we're doing is calling this
249:41 - dot
249:42 - get router
249:45 - dot inish
249:49 - initialize with the zed
249:54 - and that'll initialize or create our
249:56 - router
249:57 - that's going to control all this stuff
250:00 - so
250:00 - um now we are going to go into
250:04 - our view folder and we are going to
250:08 - create a new view and it's going to be
250:11 - called
250:12 - you guessed it overview
250:15 - dot view dot xml
250:20 - and in here we're going to open up our
250:23 - mvc view tag
250:26 - we're going to specify the controller
250:28 - and this is where we're going to reuse
250:30 - the app controller itself
250:34 - controller name calls
250:45 - sap.ui.demo.walkthrough.controller.app
250:49 - and we're going to add in our xml ns
250:53 - bringing in our sap.m library
250:57 - and we need to bring in the mvc
250:59 - artifacts directly from sap
251:01 - xmlns giving it an alias again of um
251:06 - mvc and that's sap dot
251:11 - ui dot core dot mvc
251:16 - and we close that off and let's close
251:18 - off the entire view tag
251:20 - him oops mvc
251:26 - perfect now we are going to pull in
251:32 - from the acceptor dm library the page
251:34 - control
251:36 - giving it a title from the i18n file
251:40 - oops from the i
251:44 - 18n file and we'll call that the
251:48 - home page title
251:53 - and let's go and quickly add that to our
251:55 - i18n file
252:00 - and um
252:06 - oh i think we already have it are there
252:08 - we already have it perfect
252:10 - we're not going to worry about that then
252:11 - lovely
252:14 - um so now that we have that
252:17 - we can go ahead
252:23 - and close that off and we're going to
252:26 - add our next control
252:28 - the header content
252:35 - uh we must make sure we close off our
252:37 - page as well
252:41 - and close off our header content
252:46 - perfect whoops now within the head of
252:49 - content
252:50 - we're going to add a button
252:58 - and we're going to give that
253:02 - some attributes the first one is the
253:04 - icon
253:06 - and that's going to be the sap icon
253:12 - hello world whoops
253:18 - hello world
253:21 - and press equals
253:25 - on open dialogue
253:29 - perfect so we can close that off
253:34 - and our header content is done now we
253:37 - are going to add our nested views under
253:40 - the
253:40 - content section
253:43 - oops
253:49 - close that off close that off
253:52 - and so we call our mv c
253:58 - xml view oops
254:01 - watch my spelling xml view
254:04 - and the view name
254:08 - is going to be sap.ui.demo.walk
254:13 - through dot view for the view folder
254:19 - and our hello panel
254:23 - and close that off and
254:26 - next we are going to add the invoice
254:29 - list
254:30 - mvc xml
254:34 - view view name
254:37 - equals sav dot ui
254:41 - demo dot walk through
254:44 - dot view dot invoice
254:48 - list
254:53 - perfect now that we have that
254:57 - we can go ahead and
255:00 - adjust our app view so
255:04 - our app view is effectively going to be
255:06 - um cleaned out
255:08 - so all that's going to be left is just
255:11 - the app class
255:16 - um so it's going to look like this
255:21 - and we can actually
255:24 - just close it off like that right so now
255:27 - that's all nice and tidy
255:29 - just make sure we save that
255:32 - and then now we're going to add our
255:36 - detail view so this is going to be
255:40 - called
255:41 - detail dot view dot
255:44 - xml and in here we're going to open up
255:48 - mvc
255:51 - view with our attributes xml
255:55 - ns sap.m
255:59 - and the mvc stuff xml ns
256:04 - mvc oops
256:12 - ui dot core dot mvc
256:18 - lovely close that off
256:22 - mvc view
256:30 - and now we're going to open up our page
256:31 - control
256:34 - and add a title equals
256:40 - i18n and in the itunes we're going to
256:44 - call the
256:44 - detail page
256:48 - title let's go
256:52 - and add that to our i18n properties
256:55 - so detail
256:59 - page
257:02 - and we'll just call this walk whoops
257:06 - walk through details
257:10 - perfect so let's continue adding our
257:14 - attributes
257:15 - um oh no actually that's fine um
257:18 - within the page so
257:21 - close off our page
257:26 - and now we are going to add a object
257:29 - header
257:35 - and the object header is going to have a
257:37 - title
257:39 - of invoice
257:45 - perfect so all that's going to happen is
257:48 - when we go to our details page
257:50 - we are just going to see um the
257:53 - text invoice that's all that we're going
257:56 - to do in this step
257:58 - um now what we need to do
258:01 - is we need to open up our invoice list
258:04 - and in here we need to add a new
258:06 - attribute to object list item that says
258:08 - when it's clicked
258:10 - do something and we're going to do that
258:13 - underneath the number state attribute
258:18 - and all we're going to do is add
258:21 - the um
258:24 - type type
258:29 - equals navigation
258:33 - ah i just need to add that there
258:38 - and so we're saying it's a the type of
258:41 - the object list item is
258:42 - a navigation type so that you can click
258:45 - on it and then we're specifying the
258:47 - press event
258:50 - to equal onpress which will now add to
258:53 - the controller
258:56 - so now we need to go to our
258:59 - invoice list controller
259:03 - and in here we are going to add a
259:07 - new event so here's our on init event
259:11 - on filter invoices event and now
259:15 - on press event
259:18 - run a function passing in the event
259:21 - so when you click you get a bunch of
259:23 - details
259:25 - and sort of things you need from the
259:28 - event which you
259:29 - most of the most of the time you'll want
259:31 - to pass through into this function
259:33 - and so this is where you'll specify that
259:35 - and we just called it
259:37 - event you can call it whatever you want
259:39 - really
259:40 - and now we're going to create a variable
259:42 - for our
259:43 - router that's going to be
259:47 - sap.ui.core dot eui
259:52 - component dot get
259:56 - router for this
260:00 - which is our app context
260:04 - and all we're going to do now is tell it
260:07 - to
260:08 - nav to oops
260:13 - detail that's it
260:18 - so again it looks fairly complex but all
260:20 - we've done is we've added in
260:21 - simple steps to get us to a point where
260:24 - we just tell it to move um
260:26 - between the different targets and
260:28 - patterns and
260:29 - it's just a case of accessing the router
260:31 - itself
260:32 - which we've initialized before
260:36 - calling the router using this and then
260:38 - asking the router to navigate to our
260:40 - detail page
260:42 - so let's go ahead and test
260:46 - just make sure everything's saved
260:50 - and let's refresh
260:56 - right so uh this seems to be an issue
260:59 - let's take a look at the
261:00 - console
261:03 - um file not found
261:12 - seems to be an issue
261:15 - with our xml
261:19 - let's have a look at the appview.xml
261:25 - i don't know what happened here
261:30 - but let's put back our mvc
261:35 - view and close that off
261:40 - and oh it looks like i forgot to
261:43 - put the
261:44 - id here as well um
261:48 - that's quite important we need to give
261:50 - this an idea of app so it knows
261:52 - um its id effectively of the um
261:56 - this particular app section so let's
261:59 - save and
262:00 - um refresh and see
262:06 - right there we go it's a good start now
262:08 - let's click
262:10 - okay this still seems to be an
262:13 - issue let's check the console
262:17 - uncle type error cannot read property
262:18 - interplay of undefined
262:22 - hmm let's go back to the
262:25 - code um
262:29 - so this looks fine so there's probably
262:33 - an
262:33 - issue in the manifest i'm i'm guessing
262:37 - so we've got our config roots pattern
262:40 - name
262:41 - target
262:44 - another spelling mistake pattern
262:48 - i'm almost certain that's the issue
262:51 - let's refresh
262:56 - there we go again check your spelling
262:58 - every single time even though i'm
263:00 - retyping
263:01 - everything out out
263:04 - it's so easy to make mistakes so double
263:06 - check your stuff and again
263:07 - it's normally the small mistakes that
263:10 - break
263:11 - the worst when you're running through
263:12 - this because you wouldn't have even
263:13 - picked that up in the debugger
263:15 - um that was just pure pure spelling
263:18 - there so
263:19 - now you can see we've navigated to the
263:21 - invoice page and
263:22 - um we can start adding some details from
263:26 - here
263:28 - so now we are going to move on to
263:31 - section 32
263:33 - routing with parameters and what we're
263:36 - going to do is
263:37 - now that we're in this blank invoice
263:39 - page
263:41 - we want to display some actual
263:43 - information about the particular invoice
263:45 - that we clicked on
263:46 - and so we need to pass the context of
263:48 - that across
263:49 - and display it in something like an
263:51 - object list item
263:52 - or something like that so that is what
263:55 - we're going
263:56 - to do in this step we're now going to
263:57 - add some details
263:59 - to the detail page so let's go back to
264:03 - our code
264:05 - and the first thing we need to do is we
264:07 - need to find the um
264:10 - the roots in our manifest and we need to
264:13 - change the pattern
264:15 - and all we're going to do is we're going
264:16 - to add the invoice path
264:18 - to the pattern itself which will make
264:20 - sense
264:22 - shortly invoice
264:25 - path
264:28 - perfect so now that we have
264:31 - that we need to go ahead and create
264:35 - or add the details to our detail
264:39 - page so underneath our detail view the
264:42 - first thing we need to do is we need to
264:43 - add
264:44 - because now we need to apply some logic
264:47 - from the
264:48 - controller we're now going to add a
264:51 - reference
264:52 - to the detail controller so
264:56 - we reference the controller name and
264:58 - it's going to be sap.ui.demo
265:02 - dot walk through dot
265:06 - controller
265:09 - and detail for our detail controller in
265:12 - our controller
265:14 - folder now that we have that
265:18 - we want to add some more attributes to
265:22 - our
265:22 - object header um so we're not going to
265:25 - use an object list item we're just going
265:26 - to run it through the object header
265:30 - and so all that's going to happen
265:34 - is we are now going to reference um
265:39 - the um shipper name and product name and
265:42 - i'll show you where those come from now
265:44 - so we're just going to add the intro
265:46 - attribute here
265:48 - open up this and we're going to
265:50 - reference the invoice
265:52 - and from this particular invoice
265:55 - we're going to reference the shipper
266:00 - name
266:02 - and again from the invoice that we've
266:05 - clicked on
266:05 - we want to reference the product name
266:10 - perfect so we're going to see these two
266:12 - bits of information
266:13 - from the particular invoice that we
266:15 - clicked on
266:16 - so now that we've saved that
266:20 - we need to go to our controller folder
266:23 - and we need to create an invoice
266:28 - before we do that um before we clear
266:31 - create the detail controller
266:33 - um we need to go ahead and add the logic
266:37 - um or rather the path that needs to be
266:41 - passed across all the details that need
266:43 - to be passed across
266:45 - to the detail controller from the
266:47 - invoice
266:48 - list controller so if we go across here
266:52 - now this o event comes into place so as
266:55 - you
266:56 - press or click on the item it passes in
266:58 - the context with a whole bunch of
267:00 - details that we're going to use to now
267:01 - pass across
267:03 - so we're going to create a variable
267:04 - called o item
267:07 - and that's going to be o event dot
267:10 - get source so now we've got
267:14 - our source our item made up of the
267:17 - source from the event
267:20 - and then we need to now pass it across
267:23 - so
267:23 - we do that in the nav nav2 method here
267:27 - as we nav across to detail
267:30 - we open up
267:33 - over here and we say invoice
267:38 - path and we pull it from window
267:42 - and code uri
267:45 - component and we get that from
267:51 - oh item dot get binding
267:56 - context so we're getting the binding
267:58 - context
268:02 - and that's going to be called invoice
268:06 - or from invoice rather and we get the
268:09 - path
268:13 - and we want the sub string
268:20 - one
268:22 - perfect so we're now riding on the
268:25 - invoice path here
268:27 - and we're passing in binding context
268:30 - and we're getting all of our details
268:32 - from here which we're now
268:34 - going to consume from the other
268:36 - controller if that makes sense
268:38 - so now we can go to the controller
268:40 - folder again and create our detail
268:42 - controller
268:46 - [Music]
268:48 - detail.controller.js
268:51 - and now that we're in here sap.ui.define
268:59 - and we need to pull in our controller
269:01 - module and
269:02 - also our ui component so as always sap
269:08 - slash ui slash call slash
269:11 - mvc slash controller
269:17 - and we're going to pass in the ui
269:19 - component as well
269:21 - oops sap
269:25 - slash ui core slash
269:29 - ui component
269:33 - and we open up our function here
269:38 - passing in the controller
269:43 - and the ui component
269:48 - and i forgot the comma there
269:53 - perfect as always use
269:58 - strict and now
270:00 - again we are going to return the
270:03 - controller
270:06 - and that's extending
270:11 - this controller dot demo dot walk
270:16 - through dot controller
270:19 - dot detail whoops
270:22 - do not spell it in correctly detail
270:26 - and now that we're in here we can go
270:29 - ahead and add our controller functions
270:31 - first one being on init
270:35 - so when we initialize
270:40 - function
270:43 - and now that we're in here um
270:47 - we need to create a router variable
270:50 - var router
270:55 - equals sap dot ui dot core
271:00 - dot ui component
271:03 - dot get
271:06 - root term for passing in the
271:11 - application context
271:15 - and then we need to call router
271:19 - dot get whoops
271:23 - get root
271:26 - and we need the root for detail
271:30 - and now we're going to
271:33 - attach pattern
271:36 - matched and we're passing in this
271:41 - dot on object
271:47 - on object matched
271:51 - this perfect
271:55 - so this that'll make sense in a minute
271:58 - but in the meantime
271:59 - let's just add in our private method
272:04 - here
272:06 - and that's function oh event
272:12 - this dot get view
272:18 - dot bind
272:21 - oops bind element
272:28 - and the path is set to
272:34 - base path plus window
272:37 - dot decode uri
272:41 - component so don't worry if this looks
272:45 - complicated it will make sense when we
272:47 - read it back
272:48 - now events dot
272:51 - get parameter
273:00 - arguments
273:02 - dot invoice
273:05 - path
273:11 - and then we set the model as
273:15 - invoice so it
273:18 - looks very complicated and it kind of is
273:21 - um to a certain extent but all we're
273:23 - doing
273:24 - um in this section is we're just
273:28 - receiving the context from the um
273:31 - the previous from the on click event
273:34 - of that particular item
273:38 - and we're setting it over here and all
273:40 - that's happening is we're allowing
273:42 - we're sort of preparing it for our view
273:44 - to be able to um
273:46 - bind we have an aggregate have the
273:48 - aggregated binding attached to it so
273:50 - um it looks complicated but as you read
273:53 - through
273:54 - um it makes sense things like window
273:57 - decode uri component etc
273:59 - these are just parameters that you pass
274:01 - into this method so
274:02 - again it's all documented and all that
274:04 - sort of thing so if you really want to
274:05 - understand the detail you can go ahead
274:07 - and read up on it but
274:09 - for the most part it's it just does what
274:12 - it needs to do
274:13 - so now that we've got that
274:17 - we can go ahead and test so everything
274:19 - is saved
274:21 - let's refresh our app
274:25 - oh let's just go back there
274:29 - let that run
274:34 - right so it doesn't seem to be working
274:38 - um and if we look into the console
274:41 - we don't see anything so let's see how
274:44 - the binding is
274:47 - so let's run into our control tree
274:51 - and let's have a look at the details um
274:56 - right so there's nothing bound so
274:59 - perhaps there's something wrong in the
275:00 - xml
275:02 - let's go back and look at the code this
275:06 - all looks fine this controller was fine
275:11 - let's see if you see control
275:16 - spelling mistake again
275:19 - controller name sept.ui.demo to
275:22 - walkthrough controller
275:24 - detail
275:28 - right let's go back and refresh
275:33 - fingers crossed there we go it works
275:36 - again spelling mistakes but
275:40 - there you go here are your two details
275:43 - on your
275:43 - detail page
275:48 - right now that brings us into um
275:51 - section or step 33 routing back and
275:55 - history
275:56 - so um there's currently no way to
275:59 - or no button that says when you click
276:02 - here go back to the original page we
276:04 - have to use
276:05 - the back arrow in chrome so we're going
276:07 - to go ahead and add a back button and
276:09 - the logic that surrounds that
276:12 - so let's go back to
276:15 - our code and let's close everything here
276:21 - and the first thing we need to do is we
276:22 - need to open up our detail view
276:25 - and we need to add or show rather a nav
276:28 - button so
276:29 - in your page your page control has a
276:32 - attribute called
276:33 - show oops
276:37 - show nav button
276:43 - and we're going to set that to true
276:47 - and nav we need to add the nav button
276:50 - press
276:52 - event and that's going to equal
276:55 - on nav
276:58 - back right
277:01 - now let's go to our detail controller
277:05 - and add the logic to make that back
277:08 - button work
277:10 - so underneath the detail controller
277:14 - uh now that we're here um we can go
277:17 - ahead
277:18 - and create a new method and
277:21 - all new event rather nav
277:26 - back
277:28 - open up our function now we need to
277:32 - grab a few variables the first one is o
277:34 - history
277:36 - and that comes from oh i almost forgot
277:39 - we need to add the modules first
277:41 - apologies so the module we need to add
277:45 - is sap slash
277:48 - ui slash call slash
277:52 - routing slash history
277:56 - and we need to slot that in
278:00 - here and now we can obviously access
278:03 - that so
278:04 - history
278:07 - dot get instance
278:12 - and then we need to get the previous
278:15 - hash
278:16 - so we create another variable called
278:19 - previous hash
278:23 - and from there we reference the o
278:24 - history
278:26 - variable we've got and get
278:30 - previous hash
278:36 - perfect
278:38 - now we add our if statement
278:41 - and what we're saying is if the previous
278:44 - back hash doesn't exist we're going to
278:48 - run and get the history
278:49 - from the window itself otherwise we're
278:51 - going to use the
278:53 - router and navigate back to overview so
278:55 - we're handling both
278:57 - circuit both scenarios so this
279:00 - previous hash
279:04 - is not equal to undefined
279:11 - so if the previous hash is found or
279:14 - exists
279:16 - we just call window dot
279:19 - history dot go
279:22 - minus one so we can just effectively
279:25 - go back one step that's all that's
279:28 - happening then we're calling it from
279:30 - the window here um else
279:34 - if that fails for whatever reason we're
279:37 - going to use
279:38 - our router and that's router equals
279:42 - ui component dot get
279:45 - rooter so we're just getting our router
279:48 - for
279:48 - our context which is why we add this
279:52 - because this references our context and
279:54 - all we do is call heruta.nav
279:58 - 2
280:01 - overview
280:05 - and set that as true so these are just
280:08 - parameters
280:09 - obviously remember we can pass
280:11 - parameters back and forth like we did
280:13 - with the
280:13 - when we went from the overview to the
280:15 - detail but we don't need to pass
280:17 - anything back because
280:18 - we're just going back to our overview
280:20 - page and
280:22 - that's it let's see if it works
280:26 - so we go back refresh
280:30 - let's follow our canned beans there's
280:33 - our back arrow
280:36 - there we go
280:41 - so now we're going to move on to step 34
280:44 - custom controls now custom controls are
280:47 - beyond the scope of this course
280:49 - um but because we're going through the
280:51 - walkthrough itself
280:53 - i'm just going to copy the code across
280:55 - and just briefly explain what's
280:56 - happening
280:57 - you can obviously go ahead and create
281:00 - any custom controls you want and explore
281:02 - the functionality there
281:04 - for us we're going to keep that for a
281:07 - separate video so
281:09 - what we're going to do is follow the
281:11 - walkthrough and
281:13 - when you click on an item it's going to
281:15 - have a star rating out of five
281:18 - so we're going to go ahead and just
281:20 - simply add that and get it to work
281:22 - so the first thing we need to do in our
281:24 - controller
281:26 - is create a product
281:29 - rating.js file which is going to handle
281:32 - all of our logic
281:35 - and we're going to
281:38 - throw in all of the custom code there's
281:40 - quite a lot of it
281:42 - um and we're just going to save so
281:46 - obviously
281:47 - there's quite a lot going on here but
281:50 - effectively we're just
281:51 - using the different controls in sap
281:54 - and sort of gluing them together um
281:57 - into sort of a a sort of
282:01 - star rating setup kind of thing
282:05 - and so once we've got this
282:08 - file here you can go through it but
282:10 - we're just going to move on from here
282:14 - we're going to go ahead and save it
282:17 - and now we need to move on to our detail
282:20 - view and we're going to bring in this
282:24 - new control
282:25 - and to do that we call the xmlns
282:30 - and we give it an alias of wt
282:33 - and we call it sap dot ui
282:37 - dot demo dot walk through
282:40 - dot control
282:44 - and we can save that
282:48 - and all we do is we pull in the
282:52 - product rating um
282:55 - control here
282:59 - and we slot it in just at the end of our
283:02 - page
283:03 - and we can just format that correctly so
283:06 - we've got a product rating with its id
283:09 - some class attributes and obviously the
283:13 - change the on rating change event so
283:15 - what happens when you change your rating
283:16 - etc
283:18 - and now we are going to create
283:22 - the controller or rather we're going to
283:25 - edit the controller for the detail page
283:30 - and we're going to edit the following
283:34 - we need to bring in the message
283:37 - toast
283:44 - module over here
283:47 - and we need to include that
283:52 - over here
283:56 - and now that we have this detail
284:01 - we need to push across so
284:04 - what's going to happen is the rating is
284:06 - going to reset in this case
284:09 - so we need to make sure that we
284:13 - reset that rating as we go back and
284:15 - forth so
284:16 - it'll make sense um once we're there
284:19 - but we just need to add it
284:23 - to this so we're calling this by id
284:26 - the rating which is the rating control
284:29 - and we just want to reset it so
284:30 - when we um initialize our app and our
284:34 - controller
284:35 - it's just going to reset the ratings
284:36 - because this is just a test
284:38 - sort of test scenario and then
284:42 - under the on nav back
284:46 - call we're going to add the on rating
284:49 - change
284:52 - get rid of that and so all this is doing
284:56 - is um it's just basically going to
285:00 - show us it's going to show us a message
285:02 - here um
285:04 - and it's just going to run through the
285:06 - logic of the custom control
285:10 - and now we're going to add some bits and
285:12 - pieces to our css
285:16 - and all we're doing
285:20 - is underneath here
285:25 - and this is just some standard css which
285:27 - we'll see
285:29 - in a few seconds and just save that
285:33 - and in the i18n properties we are going
285:36 - to
285:38 - add a few more things so the detail page
285:41 - is just going to get the rating
285:42 - confirmation
285:44 - call here to the i18n file and we're
285:47 - going to add the product rating details
285:50 - underneath perfect
285:54 - so let's have a look and see if it works
285:59 - refresh
286:03 - right so let's go ahead and click on one
286:06 - and it looks like we've run into an
286:08 - issue it's got the path here which is
286:11 - fine so let's check the console
286:15 - fail to load sample you to walk through
286:16 - control r
286:19 - i've put the j the um product rating js
286:23 - in the wrong folder
286:24 - so let's go ahead jump back to the code
286:28 - ah here it is so what i was supposed to
286:30 - do was
286:32 - under web app i was supposed to add a
286:34 - folder called control
286:36 - and this was meant to sit here
286:39 - that was the issue so if i refresh
286:45 - there you go so we can go back click on
286:48 - canned beans
286:49 - and we can rate it fantastic there's a
286:52 - little
286:54 - pop-up there so again all of this
286:57 - is handled in the product rating js
287:00 - controller
287:01 - i mean the product rating control
287:04 - javascript file here so you'll you can
287:07 - pretty much do anything you want if you
287:08 - find the standard controls
287:10 - are not good enough you can have a look
287:12 - through this and see the logic
287:14 - and see what happens um and you could
287:17 - pretty much build anything you want if
287:19 - you find the standard sap controls
287:21 - are not really enough for what you're
287:23 - trying to do in your project
287:29 - right now in step 35 we're going to look
287:33 - at the responsiveness of our app and so
287:36 - what we're going to do is we're going to
287:37 - use
287:38 - a standard sap m table control
287:41 - to turn or to make the app a little bit
287:45 - more
287:46 - responsive so that it can deal with
287:48 - different screen sizes
287:50 - and we're going to do that in the view
287:53 - so
287:53 - let's go back to our code and we need to
287:58 - go to our invoice
287:59 - list control uh invoice list view sorry
288:02 - so let's just get rid of all this stuff
288:08 - so underneath our
288:12 - invoice list view
288:16 - we are going to um
288:20 - instead of using a list we are going to
288:24 - use a table control which also comes
288:26 - from the sap dot em library
288:29 - and let's just close that off
288:36 - and once we have that
288:39 - we need to go ahead and add two sections
288:42 - to it so we're still going to keep our
288:45 - header toolbar and all of that plus
288:49 - we've got all of our attributes for the
288:50 - table
288:51 - including our aggregation data
288:53 - aggregation binding rather
288:55 - so underneath the header toolbar
288:59 - here we're going to add the columns
289:02 - section
289:03 - and here we're going to specify each
289:05 - individual column that we wanted to
289:08 - appear so
289:10 - [Music]
289:14 - let's open up that control there
289:17 - and underneath columns we have a column
289:20 - binding so we're going to have a few of
289:22 - these column bindings
289:30 - and under here we are going to have a
289:33 - few attributes
289:34 - so the first one is horizontal align
289:38 - equals end then we're going to have
289:42 - minimum
289:43 - screen width so we're specifying the
289:46 - absolute minimum screen width
289:48 - that this control can be viewed in
289:52 - and that's going to be small
289:56 - and the demand poppin
290:00 - is going to be set to true so we'll
290:04 - allow that
290:05 - width is going to be set
290:09 - at 4 e m
290:12 - so these are just sort of specifics that
290:14 - we're adding but you can obviously
290:15 - change these to see what happens
290:18 - and we can go ahead and close that off
290:21 - and we just need to close off our column
290:26 - section and now we are going to
290:29 - specify a text control
290:33 - and the text attribute for that
290:36 - is going to be from our i18n file
290:42 - and we're going to set that as column
290:45 - quantity
290:48 - and so we can go ahead and add that in
290:54 - to our file for now so let's actually
290:56 - just get that started
290:59 - so this will actually go under the
291:02 - invoice
291:02 - list here and this will be called
291:05 - quantity
291:11 - brilliant so now that we have this text
291:14 - control
291:15 - in here we can move on to the
291:18 - uh the next one so
291:22 - again specifying
291:25 - column closing that off
291:29 - oops column
291:36 - and um we're not going to
291:40 - worry about any attributes in this
291:43 - column we're just simply going to call
291:46 - our text we're going to simply add our
291:48 - text control again
291:51 - with the text attribute
291:55 - i 18n oops i
291:58 - 18n and this is going to be
292:02 - column name so
292:06 - oops let's just make sure we close that
292:08 - off
292:09 - and we can take that pop it into
292:12 - our i18n name
292:16 - perfect no
292:19 - there we are then
292:23 - we are going to add the column status so
292:26 - again opening up a new column
292:32 - and here we are going to specify the
292:35 - minimum screen width as well
292:39 - and screen width
292:42 - equals small
292:47 - and demand poppin
292:51 - equals true
292:59 - so again this demand poppin is just
293:01 - saying that if the column if it's too
293:02 - small for the column to appear
293:04 - it's going to allow you to basically
293:07 - choose to see it if you want to
293:11 - so that's obviously set to true you can
293:13 - also set that in the table control
293:15 - as well to apply to all columns but
293:17 - we're going to do it in
293:18 - for each specific column
293:21 - and we're just going to close that off
293:27 - oops
293:31 - and we're going to add our text control
293:35 - text attribute and
293:39 - again i 18n
293:43 - and this is going to be column status
293:48 - and we'll copy that that here
293:52 - equals status
293:56 - make sure we save as we go along
294:00 - and just close all our text control
294:02 - there
294:03 - now we're going to move on to the
294:04 - supplier column
294:10 - and again we are going to
294:14 - set the minimum screen width
294:20 - screen width
294:24 - equals and we're going to set this to
294:28 - tablet so the minimum screen with it
294:30 - will
294:31 - show on is up to tablet so on the phone
294:33 - it won't
294:34 - on a mobile device it won't um
294:37 - and the demand pop-in
294:41 - is going to be set to false so we're
294:44 - going to remove that functionality
294:48 - so we can go ahead and close that up
294:51 - close up our column
294:58 - and we can add our text control
295:01 - with the text attribute calling
295:06 - i 18n and
295:10 - column supplier
295:14 - copying that to i18n properties and
295:19 - setting that to supplier oops
295:26 - and let's go ahead and close that
295:31 - and now we're going to add the final
295:34 - price
295:35 - uh final column rather which is price
295:38 - column
295:42 - and um we're just going to etch a line
295:45 - or horizontal align to the
295:48 - end so it's going to sit on the right
295:52 - oops column
295:59 - and close that off
296:05 - and all we're going to do is add the
296:07 - final text control
296:09 - with the text attribute from our i18n
296:11 - file
296:14 - [Music]
296:17 - 18n and
296:20 - column
296:23 - price i just need to change that as well
296:28 - because i haven't spelt it correctly
296:31 - um so that's going to be column supplier
296:36 - and that's going to equal price
296:40 - perfect right
296:43 - so now we have all of our columns set
296:46 - with all their different attributes
296:48 - depending on screen size
296:51 - and whether or not we can actually open
296:53 - the column itself with the pop-in
296:55 - and everything's referenced in our i18n
296:57 - file now
296:59 - we need to sort out our items and to do
297:02 - that
297:03 - we need to call something
297:06 - that is known as the column list item
297:11 - column list item
297:15 - so we can actually basically get rid of
297:19 - most of this um
297:23 - and then let's just
297:26 - comment it out for now so we can refer
297:29 - back to it if we need to
297:32 - so under the column list item
297:36 - we're just putting in some attributes
297:38 - and the first one is it's going to be
297:40 - navigation so that we can
297:42 - click on it and we're going to do press
297:47 - and obviously that's the on press event
297:50 - just like we've used before and we're
297:53 - going to close that off
297:55 - no close it all far here
297:59 - and uh now that we've got that we
298:02 - should close it off underneath
298:13 - perfect and
298:16 - once we're in here we can then call
298:20 - the um
298:23 - the control called cells
298:27 - we're going to specify what we see
298:29 - within the cells themselves
298:35 - close that off lovely
298:39 - so now we're going to add all of the
298:41 - bits and pieces that we had before so
298:43 - the first thing is
298:45 - we're going to add the an object number
298:50 - uh we've got to open that up properly
298:51 - though
298:54 - and the object number is set with
298:58 - our i18n file
299:02 - and we're going to call the invoice
299:07 - quantity notice we're doing this in the
299:10 - order of the columns so the first one is
299:12 - the quantity
299:14 - and we're setting this as emphasized
299:18 - infer sized
299:22 - as false
299:27 - right now we're going to do the next
299:29 - column but the actual cells
299:31 - and this is going to be an object
299:36 - identify
299:39 - with the title attribute
299:43 - of um
299:47 - apologies this is not the i18n this is
299:49 - now from our model
299:50 - uh please ignore that that previous part
299:52 - this is actually from
299:55 - the model itself and
299:58 - we're calling it like that so from the
300:00 - invoice model
300:02 - pull the quantity field it's very
300:05 - important
300:06 - so now again we're going to call the
300:08 - invoice
300:11 - product name
300:15 - and we can close that off there
300:19 - and now we're going to open up a text
300:21 - control with the text attribute
300:31 - and under here we're going to put a
300:34 - path to our invoice status and we're
300:37 - going to add our formatter
300:38 - just like we did before so path
300:47 - and that comes from the invoice
300:52 - model and status
300:57 - and pulling in the
301:00 - whoops formatter
301:03 - and our formatter is located at
301:09 - at this part or this under this part of
301:11 - the folder structure
301:13 - and we're calling the method status
301:17 - text just like we did before
301:22 - and now that we have that text control
301:25 - we can go ahead and close that off
301:31 - and now we want the ship and name for
301:33 - the next column
301:34 - another text control text attribute
301:38 - and pulling it again from the model
301:41 - invoice model
301:45 - shipper shipper name
301:49 - close that off and now we are going to
301:53 - pull in the
301:55 - extended price so
301:59 - object number and again these are all
302:01 - just different controls
302:03 - which you can read the documentation on
302:05 - that you can use within the table itself
302:08 - object number and we put in the
302:13 - number
302:18 - and now we can specify the
302:21 - parts
302:24 - and in here we're going to reference the
302:28 - path
302:28 - to the uh so now we're bringing in the
302:32 - extended price but we're also bringing
302:34 - in
302:34 - the currency as well so that we can um
302:37 - apply the formatting to that
302:39 - so invoice
302:43 - extended price
302:47 - and now that we have that we can add
302:52 - the path to
302:57 - invoice i'll just close that off invoice
303:02 - and currency
303:06 - uh oh sorry uh so again i'm not pulling
303:09 - the
303:09 - currency from the um
303:13 - the invoice model in our controller
303:17 - for the invoice list we created a
303:20 - model there which is where we got our
303:22 - currency from
303:24 - so that comes from our view
303:28 - the view is the name of the model that
303:30 - we created
303:32 - and we're pulling in the currency
303:34 - brilliant
303:36 - so that's all there
303:39 - and now we're going to type it with our
303:43 - sap
303:44 - data type sap dot ui dot
303:48 - model dot type dot
303:51 - currency
303:56 - and we're going to include our format
303:58 - options
303:59 - so we've done this all before we're just
304:01 - redoing it for this particular table
304:03 - control
304:05 - and show measure is set to
304:08 - false so
304:11 - again we're running it all through
304:14 - this section so just like we did before
304:19 - and now that we have that object number
304:21 - here
304:22 - that's all sitting fine um
304:26 - now once we move past the
304:29 - show measure we can close off
304:33 - the format options
304:37 - and then
304:40 - we can go ahead and jump down to here
304:44 - where we'll add our unit
304:47 - and that will be
304:50 - from our view model that we created in
304:53 - our controller
304:55 - and adding in our currency
304:59 - and the state just like we did before
305:06 - is going to be um an expression bar
305:09 - and it's going to be determined using
305:12 - expression binding
305:14 - so that runs there and we use the dollar
305:17 - symbol
305:18 - to call the extended price from our
305:21 - invoice
305:23 - to be compared extended price
305:28 - and we're saying if it is greater than
305:30 - 50
305:32 - evaluate if true
305:36 - give it an error or make it red
305:39 - effectively
305:40 - and make it green with the success
305:44 - s-u-c-c-e-s-s perfect
305:48 - and we can close that off so
305:51 - you'll remember all of this complex
305:53 - logic was here an
305:54 - object list item and we no longer need
305:57 - that
305:58 - because we're now handling all of it in
306:01 - our table
306:03 - so table underneath the items we have a
306:05 - column list item in our cells
306:07 - all of our cells are here in the order
306:10 - that we placed
306:11 - our columns simple as that
306:14 - and save the r18n properties so
306:17 - now let's see if it worked
306:23 - refresh
306:27 - hmm so it still looks like we've got an
306:29 - issue
306:30 - let's have a look at the console
306:34 - right it seems to be an xml issue
306:38 - so we put out a lot of xml so there it
306:41 - probably is
306:42 - something wrong ah okay
306:45 - so it looks like this isn't closed off
306:48 - ah we haven't closed off our text
306:50 - control
306:52 - brilliant so let's double check our app
306:56 - again
306:59 - fantastic it's all working here
307:03 - but something's wrong with our supplier
307:07 - why is that not coming through so let's
307:09 - go ahead and check the code again
307:15 - and let's find um the
307:18 - shipper and see
307:22 - text invoice spelling mistake again
307:26 - supposed to be invoice shipper name so
307:29 - let's save that
307:30 - and have a look again
307:35 - there you are fantastic so now you can
307:38 - see
307:39 - everything's in a nice little neat table
307:41 - and if you were to test this on a tablet
307:43 - or mobile device
307:44 - you can see how things would change so
307:47 - if we had to press f12 and click on this
307:51 - toggle device toolbar and refresh
307:56 - you can see how it changes it
308:00 - and it the having it in this table
308:02 - control allows it to still be
308:04 - viewed but we only have certain columns
308:06 - available depending
308:07 - on the screen size so we can go ahead
308:10 - and close that
308:12 - and there you are
308:17 - now in this section step 36
308:20 - we're going to go through device
308:21 - adaption so we're going to adapt the ui
308:24 - based on the device that you have so in
308:26 - this example we're going to make the
308:28 - panel
308:29 - collapsible and we're also going to
308:33 - hide the button on certain devices
308:36 - the the hello world button
308:40 - so let's go ahead and dive straight
308:44 - in the first thing we need to do
308:47 - in our code is
308:50 - find the hello panel view no
308:53 - that's uh here we are
308:56 - hello panel view and in here
308:59 - we need to find our panel section
309:03 - and let's just tidy this up
309:09 - and what we're going to do is we're
309:11 - going to set
309:13 - two properties first of all we're going
309:16 - to set
309:17 - expand expandable
309:21 - and that we're going to sit based on our
309:24 - device
309:24 - model which we're going to create
309:26 - shortly
309:28 - and that's going to be
309:32 - system phone so the device model
309:35 - is going to house this variable here and
309:40 - of this field here rather and that's
309:43 - going to determine whether or not this
309:45 - is actually expandable
309:47 - and we're going to say expanded
309:52 - expand
309:55 - is going to equal um
310:00 - uh so we uh probably pulling in the
310:03 - expression binding here again
310:05 - and we're just saying that it's not the
310:08 - expanded
310:09 - is going to not equal whatever the value
310:12 - is
310:12 - um from the device model so
310:16 - um we now call dollar and we call
310:20 - device and
310:23 - whoops system slash phone
310:26 - so when we do this model it'll obviously
310:28 - make more sense
310:30 - so we've now set that up and now for the
310:33 - button
310:34 - we want to say only visible
310:38 - on desktop so all we do for that in the
310:40 - button is to add another class
310:42 - sap ui visible
310:48 - oops i've got to put it in quotes
310:53 - visible only
310:56 - only on desktop
311:00 - so we've got that class as well super
311:04 - so let's now dive into our component
311:07 - where we're going to create our
311:09 - device model um
311:12 - component now that we're in component
311:16 - we need to add the device model here and
311:19 - bring in the modules so
311:21 - that is going to come from sap slash ui
311:26 - device and we need to bring in the
311:31 - device model here
311:34 - and let's go ahead and set the device
311:36 - model
311:40 - over here so
311:43 - set device
311:48 - model and we're going to create a
311:49 - variable for
311:52 - the device model a device model
311:55 - and it's going to be equals new json
311:59 - model device which we've now pulled in
312:05 - and the oh device model
312:09 - uh we're going to obviously we need to
312:11 - set the binding
312:12 - it only needs to be one way bound which
312:14 - is fine set default
312:18 - set default binding
312:22 - and that's going to be set as one
312:26 - way
312:28 - and then this dot set model
312:34 - o device model and we'll give it an
312:38 - alias of device
312:42 - perfect so we've just now again set the
312:44 - model
312:45 - uh to our context
312:48 - and now we need to look at the
312:51 - save that first now we need to jump into
312:55 - our detail view
312:57 - so in our detail view here
313:02 - we need to find our object header
313:11 - and within the object header we are
313:14 - going to specify
313:16 - the responsive
313:20 - attribute and set that to true
313:23 - and we want full screen
313:28 - optimized
313:31 - equals true
313:35 - and now we are going to move a few
313:38 - things around
313:41 - and we are going to set the
313:50 - number um
313:53 - like this and we're going to set
313:57 - the paths so similar to how we did this
314:00 - in
314:00 - the overview page
314:06 - we're gonna set the path
314:10 - um and we're going to link that to our
314:13 - invoice
314:15 - model extended
314:21 - extended price
314:25 - and we want to pull in our currency just
314:27 - like we did before
314:29 - so we add in
314:32 - a path and
314:35 - from the same view model
314:38 - we pull in
314:41 - the currency
314:45 - and now that we have that we add the
314:48 - type and it's obviously a
314:50 - um a currency type so sap
314:54 - ui dot model
314:58 - dot type dot currency
315:04 - and adding an alpha oops format
315:07 - options
315:11 - we call show measure and set it to false
315:20 - and now that we have that we want to add
315:24 - the number unit
315:28 - and we set that again to the currency
315:31 - from our view model
315:38 - perfect so now that we have that
315:42 - we've got our number number unit intro
315:45 - and title
315:46 - now we are going to add some
315:50 - attributes so
315:54 - let's just open up our object header
315:57 - here first
315:59 - we'll close it rather object
316:03 - header now here we're going to add a
316:07 - new control called attributes
316:14 - and we're going to close that off
316:22 - and under here we're going to add some
316:25 - object attributes
316:27 - and the first one is object
316:31 - attribute and that's going to have a
316:35 - title of
316:39 - whoops put that in quotes
316:43 - of i 18 in
316:49 - quantity
316:52 - title and
316:56 - whoops quantity title
316:59 - so let's just take that
317:02 - and add it to our i18n properties
317:08 - equals one two oops
317:11 - q-u-a-n-t rty
317:15 - and back here we are going to say
317:20 - oh sorry that's the title and then this
317:22 - is the text attribute
317:24 - which is going to be from our invoice
317:28 - model the quantity
317:31 - itself quantity
317:36 - and we can um close that
317:39 - off and we just take this
317:46 - and close it off under here
317:50 - perfect and now
317:54 - we're going to add one more object
317:55 - attribute
318:00 - and give that a title
318:07 - for the date so i18
318:11 - in i18n
318:16 - date title
318:20 - and let's go put that in our i18n file
318:27 - set that to date save
318:31 - uh then we're going to add the text
318:34 - attribute
318:37 - which is going to be a formatted shipped
318:41 - shipped date and we're going to format
318:43 - it just like we did
318:44 - for our number here so that's going to
318:47 - look
318:48 - like this specify the
318:52 - path and it comes from
318:55 - invoice
318:59 - shift date
319:04 - and then we're going to specify the data
319:06 - type which is going to be
319:07 - date
319:10 - zap dot ui dot model
319:19 - and we're going to add some formatting
319:21 - options
319:24 - format options format options
319:30 - and under here we're going to say style
319:35 - long
319:39 - and the source is going to contain the
319:43 - pattern we want
319:45 - pat term and the pattern is going to be
319:49 - yoyo whoops
319:54 - dash month month dash
319:58 - date time
320:02 - hour hour and seconds
320:08 - perfect so
320:10 - [Music]
320:11 - that's fine close that off save
320:15 - so that is our attributes done so we've
320:17 - now added a bit more detail
320:20 - to our detail page now
320:24 - we need to jump into our detail
320:25 - controller
320:30 - and here detail controller and now we
320:34 - need to add the model
320:35 - just like we did for the other
320:36 - controller for the
320:39 - for the view where we add this view
320:41 - model with
320:42 - the euro currency in it
320:46 - so we're going to now add the module
320:49 - first
320:51 - sap slash ui model
320:55 - slash jason
320:58 - slash jason model
321:04 - and we're going to put that there jason
321:07 - model
321:08 - and now on the init function all we're
321:11 - going to do
321:12 - is create the model so var
321:16 - view will create a variable first for
321:18 - the
321:21 - overview model and that's going to equal
321:25 - a new
321:26 - json model
321:31 - and we're going to set an attribute to
321:33 - currency
321:37 - as euro
321:42 - now that we have that we're going to set
321:43 - the model to the view so this dot
321:46 - get view dot set
321:49 - model oh
321:53 - view model with an alias of view
321:56 - so we can pull that in and we can go
322:00 - ahead and save that
322:02 - and we've added in our
322:06 - 18n properties so
322:09 - this will actually be order date so we
322:12 - can save that
322:14 - so let's go and see if it works
322:21 - go ahead and refresh
322:29 - right it seems we've run into an issue
322:32 - which is fine let's see
322:34 - fail to load component for container
322:36 - reason o device model set default
322:38 - binding
322:38 - r this is mean to be set default binding
322:41 - model
322:41 - my apologies so if we go back to the
322:44 - code
322:45 - we need to jump into our component and
322:48 - where it says oh device model that's it
322:50 - default binding needs to be
322:53 - mode it's default binding mode which is
322:56 - one way
322:57 - so let's save refresh
323:05 - right it seems we've run into another
323:07 - issue so let's check the console again
323:12 - it is an xml issue in the hello panel
323:16 - so let's go and take a look at that
323:21 - uh the panel header text expanded
323:25 - there should probably be a space there
323:28 - um icon
323:32 - text press oops press claw
323:35 - ah apologies uh
323:39 - these need to be in the same quotation
323:41 - marks
323:42 - and i think that should fix that
323:45 - let's just save
323:48 - refresh
323:52 - and there we are so uh now that we've
323:55 - got our panel and everything
323:56 - let's take a look um
324:01 - and refresh it so now
324:05 - when you go into your mobile mode or
324:07 - mobile device
324:08 - mode you can see this panel
324:12 - is here and what we've done is we've now
324:16 - controlled
324:18 - or we've decided what the controls look
324:20 - like and can do
324:21 - on different screen sizes so if we had
324:24 - to
324:25 - get out of the console and refresh
324:28 - the panel goes back to normal
324:34 - so now in step 37 we're going to look at
324:37 - content density
324:39 - and we're going to adjust the content
324:41 - density based on the user's device
324:43 - which means you could have a mobile
324:45 - device with touch enabled so you'd want
324:47 - your
324:48 - buttons and things to be a bit bigger
324:51 - for your items and your table to be a
324:52 - bit bigger
324:53 - perhaps you want them to be a bit
324:55 - smaller and more compact
324:57 - on a larger screen like a laptop so you
324:59 - can get more information in
325:02 - so we're going to go ahead and add that
325:04 - functionality in
325:06 - so let's jump into the code and
325:09 - let's get our component open
325:13 - and in here we're going to find our
325:18 - init function and just after it
325:25 - we are going to call get content
325:30 - density class
325:33 - and we're going to run a function of
325:35 - that
325:41 - where we are going to do the following
325:47 - we're going to say if
325:51 - this dot underscore
325:54 - is cont whoops s
325:58 - content density class so if a content
326:02 - density class doesn't exist
326:05 - we need to add it so we're going to say
326:09 - if
326:13 - the device dot
326:17 - oops support
326:20 - touch so if the oops if the
326:24 - device doesn't support touch
326:30 - we need to set the
326:34 - the density class to compact so
326:38 - this dot underscore s
326:41 - constant content density class
326:46 - let's set that there content density
326:49 - class
326:50 - is going to equal sap ui
326:55 - size compact
327:00 - else
327:05 - this dot underscore
327:09 - is content density
327:12 - class is going to equal cosy sap
327:17 - um size
327:22 - cozy
327:25 - and um once we've run through
327:29 - that we are going to go ahead
327:33 - and return
327:36 - this dot underscore
327:40 - um content density class oh sorry
327:44 - return
327:48 - and that is that if
327:51 - that opens there perfect so
327:54 - that's fine so we're just determining
327:56 - whether or not we need to return the
327:58 - compact or cozy density class
328:00 - based on our logic here um
328:04 - so now that we have that let's run to
328:07 - our app
328:08 - controller
328:12 - and in our app controller we're going to
328:14 - add the on init
328:18 - event
328:20 - function and
328:23 - on uh let's just add our comma and
328:26 - within this function we are going to say
328:29 - this
328:30 - dot get view dot
328:34 - add style class
328:39 - and we're going to reference our
328:41 - component
328:43 - this dot get owner component
328:48 - and we're going to get the content
328:50 - density class so get
328:52 - content density
328:57 - class and
329:01 - that's fine so um
329:04 - we're just we're just literally going to
329:06 - add the style class
329:08 - based on the um what's happening in that
329:11 - logic
329:11 - in our component here so we're calling
329:14 - this
329:17 - now let's go ahead and find our hello
329:21 - dialog dot js
329:26 - and in here we are going to add
329:29 - the sync style class module
329:34 - sap slash ui slash call
329:37 - slash sync style
329:42 - class
329:45 - and we're going to bring that in
329:52 - and now when we
329:56 - when basically when we're loading our
329:59 - fragment
330:01 - all we're going to do is we're going to
330:03 - send through the settings
330:05 - so we're going to forward the compact
330:10 - or cozy style into the dialog
330:16 - so we call sync style class
330:21 - and we pass in our overview controller
330:26 - get controller
330:30 - and get owner
330:35 - component component
330:41 - and we are going to get
330:46 - content density class
330:53 - and we are going to set the view
330:56 - and the dialogue
331:04 - oh dialogue
331:10 - and let's just make sure i've opened
331:12 - this up ah
331:13 - there we are it's the problem so sync
331:15 - style class
331:17 - getting the content density class for
331:19 - the view and the dialog
331:21 - we can save that now
331:24 - we need to jump back into our manifest
331:29 - and we're looking for the
331:32 - sap ui5 section
331:36 - and now we want to find the content
331:38 - densities
331:42 - over here and we're now going to turn
331:45 - them on have them available
331:49 - in the manifest so
331:53 - let's go ahead and see if it's now
331:55 - shrunk
331:57 - in desktop mode these items so these
332:00 - should appear
332:01 - a little bit thinner
332:06 - and there you go so it might be hard to
332:08 - see but effectively these
332:10 - because we're now in the state and we're
332:12 - not on our mobile device
332:14 - it's shrunk these a little bit and so
332:17 - the content density has been changed
332:19 - based on the device
332:24 - so now the final section uh or step
332:28 - step 38 is going to be accessibility
332:32 - and all we're going to do is we're going
332:34 - to
332:36 - add some aria attributes
332:39 - to and that's accessible rich internet
332:41 - applications that's what that stands for
332:44 - and all they are are there a set of
332:46 - attributes to make things
332:48 - as readable as possible for people that
332:50 - battle to use computers
332:52 - people who might be visually impaired um
332:54 - we're gonna try and make the app as
332:56 - readable for them as possible
332:58 - so let's go ahead and
333:02 - jump straight in
333:07 - and we're going to first jump into the
333:10 - overview dot xml
333:15 - and once we're in here we're going to
333:16 - add a landmark info control
333:20 - and what we're going to do is underneath
333:22 - the page
333:24 - we need to add land
333:30 - info and we
333:33 - are just going to go ahead and close
333:35 - that
333:36 - off
333:40 - and once we've done that um
333:43 - we're going to add something called a
333:45 - page accessible landmark info
333:48 - control so page
333:54 - access
333:56 - accessible landmark
334:01 - info control oh and uh let's just
334:05 - close that off
334:11 - from here we're going to just add some
334:13 - attributes
334:18 - and so we've got root roll
334:22 - and that's set as region
334:26 - root label
334:30 - it's going to be set as
334:34 - i oops i 18 n
334:40 - hi 18n and it's going to be the
334:44 - overview whoops oh
334:48 - overview root
334:51 - label
334:55 - and let's just go ahead and
335:00 - add that to our
335:04 - i18n file
335:07 - over here so
335:10 - [Music]
335:14 - the view page
335:18 - over new page and the root
335:21 - label is going to be overview
335:26 - page um and we're also going to have
335:30 - a overview
335:35 - header label oops
335:44 - and that's going to be header
335:47 - and we're also going to have an over
335:53 - overview content label
335:58 - to label our content and
336:01 - this is just going to be
336:06 - this is going to be header
336:11 - and this is just going to be page
336:13 - content
336:14 - so these are just the labels we're going
336:15 - to have for the different sections which
336:18 - you'll see now when we run the page
336:20 - and we've got a rate whoops
336:23 - rating title
336:27 - for rate the product
336:32 - perfect so we've specified all of those
336:36 - um so we've got um our root label here
336:41 - and we are going to then specify the
336:43 - content
336:44 - role
336:48 - which is going to be on the main
336:54 - and we've got the content label
337:01 - specified from our i18n file as the
337:07 - overview overview
337:12 - content label
337:17 - and the header role
337:20 - is going to be set to a banner which
337:22 - will make sense when we actually
337:25 - whoops refresh the app and the
337:28 - header label will be set as
337:32 - again i 18n
337:37 - overview overview
337:42 - uh header label
337:45 - so we've got all of our different labels
337:47 - here which is perfect
337:50 - root label head label content label
337:51 - brilliant
337:53 - so you save that now we need to jump in
337:56 - to our invoice list view
338:02 - and in here we need to find
338:07 - we're going to add a panel at the top
338:10 - and specify a few bits and pieces
338:14 - so we need to open up
338:18 - a panel here
338:22 - and we've got our accessible
338:25 - roll set to region
338:31 - and we can close that off so let's keep
338:36 - let's close off our panel here
338:42 - and now we need to add in a header
338:48 - toolbar
338:50 - header
338:53 - toolbar and we just
338:56 - want to close that off as we go so we
338:59 - don't forget about it
339:03 - and underneath our header toolbar we
339:05 - want a toolbar
339:11 - also go ahead and close that
339:14 - off lovely
339:20 - and now we are going to add a title
339:23 - control
339:25 - with the text attribute
339:30 - from our eye 18 in
339:33 - file and it's the in
339:37 - invoice list
339:42 - oops it needs to be in quotes
339:46 - that's going to be the invoice list
339:48 - title which we've already got
339:52 - close that off then we're going to add
339:54 - in our toolbar spacer to separate things
339:56 - out
339:58 - toolbar spacer
340:03 - and now we are going to call a search
340:12 - field
340:18 - i mean it's just
340:22 - so we now had a search field
340:28 - with a width
340:31 - of 50
340:35 - and when we search we're going to run it
340:38 - on filter invoices
340:40 - that's the event on
340:43 - filter invoices
340:48 - lovely and um
340:52 - arya
340:55 - aria labeled by
340:59 - a search field label search
341:03 - field label so now we're adding in these
341:06 - different
341:07 - labels which you'll see appear shortly
341:11 - labeled by oh sorry
341:15 - aria described by
341:20 - search field description
341:24 - description
341:28 - and we're just going to add a
341:29 - placeholder
341:35 - and that's going to come from the i18n
341:41 - search field
341:44 - placeholder and we have that
341:49 - the i18n search field placeholder
341:55 - uh search field placeholder
341:59 - no so where is it let's go ahead and
342:02 - just add it
342:14 - so so that's all good
342:22 - and now we just close this
342:26 - off and everything is fine so now we've
342:29 - got our new panel
342:31 - holding our table and hit a toolbar
342:35 - and now we've got our label and our
342:36 - description here ready to go
342:39 - so now we
342:43 - need to jump into the hello panel view
342:47 - and under here we are going to add
342:52 - oops
342:56 - oh come on
343:02 - we're going to add the accessible
343:06 - roll we're going to add the accessible
343:08 - roll
343:10 - region brilliant so that's going to be
343:13 - included as well
343:16 - and so let's go ahead
343:19 - and see if it works
343:22 - all right it looks like we have a small
343:24 - issue let's f12 into the console
343:27 - and it looks like something's
343:31 - wrong in the
343:34 - uh where is it in the overview view so
343:38 - the xml
343:40 - so let's close this and have a look in
343:44 - our overview
343:45 - and see everything's fine fine fine
343:48 - okay this is white which means i haven't
343:51 - closed this off
343:53 - let's see if that worked
343:56 - so now when we refresh the page
344:00 - um you'll see uh
344:03 - once we so we can press um alt shift l
344:06 - um
344:06 - obviously you need to install um
344:09 - something like the landmarks control
344:11 - extension in the google chrome store
344:14 - where you can find that
344:15 - that will be linked in the walkthrough
344:17 - itself
344:18 - but i have it installed already so if i
344:20 - press something like alt shift
344:21 - l
344:25 - you can see i have all my different
344:29 - sections
344:31 - laid out here and
344:34 - that's pretty much it so you can add
344:35 - these wherever you need them
344:38 - and it helps for people who are for
344:41 - example visually impaired to
344:43 - sort of navigate around and and um
344:46 - yeah better use your app
344:52 - all right so that wraps up this full ui5
344:55 - course
344:55 - um covering the basics of building a ui5
344:58 - application
345:00 - um i hope it's helped you at some point
345:02 - and well done if you managed to make it
345:04 - through from
345:05 - step one all the way through to the end
345:08 - as always if you need access to any of
345:10 - the steps or
345:13 - code bits you can find them on
345:16 - the github repository which will be
345:18 - linked down in the description
345:20 - plus again you can always refer back to
345:22 - the sap documentation and the sap
345:24 - walkthrough
345:25 - which will have pretty much everything
345:26 - you need um
345:28 - on top of what i've covered here um if
345:31 - you have any questions please feel free
345:33 - to comment down below
345:34 - and i'll help where i can but otherwise
345:38 - don't forget if you liked the video
345:40 - please hit that like and subscribe
345:42 - button
345:43 - and as always thanks for watching